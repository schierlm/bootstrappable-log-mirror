<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-04-22.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000708"><span class="nick" style="color:#389600"><a href="#000708" label="[00:07:08]">&lt;OriansJ`&gt;</a></span><span class="message">indeed fossy right now the problem is mes is not distributed in a .tar but a .tar.gz and if we want to remove git submodules; it is something that needs to be addressed.</span></div><div class="line" id="001033"><span class="nick" style="color:#389600"><a href="#001033" label="[00:10:33]">&lt;OriansJ`&gt;</a></span><span class="message">so we either work it from the distribution side (janneke making .tar releases or mes-m2 doing a .tar release) or by finding something I can convert to M2-Planet C to solve the .gz problem with mescc</span></div><div class="line" id="001317"><span class="nick" style="color:#389600"><a href="#001317" label="[00:13:17]">&lt;OriansJ`&gt;</a></span><span class="message">or something like this: <a rel="nofollow" href="https://github.com/franzinc/zlib/">https://github.com/franzinc/zlib/</a>  that can run on mes-m2</span></div><div class="line" id="001342"><span class="nick" style="color:#389600"><a href="#001342" label="[00:13:42]">&lt;OriansJ`&gt;</a></span><span class="message">as that would also exist at that stage0</span></div><div class="line" id="001800"><span class="nick" style="color:#389600"><a href="#001800" label="[00:18:00]">&lt;OriansJ`&gt;</a></span><span class="message">but stikonas's link does look like something that can be converted in a week of work</span></div><div class="line" id="001858"><span class="nick" style="color:#8dd3c7"><a href="#001858" label="[00:18:58]">&lt;stikonas&gt;</a></span><span class="message">OriansJ`: well, that was just simple online search</span></div><div class="line" id="001859"><span class="nick" style="color:#389600"><a href="#001859" label="[00:18:59]">&lt;OriansJ`&gt;</a></span><span class="message">It would be easier if someone did some prep work to strip out all of the config options to only that which is needed by mes' .tar.gz file</span></div><div class="line" id="001915"><span class="nick" style="color:#8dd3c7"><a href="#001915" label="[00:19:15]">&lt;stikonas&gt;</a></span><span class="message">I am not claiming that it's the best/easiest option</span></div><div class="line" id="001932"><span class="nick" style="color:#8dd3c7"><a href="#001932" label="[00:19:32]">&lt;stikonas&gt;</a></span><span class="message">it just seems that it might be possible to find something</span></div><div class="line" id="002018"><span class="nick" style="color:#389600"><a href="#002018" label="[00:20:18]">&lt;OriansJ`&gt;</a></span><span class="message">indeed, it is just a matter of putting some search time in to find a reasonable starting place.</span></div><div class="line" id="002058"><span class="nick" style="color:#389600"><a href="#002058" label="[00:20:58]">&lt;OriansJ`&gt;</a></span><span class="message">Then putting time into simplifying it with GCC to something elegant that I can deal with converting to M2-Planet's subset</span></div><div class="line" id="002302"><span class="nick" style="color:#389600"><a href="#002302" label="[00:23:02]">&lt;OriansJ`&gt;</a></span><span class="message">I mean we literally went from a hex-monitor to a C compiler and a scheme able to run a C compiler powerful enough to get us bootstrapped to GCC. So getting a gunzip for M2-Planet is just a matter of putting in the effort</span></div><div class="line" id="002427"><span class="nick" style="color:#389600"><a href="#002427" label="[00:24:27]">&lt;OriansJ`&gt;</a></span><span class="message">now if gunzip requires floating point support or bit masking arrays, it might be beyound M2-Planet's ability to cope but at first glance, this looks like something entirely reasonable to obtain.</span></div><div class="line" id="003019"><span class="nick" style="color:#2e2a4a"><a href="#003019" label="[00:30:19]">&lt;xentrac&gt;</a></span><span class="message">it does not</span></div><div class="line" id="003034"><span class="nick" style="color:#2e2a4a"><a href="#003034" label="[00:30:34]">&lt;xentrac&gt;</a></span><span class="message">it does require bit field extraction though</span></div><div class="line" id="003146"><span class="nick" style="color:#389600"><a href="#003146" label="[00:31:46]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: foo = 0x1200 &amp; blah works just fine in M2-Planet</span></div><div class="line" id="003304"><span class="nick" style="color:#389600"><a href="#003304" label="[00:33:04]">&lt;OriansJ`&gt;</a></span><span class="message">as does foo = (0x12300 &amp; blah) &gt;&gt; baz</span></div><div class="line" id="003423"><span class="nick" style="color:#389600"><a href="#003423" label="[00:34:23]">&lt;OriansJ`&gt;</a></span><span class="message">bitwise and, or and xor function great along with bitshifts both left and right so extraction will be fine as long as the bit field isn't larger than something that could be expressed in a struct</span></div><div class="line" id="004450"><span class="nick" style="color:#2e2a4a"><a href="#004450" label="[00:44:50]">&lt;xentrac&gt;</a></span><span class="message">should be fine.  though I haven't uh actually implemented flate</span></div><div class="line" id="004511"><span class="nick" style="color:#2e2a4a"><a href="#004511" label="[00:45:11]">&lt;xentrac&gt;</a></span><span class="message">but definitely no floating-point :)</span></div><div class="line" id="004821"><span class="nick" style="color:#389600"><a href="#004821" label="[00:48:21]">&lt;OriansJ`&gt;</a></span><span class="message">well the best way to know for certain is to have a working minimal program that does exactly what we need and nothing more.</span></div><div class="line" id="005121"><span class="nick" style="color:#389600"><a href="#005121" label="[00:51:21]">&lt;OriansJ`&gt;</a></span><span class="message">let us either find a simple 1 file ungz for compile one from a simple library and strip it to the bone</span></div><div class="line" id="013030"><span class="nick">***</span><span class="message notice">terpri__ is now known as terpri</span></div><div class="line" id="014048"><span class="nick" style="color:#389600"><a href="#014048" label="[01:40:48]">&lt;OriansJ`&gt;</a></span><span class="message">god people seem obsessive about making a *fast* unpacker</span></div><div class="line" id="014206"><span class="nick" style="color:#389600"><a href="#014206" label="[01:42:06]">&lt;OriansJ`&gt;</a></span><span class="message">or look at this assembly version that gets inflate into x bytes</span></div><div class="line" id="022954"><span class="nick" style="color:#389600"><a href="#022954" label="[02:29:54]">&lt;OriansJ`&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/madler/zlib/blob/master/contrib/puff/puff.c">https://github.com/madler/zlib/blob/master/contrib/puff/puff.c</a>   seems like something we can put in order with reasonable effort</span></div><div class="line" id="023139"><span class="nick" style="color:#389600"><a href="#023139" label="[02:31:39]">&lt;OriansJ`&gt;</a></span><span class="message">might need to strip out the setjump and longjmp bits as M2-Planet doesn't yet support that.</span></div><div class="line" id="023558"><span class="nick" style="color:#80b1d3"><a href="#023558" label="[02:35:58]">&lt;ericonr&gt;</a></span><span class="message">800 lines with a bunch of comments :o</span></div><div class="line" id="023601"><span class="nick" style="color:#80b1d3"><a href="#023601" label="[02:36:01]">&lt;ericonr&gt;</a></span><span class="message">that's tiny</span></div><div class="line" id="024229"><span class="nick" style="color:#389600"><a href="#024229" label="[02:42:29]">&lt;OriansJ`&gt;</a></span><span class="message">just need to sort out the gzip wrapper format and bundle it together into a tiny ungz.c file for me to later port to M2-Planet's C subset</span></div><div class="line" id="024346"><span class="nick" style="color:#80b1d3"><a href="#024346" label="[02:43:46]">&lt;ericonr&gt;</a></span><span class="message">hm, I might be interested in doing that</span></div><div class="line" id="024359"><span class="nick" style="color:#80b1d3"><a href="#024359" label="[02:43:59]">&lt;ericonr&gt;</a></span><span class="message">depending on how long you can wait for that :p</span></div><div class="line" id="024405"><span class="nick" style="color:#80b1d3"><a href="#024405" label="[02:44:05]">&lt;ericonr&gt;</a></span><span class="message">and if no one is available for it yet</span></div><div class="line" id="024703"><span class="nick" style="color:#389600"><a href="#024703" label="[02:47:03]">&lt;OriansJ`&gt;</a></span><span class="message">ericonr: well take a shot at that if it looks like fun</span></div><div class="line" id="024910"><span class="nick" style="color:#389600"><a href="#024910" label="[02:49:10]">&lt;OriansJ`&gt;</a></span><span class="message">it should be able to be built via gcc ungz.c -o ungz and aim to keep it simple and easy to understand.</span></div><div class="line" id="025221"><span class="nick" style="color:#389600"><a href="#025221" label="[02:52:21]">&lt;OriansJ`&gt;</a></span><span class="message">also most people here are already over-allocated on tasks. So if you see something simple or fun that'll help the work being done, feel free to do it and share with us the amazing thing you did.</span></div><div class="line" id="025929"><span class="nick" style="color:#389600"><a href="#025929" label="[02:59:29]">&lt;OriansJ`&gt;</a></span><span class="message">because everytime one of us make a little bit of progress on the problem; we all benefit and because we are all making little bits of progress here and there. We have made huge amounts of progress together.</span></div><div class="line" id="031413"><span class="nick" style="color:#8dd3c7"><a href="#031413" label="[03:14:13]">&lt;stikonas&gt;</a></span><span class="message">fossy: I think we might soon hit a problem with cirrus CI</span></div><div class="line" id="031417"><span class="nick" style="color:#8dd3c7"><a href="#031417" label="[03:14:17]">&lt;stikonas&gt;</a></span><span class="message">it seems to time out in 2h</span></div><div class="line" id="031420"><span class="nick" style="color:#8dd3c7"><a href="#031420" label="[03:14:20]">&lt;stikonas&gt;</a></span><span class="message">I guess that's their limit</span></div><div class="line" id="031433"><span class="nick" style="color:#8dd3c7"><a href="#031433" label="[03:14:33]">&lt;stikonas&gt;</a></span><span class="message">(.yml has timeout of 3h)</span></div><div class="line" id="033145"><span class="nick" style="color:#6d2462"><a href="#033145" label="[03:31:45]">&lt;Hagfish&gt;</a></span><span class="message">that would be an interesting constraint to optimise for</span></div><div class="line" id="033248"><span class="nick" style="color:#6d2462"><a href="#033248" label="[03:32:48]">&lt;Hagfish&gt;</a></span><span class="message">i'm not sure how justifiable it would be to split the process over two jobs</span></div><div class="line" id="033303"><span class="nick" style="color:#389600"><a href="#033303" label="[03:33:03]">&lt;OriansJ`&gt;</a></span><span class="message">speedrun bootstrapping, see who can get the farthest in 2h of build time</span></div><div class="line" id="033309"><span class="nick" style="color:#6d2462"><a href="#033309" label="[03:33:09]">&lt;Hagfish&gt;</a></span><span class="message">heh, yeah</span></div><div class="line" id="033315"><span class="nick" style="color:#6d2462"><a href="#033315" label="[03:33:15]">&lt;Hagfish&gt;</a></span><span class="message">gcc% :)</span></div><div class="line" id="033340"><span class="nick" style="color:#6d2462"><a href="#033340" label="[03:33:40]">&lt;Hagfish&gt;</a></span><span class="message">fixed seed, glitchless</span></div><div class="line" id="033355"><span class="nick" style="color:#389600"><a href="#033355" label="[03:33:55]">&lt;OriansJ`&gt;</a></span><span class="message">lol</span></div><div class="line" id="033442"><span class="nick" style="color:#389600"><a href="#033442" label="[03:34:42]">&lt;OriansJ`&gt;</a></span><span class="message">rewrote GCC in hex0; speedrun time 20seconds beat that bitches lolz</span></div><div class="line" id="033631"><span class="nick" style="color:#6d2462"><a href="#033631" label="[03:36:31]">&lt;Hagfish&gt;</a></span><span class="message">would it make sense to do each step of &quot;parts.rst&quot; as a separate job, which uses specific outputs of previous steps?</span></div><div class="line" id="033639"><span class="nick" style="color:#6d2462"><a href="#033639" label="[03:36:39]">&lt;Hagfish&gt;</a></span><span class="message">segmented, new game plus</span></div><div class="line" id="033717"><span class="nick" style="color:#389600"><a href="#033717" label="[03:37:17]">&lt;OriansJ`&gt;</a></span><span class="message">ironically not even that far off from janneke's original fosdem 2017 plan for bootstrapping mes</span></div><div class="line" id="033744"><span class="nick" style="color:#6d2462"><a href="#033744" label="[03:37:44]">&lt;Hagfish&gt;</a></span><span class="message">on one hand that would expose any unexpected dependencies between the steps, but on the other hand it means that something might break when actually trying to run all the steps for real</span></div><div class="line" id="033754"><span class="nick" style="color:#389600"><a href="#033754" label="[03:37:54]">&lt;OriansJ`&gt;</a></span><span class="message"> <a rel="nofollow" href="https://video.fosdem.org/2017/K.4.601/guixsdbootstrap.vp8.webm">https://video.fosdem.org/2017/K.4.601/guixsdbootstrap.vp8.webm</a> </span></div><div class="line" id="033843"><span class="nick" style="color:#389600"><a href="#033843" label="[03:38:43]">&lt;OriansJ`&gt;</a></span><span class="message">I think I managed to finally convince janneke not to go that route</span></div><div class="line" id="033922"><span class="nick" style="color:#6d2462"><a href="#033922" label="[03:39:22]">&lt;Hagfish&gt;</a></span><span class="message">i think that live-bootstrap is a very reasonable approach</span></div><div class="line" id="034120"><span class="nick" style="color:#389600"><a href="#034120" label="[03:41:20]">&lt;OriansJ`&gt;</a></span><span class="message">I wonder if we could do a CI chain</span></div><div class="line" id="034209"><span class="nick" style="color:#389600"><a href="#034209" label="[03:42:09]">&lt;OriansJ`&gt;</a></span><span class="message">live-bootstrap-0 builds the first set of binaries, then live-bootstrap-1 depends on live-bootstrap-0 and builds out and repeat for infinite build time?</span></div><div class="line" id="034323"><span class="nick" style="color:#389600"><a href="#034323" label="[03:43:23]">&lt;OriansJ`&gt;</a></span><span class="message">say at every time the libc is updated for improved.</span></div><div class="line" id="034504"><span class="nick" style="color:#6d2462"><a href="#034504" label="[03:45:04]">&lt;Hagfish&gt;</a></span><span class="message">yeah, changes of libc might be a good way to conceptually split the process</span></div><div class="line" id="042119"><span class="nick" style="color:#80b1d3"><a href="#042119" label="[04:21:19]">&lt;ericonr&gt;</a></span><span class="message">OriansJ`: got it, cool :) if it works out and if you have a reference for the C subset, I might be interested :p</span></div><div class="line" id="043211"><span class="nick" style="color:#389600"><a href="#043211" label="[04:32:11]">&lt;OriansJ`&gt;</a></span><span class="message">ericonr: The C subset is touched on here: <a rel="nofollow" href="https://bootstrapping.miraheze.org/wiki/Stage0">https://bootstrapping.miraheze.org/wiki/Stage0</a>  but honestly getting a single file ungz.c would be progress, even if it uses more than the subset in its initial version.</span></div><div class="line" id="043414"><span class="nick" style="color:#389600"><a href="#043414" label="[04:34:14]">&lt;OriansJ`&gt;</a></span><span class="message">in short we have structs, unions, arrays, FUNCTION pointers, chars, int, long, unsigned and pointers for datatypes</span></div><div class="line" id="043506"><span class="nick" style="color:#389600"><a href="#043506" label="[04:35:06]">&lt;OriansJ`&gt;</a></span><span class="message">we support function calls, returns, gotos, if/else statements, for/while/do loops, break/continue statements and inline assembly.</span></div><div class="line" id="043608"><span class="nick" style="color:#389600"><a href="#043608" label="[04:36:08]">&lt;OriansJ`&gt;</a></span><span class="message">we also have some macro support as well for #define statements and #if/#elif/#else statements if condition inclusion is absolutely required.</span></div><div class="line" id="043707"><span class="nick" style="color:#389600"><a href="#043707" label="[04:37:07]">&lt;OriansJ`&gt;</a></span><span class="message">I have already implemented a subset of the C standard library in <a rel="nofollow" href="http://github.com/oriansj/M2libc">http://github.com/oriansj/M2libc</a>  and can add any additional primitives you might need.</span></div><div class="line" id="043812"><span class="nick" style="color:#389600"><a href="#043812" label="[04:38:12]">&lt;OriansJ`&gt;</a></span><span class="message">In short if it can be built by GCC and be easily tested, I can always trim it down to something M2-Planet can build.</span></div><div class="line" id="043859"><span class="nick" style="color:#389600"><a href="#043859" label="[04:38:59]">&lt;OriansJ`&gt;</a></span><span class="message">But I do get stuck on programs I can't properly test or break into easy to update chunks</span></div><div class="line" id="044351"><span class="nick" style="color:#389600"><a href="#044351" label="[04:43:51]">&lt;OriansJ`&gt;</a></span><span class="message">The key is don't aim for perfection, just help get the ball rolling in the right direction.</span></div><div class="line" id="044823"><span class="nick" style="color:#80b1d3"><a href="#044823" label="[04:48:23]">&lt;ericonr&gt;</a></span><span class="message">OriansJ`: okdo! thanks</span></div><div class="line" id="052519"><span class="nick" style="color:#234e69"><a href="#052519" label="[05:25:19]">&lt;fossy&gt;</a></span><span class="message">OriansJ`: that is the plan through sysabcdefgh etc</span></div><div class="line" id="052528"><span class="nick" style="color:#234e69"><a href="#052528" label="[05:25:28]">&lt;fossy&gt;</a></span><span class="message">but first I plan to finish kernel work</span></div><div class="line" id="093540"><span class="nick">***</span><span class="message notice">nckx is now known as raghavgururajan9</span></div><div class="line" id="093550"><span class="nick">***</span><span class="message notice">raghavgururajan9 is now known as nckx</span></div><div class="line" id="100406"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado_</span></div><div class="line" id="100412"><span class="nick">***</span><span class="message notice">rekado_ is now known as rekado</span></div><div class="line" id="104308"><span class="nick" style="color:#6c3d55"><a href="#104308" label="[10:43:08]">&lt;gforce_de1977&gt;</a></span><span class="message">iiii</span></div><div class="line" id="104319"><span class="nick" style="color:#6c3d55"><a href="#104319" label="[10:43:19]">&lt;gforce_de1977&gt;</a></span><span class="message">(sorry)</span></div><div class="line" id="124153"><span class="nick">***</span><span class="message notice">pgreco_ is now known as pgreco</span></div><div class="line" id="141607"><span class="nick">***</span><span class="message notice">bauen1_ is now known as bauen1</span></div><div class="line" id="185052"><span class="nick" style="color:#6c3d55"><a href="#185052" label="[18:50:52]">&lt;gforce_de1977&gt;</a></span><span class="message">stikonas: i have started the mkdir/sync tweak + masstest, lets see if this changes something: tomorrow morning, we have results: here the mkdir-minipatch: <a rel="nofollow" href="http://intercity-vpn.de/bootstrap/helpers.sh.txt">http://intercity-vpn.de/bootstrap/helpers.sh.txt</a> </span></div><div class="line" id="185150"><span class="nick" style="color:#8dd3c7"><a href="#185150" label="[18:51:50]">&lt;stikonas&gt;</a></span><span class="message">ok, hopefully it resolves some of the issues</span></div><div class="line" id="185211"><span class="nick" style="color:#8dd3c7"><a href="#185211" label="[18:52:11]">&lt;stikonas&gt;</a></span><span class="message">at least it would make sense then why you see it more often (less RAM)</span></div><div class="line" id="194611"><span class="nick">***</span><span class="message notice">Noisytoot_ is now known as Noisytoot</span></div><div class="line" id="203530"><span class="nick">***</span><span class="message notice">deltab_ is now known as deltab</span></div><div class="line" id="211352"><span class="nick" style="color:#d9d9d9"><a href="#211352" label="[21:13:52]">&lt;gforce_d11977&gt;</a></span><span class="message">if this is a RAM issue, i can make a mass-run with 4GIG instead of 3, but i'am in doubt</span></div><div class="line" id="211620"><span class="nick" style="color:#d9d9d9"><a href="#211620" label="[21:16:20]">&lt;gforce_d11977&gt;</a></span><span class="message">run.sh: line 15: sync: command not found -&gt; Subprocess error 32512 -&gt; ABORTING HARD</span></div><div class="line" id="212830"><span class="nick" style="color:#d9d9d9"><a href="#212830" label="[21:28:30]">&lt;gforce_d11977&gt;</a></span><span class="message">so sync is not a 'builtin', we we have to A) provide and compile a sync.c or B) tune our libc to always sync() when doing a writeXY() somehow...</span></div><div class="line" id="213147"><span class="nick" style="color:#d9d9d9"><a href="#213147" label="[21:31:47]">&lt;gforce_d11977&gt;</a></span><span class="message">maybe also fflush()</span></div><div class="line" id="215617"><span class="nick" style="color:#8dd3c7"><a href="#215617" label="[21:56:17]">&lt;stikonas&gt;</a></span><span class="message">gforce_d11977: sync is indeed not builtin</span></div><div class="line" id="215626"><span class="nick" style="color:#8dd3c7"><a href="#215626" label="[21:56:26]">&lt;stikonas&gt;</a></span><span class="message">but we build id at the same time as mkdir I think</span></div><div class="line" id="215658"><span class="nick" style="color:#2e2a4a"><a href="#215658" label="[21:56:58]">&lt;xentrac&gt;</a></span><span class="message">gforce_d11977: you don't need sync(1) (sync(8)?) for bootstrapping</span></div><div class="line" id="215726"><span class="nick" style="color:#8dd3c7"><a href="#215726" label="[21:57:26]">&lt;stikonas&gt;</a></span><span class="message">xentrac: there are some intermittent issues</span></div><div class="line" id="215728"><span class="nick" style="color:#2e2a4a"><a href="#215728" label="[21:57:28]">&lt;xentrac&gt;</a></span><span class="message">unless you're running on a CPU so long that your bootstrapping time is large compared to the mean time between power failures</span></div><div class="line" id="215739"><span class="nick" style="color:#8dd3c7"><a href="#215739" label="[21:57:39]">&lt;stikonas&gt;</a></span><span class="message">xentrac: if you have other ideas it might be nice to hear</span></div><div class="line" id="215752"><span class="nick" style="color:#2e2a4a"><a href="#215752" label="[21:57:52]">&lt;xentrac&gt;</a></span><span class="message">alias sync to /bin/true</span></div><div class="line" id="215813"><span class="nick" style="color:#8dd3c7"><a href="#215813" label="[21:58:13]">&lt;stikonas&gt;</a></span><span class="message">xentrac: OriansJ deliberately wanted to run real sync</span></div><div class="line" id="215823"><span class="nick" style="color:#2e2a4a"><a href="#215823" label="[21:58:23]">&lt;xentrac&gt;</a></span><span class="message">or am I totally misunderstanding the topic?</span></div><div class="line" id="215833"><span class="nick" style="color:#8dd3c7"><a href="#215833" label="[21:58:33]">&lt;stikonas&gt;</a></span><span class="message">well, sometimes code like</span></div><div class="line" id="215846"><span class="nick" style="color:#8dd3c7"><a href="#215846" label="[21:58:46]">&lt;stikonas&gt;</a></span><span class="message">mkdir $dir; cd $dir fails</span></div><div class="line" id="215855"><span class="nick" style="color:#8dd3c7"><a href="#215855" label="[21:58:55]">&lt;stikonas&gt;</a></span><span class="message">so OriansJ suggested inserting</span></div><div class="line" id="215904"><span class="nick" style="color:#8dd3c7"><a href="#215904" label="[21:59:04]">&lt;stikonas&gt;</a></span><span class="message">mkdir $dir; sync; cd $dir</span></div><div class="line" id="215911"><span class="nick" style="color:#2e2a4a"><a href="#215911" label="[21:59:11]">&lt;xentrac&gt;</a></span><span class="message">that's not what sync does</span></div><div class="line" id="215924"><span class="nick" style="color:#8dd3c7"><a href="#215924" label="[21:59:24]">&lt;stikonas&gt;</a></span><span class="message">e.g. see <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/issues/103">https://github.com/fosslinux/live-bootstrap/issues/103</a> </span></div><div class="line" id="215951"><span class="nick" style="color:#2e2a4a"><a href="#215951" label="[21:59:51]">&lt;xentrac&gt;</a></span><span class="message">if mkdir $dir; cd $dir fails then either your kernel has a bug, your shell has a bug, mkdir failed, or $dir has spaces or other special characters in it</span></div><div class="line" id="220012"><span class="nick" style="color:#8dd3c7"><a href="#220012" label="[22:00:12]">&lt;stikonas&gt;</a></span><span class="message">dir definitely has no spaces</span></div><div class="line" id="220017"><span class="nick" style="color:#8dd3c7"><a href="#220017" label="[22:00:17]">&lt;stikonas&gt;</a></span><span class="message">it's just e.g. libcpp</span></div><div class="line" id="220023"><span class="nick" style="color:#2e2a4a"><a href="#220023" label="[22:00:23]">&lt;xentrac&gt;</a></span><span class="message">if it's a timing-dependent bug then adding more stuff in the middle may mask it</span></div><div class="line" id="220059"><span class="nick" style="color:#2e2a4a"><a href="#220059" label="[22:00:59]">&lt;xentrac&gt;</a></span><span class="message">sleep 1 would probably work more reliably than sync for that</span></div><div class="line" id="220221"><span class="nick" style="color:#8dd3c7"><a href="#220221" label="[22:02:21]">&lt;stikonas&gt;</a></span><span class="message">basically this code fails <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/9f83e1213ea65cf6f2687c0c789b969cdf4cb93a/sysa/gcc-4.0.4/pass1.sh#L72">https://github.com/fosslinux/live-bootstrap/blob/9f83e1213ea65cf6f2687c0c789b969cdf4cb93a/sysa/gcc-4.0.4/pass1.sh#L72</a> </span></div><div class="line" id="220227"><span class="nick" style="color:#8dd3c7"><a href="#220227" label="[22:02:27]">&lt;stikonas&gt;</a></span><span class="message">(quite infrequently)</span></div><div class="line" id="220248"><span class="nick" style="color:#8dd3c7"><a href="#220248" label="[22:02:48]">&lt;stikonas&gt;</a></span><span class="message">oh, and mkdir also shouldn't fail</span></div><div class="line" id="220256"><span class="nick" style="color:#8dd3c7"><a href="#220256" label="[22:02:56]">&lt;stikonas&gt;</a></span><span class="message">because it's set -e</span></div><div class="line" id="220305"><span class="nick" style="color:#8dd3c7"><a href="#220305" label="[22:03:05]">&lt;stikonas&gt;</a></span><span class="message">so if mkdir fails, then script should abort</span></div><div class="line" id="220309"><span class="nick" style="color:#8dd3c7"><a href="#220309" label="[22:03:09]">&lt;stikonas&gt;</a></span><span class="message">maybe some kernel timing bugs</span></div><div class="line" id="220310"><span class="nick" style="color:#2e2a4a"><a href="#220310" label="[22:03:10]">&lt;xentrac&gt;</a></span><span class="message">good plan</span></div><div class="line" id="220316"><span class="nick" style="color:#2e2a4a"><a href="#220316" label="[22:03:16]">&lt;xentrac&gt;</a></span><span class="message">seems likely.  or the shell</span></div><div class="line" id="220329"><span class="nick" style="color:#8dd3c7"><a href="#220329" label="[22:03:29]">&lt;stikonas&gt;</a></span><span class="message">yeah, or the shell...</span></div><div class="line" id="220336"><span class="nick" style="color:#8dd3c7"><a href="#220336" label="[22:03:36]">&lt;stikonas&gt;</a></span><span class="message">especially since it's build with mes libc</span></div><div class="line" id="220341"><span class="nick" style="color:#2e2a4a"><a href="#220341" label="[22:03:41]">&lt;xentrac&gt;</a></span><span class="message">I mean you could imagine a shell bug where it does a wait() and some unrelated child process exits</span></div><div class="line" id="220402"><span class="nick" style="color:#2e2a4a"><a href="#220402" label="[22:04:02]">&lt;xentrac&gt;</a></span><span class="message">so it continues before mkdir finishes</span></div><div class="line" id="220438"><span class="nick" style="color:#8dd3c7"><a href="#220438" label="[22:04:38]">&lt;stikonas&gt;</a></span><span class="message">although, mkdir should be quite fast...</span></div><div class="line" id="220441"><span class="nick" style="color:#8dd3c7"><a href="#220441" label="[22:04:41]">&lt;stikonas&gt;</a></span><span class="message">it's in the RAM</span></div><div class="line" id="220456"><span class="nick" style="color:#2e2a4a"><a href="#220456" label="[22:04:56]">&lt;xentrac&gt;</a></span><span class="message">it should, yeah</span></div><div class="line" id="220505"><span class="nick" style="color:#8dd3c7"><a href="#220505" label="[22:05:05]">&lt;stikonas&gt;</a></span><span class="message">well, there is of course context switch...</span></div><div class="line" id="220544"><span class="nick" style="color:#2e2a4a"><a href="#220544" label="[22:05:44]">&lt;xentrac&gt;</a></span><span class="message">if I were maintaining this code I would definitely put doublequotes around $dir though.  I only leave shell variables undoublequoted if word splitting is something I actively want</span></div><div class="line" id="220551"><span class="nick" style="color:#2e2a4a"><a href="#220551" label="[22:05:51]">&lt;xentrac&gt;</a></span><span class="message">Bourne chose the wrong default</span></div><div class="line" id="220624"><span class="nick" style="color:#2e2a4a"><a href="#220624" label="[22:06:24]">&lt;xentrac&gt;</a></span><span class="message">I don't see anything in this script that could be running in the background and happen to terminate at the wrong time</span></div><div class="line" id="220657"><span class="nick" style="color:#8dd3c7"><a href="#220657" label="[22:06:57]">&lt;stikonas&gt;</a></span><span class="message">well, I usually put double quoutes, but in this case $dir is defined just above</span></div><div class="line" id="220659"><span class="nick" style="color:#8dd3c7"><a href="#220659" label="[22:06:59]">&lt;stikonas&gt;</a></span><span class="message">and without spaces</span></div><div class="line" id="220902"><span class="nick" style="color:#2e2a4a"><a href="#220902" label="[22:09:02]">&lt;xentrac&gt;</a></span><span class="message">yes, I didn't mean to imply that it was a bug</span></div><div class="line" id="220921"><span class="nick" style="color:#2e2a4a"><a href="#220921" label="[22:09:21]">&lt;xentrac&gt;</a></span><span class="message">your practices are valid :)</span></div><div class="line" id="221239"><span class="nick" style="color:#8dd3c7"><a href="#221239" label="[22:12:39]">&lt;stikonas&gt;</a></span><span class="message">there are a couple of other issues if you have any ideas: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/issues">https://github.com/fosslinux/live-bootstrap/issues</a> </span></div><div class="line" id="221318"><span class="nick" style="color:#8dd3c7"><a href="#221318" label="[22:13:18]">&lt;stikonas&gt;</a></span><span class="message">(there were more, but those are fixed now, some where real issues due to pre-generated files)</span></div><div class="line" id="221351"><span class="nick" style="color:#2e2a4a"><a href="#221351" label="[22:13:51]">&lt;xentrac&gt;</a></span><span class="message">congratulations!</span></div><div class="line" id="221352"><span class="nick" style="color:#2e2a4a"><a href="#221352" label="[22:13:52]">&lt;xentrac&gt;</a></span><span class="message">I have no ideas</span></div><div class="line" id="221540"><span class="nick" style="color:#8dd3c7"><a href="#221540" label="[22:15:40]">&lt;stikonas&gt;</a></span><span class="message">but they look a bit similar to the first one</span></div><div class="line" id="221546"><span class="nick" style="color:#8dd3c7"><a href="#221546" label="[22:15:46]">&lt;stikonas&gt;</a></span><span class="message">e.g. 2nd is configure is missing for some reason</span></div><div class="line" id="221610"><span class="nick" style="color:#8dd3c7"><a href="#221610" label="[22:16:10]">&lt;stikonas&gt;</a></span><span class="message">so a bit similar to this one where directory is missing</span></div><br /></div></body></html>