<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-02-18.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="011509"><span class="nick" style="color:#389600"><a href="#011509" label="[01:15:09]">&lt;rickmasters&gt;</a></span><span class="message">Mikaku: sorry for the delay, the offsets were zero because I made a mistake typing in the output. I was running in graphics mode.</span></div><div class="line" id="023439"><span class="nick" style="color:#8dd3c7"><a href="#023439" label="[02:34:39]">&lt;fossy&gt;</a></span><span class="message">stikonas, pder: i think i'd prefer recreating unified-libc.c - relying on previous stages isn't the best, imo</span></div><div class="line" id="023631"><span class="nick" style="color:#2e2a4a"><a href="#023631" label="[02:36:31]">&lt;stikonas&gt;</a></span><span class="message">fossy: perhaps we should then split libc build into a separate package?</span></div><div class="line" id="023651"><span class="nick" style="color:#2e2a4a"><a href="#023651" label="[02:36:51]">&lt;stikonas&gt;</a></span><span class="message">we do that later with musl libc</span></div><div class="line" id="023705"><span class="nick" style="color:#8dd3c7"><a href="#023705" label="[02:37:05]">&lt;fossy&gt;</a></span><span class="message">stikonas: yes, that is a good idea</span></div><div class="line" id="023714"><span class="nick" style="color:#2e2a4a"><a href="#023714" label="[02:37:14]">&lt;stikonas&gt;</a></span><span class="message">pder: could you do that as part of your changes?</span></div><div class="line" id="023730"><span class="nick" style="color:#8dd3c7"><a href="#023730" label="[02:37:30]">&lt;fossy&gt;</a></span><span class="message">that was done back when there was much less structure in the project, so everything was a bit all over the place</span></div><div class="line" id="023743"><span class="nick" style="color:#2e2a4a"><a href="#023743" label="[02:37:43]">&lt;stikonas&gt;</a></span><span class="message">indeed</span></div><div class="line" id="023753"><span class="nick" style="color:#2e2a4a"><a href="#023753" label="[02:37:53]">&lt;stikonas&gt;</a></span><span class="message">well, pre-bash stuff is still somewhat less structured</span></div><div class="line" id="023804"><span class="nick" style="color:#2e2a4a"><a href="#023804" label="[02:38:04]">&lt;stikonas&gt;</a></span><span class="message">maybe if we ever get gash working, we can structure it a bit more too</span></div><div class="line" id="023804"><span class="nick" style="color:#8dd3c7"><a href="#023804" label="[02:38:04]">&lt;fossy&gt;</a></span><span class="message">yes, kind of a nessecity tho</span></div><div class="line" id="023809"><span class="nick" style="color:#8dd3c7"><a href="#023809" label="[02:38:09]">&lt;fossy&gt;</a></span><span class="message">yeah</span></div><div class="line" id="023827"><span class="nick" style="color:#2e2a4a"><a href="#023827" label="[02:38:27]">&lt;stikonas&gt;</a></span><span class="message">though we might not be able to reuse the same .helpers.sh script</span></div><div class="line" id="023846"><span class="nick" style="color:#2e2a4a"><a href="#023846" label="[02:38:46]">&lt;stikonas&gt;</a></span><span class="message">since that one relies on more binaries (coreutils, etc being present)</span></div><div class="line" id="023923"><span class="nick" style="color:#2e2a4a"><a href="#023923" label="[02:39:23]">&lt;stikonas&gt;</a></span><span class="message">fossy: so for now I'm not looking at readline, will come back to it later. I'll first update binutils in sysa</span></div><div class="line" id="023938"><span class="nick" style="color:#2e2a4a"><a href="#023938" label="[02:39:38]">&lt;stikonas&gt;</a></span><span class="message">We should be able to build something newer than ancient 2.14</span></div><div class="line" id="024039"><span class="nick" style="color:#2e2a4a"><a href="#024039" label="[02:40:39]">&lt;stikonas&gt;</a></span><span class="message">fossy: interestingly, last tcc rebuild (with last musl rebuild) are important for the first stage of GCC</span></div><div class="line" id="024101"><span class="nick" style="color:#8dd3c7"><a href="#024101" label="[02:41:01]">&lt;fossy&gt;</a></span><span class="message">stikonas: that would be good, esp for architecture support</span></div><div class="line" id="024102"><span class="nick" style="color:#2e2a4a"><a href="#024102" label="[02:41:02]">&lt;stikonas&gt;</a></span><span class="message">for some reason without them gcc build fails (but after ./xgcc binary is built)</span></div><div class="line" id="024119"><span class="nick" style="color:#8dd3c7"><a href="#024119" label="[02:41:19]">&lt;fossy&gt;</a></span><span class="message">odd</span></div><div class="line" id="024124"><span class="nick" style="color:#2e2a4a"><a href="#024124" label="[02:41:24]">&lt;stikonas&gt;</a></span><span class="message">yes...</span></div><div class="line" id="024135"><span class="nick" style="color:#2e2a4a"><a href="#024135" label="[02:41:35]">&lt;stikonas&gt;</a></span><span class="message">anyway, I just moved that final tcc rebuild before gcc</span></div><div class="line" id="024150"><span class="nick" style="color:#2e2a4a"><a href="#024150" label="[02:41:50]">&lt;stikonas&gt;</a></span><span class="message">and moving newer autotools pre binutils now</span></div><div class="line" id="024233"><span class="nick" style="color:#8dd3c7"><a href="#024233" label="[02:42:33]">&lt;fossy&gt;</a></span><span class="message">i finished parallelism, but ran into an issue that debug symbols for autogen, guile and gcc are not reproducibile when there is parallelism</span></div><div class="line" id="024246"><span class="nick" style="color:#8dd3c7"><a href="#024246" label="[02:42:46]">&lt;fossy&gt;</a></span><span class="message">so i'm going back to stripping first, then parallelism irreproducibility will be eliminated</span></div><div class="line" id="024300"><span class="nick" style="color:#2e2a4a"><a href="#024300" label="[02:43:00]">&lt;stikonas&gt;</a></span><span class="message">if we can get stripping working...</span></div><div class="line" id="024302"><span class="nick" style="color:#8dd3c7"><a href="#024302" label="[02:43:02]">&lt;fossy&gt;</a></span><span class="message">i looked through Gentoo estrip, but it uses file anyway...</span></div><div class="line" id="024309"><span class="nick" style="color:#8dd3c7"><a href="#024309" label="[02:43:09]">&lt;fossy&gt;</a></span><span class="message">so we need file either way</span></div><div class="line" id="024309"><span class="nick" style="color:#2e2a4a"><a href="#024309" label="[02:43:09]">&lt;stikonas&gt;</a></span><span class="message">oh ok...</span></div><div class="line" id="024317"><span class="nick" style="color:#2e2a4a"><a href="#024317" label="[02:43:17]">&lt;stikonas&gt;</a></span><span class="message">well, file is not a big deal</span></div><div class="line" id="024324"><span class="nick" style="color:#2e2a4a"><a href="#024324" label="[02:43:24]">&lt;stikonas&gt;</a></span><span class="message">though we can only get it after python</span></div><div class="line" id="024354"><span class="nick" style="color:#8dd3c7"><a href="#024354" label="[02:43:54]">&lt;fossy&gt;</a></span><span class="message">how do you mean? file is in C</span></div><div class="line" id="024416"><span class="nick" style="color:#2e2a4a"><a href="#024416" label="[02:44:16]">&lt;stikonas&gt;</a></span><span class="message">oh, is it, ok...</span></div><div class="line" id="024422"><span class="nick" style="color:#2e2a4a"><a href="#024422" label="[02:44:22]">&lt;stikonas&gt;</a></span><span class="message">I thought it needs python...</span></div><div class="line" id="024446"><span class="nick" style="color:#2e2a4a"><a href="#024446" label="[02:44:46]">&lt;stikonas&gt;</a></span><span class="message">yeah, then it is no problem at all</span></div><div class="line" id="024532"><span class="nick" style="color:#8dd3c7"><a href="#024532" label="[02:45:32]">&lt;fossy&gt;</a></span><span class="message">oh, there is a python ffi-style interface</span></div><div class="line" id="024543"><span class="nick" style="color:#8dd3c7"><a href="#024543" label="[02:45:43]">&lt;fossy&gt;</a></span><span class="message">but its an extension of the C part, not core</span></div><div class="line" id="024543"><span class="nick" style="color:#2e2a4a"><a href="#024543" label="[02:45:43]">&lt;stikonas&gt;</a></span><span class="message">ok, maybe that's why I was thinking of python</span></div><div class="line" id="024556"><span class="nick" style="color:#2e2a4a"><a href="#024556" label="[02:45:56]">&lt;stikonas&gt;</a></span><span class="message">I guess we don't need that extension</span></div><div class="line" id="025209"><span class="nick" style="color:#2e2a4a"><a href="#025209" label="[02:52:09]">&lt;stikonas&gt;</a></span><span class="message">fossy: what about gcc -s?</span></div><div class="line" id="025219"><span class="nick" style="color:#2e2a4a"><a href="#025219" label="[02:52:19]">&lt;stikonas&gt;</a></span><span class="message">can we not use that instead of stripping afterwards</span></div><div class="line" id="025527"><span class="nick" style="color:#8dd3c7"><a href="#025527" label="[02:55:27]">&lt;fossy&gt;</a></span><span class="message">not universally. eg, for binaries, you can (safe to strip all symbol tables &amp; debugging); but for static libraries, that is not always safe (eg, libgcc.a). this is why different options (none vs --strip-unneeded vs --strip-debug) are used for different types of libraries</span></div><div class="line" id="025530"><span class="nick" style="color:#8dd3c7"><a href="#025530" label="[02:55:30]">&lt;fossy&gt;</a></span><span class="message">at least that's my understanding</span></div><div class="line" id="025737"><span class="nick" style="color:#2e2a4a"><a href="#025737" label="[02:57:37]">&lt;stikonas&gt;</a></span><span class="message">hmm, that -s command seems to be part of linking stage</span></div><div class="line" id="025806"><span class="nick" style="color:#2e2a4a"><a href="#025806" label="[02:58:06]">&lt;stikonas&gt;</a></span><span class="message">I'm a bit surprised that it is involved for .a archives</span></div><div class="line" id="025816"><span class="nick" style="color:#2e2a4a"><a href="#025816" label="[02:58:16]">&lt;stikonas&gt;</a></span><span class="message">those are not really linked, just an archive of .o files</span></div><div class="line" id="030053"><span class="nick" style="color:#2e2a4a"><a href="#030053" label="[03:00:53]">&lt;stikonas&gt;</a></span><span class="message">and my autotools refactoring might also enable me to update xz</span></div><div class="line" id="030115"><span class="nick" style="color:#2e2a4a"><a href="#030115" label="[03:01:15]">&lt;stikonas&gt;</a></span><span class="message">as I'm moving autotools much earlier, so I could build newer xz with new autotools dependencies</span></div><div class="line" id="054857"><span class="nick" style="color:#2e2a4a"><a href="#054857" label="[05:48:57]">&lt;stikonas&gt;</a></span><span class="message">argh, the original bash implementation (pre-find) of packages does not support empty dirs</span></div><div class="line" id="054907"><span class="nick" style="color:#2e2a4a"><a href="#054907" label="[05:49:07]">&lt;stikonas&gt;</a></span><span class="message">I guess I should move findutils back a bit earlier...</span></div><div class="line" id="055119"><span class="nick" style="color:#2e2a4a"><a href="#055119" label="[05:51:19]">&lt;stikonas&gt;</a></span><span class="message">argh, but findutils I think depends on binutils</span></div><div class="line" id="055338"><span class="nick" style="color:#2e2a4a"><a href="#055338" label="[05:53:38]">&lt;stikonas&gt;</a></span><span class="message">I think it's time to improve get_files from helpers.sh</span></div><div class="line" id="064230"><span class="nick" style="color:#2e2a4a"><a href="#064230" label="[06:42:30]">&lt;stikonas&gt;</a></span><span class="message">fossy: still here?</span></div><div class="line" id="064332"><span class="nick" style="color:#2e2a4a"><a href="#064332" label="[06:43:32]">&lt;stikonas&gt;</a></span><span class="message">fossy: do you remember why here <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysa/helpers.sh#L349">https://github.com/fosslinux/live-bootstrap/blob/master/sysa/helpers.sh#L349</a>  we loop and append to tar</span></div><div class="line" id="064344"><span class="nick" style="color:#2e2a4a"><a href="#064344" label="[06:43:44]">&lt;stikonas&gt;</a></span><span class="message">rather than construct one long tar file</span></div><div class="line" id="064350"><span class="nick" style="color:#2e2a4a"><a href="#064350" label="[06:43:50]">&lt;stikonas&gt;</a></span><span class="message">is it due to command line length?</span></div><div class="line" id="064557"><span class="nick" style="color:#2e2a4a"><a href="#064557" label="[06:45:57]">&lt;stikonas&gt;</a></span><span class="message">anyway, I'll probably leave the loop, should be safer</span></div><div class="line" id="064716"><span class="nick" style="color:#2e2a4a"><a href="#064716" label="[06:47:16]">&lt;stikonas&gt;</a></span><span class="message">hopefully I have a working get_files now</span></div><div class="line" id="064753"><span class="nick" style="color:#2e2a4a"><a href="#064753" label="[06:47:53]">&lt;stikonas&gt;</a></span><span class="message">and it even ouputs nicer list, i.e. ./dir/subdir rather than ./dir/./subdir</span></div><div class="line" id="083545"><span class="nick" style="color:#6b8072"><a href="#083545" label="[08:35:45]">&lt;lilyp&gt;</a></span><span class="message">Hi folks, for those of you interested in Vala (sort-of C#, but for GNOME devs), I've bootstrapped it partly over at <a rel="nofollow" href="https://gitlab.gnome.org/lilyp/vala-bootstrap">https://gitlab.gnome.org/lilyp/vala-bootstrap</a>  – help welcome</span></div><div class="line" id="083754"><span class="nick" style="color:#80b1d3"><a href="#083754" label="[08:37:54]">&lt;sam_&gt;</a></span><span class="message">oh nice, thank you for sharing</span></div><div class="line" id="084238"><span class="nick" style="color:#8dd3c7"><a href="#084238" label="[08:42:38]">&lt;fossy&gt;</a></span><span class="message">stikonas: determinstic file ordering in tars</span></div><div class="line" id="084417"><span class="nick" style="color:#8dd3c7"><a href="#084417" label="[08:44:17]">&lt;fossy&gt;</a></span><span class="message">by default, tar is not deterministic, and before we have --sort option to tar we have to do a few hacks</span></div><div class="line" id="084454"><span class="nick" style="color:#8dd3c7"><a href="#084454" label="[08:44:54]">&lt;fossy&gt;</a></span><span class="message">once we can make filelist.txt properly, then we use that (it's much faster)</span></div><div class="line" id="084503"><span class="nick" style="color:#8dd3c7"><a href="#084503" label="[08:45:03]">&lt;fossy&gt;</a></span><span class="message">before that, we use get_files</span></div><div class="line" id="085553"><span class="nick" style="color:#2e2a4a"><a href="#085553" label="[08:55:53]">&lt;stikonas&gt;</a></span><span class="message">oh, tar itself changes the order</span></div><div class="line" id="085609"><span class="nick" style="color:#2e2a4a"><a href="#085609" label="[08:56:09]">&lt;stikonas&gt;</a></span><span class="message">anyway, I've fixed a few issues in get_files</span></div><div class="line" id="085641"><span class="nick" style="color:#2e2a4a"><a href="#085641" label="[08:56:41]">&lt;stikonas&gt;</a></span><span class="message">doing some final testing, but I think it will even generate tarballs with the same checksum as find version</span></div><div class="line" id="085703"><span class="nick" style="color:#8dd3c7"><a href="#085703" label="[08:57:03]">&lt;fossy&gt;</a></span><span class="message">neat!</span></div><div class="line" id="085717"><span class="nick" style="color:#8dd3c7"><a href="#085717" label="[08:57:17]">&lt;fossy&gt;</a></span><span class="message">yeah, get_files was a bit of quick kludge haha</span></div><div class="line" id="085733"><span class="nick" style="color:#8dd3c7"><a href="#085733" label="[08:57:33]">&lt;fossy&gt;</a></span><span class="message">i don't particularly love shell</span></div><div class="line" id="085743"><span class="nick" style="color:#2e2a4a"><a href="#085743" label="[08:57:43]">&lt;stikonas&gt;</a></span><span class="message">the fix is fairly small</span></div><div class="line" id="085800"><span class="nick" style="color:#8dd3c7"><a href="#085800" label="[08:58:00]">&lt;fossy&gt;</a></span><span class="message">surprised</span></div><div class="line" id="085940"><span class="nick" style="color:#2e2a4a"><a href="#085940" label="[08:59:40]">&lt;stikonas&gt;</a></span><span class="message">I remove ./ from one echo call, moved another echo call out of esle block to run unconditionally (to print directories without files) and added --no-recursion to tar call</span></div><div class="line" id="090101"><span class="nick" style="color:#2e2a4a"><a href="#090101" label="[09:01:01]">&lt;stikonas&gt;</a></span><span class="message">but yes, shell is a bit clunky for more complicated programs</span></div><div class="line" id="090354"><span class="nick" style="color:#8dd3c7"><a href="#090354" label="[09:03:54]">&lt;fossy&gt;</a></span><span class="message">neat! thanks</span></div><div class="line" id="171005"><span class="nick" style="color:#6d2462"><a href="#171005" label="[17:10:05]">&lt;stikonas[m]&gt;</a></span><span class="message">ok, I don't think it updated get_filels will provide the same ordering as find command but it's not critical to have that...</span></div><div class="line" id="171234"><span class="nick" style="color:#2e2a4a"><a href="#171234" label="[17:12:34]">&lt;stikonas&gt;</a></span><span class="message">oh actually sort is available at the same time as ls</span></div><div class="line" id="171238"><span class="nick" style="color:#2e2a4a"><a href="#171238" label="[17:12:38]">&lt;stikonas&gt;</a></span><span class="message">so I could run it past sort...</span></div><div class="line" id="172828"><span class="nick" style="color:#234e69"><a href="#172828" label="[17:28:28]">&lt;pder&gt;</a></span><span class="message">fossy, stikonas: I went with recreating unified-libc.c.  I just need to work through fixing many checksums.  What is the technique for doing that?  --update-checksums doesnt appear to be writing updates to where I think it would be</span></div><div class="line" id="173809"><span class="nick" style="color:#2e2a4a"><a href="#173809" label="[17:38:09]">&lt;stikonas&gt;</a></span><span class="message">pder: --update-checksums only ignores checksums</span></div><div class="line" id="173827"><span class="nick" style="color:#2e2a4a"><a href="#173827" label="[17:38:27]">&lt;stikonas&gt;</a></span><span class="message">you should run it till completion in qemu mode</span></div><div class="line" id="173836"><span class="nick" style="color:#2e2a4a"><a href="#173836" label="[17:38:36]">&lt;stikonas&gt;</a></span><span class="message">mount /dev/loop0p1 somewhere</span></div><div class="line" id="173852"><span class="nick" style="color:#2e2a4a"><a href="#173852" label="[17:38:52]">&lt;stikonas&gt;</a></span><span class="message">and then cd into that mount path</span></div><div class="line" id="173911"><span class="nick" style="color:#2e2a4a"><a href="#173911" label="[17:39:11]">&lt;stikonas&gt;</a></span><span class="message">actually cd into ${mount_path}/usr/src/repo</span></div><div class="line" id="173915"><span class="nick" style="color:#2e2a4a"><a href="#173915" label="[17:39:15]">&lt;stikonas&gt;</a></span><span class="message">and then sha256sum *</span></div><div class="line" id="173923"><span class="nick" style="color:#2e2a4a"><a href="#173923" label="[17:39:23]">&lt;stikonas&gt;</a></span><span class="message">and you need qemu mode to capture all checksums</span></div><div class="line" id="173949"><span class="nick" style="color:#2e2a4a"><a href="#173949" label="[17:39:49]">&lt;stikonas&gt;</a></span><span class="message">actually early checksums are stored somewhere else....</span></div><div class="line" id="173950"><span class="nick" style="color:#2e2a4a"><a href="#173950" label="[17:39:50]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="174049"><span class="nick" style="color:#234e69"><a href="#174049" label="[17:40:49]">&lt;pder&gt;</a></span><span class="message">I was fixing them manually and rebuilding each time, but I expect they will stop changing one we switch to musl</span></div><div class="line" id="174056"><span class="nick" style="color:#2e2a4a"><a href="#174056" label="[17:40:56]">&lt;stikonas&gt;</a></span><span class="message">pder: so I've opened  some build script and it has install ${pkg}.checksums ${srcdir}</span></div><div class="line" id="174111"><span class="nick" style="color:#2e2a4a"><a href="#174111" label="[17:41:11]">&lt;stikonas&gt;</a></span><span class="message">yeah, once you switch to musl it will work</span></div><div class="line" id="174135"><span class="nick" style="color:#2e2a4a"><a href="#174135" label="[17:41:35]">&lt;stikonas&gt;</a></span><span class="message">not sure which package is the last one to change</span></div><div class="line" id="174145"><span class="nick" style="color:#2e2a4a"><a href="#174145" label="[17:41:45]">&lt;stikonas&gt;</a></span><span class="message">might be musl or even tcc after that</span></div><div class="line" id="174152"><span class="nick" style="color:#2e2a4a"><a href="#174152" label="[17:41:52]">&lt;stikonas&gt;</a></span><span class="message">but at some point they indeed stop changing</span></div><div class="line" id="174200"><span class="nick" style="color:#2e2a4a"><a href="#174200" label="[17:42:00]">&lt;stikonas&gt;</a></span><span class="message">but coreutils would be painful to update</span></div><div class="line" id="174258"><span class="nick" style="color:#234e69"><a href="#174258" label="[17:42:58]">&lt;pder&gt;</a></span><span class="message">Yeah, thats where I stopped yesterday</span></div><div class="line" id="174318"><span class="nick" style="color:#234e69"><a href="#174318" label="[17:43:18]">&lt;pder&gt;</a></span><span class="message">I can probably capture the log, and make a little script to update the checksum files</span></div><div class="line" id="175032"><span class="nick" style="color:#2e2a4a"><a href="#175032" label="[17:50:32]">&lt;stikonas&gt;</a></span><span class="message">just run with --update-checksums</span></div><div class="line" id="175042"><span class="nick" style="color:#2e2a4a"><a href="#175042" label="[17:50:42]">&lt;stikonas&gt;</a></span><span class="message">and look inside build directory</span></div><div class="line" id="175146"><span class="nick" style="color:#2e2a4a"><a href="#175146" label="[17:51:46]">&lt;stikonas&gt;</a></span><span class="message">e.g. tmp/sysa/sysa/coreutils-5.0/coreutils-5.0.checksums</span></div><div class="line" id="175155"><span class="nick" style="color:#2e2a4a"><a href="#175155" label="[17:51:55]">&lt;stikonas&gt;</a></span><span class="message">after it passed that stage</span></div><div class="line" id="175230"><span class="nick" style="color:#2e2a4a"><a href="#175230" label="[17:52:30]">&lt;stikonas&gt;</a></span><span class="message">then just copy that file outside</span></div><div class="line" id="175425"><span class="nick" style="color:#2e2a4a"><a href="#175425" label="[17:54:25]">&lt;stikonas&gt;</a></span><span class="message">otherwise you have to rebuild mes each time...</span></div><div class="line" id="175431"><span class="nick" style="color:#2e2a4a"><a href="#175431" label="[17:54:31]">&lt;stikonas&gt;</a></span><span class="message">and that takes like 20 minutes</span></div><div class="line" id="180303"><span class="nick" style="color:#234e69"><a href="#180303" label="[18:03:03]">&lt;pder&gt;</a></span><span class="message">ok, I will try that.  I thought that file was not getting updated.  Do I have to use qemu mode?</span></div><div class="line" id="180559"><span class="nick" style="color:#6d2462"><a href="#180559" label="[18:05:59]">&lt;stikonas[m]&gt;</a></span><span class="message">Not for early kaem checksums</span></div><div class="line" id="180639"><span class="nick" style="color:#6d2462"><a href="#180639" label="[18:06:39]">&lt;stikonas[m]&gt;</a></span><span class="message">qemu mode is only needed if you want to grab *all* newer checksums including kexec-tools</span></div><div class="line" id="182756"><span class="nick" style="color:#389600"><a href="#182756" label="[18:27:56]">&lt;rickmasters&gt;</a></span><span class="message">Mikaku: I finally got serial working. The ttyS0 login was commented out in /etc/inittab.</span></div><div class="line" id="182843"><span class="nick" style="color:#389600"><a href="#182843" label="[18:28:43]">&lt;rickmasters&gt;</a></span><span class="message">Mikaku: I had to boot in graphics mode, edit that, then I could boot and login in serial.</span></div><div class="line" id="183215"><span class="nick" style="color:#6c3d55"><a href="#183215" label="[18:32:15]">&lt;Mikaku&gt;</a></span><span class="message">rickmasters: great!, now it's time to upgrade to FiwixOS 3.2 ;-)</span></div><div class="line" id="183517"><span class="nick" style="color:#389600"><a href="#183517" label="[18:35:17]">&lt;rickmasters&gt;</a></span><span class="message">Mikaku: I've been testing the lseek hole with FiwixOS 3.2, same results. I just added a comment to the Issue.</span></div><div class="line" id="183531"><span class="nick" style="color:#6c3d55"><a href="#183531" label="[18:35:31]">&lt;Mikaku&gt;</a></span><span class="message">Ok, checking</span></div><div class="line" id="184026"><span class="nick" style="color:#6c3d55"><a href="#184026" label="[18:40:26]">&lt;Mikaku&gt;</a></span><span class="message">rickmasters: OK, it's time to keep trying on my side, thanks</span></div><div class="line" id="184141"><span class="nick" style="color:#6c3d55"><a href="#184141" label="[18:41:41]">&lt;Mikaku&gt;</a></span><span class="message">rickmasters: BTW, have you tested it with the lates version in GitHub?</span></div><div class="line" id="184259"><span class="nick" style="color:#389600"><a href="#184259" label="[18:42:59]">&lt;rickmasters&gt;</a></span><span class="message">Mikaku: yes, latest testing was from current github, built from source</span></div><div class="line" id="184439"><span class="nick" style="color:#6c3d55"><a href="#184439" label="[18:44:39]">&lt;Mikaku&gt;</a></span><span class="message">perfect</span></div><div class="line" id="184714"><span class="nick" style="color:#389600"><a href="#184714" label="[18:47:14]">&lt;rickmasters&gt;</a></span><span class="message">Mikaku: I noticed you boot off a floppy, are you sure the test is run on ext2?</span></div><div class="line" id="184806"><span class="nick" style="color:#6c3d55"><a href="#184806" label="[18:48:06]">&lt;Mikaku&gt;</a></span><span class="message">yes, I boot from floppy because is easier for me to update the kernel in the floppy than in the disk image</span></div><div class="line" id="184816"><span class="nick" style="color:#6c3d55"><a href="#184816" label="[18:48:16]">&lt;Mikaku&gt;</a></span><span class="message">the GRUB on floppy has root=/dev/hda2</span></div><div class="line" id="184829"><span class="nick" style="color:#389600"><a href="#184829" label="[18:48:29]">&lt;rickmasters&gt;</a></span><span class="message">ok</span></div><div class="line" id="191225"><span class="nick" style="color:#389600"><a href="#191225" label="[19:12:25]">&lt;rickmasters&gt;</a></span><span class="message">Mikaku: I've found something important. If I reboot, the hole is filled with zeros and stays that way.</span></div><div class="line" id="191314"><span class="nick" style="color:#389600"><a href="#191314" label="[19:13:14]">&lt;rickmasters&gt;</a></span><span class="message">Mikaku: So, it might be related to a freshly allocated disk block that hasn't been flushed to disk or something like that.</span></div><div class="line" id="191356"><span class="nick" style="color:#389600"><a href="#191356" label="[19:13:56]">&lt;rickmasters&gt;</a></span><span class="message">Mikaku: I didn't even re-create the file. I just rebooted and the test file was magically fixed.</span></div><div class="line" id="191451"><span class="nick" style="color:#6c3d55"><a href="#191451" label="[19:14:51]">&lt;Mikaku&gt;</a></span><span class="message">hmm, in my tests the file is always created for the first time because I do not reboot, I just close QEMU</span></div><div class="line" id="191508"><span class="nick" style="color:#6c3d55"><a href="#191508" label="[19:15:08]">&lt;Mikaku&gt;</a></span><span class="message">this doesn't corrupts the filesystem because I do not type 'sync'</span></div><div class="line" id="191522"><span class="nick" style="color:#6c3d55"><a href="#191522" label="[19:15:22]">&lt;Mikaku&gt;</a></span><span class="message">so when I start the system again, nothing happened and the file doesn't exist</span></div><div class="line" id="191549"><span class="nick" style="color:#6c3d55"><a href="#191549" label="[19:15:49]">&lt;Mikaku&gt;</a></span><span class="message">even with this mechanism, the hole is _always_ filled with zeros</span></div><div class="line" id="191604"><span class="nick" style="color:#d9d9d9"><a href="#191604" label="[19:16:04]">&lt;muurkha&gt;</a></span><span class="message">kinky</span></div><div class="line" id="191635"><span class="nick" style="color:#6c3d55"><a href="#191635" label="[19:16:35]">&lt;Mikaku&gt;</a></span><span class="message">rickmasters: anyway, it looks indeed something related to buffers, or even page cache</span></div><div class="line" id="192249"><span class="nick" style="color:#389600"><a href="#192249" label="[19:22:49]">&lt;rickmasters&gt;</a></span><span class="message">Mikaku: Maybe try putting the main code in a loop with the file name sprintf(filename, &quot;mytest%d&quot;, i); and run 1000 times??</span></div><div class="line" id="192305"><span class="nick" style="color:#389600"><a href="#192305" label="[19:23:05]">&lt;rickmasters&gt;</a></span><span class="message">then od -tx1 -Ax mytest*</span></div><div class="line" id="192409"><span class="nick" style="color:#389600"><a href="#192409" label="[19:24:09]">&lt;rickmasters&gt;</a></span><span class="message">if you made testdata 16 bytes then the output should have alternating lines of zeros, but maybe it would repro</span></div><div class="line" id="192508"><span class="nick" style="color:#389600"><a href="#192508" label="[19:25:08]">&lt;rickmasters&gt;</a></span><span class="message">Mikake: the idea being that with enough writes you'd use up any cached buffers that are preventing the repro</span></div><div class="line" id="192615"><span class="nick" style="color:#389600"><a href="#192615" label="[19:26:15]">&lt;rickmasters&gt;</a></span><span class="message">Mikaku: or, maybe try to use a freshly created disk image</span></div><div class="line" id="192803"><span class="nick" style="color:#6c3d55"><a href="#192803" label="[19:28:03]">&lt;Mikaku&gt;</a></span><span class="message">rickmasters: you hit in the nail! :-)</span></div><div class="line" id="192852"><span class="nick" style="color:#6c3d55"><a href="#192852" label="[19:28:52]">&lt;Mikaku&gt;</a></span><span class="message">the first file (mytest1) has corruption data, the rest (999) have zeros</span></div><div class="line" id="192945"><span class="nick" style="color:#389600"><a href="#192945" label="[19:29:45]">&lt;rickmasters&gt;</a></span><span class="message">Mikaku: well, I was expecting the opposite but ... great!</span></div><div class="line" id="193012"><span class="nick" style="color:#6c3d55"><a href="#193012" label="[19:30:12]">&lt;Mikaku&gt;</a></span><span class="message">yes, strange that it only happens to the first, but is not affected with only one file</span></div><div class="line" id="193034"><span class="nick" style="color:#6c3d55"><a href="#193034" label="[19:30:34]">&lt;Mikaku&gt;</a></span><span class="message">anyway, now I have something to work on</span></div><div class="line" id="193048"><span class="nick" style="color:#6c3d55"><a href="#193048" label="[19:30:48]">&lt;Mikaku&gt;</a></span><span class="message">rickmasters: thanks!</span></div><div class="line" id="193406"><span class="nick" style="color:#389600"><a href="#193406" label="[19:34:06]">&lt;rickmasters&gt;</a></span><span class="message">Mikaku: You're welcome. Thank you for staying on it.</span></div><div class="line" id="194051"><span class="nick" style="color:#6c3d55"><a href="#194051" label="[19:40:51]">&lt;Mikaku&gt;</a></span><span class="message">muurkha: :-)</span></div><div class="line" id="194139"><span class="nick" style="color:#d9d9d9"><a href="#194139" label="[19:41:39]">&lt;muurkha&gt;</a></span><span class="message">(-;</span></div><br /></div></body></html>