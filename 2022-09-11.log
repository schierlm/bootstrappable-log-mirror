<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-09-11.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="002645"><span class="nick" style="color:#8dd3c7"><a href="#002645" label="[00:26:45]">&lt;mihi&gt;</a></span><span class="message">in the spirit of announcing wip projects instead of having them forgotten: In the last weeks I've been (very slowly) working on bootstrapping GNU Autogen. It's not finished yet (I know of 8 pre-generated files that are still used, and I may have missed some), but I have the feeling that I'm on the right way. My WIP code is at <a rel="nofollow" href="https://github.com/schierlm/gnu-autogen-bootstrapping/tree/wip">https://github.com/schierlm/gnu-autogen-bootstrapping/tree/wip</a>,  and for some reason I</span></div><div class="line" id="002645"><span class="nick" style="color:#8dd3c7"><a href="#002645" label="[00:26:45]">&lt;mihi&gt;</a></span><span class="message">don't know yet, it does not finish on GitHub Actions...</span></div><div class="line" id="003215"><span class="nick" style="color:#8dd3c7"><a href="#003215" label="[00:32:15]">&lt;mihi&gt;</a></span><span class="message">an open question: What is the proper way to deal with &quot;half-generated&quot; files? There are two files (in CGI support and in copyright-updater) where the template uses the output file as additional input and copies a few lines from them. My approach would be to remove all non-needed lines from the files via sed, and regenerate them. But I can also patch the CGI support and the copyright-remover script out if that is</span></div><div class="line" id="003215"><span class="nick" style="color:#8dd3c7"><a href="#003215" label="[00:32:15]">&lt;mihi&gt;</a></span><span class="message">preferred.</span></div><div class="line" id="003248"><span class="nick" style="color:#2e2a4a"><a href="#003248" label="[00:32:48]">*</a></span><span class="message">mihi doubt anyone uses Autogen CGI support to builds his website...</span></div><div class="line" id="003303"><span class="nick" style="color:#6b8072"><a href="#003303" label="[00:33:03]">&lt;stikonas&gt;</a></span><span class="message">mihi: I think I once dealt with half-generated files by using cat</span></div><div class="line" id="003314"><span class="nick" style="color:#6b8072"><a href="#003314" label="[00:33:14]">&lt;stikonas&gt;</a></span><span class="message">though I don't remember where...</span></div><div class="line" id="003415"><span class="nick" style="color:#6b8072"><a href="#003415" label="[00:34:15]">&lt;stikonas&gt;</a></span><span class="message">oh probably here <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/9b5c6ca3a19d656caf389689b72e8ce291a02903/sysa/autoconf-2.53/autoconf-2.53.sh#L15">https://github.com/fosslinux/live-bootstrap/blob/9b5c6ca3a19d656caf389689b72e8ce291a02903/sysa/autoconf-2.53/autoconf-2.53.sh#L15</a> </span></div><div class="line" id="003431"><span class="nick" style="color:#6b8072"><a href="#003431" label="[00:34:31]">&lt;stikonas&gt;</a></span><span class="message">anyway, great work!</span></div><div class="line" id="003456"><span class="nick" style="color:#6b8072"><a href="#003456" label="[00:34:56]">&lt;stikonas&gt;</a></span><span class="message">Autogen looked fairly scary to me so I did not try to bootstrap it</span></div><div class="line" id="003500"><span class="nick" style="color:#6b8072"><a href="#003500" label="[00:35:00]">&lt;stikonas&gt;</a></span><span class="message">and I think it was the same for fossy</span></div><div class="line" id="003600"><span class="nick" style="color:#8dd3c7"><a href="#003600" label="[00:36:00]">&lt;mihi&gt;</a></span><span class="message">I don't really want to alter the way the files are generated. The template currently does something like 'open OUTFILE for reading, read a few lines into template variable, close it, open for writing/truncate, apply template'</span></div><div class="line" id="003606"><span class="nick" style="color:#6b8072"><a href="#003606" label="[00:36:06]">&lt;stikonas&gt;</a></span><span class="message">and I tend to announce wip projects too...</span></div><div class="line" id="003631"><span class="nick" style="color:#8dd3c7"><a href="#003631" label="[00:36:31]">&lt;mihi&gt;</a></span><span class="message">I know that this is risky (what if the script dies? then also the non-generated stuff is lost!) but that's how it is.</span></div><div class="line" id="003632"><span class="nick" style="color:#6b8072"><a href="#003632" label="[00:36:32]">&lt;stikonas&gt;</a></span><span class="message">I see, so it's a bit different</span></div><div class="line" id="003741"><span class="nick" style="color:#8dd3c7"><a href="#003741" label="[00:37:41]">&lt;mihi&gt;</a></span><span class="message">also, I have no idea what the point is of having all format strings in a long (generated) string constant and then have them index by offset into that constant (except that gcc will not warn about format string issues).</span></div><div class="line" id="003823"><span class="nick" style="color:#8dd3c7"><a href="#003823" label="[00:38:23]">&lt;mihi&gt;</a></span><span class="message">but yeah, autogen is a weird beast. Only bad that it is a GNU project and therefore ubiquitous.</span></div><div class="line" id="003834"><span class="nick" style="color:#6b8072"><a href="#003834" label="[00:38:34]">&lt;stikonas&gt;</a></span><span class="message">indeed...</span></div><div class="line" id="003855"><span class="nick" style="color:#6b8072"><a href="#003855" label="[00:38:55]">&lt;stikonas&gt;</a></span><span class="message">and especially it is used for binutils and gcc to generated some templates...</span></div><div class="line" id="003908"><span class="nick" style="color:#6b8072"><a href="#003908" label="[00:39:08]">&lt;stikonas&gt;</a></span><span class="message">they are not critical but still annoying</span></div><div class="line" id="003937"><span class="nick" style="color:#6b8072"><a href="#003937" label="[00:39:37]">&lt;stikonas&gt;</a></span><span class="message">but if we can get it in live-bootstrap, I guess it still goes after guile...</span></div><div class="line" id="004002"><span class="nick" style="color:#8dd3c7"><a href="#004002" label="[00:40:02]">&lt;mihi&gt;</a></span><span class="message">yeah, I needed to patch latest release slightly to work with guile-3.0.7 (but only version number checks)</span></div><div class="line" id="004027"><span class="nick" style="color:#6b8072"><a href="#004027" label="[00:40:27]">&lt;stikonas&gt;</a></span><span class="message">well, at least we'll finally have a good reason to have guile in live-bootstrap</span></div><div class="line" id="004030"><span class="nick" style="color:#8dd3c7"><a href="#004030" label="[00:40:30]">&lt;mihi&gt;</a></span><span class="message">seems that author did not believe guile can at some point no longer be major version 2 :)</span></div><div class="line" id="004049"><span class="nick" style="color:#6b8072"><a href="#004049" label="[00:40:49]">&lt;stikonas&gt;</a></span><span class="message">dangerous assumption to make...</span></div><div class="line" id="004109"><span class="nick" style="color:#8dd3c7"><a href="#004109" label="[00:41:09]">&lt;mihi&gt;</a></span><span class="message">yeah. Recently some got bitten by Firefox / Chrome 100...</span></div><div class="line" id="004124"><span class="nick" style="color:#6b8072"><a href="#004124" label="[00:41:24]">&lt;stikonas&gt;</a></span><span class="message">but a fairly common mistake... There is quite a lot of breakeage with linux versions</span></div><div class="line" id="004131"><span class="nick" style="color:#6b8072"><a href="#004131" label="[00:41:31]">&lt;stikonas&gt;</a></span><span class="message">especially 2 -&gt;3</span></div><div class="line" id="004148"><span class="nick" style="color:#80b1d3"><a href="#004148" label="[00:41:48]">&lt;blockhead&gt;</a></span><span class="message">gtk3, python3  :p</span></div><div class="line" id="004150"><span class="nick" style="color:#8dd3c7"><a href="#004150" label="[00:41:50]">&lt;mihi&gt;</a></span><span class="message">also I did not find out what version of gnulib creates the #defines in the order that the script expects, so I just patched the script :)</span></div><div class="line" id="004158"><span class="nick" style="color:#6b8072"><a href="#004158" label="[00:41:58]">&lt;stikonas&gt;</a></span><span class="message">how hard could it be to properly deal with versions...</span></div><div class="line" id="004205"><span class="nick" style="color:#6b8072"><a href="#004205" label="[00:42:05]">&lt;stikonas&gt;</a></span><span class="message">I mean if there is a number, assume that it can change</span></div><div class="line" id="004231"><span class="nick" style="color:#8dd3c7"><a href="#004231" label="[00:42:31]">&lt;mihi&gt;</a></span><span class="message">and if the software is TeX, assume that its version can change to \pi</span></div><div class="line" id="004258"><span class="nick" style="color:#6b8072"><a href="#004258" label="[00:42:58]">&lt;stikonas&gt;</a></span><span class="message">:D</span></div><div class="line" id="004421"><span class="nick" style="color:#6b8072"><a href="#004421" label="[00:44:21]">&lt;stikonas&gt;</a></span><span class="message">that will happen when time t \to \infty</span></div><div class="line" id="004444"><span class="nick" style="color:#8dd3c7"><a href="#004444" label="[00:44:44]">&lt;mihi&gt;</a></span><span class="message">I believe it will happen by definition when Donald Knuth dies.</span></div><div class="line" id="004516"><span class="nick" style="color:#8dd3c7"><a href="#004516" label="[00:45:16]">&lt;mihi&gt;</a></span><span class="message">but maybe that's an urban myth</span></div><div class="line" id="004803"><span class="nick" style="color:#6d2462"><a href="#004803" label="[00:48:03]">&lt;unmatched-paren&gt;</a></span><span class="message">mihi: not an urban myth: <a rel="nofollow" href="https://texfaq.org/FAQ-TeXfuture">https://texfaq.org/FAQ-TeXfuture</a> </span></div><div class="line" id="004818"><span class="nick" style="color:#6d2462"><a href="#004818" label="[00:48:18]">&lt;unmatched-paren&gt;</a></span><span class="message">metafont will be changed to version `e' :)</span></div><div class="line" id="010924"><span class="nick" style="color:#6b8072"><a href="#010924" label="[01:09:24]">&lt;stikonas&gt;</a></span><span class="message">fossy: ok, so looks like we might want to add git to live-bootstrap</span></div><div class="line" id="011000"><span class="nick" style="color:#6b8072"><a href="#011000" label="[01:10:00]">&lt;stikonas&gt;</a></span><span class="message">for eventual autogen bootstrap <a rel="nofollow" href="https://github.com/schierlm/gnu-autogen-bootstrapping/blob/wip/bootstrap.sh">https://github.com/schierlm/gnu-autogen-bootstrapping/blob/wip/bootstrap.sh</a> </span></div><div class="line" id="021450"><span class="nick" style="color:#234e69"><a href="#021450" label="[02:14:50]">&lt;oriansj&gt;</a></span><span class="message">mihi: glad to see you working on another really hard project. I know you'll do a great job as always</span></div><div class="line" id="021923"><span class="nick" style="color:#6b8072"><a href="#021923" label="[02:19:23]">&lt;stikonas&gt;</a></span><span class="message">yes, having briefly looked at it, I'll be very impressed if autogen is bootstrapped</span></div><div class="line" id="022133"><span class="nick" style="color:#6b8072"><a href="#022133" label="[02:21:33]">&lt;stikonas&gt;</a></span><span class="message">and speaking of progress, I have been updating stage0-uefi binaries with some improvements (properly release all resources, use new style M1 defines, more robust argument parsing), done with hex0, hex1, hex2 and catm, still need to do kaem-minimal</span></div><div class="line" id="022140"><span class="nick" style="color:#6b8072"><a href="#022140" label="[02:21:40]">&lt;stikonas&gt;</a></span><span class="message">and after that I can start working on M0.efi</span></div><div class="line" id="022238"><span class="nick" style="color:#6b8072"><a href="#022238" label="[02:22:38]">&lt;stikonas&gt;</a></span><span class="message">(with these changes hex0 unfortunately got slightly bigger, though hex1 is actually smaller)</span></div><div class="line" id="022706"><span class="nick" style="color:#234e69"><a href="#022706" label="[02:27:06]">&lt;oriansj&gt;</a></span><span class="message">sweet</span></div><div class="line" id="022711"><span class="nick" style="color:#6c3d55"><a href="#022711" label="[02:27:11]">&lt;Hagfish&gt;</a></span><span class="message">fantastic</span></div><div class="line" id="022744"><span class="nick" style="color:#6c3d55"><a href="#022744" label="[02:27:44]">&lt;Hagfish&gt;</a></span><span class="message">interesting that the sizes changed in opposite directions :)</span></div><div class="line" id="022827"><span class="nick" style="color:#6b8072"><a href="#022827" label="[02:28:27]">&lt;stikonas&gt;</a></span><span class="message">that's because hex0 was already slightly more optimized in terms of size</span></div><div class="line" id="022931"><span class="nick" style="color:#6b8072"><a href="#022931" label="[02:29:31]">&lt;stikonas&gt;</a></span><span class="message">so my changes had some size saving (but less so in hex0). But another change added some bytes (I had to add some calls to close UEFI protocol)</span></div><div class="line" id="022935"><span class="nick" style="color:#6c3d55"><a href="#022935" label="[02:29:35]">&lt;Hagfish&gt;</a></span><span class="message">ah, that makes sense, thank you</span></div><div class="line" id="023016"><span class="nick" style="color:#6b8072"><a href="#023016" label="[02:30:16]">&lt;stikonas&gt;</a></span><span class="message">though when you look at hex0, smallest size is not always the best</span></div><div class="line" id="023056"><span class="nick" style="color:#6b8072"><a href="#023056" label="[02:30:56]">&lt;stikonas&gt;</a></span><span class="message">it's the jumps/calls (especially long ones) that are hard to analyze</span></div><div class="line" id="023211"><span class="nick" style="color:#6c3d55"><a href="#023211" label="[02:32:11]">&lt;Hagfish&gt;</a></span><span class="message">what's the alternative to jumps/calls?</span></div><div class="line" id="023214"><span class="nick" style="color:#6b8072"><a href="#023214" label="[02:32:14]">&lt;stikonas&gt;</a></span><span class="message">though perhaps for kaem-minimal I should split some stuff into functions (despite long jumps), i.e. we have 3 calls to open protocols</span></div><div class="line" id="023231"><span class="nick" style="color:#6b8072"><a href="#023231" label="[02:32:31]">&lt;stikonas&gt;</a></span><span class="message">Hagfish: sometimes inlining stuff can avoid jump</span></div><div class="line" id="023258"><span class="nick" style="color:#6c3d55"><a href="#023258" label="[02:32:58]">&lt;Hagfish&gt;</a></span><span class="message">the &quot;rule of 3&quot; suggests that having 3 calls is the right moment to make that change (but it's a very rough heuristic)</span></div><div class="line" id="023300"><span class="nick" style="color:#6b8072"><a href="#023300" label="[02:33:00]">&lt;stikonas&gt;</a></span><span class="message">but of course at the expense of number of bytes</span></div><div class="line" id="023306"><span class="nick" style="color:#6c3d55"><a href="#023306" label="[02:33:06]">&lt;Hagfish&gt;</a></span><span class="message">hmm, okay</span></div><div class="line" id="023321"><span class="nick" style="color:#6b8072"><a href="#023321" label="[02:33:21]">&lt;stikonas&gt;</a></span><span class="message">for some stuff you could try branchless programming</span></div><div class="line" id="023327"><span class="nick" style="color:#6c3d55"><a href="#023327" label="[02:33:27]">&lt;Hagfish&gt;</a></span><span class="message">wow</span></div><div class="line" id="023334"><span class="nick" style="color:#6b8072"><a href="#023334" label="[02:33:34]">&lt;stikonas&gt;</a></span><span class="message">but we don't use it in stage0-posix</span></div><div class="line" id="023351"><span class="nick" style="color:#6c3d55"><a href="#023351" label="[02:33:51]">&lt;Hagfish&gt;</a></span><span class="message">yeah, i've never tried it, but it seems like an advanced technique</span></div><div class="line" id="023403"><span class="nick" style="color:#6b8072"><a href="#023403" label="[02:34:03]">&lt;stikonas&gt;</a></span><span class="message">yeah, so that might be the reason why we don't use it</span></div><div class="line" id="023410"><span class="nick" style="color:#6c3d55"><a href="#023410" label="[02:34:10]">&lt;Hagfish&gt;</a></span><span class="message">fair enough</span></div><div class="line" id="023411"><span class="nick" style="color:#6b8072"><a href="#023411" label="[02:34:11]">&lt;stikonas&gt;</a></span><span class="message">e.g. say you want to find smallest number</span></div><div class="line" id="023435"><span class="nick" style="color:#6b8072"><a href="#023435" label="[02:34:35]">&lt;stikonas&gt;</a></span><span class="message">you can write a function with if/else  (compare a &lt; b) and return the smallest one</span></div><div class="line" id="023512"><span class="nick" style="color:#6b8072"><a href="#023512" label="[02:35:12]">&lt;stikonas&gt;</a></span><span class="message">or with branchless programming you could always do both calculations, e.g. a * (a &lt; b) + b * (b &lt;= a)</span></div><div class="line" id="023534"><span class="nick" style="color:#6c3d55"><a href="#023534" label="[02:35:34]">&lt;Hagfish&gt;</a></span><span class="message">wow.  i don't think i've seen an example like that before</span></div><div class="line" id="023553"><span class="nick" style="color:#6c3d55"><a href="#023553" label="[02:35:53]">&lt;Hagfish&gt;</a></span><span class="message">it makes sense, i guess</span></div><div class="line" id="023616"><span class="nick" style="color:#6b8072"><a href="#023616" label="[02:36:16]">&lt;stikonas&gt;</a></span><span class="message">there might be yet another thing one can try to avoid manual calculation of jumps, but again not used in stage0</span></div><div class="line" id="023651"><span class="nick" style="color:#6b8072"><a href="#023651" label="[02:36:51]">&lt;stikonas&gt;</a></span><span class="message">one could try to save address of the label on the fly as it is passed during execution and store it in the register</span></div><div class="line" id="023713"><span class="nick" style="color:#6c3d55"><a href="#023713" label="[02:37:13]">&lt;Hagfish&gt;</a></span><span class="message">wow, so making the code it's own interpreter, kinda?</span></div><div class="line" id="023718"><span class="nick" style="color:#6b8072"><a href="#023718" label="[02:37:18]">&lt;stikonas&gt;</a></span><span class="message">kind of</span></div><div class="line" id="023733"><span class="nick" style="color:#6c3d55"><a href="#023733" label="[02:37:33]">&lt;Hagfish&gt;</a></span><span class="message">dynamic programming?  is that what it's called?</span></div><div class="line" id="023734"><span class="nick" style="color:#6b8072"><a href="#023734" label="[02:37:34]">&lt;stikonas&gt;</a></span><span class="message">but again that might be a bit confusing</span></div><div class="line" id="023736"><span class="nick" style="color:#6b8072"><a href="#023736" label="[02:37:36]">&lt;stikonas&gt;</a></span><span class="message">not sure</span></div><div class="line" id="023736"><span class="nick" style="color:#6c3d55"><a href="#023736" label="[02:37:36]">&lt;Hagfish&gt;</a></span><span class="message">sure</span></div><div class="line" id="023806"><span class="nick" style="color:#6b8072"><a href="#023806" label="[02:38:06]">&lt;stikonas&gt;</a></span><span class="message">well, something like &quot;call 5&quot; after label can push address of current label onto stack</span></div><div class="line" id="024206"><span class="nick" style="color:#6b8072"><a href="#024206" label="[02:42:06]">&lt;stikonas&gt;</a></span><span class="message">but as you can see all of these come with tradeoff of more bytes</span></div><div class="line" id="024421"><span class="nick" style="color:#234e69"><a href="#024421" label="[02:44:21]">&lt;oriansj&gt;</a></span><span class="message">also by ensuring what we create is easy to learn and understand, it provides root for people later to come and make major improvements</span></div><div class="line" id="024455"><span class="nick" style="color:#6c3d55"><a href="#024455" label="[02:44:55]">&lt;Hagfish&gt;</a></span><span class="message">at this level of bytes, i feel like auditability is the deciding factor (unless there is some critical piece of small hardware you want to support where these bytes make the difference)</span></div><div class="line" id="024534"><span class="nick" style="color:#6c3d55"><a href="#024534" label="[02:45:34]">&lt;Hagfish&gt;</a></span><span class="message">but yeah, if you start with something that is understandable, other people can port it for different requirements</span></div><div class="line" id="025014"><span class="nick" style="color:#d9d9d9"><a href="#025014" label="[02:50:14]">&lt;pabs3&gt;</a></span><span class="message">&quot;Compiling Rust with GCC: an update&quot; <a rel="nofollow" href="https://lwn.net/SubscriberLink/907405/8844655df94a7886/">https://lwn.net/SubscriberLink/907405/8844655df94a7886/</a> </span></div><div class="line" id="025131"><span class="nick" style="color:#6c3d55"><a href="#025131" label="[02:51:31]">&lt;Hagfish&gt;</a></span><span class="message">nice! thanks for sharing</span></div><div class="line" id="025411"><span class="nick" style="color:#6b8072"><a href="#025411" label="[02:54:11]">&lt;stikonas&gt;</a></span><span class="message">hmm, not sure if this can be used to bootstrap rust</span></div><div class="line" id="025419"><span class="nick" style="color:#6b8072"><a href="#025419" label="[02:54:19]">&lt;stikonas&gt;</a></span><span class="message">they don't seem to target cargo at all</span></div><div class="line" id="025437"><span class="nick" style="color:#6b8072"><a href="#025437" label="[02:54:37]">&lt;stikonas&gt;</a></span><span class="message">unlike mrustc which has minicargo</span></div><div class="line" id="025445"><span class="nick" style="color:#6b8072"><a href="#025445" label="[02:54:45]">&lt;stikonas&gt;</a></span><span class="message">but maybe I'm missing something</span></div><div class="line" id="025801"><span class="nick" style="color:#6c3d55"><a href="#025801" label="[02:58:01]">&lt;Hagfish&gt;</a></span><span class="message">&quot;It is also now possible to bootstrap rustc with rust_codegen_gcc, which is a big milestone&quot;</span></div><div class="line" id="025812"><span class="nick" style="color:#6c3d55"><a href="#025812" label="[02:58:12]">&lt;Hagfish&gt;</a></span><span class="message">but yeah, not sure about cargo</span></div><div class="line" id="025815"><span class="nick" style="color:#234e69"><a href="#025815" label="[02:58:15]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well it is potential not yet explored but as we already have a working bootstrap path for Rust, it is more like a nice extra</span></div><div class="line" id="025904"><span class="nick" style="color:#6b8072"><a href="#025904" label="[02:59:04]">&lt;stikonas&gt;</a></span><span class="message">indeed</span></div><div class="line" id="025919"><span class="nick" style="color:#6b8072"><a href="#025919" label="[02:59:19]">&lt;stikonas&gt;</a></span><span class="message">and at least Rust bootstrap path is well maintained (for now)</span></div><div class="line" id="025939"><span class="nick" style="color:#6b8072"><a href="#025939" label="[02:59:39]">&lt;stikonas&gt;</a></span><span class="message">so bootstrap compiler is eventually targetting newer and newer versions of rust</span></div><div class="line" id="025957"><span class="nick" style="color:#6b8072"><a href="#025957" label="[02:59:57]">&lt;stikonas&gt;</a></span><span class="message">unlike openjdk where we are stuck with version 7</span></div><div class="line" id="030009"><span class="nick" style="color:#6b8072"><a href="#030009" label="[03:00:09]">&lt;stikonas&gt;</a></span><span class="message">and then have to build all intermediate versions</span></div><div class="line" id="031356"><span class="nick" style="color:#234e69"><a href="#031356" label="[03:13:56]">&lt;oriansj&gt;</a></span><span class="message">well that is because there are not multiple people willing to work for years to push the Java Bootstrap forward</span></div><div class="line" id="031537"><span class="nick" style="color:#234e69"><a href="#031537" label="[03:15:37]">&lt;oriansj&gt;</a></span><span class="message">and I feel like I am so close to finally cracking the gentoo encrypted / and /boot procedure</span></div><div class="line" id="031626"><span class="nick" style="color:#234e69"><a href="#031626" label="[03:16:26]">&lt;oriansj&gt;</a></span><span class="message">now it is just a matter of finding what modules are actually needed</span></div><div class="line" id="031726"><span class="nick" style="color:#234e69"><a href="#031726" label="[03:17:26]">&lt;oriansj&gt;</a></span><span class="message">I have figured out that I did build the dm-crypt.ko module but I didn't include it in my initramfs</span></div><div class="line" id="031805"><span class="nick" style="color:#234e69"><a href="#031805" label="[03:18:05]">&lt;oriansj&gt;</a></span><span class="message">so now I am going to test if just copying all of it will work</span></div><div class="line" id="031819"><span class="nick" style="color:#234e69"><a href="#031819" label="[03:18:19]">&lt;oriansj&gt;</a></span><span class="message">(which will really ballon the initramfs)</span></div><div class="line" id="031850"><span class="nick" style="color:#234e69"><a href="#031850" label="[03:18:50]">&lt;oriansj&gt;</a></span><span class="message">which if that works, I just need to figure out the subset</span></div><div class="line" id="034805"><span class="nick" style="color:#234e69"><a href="#034805" label="[03:48:05]">&lt;oriansj&gt;</a></span><span class="message">yes (ish, needs a little tweaking but it boots)</span></div><div class="line" id="035545"><span class="nick" style="color:#234e69"><a href="#035545" label="[03:55:45]">&lt;oriansj&gt;</a></span><span class="message">well it works; is ugly as sin and needs some basic enhancements: <a rel="nofollow" href="https://paste.debian.net/1253444">https://paste.debian.net/1253444</a> </span></div><div class="line" id="043151"><span class="nick" style="color:#234e69"><a href="#043151" label="[04:31:51]">&lt;oriansj&gt;</a></span><span class="message">ok, down to 21MB in size</span></div><div class="line" id="043206"><span class="nick" style="color:#234e69"><a href="#043206" label="[04:32:06]">&lt;oriansj&gt;</a></span><span class="message">(still seems too large)</span></div><div class="line" id="043458"><span class="nick" style="color:#234e69"><a href="#043458" label="[04:34:58]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1253446">https://paste.debian.net/1253446</a> </span></div><div class="line" id="044523"><span class="nick" style="color:#234e69"><a href="#044523" label="[04:45:23]">&lt;oriansj&gt;</a></span><span class="message">well the clean up is going to need several iterations of testing before it'll work all major bugs out in the procedure but now I can better document what gentoo's wiki should have</span></div><div class="line" id="051948"><span class="nick" style="color:#bc80bd"><a href="#051948" label="[05:19:48]">&lt;midnight&gt;</a></span><span class="message">I was wondering if anyone here happens to have an mbox of the bootstrappable ML they'd be willing to share?  looks like the freelists ML site doesn't collect stuff in downloadable form.</span></div><div class="line" id="052005"><span class="nick" style="color:#bc80bd"><a href="#052005" label="[05:20:05]">&lt;midnight&gt;</a></span><span class="message">(rather not use an unfriendly scraper)</span></div><div class="line" id="052956"><span class="nick" style="color:#234e69"><a href="#052956" label="[05:29:56]">&lt;oriansj&gt;</a></span><span class="message">midnight: well I could compile one for you if you are willing to wait until monday</span></div><div class="line" id="055053"><span class="nick" style="color:#bc80bd"><a href="#055053" label="[05:50:53]">&lt;midnight&gt;</a></span><span class="message">oriansj: I am in absolutely no rush whatsoever. :-)</span></div><div class="line" id="055213"><span class="nick" style="color:#234e69"><a href="#055213" label="[05:52:13]">&lt;oriansj&gt;</a></span><span class="message">I could even include it in the wiki's git repo so that it'll be just a git clone away for anyone who wants it and it becomes trivial for anyone who wants to keep it up to date</span></div><div class="line" id="055224"><span class="nick" style="color:#bc80bd"><a href="#055224" label="[05:52:24]">&lt;midnight&gt;</a></span><span class="message">oh that would be ideal.</span></div><div class="line" id="055307"><span class="nick" style="color:#bc80bd"><a href="#055307" label="[05:53:07]">&lt;midnight&gt;</a></span><span class="message">it also solves the programmably-accessible ML archive thing permanently then.</span></div><div class="line" id="055419"><span class="nick" style="color:#234e69"><a href="#055419" label="[05:54:19]">&lt;oriansj&gt;</a></span><span class="message">well as long as someone bothers to append new messages and commit them to the repo (which I can give to anyone who wants to be reponsible for the health of our wiki)</span></div><div class="line" id="055530"><span class="nick" style="color:#bc80bd"><a href="#055530" label="[05:55:30]">&lt;midnight&gt;</a></span><span class="message">:-)</span></div><div class="line" id="055756"><span class="nick" style="color:#234e69"><a href="#055756" label="[05:57:56]">&lt;oriansj&gt;</a></span><span class="message">and if enough people think the git wiki is the way forward for wiki updates; then we just need to point to the git wiki by default.</span></div><div class="line" id="055759"><span class="nick" style="color:#bc80bd"><a href="#055759" label="[05:57:59]">&lt;midnight&gt;</a></span><span class="message">I would offer to perform the mbox append but I'm still working out how to privately subscribe</span></div><div class="line" id="060434"><span class="nick" style="color:#234e69"><a href="#060434" label="[06:04:34]">&lt;oriansj&gt;</a></span><span class="message">midnight: well if I remember correctly, the steps were to go to: <a rel="nofollow" href="https://www.freelists.org/list/bootstrappable">https://www.freelists.org/list/bootstrappable</a>  put in your desired email address and select subscribe from the drop down and then click next</span></div><div class="line" id="060458"><span class="nick" style="color:#234e69"><a href="#060458" label="[06:04:58]">&lt;oriansj&gt;</a></span><span class="message">which could be done via tor</span></div><div class="line" id="060535"><span class="nick" style="color:#234e69"><a href="#060535" label="[06:05:35]">&lt;oriansj&gt;</a></span><span class="message">or if you want I can setup an email forward for you</span></div><div class="line" id="060808"><span class="nick" style="color:#bc80bd"><a href="#060808" label="[06:08:08]">&lt;midnight&gt;</a></span><span class="message">Oh; no I can do that. I'm just working out which email to subscribe. Sorry. :)</span></div><div class="line" id="060845"><span class="nick" style="color:#bc80bd"><a href="#060845" label="[06:08:45]">&lt;midnight&gt;</a></span><span class="message">In another life I run my own MX..</span></div><div class="line" id="061052"><span class="nick" style="color:#234e69"><a href="#061052" label="[06:10:52]">&lt;oriansj&gt;</a></span><span class="message">well right now it is kinda low volume and mostly just big announcements</span></div><div class="line" id="062520"><span class="nick" style="color:#bc80bd"><a href="#062520" label="[06:25:20]">&lt;midnight&gt;</a></span><span class="message">cool</span></div><div class="line" id="064838"><span class="nick" style="color:#234e69"><a href="#064838" label="[06:48:38]">&lt;oriansj&gt;</a></span><span class="message">sam_: my revised initramfs script: <a rel="nofollow" href="https://git.sr.ht/~oriansj/System_setup/blob/main/files/build_initramfs.sh">https://git.sr.ht/~oriansj/System_setup/blob/main/files/build_initramfs.sh</a>  should be generally useful for the gentoo community</span></div><div class="line" id="065008"><span class="nick" style="color:#234e69"><a href="#065008" label="[06:50:08]">&lt;oriansj&gt;</a></span><span class="message">and unlike debian's default failure on the luks unlock will get you into a shell where you can safely successfully fix things up and properly boot</span></div><div class="line" id="065050"><span class="nick" style="color:#234e69"><a href="#065050" label="[06:50:50]">&lt;oriansj&gt;</a></span><span class="message">the gentoo install procedure still has a bunch of errors but I should have it clean by monday</span></div><div class="line" id="065111"><span class="nick" style="color:#234e69"><a href="#065111" label="[06:51:11]">&lt;oriansj&gt;</a></span><span class="message">(assuming I don't hit too many issues around the kernel build)</span></div><div class="line" id="065247"><span class="nick" style="color:#234e69"><a href="#065247" label="[06:52:47]">&lt;oriansj&gt;</a></span><span class="message">the full gui and related bits probably will take a bit longer as compile times grow and I need to figure out how to add stikonas's bootstrappable gentoo extension</span></div><div class="line" id="084413"><span class="nick" style="color:#3c5b35"><a href="#084413" label="[08:44:13]">&lt;doras&gt;</a></span><span class="message">PR for musl dynamic linking support in live-bootstrap: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/194">https://github.com/fosslinux/live-bootstrap/pull/194</a> </span></div><div class="line" id="125908"><span class="nick" style="color:#6b8072"><a href="#125908" label="[12:59:08]">&lt;stikonas&gt;</a></span><span class="message">doras: by the way, you can make pull requests that depend on other PRs (just need to pick a different base branch and later rebase once base branch is merged)</span></div><div class="line" id="135655"><span class="nick" style="color:#8dd3c7"><a href="#135655" label="[13:56:55]">&lt;mihi&gt;</a></span><span class="message">stikonas, fossy, is it hard to bootstrap git? It should be feasible to bootstrap autogen without it (if there is no .git directory, the bootstrap scripts pull changelogs and version info from ZZJUNK file; and I assume you can clean the tarball manually so that it matches the git repo)</span></div><div class="line" id="135730"><span class="nick" style="color:#8dd3c7"><a href="#135730" label="[13:57:30]">&lt;mihi&gt;</a></span><span class="message">once bootstrap is finished, I might add a bootstrap-from-tarball script for that.</span></div><div class="line" id="135833"><span class="nick" style="color:#8dd3c7"><a href="#135833" label="[13:58:33]">&lt;mihi&gt;</a></span><span class="message">I just started from the git repo as it seemed to be prudent to make the first bootstrap as easy as possible, considering the big ball of mud that autogen is.</span></div><div class="line" id="135905"><span class="nick" style="color:#6b8072"><a href="#135905" label="[13:59:05]">&lt;stikonas&gt;</a></span><span class="message">mihi: no, not hard, it should just build</span></div><div class="line" id="135945"><span class="nick" style="color:#6b8072"><a href="#135945" label="[13:59:45]">&lt;stikonas&gt;</a></span><span class="message">so if it's more convenient it's fine to add git as dependency</span></div><div class="line" id="140022"><span class="nick" style="color:#6b8072"><a href="#140022" label="[14:00:22]">&lt;stikonas&gt;</a></span><span class="message">mihi: though it would be nice if there was an option to bootstrap for autogen tarball rather than download on the fly (even if local git is still required for some steps)</span></div><div class="line" id="140041"><span class="nick" style="color:#6b8072"><a href="#140041" label="[14:00:41]">&lt;stikonas&gt;</a></span><span class="message">anyway, this can be sorted out later</span></div><div class="line" id="140111"><span class="nick" style="color:#8dd3c7"><a href="#140111" label="[14:01:11]">&lt;mihi&gt;</a></span><span class="message">stikonas, if you touch build/tagged, it will skip the download.</span></div><div class="line" id="140131"><span class="nick" style="color:#8dd3c7"><a href="#140131" label="[14:01:31]">&lt;mihi&gt;</a></span><span class="message">build/tagged-src, that is</span></div><div class="line" id="140148"><span class="nick" style="color:#8dd3c7"><a href="#140148" label="[14:01:48]">&lt;mihi&gt;</a></span><span class="message">assuming that you already &quot;downloaded&quot; and tagged the source :)</span></div><div class="line" id="140230"><span class="nick" style="color:#8dd3c7"><a href="#140230" label="[14:02:30]">&lt;mihi&gt;</a></span><span class="message">however, a tarball will not help as it usually does not contain .git directory</span></div><div class="line" id="140306"><span class="nick" style="color:#8dd3c7"><a href="#140306" label="[14:03:06]">&lt;mihi&gt;</a></span><span class="message">the build-deps on <a rel="nofollow" href="https://packages.debian.org/source/bullseye/git">https://packages.debian.org/source/bullseye/git</a>  looked a bit scary to me, but probably most of them are optional...</span></div><div class="line" id="141432"><span class="nick" style="color:#6b8072"><a href="#141432" label="[14:14:32]">&lt;stikonas&gt;</a></span><span class="message">yeah, I think most is optional...</span></div><div class="line" id="141537"><span class="nick" style="color:#6b8072"><a href="#141537" label="[14:15:37]">&lt;stikonas&gt;</a></span><span class="message">looking at gentoo ebuild, I think only zlib and openssl are needed</span></div><div class="line" id="141542"><span class="nick" style="color:#6b8072"><a href="#141542" label="[14:15:42]">&lt;stikonas&gt;</a></span><span class="message">rest are optional...</span></div><div class="line" id="142814"><span class="nick" style="color:#af8d2f"><a href="#142814" label="[14:28:14]">&lt;sam_&gt;</a></span><span class="message">oriansj: nice, I'll take a look later today!</span></div><div class="line" id="161607"><span class="nick" style="color:#234e69"><a href="#161607" label="[16:16:07]">&lt;oriansj&gt;</a></span><span class="message">tell me if this sounds stupid but couldn't the script I wrote for building initramfs files also be used to solve the guix double password prompt problem? (which a couple minor tweaks of course)</span></div><div class="line" id="161658"><span class="nick" style="color:#234e69"><a href="#161658" label="[16:16:58]">&lt;oriansj&gt;</a></span><span class="message">^which^with^</span></div><div class="line" id="164014"><span class="nick" style="color:#389600"><a href="#164014" label="[16:40:14]">&lt;janus&gt;</a></span><span class="message">who is working on haskell bootstrapping?</span></div><div class="line" id="164057"><span class="nick" style="color:#389600"><a href="#164057" label="[16:40:57]">&lt;janus&gt;</a></span><span class="message">i got nhc98 running, working on compiling ghc-0.29 with it, i'd like to pair on it though</span></div><div class="line" id="164648"><span class="nick" style="color:#234e69"><a href="#164648" label="[16:46:48]">&lt;oriansj&gt;</a></span><span class="message">janus: if I remember correctly that was rekado and I think they got stuck on something: <a rel="nofollow" href="https://elephly.net/posts/2017-01-09-bootstrapping-haskell-part-1.html">https://elephly.net/posts/2017-01-09-bootstrapping-haskell-part-1.html</a> </span></div><div class="line" id="165119"><span class="nick" style="color:#389600"><a href="#165119" label="[16:51:19]">&lt;janus&gt;</a></span><span class="message">right, i have been reading that. but i'd like to get the bootstrapping working with minimal patching first. so i am just compiling nhc98 on redhat6.2 and it works almost out of the box</span></div><div class="line" id="165235"><span class="nick" style="color:#389600"><a href="#165235" label="[16:52:35]">&lt;janus&gt;</a></span><span class="message">that blog post is really about nhc98, so it is kinda orthogonal. i mean, sure it would be nice if the nhc98 runtime didn't depend on some specific memory layout</span></div><div class="line" id="165318"><span class="nick" style="color:#389600"><a href="#165318" label="[16:53:18]">&lt;janus&gt;</a></span><span class="message">rekado isn't in here, how do i reach them?</span></div><div class="line" id="165344"><span class="nick" style="color:#234e69"><a href="#165344" label="[16:53:44]">&lt;oriansj&gt;</a></span><span class="message">they also are on #guix if I remember correctly</span></div><div class="line" id="165404"><span class="nick" style="color:#234e69"><a href="#165404" label="[16:54:04]">&lt;oriansj&gt;</a></span><span class="message">and I believe they do respond to emails as well</span></div><div class="line" id="165514"><span class="nick" style="color:#389600"><a href="#165514" label="[16:55:14]">&lt;janus&gt;</a></span><span class="message">ok thanks</span></div><div class="line" id="165857"><span class="nick" style="color:#234e69"><a href="#165857" label="[16:58:57]">&lt;oriansj&gt;</a></span><span class="message">sam_: well I found a trap in gentoo that I can't find a solution to in the gentoo documentation. If one sets PORTAGE_BINHOST in /etc/portage/make.conf and does an emerge; then goes back and comments out or deletes the line, all following emerges fail with: &quot;!!! /etc/portage/binrepos.conf is missing (or PORTAGE_BINHOST is unset), but use is requested&quot;</span></div><div class="line" id="165911"><span class="nick" style="color:#af8d2f"><a href="#165911" label="[16:59:11]">&lt;sam_&gt;</a></span><span class="message">i suspect you have an EMERGE_DEFAULT_OPTS set with getbinpkg or something</span></div><div class="line" id="165951"><span class="nick" style="color:#234e69"><a href="#165951" label="[16:59:51]">&lt;oriansj&gt;</a></span><span class="message">echo -e &quot;\nEMERGE_DEFAULT_OPTS=\&quot;--keep-going=y --autounmask-write=y --jobs=2 -G\&quot;&quot;</span></div><div class="line" id="170000"><span class="nick" style="color:#234e69"><a href="#170000" label="[17:00:00]">&lt;oriansj&gt;</a></span><span class="message">would that be the -G?</span></div><div class="line" id="170110"><span class="nick" style="color:#234e69"><a href="#170110" label="[17:01:10]">&lt;oriansj&gt;</a></span><span class="message">yes</span></div><div class="line" id="170124"><span class="nick" style="color:#234e69"><a href="#170124" label="[17:01:24]">&lt;oriansj&gt;</a></span><span class="message"> thank you for the sanity check sam_</span></div><div class="line" id="170131"><span class="nick" style="color:#af8d2f"><a href="#170131" label="[17:01:31]">&lt;sam_&gt;</a></span><span class="message">:D</span></div><div class="line" id="170138"><span class="nick" style="color:#af8d2f"><a href="#170138" label="[17:01:38]">&lt;sam_&gt;</a></span><span class="message">np</span></div><div class="line" id="201623"><span class="nick" style="color:#3c5b35"><a href="#201623" label="[20:16:23]">&lt;doras&gt;</a></span><span class="message">So apparently glibc doesn't like being built for i386 and our GCC in live-bootstrap can't handle anything else.</span></div><div class="line" id="201832"><span class="nick" style="color:#3c5b35"><a href="#201832" label="[20:18:32]">&lt;doras&gt;</a></span><span class="message">Wait, perhaps not. Hmmm...</span></div><div class="line" id="202041"><span class="nick" style="color:#3c5b35"><a href="#202041" label="[20:20:41]">&lt;doras&gt;</a></span><span class="message">Oh I see, it has a default `-mtune=i386` `-march=i386`.</span></div><div class="line" id="202217"><span class="nick" style="color:#6b8072"><a href="#202217" label="[20:22:17]">&lt;stikonas&gt;</a></span><span class="message">it has to build. There are still distros supporting i386...</span></div><div class="line" id="202254"><span class="nick" style="color:#6b8072"><a href="#202254" label="[20:22:54]">&lt;stikonas&gt;</a></span><span class="message">maybe some configure argument or env variable is wrong</span></div><div class="line" id="202308"><span class="nick" style="color:#6b8072"><a href="#202308" label="[20:23:08]">&lt;stikonas&gt;</a></span><span class="message">guix also builds glibc for i386</span></div><div class="line" id="203355"><span class="nick" style="color:#234e69"><a href="#203355" label="[20:33:55]">&lt;oriansj&gt;</a></span><span class="message">worst case we do i686</span></div><div class="line" id="203445"><span class="nick" style="color:#234e69"><a href="#203445" label="[20:34:45]">&lt;oriansj&gt;</a></span><span class="message">and that should cover every chip made after the Pentium Pro</span></div><div class="line" id="204436"><span class="nick" style="color:#af8d2f"><a href="#204436" label="[20:44:36]">&lt;sam_&gt;</a></span><span class="message">define &quot;doesn't like&quot;</span></div><div class="line" id="204443"><span class="nick" style="color:#af8d2f"><a href="#204443" label="[20:44:43]">&lt;sam_&gt;</a></span><span class="message">(full log please)</span></div><div class="line" id="210817"><span class="nick" style="color:#234e69"><a href="#210817" label="[21:08:17]">&lt;oriansj&gt;</a></span><span class="message">sam_: I put logger &quot;cpp_match for ${CATEGORY}/${PN}: ${cxx_files}&quot; in post_src_prepare() would I be right in that stage3 doesn't contain what logger needs to write to the logs and thus would need to add something like emerge -av syslog to the procedure?</span></div><div class="line" id="211244"><span class="nick" style="color:#234e69"><a href="#211244" label="[21:12:44]">&lt;oriansj&gt;</a></span><span class="message">because journald isn't picking up anything and /var/log isn't getting any logger command</span></div><div class="line" id="211453"><span class="nick" style="color:#234e69"><a href="#211453" label="[21:14:53]">&lt;oriansj&gt;</a></span><span class="message">or maybe I'm missing extra mount commands???</span></div><div class="line" id="212517"><span class="nick" style="color:#af8d2f"><a href="#212517" label="[21:25:17]">&lt;sam_&gt;</a></span><span class="message">right, I don't think a stage3 contains virtual/logger</span></div><div class="line" id="212527"><span class="nick" style="color:#af8d2f"><a href="#212527" label="[21:25:27]">&lt;sam_&gt;</a></span><span class="message">(which depends on any of the various packages providing 'logger')</span></div><div class="line" id="212546"><span class="nick" style="color:#af8d2f"><a href="#212546" label="[21:25:46]">&lt;sam_&gt;</a></span><span class="message">so yes, I think your conclusion is right</span></div><div class="line" id="213928"><span class="nick" style="color:#234e69"><a href="#213928" label="[21:39:28]">&lt;oriansj&gt;</a></span><span class="message">sam_: well I guess figuring out that detail will have to wait for the next iteration of testing the setup procedure (by testing the mount option change) and hopefully that'll be that and I'll finally have some logging of how many cpp files are in the packages built in the process of following the procedure</span></div><br /></div></body></html>