<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2024-01-10.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="002327"><span class="nick" style="color:#389600"><a href="#002327" label="[00:23:27]">&lt;muurkha&gt;</a></span><span class="message">oriansj: yes, FIG-FORTH is written in assembly, but IIRC it's written in assembly in FORTH.  I'm not sure what point that proves; that you can't run an interpreter in itself?</span></div><div class="line" id="002616"><span class="nick" style="color:#8dd3c7"><a href="#002616" label="[00:26:16]">&lt;stikonas&gt;</a></span><span class="message">well, interpreter in itself would simply be slow...</span></div><div class="line" id="002626"><span class="nick" style="color:#8dd3c7"><a href="#002626" label="[00:26:26]">&lt;stikonas&gt;</a></span><span class="message">interpreters are already much slower than compilers</span></div><div class="line" id="002637"><span class="nick" style="color:#389600"><a href="#002637" label="[00:26:37]">&lt;muurkha&gt;</a></span><span class="message">I mean you need some other layer to run the lower-level interpreter</span></div><div class="line" id="002651"><span class="nick" style="color:#389600"><a href="#002651" label="[00:26:51]">&lt;muurkha&gt;</a></span><span class="message">it can't be turtles all the way down the way it can be with compilers, even slow ones</span></div><div class="line" id="002710"><span class="nick" style="color:#8dd3c7"><a href="#002710" label="[00:27:10]">&lt;stikonas&gt;</a></span><span class="message">indeed, but you could think of two layer solution, though even that I haven't seen in practive</span></div><div class="line" id="002728"><span class="nick" style="color:#389600"><a href="#002728" label="[00:27:28]">&lt;muurkha&gt;</a></span><span class="message">sure, and that's actually useful for debugging, for example</span></div><div class="line" id="002750"><span class="nick" style="color:#389600"><a href="#002750" label="[00:27:50]">&lt;muurkha&gt;</a></span><span class="message">Squeak or PyPy will run under itself or under an alternative implementation of Smalltalk or Python</span></div><div class="line" id="002757"><span class="nick" style="color:#389600"><a href="#002757" label="[00:27:57]">&lt;muurkha&gt;</a></span><span class="message">or anyway they used to be able to</span></div><div class="line" id="002822"><span class="nick" style="color:#389600"><a href="#002822" label="[00:28:22]">&lt;muurkha&gt;</a></span><span class="message">but you can't *only* run an interpreter under itself; the outermost layer of interpretation needs some connection to physical reality</span></div><div class="line" id="002959"><span class="nick" style="color:#389600"><a href="#002959" label="[00:29:59]">&lt;muurkha&gt;</a></span><span class="message">anyway in general I think it makes sense to think of FORTH environments as shell scripting for assembly subroutines, so writing the interpreter in assembly in FORTH doesn't seem like a departure from FORTH to me</span></div><div class="line" id="010229"><span class="nick" style="color:#2e2a4a"><a href="#010229" label="[01:02:29]">&lt;Googulator&gt;</a></span><span class="message">stikonas: they definitely work in the 2nd bash</span></div><div class="line" id="010258"><span class="nick" style="color:#2e2a4a"><a href="#010258" label="[01:02:58]">&lt;Googulator&gt;</a></span><span class="message">(&quot;too well&quot;, almost - adding the ERR trap in interactive mode exposed a previously unnoticed bug in autogen's bootstrap)</span></div><div class="line" id="010304"><span class="nick" style="color:#2e2a4a"><a href="#010304" label="[01:03:04]">&lt;Googulator&gt;</a></span><span class="message">not tested in the 1st</span></div><div class="line" id="010314"><span class="nick" style="color:#6b8072"><a href="#010314" label="[01:03:14]">&lt;oriansj&gt;</a></span><span class="message">muurkha: I think of FORTH more of a higher level JIT'd macro assembler; which went to the logical conclusion of an ad-hoc assembly developer.</span></div><div class="line" id="010543"><span class="nick" style="color:#389600"><a href="#010543" label="[01:05:43]">&lt;muurkha&gt;</a></span><span class="message">oriansj: ITC forth isn't JITted</span></div><div class="line" id="010559"><span class="nick" style="color:#389600"><a href="#010559" label="[01:05:59]">&lt;muurkha&gt;</a></span><span class="message">there are some forths that are</span></div><div class="line" id="010616"><span class="nick" style="color:#389600"><a href="#010616" label="[01:06:16]">&lt;muurkha&gt;</a></span><span class="message">well, maybe.  I haven't seen one really</span></div><div class="line" id="010621"><span class="nick" style="color:#389600"><a href="#010621" label="[01:06:21]">&lt;muurkha&gt;</a></span><span class="message">but not FIG-FORTH or most of the ones described above</span></div><div class="line" id="010631"><span class="nick" style="color:#6b8072"><a href="#010631" label="[01:06:31]">&lt;oriansj&gt;</a></span><span class="message">all FORTHs have the ability to dump in some assembly and jump to it</span></div><div class="line" id="010642"><span class="nick" style="color:#389600"><a href="#010642" label="[01:06:42]">&lt;muurkha&gt;</a></span><span class="message">well, almost all.  I don't think pfe does</span></div><div class="line" id="010702"><span class="nick" style="color:#389600"><a href="#010702" label="[01:07:02]">&lt;muurkha&gt;</a></span><span class="message">(not mentioning StoneKnifeForth because it doesn't rise to the level of being a forth)</span></div><div class="line" id="010738"><span class="nick" style="color:#6b8072"><a href="#010738" label="[01:07:38]">&lt;oriansj&gt;</a></span><span class="message">muurkha: well do you have the abilty in StoneKnifeForth to write bytes to memory and jump to a memory address?</span></div><div class="line" id="010819"><span class="nick" style="color:#389600"><a href="#010819" label="[01:08:19]">&lt;muurkha&gt;</a></span><span class="message">no</span></div><div class="line" id="010848"><span class="nick" style="color:#6b8072"><a href="#010848" label="[01:08:48]">&lt;oriansj&gt;</a></span><span class="message">really?</span></div><div class="line" id="010854"><span class="nick" style="color:#389600"><a href="#010854" label="[01:08:54]">&lt;muurkha&gt;</a></span><span class="message">yeah</span></div><div class="line" id="010908"><span class="nick" style="color:#389600"><a href="#010908" label="[01:09:08]">&lt;muurkha&gt;</a></span><span class="message">I mean the bootstrap implementation of SKF is in Python</span></div><div class="line" id="011011"><span class="nick" style="color:#6b8072"><a href="#011011" label="[01:10:11]">&lt;oriansj&gt;</a></span><span class="message">yeah, that could make it harder to support that feature of FORTH</span></div><div class="line" id="011235"><span class="nick" style="color:#389600"><a href="#011235" label="[01:12:35]">&lt;muurkha&gt;</a></span><span class="message">yeah.  it also doesn't support IMMEDIATE words</span></div><div class="line" id="011249"><span class="nick" style="color:#389600"><a href="#011249" label="[01:12:49]">&lt;muurkha&gt;</a></span><span class="message">or interactivity</span></div><div class="line" id="011301"><span class="nick" style="color:#389600"><a href="#011301" label="[01:13:01]">&lt;muurkha&gt;</a></span><span class="message">thus my statement that it doesn't rise to the level of being a forth</span></div><div class="line" id="011333"><span class="nick" style="color:#389600"><a href="#011333" label="[01:13:33]">&lt;muurkha&gt;</a></span><span class="message">but pfe is a forth, and it doesn't come with an assembler</span></div><div class="line" id="011341"><span class="nick" style="color:#389600"><a href="#011341" label="[01:13:41]">&lt;muurkha&gt;</a></span><span class="message">but you could probably write one in it, if that's what you mean</span></div><div class="line" id="011350"><span class="nick" style="color:#389600"><a href="#011350" label="[01:13:50]">&lt;muurkha&gt;</a></span><span class="message">including a load-and-go assembler</span></div><div class="line" id="011423"><span class="nick" style="color:#6b8072"><a href="#011423" label="[01:14:23]">&lt;oriansj&gt;</a></span><span class="message">but if you can write bytes to memory in FORTH, then the assembler could be written in FORTH itself</span></div><div class="line" id="011427"><span class="nick" style="color:#389600"><a href="#011427" label="[01:14:27]">&lt;muurkha&gt;</a></span><span class="message">right</span></div><div class="line" id="011440"><span class="nick" style="color:#389600"><a href="#011440" label="[01:14:40]">&lt;muurkha&gt;</a></span><span class="message">not sure if pfe exposes the necessary mprotect() but that's fixable</span></div><div class="line" id="011451"><span class="nick" style="color:#6b8072"><a href="#011451" label="[01:14:51]">&lt;oriansj&gt;</a></span><span class="message">and if you can jump to a memory address, you effectively have a JIT</span></div><div class="line" id="011454"><span class="nick" style="color:#389600"><a href="#011454" label="[01:14:54]">&lt;muurkha&gt;</a></span><span class="message">the thing that distinguishes a JIT compiler from a load-and-go compiler from my point of view is that the JIT compiler compiles things when you execute them, not when they are input to the compiler</span></div><div class="line" id="011509"><span class="nick" style="color:#389600"><a href="#011509" label="[01:15:09]">&lt;muurkha&gt;</a></span><span class="message">so you have something that you could build a JIT with in that case</span></div><div class="line" id="011608"><span class="nick" style="color:#6b8072"><a href="#011608" label="[01:16:08]">&lt;oriansj&gt;</a></span><span class="message">which is what you would do if you needed to speed something up in FORTH</span></div><div class="line" id="011632"><span class="nick" style="color:#6b8072"><a href="#011632" label="[01:16:32]">&lt;oriansj&gt;</a></span><span class="message">akin to C's ASM() blocks</span></div><div class="line" id="011752"><span class="nick" style="color:#6b8072"><a href="#011752" label="[01:17:52]">&lt;oriansj&gt;</a></span><span class="message">or if you needed to include some essential functionality the language doesn't support by default (again just like C's ASM() blocks)</span></div><div class="line" id="012758"><span class="nick" style="color:#8dd3c7"><a href="#012758" label="[01:27:58]">&lt;stikonas&gt;</a></span><span class="message">Googulator: for gnu-autogen-bootstrap, I guess we just didn't need to upgrade...</span></div><div class="line" id="012841"><span class="nick" style="color:#2e2a4a"><a href="#012841" label="[01:28:41]">&lt;Googulator&gt;</a></span><span class="message">could be, but the patches that did go in beyond what's used in LB are ours</span></div><div class="line" id="012847"><span class="nick" style="color:#2e2a4a"><a href="#012847" label="[01:28:47]">&lt;Googulator&gt;</a></span><span class="message">all back in 2022</span></div><div class="line" id="012854"><span class="nick" style="color:#2e2a4a"><a href="#012854" label="[01:28:54]">&lt;Googulator&gt;</a></span><span class="message">repository untouched since then</span></div><div class="line" id="012910"><span class="nick" style="color:#8dd3c7"><a href="#012910" label="[01:29:10]">&lt;stikonas&gt;</a></span><span class="message">I guess we considered it done</span></div><div class="line" id="012917"><span class="nick" style="color:#8dd3c7"><a href="#012917" label="[01:29:17]">&lt;stikonas&gt;</a></span><span class="message">well it did its job...</span></div><div class="line" id="012944"><span class="nick" style="color:#2e2a4a"><a href="#012944" label="[01:29:44]">&lt;Googulator&gt;</a></span><span class="message">oh wait, he actually merged the PR :) nice!</span></div><div class="line" id="013003"><span class="nick" style="color:#8dd3c7"><a href="#013003" label="[01:30:03]">&lt;stikonas&gt;</a></span><span class="message">yaeh, mihi can frequently be found here too</span></div><div class="line" id="013047"><span class="nick" style="color:#8dd3c7"><a href="#013047" label="[01:30:47]">&lt;stikonas&gt;</a></span><span class="message">mihi did another bootstrap before autogen too... Guile</span></div><div class="line" id="013116"><span class="nick" style="color:#2e2a4a"><a href="#013116" label="[01:31:16]">&lt;Googulator&gt;</a></span><span class="message">right, the psyntax one</span></div><div class="line" id="013330"><span class="nick" style="color:#2e2a4a"><a href="#013330" label="[01:33:30]">&lt;Googulator&gt;</a></span><span class="message">the good news is that even without a tag, we can do <a rel="nofollow" href="https://github.com/schierlm/gnu-autogen-bootstrapping/archive/6bd36aa803c76fcfd1345b043f082c6399766325.tar.gz">https://github.com/schierlm/gnu-autogen-bootstrapping/archive/6bd36aa803c76fcfd1345b043f082c6399766325.tar.gz</a> </span></div><div class="line" id="013409"><span class="nick" style="color:#8dd3c7"><a href="#013409" label="[01:34:09]">&lt;stikonas&gt;</a></span><span class="message">yeah, we can</span></div><div class="line" id="013414"><span class="nick" style="color:#2e2a4a"><a href="#013414" label="[01:34:14]">&lt;Googulator&gt;</a></span><span class="message">the bad news is that it includes all of those other fixes (mostly your ones, though) that were AFAIK never before used in LB</span></div><div class="line" id="013421"><span class="nick" style="color:#8dd3c7"><a href="#013421" label="[01:34:21]">&lt;stikonas&gt;</a></span><span class="message">I just thought maybe wait a day or two and see if we can just pull in new version</span></div><div class="line" id="013432"><span class="nick" style="color:#8dd3c7"><a href="#013432" label="[01:34:32]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="013441"><span class="nick" style="color:#8dd3c7"><a href="#013441" label="[01:34:41]">&lt;stikonas&gt;</a></span><span class="message">aren't they duplicated in our scripts</span></div><div class="line" id="013443"><span class="nick" style="color:#6b8072"><a href="#013443" label="[01:34:43]">&lt;oriansj&gt;</a></span><span class="message">the most important bootstrap after GCC was definitely guile</span></div><div class="line" id="013457"><span class="nick" style="color:#8dd3c7"><a href="#013457" label="[01:34:57]">&lt;stikonas&gt;</a></span><span class="message">like making manpages reproducible</span></div><div class="line" id="013524"><span class="nick" style="color:#8dd3c7"><a href="#013524" label="[01:35:24]">&lt;stikonas&gt;</a></span><span class="message">oriansj: also kernel bootstrapping</span></div><div class="line" id="013528"><span class="nick" style="color:#8dd3c7"><a href="#013528" label="[01:35:28]">&lt;stikonas&gt;</a></span><span class="message">that is even bigger</span></div><div class="line" id="013538"><span class="nick" style="color:#8dd3c7"><a href="#013538" label="[01:35:38]">&lt;stikonas&gt;</a></span><span class="message">it's probably still a bit rough</span></div><div class="line" id="013557"><span class="nick" style="color:#8dd3c7"><a href="#013557" label="[01:35:57]">&lt;stikonas&gt;</a></span><span class="message">but 2 years ago we had almost nothign</span></div><div class="line" id="013630"><span class="nick" style="color:#2e2a4a"><a href="#013630" label="[01:36:30]">&lt;Googulator&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/schierlm/gnu-autogen-bootstrapping/archive/6bd36aa803c76fcfd1345b043f082c6399766325.tar.gz">https://github.com/schierlm/gnu-autogen-bootstrapping/archive/6bd36aa803c76fcfd1345b043f082c6399766325.tar.gz</a>  this one isn't</span></div><div class="line" id="013659"><span class="nick" style="color:#6b8072"><a href="#013659" label="[01:36:59]">&lt;oriansj&gt;</a></span><span class="message">and then boom rickmasters for the win with builder-hex0</span></div><div class="line" id="013736"><span class="nick" style="color:#2e2a4a"><a href="#013736" label="[01:37:36]">&lt;Googulator&gt;</a></span><span class="message">the other patches are mirrored in our custom script</span></div><div class="line" id="013804"><span class="nick" style="color:#6b8072"><a href="#013804" label="[01:38:04]">&lt;oriansj&gt;</a></span><span class="message">and the Fiwix work was a gift from heaven that did in only a couple years what I thought might take decades.</span></div><div class="line" id="013818"><span class="nick" style="color:#389600"><a href="#013818" label="[01:38:18]">&lt;muurkha&gt;</a></span><span class="message">yes!</span></div><div class="line" id="013827"><span class="nick" style="color:#8dd3c7"><a href="#013827" label="[01:38:27]">&lt;stikonas&gt;</a></span><span class="message">Googulator: well, that's just your last commit from today</span></div><div class="line" id="013844"><span class="nick" style="color:#2e2a4a"><a href="#013844" label="[01:38:44]">&lt;Googulator&gt;</a></span><span class="message">oh right, copied the wrong one</span></div><div class="line" id="013857"><span class="nick" style="color:#2e2a4a"><a href="#013857" label="[01:38:57]">&lt;Googulator&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/schierlm/gnu-autogen-bootstrapping/commit/07291ecceb08dc9ee7606a1307668b707be7ac27">https://github.com/schierlm/gnu-autogen-bootstrapping/commit/07291ecceb08dc9ee7606a1307668b707be7ac27</a> </span></div><div class="line" id="013930"><span class="nick" style="color:#8dd3c7"><a href="#013930" label="[01:39:30]">&lt;stikonas&gt;</a></span><span class="message">strange, it's my patch</span></div><div class="line" id="013938"><span class="nick" style="color:#8dd3c7"><a href="#013938" label="[01:39:38]">&lt;stikonas&gt;</a></span><span class="message">it must have come from integration into live-bootstrap...</span></div><div class="line" id="013947"><span class="nick" style="color:#2e2a4a"><a href="#013947" label="[01:39:47]">&lt;Googulator&gt;</a></span><span class="message">oh, actually we do</span></div><div class="line" id="013949"><span class="nick" style="color:#6b8072"><a href="#013949" label="[01:39:49]">&lt;oriansj&gt;</a></span><span class="message">now with Googulator's help; it is getting improvements and even nicer. ^_^</span></div><div class="line" id="014008"><span class="nick" style="color:#8dd3c7"><a href="#014008" label="[01:40:08]">&lt;stikonas&gt;</a></span><span class="message">mihi did autogen bootstrap but I had to fix some reproducibility issues after that</span></div><div class="line" id="014009"><span class="nick" style="color:#2e2a4a"><a href="#014009" label="[01:40:09]">&lt;Googulator&gt;</a></span><span class="message">I just didn't realize we call ./configure in src_compile</span></div><div class="line" id="014025"><span class="nick" style="color:#8dd3c7"><a href="#014025" label="[01:40:25]">&lt;stikonas&gt;</a></span><span class="message">oh because autogen is weird</span></div><div class="line" id="014028"><span class="nick" style="color:#8dd3c7"><a href="#014028" label="[01:40:28]">&lt;stikonas&gt;</a></span><span class="message">it has two stages</span></div><div class="line" id="014032"><span class="nick" style="color:#2e2a4a"><a href="#014032" label="[01:40:32]">&lt;Googulator&gt;</a></span><span class="message">I assumed it would be in src_configure</span></div><div class="line" id="014035"><span class="nick" style="color:#8dd3c7"><a href="#014035" label="[01:40:35]">&lt;stikonas&gt;</a></span><span class="message">boottstrap and rebuild</span></div><div class="line" id="014042"><span class="nick" style="color:#8dd3c7"><a href="#014042" label="[01:40:42]">&lt;stikonas&gt;</a></span><span class="message">and bootstrap one can't be run from any other path</span></div><div class="line" id="014048"><span class="nick" style="color:#2e2a4a"><a href="#014048" label="[01:40:48]">&lt;Googulator&gt;</a></span><span class="message">makes sense then</span></div><div class="line" id="014050"><span class="nick" style="color:#8dd3c7"><a href="#014050" label="[01:40:50]">&lt;stikonas&gt;</a></span><span class="message">so it's all in one stage</span></div><div class="line" id="014107"><span class="nick" style="color:#8dd3c7"><a href="#014107" label="[01:41:07]">&lt;stikonas&gt;</a></span><span class="message">ideally we would split it into pass1.sh and pass2.sh</span></div><div class="line" id="014131"><span class="nick" style="color:#8dd3c7"><a href="#014131" label="[01:41:31]">&lt;stikonas&gt;</a></span><span class="message">but it doesn't work in this particular case</span></div><div class="line" id="014207"><span class="nick" style="color:#8dd3c7"><a href="#014207" label="[01:42:07]">&lt;stikonas&gt;</a></span><span class="message">that live-bootstrap src_compile partially unpicks the wrapper script from gnu-autogen-bootstrap</span></div><div class="line" id="014215"><span class="nick" style="color:#8dd3c7"><a href="#014215" label="[01:42:15]">&lt;stikonas&gt;</a></span><span class="message">and manually runs parts of it</span></div><div class="line" id="014232"><span class="nick" style="color:#8dd3c7"><a href="#014232" label="[01:42:32]">&lt;stikonas&gt;</a></span><span class="message">to better fit into live-bootstrap structure</span></div><div class="line" id="014244"><span class="nick" style="color:#8dd3c7"><a href="#014244" label="[01:42:44]">&lt;stikonas&gt;</a></span><span class="message">i.e. we don't wan't to download stuff in src_compile...</span></div><div class="line" id="014255"><span class="nick" style="color:#2e2a4a"><a href="#014255" label="[01:42:55]">&lt;Googulator&gt;</a></span><span class="message">Which in turn is why we caught this issue in the first place</span></div><div class="line" id="014309"><span class="nick" style="color:#2e2a4a"><a href="#014309" label="[01:43:09]">&lt;Googulator&gt;</a></span><span class="message">because we source the script instead of calling it</span></div><div class="line" id="014319"><span class="nick" style="color:#2e2a4a"><a href="#014319" label="[01:43:19]">&lt;Googulator&gt;</a></span><span class="message">so &quot;set -E&quot; propagates to it</span></div><div class="line" id="014359"><span class="nick" style="color:#8dd3c7"><a href="#014359" label="[01:43:59]">&lt;stikonas&gt;</a></span><span class="message">anyway, mihi is our local person here</span></div><div class="line" id="014422"><span class="nick" style="color:#8dd3c7"><a href="#014422" label="[01:44:22]">&lt;stikonas&gt;</a></span><span class="message">so it should be fine</span></div><div class="line" id="014430"><span class="nick" style="color:#8dd3c7"><a href="#014430" label="[01:44:30]">&lt;stikonas&gt;</a></span><span class="message">unlike autogen maintainer...</span></div><div class="line" id="014441"><span class="nick" style="color:#8dd3c7"><a href="#014441" label="[01:44:41]">&lt;stikonas&gt;</a></span><span class="message">(who wasn't interested in this bootstrapping work at all)</span></div><div class="line" id="014557"><span class="nick" style="color:#2e2a4a"><a href="#014557" label="[01:45:57]">&lt;Googulator&gt;</a></span><span class="message">well, at least he didn't cause early code to be lost forever, unlike Haskell folks</span></div><div class="line" id="014604"><span class="nick" style="color:#8dd3c7"><a href="#014604" label="[01:46:04]">&lt;stikonas&gt;</a></span><span class="message">true...</span></div><div class="line" id="014616"><span class="nick" style="color:#8dd3c7"><a href="#014616" label="[01:46:16]">&lt;stikonas&gt;</a></span><span class="message">though bootstrapping was done on modern code</span></div><div class="line" id="014642"><span class="nick" style="color:#8dd3c7"><a href="#014642" label="[01:46:42]">&lt;stikonas&gt;</a></span><span class="message">early autogen code wasn't useful either</span></div><div class="line" id="014651"><span class="nick" style="color:#8dd3c7"><a href="#014651" label="[01:46:51]">&lt;stikonas&gt;</a></span><span class="message">depended on old guile</span></div><div class="line" id="014709"><span class="nick" style="color:#8dd3c7"><a href="#014709" label="[01:47:09]">&lt;stikonas&gt;</a></span><span class="message">and might have had depended on itself from very early commits</span></div><div class="line" id="014731"><span class="nick" style="color:#8dd3c7"><a href="#014731" label="[01:47:31]">&lt;stikonas&gt;</a></span><span class="message">well, bison had a commit that already depended on itself</span></div><div class="line" id="014739"><span class="nick" style="color:#8dd3c7"><a href="#014739" label="[01:47:39]">&lt;stikonas&gt;</a></span><span class="message">so sometimes even git history doesn't help</span></div><div class="line" id="014817"><span class="nick" style="color:#8dd3c7"><a href="#014817" label="[01:48:17]">&lt;stikonas&gt;</a></span><span class="message">but yeah, hashell is a particularly big offender</span></div><div class="line" id="014835"><span class="nick" style="color:#8dd3c7"><a href="#014835" label="[01:48:35]">&lt;stikonas&gt;</a></span><span class="message">and in the meantime, I've cleaned up some old hack in live-bootstrap <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/401">https://github.com/fosslinux/live-bootstrap/pull/401</a> </span></div><div class="line" id="014854"><span class="nick" style="color:#2e2a4a"><a href="#014854" label="[01:48:54]">&lt;Googulator&gt;</a></span><span class="message">I was able to find an even earlier version of hbc/lmlc today, v0.99 (the very first one to include the Haskell frontend)</span></div><div class="line" id="014905"><span class="nick" style="color:#2e2a4a"><a href="#014905" label="[01:49:05]">&lt;Googulator&gt;</a></span><span class="message">unfortunately it too depends on an earlier version of lmlc :(</span></div><div class="line" id="014916"><span class="nick" style="color:#2e2a4a"><a href="#014916" label="[01:49:16]">&lt;Googulator&gt;</a></span><span class="message">makes me wonder how LazyML was originally bootstrapped</span></div><div class="line" id="014945"><span class="nick" style="color:#2e2a4a"><a href="#014945" label="[01:49:45]">&lt;Googulator&gt;</a></span><span class="message">apparently lmlc was the only compiler to ever exist for it</span></div><div class="line" id="015352"><span class="nick" style="color:#2e2a4a"><a href="#015352" label="[01:53:52]">&lt;Googulator&gt;</a></span><span class="message">unfortunately I spoke too soon about Yale Haskell - the version in Guix segfaults on any attempt to print to the screen</span></div><div class="line" id="015418"><span class="nick" style="color:#389600"><a href="#015418" label="[01:54:18]">&lt;muurkha&gt;</a></span><span class="message">aw :(</span></div><div class="line" id="015442"><span class="nick" style="color:#2e2a4a"><a href="#015442" label="[01:54:42]">&lt;Googulator&gt;</a></span><span class="message">and the locally built one was actually not building half of the prelude at all - it just printed a random error message in the midst of rapidly scrolling garbage, and then moved on, pretending all is fine</span></div><div class="line" id="015735"><span class="nick" style="color:#389600"><a href="#015735" label="[01:57:35]">&lt;muurkha&gt;</a></span><span class="message">hmm!  that's depressing</span></div><div class="line" id="015745"><span class="nick" style="color:#389600"><a href="#015745" label="[01:57:45]">&lt;muurkha&gt;</a></span><span class="message">though probably at the time the garbage was scrolling much more slowly</span></div><div class="line" id="015804"><span class="nick" style="color:#8dd3c7"><a href="#015804" label="[01:58:04]">&lt;stikonas&gt;</a></span><span class="message">how big are those early codebases?</span></div><div class="line" id="015807"><span class="nick" style="color:#8dd3c7"><a href="#015807" label="[01:58:07]">&lt;stikonas&gt;</a></span><span class="message">e.g. ghc 0.26</span></div><div class="line" id="015811"><span class="nick" style="color:#2e2a4a"><a href="#015811" label="[01:58:11]">&lt;Googulator&gt;</a></span><span class="message">Yale Haskell's port to clisp is a fairly recent one</span></div><div class="line" id="015843"><span class="nick" style="color:#2e2a4a"><a href="#015843" label="[01:58:43]">&lt;Googulator&gt;</a></span><span class="message">it's originally intended for CMUCL and a few commercial Lisps</span></div><div class="line" id="015906"><span class="nick" style="color:#2e2a4a"><a href="#015906" label="[01:59:06]">&lt;Googulator&gt;</a></span><span class="message">I've not had luck compiling either CMUCL or Yale Haskell using SBCL unfortunately</span></div><div class="line" id="015925"><span class="nick" style="color:#2e2a4a"><a href="#015925" label="[01:59:25]">&lt;Googulator&gt;</a></span><span class="message">(SBCL is a bootstrappable CMUCL fork, but it has heavily diverged)</span></div><div class="line" id="020025"><span class="nick" style="color:#2e2a4a"><a href="#020025" label="[02:00:25]">&lt;Googulator&gt;</a></span><span class="message">ghc 0.26's source tarball is 26MB uncompressed</span></div><div class="line" id="020044"><span class="nick" style="color:#2e2a4a"><a href="#020044" label="[02:00:44]">&lt;Googulator&gt;</a></span><span class="message">and that's *without* tests</span></div><div class="line" id="020105"><span class="nick" style="color:#389600"><a href="#020105" label="[02:01:05]">&lt;muurkha&gt;</a></span><span class="message">ooh, does the CMUCL build process depend on the Lisp system supporting CMUCL-isms that SBCL has abandoned?</span></div><div class="line" id="020106"><span class="nick" style="color:#8dd3c7"><a href="#020106" label="[02:01:06]">&lt;stikonas&gt;</a></span><span class="message">hmm, perhaps a bit too much to port to another language</span></div><div class="line" id="020330"><span class="nick" style="color:#2e2a4a"><a href="#020330" label="[02:03:30]">&lt;Googulator&gt;</a></span><span class="message">lmlc/hbc is much smaller, about 1.8MB source, half of which is C</span></div><div class="line" id="020350"><span class="nick" style="color:#2e2a4a"><a href="#020350" label="[02:03:50]">&lt;Googulator&gt;</a></span><span class="message">the rest is LazyML</span></div><div class="line" id="020351"><span class="nick" style="color:#389600"><a href="#020351" label="[02:03:51]">&lt;muurkha&gt;</a></span><span class="message">I guess I was being overoptimistc when I assumed CMUCL was written in Common Lisp rather than in CMUCL</span></div><div class="line" id="020405"><span class="nick" style="color:#8dd3c7"><a href="#020405" label="[02:04:05]">&lt;stikonas&gt;</a></span><span class="message">ok, tha'ts reasonable to port...</span></div><div class="line" id="020418"><span class="nick" style="color:#8dd3c7"><a href="#020418" label="[02:04:18]">&lt;stikonas&gt;</a></span><span class="message">so maybe 900 KiB of LazyML</span></div><div class="line" id="020446"><span class="nick" style="color:#2e2a4a"><a href="#020446" label="[02:04:46]">&lt;Googulator&gt;</a></span><span class="message">CMUCL's build system assumes that CMUCL is not only installed, but installed in a specific way to a specific path, on a specific kind of host system specifically configured for the specific use case of building CMUCL</span></div><div class="line" id="020452"><span class="nick" style="color:#389600"><a href="#020452" label="[02:04:52]">&lt;muurkha&gt;</a></span><span class="message">I guess Miranda is a dead end?</span></div><div class="line" id="020506"><span class="nick" style="color:#2e2a4a"><a href="#020506" label="[02:05:06]">&lt;Googulator&gt;</a></span><span class="message">wasn't Miranda commercial?</span></div><div class="line" id="020508"><span class="nick" style="color:#389600"><a href="#020508" label="[02:05:08]">&lt;muurkha&gt;</a></span><span class="message">yes</span></div><div class="line" id="020537"><span class="nick" style="color:#389600"><a href="#020537" label="[02:05:37]">&lt;muurkha&gt;</a></span><span class="message">the build-system thing makes sense now that you say it; they probably had one specific machine they built it on</span></div><div class="line" id="020632"><span class="nick" style="color:#389600"><a href="#020632" label="[02:06:32]">&lt;muurkha&gt;</a></span><span class="message">and if they wanted to install a new machine, why, spending a few minutes tweaking the build script every three or four years wasn't a big deal</span></div><div class="line" id="020635"><span class="nick" style="color:#2e2a4a"><a href="#020635" label="[02:06:35]">&lt;Googulator&gt;</a></span><span class="message">oh, apparently Miranda did get released under a BSD license eventually</span></div><div class="line" id="020636"><span class="nick" style="color:#389600"><a href="#020636" label="[02:06:36]">&lt;muurkha&gt;</a></span><span class="message">I'm guessing</span></div><div class="line" id="020700"><span class="nick" style="color:#389600"><a href="#020700" label="[02:07:00]">&lt;muurkha&gt;</a></span><span class="message">oh, that's good!  was there a Haskell written in Miranda?</span></div><div class="line" id="020707"><span class="nick" style="color:#389600"><a href="#020707" label="[02:07:07]">&lt;muurkha&gt;</a></span><span class="message">and, if so, what was Miranda written in?</span></div><div class="line" id="020709"><span class="nick" style="color:#2e2a4a"><a href="#020709" label="[02:07:09]">&lt;Googulator&gt;</a></span><span class="message">Not that I'm aware of.</span></div><div class="line" id="020719"><span class="nick" style="color:#389600"><a href="#020719" label="[02:07:19]">&lt;muurkha&gt;</a></span><span class="message">oh, my memory is fooling me then, sorry</span></div><div class="line" id="020850"><span class="nick" style="color:#2e2a4a"><a href="#020850" label="[02:08:50]">&lt;Googulator&gt;</a></span><span class="message">Miranda appears to be mostly C, with a standard library (&quot;miralib&quot;) written in itself</span></div><div class="line" id="020920"><span class="nick" style="color:#2e2a4a"><a href="#020920" label="[02:09:20]">&lt;Googulator&gt;</a></span><span class="message">confusingly, the Miranda sources use the same &quot;.m&quot; extension as LazyML</span></div><div class="line" id="021020"><span class="nick" style="color:#389600"><a href="#021020" label="[02:10:20]">&lt;muurkha&gt;</a></span><span class="message">and Octave</span></div><div class="line" id="021036"><span class="nick" style="color:#389600"><a href="#021036" label="[02:10:36]">&lt;muurkha&gt;</a></span><span class="message">everybody wants to be Bell Labs</span></div><div class="line" id="021113"><span class="nick" style="color:#389600"><a href="#021113" label="[02:11:13]">&lt;muurkha&gt;</a></span><span class="message">it probably doesn't matter if nobody wrote a Haskell in it.  it's not like there's a large important source base written in Miranda; their historical licensing prevented that</span></div><div class="line" id="021513"><span class="nick" style="color:#2e2a4a"><a href="#021513" label="[02:15:13]">&lt;Googulator&gt;</a></span><span class="message">for Miranda, this is all the source history we have: <a rel="nofollow" href="https://www.cs.kent.ac.uk/people/staff/dat/miranda/src/">https://www.cs.kent.ac.uk/people/staff/dat/miranda/src/</a> </span></div><div class="line" id="022151"><span class="nick" style="color:#2e2a4a"><a href="#022151" label="[02:21:51]">&lt;Googulator&gt;</a></span><span class="message">this is that earlier version of lmlc/hbc: <a rel="nofollow" href="https://rsync.nic.funet.fi/pub/languages/ml/lml/lml-0.99.src.tar.Z">https://rsync.nic.funet.fi/pub/languages/ml/lml/lml-0.99.src.tar.Z</a> </span></div><div class="line" id="022631"><span class="nick" style="color:#2e2a4a"><a href="#022631" label="[02:26:31]">&lt;Googulator&gt;</a></span><span class="message"> <a rel="nofollow" href="https://research-repository.st-andrews.ac.uk/bitstream/handle/10023/22651/NormanPatersonMScThesis1994_original_C.pdf?sequence=1">https://research-repository.st-andrews.ac.uk/bitstream/handle/10023/22651/NormanPatersonMScThesis1994_original_C.pdf?sequence=1</a>  this could be interesting as well - if the source code survives</span></div><div class="line" id="023527"><span class="nick" style="color:#2e2a4a"><a href="#023527" label="[02:35:27]">&lt;Googulator&gt;</a></span><span class="message">as for CMUCL, probably no one cared about being able to set up the build system on a new machine because at the time CMU could only afford a single machine powerful enough to build it</span></div><div class="line" id="023806"><span class="nick" style="color:#2e2a4a"><a href="#023806" label="[02:38:06]">&lt;Googulator&gt;</a></span><span class="message">oh, turns out there is actually another LML compiler: <a rel="nofollow" href="https://github.com/GunterMueller/Rio">https://github.com/GunterMueller/Rio</a> </span></div><div class="line" id="023816"><span class="nick" style="color:#2e2a4a"><a href="#023816" label="[02:38:16]">&lt;Googulator&gt;</a></span><span class="message">only one problem: *it's written in Haskell*</span></div><div class="line" id="023952"><span class="nick" style="color:#2e2a4a"><a href="#023952" label="[02:39:52]">&lt;Googulator&gt;</a></span><span class="message">of course, we do have Hugs to run it - if it doesn't use recursive modules, that is</span></div><div class="line" id="050250"><span class="nick" style="color:#389600"><a href="#050250" label="[05:02:50]">&lt;muurkha&gt;</a></span><span class="message">GoogulatorMobile: hey, great find!</span></div><div class="line" id="082409"><span class="nick" style="color:#80b1d3"><a href="#082409" label="[08:24:09]">&lt;fossy&gt;</a></span><span class="message">i'll hold out on #400 until a new release is cut?</span></div><div class="line" id="210659"><span class="nick" style="color:#2e2a4a"><a href="#210659" label="[21:06:59]">&lt;Googulator&gt;</a></span><span class="message">Looks like one of the recent changes has broke Python checksums when running kernel bootstrap</span></div><div class="line" id="210710"><span class="nick" style="color:#2e2a4a"><a href="#210710" label="[21:07:10]">&lt;Googulator&gt;</a></span><span class="message">My main suspect is Fiwix upgrade</span></div><div class="line" id="210724"><span class="nick" style="color:#8dd3c7"><a href="#210724" label="[21:07:24]">&lt;stikonas&gt;</a></span><span class="message">hmm, could be...</span></div><div class="line" id="210729"><span class="nick" style="color:#2e2a4a"><a href="#210729" label="[21:07:29]">&lt;Googulator&gt;</a></span><span class="message">Checksums in bwrap appear to be still correct</span></div><div class="line" id="210729"><span class="nick" style="color:#8dd3c7"><a href="#210729" label="[21:07:29]">&lt;stikonas&gt;</a></span><span class="message">though strange...</span></div><div class="line" id="210739"><span class="nick" style="color:#8dd3c7"><a href="#210739" label="[21:07:39]">&lt;stikonas&gt;</a></span><span class="message">python is so far away from kernel bootstrap</span></div><div class="line" id="210821"><span class="nick" style="color:#2e2a4a"><a href="#210821" label="[21:08:21]">&lt;Googulator&gt;</a></span><span class="message">- 'HAVE_BROKEN_SEM_GETVALUE': 0,</span></div><div class="line" id="210821"><span class="nick" style="color:#2e2a4a"><a href="#210821" label="[21:08:21]">&lt;Googulator&gt;</a></span><span class="message">+ 'HAVE_BROKEN_SEM_GETVALUE': 1,</span></div><div class="line" id="210822"><span class="nick" style="color:#2e2a4a"><a href="#210822" label="[21:08:22]">&lt;Googulator&gt;</a></span><span class="message">...</span></div><div class="line" id="210822"><span class="nick" style="color:#2e2a4a"><a href="#210822" label="[21:08:22]">&lt;Googulator&gt;</a></span><span class="message">- 'POSIX_SEMAPHORES_NOT_ENABLED': 0,</span></div><div class="line" id="210823"><span class="nick" style="color:#2e2a4a"><a href="#210823" label="[21:08:23]">&lt;Googulator&gt;</a></span><span class="message">+ 'POSIX_SEMAPHORES_NOT_ENABLED': 1,</span></div><div class="line" id="210827"><span class="nick" style="color:#2e2a4a"><a href="#210827" label="[21:08:27]">&lt;Googulator&gt;</a></span><span class="message">this is what changed in all Python 3.x builds</span></div><div class="line" id="211923"><span class="nick" style="color:#8dd3c7"><a href="#211923" label="[21:19:23]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="213723"><span class="nick" style="color:#6d2462"><a href="#213723" label="[21:37:23]">&lt;rickmasters&gt;</a></span><span class="message">I'll do some testing, see if I can reproduce and isolate.</span></div><div class="line" id="213819"><span class="nick" style="color:#6d2462"><a href="#213819" label="[21:38:19]">&lt;rickmasters&gt;</a></span><span class="message">Hard to see how that's possible since Linux builds python but who knows...</span></div><div class="line" id="215839"><span class="nick" style="color:#80b1d3"><a href="#215839" label="[21:58:39]">&lt;fossy&gt;</a></span><span class="message">not really possible for Fiwix to change Python checksums unless some intermediate checksum also changes. Python doesn't use fiwix at all</span></div><div class="line" id="215936"><span class="nick" style="color:#80b1d3"><a href="#215936" label="[21:59:36]">&lt;fossy&gt;</a></span><span class="message">i'd say it's more likely that its one of the config changes made for bare metal</span></div><div class="line" id="220227"><span class="nick" style="color:#8dd3c7"><a href="#220227" label="[22:02:27]">&lt;stikonas&gt;</a></span><span class="message">yeah, that seems more likely</span></div><div class="line" id="220241"><span class="nick" style="color:#8dd3c7"><a href="#220241" label="[22:02:41]">&lt;stikonas&gt;</a></span><span class="message">unless fiwix somehow changed linux checksum</span></div><div class="line" id="220245"><span class="nick" style="color:#8dd3c7"><a href="#220245" label="[22:02:45]">&lt;stikonas&gt;</a></span><span class="message">and that propagated to python</span></div><div class="line" id="220249"><span class="nick" style="color:#8dd3c7"><a href="#220249" label="[22:02:49]">&lt;stikonas&gt;</a></span><span class="message">but that's quite unlikely</span></div><div class="line" id="220301"><span class="nick" style="color:#8dd3c7"><a href="#220301" label="[22:03:01]">&lt;stikonas&gt;</a></span><span class="message">(we don't checksum linux as far as I recall)</span></div><div class="line" id="220509"><span class="nick" style="color:#6d2462"><a href="#220509" label="[22:05:09]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: no Fiwix update didn't change linux checksum but many were changed as a result of new musl patch</span></div><div class="line" id="220730"><span class="nick" style="color:#6d2462"><a href="#220730" label="[22:07:30]">&lt;rickmasters&gt;</a></span><span class="message">if it's consistently reproducible we'll figure it out but building to python is time consuming so could be a long time before we'll know</span></div><div class="line" id="221103"><span class="nick" style="color:#234e69"><a href="#221103" label="[22:11:03]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; rickmasters: but do we checksum Linux</span></div><div class="line" id="221112"><span class="nick" style="color:#234e69"><a href="#221112" label="[22:11:12]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; I thought that's the one package that isn't checksummed</span></div><div class="line" id="221140"><span class="nick" style="color:#6d2462"><a href="#221140" label="[22:11:40]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: Yes, I thought Googulator fixed that... hold on</span></div><div class="line" id="221715"><span class="nick" style="color:#80b1d3"><a href="#221715" label="[22:17:15]">&lt;fossy&gt;</a></span><span class="message">yes, that was fixed</span></div><div class="line" id="221826"><span class="nick" style="color:#6d2462"><a href="#221826" label="[22:18:26]">&lt;rickmasters&gt;</a></span><span class="message">yeah, I can't find the fix but this was related: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/366">https://github.com/fosslinux/live-bootstrap/pull/366</a> </span></div><div class="line" id="222056"><span class="nick" style="color:#80b1d3"><a href="#222056" label="[22:20:56]">&lt;fossy&gt;</a></span><span class="message">oh, no, i did it lol</span></div><div class="line" id="222104"><span class="nick" style="color:#80b1d3"><a href="#222104" label="[22:21:04]">&lt;fossy&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/commit/e06a19f9e20dc4e3fe8084f03a00b8cf2bc9a6b4">https://github.com/fosslinux/live-bootstrap/commit/e06a19f9e20dc4e3fe8084f03a00b8cf2bc9a6b4</a> </span></div><div class="line" id="222329"><span class="nick" style="color:#8dd3c7"><a href="#222329" label="[22:23:29]">&lt;stikonas&gt;</a></span><span class="message">well, in the worse case we'll have to compare what is different between bwrap and qemu modes in file system</span></div><div class="line" id="223349"><span class="nick" style="color:#6d2462"><a href="#223349" label="[22:33:49]">&lt;rickmasters&gt;</a></span><span class="message">By the way, building with linux kernel (non bootstrap) has failed for a while now.</span></div><div class="line" id="223429"><span class="nick" style="color:#6d2462"><a href="#223429" label="[22:34:29]">&lt;rickmasters&gt;</a></span><span class="message">I put in some PRs but there is another problem I'm still working on that goes way back: Cannot open /proc/iomem: No such file or directory</span></div><div class="line" id="224338"><span class="nick" style="color:#80b1d3"><a href="#224338" label="[22:43:38]">&lt;fossy&gt;</a></span><span class="message">hm, must say i haven't really been testing that.. too interested in kernel bootstrap :P</span></div><div class="line" id="232902"><span class="nick" style="color:#8dd3c7"><a href="#232902" label="[23:29:02]">&lt;stikonas&gt;</a></span><span class="message">fossy: yeah, but right now that's the only option if you don't have BIOS?</span></div><div class="line" id="232925"><span class="nick" style="color:#8dd3c7"><a href="#232925" label="[23:29:25]">&lt;stikonas&gt;</a></span><span class="message">at least until we get better support for UEFI bootstrapping</span></div><div class="line" id="233023"><span class="nick" style="color:#80b1d3"><a href="#233023" label="[23:30:23]">&lt;fossy&gt;</a></span><span class="message">stikonas: yes, this is true</span></div><div class="line" id="233026"><span class="nick" style="color:#80b1d3"><a href="#233026" label="[23:30:26]">&lt;fossy&gt;</a></span><span class="message">not saying it shouldn't be fixed</span></div><div class="line" id="233035"><span class="nick" style="color:#80b1d3"><a href="#233035" label="[23:30:35]">&lt;fossy&gt;</a></span><span class="message">just that i haven't been actively testing it - which i should have been</span></div><div class="line" id="233110"><span class="nick" style="color:#8dd3c7"><a href="#233110" label="[23:31:10]">&lt;stikonas&gt;</a></span><span class="message">well, with so many different modes, hard to test everything...</span></div><div class="line" id="235002"><span class="nick" style="color:#6c3d55"><a href="#235002" label="[23:50:02]">&lt;rekado&gt;</a></span><span class="message">GoogulatorMobile: the Yale Haskell package in Guix is borked because clisp fails to compile the prelude.</span></div><div class="line" id="235015"><span class="nick" style="color:#6c3d55"><a href="#235015" label="[23:50:15]">&lt;rekado&gt;</a></span><span class="message">I don’t know why, but it used to work.</span></div><div class="line" id="235054"><span class="nick" style="color:#6c3d55"><a href="#235054" label="[23:50:54]">&lt;rekado&gt;</a></span><span class="message">since I haven’t touched the port since 2016 I don’t think it’s my problem.  Worth checking if something in clisp changed since then.</span></div><br /></div></body></html>