<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-04-23.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="043559"><span class="nick" style="color:#8dd3c7"><a href="#043559" label="[04:35:59]">&lt;pabs3&gt;</a></span><span class="message">&quot;Ribbit Scheme bootstraps with Posix shell while supporting TCO, call/cc and GC&quot; <a rel="nofollow" href="https://github.com/udem-dlteam/ribbit/commit/14077d111425c8472dd5a0e865462dea70a8d206">https://github.com/udem-dlteam/ribbit/commit/14077d111425c8472dd5a0e865462dea70a8d206</a>  <a rel="nofollow" href="https://news.ycombinator.com/item?id=31096771">https://news.ycombinator.com/item?id=31096771</a> </span></div><div class="line" id="043718"><span class="nick" style="color:#2e2a4a"><a href="#043718" label="[04:37:18]">&lt;muurkha&gt;</a></span><span class="message">cool!</span></div><div class="line" id="094426"><span class="nick" style="color:#6b8072"><a href="#094426" label="[09:44:26]">&lt;nimaje&gt;</a></span><span class="message">that ribbit scheme thing reads to me like the added a posix shell backend to their scheme compiler written in scheme, I don't really see where the bootstrapping is (ok, you could compile the compiler to sh and than run it on some system where you have some sh, but probably you can run some binary there, so you could compile to a native binary for that system too)</span></div><div class="line" id="095755"><span class="nick" style="color:#6b8072"><a href="#095755" label="[09:57:55]">&lt;nimaje&gt;</a></span><span class="message">ah, (githubs ui is stupid), so they have a virtual machine for their byte code written in sh (not sure if that is handwritten or generated), but seems like there is no compiler in sh</span></div><div class="line" id="113054"><span class="nick" style="color:#80b1d3"><a href="#113054" label="[11:30:54]">&lt;unmatched-paren&gt;</a></span><span class="message">pabs3: &quot;Microsoft is big on supply chain security these days&quot; &lt;- i suppose they're only big on supply chain security for *themselves*, otherwise they'd release the source code of every program they'd ever made... if my assumption is correct, Microsoft already has a secure path to dotnet-core, through the old dotnet. obviously since it's their program they can audit it as much as they want.</span></div><div class="line" id="113100"><span class="nick" style="color:#80b1d3"><a href="#113100" label="[11:31:00]">&lt;unmatched-paren&gt;</a></span><span class="message">of course, this doesn't give anyone else a secure path...</span></div><div class="line" id="113334"><span class="nick" style="color:#80b1d3"><a href="#113334" label="[11:33:34]">&lt;unmatched-paren&gt;</a></span><span class="message">Maybe my assumption that they consider only their security to be important is incorrect, but it's Microsoft we're talking about here.</span></div><div class="line" id="132133"><span class="nick" style="color:#6d2462"><a href="#132133" label="[13:21:33]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: well bootstrappable chains contain a cost (of developer time and effort) with a benefit few in the market actually value; so companies have a large incentive to ignore it until some external event forces it as an issue.</span></div><div class="line" id="155145"><span class="nick" style="color:#234e69"><a href="#155145" label="[15:51:45]">&lt;littlebobeep&gt;</a></span><span class="message">oriansj: Why is it not valued?  :/</span></div><div class="line" id="155648"><span class="nick" style="color:#6c3d55"><a href="#155648" label="[15:56:48]">&lt;bauen1&gt;</a></span><span class="message">littlebobeep: comapnies (or groups in general) might be okay with a less extreme version, i.e. a bigger seed, there's always the licensing trade offs</span></div><div class="line" id="155948"><span class="nick" style="color:#d9d9d9"><a href="#155948" label="[15:59:48]">&lt;stikonas[m]&gt;</a></span><span class="message">Companies would already be quite happy if their builds are reproducible, they don't try to bootstrap builds</span></div><div class="line" id="160205"><span class="nick" style="color:#234e69"><a href="#160205" label="[16:02:05]">&lt;littlebobeep&gt;</a></span><span class="message">bauen1: How is a bigger seed = a less extreme version?</span></div><div class="line" id="160217"><span class="nick" style="color:#234e69"><a href="#160217" label="[16:02:17]">&lt;littlebobeep&gt;</a></span><span class="message">Also what does licensing have to do with it?</span></div><div class="line" id="160954"><span class="nick" style="color:#6d2462"><a href="#160954" label="[16:09:54]">&lt;oriansj&gt;</a></span><span class="message">littlebobeep: well if you start with all of your dependencies as binaries, the bootstrapping path by definition is just a single step (just do the build)</span></div><div class="line" id="161049"><span class="nick" style="color:#6d2462"><a href="#161049" label="[16:10:49]">&lt;oriansj&gt;</a></span><span class="message">and that is what everyone was already doing.</span></div><div class="line" id="161059"><span class="nick" style="color:#6c3d55"><a href="#161059" label="[16:10:59]">&lt;bauen1&gt;</a></span><span class="message">^ now, there might have been (or still is) a path from another language, but if you're developing a language there's a good chance this path may be abandoned / fall behind once you become self hosting</span></div><div class="line" id="161114"><span class="nick" style="color:#6d2462"><a href="#161114" label="[16:11:14]">&lt;oriansj&gt;</a></span><span class="message">So the shrinking of your bootstrap binaries is an extreme extension by common definitions</span></div><div class="line" id="161526"><span class="nick" style="color:#6d2462"><a href="#161526" label="[16:15:26]">&lt;oriansj&gt;</a></span><span class="message">and the most extreme version is ZERO bootstrap binaries</span></div><div class="line" id="172233"><span class="nick" style="color:#6c3d55"><a href="#172233" label="[17:22:33]">&lt;bauen1&gt;</a></span><span class="message">there's also some difference between aiming for libre-licensed bootstrap from source only, or aiming for an auditable bootstrap (i.e. source-available)</span></div><div class="line" id="172336"><span class="nick" style="color:#6c3d55"><a href="#172336" label="[17:23:36]">&lt;bauen1&gt;</a></span><span class="message">if you just want to exclude the possibility of a backdoor, then the source-available and auditable bootstrap way is good enough (i think)</span></div><div class="line" id="202303"><span class="nick" style="color:#6d2462"><a href="#202303" label="[20:23:03]">&lt;oriansj&gt;</a></span><span class="message">bauen1: well public audits generally allows anyone to gain prestige by finding anything in your bootstrap which tend to be be a stronger trust model than trusting a handful of individuals not to be bribed or lazy</span></div><div class="line" id="203151"><span class="nick" style="color:#6d2462"><a href="#203151" label="[20:31:51]">&lt;oriansj&gt;</a></span><span class="message">for example: I was mistaken at first glance at Guile's Psyntax but the public process quickly revealed my mistake and now Guile is properly bootstrapped.</span></div><div class="line" id="212128"><span class="nick" style="color:#bc80bd"><a href="#212128" label="[21:21:28]">&lt;markjenkinssksp&gt;</a></span><span class="message">oh, very nice to hear about the Guile bootstrap and pysyntax, I missed the mailing list post <a rel="nofollow" href="https://www.freelists.org/post/bootstrappable/stage0posix-release">https://www.freelists.org/post/bootstrappable/stage0posix-release</a>  and haven't read the chat much in awhile</span></div><div class="line" id="212310"><span class="nick" style="color:#bc80bd"><a href="#212310" label="[21:23:10]">&lt;markjenkinssksp&gt;</a></span><span class="message">I was aware of <a rel="nofollow" href="https://github.com/schierlm/guile-psyntax-bootstrapping">https://github.com/schierlm/guile-psyntax-bootstrapping</a>  , but I wasn't sure if it was complete in terms of what it needed to do for guile or the state of the scheme running it</span></div><div class="line" id="212342"><span class="nick" style="color:#bc80bd"><a href="#212342" label="[21:23:42]">&lt;markjenkinssksp&gt;</a></span><span class="message">I suppose the relevant scheme is the port of Mes to M2-Planet?</span></div><div class="line" id="221712"><span class="nick" style="color:#3c5b35"><a href="#221712" label="[22:17:12]">&lt;stikonas&gt;</a></span><span class="message">markjenkinssksp: we actually built guile in live-bootstrap too using guile-psyntax-bootsrapping</span></div><div class="line" id="221744"><span class="nick" style="color:#3c5b35"><a href="#221744" label="[22:17:44]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysc/guile-3.0.7/guile-3.0.7.sh">https://github.com/fosslinux/live-bootstrap/blob/master/sysc/guile-3.0.7/guile-3.0.7.sh</a> </span></div><div class="line" id="221753"><span class="nick" style="color:#3c5b35"><a href="#221753" label="[22:17:53]">&lt;stikonas&gt;</a></span><span class="message">as for mes, I don't think ti's relevant for mes</span></div><div class="line" id="221824"><span class="nick" style="color:#2e2a4a"><a href="#221824" label="[22:18:24]">&lt;muurkha&gt;</a></span><span class="message">oriansj: what were you mistaken about with respect to psyntax?  I think you were right that it was built with itself and that fixing that was a significant obstacle</span></div><div class="line" id="223525"><span class="nick" style="color:#bc80bd"><a href="#223525" label="[22:35:25]">&lt;markjenkinssksp&gt;</a></span><span class="message">ahh, stikonas, I think guile-3.0.7.sh from fosslinux/live-bootstrap reminds me where I've got things wrong</span></div><div class="line" id="223717"><span class="nick" style="color:#bc80bd"><a href="#223717" label="[22:37:17]">&lt;markjenkinssksp&gt;</a></span><span class="message">Schierl's work included patches to guile and so all of the scheme code in  guile-psyntax-bootstrapping is run by a patched guile, possible because Schierl used scheme features available by just compiling the C parts of guile</span></div><div class="line" id="223837"><span class="nick" style="color:#bc80bd"><a href="#223837" label="[22:38:37]">&lt;markjenkinssksp&gt;</a></span><span class="message">and so the involvement of mes and mescc in terms of bootstrapping guile is just bootstrapping the C compiler, not running any scheme code more directly related to the guile psyntax bootstrap</span></div><div class="line" id="223941"><span class="nick" style="color:#3c5b35"><a href="#223941" label="[22:39:41]">&lt;stikonas&gt;</a></span><span class="message">indeed, mes is only used to run mescc and nothing else</span></div><div class="line" id="223954"><span class="nick" style="color:#3c5b35"><a href="#223954" label="[22:39:54]">&lt;stikonas&gt;</a></span><span class="message">it would be nice to eventually be able to run gash but that's not possible right now</span></div><div class="line" id="224004"><span class="nick" style="color:#3c5b35"><a href="#224004" label="[22:40:04]">&lt;stikonas&gt;</a></span><span class="message">being able to run gash would solve some licensing issues</span></div><div class="line" id="224227"><span class="nick" style="color:#bc80bd"><a href="#224227" label="[22:42:27]">&lt;markjenkinssksp&gt;</a></span><span class="message">I think I used to be aware of this stuff about guile-psyntax-bootstrapping and forgot, at one point I was doing something experimental, incomplete and unpublished with the Schierl code</span></div><div class="line" id="224333"><span class="nick" style="color:#bc80bd"><a href="#224333" label="[22:43:33]">&lt;markjenkinssksp&gt;</a></span><span class="message">re gash, is there currently a loop of gash required to bootstrap guile but guile is required to run gash..</span></div><div class="line" id="225122"><span class="nick" style="color:#bc80bd"><a href="#225122" label="[22:51:22]">&lt;markjenkinssksp&gt;</a></span><span class="message">reading <a rel="nofollow" href="https://savannah.nongnu.org/projects/gash/">https://savannah.nongnu.org/projects/gash/</a>  I see it is used to bootstrap bash, so revising my loop, building guile needs bash, bash needs gash, gash needs guile...</span></div><div class="line" id="225638"><span class="nick" style="color:#3c5b35"><a href="#225638" label="[22:56:38]">&lt;stikonas&gt;</a></span><span class="message">markjenkinssksp: gash is not required to bootstrap guile</span></div><div class="line" id="225652"><span class="nick" style="color:#3c5b35"><a href="#225652" label="[22:56:52]">&lt;stikonas&gt;</a></span><span class="message">bash can be built without gash at all</span></div><div class="line" id="225705"><span class="nick" style="color:#3c5b35"><a href="#225705" label="[22:57:05]">&lt;stikonas&gt;</a></span><span class="message">the problem is not building stuff</span></div><div class="line" id="225715"><span class="nick" style="color:#3c5b35"><a href="#225715" label="[22:57:15]">&lt;stikonas&gt;</a></span><span class="message">but we do have a licensing problem</span></div><div class="line" id="225731"><span class="nick" style="color:#3c5b35"><a href="#225731" label="[22:57:31]">&lt;stikonas&gt;</a></span><span class="message">mes C library is GPLv3</span></div><div class="line" id="225802"><span class="nick" style="color:#3c5b35"><a href="#225802" label="[22:58:02]">&lt;stikonas&gt;</a></span><span class="message">and in order to build bash without any pregenerated files you need to rebuild parse.y, yacc from heirloom-devtools can be used</span></div><div class="line" id="225808"><span class="nick" style="color:#3c5b35"><a href="#225808" label="[22:58:08]">&lt;stikonas&gt;</a></span><span class="message">but that is under CDDL license</span></div><div class="line" id="225826"><span class="nick" style="color:#3c5b35"><a href="#225826" label="[22:58:26]">&lt;stikonas&gt;</a></span><span class="message">so the final binary is GPLv3 + CDDL which is not redistributable</span></div><div class="line" id="225904"><span class="nick" style="color:#3c5b35"><a href="#225904" label="[22:59:04]">&lt;stikonas&gt;</a></span><span class="message">if you don't care about parse.y and happy to use pre-built parse.c then there is not issue and gash is not needed</span></div><div class="line" id="225938"><span class="nick" style="color:#3c5b35"><a href="#225938" label="[22:59:38]">&lt;stikonas&gt;</a></span><span class="message">markjenkinssksp: in live-bootstrap we build bash using handwritten kaem and makefile scripts</span></div><div class="line" id="230112"><span class="nick" style="color:#bc80bd"><a href="#230112" label="[23:01:12]">&lt;markjenkinssksp&gt;</a></span><span class="message">I see, though I'm a bit confused by the concept of final binary in a bootstrapping context, seems to me that we're talking about binaries created in the middle of the bootstrapping process that are tossed at the end and not really distributed the way bison binaries, glibc binaries end up being</span></div><div class="line" id="230154"><span class="nick" style="color:#3c5b35"><a href="#230154" label="[23:01:54]">&lt;stikonas&gt;</a></span><span class="message">yes, they are tossed away</span></div><div class="line" id="230158"><span class="nick" style="color:#3c5b35"><a href="#230158" label="[23:01:58]">&lt;stikonas&gt;</a></span><span class="message">hence it's not a big deal</span></div><div class="line" id="230159"><span class="nick" style="color:#2e2a4a"><a href="#230159" label="[23:01:59]">&lt;muurkha&gt;</a></span><span class="message">stikonas: does the CDDL really apply to the yacc *output*?</span></div><div class="line" id="230215"><span class="nick" style="color:#3c5b35"><a href="#230215" label="[23:02:15]">&lt;stikonas&gt;</a></span><span class="message">muurkha: no, but yacc itself is licensed under CDDL</span></div><div class="line" id="230227"><span class="nick" style="color:#3c5b35"><a href="#230227" label="[23:02:27]">&lt;stikonas&gt;</a></span><span class="message">and C library is licensed under GPLv3</span></div><div class="line" id="230239"><span class="nick" style="color:#2e2a4a"><a href="#230239" label="[23:02:39]">&lt;muurkha&gt;</a></span><span class="message">oh I see</span></div><div class="line" id="230256"><span class="nick" style="color:#3c5b35"><a href="#230256" label="[23:02:56]">&lt;stikonas&gt;</a></span><span class="message">with gash there is a workaround</span></div><div class="line" id="230258"><span class="nick" style="color:#2e2a4a"><a href="#230258" label="[23:02:58]">&lt;muurkha&gt;</a></span><span class="message">the final binary of yacc, not the final binary of gash including the yacc-generated parser</span></div><div class="line" id="230310"><span class="nick" style="color:#3c5b35"><a href="#230310" label="[23:03:10]">&lt;stikonas&gt;</a></span><span class="message">postpone building of yacc until after musl</span></div><div class="line" id="230326"><span class="nick" style="color:#3c5b35"><a href="#230326" label="[23:03:26]">&lt;stikonas&gt;</a></span><span class="message">it's actually the first binary of yacc that has this issue</span></div><div class="line" id="230345"><span class="nick" style="color:#3c5b35"><a href="#230345" label="[23:03:45]">&lt;stikonas&gt;</a></span><span class="message">after that we build flex and previous yacc is completely removed from live-bootstrap</span></div><div class="line" id="230402"><span class="nick" style="color:#3c5b35"><a href="#230402" label="[23:04:02]">&lt;stikonas&gt;</a></span><span class="message">so in live-bootstrap that's not a big deal</span></div><div class="line" id="230422"><span class="nick" style="color:#2e2a4a"><a href="#230422" label="[23:04:22]">&lt;muurkha&gt;</a></span><span class="message">right</span></div><div class="line" id="230424"><span class="nick" style="color:#3c5b35"><a href="#230424" label="[23:04:24]">&lt;stikonas&gt;</a></span><span class="message">but e.g. if Guix would  try to do strict no-pregen bootstrap like live-bootstrap does, that would be a problem</span></div><div class="line" id="230439"><span class="nick" style="color:#3c5b35"><a href="#230439" label="[23:04:39]">&lt;stikonas&gt;</a></span><span class="message">because intermediate steps would end up in /gnu/store</span></div><div class="line" id="230447"><span class="nick" style="color:#3c5b35"><a href="#230447" label="[23:04:47]">&lt;stikonas&gt;</a></span><span class="message">and potentially in binary builders</span></div><div class="line" id="230508"><span class="nick" style="color:#bc80bd"><a href="#230508" label="[23:05:08]">&lt;markjenkinssksp&gt;</a></span><span class="message">I don't think I violate any license if I start with a bunch of source, produce a yacc binary for my private use, and then use yacc in a bootstrap that ends up with me publishing other binaries</span></div><div class="line" id="230534"><span class="nick" style="color:#3c5b35"><a href="#230534" label="[23:05:34]">&lt;stikonas&gt;</a></span><span class="message">yes, for private use combining GPLv3 and CDDL is legal</span></div><div class="line" id="230548"><span class="nick" style="color:#3c5b35"><a href="#230548" label="[23:05:48]">&lt;stikonas&gt;</a></span><span class="message">since GPLv3 doesn't really kick in until you start redistributing stuff</span></div><div class="line" id="230605"><span class="nick" style="color:#bc80bd"><a href="#230605" label="[23:06:05]">&lt;markjenkinssksp&gt;</a></span><span class="message">I guess complication one is that there's a desire to publish all intermediate binaries as a kind of cache in a GUIX context</span></div><div class="line" id="230618"><span class="nick" style="color:#6d2462"><a href="#230618" label="[23:06:18]">&lt;oriansj&gt;</a></span><span class="message">muurkha: my earlier mistake with guile's psyntax was mistaking believing that it was human written rather than generated and need to be properly bootstrapped. I was quickly corrected of that mistake if you look early in that history</span></div><div class="line" id="230735"><span class="nick" style="color:#bc80bd"><a href="#230735" label="[23:07:35]">&lt;markjenkinssksp&gt;</a></span><span class="message">reproducibility kind of demands that people be able to publish binaries they relied on so we can see that multiple people got the same binary</span></div><div class="line" id="230840"><span class="nick" style="color:#3c5b35"><a href="#230840" label="[23:08:40]">&lt;stikonas&gt;</a></span><span class="message">markjenkinssksp: publishing binaries is not necessary for reproducibility</span></div><div class="line" id="230844"><span class="nick" style="color:#3c5b35"><a href="#230844" label="[23:08:44]">&lt;stikonas&gt;</a></span><span class="message">you can publish hashes</span></div><div class="line" id="230855"><span class="nick" style="color:#6d2462"><a href="#230855" label="[23:08:55]">&lt;oriansj&gt;</a></span><span class="message">markjenkinssksp: yeah, it is a minor problem involving distribution (solved by either a licence change or a replacement library used)</span></div><div class="line" id="230856"><span class="nick" style="color:#3c5b35"><a href="#230856" label="[23:08:56]">&lt;stikonas&gt;</a></span><span class="message">that's what live-bootstrap does</span></div><div class="line" id="230937"><span class="nick" style="color:#3c5b35"><a href="#230937" label="[23:09:37]">&lt;stikonas&gt;</a></span><span class="message">and using replacement library would be almost trivial if we get gash on mes</span></div><div class="line" id="230957"><span class="nick" style="color:#3c5b35"><a href="#230957" label="[23:09:57]">&lt;stikonas&gt;</a></span><span class="message">hence we are not pursuing license change</span></div><div class="line" id="231042"><span class="nick" style="color:#6d2462"><a href="#231042" label="[23:10:42]">&lt;oriansj&gt;</a></span><span class="message">(or possibly a better scheme that M2-Planet can build which is able to run MesCC+Gash)</span></div><div class="line" id="231122"><span class="nick" style="color:#3c5b35"><a href="#231122" label="[23:11:22]">&lt;stikonas&gt;</a></span><span class="message">not necesserily M2-Planet</span></div><div class="line" id="231140"><span class="nick" style="color:#3c5b35"><a href="#231140" label="[23:11:40]">&lt;stikonas&gt;</a></span><span class="message">if tcc could build it, that would be fine too</span></div><div class="line" id="231145"><span class="nick" style="color:#bc80bd"><a href="#231145" label="[23:11:45]">&lt;markjenkinssksp&gt;</a></span><span class="message">thanks for the catch-up folks</span></div><div class="line" id="231215"><span class="nick" style="color:#3c5b35"><a href="#231215" label="[23:12:15]">&lt;stikonas&gt;</a></span><span class="message">markjenkinssksp: this is the list of what live-bootstrap builds <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst">https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst</a>  to avoid any pre-generated files</span></div><div class="line" id="231230"><span class="nick" style="color:#6d2462"><a href="#231230" label="[23:12:30]">&lt;oriansj&gt;</a></span><span class="message">(personally I am hoping siraben's scheme written the Haskell subset supported by blynn-compiler [which was bootstrappable from M2-Planet+M2libc])</span></div><div class="line" id="231310"><span class="nick" style="color:#6d2462"><a href="#231310" label="[23:13:10]">&lt;oriansj&gt;</a></span><span class="message">then the root bootstrapping langauges become: assembly, C, Scheme and Haskell</span></div><div class="line" id="231313"><span class="nick" style="color:#3c5b35"><a href="#231313" label="[23:13:13]">&lt;stikonas&gt;</a></span><span class="message">siraben was busy recently... not much changed in blynn-compiler</span></div><div class="line" id="231342"><span class="nick" style="color:#6d2462"><a href="#231342" label="[23:13:42]">&lt;oriansj&gt;</a></span><span class="message">stikonas: it happens</span></div><div class="line" id="231342"><span class="nick" style="color:#3c5b35"><a href="#231342" label="[23:13:42]">&lt;stikonas&gt;</a></span><span class="message">although scheme and haskell are fairly slow...</span></div><div class="line" id="231345"><span class="nick" style="color:#af8d2f"><a href="#231345" label="[23:13:45]">&lt;samplet&gt;</a></span><span class="message">Oh hey everyone!  I’m porting Gash to Mes as we speak.  :)</span></div><div class="line" id="231353"><span class="nick" style="color:#3c5b35"><a href="#231353" label="[23:13:53]">&lt;stikonas&gt;</a></span><span class="message">samplet: oh hi!</span></div><div class="line" id="231356"><span class="nick" style="color:#6d2462"><a href="#231356" label="[23:13:56]">&lt;oriansj&gt;</a></span><span class="message">samplet: nice!</span></div><div class="line" id="231426"><span class="nick" style="color:#bc80bd"><a href="#231426" label="[23:14:26]">&lt;markjenkinssksp&gt;</a></span><span class="message">I was just looking at <a rel="nofollow" href="https://git.savannah.nongnu.org/cgit/gash.git/commit/?h=wip-mes">https://git.savannah.nongnu.org/cgit/gash.git/commit/?h=wip-mes</a>  samplet, but clearly I'm looking in the wrong place</span></div><div class="line" id="231444"><span class="nick" style="color:#3c5b35"><a href="#231444" label="[23:14:44]">&lt;stikonas&gt;</a></span><span class="message">yeah, I saw that branch too but it wasn't updated recently</span></div><div class="line" id="231451"><span class="nick" style="color:#3c5b35"><a href="#231451" label="[23:14:51]">&lt;stikonas&gt;</a></span><span class="message">I guess samplet has more stuff locally</span></div><div class="line" id="231503"><span class="nick" style="color:#af8d2f"><a href="#231503" label="[23:15:03]">&lt;samplet&gt;</a></span><span class="message">Right now I’m trying to get the Mes module system working: <a rel="nofollow" href="https://git.ngyro.com/mes/log/?h=wip-guile-module">https://git.ngyro.com/mes/log/?h=wip-guile-module</a> </span></div><div class="line" id="231524"><span class="nick" style="color:#af8d2f"><a href="#231524" label="[23:15:24]">&lt;samplet&gt;</a></span><span class="message">The current plan is to get Guile 1.8 modules working on Mes, and then port Gash.</span></div><div class="line" id="231552"><span class="nick" style="color:#af8d2f"><a href="#231552" label="[23:15:52]">&lt;samplet&gt;</a></span><span class="message">However, I’m having trouble with Mes so far.</span></div><div class="line" id="231611"><span class="nick" style="color:#3c5b35"><a href="#231611" label="[23:16:11]">&lt;stikonas&gt;</a></span><span class="message">have you talked to janneke?</span></div><div class="line" id="231646"><span class="nick" style="color:#af8d2f"><a href="#231646" label="[23:16:46]">&lt;samplet&gt;</a></span><span class="message">Yeah.  It was his idea to start with modules.  It’s a good idea, but it’s proving very difficult.</span></div><div class="line" id="231712"><span class="nick" style="color:#af8d2f"><a href="#231712" label="[23:17:12]">&lt;samplet&gt;</a></span><span class="message">The way Mes thinks about variables and bindings, etc. is rather different than Guile.</span></div><div class="line" id="231817"><span class="nick" style="color:#af8d2f"><a href="#231817" label="[23:18:17]">&lt;samplet&gt;</a></span><span class="message">We’ll see.  I might have to bail on modules and rig up Gash the same way as MesCC: load everything into a global namespace and be very careful with names.</span></div><div class="line" id="231827"><span class="nick" style="color:#af8d2f"><a href="#231827" label="[23:18:27]">&lt;samplet&gt;</a></span><span class="message">:/</span></div><div class="line" id="232249"><span class="nick" style="color:#2e2a4a"><a href="#232249" label="[23:22:49]">&lt;muurkha&gt;</a></span><span class="message">oriansj: oh, I see</span></div><br /></div></body></html>