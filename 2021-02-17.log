<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-02-17.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="024040"><span class="nick" style="color:#8dd3c7"><a href="#024040" label="[02:40:40]">&lt;stikonas&gt;</a></span><span class="message">pder: so we might need to patch perl a bit later...</span></div><div class="line" id="024045"><span class="nick" style="color:#8dd3c7"><a href="#024045" label="[02:40:45]">&lt;stikonas&gt;</a></span><span class="message">sicne it reports version 0.000</span></div><div class="line" id="024119"><span class="nick" style="color:#8dd3c7"><a href="#024119" label="[02:41:19]">&lt;stikonas&gt;</a></span><span class="message">I might also need to build newer perl's later</span></div><div class="line" id="024129"><span class="nick" style="color:#8dd3c7"><a href="#024129" label="[02:41:29]">&lt;stikonas&gt;</a></span><span class="message">for not ancient versions of autoconf/automake</span></div><div class="line" id="024140"><span class="nick" style="color:#2e2a4a"><a href="#024140" label="[02:41:40]">&lt;pder&gt;</a></span><span class="message">stikonas: nice work on all the perl stuff.  I have been wondering what is currently broken with floats and tcc.  I'll try running some tests with tcc-mes and tcc-musl.  Also, do you think there is any benifit to trying to build gio's fork of tcc that includes softfloat?</span></div><div class="line" id="024212"><span class="nick" style="color:#8dd3c7"><a href="#024212" label="[02:42:12]">&lt;stikonas&gt;</a></span><span class="message">hmm, maybe, you can try</span></div><div class="line" id="024218"><span class="nick" style="color:#8dd3c7"><a href="#024218" label="[02:42:18]">&lt;stikonas&gt;</a></span><span class="message">maybe it will fix floats...</span></div><div class="line" id="024237"><span class="nick" style="color:#8dd3c7"><a href="#024237" label="[02:42:37]">&lt;stikonas&gt;</a></span><span class="message">anyway, I'm going to bed now...</span></div><div class="line" id="024242"><span class="nick" style="color:#8dd3c7"><a href="#024242" label="[02:42:42]">&lt;stikonas&gt;</a></span><span class="message">will work more on perl stuff later...</span></div><div class="line" id="024256"><span class="nick" style="color:#2e2a4a"><a href="#024256" label="[02:42:56]">&lt;pder&gt;</a></span><span class="message">cool, thanks for all the work on it</span></div><div class="line" id="024301"><span class="nick" style="color:#8dd3c7"><a href="#024301" label="[02:43:01]">&lt;stikonas&gt;</a></span><span class="message">no problem</span></div><div class="line" id="024308"><span class="nick" style="color:#8dd3c7"><a href="#024308" label="[02:43:08]">&lt;stikonas&gt;</a></span><span class="message">are you going to try autotools later?</span></div><div class="line" id="024328"><span class="nick" style="color:#2e2a4a"><a href="#024328" label="[02:43:28]">&lt;pder&gt;</a></span><span class="message">I was planning on trying to understand this float problem better first</span></div><div class="line" id="024331"><span class="nick" style="color:#8dd3c7"><a href="#024331" label="[02:43:31]">&lt;stikonas&gt;</a></span><span class="message">ok</span></div><div class="line" id="024336"><span class="nick" style="color:#8dd3c7"><a href="#024336" label="[02:43:36]">&lt;stikonas&gt;</a></span><span class="message">anyway, goodnight</span></div><div class="line" id="024341"><span class="nick" style="color:#2e2a4a"><a href="#024341" label="[02:43:41]">&lt;pder&gt;</a></span><span class="message">goodnight</span></div><div class="line" id="071348"><span class="nick" style="color:#6b8072"><a href="#071348" label="[07:13:48]">&lt;gforce_d11977&gt;</a></span><span class="message">stikonas[m]: fossy: instead of using: sed -e '1,/__END__/ d' keywords.pl | sed '1d' | awk '{print &quot;#define&quot;, &quot;KEY_&quot;$0, NR-1}' &gt; keywords.h - we can maybe use a script like this: <a rel="nofollow" href="http://intercity-vpn.de/keywords.sh.txt">http://intercity-vpn.de/keywords.sh.txt</a> </span></div><div class="line" id="071516"><span class="nick" style="color:#6b8072"><a href="#071516" label="[07:15:16]">&lt;gforce_d11977&gt;</a></span><span class="message">i there is interest, i can convert 'opcode.awk' also into a /bin/sh script</span></div><div class="line" id="072612"><span class="nick" style="color:#6b8072"><a href="#072612" label="[07:26:12]">&lt;gforce_d11977&gt;</a></span><span class="message">stikonas[m]: fossy: i think it is generally a good idea to run e.g. /my/new/program --version (or --help)</span></div><div class="line" id="081536"><span class="nick" style="color:#80b1d3"><a href="#081536" label="[08:15:36]">&lt;fossy&gt;</a></span><span class="message">gforce_d11977: why would we want to not use awk?</span></div><div class="line" id="081608"><span class="nick" style="color:#80b1d3"><a href="#081608" label="[08:16:08]">&lt;fossy&gt;</a></span><span class="message">gforce_d11977: i agree on the testing thing, that has not been added to the bash build harness yet though</span></div><div class="line" id="091348"><span class="nick" style="color:#6d2462"><a href="#091348" label="[09:13:48]">&lt;stikonas[m]&gt;</a></span><span class="message">fossy: if I understand correctly, writemain is used to create final non mini perl</span></div><div class="line" id="091408"><span class="nick" style="color:#80b1d3"><a href="#091408" label="[09:14:08]">&lt;fossy&gt;</a></span><span class="message">but we use miniperlmain no?</span></div><div class="line" id="091632"><span class="nick" style="color:#6d2462"><a href="#091632" label="[09:16:32]">&lt;stikonas[m]&gt;</a></span><span class="message">Yes</span></div><div class="line" id="091802"><span class="nick" style="color:#6d2462"><a href="#091802" label="[09:18:02]">&lt;stikonas[m]&gt;</a></span><span class="message">So without any extensions</span></div><div class="line" id="093456"><span class="nick" style="color:#6b8072"><a href="#093456" label="[09:34:56]">&lt;gforce_d11977&gt;</a></span><span class="message">fossy: i would generally avoid AWK or SED, or lets say: avoid unreadable oneliners. Its a documentation issue IMHO. In terms of bootstrap, we should avoid using all the tools which are not in good shape (old versions) and stick to portable constructs if somehow possible. for the sed-hacks in the early beginning, maybe we extend 'catm' for that task</span></div><div class="line" id="095004"><span class="nick" style="color:#80b1d3"><a href="#095004" label="[09:50:04]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: ah i see</span></div><div class="line" id="095131"><span class="nick" style="color:#80b1d3"><a href="#095131" label="[09:51:31]">&lt;fossy&gt;</a></span><span class="message">gforce_d11977: i agree with the avoiding unreadable oneliners</span></div><div class="line" id="095159"><span class="nick" style="color:#80b1d3"><a href="#095159" label="[09:51:59]">&lt;fossy&gt;</a></span><span class="message">what do you mean by sedhacks? we use sed only a couple of times to delete some lines from files?</span></div><div class="line" id="095349"><span class="nick" style="color:#80b1d3"><a href="#095349" label="[09:53:49]">&lt;fossy&gt;</a></span><span class="message">most of the tools, while old, are in pretty fine shape, and work quite well - i don't think that is a reason to not use them</span></div><div class="line" id="095359"><span class="nick" style="color:#6d2462"><a href="#095359" label="[09:53:59]">&lt;stikonas[m]&gt;</a></span><span class="message">Yeah, those commands we use are fairly basic</span></div><div class="line" id="095408"><span class="nick" style="color:#80b1d3"><a href="#095408" label="[09:54:08]">&lt;fossy&gt;</a></span><span class="message">that line that you quoted just needs a comment or two just to explain what it does imo</span></div><div class="line" id="095421"><span class="nick" style="color:#6d2462"><a href="#095421" label="[09:54:21]">&lt;stikonas[m]&gt;</a></span><span class="message">And e.g. sed is not too old</span></div><div class="line" id="095441"><span class="nick" style="color:#6d2462"><a href="#095441" label="[09:54:41]">&lt;stikonas[m]&gt;</a></span><span class="message">We have built sed 4</span></div><div class="line" id="095525"><span class="nick" style="color:#6d2462"><a href="#095525" label="[09:55:25]">&lt;stikonas[m]&gt;</a></span><span class="message">And opcode.awk should be just as readable as perl script if not more...</span></div><div class="line" id="095536"><span class="nick" style="color:#80b1d3"><a href="#095536" label="[09:55:36]">&lt;fossy&gt;</a></span><span class="message">re: portable constructs, it is true that sed and awk are not posix utilities. however they exist on almost every unix system. but i think that's beside the point here, the entire point of live-bootstrap is precisely that we don't need to rely on portable constructs</span></div><div class="line" id="095606"><span class="nick" style="color:#80b1d3"><a href="#095606" label="[09:56:06]">&lt;fossy&gt;</a></span><span class="message">the bootstrap is a contained end-to-end process, we don't need to care if something is portable; it's a fully closed system</span></div><div class="line" id="095653"><span class="nick" style="color:#80b1d3"><a href="#095653" label="[09:56:53]">&lt;fossy&gt;</a></span><span class="message">while something being portable does make it easier to &quot;fix&quot; if we swapped out say the bootstrap kernel, userland programs don't rely on any of that</span></div><div class="line" id="095721"><span class="nick" style="color:#80b1d3"><a href="#095721" label="[09:57:21]">&lt;fossy&gt;</a></span><span class="message">re: opcode.awk, i see no problem with it, it's one of the more readable awk scripts i have ever seen</span></div><div class="line" id="095803"><span class="nick" style="color:#80b1d3"><a href="#095803" label="[09:58:03]">&lt;fossy&gt;</a></span><span class="message">i also do not understand how awk/sed are documentation issues</span></div><div class="line" id="100112"><span class="nick" style="color:#6d2462"><a href="#100112" label="[10:01:12]">&lt;stikonas[m]&gt;</a></span><span class="message">Yeah, I haven't used awk much before but I found its documentation alright when I was writing opcode.awk</span></div><div class="line" id="100802"><span class="nick" style="color:#6d2462"><a href="#100802" label="[10:08:02]">&lt;stikonas[m]&gt;</a></span><span class="message">And writing our own tool is definitely worse in terms of documentation</span></div><div class="line" id="100829"><span class="nick" style="color:#6d2462"><a href="#100829" label="[10:08:29]">&lt;stikonas[m]&gt;</a></span><span class="message">And especially extending catm</span></div><div class="line" id="100842"><span class="nick" style="color:#6d2462"><a href="#100842" label="[10:08:42]">&lt;stikonas[m]&gt;</a></span><span class="message">catm is written in hex0</span></div><div class="line" id="100915"><span class="nick" style="color:#6d2462"><a href="#100915" label="[10:09:15]">&lt;stikonas[m]&gt;</a></span><span class="message">I think OtiansJ can confirm that writing in hex0 is no big fun</span></div><div class="line" id="100954"><span class="nick" style="color:#6d2462"><a href="#100954" label="[10:09:54]">&lt;stikonas[m]&gt;</a></span><span class="message">*OriansJ (sorry, typing on phone)</span></div><div class="line" id="101341"><span class="nick" style="color:#6b8072"><a href="#101341" label="[10:13:41]">&lt;gforce_d11977&gt;</a></span><span class="message">fossy: our sed4 is 15 years old</span></div><div class="line" id="101543"><span class="nick" style="color:#6d2462"><a href="#101543" label="[10:15:43]">&lt;stikonas[m]&gt;</a></span><span class="message">sed is from 1970ies...</span></div><div class="line" id="101548"><span class="nick" style="color:#6d2462"><a href="#101548" label="[10:15:48]">&lt;stikonas[m]&gt;</a></span><span class="message">So 15 years old is not that old</span></div><div class="line" id="101602"><span class="nick" style="color:#6d2462"><a href="#101602" label="[10:16:02]">&lt;stikonas[m]&gt;</a></span><span class="message">It's now almost 50 years</span></div><div class="line" id="101732"><span class="nick" style="color:#6d2462"><a href="#101732" label="[10:17:32]">&lt;stikonas[m]&gt;</a></span><span class="message">(And GCC 2.95 is older than sed 4 too)</span></div><div class="line" id="102010"><span class="nick" style="color:#6d2462"><a href="#102010" label="[10:20:10]">&lt;stikonas[m]&gt;</a></span><span class="message">Guix used sed 1 for bootstrap which is quite a bit older</span></div><div class="line" id="102052"><span class="nick" style="color:#6b8072"><a href="#102052" label="[10:20:52]">&lt;gforce_d11977&gt;</a></span><span class="message">you are right, that the bootstrapping itself is a &quot;closed box&quot;. At least I wish, that we use more comments.</span></div><div class="line" id="102107"><span class="nick" style="color:#80b1d3"><a href="#102107" label="[10:21:07]">&lt;fossy&gt;</a></span><span class="message">gforce_d11977: i am more than happy to add mroe comments :)</span></div><div class="line" id="102117"><span class="nick" style="color:#80b1d3"><a href="#102117" label="[10:21:17]">&lt;fossy&gt;</a></span><span class="message">in general</span></div><div class="line" id="102141"><span class="nick" style="color:#80b1d3"><a href="#102141" label="[10:21:41]">&lt;fossy&gt;</a></span><span class="message">well not really &quot;how to use this&quot; comments, that belongs in a readme or something like, but &quot;how this works&quot; comments are good</span></div><div class="line" id="102308"><span class="nick" style="color:#6b8072"><a href="#102308" label="[10:23:08]">&lt;gforce_d11977&gt;</a></span><span class="message">generally i dont trust our tools yet 8-) that was the main reason to use bash2.05-syntax (which is also 20 years old 8-))) <a rel="nofollow" href="https://lists.gnu.org/archive/html/info-gnu/2002-07/msg00005.html">https://lists.gnu.org/archive/html/info-gnu/2002-07/msg00005.html</a>) </span></div><div class="line" id="102725"><span class="nick" style="color:#6b8072"><a href="#102725" label="[10:27:25]">&lt;gforce_d11977&gt;</a></span><span class="message">really, I'am unsure: Maybe it's better to write small tools in C for those tasks, than suck in e.g. awk or sed. I know that we need it for autotools/automake, but maye we can live with small stubs till then. I think for now we only use 'sed s/foo/bar/ file' or 'awk print $1&quot;</span></div><div class="line" id="102814"><span class="nick" style="color:#6b8072"><a href="#102814" label="[10:28:14]">&lt;gforce_d11977&gt;</a></span><span class="message">(but that is something for later and not important for now, dont get me wrong)</span></div><div class="line" id="102921"><span class="nick" style="color:#80b1d3"><a href="#102921" label="[10:29:21]">&lt;fossy&gt;</a></span><span class="message">i am unconvinced</span></div><div class="line" id="102943"><span class="nick" style="color:#80b1d3"><a href="#102943" label="[10:29:43]">&lt;fossy&gt;</a></span><span class="message">1. is there a problem with old working tools 2. what is the issue with awk or sed</span></div><div class="line" id="102956"><span class="nick" style="color:#80b1d3"><a href="#102956" label="[10:29:56]">&lt;fossy&gt;</a></span><span class="message">it's wayyyy easier to do text processing tasks in awk than it is in shell</span></div><div class="line" id="103024"><span class="nick" style="color:#80b1d3"><a href="#103024" label="[10:30:24]">&lt;fossy&gt;</a></span><span class="message">we aren't really looking to build an ecosystem of programs here/our own os</span></div><div class="line" id="103133"><span class="nick" style="color:#80b1d3"><a href="#103133" label="[10:31:33]">&lt;fossy&gt;</a></span><span class="message">i guess i'm thinking quite a lot about audibility here</span></div><div class="line" id="103209"><span class="nick" style="color:#80b1d3"><a href="#103209" label="[10:32:09]">&lt;fossy&gt;</a></span><span class="message">it's not whether it &quot;works&quot;, it's a lot more about if a team with some time and effort can sit down and ensure the bootstrap is correct and secure</span></div><div class="line" id="103238"><span class="nick" style="color:#80b1d3"><a href="#103238" label="[10:32:38]">&lt;fossy&gt;</a></span><span class="message">adding a whole lot of our random tools does not assist with that, as does using the bad tool for the job (sh for text processing, for example)</span></div><div class="line" id="103808"><span class="nick" style="color:#6b8072"><a href="#103808" label="[10:38:08]">&lt;gforce_d11977&gt;</a></span><span class="message">fossy: if we can avoid 'sed' and 'awk' in the early process, we build newer tools with proper 'make' or even autotools/automake. the simple things for which we are using this tools now are easy made with sh (or bash) too</span></div><div class="line" id="103914"><span class="nick" style="color:#6b8072"><a href="#103914" label="[10:39:14]">&lt;gforce_d11977&gt;</a></span><span class="message">and: it is more easy to audit a 20 line c-program, than a big GNU-sed or GNU-awk</span></div><div class="line" id="104431"><span class="nick" style="color:#8dd3c7"><a href="#104431" label="[10:44:31]">&lt;stikonas&gt;</a></span><span class="message">gforce_d11977: but these tools are needed for autotools/automake anyway</span></div><div class="line" id="104436"><span class="nick" style="color:#8dd3c7"><a href="#104436" label="[10:44:36]">&lt;stikonas&gt;</a></span><span class="message">so you can't avoid auditing them</span></div><div class="line" id="104449"><span class="nick" style="color:#8dd3c7"><a href="#104449" label="[10:44:49]">&lt;stikonas&gt;</a></span><span class="message">so by adding another C program you actually make audit harder</span></div><div class="line" id="104503"><span class="nick" style="color:#8dd3c7"><a href="#104503" label="[10:45:03]">&lt;stikonas&gt;</a></span><span class="message">also auditing custom C program is probaby harder</span></div><div class="line" id="104518"><span class="nick" style="color:#8dd3c7"><a href="#104518" label="[10:45:18]">&lt;stikonas&gt;</a></span><span class="message">gnu sed and awk were looked at by many more people over time</span></div><div class="line" id="104622"><span class="nick" style="color:#80b1d3"><a href="#104622" label="[10:46:22]">&lt;fossy&gt;</a></span><span class="message">^ yes, this exactly</span></div><div class="line" id="104651"><span class="nick" style="color:#80b1d3"><a href="#104651" label="[10:46:51]">&lt;fossy&gt;</a></span><span class="message">sed + awk are used by configure scripts and automake makefiles extensively</span></div><div class="line" id="104655"><span class="nick" style="color:#234e69"><a href="#104655" label="[10:46:55]">&lt;bauen1&gt;</a></span><span class="message">the problem with old versions of such programs is that they're no longer getting looked at</span></div><div class="line" id="104712"><span class="nick" style="color:#80b1d3"><a href="#104712" label="[10:47:12]">&lt;fossy&gt;</a></span><span class="message">this is true</span></div><div class="line" id="104750"><span class="nick" style="color:#80b1d3"><a href="#104750" label="[10:47:50]">&lt;fossy&gt;</a></span><span class="message">but i'm not sure that's really a problem? if it was looked at then, will that not hold for that now?</span></div><div class="line" id="104816"><span class="nick" style="color:#234e69"><a href="#104816" label="[10:48:16]">&lt;bauen1&gt;</a></span><span class="message">but in any way, getting a &quot;minimal viable project&quot;, a toolchain capable of building linux, glibc, gcc should go a long way for raising interest in this project</span></div><div class="line" id="104904"><span class="nick" style="color:#234e69"><a href="#104904" label="[10:49:04]">&lt;bauen1&gt;</a></span><span class="message">fossy: there are still bugs in awk/sed ; even in the old versions, just now there is nobody that keeps looking at the source code and tries to find them</span></div><div class="line" id="104926"><span class="nick" style="color:#80b1d3"><a href="#104926" label="[10:49:26]">&lt;fossy&gt;</a></span><span class="message">bauen1: i see what you mean now, yes this is correct</span></div><div class="line" id="104936"><span class="nick" style="color:#234e69"><a href="#104936" label="[10:49:36]">&lt;bauen1&gt;</a></span><span class="message">not necessarily a very big issue, but by using such old versions you're effectively soft-forking them, like with tinycc</span></div><div class="line" id="104947"><span class="nick" style="color:#80b1d3"><a href="#104947" label="[10:49:47]">&lt;fossy&gt;</a></span><span class="message">how so</span></div><div class="line" id="104950"><span class="nick" style="color:#80b1d3"><a href="#104950" label="[10:49:50]">&lt;fossy&gt;</a></span><span class="message">?</span></div><div class="line" id="105002"><span class="nick" style="color:#234e69"><a href="#105002" label="[10:50:02]">&lt;bauen1&gt;</a></span><span class="message">fossy: if you discover a bug, you need to patch it, etc...</span></div><div class="line" id="105015"><span class="nick" style="color:#80b1d3"><a href="#105015" label="[10:50:15]">&lt;fossy&gt;</a></span><span class="message">m, yes</span></div><div class="line" id="105027"><span class="nick" style="color:#8dd3c7"><a href="#105027" label="[10:50:27]">&lt;stikonas&gt;</a></span><span class="message">but then you only need to inspect patches</span></div><div class="line" id="105031"><span class="nick" style="color:#234e69"><a href="#105031" label="[10:50:31]">&lt;bauen1&gt;</a></span><span class="message">ideally you could somehow convince &quot;upstream projects&quot; to make their code simpler ...</span></div><div class="line" id="105035"><span class="nick" style="color:#8dd3c7"><a href="#105035" label="[10:50:35]">&lt;stikonas&gt;</a></span><span class="message">which we keep to the minimum</span></div><div class="line" id="105046"><span class="nick" style="color:#80b1d3"><a href="#105046" label="[10:50:46]">&lt;fossy&gt;</a></span><span class="message">i get what you're saying though bauen1</span></div><div class="line" id="105105"><span class="nick" style="color:#80b1d3"><a href="#105105" label="[10:51:05]">&lt;fossy&gt;</a></span><span class="message">it's quite hard when upstream is &quot;dead&quot; (when i mean upstream i mean that version)</span></div><div class="line" id="105124"><span class="nick" style="color:#8dd3c7"><a href="#105124" label="[10:51:24]">&lt;stikonas&gt;</a></span><span class="message">and newer versions generally cna't be used for bootstrap</span></div><div class="line" id="105138"><span class="nick" style="color:#8dd3c7"><a href="#105138" label="[10:51:38]">&lt;stikonas&gt;</a></span><span class="message">either because they depend on new libc or because they are too interconnected</span></div><div class="line" id="105156"><span class="nick" style="color:#80b1d3"><a href="#105156" label="[10:51:56]">&lt;fossy&gt;</a></span><span class="message">and i don't think there is a real solution to this either; with the current manpower we have, keeping up with the target (which is always moving) requires constant mvoement as is</span></div><div class="line" id="105217"><span class="nick" style="color:#8dd3c7"><a href="#105217" label="[10:52:17]">&lt;stikonas&gt;</a></span><span class="message">yeah, and we haven't even looked at non-x86 arches</span></div><div class="line" id="105255"><span class="nick" style="color:#80b1d3"><a href="#105255" label="[10:52:55]">&lt;fossy&gt;</a></span><span class="message">replacing older programs through either maintianing them, writing replacements (as gforce_d11977 is describing), or extending libc/gcc/whatever to work with newer versions is just not possible right now for me</span></div><div class="line" id="105417"><span class="nick" style="color:#80b1d3"><a href="#105417" label="[10:54:17]">&lt;fossy&gt;</a></span><span class="message">the only time i would really even consider a replacement of a useful tool such as awk with a custom hand-written script that reimplements an awk script in another language is if it meant a newer version could be used later or allowed the bootstrap to advance signficiantly more quickly</span></div><div class="line" id="105420"><span class="nick" style="color:#234e69"><a href="#105420" label="[10:54:20]">&lt;bauen1&gt;</a></span><span class="message">fossy: getting a &quot;minimal viable product&quot; i.e. a toolchain ready to build a kernel, glibc, gcc, git, ... will raise a lot more interest, up to the point where you might be able to influence upstream, start rewriting tools (e.g. in a safer C), review code, etc...</span></div><div class="line" id="105434"><span class="nick" style="color:#80b1d3"><a href="#105434" label="[10:54:34]">&lt;fossy&gt;</a></span><span class="message">i don't believe that is the case for this particular opcodes.awk issue</span></div><div class="line" id="105501"><span class="nick" style="color:#80b1d3"><a href="#105501" label="[10:55:01]">&lt;fossy&gt;</a></span><span class="message">bauen1: i hope so!!!</span></div><div class="line" id="110223"><span class="nick" style="color:#8dd3c7"><a href="#110223" label="[11:02:23]">&lt;stikonas&gt;</a></span><span class="message">and in any case, we later build safe tools, most bugs can't propagate to there</span></div><div class="line" id="110245"><span class="nick" style="color:#8dd3c7"><a href="#110245" label="[11:02:45]">&lt;stikonas&gt;</a></span><span class="message">only something very specific like TrustingTrust attack can</span></div><div class="line" id="110323"><span class="nick" style="color:#8dd3c7"><a href="#110323" label="[11:03:23]">&lt;stikonas&gt;</a></span><span class="message">and we don't have that in binaries because we build them from scratch</span></div><div class="line" id="110449"><span class="nick" style="color:#234e69"><a href="#110449" label="[11:04:49]">&lt;bauen1&gt;</a></span><span class="message">stikonas: what about bugs in the source code that *do* propagate ? not sure if there are examples of this</span></div><div class="line" id="110505"><span class="nick" style="color:#8dd3c7"><a href="#110505" label="[11:05:05]">&lt;stikonas&gt;</a></span><span class="message">yeah, I'm not sure if there are examples of this...</span></div><div class="line" id="110540"><span class="nick" style="color:#8dd3c7"><a href="#110540" label="[11:05:40]">&lt;stikonas&gt;</a></span><span class="message">I think you have to do a lot more work than random bug in order to make something propagate</span></div><div class="line" id="110606"><span class="nick" style="color:#8dd3c7"><a href="#110606" label="[11:06:06]">&lt;stikonas&gt;</a></span><span class="message">because it has to survive purely in binary code</span></div><div class="line" id="110650"><span class="nick" style="color:#234e69"><a href="#110650" label="[11:06:50]">&lt;bauen1&gt;</a></span><span class="message">stikonas: i was thinking about wrong constants, which propagate more easily</span></div><div class="line" id="110900"><span class="nick" style="color:#234e69"><a href="#110900" label="[11:09:00]">&lt;bauen1&gt;</a></span><span class="message">but yeah, i thankfully can't find an example of that yet</span></div><div class="line" id="111037"><span class="nick" style="color:#8dd3c7"><a href="#111037" label="[11:10:37]">&lt;stikonas&gt;</a></span><span class="message">probably wrong constants would break things completely, so would be spotted before they are introduced...</span></div><div class="line" id="111051"><span class="nick" style="color:#8dd3c7"><a href="#111051" label="[11:10:51]">&lt;stikonas&gt;</a></span><span class="message">I think it has to be more sophisticated</span></div><div class="line" id="111439"><span class="nick" style="color:#234e69"><a href="#111439" label="[11:14:39]">&lt;bauen1&gt;</a></span><span class="message">stikonas: that's what i'm not sure about, if e.g. a compiler bug introduces a bug in musl -&gt; potentially a bug in gcc -&gt; ... ; for example not taking a branch under very specific cirumstances</span></div><div class="line" id="111516"><span class="nick" style="color:#234e69"><a href="#111516" label="[11:15:16]">&lt;bauen1&gt;</a></span><span class="message">the real question would be if it propagates (in any form) past the bootstrap or a gcc recompile would &quot;make it go away&quot;</span></div><div class="line" id="111633"><span class="nick" style="color:#234e69"><a href="#111633" label="[11:16:33]">&lt;bauen1&gt;</a></span><span class="message">which does seem rather unlikely</span></div><div class="line" id="111649"><span class="nick" style="color:#6b8072"><a href="#111649" label="[11:16:49]">&lt;gforce_d11977&gt;</a></span><span class="message">bauen1: the more giant blobs-&gt;SLOBS we use, the more attack surface</span></div><div class="line" id="111658"><span class="nick" style="color:#8dd3c7"><a href="#111658" label="[11:16:58]">&lt;stikonas&gt;</a></span><span class="message">I think gcc recompile, especially against glibc will make it go away</span></div><div class="line" id="111659"><span class="nick" style="color:#234e69"><a href="#111659" label="[11:16:59]">&lt;bauen1&gt;</a></span><span class="message">or rather it should be catched if you recompile gcc twice (or more)</span></div><div class="line" id="111715"><span class="nick" style="color:#6b8072"><a href="#111715" label="[11:17:15]">&lt;gforce_d11977&gt;</a></span><span class="message">i hope so...</span></div><div class="line" id="111733"><span class="nick" style="color:#234e69"><a href="#111733" label="[11:17:33]">&lt;bauen1&gt;</a></span><span class="message">stikonas: well not make it go away, but unless the propagation is &quot;stable&quot; ; which is unlikely for a non-malicious bug i would say, you can compare checksums after a few recompiles</span></div><div class="line" id="111813"><span class="nick" style="color:#6b8072"><a href="#111813" label="[11:18:13]">&lt;gforce_d11977&gt;</a></span><span class="message">(that is stuff for a university: injecting stuff, which survives bootstrapping...</span></div><div class="line" id="111818"><span class="nick" style="color:#6b8072"><a href="#111818" label="[11:18:18]">&lt;gforce_d11977&gt;</a></span><span class="message">)</span></div><div class="line" id="111921"><span class="nick" style="color:#234e69"><a href="#111921" label="[11:19:21]">&lt;bauen1&gt;</a></span><span class="message">gforce_d11977: it's not that hard ; i did that to hex0 which hijacks the write syscall, you just need a common pattern ; and then somehow survive the code review</span></div><div class="line" id="111959"><span class="nick" style="color:#8dd3c7"><a href="#111959" label="[11:19:59]">&lt;stikonas&gt;</a></span><span class="message">bauen1: but does it actually survive all the way (and this is malicious case)</span></div><div class="line" id="112032"><span class="nick" style="color:#8dd3c7"><a href="#112032" label="[11:20:32]">&lt;stikonas&gt;</a></span><span class="message">you have to do some deliberate effort for that, harder to imagine accidentally happening</span></div><div class="line" id="112049"><span class="nick" style="color:#234e69"><a href="#112049" label="[11:20:49]">&lt;bauen1&gt;</a></span><span class="message">stikonas: no, i didn't add enough patterns to make it survive very far, but would be doable</span></div><div class="line" id="112151"><span class="nick" style="color:#8dd3c7"><a href="#112151" label="[11:21:51]">&lt;stikonas&gt;</a></span><span class="message">well, addign enough patters blows up initial binary size</span></div><div class="line" id="112206"><span class="nick" style="color:#8dd3c7"><a href="#112206" label="[11:22:06]">&lt;stikonas&gt;</a></span><span class="message">you can't add much to 357 bytes (even if you pass code review)</span></div><div class="line" id="112256"><span class="nick" style="color:#234e69"><a href="#112256" label="[11:22:56]">&lt;bauen1&gt;</a></span><span class="message">stikonas: why put it in hex0 ? just hide it somewhere later</span></div><div class="line" id="112340"><span class="nick" style="color:#234e69"><a href="#112340" label="[11:23:40]">&lt;bauen1&gt;</a></span><span class="message">it means that you can't really affect earlier binaries, but you can still propagate to the final toolchain, possibly undetected</span></div><div class="line" id="112448"><span class="nick" style="color:#8dd3c7"><a href="#112448" label="[11:24:48]">&lt;stikonas&gt;</a></span><span class="message">somebody should have added it in 15 year old code then</span></div><div class="line" id="112507"><span class="nick" style="color:#8dd3c7"><a href="#112507" label="[11:25:07]">&lt;stikonas&gt;</a></span><span class="message">but it's probaby much easier to spot it when it's in source</span></div><div class="line" id="112520"><span class="nick" style="color:#8dd3c7"><a href="#112520" label="[11:25:20]">&lt;stikonas&gt;</a></span><span class="message">rather than in binary</span></div><div class="line" id="112605"><span class="nick" style="color:#234e69"><a href="#112605" label="[11:26:05]">&lt;bauen1&gt;</a></span><span class="message">yes</span></div><div class="line" id="113501"><span class="nick" style="color:#6b8072"><a href="#113501" label="[11:35:01]">&lt;gforce_d11977&gt;</a></span><span class="message">what i just want to say: for making the bootstrap, it is a good idea to not only avoid binaries, but also to avoid sourcecode (as much as posible)</span></div><div class="line" id="113832"><span class="nick" style="color:#6b8072"><a href="#113832" label="[11:38:32]">&lt;gforce_d11977&gt;</a></span><span class="message">bauen1: nice idea! 8-)</span></div><div class="line" id="113845"><span class="nick" style="color:#6b8072"><a href="#113845" label="[11:38:45]">&lt;gforce_d11977&gt;</a></span><span class="message">(hijacking the write syscall)</span></div><div class="line" id="134429"><span class="nick" style="color:#6c3d55"><a href="#134429" label="[13:44:29]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: well there is always the proposed M3 solution to making the bootstrap simpler; it just is still 2 years of work away from being done.</span></div><div class="line" id="134509"><span class="nick" style="color:#6c3d55"><a href="#134509" label="[13:45:09]">&lt;OriansJ&gt;</a></span><span class="message">or getting MesCC to the level of being able to Compile GCC directly ( janneke any quess how long that would take? )</span></div><div class="line" id="134531"><span class="nick" style="color:#8dd3c7"><a href="#134531" label="[13:45:31]">&lt;stikonas&gt;</a></span><span class="message">well, if you want to bootstrap autotools you would still need to get other tools running...</span></div><div class="line" id="134536"><span class="nick" style="color:#8dd3c7"><a href="#134536" label="[13:45:36]">&lt;stikonas&gt;</a></span><span class="message">that depends on your goals...</span></div><div class="line" id="134545"><span class="nick" style="color:#8dd3c7"><a href="#134545" label="[13:45:45]">&lt;stikonas&gt;</a></span><span class="message">and there are different things one can do</span></div><div class="line" id="134636"><span class="nick" style="color:#8dd3c7"><a href="#134636" label="[13:46:36]">&lt;stikonas&gt;</a></span><span class="message">and also stuff like bison...</span></div><div class="line" id="134645"><span class="nick" style="color:#6c3d55"><a href="#134645" label="[13:46:45]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: yes and being able to use GCC to do that work directly, would be much easier.</span></div><div class="line" id="134743"><span class="nick" style="color:#8dd3c7"><a href="#134743" label="[13:47:43]">&lt;stikonas&gt;</a></span><span class="message">hmm, possibly...</span></div><div class="line" id="134751"><span class="nick" style="color:#8dd3c7"><a href="#134751" label="[13:47:51]">&lt;stikonas&gt;</a></span><span class="message">I wonder how many files are there in gcc core</span></div><div class="line" id="134757"><span class="nick" style="color:#8dd3c7"><a href="#134757" label="[13:47:57]">&lt;stikonas&gt;</a></span><span class="message">that we need to build</span></div><div class="line" id="134839"><span class="nick" style="color:#6c3d55"><a href="#134839" label="[13:48:39]">&lt;OriansJ&gt;</a></span><span class="message">well my path was largely assume you had the tool you needed, make a working path and then build it to spec</span></div><div class="line" id="135119"><span class="nick" style="color:#8dd3c7"><a href="#135119" label="[13:51:19]">&lt;stikonas&gt;</a></span><span class="message">yeah, but my question is how are we building GCC?</span></div><div class="line" id="135126"><span class="nick" style="color:#8dd3c7"><a href="#135126" label="[13:51:26]">&lt;stikonas&gt;</a></span><span class="message">compiler and liker is not enough</span></div><div class="line" id="135218"><span class="nick" style="color:#6c3d55"><a href="#135218" label="[13:52:18]">&lt;OriansJ&gt;</a></span><span class="message">yep, bison to generate the grammer</span></div><div class="line" id="135218"><span class="nick" style="color:#8dd3c7"><a href="#135218" label="[13:52:18]">&lt;stikonas&gt;</a></span><span class="message">it's all the build system too...</span></div><div class="line" id="135229"><span class="nick" style="color:#8dd3c7"><a href="#135229" label="[13:52:29]">&lt;stikonas&gt;</a></span><span class="message">need to compile make too, etc...</span></div><div class="line" id="135230"><span class="nick" style="color:#6c3d55"><a href="#135230" label="[13:52:30]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: we can strip out the build system</span></div><div class="line" id="135240"><span class="nick" style="color:#8dd3c7"><a href="#135240" label="[13:52:40]">&lt;stikonas&gt;</a></span><span class="message">well, up to some point</span></div><div class="line" id="135244"><span class="nick" style="color:#6c3d55"><a href="#135244" label="[13:52:44]">&lt;OriansJ&gt;</a></span><span class="message">convert it to a single shell script</span></div><div class="line" id="135246"><span class="nick" style="color:#8dd3c7"><a href="#135246" label="[13:52:46]">&lt;stikonas&gt;</a></span><span class="message">not sure if GCC is simple enough</span></div><div class="line" id="135250"><span class="nick" style="color:#6c3d55"><a href="#135250" label="[13:52:50]">&lt;OriansJ&gt;</a></span><span class="message">No</span></div><div class="line" id="135254"><span class="nick" style="color:#6c3d55"><a href="#135254" label="[13:52:54]">&lt;OriansJ&gt;</a></span><span class="message">EVERYTHING</span></div><div class="line" id="135257"><span class="nick" style="color:#8dd3c7"><a href="#135257" label="[13:52:57]">&lt;stikonas&gt;</a></span><span class="message">we were stripping build systems in live-bootstrap</span></div><div class="line" id="135303"><span class="nick" style="color:#6c3d55"><a href="#135303" label="[13:53:03]">&lt;OriansJ&gt;</a></span><span class="message">is just a list of commands executed</span></div><div class="line" id="135325"><span class="nick" style="color:#6c3d55"><a href="#135325" label="[13:53:25]">&lt;OriansJ&gt;</a></span><span class="message">It might be a long painful list</span></div><div class="line" id="135331"><span class="nick" style="color:#8dd3c7"><a href="#135331" label="[13:53:31]">&lt;stikonas&gt;</a></span><span class="message">well, yeah...</span></div><div class="line" id="135337"><span class="nick" style="color:#6c3d55"><a href="#135337" label="[13:53:37]">&lt;OriansJ&gt;</a></span><span class="message">but it'll be build these things in this order</span></div><div class="line" id="135338"><span class="nick" style="color:#8dd3c7"><a href="#135338" label="[13:53:38]">&lt;stikonas&gt;</a></span><span class="message">with a lot of defines...</span></div><div class="line" id="135344"><span class="nick" style="color:#8dd3c7"><a href="#135344" label="[13:53:44]">&lt;stikonas&gt;</a></span><span class="message">but yeah...</span></div><div class="line" id="135356"><span class="nick" style="color:#6c3d55"><a href="#135356" label="[13:53:56]">&lt;OriansJ&gt;</a></span><span class="message">which you can record from a cheat run and use</span></div><div class="line" id="135525"><span class="nick" style="color:#6c3d55"><a href="#135525" label="[13:55:25]">&lt;OriansJ&gt;</a></span><span class="message">The Bison generation does have to be done and that bootstrap does have to be solved but autotools, make and the rest are just nice to haves.</span></div><div class="line" id="135552"><span class="nick" style="color:#6c3d55"><a href="#135552" label="[13:55:52]">&lt;OriansJ&gt;</a></span><span class="message">Strip out complexity that isn't absolutely required.</span></div><div class="line" id="135624"><span class="nick" style="color:#6c3d55"><a href="#135624" label="[13:56:24]">&lt;OriansJ&gt;</a></span><span class="message">and in no way is autotools and make complexity that is actually required.</span></div><div class="line" id="135649"><span class="nick" style="color:#8dd3c7"><a href="#135649" label="[13:56:49]">&lt;stikonas&gt;</a></span><span class="message">well, make is actually very easy to compile...</span></div><div class="line" id="135714"><span class="nick" style="color:#8dd3c7"><a href="#135714" label="[13:57:14]">&lt;stikonas&gt;</a></span><span class="message">but bison is not that simple</span></div><div class="line" id="135742"><span class="nick" style="color:#8dd3c7"><a href="#135742" label="[13:57:42]">&lt;stikonas&gt;</a></span><span class="message">it depends on fairly advanced libc, reasonably new m4 and flex</span></div><div class="line" id="140705"><span class="nick" style="color:#6d2462"><a href="#140705" label="[14:07:05]">&lt;stikonas[m]&gt;</a></span><span class="message">Which is half of live-bootstrap...</span></div><div class="line" id="141317"><span class="nick" style="color:#d9d9d9"><a href="#141317" label="[14:13:17]">&lt;janneke&gt;</a></span><span class="message">OriansJ: never really looked at it</span></div><div class="line" id="150337"><span class="nick" style="color:#6b8072"><a href="#150337" label="[15:03:37]">&lt;gforce_d11977&gt;</a></span><span class="message">yeah, stripping out complexity is a nice goal with a long road - BTW: i hacked a 'sed' replacement in 40 lines: <a rel="nofollow" href="http://intercity-vpn.de/remove_lines.c">http://intercity-vpn.de/remove_lines.c</a> </span></div><div class="line" id="150420"><span class="nick" style="color:#6b8072"><a href="#150420" label="[15:04:20]">&lt;gforce_d11977&gt;</a></span><span class="message">(this is for what we use sed at the moment)</span></div><div class="line" id="182703"><span class="nick" style="color:#6c3d55"><a href="#182703" label="[18:27:03]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: Ok but could we remove the need for bison entirely with nyacc or another easier to bootstrap alternative?</span></div><div class="line" id="182750"><span class="nick" style="color:#8dd3c7"><a href="#182750" label="[18:27:50]">&lt;stikonas&gt;</a></span><span class="message">I am not familiar enough with nyacc to tell...</span></div><div class="line" id="182851"><span class="nick" style="color:#8dd3c7"><a href="#182851" label="[18:28:51]">&lt;stikonas&gt;</a></span><span class="message">but I wouldn't be suprised that with some work it would be possible</span></div><div class="line" id="183045"><span class="nick" style="color:#8dd3c7"><a href="#183045" label="[18:30:45]">&lt;stikonas&gt;</a></span><span class="message">gcc only seems to have bison files, so on its own it does not need flex</span></div><div class="line" id="183143"><span class="nick" style="color:#bc80bd"><a href="#183143" label="[18:31:43]">&lt;dannym&gt;</a></span><span class="message">janneke: I found Linux config option OABI_COMPAT that would allow OABI executables to run.  Is it turned on on novena?  Hard to check because Guix kernels don't have /proc/config :(</span></div><div class="line" id="183152"><span class="nick" style="color:#bc80bd"><a href="#183152" label="[18:31:52]">&lt;dannym&gt;</a></span><span class="message">Maybe overdrive has /proc/config ?</span></div><div class="line" id="183239"><span class="nick" style="color:#bc80bd"><a href="#183239" label="[18:32:39]">&lt;dannym&gt;</a></span><span class="message">At least those:</span></div><div class="line" id="183240"><span class="nick" style="color:#bc80bd"><a href="#183240" label="[18:32:40]">&lt;dannym&gt;</a></span><span class="message">dannym@novena ~/src/guix-wip-arm-bootstrap/guix/gnu/packages/aux-files/linux-libre$ grep OABI_COMPAT *</span></div><div class="line" id="183240"><span class="nick" style="color:#bc80bd"><a href="#183240" label="[18:32:40]">&lt;dannym&gt;</a></span><span class="message">4.14-arm.conf:# CONFIG_OABI_COMPAT is not set</span></div><div class="line" id="183240"><span class="nick" style="color:#bc80bd"><a href="#183240" label="[18:32:40]">&lt;dannym&gt;</a></span><span class="message">4.19-arm.conf:# CONFIG_OABI_COMPAT is not set</span></div><div class="line" id="183240"><span class="nick" style="color:#bc80bd"><a href="#183240" label="[18:32:40]">&lt;dannym&gt;</a></span><span class="message">5.4-arm.conf:# CONFIG_OABI_COMPAT is not set</span></div><div class="line" id="183241"><span class="nick" style="color:#bc80bd"><a href="#183241" label="[18:32:41]">&lt;dannym&gt;</a></span><span class="message">5.9-arm.conf:# CONFIG_OABI_COMPAT is not set</span></div><div class="line" id="183403"><span class="nick" style="color:#bc80bd"><a href="#183403" label="[18:34:03]">&lt;dannym&gt;</a></span><span class="message">(OABI is from before year 2000)</span></div><div class="line" id="183518"><span class="nick" style="color:#bc80bd"><a href="#183518" label="[18:35:18]">&lt;dannym&gt;</a></span><span class="message">Can't we have gcc-2.95 just use EABI syscalls?  It's not a lot of difference anyway--just load r7 with the syscall_number and then svc #0 (instead of just svc 0x900...0 + syscall_number)</span></div><div class="line" id="183652"><span class="nick" style="color:#8dd3c7"><a href="#183652" label="[18:36:52]">&lt;stikonas&gt;</a></span><span class="message">OriansJ: on the other  hand gcc 4.7.4 does not contain essential bison files (although it does contain flex .l file)</span></div><div class="line" id="183706"><span class="nick" style="color:#8dd3c7"><a href="#183706" label="[18:37:06]">&lt;stikonas&gt;</a></span><span class="message">so if we want to try to skip old gcc, then we need flex</span></div><div class="line" id="183855"><span class="nick" style="color:#8dd3c7"><a href="#183855" label="[18:38:55]">&lt;stikonas&gt;</a></span><span class="message">anyway, even if you bootstrap gcc and have very few other tools, it won't be that much easier than bootstrapping those tools with tcc and then building gcc</span></div><div class="line" id="183912"><span class="nick" style="color:#8dd3c7"><a href="#183912" label="[18:39:12]">&lt;stikonas&gt;</a></span><span class="message">tcc can cope with fairly advanced C</span></div><div class="line" id="183929"><span class="nick" style="color:#8dd3c7"><a href="#183929" label="[18:39:29]">&lt;stikonas&gt;</a></span><span class="message">if you want to skip tcc entirely, that might be another thing...</span></div><div class="line" id="183941"><span class="nick" style="color:#6c3d55"><a href="#183941" label="[18:39:41]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: except GCC+glibc would eliminate a lot of possible problems</span></div><div class="line" id="184008"><span class="nick" style="color:#8dd3c7"><a href="#184008" label="[18:40:08]">&lt;stikonas&gt;</a></span><span class="message">well, compared to mes libc, definitely</span></div><div class="line" id="184026"><span class="nick" style="color:#8dd3c7"><a href="#184026" label="[18:40:26]">&lt;stikonas&gt;</a></span><span class="message">compared to tcc+musl, maybe, but I think less so</span></div><div class="line" id="184140"><span class="nick" style="color:#8dd3c7"><a href="#184140" label="[18:41:40]">&lt;stikonas&gt;</a></span><span class="message">anyway, for bootstrapping, more paths is better, not worse</span></div><div class="line" id="184203"><span class="nick" style="color:#8dd3c7"><a href="#184203" label="[18:42:03]">&lt;stikonas&gt;</a></span><span class="message">especially if they'll end up producing binaries with the same hash</span></div><div class="line" id="185556"><span class="nick" style="color:#6b8072"><a href="#185556" label="[18:55:56]">&lt;gforce_d11977&gt;</a></span><span class="message">stikonas: important sentence! (more paths are better)</span></div><div class="line" id="202526"><span class="nick" style="color:#3c5b35"><a href="#202526" label="[20:25:26]">&lt;civodul&gt;</a></span><span class="message">dannym: re /proc/config.gz, you can do something like: guix gc -R $(guix gc --derivers $(readlink -f /run/current-system/kernel/bzImage)) | grep '\.conf'</span></div><div class="line" id="202703"><span class="nick" style="color:#bc80bd"><a href="#202703" label="[20:27:03]">&lt;dannym&gt;</a></span><span class="message">civodul: Thanks!  CONFIG_OABI_COMPAT is indeed not set.</span></div><div class="line" id="202711"><span class="nick" style="color:#bc80bd"><a href="#202711" label="[20:27:11]">&lt;dannym&gt;</a></span><span class="message">(just tried that command--it works)</span></div><div class="line" id="202732"><span class="nick" style="color:#bc80bd"><a href="#202732" label="[20:27:32]">&lt;dannym&gt;</a></span><span class="message">(on novena, I get /gnu/store/51lywr26bayiq54hc15lhwak24ad6yhk-5.9-arm.conf )</span></div><div class="line" id="210431"><span class="nick" style="color:#80b1d3"><a href="#210431" label="[21:04:31]">&lt;fossy&gt;</a></span><span class="message">&lt;gforce_d11977&gt; what i just want to say: for making the bootstrap, it is a good idea to not only avoid binaries, but also to avoid sourcecode (as much as posible)</span></div><div class="line" id="210436"><span class="nick" style="color:#80b1d3"><a href="#210436" label="[21:04:36]">&lt;fossy&gt;</a></span><span class="message">right, exactly</span></div><div class="line" id="210504"><span class="nick" style="color:#80b1d3"><a href="#210504" label="[21:05:04]">&lt;fossy&gt;</a></span><span class="message">we want to minimze the number of programs required across the entire bootstrap</span></div><div class="line" id="210550"><span class="nick" style="color:#80b1d3"><a href="#210550" label="[21:05:50]">&lt;fossy&gt;</a></span><span class="message">but if say we used your sed replacement, we still require sed later, so effectively all that has been done is added another program</span></div><div class="line" id="210854"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado</span></div><div class="line" id="210930"><span class="nick" style="color:#8dd3c7"><a href="#210930" label="[21:09:30]">&lt;stikonas&gt;</a></span><span class="message">and we require sed for string replacement too</span></div><div class="line" id="210938"><span class="nick" style="color:#8dd3c7"><a href="#210938" label="[21:09:38]">&lt;stikonas&gt;</a></span><span class="message">(I think as part of flex bootstrap)</span></div><div class="line" id="211029"><span class="nick" style="color:#80b1d3"><a href="#211029" label="[21:10:29]">&lt;fossy&gt;</a></span><span class="message">OriansJ: I guess its kinda a compromise between time and complexity; we can just strip out autotools and make from every single package and just use kaem, but that would take literally decades, at our current rate of work. For now it seems to be easier to just make autotools work, but eventually it would be nice to not use autotools at all</span></div><div class="line" id="211206"><span class="nick" style="color:#80b1d3"><a href="#211206" label="[21:12:06]">&lt;fossy&gt;</a></span><span class="message">complexity of implementing the complex thing vs removing it</span></div><div class="line" id="211225"><span class="nick" style="color:#8dd3c7"><a href="#211225" label="[21:12:25]">&lt;stikonas&gt;</a></span><span class="message">fossy: I think OriansJ was proposing kind of automatic capture of commands to run...</span></div><div class="line" id="211310"><span class="nick" style="color:#8dd3c7"><a href="#211310" label="[21:13:10]">&lt;stikonas&gt;</a></span><span class="message">that's why it was called &quot;cheating&quot;</span></div><div class="line" id="211351"><span class="nick" style="color:#8dd3c7"><a href="#211351" label="[21:13:51]">&lt;stikonas&gt;</a></span><span class="message">testing perl changes now...</span></div><div class="line" id="212107"><span class="nick" style="color:#8dd3c7"><a href="#212107" label="[21:21:07]">&lt;stikonas&gt;</a></span><span class="message">ok, it works, just need to put stuff into the right comits...</span></div><div class="line" id="212142"><span class="nick" style="color:#8dd3c7"><a href="#212142" label="[21:21:42]">&lt;stikonas&gt;</a></span><span class="message">hmm, maybe I'll just create a new commit...</span></div><div class="line" id="212446"><span class="nick" style="color:#80b1d3"><a href="#212446" label="[21:24:46]">&lt;fossy&gt;</a></span><span class="message">stikonas: ooh, I see</span></div><div class="line" id="212456"><span class="nick" style="color:#80b1d3"><a href="#212456" label="[21:24:56]">&lt;fossy&gt;</a></span><span class="message">I dont mind that</span></div><div class="line" id="212458"><span class="nick" style="color:#8dd3c7"><a href="#212458" label="[21:24:58]">&lt;stikonas&gt;</a></span><span class="message">fossy: ok, I pushed a new commit</span></div><div class="line" id="212507"><span class="nick" style="color:#80b1d3"><a href="#212507" label="[21:25:07]">&lt;fossy&gt;</a></span><span class="message">but then that clearly has to be fixed and audited..n</span></div><div class="line" id="212513"><span class="nick" style="color:#8dd3c7"><a href="#212513" label="[21:25:13]">&lt;stikonas&gt;</a></span><span class="message">yaeh...</span></div><div class="line" id="212532"><span class="nick" style="color:#8dd3c7"><a href="#212532" label="[21:25:32]">&lt;stikonas&gt;</a></span><span class="message">and it will be a long script...</span></div><div class="line" id="212540"><span class="nick" style="color:#8dd3c7"><a href="#212540" label="[21:25:40]">&lt;stikonas&gt;</a></span><span class="message">and even if you have gcc with glibc</span></div><div class="line" id="212547"><span class="nick" style="color:#8dd3c7"><a href="#212547" label="[21:25:47]">&lt;stikonas&gt;</a></span><span class="message">you still then need to bootstrap other tools...</span></div><div class="line" id="212640"><span class="nick" style="color:#8dd3c7"><a href="#212640" label="[21:26:40]">&lt;stikonas&gt;</a></span><span class="message">you still need to write custom makefile for make, then build bash</span></div><div class="line" id="212643"><span class="nick" style="color:#8dd3c7"><a href="#212643" label="[21:26:43]">&lt;stikonas&gt;</a></span><span class="message">bootstrap bison...</span></div><div class="line" id="212707"><span class="nick" style="color:#8dd3c7"><a href="#212707" label="[21:27:07]">&lt;stikonas&gt;</a></span><span class="message">so the work that we are doing now will not disappear</span></div><div class="line" id="212710"><span class="nick" style="color:#8dd3c7"><a href="#212710" label="[21:27:10]">&lt;stikonas&gt;</a></span><span class="message">it will be just postponed</span></div><div class="line" id="212724"><span class="nick" style="color:#8dd3c7"><a href="#212724" label="[21:27:24]">&lt;stikonas&gt;</a></span><span class="message">well, maybe can drop a few patches</span></div><div class="line" id="213123"><span class="nick" style="color:#8dd3c7"><a href="#213123" label="[21:31:23]">&lt;stikonas&gt;</a></span><span class="message">fossy: for these new perl tarballs from git archives I had to add more code to src_unpack</span></div><div class="line" id="213135"><span class="nick" style="color:#8dd3c7"><a href="#213135" label="[21:31:35]">&lt;stikonas&gt;</a></span><span class="message">folders were named differently</span></div><div class="line" id="213150"><span class="nick" style="color:#8dd3c7"><a href="#213150" label="[21:31:50]">&lt;stikonas&gt;</a></span><span class="message">other than that it worked</span></div><div class="line" id="213229"><span class="nick" style="color:#80b1d3"><a href="#213229" label="[21:32:29]">&lt;fossy&gt;</a></span><span class="message">stikonas: cool cool</span></div><div class="line" id="213313"><span class="nick" style="color:#8dd3c7"><a href="#213313" label="[21:33:13]">&lt;stikonas&gt;</a></span><span class="message">I'll later work on newer perl's...</span></div><div class="line" id="213331"><span class="nick" style="color:#8dd3c7"><a href="#213331" label="[21:33:31]">&lt;stikonas&gt;</a></span><span class="message">it can run some older autoconf/automake, but newer versions need slightly newer perl...</span></div><div class="line" id="213344"><span class="nick" style="color:#8dd3c7"><a href="#213344" label="[21:33:44]">&lt;stikonas&gt;</a></span><span class="message">and 5.003 was the best I could build with 5.000</span></div><div class="line" id="214913"><span class="nick" style="color:#80b1d3"><a href="#214913" label="[21:49:13]">&lt;fossy&gt;</a></span><span class="message">stikonas: unfortunately I think we may need different versions of autotools :-/</span></div><div class="line" id="214928"><span class="nick" style="color:#8dd3c7"><a href="#214928" label="[21:49:28]">&lt;stikonas&gt;</a></span><span class="message">oh, that's for sure</span></div><div class="line" id="214941"><span class="nick" style="color:#8dd3c7"><a href="#214941" label="[21:49:41]">&lt;stikonas&gt;</a></span><span class="message">that's why I'm trying to get newer perl too...</span></div><div class="line" id="214942"><span class="nick" style="color:#80b1d3"><a href="#214942" label="[21:49:42]">&lt;fossy&gt;</a></span><span class="message">and hence different perls</span></div><div class="line" id="214950"><span class="nick" style="color:#8dd3c7"><a href="#214950" label="[21:49:50]">&lt;stikonas&gt;</a></span><span class="message">oh, I think they can all run on new perl</span></div><div class="line" id="214957"><span class="nick" style="color:#8dd3c7"><a href="#214957" label="[21:49:57]">&lt;stikonas&gt;</a></span><span class="message">there is probably minimal version requirement</span></div><div class="line" id="214959"><span class="nick" style="color:#8dd3c7"><a href="#214959" label="[21:49:59]">&lt;stikonas&gt;</a></span><span class="message">but that's all</span></div><div class="line" id="215006"><span class="nick" style="color:#80b1d3"><a href="#215006" label="[21:50:06]">&lt;fossy&gt;</a></span><span class="message">oh yeah probably</span></div><div class="line" id="215015"><span class="nick" style="color:#80b1d3"><a href="#215015" label="[21:50:15]">&lt;fossy&gt;</a></span><span class="message">is Perl backwards compatible</span></div><div class="line" id="215022"><span class="nick" style="color:#8dd3c7"><a href="#215022" label="[21:50:22]">&lt;stikonas&gt;</a></span><span class="message">I saw some versions complaining about needing at least 5.005</span></div><div class="line" id="215031"><span class="nick" style="color:#8dd3c7"><a href="#215031" label="[21:50:31]">&lt;stikonas&gt;</a></span><span class="message">I don't know Perl...</span></div><div class="line" id="215041"><span class="nick" style="color:#8dd3c7"><a href="#215041" label="[21:50:41]">&lt;stikonas&gt;</a></span><span class="message">but it probably is</span></div><div class="line" id="215044"><span class="nick" style="color:#80b1d3"><a href="#215044" label="[21:50:44]">&lt;fossy&gt;</a></span><span class="message">Im pretty sure its not semver</span></div><div class="line" id="215047"><span class="nick" style="color:#80b1d3"><a href="#215047" label="[21:50:47]">&lt;fossy&gt;</a></span><span class="message">Let me google</span></div><div class="line" id="215205"><span class="nick" style="color:#80b1d3"><a href="#215205" label="[21:52:05]">&lt;fossy&gt;</a></span><span class="message">so for the most part it is</span></div><div class="line" id="215237"><span class="nick" style="color:#80b1d3"><a href="#215237" label="[21:52:37]">&lt;fossy&gt;</a></span><span class="message">the only incompatibilites possible would be module removals</span></div><div class="line" id="215302"><span class="nick" style="color:#8dd3c7"><a href="#215302" label="[21:53:02]">&lt;stikonas&gt;</a></span><span class="message">well, old automake runs without any modules</span></div><div class="line" id="215319"><span class="nick" style="color:#8dd3c7"><a href="#215319" label="[21:53:19]">&lt;stikonas&gt;</a></span><span class="message">I think I tried 1.2</span></div><div class="line" id="215355"><span class="nick" style="color:#80b1d3"><a href="#215355" label="[21:53:55]">&lt;fossy&gt;</a></span><span class="message">right, ok</span></div><div class="line" id="215404"><span class="nick" style="color:#8dd3c7"><a href="#215404" label="[21:54:04]">&lt;stikonas&gt;</a></span><span class="message">and I think we might need to install m4 libs/modules</span></div><div class="line" id="215513"><span class="nick" style="color:#8dd3c7"><a href="#215513" label="[21:55:13]">&lt;stikonas&gt;</a></span><span class="message">there is stuff in m4-1.4.7/m4</span></div><div class="line" id="215808"><span class="nick" style="color:#8dd3c7"><a href="#215808" label="[21:58:08]">&lt;stikonas&gt;</a></span><span class="message">ir maybe not, not sure now. Anyway, we can do that when/if we need</span></div><br /></div></body></html>