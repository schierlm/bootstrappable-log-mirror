<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-06-11.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="001309"><span class="nick" style="color:#389600"><a href="#001309" label="[00:13:09]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well compromised hardware that subverts operating systems and compilers and future hardware designs was the Nexus Intruder Program against the Soviet Union during the Cold war. Which presents some unfortunate properties since computers are required in the manufacture of masks used in the lithography process.</span></div><div class="line" id="001443"><span class="nick" style="color:#8dd3c7"><a href="#001443" label="[00:14:43]">&lt;xentrac&gt;</a></span><span class="message">also there is a lot of snowden stuff that suggests that kind of thing is still going on</span></div><div class="line" id="001446"><span class="nick" style="color:#8dd3c7"><a href="#001446" label="[00:14:46]">&lt;xentrac&gt;</a></span><span class="message">also of course</span></div><div class="line" id="001448"><span class="nick" style="color:#8dd3c7"><a href="#001448" label="[00:14:48]">&lt;xentrac&gt;</a></span><span class="message">crypto ag</span></div><div class="line" id="001533"><span class="nick" style="color:#389600"><a href="#001533" label="[00:15:33]">&lt;oriansj&gt;</a></span><span class="message">And humans can only manually manufacture lithography masks by hand down to the 3 micrometer process using Rubylith</span></div><div class="line" id="001632"><span class="nick" style="color:#389600"><a href="#001632" label="[00:16:32]">&lt;oriansj&gt;</a></span><span class="message">after that everything was done in software</span></div><div class="line" id="001914"><span class="nick" style="color:#8dd3c7"><a href="#001914" label="[00:19:14]">&lt;xentrac&gt;</a></span><span class="message">i think that's more an issue of layout complexity and improved software than of process incompatibilities</span></div><div class="line" id="005016"><span class="nick" style="color:#6b8072"><a href="#005016" label="[00:50:16]">&lt;Hagfish&gt;</a></span><span class="message">i'm wondering if the nearest equivalent to DDC for compromised hardware is running the system you want inside a virtual machine on the hardware</span></div><div class="line" id="005112"><span class="nick" style="color:#6b8072"><a href="#005112" label="[00:51:12]">&lt;Hagfish&gt;</a></span><span class="message">the compromised hardware would need to be clever enough to spot the virtual machine and pass on a payload to it to make it target the actual calculation you were trying to subvert</span></div><div class="line" id="005149"><span class="nick" style="color:#6b8072"><a href="#005149" label="[00:51:49]">&lt;Hagfish&gt;</a></span><span class="message">of course, for many types of virtualisation, the hardware can see the software on the guest machine with hardly any indirection at all</span></div><div class="line" id="005217"><span class="nick" style="color:#6b8072"><a href="#005217" label="[00:52:17]">&lt;Hagfish&gt;</a></span><span class="message">but you could write a custom emulator (and custom operating system?) that the malicious hardware wouldn't know to expect</span></div><div class="line" id="005317"><span class="nick" style="color:#6b8072"><a href="#005317" label="[00:53:17]">&lt;Hagfish&gt;</a></span><span class="message">i'm sort of hoping that after sufficient number of levels of indirection, you eventually hit an information-theoretic limit about how much &quot;hidden&quot; code the malicious hardware would have to be hiding to drill through all the layers</span></div><div class="line" id="005435"><span class="nick" style="color:#6b8072"><a href="#005435" label="[00:54:35]">&lt;Hagfish&gt;</a></span><span class="message">another approach would be something like homomorphic encryption and/or splitting the process across multiple machines, so that no one machine has enough information to know how to exploit the actual operation you are trying to do</span></div><div class="line" id="005702"><span class="nick" style="color:#8dd3c7"><a href="#005702" label="[00:57:02]">&lt;xentrac&gt;</a></span><span class="message">yeah, FHE is hypothetically an extremely powerful primitive, but in this case I don't think you actually need oblivious computation</span></div><div class="line" id="005716"><span class="nick" style="color:#8dd3c7"><a href="#005716" label="[00:57:16]">&lt;xentrac&gt;</a></span><span class="message">because no secrets are involved</span></div><div class="line" id="005746"><span class="nick" style="color:#8dd3c7"><a href="#005746" label="[00:57:46]">&lt;xentrac&gt;</a></span><span class="message">it's sufficient that no one machine can execute any code incorrectly without being detected</span></div><div class="line" id="010635"><span class="nick" style="color:#389600"><a href="#010635" label="[01:06:35]">&lt;oriansj&gt;</a></span><span class="message">xentrac: I don't think Homomorphic encryption would directly help but it does provide a mechanism for untrusted computers to not know what they are computing. Assuming there isn't some secret shortcut baked into the encryption.</span></div><div class="line" id="010809"><span class="nick" style="color:#389600"><a href="#010809" label="[01:08:09]">&lt;oriansj&gt;</a></span><span class="message">hopefully the field of Verifiable computing might save us the trouble of figuring out that solution.</span></div><div class="line" id="010931"><span class="nick" style="color:#389600"><a href="#010931" label="[01:09:31]">&lt;oriansj&gt;</a></span><span class="message">but personally I think it is more fun to explore the designing our own hardware, even if it isn't a huge advantage in any terms besides more control and no hardware secrets.</span></div><div class="line" id="011218"><span class="nick" style="color:#8dd3c7"><a href="#011218" label="[01:12:18]">&lt;xentrac&gt;</a></span><span class="message">at some point FHE might help, but it isn't immediately obvious to me how</span></div><div class="line" id="011324"><span class="nick" style="color:#8dd3c7"><a href="#011324" label="[01:13:24]">&lt;xentrac&gt;</a></span><span class="message">I think &quot;a mechanism for untrusted computers to not know what they are computing&quot; sells it short, though; I don't think exactly how is really on topic, but I'd be glad to explain if you'd like</span></div><div class="line" id="013053"><span class="nick" style="color:#389600"><a href="#013053" label="[01:30:53]">&lt;oriansj&gt;</a></span><span class="message">xentrac: the how of Fully Homomorphic encryption? nope but some alternate possible solutions to making hardware compromises easier to detect or even more complex to implement would be helpful.</span></div><div class="line" id="014134"><span class="nick" style="color:#8dd3c7"><a href="#014134" label="[01:41:34]">&lt;xentrac&gt;</a></span><span class="message">(not how to do FHE, but how that description sells it short)</span></div><div class="line" id="014247"><span class="nick" style="color:#8dd3c7"><a href="#014247" label="[01:42:47]">&lt;xentrac&gt;</a></span><span class="message">making hardware compromises easier to detect, well, right now we have the problem that you need an electron microscope and the willingness to destroy your hardware in order to detect them</span></div><div class="line" id="014329"><span class="nick" style="color:#8dd3c7"><a href="#014329" label="[01:43:29]">&lt;xentrac&gt;</a></span><span class="message">I think the solution to that is matter compilers, but maybe 02021 is too early for that to be a useful answer</span></div><div class="line" id="014344"><span class="nick" style="color:#389600"><a href="#014344" label="[01:43:44]">&lt;oriansj&gt;</a></span><span class="message">circuits on glass or transparent plastic might be useful</span></div><div class="line" id="014700"><span class="nick" style="color:#389600"><a href="#014700" label="[01:47:00]">&lt;oriansj&gt;</a></span><span class="message">although 50Mhz might be too slow for certain operations</span></div><div class="line" id="020107"><span class="nick" style="color:#8dd3c7"><a href="#020107" label="[02:01:07]">&lt;xentrac&gt;</a></span><span class="message">50MHz is a lot better than the Pineapple One's 0.5 MHz</span></div><div class="line" id="020306"><span class="nick" style="color:#8dd3c7"><a href="#020306" label="[02:03:06]">&lt;xentrac&gt;</a></span><span class="message">matter compilers will be a real paradigm shift though.  transistor density increases not only because of Dennard scaling, which is already dead, but because every square millimeter of silicon patterned and etched and doped as finely as we can manage is fucking expensive</span></div><div class="line" id="020555"><span class="nick" style="color:#8dd3c7"><a href="#020555" label="[02:05:55]">&lt;xentrac&gt;</a></span><span class="message">so for example the Graviton2 has 30 billion transistors using a &quot;7nm&quot; process.  if they made it using a 32 nm process from 02009 it would be just as fast but it would be 25 times as big and 25 times as expensive</span></div><div class="line" id="020559"><span class="nick" style="color:#8dd3c7"><a href="#020559" label="[02:05:59]">&lt;xentrac&gt;</a></span><span class="message">but a lot easier to cool</span></div><div class="line" id="020830"><span class="nick" style="color:#389600"><a href="#020830" label="[02:08:30]">&lt;oriansj&gt;</a></span><span class="message">doubt it would have the same clock speed though... and probably consume a great deal more power</span></div><div class="line" id="020946"><span class="nick" style="color:#8dd3c7"><a href="#020946" label="[02:09:46]">&lt;xentrac&gt;</a></span><span class="message">no, it would consume almost the same amount of power, and it could be clocked almost exactly as fast; Dennard scaling came to an end before that</span></div><div class="line" id="021002"><span class="nick" style="color:#8dd3c7"><a href="#021002" label="[02:10:02]">&lt;xentrac&gt;</a></span><span class="message">you might have to redesign it with a larger number of distinct clock domains, though</span></div><div class="line" id="021103"><span class="nick" style="color:#8dd3c7"><a href="#021103" label="[02:11:03]">&lt;xentrac&gt;</a></span><span class="message">by contrast, a human brain has tens of trillions of dendritic spines amplifying signals to about 86 billion neurons</span></div><div class="line" id="021233"><span class="nick" style="color:#8dd3c7"><a href="#021233" label="[02:12:33]">&lt;xentrac&gt;</a></span><span class="message">and it can do things the Graviton2 can't yet, despite running 30 million times slower</span></div><div class="line" id="021326"><span class="nick" style="color:#8dd3c7"><a href="#021326" label="[02:13:26]">&lt;xentrac&gt;</a></span><span class="message">the reason the Graviton2 and other modern chips are made so small is that it reduces their cost</span></div><div class="line" id="021458"><span class="nick" style="color:#8dd3c7"><a href="#021458" label="[02:14:58]">&lt;xentrac&gt;</a></span><span class="message">because we're still manufacturing them with engineering processes that are merely unbelievably polished versions of the engineering processes that designed WWII radars</span></div><div class="line" id="021550"><span class="nick" style="color:#8dd3c7"><a href="#021550" label="[02:15:50]">&lt;xentrac&gt;</a></span><span class="message">well, I should say &quot;manufactured WWII radars&quot;</span></div><div class="line" id="021710"><span class="nick" style="color:#8dd3c7"><a href="#021710" label="[02:17:10]">&lt;xentrac&gt;</a></span><span class="message">part families, numerical analysis, precision, tolerances, simplicity, bearings, lubrication, purity, capital investment, traceable metrology, elimination of variability, and so on</span></div><div class="line" id="021830"><span class="nick" style="color:#8dd3c7"><a href="#021830" label="[02:18:30]">&lt;xentrac&gt;</a></span><span class="message">yields!</span></div><div class="line" id="021847"><span class="nick" style="color:#8dd3c7"><a href="#021847" label="[02:18:47]">&lt;xentrac&gt;</a></span><span class="message">none of that has anything to do with how human brains, mahogany trees, or lichens are manufactured.  except yields, I guess.  nobody wants their children to die</span></div><div class="line" id="022138"><span class="nick" style="color:#8dd3c7"><a href="#022138" label="[02:21:38]">&lt;xentrac&gt;</a></span><span class="message">suppose you have a matter compiler that can only produce transistors with a 10μm gate length, like chips in 01971, so your logic gates have 20 ns response time like a CD4000, or worse, like 50 ns, but you can produce as many of them as you want.</span></div><div class="line" id="022209"><span class="nick" style="color:#8dd3c7"><a href="#022209" label="[02:22:09]">&lt;xentrac&gt;</a></span><span class="message">and let's say these transistors and their associated wiring are 30μm × 30μm × 30μm.</span></div><div class="line" id="022255"><span class="nick" style="color:#8dd3c7"><a href="#022255" label="[02:22:55]">&lt;xentrac&gt;</a></span><span class="message">what would you do with them?</span></div><div class="line" id="022330"><span class="nick" style="color:#8dd3c7"><a href="#022330" label="[02:23:30]">&lt;xentrac&gt;</a></span><span class="message">consider compiling a cubic meter of sand or granite into a cubic meter of this lame computronium</span></div><div class="line" id="022434"><span class="nick" style="color:#8dd3c7"><a href="#022434" label="[02:24:34]">&lt;xentrac&gt;</a></span><span class="message">this gives you 37 trillion transistors, 1000 times as many as the Graviton2, but only capable of running at maybe 1MHz</span></div><div class="line" id="022519"><span class="nick" style="color:#8dd3c7"><a href="#022519" label="[02:25:19]">&lt;xentrac&gt;</a></span><span class="message">and — this is the crucial part — for the price of a cubic meter of sand plus a few kilowatt-hours of energy</span></div><div class="line" id="022740"><span class="nick" style="color:#8dd3c7"><a href="#022740" label="[02:27:40]">&lt;xentrac&gt;</a></span><span class="message">(actually I just checked Intersil's datasheet and the CD4000's propagation delay is 60ns)</span></div><div class="line" id="022953"><span class="nick" style="color:#8dd3c7"><a href="#022953" label="[02:29:53]">&lt;xentrac&gt;</a></span><span class="message">the problem becomes one of how to get any use at all out of the unlimited supply of free, slow transistors, rather than how to jam as many of them as possible into extremely expensive real estate and get them to run as fast as possible</span></div><div class="line" id="023322"><span class="nick" style="color:#389600"><a href="#023322" label="[02:33:22]">&lt;oriansj&gt;</a></span><span class="message">xentrac: not exactly helpful for the root of trust problem we have but I can understand the interest in such a technology. Especially when you consider the grey-goo explosion in productive capacity properties it contains.</span></div><div class="line" id="023440"><span class="nick" style="color:#8dd3c7"><a href="#023440" label="[02:34:40]">&lt;xentrac&gt;</a></span><span class="message">it's not clear how to solve the root-of-trust problem in that environment at all; the explosion in productive capacity means that everything around you could be a fake designed to trick you, like the TikTok &quot;everything is cake&quot; memes</span></div><div class="line" id="023515"><span class="nick" style="color:#8dd3c7"><a href="#023515" label="[02:35:15]">&lt;xentrac&gt;</a></span><span class="message">but at least it's not centralized like TSMC? :)</span></div><div class="line" id="024806"><span class="nick" style="color:#80b1d3"><a href="#024806" label="[02:48:06]">&lt;NieDzejkob&gt;</a></span><span class="message">welp, managed to crash miniforth before I could bootstrap to the point where I save stuff to disk</span></div><div class="line" id="024822"><span class="nick">***</span><span class="message notice">terpri is now known as robin</span></div><div class="line" id="024844"><span class="nick" style="color:#8dd3c7"><a href="#024844" label="[02:48:44]">&lt;xentrac&gt;</a></span><span class="message">:(</span></div><div class="line" id="024848"><span class="nick" style="color:#80b1d3"><a href="#024848" label="[02:48:48]">&lt;NieDzejkob&gt;</a></span><span class="message">I got analog screenshots on my phone though, so it's just a matter of retyping about 2kb tomorrow</span></div><div class="line" id="024855"><span class="nick" style="color:#8dd3c7"><a href="#024855" label="[02:48:55]">&lt;xentrac&gt;</a></span><span class="message">fantastic!</span></div><div class="line" id="024935"><span class="nick" style="color:#8dd3c7"><a href="#024935" label="[02:49:35]">&lt;xentrac&gt;</a></span><span class="message">yeah, having some kind of interrupt-into-monitor functionality is really helpful for that kind of thing</span></div><div class="line" id="024952"><span class="nick" style="color:#8dd3c7"><a href="#024952" label="[02:49:52]">&lt;xentrac&gt;</a></span><span class="message">(and ideally invoking it on certain interrupts)</span></div><div class="line" id="025033"><span class="nick" style="color:#80b1d3"><a href="#025033" label="[02:50:33]">&lt;NieDzejkob&gt;</a></span><span class="message">I wrote a nice assembler and used it to make some primitives - branches and comparisons</span></div><div class="line" id="025132"><span class="nick" style="color:#8dd3c7"><a href="#025132" label="[02:51:32]">&lt;xentrac&gt;</a></span><span class="message">nice!</span></div><div class="line" id="025215"><span class="nick" style="color:#8dd3c7"><a href="#025215" label="[02:52:15]">&lt;xentrac&gt;</a></span><span class="message">is this on an old PC from the attic?</span></div><div class="line" id="025217"><span class="nick" style="color:#80b1d3"><a href="#025217" label="[02:52:17]">&lt;NieDzejkob&gt;</a></span><span class="message">then I wrote IF, THEN, ELSE, BEGIN, AGAIN, UNTIL... and when I tried testing the looping words I accidentally underflowed the stack</span></div><div class="line" id="025306"><span class="nick" style="color:#80b1d3"><a href="#025306" label="[02:53:06]">&lt;NieDzejkob&gt;</a></span><span class="message">yeah, it's got like, a 800 MHz VIA processor and 128 megs of RAM</span></div><div class="line" id="025344"><span class="nick" style="color:#8dd3c7"><a href="#025344" label="[02:53:44]">&lt;xentrac&gt;</a></span><span class="message">ah, so it can do 386 protected mode, but it's initially running an IBM BIOS?</span></div><div class="line" id="025427"><span class="nick" style="color:#8dd3c7"><a href="#025427" label="[02:54:27]">&lt;xentrac&gt;</a></span><span class="message">in 16-bit mode</span></div><div class="line" id="025444"><span class="nick" style="color:#80b1d3"><a href="#025444" label="[02:54:44]">&lt;NieDzejkob&gt;</a></span><span class="message">: foo begin dup u. 1 - 0= until ; 5 foo &lt;- spot the mistake</span></div><div class="line" id="025445"><span class="nick" style="color:#8dd3c7"><a href="#025445" label="[02:54:45]">&lt;xentrac&gt;</a></span><span class="message">I mean, not an actual IBM BIOS, but like a clone from Phoenix or AMI or something</span></div><div class="line" id="025454"><span class="nick" style="color:#80b1d3"><a href="#025454" label="[02:54:54]">&lt;NieDzejkob&gt;</a></span><span class="message">yeah, that's right</span></div><div class="line" id="025502"><span class="nick" style="color:#80b1d3"><a href="#025502" label="[02:55:02]">&lt;NieDzejkob&gt;</a></span><span class="message">no uefi</span></div><div class="line" id="025521"><span class="nick" style="color:#8dd3c7"><a href="#025521" label="[02:55:21]">&lt;xentrac&gt;</a></span><span class="message">but also no openfirmware</span></div><div class="line" id="025558"><span class="nick" style="color:#8dd3c7"><a href="#025558" label="[02:55:58]">&lt;xentrac&gt;</a></span><span class="message">and no page faults</span></div><div class="line" id="025618"><span class="nick" style="color:#80b1d3"><a href="#025618" label="[02:56:18]">&lt;NieDzejkob&gt;</a></span><span class="message">ooh, that bios that's forth inside. no.</span></div><div class="line" id="025625"><span class="nick" style="color:#8dd3c7"><a href="#025625" label="[02:56:25]">&lt;xentrac&gt;</a></span><span class="message">the initial monitor doesn't have to be super fast</span></div><div class="line" id="025654"><span class="nick" style="color:#80b1d3"><a href="#025654" label="[02:56:54]">&lt;NieDzejkob&gt;</a></span><span class="message">I'm pretty sure it supports paging, I used to run linux on that thing</span></div><div class="line" id="025710"><span class="nick" style="color:#8dd3c7"><a href="#025710" label="[02:57:10]">&lt;xentrac&gt;</a></span><span class="message">right, but it's not enabled initially</span></div><div class="line" id="025725"><span class="nick" style="color:#8dd3c7"><a href="#025725" label="[02:57:25]">&lt;xentrac&gt;</a></span><span class="message">so you can't get interrupts out of a stack underflow</span></div><div class="line" id="025725"><span class="nick" style="color:#80b1d3"><a href="#025725" label="[02:57:25]">&lt;NieDzejkob&gt;</a></span><span class="message">hell, I looked up the southbridge manual and it has hardware video decoding</span></div><div class="line" id="025752"><span class="nick" style="color:#8dd3c7"><a href="#025752" label="[02:57:52]">&lt;xentrac&gt;</a></span><span class="message">maybe you could have a machine-code subroutine that checks the stack pointer, aborts to the forth prompt with an error message on stack underflow, and otherwise pops the stack and leaves it in ax or something?</span></div><div class="line" id="025901"><span class="nick" style="color:#8dd3c7"><a href="#025901" label="[02:59:01]">&lt;xentrac&gt;</a></span><span class="message">in a forth designed for speed you might not want that to be your only form ever of popping the operand stack, for speed reasons, but maybe for interactive bringup it would be a worthwhile tradeoff</span></div><div class="line" id="025911"><span class="nick" style="color:#8dd3c7"><a href="#025911" label="[02:59:11]">&lt;xentrac&gt;</a></span><span class="message">are you using si or something for the operand stack?</span></div><div class="line" id="025914"><span class="nick" style="color:#80b1d3"><a href="#025914" label="[02:59:14]">&lt;NieDzejkob&gt;</a></span><span class="message">it actually stopped after only a few lines of output, probably because it popped off some important code and overwrote it</span></div><div class="line" id="030004"><span class="nick" style="color:#8dd3c7"><a href="#030004" label="[03:00:04]">&lt;xentrac&gt;</a></span><span class="message">yeah</span></div><div class="line" id="030008"><span class="nick" style="color:#80b1d3"><a href="#030008" label="[03:00:08]">&lt;NieDzejkob&gt;</a></span><span class="message">sp is parameter stack, di is return stack</span></div><div class="line" id="030034"><span class="nick" style="color:#8dd3c7"><a href="#030034" label="[03:00:34]">&lt;xentrac&gt;</a></span><span class="message">interesting</span></div><div class="line" id="030052"><span class="nick" style="color:#80b1d3"><a href="#030052" label="[03:00:52]">&lt;NieDzejkob&gt;</a></span><span class="message">though, re: error message, you're overestimating the free space I have :P</span></div><div class="line" id="030153"><span class="nick" style="color:#80b1d3"><a href="#030153" label="[03:01:53]">&lt;NieDzejkob&gt;</a></span><span class="message">I actually finished my blogpost about the internals yesterday, perhaps you'll find it interesting: <a rel="nofollow" href="https://niedzejkob.p4.team/bootstrap/miniforth">https://niedzejkob.p4.team/bootstrap/miniforth</a> </span></div><div class="line" id="030242"><span class="nick" style="color:#80b1d3"><a href="#030242" label="[03:02:42]">&lt;NieDzejkob&gt;</a></span><span class="message">anyway, I don't think fitting in an underflow check would have a big ROI</span></div><div class="line" id="030400"><span class="nick" style="color:#80b1d3"><a href="#030400" label="[03:04:00]">&lt;NieDzejkob&gt;</a></span><span class="message">I didn't really even need loops or conditions to write stuff to disk, I guess you could say I flew too close to the sun :P</span></div><div class="line" id="031159"><span class="nick" style="color:#8dd3c7"><a href="#031159" label="[03:11:59]">&lt;xentrac&gt;</a></span><span class="message">haha</span></div><div class="line" id="031226"><span class="nick" style="color:#8dd3c7"><a href="#031226" label="[03:12:26]">&lt;xentrac&gt;</a></span><span class="message">this probably won't be the last time you crash with a stack overflow</span></div><div class="line" id="031242"><span class="nick" style="color:#8dd3c7"><a href="#031242" label="[03:12:42]">&lt;xentrac&gt;</a></span><span class="message">or underflow, but it's the same problem</span></div><div class="line" id="031412"><span class="nick" style="color:#8dd3c7"><a href="#031412" label="[03:14:12]">&lt;xentrac&gt;</a></span><span class="message">btw you can probably save yourself a bunch of code space by keeping the top of the operand stack in ax instead of in memory, though maybe you've already done that and just didn't put that in this post</span></div><div class="line" id="031438"><span class="nick" style="color:#8dd3c7"><a href="#031438" label="[03:14:38]">&lt;xentrac&gt;</a></span><span class="message">oh, you are, you're just using bx instead of ax</span></div><div class="line" id="031728"><span class="nick" style="color:#80b1d3"><a href="#031728" label="[03:17:28]">&lt;NieDzejkob&gt;</a></span><span class="message">I did say that, but perhaps in a not very visible place</span></div><div class="line" id="031754"><span class="nick" style="color:#8dd3c7"><a href="#031754" label="[03:17:54]">&lt;xentrac&gt;</a></span><span class="message">i just misread</span></div><div class="line" id="031804"><span class="nick" style="color:#80b1d3"><a href="#031804" label="[03:18:04]">&lt;NieDzejkob&gt;</a></span><span class="message">or you're still reading and you've just seen one of the intermediate snippets</span></div><div class="line" id="031849"><span class="nick" style="color:#8dd3c7"><a href="#031849" label="[03:18:49]">&lt;xentrac&gt;</a></span><span class="message">do you know about INT $1B?</span></div><div class="line" id="031918"><span class="nick" style="color:#80b1d3"><a href="#031918" label="[03:19:18]">&lt;NieDzejkob&gt;</a></span><span class="message">yeah, I don't think this will be my last crash, my strategy is to just make unscheduled reboots painless</span></div><div class="line" id="032012"><span class="nick" style="color:#80b1d3"><a href="#032012" label="[03:20:12]">&lt;NieDzejkob&gt;</a></span><span class="message">ah, ctrl+break. yeah, I do</span></div><div class="line" id="032126"><span class="nick" style="color:#80b1d3"><a href="#032126" label="[03:21:26]">&lt;NieDzejkob&gt;</a></span><span class="message">at least infinite loops that don't break the stack could be recoverable that way</span></div><div class="line" id="032255"><span class="nick" style="color:#80b1d3"><a href="#032255" label="[03:22:55]">&lt;NieDzejkob&gt;</a></span><span class="message">hmm, I could just point the handler at ReadLine and put an sti there, I think?</span></div><div class="line" id="032626"><span class="nick" style="color:#8dd3c7"><a href="#032626" label="[03:26:26]">&lt;xentrac&gt;</a></span><span class="message">i think that's right.  you might need to twiddle sp a little</span></div><div class="line" id="033125"><span class="nick" style="color:#8dd3c7"><a href="#033125" label="[03:31:25]">&lt;xentrac&gt;</a></span><span class="message">also do you know about the single-byte int 3 instruction debug.com uses for single-stepping?</span></div><div class="line" id="033326"><span class="nick" style="color:#80b1d3"><a href="#033326" label="[03:33:26]">&lt;NieDzejkob&gt;</a></span><span class="message">yup</span></div><div class="line" id="033355"><span class="nick" style="color:#80b1d3"><a href="#033355" label="[03:33:55]">&lt;NieDzejkob&gt;</a></span><span class="message">twiddle sp? I think I can leave that to the user</span></div><div class="line" id="033401"><span class="nick" style="color:#8dd3c7"><a href="#033401" label="[03:34:01]">&lt;xentrac&gt;</a></span><span class="message">yeah, possibly</span></div><div class="line" id="033420"><span class="nick" style="color:#8dd3c7"><a href="#033420" label="[03:34:20]">&lt;xentrac&gt;</a></span><span class="message">might be handy to initialize ram with 0xcc to provoke an interrupt upon a jump into hyperspace</span></div><div class="line" id="033441"><span class="nick" style="color:#80b1d3"><a href="#033441" label="[03:34:41]">&lt;NieDzejkob&gt;</a></span><span class="message">hyperspace :D</span></div><div class="line" id="033611"><span class="nick" style="color:#8dd3c7"><a href="#033611" label="[03:36:11]">&lt;xentrac&gt;</a></span><span class="message">so that you get a prompt before the machine state gets mangled too badly</span></div><div class="line" id="035012"><span class="nick" style="color:#8dd3c7"><a href="#035012" label="[03:50:12]">&lt;xentrac&gt;</a></span><span class="message">you know, NieDzejkob, these interrupts just gave me an evil though</span></div><div class="line" id="035014"><span class="nick" style="color:#8dd3c7"><a href="#035014" label="[03:50:14]">&lt;xentrac&gt;</a></span><span class="message">t</span></div><div class="line" id="035053"><span class="nick" style="color:#80b1d3"><a href="#035053" label="[03:50:53]">&lt;NieDzejkob&gt;</a></span><span class="message">yeah?</span></div><div class="line" id="035136"><span class="nick" style="color:#8dd3c7"><a href="#035136" label="[03:51:36]">&lt;xentrac&gt;</a></span><span class="message">a call instruction to a literal address is 3 bytes, but int $3 is only 1 byte, so if you have a subroutine you call 10 times, you can save 20 bytes of code by putting its address at the interrupt 3 vector</span></div><div class="line" id="035239"><span class="nick" style="color:#8dd3c7"><a href="#035239" label="[03:52:39]">&lt;xentrac&gt;</a></span><span class="message">except you also have to put its address there of course, and it has to return with an iret instead of a ret (still 1 byte)</span></div><div class="line" id="035307"><span class="nick" style="color:#8dd3c7"><a href="#035307" label="[03:53:07]">&lt;xentrac&gt;</a></span><span class="message">even the other interrupts like 0x20, 0x21, 0x22, and so on can be invoked with only 2 bytes instead of 3</span></div><div class="line" id="035431"><span class="nick" style="color:#80b1d3"><a href="#035431" label="[03:54:31]">&lt;NieDzejkob&gt;</a></span><span class="message">the crossover point seems to be 5 calls</span></div><div class="line" id="035650"><span class="nick" style="color:#8dd3c7"><a href="#035650" label="[03:56:50]">&lt;xentrac&gt;</a></span><span class="message">also, if you put your operand stack at si instead of sp, you can still pop from it with a 1-byte instruction (although as I said maybe you want to check for underflow), but pushing then requires 4 bytes; vice versa if you use di instead</span></div><div class="line" id="035713"><span class="nick" style="color:#80b1d3"><a href="#035713" label="[03:57:13]">&lt;NieDzejkob&gt;</a></span><span class="message">my most called routine, PutChar, is only called 4 times</span></div><div class="line" id="035733"><span class="nick" style="color:#8dd3c7"><a href="#035733" label="[03:57:33]">&lt;xentrac&gt;</a></span><span class="message">but maybe you could use the int3 trick to do pushing (or popping) and make them each just 1 byte</span></div><div class="line" id="035845"><span class="nick" style="color:#80b1d3"><a href="#035845" label="[03:58:45]">&lt;NieDzejkob&gt;</a></span><span class="message">I don't get why you'd want to change it to not use sp for operand stack</span></div><div class="line" id="035900"><span class="nick" style="color:#8dd3c7"><a href="#035900" label="[03:59:00]">&lt;xentrac&gt;</a></span><span class="message">so you can use sp for the return stack</span></div><div class="line" id="035953"><span class="nick" style="color:#80b1d3"><a href="#035953" label="[03:59:53]">&lt;NieDzejkob&gt;</a></span><span class="message">but the return stack is used, like, twice</span></div><div class="line" id="040017"><span class="nick" style="color:#80b1d3"><a href="#040017" label="[04:00:17]">&lt;NieDzejkob&gt;</a></span><span class="message">literally only DOCOL, EXIT, &gt;R and R&gt;</span></div><div class="line" id="040229"><span class="nick" style="color:#8dd3c7"><a href="#040229" label="[04:02:29]">&lt;xentrac&gt;</a></span><span class="message">yeah, it would only make sense if you were remodeling it into a subroutine-threaded forth, which gets rid of NEXT</span></div><div class="line" id="040235"><span class="nick" style="color:#8dd3c7"><a href="#040235" label="[04:02:35]">&lt;xentrac&gt;</a></span><span class="message">but might not pay off</span></div><div class="line" id="040322"><span class="nick" style="color:#8dd3c7"><a href="#040322" label="[04:03:22]">&lt;xentrac&gt;</a></span><span class="message">so maybe it's a dumb idea, I don't know</span></div><div class="line" id="040538"><span class="nick" style="color:#8dd3c7"><a href="#040538" label="[04:05:38]">&lt;xentrac&gt;</a></span><span class="message">it must be frustrating to have put so much effort into writing such an excellent explanation of miniforth as the one you linked above and then have me only dimly understand it and throw out a bunch of ideas about it half of which are obviously wrong :)</span></div><div class="line" id="040718"><span class="nick" style="color:#8dd3c7"><a href="#040718" label="[04:07:18]">&lt;xentrac&gt;</a></span><span class="message">eliminating NEXT might not save as much space as I'd naively hope since it doesn't eliminate the following dictionary entry</span></div><div class="line" id="040721"><span class="nick" style="color:#389600"><a href="#040721" label="[04:07:21]">&lt;oriansj&gt;</a></span><span class="message">NieDzejkob: I think I have an old IBM 5150 which might be of some use to you</span></div><div class="line" id="040826"><span class="nick" style="color:#80b1d3"><a href="#040826" label="[04:08:26]">&lt;NieDzejkob&gt;</a></span><span class="message">xentrac: no, it's actually a pretty interesting idea</span></div><div class="line" id="041117"><span class="nick" style="color:#80b1d3"><a href="#041117" label="[04:11:17]">&lt;NieDzejkob&gt;</a></span><span class="message">I don't think it will actually save bytes, but I'll have to think more about it when I'm more awake</span></div><div class="line" id="041213"><span class="nick" style="color:#8dd3c7"><a href="#041213" label="[04:12:13]">&lt;xentrac&gt;</a></span><span class="message">if it was possible to get the per-word overhead low enough to eliminate the decompressor, that might help</span></div><div class="line" id="041239"><span class="nick" style="color:#80b1d3"><a href="#041239" label="[04:12:39]">&lt;NieDzejkob&gt;</a></span><span class="message">oriansj: a 5150 sounds like a great thing to have. I'm not sure I would actually have a good use for it, though</span></div><div class="line" id="041246"><span class="nick" style="color:#8dd3c7"><a href="#041246" label="[04:12:46]">&lt;xentrac&gt;</a></span><span class="message">glad the ideas are enjoyable!</span></div><div class="line" id="041530"><span class="nick" style="color:#80b1d3"><a href="#041530" label="[04:15:30]">&lt;NieDzejkob&gt;</a></span><span class="message">I mean, the compression has a net positive effect</span></div><div class="line" id="041647"><span class="nick" style="color:#80b1d3"><a href="#041647" label="[04:16:47]">&lt;NieDzejkob&gt;</a></span><span class="message">just realized: pushing and popping with lodsw and int3 won't let you control the register into which you pop</span></div><div class="line" id="041711"><span class="nick" style="color:#8dd3c7"><a href="#041711" label="[04:17:11]">&lt;xentrac&gt;</a></span><span class="message">right, of course the compression has a net positive effect!  but that's in part because NEXT is 3 bytes instead of 1</span></div><div class="line" id="041731"><span class="nick" style="color:#8dd3c7"><a href="#041731" label="[04:17:31]">&lt;xentrac&gt;</a></span><span class="message">right, it would always be ax with lodsw or stosw</span></div><div class="line" id="042227"><span class="nick" style="color:#80b1d3"><a href="#042227" label="[04:22:27]">&lt;NieDzejkob&gt;</a></span><span class="message">the compressor costs 35 bytes; if next were 1 byte, the savings of the compression would be very close to neutral</span></div><div class="line" id="042308"><span class="nick" style="color:#8dd3c7"><a href="#042308" label="[04:23:08]">&lt;xentrac&gt;</a></span><span class="message">another trick I've sometimes found useful for squeezing down code is fallthrough (multiple entry points, kind of like you were doing with db 0x3c), which pretty much requires segregating the words' names from their code</span></div><div class="line" id="042544"><span class="nick" style="color:#8dd3c7"><a href="#042544" label="[04:25:44]">&lt;xentrac&gt;</a></span><span class="message">so for example C! could be placed immediately before DROP, but instead of ending with NEXT, execution would just continue on into DROP, thus saving a NEXT and a duplicated POP BX</span></div><div class="line" id="042551"><span class="nick" style="color:#8dd3c7"><a href="#042551" label="[04:25:51]">&lt;xentrac&gt;</a></span><span class="message">(or LODSW or whatever)</span></div><div class="line" id="051214"><span class="nick" style="color:#6d2462"><a href="#051214" label="[05:12:14]">&lt;siraben[m]&gt;</a></span><span class="message">NieDzejkob: nice post!</span></div><div class="line" id="061352"><span class="nick" style="color:#8dd3c7"><a href="#061352" label="[06:13:52]">&lt;xentrac&gt;</a></span><span class="message">NieDzejkob: my server died, I may have missed it if you said anything</span></div><div class="line" id="102038"><span class="nick" style="color:#80b1d3"><a href="#102038" label="[10:20:38]">&lt;NieDzejkob&gt;</a></span><span class="message">haven't said anything. Aren't there channel logs, though?</span></div><div class="line" id="120419"><span class="nick" style="color:#234e69"><a href="#120419" label="[12:04:19]">&lt;siraben&gt;</a></span><span class="message">NieDzejkob: there are public logs check /topic</span></div><div class="line" id="194955"><span class="nick">***</span><span class="message notice">terpri_ is now known as robin</span></div><div class="line" id="203443"><span class="nick" style="color:#389600"><a href="#203443" label="[20:34:43]">&lt;oriansj&gt;</a></span><span class="message">rekado_: please apply this patch <a rel="nofollow" href="https://paste.debian.net/1200900/">https://paste.debian.net/1200900/</a>  to <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/guix/bootstrappable.git/">https://git.savannah.gnu.org/cgit/guix/bootstrappable.git/</a>  as I do not have access needed to update</span></div><div class="line" id="204156"><span class="nick" style="color:#389600"><a href="#204156" label="[20:41:56]">&lt;oriansj&gt;</a></span><span class="message">civodul would you be able to help with this?</span></div><div class="line" id="210457"><span class="nick" style="color:#6c3d55"><a href="#210457" label="[21:04:57]">&lt;stikonas&gt;</a></span><span class="message">oriansj: hmm, I was not able to compile meslibc from mes-m2 included in stage0-posix...</span></div><div class="line" id="210511"><span class="nick" style="color:#6c3d55"><a href="#210511" label="[21:05:11]">&lt;stikonas&gt;</a></span><span class="message">strangely it worked when building mes that is currently used in live-bootstrap</span></div><div class="line" id="212900"><span class="nick" style="color:#6c3d55"><a href="#212900" label="[21:29:00]">&lt;stikonas&gt;</a></span><span class="message">argh, I'm probably on the wrong version of nyacc</span></div><div class="line" id="213315"><span class="nick" style="color:#6c3d55"><a href="#213315" label="[21:33:15]">&lt;stikonas&gt;</a></span><span class="message">mixed up 1.02.0 and 1.00.2</span></div><div class="line" id="214004"><span class="nick" style="color:#389600"><a href="#214004" label="[21:40:04]">&lt;oriansj&gt;</a></span><span class="message">stikonas: mes-m2 now embeds a version of nyacc that works with the mescc included</span></div><div class="line" id="214104"><span class="nick" style="color:#6c3d55"><a href="#214104" label="[21:41:04]">&lt;stikonas&gt;</a></span><span class="message">oh I see...</span></div><div class="line" id="214130"><span class="nick" style="color:#389600"><a href="#214130" label="[21:41:30]">&lt;oriansj&gt;</a></span><span class="message">mes-m2 is designed to be a one stop shop for getting a running copy of mescc</span></div><div class="line" id="214229"><span class="nick" style="color:#389600"><a href="#214229" label="[21:42:29]">&lt;oriansj&gt;</a></span><span class="message">as I snapshot a version of mescc that works with mes-m2 and a version of myacc that works with both mes-m2 and the snapshot of mescc</span></div><div class="line" id="214252"><span class="nick" style="color:#6c3d55"><a href="#214252" label="[21:42:52]">&lt;stikonas&gt;</a></span><span class="message">well, I was incorrectly overriding GUILE_LOAD_PATH to point to incorrect nyacc</span></div><div class="line" id="214312"><span class="nick" style="color:#6c3d55"><a href="#214312" label="[21:43:12]">&lt;stikonas&gt;</a></span><span class="message">although, it worked till quite late, most files compiled, until qsort.c...</span></div><div class="line" id="214319"><span class="nick" style="color:#6c3d55"><a href="#214319" label="[21:43:19]">&lt;stikonas&gt;</a></span><span class="message">anyway, I'll try embedded copy</span></div><div class="line" id="214438"><span class="nick" style="color:#389600"><a href="#214438" label="[21:44:38]">&lt;oriansj&gt;</a></span><span class="message">it should also include the mes libc files as well which will be needed for bootstrapping TCC (assuming I didn't miss anything)</span></div><div class="line" id="215227"><span class="nick" style="color:#80b1d3"><a href="#215227" label="[21:52:27]">&lt;NieDzejkob&gt;</a></span><span class="message">welp, forgot to preserve SI across my int13 routine</span></div><div class="line" id="221358"><span class="nick" style="color:#6c3d55"><a href="#221358" label="[22:13:58]">&lt;stikonas&gt;</a></span><span class="message">TCC is another thing I should convert from submodule to tar...</span></div><div class="line" id="221838"><span class="nick" style="color:#6c3d55"><a href="#221838" label="[22:18:38]">&lt;stikonas&gt;</a></span><span class="message">hmm, no, I'm still getting some strange error</span></div><div class="line" id="221846"><span class="nick" style="color:#6c3d55"><a href="#221846" label="[22:18:46]">&lt;stikonas&gt;</a></span><span class="message">Backtrace:</span></div><div class="line" id="221847"><span class="nick" style="color:#6c3d55"><a href="#221847" label="[22:18:47]">&lt;stikonas&gt;</a></span><span class="message">  [c] (map f h . t)</span></div><div class="line" id="221849"><span class="nick" style="color:#6c3d55"><a href="#221849" label="[22:18:49]">&lt;stikonas&gt;</a></span><span class="message">unhandled exception: unbound-variable: (abort)</span></div><div class="line" id="222011"><span class="nick" style="color:#6c3d55"><a href="#222011" label="[22:20:11]">&lt;stikonas&gt;</a></span><span class="message">strange...</span></div><div class="line" id="222033"><span class="nick" style="color:#d9d9d9"><a href="#222033" label="[22:20:33]">&lt;civodul&gt;</a></span><span class="message">oriansj: done!</span></div><div class="line" id="222127"><span class="nick" style="color:#6c3d55"><a href="#222127" label="[22:21:27]">&lt;stikonas&gt;</a></span><span class="message">something goes badly when building qsort.c</span></div><div class="line" id="230834"><span class="nick" style="color:#389600"><a href="#230834" label="[23:08:34]">&lt;oriansj&gt;</a></span><span class="message">thank you civodul</span></div><div class="line" id="230958"><span class="nick" style="color:#389600"><a href="#230958" label="[23:09:58]">&lt;oriansj&gt;</a></span><span class="message">stikonas: perhaps a mes libc change that I missed?</span></div><div class="line" id="231126"><span class="nick" style="color:#6c3d55"><a href="#231126" label="[23:11:26]">&lt;stikonas&gt;</a></span><span class="message">no idea, qsort.c files are identical... so I don't understand why it fails</span></div><div class="line" id="233412"><span class="nick" style="color:#389600"><a href="#233412" label="[23:34:12]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well what is the difference in the M1 output?</span></div><div class="line" id="233430"><span class="nick" style="color:#389600"><a href="#233430" label="[23:34:30]">&lt;oriansj&gt;</a></span><span class="message">as M2-Planet+MesCC both output M1</span></div><div class="line" id="233525"><span class="nick" style="color:#389600"><a href="#233525" label="[23:35:25]">&lt;oriansj&gt;</a></span><span class="message">so we need only look at the M1 files to see what changed but if the M1 files are the same, the DEFINE files might be different and be responsible for the change.</span></div><div class="line" id="233642"><span class="nick" style="color:#6c3d55"><a href="#233642" label="[23:36:42]">&lt;stikonas&gt;</a></span><span class="message">I don't think it outputs any M1 yet</span></div><div class="line" id="233743"><span class="nick" style="color:#389600"><a href="#233743" label="[23:37:43]">&lt;oriansj&gt;</a></span><span class="message">stikonas: not even with -c ?</span></div><div class="line" id="233807"><span class="nick" style="color:#6c3d55"><a href="#233807" label="[23:38:07]">&lt;stikonas&gt;</a></span><span class="message">no, we build all files with -c</span></div><div class="line" id="233816"><span class="nick" style="color:#6c3d55"><a href="#233816" label="[23:38:16]">&lt;stikonas&gt;</a></span><span class="message">it just starts printing that unbound varible error</span></div><div class="line" id="233825"><span class="nick" style="color:#6c3d55"><a href="#233825" label="[23:38:25]">&lt;stikonas&gt;</a></span><span class="message">and I don't see any qsort.o or qsort.s</span></div><div class="line" id="234017"><span class="nick" style="color:#6c3d55"><a href="#234017" label="[23:40:17]">&lt;stikonas&gt;</a></span><span class="message">this is what I'm running <a rel="nofollow" href="https://github.com/stikonas/live-bootstrap/tree/mes-m2">https://github.com/stikonas/live-bootstrap/tree/mes-m2</a> </span></div><div class="line" id="235158"><span class="nick" style="color:#389600"><a href="#235158" label="[23:51:58]">&lt;oriansj&gt;</a></span><span class="message">getting the same error too stikonas when i do: ./scripts/mescc --no-auto-compile -e main ${bindir}/mescc.scm -- -c -D HAVE_CONFIG_H=1 -I include -I include/linux/x86 lib/stdlib/qsort.c in mes-m2</span></div><div class="line" id="235330"><span class="nick" style="color:#389600"><a href="#235330" label="[23:53:30]">&lt;oriansj&gt;</a></span><span class="message">janneke: I could use your help</span></div><br /></div></body></html>