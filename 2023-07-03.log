<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-07-03.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000755"><span class="nick" style="color:#389600"><a href="#000755" label="[00:07:55]">&lt;muurkha&gt;</a></span><span class="message">a similar comment applies a fortiori with virtual memory mechanisms including segmentation and paging</span></div><div class="line" id="001746"><span class="nick" style="color:#389600"><a href="#001746" label="[00:17:46]">&lt;muurkha&gt;</a></span><span class="message">yes, 2 MB machines existed in 01990.  16 MiB machines existed, in fact, they were just expensive.  extrapolating, the US$40/MiB plateau lasted from about 01992 to about 01996, so in 01990 2 MiB would have been about US$80</span></div><div class="line" id="004737"><span class="nick" style="color:#8dd3c7"><a href="#004737" label="[00:47:37]">&lt;kerravon&gt;</a></span><span class="message">muurkha - sorry, had to deal with my baby. as you know, the S/3X0 doesn't have a hardware stack. But I don't see a problem in practice. You just point R13 (e.g.) to a big buffer (stack) and let it grow up whenever you enter a function</span></div><div class="line" id="010255"><span class="nick" style="color:#389600"><a href="#010255" label="[01:02:55]">&lt;muurkha&gt;</a></span><span class="message">I didn't know it didn't have a hardware stack; I've never written any 360/370/390/zSeries code</span></div><div class="line" id="010321"><span class="nick" style="color:#389600"><a href="#010321" label="[01:03:21]">&lt;muurkha&gt;</a></span><span class="message">correction: in 01990 2 MiB would have been about US$160</span></div><div class="line" id="010402"><span class="nick" style="color:#389600"><a href="#010402" label="[01:04:02]">&lt;muurkha&gt;</a></span><span class="message">how does interrupt handling work on the 370?</span></div><div class="line" id="011101"><span class="nick" style="color:#389600"><a href="#011101" label="[01:11:01]">&lt;muurkha&gt;</a></span><span class="message">things like the ARM3 had shadow registers</span></div><div class="line" id="012130"><span class="nick" style="color:#2e2a4a"><a href="#012130" label="[01:21:30]">&lt;oriansj&gt;</a></span><span class="message">if one wanted to radically change the world of technology, it would only take a half dozen names a few technical details</span></div><div class="line" id="012851"><span class="nick" style="color:#389600"><a href="#012851" label="[01:28:51]">&lt;muurkha&gt;</a></span><span class="message">it would only take what?</span></div><div class="line" id="012912"><span class="nick" style="color:#389600"><a href="#012912" label="[01:29:12]">&lt;muurkha&gt;</a></span><span class="message">kerravon: I did google how interrupt handling worked on the 370 but I keep finding things that don't answer the question</span></div><div class="line" id="013143"><span class="nick" style="color:#8dd3c7"><a href="#013143" label="[01:31:43]">&lt;kerravon&gt;</a></span><span class="message">muurkha - there is PSW that is loaded when there is an I/O address, and that can point to any address. I think it is only a little bit different from the x86. Note that I have a S/3X0 version of PDOS too</span></div><div class="line" id="013159"><span class="nick" style="color:#8dd3c7"><a href="#013159" label="[01:31:59]">&lt;kerravon&gt;</a></span><span class="message">and there is an emulator (Hercules) if you want to run your own mainframe</span></div><div class="line" id="013214"><span class="nick" style="color:#8dd3c7"><a href="#013214" label="[01:32:14]">&lt;kerravon&gt;</a></span><span class="message">including running MVS from the early 1980s</span></div><div class="line" id="013222"><span class="nick" style="color:#389600"><a href="#013222" label="[01:32:22]">&lt;muurkha&gt;</a></span><span class="message">kerravon: the PC gets stored in the PSW when there's an interrupt?</span></div><div class="line" id="013233"><span class="nick" style="color:#8dd3c7"><a href="#013233" label="[01:32:33]">&lt;kerravon&gt;</a></span><span class="message">and we have modern modifications since then</span></div><div class="line" id="013237"><span class="nick" style="color:#2e2a4a"><a href="#013237" label="[01:32:37]">&lt;oriansj&gt;</a></span><span class="message">Think commadore with Chuck Peddle, Jay Miner, Sophie Wilson, Richard Stallman and Jochen Liedtke; then you could have had the hurd on an ARM Amiga with a few tweaks to massively improve the resulting system. Release the software under the GPLv2 (or v3) (and the libraries under the LGPLv3) and get the free software community unified for free</span></div><div class="line" id="013257"><span class="nick" style="color:#389600"><a href="#013257" label="[01:32:57]">&lt;muurkha&gt;</a></span><span class="message">they'd probably kill each other</span></div><div class="line" id="013303"><span class="nick" style="color:#389600"><a href="#013303" label="[01:33:03]">&lt;muurkha&gt;</a></span><span class="message">who's Jay Miner?</span></div><div class="line" id="013316"><span class="nick" style="color:#8dd3c7"><a href="#013316" label="[01:33:16]">&lt;kerravon&gt;</a></span><span class="message">the hardware will store the old PSW before loading the new one</span></div><div class="line" id="013338"><span class="nick" style="color:#389600"><a href="#013338" label="[01:33:38]">&lt;muurkha&gt;</a></span><span class="message">kerravon: where, in like a shadow PSW?  is there a shadow PC or something too?</span></div><div class="line" id="013343"><span class="nick" style="color:#2e2a4a"><a href="#013343" label="[01:33:43]">&lt;oriansj&gt;</a></span><span class="message">muurkha: <a rel="nofollow" href="https://en.wikipedia.org/wiki/Jay_Miner">https://en.wikipedia.org/wiki/Jay_Miner</a>  the main engineer behind the amiga</span></div><div class="line" id="013347"><span class="nick" style="color:#389600"><a href="#013347" label="[01:33:47]">&lt;muurkha&gt;</a></span><span class="message">aha!</span></div><div class="line" id="013354"><span class="nick" style="color:#389600"><a href="#013354" label="[01:33:54]">&lt;muurkha&gt;</a></span><span class="message">I'm trying to figure out how it gets back to the code it was executing before the interrupt</span></div><div class="line" id="013438"><span class="nick" style="color:#8dd3c7"><a href="#013438" label="[01:34:38]">&lt;kerravon&gt;</a></span><span class="message">old I/O PSW is at a location in memory, and will be updated before the new I/O PSW is loaded</span></div><div class="line" id="013455"><span class="nick" style="color:#8dd3c7"><a href="#013455" label="[01:34:55]">&lt;kerravon&gt;</a></span><span class="message">there are 3 other pairs for different kinds of interrupts</span></div><div class="line" id="013654"><span class="nick" style="color:#2e2a4a"><a href="#013654" label="[01:36:54]">&lt;oriansj&gt;</a></span><span class="message">muurkha: getting cooperation would be a miracle but an ARM amiga with an L3 microkernel and a gnu userspace would have removed the need for Linux and enabled a much cleaner system than x86 ever could be</span></div><div class="line" id="013756"><span class="nick" style="color:#8dd3c7"><a href="#013756" label="[01:37:56]">&lt;kerravon&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.ibm.com/docs/en/zos/2.3.0?topic=information-psa-mapping">https://www.ibm.com/docs/en/zos/2.3.0?topic=information-psa-mapping</a> </span></div><div class="line" id="013807"><span class="nick" style="color:#8dd3c7"><a href="#013807" label="[01:38:07]">&lt;kerravon&gt;</a></span><span class="message">x'78' has new psw for i/o</span></div><div class="line" id="013848"><span class="nick" style="color:#8dd3c7"><a href="#013848" label="[01:38:48]">&lt;kerravon&gt;</a></span><span class="message">x'38' has old psw for i/o</span></div><div class="line" id="014357"><span class="nick" style="color:#389600"><a href="#014357" label="[01:43:57]">&lt;muurkha&gt;</a></span><span class="message">I don't understand this page at all</span></div><div class="line" id="014408"><span class="nick" style="color:#389600"><a href="#014408" label="[01:44:08]">&lt;muurkha&gt;</a></span><span class="message">it seems to be some kind of data dictionary</span></div><div class="line" id="014422"><span class="nick" style="color:#389600"><a href="#014422" label="[01:44:22]">&lt;muurkha&gt;</a></span><span class="message">the PSW doesn't have the PC in it, does it?</span></div><div class="line" id="014546"><span class="nick" style="color:#8dd3c7"><a href="#014546" label="[01:45:46]">&lt;kerravon&gt;</a></span><span class="message">yes it does</span></div><div class="line" id="014555"><span class="nick" style="color:#389600"><a href="#014555" label="[01:45:55]">&lt;muurkha&gt;</a></span><span class="message">oh, okay, thanks!</span></div><div class="line" id="014557"><span class="nick" style="color:#8dd3c7"><a href="#014557" label="[01:45:57]">&lt;kerravon&gt;</a></span><span class="message">it's low memory map</span></div><div class="line" id="014610"><span class="nick" style="color:#389600"><a href="#014610" label="[01:46:10]">&lt;muurkha&gt;</a></span><span class="message">I thought the PSW was just like the carry flag and user/supervisor bit and stuff like that</span></div><div class="line" id="014632"><span class="nick" style="color:#389600"><a href="#014632" label="[01:46:32]">&lt;muurkha&gt;</a></span><span class="message">oriansj: yeah, that would have been pretty great</span></div><div class="line" id="014710"><span class="nick" style="color:#8dd3c7"><a href="#014710" label="[01:47:10]">&lt;kerravon&gt;</a></span><span class="message">here is the PSW:</span></div><div class="line" id="014712"><span class="nick" style="color:#8dd3c7"><a href="#014712" label="[01:47:12]">&lt;kerravon&gt;</a></span><span class="message"> <a rel="nofollow" href="https://en.wikipedia.org/wiki/Program_status_word#S/370_Extended_Architecture_">https://en.wikipedia.org/wiki/Program_status_word#S/370_Extended_Architecture_</a>(S/370-XA) </span></div><div class="line" id="014721"><span class="nick" style="color:#8dd3c7"><a href="#014721" label="[01:47:21]">&lt;kerravon&gt;</a></span><span class="message">one of them, anyway</span></div><div class="line" id="014808"><span class="nick" style="color:#8dd3c7"><a href="#014808" label="[01:48:08]">&lt;kerravon&gt;</a></span><span class="message">it has those things you mentioned too</span></div><div class="line" id="014819"><span class="nick" style="color:#389600"><a href="#014819" label="[01:48:19]">&lt;muurkha&gt;</a></span><span class="message">right</span></div><div class="line" id="014838"><span class="nick" style="color:#389600"><a href="#014838" label="[01:48:38]">&lt;muurkha&gt;</a></span><span class="message">a neat thing about early ARMs (up to at least ARM3) is that they packed those status flags into the same 32-bit register as the regular program counter</span></div><div class="line" id="014916"><span class="nick" style="color:#389600"><a href="#014916" label="[01:49:16]">&lt;muurkha&gt;</a></span><span class="message">so not just interrupt handling (a huge priority in the ARM design) but function call and return would automatically save and restore the status flags</span></div><div class="line" id="015226"><span class="nick" style="color:#8dd3c7"><a href="#015226" label="[01:52:26]">&lt;kerravon&gt;</a></span><span class="message">S/370 did that too and it caused huge issues</span></div><div class="line" id="015241"><span class="nick" style="color:#8dd3c7"><a href="#015241" label="[01:52:41]">&lt;kerravon&gt;</a></span><span class="message">limiting the address space to 16 MiB</span></div><div class="line" id="015319"><span class="nick" style="color:#8dd3c7"><a href="#015319" label="[01:53:19]">&lt;kerravon&gt;</a></span><span class="message">i'm not sure what was in those 8 bits - it may not have been status flags</span></div><div class="line" id="015434"><span class="nick" style="color:#389600"><a href="#015434" label="[01:54:34]">&lt;muurkha&gt;</a></span><span class="message">yeah, I think that's why they stopped doing it in later ARMs, though they had learned from IBM's mistake</span></div><div class="line" id="015441"><span class="nick" style="color:#389600"><a href="#015441" label="[01:54:41]">&lt;muurkha&gt;</a></span><span class="message">so it was 26 bits instead of 24 bits</span></div><div class="line" id="015452"><span class="nick" style="color:#389600"><a href="#015452" label="[01:54:52]">&lt;muurkha&gt;</a></span><span class="message">you could have 64 MiB of code!  not just 16</span></div><div class="line" id="015523"><span class="nick" style="color:#8dd3c7"><a href="#015523" label="[01:55:23]">&lt;kerravon&gt;</a></span><span class="message">data uses up the address space too</span></div><div class="line" id="015546"><span class="nick" style="color:#389600"><a href="#015546" label="[01:55:46]">&lt;muurkha&gt;</a></span><span class="message">yes, but you don't have to store it in the area the program counter can point at</span></div><div class="line" id="015626"><span class="nick" style="color:#8dd3c7"><a href="#015626" label="[01:56:26]">&lt;kerravon&gt;</a></span><span class="message">unless you have a different address space, code and data combined will be limited to that 64 MiB</span></div><div class="line" id="015643"><span class="nick" style="color:#389600"><a href="#015643" label="[01:56:43]">&lt;muurkha&gt;</a></span><span class="message">the address space was 32 bits!  just the program counter was only 26</span></div><div class="line" id="015655"><span class="nick" style="color:#8dd3c7"><a href="#015655" label="[01:56:55]">&lt;kerravon&gt;</a></span><span class="message">i see</span></div><div class="line" id="015705"><span class="nick" style="color:#389600"><a href="#015705" label="[01:57:05]">&lt;muurkha&gt;</a></span><span class="message">also the instructions had to be 4-byte-aligned so the bottom two bits would have always been 0</span></div><div class="line" id="015720"><span class="nick" style="color:#389600"><a href="#015720" label="[01:57:20]">&lt;muurkha&gt;</a></span><span class="message">so instead they used them to store supervisor/user/interrupt-handler/fast-interrupt-handler state</span></div><div class="line" id="015740"><span class="nick" style="color:#8dd3c7"><a href="#015740" label="[01:57:40]">&lt;kerravon&gt;</a></span><span class="message">on the S/3X0, instructions are 2-byte aligned</span></div><div class="line" id="015801"><span class="nick" style="color:#8dd3c7"><a href="#015801" label="[01:58:01]">&lt;kerravon&gt;</a></span><span class="message">and when IBM went to 64-bit they made use of that low bit to set 64-bit mode</span></div><div class="line" id="015821"><span class="nick" style="color:#8dd3c7"><a href="#015821" label="[01:58:21]">&lt;kerravon&gt;</a></span><span class="message">in the BSM instruction</span></div><div class="line" id="015842"><span class="nick" style="color:#389600"><a href="#015842" label="[01:58:42]">&lt;muurkha&gt;</a></span><span class="message">I didn't know that!</span></div><div class="line" id="015900"><span class="nick" style="color:#8dd3c7"><a href="#015900" label="[01:59:00]">&lt;kerravon&gt;</a></span><span class="message">yeah - i thought that was very clever myself</span></div><div class="line" id="015907"><span class="nick" style="color:#2e2a4a"><a href="#015907" label="[01:59:07]">&lt;oriansj&gt;</a></span><span class="message">muurkha: although knowing my luck, it would result in an Avro Arrow situation and tank the entire computer industry for decades</span></div><div class="line" id="015933"><span class="nick" style="color:#389600"><a href="#015933" label="[01:59:33]">&lt;muurkha&gt;</a></span><span class="message">oriansj: heh, I was going to say something like that about kerravon's time-travel approach</span></div><div class="line" id="020008"><span class="nick" style="color:#389600"><a href="#020008" label="[02:00:08]">&lt;muurkha&gt;</a></span><span class="message">maybe if he travels back to 01986 and writes PDOS/386 it will inspire someone to do something that keeps the 386 from becoming dominant</span></div><div class="line" id="020200"><span class="nick" style="color:#2e2a4a"><a href="#020200" label="[02:02:00]">&lt;oriansj&gt;</a></span><span class="message">well if the Motorola 88000 was backwards compatible with the 68000; you could have avoided the entire PowerPC hardshift that killed the 68K systems (all except Apple)</span></div><div class="line" id="020332"><span class="nick" style="color:#389600"><a href="#020332" label="[02:03:32]">&lt;muurkha&gt;</a></span><span class="message">yes!  or maybe DEC would have succeeded in shipping PRISM, or AMD would have shipped a non-shitty compiler for the 29k which would have made it 68k-competitive</span></div><div class="line" id="020421"><span class="nick" style="color:#389600"><a href="#020421" label="[02:04:21]">&lt;muurkha&gt;</a></span><span class="message">one thing that I guess we know in retrospect is that backward compatibility was a lot more important than people gave it credit for at the time</span></div><div class="line" id="020433"><span class="nick" style="color:#389600"><a href="#020433" label="[02:04:33]">&lt;muurkha&gt;</a></span><span class="message">except IBM of course</span></div><div class="line" id="020444"><span class="nick" style="color:#2e2a4a"><a href="#020444" label="[02:04:44]">&lt;oriansj&gt;</a></span><span class="message">or if Ken Olsen didn't reject the Apple 200K DEC Alpha order because of a refusual to do business with men who cheat on their spouses openly</span></div><div class="line" id="020541"><span class="nick" style="color:#2e2a4a"><a href="#020541" label="[02:05:41]">&lt;oriansj&gt;</a></span><span class="message">(which drove Apple to partner with Motorola and IBM to make PowerPC a thing)</span></div><div class="line" id="020548"><span class="nick" style="color:#389600"><a href="#020548" label="[02:05:48]">&lt;muurkha&gt;</a></span><span class="message">dunno, maybe not a bad idea to not do business with people who are dishonest or who take advantage of those who are vulnerable to them</span></div><div class="line" id="020602"><span class="nick" style="color:#389600"><a href="#020602" label="[02:06:02]">&lt;muurkha&gt;</a></span><span class="message">if PRISM hadn't been canceled, arguably there wouldn't have been a Win32</span></div><div class="line" id="020613"><span class="nick" style="color:#389600"><a href="#020613" label="[02:06:13]">&lt;muurkha&gt;</a></span><span class="message">certainly it would have looked very different</span></div><div class="line" id="020656"><span class="nick" style="color:#389600"><a href="#020656" label="[02:06:56]">&lt;muurkha&gt;</a></span><span class="message">(&quot;cheat&quot; implies we're not talking about a consensually non-monogamous relationship)</span></div><div class="line" id="020832"><span class="nick" style="color:#2e2a4a"><a href="#020832" label="[02:08:32]">&lt;oriansj&gt;</a></span><span class="message">yeah, crazy the number of things that had to happen for x86 and Windows to occur like they did; makes one wonder who with the time machine betted on the combo?</span></div><div class="line" id="020924"><span class="nick" style="color:#389600"><a href="#020924" label="[02:09:24]">&lt;muurkha&gt;</a></span><span class="message">well, I think they would have probably happened in some form</span></div><div class="line" id="021009"><span class="nick" style="color:#389600"><a href="#021009" label="[02:10:09]">&lt;muurkha&gt;</a></span><span class="message">the executives at Microsoft's competition were mostly MBAs, except for a few like Novell and Digital Research and DEC</span></div><div class="line" id="021025"><span class="nick" style="color:#2e2a4a"><a href="#021025" label="[02:10:25]">&lt;oriansj&gt;</a></span><span class="message">well Intel did have the i860 failure, which absorbed all the engineering talent which have made the x86 architecture much cleaner</span></div><div class="line" id="021112"><span class="nick" style="color:#389600"><a href="#021112" label="[02:11:12]">&lt;muurkha&gt;</a></span><span class="message">Ashton-Tate and all those guys didn't really stand a chance</span></div><div class="line" id="021114"><span class="nick" style="color:#2e2a4a"><a href="#021114" label="[02:11:14]">&lt;oriansj&gt;</a></span><span class="message">Microsoft DOS only had a chance because CP/M decided to snub IBM</span></div><div class="line" id="021132"><span class="nick" style="color:#389600"><a href="#021132" label="[02:11:32]">&lt;muurkha&gt;</a></span><span class="message">Microsoft DOS only had a chance because billg's mom was on a board with IBM's president</span></div><div class="line" id="021220"><span class="nick" style="color:#2e2a4a"><a href="#021220" label="[02:12:20]">&lt;oriansj&gt;</a></span><span class="message">well that was the reason for the sweetheart Microsoft Basic detail; the DOS deal was an unbelievable free extra</span></div><div class="line" id="021234"><span class="nick" style="color:#389600"><a href="#021234" label="[02:12:34]">&lt;muurkha&gt;</a></span><span class="message">but billg was in an excellent position to win one way or another</span></div><div class="line" id="021306"><span class="nick" style="color:#389600"><a href="#021306" label="[02:13:06]">&lt;muurkha&gt;</a></span><span class="message">he was a first-class hacker with upper-class financial resources and unmatchable bloodlust</span></div><div class="line" id="021338"><span class="nick" style="color:#389600"><a href="#021338" label="[02:13:38]">&lt;muurkha&gt;</a></span><span class="message">and from the beginning his vision was a computer on every desk and in every home running Microsoft software</span></div><div class="line" id="021425"><span class="nick" style="color:#389600"><a href="#021425" label="[02:14:25]">&lt;muurkha&gt;</a></span><span class="message">I should say upper-class financial and social resources</span></div><div class="line" id="021519"><span class="nick" style="color:#2e2a4a"><a href="#021519" label="[02:15:19]">&lt;oriansj&gt;</a></span><span class="message">and a hard financial license lesson from Jack Tramiel which is a master class in itself</span></div><div class="line" id="021540"><span class="nick" style="color:#389600"><a href="#021540" label="[02:15:40]">&lt;muurkha&gt;</a></span><span class="message">hm?</span></div><div class="line" id="021649"><span class="nick" style="color:#2e2a4a"><a href="#021649" label="[02:16:49]">&lt;oriansj&gt;</a></span><span class="message">muurkha: unlimited Microsoft licenses for only $50K (for literally all Commodore computers sold)</span></div><div class="line" id="021708"><span class="nick" style="color:#2e2a4a"><a href="#021708" label="[02:17:08]">&lt;oriansj&gt;</a></span><span class="message">TOTAL as a single lump payment</span></div><div class="line" id="021709"><span class="nick" style="color:#389600"><a href="#021709" label="[02:17:09]">&lt;muurkha&gt;</a></span><span class="message">nice</span></div><div class="line" id="021733"><span class="nick" style="color:#389600"><a href="#021733" label="[02:17:33]">&lt;muurkha&gt;</a></span><span class="message">pretty sure that wasn't the first time billg saw something like that happen though</span></div><div class="line" id="021849"><span class="nick" style="color:#2e2a4a"><a href="#021849" label="[02:18:49]">&lt;oriansj&gt;</a></span><span class="message">it is the hardest financial f*cking microsoft *EVER* recieved; (and continued to recieve until the death of Commodore)</span></div><div class="line" id="021925"><span class="nick" style="color:#389600"><a href="#021925" label="[02:19:25]">&lt;muurkha&gt;</a></span><span class="message"> <a rel="nofollow" href="https://en.wikipedia.org/wiki/Motorola_68000_series">https://en.wikipedia.org/wiki/Motorola_68000_series</a>  really has quite the list: Macintosh, Atari ST, Sega Genesis, Amiga, Sun, NeXT, TI-89, TI-92, PalmPilot, and LaserWriter</span></div><div class="line" id="021940"><span class="nick" style="color:#389600"><a href="#021940" label="[02:19:40]">&lt;muurkha&gt;</a></span><span class="message">I don't think it was an ongoing cost center for Microsoft, was it?</span></div><div class="line" id="022044"><span class="nick" style="color:#2e2a4a"><a href="#022044" label="[02:20:44]">&lt;oriansj&gt;</a></span><span class="message">muurkha: cost them an estimated $20M in support costs and over $500M in revenue loses</span></div><div class="line" id="022058"><span class="nick" style="color:#389600"><a href="#022058" label="[02:20:58]">&lt;muurkha&gt;</a></span><span class="message">oh, I didn't know about the support costs</span></div><div class="line" id="022105"><span class="nick" style="color:#389600"><a href="#022105" label="[02:21:05]">&lt;muurkha&gt;</a></span><span class="message">I was thinking it was just a missed opportunity, like all the software they could have written but didn't</span></div><div class="line" id="022309"><span class="nick" style="color:#389600"><a href="#022309" label="[02:23:09]">&lt;muurkha&gt;</a></span><span class="message">I was reading about ARM assembly last night.  it seems like a pretty sweet instruction set</span></div><div class="line" id="022328"><span class="nick" style="color:#389600"><a href="#022328" label="[02:23:28]">&lt;muurkha&gt;</a></span><span class="message">I'd written and read a tiny amount before but not really appreciated it</span></div><div class="line" id="022351"><span class="nick" style="color:#2e2a4a"><a href="#022351" label="[02:23:51]">&lt;oriansj&gt;</a></span><span class="message">minus 3 bad design ideas, it is actually pretty great</span></div><div class="line" id="022507"><span class="nick" style="color:#389600"><a href="#022507" label="[02:25:07]">&lt;muurkha&gt;</a></span><span class="message">apparently NXP still sells ColdFire: <a rel="nofollow" href="https://www.nxp.com/products/processors-and-microcontrollers/legacy-mpu-mcus/32-bit-coldfire-mcus-mpus/68k-processors-legacy/m680x0/low-cost-32-bit-microprocessor-including-hc000-hc001-ec000-and-sec000:MC68000">https://www.nxp.com/products/processors-and-microcontrollers/legacy-mpu-mcus/32-bit-coldfire-mcus-mpus/68k-processors-legacy/m680x0/low-cost-32-bit-microprocessor-including-hc000-hc001-ec000-and-sec000:MC68000</a> </span></div><div class="line" id="022543"><span class="nick" style="color:#2e2a4a"><a href="#022543" label="[02:25:43]">&lt;oriansj&gt;</a></span><span class="message">0) every instruction being conditional [literally 1/16 of all instructions are encoded as NOPs]</span></div><div class="line" id="022547"><span class="nick" style="color:#389600"><a href="#022547" label="[02:25:47]">&lt;muurkha&gt;</a></span><span class="message">which are the 3 bad design ideas?  flag bits in the PC, making every instruction conditional, and</span></div><div class="line" id="022550"><span class="nick" style="color:#389600"><a href="#022550" label="[02:25:50]">&lt;muurkha&gt;</a></span><span class="message">jinx</span></div><div class="line" id="022653"><span class="nick" style="color:#2e2a4a"><a href="#022653" label="[02:26:53]">&lt;oriansj&gt;</a></span><span class="message">and the optional shift all over the place</span></div><div class="line" id="022812"><span class="nick" style="color:#2e2a4a"><a href="#022812" label="[02:28:12]">&lt;oriansj&gt;</a></span><span class="message">and minor disagreement on the little endian instruction ordering</span></div><div class="line" id="022829"><span class="nick" style="color:#389600"><a href="#022829" label="[02:28:29]">&lt;muurkha&gt;</a></span><span class="message">I feel like the shifts and conditionals are pretty convenient, especially in an in-order implementation which necessarily needs at least one cycle per instruction</span></div><div class="line" id="022838"><span class="nick" style="color:#389600"><a href="#022838" label="[02:28:38]">&lt;muurkha&gt;</a></span><span class="message">but maybe your objection is that they reduce code density?</span></div><div class="line" id="022950"><span class="nick" style="color:#2e2a4a"><a href="#022950" label="[02:29:50]">&lt;oriansj&gt;</a></span><span class="message">my objection is not that there are ALU+Shift instructions; it is that all ALU instructions include shift in the datapath (They fixed that in AArch64)</span></div><div class="line" id="023218"><span class="nick" style="color:#389600"><a href="#023218" label="[02:32:18]">&lt;muurkha&gt;</a></span><span class="message">is that bad because it reduces the clock speed?</span></div><div class="line" id="023234"><span class="nick" style="color:#389600"><a href="#023234" label="[02:32:34]">&lt;muurkha&gt;</a></span><span class="message">oh apparently SGI also started out on the 68k: <a rel="nofollow" href="https://en.wikipedia.org/wiki/Silicon_Graphics#Motorola_680x0-based_systems">https://en.wikipedia.org/wiki/Silicon_Graphics#Motorola_680x0-based_systems</a> </span></div><div class="line" id="023525"><span class="nick" style="color:#389600"><a href="#023525" label="[02:35:25]">&lt;muurkha&gt;</a></span><span class="message">Atari actually died before they adopted the 68k, and I guess Amiga lived long enough to ship a 68040 but not a 68060 so I don't think PowerPC is what killed them</span></div><div class="line" id="023551"><span class="nick" style="color:#389600"><a href="#023551" label="[02:35:51]">&lt;muurkha&gt;</a></span><span class="message">and TI and NeXT are alive and well today</span></div><div class="line" id="023603"><span class="nick" style="color:#389600"><a href="#023603" label="[02:36:03]">&lt;muurkha&gt;</a></span><span class="message">and I guess Palm</span></div><div class="line" id="023625"><span class="nick" style="color:#389600"><a href="#023625" label="[02:36:25]">&lt;muurkha&gt;</a></span><span class="message">Sun and Sega aren't but I don't think we can blame that on the PPC either</span></div><div class="line" id="023652"><span class="nick" style="color:#389600"><a href="#023652" label="[02:36:52]">&lt;muurkha&gt;</a></span><span class="message">I feel like the ARM always offered pretty competitive clock speeds for its epoch?</span></div><div class="line" id="024000"><span class="nick" style="color:#389600"><a href="#024000" label="[02:40:00]">&lt;muurkha&gt;</a></span><span class="message">ARM2 came out in 01986 (8 MHz), ARM3 in 01989 (25 MHz), ARM250 in 01992 (12 MHz), and ARM700 in 01993 (33 MHz)</span></div><div class="line" id="024159"><span class="nick" style="color:#389600"><a href="#024159" label="[02:41:59]">&lt;muurkha&gt;</a></span><span class="message">contemporary to the ARM2 we have SPARC MB86900 (RISC, 17 MHz), and NEC V60 (CISC, 16 MHz), so maybe not?</span></div><div class="line" id="024354"><span class="nick" style="color:#389600"><a href="#024354" label="[02:43:54]">&lt;muurkha&gt;</a></span><span class="message">but it's perhaps relevant that those were respectively 4× and 14× the size of the ARM2</span></div><div class="line" id="024611"><span class="nick" style="color:#389600"><a href="#024611" label="[02:46:11]">&lt;muurkha&gt;</a></span><span class="message">contemporary to ARM3 we have 80486 (CISC, 25 MHz), i860 (VLIW, 40 MHz), and maybe POWER1 (RISC, a bit later, 30 MHz), also all much bigger than the ARM3</span></div><div class="line" id="025000"><span class="nick" style="color:#389600"><a href="#025000" label="[02:50:00]">&lt;muurkha&gt;</a></span><span class="message">contemporary to ARM700 we have Alpha 21064 (RISC, 200 MHz), the 68060 (CISC, 50 MHz), P5 Pentium (CISC, 66 MHz), and POWER2 (RISC, 72 MHz)</span></div><div class="line" id="025036"><span class="nick" style="color:#389600"><a href="#025036" label="[02:50:36]">&lt;muurkha&gt;</a></span><span class="message">so maybe at that point ARM's clock speeds were starting to lag?  but that was also the time when ARM was refocusing on low-power mobile devices</span></div><div class="line" id="025139"><span class="nick" style="color:#389600"><a href="#025139" label="[02:51:39]">&lt;muurkha&gt;</a></span><span class="message">by comparison, DEC's StrongARM SA-110 shipped in 01996 with a 233 MHz clock</span></div><div class="line" id="025400"><span class="nick" style="color:#389600"><a href="#025400" label="[02:54:00]">&lt;muurkha&gt;</a></span><span class="message">a contemporary CISC part was the AMD K5 (100 MHz), and the Alpha αxp had by that time been pushed to the EV5 21164A at 400 MHz</span></div><div class="line" id="025444"><span class="nick" style="color:#389600"><a href="#025444" label="[02:54:44]">&lt;muurkha&gt;</a></span><span class="message">so I don't see a super compelling argument that the barrel shifter in the datapath cost a lot of transistors or a big clock-speed penalty?</span></div><div class="line" id="025456"><span class="nick" style="color:#389600"><a href="#025456" label="[02:54:56]">&lt;muurkha&gt;</a></span><span class="message">oriansj: perhaps I have misunderstood?</span></div><div class="line" id="030731"><span class="nick" style="color:#2e2a4a"><a href="#030731" label="[03:07:31]">&lt;oriansj&gt;</a></span><span class="message">its penalty doesn't show up until superscalar processing; which would require multiple barrel shifters (one for each ALU) unless you want to add special logic to determine which instructions don't require any shifting.</span></div><div class="line" id="030812"><span class="nick" style="color:#2e2a4a"><a href="#030812" label="[03:08:12]">&lt;oriansj&gt;</a></span><span class="message">and allocate only those instructions to the ALUs without a barrel shifter attached.</span></div><div class="line" id="030927"><span class="nick" style="color:#2e2a4a"><a href="#030927" label="[03:09:27]">&lt;oriansj&gt;</a></span><span class="message">which as noticed by RISC-V developers does complicate those implementations but becomes a non-issue by the time you go full OoO</span></div><div class="line" id="031627"><span class="nick" style="color:#2e2a4a"><a href="#031627" label="[03:16:27]">&lt;oriansj&gt;</a></span><span class="message">and even AArch64 walked that design detail back a good bit (a bit too far but RAM is cheap these days)</span></div><div class="line" id="032905"><span class="nick" style="color:#389600"><a href="#032905" label="[03:29:05]">&lt;muurkha&gt;</a></span><span class="message">hmm, I guess that makes sense</span></div><div class="line" id="032929"><span class="nick" style="color:#389600"><a href="#032929" label="[03:29:29]">&lt;muurkha&gt;</a></span><span class="message">superscalar also eliminates its big advantage</span></div><div class="line" id="033044"><span class="nick" style="color:#2e2a4a"><a href="#033044" label="[03:30:44]">&lt;oriansj&gt;</a></span><span class="message">and 1/16 of all possible opcodes being a nop is insanely wasteful of the encoding space</span></div><div class="line" id="033117"><span class="nick" style="color:#389600"><a href="#033117" label="[03:31:17]">&lt;muurkha&gt;</a></span><span class="message">that is, the big advantage of the barrel shifter in the ALU data path is that you don't have to waste an entire extra clock cycle on selecting whether your index register is getting shifted by 0, 1, 2, 3, or 4 bits</span></div><div class="line" id="033132"><span class="nick" style="color:#389600"><a href="#033132" label="[03:31:32]">&lt;muurkha&gt;</a></span><span class="message">but with superscalar, you wouldn't have to waste that extra clock cycle anyway</span></div><div class="line" id="033225"><span class="nick" style="color:#389600"><a href="#033225" label="[03:32:25]">&lt;muurkha&gt;</a></span><span class="message">yeah, ARM without Thumb isn't that great for code density compared to things like amd64 and RVC</span></div><div class="line" id="033333"><span class="nick" style="color:#389600"><a href="#033333" label="[03:33:33]">&lt;muurkha&gt;</a></span><span class="message">but wasting 1/16 of possible opcodes is not that important</span></div><div class="line" id="033408"><span class="nick" style="color:#389600"><a href="#033408" label="[03:34:08]">&lt;muurkha&gt;</a></span><span class="message">it costs you 0.09 bits per instruction (out of 32)</span></div><div class="line" id="033507"><span class="nick" style="color:#389600"><a href="#033507" label="[03:35:07]">&lt;muurkha&gt;</a></span><span class="message">that is, instead of 4.2949673e+09 useful instructions, you have 4.0265318e+09, which is equivalent to 31.91 bits</span></div><div class="line" id="033746"><span class="nick" style="color:#389600"><a href="#033746" label="[03:37:46]">&lt;muurkha&gt;</a></span><span class="message">and I think ARM2 is competitive in code density with its contemporaries like the SPARC and even the 386</span></div><div class="line" id="034515"><span class="nick" style="color:#2e2a4a"><a href="#034515" label="[03:45:15]">&lt;oriansj&gt;</a></span><span class="message">well yes (x86 burned throught their encoding space and started having to make more bloated instructions because of it)</span></div><div class="line" id="034540"><span class="nick" style="color:#389600"><a href="#034540" label="[03:45:40]">&lt;muurkha&gt;</a></span><span class="message">i386 isn't that bad!  Qfitzah is going to fit into 1KiB if I ever finish it</span></div><div class="line" id="034613"><span class="nick" style="color:#389600"><a href="#034613" label="[03:46:13]">&lt;muurkha&gt;</a></span><span class="message">and that's an interpreter for a high-level language with dynamic method dispatch, flexible data containers, and pattern-matching</span></div><div class="line" id="034628"><span class="nick" style="color:#389600"><a href="#034628" label="[03:46:28]">&lt;muurkha&gt;</a></span><span class="message">ARM could be better in that sense with less options for the barrel shifter and without the pervasive conditionalization</span></div><div class="line" id="034647"><span class="nick" style="color:#2e2a4a"><a href="#034647" label="[03:46:47]">&lt;oriansj&gt;</a></span><span class="message">it isn't bad if you limit yourself to a clean subset of i386; it could have been much cleaner and much denser with very small tweaks</span></div><div class="line" id="034658"><span class="nick" style="color:#389600"><a href="#034658" label="[03:46:58]">&lt;muurkha&gt;</a></span><span class="message">I mean bad in terms of code density!</span></div><div class="line" id="034723"><span class="nick" style="color:#389600"><a href="#034723" label="[03:47:23]">&lt;muurkha&gt;</a></span><span class="message">limiting yourself to a clean subset of i386 is not the way to improve code density &gt;;)</span></div><div class="line" id="034754"><span class="nick" style="color:#389600"><a href="#034754" label="[03:47:54]">&lt;muurkha&gt;</a></span><span class="message">I haven't seen *anything* that's *much* denser than i386 though!  Thumb2 and RVC are a little better.  what are you thinking of?</span></div><div class="line" id="034805"><span class="nick" style="color:#2e2a4a"><a href="#034805" label="[03:48:05]">&lt;oriansj&gt;</a></span><span class="message">ah, fair point EAX heavily code paths can definitely be quite dense when you abuse the stack</span></div><div class="line" id="034825"><span class="nick" style="color:#2e2a4a"><a href="#034825" label="[03:48:25]">&lt;oriansj&gt;</a></span><span class="message">muurkha: VAX or PDP-11</span></div><div class="line" id="034842"><span class="nick" style="color:#389600"><a href="#034842" label="[03:48:42]">&lt;muurkha&gt;</a></span><span class="message">I don't think VAX or PDP-11 have better code density than i386 or even as good</span></div><div class="line" id="035300"><span class="nick" style="color:#389600"><a href="#035300" label="[03:53:00]">&lt;muurkha&gt;</a></span><span class="message">other ways to squish i386 code include stack abuse, LODSD abuse, unaligned access for string searches, xchg, indirecting procedure calls through a procedure table pointed to by a register, lea arithmetic, xor/inc to load a constant 1, doing tail calls by falling off the end of one subroutine into the beginning of another...</span></div><div class="line" id="035311"><span class="nick" style="color:#389600"><a href="#035311" label="[03:53:11]">&lt;muurkha&gt;</a></span><span class="message">s/other //</span></div><div class="line" id="035611"><span class="nick" style="color:#389600"><a href="#035611" label="[03:56:11]">&lt;muurkha&gt;</a></span><span class="message">rep movs, repne cmps, repne movs, operating with immediate operands on short sub-registers like %ax or %al or %dil instead of the whole register...</span></div><div class="line" id="035838"><span class="nick" style="color:#389600"><a href="#035838" label="[03:58:38]">&lt;muurkha&gt;</a></span><span class="message">omitting cld and initially zeroing registers when you think you can take it for granted :)</span></div><div class="line" id="035956"><span class="nick" style="color:#389600"><a href="#035956" label="[03:59:56]">&lt;muurkha&gt;</a></span><span class="message">oh, strategically positioning an unconditional jump to a faraway place that you have several conditional jumps to from more than 128 bytes away, so that your conditional jumps can jump to the nearby unconditional jump (2 bytes per conditional jump) instead of directly to the faraway destination (6 bytes)</span></div><div class="line" id="040144"><span class="nick" style="color:#2e2a4a"><a href="#040144" label="[04:01:44]">&lt;oriansj&gt;</a></span><span class="message">indeed; most common assembly sequences I can imagine writing take 16-24bytes on x86 but only 10-14bytes on VAX but you are probably right in that the compiled code probably isn't much more efficient (althoug the 3OP instructions are the big saver in reducing the number of instructions performed.</span></div><div class="line" id="040221"><span class="nick" style="color:#389600"><a href="#040221" label="[04:02:21]">&lt;muurkha&gt;</a></span><span class="message">maybe handwritten VAX code is different?  I haven't ever written any</span></div><div class="line" id="040327"><span class="nick" style="color:#2e2a4a"><a href="#040327" label="[04:03:27]">&lt;oriansj&gt;</a></span><span class="message">the 3 op instructions with 3 memory addresses would take 2 load instructions, an ALU instruction and a store instruction (and depending on the ALU instruction you *might* be able to mix it with the load or the store to save an instruction)</span></div><div class="line" id="040404"><span class="nick" style="color:#389600"><a href="#040404" label="[04:04:04]">&lt;muurkha&gt;</a></span><span class="message">on i386?</span></div><div class="line" id="040438"><span class="nick" style="color:#389600"><a href="#040438" label="[04:04:38]">&lt;muurkha&gt;</a></span><span class="message">you can pretty much always mix ALU instructions with a load or a store</span></div><div class="line" id="040453"><span class="nick" style="color:#2e2a4a"><a href="#040453" label="[04:04:53]">&lt;oriansj&gt;</a></span><span class="message">VAX could do 3 op instructions with 3 memory addresses; i386 can only do 2 op instructions at best cause and only 1 memory address max per instruction.</span></div><div class="line" id="040522"><span class="nick" style="color:#389600"><a href="#040522" label="[04:05:22]">&lt;muurkha&gt;</a></span><span class="message">but I very rarely write code that does something like sum two vectors to form a third vector</span></div><div class="line" id="040556"><span class="nick" style="color:#389600"><a href="#040556" label="[04:05:56]">&lt;muurkha&gt;</a></span><span class="message">almost invariably I have most of my operands already in registers except when I'm doing things like chasing pointer chains</span></div><div class="line" id="040639"><span class="nick" style="color:#2e2a4a"><a href="#040639" label="[04:06:39]">&lt;oriansj&gt;</a></span><span class="message">3 memory addresses in an instruction really doesn't benefit cache performance and usually just makes OoO much more messy</span></div><div class="line" id="040742"><span class="nick" style="color:#389600"><a href="#040742" label="[04:07:42]">&lt;muurkha&gt;</a></span><span class="message">apparently it also makes restarting the instruction after a page fault difficult ;)</span></div><div class="line" id="041215"><span class="nick" style="color:#389600"><a href="#041215" label="[04:12:15]">&lt;muurkha&gt;</a></span><span class="message">&gt; By any practical measure, the VAX family of computers is one of the most successful series of computer systems ever developed.  As of this writing, over 100,000 machines have been installed, ranging in size from the MicroVAX II to the VAX 8800—a number that even surpasses that for the pioneering IBM SYSTEM 360/370 series.</span></div><div class="line" id="041308"><span class="nick" style="color:#389600"><a href="#041308" label="[04:13:08]">&lt;muurkha&gt;</a></span><span class="message">Imagine writing this in 01987 when 3.5 million Commodore 64s had been sold by mid-01986</span></div><div class="line" id="041339"><span class="nick" style="color:#389600"><a href="#041339" label="[04:13:39]">&lt;muurkha&gt;</a></span><span class="message">and the Apple ][ was selling 1 million a year in 01983</span></div><div class="line" id="041543"><span class="nick" style="color:#389600"><a href="#041543" label="[04:15:43]">&lt;muurkha&gt;</a></span><span class="message">A year after Sun went public in 01986</span></div><div class="line" id="041732"><span class="nick" style="color:#389600"><a href="#041732" label="[04:17:32]">&lt;muurkha&gt;</a></span><span class="message">and had already come out with the Sun-3, and would ship its first SPARCs that year</span></div><div class="line" id="042221"><span class="nick" style="color:#389600"><a href="#042221" label="[04:22:21]">&lt;muurkha&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.abortretry.fail/p/the-network-is-the-computer">https://www.abortretry.fail/p/the-network-is-the-computer</a>  says Sun sold 500 million dollars' worth of hardware to the NSA in 01986, which would be on the order of 25000 machines</span></div><div class="line" id="042444"><span class="nick" style="color:#389600"><a href="#042444" label="[04:24:44]">&lt;muurkha&gt;</a></span><span class="message">the facepalm VAX quote is from <a rel="nofollow" href="http://bitsavers.trailing-edge.com/pdf/dec/vax/archSpec/EY-3459E-DP_VAX_Architecture_Reference_Manual_1987.pdf">http://bitsavers.trailing-edge.com/pdf/dec/vax/archSpec/EY-3459E-DP_VAX_Architecture_Reference_Manual_1987.pdf</a> </span></div><div class="line" id="042545"><span class="nick" style="color:#389600"><a href="#042545" label="[04:25:45]">&lt;muurkha&gt;</a></span><span class="message">&gt; we expect VAX computers to remain the backbone of Digital's product offerings for many years into the future.</span></div><div class="line" id="042647"><span class="nick" style="color:#389600"><a href="#042647" label="[04:26:47]">&lt;muurkha&gt;</a></span><span class="message">then they shipped the DECstation 3100 two years later in 01989 and the αxp three years after that in 01992</span></div><div class="line" id="042716"><span class="nick" style="color:#389600"><a href="#042716" label="[04:27:16]">&lt;muurkha&gt;</a></span><span class="message">possibly DEC's ostrich problems went deeper than just canceling PRISM</span></div><div class="line" id="043017"><span class="nick" style="color:#389600"><a href="#043017" label="[04:30:17]">&lt;muurkha&gt;</a></span><span class="message">anyway what I actually wanted to say about the VAX is that it had 16 32-bit general-purpose registers, so most code ought to be able to avoid referencing memory even once per instruction and will run faster if it does avoid it; this is a little harder on the i386 but also pretty easy on amd64 where you also have 16 general-purpose 32-bit registers</span></div><div class="line" id="043946"><span class="nick" style="color:#2e2a4a"><a href="#043946" label="[04:39:46]">&lt;oriansj&gt;</a></span><span class="message">tfgbvhrdjeugnufhfttgiigglgibkubklkcdhbnvgidj</span></div><div class="line" id="044907"><span class="nick" style="color:#2e2a4a"><a href="#044907" label="[04:49:07]">&lt;oriansj&gt;</a></span><span class="message">sorry about that</span></div><div class="line" id="044953"><span class="nick" style="color:#2e2a4a"><a href="#044953" label="[04:49:53]">&lt;oriansj&gt;</a></span><span class="message">but yes, AMD64 is in many ways what i386 should have been but sadly wasn't</span></div><div class="line" id="050344"><span class="nick" style="color:#389600"><a href="#050344" label="[05:03:44]">&lt;muurkha&gt;</a></span><span class="message">heh, no worries</span></div><div class="line" id="050441"><span class="nick" style="color:#389600"><a href="#050441" label="[05:04:41]">&lt;muurkha&gt;</a></span><span class="message">I have a correction: earlier I said the ARM2 had a 32-bit address bus, but apparently it only had a 26-bit address bus, so you couldn't physically hook up more than 64 MiB of RAM without bank-switching.  I think the ARM3 did have a 32-bit address bus</span></div><div class="line" id="050505"><span class="nick" style="color:#389600"><a href="#050505" label="[05:05:05]">&lt;muurkha&gt;</a></span><span class="message">according to <a rel="nofollow" href="https://youtu.be/KKTa54UikgE">https://youtu.be/KKTa54UikgE</a>  at 14'</span></div><div class="line" id="052321"><span class="nick" style="color:#2e2a4a"><a href="#052321" label="[05:23:21]">&lt;oriansj&gt;</a></span><span class="message">this says arm6 <a rel="nofollow" href="https://en.wikipedia.org/wiki/ARM_architecture_family">https://en.wikipedia.org/wiki/ARM_architecture_family</a> </span></div><div class="line" id="054001"><span class="nick" style="color:#389600"><a href="#054001" label="[05:40:01]">&lt;muurkha&gt;</a></span><span class="message">it seems to say that ARM3 supported full 32-bit memory</span></div><div class="line" id="055749"><span class="nick" style="color:#2e2a4a"><a href="#055749" label="[05:57:49]">&lt;oriansj&gt;</a></span><span class="message">well a 26bit PC doesn't prevent one from using 32bit registers to get data from the 4GB of memory but the programs themselves are limited to 26bit which is enough for pretty big programs in assembly</span></div><div class="line" id="055829"><span class="nick" style="color:#389600"><a href="#055829" label="[05:58:29]">&lt;muurkha&gt;</a></span><span class="message">in this case the problem was that the physical chip only had 26 pins dedicated to the address bus</span></div><div class="line" id="055910"><span class="nick" style="color:#389600"><a href="#055910" label="[05:59:10]">&lt;muurkha&gt;</a></span><span class="message">the actual CPU design inside the ARM3 was the same as in the ARM2, just inside a much larger chip with enough transistor budget for caches</span></div><div class="line" id="075344"><span class="nick" style="color:#6b8072"><a href="#075344" label="[07:53:44]">&lt;fossy&gt;</a></span><span class="message">i've been working on <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/issues/306">https://github.com/fosslinux/live-bootstrap/issues/306</a>  for a little bit. after a bit of hacking around in scheme and adding in a few new guile routines into mes' library, i got it regenerating the files. however upon integrating it into live-bootstrap i noticed an incredibly large problem. the regenerations uses psyntax.</span></div><div class="line" id="075506"><span class="nick" style="color:#6b8072"><a href="#075506" label="[07:55:06]">&lt;fossy&gt;</a></span><span class="message">so i began attempting to port guile-psyntax-bootstrap to mes - got a fairr way along, with a very large amount of just hacking and removing things, but i have reached a huge block that i don't know how to get around - mes is just gobbling up memory and i can't tell to what or why</span></div><div class="line" id="075627"><span class="nick" style="color:#389600"><a href="#075627" label="[07:56:27]">&lt;muurkha&gt;</a></span><span class="message">aw :(</span></div><div class="line" id="075702"><span class="nick" style="color:#6b8072"><a href="#075702" label="[07:57:02]">&lt;fossy&gt;</a></span><span class="message"> <a rel="nofollow" href="http://0x0.st/H1qj.tar.gz">http://0x0.st/H1qj.tar.gz</a>  -- this is my progress (on the psyntax bootstrap) -- if anyone more experienced with mes than me could have a look at what's going on, i'd appreciate it a lot</span></div><div class="line" id="114754"><span class="nick" style="color:#80b1d3"><a href="#114754" label="[11:47:54]">&lt;stikonas&gt;</a></span><span class="message">janneke: do you remember what exactly is the purpose of hex2:immediate8  function?</span></div><div class="line" id="114810"><span class="nick" style="color:#80b1d3"><a href="#114810" label="[11:48:10]">&lt;stikonas&gt;</a></span><span class="message">it's broken on 64-bit mescc (and there is a comment saying that)</span></div><div class="line" id="114827"><span class="nick" style="color:#80b1d3"><a href="#114827" label="[11:48:27]">&lt;stikonas&gt;</a></span><span class="message">but I'm still trying to understand why it is so complicated...</span></div><div class="line" id="114924"><span class="nick" style="color:#6d2462"><a href="#114924" label="[11:49:24]">&lt;janneke&gt;</a></span><span class="message">stikonas: to write an 8-byte immediate number</span></div><div class="line" id="115007"><span class="nick" style="color:#80b1d3"><a href="#115007" label="[11:50:07]">&lt;stikonas&gt;</a></span><span class="message">hmm, somehow in M2-Planet we mostly use 4-byte immediates with x86_64 opcodes</span></div><div class="line" id="115009"><span class="nick" style="color:#6d2462"><a href="#115009" label="[11:50:09]">&lt;janneke&gt;</a></span><span class="message">but it's a terrible function, indeed</span></div><div class="line" id="115017"><span class="nick" style="color:#6d2462"><a href="#115017" label="[11:50:17]">&lt;janneke&gt;</a></span><span class="message">yeah</span></div><div class="line" id="115045"><span class="nick" style="color:#80b1d3"><a href="#115045" label="[11:50:45]">&lt;stikonas&gt;</a></span><span class="message">yeah, it spits out something like mov____$i64,%rdi %0x0 %0x-1</span></div><div class="line" id="115047"><span class="nick" style="color:#6d2462"><a href="#115047" label="[11:50:47]">&lt;janneke&gt;</a></span><span class="message">so it writes two times a 4-byte immediate i guess</span></div><div class="line" id="115104"><span class="nick" style="color:#80b1d3"><a href="#115104" label="[11:51:04]">&lt;stikonas&gt;</a></span><span class="message">not sure if it's the same move opcode as in M2-Planet..., probably not...</span></div><div class="line" id="115149"><span class="nick" style="color:#6d2462"><a href="#115149" label="[11:51:49]">&lt;janneke&gt;</a></span><span class="message">yes</span></div><div class="line" id="115204"><span class="nick" style="color:#80b1d3"><a href="#115204" label="[11:52:04]">&lt;stikonas&gt;</a></span><span class="message">yes, it's different</span></div><div class="line" id="115214"><span class="nick" style="color:#80b1d3"><a href="#115214" label="[11:52:14]">&lt;stikonas&gt;</a></span><span class="message">M2-Planet uses mov_rdi, 48C7C7 which expects 32-bit constant only</span></div><div class="line" id="115218"><span class="nick" style="color:#80b1d3"><a href="#115218" label="[11:52:18]">&lt;stikonas&gt;</a></span><span class="message">which is a limitation I guess...</span></div><div class="line" id="115231"><span class="nick" style="color:#80b1d3"><a href="#115231" label="[11:52:31]">&lt;stikonas&gt;</a></span><span class="message">and mescc has mov____$i64,%rdi 48bf</span></div><div class="line" id="115245"><span class="nick" style="color:#6d2462"><a href="#115245" label="[11:52:45]">&lt;janneke&gt;</a></span><span class="message">yeah, i guess the proper fix should be in mescc-tools</span></div><div class="line" id="115328"><span class="nick" style="color:#80b1d3"><a href="#115328" label="[11:53:28]">&lt;stikonas&gt;</a></span><span class="message">hmm, but then we would have to add 8 bit contants there...</span></div><div class="line" id="115340"><span class="nick" style="color:#80b1d3"><a href="#115340" label="[11:53:40]">&lt;stikonas&gt;</a></span><span class="message">(8-byte)</span></div><div class="line" id="115342"><span class="nick" style="color:#80b1d3"><a href="#115342" label="[11:53:42]">&lt;stikonas&gt;</a></span><span class="message">oriansj might not want that</span></div><div class="line" id="115406"><span class="nick" style="color:#80b1d3"><a href="#115406" label="[11:54:06]">&lt;stikonas&gt;</a></span><span class="message">anyway, I now understand the difference between mescc and M2</span></div><div class="line" id="115440"><span class="nick" style="color:#6d2462"><a href="#115440" label="[11:54:40]">&lt;janneke&gt;</a></span><span class="message">yeah, and until now i didn't really care that much as everything was 32bits...</span></div><div class="line" id="115458"><span class="nick" style="color:#389600"><a href="#115458" label="[11:54:58]">&lt;muurkha&gt;</a></span><span class="message">stikonas: is there an explanation that would have enabled you to understand that difference much earlier?</span></div><div class="line" id="115505"><span class="nick" style="color:#6d2462"><a href="#115505" label="[11:55:05]">&lt;janneke&gt;</a></span><span class="message">i.e., x86_64 was known to be broken anyway...</span></div><div class="line" id="115521"><span class="nick" style="color:#389600"><a href="#115521" label="[11:55:21]">&lt;muurkha&gt;</a></span><span class="message">I'm thinking that if you can imagine one, this would be a great time to write it down and commit it to Git</span></div><div class="line" id="115531"><span class="nick" style="color:#389600"><a href="#115531" label="[11:55:31]">&lt;muurkha&gt;</a></span><span class="message">or the Wiki</span></div><div class="line" id="115544"><span class="nick" style="color:#389600"><a href="#115544" label="[11:55:44]">&lt;muurkha&gt;</a></span><span class="message">because probably many, many people will benefit from reading it</span></div><div class="line" id="115600"><span class="nick" style="color:#80b1d3"><a href="#115600" label="[11:56:00]">&lt;stikonas&gt;</a></span><span class="message">muurkha: well, I just didn't dig too deep into source, somehow didn't expect that mescc does it differently</span></div><div class="line" id="115622"><span class="nick" style="color:#80b1d3"><a href="#115622" label="[11:56:22]">&lt;stikonas&gt;</a></span><span class="message">janneke: yeah, I know that x86_64 is broken... though it's not too broken</span></div><div class="line" id="115635"><span class="nick" style="color:#80b1d3"><a href="#115635" label="[11:56:35]">&lt;stikonas&gt;</a></span><span class="message">it can already self-host itself</span></div><div class="line" id="115709"><span class="nick" style="color:#6d2462"><a href="#115709" label="[11:57:09]">&lt;janneke&gt;</a></span><span class="message">true, it could/should work really...but it just hasn't produced a viable tcc</span></div><div class="line" id="115728"><span class="nick" style="color:#6d2462"><a href="#115728" label="[11:57:28]">&lt;janneke&gt;</a></span><span class="message">(broken is a bit too harsh)</span></div><div class="line" id="115731"><span class="nick" style="color:#80b1d3"><a href="#115731" label="[11:57:31]">&lt;stikonas&gt;</a></span><span class="message">yeah, it crashes for me in set_idnum</span></div><div class="line" id="115739"><span class="nick" style="color:#80b1d3"><a href="#115739" label="[11:57:39]">&lt;stikonas&gt;</a></span><span class="message">(which does isidnum_table[c - CH_EOF] = val;)</span></div><div class="line" id="115753"><span class="nick" style="color:#80b1d3"><a href="#115753" label="[11:57:53]">&lt;stikonas&gt;</a></span><span class="message">and that's where I noticed that something strange is going on with that immediate8 function</span></div><div class="line" id="115802"><span class="nick" style="color:#6d2462"><a href="#115802" label="[11:58:02]">&lt;janneke&gt;</a></span><span class="message">right</span></div><div class="line" id="115821"><span class="nick" style="color:#80b1d3"><a href="#115821" label="[11:58:21]">&lt;stikonas&gt;</a></span><span class="message">it compiles into movabs rdi, 0xffffffff00000000 (in intel syntax)</span></div><div class="line" id="115920"><span class="nick" style="color:#80b1d3"><a href="#115920" label="[11:59:20]">&lt;stikonas&gt;</a></span><span class="message">(and original instruction was mov____$i64,%rdi %0x0 %0x-1)</span></div><div class="line" id="120001"><span class="nick" style="color:#80b1d3"><a href="#120001" label="[12:00:01]">&lt;stikonas&gt;</a></span><span class="message">and that %0x0 seems suspicious</span></div><div class="line" id="120046"><span class="nick" style="color:#6d2462"><a href="#120046" label="[12:00:46]">&lt;janneke&gt;</a></span><span class="message">yes, that looks weird</span></div><div class="line" id="120057"><span class="nick" style="color:#80b1d3"><a href="#120057" label="[12:00:57]">&lt;stikonas&gt;</a></span><span class="message">which I guess happens because #x100000000 is 0 on mes</span></div><div class="line" id="120115"><span class="nick" style="color:#6d2462"><a href="#120115" label="[12:01:15]">&lt;janneke&gt;</a></span><span class="message">(i'm unsure about how/when sign extension would work)</span></div><div class="line" id="120134"><span class="nick" style="color:#6d2462"><a href="#120134" label="[12:01:34]">&lt;janneke&gt;</a></span><span class="message">ah, that could be</span></div><div class="line" id="120355"><span class="nick" style="color:#2e2a4a"><a href="#120355" label="[12:03:55]">&lt;oriansj&gt;</a></span><span class="message">well, the only reason we don't have 64bit constants in M1/hex2 is there has not been an architecture that required them to bootstrap to the next level (same for 128/256/512/etc bit constants)</span></div><div class="line" id="120517"><span class="nick" style="color:#6d2462"><a href="#120517" label="[12:05:17]">&lt;janneke&gt;</a></span><span class="message">that makes sense</span></div><div class="line" id="120940"><span class="nick" style="color:#80b1d3"><a href="#120940" label="[12:09:40]">&lt;stikonas&gt;</a></span><span class="message">well, in principle we should be able to spit correct instruction in mescc too</span></div><div class="line" id="121011"><span class="nick" style="color:#80b1d3"><a href="#121011" label="[12:10:11]">&lt;stikonas&gt;</a></span><span class="message">(I'm not even sure if tcc 0.9.26 even has any big constants...)</span></div><div class="line" id="121025"><span class="nick" style="color:#2e2a4a"><a href="#121025" label="[12:10:25]">&lt;oriansj&gt;</a></span><span class="message">48C7C7 %-1 makes the same register value as 48BF %-1 %-1 but is 3 bytes shorter</span></div><div class="line" id="121046"><span class="nick" style="color:#80b1d3"><a href="#121046" label="[12:10:46]">&lt;stikonas&gt;</a></span><span class="message">indeed</span></div><div class="line" id="121055"><span class="nick" style="color:#80b1d3"><a href="#121055" label="[12:10:55]">&lt;stikonas&gt;</a></span><span class="message">so maybe we should fix up mescc to use 48C7C7</span></div><div class="line" id="121120"><span class="nick" style="color:#80b1d3"><a href="#121120" label="[12:11:20]">&lt;stikonas&gt;</a></span><span class="message">though this would break if we really use  &gt; 32-bit immediates</span></div><div class="line" id="121145"><span class="nick" style="color:#80b1d3"><a href="#121145" label="[12:11:45]">&lt;stikonas&gt;</a></span><span class="message">(which most likely we are not)</span></div><div class="line" id="121146"><span class="nick" style="color:#2e2a4a"><a href="#121146" label="[12:11:46]">&lt;oriansj&gt;</a></span><span class="message">well if janneke wants to add some basic immediate optimizations</span></div><div class="line" id="121323"><span class="nick" style="color:#80b1d3"><a href="#121323" label="[12:13:23]">&lt;stikonas&gt;</a></span><span class="message">hmm, so far I found stuff like o(0xe5894855); in tcc</span></div><div class="line" id="121338"><span class="nick" style="color:#80b1d3"><a href="#121338" label="[12:13:38]">&lt;stikonas&gt;</a></span><span class="message">so it has 31-st bit set</span></div><div class="line" id="121341"><span class="nick" style="color:#2e2a4a"><a href="#121341" label="[12:13:41]">&lt;oriansj&gt;</a></span><span class="message">then a check to see if the immediate fits in 8bits, 16bits, and 32bits can result in denser binaries and fallback logic to the current code probably will cover the ugly cases</span></div><div class="line" id="121402"><span class="nick" style="color:#80b1d3"><a href="#121402" label="[12:14:02]">&lt;stikonas&gt;</a></span><span class="message">except that current code is broken due to mes bug</span></div><div class="line" id="121409"><span class="nick" style="color:#80b1d3"><a href="#121409" label="[12:14:09]">&lt;stikonas&gt;</a></span><span class="message">(probably work on guile)</span></div><div class="line" id="121442"><span class="nick" style="color:#6d2462"><a href="#121442" label="[12:14:42]">&lt;janneke&gt;</a></span><span class="message">yes, best to get it to work on guile first</span></div><div class="line" id="121513"><span class="nick" style="color:#80b1d3"><a href="#121513" label="[12:15:13]">&lt;stikonas&gt;</a></span><span class="message">argh, but tcc code is so ugly</span></div><div class="line" id="121521"><span class="nick" style="color:#80b1d3"><a href="#121521" label="[12:15:21]">&lt;stikonas&gt;</a></span><span class="message">who calls function &quot;o&quot;</span></div><div class="line" id="121531"><span class="nick" style="color:#80b1d3"><a href="#121531" label="[12:15:31]">&lt;stikonas&gt;</a></span><span class="message">I guess it's output</span></div><div class="line" id="121534"><span class="nick" style="color:#80b1d3"><a href="#121534" label="[12:15:34]">&lt;stikonas&gt;</a></span><span class="message">but still..</span></div><div class="line" id="141132"><span class="nick" style="color:#80b1d3"><a href="#141132" label="[14:11:32]">&lt;stikonas&gt;</a></span><span class="message">janneke: so I think I'm getting non-segfaulting tcc on amd64 if I build with guile</span></div><div class="line" id="141205"><span class="nick" style="color:#6d2462"><a href="#141205" label="[14:12:05]">&lt;janneke&gt;</a></span><span class="message">stikonas: oh, that's _amazing_</span></div><div class="line" id="141216"><span class="nick" style="color:#6d2462"><a href="#141216" label="[14:12:16]">&lt;janneke&gt;</a></span><span class="message">well done!</span></div><div class="line" id="141218"><span class="nick" style="color:#80b1d3"><a href="#141218" label="[14:12:18]">&lt;stikonas&gt;</a></span><span class="message">I've only tried on a very small c file</span></div><div class="line" id="141224"><span class="nick" style="color:#80b1d3"><a href="#141224" label="[14:12:24]">&lt;stikonas&gt;</a></span><span class="message">(just return 42;)</span></div><div class="line" id="141240"><span class="nick" style="color:#6d2462"><a href="#141240" label="[14:12:40]">&lt;janneke&gt;</a></span><span class="message">well still, that's a start</span></div><div class="line" id="141325"><span class="nick" style="color:#80b1d3"><a href="#141325" label="[14:13:25]">&lt;stikonas&gt;</a></span><span class="message">yeah, disassembly seems alright</span></div><div class="line" id="141341"><span class="nick" style="color:#80b1d3"><a href="#141341" label="[14:13:41]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1284824/">https://paste.debian.net/1284824/</a> </span></div><div class="line" id="141350"><span class="nick" style="color:#80b1d3"><a href="#141350" label="[14:13:50]">&lt;stikonas&gt;</a></span><span class="message">janneke: so I think we only need to deal/workaround mes bugs</span></div><div class="line" id="141414"><span class="nick" style="color:#80b1d3"><a href="#141414" label="[14:14:14]">&lt;stikonas&gt;</a></span><span class="message">hmm, or did I build 32-bit tcc...</span></div><div class="line" id="141424"><span class="nick" style="color:#80b1d3"><a href="#141424" label="[14:14:24]">&lt;stikonas&gt;</a></span><span class="message">mov    $0x2a,%eax seems a bit suspicious</span></div><div class="line" id="141507"><span class="nick" style="color:#6d2462"><a href="#141507" label="[14:15:07]">&lt;janneke&gt;</a></span><span class="message">there are some 32bit instructions used in 64 bit too, but not all that much</span></div><div class="line" id="141510"><span class="nick" style="color:#80b1d3"><a href="#141510" label="[14:15:10]">&lt;stikonas&gt;</a></span><span class="message">hmm, no, mes-tcc-guile: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, no section header</span></div><div class="line" id="141515"><span class="nick" style="color:#80b1d3"><a href="#141515" label="[14:15:15]">&lt;stikonas&gt;</a></span><span class="message">that seems like 64-bit</span></div><div class="line" id="141522"><span class="nick" style="color:#80b1d3"><a href="#141522" label="[14:15:22]">&lt;stikonas&gt;</a></span><span class="message">maybe tcc uses them more</span></div><div class="line" id="141535"><span class="nick" style="color:#80b1d3"><a href="#141535" label="[14:15:35]">&lt;stikonas&gt;</a></span><span class="message">anyway, that immediate8 on guile assembles to</span></div><div class="line" id="141600"><span class="nick" style="color:#6d2462"><a href="#141600" label="[14:16:00]">&lt;janneke&gt;</a></span><span class="message">hmm, push %ebp =&gt; 32bit i guess</span></div><div class="line" id="141601"><span class="nick" style="color:#80b1d3"><a href="#141601" label="[14:16:01]">&lt;stikonas&gt;</a></span><span class="message">mov____$i64,%rdi %0xffffffff %0x-1</span></div><div class="line" id="141640"><span class="nick" style="color:#80b1d3"><a href="#141640" label="[14:16:40]">&lt;stikonas&gt;</a></span><span class="message">oh, I didn't set TCC_TARGET_ARCH correctly</span></div><div class="line" id="141700"><span class="nick" style="color:#80b1d3"><a href="#141700" label="[14:17:00]">&lt;stikonas&gt;</a></span><span class="message">I've set TCC_TARGET_ARCH 1</span></div><div class="line" id="141703"><span class="nick" style="color:#80b1d3"><a href="#141703" label="[14:17:03]">&lt;stikonas&gt;</a></span><span class="message">that's wrong</span></div><div class="line" id="141705"><span class="nick" style="color:#80b1d3"><a href="#141705" label="[14:17:05]">&lt;stikonas&gt;</a></span><span class="message">let me retry...</span></div><div class="line" id="141730"><span class="nick" style="color:#6d2462"><a href="#141730" label="[14:17:30]">&lt;janneke&gt;</a></span><span class="message">ah ;)</span></div><div class="line" id="141749"><span class="nick" style="color:#6d2462"><a href="#141749" label="[14:17:49]">&lt;janneke&gt;</a></span><span class="message">cross compiling is waaay too easy with these bootstrap tools</span></div><div class="line" id="141756"><span class="nick" style="color:#80b1d3"><a href="#141756" label="[14:17:56]">&lt;stikonas&gt;</a></span><span class="message">yeah...</span></div><div class="line" id="141812"><span class="nick" style="color:#80b1d3"><a href="#141812" label="[14:18:12]">&lt;stikonas&gt;</a></span><span class="message">and my environment is a bit messy right now</span></div><div class="line" id="141822"><span class="nick" style="color:#80b1d3"><a href="#141822" label="[14:18:22]">&lt;stikonas&gt;</a></span><span class="message">as I've injected guile into my bootstrap chroot</span></div><div class="line" id="141844"><span class="nick" style="color:#80b1d3"><a href="#141844" label="[14:18:44]">&lt;stikonas&gt;</a></span><span class="message">but probably missed something and guile has trouble parsing command line...</span></div><div class="line" id="141854"><span class="nick" style="color:#80b1d3"><a href="#141854" label="[14:18:54]">&lt;stikonas&gt;</a></span><span class="message">so it was compiling output to file called -S.s</span></div><div class="line" id="141949"><span class="nick" style="color:#6d2462"><a href="#141949" label="[14:19:49]">&lt;janneke&gt;</a></span><span class="message">oh :)</span></div><div class="line" id="142037"><span class="nick" style="color:#80b1d3"><a href="#142037" label="[14:20:37]">&lt;stikonas&gt;</a></span><span class="message">still, I think the main issue right now is that immediate8 function</span></div><div class="line" id="142056"><span class="nick" style="color:#6d2462"><a href="#142056" label="[14:20:56]">&lt;janneke&gt;</a></span><span class="message">yeah, that seems quite plausible</span></div><div class="line" id="142427"><span class="nick" style="color:#80b1d3"><a href="#142427" label="[14:24:27]">&lt;stikonas&gt;</a></span><span class="message">ok, the diff between mes build and guile build <a rel="nofollow" href="https://paste.debian.net/1284827/">https://paste.debian.net/1284827/</a> </span></div><div class="line" id="142436"><span class="nick" style="color:#80b1d3"><a href="#142436" label="[14:24:36]">&lt;stikonas&gt;</a></span><span class="message">lots of noise due to wrong file name though</span></div><div class="line" id="142508"><span class="nick" style="color:#80b1d3"><a href="#142508" label="[14:25:08]">&lt;stikonas&gt;</a></span><span class="message">and I think remaining stuff is real diff from immediate8, e.g. %0xfffffffc instead of %0x0</span></div><div class="line" id="142624"><span class="nick" style="color:#6d2462"><a href="#142624" label="[14:26:24]">&lt;janneke&gt;</a></span><span class="message">yeah, sed'ing the -S.s tcc.s bit first would help</span></div><div class="line" id="142636"><span class="nick" style="color:#80b1d3"><a href="#142636" label="[14:26:36]">&lt;stikonas&gt;</a></span><span class="message">janneke: ok, so there are more issues with amd64 build...</span></div><div class="line" id="142655"><span class="nick" style="color:#80b1d3"><a href="#142655" label="[14:26:55]">&lt;stikonas&gt;</a></span><span class="message">it looks like final binary that I've got now loops...</span></div><div class="line" id="142745"><span class="nick" style="color:#80b1d3"><a href="#142745" label="[14:27:45]">&lt;stikonas&gt;</a></span><span class="message">(with the memory leak)</span></div><div class="line" id="142829"><span class="nick" style="color:#80b1d3"><a href="#142829" label="[14:28:29]">&lt;stikonas&gt;</a></span><span class="message">I guess something is wrong in x86_64 backend then</span></div><div class="line" id="142840"><span class="nick" style="color:#80b1d3"><a href="#142840" label="[14:28:40]">&lt;stikonas&gt;</a></span><span class="message">anyway, probably worth to first sort out immediate8</span></div><div class="line" id="142907"><span class="nick" style="color:#6d2462"><a href="#142907" label="[14:29:07]">&lt;janneke&gt;</a></span><span class="message">yes, it's often better not to guess beyond the first known bug</span></div><div class="line" id="142951"><span class="nick" style="color:#80b1d3"><a href="#142951" label="[14:29:51]">&lt;stikonas&gt;</a></span><span class="message">indeed and immediate8 happens earlier</span></div><div class="line" id="143018"><span class="nick" style="color:#80b1d3"><a href="#143018" label="[14:30:18]">&lt;stikonas&gt;</a></span><span class="message">with it solved, we should at least be able to run &quot;tcc -v&quot; or tcc --help&quot;</span></div><div class="line" id="143449"><span class="nick" style="color:#80b1d3"><a href="#143449" label="[14:34:49]">&lt;stikonas&gt;</a></span><span class="message">ok, after sedding it's indeed just immediate8 diff between mes and guile</span></div><div class="line" id="144057"><span class="nick" style="color:#6d2462"><a href="#144057" label="[14:40:57]">&lt;janneke&gt;</a></span><span class="message">good</span></div><div class="line" id="150842"><span class="nick" style="color:#80b1d3"><a href="#150842" label="[15:08:42]">&lt;stikonas&gt;</a></span><span class="message">janneke: hmm, so I think mes just doesn't support anything more than 32-bits</span></div><div class="line" id="150902"><span class="nick" style="color:#80b1d3"><a href="#150902" label="[15:09:02]">&lt;stikonas&gt;</a></span><span class="message">and stuff with highest bit set is interpreted as negative number</span></div><div class="line" id="150925"><span class="nick" style="color:#80b1d3"><a href="#150925" label="[15:09:25]">&lt;stikonas&gt;</a></span><span class="message">would you be happy to restrict immediate8 to 32-bits then?</span></div><div class="line" id="151056"><span class="nick" style="color:#80b1d3"><a href="#151056" label="[15:10:56]">&lt;stikonas&gt;</a></span><span class="message">hmm, though on the other hand that might cause some issues with 32-bit constants in tcc...</span></div><div class="line" id="151125"><span class="nick" style="color:#6d2462"><a href="#151125" label="[15:11:25]">&lt;janneke&gt;</a></span><span class="message">hmm</span></div><div class="line" id="151130"><span class="nick" style="color:#6d2462"><a href="#151130" label="[15:11:30]">&lt;janneke&gt;</a></span><span class="message">ACTION vas going to say...</span></div><div class="line" id="151158"><span class="nick" style="color:#6d2462"><a href="#151158" label="[15:11:58]">&lt;janneke&gt;</a></span><span class="message">i think not supporting 8-byte immediates (and bombing out?) is much better than silently doing the wrong thing</span></div><div class="line" id="151249"><span class="nick" style="color:#80b1d3"><a href="#151249" label="[15:12:49]">&lt;stikonas&gt;</a></span><span class="message">hmm, I was thinking of just putting either 0 or #xffffffff in the first 4 bytes</span></div><div class="line" id="151255"><span class="nick" style="color:#6d2462"><a href="#151255" label="[15:12:55]">&lt;janneke&gt;</a></span><span class="message">i wonder how broken mes is, would a 64bit gcc-built mes possibly do the right thing?</span></div><div class="line" id="151257"><span class="nick" style="color:#80b1d3"><a href="#151257" label="[15:12:57]">&lt;stikonas&gt;</a></span><span class="message">(depending on the size of o)</span></div><div class="line" id="151308"><span class="nick" style="color:#80b1d3"><a href="#151308" label="[15:13:08]">&lt;stikonas&gt;</a></span><span class="message">janneke: hmm, good question</span></div><div class="line" id="151311"><span class="nick" style="color:#80b1d3"><a href="#151311" label="[15:13:11]">&lt;stikonas&gt;</a></span><span class="message">that's worth trying</span></div><div class="line" id="151343"><span class="nick" style="color:#80b1d3"><a href="#151343" label="[15:13:43]">&lt;stikonas&gt;</a></span><span class="message">no, that's also broken</span></div><div class="line" id="151351"><span class="nick" style="color:#6d2462"><a href="#151351" label="[15:13:51]">&lt;janneke&gt;</a></span><span class="message">otoh, if that &quot;just putting either 0 or #xffffffff&quot; works, that would be OK too?</span></div><div class="line" id="151351"><span class="nick" style="color:#80b1d3"><a href="#151351" label="[15:13:51]">&lt;stikonas&gt;</a></span><span class="message">mes&gt; #100000000</span></div><div class="line" id="151352"><span class="nick" style="color:#80b1d3"><a href="#151352" label="[15:13:52]">&lt;stikonas&gt;</a></span><span class="message">[sexp=0]</span></div><div class="line" id="151358"><span class="nick" style="color:#6d2462"><a href="#151358" label="[15:13:58]">&lt;janneke&gt;</a></span><span class="message">OK</span></div><div class="line" id="151405"><span class="nick" style="color:#80b1d3"><a href="#151405" label="[15:14:05]">&lt;stikonas&gt;</a></span><span class="message">that I'm not yet sure...</span></div><div class="line" id="151411"><span class="nick" style="color:#80b1d3"><a href="#151411" label="[15:14:11]">&lt;stikonas&gt;</a></span><span class="message">because tcc has some 32-bit expressions</span></div><div class="line" id="151436"><span class="nick" style="color:#80b1d3"><a href="#151436" label="[15:14:36]">&lt;stikonas&gt;</a></span><span class="message">stuff like o(0xf02444dd)</span></div><div class="line" id="151456"><span class="nick" style="color:#80b1d3"><a href="#151456" label="[15:14:56]">&lt;stikonas&gt;</a></span><span class="message">and it's hard to tell whether interpreting this as negative number</span></div><div class="line" id="151458"><span class="nick" style="color:#80b1d3"><a href="#151458" label="[15:14:58]">&lt;stikonas&gt;</a></span><span class="message">would break things</span></div><div class="line" id="151510"><span class="nick" style="color:#6d2462"><a href="#151510" label="[15:15:10]">&lt;janneke&gt;</a></span><span class="message">yea</span></div><div class="line" id="151610"><span class="nick" style="color:#80b1d3"><a href="#151610" label="[15:16:10]">&lt;stikonas&gt;</a></span><span class="message">though perhaps we could patch it out on tcc side</span></div><div class="line" id="151621"><span class="nick" style="color:#80b1d3"><a href="#151621" label="[15:16:21]">&lt;stikonas&gt;</a></span><span class="message">I suspect something like</span></div><div class="line" id="151641"><span class="nick" style="color:#80b1d3"><a href="#151641" label="[15:16:41]">&lt;stikonas&gt;</a></span><span class="message">o(0x44dd); o(0xf024); would do the same thing</span></div><div class="line" id="151713"><span class="nick" style="color:#6d2462"><a href="#151713" label="[15:17:13]">&lt;janneke&gt;</a></span><span class="message">right</span></div><div class="line" id="152005"><span class="nick" style="color:#80b1d3"><a href="#152005" label="[15:20:05]">&lt;stikonas&gt;</a></span><span class="message">anyway, at least I have a better understanding of problems with bootstrapping x86_64 now</span></div><div class="line" id="152041"><span class="nick" style="color:#80b1d3"><a href="#152041" label="[15:20:41]">&lt;stikonas&gt;</a></span><span class="message">though I'm surprised that we can bootstrap mes-m2 -&gt; mes with that immediate8 issue</span></div><div class="line" id="152146"><span class="nick" style="color:#6d2462"><a href="#152146" label="[15:21:46]">&lt;janneke&gt;</a></span><span class="message">indeed...</span></div><div class="line" id="165301"><span class="nick" style="color:#80b1d3"><a href="#165301" label="[16:53:01]">&lt;stikonas&gt;</a></span><span class="message">hmm, I'm confused where mes 32-bit variable limit comes from...</span></div><div class="line" id="165325"><span class="nick" style="color:#80b1d3"><a href="#165325" label="[16:53:25]">&lt;stikonas&gt;</a></span><span class="message">it seems R1 global struct has the correct value...</span></div><div class="line" id="170531"><span class="nick" style="color:#80b1d3"><a href="#170531" label="[17:05:31]">&lt;stikonas&gt;</a></span><span class="message">let's instead workaround mescc...</span></div><div class="line" id="171610"><span class="nick" style="color:#6d2462"><a href="#171610" label="[17:16:10]">&lt;janneke&gt;</a></span><span class="message">R1 has it right?</span></div><div class="line" id="171623"><span class="nick" style="color:#6d2462"><a href="#171623" label="[17:16:23]">&lt;janneke&gt;</a></span><span class="message">so what about this, in src/display.c:</span></div><div class="line" id="171628"><span class="nick" style="color:#6d2462"><a href="#171628" label="[17:16:28]">&lt;janneke&gt;</a></span><span class="message">  else if (t == TNUMBER)</span></div><div class="line" id="171628"><span class="nick" style="color:#6d2462"><a href="#171628" label="[17:16:28]">&lt;janneke&gt;</a></span><span class="message">    {</span></div><div class="line" id="171628"><span class="nick" style="color:#6d2462"><a href="#171628" label="[17:16:28]">&lt;janneke&gt;</a></span><span class="message">      fdputs (itoa (x-&gt;value), fd);</span></div><div class="line" id="171630"><span class="nick" style="color:#6d2462"><a href="#171630" label="[17:16:30]">&lt;janneke&gt;</a></span><span class="message">    }</span></div><div class="line" id="171635"><span class="nick" style="color:#6d2462"><a href="#171635" label="[17:16:35]">&lt;janneke&gt;</a></span><span class="message">together with...</span></div><div class="line" id="171655"><span class="nick" style="color:#6d2462"><a href="#171655" label="[17:16:55]">&lt;janneke&gt;</a></span><span class="message">char *</span></div><div class="line" id="171656"><span class="nick" style="color:#6d2462"><a href="#171656" label="[17:16:56]">&lt;janneke&gt;</a></span><span class="message">itoa (int x)</span></div><div class="line" id="171731"><span class="nick" style="color:#6d2462"><a href="#171731" label="[17:17:31]">&lt;janneke&gt;</a></span><span class="message">stikonas: did you test using the REPL? (i.e., printing/display?)</span></div><div class="line" id="171751"><span class="nick" style="color:#6d2462"><a href="#171751" label="[17:17:51]">&lt;janneke&gt;</a></span><span class="message">i guess that itoa here is wrong and truncates the value</span></div><div class="line" id="171756"><span class="nick" style="color:#80b1d3"><a href="#171756" label="[17:17:56]">&lt;stikonas&gt;</a></span><span class="message">hmm, let me check</span></div><div class="line" id="171758"><span class="nick" style="color:#80b1d3"><a href="#171758" label="[17:17:58]">&lt;stikonas&gt;</a></span><span class="message">it might be here</span></div><div class="line" id="171806"><span class="nick" style="color:#80b1d3"><a href="#171806" label="[17:18:06]">&lt;stikonas&gt;</a></span><span class="message">I didn't check display...</span></div><div class="line" id="171834"><span class="nick" style="color:#6d2462"><a href="#171834" label="[17:18:34]">&lt;janneke&gt;</a></span><span class="message">display.c should use ltoa</span></div><div class="line" id="171850"><span class="nick" style="color:#80b1d3"><a href="#171850" label="[17:18:50]">&lt;stikonas&gt;</a></span><span class="message">janneke: yep</span></div><div class="line" id="171853"><span class="nick" style="color:#80b1d3"><a href="#171853" label="[17:18:53]">&lt;stikonas&gt;</a></span><span class="message">I think that fixes it</span></div><div class="line" id="171859"><span class="nick" style="color:#6d2462"><a href="#171859" label="[17:18:59]">&lt;janneke&gt;</a></span><span class="message">(and seeing this, there may be other int/long problems)</span></div><div class="line" id="171909"><span class="nick" style="color:#80b1d3"><a href="#171909" label="[17:19:09]">&lt;stikonas&gt;</a></span><span class="message">mes&gt; #x100000000</span></div><div class="line" id="171911"><span class="nick" style="color:#80b1d3"><a href="#171911" label="[17:19:11]">&lt;stikonas&gt;</a></span><span class="message">[sexp=4294967296]</span></div><div class="line" id="171916"><span class="nick" style="color:#80b1d3"><a href="#171916" label="[17:19:16]">&lt;stikonas&gt;</a></span><span class="message">though I have a lot of other int-&gt;long replacements</span></div><div class="line" id="171921"><span class="nick" style="color:#80b1d3"><a href="#171921" label="[17:19:21]">&lt;stikonas&gt;</a></span><span class="message">let me test it in isolation</span></div><div class="line" id="172010"><span class="nick" style="color:#80b1d3"><a href="#172010" label="[17:20:10]">&lt;stikonas&gt;</a></span><span class="message">ok, that alone fixes</span></div><div class="line" id="172025"><span class="nick" style="color:#80b1d3"><a href="#172025" label="[17:20:25]">&lt;stikonas&gt;</a></span><span class="message">the following commmand #x100000000</span></div><div class="line" id="172134"><span class="nick" style="color:#80b1d3"><a href="#172134" label="[17:21:34]">&lt;stikonas&gt;</a></span><span class="message">janneke: can you apply that patch to branches then?</span></div><div class="line" id="172149"><span class="nick" style="color:#80b1d3"><a href="#172149" label="[17:21:49]">&lt;stikonas&gt;</a></span><span class="message">I guess wip and wip-riscv</span></div><div class="line" id="172203"><span class="nick" style="color:#80b1d3"><a href="#172203" label="[17:22:03]">&lt;stikonas&gt;</a></span><span class="message">well, wip-x86_64...</span></div><div class="line" id="172330"><span class="nick" style="color:#6d2462"><a href="#172330" label="[17:23:30]">&lt;janneke&gt;</a></span><span class="message">the itoa=&gt;ltoa?  sure</span></div><div class="line" id="172340"><span class="nick" style="color:#80b1d3"><a href="#172340" label="[17:23:40]">&lt;stikonas&gt;</a></span><span class="message">yes</span></div><div class="line" id="172350"><span class="nick" style="color:#80b1d3"><a href="#172350" label="[17:23:50]">&lt;stikonas&gt;</a></span><span class="message">so that we have</span></div><div class="line" id="172352"><span class="nick" style="color:#80b1d3"><a href="#172352" label="[17:23:52]">&lt;stikonas&gt;</a></span><span class="message">fdputs (ltoa (x-&gt;value), fd);</span></div><div class="line" id="172412"><span class="nick" style="color:#80b1d3"><a href="#172412" label="[17:24:12]">&lt;stikonas&gt;</a></span><span class="message">perhaps this will need further testing...</span></div><div class="line" id="172417"><span class="nick" style="color:#80b1d3"><a href="#172417" label="[17:24:17]">&lt;stikonas&gt;</a></span><span class="message">I'll try to do it later today</span></div><div class="line" id="172436"><span class="nick" style="color:#80b1d3"><a href="#172436" label="[17:24:36]">&lt;stikonas&gt;</a></span><span class="message">since there is a small chance that something breaks</span></div><div class="line" id="172445"><span class="nick" style="color:#80b1d3"><a href="#172445" label="[17:24:45]">&lt;stikonas&gt;</a></span><span class="message">still, it seems the right thing to do here</span></div><div class="line" id="172825"><span class="nick" style="color:#6d2462"><a href="#172825" label="[17:28:25]">&lt;janneke&gt;</a></span><span class="message">stikonas: pushed (i also changed the other usages in display.c, you never know, any value could be 64bit i guess)</span></div><div class="line" id="172835"><span class="nick" style="color:#80b1d3"><a href="#172835" label="[17:28:35]">&lt;stikonas&gt;</a></span><span class="message">thanks</span></div><div class="line" id="172848"><span class="nick" style="color:#6d2462"><a href="#172848" label="[17:28:48]">&lt;janneke&gt;</a></span><span class="message">u2!</span></div><div class="line" id="172853"><span class="nick" style="color:#80b1d3"><a href="#172853" label="[17:28:53]">&lt;stikonas&gt;</a></span><span class="message">will retest now, though will take some time</span></div><div class="line" id="172910"><span class="nick" style="color:#80b1d3"><a href="#172910" label="[17:29:10]">&lt;stikonas&gt;</a></span><span class="message">I need to rebase my scripts, and I had hand-patched some extra tcc stuff</span></div><div class="line" id="172953"><span class="nick" style="color:#80b1d3"><a href="#172953" label="[17:29:53]">&lt;stikonas&gt;</a></span><span class="message">janneke: where did you push?</span></div><div class="line" id="172957"><span class="nick" style="color:#80b1d3"><a href="#172957" label="[17:29:57]">&lt;stikonas&gt;</a></span><span class="message">savannah or gitlab?</span></div><div class="line" id="173015"><span class="nick" style="color:#80b1d3"><a href="#173015" label="[17:30:15]">&lt;stikonas&gt;</a></span><span class="message">I can't see in either of them</span></div><div class="line" id="173136"><span class="nick" style="color:#6d2462"><a href="#173136" label="[17:31:36]">&lt;janneke&gt;</a></span><span class="message">stikonas: both, wip-x86_64, wip-riscv</span></div><div class="line" id="173138"><span class="nick" style="color:#6d2462"><a href="#173138" label="[17:31:38]">&lt;janneke&gt;</a></span><span class="message">e52f29f6 * core: Avoid displaying truncated 64bit values.</span></div><div class="line" id="173210"><span class="nick" style="color:#80b1d3"><a href="#173210" label="[17:32:10]">&lt;stikonas&gt;</a></span><span class="message">ok, I can see it now</span></div><div class="line" id="173214"><span class="nick" style="color:#80b1d3"><a href="#173214" label="[17:32:14]">&lt;stikonas&gt;</a></span><span class="message">perhaps browser cache...</span></div><div class="line" id="173307"><span class="nick" style="color:#6d2462"><a href="#173307" label="[17:33:07]">&lt;janneke&gt;</a></span><span class="message">we're not using that many INTs in src/</span></div><div class="line" id="173341"><span class="nick" style="color:#6d2462"><a href="#173341" label="[17:33:41]">&lt;janneke&gt;</a></span><span class="message">(...but possibly in lib/ somewhere..., we'll see...)</span></div><div class="line" id="173823"><span class="nick" style="color:#80b1d3"><a href="#173823" label="[17:38:23]">&lt;stikonas&gt;</a></span><span class="message">indeed. I'll check how tccpp.c is assembled now</span></div><div class="line" id="173835"><span class="nick" style="color:#80b1d3"><a href="#173835" label="[17:38:35]">&lt;stikonas&gt;</a></span><span class="message">in particular that immediate8 stuff...</span></div><div class="line" id="195809"><span class="nick" style="color:#80b1d3"><a href="#195809" label="[19:58:09]">&lt;stikonas&gt;</a></span><span class="message">janneke: so the bad news is that just fixing display did not fix compile output of hex2:immediate8</span></div><div class="line" id="195844"><span class="nick" style="color:#80b1d3"><a href="#195844" label="[19:58:44]">&lt;stikonas&gt;</a></span><span class="message">there must be something else...</span></div><div class="line" id="195853"><span class="nick" style="color:#6d2462"><a href="#195853" label="[19:58:53]">&lt;janneke&gt;</a></span><span class="message">crap</span></div><div class="line" id="200211"><span class="nick" style="color:#80b1d3"><a href="#200211" label="[20:02:11]">&lt;stikonas&gt;</a></span><span class="message">but I can reproduce it outside mescc</span></div><div class="line" id="200221"><span class="nick" style="color:#80b1d3"><a href="#200221" label="[20:02:21]">&lt;stikonas&gt;</a></span><span class="message">so that will help</span></div><div class="line" id="200240"><span class="nick" style="color:#80b1d3"><a href="#200240" label="[20:02:40]">&lt;stikonas&gt;</a></span><span class="message">I just grabbed hex? mesc? dec-&gt;hex and hex2:immediate8 functions</span></div><div class="line" id="200250"><span class="nick" style="color:#80b1d3"><a href="#200250" label="[20:02:50]">&lt;stikonas&gt;</a></span><span class="message">and I could reproduce it</span></div><div class="line" id="200331"><span class="nick" style="color:#80b1d3"><a href="#200331" label="[20:03:31]">&lt;stikonas&gt;</a></span><span class="message">so with &quot;mes&gt; (hex2:immediate8 -1)&quot; I get</span></div><div class="line" id="200340"><span class="nick" style="color:#80b1d3"><a href="#200340" label="[20:03:40]">&lt;stikonas&gt;</a></span><span class="message">$1 = &quot;%0x0 %0x-1&quot;</span></div><div class="line" id="200652"><span class="nick" style="color:#80b1d3"><a href="#200652" label="[20:06:52]">&lt;stikonas&gt;</a></span><span class="message">oh, perhaps it's the workaround if mesc? 0  that messes things up</span></div><div class="line" id="200710"><span class="nick" style="color:#80b1d3"><a href="#200710" label="[20:07:10]">&lt;stikonas&gt;</a></span><span class="message">which was added to avoid division by 0</span></div><div class="line" id="200915"><span class="nick" style="color:#6d2462"><a href="#200915" label="[20:09:15]">&lt;janneke&gt;</a></span><span class="message">oh my, hidden in plain sight</span></div><div class="line" id="201006"><span class="nick" style="color:#80b1d3"><a href="#201006" label="[20:10:06]">&lt;stikonas&gt;</a></span><span class="message">indeed</span></div><div class="line" id="201015"><span class="nick" style="color:#80b1d3"><a href="#201015" label="[20:10:15]">&lt;stikonas&gt;</a></span><span class="message">now I've got $0 = &quot;%0xffffffff %0x-1&quot;</span></div><div class="line" id="201059"><span class="nick" style="color:#80b1d3"><a href="#201059" label="[20:10:59]">&lt;stikonas&gt;</a></span><span class="message">and I  think we can completely remove mesc? function</span></div><div class="line" id="201143"><span class="nick" style="color:#6d2462"><a href="#201143" label="[20:11:43]">&lt;janneke&gt;</a></span><span class="message">that would be nice, and a great fix!</span></div><div class="line" id="201214"><span class="nick" style="color:#80b1d3"><a href="#201214" label="[20:12:14]">&lt;stikonas&gt;</a></span><span class="message">let me prepare the patch</span></div><div class="line" id="201802"><span class="nick" style="color:#80b1d3"><a href="#201802" label="[20:18:02]">&lt;stikonas&gt;</a></span><span class="message">janneke: I've pushed it here <a rel="nofollow" href="https://git.stikonas.eu/andrius/mes/src/branch/wip-riscv">https://git.stikonas.eu/andrius/mes/src/branch/wip-riscv</a> </span></div><div class="line" id="201813"><span class="nick" style="color:#80b1d3"><a href="#201813" label="[20:18:13]">&lt;stikonas&gt;</a></span><span class="message">(though still testing)</span></div><div class="line" id="201831"><span class="nick" style="color:#80b1d3"><a href="#201831" label="[20:18:31]">&lt;stikonas&gt;</a></span><span class="message">it takes about 12 minutes to rebuild tcc</span></div><div class="line" id="202401"><span class="nick" style="color:#80b1d3"><a href="#202401" label="[20:24:01]">&lt;stikonas&gt;</a></span><span class="message">janneke: ok, so no more crashing when I run &quot;mes-tcc -vv&quot;</span></div><div class="line" id="202404"><span class="nick" style="color:#80b1d3"><a href="#202404" label="[20:24:04]">&lt;stikonas&gt;</a></span><span class="message">that's a good sign</span></div><div class="line" id="202731"><span class="nick" style="color:#6d2462"><a href="#202731" label="[20:27:31]">&lt;janneke&gt;</a></span><span class="message">that's great!</span></div><div class="line" id="202837"><span class="nick" style="color:#80b1d3"><a href="#202837" label="[20:28:37]">&lt;stikonas&gt;</a></span><span class="message">anything more complicated, e.g. mes-tcc -c -D HAVE_CONFIG_H=1 -I include -I include/linux/${MES_ARCH} -o crt1.o lib/linux/${MES_ARCH}-mes-gcc/crt1 causes infinite loop/memory leak</span></div><div class="line" id="202844"><span class="nick" style="color:#80b1d3"><a href="#202844" label="[20:28:44]">&lt;stikonas&gt;</a></span><span class="message">which is what I observed with guile earlier</span></div><div class="line" id="202959"><span class="nick" style="color:#80b1d3"><a href="#202959" label="[20:29:59]">&lt;stikonas&gt;</a></span><span class="message">still, we solved quite a few issues today</span></div><div class="line" id="203424"><span class="nick" style="color:#6d2462"><a href="#203424" label="[20:34:24]">&lt;janneke&gt;</a></span><span class="message">stikonas, yeah; pretty nice</span></div><div class="line" id="203438"><span class="nick" style="color:#6d2462"><a href="#203438" label="[20:34:38]">&lt;janneke&gt;</a></span><span class="message">being on-par with guile isn't bad</span></div><div class="line" id="203509"><span class="nick" style="color:#80b1d3"><a href="#203509" label="[20:35:09]">&lt;stikonas&gt;</a></span><span class="message">and by the way, this is the patch I used for tinycc (but this is not for merging, at least not yet)</span></div><div class="line" id="203510"><span class="nick" style="color:#80b1d3"><a href="#203510" label="[20:35:10]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://git.stikonas.eu/andrius/tinycc/commit/3eadcf95d88b1673a47df1ac250fa8614b32fa8e">https://git.stikonas.eu/andrius/tinycc/commit/3eadcf95d88b1673a47df1ac250fa8614b32fa8e</a> </span></div><div class="line" id="203529"><span class="nick" style="color:#6d2462"><a href="#203529" label="[20:35:29]">&lt;janneke&gt;</a></span><span class="message">OK</span></div><div class="line" id="203539"><span class="nick" style="color:#80b1d3"><a href="#203539" label="[20:35:39]">&lt;stikonas&gt;</a></span><span class="message">(abort I think would work, I just didn't bother changing build scripts...)</span></div><div class="line" id="203604"><span class="nick" style="color:#80b1d3"><a href="#203604" label="[20:36:04]">&lt;stikonas&gt;</a></span><span class="message">but that typedef enum X86_64_Mode was causing some real build issues</span></div><div class="line" id="225136"><span class="nick" style="color:#2e2a4a"><a href="#225136" label="[22:51:36]">&lt;oriansj&gt;</a></span><span class="message">janneke: you would not want to use mov    $0x2a,%eax as it would not set the upper 32bits and if the previous register value was wrong, you would end up with the wrong value in eax and elsewhere</span></div><div class="line" id="225221"><span class="nick" style="color:#2e2a4a"><a href="#225221" label="[22:52:21]">&lt;oriansj&gt;</a></span><span class="message">you need to use rax which then would be the sign extend or zero extend form which you actually want</span></div><div class="line" id="225333"><span class="nick" style="color:#2e2a4a"><a href="#225333" label="[22:53:33]">&lt;oriansj&gt;</a></span><span class="message">(or the previous register value had any of the upper 32bits set or you wanted to populate a negative number, etc)</span></div><div class="line" id="225925"><span class="nick" style="color:#389600"><a href="#225925" label="[22:59:25]">&lt;muurkha&gt;</a></span><span class="message">oriansj: which instructions exactly are they that clear the upper 32 bits when they operate on the lower 32 bits?</span></div><div class="line" id="225943"><span class="nick" style="color:#389600"><a href="#225943" label="[22:59:43]">&lt;muurkha&gt;</a></span><span class="message">I know xor is one, so xor %eax, %eax is equivalent to xor %rax, %rax (which is a byte longer)</span></div><div class="line" id="225958"><span class="nick" style="color:#389600"><a href="#225958" label="[22:59:58]">&lt;muurkha&gt;</a></span><span class="message">but it sounds like you're saying that mov-immediate is not one</span></div><div class="line" id="230235"><span class="nick" style="color:#389600"><a href="#230235" label="[23:02:35]">&lt;muurkha&gt;</a></span><span class="message">that seems to be incorrect though</span></div><div class="line" id="230334"><span class="nick" style="color:#389600"><a href="#230334" label="[23:03:34]">&lt;muurkha&gt;</a></span><span class="message">I just stepped through a test program:</span></div><div class="line" id="230335"><span class="nick" style="color:#389600"><a href="#230335" label="[23:03:35]">&lt;muurkha&gt;</a></span><span class="message">Temporary breakpoint 2, main () at test.s:3</span></div><div class="line" id="230335"><span class="nick" style="color:#389600"><a href="#230335" label="[23:03:35]">&lt;muurkha&gt;</a></span><span class="message">3	        mov $0xdeadbeeffee1dead, %rax</span></div><div class="line" id="230335"><span class="nick" style="color:#389600"><a href="#230335" label="[23:03:35]">&lt;muurkha&gt;</a></span><span class="message">(gdb) p/x $rax</span></div><div class="line" id="230335"><span class="nick" style="color:#389600"><a href="#230335" label="[23:03:35]">&lt;muurkha&gt;</a></span><span class="message">$1 = 0x401bf5</span></div><div class="line" id="230338"><span class="nick" style="color:#389600"><a href="#230338" label="[23:03:38]">&lt;muurkha&gt;</a></span><span class="message">(gdb) si</span></div><div class="line" id="230340"><span class="nick" style="color:#389600"><a href="#230340" label="[23:03:40]">&lt;muurkha&gt;</a></span><span class="message">4	        mov $2, %eax</span></div><div class="line" id="230343"><span class="nick" style="color:#389600"><a href="#230343" label="[23:03:43]">&lt;muurkha&gt;</a></span><span class="message">(gdb) display/x $rax</span></div><div class="line" id="230345"><span class="nick" style="color:#389600"><a href="#230345" label="[23:03:45]">&lt;muurkha&gt;</a></span><span class="message">1: /x $rax = 0xdeadbeeffee1dead</span></div><div class="line" id="230348"><span class="nick" style="color:#389600"><a href="#230348" label="[23:03:48]">&lt;muurkha&gt;</a></span><span class="message">(gdb) si</span></div><div class="line" id="230350"><span class="nick" style="color:#389600"><a href="#230350" label="[23:03:50]">&lt;muurkha&gt;</a></span><span class="message">main () at test.s:5</span></div><div class="line" id="230353"><span class="nick" style="color:#389600"><a href="#230353" label="[23:03:53]">&lt;muurkha&gt;</a></span><span class="message">5	        ret</span></div><div class="line" id="230355"><span class="nick" style="color:#389600"><a href="#230355" label="[23:03:55]">&lt;muurkha&gt;</a></span><span class="message">1: /x $rax = 0x2</span></div><div class="line" id="233447"><span class="nick" style="color:#2e2a4a"><a href="#233447" label="[23:34:47]">&lt;oriansj&gt;</a></span><span class="message">muurkha: the proper instructions would be movsx and movzx to sign or zero extend respectively</span></div><div class="line" id="233602"><span class="nick" style="color:#80b1d3"><a href="#233602" label="[23:36:02]">&lt;stikonas&gt;</a></span><span class="message">we only saw eax there because I accidentally made a cross-compiler...</span></div><div class="line" id="233626"><span class="nick" style="color:#80b1d3"><a href="#233626" label="[23:36:26]">&lt;stikonas&gt;</a></span><span class="message">our early tools can cross-compile really easily</span></div><div class="line" id="233812"><span class="nick" style="color:#389600"><a href="#233812" label="[23:38:12]">&lt;muurkha&gt;</a></span><span class="message">oriansj: gas tells me movzx can't take an immediate argument: test.s:4: Error: unsupported syntax for `movzx'</span></div><div class="line" id="233831"><span class="nick" style="color:#389600"><a href="#233831" label="[23:38:31]">&lt;muurkha&gt;</a></span><span class="message">so I think the proper instruction is mov, for better or worse</span></div><div class="line" id="233948"><span class="nick" style="color:#2e2a4a"><a href="#233948" label="[23:39:48]">&lt;oriansj&gt;</a></span><span class="message">muurkha: depends on if you are using at&amp;t x86 assembly syntax or intel assembly syntax I guess</span></div><div class="line" id="234125"><span class="nick" style="color:#389600"><a href="#234125" label="[23:41:25]">&lt;muurkha&gt;</a></span><span class="message">is it?  did you get an intel assembly syntax assembler to successfully assemble a movzx instruction with an immediate operand?</span></div><div class="line" id="234151"><span class="nick" style="color:#389600"><a href="#234151" label="[23:41:51]">&lt;muurkha&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.felixcloutier.com/x86/movzx">https://www.felixcloutier.com/x86/movzx</a>  doesn't list an immediate operand as a possibility</span></div><div class="line" id="234234"><span class="nick" style="color:#2e2a4a"><a href="#234234" label="[23:42:34]">&lt;oriansj&gt;</a></span><span class="message">you are probably right</span></div><div class="line" id="234343"><span class="nick" style="color:#389600"><a href="#234343" label="[23:43:43]">&lt;muurkha&gt;</a></span><span class="message">are there any amd64 instructions that affect only the lower 32 bits of a 64-bit register?</span></div><div class="line" id="234704"><span class="nick" style="color:#2e2a4a"><a href="#234704" label="[23:47:04]">&lt;oriansj&gt;</a></span><span class="message">well all eax instructions should only touch the bottom 32bits, all ax instructions should only touch the bottom 16bits and ah/al instructions only touch 8bits(high and low half of the 16bit word respectively)</span></div><div class="line" id="235340"><span class="nick" style="color:#389600"><a href="#235340" label="[23:53:40]">&lt;muurkha&gt;</a></span><span class="message">is there *at least one* eax instruction that behaves as you say?  because above I've demonstrated that mov from immediate does not, and I know from previously that xor does not; they both zero the upper 32 bits</span></div><div class="line" id="235359"><span class="nick" style="color:#389600"><a href="#235359" label="[23:53:59]">&lt;muurkha&gt;</a></span><span class="message">or by &quot;should&quot; do you mean that AMD shouldn't have defined them to do that?</span></div><div class="line" id="235438"><span class="nick" style="color:#389600"><a href="#235438" label="[23:54:38]">&lt;muurkha&gt;</a></span><span class="message">if there is at least one such instruction, can you provide a runnable example so I can reproduce that behavior?</span></div><br /></div></body></html>