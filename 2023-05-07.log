<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-05-07.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000238"><span class="nick" style="color:#389600"><a href="#000238" label="[00:02:38]">&lt;mihi&gt;</a></span><span class="message">Even when looking at LibreBoot supported hardware (without checking certification), the most recent model supported is the HP EliteBook Folio 9470m released in 2012...</span></div><div class="line" id="000257"><span class="nick" style="color:#389600"><a href="#000257" label="[00:02:57]">&lt;mihi&gt;</a></span><span class="message">(unless I missed one on the LibreBoot website)</span></div><div class="line" id="000353"><span class="nick" style="color:#389600"><a href="#000353" label="[00:03:53]">&lt;mihi&gt;</a></span><span class="message">which is about the age of my L530 (and I am considering to replace it this year).</span></div><div class="line" id="000457"><span class="nick" style="color:#8dd3c7"><a href="#000457" label="[00:04:57]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, that is unavoidable future for libreboot on x86</span></div><div class="line" id="000716"><span class="nick" style="color:#8dd3c7"><a href="#000716" label="[00:07:16]">&lt;stikonas[m]&gt;</a></span><span class="message">In 20 years getting librebootable x86 system might be as hard as getting computer from 1980ies today</span></div><div class="line" id="000717"><span class="nick" style="color:#8dd3c7"><a href="#000717" label="[00:07:17]">&lt;stikonas[m]&gt;</a></span><span class="message">Though I expect corebooted systems will be more common in 10 years than now</span></div><div class="line" id="004145"><span class="nick" style="color:#2e2a4a"><a href="#004145" label="[00:41:45]">&lt;oriansj&gt;</a></span><span class="message">stikonas[m]: well I got an IBM 5150 serial number 120 surprisingly easily; my bet in 20 years getting a librebootable x86 system will only be possible if we as a community pool together funds and build those systems from scratch</span></div><div class="line" id="004409"><span class="nick" style="color:#2e2a4a"><a href="#004409" label="[00:44:09]">&lt;oriansj&gt;</a></span><span class="message">Part of me wishes there was an organization which collected funds, designed systems and certified partner companies' products as RYF certified as they are built to the freely available spec.</span></div><div class="line" id="005110"><span class="nick" style="color:#2e2a4a"><a href="#005110" label="[00:51:10]">&lt;oriansj&gt;</a></span><span class="message">Odd there are no RYF certified RISC-V systems and the RYF certified PowerPC systems are all Server/Workstation power envelope</span></div><div class="line" id="005952"><span class="nick" style="color:#8dd3c7"><a href="#005952" label="[00:59:52]">&lt;stikonas[m]&gt;</a></span><span class="message">oriansj: if might be that at least some RISV-V systems are tainted with non free GPU drivers or WiFi firmware</span></div><div class="line" id="010036"><span class="nick" style="color:#8dd3c7"><a href="#010036" label="[01:00:36]">&lt;stikonas[m]&gt;</a></span><span class="message">Latter you can replace with some 802.11n based USB dongle (most likely you would need something using ath9k)</span></div><div class="line" id="010116"><span class="nick" style="color:#2e2a4a"><a href="#010116" label="[01:01:16]">&lt;oriansj&gt;</a></span><span class="message">or in the RISC-V unleashed, required nonfree fimrware to enable memory</span></div><div class="line" id="010146"><span class="nick" style="color:#8dd3c7"><a href="#010146" label="[01:01:46]">&lt;stikonas[m]&gt;</a></span><span class="message">Anyway, open isa does not guarantee open SoC</span></div><div class="line" id="010207"><span class="nick" style="color:#2e2a4a"><a href="#010207" label="[01:02:07]">&lt;oriansj&gt;</a></span><span class="message">indeed</span></div><div class="line" id="010238"><span class="nick" style="color:#2e2a4a"><a href="#010238" label="[01:02:38]">&lt;oriansj&gt;</a></span><span class="message">and a closed ISA does not guarantee a closed SoC either.</span></div><div class="line" id="010247"><span class="nick" style="color:#8dd3c7"><a href="#010247" label="[01:02:47]">&lt;stikonas[m]&gt;</a></span><span class="message">But arm systems often have closed ATF (bl31.elf)</span></div><div class="line" id="010315"><span class="nick" style="color:#8dd3c7"><a href="#010315" label="[01:03:15]">&lt;stikonas[m]&gt;</a></span><span class="message">Hopefully riscv equivalent be open more frequently</span></div><div class="line" id="010413"><span class="nick" style="color:#2e2a4a"><a href="#010413" label="[01:04:13]">&lt;oriansj&gt;</a></span><span class="message">indeed</span></div><div class="line" id="010830"><span class="nick" style="color:#6b8072"><a href="#010830" label="[01:08:30]">&lt;aggi&gt;</a></span><span class="message">i hope for, ao486 to scale up, with decent hardware support from a linux-2.x kernel, including usb</span></div><div class="line" id="010912"><span class="nick" style="color:#6b8072"><a href="#010912" label="[01:09:12]">&lt;aggi&gt;</a></span><span class="message">currently, last time i checked on opencores.org, only usb1.x was fully documented with some hdl/verilog; not any later version</span></div><div class="line" id="011034"><span class="nick" style="color:#2e2a4a"><a href="#011034" label="[01:10:34]">&lt;oriansj&gt;</a></span><span class="message">hmmm, well one could live with less than high performance but that'll definitely make USB based installs quite slow.</span></div><div class="line" id="011117"><span class="nick" style="color:#6b8072"><a href="#011117" label="[01:11:17]">&lt;aggi&gt;</a></span><span class="message">some custom SeaBIOS was ported to ao486 already too, so that one is fully free/open down to hardware digital circuitry, depending on how FPGA and related tooling are qualified</span></div><div class="line" id="011208"><span class="nick" style="color:#6b8072"><a href="#011208" label="[01:12:08]">&lt;aggi&gt;</a></span><span class="message">j-core.org made notable progress too, with their turtle-board design; although this ISA is less common (and not supported with tcc)</span></div><div class="line" id="011224"><span class="nick" style="color:#2e2a4a"><a href="#011224" label="[01:12:24]">&lt;oriansj&gt;</a></span><span class="message">well if it it fits on an iCE40 FPGA or other Icestorm compatible FPGA, then probably quite free.</span></div><div class="line" id="011240"><span class="nick" style="color:#80b1d3"><a href="#011240" label="[01:12:40]">&lt;muurkha&gt;</a></span><span class="message">if you only need low-speed HID devices you might be able to get away with less than even USB1.0</span></div><div class="line" id="011253"><span class="nick" style="color:#6b8072"><a href="#011253" label="[01:12:53]">&lt;aggi&gt;</a></span><span class="message">i don't have any hope for any x86_64/ACPI/SMP/UEFI/&gt;=USB2.x type system</span></div><div class="line" id="011309"><span class="nick" style="color:#80b1d3"><a href="#011309" label="[01:13:09]">&lt;muurkha&gt;</a></span><span class="message">good luck finding an HDL synthesis toolchain that doesn't involve any C++ though</span></div><div class="line" id="011315"><span class="nick" style="color:#6b8072"><a href="#011315" label="[01:13:15]">&lt;aggi&gt;</a></span><span class="message">usb1.x; that was roughly 10Mbps iirc... it's not that bad</span></div><div class="line" id="011316"><span class="nick" style="color:#80b1d3"><a href="#011316" label="[01:13:16]">&lt;muurkha&gt;</a></span><span class="message">you're probably going to have to write your own</span></div><div class="line" id="011322"><span class="nick" style="color:#6b8072"><a href="#011322" label="[01:13:22]">&lt;aggi&gt;</a></span><span class="message">exactly muurkha</span></div><div class="line" id="011404"><span class="nick" style="color:#80b1d3"><a href="#011404" label="[01:14:04]">&lt;muurkha&gt;</a></span><span class="message">things like Migen don't involve any C++ but they generate Verilog, not netlists</span></div><div class="line" id="011409"><span class="nick" style="color:#6b8072"><a href="#011409" label="[01:14:09]">&lt;aggi&gt;</a></span><span class="message">that's why, z80/gigatron 8bit realm is appealing; the gigatron ttl can be soldered onto a breadboard, and the chips are documented sufficiently otherwise</span></div><div class="line" id="011442"><span class="nick" style="color:#80b1d3"><a href="#011442" label="[01:14:42]">&lt;muurkha&gt;</a></span><span class="message">yosys is all C++</span></div><div class="line" id="011530"><span class="nick" style="color:#6b8072"><a href="#011530" label="[01:15:30]">&lt;aggi&gt;</a></span><span class="message">if you need/want something practically usefull, with posix, networking, usb etc... ao486/fpga deployment seems the best to hope for, currently; or the j-core.org stuff</span></div><div class="line" id="011533"><span class="nick" style="color:#2e2a4a"><a href="#011533" label="[01:15:33]">&lt;oriansj&gt;</a></span><span class="message">aggi: there is no reason why someone couldn't do a 32bit processor with an old-school Pinout designed for breadboards</span></div><div class="line" id="011619"><span class="nick" style="color:#6b8072"><a href="#011619" label="[01:16:19]">&lt;aggi&gt;</a></span><span class="message">don't know, exactly when the computer-aided-design (CAD) overwhelmed the development of digital circuitry</span></div><div class="line" id="011632"><span class="nick" style="color:#6b8072"><a href="#011632" label="[01:16:32]">&lt;aggi&gt;</a></span><span class="message">i heard rumors, earlier i386 were designed with pencil and paper</span></div><div class="line" id="011725"><span class="nick" style="color:#6b8072"><a href="#011725" label="[01:17:25]">&lt;aggi&gt;</a></span><span class="message">another reason, to remain sceptical, with any of the more recent 64bit type systems; all their supply chains, both software and hardware, are fully entangled into the globalized, clusterf***</span></div><div class="line" id="011732"><span class="nick" style="color:#2e2a4a"><a href="#011732" label="[01:17:32]">&lt;oriansj&gt;</a></span><span class="message">well the DEC Alpha's initial implementation was hand designed.</span></div><div class="line" id="011824"><span class="nick" style="color:#80b1d3"><a href="#011824" label="[01:18:24]">&lt;muurkha&gt;</a></span><span class="message">it's not that hard to design an RV32I core</span></div><div class="line" id="011842"><span class="nick" style="color:#80b1d3"><a href="#011842" label="[01:18:42]">&lt;muurkha&gt;</a></span><span class="message">there are certain things you have to multiply by 32 instead of 8</span></div><div class="line" id="011907"><span class="nick" style="color:#6b8072"><a href="#011907" label="[01:19:07]">&lt;aggi&gt;</a></span><span class="message">did some reading about those DEC systems, their earlier 32bit ones, already provided general purpose 128bit data processing... most recent intel systems 40 years later do not</span></div><div class="line" id="011915"><span class="nick" style="color:#80b1d3"><a href="#011915" label="[01:19:15]">&lt;muurkha&gt;</a></span><span class="message">32 stages of carry chain instead of 8 or 16.  3 levels of lookahead carry instead of 2</span></div><div class="line" id="011938"><span class="nick" style="color:#80b1d3"><a href="#011938" label="[01:19:38]">&lt;muurkha&gt;</a></span><span class="message">it doesn't really add any complexity to the design process</span></div><div class="line" id="011955"><span class="nick" style="color:#6b8072"><a href="#011955" label="[01:19:55]">&lt;aggi&gt;</a></span><span class="message">i suspect, it's related to the COCOM and 1984 SCPA protectionism of USA, to sanction particular technology</span></div><div class="line" id="011959"><span class="nick" style="color:#8dd3c7"><a href="#011959" label="[01:19:59]">&lt;stikonas[m]&gt;</a></span><span class="message">RV32I doesn't have many instructions, so it should be easier to implement compared to x86</span></div><div class="line" id="012010"><span class="nick" style="color:#80b1d3"><a href="#012010" label="[01:20:10]">&lt;muurkha&gt;</a></span><span class="message">aggi: no</span></div><div class="line" id="012020"><span class="nick" style="color:#80b1d3"><a href="#012020" label="[01:20:20]">&lt;muurkha&gt;</a></span><span class="message">yeah, definitely much easier</span></div><div class="line" id="012037"><span class="nick" style="color:#6b8072"><a href="#012037" label="[01:20:37]">&lt;aggi&gt;</a></span><span class="message">and nothing changed since then... recently there was some story, about lattice semiconductor, who introduced some relatively liberated FPGA things</span></div><div class="line" id="012043"><span class="nick" style="color:#80b1d3"><a href="#012043" label="[01:20:43]">&lt;muurkha&gt;</a></span><span class="message">but it requires a fair bit more silicon to implement, and a lot more work soldering and debugging if you're putting stuff together by hand</span></div><div class="line" id="012051"><span class="nick" style="color:#8dd3c7"><a href="#012051" label="[01:20:51]">&lt;stikonas[m]&gt;</a></span><span class="message">Can't recent x86 systems work on 512 bits?</span></div><div class="line" id="012057"><span class="nick" style="color:#80b1d3"><a href="#012057" label="[01:20:57]">&lt;muurkha&gt;</a></span><span class="message">yes, AVX-512</span></div><div class="line" id="012100"><span class="nick" style="color:#6b8072"><a href="#012100" label="[01:21:00]">&lt;aggi&gt;</a></span><span class="message">not general purpose</span></div><div class="line" id="012103"><span class="nick" style="color:#8dd3c7"><a href="#012103" label="[01:21:03]">&lt;stikonas[m]&gt;</a></span><span class="message">Avx-512 extension</span></div><div class="line" id="012106"><span class="nick" style="color:#8dd3c7"><a href="#012106" label="[01:21:06]">&lt;stikonas[m]&gt;</a></span><span class="message">Indeed...</span></div><div class="line" id="012127"><span class="nick" style="color:#80b1d3"><a href="#012127" label="[01:21:27]">&lt;muurkha&gt;</a></span><span class="message">but, yeah, it's fair to say that AVX-512 isn't general-purpose</span></div><div class="line" id="012146"><span class="nick" style="color:#6b8072"><a href="#012146" label="[01:21:46]">&lt;aggi&gt;</a></span><span class="message">those earlier DEC VAX offered general purpose 128bit, 40years ago already... which too is relevant for cryptography, and the pain a simple xorshift on 128bit int types can be</span></div><div class="line" id="012201"><span class="nick" style="color:#8dd3c7"><a href="#012201" label="[01:22:01]">&lt;stikonas[m]&gt;</a></span><span class="message">But does anybody really need 512 bit numbers</span></div><div class="line" id="012213"><span class="nick" style="color:#80b1d3"><a href="#012213" label="[01:22:13]">&lt;muurkha&gt;</a></span><span class="message">well, they're useful for RSA</span></div><div class="line" id="012216"><span class="nick" style="color:#80b1d3"><a href="#012216" label="[01:22:16]">&lt;muurkha&gt;</a></span><span class="message">but not much else</span></div><div class="line" id="012221"><span class="nick" style="color:#8dd3c7"><a href="#012221" label="[01:22:21]">&lt;stikonas[m]&gt;</a></span><span class="message">If it's rare enough calculation, then use software</span></div><div class="line" id="012232"><span class="nick" style="color:#80b1d3"><a href="#012232" label="[01:22:32]">&lt;muurkha&gt;</a></span><span class="message">and you don't lose much by implementing them with vector instructions like AVX-512</span></div><div class="line" id="012244"><span class="nick" style="color:#8dd3c7"><a href="#012244" label="[01:22:44]">&lt;stikonas[m]&gt;</a></span><span class="message">Else people now use non general purpose accelerators</span></div><div class="line" id="012300"><span class="nick" style="color:#80b1d3"><a href="#012300" label="[01:23:00]">&lt;muurkha&gt;</a></span><span class="message">I don't think anybody has RSA accelerators</span></div><div class="line" id="012305"><span class="nick" style="color:#6b8072"><a href="#012305" label="[01:23:05]">&lt;aggi&gt;</a></span><span class="message">well, some symmetric crypto can be implemented relatively easy and fast then... although i doubt it would be 512bit, because fast xor-shifting requires a barrel-shifter in hardware, and for large data-tupes, those become extremely expensive</span></div><div class="line" id="012437"><span class="nick" style="color:#80b1d3"><a href="#012437" label="[01:24:37]">&lt;muurkha&gt;</a></span><span class="message">the reason 128-bit and 256-bit integers aren't in mass-market hardware (or basically any hardware) is that almost no customers care about 128-bit performance.  nothing to do with export controls</span></div><div class="line" id="012558"><span class="nick" style="color:#8dd3c7"><a href="#012558" label="[01:25:58]">&lt;stikonas[m]&gt;</a></span><span class="message">Maybe except for AES</span></div><div class="line" id="012616"><span class="nick" style="color:#8dd3c7"><a href="#012616" label="[01:26:16]">&lt;stikonas[m]&gt;</a></span><span class="message">But there are lots of AES accelerators</span></div><div class="line" id="012637"><span class="nick" style="color:#8dd3c7"><a href="#012637" label="[01:26:37]">&lt;stikonas[m]&gt;</a></span><span class="message">Including AES-NI...</span></div><div class="line" id="012653"><span class="nick" style="color:#6b8072"><a href="#012653" label="[01:26:53]">&lt;aggi&gt;</a></span><span class="message">well...</span></div><div class="line" id="012737"><span class="nick" style="color:#6b8072"><a href="#012737" label="[01:27:37]">&lt;aggi&gt;</a></span><span class="message">i proposed a cipher/hash design, little while ago, simple LFSR, put into a matrix (to scale up from 32bit to any other desired block size)</span></div><div class="line" id="012752"><span class="nick" style="color:#2e2a4a"><a href="#012752" label="[01:27:52]">&lt;oriansj&gt;</a></span><span class="message">take this and add 16 address pins and replace the 6502 core with something 32/64bit <a rel="nofollow" href="https://paste.debian.net/1279548/">https://paste.debian.net/1279548/</a> </span></div><div class="line" id="012758"><span class="nick" style="color:#6b8072"><a href="#012758" label="[01:27:58]">&lt;aggi&gt;</a></span><span class="message">add some nasty non-primitive recursion to those... and you got the strongest military grade symmetric crypto ever</span></div><div class="line" id="012814"><span class="nick" style="color:#80b1d3"><a href="#012814" label="[01:28:14]">&lt;muurkha&gt;</a></span><span class="message">AES doesn't benefit from 128-bit or 256-bit integers either</span></div><div class="line" id="012820"><span class="nick" style="color:#6b8072"><a href="#012820" label="[01:28:20]">&lt;aggi&gt;</a></span><span class="message">which requires nothing but a barrel-shifter, which are available always with 32bit, and are extremely fast</span></div><div class="line" id="012857"><span class="nick" style="color:#8dd3c7"><a href="#012857" label="[01:28:57]">&lt;stikonas[m]&gt;</a></span><span class="message">muurkha: wouldn't matrix multiplication ops be faster on 128/256 bit CPUs?</span></div><div class="line" id="012904"><span class="nick" style="color:#6b8072"><a href="#012904" label="[01:29:04]">&lt;aggi&gt;</a></span><span class="message">don't know, if AES could be implemented with 8bit datatypes... in a way, i think RC4 was a better cipher design than AES</span></div><div class="line" id="012936"><span class="nick" style="color:#80b1d3"><a href="#012936" label="[01:29:36]">&lt;muurkha&gt;</a></span><span class="message">aggi: it sounds linear in the vector space GF(2)ⁿ and therefore trivial to break</span></div><div class="line" id="012947"><span class="nick" style="color:#6b8072"><a href="#012947" label="[01:29:47]">&lt;aggi&gt;</a></span><span class="message">wrong</span></div><div class="line" id="013001"><span class="nick" style="color:#6b8072"><a href="#013001" label="[01:30:01]">&lt;aggi&gt;</a></span><span class="message">i added some non-primitive recursion agains known-plaintext key-recovery</span></div><div class="line" id="013013"><span class="nick" style="color:#80b1d3"><a href="#013013" label="[01:30:13]">&lt;muurkha&gt;</a></span><span class="message">well, you haven't described it in enough detail to show otherwise</span></div><div class="line" id="013025"><span class="nick" style="color:#6b8072"><a href="#013025" label="[01:30:25]">&lt;aggi&gt;</a></span><span class="message">i consider my design not prone to this type of attack, even when it's &quot;one round&quot; only</span></div><div class="line" id="013036"><span class="nick" style="color:#80b1d3"><a href="#013036" label="[01:30:36]">&lt;muurkha&gt;</a></span><span class="message">stikonas[m]: yes, if your matrix elements need more than 64 bits of precision</span></div><div class="line" id="013041"><span class="nick" style="color:#8dd3c7"><a href="#013041" label="[01:30:41]">&lt;stikonas[m]&gt;</a></span><span class="message">I would avoid implementing your own cryptography...</span></div><div class="line" id="013048"><span class="nick" style="color:#6b8072"><a href="#013048" label="[01:30:48]">&lt;aggi&gt;</a></span><span class="message">muurkha: i already published some test-implementation, hacked against linux dm-crypt, for 64bit</span></div><div class="line" id="013109"><span class="nick" style="color:#80b1d3"><a href="#013109" label="[01:31:09]">&lt;muurkha&gt;</a></span><span class="message">aggi: cool, but that doesn't tell me anything about its security</span></div><div class="line" id="013116"><span class="nick" style="color:#8dd3c7"><a href="#013116" label="[01:31:16]">&lt;stikonas[m]&gt;</a></span><span class="message">Even after studying them a bit as part of maths courses</span></div><div class="line" id="013116"><span class="nick" style="color:#6b8072"><a href="#013116" label="[01:31:16]">&lt;aggi&gt;</a></span><span class="message">but meanwhile, down-graded to 32bit, simplified and improved the design further, and utilize the ancient loopdev api from linxu for this</span></div><div class="line" id="013145"><span class="nick" style="color:#6b8072"><a href="#013145" label="[01:31:45]">&lt;aggi&gt;</a></span><span class="message">and hacked it into dropbear ssh, for testing... and well, it's fast... the fastest cipher ever, in software (with barrel-shifter available)</span></div><div class="line" id="013207"><span class="nick" style="color:#80b1d3"><a href="#013207" label="[01:32:07]">&lt;muurkha&gt;</a></span><span class="message">the identity cipher and NOT are surely faster</span></div><div class="line" id="013210"><span class="nick" style="color:#6b8072"><a href="#013210" label="[01:32:10]">&lt;aggi&gt;</a></span><span class="message">i consider, the 32bit variant, safe... it's the best cipher design ever proposed, for software</span></div><div class="line" id="013212"><span class="nick" style="color:#80b1d3"><a href="#013212" label="[01:32:12]">&lt;muurkha&gt;</a></span><span class="message">the problem is that they aren't secure</span></div><div class="line" id="013228"><span class="nick" style="color:#6b8072"><a href="#013228" label="[01:32:28]">&lt;aggi&gt;</a></span><span class="message">it can be used in ECB too, if the limitations are known</span></div><div class="line" id="013229"><span class="nick" style="color:#80b1d3"><a href="#013229" label="[01:32:29]">&lt;muurkha&gt;</a></span><span class="message">aggi: how would you know if it's any good or not?  which cryptosystems have you broken?</span></div><div class="line" id="013246"><span class="nick" style="color:#6b8072"><a href="#013246" label="[01:32:46]">&lt;aggi&gt;</a></span><span class="message">muurkha: i reviewed some stuff</span></div><div class="line" id="013313"><span class="nick" style="color:#6b8072"><a href="#013313" label="[01:33:13]">&lt;aggi&gt;</a></span><span class="message">and the non-primitive recurse LFSR matrix design, was just for fun, to showcase &quot;crypto&quot; can be done differently</span></div><div class="line" id="013326"><span class="nick" style="color:#6b8072"><a href="#013326" label="[01:33:26]">&lt;aggi&gt;</a></span><span class="message">meaning, as _simple_ and fast/efficient as possible, with maximized strenght</span></div><div class="line" id="013342"><span class="nick" style="color:#6b8072"><a href="#013342" label="[01:33:42]">&lt;aggi&gt;</a></span><span class="message">instead of blowing up complexity</span></div><div class="line" id="013358"><span class="nick" style="color:#80b1d3"><a href="#013358" label="[01:33:58]">&lt;muurkha&gt;</a></span><span class="message">stikonas[m]: in the usual case your matrix elements have a lot less precision than that, and things like AVX-512's elementwise multiply of vectors of 16 32-bit floats is a lot more helpful</span></div><div class="line" id="013401"><span class="nick" style="color:#6b8072"><a href="#013401" label="[01:34:01]">&lt;aggi&gt;</a></span><span class="message">furthermore, the whole LFSR/CRC related stuff, was reviewed for decades, so i trust that</span></div><div class="line" id="013421"><span class="nick" style="color:#6b8072"><a href="#013421" label="[01:34:21]">&lt;aggi&gt;</a></span><span class="message">the non-primitive recursion however, that's the idea of mine, to prevent known-plaintext key-recovery...</span></div><div class="line" id="013444"><span class="nick" style="color:#80b1d3"><a href="#013444" label="[01:34:44]">&lt;muurkha&gt;</a></span><span class="message">aggi: I notice you haven't answered which cryptosystems you've broken, which makes me think you don't have the expertise to assess the quality of your cipher</span></div><div class="line" id="013511"><span class="nick" style="color:#6b8072"><a href="#013511" label="[01:35:11]">&lt;aggi&gt;</a></span><span class="message">if you go low-power embedded, such as i do, and want to copy over ssh... for example, such as fast and secure cipher design is very desireable</span></div><div class="line" id="013512"><span class="nick" style="color:#80b1d3"><a href="#013512" label="[01:35:12]">&lt;muurkha&gt;</a></span><span class="message">the standard rebuttal to snake-oil cryptography claims is that anyone can devise a cipher he can't break himself</span></div><div class="line" id="013524"><span class="nick" style="color:#6b8072"><a href="#013524" label="[01:35:24]">&lt;aggi&gt;</a></span><span class="message">and my cipher design, is the fastest, it's faster than RC4, and probably, more secure</span></div><div class="line" id="013551"><span class="nick" style="color:#6b8072"><a href="#013551" label="[01:35:51]">&lt;aggi&gt;</a></span><span class="message">muurkha: i too offered the design to Leibniz institute of mathematics in Germany...</span></div><div class="line" id="013559"><span class="nick" style="color:#80b1d3"><a href="#013559" label="[01:35:59]">&lt;muurkha&gt;</a></span><span class="message">being more secure than RC4 would be no great feat</span></div><div class="line" id="013605"><span class="nick" style="color:#6b8072"><a href="#013605" label="[01:36:05]">&lt;aggi&gt;</a></span><span class="message">to some expert, who refused to elaborate on this design</span></div><div class="line" id="013616"><span class="nick" style="color:#6b8072"><a href="#013616" label="[01:36:16]">&lt;aggi&gt;</a></span><span class="message">muurkha: and it is much faster than RC4 too, the design i proposed</span></div><div class="line" id="013718"><span class="nick" style="color:#6b8072"><a href="#013718" label="[01:37:18]">&lt;aggi&gt;</a></span><span class="message">the 32bit variant, which i didn't publish, is very few lines of code only... and it's probably the smallest and less complicated variant ever</span></div><div class="line" id="013756"><span class="nick" style="color:#6b8072"><a href="#013756" label="[01:37:56]">&lt;aggi&gt;</a></span><span class="message">it's scalable, for various block-sizes, up to stream-cipher type of operation... can be utilized as hash-function, or PRNG...</span></div><div class="line" id="013845"><span class="nick" style="color:#6b8072"><a href="#013845" label="[01:38:45]">&lt;aggi&gt;</a></span><span class="message">i mean, even NATO specified LFSR for &quot;scrambling&quot; with 8bit only, and no non-primitive recursion added... but it's not &quot;crypto&quot; then, MIL-STD-188 that was</span></div><div class="line" id="013933"><span class="nick" style="color:#6b8072"><a href="#013933" label="[01:39:33]">&lt;aggi&gt;</a></span><span class="message">anyway, i think that's the reason why, there wasn't general purpose 128bit anymore, because of this type of crypto</span></div><div class="line" id="014032"><span class="nick" style="color:#80b1d3"><a href="#014032" label="[01:40:32]">&lt;muurkha&gt;</a></span><span class="message">&quot;primitive recursive&quot; is a concept from computability theory that doesn't seem to apply here</span></div><div class="line" id="014055"><span class="nick" style="color:#6b8072"><a href="#014055" label="[01:40:55]">&lt;aggi&gt;</a></span><span class="message">it did apply it, non-primitive recursion against known-plaintext key-recovery attacks</span></div><div class="line" id="014116"><span class="nick" style="color:#6b8072"><a href="#014116" label="[01:41:16]">&lt;aggi&gt;</a></span><span class="message">otherwise, LFSR are considered not secure... sure, i do know that</span></div><div class="line" id="014137"><span class="nick" style="color:#80b1d3"><a href="#014137" label="[01:41:37]">&lt;muurkha&gt;</a></span><span class="message"> <a rel="nofollow" href="https://en.wikipedia.org/wiki/Primitive_recursive_function">https://en.wikipedia.org/wiki/Primitive_recursive_function</a> </span></div><div class="line" id="014214"><span class="nick" style="color:#6b8072"><a href="#014214" label="[01:42:14]">&lt;aggi&gt;</a></span><span class="message">LFSR are not snakeoil, and non-primitive recursion is the result of an algorithmic expansion for known-plaintext key-recovery attacks, meaning those are not feasible then</span></div><div class="line" id="014217"><span class="nick" style="color:#80b1d3"><a href="#014217" label="[01:42:17]">&lt;muurkha&gt;</a></span><span class="message">I think you are probably going to do good work with this, but only if you can let go of the idea that you've already done it</span></div><div class="line" id="014235"><span class="nick" style="color:#80b1d3"><a href="#014235" label="[01:42:35]">&lt;muurkha&gt;</a></span><span class="message">learn to break some cryptosystems first</span></div><div class="line" id="014251"><span class="nick" style="color:#6b8072"><a href="#014251" label="[01:42:51]">&lt;aggi&gt;</a></span><span class="message">i already did publish a 64bit variant, but i think the 32bit variant is much better, because it's ridiculously simple to implement, simple to review</span></div><div class="line" id="014300"><span class="nick" style="color:#80b1d3"><a href="#014300" label="[01:43:00]">&lt;muurkha&gt;</a></span><span class="message">study how the most recent big breaks like those of MD5 and SHA1 work</span></div><div class="line" id="014312"><span class="nick" style="color:#80b1d3"><a href="#014312" label="[01:43:12]">&lt;muurkha&gt;</a></span><span class="message">then you'll be in a position to distinguish a secure cryptosystem from an insecure one</span></div><div class="line" id="014342"><span class="nick" style="color:#6b8072"><a href="#014342" label="[01:43:42]">&lt;aggi&gt;</a></span><span class="message">i don't comment on MD5 or SHA1, because i am no expert on those; i only do know with certainty what i designed and implemented myself</span></div><div class="line" id="014349"><span class="nick" style="color:#80b1d3"><a href="#014349" label="[01:43:49]">&lt;muurkha&gt;</a></span><span class="message">until then, of course any expert at the Leibniz Institute will decline to elaborate on the design</span></div><div class="line" id="014409"><span class="nick" style="color:#8dd3c7"><a href="#014409" label="[01:44:09]">&lt;stikonas[m]&gt;</a></span><span class="message">Not everything in NATO is super secure... UK nuclear weapons used to be secured by something like bike lock keys</span></div><div class="line" id="014448"><span class="nick" style="color:#80b1d3"><a href="#014448" label="[01:44:48]">&lt;muurkha&gt;</a></span><span class="message">because it's just another cryptosystem that can probably be broken with standard techniques the author doesn't understand</span></div><div class="line" id="014451"><span class="nick" style="color:#6b8072"><a href="#014451" label="[01:44:51]">&lt;aggi&gt;</a></span><span class="message">i only tried to say, LFSR are well researched and known, among telekom and military, and LFSR can easily be improved upon, to make them safe</span></div><div class="line" id="014523"><span class="nick" style="color:#6b8072"><a href="#014523" label="[01:45:23]">&lt;aggi&gt;</a></span><span class="message">but for this, you do need to know, what you're doing, otherwise they're prone to known-plaintext key-recovery attacks</span></div><div class="line" id="014542"><span class="nick" style="color:#80b1d3"><a href="#014542" label="[01:45:42]">&lt;muurkha&gt;</a></span><span class="message">Ron Rivest tried to improve upon LFSRs to make them safe, which is where RC4 came from, but as you know, he failed</span></div><div class="line" id="014556"><span class="nick" style="color:#6b8072"><a href="#014556" label="[01:45:56]">&lt;aggi&gt;</a></span><span class="message">no, RC4 are not based upon LFSR</span></div><div class="line" id="014628"><span class="nick" style="color:#6b8072"><a href="#014628" label="[01:46:28]">&lt;aggi&gt;</a></span><span class="message">but RC4 has an advantage over LFSR, i think, which is RC4 does not require 32bit data-types; my LFSR design does need 32bit registers</span></div><div class="line" id="014631"><span class="nick" style="color:#80b1d3"><a href="#014631" label="[01:46:31]">&lt;muurkha&gt;</a></span><span class="message">it's a stream cipher, and the most obvious and well-known stream cipher is XOR with an LFSR</span></div><div class="line" id="014725"><span class="nick" style="color:#6b8072"><a href="#014725" label="[01:47:25]">&lt;aggi&gt;</a></span><span class="message">i see the whole symmetric &quot;cipher&quot; discussion more closely related to the block-mode of operation and the hashing method chosen</span></div><div class="line" id="014746"><span class="nick" style="color:#6b8072"><a href="#014746" label="[01:47:46]">&lt;aggi&gt;</a></span><span class="message">another reason why, AES is weird</span></div><div class="line" id="014801"><span class="nick" style="color:#80b1d3"><a href="#014801" label="[01:48:01]">&lt;muurkha&gt;</a></span><span class="message">you could of course get lucky and stumble across an algorithm that is actually hard to break, even if you don't know it</span></div><div class="line" id="014802"><span class="nick" style="color:#6b8072"><a href="#014802" label="[01:48:02]">&lt;aggi&gt;</a></span><span class="message">if i couldn't use that in ECB mode...</span></div><div class="line" id="014812"><span class="nick" style="color:#8dd3c7"><a href="#014812" label="[01:48:12]">&lt;stikonas[m]&gt;</a></span><span class="message">And true, most likely experts just wouldn't have time to answer random emails</span></div><div class="line" id="014841"><span class="nick" style="color:#80b1d3"><a href="#014841" label="[01:48:41]">&lt;muurkha&gt;</a></span><span class="message">but it's enormously more common for amateurs to reinvent well-known broken cryptosystems, or slight variations on them that are vulnerable to the same standard attacks</span></div><div class="line" id="015048"><span class="nick" style="color:#6b8072"><a href="#015048" label="[01:50:48]">&lt;aggi&gt;</a></span><span class="message">anyway, that's why i was reading about DEC VAX, that it had 128bit general purpose already, 40 years ago</span></div><div class="line" id="015237"><span class="nick" style="color:#80b1d3"><a href="#015237" label="[01:52:37]">&lt;muurkha&gt;</a></span><span class="message">normal VAX GPRs were 32 bits</span></div><div class="line" id="015316"><span class="nick" style="color:#80b1d3"><a href="#015316" label="[01:53:16]">&lt;muurkha&gt;</a></span><span class="message">I've found that experts are usually very willing to answer random emails</span></div><div class="line" id="015323"><span class="nick" style="color:#6b8072"><a href="#015323" label="[01:53:23]">&lt;aggi&gt;</a></span><span class="message">and DEC supported 128bit integer and floating point with those... by concatenating several registers, somehow</span></div><div class="line" id="015416"><span class="nick" style="color:#80b1d3"><a href="#015416" label="[01:54:16]">&lt;muurkha&gt;</a></span><span class="message">But there's a certain category of random emails they tend to ignore</span></div><div class="line" id="015512"><span class="nick" style="color:#80b1d3"><a href="#015512" label="[01:55:12]">&lt;muurkha&gt;</a></span><span class="message">Excited emails from amateurs who are sure they've stumbled across a groundbreaking result in their field, but who evidently lack the expertise to distinguish groundbreaking results from others</span></div><div class="line" id="015535"><span class="nick" style="color:#80b1d3"><a href="#015535" label="[01:55:35]">&lt;muurkha&gt;</a></span><span class="message">The hotel where I'm staying this weekend, the owner was telling me about his son, who is quite a gearhead</span></div><div class="line" id="015542"><span class="nick" style="color:#2e2a4a"><a href="#015542" label="[01:55:42]">&lt;oriansj&gt;</a></span><span class="message">Crypto discussions are rarely productive if they don't include links to working code and/or peer reviewed analysis</span></div><div class="line" id="015553"><span class="nick" style="color:#6b8072"><a href="#015553" label="[01:55:53]">&lt;aggi&gt;</a></span><span class="message">i am still struggling to decide, if i may continue with any efforts for linux-2.4/tcc/tccboot, or if i'll depart into the 8bit realm (gigatron, z80 whatever) and be happy there</span></div><div class="line" id="015605"><span class="nick" style="color:#80b1d3"><a href="#015605" label="[01:56:05]">&lt;muurkha&gt;</a></span><span class="message">And has a design for an electromagnet-based perpetual motion machine</span></div><div class="line" id="015620"><span class="nick" style="color:#80b1d3"><a href="#015620" label="[01:56:20]">&lt;muurkha&gt;</a></span><span class="message">aggi: have you thought about 12-bit, 16-bit, or 18-bit?</span></div><div class="line" id="015631"><span class="nick" style="color:#6b8072"><a href="#015631" label="[01:56:31]">&lt;aggi&gt;</a></span><span class="message">oriansj: i published the 64bit/dm-crypt proof-of-concept three years ago already</span></div><div class="line" id="015659"><span class="nick" style="color:#80b1d3"><a href="#015659" label="[01:56:59]">&lt;muurkha&gt;</a></span><span class="message">You can ddesign a 32-bit non-Linux processor pretty easily, even without HDLs, down to the gate level</span></div><div class="line" id="015711"><span class="nick" style="color:#6b8072"><a href="#015711" label="[01:57:11]">&lt;aggi&gt;</a></span><span class="message">muurkha: no, i consider 32bit broadly available nowadays, and almost all those got decent barrel-shifter</span></div><div class="line" id="015721"><span class="nick" style="color:#6b8072"><a href="#015721" label="[01:57:21]">&lt;aggi&gt;</a></span><span class="message">that's why, my cipher is that fast, without any &quot;acceleration&quot;</span></div><div class="line" id="015731"><span class="nick" style="color:#2e2a4a"><a href="#015731" label="[01:57:31]">&lt;oriansj&gt;</a></span><span class="message">aggi: no links were provided. Hence the ask. in a more productive direction. Have you checked out the commander X16 yet?</span></div><div class="line" id="015738"><span class="nick" style="color:#80b1d3"><a href="#015738" label="[01:57:38]">&lt;muurkha&gt;</a></span><span class="message">The bit-serial design used in SeRV is a way you can even build it in less gates than a normal 8-bit processor</span></div><div class="line" id="015752"><span class="nick" style="color:#80b1d3"><a href="#015752" label="[01:57:52]">&lt;muurkha&gt;</a></span><span class="message">(though of course more flip-flops)</span></div><div class="line" id="015837"><span class="nick" style="color:#6b8072"><a href="#015837" label="[01:58:37]">&lt;aggi&gt;</a></span><span class="message">oriansj: sadly, the C64/8bit era predates my active carreer</span></div><div class="line" id="015856"><span class="nick" style="color:#2e2a4a"><a href="#015856" label="[01:58:56]">&lt;oriansj&gt;</a></span><span class="message">aggi: oh that is an active project</span></div><div class="line" id="015928"><span class="nick" style="color:#2e2a4a"><a href="#015928" label="[01:59:28]">&lt;oriansj&gt;</a></span><span class="message">as you expressed interest in the 8bit realm</span></div><div class="line" id="015932"><span class="nick" style="color:#80b1d3"><a href="#015932" label="[01:59:32]">&lt;muurkha&gt;</a></span><span class="message">having more than 16 bits of address space and more than 8 bits of instruction word will simplify your life enormously</span></div><div class="line" id="020008"><span class="nick" style="color:#6b8072"><a href="#020008" label="[02:00:08]">&lt;aggi&gt;</a></span><span class="message">sure, it was 16bit adressing</span></div><div class="line" id="020030"><span class="nick" style="color:#2e2a4a"><a href="#020030" label="[02:00:30]">&lt;oriansj&gt;</a></span><span class="message">or 24bit if you do some bank switching</span></div><div class="line" id="020051"><span class="nick" style="color:#6b8072"><a href="#020051" label="[02:00:51]">&lt;aggi&gt;</a></span><span class="message">no expert, but i was reading Z80 used 4bit ALU concatenated, to support larger integer type operations, hence was a tad slower</span></div><div class="line" id="020059"><span class="nick" style="color:#2e2a4a"><a href="#020059" label="[02:00:59]">&lt;oriansj&gt;</a></span><span class="message">although the 6502 has the dumbest stack design</span></div><div class="line" id="020106"><span class="nick" style="color:#80b1d3"><a href="#020106" label="[02:01:06]">&lt;muurkha&gt;</a></span><span class="message">I think that's correct, aggi</span></div><div class="line" id="020114"><span class="nick" style="color:#80b1d3"><a href="#020114" label="[02:01:14]">&lt;muurkha&gt;</a></span><span class="message">oriansj: it's not very flexible but it sure is fast</span></div><div class="line" id="020142"><span class="nick" style="color:#8dd3c7"><a href="#020142" label="[02:01:42]">&lt;stikonas[m]&gt;</a></span><span class="message">It's easier for physics experts to deal with amateurs inventing perpetual motion machines. Unlike ciphers, there isn't even a small chance to stumble upon those</span></div><div class="line" id="020214"><span class="nick" style="color:#80b1d3"><a href="#020214" label="[02:02:14]">&lt;muurkha&gt;</a></span><span class="message">stikonas[m]: no, because you have to build the machine before you find out it doesn't work</span></div><div class="line" id="020229"><span class="nick" style="color:#80b1d3"><a href="#020229" label="[02:02:29]">&lt;muurkha&gt;</a></span><span class="message">and even then that's often chalked up to a construction quality problem</span></div><div class="line" id="020233"><span class="nick" style="color:#80b1d3"><a href="#020233" label="[02:02:33]">&lt;muurkha&gt;</a></span><span class="message">too much friction or something</span></div><div class="line" id="020242"><span class="nick" style="color:#6b8072"><a href="#020242" label="[02:02:42]">&lt;aggi&gt;</a></span><span class="message">i proposed this cipher, because there was various &quot;experts&quot;, who questioned my expertise, for a little while too long</span></div><div class="line" id="020313"><span class="nick" style="color:#80b1d3"><a href="#020313" label="[02:03:13]">&lt;muurkha&gt;</a></span><span class="message">aggi: if you want to prove them wrong, break some existing cryptosystems, or improve known attacks on existing cryptosystems</span></div><div class="line" id="020320"><span class="nick" style="color:#2e2a4a"><a href="#020320" label="[02:03:20]">&lt;oriansj&gt;</a></span><span class="message">but a 256byte stack limit isn't really enough for anything past assembly. Heck even FORTH can easily cross that line</span></div><div class="line" id="020321"><span class="nick" style="color:#80b1d3"><a href="#020321" label="[02:03:21]">&lt;muurkha&gt;</a></span><span class="message">there are existing curricula for how to learn how to do this</span></div><div class="line" id="020337"><span class="nick" style="color:#80b1d3"><a href="#020337" label="[02:03:37]">&lt;muurkha&gt;</a></span><span class="message">it's enough for anything that isn't recursive</span></div><div class="line" id="020355"><span class="nick" style="color:#6b8072"><a href="#020355" label="[02:03:55]">&lt;aggi&gt;</a></span><span class="message">i made it non-primitive recurse</span></div><div class="line" id="020404"><span class="nick" style="color:#80b1d3"><a href="#020404" label="[02:04:04]">&lt;muurkha&gt;</a></span><span class="message">oh, also stop misusing that term</span></div><div class="line" id="020406"><span class="nick" style="color:#6b8072"><a href="#020406" label="[02:04:06]">&lt;aggi&gt;</a></span><span class="message">just for them, those experts, to break mine</span></div><div class="line" id="020445"><span class="nick" style="color:#80b1d3"><a href="#020445" label="[02:04:45]">&lt;muurkha&gt;</a></span><span class="message">incorrect usage of standard terminology is a bigger red flag than inventing nonstandard terminology for standard concepts</span></div><div class="line" id="020547"><span class="nick" style="color:#2e2a4a"><a href="#020547" label="[02:05:47]">&lt;oriansj&gt;</a></span><span class="message">again. If no links to working code or peer reviewed articles. Please drop the discussion of crypto</span></div><div class="line" id="020606"><span class="nick" style="color:#6b8072"><a href="#020606" label="[02:06:06]">&lt;aggi&gt;</a></span><span class="message">github.com/agg1/scram88</span></div><div class="line" id="020637"><span class="nick" style="color:#6b8072"><a href="#020637" label="[02:06:37]">&lt;aggi&gt;</a></span><span class="message">that's the dm-crypt/64bit proof-of-concept; i won't publish the 32bit one... it's too god</span></div><div class="line" id="020638"><span class="nick" style="color:#6b8072"><a href="#020638" label="[02:06:38]">&lt;aggi&gt;</a></span><span class="message">good</span></div><div class="line" id="020731"><span class="nick" style="color:#6b8072"><a href="#020731" label="[02:07:31]">&lt;aggi&gt;</a></span><span class="message">it's much simpler, than AES or any other, far less lines of code, it's very fast, the faster one proposed ever</span></div><div class="line" id="020742"><span class="nick" style="color:#6b8072"><a href="#020742" label="[02:07:42]">&lt;aggi&gt;</a></span><span class="message">*fastest</span></div><div class="line" id="020758"><span class="nick" style="color:#6b8072"><a href="#020758" label="[02:07:58]">&lt;aggi&gt;</a></span><span class="message">it's intended for tiniest embedded, low power systems</span></div><div class="line" id="020824"><span class="nick" style="color:#6b8072"><a href="#020824" label="[02:08:24]">&lt;aggi&gt;</a></span><span class="message">simple portability, and full trust in the design</span></div><div class="line" id="020936"><span class="nick" style="color:#2e2a4a"><a href="#020936" label="[02:09:36]">&lt;oriansj&gt;</a></span><span class="message">aggi: I am glad you made something that you are proud of. But we are a Free Software Community; we share the good things we make so that we all benefit in a non-zero sum community.</span></div><div class="line" id="020937"><span class="nick" style="color:#6b8072"><a href="#020937" label="[02:09:37]">&lt;aggi&gt;</a></span><span class="message">the 32bit variant too is much better, because i dropped the whole idea, to hack against linux-kernel crypto-api (i removed the entire crypto-api from my linux kconfig btw..)</span></div><div class="line" id="021009"><span class="nick" style="color:#6b8072"><a href="#021009" label="[02:10:09]">&lt;aggi&gt;</a></span><span class="message">oriansj: to my knowledge, Intel never published particular things</span></div><div class="line" id="021022"><span class="nick" style="color:#6b8072"><a href="#021022" label="[02:10:22]">&lt;aggi&gt;</a></span><span class="message">and there is many other stories: ACPI, UEFI, the whole firmware.exe junk</span></div><div class="line" id="021047"><span class="nick" style="color:#6b8072"><a href="#021047" label="[02:10:47]">&lt;aggi&gt;</a></span><span class="message">COCOM, 1984 SCPA... well, no, there isn't any &quot;community&quot; who shares the &quot;good things&quot;</span></div><div class="line" id="021122"><span class="nick" style="color:#6b8072"><a href="#021122" label="[02:11:22]">&lt;aggi&gt;</a></span><span class="message">that's another reason why, nowadays, the clean system bootstrapping, is a horror show</span></div><div class="line" id="021247"><span class="nick" style="color:#2e2a4a"><a href="#021247" label="[02:12:47]">&lt;oriansj&gt;</a></span><span class="message">aggi: well yes but we are not intel. we are #bootstrappable; there are no secrets. No exclusion. No Deception. No Fear nor Intimidation. No Information Control nor Reporting Structure.</span></div><div class="line" id="021423"><span class="nick" style="color:#2e2a4a"><a href="#021423" label="[02:14:23]">&lt;oriansj&gt;</a></span><span class="message">Yes, there are a great many problems we face but by working together and with other communties; we can improve the situation. One step at a time.</span></div><div class="line" id="021812"><span class="nick" style="color:#2e2a4a"><a href="#021812" label="[02:18:12]">&lt;oriansj&gt;</a></span><span class="message">we publish for the whole world, so that they can see our mistakes and our most impressive work. If they care about us, they will tell us what we could have done better.</span></div><div class="line" id="021836"><span class="nick" style="color:#6d2462"><a href="#021836" label="[02:18:36]">&lt;rickmasters&gt;</a></span><span class="message">stikonas, fossy: have you guys tried a qemu build lately? The sysc disk image seems to be running out of space. Or is it just me?</span></div><div class="line" id="021902"><span class="nick" style="color:#234e69"><a href="#021902" label="[02:19:02]">&lt;vagrantc&gt;</a></span><span class="message">anyone going to be coming to 2013.fossy.us in mid-august? would love to see a bootstrappable talk there</span></div><div class="line" id="021928"><span class="nick" style="color:#234e69"><a href="#021928" label="[02:19:28]">&lt;vagrantc&gt;</a></span><span class="message">will propose a reproducible builds talk and touch on bootstrappable stuff ... but bootstrappable probably deserves it's own talk</span></div><div class="line" id="021952"><span class="nick" style="color:#234e69"><a href="#021952" label="[02:19:52]">&lt;vagrantc&gt;</a></span><span class="message">er. ... 2023.fossy.us</span></div><div class="line" id="021953"><span class="nick" style="color:#234e69"><a href="#021953" label="[02:19:53]">&lt;vagrantc&gt;</a></span><span class="message">hah</span></div><div class="line" id="022041"><span class="nick" style="color:#2e2a4a"><a href="#022041" label="[02:20:41]">&lt;oriansj&gt;</a></span><span class="message">vagrantc: well, I was just about to ask if you have a time machine I could borrow ;-p</span></div><div class="line" id="022109"><span class="nick" style="color:#234e69"><a href="#022109" label="[02:21:09]">&lt;vagrantc&gt;</a></span><span class="message">not sure guix time-machine is up for that just yet</span></div><div class="line" id="022152"><span class="nick" style="color:#2e2a4a"><a href="#022152" label="[02:21:52]">&lt;oriansj&gt;</a></span><span class="message">do you know if they would accept a remote talk?</span></div><div class="line" id="022314"><span class="nick" style="color:#234e69"><a href="#022314" label="[02:23:14]">&lt;vagrantc&gt;</a></span><span class="message">don't know, but can ask</span></div><div class="line" id="022427"><span class="nick" style="color:#234e69"><a href="#022427" label="[02:24:27]">&lt;vagrantc&gt;</a></span><span class="message">asked in the conservancy XMPP channel ...</span></div><div class="line" id="023527"><span class="nick" style="color:#2e2a4a"><a href="#023527" label="[02:35:27]">&lt;oriansj&gt;</a></span><span class="message">thank you vagrantc ^_^</span></div><div class="line" id="023730"><span class="nick" style="color:#234e69"><a href="#023730" label="[02:37:30]">&lt;vagrantc&gt;</a></span><span class="message">oriansj: another angle would be to propose a talk and there is a notes-to-the-organizers field where you could mention that</span></div><div class="line" id="032307"><span class="nick" style="color:#6b8072"><a href="#032307" label="[03:23:07]">&lt;aggi&gt;</a></span><span class="message">oriansj: #bootstrappable is _the_ project, with which i recovered some hope for free/open software (and hardware!)</span></div><div class="line" id="032439"><span class="nick" style="color:#6b8072"><a href="#032439" label="[03:24:39]">&lt;aggi&gt;</a></span><span class="message">and there is some problems remaining, to cope with &quot;bureaucracy&quot; here, which is the hindrance to me working and publishing freely</span></div><div class="line" id="032627"><span class="nick" style="color:#6b8072"><a href="#032627" label="[03:26:27]">&lt;aggi&gt;</a></span><span class="message">unrelated to bootstrappable/gnu</span></div><div class="line" id="034931"><span class="nick" style="color:#6c3d55"><a href="#034931" label="[03:49:31]">&lt;fossy&gt;</a></span><span class="message">rickmasters i did do one with GCC but not since then..</span></div><div class="line" id="034934"><span class="nick" style="color:#6c3d55"><a href="#034934" label="[03:49:34]">&lt;fossy&gt;</a></span><span class="message">i'll have a look</span></div><div class="line" id="102950"><span class="nick" style="color:#8dd3c7"><a href="#102950" label="[10:29:50]">&lt;stikonas[m]&gt;</a></span><span class="message">rickmasters: yes, I tried and it failed in sysc install stage</span></div><div class="line" id="103002"><span class="nick" style="color:#8dd3c7"><a href="#103002" label="[10:30:02]">&lt;stikonas[m]&gt;</a></span><span class="message">It was ba few days ago</span></div><div class="line" id="145900"><span class="nick" style="color:#2e2a4a"><a href="#145900" label="[14:59:00]">&lt;oriansj&gt;</a></span><span class="message">well if anyone is interested in Ada, there is work there needed for Guix. And Libreboot needs Ada support for native graphics initialization on most Intel boards.</span></div><div class="line" id="150812"><span class="nick" style="color:#d9d9d9"><a href="#150812" label="[15:08:12]">&lt;fitzsim&gt;</a></span><span class="message">cool, I didn't know Libreboot used Ada</span></div><div class="line" id="162327"><span class="nick" style="color:#bc80bd"><a href="#162327" label="[16:23:27]">&lt;Irvise_&gt;</a></span><span class="message">hi oriansj, there is a very small group of people who is aware of this issue :)</span></div><div class="line" id="162423"><span class="nick" style="color:#bc80bd"><a href="#162423" label="[16:24:23]">&lt;Irvise_&gt;</a></span><span class="message">theruran kickstarted the idea and some discussions have already taken place in order to see how we can bootstrap Ada.</span></div><div class="line" id="162504"><span class="nick" style="color:#bc80bd"><a href="#162504" label="[16:25:04]">&lt;Irvise_&gt;</a></span><span class="message">Sadly, that is going to take years, as progress is basically nonexistent (lack of time...)</span></div><div class="line" id="162536"><span class="nick" style="color:#bc80bd"><a href="#162536" label="[16:25:36]">&lt;Irvise_&gt;</a></span><span class="message">I talked to GNUtoo from #libreplanet during FOSDEM as he pointed this exact issue to me.</span></div><div class="line" id="162621"><span class="nick" style="color:#bc80bd"><a href="#162621" label="[16:26:21]">&lt;Irvise_&gt;</a></span><span class="message">Therefore, I believe, the best thing to do now is to get GNAT/GCC-Ada support into Guix using a binary ala Haskell. That way Ada packages could already be packaged into Guix.</span></div><div class="line" id="162642"><span class="nick" style="color:#bc80bd"><a href="#162642" label="[16:26:42]">&lt;Irvise_&gt;</a></span><span class="message">After that, the bootstrapping system could see some work (an probably some more hands...)</span></div><div class="line" id="162727"><span class="nick" style="color:#bc80bd"><a href="#162727" label="[16:27:27]">&lt;Irvise_&gt;</a></span><span class="message">If someone would like to help me get Ada packaged in Guix, I would give that priority in my life (not the highest overall, but in terms of projects)</span></div><div class="line" id="174454"><span class="nick" style="color:#bc80bd"><a href="#174454" label="[17:44:54]">&lt;Irvise_&gt;</a></span><span class="message">If you would like a better inside on the bootstrapping efforts there is <a rel="nofollow" href="https://fossil.irvise.xyz/gnat-bootstrap/forum">https://fossil.irvise.xyz/gnat-bootstrap/forum</a> </span></div><div class="line" id="185324"><span class="nick" style="color:#2e2a4a"><a href="#185324" label="[18:53:24]">&lt;oriansj&gt;</a></span><span class="message">Irvise_: well given that GNAT was originally bootstrapped from Ada-ED, (which is packaged in guix) one would think there might be a much easier path to bootstrappaing Ada by checking if an earlier version of GNAT can be compiled and if not, what handful of features are missing.</span></div><div class="line" id="191324"><span class="nick" style="color:#3c5b35"><a href="#191324" label="[19:13:24]">&lt;Arghadeep_Saha&gt;</a></span><span class="message">Hello I am new to this field as some of you suggested me to study the documentation of the GNU Mes project. I am studying that. Can anyone please list some more resources to learn from?</span></div><div class="line" id="202456"><span class="nick" style="color:#bc80bd"><a href="#202456" label="[20:24:56]">&lt;Irvise_&gt;</a></span><span class="message">oriansj: afaik, GNAT was bootstrapped in closed source form (internal to the Uni of NY) using Ada-ED. It was written in Ada83 (using Ada-Ed). Once it matured, it was rewritten in Ada95 which was compiled with itself. Finally, that Ada95 src version was then opened to the public/upstreamed in GCC (3.12p)</span></div><div class="line" id="203755"><span class="nick" style="color:#2e2a4a"><a href="#203755" label="[20:37:55]">&lt;oriansj&gt;</a></span><span class="message">Arghadeep_Saha: you need to be a little more precise on your end goal before effective recommendations can be made.</span></div><div class="line" id="203923"><span class="nick" style="color:#2e2a4a"><a href="#203923" label="[20:39:23]">&lt;oriansj&gt;</a></span><span class="message">Irvise_: that would be quite unfortunate and someone confirmed that the initial release is not buildable by Ada-Ed correct?</span></div><div class="line" id="204056"><span class="nick" style="color:#bc80bd"><a href="#204056" label="[20:40:56]">&lt;Irvise_&gt;</a></span><span class="message">oriansj: no confirmation.</span></div><div class="line" id="204145"><span class="nick" style="color:#bc80bd"><a href="#204145" label="[20:41:45]">&lt;Irvise_&gt;</a></span><span class="message">Though I did read the original release documentation (introduction) and it said that it was very buggy and that it should not be used and potentially be unable to build a lot of programs while leaving some parts of the Ada95 standard out.</span></div><div class="line" id="204221"><span class="nick" style="color:#bc80bd"><a href="#204221" label="[20:42:21]">&lt;Irvise_&gt;</a></span><span class="message">I could give it a try. But it is a really old release... I would not be surprised if even the C backend would not build in todays systems...</span></div><div class="line" id="204247"><span class="nick" style="color:#2e2a4a"><a href="#204247" label="[20:42:47]">&lt;oriansj&gt;</a></span><span class="message">Irvise_: fair enough but thank you for checking.</span></div><div class="line" id="204318"><span class="nick" style="color:#bc80bd"><a href="#204318" label="[20:43:18]">&lt;Irvise_&gt;</a></span><span class="message">I will report back. Hopefully within a couple of months.</span></div><div class="line" id="204620"><span class="nick" style="color:#2e2a4a"><a href="#204620" label="[20:46:20]">&lt;oriansj&gt;</a></span><span class="message">ouch, hard to imagine the Ada build environment is that horrid.</span></div><div class="line" id="212822"><span class="nick" style="color:#af8d2f"><a href="#212822" label="[21:28:22]">&lt;theruran&gt;</a></span><span class="message">not that hard to imagine since as you have pointed out @oriansj most compiler developers forget about the issue of bootstrapping as soon as possible</span></div><div class="line" id="214929"><span class="nick" style="color:#2e2a4a"><a href="#214929" label="[21:49:29]">&lt;oriansj&gt;</a></span><span class="message">theruran: but taking months to setup, is kind of an epic step past how long it takes to setup even the worst C bootstrap environment.</span></div><div class="line" id="220439"><span class="nick" style="color:#af8d2f"><a href="#220439" label="[22:04:39]">&lt;theruran&gt;</a></span><span class="message">C is a lot simpler than Ada 🤷‍♂️</span></div><div class="line" id="223055"><span class="nick" style="color:#bc80bd"><a href="#223055" label="[22:30:55]">&lt;Irvise_&gt;</a></span><span class="message">oriansj: I meant that it will take me a bit of time as I am extremely busy nowdays :( It should not really need that much time! :)</span></div><div class="line" id="223123"><span class="nick" style="color:#bc80bd"><a href="#223123" label="[22:31:23]">&lt;Irvise_&gt;</a></span><span class="message">theruran: hey! How is the PhD going? Did the application go all right?</span></div><br /></div></body></html>