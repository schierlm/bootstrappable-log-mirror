<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-08-26.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000448"><span class="nick" style="color:#389600"><a href="#000448" label="[00:04:48]">&lt;theruran&gt;</a></span><span class="message">aggi: had you tried Plan9 libc? not sure about MINIX</span></div><div class="line" id="000626"><span class="nick" style="color:#8dd3c7"><a href="#000626" label="[00:06:26]">&lt;aggi&gt;</a></span><span class="message">theruran: didn't think of those yet</span></div><div class="line" id="000646"><span class="nick" style="color:#8dd3c7"><a href="#000646" label="[00:06:46]">&lt;aggi&gt;</a></span><span class="message">noted. the test-case is almost trivial to verifiy: AS=arm-tcc and see what happens</span></div><div class="line" id="000802"><span class="nick" style="color:#389600"><a href="#000802" label="[00:08:02]">&lt;theruran&gt;</a></span><span class="message">good luck!</span></div><div class="line" id="000950"><span class="nick" style="color:#8dd3c7"><a href="#000950" label="[00:09:50]">&lt;aggi&gt;</a></span><span class="message">theruran: won't need it, thanks very much, nonetheless.</span></div><div class="line" id="002316"><span class="nick" style="color:#2e2a4a"><a href="#002316" label="[00:23:16]">&lt;oriansj&gt;</a></span><span class="message">aggi: well libcs are pretty tiny and if one is willing to take a tiny performance hit only needs about 20 lines of assembly per architecture</span></div><div class="line" id="002421"><span class="nick" style="color:#2e2a4a"><a href="#002421" label="[00:24:21]">&lt;oriansj&gt;</a></span><span class="message">so you could take any libc and remove most of the assembly without much effort</span></div><div class="line" id="002456"><span class="nick" style="color:#8dd3c7"><a href="#002456" label="[00:24:56]">&lt;aggi&gt;</a></span><span class="message">oriansj: in dietlibc i counted ~700 .S files...</span></div><div class="line" id="002515"><span class="nick" style="color:#8dd3c7"><a href="#002515" label="[00:25:15]">&lt;aggi&gt;</a></span><span class="message">in total, for all architectures</span></div><div class="line" id="002517"><span class="nick" style="color:#2e2a4a"><a href="#002517" label="[00:25:17]">&lt;oriansj&gt;</a></span><span class="message">as the only thing in a libc that can't be just a plain C function are syscalls</span></div><div class="line" id="002547"><span class="nick" style="color:#6b8072"><a href="#002547" label="[00:25:47]">&lt;ekaitz&gt;</a></span><span class="message">and syscalls are pretty simple assembly btw</span></div><div class="line" id="002619"><span class="nick" style="color:#2e2a4a"><a href="#002619" label="[00:26:19]">&lt;oriansj&gt;</a></span><span class="message">So write a .S with syscall_zero(), syscall_one(void*) ,,, syscall_eight(void*, void*, void* ..)</span></div><div class="line" id="002644"><span class="nick" style="color:#2e2a4a"><a href="#002644" label="[00:26:44]">&lt;oriansj&gt;</a></span><span class="message">oops forgot a little detail</span></div><div class="line" id="002709"><span class="nick" style="color:#8dd3c7"><a href="#002709" label="[00:27:09]">&lt;aggi&gt;</a></span><span class="message">whatever conclusion you draw, the current situation is this: there isn't any libc which AS=arm-tcc could digest</span></div><div class="line" id="002712"><span class="nick" style="color:#2e2a4a"><a href="#002712" label="[00:27:12]">&lt;oriansj&gt;</a></span><span class="message">syscall_zero(int number), syscall_one(int number, void* param) ..</span></div><div class="line" id="002744"><span class="nick" style="color:#2e2a4a"><a href="#002744" label="[00:27:44]">&lt;oriansj&gt;</a></span><span class="message">then all syscalls become calls to those few functions written in assembly</span></div><div class="line" id="002806"><span class="nick" style="color:#6b8072"><a href="#002806" label="[00:28:06]">&lt;ekaitz&gt;</a></span><span class="message">doesn't Mes have a minimal libc too?</span></div><div class="line" id="002823"><span class="nick" style="color:#2e2a4a"><a href="#002823" label="[00:28:23]">&lt;oriansj&gt;</a></span><span class="message">ekaitz: yes, infact I am describing the very thing meslibc does</span></div><div class="line" id="002905"><span class="nick" style="color:#8dd3c7"><a href="#002905" label="[00:29:05]">&lt;aggi&gt;</a></span><span class="message">i don't insist on aarch32 and AS=arm-tcc, it's only a cornerstone of proof, if any alternative assembler and/or architecture are feasible</span></div><div class="line" id="002941"><span class="nick" style="color:#6b8072"><a href="#002941" label="[00:29:41]">&lt;ekaitz&gt;</a></span><span class="message">aggi: I'm late to the party so IDK what are you trying to do with it</span></div><div class="line" id="003000"><span class="nick" style="color:#8dd3c7"><a href="#003000" label="[00:30:00]">&lt;aggi&gt;</a></span><span class="message">currently i emit two firmware variants: aarch32 (with aarch64 kernel/uboot), and amd64; reason being to catch some iregularities</span></div><div class="line" id="003010"><span class="nick" style="color:#2e2a4a"><a href="#003010" label="[00:30:10]">&lt;oriansj&gt;</a></span><span class="message">aggi: if you are willing to write only 20 lines of assembly you should be able to convert any libc to only have assembly that TCC supports</span></div><div class="line" id="003029"><span class="nick" style="color:#8dd3c7"><a href="#003029" label="[00:30:29]">&lt;aggi&gt;</a></span><span class="message">greetings ekaitz: for aarch32 i replaced the entire GNU toolchain with AS/AR/CC/LD=arm-tcc</span></div><div class="line" id="003036"><span class="nick" style="color:#8dd3c7"><a href="#003036" label="[00:30:36]">&lt;aggi&gt;</a></span><span class="message">except, libc</span></div><div class="line" id="003049"><span class="nick" style="color:#6b8072"><a href="#003049" label="[00:30:49]">&lt;ekaitz&gt;</a></span><span class="message">mes's libc should be supported by tcc</span></div><div class="line" id="003057"><span class="nick" style="color:#6b8072"><a href="#003057" label="[00:30:57]">&lt;ekaitz&gt;</a></span><span class="message">and it's ported to arm if i'm not mistaken</span></div><div class="line" id="003130"><span class="nick" style="color:#8dd3c7"><a href="#003130" label="[00:31:30]">&lt;aggi&gt;</a></span><span class="message">could mes libc be used with linux-kernel and toybox userland?</span></div><div class="line" id="003148"><span class="nick" style="color:#6b8072"><a href="#003148" label="[00:31:48]">&lt;ekaitz&gt;</a></span><span class="message">aggi: that's a question I'm not able to answer</span></div><div class="line" id="003201"><span class="nick" style="color:#6b8072"><a href="#003201" label="[00:32:01]">&lt;ekaitz&gt;</a></span><span class="message">maybe... try?</span></div><div class="line" id="003210"><span class="nick" style="color:#8dd3c7"><a href="#003210" label="[00:32:10]">&lt;aggi&gt;</a></span><span class="message">and, of cause tcc compiler itself, to create a minimal *nix development system</span></div><div class="line" id="003217"><span class="nick" style="color:#2e2a4a"><a href="#003217" label="[00:32:17]">&lt;oriansj&gt;</a></span><span class="message">aggi: mes libc was only designed to be just enough for the building of TCC and nothing more</span></div><div class="line" id="003255"><span class="nick" style="color:#8dd3c7"><a href="#003255" label="[00:32:55]">&lt;aggi&gt;</a></span><span class="message">oriansj: which is a good start, given tcc is a relatively complex piece of software already</span></div><div class="line" id="003306"><span class="nick">***</span><span class="message notice">nckx_ is now known as nckx</span></div><div class="line" id="003339"><span class="nick" style="color:#2e2a4a"><a href="#003339" label="[00:33:39]">&lt;oriansj&gt;</a></span><span class="message">you can get mes and meslibc here: <a rel="nofollow" href="https://gitlab.com/janneke/mes.git">https://gitlab.com/janneke/mes.git</a> </span></div><div class="line" id="003411"><span class="nick" style="color:#8dd3c7"><a href="#003411" label="[00:34:11]">&lt;aggi&gt;</a></span><span class="message">thank you!</span></div><div class="line" id="003412"><span class="nick" style="color:#6b8072"><a href="#003412" label="[00:34:12]">&lt;ekaitz&gt;</a></span><span class="message">aggi: but tcc is very specific... so it meslibc will only implement file access and stuff like that</span></div><div class="line" id="003418"><span class="nick" style="color:#6b8072"><a href="#003418" label="[00:34:18]">&lt;ekaitz&gt;</a></span><span class="message">not anything more complex</span></div><div class="line" id="003521"><span class="nick" style="color:#8dd3c7"><a href="#003521" label="[00:35:21]">&lt;aggi&gt;</a></span><span class="message">i would consider a toybox-userspace a proof-of-concept</span></div><div class="line" id="003522"><span class="nick" style="color:#2e2a4a"><a href="#003522" label="[00:35:22]">&lt;oriansj&gt;</a></span><span class="message">ekaitz: (it is also used by mes.c so it has some user interaction bits</span></div><div class="line" id="003526"><span class="nick" style="color:#2e2a4a"><a href="#003526" label="[00:35:26]">&lt;oriansj&gt;</a></span><span class="message">)</span></div><div class="line" id="003605"><span class="nick" style="color:#6b8072"><a href="#003605" label="[00:36:05]">&lt;ekaitz&gt;</a></span><span class="message">oriansj: cool, thanks for clarifying</span></div><div class="line" id="003633"><span class="nick" style="color:#6b8072"><a href="#003633" label="[00:36:33]">&lt;ekaitz&gt;</a></span><span class="message">I might take a deeper look into it once I finish with tcc...</span></div><div class="line" id="003659"><span class="nick" style="color:#8dd3c7"><a href="#003659" label="[00:36:59]">&lt;aggi&gt;</a></span><span class="message">anyway, i am willing to practice and hack ASM, of cause; however i am not willing to struggle with hundreds of vendor-specific and GNU gas specific extensions</span></div><div class="line" id="003858"><span class="nick" style="color:#2e2a4a"><a href="#003858" label="[00:38:58]">&lt;oriansj&gt;</a></span><span class="message">aggi: you don't, one only needs to know about 7-8 assembly instructions</span></div><div class="line" id="003918"><span class="nick" style="color:#2e2a4a"><a href="#003918" label="[00:39:18]">&lt;oriansj&gt;</a></span><span class="message">(mostly just settings a few registers and then doing the syscall)</span></div><div class="line" id="003946"><span class="nick" style="color:#2e2a4a"><a href="#003946" label="[00:39:46]">&lt;oriansj&gt;</a></span><span class="message">I can even point you at the assembly you would need</span></div><div class="line" id="004027"><span class="nick" style="color:#6b8072"><a href="#004027" label="[00:40:27]">&lt;ekaitz&gt;</a></span><span class="message">aggi: if you want to learn about that in Hex0 you can see how to make the syscalls</span></div><div class="line" id="004107"><span class="nick" style="color:#2e2a4a"><a href="#004107" label="[00:41:07]">&lt;oriansj&gt;</a></span><span class="message">or just look at M2libc: <a rel="nofollow" href="https://github.com/oriansj/M2libc/blob/main/aarch64/linux/unistd.c">https://github.com/oriansj/M2libc/blob/main/aarch64/linux/unistd.c</a> </span></div><div class="line" id="004107"><span class="nick" style="color:#8dd3c7"><a href="#004107" label="[00:41:07]">&lt;aggi&gt;</a></span><span class="message">oriansj: i will try something else first... mes-libc+toybox-userspace, for either i386/amd64/aarch32 and see if any of this passes</span></div><div class="line" id="004203"><span class="nick" style="color:#8dd3c7"><a href="#004203" label="[00:42:03]">&lt;aggi&gt;</a></span><span class="message">i take your word for granted, mes-libc can be compiled/linked/assembled with arm-tcc/i386-tcc etc</span></div><div class="line" id="004236"><span class="nick" style="color:#2e2a4a"><a href="#004236" label="[00:42:36]">&lt;oriansj&gt;</a></span><span class="message">aggi: I said meslibc can be used to build tcc</span></div><div class="line" id="004300"><span class="nick" style="color:#2e2a4a"><a href="#004300" label="[00:43:00]">&lt;oriansj&gt;</a></span><span class="message">it include M1 assembly which needs tweaking to be something tcc can directly build</span></div><div class="line" id="004452"><span class="nick" style="color:#8dd3c7"><a href="#004452" label="[00:44:52]">&lt;aggi&gt;</a></span><span class="message">it's just i had a look at the aarch32 ASM parts inside dietlibc/musl-libc/uclibc/newlib ... didn't seem simple to me which requires &quot;only 7-8 assembly instructions&quot;</span></div><div class="line" id="004620"><span class="nick" style="color:#2e2a4a"><a href="#004620" label="[00:46:20]">&lt;oriansj&gt;</a></span><span class="message">aggi: aarch32 syscalls are just the settings of a few registers and then using the syscall instruction</span></div><div class="line" id="004646"><span class="nick" style="color:#8dd3c7"><a href="#004646" label="[00:46:46]">&lt;aggi&gt;</a></span><span class="message">syscalls, and the main() entry point required some asm too</span></div><div class="line" id="004658"><span class="nick" style="color:#2e2a4a"><a href="#004658" label="[00:46:58]">&lt;oriansj&gt;</a></span><span class="message">in fact most architectures are just the setting of a few registers and doing a syscall instruction (or calling an interrupt)</span></div><div class="line" id="004659"><span class="nick" style="color:#8dd3c7"><a href="#004659" label="[00:46:59]">&lt;aggi&gt;</a></span><span class="message">some other parts can probably be re-written in C</span></div><div class="line" id="004724"><span class="nick" style="color:#6b8072"><a href="#004724" label="[00:47:24]">&lt;ekaitz&gt;</a></span><span class="message">aggi: you need the crt* files too</span></div><div class="line" id="004732"><span class="nick" style="color:#6b8072"><a href="#004732" label="[00:47:32]">&lt;ekaitz&gt;</a></span><span class="message">and those are normally written in assembly</span></div><div class="line" id="004741"><span class="nick" style="color:#8dd3c7"><a href="#004741" label="[00:47:41]">&lt;aggi&gt;</a></span><span class="message">yes, and what i had seen in musl-libc, for the main() entry point with the related aarch32 asm wasn't simple either</span></div><div class="line" id="004744"><span class="nick" style="color:#6b8072"><a href="#004744" label="[00:47:44]">&lt;ekaitz&gt;</a></span><span class="message">but it shouldn't be too much to understand</span></div><div class="line" id="004745"><span class="nick" style="color:#2e2a4a"><a href="#004745" label="[00:47:45]">&lt;oriansj&gt;</a></span><span class="message">actually you mean _start and that is super simple too: <a rel="nofollow" href="https://github.com/oriansj/M2libc/blob/main/aarch64/libc-full.M1">https://github.com/oriansj/M2libc/blob/main/aarch64/libc-full.M1</a> </span></div><div class="line" id="004836"><span class="nick" style="color:#8dd3c7"><a href="#004836" label="[00:48:36]">&lt;aggi&gt;</a></span><span class="message">the _start entry for aarch32 in musl-libc is _NOT_ simple</span></div><div class="line" id="004841"><span class="nick" style="color:#2e2a4a"><a href="#004841" label="[00:48:41]">&lt;oriansj&gt;</a></span><span class="message">you just setup the stack for main so that argc, argv and envp are in order and then feel free to call a C function for doing anything more advanced</span></div><div class="line" id="004948"><span class="nick" style="color:#6b8072"><a href="#004948" label="[00:49:48]">&lt;ekaitz&gt;</a></span><span class="message">aggi: I feel you with that... these days I'm working on TinyCC and its not tiny and it's not easy to read either</span></div><div class="line" id="005030"><span class="nick" style="color:#6b8072"><a href="#005030" label="[00:50:30]">&lt;ekaitz&gt;</a></span><span class="message">aggi: try to avoid frustration and everything will get better with time... assembly looks harder than it actually is</span></div><div class="line" id="005138"><span class="nick" style="color:#8dd3c7"><a href="#005138" label="[00:51:38]">&lt;aggi&gt;</a></span><span class="message">as a minimum acceptance-test, simple or not, i would define the following: CC/LD/AR,and AS=arm-tcc and see _any_ practically userfull libc pass with it</span></div><div class="line" id="005202"><span class="nick" style="color:#8dd3c7"><a href="#005202" label="[00:52:02]">&lt;aggi&gt;</a></span><span class="message">then next, compilation/linking of a toybox-userspace against such a libc</span></div><div class="line" id="005205"><span class="nick" style="color:#2e2a4a"><a href="#005205" label="[00:52:05]">&lt;oriansj&gt;</a></span><span class="message">ekaitz: well, if I change up my M3 plans in a serious way. I could probably help you indirectly with all that.</span></div><div class="line" id="005305"><span class="nick" style="color:#6b8072"><a href="#005305" label="[00:53:05]">&lt;ekaitz&gt;</a></span><span class="message">oriansj: I hope we can get rid of tcc from the chain asap so if you do, that would be actually awesome</span></div><div class="line" id="005521"><span class="nick" style="color:#2e2a4a"><a href="#005521" label="[00:55:21]">&lt;oriansj&gt;</a></span><span class="message">well I can only put maybe 0.5-1 hour a night into it so it'll take a bit unless someone can save me to the slow bits</span></div><div class="line" id="005558"><span class="nick" style="color:#2e2a4a"><a href="#005558" label="[00:55:58]">&lt;oriansj&gt;</a></span><span class="message">for example figure out the compile order so that it could be built with say a single gcc command</span></div><div class="line" id="005711"><span class="nick" style="color:#6b8072"><a href="#005711" label="[00:57:11]">&lt;ekaitz&gt;</a></span><span class="message">if you have this plan written somewhere I can try to help but I can't promise anything</span></div><div class="line" id="005842"><span class="nick" style="color:#6d2462"><a href="#005842" label="[00:58:42]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, setting up the stack can't be done from C...</span></div><div class="line" id="005854"><span class="nick" style="color:#6d2462"><a href="#005854" label="[00:58:54]">&lt;stikonas[m]&gt;</a></span><span class="message">So some assembly is unavoidable</span></div><div class="line" id="005939"><span class="nick" style="color:#6d2462"><a href="#005939" label="[00:59:39]">&lt;stikonas[m]&gt;</a></span><span class="message">That's one of the few assembly bits not exposed in C</span></div><div class="line" id="005948"><span class="nick" style="color:#6d2462"><a href="#005948" label="[00:59:48]">&lt;stikonas[m]&gt;</a></span><span class="message">Another is syscalls</span></div><div class="line" id="010014"><span class="nick" style="color:#8dd3c7"><a href="#010014" label="[01:00:14]">&lt;aggi&gt;</a></span><span class="message">granted, in theory; yet in practice in dietlibc (as an example for this), i counted ~700 .S files in total</span></div><div class="line" id="010156"><span class="nick" style="color:#2e2a4a"><a href="#010156" label="[01:01:56]">&lt;oriansj&gt;</a></span><span class="message">ekaitz: not a fully written up plan but the general plan is make TCC buildable by M2-Planet while preserving all features needed to build GCC; create linker and assembler that become drop in replacements for binutils</span></div><div class="line" id="010223"><span class="nick" style="color:#2e2a4a"><a href="#010223" label="[01:02:23]">&lt;oriansj&gt;</a></span><span class="message">cut out a bunch of steps in the bootstrap</span></div><div class="line" id="010336"><span class="nick" style="color:#6d2462"><a href="#010336" label="[01:03:36]">&lt;stikonas[m]&gt;</a></span><span class="message">Tcc buildable by m2-planet is still quite ambitious</span></div><div class="line" id="010339"><span class="nick" style="color:#6b8072"><a href="#010339" label="[01:03:39]">&lt;ekaitz&gt;</a></span><span class="message">oriansj: hm if that involves touching tcc I'm not your man</span></div><div class="line" id="010350"><span class="nick" style="color:#6d2462"><a href="#010350" label="[01:03:50]">&lt;stikonas[m]&gt;</a></span><span class="message">Need to add quite a few C99 things</span></div><div class="line" id="010413"><span class="nick" style="color:#6b8072"><a href="#010413" label="[01:04:13]">&lt;ekaitz&gt;</a></span><span class="message">still TCC is not even compilable from mes nowadays so...</span></div><div class="line" id="010415"><span class="nick" style="color:#2e2a4a"><a href="#010415" label="[01:04:15]">&lt;oriansj&gt;</a></span><span class="message">ekaitz: how about writing C tests?</span></div><div class="line" id="010415"><span class="nick" style="color:#6d2462"><a href="#010415" label="[01:04:15]">&lt;stikonas[m]&gt;</a></span><span class="message">I don't think we want to touch tcc too much</span></div><div class="line" id="010435"><span class="nick" style="color:#6d2462"><a href="#010435" label="[01:04:35]">&lt;stikonas[m]&gt;</a></span><span class="message">Ideally, bootstrap compilers are improved</span></div><div class="line" id="010446"><span class="nick" style="color:#6d2462"><a href="#010446" label="[01:04:46]">&lt;stikonas[m]&gt;</a></span><span class="message">Rather than more complicated simplified</span></div><div class="line" id="010452"><span class="nick" style="color:#6b8072"><a href="#010452" label="[01:04:52]">&lt;ekaitz&gt;</a></span><span class="message">oriansj: that sounds a little bit better to me :)</span></div><div class="line" id="010532"><span class="nick" style="color:#8dd3c7"><a href="#010532" label="[01:05:32]">&lt;aggi&gt;</a></span><span class="message">ekaitz: i did something different; fully removed gcc/binutils and used tcc-toolchain components _only_ for the entire userspace (~600 builds), until i hit aarch32 asm in musl-libc (and C99 _Complex, less problematic than ASM)</span></div><div class="line" id="010622"><span class="nick" style="color:#2e2a4a"><a href="#010622" label="[01:06:22]">&lt;oriansj&gt;</a></span><span class="message">ekaitz: well you have seen my code style before right?</span></div><div class="line" id="010653"><span class="nick" style="color:#8dd3c7"><a href="#010653" label="[01:06:53]">&lt;aggi&gt;</a></span><span class="message">meaning, if any libc can be repaired, gcc/binutils are not necessary anymore at all (for userspace, kernel is a separate todo still)</span></div><div class="line" id="010656"><span class="nick" style="color:#6b8072"><a href="#010656" label="[01:06:56]">&lt;ekaitz&gt;</a></span><span class="message">oriansj: probably, but I don't remember... I spent too much time digging in GCC and TCC and i'm brainwashed lol</span></div><div class="line" id="010715"><span class="nick" style="color:#6b8072"><a href="#010715" label="[01:07:15]">&lt;ekaitz&gt;</a></span><span class="message">aggi:  that's great news, gcc is a very complex beast</span></div><div class="line" id="010800"><span class="nick" style="color:#8dd3c7"><a href="#010800" label="[01:08:00]">&lt;aggi&gt;</a></span><span class="message">of cause, it's still possible to bootstrap/compile gcc/binutils with arm-tcc, except libc, which is the very bad news currently</span></div><div class="line" id="010842"><span class="nick" style="color:#6d2462"><a href="#010842" label="[01:08:42]">&lt;stikonas[m]&gt;</a></span><span class="message">BTW, meslibc is designed to build more than tcc</span></div><div class="line" id="010854"><span class="nick" style="color:#6d2462"><a href="#010854" label="[01:08:54]">&lt;stikonas[m]&gt;</a></span><span class="message">Also stuff like make, bash</span></div><div class="line" id="010858"><span class="nick" style="color:#6d2462"><a href="#010858" label="[01:08:58]">&lt;stikonas[m]&gt;</a></span><span class="message">Even GCC 2.95</span></div><div class="line" id="010901"><span class="nick" style="color:#2e2a4a"><a href="#010901" label="[01:09:01]">&lt;oriansj&gt;</a></span><span class="message">ekaitz: well look at this: <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/blob/master/cc_reader.c">https://github.com/oriansj/M2-Planet/blob/master/cc_reader.c</a>  and tell me if that style of code is something you are willing to look at</span></div><div class="line" id="010928"><span class="nick" style="color:#2e2a4a"><a href="#010928" label="[01:09:28]">&lt;oriansj&gt;</a></span><span class="message">as that is about as ugly as code gets with me</span></div><div class="line" id="010957"><span class="nick" style="color:#6b8072"><a href="#010957" label="[01:09:57]">&lt;ekaitz&gt;</a></span><span class="message">oriansj: looks acceptable: variable names have more than one character</span></div><div class="line" id="011030"><span class="nick" style="color:#2e2a4a"><a href="#011030" label="[01:10:30]">&lt;oriansj&gt;</a></span><span class="message">as most of the early work will me just adding comments and understanding to the code</span></div><div class="line" id="011043"><span class="nick" style="color:#2e2a4a"><a href="#011043" label="[01:10:43]">&lt;oriansj&gt;</a></span><span class="message">and figuring out what needs tests</span></div><div class="line" id="011113"><span class="nick" style="color:#2e2a4a"><a href="#011113" label="[01:11:13]">&lt;oriansj&gt;</a></span><span class="message">(and if I could get your help writing those tests, it'll really speed me up for the second part)</span></div><div class="line" id="011120"><span class="nick" style="color:#389600"><a href="#011120" label="[01:11:20]">&lt;theruran&gt;</a></span><span class="message">aggi: I dunno if I said it, but I appreciate the work you did and your vision without GNU/LLVM tools. I hope you can stick around here at least and share some of your wisdom</span></div><div class="line" id="011207"><span class="nick" style="color:#6b8072"><a href="#011207" label="[01:12:07]">&lt;ekaitz&gt;</a></span><span class="message">oriansj: it looks good to me, keep me posted with that and I'll help if my life permits</span></div><div class="line" id="011227"><span class="nick" style="color:#2e2a4a"><a href="#011227" label="[01:12:27]">&lt;oriansj&gt;</a></span><span class="message">the second part of course being rewritting it into something M2-Planet can build</span></div><div class="line" id="011320"><span class="nick" style="color:#389600"><a href="#011320" label="[01:13:20]">&lt;theruran&gt;</a></span><span class="message">oriansj: your C code looks straightforward to me. I've seen worse</span></div><div class="line" id="011451"><span class="nick" style="color:#6b8072"><a href="#011451" label="[01:14:51]">&lt;ekaitz&gt;</a></span><span class="message">theruran: it's pretty good actually</span></div><div class="line" id="011532"><span class="nick" style="color:#6b8072"><a href="#011532" label="[01:15:32]">&lt;ekaitz&gt;</a></span><span class="message">I have to leave you folks, keep me posted oriansj please</span></div><div class="line" id="011608"><span class="nick" style="color:#2e2a4a"><a href="#011608" label="[01:16:08]">&lt;oriansj&gt;</a></span><span class="message">ekaitz: I'll see what I can do</span></div><div class="line" id="011623"><span class="nick" style="color:#6b8072"><a href="#011623" label="[01:16:23]">&lt;ekaitz&gt;</a></span><span class="message">no pressure</span></div><div class="line" id="011634"><span class="nick" style="color:#8dd3c7"><a href="#011634" label="[01:16:34]">&lt;aggi&gt;</a></span><span class="message">btw. with the last test-run of arm-tcc toolchain i forgot to set CPP=&quot;arm-tcc -E&quot;, not sure if gcc preprocessor was picked up occasionally</span></div><div class="line" id="011706"><span class="nick" style="color:#8dd3c7"><a href="#011706" label="[01:17:06]">&lt;aggi&gt;</a></span><span class="message">still occupied with cleanup-tasks to _freeze_ the gcc47 c-only toolchain system profile</span></div><div class="line" id="011717"><span class="nick" style="color:#2e2a4a"><a href="#011717" label="[01:17:17]">&lt;oriansj&gt;</a></span><span class="message">ekaitz: it is more I don't find some tasks fun and if I see too many, it reduces my motivation to work on something.</span></div><div class="line" id="011737"><span class="nick" style="color:#6b8072"><a href="#011737" label="[01:17:37]">&lt;ekaitz&gt;</a></span><span class="message">oriansj: I feel you 100%</span></div><div class="line" id="011858"><span class="nick" style="color:#8dd3c7"><a href="#011858" label="[01:18:58]">&lt;aggi&gt;</a></span><span class="message">i'll re-run the tcc-toolchain, and then test a minimal mes-libc/toybox/tcc setup for aarch32</span></div><div class="line" id="011934"><span class="nick" style="color:#8dd3c7"><a href="#011934" label="[01:19:34]">&lt;aggi&gt;</a></span><span class="message">however, this approach is different to the bootstrappable one, since i intend to skip the gcc/binutils stage entirely for the entire system (including libc,kernel etc)</span></div><div class="line" id="013649"><span class="nick" style="color:#2e2a4a"><a href="#013649" label="[01:36:49]">&lt;oriansj&gt;</a></span><span class="message">aggi: good, it means more potential paths forward</span></div><div class="line" id="013746"><span class="nick" style="color:#2e2a4a"><a href="#013746" label="[01:37:46]">&lt;oriansj&gt;</a></span><span class="message">(and there is no one true bootstrappable path, just those currently being worked on and those worked on in the past)</span></div><div class="line" id="013801"><span class="nick" style="color:#6d2462"><a href="#013801" label="[01:38:01]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, some task are not really fun but need doing, hex0 jump calculations are not really fun...</span></div><div class="line" id="013819"><span class="nick" style="color:#2e2a4a"><a href="#013819" label="[01:38:19]">&lt;oriansj&gt;</a></span><span class="message">hence why it has no competition yet</span></div><div class="line" id="013912"><span class="nick" style="color:#2e2a4a"><a href="#013912" label="[01:39:12]">&lt;oriansj&gt;</a></span><span class="message">I'd love to see some competitors which bring fresh new ideas and better solutions to the early stages</span></div><div class="line" id="013935"><span class="nick" style="color:#2e2a4a"><a href="#013935" label="[01:39:35]">&lt;oriansj&gt;</a></span><span class="message">but until then, we have something that works and exists on multiple architectures</span></div><div class="line" id="014033"><span class="nick" style="color:#2e2a4a"><a href="#014033" label="[01:40:33]">&lt;oriansj&gt;</a></span><span class="message">which we can always refine and improve with time.</span></div><div class="line" id="014133"><span class="nick" style="color:#6d2462"><a href="#014133" label="[01:41:33]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, different approach would be some small interpreter...</span></div><div class="line" id="014141"><span class="nick" style="color:#2e2a4a"><a href="#014141" label="[01:41:41]">&lt;oriansj&gt;</a></span><span class="message">So there is no way for me to lose. If it is the best possible solution =&gt; We have a working bootstrap :woot: ; if better solutions are found =&gt; we have even more paths to a working bootstrap :woot:</span></div><div class="line" id="014215"><span class="nick" style="color:#6d2462"><a href="#014215" label="[01:42:15]">&lt;stikonas[m]&gt;</a></span><span class="message">But probably hard to write something small</span></div><div class="line" id="014327"><span class="nick" style="color:#2e2a4a"><a href="#014327" label="[01:43:27]">&lt;oriansj&gt;</a></span><span class="message">well we have an example of a tiny FORTH: <a rel="nofollow" href="https://github.com/oriansj/stage0/blob/master/stage2/forth.s">https://github.com/oriansj/stage0/blob/master/stage2/forth.s</a>  which could be self-hosting if someone gave it love</span></div><div class="line" id="014346"><span class="nick" style="color:#6d2462"><a href="#014346" label="[01:43:46]">&lt;stikonas[m]&gt;</a></span><span class="message">Yes, but that's after M0</span></div><div class="line" id="014453"><span class="nick" style="color:#2e2a4a"><a href="#014453" label="[01:44:53]">&lt;oriansj&gt;</a></span><span class="message">well right now it is 4,372bytes but it could with cleverness get down to 900bytes</span></div><div class="line" id="014543"><span class="nick" style="color:#2e2a4a"><a href="#014543" label="[01:45:43]">&lt;oriansj&gt;</a></span><span class="message">after which it would be about as auditable as hex0+kaem</span></div><div class="line" id="014633"><span class="nick" style="color:#389600"><a href="#014633" label="[01:46:33]">&lt;theruran&gt;</a></span><span class="message">oriansj: forth.s can be reduced to 900 bytes? how do you figure?</span></div><div class="line" id="014705"><span class="nick" style="color:#2e2a4a"><a href="#014705" label="[01:47:05]">&lt;oriansj&gt;</a></span><span class="message">theruran: <a rel="nofollow" href="https://github.com/cesarblum/sectorforth.git">https://github.com/cesarblum/sectorforth.git</a> </span></div><div class="line" id="014727"><span class="nick" style="color:#2e2a4a"><a href="#014727" label="[01:47:27]">&lt;oriansj&gt;</a></span><span class="message">because it has been reduced to 510bytes</span></div><div class="line" id="014742"><span class="nick" style="color:#389600"><a href="#014742" label="[01:47:42]">&lt;theruran&gt;</a></span><span class="message">got it! :)</span></div><div class="line" id="014749"><span class="nick" style="color:#2e2a4a"><a href="#014749" label="[01:47:49]">&lt;oriansj&gt;</a></span><span class="message">and with a few additions, it'll be able to read/write files</span></div><div class="line" id="014808"><span class="nick" style="color:#2e2a4a"><a href="#014808" label="[01:48:08]">&lt;oriansj&gt;</a></span><span class="message">without having to do super ugly hacks</span></div><div class="line" id="015125"><span class="nick" style="color:#389600"><a href="#015125" label="[01:51:25]">&lt;theruran&gt;</a></span><span class="message">sectorforth cannot be used because it's licensed MIT?</span></div><div class="line" id="015158"><span class="nick" style="color:#2e2a4a"><a href="#015158" label="[01:51:58]">&lt;oriansj&gt;</a></span><span class="message">theruran: ???</span></div><div class="line" id="015224"><span class="nick" style="color:#389600"><a href="#015224" label="[01:52:24]">&lt;theruran&gt;</a></span><span class="message">oriansj: I mean, why not just port this to M0 on stage0-posix?</span></div><div class="line" id="015224"><span class="nick" style="color:#6d2462"><a href="#015224" label="[01:52:24]">&lt;stikonas[m]&gt;</a></span><span class="message">MIT is fine</span></div><div class="line" id="015307"><span class="nick" style="color:#2e2a4a"><a href="#015307" label="[01:53:07]">&lt;oriansj&gt;</a></span><span class="message">theruran: people no one has opted to do that work yet</span></div><div class="line" id="015317"><span class="nick" style="color:#2e2a4a"><a href="#015317" label="[01:53:17]">&lt;oriansj&gt;</a></span><span class="message">^people^because^</span></div><div class="line" id="015322"><span class="nick" style="color:#389600"><a href="#015322" label="[01:53:22]">&lt;theruran&gt;</a></span><span class="message">OK</span></div><div class="line" id="015352"><span class="nick" style="color:#2e2a4a"><a href="#015352" label="[01:53:52]">&lt;oriansj&gt;</a></span><span class="message">There is nothing stopping anyone, except the fact no one has done the work yet</span></div><div class="line" id="015557"><span class="nick" style="color:#389600"><a href="#015557" label="[01:55:57]">&lt;theruran&gt;</a></span><span class="message">I guess, are there any gotchas for converting NASM code?</span></div><div class="line" id="015649"><span class="nick" style="color:#2e2a4a"><a href="#015649" label="[01:56:49]">&lt;oriansj&gt;</a></span><span class="message">theruran: nope but that is a bootsector application so you'll have to replace the interrupts with syscalls</span></div><div class="line" id="015817"><span class="nick" style="color:#2e2a4a"><a href="#015817" label="[01:58:17]">&lt;oriansj&gt;</a></span><span class="message">and please take a hard look at examples/01-helloworld.f to know what was done to fit in 510bytes</span></div><div class="line" id="020034"><span class="nick" style="color:#6d2462"><a href="#020034" label="[02:00:34]">&lt;stikonas[m]&gt;</a></span><span class="message">theruran: if you use my new M0 defines, then M0 code is fairly similar to normal assembly</span></div><div class="line" id="020051"><span class="nick" style="color:#6d2462"><a href="#020051" label="[02:00:51]">&lt;stikonas[m]&gt;</a></span><span class="message">It's not exactly the same of course but close enough</span></div><div class="line" id="020153"><span class="nick" style="color:#6d2462"><a href="#020153" label="[02:01:53]">&lt;stikonas[m]&gt;</a></span><span class="message">Compare catm.S vs catm.M1 in <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/amd64/Development">https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/amd64/Development</a> </span></div><div class="line" id="020246"><span class="nick" style="color:#6d2462"><a href="#020246" label="[02:02:46]">&lt;stikonas[m]&gt;</a></span><span class="message">I also have hex2 converted locally but still need to finish hex2.hex1 file before I push</span></div><div class="line" id="020316"><span class="nick" style="color:#2e2a4a"><a href="#020316" label="[02:03:16]">&lt;oriansj&gt;</a></span><span class="message">they look very nice stikonas</span></div><div class="line" id="020349"><span class="nick" style="color:#6d2462"><a href="#020349" label="[02:03:49]">&lt;stikonas[m]&gt;</a></span><span class="message">The only thing is that they are sometimes less explicit</span></div><div class="line" id="020425"><span class="nick" style="color:#6d2462"><a href="#020425" label="[02:04:25]">&lt;stikonas[m]&gt;</a></span><span class="message">E.g. mov_rax, does not say whether it is 8 bit or 32 bit immediate</span></div><div class="line" id="020456"><span class="nick" style="color:#6d2462"><a href="#020456" label="[02:04:56]">&lt;stikonas[m]&gt;</a></span><span class="message">But it is clear once you see ! or % after it</span></div><div class="line" id="020503"><span class="nick" style="color:#2e2a4a"><a href="#020503" label="[02:05:03]">&lt;oriansj&gt;</a></span><span class="message">unavoidable if one wishes to have close to nasm syntax</span></div><div class="line" id="020522"><span class="nick" style="color:#2e2a4a"><a href="#020522" label="[02:05:22]">&lt;oriansj&gt;</a></span><span class="message">assuming one is familiar with hex2</span></div><div class="line" id="020528"><span class="nick" style="color:#6d2462"><a href="#020528" label="[02:05:28]">&lt;stikonas[m]&gt;</a></span><span class="message">Though if we want to use both, then we'll have to disambiguate</span></div><div class="line" id="020558"><span class="nick" style="color:#2e2a4a"><a href="#020558" label="[02:05:58]">&lt;oriansj&gt;</a></span><span class="message">indeed</span></div><div class="line" id="020612"><span class="nick" style="color:#6d2462"><a href="#020612" label="[02:06:12]">&lt;stikonas[m]&gt;</a></span><span class="message">I might need to use jmp8 and jmp32 in hex0</span></div><div class="line" id="020658"><span class="nick" style="color:#2e2a4a"><a href="#020658" label="[02:06:58]">&lt;oriansj&gt;</a></span><span class="message">well assuming you want to keep the size down, yes</span></div><div class="line" id="020721"><span class="nick" style="color:#6d2462"><a href="#020721" label="[02:07:21]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, that's mostly a concern for bootstrap seeds</span></div><div class="line" id="020755"><span class="nick" style="color:#6d2462"><a href="#020755" label="[02:07:55]">&lt;stikonas[m]&gt;</a></span><span class="message">Or at most for .hex0 programs</span></div><div class="line" id="020810"><span class="nick" style="color:#2e2a4a"><a href="#020810" label="[02:08:10]">&lt;oriansj&gt;</a></span><span class="message">theruran: if you do a FORTH.M1 for stage0-posix, I will of course merge it for anyone who really wants a FORTH</span></div><div class="line" id="020838"><span class="nick" style="color:#6d2462"><a href="#020838" label="[02:08:38]">&lt;stikonas[m]&gt;</a></span><span class="message">hex2.hex1 is deliberately using 32 bit stuff since that's what hex1 supports</span></div><div class="line" id="020914"><span class="nick" style="color:#2e2a4a"><a href="#020914" label="[02:09:14]">&lt;oriansj&gt;</a></span><span class="message">and it probably allows some simplifications of hex1 as well</span></div><div class="line" id="021036"><span class="nick" style="color:#2e2a4a"><a href="#021036" label="[02:10:36]">&lt;oriansj&gt;</a></span><span class="message">sorry my brain was thinking about RISC-V hex1 which was much more complicated than most hex1s</span></div><div class="line" id="021100"><span class="nick" style="color:#6d2462"><a href="#021100" label="[02:11:00]">&lt;stikonas[m]&gt;</a></span><span class="message">Yes, risc-v hex code is annoying</span></div><div class="line" id="021118"><span class="nick" style="color:#6d2462"><a href="#021118" label="[02:11:18]">&lt;stikonas[m]&gt;</a></span><span class="message">All the immediates are so painful to calculate...</span></div><div class="line" id="021124"><span class="nick" style="color:#2e2a4a"><a href="#021124" label="[02:11:24]">&lt;oriansj&gt;</a></span><span class="message">which reminds me, I don't thank you enough for saving me from that</span></div><div class="line" id="021153"><span class="nick" style="color:#6d2462"><a href="#021153" label="[02:11:53]">&lt;stikonas[m]&gt;</a></span><span class="message">x86 immediates are just hex numbers</span></div><div class="line" id="021209"><span class="nick" style="color:#2e2a4a"><a href="#021209" label="[02:12:09]">&lt;oriansj&gt;</a></span><span class="message">just have to remember little endian byte order</span></div><div class="line" id="021215"><span class="nick" style="color:#6d2462"><a href="#021215" label="[02:12:15]">&lt;stikonas[m]&gt;</a></span><span class="message">But risc-v has a nice fixes list of defines</span></div><div class="line" id="021248"><span class="nick" style="color:#6d2462"><a href="#021248" label="[02:12:48]">&lt;stikonas[m]&gt;</a></span><span class="message">Since we can construct anything using . ooerator</span></div><div class="line" id="021313"><span class="nick" style="color:#2e2a4a"><a href="#021313" label="[02:13:13]">&lt;oriansj&gt;</a></span><span class="message">and do %0x3b7269c9 instead of %0xc969723b</span></div><div class="line" id="021330"><span class="nick" style="color:#6d2462"><a href="#021330" label="[02:13:30]">&lt;stikonas[m]&gt;</a></span><span class="message">E.g. mv and r11 are separate defines there</span></div><div class="line" id="021409"><span class="nick" style="color:#2e2a4a"><a href="#021409" label="[02:14:09]">&lt;oriansj&gt;</a></span><span class="message">yeah RISC-V M1 defines are surprising close to the original RISC-V instructions</span></div><div class="line" id="021410"><span class="nick" style="color:#6d2462"><a href="#021410" label="[02:14:10]">&lt;stikonas[m]&gt;</a></span><span class="message">Maybe x86 can be done separately in octal...</span></div><div class="line" id="021427"><span class="nick" style="color:#2e2a4a"><a href="#021427" label="[02:14:27]">&lt;oriansj&gt;</a></span><span class="message">stikonas[m]: absolutely by anyone willing to do that work</span></div><div class="line" id="021438"><span class="nick" style="color:#6d2462"><a href="#021438" label="[02:14:38]">&lt;stikonas[m]&gt;</a></span><span class="message">But in hex we have to use big defines like mov_r11,r12</span></div><div class="line" id="021506"><span class="nick" style="color:#6d2462"><a href="#021506" label="[02:15:06]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, probably not me</span></div><div class="line" id="021508"><span class="nick" style="color:#2e2a4a"><a href="#021508" label="[02:15:08]">&lt;oriansj&gt;</a></span><span class="message">kinda have to as x86 is an octal aligned instruction set</span></div><div class="line" id="021520"><span class="nick" style="color:#6d2462"><a href="#021520" label="[02:15:20]">&lt;stikonas[m]&gt;</a></span><span class="message">Busy with other stuff</span></div><div class="line" id="021543"><span class="nick" style="color:#2e2a4a"><a href="#021543" label="[02:15:43]">&lt;oriansj&gt;</a></span><span class="message">and there are some details about x86 encoding which made me nervous enough to just skip that work</span></div><div class="line" id="021619"><span class="nick" style="color:#6d2462"><a href="#021619" label="[02:16:19]">&lt;stikonas[m]&gt;</a></span><span class="message">And holidays too, so nothing at all from me for 2 weeks</span></div><div class="line" id="021645"><span class="nick" style="color:#2e2a4a"><a href="#021645" label="[02:16:45]">&lt;oriansj&gt;</a></span><span class="message">stikonas[m]: well you clearly deserve a beautiful vacation</span></div><div class="line" id="021845"><span class="nick" style="color:#2e2a4a"><a href="#021845" label="[02:18:45]">&lt;oriansj&gt;</a></span><span class="message">and should have great fun ^_^</span></div><div class="line" id="125607"><span class="nick" style="color:#2e2a4a"><a href="#125607" label="[12:56:07]">&lt;oriansj&gt;</a></span><span class="message">I don't think the entire Illumos community actually validate commits</span></div><div class="line" id="125651"><span class="nick" style="color:#2e2a4a"><a href="#125651" label="[12:56:51]">&lt;oriansj&gt;</a></span><span class="message">because if they did, git clone would instantly return: error: object 447603b54aaea470ed1dcdb5c52d0be1d7801f84: badEmail: invalid author/committer line - bad email</span></div><div class="line" id="130032"><span class="nick" style="color:#234e69"><a href="#130032" label="[13:00:32]">&lt;qyliss&gt;</a></span><span class="message">Lots of old repositories are like that</span></div><div class="line" id="130034"><span class="nick" style="color:#234e69"><a href="#130034" label="[13:00:34]">&lt;qyliss&gt;</a></span><span class="message">rails is another</span></div><div class="line" id="130047"><span class="nick" style="color:#234e69"><a href="#130047" label="[13:00:47]">&lt;qyliss&gt;</a></span><span class="message">I've had to turn off validation for certain repositories</span></div><div class="line" id="130617"><span class="nick" style="color:#2e2a4a"><a href="#130617" label="[13:06:17]">&lt;oriansj&gt;</a></span><span class="message">qyliss: just seems like a bad idea long term</span></div><div class="line" id="130725"><span class="nick" style="color:#234e69"><a href="#130725" label="[13:07:25]">&lt;qyliss&gt;</a></span><span class="message">yeah, but the only way to fix it is to rewrite history</span></div><div class="line" id="130747"><span class="nick" style="color:#234e69"><a href="#130747" label="[13:07:47]">&lt;qyliss&gt;</a></span><span class="message">so it's not exactly an easy fix</span></div><div class="line" id="130815"><span class="nick" style="color:#2e2a4a"><a href="#130815" label="[13:08:15]">&lt;oriansj&gt;</a></span><span class="message">git replace --edit followed by git filter-repo</span></div><div class="line" id="130950"><span class="nick" style="color:#234e69"><a href="#130950" label="[13:09:50]">&lt;qyliss&gt;</a></span><span class="message">you still break the hash for every subsequent commit, right?</span></div><div class="line" id="131116"><span class="nick" style="color:#2e2a4a"><a href="#131116" label="[13:11:16]">&lt;oriansj&gt;</a></span><span class="message">qyliss: unfortunately yes</span></div><div class="line" id="131139"><span class="nick" style="color:#234e69"><a href="#131139" label="[13:11:39]">&lt;qyliss&gt;</a></span><span class="message">so that's a very disruptive fix</span></div><div class="line" id="131153"><span class="nick" style="color:#234e69"><a href="#131153" label="[13:11:53]">&lt;qyliss&gt;</a></span><span class="message">it would be better if git allowed you to allowlist known-problematic historical revs</span></div><div class="line" id="131227"><span class="nick" style="color:#234e69"><a href="#131227" label="[13:12:27]">&lt;qyliss&gt;</a></span><span class="message">and then gerrit (in illumos's case) or whatever else could check all new objects going forward</span></div><div class="line" id="131235"><span class="nick" style="color:#234e69"><a href="#131235" label="[13:12:35]">&lt;qyliss&gt;</a></span><span class="message">(maybe git even has such functionality already)</span></div><div class="line" id="131333"><span class="nick" style="color:#2e2a4a"><a href="#131333" label="[13:13:33]">&lt;oriansj&gt;</a></span><span class="message">qyliss: potentially but I am not familar with anything that would do that</span></div><div class="line" id="131543"><span class="nick" style="color:#2e2a4a"><a href="#131543" label="[13:15:43]">&lt;oriansj&gt;</a></span><span class="message">and yeah if you have a bunch of forks, it'll potentially be a short term pain to clear out the issue but it'll solve it so it doesn't keep showing up forever</span></div><div class="line" id="131616"><span class="nick" style="color:#2e2a4a"><a href="#131616" label="[13:16:16]">&lt;oriansj&gt;</a></span><span class="message">as who wants to keep a bug around forever?</span></div><div class="line" id="132111"><span class="nick" style="color:#2e2a4a"><a href="#132111" label="[13:21:11]">&lt;oriansj&gt;</a></span><span class="message">especially if you know about and know how to fix it?</span></div><div class="line" id="132203"><span class="nick" style="color:#2e2a4a"><a href="#132203" label="[13:22:03]">&lt;oriansj&gt;</a></span><span class="message">also wouldn't git these days make it impossible to make such commits these days?</span></div><div class="line" id="132422"><span class="nick" style="color:#2e2a4a"><a href="#132422" label="[13:24:22]">&lt;oriansj&gt;</a></span><span class="message">yeah it appears to silently just delete the extra &lt;</span></div><div class="line" id="133822"><span class="nick" style="color:#2e2a4a"><a href="#133822" label="[13:38:22]">&lt;oriansj&gt;</a></span><span class="message">git fsck.skiplist also seems like an option</span></div><div class="line" id="134420"><span class="nick" style="color:#2e2a4a"><a href="#134420" label="[13:44:20]">&lt;oriansj&gt;</a></span><span class="message">although I don't know if that would be something that would survive a git clone or if something would need to be done to enable that</span></div><div class="line" id="134604"><span class="nick" style="color:#2e2a4a"><a href="#134604" label="[13:46:04]">&lt;oriansj&gt;</a></span><span class="message">mind you this has been known and the default since 2015-Sep-29</span></div><div class="line" id="135037"><span class="nick" style="color:#2e2a4a"><a href="#135037" label="[13:50:37]">&lt;oriansj&gt;</a></span><span class="message">possibly: remote.fsck.skiplist</span></div><div class="line" id="232157"><span class="nick">***</span><span class="message notice">bauen1_ is now known as bauen1</span></div><div class="line" id="234158"><span class="nick" style="color:#2e2a4a"><a href="#234158" label="[23:41:58]">&lt;oriansj&gt;</a></span><span class="message">The downside of patching the tools to prevent the creation of problems is one can't replicate the problem in a manner which they can test solutions</span></div><div class="line" id="235609"><span class="nick" style="color:#2e2a4a"><a href="#235609" label="[23:56:09]">&lt;oriansj&gt;</a></span><span class="message">atleast not in an easy manner</span></div><br /></div></body></html>