<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-05-27.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="010227"><span class="nick" style="color:#8dd3c7"><a href="#010227" label="[01:02:27]">&lt;doras&gt;</a></span><span class="message">stikonas: it wasn't a return code issue after all. A simple equivalent of &quot;rm -rf&quot; in Python was required to get the `tmp` directories removed.</span></div><div class="line" id="010358"><span class="nick" style="color:#2e2a4a"><a href="#010358" label="[01:03:58]">&lt;stikonas&gt;</a></span><span class="message">ok, I see</span></div><div class="line" id="010414"><span class="nick" style="color:#2e2a4a"><a href="#010414" label="[01:04:14]">&lt;stikonas&gt;</a></span><span class="message">my PR is also almost ready, just need to sort out one shellcheck issue</span></div><div class="line" id="010536"><span class="nick" style="color:#8dd3c7"><a href="#010536" label="[01:05:36]">&lt;doras&gt;</a></span><span class="message">Interesting find about &quot;$?&quot;. I wasn't aware of it.</span></div><div class="line" id="010635"><span class="nick" style="color:#8dd3c7"><a href="#010635" label="[01:06:35]">&lt;doras&gt;</a></span><span class="message">But I guess it makes sense.</span></div><div class="line" id="011132"><span class="nick" style="color:#2e2a4a"><a href="#011132" label="[01:11:32]">&lt;stikonas&gt;</a></span><span class="message">well, there were more stupid issues...</span></div><div class="line" id="011135"><span class="nick" style="color:#2e2a4a"><a href="#011135" label="[01:11:35]">&lt;stikonas&gt;</a></span><span class="message">but all sorted out now</span></div><div class="line" id="012213"><span class="nick" style="color:#2e2a4a"><a href="#012213" label="[01:22:13]">&lt;stikonas&gt;</a></span><span class="message">fossy: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/174">https://github.com/fosslinux/live-bootstrap/pull/174</a> </span></div><div class="line" id="025456"><span class="nick" style="color:#2e2a4a"><a href="#025456" label="[02:54:56]">&lt;stikonas&gt;</a></span><span class="message">actually shellcheck fix messed somethign up...</span></div><div class="line" id="025502"><span class="nick" style="color:#2e2a4a"><a href="#025502" label="[02:55:02]">&lt;stikonas&gt;</a></span><span class="message">I'lll finish 174 tomorrow</span></div><div class="line" id="025625"><span class="nick" style="color:#2e2a4a"><a href="#025625" label="[02:56:25]">&lt;stikonas&gt;</a></span><span class="message">oh, shellchecks suggestion does not work in old bash...</span></div><div class="line" id="043515"><span class="nick" style="color:#6b8072"><a href="#043515" label="[04:35:15]">&lt;oriansj&gt;</a></span><span class="message">today I have learned, try as hard as you like. if you have ~/.emacs; emacs will not let you *not* have .emacs.d</span></div><div class="line" id="103719"><span class="nick" style="color:#80b1d3"><a href="#103719" label="[10:37:19]">&lt;tinybronca[m]&gt;</a></span><span class="message">!!!</span></div><div class="line" id="103720"><span class="nick" style="color:#80b1d3"><a href="#103720" label="[10:37:20]">&lt;tinybronca[m]&gt;</a></span><span class="message">.</span></div><div class="line" id="104551"><span class="nick">***</span><span class="message notice">genr8eofl_ is now known as genr8eofl</span></div><div class="line" id="185055"><span class="nick" style="color:#6d2462"><a href="#185055" label="[18:50:55]">&lt;vagrantc&gt;</a></span><span class="message">so, it seems implausible for debian to ever realistically officially bootstrap from a full-source bootstrap for established architectures ... but i just realized that new architectures essentially *do* go through a bootstrap cycle and ... it might be plausible to actually attempt a full-source bootstrap for new architectures</span></div><div class="line" id="185119"><span class="nick" style="color:#6d2462"><a href="#185119" label="[18:51:19]">&lt;vagrantc&gt;</a></span><span class="message">riscv64 is not yet an &quot;official&quot; architecture, and would be amazing to pull this off with</span></div><div class="line" id="185131"><span class="nick" style="color:#234e69"><a href="#185131" label="[18:51:31]">&lt;muurkha&gt;</a></span><span class="message">why does it seem implausible?</span></div><div class="line" id="185154"><span class="nick" style="color:#6d2462"><a href="#185154" label="[18:51:54]">&lt;vagrantc&gt;</a></span><span class="message">muurkha: technically doable, but getting debian to rebuild all the packages of an architecture ... just not going to happen</span></div><div class="line" id="185209"><span class="nick" style="color:#6d2462"><a href="#185209" label="[18:52:09]">&lt;vagrantc&gt;</a></span><span class="message">you could proof-of-concept it, probably</span></div><div class="line" id="185235"><span class="nick" style="color:#6d2462"><a href="#185235" label="[18:52:35]">&lt;vagrantc&gt;</a></span><span class="message">i mean, would *love* to be proven wrong, but debian tends to move at a glacial pace ...</span></div><div class="line" id="185324"><span class="nick" style="color:#6d2462"><a href="#185324" label="[18:53:24]">&lt;vagrantc&gt;</a></span><span class="message">but ... when a new architecture enters the archive, even when there's a ~90%+ package set already built, it basically gets thrown away and bootstrapped again</span></div><div class="line" id="185348"><span class="nick" style="color:#234e69"><a href="#185348" label="[18:53:48]">&lt;muurkha&gt;</a></span><span class="message">oh, I would agree with &quot;for debian to officially bootstrap from a tiny binary seed for established architecture this year&quot;, but &quot;ever&quot; means not now, not in 02032, not in 02052, not in 02092</span></div><div class="line" id="185359"><span class="nick" style="color:#234e69"><a href="#185359" label="[18:53:59]">&lt;muurkha&gt;</a></span><span class="message">I think it's totally realistic to expect it could happen by 02032</span></div><div class="line" id="185435"><span class="nick" style="color:#6d2462"><a href="#185435" label="[18:54:35]">&lt;vagrantc&gt;</a></span><span class="message">sure, maybe a bit exadgerated :)</span></div><div class="line" id="185514"><span class="nick" style="color:#6d2462"><a href="#185514" label="[18:55:14]">&lt;vagrantc&gt;</a></span><span class="message">i maybe exadgerated</span></div><div class="line" id="185514"><span class="nick" style="color:#234e69"><a href="#185514" label="[18:55:14]">&lt;muurkha&gt;</a></span><span class="message">if the unbootstrapped packages (those built from a hand-audited binary seed) are binary-identical to the ones they've built now, then there's very little risk to Debian building them that way</span></div><div class="line" id="185536"><span class="nick" style="color:#234e69"><a href="#185536" label="[18:55:36]">&lt;muurkha&gt;</a></span><span class="message">and if there *is* a binary difference in those whose build is supposedly &quot;reproducible&quot;, that's a strong argument that there's a *large benefit* to unbootstrapping</span></div><div class="line" id="185620"><span class="nick" style="color:#234e69"><a href="#185620" label="[18:56:20]">&lt;muurkha&gt;</a></span><span class="message">Debian rebuilds all the packages of every architecture pretty frequently, and they're working to do it more frequently</span></div><div class="line" id="185719"><span class="nick" style="color:#6d2462"><a href="#185719" label="[18:57:19]">&lt;vagrantc&gt;</a></span><span class="message">unfortunately, some of the key packages such as gcc and binutils aren't reproducible</span></div><div class="line" id="185831"><span class="nick" style="color:#234e69"><a href="#185831" label="[18:58:31]">&lt;muurkha&gt;</a></span><span class="message">yes, but there's already strong buy-in within Debian for making them reproducible</span></div><div class="line" id="185837"><span class="nick" style="color:#234e69"><a href="#185837" label="[18:58:37]">&lt;muurkha&gt;</a></span><span class="message">as I understand it</span></div><div class="line" id="185842"><span class="nick" style="color:#6d2462"><a href="#185842" label="[18:58:42]">&lt;vagrantc&gt;</a></span><span class="message">ish</span></div><div class="line" id="190608"><span class="nick" style="color:#6c3d55"><a href="#190608" label="[19:06:08]">&lt;Hagfish&gt;</a></span><span class="message">not enough buy-in to make it a release requirement and delay the next release until all the reproducibility issues are solved, right?</span></div><div class="line" id="190754"><span class="nick" style="color:#234e69"><a href="#190754" label="[19:07:54]">&lt;muurkha&gt;</a></span><span class="message">right</span></div><div class="line" id="191005"><span class="nick" style="color:#234e69"><a href="#191005" label="[19:10:05]">&lt;muurkha&gt;</a></span><span class="message">similarly if there weren't lots of packagers solving FTBFS bugs to ensure that they could build Firefox or Chromium, building from source wouldn't be a release requirement; the DDs would throw up their hands and stop considering FTBFS a release blocker</span></div><div class="line" id="191051"><span class="nick" style="color:#234e69"><a href="#191051" label="[19:10:51]">&lt;muurkha&gt;</a></span><span class="message">Debian would fork into a variant that *did* consider FTBFS to be a release requirement, but shipped Palemoon or something as the browser, and a variant that didn't</span></div><div class="line" id="191100"><span class="nick" style="color:#234e69"><a href="#191100" label="[19:11:00]">&lt;muurkha&gt;</a></span><span class="message">and everyone would use the second one</span></div><div class="line" id="191342"><span class="nick" style="color:#6c3d55"><a href="#191342" label="[19:13:42]">&lt;Hagfish&gt;</a></span><span class="message">debian already had to bend the rules for browsers because of their incompatible release/support cycles, right?</span></div><div class="line" id="191358"><span class="nick" style="color:#6c3d55"><a href="#191358" label="[19:13:58]">&lt;Hagfish&gt;</a></span><span class="message">that might be another decision that go revisited by such a fork</span></div><div class="line" id="191403"><span class="nick" style="color:#6c3d55"><a href="#191403" label="[19:14:03]">&lt;Hagfish&gt;</a></span><span class="message">*got</span></div><div class="line" id="191412"><span class="nick" style="color:#234e69"><a href="#191412" label="[19:14:12]">&lt;muurkha&gt;</a></span><span class="message">I haven't kept up, but browsers are a major pain point</span></div><div class="line" id="191436"><span class="nick" style="color:#6c3d55"><a href="#191436" label="[19:14:36]">&lt;Hagfish&gt;</a></span><span class="message">they are operating systems within themselves (and not well behaved ones like Emacs is)</span></div><div class="line" id="191532"><span class="nick" style="color:#6c3d55"><a href="#191532" label="[19:15:32]">&lt;Hagfish&gt;</a></span><span class="message">i really think some benefactor should pay for Electron to be officially packaged by Debian, though</span></div><div class="line" id="191609"><span class="nick" style="color:#234e69"><a href="#191609" label="[19:16:09]">&lt;muurkha&gt;</a></span><span class="message">Emacs has grown its own package system, and there's always some impedance mismatch where package systems rub together</span></div><div class="line" id="191627"><span class="nick" style="color:#234e69"><a href="#191627" label="[19:16:27]">&lt;muurkha&gt;</a></span><span class="message">but Debian is doing pretty well at mapping elpa and npm packages into Debian packages these days</span></div><div class="line" id="191657"><span class="nick" style="color:#6c3d55"><a href="#191657" label="[19:16:57]">&lt;Hagfish&gt;</a></span><span class="message">i saw someone complaining that the debian version of React was unusably out of date</span></div><div class="line" id="191724"><span class="nick" style="color:#6c3d55"><a href="#191724" label="[19:17:24]">&lt;Hagfish&gt;</a></span><span class="message">but the last time i checked, debian barely had any npm packages, so i guess that's progress</span></div><div class="line" id="191749"><span class="nick" style="color:#234e69"><a href="#191749" label="[19:17:49]">&lt;muurkha&gt;</a></span><span class="message">wouldn't be surprising if the Debian version of React were in fact unusably out of date</span></div><div class="line" id="191847"><span class="nick" style="color:#6c3d55"><a href="#191847" label="[19:18:47]">&lt;Hagfish&gt;</a></span><span class="message">i can't remember the statistic about how many packages are needed to create a hello world react app, but if that's possible at all in debian, it's quite the achievement</span></div><div class="line" id="191924"><span class="nick" style="color:#234e69"><a href="#191924" label="[19:19:24]">&lt;muurkha&gt;</a></span><span class="message">IIRC it was about 900 last I checked</span></div><div class="line" id="191943"><span class="nick" style="color:#6c3d55"><a href="#191943" label="[19:19:43]">&lt;Hagfish&gt;</a></span><span class="message">wow</span></div><div class="line" id="191956"><span class="nick" style="color:#6c3d55"><a href="#191956" label="[19:19:56]">&lt;Hagfish&gt;</a></span><span class="message">yeah, a quick search suggested 150 MB of node_modules</span></div><div class="line" id="192007"><span class="nick" style="color:#234e69"><a href="#192007" label="[19:20:07]">&lt;muurkha&gt;</a></span><span class="message">the npm experiment is super interesting</span></div><div class="line" id="192027"><span class="nick" style="color:#6c3d55"><a href="#192027" label="[19:20:27]">&lt;Hagfish&gt;</a></span><span class="message">i hope it represents an extreme, and not a target for other ecosystems to try to surpass :)</span></div><div class="line" id="192036"><span class="nick" style="color:#234e69"><a href="#192036" label="[19:20:36]">&lt;muurkha&gt;</a></span><span class="message">the latter I think</span></div><div class="line" id="192039"><span class="nick" style="color:#d9d9d9"><a href="#192039" label="[19:20:39]">&lt;unmatched-paren&gt;</a></span><span class="message">Cargo can only dream...</span></div><div class="line" id="192050"><span class="nick" style="color:#d9d9d9"><a href="#192050" label="[19:20:50]">&lt;unmatched-paren&gt;</a></span><span class="message">(I hope.)</span></div><div class="line" id="192053"><span class="nick" style="color:#234e69"><a href="#192053" label="[19:20:53]">&lt;muurkha&gt;</a></span><span class="message">evidently all the research on &quot;software reuse&quot; in the 01980s and 01990s was kind of barking up the wrong tree</span></div><div class="line" id="192119"><span class="nick" style="color:#6c3d55"><a href="#192119" label="[19:21:19]">&lt;Hagfish&gt;</a></span><span class="message">cargo at least has people trying to implement Crev (a distributed source review / vouching system)</span></div><div class="line" id="192132"><span class="nick" style="color:#234e69"><a href="#192132" label="[19:21:32]">&lt;muurkha&gt;</a></span><span class="message">because npm has evidently reduced the granularity of cost-effective software reuse for many projects down to the level of left-pad</span></div><div class="line" id="192139"><span class="nick" style="color:#d9d9d9"><a href="#192139" label="[19:21:39]">&lt;unmatched-paren&gt;</a></span><span class="message">Hagfish: i doubt many people will actually use it tho</span></div><div class="line" id="192156"><span class="nick" style="color:#d9d9d9"><a href="#192156" label="[19:21:56]">&lt;unmatched-paren&gt;</a></span><span class="message">and anyway, imo that's the wrong way to go about it</span></div><div class="line" id="192210"><span class="nick" style="color:#d9d9d9"><a href="#192210" label="[19:22:10]">&lt;unmatched-paren&gt;</a></span><span class="message">it's trying to fix a problem that shouldn't exist in the first place</span></div><div class="line" id="192245"><span class="nick" style="color:#6c3d55"><a href="#192245" label="[19:22:45]">&lt;Hagfish&gt;</a></span><span class="message">unmatched-paren: i think companies would pay for someone to pick a trusted set of versions of packages (with maybe something like an insurance payout if the packages do contain malware)</span></div><div class="line" id="192303"><span class="nick" style="color:#6c3d55"><a href="#192303" label="[19:23:03]">&lt;Hagfish&gt;</a></span><span class="message">it's &quot;just&quot; a question of building the structures and aligning the incentives</span></div><div class="line" id="192332"><span class="nick" style="color:#d9d9d9"><a href="#192332" label="[19:23:32]">&lt;unmatched-paren&gt;</a></span><span class="message">Hagfish: if they were willing to do that there'd be &quot;open source dependency review!&quot; companies popping up left, right, and centre</span></div><div class="line" id="192334"><span class="nick" style="color:#6c3d55"><a href="#192334" label="[19:23:34]">&lt;Hagfish&gt;</a></span><span class="message">unmatched-paren: you're right, though, the blast radius needs to be limited by the packaging tools / runtimes etc.</span></div><div class="line" id="192405"><span class="nick" style="color:#d9d9d9"><a href="#192405" label="[19:24:05]">&lt;unmatched-paren&gt;</a></span><span class="message">they wouldn't really need crev</span></div><div class="line" id="192405"><span class="nick" style="color:#d9d9d9"><a href="#192405" label="[19:24:05]">&lt;unmatched-paren&gt;</a></span><span class="message">or anything like it</span></div><div class="line" id="192405"><span class="nick" style="color:#6c3d55"><a href="#192405" label="[19:24:05]">&lt;Hagfish&gt;</a></span><span class="message">crev would become a data format and a market place</span></div><div class="line" id="192405"><span class="nick" style="color:#234e69"><a href="#192405" label="[19:24:05]">&lt;muurkha&gt;</a></span><span class="message">the runtime and language could together limit the blast radius, the packaging tools can't</span></div><div class="line" id="192423"><span class="nick" style="color:#234e69"><a href="#192423" label="[19:24:23]">&lt;muurkha&gt;</a></span><span class="message">and neither can the runtime on its own</span></div><div class="line" id="192432"><span class="nick" style="color:#6c3d55"><a href="#192432" label="[19:24:32]">&lt;Hagfish&gt;</a></span><span class="message">well, the packaging tool should present the package metadata when you try to install it</span></div><div class="line" id="192448"><span class="nick" style="color:#6c3d55"><a href="#192448" label="[19:24:48]">&lt;Hagfish&gt;</a></span><span class="message">like &quot;are you sure you meant to install letf-pad, when left-pad is way more popular?&quot;</span></div><div class="line" id="192456"><span class="nick" style="color:#d9d9d9"><a href="#192456" label="[19:24:56]">&lt;unmatched-paren&gt;</a></span><span class="message">Programming languages should not have package managers in the first place. the way to fix it is to encourage the use of apt, guix, nix, dnf, pacman, ... instead of specialized package managers</span></div><div class="line" id="192507"><span class="nick" style="color:#6c3d55"><a href="#192507" label="[19:25:07]">&lt;Hagfish&gt;</a></span><span class="message">100% agreed</span></div><div class="line" id="192543"><span class="nick" style="color:#234e69"><a href="#192543" label="[19:25:43]">&lt;muurkha&gt;</a></span><span class="message">to some extent when you decide to depend on someone else's advice, you become vulnerable to them, and that's true whether the advice is verbal directions to a bar, a map, or a software library</span></div><div class="line" id="192616"><span class="nick" style="color:#d9d9d9"><a href="#192616" label="[19:26:16]">&lt;unmatched-paren&gt;</a></span><span class="message">I don't know how high the bar is for adding a package to debian tho...?</span></div><div class="line" id="192621"><span class="nick" style="color:#6c3d55"><a href="#192621" label="[19:26:21]">&lt;Hagfish&gt;</a></span><span class="message">sure, but civilisation is based on the fact that not every has to independently check every thing</span></div><div class="line" id="192627"><span class="nick" style="color:#6c3d55"><a href="#192627" label="[19:26:27]">&lt;Hagfish&gt;</a></span><span class="message">*every one</span></div><div class="line" id="192635"><span class="nick" style="color:#234e69"><a href="#192635" label="[19:26:35]">&lt;muurkha&gt;</a></span><span class="message">we can work to increase the legibility and analytical tractability of that advice but we can't entirely eliminate the risk</span></div><div class="line" id="192640"><span class="nick" style="color:#d9d9d9"><a href="#192640" label="[19:26:40]">&lt;unmatched-paren&gt;</a></span><span class="message">Guix and Nix make it quite easy, but traditional distros might be harder</span></div><div class="line" id="192703"><span class="nick" style="color:#234e69"><a href="#192703" label="[19:27:03]">&lt;muurkha&gt;</a></span><span class="message">unmatched-paren: it's not very high</span></div><div class="line" id="192716"><span class="nick" style="color:#d9d9d9"><a href="#192716" label="[19:27:16]">&lt;unmatched-paren&gt;</a></span><span class="message">muurkha: good to hear</span></div><div class="line" id="192727"><span class="nick" style="color:#234e69"><a href="#192727" label="[19:27:27]">&lt;muurkha&gt;</a></span><span class="message">at some point I wrote a PAM module that used HTTP basic auth to check your password</span></div><div class="line" id="192751"><span class="nick" style="color:#6c3d55"><a href="#192751" label="[19:27:51]">&lt;Hagfish&gt;</a></span><span class="message">muurkha: to some extent that's &quot;all&quot; cryptography does, it turns big problems into tractable problems, e.g. turning data transfer problems into key transfer problems</span></div><div class="line" id="192756"><span class="nick" style="color:#234e69"><a href="#192756" label="[19:27:56]">&lt;muurkha&gt;</a></span><span class="message">that is, when you tried to log in to X or whatever, it would send your username and password as basic auth to some HTTP URL configured for PAM</span></div><div class="line" id="192810"><span class="nick" style="color:#234e69"><a href="#192810" label="[19:28:10]">&lt;muurkha&gt;</a></span><span class="message">and depending on whether the response was 401 or 200 it would let you log in</span></div><div class="line" id="192824"><span class="nick" style="color:#234e69"><a href="#192824" label="[19:28:24]">&lt;muurkha&gt;</a></span><span class="message">this is pretty useless and I doubt anyone ever used it, but someone did package it for debian</span></div><div class="line" id="193416"><span class="nick" style="color:#234e69"><a href="#193416" label="[19:34:16]">&lt;muurkha&gt;</a></span><span class="message">Hagfish: true.  or key revocation problems</span></div><div class="line" id="193722"><span class="nick" style="color:#bc80bd"><a href="#193722" label="[19:37:22]">&lt;rkeene&gt;</a></span><span class="message">muurkha, <a rel="nofollow" href="https://rkeene.org/projects/info/wiki/222">https://rkeene.org/projects/info/wiki/222</a> </span></div><div class="line" id="194310"><span class="nick" style="color:#234e69"><a href="#194310" label="[19:43:10]">&lt;muurkha&gt;</a></span><span class="message">.t</span></div><div class="line" id="194316"><span class="nick" style="color:#234e69"><a href="#194316" label="[19:43:16]">&lt;muurkha&gt;</a></span><span class="message">oh, we don't have a titlebot here</span></div><div class="line" id="194332"><span class="nick" style="color:#234e69"><a href="#194332" label="[19:43:32]">&lt;muurkha&gt;</a></span><span class="message">rkeene: what is that?</span></div><div class="line" id="194453"><span class="nick" style="color:#234e69"><a href="#194453" label="[19:44:53]">&lt;muurkha&gt;</a></span><span class="message">this was the PAM module: <a rel="nofollow" href="http://archive.debian.org/debian/pool/main/p/pam-http/">http://archive.debian.org/debian/pool/main/p/pam-http/</a> </span></div><div class="line" id="194507"><span class="nick" style="color:#234e69"><a href="#194507" label="[19:45:07]">&lt;muurkha&gt;</a></span><span class="message">it was in Debian for a few years</span></div><div class="line" id="203926"><span class="nick" style="color:#3c5b35"><a href="#203926" label="[20:39:26]">&lt;mihi&gt;</a></span><span class="message">stikonas[m], fossy: As I see it, those 4 generated files in coreutils-5.0 are not regenerated in live-bootstrap? <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/coreutils.git/tree/src/Makefile.am?h=v5.0#n170">https://git.savannah.gnu.org/cgit/coreutils.git/tree/src/Makefile.am?h=v5.0#n170</a> </span></div><div class="line" id="204019"><span class="nick" style="color:#3c5b35"><a href="#204019" label="[20:40:19]">&lt;mihi&gt;</a></span><span class="message">neither are they patched around. I noticed as those are missing from the git repo :)</span></div><div class="line" id="221923"><span class="nick" style="color:#3c5b35"><a href="#221923" label="[22:19:23]">&lt;mihi&gt;</a></span><span class="message">fossy, stikonas[m]: Would you accept pull requests to live-bootstrap that split kaem files (mes, tcc, make) into two parts? part#1 unpacks, calls part#2 and checksums; part#2 does the actual build.</span></div><div class="line" id="222027"><span class="nick" style="color:#3c5b35"><a href="#222027" label="[22:20:27]">&lt;mihi&gt;</a></span><span class="message">Reason is that I may want to re-use them in <a rel="nofollow" href="https://github.com/schierlm/FullSourceBootstrapFromGit/">https://github.com/schierlm/FullSourceBootstrapFromGit/</a>  - as that project does not start with tarballs, it currently includes modified copies of those kaem files. I may not be able to test the bootstrap completely, just the part until it gets past that point.</span></div><div class="line" id="222739"><span class="nick" style="color:#6b8072"><a href="#222739" label="[22:27:39]">&lt;oriansj&gt;</a></span><span class="message">well crev and the idea of centralized tarball audit and signing, does have some benefits (just wished they had a client that GCC could build)</span></div><div class="line" id="223137"><span class="nick" style="color:#6c3d55"><a href="#223137" label="[22:31:37]">&lt;Hagfish&gt;</a></span><span class="message">oriansj: yeah, it would be nice to have a couple of different implementations, which could maybe experiment a little with the user interface or defaults, while maintaining a compatible data format</span></div><div class="line" id="223640"><span class="nick" style="color:#6b8072"><a href="#223640" label="[22:36:40]">&lt;oriansj&gt;</a></span><span class="message">I'd be happy with a minimal command line client that would download/validate existing signatures and create local signatures</span></div><div class="line" id="223719"><span class="nick" style="color:#6b8072"><a href="#223719" label="[22:37:19]">&lt;oriansj&gt;</a></span><span class="message">the rest of the user interface can be added later</span></div><br /></div></body></html>