<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-10-17.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="071320"><span class="nick">***</span><span class="message notice">Server sets mode: +cnt </span></div><div class="line" id="095954"><span class="nick" style="color:#8dd3c7"><a href="#095954" label="[09:59:54]">&lt;stikonas&gt;</a></span><span class="message">mes 0.24.1 is now pushed into live-bootstrap</span></div><div class="line" id="163015"><span class="nick" style="color:#2e2a4a"><a href="#163015" label="[16:30:15]">&lt;rickmasters&gt;</a></span><span class="message">I've been silent for over a month so I thought I'd provide a status update.</span></div><div class="line" id="163033"><span class="nick" style="color:#2e2a4a"><a href="#163033" label="[16:30:33]">&lt;rickmasters&gt;</a></span><span class="message">I'm not finding a simple path forward to a new kernel that can be built inside live-bootstrap with tcc on the builder-hex0 kernel.</span></div><div class="line" id="163041"><span class="nick" style="color:#2e2a4a"><a href="#163041" label="[16:30:41]">&lt;rickmasters&gt;</a></span><span class="message">As a reminder, live-bootstap with builder-hex0 cannot proceed past tcc-0.9.26 right now because it cannot run make,</span></div><div class="line" id="163050"><span class="nick" style="color:#2e2a4a"><a href="#163050" label="[16:30:50]">&lt;rickmasters&gt;</a></span><span class="message">which reads directories and uses pipes, both of which are not implemented in the builder-hex0 kernel.</span></div><div class="line" id="163100"><span class="nick" style="color:#2e2a4a"><a href="#163100" label="[16:31:00]">&lt;rickmasters&gt;</a></span><span class="message">Also there are bash scripts later that use pipes.</span></div><div class="line" id="163109"><span class="nick" style="color:#2e2a4a"><a href="#163109" label="[16:31:09]">&lt;rickmasters&gt;</a></span><span class="message">Pipes are difficult because it implies multiprocessing but builder-hex0 can only run one process at a time right now.</span></div><div class="line" id="163116"><span class="nick" style="color:#2e2a4a"><a href="#163116" label="[16:31:16]">&lt;rickmasters&gt;</a></span><span class="message">.</span></div><div class="line" id="163123"><span class="nick" style="color:#2e2a4a"><a href="#163123" label="[16:31:23]">&lt;rickmasters&gt;</a></span><span class="message">I think the UEFI path will eventually run into the same challenge.</span></div><div class="line" id="163132"><span class="nick" style="color:#2e2a4a"><a href="#163132" label="[16:31:32]">&lt;rickmasters&gt;</a></span><span class="message">UEFI provides a file system, which is huge, but I don't think UEFI supports multiprocessing with interprocess communication</span></div><div class="line" id="163141"><span class="nick" style="color:#2e2a4a"><a href="#163141" label="[16:31:41]">&lt;rickmasters&gt;</a></span><span class="message">(for pipes) out of the box. I found some slides indicating it has been done in some way (by Intel),</span></div><div class="line" id="163149"><span class="nick" style="color:#2e2a4a"><a href="#163149" label="[16:31:49]">&lt;rickmasters&gt;</a></span><span class="message">but I am not confident that there is a usable open source solution available.</span></div><div class="line" id="163153"><span class="nick" style="color:#2e2a4a"><a href="#163153" label="[16:31:53]">&lt;rickmasters&gt;</a></span><span class="message">.</span></div><div class="line" id="163159"><span class="nick" style="color:#2e2a4a"><a href="#163159" label="[16:31:59]">&lt;rickmasters&gt;</a></span><span class="message">I have spent weeks trying to build a linux kernel using tccboot as a guide but progress has been slow</span></div><div class="line" id="163209"><span class="nick" style="color:#2e2a4a"><a href="#163209" label="[16:32:09]">&lt;rickmasters&gt;</a></span><span class="message">and the results are sketchy. It is difficult because the original project from Bellard is not really open source</span></div><div class="line" id="163217"><span class="nick" style="color:#2e2a4a"><a href="#163217" label="[16:32:17]">&lt;rickmasters&gt;</a></span><span class="message">and the only viable fork, seyko2, (mysteriously) required adding hacks to seyko2's tcc fork in order to build</span></div><div class="line" id="163222"><span class="nick" style="color:#2e2a4a"><a href="#163222" label="[16:32:22]">&lt;rickmasters&gt;</a></span><span class="message">linux (outside live-bootstrap).</span></div><div class="line" id="163232"><span class="nick" style="color:#2e2a4a"><a href="#163232" label="[16:32:32]">&lt;rickmasters&gt;</a></span><span class="message">I was finally able to build linux 2.4 without errors but I am still working on trying to boot it to make sure it actually works.</span></div><div class="line" id="163241"><span class="nick" style="color:#2e2a4a"><a href="#163241" label="[16:32:41]">&lt;rickmasters&gt;</a></span><span class="message">The kernel is too old for qemu to load directly so I have to create a bootable image which is difficult and requires many tools.</span></div><div class="line" id="163249"><span class="nick" style="color:#2e2a4a"><a href="#163249" label="[16:32:49]">&lt;rickmasters&gt;</a></span><span class="message">Performing a kexec of linux 2.4 from live-bootstrap will be another major challenge because of various differences with modern linux.</span></div><div class="line" id="163252"><span class="nick" style="color:#2e2a4a"><a href="#163252" label="[16:32:52]">&lt;rickmasters&gt;</a></span><span class="message">.</span></div><div class="line" id="163300"><span class="nick" style="color:#2e2a4a"><a href="#163300" label="[16:33:00]">&lt;rickmasters&gt;</a></span><span class="message">I have explored building other kernels as well but they are not very promising for different reasons such as</span></div><div class="line" id="163307"><span class="nick" style="color:#2e2a4a"><a href="#163307" label="[16:33:07]">&lt;rickmasters&gt;</a></span><span class="message">incompatibilites, limited functionality (xv6) or compiler requirements (tilck).</span></div><div class="line" id="163311"><span class="nick" style="color:#2e2a4a"><a href="#163311" label="[16:33:11]">&lt;rickmasters&gt;</a></span><span class="message">.</span></div><div class="line" id="163316"><span class="nick" style="color:#2e2a4a"><a href="#163316" label="[16:33:16]">&lt;rickmasters&gt;</a></span><span class="message">At some point I may decide to abandon linux 2.4 and port builder-hex0 to C instead.</span></div><div class="line" id="163325"><span class="nick" style="color:#2e2a4a"><a href="#163325" label="[16:33:25]">&lt;rickmasters&gt;</a></span><span class="message">I could then enhance my primitive file system and perhaps make pipes work. A C based kernel might provide</span></div><div class="line" id="163354"><span class="nick" style="color:#2e2a4a"><a href="#163354" label="[16:33:54]">&lt;rickmasters&gt;</a></span><span class="message">a way forward for other architectures including x86_64 UEFI.</span></div><div class="line" id="163403"><span class="nick" style="color:#2e2a4a"><a href="#163403" label="[16:34:03]">&lt;rickmasters&gt;</a></span><span class="message">However, instead of making pipes work we could try to remove pipes from live-bootstrap until linux 4.x has been</span></div><div class="line" id="163412"><span class="nick" style="color:#2e2a4a"><a href="#163412" label="[16:34:12]">&lt;rickmasters&gt;</a></span><span class="message">built and booted. I don't think that would be easy, but it would probably help the UEFI bootstrap path</span></div><div class="line" id="163420"><span class="nick" style="color:#2e2a4a"><a href="#163420" label="[16:34:20]">&lt;rickmasters&gt;</a></span><span class="message">get to linux as well (perhaps without an intermediate kernel).</span></div><div class="line" id="163424"><span class="nick" style="color:#2e2a4a"><a href="#163424" label="[16:34:24]">&lt;rickmasters&gt;</a></span><span class="message">.</span></div><div class="line" id="163431"><span class="nick" style="color:#2e2a4a"><a href="#163431" label="[16:34:31]">&lt;rickmasters&gt;</a></span><span class="message">So that's my status. Questions or comments are welcome.</span></div><div class="line" id="200132"><span class="nick" style="color:#6b8072"><a href="#200132" label="[20:01:32]">&lt;Hagfish&gt;</a></span><span class="message">rickmast_: fantastic update, thank you for sharing!</span></div><div class="line" id="200159"><span class="nick" style="color:#6b8072"><a href="#200159" label="[20:01:59]">&lt;Hagfish&gt;</a></span><span class="message">it really feels like a jigsaw puzzle or a sudoku...</span></div><div class="line" id="200208"><span class="nick" style="color:#6b8072"><a href="#200208" label="[20:02:08]">&lt;Hagfish&gt;</a></span><span class="message">all these different constraints pulling against each other</span></div><div class="line" id="200257"><span class="nick" style="color:#6b8072"><a href="#200257" label="[20:02:57]">&lt;Hagfish&gt;</a></span><span class="message">my instinct (or perhaps uninformed wishful thinking) is that someone out there has a missing piece, like a kernel written in C which just happens to support pipes and everything else we need</span></div><div class="line" id="200339"><span class="nick" style="color:#6b8072"><a href="#200339" label="[20:03:39]">&lt;Hagfish&gt;</a></span><span class="message">miracles like that are probably quite rare, and we maybe used up more than our fair share of miracles just getting the kernel work you've already contributed</span></div><div class="line" id="200605"><span class="nick" style="color:#80b1d3"><a href="#200605" label="[20:06:05]">&lt;rickmast_&gt;</a></span><span class="message">HagFish: yeah, it would have been nice to just drop in a new kernel. &quot;tilck&quot; was promising but it relied on C11 atomics and other extensions that tcc does not have</span></div><div class="line" id="200715"><span class="nick" style="color:#80b1d3"><a href="#200715" label="[20:07:15]">&lt;rickmast_&gt;</a></span><span class="message">but there is a lot of code I might be able to leverage</span></div><div class="line" id="203956"><span class="nick" style="color:#6d2462"><a href="#203956" label="[20:39:56]">&lt;stikonas[m]&gt;</a></span><span class="message">Yeah, I don't expect UEFI work to go easy after stage0</span></div><div class="line" id="204019"><span class="nick" style="color:#6d2462"><a href="#204019" label="[20:40:19]">&lt;stikonas[m]&gt;</a></span><span class="message">Probably mes can be ported</span></div><div class="line" id="204028"><span class="nick" style="color:#6d2462"><a href="#204028" label="[20:40:28]">&lt;stikonas[m]&gt;</a></span><span class="message">Then for tcc we would need to adapt headers...</span></div><div class="line" id="211043"><span class="nick" style="color:#6d2462"><a href="#211043" label="[21:10:43]">&lt;stikonas[m]&gt;</a></span><span class="message">rickmast_: what about myunix <a rel="nofollow" href="https://gitlab.com/myunix/myunix">https://gitlab.com/myunix/myunix</a> </span></div><div class="line" id="211105"><span class="nick" style="color:#6d2462"><a href="#211105" label="[21:11:05]">&lt;stikonas[m]&gt;</a></span><span class="message">It's not finished but might be quicker that starting from scratch</span></div><div class="line" id="211820"><span class="nick" style="color:#2e2a4a"><a href="#211820" label="[21:18:20]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: well, at least it looks tcc compatible</span></div><div class="line" id="211931"><span class="nick" style="color:#2e2a4a"><a href="#211931" label="[21:19:31]">&lt;rickmasters&gt;</a></span><span class="message">but it just implements syscalls exit and &quot;test&quot; for debug output</span></div><div class="line" id="211956"><span class="nick" style="color:#2e2a4a"><a href="#211956" label="[21:19:56]">&lt;rickmasters&gt;</a></span><span class="message">it would be a lot of work, but the skeleton looks good</span></div><div class="line" id="212338"><span class="nick" style="color:#2e2a4a"><a href="#212338" label="[21:23:38]">&lt;rickmasters&gt;</a></span><span class="message">oh, I'm not a big fan of GPL 3 TBH. I think I'd prefer starting with <a rel="nofollow" href="https://github.com/vvaltchev/tilck">https://github.com/vvaltchev/tilck</a>  but its also a lot of work</span></div><div class="line" id="212451"><span class="nick" style="color:#6b8072"><a href="#212451" label="[21:24:51]">&lt;Hagfish&gt;</a></span><span class="message">GPL3 wouldn't be a practical problem, would it?  are there other projects with incompatible licences that you'd want to borrow from or link to?</span></div><div class="line" id="212554"><span class="nick" style="color:#234e69"><a href="#212554" label="[21:25:54]">&lt;muurkha&gt;</a></span><span class="message">I don't think it would be a practical problem</span></div><div class="line" id="212632"><span class="nick" style="color:#234e69"><a href="#212632" label="[21:26:32]">&lt;muurkha&gt;</a></span><span class="message">but some people don't like it I guess</span></div><div class="line" id="212757"><span class="nick" style="color:#6d2462"><a href="#212757" label="[21:27:57]">&lt;stikonas[m]&gt;</a></span><span class="message">though reaching tcc in UEFI bootstrap will be challenging too...</span></div><div class="line" id="212809"><span class="nick" style="color:#6d2462"><a href="#212809" label="[21:28:09]">&lt;stikonas[m]&gt;</a></span><span class="message">but probably doable</span></div><div class="line" id="212850"><span class="nick" style="color:#6d2462"><a href="#212850" label="[21:28:50]">&lt;stikonas[m]&gt;</a></span><span class="message">and if we can then have a common kernel (i.e. also compatible with boot2now) then it would be a nice convergence point</span></div><div class="line" id="213438"><span class="nick" style="color:#2e2a4a"><a href="#213438" label="[21:34:38]">&lt;rickmasters&gt;</a></span><span class="message">if I'm going to write a lot of code, I'll want it to offer my preferred licenses. I respect the rationale of GPL3; its just not for me</span></div><div class="line" id="213526"><span class="nick" style="color:#2e2a4a"><a href="#213526" label="[21:35:26]">&lt;rickmasters&gt;</a></span><span class="message">besides, tilck is just much more functional</span></div><div class="line" id="213621"><span class="nick" style="color:#2e2a4a"><a href="#213621" label="[21:36:21]">&lt;rickmasters&gt;</a></span><span class="message">I'm torn between making linux 2.4 work, adopting a simpler code base, and writing the code myself right now.</span></div><div class="line" id="213809"><span class="nick" style="color:#6b8072"><a href="#213809" label="[21:38:09]">&lt;Hagfish&gt;</a></span><span class="message">hmm, yeah, that's a tricky trilemma</span></div><div class="line" id="213837"><span class="nick" style="color:#6b8072"><a href="#213837" label="[21:38:37]">&lt;Hagfish&gt;</a></span><span class="message">i can't think of any heuristics for making such a decision any easier, and i can't think of any comparable situation i've faced</span></div><div class="line" id="213851"><span class="nick" style="color:#6b8072"><a href="#213851" label="[21:38:51]">&lt;Hagfish&gt;</a></span><span class="message">but maybe someone else here will have had a relevant experience</span></div><div class="line" id="213906"><span class="nick" style="color:#2e2a4a"><a href="#213906" label="[21:39:06]">&lt;rickmasters&gt;</a></span><span class="message">everyday I poke at the linux black box I think, &quot;I could have written a lot of code by now...&quot;</span></div><div class="line" id="213929"><span class="nick" style="color:#6b8072"><a href="#213929" label="[21:39:29]">&lt;Hagfish&gt;</a></span><span class="message">yeah, that must be a little disheartening</span></div><div class="line" id="213940"><span class="nick" style="color:#6b8072"><a href="#213940" label="[21:39:40]">&lt;Hagfish&gt;</a></span><span class="message">of course, productivity isn't just how much code gets written</span></div><div class="line" id="213959"><span class="nick" style="color:#6b8072"><a href="#213959" label="[21:39:59]">&lt;Hagfish&gt;</a></span><span class="message">the world would be a better place if some code had never been written at all :)</span></div><div class="line" id="214144"><span class="nick" style="color:#2e2a4a"><a href="#214144" label="[21:41:44]">&lt;rickmasters&gt;</a></span><span class="message">i was able to start a port of builder-hex0 to tcc. I converted some hex to GAS assembly which worked and it could link with C code but I haven't taken it further...</span></div><div class="line" id="214324"><span class="nick" style="color:#2e2a4a"><a href="#214324" label="[21:43:24]">&lt;rickmasters&gt;</a></span><span class="message">So, that path is viable, I'm pretty sure but I'd prefer to use existing code. Just hoping for a miracle TCC compatible posix/linux compatible kernel to drop in my lap</span></div><div class="line" id="214426"><span class="nick" style="color:#2e2a4a"><a href="#214426" label="[21:44:26]">&lt;rickmasters&gt;</a></span><span class="message">... with support for multiprocessing, pipes, a file system, etc</span></div><div class="line" id="214427"><span class="nick" style="color:#6c3d55"><a href="#214427" label="[21:44:27]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: I like the builder-hex0 written in C and slowly expanded to cover our bootstrapping needs</span></div><div class="line" id="214548"><span class="nick" style="color:#6c3d55"><a href="#214548" label="[21:45:48]">&lt;oriansj&gt;</a></span><span class="message">that way as new issues show up; you'll be familiar enough with the kernel to be able to make those changes</span></div><div class="line" id="214719"><span class="nick" style="color:#2e2a4a"><a href="#214719" label="[21:47:19]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: it sure is tempting to go that direction</span></div><div class="line" id="214803"><span class="nick" style="color:#6c3d55"><a href="#214803" label="[21:48:03]">&lt;oriansj&gt;</a></span><span class="message">but the real question is does it sound like fun to you?</span></div><div class="line" id="214825"><span class="nick" style="color:#2e2a4a"><a href="#214825" label="[21:48:25]">&lt;rickmasters&gt;</a></span><span class="message">probably, but it feels like &quot;Not Invented Here&quot; syndrome</span></div><div class="line" id="214832"><span class="nick" style="color:#6c3d55"><a href="#214832" label="[21:48:32]">&lt;oriansj&gt;</a></span><span class="message">so?</span></div><div class="line" id="214916"><span class="nick" style="color:#6c3d55"><a href="#214916" label="[21:49:16]">&lt;oriansj&gt;</a></span><span class="message">inefficencies that are the cost of progress in the desired direction are kind of expected.</span></div><div class="line" id="214958"><span class="nick" style="color:#2e2a4a"><a href="#214958" label="[21:49:58]">&lt;rickmasters&gt;</a></span><span class="message">If I could drop in a different solution like linux, I'm cool with that and moving on with hopefully time saved, but that dream may be ending....</span></div><div class="line" id="215037"><span class="nick" style="color:#6c3d55"><a href="#215037" label="[21:50:37]">&lt;oriansj&gt;</a></span><span class="message">well most kernel developers don't dream of making their kernel easy to bootstrap</span></div><div class="line" id="215143"><span class="nick" style="color:#2e2a4a"><a href="#215143" label="[21:51:43]">&lt;rickmasters&gt;</a></span><span class="message">What's tough is that I don't really know how close I am. I built linux with a strange fork of tcc and it might be just about there or it might be a pile of miscompiled crap</span></div><div class="line" id="215226"><span class="nick" style="color:#2e2a4a"><a href="#215226" label="[21:52:26]">&lt;rickmasters&gt;</a></span><span class="message">There is some &quot;sunk cost fallacy&quot; going on</span></div><div class="line" id="215250"><span class="nick" style="color:#6c3d55"><a href="#215250" label="[21:52:50]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: ok, what if someone else got the builder-hex0 in C started for you?</span></div><div class="line" id="215339"><span class="nick" style="color:#2e2a4a"><a href="#215339" label="[21:53:39]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: well, that's the fun route, I'd feel jealous :)</span></div><div class="line" id="215401"><span class="nick" style="color:#6c3d55"><a href="#215401" label="[21:54:01]">&lt;oriansj&gt;</a></span><span class="message">that way we can experiment on that until we figure out what absolutely is needed to bootstrap Linux</span></div><div class="line" id="215449"><span class="nick" style="color:#6c3d55"><a href="#215449" label="[21:54:49]">&lt;oriansj&gt;</a></span><span class="message">and we can either do a build it step or just backport a few tweaks to your kernel written in hex0 and have our success as cheaply as possible</span></div><div class="line" id="215536"><span class="nick" style="color:#6c3d55"><a href="#215536" label="[21:55:36]">&lt;oriansj&gt;</a></span><span class="message">with the added bonus of having a C kernel as a 1:1 map to your kernel in hex0 so that other people could understand it more quickly and possibly port to new architectures</span></div><div class="line" id="215629"><span class="nick" style="color:#2e2a4a"><a href="#215629" label="[21:56:29]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: I've got a pretty good idea what is needed</span></div><div class="line" id="215638"><span class="nick" style="color:#2e2a4a"><a href="#215638" label="[21:56:38]">&lt;rickmasters&gt;</a></span><span class="message">the file system needs to be enhanced to support reading a directory and it needs multiprocessing to support pipes</span></div><div class="line" id="215719"><span class="nick" style="color:#6c3d55"><a href="#215719" label="[21:57:19]">&lt;oriansj&gt;</a></span><span class="message">well pipes can be done as just a file with separate pointers for the reader and the writer</span></div><div class="line" id="215752"><span class="nick" style="color:#6c3d55"><a href="#215752" label="[21:57:52]">&lt;oriansj&gt;</a></span><span class="message">that breaks them apart upon a fork</span></div><div class="line" id="215804"><span class="nick" style="color:#2e2a4a"><a href="#215804" label="[21:58:04]">&lt;rickmasters&gt;</a></span><span class="message">its the multiprocessing that is tricky - timer ticks and task switching</span></div><div class="line" id="215853"><span class="nick" style="color:#6c3d55"><a href="#215853" label="[21:58:53]">&lt;oriansj&gt;</a></span><span class="message">hence do it in C first and make it as simple as possible</span></div><div class="line" id="215930"><span class="nick" style="color:#6c3d55"><a href="#215930" label="[21:59:30]">&lt;oriansj&gt;</a></span><span class="message">if it seems hard, prototype in a high level language first</span></div><div class="line" id="215957"><span class="nick" style="color:#6c3d55"><a href="#215957" label="[21:59:57]">&lt;oriansj&gt;</a></span><span class="message">it can be slow and very inefficient</span></div><div class="line" id="220001"><span class="nick" style="color:#2e2a4a"><a href="#220001" label="[22:00:01]">&lt;rickmasters&gt;</a></span><span class="message">With tcc, it can be done in C, period</span></div><div class="line" id="220100"><span class="nick" style="color:#2e2a4a"><a href="#220100" label="[22:01:00]">&lt;rickmasters&gt;</a></span><span class="message">I would port most of the OS to C so that other arches could leverage it</span></div><div class="line" id="220218"><span class="nick" style="color:#2e2a4a"><a href="#220218" label="[22:02:18]">&lt;rickmasters&gt;</a></span><span class="message">tcc supports C with embedded assembly and even byte sequences (for 16 bit code) so it would be easy to port progressively</span></div><div class="line" id="220817"><span class="nick" style="color:#2e2a4a"><a href="#220817" label="[22:08:17]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: I appreciate this conversation. I was expecting you to prefer an existing kernel</span></div><div class="line" id="221226"><span class="nick" style="color:#2e2a4a"><a href="#221226" label="[22:12:26]">&lt;rickmasters&gt;</a></span><span class="message">I've got one more thing to try with linux and then I'll probably change course if that doesn't work...</span></div><div class="line" id="221332"><span class="nick" style="color:#6b8072"><a href="#221332" label="[22:13:32]">&lt;Hagfish&gt;</a></span><span class="message">let us know how you get on.  it's always great learning about what you find out and produce</span></div><div class="line" id="221407"><span class="nick" style="color:#d9d9d9"><a href="#221407" label="[22:14:07]">&lt;aggi&gt;</a></span><span class="message">linux-2.4 x86(64?) didn't boot with qemu?</span></div><div class="line" id="221605"><span class="nick" style="color:#2e2a4a"><a href="#221605" label="[22:16:05]">&lt;rickmasters&gt;</a></span><span class="message">aggi: tcc produces an uncompressed kernel without the proper boot protocol information qemu is looking for with the -kernel option</span></div><div class="line" id="221738"><span class="nick" style="color:#d9d9d9"><a href="#221738" label="[22:17:38]">&lt;aggi&gt;</a></span><span class="message">ok. i am looking forward to boot-loading this with isolinux, on real hardware, and hoping for rudimentary support for IDE, generic USB1/2, and VESA graphics</span></div><div class="line" id="221756"><span class="nick" style="color:#d9d9d9"><a href="#221756" label="[22:17:56]">&lt;aggi&gt;</a></span><span class="message">rickmasters: did you pick the latest v2.4 series kernel version?</span></div><div class="line" id="221757"><span class="nick" style="color:#2e2a4a"><a href="#221757" label="[22:17:57]">&lt;rickmasters&gt;</a></span><span class="message">at least the way tccboot produces the kernel using raw output. If I build an ELF executable it doesn't have the &quot;PVH&quot; entries qemu wants</span></div><div class="line" id="221838"><span class="nick" style="color:#234e69"><a href="#221838" label="[22:18:38]">&lt;muurkha&gt;</a></span><span class="message">rickmasters: can you just implement pipes with temp files like MS-DOS did?</span></div><div class="line" id="221955"><span class="nick" style="color:#2e2a4a"><a href="#221955" label="[22:19:55]">&lt;rickmasters&gt;</a></span><span class="message">aggi: I am working on the isolinux method to boot the resulting kernel, but it's throwaway work because we'll probably use a kexec method eventually</span></div><div class="line" id="222213"><span class="nick" style="color:#2e2a4a"><a href="#222213" label="[22:22:13]">&lt;rickmasters&gt;</a></span><span class="message">muurkha: the pipes are created by a shell which then forks multiple children with different input and output descriptors - my kernel can't handle that</span></div><div class="line" id="222240"><span class="nick" style="color:#6d2462"><a href="#222240" label="[22:22:40]">&lt;stikonas[m]&gt;</a></span><span class="message">is that in make? or further bash scripts?</span></div><div class="line" id="222309"><span class="nick" style="color:#2e2a4a"><a href="#222309" label="[22:23:09]">&lt;rickmasters&gt;</a></span><span class="message">so we either rewrite the shell or we rewrite the scripts to replace pipes with temp files but consider autoconf generates these scripts so its a rabbit hole</span></div><div class="line" id="222458"><span class="nick" style="color:#8dd3c7"><a href="#222458" label="[22:24:58]">&lt;stikonas&gt;</a></span><span class="message">so rewriting the shell or make might be easier than writing a new kernel</span></div><div class="line" id="222512"><span class="nick" style="color:#8dd3c7"><a href="#222512" label="[22:25:12]">&lt;stikonas&gt;</a></span><span class="message">aggi had mentioned some other make</span></div><div class="line" id="222516"><span class="nick" style="color:#8dd3c7"><a href="#222516" label="[22:25:16]">&lt;stikonas&gt;</a></span><span class="message">maybe that one is better</span></div><div class="line" id="222617"><span class="nick" style="color:#8dd3c7"><a href="#222617" label="[22:26:17]">&lt;stikonas&gt;</a></span><span class="message">as for rewriting shell, I can't tell but maybe gash would work on single process?</span></div><div class="line" id="222651"><span class="nick" style="color:#8dd3c7"><a href="#222651" label="[22:26:51]">&lt;stikonas&gt;</a></span><span class="message">and we know that gash can run autoconf scripts</span></div><div class="line" id="223007"><span class="nick" style="color:#8dd3c7"><a href="#223007" label="[22:30:07]">&lt;stikonas&gt;</a></span><span class="message">hmm, I wonder whether we can reach GCC if we have make that is single process and shell that have pipes workarounded...</span></div><div class="line" id="223543"><span class="nick" style="color:#8dd3c7"><a href="#223543" label="[22:35:43]">&lt;stikonas&gt;</a></span><span class="message">aggi: what was the name of that make alternative?</span></div><div class="line" id="223549"><span class="nick" style="color:#2e2a4a"><a href="#223549" label="[22:35:49]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: I think that is worth exploring. the complexity of the shell code worries me</span></div><div class="line" id="223620"><span class="nick" style="color:#8dd3c7"><a href="#223620" label="[22:36:20]">&lt;stikonas&gt;</a></span><span class="message">yes, I know...</span></div><div class="line" id="223625"><span class="nick" style="color:#8dd3c7"><a href="#223625" label="[22:36:25]">&lt;stikonas&gt;</a></span><span class="message">I did not say it would be easy</span></div><div class="line" id="223640"><span class="nick" style="color:#8dd3c7"><a href="#223640" label="[22:36:40]">&lt;stikonas&gt;</a></span><span class="message">but writing custom shell might be way easier than writing custome kernel</span></div><div class="line" id="223710"><span class="nick" style="color:#8dd3c7"><a href="#223710" label="[22:37:10]">&lt;stikonas&gt;</a></span><span class="message">but there might be other problems in bootstrap chain</span></div><div class="line" id="223717"><span class="nick" style="color:#234e69"><a href="#223717" label="[22:37:17]">&lt;muurkha&gt;</a></span><span class="message">rickmasters: I was thinking that the shell could maybe run the writer, wait for it to finish, and then run the reader</span></div><div class="line" id="223729"><span class="nick" style="color:#234e69"><a href="#223729" label="[22:37:29]">&lt;muurkha&gt;</a></span><span class="message">maybe topologically sorting them if the topology is complicated</span></div><div class="line" id="223731"><span class="nick" style="color:#2e2a4a"><a href="#223731" label="[22:37:31]">&lt;rickmasters&gt;</a></span><span class="message">I've think I could simplify make to work single process, no pipes. it's a bit of a mess but I think I could make it work</span></div><div class="line" id="223751"><span class="nick" style="color:#234e69"><a href="#223751" label="[22:37:51]">&lt;muurkha&gt;</a></span><span class="message">the case where you can't do that is when (a) your disk is too small for the tempfile or (b) the topology is not acyclic</span></div><div class="line" id="223753"><span class="nick" style="color:#2e2a4a"><a href="#223753" label="[22:37:53]">&lt;rickmasters&gt;</a></span><span class="message">I think make supports DOS and amiga so it can work in a simplified way</span></div><div class="line" id="223803"><span class="nick" style="color:#8dd3c7"><a href="#223803" label="[22:38:03]">&lt;stikonas&gt;</a></span><span class="message">let me try to search bootstrappable logs for that other make</span></div><div class="line" id="223814"><span class="nick" style="color:#8dd3c7"><a href="#223814" label="[22:38:14]">&lt;stikonas&gt;</a></span><span class="message">though they are not easily searchable</span></div><div class="line" id="223837"><span class="nick" style="color:#234e69"><a href="#223837" label="[22:38:37]">&lt;muurkha&gt;</a></span><span class="message">case (b) isn't guaranteed to work even with real multitasking unless the programs are very careful about how much data they write at a time or use select()</span></div><div class="line" id="223953"><span class="nick" style="color:#2e2a4a"><a href="#223953" label="[22:39:53]">&lt;rickmasters&gt;</a></span><span class="message">the configure scripts have a lot of echo | sed or echo | grep pipelines. there may be some complicated pipelines but the ones I've seen are pretty simple</span></div><div class="line" id="224135"><span class="nick" style="color:#2e2a4a"><a href="#224135" label="[22:41:35]">&lt;rickmasters&gt;</a></span><span class="message">BTW, make uses pipes for internal signaling to track jobs I think. again, I think it can work without pipes</span></div><div class="line" id="224144"><span class="nick" style="color:#234e69"><a href="#224144" label="[22:41:44]">&lt;muurkha&gt;</a></span><span class="message">MS-DOS was pretty slow at this IIRC but I think that's mostly because it didn't have a disk cache</span></div><div class="line" id="224214"><span class="nick" style="color:#2e2a4a"><a href="#224214" label="[22:42:14]">&lt;rickmasters&gt;</a></span><span class="message">hate to ask, but does gcc use pipes?</span></div><div class="line" id="224253"><span class="nick" style="color:#234e69"><a href="#224253" label="[22:42:53]">&lt;muurkha&gt;</a></span><span class="message">I think it uses them between cc1 and gas</span></div><div class="line" id="224332"><span class="nick" style="color:#bc80bd"><a href="#224332" label="[22:43:32]">&lt;sam_&gt;</a></span><span class="message">only with -pipe, no?</span></div><div class="line" id="224339"><span class="nick" style="color:#bc80bd"><a href="#224339" label="[22:43:39]">&lt;sam_&gt;</a></span><span class="message">otherwise it dumps to temporary files</span></div><div class="line" id="224448"><span class="nick" style="color:#8dd3c7"><a href="#224448" label="[22:44:48]">&lt;stikonas&gt;</a></span><span class="message">ok, it was <a rel="nofollow" href="https://github.com/rmyorston/pdpmake">https://github.com/rmyorston/pdpmake</a> </span></div><div class="line" id="224515"><span class="nick" style="color:#234e69"><a href="#224515" label="[22:45:15]">&lt;muurkha&gt;</a></span><span class="message">sam_: actually I think you're right but I had forgotten that</span></div><div class="line" id="224616"><span class="nick" style="color:#8dd3c7"><a href="#224616" label="[22:46:16]">&lt;stikonas&gt;</a></span><span class="message">tar uses pipes but easy to workaround that too</span></div><div class="line" id="224628"><span class="nick" style="color:#8dd3c7"><a href="#224628" label="[22:46:28]">&lt;stikonas&gt;</a></span><span class="message">just run tar and gzip/bzip2 separately</span></div><div class="line" id="224634"><span class="nick" style="color:#8dd3c7"><a href="#224634" label="[22:46:34]">&lt;stikonas&gt;</a></span><span class="message">which we actually do early in live-bootstrap</span></div><div class="line" id="224652"><span class="nick" style="color:#8dd3c7"><a href="#224652" label="[22:46:52]">&lt;stikonas&gt;</a></span><span class="message">since pipes in early builds using meslibc are broken</span></div><div class="line" id="224731"><span class="nick" style="color:#8dd3c7"><a href="#224731" label="[22:47:31]">&lt;stikonas&gt;</a></span><span class="message">(might be bzip2 only, but there were some issues)</span></div><div class="line" id="224820"><span class="nick" style="color:#234e69"><a href="#224820" label="[22:48:20]">&lt;muurkha&gt;</a></span><span class="message">stikonas: that sounds like implementing pipes as tempfiles would work fine for tar?</span></div><div class="line" id="224842"><span class="nick" style="color:#8dd3c7"><a href="#224842" label="[22:48:42]">&lt;stikonas&gt;</a></span><span class="message">muurkha: yes</span></div><div class="line" id="224849"><span class="nick" style="color:#8dd3c7"><a href="#224849" label="[22:48:49]">&lt;stikonas&gt;</a></span><span class="message">though oen can just do it manually</span></div><div class="line" id="224903"><span class="nick" style="color:#8dd3c7"><a href="#224903" label="[22:49:03]">&lt;stikonas&gt;</a></span><span class="message">bzip2 -d archite.tar.bz2 followed by tar xvf ...</span></div><div class="line" id="224913"><span class="nick" style="color:#234e69"><a href="#224913" label="[22:49:13]">&lt;muurkha&gt;</a></span><span class="message">I mean I guess you can't spawn the gzip process from the same tar process that is going to write to it, and then have that process wait for gzip to exit</span></div><div class="line" id="224919"><span class="nick" style="color:#8dd3c7"><a href="#224919" label="[22:49:19]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: so pdpmake does not seems to use pipe</span></div><div class="line" id="225051"><span class="nick" style="color:#8dd3c7"><a href="#225051" label="[22:50:51]">&lt;stikonas&gt;</a></span><span class="message">might be worth investigating if it can be drop in replacement in live-bootstrap</span></div><div class="line" id="225147"><span class="nick" style="color:#8dd3c7"><a href="#225147" label="[22:51:47]">&lt;stikonas&gt;</a></span><span class="message">and it's probably easier to build than gnu make</span></div><div class="line" id="225206"><span class="nick" style="color:#8dd3c7"><a href="#225206" label="[22:52:06]">&lt;stikonas&gt;</a></span><span class="message">though we should check if meslibc supports it</span></div><div class="line" id="225221"><span class="nick" style="color:#8dd3c7"><a href="#225221" label="[22:52:21]">&lt;stikonas&gt;</a></span><span class="message">but even if not, should be easy to extend</span></div><div class="line" id="225554"><span class="nick" style="color:#8dd3c7"><a href="#225554" label="[22:55:54]">&lt;stikonas&gt;</a></span><span class="message">though it might not be able to get us past autotools</span></div><div class="line" id="225600"><span class="nick" style="color:#8dd3c7"><a href="#225600" label="[22:56:00]">&lt;stikonas&gt;</a></span><span class="message">or maybe build linux kernel with it</span></div><div class="line" id="230146"><span class="nick" style="color:#2e2a4a"><a href="#230146" label="[23:01:46]">&lt;rickmasters&gt;</a></span><span class="message">ok, well, this discussion has me leaning towards porting builder-hex0 to C and seeing how far we can get without pipes.</span></div><div class="line" id="230231"><span class="nick" style="color:#8dd3c7"><a href="#230231" label="[23:02:31]">&lt;stikonas&gt;</a></span><span class="message">yes, C version (with inline asm of course) would be useful in any case</span></div><div class="line" id="230350"><span class="nick" style="color:#8dd3c7"><a href="#230350" label="[23:03:50]">&lt;stikonas&gt;</a></span><span class="message">and I'll try pdpmake in the meantime</span></div><div class="line" id="230405"><span class="nick" style="color:#8dd3c7"><a href="#230405" label="[23:04:05]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: is it hard to rebase boot2now on top of newer live-bootstrap?</span></div><div class="line" id="230409"><span class="nick" style="color:#2e2a4a"><a href="#230409" label="[23:04:09]">&lt;rickmasters&gt;</a></span><span class="message">OK, but I haven't given up on gnu make yet.</span></div><div class="line" id="230426"><span class="nick" style="color:#8dd3c7"><a href="#230426" label="[23:04:26]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: well, I was meaning to take a look into pdpmake anyway even before this discussion</span></div><div class="line" id="230431"><span class="nick" style="color:#8dd3c7"><a href="#230431" label="[23:04:31]">&lt;stikonas&gt;</a></span><span class="message">it was just quite low in priority</span></div><div class="line" id="230450"><span class="nick" style="color:#8dd3c7"><a href="#230450" label="[23:04:50]">&lt;stikonas&gt;</a></span><span class="message">it shoud be much easier to build it than gnu make</span></div><div class="line" id="230510"><span class="nick" style="color:#8dd3c7"><a href="#230510" label="[23:05:10]">&lt;stikonas&gt;</a></span><span class="message">so one fewer package with complex kaem script</span></div><div class="line" id="230530"><span class="nick" style="color:#8dd3c7"><a href="#230530" label="[23:05:30]">&lt;stikonas&gt;</a></span><span class="message">gnu make needs various -D flags passed to build it</span></div><div class="line" id="230536"><span class="nick" style="color:#2e2a4a"><a href="#230536" label="[23:05:36]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: ok, we'll have options</span></div><div class="line" id="230630"><span class="nick" style="color:#2e2a4a"><a href="#230630" label="[23:06:30]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: I've updated live-bootstrap in boot2now before and it wasn't that bad.</span></div><div class="line" id="230710"><span class="nick" style="color:#8dd3c7"><a href="#230710" label="[23:07:10]">&lt;stikonas&gt;</a></span><span class="message">hopefully nothing serious this time either</span></div><div class="line" id="230734"><span class="nick" style="color:#8dd3c7"><a href="#230734" label="[23:07:34]">&lt;stikonas&gt;</a></span><span class="message">this time there is some early stuff that has changed (mes bump) but hopefully that wouldn't introduce any issues</span></div><div class="line" id="230933"><span class="nick" style="color:#2e2a4a"><a href="#230933" label="[23:09:33]">&lt;rickmasters&gt;</a></span><span class="message">I'll try to update soon</span></div><div class="line" id="232537"><span class="nick" style="color:#2e2a4a"><a href="#232537" label="[23:25:37]">&lt;rickmasters&gt;</a></span><span class="message">aggi: the version of linux is 2.4.26 which is the one that Bellard provided patches for in tccboot</span></div><div class="line" id="232630"><span class="nick" style="color:#2e2a4a"><a href="#232630" label="[23:26:30]">&lt;rickmasters&gt;</a></span><span class="message">The <a rel="nofollow" href="https://github.com/seyko2/tccboot">https://github.com/seyko2/tccboot</a>  project claims to support 2.4.37.11</span></div><div class="line" id="234007"><span class="nick" style="color:#6c3d55"><a href="#234007" label="[23:40:07]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: also we don't know if the path to GCC might be easier than previously expected and manybe of a few months of your brilliant work and we might be able just do a build on a Modern kernel and reboot</span></div><div class="line" id="234022"><span class="nick" style="color:#6c3d55"><a href="#234022" label="[23:40:22]">&lt;oriansj&gt;</a></span><span class="message">^manybe^maybe^</span></div><div class="line" id="234235"><span class="nick" style="color:#6c3d55"><a href="#234235" label="[23:42:35]">&lt;oriansj&gt;</a></span><span class="message">worst case is you have some good fun, we all learn something new and then we try something else</span></div><div class="line" id="234314"><span class="nick" style="color:#d9d9d9"><a href="#234314" label="[23:43:14]">&lt;aggi&gt;</a></span><span class="message">stikonas: i searched for a simple POSIX make implementation and found this one <a rel="nofollow" href="https://frippery.org/make/">https://frippery.org/make/</a> </span></div><div class="line" id="234344"><span class="nick" style="color:#8dd3c7"><a href="#234344" label="[23:43:44]">&lt;stikonas&gt;</a></span><span class="message">aggi: anyway, it does not build as is with meslibc</span></div><div class="line" id="234401"><span class="nick" style="color:#8dd3c7"><a href="#234401" label="[23:44:01]">&lt;stikonas&gt;</a></span><span class="message">input.c:5: error: include file 'glob.h' not found</span></div><div class="line" id="234410"><span class="nick" style="color:#d9d9d9"><a href="#234410" label="[23:44:10]">&lt;aggi&gt;</a></span><span class="message">didn't have time yet to decide and continue with anything</span></div><div class="line" id="234428"><span class="nick" style="color:#d9d9d9"><a href="#234428" label="[23:44:28]">&lt;aggi&gt;</a></span><span class="message">moving to oasis-linux system integration without GNU-buildsystem (autotools) is a huge task</span></div><div class="line" id="234503"><span class="nick" style="color:#d9d9d9"><a href="#234503" label="[23:45:03]">&lt;aggi&gt;</a></span><span class="message">and i don't want to continue any system integration work with gentoo-tooling anymore (because python, perl and other issues related to bootstrapping)</span></div><div class="line" id="234620"><span class="nick" style="color:#8dd3c7"><a href="#234620" label="[23:46:20]">&lt;stikonas&gt;</a></span><span class="message">so GNU Make ships it's own implementation of glob...</span></div><div class="line" id="234637"><span class="nick" style="color:#d9d9d9"><a href="#234637" label="[23:46:37]">&lt;aggi&gt;</a></span><span class="message">with both linux-2.4/tcc and oasis-linux i fear a hard vendor-lock against X86(64) which i want to avoid</span></div><div class="line" id="234703"><span class="nick" style="color:#d9d9d9"><a href="#234703" label="[23:47:03]">&lt;aggi&gt;</a></span><span class="message">furthermore oasis-linux is heading towards cproc/qbe AND binutils as toolchain</span></div><div class="line" id="234756"><span class="nick" style="color:#d9d9d9"><a href="#234756" label="[23:47:56]">&lt;aggi&gt;</a></span><span class="message">if the GNU make version mentioned by stikonas can easily be compiled/linked with tcc this may be good enough, and has the benefit GNU make supports parallel make jobs</span></div><div class="line" id="234903"><span class="nick" style="color:#d9d9d9"><a href="#234903" label="[23:49:03]">&lt;aggi&gt;</a></span><span class="message">anyway, moving towards oasis-linux together with tcc-toolchain and linux-2.4 integration over there, this will imply enormous development costs for packaging and system integration</span></div><div class="line" id="234904"><span class="nick" style="color:#8dd3c7"><a href="#234904" label="[23:49:04]">&lt;stikonas&gt;</a></span><span class="message">aggi: it's good enough for some stuff but not the other. It runs fine on Linux kernel but wouldn't run on builder-hex0 or UEFI</span></div><div class="line" id="235030"><span class="nick" style="color:#8dd3c7"><a href="#235030" label="[23:50:30]">&lt;stikonas&gt;</a></span><span class="message">yes, looks like frippery make assumes a fairly capable livc</span></div><div class="line" id="235031"><span class="nick" style="color:#8dd3c7"><a href="#235031" label="[23:50:31]">&lt;stikonas&gt;</a></span><span class="message">lbic</span></div><div class="line" id="235033"><span class="nick" style="color:#8dd3c7"><a href="#235033" label="[23:50:33]">&lt;stikonas&gt;</a></span><span class="message">libc</span></div><div class="line" id="235049"><span class="nick" style="color:#8dd3c7"><a href="#235049" label="[23:50:49]">&lt;stikonas&gt;</a></span><span class="message">where as gnu make has a lot of built-in stuff</span></div><div class="line" id="235158"><span class="nick" style="color:#d9d9d9"><a href="#235158" label="[23:51:58]">&lt;aggi&gt;</a></span><span class="message">the libc-question is another one remaining, at least with oasis-linux the GNU-buildsystem is detangled from binutils, and this could be an acceptable compromise to continue with instead of tcc-assembler</span></div><div class="line" id="235450"><span class="nick" style="color:#8dd3c7"><a href="#235450" label="[23:54:50]">&lt;stikonas&gt;</a></span><span class="message">yes, but that's a bit orthogonal to what rickmasters was talking about...</span></div><div class="line" id="235548"><span class="nick" style="color:#d9d9d9"><a href="#235548" label="[23:55:48]">&lt;aggi&gt;</a></span><span class="message">the main hindrance is this still: a _hard_ vendor-lock with any tcc/linux-2.4/binutils/oasis-linux against x86(64), because i consider the availability of a cross-compilation and alternative ISA (aarch32/64) a mandatory acceptance criteria for bootstrapping too</span></div><div class="line" id="235807"><span class="nick" style="color:#d9d9d9"><a href="#235807" label="[23:58:07]">&lt;aggi&gt;</a></span><span class="message">well, yes, my perspective is the continuation of system-integration/bootstrapping based upon on the preceeding bootstrapping stages of yours (which i appreciate even when i decide to take another route when detangling from GNU-toolchain and GNU-buildsystem)</span></div><br /></div></body></html>