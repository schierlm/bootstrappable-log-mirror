<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-11-29.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="002753"><span class="nick" style="color:#389600"><a href="#002753" label="[00:27:53]">&lt;oriansj&gt;</a></span><span class="message">I'd donate  a VPS to help on that effort but I am not exactly keen on administrating another  server</span></div><div class="line" id="002825"><span class="nick" style="color:#8dd3c7"><a href="#002825" label="[00:28:25]">&lt;stikonas&gt;</a></span><span class="message">well, it mostly works, so probably fine for now...</span></div><div class="line" id="003753"><span class="nick" style="color:#389600"><a href="#003753" label="[00:37:53]">&lt;oriansj&gt;</a></span><span class="message">fair enough, not like the wiki.bootstrapping.world gets much network traffic anyway</span></div><div class="line" id="020446"><span class="nick" style="color:#2e2a4a"><a href="#020446" label="[02:04:46]">&lt;fossy&gt;</a></span><span class="message">:O</span></div><div class="line" id="021621"><span class="nick" style="color:#6b8072"><a href="#021621" label="[02:16:21]">&lt;Googulator&gt;</a></span><span class="message">did some experimentation on builder-hex0: <a rel="nofollow" href="https://gist.github.com/Googulator/881d615e3e5de235aef60296c09dee0a">https://gist.github.com/Googulator/881d615e3e5de235aef60296c09dee0a</a> </span></div><div class="line" id="021701"><span class="nick" style="color:#6b8072"><a href="#021701" label="[02:17:01]">&lt;Googulator&gt;</a></span><span class="message">stage1 now seems to work on all of my boards (+ qemu), with almost all settings</span></div><div class="line" id="021826"><span class="nick" style="color:#6b8072"><a href="#021826" label="[02:18:26]">&lt;Googulator&gt;</a></span><span class="message">I also implemented printing out the boot sector itself in hex, and the 2nd stage in its textual form, as well as the &quot;wait for stage2 to be available&quot; idea for the trusted Flash drive plan</span></div><div class="line" id="021917"><span class="nick" style="color:#6b8072"><a href="#021917" label="[02:19:17]">&lt;Googulator&gt;</a></span><span class="message">with the original boot sector, many boards would just lock up at a black screen due to Int 13h returning an unexpected number of sectors read</span></div><div class="line" id="022008"><span class="nick" style="color:#6b8072"><a href="#022008" label="[02:20:08]">&lt;Googulator&gt;</a></span><span class="message">In stage2, both reading and writing are via LBA now (although writing is untested and somewhat incomplete)</span></div><div class="line" id="022155"><span class="nick" style="color:#6b8072"><a href="#022155" label="[02:21:55]">&lt;Googulator&gt;</a></span><span class="message">There's also some debug code in the LBA sector read path (it prints an asterisk everytime read_sectors_16 is called, a # for every additional int13 calls within the same read_sector_16 in multi-sector reads, and some debug output when it goes wrong)</span></div><div class="line" id="022316"><span class="nick" style="color:#6b8072"><a href="#022316" label="[02:23:16]">&lt;Googulator&gt;</a></span><span class="message">Unfortunately, there's one issue I can't figure out: on all of my motherboards, with certain BIOS settings, somewhere between sector 180 and 500 (exact number random), reads start timing out</span></div><div class="line" id="022333"><span class="nick" style="color:#6b8072"><a href="#022333" label="[02:23:33]">&lt;Googulator&gt;</a></span><span class="message">This also happens if I switch back to the original stage2 with CHS access</span></div><div class="line" id="022423"><span class="nick" style="color:#6b8072"><a href="#022423" label="[02:24:23]">&lt;Googulator&gt;</a></span><span class="message">All boards tested are LGA775 - one with P35, one with G31, one with NForce 650, and one with i915G</span></div><div class="line" id="022501"><span class="nick" style="color:#6b8072"><a href="#022501" label="[02:25:01]">&lt;Googulator&gt;</a></span><span class="message">Several drives (including a known good SSD), several SATA cables, and several sets of RAM all reproduce the issue</span></div><div class="line" id="022658"><span class="nick" style="color:#6b8072"><a href="#022658" label="[02:26:58]">&lt;Googulator&gt;</a></span><span class="message">Only one of my boards (Asus P5K Premium, with P35) can bypass this and complete the bootstrap, by setting the SATA controller into AHCI mode, or by using an IDE-&gt;SATA adapter connected to a JMicron IDE controller on the board</span></div><div class="line" id="022720"><span class="nick" style="color:#6b8072"><a href="#022720" label="[02:27:20]">&lt;Googulator&gt;</a></span><span class="message">(the JMicron would previously blackscreen in the original stage1)</span></div><div class="line" id="022819"><span class="nick" style="color:#6b8072"><a href="#022819" label="[02:28:19]">&lt;Googulator&gt;</a></span><span class="message">Also 5 different CPUs tested (a Northwood, a Cedar Mill, an Allendale, a Wolfdale and a Kentsfield)</span></div><div class="line" id="022903"><span class="nick" style="color:#6b8072"><a href="#022903" label="[02:29:03]">&lt;Googulator&gt;</a></span><span class="message">On the other boards, I have no option for AHCI, and connecting via an IDE-&gt;SATA adapter doesn't change anything</span></div><div class="line" id="023032"><span class="nick" style="color:#6b8072"><a href="#023032" label="[02:30:32]">&lt;Googulator&gt;</a></span><span class="message">Besides AHCI and that adapter, the only thing that has any effect is forcing PIO or SWDMA (as opposed to MWDMA or UDMA), which makes the very first read (issued by stage1 using CHS) already time out consistently</span></div><div class="line" id="023101"><span class="nick" style="color:#6b8072"><a href="#023101" label="[02:31:01]">&lt;Googulator&gt;</a></span><span class="message">this is also the only instance I found where stage2 fails to even get called by stage2</span></div><div class="line" id="023108"><span class="nick" style="color:#6b8072"><a href="#023108" label="[02:31:08]">&lt;Googulator&gt;</a></span><span class="message">*by stage1</span></div><div class="line" id="023127"><span class="nick" style="color:#6b8072"><a href="#023127" label="[02:31:27]">&lt;Googulator&gt;</a></span><span class="message">Anyone has an idea why this could be happening?</span></div><div class="line" id="023238"><span class="nick" style="color:#6b8072"><a href="#023238" label="[02:32:38]">&lt;Googulator&gt;</a></span><span class="message">It almost feels like the BIOS loads a larger block than just the 1 sector requested in the background, then reads from that cached block on subsequent reads, until it runs out of cached data, and dies trying to touch the actual drive again</span></div><div class="line" id="023311"><span class="nick" style="color:#6b8072"><a href="#023311" label="[02:33:11]">&lt;Googulator&gt;</a></span><span class="message">PIO/SWDMA presumably forces single-sector access, causing only 1 sector worth of buffered data, hence sector 2 already times out</span></div><div class="line" id="023533"><span class="nick" style="color:#6b8072"><a href="#023533" label="[02:35:33]">&lt;Googulator&gt;</a></span><span class="message">RAID mode also makes things work on the P5K</span></div><div class="line" id="023559"><span class="nick" style="color:#6b8072"><a href="#023559" label="[02:35:59]">&lt;Googulator&gt;</a></span><span class="message">Enhanced IDE and Compatible IDE fail in the mode described, just like the other boards</span></div><div class="line" id="023634"><span class="nick" style="color:#6b8072"><a href="#023634" label="[02:36:34]">&lt;Googulator&gt;</a></span><span class="message">Those other boards have no option for AHCI or RAID (except for the NForce, which has RAID, but no RAID boot support)</span></div><div class="line" id="024037"><span class="nick" style="color:#6b8072"><a href="#024037" label="[02:40:37]">&lt;Googulator&gt;</a></span><span class="message">Using qemu, I found no way to reproduce this, even if I set qemu to emulate a Q35 chipset (close relative of the P35 &amp; G31)</span></div><div class="line" id="031036"><span class="nick" style="color:#2e2a4a"><a href="#031036" label="[03:10:36]">&lt;fossy&gt;</a></span><span class="message">Googulator: is 180 and 500 the lower and upper bounds respectively that you've seen for the randomness? and you can't repro that on qemu at all?</span></div><div class="line" id="031045"><span class="nick" style="color:#6b8072"><a href="#031045" label="[03:10:45]">&lt;Googulator&gt;</a></span><span class="message">yes</span></div><div class="line" id="031055"><span class="nick" style="color:#6b8072"><a href="#031055" label="[03:10:55]">&lt;Googulator&gt;</a></span><span class="message">I might have seen a few outliers beyond those</span></div><div class="line" id="031103"><span class="nick" style="color:#2e2a4a"><a href="#031103" label="[03:11:03]">&lt;fossy&gt;</a></span><span class="message">that is *weird*</span></div><div class="line" id="031140"><span class="nick" style="color:#389600"><a href="#031140" label="[03:11:40]">&lt;oriansj&gt;</a></span><span class="message">is the carry flag set? As The carry flag will be set if Extensions are not supported.</span></div><div class="line" id="031201"><span class="nick" style="color:#6b8072"><a href="#031201" label="[03:12:01]">&lt;Googulator&gt;</a></span><span class="message">Another theory I have is maybe BIOS is leaking some resource on every int 13h call</span></div><div class="line" id="031219"><span class="nick" style="color:#6b8072"><a href="#031219" label="[03:12:19]">&lt;Googulator&gt;</a></span><span class="message">oriansj: the carry flag is set, but AH has a different error code than when extensions aren't supported</span></div><div class="line" id="031246"><span class="nick" style="color:#6b8072"><a href="#031246" label="[03:12:46]">&lt;Googulator&gt;</a></span><span class="message">also, extensions are supported up to some sector, and then become unsupported, and the actual boundary where this happens varies from boot to boot - seems unlikely</span></div><div class="line" id="031307"><span class="nick" style="color:#389600"><a href="#031307" label="[03:13:07]">&lt;oriansj&gt;</a></span><span class="message">Set AH = 0x41, BX = 0x55AA, DL = 0x80  and Issue an INT 0x13</span></div><div class="line" id="031317"><span class="nick" style="color:#6b8072"><a href="#031317" label="[03:13:17]">&lt;Googulator&gt;</a></span><span class="message">plus, function 0x2 (plain CHS read) also reproduces this</span></div><div class="line" id="031339"><span class="nick" style="color:#6b8072"><a href="#031339" label="[03:13:39]">&lt;Googulator&gt;</a></span><span class="message">that one doesn't need extensions</span></div><div class="line" id="031354"><span class="nick" style="color:#6b8072"><a href="#031354" label="[03:13:54]">&lt;Googulator&gt;</a></span><span class="message">it's standard since IBM PC/XT</span></div><div class="line" id="031406"><span class="nick" style="color:#389600"><a href="#031406" label="[03:14:06]">&lt;oriansj&gt;</a></span><span class="message">The carry flag would be unset after if the LBA extended mode is supported</span></div><div class="line" id="031427"><span class="nick" style="color:#6b8072"><a href="#031427" label="[03:14:27]">&lt;Googulator&gt;</a></span><span class="message">If you do 0x41, yes</span></div><div class="line" id="031439"><span class="nick" style="color:#6b8072"><a href="#031439" label="[03:14:39]">&lt;Googulator&gt;</a></span><span class="message">Carry flag is &quot;call failed&quot; in general</span></div><div class="line" id="031452"><span class="nick" style="color:#6b8072"><a href="#031452" label="[03:14:52]">&lt;Googulator&gt;</a></span><span class="message">Carry flag on 0x42 *might* mean unsupported</span></div><div class="line" id="031502"><span class="nick" style="color:#6b8072"><a href="#031502" label="[03:15:02]">&lt;Googulator&gt;</a></span><span class="message">Carry flag on 0x02 is certainly not an extension issue</span></div><div class="line" id="031512"><span class="nick" style="color:#6b8072"><a href="#031512" label="[03:15:12]">&lt;Googulator&gt;</a></span><span class="message">&amp; if you get a carry flag, AH contains the status code</span></div><div class="line" id="031522"><span class="nick" style="color:#6b8072"><a href="#031522" label="[03:15:22]">&lt;Googulator&gt;</a></span><span class="message">I get 0x80 in AH, which is timeout</span></div><div class="line" id="031545"><span class="nick" style="color:#6b8072"><a href="#031545" label="[03:15:45]">&lt;Googulator&gt;</a></span><span class="message">&amp; it actually sits for something like 30 seconds in the interrupt (always the same time) before it reports 0x80</span></div><div class="line" id="031621"><span class="nick" style="color:#6b8072"><a href="#031621" label="[03:16:21]">&lt;Googulator&gt;</a></span><span class="message">also, no extensions support on a P35 would be _very_ unlikely</span></div><div class="line" id="031711"><span class="nick" style="color:#389600"><a href="#031711" label="[03:17:11]">&lt;oriansj&gt;</a></span><span class="message">and the transfer must fit in the usable part of low memory, right</span></div><div class="line" id="032111"><span class="nick" style="color:#6b8072"><a href="#032111" label="[03:21:11]">&lt;Googulator&gt;</a></span><span class="message">I'm reading a single sector to 0xA000..0xA200</span></div><div class="line" id="032115"><span class="nick" style="color:#6b8072"><a href="#032115" label="[03:21:15]">&lt;Googulator&gt;</a></span><span class="message">like the original CHS code</span></div><div class="line" id="032134"><span class="nick" style="color:#6b8072"><a href="#032134" label="[03:21:34]">&lt;Googulator&gt;</a></span><span class="message">not crossing 64K boundaries either</span></div><div class="line" id="032429"><span class="nick" style="color:#389600"><a href="#032429" label="[03:24:29]">&lt;oriansj&gt;</a></span><span class="message">I am not seeing SI being set to the address of a disk address packet</span></div><div class="line" id="032748"><span class="nick" style="color:#389600"><a href="#032748" label="[03:27:48]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://wiki.osdev.org/ATA_in_x86_RealMode_">https://wiki.osdev.org/ATA_in_x86_RealMode_</a>(BIOS)#x86_Examples </span></div><div class="line" id="032956"><span class="nick" style="color:#389600"><a href="#032956" label="[03:29:56]">&lt;oriansj&gt;</a></span><span class="message">seeing :addr_packet but not SI being set to it prior to the interrupt (still reading)</span></div><div class="line" id="033103"><span class="nick" style="color:#6b8072"><a href="#033103" label="[03:31:03]">&lt;Googulator&gt;</a></span><span class="message"> <a rel="nofollow" href="https://gist.github.com/Googulator/881d615e3e5de235aef60296c09dee0a#file-builder-hex0-x86-stage2-hex2-L252">https://gist.github.com/Googulator/881d615e3e5de235aef60296c09dee0a#file-builder-hex0-x86-stage2-hex2-L252</a> </span></div><div class="line" id="033216"><span class="nick" style="color:#6b8072"><a href="#033216" label="[03:32:16]">&lt;Googulator&gt;</a></span><span class="message">BE $addr_packet # mov si, $addr_packet      ; disk address packet</span></div><div class="line" id="033248"><span class="nick" style="color:#6b8072"><a href="#033248" label="[03:32:48]">&lt;Googulator&gt;</a></span><span class="message">Also, _this code works_ if I set SATA mode to AHCI or RAID</span></div><div class="line" id="033301"><span class="nick" style="color:#6b8072"><a href="#033301" label="[03:33:01]">&lt;Googulator&gt;</a></span><span class="message">&amp; it even works with IDE mode... initially</span></div><div class="line" id="033323"><span class="nick" style="color:#6b8072"><a href="#033323" label="[03:33:23]">&lt;Googulator&gt;</a></span><span class="message">then it fails in the exact same way as the CHS-based code we're currently using</span></div><div class="line" id="034058"><span class="nick" style="color:#389600"><a href="#034058" label="[03:40:58]">&lt;oriansj&gt;</a></span><span class="message">if :dest_segment and :dest_offset stayed constant does the issue still occur?</span></div><div class="line" id="034240"><span class="nick" style="color:#6b8072"><a href="#034240" label="[03:42:40]">&lt;Googulator&gt;</a></span><span class="message">dest_segment and dest_offset are always 0xA000 and 0x0000, respectively, when the error occurs</span></div><div class="line" id="034252"><span class="nick" style="color:#6b8072"><a href="#034252" label="[03:42:52]">&lt;Googulator&gt;</a></span><span class="message">(I print the whole addr_packet on error)</span></div><div class="line" id="034333"><span class="nick" style="color:#6b8072"><a href="#034333" label="[03:43:33]">&lt;Googulator&gt;</a></span><span class="message">0000:A000 is the sector read buffer</span></div><div class="line" id="034440"><span class="nick" style="color:#389600"><a href="#034440" label="[03:44:40]">&lt;oriansj&gt;</a></span><span class="message">and :dest_offset is always 1</span></div><div class="line" id="034702"><span class="nick" style="color:#389600"><a href="#034702" label="[03:47:02]">&lt;oriansj&gt;</a></span><span class="message">sorry I mean :num_sectors_bios is always 1</span></div><div class="line" id="035548"><span class="nick" style="color:#6b8072"><a href="#035548" label="[03:55:48]">&lt;Googulator&gt;</a></span><span class="message">yes, it's always 1</span></div><div class="line" id="041125"><span class="nick" style="color:#389600"><a href="#041125" label="[04:11:25]">&lt;oriansj&gt;</a></span><span class="message">what is the cache size on your disks?</span></div><div class="line" id="041220"><span class="nick" style="color:#6b8072"><a href="#041220" label="[04:12:20]">&lt;Googulator&gt;</a></span><span class="message">On one of the HDDs, it's 8M</span></div><div class="line" id="041237"><span class="nick" style="color:#6b8072"><a href="#041237" label="[04:12:37]">&lt;Googulator&gt;</a></span><span class="message">The other is a WD2500BEVT, it doesn't state the cache size on the label</span></div><div class="line" id="041255"><span class="nick" style="color:#6b8072"><a href="#041255" label="[04:12:55]">&lt;Googulator&gt;</a></span><span class="message">looks like it's also 8MB</span></div><div class="line" id="041418"><span class="nick" style="color:#6b8072"><a href="#041418" label="[04:14:18]">&lt;Googulator&gt;</a></span><span class="message">3rd drive is an SSD, I can't find any data on cache size on it</span></div><div class="line" id="041423"><span class="nick" style="color:#6b8072"><a href="#041423" label="[04:14:23]">&lt;Googulator&gt;</a></span><span class="message">All reproduce the same</span></div><div class="line" id="041621"><span class="nick" style="color:#389600"><a href="#041621" label="[04:16:21]">&lt;oriansj&gt;</a></span><span class="message">well a cache miss could produce 80h timeout (not ready) but a second read attempt should be a hit</span></div><div class="line" id="041821"><span class="nick" style="color:#6b8072"><a href="#041821" label="[04:18:21]">&lt;Googulator&gt;</a></span><span class="message">Retrying doesn't help</span></div><div class="line" id="044717"><span class="nick" style="color:#389600"><a href="#044717" label="[04:47:17]">&lt;oriansj&gt;</a></span><span class="message">and it is 80h not B0h right?</span></div><div class="line" id="045633"><span class="nick" style="color:#389600"><a href="#045633" label="[04:56:33]">&lt;oriansj&gt;</a></span><span class="message">and the LBA isn't near the 504 MiB LBA of the drive right</span></div><div class="line" id="050653"><span class="nick" style="color:#389600"><a href="#050653" label="[05:06:53]">&lt;oriansj&gt;</a></span><span class="message">does an AH = 00h int 13h disk reset help?</span></div><div class="line" id="051407"><span class="nick" style="color:#6b8072"><a href="#051407" label="[05:14:07]">&lt;Googulator&gt;</a></span><span class="message">Just tried disk reset (AH=0), it doesn't help</span></div><div class="line" id="051416"><span class="nick" style="color:#6b8072"><a href="#051416" label="[05:14:16]">&lt;Googulator&gt;</a></span><span class="message">Error code is definitely 80, not B0</span></div><div class="line" id="051442"><span class="nick" style="color:#6b8072"><a href="#051442" label="[05:14:42]">&lt;Googulator&gt;</a></span><span class="message">Right now, LBA address is 0x9E</span></div><div class="line" id="051642"><span class="nick" style="color:#389600"><a href="#051642" label="[05:16:42]">&lt;oriansj&gt;</a></span><span class="message">so 79KB into the disk</span></div><div class="line" id="051731"><span class="nick" style="color:#389600"><a href="#051731" label="[05:17:31]">&lt;oriansj&gt;</a></span><span class="message">(assuming 512 byte  blocks)</span></div><div class="line" id="051823"><span class="nick" style="color:#6b8072"><a href="#051823" label="[05:18:23]">&lt;Googulator&gt;</a></span><span class="message">Even weirder - physically unplugging and replugging a disk also doesn't seem to clear the fault, even though if I do that before the problem occurs, it does continue</span></div><div class="line" id="051916"><span class="nick" style="color:#6b8072"><a href="#051916" label="[05:19:16]">&lt;Googulator&gt;</a></span><span class="message">(I can even swap to a different physical drive - useful for booting from an SSD on a board that craps out on RPM being 0)</span></div><div class="line" id="051941"><span class="nick" style="color:#6b8072"><a href="#051941" label="[05:19:41]">&lt;Googulator&gt;</a></span><span class="message">But once the error hits, nothing helps</span></div><div class="line" id="051959"><span class="nick" style="color:#389600"><a href="#051959" label="[05:19:59]">&lt;oriansj&gt;</a></span><span class="message">including locking the volume?</span></div><div class="line" id="052008"><span class="nick" style="color:#6b8072"><a href="#052008" label="[05:20:08]">&lt;Googulator&gt;</a></span><span class="message">what do you mean</span></div><div class="line" id="052022"><span class="nick" style="color:#6b8072"><a href="#052022" label="[05:20:22]">&lt;Googulator&gt;</a></span><span class="message">This is on bare metal</span></div><div class="line" id="052036"><span class="nick" style="color:#389600"><a href="#052036" label="[05:20:36]">&lt;oriansj&gt;</a></span><span class="message">AH = 45h int 13h</span></div><div class="line" id="052057"><span class="nick" style="color:#389600"><a href="#052057" label="[05:20:57]">&lt;oriansj&gt;</a></span><span class="message">but that is only for external drives</span></div><div class="line" id="052153"><span class="nick" style="color:#6b8072"><a href="#052153" label="[05:21:53]">&lt;Googulator&gt;</a></span><span class="message">that's for ATAPI CD drives</span></div><div class="line" id="052201"><span class="nick" style="color:#6b8072"><a href="#052201" label="[05:22:01]">&lt;Googulator&gt;</a></span><span class="message">it disables the physical eject button</span></div><div class="line" id="052219"><span class="nick" style="color:#6b8072"><a href="#052219" label="[05:22:19]">&lt;Googulator&gt;</a></span><span class="message">it does nothing (or worse) on a HDD on SSD</span></div><div class="line" id="052625"><span class="nick" style="color:#6b8072"><a href="#052625" label="[05:26:25]">&lt;Googulator&gt;</a></span><span class="message"> <a rel="nofollow" href="https://forum.osdev.org/viewtopic.php?f=1&amp;t=56103">https://forum.osdev.org/viewtopic.php?f=1&amp;t=56103</a>  this sounds similar</span></div><div class="line" id="052903"><span class="nick" style="color:#6b8072"><a href="#052903" label="[05:29:03]">&lt;Googulator&gt;</a></span><span class="message">...or not, since this was a stack setup issue</span></div><div class="line" id="053913"><span class="nick" style="color:#389600"><a href="#053913" label="[05:39:13]">&lt;oriansj&gt;</a></span><span class="message">well unbalanced stacks are easy to do  in assembly but honestly I am out of ideas at the moment</span></div><div class="line" id="063454"><span class="nick" style="color:#6b8072"><a href="#063454" label="[06:34:54]">&lt;Googulator&gt;</a></span><span class="message">hmm, engineered a scenario where a timeout occurs while still in stage0 (by giving it a huge garbage text instead of actual hex0 code), and it froze at sector 15271 (decimal)</span></div><div class="line" id="063503"><span class="nick" style="color:#6b8072"><a href="#063503" label="[06:35:03]">&lt;Googulator&gt;</a></span><span class="message">this is all CHS at this point</span></div><div class="line" id="063514"><span class="nick" style="color:#6b8072"><a href="#063514" label="[06:35:14]">&lt;Googulator&gt;</a></span><span class="message">&amp; all real mode, no real&lt;-&gt;protected switcheroo yet</span></div><div class="line" id="063536"><span class="nick" style="color:#6b8072"><a href="#063536" label="[06:35:36]">&lt;Googulator&gt;</a></span><span class="message">Maybe it's time-dependent?</span></div><div class="line" id="063631"><span class="nick" style="color:#6b8072"><a href="#063631" label="[06:36:31]">&lt;Googulator&gt;</a></span><span class="message">as in, you have X seconds to finish booting before the BIOS kills int 13h for you</span></div><div class="line" id="063809"><span class="nick" style="color:#6b8072"><a href="#063809" label="[06:38:09]">&lt;Googulator&gt;</a></span><span class="message">stage1 I mean</span></div><div class="line" id="063945"><span class="nick" style="color:#6b8072"><a href="#063945" label="[06:39:45]">&lt;Googulator&gt;</a></span><span class="message">stage2 is replaced by Metasploit's non-repeating pattern (repeated to fill a much larger area, but since I know the error is on sector boundary, it's not practically repeating yet)</span></div><div class="line" id="135842"><span class="nick" style="color:#389600"><a href="#135842" label="[13:58:42]">&lt;oriansj&gt;</a></span><span class="message">Googulator:  Well some hard drives have behavior left over from Windows 95 which is designed to prevent user programs from bypassing the kernel. But I don't know the technical details of implementation and a timeout seems like a cheap and easy way to do that.</span></div><div class="line" id="153419"><span class="nick" style="color:#80b1d3"><a href="#153419" label="[15:34:19]">&lt;muurkha&gt;</a></span><span class="message">ugh, what a mess</span></div><div class="line" id="153439"><span class="nick" style="color:#80b1d3"><a href="#153439" label="[15:34:39]">&lt;muurkha&gt;</a></span><span class="message">you have to work around the workarounds for the workarounds</span></div><div class="line" id="172340"><span class="nick" style="color:#6b8072"><a href="#172340" label="[17:23:40]">&lt;Googulator&gt;</a></span><span class="message">Ran the engineered failure case (where we freeze in stage0) a few more times, and it *very* consistently freezes at exactly the same sector, at the exact same time after it gets control.</span></div><div class="line" id="172719"><span class="nick" style="color:#6b8072"><a href="#172719" label="[17:27:19]">&lt;Googulator&gt;</a></span><span class="message">And now went back to the original stage2  (which gets loaded, but freezes early in reading srcfs), and timed it - it freezes exactly at the same point in time too!</span></div><div class="line" id="172814"><span class="nick" style="color:#6b8072"><a href="#172814" label="[17:28:14]">&lt;Googulator&gt;</a></span><span class="message">I wonder if this could be related: <a rel="nofollow" href="https://github.com/TritonDataCenter/syslinux/commit/d0f275981c9289dc4b8df64e72cd9902bf85aebe">https://github.com/TritonDataCenter/syslinux/commit/d0f275981c9289dc4b8df64e72cd9902bf85aebe</a> </span></div><div class="line" id="172923"><span class="nick" style="color:#6b8072"><a href="#172923" label="[17:29:23]">&lt;Googulator&gt;</a></span><span class="message">&quot;33 C0&quot; being used as a signature for a &quot;modern&quot; bootloader, anything else gets the Windows 9x treatment</span></div><div class="line" id="172952"><span class="nick" style="color:#6b8072"><a href="#172952" label="[17:29:52]">&lt;Googulator&gt;</a></span><span class="message">unless AHCI or RAID is enabled, which are incompatible with Windows 9x, so no 9x-specific hack applied</span></div><div class="line" id="173729"><span class="nick" style="color:#6b8072"><a href="#173729" label="[17:37:29]">&lt;Googulator&gt;</a></span><span class="message">...nope, &quot;33 C0&quot; didn't help</span></div><div class="line" id="182803"><span class="nick" style="color:#389600"><a href="#182803" label="[18:28:03]">&lt;oriansj&gt;</a></span><span class="message">Googulator: now to isolate if it is the sector or the amount of time</span></div><div class="line" id="190638"><span class="nick" style="color:#6b8072"><a href="#190638" label="[19:06:38]">&lt;Googulator&gt;</a></span><span class="message">It's quite clearly time-dependent</span></div><div class="line" id="191406"><span class="nick" style="color:#6b8072"><a href="#191406" label="[19:14:06]">&lt;Googulator&gt;</a></span><span class="message">hmm... it's actually more complicated</span></div><div class="line" id="191425"><span class="nick" style="color:#6b8072"><a href="#191425" label="[19:14:25]">&lt;Googulator&gt;</a></span><span class="message">intentionally slowed down stage 1 by printing every character 5 times</span></div><div class="line" id="191436"><span class="nick" style="color:#6b8072"><a href="#191436" label="[19:14:36]">&lt;Googulator&gt;</a></span><span class="message">now it runs for over 30 seconds before it dies</span></div><div class="line" id="191446"><span class="nick" style="color:#6b8072"><a href="#191446" label="[19:14:46]">&lt;Googulator&gt;</a></span><span class="message">at sector 12902</span></div><div class="line" id="191600"><span class="nick" style="color:#6b8072"><a href="#191600" label="[19:16:00]">&lt;Googulator&gt;</a></span><span class="message">AND it occasionally prints wrong values!</span></div><div class="line" id="191830"><span class="nick" style="color:#6d2462"><a href="#191830" label="[19:18:30]">&lt;GoogulatorMobile&gt;</a></span><span class="message"> <a rel="nofollow" href="https://private-user-images.githubusercontent.com/16308406/286702956-018994c4-9190-43e4-9abd-3b8e936c23a7.jpg">https://private-user-images.githubusercontent.com/16308406/286702956-018994c4-9190-43e4-9abd-3b8e936c23a7.jpg</a> </span></div><div class="line" id="191950"><span class="nick" style="color:#6b8072"><a href="#191950" label="[19:19:50]">&lt;Googulator&gt;</a></span><span class="message">notice the errors towards the top of the screen</span></div><div class="line" id="192004"><span class="nick" style="color:#389600"><a href="#192004" label="[19:20:04]">&lt;oriansj&gt;</a></span><span class="message">sounds like a stack issue; time to start dropping DEADBEEF into the stack</span></div><div class="line" id="192119"><span class="nick" style="color:#6b8072"><a href="#192119" label="[19:21:19]">&lt;Googulator&gt;</a></span><span class="message">yeah, it appears it's not just int 13h that's breaking</span></div><div class="line" id="192122"><span class="nick" style="color:#6b8072"><a href="#192122" label="[19:21:22]">&lt;Googulator&gt;</a></span><span class="message">int 10h too</span></div><div class="line" id="192215"><span class="nick" style="color:#6b8072"><a href="#192215" label="[19:22:15]">&lt;Googulator&gt;</a></span><span class="message">the code only ever prints &quot;dark white&quot; on black - and yet there's color</span></div><div class="line" id="192259"><span class="nick" style="color:#6b8072"><a href="#192259" label="[19:22:59]">&lt;Googulator&gt;</a></span><span class="message">what do you mean dropping DEADBEEF into the stack</span></div><div class="line" id="192315"><span class="nick" style="color:#389600"><a href="#192315" label="[19:23:15]">&lt;oriansj&gt;</a></span><span class="message">I would add <a rel="nofollow" href="https://paste.debian.net/1299628/">https://paste.debian.net/1299628/</a>  and use it to start dumping stack values.</span></div><div class="line" id="192347"><span class="nick" style="color:#389600"><a href="#192347" label="[19:23:47]">&lt;oriansj&gt;</a></span><span class="message">By pusing DEADBEEF onto the stack, it becomes easy to spot if you are doing more pushes than pops</span></div><div class="line" id="192429"><span class="nick" style="color:#389600"><a href="#192429" label="[19:24:29]">&lt;oriansj&gt;</a></span><span class="message">or more pops than pushes on certain code paths</span></div><div class="line" id="192527"><span class="nick" style="color:#6b8072"><a href="#192527" label="[19:25:27]">&lt;Googulator&gt;</a></span><span class="message">after reset, it stopped at a different location - but there's corrupted output on the screen again</span></div><div class="line" id="192535"><span class="nick" style="color:#6b8072"><a href="#192535" label="[19:25:35]">&lt;Googulator&gt;</a></span><span class="message">(no color this time)</span></div><div class="line" id="195336"><span class="nick" style="color:#6b8072"><a href="#195336" label="[19:53:36]">&lt;Googulator&gt;</a></span><span class="message">did a different test: I print the value of sp before and after each int 13h call, to see if the stack pointer is moving</span></div><div class="line" id="195339"><span class="nick" style="color:#6b8072"><a href="#195339" label="[19:53:39]">&lt;Googulator&gt;</a></span><span class="message">it's nit</span></div><div class="line" id="195341"><span class="nick" style="color:#6b8072"><a href="#195341" label="[19:53:41]">&lt;Googulator&gt;</a></span><span class="message">it's not</span></div><div class="line" id="195409"><span class="nick" style="color:#6b8072"><a href="#195409" label="[19:54:09]">&lt;Googulator&gt;</a></span><span class="message">stack stays @ ss:0x76EC throughout the process</span></div><div class="line" id="195432"><span class="nick" style="color:#6b8072"><a href="#195432" label="[19:54:32]">&lt;Googulator&gt;</a></span><span class="message">makes sense given that there's only one location where we call read_sector_16</span></div><div class="line" id="195611"><span class="nick" style="color:#6b8072"><a href="#195611" label="[19:56:11]">&lt;Googulator&gt;</a></span><span class="message">this also confirms that in stage1, the freeze is not triggered by an int 13h call, but rather by an int 10h</span></div><div class="line" id="195628"><span class="nick" style="color:#6b8072"><a href="#195628" label="[19:56:28]">&lt;Googulator&gt;</a></span><span class="message">because there's no SP printout right before the freeze</span></div><div class="line" id="201053"><span class="nick" style="color:#6b8072"><a href="#201053" label="[20:10:53]">&lt;Googulator&gt;</a></span><span class="message">so it's not a stack overflow</span></div><div class="line" id="201103"><span class="nick" style="color:#6b8072"><a href="#201103" label="[20:11:03]">&lt;Googulator&gt;</a></span><span class="message">at least not in our code</span></div><div class="line" id="202423"><span class="nick" style="color:#389600"><a href="#202423" label="[20:24:23]">&lt;oriansj&gt;</a></span><span class="message">god I hate firmware;</span></div><div class="line" id="203334"><span class="nick" style="color:#389600"><a href="#203334" label="[20:33:34]">&lt;oriansj&gt;</a></span><span class="message">well you are using Teletype output  AH=0Eh so BL will be the reason for colors</span></div><div class="line" id="203359"><span class="nick" style="color:#6b8072"><a href="#203359" label="[20:33:59]">&lt;Googulator&gt;</a></span><span class="message">OK, turns out I'm dumb, as usual :)</span></div><div class="line" id="203425"><span class="nick" style="color:#6b8072"><a href="#203425" label="[20:34:25]">&lt;Googulator&gt;</a></span><span class="message">stage0 reads and compiles hex0 to increasing addresses starting Googulator 0x7E00</span></div><div class="line" id="203434"><span class="nick" style="color:#6b8072"><a href="#203434" label="[20:34:34]">&lt;Googulator&gt;</a></span><span class="message">stage0 reads and compiles hex0 to increasing addresses starting @ 0x7E00</span></div><div class="line" id="203514"><span class="nick" style="color:#6b8072"><a href="#203514" label="[20:35:14]">&lt;Googulator&gt;</a></span><span class="message">...until it hits a point between 0x80000 and 0xA0000 that varies depending on the BIOS (the start of the EBDA)</span></div><div class="line" id="203552"><span class="nick" style="color:#6b8072"><a href="#203552" label="[20:35:52]">&lt;Googulator&gt;</a></span><span class="message">from then on, it begins overwriting BIOS private data with compiled code</span></div><div class="line" id="203620"><span class="nick" style="color:#6b8072"><a href="#203620" label="[20:36:20]">&lt;Googulator&gt;</a></span><span class="message">&amp; if it still survives, after 0xA0000, you're writing into framebuffer &amp; MMIO space :)</span></div><div class="line" id="203702"><span class="nick" style="color:#6b8072"><a href="#203702" label="[20:37:02]">&lt;Googulator&gt;</a></span><span class="message">as an added bonus, because stage1 is still using CHS, and it's a really simplified CHS code, it never actually reads past the 1st cylinder</span></div><div class="line" id="203740"><span class="nick" style="color:#6b8072"><a href="#203740" label="[20:37:40]">&lt;Googulator&gt;</a></span><span class="message">if I nop out the &quot;stosb&quot;, we no longer freeze in stage1</span></div><div class="line" id="203752"><span class="nick" style="color:#6b8072"><a href="#203752" label="[20:37:52]">&lt;Googulator&gt;</a></span><span class="message">(I don't know why I sometimes call stage1 &quot;stage0&quot;)</span></div><div class="line" id="203831"><span class="nick" style="color:#6b8072"><a href="#203831" label="[20:38:31]">&lt;Googulator&gt;</a></span><span class="message">not corrupting EBDA sure helps a lot :)</span></div><div class="line" id="203832"><span class="nick" style="color:#389600"><a href="#203832" label="[20:38:32]">&lt;oriansj&gt;</a></span><span class="message">that would definitely explain it.</span></div><div class="line" id="203900"><span class="nick" style="color:#389600"><a href="#203900" label="[20:39:00]">&lt;oriansj&gt;</a></span><span class="message">Googulator: it is hard to keep every detail in our heads, that is why we add comments</span></div><div class="line" id="203953"><span class="nick" style="color:#6b8072"><a href="#203953" label="[20:39:53]">&lt;Googulator&gt;</a></span><span class="message">Of course, all this means is that we still have no answer as to why stage2 is failing</span></div><div class="line" id="204256"><span class="nick" style="color:#389600"><a href="#204256" label="[20:42:56]">&lt;oriansj&gt;</a></span><span class="message">well, puzzles to solve and fun to be had</span></div><div class="line" id="210827"><span class="nick" style="color:#234e69"><a href="#210827" label="[21:08:27]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Well, UEFI was also easy to crash if I accidentally wrote to its memory</span></div><div class="line" id="210911"><span class="nick" style="color:#234e69"><a href="#210911" label="[21:09:11]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Does BIOS provide any api to get memory map?</span></div><div class="line" id="212326"><span class="nick" style="color:#6b8072"><a href="#212326" label="[21:23:26]">&lt;Googulator&gt;</a></span><span class="message">e820</span></div><div class="line" id="212503"><span class="nick" style="color:#6b8072"><a href="#212503" label="[21:25:03]">&lt;Googulator&gt;</a></span><span class="message">int 0x15, ax = 0xe820</span></div><div class="line" id="223941"><span class="nick" style="color:#6b8072"><a href="#223941" label="[22:39:41]">&lt;Googulator&gt;</a></span><span class="message">No stack creep issue in stage2 either, SP always @ 0xF07A when int 13 is called</span></div><div class="line" id="223948"><span class="nick" style="color:#6b8072"><a href="#223948" label="[22:39:48]">&lt;Googulator&gt;</a></span><span class="message">On both real hardware and qemu</span></div><div class="line" id="224150"><span class="nick" style="color:#6b8072"><a href="#224150" label="[22:41:50]">&lt;Googulator&gt;</a></span><span class="message">or rather @ 0x7AF0</span></div><div class="line" id="224158"><span class="nick" style="color:#6b8072"><a href="#224158" label="[22:41:58]">&lt;Googulator&gt;</a></span><span class="message">I forgot I'm printing the address in reverse</span></div><div class="line" id="225104"><span class="nick" style="color:#6b8072"><a href="#225104" label="[22:51:04]">&lt;Googulator&gt;</a></span><span class="message">tested the latest stage2 from ironmeld repo on the affected hardware, it locks up exactly the same</span></div><div class="line" id="225114"><span class="nick" style="color:#6b8072"><a href="#225114" label="[22:51:14]">&lt;Googulator&gt;</a></span><span class="message">(this one is again pure CHS)</span></div><br /></div></body></html>