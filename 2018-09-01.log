<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2018-09-01.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000504"><span class="nick" style="color:#389600"><a href="#000504" label="[00:05:04]">&lt;OriansJ&gt;</a></span><span class="message">janneke: sponge allows one to do such forms as cat foo bar baz | sponge foo and get the complete contents of foo</span></div><div class="line" id="000551"><span class="nick" style="color:#389600"><a href="#000551" label="[00:05:51]">&lt;OriansJ&gt;</a></span><span class="message">also cat foo bar baz | sponge baz and not lose the contents of baz like you normally would if you did cat foo bar baz | some processing &gt; baz</span></div><div class="line" id="000821"><span class="nick" style="color:#389600"><a href="#000821" label="[00:08:21]">&lt;OriansJ&gt;</a></span><span class="message">I needed it when I had to solve a bug in an IBM product for the State of Michigan. I've kept in my toolkit ever since</span></div><div class="line" id="003326"><span class="nick" style="color:#8dd3c7"><a href="#003326" label="[00:33:26]">&lt;rain1&gt;</a></span><span class="message">if a language is self hosted it is defined not only by (source code), but by the pair (source code, compiled code)</span></div><div class="line" id="003536"><span class="nick" style="color:#389600"><a href="#003536" label="[00:35:36]">&lt;OriansJ&gt;</a></span><span class="message">rain1: except when the self-hosted language is a subset or superset of another language capable of compiling the source code</span></div><div class="line" id="003940"><span class="nick" style="color:#2e2a4a"><a href="#003940" label="[00:39:40]">&lt;akkartik&gt;</a></span><span class="message">The readme change looks good, OriansJ.</span></div><div class="line" id="004110"><span class="nick" style="color:#2e2a4a"><a href="#004110" label="[00:41:10]">&lt;akkartik&gt;</a></span><span class="message">Another suggestion: add the description in <a rel="nofollow" href="https://bootstrapping.miraheze.org/wiki/Stage0">https://bootstrapping.miraheze.org/wiki/Stage0</a>  to the stage0 Readme. Or a pointer to it? I only found out about it from <a rel="nofollow" href="https://news.ycombinator.com/item?id=17851311#17851917">https://news.ycombinator.com/item?id=17851311#17851917</a> </span></div><div class="line" id="004500"><span class="nick" style="color:#389600"><a href="#004500" label="[00:45:00]">&lt;OriansJ&gt;</a></span><span class="message">akkartik: might tweak the verbage but sounds reasonable</span></div><div class="line" id="004635"><span class="nick" style="color:#2e2a4a"><a href="#004635" label="[00:46:35]">&lt;akkartik&gt;</a></span><span class="message">+1. I found it super useful.</span></div><div class="line" id="004822"><span class="nick" style="color:#389600"><a href="#004822" label="[00:48:22]">&lt;OriansJ&gt;</a></span><span class="message">good, right now I'm tweaking cc_x86.s so that it makes the --debug form of output to enable gdb and objdump to be able to read the files with ease</span></div><div class="line" id="004944"><span class="nick" style="color:#2e2a4a"><a href="#004944" label="[00:49:44]">&lt;akkartik&gt;</a></span><span class="message">Oh nice. Does that involve getting into DWARF and whatnot?</span></div><div class="line" id="005013"><span class="nick" style="color:#2e2a4a"><a href="#005013" label="[00:50:13]">&lt;akkartik&gt;</a></span><span class="message">Or just adding section headers? I noticed the ELF binaries seem corrupted to `file` (just like the ones I've been creating).</span></div><div class="line" id="005023"><span class="nick" style="color:#389600"><a href="#005023" label="[00:50:23]">&lt;OriansJ&gt;</a></span><span class="message">akkartik: actually only needed to drop a label as blood-elf is able to generate those stubs without issue</span></div><div class="line" id="005059"><span class="nick" style="color:#389600"><a href="#005059" label="[00:50:59]">&lt;OriansJ&gt;</a></span><span class="message">If you look at M2-Planet's current build script (hello.sh in test100)</span></div><div class="line" id="005118"><span class="nick" style="color:#389600"><a href="#005118" label="[00:51:18]">&lt;OriansJ&gt;</a></span><span class="message">you'll see everything you need to make your binaries objdump and gdb friendly</span></div><div class="line" id="005323"><span class="nick" style="color:#2e2a4a"><a href="#005323" label="[00:53:23]">&lt;akkartik&gt;</a></span><span class="message">Interesting! Is most of the work happening in the cc-footer.M1 file?</span></div><div class="line" id="005344"><span class="nick" style="color:#389600"><a href="#005344" label="[00:53:44]">&lt;OriansJ&gt;</a></span><span class="message">that is actually completely generated by blood-elf from the cc.M1 file</span></div><div class="line" id="005354"><span class="nick" style="color:#2e2a4a"><a href="#005354" label="[00:53:54]">&lt;akkartik&gt;</a></span><span class="message">Yes, I noticed.</span></div><div class="line" id="005414"><span class="nick" style="color:#389600"><a href="#005414" label="[00:54:14]">&lt;OriansJ&gt;</a></span><span class="message">it is effectly the dwarf stub needed for objdump</span></div><div class="line" id="005420"><span class="nick" style="color:#2e2a4a"><a href="#005420" label="[00:54:20]">&lt;akkartik&gt;</a></span><span class="message">Is it like a repository of debug information for later stages? Ah, got it.</span></div><div class="line" id="005510"><span class="nick" style="color:#389600"><a href="#005510" label="[00:55:10]">&lt;OriansJ&gt;</a></span><span class="message">the part of the elf header that says there is an dwarf stub and where to find it is in the ELF-i386-debug.hex2</span></div><div class="line" id="005616"><span class="nick" style="color:#2e2a4a"><a href="#005616" label="[00:56:16]">&lt;akkartik&gt;</a></span><span class="message">I'm looking at mescc-tools/blood-elf.cc. Insane that it takes just 250 LoC. I always through dwarf (and fstabs) were deep black magic..</span></div><div class="line" id="005655"><span class="nick" style="color:#2e2a4a"><a href="#005655" label="[00:56:55]">&lt;akkartik&gt;</a></span><span class="message">*always thought</span></div><div class="line" id="010052"><span class="nick" style="color:#389600"><a href="#010052" label="[01:00:52]">&lt;OriansJ&gt;</a></span><span class="message">akkartik: one thing you'll learn about me, is I like to bring magic into the light.</span></div><div class="line" id="010140"><span class="nick" style="color:#389600"><a href="#010140" label="[01:01:40]">&lt;OriansJ&gt;</a></span><span class="message">if at anytime the code I have written is unclear please let me know; I wish for anyone with the desire to learn know everything they want to know about the software I write</span></div><div class="line" id="010622"><span class="nick" style="color:#389600"><a href="#010622" label="[01:06:22]">&lt;OriansJ&gt;</a></span><span class="message">ok janneke your <a rel="nofollow" href="https://gitlab.com/janneke/stage0">https://gitlab.com/janneke/stage0</a>  is in the README, please make sure to update it periodically</span></div><div class="line" id="010651"><span class="nick" style="color:#2e2a4a"><a href="#010651" label="[01:06:51]">&lt;akkartik&gt;</a></span><span class="message">Lovely, that's been my great dissatisfaction as well: that programmers often don't seem to care about allowing other programmers to appreciate their design decisions.I wish I'd found out about this channel sooner. I'd been vaguely aware of stage0 for a few months, and also the miraheze wiki. But I didn't realize there was a larger community beavering away here.</span></div><div class="line" id="010756"><span class="nick" style="color:#389600"><a href="#010756" label="[01:07:56]">&lt;OriansJ&gt;</a></span><span class="message">akkartik: well, we figure if the only people who show up are passionate like we are. They'll fit right in and do amazing things with a little help.</span></div><div class="line" id="010940"><span class="nick" style="color:#8dd3c7"><a href="#010940" label="[01:09:40]">&lt;rain1&gt;</a></span><span class="message">let me share something fun from my peg parser lib today</span></div><div class="line" id="010953"><span class="nick" style="color:#8dd3c7"><a href="#010953" label="[01:09:53]">&lt;rain1&gt;</a></span><span class="message">the s-exp parser didn't support the ... symbol</span></div><div class="line" id="011044"><span class="nick" style="color:#8dd3c7"><a href="#011044" label="[01:10:44]">&lt;rain1&gt;</a></span><span class="message">in one commit it was added in this way <a rel="nofollow" href="https://github.com/rain-1/racket-peg/commit/23dd199a417f5484cbf50f327fbed32571a3a780">https://github.com/rain-1/racket-peg/commit/23dd199a417f5484cbf50f327fbed32571a3a780</a>  (s-exp.rkt is produced by compiling s-exp.peg)</span></div><div class="line" id="011116"><span class="nick" style="color:#8dd3c7"><a href="#011116" label="[01:11:16]">&lt;rain1&gt;</a></span><span class="message">then in a second commit the code can be refactored to use a metacircular definition of ... <a rel="nofollow" href="https://github.com/rain-1/racket-peg/commit/f7fc668b956cbdecc7112e00d8a2bc263a0f609d">https://github.com/rain-1/racket-peg/commit/f7fc668b956cbdecc7112e00d8a2bc263a0f609d</a> </span></div><div class="line" id="011246"><span class="nick" style="color:#8dd3c7"><a href="#011246" label="[01:12:46]">&lt;rain1&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.win.tue.nl/~aeb/linux/hh/thompson/trust.html">https://www.win.tue.nl/~aeb/linux/hh/thompson/trust.html</a>  it's like how thomson describes adding the \v vertical tab</span></div><div class="line" id="011545"><span class="nick" style="color:#2e2a4a"><a href="#011545" label="[01:15:45]">&lt;akkartik&gt;</a></span><span class="message">I see what you mean, rain1. Very cool.</span></div><div class="line" id="011641"><span class="nick" style="color:#389600"><a href="#011641" label="[01:16:41]">&lt;OriansJ&gt;</a></span><span class="message">rain1: literally exactly like thompson's description and warning</span></div><div class="line" id="012633"><span class="nick" style="color:#2e2a4a"><a href="#012633" label="[01:26:33]">&lt;akkartik&gt;</a></span><span class="message">rain1 and I have debated before the value of metacircularity. I think it's fine/great as long as the bootstrap step isn't lost. racket-peg has peg.rkt. Does it make sense to add support for `...` in peg.rkt?</span></div><div class="line" id="012827"><span class="nick" style="color:#389600"><a href="#012827" label="[01:28:27]">&lt;OriansJ&gt;</a></span><span class="message">typically a version change between the 2 is plenty for others to notice the step</span></div><div class="line" id="013007"><span class="nick" style="color:#389600"><a href="#013007" label="[01:30:07]">&lt;OriansJ&gt;</a></span><span class="message">1.9.8 is needed to build 2.0.0 sort of thing; unless you wish for people to do the guessing game janneke has been playing with GCC, glibc and binutils; where even the GCC devs are saying he'll have to hunt on abandoned forums to find the information he needs...</span></div><div class="line" id="013115"><span class="nick" style="color:#389600"><a href="#013115" label="[01:31:15]">&lt;OriansJ&gt;</a></span><span class="message">Hence why I did <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/blob/master/cc_strings.c#L73">https://github.com/oriansj/M2-Planet/blob/master/cc_strings.c#L73</a> </span></div><div class="line" id="013228"><span class="nick" style="color:#2e2a4a"><a href="#013228" label="[01:32:28]">&lt;akkartik&gt;</a></span><span class="message">Exactly. That's awesome.</span></div><div class="line" id="013242"><span class="nick" style="color:#389600"><a href="#013242" label="[01:32:42]">&lt;OriansJ&gt;</a></span><span class="message">It allows cc_x86.s to build newer versions of M2-Planet with support new escapes without having to know them itself</span></div><div class="line" id="013428"><span class="nick" style="color:#2e2a4a"><a href="#013428" label="[01:34:28]">&lt;akkartik&gt;</a></span><span class="message">I didn't follow your comments about the version change. I noticed that you included a paragraph today in <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/commit/42914441c3f">https://github.com/oriansj/M2-Planet/commit/42914441c3f</a>  about how different versions of M2-Planet will depend on previous versions. How do you protect against the Thompson attack inside the bootstrap stack?</span></div><div class="line" id="013457"><span class="nick" style="color:#389600"><a href="#013457" label="[01:34:57]">&lt;OriansJ&gt;</a></span><span class="message">akkartik: because version 1.0.0 can be built by cc_x86.s</span></div><div class="line" id="013613"><span class="nick" style="color:#389600"><a href="#013613" label="[01:36:13]">&lt;OriansJ&gt;</a></span><span class="message">also M2-Planet must always be buildable by GCC, Clang and any other c99 compiler</span></div><div class="line" id="013621"><span class="nick" style="color:#389600"><a href="#013621" label="[01:36:21]">&lt;OriansJ&gt;</a></span><span class="message">but I probably should clarify that bit</span></div><div class="line" id="013728"><span class="nick" style="color:#389600"><a href="#013728" label="[01:37:28]">&lt;OriansJ&gt;</a></span><span class="message">cc_x86.s can be built from M0, which can be built from hex2, which can be built from hex1, which can be built from hex0 and that is 250bytes in size</span></div><div class="line" id="013832"><span class="nick" style="color:#2e2a4a"><a href="#013832" label="[01:38:32]">&lt;akkartik&gt;</a></span><span class="message">Cool. I _think_ I follow? Little hard to be sure with the bootstrap workflow spread out between 3 repos.</span></div><div class="line" id="013839"><span class="nick" style="color:#389600"><a href="#013839" label="[01:38:39]">&lt;OriansJ&gt;</a></span><span class="message">No space to hide any attack, let alone a flag or marker for an attack and once I build the Knight ISA in TTL logic, no where for it to hide in hardware either...</span></div><div class="line" id="013934"><span class="nick" style="color:#2e2a4a"><a href="#013934" label="[01:39:34]">&lt;akkartik&gt;</a></span><span class="message">Nice!</span></div><div class="line" id="013936"><span class="nick" style="color:#389600"><a href="#013936" label="[01:39:36]">&lt;OriansJ&gt;</a></span><span class="message">akkartik: the bootstrap chain is as follows hex0 or hex0-monitor depending on if running on bare metal or on an operating system</span></div><div class="line" id="013951"><span class="nick" style="color:#389600"><a href="#013951" label="[01:39:51]">&lt;OriansJ&gt;</a></span><span class="message">which builds hex1</span></div><div class="line" id="013955"><span class="nick" style="color:#389600"><a href="#013955" label="[01:39:55]">&lt;OriansJ&gt;</a></span><span class="message">which builds hex2</span></div><div class="line" id="014003"><span class="nick" style="color:#389600"><a href="#014003" label="[01:40:03]">&lt;OriansJ&gt;</a></span><span class="message">which builds M0/M1</span></div><div class="line" id="014011"><span class="nick" style="color:#389600"><a href="#014011" label="[01:40:11]">&lt;OriansJ&gt;</a></span><span class="message">which builds cc_x86.s</span></div><div class="line" id="014027"><span class="nick" style="color:#389600"><a href="#014027" label="[01:40:27]">&lt;OriansJ&gt;</a></span><span class="message">which builds M2-Planet's C source code</span></div><div class="line" id="014033"><span class="nick" style="color:#2e2a4a"><a href="#014033" label="[01:40:33]">&lt;akkartik&gt;</a></span><span class="message">I noticed you also mentioned in <a rel="nofollow" href="http://git.savannah.nongnu.org/cgit/stage0.git/tree/README">http://git.savannah.nongnu.org/cgit/stage0.git/tree/README</a>  that &quot;Additionally, all code must be able to be understood by 70% of the population of programmers.&quot; That is *really* speaking my language: <a rel="nofollow" href="http://akkartik.name/about">http://akkartik.name/about</a> </span></div><div class="line" id="014036"><span class="nick" style="color:#389600"><a href="#014036" label="[01:40:36]">&lt;OriansJ&gt;</a></span><span class="message">which is self-hosting</span></div><div class="line" id="014113"><span class="nick" style="color:#2e2a4a"><a href="#014113" label="[01:41:13]">&lt;akkartik&gt;</a></span><span class="message">That's good to see laid out.</span></div><div class="line" id="014146"><span class="nick" style="color:#389600"><a href="#014146" label="[01:41:46]">&lt;OriansJ&gt;</a></span><span class="message">akkartik: If you want to see a really clean architecture checkout stage0's ISA_HEX_Map.org</span></div><div class="line" id="014340"><span class="nick" style="color:#2e2a4a"><a href="#014340" label="[01:43:40]">&lt;akkartik&gt;</a></span><span class="message">Ah, thanks for the pointer.</span></div><div class="line" id="014755"><span class="nick" style="color:#389600"><a href="#014755" label="[01:47:55]">&lt;OriansJ&gt;</a></span><span class="message">akkartik: Honestly, it looks like I could use your help clarifying things in my Documentation; such that the pieces would be more clear to new people.</span></div><div class="line" id="030014"><span class="nick" style="color:#8dd3c7"><a href="#030014" label="[03:00:14]">&lt;rain1&gt;</a></span><span class="message"> <a rel="nofollow" href="https://bootstrapping.miraheze.org/wiki/The_Semantics_Assignment_Problem">https://bootstrapping.miraheze.org/wiki/The_Semantics_Assignment_Problem</a>  here's the draft of my post</span></div><br /></div></body></html>