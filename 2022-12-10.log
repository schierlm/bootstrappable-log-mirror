<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-12-10.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="002230"><span class="nick" style="color:#389600"><a href="#002230" label="[00:22:30]">&lt;alethkit&gt;</a></span><span class="message">stikonas: Shame.</span></div><div class="line" id="002301"><span class="nick" style="color:#389600"><a href="#002301" label="[00:23:01]">&lt;alethkit&gt;</a></span><span class="message">I assume you need some combination of BIOS boot/UEFI, so a port of Cosmopolitan libc might be the way to go</span></div><div class="line" id="002306"><span class="nick" style="color:#8dd3c7"><a href="#002306" label="[00:23:06]">&lt;stikonas&gt;</a></span><span class="message">I don't remember exact details but it might be something simple enough like can't write to files</span></div><div class="line" id="002403"><span class="nick" style="color:#8dd3c7"><a href="#002403" label="[00:24:03]">&lt;stikonas&gt;</a></span><span class="message">never heard of cosmopolitan libc</span></div><div class="line" id="002437"><span class="nick" style="color:#389600"><a href="#002437" label="[00:24:37]">&lt;alethkit&gt;</a></span><span class="message">It's the actually portable executable</span></div><div class="line" id="002445"><span class="nick" style="color:#389600"><a href="#002445" label="[00:24:45]">&lt;alethkit&gt;</a></span><span class="message">a.k.a the universal x86 binary</span></div><div class="line" id="002506"><span class="nick" style="color:#8dd3c7"><a href="#002506" label="[00:25:06]">&lt;stikonas&gt;</a></span><span class="message">ok website says  runs natively on Linux + Mac + Windows + FreeBSD + OpenBSD + NetBSD + BIOS</span></div><div class="line" id="002518"><span class="nick" style="color:#8dd3c7"><a href="#002518" label="[00:25:18]">&lt;stikonas&gt;</a></span><span class="message">I guess they haven't implemented UEFI though</span></div><div class="line" id="002518"><span class="nick" style="color:#389600"><a href="#002518" label="[00:25:18]">&lt;alethkit&gt;</a></span><span class="message">You also get UEFI at the expense of windows</span></div><div class="line" id="002523"><span class="nick" style="color:#8dd3c7"><a href="#002523" label="[00:25:23]">&lt;stikonas&gt;</a></span><span class="message">do you?</span></div><div class="line" id="002526"><span class="nick" style="color:#389600"><a href="#002526" label="[00:25:26]">&lt;alethkit&gt;</a></span><span class="message">Yes</span></div><div class="line" id="002529"><span class="nick" style="color:#8dd3c7"><a href="#002529" label="[00:25:29]">&lt;stikonas&gt;</a></span><span class="message">UEFI is quite different from windows</span></div><div class="line" id="002539"><span class="nick" style="color:#389600"><a href="#002539" label="[00:25:39]">&lt;alethkit&gt;</a></span><span class="message">Not in terms of the binary format</span></div><div class="line" id="002541"><span class="nick" style="color:#8dd3c7"><a href="#002541" label="[00:25:41]">&lt;stikonas&gt;</a></span><span class="message">it has the same calling convention</span></div><div class="line" id="002545"><span class="nick" style="color:#389600"><a href="#002545" label="[00:25:45]">&lt;alethkit&gt;</a></span><span class="message">They're both COFF/PE, IIRC</span></div><div class="line" id="002547"><span class="nick" style="color:#8dd3c7"><a href="#002547" label="[00:25:47]">&lt;stikonas&gt;</a></span><span class="message">yes, binary format is same too</span></div><div class="line" id="002550"><span class="nick" style="color:#8dd3c7"><a href="#002550" label="[00:25:50]">&lt;stikonas&gt;</a></span><span class="message">but it has no syscalls</span></div><div class="line" id="002610"><span class="nick" style="color:#389600"><a href="#002610" label="[00:26:10]">&lt;alethkit&gt;</a></span><span class="message">It has runtime/boot services which are stable</span></div><div class="line" id="002631"><span class="nick" style="color:#8dd3c7"><a href="#002631" label="[00:26:31]">&lt;stikonas&gt;</a></span><span class="message">yes, but boot services are not available in windows</span></div><div class="line" id="002639"><span class="nick" style="color:#8dd3c7"><a href="#002639" label="[00:26:39]">&lt;stikonas&gt;</a></span><span class="message">so I don't see how windows support adds uefi support</span></div><div class="line" id="002723"><span class="nick" style="color:#389600"><a href="#002723" label="[00:27:23]">&lt;alethkit&gt;</a></span><span class="message">It doesn't</span></div><div class="line" id="002729"><span class="nick" style="color:#389600"><a href="#002729" label="[00:27:29]">&lt;alethkit&gt;</a></span><span class="message">They're mutually exclusive</span></div><div class="line" id="002857"><span class="nick" style="color:#8dd3c7"><a href="#002857" label="[00:28:57]">&lt;stikonas&gt;</a></span><span class="message">I guess you could dynamically determine</span></div><div class="line" id="002904"><span class="nick" style="color:#8dd3c7"><a href="#002904" label="[00:29:04]">&lt;stikonas&gt;</a></span><span class="message">whether it's UEFI or windows</span></div><div class="line" id="002934"><span class="nick" style="color:#8dd3c7"><a href="#002934" label="[00:29:34]">&lt;stikonas&gt;</a></span><span class="message">and then picks appropriate code path</span></div><div class="line" id="002957"><span class="nick" style="color:#8dd3c7"><a href="#002957" label="[00:29:57]">&lt;stikonas&gt;</a></span><span class="message">so you might have one binary running on both</span></div><div class="line" id="003032"><span class="nick" style="color:#8dd3c7"><a href="#003032" label="[00:30:32]">&lt;stikonas&gt;</a></span><span class="message">well, our own M2libc is slowly getting UEFI support too</span></div><div class="line" id="003043"><span class="nick" style="color:#8dd3c7"><a href="#003043" label="[00:30:43]">&lt;stikonas&gt;</a></span><span class="message">so M2-Planet can be built for both POSIX and UEFI</span></div><div class="line" id="003122"><span class="nick" style="color:#8dd3c7"><a href="#003122" label="[00:31:22]">&lt;stikonas&gt;</a></span><span class="message">and it's exactly the same source code (if you don't count libc bits)</span></div><div class="line" id="003128"><span class="nick" style="color:#389600"><a href="#003128" label="[00:31:28]">&lt;alethkit&gt;</a></span><span class="message">Figuring out where jart is might be helpful</span></div><div class="line" id="003135"><span class="nick" style="color:#389600"><a href="#003135" label="[00:31:35]">&lt;alethkit&gt;</a></span><span class="message">But I think she hangs out on Discord?</span></div><div class="line" id="004520"><span class="nick" style="color:#389600"><a href="#004520" label="[00:45:20]">&lt;alethkit&gt;</a></span><span class="message">stikonas: I wonder if sectorlisp's existing I/O can be expanded for UEFI</span></div><div class="line" id="004533"><span class="nick" style="color:#389600"><a href="#004533" label="[00:45:33]">&lt;alethkit&gt;</a></span><span class="message">It probably beats attempting to port an entire libc</span></div><div class="line" id="004642"><span class="nick" style="color:#8dd3c7"><a href="#004642" label="[00:46:42]">&lt;stikonas&gt;</a></span><span class="message">I guess it is possible, but it won't be sector lisp then</span></div><div class="line" id="004701"><span class="nick" style="color:#8dd3c7"><a href="#004701" label="[00:47:01]">&lt;stikonas&gt;</a></span><span class="message">UEFI I/O is somewhat tricky</span></div><div class="line" id="004709"><span class="nick" style="color:#8dd3c7"><a href="#004709" label="[00:47:09]">&lt;stikonas&gt;</a></span><span class="message">there is no way you can fit it in a sector</span></div><div class="line" id="004801"><span class="nick" style="color:#389600"><a href="#004801" label="[00:48:01]">&lt;alethkit&gt;</a></span><span class="message">I mean, given the fact that UEFI defaults to 4K for a sector</span></div><div class="line" id="004811"><span class="nick" style="color:#8dd3c7"><a href="#004811" label="[00:48:11]">&lt;stikonas&gt;</a></span><span class="message">does it?</span></div><div class="line" id="004812"><span class="nick" style="color:#389600"><a href="#004812" label="[00:48:12]">&lt;alethkit&gt;</a></span><span class="message">(For GPT boot, that is)</span></div><div class="line" id="004824"><span class="nick" style="color:#8dd3c7"><a href="#004824" label="[00:48:24]">&lt;stikonas&gt;</a></span><span class="message">I was not aware that it cares about sector size</span></div><div class="line" id="004838"><span class="nick" style="color:#8dd3c7"><a href="#004838" label="[00:48:38]">&lt;stikonas&gt;</a></span><span class="message">and GPT works fine with 512 byte sectors</span></div><div class="line" id="005039"><span class="nick" style="color:#8dd3c7"><a href="#005039" label="[00:50:39]">&lt;stikonas&gt;</a></span><span class="message">so for comparison hex0-seed on amd64 linux including elf header is 292 bytes. But UEFI version is 832 bytes</span></div><div class="line" id="005118"><span class="nick" style="color:#8dd3c7"><a href="#005118" label="[00:51:18]">&lt;stikonas&gt;</a></span><span class="message">so extra UEFI overhead is about 540 bytes</span></div><div class="line" id="005127"><span class="nick" style="color:#389600"><a href="#005127" label="[00:51:27]">&lt;alethkit&gt;</a></span><span class="message">But how large is the Linux EFISTUB?</span></div><div class="line" id="005149"><span class="nick" style="color:#8dd3c7"><a href="#005149" label="[00:51:49]">&lt;stikonas&gt;</a></span><span class="message">probably much larger</span></div><div class="line" id="005211"><span class="nick" style="color:#8dd3c7"><a href="#005211" label="[00:52:11]">&lt;stikonas&gt;</a></span><span class="message">you'll struggle to write anything non trivial that is smaller than hex0</span></div><div class="line" id="005236"><span class="nick" style="color:#8dd3c7"><a href="#005236" label="[00:52:36]">&lt;stikonas&gt;</a></span><span class="message">even trivial UEFI application that does nothing would be about 400 bytes</span></div><div class="line" id="005258"><span class="nick" style="color:#389600"><a href="#005258" label="[00:52:58]">&lt;alethkit&gt;</a></span><span class="message">Oh, I'm sure about that</span></div><div class="line" id="005322"><span class="nick" style="color:#389600"><a href="#005322" label="[00:53:22]">&lt;alethkit&gt;</a></span><span class="message">I'm trying to figure out how to bootstrap from UEFI</span></div><div class="line" id="005343"><span class="nick" style="color:#389600"><a href="#005343" label="[00:53:43]">&lt;alethkit&gt;</a></span><span class="message">if only to avoid redundancy in driver code</span></div><div class="line" id="005349"><span class="nick" style="color:#8dd3c7"><a href="#005349" label="[00:53:49]">&lt;stikonas&gt;</a></span><span class="message">save way we bootstrap on Linux</span></div><div class="line" id="005353"><span class="nick" style="color:#8dd3c7"><a href="#005353" label="[00:53:53]">&lt;stikonas&gt;</a></span><span class="message">same way</span></div><div class="line" id="005407"><span class="nick" style="color:#8dd3c7"><a href="#005407" label="[00:54:07]">&lt;stikonas&gt;</a></span><span class="message">start with hex0, reach tcc</span></div><div class="line" id="005417"><span class="nick" style="color:#8dd3c7"><a href="#005417" label="[00:54:17]">&lt;stikonas&gt;</a></span><span class="message">use tcc to build some POSIX kernel</span></div><div class="line" id="005429"><span class="nick" style="color:#8dd3c7"><a href="#005429" label="[00:54:29]">&lt;stikonas&gt;</a></span><span class="message">(this is the step that is different for UEFI)</span></div><div class="line" id="005444"><span class="nick" style="color:#8dd3c7"><a href="#005444" label="[00:54:44]">&lt;stikonas&gt;</a></span><span class="message">and then continue till Linux is bootstrapped</span></div><div class="line" id="005518"><span class="nick" style="color:#8dd3c7"><a href="#005518" label="[00:55:18]">&lt;stikonas&gt;</a></span><span class="message">you won't find anything simpler</span></div><div class="line" id="005542"><span class="nick" style="color:#8dd3c7"><a href="#005542" label="[00:55:42]">&lt;stikonas&gt;</a></span><span class="message">and this is because: 1. Linux needs GCC</span></div><div class="line" id="005604"><span class="nick" style="color:#8dd3c7"><a href="#005604" label="[00:56:04]">&lt;stikonas&gt;</a></span><span class="message">2. GCC needs lots of other tools, such as bison, flex, autotools (so perl, bash)</span></div><div class="line" id="005643"><span class="nick" style="color:#8dd3c7"><a href="#005643" label="[00:56:43]">&lt;stikonas&gt;</a></span><span class="message">well, I can imaging bash can be replaced with something else, but you'll struggle to replace bison, flex or perl</span></div><div class="line" id="005812"><span class="nick" style="color:#8dd3c7"><a href="#005812" label="[00:58:12]">&lt;stikonas&gt;</a></span><span class="message">so you still follow <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst">https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst</a> </span></div><div class="line" id="005820"><span class="nick" style="color:#389600"><a href="#005820" label="[00:58:20]">&lt;alethkit&gt;</a></span><span class="message">~If Linux needs GCC, just bootstrap using Hurd~</span></div><div class="line" id="005837"><span class="nick" style="color:#8dd3c7"><a href="#005837" label="[00:58:37]">&lt;stikonas&gt;</a></span><span class="message">unlikely to be any better</span></div><div class="line" id="005847"><span class="nick" style="color:#8dd3c7"><a href="#005847" label="[00:58:47]">&lt;stikonas&gt;</a></span><span class="message">Fiwix seems a better choice for bootstrap</span></div><div class="line" id="005920"><span class="nick" style="color:#8dd3c7"><a href="#005920" label="[00:59:20]">&lt;stikonas&gt;</a></span><span class="message">Hurd is modular kernel, so I suspect complicated build system, etc..</span></div><div class="line" id="005946"><span class="nick" style="color:#8dd3c7"><a href="#005946" label="[00:59:46]">&lt;stikonas&gt;</a></span><span class="message">and rickmasters said that tcc is capable of building fiwix</span></div><div class="line" id="010002"><span class="nick" style="color:#8dd3c7"><a href="#010002" label="[01:00:02]">&lt;stikonas&gt;</a></span><span class="message">or at least tcc on musl (we haven't tried bootstrapped tcc yet)</span></div><div class="line" id="010028"><span class="nick" style="color:#8dd3c7"><a href="#010028" label="[01:00:28]">&lt;stikonas&gt;</a></span><span class="message">so on UEFI I've now reached step &quot;M2-Planet (v1) compiles kaem&quot; in Part 1</span></div><div class="line" id="010108"><span class="nick" style="color:#389600"><a href="#010108" label="[01:01:08]">&lt;alethkit&gt;</a></span><span class="message">When you say complicated, I assume Guix falls into that area?</span></div><div class="line" id="010318"><span class="nick" style="color:#8dd3c7"><a href="#010318" label="[01:03:18]">&lt;stikonas&gt;</a></span><span class="message">Guix build system is definitely complicated enough</span></div><div class="line" id="010325"><span class="nick" style="color:#8dd3c7"><a href="#010325" label="[01:03:25]">&lt;stikonas&gt;</a></span><span class="message">and it also needs Guile</span></div><div class="line" id="010351"><span class="nick" style="color:#8dd3c7"><a href="#010351" label="[01:03:51]">&lt;stikonas&gt;</a></span><span class="message">and by complicated I mean in terms of bootstrapping purposes</span></div><div class="line" id="010505"><span class="nick" style="color:#8dd3c7"><a href="#010505" label="[01:05:05]">&lt;stikonas&gt;</a></span><span class="message">i.e. make is very simple in that sense as you can just build it with a few tcc commands</span></div><div class="line" id="010524"><span class="nick" style="color:#8dd3c7"><a href="#010524" label="[01:05:24]">&lt;stikonas&gt;</a></span><span class="message">something like autotools is a bit more complicated, you need to build bash and perl for it to work</span></div><div class="line" id="010537"><span class="nick" style="color:#8dd3c7"><a href="#010537" label="[01:05:37]">&lt;stikonas&gt;</a></span><span class="message">something like CMake is much more complicated, as you need g++</span></div><div class="line" id="010618"><span class="nick" style="color:#2e2a4a"><a href="#010618" label="[01:06:18]">&lt;muurkha&gt;</a></span><span class="message">replacing bison and flex is kind of a pain but not out of the question</span></div><div class="line" id="010619"><span class="nick" style="color:#8dd3c7"><a href="#010619" label="[01:06:19]">&lt;stikonas&gt;</a></span><span class="message">I think guix also needs c++ (indirectly)</span></div><div class="line" id="010622"><span class="nick" style="color:#389600"><a href="#010622" label="[01:06:22]">&lt;alethkit&gt;</a></span><span class="message">How heavily does the bootstrapping process rely on special guile extensions?</span></div><div class="line" id="010641"><span class="nick" style="color:#8dd3c7"><a href="#010641" label="[01:06:41]">&lt;stikonas&gt;</a></span><span class="message">we don't use guile till very very late</span></div><div class="line" id="010715"><span class="nick" style="color:#6b8072"><a href="#010715" label="[01:07:15]">&lt;sam_&gt;</a></span><span class="message">i'm surprised by how much stuff works with byacc and reflex at least</span></div><div class="line" id="010717"><span class="nick" style="color:#8dd3c7"><a href="#010717" label="[01:07:17]">&lt;stikonas&gt;</a></span><span class="message">and so far the only package that needs guile is autogen</span></div><div class="line" id="010833"><span class="nick" style="color:#389600"><a href="#010833" label="[01:08:33]">&lt;alethkit&gt;</a></span><span class="message">Wouldn't it be easier to replace bison and flex with handwritten parsers? Or are the grammars not LL?</span></div><div class="line" id="010919"><span class="nick" style="color:#8dd3c7"><a href="#010919" label="[01:09:19]">&lt;stikonas&gt;</a></span><span class="message">well, handwritten parser is used to bootstrap bison and flex</span></div><div class="line" id="010928"><span class="nick" style="color:#8dd3c7"><a href="#010928" label="[01:09:28]">&lt;stikonas&gt;</a></span><span class="message">I'm not sure about gcc itself</span></div><div class="line" id="010935"><span class="nick" style="color:#8dd3c7"><a href="#010935" label="[01:09:35]">&lt;stikonas&gt;</a></span><span class="message">but it's not just gcc</span></div><div class="line" id="010939"><span class="nick" style="color:#8dd3c7"><a href="#010939" label="[01:09:39]">&lt;stikonas&gt;</a></span><span class="message">you would have to write a lot of parsers</span></div><div class="line" id="010946"><span class="nick" style="color:#8dd3c7"><a href="#010946" label="[01:09:46]">&lt;stikonas&gt;</a></span><span class="message">it's also binutils</span></div><div class="line" id="011001"><span class="nick" style="color:#8dd3c7"><a href="#011001" label="[01:10:01]">&lt;stikonas&gt;</a></span><span class="message">a few versions of perl, etc..</span></div><div class="line" id="011042"><span class="nick" style="color:#8dd3c7"><a href="#011042" label="[01:10:42]">&lt;stikonas&gt;</a></span><span class="message">oh and bash too (though we first build bash before bison and build that parser using yacc from heirloom tools)</span></div><div class="line" id="011142"><span class="nick" style="color:#8dd3c7"><a href="#011142" label="[01:11:42]">&lt;stikonas&gt;</a></span><span class="message">well, components in live-bootstrap in principle is something that fossy and I found easiest to build</span></div><div class="line" id="011202"><span class="nick" style="color:#8dd3c7"><a href="#011202" label="[01:12:02]">&lt;stikonas&gt;</a></span><span class="message">if you look at what was available at that time</span></div><div class="line" id="011223"><span class="nick" style="color:#2e2a4a"><a href="#011223" label="[01:12:23]">&lt;muurkha&gt;</a></span><span class="message">if you wanted to replace bison and flex with handwritten parsers, which wouldn't require grammars to be LL, you could handwrite the parsers for bison and flex's input formats, rather than for the zillion things they're used for</span></div><div class="line" id="011239"><span class="nick" style="color:#389600"><a href="#011239" label="[01:12:39]">&lt;alethkit&gt;</a></span><span class="message">That would make more sense, yes</span></div><div class="line" id="011253"><span class="nick" style="color:#8dd3c7"><a href="#011253" label="[01:12:53]">&lt;stikonas&gt;</a></span><span class="message">yes, but there was already bison bootstrap chain that was done</span></div><div class="line" id="011300"><span class="nick" style="color:#389600"><a href="#011300" label="[01:13:00]">&lt;alethkit&gt;</a></span><span class="message">Fair enough</span></div><div class="line" id="011305"><span class="nick" style="color:#389600"><a href="#011305" label="[01:13:05]">&lt;alethkit&gt;</a></span><span class="message">I guess it gives me something to do</span></div><div class="line" id="011307"><span class="nick" style="color:#2e2a4a"><a href="#011307" label="[01:13:07]">&lt;muurkha&gt;</a></span><span class="message">yeah, through various versions of bison, no?</span></div><div class="line" id="011310"><span class="nick" style="color:#8dd3c7"><a href="#011310" label="[01:13:10]">&lt;stikonas&gt;</a></span><span class="message">so all we had to do is to run those steps (i.e. apply some patches, replace some files and build it)</span></div><div class="line" id="011323"><span class="nick" style="color:#8dd3c7"><a href="#011323" label="[01:13:23]">&lt;stikonas&gt;</a></span><span class="message">it's mostly a single version</span></div><div class="line" id="011346"><span class="nick" style="color:#2e2a4a"><a href="#011346" label="[01:13:46]">&lt;muurkha&gt;</a></span><span class="message">sorry for stupid questions</span></div><div class="line" id="011352"><span class="nick" style="color:#8dd3c7"><a href="#011352" label="[01:13:52]">&lt;stikonas&gt;</a></span><span class="message">we do build some other versions later  but that's because bison is not fully compatible between different versions</span></div><div class="line" id="011356"><span class="nick" style="color:#2e2a4a"><a href="#011356" label="[01:13:56]">&lt;muurkha&gt;</a></span><span class="message">a handwritten shift-reduce parser is pretty simple to write if it doesn't have to be efficient; the breakthrough of LALR was that it was guaranteed linear time with no backtracking, not that it could parse things people didn't know how to parse before</span></div><div class="line" id="011401"><span class="nick" style="color:#8dd3c7"><a href="#011401" label="[01:14:01]">&lt;stikonas&gt;</a></span><span class="message">bootstrap of bison is done using version 3.4.1 which we build 3 times</span></div><div class="line" id="011431"><span class="nick" style="color:#8dd3c7"><a href="#011431" label="[01:14:31]">&lt;stikonas&gt;</a></span><span class="message">1. Build bison using a handwritten grammar parser in C. 2. Use bison from previous stage on a simplified bison grammar file. 3. Build bison using original grammar file.</span></div><div class="line" id="011443"><span class="nick" style="color:#2e2a4a"><a href="#011443" label="[01:14:43]">&lt;muurkha&gt;</a></span><span class="message">and a handwritten PEG parser generator is probably simpler than that; I wrote an example one in <a rel="nofollow" href="https://github.com/kragen/peg-bootstrap/blob/master/parser.md">https://github.com/kragen/peg-bootstrap/blob/master/parser.md</a> </span></div><div class="line" id="011455"><span class="nick" style="color:#2e2a4a"><a href="#011455" label="[01:14:55]">&lt;muurkha&gt;</a></span><span class="message">oops</span></div><div class="line" id="011516"><span class="nick" style="color:#2e2a4a"><a href="#011516" label="[01:15:16]">&lt;muurkha&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/kragen/peg-bootstrap/blob/master/peg.md">https://github.com/kragen/peg-bootstrap/blob/master/peg.md</a> </span></div><div class="line" id="011527"><span class="nick" style="color:#8dd3c7"><a href="#011527" label="[01:15:27]">&lt;stikonas&gt;</a></span><span class="message">well, yes, we wrote parsers manually for e.g. M2-Planet</span></div><div class="line" id="011532"><span class="nick" style="color:#2e2a4a"><a href="#011532" label="[01:15:32]">&lt;muurkha&gt;</a></span><span class="message">as a literate program which doubles as an example to PEG parsing</span></div><div class="line" id="011540"><span class="nick" style="color:#8dd3c7"><a href="#011540" label="[01:15:40]">&lt;stikonas&gt;</a></span><span class="message">which is surprisingly readable</span></div><div class="line" id="011541"><span class="nick" style="color:#2e2a4a"><a href="#011541" label="[01:15:41]">&lt;muurkha&gt;</a></span><span class="message">um, as an introduction to PEG parsing</span></div><div class="line" id="011636"><span class="nick" style="color:#2e2a4a"><a href="#011636" label="[01:16:36]">&lt;muurkha&gt;</a></span><span class="message">once you have some systematic way to do backtracking, writing a parser for even fairly hairy languages is not that hard</span></div><div class="line" id="011650"><span class="nick" style="color:#389600"><a href="#011650" label="[01:16:50]">&lt;alethkit&gt;</a></span><span class="message">systematic backtracking?</span></div><div class="line" id="011652"><span class="nick" style="color:#389600"><a href="#011652" label="[01:16:52]">&lt;alethkit&gt;</a></span><span class="message">hmmm</span></div><div class="line" id="011700"><span class="nick" style="color:#2e2a4a"><a href="#011700" label="[01:17:00]">&lt;muurkha&gt;</a></span><span class="message">yeah, like in a PEG parser, for example</span></div><div class="line" id="011708"><span class="nick" style="color:#2e2a4a"><a href="#011708" label="[01:17:08]">&lt;muurkha&gt;</a></span><span class="message">or in Prolog DCGs</span></div><div class="line" id="011807"><span class="nick" style="color:#2e2a4a"><a href="#011807" label="[01:18:07]">&lt;muurkha&gt;</a></span><span class="message">it may take exponential time to run (Packrat guarantees linear time for PEGs, but Prolog DCGs cover the entire class of context-free languages) but that doesn't always matter</span></div><div class="line" id="011944"><span class="nick" style="color:#2e2a4a"><a href="#011944" label="[01:19:44]">&lt;muurkha&gt;</a></span><span class="message">this doesn't matter that much for bison and flex since we already have acceptable unbootstrapping paths for them, but it's likely to matter for things like Haskell, GNAT, etc.</span></div><div class="line" id="011956"><span class="nick" style="color:#389600"><a href="#011956" label="[01:19:56]">&lt;alethkit&gt;</a></span><span class="message">What happened to GNU Gash?</span></div><div class="line" id="012119"><span class="nick" style="color:#8dd3c7"><a href="#012119" label="[01:21:19]">&lt;stikonas&gt;</a></span><span class="message">alethkit: not still being ported to mes</span></div><div class="line" id="012215"><span class="nick" style="color:#389600"><a href="#012215" label="[01:22:15]">&lt;alethkit&gt;</a></span><span class="message">Pardon?</span></div><div class="line" id="012232"><span class="nick" style="color:#8dd3c7"><a href="#012232" label="[01:22:32]">&lt;stikonas&gt;</a></span><span class="message">gash needs guile right now</span></div><div class="line" id="012241"><span class="nick" style="color:#8dd3c7"><a href="#012241" label="[01:22:41]">&lt;stikonas&gt;</a></span><span class="message">which is a fairly heavy dependency</span></div><div class="line" id="012251"><span class="nick" style="color:#8dd3c7"><a href="#012251" label="[01:22:51]">&lt;stikonas&gt;</a></span><span class="message">I think there is a wip work of gash and wip branch of mes where it might run</span></div><div class="line" id="012255"><span class="nick" style="color:#8dd3c7"><a href="#012255" label="[01:22:55]">&lt;stikonas&gt;</a></span><span class="message">but nothing is released</span></div><div class="line" id="012320"><span class="nick" style="color:#8dd3c7"><a href="#012320" label="[01:23:20]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://git.savannah.nongnu.org/cgit/gash.git/log/?h=wip-modular-mes">https://git.savannah.nongnu.org/cgit/gash.git/log/?h=wip-modular-mes</a> </span></div><div class="line" id="012348"><span class="nick" style="color:#8dd3c7"><a href="#012348" label="[01:23:48]">&lt;stikonas&gt;</a></span><span class="message">it might be useful a bit if it runs on mes</span></div><div class="line" id="012357"><span class="nick" style="color:#389600"><a href="#012357" label="[01:23:57]">&lt;alethkit&gt;</a></span><span class="message">ah, right</span></div><div class="line" id="012409"><span class="nick" style="color:#8dd3c7"><a href="#012409" label="[01:24:09]">&lt;stikonas&gt;</a></span><span class="message">that way we can build musl a bit earlier and postpone building of heirloom-tools</span></div><div class="line" id="012419"><span class="nick" style="color:#8dd3c7"><a href="#012419" label="[01:24:19]">&lt;stikonas&gt;</a></span><span class="message">right now there is licensing problem with heirloom-tools</span></div><div class="line" id="012442"><span class="nick" style="color:#8dd3c7"><a href="#012442" label="[01:24:42]">&lt;stikonas&gt;</a></span><span class="message">binaries of heirloom yacc and heirloom lex that live-bootstrap builds are non redistributable</span></div><div class="line" id="012504"><span class="nick" style="color:#8dd3c7"><a href="#012504" label="[01:25:04]">&lt;stikonas&gt;</a></span><span class="message">(heirloom tools are licensed under CDDL)</span></div><div class="line" id="012533"><span class="nick" style="color:#8dd3c7"><a href="#012533" label="[01:25:33]">&lt;stikonas&gt;</a></span><span class="message">(i.e. same license as ZFS)</span></div><div class="line" id="012537"><span class="nick" style="color:#389600"><a href="#012537" label="[01:25:37]">&lt;alethkit&gt;</a></span><span class="message">ah, the zfs problem</span></div><div class="line" id="012540"><span class="nick" style="color:#8dd3c7"><a href="#012540" label="[01:25:40]">&lt;stikonas&gt;</a></span><span class="message">indeed</span></div><div class="line" id="012548"><span class="nick" style="color:#8dd3c7"><a href="#012548" label="[01:25:48]">&lt;stikonas&gt;</a></span><span class="message">and meslibc is GPLv3</span></div><div class="line" id="012606"><span class="nick" style="color:#389600"><a href="#012606" label="[01:26:06]">&lt;alethkit&gt;</a></span><span class="message">hmm</span></div><div class="line" id="012611"><span class="nick" style="color:#8dd3c7"><a href="#012611" label="[01:26:11]">&lt;stikonas&gt;</a></span><span class="message">if we get gash working then we can reorder and build heirloom tools after musl</span></div><div class="line" id="012616"><span class="nick" style="color:#8dd3c7"><a href="#012616" label="[01:26:16]">&lt;stikonas&gt;</a></span><span class="message">and MIT + CDDL is fine</span></div><div class="line" id="013114"><span class="nick" style="color:#80b1d3"><a href="#013114" label="[01:31:14]">&lt;theruran&gt;</a></span><span class="message">muurkha: thanks for the link to your PEG bootstrap! I was planning on using a PEG parser for Ada bootstrap, but it would need to be ported to whatever Scheme we use (Irvise_)</span></div><div class="line" id="013126"><span class="nick" style="color:#80b1d3"><a href="#013126" label="[01:31:26]">&lt;theruran&gt;</a></span><span class="message">hmm, I have this in my browser history: <a rel="nofollow" href="https://github.com/hengestone/parasail_git/blob/master/ada202x_parser/ada202x.y">https://github.com/hengestone/parasail_git/blob/master/ada202x_parser/ada202x.y</a> </span></div><div class="line" id="013232"><span class="nick" style="color:#2e2a4a"><a href="#013232" label="[01:32:32]">&lt;muurkha&gt;</a></span><span class="message">theruran: sure!</span></div><div class="line" id="013329"><span class="nick" style="color:#80b1d3"><a href="#013329" label="[01:33:29]">&lt;theruran&gt;</a></span><span class="message">yeah, iirc, Ada is an LALR(1) grammar - <a rel="nofollow" href="https://dl.acm.org/doi/10.1145/947825.947832">https://dl.acm.org/doi/10.1145/947825.947832</a> </span></div><div class="line" id="013650"><span class="nick" style="color:#2e2a4a"><a href="#013650" label="[01:36:50]">&lt;muurkha&gt;</a></span><span class="message">PEGs are IIRC a superset of LALR(1) grammars</span></div><div class="line" id="013813"><span class="nick" style="color:#2e2a4a"><a href="#013813" label="[01:38:13]">&lt;muurkha&gt;</a></span><span class="message">LALR parsers have the advantage over Packrat parsers (more important in 01978 than today) that they only require memory proportional to the syntactic nesting depth, not the input size.  also they're usually a lot faster and have better error reporting</span></div><div class="line" id="013833"><span class="nick" style="color:#2e2a4a"><a href="#013833" label="[01:38:33]">&lt;muurkha&gt;</a></span><span class="message">but they're a lot more fiddly</span></div><div class="line" id="013953"><span class="nick" style="color:#80b1d3"><a href="#013953" label="[01:39:53]">&lt;theruran&gt;</a></span><span class="message">hmm, from what I've seen of PEG/Packrat in Scheme, they are more elegant in defining the grammar to be parsed. I thought this would be an advantage for bootstrapping readability and (low) effort</span></div><div class="line" id="014047"><span class="nick" style="color:#2e2a4a"><a href="#014047" label="[01:40:47]">&lt;muurkha&gt;</a></span><span class="message">usually both LALR parser generators and PEG parser generators take as input something like a slightly ornamented CFG</span></div><div class="line" id="014108"><span class="nick" style="color:#8dd3c7"><a href="#014108" label="[01:41:08]">&lt;stikonas&gt;</a></span><span class="message">hmm, would any asm experts know here if there is zero-extended version of movsx rax, DWORD PTR [rax] ?</span></div><div class="line" id="014110"><span class="nick" style="color:#80b1d3"><a href="#014110" label="[01:41:10]">&lt;theruran&gt;</a></span><span class="message">I've seen that most industrial-grade language implementations have custom parsers - yes, probably due to error reporting and other language features that require finer control</span></div><div class="line" id="014120"><span class="nick" style="color:#2e2a4a"><a href="#014120" label="[01:41:20]">&lt;muurkha&gt;</a></span><span class="message">stikonas: movsz?</span></div><div class="line" id="014138"><span class="nick" style="color:#8dd3c7"><a href="#014138" label="[01:41:38]">&lt;stikonas&gt;</a></span><span class="message">well, I lower ones are movezx</span></div><div class="line" id="014141"><span class="nick" style="color:#80b1d3"><a href="#014141" label="[01:41:41]">&lt;theruran&gt;</a></span><span class="message">well, and speed</span></div><div class="line" id="014149"><span class="nick" style="color:#8dd3c7"><a href="#014149" label="[01:41:49]">&lt;stikonas&gt;</a></span><span class="message">but only BYTE and WORD PTR versions are recognized</span></div><div class="line" id="014200"><span class="nick" style="color:#2e2a4a"><a href="#014200" label="[01:42:00]">&lt;muurkha&gt;</a></span><span class="message">I guess that demonstrates that I'm not an assembly expert</span></div><div class="line" id="014308"><span class="nick" style="color:#2e2a4a"><a href="#014308" label="[01:43:08]">&lt;muurkha&gt;</a></span><span class="message">it sort of makes sense that movzx on the i386 wouldn't have a dword version because there's no more bits to extend the dword version into, but I'm surprised that amd64 didn't add one</span></div><div class="line" id="014313"><span class="nick" style="color:#8dd3c7"><a href="#014313" label="[01:43:13]">&lt;stikonas&gt;</a></span><span class="message">well, maybe there isn't one instruction...</span></div><div class="line" id="014325"><span class="nick" style="color:#8dd3c7"><a href="#014325" label="[01:43:25]">&lt;stikonas&gt;</a></span><span class="message">maybe I need to load into eax and then zero extend value</span></div><div class="line" id="014413"><span class="nick" style="color:#2e2a4a"><a href="#014413" label="[01:44:13]">&lt;muurkha&gt;</a></span><span class="message">it might be easier to zero rax first and then load into eax</span></div><div class="line" id="014437"><span class="nick" style="color:#2e2a4a"><a href="#014437" label="[01:44:37]">&lt;muurkha&gt;</a></span><span class="message">rather than trying to zero just the high-order bits without bothering the low-order 32</span></div><div class="line" id="014525"><span class="nick" style="color:#8dd3c7"><a href="#014525" label="[01:45:25]">&lt;stikonas&gt;</a></span><span class="message">yes, that's probably easier</span></div><div class="line" id="014549"><span class="nick" style="color:#8dd3c7"><a href="#014549" label="[01:45:49]">&lt;stikonas&gt;</a></span><span class="message">I mean if there are two short instructions that do the same job, I wouldn't be surprised if they don't add one long instruction to do it</span></div><div class="line" id="014643"><span class="nick" style="color:#2e2a4a"><a href="#014643" label="[01:46:43]">&lt;muurkha&gt;</a></span><span class="message">theruran: possibly also custom parsers run faster</span></div><div class="line" id="015453"><span class="nick" style="color:#8dd3c7"><a href="#015453" label="[01:54:53]">&lt;stikonas&gt;</a></span><span class="message">oh it might be that 64-bit instructions that result in 32-bit value are automatically zero extended</span></div><div class="line" id="015549"><span class="nick" style="color:#8dd3c7"><a href="#015549" label="[01:55:49]">&lt;stikonas&gt;</a></span><span class="message">and got my test passing on x86_64 now</span></div><div class="line" id="015600"><span class="nick" style="color:#8dd3c7"><a href="#015600" label="[01:56:00]">&lt;stikonas&gt;</a></span><span class="message">will do the other arches tomorrow</span></div><div class="line" id="015618"><span class="nick" style="color:#8dd3c7"><a href="#015618" label="[01:56:18]">&lt;stikonas&gt;</a></span><span class="message">and then we'll have better support for those fixed size int types</span></div><div class="line" id="015829"><span class="nick" style="color:#2e2a4a"><a href="#015829" label="[01:58:29]">&lt;muurkha&gt;</a></span><span class="message">hmm, you mean that if you mov eax, word ptr [rax] you think it will zero the high bits?  i had no idea, I thought it would leave them alone like the analogous 8-bit and 16-bit cases do (?))</span></div><div class="line" id="015841"><span class="nick" style="color:#2e2a4a"><a href="#015841" label="[01:58:41]">&lt;muurkha&gt;</a></span><span class="message">*not being an asm expert intensifies*</span></div><div class="line" id="015955"><span class="nick" style="color:#8dd3c7"><a href="#015955" label="[01:59:55]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://stackoverflow.com/questions/11177137/why-do-x86-64-instructions-on-32-bit-registers-zero-the-upper-part-of-the-full-6">https://stackoverflow.com/questions/11177137/why-do-x86-64-instructions-on-32-bit-registers-zero-the-upper-part-of-the-full-6</a> </span></div><div class="line" id="015959"><span class="nick" style="color:#8dd3c7"><a href="#015959" label="[01:59:59]">&lt;stikonas&gt;</a></span><span class="message">yes, I didn't know that either</span></div><div class="line" id="020016"><span class="nick" style="color:#8dd3c7"><a href="#020016" label="[02:00:16]">&lt;stikonas&gt;</a></span><span class="message">well, we both learned something today</span></div><div class="line" id="020124"><span class="nick" style="color:#2e2a4a"><a href="#020124" label="[02:01:24]">&lt;muurkha&gt;</a></span><span class="message">hopefully, it might be too hot here for me to remmber it</span></div><div class="line" id="020149"><span class="nick" style="color:#2e2a4a"><a href="#020149" label="[02:01:49]">&lt;muurkha&gt;</a></span><span class="message">it was 32° most of the day, with a punishing dewpoint of about 20°</span></div><div class="line" id="020206"><span class="nick" style="color:#8dd3c7"><a href="#020206" label="[02:02:06]">&lt;stikonas&gt;</a></span><span class="message">oh, here it's qutie cold...</span></div><div class="line" id="020209"><span class="nick" style="color:#2e2a4a"><a href="#020209" label="[02:02:09]">&lt;muurkha&gt;</a></span><span class="message">a thunderstorm briefly brought the dewpoint close to a deadly 30° before cooling the air off</span></div><div class="line" id="020232"><span class="nick" style="color:#8dd3c7"><a href="#020232" label="[02:02:32]">&lt;stikonas&gt;</a></span><span class="message">bellow freezing point now</span></div><div class="line" id="020240"><span class="nick" style="color:#2e2a4a"><a href="#020240" label="[02:02:40]">&lt;muurkha&gt;</a></span><span class="message">that's not ideal either</span></div><div class="line" id="020256"><span class="nick" style="color:#8dd3c7"><a href="#020256" label="[02:02:56]">&lt;stikonas&gt;</a></span><span class="message">oriansj: what's the difference between LOAD and LOADU32 on knight?</span></div><div class="line" id="020257"><span class="nick" style="color:#2e2a4a"><a href="#020257" label="[02:02:57]">&lt;muurkha&gt;</a></span><span class="message">ACTION bellows, &quot;0°! 0°!&quot;</span></div><div class="line" id="020312"><span class="nick" style="color:#8dd3c7"><a href="#020312" label="[02:03:12]">&lt;stikonas&gt;</a></span><span class="message">isn't the register 32-bit on knight</span></div><div class="line" id="020315"><span class="nick" style="color:#8dd3c7"><a href="#020315" label="[02:03:15]">&lt;stikonas&gt;</a></span><span class="message">so there is nothing to extend</span></div><div class="line" id="020320"><span class="nick" style="color:#8dd3c7"><a href="#020320" label="[02:03:20]">&lt;stikonas&gt;</a></span><span class="message">(I might be wrong though)</span></div><div class="line" id="020435"><span class="nick" style="color:#8dd3c7"><a href="#020435" label="[02:04:35]">&lt;stikonas&gt;</a></span><span class="message">anyway, I'm signing off, will read the logs later</span></div><div class="line" id="020822"><span class="nick" style="color:#6d2462"><a href="#020822" label="[02:08:22]">&lt;stikonas[m]&gt;</a></span><span class="message">I could probably try both LOAD and LOADU32 and see if test passes with both</span></div><div class="line" id="021120"><span class="nick" style="color:#6d2462"><a href="#021120" label="[02:11:20]">&lt;stikonas[m]&gt;</a></span><span class="message">Or look at vm.c</span></div><div class="line" id="021144"><span class="nick" style="color:#6d2462"><a href="#021144" label="[02:11:44]">&lt;stikonas[m]&gt;</a></span><span class="message">Looks like they are the same assuming register size is 4 bytes</span></div><div class="line" id="113732"><span class="nick" style="color:#389600"><a href="#113732" label="[11:37:32]">&lt;alethkit&gt;</a></span><span class="message">Hmmm</span></div><div class="line" id="113809"><span class="nick" style="color:#389600"><a href="#113809" label="[11:38:09]">&lt;alethkit&gt;</a></span><span class="message">Looking into it more, futamura projections might be able to be combined with R7RS for a really good bootstrap</span></div><div class="line" id="113830"><span class="nick" style="color:#389600"><a href="#113830" label="[11:38:30]">&lt;alethkit&gt;</a></span><span class="message">as a bonus, we might be able to remove all the other binaries</span></div><div class="line" id="113836"><span class="nick" style="color:#389600"><a href="#113836" label="[11:38:36]">&lt;alethkit&gt;</a></span><span class="message">since we can just have DSLs</span></div><div class="line" id="122638"><span class="nick" style="color:#234e69"><a href="#122638" label="[12:26:38]">&lt;oriansj&gt;</a></span><span class="message">stikonas: there would only be a zero extended load of RAX for a 64bit value if the architecture planners thought their might be a 128bit extension to x86</span></div><div class="line" id="123044"><span class="nick" style="color:#234e69"><a href="#123044" label="[12:30:44]">&lt;oriansj&gt;</a></span><span class="message">muurkha: no such things as stupid questions here, just details one wishes to know</span></div><div class="line" id="123147"><span class="nick" style="color:#234e69"><a href="#123147" label="[12:31:47]">&lt;oriansj&gt;</a></span><span class="message">alethkit: just be sure to do what you find fun ^_^</span></div><div class="line" id="141435"><span class="nick" style="color:#389600"><a href="#141435" label="[14:14:35]">&lt;alethkit&gt;</a></span><span class="message">oriansj: Oh, this is definitely going to be fun</span></div><div class="line" id="141552"><span class="nick" style="color:#389600"><a href="#141552" label="[14:15:52]">&lt;alethkit&gt;</a></span><span class="message">specially since if it actually works, you can leverage it to bootstrap multiple languages (e.g RPython, MiniML)</span></div><div class="line" id="142136"><span class="nick" style="color:#234e69"><a href="#142136" label="[14:21:36]">&lt;oriansj&gt;</a></span><span class="message">alethkit: good, always good to expand our bootstrapping tree</span></div><div class="line" id="143118"><span class="nick" style="color:#8dd3c7"><a href="#143118" label="[14:31:18]">&lt;stikonas&gt;</a></span><span class="message">and I'm continuing to fix load instructions of various length in M2-Planet</span></div><div class="line" id="143155"><span class="nick" style="color:#8dd3c7"><a href="#143155" label="[14:31:55]">&lt;stikonas&gt;</a></span><span class="message">I think now I've got x86, amd64, riscv32, riscv64 and armv7l working, though armv7l defines are somewhat painful :(</span></div><div class="line" id="143224"><span class="nick" style="color:#8dd3c7"><a href="#143224" label="[14:32:24]">&lt;stikonas&gt;</a></span><span class="message">and I messed something up in aarch64, so test0104 (kaem) segfaults</span></div><div class="line" id="143658"><span class="nick" style="color:#8dd3c7"><a href="#143658" label="[14:36:58]">&lt;stikonas&gt;</a></span><span class="message">and knight tests are also broken, though that might be earlier regression, since I haven't tested on knight for some time</span></div><div class="line" id="152748"><span class="nick" style="color:#389600"><a href="#152748" label="[15:27:48]">&lt;alethkit&gt;</a></span><span class="message">Oh, we actually need python for meson!</span></div><div class="line" id="154112"><span class="nick" style="color:#2e2a4a"><a href="#154112" label="[15:41:12]">&lt;muurkha&gt;</a></span><span class="message">doh!</span></div><div class="line" id="155408"><span class="nick" style="color:#8dd3c7"><a href="#155408" label="[15:54:08]">&lt;stikonas&gt;</a></span><span class="message">yes, in that sense meson is harder to bootstrap than cmake</span></div><div class="line" id="165540"><span class="nick" style="color:#8dd3c7"><a href="#165540" label="[16:55:40]">&lt;stikonas&gt;</a></span><span class="message">strange, it now seems that aarch64 has been broken for a few commits...</span></div><div class="line" id="165548"><span class="nick" style="color:#8dd3c7"><a href="#165548" label="[16:55:48]">&lt;stikonas&gt;</a></span><span class="message">I was sure that I was running tests...</span></div><div class="line" id="165549"><span class="nick" style="color:#8dd3c7"><a href="#165549" label="[16:55:49]">&lt;stikonas&gt;</a></span><span class="message">strange</span></div><div class="line" id="170035"><span class="nick" style="color:#8dd3c7"><a href="#170035" label="[17:00:35]">&lt;stikonas&gt;</a></span><span class="message">maybe I mistyped --override flag in get_machine...</span></div><br /></div></body></html>