<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-06-16.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="005457"><span class="nick">***</span><span class="message notice">terpri__ is now known as terpri</span></div><div class="line" id="013509"><span class="nick" style="color:#8dd3c7"><a href="#013509" label="[01:35:09]">&lt;xentrac&gt;</a></span><span class="message">yay fsf</span></div><div class="line" id="021152"><span class="nick" style="color:#2e2a4a"><a href="#021152" label="[02:11:52]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: well getting people on board with bootstrapping is about adopting cultural values that few outside of the Free Software culture have managed to preserve at great cost.</span></div><div class="line" id="021251"><span class="nick" style="color:#2e2a4a"><a href="#021251" label="[02:12:51]">&lt;OriansJ&gt;</a></span><span class="message">Even inside the Free Software community, it does take considerable work to convince people to put forth the effort required to keep bootstrapping possible.</span></div><div class="line" id="021719"><span class="nick" style="color:#6b8072"><a href="#021719" label="[02:17:19]">&lt;pabs3&gt;</a></span><span class="message">its hard enough to convince Free Software people not to store build artefacts in .git :(</span></div><div class="line" id="021728"><span class="nick" style="color:#2e2a4a"><a href="#021728" label="[02:17:28]">&lt;OriansJ&gt;</a></span><span class="message">also congrats janneke on the announcement.</span></div><div class="line" id="021808"><span class="nick" style="color:#2e2a4a"><a href="#021808" label="[02:18:08]">&lt;OriansJ&gt;</a></span><span class="message">pabs3: or depend upon build artifacts to build their software (guile psyntax anyone?)</span></div><div class="line" id="022448"><span class="nick" style="color:#2e2a4a"><a href="#022448" label="[02:24:48]">&lt;OriansJ&gt;</a></span><span class="message">but that is why mes-m2 is such a vital piece of the bootstrap process for guix</span></div><div class="line" id="022527"><span class="nick" style="color:#2e2a4a"><a href="#022527" label="[02:25:27]">&lt;OriansJ&gt;</a></span><span class="message">The problem is it is really hard to find C programmers who are also good Lisp programmers, who are willing to work together to get this done correctly.</span></div><div class="line" id="022700"><span class="nick" style="color:#2e2a4a"><a href="#022700" label="[02:27:00]">&lt;OriansJ&gt;</a></span><span class="message">As it is basically the same sort of task that RMS had to do with GCC to build Emacs but we are attempting to build something even bigger using M2-Planet.</span></div><div class="line" id="022814"><span class="nick" style="color:#2e2a4a"><a href="#022814" label="[02:28:14]">&lt;OriansJ&gt;</a></span><span class="message">It has never been done before and I can see why. Syntax-case is a bitch to implement even in scheme and we have to do it in a C subset that doesn't even support C macros or floating point operations.</span></div><div class="line" id="022918"><span class="nick" style="color:#2e2a4a"><a href="#022918" label="[02:29:18]">&lt;OriansJ&gt;</a></span><span class="message">It would be another story if the Guile devels hopped on and didn't require syntax-case to bootstrap their version of syntax-case but we are not that lucky</span></div><div class="line" id="023913"><span class="nick" style="color:#2e2a4a"><a href="#023913" label="[02:39:13]">&lt;OriansJ&gt;</a></span><span class="message">who knows maybe the solution is to get RMS out of retirement and onto finishing mes-m2 for us. Then we could be done this year</span></div><div class="line" id="042412"><span class="nick" style="color:#80b1d3"><a href="#042412" label="[04:24:12]">&lt;Hagfish&gt;</a></span><span class="message">not requiring syntax-case to bootstrap syntax-case seems like a good balance between amount of work, amount of benefit, and correctness of the solution</span></div><div class="line" id="042452"><span class="nick" style="color:#80b1d3"><a href="#042452" label="[04:24:52]">&lt;Hagfish&gt;</a></span><span class="message">i'm not trying to convince you of that, i'm just explaining my disappointment at the Guile devs for not prioritising that work</span></div><div class="line" id="050750"><span class="nick" style="color:#2e2a4a"><a href="#050750" label="[05:07:50]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: honestly, I've come to accept that we just can't depend upon others to help us save them.</span></div><div class="line" id="050831"><span class="nick" style="color:#2e2a4a"><a href="#050831" label="[05:08:31]">&lt;OriansJ&gt;</a></span><span class="message">Thus far no one from the Haskell community is working on bootstrapping (I would love to be proved wrong here)</span></div><div class="line" id="050910"><span class="nick" style="color:#2e2a4a"><a href="#050910" label="[05:09:10]">&lt;OriansJ&gt;</a></span><span class="message">Thus far I am the only person who is working on the scheme bootstrapping problem.</span></div><div class="line" id="122828"><span class="nick" style="color:#6d2462"><a href="#122828" label="[12:28:28]">&lt;sbp&gt;</a></span><span class="message">hey, I'm having trouble following the current Guix bootstrap story</span></div><div class="line" id="122835"><span class="nick" style="color:#6d2462"><a href="#122835" label="[12:28:35]">&lt;sbp&gt;</a></span><span class="message">is there a canonical place to learn about this?</span></div><div class="line" id="122904"><span class="nick" style="color:#6d2462"><a href="#122904" label="[12:29:04]">&lt;sbp&gt;</a></span><span class="message">e.g. I'm looking at the discrepancies between <a rel="nofollow" href="https://guix.gnu.org/static/blog/img/gcc-core-mesboot0-graph.svg">https://guix.gnu.org/static/blog/img/gcc-core-mesboot0-graph.svg</a>  and <a rel="nofollow" href="http://bootstrappable.org/images/gcc-mesboot0.png">http://bootstrappable.org/images/gcc-mesboot0.png</a>  and the documentation on bootstrappable.org and guix.gnu.org in general</span></div><div class="line" id="123022"><span class="nick" style="color:#6d2462"><a href="#123022" label="[12:30:22]">&lt;sbp&gt;</a></span><span class="message">I don't understand even very simple things, such as why mes (Scheme &lt;-&gt; C mutual self-hosting) is being used as a dependency of tcc (C only, self-hosting)</span></div><div class="line" id="123048"><span class="nick" style="color:#6d2462"><a href="#123048" label="[12:30:48]">&lt;sbp&gt;</a></span><span class="message">surely more complex things should depend on less complex things</span></div><div class="line" id="123157"><span class="nick" style="color:#6d2462"><a href="#123157" label="[12:31:57]">&lt;sbp&gt;</a></span><span class="message">and I don't understand how you intend to bridge the gap between stage0 and, I suppose, mes. I found <a rel="nofollow" href="https://lists.gnu.org/archive/html/guile-user/2017-03/msg00220.html">https://lists.gnu.org/archive/html/guile-user/2017-03/msg00220.html</a>  which essentially just says that the work is yet to be done, but it's an old post</span></div><div class="line" id="123359"><span class="nick" style="color:#6d2462"><a href="#123359" label="[12:33:59]">&lt;sbp&gt;</a></span><span class="message">but I mean e.g. there are FORTH, LISP, and C experiments in stage0 and it's not clear which of them would be used in bootstrapping further towards mes. in the 2017-03 post, Jeremiah even speculates that using something like PL/0 might be helpful</span></div><div class="line" id="123727"><span class="nick" style="color:#6d2462"><a href="#123727" label="[12:37:27]">&lt;sbp&gt;</a></span><span class="message">hi OriansJ`</span></div><div class="line" id="123840"><span class="nick" style="color:#234e69"><a href="#123840" label="[12:38:40]">&lt;OriansJ`&gt;</a></span><span class="message">hello sbp</span></div><div class="line" id="123844"><span class="nick" style="color:#234e69"><a href="#123844" label="[12:38:44]">&lt;OriansJ`&gt;</a></span><span class="message">to answer your questions</span></div><div class="line" id="123859"><span class="nick" style="color:#234e69"><a href="#123859" label="[12:38:59]">&lt;OriansJ`&gt;</a></span><span class="message">here is the current bootstrap map: <a rel="nofollow" href="https://github.com/oriansj/talk-notes/blob/master/Current%20bootstrap%20map.pdf">https://github.com/oriansj/talk-notes/blob/master/Current%20bootstrap%20map.pdf</a> </span></div><div class="line" id="123937"><span class="nick" style="color:#6d2462"><a href="#123937" label="[12:39:37]">&lt;sbp&gt;</a></span><span class="message">oh thanks, this looks like exactly what I needed!</span></div><div class="line" id="124018"><span class="nick" style="color:#234e69"><a href="#124018" label="[12:40:18]">&lt;OriansJ`&gt;</a></span><span class="message">the reason for mes.c &lt;-&gt; MesCC is to simplify the bootstrapping problem into large chunks to allow independent people to make progress collectively</span></div><div class="line" id="124117"><span class="nick" style="color:#6d2462"><a href="#124117" label="[12:41:17]">&lt;sbp&gt;</a></span><span class="message">I think I saw some mention of that somewhere, like the idea of splitting out a C preprocessor that can be implemented in LISP (the stage0 kind, I think it was, in whatever I was reading. I've been reading a lot of stuff, losing track)</span></div><div class="line" id="124118"><span class="nick" style="color:#234e69"><a href="#124118" label="[12:41:18]">&lt;OriansJ`&gt;</a></span><span class="message">as writing a C compiler in scheme capable of bootstrapping GCC is much easier than writing a C compiler in assembly capable of bootstrapping GCC</span></div><div class="line" id="124132"><span class="nick" style="color:#6d2462"><a href="#124132" label="[12:41:32]">&lt;sbp&gt;</a></span><span class="message">oh it was in 2017-03 post, heh</span></div><div class="line" id="124311"><span class="nick" style="color:#6d2462"><a href="#124311" label="[12:43:11]">&lt;sbp&gt;</a></span><span class="message">yeah, but I suppose you wouldn't have to write a C compiler in assembly. you'd take an existing C compiler, perhaps one of the many &quot;subset of C&quot; compilers, and use that to compile itself. then you'd audit the binary that it produces by decompiling it</span></div><div class="line" id="124323"><span class="nick" style="color:#234e69"><a href="#124323" label="[12:43:23]">&lt;OriansJ`&gt;</a></span><span class="message">Guix reduces down to just Guile (48MB of binary) and stage0 grows up to mes-m2; which reduces it down to just 256Bytes (or 89 bytes for the DOS port)</span></div><div class="line" id="124324"><span class="nick" style="color:#6d2462"><a href="#124324" label="[12:43:24]">&lt;sbp&gt;</a></span><span class="message">that's what I don't understand - why that path wasn't taken</span></div><div class="line" id="124351"><span class="nick" style="color:#6d2462"><a href="#124351" label="[12:43:51]">&lt;sbp&gt;</a></span><span class="message">well, one of the *many* things I don't understand ;)</span></div><div class="line" id="124427"><span class="nick" style="color:#234e69"><a href="#124427" label="[12:44:27]">&lt;OriansJ`&gt;</a></span><span class="message">sbp: I did write a C compiler in assembly <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-seed/blob/master/x86/NASM/cc_x86.S">https://github.com/oriansj/mescc-tools-seed/blob/master/x86/NASM/cc_x86.S</a> </span></div><div class="line" id="124455"><span class="nick" style="color:#234e69"><a href="#124455" label="[12:44:55]">&lt;OriansJ`&gt;</a></span><span class="message">but I have no fantasy that it'll ever grow to the level required to bootstrap GCC.</span></div><div class="line" id="124544"><span class="nick" style="color:#6d2462"><a href="#124544" label="[12:45:44]">&lt;sbp&gt;</a></span><span class="message">okay, but you'd written that directly in assembly</span></div><div class="line" id="124558"><span class="nick" style="color:#6d2462"><a href="#124558" label="[12:45:58]">&lt;sbp&gt;</a></span><span class="message">I was thinking rather that you'd use a small C compiler on itself</span></div><div class="line" id="124603"><span class="nick" style="color:#6d2462"><a href="#124603" label="[12:46:03]">&lt;sbp&gt;</a></span><span class="message">then disassemble the binary</span></div><div class="line" id="124612"><span class="nick" style="color:#6d2462"><a href="#124612" label="[12:46:12]">&lt;sbp&gt;</a></span><span class="message">and then audit the disassembled binary against the small C compiler source</span></div><div class="line" id="124626"><span class="nick" style="color:#234e69"><a href="#124626" label="[12:46:26]">&lt;OriansJ`&gt;</a></span><span class="message">sbp: why bother?</span></div><div class="line" id="124635"><span class="nick" style="color:#6d2462"><a href="#124635" label="[12:46:35]">&lt;sbp&gt;</a></span><span class="message">wouldn't it be easier?</span></div><div class="line" id="124649"><span class="nick" style="color:#234e69"><a href="#124649" label="[12:46:49]">&lt;OriansJ`&gt;</a></span><span class="message">we already used our hand written C compiler to bootstrap a simple cross-platform C compiler <a rel="nofollow" href="https://github.com/oriansj/M2-Planet">https://github.com/oriansj/M2-Planet</a> </span></div><div class="line" id="124708"><span class="nick" style="color:#6d2462"><a href="#124708" label="[12:47:08]">&lt;sbp&gt;</a></span><span class="message">the benefit is that you wouldn't have to write the assembly, only audit it</span></div><div class="line" id="124712"><span class="nick" style="color:#234e69"><a href="#124712" label="[12:47:12]">&lt;OriansJ`&gt;</a></span><span class="message">which is written in the C subset our assembly C compiler provides</span></div><div class="line" id="124727"><span class="nick" style="color:#234e69"><a href="#124727" label="[12:47:27]">&lt;OriansJ`&gt;</a></span><span class="message">sbp: writing assembly is fun</span></div><div class="line" id="124805"><span class="nick" style="color:#6d2462"><a href="#124805" label="[12:48:05]">&lt;sbp&gt;</a></span><span class="message">I agree. I was just thinking about speeding development</span></div><div class="line" id="124815"><span class="nick" style="color:#6d2462"><a href="#124815" label="[12:48:15]">&lt;sbp&gt;</a></span><span class="message">but it does seem from Current%20bootstrap%20map.pdf that you're very nearly done now</span></div><div class="line" id="124823"><span class="nick" style="color:#6d2462"><a href="#124823" label="[12:48:23]">&lt;sbp&gt;</a></span><span class="message">there are only a few red paths</span></div><div class="line" id="124902"><span class="nick" style="color:#234e69"><a href="#124902" label="[12:49:02]">&lt;OriansJ`&gt;</a></span><span class="message">sbp: essentially finishing slow-utils in Scheme and mes-m2 in the C subset are basically the last steps</span></div><div class="line" id="124932"><span class="nick" style="color:#234e69"><a href="#124932" label="[12:49:32]">&lt;OriansJ`&gt;</a></span><span class="message">all that really remains is boring, slow work in high level languages</span></div><div class="line" id="124951"><span class="nick" style="color:#6d2462"><a href="#124951" label="[12:49:51]">&lt;sbp&gt;</a></span><span class="message">which of those two are you working on? both?</span></div><div class="line" id="124955"><span class="nick" style="color:#6d2462"><a href="#124955" label="[12:49:55]">&lt;sbp&gt;</a></span><span class="message">I see <a rel="nofollow" href="https://github.com/oriansj/mes-m2">https://github.com/oriansj/mes-m2</a>  was last committed to in March</span></div><div class="line" id="125013"><span class="nick" style="color:#6d2462"><a href="#125013" label="[12:50:13]">&lt;sbp&gt;</a></span><span class="message">and <a rel="nofollow" href="https://github.com/oriansj/slow-utils">https://github.com/oriansj/slow-utils</a>  in January</span></div><div class="line" id="125035"><span class="nick" style="color:#234e69"><a href="#125035" label="[12:50:35]">&lt;OriansJ`&gt;</a></span><span class="message">my 3 month old son</span></div><div class="line" id="125035"><span class="nick" style="color:#6d2462"><a href="#125035" label="[12:50:35]">&lt;sbp&gt;</a></span><span class="message">hehe, aww</span></div><div class="line" id="125035"><span class="nick" style="color:#6d2462"><a href="#125035" label="[12:50:35]">&lt;sbp&gt;</a></span><span class="message">congrats!</span></div><div class="line" id="125220"><span class="nick" style="color:#6d2462"><a href="#125220" label="[12:52:20]">&lt;sbp&gt;</a></span><span class="message">apart from janneke, are there any other primary developers? I don't see much in the way of contributions from people who aren't you, which is surprising for such an excellent and important project. I'm also surprised at the comments in <a rel="nofollow" href="https://guix.gnu.org/blog/2019/guix-reduces-bootstrap-seed-by-50/">https://guix.gnu.org/blog/2019/guix-reduces-bootstrap-seed-by-50/</a>  about needing to push other GNU project people into supporting this</span></div><div class="line" id="125248"><span class="nick" style="color:#6d2462"><a href="#125248" label="[12:52:48]">&lt;sbp&gt;</a></span><span class="message">bootstrapping and reproducible builds are Step Zero in my mind</span></div><div class="line" id="125621"><span class="nick" style="color:#6d2462"><a href="#125621" label="[12:56:21]">&lt;sbp&gt;</a></span><span class="message">ah, I see you mentioned this yourself earlier today. <a rel="nofollow" href="http://logs.guix.gnu.org/bootstrappable/2020-06-16.log#021152">http://logs.guix.gnu.org/bootstrappable/2020-06-16.log#021152</a> </span></div><div class="line" id="125839"><span class="nick" style="color:#234e69"><a href="#125839" label="[12:58:39]">&lt;OriansJ`&gt;</a></span><span class="message">sbp: only a few people actively contribute as bootstrapping requires hard work and actual ability to program.</span></div><div class="line" id="125844"><span class="nick" style="color:#6d2462"><a href="#125844" label="[12:58:44]">&lt;sbp&gt;</a></span><span class="message">you mentioned nobody bootstrapping Haskell. I saw <a rel="nofollow" href="https://elephly.net/posts/2017-01-09-bootstrapping-haskell-part-1.html">https://elephly.net/posts/2017-01-09-bootstrapping-haskell-part-1.html</a>  a while ago, and I assume you've also seen it - no doubt you meant nobody is trying to make Haskell (GHC) bootstrappable as a finished, repeatable toolchain</span></div><div class="line" id="130135"><span class="nick" style="color:#234e69"><a href="#130135" label="[13:01:35]">&lt;OriansJ`&gt;</a></span><span class="message">well the person behind that post is rekado and after that he focused on getting java bootstrapped</span></div><div class="line" id="130156"><span class="nick" style="color:#6d2462"><a href="#130156" label="[13:01:56]">&lt;sbp&gt;</a></span><span class="message">ha. didn't know that</span></div><div class="line" id="130314"><span class="nick" style="color:#234e69"><a href="#130314" label="[13:03:14]">&lt;OriansJ`&gt;</a></span><span class="message">Things like bootstrapping Rust, Go and javascript end up being higher priorities than Haskell because they are more commonly used in software</span></div><div class="line" id="130435"><span class="nick" style="color:#234e69"><a href="#130435" label="[13:04:35]">&lt;OriansJ`&gt;</a></span><span class="message">some of it is just untangling the build chain for thousands of packages</span></div><div class="line" id="130504"><span class="nick" style="color:#234e69"><a href="#130504" label="[13:05:04]">&lt;OriansJ`&gt;</a></span><span class="message">far from a fun or easy job but absolutely essential</span></div><div class="line" id="130611"><span class="nick" style="color:#6c3d55"><a href="#130611" label="[13:06:11]">&lt;janneke&gt;</a></span><span class="message">sbp: samplet has written more than half of gash, dannym is writing the arm port of mes</span></div><div class="line" id="130647"><span class="nick" style="color:#6c3d55"><a href="#130647" label="[13:06:47]">&lt;janneke&gt;</a></span><span class="message">fwe are still reaching out, it needs some time, we need others to help mature this</span></div><div class="line" id="130655"><span class="nick" style="color:#234e69"><a href="#130655" label="[13:06:55]">&lt;OriansJ`&gt;</a></span><span class="message">janneke and I just kinda lucked into the more impressive looking pieces where as the guix package work is far larger and in someways more important</span></div><div class="line" id="130745"><span class="nick" style="color:#6c3d55"><a href="#130745" label="[13:07:45]">&lt;janneke&gt;</a></span><span class="message">yeah</span></div><div class="line" id="130748"><span class="nick" style="color:#d9d9d9"><a href="#130748" label="[13:07:48]">*</a></span><span class="message">janneke needs to go afk for a bit!</span></div><div class="line" id="130800"><span class="nick" style="color:#6d2462"><a href="#130800" label="[13:08:00]">&lt;sbp&gt;</a></span><span class="message">thanks for the info, janneke!</span></div><div class="line" id="130824"><span class="nick" style="color:#6d2462"><a href="#130824" label="[13:08:24]">&lt;sbp&gt;</a></span><span class="message">I wonder if it'd be possible to bring some of the Guile devs in to help at least?</span></div><div class="line" id="130845"><span class="nick" style="color:#6d2462"><a href="#130845" label="[13:08:45]">&lt;sbp&gt;</a></span><span class="message">this seems exactly the sort of thing Wingo would be interested in helping with</span></div><div class="line" id="130902"><span class="nick" style="color:#6d2462"><a href="#130902" label="[13:09:02]">&lt;sbp&gt;</a></span><span class="message">even if just on his end, making Guile more amenable to bootstrapping</span></div><div class="line" id="130930"><span class="nick" style="color:#6d2462"><a href="#130930" label="[13:09:30]">&lt;sbp&gt;</a></span><span class="message">I see civodul is here, so I'm sure the links exist already and you've already tried</span></div><div class="line" id="131014"><span class="nick" style="color:#234e69"><a href="#131014" label="[13:10:14]">&lt;OriansJ`&gt;</a></span><span class="message">sbp: some problems just seem so big people just give up</span></div><div class="line" id="131046"><span class="nick" style="color:#6d2462"><a href="#131046" label="[13:10:46]">&lt;sbp&gt;</a></span><span class="message">makes sense. I'm very guilty of that myself</span></div><div class="line" id="131101"><span class="nick" style="color:#234e69"><a href="#131101" label="[13:11:01]">&lt;OriansJ`&gt;</a></span><span class="message">It takes alot to keep hammering on a problem for years and years with no external support and lots of people bitching along the way</span></div><div class="line" id="131137"><span class="nick" style="color:#234e69"><a href="#131137" label="[13:11:37]">&lt;OriansJ`&gt;</a></span><span class="message">I mean we have had people leave over minor differences in goal, arguments of where to host the master, etc</span></div><div class="line" id="131204"><span class="nick" style="color:#6d2462"><a href="#131204" label="[13:12:04]">&lt;sbp&gt;</a></span><span class="message">ugh, heh. I assume the hosting the master argument was about Savannah vs GitHub</span></div><div class="line" id="131208"><span class="nick" style="color:#6d2462"><a href="#131208" label="[13:12:08]">&lt;sbp&gt;</a></span><span class="message">I've had that argument myself before</span></div><div class="line" id="131229"><span class="nick" style="color:#234e69"><a href="#131229" label="[13:12:29]">&lt;OriansJ`&gt;</a></span><span class="message">yep and then they left</span></div><div class="line" id="131315"><span class="nick" style="color:#234e69"><a href="#131315" label="[13:13:15]">&lt;OriansJ`&gt;</a></span><span class="message">I honestly don't care, I just need people to help. SO I don't end up responsible for everything.</span></div><div class="line" id="131331"><span class="nick" style="color:#234e69"><a href="#131331" label="[13:13:31]">&lt;OriansJ`&gt;</a></span><span class="message">*be back later*</span></div><div class="line" id="131347"><span class="nick" style="color:#6d2462"><a href="#131347" label="[13:13:47]">&lt;sbp&gt;</a></span><span class="message">thanks very much for the chat, OriansJ`</span></div><div class="line" id="134811"><span class="nick" style="color:#bc80bd"><a href="#134811" label="[13:48:11]">&lt;civodul&gt;</a></span><span class="message">hi!</span></div><div class="line" id="134833"><span class="nick" style="color:#bc80bd"><a href="#134833" label="[13:48:33]">&lt;civodul&gt;</a></span><span class="message">Guile is actually &quot;boostrapped&quot; in the sense that it has an interpreter in C that is used when building the compile</span></div><div class="line" id="134838"><span class="nick" style="color:#bc80bd"><a href="#134838" label="[13:48:38]">&lt;civodul&gt;</a></span><span class="message">*compiler</span></div><div class="line" id="134853"><span class="nick" style="color:#bc80bd"><a href="#134853" label="[13:48:53]">&lt;civodul&gt;</a></span><span class="message">*bootstrapped</span></div><div class="line" id="134905"><span class="nick" style="color:#d9d9d9"><a href="#134905" label="[13:49:05]">*</a></span><span class="message">civodul must be using a broken keyboard</span></div><div class="line" id="135103"><span class="nick" style="color:#6d2462"><a href="#135103" label="[13:51:03]">&lt;sbp&gt;</a></span><span class="message">civodul: do Wingo and the other Guile devs know about OriansJ's work?</span></div><div class="line" id="135131"><span class="nick" style="color:#6d2462"><a href="#135131" label="[13:51:31]">&lt;sbp&gt;</a></span><span class="message">greetings by the way, long-time admirer of your work</span></div><div class="line" id="135549"><span class="nick" style="color:#bc80bd"><a href="#135549" label="[13:55:49]">&lt;civodul&gt;</a></span><span class="message">i can't speak for wingo, but we've definitely discussed bootstrapping a number of times</span></div><div class="line" id="135610"><span class="nick" style="color:#bc80bd"><a href="#135610" label="[13:56:10]">&lt;civodul&gt;</a></span><span class="message">Guile was &quot;bootstrappable&quot; from the start (2.0)</span></div><div class="line" id="135614"><span class="nick" style="color:#bc80bd"><a href="#135614" label="[13:56:14]">&lt;civodul&gt;</a></span><span class="message">except for psyntax</span></div><div class="line" id="135622"><span class="nick" style="color:#bc80bd"><a href="#135622" label="[13:56:22]">&lt;civodul&gt;</a></span><span class="message">janneke knows that very well :-)</span></div><div class="line" id="135703"><span class="nick" style="color:#bc80bd"><a href="#135703" label="[13:57:03]">&lt;civodul&gt;</a></span><span class="message">rekado used Guile as an example when first writing <a rel="nofollow" href="https://bootstrappable.org/">https://bootstrappable.org/</a> </span></div><div class="line" id="135728"><span class="nick" style="color:#bc80bd"><a href="#135728" label="[13:57:28]">&lt;civodul&gt;</a></span><span class="message"> <a rel="nofollow" href="https://bootstrappable.org/best-practises.html">https://bootstrappable.org/best-practises.html</a> </span></div><div class="line" id="135821"><span class="nick" style="color:#bc80bd"><a href="#135821" label="[13:58:21]">&lt;civodul&gt;</a></span><span class="message">someone™ should update the web site to mention the latest achievements</span></div><div class="line" id="140152"><span class="nick" style="color:#6d2462"><a href="#140152" label="[14:01:52]">&lt;sbp&gt;</a></span><span class="message">psyntax was what made me wonder (OriansJ mentioned it earlier)</span></div><div class="line" id="142030"><span class="nick" style="color:#3c5b35"><a href="#142030" label="[14:20:30]">&lt;jelle&gt;</a></span><span class="message">janneke: nice blogpost <a rel="nofollow" href="https://guix.gnu.org/blog/2020/guix-further-reduces-bootstrap-seed-to-25/">https://guix.gnu.org/blog/2020/guix-further-reduces-bootstrap-seed-to-25/</a>  :)</span></div><div class="line" id="151510"><span class="nick" style="color:#af8d2f"><a href="#151510" label="[15:15:10]">&lt;markjenkinsznc&gt;</a></span><span class="message">OriansJ Re: &quot;Thus far I am the only person who is working on the scheme bootstrapping problem.&quot; True in the important public sense. Just wanted to share that I'm quietly working behind the scenes on a private project which is building up my understanding of scheme and tackling an experimental idea which may result in code that can bridge mes and mes-m2 as it stands and also provide more test cases for mes-m2</span></div><div class="line" id="151519"><span class="nick" style="color:#af8d2f"><a href="#151519" label="[15:15:19]">&lt;markjenkinsznc&gt;</a></span><span class="message">Could also be a false path that better educates me along the way.</span></div><div class="line" id="151936"><span class="nick" style="color:#af8d2f"><a href="#151936" label="[15:19:36]">&lt;markjenkinsznc&gt;</a></span><span class="message">It's clear people have had enough of ideas and no working code, so I'll only take this public and go into collaberation mode if and when I have a prototype written in a high level, non-bootstrapped language that illustrates viability. Then I'll rewrite in a bootstrapped language. I recognize that supporting the different kinds of macros used by mescc, especially syntax case is the hardest part of the problem here so I'm going to make sure I've</span></div><div class="line" id="151937"><span class="nick" style="color:#af8d2f"><a href="#151937" label="[15:19:37]">&lt;markjenkinsznc&gt;</a></span><span class="message">tackled that before going public</span></div><div class="line" id="152221"><span class="nick" style="color:#af8d2f"><a href="#152221" label="[15:22:21]">&lt;markjenkinsznc&gt;</a></span><span class="message">Worked in two surges so far, 26 commits in February and currently ongoing 32 master commits (+ squashed wip branches) since start of May. &quot;just a hobby, won't be big and professional like gnu&quot;</span></div><div class="line" id="153000"><span class="nick" style="color:#389600"><a href="#153000" label="[15:30:00]">&lt;dannym&gt;</a></span><span class="message">janneke: (abs -2147483648) in ./bin/mes results in -2147483648.  No :P</span></div><div class="line" id="175328"><span class="nick" style="color:#6c3d55"><a href="#175328" label="[17:53:28]">&lt;janneke&gt;</a></span><span class="message">dannym: oops :-)</span></div><div class="line" id="175331"><span class="nick" style="color:#6c3d55"><a href="#175331" label="[17:53:31]">&lt;janneke&gt;</a></span><span class="message">jelle: thanks!</span></div><div class="line" id="175708"><span class="nick" style="color:#8dd3c7"><a href="#175708" label="[17:57:08]">&lt;xentrac&gt;</a></span><span class="message">markjenkinsznc: awesome!</span></div><div class="line" id="181344"><span class="nick" style="color:#389600"><a href="#181344" label="[18:13:44]">&lt;dannym&gt;</a></span><span class="message">janneke: I guess it's ok to have weird special cases like this if we don't have arbitrary-precision integers implemented (maybe a waste of time), but we could have math.c minus check at least for this awful case.</span></div><div class="line" id="181401"><span class="nick" style="color:#389600"><a href="#181401" label="[18:14:01]">&lt;dannym&gt;</a></span><span class="message">janneke: I don't know of a portable way to check the general cases for overflow in C, though</span></div><div class="line" id="181559"><span class="nick" style="color:#389600"><a href="#181559" label="[18:15:59]">&lt;dannym&gt;</a></span><span class="message">janneke: Worse, C does not specify what happens when a signed long overflows (i.e. it assumes that that cannot be intentional and optimizes away ruthlessly all your branches where it would have to happen)</span></div><div class="line" id="181716"><span class="nick" style="color:#6c3d55"><a href="#181716" label="[18:17:16]">&lt;janneke&gt;</a></span><span class="message">dannym: i agree; not handling this special/interesting case is asking for trouble</span></div><div class="line" id="181812"><span class="nick" style="color:#6c3d55"><a href="#181812" label="[18:18:12]">&lt;janneke&gt;</a></span><span class="message">it's a surprising bug, in a way -- meaning that it surprises me that we're able to build a functional software stack with this bug in place</span></div><div class="line" id="181818"><span class="nick" style="color:#389600"><a href="#181818" label="[18:18:18]">&lt;dannym&gt;</a></span><span class="message">janneke: (Just spent almost a day finding a bug in the ARM backend that basically was because the backend assumed that (abs x) &gt;= 0)</span></div><div class="line" id="181828"><span class="nick" style="color:#6c3d55"><a href="#181828" label="[18:18:28]">&lt;janneke&gt;</a></span><span class="message">right!</span></div><div class="line" id="181846"><span class="nick" style="color:#6c3d55"><a href="#181846" label="[18:18:46]">&lt;janneke&gt;</a></span><span class="message">that doesn't surprise me at all, and that's terrible!</span></div><div class="line" id="182021"><span class="nick" style="color:#389600"><a href="#182021" label="[18:20:21]">&lt;dannym&gt;</a></span><span class="message">Basically I'd suggest this stop-gap measure:</span></div><div class="line" id="182023"><span class="nick" style="color:#389600"><a href="#182023" label="[18:20:23]">&lt;dannym&gt;</a></span><span class="message">SCM</span></div><div class="line" id="182023"><span class="nick" style="color:#389600"><a href="#182023" label="[18:20:23]">&lt;dannym&gt;</a></span><span class="message">minus (SCM x)                   ///((name . &quot;-&quot;) (arity . n))</span></div><div class="line" id="182023"><span class="nick" style="color:#389600"><a href="#182023" label="[18:20:23]">&lt;dannym&gt;</a></span><span class="message">{</span></div><div class="line" id="182023"><span class="nick" style="color:#389600"><a href="#182023" label="[18:20:23]">&lt;dannym&gt;</a></span><span class="message">  assert_number (&quot;minus&quot;, CAR (x));</span></div><div class="line" id="182023"><span class="nick" style="color:#389600"><a href="#182023" label="[18:20:23]">&lt;dannym&gt;</a></span><span class="message">  long n = VALUE (CAR (x));</span></div><div class="line" id="182024"><span class="nick" style="color:#389600"><a href="#182024" label="[18:20:24]">&lt;dannym&gt;</a></span><span class="message">  x = cdr (x);</span></div><div class="line" id="182026"><span class="nick" style="color:#389600"><a href="#182026" label="[18:20:26]">&lt;dannym&gt;</a></span><span class="message">  if (x == cell_nil)</span></div><div class="line" id="182028"><span class="nick" style="color:#389600"><a href="#182028" label="[18:20:28]">&lt;dannym&gt;</a></span><span class="message">    {</span></div><div class="line" id="182030"><span class="nick" style="color:#389600"><a href="#182030" label="[18:20:30]">&lt;dannym&gt;</a></span><span class="message">      if (n == LONG_MIN)</span></div><div class="line" id="182032"><span class="nick" style="color:#389600"><a href="#182032" label="[18:20:32]">&lt;dannym&gt;</a></span><span class="message">        error (cstring_to_symbol (&quot;overflow&quot;), n);</span></div><div class="line" id="182034"><span class="nick" style="color:#389600"><a href="#182034" label="[18:20:34]">&lt;dannym&gt;</a></span><span class="message">      else</span></div><div class="line" id="182036"><span class="nick" style="color:#389600"><a href="#182036" label="[18:20:36]">&lt;dannym&gt;</a></span><span class="message">        n = -n;</span></div><div class="line" id="182038"><span class="nick" style="color:#389600"><a href="#182038" label="[18:20:38]">&lt;dannym&gt;</a></span><span class="message">    }</span></div><div class="line" id="182042"><span class="nick" style="color:#389600"><a href="#182042" label="[18:20:42]">&lt;dannym&gt;</a></span><span class="message">  else while (x != cell_nil)</span></div><div class="line" id="182044"><span class="nick" style="color:#389600"><a href="#182044" label="[18:20:44]">&lt;dannym&gt;</a></span><span class="message">    {</span></div><div class="line" id="182046"><span class="nick" style="color:#389600"><a href="#182046" label="[18:20:46]">&lt;dannym&gt;</a></span><span class="message">      assert_number (&quot;minus&quot;, CAR (x));</span></div><div class="line" id="182048"><span class="nick" style="color:#389600"><a href="#182048" label="[18:20:48]">&lt;dannym&gt;</a></span><span class="message">      n -= VALUE (car (x));</span></div><div class="line" id="182050"><span class="nick" style="color:#389600"><a href="#182050" label="[18:20:50]">&lt;dannym&gt;</a></span><span class="message">      x = cdr (x);</span></div><div class="line" id="182052"><span class="nick" style="color:#389600"><a href="#182052" label="[18:20:52]">&lt;dannym&gt;</a></span><span class="message">    }</span></div><div class="line" id="182054"><span class="nick" style="color:#389600"><a href="#182054" label="[18:20:54]">&lt;dannym&gt;</a></span><span class="message">  return MAKE_NUMBER (n);</span></div><div class="line" id="182056"><span class="nick" style="color:#389600"><a href="#182056" label="[18:20:56]">&lt;dannym&gt;</a></span><span class="message">}</span></div><div class="line" id="182114"><span class="nick" style="color:#389600"><a href="#182114" label="[18:21:14]">&lt;dannym&gt;</a></span><span class="message">That doesn't catch (- 0 INT_MIN) though (etc).</span></div><div class="line" id="182846"><span class="nick" style="color:#8dd3c7"><a href="#182846" label="[18:28:46]">&lt;xentrac&gt;</a></span><span class="message">well, some C implementations optimize it away ruthlessly, yes</span></div><div class="line" id="190914"><span class="nick" style="color:#6c3d55"><a href="#190914" label="[19:09:14]">&lt;janneke&gt;</a></span><span class="message">dannym: hmm...that's...</span></div><div class="line" id="190928"><span class="nick" style="color:#6c3d55"><a href="#190928" label="[19:09:28]">&lt;janneke&gt;</a></span><span class="message">dannym: can't we do it from scheme, in define abs?</span></div><div class="line" id="190944"><span class="nick" style="color:#6c3d55"><a href="#190944" label="[19:09:44]">&lt;janneke&gt;</a></span><span class="message">oh, but that won't solve (- LONG_MIN) ... right</span></div><div class="line" id="191020"><span class="nick" style="color:#6c3d55"><a href="#191020" label="[19:10:20]">&lt;janneke&gt;</a></span><span class="message">hmm</span></div><div class="line" id="191207"><span class="nick" style="color:#6c3d55"><a href="#191207" label="[19:12:07]">&lt;janneke&gt;</a></span><span class="message">okay, if you think this is better than (if (= x LONG_MIN) ... ...) in (define (abs), then let's do it</span></div><div class="line" id="193358"><span class="nick" style="color:#389600"><a href="#193358" label="[19:33:58]">&lt;dannym&gt;</a></span><span class="message">janneke: I've thought about putting it in abs, might be better; otherwise minus is kinda pretentious in overflow checking</span></div><div class="line" id="193417"><span class="nick" style="color:#389600"><a href="#193417" label="[19:34:17]">&lt;dannym&gt;</a></span><span class="message">would be, with the above</span></div><div class="line" id="193456"><span class="nick">***</span><span class="message notice">tazjin is now known as JSFzKHVpbnQ4PTEx</span></div><div class="line" id="193907"><span class="nick">***</span><span class="message notice">JSFzKHVpbnQ4PTEx is now known as tazjin</span></div><div class="line" id="194103"><span class="nick" style="color:#6c3d55"><a href="#194103" label="[19:41:03]">&lt;janneke&gt;</a></span><span class="message">dannym: okay</span></div><div class="line" id="194615"><span class="nick" style="color:#389600"><a href="#194615" label="[19:46:15]">&lt;dannym&gt;</a></span><span class="message">janneke: Another thing, can I use define-syntax in the backend?</span></div><div class="line" id="194635"><span class="nick" style="color:#389600"><a href="#194635" label="[19:46:35]">&lt;dannym&gt;</a></span><span class="message">I've tried:</span></div><div class="line" id="194637"><span class="nick" style="color:#389600"><a href="#194637" label="[19:46:37]">&lt;dannym&gt;</a></span><span class="message">;; If 0 &lt;= exp &lt; #x100, use positive-body.</span></div><div class="line" id="194637"><span class="nick" style="color:#389600"><a href="#194637" label="[19:46:37]">&lt;dannym&gt;</a></span><span class="message">;; If #x-100 &lt; exp &lt; 0, use negative-body.</span></div><div class="line" id="194637"><span class="nick" style="color:#389600"><a href="#194637" label="[19:46:37]">&lt;dannym&gt;</a></span><span class="message">;; Otherwise, use general-body.</span></div><div class="line" id="194637"><span class="nick" style="color:#389600"><a href="#194637" label="[19:46:37]">&lt;dannym&gt;</a></span><span class="message">(define-syntax optimize-zero-page</span></div><div class="line" id="194637"><span class="nick" style="color:#389600"><a href="#194637" label="[19:46:37]">&lt;dannym&gt;</a></span><span class="message"> (syntax-rules ()</span></div><div class="line" id="194638"><span class="nick" style="color:#389600"><a href="#194638" label="[19:46:38]">&lt;dannym&gt;</a></span><span class="message">   ((optimize-zero-page exp positive-body negative-body general-body)</span></div><div class="line" id="194642"><span class="nick" style="color:#389600"><a href="#194642" label="[19:46:42]">&lt;dannym&gt;</a></span><span class="message">    (let ((temp exp))</span></div><div class="line" id="194644"><span class="nick" style="color:#389600"><a href="#194644" label="[19:46:44]">&lt;dannym&gt;</a></span><span class="message">      (if (&gt;= temp 0)</span></div><div class="line" id="194646"><span class="nick" style="color:#389600"><a href="#194646" label="[19:46:46]">&lt;dannym&gt;</a></span><span class="message">          (if (&lt; temp 256)</span></div><div class="line" id="194648"><span class="nick" style="color:#389600"><a href="#194648" label="[19:46:48]">&lt;dannym&gt;</a></span><span class="message">              positive-body</span></div><div class="line" id="194650"><span class="nick" style="color:#389600"><a href="#194650" label="[19:46:50]">&lt;dannym&gt;</a></span><span class="message">              general-body)</span></div><div class="line" id="194652"><span class="nick" style="color:#389600"><a href="#194652" label="[19:46:52]">&lt;dannym&gt;</a></span><span class="message">          (if (&gt; temp -256)</span></div><div class="line" id="194654"><span class="nick" style="color:#389600"><a href="#194654" label="[19:46:54]">&lt;dannym&gt;</a></span><span class="message">              negative-body</span></div><div class="line" id="194656"><span class="nick" style="color:#389600"><a href="#194656" label="[19:46:56]">&lt;dannym&gt;</a></span><span class="message">              general-body))))))</span></div><div class="line" id="194658"><span class="nick" style="color:#389600"><a href="#194658" label="[19:46:58]">&lt;dannym&gt;</a></span><span class="message">And then for example</span></div><div class="line" id="194700"><span class="nick" style="color:#389600"><a href="#194700" label="[19:47:00]">&lt;dannym&gt;</a></span><span class="message">(define (immediate-&gt;r0 v)</span></div><div class="line" id="194702"><span class="nick" style="color:#389600"><a href="#194702" label="[19:47:02]">&lt;dannym&gt;</a></span><span class="message">  (optimize-zero-page v</span></div><div class="line" id="194704"><span class="nick" style="color:#389600"><a href="#194704" label="[19:47:04]">&lt;dannym&gt;</a></span><span class="message">   `(((#:immediate1 ,v) &quot;mov____$i8,%r0&quot;))</span></div><div class="line" id="194706"><span class="nick" style="color:#389600"><a href="#194706" label="[19:47:06]">&lt;dannym&gt;</a></span><span class="message">   `(((#:immediate1 ,(- -1 v)) &quot;mvn____%r0,$i8&quot;))</span></div><div class="line" id="194708"><span class="nick" style="color:#389600"><a href="#194708" label="[19:47:08]">&lt;dannym&gt;</a></span><span class="message">   `((&quot;mov____$i32,%r0&quot; (#:immediate ,v))))))</span></div><div class="line" id="194712"><span class="nick" style="color:#389600"><a href="#194712" label="[19:47:12]">&lt;dannym&gt;</a></span><span class="message">But &quot;define-syntax&quot; is undefined.</span></div><div class="line" id="194753"><span class="nick" style="color:#d9d9d9"><a href="#194753" label="[19:47:53]">*</a></span><span class="message">xentrac is undefined</span></div><div class="line" id="194802"><span class="nick" style="color:#8dd3c7"><a href="#194802" label="[19:48:02]">&lt;xentrac&gt;</a></span><span class="message">janneke_: did you see dannym's code for you above?</span></div><div class="line" id="200926"><span class="nick" style="color:#8dd3c7"><a href="#200926" label="[20:09:26]">&lt;janneke_&gt;</a></span><span class="message">xentrac: yes, thanks</span></div><div class="line" id="200942"><span class="nick" style="color:#8dd3c7"><a href="#200942" label="[20:09:42]">&lt;janneke_&gt;</a></span><span class="message">oh wait, maybe not</span></div><div class="line" id="200951"><span class="nick" style="color:#8dd3c7"><a href="#200951" label="[20:09:51]">&lt;janneke_&gt;</a></span><span class="message">i was away for a minute or two</span></div><div class="line" id="200954"><span class="nick">***</span><span class="message notice">janneke_ is now known as janneke</span></div><div class="line" id="201107"><span class="nick" style="color:#d9d9d9"><a href="#201107" label="[20:11:07]">*</a></span><span class="message">janneke checks the logs</span></div><div class="line" id="201627"><span class="nick" style="color:#6c3d55"><a href="#201627" label="[20:16:27]">&lt;janneke&gt;</a></span><span class="message">dannym: define-syntax...hmm</span></div><div class="line" id="201656"><span class="nick" style="color:#6c3d55"><a href="#201656" label="[20:16:56]">&lt;janneke&gt;</a></span><span class="message">we're using mes/module/mes/pmatch.scm that's defined with syntax-rules</span></div><div class="line" id="201711"><span class="nick" style="color:#6c3d55"><a href="#201711" label="[20:17:11]">&lt;janneke&gt;</a></span><span class="message">(we don't have syntax-case)</span></div><div class="line" id="201729"><span class="nick" style="color:#6c3d55"><a href="#201729" label="[20:17:29]">&lt;janneke&gt;</a></span><span class="message">but our syntax-rules is not 100% correct -- no idea what the problem is</span></div><div class="line" id="201745"><span class="nick" style="color:#6c3d55"><a href="#201745" label="[20:17:45]">&lt;janneke&gt;</a></span><span class="message">i've been avoiding it and use define-macro whenever possible</span></div><div class="line" id="201818"><span class="nick" style="color:#389600"><a href="#201818" label="[20:18:18]">&lt;dannym&gt;</a></span><span class="message">janneke: Yeah, I've also thought about define-macro, but it could evaluate exp three times</span></div><div class="line" id="201833"><span class="nick" style="color:#389600"><a href="#201833" label="[20:18:33]">&lt;dannym&gt;</a></span><span class="message">janneke: In the cases I use it now that doesn't matter because exp is just the name of a local variable</span></div><div class="line" id="201925"><span class="nick" style="color:#389600"><a href="#201925" label="[20:19:25]">&lt;dannym&gt;</a></span><span class="message">But that could change</span></div><div class="line" id="201935"><span class="nick" style="color:#389600"><a href="#201935" label="[20:19:35]">&lt;dannym&gt;</a></span><span class="message">And future-me would hate me :)</span></div><div class="line" id="201952"><span class="nick" style="color:#6c3d55"><a href="#201952" label="[20:19:52]">&lt;janneke&gt;</a></span><span class="message">maybe i've been over-cautious</span></div><div class="line" id="201952"><span class="nick" style="color:#389600"><a href="#201952" label="[20:19:52]">&lt;dannym&gt;</a></span><span class="message">;; If 0 &lt;= exp &lt; #x100, use positive-body.</span></div><div class="line" id="201952"><span class="nick" style="color:#389600"><a href="#201952" label="[20:19:52]">&lt;dannym&gt;</a></span><span class="message">;; If #x-100 &lt;= exp &lt; 0, use negative-body.</span></div><div class="line" id="201952"><span class="nick" style="color:#389600"><a href="#201952" label="[20:19:52]">&lt;dannym&gt;</a></span><span class="message">;; Otherwise, use general-body.</span></div><div class="line" id="201952"><span class="nick" style="color:#389600"><a href="#201952" label="[20:19:52]">&lt;dannym&gt;</a></span><span class="message">(define-macro (optimize-zero-page exp</span></div><div class="line" id="201952"><span class="nick" style="color:#389600"><a href="#201952" label="[20:19:52]">&lt;dannym&gt;</a></span><span class="message">                                  positive-body negative-body general-body)</span></div><div class="line" id="201953"><span class="nick" style="color:#389600"><a href="#201953" label="[20:19:53]">&lt;dannym&gt;</a></span><span class="message">  (list 'if ('&lt; exp 0)</span></div><div class="line" id="201955"><span class="nick" style="color:#389600"><a href="#201955" label="[20:19:55]">&lt;dannym&gt;</a></span><span class="message">            (list 'if ('&gt;= exp #x-100)</span></div><div class="line" id="201957"><span class="nick" style="color:#389600"><a href="#201957" label="[20:19:57]">&lt;dannym&gt;</a></span><span class="message">                      negative-body</span></div><div class="line" id="201959"><span class="nick" style="color:#389600"><a href="#201959" label="[20:19:59]">&lt;dannym&gt;</a></span><span class="message">                      general-body)</span></div><div class="line" id="202001"><span class="nick" style="color:#389600"><a href="#202001" label="[20:20:01]">&lt;dannym&gt;</a></span><span class="message">            (list 'if ('&lt; exp #x100)</span></div><div class="line" id="202003"><span class="nick" style="color:#389600"><a href="#202003" label="[20:20:03]">&lt;dannym&gt;</a></span><span class="message">                      positive-body</span></div><div class="line" id="202005"><span class="nick" style="color:#389600"><a href="#202005" label="[20:20:05]">&lt;dannym&gt;</a></span><span class="message">                      general-body)))</span></div><div class="line" id="202007"><span class="nick" style="color:#389600"><a href="#202007" label="[20:20:07]">&lt;dannym&gt;</a></span><span class="message">(optimize-zero-page 2 'one 'two 'three)</span></div><div class="line" id="202009"><span class="nick" style="color:#389600"><a href="#202009" label="[20:20:09]">&lt;dannym&gt;</a></span><span class="message">one</span></div><div class="line" id="202013"><span class="nick" style="color:#389600"><a href="#202013" label="[20:20:13]">&lt;dannym&gt;</a></span><span class="message">does work...</span></div><div class="line" id="202050"><span class="nick" style="color:#6c3d55"><a href="#202050" label="[20:20:50]">&lt;janneke&gt;</a></span><span class="message">yeah...i think that's what i would do</span></div><div class="line" id="202052"><span class="nick" style="color:#389600"><a href="#202052" label="[20:20:52]">&lt;dannym&gt;</a></span><span class="message">mes&gt; (optimize-zero-page (begin (display &quot;\nhaha&quot;) 2) 'one 'two 'three)</span></div><div class="line" id="202052"><span class="nick" style="color:#389600"><a href="#202052" label="[20:20:52]">&lt;dannym&gt;</a></span><span class="message">[sexp=(optimize-zero-page (begin (display</span></div><div class="line" id="202052"><span class="nick" style="color:#389600"><a href="#202052" label="[20:20:52]">&lt;dannym&gt;</a></span><span class="message">haha) 2) (quote one) (quote two) (quote three))]</span></div><div class="line" id="202052"><span class="nick" style="color:#389600"><a href="#202052" label="[20:20:52]">&lt;dannym&gt;</a></span><span class="message">less_pexception:not-a-number:((begin (display</span></div><div class="line" id="202052"><span class="nick" style="color:#389600"><a href="#202052" label="[20:20:52]">&lt;dannym&gt;</a></span><span class="message">haha) 2))</span></div><div class="line" id="202136"><span class="nick" style="color:#6c3d55"><a href="#202136" label="[20:21:36]">&lt;janneke&gt;</a></span><span class="message">great!</span></div><div class="line" id="202225"><span class="nick" style="color:#389600"><a href="#202225" label="[20:22:25]">&lt;dannym&gt;</a></span><span class="message">Not the last part ;)</span></div><div class="line" id="202241"><span class="nick" style="color:#389600"><a href="#202241" label="[20:22:41]">&lt;dannym&gt;</a></span><span class="message">Not that I need that part right now, but still...</span></div><div class="line" id="202402"><span class="nick" style="color:#389600"><a href="#202402" label="[20:24:02]">&lt;dannym&gt;</a></span><span class="message">This does work though:</span></div><div class="line" id="202403"><span class="nick" style="color:#389600"><a href="#202403" label="[20:24:03]">&lt;dannym&gt;</a></span><span class="message">(if (&lt; 5 (begin (display &quot;\nhaha\n&quot;) 3))  'yes 'no)</span></div><div class="line" id="202403"><span class="nick" style="color:#389600"><a href="#202403" label="[20:24:03]">&lt;dannym&gt;</a></span><span class="message">[sexp=(if (&lt; 5 (begin (display</span></div><div class="line" id="202403"><span class="nick" style="color:#389600"><a href="#202403" label="[20:24:03]">&lt;dannym&gt;</a></span><span class="message">haha</span></div><div class="line" id="202403"><span class="nick" style="color:#389600"><a href="#202403" label="[20:24:03]">&lt;dannym&gt;</a></span><span class="message">) 3)) (quote yes) (quote no))]</span></div><div class="line" id="202403"><span class="nick" style="color:#389600"><a href="#202403" label="[20:24:03]">&lt;dannym&gt;</a></span><span class="message">haha</span></div><div class="line" id="202405"><span class="nick" style="color:#389600"><a href="#202405" label="[20:24:05]">&lt;dannym&gt;</a></span><span class="message">$0 = no</span></div><div class="line" id="202829"><span class="nick" style="color:#389600"><a href="#202829" label="[20:28:29]">&lt;dannym&gt;</a></span><span class="message">I've tried (define-macro ... ((lambda (temp-name) (list 'let (list (list temp-name .... )))....) (gensym)) but that reminds me too much of the bad old time back in the day ;)</span></div><div class="line" id="203143"><span class="nick" style="color:#6c3d55"><a href="#203143" label="[20:31:43]">&lt;janneke&gt;</a></span><span class="message">dannym: what about</span></div><div class="line" id="203147"><span class="nick" style="color:#6c3d55"><a href="#203147" label="[20:31:47]">&lt;janneke&gt;</a></span><span class="message">(define-macro (optimize-zero-page exp</span></div><div class="line" id="203148"><span class="nick" style="color:#6c3d55"><a href="#203148" label="[20:31:48]">&lt;janneke&gt;</a></span><span class="message">                                  positive-body negative-body general-body)</span></div><div class="line" id="203148"><span class="nick" style="color:#6c3d55"><a href="#203148" label="[20:31:48]">&lt;janneke&gt;</a></span><span class="message">  `(if (&lt; ,exp 0)</span></div><div class="line" id="203150"><span class="nick" style="color:#6c3d55"><a href="#203150" label="[20:31:50]">&lt;janneke&gt;</a></span><span class="message">       (if (&gt;= ,exp #x-100)</span></div><div class="line" id="203152"><span class="nick" style="color:#6c3d55"><a href="#203152" label="[20:31:52]">&lt;janneke&gt;</a></span><span class="message">           ,negative-body</span></div><div class="line" id="203154"><span class="nick" style="color:#6c3d55"><a href="#203154" label="[20:31:54]">&lt;janneke&gt;</a></span><span class="message">           ,general-body)</span></div><div class="line" id="203156"><span class="nick" style="color:#6c3d55"><a href="#203156" label="[20:31:56]">&lt;janneke&gt;</a></span><span class="message">       (if (&lt; ,exp #x100)</span></div><div class="line" id="203159"><span class="nick" style="color:#6c3d55"><a href="#203159" label="[20:31:59]">&lt;janneke&gt;</a></span><span class="message">             ,positive-body</span></div><div class="line" id="203202"><span class="nick" style="color:#6c3d55"><a href="#203202" label="[20:32:02]">&lt;janneke&gt;</a></span><span class="message">             ,general-body)))</span></div><div class="line" id="203205"><span class="nick" style="color:#6c3d55"><a href="#203205" label="[20:32:05]">&lt;janneke&gt;</a></span><span class="message">(untested)</span></div><div class="line" id="203213"><span class="nick" style="color:#389600"><a href="#203213" label="[20:32:13]">&lt;dannym&gt;</a></span><span class="message">Yeah, more readable that way :)</span></div><div class="line" id="203245"><span class="nick" style="color:#6c3d55"><a href="#203245" label="[20:32:45]">&lt;janneke&gt;</a></span><span class="message">avoiding quasiquote is only necessary during boot</span></div><div class="line" id="203256"><span class="nick" style="color:#6c3d55"><a href="#203256" label="[20:32:56]">&lt;janneke&gt;</a></span><span class="message">*booting mes' scheme modules</span></div><div class="line" id="203407"><span class="nick" style="color:#389600"><a href="#203407" label="[20:34:07]">&lt;dannym&gt;</a></span><span class="message">(define-macro (optimize-zero-page exp</span></div><div class="line" id="203407"><span class="nick" style="color:#389600"><a href="#203407" label="[20:34:07]">&lt;dannym&gt;</a></span><span class="message">                                  positive-body negative-body general-body)</span></div><div class="line" id="203407"><span class="nick" style="color:#389600"><a href="#203407" label="[20:34:07]">&lt;dannym&gt;</a></span><span class="message">  ((lambda (temp-name)</span></div><div class="line" id="203407"><span class="nick" style="color:#389600"><a href="#203407" label="[20:34:07]">&lt;dannym&gt;</a></span><span class="message">   `(let ((,temp-name ,exp))</span></div><div class="line" id="203407"><span class="nick" style="color:#389600"><a href="#203407" label="[20:34:07]">&lt;dannym&gt;</a></span><span class="message">      (if (,&gt;= temp-name ,0)</span></div><div class="line" id="203408"><span class="nick" style="color:#389600"><a href="#203408" label="[20:34:08]">&lt;dannym&gt;</a></span><span class="message">          (if (,&lt; temp-name ,#x100)</span></div><div class="line" id="203412"><span class="nick" style="color:#389600"><a href="#203412" label="[20:34:12]">&lt;dannym&gt;</a></span><span class="message">              positive-body</span></div><div class="line" id="203414"><span class="nick" style="color:#389600"><a href="#203414" label="[20:34:14]">&lt;dannym&gt;</a></span><span class="message">              general-body)</span></div><div class="line" id="203416"><span class="nick" style="color:#389600"><a href="#203416" label="[20:34:16]">&lt;dannym&gt;</a></span><span class="message">          (if (,&gt; temp-name ,#x-100)</span></div><div class="line" id="203418"><span class="nick" style="color:#389600"><a href="#203418" label="[20:34:18]">&lt;dannym&gt;</a></span><span class="message">              negative-body</span></div><div class="line" id="203420"><span class="nick" style="color:#389600"><a href="#203420" label="[20:34:20]">&lt;dannym&gt;</a></span><span class="message">              general-body)))))</span></div><div class="line" id="203422"><span class="nick" style="color:#389600"><a href="#203422" label="[20:34:22]">&lt;dannym&gt;</a></span><span class="message">   (gensym))</span></div><div class="line" id="203424"><span class="nick" style="color:#389600"><a href="#203424" label="[20:34:24]">&lt;dannym&gt;</a></span><span class="message">mes&gt; (optimize-zero-page 2 'one 'two 'three)</span></div><div class="line" id="203426"><span class="nick" style="color:#389600"><a href="#203426" label="[20:34:26]">&lt;dannym&gt;</a></span><span class="message">[sexp=(optimize-zero-page 2 (quote one) (quote two) (quote three))]</span></div><div class="line" id="203428"><span class="nick" style="color:#389600"><a href="#203428" label="[20:34:28]">&lt;dannym&gt;</a></span><span class="message">exception:not-a-pair:((() . car))</span></div><div class="line" id="203543"><span class="nick" style="color:#389600"><a href="#203543" label="[20:35:43]">&lt;dannym&gt;</a></span><span class="message">Aha, this does work:</span></div><div class="line" id="203544"><span class="nick" style="color:#389600"><a href="#203544" label="[20:35:44]">&lt;dannym&gt;</a></span><span class="message">(define-macro (optimize-zero-page exp</span></div><div class="line" id="203544"><span class="nick" style="color:#389600"><a href="#203544" label="[20:35:44]">&lt;dannym&gt;</a></span><span class="message">                                  positive-body negative-body general-body)</span></div><div class="line" id="203544"><span class="nick" style="color:#389600"><a href="#203544" label="[20:35:44]">&lt;dannym&gt;</a></span><span class="message"> `(let ((exp ,exp))</span></div><div class="line" id="203544"><span class="nick" style="color:#389600"><a href="#203544" label="[20:35:44]">&lt;dannym&gt;</a></span><span class="message">    (if (,&gt;= exp ,0)</span></div><div class="line" id="203544"><span class="nick" style="color:#389600"><a href="#203544" label="[20:35:44]">&lt;dannym&gt;</a></span><span class="message">        (if (,&lt; exp ,#x100)</span></div><div class="line" id="203545"><span class="nick" style="color:#389600"><a href="#203545" label="[20:35:45]">&lt;dannym&gt;</a></span><span class="message">            ,positive-body</span></div><div class="line" id="203547"><span class="nick" style="color:#389600"><a href="#203547" label="[20:35:47]">&lt;dannym&gt;</a></span><span class="message">            ,general-body)</span></div><div class="line" id="203549"><span class="nick" style="color:#389600"><a href="#203549" label="[20:35:49]">&lt;dannym&gt;</a></span><span class="message">        (if (,&gt; exp ,#x-100)</span></div><div class="line" id="203556"><span class="nick" style="color:#389600"><a href="#203556" label="[20:35:56]">&lt;dannym&gt;</a></span><span class="message">            ,negative-body</span></div><div class="line" id="203556"><span class="nick" style="color:#389600"><a href="#203556" label="[20:35:56]">&lt;dannym&gt;</a></span><span class="message">            ,general-body))))</span></div><div class="line" id="203559"><span class="nick" style="color:#389600"><a href="#203559" label="[20:35:59]">&lt;dannym&gt;</a></span><span class="message">And shouldn't have a variable capture problem either</span></div><div class="line" id="203607"><span class="nick" style="color:#6c3d55"><a href="#203607" label="[20:36:07]">&lt;janneke&gt;</a></span><span class="message">\o/ -- the gensym was in the wrong spot</span></div><div class="line" id="203624"><span class="nick" style="color:#8dd3c7"><a href="#203624" label="[20:36:24]">&lt;xentrac&gt;</a></span><span class="message">yay!</span></div><div class="line" id="203646"><span class="nick" style="color:#6c3d55"><a href="#203646" label="[20:36:46]">&lt;janneke&gt;</a></span><span class="message">better!</span></div><div class="line" id="203731"><span class="nick" style="color:#389600"><a href="#203731" label="[20:37:31]">&lt;dannym&gt;</a></span><span class="message">janneke: All tests passed with the non-abs-using backend without macro, including the new ones I added :)</span></div><div class="line" id="203734"><span class="nick" style="color:#389600"><a href="#203734" label="[20:37:34]">&lt;dannym&gt;</a></span><span class="message">(btw)</span></div><div class="line" id="203742"><span class="nick" style="color:#389600"><a href="#203742" label="[20:37:42]">&lt;dannym&gt;</a></span><span class="message">janneke: mes master commit 341682f474c42f8cde8be5c8b80df4b58d31f7b9</span></div><div class="line" id="203803"><span class="nick" style="color:#389600"><a href="#203803" label="[20:38:03]">&lt;dannym&gt;</a></span><span class="message">And now I can de-uglify it again by using the macro</span></div><div class="line" id="203813"><span class="nick" style="color:#389600"><a href="#203813" label="[20:38:13]">&lt;dannym&gt;</a></span><span class="message">Thanks :)</span></div><div class="line" id="203844"><span class="nick" style="color:#6c3d55"><a href="#203844" label="[20:38:44]">&lt;janneke&gt;</a></span><span class="message">very happy, awesome work dannym!</span></div><div class="line" id="203857"><span class="nick" style="color:#389600"><a href="#203857" label="[20:38:57]">&lt;dannym&gt;</a></span><span class="message">janneke: Thanks :)</span></div><div class="line" id="204344"><span class="nick" style="color:#389600"><a href="#204344" label="[20:43:44]">&lt;dannym&gt;</a></span><span class="message">Even this works:</span></div><div class="line" id="204352"><span class="nick" style="color:#389600"><a href="#204352" label="[20:43:52]">&lt;dannym&gt;</a></span><span class="message">(optimize-immediate 1000 'one 'two (error &quot;no&quot;)) =&gt; exception: error &quot;no&quot;</span></div><div class="line" id="204409"><span class="nick" style="color:#389600"><a href="#204409" label="[20:44:09]">&lt;dannym&gt;</a></span><span class="message">(optimize-immediate 1 'one 'two (error &quot;no&quot;)) =&gt; one, no exception</span></div><div class="line" id="215825"><span class="nick" style="color:#6c3d55"><a href="#215825" label="[21:58:25]">&lt;janneke&gt;</a></span><span class="message">nice</span></div><div class="line" id="231917"><span class="nick" style="color:#d9d9d9"><a href="#231917" label="[23:19:17]">*</a></span><span class="message">janneke -&gt; zZzz</span></div><div class="line" id="232110"><span class="nick" style="color:#389600"><a href="#232110" label="[23:21:10]">&lt;dannym&gt;</a></span><span class="message">janneke: good night :)</span></div><div class="line" id="232431"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado</span></div><br /></div></body></html>