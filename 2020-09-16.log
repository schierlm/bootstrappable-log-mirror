<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-09-16.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="004332"><span class="nick" style="color:#389600"><a href="#004332" label="[00:43:32]">&lt;xentrac&gt;</a></span><span class="message">I feel like the latter two categories may vary somewhat depending on what kinds of guarantees your kernel provides you</span></div><div class="line" id="030023"><span class="nick" style="color:#2e2a4a"><a href="#030023" label="[03:00:23]">&lt;OriansJ`&gt;</a></span><span class="message">Hagfish: fair but I prefer to think of it more of how can we find just 1 more person to help with the M3 or mes-m2 work</span></div><div class="line" id="030217"><span class="nick" style="color:#2e2a4a"><a href="#030217" label="[03:02:17]">&lt;OriansJ`&gt;</a></span><span class="message">yanmaani: It is currently split into as many seperate files as makes sense. <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/tree/master/test/common_amd64/functions">https://github.com/oriansj/M2-Planet/tree/master/test/common_amd64/functions</a>  as the libc in M2-Planet is only what is absolutely required in every binary <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/blob/master/test/common_amd64/libc-core.M1">https://github.com/oriansj/M2-Planet/blob/master/test/common_amd64/libc-core.M1</a> </span></div><div class="line" id="030316"><span class="nick" style="color:#2e2a4a"><a href="#030316" label="[03:03:16]">&lt;OriansJ`&gt;</a></span><span class="message">for example armv7l doesn't have any division or modulus instructions, so we hand wrote a couple functions into libc to solve that problem. <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/blob/master/test/common_armv7l/libc-core.M1">https://github.com/oriansj/M2-Planet/blob/master/test/common_armv7l/libc-core.M1</a> </span></div><div class="line" id="030714"><span class="nick" style="color:#2e2a4a"><a href="#030714" label="[03:07:14]">&lt;OriansJ`&gt;</a></span><span class="message">MesCC goes even further and actually implements standard libraries as opposed to just essential C functions like M2-Planet does.</span></div><div class="line" id="030936"><span class="nick" style="color:#2e2a4a"><a href="#030936" label="[03:09:36]">&lt;OriansJ`&gt;</a></span><span class="message">fossy: ideally a kernel we can put on alot of different hardware platforms, that provides a standard file system like ext2 and just enough functionality to run GCC building Linux.</span></div><div class="line" id="031309"><span class="nick" style="color:#2e2a4a"><a href="#031309" label="[03:13:09]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: well most BSDs have a linux syscall binary compatibility layer and a bootstrap kernel only needs to include a subset of linux syscalls. So seperate libraries for kernels might not be needed (or atleast until someone cares enough to create a bug report and test that we fixed it)</span></div><div class="line" id="031451"><span class="nick" style="color:#2e2a4a"><a href="#031451" label="[03:14:51]">&lt;OriansJ`&gt;</a></span><span class="message">At this point, besides a handful of patches that janneke did to get TCC buildable by MesCC and the code I wrote to just parse ELF headers; no work has yet been done on M3.</span></div><div class="line" id="031616"><span class="nick" style="color:#389600"><a href="#031616" label="[03:16:16]">&lt;xentrac&gt;</a></span><span class="message">True; so does Windows</span></div><div class="line" id="031752"><span class="nick" style="color:#389600"><a href="#031752" label="[03:17:52]">&lt;xentrac&gt;</a></span><span class="message">but I was talking about the degree to which your kernel interface might interact with architecture-dependent functions like longjmp() that don't necessarily interact with the system call interface</span></div><div class="line" id="031837"><span class="nick" style="color:#389600"><a href="#031837" label="[03:18:37]">&lt;xentrac&gt;</a></span><span class="message">longjmp() in particular burned me relatively badly because MacOS implemented it as siglongjmp(), slowing down my program by a factor of about 30</span></div><div class="line" id="034944"><span class="nick" style="color:#6b8072"><a href="#034944" label="[03:49:44]">&lt;yanmaani&gt;</a></span><span class="message">OriansJ`: Concretely, what can you do do help with the M3 or mes-M2 work?</span></div><div class="line" id="101618"><span class="nick" style="color:#80b1d3"><a href="#101618" label="[10:16:18]">&lt;bauen1&gt;</a></span><span class="message">fossy: regarding your thoughts on the arduino, that doesn't cover attacks against bugs in the code or prevent against inserting malicious input</span></div><div class="line" id="101630"><span class="nick" style="color:#80b1d3"><a href="#101630" label="[10:16:30]">&lt;bauen1&gt;</a></span><span class="message">but it does make subverting the code bloody hard</span></div><div class="line" id="101650"><span class="nick" style="color:#80b1d3"><a href="#101650" label="[10:16:50]">&lt;bauen1&gt;</a></span><span class="message">my kernel sadly hasn't seen much progress</span></div><div class="line" id="101709"><span class="nick" style="color:#80b1d3"><a href="#101709" label="[10:17:09]">&lt;bauen1&gt;</a></span><span class="message">i did finish elf64 loading and setting up a stack with envp, argv, argc, ...</span></div><div class="line" id="101719"><span class="nick" style="color:#6d2462"><a href="#101719" label="[10:17:19]">&lt;rain1&gt;</a></span><span class="message">that sounds like a lot!</span></div><div class="line" id="101736"><span class="nick" style="color:#389600"><a href="#101736" label="[10:17:36]">&lt;xentrac&gt;</a></span><span class="message">congratulations!</span></div><div class="line" id="101740"><span class="nick" style="color:#80b1d3"><a href="#101740" label="[10:17:40]">&lt;bauen1&gt;</a></span><span class="message">so i can now run a simple hello world statically linked to musl</span></div><div class="line" id="101741"><span class="nick" style="color:#80b1d3"><a href="#101741" label="[10:17:41]">&lt;bauen1&gt;</a></span><span class="message">thanks</span></div><div class="line" id="101812"><span class="nick" style="color:#80b1d3"><a href="#101812" label="[10:18:12]">&lt;bauen1&gt;</a></span><span class="message">i think i'll do a bit of code cleanup too before i start hooking up syscalls</span></div><div class="line" id="101823"><span class="nick" style="color:#2e2a4a"><a href="#101823" label="[10:18:23]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: fair but speed isn't a primary concern, so much as correctness, simplicity and maintainability.</span></div><div class="line" id="101844"><span class="nick" style="color:#80b1d3"><a href="#101844" label="[10:18:44]">&lt;bauen1&gt;</a></span><span class="message">asmc looks quite interesting</span></div><div class="line" id="101859"><span class="nick" style="color:#80b1d3"><a href="#101859" label="[10:18:59]">&lt;bauen1&gt;</a></span><span class="message">if it can run tcc then i could use it to compile my kernel and userspace with it</span></div><div class="line" id="102015"><span class="nick" style="color:#389600"><a href="#102015" label="[10:20:15]">&lt;xentrac&gt;</a></span><span class="message">OriansJ`: perhaps for some of the people who would want yanmaani's libc, speed is important</span></div><div class="line" id="102158"><span class="nick" style="color:#2e2a4a"><a href="#102158" label="[10:21:58]">&lt;OriansJ`&gt;</a></span><span class="message">yanmaani: I am going to assume you meant what could yanmaani possibly do to help M3 or mes-m2; well one could either work on improving macro support in mes-m2 or help with the creation of a binutils compatible assembler buildable in M2-Planet or converting TCC's C abuse into something simpler that M2-Planet can compile but while preserving its functionality. (This can be done on a per file basis)</span></div><div class="line" id="102300"><span class="nick" style="color:#2e2a4a"><a href="#102300" label="[10:23:00]">&lt;OriansJ`&gt;</a></span><span class="message">bauen1: well it only takes a little more effort than supporting TCC to be able to run GCC and thus be able to compile the world</span></div><div class="line" id="102602"><span class="nick" style="color:#2e2a4a"><a href="#102602" label="[10:26:02]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: many things are important, however software is a reflections of the values of a culture. <a rel="nofollow" href="https://vimeo.com/230142234">https://vimeo.com/230142234</a> </span></div><div class="line" id="102650"><span class="nick" style="color:#80b1d3"><a href="#102650" label="[10:26:50]">&lt;bauen1&gt;</a></span><span class="message">true</span></div><div class="line" id="102730"><span class="nick" style="color:#2e2a4a"><a href="#102730" label="[10:27:30]">&lt;OriansJ`&gt;</a></span><span class="message">we can't do everything good and amazing, software requires tradeoffs. So it is far better for us to be honest and say &quot;hey this is what is most important to us&quot;</span></div><div class="line" id="103012"><span class="nick" style="color:#389600"><a href="#103012" label="[10:30:12]">&lt;xentrac&gt;</a></span><span class="message">OriansJ`: sure.  and it's helpful to have a narrow focus</span></div><div class="line" id="103153"><span class="nick" style="color:#2e2a4a"><a href="#103153" label="[10:31:53]">&lt;OriansJ`&gt;</a></span><span class="message">because at the end of the day, we all are going to die eventually and if no one understands what we did; then this would have all been for nothing.</span></div><div class="line" id="103201"><span class="nick" style="color:#389600"><a href="#103201" label="[10:32:01]">&lt;xentrac&gt;</a></span><span class="message">up to yanmaani to decide what they prioritize</span></div><div class="line" id="103217"><span class="nick" style="color:#2e2a4a"><a href="#103217" label="[10:32:17]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: indeed</span></div><div class="line" id="103227"><span class="nick" style="color:#389600"><a href="#103227" label="[10:32:27]">&lt;xentrac&gt;</a></span><span class="message">certainly speed is minimally important for bootstrapping compilers!</span></div><div class="line" id="103236"><span class="nick" style="color:#389600"><a href="#103236" label="[10:32:36]">&lt;xentrac&gt;</a></span><span class="message">that is, its importance is minimal!</span></div><div class="line" id="103258"><span class="nick" style="color:#6d2462"><a href="#103258" label="[10:32:58]">&lt;rain1&gt;</a></span><span class="message">i like a compiler that can bootstrap itself fast</span></div><div class="line" id="103302"><span class="nick" style="color:#6d2462"><a href="#103302" label="[10:33:02]">&lt;rain1&gt;</a></span><span class="message">afaict mine is the fastest</span></div><div class="line" id="103306"><span class="nick" style="color:#2e2a4a"><a href="#103306" label="[10:33:06]">&lt;OriansJ`&gt;</a></span><span class="message">but it possible as a byproduct of having a simple design.</span></div><div class="line" id="103308"><span class="nick" style="color:#6d2462"><a href="#103308" label="[10:33:08]">&lt;rain1&gt;</a></span><span class="message">as schemes go</span></div><div class="line" id="103338"><span class="nick" style="color:#2e2a4a"><a href="#103338" label="[10:33:38]">&lt;OriansJ`&gt;</a></span><span class="message">rain1: 1M/sec for M2-Planet (when built by GCC -O3)</span></div><div class="line" id="103346"><span class="nick" style="color:#6d2462"><a href="#103346" label="[10:33:46]">&lt;rain1&gt;</a></span><span class="message">2nd fastest* :D</span></div><div class="line" id="103416"><span class="nick" style="color:#2e2a4a"><a href="#103416" label="[10:34:16]">&lt;OriansJ`&gt;</a></span><span class="message">rain1: well mes-m2 is an order of magnitude faster than mes.c</span></div><div class="line" id="104010"><span class="nick" style="color:#2e2a4a"><a href="#104010" label="[10:40:10]">&lt;OriansJ`&gt;</a></span><span class="message">but I really need to fix the macro support to better match guile and finally be able to interpret xentrac's scheme compiler in scheme properly</span></div><div class="line" id="104925"><span class="nick" style="color:#2e2a4a"><a href="#104925" label="[10:49:25]">&lt;OriansJ`&gt;</a></span><span class="message">now part of me wants to do the full and proper scheme syntax-case in C, so we can finally bootstrap guile's syntax.pp but on the other hand doing that instead of the M3 work would delay me a good bit.</span></div><div class="line" id="105229"><span class="nick" style="color:#2e2a4a"><a href="#105229" label="[10:52:29]">&lt;OriansJ`&gt;</a></span><span class="message">but the tasks become much bigger going forward, as having a proper minimal C with structs converts the problem to just one of brute force as opposed to figuring out the clever way to parse C in a trivial manner to allow a reasonable assembly implementation.</span></div><div class="line" id="110042"><span class="nick" style="color:#2e2a4a"><a href="#110042" label="[11:00:42]">&lt;OriansJ`&gt;</a></span><span class="message">I mean with M2-Planet and mes-m2 bootstrapped from hex0 in mescc-tools-seed. We are literally at the verge of being both done and years away from done at the same time.</span></div><div class="line" id="110258"><span class="nick" style="color:#2e2a4a"><a href="#110258" label="[11:02:58]">&lt;OriansJ`&gt;</a></span><span class="message">It is &quot;just make mes-m2 run MesCC&quot; or go the long way with M3 because scheme bootstrapping is a macro infested hell hole with more missing steps than a one legged tango dancer.</span></div><div class="line" id="110318"><span class="nick" style="color:#389600"><a href="#110318" label="[11:03:18]">&lt;xentrac&gt;</a></span><span class="message">heh</span></div><div class="line" id="110430"><span class="nick" style="color:#2e2a4a"><a href="#110430" label="[11:04:30]">&lt;OriansJ`&gt;</a></span><span class="message">The longer one spends in assembly, the less lisp makes sense. yes syntax-case is powerful but you know what is really powerful? code people don't need to spend 3 months decompiling in their head to figure out what the hell you are trying to do.</span></div><div class="line" id="110534"><span class="nick" style="color:#2e2a4a"><a href="#110534" label="[11:05:34]">&lt;OriansJ`&gt;</a></span><span class="message">the problem is the power of lisp is also its greatest weakness.</span></div><div class="line" id="110549"><span class="nick" style="color:#6d2462"><a href="#110549" label="[11:05:49]">&lt;rain1&gt;</a></span><span class="message">the hygienic macro space is rather complex</span></div><div class="line" id="110610"><span class="nick" style="color:#6d2462"><a href="#110610" label="[11:06:10]">&lt;rain1&gt;</a></span><span class="message">i don't know if the scope sets theory has helped make it simpler</span></div><div class="line" id="110625"><span class="nick" style="color:#389600"><a href="#110625" label="[11:06:25]">&lt;xentrac&gt;</a></span><span class="message">Well, I've definitely had the experience of not understanding how to use a Lisp construct until I understand how it's implemented.</span></div><div class="line" id="110638"><span class="nick" style="color:#6d2462"><a href="#110638" label="[11:06:38]">&lt;rain1&gt;</a></span><span class="message">it has clarified the theory of hygienic macros but implementation is still really hard</span></div><div class="line" id="110653"><span class="nick" style="color:#389600"><a href="#110653" label="[11:06:53]">&lt;xentrac&gt;</a></span><span class="message">But I think the fact that the theory is clear and simple makes it a lot easier to use once you do understand it.</span></div><div class="line" id="110709"><span class="nick" style="color:#2e2a4a"><a href="#110709" label="[11:07:09]">&lt;OriansJ`&gt;</a></span><span class="message">rain1: and we would need to do it in M2-Planet C</span></div><div class="line" id="110819"><span class="nick" style="color:#2e2a4a"><a href="#110819" label="[11:08:19]">&lt;OriansJ`&gt;</a></span><span class="message">I can do alot of scheme primitives with ease but syntax-case is alot that has to be done in a single step</span></div><div class="line" id="110831"><span class="nick" style="color:#2e2a4a"><a href="#110831" label="[11:08:31]">&lt;OriansJ`&gt;</a></span><span class="message">as there are no half-steps to getting it working</span></div><div class="line" id="110840"><span class="nick" style="color:#2e2a4a"><a href="#110840" label="[11:08:40]">&lt;OriansJ`&gt;</a></span><span class="message">it is all or nothing</span></div><div class="line" id="110908"><span class="nick" style="color:#389600"><a href="#110908" label="[11:09:08]">&lt;xentrac&gt;</a></span><span class="message">I think I suggested before implementing syntax-case in a language with syntactic closures.</span></div><div class="line" id="110941"><span class="nick" style="color:#2e2a4a"><a href="#110941" label="[11:09:41]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: so bootstrap another language to solve the scheme bootstrap problem?</span></div><div class="line" id="110950"><span class="nick" style="color:#389600"><a href="#110950" label="[11:09:50]">&lt;xentrac&gt;</a></span><span class="message">I think syntactic closures are dramatically easier to implement than syntax-case (or even syntax-rules), and powerful enough to make the implementation of syntax-case itself tractable.</span></div><div class="line" id="111004"><span class="nick" style="color:#389600"><a href="#111004" label="[11:10:04]">&lt;xentrac&gt;</a></span><span class="message">Not a whole other language, just a slightly larger subset of Scheme.</span></div><div class="line" id="111013"><span class="nick" style="color:#6d2462"><a href="#111013" label="[11:10:13]">&lt;rain1&gt;</a></span><span class="message">I agree that syntactic closures are the simplest way to get hygiene, it's a nice system</span></div><div class="line" id="111050"><span class="nick" style="color:#2e2a4a"><a href="#111050" label="[11:10:50]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: I can't build it unless I have a solid idea of what needs to be done</span></div><div class="line" id="111053"><span class="nick" style="color:#389600"><a href="#111053" label="[11:10:53]">&lt;xentrac&gt;</a></span><span class="message">You could also implement syntax-case very carefully in an unhygienic macro system, which is trivial to get working</span></div><div class="line" id="111102"><span class="nick" style="color:#6d2462"><a href="#111102" label="[11:11:02]">&lt;rain1&gt;</a></span><span class="message">the benefit of the scope sets stuff is that it lets you pause evaluation and resume it, and move stuff across module boundaries and things. Nothing that we need to just compile some code once.</span></div><div class="line" id="111524"><span class="nick" style="color:#2e2a4a"><a href="#111524" label="[11:15:24]">&lt;OriansJ`&gt;</a></span><span class="message">if mes-m2 just needs to become a seed-scheme to enable a proper scheme written in scheme to do the job, so be it but I am not the man who would be able to do everything. I would need scheme programmers to take the scheme half and give me well defined functionality I would need to implement in mes-m2</span></div><div class="line" id="113713"><span class="nick" style="color:#2e2a4a"><a href="#113713" label="[11:37:13]">&lt;OriansJ`&gt;</a></span><span class="message">Look, I have done the work on providing a bootstrap from nothing to a rather complete C and I am willing to do the steps to get the scheme bootstrap started but honestly someone else needs to be responsible for the scheme bootstrap work in scheme.</span></div><div class="line" id="114900"><span class="nick" style="color:#2e2a4a"><a href="#114900" label="[11:49:00]">&lt;OriansJ`&gt;</a></span><span class="message">look janneke spent the last few years growing mes.c with mescc and guix is only getting more and more dependent upon guile. fixing that is a huge task, especially since there is no visible evidence that the scheme bootstrap is ever going to get easier.</span></div><div class="line" id="114929"><span class="nick" style="color:#2e2a4a"><a href="#114929" label="[11:49:29]">&lt;OriansJ`&gt;</a></span><span class="message">in all honesty, it is starting to look like bootstrapping scheme is going to be a harder task than bootstrapping GCC</span></div><div class="line" id="115113"><span class="nick" style="color:#2e2a4a"><a href="#115113" label="[11:51:13]">&lt;OriansJ`&gt;</a></span><span class="message">hell,</span></div><div class="line" id="115200"><span class="nick" style="color:#2e2a4a"><a href="#115200" label="[11:52:00]">&lt;OriansJ`&gt;</a></span><span class="message">M2-Planet's C tokenization is simpler than mes-m2's s-expression tokenization</span></div><div class="line" id="115238"><span class="nick" style="color:#2e2a4a"><a href="#115238" label="[11:52:38]">&lt;OriansJ`&gt;</a></span><span class="message">and I poured way more time into mes-m2's tokenization to try to make it simpler.</span></div><div class="line" id="120352"><span class="nick" style="color:#2e2a4a"><a href="#120352" label="[12:03:52]">&lt;OriansJ`&gt;</a></span><span class="message">and since no one else decided to post to mine karma: <a rel="nofollow" href="https://news.ycombinator.com/item?id=24491160">https://news.ycombinator.com/item?id=24491160</a> </span></div><div class="line" id="121417"><span class="nick" style="color:#2e2a4a"><a href="#121417" label="[12:14:17]">&lt;OriansJ`&gt;</a></span><span class="message">I guess, one could say I am begging scheme developers for the love of god to care about bootstrapping their own language enough to help me help them.</span></div><div class="line" id="145052"><span class="nick" style="color:#6d2462"><a href="#145052" label="[14:50:52]">&lt;rain1&gt;</a></span><span class="message">guile is one of very few that cares about the bootstrap</span></div><div class="line" id="145102"><span class="nick" style="color:#6d2462"><a href="#145102" label="[14:51:02]">&lt;rain1&gt;</a></span><span class="message">it's such a neglected thing in compilers</span></div><div class="line" id="145113"><span class="nick" style="color:#6d2462"><a href="#145113" label="[14:51:13]">&lt;rain1&gt;</a></span><span class="message">which is mad because everybody has to do it at some point to get running code</span></div><div class="line" id="145223"><span class="nick" style="color:#234e69"><a href="#145223" label="[14:52:23]">&lt;stikonas&gt;</a></span><span class="message">well, many people use binary-only distros, so they automatically appreciate bootstrappability less</span></div><div class="line" id="145238"><span class="nick" style="color:#234e69"><a href="#145238" label="[14:52:38]">&lt;stikonas&gt;</a></span><span class="message">if you use source based distro, it's so much more apparent</span></div><div class="line" id="145316"><span class="nick" style="color:#6d2462"><a href="#145316" label="[14:53:16]">&lt;rain1&gt;</a></span><span class="message">but the compiler authors - do they think of themselves as stage magicians?</span></div><div class="line" id="145330"><span class="nick" style="color:#6d2462"><a href="#145330" label="[14:53:30]">&lt;rain1&gt;</a></span><span class="message">remove all the scaffolding and let people wonder how this binary possibly came to be</span></div><div class="line" id="145338"><span class="nick" style="color:#234e69"><a href="#145338" label="[14:53:38]">&lt;stikonas&gt;</a></span><span class="message">I don't know :(</span></div><div class="line" id="145613"><span class="nick" style="color:#234e69"><a href="#145613" label="[14:56:13]">&lt;stikonas&gt;</a></span><span class="message">somehow they all think that you have to write compiler in its own language or its useless</span></div><div class="line" id="154527"><span class="nick" style="color:#6d2462"><a href="#154527" label="[15:45:27]">&lt;rain1&gt;</a></span><span class="message">haha</span></div><div class="line" id="154531"><span class="nick" style="color:#6d2462"><a href="#154531" label="[15:45:31]">&lt;rain1&gt;</a></span><span class="message">yeah that seems to be the thing</span></div><div class="line" id="195809"><span class="nick" style="color:#6c3d55"><a href="#195809" label="[19:58:09]">&lt;rekado_&gt;</a></span><span class="message">there’s a cost attached to keeping the bootstrap around</span></div><div class="line" id="195847"><span class="nick" style="color:#6c3d55"><a href="#195847" label="[19:58:47]">&lt;rekado_&gt;</a></span><span class="message">and building a compiler in the target language is a way to quickly build a “serious” program together with the language</span></div><div class="line" id="195938"><span class="nick" style="color:#6c3d55"><a href="#195938" label="[19:59:38]">&lt;rekado_&gt;</a></span><span class="message">so there’s an incentive to get to self-hosting as soon as possible while also avoiding to keep intermediates around (which is the most obvious choice for bootstrapping when one has not planned ahead)</span></div><div class="line" id="231600"><span class="nick" style="color:#d9d9d9"><a href="#231600" label="[23:16:00]">&lt;V&gt;</a></span><span class="message">stikonas: yeah, unfortunately. so many people I've talked to think that bootstrapping their compiler in itself is the most important thing &amp; I'm constantly dying inside</span></div><div class="line" id="231641"><span class="nick" style="color:#d9d9d9"><a href="#231641" label="[23:16:41]">&lt;V&gt;</a></span><span class="message">For all my language projects I'm absolutely keeping a very direct path from C; if I end up writing something appropriate to replace C I'm *still* keeping a C implementation because it's just that important</span></div><div class="line" id="232738"><span class="nick">***</span><span class="message notice">stikonas_ is now known as stikonas</span></div><div class="line" id="234423"><span class="nick" style="color:#389600"><a href="#234423" label="[23:44:23]">&lt;xentrac&gt;</a></span><span class="message">well, it's pragmatically a very useful thing when what you want is to get your language running, not to have reproducible builds for it</span></div><div class="line" id="235534"><span class="nick" style="color:#d9d9d9"><a href="#235534" label="[23:55:34]">&lt;V&gt;</a></span><span class="message">if you want to get your language running, you have a perfectly working C compiler :)</span></div><br /></div></body></html>