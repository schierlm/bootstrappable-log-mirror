<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-04-08.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="003552"><span class="nick" style="color:#8dd3c7"><a href="#003552" label="[00:35:52]">&lt;OriansJ`&gt;</a></span><span class="message">mihi: it certainly would nice to see Debian properly bootstrapped (even if from Guix)</span></div><div class="line" id="003723"><span class="nick" style="color:#8dd3c7"><a href="#003723" label="[00:37:23]">&lt;OriansJ`&gt;</a></span><span class="message">stikonas: mescc could be extended to be able to compile newer TCC versions (Even GCC) if sufficient developer effort is thrown at it. However the question of is that the optimal choice is perhaps a much harder one; one I delegate to the people who choose to do the work or not.</span></div><div class="line" id="004226"><span class="nick" style="color:#8dd3c7"><a href="#004226" label="[00:42:26]">&lt;OriansJ`&gt;</a></span><span class="message">gforce_de1977: in regards to pushd/popd and bashisms in live-bootstrap; it might be more convincing if you got a different shell (like dash) lower in the bootstrap chain that might clean up some kaemisms.</span></div><div class="line" id="010515"><span class="nick" style="color:#2e2a4a"><a href="#010515" label="[01:05:15]">&lt;stikonas&gt;</a></span><span class="message">OriansJ`: dash proved to be hard to compile...</span></div><div class="line" id="010519"><span class="nick" style="color:#2e2a4a"><a href="#010519" label="[01:05:19]">&lt;stikonas&gt;</a></span><span class="message">at least with meslibc</span></div><div class="line" id="010541"><span class="nick" style="color:#8dd3c7"><a href="#010541" label="[01:05:41]">&lt;OriansJ`&gt;</a></span><span class="message">stikonas: possibly the wrong example but the premise remains</span></div><div class="line" id="031221"><span class="nick" style="color:#6b8072"><a href="#031221" label="[03:12:21]">&lt;pabs3&gt;</a></span><span class="message">anyone know how to contact rain1?</span></div><div class="line" id="032519"><span class="nick" style="color:#8dd3c7"><a href="#032519" label="[03:25:19]">&lt;OriansJ`&gt;</a></span><span class="message">you could try rain1@airmail.cc</span></div><div class="line" id="033035"><span class="nick" style="color:#6b8072"><a href="#033035" label="[03:30:35]">&lt;pabs3&gt;</a></span><span class="message">thanks!</span></div><div class="line" id="083853"><span class="nick" style="color:#80b1d3"><a href="#083853" label="[08:38:53]">&lt;gforce_d11977&gt;</a></span><span class="message">stikonas: fossy: bauen1: i started digging through the error logs and with the 1st ticket/issue regarding seldom failures. is the prefered way, or should i change/add something? <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/issues/92">https://github.com/fosslinux/live-bootstrap/issues/92</a> </span></div><div class="line" id="092021"><span class="nick" style="color:#6d2462"><a href="#092021" label="[09:20:21]">&lt;bauen1&gt;</a></span><span class="message">gforce_d11977: so i've grepped the log for `autom4te.cfg` and compared to all other autoconf runs in the same log, the commands directly above are using `autom4te` instead of `autom4te.cfg`</span></div><div class="line" id="092032"><span class="nick" style="color:#6d2462"><a href="#092032" label="[09:20:32]">&lt;bauen1&gt;</a></span><span class="message">`mv autom4te.tmp autom4te` should probably be `mv autom4te.tmp autom4te.cfg`</span></div><div class="line" id="092313"><span class="nick" style="color:#6d2462"><a href="#092313" label="[09:23:13]">&lt;bauen1&gt;</a></span><span class="message">i've also noticed that make seems to be a bit fragile, i got it to segfault just because of a missing program</span></div><div class="line" id="093352"><span class="nick" style="color:#234e69"><a href="#093352" label="[09:33:52]">&lt;fossy&gt;</a></span><span class="message">gforce_d11977: that is a good ticket</span></div><div class="line" id="093834"><span class="nick" style="color:#6d2462"><a href="#093834" label="[09:38:34]">&lt;bauen1&gt;</a></span><span class="message">autoconf-2.57/lib/Makefile.in also contains the make recipe for autom4te.cfg basically hard coded with no variable replacement, perhaps you could recover the generated Makefile from a run where this issue happens ?</span></div><div class="line" id="093905"><span class="nick" style="color:#6d2462"><a href="#093905" label="[09:39:05]">&lt;bauen1&gt;</a></span><span class="message">either make is faulty or what ever generated autoconf-2.57/lib/Makefile from Makefile.in occasionally strips the \.cfg from autom4te</span></div><div class="line" id="094103"><span class="nick" style="color:#6d2462"><a href="#094103" label="[09:41:03]">&lt;bauen1&gt;</a></span><span class="message">gforce_d11977: do you have a normal run log for comparision ?</span></div><div class="line" id="105633"><span class="nick" style="color:#80b1d3"><a href="#105633" label="[10:56:33]">&lt;gforce_d11977&gt;</a></span><span class="message">ok, i will also share a normal run an a diff (sorry, was away)</span></div><div class="line" id="105957"><span class="nick" style="color:#80b1d3"><a href="#105957" label="[10:59:57]">&lt;gforce_d11977&gt;</a></span><span class="message">this is a normal run: <a rel="nofollow" href="http://intercity-vpn.de/bootstrap/bootstrap.log-multilog-22-1617824223.txt">http://intercity-vpn.de/bootstrap/bootstrap.log-multilog-22-1617824223.txt</a>  ( i have updated the ticket)</span></div><div class="line" id="111216"><span class="nick" style="color:#6d2462"><a href="#111216" label="[11:12:16]">&lt;bauen1&gt;</a></span><span class="message">thanks</span></div><div class="line" id="111348"><span class="nick" style="color:#80b1d3"><a href="#111348" label="[11:13:48]">&lt;gforce_d11977&gt;</a></span><span class="message">bauen1: sorry for the timestamps, do a &quot;cut -b13- filename&quot;</span></div><div class="line" id="111449"><span class="nick" style="color:#6d2462"><a href="#111449" label="[11:14:49]">&lt;bauen1&gt;</a></span><span class="message">timestamp is fine</span></div><div class="line" id="111520"><span class="nick" style="color:#80b1d3"><a href="#111520" label="[11:15:20]">&lt;gforce_d11977&gt;</a></span><span class="message">bauen1: sorry i cannot recover anything, but i can add for the next mass-run a &quot;cat Makefile&quot;?</span></div><div class="line" id="111650"><span class="nick" style="color:#6d2462"><a href="#111650" label="[11:16:50]">&lt;bauen1&gt;</a></span><span class="message">gforce_d11977: maybe you can inject `--debug` to the make invokations of binutils-2.57 (warning *a lot* of logs)</span></div><div class="line" id="111724"><span class="nick" style="color:#6d2462"><a href="#111724" label="[11:17:24]">&lt;bauen1&gt;</a></span><span class="message">and maybe, just so it's easier to spot differencees do a sha256 of *every* file at the end / abort of a bootstrap, but that's also gonna take some time</span></div><div class="line" id="111736"><span class="nick" style="color:#6d2462"><a href="#111736" label="[11:17:36]">&lt;bauen1&gt;</a></span><span class="message">mostly because checksum coverage isn't great at the moment</span></div><div class="line" id="111808"><span class="nick" style="color:#80b1d3"><a href="#111808" label="[11:18:08]">&lt;gforce_d11977&gt;</a></span><span class="message">bauen1: i will can inject --debug for all make invocations</span></div><div class="line" id="111827"><span class="nick" style="color:#6d2462"><a href="#111827" label="[11:18:27]">&lt;bauen1&gt;</a></span><span class="message">gforce_d11977: --debug will allow us to see **why** autoconf-2.57/bin/Makefile wants to run autom4te instead of building the other binaries</span></div><div class="line" id="111828"><span class="nick" style="color:#80b1d3"><a href="#111828" label="[11:18:28]">&lt;gforce_d11977&gt;</a></span><span class="message">abd a sha256sum /after/bin/* after each package?</span></div><div class="line" id="111848"><span class="nick" style="color:#6d2462"><a href="#111848" label="[11:18:48]">&lt;bauen1&gt;</a></span><span class="message">gforce_d11977: if you add it to every make call, that will be very very big log files (1gb or more per run wouldn't surprise me)</span></div><div class="line" id="111914"><span class="nick" style="color:#80b1d3"><a href="#111914" label="[11:19:14]">&lt;gforce_d11977&gt;</a></span><span class="message">bauen1: hmmm...space is not an issue here, so i will go for it</span></div><div class="line" id="111921"><span class="nick" style="color:#6d2462"><a href="#111921" label="[11:19:21]">&lt;bauen1&gt;</a></span><span class="message">gforce_d11977: cover /after/bin, /after/lib, /after/include</span></div><div class="line" id="111953"><span class="nick" style="color:#80b1d3"><a href="#111953" label="[11:19:53]">&lt;gforce_d11977&gt;</a></span><span class="message">ok: sha256sum /after/bin/* /after/lib/* /after/include/*</span></div><div class="line" id="111957"><span class="nick" style="color:#6d2462"><a href="#111957" label="[11:19:57]">&lt;bauen1&gt;</a></span><span class="message">gforce_d11977: but yes, adding --debug to every make call will allow us to see any time stamp related differences</span></div><div class="line" id="112017"><span class="nick" style="color:#6d2462"><a href="#112017" label="[11:20:17]">&lt;bauen1&gt;</a></span><span class="message">gforce_d11977: oh and i think /after/share if it exists</span></div><div class="line" id="112445"><span class="nick" style="color:#6d2462"><a href="#112445" label="[11:24:45]">&lt;bauen1&gt;</a></span><span class="message">gforce_d11977: maybe you can also start to include the last git commit in the logs</span></div><div class="line" id="112511"><span class="nick" style="color:#6d2462"><a href="#112511" label="[11:25:11]">&lt;bauen1&gt;</a></span><span class="message">and if the tree was modified, that should make it easy to find the right source tree to go with the logs</span></div><div class="line" id="113617"><span class="nick" style="color:#6d2462"><a href="#113617" label="[11:36:17]">&lt;bauen1&gt;</a></span><span class="message">gforce_d11977: i may have found a hint at why autoconf-2.57 is failing</span></div><div class="line" id="113642"><span class="nick" style="color:#6d2462"><a href="#113642" label="[11:36:42]">&lt;bauen1&gt;</a></span><span class="message">autoconf2.57/bin/Makefile.in:454 `$(srcdir)/autoconf.in: $(srcdir)/autoconf.as # FIXME: $(m4sh_m4f_dependencies)`</span></div><div class="line" id="113656"><span class="nick" style="color:#6d2462"><a href="#113656" label="[11:36:56]">&lt;bauen1&gt;</a></span><span class="message">that is the rule that seems to execute `01h50m15s | ../tests/autom4te --language M4sh --cache '' ./autoconf.as -o autoconf.in`</span></div><div class="line" id="113717"><span class="nick" style="color:#6d2462"><a href="#113717" label="[11:37:17]">&lt;bauen1&gt;</a></span><span class="message">and the FIXME hints at a variable that contains `$(AUTOM4TE_CFG)`</span></div><div class="line" id="113725"><span class="nick" style="color:#6d2462"><a href="#113725" label="[11:37:25]">&lt;bauen1&gt;</a></span><span class="message">so probably make needs to know about a dependency</span></div><div class="line" id="113800"><span class="nick" style="color:#6d2462"><a href="#113800" label="[11:38:00]">&lt;bauen1&gt;</a></span><span class="message">and sometimes the timestamps don't quite align and it tries to run the command that depends on $(AUTOM4TE_CFG) before it was build</span></div><div class="line" id="113833"><span class="nick" style="color:#6d2462"><a href="#113833" label="[11:38:33]">&lt;bauen1&gt;</a></span><span class="message">at least that's my theory</span></div><div class="line" id="114549"><span class="nick" style="color:#6d2462"><a href="#114549" label="[11:45:49]">&lt;bauen1&gt;</a></span><span class="message">maybe a `touch bin/*.in` will fix things</span></div><div class="line" id="114936"><span class="nick" style="color:#6d2462"><a href="#114936" label="[11:49:36]">&lt;bauen1&gt;</a></span><span class="message">gforce_d11977: does your kernel support high resolution time stamps ?</span></div><div class="line" id="115039"><span class="nick" style="color:#80b1d3"><a href="#115039" label="[11:50:39]">&lt;gforce_d11977&gt;</a></span><span class="message">ok, the touch is a good idea. high res timetimestamps are not compiled it, but i can add this: very good idea. maybe this fixes everything 8-)</span></div><div class="line" id="121742"><span class="nick" style="color:#80b1d3"><a href="#121742" label="[12:17:42]">&lt;gforce_d11977&gt;</a></span><span class="message">ok, will make a mass-testrun with # CONFIG_SCHED_HRTICK=y # CONFIG_HZ_100=y # CONFIG_HIGH_RES_TIMERS=y - maybe something changes</span></div><div class="line" id="135330"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado</span></div><div class="line" id="140922"><span class="nick" style="color:#80b1d3"><a href="#140922" label="[14:09:22]">&lt;gforce_d11977&gt;</a></span><span class="message">bauen1: mass testrun still have errors, i added new logs: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/issues/92">https://github.com/fosslinux/live-bootstrap/issues/92</a> </span></div><div class="line" id="142930"><span class="nick" style="color:#80b1d3"><a href="#142930" label="[14:29:30]">&lt;gforce_d11977&gt;</a></span><span class="message">he, she, it, das 's' mit mit!</span></div><div class="line" id="142939"><span class="nick" style="color:#80b1d3"><a href="#142939" label="[14:29:39]">&lt;gforce_d11977&gt;</a></span><span class="message">still *has* errors</span></div><div class="line" id="143354"><span class="nick" style="color:#2e2a4a"><a href="#143354" label="[14:33:54]">&lt;stikonas&gt;</a></span><span class="message">just kernel changes on its own wouldn't fix those errors</span></div><div class="line" id="143403"><span class="nick" style="color:#2e2a4a"><a href="#143403" label="[14:34:03]">&lt;stikonas&gt;</a></span><span class="message">cause I saw them on normal linux kernel too</span></div><div class="line" id="143621"><span class="nick" style="color:#80b1d3"><a href="#143621" label="[14:36:21]">&lt;gforce_d11977&gt;</a></span><span class="message">stikonas: but forcing a &quot;touch&quot;?</span></div><div class="line" id="143627"><span class="nick" style="color:#2e2a4a"><a href="#143627" label="[14:36:27]">&lt;stikonas&gt;</a></span><span class="message">no, without touch</span></div><div class="line" id="144648"><span class="nick" style="color:#6d2462"><a href="#144648" label="[14:46:48]">&lt;bauen1&gt;</a></span><span class="message">gforce_d11977: those are without touching a few files ?</span></div><div class="line" id="144905"><span class="nick" style="color:#6d2462"><a href="#144905" label="[14:49:05]">&lt;bauen1&gt;</a></span><span class="message">gforce_d11977: by the way you can use haproxy to mix vpn / ssh / https over port 443</span></div><div class="line" id="145003"><span class="nick" style="color:#6d2462"><a href="#145003" label="[14:50:03]">&lt;bauen1&gt;</a></span><span class="message">gforce_d11977: by the filename i'm assuming it took around 14 runs at least to find a bad one ?</span></div><div class="line" id="145316"><span class="nick" style="color:#6d2462"><a href="#145316" label="[14:53:16]">&lt;bauen1&gt;</a></span><span class="message">so something curious: for autoconf-2.53 the good run had `make[1]: Nothing to be done for `all'.` but the bad run tried to update the man and info pages</span></div><div class="line" id="145909"><span class="nick" style="color:#6d2462"><a href="#145909" label="[14:59:09]">&lt;bauen1&gt;</a></span><span class="message">the fact that bin/Makefile.in contains a target for bin/autoconf.in from bin/autoconf.as also leads me to believe that bin/autoconf.in in the autoconf-2.57 (and possibly others) is a generated file</span></div><div class="line" id="150947"><span class="nick" style="color:#6d2462"><a href="#150947" label="[15:09:47]">&lt;bauen1&gt;</a></span><span class="message">gforce_d11977: and in general i would be quite interested in 2 runs where `--debug` is passed to any make invokation, that could highlight a few more issues</span></div><div class="line" id="152729"><span class="nick" style="color:#2e2a4a"><a href="#152729" label="[15:27:29]">&lt;stikonas&gt;</a></span><span class="message">bauen1: yeah, that might be true, looks like it's updated from autoconf.as</span></div><div class="line" id="152802"><span class="nick" style="color:#80b1d3"><a href="#152802" label="[15:28:02]">&lt;gforce_d11977&gt;</a></span><span class="message">bauen1: i took one run to find a bad one, but they all (24) run in parallel</span></div><div class="line" id="152848"><span class="nick" style="color:#6d2462"><a href="#152848" label="[15:28:48]">&lt;bauen1&gt;</a></span><span class="message">gforce_d11977: i was wondering if the high precision timer has an effect on the failure rate, but i'm not sure if 24 runs are significant enough</span></div><div class="line" id="152854"><span class="nick" style="color:#2e2a4a"><a href="#152854" label="[15:28:54]">&lt;stikonas&gt;</a></span><span class="message">looks like it's introduced in autoconf 2.54</span></div><div class="line" id="152855"><span class="nick" style="color:#80b1d3"><a href="#152855" label="[15:28:55]">&lt;gforce_d11977&gt;</a></span><span class="message">bauen1: strange, i add --debug to all make invocations, but it does not seems to have an effect</span></div><div class="line" id="152929"><span class="nick" style="color:#80b1d3"><a href="#152929" label="[15:29:29]">&lt;gforce_d11977&gt;</a></span><span class="message">bauen1: the computer has only 24 threads (but 256G RAM)</span></div><div class="line" id="153118"><span class="nick" style="color:#80b1d3"><a href="#153118" label="[15:31:18]">&lt;gforce_d11977&gt;</a></span><span class="message">bauen1: I found my mistake: i only added it to src_install() not in src_compile() will do and have another run</span></div><div class="line" id="153221"><span class="nick" style="color:#6d2462"><a href="#153221" label="[15:32:21]">&lt;bauen1&gt;</a></span><span class="message">gforce_d11977: some scripts also invoke `make` manually, but i think that should cover most</span></div><div class="line" id="153350"><span class="nick" style="color:#80b1d3"><a href="#153350" label="[15:33:50]">&lt;gforce_d11977&gt;</a></span><span class="message">ok, see you again in 70 minutes</span></div><div class="line" id="153359"><span class="nick" style="color:#80b1d3"><a href="#153359" label="[15:33:59]">&lt;gforce_d11977&gt;</a></span><span class="message">(mass run started)</span></div><div class="line" id="153434"><span class="nick" style="color:#6d2462"><a href="#153434" label="[15:34:34]">&lt;bauen1&gt;</a></span><span class="message">lol</span></div><div class="line" id="153515"><span class="nick" style="color:#6d2462"><a href="#153515" label="[15:35:15]">&lt;bauen1&gt;</a></span><span class="message">if that computer has nothing else to do, you could use those 70 minutes to figure out what it should do after ;)</span></div><div class="line" id="154119"><span class="nick" style="color:#2e2a4a"><a href="#154119" label="[15:41:19]">&lt;stikonas&gt;</a></span><span class="message">bauen1: maybe open an issue for autoconf.in file?</span></div><div class="line" id="154142"><span class="nick" style="color:#6d2462"><a href="#154142" label="[15:41:42]">&lt;bauen1&gt;</a></span><span class="message">stikonas: it's basically <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/issues/92">https://github.com/fosslinux/live-bootstrap/issues/92</a>  already</span></div><div class="line" id="154145"><span class="nick" style="color:#2e2a4a"><a href="#154145" label="[15:41:45]">&lt;stikonas&gt;</a></span><span class="message">oh ok</span></div><div class="line" id="154203"><span class="nick" style="color:#2e2a4a"><a href="#154203" label="[15:42:03]">&lt;stikonas&gt;</a></span><span class="message">can we not just run autom4te --language M4sh ./autoconf.as -o autoconf.in</span></div><div class="line" id="154204"><span class="nick" style="color:#2e2a4a"><a href="#154204" label="[15:42:04]">&lt;stikonas&gt;</a></span><span class="message">?</span></div><div class="line" id="154206"><span class="nick" style="color:#2e2a4a"><a href="#154206" label="[15:42:06]">&lt;stikonas&gt;</a></span><span class="message">in src_prepare?</span></div><div class="line" id="154207"><span class="nick" style="color:#6d2462"><a href="#154207" label="[15:42:07]">&lt;bauen1&gt;</a></span><span class="message">can't edit the title, but this issue is about the symptoms of using the pregenerated autoconf.in</span></div><div class="line" id="154230"><span class="nick" style="color:#6d2462"><a href="#154230" label="[15:42:30]">&lt;bauen1&gt;</a></span><span class="message">stikonas: i'm not too sure, you should take a look at bin/Makefile.in in autoconf-2.57 since in theory there is a target to generate it</span></div><div class="line" id="154244"><span class="nick" style="color:#2e2a4a"><a href="#154244" label="[15:42:44]">&lt;stikonas&gt;</a></span><span class="message">that's what that target does...</span></div><div class="line" id="154303"><span class="nick" style="color:#2e2a4a"><a href="#154303" label="[15:43:03]">&lt;stikonas&gt;</a></span><span class="message">it's just that we might be using older autom4te</span></div><div class="line" id="154312"><span class="nick" style="color:#6d2462"><a href="#154312" label="[15:43:12]">&lt;bauen1&gt;</a></span><span class="message">let me take another look</span></div><div class="line" id="154319"><span class="nick" style="color:#2e2a4a"><a href="#154319" label="[15:43:19]">&lt;stikonas&gt;</a></span><span class="message">instead of that build-in progress autom4te form current tarball</span></div><div class="line" id="154344"><span class="nick" style="color:#6d2462"><a href="#154344" label="[15:43:44]">&lt;bauen1&gt;</a></span><span class="message">ah yes and autom4te requires autom4te.cfg</span></div><div class="line" id="154400"><span class="nick" style="color:#2e2a4a"><a href="#154400" label="[15:44:00]">&lt;stikonas&gt;</a></span><span class="message">but only that temporary autom4ate?</span></div><div class="line" id="154406"><span class="nick" style="color:#2e2a4a"><a href="#154406" label="[15:44:06]">&lt;stikonas&gt;</a></span><span class="message">not the one that is installed in /after/bin</span></div><div class="line" id="154432"><span class="nick" style="color:#6d2462"><a href="#154432" label="[15:44:32]">&lt;bauen1&gt;</a></span><span class="message">i understand too little about autohell \o/</span></div><div class="line" id="154445"><span class="nick" style="color:#6d2462"><a href="#154445" label="[15:44:45]">&lt;bauen1&gt;</a></span><span class="message">if that command makes things work then that looks good enough</span></div><div class="line" id="154453"><span class="nick" style="color:#2e2a4a"><a href="#154453" label="[15:44:53]">&lt;stikonas&gt;</a></span><span class="message">well, I haven't tried...</span></div><div class="line" id="154459"><span class="nick" style="color:#2e2a4a"><a href="#154459" label="[15:44:59]">&lt;stikonas&gt;</a></span><span class="message">but it might</span></div><div class="line" id="154537"><span class="nick" style="color:#2e2a4a"><a href="#154537" label="[15:45:37]">&lt;stikonas&gt;</a></span><span class="message">well, I guess it would be  autom4te --language M4sh ./bin/autoconf.as -o bin/autoconf.in</span></div><div class="line" id="154553"><span class="nick" style="color:#2e2a4a"><a href="#154553" label="[15:45:53]">&lt;stikonas&gt;</a></span><span class="message">possibly versioned autom4te</span></div><div class="line" id="161130"><span class="nick" style="color:#6d2462"><a href="#161130" label="[16:11:30]">&lt;bauen1&gt;</a></span><span class="message">being verify specific in what version of those tools you want will probably be a requirement if my work is merged, i can't really deal with multiple &quot;pseudo packages&quot; providing /after/bin/aclocal nicely</span></div><div class="line" id="161141"><span class="nick" style="color:#6d2462"><a href="#161141" label="[16:11:41]">&lt;bauen1&gt;</a></span><span class="message">and you'll have to specify a version anyway</span></div><div class="line" id="161252"><span class="nick" style="color:#6d2462"><a href="#161252" label="[16:12:52]">&lt;bauen1&gt;</a></span><span class="message">live</span></div><div class="line" id="162046"><span class="nick" style="color:#2e2a4a"><a href="#162046" label="[16:20:46]">&lt;stikonas&gt;</a></span><span class="message">well, at the moment aclocal symlinks are created to point to the latest version...</span></div><div class="line" id="162100"><span class="nick" style="color:#2e2a4a"><a href="#162100" label="[16:21:00]">&lt;stikonas&gt;</a></span><span class="message">at least until latest autoconf and automake are built</span></div><div class="line" id="162112"><span class="nick" style="color:#2e2a4a"><a href="#162112" label="[16:21:12]">&lt;stikonas&gt;</a></span><span class="message">after that it's basically almost always the latest version that we want to use</span></div><div class="line" id="162123"><span class="nick" style="color:#2e2a4a"><a href="#162123" label="[16:21:23]">&lt;stikonas&gt;</a></span><span class="message">later versions of autotools are significantly more compatible anywya</span></div><div class="line" id="162159"><span class="nick" style="color:#2e2a4a"><a href="#162159" label="[16:21:59]">&lt;stikonas&gt;</a></span><span class="message">but yes, in most places we explicitely specify e.g. autoconf-2.52</span></div><div class="line" id="163049"><span class="nick" style="color:#6d2462"><a href="#163049" label="[16:30:49]">&lt;bauen1&gt;</a></span><span class="message">i'll be finding every place where we don't lol</span></div><div class="line" id="170140"><span class="nick" style="color:#80b1d3"><a href="#170140" label="[17:01:40]">&lt;gforce_d11977&gt;</a></span><span class="message">ok, here another issue seen with mass-run: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/issues/93">https://github.com/fosslinux/live-bootstrap/issues/93</a> </span></div><div class="line" id="170253"><span class="nick" style="color:#80b1d3"><a href="#170253" label="[17:02:53]">&lt;gforce_d11977&gt;</a></span><span class="message">(make is now more verbose BTW)</span></div><div class="line" id="174226"><span class="nick" style="color:#80b1d3"><a href="#174226" label="[17:42:26]">&lt;gforce_d11977&gt;</a></span><span class="message">another seldom issue: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/issues/94">https://github.com/fosslinux/live-bootstrap/issues/94</a> </span></div><div class="line" id="174458"><span class="nick" style="color:#80b1d3"><a href="#174458" label="[17:44:58]">&lt;gforce_d11977&gt;</a></span><span class="message">stikonas: bauen1: there is something really strange happening, and i'am out of ideas now. i must have something to do with buffering and so with the underlying libc IMHO</span></div><div class="line" id="174723"><span class="nick" style="color:#2e2a4a"><a href="#174723" label="[17:47:23]">&lt;stikonas&gt;</a></span><span class="message">I saw automake issue maybe twice...</span></div><div class="line" id="174732"><span class="nick" style="color:#2e2a4a"><a href="#174732" label="[17:47:32]">&lt;stikonas&gt;</a></span><span class="message">definitely not as frequent here as 20%...</span></div><div class="line" id="175837"><span class="nick" style="color:#6d2462"><a href="#175837" label="[17:58:37]">&lt;bauen1&gt;</a></span><span class="message">gforce_d11977: and you're displaying sha256sum of basically after/{bin,lib,share} ?</span></div><div class="line" id="180650"><span class="nick" style="color:#6d2462"><a href="#180650" label="[18:06:50]">&lt;bauen1&gt;</a></span><span class="message">well the good news is that none of the sha256sums seem to mismatch between the good / bad run</span></div><div class="line" id="180658"><span class="nick" style="color:#6d2462"><a href="#180658" label="[18:06:58]">&lt;bauen1&gt;</a></span><span class="message">but i suppose that's bad news too</span></div><div class="line" id="180935"><span class="nick" style="color:#6d2462"><a href="#180935" label="[18:09:35]">&lt;bauen1&gt;</a></span><span class="message">and the make debug output already shows a few timing differences, e.g. `01h11m32s | Prerequisite `include/gettext.h' is newer than target `builtins/common.c'.`</span></div><div class="line" id="181249"><span class="nick" style="color:#6d2462"><a href="#181249" label="[18:12:49]">&lt;bauen1&gt;</a></span><span class="message">i'm not sure if we want to remove pregenerated man pages / documentation, but imho yes</span></div><div class="line" id="181505"><span class="nick" style="color:#2e2a4a"><a href="#181505" label="[18:15:05]">&lt;stikonas&gt;</a></span><span class="message">bauen1: yes, I think we want. I already opened an issue some time ago</span></div><div class="line" id="181620"><span class="nick" style="color:#2e2a4a"><a href="#181620" label="[18:16:20]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/issues/86">https://github.com/fosslinux/live-bootstrap/issues/86</a> </span></div><div class="line" id="181638"><span class="nick" style="color:#2e2a4a"><a href="#181638" label="[18:16:38]">&lt;stikonas&gt;</a></span><span class="message">should be easy to deal with those</span></div><div class="line" id="181652"><span class="nick" style="color:#2e2a4a"><a href="#181652" label="[18:16:52]">&lt;stikonas&gt;</a></span><span class="message">as they are clearly not used in building anything later</span></div><div class="line" id="182134"><span class="nick" style="color:#6d2462"><a href="#182134" label="[18:21:34]">&lt;bauen1&gt;</a></span><span class="message">right, and they're slightly affecting what make does (depending on timing) as seen in the logs above</span></div><div class="line" id="182222"><span class="nick" style="color:#6d2462"><a href="#182222" label="[18:22:22]">&lt;bauen1&gt;</a></span><span class="message">i should probably put my commits for fixing DESTDIR in various cases, this and some other tiny fixes together for a mr</span></div><div class="line" id="184013"><span class="nick" style="color:#6d2462"><a href="#184013" label="[18:40:13]">&lt;bauen1&gt;</a></span><span class="message">ah that great moment when tcc is finally compiled and stuff starts to actually happen ...</span></div><div class="line" id="185223"><span class="nick" style="color:#2e2a4a"><a href="#185223" label="[18:52:23]">&lt;stikonas&gt;</a></span><span class="message">bauen1: well, there is always pder/overlay to speed things up</span></div><div class="line" id="185230"><span class="nick" style="color:#2e2a4a"><a href="#185230" label="[18:52:30]">&lt;stikonas&gt;</a></span><span class="message">although, I think my python PR will break it</span></div><div class="line" id="185241"><span class="nick" style="color:#2e2a4a"><a href="#185241" label="[18:52:41]">&lt;stikonas&gt;</a></span><span class="message">since I'm changing some of the early stuff</span></div><div class="line" id="185453"><span class="nick" style="color:#80b1d3"><a href="#185453" label="[18:54:53]">&lt;gforce_d11977&gt;</a></span><span class="message">i'am digging through musl.git: git log --grep=bug | wc -l = 4323</span></div><div class="line" id="185602"><span class="nick" style="color:#6d2462"><a href="#185602" label="[18:56:02]">&lt;bauen1&gt;</a></span><span class="message">stikonas: actually you're adding support to not use a tmpfs (without taking a chainsaw to rootfs.sh), so now we'd only need to get kaem / bash to skip rebuilding if the checksums already match</span></div><div class="line" id="185651"><span class="nick" style="color:#2e2a4a"><a href="#185651" label="[18:56:51]">&lt;stikonas&gt;</a></span><span class="message">bauen1: am I adding this??</span></div><div class="line" id="185708"><span class="nick" style="color:#2e2a4a"><a href="#185708" label="[18:57:08]">&lt;stikonas&gt;</a></span><span class="message">I don't think this is added right now</span></div><div class="line" id="185721"><span class="nick" style="color:#2e2a4a"><a href="#185721" label="[18:57:21]">&lt;stikonas&gt;</a></span><span class="message">I only had an option to pick another dir for tmpfs mount</span></div><div class="line" id="185751"><span class="nick" style="color:#6d2462"><a href="#185751" label="[18:57:51]">&lt;bauen1&gt;</a></span><span class="message">oh</span></div><div class="line" id="185758"><span class="nick" style="color:#80b1d3"><a href="#185758" label="[18:57:58]">&lt;gforce_d11977&gt;</a></span><span class="message">tonight i will add a job to build 500 CI-runs for getting better numbers how often each error occurs....cu tomorrow. when i should add something for debugging, let me know</span></div><div class="line" id="190732"><span class="nick" style="color:#2e2a4a"><a href="#190732" label="[19:07:32]">&lt;stikonas&gt;</a></span><span class="message">fixing those intermittent errors is annoying..</span></div><div class="line" id="190745"><span class="nick" style="color:#2e2a4a"><a href="#190745" label="[19:07:45]">&lt;stikonas&gt;</a></span><span class="message">but it looks like at least some of those are bugs in releases</span></div><div class="line" id="192803"><span class="nick" style="color:#6c3d55"><a href="#192803" label="[19:28:03]">&lt;pder&gt;</a></span><span class="message">mihi: A few years ago there was some work done on finding and breaking all of the dependency cycles for a Debian bootstrap.  There is a tool called botch that might do what you are describing.  <a rel="nofollow" href="https://manpages.debian.org/unstable/botch/botch.1.en.html">https://manpages.debian.org/unstable/botch/botch.1.en.html</a> </span></div><div class="line" id="202803"><span class="nick">***</span><span class="message notice">lukedashjr is now known as luke-jr</span></div><div class="line" id="234901"><span class="nick" style="color:#2e2a4a"><a href="#234901" label="[23:49:01]">&lt;stikonas&gt;</a></span><span class="message">hmm, got qemu upgrade... now it prints qemu: initrd is too large, cannot support.(max: 8224767, need 151816704)</span></div><div class="line" id="234905"><span class="nick" style="color:#2e2a4a"><a href="#234905" label="[23:49:05]">&lt;stikonas&gt;</a></span><span class="message">that used to work...</span></div><div class="line" id="234908"><span class="nick" style="color:#2e2a4a"><a href="#234908" label="[23:49:08]">&lt;stikonas&gt;</a></span><span class="message">sounds more like downgrade...</span></div><div class="line" id="235020"><span class="nick" style="color:#2e2a4a"><a href="#235020" label="[23:50:20]">&lt;stikonas&gt;</a></span><span class="message">argh, actually my mistake...</span></div><div class="line" id="235220"><span class="nick" style="color:#6d2462"><a href="#235220" label="[23:52:20]">&lt;bauen1&gt;</a></span><span class="message">the initrd is only 144mb ?</span></div><div class="line" id="235408"><span class="nick" style="color:#2e2a4a"><a href="#235408" label="[23:54:08]">&lt;stikonas&gt;</a></span><span class="message">looks like it</span></div><div class="line" id="235420"><span class="nick" style="color:#2e2a4a"><a href="#235420" label="[23:54:20]">&lt;stikonas&gt;</a></span><span class="message">anyway, I was creating VM with 8 MB RAM</span></div><div class="line" id="235422"><span class="nick" style="color:#2e2a4a"><a href="#235422" label="[23:54:22]">&lt;stikonas&gt;</a></span><span class="message">fixed now</span></div><div class="line" id="235429"><span class="nick" style="color:#2e2a4a"><a href="#235429" label="[23:54:29]">&lt;stikonas&gt;</a></span><span class="message">bauen1: and this is uncompressed</span></div><div class="line" id="235455"><span class="nick" style="color:#2e2a4a"><a href="#235455" label="[23:54:55]">&lt;stikonas&gt;</a></span><span class="message">although, most of the stuff inside is in compressed tarballs</span></div><div class="line" id="235739"><span class="nick" style="color:#2e2a4a"><a href="#235739" label="[23:57:39]">&lt;stikonas&gt;</a></span><span class="message">tarballs are 117 mbour of 144</span></div><div class="line" id="235805"><span class="nick" style="color:#2e2a4a"><a href="#235805" label="[23:58:05]">&lt;stikonas&gt;</a></span><span class="message">with gcc of course the largest (15 mb)</span></div><br /></div></body></html>