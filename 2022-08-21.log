<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-08-21.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000150"><span class="nick" style="color:#389600"><a href="#000150" label="[00:01:50]">&lt;oriansj&gt;</a></span><span class="message">in First_pass you seem to call instead of jump to StoreLabel which ends with jmp First_pass; so that'll result in a growing stack</span></div><div class="line" id="000259"><span class="nick" style="color:#8dd3c7"><a href="#000259" label="[00:02:59]">&lt;stikonas&gt;</a></span><span class="message">oriansj: oh, maybe it's just a stupid thing</span></div><div class="line" id="000307"><span class="nick" style="color:#8dd3c7"><a href="#000307" label="[00:03:07]">&lt;stikonas&gt;</a></span><span class="message">I have not set amount of memory in qemu command line</span></div><div class="line" id="000315"><span class="nick" style="color:#8dd3c7"><a href="#000315" label="[00:03:15]">&lt;stikonas&gt;</a></span><span class="message">so it might be 128 MiB</span></div><div class="line" id="000333"><span class="nick" style="color:#8dd3c7"><a href="#000333" label="[00:03:33]">&lt;stikonas&gt;</a></span><span class="message">oh, let me check First_pass</span></div><div class="line" id="000351"><span class="nick" style="color:#8dd3c7"><a href="#000351" label="[00:03:51]">&lt;stikonas&gt;</a></span><span class="message">though stack is deallocated on exit</span></div><div class="line" id="000401"><span class="nick" style="color:#8dd3c7"><a href="#000401" label="[00:04:01]">&lt;stikonas&gt;</a></span><span class="message">so it shouldn't accumulate across runs</span></div><div class="line" id="000435"><span class="nick" style="color:#389600"><a href="#000435" label="[00:04:35]">&lt;oriansj&gt;</a></span><span class="message">but it'll mess with returns inside of your code</span></div><div class="line" id="000503"><span class="nick" style="color:#8dd3c7"><a href="#000503" label="[00:05:03]">&lt;stikonas&gt;</a></span><span class="message">anyway, I'm fixing it, it needs fixing in any case</span></div><div class="line" id="000506"><span class="nick" style="color:#8dd3c7"><a href="#000506" label="[00:05:06]">&lt;stikonas&gt;</a></span><span class="message">thanks for spotting</span></div><div class="line" id="000513"><span class="nick" style="color:#8dd3c7"><a href="#000513" label="[00:05:13]">&lt;stikonas&gt;</a></span><span class="message">let's see if it's this bug</span></div><div class="line" id="000600"><span class="nick" style="color:#8dd3c7"><a href="#000600" label="[00:06:00]">&lt;stikonas&gt;</a></span><span class="message">ok, just that does not fix it</span></div><div class="line" id="000605"><span class="nick" style="color:#8dd3c7"><a href="#000605" label="[00:06:05]">&lt;stikonas&gt;</a></span><span class="message">but let's increase qemu RAM</span></div><div class="line" id="000610"><span class="nick" style="color:#8dd3c7"><a href="#000610" label="[00:06:10]">&lt;stikonas&gt;</a></span><span class="message">cause 128 MiB might be a bit too low</span></div><div class="line" id="000618"><span class="nick" style="color:#389600"><a href="#000618" label="[00:06:18]">&lt;oriansj&gt;</a></span><span class="message">as when you hit EOF, it'll just return to First pass</span></div><div class="line" id="000646"><span class="nick" style="color:#389600"><a href="#000646" label="[00:06:46]">&lt;oriansj&gt;</a></span><span class="message">for as many times as you called StoreLabel</span></div><div class="line" id="000917"><span class="nick" style="color:#8dd3c7"><a href="#000917" label="[00:09:17]">&lt;stikonas&gt;</a></span><span class="message">well, I fixed that StoreLabel</span></div><div class="line" id="000932"><span class="nick" style="color:#8dd3c7"><a href="#000932" label="[00:09:32]">&lt;stikonas&gt;</a></span><span class="message">increasing qemu RAM makes problem less severe but it is still there</span></div><div class="line" id="000953"><span class="nick" style="color:#8dd3c7"><a href="#000953" label="[00:09:53]">&lt;stikonas&gt;</a></span><span class="message">I probably had to run hex2 30 times more to hit the bug</span></div><div class="line" id="001011"><span class="nick" style="color:#8dd3c7"><a href="#001011" label="[00:10:11]">&lt;stikonas&gt;</a></span><span class="message">so something still leaks...</span></div><div class="line" id="001016"><span class="nick" style="color:#8dd3c7"><a href="#001016" label="[00:10:16]">&lt;stikonas&gt;</a></span><span class="message">anyway, let me push jmp fix first...</span></div><div class="line" id="001153"><span class="nick" style="color:#8dd3c7"><a href="#001153" label="[00:11:53]">&lt;stikonas&gt;</a></span><span class="message">ok, pushed</span></div><div class="line" id="001204"><span class="nick" style="color:#8dd3c7"><a href="#001204" label="[00:12:04]">&lt;stikonas&gt;</a></span><span class="message">although maybe I shouldn't have pushed QEMU ram increase just yet...</span></div><div class="line" id="001210"><span class="nick" style="color:#8dd3c7"><a href="#001210" label="[00:12:10]">&lt;stikonas&gt;</a></span><span class="message">well, I'll undo it locally for testing</span></div><div class="line" id="001441"><span class="nick" style="color:#389600"><a href="#001441" label="[00:14:41]">&lt;oriansj&gt;</a></span><span class="message">GetTarget you have: mov rdi, [rip+scratch] don't you mean mov rdi, rip+scratch (or the LEA eqv)</span></div><div class="line" id="001705"><span class="nick" style="color:#389600"><a href="#001705" label="[00:17:05]">&lt;oriansj&gt;</a></span><span class="message">same for GetTarget_miss</span></div><div class="line" id="001754"><span class="nick" style="color:#8dd3c7"><a href="#001754" label="[00:17:54]">&lt;stikonas&gt;</a></span><span class="message">hmm, I don't think &quot;mov rdi, rip+scratch&quot; is legal</span></div><div class="line" id="001822"><span class="nick" style="color:#389600"><a href="#001822" label="[00:18:22]">&lt;oriansj&gt;</a></span><span class="message">as the original was mov rdi, table</span></div><div class="line" id="001858"><span class="nick" style="color:#389600"><a href="#001858" label="[00:18:58]">&lt;oriansj&gt;</a></span><span class="message">and we are wanting the address at table to read from, not the contents at that memory address</span></div><div class="line" id="001910"><span class="nick" style="color:#8dd3c7"><a href="#001910" label="[00:19:10]">&lt;stikonas&gt;</a></span><span class="message">hmm, I guess lea then</span></div><div class="line" id="002057"><span class="nick" style="color:#8dd3c7"><a href="#002057" label="[00:20:57]">&lt;stikonas&gt;</a></span><span class="message">oriansj: oh, actually keep in mind</span></div><div class="line" id="002120"><span class="nick" style="color:#8dd3c7"><a href="#002120" label="[00:21:20]">&lt;stikonas&gt;</a></span><span class="message">that in uefi version scratch label holds memory address of malloced pool</span></div><div class="line" id="002137"><span class="nick" style="color:#8dd3c7"><a href="#002137" label="[00:21:37]">&lt;stikonas&gt;</a></span><span class="message">so I think we do want contents</span></div><div class="line" id="002159"><span class="nick" style="color:#389600"><a href="#002159" label="[00:21:59]">&lt;oriansj&gt;</a></span><span class="message">as the operations that follow would be setting that and reading it but doing mov r*, [value] could result in arbitrary memory being used unless you set that value yourself first</span></div><div class="line" id="002204"><span class="nick" style="color:#8dd3c7"><a href="#002204" label="[00:22:04]">&lt;stikonas&gt;</a></span><span class="message">see <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/amd64/Development/hex2.S#L32">https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/amd64/Development/hex2.S#L32</a> </span></div><div class="line" id="002221"><span class="nick" style="color:#8dd3c7"><a href="#002221" label="[00:22:21]">&lt;stikonas&gt;</a></span><span class="message">but it's plausible that something in those functions is not adjusted</span></div><div class="line" id="002233"><span class="nick" style="color:#8dd3c7"><a href="#002233" label="[00:22:33]">&lt;stikonas&gt;</a></span><span class="message">to my change</span></div><div class="line" id="002305"><span class="nick" style="color:#389600"><a href="#002305" label="[00:23:05]">&lt;oriansj&gt;</a></span><span class="message">well the best news is those changes can be tested on POSIX too</span></div><div class="line" id="002320"><span class="nick" style="color:#8dd3c7"><a href="#002320" label="[00:23:20]">&lt;stikonas&gt;</a></span><span class="message">yes, but Linux kernel might be more robust</span></div><div class="line" id="002335"><span class="nick" style="color:#8dd3c7"><a href="#002335" label="[00:23:35]">&lt;stikonas&gt;</a></span><span class="message">and freeing resources when process exits</span></div><div class="line" id="002425"><span class="nick" style="color:#389600"><a href="#002425" label="[00:24:25]">&lt;oriansj&gt;</a></span><span class="message">well if the diff between the POSIX and the UEFI version is just the setup and the syscalls, it'll really limit the number of spaces where things have gone wrong</span></div><div class="line" id="002441"><span class="nick" style="color:#8dd3c7"><a href="#002441" label="[00:24:41]">&lt;stikonas&gt;</a></span><span class="message">that's true</span></div><div class="line" id="002442"><span class="nick" style="color:#389600"><a href="#002442" label="[00:24:42]">&lt;oriansj&gt;</a></span><span class="message">^have^could have^</span></div><div class="line" id="002452"><span class="nick" style="color:#389600"><a href="#002452" label="[00:24:52]">&lt;oriansj&gt;</a></span><span class="message">and debugging on posix is much easier</span></div><div class="line" id="002459"><span class="nick" style="color:#8dd3c7"><a href="#002459" label="[00:24:59]">&lt;stikonas&gt;</a></span><span class="message">that's for sure...</span></div><div class="line" id="002641"><span class="nick" style="color:#389600"><a href="#002641" label="[00:26:41]">&lt;oriansj&gt;</a></span><span class="message">so perhaps do a [rip+###] on POSIX and then do a copy/paste? as you'll ensure all the core logic is correct</span></div><div class="line" id="002651"><span class="nick" style="color:#8dd3c7"><a href="#002651" label="[00:26:51]">&lt;stikonas&gt;</a></span><span class="message">yaeh, I can try that</span></div><div class="line" id="033545"><span class="nick" style="color:#389600"><a href="#033545" label="[03:35:45]">&lt;oriansj&gt;</a></span><span class="message">jesus rust/cargo is insane; I need a nightly rust compiler but also the stable rust compiler to build a 932line rust program</span></div><div class="line" id="034245"><span class="nick" style="color:#6b8072"><a href="#034245" label="[03:42:45]">&lt;aggi&gt;</a></span><span class="message">and llvm/rust themsleves require hours to compile</span></div><div class="line" id="034326"><span class="nick" style="color:#389600"><a href="#034326" label="[03:43:26]">&lt;oriansj&gt;</a></span><span class="message">aggi: even days if you are on a limited RAM system and have to page out to spinning disk</span></div><div class="line" id="034412"><span class="nick" style="color:#6b8072"><a href="#034412" label="[03:44:12]">&lt;aggi&gt;</a></span><span class="message">oriansj: i use cortex a53 SBC... and g++ hitting OOM regularly was one reason to remove all of it, and blocking at gcc47</span></div><div class="line" id="034421"><span class="nick" style="color:#6b8072"><a href="#034421" label="[03:44:21]">&lt;aggi&gt;</a></span><span class="message">next idea, was, to utilize a tcc-toolchain</span></div><div class="line" id="034446"><span class="nick" style="color:#6b8072"><a href="#034446" label="[03:44:46]">&lt;aggi&gt;</a></span><span class="message">and a few hundred LoC of aarch32 ASM break the whole idea of i</span></div><div class="line" id="034448"><span class="nick" style="color:#6b8072"><a href="#034448" label="[03:44:48]">&lt;aggi&gt;</a></span><span class="message">it</span></div><div class="line" id="034533"><span class="nick" style="color:#6b8072"><a href="#034533" label="[03:45:33]">&lt;aggi&gt;</a></span><span class="message">i mean, it is possible to move aarch32 GNU gas implementation into arm-tcc... however that's the opposite of the design principle of tcc, to remain small and as simple as possible</span></div><div class="line" id="034553"><span class="nick" style="color:#389600"><a href="#034553" label="[03:45:53]">&lt;oriansj&gt;</a></span><span class="message">well there is no universal assembly standard, so it is mostly what arbitrary crap someone defines and who else copied it</span></div><div class="line" id="034621"><span class="nick" style="color:#389600"><a href="#034621" label="[03:46:21]">&lt;oriansj&gt;</a></span><span class="message">and in your case, who else used it</span></div><div class="line" id="034813"><span class="nick" style="color:#6b8072"><a href="#034813" label="[03:48:13]">&lt;aggi&gt;</a></span><span class="message">a tcc-toolchain and and complete linux distribution has huge potential</span></div><div class="line" id="034900"><span class="nick" style="color:#6b8072"><a href="#034900" label="[03:49:00]">&lt;aggi&gt;</a></span><span class="message">for self-hosting embedded development, a fully capable linux developer system, on a raspi zero 1.3 type system, available for $5</span></div><div class="line" id="034934"><span class="nick" style="color:#6b8072"><a href="#034934" label="[03:49:34]">&lt;aggi&gt;</a></span><span class="message">i mean, i could simply set AS=binutils-as, that's one variable changed inside the build scripts</span></div><div class="line" id="034957"><span class="nick" style="color:#6b8072"><a href="#034957" label="[03:49:57]">&lt;aggi&gt;</a></span><span class="message">however, i do not want to lock into GNU binutils _without_ a reasonable alternative available</span></div><div class="line" id="035027"><span class="nick" style="color:#6b8072"><a href="#035027" label="[03:50:27]">&lt;aggi&gt;</a></span><span class="message">and the progress made by bootstrappable.org with i386 tcc and musl-libc-1.x is remarkable, however i am not willing to move to x86 either</span></div><div class="line" id="035126"><span class="nick" style="color:#6b8072"><a href="#035126" label="[03:51:26]">&lt;aggi&gt;</a></span><span class="message">and i think, it is not at least possible/feasible to implement a reasonable aarch32 assembler alternative</span></div><div class="line" id="035148"><span class="nick" style="color:#389600"><a href="#035148" label="[03:51:48]">&lt;oriansj&gt;</a></span><span class="message">aggi: that is fine, just realize progress to additional architectures will certainly take time and much more effort</span></div><div class="line" id="035244"><span class="nick" style="color:#6b8072"><a href="#035244" label="[03:52:44]">&lt;aggi&gt;</a></span><span class="message">oriansj: i rather programm with a Z80 then enjoying any more of the innovation and progress</span></div><div class="line" id="035306"><span class="nick" style="color:#389600"><a href="#035306" label="[03:53:06]">&lt;oriansj&gt;</a></span><span class="message">aggi: if someone can be implemented once, it can be done so again. It just requires someone willing to burn a year or two to get it done</span></div><div class="line" id="035333"><span class="nick" style="color:#6b8072"><a href="#035333" label="[03:53:33]">&lt;aggi&gt;</a></span><span class="message">i can't afford it</span></div><div class="line" id="035342"><span class="nick" style="color:#6b8072"><a href="#035342" label="[03:53:42]">&lt;aggi&gt;</a></span><span class="message">and it is, currently, beyond my abilities</span></div><div class="line" id="035347"><span class="nick" style="color:#389600"><a href="#035347" label="[03:53:47]">&lt;oriansj&gt;</a></span><span class="message">aggi: I'm partial to 6809 myself</span></div><div class="line" id="035431"><span class="nick" style="color:#389600"><a href="#035431" label="[03:54:31]">&lt;oriansj&gt;</a></span><span class="message">and we are more than willing to help expand people's abilities</span></div><div class="line" id="035449"><span class="nick" style="color:#389600"><a href="#035449" label="[03:54:49]">&lt;oriansj&gt;</a></span><span class="message">to the level where you could create anything you wanted.</span></div><div class="line" id="035528"><span class="nick" style="color:#6b8072"><a href="#035528" label="[03:55:28]">&lt;aggi&gt;</a></span><span class="message">currently i am thinking to play with Z80</span></div><div class="line" id="035550"><span class="nick" style="color:#6b8072"><a href="#035550" label="[03:55:50]">&lt;aggi&gt;</a></span><span class="message">however, whatever i do, i simply cannot afford to invest years of work for this</span></div><div class="line" id="035619"><span class="nick" style="color:#389600"><a href="#035619" label="[03:56:19]">&lt;oriansj&gt;</a></span><span class="message">aggi: as you wish</span></div><div class="line" id="035735"><span class="nick" style="color:#389600"><a href="#035735" label="[03:57:35]">&lt;oriansj&gt;</a></span><span class="message">when I get back to M3 work, it should cover your use case and if you help test and report bugs the work would go faster</span></div><div class="line" id="040414"><span class="nick" style="color:#6b8072"><a href="#040414" label="[04:04:14]">&lt;aggi&gt;</a></span><span class="message">i don't think it's worth the effort, to waste precious development manpower to re-implement aarch32 GNU gas in arm-tcc</span></div><div class="line" id="040930"><span class="nick" style="color:#389600"><a href="#040930" label="[04:09:30]">&lt;oriansj&gt;</a></span><span class="message">aggi: well M3 is supposed to be a binutils drop in replacement with only the minimal feature/functionality subset needed and buildable by M2-Planet as a design goal</span></div><div class="line" id="040957"><span class="nick" style="color:#389600"><a href="#040957" label="[04:09:57]">&lt;oriansj&gt;</a></span><span class="message">and as it is my time, it is mine to waste in any way I see fit</span></div><div class="line" id="041046"><span class="nick" style="color:#389600"><a href="#041046" label="[04:10:46]">&lt;oriansj&gt;</a></span><span class="message">I don't expect anyone else to use it or even care; I build these things because they look like fun and bootstrapping is a huge amount of fun and enjoyment for me</span></div><div class="line" id="041210"><span class="nick" style="color:#80b1d3"><a href="#041210" label="[04:12:10]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: making progress. rn im trying to get drone ci working properly</span></div><div class="line" id="041319"><span class="nick" style="color:#80b1d3"><a href="#041319" label="[04:13:19]">&lt;fossy&gt;</a></span><span class="message"> <a rel="nofollow" href="http://216.158.66.106/fosslinux/live-bootstrap/42/6/2">http://216.158.66.106/fosslinux/live-bootstrap/42/6/2</a>  can anyone give any ideas as to why qemu + expect might be doing this? it seems like some console/tty misconfiguration but i have no idea what.</span></div><div class="line" id="041334"><span class="nick" style="color:#80b1d3"><a href="#041334" label="[04:13:34]">&lt;fossy&gt;</a></span><span class="message">(ik that its timing out but this is re: the newlines after every character for no reason haha)</span></div><div class="line" id="042126"><span class="nick" style="color:#6b8072"><a href="#042126" label="[04:21:26]">&lt;aggi&gt;</a></span><span class="message">today i archived the tcc-toolchain/userspace containing those ~600builds; as soon as some particular bureaucratic hindrances for me to work and live in germany are settled i'll publish</span></div><div class="line" id="121201"><span class="nick" style="color:#6d2462"><a href="#121201" label="[12:12:01]">&lt;stikonas[m]&gt;</a></span><span class="message">fossy, I don't think I can get to your link, I get connection dropped</span></div><div class="line" id="121205"><span class="nick" style="color:#6d2462"><a href="#121205" label="[12:12:05]">&lt;stikonas[m]&gt;</a></span><span class="message">possibly firewall isssue</span></div><div class="line" id="130920"><span class="nick" style="color:#80b1d3"><a href="#130920" label="[13:09:20]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: gah</span></div><div class="line" id="130958"><span class="nick" style="color:#80b1d3"><a href="#130958" label="[13:09:58]">&lt;fossy&gt;</a></span><span class="message">fosshost has something configured wrong on their firewall or somthing, it drops out from time to time and comes back if you poke it enough</span></div><div class="line" id="130959"><span class="nick" style="color:#80b1d3"><a href="#130959" label="[13:09:59]">&lt;fossy&gt;</a></span><span class="message">try now?</span></div><div class="line" id="131021"><span class="nick" style="color:#8dd3c7"><a href="#131021" label="[13:10:21]">&lt;stikonas&gt;</a></span><span class="message">ok, seems to work</span></div><div class="line" id="131329"><span class="nick" style="color:#8dd3c7"><a href="#131329" label="[13:13:29]">&lt;stikonas&gt;</a></span><span class="message">hmm, yes, even log output seems messed up</span></div><div class="line" id="131336"><span class="nick" style="color:#80b1d3"><a href="#131336" label="[13:13:36]">&lt;fossy&gt;</a></span><span class="message">yeah....</span></div><div class="line" id="131946"><span class="nick" style="color:#8dd3c7"><a href="#131946" label="[13:19:46]">&lt;stikonas&gt;</a></span><span class="message">can't see anything obviously wrong in yml file but I haven't used drone before</span></div><div class="line" id="133716"><span class="nick" style="color:#8dd3c7"><a href="#133716" label="[13:37:16]">&lt;stikonas&gt;</a></span><span class="message">maybe you can try non-qemu mode first?</span></div><div class="line" id="133721"><span class="nick" style="color:#8dd3c7"><a href="#133721" label="[13:37:21]">&lt;stikonas&gt;</a></span><span class="message">and see if that works</span></div><div class="line" id="134457"><span class="nick" style="color:#80b1d3"><a href="#134457" label="[13:44:57]">&lt;fossy&gt;</a></span><span class="message">yeah, i can try that</span></div><div class="line" id="134504"><span class="nick" style="color:#8dd3c7"><a href="#134504" label="[13:45:04]">&lt;stikonas&gt;</a></span><span class="message">fossy: if I download the logs, newlines are fine</span></div><div class="line" id="134512"><span class="nick" style="color:#80b1d3"><a href="#134512" label="[13:45:12]">&lt;fossy&gt;</a></span><span class="message">oh actually?</span></div><div class="line" id="134514"><span class="nick" style="color:#80b1d3"><a href="#134514" label="[13:45:14]">&lt;fossy&gt;</a></span><span class="message">hmmm</span></div><div class="line" id="135957"><span class="nick" style="color:#8dd3c7"><a href="#135957" label="[13:59:57]">&lt;stikonas&gt;</a></span><span class="message">fossy: maybe that's how done view works?</span></div><div class="line" id="140018"><span class="nick" style="color:#8dd3c7"><a href="#140018" label="[14:00:18]">&lt;stikonas&gt;</a></span><span class="message">if it timestamps output</span></div><div class="line" id="140022"><span class="nick" style="color:#8dd3c7"><a href="#140022" label="[14:00:22]">&lt;stikonas&gt;</a></span><span class="message">that might be expected</span></div><div class="line" id="140049"><span class="nick" style="color:#8dd3c7"><a href="#140049" label="[14:00:49]">&lt;stikonas&gt;</a></span><span class="message">early steps in stage0-posix a printed one byte at a time</span></div><div class="line" id="140329"><span class="nick" style="color:#8dd3c7"><a href="#140329" label="[14:03:29]">&lt;stikonas&gt;</a></span><span class="message">hmm, though it also happens in earlier stages (seabios...)</span></div><div class="line" id="144239"><span class="nick" style="color:#80b1d3"><a href="#144239" label="[14:42:39]">&lt;fossy&gt;</a></span><span class="message">stikonas: aha, it was some random ansi control code that the web view didn't like, just piped it through ansi2txt which strips all those random control codes and leaves with raw text</span></div><div class="line" id="150716"><span class="nick" style="color:#389600"><a href="#150716" label="[15:07:16]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well it is possible to buffer input and output without much additional complexity for reducing the number of syscalls/interrupts and improve performance</span></div><div class="line" id="150824"><span class="nick" style="color:#389600"><a href="#150824" label="[15:08:24]">&lt;oriansj&gt;</a></span><span class="message">In the DEBUG.exe version of hex0, the file is loaded into memory by DEBUG.exe and the resulting block of memory is written to disk on exit</span></div><div class="line" id="160343"><span class="nick" style="color:#8dd3c7"><a href="#160343" label="[16:03:43]">&lt;stikonas&gt;</a></span><span class="message">anyway, it looks like fossy had different issue....</span></div><div class="line" id="224811"><span class="nick" style="color:#8dd3c7"><a href="#224811" label="[22:48:11]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I've pushed those changes to stage0-posix-amd64 to convert hex2 to position independent code</span></div><div class="line" id="224819"><span class="nick" style="color:#8dd3c7"><a href="#224819" label="[22:48:19]">&lt;stikonas&gt;</a></span><span class="message">(and use allocated memory for scratch area)</span></div><div class="line" id="224847"><span class="nick" style="color:#8dd3c7"><a href="#224847" label="[22:48:47]">&lt;stikonas&gt;</a></span><span class="message">so far can't see anything wrong on posix...</span></div><div class="line" id="234620"><span class="nick" style="color:#8dd3c7"><a href="#234620" label="[23:46:20]">&lt;stikonas&gt;</a></span><span class="message">oriansj: hmm, I might have accidentally fix that hex2.S bug...</span></div><div class="line" id="234622"><span class="nick" style="color:#8dd3c7"><a href="#234622" label="[23:46:22]">&lt;stikonas&gt;</a></span><span class="message">on UEFI</span></div><div class="line" id="234757"><span class="nick" style="color:#8dd3c7"><a href="#234757" label="[23:47:57]">&lt;stikonas&gt;</a></span><span class="message">though I'm not yet sure why it worked <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi/commit/ce5f77ddc521b2091323d4315d20ea114a5eb4d1">https://git.stikonas.eu/andrius/stage0-uefi/commit/ce5f77ddc521b2091323d4315d20ea114a5eb4d1</a> </span></div><div class="line" id="234916"><span class="nick" style="color:#8dd3c7"><a href="#234916" label="[23:49:16]">&lt;stikonas&gt;</a></span><span class="message">oh, I think I see the bug</span></div><div class="line" id="234921"><span class="nick" style="color:#8dd3c7"><a href="#234921" label="[23:49:21]">&lt;stikonas&gt;</a></span><span class="message">the bug was in freeing memory</span></div><div class="line" id="234935"><span class="nick" style="color:#8dd3c7"><a href="#234935" label="[23:49:35]">&lt;stikonas&gt;</a></span><span class="message">&quot;mov rcx, r12                       # arg1 = structs&quot; was not pointing to the beginning of reserved area</span></div><div class="line" id="235043"><span class="nick" style="color:#8dd3c7"><a href="#235043" label="[23:50:43]">&lt;stikonas&gt;</a></span><span class="message">so at the very least I learned that we really need to cleanup up after ourselves in UEFI</span></div><br /></div></body></html>