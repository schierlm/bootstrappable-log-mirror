<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-03-04.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000838"><span class="nick" style="color:#8dd3c7"><a href="#000838" label="[00:08:38]">&lt;OriansJ&gt;</a></span><span class="message">fossy: I never added variable support to kaem, that is entirely your achievement; one that I might have never done</span></div><div class="line" id="002603"><span class="nick" style="color:#8dd3c7"><a href="#002603" label="[00:26:03]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: we may need to lower RISC-V's priority in regards to architecture bootstrapping</span></div><div class="line" id="002735"><span class="nick" style="color:#2e2a4a"><a href="#002735" label="[00:27:35]">&lt;dddddd&gt;</a></span><span class="message">What are you thinking to replace it with?</span></div><div class="line" id="002944"><span class="nick" style="color:#8dd3c7"><a href="#002944" label="[00:29:44]">&lt;OriansJ&gt;</a></span><span class="message">PowerPC</span></div><div class="line" id="003108"><span class="nick" style="color:#8dd3c7"><a href="#003108" label="[00:31:08]">&lt;OriansJ&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.crowdsupply.com/libre-risc-v/m-class/updates/openpower-eula-released-fosdem-and-more">https://www.crowdsupply.com/libre-risc-v/m-class/updates/openpower-eula-released-fosdem-and-more</a> </span></div><div class="line" id="003752"><span class="nick" style="color:#2e2a4a"><a href="#003752" label="[00:37:52]">&lt;dddddd&gt;</a></span><span class="message">I'll have to dig into the details, meanwhile... why do you think this might be more important?</span></div><div class="line" id="003925"><span class="nick" style="color:#2e2a4a"><a href="#003925" label="[00:39:25]">&lt;dddddd&gt;</a></span><span class="message">Does the ISA under that EULA have implementations on the wild? (that'd be a good reason)</span></div><div class="line" id="003952"><span class="nick" style="color:#2e2a4a"><a href="#003952" label="[00:39:52]">&lt;dddddd&gt;</a></span><span class="message">RISC-V is harder to buy AFAIK</span></div><div class="line" id="004037"><span class="nick" style="color:#6b8072"><a href="#004037" label="[00:40:37]">&lt;xentrac&gt;</a></span><span class="message">PowerPC as of 2000 is necessarily patent-free (although any particular implementation of it may not be)</span></div><div class="line" id="004553"><span class="nick" style="color:#80b1d3"><a href="#004553" label="[00:45:53]">&lt;fossy&gt;</a></span><span class="message">OriansJ: I do eventually plan to add multiple variables in one token to kaem</span></div><div class="line" id="004614"><span class="nick" style="color:#80b1d3"><a href="#004614" label="[00:46:14]">&lt;fossy&gt;</a></span><span class="message">but, that is a bit away, I don't see that as extremely important for the time being</span></div><div class="line" id="005230"><span class="nick" style="color:#2e2a4a"><a href="#005230" label="[00:52:30]">&lt;dddddd&gt;</a></span><span class="message">I'll add Power to my RISC-V readings and keep completing M1.scm of slow-utils.</span></div><div class="line" id="005323"><span class="nick" style="color:#8dd3c7"><a href="#005323" label="[00:53:23]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: more existing hardware available to use to do development on and a better known set of parties involved.</span></div><div class="line" id="005359"><span class="nick" style="color:#8dd3c7"><a href="#005359" label="[00:53:59]">&lt;OriansJ&gt;</a></span><span class="message">fossy: sounds good</span></div><div class="line" id="005438"><span class="nick" style="color:#80b1d3"><a href="#005438" label="[00:54:38]">&lt;fossy&gt;</a></span><span class="message">dddddd, deesix: are you the same people?</span></div><div class="line" id="005458"><span class="nick" style="color:#2e2a4a"><a href="#005458" label="[00:54:58]">&lt;dddddd&gt;</a></span><span class="message">yep</span></div><div class="line" id="005528"><span class="nick" style="color:#8dd3c7"><a href="#005528" label="[00:55:28]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: indeed and thousands of existing machines powerful enough to do the bootstrapping work on for cheap. vs $1K+ for RISC-V</span></div><div class="line" id="005551"><span class="nick" style="color:#8dd3c7"><a href="#005551" label="[00:55:51]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: I look forward to seeing your slow-utils work</span></div><div class="line" id="005640"><span class="nick" style="color:#8dd3c7"><a href="#005640" label="[00:56:40]">&lt;OriansJ&gt;</a></span><span class="message">not to mention the phrase &quot;We cannot even get access to documentation explaining how to propose new&quot;</span></div><div class="line" id="005713"><span class="nick" style="color:#8dd3c7"><a href="#005713" label="[00:57:13]">&lt;OriansJ&gt;</a></span><span class="message">extensions.</span></div><div class="line" id="005730"><span class="nick" style="color:#8dd3c7"><a href="#005730" label="[00:57:30]">&lt;OriansJ&gt;</a></span><span class="message"> <a rel="nofollow" href="http://lists.libre-riscv.org/pipermail/libre-riscv-dev/2019-October/003035.html">http://lists.libre-riscv.org/pipermail/libre-riscv-dev/2019-October/003035.html</a> </span></div><div class="line" id="010217"><span class="nick" style="color:#8dd3c7"><a href="#010217" label="[01:02:17]">&lt;OriansJ&gt;</a></span><span class="message">markjenkinsznc: when you feel the disassembler.py is ready, could you please tweak User_Interface.py to use it instead of dis and make a pull request for stage0. Then I'll be able to pull the extra null padding out of M1 and the rest of stage0</span></div><div class="line" id="010234"><span class="nick" style="color:#6b8072"><a href="#010234" label="[01:02:34]">&lt;xentrac&gt;</a></span><span class="message">presumably if WD starts selling RISC-V drives, you'll be able to get a RISC-V microcontroller as part of a US$40 disk drive (I guess SSDs have eaten the low end of the disk drive market?)</span></div><div class="line" id="010616"><span class="nick" style="color:#8dd3c7"><a href="#010616" label="[01:06:16]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: well a single PCB and 6 chips are cheaper than a single electric motor</span></div><div class="line" id="010717"><span class="nick" style="color:#8dd3c7"><a href="#010717" label="[01:07:17]">&lt;OriansJ&gt;</a></span><span class="message">the problem with the RISC-V microcontrollers is that the amount of RAM they can access is extremely (one would dare say artificially) limited</span></div><div class="line" id="010741"><span class="nick" style="color:#8dd3c7"><a href="#010741" label="[01:07:41]">&lt;OriansJ&gt;</a></span><span class="message">There is just no way to run MesCC in less than 2GB of RAM</span></div><div class="line" id="010921"><span class="nick" style="color:#8dd3c7"><a href="#010921" label="[01:09:21]">&lt;OriansJ&gt;</a></span><span class="message">M2-Planet I might be able to get below 256KB with enough work but it just isn't possible to have a C compiler in Scheme using Nyacc fit on a microcontroller</span></div><div class="line" id="011128"><span class="nick" style="color:#8dd3c7"><a href="#011128" label="[01:11:28]">&lt;OriansJ&gt;</a></span><span class="message">Atleast with PowerPC one can get a PowerBook G4 with 512MB of RAM</span></div><div class="line" id="011141"><span class="nick" style="color:#8dd3c7"><a href="#011141" label="[01:11:41]">&lt;OriansJ&gt;</a></span><span class="message">and 5GB of Swap</span></div><div class="line" id="011204"><span class="nick" style="color:#8dd3c7"><a href="#011204" label="[01:12:04]">&lt;OriansJ&gt;</a></span><span class="message">(300GB of Swap if one wanted)</span></div><div class="line" id="011218"><span class="nick" style="color:#8dd3c7"><a href="#011218" label="[01:12:18]">&lt;OriansJ&gt;</a></span><span class="message">(using an SSD)</span></div><div class="line" id="011222"><span class="nick" style="color:#6b8072"><a href="#011222" label="[01:12:22]">&lt;xentrac&gt;</a></span><span class="message">2GB sounds like a lot</span></div><div class="line" id="011253"><span class="nick" style="color:#80b1d3"><a href="#011253" label="[01:12:53]">&lt;fossy&gt;</a></span><span class="message">^^</span></div><div class="line" id="011328"><span class="nick" style="color:#80b1d3"><a href="#011328" label="[01:13:28]">&lt;fossy&gt;</a></span><span class="message">OriansJ: does MesCC really need 2GB of RAM? How about 1/2 a GB of RAM + like 6 GB of swap?</span></div><div class="line" id="011330"><span class="nick" style="color:#8dd3c7"><a href="#011330" label="[01:13:30]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: 2GB is after alot of memory improments in mes.c</span></div><div class="line" id="011452"><span class="nick" style="color:#8dd3c7"><a href="#011452" label="[01:14:52]">&lt;OriansJ&gt;</a></span><span class="message">well the original mes.c nope; believe me I tried</span></div><div class="line" id="011452"><span class="nick" style="color:#80b1d3"><a href="#011452" label="[01:14:52]">&lt;fossy&gt;</a></span><span class="message">interesting.</span></div><div class="line" id="011508"><span class="nick" style="color:#80b1d3"><a href="#011508" label="[01:15:08]">&lt;fossy&gt;</a></span><span class="message">I might have a bit of a play with that</span></div><div class="line" id="011538"><span class="nick" style="color:#6d2462"><a href="#011538" label="[01:15:38]">*</a></span><span class="message">fossy has a 17 year old beast of a laptop, was dad's, that has 1/2 a GB of RAM</span></div><div class="line" id="011538"><span class="nick" style="color:#8dd3c7"><a href="#011538" label="[01:15:38]">&lt;OriansJ&gt;</a></span><span class="message">hence why mes-m2 is a different design to allow a 64MB system with 4GB of swap to work (if slowly)</span></div><div class="line" id="011558"><span class="nick" style="color:#80b1d3"><a href="#011558" label="[01:15:58]">&lt;fossy&gt;</a></span><span class="message">nice.</span></div><div class="line" id="011649"><span class="nick" style="color:#8dd3c7"><a href="#011649" label="[01:16:49]">&lt;OriansJ&gt;</a></span><span class="message">Heck one can buy a Power Mac G5 with 16GB of RAM</span></div><div class="line" id="011656"><span class="nick" style="color:#80b1d3"><a href="#011656" label="[01:16:56]">&lt;fossy&gt;</a></span><span class="message">once /can/</span></div><div class="line" id="011658"><span class="nick" style="color:#80b1d3"><a href="#011658" label="[01:16:58]">&lt;fossy&gt;</a></span><span class="message">but it is expensive</span></div><div class="line" id="011717"><span class="nick" style="color:#80b1d3"><a href="#011717" label="[01:17:17]">&lt;fossy&gt;</a></span><span class="message">hm</span></div><div class="line" id="011720"><span class="nick" style="color:#80b1d3"><a href="#011720" label="[01:17:20]">&lt;fossy&gt;</a></span><span class="message">maybe not so much anymore?</span></div><div class="line" id="011730"><span class="nick" style="color:#8dd3c7"><a href="#011730" label="[01:17:30]">&lt;OriansJ&gt;</a></span><span class="message">but RISC-V microcontrollers only have 16KB of RAM to work with</span></div><div class="line" id="011746"><span class="nick" style="color:#80b1d3"><a href="#011746" label="[01:17:46]">&lt;fossy&gt;</a></span><span class="message">i agree, maybe powerpc &gt; RISCV for the time being</span></div><div class="line" id="011824"><span class="nick" style="color:#80b1d3"><a href="#011824" label="[01:18:24]">&lt;fossy&gt;</a></span><span class="message">I think ARM and PowerPC are the most reasonable targets</span></div><div class="line" id="011831"><span class="nick" style="color:#80b1d3"><a href="#011831" label="[01:18:31]">&lt;fossy&gt;</a></span><span class="message">especially PowerPC</span></div><div class="line" id="011900"><span class="nick" style="color:#80b1d3"><a href="#011900" label="[01:19:00]">&lt;fossy&gt;</a></span><span class="message">also, worse for open hardware but more ubiquitous, are pre Intel ME computers</span></div><div class="line" id="011927"><span class="nick" style="color:#80b1d3"><a href="#011927" label="[01:19:27]">&lt;fossy&gt;</a></span><span class="message">ew, some parts of autohotkey are not bootstrappable</span></div><div class="line" id="011935"><span class="nick" style="color:#80b1d3"><a href="#011935" label="[01:19:35]">&lt;fossy&gt;</a></span><span class="message">why</span></div><div class="line" id="012011"><span class="nick" style="color:#80b1d3"><a href="#012011" label="[01:20:11]">&lt;fossy&gt;</a></span><span class="message">why do people insist on writing interpreters/compilers in the language even if they are bad languages to write a interpreter/compiler in</span></div><div class="line" id="012637"><span class="nick" style="color:#8dd3c7"><a href="#012637" label="[01:26:37]">&lt;OriansJ&gt;</a></span><span class="message">fossy: ego usually</span></div><div class="line" id="012702"><span class="nick" style="color:#8dd3c7"><a href="#012702" label="[01:27:02]">&lt;OriansJ&gt;</a></span><span class="message">or a religious belief that their language of choice is perfect even when all possible evidence points differently</span></div><div class="line" id="012904"><span class="nick" style="color:#6b8072"><a href="#012904" label="[01:29:04]">&lt;xentrac&gt;</a></span><span class="message">well, the jargon file explains that if a language isn't even used to write its own compiler, then it doesn't even rise to the level of being a toy language</span></div><div class="line" id="012912"><span class="nick" style="color:#6b8072"><a href="#012912" label="[01:29:12]">&lt;xentrac&gt;</a></span><span class="message">so probably some people believe that</span></div><div class="line" id="012958"><span class="nick" style="color:#6b8072"><a href="#012958" label="[01:29:58]">&lt;xentrac&gt;</a></span><span class="message">I am surprised to learn that arts of autohotkey are written in autohotkey though!  (?)</span></div><div class="line" id="013014"><span class="nick" style="color:#2e2a4a"><a href="#013014" label="[01:30:14]">&lt;dddddd&gt;</a></span><span class="message">What makes a lang &quot;bad&quot; for that particular tasks?</span></div><div class="line" id="013016"><span class="nick" style="color:#8dd3c7"><a href="#013016" label="[01:30:16]">&lt;OriansJ&gt;</a></span><span class="message">I'd argue that any language that can't build something much larger than itself is not a real language</span></div><div class="line" id="013140"><span class="nick" style="color:#6b8072"><a href="#013140" label="[01:31:40]">&lt;xentrac&gt;</a></span><span class="message">dddddd: compilers are mostly tree pattern matching, so they benefit a lot from garbage collection, pattern matching, and good support for trees and functional programming in general</span></div><div class="line" id="013156"><span class="nick" style="color:#6b8072"><a href="#013156" label="[01:31:56]">&lt;xentrac&gt;</a></span><span class="message">although probably OriansJ disagrees with me on this :)</span></div><div class="line" id="013158"><span class="nick" style="color:#2e2a4a"><a href="#013158" label="[01:31:58]">&lt;dddddd&gt;</a></span><span class="message">fossy, are you on windows?</span></div><div class="line" id="013227"><span class="nick" style="color:#8dd3c7"><a href="#013227" label="[01:32:27]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: I disagree on the garbage collection but I agree on the rest</span></div><div class="line" id="013304"><span class="nick" style="color:#6b8072"><a href="#013304" label="[01:33:04]">&lt;xentrac&gt;</a></span><span class="message">Aaron Hsu recently published his dissertation on writing Co-dfns, a data-parallel compiler written in APL for compiling APL to efficient GPU code</span></div><div class="line" id="013324"><span class="nick" style="color:#6b8072"><a href="#013324" label="[01:33:24]">&lt;xentrac&gt;</a></span><span class="message">apparently a couple of operators were added to Dyalog APL in order to support this as he was writing it</span></div><div class="line" id="013325"><span class="nick" style="color:#8dd3c7"><a href="#013325" label="[01:33:25]">&lt;OriansJ&gt;</a></span><span class="message">well as it was his dad's laptop with only 512MB of RAM, I am guessing limited choices are involved.</span></div><div class="line" id="013435"><span class="nick" style="color:#8dd3c7"><a href="#013435" label="[01:34:35]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: I've have come to understand APL as the sort of language group as R; not designed for general use in programming</span></div><div class="line" id="013548"><span class="nick" style="color:#8dd3c7"><a href="#013548" label="[01:35:48]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: in theory fossy could be running on ReactOS</span></div><div class="line" id="013617"><span class="nick" style="color:#8dd3c7"><a href="#013617" label="[01:36:17]">&lt;OriansJ&gt;</a></span><span class="message"> <a rel="nofollow" href="https://en.wikipedia.org/wiki/ReactOS">https://en.wikipedia.org/wiki/ReactOS</a> </span></div><div class="line" id="013720"><span class="nick" style="color:#2e2a4a"><a href="#013720" label="[01:37:20]">&lt;dddddd&gt;</a></span><span class="message">I'm running debian with 512M most of the time. Anyway, didn't realized that old laptop was much involved in day-to-day tasks (I thought it was just a data point about available hard).</span></div><div class="line" id="013735"><span class="nick" style="color:#6b8072"><a href="#013735" label="[01:37:35]">&lt;xentrac&gt;</a></span><span class="message">OriansJ: that is the most popular point of view, but I don't think it's really correct</span></div><div class="line" id="013756"><span class="nick" style="color:#8dd3c7"><a href="#013756" label="[01:37:56]">&lt;OriansJ&gt;</a></span><span class="message">Which for people who depend upon Win32 binaries applications is entirely reasonable as a first step towards freedom</span></div><div class="line" id="013816"><span class="nick" style="color:#6b8072"><a href="#013816" label="[01:38:16]">&lt;xentrac&gt;</a></span><span class="message">but definitely APL is the kind of language that you would think is especially poorly suited to writing a compiler in</span></div><div class="line" id="013944"><span class="nick" style="color:#8dd3c7"><a href="#013944" label="[01:39:44]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: I learned that quickly when I started talking to the APL community about what sort of compilers and interpreters they had</span></div><div class="line" id="014021"><span class="nick" style="color:#8dd3c7"><a href="#014021" label="[01:40:21]">&lt;OriansJ&gt;</a></span><span class="message">I was pondering bootstrapping APL from M2-Planet to bootstrap C; they shot that down hard and fast</span></div><div class="line" id="014057"><span class="nick" style="color:#8dd3c7"><a href="#014057" label="[01:40:57]">&lt;OriansJ&gt;</a></span><span class="message">since I had already done the build a FORTH and write a Lisp route in assembly</span></div><div class="line" id="014214"><span class="nick" style="color:#8dd3c7"><a href="#014214" label="[01:42:14]">&lt;OriansJ&gt;</a></span><span class="message">I mean honestly, how many people can say they wrote a Lisp that works in only 24KB of RAM?</span></div><div class="line" id="014326"><span class="nick" style="color:#8dd3c7"><a href="#014326" label="[01:43:26]">&lt;OriansJ&gt;</a></span><span class="message">although personally anything less than 2MB makes for some very very short scheme commands</span></div><div class="line" id="014427"><span class="nick" style="color:#6b8072"><a href="#014427" label="[01:44:27]">&lt;xentrac&gt;</a></span><span class="message">yeah :)</span></div><div class="line" id="014443"><span class="nick" style="color:#6b8072"><a href="#014443" label="[01:44:43]">&lt;xentrac&gt;</a></span><span class="message">I think AutoLISP ran in 64K originally and XLISP was comparable</span></div><div class="line" id="014808"><span class="nick" style="color:#8dd3c7"><a href="#014808" label="[01:48:08]">&lt;OriansJ&gt;</a></span><span class="message">now I have resolved to never write another interpreter in assembler for the rest of my life. (kaem.S barely skirted that definition)</span></div><div class="line" id="015012"><span class="nick" style="color:#8dd3c7"><a href="#015012" label="[01:50:12]">&lt;OriansJ&gt;</a></span><span class="message">Even when you have perfectly working C code to reference, it is hard getting every little detail exactly right.</span></div><div class="line" id="015048"><span class="nick" style="color:#8dd3c7"><a href="#015048" label="[01:50:48]">&lt;OriansJ&gt;</a></span><span class="message">Compilers in assembly, stupidly easy to get working and mostly right</span></div><div class="line" id="015346"><span class="nick" style="color:#6b8072"><a href="#015346" label="[01:53:46]">&lt;xentrac&gt;</a></span><span class="message">well, you can use a compiler everywhere you'd use an interpreter, except on the iPhone</span></div><div class="line" id="015349"><span class="nick" style="color:#6b8072"><a href="#015349" label="[01:53:49]">&lt;xentrac&gt;</a></span><span class="message">but not vice versa</span></div><div class="line" id="015540"><span class="nick" style="color:#8dd3c7"><a href="#015540" label="[01:55:40]">&lt;OriansJ&gt;</a></span><span class="message">good thing iOS doesn't matter in regards to bootstrapping</span></div><div class="line" id="015902"><span class="nick" style="color:#6b8072"><a href="#015902" label="[01:59:02]">&lt;xentrac&gt;</a></span><span class="message">you might write something for iOS in the rest of your life</span></div><div class="line" id="020157"><span class="nick" style="color:#8dd3c7"><a href="#020157" label="[02:01:57]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: I work for the State of Michigan as a Computer Security and Reliability Engineer.</span></div><div class="line" id="020253"><span class="nick" style="color:#8dd3c7"><a href="#020253" label="[02:02:53]">&lt;OriansJ&gt;</a></span><span class="message">I would bet money to the contrary and only choose to lose that bet if the offer to do that work included an obscene enough of a reason for me to do so.</span></div><div class="line" id="020343"><span class="nick" style="color:#8dd3c7"><a href="#020343" label="[02:03:43]">&lt;OriansJ&gt;</a></span><span class="message">I figure a Billion USD is enough for me to buy forgiveness for that magnitude of sin.</span></div><div class="line" id="020351"><span class="nick" style="color:#6b8072"><a href="#020351" label="[02:03:51]">&lt;xentrac&gt;</a></span><span class="message">I know, but you might not be working there for the rest of your life</span></div><div class="line" id="020459"><span class="nick" style="color:#8dd3c7"><a href="#020459" label="[02:04:59]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: of course, I plan on eventually retiring before I die (probably from listing to some POS suit drone on and on about mission statements)</span></div><div class="line" id="020617"><span class="nick" style="color:#8dd3c7"><a href="#020617" label="[02:06:17]">&lt;OriansJ&gt;</a></span><span class="message">I refuse to take programming jobs where I can't refuse to do certain things.</span></div><div class="line" id="020648"><span class="nick" style="color:#8dd3c7"><a href="#020648" label="[02:06:48]">&lt;OriansJ&gt;</a></span><span class="message">as a moral choice, it is better to do nothing than do that -RMS</span></div><div class="line" id="021101"><span class="nick" style="color:#8dd3c7"><a href="#021101" label="[02:11:01]">&lt;OriansJ&gt;</a></span><span class="message">Hence why a Billion USD should be enough for me to fund other people to counter any harm I might do by such a job.</span></div><div class="line" id="021131"><span class="nick" style="color:#8dd3c7"><a href="#021131" label="[02:11:31]">&lt;OriansJ&gt;</a></span><span class="message">Less evils can be bought at cheaper prices.</span></div><div class="line" id="023613"><span class="nick" style="color:#6b8072"><a href="#023613" label="[02:36:13]">&lt;xentrac&gt;</a></span><span class="message">that's wonderful</span></div><div class="line" id="024615"><span class="nick" style="color:#8dd3c7"><a href="#024615" label="[02:46:15]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: I just think of it as weighted morality; no good exists without evil.</span></div><div class="line" id="045628"><span class="nick" style="color:#80b1d3"><a href="#045628" label="[04:56:28]">&lt;fossy&gt;</a></span><span class="message">dddddd: I am most def not on windows</span></div><div class="line" id="045633"><span class="nick" style="color:#80b1d3"><a href="#045633" label="[04:56:33]">&lt;fossy&gt;</a></span><span class="message">windows sucks</span></div><div class="line" id="045711"><span class="nick" style="color:#80b1d3"><a href="#045711" label="[04:57:11]">&lt;fossy&gt;</a></span><span class="message">dddddd, OriansJ: oops my bad</span></div><div class="line" id="045716"><span class="nick" style="color:#80b1d3"><a href="#045716" label="[04:57:16]">&lt;fossy&gt;</a></span><span class="message">It is not used day to day</span></div><div class="line" id="045721"><span class="nick" style="color:#80b1d3"><a href="#045721" label="[04:57:21]">&lt;fossy&gt;</a></span><span class="message">it is just sitting there</span></div><div class="line" id="045743"><span class="nick" style="color:#80b1d3"><a href="#045743" label="[04:57:43]">&lt;fossy&gt;</a></span><span class="message">I am interested to use it as a datapoints for limited hardware testing</span></div><div class="line" id="052226"><span class="nick" style="color:#234e69"><a href="#052226" label="[05:22:26]">&lt;markjenkinsznc&gt;</a></span><span class="message">OriansJ, I'll integrate my disassembler to User_Interface.py as asked once I reach feature parity with disasm.c</span></div><div class="line" id="052317"><span class="nick" style="color:#234e69"><a href="#052317" label="[05:23:17]">&lt;markjenkinsznc&gt;</a></span><span class="message">My earlier celebration of minimal viable product was premature, once I added a full test suite there were some binaries which mis-assembled</span></div><div class="line" id="052410"><span class="nick" style="color:#234e69"><a href="#052410" label="[05:24:10]">&lt;markjenkinsznc&gt;</a></span><span class="message">I had the bugs fixed and a working build after that, but since then many slow commits of refactoring as I worked to clean up the code smell that lead me to that set of bugs in the first place</span></div><div class="line" id="052705"><span class="nick" style="color:#234e69"><a href="#052705" label="[05:27:05]">&lt;markjenkinsznc&gt;</a></span><span class="message">17 commits since I passed my test suite, each tested against my test suite as I made things better and more ready for upcoming features</span></div><div class="line" id="052847"><span class="nick" style="color:#234e69"><a href="#052847" label="[05:28:47]">&lt;markjenkinsznc&gt;</a></span><span class="message">almost done that process, the fun part on string recognition is that I intend to allow the user to choose if they want strings in output under the expectation of re-assembled by old four byte padding assembler or new model, we'll flip the default at the right time</span></div><div class="line" id="052918"><span class="nick" style="color:#234e69"><a href="#052918" label="[05:29:18]">&lt;markjenkinsznc&gt;</a></span><span class="message">I've got a good sense of how I'll write string recognition</span></div><div class="line" id="053101"><span class="nick" style="color:#234e69"><a href="#053101" label="[05:31:01]">&lt;markjenkinsznc&gt;</a></span><span class="message">as for discussion of powerisa/powerpc, I'm really excited by computers that include firmware that makes them self-programable (and thus self-bootstrappable) and the norm with 64 bit power for awhile now has been to use Linux and a small userspace (not sure if GNU) as part of the firmware stack (pettiboot)</span></div><div class="line" id="053136"><span class="nick" style="color:#234e69"><a href="#053136" label="[05:31:36]">&lt;markjenkinsznc&gt;</a></span><span class="message">these pettiboot environs don't include a compiler, but I'm pretty sure they include either hexdump or echo with hex escapes</span></div><div class="line" id="053155"><span class="nick" style="color:#234e69"><a href="#053155" label="[05:31:55]">&lt;markjenkinsznc&gt;</a></span><span class="message">so that should be enough to either audit (hexdump) an imported hex0 binary</span></div><div class="line" id="053220"><span class="nick" style="color:#234e69"><a href="#053220" label="[05:32:20]">&lt;markjenkinsznc&gt;</a></span><span class="message">or enough to write (echo) a hex0 binary</span></div><div class="line" id="053331"><span class="nick" style="color:#234e69"><a href="#053331" label="[05:33:31]">&lt;markjenkinsznc&gt;</a></span><span class="message">will be very happy the day i get to do that on my raptor compute systems blackbird (power9) which has an option to go into shell in pettiboot</span></div><div class="line" id="053610"><span class="nick" style="color:#234e69"><a href="#053610" label="[05:36:10]">&lt;markjenkinsznc&gt;</a></span><span class="message">some day I want to include m2-planet, mescc-tools and/or mes/mes-m2 in my pettiboot firmware (fairly small binaries) and encourage raptor compute sys to do the same in devices they ship</span></div><div class="line" id="093604"><span class="nick" style="color:#80b1d3"><a href="#093604" label="[09:36:04]">&lt;fossy&gt;</a></span><span class="message">OriansJ: I am unsure why you would like equal_found = TRUE by default in is_envar?</span></div><div class="line" id="093634"><span class="nick" style="color:#80b1d3"><a href="#093634" label="[09:36:34]">&lt;fossy&gt;</a></span><span class="message">oh wait, I think you mean for the is_envar = 1.</span></div><div class="line" id="103508"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado</span></div><div class="line" id="121225"><span class="nick" style="color:#8dd3c7"><a href="#121225" label="[12:12:25]">&lt;OriansJ&gt;</a></span><span class="message">markjenkinsznc: Well the new string format should be the default but yes that is one of the pieces about PowerPC that should get more people excited about M2-Planet/mescc-tools working on them.</span></div><div class="line" id="121317"><span class="nick" style="color:#8dd3c7"><a href="#121317" label="[12:13:17]">&lt;OriansJ&gt;</a></span><span class="message">fossy: well we did create the CONSTANTs TRUE, FALSE and EOF for a reason.</span></div><div class="line" id="121413"><span class="nick" style="color:#8dd3c7"><a href="#121413" label="[12:14:13]">&lt;OriansJ&gt;</a></span><span class="message">so we don't have to stop and go was TRUE 0 or 1 but rather know the DEFINE will always do the right thing (even if we change the meaning of TRUE and FALSE)</span></div><div class="line" id="210249"><span class="nick" style="color:#80b1d3"><a href="#210249" label="[21:02:49]">&lt;fossy&gt;</a></span><span class="message">OriansJ: yes, I misinterpreted you. I thought you meant that you wanted it to be equal_found = TRUE by default</span></div><br /></div></body></html>