<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-12-28.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000603"><span class="nick" style="color:#389600"><a href="#000603" label="[00:06:03]">&lt;stikonas&gt;</a></span><span class="message">well, I pushed my changes as it is for now...</span></div><div class="line" id="003325"><span class="nick" style="color:#8dd3c7"><a href="#003325" label="[00:33:25]">&lt;oriansj&gt;</a></span><span class="message">stikonas: thank you</span></div><div class="line" id="003350"><span class="nick" style="color:#389600"><a href="#003350" label="[00:33:50]">&lt;stikonas&gt;</a></span><span class="message">well, still a while till we can run non-trivial stuff with it</span></div><div class="line" id="003358"><span class="nick" style="color:#389600"><a href="#003358" label="[00:33:58]">&lt;stikonas&gt;</a></span><span class="message">and these syscalls are easy...</span></div><div class="line" id="003415"><span class="nick" style="color:#389600"><a href="#003415" label="[00:34:15]">&lt;stikonas&gt;</a></span><span class="message">I expect stuff like brk / fork / exec to be a bit harder</span></div><div class="line" id="004932"><span class="nick" style="color:#8dd3c7"><a href="#004932" label="[00:49:32]">&lt;oriansj&gt;</a></span><span class="message">brk just becomes  basic input validation and allocating block multiples</span></div><div class="line" id="005905"><span class="nick" style="color:#8dd3c7"><a href="#005905" label="[00:59:05]">&lt;oriansj&gt;</a></span><span class="message">as we only do brk to allocate memory and never deallocate</span></div><div class="line" id="010115"><span class="nick" style="color:#389600"><a href="#010115" label="[01:01:15]">&lt;stikonas&gt;</a></span><span class="message">or alternatively we switch to mmap...</span></div><div class="line" id="010136"><span class="nick" style="color:#8dd3c7"><a href="#010136" label="[01:01:36]">&lt;oriansj&gt;</a></span><span class="message">also a valid option</span></div><div class="line" id="010918"><span class="nick" style="color:#2e2a4a"><a href="#010918" label="[01:09:18]">&lt;fossy&gt;</a></span><span class="message">stikonas: just to clarify, posix-runner is pretty much a translation layer from POSIX syscalls to UEFI?</span></div><div class="line" id="010927"><span class="nick" style="color:#389600"><a href="#010927" label="[01:09:27]">&lt;stikonas&gt;</a></span><span class="message">fossy: yeah</span></div><div class="line" id="010932"><span class="nick" style="color:#2e2a4a"><a href="#010932" label="[01:09:32]">&lt;fossy&gt;</a></span><span class="message">i see</span></div><div class="line" id="010937"><span class="nick" style="color:#2e2a4a"><a href="#010937" label="[01:09:37]">&lt;fossy&gt;</a></span><span class="message">that would be very useful</span></div><div class="line" id="010942"><span class="nick" style="color:#389600"><a href="#010942" label="[01:09:42]">&lt;stikonas&gt;</a></span><span class="message">fossy: but since M2libc already pretty much does that for basic syscalls</span></div><div class="line" id="010948"><span class="nick" style="color:#389600"><a href="#010948" label="[01:09:48]">&lt;stikonas&gt;</a></span><span class="message">it's really almost trivial</span></div><div class="line" id="011000"><span class="nick" style="color:#2e2a4a"><a href="#011000" label="[01:10:00]">&lt;fossy&gt;</a></span><span class="message">rightt</span></div><div class="line" id="011007"><span class="nick" style="color:#389600"><a href="#011007" label="[01:10:07]">&lt;stikonas&gt;</a></span><span class="message">this is syscall implementation <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi/src/branch/posix-runner/posix-runner/syscalls.c">https://git.stikonas.eu/andrius/stage0-uefi/src/branch/posix-runner/posix-runner/syscalls.c</a> </span></div><div class="line" id="011031"><span class="nick" style="color:#389600"><a href="#011031" label="[01:10:31]">&lt;stikonas&gt;</a></span><span class="message">hmm, I seem to have left some debug line there...</span></div><div class="line" id="011047"><span class="nick" style="color:#389600"><a href="#011047" label="[01:10:47]">&lt;stikonas&gt;</a></span><span class="message">fossy: and that's the main part <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi/src/branch/posix-runner/posix-runner/posix-runner.c">https://git.stikonas.eu/andrius/stage0-uefi/src/branch/posix-runner/posix-runner/posix-runner.c</a> </span></div><div class="line" id="011058"><span class="nick" style="color:#389600"><a href="#011058" label="[01:10:58]">&lt;stikonas&gt;</a></span><span class="message">this has quite a bit more assembly but still not too bad</span></div><div class="line" id="011122"><span class="nick" style="color:#389600"><a href="#011122" label="[01:11:22]">&lt;stikonas&gt;</a></span><span class="message">it's just that C can't do stuff related to stack...</span></div><div class="line" id="011139"><span class="nick" style="color:#389600"><a href="#011139" label="[01:11:39]">&lt;stikonas&gt;</a></span><span class="message">or those x86_64 model specific registers</span></div><div class="line" id="011201"><span class="nick" style="color:#389600"><a href="#011201" label="[01:12:01]">&lt;stikonas&gt;</a></span><span class="message">fossy: still it's fairly simple program right now</span></div><div class="line" id="011259"><span class="nick" style="color:#2e2a4a"><a href="#011259" label="[01:12:59]">&lt;fossy&gt;</a></span><span class="message">yeah, i see</span></div><div class="line" id="011304"><span class="nick" style="color:#2e2a4a"><a href="#011304" label="[01:13:04]">&lt;fossy&gt;</a></span><span class="message">is fork even possible?</span></div><div class="line" id="011313"><span class="nick" style="color:#389600"><a href="#011313" label="[01:13:13]">&lt;stikonas&gt;</a></span><span class="message">build buidler-hex0 did some hack</span></div><div class="line" id="011320"><span class="nick" style="color:#389600"><a href="#011320" label="[01:13:20]">&lt;stikonas&gt;</a></span><span class="message">so probably something similar could be done too</span></div><div class="line" id="011345"><span class="nick" style="color:#2e2a4a"><a href="#011345" label="[01:13:45]">&lt;fossy&gt;</a></span><span class="message">right, so fake-ish fork</span></div><div class="line" id="011420"><span class="nick" style="color:#389600"><a href="#011420" label="[01:14:20]">&lt;stikonas&gt;</a></span><span class="message">well, uefi API only has spawning</span></div><div class="line" id="011422"><span class="nick" style="color:#2e2a4a"><a href="#011422" label="[01:14:22]">&lt;fossy&gt;</a></span><span class="message">i guess as long as every process forks &amp; waits in the original process you can fake it</span></div><div class="line" id="011433"><span class="nick" style="color:#2e2a4a"><a href="#011433" label="[01:14:33]">&lt;fossy&gt;</a></span><span class="message">ah</span></div><div class="line" id="011654"><span class="nick" style="color:#389600"><a href="#011654" label="[01:16:54]">&lt;stikonas&gt;</a></span><span class="message">yeah, I think so</span></div><div class="line" id="012217"><span class="nick" style="color:#389600"><a href="#012217" label="[01:22:17]">&lt;stikonas&gt;</a></span><span class="message">fossy: so I basically stage0-uefi can get us to the same place as stage0-posix, but afterwards we either need translation layer or port meslibc to UEFI</span></div><div class="line" id="012224"><span class="nick" style="color:#389600"><a href="#012224" label="[01:22:24]">&lt;stikonas&gt;</a></span><span class="message">and later tcc is even more complicated...</span></div><div class="line" id="012235"><span class="nick" style="color:#389600"><a href="#012235" label="[01:22:35]">&lt;stikonas&gt;</a></span><span class="message">so translation layer is probably better</span></div><div class="line" id="012328"><span class="nick" style="color:#2e2a4a"><a href="#012328" label="[01:23:28]">&lt;fossy&gt;</a></span><span class="message">i think translation layer is going to be the easier &amp; more sustainable solution</span></div><div class="line" id="012403"><span class="nick" style="color:#389600"><a href="#012403" label="[01:24:03]">&lt;stikonas&gt;</a></span><span class="message">indeed</span></div><div class="line" id="012415"><span class="nick" style="color:#389600"><a href="#012415" label="[01:24:15]">&lt;stikonas&gt;</a></span><span class="message">and M2libc already has basic syscalls</span></div><div class="line" id="012431"><span class="nick" style="color:#389600"><a href="#012431" label="[01:24:31]">&lt;stikonas&gt;</a></span><span class="message">fossy: anyway, feel free to test it</span></div><div class="line" id="012503"><span class="nick" style="color:#389600"><a href="#012503" label="[01:25:03]">&lt;stikonas&gt;</a></span><span class="message">a few weeks ago I realized that stage0-uefi was quite broken on some machines because stack was not properly aligned</span></div><div class="line" id="012506"><span class="nick" style="color:#389600"><a href="#012506" label="[01:25:06]">&lt;stikonas&gt;</a></span><span class="message">now that is fixed...</span></div><div class="line" id="012550"><span class="nick" style="color:#389600"><a href="#012550" label="[01:25:50]">&lt;stikonas&gt;</a></span><span class="message">anyway, it should all be contained to ESP partition, so testing with USB dongle should be fairly safe</span></div><div class="line" id="012740"><span class="nick" style="color:#389600"><a href="#012740" label="[01:27:40]">&lt;stikonas&gt;</a></span><span class="message">and thanks to Googulator again for suggesting this translation layer idea</span></div><div class="line" id="013322"><span class="nick" style="color:#389600"><a href="#013322" label="[01:33:22]">&lt;stikonas&gt;</a></span><span class="message">fossy: one limitation of posix-runner right now is that only position independent elf binaries are supported</span></div><div class="line" id="013341"><span class="nick" style="color:#389600"><a href="#013341" label="[01:33:41]">&lt;stikonas&gt;</a></span><span class="message">i.e. it can't fix symbol addresses in the elf file...</span></div><div class="line" id="013355"><span class="nick" style="color:#389600"><a href="#013355" label="[01:33:55]">&lt;stikonas&gt;</a></span><span class="message">but we can fix this if necessary in the posix path</span></div><div class="line" id="013423"><span class="nick" style="color:#389600"><a href="#013423" label="[01:34:23]">&lt;stikonas&gt;</a></span><span class="message">stage0-uefi already uses relative rather than absolute addressing (except for kaem-optional but that can be fixed too)</span></div><div class="line" id="013431"><span class="nick" style="color:#389600"><a href="#013431" label="[01:34:31]">&lt;stikonas&gt;</a></span><span class="message">mescc might need fixes...</span></div><div class="line" id="013449"><span class="nick" style="color:#389600"><a href="#013449" label="[01:34:49]">&lt;stikonas&gt;</a></span><span class="message">tcc probably supports both, just needs some argument like -fPIC or something like that</span></div><div class="line" id="013524"><span class="nick" style="color:#2e2a4a"><a href="#013524" label="[01:35:24]">&lt;fossy&gt;</a></span><span class="message">stikonas: yeah i'll give it a try on bare metal when i get a minute to do that</span></div><div class="line" id="013536"><span class="nick" style="color:#389600"><a href="#013536" label="[01:35:36]">&lt;stikonas&gt;</a></span><span class="message">thanks</span></div><div class="line" id="013553"><span class="nick" style="color:#389600"><a href="#013553" label="[01:35:53]">&lt;stikonas&gt;</a></span><span class="message">basically run make there and then dd build/disk.img</span></div><div class="line" id="013600"><span class="nick" style="color:#2e2a4a"><a href="#013600" label="[01:36:00]">&lt;fossy&gt;</a></span><span class="message">okey</span></div><div class="line" id="013612"><span class="nick" style="color:#389600"><a href="#013612" label="[01:36:12]">&lt;stikonas&gt;</a></span><span class="message">(well, with suitable dd syntax)</span></div><div class="line" id="013626"><span class="nick" style="color:#2e2a4a"><a href="#013626" label="[01:36:26]">&lt;fossy&gt;</a></span><span class="message">relative addressing, what's that because of? uefi reasons?</span></div><div class="line" id="013646"><span class="nick" style="color:#389600"><a href="#013646" label="[01:36:46]">&lt;stikonas&gt;</a></span><span class="message">more like kernel doesn't fix binaries when it is loading</span></div><div class="line" id="013651"><span class="nick" style="color:#389600"><a href="#013651" label="[01:36:51]">&lt;stikonas&gt;</a></span><span class="message">and partially UEFI reasons</span></div><div class="line" id="013656"><span class="nick" style="color:#2e2a4a"><a href="#013656" label="[01:36:56]">&lt;fossy&gt;</a></span><span class="message">right</span></div><div class="line" id="013658"><span class="nick" style="color:#389600"><a href="#013658" label="[01:36:58]">&lt;stikonas&gt;</a></span><span class="message">so the way this works</span></div><div class="line" id="013710"><span class="nick" style="color:#389600"><a href="#013710" label="[01:37:10]">&lt;stikonas&gt;</a></span><span class="message">is it malloc sizeof(ELF)</span></div><div class="line" id="013725"><span class="nick" style="color:#389600"><a href="#013725" label="[01:37:25]">&lt;stikonas&gt;</a></span><span class="message">and puts ELF file there</span></div><div class="line" id="013730"><span class="nick" style="color:#389600"><a href="#013730" label="[01:37:30]">&lt;stikonas&gt;</a></span><span class="message">but that can be anywhere in the memory</span></div><div class="line" id="013742"><span class="nick" style="color:#389600"><a href="#013742" label="[01:37:42]">&lt;stikonas&gt;</a></span><span class="message">and won't be in the location where base address points</span></div><div class="line" id="013802"><span class="nick" style="color:#389600"><a href="#013802" label="[01:38:02]">&lt;stikonas&gt;</a></span><span class="message">builder-hex0 hardcodes base address and loads binary there</span></div><div class="line" id="013809"><span class="nick" style="color:#2e2a4a"><a href="#013809" label="[01:38:09]">&lt;fossy&gt;</a></span><span class="message">ahh, that makes sense</span></div><div class="line" id="013816"><span class="nick" style="color:#389600"><a href="#013816" label="[01:38:16]">&lt;stikonas&gt;</a></span><span class="message">which is why rickmasters had to patch mes to put it in the same address</span></div><div class="line" id="013829"><span class="nick" style="color:#389600"><a href="#013829" label="[01:38:29]">&lt;stikonas&gt;</a></span><span class="message">but in UEFI I need to allocate memory pool first</span></div><div class="line" id="013850"><span class="nick" style="color:#389600"><a href="#013850" label="[01:38:50]">&lt;stikonas&gt;</a></span><span class="message">and Linux does far more I guess...</span></div><div class="line" id="013859"><span class="nick" style="color:#389600"><a href="#013859" label="[01:38:59]">&lt;stikonas&gt;</a></span><span class="message">so it can work with absolute addresses too</span></div><div class="line" id="013948"><span class="nick" style="color:#389600"><a href="#013948" label="[01:39:48]">&lt;stikonas&gt;</a></span><span class="message">also i'm not bothering with any of the security ring stuff...</span></div><div class="line" id="014015"><span class="nick" style="color:#389600"><a href="#014015" label="[01:40:15]">&lt;stikonas&gt;</a></span><span class="message">(besides having to fix SS register after syscall instruction, otherwise UEFI hangs)</span></div><div class="line" id="014025"><span class="nick" style="color:#389600"><a href="#014025" label="[01:40:25]">&lt;stikonas&gt;</a></span><span class="message">it all stays in ring 0</span></div><div class="line" id="014025"><span class="nick" style="color:#2e2a4a"><a href="#014025" label="[01:40:25]">&lt;fossy&gt;</a></span><span class="message">eh, its bootstrap, i don't think we need to be too concerned about what ring it runs in</span></div><div class="line" id="014029"><span class="nick" style="color:#389600"><a href="#014029" label="[01:40:29]">&lt;stikonas&gt;</a></span><span class="message">exactly...</span></div><div class="line" id="014055"><span class="nick" style="color:#389600"><a href="#014055" label="[01:40:55]">&lt;stikonas&gt;</a></span><span class="message">mes will have futher problems of course</span></div><div class="line" id="014100"><span class="nick" style="color:#389600"><a href="#014100" label="[01:41:00]">&lt;stikonas&gt;</a></span><span class="message">not just relative addressing</span></div><div class="line" id="014107"><span class="nick" style="color:#389600"><a href="#014107" label="[01:41:07]">&lt;stikonas&gt;</a></span><span class="message">we also need to fix tcc-mes not to crash...</span></div><div class="line" id="014114"><span class="nick" style="color:#389600"><a href="#014114" label="[01:41:14]">&lt;stikonas&gt;</a></span><span class="message">but at least it builds these days</span></div><div class="line" id="014222"><span class="nick" style="color:#389600"><a href="#014222" label="[01:42:22]">&lt;stikonas&gt;</a></span><span class="message">(also most of the actual UEFI-&gt;POSIX translation right now lives in <a rel="nofollow" href="https://github.com/oriansj/M2libc/blob/main/uefi/uefi.c">https://github.com/oriansj/M2libc/blob/main/uefi/uefi.c</a>) </span></div><div class="line" id="014505"><span class="nick" style="color:#389600"><a href="#014505" label="[01:45:05]">&lt;stikonas&gt;</a></span><span class="message">it's a lot lower level than posix...</span></div><div class="line" id="014520"><span class="nick" style="color:#389600"><a href="#014520" label="[01:45:20]">&lt;stikonas&gt;</a></span><span class="message">so need to emulate stuff like current working directory...</span></div><div class="line" id="014535"><span class="nick" style="color:#2e2a4a"><a href="#014535" label="[01:45:35]">&lt;fossy&gt;</a></span><span class="message">ooh, i see</span></div><div class="line" id="014537"><span class="nick" style="color:#2e2a4a"><a href="#014537" label="[01:45:37]">&lt;fossy&gt;</a></span><span class="message">quite low level</span></div><div class="line" id="014633"><span class="nick" style="color:#389600"><a href="#014633" label="[01:46:33]">&lt;stikonas&gt;</a></span><span class="message">yeah, but for bootstrap we mainly need I/O</span></div><div class="line" id="014720"><span class="nick" style="color:#389600"><a href="#014720" label="[01:47:20]">&lt;stikonas&gt;</a></span><span class="message">everything else is a nice bonus...</span></div><div class="line" id="014734"><span class="nick" style="color:#389600"><a href="#014734" label="[01:47:34]">&lt;stikonas&gt;</a></span><span class="message">and if we don't have those, we can work around</span></div><div class="line" id="014821"><span class="nick" style="color:#2e2a4a"><a href="#014821" label="[01:48:21]">&lt;fossy&gt;</a></span><span class="message">how far into the bootstrap do we plan to go with uefi?</span></div><div class="line" id="014828"><span class="nick" style="color:#2e2a4a"><a href="#014828" label="[01:48:28]">&lt;fossy&gt;</a></span><span class="message">before loading a posix kernel</span></div><div class="line" id="014908"><span class="nick" style="color:#389600"><a href="#014908" label="[01:49:08]">&lt;stikonas&gt;</a></span><span class="message">fiwix I think</span></div><div class="line" id="014919"><span class="nick" style="color:#389600"><a href="#014919" label="[01:49:19]">&lt;stikonas&gt;</a></span><span class="message">make is tricky</span></div><div class="line" id="014930"><span class="nick" style="color:#389600"><a href="#014930" label="[01:49:30]">&lt;stikonas&gt;</a></span><span class="message">as it does more complicated stuff with forking</span></div><div class="line" id="014942"><span class="nick" style="color:#389600"><a href="#014942" label="[01:49:42]">&lt;stikonas&gt;</a></span><span class="message">so amd64 bootstrap till fiwix</span></div><div class="line" id="014946"><span class="nick" style="color:#389600"><a href="#014946" label="[01:49:46]">&lt;stikonas&gt;</a></span><span class="message">and then continue on x86</span></div><div class="line" id="014948"><span class="nick" style="color:#2e2a4a"><a href="#014948" label="[01:49:48]">&lt;fossy&gt;</a></span><span class="message">fiwix sounds reasonable</span></div><div class="line" id="014951"><span class="nick" style="color:#2e2a4a"><a href="#014951" label="[01:49:51]">&lt;fossy&gt;</a></span><span class="message">yeah</span></div><div class="line" id="015300"><span class="nick" style="color:#389600"><a href="#015300" label="[01:53:00]">&lt;stikonas&gt;</a></span><span class="message">also to see how annoying UEFI API is, look at hex0 C prototype <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/Development/hex0.c">https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/Development/hex0.c</a> </span></div><div class="line" id="015329"><span class="nick" style="color:#389600"><a href="#015329" label="[01:53:29]">&lt;stikonas&gt;</a></span><span class="message">and that doesn't even include proper error handling...</span></div><div class="line" id="015350"><span class="nick" style="color:#389600"><a href="#015350" label="[01:53:50]">&lt;stikonas&gt;</a></span><span class="message">but in hex0 we don't bother with that in posix either</span></div><div class="line" id="020034"><span class="nick" style="color:#2e2a4a"><a href="#020034" label="[02:00:34]">&lt;fossy&gt;</a></span><span class="message">a lot of intermediary steps for something pretty simple...</span></div><div class="line" id="021147"><span class="nick" style="color:#389600"><a href="#021147" label="[02:11:47]">&lt;stikonas&gt;</a></span><span class="message">indeed...</span></div><div class="line" id="021213"><span class="nick" style="color:#389600"><a href="#021213" label="[02:12:13]">&lt;stikonas&gt;</a></span><span class="message">and also PE32 headers are huge...</span></div><div class="line" id="021220"><span class="nick" style="color:#389600"><a href="#021220" label="[02:12:20]">&lt;stikonas&gt;</a></span><span class="message">so bootstrap seeds are also significantly bigger</span></div><div class="line" id="021248"><span class="nick" style="color:#389600"><a href="#021248" label="[02:12:48]">&lt;stikonas&gt;</a></span><span class="message">especially kaem</span></div><div class="line" id="021256"><span class="nick" style="color:#389600"><a href="#021256" label="[02:12:56]">&lt;stikonas&gt;</a></span><span class="message">but on the other hand, kaem-optional is also optional here</span></div><div class="line" id="021308"><span class="nick" style="color:#389600"><a href="#021308" label="[02:13:08]">&lt;stikonas&gt;</a></span><span class="message">at least if you can kick off your UEFI programs with some arguments from the boot menu</span></div><div class="line" id="021547"><span class="nick" style="color:#6b8072"><a href="#021547" label="[02:15:47]">&lt;Googulator&gt;</a></span><span class="message">meanwhile, in Perl bfd land: looks like the staged build behavior is the correct one</span></div><div class="line" id="021555"><span class="nick" style="color:#6b8072"><a href="#021555" label="[02:15:55]">&lt;Googulator&gt;</a></span><span class="message">bfd.h is meant to exist, and is meant to be found by Perl</span></div><div class="line" id="021631"><span class="nick" style="color:#6b8072"><a href="#021631" label="[02:16:31]">&lt;Googulator&gt;</a></span><span class="message">the question is not &quot;why does it suddenly exist when we rebuild the system from packages&quot;, but rather, &quot;where the hell does it go when we don't&quot;</span></div><div class="line" id="025007"><span class="nick" style="color:#80b1d3"><a href="#025007" label="[02:50:07]">&lt;sam_&gt;</a></span><span class="message">bfd.h is a stupid situation</span></div><div class="line" id="025022"><span class="nick" style="color:#80b1d3"><a href="#025022" label="[02:50:22]">&lt;sam_&gt;</a></span><span class="message">binutils cannot decide if anyone is supposed to use libiberty and friends</span></div><div class="line" id="025033"><span class="nick" style="color:#80b1d3"><a href="#025033" label="[02:50:33]">&lt;sam_&gt;</a></span><span class="message">see the various links in <a rel="nofollow" href="https://bugs.gentoo.org/879067">https://bugs.gentoo.org/879067</a> </span></div><div class="line" id="025036"><span class="nick" style="color:#80b1d3"><a href="#025036" label="[02:50:36]">&lt;sam_&gt;</a></span><span class="message">it's such a mess</span></div><div class="line" id="025447"><span class="nick" style="color:#6b8072"><a href="#025447" label="[02:54:47]">&lt;Googulator&gt;</a></span><span class="message">oh...</span></div><div class="line" id="025448"><span class="nick" style="color:#6b8072"><a href="#025448" label="[02:54:48]">&lt;Googulator&gt;</a></span><span class="message">src_install() {</span></div><div class="line" id="025448"><span class="nick" style="color:#6b8072"><a href="#025448" label="[02:54:48]">&lt;Googulator&gt;</a></span><span class="message">    # Remove old perl</span></div><div class="line" id="025449"><span class="nick" style="color:#6b8072"><a href="#025449" label="[02:54:49]">&lt;Googulator&gt;</a></span><span class="message">    rm -rf &quot;${PREFIX}&quot;/lib/perl5/</span></div><div class="line" id="025449"><span class="nick" style="color:#6b8072"><a href="#025449" label="[02:54:49]">&lt;Googulator&gt;</a></span><span class="message">    default</span></div><div class="line" id="025450"><span class="nick" style="color:#6b8072"><a href="#025450" label="[02:54:50]">&lt;Googulator&gt;</a></span><span class="message">}</span></div><div class="line" id="025502"><span class="nick" style="color:#6b8072"><a href="#025502" label="[02:55:02]">&lt;Googulator&gt;</a></span><span class="message">That seems to explain it.</span></div><div class="line" id="025520"><span class="nick" style="color:#6b8072"><a href="#025520" label="[02:55:20]">&lt;Googulator&gt;</a></span><span class="message">src_install() touches the live system, removing files</span></div><div class="line" id="025722"><span class="nick" style="color:#389600"><a href="#025722" label="[02:57:22]">&lt;stikonas&gt;</a></span><span class="message">oh yes, otherwise we just accumulate a lot of old perl files</span></div><div class="line" id="025803"><span class="nick" style="color:#6b8072"><a href="#025803" label="[02:58:03]">&lt;Googulator&gt;</a></span><span class="message">Do we actually need this, or is it just cleanup?</span></div><div class="line" id="025815"><span class="nick" style="color:#2e2a4a"><a href="#025815" label="[02:58:15]">&lt;fossy&gt;</a></span><span class="message">iirc cleanup, but that was added aaaages ago</span></div><div class="line" id="025826"><span class="nick" style="color:#6b8072"><a href="#025826" label="[02:58:26]">&lt;Googulator&gt;</a></span><span class="message">More importantly, do we need it *in the install to fakeroot codepath?*</span></div><div class="line" id="025837"><span class="nick" style="color:#6d2462"><a href="#025837" label="[02:58:37]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; yeah, just the cleanup</span></div><div class="line" id="025911"><span class="nick" style="color:#6b8072"><a href="#025911" label="[02:59:11]">&lt;Googulator&gt;</a></span><span class="message">OK, so it's not because &quot;make install&quot; to fakeroot fails / does the wrong thing if an older perl is already installed outside fakeroot</span></div><div class="line" id="025923"><span class="nick" style="color:#2e2a4a"><a href="#025923" label="[02:59:23]">&lt;fossy&gt;</a></span><span class="message">i don't *think* so</span></div><div class="line" id="030043"><span class="nick" style="color:#6b8072"><a href="#030043" label="[03:00:43]">&lt;Googulator&gt;</a></span><span class="message">In that case, the right way to handle that would be to support overriding src_apply</span></div><div class="line" id="030108"><span class="nick" style="color:#6b8072"><a href="#030108" label="[03:01:08]">&lt;Googulator&gt;</a></span><span class="message">src_install is part of the build path, not the actual package install</span></div><div class="line" id="030516"><span class="nick" style="color:#6b8072"><a href="#030516" label="[03:05:16]">&lt;Googulator&gt;</a></span><span class="message">musl-1.1.24 is committing the same sin</span></div><div class="line" id="030530"><span class="nick" style="color:#6b8072"><a href="#030530" label="[03:05:30]">&lt;Googulator&gt;</a></span><span class="message">touching the live system in src_install</span></div><div class="line" id="030713"><span class="nick" style="color:#6b8072"><a href="#030713" label="[03:07:13]">&lt;Googulator&gt;</a></span><span class="message">coreutils-5.0 too, although this one is a bit better - it creates files on the live system, rather than deleting the,</span></div><div class="line" id="030717"><span class="nick" style="color:#6b8072"><a href="#030717" label="[03:07:17]">&lt;Googulator&gt;</a></span><span class="message">*them</span></div><div class="line" id="030945"><span class="nick" style="color:#6b8072"><a href="#030945" label="[03:09:45]">&lt;Googulator&gt;</a></span><span class="message">bash also deletes from the live system, but a comment there suggests it's justified</span></div><div class="line" id="030958"><span class="nick" style="color:#6b8072"><a href="#030958" label="[03:09:58]">&lt;Googulator&gt;</a></span><span class="message">&quot;# Needs special handling b/c is currently running - tar doesn't like this&quot;</span></div><div class="line" id="031017"><span class="nick" style="color:#6b8072"><a href="#031017" label="[03:10:17]">&lt;Googulator&gt;</a></span><span class="message">yet somehow it doesn't cause problems when installing preseeded packages</span></div><div class="line" id="031544"><span class="nick" style="color:#6b8072"><a href="#031544" label="[03:15:44]">&lt;Googulator&gt;</a></span><span class="message">flex is removing lex and yacc in the same way</span></div><div class="line" id="034517"><span class="nick" style="color:#8dd3c7"><a href="#034517" label="[03:45:17]">&lt;oriansj&gt;</a></span><span class="message">stikonas: hmmm; well perhaps it is wisest to go full POSIX instead of playing compatability layer with UEFI after we have M2-Planet.</span></div><div class="line" id="034541"><span class="nick" style="color:#389600"><a href="#034541" label="[03:45:41]">&lt;stikonas&gt;</a></span><span class="message">oriansj: perhaps, but then you need to write drivers</span></div><div class="line" id="034545"><span class="nick" style="color:#389600"><a href="#034545" label="[03:45:45]">&lt;stikonas&gt;</a></span><span class="message">i.e. for display...</span></div><div class="line" id="034600"><span class="nick" style="color:#389600"><a href="#034600" label="[03:46:00]">&lt;stikonas&gt;</a></span><span class="message">anyway, I have debugged my current problem a bit...</span></div><div class="line" id="034607"><span class="nick" style="color:#389600"><a href="#034607" label="[03:46:07]">&lt;stikonas&gt;</a></span><span class="message">possibly because stack was not zeroed...</span></div><div class="line" id="034612"><span class="nick" style="color:#389600"><a href="#034612" label="[03:46:12]">&lt;stikonas&gt;</a></span><span class="message">which stage0-posix assumes...</span></div><div class="line" id="034726"><span class="nick" style="color:#389600"><a href="#034726" label="[03:47:26]">&lt;stikonas&gt;</a></span><span class="message">it's either a small fix in hex0 &quot;push rdi&quot; -&gt; push 0</span></div><div class="line" id="034736"><span class="nick" style="color:#389600"><a href="#034736" label="[03:47:36]">&lt;stikonas&gt;</a></span><span class="message">or we allocate a new stack for each executable</span></div><div class="line" id="034754"><span class="nick" style="color:#8dd3c7"><a href="#034754" label="[03:47:54]">&lt;oriansj&gt;</a></span><span class="message">well display isn't essential and vga only needs us to write to the correct memory address and have a simple buffer</span></div><div class="line" id="034828"><span class="nick" style="color:#389600"><a href="#034828" label="[03:48:28]">&lt;stikonas&gt;</a></span><span class="message">it will be hard to debug without display too</span></div><div class="line" id="034833"><span class="nick" style="color:#389600"><a href="#034833" label="[03:48:33]">&lt;stikonas&gt;</a></span><span class="message">but maybe it's an option...</span></div><div class="line" id="034838"><span class="nick" style="color:#389600"><a href="#034838" label="[03:48:38]">&lt;stikonas&gt;</a></span><span class="message">though we can have both...</span></div><div class="line" id="034845"><span class="nick" style="color:#389600"><a href="#034845" label="[03:48:45]">&lt;stikonas&gt;</a></span><span class="message">I don't think UEFI compatibility layer would be hard...</span></div><div class="line" id="034912"><span class="nick" style="color:#389600"><a href="#034912" label="[03:49:12]">&lt;stikonas&gt;</a></span><span class="message">I basically have a slightly modified hex0 already running</span></div><div class="line" id="034923"><span class="nick" style="color:#389600"><a href="#034923" label="[03:49:23]">&lt;stikonas&gt;</a></span><span class="message">and proper fix can be done too...</span></div><div class="line" id="034953"><span class="nick" style="color:#389600"><a href="#034953" label="[03:49:53]">&lt;stikonas&gt;</a></span><span class="message">anyway, going to bed now</span></div><div class="line" id="035008"><span class="nick" style="color:#8dd3c7"><a href="#035008" label="[03:50:08]">&lt;oriansj&gt;</a></span><span class="message">sweet dreams</span></div><div class="line" id="065051"><span class="nick" style="color:#6b8072"><a href="#065051" label="[06:50:51]">&lt;Googulator&gt;</a></span><span class="message">located the culprit: it's musl-1.1.24 pass3</span></div><div class="line" id="065053"><span class="nick" style="color:#6b8072"><a href="#065053" label="[06:50:53]">&lt;Googulator&gt;</a></span><span class="message">src_install() {</span></div><div class="line" id="065054"><span class="nick" style="color:#6b8072"><a href="#065054" label="[06:50:54]">&lt;Googulator&gt;</a></span><span class="message">    rm -rf &quot;${PREFIX}/include&quot;</span></div><div class="line" id="065054"><span class="nick" style="color:#6b8072"><a href="#065054" label="[06:50:54]">&lt;Googulator&gt;</a></span><span class="message">    make PREFIX=&quot;${PREFIX}&quot; DESTDIR=&quot;${DESTDIR}&quot; install</span></div><div class="line" id="065055"><span class="nick" style="color:#6b8072"><a href="#065055" label="[06:50:55]">&lt;Googulator&gt;</a></span><span class="message">}</span></div><div class="line" id="065101"><span class="nick" style="color:#6b8072"><a href="#065101" label="[06:51:01]">&lt;Googulator&gt;</a></span><span class="message">rm -rf &quot;${PREFIX}/include&quot;</span></div><div class="line" id="065115"><span class="nick" style="color:#6b8072"><a href="#065115" label="[06:51:15]">&lt;Googulator&gt;</a></span><span class="message">no, really</span></div><div class="line" id="065411"><span class="nick" style="color:#6b8072"><a href="#065411" label="[06:54:11]">&lt;Googulator&gt;</a></span><span class="message">introduced here: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/commit/30ebe8ccba7b635a8bba2001deb7f0827d32cddc">https://github.com/fosslinux/live-bootstrap/commit/30ebe8ccba7b635a8bba2001deb7f0827d32cddc</a> </span></div><div class="line" id="065426"><span class="nick" style="color:#6b8072"><a href="#065426" label="[06:54:26]">&lt;Googulator&gt;</a></span><span class="message">and carried forward through several refactors, without anyone noticing</span></div><div class="line" id="082549"><span class="nick" style="color:#2e2a4a"><a href="#082549" label="[08:25:49]">&lt;fossy&gt;</a></span><span class="message">that used to be right, i guess, because at that point all previous headers became irrelevant, but obviously not the case anymore LOL</span></div><div class="line" id="082604"><span class="nick" style="color:#2e2a4a"><a href="#082604" label="[08:26:04]">&lt;fossy&gt;</a></span><span class="message">not sure how that didn't create much more severe problems</span></div><div class="line" id="083831"><span class="nick" style="color:#6b8072"><a href="#083831" label="[08:38:31]">&lt;Googulator&gt;</a></span><span class="message">hmm, jut noticed the guile build step is actually building 2 separate versions of guile</span></div><div class="line" id="083837"><span class="nick" style="color:#6b8072"><a href="#083837" label="[08:38:37]">&lt;Googulator&gt;</a></span><span class="message">shouldn't that be 2 build steps then?</span></div><div class="line" id="084608"><span class="nick" style="color:#6b8072"><a href="#084608" label="[08:46:08]">&lt;Googulator&gt;</a></span><span class="message">back to the musl issue: according to <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/30ebe8ccba7b635a8bba2001deb7f0827d32cddc/sysa/run.sh#L93">https://github.com/fosslinux/live-bootstrap/blob/30ebe8ccba7b635a8bba2001deb7f0827d32cddc/sysa/run.sh#L93</a>  it appears this musl rebuild was already after binutils then</span></div><div class="line" id="084620"><span class="nick" style="color:#6b8072"><a href="#084620" label="[08:46:20]">&lt;Googulator&gt;</a></span><span class="message">(binutils installs headers, which can be relevant later)</span></div><div class="line" id="084636"><span class="nick" style="color:#6b8072"><a href="#084636" label="[08:46:36]">&lt;Googulator&gt;</a></span><span class="message">&amp; at this point, that was actually the final binutils</span></div><div class="line" id="084727"><span class="nick" style="color:#6b8072"><a href="#084727" label="[08:47:27]">&lt;Googulator&gt;</a></span><span class="message">the intention was presumably to get rid of meslibc-related headers, but it was already heavy handed back then</span></div><div class="line" id="085027"><span class="nick" style="color:#2e2a4a"><a href="#085027" label="[08:50:27]">&lt;fossy&gt;</a></span><span class="message">Googulator: we don't actually build guile 3.0.7 completely; only a (relatively) small part of it, just enough to get psyntax-pp.scm out of it into guile 3.0.9</span></div><div class="line" id="085049"><span class="nick" style="color:#6b8072"><a href="#085049" label="[08:50:49]">&lt;Googulator&gt;</a></span><span class="message">makes sense then</span></div><div class="line" id="135501"><span class="nick" style="color:#8dd3c7"><a href="#135501" label="[13:55:01]">&lt;oriansj&gt;</a></span><span class="message">Googulator: thank you for your continued hard work ^_^</span></div><div class="line" id="165242"><span class="nick" style="color:#6b8072"><a href="#165242" label="[16:52:42]">&lt;Googulator&gt;</a></span><span class="message">oriansj: you're welcome :)</span></div><div class="line" id="193738"><span class="nick" style="color:#389600"><a href="#193738" label="[19:37:38]">&lt;stikonas&gt;</a></span><span class="message">oriansj: <a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds/pull/43">https://github.com/oriansj/bootstrap-seeds/pull/43</a> </span></div><div class="line" id="193755"><span class="nick" style="color:#389600"><a href="#193755" label="[19:37:55]">&lt;stikonas&gt;</a></span><span class="message">that read problem on posix-runner.efi turns out to be a minor bug in hex0</span></div><div class="line" id="193827"><span class="nick" style="color:#389600"><a href="#193827" label="[19:38:27]">&lt;stikonas&gt;</a></span><span class="message">(which could be observed if you get file descriptor &gt; 255)</span></div><div class="line" id="193836"><span class="nick" style="color:#389600"><a href="#193836" label="[19:38:36]">&lt;stikonas&gt;</a></span><span class="message">(though normally that doesn't happen on linux)</span></div><div class="line" id="193926"><span class="nick" style="color:#389600"><a href="#193926" label="[19:39:26]">&lt;stikonas&gt;</a></span><span class="message">easy to fix though, just made sure that we clear all other bits on a stack (by pushing another register)</span></div><div class="line" id="231552"><span class="nick" style="color:#389600"><a href="#231552" label="[23:15:52]">&lt;stikonas&gt;</a></span><span class="message">well, with another almost trivial change, posix-runner can now run quite a bit more stuff: hex0, hex1, hex2, catm and M0. (cc_amd64 somehow hangs...)</span></div><div class="line" id="231819"><span class="nick" style="color:#389600"><a href="#231819" label="[23:18:19]">&lt;stikonas&gt;</a></span><span class="message">(perhaps we don't really need them since stage0-uefi provides the same, native UEFI binaries but it's a good testcase...)</span></div><br /></div></body></html>