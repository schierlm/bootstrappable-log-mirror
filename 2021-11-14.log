<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-11-14.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000704"><span class="nick" style="color:#389600"><a href="#000704" label="[00:07:04]">&lt;stikonas&gt;</a></span><span class="message">and test0028 now passes on x86, amd64 and riscv64 (with new non-preprocessor code)</span></div><div class="line" id="004912"><span class="nick" style="color:#389600"><a href="#004912" label="[00:49:12]">&lt;stikonas&gt;</a></span><span class="message">and aarch64 and armv7l are working too</span></div><div class="line" id="004949"><span class="nick" style="color:#389600"><a href="#004949" label="[00:49:49]">&lt;stikonas&gt;</a></span><span class="message">still need to test knight</span></div><div class="line" id="005509"><span class="nick" style="color:#2e2a4a"><a href="#005509" label="[00:55:09]">&lt;oriansj&gt;</a></span><span class="message">stikonas: I'll start fuzzing mescc-tools tonight and hopefully clear out these sorts of bugs</span></div><div class="line" id="010751"><span class="nick" style="color:#2e2a4a"><a href="#010751" label="[01:07:51]">&lt;oriansj&gt;</a></span><span class="message">testing knight-posix will require the use of <a rel="nofollow" href="https://github.com/oriansj/stage0/blob/master/High_level_prototypes/execve_image.c">https://github.com/oriansj/stage0/blob/master/High_level_prototypes/execve_image.c</a> </span></div><div class="line" id="010859"><span class="nick" style="color:#389600"><a href="#010859" label="[01:08:59]">&lt;stikonas&gt;</a></span><span class="message">oriansj: and it accepts output from M2-Planet?</span></div><div class="line" id="010906"><span class="nick" style="color:#2e2a4a"><a href="#010906" label="[01:09:06]">&lt;oriansj&gt;</a></span><span class="message">can be used like so:  execve_image ./test/results/test1000-knight-posix-binary --architecture x86 -f foo &gt;| rom (use the rom image)</span></div><div class="line" id="010908"><span class="nick" style="color:#389600"><a href="#010908" label="[01:09:08]">&lt;stikonas&gt;</a></span><span class="message">well, M2-Planet-&gt;M1-&gt;hex2</span></div><div class="line" id="010918"><span class="nick" style="color:#389600"><a href="#010918" label="[01:09:18]">&lt;stikonas&gt;</a></span><span class="message">ok</span></div><div class="line" id="010942"><span class="nick" style="color:#389600"><a href="#010942" label="[01:09:42]">&lt;stikonas&gt;</a></span><span class="message">argh, I need to build test0028 first for knight</span></div><div class="line" id="010950"><span class="nick" style="color:#2e2a4a"><a href="#010950" label="[01:09:50]">&lt;oriansj&gt;</a></span><span class="message">knight-native binaries can be just plain loaded in the knight vm as a rom file</span></div><div class="line" id="011049"><span class="nick" style="color:#2e2a4a"><a href="#011049" label="[01:10:49]">&lt;oriansj&gt;</a></span><span class="message">knight-posix requires --POSIX-MODE and execve_image to create a proper memory image</span></div><div class="line" id="011121"><span class="nick" style="color:#2e2a4a"><a href="#011121" label="[01:11:21]">&lt;oriansj&gt;</a></span><span class="message">as one needs to insert the argv and envp into the memory</span></div><div class="line" id="011149"><span class="nick" style="color:#389600"><a href="#011149" label="[01:11:49]">&lt;stikonas&gt;</a></span><span class="message">ok</span></div><div class="line" id="011252"><span class="nick" style="color:#2e2a4a"><a href="#011252" label="[01:12:52]">&lt;oriansj&gt;</a></span><span class="message">test1000 for knight will show exactly how to use it</span></div><div class="line" id="011426"><span class="nick" style="color:#2e2a4a"><a href="#011426" label="[01:14:26]">&lt;oriansj&gt;</a></span><span class="message">as I haven't yet figured out how to do something like qemu-userspace integration for knight binaries yet.</span></div><div class="line" id="011549"><span class="nick" style="color:#389600"><a href="#011549" label="[01:15:49]">&lt;stikonas&gt;</a></span><span class="message">well, there are other tests there too</span></div><div class="line" id="011602"><span class="nick" style="color:#389600"><a href="#011602" label="[01:16:02]">&lt;stikonas&gt;</a></span><span class="message">with hello-knight-posix.sh scripts</span></div><div class="line" id="011607"><span class="nick" style="color:#389600"><a href="#011607" label="[01:16:07]">&lt;stikonas&gt;</a></span><span class="message">I'm looking at those now</span></div><div class="line" id="011710"><span class="nick" style="color:#2e2a4a"><a href="#011710" label="[01:17:10]">&lt;oriansj&gt;</a></span><span class="message">I probably should update the makefile for stage0 to have a proper build target for execve_image</span></div><div class="line" id="012202"><span class="nick" style="color:#2e2a4a"><a href="#012202" label="[01:22:02]">&lt;oriansj&gt;</a></span><span class="message">ok and pushed</span></div><div class="line" id="012317"><span class="nick" style="color:#389600"><a href="#012317" label="[01:23:17]">&lt;stikonas&gt;</a></span><span class="message">thanks</span></div><div class="line" id="012418"><span class="nick" style="color:#389600"><a href="#012418" label="[01:24:18]">&lt;stikonas&gt;</a></span><span class="message">ok, got division by 0 initially from vm, did one fix and now Computer Program has Halted after 108 instructions</span></div><div class="line" id="012431"><span class="nick" style="color:#389600"><a href="#012431" label="[01:24:31]">&lt;stikonas&gt;</a></span><span class="message">so I guess it's working now</span></div><div class="line" id="012610"><span class="nick" style="color:#2e2a4a"><a href="#012610" label="[01:26:10]">&lt;oriansj&gt;</a></span><span class="message">you can single step its execution if you would like, set a breakpoint or just check the exit code</span></div><div class="line" id="013646"><span class="nick" style="color:#389600"><a href="#013646" label="[01:36:46]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I'll make M2libc PR first and then M2-Planet one that depends on it. But I guess you might want to first review the 2nd Pr</span></div><div class="line" id="013825"><span class="nick" style="color:#389600"><a href="#013825" label="[01:38:25]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/M2libc/pull/6">https://github.com/oriansj/M2libc/pull/6</a> </span></div><div class="line" id="014612"><span class="nick" style="color:#389600"><a href="#014612" label="[01:46:12]">&lt;stikonas&gt;</a></span><span class="message">oh already merged... Oh well, it's probably fine</span></div><div class="line" id="014622"><span class="nick" style="color:#389600"><a href="#014622" label="[01:46:22]">&lt;stikonas&gt;</a></span><span class="message">I'm still doing some final tests with the other PR</span></div><div class="line" id="014712"><span class="nick" style="color:#2e2a4a"><a href="#014712" label="[01:47:12]">&lt;oriansj&gt;</a></span><span class="message">although you might have made a mistake with 4089D9</span></div><div class="line" id="014722"><span class="nick" style="color:#389600"><a href="#014722" label="[01:47:22]">&lt;stikonas&gt;</a></span><span class="message">oh?</span></div><div class="line" id="014728"><span class="nick" style="color:#2e2a4a"><a href="#014728" label="[01:47:28]">&lt;oriansj&gt;</a></span><span class="message">you probably ment 4889D9</span></div><div class="line" id="014749"><span class="nick" style="color:#389600"><a href="#014749" label="[01:47:49]">&lt;stikonas&gt;</a></span><span class="message">COPY_rbx_to_rcx ?</span></div><div class="line" id="014755"><span class="nick" style="color:#389600"><a href="#014755" label="[01:47:55]">&lt;stikonas&gt;</a></span><span class="message">oh yes</span></div><div class="line" id="014755"><span class="nick" style="color:#2e2a4a"><a href="#014755" label="[01:47:55]">&lt;oriansj&gt;</a></span><span class="message">as it would have only copied the bottom 32bits</span></div><div class="line" id="014804"><span class="nick" style="color:#389600"><a href="#014804" label="[01:48:04]">&lt;stikonas&gt;</a></span><span class="message">hmm, indeed</span></div><div class="line" id="014818"><span class="nick" style="color:#389600"><a href="#014818" label="[01:48:18]">&lt;stikonas&gt;</a></span><span class="message">thanks for spotting</span></div><div class="line" id="014832"><span class="nick" style="color:#389600"><a href="#014832" label="[01:48:32]">&lt;stikonas&gt;</a></span><span class="message">didn't pick this up in my tests as numbers were small</span></div><div class="line" id="014841"><span class="nick" style="color:#389600"><a href="#014841" label="[01:48:41]">&lt;stikonas&gt;</a></span><span class="message">can you push the fix?</span></div><div class="line" id="014852"><span class="nick" style="color:#2e2a4a"><a href="#014852" label="[01:48:52]">&lt;oriansj&gt;</a></span><span class="message">yeah, I'll fix it in one momemnt</span></div><div class="line" id="014904"><span class="nick" style="color:#389600"><a href="#014904" label="[01:49:04]">&lt;stikonas&gt;</a></span><span class="message">I'll finish testing stage0-posix</span></div><div class="line" id="015027"><span class="nick" style="color:#2e2a4a"><a href="#015027" label="[01:50:27]">&lt;oriansj&gt;</a></span><span class="message">and fix is up</span></div><div class="line" id="015043"><span class="nick" style="color:#389600"><a href="#015043" label="[01:50:43]">&lt;stikonas&gt;</a></span><span class="message">thanks, let me pull it in, because test checksums will be affected</span></div><div class="line" id="015047"><span class="nick" style="color:#389600"><a href="#015047" label="[01:50:47]">&lt;stikonas&gt;</a></span><span class="message">well, at leats for amd64</span></div><div class="line" id="015052"><span class="nick" style="color:#2e2a4a"><a href="#015052" label="[01:50:52]">&lt;oriansj&gt;</a></span><span class="message">yep</span></div><div class="line" id="015053"><span class="nick" style="color:#389600"><a href="#015053" label="[01:50:53]">&lt;stikonas&gt;</a></span><span class="message">and test0028</span></div><div class="line" id="015509"><span class="nick" style="color:#2e2a4a"><a href="#015509" label="[01:55:09]">&lt;oriansj&gt;</a></span><span class="message">and the bug fix for get_machine's segfault has been corrected</span></div><div class="line" id="015834"><span class="nick" style="color:#389600"><a href="#015834" label="[01:58:34]">&lt;stikonas&gt;</a></span><span class="message">oriansj: <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/pull/34">https://github.com/oriansj/M2-Planet/pull/34</a> </span></div><div class="line" id="015846"><span class="nick" style="color:#389600"><a href="#015846" label="[01:58:46]">&lt;stikonas&gt;</a></span><span class="message">I've reverted broken prefix ++/-- support for now in the first commit</span></div><div class="line" id="015900"><span class="nick" style="color:#389600"><a href="#015900" label="[01:59:00]">&lt;stikonas&gt;</a></span><span class="message">and 2nd commit fixes those compound assignments</span></div><div class="line" id="015925"><span class="nick" style="color:#389600"><a href="#015925" label="[01:59:25]">&lt;stikonas&gt;</a></span><span class="message">a bit unfortunate that I had to emit quite a lot of new assembly code</span></div><div class="line" id="015936"><span class="nick" style="color:#389600"><a href="#015936" label="[01:59:36]">&lt;stikonas&gt;</a></span><span class="message">but it is what it is</span></div><div class="line" id="015950"><span class="nick" style="color:#389600"><a href="#015950" label="[01:59:50]">&lt;stikonas&gt;</a></span><span class="message">it definitely works better now</span></div><div class="line" id="020319"><span class="nick" style="color:#2e2a4a"><a href="#020319" label="[02:03:19]">&lt;oriansj&gt;</a></span><span class="message">just give me a little bit to review and I'll have it merged</span></div><div class="line" id="020327"><span class="nick" style="color:#389600"><a href="#020327" label="[02:03:27]">&lt;stikonas&gt;</a></span><span class="message">sure, no rush</span></div><div class="line" id="020333"><span class="nick" style="color:#389600"><a href="#020333" label="[02:03:33]">&lt;stikonas&gt;</a></span><span class="message">actually, I might have spotted one minor thing</span></div><div class="line" id="020343"><span class="nick" style="color:#389600"><a href="#020343" label="[02:03:43]">&lt;stikonas&gt;</a></span><span class="message">in knight-posix I should check for return code 0</span></div><div class="line" id="020424"><span class="nick" style="color:#389600"><a href="#020424" label="[02:04:24]">&lt;stikonas&gt;</a></span><span class="message">line 56 in  test/test0028/hello-knight-posix.sh</span></div><div class="line" id="020426"><span class="nick" style="color:#389600"><a href="#020426" label="[02:04:26]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="020441"><span class="nick" style="color:#389600"><a href="#020441" label="[02:04:41]">&lt;stikonas&gt;</a></span><span class="message">or does vm not respect return code?</span></div><div class="line" id="020522"><span class="nick" style="color:#389600"><a href="#020522" label="[02:05:22]">&lt;stikonas&gt;</a></span><span class="message">let me fix that 42-&gt;0 anyway</span></div><div class="line" id="020525"><span class="nick" style="color:#2e2a4a"><a href="#020525" label="[02:05:25]">&lt;oriansj&gt;</a></span><span class="message">vm in posix-mode does do a proper return codes</span></div><div class="line" id="020611"><span class="nick" style="color:#2e2a4a"><a href="#020611" label="[02:06:11]">&lt;oriansj&gt;</a></span><span class="message">you can verify it by simply having a LOADI R0 @15 and HALT</span></div><div class="line" id="020616"><span class="nick" style="color:#389600"><a href="#020616" label="[02:06:16]">&lt;stikonas&gt;</a></span><span class="message">oh ok</span></div><div class="line" id="020632"><span class="nick" style="color:#389600"><a href="#020632" label="[02:06:32]">&lt;stikonas&gt;</a></span><span class="message">well, I force-pushed into PR to fix this</span></div><div class="line" id="020745"><span class="nick" style="color:#389600"><a href="#020745" label="[02:07:45]">&lt;stikonas&gt;</a></span><span class="message">well, if you have any other comments, feel free not to merge yet and I'll fix the issues (probably tomorrow)</span></div><div class="line" id="020906"><span class="nick" style="color:#389600"><a href="#020906" label="[02:09:06]">&lt;stikonas&gt;</a></span><span class="message">it might be possible to use something like this for ++/-- too...</span></div><div class="line" id="020917"><span class="nick" style="color:#2e2a4a"><a href="#020917" label="[02:09:17]">&lt;oriansj&gt;</a></span><span class="message">well the knight output looks good to me</span></div><div class="line" id="020934"><span class="nick" style="color:#389600"><a href="#020934" label="[02:09:34]">&lt;stikonas&gt;</a></span><span class="message">ok, that's good.</span></div><div class="line" id="020957"><span class="nick" style="color:#389600"><a href="#020957" label="[02:09:57]">&lt;stikonas&gt;</a></span><span class="message">I did run the test on knight too</span></div><div class="line" id="021012"><span class="nick" style="color:#2e2a4a"><a href="#021012" label="[02:10:12]">&lt;oriansj&gt;</a></span><span class="message">but that is the simplest assembly syntax we do have</span></div><div class="line" id="021039"><span class="nick" style="color:#389600"><a href="#021039" label="[02:10:39]">&lt;stikonas&gt;</a></span><span class="message">I did find adding risc-v easy too here</span></div><div class="line" id="021052"><span class="nick" style="color:#389600"><a href="#021052" label="[02:10:52]">&lt;stikonas&gt;</a></span><span class="message">but that might be because I did work quite a bit on it in stage0-posix</span></div><div class="line" id="021114"><span class="nick" style="color:#389600"><a href="#021114" label="[02:11:14]">&lt;stikonas&gt;</a></span><span class="message">and also because macros are made out of small independent tokens</span></div><div class="line" id="021119"><span class="nick" style="color:#389600"><a href="#021119" label="[02:11:19]">&lt;stikonas&gt;</a></span><span class="message">so no need to add new defines</span></div><div class="line" id="021204"><span class="nick" style="color:#2e2a4a"><a href="#021204" label="[02:12:04]">&lt;oriansj&gt;</a></span><span class="message">very true</span></div><div class="line" id="021229"><span class="nick" style="color:#389600"><a href="#021229" label="[02:12:29]">&lt;stikonas&gt;</a></span><span class="message">oriansj: one thing I should probably note, on x86/amd64 rax/rbx and eax/ebx are kind of swapped compared to other arches</span></div><div class="line" id="021253"><span class="nick" style="color:#389600"><a href="#021253" label="[02:12:53]">&lt;stikonas&gt;</a></span><span class="message">if you don't like that, I can make all of them more similar</span></div><div class="line" id="021302"><span class="nick" style="color:#389600"><a href="#021302" label="[02:13:02]">&lt;stikonas&gt;</a></span><span class="message">but I thought this would be fewest number of instructions</span></div><div class="line" id="021352"><span class="nick" style="color:#389600"><a href="#021352" label="[02:13:52]">&lt;stikonas&gt;</a></span><span class="message">normal arith_stub had something like XCHG_eax_ebx\nCDTQ\nDIVIDES_eax_by_ebx_into_eax</span></div><div class="line" id="021406"><span class="nick" style="color:#389600"><a href="#021406" label="[02:14:06]">&lt;stikonas&gt;</a></span><span class="message">so here it became DIVIDES_eax_by_ebx_into_eax</span></div><div class="line" id="021423"><span class="nick" style="color:#2e2a4a"><a href="#021423" label="[02:14:23]">&lt;oriansj&gt;</a></span><span class="message">well x86 is kinda ugly with division and modulus</span></div><div class="line" id="021455"><span class="nick" style="color:#389600"><a href="#021455" label="[02:14:55]">&lt;stikonas&gt;</a></span><span class="message">yeah, so I kind of simplified two xchanges of rax/rbx</span></div><div class="line" id="021520"><span class="nick" style="color:#2e2a4a"><a href="#021520" label="[02:15:20]">&lt;oriansj&gt;</a></span><span class="message">So I can understand the difference as it would harmonize the support instructions across the operators</span></div><div class="line" id="021604"><span class="nick" style="color:#2e2a4a"><a href="#021604" label="[02:16:04]">&lt;oriansj&gt;</a></span><span class="message">but the CDTQ does absolutely matter for signed division</span></div><div class="line" id="021612"><span class="nick" style="color:#389600"><a href="#021612" label="[02:16:12]">&lt;stikonas&gt;</a></span><span class="message">oh ok, let me fix that</span></div><div class="line" id="021636"><span class="nick" style="color:#389600"><a href="#021636" label="[02:16:36]">&lt;stikonas&gt;</a></span><span class="message">what does it do actually?</span></div><div class="line" id="021655"><span class="nick" style="color:#2e2a4a"><a href="#021655" label="[02:16:55]">&lt;oriansj&gt;</a></span><span class="message">sign extends eax into edx</span></div><div class="line" id="021703"><span class="nick" style="color:#2e2a4a"><a href="#021703" label="[02:17:03]">&lt;oriansj&gt;</a></span><span class="message">or rax into rdx</span></div><div class="line" id="021724"><span class="nick" style="color:#2e2a4a"><a href="#021724" label="[02:17:24]">&lt;oriansj&gt;</a></span><span class="message">hence why for / and % there are signed and unsigned versions</span></div><div class="line" id="021732"><span class="nick" style="color:#2e2a4a"><a href="#021732" label="[02:17:32]">&lt;oriansj&gt;</a></span><span class="message">it matters for all architectures</span></div><div class="line" id="021749"><span class="nick" style="color:#389600"><a href="#021749" label="[02:17:49]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="021813"><span class="nick" style="color:#2e2a4a"><a href="#021813" label="[02:18:13]">&lt;oriansj&gt;</a></span><span class="message">otherwise you will hit floating point exceptions and wonder WTF happened we don't use floating point</span></div><div class="line" id="021846"><span class="nick" style="color:#389600"><a href="#021846" label="[02:18:46]">&lt;stikonas&gt;</a></span><span class="message">because here I don't distinguish between signed and unsigned operations</span></div><div class="line" id="021855"><span class="nick" style="color:#389600"><a href="#021855" label="[02:18:55]">&lt;stikonas&gt;</a></span><span class="message">would CQTO break unsigned?</span></div><div class="line" id="021901"><span class="nick" style="color:#2e2a4a"><a href="#021901" label="[02:19:01]">&lt;oriansj&gt;</a></span><span class="message">yep</span></div><div class="line" id="021916"><span class="nick" style="color:#389600"><a href="#021916" label="[02:19:16]">&lt;stikonas&gt;</a></span><span class="message">ok, so maybe don't merge this yet</span></div><div class="line" id="021929"><span class="nick" style="color:#389600"><a href="#021929" label="[02:19:29]">&lt;stikonas&gt;</a></span><span class="message">then I need to check what type is on the LHS</span></div><div class="line" id="021934"><span class="nick" style="color:#389600"><a href="#021934" label="[02:19:34]">&lt;stikonas&gt;</a></span><span class="message">and issue appropriate instruction</span></div><div class="line" id="021954"><span class="nick" style="color:#389600"><a href="#021954" label="[02:19:54]">&lt;stikonas&gt;</a></span><span class="message">let me mark it as a draft</span></div><div class="line" id="021959"><span class="nick" style="color:#2e2a4a"><a href="#021959" label="[02:19:59]">&lt;oriansj&gt;</a></span><span class="message">good plan</span></div><div class="line" id="022004"><span class="nick" style="color:#389600"><a href="#022004" label="[02:20:04]">&lt;stikonas&gt;</a></span><span class="message">it might still be useful if you could check for other issues</span></div><div class="line" id="022052"><span class="nick" style="color:#2e2a4a"><a href="#022052" label="[02:20:52]">&lt;oriansj&gt;</a></span><span class="message">for unsigned you have to load 0 into edx (rdx for amd64)</span></div><div class="line" id="022111"><span class="nick" style="color:#389600"><a href="#022111" label="[02:21:11]">&lt;stikonas&gt;</a></span><span class="message">yeah, I can see it in additive_expr_stub</span></div><div class="line" id="022220"><span class="nick" style="color:#2e2a4a"><a href="#022220" label="[02:22:20]">&lt;oriansj&gt;</a></span><span class="message">easy mistake to make, as one can go extremely far without noticing that difference</span></div><div class="line" id="022237"><span class="nick" style="color:#2e2a4a"><a href="#022237" label="[02:22:37]">&lt;oriansj&gt;</a></span><span class="message">(almost a year of M2-Planet use and development before janneke noticed it)</span></div><div class="line" id="022308"><span class="nick" style="color:#389600"><a href="#022308" label="[02:23:08]">&lt;stikonas&gt;</a></span><span class="message">well, at least I should be able to fix this</span></div><div class="line" id="022326"><span class="nick" style="color:#389600"><a href="#022326" label="[02:23:26]">&lt;stikonas&gt;</a></span><span class="message">we should have access to signed/unsigned info there</span></div><div class="line" id="022355"><span class="nick" style="color:#389600"><a href="#022355" label="[02:23:55]">&lt;stikonas&gt;</a></span><span class="message">I guess current_target-&gt;is_signed or something like that</span></div><div class="line" id="022540"><span class="nick" style="color:#389600"><a href="#022540" label="[02:25:40]">&lt;stikonas&gt;</a></span><span class="message">oriansj: should I actually combine all the duplicated strings from arith_stub and this new code?</span></div><div class="line" id="022606"><span class="nick" style="color:#389600"><a href="#022606" label="[02:26:06]">&lt;stikonas&gt;</a></span><span class="message">since those will be mostly or even exactly the same strings</span></div><div class="line" id="022651"><span class="nick" style="color:#389600"><a href="#022651" label="[02:26:51]">&lt;stikonas&gt;</a></span><span class="message">or should we keep them separate</span></div><div class="line" id="022658"><span class="nick" style="color:#389600"><a href="#022658" label="[02:26:58]">&lt;stikonas&gt;</a></span><span class="message">(like in this PR)</span></div><div class="line" id="022851"><span class="nick" style="color:#389600"><a href="#022851" label="[02:28:51]">&lt;stikonas&gt;</a></span><span class="message">anyway, I'll continue working on this tomorrow</span></div><div class="line" id="024805"><span class="nick" style="color:#2e2a4a"><a href="#024805" label="[02:48:05]">&lt;oriansj&gt;</a></span><span class="message">you'll want to look at the use of promote_type to get the correct type behavior (matching the C standard)</span></div><div class="line" id="025103"><span class="nick" style="color:#6b8072"><a href="#025103" label="[02:51:03]">&lt;stikonas[m]&gt;</a></span><span class="message">Oh yes, types of LHS and RHS might be different</span></div><div class="line" id="025953"><span class="nick" style="color:#2e2a4a"><a href="#025953" label="[02:59:53]">&lt;oriansj&gt;</a></span><span class="message">also a minor sanity check for arrays and struct members on atleast one architecture might be worth the effort</span></div><div class="line" id="031213"><span class="nick" style="color:#6b8072"><a href="#031213" label="[03:12:13]">&lt;stikonas[m]&gt;</a></span><span class="message">I checked arrays on amd64, but probably worth checking structs too</span></div><div class="line" id="031334"><span class="nick" style="color:#6b8072"><a href="#031334" label="[03:13:34]">&lt;stikonas[m]&gt;</a></span><span class="message">But in general you think this approach would do?</span></div><div class="line" id="031733"><span class="nick" style="color:#2e2a4a"><a href="#031733" label="[03:17:33]">&lt;oriansj&gt;</a></span><span class="message">absolutely</span></div><div class="line" id="031849"><span class="nick" style="color:#2e2a4a"><a href="#031849" label="[03:18:49]">&lt;oriansj&gt;</a></span><span class="message">I worry about it not working for a (foo+bar) += (baz + bart) case but that is something easy to validate</span></div><div class="line" id="034650"><span class="nick" style="color:#2e2a4a"><a href="#034650" label="[03:46:50]">&lt;oriansj&gt;</a></span><span class="message">stupid thought but your += code with a minor tweak would solve your ++ problem</span></div><div class="line" id="034923"><span class="nick" style="color:#2e2a4a"><a href="#034923" label="[03:49:23]">&lt;oriansj&gt;</a></span><span class="message">not the delayed addition behavior but it would do the addition and assignment</span></div><div class="line" id="035004"><span class="nick" style="color:#2e2a4a"><a href="#035004" label="[03:50:04]">&lt;oriansj&gt;</a></span><span class="message">so it would work for foo++ not that it could work for ++foo though</span></div><div class="line" id="035059"><span class="nick" style="color:#2e2a4a"><a href="#035059" label="[03:50:59]">&lt;oriansj&gt;</a></span><span class="message">but you probably wish to make that a seperate commit</span></div><div class="line" id="035112"><span class="nick" style="color:#6b8072"><a href="#035112" label="[03:51:12]">&lt;stikonas[m]&gt;</a></span><span class="message">Isn't (foo+bar) rvalue?</span></div><div class="line" id="035156"><span class="nick" style="color:#6b8072"><a href="#035156" label="[03:51:56]">&lt;stikonas[m]&gt;</a></span><span class="message">So illegal in C</span></div><div class="line" id="035252"><span class="nick" style="color:#2e2a4a"><a href="#035252" label="[03:52:52]">&lt;oriansj&gt;</a></span><span class="message">not illegal if two pointers</span></div><div class="line" id="035344"><span class="nick" style="color:#2e2a4a"><a href="#035344" label="[03:53:44]">&lt;oriansj&gt;</a></span><span class="message">but also the sort of code case we could put as a known issue if it involves pointer arithmetic behaviors</span></div><div class="line" id="035344"><span class="nick" style="color:#6b8072"><a href="#035344" label="[03:53:44]">&lt;stikonas[m]&gt;</a></span><span class="message">Oh well, probably something we can omit</span></div><div class="line" id="035352"><span class="nick" style="color:#2e2a4a"><a href="#035352" label="[03:53:52]">&lt;oriansj&gt;</a></span><span class="message">indeed</span></div><div class="line" id="035809"><span class="nick" style="color:#2e2a4a"><a href="#035809" label="[03:58:09]">&lt;oriansj&gt;</a></span><span class="message">greetings xd1le</span></div><div class="line" id="113612"><span class="nick" style="color:#80b1d3"><a href="#113612" label="[11:36:12]">&lt;xd1le&gt;</a></span><span class="message">oriansj o/</span></div><div class="line" id="121319"><span class="nick" style="color:#6d2462"><a href="#121319" label="[12:13:19]">&lt;ekaitz&gt;</a></span><span class="message">stikonas: do you want to give it a try to riscv-32 bit?</span></div><div class="line" id="121342"><span class="nick" style="color:#6d2462"><a href="#121342" label="[12:13:42]">&lt;ekaitz&gt;</a></span><span class="message">I arranged an ELF header that I suppose it will work</span></div><div class="line" id="121441"><span class="nick" style="color:#389600"><a href="#121441" label="[12:14:41]">&lt;stikonas&gt;</a></span><span class="message">ekaitz: yeah, I can try it out</span></div><div class="line" id="121447"><span class="nick" style="color:#389600"><a href="#121447" label="[12:14:47]">&lt;stikonas&gt;</a></span><span class="message">can you share the header?</span></div><div class="line" id="121501"><span class="nick" style="color:#6d2462"><a href="#121501" label="[12:15:01]">&lt;ekaitz&gt;</a></span><span class="message">sure</span></div><div class="line" id="121542"><span class="nick" style="color:#6d2462"><a href="#121542" label="[12:15:42]">&lt;ekaitz&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1219468/">https://paste.debian.net/1219468/</a> </span></div><div class="line" id="121553"><span class="nick" style="color:#6d2462"><a href="#121553" label="[12:15:53]">&lt;ekaitz&gt;</a></span><span class="message">I didn't compile the instructions or anything</span></div><div class="line" id="121611"><span class="nick" style="color:#6d2462"><a href="#121611" label="[12:16:11]">&lt;ekaitz&gt;</a></span><span class="message">but I need to setup the development environment for that and I don't have the energy for it :)</span></div><div class="line" id="121626"><span class="nick" style="color:#389600"><a href="#121626" label="[12:16:26]">&lt;stikonas&gt;</a></span><span class="message">well, let me try to adapt hex0</span></div><div class="line" id="121630"><span class="nick" style="color:#389600"><a href="#121630" label="[12:16:30]">&lt;stikonas&gt;</a></span><span class="message">it should be quick if this works</span></div><div class="line" id="121632"><span class="nick" style="color:#6d2462"><a href="#121632" label="[12:16:32]">&lt;ekaitz&gt;</a></span><span class="message">there's only to `ld`s you need to change</span></div><div class="line" id="121641"><span class="nick" style="color:#6d2462"><a href="#121641" label="[12:16:41]">&lt;ekaitz&gt;</a></span><span class="message">two*</span></div><div class="line" id="121818"><span class="nick" style="color:#389600"><a href="#121818" label="[12:18:18]">&lt;stikonas&gt;</a></span><span class="message">yeah, and thei immediates</span></div><div class="line" id="121830"><span class="nick" style="color:#389600"><a href="#121830" label="[12:18:30]">&lt;stikonas&gt;</a></span><span class="message">well, the comments are a bit off too</span></div><div class="line" id="121836"><span class="nick" style="color:#389600"><a href="#121836" label="[12:18:36]">&lt;stikonas&gt;</a></span><span class="message">but at least they don't matter for running things</span></div><div class="line" id="121856"><span class="nick" style="color:#389600"><a href="#121856" label="[12:18:56]">&lt;stikonas&gt;</a></span><span class="message">absolute label addresses, i.e. # :_start ; (0x0600078)</span></div><div class="line" id="122308"><span class="nick" style="color:#389600"><a href="#122308" label="[12:23:08]">&lt;stikonas&gt;</a></span><span class="message">ekaitz: hmm, I'm getting qemu-riscv32: ./hex0: Invalid ELF image for this architecture</span></div><div class="line" id="122358"><span class="nick" style="color:#389600"><a href="#122358" label="[12:23:58]">&lt;stikonas&gt;</a></span><span class="message">in <a rel="nofollow" href="https://paste.debian.net/plain/1219468">https://paste.debian.net/plain/1219468</a>  EI_CLASS=1 would mean 64 bits</span></div><div class="line" id="122400"><span class="nick" style="color:#389600"><a href="#122400" label="[12:24:00]">&lt;stikonas&gt;</a></span><span class="message">wouldn't it?</span></div><div class="line" id="122409"><span class="nick" style="color:#6d2462"><a href="#122409" label="[12:24:09]">&lt;ekaitz&gt;</a></span><span class="message">i may forgot to change something</span></div><div class="line" id="122438"><span class="nick" style="color:#6d2462"><a href="#122438" label="[12:24:38]">&lt;ekaitz&gt;</a></span><span class="message">class is supposed to be 1 in 32 bits i think</span></div><div class="line" id="122441"><span class="nick" style="color:#6d2462"><a href="#122441" label="[12:24:41]">&lt;ekaitz&gt;</a></span><span class="message">let me recheck</span></div><div class="line" id="122503"><span class="nick" style="color:#6d2462"><a href="#122503" label="[12:25:03]">&lt;ekaitz&gt;</a></span><span class="message">i found the error</span></div><div class="line" id="122504"><span class="nick" style="color:#389600"><a href="#122504" label="[12:25:04]">&lt;stikonas&gt;</a></span><span class="message">also e_entry needs adjusting</span></div><div class="line" id="122506"><span class="nick" style="color:#6d2462"><a href="#122506" label="[12:25:06]">&lt;ekaitz&gt;</a></span><span class="message">gimme a sec</span></div><div class="line" id="122508"><span class="nick" style="color:#6d2462"><a href="#122508" label="[12:25:08]">&lt;ekaitz&gt;</a></span><span class="message">yes</span></div><div class="line" id="122511"><span class="nick" style="color:#389600"><a href="#122511" label="[12:25:11]">&lt;stikonas&gt;</a></span><span class="message">sure</span></div><div class="line" id="122516"><span class="nick" style="color:#389600"><a href="#122516" label="[12:25:16]">&lt;stikonas&gt;</a></span><span class="message">I'll be back in 10 minutes or so</span></div><div class="line" id="122650"><span class="nick" style="color:#6d2462"><a href="#122650" label="[12:26:50]">&lt;ekaitz&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1219469/">https://paste.debian.net/1219469/</a> </span></div><div class="line" id="122710"><span class="nick" style="color:#6d2462"><a href="#122710" label="[12:27:10]">&lt;ekaitz&gt;</a></span><span class="message">give a try to this one and if it doesn't work i'll work on this on my own later in the afternoon</span></div><div class="line" id="123034"><span class="nick" style="color:#6d2462"><a href="#123034" label="[12:30:34]">&lt;ekaitz&gt;</a></span><span class="message">I gave this a short try and it doesn't look like it's failing</span></div><div class="line" id="123104"><span class="nick" style="color:#6d2462"><a href="#123104" label="[12:31:04]">&lt;ekaitz&gt;</a></span><span class="message">take please a look later and if it works we can start the riscv32 port!</span></div><div class="line" id="123731"><span class="nick" style="color:#389600"><a href="#123731" label="[12:37:31]">&lt;stikonas&gt;</a></span><span class="message">ok, seems more promising</span></div><div class="line" id="123746"><span class="nick" style="color:#389600"><a href="#123746" label="[12:37:46]">&lt;stikonas&gt;</a></span><span class="message">it now segfaulted in qemu</span></div><div class="line" id="123757"><span class="nick" style="color:#389600"><a href="#123757" label="[12:37:57]">&lt;stikonas&gt;</a></span><span class="message">but might be due to something I messed up later</span></div><div class="line" id="123853"><span class="nick" style="color:#6d2462"><a href="#123853" label="[12:38:53]">&lt;ekaitz&gt;</a></span><span class="message">i just made an executable that exists and it worked</span></div><div class="line" id="123902"><span class="nick" style="color:#6d2462"><a href="#123902" label="[12:39:02]">&lt;ekaitz&gt;</a></span><span class="message">it might be related some other thingie</span></div><div class="line" id="123914"><span class="nick" style="color:#389600"><a href="#123914" label="[12:39:14]">&lt;stikonas&gt;</a></span><span class="message">yeah, it's my mistake</span></div><div class="line" id="123922"><span class="nick" style="color:#389600"><a href="#123922" label="[12:39:22]">&lt;stikonas&gt;</a></span><span class="message">that ld -&gt; lw encoding</span></div><div class="line" id="123932"><span class="nick" style="color:#6d2462"><a href="#123932" label="[12:39:32]">&lt;ekaitz&gt;</a></span><span class="message">ugh</span></div><div class="line" id="123948"><span class="nick" style="color:#389600"><a href="#123948" label="[12:39:48]">&lt;stikonas&gt;</a></span><span class="message">I've editted the wrong file</span></div><div class="line" id="123957"><span class="nick" style="color:#6d2462"><a href="#123957" label="[12:39:57]">&lt;ekaitz&gt;</a></span><span class="message">lol</span></div><div class="line" id="123958"><span class="nick" style="color:#389600"><a href="#123958" label="[12:39:58]">&lt;stikonas&gt;</a></span><span class="message">riscv64 version instead of risc32</span></div><div class="line" id="124042"><span class="nick" style="color:#389600"><a href="#124042" label="[12:40:42]">&lt;stikonas&gt;</a></span><span class="message">ok, hex0 now works</span></div><div class="line" id="124051"><span class="nick" style="color:#6d2462"><a href="#124051" label="[12:40:51]">&lt;ekaitz&gt;</a></span><span class="message">yay!</span></div><div class="line" id="124057"><span class="nick" style="color:#6d2462"><a href="#124057" label="[12:40:57]">&lt;ekaitz&gt;</a></span><span class="message">well spent morning</span></div><div class="line" id="124122"><span class="nick" style="color:#6d2462"><a href="#124122" label="[12:41:22]">&lt;ekaitz&gt;</a></span><span class="message">go ahead and commit if you want</span></div><div class="line" id="124125"><span class="nick" style="color:#389600"><a href="#124125" label="[12:41:25]">&lt;stikonas&gt;</a></span><span class="message">let me update comments about addresses too</span></div><div class="line" id="124134"><span class="nick" style="color:#389600"><a href="#124134" label="[12:41:34]">&lt;stikonas&gt;</a></span><span class="message">well, I can make PR for oriansj</span></div><div class="line" id="124205"><span class="nick" style="color:#6d2462"><a href="#124205" label="[12:42:05]">&lt;ekaitz&gt;</a></span><span class="message">all yours!</span></div><div class="line" id="124802"><span class="nick" style="color:#389600"><a href="#124802" label="[12:48:02]">&lt;stikonas&gt;</a></span><span class="message">yeah, I'm tweaking elf header a bit more to make same base address as elsewhere in stage0-posix but it's not quite easy to adjust</span></div><div class="line" id="124809"><span class="nick" style="color:#389600"><a href="#124809" label="[12:48:09]">&lt;stikonas&gt;</a></span><span class="message">since we have a working version</span></div><div class="line" id="125054"><span class="nick" style="color:#6d2462"><a href="#125054" label="[12:50:54]">&lt;ekaitz&gt;</a></span><span class="message">i just copied the header from x86... but maybe I missed something</span></div><div class="line" id="125153"><span class="nick" style="color:#6d2462"><a href="#125153" label="[12:51:53]">&lt;ekaitz&gt;</a></span><span class="message">i mean it should have the same base address</span></div><div class="line" id="125659"><span class="nick" style="color:#389600"><a href="#125659" label="[12:56:59]">&lt;stikonas&gt;</a></span><span class="message">well, at least in riscv I've used 0x600000 elsewhere</span></div><div class="line" id="125726"><span class="nick" style="color:#389600"><a href="#125726" label="[12:57:26]">&lt;stikonas&gt;</a></span><span class="message">*everywhere</span></div><div class="line" id="125726"><span class="nick" style="color:#389600"><a href="#125726" label="[12:57:26]">&lt;stikonas&gt;</a></span><span class="message">doesn't really batter</span></div><div class="line" id="125728"><span class="nick" style="color:#389600"><a href="#125728" label="[12:57:28]">&lt;stikonas&gt;</a></span><span class="message">but while checking those addresses I noticed riscv64 comments where a bit off</span></div><div class="line" id="125731"><span class="nick" style="color:#389600"><a href="#125731" label="[12:57:31]">&lt;stikonas&gt;</a></span><span class="message">so I'll fix those...</span></div><div class="line" id="125922"><span class="nick" style="color:#6d2462"><a href="#125922" label="[12:59:22]">&lt;ekaitz&gt;</a></span><span class="message">i just triggered you in sunday</span></div><div class="line" id="125959"><span class="nick" style="color:#6d2462"><a href="#125959" label="[12:59:59]">&lt;ekaitz&gt;</a></span><span class="message">you know you don't have to do that now, right? :)</span></div><div class="line" id="131912"><span class="nick" style="color:#389600"><a href="#131912" label="[13:19:12]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds/pull/12">https://github.com/oriansj/bootstrap-seeds/pull/12</a> </span></div><div class="line" id="131926"><span class="nick" style="color:#389600"><a href="#131926" label="[13:19:26]">&lt;stikonas&gt;</a></span><span class="message">well, over weekdays I have a job...</span></div><div class="line" id="131933"><span class="nick" style="color:#389600"><a href="#131933" label="[13:19:33]">&lt;stikonas&gt;</a></span><span class="message">so weekend is not necesserily bad</span></div><div class="line" id="132057"><span class="nick" style="color:#389600"><a href="#132057" label="[13:20:57]">&lt;stikonas&gt;</a></span><span class="message">oriansj: once you pull in bootstrap-seeds, I'll pull it into stage0-posix and update files there (hex0 + development/gas files)</span></div><div class="line" id="132524"><span class="nick" style="color:#389600"><a href="#132524" label="[13:25:24]">&lt;stikonas&gt;</a></span><span class="message">anyway, riscv32 port doesn't look like much work</span></div><div class="line" id="132532"><span class="nick" style="color:#389600"><a href="#132532" label="[13:25:32]">&lt;stikonas&gt;</a></span><span class="message">although, I'll probably be busy with M2-Planet</span></div><div class="line" id="132541"><span class="nick" style="color:#389600"><a href="#132541" label="[13:25:41]">&lt;stikonas&gt;</a></span><span class="message">ekaitz: so you can try to convert other files...</span></div><div class="line" id="132646"><span class="nick" style="color:#6d2462"><a href="#132646" label="[13:26:46]">&lt;ekaitz&gt;</a></span><span class="message">i'll spend some free time on it, sure</span></div><div class="line" id="132708"><span class="nick" style="color:#389600"><a href="#132708" label="[13:27:08]">&lt;stikonas&gt;</a></span><span class="message">basically in hex0 code header is 0x24 bytes shorter, so I subtracted that from comments. Then LD-&gt;LW means third hex number goes from 3 to 2 and same for SD-&gt;SW</span></div><div class="line" id="132735"><span class="nick" style="color:#389600"><a href="#132735" label="[13:27:35]">&lt;stikonas&gt;</a></span><span class="message">well, some immediates will need reencoding...</span></div><div class="line" id="132744"><span class="nick" style="color:#389600"><a href="#132744" label="[13:27:44]">&lt;stikonas&gt;</a></span><span class="message">but it will be mostly the same numbers over and over again</span></div><div class="line" id="132914"><span class="nick" style="color:#389600"><a href="#132914" label="[13:29:14]">&lt;stikonas&gt;</a></span><span class="message">although, immediates might now be easier for me, cause I've done enough of them to often know how to adjust it in hex directly without going to calculator</span></div><div class="line" id="132915"><span class="nick" style="color:#2e2a4a"><a href="#132915" label="[13:29:15]">&lt;oriansj&gt;</a></span><span class="message">stikonas: your riscv32 work has been merged.</span></div><div class="line" id="132948"><span class="nick" style="color:#389600"><a href="#132948" label="[13:29:48]">&lt;stikonas&gt;</a></span><span class="message">correction: combined my and ekaitz work</span></div><div class="line" id="133018"><span class="nick" style="color:#2e2a4a"><a href="#133018" label="[13:30:18]">&lt;oriansj&gt;</a></span><span class="message">hopefully you remembered the zeroing patching Gabriel Wicki provided</span></div><div class="line" id="133033"><span class="nick" style="color:#2e2a4a"><a href="#133033" label="[13:30:33]">&lt;oriansj&gt;</a></span><span class="message">for RISCV64</span></div><div class="line" id="133045"><span class="nick" style="color:#389600"><a href="#133045" label="[13:30:45]">&lt;stikonas&gt;</a></span><span class="message">oh that's automatically included</span></div><div class="line" id="133109"><span class="nick" style="color:#389600"><a href="#133109" label="[13:31:09]">&lt;stikonas&gt;</a></span><span class="message">cause I took latest hex0_riscv64, took ekaitz header and replaced a couple of things</span></div><div class="line" id="133118"><span class="nick" style="color:#2e2a4a"><a href="#133118" label="[13:31:18]">&lt;oriansj&gt;</a></span><span class="message">I only ask because the merge indicated you were using an earlier commit</span></div><div class="line" id="133131"><span class="nick" style="color:#389600"><a href="#133131" label="[13:31:31]">&lt;stikonas&gt;</a></span><span class="message">oh, for bootstrap-seeds...</span></div><div class="line" id="133138"><span class="nick" style="color:#389600"><a href="#133138" label="[13:31:38]">&lt;stikonas&gt;</a></span><span class="message">maybe I didn't pull there</span></div><div class="line" id="133145"><span class="nick" style="color:#389600"><a href="#133145" label="[13:31:45]">&lt;stikonas&gt;</a></span><span class="message">anyway, I used latest stage0-posix commit</span></div><div class="line" id="133153"><span class="nick" style="color:#2e2a4a"><a href="#133153" label="[13:31:53]">&lt;oriansj&gt;</a></span><span class="message">ok</span></div><div class="line" id="133154"><span class="nick" style="color:#389600"><a href="#133154" label="[13:31:54]">&lt;stikonas&gt;</a></span><span class="message">and that's where that .hex0 file came from</span></div><div class="line" id="133203"><span class="nick" style="color:#2e2a4a"><a href="#133203" label="[13:32:03]">&lt;oriansj&gt;</a></span><span class="message">that'll work</span></div><div class="line" id="133242"><span class="nick" style="color:#389600"><a href="#133242" label="[13:32:42]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/pull/67">https://github.com/oriansj/stage0-posix/pull/67</a> </span></div><div class="line" id="133250"><span class="nick" style="color:#389600"><a href="#133250" label="[13:32:50]">&lt;stikonas&gt;</a></span><span class="message">I've actually noticed minor issue in hex0_riscv64 comments</span></div><div class="line" id="133254"><span class="nick" style="color:#389600"><a href="#133254" label="[13:32:54]">&lt;stikonas&gt;</a></span><span class="message">that is also now pulled in</span></div><div class="line" id="133312"><span class="nick" style="color:#389600"><a href="#133312" label="[13:33:12]">&lt;stikonas&gt;</a></span><span class="message"> basically all comments were off by 4</span></div><div class="line" id="133330"><span class="nick" style="color:#2e2a4a"><a href="#133330" label="[13:33:30]">&lt;oriansj&gt;</a></span><span class="message">probably by the removal of the NOP</span></div><div class="line" id="133331"><span class="nick" style="color:#389600"><a href="#133331" label="[13:33:31]">&lt;stikonas&gt;</a></span><span class="message">although, it's only the difference between two offsets that matters</span></div><div class="line" id="133337"><span class="nick" style="color:#389600"><a href="#133337" label="[13:33:37]">&lt;stikonas&gt;</a></span><span class="message">probably...</span></div><div class="line" id="133413"><span class="nick" style="color:#389600"><a href="#133413" label="[13:34:13]">&lt;stikonas&gt;</a></span><span class="message">anyway, ld-&gt;lw was the only functional change</span></div><div class="line" id="161845"><span class="nick" style="color:#2e2a4a"><a href="#161845" label="[16:18:45]">&lt;oriansj&gt;</a></span><span class="message">stage0-posix pull requests merged</span></div><div class="line" id="162048"><span class="nick" style="color:#389600"><a href="#162048" label="[16:20:48]">&lt;stikonas&gt;</a></span><span class="message">thanks</span></div><div class="line" id="230649"><span class="nick" style="color:#389600"><a href="#230649" label="[23:06:49]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I'm now running some more involved tests on assignments. Arrays and struct members seem to work. Although I am now hitting some other issue (possibly in the new type promote code)...</span></div><div class="line" id="230709"><span class="nick" style="color:#389600"><a href="#230709" label="[23:07:09]">&lt;stikonas&gt;</a></span><span class="message">i.e. state-&gt;p += CHUNK_SIZE; worked for me but</span></div><div class="line" id="230717"><span class="nick" style="color:#389600"><a href="#230717" label="[23:07:17]">&lt;stikonas&gt;</a></span><span class="message">state-&gt;len -= CHUNK_SIZE; causes crash</span></div><div class="line" id="230802"><span class="nick" style="color:#389600"><a href="#230802" label="[23:08:02]">&lt;stikonas&gt;</a></span><span class="message">(I'm using sha256sum for tests since it probably uses quite a bit of arithmetic and any small difference would quickly be apparent in hash mismatch)</span></div><div class="line" id="231649"><span class="nick" style="color:#389600"><a href="#231649" label="[23:16:49]">&lt;stikonas&gt;</a></span><span class="message">hmm, it doesn't seem to be type promotion...</span></div><div class="line" id="231723"><span class="nick" style="color:#2e2a4a"><a href="#231723" label="[23:17:23]">&lt;oriansj&gt;</a></span><span class="message">well type promotion function can only crash if it isn't given two types</span></div><div class="line" id="231826"><span class="nick" style="color:#389600"><a href="#231826" label="[23:18:26]">&lt;stikonas&gt;</a></span><span class="message">no, it might be mixed up assembly order with - operator</span></div><div class="line" id="231852"><span class="nick" style="color:#389600"><a href="#231852" label="[23:18:52]">&lt;stikonas&gt;</a></span><span class="message">at least that's what I'm reading from the M1 diff</span></div><div class="line" id="231919"><span class="nick" style="color:#389600"><a href="#231919" label="[23:19:19]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1219526/">https://paste.debian.net/1219526/</a> </span></div><div class="line" id="231925"><span class="nick" style="color:#2e2a4a"><a href="#231925" label="[23:19:25]">&lt;oriansj&gt;</a></span><span class="message">so not a compile time segfault but a runtime</span></div><div class="line" id="231943"><span class="nick" style="color:#2e2a4a"><a href="#231943" label="[23:19:43]">&lt;oriansj&gt;</a></span><span class="message">good, yeah that just means the generated assembly is wrong</span></div><div class="line" id="231950"><span class="nick" style="color:#389600"><a href="#231950" label="[23:19:50]">&lt;stikonas&gt;</a></span><span class="message">yeah</span></div><div class="line" id="231954"><span class="nick" style="color:#389600"><a href="#231954" label="[23:19:54]">&lt;stikonas&gt;</a></span><span class="message">and easy to check</span></div><div class="line" id="232000"><span class="nick" style="color:#389600"><a href="#232000" label="[23:20:00]">&lt;stikonas&gt;</a></span><span class="message">I can build some other arches</span></div><div class="line" id="232309"><span class="nick" style="color:#2e2a4a"><a href="#232309" label="[23:23:09]">&lt;oriansj&gt;</a></span><span class="message">well yes, figuring out assembly is much easier than figuring out if a binary is doing the right thing.</span></div><div class="line" id="232345"><span class="nick" style="color:#389600"><a href="#232345" label="[23:23:45]">&lt;stikonas&gt;</a></span><span class="message">well, buildint riscv64 now</span></div><div class="line" id="232358"><span class="nick" style="color:#389600"><a href="#232358" label="[23:23:58]">&lt;stikonas&gt;</a></span><span class="message">if it works then it means I'm almost done</span></div><div class="line" id="232439"><span class="nick" style="color:#2e2a4a"><a href="#232439" label="[23:24:39]">&lt;oriansj&gt;</a></span><span class="message">You might want to add a bootstrap-mode check, so that if any of these are used it'll throw an error on building</span></div><div class="line" id="232536"><span class="nick" style="color:#2e2a4a"><a href="#232536" label="[23:25:36]">&lt;oriansj&gt;</a></span><span class="message">It is the global variable: BOOTSTRAP_MODE</span></div><div class="line" id="232536"><span class="nick" style="color:#389600"><a href="#232536" label="[23:25:36]">&lt;stikonas&gt;</a></span><span class="message">ok</span></div><div class="line" id="232541"><span class="nick" style="color:#389600"><a href="#232541" label="[23:25:41]">&lt;stikonas&gt;</a></span><span class="message">yeah, I saw it in some placaes</span></div><div class="line" id="232552"><span class="nick" style="color:#389600"><a href="#232552" label="[23:25:52]">&lt;stikonas&gt;</a></span><span class="message">well, basicaly so that we don't use this thing in M2-Planet itself</span></div><div class="line" id="232607"><span class="nick" style="color:#389600"><a href="#232607" label="[23:26:07]">&lt;stikonas&gt;</a></span><span class="message">since cc_* doesn't support any of this stuff</span></div><div class="line" id="232612"><span class="nick" style="color:#2e2a4a"><a href="#232612" label="[23:26:12]">&lt;oriansj&gt;</a></span><span class="message">so that in the future if someone tries to use the new functionality that cc_* doesn't support, it will be immediately caught by test1000</span></div><div class="line" id="232633"><span class="nick" style="color:#389600"><a href="#232633" label="[23:26:33]">&lt;stikonas&gt;</a></span><span class="message">ok, sha256sum on riscv64 doesn't crash</span></div><div class="line" id="232646"><span class="nick" style="color:#389600"><a href="#232646" label="[23:26:46]">&lt;stikonas&gt;</a></span><span class="message">so I think it's just some messed up assembly for x86/amd64</span></div><div class="line" id="232720"><span class="nick" style="color:#389600"><a href="#232720" label="[23:27:20]">&lt;stikonas&gt;</a></span><span class="message">maybe I shouldn't have swapped the registers there...</span></div><div class="line" id="232742"><span class="nick" style="color:#389600"><a href="#232742" label="[23:27:42]">&lt;stikonas&gt;</a></span><span class="message">well, I can undo it and use exactly the same strings as in arithmetic stub</span></div><div class="line" id="232933"><span class="nick" style="color:#2e2a4a"><a href="#232933" label="[23:29:33]">&lt;oriansj&gt;</a></span><span class="message">well the reason for the push in the general and arithmetic recursion is that the right side might alter the ebx (or r1) register setting up its value. Then the pop restores the left side before performing the operation</span></div><div class="line" id="233613"><span class="nick" style="color:#2e2a4a"><a href="#233613" label="[23:36:13]">&lt;oriansj&gt;</a></span><span class="message">but you'll know if you did it right with just a -= ((b * 37) &gt;&gt; 3 );</span></div><div class="line" id="233855"><span class="nick" style="color:#389600"><a href="#233855" label="[23:38:55]">&lt;stikonas&gt;</a></span><span class="message">yeah, I can try this testcase too</span></div><div class="line" id="234522"><span class="nick" style="color:#389600"><a href="#234522" label="[23:45:22]">&lt;stikonas&gt;</a></span><span class="message">ok, amd64 fixed...</span></div><div class="line" id="235030"><span class="nick" style="color:#2e2a4a"><a href="#235030" label="[23:50:30]">&lt;oriansj&gt;</a></span><span class="message">nice</span></div><br /></div></body></html>