<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-11-02.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000120"><span class="nick" style="color:#389600"><a href="#000120" label="[00:01:20]">&lt;stikonas&gt;</a></span><span class="message">ekaitz: oh, the big thing in M2 compared to cc</span></div><div class="line" id="000128"><span class="nick" style="color:#389600"><a href="#000128" label="[00:01:28]">&lt;stikonas&gt;</a></span><span class="message">is that M2-Planet has some support for C preprocessor</span></div><div class="line" id="000200"><span class="nick" style="color:#8dd3c7"><a href="#000200" label="[00:02:00]">&lt;ekaitz&gt;</a></span><span class="message">aaah now we are talking</span></div><div class="line" id="000210"><span class="nick" style="color:#8dd3c7"><a href="#000210" label="[00:02:10]">&lt;ekaitz&gt;</a></span><span class="message">that's the kind of information i was looking for</span></div><div class="line" id="000521"><span class="nick" style="color:#2e2a4a"><a href="#000521" label="[00:05:21]">&lt;oriansj&gt;</a></span><span class="message">M2-Planet compared to cc_* is like a car compared to the first bicycles; much more stable, robust, survives bad code better, much faster and carries a boatload more features</span></div><div class="line" id="000609"><span class="nick" style="color:#2e2a4a"><a href="#000609" label="[00:06:09]">&lt;oriansj&gt;</a></span><span class="message">(such as a basic C preprocessor (cc_* doesn't support any preprocessing))</span></div><div class="line" id="000656"><span class="nick" style="color:#2e2a4a"><a href="#000656" label="[00:06:56]">&lt;oriansj&gt;</a></span><span class="message">the closest it has is // CONSTANT name number</span></div><div class="line" id="000808"><span class="nick" style="color:#2e2a4a"><a href="#000808" label="[00:08:08]">&lt;oriansj&gt;</a></span><span class="message">struct foo {int a[50];}; is another example feature</span></div><div class="line" id="000823"><span class="nick" style="color:#2e2a4a"><a href="#000823" label="[00:08:23]">&lt;oriansj&gt;</a></span><span class="message">that m2-Planet has but cc_* doesn't</span></div><div class="line" id="000833"><span class="nick" style="color:#6b8072"><a href="#000833" label="[00:08:33]">&lt;vagrantc&gt;</a></span><span class="message">but uses more fossil fuels?</span></div><div class="line" id="000958"><span class="nick" style="color:#2e2a4a"><a href="#000958" label="[00:09:58]">&lt;oriansj&gt;</a></span><span class="message">M2-Planet is 140KB in size but cc_* is only 14KB</span></div><div class="line" id="001013"><span class="nick" style="color:#389600"><a href="#001013" label="[00:10:13]">&lt;stikonas&gt;</a></span><span class="message">depends on your electricity supply, if you run on solar or wind than no</span></div><div class="line" id="001019"><span class="nick" style="color:#389600"><a href="#001019" label="[00:10:19]">&lt;stikonas&gt;</a></span><span class="message">(or nuclear0</span></div><div class="line" id="001025"><span class="nick" style="color:#2e2a4a"><a href="#001025" label="[00:10:25]">&lt;oriansj&gt;</a></span><span class="message">M2-Planet needs about 2MB to self-host</span></div><div class="line" id="001050"><span class="nick" style="color:#389600"><a href="#001050" label="[00:10:50]">&lt;stikonas&gt;</a></span><span class="message">well, self-host if you use full-features M2libc</span></div><div class="line" id="001054"><span class="nick" style="color:#2e2a4a"><a href="#001054" label="[00:10:54]">&lt;oriansj&gt;</a></span><span class="message">but cc_* can compile M2-Planet in only 256KB</span></div><div class="line" id="001103"><span class="nick" style="color:#389600"><a href="#001103" label="[00:11:03]">&lt;stikonas&gt;</a></span><span class="message">basically we first build simplified M2 with only really tiny libc</span></div><div class="line" id="001115"><span class="nick" style="color:#6b8072"><a href="#001115" label="[00:11:15]">&lt;vagrantc&gt;</a></span><span class="message">maybe someday we can have a proper bicycle based bootstrap chain. :)</span></div><div class="line" id="001117"><span class="nick" style="color:#389600"><a href="#001117" label="[00:11:17]">&lt;stikonas&gt;</a></span><span class="message">and then we use it to build C versions of earlier hex tools</span></div><div class="line" id="001129"><span class="nick" style="color:#389600"><a href="#001129" label="[00:11:29]">&lt;stikonas&gt;</a></span><span class="message">and then rebuild M2-planet using just C toolchain</span></div><div class="line" id="001145"><span class="nick" style="color:#2e2a4a"><a href="#001145" label="[00:11:45]">&lt;oriansj&gt;</a></span><span class="message">which reads and writes exactly 1 byte at a time vs M2-Planet which reads and writes are fully buffered and way faster</span></div><div class="line" id="001204"><span class="nick" style="color:#389600"><a href="#001204" label="[00:12:04]">&lt;stikonas&gt;</a></span><span class="message">and  then we go to mes which again reads 1 byte at a time</span></div><div class="line" id="001229"><span class="nick" style="color:#2e2a4a"><a href="#001229" label="[00:12:29]">&lt;oriansj&gt;</a></span><span class="message">huge performance difference between cc_* built M2-Planet and self-hosted M2-Planet</span></div><div class="line" id="001552"><span class="nick" style="color:#2e2a4a"><a href="#001552" label="[00:15:52]">&lt;oriansj&gt;</a></span><span class="message">stikonas: really? I thought janneke used a C library which buffered reads and writes?</span></div><div class="line" id="001620"><span class="nick" style="color:#389600"><a href="#001620" label="[00:16:20]">&lt;stikonas&gt;</a></span><span class="message">oriansj: hmm, I don't think there is buffering</span></div><div class="line" id="001624"><span class="nick" style="color:#389600"><a href="#001624" label="[00:16:24]">&lt;stikonas&gt;</a></span><span class="message">or at least when mes runs</span></div><div class="line" id="001629"><span class="nick" style="color:#389600"><a href="#001629" label="[00:16:29]">&lt;stikonas&gt;</a></span><span class="message">it reads 1 byte at a time</span></div><div class="line" id="001634"><span class="nick" style="color:#389600"><a href="#001634" label="[00:16:34]">&lt;stikonas&gt;</a></span><span class="message">and writes 1 at a time</span></div><div class="line" id="001651"><span class="nick" style="color:#389600"><a href="#001651" label="[00:16:51]">&lt;stikonas&gt;</a></span><span class="message">still, it's not the slowest thing in mes</span></div><div class="line" id="001700"><span class="nick" style="color:#389600"><a href="#001700" label="[00:17:00]">&lt;stikonas&gt;</a></span><span class="message">that eval stuff is much slower</span></div><div class="line" id="001714"><span class="nick" style="color:#389600"><a href="#001714" label="[00:17:14]">&lt;stikonas&gt;</a></span><span class="message">like we discussed, especially after porting away from switch</span></div><div class="line" id="001801"><span class="nick" style="color:#2e2a4a"><a href="#001801" label="[00:18:01]">&lt;oriansj&gt;</a></span><span class="message">correction the cc_* built version of M2-Planet is 256KB, the self-hosted M2-Planet is 316KB (much more library code to speed things up)</span></div><div class="line" id="002024"><span class="nick" style="color:#2e2a4a"><a href="#002024" label="[00:20:24]">&lt;oriansj&gt;</a></span><span class="message">stikonas: very true</span></div><div class="line" id="002123"><span class="nick" style="color:#2e2a4a"><a href="#002123" label="[00:21:23]">&lt;oriansj&gt;</a></span><span class="message">part of me wonders if a scheme compiler written in the C subset M2-Planet supports would speed up the mescc bootstrap section</span></div><div class="line" id="002200"><span class="nick" style="color:#389600"><a href="#002200" label="[00:22:00]">&lt;stikonas&gt;</a></span><span class="message">yeah, possibly...</span></div><div class="line" id="002206"><span class="nick" style="color:#389600"><a href="#002206" label="[00:22:06]">&lt;stikonas&gt;</a></span><span class="message">but it's a lot of extra work</span></div><div class="line" id="002258"><span class="nick" style="color:#389600"><a href="#002258" label="[00:22:58]">&lt;stikonas&gt;</a></span><span class="message">and probably needs a scheme expert</span></div><div class="line" id="004114"><span class="nick" style="color:#2e2a4a"><a href="#004114" label="[00:41:14]">&lt;oriansj&gt;</a></span><span class="message">true and all of the scheme compilers I have seen are written in scheme</span></div><div class="line" id="004506"><span class="nick" style="color:#80b1d3"><a href="#004506" label="[00:45:06]">&lt;muurkha&gt;</a></span><span class="message">yeah, it makes sense that you'd bootstrap scheme by running your scheme compiler under a scheme interpreter written in some other language</span></div><div class="line" id="004514"><span class="nick" style="color:#80b1d3"><a href="#004514" label="[00:45:14]">&lt;muurkha&gt;</a></span><span class="message">or debootstrap it or whatever</span></div><div class="line" id="004542"><span class="nick" style="color:#389600"><a href="#004542" label="[00:45:42]">&lt;stikonas&gt;</a></span><span class="message">well, you can always run it in mes</span></div><div class="line" id="004559"><span class="nick" style="color:#80b1d3"><a href="#004559" label="[00:45:59]">&lt;muurkha&gt;</a></span><span class="message">I mean, for a much wider set of values of &quot;you&quot;</span></div><div class="line" id="004604"><span class="nick" style="color:#389600"><a href="#004604" label="[00:46:04]">&lt;stikonas&gt;</a></span><span class="message">M2-Planet -&gt; mes-m2 -&gt; scheme_compiler -&gt; mescc binary</span></div><div class="line" id="004614"><span class="nick" style="color:#80b1d3"><a href="#004614" label="[00:46:14]">&lt;muurkha&gt;</a></span><span class="message">like &quot;any random Scheme implementor in history&quot;</span></div><div class="line" id="004624"><span class="nick" style="color:#80b1d3"><a href="#004624" label="[00:46:24]">&lt;muurkha&gt;</a></span><span class="message">unless that other language is something better suited for writing compilers than Scheme, such as OCaml</span></div><div class="line" id="004950"><span class="nick" style="color:#2e2a4a"><a href="#004950" label="[00:49:50]">&lt;oriansj&gt;</a></span><span class="message">well given enough skill a compiler can be written in any language but I am uncertain that OCaml is used as the bootstrapping language of choice for compilers for new languages.</span></div><div class="line" id="011112"><span class="nick" style="color:#389600"><a href="#011112" label="[01:11:12]">&lt;stikonas&gt;</a></span><span class="message">oriansj, janneke: pushed new stage0-posix now <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/releases/tag/Release_1.6.0">https://github.com/oriansj/stage0-posix/releases/tag/Release_1.6.0</a> </span></div><div class="line" id="011126"><span class="nick" style="color:#389600"><a href="#011126" label="[01:11:26]">&lt;stikonas&gt;</a></span><span class="message">I should probably write to a mailing list too</span></div><div class="line" id="011216"><span class="nick" style="color:#389600"><a href="#011216" label="[01:12:16]">&lt;stikonas&gt;</a></span><span class="message">oriansj: but savannah tag is still showing the old value... <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/mescc-tools.git">https://git.savannah.gnu.org/cgit/mescc-tools.git</a> </span></div><div class="line" id="011221"><span class="nick" style="color:#389600"><a href="#011221" label="[01:12:21]">&lt;stikonas&gt;</a></span><span class="message">maybe you need to delete it first</span></div><div class="line" id="011223"><span class="nick" style="color:#389600"><a href="#011223" label="[01:12:23]">&lt;stikonas&gt;</a></span><span class="message">and then repush</span></div><div class="line" id="011344"><span class="nick" style="color:#389600"><a href="#011344" label="[01:13:44]">&lt;stikonas&gt;</a></span><span class="message">maybe email can wait till tomorrow...</span></div><div class="line" id="012352"><span class="nick" style="color:#80b1d3"><a href="#012352" label="[01:23:52]">&lt;muurkha&gt;</a></span><span class="message">oriansj: OCaml is a pretty reasonable language for one person to write a compiler in, better than Scheme, which in turn is better than C</span></div><div class="line" id="012434"><span class="nick" style="color:#80b1d3"><a href="#012434" label="[01:24:34]">&lt;muurkha&gt;</a></span><span class="message">I forget where the original Caml bootstrap chain came from, but I doubt it's C</span></div><div class="line" id="021429"><span class="nick" style="color:#2e2a4a"><a href="#021429" label="[02:14:29]">&lt;oriansj&gt;</a></span><span class="message">stikonas: savannah has append only git history bit set; so I did a 1.5.1 tag for mescc-tools which points to the current head</span></div><div class="line" id="022158"><span class="nick" style="color:#2e2a4a"><a href="#022158" label="[02:21:58]">&lt;oriansj&gt;</a></span><span class="message">muurkha: well OCaml came from ML and that has some history with Modula but I can't say I know the ugly details.</span></div><div class="line" id="022311"><span class="nick" style="color:#2e2a4a"><a href="#022311" label="[02:23:11]">&lt;oriansj&gt;</a></span><span class="message">but more to the point, compilers probably are best written in languages where pattern matching and state machines are most easily written.</span></div><div class="line" id="022804"><span class="nick" style="color:#2e2a4a"><a href="#022804" label="[02:28:04]">&lt;oriansj&gt;</a></span><span class="message">but I do know Coq was used in OCaml's creation</span></div><div class="line" id="022931"><span class="nick" style="color:#2e2a4a"><a href="#022931" label="[02:29:31]">&lt;oriansj&gt;</a></span><span class="message">(or did I get that backwards??)</span></div><div class="line" id="024101"><span class="nick" style="color:#80b1d3"><a href="#024101" label="[02:41:01]">&lt;muurkha&gt;</a></span><span class="message">Modula and ML are pretty unrelated, and I think it's reasonable to say that OCaml was sort of written in order to write Coq in</span></div><div class="line" id="024120"><span class="nick" style="color:#80b1d3"><a href="#024120" label="[02:41:20]">&lt;muurkha&gt;</a></span><span class="message">so Coq was important to OCaml's creation</span></div><div class="line" id="024150"><span class="nick" style="color:#80b1d3"><a href="#024150" label="[02:41:50]">&lt;muurkha&gt;</a></span><span class="message">Scheme and C and Modula don't have pattern matching; Prolog and Haskell and OCaml and other dialects of ML do</span></div><div class="line" id="024218"><span class="nick" style="color:#80b1d3"><a href="#024218" label="[02:42:18]">&lt;muurkha&gt;</a></span><span class="message">I do feel like pattern matching is pretty useful for that</span></div><div class="line" id="024226"><span class="nick" style="color:#80b1d3"><a href="#024226" label="[02:42:26]">&lt;muurkha&gt;</a></span><span class="message">also though I find OCaml's type checking useful</span></div><div class="line" id="025040"><span class="nick" style="color:#2e2a4a"><a href="#025040" label="[02:50:40]">&lt;oriansj&gt;</a></span><span class="message">well, type checking is generally helpful for writing correct code but that isn't specific to writing compilers.</span></div><div class="line" id="025500"><span class="nick" style="color:#2e2a4a"><a href="#025500" label="[02:55:00]">&lt;oriansj&gt;</a></span><span class="message">but I am a firm believer in static *extremely* strongly typed languages. To the point where I find virtually all languages lacking</span></div><div class="line" id="025642"><span class="nick" style="color:#2e2a4a"><a href="#025642" label="[02:56:42]">&lt;oriansj&gt;</a></span><span class="message">like give me an int with carry bit and borrow bit</span></div><div class="line" id="025752"><span class="nick" style="color:#2e2a4a"><a href="#025752" label="[02:57:52]">&lt;oriansj&gt;</a></span><span class="message">give me a type where I can specify big or little endian for the data</span></div><div class="line" id="025809"><span class="nick" style="color:#2e2a4a"><a href="#025809" label="[02:58:09]">&lt;oriansj&gt;</a></span><span class="message">and then do the right thing on all architectures</span></div><div class="line" id="025856"><span class="nick" style="color:#80b1d3"><a href="#025856" label="[02:58:56]">&lt;muurkha&gt;</a></span><span class="message">writing correct code is I think significantly harder for compilers than for, say, GUI toolkits</span></div><div class="line" id="025915"><span class="nick" style="color:#80b1d3"><a href="#025915" label="[02:59:15]">&lt;muurkha&gt;</a></span><span class="message">and when it screws up it's significantly harder to debug</span></div><div class="line" id="025942"><span class="nick" style="color:#80b1d3"><a href="#025942" label="[02:59:42]">&lt;muurkha&gt;</a></span><span class="message">it'd be interesting to see your type system fleshed out</span></div><div class="line" id="025948"><span class="nick" style="color:#80b1d3"><a href="#025948" label="[02:59:48]">&lt;muurkha&gt;</a></span><span class="message">have you written it up anywhere?</span></div><div class="line" id="030020"><span class="nick" style="color:#2e2a4a"><a href="#030020" label="[03:00:20]">&lt;oriansj&gt;</a></span><span class="message">on a notebook for my ideal programming language</span></div><div class="line" id="030055"><span class="nick" style="color:#6d2462"><a href="#030055" label="[03:00:55]">&lt;theruran&gt;</a></span><span class="message">oriansj: Ada can do those things</span></div><div class="line" id="030122"><span class="nick" style="color:#6d2462"><a href="#030122" label="[03:01:22]">&lt;theruran&gt;</a></span><span class="message">and it probably is the only one that can</span></div><div class="line" id="030259"><span class="nick" style="color:#80b1d3"><a href="#030259" label="[03:02:59]">&lt;muurkha&gt;</a></span><span class="message">hahaha</span></div><div class="line" id="030307"><span class="nick" style="color:#80b1d3"><a href="#030307" label="[03:03:07]">&lt;muurkha&gt;</a></span><span class="message">yeah no</span></div><div class="line" id="030509"><span class="nick" style="color:#6d2462"><a href="#030509" label="[03:05:09]">&lt;theruran&gt;</a></span><span class="message"> <a rel="nofollow" href="https://ada-lang.io/docs/arm/AA-13/AA-13.5/#1353--bit-ordering">https://ada-lang.io/docs/arm/AA-13/AA-13.5/#1353--bit-ordering</a> </span></div><div class="line" id="030545"><span class="nick" style="color:#6d2462"><a href="#030545" label="[03:05:45]">&lt;theruran&gt;</a></span><span class="message">for the other thing, you can define a record with the carry bit and borrow bit and then force it into a size</span></div><div class="line" id="030651"><span class="nick" style="color:#80b1d3"><a href="#030651" label="[03:06:51]">&lt;muurkha&gt;</a></span><span class="message">hmm, well, I could be wrong!</span></div><div class="line" id="030655"><span class="nick" style="color:#2e2a4a"><a href="#030655" label="[03:06:55]">&lt;oriansj&gt;</a></span><span class="message">theruran: <a rel="nofollow" href="https://en.wikibooks.org/wiki/Ada_Programming/Type_System">https://en.wikibooks.org/wiki/Ada_Programming/Type_System</a>  it does not have a carry or borrow bit as far as I can see but you could probably approximate one; just like most other languages could as well</span></div><div class="line" id="030710"><span class="nick" style="color:#80b1d3"><a href="#030710" label="[03:07:10]">&lt;muurkha&gt;</a></span><span class="message">these are definitely not features of Ada I learned about in the past</span></div><div class="line" id="030819"><span class="nick" style="color:#6d2462"><a href="#030819" label="[03:08:19]">&lt;theruran&gt;</a></span><span class="message">I'm pretty sure you could define that type in detail and make it portable with Ada's features, unlike other language's approximations</span></div><div class="line" id="030820"><span class="nick" style="color:#2e2a4a"><a href="#030820" label="[03:08:20]">&lt;oriansj&gt;</a></span><span class="message">and the bit ordering appears to be a keyword modifying a single thing. kinda like unsigned long</span></div><div class="line" id="030912"><span class="nick" style="color:#6d2462"><a href="#030912" label="[03:09:12]">&lt;theruran&gt;</a></span><span class="message">Bit_Ordering comes up when a system sends some data in different endianness, so you can specify which one you are expecting and the compiler will deal with it accordingly</span></div><div class="line" id="030929"><span class="nick" style="color:#2e2a4a"><a href="#030929" label="[03:09:29]">&lt;oriansj&gt;</a></span><span class="message">well in C, you would just have #IFDEF bigendian block and an #ELSE block around things where different bit orders mattered.</span></div><div class="line" id="031008"><span class="nick" style="color:#6d2462"><a href="#031008" label="[03:10:08]">&lt;theruran&gt;</a></span><span class="message">C macros are not as portable</span></div><div class="line" id="031042"><span class="nick" style="color:#2e2a4a"><a href="#031042" label="[03:10:42]">&lt;oriansj&gt;</a></span><span class="message">but yes transparently not having to do more than specify it is something that needs to be explicitly included.</span></div><div class="line" id="031206"><span class="nick" style="color:#2e2a4a"><a href="#031206" label="[03:12:06]">&lt;oriansj&gt;</a></span><span class="message">things like unsigned long are just better being u_int64_be so you know it is both unsigned, an int of exactly 64bits and all in big endian format</span></div><div class="line" id="031331"><span class="nick" style="color:#2e2a4a"><a href="#031331" label="[03:13:31]">&lt;oriansj&gt;</a></span><span class="message">and one needs to be able to specific more than just byte endian but also bit endian separately</span></div><div class="line" id="031511"><span class="nick" style="color:#2e2a4a"><a href="#031511" label="[03:15:11]">&lt;oriansj&gt;</a></span><span class="message">or s_int23_le to specify a 23bit signed integer in little endian format</span></div><div class="line" id="031941"><span class="nick" style="color:#2e2a4a"><a href="#031941" label="[03:19:41]">&lt;oriansj&gt;</a></span><span class="message">although I think my ideas are a bit too wordy</span></div><div class="line" id="032201"><span class="nick" style="color:#80b1d3"><a href="#032201" label="[03:22:01]">&lt;muurkha&gt;</a></span><span class="message">maybe what you want is VHDL actually</span></div><div class="line" id="032210"><span class="nick" style="color:#80b1d3"><a href="#032210" label="[03:22:10]">&lt;muurkha&gt;</a></span><span class="message">which is not Ada but is based on Ada</span></div><div class="line" id="032219"><span class="nick" style="color:#80b1d3"><a href="#032219" label="[03:22:19]">&lt;muurkha&gt;</a></span><span class="message">VHDL even has different types of bits</span></div><div class="line" id="032236"><span class="nick" style="color:#2e2a4a"><a href="#032236" label="[03:22:36]">&lt;oriansj&gt;</a></span><span class="message">but not generally compiled to running binaries</span></div><div class="line" id="032253"><span class="nick" style="color:#80b1d3"><a href="#032253" label="[03:22:53]">&lt;muurkha&gt;</a></span><span class="message">compiling it to running binaries is usually how most of the testing is done</span></div><div class="line" id="032330"><span class="nick" style="color:#2e2a4a"><a href="#032330" label="[03:23:30]">&lt;oriansj&gt;</a></span><span class="message">I thought it was generally compiled to FPGA bits for running</span></div><div class="line" id="032341"><span class="nick" style="color:#80b1d3"><a href="#032341" label="[03:23:41]">&lt;muurkha&gt;</a></span><span class="message">because interpretation runs too slow and reprogramming FPGAs involves slow synthesis and place-and-route steps</span></div><div class="line" id="032409"><span class="nick" style="color:#80b1d3"><a href="#032409" label="[03:24:09]">&lt;muurkha&gt;</a></span><span class="message">so usually designers do most of their testing by compiling to the machine code for a CPU</span></div><div class="line" id="032419"><span class="nick" style="color:#80b1d3"><a href="#032419" label="[03:24:19]">&lt;muurkha&gt;</a></span><span class="message">FPGAs run a lot faster though</span></div><div class="line" id="032457"><span class="nick" style="color:#2e2a4a"><a href="#032457" label="[03:24:57]">&lt;oriansj&gt;</a></span><span class="message">perhaps my calling is hardware design</span></div><div class="line" id="032539"><span class="nick" style="color:#80b1d3"><a href="#032539" label="[03:25:39]">&lt;muurkha&gt;</a></span><span class="message">a lot of hardware designers use Verilog instead</span></div><div class="line" id="032542"><span class="nick" style="color:#80b1d3"><a href="#032542" label="[03:25:42]">&lt;muurkha&gt;</a></span><span class="message">which is untyped</span></div><div class="line" id="032720"><span class="nick" style="color:#234e69"><a href="#032720" label="[03:27:20]">&lt;cedb&gt;</a></span><span class="message">the &quot;higher level&quot; the language the better they map to hardware design ironically</span></div><div class="line" id="032744"><span class="nick" style="color:#80b1d3"><a href="#032744" label="[03:27:44]">&lt;muurkha&gt;</a></span><span class="message">I wouldn't describe Verilog or VHDL as high-level languages</span></div><div class="line" id="032755"><span class="nick" style="color:#80b1d3"><a href="#032755" label="[03:27:55]">&lt;muurkha&gt;</a></span><span class="message">which languages are you thinking of?</span></div><div class="line" id="032804"><span class="nick" style="color:#234e69"><a href="#032804" label="[03:28:04]">&lt;cedb&gt;</a></span><span class="message">anything FP like</span></div><div class="line" id="032825"><span class="nick" style="color:#234e69"><a href="#032825" label="[03:28:25]">&lt;cedb&gt;</a></span><span class="message">i know of hs-clash  but theres a bunch of stuff in the logic/dataflow waters towards that</span></div><div class="line" id="032940"><span class="nick" style="color:#234e69"><a href="#032940" label="[03:29:40]">&lt;cedb&gt;</a></span><span class="message">muurkha: theres this conor elliot paper on compilling to circuits if you havent read it its pretty neat</span></div><div class="line" id="032957"><span class="nick" style="color:#80b1d3"><a href="#032957" label="[03:29:57]">&lt;muurkha&gt;</a></span><span class="message">Conal's papers are always worth reading</span></div><div class="line" id="033008"><span class="nick" style="color:#2e2a4a"><a href="#033008" label="[03:30:08]">&lt;oriansj&gt;</a></span><span class="message">muurkha: reading the VHDL standard, it looks like the bit ordering appears to be a user specified detail not as something that exists as a standard type</span></div><div class="line" id="033013"><span class="nick" style="color:#234e69"><a href="#033013" label="[03:30:13]">&lt;cedb&gt;</a></span><span class="message">man that guy really has a rep amongst the crazies of us eh</span></div><div class="line" id="033032"><span class="nick" style="color:#234e69"><a href="#033032" label="[03:30:32]">&lt;cedb&gt;</a></span><span class="message">its weird how i dont hear him mentionned outside random people geeking out on plt</span></div><div class="line" id="033048"><span class="nick" style="color:#234e69"><a href="#033048" label="[03:30:48]">&lt;cedb&gt;</a></span><span class="message">anyway : <a rel="nofollow" href="http://conal.net/papers/compiling-to-categories/compiling-to-categories.pdf">http://conal.net/papers/compiling-to-categories/compiling-to-categories.pdf</a> </span></div><div class="line" id="033048"><span class="nick" style="color:#80b1d3"><a href="#033048" label="[03:30:48]">&lt;muurkha&gt;</a></span><span class="message">I don't think things like Haskell and ML map very easily to hardware</span></div><div class="line" id="033057"><span class="nick" style="color:#234e69"><a href="#033057" label="[03:30:57]">&lt;cedb&gt;</a></span><span class="message">he uses ghc extensions</span></div><div class="line" id="033122"><span class="nick" style="color:#234e69"><a href="#033122" label="[03:31:22]">&lt;cedb&gt;</a></span><span class="message">they map better to hardware design not hardware instructions huge difference</span></div><div class="line" id="033144"><span class="nick" style="color:#80b1d3"><a href="#033144" label="[03:31:44]">&lt;muurkha&gt;</a></span><span class="message">a hardware design is fixed in size (once you tape it out, anyway) and has everything happening at once</span></div><div class="line" id="033158"><span class="nick" style="color:#234e69"><a href="#033158" label="[03:31:58]">&lt;cedb&gt;</a></span><span class="message">digital logic usually doesnt have much state and if so its instant propagation of change its a very different way to think about stuff</span></div><div class="line" id="033250"><span class="nick" style="color:#80b1d3"><a href="#033250" label="[03:32:50]">&lt;muurkha&gt;</a></span><span class="message">also hardware fundamentally operates through changing state over time</span></div><div class="line" id="033310"><span class="nick" style="color:#2e2a4a"><a href="#033310" label="[03:33:10]">&lt;oriansj&gt;</a></span><span class="message">plus there are some exotic integer types beyound 1 and 2's complement</span></div><div class="line" id="033334"><span class="nick" style="color:#234e69"><a href="#033334" label="[03:33:34]">&lt;cedb&gt;</a></span><span class="message">depends what; a filter is a filter</span></div><div class="line" id="033339"><span class="nick" style="color:#2e2a4a"><a href="#033339" label="[03:33:39]">&lt;oriansj&gt;</a></span><span class="message">like symmetric complement where divide by zero is just NaN</span></div><div class="line" id="033406"><span class="nick" style="color:#234e69"><a href="#033406" label="[03:34:06]">&lt;cedb&gt;</a></span><span class="message">i dont see how that applies to this</span></div><div class="line" id="033425"><span class="nick" style="color:#80b1d3"><a href="#033425" label="[03:34:25]">&lt;muurkha&gt;</a></span><span class="message">a Haskell program can handle problems of any size and doesn't have any way to talk about what's happening at once, and if you have state at all, it's usually the IO monad, which imposes a strict total ordering of all state changes</span></div><div class="line" id="033437"><span class="nick" style="color:#80b1d3"><a href="#033437" label="[03:34:37]">&lt;muurkha&gt;</a></span><span class="message">which is kind of the opposite extreme from a hardware design in every way</span></div><div class="line" id="033452"><span class="nick" style="color:#80b1d3"><a href="#033452" label="[03:34:52]">&lt;muurkha&gt;</a></span><span class="message">oriansj: interesting, I hadn't heard of symmetric complement</span></div><div class="line" id="033524"><span class="nick" style="color:#234e69"><a href="#033524" label="[03:35:24]">&lt;cedb&gt;</a></span><span class="message">i mean lower vs higher is not well defined we just have somewhat arbitrary historical reasons that force us to deal with turing machines which are much much harder to reason about in rigorous logic  terms</span></div><div class="line" id="033600"><span class="nick" style="color:#80b1d3"><a href="#033600" label="[03:36:00]">&lt;muurkha&gt;</a></span><span class="message">also FWIW in hardware design, data doesn't propagate instantly; it depends on things like fanout and number of propagation delays</span></div><div class="line" id="033637"><span class="nick" style="color:#80b1d3"><a href="#033637" label="[03:36:37]">&lt;muurkha&gt;</a></span><span class="message">in standard synchronous design you slow the clock down until it has reliably propagated before the next clock cycle</span></div><div class="line" id="033641"><span class="nick" style="color:#234e69"><a href="#033641" label="[03:36:41]">&lt;cedb&gt;</a></span><span class="message">a program described as a sequence of immutable mappings maps to hardware, even if you have state its not gonna look like what you do in C</span></div><div class="line" id="033658"><span class="nick" style="color:#234e69"><a href="#033658" label="[03:36:58]">&lt;cedb&gt;</a></span><span class="message">yesyes theres bs to manage of course of course</span></div><div class="line" id="033709"><span class="nick" style="color:#80b1d3"><a href="#033709" label="[03:37:09]">&lt;muurkha&gt;</a></span><span class="message">so in a sense it looks like &quot;instant propagation of change&quot;</span></div><div class="line" id="033716"><span class="nick" style="color:#2e2a4a"><a href="#033716" label="[03:37:16]">&lt;oriansj&gt;</a></span><span class="message">4 bit symmetric complement would have 0000 =&gt;0; 0001 =&gt; 1; 1110 =&gt; -1 and 1111 =&gt; NaN</span></div><div class="line" id="033726"><span class="nick" style="color:#234e69"><a href="#033726" label="[03:37:26]">&lt;cedb&gt;</a></span><span class="message">i just mean people want to synthesize a given mapping that is immediately reproducible</span></div><div class="line" id="033733"><span class="nick" style="color:#80b1d3"><a href="#033733" label="[03:37:33]">&lt;muurkha&gt;</a></span><span class="message">but managing that &quot;bs&quot; is kind of central to the activity of hardware design</span></div><div class="line" id="033754"><span class="nick" style="color:#80b1d3"><a href="#033754" label="[03:37:54]">&lt;muurkha&gt;</a></span><span class="message">like, generally you care actually a lot whether your clock is 4 MHz, 40 MHz, or 400 MHz</span></div><div class="line" id="033821"><span class="nick" style="color:#80b1d3"><a href="#033821" label="[03:38:21]">&lt;muurkha&gt;</a></span><span class="message">and you want to be able to find out which signal propagation path is limiting you to 4 MHz so you can fix the problem</span></div><div class="line" id="033835"><span class="nick" style="color:#234e69"><a href="#033835" label="[03:38:35]">&lt;cedb&gt;</a></span><span class="message">of course i just meant you deal with those things that way because fundamentally youre pushing the abstract concept towards something</span></div><div class="line" id="033848"><span class="nick" style="color:#80b1d3"><a href="#033848" label="[03:38:48]">&lt;muurkha&gt;</a></span><span class="message">oriansj: hmm, so it's ones-complement but without the double zero?</span></div><div class="line" id="033850"><span class="nick" style="color:#234e69"><a href="#033850" label="[03:38:50]">&lt;cedb&gt;</a></span><span class="message">like 01 is never 01 obv but you want it to be</span></div><div class="line" id="033906"><span class="nick" style="color:#80b1d3"><a href="#033906" label="[03:39:06]">&lt;muurkha&gt;</a></span><span class="message">oriansj: it sounds like addition would be difficult</span></div><div class="line" id="033938"><span class="nick" style="color:#80b1d3"><a href="#033938" label="[03:39:38]">&lt;muurkha&gt;</a></span><span class="message">because you need 1's-complement end-around carry, but with a special case to avoid negative zero</span></div><div class="line" id="033952"><span class="nick" style="color:#234e69"><a href="#033952" label="[03:39:52]">&lt;cedb&gt;</a></span><span class="message">sounds like some flag that has semantics changing depending</span></div><div class="line" id="034020"><span class="nick" style="color:#80b1d3"><a href="#034020" label="[03:40:20]">&lt;muurkha&gt;</a></span><span class="message">(I'm not a hardware designer, btw, I've never built a circuit more complicated than a 4-bit ALU or something)</span></div><div class="line" id="034052"><span class="nick" style="color:#80b1d3"><a href="#034052" label="[03:40:52]">&lt;muurkha&gt;</a></span><span class="message">cedb: yeah, it's important to be able to specify what you're trying to make your hardware do</span></div><div class="line" id="034117"><span class="nick" style="color:#234e69"><a href="#034117" label="[03:41:17]">&lt;cedb&gt;</a></span><span class="message">ive just done bullshit in EE way back</span></div><div class="line" id="034128"><span class="nick" style="color:#80b1d3"><a href="#034128" label="[03:41:28]">&lt;muurkha&gt;</a></span><span class="message">but there's an interplay between what is easy and what is desired</span></div><div class="line" id="034130"><span class="nick" style="color:#234e69"><a href="#034130" label="[03:41:30]">&lt;cedb&gt;</a></span><span class="message">but the FP mapping to vlsi that i member from grad school</span></div><div class="line" id="034143"><span class="nick" style="color:#234e69"><a href="#034143" label="[03:41:43]">&lt;cedb&gt;</a></span><span class="message">because thats essentially what deep learning boom was about</span></div><div class="line" id="034212"><span class="nick" style="color:#2e2a4a"><a href="#034212" label="[03:42:12]">&lt;oriansj&gt;</a></span><span class="message">cedb: perhaps to your higher/lower mapping of languages: <a rel="nofollow" href="http://www.terminally-incoherent.com/blog/wp-content/uploads/2007/02/hierarchy.png">http://www.terminally-incoherent.com/blog/wp-content/uploads/2007/02/hierarchy.png</a> </span></div><div class="line" id="034311"><span class="nick" style="color:#234e69"><a href="#034311" label="[03:43:11]">&lt;cedb&gt;</a></span><span class="message">muurkha: tf and torch give you some kind of functional dsl and compile it to highly parallel hardware. and the same people that did this keep working towards compiling across the architecture down to the gate</span></div><div class="line" id="034330"><span class="nick" style="color:#234e69"><a href="#034330" label="[03:43:30]">&lt;cedb&gt;</a></span><span class="message">or at least make those this contact point less harsh</span></div><div class="line" id="034356"><span class="nick" style="color:#80b1d3"><a href="#034356" label="[03:43:56]">&lt;muurkha&gt;</a></span><span class="message">it's true that tensorflow and torch are kind of functional and that they map well to hardware</span></div><div class="line" id="034416"><span class="nick" style="color:#80b1d3"><a href="#034416" label="[03:44:16]">&lt;muurkha&gt;</a></span><span class="message">some hardware, anyway</span></div><div class="line" id="034427"><span class="nick" style="color:#234e69"><a href="#034427" label="[03:44:27]">&lt;cedb&gt;</a></span><span class="message">another way to put it would be that its really really hard to synthesize hardware and the less state the easier period</span></div><div class="line" id="034444"><span class="nick" style="color:#80b1d3"><a href="#034444" label="[03:44:44]">&lt;muurkha&gt;</a></span><span class="message">I think they're kind of less functional than their predecessor APL</span></div><div class="line" id="034506"><span class="nick" style="color:#234e69"><a href="#034506" label="[03:45:06]">&lt;cedb&gt;</a></span><span class="message">theyre both numerical but not same goal</span></div><div class="line" id="034510"><span class="nick" style="color:#2e2a4a"><a href="#034510" label="[03:45:10]">&lt;oriansj&gt;</a></span><span class="message">cedb: I think the complexity in hardware is usually understated for example, one could write a huge book on just the history and techniques in PCB creation.</span></div><div class="line" id="034532"><span class="nick" style="color:#234e69"><a href="#034532" label="[03:45:32]">&lt;cedb&gt;</a></span><span class="message">not understated just abstracted away like most things</span></div><div class="line" id="034559"><span class="nick" style="color:#2e2a4a"><a href="#034559" label="[03:45:59]">&lt;oriansj&gt;</a></span><span class="message">and those abstracted details can end up extremely important</span></div><div class="line" id="034603"><span class="nick" style="color:#234e69"><a href="#034603" label="[03:46:03]">&lt;cedb&gt;</a></span><span class="message">depends where you live i guess too me im in canada, not much going on in terms of /making/ things heh</span></div><div class="line" id="034618"><span class="nick" style="color:#234e69"><a href="#034618" label="[03:46:18]">&lt;cedb&gt;</a></span><span class="message">i mean were on #bootstrappable obv this is a thing</span></div><div class="line" id="034626"><span class="nick" style="color:#80b1d3"><a href="#034626" label="[03:46:26]">&lt;muurkha&gt;</a></span><span class="message">oriansj: I am pretty sure there is more than one huge book on that</span></div><div class="line" id="034718"><span class="nick" style="color:#2e2a4a"><a href="#034718" label="[03:47:18]">&lt;oriansj&gt;</a></span><span class="message">muurkha: probably, same goes for even the wires themselves</span></div><div class="line" id="034746"><span class="nick" style="color:#234e69"><a href="#034746" label="[03:47:46]">&lt;cedb&gt;</a></span><span class="message">ugh im a little mad i never made a decent little thing involving sending gerber files to a plant (or halfhass print it myuself if  i stillhave zero things in my life at that point)</span></div><div class="line" id="034844"><span class="nick" style="color:#2e2a4a"><a href="#034844" label="[03:48:44]">&lt;oriansj&gt;</a></span><span class="message">like even a little things turn out to be these 4-d puzzles to ensure certain properties are exactly right</span></div><div class="line" id="034909"><span class="nick" style="color:#234e69"><a href="#034909" label="[03:49:09]">&lt;cedb&gt;</a></span><span class="message">oh the amount of bs you have to deal with for real hardware is just ridiculous</span></div><div class="line" id="034930"><span class="nick" style="color:#2e2a4a"><a href="#034930" label="[03:49:30]">&lt;oriansj&gt;</a></span><span class="message">physics will not be cheated</span></div><div class="line" id="035002"><span class="nick" style="color:#2e2a4a"><a href="#035002" label="[03:50:02]">&lt;oriansj&gt;</a></span><span class="message">and the stories from Oxide's bring up lab really show just a glimpse of the crazy in hardware</span></div><div class="line" id="035013"><span class="nick" style="color:#234e69"><a href="#035013" label="[03:50:13]">&lt;cedb&gt;</a></span><span class="message">oxide?</span></div><div class="line" id="035108"><span class="nick" style="color:#2e2a4a"><a href="#035108" label="[03:51:08]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://feeds.transistor.fm/oxide-and-friends">https://feeds.transistor.fm/oxide-and-friends</a>  or <a rel="nofollow" href="https://feeds.transistor.fm/on-the-metal-0294649e-ec23-4eab-975a-9eb13fd94e06">https://feeds.transistor.fm/on-the-metal-0294649e-ec23-4eab-975a-9eb13fd94e06</a> </span></div><div class="line" id="035225"><span class="nick" style="color:#234e69"><a href="#035225" label="[03:52:25]">&lt;cedb&gt;</a></span><span class="message">oh so the mozilla cool kids that got laid off?</span></div><div class="line" id="035234"><span class="nick" style="color:#2e2a4a"><a href="#035234" label="[03:52:34]">&lt;oriansj&gt;</a></span><span class="message">basically a bunch of old Sun engineers got together to bring hyperscaling to anyone who wants it</span></div><div class="line" id="035255"><span class="nick" style="color:#234e69"><a href="#035255" label="[03:52:55]">&lt;cedb&gt;</a></span><span class="message">ACTION nods</span></div><div class="line" id="035357"><span class="nick" style="color:#234e69"><a href="#035357" label="[03:53:57]">&lt;cedb&gt;</a></span><span class="message">so like sifive is doen right</span></div><div class="line" id="035512"><span class="nick" style="color:#2e2a4a"><a href="#035512" label="[03:55:12]">&lt;oriansj&gt;</a></span><span class="message">not exactly as they are buying parts from other companies but they are integrating them and publishing the source code in a free license but priced it to make money off the hardware sold.</span></div><div class="line" id="035603"><span class="nick" style="color:#2e2a4a"><a href="#035603" label="[03:56:03]">&lt;oriansj&gt;</a></span><span class="message">it is like $500K per rack</span></div><div class="line" id="035856"><span class="nick" style="color:#2e2a4a"><a href="#035856" label="[03:58:56]">&lt;oriansj&gt;</a></span><span class="message">turn key, your data center everything configured in software which you have the full source code to. With the unique property of you have the source code for your firmware too</span></div><div class="line" id="040004"><span class="nick" style="color:#234e69"><a href="#040004" label="[04:00:04]">&lt;cedb&gt;</a></span><span class="message">but they moving to india and its fabless like you said and they were mostly recruiting top peeps from the codegen field who now are at mojo iirc</span></div><div class="line" id="040010"><span class="nick" style="color:#234e69"><a href="#040010" label="[04:00:10]">&lt;cedb&gt;</a></span><span class="message">erm, modular</span></div><div class="line" id="040247"><span class="nick" style="color:#2e2a4a"><a href="#040247" label="[04:02:47]">&lt;oriansj&gt;</a></span><span class="message">well, their corporate bit, I am not sure of. But their stories from their bring up lab do really paint a picture about how exacting computing hardware must be in its creation and that a single line of code can be the difference between completely non-booting machines and everything works flawlessly.</span></div><div class="line" id="040321"><span class="nick" style="color:#234e69"><a href="#040321" label="[04:03:21]">&lt;cedb&gt;</a></span><span class="message">i mean yeah its hw you touch athing and everythings fucked tahts why i yeeted back to theory</span></div><div class="line" id="040713"><span class="nick" style="color:#2e2a4a"><a href="#040713" label="[04:07:13]">&lt;oriansj&gt;</a></span><span class="message">perhaps I am hopeful that one day I'll find someone who teaches Lee Felsenstein's hardware design techiques as the sol-20 was just so robust.</span></div><div class="line" id="041039"><span class="nick" style="color:#2e2a4a"><a href="#041039" label="[04:10:39]">&lt;oriansj&gt;</a></span><span class="message">and I figure, I better make anything I do in hardware robust as hell to match my software style. (which is multiple month long fuzzing runs to find defects)</span></div><div class="line" id="071424"><span class="nick" style="color:#6c3d55"><a href="#071424" label="[07:14:24]">&lt;jcowan&gt;</a></span><span class="message">muurkha: Scheme has portable pattern-matching libraries</span></div><div class="line" id="171508"><span class="nick" style="color:#2e2a4a"><a href="#171508" label="[17:15:08]">&lt;oriansj&gt;</a></span><span class="message">jcowan: as does C <a rel="nofollow" href="https://www.gnu.org/software/libc/manual/html_node/Pattern-Matching.html">https://www.gnu.org/software/libc/manual/html_node/Pattern-Matching.html</a> </span></div><div class="line" id="171845"><span class="nick" style="color:#80b1d3"><a href="#171845" label="[17:18:45]">&lt;muurkha&gt;</a></span><span class="message">(regexps)</span></div><div class="line" id="171934"><span class="nick" style="color:#80b1d3"><a href="#171934" label="[17:19:34]">&lt;muurkha&gt;</a></span><span class="message">Scheme has regexp libraries but also pattern-matching macros in the ML sense, which you can't do in C.  jcowan, which do you recommend?</span></div><div class="line" id="171951"><span class="nick" style="color:#2e2a4a"><a href="#171951" label="[17:19:51]">&lt;oriansj&gt;</a></span><span class="message">but one could argue any feature not in the default core language will have multiple incompatible implementations (like async in Rust)</span></div><div class="line" id="172000"><span class="nick" style="color:#80b1d3"><a href="#172000" label="[17:20:00]">&lt;muurkha&gt;</a></span><span class="message">oriansj: probably Lee would be delighted to teach you about hardware design</span></div><div class="line" id="172149"><span class="nick" style="color:#6c3d55"><a href="#172149" label="[17:21:49]">&lt;jcowan&gt;</a></span><span class="message">I don't consider regex matching to be pattern matching in the ML sense, because it does not bind submatches to variables.</span></div><div class="line" id="172200"><span class="nick" style="color:#80b1d3"><a href="#172200" label="[17:22:00]">&lt;muurkha&gt;</a></span><span class="message">it isn't</span></div><div class="line" id="172212"><span class="nick" style="color:#80b1d3"><a href="#172212" label="[17:22:12]">&lt;muurkha&gt;</a></span><span class="message">it also only matches strings</span></div><div class="line" id="172226"><span class="nick" style="color:#6c3d55"><a href="#172226" label="[17:22:26]">&lt;jcowan&gt;</a></span><span class="message">that doesn't trouble me</span></div><div class="line" id="172245"><span class="nick" style="color:#6c3d55"><a href="#172245" label="[17:22:45]">&lt;jcowan&gt;</a></span><span class="message">oh, strings!  nm</span></div><div class="line" id="172335"><span class="nick" style="color:#80b1d3"><a href="#172335" label="[17:23:35]">&lt;muurkha&gt;</a></span><span class="message">oriansj: I haven't talked to him in a few years, it's possible he's not as mentally alert as he was.  but if he is, he's assuredly still eager to share everything he knows with you or anyone else who is interested</span></div><div class="line" id="172341"><span class="nick" style="color:#80b1d3"><a href="#172341" label="[17:23:41]">&lt;muurkha&gt;</a></span><span class="message">it's like a defining feature of his personality</span></div><div class="line" id="172411"><span class="nick" style="color:#80b1d3"><a href="#172411" label="[17:24:11]">&lt;muurkha&gt;</a></span><span class="message">jcowan: which pattern-matching (in the ML sense!) library do you recommend for Scheme?</span></div><div class="line" id="172432"><span class="nick" style="color:#389600"><a href="#172432" label="[17:24:32]">&lt;stikonas&gt;</a></span><span class="message">but do you really need that complicated pattern matching in a compiler?</span></div><div class="line" id="172436"><span class="nick" style="color:#6c3d55"><a href="#172436" label="[17:24:36]">&lt;jcowan&gt;</a></span><span class="message">Any will do.  WCS is the most popular</span></div><div class="line" id="172442"><span class="nick" style="color:#80b1d3"><a href="#172442" label="[17:24:42]">&lt;muurkha&gt;</a></span><span class="message">WCS?</span></div><div class="line" id="172449"><span class="nick" style="color:#389600"><a href="#172449" label="[17:24:49]">&lt;stikonas&gt;</a></span><span class="message">e.g. M2-Planet simply does strng comparison (something like strcmp) and it's working just fine</span></div><div class="line" id="172454"><span class="nick" style="color:#6c3d55"><a href="#172454" label="[17:24:54]">&lt;jcowan&gt;</a></span><span class="message">Wright-Cartwright-Shinn</span></div><div class="line" id="172500"><span class="nick" style="color:#389600"><a href="#172500" label="[17:25:00]">&lt;stikonas&gt;</a></span><span class="message">*strcmp</span></div><div class="line" id="172527"><span class="nick" style="color:#80b1d3"><a href="#172527" label="[17:25:27]">&lt;muurkha&gt;</a></span><span class="message">stikonas: you can write compilers without pattern-matching, but it's much easier to write compilers with pattern matching.  note that WE ARE NOT TALKING ABOUT PATTERN MATCHING STRINGS</span></div><div class="line" id="172708"><span class="nick" style="color:#80b1d3"><a href="#172708" label="[17:27:08]">&lt;muurkha&gt;</a></span><span class="message">we are talking about the ML feature which allows you to write things like Add (Constant x) y =&gt; Addi(x, y)</span></div><div class="line" id="172830"><span class="nick" style="color:#6c3d55"><a href="#172830" label="[17:28:30]">&lt;jcowan&gt;</a></span><span class="message">yes, exactly, AST walking</span></div><div class="line" id="172918"><span class="nick" style="color:#80b1d3"><a href="#172918" label="[17:29:18]">&lt;muurkha&gt;</a></span><span class="message">that's definitely a prominent thing you can use it for</span></div><div class="line" id="173002"><span class="nick" style="color:#80b1d3"><a href="#173002" label="[17:30:02]">&lt;muurkha&gt;</a></span><span class="message">there are sometimes other kinds of trees in compilers that are not syntax trees</span></div><div class="line" id="173041"><span class="nick" style="color:#80b1d3"><a href="#173041" label="[17:30:41]">&lt;muurkha&gt;</a></span><span class="message">SRFI 204?</span></div><div class="line" id="173055"><span class="nick" style="color:#80b1d3"><a href="#173055" label="[17:30:55]">&lt;muurkha&gt;</a></span><span class="message">it says it's withdrawn?</span></div><div class="line" id="174747"><span class="nick" style="color:#80b1d3"><a href="#174747" label="[17:47:47]">&lt;muurkha&gt;</a></span><span class="message">jcowan: SRFI 204 appears to be withdrawn?</span></div><div class="line" id="175000"><span class="nick" style="color:#6c3d55"><a href="#175000" label="[17:50:00]">&lt;jcowan&gt;</a></span><span class="message">Only for trivial reasons.  mnieper kept pushing for extensibility, which hopefully is now satisfied (insofar as he is ever satisfied) by dpk's extensible-match pre-SRFI.  I keep meaning to reawaken the SRFI with a few deletions.</span></div><div class="line" id="213449"><span class="nick" style="color:#2e2a4a"><a href="#213449" label="[21:34:49]">&lt;oriansj&gt;</a></span><span class="message">muurkha: you are absolutely right, he called after I emailed him.</span></div><br /></div></body></html>