<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-05-16.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000039"><span class="nick" style="color:#389600"><a href="#000039" label="[00:00:39]">&lt;melg8&gt;</a></span><span class="message">not a big deal)</span></div><div class="line" id="000156"><span class="nick" style="color:#389600"><a href="#000156" label="[00:01:56]">&lt;melg8&gt;</a></span><span class="message">for now i just need to stop inner procrastination) because one thing is to just translate commands from kaem to nix-kaem) and other - patch c code) even though i dont think it will take long</span></div><div class="line" id="002025"><span class="nick" style="color:#389600"><a href="#002025" label="[00:20:25]">&lt;melg8&gt;</a></span><span class="message">does live-bootstrap check that sha256sum of kaem is right?</span></div><div class="line" id="002645"><span class="nick" style="color:#389600"><a href="#002645" label="[00:26:45]">&lt;melg8&gt;</a></span><span class="message">OriansJ i've tried to add</span></div><div class="line" id="002646"><span class="nick" style="color:#389600"><a href="#002646" label="[00:26:46]">&lt;melg8&gt;</a></span><span class="message">        -f ${m2-libc}/sys/types.h \</span></div><div class="line" id="002646"><span class="nick" style="color:#389600"><a href="#002646" label="[00:26:46]">&lt;melg8&gt;</a></span><span class="message">        -f ${m2-libc}/x86/Linux/sys/stat.h \</span></div><div class="line" id="002647"><span class="nick" style="color:#389600"><a href="#002647" label="[00:26:47]">&lt;melg8&gt;</a></span><span class="message">        -f ${mescc-tools}/Kaem/kaem.h \</span></div><div class="line" id="002654"><span class="nick" style="color:#389600"><a href="#002654" label="[00:26:54]">&lt;melg8&gt;</a></span><span class="message">but now get Unknown type typedef</span></div><div class="line" id="002710"><span class="nick" style="color:#389600"><a href="#002710" label="[00:27:10]">&lt;melg8&gt;</a></span><span class="message">cfvrm5-M2libc/sys/types.h:20:Subprocess error</span></div><div class="line" id="003832"><span class="nick" style="color:#2e2a4a"><a href="#003832" label="[00:38:32]">&lt;OriansJ&gt;</a></span><span class="message">melg8: typedef support was added in 921cc86ce64037493a526736ff7c49b3f8475486 and will work assuming you are not using --bootstrap-mode</span></div><div class="line" id="003925"><span class="nick" style="color:#2e2a4a"><a href="#003925" label="[00:39:25]">&lt;OriansJ&gt;</a></span><span class="message">So I guess I really need to get that updated stage0-posix out the door this weekend.</span></div><div class="line" id="004010"><span class="nick" style="color:#389600"><a href="#004010" label="[00:40:10]">&lt;melg8&gt;</a></span><span class="message">yea) it's cascading - hard to know which commits to choose so that all happy</span></div><div class="line" id="004034"><span class="nick" style="color:#389600"><a href="#004034" label="[00:40:34]">&lt;melg8&gt;</a></span><span class="message">because now i get Unknown type FILE</span></div><div class="line" id="004034"><span class="nick" style="color:#389600"><a href="#004034" label="[00:40:34]">&lt;melg8&gt;</a></span><span class="message">))</span></div><div class="line" id="004054"><span class="nick" style="color:#389600"><a href="#004054" label="[00:40:54]">&lt;melg8&gt;</a></span><span class="message">xyq0pmry9yxp5351i7fgsaixjidwcir-M2-Planet/test/common_x86/functions/file.c</span></div><div class="line" id="004119"><span class="nick" style="color:#2e2a4a"><a href="#004119" label="[00:41:19]">&lt;OriansJ&gt;</a></span><span class="message">gforce_d11977: this might really help: <a rel="nofollow" href="https://en.wikipedia.org/wiki/Hudson_Soft_HuC6280#Memory_mapping">https://en.wikipedia.org/wiki/Hudson_Soft_HuC6280#Memory_mapping</a> </span></div><div class="line" id="004134"><span class="nick" style="color:#389600"><a href="#004134" label="[00:41:34]">&lt;melg8&gt;</a></span><span class="message">so  now it's not in test by in m2libc i guess</span></div><div class="line" id="004226"><span class="nick" style="color:#2e2a4a"><a href="#004226" label="[00:42:26]">&lt;OriansJ&gt;</a></span><span class="message">melg8: well in cc_* FILE is just an int but in M2-Planet it is a proper struct which enables much faster performance (and far less syscalls)</span></div><div class="line" id="004317"><span class="nick" style="color:#2e2a4a"><a href="#004317" label="[00:43:17]">&lt;OriansJ&gt;</a></span><span class="message">hence why M2libc stdio.c is quite different than the old M2-Planet file functions</span></div><div class="line" id="004326"><span class="nick" style="color:#2e2a4a"><a href="#004326" label="[00:43:26]">&lt;OriansJ&gt;</a></span><span class="message">(which came form cc_x86)</span></div><div class="line" id="004445"><span class="nick" style="color:#389600"><a href="#004445" label="[00:44:45]">&lt;melg8&gt;</a></span><span class="message">okay, so i better just copy-paste this single function now, so i dont drift to much away from live-bootstrap, and when you update stage0-posix, than update as well, because now i at least can compare two and figure out which hashes mismatch and what i'm doing worng</span></div><div class="line" id="004449"><span class="nick" style="color:#389600"><a href="#004449" label="[00:44:49]">&lt;melg8&gt;</a></span><span class="message">wrong*</span></div><div class="line" id="004551"><span class="nick" style="color:#2e2a4a"><a href="#004551" label="[00:45:51]">&lt;OriansJ&gt;</a></span><span class="message">melg8: side effects of me being really behind in all the work I need to ship</span></div><div class="line" id="004616"><span class="nick" style="color:#2e2a4a"><a href="#004616" label="[00:46:16]">&lt;OriansJ&gt;</a></span><span class="message">speaking of which rain1 if you have free time I could use your help.</span></div><div class="line" id="004842"><span class="nick" style="color:#6b8072"><a href="#004842" label="[00:48:42]">&lt;bauen1&gt;</a></span><span class="message">i think a single-instruction computer for the very early stages hex0 (and a few steps up) would be a quite cool proof of concept</span></div><div class="line" id="004851"><span class="nick" style="color:#6b8072"><a href="#004851" label="[00:48:51]">&lt;bauen1&gt;</a></span><span class="message">but i'd expect that to be too slow for anything after that</span></div><div class="line" id="004928"><span class="nick" style="color:#6b8072"><a href="#004928" label="[00:49:28]">&lt;bauen1&gt;</a></span><span class="message">however if you can however implement a hash function and editor that is fast enough to be usable in it, then it could be a viable &quot;trusted componente&quot;</span></div><div class="line" id="004936"><span class="nick" style="color:#6b8072"><a href="#004936" label="[00:49:36]">&lt;bauen1&gt;</a></span><span class="message">s/however//</span></div><div class="line" id="005351"><span class="nick" style="color:#80b1d3"><a href="#005351" label="[00:53:51]">&lt;gef&gt;</a></span><span class="message">bauen1: that's *exactly* how I think about it. It should help to arrive at least up to level m2-planet and perhaps some more with extra hacks.</span></div><div class="line" id="005614"><span class="nick" style="color:#80b1d3"><a href="#005614" label="[00:56:14]">&lt;gef&gt;</a></span><span class="message">As regards hash functions, it is a pain. Or it can be a pain :) When looking at this <a rel="nofollow" href="https://en.wikipedia.org/wiki/Checksum#See_also">https://en.wikipedia.org/wiki/Checksum#See_also</a>  ,  some modified variations of BSD &amp; SYSV checksums should be possible and reasonable. On the upside, the benefit of the bootstrappable project is that we would't require cryptographically secure hash functions and you can even use several of them together. That would make the procedure very trustable across a range of</span></div><div class="line" id="005614"><span class="nick" style="color:#80b1d3"><a href="#005614" label="[00:56:14]">&lt;gef&gt;</a></span><span class="message">processors and platofrms, without duplication of work.</span></div><div class="line" id="005834"><span class="nick" style="color:#6b8072"><a href="#005834" label="[00:58:34]">&lt;bauen1&gt;</a></span><span class="message">gef: the use case i have in mind for a trusted device with a trusted i/o + editor + hash does require a cryptographically secure hash (e.g. sha-2)</span></div><div class="line" id="005842"><span class="nick" style="color:#2e2a4a"><a href="#005842" label="[00:58:42]">&lt;OriansJ&gt;</a></span><span class="message">gef: perhaps a good first step is add SBN4 support to MesCC or M2-Planet + mescc-tools</span></div><div class="line" id="005915"><span class="nick" style="color:#80b1d3"><a href="#005915" label="[00:59:15]">&lt;gef&gt;</a></span><span class="message">fi. I'd use some hash function vector for files of the type (size, BSD', SYSV', [1-yet-to-identify-has-function])</span></div><div class="line" id="005919"><span class="nick" style="color:#6b8072"><a href="#005919" label="[00:59:19]">&lt;bauen1&gt;</a></span><span class="message">gef: i got to sleep, but tl;dr: use hashes to make a hash tree of the bootstrap and it's component so you can develop on it / repeat it without redoing an entire code review</span></div><div class="line" id="005932"><span class="nick" style="color:#80b1d3"><a href="#005932" label="[00:59:32]">&lt;gef&gt;</a></span><span class="message">*has -&gt; hash</span></div><div class="line" id="010045"><span class="nick" style="color:#6b8072"><a href="#010045" label="[01:00:45]">&lt;bauen1&gt;</a></span><span class="message">gef: then all you need to do is review the code up to the hash implementation and remember the root of hash tree, then you use it to verify a file containg the tree, and if it matches you can use it to skip code review / verify output of untrusted machines etc...</span></div><div class="line" id="010218"><span class="nick" style="color:#80b1d3"><a href="#010218" label="[01:02:18]">&lt;gef&gt;</a></span><span class="message">bauen1: exactly that. It can bootstrap the steps reasonably well, until you have primitives you can trust more (implementing sha* hash functions can only come with microarchitecture with lengthy microcode implementation - sb4 is just 12 lines, it just tries to win on simplicity and trust)</span></div><div class="line" id="010403"><span class="nick" style="color:#80b1d3"><a href="#010403" label="[01:04:03]">&lt;gef&gt;</a></span><span class="message">oriansj: would this python snipet be of interest? it is really very trivial code, it is an OISC after all: <a rel="nofollow" href="https://gitlab.com/roosemberth/single-instruction-machine/-/blob/master/README.md#single-instruction-machine-simulator">https://gitlab.com/roosemberth/single-instruction-machine/-/blob/master/README.md#single-instruction-machine-simulator</a> </span></div><div class="line" id="010405"><span class="nick" style="color:#2e2a4a"><a href="#010405" label="[01:04:05]">&lt;OriansJ&gt;</a></span><span class="message">gef: a single point of trust is always a bad idea. Better enable the maximal number of possible ways to falsify the trust of any implementation/stack</span></div><div class="line" id="010519"><span class="nick" style="color:#2e2a4a"><a href="#010519" label="[01:05:19]">&lt;OriansJ&gt;</a></span><span class="message">gef: I would not personally implement OISC support but I would merge efforts made to include that support in the various pieces to enable to be another root to check all the other roots.</span></div><div class="line" id="010750"><span class="nick" style="color:#80b1d3"><a href="#010750" label="[01:07:50]">&lt;gef&gt;</a></span><span class="message">oriansj: you can implement that across architectures of even computer languages. But if you wish to have the ability to compare hashes and have cross-checks, you'd have to consider some common layer of agreement. This is what can be achieved easily in this oisc way - and maybe there are betters ways to do the same I'm just offering my angle here. My interest is more on the hardware side of things: microcode implementations which are trustable by design</span></div><div class="line" id="010750"><span class="nick" style="color:#80b1d3"><a href="#010750" label="[01:07:50]">&lt;gef&gt;</a></span><span class="message">. I fray upon the idea that you have all the software in open source and the hardware is as if by magic trustable.</span></div><div class="line" id="011158"><span class="nick" style="color:#2e2a4a"><a href="#011158" label="[01:11:58]">&lt;OriansJ&gt;</a></span><span class="message">gef: That common layer of agreement is that a byte is 8bits big bit endian order.</span></div><div class="line" id="011458"><span class="nick" style="color:#80b1d3"><a href="#011458" label="[01:14:58]">&lt;gef&gt;</a></span><span class="message">how do you cross-check different architectures for being equivalently trustable? Or until which point in the bootstrap the hashes start to diverge and you need to treat them as islands of trust?</span></div><div class="line" id="011528"><span class="nick" style="color:#80b1d3"><a href="#011528" label="[01:15:28]">&lt;gef&gt;</a></span><span class="message">(asking openly here, for your insight)</span></div><div class="line" id="011843"><span class="nick" style="color:#6d2462"><a href="#011843" label="[01:18:43]">&lt;stikonas&gt;</a></span><span class="message">presumably binaries will always have different hashes but you can build cross-compilers (like cc_x86 on arm)</span></div><div class="line" id="013238"><span class="nick" style="color:#234e69"><a href="#013238" label="[01:32:38]">&lt;fossy&gt;</a></span><span class="message">goddamn perl embedding dates into binaries</span></div><div class="line" id="013402"><span class="nick" style="color:#6c3d55"><a href="#013402" label="[01:34:02]">&lt;xentrac&gt;</a></span><span class="message">ha ha!  naughty perl!</span></div><div class="line" id="013412"><span class="nick" style="color:#2e2a4a"><a href="#013412" label="[01:34:12]">&lt;OriansJ&gt;</a></span><span class="message">gef: the binaries never have to match unless they are built towards a uniform target. For example M2-Planet+M2libc building M2-Planet for AArch64 will always be the exact same hash given the exact same source regardless of what platform does the build.</span></div><div class="line" id="013446"><span class="nick" style="color:#6c3d55"><a href="#013446" label="[01:34:46]">&lt;xentrac&gt;</a></span><span class="message">OriansJ: I think I've explained before that computers without bit-serial ALUs do not have bit endianness within bytes</span></div><div class="line" id="013536"><span class="nick" style="color:#6c3d55"><a href="#013536" label="[01:35:36]">&lt;xentrac&gt;</a></span><span class="message">and in bit-serial layers like SPI and teletype, there is in fact variation in bit endianness</span></div><div class="line" id="013543"><span class="nick" style="color:#2e2a4a"><a href="#013543" label="[01:35:43]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: yes you have</span></div><div class="line" id="013628"><span class="nick" style="color:#2e2a4a"><a href="#013628" label="[01:36:28]">&lt;OriansJ&gt;</a></span><span class="message">but notice I have explicitly picked 1 order as the definition so for those layers that don't do it correctly will need to do bit banging to produce correct results.</span></div><div class="line" id="013704"><span class="nick" style="color:#6c3d55"><a href="#013704" label="[01:37:04]">&lt;xentrac&gt;</a></span><span class="message">picking an order is a good idea, I'm just saying the hardware of things like a 6502 or a Z80 has no preference</span></div><div class="line" id="013735"><span class="nick" style="color:#6c3d55"><a href="#013735" label="[01:37:35]">&lt;xentrac&gt;</a></span><span class="message">an i386 only has a preference because it pretends to have byte-addressable memory</span></div><div class="line" id="013754"><span class="nick" style="color:#2e2a4a"><a href="#013754" label="[01:37:54]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: I understand as the order only matters in regards to the transmittion of bytes between systems not the actual calculations.</span></div><div class="line" id="013844"><span class="nick" style="color:#2e2a4a"><a href="#013844" label="[01:38:44]">&lt;OriansJ&gt;</a></span><span class="message">except in regards to &gt;&gt; 4 and the like behaving in the way defined.</span></div><div class="line" id="013909"><span class="nick" style="color:#80b1d3"><a href="#013909" label="[01:39:09]">&lt;gef&gt;</a></span><span class="message">oriansj: do you foresee any technical limitation for having a single hash for _all_ M2-Planet builds, across all archs beyond AArch64?</span></div><div class="line" id="013946"><span class="nick" style="color:#6c3d55"><a href="#013946" label="[01:39:46]">&lt;xentrac&gt;</a></span><span class="message">right.  &gt;&gt; 4 doesn't depend on whether you consider the MSB or LSB as coming first; it shifts four in the direction of the LSB either way</span></div><div class="line" id="013947"><span class="nick" style="color:#2e2a4a"><a href="#013947" label="[01:39:47]">&lt;OriansJ&gt;</a></span><span class="message">gef: all M2-Planet builds have universal hashes regardless of the target</span></div><div class="line" id="013952"><span class="nick" style="color:#6c3d55"><a href="#013952" label="[01:39:52]">&lt;xentrac&gt;</a></span><span class="message">but serial ports do care</span></div><div class="line" id="014103"><span class="nick" style="color:#2e2a4a"><a href="#014103" label="[01:41:03]">&lt;OriansJ&gt;</a></span><span class="message">gef: M2-Planet --architecture $arch -f ifile -o ofile will always produce the exact same byte for byte ofile given the exact same ifile and $arch</span></div><div class="line" id="014205"><span class="nick" style="color:#2e2a4a"><a href="#014205" label="[01:42:05]">&lt;OriansJ&gt;</a></span><span class="message">the host operating system, libraries, runtimes, time of day, floating point behavior, etc none of that matters. The output must always be byte for byte identical across *ALL* architectures</span></div><div class="line" id="014258"><span class="nick" style="color:#6c3d55"><a href="#014258" label="[01:42:58]">&lt;xentrac&gt;</a></span><span class="message">(unless something is broken)</span></div><div class="line" id="014317"><span class="nick" style="color:#2e2a4a"><a href="#014317" label="[01:43:17]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: or unless the bootstrap is compromised in some way.</span></div><div class="line" id="014341"><span class="nick" style="color:#6c3d55"><a href="#014341" label="[01:43:41]">&lt;xentrac&gt;</a></span><span class="message">right</span></div><div class="line" id="014417"><span class="nick" style="color:#80b1d3"><a href="#014417" label="[01:44:17]">&lt;gef&gt;</a></span><span class="message">ok, that's a plus: it helps to cross-check architectures. But porting to a new architecture still requires some work in assembly of several lines, right?</span></div><div class="line" id="014428"><span class="nick" style="color:#2e2a4a"><a href="#014428" label="[01:44:28]">&lt;OriansJ&gt;</a></span><span class="message">as M2-Planet only knows about the flags given (or hard-coded in bare metal versions) and the source code given to it. Nothing else</span></div><div class="line" id="014516"><span class="nick" style="color:#2e2a4a"><a href="#014516" label="[01:45:16]">&lt;OriansJ&gt;</a></span><span class="message">gef: No, that is only if you want it to generate code for a particular architecture; then all of the architectures gain that ability.</span></div><div class="line" id="014621"><span class="nick" style="color:#2e2a4a"><a href="#014621" label="[01:46:21]">&lt;OriansJ&gt;</a></span><span class="message">M2-Planet is just a string process, it reads in C token strings and writes out M1 macro output strings.</span></div><div class="line" id="014651"><span class="nick" style="color:#389600"><a href="#014651" label="[01:46:51]">&lt;melg8&gt;</a></span><span class="message">does live-bootstrap check that sha256sum of kaem is right?</span></div><div class="line" id="014807"><span class="nick" style="color:#2e2a4a"><a href="#014807" label="[01:48:07]">&lt;OriansJ&gt;</a></span><span class="message">melg8: well kaem is built and used before the sha256sum tool is; so maybe as a sanity check but stikonas or fossy would know better.</span></div><div class="line" id="014847"><span class="nick" style="color:#389600"><a href="#014847" label="[01:48:47]">&lt;melg8&gt;</a></span><span class="message">i just didnt find it in list of presha256sum</span></div><div class="line" id="014849"><span class="nick" style="color:#389600"><a href="#014849" label="[01:48:49]">&lt;melg8&gt;</a></span><span class="message">btw</span></div><div class="line" id="014853"><span class="nick" style="color:#2e2a4a"><a href="#014853" label="[01:48:53]">&lt;OriansJ&gt;</a></span><span class="message">gef: and all the assembly code writing is done in M2libc in the M2-Planet+cc_* C subsets</span></div><div class="line" id="014859"><span class="nick" style="color:#389600"><a href="#014859" label="[01:48:59]">&lt;melg8&gt;</a></span><span class="message">bootstrap_seeds ➤ sha256sum /nix/store/lq24n2pdyk2ap5fj2z5q6z7072h3v3ff-messcc-tools-mini-build/*                                                                                                             git:feature/BootstrapNix*</span></div><div class="line" id="014900"><span class="nick" style="color:#389600"><a href="#014900" label="[01:49:00]">&lt;melg8&gt;</a></span><span class="message">b56c8f27f92cee4f81d41edb06c9e0c0b69f390dc78216ed66c477a6adf627f3  /nix/store/lq24n2pdyk2ap5fj2z5q6z7072h3v3ff-messcc-tools-mini-build/hex2</span></div><div class="line" id="014900"><span class="nick" style="color:#389600"><a href="#014900" label="[01:49:00]">&lt;melg8&gt;</a></span><span class="message">72012a7d50996690f498f75738b80f93f1d0640a712ea327c9579995b2f63048  /nix/store/lq24n2pdyk2ap5fj2z5q6z7072h3v3ff-messcc-tools-mini-build/kaem</span></div><div class="line" id="014901"><span class="nick" style="color:#389600"><a href="#014901" label="[01:49:01]">&lt;melg8&gt;</a></span><span class="message">af85c2f30389f1c6ee2e945c442ae34caf4dece48d28b2fa8c76ce458007c63a  /nix/store/lq24n2pdyk2ap5fj2z5q6z7072h3v3ff-messcc-tools-mini-build/M1</span></div><div class="line" id="014928"><span class="nick" style="color:#6d2462"><a href="#014928" label="[01:49:28]">&lt;stikonas&gt;</a></span><span class="message">live-bootstrap only checked after folder</span></div><div class="line" id="014932"><span class="nick" style="color:#6d2462"><a href="#014932" label="[01:49:32]">&lt;stikonas&gt;</a></span><span class="message">something that you can improve</span></div><div class="line" id="015414"><span class="nick" style="color:#2e2a4a"><a href="#015414" label="[01:54:14]">&lt;OriansJ&gt;</a></span><span class="message">mescc-tools M1, hex2 and blood-elf all behave the exact same way. So the flow from C code to binary and every step inbetween is universally checkable and cross-checkable between all architectures that are supported.</span></div><div class="line" id="015530"><span class="nick" style="color:#2e2a4a"><a href="#015530" label="[01:55:30]">&lt;OriansJ&gt;</a></span><span class="message">M1 --architecture $arch -f ifile -o ofile (big byte endian by default add --little-endian if you want little byte endian output)</span></div><div class="line" id="015611"><span class="nick" style="color:#2e2a4a"><a href="#015611" label="[01:56:11]">&lt;OriansJ&gt;</a></span><span class="message">hex2 --architecture $arch -f ifile -o ofile (big byte endian by default and --little-endian if you want little byte endian output)</span></div><div class="line" id="015707"><span class="nick" style="color:#2e2a4a"><a href="#015707" label="[01:57:07]">&lt;OriansJ&gt;</a></span><span class="message">there is only 1 valid possible output given 1 exact input using 1 exact set of flags for every single step</span></div><div class="line" id="015818"><span class="nick" style="color:#2e2a4a"><a href="#015818" label="[01:58:18]">&lt;OriansJ&gt;</a></span><span class="message">So any compromise at any level will be detected by *ALL* noncompromised architectures. So any Trusting trust or Nexus intruder class attack will have to compromise *ALL* architectures including ancient ones and ones that haven't even been invented yet</span></div><div class="line" id="020028"><span class="nick" style="color:#2e2a4a"><a href="#020028" label="[02:00:28]">&lt;OriansJ&gt;</a></span><span class="message">So if I invent architecture foo and do the steps of stage0 from hex0 to cc_foo and build the current M2-Planet to check the x86 output it better be exactly identical or we just found your trusting trust attack in the diff</span></div><div class="line" id="020522"><span class="nick" style="color:#2e2a4a"><a href="#020522" label="[02:05:22]">&lt;OriansJ&gt;</a></span><span class="message">In short assuming 1 collage student in the world escapes having his hardware compromised and spends a weekend implementing the stage0 steps. All of the trusting trust attacks implemented will become obvious for all</span></div><div class="line" id="020627"><span class="nick" style="color:#2e2a4a"><a href="#020627" label="[02:06:27]">&lt;OriansJ&gt;</a></span><span class="message">Note this also applies to nation states like Iran, North Korea, etc which have a reason not to keep such attacks secret.</span></div><div class="line" id="021827"><span class="nick" style="color:#389600"><a href="#021827" label="[02:18:27]">&lt;melg8&gt;</a></span><span class="message">OriansJ can initial set of tools (mescc-tools-mini) manipulate as chmod +x? because now i got stuck on trying to rerun new kaem from nix, which says me that it is not executable (after i catm-ed it to out)</span></div><div class="line" id="021914"><span class="nick" style="color:#389600"><a href="#021914" label="[02:19:14]">&lt;melg8&gt;</a></span><span class="message">I found temporary solution by rebuilding it from new_kaem called from original kaem seed and sending right to the out, but still</span></div><div class="line" id="022412"><span class="nick" style="color:#2e2a4a"><a href="#022412" label="[02:24:12]">&lt;OriansJ&gt;</a></span><span class="message">melg8: no but mescc-tools-extra has chmod and I should probably share my current work</span></div><div class="line" id="022701"><span class="nick" style="color:#2e2a4a"><a href="#022701" label="[02:27:01]">&lt;OriansJ&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-extra">https://github.com/oriansj/mescc-tools-extra</a> </span></div><div class="line" id="022746"><span class="nick" style="color:#2e2a4a"><a href="#022746" label="[02:27:46]">&lt;OriansJ&gt;</a></span><span class="message">I haven't finished adding the M2libc builds to the makefile or the untar and ungz and sha2 pieces but that is on my list to get done</span></div><div class="line" id="023108"><span class="nick" style="color:#2e2a4a"><a href="#023108" label="[02:31:08]">&lt;OriansJ&gt;</a></span><span class="message">fossy: I've granted you access so feel free to add any pieces you need built by M2-Planet for live-bootstrap</span></div><div class="line" id="023203"><span class="nick" style="color:#2e2a4a"><a href="#023203" label="[02:32:03]">&lt;OriansJ&gt;</a></span><span class="message">and you too stikonas</span></div><div class="line" id="025447"><span class="nick" style="color:#6d2462"><a href="#025447" label="[02:54:47]">&lt;stikonas&gt;</a></span><span class="message">well, live-bootstrap can't yet use M2libc...</span></div><div class="line" id="025455"><span class="nick" style="color:#6d2462"><a href="#025455" label="[02:54:55]">&lt;stikonas&gt;</a></span><span class="message">or rather  I think mes doesn't build yet</span></div><div class="line" id="025646"><span class="nick" style="color:#6d2462"><a href="#025646" label="[02:56:46]">&lt;stikonas&gt;</a></span><span class="message">but untar and ungz can be added first, we'll need  them for mes anyway</span></div><div class="line" id="025743"><span class="nick" style="color:#6d2462"><a href="#025743" label="[02:57:43]">&lt;stikonas&gt;</a></span><span class="message">fossy: at some point melg8's coreutils might also benefit from your review <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/115">https://github.com/fosslinux/live-bootstrap/pull/115</a> </span></div><div class="line" id="025812"><span class="nick" style="color:#6d2462"><a href="#025812" label="[02:58:12]">&lt;stikonas&gt;</a></span><span class="message">especially we should decide whether to use coreutils tarball or git archive snapshot of the tag...</span></div><div class="line" id="025937"><span class="nick" style="color:#6d2462"><a href="#025937" label="[02:59:37]">&lt;stikonas&gt;</a></span><span class="message">annoyingly importing-gnulib is not idempotent there... It removes some files that are not then present in release tarball</span></div><div class="line" id="035756"><span class="nick" style="color:#d9d9d9"><a href="#035756" label="[03:57:56]">&lt;Hagfish&gt;</a></span><span class="message">&quot;So what architecture is the microchip in the Covid vaccine?&quot;  &quot;Obviously it's arm-based!&quot;</span></div><div class="line" id="040530"><span class="nick" style="color:#234e69"><a href="#040530" label="[04:05:30]">&lt;fossy&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/117">https://github.com/fosslinux/live-bootstrap/pull/117</a> </span></div><div class="line" id="040542"><span class="nick" style="color:#234e69"><a href="#040542" label="[04:05:42]">&lt;fossy&gt;</a></span><span class="message">OriansJ: ok neat</span></div><div class="line" id="072711"><span class="nick" style="color:#bc80bd"><a href="#072711" label="[07:27:11]">&lt;gforce_de1977&gt;</a></span><span class="message">melg8: about the 'chmod +x' problem: once I choosed to ship the needed 0-byte files in my initial ramdisk already chmod +x marked, this works 8-)</span></div><div class="line" id="115845"><span class="nick" style="color:#2e2a4a"><a href="#115845" label="[11:58:45]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: RNA computation to generate spike proteins to train the immune response to spike proteins that match; which exist on the Covid virus. as RNA isn't binary it isn't something we currently nor plan to support at this time.</span></div><div class="line" id="121106"><span class="nick" style="color:#6d2462"><a href="#121106" label="[12:11:06]">&lt;stikonas&gt;</a></span><span class="message">fossy: I've reviewed your perl PR...</span></div><div class="line" id="121129"><span class="nick" style="color:#6d2462"><a href="#121129" label="[12:11:29]">&lt;stikonas&gt;</a></span><span class="message">mostly small issues, although a few will take longer to fix</span></div><div class="line" id="121131"><span class="nick" style="color:#389600"><a href="#121131" label="[12:11:31]">&lt;melg8&gt;</a></span><span class="message">Hi, will mescc-tools-extra from live-bootstrap be migrated to mescc-tools repo?</span></div><div class="line" id="121228"><span class="nick" style="color:#6d2462"><a href="#121228" label="[12:12:28]">&lt;stikonas&gt;</a></span><span class="message">(mainly I would like to build 32-bit perl, not 64-bit)</span></div><div class="line" id="121255"><span class="nick" style="color:#6d2462"><a href="#121255" label="[12:12:55]">&lt;stikonas&gt;</a></span><span class="message">I thought no, but I don't remember exact discussions</span></div><div class="line" id="121309"><span class="nick" style="color:#6d2462"><a href="#121309" label="[12:13:09]">&lt;stikonas&gt;</a></span><span class="message">mescc-tools are tools directly needed to run mescc</span></div><div class="line" id="121344"><span class="nick" style="color:#6d2462"><a href="#121344" label="[12:13:44]">&lt;stikonas&gt;</a></span><span class="message">mescc-tools-extra are actually tools unrelated to mescc (the name of the repo is a bit misleading) but useful in bootstrap</span></div><div class="line" id="121418"><span class="nick" style="color:#6d2462"><a href="#121418" label="[12:14:18]">&lt;stikonas&gt;</a></span><span class="message">(that said I'm not saying they can't be merged)</span></div><div class="line" id="121504"><span class="nick" style="color:#389600"><a href="#121504" label="[12:15:04]">&lt;melg8&gt;</a></span><span class="message">but chmod :(  and cp :(  two essential things</span></div><div class="line" id="121620"><span class="nick" style="color:#389600"><a href="#121620" label="[12:16:20]">&lt;melg8&gt;</a></span><span class="message">btw will we bootstrap download/making sysa image process?) or we just ignore that?</span></div><div class="line" id="121748"><span class="nick" style="color:#6d2462"><a href="#121748" label="[12:17:48]">&lt;stikonas&gt;</a></span><span class="message">melg8: you make it manually</span></div><div class="line" id="121805"><span class="nick" style="color:#6d2462"><a href="#121805" label="[12:18:05]">&lt;stikonas&gt;</a></span><span class="message">if you want to bootstrap on real hardware...</span></div><div class="line" id="121858"><span class="nick" style="color:#6d2462"><a href="#121858" label="[12:18:58]">&lt;stikonas&gt;</a></span><span class="message">although, it's a good question of how much can be made manually there</span></div><div class="line" id="121921"><span class="nick" style="color:#6d2462"><a href="#121921" label="[12:19:21]">&lt;stikonas&gt;</a></span><span class="message">you can't enter the whole 100MB of source code into your RAM by flipping switches...</span></div><div class="line" id="121948"><span class="nick" style="color:#6d2462"><a href="#121948" label="[12:19:48]">&lt;stikonas&gt;</a></span><span class="message">anyway, for now we ignore that...</span></div><div class="line" id="121959"><span class="nick" style="color:#80b1d3"><a href="#121959" label="[12:19:59]">&lt;gef&gt;</a></span><span class="message">stikonas: you only need to manually enter the initial boot loader, a trustable has function &amp; the hashes to check against - the rest can be imported via untrusted mechanisms.</span></div><div class="line" id="122000"><span class="nick" style="color:#6d2462"><a href="#122000" label="[12:20:00]">&lt;stikonas&gt;</a></span><span class="message">although, I deliberately kept cpio uncompressed</span></div><div class="line" id="122009"><span class="nick" style="color:#80b1d3"><a href="#122009" label="[12:20:09]">&lt;gef&gt;</a></span><span class="message">*has -&gt; hash</span></div><div class="line" id="122033"><span class="nick" style="color:#6d2462"><a href="#122033" label="[12:20:33]">&lt;stikonas&gt;</a></span><span class="message">I guess yes</span></div><div class="line" id="122107"><span class="nick" style="color:#80b1d3"><a href="#122107" label="[12:21:07]">&lt;gef&gt;</a></span><span class="message">effectively, what is being discussed here is a very very minimal trusted execution environment</span></div><div class="line" id="122310"><span class="nick" style="color:#389600"><a href="#122310" label="[12:23:10]">&lt;melg8&gt;</a></span><span class="message">shouldn't it be at least in form of static repo? so anybody could check what's really in there? because now it's like all over the place with different mechanisms involved - in form of git submodules and python loading stuff, and system copying files from one place to other</span></div><div class="line" id="122551"><span class="nick" style="color:#389600"><a href="#122551" label="[12:25:51]">&lt;melg8&gt;</a></span><span class="message">and... for example - nix - just do not allow network access in build step. so all sources should be prepared before that.</span></div><div class="line" id="122919"><span class="nick" style="color:#6d2462"><a href="#122919" label="[12:29:19]">&lt;stikonas&gt;</a></span><span class="message">melg8: git submodules are temporary thing</span></div><div class="line" id="122935"><span class="nick" style="color:#389600"><a href="#122935" label="[12:29:35]">&lt;melg8&gt;</a></span><span class="message">what will be after?)</span></div><div class="line" id="122937"><span class="nick" style="color:#6d2462"><a href="#122937" label="[12:29:37]">&lt;stikonas&gt;</a></span><span class="message">OriansJ: has now ported ungz.c and untar.c that I found to M2libc</span></div><div class="line" id="122955"><span class="nick" style="color:#6d2462"><a href="#122955" label="[12:29:55]">&lt;stikonas&gt;</a></span><span class="message">just like after submodules, upstream tarballs</span></div><div class="line" id="123018"><span class="nick" style="color:#6d2462"><a href="#123018" label="[12:30:18]">&lt;stikonas&gt;</a></span><span class="message">earlier tcc-0.27 and tar were also git submodules</span></div><div class="line" id="123027"><span class="nick" style="color:#6d2462"><a href="#123027" label="[12:30:27]">&lt;stikonas&gt;</a></span><span class="message">not anymore, I've now removed them</span></div><div class="line" id="123056"><span class="nick" style="color:#6d2462"><a href="#123056" label="[12:30:56]">&lt;stikonas&gt;</a></span><span class="message">melg8: we don't have network access either (at least when you run in qemu)</span></div><div class="line" id="123122"><span class="nick" style="color:#389600"><a href="#123122" label="[12:31:22]">&lt;melg8&gt;</a></span><span class="message">but we dont run sysa in qemu</span></div><div class="line" id="123128"><span class="nick" style="color:#6d2462"><a href="#123128" label="[12:31:28]">&lt;stikonas&gt;</a></span><span class="message">in fact, it's not even that easy to get it, we would have to build ip command</span></div><div class="line" id="123148"><span class="nick" style="color:#6d2462"><a href="#123148" label="[12:31:48]">&lt;stikonas&gt;</a></span><span class="message">do you mean ./rootfs.py?</span></div><div class="line" id="123212"><span class="nick" style="color:#389600"><a href="#123212" label="[12:32:12]">&lt;melg8&gt;</a></span><span class="message">yea</span></div><div class="line" id="123220"><span class="nick" style="color:#6d2462"><a href="#123220" label="[12:32:20]">&lt;stikonas&gt;</a></span><span class="message">because sysa itself runs in qemu (unless you run everything in chroot)</span></div><div class="line" id="123249"><span class="nick" style="color:#6d2462"><a href="#123249" label="[12:32:49]">&lt;stikonas&gt;</a></span><span class="message">well, rootfs.py does neet network access to download sources</span></div><div class="line" id="123255"><span class="nick" style="color:#6d2462"><a href="#123255" label="[12:32:55]">&lt;stikonas&gt;</a></span><span class="message">but that's all it uses from the internet</span></div><div class="line" id="123303"><span class="nick" style="color:#6d2462"><a href="#123303" label="[12:33:03]">&lt;stikonas&gt;</a></span><span class="message">all sources are hash-checked though</span></div><div class="line" id="123316"><span class="nick" style="color:#6d2462"><a href="#123316" label="[12:33:16]">&lt;stikonas&gt;</a></span><span class="message">(not from the inside of chroot, but that will be done too)</span></div><div class="line" id="123504"><span class="nick" style="color:#389600"><a href="#123504" label="[12:35:04]">&lt;melg8&gt;</a></span><span class="message">what should do linux distro, which have other way of loading sources?) not via python script)</span></div><div class="line" id="123918"><span class="nick" style="color:#6d2462"><a href="#123918" label="[12:39:18]">&lt;stikonas&gt;</a></span><span class="message">I guess it's up to distro</span></div><div class="line" id="124119"><span class="nick" style="color:#6d2462"><a href="#124119" label="[12:41:19]">&lt;stikonas&gt;</a></span><span class="message">e.g. downloading sources is integrated into guix binary</span></div><div class="line" id="124141"><span class="nick" style="color:#389600"><a href="#124141" label="[12:41:41]">&lt;melg8&gt;</a></span><span class="message">what problem i've encountered for example - is - i can load git repos using builtin nix functions, so my minimal extra dependency for nix would be nix itself (with it's closure of stuff) and that's it, i dont even need to use some shell it will do the right thing. But if i need to fetch submodules, or even fetch alot of different packets from all</span></div><div class="line" id="124142"><span class="nick" style="color:#389600"><a href="#124142" label="[12:41:42]">&lt;melg8&gt;</a></span><span class="message">over internet (that's okay) but to put them all in right places - as placed by sysa script - it would need me shell + ln + cp + at least ) ... so if i want nix to be absolute minimum (maybe i just crazy) - best would be just prepared git (or tar) with all sources, which i load 1 time, than can inspect in my system - can check for hashes and from</span></div><div class="line" id="124142"><span class="nick" style="color:#389600"><a href="#124142" label="[12:41:42]">&lt;melg8&gt;</a></span><span class="message">that just run kaem + kaem.run - and it will do the right thing. Or i need to manually regenerate all paths in all build scripts because it's not just ../bin/kaem its /nix/store/h1vkf9k6hqxsw06p1s93mczr710n9fiy-mescc-tools-mini/kaem - where stuff lays.</span></div><div class="line" id="124231"><span class="nick" style="color:#6d2462"><a href="#124231" label="[12:42:31]">&lt;stikonas&gt;</a></span><span class="message">yeah, I see...</span></div><div class="line" id="124243"><span class="nick" style="color:#6d2462"><a href="#124243" label="[12:42:43]">&lt;stikonas&gt;</a></span><span class="message">well, like I said in the medium term git submodules will go away</span></div><div class="line" id="124333"><span class="nick" style="color:#6d2462"><a href="#124333" label="[12:43:33]">&lt;stikonas&gt;</a></span><span class="message">but it depends on M2-Planet + M2libc being able to build mes (I guess not yet released mes 0.24)</span></div><div class="line" id="124356"><span class="nick" style="color:#389600"><a href="#124356" label="[12:43:56]">&lt;melg8&gt;</a></span><span class="message">can live bootstrap do releases, and inside release just have unpacked result of sysa run?</span></div><div class="line" id="124547"><span class="nick" style="color:#6d2462"><a href="#124547" label="[12:45:47]">&lt;stikonas&gt;</a></span><span class="message">at some point I think we want to do that</span></div><div class="line" id="124551"><span class="nick" style="color:#6d2462"><a href="#124551" label="[12:45:51]">&lt;stikonas&gt;</a></span><span class="message">well, releases</span></div><div class="line" id="124558"><span class="nick" style="color:#6d2462"><a href="#124558" label="[12:45:58]">&lt;stikonas&gt;</a></span><span class="message">but not sure about sysa.run...</span></div><div class="line" id="124608"><span class="nick" style="color:#6d2462"><a href="#124608" label="[12:46:08]">&lt;stikonas&gt;</a></span><span class="message">that's a huge amount of source</span></div><div class="line" id="124624"><span class="nick" style="color:#389600"><a href="#124624" label="[12:46:24]">&lt;melg8&gt;</a></span><span class="message">it loaded by sysa anyway?</span></div><div class="line" id="124641"><span class="nick" style="color:#6d2462"><a href="#124641" label="[12:46:41]">&lt;stikonas&gt;</a></span><span class="message">well, you need to host that big tarball somewhere</span></div><div class="line" id="124651"><span class="nick" style="color:#6d2462"><a href="#124651" label="[12:46:51]">&lt;stikonas&gt;</a></span><span class="message">and for now it changes a lot</span></div><div class="line" id="124704"><span class="nick" style="color:#389600"><a href="#124704" label="[12:47:04]">&lt;melg8&gt;</a></span><span class="message">how big it would be?</span></div><div class="line" id="124717"><span class="nick" style="color:#6d2462"><a href="#124717" label="[12:47:17]">&lt;stikonas&gt;</a></span><span class="message">right now I guess it's about 200MB</span></div><div class="line" id="124725"><span class="nick" style="color:#6d2462"><a href="#124725" label="[12:47:25]">&lt;stikonas&gt;</a></span><span class="message">will be more later...</span></div><div class="line" id="124745"><span class="nick" style="color:#6d2462"><a href="#124745" label="[12:47:45]">&lt;stikonas&gt;</a></span><span class="message">and right now it's not that useful yet for other projects</span></div><div class="line" id="124751"><span class="nick" style="color:#6d2462"><a href="#124751" label="[12:47:51]">&lt;stikonas&gt;</a></span><span class="message">we only have a C compiler</span></div><div class="line" id="124802"><span class="nick" style="color:#6d2462"><a href="#124802" label="[12:48:02]">&lt;stikonas&gt;</a></span><span class="message">no C++ yet</span></div><div class="line" id="124820"><span class="nick" style="color:#389600"><a href="#124820" label="[12:48:20]">&lt;melg8&gt;</a></span><span class="message">and than we just start using self-unpacking tarball... and instead of binary gcc, we would be using binary seed of 200 MB :)</span></div><div class="line" id="124821"><span class="nick" style="color:#6d2462"><a href="#124821" label="[12:48:21]">&lt;stikonas&gt;</a></span><span class="message">other projects would also want newer GCC than 4.0.4</span></div><div class="line" id="124838"><span class="nick" style="color:#6d2462"><a href="#124838" label="[12:48:38]">&lt;stikonas&gt;</a></span><span class="message">well, not really</span></div><div class="line" id="124844"><span class="nick" style="color:#6d2462"><a href="#124844" label="[12:48:44]">&lt;stikonas&gt;</a></span><span class="message">tarball is not really a seed</span></div><div class="line" id="124851"><span class="nick" style="color:#6d2462"><a href="#124851" label="[12:48:51]">&lt;stikonas&gt;</a></span><span class="message">tar files are human readable</span></div><div class="line" id="124856"><span class="nick" style="color:#389600"><a href="#124856" label="[12:48:56]">&lt;melg8&gt;</a></span><span class="message">at least it can be viewed</span></div><div class="line" id="124902"><span class="nick" style="color:#6d2462"><a href="#124902" label="[12:49:02]">&lt;stikonas&gt;</a></span><span class="message">yeah...</span></div><div class="line" id="124904"><span class="nick" style="color:#389600"><a href="#124904" label="[12:49:04]">&lt;melg8&gt;</a></span><span class="message">yea</span></div><div class="line" id="124913"><span class="nick" style="color:#6d2462"><a href="#124913" label="[12:49:13]">&lt;stikonas&gt;</a></span><span class="message">you don't need any software to read tar</span></div><div class="line" id="124928"><span class="nick" style="color:#6d2462"><a href="#124928" label="[12:49:28]">&lt;stikonas&gt;</a></span><span class="message">although, it's less user friendly</span></div><div class="line" id="124950"><span class="nick" style="color:#6d2462"><a href="#124950" label="[12:49:50]">&lt;stikonas&gt;</a></span><span class="message">I guess same is for cpio</span></div><div class="line" id="125042"><span class="nick" style="color:#6d2462"><a href="#125042" label="[12:50:42]">&lt;stikonas&gt;</a></span><span class="message">that's why I also haven't compressed initramfs</span></div><div class="line" id="125048"><span class="nick" style="color:#6d2462"><a href="#125048" label="[12:50:48]">&lt;stikonas&gt;</a></span><span class="message">in rootfs.py</span></div><div class="line" id="125123"><span class="nick" style="color:#6d2462"><a href="#125123" label="[12:51:23]">&lt;stikonas&gt;</a></span><span class="message">anyway, I'm away for some time</span></div><div class="line" id="125133"><span class="nick" style="color:#389600"><a href="#125133" label="[12:51:33]">&lt;melg8&gt;</a></span><span class="message">okay)</span></div><div class="line" id="132144"><span class="nick" style="color:#bc80bd"><a href="#132144" label="[13:21:44]">&lt;gforce_de1977&gt;</a></span><span class="message">stikonas: i'am still struggling with the &quot;autocleanup&quot; thingy (delete sources, after we have a compiled binary). i have some &quot;exclude&quot; rules, e.g. delete bison-3.4.1 only after the third iteration, but for some reason it stops on &quot;automake-1.6.3: preparing source.&quot; with the message: &quot;autoconf-2.52: no input file&quot; - see: on bottom: <a rel="nofollow" href="http://intercity-vpn.de/bootstrap/error-on-autocleanup.txt">http://intercity-vpn.de/bootstrap/error-on-autocleanup.txt</a> </span></div><div class="line" id="132212"><span class="nick" style="color:#bc80bd"><a href="#132212" label="[13:22:12]">&lt;gforce_de1977&gt;</a></span><span class="message">(maybe you have an idea, what i have deleted and can cause this - i dont see it)</span></div><div class="line" id="132317"><span class="nick" style="color:#bc80bd"><a href="#132317" label="[13:23:17]">&lt;gforce_de1977&gt;</a></span><span class="message">these are the buildsteps as is see it: look for string &quot;stage0 1 17 16&quot; - see: <a rel="nofollow" href="http://intercity-vpn.de/bootstrap/memplot-memhack26-1999M.txt">http://intercity-vpn.de/bootstrap/memplot-memhack26-1999M.txt</a> </span></div><div class="line" id="133208"><span class="nick" style="color:#bc80bd"><a href="#133208" label="[13:32:08]">&lt;gforce_de1977&gt;</a></span><span class="message">bauen1: i tried to just patch kernels &quot;initramfs.c&quot; and did a 's/.tv_sec = mtime;/.tv_sec = 65222;/g' - but with not effect. do you have more inside which underlying kernel-functions has to be annoyed to get A) every file mtime/atime = 01-01-2000 or B) every timecall (timekeeping.h?) returns XY?</span></div><div class="line" id="135416"><span class="nick" style="color:#6d2462"><a href="#135416" label="[13:54:16]">&lt;stikonas&gt;</a></span><span class="message">gforce_de1977: did you remove autoconf-2.52 before you rebuilt second stage?</span></div><div class="line" id="135459"><span class="nick" style="color:#234e69"><a href="#135459" label="[13:54:59]">&lt;fossy&gt;</a></span><span class="message">stikonas: good point on the x86_64</span></div><div class="line" id="135500"><span class="nick" style="color:#6d2462"><a href="#135500" label="[13:55:00]">&lt;stikonas&gt;</a></span><span class="message">gforce_de1977: by the way, what I tought about cleanup, is actually not removing the whole dir but build dirs</span></div><div class="line" id="135505"><span class="nick" style="color:#234e69"><a href="#135505" label="[13:55:05]">&lt;fossy&gt;</a></span><span class="message">kinda didn't think of that</span></div><div class="line" id="135522"><span class="nick" style="color:#6d2462"><a href="#135522" label="[13:55:22]">&lt;stikonas&gt;</a></span><span class="message">fossy: it's worth testing other autotools packages too in your PR</span></div><div class="line" id="135543"><span class="nick" style="color:#234e69"><a href="#135543" label="[13:55:43]">&lt;fossy&gt;</a></span><span class="message">i tested autoconf and automake of the newest version suing perl 5.32 and they are fine</span></div><div class="line" id="135544"><span class="nick" style="color:#6d2462"><a href="#135544" label="[13:55:44]">&lt;stikonas&gt;</a></span><span class="message">sometimes --build/target/host=i386-unknown-linux-gnu would result in different hash</span></div><div class="line" id="135558"><span class="nick" style="color:#234e69"><a href="#135558" label="[13:55:58]">&lt;fossy&gt;</a></span><span class="message">right</span></div><div class="line" id="135607"><span class="nick" style="color:#6d2462"><a href="#135607" label="[13:56:07]">&lt;stikonas&gt;</a></span><span class="message">sometimes it matters, sometimes it doesn't...</span></div><div class="line" id="135632"><span class="nick" style="color:#6d2462"><a href="#135632" label="[13:56:32]">&lt;stikonas&gt;</a></span><span class="message">well, target probably doesn't matter at all except in toolchain (binutils/gcc)</span></div><div class="line" id="135643"><span class="nick" style="color:#6d2462"><a href="#135643" label="[13:56:43]">&lt;stikonas&gt;</a></span><span class="message">anyway, nice work in general, nice to see newer make, etcc...</span></div><div class="line" id="135726"><span class="nick" style="color:#6d2462"><a href="#135726" label="[13:57:26]">&lt;stikonas&gt;</a></span><span class="message">fossy: oh, I also didn't mention, when you manually install stuff, maybe install into ${DESTDIR}, that will make bauen1's rebase easier</span></div><div class="line" id="135744"><span class="nick" style="color:#234e69"><a href="#135744" label="[13:57:44]">&lt;fossy&gt;</a></span><span class="message">oh yea</span></div><div class="line" id="135759"><span class="nick" style="color:#6d2462"><a href="#135759" label="[13:57:59]">&lt;stikonas&gt;</a></span><span class="message">otherwise bauen1 will forever play catch up...</span></div><div class="line" id="135815"><span class="nick" style="color:#234e69"><a href="#135815" label="[13:58:15]">&lt;fossy&gt;</a></span><span class="message">mhm</span></div><div class="line" id="140624"><span class="nick" style="color:#6b8072"><a href="#140624" label="[14:06:24]">&lt;bauen1&gt;</a></span><span class="message">stikonas: i've actually managed to catch up (for now) :D</span></div><div class="line" id="142405"><span class="nick" style="color:#6d2462"><a href="#142405" label="[14:24:05]">&lt;stikonas&gt;</a></span><span class="message">oh, that's good</span></div><div class="line" id="142410"><span class="nick" style="color:#6d2462"><a href="#142410" label="[14:24:10]">&lt;stikonas&gt;</a></span><span class="message">although, no PR yet :)</span></div><div class="line" id="145013"><span class="nick" style="color:#6b8072"><a href="#145013" label="[14:50:13]">&lt;bauen1&gt;</a></span><span class="message">stikonas: well for a PR i have higher standards than &quot;it works&quot;</span></div><div class="line" id="152300"><span class="nick" style="color:#bc80bd"><a href="#152300" label="[15:23:00]">&lt;gforce_de1977&gt;</a></span><span class="message">stikonas: i think i found my autocleanup-mistake, will try to build again and report...thanks for the input!</span></div><div class="line" id="153414"><span class="nick" style="color:#bc80bd"><a href="#153414" label="[15:34:14]">&lt;gforce_de1977&gt;</a></span><span class="message">bauen1: according to this link, i can maybe abuse current_kernel_time() or clock_gettime() in kernel - what do you think? - <a rel="nofollow" href="https://stackoverflow.com/questions/22579157/kernel-mode-clock-gettime/32003279">https://stackoverflow.com/questions/22579157/kernel-mode-clock-gettime/32003279</a> </span></div><div class="line" id="153505"><span class="nick" style="color:#6d2462"><a href="#153505" label="[15:35:05]">&lt;stikonas&gt;</a></span><span class="message">gforce_de1977: but it would be much simpler to just delete build dirs, that's what uses up most of the RAM</span></div><div class="line" id="155216"><span class="nick" style="color:#bc80bd"><a href="#155216" label="[15:52:16]">&lt;gforce_de1977&gt;</a></span><span class="message">stikonas: ok, but the tarballs are also using ~150 Megabytes</span></div><div class="line" id="164241"><span class="nick" style="color:#6d2462"><a href="#164241" label="[16:42:41]">&lt;stikonas&gt;</a></span><span class="message">gforce_de1977: yes, that's true, but it's harder to know when we can remove them. And it also has some benefits that we can inspect source after bootstrap</span></div><div class="line" id="175942"><span class="nick" style="color:#bc80bd"><a href="#175942" label="[17:59:42]">&lt;gforce_de1977&gt;</a></span><span class="message">stikonas: ofcourse the autocleanup-stuff is not suited for debugging things 8-) i'am just trying to play with the RAM limits</span></div><div class="line" id="212615"><span class="nick" style="color:#6c3d55"><a href="#212615" label="[21:26:15]">&lt;xentrac&gt;</a></span><span class="message">attila_lendvai: how's stuff going with maru</span></div><div class="line" id="213548"><span class="nick" style="color:#3c5b35"><a href="#213548" label="[21:35:48]">&lt;attila_lendvai&gt;</a></span><span class="message">xentrac, i haven't worked on it in the last few weeks, been busy with other aspects of life. i need a spark of inspiration for something exciting, like the removal of the libc dependency was.</span></div><div class="line" id="213912"><span class="nick" style="color:#3c5b35"><a href="#213912" label="[21:39:12]">&lt;attila_lendvai&gt;</a></span><span class="message">and i have found an ugly bug with bindings and closures that is deep down at the bottom of the evaluator, and i should really fix it before any other ventures... but fixing these kinds of bugs require a high tolerance for frustration... :)</span></div><div class="line" id="214135"><span class="nick" style="color:#3c5b35"><a href="#214135" label="[21:41:35]">&lt;attila_lendvai&gt;</a></span><span class="message">and i should also spend more time at the bird's eye view perspective, i.e. learn more about MetaII &amp; co., and about type systems, before i spend too much being lost in the forest without a proper vision</span></div><div class="line" id="214246"><span class="nick" style="color:#6c3d55"><a href="#214246" label="[21:42:46]">&lt;xentrac&gt;</a></span><span class="message">i don't know, i think wandering around in the forest is the most important way to learn bushcraft</span></div><div class="line" id="214329"><span class="nick" style="color:#6c3d55"><a href="#214329" label="[21:43:29]">&lt;xentrac&gt;</a></span><span class="message">wrt the bindings and closures stuff you might find the art of the interpreter or essentials of programming languages to be enjoyable reading</span></div><div class="line" id="214340"><span class="nick" style="color:#6c3d55"><a href="#214340" label="[21:43:40]">&lt;xentrac&gt;</a></span><span class="message">but of course they're not necessary</span></div><div class="line" id="214414"><span class="nick" style="color:#6c3d55"><a href="#214414" label="[21:44:14]">&lt;xentrac&gt;</a></span><span class="message">i've found that 'i should really fix x before y' is a terrible way to open the door to inspiration</span></div><div class="line" id="214425"><span class="nick" style="color:#389600"><a href="#214425" label="[21:44:25]">&lt;melg8&gt;</a></span><span class="message">btw, what is maru? and attila_lendvai what are you talking about libc dependency from where?</span></div><div class="line" id="214459"><span class="nick" style="color:#bc80bd"><a href="#214459" label="[21:44:59]">&lt;gforce_de1977&gt;</a></span><span class="message">melg8: see his repo on github and the README</span></div><div class="line" id="214533"><span class="nick" style="color:#389600"><a href="#214533" label="[21:45:33]">&lt;melg8&gt;</a></span><span class="message">what is his nick on github?</span></div><div class="line" id="214536"><span class="nick" style="color:#6c3d55"><a href="#214536" label="[21:45:36]">&lt;xentrac&gt;</a></span><span class="message">libc dependency in maru</span></div><div class="line" id="214606"><span class="nick" style="color:#bc80bd"><a href="#214606" label="[21:46:06]">&lt;gforce_de1977&gt;</a></span><span class="message">melg8: same nick</span></div><div class="line" id="214954"><span class="nick" style="color:#6c3d55"><a href="#214954" label="[21:49:54]">&lt;xentrac&gt;</a></span><span class="message">maru is super inspiring in terms of maximal expressiveness in minimal code (and thus minimal tcb)</span></div><div class="line" id="215529"><span class="nick" style="color:#6c3d55"><a href="#215529" label="[21:55:29]">&lt;xentrac&gt;</a></span><span class="message">attila_lendvai: also 'i should learn more about x before i do y' is usually not really true.  occasionally you'll run into some wanker that sneers at you for not knowing things, but it doesn't happen often and usually those people can be ignored</span></div><div class="line" id="215640"><span class="nick" style="color:#6c3d55"><a href="#215640" label="[21:56:40]">&lt;xentrac&gt;</a></span><span class="message">if i read something that explains a better way to do y before i have ever done y, i won't understand it.  at best nothing will stick, at worst i'll acquire some kind of cargo-cult pseudo-knowledge i later have to unlearn</span></div><div class="line" id="215711"><span class="nick" style="color:#6c3d55"><a href="#215711" label="[21:57:11]">&lt;xentrac&gt;</a></span><span class="message">if i first do y, then read x, then i am equipped to understand the aspects of x that are applicable to doing y</span></div><div class="line" id="215732"><span class="nick" style="color:#6c3d55"><a href="#215732" label="[21:57:32]">&lt;xentrac&gt;</a></span><span class="message">but i don't really understand them until i do y a second time after having read x</span></div><div class="line" id="215807"><span class="nick" style="color:#6c3d55"><a href="#215807" label="[21:58:07]">&lt;xentrac&gt;</a></span><span class="message">so x y is a worse sequence than y x, and y x y is better than just y x</span></div><div class="line" id="215821"><span class="nick" style="color:#6c3d55"><a href="#215821" label="[21:58:21]">&lt;xentrac&gt;</a></span><span class="message">sometimes even y y x or y y y x is worthwhile ;)</span></div><div class="line" id="220015"><span class="nick" style="color:#6c3d55"><a href="#220015" label="[22:00:15]">&lt;xentrac&gt;</a></span><span class="message">probably anybody who sneers at you in particular can be safely ignored in any case, given what you've already achieved ;)</span></div><div class="line" id="222226"><span class="nick" style="color:#389600"><a href="#222226" label="[22:22:26]">&lt;melg8&gt;</a></span><span class="message">fossy you here? i have a question in regards of your feedback on my mr</span></div><div class="line" id="234050"><span class="nick" style="color:#6d2462"><a href="#234050" label="[23:40:50]">&lt;stikonas&gt;</a></span><span class="message">melg8: fossy is sleeping right now</span></div><div class="line" id="234057"><span class="nick" style="color:#6d2462"><a href="#234057" label="[23:40:57]">&lt;stikonas&gt;</a></span><span class="message">probaby will be waking up soon</span></div><div class="line" id="234106"><span class="nick" style="color:#389600"><a href="#234106" label="[23:41:06]">&lt;melg8&gt;</a></span><span class="message">okay)</span></div><div class="line" id="234107"><span class="nick" style="color:#6d2462"><a href="#234107" label="[23:41:07]">&lt;stikonas&gt;</a></span><span class="message">I also commented on those issues</span></div><div class="line" id="234130"><span class="nick" style="color:#6d2462"><a href="#234130" label="[23:41:30]">&lt;stikonas&gt;</a></span><span class="message">maybe using git archive instead of release tarball will be easier for us</span></div><div class="line" id="234145"><span class="nick" style="color:#389600"><a href="#234145" label="[23:41:45]">&lt;melg8&gt;</a></span><span class="message">i'm testing with <a rel="nofollow" href="https://github.com/coreutils/coreutils/archive/refs/tags/v8.32.tar.gz">https://github.com/coreutils/coreutils/archive/refs/tags/v8.32.tar.gz</a> </span></div><div class="line" id="234155"><span class="nick" style="color:#389600"><a href="#234155" label="[23:41:55]">&lt;melg8&gt;</a></span><span class="message">it has this files there</span></div><div class="line" id="234157"><span class="nick" style="color:#389600"><a href="#234157" label="[23:41:57]">&lt;melg8&gt;</a></span><span class="message">But...</span></div><div class="line" id="234206"><span class="nick" style="color:#389600"><a href="#234206" label="[23:42:06]">&lt;melg8&gt;</a></span><span class="message">  File &quot;/home/user/work/live-bootstrap/lib/utils.py&quot;, line 39, in copytree</span></div><div class="line" id="234206"><span class="nick" style="color:#389600"><a href="#234206" label="[23:42:06]">&lt;melg8&gt;</a></span><span class="message">    shutil.copytree(src, os.path.join(dst, file_name), ignore=ignore)</span></div><div class="line" id="234207"><span class="nick" style="color:#389600"><a href="#234207" label="[23:42:07]">&lt;melg8&gt;</a></span><span class="message">  File &quot;/nix/store/q6gfck5czr67090pwm53xrdyhpg6bx67-python3-3.8.9/lib/python3.8/shutil.py&quot;, line 555, in copytree</span></div><div class="line" id="234207"><span class="nick" style="color:#389600"><a href="#234207" label="[23:42:07]">&lt;melg8&gt;</a></span><span class="message">    with os.scandir(src) as itr:</span></div><div class="line" id="234208"><span class="nick" style="color:#389600"><a href="#234208" label="[23:42:08]">&lt;melg8&gt;</a></span><span class="message">FileNotFoundError: [Errno 2] No such file or directory: '/home/user/work/live-bootstrap/sysa/v8.32'</span></div><div class="line" id="234215"><span class="nick" style="color:#389600"><a href="#234215" label="[23:42:15]">&lt;melg8&gt;</a></span><span class="message">do we want file named v8.32?)</span></div><div class="line" id="234230"><span class="nick" style="color:#234e69"><a href="#234230" label="[23:42:30]">&lt;fossy&gt;</a></span><span class="message">hi</span></div><div class="line" id="234248"><span class="nick" style="color:#389600"><a href="#234248" label="[23:42:48]">&lt;melg8&gt;</a></span><span class="message">hi)</span></div><div class="line" id="234301"><span class="nick" style="color:#6d2462"><a href="#234301" label="[23:43:01]">&lt;stikonas&gt;</a></span><span class="message">melg8: yes, that's what git archive is...</span></div><div class="line" id="234306"><span class="nick" style="color:#6d2462"><a href="#234306" label="[23:43:06]">&lt;stikonas&gt;</a></span><span class="message">but maybe savannah is better?</span></div><div class="line" id="234311"><span class="nick" style="color:#389600"><a href="#234311" label="[23:43:11]">&lt;melg8&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/115">https://github.com/fosslinux/live-bootstrap/pull/115</a>  i wrote you some replies there</span></div><div class="line" id="234313"><span class="nick" style="color:#6d2462"><a href="#234313" label="[23:43:13]">&lt;stikonas&gt;</a></span><span class="message">since it's upstream repository</span></div><div class="line" id="234331"><span class="nick" style="color:#6d2462"><a href="#234331" label="[23:43:31]">&lt;stikonas&gt;</a></span><span class="message">melg8: an no, we need to rename file, not v8.32.tar.gz</span></div><div class="line" id="234340"><span class="nick" style="color:#6d2462"><a href="#234340" label="[23:43:40]">&lt;stikonas&gt;</a></span><span class="message">but that's already possible in sysa.py</span></div><div class="line" id="234454"><span class="nick" style="color:#389600"><a href="#234454" label="[23:44:54]">&lt;melg8&gt;</a></span><span class="message">that error gets from get_file</span></div><div class="line" id="234534"><span class="nick" style="color:#6d2462"><a href="#234534" label="[23:45:34]">&lt;stikonas&gt;</a></span><span class="message">melg8: that's expected</span></div><div class="line" id="234541"><span class="nick" style="color:#6d2462"><a href="#234541" label="[23:45:41]">&lt;stikonas&gt;</a></span><span class="message">because you are not naming it correctly</span></div><div class="line" id="234543"><span class="nick" style="color:#234e69"><a href="#234543" label="[23:45:43]">&lt;fossy&gt;</a></span><span class="message">hm I will do some looking</span></div><div class="line" id="234601"><span class="nick" style="color:#6d2462"><a href="#234601" label="[23:46:01]">&lt;stikonas&gt;</a></span><span class="message">if you rename it in get_file to coreutils-8.32 it will work fine</span></div><div class="line" id="234607"><span class="nick" style="color:#6d2462"><a href="#234607" label="[23:46:07]">&lt;stikonas&gt;</a></span><span class="message">(if I remember correctly)</span></div><div class="line" id="234645"><span class="nick" style="color:#389600"><a href="#234645" label="[23:46:45]">&lt;melg8&gt;</a></span><span class="message">you mean when i call get_file in sysa?</span></div><div class="line" id="234702"><span class="nick" style="color:#6d2462"><a href="#234702" label="[23:47:02]">&lt;stikonas&gt;</a></span><span class="message">melg8: look at that sha-2 package</span></div><div class="line" id="234708"><span class="nick" style="color:#6d2462"><a href="#234708" label="[23:47:08]">&lt;stikonas&gt;</a></span><span class="message">it does exactly that</span></div><div class="line" id="234722"><span class="nick" style="color:#6d2462"><a href="#234722" label="[23:47:22]">&lt;stikonas&gt;</a></span><span class="message">        self.get_file(&quot;<a rel="nofollow" href="https://github.com/amosnier/sha-2/archive/61555d.tar.gz">https://github.com/amosnier/sha-2/archive/61555d.tar.gz</a>&quot;,  mkbuild=True,</span></div><div class="line" id="234722"><span class="nick" style="color:#389600"><a href="#234722" label="[23:47:22]">&lt;melg8&gt;</a></span><span class="message">aww, yes, cool</span></div><div class="line" id="234724"><span class="nick" style="color:#6d2462"><a href="#234724" label="[23:47:24]">&lt;stikonas&gt;</a></span><span class="message">                      output=&quot;sha-2-61555d.tar.gz&quot;)</span></div><div class="line" id="234734"><span class="nick" style="color:#389600"><a href="#234734" label="[23:47:34]">&lt;melg8&gt;</a></span><span class="message">then i'll check how it builds</span></div><div class="line" id="234736"><span class="nick" style="color:#6d2462"><a href="#234736" label="[23:47:36]">&lt;stikonas&gt;</a></span><span class="message">you won't need mkbuild=True but output is what you want</span></div><div class="line" id="234749"><span class="nick" style="color:#6d2462"><a href="#234749" label="[23:47:49]">&lt;stikonas&gt;</a></span><span class="message">it's just a parameter to rename downloaded file</span></div><div class="line" id="234809"><span class="nick" style="color:#6d2462"><a href="#234809" label="[23:48:09]">&lt;stikonas&gt;</a></span><span class="message">and it is expected to be put into basename(output) directory rather than basename(url)</span></div><div class="line" id="234836"><span class="nick" style="color:#6d2462"><a href="#234836" label="[23:48:36]">&lt;stikonas&gt;</a></span><span class="message">fossy: so I think after your PR we'll only have gzip and patch still using meslibc</span></div><div class="line" id="235002"><span class="nick" style="color:#6d2462"><a href="#235002" label="[23:50:02]">&lt;stikonas&gt;</a></span><span class="message">melg8: alternatively, if you download from savannah, it already has the right name</span></div><div class="line" id="235003"><span class="nick" style="color:#6d2462"><a href="#235003" label="[23:50:03]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/coreutils.git/snapshot/coreutils-8.32.tar.gz">https://git.savannah.gnu.org/cgit/coreutils.git/snapshot/coreutils-8.32.tar.gz</a> </span></div><div class="line" id="235142"><span class="nick" style="color:#389600"><a href="#235142" label="[23:51:42]">&lt;melg8&gt;</a></span><span class="message">very nice!</span></div><div class="line" id="235307"><span class="nick" style="color:#389600"><a href="#235307" label="[23:53:07]">&lt;melg8&gt;</a></span><span class="message">fossy, maybe it would be easy fix, by just using right variant of repo, i'll check if it's builds now.</span></div><br /></div></body></html>