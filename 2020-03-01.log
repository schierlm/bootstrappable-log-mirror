<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-03-01.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000321"><span class="nick" style="color:#389600"><a href="#000321" label="[00:03:21]">&lt;OriansJ`&gt;</a></span><span class="message">markjenkinsznc: looks good</span></div><div class="line" id="000332"><span class="nick" style="color:#389600"><a href="#000332" label="[00:03:32]">&lt;OriansJ`&gt;</a></span><span class="message">fossy: thank you, I'll be checking shortly</span></div><div class="line" id="000933"><span class="nick" style="color:#389600"><a href="#000933" label="[00:09:33]">&lt;OriansJ`&gt;</a></span><span class="message">markjenkinsznc: I'll be doing a full manual audit and then commit the work for M0-compact.hex2; with only the addition of your name as a coauthor and a few minor whitespace tweaks</span></div><div class="line" id="001825"><span class="nick" style="color:#389600"><a href="#001825" label="[00:18:25]">&lt;OriansJ`&gt;</a></span><span class="message">fossy: the line: require(token-&gt;next == NULL, &quot;INVALID set COMMAND\nABORTING HARD\n&quot;); you probably ment NULL != token-&gt;next as require exits failure and displays the string if the expression is false</span></div><div class="line" id="001845"><span class="nick" style="color:#389600"><a href="#001845" label="[00:18:45]">&lt;OriansJ`&gt;</a></span><span class="message">and the comment about M2 above it is no longer required</span></div><div class="line" id="001914"><span class="nick" style="color:#389600"><a href="#001914" label="[00:19:14]">&lt;OriansJ`&gt;</a></span><span class="message">and NULL != token-&gt;next-&gt;value right below it</span></div><div class="line" id="002218"><span class="nick" style="color:#389600"><a href="#002218" label="[00:22:18]">&lt;OriansJ`&gt;</a></span><span class="message">but I'll fix that for you</span></div><div class="line" id="003657"><span class="nick" style="color:#2e2a4a"><a href="#003657" label="[00:36:57]">&lt;dddddd&gt;</a></span><span class="message">The ../M2-Planet/ references are still in the makefile, it doesn't build.</span></div><div class="line" id="004105"><span class="nick" style="color:#389600"><a href="#004105" label="[00:41:05]">&lt;OriansJ`&gt;</a></span><span class="message">dddddd: I'm fixing that too</span></div><div class="line" id="004145"><span class="nick" style="color:#2e2a4a"><a href="#004145" label="[00:41:45]">&lt;dddddd&gt;</a></span><span class="message">Removing those I get:</span></div><div class="line" id="004148"><span class="nick" style="color:#2e2a4a"><a href="#004148" label="[00:41:48]">&lt;dddddd&gt;</a></span><span class="message">cc1: warning: unrecognized command line option &quot;-Wno-int-conversion&quot;</span></div><div class="line" id="004203"><span class="nick" style="color:#2e2a4a"><a href="#004203" label="[00:42:03]">&lt;dddddd&gt;</a></span><span class="message">gcc (Debian 4.9.2-10+deb8u2) 4.9.2</span></div><div class="line" id="004332"><span class="nick" style="color:#2e2a4a"><a href="#004332" label="[00:43:32]">&lt;dddddd&gt;</a></span><span class="message">... and lots of warnings that I guess are the ones that flag hides:</span></div><div class="line" id="004344"><span class="nick" style="color:#2e2a4a"><a href="#004344" label="[00:43:44]">&lt;dddddd&gt;</a></span><span class="message">warning: assignment makes pointer from integer without a cast</span></div><div class="line" id="004403"><span class="nick" style="color:#389600"><a href="#004403" label="[00:44:03]">&lt;OriansJ`&gt;</a></span><span class="message">dddddd: I noticed and am fixing</span></div><div class="line" id="004423"><span class="nick" style="color:#389600"><a href="#004423" label="[00:44:23]">&lt;OriansJ`&gt;</a></span><span class="message">hence why it hasn't been propagated to savannah yet</span></div><div class="line" id="004537"><span class="nick" style="color:#2e2a4a"><a href="#004537" label="[00:45:37]">&lt;dddddd&gt;</a></span><span class="message">Are you rewritting to get a buildable project on each commit or just adding new commits with fixes?</span></div><div class="line" id="004720"><span class="nick" style="color:#389600"><a href="#004720" label="[00:47:20]">&lt;OriansJ`&gt;</a></span><span class="message">new commit with fixes</span></div><div class="line" id="004733"><span class="nick" style="color:#2e2a4a"><a href="#004733" label="[00:47:33]">&lt;dddddd&gt;</a></span><span class="message">not ideal, you know</span></div><div class="line" id="004742"><span class="nick" style="color:#389600"><a href="#004742" label="[00:47:42]">&lt;OriansJ`&gt;</a></span><span class="message">true</span></div><div class="line" id="004837"><span class="nick" style="color:#2e2a4a"><a href="#004837" label="[00:48:37]">&lt;dddddd&gt;</a></span><span class="message">Why not wait to fossy to fix it in a proper way?</span></div><div class="line" id="004925"><span class="nick" style="color:#2e2a4a"><a href="#004925" label="[00:49:25]">&lt;dddddd&gt;</a></span><span class="message">This sloppiness only lead to more sloppiness, and lack of motivation to do the things the &quot;right&quot; way, IMO</span></div><div class="line" id="005757"><span class="nick" style="color:#389600"><a href="#005757" label="[00:57:57]">&lt;OriansJ`&gt;</a></span><span class="message">I guess I am a little too kind to people learning, with the hope they notice what I fix and learn from it</span></div><div class="line" id="010257"><span class="nick" style="color:#389600"><a href="#010257" label="[01:02:57]">&lt;OriansJ`&gt;</a></span><span class="message">but honestly most of it is &quot;fine&quot;</span></div><div class="line" id="010322"><span class="nick" style="color:#2e2a4a"><a href="#010322" label="[01:03:22]">&lt;dddddd&gt;</a></span><span class="message">Meanwhile, the repo is a mess.</span></div><div class="line" id="010340"><span class="nick" style="color:#389600"><a href="#010340" label="[01:03:40]">&lt;OriansJ`&gt;</a></span><span class="message">dddddd: only in regards to kaem</span></div><div class="line" id="011450"><span class="nick" style="color:#2e2a4a"><a href="#011450" label="[01:14:50]">&lt;dddddd&gt;</a></span><span class="message">fossy, to be clear. I'm not criticizing your work but the integration.</span></div><div class="line" id="014153"><span class="nick" style="color:#389600"><a href="#014153" label="[01:41:53]">&lt;OriansJ`&gt;</a></span><span class="message">ok, kaem.c now builds correctly and passes its own tests</span></div><div class="line" id="014235"><span class="nick" style="color:#389600"><a href="#014235" label="[01:42:35]">&lt;OriansJ`&gt;</a></span><span class="message">ironically gcc needs fflush(stdout); to get matching behavior.</span></div><div class="line" id="014251"><span class="nick" style="color:#389600"><a href="#014251" label="[01:42:51]">&lt;OriansJ`&gt;</a></span><span class="message">as M2-Planet doesn't buffer</span></div><div class="line" id="014313"><span class="nick" style="color:#389600"><a href="#014313" label="[01:43:13]">&lt;OriansJ`&gt;</a></span><span class="message">so dddddd I guess we will need to make a fflush function for M2-Planet</span></div><div class="line" id="014357"><span class="nick" style="color:#389600"><a href="#014357" label="[01:43:57]">&lt;OriansJ`&gt;</a></span><span class="message">(it'll do nothing but return 0)</span></div><div class="line" id="014619"><span class="nick" style="color:#6b8072"><a href="#014619" label="[01:46:19]">&lt;fossy&gt;</a></span><span class="message">dddddd, OriansJ`: I would much prefer to solve these issues myself... otherwise ill never learn</span></div><div class="line" id="014702"><span class="nick" style="color:#6b8072"><a href="#014702" label="[01:47:02]">&lt;fossy&gt;</a></span><span class="message">dddddd: I broke kaem out into a folder because I plan to split it out into multiple files</span></div><div class="line" id="014711"><span class="nick" style="color:#6b8072"><a href="#014711" label="[01:47:11]">&lt;fossy&gt;</a></span><span class="message">and kaem was passing its own tests....</span></div><div class="line" id="014727"><span class="nick" style="color:#6b8072"><a href="#014727" label="[01:47:27]">&lt;fossy&gt;</a></span><span class="message">I didnt test with gcc 4, I was using gcc 9.</span></div><div class="line" id="014749"><span class="nick" style="color:#6b8072"><a href="#014749" label="[01:47:49]">&lt;fossy&gt;</a></span><span class="message">I was just about to fix the m2 planet things and rewrite history</span></div><div class="line" id="014802"><span class="nick" style="color:#2e2a4a"><a href="#014802" label="[01:48:02]">&lt;dddddd&gt;</a></span><span class="message">+1 to learn by solving, indeed</span></div><div class="line" id="014804"><span class="nick" style="color:#6b8072"><a href="#014804" label="[01:48:04]">&lt;fossy&gt;</a></span><span class="message">I still think kaem should be in its seperate repository</span></div><div class="line" id="014835"><span class="nick" style="color:#389600"><a href="#014835" label="[01:48:35]">&lt;OriansJ`&gt;</a></span><span class="message">fossy: indeed; I'll create one and give you permissions</span></div><div class="line" id="014850"><span class="nick" style="color:#6b8072"><a href="#014850" label="[01:48:50]">&lt;fossy&gt;</a></span><span class="message">okey dokey</span></div><div class="line" id="014901"><span class="nick" style="color:#6b8072"><a href="#014901" label="[01:49:01]">&lt;fossy&gt;</a></span><span class="message">we still have the kaem repo on gh</span></div><div class="line" id="014905"><span class="nick" style="color:#6b8072"><a href="#014905" label="[01:49:05]">&lt;fossy&gt;</a></span><span class="message">github</span></div><div class="line" id="014914"><span class="nick" style="color:#6b8072"><a href="#014914" label="[01:49:14]">&lt;fossy&gt;</a></span><span class="message">but nothing on Savannah afaik</span></div><div class="line" id="014944"><span class="nick" style="color:#389600"><a href="#014944" label="[01:49:44]">&lt;OriansJ`&gt;</a></span><span class="message">hopefully you look carefully at my fixes</span></div><div class="line" id="014951"><span class="nick" style="color:#6b8072"><a href="#014951" label="[01:49:51]">&lt;fossy&gt;</a></span><span class="message">OriansJ`: I shall</span></div><div class="line" id="015026"><span class="nick" style="color:#6b8072"><a href="#015026" label="[01:50:26]">&lt;fossy&gt;</a></span><span class="message">&lt;dddddd&gt; fossy, to be clear. I'm not criticizing your work but the integration.</span></div><div class="line" id="015037"><span class="nick" style="color:#6b8072"><a href="#015037" label="[01:50:37]">&lt;fossy&gt;</a></span><span class="message">integration, do you mean like commits etc?</span></div><div class="line" id="015054"><span class="nick" style="color:#389600"><a href="#015054" label="[01:50:54]">&lt;OriansJ`&gt;</a></span><span class="message">fossy: <a rel="nofollow" href="https://github.com/oriansj/kaem">https://github.com/oriansj/kaem</a> </span></div><div class="line" id="015135"><span class="nick" style="color:#2e2a4a"><a href="#015135" label="[01:51:35]">&lt;dddddd&gt;</a></span><span class="message">fossy, the way your commits are accepted (or not) and integrated in the repo.</span></div><div class="line" id="015151"><span class="nick" style="color:#6b8072"><a href="#015151" label="[01:51:51]">&lt;fossy&gt;</a></span><span class="message">right</span></div><div class="line" id="015156"><span class="nick" style="color:#2e2a4a"><a href="#015156" label="[01:51:56]">&lt;dddddd&gt;</a></span><span class="message">OriansJ`, which file fflush would belong?</span></div><div class="line" id="015241"><span class="nick" style="color:#6b8072"><a href="#015241" label="[01:52:41]">&lt;fossy&gt;</a></span><span class="message">generally when I make a larger  PR I make fixing commits and then when told that the tip is acceptable rewrite history</span></div><div class="line" id="015308"><span class="nick" style="color:#6b8072"><a href="#015308" label="[01:53:08]">&lt;fossy&gt;</a></span><span class="message">I dont know if thats a good approach</span></div><div class="line" id="015334"><span class="nick" style="color:#389600"><a href="#015334" label="[01:53:34]">&lt;OriansJ`&gt;</a></span><span class="message">fossy: invite sent; you'll need to export the commits to kaem.c from mescc-tools to get it back up to date but it'll be a good learning experience</span></div><div class="line" id="015356"><span class="nick" style="color:#389600"><a href="#015356" label="[01:53:56]">&lt;OriansJ`&gt;</a></span><span class="message">I want the git blame to be accurate</span></div><div class="line" id="015436"><span class="nick" style="color:#6b8072"><a href="#015436" label="[01:54:36]">&lt;fossy&gt;</a></span><span class="message">dddddd: just to be clear are you saying the code is fine, just the process of review, merge and my use of VCS is done poorly?</span></div><div class="line" id="015458"><span class="nick" style="color:#389600"><a href="#015458" label="[01:54:58]">&lt;OriansJ`&gt;</a></span><span class="message">dddddd: I am guessing test/common_*/functions/file.c</span></div><div class="line" id="015554"><span class="nick" style="color:#389600"><a href="#015554" label="[01:55:54]">&lt;OriansJ`&gt;</a></span><span class="message">fossy: you need to be more careful how you commit</span></div><div class="line" id="015633"><span class="nick" style="color:#6b8072"><a href="#015633" label="[01:56:33]">&lt;fossy&gt;</a></span><span class="message">This is quite true</span></div><div class="line" id="015639"><span class="nick" style="color:#389600"><a href="#015639" label="[01:56:39]">&lt;OriansJ`&gt;</a></span><span class="message">the idea is that all commits should be to the best of your ability having the code in a known good state</span></div><div class="line" id="015705"><span class="nick" style="color:#2e2a4a"><a href="#015705" label="[01:57:05]">&lt;dddddd&gt;</a></span><span class="message">fossy, that approach is great IMO. About your code, I didn't looked at the details and the ideas behind the changes so I can't talk about it. But not merging several commits where the build is broken feels wrong.</span></div><div class="line" id="015813"><span class="nick" style="color:#2e2a4a"><a href="#015813" label="[01:58:13]">&lt;dddddd&gt;</a></span><span class="message">You wasn't given the opportunity to fix it (and end your process).</span></div><div class="line" id="015844"><span class="nick" style="color:#2e2a4a"><a href="#015844" label="[01:58:44]">&lt;dddddd&gt;</a></span><span class="message">s/not merging/merging/ (sorry)</span></div><div class="line" id="020030"><span class="nick" style="color:#2e2a4a"><a href="#020030" label="[02:00:30]">&lt;dddddd&gt;</a></span><span class="message">All said, it's true I don't know if OriansJ` was aware of your plan.</span></div><div class="line" id="020313"><span class="nick" style="color:#2e2a4a"><a href="#020313" label="[02:03:13]">&lt;dddddd&gt;</a></span><span class="message">OriansJ`, I'll add a just &quot;return 0&quot; fflush for all archs.</span></div><div class="line" id="020700"><span class="nick" style="color:#6b8072"><a href="#020700" label="[02:07:00]">&lt;fossy&gt;</a></span><span class="message">I dont think he was. My bad</span></div><div class="line" id="021050"><span class="nick" style="color:#389600"><a href="#021050" label="[02:10:50]">&lt;OriansJ`&gt;</a></span><span class="message">dddddd: thank you</span></div><div class="line" id="021114"><span class="nick" style="color:#389600"><a href="#021114" label="[02:11:14]">&lt;OriansJ`&gt;</a></span><span class="message">fossy: no worries</span></div><div class="line" id="021214"><span class="nick" style="color:#6b8072"><a href="#021214" label="[02:12:14]">&lt;fossy&gt;</a></span><span class="message">yes, I need to treat my PRs as I would master</span></div><div class="line" id="021217"><span class="nick" style="color:#6b8072"><a href="#021217" label="[02:12:17]">&lt;fossy&gt;</a></span><span class="message">no broken commits</span></div><div class="line" id="021302"><span class="nick" style="color:#389600"><a href="#021302" label="[02:13:02]">&lt;OriansJ`&gt;</a></span><span class="message">fossy: remember everything is for the world to review and know the quality of your work.</span></div><div class="line" id="021343"><span class="nick" style="color:#389600"><a href="#021343" label="[02:13:43]">&lt;OriansJ`&gt;</a></span><span class="message">You have to walk the line between consistently making improvements while still reflecting on is this work good enough for others to see.</span></div><div class="line" id="021411"><span class="nick" style="color:#389600"><a href="#021411" label="[02:14:11]">&lt;OriansJ`&gt;</a></span><span class="message">Hence focus on simplicity and clarity</span></div><div class="line" id="021559"><span class="nick" style="color:#6b8072"><a href="#021559" label="[02:15:59]">&lt;fossy&gt;</a></span><span class="message">I tried to do that in my code</span></div><div class="line" id="021606"><span class="nick" style="color:#6b8072"><a href="#021606" label="[02:16:06]">&lt;fossy&gt;</a></span><span class="message">Didnt pay enough attention to git thougj</span></div><div class="line" id="021621"><span class="nick" style="color:#6b8072"><a href="#021621" label="[02:16:21]">&lt;fossy&gt;</a></span><span class="message">so OriansJ`, will kaem be removed from mescc tools?</span></div><div class="line" id="021716"><span class="nick" style="color:#389600"><a href="#021716" label="[02:17:16]">&lt;OriansJ`&gt;</a></span><span class="message">not exactly, it'll just become a submodule</span></div><div class="line" id="021743"><span class="nick" style="color:#389600"><a href="#021743" label="[02:17:43]">&lt;OriansJ`&gt;</a></span><span class="message">but I want you to get the kaem repo into shape first</span></div><div class="line" id="021817"><span class="nick" style="color:#6b8072"><a href="#021817" label="[02:18:17]">&lt;fossy&gt;</a></span><span class="message">Ah</span></div><div class="line" id="021940"><span class="nick" style="color:#389600"><a href="#021940" label="[02:19:40]">&lt;OriansJ`&gt;</a></span><span class="message">I want full history of changes to kaem.c imported</span></div><div class="line" id="022006"><span class="nick" style="color:#6b8072"><a href="#022006" label="[02:20:06]">&lt;fossy&gt;</a></span><span class="message">kk</span></div><div class="line" id="022009"><span class="nick" style="color:#389600"><a href="#022009" label="[02:20:09]">&lt;OriansJ`&gt;</a></span><span class="message">You can fix your commits and rebase them too if you like</span></div><div class="line" id="022115"><span class="nick" style="color:#389600"><a href="#022115" label="[02:21:15]">&lt;OriansJ`&gt;</a></span><span class="message">but I want that repo as perfect as you can make it</span></div><div class="line" id="022133"><span class="nick" style="color:#6b8072"><a href="#022133" label="[02:21:33]">&lt;fossy&gt;</a></span><span class="message">so in future, OriansJ`, things that were in that commit you made I really would appreciate you including in your review to me, because all of those commits are logicial</span></div><div class="line" id="022142"><span class="nick" style="color:#6b8072"><a href="#022142" label="[02:21:42]">&lt;fossy&gt;</a></span><span class="message">all of those changes</span></div><div class="line" id="022158"><span class="nick" style="color:#6b8072"><a href="#022158" label="[02:21:58]">&lt;fossy&gt;</a></span><span class="message">but I like to have the opportunity to learn by fixing</span></div><div class="line" id="022405"><span class="nick" style="color:#389600"><a href="#022405" label="[02:24:05]">&lt;OriansJ`&gt;</a></span><span class="message">ok; first a code smell involving token_head</span></div><div class="line" id="022416"><span class="nick" style="color:#389600"><a href="#022416" label="[02:24:16]">&lt;OriansJ`&gt;</a></span><span class="message">You keep using it to reset token;</span></div><div class="line" id="022453"><span class="nick" style="color:#389600"><a href="#022453" label="[02:24:53]">&lt;OriansJ`&gt;</a></span><span class="message">it means that what you really should be doing is creating a local struct Token* n in those functions to iterate over the list</span></div><div class="line" id="022518"><span class="nick" style="color:#389600"><a href="#022518" label="[02:25:18]">&lt;OriansJ`&gt;</a></span><span class="message">you probably are doing the same thing with env_head and env_tail</span></div><div class="line" id="022601"><span class="nick" style="color:#389600"><a href="#022601" label="[02:26:01]">&lt;OriansJ`&gt;</a></span><span class="message">if you are iterating to call to a function which updates it; pass that single node to the function to update</span></div><div class="line" id="022744"><span class="nick" style="color:#389600"><a href="#022744" label="[02:27:44]">&lt;OriansJ`&gt;</a></span><span class="message">the -&gt;is_comment shouldn't ever occur</span></div><div class="line" id="022840"><span class="nick" style="color:#389600"><a href="#022840" label="[02:28:40]">&lt;OriansJ`&gt;</a></span><span class="message">It only appears because you are doing a weird list thing in collect_token</span></div><div class="line" id="023026"><span class="nick" style="color:#389600"><a href="#023026" label="[02:30:26]">&lt;OriansJ`&gt;</a></span><span class="message">What you should be doing in there is calloc a string, create an index (int i) and set it to 0; And only if the index is greater than 0 create the new token, set its value, next and pos then update token with it</span></div><div class="line" id="023138"><span class="nick" style="color:#389600"><a href="#023138" label="[02:31:38]">&lt;OriansJ`&gt;</a></span><span class="message">in fact; I want you to do it only using single-link list</span></div><div class="line" id="023251"><span class="nick" style="color:#389600"><a href="#023251" label="[02:32:51]">&lt;OriansJ`&gt;</a></span><span class="message">you can copy M2-Planet's reverse_list from cc_reader.c when the token list is done and you need to reverse the order of the tokens</span></div><div class="line" id="023523"><span class="nick" style="color:#6b8072"><a href="#023523" label="[02:35:23]">&lt;fossy&gt;</a></span><span class="message">OriansJ`: thank you for the pointers</span></div><div class="line" id="023545"><span class="nick" style="color:#6b8072"><a href="#023545" label="[02:35:45]">&lt;fossy&gt;</a></span><span class="message">This is the first time I have used a linked list as a primary strucutre in a program</span></div><div class="line" id="023549"><span class="nick" style="color:#6b8072"><a href="#023549" label="[02:35:49]">&lt;fossy&gt;</a></span><span class="message">Unintentional pun</span></div><div class="line" id="023627"><span class="nick" style="color:#389600"><a href="#023627" label="[02:36:27]">&lt;OriansJ`&gt;</a></span><span class="message">fossy: here is the new struct you are to use: <a rel="nofollow" href="https://paste.debian.net/1132956/">https://paste.debian.net/1132956/</a> </span></div><div class="line" id="023635"><span class="nick" style="color:#6b8072"><a href="#023635" label="[02:36:35]">&lt;fossy&gt;</a></span><span class="message">woo, git filter-branch ftw</span></div><div class="line" id="023652"><span class="nick" style="color:#389600"><a href="#023652" label="[02:36:52]">&lt;OriansJ`&gt;</a></span><span class="message">struct Environment will be replaced by it too</span></div><div class="line" id="023702"><span class="nick" style="color:#6b8072"><a href="#023702" label="[02:37:02]">&lt;fossy&gt;</a></span><span class="message">yessir</span></div><div class="line" id="023727"><span class="nick" style="color:#6b8072"><a href="#023727" label="[02:37:27]">&lt;fossy&gt;</a></span><span class="message">Environment dosent need pos though</span></div><div class="line" id="023746"><span class="nick" style="color:#389600"><a href="#023746" label="[02:37:46]">&lt;OriansJ`&gt;</a></span><span class="message">that it is why it is a union</span></div><div class="line" id="023759"><span class="nick" style="color:#6b8072"><a href="#023759" label="[02:37:59]">&lt;fossy&gt;</a></span><span class="message">Right</span></div><div class="line" id="023809"><span class="nick" style="color:#389600"><a href="#023809" label="[02:38:09]">&lt;OriansJ`&gt;</a></span><span class="message">It can either have a name set or a position set</span></div><div class="line" id="023827"><span class="nick" style="color:#6b8072"><a href="#023827" label="[02:38:27]">&lt;fossy&gt;</a></span><span class="message">Oh righr</span></div><div class="line" id="023829"><span class="nick" style="color:#6b8072"><a href="#023829" label="[02:38:29]">&lt;fossy&gt;</a></span><span class="message">right</span></div><div class="line" id="023831"><span class="nick" style="color:#6b8072"><a href="#023831" label="[02:38:31]">&lt;fossy&gt;</a></span><span class="message">silly me</span></div><div class="line" id="023859"><span class="nick" style="color:#389600"><a href="#023859" label="[02:38:59]">&lt;OriansJ`&gt;</a></span><span class="message">tokens_to_array and env_to_array are to be replaced by a function that works for both cases; using a list passed to it</span></div><div class="line" id="023915"><span class="nick" style="color:#80b1d3"><a href="#023915" label="[02:39:15]">*</a></span><span class="message">fossy writes this doen</span></div><div class="line" id="024017"><span class="nick" style="color:#389600"><a href="#024017" label="[02:40:17]">&lt;OriansJ`&gt;</a></span><span class="message">collect_token is to return an int; that int being the last char read</span></div><div class="line" id="024043"><span class="nick" style="color:#389600"><a href="#024043" label="[02:40:43]">&lt;OriansJ`&gt;</a></span><span class="message">the calling function is to check if it is an EOF and thus know if the script is done</span></div><div class="line" id="024058"><span class="nick" style="color:#389600"><a href="#024058" label="[02:40:58]">&lt;OriansJ`&gt;</a></span><span class="message">To eliminate the need for the global variable you currently have</span></div><div class="line" id="024109"><span class="nick" style="color:#6b8072"><a href="#024109" label="[02:41:09]">&lt;fossy&gt;</a></span><span class="message">hmm. I get that</span></div><div class="line" id="024129"><span class="nick" style="color:#6b8072"><a href="#024129" label="[02:41:29]">&lt;fossy&gt;</a></span><span class="message">but imo the code should terminate at the end of main, if successful</span></div><div class="line" id="024135"><span class="nick" style="color:#6b8072"><a href="#024135" label="[02:41:35]">&lt;fossy&gt;</a></span><span class="message">that was my idea with that global</span></div><div class="line" id="024235"><span class="nick" style="color:#6b8072"><a href="#024235" label="[02:42:35]">&lt;fossy&gt;</a></span><span class="message">Also thank you for this</span></div><div class="line" id="024238"><span class="nick" style="color:#6b8072"><a href="#024238" label="[02:42:38]">&lt;fossy&gt;</a></span><span class="message">Super useful</span></div><div class="line" id="024308"><span class="nick" style="color:#389600"><a href="#024308" label="[02:43:08]">&lt;OriansJ`&gt;</a></span><span class="message">run_script should return when you hit the EOF</span></div><div class="line" id="024326"><span class="nick" style="color:#6b8072"><a href="#024326" label="[02:43:26]">&lt;fossy&gt;</a></span><span class="message">Oh, I get it now</span></div><div class="line" id="024341"><span class="nick" style="color:#6b8072"><a href="#024341" label="[02:43:41]">&lt;fossy&gt;</a></span><span class="message">function prototypes, why remove those</span></div><div class="line" id="024401"><span class="nick" style="color:#6b8072"><a href="#024401" label="[02:44:01]">&lt;fossy&gt;</a></span><span class="message">OK, now we have only kaem.c in the repo</span></div><div class="line" id="024413"><span class="nick" style="color:#6b8072"><a href="#024413" label="[02:44:13]">&lt;fossy&gt;</a></span><span class="message">Now lets integrate the other repo back in</span></div><div class="line" id="024420"><span class="nick" style="color:#389600"><a href="#024420" label="[02:44:20]">&lt;OriansJ`&gt;</a></span><span class="message">fossy: why have function prototypes at all?</span></div><div class="line" id="024504"><span class="nick" style="color:#6b8072"><a href="#024504" label="[02:45:04]">&lt;fossy&gt;</a></span><span class="message">OriansJ`: in case a function is called by another function thats code is before it</span></div><div class="line" id="024506"><span class="nick" style="color:#389600"><a href="#024506" label="[02:45:06]">&lt;OriansJ`&gt;</a></span><span class="message">and your do whiles are wrong; you mean while(NULL != n) as those loops will do the wrong thing if the list is NULL and you'll get a segfault</span></div><div class="line" id="024516"><span class="nick" style="color:#6b8072"><a href="#024516" label="[02:45:16]">&lt;fossy&gt;</a></span><span class="message">Eg recurisve funcs</span></div><div class="line" id="024547"><span class="nick" style="color:#389600"><a href="#024547" label="[02:45:47]">&lt;OriansJ`&gt;</a></span><span class="message">fossy: yes but that doesn't exist in the current code</span></div><div class="line" id="024611"><span class="nick" style="color:#6b8072"><a href="#024611" label="[02:46:11]">&lt;fossy&gt;</a></span><span class="message">I was thinking for future.</span></div><div class="line" id="024624"><span class="nick" style="color:#6b8072"><a href="#024624" label="[02:46:24]">&lt;fossy&gt;</a></span><span class="message">But there is no good reason to have them in the current code</span></div><div class="line" id="024652"><span class="nick" style="color:#389600"><a href="#024652" label="[02:46:52]">&lt;OriansJ`&gt;</a></span><span class="message">fossy: the future will include things you don't know about yet</span></div><div class="line" id="024717"><span class="nick" style="color:#389600"><a href="#024717" label="[02:47:17]">&lt;OriansJ`&gt;</a></span><span class="message">So plan for being wrong by default, it makes getting into a happy state easier</span></div><div class="line" id="024735"><span class="nick" style="color:#389600"><a href="#024735" label="[02:47:35]">&lt;OriansJ`&gt;</a></span><span class="message">Keep things simple and clean</span></div><div class="line" id="024809"><span class="nick" style="color:#6b8072"><a href="#024809" label="[02:48:09]">&lt;fossy&gt;</a></span><span class="message">Gosh damn</span></div><div class="line" id="024813"><span class="nick" style="color:#6b8072"><a href="#024813" label="[02:48:13]">&lt;fossy&gt;</a></span><span class="message">I am so dumb</span></div><div class="line" id="024819"><span class="nick" style="color:#6b8072"><a href="#024819" label="[02:48:19]">&lt;fossy&gt;</a></span><span class="message">Why did I put so many fix commits in</span></div><div class="line" id="024834"><span class="nick" style="color:#6b8072"><a href="#024834" label="[02:48:34]">&lt;fossy&gt;</a></span><span class="message">why are my commits so undescriptive</span></div><div class="line" id="024842"><span class="nick" style="color:#6b8072"><a href="#024842" label="[02:48:42]">&lt;fossy&gt;</a></span><span class="message">&gt;:(</span></div><div class="line" id="024910"><span class="nick" style="color:#389600"><a href="#024910" label="[02:49:10]">&lt;OriansJ`&gt;</a></span><span class="message">fossy: good; now use it to do better</span></div><div class="line" id="025301"><span class="nick" style="color:#389600"><a href="#025301" label="[02:53:01]">&lt;OriansJ`&gt;</a></span><span class="message">change cd to recieve the full token list and move the requires into cd; then you can have all of your builtins as just a list.</span></div><div class="line" id="025427"><span class="nick" style="color:#389600"><a href="#025427" label="[02:54:27]">&lt;OriansJ`&gt;</a></span><span class="message">then your struct can be upgraded to this: <a rel="nofollow" href="https://paste.debian.net/1132957/">https://paste.debian.net/1132957/</a> </span></div><div class="line" id="025516"><span class="nick" style="color:#389600"><a href="#025516" label="[02:55:16]">&lt;OriansJ`&gt;</a></span><span class="message">You'll need to copy M2-Planet/gcc_req.h to get gcc to like it</span></div><div class="line" id="025612"><span class="nick" style="color:#389600"><a href="#025612" label="[02:56:12]">&lt;OriansJ`&gt;</a></span><span class="message">Then you can create an init function for the builtins to allow easy expansion</span></div><div class="line" id="030147"><span class="nick" style="color:#389600"><a href="#030147" label="[03:01:47]">&lt;OriansJ`&gt;</a></span><span class="message">fossy: also give flycheck-mode in emacs a chance</span></div><div class="line" id="030301"><span class="nick" style="color:#389600"><a href="#030301" label="[03:03:01]">&lt;OriansJ`&gt;</a></span><span class="message">The only thing that it says you can ignore is the scope reduction of variables (it is good advice for GCC but doesn't quite work for M2-Planet)</span></div><div class="line" id="030647"><span class="nick" style="color:#80b1d3"><a href="#030647" label="[03:06:47]">*</a></span><span class="message">fossy does not use emacs</span></div><div class="line" id="030747"><span class="nick" style="color:#389600"><a href="#030747" label="[03:07:47]">&lt;OriansJ`&gt;</a></span><span class="message">also you don't need to copy strings, just copy the pointer</span></div><div class="line" id="030826"><span class="nick" style="color:#389600"><a href="#030826" label="[03:08:26]">&lt;OriansJ`&gt;</a></span><span class="message">for example in variable_substitute_ifset</span></div><div class="line" id="030938"><span class="nick" style="color:#389600"><a href="#030938" label="[03:09:38]">&lt;OriansJ`&gt;</a></span><span class="message">you could have 2 char* (name and alternate); walk the string until : and set to 0; then have the alternate point to after the -</span></div><div class="line" id="031104"><span class="nick" style="color:#6b8072"><a href="#031104" label="[03:11:04]">&lt;fossy&gt;</a></span><span class="message">ok</span></div><div class="line" id="031122"><span class="nick" style="color:#6b8072"><a href="#031122" label="[03:11:22]">&lt;fossy&gt;</a></span><span class="message">please if you find more things keep going even if I dont respond</span></div><div class="line" id="031132"><span class="nick" style="color:#6b8072"><a href="#031132" label="[03:11:32]">&lt;fossy&gt;</a></span><span class="message">kaem.c merge history DONE</span></div><div class="line" id="031141"><span class="nick" style="color:#6b8072"><a href="#031141" label="[03:11:41]">&lt;fossy&gt;</a></span><span class="message">with correct blaming and the lot</span></div><div class="line" id="031623"><span class="nick" style="color:#6b8072"><a href="#031623" label="[03:16:23]">&lt;fossy&gt;</a></span><span class="message">OriansJ`: thank you for putting up with my not excellent code ^-^</span></div><div class="line" id="032837"><span class="nick" style="color:#2e2a4a"><a href="#032837" label="[03:28:37]">&lt;dddddd&gt;</a></span><span class="message">I'm always a bit confused about what libc means in M2-Planet context. Is it 'test/common_*/libc-core.M1'? What about 'test/common_*/functions/*'? If that's the case, why is the libc in a testing dir? And 'functions/' on the root dir? If all this is historical, what would be a sensible way of organization?</span></div><div class="line" id="032957"><span class="nick" style="color:#6b8072"><a href="#032957" label="[03:29:57]">&lt;fossy&gt;</a></span><span class="message">^^^ IMHO test/common* should be moved</span></div><div class="line" id="033003"><span class="nick" style="color:#6b8072"><a href="#033003" label="[03:30:03]">&lt;fossy&gt;</a></span><span class="message">Its not testing</span></div><div class="line" id="033024"><span class="nick" style="color:#6b8072"><a href="#033024" label="[03:30:24]">&lt;fossy&gt;</a></span><span class="message">dddddd: you too thanks for putting up with my not super excellent code ^-^</span></div><div class="line" id="033035"><span class="nick" style="color:#6b8072"><a href="#033035" label="[03:30:35]">&lt;fossy&gt;</a></span><span class="message">not good even sometimes</span></div><div class="line" id="033043"><span class="nick" style="color:#6b8072"><a href="#033043" label="[03:30:43]">&lt;fossy&gt;</a></span><span class="message">or sometimes bad</span></div><div class="line" id="033222"><span class="nick" style="color:#2e2a4a"><a href="#033222" label="[03:32:22]">&lt;dddddd&gt;</a></span><span class="message">fossy, no problem... my pleasure! I saw it as WIP code and, as such, is not always the best. We all learn from each other, thank you!</span></div><div class="line" id="033538"><span class="nick" style="color:#389600"><a href="#033538" label="[03:35:38]">&lt;OriansJ`&gt;</a></span><span class="message">dddddd: well technically M2-Planet has no libc; because it doesn't need it. The libc-core.M1 is just to setup the stack for main and call main and be done. ARMv7l includes division and modulo because it lacks the instructions required for a proper host of M2-Planet</span></div><div class="line" id="033623"><span class="nick" style="color:#389600"><a href="#033623" label="[03:36:23]">&lt;OriansJ`&gt;</a></span><span class="message">but you are correct, putting them under test might not have been the wisest of ideas</span></div><div class="line" id="033718"><span class="nick" style="color:#389600"><a href="#033718" label="[03:37:18]">&lt;OriansJ`&gt;</a></span><span class="message">perhaps it is time for M2-Planet to create a folder called libc and move functions into it</span></div><div class="line" id="033843"><span class="nick" style="color:#389600"><a href="#033843" label="[03:38:43]">&lt;OriansJ`&gt;</a></span><span class="message">probably with an explaination file expressing that M2-Planet doesn't actually have a libc but rather a set of commonly useful functions</span></div><div class="line" id="034012"><span class="nick" style="color:#2e2a4a"><a href="#034012" label="[03:40:12]">&lt;dddddd&gt;</a></span><span class="message">Sound like a plan. I can move out of testing all those files and adapt the scripts. I'll probably ask about some details about what of 'functions/' should be moved/copied, if any.</span></div><div class="line" id="034020"><span class="nick" style="color:#6b8072"><a href="#034020" label="[03:40:20]">&lt;fossy&gt;</a></span><span class="message">OriansJ`: also, maybe create symlinks in test for backwards compatibility?</span></div><div class="line" id="034032"><span class="nick" style="color:#6b8072"><a href="#034032" label="[03:40:32]">&lt;fossy&gt;</a></span><span class="message">because a TON of our scripts use test/</span></div><div class="line" id="034043"><span class="nick" style="color:#6b8072"><a href="#034043" label="[03:40:43]">&lt;fossy&gt;</a></span><span class="message">hm</span></div><div class="line" id="034049"><span class="nick" style="color:#6b8072"><a href="#034049" label="[03:40:49]">&lt;fossy&gt;</a></span><span class="message">actually scratch that</span></div><div class="line" id="034101"><span class="nick" style="color:#6b8072"><a href="#034101" label="[03:41:01]">&lt;fossy&gt;</a></span><span class="message">submodules solve that</span></div><div class="line" id="034121"><span class="nick" style="color:#2e2a4a"><a href="#034121" label="[03:41:21]">&lt;dddddd&gt;</a></span><span class="message">If M2-Planet is the only user, I guess we don't need that. What's using M2-Planet files directly?</span></div><div class="line" id="034142"><span class="nick" style="color:#6b8072"><a href="#034142" label="[03:41:42]">&lt;fossy&gt;</a></span><span class="message">mescc tools seed certinaly s</span></div><div class="line" id="034142"><span class="nick" style="color:#2e2a4a"><a href="#034142" label="[03:41:42]">&lt;dddddd&gt;</a></span><span class="message">But that a good point anyway.</span></div><div class="line" id="034144"><span class="nick" style="color:#6b8072"><a href="#034144" label="[03:41:44]">&lt;fossy&gt;</a></span><span class="message">is</span></div><div class="line" id="034219"><span class="nick" style="color:#6b8072"><a href="#034219" label="[03:42:19]">&lt;fossy&gt;</a></span><span class="message">and many other m2 planet programs use them, but they may be mirrored in the repositoey</span></div><div class="line" id="034231"><span class="nick" style="color:#6b8072"><a href="#034231" label="[03:42:31]">&lt;fossy&gt;</a></span><span class="message">Repository</span></div><div class="line" id="034244"><span class="nick" style="color:#389600"><a href="#034244" label="[03:42:44]">&lt;OriansJ`&gt;</a></span><span class="message">dddddd: all of the functions will need but we will need seperate folders for the different architectures inside of the libc folder</span></div><div class="line" id="034310"><span class="nick" style="color:#389600"><a href="#034310" label="[03:43:10]">&lt;OriansJ`&gt;</a></span><span class="message">we probably could keep the structure and use sed to fix all of the references</span></div><div class="line" id="034331"><span class="nick" style="color:#2e2a4a"><a href="#034331" label="[03:43:31]">&lt;dddddd&gt;</a></span><span class="message">No doubt OriansJ`, about dirs per arch, with non-arch files on their own.</span></div><div class="line" id="034350"><span class="nick" style="color:#389600"><a href="#034350" label="[03:43:50]">&lt;OriansJ`&gt;</a></span><span class="message">we can fix mescc-tools-seed when we update its submodules</span></div><div class="line" id="034423"><span class="nick" style="color:#2e2a4a"><a href="#034423" label="[03:44:23]">&lt;dddddd&gt;</a></span><span class="message">So, not being really a &quot;libc&quot;, should we call the dir just &quot;lib&quot; (or something else)?</span></div><div class="line" id="034455"><span class="nick" style="color:#389600"><a href="#034455" label="[03:44:55]">&lt;OriansJ`&gt;</a></span><span class="message">probably put the common functions just at the root; unless you think a folder called common would work better</span></div><div class="line" id="034526"><span class="nick" style="color:#6b8072"><a href="#034526" label="[03:45:26]">&lt;fossy&gt;</a></span><span class="message">im for at the root</span></div><div class="line" id="034537"><span class="nick" style="color:#389600"><a href="#034537" label="[03:45:37]">&lt;OriansJ`&gt;</a></span><span class="message">lib is fine; library if one wanted to be verbose</span></div><div class="line" id="034609"><span class="nick" style="color:#6b8072"><a href="#034609" label="[03:46:09]">&lt;fossy&gt;</a></span><span class="message">lib is more standard, tbh</span></div><div class="line" id="034616"><span class="nick" style="color:#389600"><a href="#034616" label="[03:46:16]">&lt;OriansJ`&gt;</a></span><span class="message">very true</span></div><div class="line" id="034659"><span class="nick" style="color:#2e2a4a"><a href="#034659" label="[03:46:59]">&lt;dddddd&gt;</a></span><span class="message">This and your recently test realocation shapes a beautiful future release, I think (:</span></div><div class="line" id="034722"><span class="nick" style="color:#389600"><a href="#034722" label="[03:47:22]">&lt;OriansJ`&gt;</a></span><span class="message">indeed</span></div><div class="line" id="034753"><span class="nick" style="color:#2e2a4a"><a href="#034753" label="[03:47:53]">&lt;dddddd&gt;</a></span><span class="message">OK, I'll use 'lib'.</span></div><div class="line" id="034831"><span class="nick" style="color:#2e2a4a"><a href="#034831" label="[03:48:31]">&lt;dddddd&gt;</a></span><span class="message">I'll think about root v. subdir for the common/non-arch files.</span></div><div class="line" id="034858"><span class="nick" style="color:#6b8072"><a href="#034858" label="[03:48:58]">&lt;fossy&gt;</a></span><span class="message">OriansJ`: once I fix kaem and it is in a much nicer state in the new repo how do you feel about a v1.0 for kaem?</span></div><div class="line" id="035006"><span class="nick" style="color:#389600"><a href="#035006" label="[03:50:06]">&lt;OriansJ`&gt;</a></span><span class="message">I think fossy it'll be ready for v1.0 when it can be used to build make</span></div><div class="line" id="035015"><span class="nick" style="color:#6b8072"><a href="#035015" label="[03:50:15]">&lt;fossy&gt;</a></span><span class="message">fair enough</span></div><div class="line" id="035032"><span class="nick" style="color:#6b8072"><a href="#035032" label="[03:50:32]">&lt;fossy&gt;</a></span><span class="message">I think it does deserve some kind of release though</span></div><div class="line" id="035032"><span class="nick" style="color:#389600"><a href="#035032" label="[03:50:32]">&lt;OriansJ`&gt;</a></span><span class="message">but yes, it is certainly worthy of a release</span></div><div class="line" id="035039"><span class="nick" style="color:#6b8072"><a href="#035039" label="[03:50:39]">&lt;fossy&gt;</a></span><span class="message">with a wide variety of new featurea</span></div><div class="line" id="035214"><span class="nick" style="color:#389600"><a href="#035214" label="[03:52:14]">&lt;OriansJ`&gt;</a></span><span class="message">how does kaem v0.8.0 sound to you fossy?</span></div><div class="line" id="035332"><span class="nick" style="color:#389600"><a href="#035332" label="[03:53:32]">&lt;OriansJ`&gt;</a></span><span class="message">as its version was synced with mescc-tools</span></div><div class="line" id="035413"><span class="nick" style="color:#389600"><a href="#035413" label="[03:54:13]">&lt;OriansJ`&gt;</a></span><span class="message">and mescc-tools sync'd its release with support for new architectures or breaking changes</span></div><div class="line" id="035623"><span class="nick" style="color:#6b8072"><a href="#035623" label="[03:56:23]">&lt;fossy&gt;</a></span><span class="message">sure</span></div><div class="line" id="035656"><span class="nick" style="color:#6b8072"><a href="#035656" label="[03:56:56]">&lt;fossy&gt;</a></span><span class="message">how do you think about VERBOSE outputting post variable expansion?</span></div><div class="line" id="035717"><span class="nick" style="color:#6b8072"><a href="#035717" label="[03:57:17]">&lt;fossy&gt;</a></span><span class="message">like normal shells do</span></div><div class="line" id="040831"><span class="nick" style="color:#389600"><a href="#040831" label="[04:08:31]">&lt;OriansJ`&gt;</a></span><span class="message">I think that is a good idea</span></div><div class="line" id="042129"><span class="nick" style="color:#6b8072"><a href="#042129" label="[04:21:29]">&lt;fossy&gt;</a></span><span class="message">kaem repo coming along</span></div><div class="line" id="042205"><span class="nick" style="color:#6b8072"><a href="#042205" label="[04:22:05]">&lt;fossy&gt;</a></span><span class="message"> <a rel="nofollow" href="https://ttm.sh/EAm.txt">https://ttm.sh/EAm.txt</a> </span></div><div class="line" id="042210"><span class="nick" style="color:#6b8072"><a href="#042210" label="[04:22:10]">&lt;fossy&gt;</a></span><span class="message">^ that is the git log right now</span></div><div class="line" id="042227"><span class="nick" style="color:#6b8072"><a href="#042227" label="[04:22:27]">&lt;fossy&gt;</a></span><span class="message">diff is the same between mescc-tools master and kaem master</span></div><div class="line" id="042258"><span class="nick" style="color:#6b8072"><a href="#042258" label="[04:22:58]">&lt;fossy&gt;</a></span><span class="message">next up: testing each commit is buildable, and if not, fixing that, and making commit descriptions better</span></div><div class="line" id="042309"><span class="nick" style="color:#6b8072"><a href="#042309" label="[04:23:09]">&lt;fossy&gt;</a></span><span class="message">stage 3: code fixing and rebasinng</span></div><div class="line" id="042319"><span class="nick" style="color:#6b8072"><a href="#042319" label="[04:23:19]">&lt;fossy&gt;</a></span><span class="message">hmm, OriansJ` dddddd which order would be better to do those in?</span></div><div class="line" id="042333"><span class="nick" style="color:#6b8072"><a href="#042333" label="[04:23:33]">&lt;fossy&gt;</a></span><span class="message">just trying to figure out the best way to approach this</span></div><div class="line" id="043302"><span class="nick" style="color:#2e2a4a"><a href="#043302" label="[04:33:02]">&lt;dddddd&gt;</a></span><span class="message">fossy, for those 7 commits, I guess I'd make new commits from a squash, adding descriptions and checking the build as I go (git stash is your friend here). Like your final &quot;rewrite&quot; step for PR, I think.</span></div><div class="line" id="043341"><span class="nick" style="color:#6b8072"><a href="#043341" label="[04:33:41]">&lt;fossy&gt;</a></span><span class="message">Right</span></div><div class="line" id="043357"><span class="nick" style="color:#2e2a4a"><a href="#043357" label="[04:33:57]">&lt;dddddd&gt;</a></span><span class="message">Not sure it's a good idea to touch earlier commits.</span></div><div class="line" id="044923"><span class="nick" style="color:#2e2a4a"><a href="#044923" label="[04:49:23]">&lt;dddddd&gt;</a></span><span class="message">fossy, what's the plan for OriansJ` fixes? Are those in the seven commits already?</span></div><div class="line" id="045922"><span class="nick" style="color:#6b8072"><a href="#045922" label="[04:59:22]">&lt;fossy&gt;</a></span><span class="message">Yes, they are</span></div><div class="line" id="045933"><span class="nick" style="color:#6b8072"><a href="#045933" label="[04:59:33]">&lt;fossy&gt;</a></span><span class="message">dddddd: I plan to touch my envar commits.</span></div><div class="line" id="050017"><span class="nick" style="color:#6b8072"><a href="#050017" label="[05:00:17]">&lt;fossy&gt;</a></span><span class="message">Everything earlier I have verified is A-OK</span></div><div class="line" id="071441"><span class="nick" style="color:#6b8072"><a href="#071441" label="[07:14:41]">&lt;fossy&gt;</a></span><span class="message">dddddd, OriansJ`: git log with lots of descriptions ttps://ttm.sh/EA6.txt</span></div><div class="line" id="073024"><span class="nick" style="color:#6b8072"><a href="#073024" label="[07:30:24]">&lt;fossy&gt;</a></span><span class="message">now OriansJ` would you prefer to be to force push the rewritten history before i do all the code fixes</span></div><div class="line" id="073032"><span class="nick" style="color:#6b8072"><a href="#073032" label="[07:30:32]">&lt;fossy&gt;</a></span><span class="message">or would you prefer just one force push</span></div><div class="line" id="073048"><span class="nick" style="color:#6b8072"><a href="#073048" label="[07:30:48]">&lt;fossy&gt;</a></span><span class="message"> <a rel="nofollow" href="https://ttm.sh/EAx.txt">https://ttm.sh/EAx.txt</a>  &lt;-- history rewrite DONE unless anyone has any further comments</span></div><div class="line" id="103345"><span class="nick" style="color:#6b8072"><a href="#103345" label="[10:33:45]">&lt;fossy&gt;</a></span><span class="message">Whats the general consensus with bugs found from fuzzing? Should I add those into a test to prevent regressions or not?</span></div><div class="line" id="104423"><span class="nick" style="color:#6d2462"><a href="#104423" label="[10:44:23]">&lt;janneke&gt;</a></span><span class="message">fossy: i would say &quot;it depends&quot;</span></div><div class="line" id="105153"><span class="nick" style="color:#6b8072"><a href="#105153" label="[10:51:53]">&lt;fossy&gt;</a></span><span class="message">oh hey janneke havent seen you for a while</span></div><div class="line" id="105226"><span class="nick" style="color:#6d2462"><a href="#105226" label="[10:52:26]">&lt;janneke&gt;</a></span><span class="message">hi fossy!</span></div><div class="line" id="140320"><span class="nick" style="color:#389600"><a href="#140320" label="[14:03:20]">&lt;OriansJ`&gt;</a></span><span class="message">fossy: I honestly don't know if there is a consensus on with bugs found from fuzzing beyond, fix the bug and add asserts (require in our case) to prevent it from occuring. As tests are more to ensure the expected behavior occurs</span></div><div class="line" id="141021"><span class="nick" style="color:#389600"><a href="#141021" label="[14:10:21]">&lt;OriansJ`&gt;</a></span><span class="message">so janneke what fun have you been having?</span></div><div class="line" id="141133"><span class="nick" style="color:#6d2462"><a href="#141133" label="[14:11:33]">&lt;janneke&gt;</a></span><span class="message">OriansJ`: i'm having fun with the Hurd atm</span></div><div class="line" id="141201"><span class="nick" style="color:#6d2462"><a href="#141201" label="[14:12:01]">&lt;janneke&gt;</a></span><span class="message">and the new python dependency in the bootstrap</span></div><div class="line" id="141523"><span class="nick" style="color:#6d2462"><a href="#141523" label="[14:15:23]">&lt;janneke&gt;</a></span><span class="message">and, of course, getting the scheme-only bootstrap in core-updates to be really OK over other architectures</span></div><div class="line" id="141631"><span class="nick" style="color:#389600"><a href="#141631" label="[14:16:31]">&lt;OriansJ`&gt;</a></span><span class="message">why add python as a dependency in the bootstrap?</span></div><div class="line" id="141735"><span class="nick" style="color:#6d2462"><a href="#141735" label="[14:17:35]">&lt;janneke&gt;</a></span><span class="message">*please* -- please, please, pretty-please -- ask that the glibc folks</span></div><div class="line" id="141811"><span class="nick" style="color:#6d2462"><a href="#141811" label="[14:18:11]">&lt;janneke&gt;</a></span><span class="message">or better, rewrite their python scripts in (guile) scheme ...</span></div><div class="line" id="141918"><span class="nick" style="color:#389600"><a href="#141918" label="[14:19:18]">&lt;OriansJ`&gt;</a></span><span class="message">which version of glibc?</span></div><div class="line" id="142022"><span class="nick" style="color:#6d2462"><a href="#142022" label="[14:20:22]">&lt;janneke&gt;</a></span><span class="message">2.29 i think</span></div><div class="line" id="142036"><span class="nick" style="color:#6d2462"><a href="#142036" label="[14:20:36]">&lt;janneke&gt;</a></span><span class="message">i haven't dared to really look into this yet</span></div><div class="line" id="142053"><span class="nick" style="color:#6d2462"><a href="#142053" label="[14:20:53]">&lt;janneke&gt;</a></span><span class="message">it didn't really &quot;hurd&quot; until now</span></div><div class="line" id="142055"><span class="nick" style="color:#6d2462"><a href="#142055" label="[14:20:55]">&lt;janneke&gt;</a></span><span class="message">;)</span></div><div class="line" id="142230"><span class="nick" style="color:#389600"><a href="#142230" label="[14:22:30]">&lt;OriansJ`&gt;</a></span><span class="message">So nothing needed before we have GCC 4.7.4</span></div><div class="line" id="142435"><span class="nick" style="color:#234e69"><a href="#142435" label="[14:24:35]">&lt;OriansJ``&gt;</a></span><span class="message">but something we will need to address for the Hurd port</span></div><div class="line" id="142608"><span class="nick" style="color:#234e69"><a href="#142608" label="[14:26:08]">&lt;OriansJ``&gt;</a></span><span class="message">is micro-python an option for MesCC to compile?</span></div><div class="line" id="142709"><span class="nick">***</span><span class="message notice">OriansJ`` is now known as OriansJ</span></div><div class="line" id="143130"><span class="nick" style="color:#6d2462"><a href="#143130" label="[14:31:30]">&lt;janneke&gt;</a></span><span class="message">indeed, it's waay off our current radar</span></div><div class="line" id="143153"><span class="nick" style="color:#6d2462"><a href="#143153" label="[14:31:53]">&lt;janneke&gt;</a></span><span class="message">which means that raising awareness now can help</span></div><div class="line" id="143235"><span class="nick" style="color:#6c3d55"><a href="#143235" label="[14:32:35]">&lt;OriansJ&gt;</a></span><span class="message">janneke: or changing strategy a bit</span></div><div class="line" id="143305"><span class="nick" style="color:#6d2462"><a href="#143305" label="[14:33:05]">&lt;janneke&gt;</a></span><span class="message">ah, yes -- sure</span></div><div class="line" id="143318"><span class="nick" style="color:#6d2462"><a href="#143318" label="[14:33:18]">&lt;janneke&gt;</a></span><span class="message">python-on-guile starts to look real nice too</span></div><div class="line" id="143356"><span class="nick" style="color:#6c3d55"><a href="#143356" label="[14:33:56]">&lt;OriansJ&gt;</a></span><span class="message">well one needs GCC to build guile</span></div><div class="line" id="143550"><span class="nick" style="color:#6c3d55"><a href="#143550" label="[14:35:50]">&lt;OriansJ&gt;</a></span><span class="message">unless MesCC expands its functionality to be able to compile guile and GCC directly</span></div><div class="line" id="150206"><span class="nick" style="color:#6c3d55"><a href="#150206" label="[15:02:06]">&lt;OriansJ&gt;</a></span><span class="message">or janneke we could move all the steps prior to GCC 4.7.4 onto a seperate POSIX so that we don't have to deal with those platform level problems</span></div><div class="line" id="150319"><span class="nick" style="color:#6c3d55"><a href="#150319" label="[15:03:19]">&lt;OriansJ&gt;</a></span><span class="message">or expand mes-m2 to also run python-on-guile</span></div><div class="line" id="150526"><span class="nick" style="color:#6c3d55"><a href="#150526" label="[15:05:26]">&lt;OriansJ&gt;</a></span><span class="message">which would make mes-m2 the most important program in the entire bootstrap in a big way</span></div><div class="line" id="150639"><span class="nick" style="color:#6c3d55"><a href="#150639" label="[15:06:39]">&lt;OriansJ&gt;</a></span><span class="message">as it would become the guix's permanent bootstrap binary</span></div><div class="line" id="150752"><span class="nick" style="color:#6c3d55"><a href="#150752" label="[15:07:52]">&lt;OriansJ&gt;</a></span><span class="message">as it would have to support most of guile2.x's functionality; which is a tall order.</span></div><div class="line" id="150842"><span class="nick" style="color:#6c3d55"><a href="#150842" label="[15:08:42]">&lt;OriansJ&gt;</a></span><span class="message">I guess the question becomes, how ambitious do we feel?</span></div><div class="line" id="151109"><span class="nick" style="color:#6d2462"><a href="#151109" label="[15:11:09]">&lt;janneke&gt;</a></span><span class="message">hehe, asking that question is answering it :)</span></div><div class="line" id="152226"><span class="nick" style="color:#6c3d55"><a href="#152226" label="[15:22:26]">&lt;OriansJ&gt;</a></span><span class="message">So stop me if I get this list wrong but we are planning to:</span></div><div class="line" id="152246"><span class="nick" style="color:#6c3d55"><a href="#152246" label="[15:22:46]">&lt;OriansJ&gt;</a></span><span class="message">1) bootstrap every hardware platform in existence and will ever exist</span></div><div class="line" id="152306"><span class="nick" style="color:#6c3d55"><a href="#152306" label="[15:23:06]">&lt;OriansJ&gt;</a></span><span class="message">2) Do so with only the handful of people here who are able to put in a few hours at a time</span></div><div class="line" id="152350"><span class="nick" style="color:#6c3d55"><a href="#152350" label="[15:23:50]">&lt;OriansJ&gt;</a></span><span class="message">3) write a brand new POSIX buildable via M2-Planet that works on all of the above</span></div><div class="line" id="152408"><span class="nick" style="color:#6c3d55"><a href="#152408" label="[15:24:08]">&lt;OriansJ&gt;</a></span><span class="message">4) do custom hardware with the above</span></div><div class="line" id="152510"><span class="nick" style="color:#6c3d55"><a href="#152510" label="[15:25:10]">&lt;OriansJ&gt;</a></span><span class="message">5) port the work onto every operation system we can imagine</span></div><div class="line" id="152538"><span class="nick" style="color:#6c3d55"><a href="#152538" label="[15:25:38]">&lt;OriansJ&gt;</a></span><span class="message">6) solve a dozen or more open problems in computer science while doing the above</span></div><div class="line" id="152608"><span class="nick" style="color:#6c3d55"><a href="#152608" label="[15:26:08]">&lt;OriansJ&gt;</a></span><span class="message">7) get it done within the next couple of years</span></div><div class="line" id="152718"><span class="nick" style="color:#6c3d55"><a href="#152718" label="[15:27:18]">&lt;OriansJ&gt;</a></span><span class="message">somehow I feel ambitious is just too modest of a word to describe it</span></div><div class="line" id="152811"><span class="nick" style="color:#6c3d55"><a href="#152811" label="[15:28:11]">&lt;OriansJ&gt;</a></span><span class="message">oh and 8) bootstrap all software in Gnu and the free software world</span></div><div class="line" id="152905"><span class="nick" style="color:#6c3d55"><a href="#152905" label="[15:29:05]">&lt;OriansJ&gt;</a></span><span class="message">Which will include bootstrapping Guile, Haskell, SML and more than a dozen other programing languages along the way</span></div><div class="line" id="153054"><span class="nick" style="color:#6c3d55"><a href="#153054" label="[15:30:54]">&lt;OriansJ&gt;</a></span><span class="message">I've got dddddd helping me on Slow-utils and M2-Planet, fossy helping me on kaem and janneke helping me on MesCC and guix. We need more help</span></div><div class="line" id="153324"><span class="nick" style="color:#6c3d55"><a href="#153324" label="[15:33:24]">&lt;OriansJ&gt;</a></span><span class="message">possibly bauen1 to help with a POSIX, markjenkinsznc is helping me with the stage0 bits</span></div><div class="line" id="153432"><span class="nick" style="color:#6c3d55"><a href="#153432" label="[15:34:32]">&lt;OriansJ&gt;</a></span><span class="message">I have mescc-tools/cc_*/M2-Planet ports to do for RISC-V, PowerPC, z80 and 6502</span></div><div class="line" id="153622"><span class="nick" style="color:#6c3d55"><a href="#153622" label="[15:36:22]">&lt;OriansJ&gt;</a></span><span class="message">Oh and I have to add in optimizations into M2-Planet to enable it to fit on 16bit targets...</span></div><div class="line" id="154049"><span class="nick" style="color:#6c3d55"><a href="#154049" label="[15:40:49]">&lt;OriansJ&gt;</a></span><span class="message">Which means I will have to reengineer M2-Planet to enable that to be done in 16bits with a seperate programs to act as specializers</span></div><div class="line" id="154621"><span class="nick" style="color:#6c3d55"><a href="#154621" label="[15:46:21]">&lt;OriansJ&gt;</a></span><span class="message">janneke: perhaps we should approach this in a more conservative way.</span></div><div class="line" id="154725"><span class="nick" style="color:#6c3d55"><a href="#154725" label="[15:47:25]">&lt;OriansJ&gt;</a></span><span class="message">janneke, dddddd, fossy, markjenkinsznc and bauen1: tell me if you are onboard with the following next tasks.</span></div><div class="line" id="154815"><span class="nick" style="color:#6c3d55"><a href="#154815" label="[15:48:15]">&lt;OriansJ&gt;</a></span><span class="message">janneke: first goal reduce guix down to just guile; then you are to work on the scheme side of mes-m2 (if the C side needs features or changes I'll deal with them)</span></div><div class="line" id="154902"><span class="nick" style="color:#6c3d55"><a href="#154902" label="[15:49:02]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: Finish slow-utils so that janneke can eliminate all binaries except guile from the guix bootstrap</span></div><div class="line" id="154958"><span class="nick" style="color:#6c3d55"><a href="#154958" label="[15:49:58]">&lt;OriansJ&gt;</a></span><span class="message">fossy: keep progressing kaem until it is able to build make and then we can discuss your next goal (unless you wish to help on another piece)</span></div><div class="line" id="155126"><span class="nick" style="color:#6c3d55"><a href="#155126" label="[15:51:26]">&lt;OriansJ&gt;</a></span><span class="message">markjenkinsznc: once the stage0 disassembler.py is ready, I'll pull the extra null padding from the stage0 binaries and we can start figuring out how to get cc_* to fit in 16bits</span></div><div class="line" id="155413"><span class="nick" style="color:#6c3d55"><a href="#155413" label="[15:54:13]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: if you are still up for it, get your POSIX able to run the steps in mescc-tools-seed and then make your POSIX buildable via a single GCC command. I'll help with the M2-Planet conversion after that.</span></div><div class="line" id="155630"><span class="nick" style="color:#6c3d55"><a href="#155630" label="[15:56:30]">&lt;OriansJ&gt;</a></span><span class="message">questions, comments or things I stupidly missed?</span></div><div class="line" id="155804"><span class="nick" style="color:#6d2462"><a href="#155804" label="[15:58:04]">&lt;janneke&gt;</a></span><span class="message">OriansJ: yes, i think this is right</span></div><div class="line" id="155826"><span class="nick" style="color:#6d2462"><a href="#155826" label="[15:58:26]">&lt;janneke&gt;</a></span><span class="message">i'm still working on finishing the scheme-only bootstrap</span></div><div class="line" id="155926"><span class="nick" style="color:#6d2462"><a href="#155926" label="[15:59:26]">&lt;janneke&gt;</a></span><span class="message">next up is removing mescc-tools and mes from the guix bootstrap by using the mes-m2-&gt;mes merger that i prototyped last october; where i branched mes-m2 just before slow-lisp was added</span></div><div class="line" id="155957"><span class="nick" style="color:#6d2462"><a href="#155957" label="[15:59:57]">&lt;janneke&gt;</a></span><span class="message">when that is done, focus will shift to the scheme side of things</span></div><div class="line" id="155959"><span class="nick" style="color:#6c3d55"><a href="#155959" label="[15:59:59]">&lt;OriansJ&gt;</a></span><span class="message">janneke: you will not need that step</span></div><div class="line" id="160023"><span class="nick" style="color:#6c3d55"><a href="#160023" label="[16:00:23]">&lt;OriansJ&gt;</a></span><span class="message">MesCC can run just fine on guile</span></div><div class="line" id="160028"><span class="nick" style="color:#6d2462"><a href="#160028" label="[16:00:28]">&lt;janneke&gt;</a></span><span class="message">and also to seeing what to do with your mes-m2 work since october (that is really giving me headaches :-) :-)</span></div><div class="line" id="160106"><span class="nick" style="color:#6c3d55"><a href="#160106" label="[16:01:06]">&lt;OriansJ&gt;</a></span><span class="message">mes-m2 is going to grow into a full guile2.x drop in replacement</span></div><div class="line" id="160132"><span class="nick" style="color:#6c3d55"><a href="#160132" label="[16:01:32]">&lt;OriansJ&gt;</a></span><span class="message">So getting guix down to just guile will make mes-m2 a single step replacement job</span></div><div class="line" id="160310"><span class="nick" style="color:#6d2462"><a href="#160310" label="[16:03:10]">&lt;janneke&gt;</a></span><span class="message">i understand, but i like to stay on the current stepwise approach for the guix side</span></div><div class="line" id="160345"><span class="nick" style="color:#6c3d55"><a href="#160345" label="[16:03:45]">&lt;OriansJ&gt;</a></span><span class="message">guile needs to be properly bootstrapped and mes.c just can't do it</span></div><div class="line" id="160412"><span class="nick" style="color:#6c3d55"><a href="#160412" label="[16:04:12]">&lt;OriansJ&gt;</a></span><span class="message">mes-m2 is going to have to be a much larger scheme than originally planned to solve the guile bootstrap problem</span></div><div class="line" id="160416"><span class="nick" style="color:#6d2462"><a href="#160416" label="[16:04:16]">&lt;janneke&gt;</a></span><span class="message">indeed -- but we only use guile for the builder and for running gash</span></div><div class="line" id="160442"><span class="nick" style="color:#6c3d55"><a href="#160442" label="[16:04:42]">&lt;OriansJ&gt;</a></span><span class="message">yes I know</span></div><div class="line" id="160443"><span class="nick" style="color:#6d2462"><a href="#160443" label="[16:04:43]">&lt;janneke&gt;</a></span><span class="message">as soon as gash runs on mes, guile is only used for the builder</span></div><div class="line" id="160458"><span class="nick" style="color:#6d2462"><a href="#160458" label="[16:04:58]">&lt;janneke&gt;</a></span><span class="message">that means that fossy or the nix bootstrap do not have to introduce guile</span></div><div class="line" id="160540"><span class="nick" style="color:#6d2462"><a href="#160540" label="[16:05:40]">&lt;janneke&gt;</a></span><span class="message">but...things may look different next week, of course :)</span></div><div class="line" id="160542"><span class="nick" style="color:#6c3d55"><a href="#160542" label="[16:05:42]">&lt;OriansJ&gt;</a></span><span class="message">So you want a shorter time frame for mes-m2 to be able to run MesCC and gash?</span></div><div class="line" id="160643"><span class="nick" style="color:#6c3d55"><a href="#160643" label="[16:06:43]">&lt;OriansJ&gt;</a></span><span class="message">ok</span></div><div class="line" id="160649"><span class="nick" style="color:#6d2462"><a href="#160649" label="[16:06:49]">&lt;janneke&gt;</a></span><span class="message">shorter time frame?</span></div><div class="line" id="160718"><span class="nick" style="color:#6c3d55"><a href="#160718" label="[16:07:18]">&lt;OriansJ&gt;</a></span><span class="message">The only big stopping issue for mes-m2 to run MesCC is support for modules</span></div><div class="line" id="160732"><span class="nick" style="color:#6c3d55"><a href="#160732" label="[16:07:32]">&lt;OriansJ&gt;</a></span><span class="message">once that is done, the rest is rather trivial to do</span></div><div class="line" id="160824"><span class="nick" style="color:#6c3d55"><a href="#160824" label="[16:08:24]">&lt;OriansJ&gt;</a></span><span class="message">It is possible to add that support entirely via scheme, since mes-m2 supports keywords</span></div><div class="line" id="161004"><span class="nick" style="color:#6c3d55"><a href="#161004" label="[16:10:04]">&lt;OriansJ&gt;</a></span><span class="message">I was planning on converting mes-m2 to Continuation-passing style form this week; at which point it would be at virtually feature parity with mes.c</span></div><div class="line" id="161247"><span class="nick" style="color:#6c3d55"><a href="#161247" label="[16:12:47]">&lt;OriansJ&gt;</a></span><span class="message">as you can see it is rather trivial to add primitives and major architectural features to mes-m2</span></div><div class="line" id="161319"><span class="nick" style="color:#6d2462"><a href="#161319" label="[16:13:19]">&lt;janneke&gt;</a></span><span class="message">yes, beautiful!</span></div><div class="line" id="161344"><span class="nick" style="color:#6c3d55"><a href="#161344" label="[16:13:44]">&lt;OriansJ&gt;</a></span><span class="message">so if you wanted MesCC to run on mes-m2 by the end of this month, it is possible for us to be done with that</span></div><div class="line" id="161400"><span class="nick" style="color:#6c3d55"><a href="#161400" label="[16:14:00]">&lt;OriansJ&gt;</a></span><span class="message">but I am going to need your help</span></div><div class="line" id="161417"><span class="nick" style="color:#6c3d55"><a href="#161417" label="[16:14:17]">&lt;OriansJ&gt;</a></span><span class="message">Not on the C side but on the scheme side</span></div><div class="line" id="161507"><span class="nick" style="color:#6c3d55"><a href="#161507" label="[16:15:07]">&lt;OriansJ&gt;</a></span><span class="message">as you are a much stronger scheme coder than me these days</span></div><div class="line" id="161726"><span class="nick" style="color:#6c3d55"><a href="#161726" label="[16:17:26]">&lt;OriansJ&gt;</a></span><span class="message">figure out the minimal version of module support needed to solve the MesCC problem and I'll build any C hooks you need to get it done.</span></div><div class="line" id="162228"><span class="nick" style="color:#6c3d55"><a href="#162228" label="[16:22:28]">&lt;OriansJ&gt;</a></span><span class="message">I'll be adding more primitive tests to mes-m2 to ensure all the other primitives you leverage will exactly match that of guile in everyway</span></div><div class="line" id="162340"><span class="nick" style="color:#6d2462"><a href="#162340" label="[16:23:40]">&lt;janneke&gt;</a></span><span class="message">OriansJ: no, there is no hurry and i don't have much time to spend on this</span></div><div class="line" id="162605"><span class="nick" style="color:#6c3d55"><a href="#162605" label="[16:26:05]">&lt;OriansJ&gt;</a></span><span class="message">then how does spending time on code that M2-Planet can't build; help the situation?</span></div><div class="line" id="163405"><span class="nick" style="color:#6c3d55"><a href="#163405" label="[16:34:05]">&lt;OriansJ&gt;</a></span><span class="message">if it is because that is the work you were paid to work on, fine; I get it, everyone needs to be able to pay their bills.</span></div><div class="line" id="163818"><span class="nick" style="color:#6c3d55"><a href="#163818" label="[16:38:18]">&lt;OriansJ&gt;</a></span><span class="message">But unneeded duplicate efforts are not exactly something a resource constrained project benefits from.</span></div><div class="line" id="164003"><span class="nick" style="color:#6c3d55"><a href="#164003" label="[16:40:03]">&lt;OriansJ&gt;</a></span><span class="message">Please help me understand because honestly I don't see the benefits given the assumed goals</span></div><div class="line" id="164021"><span class="nick" style="color:#6c3d55"><a href="#164021" label="[16:40:21]">&lt;OriansJ&gt;</a></span><span class="message">Which where outlined and numbered above</span></div><div class="line" id="173045"><span class="nick" style="color:#d9d9d9"><a href="#173045" label="[17:30:45]">&lt;markjenkinsznc&gt;</a></span><span class="message">My knight disassembler may have just reached minimal viable product status <a rel="nofollow" href="https://github.com/markjenkins/stage0/blob/disasm_py-wip/High_level_prototypes/disasm.py">https://github.com/markjenkins/stage0/blob/disasm_py-wip/High_level_prototypes/disasm.py</a> </span></div><div class="line" id="173051"><span class="nick" style="color:#d9d9d9"><a href="#173051" label="[17:30:51]">&lt;markjenkinsznc&gt;</a></span><span class="message">I need to test it with a proper script against all known binaries, but so far manual testing shows success with disassembling and re-assembling stage0_monitor and M0-compact, so that's a pretty good sign</span></div><div class="line" id="173057"><span class="nick" style="color:#d9d9d9"><a href="#173057" label="[17:30:57]">&lt;markjenkinsznc&gt;</a></span><span class="message">Disssassembling M0-compact <a rel="nofollow" href="https://gist.github.com/markjenkins/67111ff903720c74e37062e05ed8384b">https://gist.github.com/markjenkins/67111ff903720c74e37062e05ed8384b</a>  is a pretty good milestone because disasm.c has trouble with that one.</span></div><div class="line" id="173107"><span class="nick" style="color:#d9d9d9"><a href="#173107" label="[17:31:07]">&lt;markjenkinsznc&gt;</a></span><span class="message">That disassembly shows how aggressive my disassembler is, even at the end of binaries where long instructions no longer fit, my disassembler keeps looking for short instructions, hence the 'wrong' ADD.CI R0 R2 R0 R0 at the end and some 'wrong' NOP in this current output sample. :)</span></div><div class="line" id="173114"><span class="nick" style="color:#d9d9d9"><a href="#173114" label="[17:31:14]">&lt;markjenkinsznc&gt;</a></span><span class="message">Like GNU objdump, I'm going to have cmd line options for marking certain memory areas as data.</span></div><div class="line" id="173123"><span class="nick" style="color:#d9d9d9"><a href="#173123" label="[17:31:23]">&lt;markjenkinsznc&gt;</a></span><span class="message">After finishing testing I'll have more to do to achieve feature parity with disasm.c, options to have addresses in output, string detection, original hex as a comment, more inteligient choice of format for immediate values.</span></div><div class="line" id="173131"><span class="nick" style="color:#d9d9d9"><a href="#173131" label="[17:31:31]">&lt;markjenkinsznc&gt;</a></span><span class="message">My disasm.py is kind of long and ugly, but partially because I've laid groundwork for adding those features, they'll be pretty easy to add from here.</span></div><div class="line" id="173137"><span class="nick" style="color:#d9d9d9"><a href="#173137" label="[17:31:37]">&lt;markjenkinsznc&gt;</a></span><span class="message">Not very hard either to add support for disassembling hex0, hex1, and hex2 files as well and retaining the human elements of labels, use of labels and comments</span></div><div class="line" id="173147"><span class="nick" style="color:#d9d9d9"><a href="#173147" label="[17:31:47]">&lt;markjenkinsznc&gt;</a></span><span class="message"> * end celebration dump *</span></div><div class="line" id="173208"><span class="nick" style="color:#6c3d55"><a href="#173208" label="[17:32:08]">&lt;OriansJ&gt;</a></span><span class="message">markjenkinsznc: great work</span></div><div class="line" id="173319"><span class="nick" style="color:#6c3d55"><a href="#173319" label="[17:33:19]">&lt;OriansJ&gt;</a></span><span class="message">I guess we can plan on shaving off the extra nulls in the knight bootstrap sooner than I thought possible</span></div><div class="line" id="173341"><span class="nick" style="color:#6c3d55"><a href="#173341" label="[17:33:41]">&lt;OriansJ&gt;</a></span><span class="message">that will simplify M1 across the board</span></div><div class="line" id="173535"><span class="nick" style="color:#2e2a4a"><a href="#173535" label="[17:35:35]">&lt;dddddd&gt;</a></span><span class="message">janneke, what do you mean by &quot;this&quot;?</span></div><div class="line" id="173652"><span class="nick" style="color:#80b1d3"><a href="#173652" label="[17:36:52]">*</a></span><span class="message">dddddd re-re-reads the log</span></div><div class="line" id="173747"><span class="nick" style="color:#6c3d55"><a href="#173747" label="[17:37:47]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: I am guessing the work of getting MesCC running on mes-m2 sooner</span></div><div class="line" id="174429"><span class="nick" style="color:#6d2462"><a href="#174429" label="[17:44:29]">&lt;janneke&gt;</a></span><span class="message">yes, hard-core bootstrap work as explained above; i'm hoping to return to that in one or two months time</span></div><div class="line" id="174616"><span class="nick" style="color:#2e2a4a"><a href="#174616" label="[17:46:16]">&lt;dddddd&gt;</a></span><span class="message">+1 on clear view of the duplicated efforts, to avoid them. What are we working on that is not really required?</span></div><div class="line" id="174632"><span class="nick" style="color:#6d2462"><a href="#174632" label="[17:46:32]">&lt;janneke&gt;</a></span><span class="message">i'm doing integration/guix work, otherwise guile-related consultancy and need to secure my funding for the past year and the coming year; which means some broadening, experiments atm</span></div><div class="line" id="174737"><span class="nick" style="color:#6c3d55"><a href="#174737" label="[17:47:37]">&lt;OriansJ&gt;</a></span><span class="message">as is understandable janneke</span></div><div class="line" id="174816"><span class="nick" style="color:#6d2462"><a href="#174816" label="[17:48:16]">&lt;janneke&gt;</a></span><span class="message">mes-m2 is moving too fast atm for me to put in the little time i have to spare; it always takes quite some effort getting into</span></div><div class="line" id="174832"><span class="nick" style="color:#6d2462"><a href="#174832" label="[17:48:32]">&lt;janneke&gt;</a></span><span class="message">on one hand i feel bad about this</span></div><div class="line" id="174900"><span class="nick" style="color:#6d2462"><a href="#174900" label="[17:49:00]">&lt;janneke&gt;</a></span><span class="message">on the other hand i'm very happy to see a better and more clear road forward than ever; even since last year</span></div><div class="line" id="175031"><span class="nick" style="color:#6d2462"><a href="#175031" label="[17:50:31]">&lt;janneke&gt;</a></span><span class="message">the hurd work is partially a digression/distraction but it could become interesting/important to play with reducing the trusted computing base</span></div><div class="line" id="175206"><span class="nick" style="color:#6d2462"><a href="#175206" label="[17:52:06]">&lt;janneke&gt;</a></span><span class="message">getting guix to run on the pinebook pro is important to help with the arm port; that needs to go into guix soon too</span></div><div class="line" id="175240"><span class="nick" style="color:#6d2462"><a href="#175240" label="[17:52:40]">&lt;janneke&gt;</a></span><span class="message">so, the past half year the project has really been broadening for me</span></div><div class="line" id="175336"><span class="nick" style="color:#6d2462"><a href="#175336" label="[17:53:36]">&lt;janneke&gt;</a></span><span class="message">then, there's also life happening over here</span></div><div class="line" id="180117"><span class="nick" style="color:#6c3d55"><a href="#180117" label="[18:01:17]">&lt;OriansJ&gt;</a></span><span class="message">janneke: I get it; life sometimes gets busy and it is hard; believe me I really get it.</span></div><div class="line" id="181619"><span class="nick" style="color:#2e2a4a"><a href="#181619" label="[18:16:19]">&lt;dddddd&gt;</a></span><span class="message">What's &quot;the builder&quot;?</span></div><div class="line" id="181721"><span class="nick" style="color:#6c3d55"><a href="#181721" label="[18:17:21]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: guix if I remember correctly</span></div><div class="line" id="181741"><span class="nick" style="color:#2e2a4a"><a href="#181741" label="[18:17:41]">&lt;dddddd&gt;</a></span><span class="message">It seems important as IIUC it's the only thing that will require guile --so maybe the _only_ reason for mes-m2?</span></div><div class="line" id="181935"><span class="nick" style="color:#80b1d3"><a href="#181935" label="[18:19:35]">*</a></span><span class="message">dddddd sometimes feels in a maze of twisting little passages</span></div><div class="line" id="182102"><span class="nick" style="color:#2e2a4a"><a href="#182102" label="[18:21:02]">&lt;dddddd&gt;</a></span><span class="message">My only hope for the time being is that at least you both (OriansJ, janneke) are [mostly] in the same page.</span></div><div class="line" id="182309"><span class="nick" style="color:#2e2a4a"><a href="#182309" label="[18:23:09]">&lt;dddddd&gt;</a></span><span class="message">But, honestly, I don't know if you are... or if conflicts of interest are in play, or whatever...</span></div><div class="line" id="182447"><span class="nick" style="color:#6c3d55"><a href="#182447" label="[18:24:47]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: well syncronization between people is a big open problem; so sometimes janneke and I get out of sync or we simply disagree about the best path forward and that is ok</span></div><div class="line" id="183005"><span class="nick" style="color:#2e2a4a"><a href="#183005" label="[18:30:05]">&lt;dddddd&gt;</a></span><span class="message">I'll keep doing my best and having fun, but I prefer to spend time on things that will be *used*. Of course the future is unknown but if things are changing from week to week... well...</span></div><div class="line" id="183600"><span class="nick" style="color:#2e2a4a"><a href="#183600" label="[18:36:00]">&lt;dddddd&gt;</a></span><span class="message">If that's the Hurd, so it be. Or that python/glibc port to scheme, or slow-utils, or RISC-V for M2-Planet, or mes-m2, or helping fossy, or Arm stuff.. but please let's optimize (as far as possible) for the priorities.</span></div><div class="line" id="183859"><span class="nick" style="color:#2e2a4a"><a href="#183859" label="[18:38:59]">&lt;dddddd&gt;</a></span><span class="message">What's the common ground, might be the question.</span></div><div class="line" id="190031"><span class="nick" style="color:#2e2a4a"><a href="#190031" label="[19:00:31]">&lt;dddddd&gt;</a></span><span class="message">OriansJ, please check if this commit (adding fflush stub) is what we need and if the implementation and wording is OK: <a rel="nofollow" href="https://notabug.org/deesix/M2-Planet/commit/205c383c5f8a834e4456d83bf92aa445e04954d7">https://notabug.org/deesix/M2-Planet/commit/205c383c5f8a834e4456d83bf92aa445e04954d7</a> </span></div><div class="line" id="190256"><span class="nick" style="color:#2e2a4a"><a href="#190256" label="[19:02:56]">&lt;dddddd&gt;</a></span><span class="message">If so... feel free to cherry-pick.</span></div><div class="line" id="201933"><span class="nick" style="color:#6b8072"><a href="#201933" label="[20:19:33]">&lt;fossy&gt;</a></span><span class="message">OriansJ: I am more than happy to help with that.</span></div><div class="line" id="202012"><span class="nick" style="color:#6b8072"><a href="#202012" label="[20:20:12]">&lt;fossy&gt;</a></span><span class="message">I am also more than happy to help continue to progress mescc-tools-seed</span></div><div class="line" id="202031"><span class="nick" style="color:#6b8072"><a href="#202031" label="[20:20:31]">&lt;fossy&gt;</a></span><span class="message">because those are the two things which I feel are important enough to be used</span></div><div class="line" id="202135"><span class="nick" style="color:#6b8072"><a href="#202135" label="[20:21:35]">&lt;fossy&gt;</a></span><span class="message">&lt;OriansJ&gt; dddddd: I am guessing the work of getting MesCC running on mes-m2 sooner</span></div><div class="line" id="202147"><span class="nick" style="color:#6b8072"><a href="#202147" label="[20:21:47]">&lt;fossy&gt;</a></span><span class="message">Imho this should be a primary goal</span></div><div class="line" id="202202"><span class="nick" style="color:#6b8072"><a href="#202202" label="[20:22:02]">&lt;fossy&gt;</a></span><span class="message">But mes m2 is not my area of expertise</span></div><div class="line" id="202259"><span class="nick" style="color:#6b8072"><a href="#202259" label="[20:22:59]">&lt;fossy&gt;</a></span><span class="message">rationale behind kaem is primarily to help me in mescc tools seed</span></div><div class="line" id="202324"><span class="nick" style="color:#6b8072"><a href="#202324" label="[20:23:24]">&lt;fossy&gt;</a></span><span class="message">I find a cross platform bootstrap extremely important, that is not limited to GUIX</span></div><div class="line" id="202409"><span class="nick" style="color:#6b8072"><a href="#202409" label="[20:24:09]">&lt;fossy&gt;</a></span><span class="message">but I agree with dddddd. We need to be optimising for the priorities</span></div><div class="line" id="202654"><span class="nick" style="color:#6b8072"><a href="#202654" label="[20:26:54]">&lt;fossy&gt;</a></span><span class="message">We are literally on the last stretch here, and I personally would like by the end of the year to be able to git clone &amp;&amp; kaem-seed and end up with a complete toolchain</span></div><div class="line" id="202850"><span class="nick" style="color:#6b8072"><a href="#202850" label="[20:28:50]">&lt;fossy&gt;</a></span><span class="message">but no offence OriansJ but I feel like getting kaem into a state that can run gash easily (which is almost done) is more important than getting it to compile make</span></div><div class="line" id="202946"><span class="nick" style="color:#6b8072"><a href="#202946" label="[20:29:46]">&lt;fossy&gt;</a></span><span class="message">there are many side paths we can take and other peoples time is not mine but I am very interested in a working bootstrap</span></div><div class="line" id="202957"><span class="nick" style="color:#6b8072"><a href="#202957" label="[20:29:57]">&lt;fossy&gt;</a></span><span class="message">and isnt that our real goal?</span></div><div class="line" id="203049"><span class="nick" style="color:#6b8072"><a href="#203049" label="[20:30:49]">&lt;fossy&gt;</a></span><span class="message">heres a duplicate effort I see: getting kaem to run make compilation and getting mes-m2 to run gash</span></div><div class="line" id="203109"><span class="nick" style="color:#6b8072"><a href="#203109" label="[20:31:09]">&lt;fossy&gt;</a></span><span class="message">since gash can now compile make</span></div><div class="line" id="203826"><span class="nick" style="color:#6b8072"><a href="#203826" label="[20:38:26]">&lt;fossy&gt;</a></span><span class="message">oh your goals list earlier</span></div><div class="line" id="203853"><span class="nick" style="color:#6b8072"><a href="#203853" label="[20:38:53]">&lt;fossy&gt;</a></span><span class="message">1) 4) 5) 6) 7) all nope</span></div><div class="line" id="203913"><span class="nick" style="color:#6b8072"><a href="#203913" label="[20:39:13]">&lt;fossy&gt;</a></span><span class="message">I dont think 2 Years is a reasonable timeframe for all those gosls</span></div><div class="line" id="203945"><span class="nick" style="color:#6b8072"><a href="#203945" label="[20:39:45]">&lt;fossy&gt;</a></span><span class="message">2) 3) 7) 8) I reckon we can do</span></div><div class="line" id="204006"><span class="nick" style="color:#6b8072"><a href="#204006" label="[20:40:06]">&lt;fossy&gt;</a></span><span class="message">but having the solid foundation of a bootstrappable C base I think is doable</span></div><div class="line" id="204033"><span class="nick" style="color:#6b8072"><a href="#204033" label="[20:40:33]">&lt;fossy&gt;</a></span><span class="message">but guys we arent in a great rush</span></div><div class="line" id="204200"><span class="nick" style="color:#6b8072"><a href="#204200" label="[20:42:00]">&lt;fossy&gt;</a></span><span class="message">our bootstrap map is complete we just need to automate it and fill in the missing links.  Once again we  are on the home stretch here! Then we can focus on hardware stuff, Haskell stuff, etc. It dosent matter if it takes a month or two years, just  that we are making progress on each of those missing links.</span></div><div class="line" id="204334"><span class="nick" style="color:#6b8072"><a href="#204334" label="[20:43:34]">&lt;fossy&gt;</a></span><span class="message">Yes, we are being ambitious. But who would have thought that  janneke and OriansJ could have done as much as that had in the past 4 years? We are moving closer slowly but steadily, lets keep on that track and keep communicating.</span></div><div class="line" id="204536"><span class="nick" style="color:#6b8072"><a href="#204536" label="[20:45:36]">&lt;fossy&gt;</a></span><span class="message">Sorry for the wall of text</span></div><div class="line" id="214244"><span class="nick" style="color:#bc80bd"><a href="#214244" label="[21:42:44]">&lt;bauen1&gt;</a></span><span class="message">OriansJ: i've just got kernel &quot;threads&quot; working, so after that i need to actually run threads in userspace and implement syscalls but i'm getting there ...</span></div><div class="line" id="214347"><span class="nick" style="color:#bc80bd"><a href="#214347" label="[21:43:47]">&lt;bauen1&gt;</a></span><span class="message">i'll probably try to get tinycc to run, compile a program and have that program work correctly (&quot;hello world&quot;) to iron out any bugs in my kernel</span></div><div class="line" id="214354"><span class="nick" style="color:#bc80bd"><a href="#214354" label="[21:43:54]">&lt;bauen1&gt;</a></span><span class="message">and then i'll see how to proceed</span></div><div class="line" id="214420"><span class="nick" style="color:#bc80bd"><a href="#214420" label="[21:44:20]">&lt;bauen1&gt;</a></span><span class="message">tecnically i would need sh, make, binutils and tinycc to fully bootstrap the kernel</span></div><div class="line" id="214508"><span class="nick" style="color:#bc80bd"><a href="#214508" label="[21:45:08]">&lt;bauen1&gt;</a></span><span class="message">but it should be possible to remove everything but tinycc</span></div><div class="line" id="214657"><span class="nick" style="color:#6b8072"><a href="#214657" label="[21:46:57]">&lt;fossy&gt;</a></span><span class="message">sh + make -&gt; kaem</span></div><div class="line" id="214727"><span class="nick" style="color:#6b8072"><a href="#214727" label="[21:47:27]">&lt;fossy&gt;</a></span><span class="message">tinycc + binutils -&gt; M2-Planet + M1 + hex2</span></div><div class="line" id="214733"><span class="nick" style="color:#6b8072"><a href="#214733" label="[21:47:33]">&lt;fossy&gt;</a></span><span class="message">should be the end goal</span></div><div class="line" id="214746"><span class="nick" style="color:#6b8072"><a href="#214746" label="[21:47:46]">&lt;fossy&gt;</a></span><span class="message">but removing everything but tinycc is a good first step</span></div><div class="line" id="214753"><span class="nick" style="color:#6b8072"><a href="#214753" label="[21:47:53]">&lt;fossy&gt;</a></span><span class="message">lemme know if there anything you need from kaem</span></div><div class="line" id="230323"><span class="nick" style="color:#6c3d55"><a href="#230323" label="[23:03:23]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: that looks perfect</span></div><div class="line" id="230835"><span class="nick" style="color:#6c3d55"><a href="#230835" label="[23:08:35]">&lt;OriansJ&gt;</a></span><span class="message">fossy: completely fair the kaem work is more of a hedge against having other platforms having to depend upon guile for their bootstraps</span></div><div class="line" id="231109"><span class="nick" style="color:#6c3d55"><a href="#231109" label="[23:11:09]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: sounds like a reasonable short term goal</span></div><div class="line" id="231301"><span class="nick" style="color:#6c3d55"><a href="#231301" label="[23:13:01]">&lt;OriansJ&gt;</a></span><span class="message">fossy: also, in case you didn't realize. gash is a bash replacement written in guile. So kaem can't run it directly but only spawn it through a scheme interpreter.</span></div><div class="line" id="234151"><span class="nick" style="color:#6c3d55"><a href="#234151" label="[23:41:51]">&lt;OriansJ&gt;</a></span><span class="message">I finally fixed the nested set! bug in mes-m2 and solved the similiar version which was not previously known about in quasiquote</span></div><div class="line" id="234959"><span class="nick" style="color:#6c3d55"><a href="#234959" label="[23:49:59]">&lt;OriansJ&gt;</a></span><span class="message">Finally got to line 2005 of Ur-Scheme's compile.scm</span></div><div class="line" id="235229"><span class="nick" style="color:#3c5b35"><a href="#235229" label="[23:52:29]">&lt;xentrac&gt;</a></span><span class="message">what, the comment-parsing test?</span></div><div class="line" id="235313"><span class="nick" style="color:#6c3d55"><a href="#235313" label="[23:53:13]">&lt;OriansJ&gt;</a></span><span class="message">it would be the line: (assert-equal (parse-string &quot;;hi\n(;hi\n)&quot;) '())</span></div><div class="line" id="235321"><span class="nick" style="color:#3c5b35"><a href="#235321" label="[23:53:21]">&lt;xentrac&gt;</a></span><span class="message">yeah, that one</span></div><div class="line" id="235331"><span class="nick" style="color:#6c3d55"><a href="#235331" label="[23:53:31]">&lt;OriansJ&gt;</a></span><span class="message">getting the error: ERROR: not equal (#\newline ())</span></div><div class="line" id="235343"><span class="nick" style="color:#6c3d55"><a href="#235343" label="[23:53:43]">&lt;OriansJ&gt;</a></span><span class="message">just need to figure out why</span></div><div class="line" id="235355"><span class="nick" style="color:#3c5b35"><a href="#235355" label="[23:53:55]">&lt;xentrac&gt;</a></span><span class="message">apparently that string is parsing as a character literal for a newline</span></div><div class="line" id="235401"><span class="nick" style="color:#3c5b35"><a href="#235401" label="[23:54:01]">&lt;xentrac&gt;</a></span><span class="message">or as something that starts with one</span></div><div class="line" id="235440"><span class="nick" style="color:#3c5b35"><a href="#235440" label="[23:54:40]">&lt;xentrac&gt;</a></span><span class="message">does &quot;(\n)&quot; parse as an empty list as it should?</span></div><div class="line" id="235508"><span class="nick" style="color:#6c3d55"><a href="#235508" label="[23:55:08]">&lt;OriansJ&gt;</a></span><span class="message">well the above test: (assert-equal (parse-string &quot;\n()&quot;) '()) passes</span></div><div class="line" id="235520"><span class="nick" style="color:#6c3d55"><a href="#235520" label="[23:55:20]">&lt;OriansJ&gt;</a></span><span class="message">but I'll add that test above</span></div><div class="line" id="235606"><span class="nick" style="color:#6c3d55"><a href="#235606" label="[23:56:06]">&lt;OriansJ&gt;</a></span><span class="message">yeah (assert-equal (parse-string &quot;(\n)&quot;) '()) passes just fine</span></div><div class="line" id="235740"><span class="nick" style="color:#6c3d55"><a href="#235740" label="[23:57:40]">&lt;OriansJ&gt;</a></span><span class="message">give me one minute to clean up the current patch of mes-m2 and you can verify it yourself</span></div><div class="line" id="235913"><span class="nick" style="color:#3c5b35"><a href="#235913" label="[23:59:13]">&lt;xentrac&gt;</a></span><span class="message">does it also parse &quot;;hi\n&quot; as #\newline?</span></div><div class="line" id="235928"><span class="nick" style="color:#3c5b35"><a href="#235928" label="[23:59:28]">&lt;xentrac&gt;</a></span><span class="message">I guess the standard Scheme terminology is &quot;read&quot;</span></div><br /></div></body></html>