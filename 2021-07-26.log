<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-07-26.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000023"><span class="nick" style="color:#389600"><a href="#000023" label="[00:00:23]">&lt;oriansj&gt;</a></span><span class="message">as immediates like @5</span></div><div class="line" id="000049"><span class="nick" style="color:#8dd3c7"><a href="#000049" label="[00:00:49]">&lt;stikonas&gt;</a></span><span class="message">so R, I, S and U?</span></div><div class="line" id="000100"><span class="nick" style="color:#2e2a4a"><a href="#000100" label="[00:01:00]">&lt;xentrac&gt;</a></span><span class="message">I mean you need relative offset computation for auipc, which is necessary if you want to load a function pointer address in position-independent code (or the address of a constant)</span></div><div class="line" id="000106"><span class="nick" style="color:#389600"><a href="#000106" label="[00:01:06]">&lt;oriansj&gt;</a></span><span class="message">in M1</span></div><div class="line" id="000129"><span class="nick" style="color:#2e2a4a"><a href="#000129" label="[00:01:29]">&lt;xentrac&gt;</a></span><span class="message">and doing it with auipc is normally a lot less hassle than doing it in a non-position-independent way</span></div><div class="line" id="000201"><span class="nick" style="color:#389600"><a href="#000201" label="[00:02:01]">&lt;oriansj&gt;</a></span><span class="message">xentrac: so you want hex2 to support U format as well?</span></div><div class="line" id="000235"><span class="nick" style="color:#8dd3c7"><a href="#000235" label="[00:02:35]">&lt;stikonas&gt;</a></span><span class="message">yeah, I used auipc when I tried writing hex1_x86</span></div><div class="line" id="000244"><span class="nick" style="color:#389600"><a href="#000244" label="[00:02:44]">&lt;oriansj&gt;</a></span><span class="message">ok</span></div><div class="line" id="000333"><span class="nick" style="color:#2e2a4a"><a href="#000333" label="[00:03:33]">&lt;xentrac&gt;</a></span><span class="message">well, I think hex2 should support whatever stikonas thinks it should support, since he's the one hacking on it</span></div><div class="line" id="000348"><span class="nick" style="color:#389600"><a href="#000348" label="[00:03:48]">&lt;oriansj&gt;</a></span><span class="message">so SB, UJ and U in hex2 but R, I and S in M1?</span></div><div class="line" id="000413"><span class="nick" style="color:#2e2a4a"><a href="#000413" label="[00:04:13]">&lt;xentrac&gt;</a></span><span class="message">I was just pointing out that relative address computation is useful for auipc as well as branches</span></div><div class="line" id="000500"><span class="nick" style="color:#389600"><a href="#000500" label="[00:05:00]">&lt;oriansj&gt;</a></span><span class="message">well hex2 is dealing with relative addressing mostly (only &amp;label tends to be used for absolute addresses)</span></div><div class="line" id="000508"><span class="nick" style="color:#8dd3c7"><a href="#000508" label="[00:05:08]">&lt;stikonas&gt;</a></span><span class="message">I didn't really do any hacking on hex2...</span></div><div class="line" id="000540"><span class="nick" style="color:#8dd3c7"><a href="#000540" label="[00:05:40]">&lt;stikonas&gt;</a></span><span class="message">well, I can be done in both, I is not mangled</span></div><div class="line" id="000541"><span class="nick" style="color:#389600"><a href="#000541" label="[00:05:41]">&lt;oriansj&gt;</a></span><span class="message">stikonas: I can hack it together for you. Just wanted to be clear in what you needed.</span></div><div class="line" id="000552"><span class="nick" style="color:#2e2a4a"><a href="#000552" label="[00:05:52]">&lt;xentrac&gt;</a></span><span class="message">i stand corrected!</span></div><div class="line" id="000638"><span class="nick" style="color:#389600"><a href="#000638" label="[00:06:38]">&lt;oriansj&gt;</a></span><span class="message">and I am going to use . to just xor in blocks made by M1</span></div><div class="line" id="000709"><span class="nick" style="color:#8dd3c7"><a href="#000709" label="[00:07:09]">&lt;stikonas&gt;</a></span><span class="message">hmm, actually in hex1_x86 I only used auipc with 0</span></div><div class="line" id="000817"><span class="nick" style="color:#389600"><a href="#000817" label="[00:08:17]">&lt;oriansj&gt;</a></span><span class="message">So .000000CD . 00BF0000 A0000000 =&gt; A0BF00CD written out</span></div><div class="line" id="000840"><span class="nick" style="color:#8dd3c7"><a href="#000840" label="[00:08:40]">&lt;stikonas&gt;</a></span><span class="message">oh that would work</span></div><div class="line" id="000903"><span class="nick" style="color:#8dd3c7"><a href="#000903" label="[00:09:03]">&lt;stikonas&gt;</a></span><span class="message">will be easier that doing it in 6 different blocks</span></div><div class="line" id="001211"><span class="nick" style="color:#389600"><a href="#001211" label="[00:12:11]">&lt;oriansj&gt;</a></span><span class="message">well it might result in 6 different .hex statements in the hex2 input but it will be simpler to implement</span></div><div class="line" id="001617"><span class="nick" style="color:#8dd3c7"><a href="#001617" label="[00:16:17]">&lt;stikonas&gt;</a></span><span class="message">yes, xor should be cheaper than shifting bits</span></div><div class="line" id="001633"><span class="nick" style="color:#389600"><a href="#001633" label="[00:16:33]">&lt;oriansj&gt;</a></span><span class="message">but that will only occur with M1 generated output and not in any human written cases</span></div><div class="line" id="001657"><span class="nick" style="color:#8dd3c7"><a href="#001657" label="[00:16:57]">&lt;stikonas&gt;</a></span><span class="message">humans can also use . can't they?</span></div><div class="line" id="001706"><span class="nick" style="color:#8dd3c7"><a href="#001706" label="[00:17:06]">&lt;stikonas&gt;</a></span><span class="message">e.g. when writing hex1 code</span></div><div class="line" id="001713"><span class="nick" style="color:#8dd3c7"><a href="#001713" label="[00:17:13]">&lt;stikonas&gt;</a></span><span class="message">i.e. hex2 implementation</span></div><div class="line" id="001805"><span class="nick" style="color:#8dd3c7"><a href="#001805" label="[00:18:05]">&lt;stikonas&gt;</a></span><span class="message">might be even easier to write later hex files...</span></div><div class="line" id="001823"><span class="nick" style="color:#389600"><a href="#001823" label="[00:18:23]">&lt;oriansj&gt;</a></span><span class="message">stikonas: if they wanted but it would effectively just mean read the next 4 bytes and xor them with this hold register that will be xor'd with the next 4 hex bytes recieved before output.</span></div><div class="line" id="001848"><span class="nick" style="color:#8dd3c7"><a href="#001848" label="[00:18:48]">&lt;stikonas&gt;</a></span><span class="message">as it will be just a simple replace of strings from when converting  .M1-&gt; hex2</span></div><div class="line" id="001921"><span class="nick" style="color:#8dd3c7"><a href="#001921" label="[00:19:21]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="002009"><span class="nick" style="color:#389600"><a href="#002009" label="[00:20:09]">&lt;oriansj&gt;</a></span><span class="message">yeah the DEFINEs for everything but the instructions become .hex and the instructions just become a full word with zeros where things are to be filled in by hex2 via .hex</span></div><div class="line" id="002121"><span class="nick" style="color:#389600"><a href="#002121" label="[00:21:21]">&lt;oriansj&gt;</a></span><span class="message">So Register 1 will have 3 different defines depending on if it goes in rs1, rs2 or rd</span></div><div class="line" id="002229"><span class="nick" style="color:#8dd3c7"><a href="#002229" label="[00:22:29]">&lt;stikonas&gt;</a></span><span class="message">that's probably not too bad</span></div><div class="line" id="002404"><span class="nick" style="color:#389600"><a href="#002404" label="[00:24:04]">&lt;oriansj&gt;</a></span><span class="message">an R-Type instruction would have just a DEFINE and 3 Register DEFINEs used</span></div><div class="line" id="002435"><span class="nick" style="color:#389600"><a href="#002435" label="[00:24:35]">&lt;oriansj&gt;</a></span><span class="message">which would be a single hex block and 3 .hex blocks before it</span></div><div class="line" id="002508"><span class="nick" style="color:#389600"><a href="#002508" label="[00:25:08]">&lt;oriansj&gt;</a></span><span class="message">so R1_0 R2_1 R3_2 ADD for ADD R1, R2, R3</span></div><div class="line" id="002513"><span class="nick" style="color:#8dd3c7"><a href="#002513" label="[00:25:13]">&lt;stikonas&gt;</a></span><span class="message">yeah, that will be much easier than .S-&gt;.hex0 conversion I did...</span></div><div class="line" id="002747"><span class="nick" style="color:#389600"><a href="#002747" label="[00:27:47]">&lt;oriansj&gt;</a></span><span class="message">with the R1_0, R1_1 and R1_2 having different defines as those register locations are 3 different spots in the word</span></div><div class="line" id="003105"><span class="nick" style="color:#389600"><a href="#003105" label="[00:31:05]">&lt;oriansj&gt;</a></span><span class="message">(Just an idea you can steal, improve or ignore)</span></div><div class="line" id="003721"><span class="nick" style="color:#8dd3c7"><a href="#003721" label="[00:37:21]">&lt;stikonas&gt;</a></span><span class="message">hmm, there might also be an issue with those pseudoinstructions (in particular ones that have auipc in them)</span></div><div class="line" id="003737"><span class="nick" style="color:#8dd3c7"><a href="#003737" label="[00:37:37]">&lt;stikonas&gt;</a></span><span class="message">basically immediate is split between two instructions</span></div><div class="line" id="004052"><span class="nick" style="color:#389600"><a href="#004052" label="[00:40:52]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well that would be in M1 right?</span></div><div class="line" id="004241"><span class="nick" style="color:#389600"><a href="#004241" label="[00:42:41]">&lt;oriansj&gt;</a></span><span class="message">So ~5 LUI and $5 slli</span></div><div class="line" id="004309"><span class="nick" style="color:#8dd3c7"><a href="#004309" label="[00:43:09]">&lt;stikonas&gt;</a></span><span class="message">well, I guess M1 should be fine for that</span></div><div class="line" id="004324"><span class="nick" style="color:#8dd3c7"><a href="#004324" label="[00:43:24]">&lt;stikonas&gt;</a></span><span class="message">in any case we don't need big jumps/loads before M1</span></div><div class="line" id="004352"><span class="nick" style="color:#389600"><a href="#004352" label="[00:43:52]">&lt;oriansj&gt;</a></span><span class="message">and we can have M1 know to chop off the top or bottom depending on what instruction format it is</span></div><div class="line" id="004638"><span class="nick" style="color:#389600"><a href="#004638" label="[00:46:38]">&lt;oriansj&gt;</a></span><span class="message">It'll disable range checking for those formats and make some bugs harder to find but I can squeeze it in</span></div><div class="line" id="005143"><span class="nick" style="color:#389600"><a href="#005143" label="[00:51:43]">&lt;oriansj&gt;</a></span><span class="message">with luck I could have prototypes up by Monday and hopefully someone more familiar with RISC-V instruction encoding could tell me where I am a moron.</span></div><div class="line" id="005405"><span class="nick" style="color:#389600"><a href="#005405" label="[00:54:05]">&lt;oriansj&gt;</a></span><span class="message">Then RISC-V stage-posix development should become easier for you stikonas.</span></div><div class="line" id="005439"><span class="nick" style="color:#2e2a4a"><a href="#005439" label="[00:54:39]">&lt;xentrac&gt;</a></span><span class="message">yay :)</span></div><div class="line" id="005513"><span class="nick" style="color:#8dd3c7"><a href="#005513" label="[00:55:13]">&lt;stikonas&gt;</a></span><span class="message">well, it's not like I'm familiar with RISC-V instructions encoding, having done just once but it sounds plausible</span></div><div class="line" id="005634"><span class="nick" style="color:#389600"><a href="#005634" label="[00:56:34]">&lt;oriansj&gt;</a></span><span class="message">well getting M1 code to work is much easier than hex0 and once you go to convert to hex0/hex1/hex2 it becomes a line by line exercise with the checksum being identical every step of the way.</span></div><div class="line" id="010503"><span class="nick" style="color:#389600"><a href="#010503" label="[01:05:03]">&lt;oriansj&gt;</a></span><span class="message">as M1+blood-elf =&gt; fully debuggable binary with labels for functions and globals and gdb doesn't have to act like it is a stripped binary.</span></div><div class="line" id="010538"><span class="nick" style="color:#389600"><a href="#010538" label="[01:05:38]">&lt;oriansj&gt;</a></span><span class="message">so b foo will actually work</span></div><div class="line" id="010603"><span class="nick" style="color:#389600"><a href="#010603" label="[01:06:03]">&lt;oriansj&gt;</a></span><span class="message">b _start will work if you do :_start in your M1 code</span></div><div class="line" id="010637"><span class="nick" style="color:#389600"><a href="#010637" label="[01:06:37]">&lt;oriansj&gt;</a></span><span class="message">just need to remember to use the debug hex2 ELF-headers</span></div><div class="line" id="010709"><span class="nick" style="color:#389600"><a href="#010709" label="[01:07:09]">&lt;oriansj&gt;</a></span><span class="message">which we probably need to include in mescc-tools along with non-debug elf headers for RISC-V</span></div><div class="line" id="010800"><span class="nick" style="color:#389600"><a href="#010800" label="[01:08:00]">&lt;oriansj&gt;</a></span><span class="message">as ironically the person who did RISC-V work previously didn't think mescc-tools users needed to be able to create RISC-V posix binaries.</span></div><div class="line" id="010821"><span class="nick" style="color:#8dd3c7"><a href="#010821" label="[01:08:21]">&lt;stikonas&gt;</a></span><span class="message">yeah, should be easier with blood elf, although in the end layout asm in gdb does let you debug some things</span></div><div class="line" id="011850"><span class="nick" style="color:#389600"><a href="#011850" label="[01:18:50]">&lt;oriansj&gt;</a></span><span class="message">looks likes there are even more fun surprises inside for us: <a rel="nofollow" href="http://inst.eecs.berkeley.edu/~cs61c/resources/su18_lec/Lecture7.pdf">http://inst.eecs.berkeley.edu/~cs61c/resources/su18_lec/Lecture7.pdf</a> </span></div><div class="line" id="011903"><span class="nick" style="color:#389600"><a href="#011903" label="[01:19:03]">&lt;oriansj&gt;</a></span><span class="message">check out page 54</span></div><div class="line" id="013354"><span class="nick" style="color:#8dd3c7"><a href="#013354" label="[01:33:54]">&lt;stikonas&gt;</a></span><span class="message">oriansj: yes, I'm aware of that</span></div><div class="line" id="013410"><span class="nick" style="color:#8dd3c7"><a href="#013410" label="[01:34:10]">&lt;stikonas&gt;</a></span><span class="message">that's what I was thinking about when I said &quot;basically immediate is split between two instructions&quot;</span></div><div class="line" id="013446"><span class="nick" style="color:#8dd3c7"><a href="#013446" label="[01:34:46]">&lt;stikonas&gt;</a></span><span class="message">it's mention in riscv isa in the section about pseudoinstructions (loading address of symbol)</span></div><div class="line" id="013503"><span class="nick" style="color:#8dd3c7"><a href="#013503" label="[01:35:03]">&lt;stikonas&gt;</a></span><span class="message">I've only read a few pages of that documentation and already stumbled on this</span></div><div class="line" id="014116"><span class="nick" style="color:#8dd3c7"><a href="#014116" label="[01:41:16]">&lt;stikonas&gt;</a></span><span class="message">can this be handled at M1 level?</span></div><div class="line" id="014207"><span class="nick" style="color:#8dd3c7"><a href="#014207" label="[01:42:07]">&lt;stikonas&gt;</a></span><span class="message">I'm not yet familiar with M1 well enough to answer that myself</span></div><div class="line" id="014334"><span class="nick" style="color:#389600"><a href="#014334" label="[01:43:34]">&lt;oriansj&gt;</a></span><span class="message">stikonas: absolutely</span></div><div class="line" id="014337"><span class="nick" style="color:#8dd3c7"><a href="#014337" label="[01:43:37]">&lt;stikonas&gt;</a></span><span class="message">I guess the only logical place to handle it is the place that splits pseudo instruction into two...</span></div><div class="line" id="014354"><span class="nick" style="color:#8dd3c7"><a href="#014354" label="[01:43:54]">&lt;stikonas&gt;</a></span><span class="message">ok, that's good</span></div><div class="line" id="014708"><span class="nick" style="color:#389600"><a href="#014708" label="[01:47:08]">&lt;oriansj&gt;</a></span><span class="message">but it'll look a little weird.</span></div><div class="line" id="014939"><span class="nick" style="color:#389600"><a href="#014939" label="[01:49:39]">&lt;oriansj&gt;</a></span><span class="message">For example the pseudo instruction: li x10, 0xDEADBEEF would need to be written ~0xDEADBEEF x10_0 LUI @0xDEADBEEF x10_0 x10_1 ADDI</span></div><div class="line" id="015000"><span class="nick" style="color:#389600"><a href="#015000" label="[01:50:00]">&lt;oriansj&gt;</a></span><span class="message">as the immediate would be needed in both WORDs</span></div><div class="line" id="015639"><span class="nick" style="color:#389600"><a href="#015639" label="[01:56:39]">&lt;oriansj&gt;</a></span><span class="message">does anyone know a good distro for RISC-V development?</span></div><div class="line" id="015719"><span class="nick" style="color:#389600"><a href="#015719" label="[01:57:19]">&lt;oriansj&gt;</a></span><span class="message">So even if just in a qemu vm, that I can do some sanity checking</span></div><div class="line" id="015815"><span class="nick" style="color:#80b1d3"><a href="#015815" label="[01:58:15]">&lt;vagrantc&gt;</a></span><span class="message">only have experience with debian on RISC-V</span></div><div class="line" id="020107"><span class="nick" style="color:#389600"><a href="#020107" label="[02:01:07]">&lt;oriansj&gt;</a></span><span class="message">vagrantc: I just need sshd, gdb, binutils and any text editor and any shell</span></div><div class="line" id="020417"><span class="nick" style="color:#389600"><a href="#020417" label="[02:04:17]">&lt;oriansj&gt;</a></span><span class="message">can it install in qemu and do that</span></div><div class="line" id="020513"><span class="nick" style="color:#2e2a4a"><a href="#020513" label="[02:05:13]">&lt;xentrac&gt;</a></span><span class="message">yes</span></div><div class="line" id="020601"><span class="nick" style="color:#8dd3c7"><a href="#020601" label="[02:06:01]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I just installed qemu and that's it</span></div><div class="line" id="020605"><span class="nick" style="color:#8dd3c7"><a href="#020605" label="[02:06:05]">&lt;stikonas&gt;</a></span><span class="message">(on gentoo)</span></div><div class="line" id="020651"><span class="nick" style="color:#8dd3c7"><a href="#020651" label="[02:06:51]">&lt;stikonas&gt;</a></span><span class="message">(and compiled riscv toolchain with crossdev)</span></div><div class="line" id="020857"><span class="nick" style="color:#80b1d3"><a href="#020857" label="[02:08:57]">&lt;vagrantc&gt;</a></span><span class="message">oriansj: yeah, should work for that</span></div><div class="line" id="023741"><span class="nick" style="color:#389600"><a href="#023741" label="[02:37:41]">&lt;oriansj&gt;</a></span><span class="message">vagrantc: I'm guessing install images in a place I don't know to look at</span></div><div class="line" id="023811"><span class="nick" style="color:#389600"><a href="#023811" label="[02:38:11]">&lt;oriansj&gt;</a></span><span class="message">unless it is part of the multi-arch cd</span></div><div class="line" id="023917"><span class="nick" style="color:#80b1d3"><a href="#023917" label="[02:39:17]">&lt;vagrantc&gt;</a></span><span class="message">oriansj: <a rel="nofollow" href="https://wiki.debian.org/RISC-V#Creating_a_riscv64_chroot">https://wiki.debian.org/RISC-V#Creating_a_riscv64_chroot</a> </span></div><div class="line" id="023934"><span class="nick" style="color:#80b1d3"><a href="#023934" label="[02:39:34]">&lt;vagrantc&gt;</a></span><span class="message">and then you can dump that into a rootfs for your virtual machine</span></div><div class="line" id="024047"><span class="nick" style="color:#80b1d3"><a href="#024047" label="[02:40:47]">&lt;vagrantc&gt;</a></span><span class="message">it's not a release architecture on debian yet, so i'm not sure there's an installer yet</span></div><div class="line" id="024302"><span class="nick" style="color:#389600"><a href="#024302" label="[02:43:02]">&lt;oriansj&gt;</a></span><span class="message">looks good even to make a vm</span></div><div class="line" id="024546"><span class="nick" style="color:#80b1d3"><a href="#024546" label="[02:45:46]">&lt;vagrantc&gt;</a></span><span class="message">yeah, it's useable ... occasionally some issues still</span></div><div class="line" id="031615"><span class="nick" style="color:#389600"><a href="#031615" label="[03:16:15]">&lt;oriansj&gt;</a></span><span class="message">vagrantc: my needs are extremely minimal. just enough to hex bang a couple minimal instruction tests out for risc-v</span></div><div class="line" id="040829"><span class="nick" style="color:#389600"><a href="#040829" label="[04:08:29]">&lt;oriansj&gt;</a></span><span class="message">well looks like using rasm2 to guess at RISC-V instruction encoding is not going to be very productive.</span></div><div class="line" id="044933"><span class="nick" style="color:#6d2462"><a href="#044933" label="[04:49:33]">&lt;Hagfish&gt;</a></span><span class="message"> <a rel="nofollow" href="https://i.redd.it/wr308dmuydd71.png">https://i.redd.it/wr308dmuydd71.png</a>  &quot;Wait, it's all abstraction?&quot;</span></div><div class="line" id="071045"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o oriansj</span></div><div class="line" id="074231"><span class="nick" style="color:#234e69"><a href="#074231" label="[07:42:31]">&lt;fossy&gt;</a></span><span class="message">this is annoying... reuse seems to not be properly respecting gitignore</span></div><div class="line" id="132840"><span class="nick" style="color:#234e69"><a href="#132840" label="[13:28:40]">&lt;fossy&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/thepowersgang/mrustc">https://github.com/thepowersgang/mrustc</a>  can do rustc 1.39.. that should make the bootstrap path quite a bit faster</span></div><div class="line" id="134136"><span class="nick" style="color:#6c3d55"><a href="#134136" label="[13:41:36]">&lt;civodul&gt;</a></span><span class="message">nice</span></div><div class="line" id="134220"><span class="nick" style="color:#6c3d55"><a href="#134220" label="[13:42:20]">&lt;civodul&gt;</a></span><span class="message">in other news, i updated mescc-tools and m2-planet in Guix: <a rel="nofollow" href="https://issues.guix.gnu.org/49515#4">https://issues.guix.gnu.org/49515#4</a> </span></div><div class="line" id="142411"><span class="nick" style="color:#8dd3c7"><a href="#142411" label="[14:24:11]">&lt;stikonas&gt;</a></span><span class="message">fossy: yes, I tried rustc 1.39 bootstrap some time ago. But it only worked on amd64 for me, not on arm64...</span></div><br /></div></body></html>