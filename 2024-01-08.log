<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2024-01-08.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="003017"><span class="nick" style="color:#389600"><a href="#003017" label="[00:30:17]">&lt;Googulator&gt;</a></span><span class="message">rekado: nice to see you here :)</span></div><div class="line" id="003023"><span class="nick" style="color:#389600"><a href="#003023" label="[00:30:23]">&lt;Googulator&gt;</a></span><span class="message">did you see the recent Haskell discussion?</span></div><div class="line" id="003700"><span class="nick" style="color:#8dd3c7"><a href="#003700" label="[00:37:00]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: hi, can I ask what happens to symlinks in live-bootstrap repo when read by builder-hex0?</span></div><div class="line" id="003711"><span class="nick" style="color:#8dd3c7"><a href="#003711" label="[00:37:11]">&lt;stikonas&gt;</a></span><span class="message">it just copies them?</span></div><div class="line" id="003805"><span class="nick" style="color:#389600"><a href="#003805" label="[00:38:05]">&lt;Googulator&gt;</a></span><span class="message">stikonas: IIRC generator.py isn't aware of symlinks, so it will just store them as copies in srcfs</span></div><div class="line" id="003813"><span class="nick" style="color:#389600"><a href="#003813" label="[00:38:13]">&lt;Googulator&gt;</a></span><span class="message">so builder-hex0 will never see symlinks</span></div><div class="line" id="003850"><span class="nick" style="color:#8dd3c7"><a href="#003850" label="[00:38:50]">&lt;stikonas&gt;</a></span><span class="message">ok, makes sense</span></div><div class="line" id="003907"><span class="nick" style="color:#8dd3c7"><a href="#003907" label="[00:39:07]">&lt;stikonas&gt;</a></span><span class="message">I think it's just patches that are symlinked in srcfs</span></div><div class="line" id="011213"><span class="nick" style="color:#2e2a4a"><a href="#011213" label="[01:12:13]">&lt;plasma41&gt;</a></span><span class="message">Googulator: What was the recent Haskell discussion about?</span></div><div class="line" id="011306"><span class="nick" style="color:#389600"><a href="#011306" label="[01:13:06]">&lt;Googulator&gt;</a></span><span class="message">basically, a potential new bootstrap path using hbc</span></div><div class="line" id="011422"><span class="nick" style="color:#389600"><a href="#011422" label="[01:14:22]">&lt;Googulator&gt;</a></span><span class="message">If we can transpile hbc's LazyML sources into Haskell code compatible with Yale Haskell 2.05, that could give us a usable (if interpreted) version of lmlc to properly compile hbc</span></div><div class="line" id="011509"><span class="nick" style="color:#389600"><a href="#011509" label="[01:15:09]">&lt;Googulator&gt;</a></span><span class="message">And then, hopefully we can fix up the recently rediscovered GHC 0.26 enough so it compiles with hbc</span></div><div class="line" id="011523"><span class="nick" style="color:#389600"><a href="#011523" label="[01:15:23]">&lt;Googulator&gt;</a></span><span class="message">(the last version of GHC to support compilation with hbc was 0.24, which is lost)</span></div><div class="line" id="011610"><span class="nick" style="color:#389600"><a href="#011610" label="[01:16:10]">&lt;Googulator&gt;</a></span><span class="message">Once we have that, it should be possible to traverse the development history of GHC from 0.26 to the present day, thanks to the same archive repo that had 0.26</span></div><div class="line" id="011732"><span class="nick" style="color:#8dd3c7"><a href="#011732" label="[01:17:32]">&lt;stikonas&gt;</a></span><span class="message">it will be painful though :(</span></div><div class="line" id="011745"><span class="nick" style="color:#8dd3c7"><a href="#011745" label="[01:17:45]">&lt;stikonas&gt;</a></span><span class="message">all that old stuff is likely not to build on modern systems</span></div><div class="line" id="011752"><span class="nick" style="color:#8dd3c7"><a href="#011752" label="[01:17:52]">&lt;stikonas&gt;</a></span><span class="message">probably only feasible inside guix</span></div><div class="line" id="011807"><span class="nick" style="color:#389600"><a href="#011807" label="[01:18:07]">&lt;Googulator&gt;</a></span><span class="message">LazyML appears to be a much simpler language than Haskell (e.g. no massive Prelude), with the same paradigm as Haskell (lazily evaluated, purely functional, algebraic type system), so the ideal transpilation target for Lazy ML is Haskell</span></div><div class="line" id="011834"><span class="nick" style="color:#389600"><a href="#011834" label="[01:18:34]">&lt;Googulator&gt;</a></span><span class="message">and we already have a working, if really old/basic Haskell implementation almost-bootstrapped (Yale Haskell, on top of clisp)</span></div><div class="line" id="011852"><span class="nick" style="color:#389600"><a href="#011852" label="[01:18:52]">&lt;Googulator&gt;</a></span><span class="message">clisp itself isn't bootstrapped in LB, but it probably is in Guix</span></div><div class="line" id="011921"><span class="nick" style="color:#389600"><a href="#011921" label="[01:19:21]">&lt;Googulator&gt;</a></span><span class="message">(it's not even really bootstrapping, as clisp isn't self-hosted, it's written in C)</span></div><div class="line" id="012033"><span class="nick" style="color:#8dd3c7"><a href="#012033" label="[01:20:33]">&lt;stikonas&gt;</a></span><span class="message">in the meantime I'm close to remong weak symbols hack from live-bootstrap (issue #322)</span></div><div class="line" id="012043"><span class="nick" style="color:#6b8072"><a href="#012043" label="[01:20:43]">&lt;oriansj&gt;</a></span><span class="message">muurkha: well yes; if one is limited to assembly and assembly programs, it is quite easy to function in 4KB but if you want to support building gcc via a large storage drive and only the minimal RAM, the lower bound would be 16KB</span></div><div class="line" id="012148"><span class="nick" style="color:#6b8072"><a href="#012148" label="[01:21:48]">&lt;oriansj&gt;</a></span><span class="message">and it'll take a considerable amount of time</span></div><div class="line" id="012210"><span class="nick" style="color:#6b8072"><a href="#012210" label="[01:22:10]">&lt;oriansj&gt;</a></span><span class="message">the more RAM the less loading pages from memory and faster the result would be.</span></div><div class="line" id="012615"><span class="nick" style="color:#2e2a4a"><a href="#012615" label="[01:26:15]">&lt;plasma41&gt;</a></span><span class="message">Googulator: Exciting stuff! Very cool :-)</span></div><div class="line" id="012755"><span class="nick" style="color:#80b1d3"><a href="#012755" label="[01:27:55]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: sorry, stepped away. Links not supported in builder-hex0</span></div><div class="line" id="012807"><span class="nick" style="color:#8dd3c7"><a href="#012807" label="[01:28:07]">&lt;stikonas&gt;</a></span><span class="message">yeah, Googulator already explained</span></div><div class="line" id="012811"><span class="nick" style="color:#389600"><a href="#012811" label="[01:28:11]">&lt;Googulator&gt;</a></span><span class="message">The 2 key developments since the failed attempt to bootstrap ghc 0.29 using nhc98 are rekado's port of Yale Haskell to clisp, and the discovery of a Git repo of ghc's history going back to 0.26 (originally converted from darcs, but with history preserved)</span></div><div class="line" id="012813"><span class="nick" style="color:#8dd3c7"><a href="#012813" label="[01:28:13]">&lt;stikonas&gt;</a></span><span class="message">it's sorted by generator.py</span></div><div class="line" id="012837"><span class="nick" style="color:#8dd3c7"><a href="#012837" label="[01:28:37]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: I've left one comment on your PR regarding link</span></div><div class="line" id="012859"><span class="nick" style="color:#8dd3c7"><a href="#012859" label="[01:28:59]">&lt;stikonas&gt;</a></span><span class="message">wouldn't change much, but all other patches in that directory are symlinks</span></div><div class="line" id="012920"><span class="nick" style="color:#389600"><a href="#012920" label="[01:29:20]">&lt;Googulator&gt;</a></span><span class="message">Unfortunately the conversion from CVS to darcs was performed without history, and the CVS repo itself is lost, so we don't have pre-0.26 history</span></div><div class="line" id="012925"><span class="nick" style="color:#80b1d3"><a href="#012925" label="[01:29:25]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: ok thanks, I can do that</span></div><div class="line" id="013000"><span class="nick" style="color:#389600"><a href="#013000" label="[01:30:00]">&lt;Googulator&gt;</a></span><span class="message">which is a shame because 0.26 is the first version of GHC not to be cleanly buildable using HBC</span></div><div class="line" id="013000"><span class="nick" style="color:#8dd3c7"><a href="#013000" label="[01:30:00]">&lt;stikonas&gt;</a></span><span class="message">no checksums would be affected by this...</span></div><div class="line" id="013042"><span class="nick" style="color:#8dd3c7"><a href="#013042" label="[01:30:42]">&lt;stikonas&gt;</a></span><span class="message">how frequent were releases back then?</span></div><div class="line" id="013047"><span class="nick" style="color:#8dd3c7"><a href="#013047" label="[01:30:47]">&lt;stikonas&gt;</a></span><span class="message">do we know that?</span></div><div class="line" id="013055"><span class="nick" style="color:#389600"><a href="#013055" label="[01:30:55]">&lt;Googulator&gt;</a></span><span class="message">an important sidenote is that the version of HBC that was supported for compiling pre-0.26 GHC is (of course) also lost</span></div><div class="line" id="013105"><span class="nick" style="color:#389600"><a href="#013105" label="[01:31:05]">&lt;Googulator&gt;</a></span><span class="message">we have a much newer version of HBC instead</span></div><div class="line" id="013115"><span class="nick" style="color:#8dd3c7"><a href="#013115" label="[01:31:15]">&lt;stikonas&gt;</a></span><span class="message">i.e. do we expect signigicant changes since the last version that was compatible with HBC...</span></div><div class="line" id="013127"><span class="nick" style="color:#8dd3c7"><a href="#013127" label="[01:31:27]">&lt;stikonas&gt;</a></span><span class="message">oh, that's not too good either...</span></div><div class="line" id="013143"><span class="nick" style="color:#8dd3c7"><a href="#013143" label="[01:31:43]">&lt;stikonas&gt;</a></span><span class="message">somehow haskell people did not care about history :(</span></div><div class="line" id="013209"><span class="nick" style="color:#389600"><a href="#013209" label="[01:32:09]">&lt;Googulator&gt;</a></span><span class="message">the newer HBC has 2 Haskell frontends, a deprecated one for Haskell 1.2, and a newer one with 1.3 and partial 1.4 support</span></div><div class="line" id="013246"><span class="nick" style="color:#389600"><a href="#013246" label="[01:32:46]">&lt;Googulator&gt;</a></span><span class="message">the deprecated 1.2 frontend might be good enough for compiling 0.24, if we ever find it</span></div><div class="line" id="013256"><span class="nick" style="color:#389600"><a href="#013256" label="[01:32:56]">&lt;Googulator&gt;</a></span><span class="message">or 0.26 if we patch out whatever makes it incompatible</span></div><div class="line" id="013319"><span class="nick" style="color:#6b8072"><a href="#013319" label="[01:33:19]">&lt;oriansj&gt;</a></span><span class="message">or create something equivalant</span></div><div class="line" id="013355"><span class="nick" style="color:#389600"><a href="#013355" label="[01:33:55]">&lt;Googulator&gt;</a></span><span class="message">Before GHC 2.0, GHC was strictly a Haskell 1.2 compiler, meant to be compiled with itself, hence the codebase is also 1.2</span></div><div class="line" id="013405"><span class="nick" style="color:#389600"><a href="#013405" label="[01:34:05]">&lt;Googulator&gt;</a></span><span class="message">(probably with some GHC-specific extensions)</span></div><div class="line" id="013459"><span class="nick" style="color:#389600"><a href="#013459" label="[01:34:59]">&lt;Googulator&gt;</a></span><span class="message">2.0 introduced Haskell 1.3 support (breaking 1.2 compatibility), initially requiring it to be compiled with 0.x (there never was a GHC 1.x)</span></div><div class="line" id="013538"><span class="nick" style="color:#389600"><a href="#013538" label="[01:35:38]">&lt;Googulator&gt;</a></span><span class="message">Then at some point between 2.0 and today, the codebase was refactored to be Haskell 1.3 (again, probably using GHC extensions)</span></div><div class="line" id="013717"><span class="nick" style="color:#389600"><a href="#013717" label="[01:37:17]">&lt;Googulator&gt;</a></span><span class="message">GHC's intended solution for bootstrapping (well, &quot;bootstrapping&quot;) was via generated, separately distributed &quot;.hc&quot; files - which are (it feels like I'm repeating myself at this point) *lost*</span></div><div class="line" id="013732"><span class="nick" style="color:#389600"><a href="#013732" label="[01:37:32]">&lt;Googulator&gt;</a></span><span class="message">and they aren't really source code either</span></div><div class="line" id="013952"><span class="nick" style="color:#389600"><a href="#013952" label="[01:39:52]">&lt;Googulator&gt;</a></span><span class="message">&quot;.hc&quot; files were intermediate C code emitted by older versions of GHC</span></div><div class="line" id="014007"><span class="nick" style="color:#8dd3c7"><a href="#014007" label="[01:40:07]">&lt;stikonas&gt;</a></span><span class="message">well, similar story to stuff that happens today... e.g. zig...</span></div><div class="line" id="014015"><span class="nick" style="color:#389600"><a href="#014015" label="[01:40:15]">&lt;Googulator&gt;</a></span><span class="message">GHC used to transpile to C, then compile that C code using the system C compiler</span></div><div class="line" id="014035"><span class="nick" style="color:#389600"><a href="#014035" label="[01:40:35]">&lt;Googulator&gt;</a></span><span class="message">nowadays, it compiles to GCC or LLVM IR instead, and calls the relevant compiler backend directly</span></div><div class="line" id="014134"><span class="nick" style="color:#389600"><a href="#014134" label="[01:41:34]">&lt;Googulator&gt;</a></span><span class="message">I guess Haskell folks back then didn't consider source-based bootstrapping important (again, Zig comes to mind with their new &quot;oh, just use wasm&quot; approach)</span></div><div class="line" id="014853"><span class="nick" style="color:#8dd3c7"><a href="#014853" label="[01:48:53]">&lt;stikonas&gt;</a></span><span class="message">at least zig folks haven't lost the history yet...</span></div><div class="line" id="014911"><span class="nick" style="color:#389600"><a href="#014911" label="[01:49:11]">&lt;Googulator&gt;</a></span><span class="message">reading Yale Haskell's documentation, this gem stands out:</span></div><div class="line" id="015045"><span class="nick" style="color:#389600"><a href="#015045" label="[01:50:45]">&lt;Googulator&gt;</a></span><span class="message">&quot;Compiling the Yale Haskell system from the source distribution takes a few hours, and requires a substantial amount of virtual memory, particularly for processing the standard prelude. We recommend that you have at least 50 megabytes (and preferably more) of swap space available to do this.&quot;</span></div><div class="line" id="015103"><span class="nick" style="color:#389600"><a href="#015103" label="[01:51:03]">&lt;Googulator&gt;</a></span><span class="message">(and this was, of course, meant to be done on mainframes or at least minicomputers)</span></div><div class="line" id="015133"><span class="nick" style="color:#389600"><a href="#015133" label="[01:51:33]">&lt;Googulator&gt;</a></span><span class="message">On a modern AMD system - assuming it did indeed build everything it was supposed to -, the build took about a minute.</span></div><div class="line" id="015225"><span class="nick" style="color:#8dd3c7"><a href="#015225" label="[01:52:25]">&lt;stikonas&gt;</a></span><span class="message">well, resources is something we can be far more wasteful in modern bootstrapping</span></div><div class="line" id="015230"><span class="nick" style="color:#389600"><a href="#015230" label="[01:52:30]">&lt;Googulator&gt;</a></span><span class="message">Seems like we've come a long way since Yale Haskell was developed...</span></div><div class="line" id="015402"><span class="nick" style="color:#6d2462"><a href="#015402" label="[01:54:02]">&lt;nimaje&gt;</a></span><span class="message">I assume that faster hdds/ssds have also a play in that</span></div><div class="line" id="015418"><span class="nick" style="color:#389600"><a href="#015418" label="[01:54:18]">&lt;Googulator&gt;</a></span><span class="message">you were expected to compile this on a SPARC running SunOS, with Macintosh support &quot;planned&quot;</span></div><div class="line" id="015541"><span class="nick" style="color:#389600"><a href="#015541" label="[01:55:41]">&lt;Googulator&gt;</a></span><span class="message">also, the language it's written in is Common Lisp, which back in the day was notoriously difficult to implement in a performant way on regular hardware, leading to the birth of dedicated Lisp machines</span></div><div class="line" id="015628"><span class="nick" style="color:#389600"><a href="#015628" label="[01:56:28]">&lt;Googulator&gt;</a></span><span class="message">I guess all the optimizations that today's CPUs have (which gave us Spectre...) help with efficiently executing Lisp</span></div><div class="line" id="015736"><span class="nick" style="color:#389600"><a href="#015736" label="[01:57:36]">&lt;Googulator&gt;</a></span><span class="message">(isn't the &quot;knight&quot; architecture also based on a Lisp machine?)</span></div><div class="line" id="023903"><span class="nick" style="color:#8dd3c7"><a href="#023903" label="[02:39:03]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: ok, I merged it</span></div><div class="line" id="023918"><span class="nick" style="color:#8dd3c7"><a href="#023918" label="[02:39:18]">&lt;stikonas&gt;</a></span><span class="message">thanks for finishing it all!</span></div><div class="line" id="023933"><span class="nick" style="color:#8dd3c7"><a href="#023933" label="[02:39:33]">&lt;stikonas&gt;</a></span><span class="message">took over a year but now it's done</span></div><div class="line" id="024057"><span class="nick" style="color:#80b1d3"><a href="#024057" label="[02:40:57]">&lt;rickmasters&gt;</a></span><span class="message">great!</span></div><div class="line" id="025128"><span class="nick" style="color:#6b8072"><a href="#025128" label="[02:51:28]">&lt;oriansj&gt;</a></span><span class="message">Googulator: knight architecture predates lisp machines</span></div><div class="line" id="025240"><span class="nick" style="color:#6b8072"><a href="#025240" label="[02:52:40]">&lt;oriansj&gt;</a></span><span class="message">if I was to be 100% compatible, I would have to do symmetric compliment rather than twos</span></div><div class="line" id="025415"><span class="nick" style="color:#6b8072"><a href="#025415" label="[02:54:15]">&lt;oriansj&gt;</a></span><span class="message">(think -0 == NaN) and several integer operations could result in NaN values being put in registers and there were jump and skip instructions if the value in the register was NaN</span></div><div class="line" id="032406"><span class="nick" style="color:#389600"><a href="#032406" label="[03:24:06]">&lt;Googulator&gt;</a></span><span class="message">I wasn't aware Tom Knight designed any other ISA before CONS</span></div><div class="line" id="032416"><span class="nick" style="color:#389600"><a href="#032416" label="[03:24:16]">&lt;Googulator&gt;</a></span><span class="message">(the initial Lisp machine ISA)</span></div><div class="line" id="032612"><span class="nick" style="color:#389600"><a href="#032612" label="[03:26:12]">&lt;Googulator&gt;</a></span><span class="message">or is it not named for him?</span></div><div class="line" id="033620"><span class="nick" style="color:#389600"><a href="#033620" label="[03:36:20]">&lt;Googulator&gt;</a></span><span class="message">rickmasters: builds completed successfully on both of my bare metal test systems</span></div><div class="line" id="033709"><span class="nick" style="color:#80b1d3"><a href="#033709" label="[03:37:09]">&lt;rickmasters&gt;</a></span><span class="message">Googulator: great. thank you</span></div><div class="line" id="094653"><span class="nick" style="color:#389600"><a href="#094653" label="[09:46:53]">&lt;Googulator&gt;</a></span><span class="message">pder: are you still seeing the Fiwix memory map issue with the new 1.5.0-lb1?</span></div><div class="line" id="094726"><span class="nick" style="color:#389600"><a href="#094726" label="[09:47:26]">&lt;Googulator&gt;</a></span><span class="message">(it's merged into LB master.)</span></div><div class="line" id="114045"><span class="nick" style="color:#234e69"><a href="#114045" label="[11:40:45]">&lt;fossy&gt;</a></span><span class="message">Googulator: i have done a bit of bare metal testing but will be doing more when all your PRs are merged... i'm on the move a bit though, so it can be difficult for me to have a reasonable feedback cycle</span></div><div class="line" id="114047"><span class="nick" style="color:#234e69"><a href="#114047" label="[11:40:47]">&lt;fossy&gt;</a></span><span class="message">might need a kvm</span></div><div class="line" id="114209"><span class="nick" style="color:#234e69"><a href="#114209" label="[11:42:09]">&lt;fossy&gt;</a></span><span class="message">Piraty: hm? no, i think it's just text form being text. legitimately do not use abi-dumper in live-bootstrap at all</span></div><div class="line" id="114718"><span class="nick" style="color:#234e69"><a href="#114718" label="[11:47:18]">&lt;fossy&gt;</a></span><span class="message">okey lets get some of these PRs merged</span></div><div class="line" id="125745"><span class="nick" style="color:#389600"><a href="#125745" label="[12:57:45]">&lt;Googulator&gt;</a></span><span class="message">fossy: Pushed a few more fixes, including a new PR to fix a bug in one that got merged</span></div><div class="line" id="125751"><span class="nick" style="color:#6c3d55"><a href="#125751" label="[12:57:51]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Googulator: I don't think it'd named after tom knight. It is after some company called knight</span></div><div class="line" id="130425"><span class="nick" style="color:#389600"><a href="#130425" label="[13:04:25]">&lt;Googulator&gt;</a></span><span class="message">In autogen-5.18.16, are we supposed to have &quot;SKIP_MAIN=1 . ./bootstrap_tarball.sh&quot; (note . before ./)?</span></div><div class="line" id="132614"><span class="nick" style="color:#389600"><a href="#132614" label="[13:26:14]">&lt;Googulator&gt;</a></span><span class="message">(figured out - yes, it's meant that way)</span></div><div class="line" id="134335"><span class="nick" style="color:#6c3d55"><a href="#134335" label="[13:43:35]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Jeremiah Orians&gt; <a rel="nofollow" href="https://www.semanticscholar.org/paper/High-resolution%2C-low-cost-laser-lithography-using-a-Rothenbach-Gupta/4daf4b2b878204f9cfc2126cda0966655b000c63">https://www.semanticscholar.org/paper/High-resolution%2C-low-cost-laser-lithography-using-a-Rothenbach-Gupta/4daf4b2b878204f9cfc2126cda0966655b000c63</a> </span></div><div class="line" id="134617"><span class="nick" style="color:#6c3d55"><a href="#134617" label="[13:46:17]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Jeremiah Orians&gt; Googulator: no it had nothing to do with Tom knight, it had more to do with chess. As their operating system was called bishop and their high level languages was called rook.</span></div><div class="line" id="163819"><span class="nick" style="color:#d9d9d9"><a href="#163819" label="[16:38:19]">&lt;muurkha&gt;</a></span><span class="message">GoogulatorMobile: I think &quot;notoriously difficult to implement in a performant way on regular hardware&quot; is a bit of an overstatement</span></div><div class="line" id="163856"><span class="nick" style="color:#d9d9d9"><a href="#163856" label="[16:38:56]">&lt;muurkha&gt;</a></span><span class="message">at the time designing hardware to support a particular language seemed like a reasonable thing to do</span></div><div class="line" id="163953"><span class="nick" style="color:#d9d9d9"><a href="#163953" label="[16:39:53]">&lt;muurkha&gt;</a></span><span class="message">for numerical code in the 70s MACLISP was already comparable to Fortran (though Fortran has advanced since then)</span></div><div class="line" id="164038"><span class="nick" style="color:#d9d9d9"><a href="#164038" label="[16:40:38]">&lt;muurkha&gt;</a></span><span class="message">one of the biggest problems for Lisp efficiency was garbage collection; generational GC wasn't invented until the early 01980s, and that was the crucial invention that made GC performance-competitive with malloc/free memory management</span></div><div class="line" id="164144"><span class="nick" style="color:#d9d9d9"><a href="#164144" label="[16:41:44]">&lt;muurkha&gt;</a></span><span class="message">it seems likely that &quot;50 megabytes of swap space&quot; was a workstation rather than a minicomputer or a mainframe.  though surely there were minicomputers that had that much</span></div><div class="line" id="164339"><span class="nick" style="color:#d9d9d9"><a href="#164339" label="[16:43:39]">&lt;muurkha&gt;</a></span><span class="message">GoogulatorMobile: the git repo of ghc 0.26 is very exciting news!</span></div><div class="line" id="164423"><span class="nick" style="color:#d9d9d9"><a href="#164423" label="[16:44:23]">&lt;muurkha&gt;</a></span><span class="message">oriansj: I wasn't talking about just assembly and assembly programs; you can also do BASIC or Forth in 4K.  building gcc in 16K would be quite a feat but you are probably right that it is possible</span></div><div class="line" id="164545"><span class="nick" style="color:#d9d9d9"><a href="#164545" label="[16:45:45]">&lt;muurkha&gt;</a></span><span class="message">that's getting pretty far into the Turing tarpit, though, because that's going to be spending orders of magnitude more time paging than computing, even if you use VAX-style 512-byte pages</span></div><div class="line" id="164808"><span class="nick" style="color:#d9d9d9"><a href="#164808" label="[16:48:08]">&lt;muurkha&gt;</a></span><span class="message">if you're going down into the tar that far, dmitry.gr got Linux to boot on an ATMega1284p: <a rel="nofollow" href="https://dmitry.gr/?r=05.Projects&amp;proj=07.%20Linux%20on%208bit">https://dmitry.gr/?r=05.Projects&amp;proj=07.%20Linux%20on%208bit</a> </span></div><div class="line" id="164918"><span class="nick" style="color:#d9d9d9"><a href="#164918" label="[16:49:18]">&lt;muurkha&gt;</a></span><span class="message">hmm, though I guess that does have 16KiB of RAM</span></div><div class="line" id="164954"><span class="nick" style="color:#d9d9d9"><a href="#164954" label="[16:49:54]">&lt;muurkha&gt;</a></span><span class="message">oh, and also an ATMega644a, which only has 4KiB</span></div><div class="line" id="165051"><span class="nick" style="color:#d9d9d9"><a href="#165051" label="[16:50:51]">&lt;muurkha&gt;</a></span><span class="message">this is using a DIMM as a &quot;large storage drive&quot; since the AVR doesn't have the capability to use external RAM as RAM</span></div><br /></div></body></html>