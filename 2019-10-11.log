<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2019-10-11.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="100051"><span class="nick" style="color:#8dd3c7"><a href="#100051" label="[10:00:51]">&lt;dgpv&gt;</a></span><span class="message">another 4 bytes easily shaved from stage0_monitor by using `TRUE R11` for toggle instead of `LOADUI R11 1`. There's straightforward way to shave maybe 12-16 bytes more by putting frequently used constants into registers, so I won't do PR just yet.</span></div><div class="line" id="104553"><span class="nick" style="color:#2e2a4a"><a href="#104553" label="[10:45:53]">&lt;damo22&gt;</a></span><span class="message">i read a recent blog post on guix.gnu.org regarding bootstrapping GCC.  I had thought about this problem a while ago and came to the conclusion it would be nice if gcc could be bootstrapped with a minimal binary</span></div><div class="line" id="104918"><span class="nick" style="color:#2e2a4a"><a href="#104918" label="[10:49:18]">&lt;damo22&gt;</a></span><span class="message">but now that gcc requires a c++ toolchain to bootstrap it, what is the ultimate solution?</span></div><div class="line" id="105116"><span class="nick" style="color:#8dd3c7"><a href="#105116" label="[10:51:16]">&lt;dgpv&gt;</a></span><span class="message">re stage0_monitor: `LOADUI R13 0x600            ; Where we are starting our Stack` -- is it important to use 0x600 here ? Some constraint on initial memory ? Or , for example, 0x1100 can be safely used ? (that would be another 2 bytes shaved)</span></div><div class="line" id="105221"><span class="nick" style="color:#8dd3c7"><a href="#105221" label="[10:52:21]">&lt;dgpv&gt;</a></span><span class="message">damo22: look at <a rel="nofollow" href="https://github.com/oriansj/stage0">https://github.com/oriansj/stage0</a> </span></div><div class="line" id="110553"><span class="nick" style="color:#2e2a4a"><a href="#110553" label="[11:05:53]">&lt;damo22&gt;</a></span><span class="message">dgpv: stage0 is a virtual machine loop that executes one instruction at a time?</span></div><div class="line" id="110955"><span class="nick" style="color:#8dd3c7"><a href="#110955" label="[11:09:55]">&lt;dgpv&gt;</a></span><span class="message">it is a minimal firmware blob for a specific architecture specified in ISA_HEX_Map.org</span></div><div class="line" id="112126"><span class="nick" style="color:#2e2a4a"><a href="#112126" label="[11:21:26]">&lt;damo22&gt;</a></span><span class="message">can one install stage0 in flash on x86 for example?</span></div><div class="line" id="112842"><span class="nick" style="color:#2e2a4a"><a href="#112842" label="[11:28:42]">&lt;damo22&gt;</a></span><span class="message">who invented Knight ISA?  it looks like a superset of ESIL from radare2</span></div><div class="line" id="114244"><span class="nick" style="color:#8dd3c7"><a href="#114244" label="[11:42:44]">&lt;dgpv&gt;</a></span><span class="message">I don't know who invented it, I just started to hack on this a couple days ago :-)</span></div><div class="line" id="114442"><span class="nick" style="color:#8dd3c7"><a href="#114442" label="[11:44:42]">&lt;dgpv&gt;</a></span><span class="message">didn't feel a need to google for that</span></div><div class="line" id="114517"><span class="nick" style="color:#8dd3c7"><a href="#114517" label="[11:45:17]">&lt;dgpv&gt;</a></span><span class="message">but I think the idea is that ultimately you would want to bootstrap not only with your software, but also with your hardware</span></div><div class="line" id="114547"><span class="nick" style="color:#8dd3c7"><a href="#114547" label="[11:45:47]">&lt;dgpv&gt;</a></span><span class="message">and that ISA is designed to be easily implementable</span></div><div class="line" id="114850"><span class="nick" style="color:#8dd3c7"><a href="#114850" label="[11:48:50]">&lt;dgpv&gt;</a></span><span class="message">although it begs the question, if you do not trust your x86 hardware to bootstrap a compiler, do you trust it to run that compiler afterwards - backdoored hardware may change the code of your compiler in memory :-)</span></div><div class="line" id="114924"><span class="nick" style="color:#8dd3c7"><a href="#114924" label="[11:49:24]">&lt;dgpv&gt;</a></span><span class="message">even if you checked the hash of the executable file</span></div><div class="line" id="115901"><span class="nick" style="color:#6b8072"><a href="#115901" label="[11:59:01]">&lt;janneke&gt;</a></span><span class="message">damo22: the ultimate solution we can only guess at</span></div><div class="line" id="115923"><span class="nick" style="color:#6b8072"><a href="#115923" label="[11:59:23]">&lt;janneke&gt;</a></span><span class="message">damo22: where we are now, and the next steps are sketched in <a rel="nofollow" href="https://guix.gnu.org/blog/2019/guix-reduces-bootstrap-seed-by-50">https://guix.gnu.org/blog/2019/guix-reduces-bootstrap-seed-by-50</a>  did you read that?</span></div><div class="line" id="120518"><span class="nick" style="color:#2e2a4a"><a href="#120518" label="[12:05:18]">&lt;damo22&gt;</a></span><span class="message">nice!</span></div><div class="line" id="120717"><span class="nick" style="color:#6b8072"><a href="#120717" label="[12:07:17]">&lt;janneke&gt;</a></span><span class="message">damo22: so ... we will see a baby steps path towards a cleaner bootstrap; removing intermediate steps and reducing bootstrap seeds as we go</span></div><div class="line" id="120831"><span class="nick" style="color:#6b8072"><a href="#120831" label="[12:08:31]">&lt;janneke&gt;</a></span><span class="message">code-wise this has been a 2 person show for ~2 years, currently we have ~4/5 people working on it, but when this really starts to fly -- who knows?  hex0 =&gt; MesCC++ =&gt; gcc-11 ?  Why not?</span></div><div class="line" id="121056"><span class="nick" style="color:#80b1d3"><a href="#121056" label="[12:10:56]">*</a></span><span class="message">janneke needs to go afk for a bit</span></div><div class="line" id="121058"><span class="nick" style="color:#2e2a4a"><a href="#121058" label="[12:10:58]">&lt;damo22&gt;</a></span><span class="message">have you heard of radare2? it implements ISAs in a vm-like way similar to your knight-vm</span></div><div class="line" id="121108"><span class="nick" style="color:#2e2a4a"><a href="#121108" label="[12:11:08]">&lt;damo22&gt;</a></span><span class="message">and has asm and disasm</span></div><div class="line" id="121141"><span class="nick" style="color:#2e2a4a"><a href="#121141" label="[12:11:41]">&lt;damo22&gt;</a></span><span class="message">many architectures are supported</span></div><div class="line" id="121221"><span class="nick" style="color:#2e2a4a"><a href="#121221" label="[12:12:21]">&lt;damo22&gt;</a></span><span class="message">im trying to think how that project could help you guys if it had support for your ISA</span></div><div class="line" id="121258"><span class="nick" style="color:#2e2a4a"><a href="#121258" label="[12:12:58]">&lt;damo22&gt;</a></span><span class="message">its like a virtualised debugger</span></div><div class="line" id="121319"><span class="nick" style="color:#2e2a4a"><a href="#121319" label="[12:13:19]">&lt;damo22&gt;</a></span><span class="message">but i think you already wrote one</span></div><div class="line" id="183541"><span class="nick">***</span><span class="message notice">ng0_ is now known as ng0</span></div><div class="line" id="223558"><span class="nick" style="color:#8dd3c7"><a href="#223558" label="[22:35:58]">&lt;dgpv&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/stage0/pull/21">https://github.com/oriansj/stage0/pull/21</a>  -- reduce stage0_monitor size by 10 bytes</span></div><div class="line" id="223653"><span class="nick" style="color:#8dd3c7"><a href="#223653" label="[22:36:53]">&lt;dgpv&gt;</a></span><span class="message">there's probably no easy way to reduce further without refactoring the actual code logic</span></div><div class="line" id="224039"><span class="nick" style="color:#6d2462"><a href="#224039" label="[22:40:39]">&lt;OriansJ`&gt;</a></span><span class="message">dgpv: thank you for finding those additional savings. as for 0x600; it was simply a stack address past the end of the binary that I knew I was not going to hit and when the vm and the ISA document don't match; the VM is the correct one and one should put in a issue/pull request to have it fixed.</span></div><div class="line" id="224113"><span class="nick" style="color:#6d2462"><a href="#224113" label="[22:41:13]">&lt;OriansJ`&gt;</a></span><span class="message">damo22: the ultimate goal is not only trusted bootstraps but also fully trusted hardware; as libresilicon is important to the final goal</span></div><div class="line" id="225336"><span class="nick" style="color:#6d2462"><a href="#225336" label="[22:53:36]">&lt;OriansJ`&gt;</a></span><span class="message">dgpv: the only thing I can think to not use 0x1100 as the stack pointer is that it would increase the total hardware requirement from 1600bytes of memory to 4360bytes. we could also eliminate it entirely by pulling stack operations entirely like I did in stage1_assembler-0.s</span></div><div class="line" id="225600"><span class="nick" style="color:#8dd3c7"><a href="#225600" label="[22:56:00]">&lt;dgpv&gt;</a></span><span class="message">why 1600 though</span></div><div class="line" id="225612"><span class="nick" style="color:#8dd3c7"><a href="#225612" label="[22:56:12]">&lt;dgpv&gt;</a></span><span class="message">1024 would also work, for example</span></div><div class="line" id="225619"><span class="nick" style="color:#8dd3c7"><a href="#225619" label="[22:56:19]">&lt;dgpv&gt;</a></span><span class="message">0x600 seems like arbitrary number</span></div><div class="line" id="225646"><span class="nick" style="color:#6d2462"><a href="#225646" label="[22:56:46]">&lt;OriansJ`&gt;</a></span><span class="message">it was;</span></div><div class="line" id="225721"><span class="nick" style="color:#6d2462"><a href="#225721" label="[22:57:21]">&lt;OriansJ`&gt;</a></span><span class="message">basically any number greater than the size of the binary itself will work</span></div><div class="line" id="225819"><span class="nick" style="color:#8dd3c7"><a href="#225819" label="[22:58:19]">&lt;dgpv&gt;</a></span><span class="message">must it be aligned by 4 ?</span></div><div class="line" id="225842"><span class="nick" style="color:#6d2462"><a href="#225842" label="[22:58:42]">&lt;OriansJ`&gt;</a></span><span class="message">no alignment constraints beyound byte aligned to 8bits</span></div><div class="line" id="230418"><span class="nick" style="color:#8dd3c7"><a href="#230418" label="[23:04:18]">&lt;dgpv&gt;</a></span><span class="message">only 4 bytes on stack is ever used</span></div><div class="line" id="230441"><span class="nick" style="color:#8dd3c7"><a href="#230441" label="[23:04:41]">&lt;dgpv&gt;</a></span><span class="message">because only one call</span></div><div class="line" id="230455"><span class="nick" style="color:#8dd3c7"><a href="#230455" label="[23:04:55]">&lt;dgpv&gt;</a></span><span class="message">(if PC is 32 bit)</span></div><div class="line" id="230621"><span class="nick" style="color:#6d2462"><a href="#230621" label="[23:06:21]">&lt;OriansJ`&gt;</a></span><span class="message">but only if one uses the push32 instruction as pushr will be dependent on on architecture size (aka will push 8bytes on 64bit implementations, etc)</span></div><div class="line" id="230640"><span class="nick" style="color:#8dd3c7"><a href="#230640" label="[23:06:40]">&lt;dgpv&gt;</a></span><span class="message">you can do `READPC R13` and the stack will garble the initialization commands</span></div><div class="line" id="230649"><span class="nick" style="color:#8dd3c7"><a href="#230649" label="[23:06:49]">&lt;dgpv&gt;</a></span><span class="message">but you do not need them at this point</span></div><div class="line" id="230721"><span class="nick" style="color:#6d2462"><a href="#230721" label="[23:07:21]">&lt;OriansJ`&gt;</a></span><span class="message">so if one wanted to be really clever, one could set the stack pointer to zero and simply overwrite that memory after it served it's purpose</span></div><div class="line" id="230743"><span class="nick" style="color:#8dd3c7"><a href="#230743" label="[23:07:43]">&lt;dgpv&gt;</a></span><span class="message">hmm</span></div><div class="line" id="230757"><span class="nick" style="color:#8dd3c7"><a href="#230757" label="[23:07:57]">&lt;dgpv&gt;</a></span><span class="message">stack pointer grows up ?</span></div><div class="line" id="230811"><span class="nick" style="color:#6d2462"><a href="#230811" label="[23:08:11]">&lt;OriansJ`&gt;</a></span><span class="message">yeah</span></div><div class="line" id="230836"><span class="nick" style="color:#6d2462"><a href="#230836" label="[23:08:36]">&lt;OriansJ`&gt;</a></span><span class="message">hence why any address past the end of the program works</span></div><div class="line" id="230849"><span class="nick" style="color:#8dd3c7"><a href="#230849" label="[23:08:49]">&lt;dgpv&gt;</a></span><span class="message">or at the start of the program</span></div><div class="line" id="230855"><span class="nick" style="color:#8dd3c7"><a href="#230855" label="[23:08:55]">&lt;dgpv&gt;</a></span><span class="message">where the initialization commands reside</span></div><div class="line" id="230902"><span class="nick" style="color:#8dd3c7"><a href="#230902" label="[23:09:02]">&lt;dgpv&gt;</a></span><span class="message">you do not need them after init</span></div><div class="line" id="230908"><span class="nick" style="color:#6d2462"><a href="#230908" label="[23:09:08]">&lt;OriansJ`&gt;</a></span><span class="message">exactly if you know exactly how much stack is required</span></div><div class="line" id="230950"><span class="nick" style="color:#8dd3c7"><a href="#230950" label="[23:09:50]">&lt;dgpv&gt;</a></span><span class="message">in the case of stage0_monitor it is known (up to size of the word on particular arch)</span></div><div class="line" id="230957"><span class="nick" style="color:#6d2462"><a href="#230957" label="[23:09:57]">&lt;OriansJ`&gt;</a></span><span class="message">aka, if the stack will never be more than 16bytes in size; one could do 16bytes of initialization before stack operations and have no fear</span></div><div class="line" id="231020"><span class="nick" style="color:#8dd3c7"><a href="#231020" label="[23:10:20]">&lt;dgpv&gt;</a></span><span class="message">so should I do `FALSE R13` to init stack, or this will be too hacky</span></div><div class="line" id="231050"><span class="nick" style="color:#6d2462"><a href="#231050" label="[23:10:50]">&lt;OriansJ`&gt;</a></span><span class="message">dgpv: no need; all registers are initialized to zero on power on</span></div><div class="line" id="231107"><span class="nick" style="color:#8dd3c7"><a href="#231107" label="[23:11:07]">&lt;dgpv&gt;</a></span><span class="message">heh</span></div><div class="line" id="231118"><span class="nick" style="color:#8dd3c7"><a href="#231118" label="[23:11:18]">&lt;dgpv&gt;</a></span><span class="message">so that is another 4 bytes saved, then</span></div><div class="line" id="231223"><span class="nick" style="color:#8dd3c7"><a href="#231223" label="[23:12:23]">&lt;dgpv&gt;</a></span><span class="message">`0D00002F     # FALSE R15 ; Our holder`</span></div><div class="line" id="231236"><span class="nick" style="color:#8dd3c7"><a href="#231236" label="[23:12:36]">&lt;dgpv&gt;</a></span><span class="message">that is also unnecessary init, then</span></div><div class="line" id="231252"><span class="nick" style="color:#6d2462"><a href="#231252" label="[23:12:52]">&lt;OriansJ`&gt;</a></span><span class="message">bingo (easy savings for others to find and fix)</span></div><div class="line" id="231318"><span class="nick" style="color:#6d2462"><a href="#231318" label="[23:13:18]">&lt;OriansJ`&gt;</a></span><span class="message">also if you look at stage1/stage1_assembler-0.s in the :hex function and compare it to the monitor you'll find another trick to save memory</span></div><div class="line" id="231447"><span class="nick" style="color:#8dd3c7"><a href="#231447" label="[23:14:47]">&lt;dgpv&gt;</a></span><span class="message">jsr_coroutine ?</span></div><div class="line" id="231508"><span class="nick" style="color:#6d2462"><a href="#231508" label="[23:15:08]">&lt;OriansJ`&gt;</a></span><span class="message">ANDI R0 R0 0xDF</span></div><div class="line" id="231644"><span class="nick" style="color:#6d2462"><a href="#231644" label="[23:16:44]">&lt;OriansJ`&gt;</a></span><span class="message">jsr_coroutine can be used to eliminate stack usage if you know you are going to bounce between known functions</span></div><div class="line" id="231837"><span class="nick" style="color:#6d2462"><a href="#231837" label="[23:18:37]">&lt;OriansJ`&gt;</a></span><span class="message">and the merge request &quot;Reduce stage0_monitor by 10 bytes&quot; forgot to update the checksum in bootstrapping\ Steps.org</span></div><div class="line" id="231855"><span class="nick" style="color:#8dd3c7"><a href="#231855" label="[23:18:55]">&lt;dgpv&gt;</a></span><span class="message">`ANDI R0 R0 0xDF` -- that is refactoring code logic for space savings</span></div><div class="line" id="231914"><span class="nick" style="color:#8dd3c7"><a href="#231914" label="[23:19:14]">&lt;dgpv&gt;</a></span><span class="message">at this moment I just went for simple things without changing the logic</span></div><div class="line" id="231921"><span class="nick" style="color:#8dd3c7"><a href="#231921" label="[23:19:21]">&lt;dgpv&gt;</a></span><span class="message">will fix the checksum</span></div><div class="line" id="232013"><span class="nick" style="color:#6d2462"><a href="#232013" label="[23:20:13]">&lt;OriansJ`&gt;</a></span><span class="message">dgpv: completely fair and I must say excellent work</span></div><div class="line" id="232117"><span class="nick" style="color:#8dd3c7"><a href="#232117" label="[23:21:17]">&lt;dgpv&gt;</a></span><span class="message">thanks</span></div><div class="line" id="232307"><span class="nick" style="color:#6d2462"><a href="#232307" label="[23:23:07]">&lt;OriansJ`&gt;</a></span><span class="message">although you might wish to add asm to stage0_test_scratch's dependencies, otherwise it will not be built when one does make clean test and they might hit an error (despite that all builds succeeded)</span></div><div class="line" id="232328"><span class="nick" style="color:#8dd3c7"><a href="#232328" label="[23:23:28]">&lt;dgpv&gt;</a></span><span class="message">I probably pause at this stage -- it was easy and fun, but tomorrow has to get back to my main project</span></div><div class="line" id="232348"><span class="nick" style="color:#6d2462"><a href="#232348" label="[23:23:48]">&lt;OriansJ`&gt;</a></span><span class="message">dgpv: thank you for taking the time ^_^</span></div><div class="line" id="232404"><span class="nick" style="color:#6d2462"><a href="#232404" label="[23:24:04]">&lt;OriansJ`&gt;</a></span><span class="message">best of luck with your main project</span></div><div class="line" id="232421"><span class="nick" style="color:#8dd3c7"><a href="#232421" label="[23:24:21]">&lt;dgpv&gt;</a></span><span class="message">:-)</span></div><div class="line" id="232529"><span class="nick" style="color:#8dd3c7"><a href="#232529" label="[23:25:29]">&lt;dgpv&gt;</a></span><span class="message">still have 30 min till my flight, will try to finish the remaining issues</span></div><div class="line" id="233200"><span class="nick" style="color:#8dd3c7"><a href="#233200" label="[23:32:00]">&lt;dgpv&gt;</a></span><span class="message">ok pushed the stack-at-zero / no-FALSE-R15 and fixes for hashes</span></div><div class="line" id="233213"><span class="nick" style="color:#8dd3c7"><a href="#233213" label="[23:32:13]">&lt;dgpv&gt;</a></span><span class="message">and the asm dependency in makefile</span></div><div class="line" id="233458"><span class="nick" style="color:#6d2462"><a href="#233458" label="[23:34:58]">&lt;OriansJ`&gt;</a></span><span class="message">dgpv: thank you</span></div><div class="line" id="233502"><span class="nick" style="color:#8dd3c7"><a href="#233502" label="[23:35:02]">&lt;dgpv&gt;</a></span><span class="message">will force-push</span></div><div class="line" id="233507"><span class="nick" style="color:#8dd3c7"><a href="#233507" label="[23:35:07]">&lt;dgpv&gt;</a></span><span class="message">updated comment</span></div><div class="line" id="233531"><span class="nick" style="color:#8dd3c7"><a href="#233531" label="[23:35:31]">&lt;dgpv&gt;</a></span><span class="message">forgot to mention that the stack usage is fixed and thus it is ok to set stack at zero</span></div><div class="line" id="233540"><span class="nick" style="color:#6d2462"><a href="#233540" label="[23:35:40]">&lt;OriansJ`&gt;</a></span><span class="message">damo22: you may wish to look at <a rel="nofollow" href="https://github.com/oriansj/stage0/tree/master/Linux%20Bootstrap">https://github.com/oriansj/stage0/tree/master/Linux%20Bootstrap</a>  as it includes the x86 and AMD64 versions of hex0-&gt;M2-Planet</span></div><div class="line" id="233634"><span class="nick" style="color:#6d2462"><a href="#233634" label="[23:36:34]">&lt;OriansJ`&gt;</a></span><span class="message">dgpv: just let me know when you are happy with it and I'll merge after review</span></div><div class="line" id="234400"><span class="nick" style="color:#8dd3c7"><a href="#234400" label="[23:44:00]">&lt;dgpv&gt;</a></span><span class="message">OK I think the PR is ready</span></div><div class="line" id="234428"><span class="nick" style="color:#8dd3c7"><a href="#234428" label="[23:44:28]">&lt;dgpv&gt;</a></span><span class="message">btw, what is the thing with OR/AND in ISA_HEX_Map.org ?</span></div><div class="line" id="234515"><span class="nick" style="color:#8dd3c7"><a href="#234515" label="[23:45:15]">&lt;dgpv&gt;</a></span><span class="message">they are listed as 4-byte instructions, but the vm expect 6-byte and asm generate 6-byte</span></div><div class="line" id="234542"><span class="nick" style="color:#8dd3c7"><a href="#234542" label="[23:45:42]">&lt;dgpv&gt;</a></span><span class="message">`** Bit optimization group`</span></div><div class="line" id="234556"><span class="nick" style="color:#8dd3c7"><a href="#234556" label="[23:45:56]">&lt;dgpv&gt;</a></span><span class="message">`| B0 ab ii ii | ANDI a b ii ii  | a = b &amp; ii ii      |`</span></div><div class="line" id="234645"><span class="nick" style="color:#6d2462"><a href="#234645" label="[23:46:45]">&lt;OriansJ`&gt;</a></span><span class="message">dgpv: and the PR has been merged</span></div><div class="line" id="234711"><span class="nick" style="color:#8dd3c7"><a href="#234711" label="[23:47:11]">&lt;dgpv&gt;</a></span><span class="message">I was confused because other immediate-arg instructions all 6 bytes long with E1 00 prefix, and these are listed without prefix</span></div><div class="line" id="234731"><span class="nick" style="color:#8dd3c7"><a href="#234731" label="[23:47:31]">&lt;dgpv&gt;</a></span><span class="message">&gt; PR has been merged -- cool !</span></div><div class="line" id="235028"><span class="nick" style="color:#6d2462"><a href="#235028" label="[23:50:28]">&lt;OriansJ`&gt;</a></span><span class="message">The thing with ORI/ANDI in ISA_HEX_Map.org is that I missed them when I updated the implementation of the VM along with the assembler &gt;.&lt;</span></div><div class="line" id="235125"><span class="nick" style="color:#8dd3c7"><a href="#235125" label="[23:51:25]">&lt;dgpv&gt;</a></span><span class="message">so the issue is that documentation is out of date</span></div><div class="line" id="235132"><span class="nick" style="color:#6d2462"><a href="#235132" label="[23:51:32]">&lt;OriansJ`&gt;</a></span><span class="message">bingo</span></div><div class="line" id="235135"><span class="nick" style="color:#8dd3c7"><a href="#235135" label="[23:51:35]">&lt;dgpv&gt;</a></span><span class="message">ok</span></div><div class="line" id="235823"><span class="nick" style="color:#6d2462"><a href="#235823" label="[23:58:23]">&lt;OriansJ`&gt;</a></span><span class="message">speaking of things I forgot to do; I really need to merge the AMD64 bootstrap +seed into mescc-tools-seed</span></div><div class="line" id="235920"><span class="nick" style="color:#6d2462"><a href="#235920" label="[23:59:20]">&lt;OriansJ`&gt;</a></span><span class="message">and get back cracking on slow-utils; speaking of which janneke hopefully you have tested the pieces completed so far and found them acceptable</span></div><br /></div></body></html>