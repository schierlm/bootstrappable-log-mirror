<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-10-06.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000617"><span class="nick" style="color:#389600"><a href="#000617" label="[00:06:17]">&lt;stikonas&gt;</a></span><span class="message">oriansj: maybe the easiest solution is to create submodule symlinks in $ARCH/ directories, e.g. x86/mescc-tools -&gt; ../mescc-tools and adjust kaem scripts to assume $ARCH is the root dir</span></div><div class="line" id="000718"><span class="nick" style="color:#389600"><a href="#000718" label="[00:07:18]">&lt;stikonas&gt;</a></span><span class="message">(the problem is that when live-bootrap starts, we have no means of changing current directory, so $ARCH dir has to be the root directory</span></div><div class="line" id="001332"><span class="nick" style="color:#389600"><a href="#001332" label="[00:13:32]">&lt;stikonas&gt;</a></span><span class="message">then live-bootstrap can basically just copy $ARCH directory into /, replace symlinks with actual directories and would just work</span></div><div class="line" id="001926"><span class="nick" style="color:#2e2a4a"><a href="#001926" label="[00:19:26]">&lt;oriansj&gt;</a></span><span class="message">clemens3: the issue with mes is mes hasn't been updated to be compatible with the latest release of mescc-tools (as it required a breaking change for RISC-V support) If you just use one release previous it will work just fine</span></div><div class="line" id="002232"><span class="nick" style="color:#2e2a4a"><a href="#002232" label="[00:22:32]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well mescc-tools-extra uses the full kaem, so we certainly have a great many options to sort it out, including just replacing the mescc-tools-extra kaem script</span></div><div class="line" id="002317"><span class="nick" style="color:#389600"><a href="#002317" label="[00:23:17]">&lt;stikonas&gt;</a></span><span class="message">well, yes, replacing mescc-tools-extra kaem script might work too</span></div><div class="line" id="002331"><span class="nick" style="color:#389600"><a href="#002331" label="[00:23:31]">&lt;stikonas&gt;</a></span><span class="message">I'm just trying to think of something that would require least maintenance in the future</span></div><div class="line" id="002342"><span class="nick" style="color:#389600"><a href="#002342" label="[00:23:42]">&lt;stikonas&gt;</a></span><span class="message">hence that symlink idea</span></div><div class="line" id="002357"><span class="nick" style="color:#389600"><a href="#002357" label="[00:23:57]">&lt;stikonas&gt;</a></span><span class="message">i.e. making $ARCH directories fully self-contained</span></div><div class="line" id="002409"><span class="nick" style="color:#389600"><a href="#002409" label="[00:24:09]">&lt;stikonas&gt;</a></span><span class="message">not just split bin files</span></div><div class="line" id="002423"><span class="nick" style="color:#389600"><a href="#002423" label="[00:24:23]">&lt;stikonas&gt;</a></span><span class="message">but that's just one option...</span></div><div class="line" id="002502"><span class="nick" style="color:#2e2a4a"><a href="#002502" label="[00:25:02]">&lt;oriansj&gt;</a></span><span class="message">is there a problem with the root of live-bootstrap just being the stage0-posix tarball extracted and the after.kaem replaced?</span></div><div class="line" id="002712"><span class="nick" style="color:#2e2a4a"><a href="#002712" label="[00:27:12]">&lt;oriansj&gt;</a></span><span class="message">because I can trivially change the scripts up to not have to do the cd $ARCH bit</span></div><div class="line" id="002847"><span class="nick" style="color:#389600"><a href="#002847" label="[00:28:47]">&lt;stikonas&gt;</a></span><span class="message">well, yes, we basically need to enter x86 directory and run kaem there</span></div><div class="line" id="002914"><span class="nick" style="color:#2e2a4a"><a href="#002914" label="[00:29:14]">&lt;oriansj&gt;</a></span><span class="message">So if I remove the need to enter the x86 directory, problem solved?</span></div><div class="line" id="002921"><span class="nick" style="color:#389600"><a href="#002921" label="[00:29:21]">&lt;stikonas&gt;</a></span><span class="message">I think so</span></div><div class="line" id="002933"><span class="nick" style="color:#389600"><a href="#002933" label="[00:29:33]">&lt;stikonas&gt;</a></span><span class="message">we did quite ugly hack before</span></div><div class="line" id="002935"><span class="nick" style="color:#2e2a4a"><a href="#002935" label="[00:29:35]">&lt;oriansj&gt;</a></span><span class="message">I'm game for that change after I finish my isolation work</span></div><div class="line" id="002956"><span class="nick" style="color:#2e2a4a"><a href="#002956" label="[00:29:56]">&lt;oriansj&gt;</a></span><span class="message">Then all you would have to do is replace after.kaem</span></div><div class="line" id="003002"><span class="nick" style="color:#389600"><a href="#003002" label="[00:30:02]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysa.py#L61">https://github.com/fosslinux/live-bootstrap/blob/master/sysa.py#L61</a> </span></div><div class="line" id="003036"><span class="nick" style="color:#2e2a4a"><a href="#003036" label="[00:30:36]">&lt;oriansj&gt;</a></span><span class="message">yeah, I'm am going to eliminate all of that complexity for you</span></div><div class="line" id="003131"><span class="nick" style="color:#389600"><a href="#003131" label="[00:31:31]">&lt;stikonas&gt;</a></span><span class="message">so we have then kaem files in rootfs and all paths will contain $ARCH in kaem?</span></div><div class="line" id="003142"><span class="nick" style="color:#389600"><a href="#003142" label="[00:31:42]">&lt;stikonas&gt;</a></span><span class="message">s/rootfs/repository root/</span></div><div class="line" id="003323"><span class="nick" style="color:#2e2a4a"><a href="#003323" label="[00:33:23]">&lt;oriansj&gt;</a></span><span class="message">we first change the bootstrap-seed kaem in the following way: instead of kaem.run it becomes kaem.$ARCH is the name of the script it will run</span></div><div class="line" id="003605"><span class="nick" style="color:#2e2a4a"><a href="#003605" label="[00:36:05]">&lt;oriansj&gt;</a></span><span class="message">then populate the root of stage0-posix with the inital scripts and the rest can be self contained for each architecture</span></div><div class="line" id="003610"><span class="nick" style="color:#389600"><a href="#003610" label="[00:36:10]">&lt;stikonas&gt;</a></span><span class="message">yeah, that sounds good, although will need some recalculation in kaem-minimal.hex0</span></div><div class="line" id="003715"><span class="nick" style="color:#389600"><a href="#003715" label="[00:37:15]">&lt;stikonas&gt;</a></span><span class="message">shouldn't be too bad as it's just .data section...</span></div><div class="line" id="003721"><span class="nick" style="color:#2e2a4a"><a href="#003721" label="[00:37:21]">&lt;oriansj&gt;</a></span><span class="message">unfortunately but then live-bootstrap gets a no touch setup</span></div><div class="line" id="003736"><span class="nick" style="color:#389600"><a href="#003736" label="[00:37:36]">&lt;stikonas&gt;</a></span><span class="message">yes, so longer term it should be better</span></div><div class="line" id="003741"><span class="nick" style="color:#2e2a4a"><a href="#003741" label="[00:37:41]">&lt;oriansj&gt;</a></span><span class="message">just overwrite after.kaem and boom go</span></div><div class="line" id="003813"><span class="nick" style="color:#2e2a4a"><a href="#003813" label="[00:38:13]">&lt;oriansj&gt;</a></span><span class="message">better some short term pain for longer term benefits</span></div><div class="line" id="003859"><span class="nick" style="color:#389600"><a href="#003859" label="[00:38:59]">&lt;stikonas&gt;</a></span><span class="message">sounds good. Let's also get fossy's opinion on this</span></div><div class="line" id="003906"><span class="nick" style="color:#389600"><a href="#003906" label="[00:39:06]">&lt;stikonas&gt;</a></span><span class="message">but I think we'll have an agreement</span></div><div class="line" id="003925"><span class="nick" style="color:#2e2a4a"><a href="#003925" label="[00:39:25]">&lt;oriansj&gt;</a></span><span class="message">in the mean time, I'll get back to work on RISC-V isolation.</span></div><div class="line" id="003957"><span class="nick" style="color:#389600"><a href="#003957" label="[00:39:57]">&lt;stikonas&gt;</a></span><span class="message">hopefully it's not much harder than others... risc-v is slightly different due to kaem-micro...</span></div><div class="line" id="004248"><span class="nick" style="color:#2e2a4a"><a href="#004248" label="[00:42:48]">&lt;oriansj&gt;</a></span><span class="message">well lack of ability to edit kaem.run to change the first couple steps is less than ideal</span></div><div class="line" id="004530"><span class="nick" style="color:#389600"><a href="#004530" label="[00:45:30]">&lt;stikonas&gt;</a></span><span class="message">yes...</span></div><div class="line" id="004548"><span class="nick" style="color:#389600"><a href="#004548" label="[00:45:48]">&lt;stikonas&gt;</a></span><span class="message">well, we can always replace bootstrap seed with larger kaem-minimal</span></div><div class="line" id="015027"><span class="nick" style="color:#6b8072"><a href="#015027" label="[01:50:27]">&lt;fossy&gt;</a></span><span class="message">It would be *very* nice to not need to manipulate that extraction</span></div><div class="line" id="015113"><span class="nick" style="color:#6b8072"><a href="#015113" label="[01:51:13]">&lt;fossy&gt;</a></span><span class="message">&lt;stikonas&gt; well, we can always replace bootstrap seed with larger kaem-minimal</span></div><div class="line" id="015117"><span class="nick" style="color:#6b8072"><a href="#015117" label="[01:51:17]">&lt;fossy&gt;</a></span><span class="message">wdym?</span></div><div class="line" id="015125"><span class="nick" style="color:#6b8072"><a href="#015125" label="[01:51:25]">&lt;fossy&gt;</a></span><span class="message">I def want the hex0 kaem as the kaem seed</span></div><div class="line" id="015209"><span class="nick" style="color:#6b8072"><a href="#015209" label="[01:52:09]">&lt;fossy&gt;</a></span><span class="message">The plan sounds good though generally</span></div><div class="line" id="015258"><span class="nick" style="color:#6b8072"><a href="#015258" label="[01:52:58]">&lt;fossy&gt;</a></span><span class="message">Ideally the sysa rootfs would just be stage0-POSIX with bootstrap-seeds added and after.kaem and after/ added</span></div><div class="line" id="015545"><span class="nick" style="color:#389600"><a href="#015545" label="[01:55:45]">&lt;stikonas&gt;</a></span><span class="message">fossy: risc-v has a smaller kaem</span></div><div class="line" id="015549"><span class="nick" style="color:#389600"><a href="#015549" label="[01:55:49]">&lt;stikonas&gt;</a></span><span class="message">kaem-micro</span></div><div class="line" id="015603"><span class="nick" style="color:#389600"><a href="#015603" label="[01:56:03]">&lt;stikonas&gt;</a></span><span class="message">which is not really a shell</span></div><div class="line" id="015642"><span class="nick" style="color:#389600"><a href="#015642" label="[01:56:42]">&lt;stikonas&gt;</a></span><span class="message">fossy: <a rel="nofollow" href="https://github.com/stikonas/stage0-posix/blob/master/riscv64/GAS/kaem-micro.S">https://github.com/stikonas/stage0-posix/blob/master/riscv64/GAS/kaem-micro.S</a>  (GAS prototype)</span></div><div class="line" id="015703"><span class="nick" style="color:#389600"><a href="#015703" label="[01:57:03]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/stikonas/stage0-posix/blob/master/riscv64/kaem-micro.hex0">https://github.com/stikonas/stage0-posix/blob/master/riscv64/kaem-micro.hex0</a> </span></div><div class="line" id="015821"><span class="nick" style="color:#389600"><a href="#015821" label="[01:58:21]">&lt;stikonas&gt;</a></span><span class="message">it's just hardcodes &quot;hex0-seed hex0_riscv64.hex0 hex0&quot; &quot;hex0 kaem-minimal.hex0 kaem&quot; and finally &quot;kaem&quot;</span></div><div class="line" id="015839"><span class="nick" style="color:#389600"><a href="#015839" label="[01:58:39]">&lt;stikonas&gt;</a></span><span class="message">it's 361 bytes then</span></div><div class="line" id="020028"><span class="nick" style="color:#389600"><a href="#020028" label="[02:00:28]">&lt;stikonas&gt;</a></span><span class="message">but editing those commands is somewhat harder...</span></div><div class="line" id="020044"><span class="nick" style="color:#389600"><a href="#020044" label="[02:00:44]">&lt;stikonas&gt;</a></span><span class="message">you have to ascii encode your commands and adjust some pointers</span></div><div class="line" id="024923"><span class="nick" style="color:#2e2a4a"><a href="#024923" label="[02:49:23]">&lt;oriansj&gt;</a></span><span class="message">well right now hard-coded kaem-macro might be smaller and is probably the optimal minimal bootstrap shell. (probably could exec that last command too) but right now the flexiblity of a kaem-optional that reads a script will probably better serve us while we sort out some details between stage0-posix and live-bootstrap</span></div><div class="line" id="025132"><span class="nick" style="color:#2e2a4a"><a href="#025132" label="[02:51:32]">&lt;oriansj&gt;</a></span><span class="message">So lets keep kaem-micro in our back pocket (possibly find a way to shrink it smaller and port to the other architectures as well) and once stage0-posix is the perfect drop in for live-bootstrap with all of the details worked out, we then will transistion to using it for all architectures.</span></div><div class="line" id="025709"><span class="nick" style="color:#80b1d3"><a href="#025709" label="[02:57:09]">&lt;pabs3&gt;</a></span><span class="message">re the developer trust stuff, I think this is a better model (social code review): <a rel="nofollow" href="https://github.com/crev-dev/">https://github.com/crev-dev/</a> </span></div><div class="line" id="025825"><span class="nick" style="color:#6d2462"><a href="#025825" label="[02:58:25]">&lt;xentrac&gt;</a></span><span class="message">than what?</span></div><div class="line" id="030007"><span class="nick" style="color:#80b1d3"><a href="#030007" label="[03:00:07]">&lt;pabs3&gt;</a></span><span class="message">than binary trust of individual developers</span></div><div class="line" id="030146"><span class="nick" style="color:#234e69"><a href="#030146" label="[03:01:46]">&lt;Hagfish&gt;</a></span><span class="message">pabs3: good point</span></div><div class="line" id="030222"><span class="nick" style="color:#234e69"><a href="#030222" label="[03:02:22]">&lt;Hagfish&gt;</a></span><span class="message">it's probably the other side of the coin when it comes to binary transparency / reproducible builds</span></div><div class="line" id="030349"><span class="nick" style="color:#234e69"><a href="#030349" label="[03:03:49]">&lt;Hagfish&gt;</a></span><span class="message">i wonder if there needs to be a system for randomly assigning code review tasks to developers and seeing if they can spot previously-found bugs</span></div><div class="line" id="030358"><span class="nick" style="color:#6d2462"><a href="#030358" label="[03:03:58]">&lt;xentrac&gt;</a></span><span class="message">that's an interesting idea</span></div><div class="line" id="030404"><span class="nick" style="color:#234e69"><a href="#030404" label="[03:04:04]">&lt;Hagfish&gt;</a></span><span class="message">maybe put some financial incentive in or gamify it some way</span></div><div class="line" id="030412"><span class="nick" style="color:#234e69"><a href="#030412" label="[03:04:12]">&lt;Hagfish&gt;</a></span><span class="message">could be implemented as a smart contract even</span></div><div class="line" id="030420"><span class="nick" style="color:#6c3d55"><a href="#030420" label="[03:04:20]">&lt;lfam&gt;</a></span><span class="message">What's measured gets managed</span></div><div class="line" id="030424"><span class="nick" style="color:#6d2462"><a href="#030424" label="[03:04:24]">&lt;xentrac&gt;</a></span><span class="message">although it won't necessarily help you to find classes of bugs that nobody knows about</span></div><div class="line" id="030451"><span class="nick" style="color:#6d2462"><a href="#030451" label="[03:04:51]">&lt;xentrac&gt;</a></span><span class="message">also, ultimately we should aim higher than just &quot;no bugs we know how to find&quot;</span></div><div class="line" id="030454"><span class="nick" style="color:#6d2462"><a href="#030454" label="[03:04:54]">&lt;xentrac&gt;</a></span><span class="message">we should aim for &quot;no bugs&quot;</span></div><div class="line" id="030517"><span class="nick" style="color:#6d2462"><a href="#030517" label="[03:05:17]">&lt;xentrac&gt;</a></span><span class="message">as an exercise I wrote binary search the other morning, not for the first time</span></div><div class="line" id="030523"><span class="nick" style="color:#234e69"><a href="#030523" label="[03:05:23]">&lt;Hagfish&gt;</a></span><span class="message">i think we're not even at the stage of &quot;we know whether to trust this reviewer or not&quot;</span></div><div class="line" id="030551"><span class="nick" style="color:#6d2462"><a href="#030551" label="[03:05:51]">&lt;xentrac&gt;</a></span><span class="message">I wasted about 20 minutes fiddling with the Python REPL and writing buggy versions</span></div><div class="line" id="030602"><span class="nick" style="color:#6d2462"><a href="#030602" label="[03:06:02]">&lt;xentrac&gt;</a></span><span class="message">finally I sat down with an empty text buffer and worked it out logically</span></div><div class="line" id="030610"><span class="nick" style="color:#6d2462"><a href="#030610" label="[03:06:10]">&lt;xentrac&gt;</a></span><span class="message">and then... it still didn't work</span></div><div class="line" id="030614"><span class="nick" style="color:#234e69"><a href="#030614" label="[03:06:14]">&lt;Hagfish&gt;</a></span><span class="message">heh</span></div><div class="line" id="030616"><span class="nick" style="color:#6d2462"><a href="#030616" label="[03:06:16]">&lt;xentrac&gt;</a></span><span class="message">but it was obvious why and so I fixed it</span></div><div class="line" id="030632"><span class="nick" style="color:#6d2462"><a href="#030632" label="[03:06:32]">&lt;xentrac&gt;</a></span><span class="message">which took about 10 minutes</span></div><div class="line" id="030712"><span class="nick" style="color:#6d2462"><a href="#030712" label="[03:07:12]">&lt;xentrac&gt;</a></span><span class="message">which is similar to my memory of the last time I did this; I spent about 15 minutes staring at the code and editing it before I tested it</span></div><div class="line" id="030716"><span class="nick" style="color:#6d2462"><a href="#030716" label="[03:07:16]">&lt;xentrac&gt;</a></span><span class="message">and it worked the first time</span></div><div class="line" id="030750"><span class="nick" style="color:#6d2462"><a href="#030750" label="[03:07:50]">&lt;xentrac&gt;</a></span><span class="message">ultimately we don't use the Haber-Bosch process because we trust Fritz Haber</span></div><div class="line" id="030814"><span class="nick" style="color:#6d2462"><a href="#030814" label="[03:08:14]">&lt;xentrac&gt;</a></span><span class="message">which is good, because nobody should trust Fritz Haber.  his wife committed suicide to escape being married to him</span></div><div class="line" id="030848"><span class="nick" style="color:#234e69"><a href="#030848" label="[03:08:48]">&lt;Hagfish&gt;</a></span><span class="message">the HB process has had plenty of time for people to gain confidence in its failure modes</span></div><div class="line" id="030901"><span class="nick" style="color:#6d2462"><a href="#030901" label="[03:09:01]">&lt;xentrac&gt;</a></span><span class="message">well, we have verifiable evidence that his process works</span></div><div class="line" id="030909"><span class="nick" style="color:#234e69"><a href="#030909" label="[03:09:09]">&lt;Hagfish&gt;</a></span><span class="message">if we could afford to wait a decade before installing a software update, we could probably have more security too</span></div><div class="line" id="030916"><span class="nick" style="color:#6d2462"><a href="#030916" label="[03:09:16]">&lt;xentrac&gt;</a></span><span class="message">there's only one instance of this I know of in the software world, which is seL4</span></div><div class="line" id="030943"><span class="nick" style="color:#6d2462"><a href="#030943" label="[03:09:43]">&lt;xentrac&gt;</a></span><span class="message">and of course even seL4 succumbed to Spectre: an out-of-context problem that its verification didn't address</span></div><div class="line" id="030951"><span class="nick" style="color:#234e69"><a href="#030951" label="[03:09:51]">&lt;Hagfish&gt;</a></span><span class="message">sure</span></div><div class="line" id="031017"><span class="nick" style="color:#234e69"><a href="#031017" label="[03:10:17]">&lt;Hagfish&gt;</a></span><span class="message">we shouldn't hold it against the reviewers of the seL4 code/proofs that they didn't think of Spectre</span></div><div class="line" id="031022"><span class="nick" style="color:#6d2462"><a href="#031022" label="[03:10:22]">&lt;xentrac&gt;</a></span><span class="message">but nobody has found a case where its proof was invalid, but slipped through Coq</span></div><div class="line" id="031048"><span class="nick" style="color:#6d2462"><a href="#031048" label="[03:10:48]">&lt;xentrac&gt;</a></span><span class="message">instead of trying and failing to find bugs, they went with trying to show the *absence* of bugs</span></div><div class="line" id="031100"><span class="nick" style="color:#6d2462"><a href="#031100" label="[03:11:00]">&lt;xentrac&gt;</a></span><span class="message">and it was much more difficult than finding bugs, but they did eventually succeed</span></div><div class="line" id="031108"><span class="nick" style="color:#234e69"><a href="#031108" label="[03:11:08]">&lt;Hagfish&gt;</a></span><span class="message">yeah, that's a good way to look at it</span></div><div class="line" id="031126"><span class="nick" style="color:#6d2462"><a href="#031126" label="[03:11:26]">&lt;xentrac&gt;</a></span><span class="message">similarly, reproducible builds allow us to not trust any one build machine</span></div><div class="line" id="031147"><span class="nick" style="color:#6d2462"><a href="#031147" label="[03:11:47]">&lt;xentrac&gt;</a></span><span class="message">because we have verifiable evidence that it builds things correctly</span></div><div class="line" id="031251"><span class="nick" style="color:#6d2462"><a href="#031251" label="[03:12:51]">&lt;xentrac&gt;</a></span><span class="message">it would be very desirable to eliminate single points of corruption where corrupting one guy can sabotage a bunch of people trying to cooperate</span></div><div class="line" id="031344"><span class="nick" style="color:#6d2462"><a href="#031344" label="[03:13:44]">&lt;xentrac&gt;</a></span><span class="message">so, I think code review is super useful, and even without *formal* proof we can ask people for *informal* proof in code reviews</span></div><div class="line" id="031410"><span class="nick" style="color:#6d2462"><a href="#031410" label="[03:14:10]">&lt;xentrac&gt;</a></span><span class="message">&quot;how do you know this aray index is within bounds?&quot;</span></div><div class="line" id="031417"><span class="nick" style="color:#2e2a4a"><a href="#031417" label="[03:14:17]">&lt;oriansj&gt;</a></span><span class="message">I'd be much happier if reproducible builds were the standard.</span></div><div class="line" id="031436"><span class="nick" style="color:#6d2462"><a href="#031436" label="[03:14:36]">&lt;xentrac&gt;</a></span><span class="message">we've made a lot of progress on that!</span></div><div class="line" id="031522"><span class="nick" style="color:#2e2a4a"><a href="#031522" label="[03:15:22]">&lt;oriansj&gt;</a></span><span class="message">depends where one is looking.</span></div><div class="line" id="031546"><span class="nick" style="color:#2e2a4a"><a href="#031546" label="[03:15:46]">&lt;oriansj&gt;</a></span><span class="message">In Debian, NixOS and Guix absolutely</span></div><div class="line" id="031553"><span class="nick" style="color:#d9d9d9"><a href="#031553" label="[03:15:53]">*</a></span><span class="message">xentrac flattens down his skirt self-consciously</span></div><div class="line" id="031600"><span class="nick" style="color:#2e2a4a"><a href="#031600" label="[03:16:00]">&lt;oriansj&gt;</a></span><span class="message">In the world of software in general. LOL nope</span></div><div class="line" id="031646"><span class="nick" style="color:#2e2a4a"><a href="#031646" label="[03:16:46]">&lt;oriansj&gt;</a></span><span class="message">there are compilers which can't even build hello world reproducibly</span></div><div class="line" id="031711"><span class="nick" style="color:#2e2a4a"><a href="#031711" label="[03:17:11]">&lt;oriansj&gt;</a></span><span class="message">So there is no hope for the tools that depend upon them for builds.</span></div><div class="line" id="031740"><span class="nick" style="color:#6d2462"><a href="#031740" label="[03:17:40]">&lt;xentrac&gt;</a></span><span class="message">yesterday I was very surprised to learn that my compiler *builds* hello world reproducibly, but once I started printing the address of a global variable as well as &quot;hello, world&quot;, it didn't *run* reproducibly</span></div><div class="line" id="031755"><span class="nick" style="color:#6d2462"><a href="#031755" label="[03:17:55]">&lt;xentrac&gt;</a></span><span class="message">because by default it was built as PIE for ASLR</span></div><div class="line" id="031818"><span class="nick" style="color:#6d2462"><a href="#031818" label="[03:18:18]">&lt;xentrac&gt;</a></span><span class="message">and -fno-pie didn't help</span></div><div class="line" id="031824"><span class="nick" style="color:#6d2462"><a href="#031824" label="[03:18:24]">&lt;xentrac&gt;</a></span><span class="message">it just broke the build</span></div><div class="line" id="031834"><span class="nick" style="color:#6d2462"><a href="#031834" label="[03:18:34]">&lt;xentrac&gt;</a></span><span class="message">by &quot;my compiler&quot; I mean &quot;the version of GCC I am using&quot;</span></div><div class="line" id="032002"><span class="nick" style="color:#80b1d3"><a href="#032002" label="[03:20:02]">&lt;pabs3&gt;</a></span><span class="message">why were you printing the variable address?</span></div><div class="line" id="032020"><span class="nick" style="color:#6d2462"><a href="#032020" label="[03:20:20]">&lt;xentrac&gt;</a></span><span class="message">to see if it was built as PIE even though I didn't ask for it to be</span></div><div class="line" id="032100"><span class="nick" style="color:#6d2462"><a href="#032100" label="[03:21:00]">&lt;xentrac&gt;</a></span><span class="message">because someone had just told me that was the default now and I said &quot;no it isn't&quot;</span></div><div class="line" id="032108"><span class="nick" style="color:#6d2462"><a href="#032108" label="[03:21:08]">&lt;xentrac&gt;</a></span><span class="message">so then I went and tested</span></div><div class="line" id="032113"><span class="nick" style="color:#6d2462"><a href="#032113" label="[03:21:13]">&lt;xentrac&gt;</a></span><span class="message">guess what, they were right</span></div><div class="line" id="032201"><span class="nick" style="color:#80b1d3"><a href="#032201" label="[03:22:01]">&lt;pabs3&gt;</a></span><span class="message">ah</span></div><div class="line" id="032207"><span class="nick" style="color:#6d2462"><a href="#032207" label="[03:22:07]">&lt;xentrac&gt;</a></span><span class="message">so I had to say &quot;hmm, yes apparently it is&quot;</span></div><div class="line" id="032228"><span class="nick" style="color:#6d2462"><a href="#032228" label="[03:22:28]">&lt;xentrac&gt;</a></span><span class="message">and try to scrunch down very small in the IRC channel so nobody would see me</span></div><div class="line" id="032321"><span class="nick" style="color:#6d2462"><a href="#032321" label="[03:23:21]">&lt;xentrac&gt;</a></span><span class="message">anyway, ASLR potentially adds nondeterminism to execution</span></div><div class="line" id="032322"><span class="nick" style="color:#80b1d3"><a href="#032322" label="[03:23:22]">&lt;pabs3&gt;</a></span><span class="message">everyone makes mistakes, no big deal</span></div><div class="line" id="032341"><span class="nick" style="color:#6d2462"><a href="#032341" label="[03:23:41]">&lt;xentrac&gt;</a></span><span class="message">yeah, but I had just been an arrogant dick about the mistake, see</span></div><div class="line" id="032344"><span class="nick" style="color:#6d2462"><a href="#032344" label="[03:23:44]">&lt;xentrac&gt;</a></span><span class="message">that was the embarrassig part</span></div><div class="line" id="032419"><span class="nick" style="color:#80b1d3"><a href="#032419" label="[03:24:19]">&lt;pabs3&gt;</a></span><span class="message">yeah, that isn't the greatest move in any situation :)</span></div><div class="line" id="032454"><span class="nick" style="color:#80b1d3"><a href="#032454" label="[03:24:54]">&lt;pabs3&gt;</a></span><span class="message">even one where you are obviously right and verified that fact</span></div><div class="line" id="032516"><span class="nick" style="color:#6d2462"><a href="#032516" label="[03:25:16]">&lt;xentrac&gt;</a></span><span class="message">yeah, it's probably been a career-limiting move for me more than once, although zero times I can absolutely verify</span></div><div class="line" id="032542"><span class="nick" style="color:#6d2462"><a href="#032542" label="[03:25:42]">&lt;xentrac&gt;</a></span><span class="message">but lots of times where that might have been the reason</span></div><div class="line" id="032550"><span class="nick" style="color:#6d2462"><a href="#032550" label="[03:25:50]">&lt;xentrac&gt;</a></span><span class="message">for not getting one opportunity or another</span></div><div class="line" id="032557"><span class="nick" style="color:#6d2462"><a href="#032557" label="[03:25:57]">&lt;xentrac&gt;</a></span><span class="message">anyway, enough therapy</span></div><div class="line" id="032728"><span class="nick" style="color:#6d2462"><a href="#032728" label="[03:27:28]">&lt;xentrac&gt;</a></span><span class="message">just an interesting note about ASLR: if there's data flow from pointer bits or between-sections pointer comparisons to your program, it may end up behaving different from run to run</span></div><div class="line" id="032844"><span class="nick" style="color:#6d2462"><a href="#032844" label="[03:28:44]">&lt;xentrac&gt;</a></span><span class="message">since on modern Linux everything gets built PIE (checksec can tell you)</span></div><div class="line" id="032855"><span class="nick" style="color:#6d2462"><a href="#032855" label="[03:28:55]">&lt;xentrac&gt;</a></span><span class="message">dunno if that's actually a thing anybody here is facing this week, but I thought it was an interesting learning, and potentially relevant</span></div><div class="line" id="032912"><span class="nick" style="color:#2e2a4a"><a href="#032912" label="[03:29:12]">&lt;oriansj&gt;</a></span><span class="message">I can only image the Lisp garbage collection behavior swings</span></div><div class="line" id="032939"><span class="nick" style="color:#2e2a4a"><a href="#032939" label="[03:29:39]">&lt;oriansj&gt;</a></span><span class="message">because pointer happy is an understatement</span></div><div class="line" id="032941"><span class="nick" style="color:#6d2462"><a href="#032941" label="[03:29:41]">&lt;xentrac&gt;</a></span><span class="message">I don't think it typically makes a difference for that</span></div><div class="line" id="033053"><span class="nick" style="color:#6d2462"><a href="#033053" label="[03:30:53]">&lt;xentrac&gt;</a></span><span class="message">(and unless you have finalizers, you won't have data flow back from the GC into the mutator, ideally)</span></div><div class="line" id="033639"><span class="nick" style="color:#2e2a4a"><a href="#033639" label="[03:36:39]">&lt;oriansj&gt;</a></span><span class="message">ideal and reality are both the same in one and completely different in the other.</span></div><div class="line" id="040240"><span class="nick" style="color:#2e2a4a"><a href="#040240" label="[04:02:40]">&lt;oriansj&gt;</a></span><span class="message">So close to being done with RISC-V isolation</span></div><div class="line" id="040258"><span class="nick" style="color:#2e2a4a"><a href="#040258" label="[04:02:58]">&lt;oriansj&gt;</a></span><span class="message">but its those last few steps that just were not quite right.</span></div><div class="line" id="044100"><span class="nick" style="color:#2e2a4a"><a href="#044100" label="[04:41:00]">&lt;oriansj&gt;</a></span><span class="message">hmmmm there is a bug in stage0-posix for RISC-V where mescc-tools-extra is built 3 times in a row</span></div><div class="line" id="044627"><span class="nick" style="color:#2e2a4a"><a href="#044627" label="[04:46:27]">&lt;oriansj&gt;</a></span><span class="message">I suspect there is a bug in kaem-minimal.hex0 but I'll have to dig into that tomorrow</span></div><div class="line" id="044757"><span class="nick" style="color:#2e2a4a"><a href="#044757" label="[04:47:57]">&lt;oriansj&gt;</a></span><span class="message">make clean test-all -j4 will attempt to do clean builds for all and sha256sum -c *.answers will show you if all architectures were built correctly</span></div><div class="line" id="091445"><span class="nick">***</span><span class="message notice">robin_ is now known as robin</span></div><div class="line" id="102052"><span class="nick" style="color:#6b8072"><a href="#102052" label="[10:20:52]">&lt;fossy&gt;</a></span><span class="message">Holy hell</span></div><div class="line" id="102100"><span class="nick" style="color:#6b8072"><a href="#102100" label="[10:21:00]">&lt;fossy&gt;</a></span><span class="message">autogen is the worst on bootstrapping</span></div><div class="line" id="102822"><span class="nick" style="color:#6b8072"><a href="#102822" label="[10:28:22]">&lt;fossy&gt;</a></span><span class="message">the FIRST COMMIT in the repository has a self-dependency. wtf</span></div><div class="line" id="113655"><span class="nick">***</span><span class="message notice">sm2n_ is now known as sm2n</span></div><div class="line" id="132822"><span class="nick" style="color:#2e2a4a"><a href="#132822" label="[13:28:22]">&lt;oriansj&gt;</a></span><span class="message">fossy: sounds like we found a new dragon to slay</span></div><div class="line" id="132915"><span class="nick" style="color:#2e2a4a"><a href="#132915" label="[13:29:15]">&lt;oriansj&gt;</a></span><span class="message">also another possiblity for the triple build: I make too many mistakes when tired and just missed something I did in the kaem scripts.</span></div><div class="line" id="133413"><span class="nick" style="color:#bc80bd"><a href="#133413" label="[13:34:13]">&lt;stikonas[m]&gt;</a></span><span class="message">yes, autogen is a nightmare. I had a look at it too</span></div><div class="line" id="133449"><span class="nick" style="color:#6b8072"><a href="#133449" label="[13:34:49]">&lt;fossy&gt;</a></span><span class="message">i have a feeling i might have a solution</span></div><div class="line" id="133455"><span class="nick" style="color:#bc80bd"><a href="#133455" label="[13:34:55]">&lt;stikonas[m]&gt;</a></span><span class="message">and it also interfaces quite closely with guile, so we might need somebody more familiar with scheme than fossy or me</span></div><div class="line" id="133458"><span class="nick" style="color:#bc80bd"><a href="#133458" label="[13:34:58]">&lt;stikonas[m]&gt;</a></span><span class="message">fossy oh?</span></div><div class="line" id="133516"><span class="nick" style="color:#6b8072"><a href="#133516" label="[13:35:16]">&lt;fossy&gt;</a></span><span class="message">the basic autogen package in the oldest tarball only uses one file, which is puerly for argument parsing</span></div><div class="line" id="133537"><span class="nick" style="color:#bc80bd"><a href="#133537" label="[13:35:37]">&lt;stikonas[m]&gt;</a></span><span class="message">oh ok, that can be rewritten</span></div><div class="line" id="133544"><span class="nick" style="color:#6b8072"><a href="#133544" label="[13:35:44]">&lt;fossy&gt;</a></span><span class="message">note there *are* other autogen files in the tree but only one is required for the actual autogen binary</span></div><div class="line" id="133555"><span class="nick" style="color:#bc80bd"><a href="#133555" label="[13:35:55]">&lt;stikonas[m]&gt;</a></span><span class="message">like perl 5.000 also had some perl script but I rewrote it in awk</span></div><div class="line" id="133604"><span class="nick" style="color:#6b8072"><a href="#133604" label="[13:36:04]">&lt;fossy&gt;</a></span><span class="message">so it would go something like build the autogen binary, rebuild the whole things, then go up the chain</span></div><div class="line" id="133610"><span class="nick" style="color:#bc80bd"><a href="#133610" label="[13:36:10]">&lt;stikonas[m]&gt;</a></span><span class="message">fossy, how soon do you think we can build it?</span></div><div class="line" id="133614"><span class="nick" style="color:#bc80bd"><a href="#133614" label="[13:36:14]">&lt;stikonas[m]&gt;</a></span><span class="message">before gcc?</span></div><div class="line" id="133639"><span class="nick" style="color:#6b8072"><a href="#133639" label="[13:36:39]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: idk much about the guile integration...</span></div><div class="line" id="133653"><span class="nick" style="color:#6b8072"><a href="#133653" label="[13:36:53]">&lt;fossy&gt;</a></span><span class="message">depends on whether guile can be moved</span></div><div class="line" id="133702"><span class="nick" style="color:#bc80bd"><a href="#133702" label="[13:37:02]">&lt;stikonas[m]&gt;</a></span><span class="message">well, if your method works, we don't need to worry abou that</span></div><div class="line" id="133704"><span class="nick" style="color:#bc80bd"><a href="#133704" label="[13:37:04]">&lt;stikonas[m]&gt;</a></span><span class="message">oh that's true</span></div><div class="line" id="133710"><span class="nick" style="color:#bc80bd"><a href="#133710" label="[13:37:10]">&lt;stikonas[m]&gt;</a></span><span class="message">so maybe we just do it after guile</span></div><div class="line" id="133716"><span class="nick" style="color:#6b8072"><a href="#133716" label="[13:37:16]">&lt;fossy&gt;</a></span><span class="message">yeah and use it for subsequent gccs</span></div><div class="line" id="133718"><span class="nick" style="color:#bc80bd"><a href="#133718" label="[13:37:18]">&lt;stikonas[m]&gt;</a></span><span class="message">and for gcc 10</span></div><div class="line" id="133733"><span class="nick" style="color:#bc80bd"><a href="#133733" label="[13:37:33]">&lt;stikonas[m]&gt;</a></span><span class="message">I think we can build 10 next, although we need newer binutils first</span></div><div class="line" id="133734"><span class="nick" style="color:#6b8072"><a href="#133734" label="[13:37:34]">&lt;fossy&gt;</a></span><span class="message">i think we can jump straight to gcc 10 now fingers crossed</span></div><div class="line" id="133757"><span class="nick" style="color:#6b8072"><a href="#133757" label="[13:37:57]">&lt;fossy&gt;</a></span><span class="message">but i think if we were to go to 11 we might have to stop at 10, 11 i think has a dependency on 4.9.4 or newer or something</span></div><div class="line" id="133759"><span class="nick" style="color:#bc80bd"><a href="#133759" label="[13:37:59]">&lt;stikonas[m]&gt;</a></span><span class="message">if I recall correctly, gcc 11 needs newer gcc than 4.7.4</span></div><div class="line" id="133804"><span class="nick" style="color:#bc80bd"><a href="#133804" label="[13:38:04]">&lt;stikonas[m]&gt;</a></span><span class="message">exactly</span></div><div class="line" id="133811"><span class="nick" style="color:#6b8072"><a href="#133811" label="[13:38:11]">&lt;fossy&gt;</a></span><span class="message">hah thinking the same thing</span></div><div class="line" id="133816"><span class="nick" style="color:#bc80bd"><a href="#133816" label="[13:38:16]">&lt;stikonas[m]&gt;</a></span><span class="message">so I think 10 and then latest (11 or so)</span></div><div class="line" id="133908"><span class="nick" style="color:#6b8072"><a href="#133908" label="[13:39:08]">&lt;fossy&gt;</a></span><span class="message">i think we are nearly there in terms of having a toolchain bootstrap, then we can look at things like other architectures, building actual linux distros, etc</span></div><div class="line" id="133926"><span class="nick" style="color:#bc80bd"><a href="#133926" label="[13:39:26]">&lt;stikonas[m]&gt;</a></span><span class="message">fossy: can you fix deblobbing first?</span></div><div class="line" id="133940"><span class="nick" style="color:#bc80bd"><a href="#133940" label="[13:39:40]">&lt;stikonas[m]&gt;</a></span><span class="message">we might need to store those scripts in our repo</span></div><div class="line" id="133948"><span class="nick" style="color:#6b8072"><a href="#133948" label="[13:39:48]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: oh yeah</span></div><div class="line" id="133954"><span class="nick" style="color:#bc80bd"><a href="#133954" label="[13:39:54]">&lt;stikonas[m]&gt;</a></span><span class="message">upstream does not keep them on download server for too long...</span></div><div class="line" id="134001"><span class="nick" style="color:#6b8072"><a href="#134001" label="[13:40:01]">&lt;fossy&gt;</a></span><span class="message">i didn't notice because they were in my sources/ folder</span></div><div class="line" id="134014"><span class="nick" style="color:#bc80bd"><a href="#134014" label="[13:40:14]">&lt;stikonas[m]&gt;</a></span><span class="message">so don't delete them for now...</span></div><div class="line" id="134017"><span class="nick" style="color:#bc80bd"><a href="#134017" label="[13:40:17]">&lt;stikonas[m]&gt;</a></span><span class="message">keep a backup</span></div><div class="line" id="134027"><span class="nick" style="color:#d9d9d9"><a href="#134027" label="[13:40:27]">*</a></span><span class="message">fossy practices 321 backups</span></div><div class="line" id="134034"><span class="nick" style="color:#6b8072"><a href="#134034" label="[13:40:34]">&lt;fossy&gt;</a></span><span class="message">sources is included in that</span></div><div class="line" id="134037"><span class="nick" style="color:#bc80bd"><a href="#134037" label="[13:40:37]">&lt;stikonas[m]&gt;</a></span><span class="message">unless latest 4.9.x deblob script works on older kernel</span></div><div class="line" id="134108"><span class="nick" style="color:#6b8072"><a href="#134108" label="[13:41:08]">&lt;fossy&gt;</a></span><span class="message">this is new</span></div><div class="line" id="134121"><span class="nick" style="color:#6b8072"><a href="#134121" label="[13:41:21]">&lt;fossy&gt;</a></span><span class="message">when i was making linux kernel literally EVERYTHING was there</span></div><div class="line" id="134128"><span class="nick" style="color:#6b8072"><a href="#134128" label="[13:41:28]">&lt;fossy&gt;</a></span><span class="message">thousands of versions were on that page</span></div><div class="line" id="134145"><span class="nick" style="color:#6b8072"><a href="#134145" label="[13:41:45]">&lt;fossy&gt;</a></span><span class="message">oh old/gen6</span></div><div class="line" id="134202"><span class="nick" style="color:#6b8072"><a href="#134202" label="[13:42:02]">&lt;fossy&gt;</a></span><span class="message">that's where our current script is</span></div><div class="line" id="134213"><span class="nick" style="color:#6b8072"><a href="#134213" label="[13:42:13]">&lt;fossy&gt;</a></span><span class="message">although i will look into using these new scripts</span></div><div class="line" id="134325"><span class="nick" style="color:#6b8072"><a href="#134325" label="[13:43:25]">&lt;fossy&gt;</a></span><span class="message">the diff is tiny, but it is probably best to stick with the thing actually for the version from old/gen6</span></div><div class="line" id="134913"><span class="nick" style="color:#bc80bd"><a href="#134913" label="[13:49:13]">&lt;stikonas[m]&gt;</a></span><span class="message">actually, I'm not sure which one is the best</span></div><div class="line" id="134918"><span class="nick" style="color:#bc80bd"><a href="#134918" label="[13:49:18]">&lt;stikonas[m]&gt;</a></span><span class="message">whether old or new...</span></div><div class="line" id="134933"><span class="nick" style="color:#bc80bd"><a href="#134933" label="[13:49:33]">&lt;stikonas[m]&gt;</a></span><span class="message">it might be that it doesn't matter</span></div><div class="line" id="135006"><span class="nick" style="color:#bc80bd"><a href="#135006" label="[13:50:06]">&lt;stikonas[m]&gt;</a></span><span class="message">although, even new versions might move at some point...</span></div><div class="line" id="140324"><span class="nick" style="color:#2e2a4a"><a href="#140324" label="[14:03:24]">&lt;oriansj&gt;</a></span><span class="message">54321 backups would be ideal, however finding the 5th person on 4 different Continents storing 3 copies on atleast 2 different types of media for the 1 purpose of preserving the data is quite a task.</span></div><div class="line" id="140353"><span class="nick" style="color:#6d2462"><a href="#140353" label="[14:03:53]">&lt;xentrac&gt;</a></span><span class="message">git is pretty good at that</span></div><div class="line" id="141610"><span class="nick" style="color:#3c5b35"><a href="#141610" label="[14:16:10]">&lt;clemens3&gt;</a></span><span class="message">oriansj: thanks for the feedback.. I assume you mean one release previous of mescc-tools?</span></div><div class="line" id="141628"><span class="nick" style="color:#3c5b35"><a href="#141628" label="[14:16:28]">&lt;clemens3&gt;</a></span><span class="message">i am there 3 commits after 1.3</span></div><div class="line" id="141701"><span class="nick" style="color:#3c5b35"><a href="#141701" label="[14:17:01]">&lt;clemens3&gt;</a></span><span class="message">i will try with Release_1.2.0 of mescc-tools..</span></div><div class="line" id="141920"><span class="nick" style="color:#3c5b35"><a href="#141920" label="[14:19:20]">&lt;clemens3&gt;</a></span><span class="message">hmm, seems something still strange.. I did messcc-tools of Release_1.2.0 but not sure about the submodule..</span></div><div class="line" id="141929"><span class="nick" style="color:#3c5b35"><a href="#141929" label="[14:19:29]">&lt;clemens3&gt;</a></span><span class="message">and mes git checkout master</span></div><div class="line" id="141937"><span class="nick" style="color:#3c5b35"><a href="#141937" label="[14:19:37]">&lt;clemens3&gt;</a></span><span class="message">still similar error</span></div><div class="line" id="141959"><span class="nick" style="color:#3c5b35"><a href="#141959" label="[14:19:59]">&lt;clemens3&gt;</a></span><span class="message">maybe let me know which commits/tags of which project and maybe also how to handle the sub module M2lib</span></div><div class="line" id="142021"><span class="nick" style="color:#3c5b35"><a href="#142021" label="[14:20:21]">&lt;clemens3&gt;</a></span><span class="message">of mescc-tools.. when/if time.. thanks..</span></div><div class="line" id="142529"><span class="nick" style="color:#bc80bd"><a href="#142529" label="[14:25:29]">&lt;stikonas[m]&gt;</a></span><span class="message">clemens3: did you run git submodule update ?</span></div><div class="line" id="150719"><span class="nick" style="color:#3c5b35"><a href="#150719" label="[15:07:19]">&lt;clemens3&gt;</a></span><span class="message">maybe that is the problem</span></div><div class="line" id="150727"><span class="nick" style="color:#3c5b35"><a href="#150727" label="[15:07:27]">&lt;clemens3&gt;</a></span><span class="message">the second time around..</span></div><div class="line" id="150847"><span class="nick" style="color:#3c5b35"><a href="#150847" label="[15:08:47]">&lt;clemens3&gt;</a></span><span class="message">so in mescc-tools cd  M2lib</span></div><div class="line" id="150849"><span class="nick" style="color:#3c5b35"><a href="#150849" label="[15:08:49]">&lt;clemens3&gt;</a></span><span class="message">git log</span></div><div class="line" id="150853"><span class="nick" style="color:#3c5b35"><a href="#150853" label="[15:08:53]">&lt;clemens3&gt;</a></span><span class="message">what commit should be there?</span></div><div class="line" id="150908"><span class="nick" style="color:#3c5b35"><a href="#150908" label="[15:09:08]">&lt;clemens3&gt;</a></span><span class="message">i have df1f4..</span></div><div class="line" id="152004"><span class="nick" style="color:#bc80bd"><a href="#152004" label="[15:20:04]">&lt;stikonas[m]&gt;</a></span><span class="message">df1f4 sounds correct</span></div><div class="line" id="152014"><span class="nick" style="color:#bc80bd"><a href="#152014" label="[15:20:14]">&lt;stikonas[m]&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/tree/Release_1.2.0">https://github.com/oriansj/mescc-tools/tree/Release_1.2.0</a> </span></div><div class="line" id="152025"><span class="nick" style="color:#bc80bd"><a href="#152025" label="[15:20:25]">&lt;stikonas[m]&gt;</a></span><span class="message">it shows taht revision here too ^</span></div><div class="line" id="152234"><span class="nick" style="color:#3c5b35"><a href="#152234" label="[15:22:34]">&lt;clemens3&gt;</a></span><span class="message">so i used that of mescc-tools and sudo make install as well</span></div><div class="line" id="152237"><span class="nick" style="color:#3c5b35"><a href="#152237" label="[15:22:37]">&lt;clemens3&gt;</a></span><span class="message">then mes</span></div><div class="line" id="152333"><span class="nick" style="color:#3c5b35"><a href="#152333" label="[15:23:33]">&lt;clemens3&gt;</a></span><span class="message">v0.22</span></div><div class="line" id="152335"><span class="nick" style="color:#3c5b35"><a href="#152335" label="[15:23:35]">&lt;clemens3&gt;</a></span><span class="message">error</span></div><div class="line" id="152348"><span class="nick" style="color:#3c5b35"><a href="#152348" label="[15:23:48]">&lt;clemens3&gt;</a></span><span class="message">wrote `module/mescc/bytevectors.go'</span></div><div class="line" id="152350"><span class="nick" style="color:#3c5b35"><a href="#152350" label="[15:23:50]">&lt;clemens3&gt;</a></span><span class="message">  GUILEC     module/mescc/compile.scm</span></div><div class="line" id="152352"><span class="nick" style="color:#3c5b35"><a href="#152352" label="[15:23:52]">&lt;clemens3&gt;</a></span><span class="message">make: *** [GNUmakefile:95: build] Error 1</span></div><div class="line" id="152739"><span class="nick" style="color:#bc80bd"><a href="#152739" label="[15:27:39]">&lt;stikonas[m]&gt;</a></span><span class="message">well, that's probably some guile issue. Your configure probably still misdetects it as guile 2...</span></div><div class="line" id="152744"><span class="nick" style="color:#bc80bd"><a href="#152744" label="[15:27:44]">&lt;stikonas[m]&gt;</a></span><span class="message">but do you have to use guile?</span></div><div class="line" id="152800"><span class="nick" style="color:#bc80bd"><a href="#152800" label="[15:28:00]">&lt;stikonas[m]&gt;</a></span><span class="message">mescc should work with mes</span></div><div class="line" id="152802"><span class="nick" style="color:#bc80bd"><a href="#152802" label="[15:28:02]">&lt;stikonas[m]&gt;</a></span><span class="message">although much slower</span></div><div class="line" id="152923"><span class="nick" style="color:#bc80bd"><a href="#152923" label="[15:29:23]">&lt;stikonas[m]&gt;</a></span><span class="message">gcc for building mes and guile for running mescc might be helpful for development, but if you want to bootstrap things, I would think you want to run mescc with mes</span></div><div class="line" id="153339"><span class="nick" style="color:#3c5b35"><a href="#153339" label="[15:33:39]">&lt;clemens3&gt;</a></span><span class="message">aeh, i have no clue, i am just building it out of curiousity..</span></div><div class="line" id="153356"><span class="nick" style="color:#3c5b35"><a href="#153356" label="[15:33:56]">&lt;clemens3&gt;</a></span><span class="message">using LFS 11.. maybe unusual combination of stuff installed</span></div><div class="line" id="153431"><span class="nick" style="color:#3c5b35"><a href="#153431" label="[15:34:31]">&lt;clemens3&gt;</a></span><span class="message">so guile is used to build mescc?</span></div><div class="line" id="153508"><span class="nick" style="color:#3c5b35"><a href="#153508" label="[15:35:08]">&lt;clemens3&gt;</a></span><span class="message">i try the bootstrap build</span></div><div class="line" id="153550"><span class="nick" style="color:#3c5b35"><a href="#153550" label="[15:35:50]">&lt;clemens3&gt;</a></span><span class="message">but it says the bootstrap build is part of guix..</span></div><div class="line" id="153556"><span class="nick" style="color:#3c5b35"><a href="#153556" label="[15:35:56]">&lt;clemens3&gt;</a></span><span class="message">have nothing todo with guix</span></div><div class="line" id="154930"><span class="nick" style="color:#bc80bd"><a href="#154930" label="[15:49:30]">&lt;stikonas[m]&gt;</a></span><span class="message">well, I wrote my own build script for mes/mescc for bootstrap</span></div><div class="line" id="154934"><span class="nick" style="color:#bc80bd"><a href="#154934" label="[15:49:34]">&lt;stikonas[m]&gt;</a></span><span class="message">(nothing to do with guix)</span></div><div class="line" id="154957"><span class="nick" style="color:#bc80bd"><a href="#154957" label="[15:49:57]">&lt;stikonas[m]&gt;</a></span><span class="message">but I think upstream build system should also be able to do that</span></div><div class="line" id="155009"><span class="nick" style="color:#bc80bd"><a href="#155009" label="[15:50:09]">&lt;stikonas[m]&gt;</a></span><span class="message">you might need M2-Planet build too...</span></div><div class="line" id="155106"><span class="nick" style="color:#bc80bd"><a href="#155106" label="[15:51:06]">&lt;stikonas[m]&gt;</a></span><span class="message">these are the commands we run in live-bootstrap to build some specific version of mes <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysa/mes/mes.kaem">https://github.com/fosslinux/live-bootstrap/blob/master/sysa/mes/mes.kaem</a> </span></div><div class="line" id="155222"><span class="nick" style="color:#bc80bd"><a href="#155222" label="[15:52:22]">&lt;stikonas[m]&gt;</a></span><span class="message">at the moment live-bootstrap uses HEAD^ from <a rel="nofollow" href="https://github.com/oriansj/mes-m2">https://github.com/oriansj/mes-m2</a> </span></div><div class="line" id="155239"><span class="nick" style="color:#bc80bd"><a href="#155239" label="[15:52:39]">&lt;stikonas[m]&gt;</a></span><span class="message">HEAD of master actually adds support for new mescc-tools</span></div><div class="line" id="163717"><span class="nick" style="color:#3c5b35"><a href="#163717" label="[16:37:17]">&lt;clemens3&gt;</a></span><span class="message">anyway, just feedback..</span></div><div class="line" id="163745"><span class="nick" style="color:#3c5b35"><a href="#163745" label="[16:37:45]">&lt;clemens3&gt;</a></span><span class="message">if need, happy to provide debugging logs..</span></div><div class="line" id="174951"><span class="nick" style="color:#389600"><a href="#174951" label="[17:49:51]">&lt;stikonas&gt;</a></span><span class="message">oriansj: you run mescc-tools-extra more than once because there is &quot;./bin/kaem --verbose --strict --file mescc-tools-full-kaem.kaem&quot; line in mescc-tools-mini-kaem.run</span></div><div class="line" id="175007"><span class="nick" style="color:#389600"><a href="#175007" label="[17:50:07]">&lt;stikonas&gt;</a></span><span class="message">and then another exec ./bin/kaem --verbose --strict --file mescc-tools-extra.kaem</span></div><div class="line" id="175043"><span class="nick" style="color:#389600"><a href="#175043" label="[17:50:43]">&lt;stikonas&gt;</a></span><span class="message">so it kaem files are both chained but also called from kaem.run</span></div><div class="line" id="175135"><span class="nick" style="color:#389600"><a href="#175135" label="[17:51:35]">&lt;stikonas&gt;</a></span><span class="message">so you get kaem.run-&gt;mini-&gt;full-&gt;extra then kaem.run-&gt;full-&gt; extra and finally kaem.run -&gt;extra</span></div><div class="line" id="175220"><span class="nick" style="color:#389600"><a href="#175220" label="[17:52:20]">&lt;stikonas&gt;</a></span><span class="message">so need to get rid of either chaning or extra invocations in kaem.run</span></div><div class="line" id="175228"><span class="nick" style="color:#389600"><a href="#175228" label="[17:52:28]">&lt;stikonas&gt;</a></span><span class="message">s/chaning/chaining/</span></div><div class="line" id="231158"><span class="nick" style="color:#6b8072"><a href="#231158" label="[23:11:58]">&lt;fossy&gt;</a></span><span class="message">stikonas: well, the diff between new and old, is that new blobs have been added/old blobs have been removed, in 4.9.x</span></div><div class="line" id="231209"><span class="nick" style="color:#6b8072"><a href="#231209" label="[23:12:09]">&lt;fossy&gt;</a></span><span class="message">so we do want old, to ensure we catch all the blobs for that version</span></div><div class="line" id="231329"><span class="nick" style="color:#389600"><a href="#231329" label="[23:13:29]">&lt;stikonas&gt;</a></span><span class="message">yeah, ok...</span></div><br /></div></body></html>