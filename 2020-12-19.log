<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-12-19.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000603"><span class="nick" style="color:#389600"><a href="#000603" label="[00:06:03]">&lt;OriansJ&gt;</a></span><span class="message">mihi: yes I am interested in the performance enhancements to hex2 and M2-Planet</span></div><div class="line" id="000726"><span class="nick" style="color:#389600"><a href="#000726" label="[00:07:26]">&lt;OriansJ&gt;</a></span><span class="message">as for the file buffering; we could create a more advanced libc written in C and called by the minimal libc.M1 we have</span></div><div class="line" id="001258"><span class="nick" style="color:#389600"><a href="#001258" label="[00:12:58]">&lt;OriansJ&gt;</a></span><span class="message">mihi: your mes-m2 pull request has been merged</span></div><div class="line" id="001728"><span class="nick" style="color:#389600"><a href="#001728" label="[00:17:28]">&lt;OriansJ&gt;</a></span><span class="message">mihi: the file_print :: fputs was simply to catch me from from making assumptions about what functions are available.</span></div><div class="line" id="001813"><span class="nick" style="color:#389600"><a href="#001813" label="[00:18:13]">&lt;OriansJ&gt;</a></span><span class="message">So it is just a tedious exercise to fix the references.</span></div><div class="line" id="002101"><span class="nick" style="color:#389600"><a href="#002101" label="[00:21:01]">&lt;OriansJ&gt;</a></span><span class="message">as for the use of in_set; it makes certain conditions easier to implement in assembly; as converting in_set(c, &quot;\t\n !#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~&quot;) to if('\t' == c || ..)and implementing in assembly is a non-starter. but in_set is just mov eax, [c] ; mov ebx, [string_1] call in_set</span></div><div class="line" id="002313"><span class="nick" style="color:#389600"><a href="#002313" label="[00:23:13]">&lt;OriansJ&gt;</a></span><span class="message">and as such I like how it looks better; it produces denser assembly (but slightly slower).</span></div><div class="line" id="002914"><span class="nick" style="color:#389600"><a href="#002914" label="[00:29:14]">&lt;OriansJ&gt;</a></span><span class="message">mihi: fossy is entirely responsible for the wonderful documentation work they did for mescc-tool-seed and all of the stage0 pieces honestly</span></div><div class="line" id="004057"><span class="nick" style="color:#389600"><a href="#004057" label="[00:40:57]">&lt;OriansJ&gt;</a></span><span class="message">we could strip FILE out of M2-planet and make it struct defined in file.c; with seperate read and write buffers that are allocated when openned and flushed when closed. The only thing we would need to do is ensure fflush or close is done before terminating the program (except on errors)</span></div><div class="line" id="004444"><span class="nick" style="color:#389600"><a href="#004444" label="[00:44:44]">&lt;OriansJ&gt;</a></span><span class="message">probably could fix all of the C file primitives to better match the standard (file_print -&gt; fputs) while we are at it</span></div><div class="line" id="004517"><span class="nick" style="color:#389600"><a href="#004517" label="[00:45:17]">&lt;OriansJ&gt;</a></span><span class="message">what do you think mihi?</span></div><div class="line" id="004749"><span class="nick" style="color:#2e2a4a"><a href="#004749" label="[00:47:49]">&lt;xentrac&gt;</a></span><span class="message">hooray!</span></div><div class="line" id="004956"><span class="nick" style="color:#389600"><a href="#004956" label="[00:49:56]">&lt;OriansJ&gt;</a></span><span class="message">mihi: honestly everything except for the pointer lookup tables; I would merge happily. The pointer lookup tables; I'd want a closer look at because if you can get it working in M2-Planet. I could figure out a way to add switch statement support to M2-Planet in a form that cc_x86 supports</span></div><div class="line" id="011447"><span class="nick" style="color:#2e2a4a"><a href="#011447" label="[01:14:47]">&lt;xentrac&gt;</a></span><span class="message">that's wonderful!</span></div><div class="line" id="014058"><span class="nick" style="color:#6b8072"><a href="#014058" label="[01:40:58]">&lt;siraben&gt;</a></span><span class="message">pder: ok, if the thousand of lines of assignments aren't good, would it be acceptable to output binary code from Haskell and load it in from a file?</span></div><div class="line" id="021509"><span class="nick" style="color:#389600"><a href="#021509" label="[02:15:09]">&lt;OriansJ&gt;</a></span><span class="message">pder: we could easily add support for putchar to M2-Planet's file.c</span></div><div class="line" id="021551"><span class="nick" style="color:#389600"><a href="#021551" label="[02:15:51]">&lt;OriansJ&gt;</a></span><span class="message">and getchar too</span></div><div class="line" id="021701"><span class="nick" style="color:#389600"><a href="#021701" label="[02:17:01]">&lt;OriansJ&gt;</a></span><span class="message">but if you could provide an example C program that breakss because of assignments; I can fix M2-Planet so that it isn't an issue anymore or help figure out another solution</span></div><div class="line" id="033504"><span class="nick" style="color:#6b8072"><a href="#033504" label="[03:35:04]">&lt;siraben&gt;</a></span><span class="message">OriansJ: is there a more elegant way to load the raw bytecode?</span></div><div class="line" id="034343"><span class="nick" style="color:#80b1d3"><a href="#034343" label="[03:43:43]">&lt;pder&gt;</a></span><span class="message">Oriansj, the easiest way to demonstrate the crash, is to checkout my branch marginally-m2-wip and run make marginally.c &amp;&amp; ./marginally.sh  The second script is a build script for marginally using M2-Planet</span></div><div class="line" id="034535"><span class="nick" style="color:#80b1d3"><a href="#034535" label="[03:45:35]">&lt;pder&gt;</a></span><span class="message">I was going to try splitting that code out into a separate file and compiling it with M2-Planet on its own</span></div><div class="line" id="034653"><span class="nick" style="color:#80b1d3"><a href="#034653" label="[03:46:53]">&lt;pder&gt;</a></span><span class="message">I also wonder how involved it would be to add support for array assignment with an initializer list to M2-Planet?</span></div><div class="line" id="034817"><span class="nick" style="color:#80b1d3"><a href="#034817" label="[03:48:17]">&lt;pder&gt;</a></span><span class="message">siraben, that might work and it would be handy to be able to open and write to multiple files from Haskell</span></div><div class="line" id="040338"><span class="nick" style="color:#6b8072"><a href="#040338" label="[04:03:38]">&lt;siraben&gt;</a></span><span class="message">ok, let me know what sort of binary format you need it in, little/big endian and structure</span></div><div class="line" id="040547"><span class="nick" style="color:#80b1d3"><a href="#040547" label="[04:05:47]">&lt;pder&gt;</a></span><span class="message">siraben, could we add more stuff to the ffi interface so we could open files and read and write to them?</span></div><div class="line" id="040627"><span class="nick" style="color:#80b1d3"><a href="#040627" label="[04:06:27]">&lt;pder&gt;</a></span><span class="message">If thats the case, I could output C code to one file and the prog data to another</span></div><div class="line" id="040658"><span class="nick" style="color:#6b8072"><a href="#040658" label="[04:06:58]">&lt;siraben&gt;</a></span><span class="message">yes, that would be a good start, extending the FFI</span></div><div class="line" id="040710"><span class="nick" style="color:#6b8072"><a href="#040710" label="[04:07:10]">&lt;siraben&gt;</a></span><span class="message">what sort of FFI functions do we have ATM?</span></div><div class="line" id="040741"><span class="nick" style="color:#80b1d3"><a href="#040741" label="[04:07:41]">&lt;pder&gt;</a></span><span class="message">getchar, putchar, getargcount, getargchar</span></div><div class="line" id="041110"><span class="nick" style="color:#6b8072"><a href="#041110" label="[04:11:10]">&lt;siraben&gt;</a></span><span class="message">Right, and how is that called from C?</span></div><div class="line" id="041558"><span class="nick" style="color:#80b1d3"><a href="#041558" label="[04:15:58]">&lt;pder&gt;</a></span><span class="message">take a look at the foreign() method either in vm.c or in generated/marginally.c</span></div><div class="line" id="043831"><span class="nick" style="color:#6b8072"><a href="#043831" label="[04:38:31]">&lt;siraben&gt;</a></span><span class="message">Ooh so it's some sort of blend of C and lambda calculus</span></div><div class="line" id="122715"><span class="nick" style="color:#389600"><a href="#122715" label="[12:27:15]">&lt;OriansJ&gt;</a></span><span class="message">pder: nice you managed to hit the recursive limit in recursive_output; I can fix that by reversing the list and looping through it iteratively</span></div><div class="line" id="122911"><span class="nick" style="color:#389600"><a href="#122911" label="[12:29:11]">&lt;OriansJ&gt;</a></span><span class="message">siraben: the most elegant way to load bytecode is --raw; it does no processing and just loads it</span></div><div class="line" id="123020"><span class="nick" style="color:#389600"><a href="#123020" label="[12:30:20]">&lt;OriansJ&gt;</a></span><span class="message">I am considering of taking out the messy logic used in -l and put it into a seperate program that converts its input into something that --raw will use happily</span></div><div class="line" id="123506"><span class="nick" style="color:#389600"><a href="#123506" label="[12:35:06]">&lt;OriansJ&gt;</a></span><span class="message">pder: well I am not absolutely sure about the complexity of array assignment being added but it probably is something managable with a little effort. The big problem is making sure you output the right sized output. As you would have to do something like :CONSTANT_foo &amp;CONSTANT_foo_address :CONSTANT_foo_address %3 $181 ... %8 (or !3 !181 depending on the size of the elementes of the array)</span></div><div class="line" id="123630"><span class="nick" style="color:#389600"><a href="#123630" label="[12:36:30]">&lt;OriansJ&gt;</a></span><span class="message">%3 being 32bit !3 being 8bit</span></div><div class="line" id="124313"><span class="nick" style="color:#389600"><a href="#124313" label="[12:43:13]">&lt;OriansJ&gt;</a></span><span class="message">siraben: a good change in the haskell code would to be harmonize the foreign function numbers in the pieces we have already converted to run on vm.c so that we can eliminate the need for --foreign 2</span></div><div class="line" id="125133"><span class="nick" style="color:#389600"><a href="#125133" label="[12:51:33]">&lt;OriansJ&gt;</a></span><span class="message">pder: I fixed M2-Planet to handle the larger output size you needed and the patches are up</span></div><div class="line" id="125254"><span class="nick" style="color:#389600"><a href="#125254" label="[12:52:54]">&lt;OriansJ&gt;</a></span><span class="message">and if you just stick <a rel="nofollow" href="https://paste.debian.net/1177580/">https://paste.debian.net/1177580/</a>  in your file.c; it'll compile without issue</span></div><div class="line" id="130018"><span class="nick" style="color:#389600"><a href="#130018" label="[13:00:18]">&lt;OriansJ&gt;</a></span><span class="message">also why I don't I do the simple thing and just add the bigger string option to M2-Planet</span></div><div class="line" id="130343"><span class="nick" style="color:#6d2462"><a href="#130343" label="[13:03:43]">&lt;Hagfish&gt;</a></span><span class="message">it feels like we're really seeing some &quot;network effects&quot;, and this project is showing it's more than the sum of its parts</span></div><div class="line" id="130352"><span class="nick" style="color:#6d2462"><a href="#130352" label="[13:03:52]">&lt;Hagfish&gt;</a></span><span class="message">keep up the great work, everyone</span></div><div class="line" id="132833"><span class="nick" style="color:#389600"><a href="#132833" label="[13:28:33]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: we have always had network effects; janneke's development of MesCC got a lot easier the second mescc-tools started catching bugs for him. Then the introduction of label&gt;label offset calculations made all ELF headers much easier for everyone</span></div><div class="line" id="134338"><span class="nick" style="color:#389600"><a href="#134338" label="[13:43:38]">&lt;OriansJ&gt;</a></span><span class="message">pder: the good news is ./bin/marginally builds and runs now</span></div><div class="line" id="134408"><span class="nick" style="color:#389600"><a href="#134408" label="[13:44:08]">&lt;OriansJ&gt;</a></span><span class="message">the bad news it runs long enough that I think it is hung in a loop</span></div><div class="line" id="134606"><span class="nick" style="color:#6d2462"><a href="#134606" label="[13:46:06]">&lt;Hagfish&gt;</a></span><span class="message">OriansJ: the beginnings of an exponential growth curve always look less significant, in hindsight, than they were at the time :)</span></div><div class="line" id="135102"><span class="nick" style="color:#234e69"><a href="#135102" label="[13:51:02]">&lt;mihi&gt;</a></span><span class="message">OriansJ, thanks for the feedback. About the file buffering, I see multiple ways of processding (having only looked at x86 arch and assuming the other ones are similar)</span></div><div class="line" id="135137"><span class="nick" style="color:#234e69"><a href="#135137" label="[13:51:37]">&lt;mihi&gt;</a></span><span class="message">1) change libc.M1 to call exit() instead of hardcoded syscall, make current exit to _exit (as by POSIX) and implement exit() in C that closes all files</span></div><div class="line" id="135146"><span class="nick" style="color:#234e69"><a href="#135146" label="[13:51:46]">&lt;mihi&gt;</a></span><span class="message">2) Rely on application code to close all files</span></div><div class="line" id="135204"><span class="nick" style="color:#234e69"><a href="#135204" label="[13:52:04]">&lt;mihi&gt;</a></span><span class="message">3) Make it optional - when application calls allow_file_buffering() it is responsible to close all files</span></div><div class="line" id="135212"><span class="nick" style="color:#234e69"><a href="#135212" label="[13:52:12]">&lt;mihi&gt;</a></span><span class="message">4) have separate file.c and file_bufio.c</span></div><div class="line" id="135330"><span class="nick" style="color:#234e69"><a href="#135330" label="[13:53:30]">&lt;mihi&gt;</a></span><span class="message">I currently am using a different struct name than FILE so that my prototype can work without changing the compiler. Also I only use one buffer and a flag whether it is currently buffering input or output (and on mode switch, seek or flush appropriately).</span></div><div class="line" id="135520"><span class="nick" style="color:#234e69"><a href="#135520" label="[13:55:20]">&lt;mihi&gt;</a></span><span class="message">your in_set example is a good example for a bad usage: I assume (without having checked all the special chars) that it should match newline, tab, space and all printable US-ASCII. And it is definitely harder to read than (c == '\t' || c == '\n' || (c &gt;=' ' &amp;&amp; c &lt;= '~)).</span></div><div class="line" id="135704"><span class="nick" style="color:#234e69"><a href="#135704" label="[13:57:04]">&lt;mihi&gt;</a></span><span class="message">side anecdote: End of last century, 11th alliance (11a.nu) released a bios password cracker, which - due to similar logic and the fact that the letter W is not used in the Swedish language - was unable to bruteforce passwords containing a 'W'.</span></div><div class="line" id="135819"><span class="nick" style="color:#234e69"><a href="#135819" label="[13:58:19]">&lt;mihi&gt;</a></span><span class="message">later came the much faster pwdigits password cracker which (due to short password hashes) could quickly find an equivalent password consisting only of digits that was at most 16 chars long for evey possible hash, so iBios320 became obsolete and they never bothered releasing a fixed version)</span></div><div class="line" id="140054"><span class="nick" style="color:#234e69"><a href="#140054" label="[14:00:54]">&lt;mihi&gt;</a></span><span class="message">I'm confident it is possible to build a M2-Planet compatible version of fasthex2 with pointer lookup tables, the main question is whether it is possible to do so without sacrificing speed when compiling with mescc/gcc/tcc</span></div><div class="line" id="140127"><span class="nick" style="color:#234e69"><a href="#140127" label="[14:01:27]">&lt;mihi&gt;</a></span><span class="message">anyway, got to go now. Will next try to polish my changes to hex2.c (except the pointer lookups) and blood-elf, and maybe add another patch across repos to add missing fclose calls.</span></div><div class="line" id="144023"><span class="nick" style="color:#389600"><a href="#144023" label="[14:40:23]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: completely fair; 4 years of work did produce an interesting foundation to build upon</span></div><div class="line" id="145027"><span class="nick" style="color:#389600"><a href="#145027" label="[14:50:27]">&lt;OriansJ&gt;</a></span><span class="message">mihi: I like option 2</span></div><div class="line" id="145134"><span class="nick" style="color:#389600"><a href="#145134" label="[14:51:34]">&lt;OriansJ&gt;</a></span><span class="message">mihi: perhaps easier to read with in_set is perhaps a matter of taste and your example doesn't actually provide matching results: <a rel="nofollow" href="https://paste.debian.net/1177589/">https://paste.debian.net/1177589/</a> </span></div><div class="line" id="145521"><span class="nick" style="color:#389600"><a href="#145521" label="[14:55:21]">&lt;OriansJ&gt;</a></span><span class="message">mihi: I do like that historical example and you are probably correct in that it would be vulnerable to that class of bugs if the goal was bruteforce password cracking but fortunately we are just dealing with a subset of ASCII chars as acceptable input.</span></div><div class="line" id="153507"><span class="nick" style="color:#80b1d3"><a href="#153507" label="[15:35:07]">&lt;pder&gt;</a></span><span class="message">OriansJ: thanks for fixing that so quickly.  I'm looking into the hang now.  It appears to be related to another comparison issue.  I should know something more soon.</span></div><div class="line" id="153511"><span class="nick" style="color:#389600"><a href="#153511" label="[15:35:11]">&lt;OriansJ&gt;</a></span><span class="message">another reason why I do it this way is *IF* the mapping between letters and the binary values that encode them is different; the behavior is universally identical. which is nice that it doesn't have a reasl performance impact as M2-Planet can compile a 24.599 line source file in 0.35 seconds (wall clock)</span></div><div class="line" id="153548"><span class="nick" style="color:#389600"><a href="#153548" label="[15:35:48]">&lt;OriansJ&gt;</a></span><span class="message">pder: in a few minutes you should have an update to allow arbitrary MAX_STRING sizes</span></div><div class="line" id="153611"><span class="nick" style="color:#389600"><a href="#153611" label="[15:36:11]">&lt;OriansJ&gt;</a></span><span class="message">just got to put it though its paces</span></div><div class="line" id="154242"><span class="nick" style="color:#389600"><a href="#154242" label="[15:42:42]">&lt;OriansJ&gt;</a></span><span class="message">just make sure to use --max-string ## before you do -f</span></div><div class="line" id="154553"><span class="nick" style="color:#389600"><a href="#154553" label="[15:45:53]">&lt;OriansJ&gt;</a></span><span class="message">otherwise it will ignore --max-string entirely and just default to 4096</span></div><div class="line" id="154656"><span class="nick" style="color:#389600"><a href="#154656" label="[15:46:56]">&lt;OriansJ&gt;</a></span><span class="message">and patches are up</span></div><div class="line" id="154951"><span class="nick" style="color:#389600"><a href="#154951" label="[15:49:51]">&lt;OriansJ&gt;</a></span><span class="message">it should support 0b10101, 00400, 0xFF and 1234 number formats</span></div><div class="line" id="162908"><span class="nick">***</span><span class="message notice">clemens3_ is now known as clemens3</span></div><div class="line" id="163520"><span class="nick" style="color:#6d2462"><a href="#163520" label="[16:35:20]">&lt;Hagfish&gt;</a></span><span class="message">i think that if someone wanted to work on more publicity, they could highlight how much work has gone into this (and of course who did that work)</span></div><div class="line" id="163541"><span class="nick" style="color:#6d2462"><a href="#163541" label="[16:35:41]">&lt;Hagfish&gt;</a></span><span class="message">this project is not just impressive as a technical feat, but interesting as a human story too</span></div><div class="line" id="163600"><span class="nick" style="color:#6d2462"><a href="#163600" label="[16:36:00]">&lt;Hagfish&gt;</a></span><span class="message">it's probably too early to film a documentary about it yet, though :)</span></div><div class="line" id="174915"><span class="nick" style="color:#80b1d3"><a href="#174915" label="[17:49:15]">&lt;pder&gt;</a></span><span class="message">Thanks OriansJ, I will take a look shortly.  I'm still trying to figure out this hang bug.  Its very strange because I can get it to work by simply adding a line that increments an unrelated variable</span></div><div class="line" id="182742"><span class="nick" style="color:#389600"><a href="#182742" label="[18:27:42]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: well publicity has never been a skill of mine. and if you notice there are a lot of contributors to the various pieces that have created over these last 4 years. If nothing else this would be more of a story of how a group of people who saw something they could solve and me making a mess of all of it and creating the next batch of problems to solve.</span></div><div class="line" id="183011"><span class="nick" style="color:#389600"><a href="#183011" label="[18:30:11]">&lt;OriansJ&gt;</a></span><span class="message">I guess we are now in the race to the finish phase of the story. With 3 different potential winners. A Haskell compiler (blynn-compiler), a Scheme interpreter (mes-m2) and an insane rewrite of binutils and GCC 4.7.4 in M2-Planet's C subset (M3). With the question of which will successfully complete bootstrapping GCC first.</span></div><div class="line" id="183124"><span class="nick" style="color:#389600"><a href="#183124" label="[18:31:24]">&lt;OriansJ&gt;</a></span><span class="message">pder: could you share that diff, so I can try to spot it?</span></div><div class="line" id="183201"><span class="nick" style="color:#80b1d3"><a href="#183201" label="[18:32:01]">&lt;pder&gt;</a></span><span class="message">Hmm if I assign to an unsigned variable before doing a signed comparison it seems to do an unsigned comparison instead</span></div><div class="line" id="183205"><span class="nick" style="color:#80b1d3"><a href="#183205" label="[18:32:05]">&lt;pder&gt;</a></span><span class="message">Sure, one moment</span></div><div class="line" id="185305"><span class="nick" style="color:#80b1d3"><a href="#185305" label="[18:53:05]">&lt;pder&gt;</a></span><span class="message">I just pushed the branch marginally-m2-wip.  I temporarily commited generated/marginally.c, but thats just for convenience.  If you checkout that branch and run marginally.sh it should run and succeed.  However if you remove the line that I add in the latest commit, it will hang.  If you diff the M1 output, you will see a SETLE vs SETBE</span></div><div class="line" id="190220"><span class="nick" style="color:#389600"><a href="#190220" label="[19:02:20]">&lt;OriansJ&gt;</a></span><span class="message">pder: dissecting now</span></div><div class="line" id="190523"><span class="nick" style="color:#80b1d3"><a href="#190523" label="[19:05:23]">&lt;pder&gt;</a></span><span class="message">I appreciate all your help</span></div><div class="line" id="192215"><span class="nick" style="color:#389600"><a href="#192215" label="[19:22:15]">&lt;OriansJ&gt;</a></span><span class="message">ok, right now M2-Planet treats all function calls as returning a void type; so when calling promote_type with the 2 functions it is comparing NULL to NULL and returning NULL; which should always return CMP\nSETLE\nMOVEZBL\n</span></div><div class="line" id="192242"><span class="nick" style="color:#389600"><a href="#192242" label="[19:22:42]">&lt;OriansJ&gt;</a></span><span class="message">for &lt;=</span></div><div class="line" id="192615"><span class="nick" style="color:#80b1d3"><a href="#192615" label="[19:26:15]">&lt;pder&gt;</a></span><span class="message">Should I assign the results of num() to a variable before doing the comparison?</span></div><div class="line" id="193113"><span class="nick" style="color:#389600"><a href="#193113" label="[19:31:13]">&lt;OriansJ&gt;</a></span><span class="message">There is a deeper bug in M2-Planet to fix here and I will find it and crush it</span></div><div class="line" id="195313"><span class="nick" style="color:#389600"><a href="#195313" label="[19:53:13]">&lt;OriansJ&gt;</a></span><span class="message">now to reduce the test to something more trivial to trace while preserving the difference</span></div><div class="line" id="195719"><span class="nick" style="color:#389600"><a href="#195719" label="[19:57:19]">&lt;OriansJ&gt;</a></span><span class="message">down to 155 lines to search</span></div><div class="line" id="201454"><span class="nick" style="color:#389600"><a href="#201454" label="[20:14:54]">&lt;OriansJ&gt;</a></span><span class="message">odd promote_type is getting 2 unsigneds</span></div><div class="line" id="201550"><span class="nick" style="color:#389600"><a href="#201550" label="[20:15:50]">&lt;OriansJ&gt;</a></span><span class="message">I reduced the test down to: <a rel="nofollow" href="https://paste.debian.net/1177634/">https://paste.debian.net/1177634/</a> </span></div><div class="line" id="215027"><span class="nick" style="color:#80b1d3"><a href="#215027" label="[21:50:27]">&lt;pder&gt;</a></span><span class="message">in generated/marginally.c num() has a return type of int, but the returns a value from the mem array which is unsigned.  num() used to return unsigned in earlier stages.</span></div><div class="line" id="215051"><span class="nick" style="color:#80b1d3"><a href="#215051" label="[21:50:51]">&lt;pder&gt;</a></span><span class="message">If I change it to unsigned num() the gcc build hangs</span></div><div class="line" id="222606"><span class="nick" style="color:#389600"><a href="#222606" label="[22:26:06]">&lt;OriansJ&gt;</a></span><span class="message">pder: ok, I managed to find the minimal change that produces the desired behavior. (eg isolate type information side of a single statement)</span></div><div class="line" id="222714"><span class="nick" style="color:#389600"><a href="#222714" label="[22:27:14]">&lt;OriansJ&gt;</a></span><span class="message">^side^inside^</span></div><div class="line" id="222730"><span class="nick" style="color:#389600"><a href="#222730" label="[22:27:30]">&lt;OriansJ&gt;</a></span><span class="message">I should have a patch up shortly</span></div><div class="line" id="223448"><span class="nick" style="color:#389600"><a href="#223448" label="[22:34:48]">&lt;OriansJ&gt;</a></span><span class="message">and ./marginally.sh *WORKS*</span></div><div class="line" id="223648"><span class="nick" style="color:#389600"><a href="#223648" label="[22:36:48]">&lt;OriansJ&gt;</a></span><span class="message">and patches are up</span></div><div class="line" id="231813"><span class="nick" style="color:#80b1d3"><a href="#231813" label="[23:18:13]">&lt;pder&gt;</a></span><span class="message">awesome, thanks!</span></div><div class="line" id="232005"><span class="nick" style="color:#234e69"><a href="#232005" label="[23:20:05]">&lt;mihi&gt;</a></span><span class="message">OriansJ, probably we should agree to disagree on in_set. The fact that I did not notice that the quote char was missing from the long character sequence proves it is definitely not my style :)</span></div><div class="line" id="232131"><span class="nick" style="color:#234e69"><a href="#232131" label="[23:21:31]">&lt;mihi&gt;</a></span><span class="message">by the way, can it be that mescc-tools-seed is broken when updating M2-planet submodule inside? some functions in string.c have disappeared :)</span></div><div class="line" id="233212"><span class="nick" style="color:#234e69"><a href="#233212" label="[23:32:12]">&lt;mihi&gt;</a></span><span class="message">but I guess I can send my first pull request if only the tests in mescc-tools pass without testing the bootstrap :P -&gt; <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/pull/13">https://github.com/oriansj/mescc-tools/pull/13</a> </span></div><div class="line" id="233723"><span class="nick" style="color:#234e69"><a href="#233723" label="[23:37:23]">&lt;mihi&gt;</a></span><span class="message">and your machine definitely is faster than mine. Compiling M2-Planet (&lt;4000 lines) with M2-Planet compiled M2-Planet takes 5.5 seconds for me.</span></div><div class="line" id="233738"><span class="nick" style="color:#234e69"><a href="#233738" label="[23:37:38]">&lt;mihi&gt;</a></span><span class="message">(before my file.c changes)</span></div><div class="line" id="233852"><span class="nick" style="color:#6c3d55"><a href="#233852" label="[23:38:52]">&lt;fossy&gt;</a></span><span class="message">What is your cpu? Even on my laptop it takes ~3 seconds</span></div><div class="line" id="233949"><span class="nick" style="color:#234e69"><a href="#233949" label="[23:39:49]">&lt;mihi&gt;</a></span><span class="message">Intel(R) Core(TM) i3-3110M CPU + one layer of VirtualBox (running 32-bit Linux on 64-bit Windows)</span></div><div class="line" id="234033"><span class="nick" style="color:#234e69"><a href="#234033" label="[23:40:33]">&lt;mihi&gt;</a></span><span class="message">fossy, but still 3 seconds is one order of magnitude slower than .35 seconds</span></div><div class="line" id="234113"><span class="nick" style="color:#234e69"><a href="#234113" label="[23:41:13]">&lt;mihi&gt;</a></span><span class="message">usually I don't write that trademarks - that is copied verbatim from msinfo :)</span></div><div class="line" id="234313"><span class="nick" style="color:#234e69"><a href="#234313" label="[23:43:13]">&lt;mihi&gt;</a></span><span class="message">btw get_machine behaves funny on cygwin - it detects amd64 cpu and tries to run the linux amd64 tests. I &quot;patched&quot; my local get_machine to return &quot;other&quot; instead :)</span></div><br /></div></body></html>