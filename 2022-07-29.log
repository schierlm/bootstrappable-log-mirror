<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-07-29.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000814"><span class="nick" style="color:#8dd3c7"><a href="#000814" label="[00:08:14]">&lt;oriansj&gt;</a></span><span class="message">ah, that is much harder to spot in hex0</span></div><div class="line" id="001130"><span class="nick" style="color:#2e2a4a"><a href="#001130" label="[00:11:30]">&lt;stikonas&gt;</a></span><span class="message">well, I spotted it while doing amd64...</span></div><div class="line" id="001135"><span class="nick" style="color:#2e2a4a"><a href="#001135" label="[00:11:35]">&lt;stikonas&gt;</a></span><span class="message">so can fix it</span></div><div class="line" id="001330"><span class="nick" style="color:#2e2a4a"><a href="#001330" label="[00:13:30]">&lt;stikonas&gt;</a></span><span class="message">well, it's also harder to find during testing</span></div><div class="line" id="001334"><span class="nick" style="color:#2e2a4a"><a href="#001334" label="[00:13:34]">&lt;stikonas&gt;</a></span><span class="message">cause things run just fine</span></div><div class="line" id="001351"><span class="nick" style="color:#2e2a4a"><a href="#001351" label="[00:13:51]">&lt;stikonas&gt;</a></span><span class="message">(even for commands with non-zero exit status)</span></div><div class="line" id="001401"><span class="nick" style="color:#2e2a4a"><a href="#001401" label="[00:14:01]">&lt;stikonas&gt;</a></span><span class="message">it's only crashing binaries that would be affected</span></div><div class="line" id="010554"><span class="nick" style="color:#2e2a4a"><a href="#010554" label="[01:05:54]">&lt;stikonas&gt;</a></span><span class="message">ok, kaem-optional is done for amd64, now need to fix x86 version</span></div><div class="line" id="010814"><span class="nick" style="color:#2e2a4a"><a href="#010814" label="[01:08:14]">&lt;stikonas&gt;</a></span><span class="message">oriansj: <a rel="nofollow" href="https://github.com/oriansj/stage0-posix-amd64/pull/5">https://github.com/oriansj/stage0-posix-amd64/pull/5</a> </span></div><div class="line" id="010834"><span class="nick" style="color:#2e2a4a"><a href="#010834" label="[01:08:34]">&lt;stikonas&gt;</a></span><span class="message">(i'll do bootstrap-seeds later, together with fixed x86 version)</span></div><div class="line" id="011100"><span class="nick" style="color:#2e2a4a"><a href="#011100" label="[01:11:00]">&lt;stikonas&gt;</a></span><span class="message">also <a rel="nofollow" href="https://github.com/oriansj/stage0-posix-aarch64/pull/3">https://github.com/oriansj/stage0-posix-aarch64/pull/3</a>  for typo fix</span></div><div class="line" id="011611"><span class="nick" style="color:#2e2a4a"><a href="#011611" label="[01:16:11]">&lt;stikonas&gt;</a></span><span class="message">oriansj: oh actually x86 kaem was not broken... I don't know why I was thiking that...</span></div><div class="line" id="012002"><span class="nick" style="color:#2e2a4a"><a href="#012002" label="[01:20:02]">&lt;stikonas&gt;</a></span><span class="message">and <a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds/pull/25">https://github.com/oriansj/bootstrap-seeds/pull/25</a> </span></div><div class="line" id="020515"><span class="nick" style="color:#8dd3c7"><a href="#020515" label="[02:05:15]">&lt;oriansj&gt;</a></span><span class="message">stikonas: all three have been merged</span></div><div class="line" id="020520"><span class="nick" style="color:#2e2a4a"><a href="#020520" label="[02:05:20]">&lt;stikonas&gt;</a></span><span class="message">thanks</span></div><div class="line" id="020611"><span class="nick" style="color:#8dd3c7"><a href="#020611" label="[02:06:11]">&lt;oriansj&gt;</a></span><span class="message">I'd *MUCH* rather you to think something was broken and it is working fine than for something to be broken and you think it is working fine</span></div><div class="line" id="021005"><span class="nick" style="color:#2e2a4a"><a href="#021005" label="[02:10:05]">&lt;stikonas&gt;</a></span><span class="message">well, it was actually broken in nasm prototype</span></div><div class="line" id="021011"><span class="nick" style="color:#2e2a4a"><a href="#021011" label="[02:10:11]">&lt;stikonas&gt;</a></span><span class="message">but not in M1 or hex0</span></div><div class="line" id="021023"><span class="nick" style="color:#2e2a4a"><a href="#021023" label="[02:10:23]">&lt;stikonas&gt;</a></span><span class="message">hence my confusion</span></div><div class="line" id="021037"><span class="nick" style="color:#2e2a4a"><a href="#021037" label="[02:10:37]">&lt;stikonas&gt;</a></span><span class="message">but moving stuff in nasm is trivial</span></div><div class="line" id="021133"><span class="nick" style="color:#8dd3c7"><a href="#021133" label="[02:11:33]">&lt;oriansj&gt;</a></span><span class="message">to a degree, until you try to do something messy</span></div><div class="line" id="021411"><span class="nick" style="color:#2e2a4a"><a href="#021411" label="[02:14:11]">&lt;stikonas&gt;</a></span><span class="message">anyway, I think I'm done with hex0/kaem-optional in stage0-posix and can start porting kaem-optional to efi tomorrow...</span></div><div class="line" id="021450"><span class="nick" style="color:#2e2a4a"><a href="#021450" label="[02:14:50]">&lt;stikonas&gt;</a></span><span class="message">once that is done, rest of the stuff up to cc_amd64 should be relatively quick</span></div><div class="line" id="021748"><span class="nick" style="color:#8dd3c7"><a href="#021748" label="[02:17:48]">&lt;oriansj&gt;</a></span><span class="message">ideally, then we have M2libc enhancements to do and see if there is anything else special needed for M2-Planet</span></div><div class="line" id="021807"><span class="nick" style="color:#8dd3c7"><a href="#021807" label="[02:18:07]">&lt;oriansj&gt;</a></span><span class="message">muurkha: my routine rant about the problem with Java: <a rel="nofollow" href="https://paste.debian.net/1248683/">https://paste.debian.net/1248683/</a> </span></div><div class="line" id="025411"><span class="nick" style="color:#6b8072"><a href="#025411" label="[02:54:11]">&lt;Spawns_Carpeting&gt;</a></span><span class="message">has anyone here had any experience with various schemes like racket, guile, gambit, gerbil, etc?</span></div><div class="line" id="025434"><span class="nick" style="color:#8dd3c7"><a href="#025434" label="[02:54:34]">&lt;oriansj&gt;</a></span><span class="message">Spawns_Carpeting: well we bootstrapped Guile</span></div><div class="line" id="025500"><span class="nick" style="color:#8dd3c7"><a href="#025500" label="[02:55:00]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/schierlm/guile-psyntax-bootstrapping">https://github.com/schierlm/guile-psyntax-bootstrapping</a> </span></div><div class="line" id="025537"><span class="nick" style="color:#6b8072"><a href="#025537" label="[02:55:37]">&lt;Spawns_Carpeting&gt;</a></span><span class="message">is there any info or work done with gambit by chance? I am talking to Marc Feeley and it seems like gambit relies on C files generated from the gambit compiler which creates the classic bootstrapping loop problem</span></div><div class="line" id="025541"><span class="nick" style="color:#8dd3c7"><a href="#025541" label="[02:55:41]">&lt;oriansj&gt;</a></span><span class="message">and people from the Guix community are here as well so yes.</span></div><div class="line" id="025635"><span class="nick" style="color:#6b8072"><a href="#025635" label="[02:56:35]">&lt;Spawns_Carpeting&gt;</a></span><span class="message">is the normal build of guile not bootstrapped purely from source? I was under the impression it was</span></div><div class="line" id="025650"><span class="nick" style="color:#6b8072"><a href="#025650" label="[02:56:50]">&lt;Spawns_Carpeting&gt;</a></span><span class="message">(but i didn't do much searching about it)</span></div><div class="line" id="025752"><span class="nick" style="color:#8dd3c7"><a href="#025752" label="[02:57:52]">&lt;oriansj&gt;</a></span><span class="message">Spawns_Carpeting: it depended upon a generated file (psyntax.pp) and we thus had to solve that to enable it to be properly bootstrapped. This is the sort of thing we usually tend to find in schemes and Lisps</span></div><div class="line" id="025905"><span class="nick" style="color:#6b8072"><a href="#025905" label="[02:59:05]">&lt;Spawns_Carpeting&gt;</a></span><span class="message">oh I see now, I didn't realize that it relied on that. lisps seem to be extra bad about bootstrapping don't they!</span></div><div class="line" id="025944"><span class="nick" style="color:#8dd3c7"><a href="#025944" label="[02:59:44]">&lt;oriansj&gt;</a></span><span class="message">well good scheme and lisp programmers tend to not like working in C if they can get away with it.</span></div><div class="line" id="030032"><span class="nick" style="color:#8dd3c7"><a href="#030032" label="[03:00:32]">&lt;oriansj&gt;</a></span><span class="message">that being said now that Guile is bootstrapped, you can convert the scheme that generates those files to run on Guile and you would have that solved.</span></div><div class="line" id="030512"><span class="nick" style="color:#8dd3c7"><a href="#030512" label="[03:05:12]">&lt;oriansj&gt;</a></span><span class="message">(assuming of course that guile and gambit scheme are not too incompatible)</span></div><div class="line" id="031022"><span class="nick" style="color:#6b8072"><a href="#031022" label="[03:10:22]">&lt;Spawns_Carpeting&gt;</a></span><span class="message">thanks for the work done on guile to whoever contributed for sure!</span></div><div class="line" id="031028"><span class="nick" style="color:#6b8072"><a href="#031028" label="[03:10:28]">&lt;Spawns_Carpeting&gt;</a></span><span class="message">thats a big step</span></div><div class="line" id="031453"><span class="nick" style="color:#6b8072"><a href="#031453" label="[03:14:53]">&lt;Spawns_Carpeting&gt;</a></span><span class="message">I think in gambits case they are too incompatible but I'm not totally sure really. Getting information about this from the various communities has been a little tricky because the term &quot;bootstrapping&quot; seems to mean different things to people who don't know about bootstrappable.org bootstrapping</span></div><div class="line" id="031604"><span class="nick" style="color:#6b8072"><a href="#031604" label="[03:16:04]">&lt;Spawns_Carpeting&gt;</a></span><span class="message">in gambits case, the default build process uses a standard c compiler to build C file that were transpiled from scheme source files with the gambit compiler</span></div><div class="line" id="031654"><span class="nick" style="color:#6b8072"><a href="#031654" label="[03:16:54]">&lt;Spawns_Carpeting&gt;</a></span><span class="message">since those transplied C files are not human readable I don't think that really counts as &quot;bootstrappable&quot; in this specific context</span></div><div class="line" id="033425"><span class="nick" style="color:#8dd3c7"><a href="#033425" label="[03:34:25]">&lt;oriansj&gt;</a></span><span class="message">Spawns_Carpeting: well very few people worry about bootstrappable in general, they mostly want the software and generally tend to be happy with binary blobs. So just having a process in place to generate those C files from scheme source reproducibly would be a good step in the correct direction. Once you have that, (assuming the Turing core is standard enough) you then have a straight forward path to getting it bootstrapped from any</span></div><div class="line" id="033425"><span class="nick" style="color:#8dd3c7"><a href="#033425" label="[03:34:25]">&lt;oriansj&gt;</a></span><span class="message">other scheme interpreter available.</span></div><div class="line" id="154623"><span class="nick">***</span><span class="message notice">WaxCPU is now known as Andrew</span></div><br /></div></body></html>