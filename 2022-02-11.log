<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-02-11.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="004901"><span class="nick">***</span><span class="message notice">alMalsam1 is now known as alMalsamo</span></div><div class="line" id="011251"><span class="nick" style="color:#8dd3c7"><a href="#011251" label="[01:12:51]">&lt;unmatched-paren&gt;</a></span><span class="message">stikonas: interesting... rascal doesn't support the pascal `const` keyword. that's probably why it rejected those example programs, `const` is used in pretty much every pascal program</span></div><div class="line" id="011303"><span class="nick" style="color:#8dd3c7"><a href="#011303" label="[01:13:03]">&lt;unmatched-paren&gt;</a></span><span class="message">const should be extremely easy to implement</span></div><div class="line" id="011451"><span class="nick" style="color:#2e2a4a"><a href="#011451" label="[01:14:51]">&lt;stikonas&gt;</a></span><span class="message">yeah, you can just ignore it</span></div><div class="line" id="011503"><span class="nick" style="color:#2e2a4a"><a href="#011503" label="[01:15:03]">&lt;stikonas&gt;</a></span><span class="message">and assume that code is written correctly</span></div><div class="line" id="011515"><span class="nick" style="color:#2e2a4a"><a href="#011515" label="[01:15:15]">&lt;stikonas&gt;</a></span><span class="message">that's basically the strategy of mrustc</span></div><div class="line" id="011522"><span class="nick" style="color:#2e2a4a"><a href="#011522" label="[01:15:22]">&lt;stikonas&gt;</a></span><span class="message">mrustc does not implement borrow checker</span></div><div class="line" id="011535"><span class="nick" style="color:#2e2a4a"><a href="#011535" label="[01:15:35]">&lt;stikonas&gt;</a></span><span class="message">just assumes that rustc code was written correctly</span></div><div class="line" id="011742"><span class="nick" style="color:#8dd3c7"><a href="#011742" label="[01:17:42]">&lt;unmatched-paren&gt;</a></span><span class="message">?</span></div><div class="line" id="011956"><span class="nick" style="color:#2e2a4a"><a href="#011956" label="[01:19:56]">&lt;stikonas&gt;</a></span><span class="message">well, bootstrap compiler doesn't have to be very good at things like error reporting etc...</span></div><div class="line" id="012006"><span class="nick" style="color:#2e2a4a"><a href="#012006" label="[01:20:06]">&lt;stikonas&gt;</a></span><span class="message">which you might expect from production compiler</span></div><div class="line" id="012026"><span class="nick" style="color:#8dd3c7"><a href="#012026" label="[01:20:26]">&lt;unmatched-paren&gt;</a></span><span class="message">who are you replying to? :)</span></div><div class="line" id="012034"><span class="nick" style="color:#8dd3c7"><a href="#012034" label="[01:20:34]">&lt;unmatched-paren&gt;</a></span><span class="message">i'm confused</span></div><div class="line" id="012042"><span class="nick" style="color:#8dd3c7"><a href="#012042" label="[01:20:42]">&lt;unmatched-paren&gt;</a></span><span class="message">i was talking about rascal</span></div><div class="line" id="012100"><span class="nick" style="color:#2e2a4a"><a href="#012100" label="[01:21:00]">&lt;stikonas&gt;</a></span><span class="message">unmatched-paren: oh yes, I'm just saying that for rascal implementing const can be as easy</span></div><div class="line" id="012109"><span class="nick" style="color:#2e2a4a"><a href="#012109" label="[01:21:09]">&lt;stikonas&gt;</a></span><span class="message">as just ignoring that const keyword</span></div><div class="line" id="012121"><span class="nick" style="color:#2e2a4a"><a href="#012121" label="[01:21:21]">&lt;stikonas&gt;</a></span><span class="message">just skip it completely</span></div><div class="line" id="012153"><span class="nick" style="color:#8dd3c7"><a href="#012153" label="[01:21:53]">&lt;unmatched-paren&gt;</a></span><span class="message">but it's necessary to treat them as immutable variables for almost every single pascal program to work....</span></div><div class="line" id="012210"><span class="nick" style="color:#2e2a4a"><a href="#012210" label="[01:22:10]">&lt;stikonas&gt;</a></span><span class="message">why? They should just work</span></div><div class="line" id="012225"><span class="nick" style="color:#2e2a4a"><a href="#012225" label="[01:22:25]">&lt;stikonas&gt;</a></span><span class="message">some invalid programs would also work instead of erroring out</span></div><div class="line" id="012238"><span class="nick" style="color:#8dd3c7"><a href="#012238" label="[01:22:38]">&lt;unmatched-paren&gt;</a></span><span class="message">if you have `const x = 44;` then every `x` should be treated as `44`</span></div><div class="line" id="012238"><span class="nick" style="color:#2e2a4a"><a href="#012238" label="[01:22:38]">&lt;stikonas&gt;</a></span><span class="message">but all valid programs should continue to work</span></div><div class="line" id="012244"><span class="nick" style="color:#8dd3c7"><a href="#012244" label="[01:22:44]">&lt;unmatched-paren&gt;</a></span><span class="message">it certainly shouldn't be ignored</span></div><div class="line" id="012301"><span class="nick" style="color:#2e2a4a"><a href="#012301" label="[01:23:01]">&lt;stikonas&gt;</a></span><span class="message">yes, but if const x = 44 is replaced with x = 44</span></div><div class="line" id="012305"><span class="nick" style="color:#2e2a4a"><a href="#012305" label="[01:23:05]">&lt;stikonas&gt;</a></span><span class="message">then output of the program would be the same</span></div><div class="line" id="012320"><span class="nick" style="color:#8dd3c7"><a href="#012320" label="[01:23:20]">&lt;unmatched-paren&gt;</a></span><span class="message">x = 44 is not valid pascal afaik</span></div><div class="line" id="012332"><span class="nick" style="color:#2e2a4a"><a href="#012332" label="[01:23:32]">&lt;stikonas&gt;</a></span><span class="message">oh, maybe I was thinkign of C type const keyword</span></div><div class="line" id="012341"><span class="nick" style="color:#8dd3c7"><a href="#012341" label="[01:23:41]">&lt;unmatched-paren&gt;</a></span><span class="message">that's equivalent to `x == 44` in c</span></div><div class="line" id="012344"><span class="nick" style="color:#2e2a4a"><a href="#012344" label="[01:23:44]">&lt;stikonas&gt;</a></span><span class="message">haven't done Pascal since school...</span></div><div class="line" id="012352"><span class="nick" style="color:#8dd3c7"><a href="#012352" label="[01:23:52]">&lt;unmatched-paren&gt;</a></span><span class="message">= is the equivalence operator in pascal</span></div><div class="line" id="012401"><span class="nick" style="color:#8dd3c7"><a href="#012401" label="[01:24:01]">&lt;unmatched-paren&gt;</a></span><span class="message">hah, yeah, it shows its age :)</span></div><div class="line" id="012449"><span class="nick" style="color:#2e2a4a"><a href="#012449" label="[01:24:49]">&lt;stikonas&gt;</a></span><span class="message">but in C const keyword can definitely be omitted</span></div><div class="line" id="012602"><span class="nick" style="color:#2e2a4a"><a href="#012602" label="[01:26:02]">&lt;stikonas&gt;</a></span><span class="message">this is how &quot;const&quot; is implemented in M2-Planet <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/blob/master/cc_types.c#L299">https://github.com/oriansj/M2-Planet/blob/master/cc_types.c#L299</a> </span></div><div class="line" id="012615"><span class="nick" style="color:#2e2a4a"><a href="#012615" label="[01:26:15]">&lt;stikonas&gt;</a></span><span class="message">so basically just global_token = global_token-&gt;next;</span></div><div class="line" id="012623"><span class="nick" style="color:#2e2a4a"><a href="#012623" label="[01:26:23]">&lt;stikonas&gt;</a></span><span class="message">i.e. skip const token and look at the next thing</span></div><div class="line" id="012937"><span class="nick" style="color:#8dd3c7"><a href="#012937" label="[01:29:37]">&lt;unmatched-paren&gt;</a></span><span class="message">in pascal, you have a `program` block in your main file, which contains a bunch of procedure, function, variable and constant declarations, and then a block, like this: <a rel="nofollow" href="https://paste.debian.net/1230509">https://paste.debian.net/1230509</a> </span></div><div class="line" id="013014"><span class="nick" style="color:#8dd3c7"><a href="#013014" label="[01:30:14]">&lt;unmatched-paren&gt;</a></span><span class="message">pascal is a pretty bad language imo</span></div><div class="line" id="013025"><span class="nick" style="color:#8dd3c7"><a href="#013025" label="[01:30:25]">&lt;unmatched-paren&gt;</a></span><span class="message">for example, list lengths are part of the type</span></div><div class="line" id="013107"><span class="nick" style="color:#8dd3c7"><a href="#013107" label="[01:31:07]">&lt;unmatched-paren&gt;</a></span><span class="message">so you can't have a function/procedure that takes a list of any length</span></div><div class="line" id="013144"><span class="nick" style="color:#8dd3c7"><a href="#013144" label="[01:31:44]">&lt;unmatched-paren&gt;</a></span><span class="message">its only gain over C is cleaner syntax...</span></div><div class="line" id="022643"><span class="nick" style="color:#6b8072"><a href="#022643" label="[02:26:43]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: well C does have a pretty clean syntax IF you stick to the turing core (which is what cc_* is)</span></div><div class="line" id="023241"><span class="nick" style="color:#6b8072"><a href="#023241" label="[02:32:41]">&lt;oriansj&gt;</a></span><span class="message">once you toss in the C macro processing and varargs; it gets ugly fast but when you can turn that off, C is pretty clean.</span></div><div class="line" id="023714"><span class="nick" style="color:#80b1d3"><a href="#023714" label="[02:37:14]">&lt;stikonas[m]&gt;</a></span><span class="message">Still, we did a reasonable job with macro processing in m2-mesoplanet</span></div><div class="line" id="023824"><span class="nick" style="color:#6b8072"><a href="#023824" label="[02:38:24]">&lt;oriansj&gt;</a></span><span class="message">stikonas: and that will only grow in size as we get more compatible with the C spec</span></div><div class="line" id="024139"><span class="nick" style="color:#6b8072"><a href="#024139" label="[02:41:39]">&lt;oriansj&gt;</a></span><span class="message">but yes, for a C preprocessor, M2-Mesoplanet appears considerably cleaner than others that I've seen.</span></div><div class="line" id="024331"><span class="nick">***</span><span class="message notice">Noisytoot is now known as [</span></div><div class="line" id="031333"><span class="nick" style="color:#6d2462"><a href="#031333" label="[03:13:33]">&lt;muurkha&gt;</a></span><span class="message">[: missing `]'</span></div><div class="line" id="031606"><span class="nick" style="color:#234e69"><a href="#031606" label="[03:16:06]">&lt;[&gt;</a></span><span class="message">muurkha: Someone else has that nick</span></div><div class="line" id="031737"><span class="nick" style="color:#6d2462"><a href="#031737" label="[03:17:37]">&lt;muurkha&gt;</a></span><span class="message">I'm just quoting bash</span></div><div class="line" id="093011"><span class="nick">***</span><span class="message notice">vancz_ is now known as vancz</span></div><div class="line" id="185440"><span class="nick">***</span><span class="message notice">sam_ is now known as sam__</span></div><div class="line" id="185451"><span class="nick">***</span><span class="message notice">sam__ is now known as sam_</span></div><br /></div></body></html>