<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-07-27.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="123026"><span class="nick" style="color:#8dd3c7"><a href="#123026" label="[12:30:26]">&lt;fossy&gt;</a></span><span class="message">i am doing new linux kernel instead of trying to get linux  2.6.16 to work. too new software, too little syscalls, etc. many problems, too much work for smth to be replaced anyway</span></div><div class="line" id="123036"><span class="nick" style="color:#8dd3c7"><a href="#123036" label="[12:30:36]">&lt;fossy&gt;</a></span><span class="message">looks like new kernel should be trivial with new make i am hoping</span></div><div class="line" id="131428"><span class="nick" style="color:#8dd3c7"><a href="#131428" label="[13:14:28]">&lt;fossy&gt;</a></span><span class="message">if nothing else, the linux kernel build system has got WAYY more managable over the yr</span></div><div class="line" id="131430"><span class="nick" style="color:#8dd3c7"><a href="#131430" label="[13:14:30]">&lt;fossy&gt;</a></span><span class="message">years</span></div><div class="line" id="133139"><span class="nick" style="color:#2e2a4a"><a href="#133139" label="[13:31:39]">&lt;xentrac&gt;</a></span><span class="message">how so?</span></div><div class="line" id="134811"><span class="nick" style="color:#6b8072"><a href="#134811" label="[13:48:11]">&lt;siraben&gt;</a></span><span class="message">Melg8: ping</span></div><div class="line" id="185201"><span class="nick" style="color:#80b1d3"><a href="#185201" label="[18:52:01]">&lt;Melg8[m]&gt;</a></span><span class="message">siraben: yea?</span></div><div class="line" id="190431"><span class="nick" style="color:#6d2462"><a href="#190431" label="[19:04:31]">&lt;stikonas&gt;</a></span><span class="message">ekaitz, oriansj: I have some proposal for hex0 optimization, so would like to see what you think</span></div><div class="line" id="190449"><span class="nick" style="color:#234e69"><a href="#190449" label="[19:04:49]">&lt;ekaitz&gt;</a></span><span class="message">stikonas: shoot!</span></div><div class="line" id="190510"><span class="nick" style="color:#6d2462"><a href="#190510" label="[19:05:10]">&lt;stikonas&gt;</a></span><span class="message">in particular yesterday, I was looking at the code that reads hex characters</span></div><div class="line" id="190621"><span class="nick" style="color:#6d2462"><a href="#190621" label="[19:06:21]">&lt;stikonas&gt;</a></span><span class="message">so my optimization is a bit longer in terms of instructions 17 -&gt; 30, but it's still 17 unique instructions, 13 are duplicate and it eliminates most branching/jumping there, so much easier to encode from .S-&gt;.hex0 or for somebody else to check</span></div><div class="line" id="190717"><span class="nick" style="color:#234e69"><a href="#190717" label="[19:07:17]">&lt;ekaitz&gt;</a></span><span class="message">when I did it, I worked first on assembly and translated later so it's probably a good idea to simplify it</span></div><div class="line" id="190717"><span class="nick" style="color:#6d2462"><a href="#190717" label="[19:07:17]">&lt;stikonas&gt;</a></span><span class="message">so the binary might be a bit bigger, but simpler to inspect</span></div><div class="line" id="190724"><span class="nick" style="color:#6d2462"><a href="#190724" label="[19:07:24]">&lt;stikonas&gt;</a></span><span class="message">let me show some example</span></div><div class="line" id="190734"><span class="nick" style="color:#234e69"><a href="#190734" label="[19:07:34]">&lt;ekaitz&gt;</a></span><span class="message">please</span></div><div class="line" id="190745"><span class="nick" style="color:#6d2462"><a href="#190745" label="[19:07:45]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1205773/">https://paste.debian.net/1205773/</a> </span></div><div class="line" id="190840"><span class="nick" style="color:#234e69"><a href="#190840" label="[19:08:40]">&lt;ekaitz&gt;</a></span><span class="message">let me open the original to see the difference</span></div><div class="line" id="190842"><span class="nick" style="color:#6d2462"><a href="#190842" label="[19:08:42]">&lt;stikonas&gt;</a></span><span class="message">to make it clearer, think of it as (a0 - 47) * (a0 &gt; 47) * (a0 &lt; 57) + (a0 - 54) * (a0 &gt; 64) * (a0 &lt; 71) + (a0 - 86) * (a0 &gt; 96) * (a0 &lt; 103)</span></div><div class="line" id="191054"><span class="nick" style="color:#234e69"><a href="#191054" label="[19:10:54]">&lt;ekaitz&gt;</a></span><span class="message">is this easier to inspect?</span></div><div class="line" id="191111"><span class="nick" style="color:#234e69"><a href="#191111" label="[19:11:11]">&lt;ekaitz&gt;</a></span><span class="message">i mean, there are less jumps but it's a little bit mindbending</span></div><div class="line" id="191116"><span class="nick" style="color:#6d2462"><a href="#191116" label="[19:11:16]">&lt;stikonas&gt;</a></span><span class="message">well, that's what I am asking...</span></div><div class="line" id="191120"><span class="nick" style="color:#6d2462"><a href="#191120" label="[19:11:20]">&lt;stikonas&gt;</a></span><span class="message">it's more involved in algebra</span></div><div class="line" id="191128"><span class="nick" style="color:#6c3d55"><a href="#191128" label="[19:11:28]">&lt;GeDaMo&gt;</a></span><span class="message">If you want to check if a character is in a set, you might use a bitset</span></div><div class="line" id="191131"><span class="nick" style="color:#6d2462"><a href="#191131" label="[19:11:31]">&lt;stikonas&gt;</a></span><span class="message">but it does not use those mangled B and J  instructions</span></div><div class="line" id="191140"><span class="nick" style="color:#6c3d55"><a href="#191140" label="[19:11:40]">&lt;GeDaMo&gt;</a></span><span class="message">(1 &lt;&lt; char) &amp; bitset</span></div><div class="line" id="191147"><span class="nick" style="color:#234e69"><a href="#191147" label="[19:11:47]">&lt;ekaitz&gt;</a></span><span class="message">stikonas: that's a great point, yeah</span></div><div class="line" id="191204"><span class="nick" style="color:#6b8072"><a href="#191204" label="[19:12:04]">&lt;siraben&gt;</a></span><span class="message">Melg8: I was wondering how to replicate your bootstrap experiment on Nixpkgs. How do i get a shell up?</span></div><div class="line" id="191249"><span class="nick" style="color:#234e69"><a href="#191249" label="[19:12:49]">&lt;ekaitz&gt;</a></span><span class="message">stikonas: if the jumps are short as in this case, how is the wierd B/J format bit mangling affect? does it really change the order of the bits or it just affects to the highest bits?</span></div><div class="line" id="191333"><span class="nick" style="color:#234e69"><a href="#191333" label="[19:13:33]">&lt;ekaitz&gt;</a></span><span class="message">i mean, we may just be using a subset of the jump field that may be left untouched, I don't remember the format</span></div><div class="line" id="191432"><span class="nick" style="color:#6d2462"><a href="#191432" label="[19:14:32]">&lt;stikonas&gt;</a></span><span class="message">format is here <a rel="nofollow" href="https://secureservercdn.net/198.71.233.189/a1a.c8e.myftpupload.com/wp-content/uploads/2020/12/word-image-1.png">https://secureservercdn.net/198.71.233.189/a1a.c8e.myftpupload.com/wp-content/uploads/2020/12/word-image-1.png</a> </span></div><div class="line" id="191457"><span class="nick" style="color:#234e69"><a href="#191457" label="[19:14:57]">&lt;ekaitz&gt;</a></span><span class="message">I just checked the J instruction's lowest 11 bits are left untouched</span></div><div class="line" id="191510"><span class="nick" style="color:#234e69"><a href="#191510" label="[19:15:10]">&lt;ekaitz&gt;</a></span><span class="message">well &quot;untouched&quot;</span></div><div class="line" id="191600"><span class="nick" style="color:#6d2462"><a href="#191600" label="[19:16:00]">&lt;stikonas&gt;</a></span><span class="message">GeDaMo: but what bitset would we use for aphanumerical characters 0-9 A-F a-f?</span></div><div class="line" id="191615"><span class="nick" style="color:#234e69"><a href="#191615" label="[19:16:15]">&lt;ekaitz&gt;</a></span><span class="message">I mean, we can accept J instructions with 11 bit jumps, but the B's are still a pain in the ass</span></div><div class="line" id="191629"><span class="nick" style="color:#6d2462"><a href="#191629" label="[19:16:29]">&lt;stikonas&gt;</a></span><span class="message">yeah, B are especially nasty</span></div><div class="line" id="191655"><span class="nick" style="color:#6d2462"><a href="#191655" label="[19:16:55]">&lt;stikonas&gt;</a></span><span class="message">and I thought hex0 code without jumps/branches are much closer to hex2 code :)</span></div><div class="line" id="191657"><span class="nick" style="color:#234e69"><a href="#191657" label="[19:16:57]">&lt;ekaitz&gt;</a></span><span class="message">4 bit jumps are basically a skip :D</span></div><div class="line" id="191714"><span class="nick" style="color:#6c3d55"><a href="#191714" label="[19:17:14]">&lt;GeDaMo&gt;</a></span><span class="message">The bitset would have 1s set for each of the acceptable characters</span></div><div class="line" id="191737"><span class="nick" style="color:#234e69"><a href="#191737" label="[19:17:37]">&lt;ekaitz&gt;</a></span><span class="message">I agree, but there's one last question: are we going to need to tackle the jumps in any stage?</span></div><div class="line" id="191747"><span class="nick" style="color:#234e69"><a href="#191747" label="[19:17:47]">&lt;ekaitz&gt;</a></span><span class="message">it's just me thinking if we are just delaying the pain</span></div><div class="line" id="191800"><span class="nick" style="color:#6d2462"><a href="#191800" label="[19:18:00]">&lt;stikonas&gt;</a></span><span class="message">ekaitz: I think hex1 will be calculating jumps</span></div><div class="line" id="191804"><span class="nick" style="color:#6d2462"><a href="#191804" label="[19:18:04]">&lt;stikonas&gt;</a></span><span class="message">oriansj: had some proposal</span></div><div class="line" id="191841"><span class="nick" style="color:#6d2462"><a href="#191841" label="[19:18:41]">&lt;stikonas&gt;</a></span><span class="message">well ,at some point we have to tacke jumps anyway</span></div><div class="line" id="191954"><span class="nick" style="color:#234e69"><a href="#191954" label="[19:19:54]">&lt;ekaitz&gt;</a></span><span class="message">that is my point, if we make this step's algorithm harder to read just to avoid the jumps and we have them later we didn't solve anything</span></div><div class="line" id="191956"><span class="nick" style="color:#6d2462"><a href="#191956" label="[19:19:56]">&lt;stikonas&gt;</a></span><span class="message">oriansj thought the easiest way to implement all these riscv instruction types is implementing XOR in hex1</span></div><div class="line" id="192051"><span class="nick" style="color:#234e69"><a href="#192051" label="[19:20:51]">&lt;ekaitz&gt;</a></span><span class="message">how you mean?</span></div><div class="line" id="192128"><span class="nick" style="color:#6d2462"><a href="#192128" label="[19:21:28]">&lt;stikonas&gt;</a></span><span class="message">e.g. have 000000CD . 00BF0000 A0000000 =&gt; A0BF00CD written out</span></div><div class="line" id="192133"><span class="nick" style="color:#6d2462"><a href="#192133" label="[19:21:33]">&lt;stikonas&gt;</a></span><span class="message">. 000000CD . 00BF0000 A0000000 =&gt; A0BF00CD written out</span></div><div class="line" id="192152"><span class="nick" style="color:#6d2462"><a href="#192152" label="[19:21:52]">&lt;stikonas&gt;</a></span><span class="message">so . means XOR this thing into the next 32 word</span></div><div class="line" id="192214"><span class="nick" style="color:#234e69"><a href="#192214" label="[19:22:14]">&lt;ekaitz&gt;</a></span><span class="message">right</span></div><div class="line" id="192235"><span class="nick" style="color:#234e69"><a href="#192235" label="[19:22:35]">&lt;ekaitz&gt;</a></span><span class="message">just combining together several values</span></div><div class="line" id="192251"><span class="nick" style="color:#6d2462"><a href="#192251" label="[19:22:51]">&lt;stikonas&gt;</a></span><span class="message">yes, then in M1 definition file you can define</span></div><div class="line" id="192301"><span class="nick" style="color:#6d2462"><a href="#192301" label="[19:23:01]">&lt;stikonas&gt;</a></span><span class="message">registers for each of the position in rd, rs1, rs2</span></div><div class="line" id="192344"><span class="nick" style="color:#234e69"><a href="#192344" label="[19:23:44]">&lt;ekaitz&gt;</a></span><span class="message">the main issue I see here is we're still having to reorder the bits... which is bad for readability</span></div><div class="line" id="192453"><span class="nick" style="color:#6d2462"><a href="#192453" label="[19:24:53]">&lt;stikonas&gt;</a></span><span class="message">well, it's little endian...</span></div><div class="line" id="192457"><span class="nick" style="color:#80b1d3"><a href="#192457" label="[19:24:57]">&lt;Melg8[m]&gt;</a></span><span class="message">siraben: main thing which do the job is <a rel="nofollow" href="https://github.com/melg8/cit/blob/feature/BootstrapNix/bootstrap_nix/bootstrap_seeds/default.nix">https://github.com/melg8/cit/blob/feature/BootstrapNix/bootstrap_nix/bootstrap_seeds/default.nix</a>  here. It doesn't depend on anything except local files. Maybe you could use it as starting point. But it is not up to date with latest live-bootstrap changes so first would need to update it. I've tested it just like &quot;nix-build ./default.nix&quot; from bootstrap_nix/bootstrap_seeds/ folder. Other files not used</span></div><div class="line" id="192458"><span class="nick" style="color:#80b1d3"><a href="#192458" label="[19:24:58]">&lt;Melg8[m]&gt;</a></span><span class="message">in default - is for test of recreating live-bootstrap style of build (whithout using nix at all) so i don't think that would be needed in nixpkgs</span></div><div class="line" id="192535"><span class="nick" style="color:#234e69"><a href="#192535" label="[19:25:35]">&lt;ekaitz&gt;</a></span><span class="message">stikonas: I mean the addresses are not clear in the value as the bits must be reordered according to the B/J formats anyway</span></div><div class="line" id="192604"><span class="nick" style="color:#6d2462"><a href="#192604" label="[19:26:04]">&lt;stikonas&gt;</a></span><span class="message">oh I see, yes, that's true...</span></div><div class="line" id="192700"><span class="nick" style="color:#234e69"><a href="#192700" label="[19:27:00]">&lt;ekaitz&gt;</a></span><span class="message">is it that difficult to implement the bit mangling in hex1?</span></div><div class="line" id="192726"><span class="nick" style="color:#234e69"><a href="#192726" label="[19:27:26]">&lt;ekaitz&gt;</a></span><span class="message">probably, right? we would need to add some extra stuff :S</span></div><div class="line" id="192947"><span class="nick" style="color:#6d2462"><a href="#192947" label="[19:29:47]">&lt;stikonas&gt;</a></span><span class="message">well, we might still have to implement bit mangling...</span></div><div class="line" id="193009"><span class="nick" style="color:#6d2462"><a href="#193009" label="[19:30:09]">&lt;stikonas&gt;</a></span><span class="message">although, it would be easier to do in M1 level than hex1</span></div><div class="line" id="193037"><span class="nick" style="color:#6b8072"><a href="#193037" label="[19:30:37]">&lt;siraben&gt;</a></span><span class="message">Melg8: thanks I'll look through this tomorrow</span></div><div class="line" id="193057"><span class="nick" style="color:#6b8072"><a href="#193057" label="[19:30:57]">&lt;siraben&gt;</a></span><span class="message">I think i got an error about how derivation doesn't take a git argument, afk right now but I did try nix-shell</span></div><div class="line" id="193102"><span class="nick" style="color:#6b8072"><a href="#193102" label="[19:31:02]">&lt;siraben&gt;</a></span><span class="message">in that folder</span></div><div class="line" id="193135"><span class="nick" style="color:#6c3d55"><a href="#193135" label="[19:31:35]">&lt;GeDaMo&gt;</a></span><span class="message">stikonas: <a rel="nofollow" href="https://ideone.com/F6hJ6P">https://ideone.com/F6hJ6P</a> </span></div><div class="line" id="193233"><span class="nick" style="color:#6d2462"><a href="#193233" label="[19:32:33]">&lt;stikonas&gt;</a></span><span class="message">GeDaMo: thanks</span></div><div class="line" id="193341"><span class="nick" style="color:#234e69"><a href="#193341" label="[19:33:41]">&lt;ekaitz&gt;</a></span><span class="message">GeDaMo 's idea could work to reduce the amount of jumps</span></div><div class="line" id="193411"><span class="nick" style="color:#6c3d55"><a href="#193411" label="[19:34:11]">&lt;GeDaMo&gt;</a></span><span class="message">You could hardcode the bitset, I just couldn't be bothered figuring it out manually :P</span></div><div class="line" id="193429"><span class="nick" style="color:#6d2462"><a href="#193429" label="[19:34:29]">&lt;stikonas&gt;</a></span><span class="message">yeah, it's fine to hardcode bitset in my opinion, especially if it's shown in the comments</span></div><div class="line" id="193431"><span class="nick" style="color:#6d2462"><a href="#193431" label="[19:34:31]">&lt;stikonas&gt;</a></span><span class="message">how to do that</span></div><div class="line" id="193549"><span class="nick" style="color:#6d2462"><a href="#193549" label="[19:35:49]">&lt;stikonas&gt;</a></span><span class="message">algorithm is even more convoluted though...</span></div><div class="line" id="193607"><span class="nick" style="color:#6d2462"><a href="#193607" label="[19:36:07]">&lt;stikonas&gt;</a></span><span class="message">but might result in fewer instructoins</span></div><div class="line" id="193619"><span class="nick" style="color:#6c3d55"><a href="#193619" label="[19:36:19]">&lt;GeDaMo&gt;</a></span><span class="message">Which algorithm?</span></div><div class="line" id="193631"><span class="nick" style="color:#6d2462"><a href="#193631" label="[19:36:31]">&lt;stikonas&gt;</a></span><span class="message">your isHex stuff</span></div><div class="line" id="193702"><span class="nick" style="color:#6d2462"><a href="#193702" label="[19:37:02]">&lt;stikonas&gt;</a></span><span class="message">ir maybe I'm just more used to algebraic stuff</span></div><div class="line" id="193710"><span class="nick" style="color:#6c3d55"><a href="#193710" label="[19:37:10]">&lt;GeDaMo&gt;</a></span><span class="message">It's two shifts and two ANDs</span></div><div class="line" id="193712"><span class="nick" style="color:#6d2462"><a href="#193712" label="[19:37:12]">&lt;stikonas&gt;</a></span><span class="message">since I did maths at university</span></div><div class="line" id="193753"><span class="nick" style="color:#6c3d55"><a href="#193753" label="[19:37:53]">&lt;GeDaMo&gt;</a></span><span class="message">And a memory fetch</span></div><div class="line" id="193759"><span class="nick" style="color:#6d2462"><a href="#193759" label="[19:37:59]">&lt;stikonas&gt;</a></span><span class="message">but yes, I think in terms of instructions it will be shorter than both of the other versions</span></div><div class="line" id="193849"><span class="nick" style="color:#234e69"><a href="#193849" label="[19:38:49]">&lt;ekaitz&gt;</a></span><span class="message">if you have issues with it I can help you tomorrow stikonas</span></div><div class="line" id="193931"><span class="nick" style="color:#6d2462"><a href="#193931" label="[19:39:31]">&lt;stikonas&gt;</a></span><span class="message">no, it shouldn't be too hard to convert to assembly</span></div><div class="line" id="194023"><span class="nick" style="color:#234e69"><a href="#194023" label="[19:40:23]">&lt;ekaitz&gt;</a></span><span class="message">where can I read a little bit more about M1? I'm unable to find it. We have too many subprojects :)</span></div><div class="line" id="194047"><span class="nick" style="color:#234e69"><a href="#194047" label="[19:40:47]">&lt;ekaitz&gt;</a></span><span class="message">(i'm trying to find the best solution for the J/B formats)</span></div><div class="line" id="194111"><span class="nick" style="color:#6d2462"><a href="#194111" label="[19:41:11]">&lt;stikonas&gt;</a></span><span class="message">ekaitz: probably source code in stage0-posix repo</span></div><div class="line" id="194131"><span class="nick" style="color:#234e69"><a href="#194131" label="[19:41:31]">&lt;ekaitz&gt;</a></span><span class="message">i can't find it there... :S</span></div><div class="line" id="194137"><span class="nick" style="color:#6d2462"><a href="#194137" label="[19:41:37]">&lt;stikonas&gt;</a></span><span class="message">there is no high level prototype...</span></div><div class="line" id="194144"><span class="nick" style="color:#234e69"><a href="#194144" label="[19:41:44]">&lt;ekaitz&gt;</a></span><span class="message">ugh!</span></div><div class="line" id="194234"><span class="nick" style="color:#6d2462"><a href="#194234" label="[19:42:34]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/blob/master/x86/M0_x86.hex2">https://github.com/oriansj/stage0-posix/blob/master/x86/M0_x86.hex2</a> </span></div><div class="line" id="194309"><span class="nick" style="color:#6d2462"><a href="#194309" label="[19:43:09]">&lt;stikonas&gt;</a></span><span class="message">ekaitz: oh, there is one for knight</span></div><div class="line" id="194357"><span class="nick" style="color:#6d2462"><a href="#194357" label="[19:43:57]">&lt;stikonas&gt;</a></span><span class="message">ekaitz: oh, that's because there is a C version in mescc-tools</span></div><div class="line" id="194359"><span class="nick" style="color:#6d2462"><a href="#194359" label="[19:43:59]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/M1-macro.c">https://github.com/oriansj/mescc-tools/blob/master/M1-macro.c</a> </span></div><div class="line" id="194408"><span class="nick" style="color:#6c3d55"><a href="#194408" label="[19:44:08]">&lt;GeDaMo&gt;</a></span><span class="message">stikonas: in your paste, is the character being tested in a0?</span></div><div class="line" id="194415"><span class="nick" style="color:#6d2462"><a href="#194415" label="[19:44:15]">&lt;stikonas&gt;</a></span><span class="message">GeDaMo: yes</span></div><div class="line" id="194418"><span class="nick" style="color:#234e69"><a href="#194418" label="[19:44:18]">&lt;ekaitz&gt;</a></span><span class="message">too many projects :))</span></div><div class="line" id="194509"><span class="nick" style="color:#6d2462"><a href="#194509" label="[19:45:09]">&lt;stikonas&gt;</a></span><span class="message">ekaitz: C versions is probably a bit bigger than the one written in hex2</span></div><div class="line" id="194521"><span class="nick" style="color:#6d2462"><a href="#194521" label="[19:45:21]">&lt;stikonas&gt;</a></span><span class="message">usually C version is cross-platform and can deal with all architectures</span></div><div class="line" id="194542"><span class="nick" style="color:#234e69"><a href="#194542" label="[19:45:42]">&lt;ekaitz&gt;</a></span><span class="message">yeah! I just need a high level view of it, I still lack of context sometimes</span></div><div class="line" id="194721"><span class="nick" style="color:#6d2462"><a href="#194721" label="[19:47:21]">&lt;stikonas&gt;</a></span><span class="message">ekaitz: yes, I also didn't look too much into implementation of M1, was just using it</span></div><div class="line" id="194750"><span class="nick" style="color:#234e69"><a href="#194750" label="[19:47:50]">&lt;ekaitz&gt;</a></span><span class="message">(now I realize I've been reading this file this morning... sigh)</span></div><div class="line" id="195449"><span class="nick" style="color:#6c3d55"><a href="#195449" label="[19:54:49]">&lt;GeDaMo&gt;</a></span><span class="message">stikonas: something like this, I think <a rel="nofollow" href="https://ideone.com/ttVsSa">https://ideone.com/ttVsSa</a> </span></div><div class="line" id="195454"><span class="nick" style="color:#6d2462"><a href="#195454" label="[19:54:54]">&lt;stikonas&gt;</a></span><span class="message">hmm, riscv64 code probably doesn't need that much modification to run on riscv32 too...</span></div><div class="line" id="195503"><span class="nick" style="color:#6d2462"><a href="#195503" label="[19:55:03]">&lt;stikonas&gt;</a></span><span class="message">mostly elf header and occasional constant</span></div><div class="line" id="200045"><span class="nick" style="color:#6d2462"><a href="#200045" label="[20:00:45]">&lt;stikonas&gt;</a></span><span class="message">GeDaMo: thanks. So that's also &quot;2 jumps&quot; like in my paste but indeed significantrly fewer instructions</span></div><div class="line" id="200058"><span class="nick" style="color:#6d2462"><a href="#200058" label="[20:00:58]">&lt;stikonas&gt;</a></span><span class="message">and bitset can probably be explained in the comments</span></div><div class="line" id="202818"><span class="nick" style="color:#234e69"><a href="#202818" label="[20:28:18]">&lt;ekaitz&gt;</a></span><span class="message">stikonas: rv64 and rv32 are basically the same</span></div><div class="line" id="202837"><span class="nick" style="color:#234e69"><a href="#202837" label="[20:28:37]">&lt;ekaitz&gt;</a></span><span class="message">the only difference is on the word vs doubleword opcodes</span></div><div class="line" id="202852"><span class="nick" style="color:#234e69"><a href="#202852" label="[20:28:52]">&lt;ekaitz&gt;</a></span><span class="message">for this case, I'd say we won't need to change that much</span></div><div class="line" id="202952"><span class="nick" style="color:#2e2a4a"><a href="#202952" label="[20:29:52]">&lt;xentrac&gt;</a></span><span class="message">there are a few other minor differences</span></div><div class="line" id="203006"><span class="nick" style="color:#6d2462"><a href="#203006" label="[20:30:06]">&lt;stikonas&gt;</a></span><span class="message">well, addresses are 64 vs 32 bit length</span></div><div class="line" id="203014"><span class="nick" style="color:#6d2462"><a href="#203014" label="[20:30:14]">&lt;stikonas&gt;</a></span><span class="message">so some code will need e.g. different shifts</span></div><div class="line" id="203019"><span class="nick" style="color:#6d2462"><a href="#203019" label="[20:30:19]">&lt;stikonas&gt;</a></span><span class="message">but indeed minor differences</span></div><div class="line" id="203755"><span class="nick" style="color:#2e2a4a"><a href="#203755" label="[20:37:55]">&lt;xentrac&gt;</a></span><span class="message">some of the opcodes are different</span></div><div class="line" id="203807"><span class="nick" style="color:#2e2a4a"><a href="#203807" label="[20:38:07]">&lt;xentrac&gt;</a></span><span class="message">in a poorly-considered way</span></div><div class="line" id="203843"><span class="nick" style="color:#234e69"><a href="#203843" label="[20:38:43]">&lt;ekaitz&gt;</a></span><span class="message">afaik they are the same all the time</span></div><div class="line" id="203858"><span class="nick" style="color:#234e69"><a href="#203858" label="[20:38:58]">&lt;ekaitz&gt;</a></span><span class="message">RV64 is just an extension with extra opcodes</span></div><div class="line" id="204315"><span class="nick" style="color:#2e2a4a"><a href="#204315" label="[20:43:15]">&lt;xentrac&gt;</a></span><span class="message">nope, not at all, it's a different, incompatible instruction set</span></div><div class="line" id="204329"><span class="nick" style="color:#2e2a4a"><a href="#204329" label="[20:43:29]">&lt;xentrac&gt;</a></span><span class="message">although most of the opcodes are the same, which can trick you into thinking that</span></div><div class="line" id="204332"><span class="nick" style="color:#2e2a4a"><a href="#204332" label="[20:43:32]">&lt;xentrac&gt;</a></span><span class="message">but it's not true</span></div><div class="line" id="204337"><span class="nick" style="color:#2e2a4a"><a href="#204337" label="[20:43:37]">&lt;xentrac&gt;</a></span><span class="message">there's a FAQ about it</span></div><div class="line" id="204438"><span class="nick" style="color:#234e69"><a href="#204438" label="[20:44:38]">&lt;ekaitz&gt;</a></span><span class="message">can you show me the FAQ?</span></div><div class="line" id="204528"><span class="nick" style="color:#234e69"><a href="#204528" label="[20:45:28]">&lt;ekaitz&gt;</a></span><span class="message">the book I'm following doesn't mention that, in fact it's only providing the differences between the two in the RV64 part</span></div><div class="line" id="204558"><span class="nick" style="color:#234e69"><a href="#204558" label="[20:45:58]">&lt;ekaitz&gt;</a></span><span class="message">I recently made a JIT library migration and I didn't notice this... maybe it's just in some specific cases?</span></div><div class="line" id="204704"><span class="nick" style="color:#2e2a4a"><a href="#204704" label="[20:47:04]">&lt;xentrac&gt;</a></span><span class="message"> <a rel="nofollow" href="https://groups.google.com/a/groups.riscv.org/g/sw-dev/c/mUUaoxjQy6Q">https://groups.google.com/a/groups.riscv.org/g/sw-dev/c/mUUaoxjQy6Q</a> </span></div><div class="line" id="204708"><span class="nick" style="color:#234e69"><a href="#204708" label="[20:47:08]">&lt;ekaitz&gt;</a></span><span class="message">the only difference I see in the opcode is SLLI and such</span></div><div class="line" id="204920"><span class="nick" style="color:#2e2a4a"><a href="#204920" label="[20:49:20]">&lt;xentrac&gt;</a></span><span class="message">I think loading and storing to memory may be another big thing</span></div><div class="line" id="205011"><span class="nick" style="color:#2e2a4a"><a href="#205011" label="[20:50:11]">&lt;xentrac&gt;</a></span><span class="message">storing to memory with the same opcode as on rv32 will clobber another 4 bytes</span></div><div class="line" id="205031"><span class="nick" style="color:#2e2a4a"><a href="#205031" label="[20:50:31]">&lt;xentrac&gt;</a></span><span class="message">i think?</span></div><div class="line" id="205035"><span class="nick" style="color:#234e69"><a href="#205035" label="[20:50:35]">&lt;ekaitz&gt;</a></span><span class="message">not really</span></div><div class="line" id="205054"><span class="nick" style="color:#234e69"><a href="#205054" label="[20:50:54]">&lt;ekaitz&gt;</a></span><span class="message">32 bit uses sw, and 64 bit uses sd</span></div><div class="line" id="205057"><span class="nick" style="color:#2e2a4a"><a href="#205057" label="[20:50:57]">&lt;xentrac&gt;</a></span><span class="message">huh, guess I'm just wrong then.  what nice news!</span></div><div class="line" id="205112"><span class="nick" style="color:#234e69"><a href="#205112" label="[20:51:12]">&lt;ekaitz&gt;</a></span><span class="message">so the only difference is in the SLLI SRAI and such</span></div><div class="line" id="205158"><span class="nick" style="color:#2e2a4a"><a href="#205158" label="[20:51:58]">&lt;xentrac&gt;</a></span><span class="message">thanks for correcting me!</span></div><div class="line" id="205235"><span class="nick" style="color:#234e69"><a href="#205235" label="[20:52:35]">&lt;ekaitz&gt;</a></span><span class="message">but still! for our work it doesn't really matter that much, the code can be mostly copy-pasted from RV64 to RV32</span></div><div class="line" id="205237"><span class="nick" style="color:#234e69"><a href="#205237" label="[20:52:37]">&lt;ekaitz&gt;</a></span><span class="message">:D</span></div><div class="line" id="205258"><span class="nick" style="color:#234e69"><a href="#205258" label="[20:52:58]">&lt;ekaitz&gt;</a></span><span class="message">we just need to change the doubleword instructions to word instructions and they should work</span></div><div class="line" id="205306"><span class="nick" style="color:#234e69"><a href="#205306" label="[20:53:06]">&lt;ekaitz&gt;</a></span><span class="message">at least in hex0 / hex1</span></div><div class="line" id="205347"><span class="nick" style="color:#6d2462"><a href="#205347" label="[20:53:47]">&lt;stikonas&gt;</a></span><span class="message">yeah, that shoudl be enough in my opinion. Well plus elf header</span></div><div class="line" id="205437"><span class="nick" style="color:#234e69"><a href="#205437" label="[20:54:37]">&lt;ekaitz&gt;</a></span><span class="message">the elf header only changes the flag from 64 bit to 32</span></div><div class="line" id="205442"><span class="nick" style="color:#234e69"><a href="#205442" label="[20:54:42]">&lt;ekaitz&gt;</a></span><span class="message">it's the e_machine I thing</span></div><div class="line" id="205447"><span class="nick" style="color:#234e69"><a href="#205447" label="[20:54:47]">&lt;ekaitz&gt;</a></span><span class="message">think*</span></div><div class="line" id="214556"><span class="nick" style="color:#6d2462"><a href="#214556" label="[21:45:56]">&lt;stikonas&gt;</a></span><span class="message">ekaitz: e_machine is actually the same for 32-bit and 64-bit</span></div><div class="line" id="214604"><span class="nick" style="color:#6d2462"><a href="#214604" label="[21:46:04]">&lt;stikonas&gt;</a></span><span class="message">some other fields in the header are different</span></div><div class="line" id="214631"><span class="nick" style="color:#6d2462"><a href="#214631" label="[21:46:31]">&lt;stikonas&gt;</a></span><span class="message">machine class is 32 bit but also some addresses have to be 32-bit rather than 64-bit</span></div><div class="line" id="214659"><span class="nick" style="color:#6d2462"><a href="#214659" label="[21:46:59]">&lt;stikonas&gt;</a></span><span class="message">so header length is different</span></div><div class="line" id="214709"><span class="nick" style="color:#234e69"><a href="#214709" label="[21:47:09]">&lt;ekaitz&gt;</a></span><span class="message">there's just one</span></div><div class="line" id="214711"><span class="nick" style="color:#234e69"><a href="#214711" label="[21:47:11]">&lt;ekaitz&gt;</a></span><span class="message">e_ident[EI_CLASS]</span></div><div class="line" id="214824"><span class="nick" style="color:#234e69"><a href="#214824" label="[21:48:24]">&lt;ekaitz&gt;</a></span><span class="message">that has to be set to indicate 64 or 32 bit and that should be everything</span></div><div class="line" id="215559"><span class="nick" style="color:#6d2462"><a href="#215559" label="[21:55:59]">&lt;stikonas&gt;</a></span><span class="message">ekaitz: stuff like e_phoff is different</span></div><div class="line" id="215612"><span class="nick" style="color:#6d2462"><a href="#215612" label="[21:56:12]">&lt;stikonas&gt;</a></span><span class="message">or e_entry</span></div><div class="line" id="215622"><span class="nick" style="color:#6d2462"><a href="#215622" label="[21:56:22]">&lt;stikonas&gt;</a></span><span class="message">also program header has some addresses</span></div><div class="line" id="215740"><span class="nick" style="color:#6d2462"><a href="#215740" label="[21:57:40]">&lt;stikonas&gt;</a></span><span class="message">so e_ehsize and e_phentsize will also be different</span></div><div class="line" id="215757"><span class="nick" style="color:#6d2462"><a href="#215757" label="[21:57:57]">&lt;stikonas&gt;</a></span><span class="message">but we can probably steal those from x86</span></div><div class="line" id="215834"><span class="nick" style="color:#234e69"><a href="#215834" label="[21:58:34]">&lt;ekaitz&gt;</a></span><span class="message">lol so hex0 might be working by accident because i didn't really payed attention to that</span></div><div class="line" id="215844"><span class="nick" style="color:#234e69"><a href="#215844" label="[21:58:44]">&lt;ekaitz&gt;</a></span><span class="message">i copied from AMD64 anyway :D</span></div><div class="line" id="220352"><span class="nick" style="color:#6d2462"><a href="#220352" label="[22:03:52]">&lt;stikonas&gt;</a></span><span class="message">well, for rv64 it makes sense to copy from amd64 but for rv32 copy from x86</span></div><div class="line" id="220400"><span class="nick" style="color:#6d2462"><a href="#220400" label="[22:04:00]">&lt;stikonas&gt;</a></span><span class="message">I wonder if elf32 will run on rv64...</span></div><div class="line" id="220405"><span class="nick" style="color:#6d2462"><a href="#220405" label="[22:04:05]">&lt;stikonas&gt;</a></span><span class="message">or at least one qemu...</span></div><div class="line" id="223832"><span class="nick" style="color:#d9d9d9"><a href="#223832" label="[22:38:32]">&lt;oriansj&gt;</a></span><span class="message">ekaitz: mescc-tools/examples/M0-macro.c</span></div><div class="line" id="223906"><span class="nick" style="color:#234e69"><a href="#223906" label="[22:39:06]">&lt;ekaitz&gt;</a></span><span class="message">oriansj: yes thanks! I already found and checked it</span></div><div class="line" id="224050"><span class="nick" style="color:#6d2462"><a href="#224050" label="[22:40:50]">&lt;stikonas&gt;</a></span><span class="message">oriansj: and do you have any opinion on alternative hex character checks (with fewer branches)?</span></div><div class="line" id="224148"><span class="nick" style="color:#6d2462"><a href="#224148" label="[22:41:48]">&lt;stikonas&gt;</a></span><span class="message">I guess there are some pros and cons with with each of them</span></div><div class="line" id="224205"><span class="nick" style="color:#d9d9d9"><a href="#224205" label="[22:42:05]">&lt;oriansj&gt;</a></span><span class="message">stikonas: hex0 should optimize for less bytes and easier understanding.</span></div><div class="line" id="224236"><span class="nick" style="color:#234e69"><a href="#224236" label="[22:42:36]">&lt;ekaitz&gt;</a></span><span class="message">oriansj: which one is more important?</span></div><div class="line" id="224237"><span class="nick" style="color:#6d2462"><a href="#224237" label="[22:42:37]">&lt;stikonas&gt;</a></span><span class="message">well, fewest bytes option might be hardest to understand</span></div><div class="line" id="224247"><span class="nick" style="color:#d9d9d9"><a href="#224247" label="[22:42:47]">&lt;oriansj&gt;</a></span><span class="message">branches and jumps are fine to do by hand if you  properly label the addresses at each label.</span></div><div class="line" id="224315"><span class="nick" style="color:#d9d9d9"><a href="#224315" label="[22:43:15]">&lt;oriansj&gt;</a></span><span class="message">ekaitz: understanding is most important. Less bytes is the second priority.</span></div><div class="line" id="224319"><span class="nick" style="color:#6d2462"><a href="#224319" label="[22:43:19]">&lt;stikonas&gt;</a></span><span class="message">well, then maybe just leave current version...</span></div><div class="line" id="224403"><span class="nick" style="color:#6d2462"><a href="#224403" label="[22:44:03]">&lt;stikonas&gt;</a></span><span class="message">although, currently addressess in hex0_RV64 are not properly labelled</span></div><div class="line" id="224431"><span class="nick" style="color:#d9d9d9"><a href="#224431" label="[22:44:31]">&lt;oriansj&gt;</a></span><span class="message">The binary hex0 is the only thing that needs to be inspected byte by byte and less confusion the better. Hand toggling in the binary is the second factor which we would want to optimize for (less bytes)</span></div><div class="line" id="224553"><span class="nick" style="color:#6d2462"><a href="#224553" label="[22:45:53]">&lt;stikonas&gt;</a></span><span class="message">well, in risc-v branches are a bit annoying even with labels with addresses but it's not complicated to understand, just a bit more work to check everything</span></div><div class="line" id="224700"><span class="nick" style="color:#6d2462"><a href="#224700" label="[22:47:00]">&lt;stikonas&gt;</a></span><span class="message">you basically have to inspect it bit by bit... rather than byte by byte</span></div><div class="line" id="224722"><span class="nick" style="color:#d9d9d9"><a href="#224722" label="[22:47:22]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well there will only be 3 programs where jumps need to be calculated: hex0, hex1 and kaem-minimal.hex0</span></div><div class="line" id="224736"><span class="nick" style="color:#6d2462"><a href="#224736" label="[22:47:36]">&lt;stikonas&gt;</a></span><span class="message">that's true</span></div><div class="line" id="224752"><span class="nick" style="color:#d9d9d9"><a href="#224752" label="[22:47:52]">&lt;oriansj&gt;</a></span><span class="message">but yeah RISC-V is a horrible architecture for bootstrapping</span></div><div class="line" id="224812"><span class="nick" style="color:#6d2462"><a href="#224812" label="[22:48:12]">&lt;stikonas&gt;</a></span><span class="message">yeah, I didn't know risc-v would be that horrible...</span></div><div class="line" id="224933"><span class="nick" style="color:#6d2462"><a href="#224933" label="[22:49:33]">&lt;stikonas&gt;</a></span><span class="message">assembly language itself looks alright but machine language is horrible...</span></div><div class="line" id="224959"><span class="nick" style="color:#6d2462"><a href="#224959" label="[22:49:59]">&lt;stikonas&gt;</a></span><span class="message">and of course we'll later have all those problems with old gnu software not working on risc-v</span></div><div class="line" id="225001"><span class="nick" style="color:#d9d9d9"><a href="#225001" label="[22:50:01]">&lt;oriansj&gt;</a></span><span class="message">well whenever Instruction Set design decisions start with the assumption of simplify hardware at the cost of making programmers do more work. It usually means it is a dumpster fire of short-sighted decisions.</span></div><div class="line" id="225229"><span class="nick" style="color:#6d2462"><a href="#225229" label="[22:52:29]">&lt;stikonas&gt;</a></span><span class="message">ekaitz: by the way, any reason why you open file with append in hex0?</span></div><div class="line" id="225248"><span class="nick" style="color:#234e69"><a href="#225248" label="[22:52:48]">&lt;ekaitz&gt;</a></span><span class="message">no reason at all</span></div><div class="line" id="225257"><span class="nick" style="color:#6d2462"><a href="#225257" label="[22:52:57]">&lt;stikonas&gt;</a></span><span class="message">I would think O_TRUNC would make more sense</span></div><div class="line" id="225302"><span class="nick" style="color:#6d2462"><a href="#225302" label="[22:53:02]">&lt;stikonas&gt;</a></span><span class="message">easy to change though...</span></div><div class="line" id="225304"><span class="nick" style="color:#234e69"><a href="#225304" label="[22:53:04]">&lt;ekaitz&gt;</a></span><span class="message">yeah, surely</span></div><div class="line" id="225333"><span class="nick" style="color:#6d2462"><a href="#225333" label="[22:53:33]">&lt;stikonas&gt;</a></span><span class="message">just need to use mode 00001000 there instead of 00002000</span></div><div class="line" id="225427"><span class="nick" style="color:#234e69"><a href="#225427" label="[22:54:27]">&lt;ekaitz&gt;</a></span><span class="message">yeah, change it if you prefer. I think it's better with O_TRUNC</span></div><div class="line" id="225505"><span class="nick" style="color:#6d2462"><a href="#225505" label="[22:55:05]">&lt;stikonas&gt;</a></span><span class="message">at least this is easy to encode into .hex0 file</span></div><div class="line" id="225514"><span class="nick" style="color:#6d2462"><a href="#225514" label="[22:55:14]">&lt;stikonas&gt;</a></span><span class="message">just one line change</span></div><div class="line" id="225520"><span class="nick" style="color:#6d2462"><a href="#225520" label="[22:55:20]">&lt;stikonas&gt;</a></span><span class="message">(plus comments)</span></div><div class="line" id="225528"><span class="nick" style="color:#6d2462"><a href="#225528" label="[22:55:28]">&lt;stikonas&gt;</a></span><span class="message">I can make a PR then...</span></div><div class="line" id="225705"><span class="nick" style="color:#6d2462"><a href="#225705" label="[22:57:05]">&lt;stikonas&gt;</a></span><span class="message">hmm, speaking of PR, .S file should probably go to stage0-posix...</span></div><div class="line" id="225706"><span class="nick" style="color:#d9d9d9"><a href="#225706" label="[22:57:06]">&lt;oriansj&gt;</a></span><span class="message">although it looks like RISC-V's hex1 is likely going to be bigger than ALL other architectures' hex1 because word manipulation needs a bunch more state.</span></div><div class="line" id="225829"><span class="nick" style="color:#6d2462"><a href="#225829" label="[22:58:29]">&lt;stikonas&gt;</a></span><span class="message">does it even make sense to write hex1 then?</span></div><div class="line" id="225837"><span class="nick" style="color:#6d2462"><a href="#225837" label="[22:58:37]">&lt;stikonas&gt;</a></span><span class="message">rather than going for hex2 directly</span></div><div class="line" id="225924"><span class="nick" style="color:#6d2462"><a href="#225924" label="[22:59:24]">&lt;stikonas&gt;</a></span><span class="message">if hex1 is quite big already, adding multiple label support might not make it much bigger</span></div><div class="line" id="230101"><span class="nick" style="color:#d9d9d9"><a href="#230101" label="[23:01:01]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well that will be 100% your decision and once I get word behavior in hex2 done'ish you'll have a more informed decision to work with.</span></div><div class="line" id="230657"><span class="nick" style="color:#6d2462"><a href="#230657" label="[23:06:57]">&lt;stikonas&gt;</a></span><span class="message">ok, I made O_TRUNC pull request to bootstrap seeds...</span></div><div class="line" id="230717"><span class="nick" style="color:#6d2462"><a href="#230717" label="[23:07:17]">&lt;stikonas&gt;</a></span><span class="message">although , I think .S file should be moved to stage0-posix/RV64/Development</span></div><div class="line" id="230736"><span class="nick" style="color:#6d2462"><a href="#230736" label="[23:07:36]">&lt;stikonas&gt;</a></span><span class="message">since that's what we do for all other arches</span></div><div class="line" id="233137"><span class="nick" style="color:#234e69"><a href="#233137" label="[23:31:37]">&lt;ekaitz&gt;</a></span><span class="message">stikonas: yeah, good idea</span></div><div class="line" id="233212"><span class="nick" style="color:#6d2462"><a href="#233212" label="[23:32:12]">&lt;stikonas&gt;</a></span><span class="message">oriansj: maybe you can move it rather than me making another 2 PRs?</span></div><div class="line" id="233215"><span class="nick" style="color:#234e69"><a href="#233215" label="[23:32:15]">&lt;ekaitz&gt;</a></span><span class="message">I added it to the bootstrap seeds because I wanted it to serve as documentation, but it doesn't really make any sense to keep it there if others are in stage0-posix</span></div><div class="line" id="233838"><span class="nick" style="color:#6d2462"><a href="#233838" label="[23:38:38]">&lt;stikonas&gt;</a></span><span class="message">maybe README file then?</span></div><div class="line" id="233855"><span class="nick" style="color:#6d2462"><a href="#233855" label="[23:38:55]">&lt;stikonas&gt;</a></span><span class="message">.hex0 files are actually duplicated among both repos</span></div><div class="line" id="234935"><span class="nick" style="color:#6d2462"><a href="#234935" label="[23:49:35]">&lt;stikonas&gt;</a></span><span class="message">actually, if we follow other arches, maybe .S should be moved to stage0-posix/RV64/GAS/</span></div><br /></div></body></html>