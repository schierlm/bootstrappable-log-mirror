<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-07-13.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000251"><span class="nick" style="color:#389600"><a href="#000251" label="[00:02:51]">&lt;oriansj&gt;</a></span><span class="message">and github just became unusuable without javascript</span></div><div class="line" id="003005"><span class="nick" style="color:#8dd3c7"><a href="#003005" label="[00:30:05]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, do you want to move to something else then?</span></div><div class="line" id="003329"><span class="nick" style="color:#389600"><a href="#003329" label="[00:33:29]">&lt;oriansj&gt;</a></span><span class="message">Well, I have already mirror'd all of my work to sourcehut/savannah; I was just surprised that I can't even see other people's code without javascript</span></div><div class="line" id="003438"><span class="nick" style="color:#389600"><a href="#003438" label="[00:34:38]">&lt;oriansj&gt;</a></span><span class="message">(in case anyone is curious: <a rel="nofollow" href="https://git.sr.ht/~oriansj/">https://git.sr.ht/~oriansj/</a>  )</span></div><div class="line" id="012831"><span class="nick" style="color:#389600"><a href="#012831" label="[01:28:31]">&lt;oriansj&gt;</a></span><span class="message">so in many ways I have already moved away from github for anything but pushing a few new commits; and pulling from a few repos before merging locally</span></div><div class="line" id="024000"><span class="nick" style="color:#2e2a4a"><a href="#024000" label="[02:40:00]">&lt;pder&gt;</a></span><span class="message">fossy: I looked into gcc-13.1.0 creating binaries that crash on startup and it appears that disabling ssp fixes it.</span></div><div class="line" id="024139"><span class="nick" style="color:#2e2a4a"><a href="#024139" label="[02:41:39]">&lt;pder&gt;</a></span><span class="message">I tried dropping the libssp_nonshared patch and passing --disable-default-ssp to configure and was able to build working binaries.</span></div><div class="line" id="024239"><span class="nick" style="color:#2e2a4a"><a href="#024239" label="[02:42:39]">&lt;pder&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/pder/live-bootstrap/tree/gcc-13-disable-ssp">https://github.com/pder/live-bootstrap/tree/gcc-13-disable-ssp</a> </span></div><div class="line" id="024328"><span class="nick" style="color:#2e2a4a"><a href="#024328" label="[02:43:28]">&lt;pder&gt;</a></span><span class="message">I tested rebuilding a couple of packages like sed, make, and tar and gcc with ssp crashes on all of them</span></div><div class="line" id="024417"><span class="nick" style="color:#2e2a4a"><a href="#024417" label="[02:44:17]">&lt;pder&gt;</a></span><span class="message">With the patch, they work</span></div><div class="line" id="030720"><span class="nick" style="color:#389600"><a href="#030720" label="[03:07:20]">&lt;oriansj&gt;</a></span><span class="message">pder: nice work ^_^</span></div><div class="line" id="103036"><span class="nick" style="color:#6b8072"><a href="#103036" label="[10:30:36]">&lt;doras&gt;</a></span><span class="message">stikonas: I'd like sysc's /init to clear environment variables before doing anything meaningful, to isolate it from the environment in which it can run. How would you approach this?</span></div><div class="line" id="103615"><span class="nick" style="color:#6b8072"><a href="#103615" label="[10:36:15]">&lt;doras&gt;</a></span><span class="message">Maybe also sysb's, to keep things consistent.</span></div><div class="line" id="103830"><span class="nick" style="color:#6b8072"><a href="#103830" label="[10:38:30]">&lt;doras&gt;</a></span><span class="message">The options are likely to either move logic from /init to the respective ./run.sh scripts and call them with env -i, or maybe to use #!/usr/bin/env -S -i bash as the shebang.</span></div><div class="line" id="104128"><span class="nick" style="color:#6b8072"><a href="#104128" label="[10:41:28]">&lt;doras&gt;</a></span><span class="message">The latter assumes that we have a capable env available when /init is executed in both cases.</span></div><div class="line" id="104953"><span class="nick" style="color:#6b8072"><a href="#104953" label="[10:49:53]">&lt;doras&gt;</a></span><span class="message">I guess it would have to be added to sys_transfer and then maybe removed before coreutils is installed.</span></div><div class="line" id="105627"><span class="nick" style="color:#6b8072"><a href="#105627" label="[10:56:27]">&lt;doras&gt;</a></span><span class="message">A third option, which is not as comprehensive as the first two, is to keep /init as-is and only run ./run.sh with env -i.</span></div><div class="line" id="111119"><span class="nick" style="color:#8dd3c7"><a href="#111119" label="[11:11:19]">&lt;stikonas[m]&gt;</a></span><span class="message">Hmm, let's ask fossy...</span></div><div class="line" id="111210"><span class="nick" style="color:#8dd3c7"><a href="#111210" label="[11:12:10]">&lt;stikonas[m]&gt;</a></span><span class="message">I think I might be leaning for simpler 3rd option...</span></div><div class="line" id="111231"><span class="nick" style="color:#8dd3c7"><a href="#111231" label="[11:12:31]">&lt;stikonas[m]&gt;</a></span><span class="message">Nothing particularly interesting happens before run.sh</span></div><div class="line" id="111240"><span class="nick" style="color:#8dd3c7"><a href="#111240" label="[11:12:40]">&lt;stikonas[m]&gt;</a></span><span class="message">We just unpack stuff</span></div><div class="line" id="113747"><span class="nick" style="color:#8dd3c7"><a href="#113747" label="[11:37:47]">&lt;stikonas[m]&gt;</a></span><span class="message">Transferring env to sysc and removing before coreutils is installed sounds a bit overkill given that coreutils installation is the first thing to run...</span></div><div class="line" id="113810"><span class="nick" style="color:#8dd3c7"><a href="#113810" label="[11:38:10]">&lt;stikonas[m]&gt;</a></span><span class="message">Though I guess moving logic to next file is also fine</span></div><div class="line" id="113832"><span class="nick" style="color:#8dd3c7"><a href="#113832" label="[11:38:32]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, lets see what fossy thinks</span></div><div class="line" id="165610"><span class="nick" style="color:#6b8072"><a href="#165610" label="[16:56:10]">&lt;doras&gt;</a></span><span class="message">stikonas: I think the third suggestion has a place regardless of the additional value that the first two may bring. I think I'll create a PR about it anyway.</span></div><div class="line" id="170109"><span class="nick" style="color:#6b8072"><a href="#170109" label="[17:01:09]">&lt;doras&gt;</a></span><span class="message">stikonas: another thing I thought I may tackle, as far as I can tell, such uses of `export` in build scripts effectively &quot;pollute&quot; the build environment of every package that follows since nothing unsets the variable or changes it to its original value: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/49a267655113a85197b8682f6d23225795970d6d/sysc/openssl-1.1.1l/openssl-1.1.1l.sh#L26">https://github.com/fosslinux/live-bootstrap/blob/49a267655113a85197b8682f6d23225795970d6d/sysc/openssl-1.1.1l/openssl-1.1.1l.sh#L26</a> </span></div><div class="line" id="170219"><span class="nick" style="color:#6b8072"><a href="#170219" label="[17:02:19]">&lt;doras&gt;</a></span><span class="message">With some basics tests it seems that using declare -x instead of export may be a good minimal-impact solution here, since it exports the variables only in the scope of the function where it's called. What do you think?</span></div><div class="line" id="170225"><span class="nick" style="color:#6b8072"><a href="#170225" label="[17:02:25]">&lt;doras&gt;</a></span><span class="message">basic tests*</span></div><div class="line" id="170230"><span class="nick" style="color:#8dd3c7"><a href="#170230" label="[17:02:30]">&lt;stikonas[m]&gt;</a></span><span class="message">Dor Askayo: yes, ideally we have each function in subshell</span></div><div class="line" id="170251"><span class="nick" style="color:#8dd3c7"><a href="#170251" label="[17:02:51]">&lt;stikonas[m]&gt;</a></span><span class="message">But declare local might work for now</span></div><div class="line" id="171409"><span class="nick" style="color:#6b8072"><a href="#171409" label="[17:14:09]">&lt;doras&gt;</a></span><span class="message">stikonas: it seems that both `local` and `declare -x` work. Do you know which is more appropriate?</span></div><div class="line" id="171759"><span class="nick" style="color:#8dd3c7"><a href="#171759" label="[17:17:59]">&lt;stikonas[m]&gt;</a></span><span class="message">local doesn't export</span></div><div class="line" id="171809"><span class="nick" style="color:#8dd3c7"><a href="#171809" label="[17:18:09]">&lt;stikonas[m]&gt;</a></span><span class="message">So perhaps that's sufficient</span></div><div class="line" id="171854"><span class="nick" style="color:#8dd3c7"><a href="#171854" label="[17:18:54]">&lt;stikonas[m]&gt;</a></span><span class="message">But do we get the same hash?</span></div><div class="line" id="172052"><span class="nick" style="color:#6b8072"><a href="#172052" label="[17:20:52]">&lt;doras&gt;</a></span><span class="message">stikonas: I haven't ran it through the bootstrap yet, just playing with test scripts to understand what should and shouldn't work.</span></div><div class="line" id="172239"><span class="nick" style="color:#6b8072"><a href="#172239" label="[17:22:39]">&lt;doras&gt;</a></span><span class="message">stikonas: &quot;local doesn't export&quot; is what I thought too, but it seems that it does. Well, if you define &quot;export&quot; as &quot;pass environment variable to passed to child processes&quot;.</span></div><div class="line" id="172303"><span class="nick" style="color:#6b8072"><a href="#172303" label="[17:23:03]">&lt;doras&gt;</a></span><span class="message">is passed*</span></div><div class="line" id="172304"><span class="nick" style="color:#8dd3c7"><a href="#172304" label="[17:23:04]">&lt;stikonas[m]&gt;</a></span><span class="message">Oh I see</span></div><div class="line" id="173124"><span class="nick" style="color:#6b8072"><a href="#173124" label="[17:31:24]">&lt;doras&gt;</a></span><span class="message">stikonas: never mind, I figured it out. I was playing with the `SOURCE_DATE_EPOCH` example, which is already exported globally using `export`. So if you &quot;redefine&quot; an exported variable with a `local` variable inside a function, it does not remove it from the exported list and any command executed from the scope of the function (or nested functions) would inherit this &quot;local&quot; environment variable.</span></div><div class="line" id="173208"><span class="nick" style="color:#6b8072"><a href="#173208" label="[17:32:08]">&lt;doras&gt;</a></span><span class="message">However, when it's not exported globally using export, it does indeed remain local to the script and not exported to child processes.</span></div><div class="line" id="173332"><span class="nick" style="color:#6b8072"><a href="#173332" label="[17:33:32]">&lt;doras&gt;</a></span><span class="message">On the other hand, declare -x, when used in the context of a function, exports the variable to child processes even if it's not declared globally with export, but only for commands executed within the scope of the function (or nested functions).</span></div><div class="line" id="173409"><span class="nick" style="color:#6b8072"><a href="#173409" label="[17:34:09]">&lt;doras&gt;</a></span><span class="message">stikonas: so I think `declare -x` is may be the appropriate candidate when we actually expect child processes to consume the variable.</span></div><div class="line" id="173420"><span class="nick" style="color:#8dd3c7"><a href="#173420" label="[17:34:20]">&lt;stikonas[m]&gt;</a></span><span class="message">OK, so I think declare -x is the way to go</span></div><div class="line" id="173425"><span class="nick" style="color:#6b8072"><a href="#173425" label="[17:34:25]">&lt;doras&gt;</a></span><span class="message">Yes</span></div><div class="line" id="173432"><span class="nick" style="color:#8dd3c7"><a href="#173432" label="[17:34:32]">&lt;stikonas[m]&gt;</a></span><span class="message">But probably only in new bash</span></div><div class="line" id="173441"><span class="nick" style="color:#8dd3c7"><a href="#173441" label="[17:34:41]">&lt;stikonas[m]&gt;</a></span><span class="message">Bash 2 might not support it</span></div><div class="line" id="174103"><span class="nick" style="color:#6b8072"><a href="#174103" label="[17:41:03]">&lt;doras&gt;</a></span><span class="message">stikonas: digging in some old docs for 2.05b, it seems that it should be supported.</span></div><div class="line" id="174134"><span class="nick" style="color:#8dd3c7"><a href="#174134" label="[17:41:34]">&lt;stikonas[m]&gt;</a></span><span class="message">OK, so we can use it everywhere...</span></div><div class="line" id="174437"><span class="nick" style="color:#6b8072"><a href="#174437" label="[17:44:37]">&lt;doras&gt;</a></span><span class="message">stikonas: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/309">https://github.com/fosslinux/live-bootstrap/pull/309</a> </span></div><div class="line" id="174523"><span class="nick" style="color:#80b1d3"><a href="#174523" label="[17:45:23]">&lt;drakonis&gt;</a></span><span class="message"> <a rel="nofollow" href="https://board.flatassembler.net/topic.php?t=22855">https://board.flatassembler.net/topic.php?t=22855</a>  might be mildly relevant?</span></div><div class="line" id="174711"><span class="nick" style="color:#80b1d3"><a href="#174711" label="[17:47:11]">&lt;drakonis&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/tgrysztar/fasmg/blob/master/packages/x86-2/test.asm">https://github.com/tgrysztar/fasmg/blob/master/packages/x86-2/test.asm</a>  specifically due to this</span></div><div class="line" id="175047"><span class="nick" style="color:#80b1d3"><a href="#175047" label="[17:50:47]">&lt;drakonis&gt;</a></span><span class="message">specifically its ability to select which encodings can be used on a per instruction basis and being able to write the output encoding into the source file</span></div><div class="line" id="214942"><span class="nick" style="color:#6b8072"><a href="#214942" label="[21:49:42]">&lt;doras&gt;</a></span><span class="message">Has anyone ever seen this dhcpcd error with live-bootstrap in the QEMU bootstrap mode? <a rel="nofollow" href="https://gitlab.gnome.org/-/snippets/5923/raw/main/live-bootstrap-dhcpcd-error.txt">https://gitlab.gnome.org/-/snippets/5923/raw/main/live-bootstrap-dhcpcd-error.txt</a> </span></div><div class="line" id="215259"><span class="nick" style="color:#6b8072"><a href="#215259" label="[21:52:59]">&lt;doras&gt;</a></span><span class="message">Never mind, I suspect it's a DNS connectivity issue.</span></div><div class="line" id="215916"><span class="nick" style="color:#6d2462"><a href="#215916" label="[21:59:16]">&lt;stikonas&gt;</a></span><span class="message">doras: by the way, have you tried pder's patch</span></div><div class="line" id="215938"><span class="nick" style="color:#6d2462"><a href="#215938" label="[21:59:38]">&lt;stikonas&gt;</a></span><span class="message">which should hopefully fix crash in gcc</span></div><div class="line" id="220053"><span class="nick" style="color:#6b8072"><a href="#220053" label="[22:00:53]">&lt;doras&gt;</a></span><span class="message">stikonas: I haven't. I guess I missed it. Where can I find it?</span></div><div class="line" id="220054"><span class="nick" style="color:#6d2462"><a href="#220054" label="[22:00:54]">&lt;stikonas&gt;</a></span><span class="message">though it's probably just a workaround, in principle SSP shouldn't crash</span></div><div class="line" id="220119"><span class="nick" style="color:#6d2462"><a href="#220119" label="[22:01:19]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/pder/live-bootstrap/tree/gcc-13-disable-ssp">https://github.com/pder/live-bootstrap/tree/gcc-13-disable-ssp</a> </span></div><div class="line" id="220850"><span class="nick" style="color:#2e2a4a"><a href="#220850" label="[22:08:50]">&lt;pder&gt;</a></span><span class="message">Figuring out a way to enable ssp with gcc 13 and musl should be possible, but just needs more investigation.</span></div><div class="line" id="221031"><span class="nick" style="color:#6d2462"><a href="#221031" label="[22:10:31]">&lt;stikonas&gt;</a></span><span class="message">yes, which is why I don't mind merging this first</span></div><div class="line" id="221133"><span class="nick" style="color:#6d2462"><a href="#221133" label="[22:11:33]">&lt;stikonas&gt;</a></span><span class="message">hmm, I've just though of another small speedup in sysa</span></div><div class="line" id="221134"><span class="nick" style="color:#2e2a4a"><a href="#221134" label="[22:11:34]">&lt;pder&gt;</a></span><span class="message">ok, still need to update checksums and maybe a bit more cleanup</span></div><div class="line" id="221157"><span class="nick" style="color:#6d2462"><a href="#221157" label="[22:11:57]">&lt;stikonas&gt;</a></span><span class="message">it should be possible to build mes before we build libc+tcc</span></div><div class="line" id="221203"><span class="nick" style="color:#6d2462"><a href="#221203" label="[22:12:03]">&lt;stikonas&gt;</a></span><span class="message">and mes is faster than mes-m2</span></div><div class="line" id="221255"><span class="nick" style="color:#2e2a4a"><a href="#221255" label="[22:12:55]">&lt;pder&gt;</a></span><span class="message">stikonas: do you have any thoughts on the pregenerated files in nyacc and how to solve that?</span></div><div class="line" id="221314"><span class="nick" style="color:#6d2462"><a href="#221314" label="[22:13:14]">&lt;stikonas&gt;</a></span><span class="message">pder: well, janneke suggests waiting for mes 0.26 (current version is 0.24)</span></div><div class="line" id="221328"><span class="nick" style="color:#6d2462"><a href="#221328" label="[22:13:28]">&lt;stikonas&gt;</a></span><span class="message">when scheme module support is planned</span></div><div class="line" id="221345"><span class="nick" style="color:#6d2462"><a href="#221345" label="[22:13:45]">&lt;stikonas&gt;</a></span><span class="message">otherwise we need to hack some nyacc modules to be mes modules</span></div><div class="line" id="221425"><span class="nick" style="color:#6d2462"><a href="#221425" label="[22:14:25]">&lt;stikonas&gt;</a></span><span class="message">something like here which has mes-use-module <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/mes.git/tree/mes/module/mescc/mescc.mes">https://git.savannah.gnu.org/cgit/mes.git/tree/mes/module/mescc/mescc.mes</a> </span></div><div class="line" id="221458"><span class="nick" style="color:#6d2462"><a href="#221458" label="[22:14:58]">&lt;stikonas&gt;</a></span><span class="message">but I'm not very familiar with what exactly this means</span></div><div class="line" id="221549"><span class="nick" style="color:#2e2a4a"><a href="#221549" label="[22:15:49]">&lt;pder&gt;</a></span><span class="message">what is the difference between mes-m2 and mes?  Is it just that mes is the interpreter code compiled by mescc?</span></div><div class="line" id="221603"><span class="nick" style="color:#2e2a4a"><a href="#221603" label="[22:16:03]">&lt;pder&gt;</a></span><span class="message">and mes-m2 is the same code compiled by M2-Planet?</span></div><div class="line" id="221624"><span class="nick" style="color:#6d2462"><a href="#221624" label="[22:16:24]">&lt;stikonas&gt;</a></span><span class="message">yes</span></div><div class="line" id="221640"><span class="nick" style="color:#2e2a4a"><a href="#221640" label="[22:16:40]">&lt;pder&gt;</a></span><span class="message">Do they have different feature sets or just differences in performance?</span></div><div class="line" id="221726"><span class="nick" style="color:#6d2462"><a href="#221726" label="[22:17:26]">&lt;stikonas&gt;</a></span><span class="message">should be the same but mes-m2 fails to compile tcc (crashes)</span></div><div class="line" id="221759"><span class="nick" style="color:#6d2462"><a href="#221759" label="[22:17:59]">&lt;stikonas&gt;</a></span><span class="message">anyway, this would be replacing interpreter with better interpreter, so I don't see any drawbacks...</span></div><div class="line" id="221806"><span class="nick" style="color:#6d2462"><a href="#221806" label="[22:18:06]">&lt;stikonas&gt;</a></span><span class="message">i.e. move <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysa/mes-0.24.2/mes-0.24.2.kaem#L242">https://github.com/fosslinux/live-bootstrap/blob/master/sysa/mes-0.24.2/mes-0.24.2.kaem#L242</a>  a bit higher</span></div><div class="line" id="221825"><span class="nick" style="color:#6d2462"><a href="#221825" label="[22:18:25]">&lt;stikonas&gt;</a></span><span class="message">(and possibly need to redefine MES to be /usr/bin/mes instead of /usr/bin/mes-m2)</span></div><div class="line" id="221933"><span class="nick" style="color:#2e2a4a"><a href="#221933" label="[22:19:33]">&lt;pder&gt;</a></span><span class="message">So after building mes-m2 you immediate recompile mes with mescc?  Then compile the mes C library?</span></div><div class="line" id="222332"><span class="nick" style="color:#6d2462"><a href="#222332" label="[22:23:32]">&lt;stikonas&gt;</a></span><span class="message">so at the moment we build mes-m2, libc (part needed to rebuild mes) libc+tcc (part needed to build tcc) mes and then tcc</span></div><div class="line" id="222344"><span class="nick" style="color:#6d2462"><a href="#222344" label="[22:23:44]">&lt;stikonas&gt;</a></span><span class="message">I think mes-m2 libc mes libc+tcc tcc would work</span></div><div class="line" id="222409"><span class="nick" style="color:#6d2462"><a href="#222409" label="[22:24:09]">&lt;stikonas&gt;</a></span><span class="message">also another small task if you want, I think we don't install libbz2.a and the header in bzip2 package...</span></div><div class="line" id="222416"><span class="nick" style="color:#6d2462"><a href="#222416" label="[22:24:16]">&lt;stikonas&gt;</a></span><span class="message">so we can't enable bz2 module in python3.11</span></div><div class="line" id="222958"><span class="nick" style="color:#2e2a4a"><a href="#222958" label="[22:29:58]">&lt;pder&gt;</a></span><span class="message">yeah, looks like we only install bzip2 bunzip2 and bzcat</span></div><div class="line" id="223839"><span class="nick" style="color:#6b8072"><a href="#223839" label="[22:38:39]">&lt;doras&gt;</a></span><span class="message">stikonas, pder: I started CI with the `gcc-13-disable-ssp` branch for testing: <a rel="nofollow" href="https://gitlab.com/freedesktop-sdk/freedesktop-sdk-binary-seed/-/jobs/4650896819">https://gitlab.com/freedesktop-sdk/freedesktop-sdk-binary-seed/-/jobs/4650896819</a> </span></div><div class="line" id="224130"><span class="nick" style="color:#6b8072"><a href="#224130" label="[22:41:30]">&lt;doras&gt;</a></span><span class="message">It will likely take a while and doesn't show live output for live-bootstrap. Though I set the JOBS configuration in bootstrap.cfg to 12 cores, so maybe it will at least be quicker. I hope we don't have reproduciblity issues with build concurrency.</span></div><div class="line" id="224440"><span class="nick" style="color:#6b8072"><a href="#224440" label="[22:44:40]">&lt;doras&gt;</a></span><span class="message">I also ran into a strange build issue with python-2.5.6: <a rel="nofollow" href="https://gitlab.gnome.org/-/snippets/5925/raw/main/live-bootstrap-python-2.5.6-build-failure.txt">https://gitlab.gnome.org/-/snippets/5925/raw/main/live-bootstrap-python-2.5.6-build-failure.txt</a> </span></div><div class="line" id="224545"><span class="nick" style="color:#6b8072"><a href="#224545" label="[22:45:45]">&lt;doras&gt;</a></span><span class="message">This is from a bwrap bootstrap and my branch to remove some exported variables that shouldn't be exported.</span></div><div class="line" id="224620"><span class="nick" style="color:#6b8072"><a href="#224620" label="[22:46:20]">&lt;doras&gt;</a></span><span class="message">I don't see how my changes can cause it, so I was wondering if anyone had seen it before.</span></div><div class="line" id="224629"><span class="nick" style="color:#2e2a4a"><a href="#224629" label="[22:46:29]">&lt;pder&gt;</a></span><span class="message">doras: I didn't update the checksum on the gcc-13.1.0 so you might get a failure there</span></div><div class="line" id="224740"><span class="nick" style="color:#6b8072"><a href="#224740" label="[22:47:40]">&lt;doras&gt;</a></span><span class="message">pder: thanks for the heads up. It's fine though, I set it not to fail due to checksum changes (`UPDATE_CHECKSUMS=True` in `bootstrap.cfg`)</span></div><div class="line" id="224813"><span class="nick" style="color:#2e2a4a"><a href="#224813" label="[22:48:13]">&lt;pder&gt;</a></span><span class="message">ok, good.  didn't want you to be disappointed after waiting several hours</span></div><div class="line" id="225448"><span class="nick" style="color:#6b8072"><a href="#225448" label="[22:54:48]">&lt;doras&gt;</a></span><span class="message">Regarding the python-2.5.6 failure, I'll try bootstrapping again to see if the issue is consistent.</span></div><div class="line" id="235359"><span class="nick" style="color:#6d2462"><a href="#235359" label="[23:53:59]">&lt;stikonas&gt;</a></span><span class="message">it would also be good to add ncurses/libreadline in sysc...</span></div><br /></div></body></html>