<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-04-27.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="022803"><span class="nick" style="color:#8dd3c7"><a href="#022803" label="[02:28:03]">&lt;Hagfish&gt;</a></span><span class="message">interesting, thank you</span></div><div class="line" id="023129"><span class="nick" style="color:#2e2a4a"><a href="#023129" label="[02:31:29]">&lt;OriansJ&gt;</a></span><span class="message">nothing we do has to be of practical value right now, only has to be something bootstrapped and we wanted to do; the practical value and application can be sorted out later when we need that thing for some reason.</span></div><div class="line" id="023301"><span class="nick" style="color:#2e2a4a"><a href="#023301" label="[02:33:01]">&lt;OriansJ&gt;</a></span><span class="message">because we have enough practical (non-fun) work to deal with anyway.</span></div><div class="line" id="023418"><span class="nick" style="color:#2e2a4a"><a href="#023418" label="[02:34:18]">&lt;OriansJ&gt;</a></span><span class="message">morale bootstrapping is an essential task to keep at such a long term project.</span></div><div class="line" id="023449"><span class="nick" style="color:#2e2a4a"><a href="#023449" label="[02:34:49]">&lt;OriansJ&gt;</a></span><span class="message">find joy, even if it is bootstrapping a game.</span></div><div class="line" id="023730"><span class="nick" style="color:#6b8072"><a href="#023730" label="[02:37:30]">&lt;gef&gt;</a></span><span class="message">as regards `date`, I think it might be useful if it begins with Unix epoch and increases by 1 in every invocation. Doing that, gives a chance to potentially spot interesting information (and observe where parallelism kicks in with possibly non-deterministic outcomes)</span></div><div class="line" id="023754"><span class="nick" style="color:#6b8072"><a href="#023754" label="[02:37:54]">&lt;gef&gt;</a></span><span class="message">1 I mean, 1 second or something pre-defined</span></div><div class="line" id="024133"><span class="nick" style="color:#80b1d3"><a href="#024133" label="[02:41:33]">&lt;xentrac&gt;</a></span><span class="message">perl is joyful</span></div><div class="line" id="062444"><span class="nick" style="color:#6d2462"><a href="#062444" label="[06:24:44]">&lt;gforce_d11977&gt;</a></span><span class="message">here the result of my &quot;is date command called and with with arguments&quot;: <a rel="nofollow" href="http://intercity-vpn.de/bootstrap/bootstrap.log-multilog-9-1619470288-date.txt">http://intercity-vpn.de/bootstrap/bootstrap.log-multilog-9-1619470288-date.txt</a>  and the full run <a rel="nofollow" href="http://intercity-vpn.de/bootstrap/bootstrap.log-multilog-9-1619470288.txt">http://intercity-vpn.de/bootstrap/bootstrap.log-multilog-9-1619470288.txt</a> </span></div><div class="line" id="062733"><span class="nick" style="color:#6d2462"><a href="#062733" label="[06:27:33]">&lt;gforce_d11977&gt;</a></span><span class="message">gef: I like your idea of a faked date answer, raising with 1 sec steps</span></div><div class="line" id="081821"><span class="nick" style="color:#6d2462"><a href="#081821" label="[08:18:21]">&lt;gforce_d11977&gt;</a></span><span class="message">here a better output of date usage:</span></div><div class="line" id="081824"><span class="nick" style="color:#6d2462"><a href="#081824" label="[08:18:24]">&lt;gforce_d11977&gt;</a></span><span class="message"> <a rel="nofollow" href="http://intercity-vpn.de/bootstrap/bootstrap.log-multilog-11-1619499006-date.txt">http://intercity-vpn.de/bootstrap/bootstrap.log-multilog-11-1619499006-date.txt</a> </span></div><div class="line" id="081836"><span class="nick" style="color:#6d2462"><a href="#081836" label="[08:18:36]">&lt;gforce_d11977&gt;</a></span><span class="message"> <a rel="nofollow" href="http://intercity-vpn.de/bootstrap/bootstrap.log-multilog-11-1619499006.txt">http://intercity-vpn.de/bootstrap/bootstrap.log-multilog-11-1619499006.txt</a>  (FULL)</span></div><div class="line" id="093413"><span class="nick" style="color:#234e69"><a href="#093413" label="[09:34:13]">&lt;bauen1&gt;</a></span><span class="message">in theory the entire bootstrap should make identical syscalls even, save for some race conditions, gettime and bugs</span></div><div class="line" id="111239"><span class="nick" style="color:#6d2462"><a href="#111239" label="[11:12:39]">&lt;gforce_d11977&gt;</a></span><span class="message">is it feasible to stderr out some selected syscalls via patching our libc? in theory these should be the same for all bootstraps...</span></div><div class="line" id="114948"><span class="nick" style="color:#6c3d55"><a href="#114948" label="[11:49:48]">&lt;stikonas&gt;</a></span><span class="message">gforce_d11977: yes, it is definitely possible to intercept syscalls in libc</span></div><div class="line" id="115034"><span class="nick" style="color:#6c3d55"><a href="#115034" label="[11:50:34]">&lt;stikonas&gt;</a></span><span class="message">you don't even need to patch it, you can intercept syscalls even with unpatched libc by LD_PRELOADING some other library that intercepts syscalls</span></div><div class="line" id="121410"><span class="nick" style="color:#80b1d3"><a href="#121410" label="[12:14:10]">&lt;xentrac&gt;</a></span><span class="message">also it sort of sounds like maybe what you want is strace</span></div><div class="line" id="121424"><span class="nick" style="color:#80b1d3"><a href="#121424" label="[12:14:24]">&lt;xentrac&gt;</a></span><span class="message">try strace -e open ls</span></div><div class="line" id="121426"><span class="nick" style="color:#80b1d3"><a href="#121426" label="[12:14:26]">&lt;xentrac&gt;</a></span><span class="message">for example</span></div><div class="line" id="121453"><span class="nick" style="color:#80b1d3"><a href="#121453" label="[12:14:53]">&lt;xentrac&gt;</a></span><span class="message">that uses ptrace() which is much slower than an LD_PRELOAD or a patched libc</span></div><div class="line" id="121921"><span class="nick" style="color:#6d2462"><a href="#121921" label="[12:19:21]">&lt;gforce_d11977&gt;</a></span><span class="message">xentrac: yes, but i want every program to be run with strace, so it would be cool to just 'export LD_PRELOAD=/foo/bar', and 'bar' is a syscall interceptor?</span></div><div class="line" id="122006"><span class="nick" style="color:#6d2462"><a href="#122006" label="[12:20:06]">&lt;gforce_d11977&gt;</a></span><span class="message">or i just run the initial 'kaem' with 'strace -e /sbin/init' ?</span></div><div class="line" id="122119"><span class="nick" style="color:#6d2462"><a href="#122119" label="[12:21:19]">&lt;gforce_d11977&gt;</a></span><span class="message"> <a rel="nofollow" href="https://stackoverflow.com/questions/31438697/ld-preload-can-not-intercept-syscalls-but-only-libcalls">https://stackoverflow.com/questions/31438697/ld-preload-can-not-intercept-syscalls-but-only-libcalls</a> </span></div><div class="line" id="122201"><span class="nick" style="color:#80b1d3"><a href="#122201" label="[12:22:01]">&lt;xentrac&gt;</a></span><span class="message">maybe strace -e open,read,socket -ff /sbin/init</span></div><div class="line" id="122208"><span class="nick" style="color:#80b1d3"><a href="#122208" label="[12:22:08]">&lt;xentrac&gt;</a></span><span class="message">-ff is &quot;follow forks&quot;</span></div><div class="line" id="122231"><span class="nick" style="color:#80b1d3"><a href="#122231" label="[12:22:31]">&lt;xentrac&gt;</a></span><span class="message">you can write an LD_PRELOAD library for particular system calls pretty easily</span></div><div class="line" id="122322"><span class="nick" style="color:#6d2462"><a href="#122322" label="[12:23:22]">&lt;gforce_d11977&gt;</a></span><span class="message">very good, will try this and report - thank you!</span></div><div class="line" id="122341"><span class="nick" style="color:#6d2462"><a href="#122341" label="[12:23:41]">&lt;gforce_d11977&gt;</a></span><span class="message">(the strace)</span></div><div class="line" id="123545"><span class="nick" style="color:#234e69"><a href="#123545" label="[12:35:45]">&lt;bauen1&gt;</a></span><span class="message">gforce_d11977: you could use linuxs audit system to log every syscall + some arguments</span></div><div class="line" id="123832"><span class="nick" style="color:#80b1d3"><a href="#123832" label="[12:38:32]">&lt;xentrac&gt;</a></span><span class="message">bauen1: oh?</span></div><div class="line" id="123840"><span class="nick" style="color:#80b1d3"><a href="#123840" label="[12:38:40]">&lt;xentrac&gt;</a></span><span class="message">what audit system?</span></div><div class="line" id="124050"><span class="nick" style="color:#234e69"><a href="#124050" label="[12:40:50]">&lt;bauen1&gt;</a></span><span class="message">xentrac: auditd + auditctl can be used to track some syscalls</span></div><div class="line" id="124107"><span class="nick" style="color:#234e69"><a href="#124107" label="[12:41:07]">&lt;bauen1&gt;</a></span><span class="message">probably don't need auditd, linux could just log to dmesg</span></div><div class="line" id="124147"><span class="nick" style="color:#80b1d3"><a href="#124147" label="[12:41:47]">&lt;xentrac&gt;</a></span><span class="message">interesting, I hadn't heard of that!</span></div><div class="line" id="124208"><span class="nick" style="color:#234e69"><a href="#124208" label="[12:42:08]">&lt;bauen1&gt;</a></span><span class="message">xentrac: on debian &quot;auditd&quot; provides the auditctl command</span></div><div class="line" id="135535"><span class="nick" style="color:#2e2a4a"><a href="#135535" label="[13:55:35]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: perl might be joyful but my experience with it dealt with IBM's CQ and there is no joy working even with perl around that flaming dumpster fire. Freaking 4 hour checkout times for a single file.</span></div><div class="line" id="135823"><span class="nick" style="color:#2e2a4a"><a href="#135823" label="[13:58:23]">&lt;OriansJ&gt;</a></span><span class="message">The sort of this one line change will take 6 hours so lets do a bunch of extra changes too and hopefully every line of code is 100% perfect and force us to redo it all again; throws in 2day build delays and week long test delays to the development cycle.</span></div><div class="line" id="135953"><span class="nick" style="color:#2e2a4a"><a href="#135953" label="[13:59:53]">&lt;OriansJ&gt;</a></span><span class="message">showing them git and 2 minute builds was like showing fire to a caveman.</span></div><div class="line" id="140055"><span class="nick" style="color:#2e2a4a"><a href="#140055" label="[14:00:55]">&lt;OriansJ&gt;</a></span><span class="message">took 6months just to extract the commit history form CQ and import it into git and ironically that was the easy part</span></div><div class="line" id="140229"><span class="nick" style="color:#234e69"><a href="#140229" label="[14:02:29]">&lt;bauen1&gt;</a></span><span class="message">4 hour checkout times would be a few magnitudes too much for me ...</span></div><div class="line" id="174154"><span class="nick" style="color:#6d2462"><a href="#174154" label="[17:41:54]">&lt;gforce_d11977&gt;</a></span><span class="message">bauen1: linuxs audit system? that sounds great, will dig into it</span></div><div class="line" id="180311"><span class="nick" style="color:#80b1d3"><a href="#180311" label="[18:03:11]">&lt;xentrac&gt;</a></span><span class="message">OriansJ: condolences</span></div><div class="line" id="182727"><span class="nick" style="color:#2e2a4a"><a href="#182727" label="[18:27:27]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: pain of working with large organizations which have too many contractors making too many decisions;</span></div><div class="line" id="182902"><span class="nick" style="color:#2e2a4a"><a href="#182902" label="[18:29:02]">&lt;OriansJ&gt;</a></span><span class="message">Those really are the only places where one can save $30M in 5 years on technical changes alone (and zero external impact)</span></div><div class="line" id="191000"><span class="nick" style="color:#80b1d3"><a href="#191000" label="[19:10:00]">&lt;xentrac&gt;</a></span><span class="message">hooray for reducing taxes</span></div><div class="line" id="201734"><span class="nick">***</span><span class="message notice">lukedashjr is now known as luke-jr</span></div><div class="line" id="203121"><span class="nick">***</span><span class="message notice">lukedashjr is now known as luke-jr</span></div><br /></div></body></html>