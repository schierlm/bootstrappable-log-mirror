<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-06-08.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000143"><span class="nick" style="color:#389600"><a href="#000143" label="[00:01:43]">&lt;oriansj&gt;</a></span><span class="message">I wonder if the Power engineers regret having multiple separate conditional registers</span></div><div class="line" id="000616"><span class="nick" style="color:#8dd3c7"><a href="#000616" label="[00:06:16]">&lt;muurkha&gt;</a></span><span class="message">you mean IBM POWER?</span></div><div class="line" id="000648"><span class="nick" style="color:#8dd3c7"><a href="#000648" label="[00:06:48]">&lt;muurkha&gt;</a></span><span class="message">I think that makes superscalar a lot easier</span></div><div class="line" id="002010"><span class="nick" style="color:#389600"><a href="#002010" label="[00:20:10]">&lt;oriansj&gt;</a></span><span class="message">muurkha: correct</span></div><div class="line" id="003217"><span class="nick" style="color:#389600"><a href="#003217" label="[00:32:17]">&lt;oriansj&gt;</a></span><span class="message">well it saves a couple registers as one only needs 4bits for conditional outputs instead of using up a whole 64bits of register space.</span></div><div class="line" id="003336"><span class="nick" style="color:#389600"><a href="#003336" label="[00:33:36]">&lt;oriansj&gt;</a></span><span class="message">(or 5 bits if you need separate carry/borrow bits)</span></div><div class="line" id="003737"><span class="nick" style="color:#389600"><a href="#003737" label="[00:37:37]">&lt;oriansj&gt;</a></span><span class="message">(or 8 bits if you want to plan for future floating point conditions)</span></div><div class="line" id="004529"><span class="nick" style="color:#8dd3c7"><a href="#004529" label="[00:45:29]">&lt;muurkha&gt;</a></span><span class="message">saves a couple of registers compared to which alternative?</span></div><div class="line" id="004553"><span class="nick" style="color:#8dd3c7"><a href="#004553" label="[00:45:53]">&lt;muurkha&gt;</a></span><span class="message">I meant easier than having a single flags register</span></div><div class="line" id="004622"><span class="nick" style="color:#8dd3c7"><a href="#004622" label="[00:46:22]">&lt;muurkha&gt;</a></span><span class="message">but a single flags register obviously uses less flip-flops than several of them</span></div><div class="line" id="004734"><span class="nick" style="color:#389600"><a href="#004734" label="[00:47:34]">&lt;oriansj&gt;</a></span><span class="message">but some RISC architectures use The Integer registers to store the condition (RISC-V included)</span></div><div class="line" id="004812"><span class="nick" style="color:#8dd3c7"><a href="#004812" label="[00:48:12]">&lt;muurkha&gt;</a></span><span class="message">no, RISC-V and MIPS don't so that</span></div><div class="line" id="004817"><span class="nick" style="color:#8dd3c7"><a href="#004817" label="[00:48:17]">&lt;muurkha&gt;</a></span><span class="message">*do that</span></div><div class="line" id="004836"><span class="nick" style="color:#8dd3c7"><a href="#004836" label="[00:48:36]">&lt;muurkha&gt;</a></span><span class="message">on amd64 you say</span></div><div class="line" id="004841"><span class="nick" style="color:#8dd3c7"><a href="#004841" label="[00:48:41]">&lt;muurkha&gt;</a></span><span class="message">cmp rax, rbx</span></div><div class="line" id="004846"><span class="nick" style="color:#8dd3c7"><a href="#004846" label="[00:48:46]">&lt;muurkha&gt;</a></span><span class="message">je 1f</span></div><div class="line" id="004911"><span class="nick" style="color:#8dd3c7"><a href="#004911" label="[00:49:11]">&lt;muurkha&gt;</a></span><span class="message">in between those instructions there is notionally a flags register intermediating</span></div><div class="line" id="004953"><span class="nick" style="color:#8dd3c7"><a href="#004953" label="[00:49:53]">&lt;muurkha&gt;</a></span><span class="message">on RV64 you say</span></div><div class="line" id="005021"><span class="nick" style="color:#8dd3c7"><a href="#005021" label="[00:50:21]">&lt;muurkha&gt;</a></span><span class="message">beq t1, t2, 1f</span></div><div class="line" id="005125"><span class="nick" style="color:#389600"><a href="#005125" label="[00:51:25]">&lt;oriansj&gt;</a></span><span class="message">yes but you can do conditionals by  just doing subtraction and comparing against R0</span></div><div class="line" id="005159"><span class="nick" style="color:#8dd3c7"><a href="#005159" label="[00:51:59]">&lt;muurkha&gt;</a></span><span class="message">there's just one instruction; there isn't a comparison result stored in some other register</span></div><div class="line" id="005216"><span class="nick" style="color:#8dd3c7"><a href="#005216" label="[00:52:16]">&lt;muurkha&gt;</a></span><span class="message">but you don't need to do the subtraction</span></div><div class="line" id="005230"><span class="nick" style="color:#8dd3c7"><a href="#005230" label="[00:52:30]">&lt;muurkha&gt;</a></span><span class="message">if you want to know if t1 &lt; t2</span></div><div class="line" id="005252"><span class="nick" style="color:#8dd3c7"><a href="#005252" label="[00:52:52]">&lt;muurkha&gt;</a></span><span class="message">you don't need to do the subtreaction and then compare the difference against r0</span></div><div class="line" id="005319"><span class="nick" style="color:#8dd3c7"><a href="#005319" label="[00:53:19]">&lt;muurkha&gt;</a></span><span class="message">you can just do something like blt t1, t2, 3b</span></div><div class="line" id="005404"><span class="nick" style="color:#389600"><a href="#005404" label="[00:54:04]">&lt;oriansj&gt;</a></span><span class="message">true, it is possible to avoid but there are times you will want to store a compare before doing jump</span></div><div class="line" id="005415"><span class="nick" style="color:#8dd3c7"><a href="#005415" label="[00:54:15]">&lt;muurkha&gt;</a></span><span class="message">like when?</span></div><div class="line" id="005444"><span class="nick" style="color:#8dd3c7"><a href="#005444" label="[00:54:44]">&lt;muurkha&gt;</a></span><span class="message">I don't think it's just possible to avoid, I think avoiding it is always easier</span></div><div class="line" id="005513"><span class="nick" style="color:#8dd3c7"><a href="#005513" label="[00:55:13]">&lt;muurkha&gt;</a></span><span class="message">admittedly you've probably written more RV64 code than I have</span></div><div class="line" id="005524"><span class="nick" style="color:#389600"><a href="#005524" label="[00:55:24]">&lt;oriansj&gt;</a></span><span class="message">actually when implementing M0, doing pushf and popf made things cleaner</span></div><div class="line" id="005531"><span class="nick" style="color:#8dd3c7"><a href="#005531" label="[00:55:31]">&lt;muurkha&gt;</a></span><span class="message">so likely I'm just not thinking of something obvious</span></div><div class="line" id="005631"><span class="nick" style="color:#389600"><a href="#005631" label="[00:56:31]">&lt;oriansj&gt;</a></span><span class="message">store the condition of if the first char is negative prior to reading the rest of the string into an int</span></div><div class="line" id="005658"><span class="nick" style="color:#8dd3c7"><a href="#005658" label="[00:56:58]">&lt;muurkha&gt;</a></span><span class="message">why not just retain the first char?</span></div><div class="line" id="005724"><span class="nick" style="color:#8dd3c7"><a href="#005724" label="[00:57:24]">&lt;muurkha&gt;</a></span><span class="message">then you can test it to see if it's negative later in the same way you did the first time</span></div><div class="line" id="005819"><span class="nick" style="color:#389600"><a href="#005819" label="[00:58:19]">&lt;oriansj&gt;</a></span><span class="message">that would have made it uglier but entirely valid</span></div><div class="line" id="005921"><span class="nick" style="color:#8dd3c7"><a href="#005921" label="[00:59:21]">&lt;muurkha&gt;</a></span><span class="message">probably the same number of instructions since it's 3-address code</span></div><div class="line" id="005948"><span class="nick" style="color:#8dd3c7"><a href="#005948" label="[00:59:48]">&lt;muurkha&gt;</a></span><span class="message">not overwriting a register doesn't take any extra instructions over overwriting one</span></div><div class="line" id="010035"><span class="nick" style="color:#389600"><a href="#010035" label="[01:00:35]">&lt;oriansj&gt;</a></span><span class="message">well as RISC-V doesn't have push and pop, it would consume 4 more instructions (to preserve and restore an extra register)</span></div><div class="line" id="010046"><span class="nick" style="color:#8dd3c7"><a href="#010046" label="[01:00:46]">&lt;muurkha&gt;</a></span><span class="message">(though it might require more bytes)</span></div><div class="line" id="010126"><span class="nick" style="color:#8dd3c7"><a href="#010126" label="[01:01:26]">&lt;muurkha&gt;</a></span><span class="message">oh, well, usually you use a non-call-preserved register for those things, but even preserving a call-preserved register only takes two instructions, not 4</span></div><div class="line" id="010307"><span class="nick" style="color:#8dd3c7"><a href="#010307" label="[01:03:07]">&lt;muurkha&gt;</a></span><span class="message">sd s3,24(sp) to save it and then ld s3,24(sp) to restore it</span></div><div class="line" id="010427"><span class="nick" style="color:#8dd3c7"><a href="#010427" label="[01:04:27]">&lt;muurkha&gt;</a></span><span class="message">you do have to reserve 8 bytes more space, but that doesn't require more code, it just requires changing addi sp,sp,-64 (and its inverse in the epilogue) to use an 8-bytes-</span></div><div class="line" id="010440"><span class="nick" style="color:#8dd3c7"><a href="#010440" label="[01:04:40]">&lt;muurkha&gt;</a></span><span class="message">larger immediate constant</span></div><div class="line" id="010808"><span class="nick" style="color:#8dd3c7"><a href="#010808" label="[01:08:08]">&lt;muurkha&gt;</a></span><span class="message">I came across a fun paper the other day that describes some simple hacks to OpenRISC that got significant speedups on an in-order implementation, and one of them was sort of adding an autoincrement/decrement addressing mode.  I think they are equally applicable to RISC-V</span></div><div class="line" id="010836"><span class="nick" style="color:#389600"><a href="#010836" label="[01:08:36]">&lt;oriansj&gt;</a></span><span class="message">true, one can certainly do a single add/subtract at the start and end of an assembly function to fix the stack pointer prior to storing values onto the stack and after restoring values from the stack back into registers; so for functions that are already storing a couple values onto the stack, it would only cost 2 additional instructions</span></div><div class="line" id="010836"><span class="nick" style="color:#8dd3c7"><a href="#010836" label="[01:08:36]">&lt;muurkha&gt;</a></span><span class="message"> <a rel="nofollow" href="https://ieeexplore.ieee.org/abstract/document/7314386/">https://ieeexplore.ieee.org/abstract/document/7314386/</a> </span></div><div class="line" id="010901"><span class="nick" style="color:#8dd3c7"><a href="#010901" label="[01:09:01]">&lt;muurkha&gt;</a></span><span class="message">yeah, that's the normal thing to do!</span></div><div class="line" id="011024"><span class="nick" style="color:#8dd3c7"><a href="#011024" label="[01:10:24]">&lt;muurkha&gt;</a></span><span class="message">of course it does mean that the *first* register you save does cost you 4 insns; the OR10N paper describes how to sort of fix that, though in a way that would break the standard RISC-V ABI I think</span></div><div class="line" id="011136"><span class="nick" style="color:#8dd3c7"><a href="#011136" label="[01:11:36]">&lt;muurkha&gt;</a></span><span class="message">because on RISC-V with the standard ABI your stack is supposed to always be 16-byte-aligned IIRC?  that way interrupt handlers can assume the stack is 16-byte aligned?  but maybe I'm remembering that wrong</span></div><div class="line" id="011202"><span class="nick" style="color:#8dd3c7"><a href="#011202" label="[01:12:02]">&lt;muurkha&gt;</a></span><span class="message">OR10N is the microarchitecture from the paper I linked above</span></div><div class="line" id="011222"><span class="nick" style="color:#2e2a4a"><a href="#011222" label="[01:12:22]">&lt;stikonas&gt;</a></span><span class="message">well, in mescc we use a couple of RISC-V registers to simulate condition flags</span></div><div class="line" id="011325"><span class="nick" style="color:#2e2a4a"><a href="#011325" label="[01:13:25]">&lt;stikonas&gt;</a></span><span class="message">that's probably a waste of registers in general</span></div><div class="line" id="011335"><span class="nick" style="color:#2e2a4a"><a href="#011335" label="[01:13:35]">&lt;stikonas&gt;</a></span><span class="message">but we don't really care about that in bootstrapping</span></div><div class="line" id="011458"><span class="nick" style="color:#8dd3c7"><a href="#011458" label="[01:14:58]">&lt;muurkha&gt;</a></span><span class="message">prolly</span></div><div class="line" id="012154"><span class="nick" style="color:#389600"><a href="#012154" label="[01:21:54]">&lt;oriansj&gt;</a></span><span class="message">we might not be optimally efficient but we get 90% without too much work (in C and above)</span></div><div class="line" id="012309"><span class="nick" style="color:#389600"><a href="#012309" label="[01:23:09]">&lt;oriansj&gt;</a></span><span class="message">in that paper, the openrisc loop registers seem like something that would be a problem in OoO</span></div><div class="line" id="012511"><span class="nick" style="color:#8dd3c7"><a href="#012511" label="[01:25:11]">&lt;muurkha&gt;</a></span><span class="message">not sure, maybe</span></div><div class="line" id="012631"><span class="nick" style="color:#8dd3c7"><a href="#012631" label="[01:26:31]">&lt;muurkha&gt;</a></span><span class="message">they don't affect execution except when it reaches the end address</span></div><div class="line" id="012711"><span class="nick" style="color:#8dd3c7"><a href="#012711" label="[01:27:11]">&lt;muurkha&gt;</a></span><span class="message">the problem with flags registers is that like half of all instructions you run overwrite them, but only partly</span></div><div class="line" id="012900"><span class="nick" style="color:#8dd3c7"><a href="#012900" label="[01:29:00]">&lt;muurkha&gt;</a></span><span class="message">so unless you do fancy tricks your data dependency graph of instructions is a sad little straight line, like the family tree of an inbred royal housse</span></div><div class="line" id="012954"><span class="nick" style="color:#8dd3c7"><a href="#012954" label="[01:29:54]">&lt;muurkha&gt;</a></span><span class="message">with movs and jmps hanging off the side like bastard children</span></div><div class="line" id="013013"><span class="nick" style="color:#8dd3c7"><a href="#013013" label="[01:30:13]">&lt;muurkha&gt;</a></span><span class="message">as I understand it</span></div><div class="line" id="013517"><span class="nick" style="color:#389600"><a href="#013517" label="[01:35:17]">&lt;oriansj&gt;</a></span><span class="message">hmm, odd though; a full set of loop registers could be used to speed up loop unrolling to an abusive degree but only a handful of numeric functions in bootstraping would benefit from such things</span></div><div class="line" id="013720"><span class="nick" style="color:#8dd3c7"><a href="#013720" label="[01:37:20]">&lt;muurkha&gt;</a></span><span class="message">well, also memcpy</span></div><div class="line" id="013740"><span class="nick" style="color:#8dd3c7"><a href="#013740" label="[01:37:40]">&lt;muurkha&gt;</a></span><span class="message">and bitblt if you're doing a GUI</span></div><div class="line" id="013901"><span class="nick" style="color:#389600"><a href="#013901" label="[01:39:01]">&lt;oriansj&gt;</a></span><span class="message">good point on the memcpy (also in calloc; which I heavily use)</span></div><div class="line" id="013943"><span class="nick" style="color:#8dd3c7"><a href="#013943" label="[01:39:43]">&lt;muurkha&gt;</a></span><span class="message">(why a GUI? because you don't want to depend on plausibly backdoored machines to navigate your bootstrap codebase)</span></div><div class="line" id="014021"><span class="nick" style="color:#389600"><a href="#014021" label="[01:40:21]">&lt;oriansj&gt;</a></span><span class="message">I was pondering a bootstrap cpu architecture which would be trivial as possible to implement but also make bootstrapping to C easy</span></div><div class="line" id="014041"><span class="nick" style="color:#389600"><a href="#014041" label="[01:40:41]">&lt;oriansj&gt;</a></span><span class="message">muurkha: one does not need a GUI to edit code</span></div><div class="line" id="014104"><span class="nick" style="color:#8dd3c7"><a href="#014104" label="[01:41:04]">&lt;muurkha&gt;</a></span><span class="message">no, but it helps</span></div><div class="line" id="014157"><span class="nick" style="color:#389600"><a href="#014157" label="[01:41:57]">&lt;oriansj&gt;</a></span><span class="message">for things like emacs and vim  absolutely; editors likes SET not so much</span></div><div class="line" id="014224"><span class="nick" style="color:#8dd3c7"><a href="#014224" label="[01:42:24]">&lt;muurkha&gt;</a></span><span class="message">I haven't tried using SET</span></div><div class="line" id="014247"><span class="nick" style="color:#8dd3c7"><a href="#014247" label="[01:42:47]">&lt;muurkha&gt;</a></span><span class="message">you may be interested in this comment from a few weeks ago by a friend of mine who uses ex</span></div><div class="line" id="014332"><span class="nick" style="color:#8dd3c7"><a href="#014332" label="[01:43:32]">&lt;muurkha&gt;</a></span><span class="message"> <a rel="nofollow" href="https://news.ycombinator.com/item?id=35957856">https://news.ycombinator.com/item?id=35957856</a> </span></div><div class="line" id="020543"><span class="nick" style="color:#389600"><a href="#020543" label="[02:05:43]">&lt;oriansj&gt;</a></span><span class="message">here is a simple C version of SET: <a rel="nofollow" href="https://github.com/oriansj/stage0/blob/master/stage1/High_level_prototypes/SET.c">https://github.com/oriansj/stage0/blob/master/stage1/High_level_prototypes/SET.c</a> </span></div><div class="line" id="020846"><span class="nick" style="color:#8dd3c7"><a href="#020846" label="[02:08:46]">&lt;muurkha&gt;</a></span><span class="message">yeah, you did link it before</span></div><div class="line" id="020912"><span class="nick" style="color:#8dd3c7"><a href="#020912" label="[02:09:12]">&lt;muurkha&gt;</a></span><span class="message">I just haven't tried using it so I don't know how effective a development environment it is</span></div><div class="line" id="021357"><span class="nick" style="color:#389600"><a href="#021357" label="[02:13:57]">&lt;oriansj&gt;</a></span><span class="message">muurkha: it is if you have nothing better, it can get the job done</span></div><div class="line" id="021631"><span class="nick" style="color:#389600"><a href="#021631" label="[02:16:31]">&lt;oriansj&gt;</a></span><span class="message">and can be written in a few hundred bytes of hex</span></div><div class="line" id="021835"><span class="nick" style="color:#389600"><a href="#021835" label="[02:18:35]">&lt;oriansj&gt;</a></span><span class="message">but it taught me, if you are forced to use any editor for a week. Then any editor is fine</span></div><div class="line" id="021949"><span class="nick" style="color:#389600"><a href="#021949" label="[02:19:49]">&lt;oriansj&gt;</a></span><span class="message">and if you only have a hex monitor or hex assembler, you can write SET in about half a day and everything after that is so much faster.</span></div><div class="line" id="022055"><span class="nick" style="color:#389600"><a href="#022055" label="[02:20:55]">&lt;oriansj&gt;</a></span><span class="message">part of me we tempted to get an ed for mescc-tools-extras</span></div><div class="line" id="022119"><span class="nick" style="color:#389600"><a href="#022119" label="[02:21:19]">&lt;oriansj&gt;</a></span><span class="message">^we^was^</span></div><div class="line" id="023251"><span class="nick" style="color:#8dd3c7"><a href="#023251" label="[02:32:51]">&lt;muurkha&gt;</a></span><span class="message">I think that if you have a monitor you can do a lot better than ed, probably in less code</span></div><div class="line" id="023307"><span class="nick" style="color:#8dd3c7"><a href="#023307" label="[02:33:07]">&lt;muurkha&gt;</a></span><span class="message">ed is carefully optimized for a 110-baud teletype</span></div><div class="line" id="023654"><span class="nick" style="color:#389600"><a href="#023654" label="[02:36:54]">&lt;oriansj&gt;</a></span><span class="message">muurkha: well ed is actually quite nice relative to a minimal hex monitor (no readline support after all)</span></div><div class="line" id="032025"><span class="nick" style="color:#8dd3c7"><a href="#032025" label="[03:20:25]">&lt;muurkha&gt;</a></span><span class="message">sorry, I meant a video display monitor, not a monitor in the sense of a small program that lets you look at memory and invoke code</span></div><div class="line" id="161133"><span class="nick" style="color:#6b8072"><a href="#161133" label="[16:11:33]">&lt;pabs3&gt;</a></span><span class="message"> <a rel="nofollow" href="https://mastodon.social/@miraheze/110506683712194935">https://mastodon.social/@miraheze/110506683712194935</a>  - miraheze.org at risk of shutting down</span></div><div class="line" id="161147"><span class="nick" style="color:#6b8072"><a href="#161147" label="[16:11:47]">&lt;pabs3&gt;</a></span><span class="message">might be work thinking about what to do with bootstrapping.miraheze.org</span></div><div class="line" id="162414"><span class="nick" style="color:#80b1d3"><a href="#162414" label="[16:24:14]">&lt;stikonas[m]&gt;</a></span><span class="message">We haven't really used that wiki very productively anyway...</span></div><div class="line" id="163314"><span class="nick" style="color:#6b8072"><a href="#163314" label="[16:33:14]">&lt;pabs3&gt;</a></span><span class="message">hmm, api.php isn't enabled on it, so git-remote-mediawiki doesn't work</span></div><div class="line" id="165832"><span class="nick" style="color:#6d2462"><a href="#165832" label="[16:58:32]">&lt;rickmasters&gt;</a></span><span class="message">I've been using <a rel="nofollow" href="https://bootstrapping.miraheze.org/wiki/Stage0">https://bootstrapping.miraheze.org/wiki/Stage0</a>  for hex* documentation. Is this info anywhere else?</span></div><div class="line" id="170627"><span class="nick" style="color:#6b8072"><a href="#170627" label="[17:06:27]">&lt;pabs3&gt;</a></span><span class="message">I think oriansj did copy the wiki elsewhere...</span></div><div class="line" id="170713"><span class="nick" style="color:#6b8072"><a href="#170713" label="[17:07:13]">&lt;pabs3&gt;</a></span><span class="message"> <a rel="nofollow" href="https://wiki.bootstrapping.world/">https://wiki.bootstrapping.world/</a>  <a rel="nofollow" href="https://github.com/oriansj/bootstrapping-wiki">https://github.com/oriansj/bootstrapping-wiki</a> </span></div><div class="line" id="201343"><span class="nick" style="color:#234e69"><a href="#201343" label="[20:13:43]">&lt;river&gt;</a></span><span class="message">oh no what a shame</span></div><div class="line" id="222155"><span class="nick" style="color:#6c3d55"><a href="#222155" label="[22:21:55]">&lt;rkeene&gt;</a></span><span class="message">Fossil has a wiki and a bunch of other stuff integrated, which syncs along the code</span></div><div class="line" id="225419"><span class="nick" style="color:#d9d9d9"><a href="#225419" label="[22:54:19]">&lt;Harzilein&gt;</a></span><span class="message">rkeene: alas it shares with cvstrac the opinionated bit that the wiki isn't versioned i think?</span></div><div class="line" id="225553"><span class="nick" style="color:#d9d9d9"><a href="#225553" label="[22:55:53]">&lt;Harzilein&gt;</a></span><span class="message">&lt;pabs3&gt; hmm, api.php isn't enabled on it, so git-remote-mediawiki doesn't work</span></div><div class="line" id="225612"><span class="nick" style="color:#d9d9d9"><a href="#225612" label="[22:56:12]">&lt;Harzilein&gt;</a></span><span class="message">pabs3: not activated, or sitting at a weird location? i think there's a special page that points to it</span></div><div class="line" id="225619"><span class="nick" style="color:#d9d9d9"><a href="#225619" label="[22:56:19]">&lt;Harzilein&gt;</a></span><span class="message">let me look myself</span></div><div class="line" id="225809"><span class="nick" style="color:#d9d9d9"><a href="#225809" label="[22:58:09]">&lt;Harzilein&gt;</a></span><span class="message"> <a rel="nofollow" href="https://bootstrapping.miraheze.org/w/api.php">https://bootstrapping.miraheze.org/w/api.php</a>  (pointed at by the EditURI link relation)</span></div><div class="line" id="230753"><span class="nick" style="color:#d9d9d9"><a href="#230753" label="[23:07:53]">&lt;Harzilein&gt;</a></span><span class="message"> <a rel="nofollow" href="https://bootstrapping.miraheze.org/wiki/Special:Version#Entry_point_URLs">https://bootstrapping.miraheze.org/wiki/Special:Version#Entry_point_URLs</a> </span></div><div class="line" id="231422"><span class="nick" style="color:#6c3d55"><a href="#231422" label="[23:14:22]">&lt;rkeene&gt;</a></span><span class="message">Harzilein, The wiki is versioned</span></div><div class="line" id="231459"><span class="nick" style="color:#6c3d55"><a href="#231459" label="[23:14:59]">&lt;rkeene&gt;</a></span><span class="message">Example: <a rel="nofollow" href="https://chiselapp.com/user/rkeene/repository/kitcreator/whistory?name=KitCreator">https://chiselapp.com/user/rkeene/repository/kitcreator/whistory?name=KitCreator</a> </span></div><div class="line" id="231538"><span class="nick" style="color:#6c3d55"><a href="#231538" label="[23:15:38]">&lt;rkeene&gt;</a></span><span class="message">Wiki (and Wiki history) is also synced</span></div><div class="line" id="232614"><span class="nick" style="color:#d9d9d9"><a href="#232614" label="[23:26:14]">&lt;Harzilein&gt;</a></span><span class="message">rkeene: interesting, even cvstrac no longer appears opinionated on that.</span></div><br /></div></body></html>