<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-04-28.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="002006"><span class="nick" style="color:#389600"><a href="#002006" label="[00:20:06]">&lt;oriansj&gt;</a></span><span class="message">gforce_de1977: so no prebuilt ppc32 linux distro isos available?</span></div><div class="line" id="002304"><span class="nick" style="color:#389600"><a href="#002304" label="[00:23:04]">&lt;oriansj&gt;</a></span><span class="message">fitzsim: yeah, the more information provided on how to get to a functional ppc64be qemu setup would be very helpful in getting a ppc64be port</span></div><div class="line" id="002318"><span class="nick" style="color:#389600"><a href="#002318" label="[00:23:18]">&lt;oriansj&gt;</a></span><span class="message">(of stage0-posix)</span></div><div class="line" id="011315"><span class="nick" style="color:#8dd3c7"><a href="#011315" label="[01:13:15]">&lt;stikonas&gt;</a></span><span class="message">oriansj: can't you just use qemu user emulation?</span></div><div class="line" id="011332"><span class="nick" style="color:#8dd3c7"><a href="#011332" label="[01:13:32]">&lt;stikonas&gt;</a></span><span class="message">I can see it has support for both ppc64 and ppc64le</span></div><div class="line" id="011513"><span class="nick" style="color:#8dd3c7"><a href="#011513" label="[01:15:13]">&lt;stikonas&gt;</a></span><span class="message">well, there might be an ocassional small bug with user emulation (e.g. registers not zeroed...)</span></div><div class="line" id="011522"><span class="nick" style="color:#8dd3c7"><a href="#011522" label="[01:15:22]">&lt;stikonas&gt;</a></span><span class="message">but arguably we should initialize everything we use</span></div><div class="line" id="015535"><span class="nick" style="color:#2e2a4a"><a href="#015535" label="[01:55:35]">&lt;Gooberpatrol66&gt;</a></span><span class="message">congrats on the guix release</span></div><div class="line" id="015826"><span class="nick" style="color:#389600"><a href="#015826" label="[01:58:26]">&lt;oriansj&gt;</a></span><span class="message">stikonas: in theory yes but I am not going to do that. There are a good few reasons why if I can't build a qemu Linux system for an architecture not to bother doing the work needing to port an architecture.</span></div><div class="line" id="020054"><span class="nick" style="color:#389600"><a href="#020054" label="[02:00:54]">&lt;oriansj&gt;</a></span><span class="message">I might make an exception for netbsd if that was better supported in M2libc but I will not support non-free operating systems.</span></div><div class="line" id="134933"><span class="nick" style="color:#6b8072"><a href="#134933" label="[13:49:33]">&lt;fossy&gt;</a></span><span class="message">ppc32 is a bit of an odd architecture...</span></div><div class="line" id="134938"><span class="nick" style="color:#6b8072"><a href="#134938" label="[13:49:38]">&lt;fossy&gt;</a></span><span class="message">almost noone supports that</span></div><div class="line" id="135012"><span class="nick" style="color:#6b8072"><a href="#135012" label="[13:50:12]">&lt;fossy&gt;</a></span><span class="message">ppc64le is the most common by far, ppc32 is really only power macs</span></div><div class="line" id="135454"><span class="nick" style="color:#80b1d3"><a href="#135454" label="[13:54:54]">&lt;AwesomeAdam54321&gt;</a></span><span class="message">fossy: indeed, it seems not many people don't care about supporting it</span></div><div class="line" id="135511"><span class="nick" style="color:#80b1d3"><a href="#135511" label="[13:55:11]">&lt;AwesomeAdam54321&gt;</a></span><span class="message">s/don't//</span></div><div class="line" id="141617"><span class="nick" style="color:#6b8072"><a href="#141617" label="[14:16:17]">&lt;fossy&gt;</a></span><span class="message">i don't blame them, there's no hardware for it!</span></div><div class="line" id="141634"><span class="nick" style="color:#6b8072"><a href="#141634" label="[14:16:34]">&lt;fossy&gt;</a></span><span class="message">(no hardware made in the last 15 years, at least :P)</span></div><div class="line" id="141736"><span class="nick" style="color:#6b8072"><a href="#141736" label="[14:17:36]">&lt;fossy&gt;</a></span><span class="message">figured out the problem with gh actions - nongnu does not like depth=1 cloning when you are not cloning HEAD</span></div><div class="line" id="163744"><span class="nick" style="color:#6d2462"><a href="#163744" label="[16:37:44]">&lt;gforce_de1977&gt;</a></span><span class="message">@oriansj: I was thinking you want to selfbuilt ppc32? i search for debian ppc32 - at least you can get some old iso's: <a rel="nofollow" href="https://wiki.debian.org/PowerPC/ppc32">https://wiki.debian.org/PowerPC/ppc32</a> </span></div><div class="line" id="163844"><span class="nick" style="color:#6d2462"><a href="#163844" label="[16:38:44]">&lt;gforce_de1977&gt;</a></span><span class="message">fossy: high end wifi routers are ppc32 8-)</span></div><div class="line" id="164000"><span class="nick" style="color:#6d2462"><a href="#164000" label="[16:40:00]">&lt;gforce_de1977&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.debian.org/releases/jessie/debian-installer/index.de.html">https://www.debian.org/releases/jessie/debian-installer/index.de.html</a> </span></div><div class="line" id="164859"><span class="nick" style="color:#234e69"><a href="#164859" label="[16:48:59]">&lt;FlaminWalrus&gt;</a></span><span class="message">Hey y'all, I saw the Guix blog post about the project, and I had a few questions about the &quot;trusting trust&quot; side of the story. My ultimate, extreme-distant-future hope for its resolution is a complete reduction of all software trust to (meta)physical and epistemological axioms. The final solution I envision is roughly a printed list of natural-language instructions that a determined someone could follow, and, after a decent amount</span></div><div class="line" id="164859"><span class="nick" style="color:#234e69"><a href="#164859" label="[16:48:59]">&lt;FlaminWalrus&gt;</a></span><span class="message">sweat, obtain a trustworthy modern software stack to be used for other verification purposes (say, checking Lean mathlib, verifying correctness of the seL4 kernel, or mining BTC). How hard of trust dependencies are a POSIX kernel and Guile/kaem trust dependencies? Also, are there plans or hopes to use formal methods to provide natural-language specifications and correctness proofs of the various stages? Are the near-term steps mor</span></div><div class="line" id="164859"><span class="nick" style="color:#234e69"><a href="#164859" label="[16:48:59]">&lt;FlaminWalrus&gt;</a></span><span class="message">focused around architecture ports or kernel/shell binary reduction?</span></div><div class="line" id="164902"><span class="nick" style="color:#234e69"><a href="#164902" label="[16:49:02]">&lt;FlaminWalrus&gt;</a></span><span class="message"> </span></div><div class="line" id="165347"><span class="nick" style="color:#8dd3c7"><a href="#165347" label="[16:53:47]">&lt;stikonas&gt;</a></span><span class="message">kaem-optional-seed is tiny enough that you can inspect it manually</span></div><div class="line" id="165434"><span class="nick" style="color:#8dd3c7"><a href="#165434" label="[16:54:34]">&lt;stikonas&gt;</a></span><span class="message">builder-hex0 is now about 4 KiB of hex0 code but perhaps we'll have a smaller hex0 seed and what is currently builder-hex0 will be built from hex2 code, so in terms of software you could check everything</span></div><div class="line" id="165730"><span class="nick" style="color:#8dd3c7"><a href="#165730" label="[16:57:30]">&lt;stikonas&gt;</a></span><span class="message">not sure about natural language specifications, we don't really have that</span></div><div class="line" id="165833"><span class="nick" style="color:#8dd3c7"><a href="#165833" label="[16:58:33]">&lt;stikonas&gt;</a></span><span class="message">as for more architecture ports, we have quite a few architectures in stage0-posix (more could be added) but so far very few are supported in stage0-posix to mes step and even fewer in mes/meccc to tcc-0.9.26</span></div><div class="line" id="165841"><span class="nick" style="color:#6c3d55"><a href="#165841" label="[16:58:41]">&lt;janneke&gt;</a></span><span class="message">if you run: &quot;guix install --no-substitutes hello&quot;, then the whole bootstrap will be run for you</span></div><div class="line" id="165853"><span class="nick" style="color:#6c3d55"><a href="#165853" label="[16:58:53]">&lt;janneke&gt;</a></span><span class="message">not sure how much more natural language instructions you'd want?</span></div><div class="line" id="165911"><span class="nick" style="color:#8dd3c7"><a href="#165911" label="[16:59:11]">&lt;stikonas&gt;</a></span><span class="message">kaem scripts are also simple enough</span></div><div class="line" id="165921"><span class="nick" style="color:#8dd3c7"><a href="#165921" label="[16:59:21]">&lt;stikonas&gt;</a></span><span class="message">it's mostly run this command, then that command, etc ...</span></div><div class="line" id="165925"><span class="nick" style="color:#234e69"><a href="#165925" label="[16:59:25]">&lt;FlaminWalrus&gt;</a></span><span class="message">janneke: Well, there's a trust dependency on the entire system in which you run that command</span></div><div class="line" id="165934"><span class="nick" style="color:#8dd3c7"><a href="#165934" label="[16:59:34]">&lt;stikonas&gt;</a></span><span class="message">FlaminWalrus: that's only for guix</span></div><div class="line" id="165943"><span class="nick" style="color:#8dd3c7"><a href="#165943" label="[16:59:43]">&lt;stikonas&gt;</a></span><span class="message">you can run bootstrap outside guix</span></div><div class="line" id="170002"><span class="nick" style="color:#8dd3c7"><a href="#170002" label="[17:00:02]">&lt;stikonas&gt;</a></span><span class="message">the whole thing can be driven by kaem-optional-seed</span></div><div class="line" id="170030"><span class="nick" style="color:#8dd3c7"><a href="#170030" label="[17:00:30]">&lt;stikonas&gt;</a></span><span class="message">and almost everything (small part is missing) can be driven if you start with builder-hex0 kernel</span></div><div class="line" id="170139"><span class="nick" style="color:#234e69"><a href="#170139" label="[17:01:39]">&lt;FlaminWalrus&gt;</a></span><span class="message">stikonas: does the kaem-optional-seed bootstrap depend on a kernel? Do you know where I can find binary sizes for these?</span></div><div class="line" id="170208"><span class="nick" style="color:#8dd3c7"><a href="#170208" label="[17:02:08]">&lt;stikonas&gt;</a></span><span class="message">FlaminWalrus: yes, and no... there is more than one kaem-optional-seed</span></div><div class="line" id="170309"><span class="nick" style="color:#d9d9d9"><a href="#170309" label="[17:03:09]">&lt;roconnor&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/906b6b8f19c1cb0546e17d4446aedb16472f070c/sysa/heirloom-devtools-070527/heirloom-devtools-070527.kaem#L32">https://github.com/fosslinux/live-bootstrap/blob/906b6b8f19c1cb0546e17d4446aedb16472f070c/sysa/heirloom-devtools-070527/heirloom-devtools-070527.kaem#L32</a>   Seems -lgetopt is not needed as yacc and lex provide their own implementations.</span></div><div class="line" id="170315"><span class="nick" style="color:#6c3d55"><a href="#170315" label="[17:03:15]">&lt;janneke&gt;</a></span><span class="message">fwiw, i'm working on a system with builtin formal verification, but i fail to see how something like that would apply here -- maybe if someone would want to write a kernel</span></div><div class="line" id="170337"><span class="nick" style="color:#8dd3c7"><a href="#170337" label="[17:03:37]">&lt;stikonas&gt;</a></span><span class="message">FlaminWalrus: so if you dont want to run on guix, there is live-bootstrap project that can run on either Linux inside chroot/namespaces. Or it can run on QEMU baremetal with some kernel, you can use Linux or you can start with builder-hex0 (4 KiB)</span></div><div class="line" id="170355"><span class="nick" style="color:#8dd3c7"><a href="#170355" label="[17:03:55]">&lt;stikonas&gt;</a></span><span class="message">if you start with builder-hex0 kernel, then the whole process runs up to the point where Linux kernel is built</span></div><div class="line" id="170406"><span class="nick" style="color:#8dd3c7"><a href="#170406" label="[17:04:06]">&lt;stikonas&gt;</a></span><span class="message">but we have not implemented kexec'ing into Linux kernel yet</span></div><div class="line" id="170438"><span class="nick" style="color:#8dd3c7"><a href="#170438" label="[17:04:38]">&lt;stikonas&gt;</a></span><span class="message">FlaminWalrus: there is also stage0-uefi where no kernel is used, but that stops after you reach the end of stage0 as we haven't ported mes to UEFI</span></div><div class="line" id="170448"><span class="nick" style="color:#8dd3c7"><a href="#170448" label="[17:04:48]">&lt;stikonas&gt;</a></span><span class="message">but you could use stage0-uefi to build some POSIX binaries</span></div><div class="line" id="170547"><span class="nick" style="color:#8dd3c7"><a href="#170547" label="[17:05:47]">&lt;stikonas&gt;</a></span><span class="message">so POSIX version of kaem-optional-seed is 640 bytes on x86 <a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds/tree/master/POSIX/x86">https://github.com/oriansj/bootstrap-seeds/tree/master/POSIX/x86</a> </span></div><div class="line" id="170611"><span class="nick" style="color:#8dd3c7"><a href="#170611" label="[17:06:11]">&lt;stikonas&gt;</a></span><span class="message">hex0 is 256 bytes, but both depend on kernel</span></div><div class="line" id="170631"><span class="nick" style="color:#8dd3c7"><a href="#170631" label="[17:06:31]">&lt;stikonas&gt;</a></span><span class="message">FlaminWalrus: then we have UEFI seeds here <a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds/tree/master/UEFI/amd64">https://github.com/oriansj/bootstrap-seeds/tree/master/UEFI/amd64</a> </span></div><div class="line" id="170653"><span class="nick" style="color:#8dd3c7"><a href="#170653" label="[17:06:53]">&lt;stikonas&gt;</a></span><span class="message">hex0 is 832 bytes and kaem is 1.34 KiB</span></div><div class="line" id="170752"><span class="nick" style="color:#234e69"><a href="#170752" label="[17:07:52]">&lt;FlaminWalrus&gt;</a></span><span class="message">jannecke: it would apply because specifications is the name we give sufficiently good documentation---a full-source bootstrap is only as good as your guarantees that the code is correct, so for, say, removing dependence of seL4's formal correctness proofs on whatever's used to compile the Isabelle trusted kernel, you need correctness proofs of everything you bootstrap up until that point</span></div><div class="line" id="170812"><span class="nick" style="color:#8dd3c7"><a href="#170812" label="[17:08:12]">&lt;stikonas&gt;</a></span><span class="message">FlaminWalrus: though the size is not everything. UEFI seeds have much bigger PE32 headers compared to ELF headers on Linux, but PE32 header has lots of zeroes in it</span></div><div class="line" id="170846"><span class="nick" style="color:#8dd3c7"><a href="#170846" label="[17:08:46]">&lt;stikonas&gt;</a></span><span class="message">FlaminWalrus: but correctness proof in what ?</span></div><div class="line" id="170859"><span class="nick" style="color:#8dd3c7"><a href="#170859" label="[17:08:59]">&lt;stikonas&gt;</a></span><span class="message">no system can prove its own correctness</span></div><div class="line" id="170918"><span class="nick" style="color:#234e69"><a href="#170918" label="[17:09:18]">&lt;FlaminWalrus&gt;</a></span><span class="message">ZFC is the standard metalogic</span></div><div class="line" id="170937"><span class="nick" style="color:#8dd3c7"><a href="#170937" label="[17:09:37]">&lt;stikonas&gt;</a></span><span class="message">well, you would have to do it manually</span></div><div class="line" id="170940"><span class="nick" style="color:#8dd3c7"><a href="#170940" label="[17:09:40]">&lt;stikonas&gt;</a></span><span class="message">without any software</span></div><div class="line" id="170948"><span class="nick" style="color:#234e69"><a href="#170948" label="[17:09:48]">&lt;FlaminWalrus&gt;</a></span><span class="message">As with most metalogic, you would use natural-language mathematical reasoning</span></div><div class="line" id="171005"><span class="nick" style="color:#234e69"><a href="#171005" label="[17:10:05]">&lt;FlaminWalrus&gt;</a></span><span class="message">(because one can infinitely compose the prefix meta-)</span></div><div class="line" id="171101"><span class="nick" style="color:#234e69"><a href="#171101" label="[17:11:01]">&lt;FlaminWalrus&gt;</a></span><span class="message">Such proofs would be the highest standard of an audit record it would be useful to achieve, I think</span></div><div class="line" id="171123"><span class="nick" style="color:#8dd3c7"><a href="#171123" label="[17:11:23]">&lt;stikonas&gt;</a></span><span class="message">well, you will have to start with the correctness of hex0</span></div><div class="line" id="171209"><span class="nick" style="color:#234e69"><a href="#171209" label="[17:12:09]">&lt;FlaminWalrus&gt;</a></span><span class="message">Silicon vendors publish (at least semi-) formal specifications of the ISA</span></div><div class="line" id="171311"><span class="nick" style="color:#234e69"><a href="#171311" label="[17:13:11]">&lt;FlaminWalrus&gt;</a></span><span class="message">The seL4 kernel, for instance, proves correctness of the entire binary against a well-defined-C-subset source via SAT-solving</span></div><div class="line" id="171342"><span class="nick" style="color:#8dd3c7"><a href="#171342" label="[17:13:42]">&lt;stikonas&gt;</a></span><span class="message">yes, but you can't use seL4 kernel for this</span></div><div class="line" id="171348"><span class="nick" style="color:#234e69"><a href="#171348" label="[17:13:48]">&lt;FlaminWalrus&gt;</a></span><span class="message">If you have smaller binaries, the specifications and witness truth-assignments are smaller</span></div><div class="line" id="171349"><span class="nick" style="color:#8dd3c7"><a href="#171349" label="[17:13:49]">&lt;stikonas&gt;</a></span><span class="message">seL4 kernel is sofware</span></div><div class="line" id="171355"><span class="nick" style="color:#234e69"><a href="#171355" label="[17:13:55]">&lt;FlaminWalrus&gt;</a></span><span class="message">(I was using it as an example of the proof engineering)</span></div><div class="line" id="171407"><span class="nick" style="color:#8dd3c7"><a href="#171407" label="[17:14:07]">&lt;stikonas&gt;</a></span><span class="message">you have to do actual mathematical proof with pen and paper</span></div><div class="line" id="171413"><span class="nick" style="color:#234e69"><a href="#171413" label="[17:14:13]">&lt;FlaminWalrus&gt;</a></span><span class="message">Of course.</span></div><div class="line" id="171512"><span class="nick" style="color:#8dd3c7"><a href="#171512" label="[17:15:12]">&lt;stikonas&gt;</a></span><span class="message">and then that still depends on silicon being correct</span></div><div class="line" id="171527"><span class="nick" style="color:#8dd3c7"><a href="#171527" label="[17:15:27]">&lt;stikonas&gt;</a></span><span class="message">but that's hardware trusting trust problem...</span></div><div class="line" id="171530"><span class="nick" style="color:#234e69"><a href="#171530" label="[17:15:30]">&lt;FlaminWalrus&gt;</a></span><span class="message">(this is the /extremely/ big rub)</span></div><div class="line" id="171809"><span class="nick" style="color:#234e69"><a href="#171809" label="[17:18:09]">&lt;FlaminWalrus&gt;</a></span><span class="message">I can mentally sketch a process for removing dependence on flashing software/hardware, and think that's probably atainable (maybe using some ancient disk tech and a switch-coded vacuum tube monstrosity)</span></div><div class="line" id="171857"><span class="nick" style="color:#234e69"><a href="#171857" label="[17:18:57]">&lt;FlaminWalrus&gt;</a></span><span class="message">But I have no idea how to begin tackling verifying particular silicon's correctness against the ISA spec, even probabilistically, much less all the supporting hardware</span></div><div class="line" id="171913"><span class="nick" style="color:#234e69"><a href="#171913" label="[17:19:13]">&lt;FlaminWalrus&gt;</a></span><span class="message">Baby steps, though; if we can get software that's a huge accomplishment</span></div><div class="line" id="171923"><span class="nick" style="color:#234e69"><a href="#171923" label="[17:19:23]">&lt;FlaminWalrus&gt;</a></span><span class="message">Which is why I'm delighted with this project</span></div><div class="line" id="172156"><span class="nick" style="color:#234e69"><a href="#172156" label="[17:21:56]">&lt;FlaminWalrus&gt;</a></span><span class="message">In summary of the current-status talk, though: the shell part is reasonably auditable with keam, and there are lots of different ways to attack the kernel problem</span></div><div class="line" id="172214"><span class="nick" style="color:#8dd3c7"><a href="#172214" label="[17:22:14]">&lt;stikonas&gt;</a></span><span class="message">yeah, we don't use many syscalls early in the bootstrap</span></div><div class="line" id="172236"><span class="nick" style="color:#234e69"><a href="#172236" label="[17:22:36]">&lt;FlaminWalrus&gt;</a></span><span class="message">What's the builder-hex0 kernel look like?</span></div><div class="line" id="172238"><span class="nick" style="color:#8dd3c7"><a href="#172238" label="[17:22:38]">&lt;stikonas&gt;</a></span><span class="message">(which is one of the reasons why we can have some small POSIX kernels that can run stage0-posix)</span></div><div class="line" id="172300"><span class="nick" style="color:#234e69"><a href="#172300" label="[17:23:00]">&lt;FlaminWalrus&gt;</a></span><span class="message">(in terms of binary auditability)</span></div><div class="line" id="172301"><span class="nick" style="color:#8dd3c7"><a href="#172301" label="[17:23:01]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/ironmeld/builder-hex0">https://github.com/ironmeld/builder-hex0</a> </span></div><div class="line" id="172318"><span class="nick" style="color:#8dd3c7"><a href="#172318" label="[17:23:18]">&lt;stikonas&gt;</a></span><span class="message">it's a bit bigger, probably at the limits of what you can expect to audit</span></div><div class="line" id="172339"><span class="nick" style="color:#8dd3c7"><a href="#172339" label="[17:23:39]">&lt;stikonas&gt;</a></span><span class="message">but like I said later we can try to switch to something smaller</span></div><div class="line" id="172351"><span class="nick" style="color:#8dd3c7"><a href="#172351" label="[17:23:51]">&lt;stikonas&gt;</a></span><span class="message">and build builder-hex0 from hex2...</span></div><div class="line" id="172401"><span class="nick" style="color:#8dd3c7"><a href="#172401" label="[17:24:01]">&lt;stikonas&gt;</a></span><span class="message">so in terms of machine code</span></div><div class="line" id="172427"><span class="nick" style="color:#8dd3c7"><a href="#172427" label="[17:24:27]">&lt;stikonas&gt;</a></span><span class="message">hex0 is quite hard to work with, because any edit might cause all the relative jumps in the code to change</span></div><div class="line" id="172455"><span class="nick" style="color:#8dd3c7"><a href="#172455" label="[17:24:55]">&lt;stikonas&gt;</a></span><span class="message">and starting form hex1 and hex2 things are much easier</span></div><div class="line" id="172541"><span class="nick" style="color:#8dd3c7"><a href="#172541" label="[17:25:41]">&lt;stikonas&gt;</a></span><span class="message">FlaminWalrus: also see some examples of hex0, hex1, hex2 and M0 code in this README <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst">https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst</a> </span></div><div class="line" id="172821"><span class="nick" style="color:#234e69"><a href="#172821" label="[17:28:21]">&lt;FlaminWalrus&gt;</a></span><span class="message">So, I'm gathering the current process is completely kernel-independent before hex2? Is it also shell-independent?</span></div><div class="line" id="172838"><span class="nick" style="color:#8dd3c7"><a href="#172838" label="[17:28:38]">&lt;stikonas&gt;</a></span><span class="message">FlaminWalrus: not exactly</span></div><div class="line" id="172850"><span class="nick" style="color:#8dd3c7"><a href="#172850" label="[17:28:50]">&lt;stikonas&gt;</a></span><span class="message">we need kernel, but we might be able to produce a smaller one</span></div><div class="line" id="172903"><span class="nick" style="color:#8dd3c7"><a href="#172903" label="[17:29:03]">&lt;stikonas&gt;</a></span><span class="message">there is already builder-hex0-mini but it would need some changes</span></div><div class="line" id="172920"><span class="nick" style="color:#234e69"><a href="#172920" label="[17:29:20]">&lt;FlaminWalrus&gt;</a></span><span class="message">Ok, I see</span></div><div class="line" id="172922"><span class="nick" style="color:#8dd3c7"><a href="#172922" label="[17:29:22]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/ironmeld/builder-hex0/blob/main/builder-hex0-mini.hex0">https://github.com/ironmeld/builder-hex0/blob/main/builder-hex0-mini.hex0</a> </span></div><div class="line" id="172932"><span class="nick" style="color:#8dd3c7"><a href="#172932" label="[17:29:32]">&lt;stikonas&gt;</a></span><span class="message">at the moment builder-hex0 supports all the way to running tcc</span></div><div class="line" id="172952"><span class="nick" style="color:#8dd3c7"><a href="#172952" label="[17:29:52]">&lt;stikonas&gt;</a></span><span class="message">and this is quite a bit more than what we need to run hex2</span></div><div class="line" id="172957"><span class="nick" style="color:#8dd3c7"><a href="#172957" label="[17:29:57]">&lt;stikonas&gt;</a></span><span class="message">anyway, that's some future options</span></div><div class="line" id="173007"><span class="nick" style="color:#8dd3c7"><a href="#173007" label="[17:30:07]">&lt;stikonas&gt;</a></span><span class="message">FlaminWalrus: but UEFI binaries are kernel independent</span></div><div class="line" id="173037"><span class="nick" style="color:#8dd3c7"><a href="#173037" label="[17:30:37]">&lt;stikonas&gt;</a></span><span class="message">we can build e.g. M2-Planet.efi that runs without any kernel and can self-host</span></div><div class="line" id="173056"><span class="nick" style="color:#234e69"><a href="#173056" label="[17:30:56]">&lt;FlaminWalrus&gt;</a></span><span class="message">Are the UEFI binaries as compact?</span></div><div class="line" id="173107"><span class="nick" style="color:#8dd3c7"><a href="#173107" label="[17:31:07]">&lt;stikonas&gt;</a></span><span class="message">a bit bigger</span></div><div class="line" id="173119"><span class="nick" style="color:#8dd3c7"><a href="#173119" label="[17:31:19]">&lt;stikonas&gt;</a></span><span class="message">a bit bigger codewise</span></div><div class="line" id="173141"><span class="nick" style="color:#8dd3c7"><a href="#173141" label="[17:31:41]">&lt;stikonas&gt;</a></span><span class="message">but also header is much bigger (nut not much more complicated, it largely consists of zeroes)</span></div><div class="line" id="173208"><span class="nick" style="color:#8dd3c7"><a href="#173208" label="[17:32:08]">&lt;stikonas&gt;</a></span><span class="message">e.g. see hex0 for uefi <a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds/blob/master/UEFI/amd64/hex0.hex0">https://github.com/oriansj/bootstrap-seeds/blob/master/UEFI/amd64/hex0.hex0</a> </span></div><div class="line" id="173214"><span class="nick" style="color:#234e69"><a href="#173214" label="[17:32:14]">&lt;FlaminWalrus&gt;</a></span><span class="message">(Sorry for the questions that may seem somewhat repetitive---still trying to learn the ecosystem)</span></div><div class="line" id="173220"><span class="nick" style="color:#8dd3c7"><a href="#173220" label="[17:32:20]">&lt;stikonas&gt;</a></span><span class="message">that's fine</span></div><div class="line" id="173225"><span class="nick" style="color:#234e69"><a href="#173225" label="[17:32:25]">&lt;FlaminWalrus&gt;</a></span><span class="message">Ok, so the UEFI process is analogous</span></div><div class="line" id="173226"><span class="nick" style="color:#8dd3c7"><a href="#173226" label="[17:32:26]">&lt;stikonas&gt;</a></span><span class="message">later UEFI binaries are also a bit bigger</span></div><div class="line" id="173231"><span class="nick" style="color:#8dd3c7"><a href="#173231" label="[17:32:31]">&lt;stikonas&gt;</a></span><span class="message">yeah, it is analogous</span></div><div class="line" id="173239"><span class="nick" style="color:#80b1d3"><a href="#173239" label="[17:32:39]">&lt;AwesomeAdam54321&gt;</a></span><span class="message">Isn't UEFI a bigger TCB?</span></div><div class="line" id="173252"><span class="nick" style="color:#8dd3c7"><a href="#173252" label="[17:32:52]">&lt;stikonas&gt;</a></span><span class="message">AwesomeAdam54321: than waht?</span></div><div class="line" id="173301"><span class="nick" style="color:#80b1d3"><a href="#173301" label="[17:33:01]">&lt;AwesomeAdam54321&gt;</a></span><span class="message">Trusted Computing Base</span></div><div class="line" id="173306"><span class="nick" style="color:#8dd3c7"><a href="#173306" label="[17:33:06]">&lt;stikonas&gt;</a></span><span class="message">that's the only thing you have on most modern hardware</span></div><div class="line" id="173312"><span class="nick" style="color:#8dd3c7"><a href="#173312" label="[17:33:12]">&lt;stikonas&gt;</a></span><span class="message">so you have to trust it anyway</span></div><div class="line" id="173331"><span class="nick" style="color:#234e69"><a href="#173331" label="[17:33:31]">&lt;FlaminWalrus&gt;</a></span><span class="message">(this is why people run Libreboot)</span></div><div class="line" id="173347"><span class="nick" style="color:#8dd3c7"><a href="#173347" label="[17:33:47]">&lt;stikonas&gt;</a></span><span class="message">yes, but that's on old hardware...</span></div><div class="line" id="173403"><span class="nick" style="color:#234e69"><a href="#173403" label="[17:34:03]">&lt;FlaminWalrus&gt;</a></span><span class="message">There actually have been (at least proof-of-concept) attacks via UEFI bugs, IIRC</span></div><div class="line" id="173415"><span class="nick" style="color:#234e69"><a href="#173415" label="[17:34:15]">&lt;FlaminWalrus&gt;</a></span><span class="message">(just illustrating that it's always in the TCB)</span></div><div class="line" id="173427"><span class="nick" style="color:#8dd3c7"><a href="#173427" label="[17:34:27]">&lt;stikonas&gt;</a></span><span class="message">well, yes, of course</span></div><div class="line" id="173440"><span class="nick" style="color:#8dd3c7"><a href="#173440" label="[17:34:40]">&lt;stikonas&gt;</a></span><span class="message">but if alternative on most hardware is UEFI + kernel + something</span></div><div class="line" id="173445"><span class="nick" style="color:#8dd3c7"><a href="#173445" label="[17:34:45]">&lt;stikonas&gt;</a></span><span class="message">then UEFI + something might be smaller</span></div><div class="line" id="173557"><span class="nick" style="color:#234e69"><a href="#173557" label="[17:35:57]">&lt;FlaminWalrus&gt;</a></span><span class="message">Yep, I think it's safe to consider UEFI part of the &quot;hardware&quot; problem</span></div><div class="line" id="173627"><span class="nick" style="color:#8dd3c7"><a href="#173627" label="[17:36:27]">&lt;stikonas&gt;</a></span><span class="message">anyway, it's just one of the options that we created</span></div><div class="line" id="173659"><span class="nick" style="color:#8dd3c7"><a href="#173659" label="[17:36:59]">&lt;stikonas&gt;</a></span><span class="message">and some UEFIs are small enough (e.g. U-Boot)</span></div><div class="line" id="173743"><span class="nick" style="color:#8dd3c7"><a href="#173743" label="[17:37:43]">&lt;stikonas&gt;</a></span><span class="message">anyway, early steps hex0, hex1, hex2 mostly need just input and output</span></div><div class="line" id="173845"><span class="nick" style="color:#234e69"><a href="#173845" label="[17:38:45]">&lt;FlaminWalrus&gt;</a></span><span class="message">Is there anywhere where there's a unified list of up-to-date project components? I think I stumbled through several archived/outdated READMEs on my way here</span></div><div class="line" id="173851"><span class="nick" style="color:#8dd3c7"><a href="#173851" label="[17:38:51]">&lt;stikonas&gt;</a></span><span class="message">UEFI bugs are probably mostly related to Secure boot, aren't they</span></div><div class="line" id="173910"><span class="nick" style="color:#8dd3c7"><a href="#173910" label="[17:39:10]">&lt;stikonas&gt;</a></span><span class="message">FlaminWalrus: not really...</span></div><div class="line" id="173918"><span class="nick" style="color:#8dd3c7"><a href="#173918" label="[17:39:18]">&lt;stikonas&gt;</a></span><span class="message">you could try to create something</span></div><div class="line" id="173937"><span class="nick" style="color:#8dd3c7"><a href="#173937" label="[17:39:37]">&lt;stikonas&gt;</a></span><span class="message">also depends what do you mean by components?</span></div><div class="line" id="174032"><span class="nick" style="color:#8dd3c7"><a href="#174032" label="[17:40:32]">&lt;stikonas&gt;</a></span><span class="message">e.g. guix repo or <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst">https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst</a>  each desribe their own bootstrap steps (though the steps are not exactly the same once you get to tcc)</span></div><div class="line" id="174042"><span class="nick" style="color:#234e69"><a href="#174042" label="[17:40:42]">&lt;FlaminWalrus&gt;</a></span><span class="message">Noted. Thanks for your time; I've got to run for the moment but will be back later today, likely with more questions.</span></div><div class="line" id="174047"><span class="nick" style="color:#8dd3c7"><a href="#174047" label="[17:40:47]">&lt;stikonas&gt;</a></span><span class="message">(parts.rst is probably easier to read)</span></div><div class="line" id="174259"><span class="nick" style="color:#8dd3c7"><a href="#174259" label="[17:42:59]">&lt;stikonas&gt;</a></span><span class="message">but we don't have a very good description of all projects that we have</span></div><div class="line" id="221330"><span class="nick" style="color:#389600"><a href="#221330" label="[22:13:30]">&lt;oriansj&gt;</a></span><span class="message">we do have the previous talks and talk notes but ultimately the best way to learn is to talk to other humans.</span></div><br /></div></body></html>