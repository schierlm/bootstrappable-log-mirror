<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-12-31.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="001858"><span class="nick" style="color:#389600"><a href="#001858" label="[00:18:58]">&lt;stikonas&gt;</a></span><span class="message">hmm, there might still be a bit of an issue even if we use #__uefi__ define to select binaries that we run...</span></div><div class="line" id="001930"><span class="nick" style="color:#389600"><a href="#001930" label="[00:19:30]">&lt;stikonas&gt;</a></span><span class="message">oh, maybe not, maybe it's fine</span></div><div class="line" id="004446"><span class="nick" style="color:#389600"><a href="#004446" label="[00:44:46]">&lt;stikonas&gt;</a></span><span class="message">and UEFI directory refactoring complete: <a rel="nofollow" href="https://github.com/oriansj/M2libc/pull/40">https://github.com/oriansj/M2libc/pull/40</a> </span></div><div class="line" id="012738"><span class="nick" style="color:#8dd3c7"><a href="#012738" label="[01:27:38]">&lt;oriansj&gt;</a></span><span class="message">M2libc merged</span></div><div class="line" id="012801"><span class="nick" style="color:#389600"><a href="#012801" label="[01:28:01]">&lt;stikonas&gt;</a></span><span class="message">thanks</span></div><div class="line" id="013050"><span class="nick" style="color:#8dd3c7"><a href="#013050" label="[01:30:50]">&lt;oriansj&gt;</a></span><span class="message">M2-Mesoplanet merged</span></div><div class="line" id="013349"><span class="nick" style="color:#8dd3c7"><a href="#013349" label="[01:33:49]">&lt;oriansj&gt;</a></span><span class="message">well the only way #ifdef blocks don't work is if we copy UEFI binaries onto POSIX systems and the reverse but then they wouldn't run anyway</span></div><div class="line" id="013706"><span class="nick" style="color:#389600"><a href="#013706" label="[01:37:06]">&lt;stikonas&gt;</a></span><span class="message">yeah, exactly, that's why I later said it's fine</span></div><div class="line" id="020537"><span class="nick" style="color:#8dd3c7"><a href="#020537" label="[02:05:37]">&lt;oriansj&gt;</a></span><span class="message">stikonas: I was thinking more about the --os flag and tell me what you think of this idea: the default is bare metal (aka no __${OS}__ at all) and --os becomes required to build on Linux/UEFI/etc</span></div><div class="line" id="020627"><span class="nick" style="color:#389600"><a href="#020627" label="[02:06:27]">&lt;stikonas&gt;</a></span><span class="message">hmm, we can do that too, but we don't have much baremetal support...</span></div><div class="line" id="020632"><span class="nick" style="color:#389600"><a href="#020632" label="[02:06:32]">&lt;stikonas&gt;</a></span><span class="message">only for knight...</span></div><div class="line" id="020656"><span class="nick" style="color:#389600"><a href="#020656" label="[02:06:56]">&lt;stikonas&gt;</a></span><span class="message">but up to you</span></div><div class="line" id="023113"><span class="nick" style="color:#8dd3c7"><a href="#023113" label="[02:31:13]">&lt;oriansj&gt;</a></span><span class="message">well if make --operating-system required, then building natively and building cross-platform becomes the exact same thing</span></div><div class="line" id="023126"><span class="nick" style="color:#8dd3c7"><a href="#023126" label="[02:31:26]">&lt;oriansj&gt;</a></span><span class="message">^if^if we^</span></div><div class="line" id="025754"><span class="nick" style="color:#8dd3c7"><a href="#025754" label="[02:57:54]">&lt;oriansj&gt;</a></span><span class="message">or we can do what every C compiler does and just compile the default to be the host and hope people read the documentation when it is time to cross compile</span></div><div class="line" id="052957"><span class="nick" style="color:#2e2a4a"><a href="#052957" label="[05:29:57]">&lt;fossy&gt;</a></span><span class="message">ahhh, stikonas[m], i figured it out</span></div><div class="line" id="053001"><span class="nick" style="color:#2e2a4a"><a href="#053001" label="[05:30:01]">&lt;fossy&gt;</a></span><span class="message">that was -really- wacky</span></div><div class="line" id="053016"><span class="nick" style="color:#2e2a4a"><a href="#053016" label="[05:30:16]">&lt;fossy&gt;</a></span><span class="message">git respects umask</span></div><div class="line" id="053043"><span class="nick" style="color:#2e2a4a"><a href="#053043" label="[05:30:43]">&lt;fossy&gt;</a></span><span class="message">in my dotfiles i have umask 007, so it had that permission</span></div><div class="line" id="053105"><span class="nick" style="color:#2e2a4a"><a href="#053105" label="[05:31:05]">&lt;fossy&gt;</a></span><span class="message">and somehow that made its way all the way through to the tarball xD</span></div><div class="line" id="053119"><span class="nick" style="color:#2e2a4a"><a href="#053119" label="[05:31:19]">&lt;fossy&gt;</a></span><span class="message">(re: the musl diff, if that wasn't clear)</span></div><div class="line" id="154339"><span class="nick" style="color:#389600"><a href="#154339" label="[15:43:39]">&lt;stikonas&gt;</a></span><span class="message">sigh, something is seriously broken in M2-Mesoplanet #include parsing</span></div><div class="line" id="154444"><span class="nick" style="color:#389600"><a href="#154444" label="[15:44:44]">&lt;stikonas&gt;</a></span><span class="message">oh, maybe not, maybe I just need to reorder includes...</span></div><div class="line" id="160455"><span class="nick" style="color:#389600"><a href="#160455" label="[16:04:55]">&lt;stikonas&gt;</a></span><span class="message">hmm, since M2-Mesoplanet includes file as soon as possible, removing other includes from uefi.c should help</span></div><div class="line" id="161031"><span class="nick" style="color:#389600"><a href="#161031" label="[16:10:31]">&lt;stikonas&gt;</a></span><span class="message">and i might need to do something a bit ugly, define some structs before #includes...</span></div><div class="line" id="161318"><span class="nick" style="color:#8dd3c7"><a href="#161318" label="[16:13:18]">&lt;oriansj&gt;</a></span><span class="message">or just put the struct in its own file and #include it</span></div><div class="line" id="161615"><span class="nick" style="color:#389600"><a href="#161615" label="[16:16:15]">&lt;stikonas&gt;</a></span><span class="message">well, we can put it in .h file</span></div><div class="line" id="161620"><span class="nick" style="color:#389600"><a href="#161620" label="[16:16:20]">&lt;stikonas&gt;</a></span><span class="message">at the top</span></div><div class="line" id="161630"><span class="nick" style="color:#389600"><a href="#161630" label="[16:16:30]">&lt;stikonas&gt;</a></span><span class="message">anyway, I'll sort it out after the lunch</span></div><div class="line" id="161634"><span class="nick" style="color:#389600"><a href="#161634" label="[16:16:34]">&lt;stikonas&gt;</a></span><span class="message">I've got it building now</span></div><div class="line" id="161801"><span class="nick" style="color:#389600"><a href="#161801" label="[16:18:01]">&lt;stikonas&gt;</a></span><span class="message">I can see some minor bugs but in general stuff works, sha256sum.efi sha256sum.efi works</span></div><div class="line" id="162213"><span class="nick" style="color:#389600"><a href="#162213" label="[16:22:13]">&lt;stikonas&gt;</a></span><span class="message">unbz2 works, untar fails to create some directories</span></div><div class="line" id="162246"><span class="nick" style="color:#389600"><a href="#162246" label="[16:22:46]">&lt;stikonas&gt;</a></span><span class="message">oriansj: <a rel="nofollow" href="https://github.com/oriansj/M2-Mesoplanet/pull/7">https://github.com/oriansj/M2-Mesoplanet/pull/7</a>  for now</span></div><div class="line" id="162249"><span class="nick" style="color:#389600"><a href="#162249" label="[16:22:49]">&lt;stikonas&gt;</a></span><span class="message">I'll do M2libc later</span></div><div class="line" id="162422"><span class="nick" style="color:#389600"><a href="#162422" label="[16:24:22]">&lt;stikonas&gt;</a></span><span class="message">hmm, maybe even untar worked, just complained for some reason (possibly repeated attemts to create dir)</span></div><div class="line" id="172607"><span class="nick" style="color:#8dd3c7"><a href="#172607" label="[17:26:07]">&lt;oriansj&gt;</a></span><span class="message">stikonas: merged</span></div><div class="line" id="172626"><span class="nick" style="color:#389600"><a href="#172626" label="[17:26:26]">&lt;stikonas&gt;</a></span><span class="message">oriansj: thanks, I'm preparing M2libc change now</span></div><div class="line" id="172637"><span class="nick" style="color:#389600"><a href="#172637" label="[17:26:37]">&lt;stikonas&gt;</a></span><span class="message">I think I'll keep that one struct before #include if you don't mind</span></div><div class="line" id="172651"><span class="nick" style="color:#389600"><a href="#172651" label="[17:26:51]">&lt;stikonas&gt;</a></span><span class="message">otherwise we need to add even more files...</span></div><div class="line" id="172859"><span class="nick" style="color:#8dd3c7"><a href="#172859" label="[17:28:59]">&lt;oriansj&gt;</a></span><span class="message">well if the struct is generally useful (aka tied to operating system functionality) it belongs in an includable file but if it is just specific to a single program, then yes that is fine.</span></div><div class="line" id="172927"><span class="nick" style="color:#8dd3c7"><a href="#172927" label="[17:29:27]">&lt;oriansj&gt;</a></span><span class="message">but requiring it prior to an include just smells wrong.</span></div><div class="line" id="172937"><span class="nick" style="color:#389600"><a href="#172937" label="[17:29:37]">&lt;stikonas&gt;</a></span><span class="message">hmm, it's FILE struct</span></div><div class="line" id="173024"><span class="nick" style="color:#8dd3c7"><a href="#173024" label="[17:30:24]">&lt;oriansj&gt;</a></span><span class="message">so it belongs in stdio.h</span></div><div class="line" id="173037"><span class="nick" style="color:#389600"><a href="#173037" label="[17:30:37]">&lt;stikonas&gt;</a></span><span class="message">yeah, right now it's in stdio.c</span></div><div class="line" id="173041"><span class="nick" style="color:#389600"><a href="#173041" label="[17:30:41]">&lt;stikonas&gt;</a></span><span class="message">ok, let me see if I can move it</span></div><div class="line" id="173131"><span class="nick" style="color:#389600"><a href="#173131" label="[17:31:31]">&lt;stikonas&gt;</a></span><span class="message">stdio.h includes stdio.c in __M2__ so I guess I still have to do it before that include in stdio.h</span></div><div class="line" id="173215"><span class="nick" style="color:#8dd3c7"><a href="#173215" label="[17:32:15]">&lt;oriansj&gt;</a></span><span class="message">well in theory the struct defines should only be in the .h files</span></div><div class="line" id="173301"><span class="nick" style="color:#389600"><a href="#173301" label="[17:33:01]">&lt;stikonas&gt;</a></span><span class="message">yaeh that's normal in C libraries</span></div><div class="line" id="173322"><span class="nick" style="color:#389600"><a href="#173322" label="[17:33:22]">&lt;stikonas&gt;</a></span><span class="message">but with M2libc we might have to update some M2-Planet build commands</span></div><div class="line" id="173348"><span class="nick" style="color:#8dd3c7"><a href="#173348" label="[17:33:48]">&lt;oriansj&gt;</a></span><span class="message">seems like a good idea</span></div><div class="line" id="173451"><span class="nick" style="color:#389600"><a href="#173451" label="[17:34:51]">&lt;stikonas&gt;</a></span><span class="message">hopefully it's just adding -f stdio.h</span></div><div class="line" id="174553"><span class="nick" style="color:#389600"><a href="#174553" label="[17:45:53]">&lt;stikonas&gt;</a></span><span class="message">ok, it works</span></div><div class="line" id="174602"><span class="nick" style="color:#389600"><a href="#174602" label="[17:46:02]">&lt;stikonas&gt;</a></span><span class="message">let me prepare a PR then</span></div><div class="line" id="174609"><span class="nick" style="color:#389600"><a href="#174609" label="[17:46:09]">&lt;stikonas&gt;</a></span><span class="message">and remaining bugs can be solved later</span></div><div class="line" id="174753"><span class="nick" style="color:#8dd3c7"><a href="#174753" label="[17:47:53]">&lt;oriansj&gt;</a></span><span class="message">well the big problem is if any files are compiled by cc_* too</span></div><div class="line" id="175043"><span class="nick" style="color:#389600"><a href="#175043" label="[17:50:43]">&lt;stikonas&gt;</a></span><span class="message">probably no</span></div><div class="line" id="175052"><span class="nick" style="color:#389600"><a href="#175052" label="[17:50:52]">&lt;stikonas&gt;</a></span><span class="message">otherwise I would have seen an error earlier in the build</span></div><div class="line" id="175721"><span class="nick" style="color:#389600"><a href="#175721" label="[17:57:21]">&lt;stikonas&gt;</a></span><span class="message">oriansj: <a rel="nofollow" href="https://github.com/oriansj/M2libc/pull/41">https://github.com/oriansj/M2libc/pull/41</a> </span></div><div class="line" id="175816"><span class="nick" style="color:#389600"><a href="#175816" label="[17:58:16]">&lt;stikonas&gt;</a></span><span class="message">with this I can run stage0-uefi up to the end</span></div><div class="line" id="175830"><span class="nick" style="color:#389600"><a href="#175830" label="[17:58:30]">&lt;stikonas&gt;</a></span><span class="message">(I only haven't done final sha256sum check)</span></div><div class="line" id="180004"><span class="nick" style="color:#389600"><a href="#180004" label="[18:00:04]">&lt;stikonas&gt;</a></span><span class="message">it's much nicer now that uefi stuff is in arch independent directory</span></div><div class="line" id="180015"><span class="nick" style="color:#389600"><a href="#180015" label="[18:00:15]">&lt;stikonas&gt;</a></span><span class="message">otherwise we would have to deal with both uefi and arches</span></div><div class="line" id="180744"><span class="nick" style="color:#8dd3c7"><a href="#180744" label="[18:07:44]">&lt;oriansj&gt;</a></span><span class="message">merged</span></div><div class="line" id="180828"><span class="nick" style="color:#389600"><a href="#180828" label="[18:08:28]">&lt;stikonas&gt;</a></span><span class="message">ok, thanks, now I just need to generate sha256sum.answers</span></div><div class="line" id="180846"><span class="nick" style="color:#389600"><a href="#180846" label="[18:08:46]">&lt;stikonas&gt;</a></span><span class="message">which is not as easy as running make Generate-amd64-anwers on posix :(</span></div><div class="line" id="182030"><span class="nick" style="color:#389600"><a href="#182030" label="[18:20:30]">&lt;stikonas&gt;</a></span><span class="message">ok, pushed to <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi">https://git.stikonas.eu/andrius/stage0-uefi</a> </span></div><div class="line" id="182035"><span class="nick" style="color:#389600"><a href="#182035" label="[18:20:35]">&lt;stikonas&gt;</a></span><span class="message">now stage0-uefi runs to completion</span></div><div class="line" id="182918"><span class="nick" style="color:#6b8072"><a href="#182918" label="[18:29:18]">&lt;stikonas[m]&gt;</a></span><span class="message">oriansj: sorry, one more PR, a couple of extra fixes: <a rel="nofollow" href="https://github.com/oriansj/M2libc/pull/42">https://github.com/oriansj/M2libc/pull/42</a> </span></div><div class="line" id="213541"><span class="nick" style="color:#8dd3c7"><a href="#213541" label="[21:35:41]">&lt;oriansj&gt;</a></span><span class="message">stikonas: merged</span></div><div class="line" id="213636"><span class="nick" style="color:#8dd3c7"><a href="#213636" label="[21:36:36]">&lt;oriansj&gt;</a></span><span class="message">stikonas: amazing news about completing stage0-uefi for amd64 ^_^</span></div><div class="line" id="213656"><span class="nick" style="color:#8dd3c7"><a href="#213656" label="[21:36:56]">&lt;oriansj&gt;</a></span><span class="message">I am so glad you finally finished the last few steps</span></div><div class="line" id="213801"><span class="nick" style="color:#8dd3c7"><a href="#213801" label="[21:38:01]">&lt;oriansj&gt;</a></span><span class="message">janneke: is there anything you can do to get mes.c running on uefi?</span></div><div class="line" id="213831"><span class="nick" style="color:#6b8072"><a href="#213831" label="[21:38:31]">&lt;stikonas[m]&gt;</a></span><span class="message">Still need to fix POSIX stuff, almost done with M2-planet tests</span></div><div class="line" id="214738"><span class="nick" style="color:#8dd3c7"><a href="#214738" label="[21:47:38]">&lt;oriansj&gt;</a></span><span class="message">very nice</span></div><div class="line" id="215403"><span class="nick" style="color:#389600"><a href="#215403" label="[21:54:03]">&lt;stikonas&gt;</a></span><span class="message">ok, fixed M2-Planet tests <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/pull/52">https://github.com/oriansj/M2-Planet/pull/52</a> </span></div><div class="line" id="220638"><span class="nick" style="color:#389600"><a href="#220638" label="[22:06:38]">&lt;stikonas&gt;</a></span><span class="message">oriansj: for mes.c I think one of the paths would be if somebody improved M2libc to be able to build mes.c</span></div><div class="line" id="220715"><span class="nick" style="color:#80b1d3"><a href="#220715" label="[22:07:15]">&lt;drakonis&gt;</a></span><span class="message"> <a rel="nofollow" href="https://borretti.me/article/introducing-austral">https://borretti.me/article/introducing-austral</a> </span></div><div class="line" id="220716"><span class="nick" style="color:#389600"><a href="#220716" label="[22:07:16]">&lt;stikonas&gt;</a></span><span class="message">and that would probably let us run mescc</span></div><div class="line" id="220721"><span class="nick" style="color:#80b1d3"><a href="#220721" label="[22:07:21]">&lt;drakonis&gt;</a></span><span class="message">this one has a ocaml based bootstrapping compiler</span></div><div class="line" id="220754"><span class="nick" style="color:#389600"><a href="#220754" label="[22:07:54]">&lt;stikonas&gt;</a></span><span class="message">so many languages these days though....</span></div><div class="line" id="220916"><span class="nick" style="color:#6d2462"><a href="#220916" label="[22:09:16]">&lt;mihi&gt;</a></span><span class="message">stikonas, congrats for finishing stage0-uefi :)</span></div><div class="line" id="220922"><span class="nick" style="color:#389600"><a href="#220922" label="[22:09:22]">&lt;stikonas&gt;</a></span><span class="message">mihi: yeah, that's finally done</span></div><div class="line" id="220930"><span class="nick" style="color:#389600"><a href="#220930" label="[22:09:30]">&lt;stikonas&gt;</a></span><span class="message">still there are some bugs, but main things work</span></div><div class="line" id="220940"><span class="nick" style="color:#6d2462"><a href="#220940" label="[22:09:40]">&lt;mihi&gt;</a></span><span class="message">do you regret having started it?</span></div><div class="line" id="220952"><span class="nick" style="color:#389600"><a href="#220952" label="[22:09:52]">&lt;stikonas&gt;</a></span><span class="message">no, I don't regret, but I thought it will be done quicker</span></div><div class="line" id="221009"><span class="nick" style="color:#389600"><a href="#221009" label="[22:10:09]">&lt;stikonas&gt;</a></span><span class="message">but in the process M2-Planet got improved too</span></div><div class="line" id="221058"><span class="nick" style="color:#389600"><a href="#221058" label="[22:10:58]">&lt;stikonas&gt;</a></span><span class="message">and if somebody decides to do it for e.g. aarch64, it should now be much easier</span></div><div class="line" id="221230"><span class="nick" style="color:#389600"><a href="#221230" label="[22:12:30]">&lt;stikonas&gt;</a></span><span class="message">especially steps after M2-Planet</span></div><div class="line" id="221230"><span class="nick" style="color:#6d2462"><a href="#221230" label="[22:12:30]">&lt;mihi&gt;</a></span><span class="message">as an unrelated note, I finally found time to fix step 5 of my full source bootstrap from git repository. It only builds gcc, but getting the repo free from non-text files was harder than I anticipated (and frustrating so that I stopped working on it quickly)</span></div><div class="line" id="221230"><span class="nick" style="color:#389600"><a href="#221230" label="[22:12:30]">&lt;stikonas&gt;</a></span><span class="message">oh yeah, we do have a lot of frustrating problems in #bootstrappable</span></div><div class="line" id="221230"><span class="nick" style="color:#6d2462"><a href="#221230" label="[22:12:30]">&lt;mihi&gt;</a></span><span class="message">:)</span></div><div class="line" id="221230"><span class="nick" style="color:#6d2462"><a href="#221230" label="[22:12:30]">&lt;mihi&gt;</a></span><span class="message">and if rickmasters / rick-masters now decides to port his kernel to uefi, he should have a lot easier time and does not have to write everything in hex2 asm :)</span></div><div class="line" id="221232"><span class="nick" style="color:#80b1d3"><a href="#221232" label="[22:12:32]">&lt;drakonis&gt;</a></span><span class="message">stikonas: indeed a lot of langs</span></div><div class="line" id="221259"><span class="nick" style="color:#389600"><a href="#221259" label="[22:12:59]">&lt;stikonas&gt;</a></span><span class="message">I think he actually wrote it in hex0 asm</span></div><div class="line" id="221318"><span class="nick" style="color:#6d2462"><a href="#221318" label="[22:13:18]">&lt;mihi&gt;</a></span><span class="message">tbh I did not look at it, only from what I remember from the logs.</span></div><div class="line" id="221323"><span class="nick" style="color:#389600"><a href="#221323" label="[22:13:23]">&lt;stikonas&gt;</a></span><span class="message">but builder-hex0 has other advantages, it's lower level and does not assume file system stuff</span></div><div class="line" id="221354"><span class="nick" style="color:#6d2462"><a href="#221354" label="[22:13:54]">&lt;mihi&gt;</a></span><span class="message">I assume it relies on BIOS calls?</span></div><div class="line" id="221503"><span class="nick" style="color:#389600"><a href="#221503" label="[22:15:03]">&lt;stikonas&gt;</a></span><span class="message">it's filesystem is basically  a stream, name, size, data</span></div><div class="line" id="221503"><span class="nick" style="color:#389600"><a href="#221503" label="[22:15:03]">&lt;stikonas&gt;</a></span><span class="message">yes, it uses BIOS calls</span></div><div class="line" id="221503"><span class="nick" style="color:#389600"><a href="#221503" label="[22:15:03]">&lt;stikonas&gt;</a></span><span class="message">I have briefly looked at it, but not in super great details</span></div><div class="line" id="221503"><span class="nick" style="color:#6d2462"><a href="#221503" label="[22:15:03]">&lt;mihi&gt;</a></span><span class="message">so at least the BIOS calls need to be replaced by EFI BootServices calls, maybe wrapped in context switches (depending how much the memory model of his kernel is different from uefi's)</span></div><div class="line" id="221521"><span class="nick" style="color:#389600"><a href="#221521" label="[22:15:21]">&lt;stikonas&gt;</a></span><span class="message">but do we need that kernel on UEFI?</span></div><div class="line" id="221541"><span class="nick" style="color:#389600"><a href="#221541" label="[22:15:41]">&lt;stikonas&gt;</a></span><span class="message">well, it might be useful if we can't reach fiwix on uefi</span></div><div class="line" id="221554"><span class="nick" style="color:#6d2462"><a href="#221554" label="[22:15:54]">&lt;mihi&gt;</a></span><span class="message">that is the big question. If we can shoehorn everything up to fiwix compilation in UEFI environment, we don't need it.</span></div><div class="line" id="221556"><span class="nick" style="color:#389600"><a href="#221556" label="[22:15:56]">&lt;stikonas&gt;</a></span><span class="message">as builder-hex0 actually provides POSIX runtime envronment</span></div><div class="line" id="221607"><span class="nick" style="color:#389600"><a href="#221607" label="[22:16:07]">&lt;stikonas&gt;</a></span><span class="message">M2libc only provides source compatibility</span></div><div class="line" id="221633"><span class="nick" style="color:#389600"><a href="#221633" label="[22:16:33]">&lt;stikonas&gt;</a></span><span class="message">but syscalls and PE headers are not POSIX compatible</span></div><div class="line" id="221634"><span class="nick" style="color:#6d2462"><a href="#221634" label="[22:16:34]">&lt;mihi&gt;</a></span><span class="message">I assume we won't be able to make tcc compile against M2libc</span></div><div class="line" id="221649"><span class="nick" style="color:#389600"><a href="#221649" label="[22:16:49]">&lt;stikonas&gt;</a></span><span class="message">no..</span></div><div class="line" id="221801"><span class="nick" style="color:#389600"><a href="#221801" label="[22:18:01]">&lt;stikonas&gt;</a></span><span class="message">but even if we port mes libc to UEFI</span></div><div class="line" id="221801"><span class="nick" style="color:#6d2462"><a href="#221801" label="[22:18:01]">&lt;mihi&gt;</a></span><span class="message">or at least, if we were able, getting builder-hex0 to work on UEFI is probably easier</span></div><div class="line" id="221801"><span class="nick" style="color:#389600"><a href="#221801" label="[22:18:01]">&lt;stikonas&gt;</a></span><span class="message">tcc  can still only produce POSIX elf binaries</span></div><div class="line" id="221801"><span class="nick" style="color:#389600"><a href="#221801" label="[22:18:01]">&lt;stikonas&gt;</a></span><span class="message">so would also need changes</span></div><div class="line" id="225556"><span class="nick" style="color:#389600"><a href="#225556" label="[22:55:56]">&lt;stikonas&gt;</a></span><span class="message">hmm, there are some issues with updating stage0-posix :(</span></div><div class="line" id="225618"><span class="nick" style="color:#389600"><a href="#225618" label="[22:56:18]">&lt;stikonas&gt;</a></span><span class="message">mkdir.c:47:strlen is not a defined symbol</span></div><div class="line" id="232409"><span class="nick" style="color:#8dd3c7"><a href="#232409" label="[23:24:09]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well we would only need tcc to build the most minimal of POSIX kernels (assuming we don't have M2-Planet or MesCC do it</span></div><div class="line" id="232525"><span class="nick" style="color:#389600"><a href="#232525" label="[23:25:25]">&lt;stikonas&gt;</a></span><span class="message">oriansj: no, you also need tcc to build tcc</span></div><div class="line" id="232525"><span class="nick" style="color:#389600"><a href="#232525" label="[23:25:25]">&lt;stikonas&gt;</a></span><span class="message">it's unlikely the the very first tcc can build kernel</span></div><div class="line" id="232525"><span class="nick" style="color:#389600"><a href="#232525" label="[23:25:25]">&lt;stikonas&gt;</a></span><span class="message">at least fiwix kernel...</span></div><div class="line" id="232525"><span class="nick" style="color:#389600"><a href="#232525" label="[23:25:25]">&lt;stikonas&gt;</a></span><span class="message">though who knows... rickmasters would know better</span></div><div class="line" id="232533"><span class="nick" style="color:#389600"><a href="#232533" label="[23:25:33]">&lt;stikonas&gt;</a></span><span class="message">but I think the first tcc builds are very limitted</span></div><div class="line" id="232546"><span class="nick" style="color:#389600"><a href="#232546" label="[23:25:46]">&lt;stikonas&gt;</a></span><span class="message">tcc 0.9.26 rebuilds itself 5 times</span></div><div class="line" id="232610"><span class="nick" style="color:#389600"><a href="#232610" label="[23:26:10]">&lt;stikonas&gt;</a></span><span class="message">with different define flags</span></div><div class="line" id="233052"><span class="nick" style="color:#8dd3c7"><a href="#233052" label="[23:30:52]">&lt;oriansj&gt;</a></span><span class="message">fair enough</span></div><div class="line" id="233110"><span class="nick" style="color:#8dd3c7"><a href="#233110" label="[23:31:10]">&lt;oriansj&gt;</a></span><span class="message">even written in M1 is a huge improvement to writing in hex0</span></div><div class="line" id="233400"><span class="nick" style="color:#389600"><a href="#233400" label="[23:34:00]">&lt;stikonas&gt;</a></span><span class="message">yeah, and M2 is even better</span></div><div class="line" id="233438"><span class="nick" style="color:#6b8072"><a href="#233438" label="[23:34:38]">&lt;stikonas[m]&gt;</a></span><span class="message">Still, it's good to have  hex0 version of builder-hex0 too</span></div><div class="line" id="010439"><span class="nick" style="color:#8dd3c7"><a href="#010439" label="[01:04:39]">&lt;oriansj&gt;</a></span><span class="message">well the only thing an operating system might need that M2-Planet doesn't do well is jump tables</span></div><div class="line" id="033933"><span class="nick" style="color:#8dd3c7"><a href="#033933" label="[03:39:33]">&lt;oriansj&gt;</a></span><span class="message">drakonis: I was looking at the language you posted earlier (<a rel="nofollow" href="https://github.com/austral/austral">https://github.com/austral/austral</a>  ) and it looks relatively easy to parse. So the hardest bit of it to bootstrap (if we wanted to use it lower in our stack) is to do the type system.</span></div><div class="line" id="040630"><span class="nick" style="color:#8dd3c7"><a href="#040630" label="[04:06:30]">&lt;oriansj&gt;</a></span><span class="message">and the rant: <a rel="nofollow" href="https://eev.ee/blog/2016/12/01/lets-stop-copying-c/">https://eev.ee/blog/2016/12/01/lets-stop-copying-c/</a>  seems spot on for several of the points (disagree on the ! bit [but maybe because I believe in syntax highlighting making that difference very obvious]) (a strong disagree on the multiple returns bit (sure it is nice to use but it either results in untyped lists or the compiler writer having to add an implicit custom struct for every type))</span></div><div class="line" id="041205"><span class="nick" style="color:#8dd3c7"><a href="#041205" label="[04:12:05]">&lt;oriansj&gt;</a></span><span class="message">although if one wanted a better low level bootstrapping language than C; I can suggest that a compiled typed Lisp would probably be the ideal. (easier to parse and much stricter types, not to mention easier to write tools to formally validate correctness)</span></div><div class="line" id="041328"><span class="nick" style="color:#8dd3c7"><a href="#041328" label="[04:13:28]">&lt;oriansj&gt;</a></span><span class="message">(define foo (lambda ...)) (define bar types:uint32)</span></div><div class="line" id="041430"><span class="nick" style="color:#8dd3c7"><a href="#041430" label="[04:14:30]">&lt;oriansj&gt;</a></span><span class="message">a few clean up details and you'd have a language one can learn in 5 minutes and would be a powerful competitor for C</span></div><div class="line" id="041759"><span class="nick" style="color:#8dd3c7"><a href="#041759" label="[04:17:59]">&lt;oriansj&gt;</a></span><span class="message">(define types (module ...)) (define uint32 (type ...))</span></div><div class="line" id="041911"><span class="nick" style="color:#8dd3c7"><a href="#041911" label="[04:19:11]">&lt;oriansj&gt;</a></span><span class="message">(define types (module .... (define uint32 (type ...)))) [if I wanted to give an idea of the style involved]</span></div><div class="line" id="043829"><span class="nick" style="color:#8dd3c7"><a href="#043829" label="[04:38:29]">&lt;oriansj&gt;</a></span><span class="message">I guess I should write that up in case someone is interested in actually doing a typed lisp to replace the C in the bootstrap</span></div><div class="line" id="061918"><span class="nick" style="color:#8dd3c7"><a href="#061918" label="[06:19:18]">&lt;oriansj&gt;</a></span><span class="message">now I think I need the most cruel perspective possible on what I got wrong.</span></div><div class="line" id="062241"><span class="nick" style="color:#8dd3c7"><a href="#062241" label="[06:22:41]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://git.sr.ht/~oriansj/bishop/tree/main/item/README.org">https://git.sr.ht/~oriansj/bishop/tree/main/item/README.org</a> </span></div><div class="line" id="062301"><span class="nick" style="color:#8dd3c7"><a href="#062301" label="[06:23:01]">&lt;oriansj&gt;</a></span><span class="message">tell me what I missed, did completely wrong, or could do better</span></div><div class="line" id="062619"><span class="nick" style="color:#8dd3c7"><a href="#062619" label="[06:26:19]">&lt;oriansj&gt;</a></span><span class="message">and then I guess I should probably implement a working version.</span></div><div class="line" id="064823"><span class="nick" style="color:#8dd3c7"><a href="#064823" label="[06:48:23]">&lt;oriansj&gt;</a></span><span class="message">(first in C, then in itself and then finally in assembly)</span></div><div class="line" id="074923"><span class="nick" style="color:#80b1d3"><a href="#074923" label="[07:49:23]">&lt;drakonis&gt;</a></span><span class="message">oriansj: that would most certainly be very good.</span></div><div class="line" id="075026"><span class="nick" style="color:#80b1d3"><a href="#075026" label="[07:50:26]">&lt;drakonis&gt;</a></span><span class="message"> <a rel="nofollow" href="https://fosdem.org/2023/schedule/event/prescheme/">https://fosdem.org/2023/schedule/event/prescheme/</a>  is this relevant?</span></div><div class="line" id="075244"><span class="nick" style="color:#8dd3c7"><a href="#075244" label="[07:52:44]">&lt;oriansj&gt;</a></span><span class="message">drakonis: well in bootstrapping in general, yes but it is bigger than Mes, so at that point it kind of misses the point</span></div><div class="line" id="075443"><span class="nick" style="color:#8dd3c7"><a href="#075443" label="[07:54:43]">&lt;oriansj&gt;</a></span><span class="message">and it appears the #lisp community has some nice suggestions for improvement</span></div><div class="line" id="075454"><span class="nick" style="color:#8dd3c7"><a href="#075454" label="[07:54:54]">&lt;oriansj&gt;</a></span><span class="message">so I'll be stealing a few of those</span></div><div class="line" id="075818"><span class="nick" style="color:#80b1d3"><a href="#075818" label="[07:58:18]">&lt;drakonis&gt;</a></span><span class="message">how nice.</span></div><div class="line" id="085337"><span class="nick" style="color:#8dd3c7"><a href="#085337" label="[08:53:37]">&lt;oriansj&gt;</a></span><span class="message">well I think that is enough tweaking for tonight (I need sleep); hopefully more people will have suggestions to make it a better bootstrapping lisp</span></div><div class="line" id="140058"><span class="nick" style="color:#389600"><a href="#140058" label="[14:00:58]">&lt;stikonas&gt;</a></span><span class="message">oriansj: we'll need this change to stage0-aarch64 <a rel="nofollow" href="https://github.com/oriansj/stage0-posix-aarch64/pull/6">https://github.com/oriansj/stage0-posix-aarch64/pull/6</a>  before I can update stage0-posix to newest M2libc</span></div><div class="line" id="141416"><span class="nick" style="color:#8dd3c7"><a href="#141416" label="[14:14:16]">&lt;oriansj&gt;</a></span><span class="message">merged</span></div><div class="line" id="141531"><span class="nick" style="color:#389600"><a href="#141531" label="[14:15:31]">&lt;stikonas&gt;</a></span><span class="message">thanks</span></div><div class="line" id="141620"><span class="nick" style="color:#389600"><a href="#141620" label="[14:16:20]">&lt;stikonas&gt;</a></span><span class="message">I'll probably have to fix M2libc before I can update stage0-posix</span></div><div class="line" id="141631"><span class="nick" style="color:#389600"><a href="#141631" label="[14:16:31]">&lt;stikonas&gt;</a></span><span class="message">I think that commit that fixed UEFI broke something in POSIX...</span></div><div class="line" id="141739"><span class="nick" style="color:#389600"><a href="#141739" label="[14:17:39]">&lt;stikonas&gt;</a></span><span class="message">it might have changed #include order</span></div><div class="line" id="141752"><span class="nick" style="color:#389600"><a href="#141752" label="[14:17:52]">&lt;stikonas&gt;</a></span><span class="message">possibly need to add some early function declaration</span></div><div class="line" id="142157"><span class="nick" style="color:#8dd3c7"><a href="#142157" label="[14:21:57]">&lt;oriansj&gt;</a></span><span class="message">I can't see how the UEFI fix broke POSIX</span></div><div class="line" id="142159"><span class="nick" style="color:#389600"><a href="#142159" label="[14:21:59]">&lt;stikonas&gt;</a></span><span class="message">hmm, x86/artifact/M2-Mesoplanet-000000 does not contain string.h at all</span></div><div class="line" id="142230"><span class="nick" style="color:#389600"><a href="#142230" label="[14:22:30]">&lt;stikonas&gt;</a></span><span class="message">(I also noticed that I accidentally removed #if x86_64 guards on UEFI, but that's unrelated)</span></div><div class="line" id="142306"><span class="nick" style="color:#389600"><a href="#142306" label="[14:23:06]">&lt;stikonas&gt;</a></span><span class="message">oriansj: it's 41a04d675314766fd278c1f385e28c54027e9f8c that broke POSIX</span></div><div class="line" id="142353"><span class="nick" style="color:#389600"><a href="#142353" label="[14:23:53]">&lt;stikonas&gt;</a></span><span class="message">readded #if  guards here <a rel="nofollow" href="https://github.com/oriansj/M2libc/pull/43/files">https://github.com/oriansj/M2libc/pull/43/files</a> </span></div><div class="line" id="142420"><span class="nick" style="color:#389600"><a href="#142420" label="[14:24:20]">&lt;stikonas&gt;</a></span><span class="message">oriansj: can you reproduce that strlen error if you update all stage0-posix submodules?</span></div><div class="line" id="142432"><span class="nick" style="color:#389600"><a href="#142432" label="[14:24:32]">&lt;stikonas&gt;</a></span><span class="message">I get</span></div><div class="line" id="142434"><span class="nick" style="color:#389600"><a href="#142434" label="[14:24:34]">&lt;stikonas&gt;</a></span><span class="message">M2-Planet --file ../x86/artifact/M2-Mesoplanet-000000 --output ../x86/artifact/M2-Planet-000000 --architecture x86 --debug</span></div><div class="line" id="142436"><span class="nick" style="color:#389600"><a href="#142436" label="[14:24:36]">&lt;stikonas&gt;</a></span><span class="message">mkdir.c:47:strlen is not a defined symbol</span></div><div class="line" id="142452"><span class="nick" style="color:#389600"><a href="#142452" label="[14:24:52]">&lt;stikonas&gt;</a></span><span class="message">though it's only for mkdir, so some other programs build fine</span></div><div class="line" id="142949"><span class="nick" style="color:#8dd3c7"><a href="#142949" label="[14:29:49]">&lt;oriansj&gt;</a></span><span class="message">you are missing a -f ./M2libc/stdio.h</span></div><div class="line" id="143321"><span class="nick" style="color:#6b8072"><a href="#143321" label="[14:33:21]">&lt;stikonas[m]&gt;</a></span><span class="message">Oh in which file?</span></div><div class="line" id="143356"><span class="nick" style="color:#389600"><a href="#143356" label="[14:33:56]">&lt;stikonas&gt;</a></span><span class="message">I thought for mescc-tools-extra M2-Mesoplanet would find it</span></div><div class="line" id="143511"><span class="nick" style="color:#8dd3c7"><a href="#143511" label="[14:35:11]">&lt;oriansj&gt;</a></span><span class="message">stikonas: that is an M2-Planet command, not M2-Mesoplanet</span></div><div class="line" id="143540"><span class="nick" style="color:#389600"><a href="#143540" label="[14:35:40]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I thought I've just added them</span></div><div class="line" id="143554"><span class="nick" style="color:#389600"><a href="#143554" label="[14:35:54]">&lt;stikonas&gt;</a></span><span class="message">have you pulled in stage0-posix-x86 and other submodules?</span></div><div class="line" id="143801"><span class="nick" style="color:#8dd3c7"><a href="#143801" label="[14:38:01]">&lt;oriansj&gt;</a></span><span class="message">I think I forgot to do that</span></div><div class="line" id="150804"><span class="nick" style="color:#8dd3c7"><a href="#150804" label="[15:08:04]">&lt;oriansj&gt;</a></span><span class="message">hmmm M2-Mesoplanet never imported string.h</span></div><div class="line" id="151119"><span class="nick" style="color:#6b8072"><a href="#151119" label="[15:11:19]">&lt;stikonas[m]&gt;</a></span><span class="message">Yes, it's not in that processed C file</span></div><div class="line" id="151208"><span class="nick" style="color:#6b8072"><a href="#151208" label="[15:12:08]">&lt;stikonas[m]&gt;</a></span><span class="message">It does sound like M2-Mesoplanet bug</span></div><div class="line" id="151416"><span class="nick" style="color:#8dd3c7"><a href="#151416" label="[15:14:16]">&lt;oriansj&gt;</a></span><span class="message">well it appears it exists even if M2-Mesoplanet is built with GCC</span></div><div class="line" id="151450"><span class="nick" style="color:#8dd3c7"><a href="#151450" label="[15:14:50]">&lt;oriansj&gt;</a></span><span class="message">which helps</span></div><div class="line" id="151525"><span class="nick" style="color:#6b8072"><a href="#151525" label="[15:15:25]">&lt;stikonas[m]&gt;</a></span><span class="message">Oh, that's good, I haven't tested GCC built version</span></div><div class="line" id="151607"><span class="nick" style="color:#8dd3c7"><a href="#151607" label="[15:16:07]">&lt;oriansj&gt;</a></span><span class="message">./bin/M2-Mesoplanet -E --architecture amd64 -f ../mescc-tools-extra/mkdir.c -o foo</span></div><div class="line" id="151625"><span class="nick" style="color:#8dd3c7"><a href="#151625" label="[15:16:25]">&lt;oriansj&gt;</a></span><span class="message">no string.h in the output</span></div><div class="line" id="152127"><span class="nick" style="color:#8dd3c7"><a href="#152127" label="[15:21:27]">&lt;oriansj&gt;</a></span><span class="message">no, it reads it just fine</span></div><div class="line" id="152159"><span class="nick" style="color:#8dd3c7"><a href="#152159" label="[15:21:59]">&lt;oriansj&gt;</a></span><span class="message">but the #include guard is causing string.h to not be included</span></div><div class="line" id="152411"><span class="nick" style="color:#8dd3c7"><a href="#152411" label="[15:24:11]">&lt;oriansj&gt;</a></span><span class="message">so something earlier is #including &lt;string.h&gt; and is inside of a block which is not being imported</span></div><div class="line" id="152434"><span class="nick" style="color:#6b8072"><a href="#152434" label="[15:24:34]">&lt;stikonas[m]&gt;</a></span><span class="message">uefi includes string.h stuff</span></div><div class="line" id="152448"><span class="nick" style="color:#6b8072"><a href="#152448" label="[15:24:48]">&lt;stikonas[m]&gt;</a></span><span class="message">It uses string functions a lot</span></div><div class="line" id="152456"><span class="nick" style="color:#8dd3c7"><a href="#152456" label="[15:24:56]">&lt;oriansj&gt;</a></span><span class="message">of course it does</span></div><div class="line" id="152501"><span class="nick" style="color:#6b8072"><a href="#152501" label="[15:25:01]">&lt;stikonas[m]&gt;</a></span><span class="message">And uefi is skipped by if guard</span></div><div class="line" id="152525"><span class="nick" style="color:#8dd3c7"><a href="#152525" label="[15:25:25]">&lt;oriansj&gt;</a></span><span class="message">I think we need to create a prototypes file just for UEFI</span></div><div class="line" id="152538"><span class="nick" style="color:#8dd3c7"><a href="#152538" label="[15:25:38]">&lt;oriansj&gt;</a></span><span class="message">that doesn't #include &lt;string.h&gt;</span></div><div class="line" id="152600"><span class="nick" style="color:#6b8072"><a href="#152600" label="[15:26:00]">&lt;stikonas[m]&gt;</a></span><span class="message">Hmm that might workaround the problem</span></div><div class="line" id="152719"><span class="nick" style="color:#8dd3c7"><a href="#152719" label="[15:27:19]">&lt;oriansj&gt;</a></span><span class="message">it is either that or I do a major rewrite of how M2-Mesoplanet expands C macros</span></div><div class="line" id="152736"><span class="nick" style="color:#6b8072"><a href="#152736" label="[15:27:36]">&lt;stikonas[m]&gt;</a></span><span class="message">Well former is simpler</span></div><div class="line" id="152749"><span class="nick" style="color:#6b8072"><a href="#152749" label="[15:27:49]">&lt;stikonas[m]&gt;</a></span><span class="message">Latter might be more useful longer term</span></div><div class="line" id="152901"><span class="nick" style="color:#8dd3c7"><a href="#152901" label="[15:29:01]">&lt;oriansj&gt;</a></span><span class="message">well, yes at that point we will have a C compiler at feature parity with TCC ;-p</span></div><div class="line" id="153359"><span class="nick" style="color:#8dd3c7"><a href="#153359" label="[15:33:59]">&lt;oriansj&gt;</a></span><span class="message">and buildable by M2-Planet</span></div><div class="line" id="153512"><span class="nick" style="color:#8dd3c7"><a href="#153512" label="[15:35:12]">&lt;oriansj&gt;</a></span><span class="message">which honestly would be very nice but it ultimately becomes a question of what level of complexity can we implement in M2-Planet before we exceed our ability to debug what we have created.</span></div><div class="line" id="153605"><span class="nick" style="color:#6b8072"><a href="#153605" label="[15:36:05]">&lt;stikonas[m]&gt;</a></span><span class="message">Yeah, debugging sometimes becomes a bit hard</span></div><div class="line" id="153908"><span class="nick" style="color:#8dd3c7"><a href="#153908" label="[15:39:08]">&lt;oriansj&gt;</a></span><span class="message">and C macros is a language more complex than the rest of the C language</span></div><div class="line" id="153930"><span class="nick" style="color:#8dd3c7"><a href="#153930" label="[15:39:30]">&lt;oriansj&gt;</a></span><span class="message">(as it is both is and is not white space sensitive)</span></div><div class="line" id="153953"><span class="nick" style="color:#6b8072"><a href="#153953" label="[15:39:53]">&lt;stikonas[m]&gt;</a></span><span class="message">And it's more like interpreter rather than compiler</span></div><div class="line" id="154157"><span class="nick" style="color:#8dd3c7"><a href="#154157" label="[15:41:57]">&lt;oriansj&gt;</a></span><span class="message">in some ways I think C would have been a better language if they just stuck to the M2-Planet C subset</span></div><div class="line" id="154516"><span class="nick" style="color:#8dd3c7"><a href="#154516" label="[15:45:16]">&lt;oriansj&gt;</a></span><span class="message">easy to reason around and debug</span></div><div class="line" id="154610"><span class="nick" style="color:#8dd3c7"><a href="#154610" label="[15:46:10]">&lt;oriansj&gt;</a></span><span class="message">once environmental variables got mixed in, then it only got more and more complex</span></div><div class="line" id="154944"><span class="nick" style="color:#8dd3c7"><a href="#154944" label="[15:49:44]">&lt;oriansj&gt;</a></span><span class="message">if one thinks about it; there is no reason one couldn't just do if(AARCH64 == ARCHITECTURE) {asm(..);} else if(AMD64 == ARCHITECTURE) .... ELSE {#ERROR(&quot;unsupported architecture&quot;)}</span></div><div class="line" id="155024"><span class="nick" style="color:#8dd3c7"><a href="#155024" label="[15:50:24]">&lt;oriansj&gt;</a></span><span class="message">then one doesn't even need #if, #ifdef, #ifndef or the like</span></div><div class="line" id="155130"><span class="nick" style="color:#8dd3c7"><a href="#155130" label="[15:51:30]">&lt;oriansj&gt;</a></span><span class="message">assuming you move the ugly special case into separate files</span></div><div class="line" id="155234"><span class="nick" style="color:#8dd3c7"><a href="#155234" label="[15:52:34]">&lt;oriansj&gt;</a></span><span class="message">(and the the different architectures disappear when one does dead code elimination)</span></div><div class="line" id="155315"><span class="nick" style="color:#389600"><a href="#155315" label="[15:53:15]">&lt;stikonas&gt;</a></span><span class="message">I guess historically people wanted to upload more computation to be compile time</span></div><div class="line" id="155318"><span class="nick" style="color:#389600"><a href="#155318" label="[15:53:18]">&lt;stikonas&gt;</a></span><span class="message">rather than runtime</span></div><div class="line" id="160619"><span class="nick" style="color:#8dd3c7"><a href="#160619" label="[16:06:19]">&lt;oriansj&gt;</a></span><span class="message">well deadcode elimination was compile time</span></div><div class="line" id="161223"><span class="nick" style="color:#8dd3c7"><a href="#161223" label="[16:12:23]">&lt;oriansj&gt;</a></span><span class="message">and it wasn't publish about until 1981 and C was created in 1972; so they might not have even known about it</span></div><div class="line" id="164726"><span class="nick" style="color:#6d2462"><a href="#164726" label="[16:47:26]">&lt;mihi&gt;</a></span><span class="message">oriansj, re &lt;<a rel="nofollow" href="https://logs.guix.gnu.org/bootstrappable/2022-12-31.log#062301">https://logs.guix.gnu.org/bootstrappable/2022-12-31.log#062301</a>&gt;:  I don't get what the memory model of this language is, and how it avoids the need of garbage collection. Also, it is unclear to me, how (if supported) open arrays (i.e. arrays of a size not known at compile time)  can be declared and defined, and how you would define a record type that contains one ore more pointers to</span></div><div class="line" id="164727"><span class="nick" style="color:#6d2462"><a href="#164727" label="[16:47:27]">&lt;mihi&gt;</a></span><span class="message">itself (like a linked list or tree).</span></div><div class="line" id="164819"><span class="nick" style="color:#6d2462"><a href="#164819" label="[16:48:19]">&lt;mihi&gt;</a></span><span class="message">And if you don't plan to add runtime support for S-expression lists, neither a macro preprocessor, I would advise against S-expressions and rather write a(b, c, d) instead of (a b c d). But probably that is just my personal taste.</span></div><div class="line" id="171150"><span class="nick" style="color:#8dd3c7"><a href="#171150" label="[17:11:50]">&lt;oriansj&gt;</a></span><span class="message">mihi: it is automatic garbage collected language but implementing the garbage collection isn't required for bootstrap implementations. (DEFINE foo (ARRAY variable)) [It just requires that variable is defined and evaluates to an integer type] (DEFINE list (RECORD (POINTER list next) (POINTER ANY payload))) [Probably should add those bits to the documentation]</span></div><div class="line" id="172304"><span class="nick" style="color:#8dd3c7"><a href="#172304" label="[17:23:04]">&lt;oriansj&gt;</a></span><span class="message">mihi: although part of me thinks ANY is a bad idea</span></div><div class="line" id="172443"><span class="nick" style="color:#8dd3c7"><a href="#172443" label="[17:24:43]">&lt;oriansj&gt;</a></span><span class="message">and one can also change the size of an array by just assigning it a new block (SET! foo (ARRAY variable))</span></div><div class="line" id="173416"><span class="nick" style="color:#8dd3c7"><a href="#173416" label="[17:34:16]">&lt;oriansj&gt;</a></span><span class="message">thinking about it I can probably eliminate the allocate</span></div><div class="line" id="174337"><span class="nick" style="color:#8dd3c7"><a href="#174337" label="[17:43:37]">&lt;oriansj&gt;</a></span><span class="message">markjenkinssksp: you may need to apply this patch <a rel="nofollow" href="https://paste.debian.net/1265877/">https://paste.debian.net/1265877/</a>  to your <a rel="nofollow" href="https://github.com/markjenkins/mes-m2-rewrite">https://github.com/markjenkins/mes-m2-rewrite</a>  if you want it to be buildable by newer GCCs</span></div><div class="line" id="180237"><span class="nick" style="color:#234e69"><a href="#180237" label="[18:02:37]">&lt;muurkha&gt;</a></span><span class="message">for bootstrap compilers you can get away with only deallocating when the program exits if you have gigabytes of RAM</span></div><div class="line" id="180354"><span class="nick" style="color:#234e69"><a href="#180354" label="[18:03:54]">&lt;muurkha&gt;</a></span><span class="message">#ifdef is simpler to implement than dead code elimination and is sometimes used for things like adding fields to structs which dead code elimination can't</span></div><div class="line" id="180448"><span class="nick" style="color:#234e69"><a href="#180448" label="[18:04:48]">&lt;muurkha&gt;</a></span><span class="message">agreed that the preprocessor is pretty messy; textual macro systems usually are</span></div><div class="line" id="180533"><span class="nick" style="color:#8dd3c7"><a href="#180533" label="[18:05:33]">&lt;oriansj&gt;</a></span><span class="message">muurkha: well one can work around that by just having different definitions in different files</span></div><div class="line" id="180538"><span class="nick" style="color:#234e69"><a href="#180538" label="[18:05:38]">&lt;muurkha&gt;</a></span><span class="message">yes</span></div><div class="line" id="183327"><span class="nick" style="color:#8dd3c7"><a href="#183327" label="[18:33:27]">&lt;oriansj&gt;</a></span><span class="message">muurkha: well one can get away with only deallocating on exit if one has tens megabytes of RAM and a language that knows to put things on the stack rather than the heap</span></div><div class="line" id="191523"><span class="nick" style="color:#389600"><a href="#191523" label="[19:15:23]">&lt;stikonas&gt;</a></span><span class="message">that's what we do in stage0-* too most of the time...</span></div><div class="line" id="191541"><span class="nick" style="color:#389600"><a href="#191541" label="[19:15:41]">&lt;stikonas&gt;</a></span><span class="message">in stage0-posix we rely on kernel to free up the memory</span></div><div class="line" id="191633"><span class="nick" style="color:#389600"><a href="#191633" label="[19:16:33]">&lt;stikonas&gt;</a></span><span class="message">and in stage0-uefi we deallocate the whole allocated block just before exit</span></div><div class="line" id="231358"><span class="nick" style="color:#8dd3c7"><a href="#231358" label="[23:13:58]">&lt;oriansj&gt;</a></span><span class="message">now to send out my new gnupg key (signed by my old one)</span></div><div class="line" id="235327"><span class="nick" style="color:#8dd3c7"><a href="#235327" label="[23:53:27]">&lt;oriansj&gt;</a></span><span class="message">ok, new 2023-2024 gpg git keys for me are now up</span></div><div class="line" id="235352"><span class="nick" style="color:#8dd3c7"><a href="#235352" label="[23:53:52]">&lt;oriansj&gt;</a></span><span class="message">(both github and sourcehut)</span></div><div class="line" id="235410"><span class="nick" style="color:#8dd3c7"><a href="#235410" label="[23:54:10]">&lt;oriansj&gt;</a></span><span class="message">as well as the usual public gpg key servers</span></div><div class="line" id="005051"><span class="nick" style="color:#389600"><a href="#005051" label="[00:50:51]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I'm a bit confused how you want to put string.h stuff into a separate header</span></div><div class="line" id="005131"><span class="nick" style="color:#389600"><a href="#005131" label="[00:51:31]">&lt;stikonas&gt;</a></span><span class="message">do we still include string.c?</span></div><div class="line" id="005220"><span class="nick" style="color:#389600"><a href="#005220" label="[00:52:20]">&lt;stikonas&gt;</a></span><span class="message">otherwise programs that don't include string.h at all (catm is one example) wouldn't build on UEFI</span></div><div class="line" id="005504"><span class="nick" style="color:#389600"><a href="#005504" label="[00:55:04]">&lt;stikonas&gt;</a></span><span class="message">and including only string.c doesn't help...</span></div><div class="line" id="005523"><span class="nick" style="color:#389600"><a href="#005523" label="[00:55:23]">&lt;stikonas&gt;</a></span><span class="message">I could possibly copy the whole implementation of those functions into UEFI header</span></div><div class="line" id="005529"><span class="nick" style="color:#389600"><a href="#005529" label="[00:55:29]">&lt;stikonas&gt;</a></span><span class="message">not just declarations</span></div><div class="line" id="005829"><span class="nick" style="color:#389600"><a href="#005829" label="[00:58:29]">&lt;stikonas&gt;</a></span><span class="message">it somewhat ugly but maybe we have to live with it</span></div><div class="line" id="010144"><span class="nick" style="color:#389600"><a href="#010144" label="[01:01:44]">&lt;stikonas&gt;</a></span><span class="message">ok, that does seem to work</span></div><div class="line" id="010257"><span class="nick" style="color:#389600"><a href="#010257" label="[01:02:57]">&lt;stikonas&gt;</a></span><span class="message">oriansj: <a rel="nofollow" href="https://github.com/oriansj/M2libc/pull/43">https://github.com/oriansj/M2libc/pull/43</a> </span></div><div class="line" id="010303"><span class="nick" style="color:#389600"><a href="#010303" label="[01:03:03]">&lt;stikonas&gt;</a></span><span class="message">tested it on both stage0-uefi and stage0-posix</span></div><div class="line" id="023804"><span class="nick" style="color:#8dd3c7"><a href="#023804" label="[02:38:04]">&lt;oriansj&gt;</a></span><span class="message">stikonas: merged</span></div><div class="line" id="023812"><span class="nick" style="color:#8dd3c7"><a href="#023812" label="[02:38:12]">&lt;oriansj&gt;</a></span><span class="message">(I may refine it a bit</span></div><div class="line" id="023816"><span class="nick" style="color:#8dd3c7"><a href="#023816" label="[02:38:16]">&lt;oriansj&gt;</a></span><span class="message">)</span></div><div class="line" id="023819"><span class="nick" style="color:#389600"><a href="#023819" label="[02:38:19]">&lt;stikonas&gt;</a></span><span class="message">thanks, I saw, double checkin stage0-posix now</span></div><div class="line" id="023821"><span class="nick" style="color:#389600"><a href="#023821" label="[02:38:21]">&lt;stikonas&gt;</a></span><span class="message">to update it</span></div><div class="line" id="023832"><span class="nick" style="color:#389600"><a href="#023832" label="[02:38:32]">&lt;stikonas&gt;</a></span><span class="message">sure, feel free to make any changes</span></div><div class="line" id="023849"><span class="nick" style="color:#389600"><a href="#023849" label="[02:38:49]">&lt;stikonas&gt;</a></span><span class="message">I suspect we might also have similar problems with some other headers</span></div><div class="line" id="023857"><span class="nick" style="color:#389600"><a href="#023857" label="[02:38:57]">&lt;stikonas&gt;</a></span><span class="message">i.e. ctype.h</span></div><div class="line" id="023907"><span class="nick" style="color:#389600"><a href="#023907" label="[02:39:07]">&lt;stikonas&gt;</a></span><span class="message">but right now nothing outside uefi uses it</span></div><div class="line" id="023935"><span class="nick" style="color:#8dd3c7"><a href="#023935" label="[02:39:35]">&lt;oriansj&gt;</a></span><span class="message">I can remove that problem by being exact on what actually is needed by UEFI</span></div><div class="line" id="024008"><span class="nick" style="color:#8dd3c7"><a href="#024008" label="[02:40:08]">&lt;oriansj&gt;</a></span><span class="message">(probably by making a UEFI_bootstrap.h)</span></div><div class="line" id="024252"><span class="nick" style="color:#389600"><a href="#024252" label="[02:42:52]">&lt;stikonas&gt;</a></span><span class="message">and probably we can then just include it from uefi.c</span></div><div class="line" id="024546"><span class="nick" style="color:#8dd3c7"><a href="#024546" label="[02:45:46]">&lt;oriansj&gt;</a></span><span class="message">indeed</span></div><div class="line" id="024625"><span class="nick" style="color:#8dd3c7"><a href="#024625" label="[02:46:25]">&lt;oriansj&gt;</a></span><span class="message">which should prevent UEFI from having further impacts on POSIX</span></div><div class="line" id="024645"><span class="nick" style="color:#389600"><a href="#024645" label="[02:46:45]">&lt;stikonas&gt;</a></span><span class="message">oriansj: what about if we completely disentangle standard includes and extra includes (such as uefi/unistd.c or amd64/linux/unistd.c) ?</span></div><div class="line" id="024741"><span class="nick" style="color:#389600"><a href="#024741" label="[02:47:41]">&lt;stikonas&gt;</a></span><span class="message">and then make M2-Mesoplanet inlclude another file with arch/os specific includes based on --operating-system and --arch</span></div><div class="line" id="024745"><span class="nick" style="color:#389600"><a href="#024745" label="[02:47:45]">&lt;stikonas&gt;</a></span><span class="message">or is that too complicated?</span></div><div class="line" id="024753"><span class="nick" style="color:#8dd3c7"><a href="#024753" label="[02:47:53]">&lt;oriansj&gt;</a></span><span class="message">well we don't need full duplicates for UEFI</span></div><div class="line" id="024807"><span class="nick" style="color:#8dd3c7"><a href="#024807" label="[02:48:07]">&lt;oriansj&gt;</a></span><span class="message">only the handful of core functions actually used</span></div><div class="line" id="024825"><span class="nick" style="color:#389600"><a href="#024825" label="[02:48:25]">&lt;stikonas&gt;</a></span><span class="message">well, quite a bit of stuff from string.c though</span></div><div class="line" id="024839"><span class="nick" style="color:#8dd3c7"><a href="#024839" label="[02:48:39]">&lt;oriansj&gt;</a></span><span class="message">understandably</span></div><div class="line" id="024953"><span class="nick" style="color:#8dd3c7"><a href="#024953" label="[02:49:53]">&lt;oriansj&gt;</a></span><span class="message">and something I am going to have to be very careful with.</span></div><div class="line" id="035536"><span class="nick" style="color:#8dd3c7"><a href="#035536" label="[03:55:36]">&lt;oriansj&gt;</a></span><span class="message">should I expand bootstrappable.c's strtoint to also support scheme format octal/hex/binary string formats?</span></div><div class="line" id="035626"><span class="nick" style="color:#234e69"><a href="#035626" label="[03:56:26]">&lt;muurkha&gt;</a></span><span class="message">oriansj: yeah, Ur-Scheme puts a lot of things on the stack, but I think probably even if it put all its local variables and everything on the heap it would still be able to compile itself</span></div><div class="line" id="035914"><span class="nick" style="color:#8dd3c7"><a href="#035914" label="[03:59:14]">&lt;oriansj&gt;</a></span><span class="message">muurkha: well given a 64bit address space and enough RAM, I don't doubt it</span></div><div class="line" id="041956"><span class="nick" style="color:#234e69"><a href="#041956" label="[04:19:56]">&lt;muurkha&gt;</a></span><span class="message">I think you could probably do even in32 bits</span></div><div class="line" id="042344"><span class="nick" style="color:#8dd3c7"><a href="#042344" label="[04:23:44]">&lt;oriansj&gt;</a></span><span class="message">for something as complex as Ur-Scheme, potentially for something as complex as Haskell =&gt; nope</span></div><div class="line" id="042429"><span class="nick" style="color:#8dd3c7"><a href="#042429" label="[04:24:29]">&lt;oriansj&gt;</a></span><span class="message">^for^. For^</span></div><div class="line" id="042442"><span class="nick" style="color:#234e69"><a href="#042442" label="[04:24:42]">&lt;muurkha&gt;</a></span><span class="message">I think I agree</span></div><div class="line" id="042504"><span class="nick" style="color:#234e69"><a href="#042504" label="[04:25:04]">&lt;muurkha&gt;</a></span><span class="message">OTOH stack-allocating data for a lazy language like Haskell is a lot more complicated</span></div><div class="line" id="042551"><span class="nick" style="color:#234e69"><a href="#042551" label="[04:25:51]">&lt;muurkha&gt;</a></span><span class="message">I did do a combinator-graph-reduction compiler for the λ-calculus a few years back, but I did it in JS, so I got GC for free</span></div><div class="line" id="042601"><span class="nick" style="color:#234e69"><a href="#042601" label="[04:26:01]">&lt;muurkha&gt;</a></span><span class="message">I think I linked it earlier</span></div><div class="line" id="042648"><span class="nick" style="color:#8dd3c7"><a href="#042648" label="[04:26:48]">&lt;oriansj&gt;</a></span><span class="message">(always be free to share you work ^_^ )</span></div><div class="line" id="042818"><span class="nick" style="color:#8dd3c7"><a href="#042818" label="[04:28:18]">&lt;oriansj&gt;</a></span><span class="message">hmmm quasiquote, unquote and unquote_splicing do you think they would be worth the complexity?</span></div><div class="line" id="043530"><span class="nick" style="color:#8dd3c7"><a href="#043530" label="[04:35:30]">&lt;oriansj&gt;</a></span><span class="message">lets try without, I can always add it in prior to doing the assembly version</span></div><div class="line" id="043927"><span class="nick" style="color:#234e69"><a href="#043927" label="[04:39:27]">&lt;muurkha&gt;</a></span><span class="message">qq is pretty great for macros, but I'm not sure how highly to value macros, not having enough experience with Lisp</span></div><div class="line" id="044008"><span class="nick" style="color:#8dd3c7"><a href="#044008" label="[04:40:08]">&lt;oriansj&gt;</a></span><span class="message">well line macros are great for assembly</span></div><div class="line" id="044029"><span class="nick" style="color:#8dd3c7"><a href="#044029" label="[04:40:29]">&lt;oriansj&gt;</a></span><span class="message">I'm growing hate for C style macros</span></div><div class="line" id="044302"><span class="nick" style="color:#8dd3c7"><a href="#044302" label="[04:43:02]">&lt;oriansj&gt;</a></span><span class="message">hygienic macros have the potential to be useful (assuming they are rarely used and with considerable care) Reader macros however seem like a demon temptation box that scrambles everything so no one knows what the source code actually says</span></div><div class="line" id="044753"><span class="nick" style="color:#234e69"><a href="#044753" label="[04:47:53]">&lt;muurkha&gt;</a></span><span class="message">I meant Lisp-style macros that provide new special forms, not string macros or reader macros</span></div><div class="line" id="044802"><span class="nick" style="color:#234e69"><a href="#044802" label="[04:48:02]">&lt;muurkha&gt;</a></span><span class="message">without hygiene</span></div><div class="line" id="044812"><span class="nick" style="color:#234e69"><a href="#044812" label="[04:48:12]">&lt;muurkha&gt;</a></span><span class="message">because qq doesn't give you hygiene</span></div><div class="line" id="045111"><span class="nick" style="color:#8dd3c7"><a href="#045111" label="[04:51:11]">&lt;oriansj&gt;</a></span><span class="message">fair enough (thank you for clarifying)</span></div><div class="line" id="045313"><span class="nick" style="color:#234e69"><a href="#045313" label="[04:53:13]">&lt;muurkha&gt;</a></span><span class="message">I don't know what to opine about hygienic macros vs. syntactic closures vs. Common-Lisp-style conventional macros except that evidently there are smart people who know more about macros than I do who think that each of the three is the best option</span></div><div class="line" id="045436"><span class="nick" style="color:#234e69"><a href="#045436" label="[04:54:36]">&lt;muurkha&gt;</a></span><span class="message">C-style macros pack an enormous amount of expressiveness into a tiny package; IIRC the GPT macro preprocessor was something ridiculously tiny like 300 instructions.  but it's also an insanely bug-prone package, which is not great for making a trustworthy bootstrap</span></div><div class="line" id="045456"><span class="nick" style="color:#234e69"><a href="#045456" label="[04:54:56]">&lt;muurkha&gt;</a></span><span class="message">because bug-prone also means bugdoor-prone</span></div><div class="line" id="045712"><span class="nick" style="color:#8dd3c7"><a href="#045712" label="[04:57:12]">&lt;oriansj&gt;</a></span><span class="message">well every macro type has a use case which it is the best choice. Just like how different scoping systems have cases where they are the best choice. But I'd argue, that it is all people trying to justify their preferences.</span></div><div class="line" id="045851"><span class="nick" style="color:#8dd3c7"><a href="#045851" label="[04:58:51]">&lt;oriansj&gt;</a></span><span class="message">but we have studies and know lexical scope and hygienic macros are much easier for humans to correctly interpret the code and accurately prediction resulting behavior.</span></div><div class="line" id="050909"><span class="nick" style="color:#234e69"><a href="#050909" label="[05:09:09]">&lt;muurkha&gt;</a></span><span class="message">plausible!</span></div><div class="line" id="050921"><span class="nick" style="color:#234e69"><a href="#050921" label="[05:09:21]">&lt;muurkha&gt;</a></span><span class="message">I haven't seen the studies comparing hygienic macros with other kinds of Lisp macros</span></div><div class="line" id="051013"><span class="nick" style="color:#234e69"><a href="#051013" label="[05:10:13]">&lt;muurkha&gt;</a></span><span class="message">the contra on the hygienic-macros side is that they're orders of magnitude more difficult to implement than CL-style macros</span></div><div class="line" id="051049"><span class="nick" style="color:#234e69"><a href="#051049" label="[05:10:49]">&lt;muurkha&gt;</a></span><span class="message">(also you need to be able to poke holes in the hygiene sometimes, but that's easy to add)</span></div><div class="line" id="064357"><span class="nick" style="color:#6c3d55"><a href="#064357" label="[06:43:57]">&lt;rillian&gt;</a></span><span class="message">does kaem (the programme name) stand for anything?</span></div><div class="line" id="064407"><span class="nick" style="color:#6c3d55"><a href="#064407" label="[06:44:07]">&lt;rillian&gt;</a></span><span class="message">I noticed it's an anagram for 'make'</span></div><div class="line" id="114846"><span class="nick" style="color:#6b8072"><a href="#114846" label="[11:48:46]">&lt;stikonas[m]&gt;</a></span><span class="message">rillian: yes, it's just anagram for make</span></div><div class="line" id="132504"><span class="nick" style="color:#8dd3c7"><a href="#132504" label="[13:25:04]">&lt;oriansj&gt;</a></span><span class="message">rillian: it stands for the users. /tron and in spoken form it is pronounced &quot;common&quot; as its job is just to provide the functionality common in every shell. (aka the spawning of programs with arguments)</span></div><div class="line" id="132713"><span class="nick" style="color:#8dd3c7"><a href="#132713" label="[13:27:13]">&lt;oriansj&gt;</a></span><span class="message">I have yet to figure out a clever backronym for it yet (feel free to pitch names)</span></div><div class="line" id="162347"><span class="nick" style="color:#6c3d55"><a href="#162347" label="[16:23:47]">&lt;rillian&gt;</a></span><span class="message">stikonas[m], oriansj: :)</span></div><div class="line" id="165411"><span class="nick" style="color:#80b1d3"><a href="#165411" label="[16:54:11]">&lt;drakonis&gt;</a></span><span class="message">oriansj: how does it feel that more languages now have bootstrapping paths?</span></div><div class="line" id="165419"><span class="nick" style="color:#80b1d3"><a href="#165419" label="[16:54:19]">&lt;drakonis&gt;</a></span><span class="message">lean4 has a stage0 compiler in c++</span></div><div class="line" id="194407"><span class="nick" style="color:#8dd3c7"><a href="#194407" label="[19:44:07]">&lt;oriansj&gt;</a></span><span class="message">drakonis: I'm always excited to see progress</span></div><div class="line" id="203652"><span class="nick" style="color:#389600"><a href="#203652" label="[20:36:52]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I've tested <a rel="nofollow" href="https://github.com/oriansj/M2libc/pull/17">https://github.com/oriansj/M2libc/pull/17</a>  and that PR does fix mkdir and rm on AArch64 (there is a third somewhat broken commit about mknod but that is less useful anyway as we have no users of mknod syscall)</span></div><div class="line" id="203716"><span class="nick" style="color:#389600"><a href="#203716" label="[20:37:16]">&lt;stikonas&gt;</a></span><span class="message">maybe it's worth just cherry-picking 2 working commits?</span></div><br /></div></body></html>