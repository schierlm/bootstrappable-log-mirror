<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-05-12.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="003615"><span class="nick" style="color:#8dd3c7"><a href="#003615" label="[00:36:15]">&lt;achaninja&gt;</a></span><span class="message">ekaitz: yeah I'm using cproc and qbe because I know the authors of both</span></div><div class="line" id="003720"><span class="nick" style="color:#2e2a4a"><a href="#003720" label="[00:37:20]">&lt;ekaitz&gt;</a></span><span class="message">achaninja: they did a nice job on that. I really like the ideas behind those projects</span></div><div class="line" id="004413"><span class="nick" style="color:#6b8072"><a href="#004413" label="[00:44:13]">&lt;stikonas&gt;</a></span><span class="message">well, I guess right now cproc and qbe are alternatives to newer tcc versions</span></div><div class="line" id="004421"><span class="nick" style="color:#6b8072"><a href="#004421" label="[00:44:21]">&lt;stikonas&gt;</a></span><span class="message">for now one still has to go via tcc-0.9.26</span></div><div class="line" id="004506"><span class="nick" style="color:#6b8072"><a href="#004506" label="[00:45:06]">&lt;stikonas&gt;</a></span><span class="message">it would become very interesting if at some point cproc/qbe could be build with mescc</span></div><div class="line" id="005400"><span class="nick" style="color:#80b1d3"><a href="#005400" label="[00:54:00]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: looks very promising and I am very glad you selected <a rel="nofollow" href="https://www.gnu.org/licenses/license-list.html">https://www.gnu.org/licenses/license-list.html</a>  compatible licensing.</span></div><div class="line" id="005825"><span class="nick" style="color:#6d2462"><a href="#005825" label="[00:58:25]">&lt;rickmasters&gt;</a></span><span class="message">thanks, i am flexible on licensing</span></div><div class="line" id="005938"><span class="nick" style="color:#6b8072"><a href="#005938" label="[00:59:38]">&lt;stikonas&gt;</a></span><span class="message">I guess the same license applies to wrappe scripts in top level directory of boot2now?</span></div><div class="line" id="010028"><span class="nick" style="color:#80b1d3"><a href="#010028" label="[01:00:28]">&lt;oriansj&gt;</a></span><span class="message">The use of hex0 is impressive to say the least; especially when if I am reading this correctly, you could be bootstrapped by <a rel="nofollow" href="https://github.com/nanochess/bootOS">https://github.com/nanochess/bootOS</a> </span></div><div class="line" id="010113"><span class="nick" style="color:#6d2462"><a href="#010113" label="[01:01:13]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: yes, whoops i neglected to add the notices, will do so</span></div><div class="line" id="010145"><span class="nick" style="color:#6b8072"><a href="#010145" label="[01:01:45]">&lt;stikonas&gt;</a></span><span class="message">initially I even neglecged to look at notices...</span></div><div class="line" id="010333"><span class="nick" style="color:#6b8072"><a href="#010333" label="[01:03:33]">&lt;stikonas&gt;</a></span><span class="message">oriansj: bootOS for typing in source?</span></div><div class="line" id="010351"><span class="nick" style="color:#6b8072"><a href="#010351" label="[01:03:51]">&lt;stikonas&gt;</a></span><span class="message">i.e. something like monitor program</span></div><div class="line" id="010413"><span class="nick" style="color:#6d2462"><a href="#010413" label="[01:04:13]">&lt;rickmasters&gt;</a></span><span class="message">orianjs: i provided a 384 byte bootstrap so i guess it depends on the goals</span></div><div class="line" id="010429"><span class="nick" style="color:#6b8072"><a href="#010429" label="[01:04:29]">&lt;stikonas&gt;</a></span><span class="message">that's why I'm a bit confused...</span></div><div class="line" id="010449"><span class="nick" style="color:#6b8072"><a href="#010449" label="[01:04:49]">&lt;stikonas&gt;</a></span><span class="message">it's not clear to me why we need bootOS</span></div><div class="line" id="010546"><span class="nick" style="color:#80b1d3"><a href="#010546" label="[01:05:46]">&lt;oriansj&gt;</a></span><span class="message">stikonas: we don't need it but it is another route to build the hex0</span></div><div class="line" id="010641"><span class="nick" style="color:#6b8072"><a href="#010641" label="[01:06:41]">&lt;stikonas&gt;</a></span><span class="message">oh you mean bootOS-&gt;hex0  and do builder-hex0.hex0-&gt;builder-hex0.img</span></div><div class="line" id="010709"><span class="nick" style="color:#80b1d3"><a href="#010709" label="[01:07:09]">&lt;oriansj&gt;</a></span><span class="message">as in the hex0 in builder-hex0.hex0 could be built by bootOS</span></div><div class="line" id="010730"><span class="nick" style="color:#6b8072"><a href="#010730" label="[01:07:30]">&lt;stikonas&gt;</a></span><span class="message">oriansj: anyway, with builder-hex0 you probably won't have to worry about writing kernel in assembly. Next kernel can be written in M2-Planet subset</span></div><div class="line" id="010757"><span class="nick" style="color:#80b1d3"><a href="#010757" label="[01:07:57]">&lt;oriansj&gt;</a></span><span class="message">stikonas: oh yeah</span></div><div class="line" id="010810"><span class="nick" style="color:#6b8072"><a href="#010810" label="[01:08:10]">&lt;stikonas&gt;</a></span><span class="message">though I think you said M2-Planet subset is still a bit annoying to write kernels in</span></div><div class="line" id="010905"><span class="nick" style="color:#6b8072"><a href="#010905" label="[01:09:05]">&lt;stikonas&gt;</a></span><span class="message">or maybe we get lucky and mes-m2 runs on builder-hex0</span></div><div class="line" id="010910"><span class="nick" style="color:#6b8072"><a href="#010910" label="[01:09:10]">&lt;stikonas&gt;</a></span><span class="message">I haven't tried yet</span></div><div class="line" id="010951"><span class="nick" style="color:#234e69"><a href="#010951" label="[01:09:51]">&lt;doras&gt;</a></span><span class="message">stikonas: I see that the permissions are different all the way to guile-3.0.7_0.x86.xbps.</span></div><div class="line" id="011000"><span class="nick" style="color:#234e69"><a href="#011000" label="[01:10:00]">&lt;doras&gt;</a></span><span class="message">So... something is fishy here.</span></div><div class="line" id="011001"><span class="nick" style="color:#80b1d3"><a href="#011001" label="[01:10:01]">&lt;oriansj&gt;</a></span><span class="message">well mes.c does require a couple more syscalls than what was listed.</span></div><div class="line" id="011049"><span class="nick" style="color:#6b8072"><a href="#011049" label="[01:10:49]">&lt;stikonas&gt;</a></span><span class="message">oriansj: do you remember which syscalls?</span></div><div class="line" id="011059"><span class="nick" style="color:#6b8072"><a href="#011059" label="[01:10:59]">&lt;stikonas&gt;</a></span><span class="message">maybe they are not essential</span></div><div class="line" id="011111"><span class="nick" style="color:#6b8072"><a href="#011111" label="[01:11:11]">&lt;stikonas&gt;</a></span><span class="message">at least some of that was just detecting interactive mode</span></div><div class="line" id="011119"><span class="nick" style="color:#6d2462"><a href="#011119" label="[01:11:19]">&lt;rickmasters&gt;</a></span><span class="message">even hex2 would be a lot easier than hex0, those jumps...</span></div><div class="line" id="011209"><span class="nick" style="color:#6b8072"><a href="#011209" label="[01:12:09]">&lt;stikonas&gt;</a></span><span class="message">oh yes, I'm well aware of that...</span></div><div class="line" id="011221"><span class="nick" style="color:#6b8072"><a href="#011221" label="[01:12:21]">&lt;stikonas&gt;</a></span><span class="message">I added riscv support in stage0-posix</span></div><div class="line" id="011233"><span class="nick" style="color:#6b8072"><a href="#011233" label="[01:12:33]">&lt;stikonas&gt;</a></span><span class="message">actaully even hex1 is alright</span></div><div class="line" id="011247"><span class="nick" style="color:#6b8072"><a href="#011247" label="[01:12:47]">&lt;stikonas&gt;</a></span><span class="message">you are just limitted to smaller programs</span></div><div class="line" id="011308"><span class="nick" style="color:#6b8072"><a href="#011308" label="[01:13:08]">&lt;stikonas&gt;</a></span><span class="message">I guess for kernel hex1 is too simple</span></div><div class="line" id="011403"><span class="nick" style="color:#6b8072"><a href="#011403" label="[01:14:03]">&lt;stikonas&gt;</a></span><span class="message">and builder-hex0 is maybe three times as big as hex0+kaem-optional-seed</span></div><div class="line" id="011501"><span class="nick" style="color:#80b1d3"><a href="#011501" label="[01:15:01]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: M0 is even a viable option for bare metal</span></div><div class="line" id="011543"><span class="nick" style="color:#6b8072"><a href="#011543" label="[01:15:43]">&lt;stikonas&gt;</a></span><span class="message">yes, but since builder-hex0 can go to at least M2-Mesoplanet we don't need to use M0 later</span></div><div class="line" id="011557"><span class="nick" style="color:#6b8072"><a href="#011557" label="[01:15:57]">&lt;stikonas&gt;</a></span><span class="message">well, at least for x86...</span></div><div class="line" id="011716"><span class="nick" style="color:#6d2462"><a href="#011716" label="[01:17:16]">&lt;rickmasters&gt;</a></span><span class="message">it seems like a kernel would have a mix of assembly and higher level</span></div><div class="line" id="011859"><span class="nick" style="color:#6d2462"><a href="#011859" label="[01:18:59]">&lt;rickmasters&gt;</a></span><span class="message">i don't know enough about the syscall requirements beyond stage0-posix</span></div><div class="line" id="011859"><span class="nick" style="color:#80b1d3"><a href="#011859" label="[01:18:59]">&lt;oriansj&gt;</a></span><span class="message">well M2-Mesolplanet does support inline assembly so we can definitely do a Kernel in it</span></div><div class="line" id="012128"><span class="nick" style="color:#6d2462"><a href="#012128" label="[01:21:28]">&lt;rickmasters&gt;</a></span><span class="message">builder-hex0 does not really implement chmod or access so they would need to be reimplemented as well</span></div><div class="line" id="012212"><span class="nick" style="color:#80b1d3"><a href="#012212" label="[01:22:12]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: chmod+access would only matter if we needed them for the filesystem we would be working with.</span></div><div class="line" id="012219"><span class="nick" style="color:#6d2462"><a href="#012219" label="[01:22:19]">&lt;rickmasters&gt;</a></span><span class="message">the file system is ... primitive, probably needs a rewrite - you can't really expand a file after closing it</span></div><div class="line" id="012238"><span class="nick" style="color:#80b1d3"><a href="#012238" label="[01:22:38]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: that isn't an issue for us</span></div><div class="line" id="012337"><span class="nick" style="color:#80b1d3"><a href="#012337" label="[01:23:37]">&lt;oriansj&gt;</a></span><span class="message">mescc just does a single write as well</span></div><div class="line" id="012350"><span class="nick" style="color:#80b1d3"><a href="#012350" label="[01:23:50]">&lt;oriansj&gt;</a></span><span class="message">TCC and above however would be an issue</span></div><div class="line" id="012427"><span class="nick" style="color:#80b1d3"><a href="#012427" label="[01:24:27]">&lt;oriansj&gt;</a></span><span class="message">and I was thinking of <a rel="nofollow" href="https://github.com/oriansj/GFK">https://github.com/oriansj/GFK</a>  a filesystem one could write by hand</span></div><div class="line" id="012444"><span class="nick" style="color:#6d2462"><a href="#012444" label="[01:24:44]">&lt;rickmasters&gt;</a></span><span class="message">i thought i read somewhere here that tar was capturing file modes and affecting checksums</span></div><div class="line" id="012730"><span class="nick" style="color:#6b8072"><a href="#012730" label="[01:27:30]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: yes, recently live-bootstrap switched to creating some hand-rolled packages</span></div><div class="line" id="012754"><span class="nick" style="color:#6b8072"><a href="#012754" label="[01:27:54]">&lt;stikonas&gt;</a></span><span class="message">basically just .tar.bz2 with contents of make install DESTDIR=/tmp/destdir</span></div><div class="line" id="012813"><span class="nick" style="color:#6b8072"><a href="#012813" label="[01:28:13]">&lt;stikonas&gt;</a></span><span class="message">rather than just checksumming binary files</span></div><div class="line" id="012842"><span class="nick" style="color:#6b8072"><a href="#012842" label="[01:28:42]">&lt;stikonas&gt;</a></span><span class="message">but with old tar the problem is that order is not deterministic</span></div><div class="line" id="012902"><span class="nick" style="color:#6b8072"><a href="#012902" label="[01:29:02]">&lt;stikonas&gt;</a></span><span class="message">seems to work fine in tmpfs but if you run it outside tmpfs, the order might be different</span></div><div class="line" id="012909"><span class="nick" style="color:#6b8072"><a href="#012909" label="[01:29:09]">&lt;stikonas&gt;</a></span><span class="message">that's what doras is struggling with</span></div><div class="line" id="012951"><span class="nick" style="color:#6d2462"><a href="#012951" label="[01:29:51]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: are you open to changing tar?</span></div><div class="line" id="013019"><span class="nick" style="color:#6d2462"><a href="#013019" label="[01:30:19]">&lt;rickmasters&gt;</a></span><span class="message">sitkonas: or do you try to stick to the originals?</span></div><div class="line" id="013026"><span class="nick" style="color:#6b8072"><a href="#013026" label="[01:30:26]">&lt;stikonas&gt;</a></span><span class="message">in principle yes, we use patches in live-bootstrap</span></div><div class="line" id="013038"><span class="nick" style="color:#6b8072"><a href="#013038" label="[01:30:38]">&lt;stikonas&gt;</a></span><span class="message">but that might not be the easiest solution</span></div><div class="line" id="013054"><span class="nick" style="color:#6b8072"><a href="#013054" label="[01:30:54]">&lt;stikonas&gt;</a></span><span class="message">so right now we start with tar 1.12</span></div><div class="line" id="013104"><span class="nick" style="color:#6b8072"><a href="#013104" label="[01:31:04]">&lt;stikonas&gt;</a></span><span class="message">that's the latest tar that can be built with mes libc</span></div><div class="line" id="013141"><span class="nick" style="color:#6b8072"><a href="#013141" label="[01:31:41]">&lt;stikonas&gt;</a></span><span class="message">fossy tried to add this as workaround for sorting <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysa/helpers.sh#L40">https://github.com/fosslinux/live-bootstrap/blob/master/sysa/helpers.sh#L40</a> </span></div><div class="line" id="013232"><span class="nick" style="color:#6b8072"><a href="#013232" label="[01:32:32]">&lt;stikonas&gt;</a></span><span class="message">but then we still have an issue with permissions if one tries to run everything rootless</span></div><div class="line" id="013249"><span class="nick" style="color:#6d2462"><a href="#013249" label="[01:32:49]">&lt;rickmasters&gt;</a></span><span class="message">i should also mention that builder-hex0 only supports one outstanding child with fork, if anything forks a lot (like make), it won't work</span></div><div class="line" id="013302"><span class="nick" style="color:#6b8072"><a href="#013302" label="[01:33:02]">&lt;stikonas&gt;</a></span><span class="message">well, make is only useful after tcc</span></div><div class="line" id="013320"><span class="nick" style="color:#6b8072"><a href="#013320" label="[01:33:20]">&lt;stikonas&gt;</a></span><span class="message">and tcc is already too complicated for builder-hex0</span></div><div class="line" id="013341"><span class="nick" style="color:#6b8072"><a href="#013341" label="[01:33:41]">&lt;stikonas&gt;</a></span><span class="message">I was actually thinking of moving make immediately after tcc in live-bootstrap</span></div><div class="line" id="013352"><span class="nick" style="color:#6b8072"><a href="#013352" label="[01:33:52]">&lt;stikonas&gt;</a></span><span class="message">that was before I've read builder-hex0</span></div><div class="line" id="013405"><span class="nick" style="color:#6b8072"><a href="#013405" label="[01:34:05]">&lt;stikonas&gt;</a></span><span class="message">*read about</span></div><div class="line" id="013405"><span class="nick" style="color:#6b8072"><a href="#013405" label="[01:34:05]">&lt;stikonas&gt;</a></span><span class="message">but I guess that's still fine</span></div><div class="line" id="013502"><span class="nick" style="color:#6b8072"><a href="#013502" label="[01:35:02]">&lt;stikonas&gt;</a></span><span class="message">I've also experimented a bit with newer tar 1.13 (haven't tried even newer ones)</span></div><div class="line" id="013511"><span class="nick" style="color:#6b8072"><a href="#013511" label="[01:35:11]">&lt;stikonas&gt;</a></span><span class="message">tar 1.13 is missing two functions in meslibc</span></div><div class="line" id="013531"><span class="nick" style="color:#6d2462"><a href="#013531" label="[01:35:31]">&lt;rickmasters&gt;</a></span><span class="message">a much more capable kernel beyond builder-hex0 would be needed for make</span></div><div class="line" id="013535"><span class="nick" style="color:#6b8072"><a href="#013535" label="[01:35:35]">&lt;stikonas&gt;</a></span><span class="message">strtoumax and strncasecmp</span></div><div class="line" id="013601"><span class="nick" style="color:#6b8072"><a href="#013601" label="[01:36:01]">&lt;stikonas&gt;</a></span><span class="message">yes, but from what oriansj said, even tcc wouldn't run on builder-hex0</span></div><div class="line" id="013616"><span class="nick" style="color:#6b8072"><a href="#013616" label="[01:36:16]">&lt;stikonas&gt;</a></span><span class="message">so as long as we keep make after tcc, we should be fine</span></div><div class="line" id="013629"><span class="nick" style="color:#6b8072"><a href="#013629" label="[01:36:29]">&lt;stikonas&gt;</a></span><span class="message">and wouldn't add any additional constraints</span></div><div class="line" id="013708"><span class="nick" style="color:#6b8072"><a href="#013708" label="[01:37:08]">&lt;stikonas&gt;</a></span><span class="message">well, in bootstrap we deliberately used few syscalls early on</span></div><div class="line" id="013740"><span class="nick" style="color:#6b8072"><a href="#013740" label="[01:37:40]">&lt;stikonas&gt;</a></span><span class="message">e.g. kaem does not use dup or any other similar stuff</span></div><div class="line" id="013812"><span class="nick" style="color:#6b8072"><a href="#013812" label="[01:38:12]">&lt;stikonas&gt;</a></span><span class="message">we can't implement $(command) then but at least it can run on simple kernel</span></div><div class="line" id="013824"><span class="nick" style="color:#6d2462"><a href="#013824" label="[01:38:24]">&lt;rickmasters&gt;</a></span><span class="message">yes, i was surprised how for it got on so few syscalls</span></div><div class="line" id="013825"><span class="nick" style="color:#6b8072"><a href="#013825" label="[01:38:25]">&lt;stikonas&gt;</a></span><span class="message">we only start using pipes once we reach bash</span></div><div class="line" id="013853"><span class="nick" style="color:#6b8072"><a href="#013853" label="[01:38:53]">&lt;stikonas&gt;</a></span><span class="message">before that scripting does not use &quot;tar xzf&quot; but uses two steps (unpack and untar)</span></div><div class="line" id="013921"><span class="nick" style="color:#6b8072"><a href="#013921" label="[01:39:21]">&lt;stikonas&gt;</a></span><span class="message">but it was still a bit of guess work since we didn't have any kernel</span></div><div class="line" id="013950"><span class="nick" style="color:#6b8072"><a href="#013950" label="[01:39:50]">&lt;stikonas&gt;</a></span><span class="message">just in general attempted not to use complex stuff</span></div><div class="line" id="014346"><span class="nick" style="color:#6b8072"><a href="#014346" label="[01:43:46]">&lt;stikonas&gt;</a></span><span class="message">fossy: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/159">https://github.com/fosslinux/live-bootstrap/pull/159</a> </span></div><div class="line" id="014427"><span class="nick" style="color:#6d2462"><a href="#014427" label="[01:44:27]">&lt;rickmasters&gt;</a></span><span class="message">adding it up: file system, paging, multitasking, pipes, dup, etc</span></div><div class="line" id="014447"><span class="nick" style="color:#6d2462"><a href="#014447" label="[01:44:47]">&lt;rickmasters&gt;</a></span><span class="message">the next kernel would be some work</span></div><div class="line" id="014624"><span class="nick" style="color:#6b8072"><a href="#014624" label="[01:46:24]">&lt;stikonas&gt;</a></span><span class="message">bauen1: had some work done on that <a rel="nofollow" href="https://gitlab.com/myunix/myunix">https://gitlab.com/myunix/myunix</a> </span></div><div class="line" id="014639"><span class="nick" style="color:#6b8072"><a href="#014639" label="[01:46:39]">&lt;stikonas&gt;</a></span><span class="message">but it's not M2-Planet buildable</span></div><div class="line" id="014807"><span class="nick" style="color:#6d2462"><a href="#014807" label="[01:48:07]">&lt;rickmasters&gt;</a></span><span class="message">nice - looking for existing work is my instinct, maybe porting it M2-Mesoplanet</span></div><div class="line" id="014854"><span class="nick" style="color:#6b8072"><a href="#014854" label="[01:48:54]">&lt;stikonas&gt;</a></span><span class="message">also it would be nice if newer kernels supported something like kexec...</span></div><div class="line" id="014915"><span class="nick" style="color:#6b8072"><a href="#014915" label="[01:49:15]">&lt;stikonas&gt;</a></span><span class="message">then one can easily do automatic chaining</span></div><div class="line" id="015003"><span class="nick" style="color:#6b8072"><a href="#015003" label="[01:50:03]">&lt;stikonas&gt;</a></span><span class="message">hopefully kexec shouldn't be hard to implement, just loading new kernel somewhere and jumping into it</span></div><div class="line" id="015038"><span class="nick" style="color:#80b1d3"><a href="#015038" label="[01:50:38]">&lt;oriansj&gt;</a></span><span class="message">we might also end up having to extend what M2-Planet/M2-Mesoplanet supports</span></div><div class="line" id="015127"><span class="nick" style="color:#6b8072"><a href="#015127" label="[01:51:27]">&lt;stikonas&gt;</a></span><span class="message">well, last upgrade already extended it quite a bit</span></div><div class="line" id="015150"><span class="nick" style="color:#6b8072"><a href="#015150" label="[01:51:50]">&lt;stikonas&gt;</a></span><span class="message">1.10 has quite a few extra things compared to 1.9</span></div><div class="line" id="015151"><span class="nick" style="color:#80b1d3"><a href="#015151" label="[01:51:51]">&lt;oriansj&gt;</a></span><span class="message">but rickmasters your work is epicly impressive and you should feel very proud</span></div><div class="line" id="015158"><span class="nick" style="color:#6b8072"><a href="#015158" label="[01:51:58]">&lt;stikonas&gt;</a></span><span class="message">I agree</span></div><div class="line" id="015241"><span class="nick" style="color:#6d2462"><a href="#015241" label="[01:52:41]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: thank you so much, that means a lot</span></div><div class="line" id="015337"><span class="nick" style="color:#6d2462"><a href="#015337" label="[01:53:37]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: i feel the same way about you and stage0</span></div><div class="line" id="015442"><span class="nick" style="color:#6d2462"><a href="#015442" label="[01:54:42]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: and contributors, honestly don't know the history, but it seems you are the focal</span></div><div class="line" id="015534"><span class="nick" style="color:#6b8072"><a href="#015534" label="[01:55:34]">&lt;stikonas&gt;</a></span><span class="message">depends on project</span></div><div class="line" id="015537"><span class="nick" style="color:#80b1d3"><a href="#015537" label="[01:55:37]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: everyone here is excellent and if it wasn't for their help it would have taken another decade to get this far</span></div><div class="line" id="015546"><span class="nick" style="color:#6b8072"><a href="#015546" label="[01:55:46]">&lt;stikonas&gt;</a></span><span class="message">oriansj maintains stage0-posix</span></div><div class="line" id="015554"><span class="nick" style="color:#6b8072"><a href="#015554" label="[01:55:54]">&lt;stikonas&gt;</a></span><span class="message">fossy and I maintain live-bootstrap</span></div><div class="line" id="015607"><span class="nick" style="color:#6b8072"><a href="#015607" label="[01:56:07]">&lt;stikonas&gt;</a></span><span class="message">janneke: maintains mes</span></div><div class="line" id="015732"><span class="nick" style="color:#6d2462"><a href="#015732" label="[01:57:32]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: thank you, i've read a lot about live-bootstrap and mes, its all great work</span></div><div class="line" id="015900"><span class="nick" style="color:#6d2462"><a href="#015900" label="[01:59:00]">&lt;rickmasters&gt;</a></span><span class="message">an epic puzzle being put together here</span></div><div class="line" id="020116"><span class="nick" style="color:#80b1d3"><a href="#020116" label="[02:01:16]">&lt;oriansj&gt;</a></span><span class="message">and a great deal of fun too</span></div><div class="line" id="020218"><span class="nick" style="color:#6b8072"><a href="#020218" label="[02:02:18]">&lt;stikonas&gt;</a></span><span class="message">well, it was inspired by guix and follows work done there</span></div><div class="line" id="020634"><span class="nick" style="color:#6d2462"><a href="#020634" label="[02:06:34]">&lt;rickmasters&gt;</a></span><span class="message">not too familiar with guix, did it approach boostrapping more from a top down perspective?</span></div><div class="line" id="020710"><span class="nick" style="color:#6b8072"><a href="#020710" label="[02:07:10]">&lt;stikonas&gt;</a></span><span class="message">yes, it started as normal distro</span></div><div class="line" id="020736"><span class="nick" style="color:#6b8072"><a href="#020736" label="[02:07:36]">&lt;stikonas&gt;</a></span><span class="message">and was trimming down its bootstrap seed</span></div><div class="line" id="020805"><span class="nick" style="color:#6b8072"><a href="#020805" label="[02:08:05]">&lt;stikonas&gt;</a></span><span class="message">live-bootstrap was done bottom-up and hence is more strict with pregenerated files</span></div><div class="line" id="020830"><span class="nick" style="color:#6d2462"><a href="#020830" label="[02:08:30]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: i see</span></div><div class="line" id="020832"><span class="nick" style="color:#6b8072"><a href="#020832" label="[02:08:32]">&lt;stikonas&gt;</a></span><span class="message">but it was made possible by combining both approaches</span></div><div class="line" id="020849"><span class="nick" style="color:#6b8072"><a href="#020849" label="[02:08:49]">&lt;stikonas&gt;</a></span><span class="message">mes/mescc came from top down approach (with the goal of building gcc)</span></div><div class="line" id="020905"><span class="nick" style="color:#6b8072"><a href="#020905" label="[02:09:05]">&lt;stikonas&gt;</a></span><span class="message">and stage0/stage0-posix was building from hex0</span></div><div class="line" id="020924"><span class="nick" style="color:#6b8072"><a href="#020924" label="[02:09:24]">&lt;stikonas&gt;</a></span><span class="message">and it was about 1.5 years ago when the gap got closed</span></div><div class="line" id="020939"><span class="nick" style="color:#6b8072"><a href="#020939" label="[02:09:39]">&lt;stikonas&gt;</a></span><span class="message">though it took some time to get everything into released versions</span></div><div class="line" id="021052"><span class="nick" style="color:#6d2462"><a href="#021052" label="[02:10:52]">&lt;rickmasters&gt;</a></span><span class="message">so, besides the kernel, is the bootstrap to gcc completely done?</span></div><div class="line" id="021058"><span class="nick" style="color:#6d2462"><a href="#021058" label="[02:10:58]">&lt;rickmasters&gt;</a></span><span class="message">100%?</span></div><div class="line" id="021104"><span class="nick" style="color:#6b8072"><a href="#021104" label="[02:11:04]">&lt;stikonas&gt;</a></span><span class="message">yes</span></div><div class="line" id="021115"><span class="nick" style="color:#6b8072"><a href="#021115" label="[02:11:15]">&lt;stikonas&gt;</a></span><span class="message">well, live-bootstrap demonstrates it</span></div><div class="line" id="021124"><span class="nick" style="color:#6b8072"><a href="#021124" label="[02:11:24]">&lt;stikonas&gt;</a></span><span class="message">even goes to g++ 4.7.4</span></div><div class="line" id="021150"><span class="nick" style="color:#6b8072"><a href="#021150" label="[02:11:50]">&lt;stikonas&gt;</a></span><span class="message">although we couldn't bootstrap gnu autogen for regenerating top-level configure script in gcc</span></div><div class="line" id="021152"><span class="nick" style="color:#6d2462"><a href="#021152" label="[02:11:52]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: ok, i watched a presentation that said there was some missing work on mes or something but that may have been old</span></div><div class="line" id="021153"><span class="nick" style="color:#6b8072"><a href="#021153" label="[02:11:53]">&lt;stikonas&gt;</a></span><span class="message">but that script is optional</span></div><div class="line" id="021248"><span class="nick" style="color:#6b8072"><a href="#021248" label="[02:12:48]">&lt;stikonas&gt;</a></span><span class="message">(this is created using autogen <a rel="nofollow" href="https://raw.githubusercontent.com/gcc-mirror/gcc/master/Makefile.in">https://raw.githubusercontent.com/gcc-mirror/gcc/master/Makefile.in</a>) </span></div><div class="line" id="021325"><span class="nick" style="color:#6b8072"><a href="#021325" label="[02:13:25]">&lt;stikonas&gt;</a></span><span class="message">but running ./configure in gcc subdirectories works around this</span></div><div class="line" id="021421"><span class="nick" style="color:#6d2462"><a href="#021421" label="[02:14:21]">&lt;rickmasters&gt;</a></span><span class="message">if it works and is auditable then seems fine</span></div><div class="line" id="021515"><span class="nick" style="color:#6b8072"><a href="#021515" label="[02:15:15]">&lt;stikonas&gt;</a></span><span class="message">yes, it's not too bad <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysa/gcc-4.0.4/pass1.sh">https://github.com/fosslinux/live-bootstrap/blob/master/sysa/gcc-4.0.4/pass1.sh</a> </span></div><div class="line" id="021606"><span class="nick" style="color:#6d2462"><a href="#021606" label="[02:16:06]">&lt;rickmasters&gt;</a></span><span class="message">actually, the less tools the better, in my opinion</span></div><div class="line" id="023320"><span class="nick" style="color:#80b1d3"><a href="#023320" label="[02:33:20]">&lt;oriansj&gt;</a></span><span class="message">so yeah, your kernel work, puts us very close to doing a bare metal x86 to full Linux distro</span></div><div class="line" id="023351"><span class="nick" style="color:#6b8072"><a href="#023351" label="[02:33:51]">&lt;stikonas&gt;</a></span><span class="message">yes, I expected it would take a few years to get to this stage</span></div><div class="line" id="023545"><span class="nick" style="color:#80b1d3"><a href="#023545" label="[02:35:45]">&lt;oriansj&gt;</a></span><span class="message">assuming we get a little more advanced kernel written in C that M2-Mesoplanet/M2-Planet can build supporting maybe 31 more syscalls; we would be able to build Linux and the rest would be details</span></div><div class="line" id="023649"><span class="nick" style="color:#80b1d3"><a href="#023649" label="[02:36:49]">&lt;oriansj&gt;</a></span><span class="message">we might actually be done before bootstrappable hits the 10 year mark</span></div><div class="line" id="023659"><span class="nick" style="color:#6d2462"><a href="#023659" label="[02:36:59]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: that's pretty exciting</span></div><div class="line" id="023743"><span class="nick" style="color:#6d2462"><a href="#023743" label="[02:37:43]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: i've been thinking that there would need to be utilities build to format a file system and lay down bootloaders, grub/lilo</span></div><div class="line" id="023754"><span class="nick" style="color:#6b8072"><a href="#023754" label="[02:37:54]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: worth emailing your work to bootsrappable mailing list</span></div><div class="line" id="023804"><span class="nick" style="color:#80b1d3"><a href="#023804" label="[02:38:04]">&lt;oriansj&gt;</a></span><span class="message">absolutely</span></div><div class="line" id="023812"><span class="nick" style="color:#6b8072"><a href="#023812" label="[02:38:12]">&lt;stikonas&gt;</a></span><span class="message">well, live-bootstrap builds util-linxu</span></div><div class="line" id="023818"><span class="nick" style="color:#80b1d3"><a href="#023818" label="[02:38:18]">&lt;oriansj&gt;</a></span><span class="message">it is mega news</span></div><div class="line" id="023833"><span class="nick" style="color:#6d2462"><a href="#023833" label="[02:38:33]">&lt;rickmasters&gt;</a></span><span class="message">there's a mailing list? lol</span></div><div class="line" id="023841"><span class="nick" style="color:#6b8072"><a href="#023841" label="[02:38:41]">&lt;stikonas&gt;</a></span><span class="message">but live-bootstrap does need a real disk for system c which is preformatted and loaded with source tarballs</span></div><div class="line" id="023911"><span class="nick" style="color:#6b8072"><a href="#023911" label="[02:39:11]">&lt;stikonas&gt;</a></span><span class="message">it's a low volume mailing list</span></div><div class="line" id="023918"><span class="nick" style="color:#80b1d3"><a href="#023918" label="[02:39:18]">&lt;oriansj&gt;</a></span><span class="message">yes: bootstrappable@freelists.org</span></div><div class="line" id="023918"><span class="nick" style="color:#6b8072"><a href="#023918" label="[02:39:18]">&lt;stikonas&gt;</a></span><span class="message">maybe an email once every few months</span></div><div class="line" id="023945"><span class="nick" style="color:#6d2462"><a href="#023945" label="[02:39:45]">&lt;rickmasters&gt;</a></span><span class="message">ok, i'll take a look</span></div><div class="line" id="024218"><span class="nick" style="color:#6d2462"><a href="#024218" label="[02:42:18]">&lt;rickmasters&gt;</a></span><span class="message">i guess the transition from 32 bit to 64 bit linux is well established?</span></div><div class="line" id="024233"><span class="nick" style="color:#6d2462"><a href="#024233" label="[02:42:33]">&lt;rickmasters&gt;</a></span><span class="message">just cross compile</span></div><div class="line" id="024250"><span class="nick" style="color:#80b1d3"><a href="#024250" label="[02:42:50]">&lt;oriansj&gt;</a></span><span class="message">indeed and trivial after one has binutils, gcc and guile</span></div><div class="line" id="024417"><span class="nick" style="color:#6d2462"><a href="#024417" label="[02:44:17]">&lt;rickmasters&gt;</a></span><span class="message">just wondering if its been automated before but shouldn't be a problem</span></div><div class="line" id="024451"><span class="nick" style="color:#6b8072"><a href="#024451" label="[02:44:51]">&lt;stikonas&gt;</a></span><span class="message">guix has it automated</span></div><div class="line" id="024458"><span class="nick" style="color:#6b8072"><a href="#024458" label="[02:44:58]">&lt;stikonas&gt;</a></span><span class="message">live-bootstrap for now stays in 32-bit mode</span></div><div class="line" id="024639"><span class="nick" style="color:#6d2462"><a href="#024639" label="[02:46:39]">&lt;rickmasters&gt;</a></span><span class="message">which makes sense, a full 64 bit bootstrap is hard to imagine</span></div><div class="line" id="025047"><span class="nick" style="color:#6d2462"><a href="#025047" label="[02:50:47]">&lt;rickmasters&gt;</a></span><span class="message">i mean starting in 64 bit, like with a 64 bit kernel, i'm not signing up</span></div><div class="line" id="025126"><span class="nick" style="color:#80b1d3"><a href="#025126" label="[02:51:26]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: no worries</span></div><div class="line" id="025134"><span class="nick" style="color:#80b1d3"><a href="#025134" label="[02:51:34]">&lt;oriansj&gt;</a></span><span class="message">do only the things you find fun</span></div><div class="line" id="025543"><span class="nick" style="color:#6d2462"><a href="#025543" label="[02:55:43]">&lt;rickmasters&gt;</a></span><span class="message">is cross compiling to other architectures a sufficient strategy for those architectures or will is it an open goal to try to boostsrap every architecture from bare metal?</span></div><div class="line" id="025729"><span class="nick" style="color:#80b1d3"><a href="#025729" label="[02:57:29]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: personally, I want to do *every* architecture from bare metal but doing just 1 is enough to show that it is possible and end the debate</span></div><div class="line" id="025843"><span class="nick" style="color:#80b1d3"><a href="#025843" label="[02:58:43]">&lt;oriansj&gt;</a></span><span class="message">and provide a root capable of enabling DDC to find all trusting trust attacks in the entire ecosystem</span></div><div class="line" id="025938"><span class="nick" style="color:#80b1d3"><a href="#025938" label="[02:59:38]">&lt;oriansj&gt;</a></span><span class="message">doing all of the architectures would even allow us to even detect hardware level subversion</span></div><div class="line" id="030124"><span class="nick" style="color:#6d2462"><a href="#030124" label="[03:01:24]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: i see. thats ... ambitious and i don't disagree because 386 may not last forever</span></div><div class="line" id="030401"><span class="nick" style="color:#80b1d3"><a href="#030401" label="[03:04:01]">&lt;oriansj&gt;</a></span><span class="message">well yes.</span></div><div class="line" id="030444"><span class="nick" style="color:#6d2462"><a href="#030444" label="[03:04:44]">&lt;rickmasters&gt;</a></span><span class="message">carting emulators around will get tiresome - the bootstrap will need to keep up with the times, someone will port to apple M9 in 2093 and never look back</span></div><div class="line" id="030722"><span class="nick" style="color:#6d2462"><a href="#030722" label="[03:07:22]">&lt;rickmasters&gt;</a></span><span class="message">the more implementations the better i guess is what i'm trying to say, but cross compiling seems find to me for now</span></div><div class="line" id="030728"><span class="nick" style="color:#6d2462"><a href="#030728" label="[03:07:28]">&lt;rickmasters&gt;</a></span><span class="message">fine</span></div><div class="line" id="030750"><span class="nick" style="color:#80b1d3"><a href="#030750" label="[03:07:50]">&lt;oriansj&gt;</a></span><span class="message">well you just showed that the root kernel can be *MUCH* simpler than I planned and going by time to completion for the cc_* rewrites: ^_^ that isn't very far off</span></div><div class="line" id="031041"><span class="nick" style="color:#80b1d3"><a href="#031041" label="[03:10:41]">&lt;oriansj&gt;</a></span><span class="message">if we do the C kernel in a cross-platform manner, we create another universal base and porting to new architectures becomes a 4 step process: M2-Planet+mescc-tools, stage0-posix, C kernel and builder-hex0 rewrite.</span></div><div class="line" id="031105"><span class="nick" style="color:#6d2462"><a href="#031105" label="[03:11:05]">&lt;rickmasters&gt;</a></span><span class="message">yeah i guess i'm imagining how hard it would have been to write builder-hex0 in 64 bit from scratch - just unknown to me. maybe its not so bad</span></div><div class="line" id="031304"><span class="nick" style="color:#80b1d3"><a href="#031304" label="[03:13:04]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: well, if it had been me: Write in M1 first and then use emacs macros to do the conversions to hex2 and then calculate the labels and then jumps/calls</span></div><div class="line" id="031352"><span class="nick" style="color:#6d2462"><a href="#031352" label="[03:13:52]">&lt;rickmasters&gt;</a></span><span class="message">i decided not to do that on principle, but it would have been a lot easier</span></div><div class="line" id="031414"><span class="nick" style="color:#80b1d3"><a href="#031414" label="[03:14:14]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: completely fair</span></div><div class="line" id="031422"><span class="nick" style="color:#6d2462"><a href="#031422" label="[03:14:22]">&lt;rickmasters&gt;</a></span><span class="message">spending 6 hours isolating a typo'd opcode is no fun</span></div><div class="line" id="031434"><span class="nick" style="color:#80b1d3"><a href="#031434" label="[03:14:34]">&lt;oriansj&gt;</a></span><span class="message">and honestly all the more impressive</span></div><div class="line" id="031525"><span class="nick" style="color:#6d2462"><a href="#031525" label="[03:15:25]">&lt;rickmasters&gt;</a></span><span class="message">well less fun</span></div><div class="line" id="031908"><span class="nick" style="color:#6d2462"><a href="#031908" label="[03:19:08]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: excited to see where this goes. great meeting you and everyone. near my bedtime but i'll be back in 9 hours or so</span></div><div class="line" id="032333"><span class="nick" style="color:#80b1d3"><a href="#032333" label="[03:23:33]">&lt;oriansj&gt;</a></span><span class="message">a pleasure rickmasters and stay awesome</span></div><div class="line" id="120452"><span class="nick" style="color:#6c3d55"><a href="#120452" label="[12:04:52]">&lt;fossy&gt;</a></span><span class="message">rickmasters: this is absolutely insane, amazing work</span></div><div class="line" id="120528"><span class="nick" style="color:#6c3d55"><a href="#120528" label="[12:05:28]">&lt;fossy&gt;</a></span><span class="message">rickmasters: this is a *massive* development, thank you very much for your contribution</span></div><div class="line" id="120705"><span class="nick" style="color:#d9d9d9"><a href="#120705" label="[12:07:05]">&lt;Hagfish&gt;</a></span><span class="message">yeah, it's like Christmas has come early for the bootstrappers this year :)</span></div><div class="line" id="120959"><span class="nick" style="color:#6c3d55"><a href="#120959" label="[12:09:59]">&lt;fossy&gt;</a></span><span class="message">arches my personal opinion is cross compiling is good for everything BUT i would like it if we can someday make an open arch the &quot;base&quot; arch that everything can be cross compiled from</span></div><div class="line" id="121206"><span class="nick" style="color:#6d2462"><a href="#121206" label="[12:12:06]">&lt;rickmasters&gt;</a></span><span class="message">fossy: thank you!</span></div><div class="line" id="121543"><span class="nick" style="color:#6c3d55"><a href="#121543" label="[12:15:43]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: FYI i've nearly finished sysc network source download, but disk-source behaviour will be retained, behind command-line flag for rootfs.py &amp; used if found within the disk</span></div><div class="line" id="122433"><span class="nick" style="color:#bc80bd"><a href="#122433" label="[12:24:33]">&lt;stikonas[m]&gt;</a></span><span class="message">fossy: sounds good</span></div><div class="line" id="122521"><span class="nick" style="color:#bc80bd"><a href="#122521" label="[12:25:21]">&lt;stikonas[m]&gt;</a></span><span class="message">fossy: can you add an option to specify remote mirror for downloads?</span></div><div class="line" id="122611"><span class="nick" style="color:#bc80bd"><a href="#122611" label="[12:26:11]">&lt;stikonas[m]&gt;</a></span><span class="message">E.g. I can put my cache dirs somewhere on my server</span></div><div class="line" id="122614"><span class="nick" style="color:#bc80bd"><a href="#122614" label="[12:26:14]">&lt;stikonas[m]&gt;</a></span><span class="message">Or is that non trivial?</span></div><div class="line" id="123438"><span class="nick" style="color:#6c3d55"><a href="#123438" label="[12:34:38]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: no, that seems simple to me, i'll add that</span></div><div class="line" id="123815"><span class="nick" style="color:#3c5b35"><a href="#123815" label="[12:38:15]">&lt;Franciman&gt;</a></span><span class="message">has anybody tried mes on big projects?</span></div><div class="line" id="123827"><span class="nick" style="color:#3c5b35"><a href="#123827" label="[12:38:27]">&lt;Franciman&gt;</a></span><span class="message">Like how fast is it?</span></div><div class="line" id="123827"><span class="nick" style="color:#3c5b35"><a href="#123827" label="[12:38:27]">&lt;Franciman&gt;</a></span><span class="message">mescc is reasonably fast?</span></div><div class="line" id="123846"><span class="nick" style="color:#bc80bd"><a href="#123846" label="[12:38:46]">&lt;stikonas[m]&gt;</a></span><span class="message">mescc is quite slow</span></div><div class="line" id="123855"><span class="nick" style="color:#3c5b35"><a href="#123855" label="[12:38:55]">&lt;Franciman&gt;</a></span><span class="message">hmm i see</span></div><div class="line" id="123909"><span class="nick" style="color:#bc80bd"><a href="#123909" label="[12:39:09]">&lt;stikonas[m]&gt;</a></span><span class="message">Takes about 10 min to compiles tcc</span></div><div class="line" id="123927"><span class="nick" style="color:#3c5b35"><a href="#123927" label="[12:39:27]">&lt;Franciman&gt;</a></span><span class="message">i was thinking about how much would it take to add a bytecode interpreter</span></div><div class="line" id="123934"><span class="nick" style="color:#bc80bd"><a href="#123934" label="[12:39:34]">&lt;stikonas[m]&gt;</a></span><span class="message">Whereas tcc rebuilds itself in a fraction of second</span></div><div class="line" id="123954"><span class="nick" style="color:#3c5b35"><a href="#123954" label="[12:39:54]">&lt;Franciman&gt;</a></span><span class="message">thanks t184256</span></div><div class="line" id="123954"><span class="nick" style="color:#3c5b35"><a href="#123954" label="[12:39:54]">&lt;Franciman&gt;</a></span><span class="message">ops</span></div><div class="line" id="123954"><span class="nick" style="color:#3c5b35"><a href="#123954" label="[12:39:54]">&lt;Franciman&gt;</a></span><span class="message">sorry</span></div><div class="line" id="123956"><span class="nick" style="color:#3c5b35"><a href="#123956" label="[12:39:56]">&lt;Franciman&gt;</a></span><span class="message">thanks stikonas[m]</span></div><div class="line" id="124022"><span class="nick" style="color:#3c5b35"><a href="#124022" label="[12:40:22]">&lt;Franciman&gt;</a></span><span class="message">i'm working on my bootstrappable scheme (before i knew about mes, but now i keep going cuz it's fun lol)</span></div><div class="line" id="124300"><span class="nick" style="color:#bc80bd"><a href="#124300" label="[12:43:00]">&lt;stikonas[m]&gt;</a></span><span class="message">fossy: BTW, are you going to format disk in sysb in download mode? Or not planned right now?</span></div><div class="line" id="124612"><span class="nick" style="color:#6c3d55"><a href="#124612" label="[12:46:12]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: yes, disk formatted in sysb, if it has no existing partitions</span></div><div class="line" id="125050"><span class="nick" style="color:#6c3d55"><a href="#125050" label="[12:50:50]">&lt;fossy&gt;</a></span><span class="message">rickmasters: is there a known limit to the size of helloworld.src? i tried adding mes to it, but it fails in the src file src file stage, kernel crashes</span></div><div class="line" id="125258"><span class="nick" style="color:#6d2462"><a href="#125258" label="[12:52:58]">&lt;rickmasters&gt;</a></span><span class="message">fossy: hmm, no, but i did run into bugs as it got bigger and bigger, so not too surprised</span></div><div class="line" id="125341"><span class="nick" style="color:#6d2462"><a href="#125341" label="[12:53:41]">&lt;rickmasters&gt;</a></span><span class="message">i'm happy to take a look with some more detail</span></div><div class="line" id="125458"><span class="nick" style="color:#6d2462"><a href="#125458" label="[12:54:58]">&lt;rickmasters&gt;</a></span><span class="message">perhaps a link to the specific file you are adding?</span></div><div class="line" id="125619"><span class="nick" style="color:#6d2462"><a href="#125619" label="[12:56:19]">&lt;rickmasters&gt;</a></span><span class="message">wait, now that I check - there is a 1M limit total in build.sh near the top</span></div><div class="line" id="130044"><span class="nick" style="color:#6c3d55"><a href="#130044" label="[13:00:44]">&lt;fossy&gt;</a></span><span class="message">oh, ok, that makes sense, it was around 5M</span></div><div class="line" id="130117"><span class="nick" style="color:#6d2462"><a href="#130117" label="[13:01:17]">&lt;rickmasters&gt;</a></span><span class="message">yeah, i should probably put in a check</span></div><div class="line" id="130159"><span class="nick" style="color:#6d2462"><a href="#130159" label="[13:01:59]">&lt;rickmasters&gt;</a></span><span class="message">you should be able to just change 2056 to (size / 512) + 8</span></div><div class="line" id="130245"><span class="nick" style="color:#6d2462"><a href="#130245" label="[13:02:45]">&lt;rickmasters&gt;</a></span><span class="message">you're in uncharted waters :D</span></div><div class="line" id="130420"><span class="nick" style="color:#6c3d55"><a href="#130420" label="[13:04:20]">&lt;fossy&gt;</a></span><span class="message">:P ok thanks</span></div><div class="line" id="131542"><span class="nick" style="color:#bc80bd"><a href="#131542" label="[13:15:42]">&lt;stikonas[m]&gt;</a></span><span class="message">fossy: trying to run mes-m2?</span></div><div class="line" id="131952"><span class="nick" style="color:#af8d2f"><a href="#131952" label="[13:19:52]">&lt;janneke&gt;</a></span><span class="message">so, what's up with: <a rel="nofollow" href="https://github.com/torvalds/linux/blob/v4.19/arch/s390/kernel/syscalls/syscall.tbl">https://github.com/torvalds/linux/blob/v4.19/arch/s390/kernel/syscalls/syscall.tbl</a>  ?</span></div><div class="line" id="132024"><span class="nick" style="color:#af8d2f"><a href="#132024" label="[13:20:24]">&lt;janneke&gt;</a></span><span class="message">the numbers seem all off / don't seem to work?</span></div><div class="line" id="132141"><span class="nick" style="color:#bc80bd"><a href="#132141" label="[13:21:41]">&lt;stikonas[m]&gt;</a></span><span class="message">janneke: s390?</span></div><div class="line" id="132151"><span class="nick" style="color:#bc80bd"><a href="#132151" label="[13:21:51]">&lt;stikonas[m]&gt;</a></span><span class="message">I don't think mes support s390</span></div><div class="line" id="132346"><span class="nick" style="color:#af8d2f"><a href="#132346" label="[13:23:46]">&lt;janneke&gt;</a></span><span class="message">eh, isn't that riscv(64)?</span></div><div class="line" id="132412"><span class="nick" style="color:#bc80bd"><a href="#132412" label="[13:24:12]">&lt;stikonas[m]&gt;</a></span><span class="message">I sometimes look here <a rel="nofollow" href="https://marcin.juszkiewicz.com.pl/download/tables/syscalls.html">https://marcin.juszkiewicz.com.pl/download/tables/syscalls.html</a> </span></div><div class="line" id="132503"><span class="nick" style="color:#af8d2f"><a href="#132503" label="[13:25:03]">&lt;janneke&gt;</a></span><span class="message">ah, something had me terribly confused by equating riscv64 with s390?</span></div><div class="line" id="132505"><span class="nick" style="color:#bc80bd"><a href="#132505" label="[13:25:05]">&lt;stikonas[m]&gt;</a></span><span class="message">It worked for m2libc development</span></div><div class="line" id="132538"><span class="nick" style="color:#bc80bd"><a href="#132538" label="[13:25:38]">&lt;stikonas[m]&gt;</a></span><span class="message">s390 seems to be some IBM thing</span></div><div class="line" id="132715"><span class="nick" style="color:#af8d2f"><a href="#132715" label="[13:27:15]">&lt;janneke&gt;</a></span><span class="message">thanks</span></div><div class="line" id="134910"><span class="nick" style="color:#8dd3c7"><a href="#134910" label="[13:49:10]">&lt;achaninja&gt;</a></span><span class="message">janneke: what does the -DBOOTSTRAP do in your tcc?</span></div><div class="line" id="134949"><span class="nick" style="color:#8dd3c7"><a href="#134949" label="[13:49:49]">&lt;achaninja&gt;</a></span><span class="message">I also wonder about LONG_LONG_STUB, but i guess that just emulates LONG_LONG by computing only the low 32 bits?</span></div><div class="line" id="135634"><span class="nick" style="color:#8dd3c7"><a href="#135634" label="[13:56:34]">&lt;achaninja&gt;</a></span><span class="message">I guess it looks like it removes some features mescc can't support</span></div><div class="line" id="135656"><span class="nick" style="color:#8dd3c7"><a href="#135656" label="[13:56:56]">&lt;achaninja&gt;</a></span><span class="message">does that sound right?</span></div><div class="line" id="140355"><span class="nick" style="color:#af8d2f"><a href="#140355" label="[14:03:55]">&lt;janneke&gt;</a></span><span class="message">achaninja: yes, something like that</span></div><div class="line" id="140403"><span class="nick" style="color:#af8d2f"><a href="#140403" label="[14:04:03]">&lt;janneke&gt;</a></span><span class="message">mescc does not support floats, so they are compiled in in several steps</span></div><div class="line" id="140421"><span class="nick" style="color:#af8d2f"><a href="#140421" label="[14:04:21]">&lt;janneke&gt;</a></span><span class="message">same for long long</span></div><div class="line" id="151628"><span class="nick" style="color:#af8d2f"><a href="#151628" label="[15:16:28]">&lt;janneke&gt;</a></span><span class="message">achaninja: see boot.sh, which is called several times by build.sh</span></div><div class="line" id="152827"><span class="nick" style="color:#8dd3c7"><a href="#152827" label="[15:28:27]">&lt;achaninja&gt;</a></span><span class="message">thanks, I made the mistake of not using them properly and ended up with a mostly working tcc</span></div><div class="line" id="152834"><span class="nick" style="color:#8dd3c7"><a href="#152834" label="[15:28:34]">&lt;achaninja&gt;</a></span><span class="message">but not quite right</span></div><div class="line" id="153509"><span class="nick" style="color:#8dd3c7"><a href="#153509" label="[15:35:09]">&lt;achaninja&gt;</a></span><span class="message">janneke: I have new appreciation for the work you put into patching tcc</span></div><div class="line" id="153516"><span class="nick" style="color:#8dd3c7"><a href="#153516" label="[15:35:16]">&lt;achaninja&gt;</a></span><span class="message">good job!</span></div><div class="line" id="154715"><span class="nick" style="color:#af8d2f"><a href="#154715" label="[15:47:15]">&lt;janneke&gt;</a></span><span class="message">achaninja: hehe, thanks</span></div><div class="line" id="154754"><span class="nick" style="color:#af8d2f"><a href="#154754" label="[15:47:54]">&lt;janneke&gt;</a></span><span class="message">it's all pretty much a best-effort thing</span></div><div class="line" id="154832"><span class="nick" style="color:#af8d2f"><a href="#154832" label="[15:48:32]">&lt;janneke&gt;</a></span><span class="message">not really what we want the &quot;final&quot; full source bootstrap to look like ;)</span></div><div class="line" id="160243"><span class="nick" style="color:#8dd3c7"><a href="#160243" label="[16:02:43]">&lt;achaninja&gt;</a></span><span class="message">Well I will be happy to see the progress as it occurs</span></div><div class="line" id="163955"><span class="nick" style="color:#bc80bd"><a href="#163955" label="[16:39:55]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, progress is happening. We can now do bootstrap using released mes. Hopefully gash will soon run on mes. Then we'll be able to use mes/mescc build system</span></div><div class="line" id="164012"><span class="nick" style="color:#bc80bd"><a href="#164012" label="[16:40:12]">&lt;stikonas[m]&gt;</a></span><span class="message">And now we got bootstrap kernel</span></div><div class="line" id="164726"><span class="nick" style="color:#bc80bd"><a href="#164726" label="[16:47:26]">&lt;stikonas[m]&gt;</a></span><span class="message">janneke: have you seen the new kernel? Might be nice if we get mes running on it (if that is possible)</span></div><div class="line" id="165142"><span class="nick" style="color:#af8d2f"><a href="#165142" label="[16:51:42]">&lt;janneke&gt;</a></span><span class="message">stikonas[m]: oooh, that's awesome rickmasters</span></div><div class="line" id="165152"><span class="nick" style="color:#389600"><a href="#165152" label="[16:51:52]">*</a></span><span class="message">janneke would like to see that!</span></div><div class="line" id="165956"><span class="nick" style="color:#6d2462"><a href="#165956" label="[16:59:56]">&lt;rickmasters&gt;</a></span><span class="message">janneke: thank you</span></div><div class="line" id="171710"><span class="nick" style="color:#8dd3c7"><a href="#171710" label="[17:17:10]">&lt;unmatched-paren&gt;</a></span><span class="message">rickmasters: thanks again for your work! i can't get builder-hex0 to run on my guix system though; i'm running `make` in a `guix shell qemu xxd make`, but all i get is &quot;No bootable device&quot; from the qemu firmware</span></div><div class="line" id="171723"><span class="nick" style="color:#8dd3c7"><a href="#171723" label="[17:17:23]">&lt;unmatched-paren&gt;</a></span><span class="message">what am i missing?</span></div><div class="line" id="171919"><span class="nick" style="color:#6d2462"><a href="#171919" label="[17:19:19]">&lt;rickmasters&gt;</a></span><span class="message">unmatched-paren: i guess i would start by seeing what did work, maybe ls -ltr</span></div><div class="line" id="171947"><span class="nick" style="color:#8dd3c7"><a href="#171947" label="[17:19:47]">&lt;unmatched-paren&gt;</a></span><span class="message">so, looks like the `-mini` .bin and .img files have been built</span></div><div class="line" id="171953"><span class="nick" style="color:#8dd3c7"><a href="#171953" label="[17:19:53]">&lt;unmatched-paren&gt;</a></span><span class="message">but not the regular ones</span></div><div class="line" id="172006"><span class="nick" style="color:#8dd3c7"><a href="#172006" label="[17:20:06]">&lt;unmatched-paren&gt;</a></span><span class="message">that's the only difference from the git repo</span></div><div class="line" id="172109"><span class="nick" style="color:#8dd3c7"><a href="#172109" label="[17:21:09]">&lt;unmatched-paren&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.sr.ht/~unmatched-paren/192afa2ca9a35d0a5ac776e1d0e5ed1a44a4439f">https://paste.sr.ht/~unmatched-paren/192afa2ca9a35d0a5ac776e1d0e5ed1a44a4439f</a> </span></div><div class="line" id="172203"><span class="nick" style="color:#6d2462"><a href="#172203" label="[17:22:03]">&lt;rickmasters&gt;</a></span><span class="message">didn't get far, check for cut and xxd</span></div><div class="line" id="172217"><span class="nick" style="color:#8dd3c7"><a href="#172217" label="[17:22:17]">&lt;unmatched-paren&gt;</a></span><span class="message">xxd and cut both exist</span></div><div class="line" id="172251"><span class="nick" style="color:#6d2462"><a href="#172251" label="[17:22:51]">&lt;rickmasters&gt;</a></span><span class="message">cut builder-hex0.hex0 -f1 -d'#' | cut -f1 -d';' | xxd -r -p &gt; builder-hex0-seed.bin</span></div><div class="line" id="172320"><span class="nick" style="color:#6d2462"><a href="#172320" label="[17:23:20]">&lt;rickmasters&gt;</a></span><span class="message">thats the command maybe the options differ?</span></div><div class="line" id="172329"><span class="nick" style="color:#8dd3c7"><a href="#172329" label="[17:23:29]">&lt;unmatched-paren&gt;</a></span><span class="message">that command works fine, should i try make again?</span></div><div class="line" id="172444"><span class="nick" style="color:#6d2462"><a href="#172444" label="[17:24:44]">&lt;rickmasters&gt;</a></span><span class="message">does it run without error but produce an empty file?</span></div><div class="line" id="172524"><span class="nick" style="color:#8dd3c7"><a href="#172524" label="[17:25:24]">&lt;unmatched-paren&gt;</a></span><span class="message">oh, i see. that command produces the right file, but the mini-seed is 0 bytes large</span></div><div class="line" id="172536"><span class="nick" style="color:#6d2462"><a href="#172536" label="[17:25:36]">&lt;rickmasters&gt;</a></span><span class="message">so sorry cut builder-hex0-mini.hex0 -f1 -d'#' | cut -f1 -d';' | xxd -r -p &gt; builder-hex0-mini-seed.bin</span></div><div class="line" id="172544"><span class="nick" style="color:#6d2462"><a href="#172544" label="[17:25:44]">&lt;rickmasters&gt;</a></span><span class="message">its this one that failed</span></div><div class="line" id="172615"><span class="nick" style="color:#8dd3c7"><a href="#172615" label="[17:26:15]">&lt;unmatched-paren&gt;</a></span><span class="message">the seed isn't 0-sized anymore</span></div><div class="line" id="172629"><span class="nick" style="color:#8dd3c7"><a href="#172629" label="[17:26:29]">&lt;unmatched-paren&gt;</a></span><span class="message">woo it works!</span></div><div class="line" id="172639"><span class="nick" style="color:#8dd3c7"><a href="#172639" label="[17:26:39]">&lt;unmatched-paren&gt;</a></span><span class="message">i think?</span></div><div class="line" id="172652"><span class="nick" style="color:#8dd3c7"><a href="#172652" label="[17:26:52]">&lt;unmatched-paren&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.sr.ht/~unmatched-paren/a2dca67164b5b2c69a0394ed93a3d231d7f978a6">https://paste.sr.ht/~unmatched-paren/a2dca67164b5b2c69a0394ed93a3d231d7f978a6</a> </span></div><div class="line" id="172658"><span class="nick" style="color:#8dd3c7"><a href="#172658" label="[17:26:58]">&lt;unmatched-paren&gt;</a></span><span class="message">this is the output</span></div><div class="line" id="172717"><span class="nick" style="color:#6d2462"><a href="#172717" label="[17:27:17]">&lt;rickmasters&gt;</a></span><span class="message">that looks good</span></div><div class="line" id="172931"><span class="nick" style="color:#6d2462"><a href="#172931" label="[17:29:31]">&lt;rickmasters&gt;</a></span><span class="message">are you in the boot2now repo, that was just the builder</span></div><div class="line" id="172939"><span class="nick" style="color:#8dd3c7"><a href="#172939" label="[17:29:39]">&lt;unmatched-paren&gt;</a></span><span class="message">ah, i'm not</span></div><div class="line" id="173001"><span class="nick" style="color:#8dd3c7"><a href="#173001" label="[17:30:01]">&lt;unmatched-paren&gt;</a></span><span class="message">i cloned builder-hex0, which is probably the problem, right?</span></div><div class="line" id="173023"><span class="nick" style="color:#6d2462"><a href="#173023" label="[17:30:23]">&lt;rickmasters&gt;</a></span><span class="message">yes, that's just the kernel/compiler</span></div><div class="line" id="173102"><span class="nick" style="color:#6d2462"><a href="#173102" label="[17:31:02]">&lt;rickmasters&gt;</a></span><span class="message">boot2now combines that (it has its own snapshot of builder-hex0) with the stage-posix source</span></div><div class="line" id="173202"><span class="nick" style="color:#6d2462"><a href="#173202" label="[17:32:02]">&lt;rickmasters&gt;</a></span><span class="message">you don't need to clone builder-hex0</span></div><div class="line" id="173449"><span class="nick" style="color:#bc80bd"><a href="#173449" label="[17:34:49]">&lt;stikonas[m]&gt;</a></span><span class="message">Would got submodules make sense for boot2now?</span></div><div class="line" id="173513"><span class="nick" style="color:#bc80bd"><a href="#173513" label="[17:35:13]">&lt;stikonas[m]&gt;</a></span><span class="message">Or is stage0-posix modified</span></div><div class="line" id="173532"><span class="nick" style="color:#8dd3c7"><a href="#173532" label="[17:35:32]">&lt;unmatched-paren&gt;</a></span><span class="message">rickmasters: btw, i just noticed a number of improvements that could be made to the builder-hex0 makefile</span></div><div class="line" id="173538"><span class="nick" style="color:#8dd3c7"><a href="#173538" label="[17:35:38]">&lt;unmatched-paren&gt;</a></span><span class="message">mind if i send a pr?</span></div><div class="line" id="173557"><span class="nick" style="color:#8dd3c7"><a href="#173557" label="[17:35:57]">&lt;unmatched-paren&gt;</a></span><span class="message">unless there was a reason for not using $@ $^ et al</span></div><div class="line" id="173600"><span class="nick" style="color:#bc80bd"><a href="#173600" label="[17:36:00]">&lt;stikonas[m]&gt;</a></span><span class="message">Although boot2now only has x86 part of stage0-posix</span></div><div class="line" id="173608"><span class="nick" style="color:#6d2462"><a href="#173608" label="[17:36:08]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: i am not opposed to git submodules but it wasn't my immediate preference</span></div><div class="line" id="173729"><span class="nick" style="color:#bc80bd"><a href="#173729" label="[17:37:29]">&lt;stikonas[m]&gt;</a></span><span class="message">No, it's up to you, I was just asking if there is some particular reason</span></div><div class="line" id="173734"><span class="nick" style="color:#6d2462"><a href="#173734" label="[17:37:34]">&lt;rickmasters&gt;</a></span><span class="message">stage0-posix can add stuff (like access recently) that i may not support yet, so i was trying to control what snapshot to use</span></div><div class="line" id="173810"><span class="nick" style="color:#6d2462"><a href="#173810" label="[17:38:10]">&lt;rickmasters&gt;</a></span><span class="message">i'm sure there is a way with git submodules but after an hour or two of research it wasn't crystal clear so i just did the copy pattern</span></div><div class="line" id="173814"><span class="nick" style="color:#bc80bd"><a href="#173814" label="[17:38:14]">&lt;stikonas[m]&gt;</a></span><span class="message">I know some people don't like git submodules...</span></div><div class="line" id="173832"><span class="nick" style="color:#6d2462"><a href="#173832" label="[17:38:32]">&lt;rickmasters&gt;</a></span><span class="message">unmatched-paren: yes, open to pr</span></div><div class="line" id="173846"><span class="nick" style="color:#bc80bd"><a href="#173846" label="[17:38:46]">&lt;stikonas[m]&gt;</a></span><span class="message">git submodules point to specific commit, so that should be fine</span></div><div class="line" id="173859"><span class="nick" style="color:#6d2462"><a href="#173859" label="[17:38:59]">&lt;rickmasters&gt;</a></span><span class="message">funny, you'll find $@ and $^ in my history</span></div><div class="line" id="174213"><span class="nick" style="color:#8dd3c7"><a href="#174213" label="[17:42:13]">&lt;unmatched-paren&gt;</a></span><span class="message">rickmasters: surely you can just do git submodule add <a rel="nofollow" href="https://github.com/oriansj/stage0-posix">https://github.com/oriansj/stage0-posix</a>  &lt;COMMIT&gt;?</span></div><div class="line" id="174221"><span class="nick" style="color:#8dd3c7"><a href="#174221" label="[17:42:21]">&lt;unmatched-paren&gt;</a></span><span class="message">to freeze to a commit</span></div><div class="line" id="174244"><span class="nick" style="color:#6d2462"><a href="#174244" label="[17:42:44]">&lt;rickmasters&gt;</a></span><span class="message">i removed the make variables to its easy to cut and paste at the command line (as demonstrated above)</span></div><div class="line" id="174258"><span class="nick" style="color:#8dd3c7"><a href="#174258" label="[17:42:58]">&lt;unmatched-paren&gt;</a></span><span class="message">ah i see</span></div><div class="line" id="174354"><span class="nick" style="color:#6d2462"><a href="#174354" label="[17:43:54]">&lt;rickmasters&gt;</a></span><span class="message">but i agree its kinda best practice for maintenance of the makefile</span></div><div class="line" id="174603"><span class="nick" style="color:#6d2462"><a href="#174603" label="[17:46:03]">&lt;rickmasters&gt;</a></span><span class="message">unmatched-paren: no doubt submodules would work, i don't have a strong feeling about it</span></div><div class="line" id="174652"><span class="nick" style="color:#6d2462"><a href="#174652" label="[17:46:52]">&lt;rickmasters&gt;</a></span><span class="message">i just read scary stories about merging and branches and forgetting to update and just said, ah screw it</span></div><div class="line" id="174732"><span class="nick" style="color:#6d2462"><a href="#174732" label="[17:47:32]">&lt;rickmasters&gt;</a></span><span class="message">lame, i know :p</span></div><div class="line" id="174758"><span class="nick" style="color:#8dd3c7"><a href="#174758" label="[17:47:58]">&lt;unmatched-paren&gt;</a></span><span class="message">i _think_ the branching/merging problems only happen if two people add submodules seperately and try to merge</span></div><div class="line" id="174843"><span class="nick" style="color:#8dd3c7"><a href="#174843" label="[17:48:43]">&lt;unmatched-paren&gt;</a></span><span class="message">forgetting to update sounds like more of a problem with just copying it in :P</span></div><div class="line" id="174951"><span class="nick" style="color:#6d2462"><a href="#174951" label="[17:49:51]">&lt;rickmasters&gt;</a></span><span class="message">then i read about git subtrees and experienced a little analysis paralysis, had to move on</span></div><div class="line" id="175123"><span class="nick" style="color:#8dd3c7"><a href="#175123" label="[17:51:23]">&lt;unmatched-paren&gt;</a></span><span class="message">ok, i'm running boot2now now :) seems to be working</span></div><div class="line" id="175514"><span class="nick" style="color:#8dd3c7"><a href="#175514" label="[17:55:14]">&lt;unmatched-paren&gt;</a></span><span class="message">&quot;Hello World!&quot; it works \o/</span></div><div class="line" id="175525"><span class="nick" style="color:#6d2462"><a href="#175525" label="[17:55:25]">&lt;rickmasters&gt;</a></span><span class="message">woo hoo!</span></div><div class="line" id="180036"><span class="nick" style="color:#d9d9d9"><a href="#180036" label="[18:00:36]">&lt;Hagfish&gt;</a></span><span class="message">fantastic</span></div><div class="line" id="181342"><span class="nick" style="color:#6d2462"><a href="#181342" label="[18:13:42]">&lt;rickmasters&gt;</a></span><span class="message">unmatched-paren: i'll work on switching to submodules</span></div><div class="line" id="184124"><span class="nick" style="color:#8dd3c7"><a href="#184124" label="[18:41:24]">&lt;unmatched-paren&gt;</a></span><span class="message">oriansj: does m2 support `restrict`?</span></div><div class="line" id="184135"><span class="nick" style="color:#8dd3c7"><a href="#184135" label="[18:41:35]">&lt;unmatched-paren&gt;</a></span><span class="message">as in, ignoring it instead of throwing an error</span></div><div class="line" id="184940"><span class="nick" style="color:#bc80bd"><a href="#184940" label="[18:49:40]">&lt;stikonas[m]&gt;</a></span><span class="message">unmatched-paren: no</span></div><div class="line" id="185638"><span class="nick" style="color:#bc80bd"><a href="#185638" label="[18:56:38]">&lt;stikonas[m]&gt;</a></span><span class="message">unmatched-paren: see <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/blob/master/cc_core.c#L2351">https://github.com/oriansj/M2-Planet/blob/master/cc_core.c#L2351</a> </span></div><div class="line" id="185651"><span class="nick" style="color:#8dd3c7"><a href="#185651" label="[18:56:51]">&lt;unmatched-paren&gt;</a></span><span class="message">thanks</span></div><div class="line" id="185746"><span class="nick" style="color:#bc80bd"><a href="#185746" label="[18:57:46]">&lt;stikonas[m]&gt;</a></span><span class="message">You might be able to ignore it here</span></div><div class="line" id="185909"><span class="nick" style="color:#8dd3c7"><a href="#185909" label="[18:59:09]">&lt;unmatched-paren&gt;</a></span><span class="message">i'm implementing some things in m2libc that seem to be defined using restrict in typical libcs, so i was wondering whether i should use it</span></div><div class="line" id="185925"><span class="nick" style="color:#8dd3c7"><a href="#185925" label="[18:59:25]">&lt;unmatched-paren&gt;</a></span><span class="message">*with arguments that are defined using restrict</span></div><div class="line" id="191143"><span class="nick" style="color:#3c5b35"><a href="#191143" label="[19:11:43]">&lt;Franciman&gt;</a></span><span class="message">is there any document explaining the subset of C supported by mescc and m2-planet?</span></div><div class="line" id="191617"><span class="nick" style="color:#af8d2f"><a href="#191617" label="[19:16:17]">&lt;janneke&gt;</a></span><span class="message">no</span></div><div class="line" id="200423"><span class="nick" style="color:#6b8072"><a href="#200423" label="[20:04:23]">&lt;stikonas&gt;</a></span><span class="message">Franciman: you can get some idea of what is supported by M2-Planet if you look at function names in cc_core.c</span></div><div class="line" id="200547"><span class="nick" style="color:#6b8072"><a href="#200547" label="[20:05:47]">&lt;stikonas&gt;</a></span><span class="message">and there are sometimes comments above them that display what is processed, e.g. <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/blob/master/cc_core.c#L2254">https://github.com/oriansj/M2-Planet/blob/master/cc_core.c#L2254</a> </span></div><div class="line" id="200634"><span class="nick" style="color:#3c5b35"><a href="#200634" label="[20:06:34]">&lt;Franciman&gt;</a></span><span class="message">thanks</span></div><div class="line" id="200940"><span class="nick" style="color:#6b8072"><a href="#200940" label="[20:09:40]">&lt;stikonas&gt;</a></span><span class="message">there is also very basic macro pre-processor in <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/blob/master/cc_macro.c">https://github.com/oriansj/M2-Planet/blob/master/cc_macro.c</a>  (basically handles defines and their define expressions). There is a more sophisticated pre-processor M2-Mesoplanet which can also handle includes and more complicated function-style defines</span></div><div class="line" id="201003"><span class="nick" style="color:#6b8072"><a href="#201003" label="[20:10:03]">&lt;stikonas&gt;</a></span><span class="message">e.g. #define SUM(A, B) A + B</span></div><div class="line" id="201037"><span class="nick" style="color:#6b8072"><a href="#201037" label="[20:10:37]">&lt;stikonas&gt;</a></span><span class="message">I'm less familiar with mescc but mescc is far more capable</span></div><div class="line" id="201055"><span class="nick" style="color:#3c5b35"><a href="#201055" label="[20:10:55]">&lt;Franciman&gt;</a></span><span class="message">m2-planet seems already very capable!!</span></div><div class="line" id="201119"><span class="nick" style="color:#6b8072"><a href="#201119" label="[20:11:19]">&lt;stikonas&gt;</a></span><span class="message">yes, it's not bad</span></div><div class="line" id="201200"><span class="nick" style="color:#6b8072"><a href="#201200" label="[20:12:00]">&lt;stikonas&gt;</a></span><span class="message">but some stuff is missing, e.g. i++ wouldn't work or int i[2][3]</span></div><div class="line" id="201233"><span class="nick" style="color:#6b8072"><a href="#201233" label="[20:12:33]">&lt;stikonas&gt;</a></span><span class="message">also no support for structs on stack, structs have to be used via pointer</span></div><div class="line" id="201251"><span class="nick" style="color:#6b8072"><a href="#201251" label="[20:12:51]">&lt;stikonas&gt;</a></span><span class="message">and no support for . operator</span></div><div class="line" id="201434"><span class="nick" style="color:#6b8072"><a href="#201434" label="[20:14:34]">&lt;stikonas&gt;</a></span><span class="message">M2-Planet itself is written in simpler dialect, so that cc_x86 and other cc_* compiler could build it</span></div><div class="line" id="201636"><span class="nick" style="color:#3c5b35"><a href="#201636" label="[20:16:36]">&lt;Franciman&gt;</a></span><span class="message">neat</span></div><div class="line" id="231047"><span class="nick" style="color:#2e2a4a"><a href="#231047" label="[23:10:47]">&lt;muurkha&gt;</a></span><span class="message">stikonas: would (i++) work?</span></div><div class="line" id="231141"><span class="nick" style="color:#bc80bd"><a href="#231141" label="[23:11:41]">&lt;stikonas[m]&gt;</a></span><span class="message">muurkha: no, not implemented</span></div><div class="line" id="231229"><span class="nick" style="color:#bc80bd"><a href="#231229" label="[23:12:29]">&lt;stikonas[m]&gt;</a></span><span class="message">i += 1 does work now in 1.10</span></div><div class="line" id="231255"><span class="nick" style="color:#bc80bd"><a href="#231255" label="[23:12:55]">&lt;stikonas[m]&gt;</a></span><span class="message">Before it was only i = i+1</span></div><div class="line" id="231303"><span class="nick" style="color:#2e2a4a"><a href="#231303" label="[23:13:03]">&lt;muurkha&gt;</a></span><span class="message">oh, you just mean in the compiler, I thought you meant in the preprocessor</span></div><div class="line" id="231346"><span class="nick" style="color:#bc80bd"><a href="#231346" label="[23:13:46]">&lt;stikonas[m]&gt;</a></span><span class="message">Yes, in the compiler</span></div><div class="line" id="231508"><span class="nick" style="color:#2e2a4a"><a href="#231508" label="[23:15:08]">&lt;muurkha&gt;</a></span><span class="message">I want to point out that #define SUM(A, B) A + B is bad style unless it's working around a preprocessor limitation</span></div><div class="line" id="231558"><span class="nick" style="color:#2e2a4a"><a href="#231558" label="[23:15:58]">&lt;muurkha&gt;</a></span><span class="message">because SUM(x ^ y, z) ends up as x ^ y + z which misparses as x ^ (y + z)</span></div><div class="line" id="231649"><span class="nick" style="color:#2e2a4a"><a href="#231649" label="[23:16:49]">&lt;muurkha&gt;</a></span><span class="message">#define SUM(A, B) (A) + (B) solves that problem</span></div><div class="line" id="232818"><span class="nick" style="color:#bc80bd"><a href="#232818" label="[23:28:18]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, that works too, I was just pointing out that function type macros work</span></div><div class="line" id="232837"><span class="nick" style="color:#bc80bd"><a href="#232837" label="[23:28:37]">&lt;stikonas[m]&gt;</a></span><span class="message">What's on the right hand side is not important</span></div><div class="line" id="232911"><span class="nick" style="color:#bc80bd"><a href="#232911" label="[23:29:11]">&lt;stikonas[m]&gt;</a></span><span class="message">It can be even another define &quot;function&quot;</span></div><div class="line" id="232930"><span class="nick" style="color:#bc80bd"><a href="#232930" label="[23:29:30]">&lt;stikonas[m]&gt;</a></span><span class="message">M2-Mesoplanet supports that</span></div><div class="line" id="232948"><span class="nick" style="color:#2e2a4a"><a href="#232948" label="[23:29:48]">&lt;muurkha&gt;</a></span><span class="message">yeah, it's a tangent, but I thought it was worth mentioning because that's a &quot;red alert&quot; line of code</span></div><div class="line" id="233009"><span class="nick" style="color:#2e2a4a"><a href="#233009" label="[23:30:09]">&lt;muurkha&gt;</a></span><span class="message">sorry to distract from your intended point</span></div><br /></div></body></html>