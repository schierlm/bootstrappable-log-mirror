<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-08-23.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="031937"><span class="nick">***</span><span class="message notice">terpri_ is now known as terpri</span></div><div class="line" id="091019"><span class="nick" style="color:#8dd3c7"><a href="#091019" label="[09:10:19]">&lt;janneke&gt;</a></span><span class="message">dannym: see WIP commit: <a rel="nofollow" href="https://gitlab.com/janneke/tinycc">https://gitlab.com/janneke/tinycc</a>  @ mes-0.23</span></div><div class="line" id="091033"><span class="nick" style="color:#8dd3c7"><a href="#091033" label="[09:10:33]">&lt;janneke&gt;</a></span><span class="message">dannym: and mes wip branch</span></div><div class="line" id="094806"><span class="nick" style="color:#8dd3c7"><a href="#094806" label="[09:48:06]">&lt;janneke&gt;</a></span><span class="message">dannym: there's also some bad news...</span></div><div class="line" id="094809"><span class="nick" style="color:#8dd3c7"><a href="#094809" label="[09:48:09]">&lt;janneke&gt;</a></span><span class="message">$ ./arm-unknown-linux-gnueabihf-tcc --help</span></div><div class="line" id="094810"><span class="nick" style="color:#8dd3c7"><a href="#094810" label="[09:48:10]">&lt;janneke&gt;</a></span><span class="message">qemu: uncaught target signal 11 (Segmentation fault) - core dumped</span></div><div class="line" id="094810"><span class="nick" style="color:#8dd3c7"><a href="#094810" label="[09:48:10]">&lt;janneke&gt;</a></span><span class="message">Segmentation fault</span></div><div class="line" id="094845"><span class="nick" style="color:#8dd3c7"><a href="#094845" label="[09:48:45]">&lt;janneke&gt;</a></span><span class="message">dannym: and...</span></div><div class="line" id="094851"><span class="nick" style="color:#8dd3c7"><a href="#094851" label="[09:48:51]">&lt;janneke&gt;</a></span><span class="message">tcc.S:83120 :Recieved invalid other; strh__%r2,(%r1)</span></div><div class="line" id="094852"><span class="nick" style="color:#8dd3c7"><a href="#094852" label="[09:48:52]">&lt;janneke&gt;</a></span><span class="message">mescc: failed: M1 --LittleEndian --architecture armv7l -f mes-source/lib/arm-mes/arm.M1 -f tcc.S -o tcc.o</span></div><div class="line" id="101437"><span class="nick" style="color:#8dd3c7"><a href="#101437" label="[10:14:37]">&lt;janneke&gt;</a></span><span class="message">ah, strh is a typo!</span></div><div class="line" id="141210"><span class="nick" style="color:#2e2a4a"><a href="#141210" label="[14:12:10]">&lt;dannym&gt;</a></span><span class="message">janneke: Is it?</span></div><div class="line" id="141244"><span class="nick" style="color:#2e2a4a"><a href="#141244" label="[14:12:44]">&lt;dannym&gt;</a></span><span class="message">janneke: It should store a half-word</span></div><div class="line" id="141332"><span class="nick" style="color:#2e2a4a"><a href="#141332" label="[14:13:32]">&lt;dannym&gt;</a></span><span class="message">janneke: Ah, yeah, too few underlines</span></div><div class="line" id="141353"><span class="nick" style="color:#2e2a4a"><a href="#141353" label="[14:13:53]">&lt;dannym&gt;</a></span><span class="message">In armv4:word-r0-mem-&gt;r1-mem</span></div><div class="line" id="141808"><span class="nick" style="color:#8dd3c7"><a href="#141808" label="[14:18:08]">&lt;janneke&gt;</a></span><span class="message">dannym: yeah, but also the instruction itself was missing</span></div><div class="line" id="141835"><span class="nick" style="color:#8dd3c7"><a href="#141835" label="[14:18:35]">&lt;janneke&gt;</a></span><span class="message">dannym: i'm pushing WIP commits to mes wip and tcc branch mes-0.23</span></div><div class="line" id="141954"><span class="nick" style="color:#8dd3c7"><a href="#141954" label="[14:19:54]">&lt;janneke&gt;</a></span><span class="message">dannym: the local/development had bitrotten (only the guix bootstrap.sh build still worked)</span></div><div class="line" id="142013"><span class="nick" style="color:#8dd3c7"><a href="#142013" label="[14:20:13]">&lt;janneke&gt;</a></span><span class="message">dannym: and also, was too x86 specific</span></div><div class="line" id="142438"><span class="nick" style="color:#2e2a4a"><a href="#142438" label="[14:24:38]">&lt;dannym&gt;</a></span><span class="message">janneke: Okay, thanks :)</span></div><div class="line" id="142551"><span class="nick" style="color:#8dd3c7"><a href="#142551" label="[14:25:51]">&lt;janneke&gt;</a></span><span class="message">dannym: for the arm instructions i'm kinda &quot;guessing&quot;, hoping its okay --please have a sharp look</span></div><div class="line" id="142558"><span class="nick" style="color:#2e2a4a"><a href="#142558" label="[14:25:58]">&lt;dannym&gt;</a></span><span class="message">janneke: You have to reverse the endianness</span></div><div class="line" id="142622"><span class="nick" style="color:#2e2a4a"><a href="#142622" label="[14:26:22]">&lt;dannym&gt;</a></span><span class="message">janneke: Since we are targeting ARM little endian</span></div><div class="line" id="142640"><span class="nick" style="color:#2e2a4a"><a href="#142640" label="[14:26:40]">&lt;dannym&gt;</a></span><span class="message">janneke: See this:</span></div><div class="line" id="142641"><span class="nick" style="color:#2e2a4a"><a href="#142641" label="[14:26:41]">&lt;dannym&gt;</a></span><span class="message"> DEFINE strh___%r4,(%r4) b040c4e1  # strh    r4, [r4]</span></div><div class="line" id="142643"><span class="nick" style="color:#2e2a4a"><a href="#142643" label="[14:26:43]">&lt;dannym&gt;</a></span><span class="message">But:</span></div><div class="line" id="142653"><span class="nick" style="color:#2e2a4a"><a href="#142653" label="[14:26:53]">&lt;dannym&gt;</a></span><span class="message">You have:</span></div><div class="line" id="142654"><span class="nick" style="color:#2e2a4a"><a href="#142654" label="[14:26:54]">&lt;dannym&gt;</a></span><span class="message">+# tcc</span></div><div class="line" id="142654"><span class="nick" style="color:#2e2a4a"><a href="#142654" label="[14:26:54]">&lt;dannym&gt;</a></span><span class="message">+DEFINE ldrsb__%r2,(%r0) e1d020d0  # ldrsb   r2, [r0]</span></div><div class="line" id="142654"><span class="nick" style="color:#2e2a4a"><a href="#142654" label="[14:26:54]">&lt;dannym&gt;</a></span><span class="message">+DEFINE strh___%r2,(%r1) e1c120b0  # strh    r2, [r1]</span></div><div class="line" id="142704"><span class="nick" style="color:#2e2a4a"><a href="#142704" label="[14:27:04]">&lt;dannym&gt;</a></span><span class="message">The bytes should be reversed</span></div><div class="line" id="142717"><span class="nick" style="color:#8dd3c7"><a href="#142717" label="[14:27:17]">&lt;janneke&gt;</a></span><span class="message">dannym: oh!</span></div><div class="line" id="142718"><span class="nick" style="color:#2e2a4a"><a href="#142718" label="[14:27:18]">&lt;dannym&gt;</a></span><span class="message">Like one always stores a 32 bit number into little endian slot</span></div><div class="line" id="142729"><span class="nick" style="color:#8dd3c7"><a href="#142729" label="[14:27:29]">&lt;janneke&gt;</a></span><span class="message">that's weird</span></div><div class="line" id="142733"><span class="nick" style="color:#2e2a4a"><a href="#142733" label="[14:27:33]">&lt;dannym&gt;</a></span><span class="message">Yeah, it is</span></div><div class="line" id="142748"><span class="nick" style="color:#2e2a4a"><a href="#142748" label="[14:27:48]">&lt;dannym&gt;</a></span><span class="message">It's because M1 interprets e1d020d0 as the bytes e1, d0, 20, d0</span></div><div class="line" id="142818"><span class="nick" style="color:#2e2a4a"><a href="#142818" label="[14:28:18]">&lt;dannym&gt;</a></span><span class="message">I asked Jeremiah back then to change it, but then thought better of it.  It's easier to review if it doesn't do more complicated stuff than bytes</span></div><div class="line" id="142829"><span class="nick" style="color:#2e2a4a"><a href="#142829" label="[14:28:29]">&lt;dannym&gt;</a></span><span class="message">Also, it would not be backward compatible if we changed it now</span></div><div class="line" id="142830"><span class="nick" style="color:#8dd3c7"><a href="#142830" label="[14:28:30]">&lt;janneke&gt;</a></span><span class="message">ah, right</span></div><div class="line" id="142859"><span class="nick" style="color:#8dd3c7"><a href="#142859" label="[14:28:59]">&lt;janneke&gt;</a></span><span class="message">anyway, i now have a segfaulting, gcc-built  &quot;./arm-unknown-linux-gnueabihf-tcc --help&quot;</span></div><div class="line" id="142925"><span class="nick" style="color:#8dd3c7"><a href="#142925" label="[14:29:25]">&lt;janneke&gt;</a></span><span class="message">and...interestinly, a &quot;somewhat working&quot; &quot;mes-tcc --help&quot;</span></div><div class="line" id="142943"><span class="nick" style="color:#8dd3c7"><a href="#142943" label="[14:29:43]">&lt;janneke&gt;</a></span><span class="message">(that is to say, --help does not segfault, compilation of a minimal .c still does)</span></div><div class="line" id="143040"><span class="nick" style="color:#8dd3c7"><a href="#143040" label="[14:30:40]">&lt;janneke&gt;</a></span><span class="message">dannym: you'll notic that i switch back to using guile+mescc now -- faster and better error traces</span></div><div class="line" id="144855"><span class="nick" style="color:#6b8072"><a href="#144855" label="[14:48:55]">&lt;OriansJ`&gt;</a></span><span class="message">janneke: please let me know when you have a commit where mescc works well on guile so that I can snapshot it for mes-m2</span></div><div class="line" id="145321"><span class="nick" style="color:#2e2a4a"><a href="#145321" label="[14:53:21]">&lt;dannym&gt;</a></span><span class="message">janneke: ldrsb r2, [r0] should be d0 20 d0 e1; strh r2, [r1] should be b0 20 c1 e1; strb r2, [r1] should be 00 20 c1 e5</span></div><div class="line" id="145339"><span class="nick" style="color:#2e2a4a"><a href="#145339" label="[14:53:39]">&lt;dannym&gt;</a></span><span class="message">(I don't think it's allowed to have the spaces in M1 btw--it's just for clarity)</span></div><div class="line" id="145343"><span class="nick" style="color:#2e2a4a"><a href="#145343" label="[14:53:43]">&lt;dannym&gt;</a></span><span class="message">For that*</span></div><div class="line" id="145631"><span class="nick" style="color:#2e2a4a"><a href="#145631" label="[14:56:31]">&lt;dannym&gt;</a></span><span class="message">janneke: For the error you got:</span></div><div class="line" id="145631"><span class="nick" style="color:#2e2a4a"><a href="#145631" label="[14:56:31]">&lt;dannym&gt;</a></span><span class="message">+// using -lgcc</span></div><div class="line" id="145631"><span class="nick" style="color:#2e2a4a"><a href="#145631" label="[14:56:31]">&lt;dannym&gt;</a></span><span class="message">+// lib/gcc/arm-unknown-linux-gnueabihf/7.5.0/libgcc.a(_dvmd_lnx.o): in function `__aeabi_ldiv0':</span></div><div class="line" id="145631"><span class="nick" style="color:#2e2a4a"><a href="#145631" label="[14:56:31]">&lt;dannym&gt;</a></span><span class="message">+// (.text+0x6): undefined reference to `raise'</span></div><div class="line" id="145644"><span class="nick" style="color:#2e2a4a"><a href="#145644" label="[14:56:44]">&lt;dannym&gt;</a></span><span class="message">I was careful to name internal functions with preceding &quot;__&quot;</span></div><div class="line" id="145653"><span class="nick" style="color:#2e2a4a"><a href="#145653" label="[14:56:53]">&lt;dannym&gt;</a></span><span class="message">So our function is called &quot;__raise&quot;</span></div><div class="line" id="145713"><span class="nick" style="color:#2e2a4a"><a href="#145713" label="[14:57:13]">&lt;dannym&gt;</a></span><span class="message">I guess we can add a tcc compatibility shim for raise, or an alias or something</span></div><div class="line" id="145722"><span class="nick" style="color:#2e2a4a"><a href="#145722" label="[14:57:22]">&lt;dannym&gt;</a></span><span class="message">&quot;raise&quot;</span></div><div class="line" id="145736"><span class="nick" style="color:#2e2a4a"><a href="#145736" label="[14:57:36]">&lt;dannym&gt;</a></span><span class="message">Wait, gcc</span></div><div class="line" id="145739"><span class="nick" style="color:#2e2a4a"><a href="#145739" label="[14:57:39]">&lt;dannym&gt;</a></span><span class="message">it's gcc</span></div><div class="line" id="145748"><span class="nick" style="color:#2e2a4a"><a href="#145748" label="[14:57:48]">&lt;dannym&gt;</a></span><span class="message">not tcc</span></div><div class="line" id="145821"><span class="nick" style="color:#2e2a4a"><a href="#145821" label="[14:58:21]">&lt;dannym&gt;</a></span><span class="message">__raise is in:</span></div><div class="line" id="145821"><span class="nick" style="color:#2e2a4a"><a href="#145821" label="[14:58:21]">&lt;dannym&gt;</a></span><span class="message">./lib/linux/x86-mes-mescc/syscall-internal.c:__raise(int signum)</span></div><div class="line" id="145821"><span class="nick" style="color:#2e2a4a"><a href="#145821" label="[14:58:21]">&lt;dannym&gt;</a></span><span class="message">./lib/linux/x86-mes-gcc/syscall-internal.c:__raise(int signum)</span></div><div class="line" id="145821"><span class="nick" style="color:#2e2a4a"><a href="#145821" label="[14:58:21]">&lt;dannym&gt;</a></span><span class="message">./lib/linux/arm-mes-mescc/syscall-internal.c:__raise(int signum)</span></div><div class="line" id="145821"><span class="nick" style="color:#2e2a4a"><a href="#145821" label="[14:58:21]">&lt;dannym&gt;</a></span><span class="message">./lib/linux/arm-mes-gcc/syscall-internal.c:__raise(int signum)</span></div><div class="line" id="145857"><span class="nick" style="color:#2e2a4a"><a href="#145857" label="[14:58:57]">&lt;dannym&gt;</a></span><span class="message">Or we could rename ours--but ehhh that's not nice, polluting the user namespace (would be OK for now I guess)</span></div><div class="line" id="150012"><span class="nick" style="color:#8dd3c7"><a href="#150012" label="[15:00:12]">&lt;janneke&gt;</a></span><span class="message">dannym: i have fixup'ed and reset WIP for the M1 instructions</span></div><div class="line" id="150054"><span class="nick" style="color:#8dd3c7"><a href="#150054" label="[15:00:54]">&lt;janneke&gt;</a></span><span class="message">OriansJ`: we're working (slowly) towards 0.23 which will contain some bugfixes but mostly ARM work</span></div><div class="line" id="150125"><span class="nick" style="color:#8dd3c7"><a href="#150125" label="[15:01:25]">&lt;janneke&gt;</a></span><span class="message">OriansJ`: 0.22 does not work for you?  no harm in waiting for 0.23...not sure what you're looking for ;-)</span></div><div class="line" id="150225"><span class="nick" style="color:#8dd3c7"><a href="#150225" label="[15:02:25]">&lt;janneke&gt;</a></span><span class="message">dannym: about raise, i hesitated...but i guess there's no harm in moving {raise,getpid,kill} (if that's all?) from libc+gnu to libc+tcc</span></div><div class="line" id="150247"><span class="nick" style="color:#8dd3c7"><a href="#150247" label="[15:02:47]">&lt;janneke&gt;</a></span><span class="message">dannym: having that separation is of debatable value anyways...</span></div><div class="line" id="150324"><span class="nick" style="color:#2e2a4a"><a href="#150324" label="[15:03:24]">&lt;dannym&gt;</a></span><span class="message">janneke: If you move the actual function, you force using the rest of libc</span></div><div class="line" id="150341"><span class="nick" style="color:#2e2a4a"><a href="#150341" label="[15:03:41]">&lt;dannym&gt;</a></span><span class="message">janneke: Because they set errno, and errno is in libc</span></div><div class="line" id="150402"><span class="nick" style="color:#8dd3c7"><a href="#150402" label="[15:04:02]">&lt;janneke&gt;</a></span><span class="message">oh...yeah, the (if that's all?)-bit worried me</span></div><div class="line" id="150407"><span class="nick" style="color:#8dd3c7"><a href="#150407" label="[15:04:07]">&lt;janneke&gt;</a></span><span class="message">hmm</span></div><div class="line" id="150430"><span class="nick" style="color:#2e2a4a"><a href="#150430" label="[15:04:30]">&lt;dannym&gt;</a></span><span class="message">For example, it's like this (or should be): int raise() { status =  __raise(...); if (status &lt; 0) errno = -status; }</span></div><div class="line" id="150505"><span class="nick" style="color:#2e2a4a"><a href="#150505" label="[15:05:05]">&lt;dannym&gt;</a></span><span class="message">Just checked the manual page, raise() doesn't set errno</span></div><div class="line" id="150510"><span class="nick" style="color:#2e2a4a"><a href="#150510" label="[15:05:10]">&lt;dannym&gt;</a></span><span class="message">Okay then :)</span></div><div class="line" id="150612"><span class="nick" style="color:#2e2a4a"><a href="#150612" label="[15:06:12]">&lt;dannym&gt;</a></span><span class="message">janneke: But kill() does.  And we use kill in raise</span></div><div class="line" id="150652"><span class="nick" style="color:#2e2a4a"><a href="#150652" label="[15:06:52]">&lt;dannym&gt;</a></span><span class="message">So raise sets errno :P</span></div><div class="line" id="150758"><span class="nick" style="color:#2e2a4a"><a href="#150758" label="[15:07:58]">&lt;dannym&gt;</a></span><span class="message">janneke: I'd suggest to just use our __raise as &quot;raise&quot; and delete &quot;raise&quot; from ./lib/posix/raise.c</span></div><div class="line" id="150856"><span class="nick" style="color:#2e2a4a"><a href="#150856" label="[15:08:56]">&lt;dannym&gt;</a></span><span class="message">Otherwise that's just inviting weird complications</span></div><div class="line" id="151143"><span class="nick" style="color:#2e2a4a"><a href="#151143" label="[15:11:43]">&lt;dannym&gt;</a></span><span class="message">There's no prototype for &quot;raise&quot; in include/ in mes-wip btw</span></div><div class="line" id="151149"><span class="nick" style="color:#2e2a4a"><a href="#151149" label="[15:11:49]">&lt;dannym&gt;</a></span><span class="message">O_o</span></div><div class="line" id="151259"><span class="nick" style="color:#8dd3c7"><a href="#151259" label="[15:12:59]">&lt;janneke&gt;</a></span><span class="message">dannym: okay, let's try that (raising __raise to raise)</span></div><div class="line" id="151345"><span class="nick" style="color:#2e2a4a"><a href="#151345" label="[15:13:45]">&lt;dannym&gt;</a></span><span class="message">I'd still only introduce &quot;raise&quot; without &quot;__&quot; in the lib/linux/*-gcc directories</span></div><div class="line" id="151353"><span class="nick" style="color:#2e2a4a"><a href="#151353" label="[15:13:53]">&lt;dannym&gt;</a></span><span class="message">No reason to pollute the other ones</span></div><div class="line" id="151418"><span class="nick" style="color:#2e2a4a"><a href="#151418" label="[15:14:18]">&lt;dannym&gt;</a></span><span class="message">(By &quot;pollute&quot; I mean that then the user can't have a function &quot;raise&quot; in their programs anymore... even when he doesn't use libc...)</span></div><div class="line" id="151420"><span class="nick" style="color:#8dd3c7"><a href="#151420" label="[15:14:20]">&lt;janneke&gt;</a></span><span class="message">yes, please do!</span></div><div class="line" id="151528"><span class="nick" style="color:#8dd3c7"><a href="#151528" label="[15:15:28]">&lt;janneke&gt;</a></span><span class="message">we can reconsider/add/pollute when the need arisese (prolly never)</span></div><div class="line" id="151732"><span class="nick" style="color:#8dd3c7"><a href="#151732" label="[15:17:32]">&lt;janneke&gt;</a></span><span class="message">dannym: would it be more handy if we push+reset wip stuff/branches to our gitlabs -- i hate to reset stuff you push to savannah -- wdyt?</span></div><div class="line" id="151953"><span class="nick" style="color:#2e2a4a"><a href="#151953" label="[15:19:53]">&lt;dannym&gt;</a></span><span class="message">My plan doesn't work</span></div><div class="line" id="152030"><span class="nick" style="color:#2e2a4a"><a href="#152030" label="[15:20:30]">&lt;dannym&gt;</a></span><span class="message">syscall-internal is in libmescc, and presumably a gcc-built thing doesn't use both -lmescc and -lgcc</span></div><div class="line" id="152058"><span class="nick" style="color:#2e2a4a"><a href="#152058" label="[15:20:58]">&lt;dannym&gt;</a></span><span class="message">So I think that's why they don't have &quot;__&quot; before the &quot;raise&quot;: They want the user to provide it</span></div><div class="line" id="152110"><span class="nick" style="color:#2e2a4a"><a href="#152110" label="[15:21:10]">&lt;dannym&gt;</a></span><span class="message">Only way that makes sense</span></div><div class="line" id="152127"><span class="nick" style="color:#2e2a4a"><a href="#152127" label="[15:21:27]">&lt;dannym&gt;</a></span><span class="message">*provide the implementation</span></div><div class="line" id="152200"><span class="nick" style="color:#2e2a4a"><a href="#152200" label="[15:22:00]">&lt;dannym&gt;</a></span><span class="message">If you want, we can use gitlab--I don't care so much either way because I estimate there will be only very few ARM-specific changes now</span></div><div class="line" id="152213"><span class="nick" style="color:#2e2a4a"><a href="#152213" label="[15:22:13]">&lt;dannym&gt;</a></span><span class="message">At least to get the first release done</span></div><div class="line" id="152221"><span class="nick" style="color:#2e2a4a"><a href="#152221" label="[15:22:21]">&lt;dannym&gt;</a></span><span class="message">Later on I should do a lot of cleanup</span></div><div class="line" id="152229"><span class="nick" style="color:#2e2a4a"><a href="#152229" label="[15:22:29]">&lt;dannym&gt;</a></span><span class="message">Mostly so it's easier to remove</span></div><div class="line" id="152233"><span class="nick" style="color:#2e2a4a"><a href="#152233" label="[15:22:33]">&lt;dannym&gt;</a></span><span class="message">oops</span></div><div class="line" id="152235"><span class="nick" style="color:#2e2a4a"><a href="#152235" label="[15:22:35]">&lt;dannym&gt;</a></span><span class="message">Mostly so it's easier to review</span></div><div class="line" id="152244"><span class="nick" style="color:#2e2a4a"><a href="#152244" label="[15:22:44]">&lt;dannym&gt;</a></span><span class="message">Sure, let's use gitlab</span></div><div class="line" id="152249"><span class="nick" style="color:#2e2a4a"><a href="#152249" label="[15:22:49]">&lt;dannym&gt;</a></span><span class="message">I can push whereever :)</span></div><div class="line" id="152450"><span class="nick" style="color:#2e2a4a"><a href="#152450" label="[15:24:50]">&lt;dannym&gt;</a></span><span class="message">janneke: What's the entire command line of this error-message-causing tcc compilation you have in lib/mes/div.c ?</span></div><div class="line" id="152457"><span class="nick" style="color:#2e2a4a"><a href="#152457" label="[15:24:57]">&lt;dannym&gt;</a></span><span class="message">--- a/lib/mes/div.c</span></div><div class="line" id="152457"><span class="nick" style="color:#2e2a4a"><a href="#152457" label="[15:24:57]">&lt;dannym&gt;</a></span><span class="message">+++ b/lib/mes/div.c</span></div><div class="line" id="152457"><span class="nick" style="color:#2e2a4a"><a href="#152457" label="[15:24:57]">&lt;dannym&gt;</a></span><span class="message">@@ -169,4 +169,18 @@ __aeabi_uidiv (unsigned long a, unsigned long b)</span></div><div class="line" id="152457"><span class="nick" style="color:#2e2a4a"><a href="#152457" label="[15:24:57]">&lt;dannym&gt;</a></span><span class="message"> {</span></div><div class="line" id="152457"><span class="nick" style="color:#2e2a4a"><a href="#152457" label="[15:24:57]">&lt;dannym&gt;</a></span><span class="message">   return __mesabi_uldiv (a, b, 0);</span></div><div class="line" id="152458"><span class="nick" style="color:#2e2a4a"><a href="#152458" label="[15:24:58]">&lt;dannym&gt;</a></span><span class="message"> }</span></div><div class="line" id="152500"><span class="nick" style="color:#2e2a4a"><a href="#152500" label="[15:25:00]">&lt;dannym&gt;</a></span><span class="message">+</span></div><div class="line" id="152502"><span class="nick" style="color:#2e2a4a"><a href="#152502" label="[15:25:02]">&lt;dannym&gt;</a></span><span class="message">+// for tcc:</span></div><div class="line" id="152504"><span class="nick" style="color:#2e2a4a"><a href="#152504" label="[15:25:04]">&lt;dannym&gt;</a></span><span class="message">+// arm-unknown-linux-gnueabihf-gcc -g -o arm-unknown-linux-gnueabihf-tcc -nostdinc -nostdlib -fno-builtin ...</span></div><div class="line" id="152507"><span class="nick" style="color:#2e2a4a"><a href="#152507" label="[15:25:07]">&lt;dannym&gt;</a></span><span class="message">+// using -lgcc</span></div><div class="line" id="152509"><span class="nick" style="color:#2e2a4a"><a href="#152509" label="[15:25:09]">&lt;dannym&gt;</a></span><span class="message">+// lib/gcc/arm-unknown-linux-gnueabihf/7.5.0/libgcc.a(_dvmd_lnx.o): in function `__aeabi_ldiv0':</span></div><div class="line" id="152511"><span class="nick" style="color:#2e2a4a"><a href="#152511" label="[15:25:11]">&lt;dannym&gt;</a></span><span class="message">+// (.text+0x6): undefined reference to `raise'</span></div><div class="line" id="152514"><span class="nick" style="color:#2e2a4a"><a href="#152514" label="[15:25:14]">&lt;dannym&gt;</a></span><span class="message">Which libc is that arm-unknown-linux-gnueabihf-gcc invocation using?</span></div><div class="line" id="152532"><span class="nick" style="color:#2e2a4a"><a href="#152532" label="[15:25:32]">&lt;dannym&gt;</a></span><span class="message">It says nostdlib there, so obviously there won't be the libc posix raise()</span></div><div class="line" id="153255"><span class="nick" style="color:#8dd3c7"><a href="#153255" label="[15:32:55]">&lt;janneke&gt;</a></span><span class="message">dannym: arm-unknown-linux-gnueabihf-gcc -g -o arm-unknown-linux-gnueabihf-tcc -nostdinc -nostdlib -fno-builtin --include=mes-source/lib/linux/arm-mes-gcc/crt1.c -Wl,-Ttext-segment=0x1000000 -I . -I mes-source/lib -I mes-source/include -D inline= -D 'CONFIG_TCCDIR=&quot;usr/lib/tcc&quot;' -D 'CONFIG_TCC_CRTPREFIX=&quot;usr/lib:{B}/lib:.&quot;' -D 'CONFIG_TCC_ELFINTERP=&quot;/lib/mes-loader&quot;' -D 'CONFIG_TCC_LIBPATHS=&quot;usr/lib:{B}/lib:.&quot;' -D</span></div><div class="line" id="153256"><span class="nick" style="color:#8dd3c7"><a href="#153256" label="[15:32:56]">&lt;janneke&gt;</a></span><span class="message">'CONFIG_TCC_SYSINCLUDEPATHS=&quot;mes-source/include:usr/include:{B}/include&quot;' -D 'TCC_LIBGCC=&quot;usr/lib/libc.a&quot;' -D BOOTSTRAP=1 -D CONFIG_TCCBOOT=1 -D CONFIG_TCC_STATIC=1 -D CONFIG_TCC_LIBTCC1=1 -D CONFIG_USE_LIBGCC=1 -D TCC_MES_LIBC=1 -D TCC_TARGET_ARM=1 -D ONE_SOURCE=1 tcc.c libtcc1.a libc.a -lgcc</span></div><div class="line" id="153321"><span class="nick" style="color:#8dd3c7"><a href="#153321" label="[15:33:21]">&lt;janneke&gt;</a></span><span class="message">(note that i hacked/added a &quot;raise&quot; in div.c ...)</span></div><div class="line" id="153353"><span class="nick" style="color:#2e2a4a"><a href="#153353" label="[15:33:53]">&lt;dannym&gt;</a></span><span class="message">janneke: I know--but that will be a problem because now mescc and mes-libc can't be linked into the same program anymore</span></div><div class="line" id="153407"><span class="nick" style="color:#2e2a4a"><a href="#153407" label="[15:34:07]">&lt;dannym&gt;</a></span><span class="message">janneke: And that's what mescc does when you don't disable stdlib: link both</span></div><div class="line" id="153416"><span class="nick" style="color:#8dd3c7"><a href="#153416" label="[15:34:16]">&lt;janneke&gt;</a></span><span class="message">dannym: running: V=2 ./build-32.sh should give you that too</span></div><div class="line" id="153417"><span class="nick" style="color:#2e2a4a"><a href="#153417" label="[15:34:17]">&lt;dannym&gt;</a></span><span class="message">janneke: Because the mes-libc also has a &quot;raise&quot; function</span></div><div class="line" id="153446"><span class="nick" style="color:#2e2a4a"><a href="#153446" label="[15:34:46]">&lt;dannym&gt;</a></span><span class="message">janneke: But if there's this weird --include=mes-source/lib/linux/arm-mes-gcc/crt1.c thing, maybe put the raise in there?</span></div><div class="line" id="153457"><span class="nick" style="color:#2e2a4a"><a href="#153457" label="[15:34:57]">&lt;dannym&gt;</a></span><span class="message">Wait, libc.a is linked too</span></div><div class="line" id="153504"><span class="nick" style="color:#2e2a4a"><a href="#153504" label="[15:35:04]">&lt;dannym&gt;</a></span><span class="message">Shouldn't it be in there?</span></div><div class="line" id="153536"><span class="nick" style="color:#8dd3c7"><a href="#153536" label="[15:35:36]">&lt;janneke&gt;</a></span><span class="message">dannym: build-32.sh has: cp $MES_SOURCE/gcc-lib/libc+tcc.a libc.a</span></div><div class="line" id="153603"><span class="nick" style="color:#8dd3c7"><a href="#153603" label="[15:36:03]">&lt;janneke&gt;</a></span><span class="message">raise was only in libc+gnu</span></div><div class="line" id="153616"><span class="nick" style="color:#2e2a4a"><a href="#153616" label="[15:36:16]">&lt;dannym&gt;</a></span><span class="message">Ohhhh</span></div><div class="line" id="153704"><span class="nick" style="color:#2e2a4a"><a href="#153704" label="[15:37:04]">&lt;dannym&gt;</a></span><span class="message">Yeah, so we should add it to the libc+tcc too.  But then you need kill and errno and so on, so lots of the libc.  But it IS a libc--that shouldn't be a problem if that's in there :)</span></div><div class="line" id="153749"><span class="nick" style="color:#2e2a4a"><a href="#153749" label="[15:37:49]">&lt;dannym&gt;</a></span><span class="message">It's just that I had a lot of &quot;fun&quot; with errno back in the day when they made it thread-local in glibc (it had been global before), and now I'm wary of it.</span></div><div class="line" id="153807"><span class="nick" style="color:#2e2a4a"><a href="#153807" label="[15:38:07]">&lt;dannym&gt;</a></span><span class="message">What does the +foo signify?</span></div><div class="line" id="153821"><span class="nick" style="color:#2e2a4a"><a href="#153821" label="[15:38:21]">&lt;dannym&gt;</a></span><span class="message">like +gnu, +tcc</span></div><div class="line" id="153823"><span class="nick" style="color:#8dd3c7"><a href="#153823" label="[15:38:23]">&lt;janneke&gt;</a></span><span class="message">it's a janneke-ism ;-)</span></div><div class="line" id="153844"><span class="nick" style="color:#8dd3c7"><a href="#153844" label="[15:38:44]">&lt;janneke&gt;</a></span><span class="message">libc meant &quot;the libc for mes&quot;</span></div><div class="line" id="153900"><span class="nick" style="color:#8dd3c7"><a href="#153900" label="[15:39:00]">&lt;janneke&gt;</a></span><span class="message">+tcc: what tcc needs more than mes</span></div><div class="line" id="153909"><span class="nick" style="color:#2e2a4a"><a href="#153909" label="[15:39:09]">&lt;dannym&gt;</a></span><span class="message">I see!</span></div><div class="line" id="153931"><span class="nick" style="color:#8dd3c7"><a href="#153931" label="[15:39:31]">&lt;janneke&gt;</a></span><span class="message">+gnu: what binutils,gcc,gzip,tar... need more than tcc</span></div><div class="line" id="153932"><span class="nick" style="color:#2e2a4a"><a href="#153932" label="[15:39:32]">&lt;dannym&gt;</a></span><span class="message">Well, then I agree, we should just add raise, kill and so on to that libc+tcc as well :)</span></div><div class="line" id="154010"><span class="nick" style="color:#8dd3c7"><a href="#154010" label="[15:40:10]">&lt;janneke&gt;</a></span><span class="message">OK, reall just move them from +gnu (+gnu includes +tcc)</span></div><div class="line" id="154017"><span class="nick" style="color:#2e2a4a"><a href="#154017" label="[15:40:17]">&lt;dannym&gt;</a></span><span class="message">Yeah</span></div><div class="line" id="154102"><span class="nick" style="color:#8dd3c7"><a href="#154102" label="[15:41:02]">&lt;janneke&gt;</a></span><span class="message">dannym: (--include could work, sort of, but this is really about using gcc-sans-libc usage, and wether or not to use -lgcc or have the __aeabi_* functions in div.c)</span></div><div class="line" id="154115"><span class="nick" style="color:#2e2a4a"><a href="#154115" label="[15:41:15]">&lt;dannym&gt;</a></span><span class="message">Yeah, I agree</span></div><div class="line" id="154117"><span class="nick" style="color:#8dd3c7"><a href="#154117" label="[15:41:17]">&lt;janneke&gt;</a></span><span class="message">we want to be able to use gcc-sans-libc in mes too, to do testing</span></div><div class="line" id="154119"><span class="nick" style="color:#2e2a4a"><a href="#154119" label="[15:41:19]">&lt;dannym&gt;</a></span><span class="message">I didn't see the libc.a before</span></div><div class="line" id="154134"><span class="nick" style="color:#2e2a4a"><a href="#154134" label="[15:41:34]">&lt;dannym&gt;</a></span><span class="message">in the command line invocation</span></div><div class="line" id="154158"><span class="nick" style="color:#2e2a4a"><a href="#154158" label="[15:41:58]">&lt;dannym&gt;</a></span><span class="message">I only saw &quot;-nostdinc -nostdlib ...&quot; with the &quot;...&quot;, so that looked like sans libc</span></div><div class="line" id="154202"><span class="nick" style="color:#2e2a4a"><a href="#154202" label="[15:42:02]">&lt;dannym&gt;</a></span><span class="message">But it's using a libc</span></div><div class="line" id="154210"><span class="nick" style="color:#2e2a4a"><a href="#154210" label="[15:42:10]">&lt;dannym&gt;</a></span><span class="message">So it's supposed to go there, of course :)</span></div><div class="line" id="154223"><span class="nick" style="color:#8dd3c7"><a href="#154223" label="[15:42:23]">&lt;janneke&gt;</a></span><span class="message">so, mes prolly has some build instructions for gcc-sans-libc that would need -lgcc added when we remove __aeabi_* from div.c)</span></div><div class="line" id="154252"><span class="nick" style="color:#8dd3c7"><a href="#154252" label="[15:42:52]">&lt;janneke&gt;</a></span><span class="message">&quot;of course&quot; ;)</span></div><div class="line" id="154316"><span class="nick" style="color:#2e2a4a"><a href="#154316" label="[15:43:16]">&lt;dannym&gt;</a></span><span class="message">hehe</span></div><div class="line" id="154356"><span class="nick" style="color:#8dd3c7"><a href="#154356" label="[15:43:56]">&lt;janneke&gt;</a></span><span class="message">love your input, dannym!</span></div><div class="line" id="154427"><span class="nick" style="color:#8dd3c7"><a href="#154427" label="[15:44:27]">&lt;janneke&gt;</a></span><span class="message">it's cleaning up some weird thinking of mine that sublimated into source code</span></div><div class="line" id="154637"><span class="nick" style="color:#2e2a4a"><a href="#154637" label="[15:46:37]">&lt;dannym&gt;</a></span><span class="message">Btw, on mes-wip libc_tcc_SOURCES in build-aux/configure-lib.sh includes $libmescc_SOURCES.  Is that on purpose?  Shouldn't mescc link -lmescc anyway so this is duplicate?</span></div><div class="line" id="154647"><span class="nick" style="color:#2e2a4a"><a href="#154647" label="[15:46:47]">&lt;dannym&gt;</a></span><span class="message">now</span></div><div class="line" id="154807"><span class="nick" style="color:#8dd3c7"><a href="#154807" label="[15:48:07]">&lt;janneke&gt;</a></span><span class="message">dannym: that's a recent thinko: b5d7e1749 build: Include div.c in libc+tcc.a.</span></div><div class="line" id="155030"><span class="nick" style="color:#8dd3c7"><a href="#155030" label="[15:50:30]">&lt;janneke&gt;</a></span><span class="message">although i'm not sure about &quot;lib/linux/$mes_cpu-mes-$compiler/syscall-internal.c&quot;; shouldn't that be in libc+tcc, libc+gnu too?</span></div><div class="line" id="155055"><span class="nick" style="color:#2e2a4a"><a href="#155055" label="[15:50:55]">&lt;dannym&gt;</a></span><span class="message">No, that's the whole reason I split it off: for it not to be in libc</span></div><div class="line" id="155119"><span class="nick" style="color:#2e2a4a"><a href="#155119" label="[15:51:19]">&lt;dannym&gt;</a></span><span class="message">It's there because the division by zero thing wants to use raise(SIGFPE)</span></div><div class="line" id="155126"><span class="nick" style="color:#2e2a4a"><a href="#155126" label="[15:51:26]">&lt;dannym&gt;</a></span><span class="message">So I need to be able to emit the raise syscall</span></div><div class="line" id="155136"><span class="nick" style="color:#2e2a4a"><a href="#155136" label="[15:51:36]">&lt;dannym&gt;</a></span><span class="message">Actually the kill syscall</span></div><div class="line" id="155150"><span class="nick" style="color:#2e2a4a"><a href="#155150" label="[15:51:50]">&lt;dannym&gt;</a></span><span class="message">that means I have to be able to emit (some) syscalls even without libc</span></div><div class="line" id="155206"><span class="nick" style="color:#2e2a4a"><a href="#155206" label="[15:52:06]">&lt;dannym&gt;</a></span><span class="message">Because presumably one wants to be able to divide integers even when not using libc ;)</span></div><div class="line" id="155236"><span class="nick" style="color:#2e2a4a"><a href="#155236" label="[15:52:36]">&lt;dannym&gt;</a></span><span class="message">&quot;internal&quot; as in &quot;internal to mescc&quot;--it's only there for -lmescc use</span></div><div class="line" id="155249"><span class="nick" style="color:#8dd3c7"><a href="#155249" label="[15:52:49]">&lt;janneke&gt;</a></span><span class="message">ah, yes and errno -- i see</span></div><div class="line" id="155254"><span class="nick" style="color:#2e2a4a"><a href="#155254" label="[15:52:54]">&lt;dannym&gt;</a></span><span class="message">Yeah</span></div><div class="line" id="155303"><span class="nick" style="color:#8dd3c7"><a href="#155303" label="[15:53:03]">&lt;janneke&gt;</a></span><span class="message">good, then just drop that commit</span></div><div class="line" id="155819"><span class="nick" style="color:#2e2a4a"><a href="#155819" label="[15:58:19]">&lt;dannym&gt;</a></span><span class="message">Did so</span></div><div class="line" id="155826"><span class="nick" style="color:#2e2a4a"><a href="#155826" label="[15:58:26]">&lt;dannym&gt;</a></span><span class="message">It also reverted some copyright line update</span></div><div class="line" id="155835"><span class="nick" style="color:#2e2a4a"><a href="#155835" label="[15:58:35]">&lt;dannym&gt;</a></span><span class="message">Also moved raise, kill and getpid up to libc+tcc</span></div><div class="line" id="155840"><span class="nick" style="color:#2e2a4a"><a href="#155840" label="[15:58:40]">&lt;dannym&gt;</a></span><span class="message">On mes-wip both</span></div><div class="line" id="155937"><span class="nick" style="color:#8dd3c7"><a href="#155937" label="[15:59:37]">&lt;janneke&gt;</a></span><span class="message">\o/</span></div><div class="line" id="161119"><span class="nick" style="color:#2e2a4a"><a href="#161119" label="[16:11:19]">&lt;dannym&gt;</a></span><span class="message">Pushed 98e58796d6d85e55fb59cb416acc5a83b8847e64 to mes-wip to make __aeabi_idiv gcc-only (in preparation to removing it :)), and to not use __aeabi_idiv in the backend emitter</span></div><div class="line" id="161125"><span class="nick" style="color:#2e2a4a"><a href="#161125" label="[16:11:25]">&lt;dannym&gt;</a></span><span class="message">(I had used it before)</span></div><div class="line" id="161351"><span class="nick" style="color:#2e2a4a"><a href="#161351" label="[16:13:51]">&lt;dannym&gt;</a></span><span class="message">Reverted your adding of raise() to div.c in mes-wip now</span></div><div class="line" id="161548"><span class="nick" style="color:#2e2a4a"><a href="#161548" label="[16:15:48]">&lt;dannym&gt;</a></span><span class="message">Let's not support using mescc with -lgcc</span></div><div class="line" id="161556"><span class="nick" style="color:#2e2a4a"><a href="#161556" label="[16:15:56]">&lt;dannym&gt;</a></span><span class="message">Or using gcc with -lmescc</span></div><div class="line" id="161610"><span class="nick" style="color:#2e2a4a"><a href="#161610" label="[16:16:10]">&lt;dannym&gt;</a></span><span class="message">Because some calling conventions in -lgcc mandate using registers for inputs</span></div><div class="line" id="161611"><span class="nick" style="color:#8dd3c7"><a href="#161611" label="[16:16:11]">&lt;janneke&gt;</a></span><span class="message">indeed</span></div><div class="line" id="161704"><span class="nick" style="color:#8dd3c7"><a href="#161704" label="[16:17:04]">&lt;janneke&gt;</a></span><span class="message">we can alwys take a stab at thet when we're getting extremely bored ;)</span></div><div class="line" id="161745"><span class="nick" style="color:#2e2a4a"><a href="#161745" label="[16:17:45]">&lt;dannym&gt;</a></span><span class="message">janneke: Yeah :)</span></div><div class="line" id="161825"><span class="nick" style="color:#2e2a4a"><a href="#161825" label="[16:18:25]">&lt;dannym&gt;</a></span><span class="message">janneke: Could you take care of changing the build system so gcc always uses -lgcc and mescc always -lmescc ?  At least if they are compiling a source that uses division ;)</span></div><div class="line" id="161853"><span class="nick" style="color:#2e2a4a"><a href="#161853" label="[16:18:53]">&lt;dannym&gt;</a></span><span class="message">janneke: After that, remove the entire block that starts with &quot;#if __GNUC__ &amp;&amp; !SYSTEM_LIBC &amp;&amp; __arm__&quot; in lib/mes/div.c</span></div><div class="line" id="161916"><span class="nick" style="color:#2e2a4a"><a href="#161916" label="[16:19:16]">&lt;dannym&gt;</a></span><span class="message">(that block introduces __aeabi_idiv, __aeabi_idivmod, __aeabi_uidivmod, __aeabi_uidiv)</span></div><div class="line" id="162043"><span class="nick" style="color:#2e2a4a"><a href="#162043" label="[16:20:43]">&lt;dannym&gt;</a></span><span class="message">Build system in mes</span></div><div class="line" id="162239"><span class="nick" style="color:#2e2a4a"><a href="#162239" label="[16:22:39]">&lt;dannym&gt;</a></span><span class="message">janneke: (I mean mescc and gcc would add -lmescc and -lgcc, respectively, anyway unless you pass special options to disable it)</span></div><div class="line" id="162337"><span class="nick" style="color:#2e2a4a"><a href="#162337" label="[16:23:37]">&lt;dannym&gt;</a></span><span class="message">See <a rel="nofollow" href="https://gcc.gnu.org/onlinedocs/gcc/Link-Options.html">https://gcc.gnu.org/onlinedocs/gcc/Link-Options.html</a> </span></div><div class="line" id="162355"><span class="nick" style="color:#2e2a4a"><a href="#162355" label="[16:23:55]">&lt;dannym&gt;</a></span><span class="message">-nostdlib: Disables -lgcc</span></div><div class="line" id="162401"><span class="nick" style="color:#2e2a4a"><a href="#162401" label="[16:24:01]">&lt;dannym&gt;</a></span><span class="message">-nodefaultlibs: Disables -lgcc, I think</span></div><div class="line" id="162413"><span class="nick" style="color:#2e2a4a"><a href="#162413" label="[16:24:13]">&lt;dannym&gt;</a></span><span class="message">-nolibc: Leaves -lgcc enabled, I think</span></div><div class="line" id="162426"><span class="nick" style="color:#2e2a4a"><a href="#162426" label="[16:24:26]">&lt;dannym&gt;</a></span><span class="message">-nostartfiles: Leaves -lgcc enabled</span></div><div class="line" id="162505"><span class="nick" style="color:#8dd3c7"><a href="#162505" label="[16:25:05]">&lt;janneke&gt;</a></span><span class="message">dannym: (yeah, i got that)</span></div><div class="line" id="162904"><span class="nick" style="color:#8dd3c7"><a href="#162904" label="[16:29:04]">&lt;janneke&gt;</a></span><span class="message">right, so we could try -nostartfiles -nolibc -- althogh the doc says -nostdlib -lgcc / -nodefaultlibs -lgcc are also valid -- dunno :-)</span></div><div class="line" id="163302"><span class="nick" style="color:#8dd3c7"><a href="#163302" label="[16:33:02]">&lt;janneke&gt;</a></span><span class="message">tricksy to get all these just right, for all compilers, libc's and architectures...</span></div><div class="line" id="164931"><span class="nick">***</span><span class="message notice">terpri__ is now known as terpri</span></div><div class="line" id="175357"><span class="nick" style="color:#6b8072"><a href="#175357" label="[17:53:57]">&lt;OriansJ`&gt;</a></span><span class="message">bauen1: I have finished reviewing your change and have merged it into mescc-tools-seed; thank you for the 26byte reduction in AMD64's hex0</span></div><div class="line" id="191915"><span class="nick" style="color:#80b1d3"><a href="#191915" label="[19:19:15]">&lt;bauen1&gt;</a></span><span class="message">thanks</span></div><div class="line" id="192049"><span class="nick" style="color:#80b1d3"><a href="#192049" label="[19:20:49]">&lt;bauen1&gt;</a></span><span class="message">also shouldn't hex0 be part of the hashes in answers ?</span></div><div class="line" id="201309"><span class="nick" style="color:#80b1d3"><a href="#201309" label="[20:13:09]">&lt;bauen1&gt;</a></span><span class="message">i'll probably work on a similiar thing for hex1</span></div><div class="line" id="201342"><span class="nick" style="color:#80b1d3"><a href="#201342" label="[20:13:42]">&lt;bauen1&gt;</a></span><span class="message">and adjusting things so memory written to is explicitly written out</span></div><div class="line" id="201357"><span class="nick" style="color:#80b1d3"><a href="#201357" label="[20:13:57]">&lt;bauen1&gt;</a></span><span class="message">in the source code</span></div><div class="line" id="221853"><span class="nick">***</span><span class="message notice">terpri__ is now known as terpri</span></div><div class="line" id="225055"><span class="nick" style="color:#6b8072"><a href="#225055" label="[22:50:55]">&lt;OriansJ`&gt;</a></span><span class="message">bauen1: it could be but I haven't added them yet as I expected optimizations and reductions to occur prior to the completion of the bootstrap</span></div><div class="line" id="232205"><span class="nick" style="color:#2e2a4a"><a href="#232205" label="[23:22:05]">&lt;dannym&gt;</a></span><span class="message">janneke: Yeah, but I'm trying not to hardcode the name &quot;-lgcc&quot; - gcc could technically always rename it since it's an implementation detail (they probably won't...)</span></div><div class="line" id="233715"><span class="nick" style="color:#8dd3c7"><a href="#233715" label="[23:37:15]">&lt;janneke&gt;</a></span><span class="message">dannym: ah, right</span></div><div class="line" id="233802"><span class="nick" style="color:#8dd3c7"><a href="#233802" label="[23:38:02]">&lt;janneke&gt;</a></span><span class="message">dannym: you have seen my gitlab mes-0.23 fixes?  i'd hate for you to have to figure out that mess (again)</span></div><div class="line" id="235944"><span class="nick" style="color:#6d2462"><a href="#235944" label="[23:59:44]">*</a></span><span class="message">janneke -&gt; zZzzz</span></div><br /></div></body></html>