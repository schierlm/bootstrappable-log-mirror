<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-03-07.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="090359"><span class="nick" style="color:#8dd3c7"><a href="#090359" label="[09:03:59]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: finally packaging pr done</span></div><div class="line" id="090405"><span class="nick" style="color:#8dd3c7"><a href="#090405" label="[09:04:05]">&lt;fossy&gt;</a></span><span class="message">should be no QEMU inconsistencies anynmore</span></div><div class="line" id="090521"><span class="nick" style="color:#2e2a4a"><a href="#090521" label="[09:05:21]">&lt;stikonas[m]&gt;</a></span><span class="message">fossy: I'll take a look, though will take a bit of time. It's big PR...</span></div><div class="line" id="090529"><span class="nick" style="color:#8dd3c7"><a href="#090529" label="[09:05:29]">&lt;fossy&gt;</a></span><span class="message">yes, no rush</span></div><div class="line" id="090545"><span class="nick" style="color:#8dd3c7"><a href="#090545" label="[09:05:45]">&lt;fossy&gt;</a></span><span class="message">although, much of it is checksum-related, so kinda inflates size</span></div><div class="line" id="182313"><span class="nick" style="color:#6b8072"><a href="#182313" label="[18:23:13]">&lt;oriansj&gt;</a></span><span class="message">&quot;The region of RAM above 1 MiB is not standardized, well-defined, or contiguous.&quot;</span></div><div class="line" id="182330"><span class="nick" style="color:#6b8072"><a href="#182330" label="[18:23:30]">&lt;oriansj&gt;</a></span><span class="message">wooo more complexity for me to manage</span></div><div class="line" id="185210"><span class="nick" style="color:#80b1d3"><a href="#185210" label="[18:52:10]">&lt;bauen1&gt;</a></span><span class="message">oriansj: you're reading about x86 ? if you're looking at dos/bios era things, it's just an absolute minefield</span></div><div class="line" id="220239"><span class="nick" style="color:#6b8072"><a href="#220239" label="[22:02:39]">&lt;oriansj&gt;</a></span><span class="message">bauen1: well yes, I figure do x86 first and go from there.</span></div><div class="line" id="220324"><span class="nick" style="color:#6b8072"><a href="#220324" label="[22:03:24]">&lt;oriansj&gt;</a></span><span class="message">just need enough to do paging, read/write to a block device (or two) and single tasking batch processing.</span></div><div class="line" id="220536"><span class="nick" style="color:#6b8072"><a href="#220536" label="[22:05:36]">&lt;oriansj&gt;</a></span><span class="message">I can probably bury the ugly memory details in a function that sets up a memory table.</span></div><div class="line" id="221144"><span class="nick" style="color:#80b1d3"><a href="#221144" label="[22:11:44]">&lt;bauen1&gt;</a></span><span class="message">oriansj: i really recommend you to take a look around osdev.org, there's quite a few people doing similiar things, and while not a single one will match exactly your needs they're still good for learning what works when and when not</span></div><div class="line" id="221752"><span class="nick" style="color:#6d2462"><a href="#221752" label="[22:17:52]">&lt;unmatched-paren&gt;</a></span><span class="message">I just had a thought: would a literate programming system have a bootstrapping problem if it was itself written literately? Usually the output of a literate programming tool is easily machine-readable and not at all obfusicated.</span></div><div class="line" id="221819"><span class="nick" style="color:#6d2462"><a href="#221819" label="[22:18:19]">&lt;unmatched-paren&gt;</a></span><span class="message">s/machine-readable/human-readable/</span></div><div class="line" id="221828"><span class="nick" style="color:#6b8072"><a href="#221828" label="[22:18:28]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: one can do literate programming in Assembly or even hex if one so desires</span></div><div class="line" id="221858"><span class="nick" style="color:#6b8072"><a href="#221858" label="[22:18:58]">&lt;oriansj&gt;</a></span><span class="message">So the binary might not be literate but at that point it isn't an issue</span></div><div class="line" id="222015"><span class="nick" style="color:#6d2462"><a href="#222015" label="[22:20:15]">&lt;unmatched-paren&gt;</a></span><span class="message">Yeah, that would make sense. It's just that _technically_, it's not _exactly_ the original source code.</span></div><div class="line" id="222207"><span class="nick" style="color:#6d2462"><a href="#222207" label="[22:22:07]">&lt;unmatched-paren&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/zyedidia/Literate">https://github.com/zyedidia/Literate</a>  &lt;- this thing is written in literate D, but it has the tangled output in src/tangle/</span></div><div class="line" id="222227"><span class="nick" style="color:#6d2462"><a href="#222227" label="[22:22:27]">&lt;unmatched-paren&gt;</a></span><span class="message">so i guess src/tangle would count as source?</span></div><div class="line" id="222229"><span class="nick" style="color:#6b8072"><a href="#222229" label="[22:22:29]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: the ASCII C compiler is as probably the closest to the output binary being readable</span></div><div class="line" id="224309"><span class="nick" style="color:#234e69"><a href="#224309" label="[22:43:09]">&lt;stikonas&gt;</a></span><span class="message">fossy: I still have some checksum failures in live-bootstrap</span></div><div class="line" id="231841"><span class="nick" style="color:#6c3d55"><a href="#231841" label="[23:18:41]">&lt;muurkha&gt;</a></span><span class="message">doing boot and paging is going to be enormously easier on RISC-V than on x86</span></div><div class="line" id="232525"><span class="nick" style="color:#6b8072"><a href="#232525" label="[23:25:25]">&lt;oriansj&gt;</a></span><span class="message">muurkha: probably</span></div><div class="line" id="233437"><span class="nick" style="color:#6c3d55"><a href="#233437" label="[23:34:37]">&lt;muurkha&gt;</a></span><span class="message">check out the RISC-V privileged spec: <a rel="nofollow" href="https://github.com/riscv/riscv-isa-manual/releases/download/Priv-v1.12/riscv-privileged-20211203.pdf">https://github.com/riscv/riscv-isa-manual/releases/download/Priv-v1.12/riscv-privileged-20211203.pdf</a> </span></div><div class="line" id="233619"><span class="nick" style="color:#6c3d55"><a href="#233619" label="[23:36:19]">&lt;muurkha&gt;</a></span><span class="message">it's teensy and it covers everything you need to know for paging (though boot is out of scope)</span></div><div class="line" id="234604"><span class="nick" style="color:#6b8072"><a href="#234604" label="[23:46:04]">&lt;oriansj&gt;</a></span><span class="message">muurkha: adding filesystem support is probably going to be a much bigger (and harder to debug) part to implement</span></div><div class="line" id="234700"><span class="nick" style="color:#6c3d55"><a href="#234700" label="[23:47:00]">&lt;muurkha&gt;</a></span><span class="message">what, in C?</span></div><div class="line" id="234920"><span class="nick" style="color:#6b8072"><a href="#234920" label="[23:49:20]">&lt;oriansj&gt;</a></span><span class="message">muurkha: well first in C and after I get it working, I'll rewrite it in Assembly</span></div><div class="line" id="235137"><span class="nick" style="color:#6c3d55"><a href="#235137" label="[23:51:37]">&lt;muurkha&gt;</a></span><span class="message">what do we need lseek() for again?  I forget</span></div><div class="line" id="235202"><span class="nick" style="color:#6b8072"><a href="#235202" label="[23:52:02]">&lt;oriansj&gt;</a></span><span class="message">muurkha: hex2</span></div><div class="line" id="235209"><span class="nick" style="color:#6c3d55"><a href="#235209" label="[23:52:09]">&lt;muurkha&gt;</a></span><span class="message">oh</span></div><div class="line" id="235333"><span class="nick" style="color:#6b8072"><a href="#235333" label="[23:53:33]">&lt;oriansj&gt;</a></span><span class="message">it might be possible to rewrite hex2 and hex1 to not use lseek by buffering in memory</span></div><div class="line" id="235532"><span class="nick" style="color:#6b8072"><a href="#235532" label="[23:55:32]">&lt;oriansj&gt;</a></span><span class="message">So, I'll be supporting it in kernel; unless it proves difficult enough to punt to do a userspace rewrite</span></div><div class="line" id="235605"><span class="nick" style="color:#6c3d55"><a href="#235605" label="[23:56:05]">&lt;muurkha&gt;</a></span><span class="message">I was thinking the filesystem would be easier to write if it buffers the whole filesystem in memory</span></div><div class="line" id="235609"><span class="nick" style="color:#6c3d55"><a href="#235609" label="[23:56:09]">&lt;muurkha&gt;</a></span><span class="message">in the kernel</span></div><div class="line" id="235643"><span class="nick" style="color:#6c3d55"><a href="#235643" label="[23:56:43]">&lt;muurkha&gt;</a></span><span class="message">not a good approach for bootstrapping on a Z80 or something of course</span></div><div class="line" id="235710"><span class="nick" style="color:#6c3d55"><a href="#235710" label="[23:57:10]">&lt;muurkha&gt;</a></span><span class="message">but if you have gigabytes of RAM it should be fine</span></div><div class="line" id="235718"><span class="nick" style="color:#6b8072"><a href="#235718" label="[23:57:18]">&lt;oriansj&gt;</a></span><span class="message">muurkha: well we can dictate hardware too</span></div><br /></div></body></html>