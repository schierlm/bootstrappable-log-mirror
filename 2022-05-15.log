<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-05-15.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000652"><span class="nick" style="color:#8dd3c7"><a href="#000652" label="[00:06:52]">&lt;oriansj&gt;</a></span><span class="message">minor git worktree notes for anyone who is unfamiliar: <a rel="nofollow" href="https://paste.debian.net/1240912/">https://paste.debian.net/1240912/</a> </span></div><div class="line" id="003208"><span class="nick" style="color:#2e2a4a"><a href="#003208" label="[00:32:08]">&lt;doras&gt;</a></span><span class="message">oriansj: nice. I also use &quot;git worktree remove&quot; often.</span></div><div class="line" id="003218"><span class="nick" style="color:#8dd3c7"><a href="#003218" label="[00:32:18]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: did you look at the GFK filesystem proposal?</span></div><div class="line" id="003232"><span class="nick" style="color:#8dd3c7"><a href="#003232" label="[00:32:32]">&lt;oriansj&gt;</a></span><span class="message">because I have a stupid idea</span></div><div class="line" id="004959"><span class="nick" style="color:#6b8072"><a href="#004959" label="[00:49:59]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: sorry, no, i mean i saw the repo, but i didn't see the details until i just looked at it now</span></div><div class="line" id="005034"><span class="nick" style="color:#6b8072"><a href="#005034" label="[00:50:34]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: you mean this page?: <a rel="nofollow" href="https://github.com/oriansj/GFK/blob/main/GFK%20standard.org">https://github.com/oriansj/GFK/blob/main/GFK%20standard.org</a> </span></div><div class="line" id="005055"><span class="nick" style="color:#8dd3c7"><a href="#005055" label="[00:50:55]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: correct</span></div><div class="line" id="005105"><span class="nick" style="color:#6b8072"><a href="#005105" label="[00:51:05]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: what the idea?</span></div><div class="line" id="005350"><span class="nick" style="color:#8dd3c7"><a href="#005350" label="[00:53:50]">&lt;oriansj&gt;</a></span><span class="message">well as that is a filesystem that could be written by hand in hex0 without much trouble. if your builder kernel did do disk writes in that format, then the C kernel could just be a build product written like any other file</span></div><div class="line" id="005516"><span class="nick" style="color:#8dd3c7"><a href="#005516" label="[00:55:16]">&lt;oriansj&gt;</a></span><span class="message">kaem can be moved to /sbin/init and a kaem.run file populated and it could continue the rest of the way to Linux</span></div><div class="line" id="005928"><span class="nick" style="color:#6b8072"><a href="#005928" label="[00:59:28]">&lt;rickmasters&gt;</a></span><span class="message">so, the next kernel can be in m2-planet, if that is what you mean by C kernel, and then a m2-planet executable could be written to read the next kernel and kaem and write the back in your file system format, then switch to new kernel</span></div><div class="line" id="005959"><span class="nick" style="color:#6b8072"><a href="#005959" label="[00:59:59]">&lt;rickmasters&gt;</a></span><span class="message">... avoiding more hex0 work</span></div><div class="line" id="010006"><span class="nick" style="color:#8dd3c7"><a href="#010006" label="[01:00:06]">&lt;oriansj&gt;</a></span><span class="message">good point</span></div><div class="line" id="010025"><span class="nick" style="color:#8dd3c7"><a href="#010025" label="[01:00:25]">&lt;oriansj&gt;</a></span><span class="message">better idea honestly</span></div><div class="line" id="010056"><span class="nick" style="color:#8dd3c7"><a href="#010056" label="[01:00:56]">&lt;oriansj&gt;</a></span><span class="message">as everything is just in memory at that point right?</span></div><div class="line" id="010225"><span class="nick" style="color:#6b8072"><a href="#010225" label="[01:02:25]">&lt;rickmasters&gt;</a></span><span class="message">yes, all files are in memory and can be read by any executable</span></div><div class="line" id="010250"><span class="nick" style="color:#6b8072"><a href="#010250" label="[01:02:50]">&lt;rickmasters&gt;</a></span><span class="message">i was thinking of supporting the ability to flush files back to any partition <a rel="nofollow" href="https://github.com/ironmeld/builder-hex0#manual-build-instructions">https://github.com/ironmeld/builder-hex0#manual-build-instructions</a> </span></div><div class="line" id="010314"><span class="nick" style="color:#6b8072"><a href="#010314" label="[01:03:14]">&lt;rickmasters&gt;</a></span><span class="message">if that helps, but one could append files together and flush them as one disk image currently</span></div><div class="line" id="010430"><span class="nick" style="color:#6b8072"><a href="#010430" label="[01:04:30]">&lt;rickmasters&gt;</a></span><span class="message">catm /dev/hda bootloader</span></div><div class="line" id="010458"><span class="nick" style="color:#6b8072"><a href="#010458" label="[01:04:58]">&lt;rickmasters&gt;</a></span><span class="message">catm /dev/hda1 newkernel kaem nextbuildscript etc</span></div><div class="line" id="010521"><span class="nick" style="color:#6b8072"><a href="#010521" label="[01:05:21]">&lt;rickmasters&gt;</a></span><span class="message">something like that maybe</span></div><div class="line" id="010537"><span class="nick" style="color:#6b8072"><a href="#010537" label="[01:05:37]">&lt;rickmasters&gt;</a></span><span class="message">whoops, forgot the file system</span></div><div class="line" id="010553"><span class="nick" style="color:#8dd3c7"><a href="#010553" label="[01:05:53]">&lt;oriansj&gt;</a></span><span class="message">I'll have to think about that over dinner but it sounds like a good idea</span></div><div class="line" id="010640"><span class="nick" style="color:#6b8072"><a href="#010640" label="[01:06:40]">&lt;rickmasters&gt;</a></span><span class="message">convert-to-GTK newfilesystem newkernel kaem initscript more-source.tar</span></div><div class="line" id="010651"><span class="nick" style="color:#6b8072"><a href="#010651" label="[01:06:51]">&lt;rickmasters&gt;</a></span><span class="message">catm /dev/hda1 newfilesystem</span></div><div class="line" id="010752"><span class="nick" style="color:#6b8072"><a href="#010752" label="[01:07:52]">&lt;rickmasters&gt;</a></span><span class="message">i dunno, i'm a little fuzzy on how it should work</span></div><div class="line" id="011259"><span class="nick" style="color:#6b8072"><a href="#011259" label="[01:12:59]">&lt;rickmasters&gt;</a></span><span class="message">to clarify, the first arg of convert-to-GTK is a binary file that it writes to that would contain the new file system</span></div><div class="line" id="011345"><span class="nick" style="color:#6b8072"><a href="#011345" label="[01:13:45]">&lt;rickmasters&gt;</a></span><span class="message">a GTK capable bootloader could load the kernel and jump to it</span></div><div class="line" id="011428"><span class="nick" style="color:#80b1d3"><a href="#011428" label="[01:14:28]">&lt;stikonas&gt;</a></span><span class="message">s/GTK/GFK/ I guess?</span></div><div class="line" id="011448"><span class="nick" style="color:#6b8072"><a href="#011448" label="[01:14:48]">&lt;rickmasters&gt;</a></span><span class="message">... or just leave the kernel outside GFK</span></div><div class="line" id="011511"><span class="nick" style="color:#6b8072"><a href="#011511" label="[01:15:11]">&lt;rickmasters&gt;</a></span><span class="message">yes GFK, sorry</span></div><div class="line" id="011909"><span class="nick" style="color:#6b8072"><a href="#011909" label="[01:19:09]">&lt;rickmasters&gt;</a></span><span class="message">i think in the old days there was a /boot filesystem sometimes FAT that holds the kernel, but i'm no expert, its changed over the years</span></div><div class="line" id="012042"><span class="nick" style="color:#80b1d3"><a href="#012042" label="[01:20:42]">&lt;stikonas&gt;</a></span><span class="message">well, these days for UEFI boot there is ESP partition that has to be formatted as FAT32 (other fs can work but are not mandated by standard). Usually it is mounted on /boot/efi and can contain either bootloader or kernel</span></div><div class="line" id="012217"><span class="nick" style="color:#80b1d3"><a href="#012217" label="[01:22:17]">&lt;stikonas&gt;</a></span><span class="message">for non-UEFI BIOS systems it's either booting from active partition (for MBR table) or a bit more complicated for GPT (you to raw create bios boot partition, I guess a bit like ESP but without filesystem structure)</span></div><div class="line" id="013505"><span class="nick" style="color:#8dd3c7"><a href="#013505" label="[01:35:05]">&lt;oriansj&gt;</a></span><span class="message">well I guess my first task is to create a create and unpack tool for GFK images.</span></div><div class="line" id="013701"><span class="nick" style="color:#8dd3c7"><a href="#013701" label="[01:37:01]">&lt;oriansj&gt;</a></span><span class="message">with a special --master-boot-loader flag as the MBR is kind of special for x86</span></div><div class="line" id="013929"><span class="nick" style="color:#8dd3c7"><a href="#013929" label="[01:39:29]">&lt;oriansj&gt;</a></span><span class="message">then get a bootloader written that can prompt the user for the filename to load into memory and execute</span></div><div class="line" id="014024"><span class="nick" style="color:#80b1d3"><a href="#014024" label="[01:40:24]">&lt;stikonas&gt;</a></span><span class="message">that tool would go to stage0-posix?</span></div><div class="line" id="014046"><span class="nick" style="color:#8dd3c7"><a href="#014046" label="[01:40:46]">&lt;oriansj&gt;</a></span><span class="message">indeed as a submodule</span></div><div class="line" id="014239"><span class="nick" style="color:#8dd3c7"><a href="#014239" label="[01:42:39]">&lt;oriansj&gt;</a></span><span class="message">we build it, the new bootloader and new kernel then use the tool to build the disk image and catm /dev/hda1 image.img to create our bootstrap filesystem</span></div><div class="line" id="014349"><span class="nick" style="color:#8dd3c7"><a href="#014349" label="[01:43:49]">&lt;oriansj&gt;</a></span><span class="message">and just halt the system and then on boot type in the name of the new kernel filename (/boot/kernel)</span></div><div class="line" id="014540"><span class="nick" style="color:#8dd3c7"><a href="#014540" label="[01:45:40]">&lt;oriansj&gt;</a></span><span class="message">(or honestly anything we want to call it)</span></div><div class="line" id="014547"><span class="nick" style="color:#80b1d3"><a href="#014547" label="[01:45:47]">&lt;stikonas&gt;</a></span><span class="message">yes, that's sounds reasonable</span></div><div class="line" id="014622"><span class="nick" style="color:#80b1d3"><a href="#014622" label="[01:46:22]">&lt;stikonas&gt;</a></span><span class="message">at least would make transition from builder-hex0 to next bootloader / kernel easy</span></div><div class="line" id="014625"><span class="nick" style="color:#8dd3c7"><a href="#014625" label="[01:46:25]">&lt;oriansj&gt;</a></span><span class="message">then after we build Linux, we just reboot with the new init setup and tell the bootloader to use the Linux file we made</span></div><div class="line" id="014714"><span class="nick" style="color:#80b1d3"><a href="#014714" label="[01:47:14]">&lt;stikonas&gt;</a></span><span class="message">although I guess transition from builder-hex0-mini to builder-hex0 would stay manual</span></div><div class="line" id="014715"><span class="nick" style="color:#8dd3c7"><a href="#014715" label="[01:47:15]">&lt;oriansj&gt;</a></span><span class="message">(or build grub and install a fresh filesystem on a second disk)</span></div><div class="line" id="014934"><span class="nick" style="color:#6d2462"><a href="#014934" label="[01:49:34]">&lt;muurkha&gt;</a></span><span class="message">rickmasters: /boot was sometimes put at the beginning of the disk to make sure the BIOS could load from it, but also it was handy to have two root filesystems in case you screwed one up</span></div><div class="line" id="015004"><span class="nick" style="color:#6d2462"><a href="#015004" label="[01:50:04]">&lt;muurkha&gt;</a></span><span class="message">same kernel, same /home, maybe same /usr, but different /lib/ld.so and the like</span></div><div class="line" id="020851"><span class="nick" style="color:#6b8072"><a href="#020851" label="[02:08:51]">&lt;rickmasters&gt;</a></span><span class="message">muurkha: yeah, keeping within bios limits makes the code a lot easier, except switching cpu modes, that took me some time to get right</span></div><div class="line" id="021022"><span class="nick" style="color:#6d2462"><a href="#021022" label="[02:10:22]">&lt;muurkha&gt;</a></span><span class="message">yeah, it's a pain in the ass</span></div><div class="line" id="021039"><span class="nick" style="color:#6d2462"><a href="#021039" label="[02:10:39]">&lt;muurkha&gt;</a></span><span class="message">and a totally unnecessary one</span></div><div class="line" id="021056"><span class="nick" style="color:#6d2462"><a href="#021056" label="[02:10:56]">&lt;muurkha&gt;</a></span><span class="message">I mean, it's necessary if you have to use the hardware you have</span></div><div class="line" id="021108"><span class="nick" style="color:#6d2462"><a href="#021108" label="[02:11:08]">&lt;muurkha&gt;</a></span><span class="message">but it wasn't necessary for the hardware to impose that pain on you</span></div><div class="line" id="021118"><span class="nick" style="color:#6d2462"><a href="#021118" label="[02:11:18]">&lt;muurkha&gt;</a></span><span class="message">it could have been designed better</span></div><div class="line" id="021829"><span class="nick" style="color:#6b8072"><a href="#021829" label="[02:18:29]">&lt;rickmasters&gt;</a></span><span class="message">yeah, i thought i couldn't use 32bit memory without giving up bios access, but eventually found a way</span></div><div class="line" id="021939"><span class="nick" style="color:#6b8072"><a href="#021939" label="[02:19:39]">&lt;rickmasters&gt;</a></span><span class="message">i should post that code to the osdev wiki</span></div><div class="line" id="022511"><span class="nick" style="color:#6d2462"><a href="#022511" label="[02:25:11]">&lt;muurkha&gt;</a></span><span class="message">oh wow, a lot of people will appreciate that</span></div><div class="line" id="022524"><span class="nick" style="color:#6d2462"><a href="#022524" label="[02:25:24]">&lt;muurkha&gt;</a></span><span class="message">even if most new machines are UEFI</span></div><div class="line" id="022920"><span class="nick" style="color:#6b8072"><a href="#022920" label="[02:29:20]">&lt;rickmasters&gt;</a></span><span class="message">yeah, its worth doing, but most people aren't bootstrapping and will just use 32bit ATA drivers</span></div><div class="line" id="022948"><span class="nick" style="color:#6b8072"><a href="#022948" label="[02:29:48]">&lt;rickmasters&gt;</a></span><span class="message">a lot more code but its out there</span></div><div class="line" id="023026"><span class="nick" style="color:#6d2462"><a href="#023026" label="[02:30:26]">&lt;muurkha&gt;</a></span><span class="message">there are other cases where you want to invoke BIOS functions besides just reading from a disk tho</span></div><div class="line" id="024315"><span class="nick" style="color:#6b8072"><a href="#024315" label="[02:43:15]">&lt;rickmasters&gt;</a></span><span class="message">muurkha: i hear ya. checking out, goodnight</span></div><div class="line" id="024332"><span class="nick" style="color:#6d2462"><a href="#024332" label="[02:43:32]">&lt;muurkha&gt;</a></span><span class="message">goodnight!</span></div><div class="line" id="024348"><span class="nick" style="color:#6d2462"><a href="#024348" label="[02:43:48]">&lt;muurkha&gt;</a></span><span class="message">it'll be a big contribution to the osdev wiki I think so I hope you do</span></div><div class="line" id="024520"><span class="nick" style="color:#6b8072"><a href="#024520" label="[02:45:20]">&lt;rickmasters&gt;</a></span><span class="message">i'll plan on it</span></div><div class="line" id="030229"><span class="nick" style="color:#8dd3c7"><a href="#030229" label="[03:02:29]">&lt;oriansj&gt;</a></span><span class="message">hmmmm, I'll probably want to eliminate the need for the superblock to be on the last block of the drive</span></div><div class="line" id="034544"><span class="nick" style="color:#8dd3c7"><a href="#034544" label="[03:45:44]">&lt;oriansj&gt;</a></span><span class="message">and just make it a recommended standard when hand creating the file system.</span></div><div class="line" id="035158"><span class="nick" style="color:#8dd3c7"><a href="#035158" label="[03:51:58]">&lt;oriansj&gt;</a></span><span class="message">and probably shift the leadblock slightly to allow builder-hex0 to fit on the disk before it would appear</span></div><div class="line" id="040511"><span class="nick" style="color:#8dd3c7"><a href="#040511" label="[04:05:11]">&lt;oriansj&gt;</a></span><span class="message">hmmm  actually, no need</span></div><div class="line" id="050230"><span class="nick" style="color:#234e69"><a href="#050230" label="[05:02:30]">&lt;fossy&gt;</a></span><span class="message">doras, stikonas: xbps is tar with extra metadata. by permissions and location, it means that it will not change them, i believe. what is missing around reproducibility with file permissions?</span></div><div class="line" id="050726"><span class="nick" style="color:#234e69"><a href="#050726" label="[05:07:26]">&lt;fossy&gt;</a></span><span class="message">adding noops isn't a big deal for bootstrap kernel IMO, but adding eg. gettime functionality is not the best route, removing it is way better</span></div><div class="line" id="050834"><span class="nick" style="color:#234e69"><a href="#050834" label="[05:08:34]">&lt;fossy&gt;</a></span><span class="message">stikonas[m], doras: parallelism was not something that I originally had in mind while live-bootstrap is incomplete. it introduced more problems than it solved, i found</span></div><div class="line" id="050856"><span class="nick" style="color:#234e69"><a href="#050856" label="[05:08:56]">&lt;fossy&gt;</a></span><span class="message">live-bootstrap is maturing well right now, though, so i wouldn't have problems with introducing parallelism</span></div><div class="line" id="050914"><span class="nick" style="color:#8dd3c7"><a href="#050914" label="[05:09:14]">&lt;oriansj&gt;</a></span><span class="message">fossy: well that is on janneke to decide on the bare minimal syscall support for Mescc</span></div><div class="line" id="050933"><span class="nick" style="color:#234e69"><a href="#050933" label="[05:09:33]">&lt;fossy&gt;</a></span><span class="message">ultimately yeah</span></div><div class="line" id="060700"><span class="nick" style="color:#8dd3c7"><a href="#060700" label="[06:07:00]">&lt;oriansj&gt;</a></span><span class="message">the question becomes if later I should add GFK support to the Linux kernel or let someone else do it</span></div><div class="line" id="062949"><span class="nick" style="color:#234e69"><a href="#062949" label="[06:29:49]">&lt;fossy&gt;</a></span><span class="message">gfk = ?</span></div><div class="line" id="063445"><span class="nick" style="color:#8dd3c7"><a href="#063445" label="[06:34:45]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/GFK/blob/main/GFK%20standard.org">https://github.com/oriansj/GFK/blob/main/GFK%20standard.org</a> </span></div><div class="line" id="063649"><span class="nick" style="color:#8dd3c7"><a href="#063649" label="[06:36:49]">&lt;oriansj&gt;</a></span><span class="message">it is a file system standard that I wrote up to enable a filesystem to be something trivial for someone with a notepad and a hex editor to create/update/fix</span></div><div class="line" id="063746"><span class="nick" style="color:#8dd3c7"><a href="#063746" label="[06:37:46]">&lt;oriansj&gt;</a></span><span class="message">Tonight, I am hacking together a minimal basic tool for generation of images files that conform to that spec</span></div><div class="line" id="063820"><span class="nick" style="color:#8dd3c7"><a href="#063820" label="[06:38:20]">&lt;oriansj&gt;</a></span><span class="message">so that M2-Planet can build it, and a kernel and it can be written to disk to complete the rest of the bootstrap</span></div><div class="line" id="063845"><span class="nick" style="color:#234e69"><a href="#063845" label="[06:38:45]">&lt;fossy&gt;</a></span><span class="message">a</span></div><div class="line" id="063847"><span class="nick" style="color:#234e69"><a href="#063847" label="[06:38:47]">&lt;fossy&gt;</a></span><span class="message">ah</span></div><div class="line" id="070850"><span class="nick" style="color:#8dd3c7"><a href="#070850" label="[07:08:50]">&lt;oriansj&gt;</a></span><span class="message">let us hope lseek is working correctly or things will get kinda funny fast</span></div><div class="line" id="092305"><span class="nick" style="color:#8dd3c7"><a href="#092305" label="[09:23:05]">&lt;oriansj&gt;</a></span><span class="message">I think limiting binary programs to under 1GB should be reasonable for a GFK filesystem being built with M2-Planet on builder-hex0</span></div><div class="line" id="093427"><span class="nick" style="color:#6c3d55"><a href="#093427" label="[09:34:27]">&lt;littlebobeep&gt;</a></span><span class="message">oriansj: what do you mean binaries?  I thought filesystems have limits on filesize of any file</span></div><div class="line" id="093446"><span class="nick" style="color:#8dd3c7"><a href="#093446" label="[09:34:46]">&lt;oriansj&gt;</a></span><span class="message">and I don't think we will be needing to build a system image with over 65K files</span></div><div class="line" id="093530"><span class="nick" style="color:#8dd3c7"><a href="#093530" label="[09:35:30]">&lt;oriansj&gt;</a></span><span class="message">littlebobeep: yes you are absolutely correct there</span></div><div class="line" id="093533"><span class="nick" style="color:#6c3d55"><a href="#093533" label="[09:35:33]">&lt;littlebobeep&gt;</a></span><span class="message">what is the downside for having higher limits?</span></div><div class="line" id="093550"><span class="nick" style="color:#8dd3c7"><a href="#093550" label="[09:35:50]">&lt;oriansj&gt;</a></span><span class="message">littlebobeep: more comlexity in implementation</span></div><div class="line" id="093647"><span class="nick" style="color:#8dd3c7"><a href="#093647" label="[09:36:47]">&lt;oriansj&gt;</a></span><span class="message">that being said GFK supports adjustable blockpointer size</span></div><div class="line" id="093716"><span class="nick" style="color:#8dd3c7"><a href="#093716" label="[09:37:16]">&lt;oriansj&gt;</a></span><span class="message">16bits means 2^16 volume blocks supported</span></div><div class="line" id="093750"><span class="nick" style="color:#8dd3c7"><a href="#093750" label="[09:37:50]">&lt;oriansj&gt;</a></span><span class="message">it also supports adjustable volume block sizes (default is 4096bytes)</span></div><div class="line" id="093813"><span class="nick" style="color:#8dd3c7"><a href="#093813" label="[09:38:13]">&lt;oriansj&gt;</a></span><span class="message">I'm using a pointer of 32bits out of the gate as the default</span></div><div class="line" id="094023"><span class="nick" style="color:#8dd3c7"><a href="#094023" label="[09:40:23]">&lt;oriansj&gt;</a></span><span class="message">as (2^32)*4096 (16TB) should be sufficient when trying to bootstrap Linux</span></div><div class="line" id="094205"><span class="nick" style="color:#8dd3c7"><a href="#094205" label="[09:42:05]">&lt;oriansj&gt;</a></span><span class="message">2 levels of indirection would be (512*512*4096bytes [1GB])</span></div><div class="line" id="094243"><span class="nick" style="color:#8dd3c7"><a href="#094243" label="[09:42:43]">&lt;oriansj&gt;</a></span><span class="message">(or 4 times that if one turns off the checksumming merkle tree)</span></div><div class="line" id="094312"><span class="nick" style="color:#8dd3c7"><a href="#094312" label="[09:43:12]">&lt;oriansj&gt;</a></span><span class="message">but I don't image we have any files that large prior to bootstrapping Linux</span></div><div class="line" id="094400"><span class="nick" style="color:#8dd3c7"><a href="#094400" label="[09:44:00]">&lt;oriansj&gt;</a></span><span class="message">and if we hit a need for another level of indirection support when generating GFK images; I can just add it</span></div><div class="line" id="094609"><span class="nick" style="color:#8dd3c7"><a href="#094609" label="[09:46:09]">&lt;oriansj&gt;</a></span><span class="message">actually</span></div><div class="line" id="094735"><span class="nick" style="color:#8dd3c7"><a href="#094735" label="[09:47:35]">&lt;oriansj&gt;</a></span><span class="message">nope, can't avoid having to calculate where to put the superblock in generated images</span></div><div class="line" id="102352"><span class="nick" style="color:#8dd3c7"><a href="#102352" label="[10:23:52]">&lt;oriansj&gt;</a></span><span class="message">ok, it is 4AM and I need sleep. I've commited the progress I made</span></div><div class="line" id="102434"><span class="nick" style="color:#8dd3c7"><a href="#102434" label="[10:24:34]">&lt;oriansj&gt;</a></span><span class="message">just need to add the dumping to disk</span></div><div class="line" id="111559"><span class="nick" style="color:#2e2a4a"><a href="#111559" label="[11:15:59]">&lt;doras&gt;</a></span><span class="message">fossy: I want to allow bootstrap with a different umask.</span></div><div class="line" id="111632"><span class="nick" style="color:#2e2a4a"><a href="#111632" label="[11:16:32]">&lt;doras&gt;</a></span><span class="message">If you'll change your root user umask to 0002 and run the bootstrap, you'll see that you don't get the same hash in tarball and XBPS packages.</span></div><div class="line" id="111646"><span class="nick" style="color:#2e2a4a"><a href="#111646" label="[11:16:46]">&lt;doras&gt;</a></span><span class="message">In chroot mode, I mean.</span></div><div class="line" id="111826"><span class="nick" style="color:#2e2a4a"><a href="#111826" label="[11:18:26]">&lt;doras&gt;</a></span><span class="message">This is because the file permission metadata is determined by the permissions of the files at packaging time, and if the umask is different, file permissions are different.</span></div><div class="line" id="111943"><span class="nick" style="color:#2e2a4a"><a href="#111943" label="[11:19:43]">&lt;doras&gt;</a></span><span class="message">I'd rather not have to change the umask externally to the bootstrap process to keep it self-contained.</span></div><div class="line" id="112035"><span class="nick" style="color:#2e2a4a"><a href="#112035" label="[11:20:35]">&lt;doras&gt;</a></span><span class="message">If mes supported the umask syscall, I would have set it to our expected value even earlier in the bootstrap.</span></div><div class="line" id="112126"><span class="nick" style="color:#2e2a4a"><a href="#112126" label="[11:21:26]">&lt;doras&gt;</a></span><span class="message">In the rootless bootstrap mode, the umask is inherited from the user running the bootstrap. This is where I hit the hash diff.</span></div><div class="line" id="113654"><span class="nick" style="color:#2e2a4a"><a href="#113654" label="[11:36:54]">&lt;doras&gt;</a></span><span class="message">stikonas: I think there is an issue with the make/gzip swap. I get a failure during bootstrap.</span></div><div class="line" id="113732"><span class="nick" style="color:#d9d9d9"><a href="#113732" label="[11:37:32]">&lt;stikonas[m]&gt;</a></span><span class="message">doras: can you paste the error</span></div><div class="line" id="113756"><span class="nick" style="color:#2e2a4a"><a href="#113756" label="[11:37:56]">&lt;doras&gt;</a></span><span class="message">I see that you change the &quot;gunzip&quot; to &quot;gzip -d&quot; manually in our scripts after your change, but it seems that it effectively means the &quot;gunzip&quot; command is never created.</span></div><div class="line" id="113812"><span class="nick" style="color:#2e2a4a"><a href="#113812" label="[11:38:12]">&lt;doras&gt;</a></span><span class="message">However, later stages of the bootstrap requires it.</span></div><div class="line" id="113823"><span class="nick" style="color:#d9d9d9"><a href="#113823" label="[11:38:23]">&lt;stikonas[m]&gt;</a></span><span class="message">Oh did I miss it?</span></div><div class="line" id="113833"><span class="nick" style="color:#d9d9d9"><a href="#113833" label="[11:38:33]">&lt;stikonas[m]&gt;</a></span><span class="message">Where is it needed?</span></div><div class="line" id="113849"><span class="nick" style="color:#d9d9d9"><a href="#113849" label="[11:38:49]">&lt;stikonas[m]&gt;</a></span><span class="message">I thought it ran to completion...</span></div><div class="line" id="113902"><span class="nick" style="color:#2e2a4a"><a href="#113902" label="[11:39:02]">&lt;doras&gt;</a></span><span class="message">I'll paste my failure.</span></div><div class="line" id="113921"><span class="nick" style="color:#d9d9d9"><a href="#113921" label="[11:39:21]">&lt;stikonas[m]&gt;</a></span><span class="message">And sysc did not have gunzip even before</span></div><div class="line" id="114044"><span class="nick" style="color:#2e2a4a"><a href="#114044" label="[11:40:44]">&lt;doras&gt;</a></span><span class="message">stikonas: <a rel="nofollow" href="https://gitlab.gnome.org/-/snippets/3477/raw/main/automake-1.10.3-build.log">https://gitlab.gnome.org/-/snippets/3477/raw/main/automake-1.10.3-build.log</a> </span></div><div class="line" id="114330"><span class="nick" style="color:#d9d9d9"><a href="#114330" label="[11:43:30]">&lt;stikonas[m]&gt;</a></span><span class="message">Yeah, I see. I'll readd symlink then</span></div><div class="line" id="114420"><span class="nick" style="color:#d9d9d9"><a href="#114420" label="[11:44:20]">&lt;stikonas[m]&gt;</a></span><span class="message">Or maybe deal with amhello</span></div><div class="line" id="114732"><span class="nick" style="color:#2e2a4a"><a href="#114732" label="[11:47:32]">&lt;doras&gt;</a></span><span class="message">Any reason to avoid creating gunzip?</span></div><div class="line" id="114824"><span class="nick" style="color:#2e2a4a"><a href="#114824" label="[11:48:24]">&lt;doras&gt;</a></span><span class="message">I like gunzip :)</span></div><div class="line" id="115005"><span class="nick" style="color:#2e2a4a"><a href="#115005" label="[11:50:05]">&lt;doras&gt;</a></span><span class="message">Oh I see, our previous gunzip was a fake gunzip. It wasn't even passing the &quot;-d&quot; option as expected.</span></div><div class="line" id="115056"><span class="nick" style="color:#2e2a4a"><a href="#115056" label="[11:50:56]">&lt;doras&gt;</a></span><span class="message">Usually it's a shell script wrapping &quot;gzip -d&quot;.</span></div><div class="line" id="115552"><span class="nick" style="color:#80b1d3"><a href="#115552" label="[11:55:52]">&lt;stikonas&gt;</a></span><span class="message">doras: looks like automake hardcodes gunzip itself</span></div><div class="line" id="115603"><span class="nick" style="color:#80b1d3"><a href="#115603" label="[11:56:03]">&lt;stikonas&gt;</a></span><span class="message">doras: gunzip is always fake</span></div><div class="line" id="115618"><span class="nick" style="color:#80b1d3"><a href="#115618" label="[11:56:18]">&lt;stikonas&gt;</a></span><span class="message">I don't think you evne need shell script</span></div><div class="line" id="115631"><span class="nick" style="color:#80b1d3"><a href="#115631" label="[11:56:31]">&lt;stikonas&gt;</a></span><span class="message">it just looks at how it was invoked</span></div><div class="line" id="115637"><span class="nick" style="color:#80b1d3"><a href="#115637" label="[11:56:37]">&lt;stikonas&gt;</a></span><span class="message">(similar to busybox)</span></div><div class="line" id="115703"><span class="nick" style="color:#2e2a4a"><a href="#115703" label="[11:57:03]">&lt;doras&gt;</a></span><span class="message">I'm familiar with the concept, but it seems Fedora packages a shell script.</span></div><div class="line" id="115705"><span class="nick" style="color:#80b1d3"><a href="#115705" label="[11:57:05]">&lt;stikonas&gt;</a></span><span class="message">anyway, I'm actually thinking of maybe just rebuilding gzip properly before automake 1.10 (with autoconf)</span></div><div class="line" id="115724"><span class="nick" style="color:#80b1d3"><a href="#115724" label="[11:57:24]">&lt;stikonas&gt;</a></span><span class="message">if autoconf that we have can deal with such old configure.in</span></div><div class="line" id="115731"><span class="nick" style="color:#80b1d3"><a href="#115731" label="[11:57:31]">&lt;stikonas&gt;</a></span><span class="message">that is present in that gzip version</span></div><div class="line" id="115744"><span class="nick" style="color:#2e2a4a"><a href="#115744" label="[11:57:44]">&lt;doras&gt;</a></span><span class="message">Maybe build a newer version.</span></div><div class="line" id="115759"><span class="nick" style="color:#80b1d3"><a href="#115759" label="[11:57:59]">&lt;stikonas&gt;</a></span><span class="message">yeah, I can go for newer version too</span></div><div class="line" id="115815"><span class="nick" style="color:#80b1d3"><a href="#115815" label="[11:58:15]">&lt;stikonas&gt;</a></span><span class="message">just need to check what are autotools requirements</span></div><div class="line" id="115854"><span class="nick" style="color:#80b1d3"><a href="#115854" label="[11:58:54]">&lt;stikonas&gt;</a></span><span class="message">right now we don't have gzip &quot;package&quot; at all</span></div><div class="line" id="115856"><span class="nick" style="color:#2e2a4a"><a href="#115856" label="[11:58:56]">&lt;doras&gt;</a></span><span class="message">Sounds like the best approach. Having a &quot;full&quot; gzip would be nice regardless.</span></div><div class="line" id="115857"><span class="nick" style="color:#80b1d3"><a href="#115857" label="[11:58:57]">&lt;stikonas&gt;</a></span><span class="message">because it was built so early</span></div><div class="line" id="120235"><span class="nick" style="color:#80b1d3"><a href="#120235" label="[12:02:35]">&lt;stikonas&gt;</a></span><span class="message">doras: I think we can go for gzip 1.3.12</span></div><div class="line" id="120303"><span class="nick" style="color:#80b1d3"><a href="#120303" label="[12:03:03]">&lt;stikonas&gt;</a></span><span class="message">1.3.13 &quot;needs&quot; automake 1.11</span></div><div class="line" id="120648"><span class="nick" style="color:#80b1d3"><a href="#120648" label="[12:06:48]">&lt;stikonas&gt;</a></span><span class="message">it doesn't build on my modern system... Though that shouldn't be a problem for live-bootstrap</span></div><div class="line" id="120823"><span class="nick" style="color:#2e2a4a"><a href="#120823" label="[12:08:23]">&lt;doras&gt;</a></span><span class="message">Oh well. gzip from 2007 must be better than gzip from 1993 :)</span></div><div class="line" id="120904"><span class="nick" style="color:#80b1d3"><a href="#120904" label="[12:09:04]">&lt;stikonas&gt;</a></span><span class="message">I'm actully not sure what changed in gzip...</span></div><div class="line" id="120919"><span class="nick" style="color:#80b1d3"><a href="#120919" label="[12:09:19]">&lt;stikonas&gt;</a></span><span class="message">even ungz from stage0-posix seems to be able to do its job</span></div><div class="line" id="121828"><span class="nick" style="color:#80b1d3"><a href="#121828" label="[12:18:28]">&lt;stikonas&gt;</a></span><span class="message">fossy: remember you patched old gzip not to include timestamps?</span></div><div class="line" id="121836"><span class="nick" style="color:#80b1d3"><a href="#121836" label="[12:18:36]">&lt;stikonas&gt;</a></span><span class="message">in commit 016b9511d2fd6bac25a42ea15c298451a6daad30</span></div><div class="line" id="121927"><span class="nick" style="color:#80b1d3"><a href="#121927" label="[12:19:27]">&lt;stikonas&gt;</a></span><span class="message">1. we probably don't need to do that anymore since packages were switched to bzip2</span></div><div class="line" id="122009"><span class="nick" style="color:#80b1d3"><a href="#122009" label="[12:20:09]">&lt;stikonas&gt;</a></span><span class="message">2. there might be simpler way to remove timestamps from all earlier packages. Use musl stubs for time related functions</span></div><div class="line" id="122020"><span class="nick" style="color:#80b1d3"><a href="#122020" label="[12:20:20]">&lt;stikonas&gt;</a></span><span class="message">(s/musl/mes)</span></div><div class="line" id="122032"><span class="nick" style="color:#80b1d3"><a href="#122032" label="[12:20:32]">&lt;stikonas&gt;</a></span><span class="message">rather than building real mes libc functions</span></div><div class="line" id="132831"><span class="nick" style="color:#bc80bd"><a href="#132831" label="[13:28:31]">*</a></span><span class="message">littlebobeep is not sure what build dependencies are different between gzip, bzip2, and xz</span></div><div class="line" id="133406"><span class="nick" style="color:#3c5b35"><a href="#133406" label="[13:34:06]">&lt;unmatched-paren&gt;</a></span><span class="message">littlebobeep: i believe xz is written in C++?</span></div><div class="line" id="133605"><span class="nick" style="color:#6c3d55"><a href="#133605" label="[13:36:05]">&lt;littlebobeep&gt;</a></span><span class="message">unmatched-paren: <a rel="nofollow" href="https://git.tukaani.org/?p=xz.git">https://git.tukaani.org/?p=xz.git</a>   looks like C, or?</span></div><div class="line" id="134020"><span class="nick" style="color:#6c3d55"><a href="#134020" label="[13:40:20]">&lt;littlebobeep&gt;</a></span><span class="message">this is interesting too: <a rel="nofollow" href="https://github.com/vasi/pixz">https://github.com/vasi/pixz</a> </span></div><div class="line" id="134224"><span class="nick" style="color:#6c3d55"><a href="#134224" label="[13:42:24]">&lt;littlebobeep&gt;</a></span><span class="message">I think p7zip might be partially C++ which also implements LZMA2 like xz</span></div><div class="line" id="134411"><span class="nick" style="color:#6c3d55"><a href="#134411" label="[13:44:11]">&lt;littlebobeep&gt;</a></span><span class="message">some people talk about zstandard online but I never looked into it much: <a rel="nofollow" href="https://facebook.github.io/zstd/">https://facebook.github.io/zstd/</a> </span></div><div class="line" id="134642"><span class="nick" style="color:#6c3d55"><a href="#134642" label="[13:46:42]">&lt;littlebobeep&gt;</a></span><span class="message">weird its an RFC, I wonder how many RFCs came from Facebook 0_o  <a rel="nofollow" href="https://datatracker.ietf.org/doc/html/rfc8478">https://datatracker.ietf.org/doc/html/rfc8478</a> </span></div><div class="line" id="134705"><span class="nick" style="color:#6c3d55"><a href="#134705" label="[13:47:05]">&lt;littlebobeep&gt;</a></span><span class="message">it might be faster than LZMA2, but I don't know anything that can get better compression than LZMA2</span></div><div class="line" id="135204"><span class="nick" style="color:#6c3d55"><a href="#135204" label="[13:52:04]">&lt;littlebobeep&gt;</a></span><span class="message">haha hmm OpenBSD says &quot;g&quot; in their gzip stands for 'gratis' <a rel="nofollow" href="https://man.openbsd.org/gzip.1#HISTORY">https://man.openbsd.org/gzip.1#HISTORY</a> </span></div><div class="line" id="135226"><span class="nick" style="color:#3c5b35"><a href="#135226" label="[13:52:26]">&lt;unmatched-paren&gt;</a></span><span class="message">littlebobeep: oh, i see, i think the problem might be that it's build with cmake? which I know _is_ C++</span></div><div class="line" id="135232"><span class="nick" style="color:#3c5b35"><a href="#135232" label="[13:52:32]">&lt;unmatched-paren&gt;</a></span><span class="message">s/build/built/</span></div><div class="line" id="135254"><span class="nick" style="color:#3c5b35"><a href="#135254" label="[13:52:54]">&lt;unmatched-paren&gt;</a></span><span class="message">although i guess you could always write an ad-hoc makefile</span></div><div class="line" id="135309"><span class="nick" style="color:#3c5b35"><a href="#135309" label="[13:53:09]">&lt;unmatched-paren&gt;</a></span><span class="message">there was _something_ that made xz annoying</span></div><div class="line" id="135328"><span class="nick" style="color:#3c5b35"><a href="#135328" label="[13:53:28]">&lt;unmatched-paren&gt;</a></span><span class="message">i remember that there was some GNU project that only distributed xz tarballs for a while</span></div><div class="line" id="135340"><span class="nick" style="color:#3c5b35"><a href="#135340" label="[13:53:40]">&lt;unmatched-paren&gt;</a></span><span class="message">which made using it in bootstrapping difficult</span></div><div class="line" id="135353"><span class="nick" style="color:#3c5b35"><a href="#135353" label="[13:53:53]">&lt;unmatched-paren&gt;</a></span><span class="message">i think it was noted on bootstrappable.org</span></div><div class="line" id="135505"><span class="nick" style="color:#6c3d55"><a href="#135505" label="[13:55:05]">&lt;littlebobeep&gt;</a></span><span class="message">unmatched-paren: I see no reference to cmake in the Guix 'xz' package definition, would it be there?</span></div><div class="line" id="135528"><span class="nick" style="color:#3c5b35"><a href="#135528" label="[13:55:28]">&lt;unmatched-paren&gt;</a></span><span class="message">ah, there's also a configure.ac that i missed, my bad</span></div><div class="line" id="135541"><span class="nick" style="color:#3c5b35"><a href="#135541" label="[13:55:41]">&lt;unmatched-paren&gt;</a></span><span class="message">looks like it can be built with both cmake and autotools</span></div><div class="line" id="135802"><span class="nick" style="color:#6c3d55"><a href="#135802" label="[13:58:02]">&lt;littlebobeep&gt;</a></span><span class="message">This claims zstandard is 1300% faster at decrompression than xz but has no technical benchmarking details so meh: <a rel="nofollow" href="https://archlinux.org/news/now-using-zstandard-instead-of-xz-for-package-compression/">https://archlinux.org/news/now-using-zstandard-instead-of-xz-for-package-compression/</a> </span></div><div class="line" id="140001"><span class="nick" style="color:#8dd3c7"><a href="#140001" label="[14:00:01]">&lt;oriansj&gt;</a></span><span class="message">littlebobeep: that which is stated without evidence can be rejected without evidence.</span></div><div class="line" id="140026"><span class="nick" style="color:#6c3d55"><a href="#140026" label="[14:00:26]">&lt;littlebobeep&gt;</a></span><span class="message">XD</span></div><div class="line" id="140234"><span class="nick" style="color:#8dd3c7"><a href="#140234" label="[14:02:34]">&lt;oriansj&gt;</a></span><span class="message">like my two year old who seems to believe I only need 3 hours of sleep because he wants to play at 7am. The conclusion was made long before compiling evidence to support its justification.</span></div><div class="line" id="141006"><span class="nick" style="color:#3c5b35"><a href="#141006" label="[14:10:06]">&lt;unmatched-paren&gt;</a></span><span class="message">oriansj: i remember seeing there being some reason why a crucial bootstrapping package only being provided in xz form was annoying; am i imagining things?</span></div><div class="line" id="141441"><span class="nick" style="color:#af8d2f"><a href="#141441" label="[14:14:41]">&lt;mihi&gt;</a></span><span class="message">unmatched-paren, I also remember that there have been some issues to build xz-utils with tinycc, which is why I built &lt;<a rel="nofollow" href="https://github.com/schierlm/xzdec-min">https://github.com/schierlm/xzdec-min</a>&gt; </span></div><div class="line" id="141501"><span class="nick" style="color:#af8d2f"><a href="#141501" label="[14:15:01]">&lt;mihi&gt;</a></span><span class="message">but I also don't remember the exact issues (even at the time when I committed it and wrote the README for it)</span></div><div class="line" id="141607"><span class="nick" style="color:#6c3d55"><a href="#141607" label="[14:16:07]">&lt;littlebobeep&gt;</a></span><span class="message">mihi: Why does github say 5,3% C++ ?</span></div><div class="line" id="141717"><span class="nick" style="color:#af8d2f"><a href="#141717" label="[14:17:17]">&lt;mihi&gt;</a></span><span class="message">littlebobeep, when you click it it tells you that the repo has not even been indexed for programming languages.</span></div><div class="line" id="141735"><span class="nick" style="color:#af8d2f"><a href="#141735" label="[14:17:35]">&lt;mihi&gt;</a></span><span class="message">Probably some heuristics that guessed wrong (I see this alot with Modula and Oberon code)?</span></div><div class="line" id="141749"><span class="nick" style="color:#6c3d55"><a href="#141749" label="[14:17:49]">&lt;littlebobeep&gt;</a></span><span class="message">uhmmm why does it show language statistics if it hasn't scanned?</span></div><div class="line" id="141757"><span class="nick" style="color:#af8d2f"><a href="#141757" label="[14:17:57]">&lt;mihi&gt;</a></span><span class="message">I can assure you that it builds fine with tcc</span></div><div class="line" id="141810"><span class="nick" style="color:#6c3d55"><a href="#141810" label="[14:18:10]">&lt;littlebobeep&gt;</a></span><span class="message">mihi: Cool project, but it says only glibc?</span></div><div class="line" id="141910"><span class="nick" style="color:#af8d2f"><a href="#141910" label="[14:19:10]">&lt;mihi&gt;</a></span><span class="message">The included config.h is for glibc. If you want to contribute config.h for meslibc or musl, feel free to do so (should be easy to generate if you have working autoconf)</span></div><div class="line" id="141954"><span class="nick" style="color:#af8d2f"><a href="#141954" label="[14:19:54]">&lt;mihi&gt;</a></span><span class="message">maybe it even works unchanged</span></div><div class="line" id="142020"><span class="nick" style="color:#3c5b35"><a href="#142020" label="[14:20:20]">&lt;unmatched-paren&gt;</a></span><span class="message">if it's from autoconf, surely it's not a suitable file for bootstrapping? since it's machine generated</span></div><div class="line" id="142049"><span class="nick" style="color:#6c3d55"><a href="#142049" label="[14:20:49]">&lt;littlebobeep&gt;</a></span><span class="message">unmatched-paren: why does machine-generated matter?</span></div><div class="line" id="142100"><span class="nick" style="color:#6c3d55"><a href="#142100" label="[14:21:00]">&lt;littlebobeep&gt;</a></span><span class="message">if it is not binary</span></div><div class="line" id="142111"><span class="nick" style="color:#af8d2f"><a href="#142111" label="[14:21:11]">&lt;mihi&gt;</a></span><span class="message">it's hand-vetted and commented</span></div><div class="line" id="142309"><span class="nick" style="color:#8dd3c7"><a href="#142309" label="[14:23:09]">&lt;oriansj&gt;</a></span><span class="message">littlebobeep: it absolutely matters to certain projects</span></div><div class="line" id="142316"><span class="nick" style="color:#3c5b35"><a href="#142316" label="[14:23:16]">&lt;unmatched-paren&gt;</a></span><span class="message">littlebobeep: that's fair enough, and I have made this argument (regarding the case of literate programming systems, where verifying that it matches the original document is trivial) but seemingly any generated file is unacceptable for live-bootstrap</span></div><div class="line" id="142346"><span class="nick" style="color:#8dd3c7"><a href="#142346" label="[14:23:46]">&lt;oriansj&gt;</a></span><span class="message">for example live-bootstrap and stage0* generate files are explicitly forbidden.</span></div><div class="line" id="142401"><span class="nick" style="color:#8dd3c7"><a href="#142401" label="[14:24:01]">&lt;oriansj&gt;</a></span><span class="message">^generate^generated^</span></div><div class="line" id="142446"><span class="nick" style="color:#3c5b35"><a href="#142446" label="[14:24:46]">&lt;unmatched-paren&gt;</a></span><span class="message">although i am unsure, in that case, how hex0 and kaem can ever work, since there's not really a way to go lower than a hex or binary assembler without e.g. punched cards</span></div><div class="line" id="142535"><span class="nick" style="color:#8dd3c7"><a href="#142535" label="[14:25:35]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: I hand toggle bytes into memory but yeah I get your point that most people don't want to go that far</span></div><div class="line" id="142545"><span class="nick" style="color:#8dd3c7"><a href="#142545" label="[14:25:45]">&lt;oriansj&gt;</a></span><span class="message">and why bootstrap-seeds exists</span></div><div class="line" id="142719"><span class="nick" style="color:#3c5b35"><a href="#142719" label="[14:27:19]">&lt;unmatched-paren&gt;</a></span><span class="message">it's trivial to verify, so long as you have a trusted way to view the binary, that the hex and resulting binary correspond</span></div><div class="line" id="142722"><span class="nick" style="color:#8dd3c7"><a href="#142722" label="[14:27:22]">&lt;oriansj&gt;</a></span><span class="message">and why the GNU project rightly rejects bootstrap-seeds; as binaries are not ever going to be considered source to them. Despite in that special case it was human written and the hex0 was just documentation.</span></div><div class="line" id="142757"><span class="nick" style="color:#3c5b35"><a href="#142757" label="[14:27:57]">&lt;unmatched-paren&gt;</a></span><span class="message">although now that i think about</span></div><div class="line" id="142810"><span class="nick" style="color:#3c5b35"><a href="#142810" label="[14:28:10]">&lt;unmatched-paren&gt;</a></span><span class="message">*it</span></div><div class="line" id="142810"><span class="nick" style="color:#3c5b35"><a href="#142810" label="[14:28:10]">&lt;unmatched-paren&gt;</a></span><span class="message">how do you view the binary as 00100010011 etc</span></div><div class="line" id="142812"><span class="nick" style="color:#3c5b35"><a href="#142812" label="[14:28:12]">&lt;unmatched-paren&gt;</a></span><span class="message">without software</span></div><div class="line" id="142826"><span class="nick" style="color:#8dd3c7"><a href="#142826" label="[14:28:26]">&lt;oriansj&gt;</a></span><span class="message">leds attached to memory</span></div><div class="line" id="142836"><span class="nick" style="color:#8dd3c7"><a href="#142836" label="[14:28:36]">&lt;oriansj&gt;</a></span><span class="message">(light emitting diodes)</span></div><div class="line" id="142847"><span class="nick" style="color:#3c5b35"><a href="#142847" label="[14:28:47]">&lt;unmatched-paren&gt;</a></span><span class="message">ah, ok</span></div><div class="line" id="142943"><span class="nick" style="color:#8dd3c7"><a href="#142943" label="[14:29:43]">&lt;oriansj&gt;</a></span><span class="message">you turn the clock off for the CPU and just toggle the memory address you want</span></div><div class="line" id="143031"><span class="nick" style="color:#bc80bd"><a href="#143031" label="[14:30:31]">*</a></span><span class="message">unmatched-paren is not a hardware person :P</span></div><div class="line" id="143103"><span class="nick" style="color:#8dd3c7"><a href="#143103" label="[14:31:03]">&lt;oriansj&gt;</a></span><span class="message">but make no mistake, there are *VERY VERY* good reasons why bootstrap-seeds starts with: *NEVER TRUST ANYTHING IN HERE*</span></div><div class="line" id="143142"><span class="nick" style="color:#3c5b35"><a href="#143142" label="[14:31:42]">&lt;unmatched-paren&gt;</a></span><span class="message">*unless you have checked that the hex0 code corresponds exactly</span></div><div class="line" id="143229"><span class="nick" style="color:#6c3d55"><a href="#143229" label="[14:32:29]">&lt;littlebobeep&gt;</a></span><span class="message">oriansj: I do not understand what the issue is with code produced by a machine, if it is in readable source form and can be modified by a human?</span></div><div class="line" id="143249"><span class="nick" style="color:#8dd3c7"><a href="#143249" label="[14:32:49]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: except you can't be certain it is a valid check unless you are able to remove software from between you and your inspection of the binary.</span></div><div class="line" id="143304"><span class="nick" style="color:#3c5b35"><a href="#143304" label="[14:33:04]">&lt;unmatched-paren&gt;</a></span><span class="message">littlebobeep: invisible unicode right-to-left text modifiers say hi</span></div><div class="line" id="143350"><span class="nick" style="color:#8dd3c7"><a href="#143350" label="[14:33:50]">&lt;oriansj&gt;</a></span><span class="message">littlebobeep: it is trivial to generate a 1Mloc artifact and bury a subtle backdoor that even the best auditor would never find.</span></div><div class="line" id="143510"><span class="nick" style="color:#8dd3c7"><a href="#143510" label="[14:35:10]">&lt;oriansj&gt;</a></span><span class="message">even if you look at human written C programs: <a rel="nofollow" href="https://www.ioccc.org/">https://www.ioccc.org/</a>  there are a great many ways to hide bad behavior</span></div><div class="line" id="143528"><span class="nick" style="color:#3c5b35"><a href="#143528" label="[14:35:28]">&lt;unmatched-paren&gt;</a></span><span class="message">littlebobeep: for one example of a hard-to-find vulnerability in plain, seemingly readable text: <a rel="nofollow" href="https://trojansource.codes/">https://trojansource.codes/</a> </span></div><div class="line" id="143700"><span class="nick" style="color:#8dd3c7"><a href="#143700" label="[14:37:00]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: although stage0's sin will warn about every single non-ascii core byte <a rel="nofollow" href="https://github.com/oriansj/stage0/blob/master/High_level_prototypes/sin.c">https://github.com/oriansj/stage0/blob/master/High_level_prototypes/sin.c</a> </span></div><div class="line" id="143803"><span class="nick" style="color:#8dd3c7"><a href="#143803" label="[14:38:03]">&lt;oriansj&gt;</a></span><span class="message">note that: I was explicit on only allowing a subset of ASCII characters to be considered valid in source code files</span></div><div class="line" id="143845"><span class="nick" style="color:#3c5b35"><a href="#143845" label="[14:38:45]">&lt;unmatched-paren&gt;</a></span><span class="message">that makes sense, yes</span></div><div class="line" id="143922"><span class="nick" style="color:#389600"><a href="#143922" label="[14:39:22]">&lt;bauen1&gt;</a></span><span class="message">unmatched-paren: you can hand toggle the SPI protocol to read from SPI NOR FLASH, been there done that (but with a provided clock because I don't have a debounce circuit)</span></div><div class="line" id="144019"><span class="nick" style="color:#3c5b35"><a href="#144019" label="[14:40:19]">&lt;unmatched-paren&gt;</a></span><span class="message">sorry, that sentence is a bit alien to me :) what's the &quot;SPI protocol&quot;?</span></div><div class="line" id="144046"><span class="nick" style="color:#389600"><a href="#144046" label="[14:40:46]">&lt;bauen1&gt;</a></span><span class="message">unmatched-paren: <a rel="nofollow" href="https://en.wikipedia.org/wiki/Serial_Peripheral_Interface">https://en.wikipedia.org/wiki/Serial_Peripheral_Interface</a>  actually it's more of an electrical interface specification i guess</span></div><div class="line" id="144139"><span class="nick" style="color:#3c5b35"><a href="#144139" label="[14:41:39]">&lt;unmatched-paren&gt;</a></span><span class="message">so basically a protocol for electronic components to communicate?</span></div><div class="line" id="144216"><span class="nick" style="color:#389600"><a href="#144216" label="[14:42:16]">&lt;bauen1&gt;</a></span><span class="message">unmatched-paren: yes, specifically a lot of small flash / eeprom / other sensor chips</span></div><div class="line" id="144523"><span class="nick" style="color:#8dd3c7"><a href="#144523" label="[14:45:23]">&lt;oriansj&gt;</a></span><span class="message">wow, I was so tired last night I thought I pushed the partial GFK creation tool to github but I guess not</span></div><div class="line" id="144749"><span class="nick" style="color:#af8d2f"><a href="#144749" label="[14:47:49]">&lt;mihi&gt;</a></span><span class="message">oriansj, littlebobeep, unmatched-paren: I guess we can debate forever whether copying .c file names from a build log into a kaem file (while vetting the file names) is more or less hand-generated than copying single #defines from autoconf output (after verifying that glibc indeed does or does not provide that functionality) into a commented config.h file. Anyway, if you don't want to use config.h,</span></div><div class="line" id="144749"><span class="nick" style="color:#af8d2f"><a href="#144749" label="[14:47:49]">&lt;mihi&gt;</a></span><span class="message">you can build your own one, or just take the autoconf machinery from original xz-utils to build one for you which is 10 times as long :)</span></div><div class="line" id="144934"><span class="nick" style="color:#af8d2f"><a href="#144934" label="[14:49:34]">&lt;mihi&gt;</a></span><span class="message">(I also verified whether those defines are used inside the decoder code and removed all that are not, that is the second reason why the file got shorter)</span></div><div class="line" id="145021"><span class="nick" style="color:#8dd3c7"><a href="#145021" label="[14:50:21]">&lt;oriansj&gt;</a></span><span class="message">mihi: it is ultimately up to the person doing the work, what they will or will not accept</span></div><div class="line" id="145136"><span class="nick" style="color:#8dd3c7"><a href="#145136" label="[14:51:36]">&lt;oriansj&gt;</a></span><span class="message">and I fully support *EVERYONE* to do what they believe is correct.</span></div><div class="line" id="145313"><span class="nick" style="color:#af8d2f"><a href="#145313" label="[14:53:13]">&lt;mihi&gt;</a></span><span class="message">unmatched-paren, see <a rel="nofollow" href="https://www.youtube.com/watch?v=BA12Z7gQ4P0&amp;t=0s">https://www.youtube.com/watch?v=BA12Z7gQ4P0&amp;t=0s</a>  for how to build an eeprom reader and programmer from a breadboard and a few resistors and LEDs :)</span></div><div class="line" id="145420"><span class="nick" style="color:#af8d2f"><a href="#145420" label="[14:54:20]">&lt;mihi&gt;</a></span><span class="message">oriansj, I fully agree to that statement</span></div><div class="line" id="145427"><span class="nick" style="color:#8dd3c7"><a href="#145427" label="[14:54:27]">&lt;oriansj&gt;</a></span><span class="message">a debate on the subject is at most an effort to convince those who are undecided to accept a certain level of ideological purity and a certain level of practical reality.</span></div><div class="line" id="145516"><span class="nick" style="color:#3c5b35"><a href="#145516" label="[14:55:16]">&lt;unmatched-paren&gt;</a></span><span class="message">oriansj: that statement reminds me at some level of the free software movement as a whole, and the whole debate about hardware and BIOS</span></div><div class="line" id="145532"><span class="nick" style="color:#8dd3c7"><a href="#145532" label="[14:55:32]">&lt;oriansj&gt;</a></span><span class="message">which they are free to choose for themselves without judgement but must understand that others may or may not choose to accept using your work.</span></div><div class="line" id="145622"><span class="nick" style="color:#8dd3c7"><a href="#145622" label="[14:56:22]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: well yes because that is literally what we are doing to a degree.</span></div><div class="line" id="145634"><span class="nick" style="color:#af8d2f"><a href="#145634" label="[14:56:34]">&lt;mihi&gt;</a></span><span class="message">&quot;This program is distributed in the hope that it will be useful&quot; :)</span></div><div class="line" id="145820"><span class="nick" style="color:#80b1d3"><a href="#145820" label="[14:58:20]">&lt;stikonas&gt;</a></span><span class="message">unmatched-paren, littlebobeep: well we bootstrapped xz in live-bootstrap, so I don't think shipping just xz now is problematic</span></div><div class="line" id="145933"><span class="nick" style="color:#8dd3c7"><a href="#145933" label="[14:59:33]">&lt;oriansj&gt;</a></span><span class="message">we depended upon Linux/BSD/POSIX kernels we couldn't yet bootstrap for years because we didn't have a better option *YET* but now that rickmasters has given us a better option we can move past that. We will do the same for BIOS/FIRMWARE/MICROCODE in time but we have practical results now that are real progress compared to what we had weeks ago.</span></div><div class="line" id="150036"><span class="nick" style="color:#3c5b35"><a href="#150036" label="[15:00:36]">&lt;unmatched-paren&gt;</a></span><span class="message">absolutely :) and ultimately CPUs</span></div><div class="line" id="150103"><span class="nick" style="color:#8dd3c7"><a href="#150103" label="[15:01:03]">&lt;oriansj&gt;</a></span><span class="message">and all secrets and magic will be revealed to all that wish to learn.</span></div><div class="line" id="150240"><span class="nick" style="color:#80b1d3"><a href="#150240" label="[15:02:40]">&lt;stikonas&gt;</a></span><span class="message">doras: I'm struggling to compile those gzip versions from 2007 or so. For now I'll just create gunzip symlink</span></div><div class="line" id="150341"><span class="nick" style="color:#80b1d3"><a href="#150341" label="[15:03:41]">&lt;stikonas&gt;</a></span><span class="message">or maybe just cp since ln is not available that early</span></div><div class="line" id="150548"><span class="nick" style="color:#80b1d3"><a href="#150548" label="[15:05:48]">&lt;stikonas&gt;</a></span><span class="message">if we want newer gzip, we can just build it in sysc...</span></div><div class="line" id="152013"><span class="nick" style="color:#8dd3c7"><a href="#152013" label="[15:20:13]">&lt;oriansj&gt;</a></span><span class="message">oh and if you are bribed (say in the terms of $$$ Millions) to subvert the bootstrap, please do so in a fashion that also helps expand the bootstrap closer to the final goal. ^_^</span></div><div class="line" id="152124"><span class="nick" style="color:#3c5b35"><a href="#152124" label="[15:21:24]">&lt;unmatched-paren&gt;</a></span><span class="message">HAHA FOOLS! i used the bribe money to buy parts for a homemade CPU! :P</span></div><div class="line" id="152203"><span class="nick" style="color:#3c5b35"><a href="#152203" label="[15:22:03]">&lt;unmatched-paren&gt;</a></span><span class="message">actually buying parts for a bootstrapping cpu may not be the smartest idea...</span></div><div class="line" id="152211"><span class="nick" style="color:#8dd3c7"><a href="#152211" label="[15:22:11]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: don't forget to share the design documents so that others can make and audit it too</span></div><div class="line" id="152255"><span class="nick" style="color:#8dd3c7"><a href="#152255" label="[15:22:55]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: it is fine until we are able to make our own parts</span></div><div class="line" id="152344"><span class="nick" style="color:#8dd3c7"><a href="#152344" label="[15:23:44]">&lt;oriansj&gt;</a></span><span class="message">once we have do it yourself lithography, then yes buying off the shelf parts might not be the most secure way of building a CPU but until then store bought is fine</span></div><div class="line" id="152405"><span class="nick" style="color:#8dd3c7"><a href="#152405" label="[15:24:05]">&lt;oriansj&gt;</a></span><span class="message">morning rickmasters</span></div><div class="line" id="152417"><span class="nick" style="color:#3c5b35"><a href="#152417" label="[15:24:17]">&lt;unmatched-paren&gt;</a></span><span class="message">oriansj: to be clear, i was joking (if you're being sarcastic/etc. i'm sorry, but it wasn't very obvious)</span></div><div class="line" id="152434"><span class="nick" style="color:#3c5b35"><a href="#152434" label="[15:24:34]">&lt;unmatched-paren&gt;</a></span><span class="message">it kind of looked like you were taking me seriously :)</span></div><div class="line" id="152440"><span class="nick" style="color:#6b8072"><a href="#152440" label="[15:24:40]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: good morning, hope you got some sleep</span></div><div class="line" id="152535"><span class="nick" style="color:#8dd3c7"><a href="#152535" label="[15:25:35]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: oh I am quite serious. If you are offerred $$$ Millions to subvert the bootstrap, I want you to take the money. I just ask that you still help with the bootstrap and not do 100% subversion all the time because you'll be detected quickly and then they might want the money back.</span></div><div class="line" id="152601"><span class="nick" style="color:#8dd3c7"><a href="#152601" label="[15:26:01]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: only 3.5 hours because my kid decided he wanted to play the second the sun came up.</span></div><div class="line" id="152712"><span class="nick" style="color:#8dd3c7"><a href="#152712" label="[15:27:12]">&lt;oriansj&gt;</a></span><span class="message">it'll still be a net win for all of us if you get bribed that amount.</span></div><div class="line" id="152806"><span class="nick" style="color:#8dd3c7"><a href="#152806" label="[15:28:06]">&lt;oriansj&gt;</a></span><span class="message">if someone offers you less than retirement amounts of money to subvert the bootstrap say, &quot;No one with the ability to do what you want will do it for less&quot;</span></div><div class="line" id="152902"><span class="nick" style="color:#8dd3c7"><a href="#152902" label="[15:29:02]">&lt;oriansj&gt;</a></span><span class="message">think of it as a collective bargin we all agree to that converts that risk to a net gain for all of us.</span></div><div class="line" id="152946"><span class="nick" style="color:#3c5b35"><a href="#152946" label="[15:29:46]">&lt;unmatched-paren&gt;</a></span><span class="message">presumably the person bribing would be technically illiterate, so i could pretend to add a backdoor involving unicode and they wouldn't know that hex0 disallows it :) then i could take the money</span></div><div class="line" id="153019"><span class="nick" style="color:#8dd3c7"><a href="#153019" label="[15:30:19]">&lt;oriansj&gt;</a></span><span class="message">also a valid option in that case.</span></div><div class="line" id="153137"><span class="nick" style="color:#8dd3c7"><a href="#153137" label="[15:31:37]">&lt;oriansj&gt;</a></span><span class="message">and if threatened do it poorly so that it is immediately detected and claim that we are just super good at detection and you needed much more time to do the work (years even)</span></div><div class="line" id="153204"><span class="nick" style="color:#3c5b35"><a href="#153204" label="[15:32:04]">&lt;unmatched-paren&gt;</a></span><span class="message">hmm... 0x0000 is the noop instruction, right? i could also pretend to smuggle in a noop with a pull request :)</span></div><div class="line" id="153220"><span class="nick" style="color:#3c5b35"><a href="#153220" label="[15:32:20]">&lt;unmatched-paren&gt;</a></span><span class="message">s/pretend //</span></div><div class="line" id="153220"><span class="nick" style="color:#3c5b35"><a href="#153220" label="[15:32:20]">&lt;unmatched-paren&gt;</a></span><span class="message">s/to //</span></div><div class="line" id="153220"><span class="nick" style="color:#8dd3c7"><a href="#153220" label="[15:32:20]">&lt;oriansj&gt;</a></span><span class="message">and money to fund yourself to get the time required to do the creation.</span></div><div class="line" id="153244"><span class="nick" style="color:#3c5b35"><a href="#153244" label="[15:32:44]">&lt;unmatched-paren&gt;</a></span><span class="message">and say it's a super h4xx0r instruction that destroys the whole bootstrap</span></div><div class="line" id="153423"><span class="nick" style="color:#8dd3c7"><a href="#153423" label="[15:34:23]">&lt;oriansj&gt;</a></span><span class="message">well 0x0000 is add byte [eax], al for x86, andeq r0, r0, r0 for armv7l, and other things depending on the architecture but yeah in bootstrapping 0x00000000 is probably just being used as a NULL value</span></div><div class="line" id="153448"><span class="nick" style="color:#3c5b35"><a href="#153448" label="[15:34:48]">&lt;unmatched-paren&gt;</a></span><span class="message">ah, i though it was NOP</span></div><div class="line" id="153507"><span class="nick" style="color:#3c5b35"><a href="#153507" label="[15:35:07]">&lt;unmatched-paren&gt;</a></span><span class="message">but the fact that it isn't makes it even easier to obscure the fact that it does nothing!</span></div><div class="line" id="153544"><span class="nick" style="color:#8dd3c7"><a href="#153544" label="[15:35:44]">&lt;oriansj&gt;</a></span><span class="message">an easy way to flag your commit is check in a unicode character (even whitespace)</span></div><div class="line" id="153557"><span class="nick" style="color:#8dd3c7"><a href="#153557" label="[15:35:57]">&lt;oriansj&gt;</a></span><span class="message">we have sin after all</span></div><div class="line" id="154211"><span class="nick" style="color:#8dd3c7"><a href="#154211" label="[15:42:11]">&lt;oriansj&gt;</a></span><span class="message">and if you detect someone doing subversion in the bribed manner, just provide patches that fixes the subversion as if it is any other type of bug. If they do it in the blackmail manner, raise big red flags all over the place.</span></div><div class="line" id="154348"><span class="nick" style="color:#8dd3c7"><a href="#154348" label="[15:43:48]">&lt;oriansj&gt;</a></span><span class="message">That way the bribed person stays a productive member of the community (who just needs someone to do clean up on their work)</span></div><div class="line" id="154409"><span class="nick" style="color:#8dd3c7"><a href="#154409" label="[15:44:09]">&lt;oriansj&gt;</a></span><span class="message">but a blackmailed person is immediately flagged for a full review of everything they have ever submitted.</span></div><div class="line" id="154422"><span class="nick" style="color:#8dd3c7"><a href="#154422" label="[15:44:22]">&lt;oriansj&gt;</a></span><span class="message">That way blackmail becomes a non-starter</span></div><div class="line" id="154440"><span class="nick" style="color:#8dd3c7"><a href="#154440" label="[15:44:40]">&lt;oriansj&gt;</a></span><span class="message">but bribes become the only valid attack vector</span></div><div class="line" id="154448"><span class="nick" style="color:#3c5b35"><a href="#154448" label="[15:44:48]">&lt;unmatched-paren&gt;</a></span><span class="message">we could also have some kind of secret comment that looks like something technical but actually doesn't make any sense that marks a subversion point: something like `# NOTE: possible TLREGXX overflow in the HTML firewall` :P</span></div><div class="line" id="154518"><span class="nick" style="color:#3c5b35"><a href="#154518" label="[15:45:18]">&lt;unmatched-paren&gt;</a></span><span class="message">hypothetical scenarios are fun to think about</span></div><div class="line" id="154547"><span class="nick" style="color:#8dd3c7"><a href="#154547" label="[15:45:47]">&lt;oriansj&gt;</a></span><span class="message">again, obvious subversion is an immedate blackmail flag and needs to be made into a *BIG* issue immediately.</span></div><div class="line" id="154636"><span class="nick" style="color:#8dd3c7"><a href="#154636" label="[15:46:36]">&lt;oriansj&gt;</a></span><span class="message">subtle subversion is just a fixit ticket as a github issue or a bug report. (ideally with a patch)</span></div><div class="line" id="154951"><span class="nick" style="color:#8dd3c7"><a href="#154951" label="[15:49:51]">&lt;oriansj&gt;</a></span><span class="message">the details should not be discussed online to prevent third parties from knowing what they are besides the vague obvious/subtle distinction which provides them nothing useful to work with for knowing which you are doing.</span></div><div class="line" id="155339"><span class="nick" style="color:#8dd3c7"><a href="#155339" label="[15:53:39]">&lt;oriansj&gt;</a></span><span class="message">anyway back to getting GFK filesystem generation implemented.</span></div><div class="line" id="160354"><span class="nick" style="color:#8dd3c7"><a href="#160354" label="[16:03:54]">&lt;Hagfish&gt;</a></span><span class="message">i really like that video of manually setting the binary values in an EEPROM.  i think the circuit would benefit from a binary counter and 16 push buttons, though</span></div><div class="line" id="160413"><span class="nick" style="color:#8dd3c7"><a href="#160413" label="[16:04:13]">&lt;Hagfish&gt;</a></span><span class="message">that way you could speedrun flashing the whole 2k memory by hand</span></div><div class="line" id="160419"><span class="nick" style="color:#8dd3c7"><a href="#160419" label="[16:04:19]">&lt;oriansj&gt;</a></span><span class="message">or toggle switches</span></div><div class="line" id="160448"><span class="nick" style="color:#8dd3c7"><a href="#160448" label="[16:04:48]">&lt;Hagfish&gt;</a></span><span class="message">i'm thinking about how to make the writing process as convenient as possible</span></div><div class="line" id="160515"><span class="nick" style="color:#8dd3c7"><a href="#160515" label="[16:05:15]">&lt;Hagfish&gt;</a></span><span class="message">choosing one of the 16 buttons should enter that value into the memory, and automatically increment the address</span></div><div class="line" id="160523"><span class="nick" style="color:#8dd3c7"><a href="#160523" label="[16:05:23]">&lt;oriansj&gt;</a></span><span class="message">oh, I was thinking of how to make the electrical circuits as simple as possible</span></div><div class="line" id="160552"><span class="nick" style="color:#8dd3c7"><a href="#160552" label="[16:05:52]">&lt;Hagfish&gt;</a></span><span class="message">yeah, that's a different (and maybe more important) concern</span></div><div class="line" id="160600"><span class="nick" style="color:#8dd3c7"><a href="#160600" label="[16:06:00]">&lt;oriansj&gt;</a></span><span class="message">but yeah that would probably be cool, like 1 hex char per button</span></div><div class="line" id="160607"><span class="nick" style="color:#8dd3c7"><a href="#160607" label="[16:06:07]">&lt;Hagfish&gt;</a></span><span class="message">right, that's what i'm thinking</span></div><div class="line" id="160624"><span class="nick" style="color:#8dd3c7"><a href="#160624" label="[16:06:24]">&lt;oriansj&gt;</a></span><span class="message">then typing a byte just becomes 2 button presses, yeah that'll definitely enable hex0 bare metal speedruns</span></div><div class="line" id="160639"><span class="nick" style="color:#8dd3c7"><a href="#160639" label="[16:06:39]">&lt;Hagfish&gt;</a></span><span class="message">2 presses?</span></div><div class="line" id="160650"><span class="nick" style="color:#8dd3c7"><a href="#160650" label="[16:06:50]">&lt;Hagfish&gt;</a></span><span class="message">couldn't the circuit increment the counter automatically?</span></div><div class="line" id="160701"><span class="nick" style="color:#8dd3c7"><a href="#160701" label="[16:07:01]">&lt;Hagfish&gt;</a></span><span class="message">the timing would be really tricky, admittedly</span></div><div class="line" id="160716"><span class="nick" style="color:#8dd3c7"><a href="#160716" label="[16:07:16]">&lt;oriansj&gt;</a></span><span class="message">4bits is 16 different values; 8bits is a byte</span></div><div class="line" id="160726"><span class="nick" style="color:#8dd3c7"><a href="#160726" label="[16:07:26]">&lt;Hagfish&gt;</a></span><span class="message">oh, sorry, yes</span></div><div class="line" id="160730"><span class="nick" style="color:#8dd3c7"><a href="#160730" label="[16:07:30]">&lt;oriansj&gt;</a></span><span class="message">so first press for first 4 bits, second press for second 4 bits</span></div><div class="line" id="160801"><span class="nick" style="color:#8dd3c7"><a href="#160801" label="[16:08:01]">&lt;Hagfish&gt;</a></span><span class="message">yeah, it would be typing nybbles</span></div><div class="line" id="160801"><span class="nick" style="color:#8dd3c7"><a href="#160801" label="[16:08:01]">&lt;oriansj&gt;</a></span><span class="message">unless you wanted 256 buttons</span></div><div class="line" id="160835"><span class="nick" style="color:#8dd3c7"><a href="#160835" label="[16:08:35]">&lt;oriansj&gt;</a></span><span class="message">say in an 8x8 matrix; would allow really quick entry of binary programs</span></div><div class="line" id="160839"><span class="nick" style="color:#8dd3c7"><a href="#160839" label="[16:08:39]">&lt;Hagfish&gt;</a></span><span class="message">not impossible to wire, although learning the keyboard would be tricky</span></div><div class="line" id="160913"><span class="nick" style="color:#8dd3c7"><a href="#160913" label="[16:09:13]">&lt;Hagfish&gt;</a></span><span class="message">a base64 keyboard would be cool</span></div><div class="line" id="160930"><span class="nick" style="color:#8dd3c7"><a href="#160930" label="[16:09:30]">&lt;oriansj&gt;</a></span><span class="message">Hagfish: we already have those</span></div><div class="line" id="160939"><span class="nick" style="color:#8dd3c7"><a href="#160939" label="[16:09:39]">&lt;oriansj&gt;</a></span><span class="message">they are just called keyboards</span></div><div class="line" id="160947"><span class="nick" style="color:#8dd3c7"><a href="#160947" label="[16:09:47]">&lt;Hagfish&gt;</a></span><span class="message">heh, i mean the implementation would be cool, but yes</span></div><div class="line" id="161024"><span class="nick" style="color:#8dd3c7"><a href="#161024" label="[16:10:24]">&lt;oriansj&gt;</a></span><span class="message">well I guess if it was in that sort of low level base64 to deposit bytes to memory it would probably be neat</span></div><div class="line" id="161038"><span class="nick" style="color:#8dd3c7"><a href="#161038" label="[16:10:38]">&lt;Hagfish&gt;</a></span><span class="message">right</span></div><div class="line" id="161106"><span class="nick" style="color:#3c5b35"><a href="#161106" label="[16:11:06]">&lt;unmatched-paren&gt;</a></span><span class="message">a keyboard with `0` and `1` only :)</span></div><div class="line" id="161148"><span class="nick" style="color:#8dd3c7"><a href="#161148" label="[16:11:48]">&lt;oriansj&gt;</a></span><span class="message">that already is a thing: <a rel="nofollow" href="https://johnmu.com/2021-binary-keyboard/">https://johnmu.com/2021-binary-keyboard/</a> </span></div><div class="line" id="161205"><span class="nick" style="color:#8dd3c7"><a href="#161205" label="[16:12:05]">&lt;Hagfish&gt;</a></span><span class="message">i was thinking that one meaningful level of purity/security would be to use one of those 6502-based computers (like Ben Eater's channel explains) with a hand coded EEPROM firmware</span></div><div class="line" id="161239"><span class="nick" style="color:#8dd3c7"><a href="#161239" label="[16:12:39]">&lt;Hagfish&gt;</a></span><span class="message">people have written sdcard drivers for the 6502, so you could use it (and the keyboard) to write an sdcard</span></div><div class="line" id="161301"><span class="nick" style="color:#8dd3c7"><a href="#161301" label="[16:13:01]">&lt;Hagfish&gt;</a></span><span class="message">which could then (through an sdcard to ide converter) be used as the basis for a 286 or something</span></div><div class="line" id="161330"><span class="nick" style="color:#8dd3c7"><a href="#161330" label="[16:13:30]">&lt;oriansj&gt;</a></span><span class="message">Hagfish: well some sdcards have z80s inside of them, so with some cleverness you could have the SDcard generate the contents of the SDcard in a bootstrap fashion.</span></div><div class="line" id="161336"><span class="nick" style="color:#8dd3c7"><a href="#161336" label="[16:13:36]">&lt;Hagfish&gt;</a></span><span class="message">that still involves trusting the bios, sadly, but if that bios is really a ROM (written decades ago) then that gives a certain type of confidence</span></div><div class="line" id="161514"><span class="nick" style="color:#8dd3c7"><a href="#161514" label="[16:15:14]">&lt;Hagfish&gt;</a></span><span class="message">i don't think you could get the sdcard to accept writing from a simple circuit unless you could rewrite its ROM</span></div><div class="line" id="161537"><span class="nick" style="color:#8dd3c7"><a href="#161537" label="[16:15:37]">&lt;Hagfish&gt;</a></span><span class="message">but yeah, just thinking about that makes me imagine the Simulation Hypothesis and The Matrix</span></div><div class="line" id="161742"><span class="nick" style="color:#8dd3c7"><a href="#161742" label="[16:17:42]">&lt;oriansj&gt;</a></span><span class="message">well unfortunately I don't have good answers for that problem. But I do believe that if you live your life like it actually matters, the worst that happens if you have a life you find meaninful.</span></div><div class="line" id="161811"><span class="nick" style="color:#8dd3c7"><a href="#161811" label="[16:18:11]">&lt;oriansj&gt;</a></span><span class="message">^if^is^</span></div><div class="line" id="162255"><span class="nick" style="color:#8dd3c7"><a href="#162255" label="[16:22:55]">&lt;Hagfish&gt;</a></span><span class="message">yeah, i think that's about as good an answer as philosophy will allow</span></div><div class="line" id="162423"><span class="nick" style="color:#8dd3c7"><a href="#162423" label="[16:24:23]">&lt;oriansj&gt;</a></span><span class="message">dongcarl: what do you think the cryptocurrency community would do if they heard my stance on bribes?</span></div><div class="line" id="163647"><span class="nick" style="color:#2e2a4a"><a href="#163647" label="[16:36:47]">&lt;doras&gt;</a></span><span class="message">stikonas @stikonas:libera.chat: sure. Thanks.</span></div><div class="line" id="163703"><span class="nick" style="color:#80b1d3"><a href="#163703" label="[16:37:03]">&lt;stikonas&gt;</a></span><span class="message">doras: seems to be working fine now, I already pushed the change</span></div><div class="line" id="163720"><span class="nick" style="color:#80b1d3"><a href="#163720" label="[16:37:20]">&lt;stikonas&gt;</a></span><span class="message">last time I think when I removed gunzip I ran live-bootstrap till findutils...</span></div><div class="line" id="163740"><span class="nick" style="color:#80b1d3"><a href="#163740" label="[16:37:40]">&lt;stikonas&gt;</a></span><span class="message">which is just 2 packages short of the failed one...</span></div><div class="line" id="174043"><span class="nick" style="color:#2e2a4a"><a href="#174043" label="[17:40:43]">&lt;doras&gt;</a></span><span class="message">And here I am being careful and running full bootstraps before each MR :)</span></div><div class="line" id="174109"><span class="nick" style="color:#2e2a4a"><a href="#174109" label="[17:41:09]">&lt;doras&gt;</a></span><span class="message">Even multiple ones!</span></div><div class="line" id="183011"><span class="nick" style="color:#80b1d3"><a href="#183011" label="[18:30:11]">&lt;stikonas&gt;</a></span><span class="message">doras: yes, I usually do run multiple bootstraps before each MR...</span></div><div class="line" id="183029"><span class="nick" style="color:#80b1d3"><a href="#183029" label="[18:30:29]">&lt;stikonas&gt;</a></span><span class="message">but yesterday you made some MR, so I switched to running yours</span></div><div class="line" id="183119"><span class="nick" style="color:#80b1d3"><a href="#183119" label="[18:31:19]">&lt;stikonas&gt;</a></span><span class="message">anyway, fixed now. An I'm now testing a fix for zero size bzip2 package (<a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/issues/156">https://github.com/fosslinux/live-bootstrap/issues/156</a>) </span></div><div class="line" id="183220"><span class="nick" style="color:#80b1d3"><a href="#183220" label="[18:32:20]">&lt;stikonas&gt;</a></span><span class="message">and then more of your MRs...</span></div><div class="line" id="183302"><span class="nick" style="color:#2e2a4a"><a href="#183302" label="[18:33:02]">&lt;doras&gt;</a></span><span class="message">Thanks :)</span></div><div class="line" id="183322"><span class="nick" style="color:#2e2a4a"><a href="#183322" label="[18:33:22]">&lt;doras&gt;</a></span><span class="message">I think getting <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/165">https://github.com/fosslinux/live-bootstrap/pull/165</a>  in would be nice since it changes quite a few hashes.</span></div><div class="line" id="183404"><span class="nick" style="color:#2e2a4a"><a href="#183404" label="[18:34:04]">&lt;doras&gt;</a></span><span class="message">By the way, I think most of the hash changes are due to &quot;--numeric-owner --owner=0 --group=0&quot; and not &quot;--mode=go=rX,u+rw,a-s&quot;.</span></div><div class="line" id="183439"><span class="nick" style="color:#2e2a4a"><a href="#183439" label="[18:34:39]">&lt;doras&gt;</a></span><span class="message">I mostly needed the latter, but went along with the command that was suggested here.</span></div><div class="line" id="183514"><span class="nick" style="color:#80b1d3"><a href="#183514" label="[18:35:14]">&lt;stikonas&gt;</a></span><span class="message">doras: I have a question regarding <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/163/files#diff-bb3655625ec3a00693f39b72442d345b962ebafafe06d36cb6cff6dc6ba4e566R372">https://github.com/fosslinux/live-bootstrap/pull/163/files#diff-bb3655625ec3a00693f39b72442d345b962ebafafe06d36cb6cff6dc6ba4e566R372</a> </span></div><div class="line" id="183533"><span class="nick" style="color:#80b1d3"><a href="#183533" label="[18:35:33]">&lt;stikonas&gt;</a></span><span class="message">wouldn't that skip rm step if /dev/null exists?</span></div><div class="line" id="183603"><span class="nick" style="color:#80b1d3"><a href="#183603" label="[18:36:03]">&lt;stikonas&gt;</a></span><span class="message">I think that might break things</span></div><div class="line" id="183618"><span class="nick" style="color:#2e2a4a"><a href="#183618" label="[18:36:18]">&lt;doras&gt;</a></span><span class="message">It skips only if it's a character device.</span></div><div class="line" id="183619"><span class="nick" style="color:#80b1d3"><a href="#183619" label="[18:36:19]">&lt;stikonas&gt;</a></span><span class="message">oh, maybe test -c is good enough</span></div><div class="line" id="183621"><span class="nick" style="color:#80b1d3"><a href="#183621" label="[18:36:21]">&lt;stikonas&gt;</a></span><span class="message">yeah...</span></div><div class="line" id="183629"><span class="nick" style="color:#80b1d3"><a href="#183629" label="[18:36:29]">&lt;stikonas&gt;</a></span><span class="message">there is some bug (in bash?)</span></div><div class="line" id="183638"><span class="nick" style="color:#80b1d3"><a href="#183638" label="[18:36:38]">&lt;stikonas&gt;</a></span><span class="message">so that after musl's configure script runs</span></div><div class="line" id="183647"><span class="nick" style="color:#80b1d3"><a href="#183647" label="[18:36:47]">&lt;stikonas&gt;</a></span><span class="message">then /dev/null is replaced with normal file</span></div><div class="line" id="183705"><span class="nick" style="color:#80b1d3"><a href="#183705" label="[18:37:05]">&lt;stikonas&gt;</a></span><span class="message">but I guess test -c wouldn't be happy with it</span></div><div class="line" id="183802"><span class="nick" style="color:#2e2a4a"><a href="#183802" label="[18:38:02]">&lt;doras&gt;</a></span><span class="message">I thought it was because we created tarball packages before we mounted /dev/null, and fossy added some redirects some output to /dev/null at this stage, which doesn't exist.</span></div><div class="line" id="183813"><span class="nick" style="color:#2e2a4a"><a href="#183813" label="[18:38:13]">&lt;doras&gt;</a></span><span class="message">At least this is what &quot;git blame&quot; suggested.</span></div><div class="line" id="183851"><span class="nick" style="color:#80b1d3"><a href="#183851" label="[18:38:51]">&lt;stikonas&gt;</a></span><span class="message">no, this was before packages</span></div><div class="line" id="183904"><span class="nick" style="color:#80b1d3"><a href="#183904" label="[18:39:04]">&lt;stikonas&gt;</a></span><span class="message">fossy might have adjusted something</span></div><div class="line" id="183919"><span class="nick" style="color:#80b1d3"><a href="#183919" label="[18:39:19]">&lt;stikonas&gt;</a></span><span class="message">but I remember that musl's configure was breaking /dev/null since I first added it</span></div><div class="line" id="184003"><span class="nick" style="color:#2e2a4a"><a href="#184003" label="[18:40:03]">&lt;doras&gt;</a></span><span class="message">Hmmm...</span></div><div class="line" id="184014"><span class="nick" style="color:#2e2a4a"><a href="#184014" label="[18:40:14]">&lt;doras&gt;</a></span><span class="message">I'm referring to at this commit: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/commit/968d2ea7d1b9361e43366ac49b7ac4614560a27d">https://github.com/fosslinux/live-bootstrap/commit/968d2ea7d1b9361e43366ac49b7ac4614560a27d</a> </span></div><div class="line" id="184047"><span class="nick" style="color:#2e2a4a"><a href="#184047" label="[18:40:47]">&lt;doras&gt;</a></span><span class="message">I haven't seen /dev/null being removed anywhere else, but I also haven't looked hard.</span></div><div class="line" id="184102"><span class="nick" style="color:#2e2a4a"><a href="#184102" label="[18:41:02]">&lt;doras&gt;</a></span><span class="message">And this commit definitely added that line.</span></div><div class="line" id="184433"><span class="nick" style="color:#80b1d3"><a href="#184433" label="[18:44:33]">&lt;stikonas&gt;</a></span><span class="message">it might we had non-fuctional broken /dev/null</span></div><div class="line" id="184455"><span class="nick" style="color:#80b1d3"><a href="#184455" label="[18:44:55]">&lt;stikonas&gt;</a></span><span class="message">well, normal file that was swallowing redirects instead of char device</span></div><div class="line" id="184511"><span class="nick" style="color:#80b1d3"><a href="#184511" label="[18:45:11]">&lt;stikonas&gt;</a></span><span class="message">but the problem was before that</span></div><div class="line" id="184858"><span class="nick" style="color:#2e2a4a"><a href="#184858" label="[18:48:58]">&lt;doras&gt;</a></span><span class="message">I see.</span></div><div class="line" id="185038"><span class="nick" style="color:#2e2a4a"><a href="#185038" label="[18:50:38]">&lt;doras&gt;</a></span><span class="message">My 3 open MRs are now fully tested and ready from my POV.</span></div><div class="line" id="185106"><span class="nick" style="color:#2e2a4a"><a href="#185106" label="[18:51:06]">&lt;doras&gt;</a></span><span class="message">After those I'll still need the mes update though.</span></div><div class="line" id="190700"><span class="nick" style="color:#80b1d3"><a href="#190700" label="[19:07:00]">&lt;stikonas&gt;</a></span><span class="message">yeah, I remember about mes too</span></div><div class="line" id="190753"><span class="nick" style="color:#80b1d3"><a href="#190753" label="[19:07:53]">&lt;stikonas&gt;</a></span><span class="message">mes updates are slightly annoying though, as all early checksums change and have to be recalculated one by one (--update-checksums doesn't work on them)</span></div><div class="line" id="191028"><span class="nick" style="color:#2e2a4a"><a href="#191028" label="[19:10:28]">&lt;doras&gt;</a></span><span class="message">Oh. I wasn't aware it doesn't work with them.</span></div><div class="line" id="191105"><span class="nick" style="color:#2e2a4a"><a href="#191105" label="[19:11:05]">&lt;doras&gt;</a></span><span class="message">stikonas: that &quot;# Manually install bzip2 (cannot replace binary while running)&quot; comment still doesn't make sense to me.</span></div><div class="line" id="191311"><span class="nick" style="color:#2e2a4a"><a href="#191311" label="[19:13:11]">&lt;doras&gt;</a></span><span class="message">fossy as well.</span></div><div class="line" id="191315"><span class="nick" style="color:#2e2a4a"><a href="#191315" label="[19:13:15]">&lt;doras&gt;</a></span><span class="message">It was added here: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/commit/f1600467a7455a306b37bd5d67990d2e368d6eb8#diff-a0a2a53267a9978c5b5d7f947b814e76695989b2d9dcc6fea6586a03f56c20b1R16">https://github.com/fosslinux/live-bootstrap/commit/f1600467a7455a306b37bd5d67990d2e368d6eb8#diff-a0a2a53267a9978c5b5d7f947b814e76695989b2d9dcc6fea6586a03f56c20b1R16</a> </span></div><div class="line" id="191524"><span class="nick" style="color:#2e2a4a"><a href="#191524" label="[19:15:24]">&lt;doras&gt;</a></span><span class="message">It's also not clear which binary it is which is running that cannot be replaced. The only binary running at that point should be bash (and &quot;install&quot; itself).</span></div><div class="line" id="191831"><span class="nick" style="color:#2e2a4a"><a href="#191831" label="[19:18:31]">&lt;doras&gt;</a></span><span class="message">But regardless, &quot;install&quot; should be perfectly capable of replacing a running binary without any issues.</span></div><div class="line" id="191929"><span class="nick" style="color:#2e2a4a"><a href="#191929" label="[19:19:29]">&lt;doras&gt;</a></span><span class="message">I assume we already do this with bash itself during the bootstrap, too.</span></div><div class="line" id="192813"><span class="nick" style="color:#8dd3c7"><a href="#192813" label="[19:28:13]">&lt;Hagfish&gt;</a></span><span class="message">yeah, that does seem strange</span></div><div class="line" id="192900"><span class="nick" style="color:#8dd3c7"><a href="#192900" label="[19:29:00]">&lt;Hagfish&gt;</a></span><span class="message">it's nice when you find that someone has commented their thinking, but sometimes a comment opens more questions than it answers :)</span></div><div class="line" id="202330"><span class="nick" style="color:#80b1d3"><a href="#202330" label="[20:23:30]">&lt;stikonas&gt;</a></span><span class="message">doras: bzip2 does not like to be replaced</span></div><div class="line" id="202336"><span class="nick" style="color:#80b1d3"><a href="#202336" label="[20:23:36]">&lt;stikonas&gt;</a></span><span class="message">it's not install that does that</span></div><div class="line" id="202356"><span class="nick" style="color:#80b1d3"><a href="#202356" label="[20:23:56]">&lt;stikonas&gt;</a></span><span class="message">it's bzip2 unpacking .tar.bz2 package that contains bzip2</span></div><div class="line" id="203449"><span class="nick" style="color:#2e2a4a"><a href="#203449" label="[20:34:49]">&lt;doras&gt;</a></span><span class="message">Perhaps it's worth mentioning the unpacking part in the comment.</span></div><div class="line" id="203528"><span class="nick" style="color:#2e2a4a"><a href="#203528" label="[20:35:28]">&lt;doras&gt;</a></span><span class="message">But more so to backport whichever fix needs to be backported for this issue. It's quite ridiculous.</span></div><div class="line" id="205654"><span class="nick" style="color:#d9d9d9"><a href="#205654" label="[20:56:54]">&lt;stikonas[m]&gt;</a></span><span class="message">doras: I don't think there is simple fix</span></div><div class="line" id="205700"><span class="nick" style="color:#d9d9d9"><a href="#205700" label="[20:57:00]">&lt;stikonas[m]&gt;</a></span><span class="message">bzip2 version we used is modern</span></div><div class="line" id="205716"><span class="nick" style="color:#d9d9d9"><a href="#205716" label="[20:57:16]">&lt;stikonas[m]&gt;</a></span><span class="message">What I can do is to move bzip2 to other path</span></div><div class="line" id="205730"><span class="nick" style="color:#d9d9d9"><a href="#205730" label="[20:57:30]">&lt;stikonas[m]&gt;</a></span><span class="message">Before unpacking bzip2</span></div><div class="line" id="205806"><span class="nick" style="color:#2e2a4a"><a href="#205806" label="[20:58:06]">&lt;doras&gt;</a></span><span class="message">That would be a more reasonable workaround. Rename it to &quot;bzip2.old&quot; or something.</span></div><div class="line" id="205944"><span class="nick" style="color:#80b1d3"><a href="#205944" label="[20:59:44]">&lt;stikonas&gt;</a></span><span class="message">well, I moved it to /tmp/bzip2</span></div><div class="line" id="210002"><span class="nick" style="color:#80b1d3"><a href="#210002" label="[21:00:02]">&lt;stikonas&gt;</a></span><span class="message">doras: though I think I'm hitting some other bug</span></div><div class="line" id="210022"><span class="nick" style="color:#80b1d3"><a href="#210022" label="[21:00:22]">&lt;stikonas&gt;</a></span><span class="message">bootstrap should have failed due to changed checksum, but it's continuing</span></div><div class="line" id="212145"><span class="nick" style="color:#2e2a4a"><a href="#212145" label="[21:21:45]">&lt;doras&gt;</a></span><span class="message">That's... Odd.</span></div><div class="line" id="212430"><span class="nick" style="color:#2e2a4a"><a href="#212430" label="[21:24:30]">&lt;doras&gt;</a></span><span class="message">stikonas @stikonas:libera.chat, does your bootstrap.cfg in tmp mention UPDATE_CHECKSUMS?</span></div><div class="line" id="212448"><span class="nick" style="color:#2e2a4a"><a href="#212448" label="[21:24:48]">&lt;doras&gt;</a></span><span class="message">Also, have you ran a manual sha256sum to verify that the hash actually changed?</span></div><div class="line" id="212621"><span class="nick" style="color:#80b1d3"><a href="#212621" label="[21:26:21]">&lt;stikonas&gt;</a></span><span class="message">no, it has export UPDATE_CHECKSUMS=False</span></div><div class="line" id="212730"><span class="nick" style="color:#80b1d3"><a href="#212730" label="[21:27:30]">&lt;stikonas&gt;</a></span><span class="message">and hash changed...</span></div><div class="line" id="212739"><span class="nick" style="color:#80b1d3"><a href="#212739" label="[21:27:39]">&lt;stikonas&gt;</a></span><span class="message">well, it was empty package, not it's not empty</span></div><div class="line" id="212800"><span class="nick" style="color:#80b1d3"><a href="#212800" label="[21:28:00]">&lt;stikonas&gt;</a></span><span class="message">I'll do one more run with log</span></div><div class="line" id="214421"><span class="nick" style="color:#2e2a4a"><a href="#214421" label="[21:44:21]">&lt;doras&gt;</a></span><span class="message">I'm suggesting that maybe it's still empty for some other reason.</span></div><div class="line" id="214447"><span class="nick" style="color:#2e2a4a"><a href="#214447" label="[21:44:47]">&lt;doras&gt;</a></span><span class="message">So worth checking.</span></div><div class="line" id="225440"><span class="nick" style="color:#8dd3c7"><a href="#225440" label="[22:54:40]">&lt;oriansj&gt;</a></span><span class="message">well this is certainly going to need some cleanup after the fact</span></div><div class="line" id="225653"><span class="nick" style="color:#8dd3c7"><a href="#225653" label="[22:56:53]">&lt;oriansj&gt;</a></span><span class="message">and I am uncertain how much of a gain the extra flexibility is.</span></div><div class="line" id="230019"><span class="nick" style="color:#8dd3c7"><a href="#230019" label="[23:00:19]">&lt;oriansj&gt;</a></span><span class="message">16TB should be enough space to bootstrap Linux</span></div><div class="line" id="231516"><span class="nick" style="color:#8dd3c7"><a href="#231516" label="[23:15:16]">&lt;Hagfish&gt;</a></span><span class="message">i'm trying to think of what would have to go wrong for that to take more than 16 TB</span></div><div class="line" id="231614"><span class="nick" style="color:#8dd3c7"><a href="#231614" label="[23:16:14]">&lt;oriansj&gt;</a></span><span class="message">Hagfish: clearly god forsaking us all</span></div><div class="line" id="231636"><span class="nick" style="color:#8dd3c7"><a href="#231636" label="[23:16:36]">&lt;Hagfish&gt;</a></span><span class="message">maybe logging every processor instruction in ASCII?</span></div><div class="line" id="231825"><span class="nick" style="color:#8dd3c7"><a href="#231825" label="[23:18:25]">&lt;oriansj&gt;</a></span><span class="message">block sizes of 512+4096bytes should be enough</span></div><div class="line" id="232104"><span class="nick" style="color:#8dd3c7"><a href="#232104" label="[23:21:04]">&lt;oriansj&gt;</a></span><span class="message">block pointer sizes of 16+32bits would enable a low end of 32MB disk support (for 512byte block size and 16bit pointers) and a high end of 16TB disk support (for 4096byte block size and 32bit pointers)</span></div><div class="line" id="232212"><span class="nick" style="color:#8dd3c7"><a href="#232212" label="[23:22:12]">&lt;Hagfish&gt;</a></span><span class="message">that's a nice balance</span></div><div class="line" id="232310"><span class="nick" style="color:#80b1d3"><a href="#232310" label="[23:23:10]">&lt;stikonas&gt;</a></span><span class="message">doras: so it is not just bzip2 package</span></div><div class="line" id="232330"><span class="nick" style="color:#80b1d3"><a href="#232330" label="[23:23:30]">&lt;stikonas&gt;</a></span><span class="message">all packages up to gawk fail</span></div><div class="line" id="232354"><span class="nick" style="color:#80b1d3"><a href="#232354" label="[23:23:54]">&lt;stikonas&gt;</a></span><span class="message">which I think means we have a bug in mescc-tools-extra/sha256sum</span></div><div class="line" id="232502"><span class="nick" style="color:#2e2a4a"><a href="#232502" label="[23:25:02]">&lt;doras&gt;</a></span><span class="message">:(</span></div><div class="line" id="232533"><span class="nick" style="color:#80b1d3"><a href="#232533" label="[23:25:33]">&lt;stikonas&gt;</a></span><span class="message">oh, maybe that sha256sum does not accept piped input</span></div><div class="line" id="232641"><span class="nick" style="color:#80b1d3"><a href="#232641" label="[23:26:41]">&lt;stikonas&gt;</a></span><span class="message">yes, that's the problem</span></div><div class="line" id="232820"><span class="nick" style="color:#80b1d3"><a href="#232820" label="[23:28:20]">&lt;stikonas&gt;</a></span><span class="message">doras: I created a bug <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/issues/166">https://github.com/fosslinux/live-bootstrap/issues/166</a> </span></div><div class="line" id="232851"><span class="nick" style="color:#80b1d3"><a href="#232851" label="[23:28:51]">&lt;stikonas&gt;</a></span><span class="message">I guess the fix is to create a temp file...</span></div><div class="line" id="235835"><span class="nick" style="color:#80b1d3"><a href="#235835" label="[23:58:35]">&lt;stikonas&gt;</a></span><span class="message">ok, I have a fix now for both issues. Just need to test it, get new checksums, etc...</span></div><br /></div></body></html>