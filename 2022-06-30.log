<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-06-30.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000540"><span class="nick" style="color:#8dd3c7"><a href="#000540" label="[00:05:40]">&lt;checkup&gt;</a></span><span class="message">amazon.com/Raspberry-CrowPi2-Laptop-Programming-Professional/dp/B08YRGZ2JD/ref=sr_1_4?crid=2MG5FS04CINI0&amp;keywords=elecrow%2B2%2Blaptop&amp;qid=1656540264&amp;s=electronics&amp;sprefix=elecrow%2B2%2Blaptop%2Celectronics%2C104&amp;sr=1-4&amp;th=1</span></div><div class="line" id="000543"><span class="nick" style="color:#2e2a4a"><a href="#000543" label="[00:05:43]">&lt;oriansj&gt;</a></span><span class="message">checkup: knight architecture is just a mini-computer architecture that failed in the market without much success</span></div><div class="line" id="000604"><span class="nick" style="color:#8dd3c7"><a href="#000604" label="[00:06:04]">&lt;checkup&gt;</a></span><span class="message">its really nice. what  liscence does it use?</span></div><div class="line" id="000716"><span class="nick" style="color:#8dd3c7"><a href="#000716" label="[00:07:16]">&lt;checkup&gt;</a></span><span class="message">i wonder how you got ahold of it</span></div><div class="line" id="000835"><span class="nick" style="color:#2e2a4a"><a href="#000835" label="[00:08:35]">&lt;oriansj&gt;</a></span><span class="message">saw its instruction listing in a ad in a magazine and decided to write an emulator</span></div><div class="line" id="000901"><span class="nick" style="color:#8dd3c7"><a href="#000901" label="[00:09:01]">&lt;checkup&gt;</a></span><span class="message">thats insane, how long did it take you ?</span></div><div class="line" id="000910"><span class="nick" style="color:#2e2a4a"><a href="#000910" label="[00:09:10]">&lt;oriansj&gt;</a></span><span class="message">an afternoon</span></div><div class="line" id="000931"><span class="nick" style="color:#8dd3c7"><a href="#000931" label="[00:09:31]">&lt;checkup&gt;</a></span><span class="message">you have  alot of experience with assembly or emulators ? that seems unbeleivable</span></div><div class="line" id="001026"><span class="nick" style="color:#2e2a4a"><a href="#001026" label="[00:10:26]">&lt;oriansj&gt;</a></span><span class="message">wait until you look at the git history and discover I wrote cc_x86 from scratch in less than 24 hours</span></div><div class="line" id="001031"><span class="nick" style="color:#8dd3c7"><a href="#001031" label="[00:10:31]">&lt;checkup&gt;</a></span><span class="message">seems like you could easily impliment in fpga as well...</span></div><div class="line" id="001104"><span class="nick" style="color:#8dd3c7"><a href="#001104" label="[00:11:04]">&lt;checkup&gt;</a></span><span class="message">well i guess thats encouraging to someone looking to get a bootstrap going</span></div><div class="line" id="001108"><span class="nick" style="color:#6b8072"><a href="#001108" label="[00:11:08]">&lt;Gooberpatrol66&gt;</a></span><span class="message">checkup: mnt-reform is making an fpga powered laptop</span></div><div class="line" id="001153"><span class="nick" style="color:#8dd3c7"><a href="#001153" label="[00:11:53]">&lt;checkup&gt;</a></span><span class="message">who wouldn't</span></div><div class="line" id="001312"><span class="nick" style="color:#8dd3c7"><a href="#001312" label="[00:13:12]">&lt;checkup&gt;</a></span><span class="message">still gonna want the same software capabilities of</span></div><div class="line" id="001314"><span class="nick" style="color:#8dd3c7"><a href="#001314" label="[00:13:14]">&lt;checkup&gt;</a></span><span class="message">*ofc</span></div><div class="line" id="001335"><span class="nick" style="color:#2e2a4a"><a href="#001335" label="[00:13:35]">&lt;oriansj&gt;</a></span><span class="message">well if you want to make knight more general purpose, we take improvements as git pulls <a rel="nofollow" href="https://github.com/oriansj/stage0/blob/master/Knight%20Reference/Proposal%20for%20change.org">https://github.com/oriansj/stage0/blob/master/Knight%20Reference/Proposal%20for%20change.org</a> </span></div><div class="line" id="001355"><span class="nick" style="color:#8dd3c7"><a href="#001355" label="[00:13:55]">&lt;checkup&gt;</a></span><span class="message">looks nice tho</span></div><div class="line" id="001438"><span class="nick" style="color:#8dd3c7"><a href="#001438" label="[00:14:38]">&lt;checkup&gt;</a></span><span class="message">seems like a lot to think about , but i appreciate your invitation to do so.</span></div><div class="line" id="001525"><span class="nick" style="color:#8dd3c7"><a href="#001525" label="[00:15:25]">&lt;checkup&gt;</a></span><span class="message">how long do you think it would take you or someone else to go from knight vm to gcc ?</span></div><div class="line" id="001557"><span class="nick" style="color:#8dd3c7"><a href="#001557" label="[00:15:57]">&lt;checkup&gt;</a></span><span class="message">maybe ill just try to write my own vm bootstrap / cx86 compiler if you say its so easy.</span></div><div class="line" id="001607"><span class="nick" style="color:#2e2a4a"><a href="#001607" label="[00:16:07]">&lt;oriansj&gt;</a></span><span class="message">checkup: well depends on what exactly you mean by that</span></div><div class="line" id="001614"><span class="nick" style="color:#8dd3c7"><a href="#001614" label="[00:16:14]">&lt;checkup&gt;</a></span><span class="message">im not trying to mess up your flow</span></div><div class="line" id="001643"><span class="nick" style="color:#2e2a4a"><a href="#001643" label="[00:16:43]">&lt;oriansj&gt;</a></span><span class="message">checkup: messing up our flow is how we make major progress</span></div><div class="line" id="001645"><span class="nick" style="color:#8dd3c7"><a href="#001645" label="[00:16:45]">&lt;checkup&gt;</a></span><span class="message">you said you wrote the vm and cx86 so fast. i just wonder why you havne't done fpga or pushed vm to gcc</span></div><div class="line" id="001721"><span class="nick" style="color:#2e2a4a"><a href="#001721" label="[00:17:21]">&lt;oriansj&gt;</a></span><span class="message">checkup: because other problems took priority</span></div><div class="line" id="001730"><span class="nick" style="color:#8dd3c7"><a href="#001730" label="[00:17:30]">&lt;checkup&gt;</a></span><span class="message">understandable</span></div><div class="line" id="001740"><span class="nick" style="color:#8dd3c7"><a href="#001740" label="[00:17:40]">&lt;checkup&gt;</a></span><span class="message">gcc based problems?</span></div><div class="line" id="001832"><span class="nick" style="color:#8dd3c7"><a href="#001832" label="[00:18:32]">&lt;checkup&gt;</a></span><span class="message">well if you have any tips on bootstrapping in general i guess ill take em i really dont know where to restart with all this new information</span></div><div class="line" id="002217"><span class="nick" style="color:#8dd3c7"><a href="#002217" label="[00:22:17]">&lt;checkup&gt;</a></span><span class="message">anyways its very inspiring and cool that you do this oriansj i dont wanna try to weigh in im pretty ignorant of this stuff but maybe when i become more savvy i would have more to add</span></div><div class="line" id="002258"><span class="nick" style="color:#2e2a4a"><a href="#002258" label="[00:22:58]">&lt;oriansj&gt;</a></span><span class="message">checkup: well the key is to fail alot</span></div><div class="line" id="002318"><span class="nick" style="color:#2e2a4a"><a href="#002318" label="[00:23:18]">&lt;oriansj&gt;</a></span><span class="message">I wasted a bunch of time trying to do a FORTH and a garbaged collected lisp in assembly</span></div><div class="line" id="002331"><span class="nick" style="color:#8dd3c7"><a href="#002331" label="[00:23:31]">&lt;checkup&gt;</a></span><span class="message">why do you consider it a waste ?</span></div><div class="line" id="002344"><span class="nick" style="color:#8dd3c7"><a href="#002344" label="[00:23:44]">&lt;checkup&gt;</a></span><span class="message">i mean thats really hard to say when doing computer science</span></div><div class="line" id="002430"><span class="nick" style="color:#8dd3c7"><a href="#002430" label="[00:24:30]">&lt;checkup&gt;</a></span><span class="message">you mean before bootstrapping?</span></div><div class="line" id="002500"><span class="nick" style="color:#2e2a4a"><a href="#002500" label="[00:25:00]">&lt;oriansj&gt;</a></span><span class="message">checkup: while trying to create the first bootstrapping path from hex0 to Mes.c</span></div><div class="line" id="002602"><span class="nick" style="color:#8dd3c7"><a href="#002602" label="[00:26:02]">&lt;checkup&gt;</a></span><span class="message">i still wonder how much experience you had with assembly and compilers prior to doing bootstrap/vm</span></div><div class="line" id="002603"><span class="nick" style="color:#2e2a4a"><a href="#002603" label="[00:26:03]">&lt;oriansj&gt;</a></span><span class="message">I did a bunch of things that failed or ultimately not fit for purpose but we learned from them</span></div><div class="line" id="002634"><span class="nick" style="color:#8dd3c7"><a href="#002634" label="[00:26:34]">&lt;checkup&gt;</a></span><span class="message">yea i feel the same way cept i come from coding stuff in swift and angular so i really feel burnt off that</span></div><div class="line" id="002654"><span class="nick" style="color:#8dd3c7"><a href="#002654" label="[00:26:54]">&lt;checkup&gt;</a></span><span class="message">but i literally didn't know anything about coding before then so i cant be too hard on myself</span></div><div class="line" id="002703"><span class="nick" style="color:#2e2a4a"><a href="#002703" label="[00:27:03]">&lt;oriansj&gt;</a></span><span class="message">less than you would think as I am a computer security and reliability engineer</span></div><div class="line" id="002724"><span class="nick" style="color:#8dd3c7"><a href="#002724" label="[00:27:24]">&lt;checkup&gt;</a></span><span class="message">just wish i had more guidance. yea im studying security now</span></div><div class="line" id="002732"><span class="nick" style="color:#8dd3c7"><a href="#002732" label="[00:27:32]">&lt;checkup&gt;</a></span><span class="message">just passed my &quot;SSCP&quot; exam</span></div><div class="line" id="002755"><span class="nick" style="color:#2e2a4a"><a href="#002755" label="[00:27:55]">&lt;oriansj&gt;</a></span><span class="message">checkup: well what sort of guidance are you looking for?</span></div><div class="line" id="002757"><span class="nick" style="color:#8dd3c7"><a href="#002757" label="[00:27:57]">&lt;checkup&gt;</a></span><span class="message">would be nice to build that iron man suit in ur avatar</span></div><div class="line" id="002810"><span class="nick" style="color:#8dd3c7"><a href="#002810" label="[00:28:10]">&lt;checkup&gt;</a></span><span class="message">^ gotta start with a trusted system imo tho</span></div><div class="line" id="002832"><span class="nick" style="color:#8dd3c7"><a href="#002832" label="[00:28:32]">&lt;checkup&gt;</a></span><span class="message">id love to beable to code a vm / cx86 compiler this after noon lol</span></div><div class="line" id="002849"><span class="nick" style="color:#8dd3c7"><a href="#002849" label="[00:28:49]">&lt;checkup&gt;</a></span><span class="message">then i would feel way more comfortable trying 2 port it 2 fpga / build into clang etc</span></div><div class="line" id="002857"><span class="nick" style="color:#8dd3c7"><a href="#002857" label="[00:28:57]">&lt;checkup&gt;</a></span><span class="message">if its so simple like you said</span></div><div class="line" id="002912"><span class="nick" style="color:#8dd3c7"><a href="#002912" label="[00:29:12]">&lt;checkup&gt;</a></span><span class="message">ill probalby look into it</span></div><div class="line" id="002922"><span class="nick" style="color:#8dd3c7"><a href="#002922" label="[00:29:22]">&lt;checkup&gt;</a></span><span class="message">so if u had any tips it would be really helpful</span></div><div class="line" id="003036"><span class="nick" style="color:#8dd3c7"><a href="#003036" label="[00:30:36]">&lt;checkup&gt;</a></span><span class="message">but i guess just the fact that u said that may get me going for now</span></div><div class="line" id="003103"><span class="nick" style="color:#2e2a4a"><a href="#003103" label="[00:31:03]">&lt;oriansj&gt;</a></span><span class="message">well if you wished to become familiar with cc_x86; the easiest path would be choose a language you like to work in</span></div><div class="line" id="003133"><span class="nick" style="color:#8dd3c7"><a href="#003133" label="[00:31:33]">&lt;checkup&gt;</a></span><span class="message">i think verilog would be best ultimately but im probably gonna want an eemulator in c</span></div><div class="line" id="003140"><span class="nick" style="color:#8dd3c7"><a href="#003140" label="[00:31:40]">&lt;checkup&gt;</a></span><span class="message">so i was gonna use</span></div><div class="line" id="003155"><span class="nick" style="color:#8dd3c7"><a href="#003155" label="[00:31:55]">&lt;checkup&gt;</a></span><span class="message">&quot;NVC&quot; on freebsd</span></div><div class="line" id="003208"><span class="nick" style="color:#8dd3c7"><a href="#003208" label="[00:32:08]">&lt;checkup&gt;</a></span><span class="message">and try to work backwards into a portable compiler from a bootstrap</span></div><div class="line" id="003219"><span class="nick" style="color:#8dd3c7"><a href="#003219" label="[00:32:19]">&lt;checkup&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/nickg/nvc">https://github.com/nickg/nvc</a> </span></div><div class="line" id="003236"><span class="nick" style="color:#2e2a4a"><a href="#003236" label="[00:32:36]">&lt;oriansj&gt;</a></span><span class="message">checkup: well Operating systems work by removing compatibility</span></div><div class="line" id="003249"><span class="nick" style="color:#8dd3c7"><a href="#003249" label="[00:32:49]">&lt;checkup&gt;</a></span><span class="message">how do you figure?</span></div><div class="line" id="003254"><span class="nick" style="color:#8dd3c7"><a href="#003254" label="[00:32:54]">&lt;checkup&gt;</a></span><span class="message">you mean commercially ?</span></div><div class="line" id="003302"><span class="nick" style="color:#2e2a4a"><a href="#003302" label="[00:33:02]">&lt;oriansj&gt;</a></span><span class="message">in literal terms</span></div><div class="line" id="003321"><span class="nick" style="color:#2e2a4a"><a href="#003321" label="[00:33:21]">&lt;oriansj&gt;</a></span><span class="message">imagine you have two identical computers (in terms of hardware)</span></div><div class="line" id="003331"><span class="nick" style="color:#8dd3c7"><a href="#003331" label="[00:33:31]">&lt;checkup&gt;</a></span><span class="message">not really many options for 'os's i really like freebsd it has a nice liscence and linux is too bloated for me</span></div><div class="line" id="003339"><span class="nick" style="color:#2e2a4a"><a href="#003339" label="[00:33:39]">&lt;oriansj&gt;</a></span><span class="message">one has Linux installed and the other has Windows installed.</span></div><div class="line" id="003416"><span class="nick" style="color:#8dd3c7"><a href="#003416" label="[00:34:16]">&lt;checkup&gt;</a></span><span class="message">i cant use windows. it literally crashed and uninstalled itself from my microsoft laptop after i tried 2 make a virtual bridged network for qemu</span></div><div class="line" id="003434"><span class="nick" style="color:#8dd3c7"><a href="#003434" label="[00:34:34]">&lt;checkup&gt;</a></span><span class="message">so i just wanna get bsd on there and put a gui on it that isn't &quot;x11&quot;</span></div><div class="line" id="003444"><span class="nick" style="color:#8dd3c7"><a href="#003444" label="[00:34:44]">&lt;checkup&gt;</a></span><span class="message">ill probably code the gui from my hand / github scraps</span></div><div class="line" id="003446"><span class="nick" style="color:#2e2a4a"><a href="#003446" label="[00:34:46]">&lt;oriansj&gt;</a></span><span class="message">So in terms of hardware functionality, there is no reason why a set of assembly instructions shouldn't work the exact same on both but the Operating systems introduce that incompatibility by requiring custom syscalls to do anything interesting</span></div><div class="line" id="003519"><span class="nick" style="color:#8dd3c7"><a href="#003519" label="[00:35:19]">&lt;checkup&gt;</a></span><span class="message">the only abstraction im interested in</span></div><div class="line" id="003536"><span class="nick" style="color:#8dd3c7"><a href="#003536" label="[00:35:36]">&lt;checkup&gt;</a></span><span class="message">is the abstraction that would make the assembly or abstract code portable 2 arm risc64</span></div><div class="line" id="003538"><span class="nick" style="color:#8dd3c7"><a href="#003538" label="[00:35:38]">&lt;checkup&gt;</a></span><span class="message">from x86</span></div><div class="line" id="003550"><span class="nick" style="color:#8dd3c7"><a href="#003550" label="[00:35:50]">&lt;checkup&gt;</a></span><span class="message">i think all the other stuff is more 2 lock u into their product</span></div><div class="line" id="003601"><span class="nick" style="color:#2e2a4a"><a href="#003601" label="[00:36:01]">&lt;oriansj&gt;</a></span><span class="message">and one which has some of the most arbitrary rules (like stack has to be multiples of 16bytes in depth)</span></div><div class="line" id="003602"><span class="nick" style="color:#8dd3c7"><a href="#003602" label="[00:36:02]">&lt;checkup&gt;</a></span><span class="message">hence the term &quot;bsd jails&quot;</span></div><div class="line" id="003626"><span class="nick" style="color:#2e2a4a"><a href="#003626" label="[00:36:26]">&lt;oriansj&gt;</a></span><span class="message">checkup: sounds like you would love something like code-morphing</span></div><div class="line" id="003734"><span class="nick" style="color:#8dd3c7"><a href="#003734" label="[00:37:34]">&lt;checkup&gt;</a></span><span class="message"> <a rel="nofollow" href="http://blog.notdot.net/2012/10/Build-your-own-FPGA">http://blog.notdot.net/2012/10/Build-your-own-FPGA</a> </span></div><div class="line" id="003738"><span class="nick" style="color:#8dd3c7"><a href="#003738" label="[00:37:38]">&lt;checkup&gt;</a></span><span class="message">this is what im really interested in</span></div><div class="line" id="003744"><span class="nick" style="color:#8dd3c7"><a href="#003744" label="[00:37:44]">&lt;checkup&gt;</a></span><span class="message">if were talking about &quot;root of trust&quot;</span></div><div class="line" id="003817"><span class="nick" style="color:#8dd3c7"><a href="#003817" label="[00:38:17]">&lt;checkup&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/arachnid/dfpga">https://github.com/arachnid/dfpga</a>  unfortunately this is in python but</span></div><div class="line" id="003821"><span class="nick" style="color:#8dd3c7"><a href="#003821" label="[00:38:21]">&lt;checkup&gt;</a></span><span class="message">very inspiring</span></div><div class="line" id="003835"><span class="nick" style="color:#8dd3c7"><a href="#003835" label="[00:38:35]">&lt;checkup&gt;</a></span><span class="message">An implementation of an FPGA slice entirely in 7400 series discrete logic, and a compiler for a custom HDL dialect for same.</span></div><div class="line" id="003855"><span class="nick" style="color:#8dd3c7"><a href="#003855" label="[00:38:55]">&lt;checkup&gt;</a></span><span class="message">that can easily be implimented on hardware or a logic emulator or verilog</span></div><div class="line" id="003919"><span class="nick" style="color:#8dd3c7"><a href="#003919" label="[00:39:19]">&lt;checkup&gt;</a></span><span class="message">i just want to know my stuff is gonna run on a cheap laptop or phone or something</span></div><div class="line" id="003927"><span class="nick" style="color:#8dd3c7"><a href="#003927" label="[00:39:27]">&lt;checkup&gt;</a></span><span class="message">before i go deving a bunch of stuff on top of it</span></div><div class="line" id="004008"><span class="nick" style="color:#8dd3c7"><a href="#004008" label="[00:40:08]">&lt;checkup&gt;</a></span><span class="message">anyways now im just talking in circles</span></div><div class="line" id="004018"><span class="nick" style="color:#8dd3c7"><a href="#004018" label="[00:40:18]">&lt;checkup&gt;</a></span><span class="message">and not building anything</span></div><div class="line" id="004037"><span class="nick" style="color:#8dd3c7"><a href="#004037" label="[00:40:37]">&lt;checkup&gt;</a></span><span class="message">so i guess i will just bounce try to sort out some code thanks for your words of wisdom</span></div><div class="line" id="004839"><span class="nick" style="color:#2e2a4a"><a href="#004839" label="[00:48:39]">&lt;oriansj&gt;</a></span><span class="message">checkup: the best advice we have is do what seems like the most &quot;fun&quot; for you.</span></div><div class="line" id="005109"><span class="nick" style="color:#2e2a4a"><a href="#005109" label="[00:51:09]">&lt;oriansj&gt;</a></span><span class="message">bootstrapping tends to be a long and slow process to get to impressive points but a great many still remain to be done by those willing to do the work.</span></div><div class="line" id="125424"><span class="nick">***</span><span class="message notice">attila_lendvai_ is now known as attila_lendvai</span></div><div class="line" id="160849"><span class="nick">***</span><span class="message notice">genr8eofl__ is now known as genr8eofl</span></div><div class="line" id="200216"><span class="nick" style="color:#80b1d3"><a href="#200216" label="[20:02:16]">&lt;tinybronca[m]&gt;</a></span><span class="message">Hi all, can you currently go directly from GCC 4.7.x written in only C directly to GCC 12.1?</span></div><div class="line" id="200357"><span class="nick" style="color:#6d2462"><a href="#200357" label="[20:03:57]">&lt;stikonas[m]&gt;</a></span><span class="message">tinybronca: no</span></div><div class="line" id="200433"><span class="nick" style="color:#6d2462"><a href="#200433" label="[20:04:33]">&lt;stikonas[m]&gt;</a></span><span class="message">GCC 12 needs a fairly new C++ standard</span></div><div class="line" id="200506"><span class="nick" style="color:#6d2462"><a href="#200506" label="[20:05:06]">&lt;stikonas[m]&gt;</a></span><span class="message">You need one intermediate version</span></div><div class="line" id="210642"><span class="nick" style="color:#234e69"><a href="#210642" label="[21:06:42]">&lt;stikonas&gt;</a></span><span class="message">tinybronca[m]: by the way, why do you build GCC 4.7.x with just C?</span></div><div class="line" id="210656"><span class="nick" style="color:#234e69"><a href="#210656" label="[21:06:56]">&lt;stikonas&gt;</a></span><span class="message">you can build C++ version too</span></div><div class="line" id="212046"><span class="nick" style="color:#234e69"><a href="#212046" label="[21:20:46]">&lt;stikonas&gt;</a></span><span class="message">but anyway, if you have C only GCC 4.7.x, build GCC 4.7.4 (C++ version). Then build something much newer but  not newer than GCC 10</span></div><div class="line" id="212052"><span class="nick" style="color:#234e69"><a href="#212052" label="[21:20:52]">&lt;stikonas&gt;</a></span><span class="message">I think GCC 10 can still build</span></div><div class="line" id="212105"><span class="nick" style="color:#234e69"><a href="#212105" label="[21:21:05]">&lt;stikonas&gt;</a></span><span class="message">GCC 11 probably needs something like GCC 6</span></div><div class="line" id="224626"><span class="nick" style="color:#6c3d55"><a href="#224626" label="[22:46:26]">&lt;mihi&gt;</a></span><span class="message">tinybronca[m], stikonas, according to LFS you need at least GCC 4.8 to build GCC 11. Guix goes 4.6.4, 4.9.4, 11 (probably since build times on gcc4.9.4 are lower than on later versions and you usually build your final compiler twice anyway so that it benefits from its own optimizations)</span></div><div class="line" id="225006"><span class="nick" style="color:#234e69"><a href="#225006" label="[22:50:06]">&lt;stikonas&gt;</a></span><span class="message">yeah, maybe GCC 4.8 is good enough for GCC 11...</span></div><div class="line" id="225010"><span class="nick" style="color:#234e69"><a href="#225010" label="[22:50:10]">&lt;stikonas&gt;</a></span><span class="message">but 4.7.4 is not</span></div><div class="line" id="225044"><span class="nick" style="color:#234e69"><a href="#225044" label="[22:50:44]">&lt;stikonas&gt;</a></span><span class="message">GCC11 needs C++11 capable compiler</span></div><div class="line" id="225052"><span class="nick" style="color:#6c3d55"><a href="#225052" label="[22:50:52]">&lt;mihi&gt;</a></span><span class="message">btw stikonas I would love to know where you work, where you work with fpgas but not code for them :) (feel free to reply off-chatas it is off-topic here). Re FPGA, I've programmed one in a semester project at univesity about 20 years ago, and you don't really code &quot;for FPGA&quot; just like you don't code &quot;for qemu-system-riscv&quot;; you write hardware definitions in VHDL/verilog/etc. and synthesize them to</span></div><div class="line" id="225052"><span class="nick" style="color:#6c3d55"><a href="#225052" label="[22:50:52]">&lt;mihi&gt;</a></span><span class="message">FPGA. But I don't have the equipment any longer, and also the synthesis times (about 45 minutes for a register file with 16 registers 32-bit each that supports two reads and one write per clock cycle) made me avoid investing in hardware for making this my hobby.</span></div><div class="line" id="225058"><span class="nick" style="color:#234e69"><a href="#225058" label="[22:50:58]">&lt;stikonas&gt;</a></span><span class="message">I guess 4.7.4 has some C++11 support but probably not everything</span></div><div class="line" id="225107"><span class="nick" style="color:#6c3d55"><a href="#225107" label="[22:51:07]">&lt;mihi&gt;</a></span><span class="message">On the other hand, I guess live-bootstrap cycles take longer, so don't be deterred by that.</span></div><div class="line" id="225118"><span class="nick" style="color:#234e69"><a href="#225118" label="[22:51:18]">&lt;stikonas&gt;</a></span><span class="message">mihi: Xilinx or I guess these days it's AMD</span></div><div class="line" id="225142"><span class="nick" style="color:#6c3d55"><a href="#225142" label="[22:51:42]">&lt;mihi&gt;</a></span><span class="message">ah ok, your company makes those things :)</span></div><div class="line" id="225230"><span class="nick" style="color:#234e69"><a href="#225230" label="[22:52:30]">&lt;stikonas&gt;</a></span><span class="message">kind of but not my team, I was originally from Solarflare that produced low latency NICs then we got bought by Xilinx and  then AMD</span></div><div class="line" id="225434"><span class="nick" style="color:#6c3d55"><a href="#225434" label="[22:54:34]">&lt;mihi&gt;</a></span><span class="message">yeah, I assume low-latency NICs probably need their own ASICs, and when you build them you need FPGAs for prototyping :)</span></div><div class="line" id="225511"><span class="nick" style="color:#6c3d55"><a href="#225511" label="[22:55:11]">&lt;mihi&gt;</a></span><span class="message">and 45-minutes synthesis are nothing compare to weeks for building an ASIC :D</span></div><div class="line" id="225620"><span class="nick" style="color:#2e2a4a"><a href="#225620" label="[22:56:20]">&lt;oriansj&gt;</a></span><span class="message">mihi: modern processes can easily take 9months of wafer processing steps</span></div><div class="line" id="225649"><span class="nick" style="color:#234e69"><a href="#225649" label="[22:56:49]">&lt;stikonas&gt;</a></span><span class="message">well, I don't know much about ASICs either...</span></div><div class="line" id="225938"><span class="nick" style="color:#6c3d55"><a href="#225938" label="[22:59:38]">&lt;mihi&gt;</a></span><span class="message">checkup: when catching up with logs... If you are interested in bootstrapping on UEFI, the first step would probably be to make M2libc and M2planet target the UEFI shell environment. Which requires three main changes: 1) UEFI does not use syscalls, but your entry point gets a pointer to the UEFI SYSTEM TABLE which is a giant list of function pointers. Instead of using syscall numbers, you call these pointers. 2)</span></div><div class="line" id="225938"><span class="nick" style="color:#6c3d55"><a href="#225938" label="[22:59:38]">&lt;mihi&gt;</a></span><span class="message">The file format is PE/COFF and not ELF, so you need new hex templates for this. 3) There is AFAIK no such thing as a source-level debugger or debug symbols, so blood-elf gets removed from the process, but you also have it harder to debug.</span></div><div class="line" id="230052"><span class="nick" style="color:#234e69"><a href="#230052" label="[23:00:52]">&lt;stikonas&gt;</a></span><span class="message">yeah, UEFI might actually be somewhat easier than BIOS/MBR</span></div><div class="line" id="230056"><span class="nick" style="color:#6c3d55"><a href="#230056" label="[23:00:56]">&lt;mihi&gt;</a></span><span class="message">Next step would be to port hex0 et al to that environment. When you are one of the lucky guys who own a UEFI computer that boots to the shell if no bootable media are detected, you can then use built-in hexedit to write hex0 to some media that contains sources and start bootstrapping from there and then build oriansj's M2-Planet buildable kernel (once it exists) to continue bootstrapping.</span></div><div class="line" id="230058"><span class="nick" style="color:#234e69"><a href="#230058" label="[23:00:58]">&lt;stikonas&gt;</a></span><span class="message">it's already almost mini OS</span></div><div class="line" id="230235"><span class="nick" style="color:#6c3d55"><a href="#230235" label="[23:02:35]">&lt;mihi&gt;</a></span><span class="message">when you can live with the fact that there is no multitasking and only one core is active, it is quite a usable OS. You have support for disks, filesystems, keyboard, mouse, wired network. And if you are lucky, your firmware includes the UEFI shell (if not you can boot it from USB)</span></div><div class="line" id="230321"><span class="nick" style="color:#234e69"><a href="#230321" label="[23:03:21]">&lt;stikonas&gt;</a></span><span class="message">well, we don't need multitasking (unless it's for kaem)</span></div><div class="line" id="230331"><span class="nick" style="color:#234e69"><a href="#230331" label="[23:03:31]">&lt;stikonas&gt;</a></span><span class="message">kaem probably can't easily run</span></div><div class="line" id="230349"><span class="nick" style="color:#234e69"><a href="#230349" label="[23:03:49]">&lt;stikonas&gt;</a></span><span class="message">since it forks</span></div><div class="line" id="230358"><span class="nick" style="color:#234e69"><a href="#230358" label="[23:03:58]">&lt;stikonas&gt;</a></span><span class="message">builder-hex0 has some hack to support that</span></div><div class="line" id="230404"><span class="nick" style="color:#6c3d55"><a href="#230404" label="[23:04:04]">&lt;mihi&gt;</a></span><span class="message">M2libc would have to be changed to provide spawn() as alternative to vfork/exec. And you would need some ifdefs in kaem to use whatever is available.</span></div><div class="line" id="230425"><span class="nick" style="color:#234e69"><a href="#230425" label="[23:04:25]">&lt;stikonas&gt;</a></span><span class="message">yeah, luckily simple ifdefs are allowed in kaem</span></div><div class="line" id="230426"><span class="nick" style="color:#6c3d55"><a href="#230426" label="[23:04:26]">&lt;mihi&gt;</a></span><span class="message">Ok, M2-Mesoplanet would also be needed, but I assume that is just a recompile once M2-Planet and M2libc are there</span></div><div class="line" id="230438"><span class="nick" style="color:#234e69"><a href="#230438" label="[23:04:38]">&lt;stikonas&gt;</a></span><span class="message">no, M2-Planet has some support for ifdefs</span></div><div class="line" id="230455"><span class="nick" style="color:#234e69"><a href="#230455" label="[23:04:55]">&lt;stikonas&gt;</a></span><span class="message">well, ok, we do use Mesoplanet later in stage0-posix</span></div><div class="line" id="230513"><span class="nick" style="color:#234e69"><a href="#230513" label="[23:05:13]">&lt;stikonas&gt;</a></span><span class="message">but it's the same forking code as in kaem</span></div><div class="line" id="230933"><span class="nick" style="color:#6c3d55"><a href="#230933" label="[23:09:33]">&lt;mihi&gt;</a></span><span class="message">and back to FPGA/ASIC. Technically to write HDL you don't have to know how they work on the lower level. If you understand how gates (and or nor xor, etc.), flip-flops and latches are working, and how the latter ones interact with clock and reset signals, you've understood the hardest part. the rest is just syntax and from your contributions to stage0 I know you are good at pickup up such things quickly :D</span></div><div class="line" id="230951"><span class="nick" style="color:#6c3d55"><a href="#230951" label="[23:09:51]">&lt;mihi&gt;</a></span><span class="message">*picking</span></div><div class="line" id="231822"><span class="nick" style="color:#6c3d55"><a href="#231822" label="[23:18:22]">&lt;mihi&gt;</a></span><span class="message">about commercial OSes not having stable syscalls: Yes, seems so. Not only OSX but also Windows regularly shuffles their syscall numbers. That's why every sane Windows binary needs to (directly or indirectly) link against NTDLL.DLL which contains stubs that call the syscalls.</span></div><div class="line" id="231925"><span class="nick" style="color:#6c3d55"><a href="#231925" label="[23:19:25]">&lt;mihi&gt;</a></span><span class="message">And probably it is the only way to enforce syscalls not being part of the documented ABI. If you don't shuffle them, users will call them and you will be doomed to support them forever to not break existing programs where no programmers/source exist any more.</span></div><br /></div></body></html>