<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-09-25.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000011"><span class="nick" style="color:#389600"><a href="#000011" label="[00:00:11]">&lt;stikonas&gt;</a></span><span class="message">not sure what is wrong, but when I try to create debuggable M2, it doesn't work (     1: 0000000000000000 0x6000e80000000f NOTYPE  &lt;unknown&gt;: 8 DEFAULT bad section index[ 32] &lt;corrupt&gt;)</span></div><div class="line" id="001649"><span class="nick" style="color:#8dd3c7"><a href="#001649" label="[00:16:49]">&lt;oriansj&gt;</a></span><span class="message">stikonas: entirely possible given, it only currently produces valid and correct ELF sections for PowerPC, PowerPC64, x86, AMD64, armv7l and AArch64. However figuring out the differences might require a bit of trial and error to figure out.</span></div><div class="line" id="001729"><span class="nick" style="color:#8dd3c7"><a href="#001729" label="[00:17:29]">&lt;oriansj&gt;</a></span><span class="message">unless your forgot the --64 flag for your 64bit binaries</span></div><div class="line" id="001754"><span class="nick" style="color:#8dd3c7"><a href="#001754" label="[00:17:54]">&lt;oriansj&gt;</a></span><span class="message">^your^you^ which seems an easier mistake to make</span></div><div class="line" id="001839"><span class="nick" style="color:#8dd3c7"><a href="#001839" label="[00:18:39]">&lt;oriansj&gt;</a></span><span class="message">theruran: we always try to upstream when we improve a possible bootstrappablity of a program.</span></div><div class="line" id="002110"><span class="nick" style="color:#8dd3c7"><a href="#002110" label="[00:21:10]">&lt;oriansj&gt;</a></span><span class="message">civodul would most likely be able to get you an answer theruran on the current upstreaming of the wonderful psyntax bootstrapping work of Michael Schierl (who sometimes shows up here)</span></div><div class="line" id="003357"><span class="nick" style="color:#389600"><a href="#003357" label="[00:33:57]">&lt;stikonas&gt;</a></span><span class="message">no, I used --64 flag...</span></div><div class="line" id="003516"><span class="nick" style="color:#8dd3c7"><a href="#003516" label="[00:35:16]">&lt;oriansj&gt;</a></span><span class="message">and the hex2 ELF header says 64bit as well for the EI_CLASS</span></div><div class="line" id="003543"><span class="nick" style="color:#8dd3c7"><a href="#003543" label="[00:35:43]">&lt;oriansj&gt;</a></span><span class="message">(it is 1 for 32bit and 2 for 64bit)</span></div><div class="line" id="003546"><span class="nick" style="color:#389600"><a href="#003546" label="[00:35:46]">&lt;stikonas&gt;</a></span><span class="message">yes... I just took non-debug header and added those 4 modifications that deal with sections</span></div><div class="line" id="003656"><span class="nick" style="color:#389600"><a href="#003656" label="[00:36:56]">&lt;stikonas&gt;</a></span><span class="message">I've also found yet another bug in cc_riscv64. Forgot to use LUI for constants... With that fixed M2-Planet still doesn't run successfully... But it goes much further. I think the whole tokenization part might be working now but it's a bit hard to debug without blood-elf</span></div><div class="line" id="003918"><span class="nick" style="color:#8dd3c7"><a href="#003918" label="[00:39:18]">&lt;oriansj&gt;</a></span><span class="message">e_shoff is %ELF_section_headers&gt;ELF_base 00 00 00 00</span></div><div class="line" id="003941"><span class="nick" style="color:#8dd3c7"><a href="#003941" label="[00:39:41]">&lt;oriansj&gt;</a></span><span class="message">e_shentsize is 40 00</span></div><div class="line" id="003959"><span class="nick" style="color:#8dd3c7"><a href="#003959" label="[00:39:59]">&lt;oriansj&gt;</a></span><span class="message">e_shnum is 05 00</span></div><div class="line" id="004015"><span class="nick" style="color:#8dd3c7"><a href="#004015" label="[00:40:15]">&lt;oriansj&gt;</a></span><span class="message">e_shstrndx is 02 00</span></div><div class="line" id="005534"><span class="nick" style="color:#389600"><a href="#005534" label="[00:55:34]">&lt;stikonas&gt;</a></span><span class="message">yes, that's right...</span></div><div class="line" id="013915"><span class="nick" style="color:#8dd3c7"><a href="#013915" label="[01:39:15]">&lt;oriansj&gt;</a></span><span class="message">stikonas: and is readelf -a isn't showing any warning?</span></div><div class="line" id="014926"><span class="nick" style="color:#389600"><a href="#014926" label="[01:49:26]">&lt;stikonas&gt;</a></span><span class="message">it shows, that's where that warning came from</span></div><div class="line" id="014946"><span class="nick" style="color:#389600"><a href="#014946" label="[01:49:46]">&lt;stikonas&gt;</a></span><span class="message">(     1: 0000000000000000 0x6000e80000000f NOTYPE  &lt;unknown&gt;: 8 DEFAULT bad section index[ 32] &lt;corrupt&gt;) and a lot more similar lines</span></div><div class="line" id="015427"><span class="nick" style="color:#389600"><a href="#015427" label="[01:54:27]">&lt;stikonas&gt;</a></span><span class="message">it looks like <a rel="nofollow" href="https://paste.debian.net/1213153/">https://paste.debian.net/1213153/</a> </span></div><div class="line" id="015717"><span class="nick" style="color:#389600"><a href="#015717" label="[01:57:17]">&lt;stikonas&gt;</a></span><span class="message">oriansj: oh, I think I know what's the issue</span></div><div class="line" id="015738"><span class="nick" style="color:#389600"><a href="#015738" label="[01:57:38]">&lt;stikonas&gt;</a></span><span class="message">it's due to redefined risc-v symbols ! @ etc...</span></div><div class="line" id="015852"><span class="nick" style="color:#389600"><a href="#015852" label="[01:58:52]">&lt;stikonas&gt;</a></span><span class="message">M0/M1 are interpreting them in risc-v way...</span></div><div class="line" id="020643"><span class="nick" style="color:#8dd3c7"><a href="#020643" label="[02:06:43]">&lt;oriansj&gt;</a></span><span class="message">yeah that would absolutely do it.</span></div><div class="line" id="020839"><span class="nick" style="color:#8dd3c7"><a href="#020839" label="[02:08:39]">&lt;oriansj&gt;</a></span><span class="message">fortunately it is easy to fix, the problem is that it would result in us being unable to leverage M1 to sort out the endianness of the parts</span></div><div class="line" id="020928"><span class="nick" style="color:#8dd3c7"><a href="#020928" label="[02:09:28]">&lt;oriansj&gt;</a></span><span class="message">So we would require --little-endian and --big-endian flags for blood-elf.</span></div><div class="line" id="021146"><span class="nick" style="color:#6b8072"><a href="#021146" label="[02:11:46]">&lt;stikonas[m]&gt;</a></span><span class="message">Fortunately it's C code</span></div><div class="line" id="021210"><span class="nick" style="color:#8dd3c7"><a href="#021210" label="[02:12:10]">&lt;oriansj&gt;</a></span><span class="message">so it would technically be a breaking change for blood-elf but one which would only require a handful of kaem file fixes in our bootstrap</span></div><div class="line" id="021213"><span class="nick" style="color:#6b8072"><a href="#021213" label="[02:12:13]">&lt;stikonas[m]&gt;</a></span><span class="message">So adding another flag is not too bad</span></div><div class="line" id="021303"><span class="nick" style="color:#8dd3c7"><a href="#021303" label="[02:13:03]">&lt;oriansj&gt;</a></span><span class="message">So I'd be making it a major release for mescc-tools since.</span></div><div class="line" id="021417"><span class="nick" style="color:#8dd3c7"><a href="#021417" label="[02:14:17]">&lt;oriansj&gt;</a></span><span class="message">I never wish to do breaking user interface changes without a matching release with release notes to make it explicitly clear.</span></div><div class="line" id="021518"><span class="nick" style="color:#8dd3c7"><a href="#021518" label="[02:15:18]">&lt;oriansj&gt;</a></span><span class="message">as small as it might be blood-elf -f foo.M1 --64 -o foo-footer.M1 to blood-elf -f foo.M1 --64 --little-endian -o foo-footer.M1</span></div><div class="line" id="021532"><span class="nick" style="color:#6b8072"><a href="#021532" label="[02:15:32]">&lt;stikonas[m]&gt;</a></span><span class="message">Agreed</span></div><div class="line" id="021609"><span class="nick" style="color:#8dd3c7"><a href="#021609" label="[02:16:09]">&lt;oriansj&gt;</a></span><span class="message">and I'll have to add a warning if --little-endian or --big-endian isn't used to help people catch the change</span></div><div class="line" id="021706"><span class="nick" style="color:#8dd3c7"><a href="#021706" label="[02:17:06]">&lt;oriansj&gt;</a></span><span class="message">but it is unavoidable with word based architectures. So I'll get it done tonight</span></div><div class="line" id="023938"><span class="nick" style="color:#8dd3c7"><a href="#023938" label="[02:39:38]">&lt;oriansj&gt;</a></span><span class="message">janneke: this will be a breaking change for MesCC too</span></div><div class="line" id="031847"><span class="nick" style="color:#8dd3c7"><a href="#031847" label="[03:18:47]">&lt;oriansj&gt;</a></span><span class="message">and this will also impact M2-Planet, stikonas would you mind helping me get RISC-V support into M2-Planet?</span></div><div class="line" id="032236"><span class="nick" style="color:#6b8072"><a href="#032236" label="[03:22:36]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, tomorrow... Going to bed right now</span></div><div class="line" id="033439"><span class="nick" style="color:#8dd3c7"><a href="#033439" label="[03:34:39]">&lt;oriansj&gt;</a></span><span class="message">and once RISC-V is in M2-Planet it'll be a release as well. So I guess I'm gonna have to be productive tonight</span></div><div class="line" id="044928"><span class="nick" style="color:#8dd3c7"><a href="#044928" label="[04:49:28]">&lt;oriansj&gt;</a></span><span class="message">This is gonna be one ugly delta</span></div><div class="line" id="045043"><span class="nick" style="color:#8dd3c7"><a href="#045043" label="[04:50:43]">&lt;oriansj&gt;</a></span><span class="message">stikonas: when you get a chance tomorrow please verify that this corrects your RISC-V blood-elf issue. And if so, I'll setup a proper release.</span></div><div class="line" id="050122"><span class="nick" style="color:#8dd3c7"><a href="#050122" label="[05:01:22]">&lt;oriansj&gt;</a></span><span class="message">and it is finally time to generate warning messages for --LittleEndian, --BigEndian and --exec_enable</span></div><div class="line" id="050323"><span class="nick" style="color:#8dd3c7"><a href="#050323" label="[05:03:23]">&lt;oriansj&gt;</a></span><span class="message">and changes are now up</span></div><div class="line" id="050421"><span class="nick" style="color:#8dd3c7"><a href="#050421" label="[05:04:21]">&lt;oriansj&gt;</a></span><span class="message">and after you confirm, I'll update the release notes and do a formal release.</span></div><div class="line" id="050449"><span class="nick" style="color:#8dd3c7"><a href="#050449" label="[05:04:49]">&lt;oriansj&gt;</a></span><span class="message">Then I'll get started on updating M2-Planet and stage0-posix to reflect the change.</span></div><div class="line" id="083646"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o janneke</span></div><div class="line" id="123851"><span class="nick" style="color:#389600"><a href="#123851" label="[12:38:51]">&lt;stikonas&gt;</a></span><span class="message">oriansj: blood elf works now on M2 risc-v binary that I built</span></div><div class="line" id="123935"><span class="nick" style="color:#389600"><a href="#123935" label="[12:39:35]">&lt;stikonas&gt;</a></span><span class="message">it will let me debug it properly, because without those section names it was almost impossible to follow</span></div><div class="line" id="124005"><span class="nick" style="color:#389600"><a href="#124005" label="[12:40:05]">&lt;stikonas&gt;</a></span><span class="message">(although, in the worse case cc_* can always be modified to spit out GAS assembly)</span></div><div class="line" id="124236"><span class="nick" style="color:#8dd3c7"><a href="#124236" label="[12:42:36]">&lt;oriansj&gt;</a></span><span class="message">nice</span></div><div class="line" id="124309"><span class="nick" style="color:#8dd3c7"><a href="#124309" label="[12:43:09]">&lt;oriansj&gt;</a></span><span class="message">and readelf -a now looking clean?</span></div><div class="line" id="125556"><span class="nick" style="color:#389600"><a href="#125556" label="[12:55:56]">&lt;stikonas&gt;</a></span><span class="message">oriansj: yes</span></div><div class="line" id="125613"><span class="nick" style="color:#389600"><a href="#125613" label="[12:56:13]">&lt;stikonas&gt;</a></span><span class="message">although, it's more important that gdb is looking alright</span></div><div class="line" id="125639"><span class="nick" style="color:#389600"><a href="#125639" label="[12:56:39]">&lt;stikonas&gt;</a></span><span class="message">and then later we can try to port M2-Planet to risc-v</span></div><div class="line" id="125733"><span class="nick" style="color:#389600"><a href="#125733" label="[12:57:33]">&lt;stikonas&gt;</a></span><span class="message">I guess it's mostly copying strings from cc_riscv64 although reversed order of risc-v M1 files causes some minor adjustments</span></div><div class="line" id="125821"><span class="nick" style="color:#389600"><a href="#125821" label="[12:58:21]">&lt;stikonas&gt;</a></span><span class="message">(also loading constants and labels need AUIPC/LUI and ADDI/ADDIW)</span></div><div class="line" id="130040"><span class="nick" style="color:#389600"><a href="#130040" label="[13:00:40]">&lt;stikonas&gt;</a></span><span class="message">and I guess for all those branching statements (if/for/while/do) we need to implement indirect jumps (branch + jump)</span></div><div class="line" id="130213"><span class="nick" style="color:#8dd3c7"><a href="#130213" label="[13:02:13]">&lt;oriansj&gt;</a></span><span class="message">well there is a nearly 1:1 mapping between cc_* and M2-Planet</span></div><div class="line" id="130232"><span class="nick" style="color:#389600"><a href="#130232" label="[13:02:32]">&lt;stikonas&gt;</a></span><span class="message">so far in cc_riscv64 I've only implemented indirect jumps for while statement</span></div><div class="line" id="130254"><span class="nick" style="color:#389600"><a href="#130254" label="[13:02:54]">&lt;stikonas&gt;</a></span><span class="message">(cause M2-Planet has some long while loops that are outside the range of B-type instruction)</span></div><div class="line" id="130302"><span class="nick" style="color:#389600"><a href="#130302" label="[13:03:02]">&lt;stikonas&gt;</a></span><span class="message">yes, I saw that it's very close</span></div><div class="line" id="130320"><span class="nick" style="color:#8dd3c7"><a href="#130320" label="[13:03:20]">&lt;oriansj&gt;</a></span><span class="message">So I could use your cc_riscv64 work as a basis for M2-Planet.</span></div><div class="line" id="130439"><span class="nick" style="color:#389600"><a href="#130439" label="[13:04:39]">&lt;stikonas&gt;</a></span><span class="message">yeah</span></div><div class="line" id="130445"><span class="nick" style="color:#389600"><a href="#130445" label="[13:04:45]">&lt;stikonas&gt;</a></span><span class="message">this is what I did for while loops: <a rel="nofollow" href="https://github.com/stikonas/stage0-posix/blob/cc_riscv64/riscv64/cc_riscv64.M1#L5116">https://github.com/stikonas/stage0-posix/blob/cc_riscv64/riscv64/cc_riscv64.M1#L5116</a> </span></div><div class="line" id="130531"><span class="nick" style="color:#389600"><a href="#130531" label="[13:05:31]">&lt;stikonas&gt;</a></span><span class="message">so I think same thing will be needed for if/for/do statements (or at least if they are outside range, but that's tricker to check)</span></div><div class="line" id="130554"><span class="nick" style="color:#389600"><a href="#130554" label="[13:05:54]">&lt;stikonas&gt;</a></span><span class="message">the simplest thing I guess it not to do any optimizations and unconditionally do indirect branches</span></div><div class="line" id="130620"><span class="nick" style="color:#389600"><a href="#130620" label="[13:06:20]">&lt;stikonas&gt;</a></span><span class="message">although, I'm not 100% sure yet if all the code is generated correctly</span></div><div class="line" id="130623"><span class="nick" style="color:#8dd3c7"><a href="#130623" label="[13:06:23]">&lt;oriansj&gt;</a></span><span class="message">simplest and most inefficient will absolutely work</span></div><div class="line" id="130634"><span class="nick" style="color:#389600"><a href="#130634" label="[13:06:34]">&lt;stikonas&gt;</a></span><span class="message">since I didn't yet get M2 binary to work</span></div><div class="line" id="130659"><span class="nick" style="color:#389600"><a href="#130659" label="[13:06:59]">&lt;stikonas&gt;</a></span><span class="message">it does seem to work for a while, I think tokenization might be done correctly</span></div><div class="line" id="130712"><span class="nick" style="color:#389600"><a href="#130712" label="[13:07:12]">&lt;stikonas&gt;</a></span><span class="message">so there is probably only one bug or so left...</span></div><div class="line" id="130739"><span class="nick" style="color:#389600"><a href="#130739" label="[13:07:39]">&lt;stikonas&gt;</a></span><span class="message">oh, you would also need bootstrap.c... which I haven't pushed yet</span></div><div class="line" id="130741"><span class="nick" style="color:#8dd3c7"><a href="#130741" label="[13:07:41]">&lt;oriansj&gt;</a></span><span class="message">well the M2-Planet tests will find most instruction bugs rather quickly; So I'll certainly have to sort it all out when doing that work.</span></div><div class="line" id="130758"><span class="nick" style="color:#389600"><a href="#130758" label="[13:07:58]">&lt;stikonas&gt;</a></span><span class="message">although, I need to test if everything is working there correctly</span></div><div class="line" id="130811"><span class="nick" style="color:#389600"><a href="#130811" label="[13:08:11]">&lt;stikonas&gt;</a></span><span class="message">well, let me push it to the branch anyway</span></div><div class="line" id="130823"><span class="nick" style="color:#389600"><a href="#130823" label="[13:08:23]">&lt;stikonas&gt;</a></span><span class="message">it might be easier to test with M2-Planet tests...</span></div><div class="line" id="130922"><span class="nick" style="color:#8dd3c7"><a href="#130922" label="[13:09:22]">&lt;oriansj&gt;</a></span><span class="message">it is easiest to figure out the M1 grammer details for cc_* in M2-Planet as it forces one to quickly deal with the common problem cases</span></div><div class="line" id="131211"><span class="nick" style="color:#389600"><a href="#131211" label="[13:12:11]">&lt;stikonas&gt;</a></span><span class="message">well, my main issue was that debugging was not working well but that is solved now</span></div><div class="line" id="131251"><span class="nick" style="color:#389600"><a href="#131251" label="[13:12:51]">&lt;stikonas&gt;</a></span><span class="message">earlier binaries I could debug because handwritten assembly code was easy to recognize, so I could usually tell which function I'm looking at</span></div><div class="line" id="131303"><span class="nick" style="color:#389600"><a href="#131303" label="[13:13:03]">&lt;stikonas&gt;</a></span><span class="message">not so much with generated code... It all looks very similar</span></div><div class="line" id="131502"><span class="nick" style="color:#8dd3c7"><a href="#131502" label="[13:15:02]">&lt;oriansj&gt;</a></span><span class="message">fair. the Big 3 (hex2, M1 and blood-elf) always really need a solid block of testing on new architectures and it is looking like RISC-V is certainly shaking things up a bit (possibly for the better)</span></div><div class="line" id="131510"><span class="nick" style="color:#389600"><a href="#131510" label="[13:15:10]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/M2libc/pull/3">https://github.com/oriansj/M2libc/pull/3</a> </span></div><div class="line" id="131531"><span class="nick" style="color:#389600"><a href="#131531" label="[13:15:31]">&lt;stikonas&gt;</a></span><span class="message">yeah...</span></div><div class="line" id="131541"><span class="nick" style="color:#389600"><a href="#131541" label="[13:15:41]">&lt;stikonas&gt;</a></span><span class="message">and I'll still have to look at M0 and possibly hex2-0 bugs</span></div><div class="line" id="131605"><span class="nick" style="color:#389600"><a href="#131605" label="[13:16:05]">&lt;stikonas&gt;</a></span><span class="message">they had some issues with cc_riscv64 generated .M1 files</span></div><div class="line" id="131624"><span class="nick" style="color:#389600"><a href="#131624" label="[13:16:24]">&lt;stikonas&gt;</a></span><span class="message">right now I'm using C versions of those tools for testing</span></div><div class="line" id="131656"><span class="nick" style="color:#8dd3c7"><a href="#131656" label="[13:16:56]">&lt;oriansj&gt;</a></span><span class="message">merged</span></div><div class="line" id="131729"><span class="nick" style="color:#8dd3c7"><a href="#131729" label="[13:17:29]">&lt;oriansj&gt;</a></span><span class="message">well it is best to hunt for bugs in known good code</span></div><div class="line" id="131752"><span class="nick" style="color:#389600"><a href="#131752" label="[13:17:52]">&lt;stikonas&gt;</a></span><span class="message">true...</span></div><div class="line" id="131827"><span class="nick" style="color:#8dd3c7"><a href="#131827" label="[13:18:27]">&lt;oriansj&gt;</a></span><span class="message">So the optimal order would have been mescc-tools -&gt; M2-Planet -&gt; cc_* -&gt; M0 -&gt; hex2.hex1 -&gt; hex1.hex0 -&gt; hex0.hex0</span></div><div class="line" id="131855"><span class="nick" style="color:#8dd3c7"><a href="#131855" label="[13:18:55]">&lt;oriansj&gt;</a></span><span class="message">but the reverse is certainly more fun</span></div><div class="line" id="131919"><span class="nick" style="color:#8dd3c7"><a href="#131919" label="[13:19:19]">&lt;oriansj&gt;</a></span><span class="message">and a good way to learn assembly programming and low level debugging skills</span></div><div class="line" id="132021"><span class="nick" style="color:#389600"><a href="#132021" label="[13:20:21]">&lt;stikonas&gt;</a></span><span class="message">yeah, I didn't know enough assembly programming to write cc_* initially</span></div><div class="line" id="132038"><span class="nick" style="color:#389600"><a href="#132038" label="[13:20:38]">&lt;stikonas&gt;</a></span><span class="message">so I had to start from small stuff</span></div><div class="line" id="132111"><span class="nick" style="color:#8dd3c7"><a href="#132111" label="[13:21:11]">&lt;oriansj&gt;</a></span><span class="message">and it looks like you are getting proficient with RISC-V assembly</span></div><div class="line" id="132200"><span class="nick" style="color:#389600"><a href="#132200" label="[13:22:00]">&lt;stikonas&gt;</a></span><span class="message">well, in some subset. It's probably not the most optimal code</span></div><div class="line" id="132223"><span class="nick" style="color:#389600"><a href="#132223" label="[13:22:23]">&lt;stikonas&gt;</a></span><span class="message">but we don't require that for bootstrapping</span></div><div class="line" id="132302"><span class="nick" style="color:#389600"><a href="#132302" label="[13:23:02]">&lt;stikonas&gt;</a></span><span class="message">and especially cc_* and M2-Planet's output if less efficient on risc-v compared to other arches</span></div><div class="line" id="132308"><span class="nick" style="color:#8dd3c7"><a href="#132308" label="[13:23:08]">&lt;oriansj&gt;</a></span><span class="message">optimization in assembly is a different skill set than just straight assembly programming which takes considerably longer to learn.</span></div><div class="line" id="132344"><span class="nick" style="color:#389600"><a href="#132344" label="[13:23:44]">&lt;stikonas&gt;</a></span><span class="message">pushing/poping everything onto stack takes considerably more instructions</span></div><div class="line" id="132402"><span class="nick" style="color:#8dd3c7"><a href="#132402" label="[13:24:02]">&lt;oriansj&gt;</a></span><span class="message">but much easier to reason about</span></div><div class="line" id="132414"><span class="nick" style="color:#389600"><a href="#132414" label="[13:24:14]">&lt;stikonas&gt;</a></span><span class="message">yes, so good enough for first compilers</span></div><div class="line" id="132428"><span class="nick" style="color:#389600"><a href="#132428" label="[13:24:28]">&lt;stikonas&gt;</a></span><span class="message">especially one written in assembly</span></div><div class="line" id="132611"><span class="nick" style="color:#389600"><a href="#132611" label="[13:26:11]">&lt;stikonas&gt;</a></span><span class="message">word based instructions might be a mess to support here in stage0-posix but one advantage of those is that M1 code looks really similar to GAS code</span></div><div class="line" id="132703"><span class="nick" style="color:#8dd3c7"><a href="#132703" label="[13:27:03]">&lt;oriansj&gt;</a></span><span class="message">well it looks like you are doing quite an excellent job with getting RISC-V into stage0-posix</span></div><div class="line" id="132742"><span class="nick" style="color:#389600"><a href="#132742" label="[13:27:42]">&lt;stikonas&gt;</a></span><span class="message">well, you helped a lot with mescc-tools part</span></div><div class="line" id="132747"><span class="nick" style="color:#8dd3c7"><a href="#132747" label="[13:27:47]">&lt;oriansj&gt;</a></span><span class="message">It is certainly the hardest instruction set we have yet to gain support for.</span></div><div class="line" id="132803"><span class="nick" style="color:#389600"><a href="#132803" label="[13:28:03]">&lt;stikonas&gt;</a></span><span class="message">for riscv we had to work on mescc-tools/hex1 in parallel</span></div><div class="line" id="132810"><span class="nick" style="color:#389600"><a href="#132810" label="[13:28:10]">&lt;stikonas&gt;</a></span><span class="message">cause it's hard to tell what mescc-tools might need</span></div><div class="line" id="132817"><span class="nick" style="color:#389600"><a href="#132817" label="[13:28:17]">&lt;stikonas&gt;</a></span><span class="message">until you actually use those things</span></div><div class="line" id="132838"><span class="nick" style="color:#389600"><a href="#132838" label="[13:28:38]">&lt;stikonas&gt;</a></span><span class="message">well, the first one x86 was much harder to get</span></div><div class="line" id="132854"><span class="nick" style="color:#8dd3c7"><a href="#132854" label="[13:28:54]">&lt;oriansj&gt;</a></span><span class="message">We had to do major rethinking to work around its word based encoding and it will probably serve as a good roadmap for other architectures that map to words better than bytes</span></div><div class="line" id="132911"><span class="nick" style="color:#389600"><a href="#132911" label="[13:29:11]">&lt;stikonas&gt;</a></span><span class="message">but out of those new arches yes, riscv was probably the trickiest</span></div><div class="line" id="132947"><span class="nick" style="color:#8dd3c7"><a href="#132947" label="[13:29:47]">&lt;oriansj&gt;</a></span><span class="message">AArch64 would probably better map to words than bytes but it had the advantage of being reasonable when working with bytes</span></div><div class="line" id="133015"><span class="nick" style="color:#8dd3c7"><a href="#133015" label="[13:30:15]">&lt;oriansj&gt;</a></span><span class="message">and we hacked around to shove it into that box</span></div><div class="line" id="133046"><span class="nick" style="color:#8dd3c7"><a href="#133046" label="[13:30:46]">&lt;oriansj&gt;</a></span><span class="message">but with RISC-V I just couldn't possibly find a way to get it to fit in the byte box</span></div><div class="line" id="133114"><span class="nick" style="color:#389600"><a href="#133114" label="[13:31:14]">&lt;stikonas&gt;</a></span><span class="message">yeah, it's quite messy at instruction encoding level</span></div><div class="line" id="133128"><span class="nick" style="color:#8dd3c7"><a href="#133128" label="[13:31:28]">&lt;oriansj&gt;</a></span><span class="message">so thank you stikonas for pushing me to finally find a working solution for word based instruction sets. It will likely be quite useful as we add more architectures.</span></div><div class="line" id="133135"><span class="nick" style="color:#389600"><a href="#133135" label="[13:31:35]">&lt;stikonas&gt;</a></span><span class="message">and hex1 is almost as large as hex2 for some other arches</span></div><div class="line" id="133155"><span class="nick" style="color:#389600"><a href="#133155" label="[13:31:55]">&lt;stikonas&gt;</a></span><span class="message">what else might be using words?</span></div><div class="line" id="133210"><span class="nick" style="color:#389600"><a href="#133210" label="[13:32:10]">&lt;stikonas&gt;</a></span><span class="message">well, AArch64 is already done, so maybe not worth redoing it</span></div><div class="line" id="133237"><span class="nick" style="color:#8dd3c7"><a href="#133237" label="[13:32:37]">&lt;oriansj&gt;</a></span><span class="message">RISC-V, MIPS, SPARC, AArch64 and PowerPC are the big ones</span></div><div class="line" id="133253"><span class="nick" style="color:#389600"><a href="#133253" label="[13:32:53]">&lt;stikonas&gt;</a></span><span class="message">well, yes, MIPS is quite similar to risc-v</span></div><div class="line" id="133430"><span class="nick" style="color:#8dd3c7"><a href="#133430" label="[13:34:30]">&lt;oriansj&gt;</a></span><span class="message">Itanic too but someone else will have to deal with VLIW bootstrapping; because seriously fuck that noise.</span></div><div class="line" id="133441"><span class="nick" style="color:#389600"><a href="#133441" label="[13:34:41]">&lt;stikonas&gt;</a></span><span class="message">Itanium?</span></div><div class="line" id="133454"><span class="nick" style="color:#8dd3c7"><a href="#133454" label="[13:34:54]">&lt;oriansj&gt;</a></span><span class="message">yeah it doesn't map to bytes or words</span></div><div class="line" id="133455"><span class="nick" style="color:#389600"><a href="#133455" label="[13:34:55]">&lt;stikonas&gt;</a></span><span class="message">well, Itanium and MIPS are both deprecated now</span></div><div class="line" id="133502"><span class="nick" style="color:#389600"><a href="#133502" label="[13:35:02]">&lt;stikonas&gt;</a></span><span class="message">probably not worth bootstrapping on those</span></div><div class="line" id="133522"><span class="nick" style="color:#389600"><a href="#133522" label="[13:35:22]">&lt;stikonas&gt;</a></span><span class="message">MIPS company switched to risc-v</span></div><div class="line" id="133535"><span class="nick" style="color:#389600"><a href="#133535" label="[13:35:35]">&lt;stikonas&gt;</a></span><span class="message">and Itanium is also not making new chips anymore</span></div><div class="line" id="133539"><span class="nick" style="color:#8dd3c7"><a href="#133539" label="[13:35:39]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well any hardware one wants to support can be supported if someone is willing to do the work.</span></div><div class="line" id="133601"><span class="nick" style="color:#389600"><a href="#133601" label="[13:36:01]">&lt;stikonas&gt;</a></span><span class="message">well, yes, if someone is willing but somebody must already have old hardware...</span></div><div class="line" id="133613"><span class="nick" style="color:#8dd3c7"><a href="#133613" label="[13:36:13]">&lt;oriansj&gt;</a></span><span class="message">or bought it on ebay</span></div><div class="line" id="133613"><span class="nick" style="color:#389600"><a href="#133613" label="[13:36:13]">&lt;stikonas&gt;</a></span><span class="message">or just do it for fun in qemu</span></div><div class="line" id="133645"><span class="nick" style="color:#8dd3c7"><a href="#133645" label="[13:36:45]">&lt;oriansj&gt;</a></span><span class="message">DEC Alpha might be fun now that we have word based encoding</span></div><div class="line" id="133855"><span class="nick" style="color:#389600"><a href="#133855" label="[13:38:55]">&lt;stikonas&gt;</a></span><span class="message">well, the easiest  target is probably riscv32 now</span></div><div class="line" id="133903"><span class="nick" style="color:#389600"><a href="#133903" label="[13:39:03]">&lt;stikonas&gt;</a></span><span class="message">that can be done quite cheaply</span></div><div class="line" id="133916"><span class="nick" style="color:#389600"><a href="#133916" label="[13:39:16]">&lt;stikonas&gt;</a></span><span class="message">maybe somebody else here wants to do it too</span></div><div class="line" id="133950"><span class="nick" style="color:#8dd3c7"><a href="#133950" label="[13:39:50]">&lt;oriansj&gt;</a></span><span class="message">well let us finish riscv64 first</span></div><div class="line" id="134026"><span class="nick" style="color:#389600"><a href="#134026" label="[13:40:26]">&lt;stikonas&gt;</a></span><span class="message">well, yeah</span></div><div class="line" id="134040"><span class="nick" style="color:#389600"><a href="#134040" label="[13:40:40]">&lt;stikonas&gt;</a></span><span class="message">there is no point of copying riscv64 files into riscv32 files and ending up with the same bugs</span></div><div class="line" id="134135"><span class="nick" style="color:#8dd3c7"><a href="#134135" label="[13:41:35]">&lt;oriansj&gt;</a></span><span class="message">other fun new architectures that become possible with word based encoding: Lisp chips</span></div><div class="line" id="134315"><span class="nick" style="color:#8dd3c7"><a href="#134315" label="[13:43:15]">&lt;oriansj&gt;</a></span><span class="message">small-talk cpus and FORTH cpus (if one is willings to sort out non-byte behavior; which I really do not)</span></div><div class="line" id="134824"><span class="nick" style="color:#8dd3c7"><a href="#134824" label="[13:48:24]">&lt;oriansj&gt;</a></span><span class="message">I suspect bootstrapping has an infinite work space in all directions. (up stack, down stack and sideways [new ports])</span></div><div class="line" id="134919"><span class="nick" style="color:#8dd3c7"><a href="#134919" label="[13:49:19]">&lt;oriansj&gt;</a></span><span class="message">but it is a lot of fun to know how everything works down to the smallest detail</span></div><div class="line" id="154336"><span class="nick" style="color:#389600"><a href="#154336" label="[15:43:36]">&lt;stikonas&gt;</a></span><span class="message">hmm, I think something is still messed up with function calls in cc_riscv64. fputs(&quot;Test\n&quot;, stderr); before program() in M2-Planet prints it fine but first statement in the function prints gibberish</span></div><div class="line" id="154626"><span class="nick" style="color:#389600"><a href="#154626" label="[15:46:26]">&lt;stikonas&gt;</a></span><span class="message">it's a bit surprising that other functions seem to work</span></div><div class="line" id="154634"><span class="nick" style="color:#389600"><a href="#154634" label="[15:46:34]">&lt;stikonas&gt;</a></span><span class="message">something is peculiar about program...</span></div><div class="line" id="154820"><span class="nick" style="color:#389600"><a href="#154820" label="[15:48:20]">&lt;stikonas&gt;</a></span><span class="message">ok, it's actually initialize_types(); function before program() where something bad happens</span></div><div class="line" id="182846"><span class="nick" style="color:#389600"><a href="#182846" label="[18:28:46]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I now think cc_riscv64 problem might actually be string loading. Somehow auipc/addi pair does not correctly load strings...</span></div><div class="line" id="182852"><span class="nick" style="color:#389600"><a href="#182852" label="[18:28:52]">&lt;stikonas&gt;</a></span><span class="message">not sure why...</span></div><div class="line" id="183019"><span class="nick" style="color:#389600"><a href="#183019" label="[18:30:19]">&lt;stikonas&gt;</a></span><span class="message">either I misunderstand somehow how to use it (more likely) or someting is messed up in hex2</span></div><div class="line" id="185814"><span class="nick" style="color:#389600"><a href="#185814" label="[18:58:14]">&lt;stikonas&gt;</a></span><span class="message">ok, it's something weird going on with weird strings</span></div><div class="line" id="185906"><span class="nick" style="color:#389600"><a href="#185906" label="[18:59:06]">&lt;stikonas&gt;</a></span><span class="message">if I manually move my string &quot;CONSTANT&quot; before :STRING_get_token_12 ' 27 22 0' then loading it works fine, if after it's just some corrupted data</span></div><div class="line" id="185944"><span class="nick" style="color:#389600"><a href="#185944" label="[18:59:44]">&lt;stikonas&gt;</a></span><span class="message">oh, and the answer is a single 0</span></div><div class="line" id="190157"><span class="nick" style="color:#389600"><a href="#190157" label="[19:01:57]">&lt;stikonas&gt;</a></span><span class="message">and M2 is starting to work with this fixed...</span></div><div class="line" id="190202"><span class="nick" style="color:#389600"><a href="#190202" label="[19:02:02]">&lt;stikonas&gt;</a></span><span class="message">at least on simple programs...</span></div><div class="line" id="190306"><span class="nick" style="color:#389600"><a href="#190306" label="[19:03:06]">&lt;stikonas&gt;</a></span><span class="message">probably will work on other things too...</span></div><div class="line" id="201048"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o janneke_</span></div><div class="line" id="202442"><span class="nick">***</span><span class="message notice">janneke_ is now known as janneke</span></div><div class="line" id="212055"><span class="nick" style="color:#80b1d3"><a href="#212055" label="[21:20:55]">&lt;mihi&gt;</a></span><span class="message">theruran: See <a rel="nofollow" href="https://www.freelists.org/post/bootstrappable/Can-Guile-be-bootstrapped-from-source-without-psyntaxppscm">https://www.freelists.org/post/bootstrappable/Can-Guile-be-bootstrapped-from-source-without-psyntaxppscm</a>,13  for latest status of upstreaming psyntax-bootstrap. TL;DR: If you have sold you soul to RMS you may be able to help getting it upstream :)</span></div><div class="line" id="212206"><span class="nick" style="color:#80b1d3"><a href="#212206" label="[21:22:06]">&lt;mihi&gt;</a></span><span class="message">tbh I don't care enough about jumping though copyright assignment hoops/politics/shenanigans for getting such a niche thing upstreamed.</span></div><div class="line" id="221309"><span class="nick" style="color:#8dd3c7"><a href="#221309" label="[22:13:09]">&lt;oriansj&gt;</a></span><span class="message">stikonas: you need to output &lt; after strings to pad to alignment otherwise the strings that follow will not be on aligned addresses.</span></div><div class="line" id="221450"><span class="nick" style="color:#389600"><a href="#221450" label="[22:14:50]">&lt;stikonas&gt;</a></span><span class="message">oriansj: well, in that case it was even worse</span></div><div class="line" id="221511"><span class="nick" style="color:#389600"><a href="#221511" label="[22:15:11]">&lt;stikonas&gt;</a></span><span class="message">only one 0 meant that everything after it was shifted by 4 bits</span></div><div class="line" id="221517"><span class="nick" style="color:#389600"><a href="#221517" label="[22:15:17]">&lt;stikonas&gt;</a></span><span class="message">so was completely messed up</span></div><div class="line" id="221534"><span class="nick" style="color:#389600"><a href="#221534" label="[22:15:34]">&lt;stikonas&gt;</a></span><span class="message">anyway, after that fix things seem much better</span></div><div class="line" id="221543"><span class="nick" style="color:#389600"><a href="#221543" label="[22:15:43]">&lt;stikonas&gt;</a></span><span class="message">so we can maybe merge it</span></div><div class="line" id="221608"><span class="nick" style="color:#389600"><a href="#221608" label="[22:16:08]">&lt;stikonas&gt;</a></span><span class="message">there are some issues with hex2 and M0 though</span></div><div class="line" id="221636"><span class="nick" style="color:#389600"><a href="#221636" label="[22:16:36]">&lt;stikonas&gt;</a></span><span class="message">M0 seem to have some issue with malloc pointer, I suspect what happens is that brk does not allocate memory\</span></div><div class="line" id="221645"><span class="nick" style="color:#389600"><a href="#221645" label="[22:16:45]">&lt;stikonas&gt;</a></span><span class="message">and code does not have check for brk failure</span></div><div class="line" id="221727"><span class="nick" style="color:#389600"><a href="#221727" label="[22:17:27]">&lt;stikonas&gt;</a></span><span class="message">and that causes pointer value to be wrong which crashes on dereferencing</span></div><div class="line" id="221806"><span class="nick" style="color:#8dd3c7"><a href="#221806" label="[22:18:06]">&lt;oriansj&gt;</a></span><span class="message">brk should never fail unless you run out of RAM</span></div><div class="line" id="221813"><span class="nick" style="color:#389600"><a href="#221813" label="[22:18:13]">&lt;stikonas&gt;</a></span><span class="message">and hex2 seems to have some issue with I instructions, which messed up a few bytes in final binary</span></div><div class="line" id="221816"><span class="nick" style="color:#389600"><a href="#221816" label="[22:18:16]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="221924"><span class="nick" style="color:#8dd3c7"><a href="#221924" label="[22:19:24]">&lt;oriansj&gt;</a></span><span class="message">it can allocate only page sized blocks at a time which could result in a failed allocation too but that has only been noted on BSD systems</span></div><div class="line" id="221937"><span class="nick" style="color:#389600"><a href="#221937" label="[22:19:37]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/pull/46">https://github.com/oriansj/stage0-posix/pull/46</a> </span></div><div class="line" id="221954"><span class="nick" style="color:#389600"><a href="#221954" label="[22:19:54]">&lt;stikonas&gt;</a></span><span class="message">well, maybe qemu messes things up...</span></div><div class="line" id="222026"><span class="nick" style="color:#389600"><a href="#222026" label="[22:20:26]">&lt;stikonas&gt;</a></span><span class="message">well, this PR just builds up to cc_riscv64, in order to see bug you should build M2</span></div><div class="line" id="222044"><span class="nick" style="color:#389600"><a href="#222044" label="[22:20:44]">&lt;stikonas&gt;</a></span><span class="message">M0 hold M2.M1 step crashes fairly frequently for me</span></div><div class="line" id="222128"><span class="nick" style="color:#8dd3c7"><a href="#222128" label="[22:21:28]">&lt;oriansj&gt;</a></span><span class="message">merged</span></div><div class="line" id="222154"><span class="nick" style="color:#389600"><a href="#222154" label="[22:21:54]">&lt;stikonas&gt;</a></span><span class="message">if you have risc-v qemu, maybe you can try building M2 and see if you also get crashes?</span></div><div class="line" id="222249"><span class="nick" style="color:#389600"><a href="#222249" label="[22:22:49]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1213236/">https://paste.debian.net/1213236/</a> </span></div><div class="line" id="222428"><span class="nick" style="color:#8dd3c7"><a href="#222428" label="[22:24:28]">&lt;oriansj&gt;</a></span><span class="message">in gdb bt can help you find where the crash comes from</span></div><div class="line" id="222605"><span class="nick" style="color:#389600"><a href="#222605" label="[22:26:05]">&lt;stikonas&gt;</a></span><span class="message">well, it comes from reverse list function</span></div><div class="line" id="222621"><span class="nick" style="color:#389600"><a href="#222621" label="[22:26:21]">&lt;stikonas&gt;</a></span><span class="message">and like I said, the value in $s4 looks very strange</span></div><div class="line" id="222632"><span class="nick" style="color:#389600"><a href="#222632" label="[22:26:32]">&lt;stikonas&gt;</a></span><span class="message">it's not memory address</span></div><div class="line" id="222641"><span class="nick" style="color:#389600"><a href="#222641" label="[22:26:41]">&lt;stikonas&gt;</a></span><span class="message">but it should be brk pointer</span></div><div class="line" id="222825"><span class="nick" style="color:#8dd3c7"><a href="#222825" label="[22:28:25]">&lt;oriansj&gt;</a></span><span class="message">reverse list can't crash if implemented correctly As it is iterative (no stack usage) and stops when it hits a null. unless brk is returning non-null values in memory. in which case you'll need to do zeroing on allocation</span></div><div class="line" id="223439"><span class="nick" style="color:#8dd3c7"><a href="#223439" label="[22:34:39]">&lt;oriansj&gt;</a></span><span class="message">stikonas: looking into it now</span></div><div class="line" id="225907"><span class="nick" style="color:#8dd3c7"><a href="#225907" label="[22:59:07]">&lt;oriansj&gt;</a></span><span class="message">sin shows your M0 is introducing forbidden chars \xA0 \xE3 \x03</span></div><div class="line" id="231709"><span class="nick" style="color:#8dd3c7"><a href="#231709" label="[23:17:09]">&lt;oriansj&gt;</a></span><span class="message">STRING_weird_4</span></div><div class="line" id="231754"><span class="nick" style="color:#389600"><a href="#231754" label="[23:17:54]">&lt;stikonas&gt;</a></span><span class="message">sorry, was a bit disconnected, due to router configuration problems..</span></div><div class="line" id="231802"><span class="nick" style="color:#389600"><a href="#231802" label="[23:18:02]">&lt;stikonas&gt;</a></span><span class="message">I can see what your wrote in the logs...</span></div><div class="line" id="231816"><span class="nick" style="color:#8dd3c7"><a href="#231816" label="[23:18:16]">&lt;oriansj&gt;</a></span><span class="message">it truncated the last 12bytes and replaced it with garbage</span></div><div class="line" id="231850"><span class="nick" style="color:#8dd3c7"><a href="#231850" label="[23:18:50]">&lt;oriansj&gt;</a></span><span class="message">So your raw string support in M0 has a fixed size issue</span></div><div class="line" id="231854"><span class="nick" style="color:#389600"><a href="#231854" label="[23:18:54]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="231900"><span class="nick" style="color:#389600"><a href="#231900" label="[23:19:00]">&lt;stikonas&gt;</a></span><span class="message">ok, let's see the code</span></div><div class="line" id="232141"><span class="nick" style="color:#389600"><a href="#232141" label="[23:21:41]">&lt;stikonas&gt;</a></span><span class="message">hmm, it's doing srli a0, a0, 2; addi a0, a0, 1; slli a0, a0, 3</span></div><div class="line" id="232801"><span class="nick" style="color:#8dd3c7"><a href="#232801" label="[23:28:01]">&lt;oriansj&gt;</a></span><span class="message">well it isn't the long lines</span></div><div class="line" id="232938"><span class="nick" style="color:#8dd3c7"><a href="#232938" label="[23:29:38]">&lt;oriansj&gt;</a></span><span class="message">and looking at STRING_weird_4 in M2.M1, it isn't raw string but string literal</span></div><div class="line" id="233112"><span class="nick" style="color:#8dd3c7"><a href="#233112" label="[23:31:12]">&lt;oriansj&gt;</a></span><span class="message">and it isn't happening by a single string literal by itself</span></div><div class="line" id="233220"><span class="nick" style="color:#389600"><a href="#233220" label="[23:32:20]">&lt;stikonas&gt;</a></span><span class="message">but it's also not happening every time...</span></div><div class="line" id="233231"><span class="nick" style="color:#389600"><a href="#233231" label="[23:32:31]">&lt;stikonas&gt;</a></span><span class="message">so there must be some other randomness coming from somewhere</span></div><div class="line" id="233246"><span class="nick" style="color:#389600"><a href="#233246" label="[23:32:46]">&lt;stikonas&gt;</a></span><span class="message">is it because we don't erase the allocated memory?</span></div><div class="line" id="233258"><span class="nick" style="color:#8dd3c7"><a href="#233258" label="[23:32:58]">&lt;oriansj&gt;</a></span><span class="message">ok I have a minimal test</span></div><div class="line" id="233316"><span class="nick" style="color:#389600"><a href="#233316" label="[23:33:16]">&lt;stikonas&gt;</a></span><span class="message">oh, that's good</span></div><div class="line" id="233319"><span class="nick" style="color:#389600"><a href="#233319" label="[23:33:19]">&lt;stikonas&gt;</a></span><span class="message">should be easier to debug</span></div><div class="line" id="233319"><span class="nick" style="color:#8dd3c7"><a href="#233319" label="[23:33:19]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1213242/">https://paste.debian.net/1213242/</a> </span></div><div class="line" id="233445"><span class="nick" style="color:#389600"><a href="#233445" label="[23:34:45]">&lt;stikonas&gt;</a></span><span class="message">truncated after 73?</span></div><div class="line" id="233446"><span class="nick" style="color:#389600"><a href="#233446" label="[23:34:46]">&lt;stikonas&gt;</a></span><span class="message">with two</span></div><div class="line" id="233448"><span class="nick" style="color:#389600"><a href="#233448" label="[23:34:48]">&lt;stikonas&gt;</a></span><span class="message">``</span></div><div class="line" id="233559"><span class="nick" style="color:#389600"><a href="#233559" label="[23:35:59]">&lt;stikonas&gt;</a></span><span class="message">AMD64/M0 crashes on this file</span></div><div class="line" id="233625"><span class="nick" style="color:#389600"><a href="#233625" label="[23:36:25]">&lt;stikonas&gt;</a></span><span class="message">and so is x86 version</span></div><div class="line" id="233640"><span class="nick" style="color:#389600"><a href="#233640" label="[23:36:40]">&lt;stikonas&gt;</a></span><span class="message">AArch version surprisingly works</span></div><div class="line" id="233852"><span class="nick" style="color:#389600"><a href="#233852" label="[23:38:52]">&lt;stikonas&gt;</a></span><span class="message">they crash in In_Set function...</span></div><div class="line" id="233932"><span class="nick" style="color:#389600"><a href="#233932" label="[23:39:32]">&lt;stikonas&gt;</a></span><span class="message">no, that's not In_Set...</span></div><div class="line" id="234038"><span class="nick" style="color:#389600"><a href="#234038" label="[23:40:38]">&lt;stikonas&gt;</a></span><span class="message">it's File_Print</span></div><div class="line" id="234550"><span class="nick" style="color:#8dd3c7"><a href="#234550" label="[23:45:50]">&lt;oriansj&gt;</a></span><span class="message">its a line in cc_strings.c that every version has successfully built</span></div><div class="line" id="234601"><span class="nick" style="color:#8dd3c7"><a href="#234601" label="[23:46:01]">&lt;oriansj&gt;</a></span><span class="message">so it isn't the single line</span></div><div class="line" id="234636"><span class="nick" style="color:#389600"><a href="#234636" label="[23:46:36]">&lt;stikonas&gt;</a></span><span class="message">yes, I understand...</span></div><div class="line" id="234652"><span class="nick" style="color:#389600"><a href="#234652" label="[23:46:52]">&lt;stikonas&gt;</a></span><span class="message">but when you just extracted those two strings, amd64 version of M0 crashes...</span></div><div class="line" id="234706"><span class="nick" style="color:#389600"><a href="#234706" label="[23:47:06]">&lt;stikonas&gt;</a></span><span class="message">while riscv64 prints some garbage</span></div><div class="line" id="234919"><span class="nick" style="color:#8dd3c7"><a href="#234919" label="[23:49:19]">&lt;oriansj&gt;</a></span><span class="message">cc_riscv64 also outputs it differently than all the other architectures: <a rel="nofollow" href="https://paste.debian.net/1213247/">https://paste.debian.net/1213247/</a> </span></div><div class="line" id="234947"><span class="nick" style="color:#8dd3c7"><a href="#234947" label="[23:49:47]">&lt;oriansj&gt;</a></span><span class="message">so nice bug find stikonas</span></div><div class="line" id="235108"><span class="nick" style="color:#389600"><a href="#235108" label="[23:51:08]">&lt;stikonas&gt;</a></span><span class="message">oh, but that is weird string, isn't it</span></div><div class="line" id="235117"><span class="nick" style="color:#389600"><a href="#235117" label="[23:51:17]">&lt;stikonas&gt;</a></span><span class="message">so it should be in single quotes '</span></div><div class="line" id="235313"><span class="nick" style="color:#8dd3c7"><a href="#235313" label="[23:53:13]">&lt;oriansj&gt;</a></span><span class="message">technically not a weird string as it can't be mistaken by M0/M1 as something other than a raw string.</span></div><div class="line" id="235349"><span class="nick" style="color:#8dd3c7"><a href="#235349" label="[23:53:49]">&lt;oriansj&gt;</a></span><span class="message">that being said I'm going to debug AMD64 to try to figure it out more</span></div><div class="line" id="235349"><span class="nick" style="color:#389600"><a href="#235349" label="[23:53:49]">&lt;stikonas&gt;</a></span><span class="message">oh ok</span></div><div class="line" id="235414"><span class="nick" style="color:#389600"><a href="#235414" label="[23:54:14]">&lt;stikonas&gt;</a></span><span class="message">so there is probably a bug in cc_riscv64 weird string detection function that exposed this M0 bug on other arches</span></div><div class="line" id="235628"><span class="nick" style="color:#8dd3c7"><a href="#235628" label="[23:56:28]">&lt;oriansj&gt;</a></span><span class="message">so double bug find. nice</span></div><div class="line" id="235745"><span class="nick" style="color:#389600"><a href="#235745" label="[23:57:45]">&lt;stikonas&gt;</a></span><span class="message">ok, I think I might see the bug in weird: function</span></div><div class="line" id="235747"><span class="nick" style="color:#389600"><a href="#235747" label="[23:57:47]">&lt;stikonas&gt;</a></span><span class="message">let me test</span></div><div class="line" id="235800"><span class="nick" style="color:#389600"><a href="#235800" label="[23:58:00]">&lt;stikonas&gt;</a></span><span class="message">actually no...\</span></div><div class="line" id="235808"><span class="nick" style="color:#389600"><a href="#235808" label="[23:58:08]">&lt;stikonas&gt;</a></span><span class="message">I think it's fine</span></div><div class="line" id="235824"><span class="nick" style="color:#389600"><a href="#235824" label="[23:58:24]">&lt;stikonas&gt;</a></span><span class="message">AMD64 version compares In_Set result to 1 and riscv64 to 0</span></div><div class="line" id="235838"><span class="nick" style="color:#389600"><a href="#235838" label="[23:58:38]">&lt;stikonas&gt;</a></span><span class="message">but that should be fine (one is jump not equal and the other is jump if equal)</span></div><div class="line" id="235946"><span class="nick" style="color:#389600"><a href="#235946" label="[23:59:46]">&lt;stikonas&gt;</a></span><span class="message">oh, but in the next piece of code riscv version is wrong</span></div><div class="line" id="235948"><span class="nick" style="color:#389600"><a href="#235948" label="[23:59:48]">&lt;stikonas&gt;</a></span><span class="message">let me check then</span></div><div class="line" id="235953"><span class="nick" style="color:#8dd3c7"><a href="#235953" label="[23:59:53]">&lt;oriansj&gt;</a></span><span class="message">found it</span></div><br /></div></body></html>