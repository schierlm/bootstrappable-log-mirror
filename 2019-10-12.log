<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2019-10-12.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="012659"><span class="nick" style="color:#8dd3c7"><a href="#012659" label="[01:26:59]">&lt;damo22&gt;</a></span><span class="message">OriansJ`: would it be helpful if radare2 supported your ISA?  i can add it in</span></div><div class="line" id="013700"><span class="nick" style="color:#8dd3c7"><a href="#013700" label="[01:37:00]">&lt;damo22&gt;</a></span><span class="message">is the idea for stage0 to have its own abstracted ISA so you can more easily port it to any arch?</span></div><div class="line" id="013804"><span class="nick" style="color:#2e2a4a"><a href="#013804" label="[01:38:04]">&lt;OriansJ`&gt;</a></span><span class="message">damo22: actually the idea of the Knight ISA was to keep me and everyone else honest; aka an architecture that can be implemented in TTL and thus no hardware backdoor could exist</span></div><div class="line" id="013914"><span class="nick" style="color:#2e2a4a"><a href="#013914" label="[01:39:14]">&lt;OriansJ`&gt;</a></span><span class="message">as for adding radare2 support for the architecture; that would be rather cool to see ^_^</span></div><div class="line" id="013947"><span class="nick" style="color:#8dd3c7"><a href="#013947" label="[01:39:47]">&lt;damo22&gt;</a></span><span class="message">how is the knight ISA related to the c compiler?</span></div><div class="line" id="014000"><span class="nick" style="color:#8dd3c7"><a href="#014000" label="[01:40:00]">&lt;damo22&gt;</a></span><span class="message">i am still struggling to follow the source</span></div><div class="line" id="014006"><span class="nick" style="color:#2e2a4a"><a href="#014006" label="[01:40:06]">&lt;OriansJ`&gt;</a></span><span class="message">and by manually porting it to multiple architectures, I can prove that the general bootstrap path is valid for any sane architecture</span></div><div class="line" id="014035"><span class="nick" style="color:#2e2a4a"><a href="#014035" label="[01:40:35]">&lt;OriansJ`&gt;</a></span><span class="message">damo22: the knight ISA is just one of the ports of the general bootstrap process of stage0</span></div><div class="line" id="014123"><span class="nick" style="color:#2e2a4a"><a href="#014123" label="[01:41:23]">&lt;OriansJ`&gt;</a></span><span class="message">hex0-monitor-&gt;hex0-assembler-&gt;hex1-assembler-&gt;hex2-assembler-&gt;M0-assembler-&gt;cc_x86-&gt;M2-Planet-&gt;...</span></div><div class="line" id="014306"><span class="nick" style="color:#8dd3c7"><a href="#014306" label="[01:43:06]">&lt;damo22&gt;</a></span><span class="message">so stage0 could target knight or x86 or ...</span></div><div class="line" id="014314"><span class="nick" style="color:#2e2a4a"><a href="#014314" label="[01:43:14]">&lt;OriansJ`&gt;</a></span><span class="message">It already does</span></div><div class="line" id="014338"><span class="nick" style="color:#2e2a4a"><a href="#014338" label="[01:43:38]">&lt;OriansJ`&gt;</a></span><span class="message">up next are the armv7l and aarch64 ports</span></div><div class="line" id="014355"><span class="nick" style="color:#2e2a4a"><a href="#014355" label="[01:43:55]">&lt;OriansJ`&gt;</a></span><span class="message">then when I get Power(PC) hardware, I can do that port too</span></div><div class="line" id="014358"><span class="nick" style="color:#8dd3c7"><a href="#014358" label="[01:43:58]">&lt;damo22&gt;</a></span><span class="message">i am curious to know if radare2 could be used to help create new stage0 ports</span></div><div class="line" id="014410"><span class="nick" style="color:#8dd3c7"><a href="#014410" label="[01:44:10]">&lt;damo22&gt;</a></span><span class="message">because they already have asm and disasm</span></div><div class="line" id="014435"><span class="nick" style="color:#8dd3c7"><a href="#014435" label="[01:44:35]">&lt;damo22&gt;</a></span><span class="message">and a virtual ISA</span></div><div class="line" id="014439"><span class="nick" style="color:#2e2a4a"><a href="#014439" label="[01:44:39]">&lt;OriansJ`&gt;</a></span><span class="message">damo22: honestly radare2 has been extremely helpful in the writing of M2-Planet's generated output</span></div><div class="line" id="014603"><span class="nick" style="color:#2e2a4a"><a href="#014603" label="[01:46:03]">&lt;OriansJ`&gt;</a></span><span class="message">(rasm2 -a x86 -b 32 'shr ebx, 2' to figure out the M1 encoding for that instruction)</span></div><div class="line" id="014625"><span class="nick" style="color:#8dd3c7"><a href="#014625" label="[01:46:25]">&lt;damo22&gt;</a></span><span class="message">right</span></div><div class="line" id="014700"><span class="nick" style="color:#2e2a4a"><a href="#014700" label="[01:47:00]">&lt;OriansJ`&gt;</a></span><span class="message">and they even got the byte encoding correct, even though the official ARM documentation got it wrong</span></div><div class="line" id="014717"><span class="nick" style="color:#8dd3c7"><a href="#014717" label="[01:47:17]">&lt;damo22&gt;</a></span><span class="message">:)</span></div><div class="line" id="014804"><span class="nick" style="color:#8dd3c7"><a href="#014804" label="[01:48:04]">&lt;damo22&gt;</a></span><span class="message">i ported radeon atombios instruction set to r2</span></div><div class="line" id="014836"><span class="nick" style="color:#2e2a4a"><a href="#014836" label="[01:48:36]">&lt;OriansJ`&gt;</a></span><span class="message">and it would be amazing to have another disassembler written by someone clearly much better than me support knight</span></div><div class="line" id="015007"><span class="nick" style="color:#2e2a4a"><a href="#015007" label="[01:50:07]">&lt;OriansJ`&gt;</a></span><span class="message">I honestly punted so hard on the identification of strings in High_level_prototypes/disasm.c</span></div><div class="line" id="015024"><span class="nick" style="color:#8dd3c7"><a href="#015024" label="[01:50:24]">&lt;damo22&gt;</a></span><span class="message">is the self-bootstrapping property of M0 something related to the ISA?</span></div><div class="line" id="015106"><span class="nick" style="color:#8dd3c7"><a href="#015106" label="[01:51:06]">&lt;damo22&gt;</a></span><span class="message">like does it depend on the ISA or can it work for any ISA if you port it</span></div><div class="line" id="015142"><span class="nick" style="color:#2e2a4a"><a href="#015142" label="[01:51:42]">&lt;OriansJ`&gt;</a></span><span class="message">M0 is ISA neutral as a specification; provided your ISA can be encoded in bits</span></div><div class="line" id="015219"><span class="nick" style="color:#8dd3c7"><a href="#015219" label="[01:52:19]">&lt;damo22&gt;</a></span><span class="message">wow</span></div><div class="line" id="015222"><span class="nick" style="color:#2e2a4a"><a href="#015222" label="[01:52:22]">&lt;OriansJ`&gt;</a></span><span class="message">for example lets say the bit pattern is 110111 0 1 111 00101</span></div><div class="line" id="015313"><span class="nick" style="color:#8dd3c7"><a href="#015313" label="[01:53:13]">&lt;damo22&gt;</a></span><span class="message">dde5</span></div><div class="line" id="015316"><span class="nick" style="color:#2e2a4a"><a href="#015316" label="[01:53:16]">&lt;OriansJ`&gt;</a></span><span class="message">you can do DEFINE ADD 110111 and DEFINE INDIRECT 0 ... and then simply write ADD INDIRECT MEMORY R7 ...</span></div><div class="line" id="015417"><span class="nick" style="color:#8dd3c7"><a href="#015417" label="[01:54:17]">&lt;damo22&gt;</a></span><span class="message">oh ok</span></div><div class="line" id="015437"><span class="nick" style="color:#2e2a4a"><a href="#015437" label="[01:54:37]">&lt;OriansJ`&gt;</a></span><span class="message">or if you prefer octal or hex or honestly anything else it does support it</span></div><div class="line" id="015524"><span class="nick" style="color:#2e2a4a"><a href="#015524" label="[01:55:24]">&lt;OriansJ`&gt;</a></span><span class="message">basically M1 is just a cross-platform version of M0 <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/M1-macro.c">https://github.com/oriansj/mescc-tools/blob/master/M1-macro.c</a> </span></div><div class="line" id="015607"><span class="nick" style="color:#2e2a4a"><a href="#015607" label="[01:56:07]">&lt;OriansJ`&gt;</a></span><span class="message">thus each architecture is a unique subset of M1 which maps to the instruction encoding of that architecture</span></div><div class="line" id="015645"><span class="nick" style="color:#8dd3c7"><a href="#015645" label="[01:56:45]">&lt;damo22&gt;</a></span><span class="message">genius</span></div><div class="line" id="015723"><span class="nick" style="color:#2e2a4a"><a href="#015723" label="[01:57:23]">&lt;OriansJ`&gt;</a></span><span class="message">Thus far we support hex, octal and binary with alignment padding</span></div><div class="line" id="015823"><span class="nick" style="color:#8dd3c7"><a href="#015823" label="[01:58:23]">&lt;damo22&gt;</a></span><span class="message">where are the defines for all the arches so far</span></div><div class="line" id="020224"><span class="nick" style="color:#2e2a4a"><a href="#020224" label="[02:02:24]">&lt;OriansJ`&gt;</a></span><span class="message">damo22: well we haven't standardized anything beyound knight <a rel="nofollow" href="https://github.com/oriansj/stage0/blob/master/High_level_prototypes/defs">https://github.com/oriansj/stage0/blob/master/High_level_prototypes/defs</a>  because I didn't figure out the optimal encoding for x86 or armv7l</span></div><div class="line" id="020418"><span class="nick" style="color:#8dd3c7"><a href="#020418" label="[02:04:18]">&lt;damo22&gt;</a></span><span class="message">is the encoding for x86 for example, something arbitrary that you decide in advance, or is it the actual op codes of that architecture?</span></div><div class="line" id="020421"><span class="nick" style="color:#2e2a4a"><a href="#020421" label="[02:04:21]">&lt;OriansJ`&gt;</a></span><span class="message">for example when I wrote cc_amd64 in M0; I simply did this: <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/AMD64_bootstrap/cc_amd64.M1">https://github.com/oriansj/mescc-tools/blob/master/AMD64_bootstrap/cc_amd64.M1</a>  but I also use this for M2-Planet as a place holder until I figure out the optimal encoding <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/blob/master/test/common_amd64/amd64_defs.M1">https://github.com/oriansj/M2-Planet/blob/master/test/common_amd64/amd64_defs.M1</a> </span></div><div class="line" id="020503"><span class="nick" style="color:#2e2a4a"><a href="#020503" label="[02:05:03]">&lt;OriansJ`&gt;</a></span><span class="message">damo22: the actually instruction encoding is specific to the architecture but the name and the manner of encoding is entirely arbitrary</span></div><div class="line" id="020528"><span class="nick" style="color:#8dd3c7"><a href="#020528" label="[02:05:28]">&lt;damo22&gt;</a></span><span class="message">ok i will try to read it more</span></div><div class="line" id="020537"><span class="nick" style="color:#2e2a4a"><a href="#020537" label="[02:05:37]">&lt;OriansJ`&gt;</a></span><span class="message">for example one could change the M2-Planet M1 encodings for x86 to better match the architecture</span></div><div class="line" id="020702"><span class="nick" style="color:#2e2a4a"><a href="#020702" label="[02:07:02]">&lt;OriansJ`&gt;</a></span><span class="message">aka instead of LOAD_IMMEDIATE_rdi; they could find a set of DEFINEs such that they could write LOAD_IMMEDIATE RDI and LOAD_IMMEDIATE RSI ... by only adding defines for the register names</span></div><div class="line" id="020813"><span class="nick" style="color:#2e2a4a"><a href="#020813" label="[02:08:13]">&lt;OriansJ`&gt;</a></span><span class="message">I only spent the time required for optimial encoding of knight because I wanted to make it a beautiful example of what each architecture could have</span></div><div class="line" id="020915"><span class="nick" style="color:#2e2a4a"><a href="#020915" label="[02:09:15]">&lt;OriansJ`&gt;</a></span><span class="message">if DEFINES with octal or binary works better; then it is clearly a better choice</span></div><div class="line" id="020951"><span class="nick" style="color:#2e2a4a"><a href="#020951" label="[02:09:51]">&lt;OriansJ`&gt;</a></span><span class="message">for example, I have a half ok version for armv7l <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/blob/master/test/common_armv7l/armv7l_defs.M1">https://github.com/oriansj/M2-Planet/blob/master/test/common_armv7l/armv7l_defs.M1</a> </span></div><div class="line" id="020953"><span class="nick" style="color:#8dd3c7"><a href="#020953" label="[02:09:53]">&lt;damo22&gt;</a></span><span class="message">right i see</span></div><div class="line" id="021105"><span class="nick" style="color:#2e2a4a"><a href="#021105" label="[02:11:05]">&lt;OriansJ`&gt;</a></span><span class="message">So that one could radically change the DEFINEs and update the lines in a file and still get bit for bit identical binaries</span></div><div class="line" id="021113"><span class="nick" style="color:#8dd3c7"><a href="#021113" label="[02:11:13]">&lt;damo22&gt;</a></span><span class="message">it depends on the values of the instruction set</span></div><div class="line" id="021132"><span class="nick" style="color:#8dd3c7"><a href="#021132" label="[02:11:32]">&lt;damo22&gt;</a></span><span class="message">to find a nice encoding</span></div><div class="line" id="021144"><span class="nick" style="color:#2e2a4a"><a href="#021144" label="[02:11:44]">&lt;OriansJ`&gt;</a></span><span class="message">yep, some instruction sets change the encoding of register names depending on the instruction operating on it</span></div><div class="line" id="021221"><span class="nick" style="color:#2e2a4a"><a href="#021221" label="[02:12:21]">&lt;OriansJ`&gt;</a></span><span class="message">which make ADD R0 and SUB R0 impossible; but ADD_R0 and SUB_R0 will still work</span></div><div class="line" id="021308"><span class="nick" style="color:#2e2a4a"><a href="#021308" label="[02:13:08]">&lt;OriansJ`&gt;</a></span><span class="message">So M0 is flexible to fit any programmer's preferred way of interacting with the instruction set, regardless of how insane it is</span></div><div class="line" id="021338"><span class="nick" style="color:#2e2a4a"><a href="#021338" label="[02:13:38]">&lt;OriansJ`&gt;</a></span><span class="message">(I still haven't figured out the correct way to support RISC-V's immediates yet however)</span></div><div class="line" id="022058"><span class="nick" style="color:#8dd3c7"><a href="#022058" label="[02:20:58]">&lt;damo22&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/radareorg/radare2/blob/master/libr/asm/arch/riscv/riscv.h#L299">https://github.com/radareorg/radare2/blob/master/libr/asm/arch/riscv/riscv.h#L299</a> </span></div><div class="line" id="022258"><span class="nick" style="color:#2e2a4a"><a href="#022258" label="[02:22:58]">&lt;OriansJ`&gt;</a></span><span class="message">nice</span></div><div class="line" id="022436"><span class="nick" style="color:#8dd3c7"><a href="#022436" label="[02:24:36]">&lt;damo22&gt;</a></span><span class="message">instruction is actually a macro</span></div><div class="line" id="022630"><span class="nick" style="color:#2e2a4a"><a href="#022630" label="[02:26:30]">&lt;OriansJ`&gt;</a></span><span class="message">the problem is however that M1 only supports contigous immediates</span></div><div class="line" id="022819"><span class="nick" style="color:#2e2a4a"><a href="#022819" label="[02:28:19]">&lt;OriansJ`&gt;</a></span><span class="message">aka %-1 will be 32bits long and ~-1 will be 24bits long on armv7l and !-1 will be exactly 8bits long but there is no way to do ADD %-1 which breaks the %-1 into pieces</span></div><div class="line" id="022935"><span class="nick" style="color:#2e2a4a"><a href="#022935" label="[02:29:35]">&lt;OriansJ`&gt;</a></span><span class="message">we have a similar problem with aarch64</span></div><div class="line" id="023837"><span class="nick" style="color:#2e2a4a"><a href="#023837" label="[02:38:37]">&lt;OriansJ`&gt;</a></span><span class="message">if you look at <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/M1-macro.c#L506">https://github.com/oriansj/mescc-tools/blob/master/M1-macro.c#L506</a>  you'll notice that it simply converts %-1 to FFFFFFFF (or it's octal or binary equivalent)</span></div><div class="line" id="023928"><span class="nick" style="color:#2e2a4a"><a href="#023928" label="[02:39:28]">&lt;OriansJ`&gt;</a></span><span class="message">and deals with the bit/byte order if needed</span></div><div class="line" id="023930"><span class="nick" style="color:#8dd3c7"><a href="#023930" label="[02:39:30]">&lt;damo22&gt;</a></span><span class="message">if the immediate is shorter than 32 bits, does it make sense to truncate it?</span></div><div class="line" id="024024"><span class="nick" style="color:#8dd3c7"><a href="#024024" label="[02:40:24]">&lt;damo22&gt;</a></span><span class="message">is there such a thing as opposite of sign extension?</span></div><div class="line" id="024051"><span class="nick" style="color:#2e2a4a"><a href="#024051" label="[02:40:51]">&lt;OriansJ`&gt;</a></span><span class="message">damo22: well M1 is extremely dumb</span></div><div class="line" id="024052"><span class="nick" style="color:#6b8072"><a href="#024052" label="[02:40:52]">&lt;xentrac&gt;</a></span><span class="message">you can truncate the most significant bits</span></div><div class="line" id="024112"><span class="nick" style="color:#6b8072"><a href="#024112" label="[02:41:12]">&lt;xentrac&gt;</a></span><span class="message">that's reliably the inverse of sign extension</span></div><div class="line" id="024120"><span class="nick" style="color:#2e2a4a"><a href="#024120" label="[02:41:20]">&lt;OriansJ`&gt;</a></span><span class="message">it doesn't even inspect beyound a handful of characters</span></div><div class="line" id="024233"><span class="nick" style="color:#2e2a4a"><a href="#024233" label="[02:42:33]">&lt;OriansJ`&gt;</a></span><span class="message">it knows # and ; are line comments, :labels, %&amp;$@!~ pointers/numbers and DEFINE and that is it</span></div><div class="line" id="024315"><span class="nick" style="color:#8dd3c7"><a href="#024315" label="[02:43:15]">&lt;damo22&gt;</a></span><span class="message">what about introducing IMM16</span></div><div class="line" id="024411"><span class="nick" style="color:#2e2a4a"><a href="#024411" label="[02:44:11]">&lt;OriansJ`&gt;</a></span><span class="message">if you want to write something crazy like DEFINE POP_EAX 58 and then write POP_EAX %42; it will simply output 58 2A000000 for x86</span></div><div class="line" id="024430"><span class="nick" style="color:#2e2a4a"><a href="#024430" label="[02:44:30]">&lt;OriansJ`&gt;</a></span><span class="message">if you write @42, you will get 2A00</span></div><div class="line" id="024441"><span class="nick" style="color:#2e2a4a"><a href="#024441" label="[02:44:41]">&lt;OriansJ`&gt;</a></span><span class="message">if you write !42, you will get 2A</span></div><div class="line" id="024451"><span class="nick" style="color:#6b8072"><a href="#024451" label="[02:44:51]">&lt;xentrac&gt;</a></span><span class="message">(I think i386 is a bit more readable in octal than in hex, which I think I've said before)</span></div><div class="line" id="024457"><span class="nick" style="color:#2e2a4a"><a href="#024457" label="[02:44:57]">&lt;OriansJ`&gt;</a></span><span class="message">if you write ~42, you will get 2A000000</span></div><div class="line" id="024514"><span class="nick" style="color:#6b8072"><a href="#024514" label="[02:45:14]">&lt;xentrac&gt;</a></span><span class="message">it's a very nice design, OriansJ`</span></div><div class="line" id="024528"><span class="nick" style="color:#2e2a4a"><a href="#024528" label="[02:45:28]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: and M1 supports octal but I haven't found the time to write a good x86 defs file yet</span></div><div class="line" id="024551"><span class="nick" style="color:#8dd3c7"><a href="#024551" label="[02:45:51]">&lt;damo22&gt;</a></span><span class="message">what about some prefix that can be applied to operators that specify that the result needs to be sign extended/reduced to some fixed width?</span></div><div class="line" id="024611"><span class="nick" style="color:#8dd3c7"><a href="#024611" label="[02:46:11]">&lt;damo22&gt;</a></span><span class="message">or is that ugly</span></div><div class="line" id="024619"><span class="nick" style="color:#2e2a4a"><a href="#024619" label="[02:46:19]">&lt;OriansJ`&gt;</a></span><span class="message">damo22: the leading character !@~% indicate the fixed width</span></div><div class="line" id="024634"><span class="nick" style="color:#2e2a4a"><a href="#024634" label="[02:46:34]">&lt;OriansJ`&gt;</a></span><span class="message">aka !-1 will be FF</span></div><div class="line" id="024642"><span class="nick" style="color:#6b8072"><a href="#024642" label="[02:46:42]">&lt;xentrac&gt;</a></span><span class="message">for StoneKnifeForth I took the approach of writing just raw machine code sequences in decimal, without trying to write any kind of an assembler</span></div><div class="line" id="024659"><span class="nick" style="color:#6b8072"><a href="#024659" label="[02:46:59]">&lt;xentrac&gt;</a></span><span class="message">I think StoneKnifeForth contains about 30 bytes of machine code as a result</span></div><div class="line" id="024703"><span class="nick" style="color:#6b8072"><a href="#024703" label="[02:47:03]">&lt;xentrac&gt;</a></span><span class="message">in the source</span></div><div class="line" id="024801"><span class="nick" style="color:#2e2a4a"><a href="#024801" label="[02:48:01]">&lt;OriansJ`&gt;</a></span><span class="message">if you want little endian immediates: pass --LittleEndian or if you demand big endian immediates: --BigEndian</span></div><div class="line" id="024814"><span class="nick" style="color:#2e2a4a"><a href="#024814" label="[02:48:14]">&lt;OriansJ`&gt;</a></span><span class="message">if you need alternate bit endianess, it supports that too</span></div><div class="line" id="024828"><span class="nick" style="color:#6b8072"><a href="#024828" label="[02:48:28]">&lt;xentrac&gt;</a></span><span class="message">(I should emphasize that this is not intended as any kind of criticism of the M0 appraoch)</span></div><div class="line" id="024852"><span class="nick" style="color:#2e2a4a"><a href="#024852" label="[02:48:52]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: I appreciate criticism that I can do something about</span></div><div class="line" id="024917"><span class="nick" style="color:#6b8072"><a href="#024917" label="[02:49:17]">&lt;xentrac&gt;</a></span><span class="message">I know you do!</span></div><div class="line" id="024923"><span class="nick" style="color:#2e2a4a"><a href="#024923" label="[02:49:23]">&lt;OriansJ`&gt;</a></span><span class="message">^_^</span></div><div class="line" id="024929"><span class="nick" style="color:#6b8072"><a href="#024929" label="[02:49:29]">&lt;xentrac&gt;</a></span><span class="message">but this isn't any kind of criticism, either actionable or not</span></div><div class="line" id="024944"><span class="nick" style="color:#6b8072"><a href="#024944" label="[02:49:44]">&lt;xentrac&gt;</a></span><span class="message">it's just a different approach: <a rel="nofollow" href="https://github.com/kragen/stoneknifeforth/blob/master/tinyboot1.tbf1#L263">https://github.com/kragen/stoneknifeforth/blob/master/tinyboot1.tbf1#L263</a> </span></div><div class="line" id="025129"><span class="nick" style="color:#2e2a4a"><a href="#025129" label="[02:51:29]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: well M0 does support 'no touchy'</span></div><div class="line" id="025206"><span class="nick" style="color:#2e2a4a"><a href="#025206" label="[02:52:06]">&lt;OriansJ`&gt;</a></span><span class="message">which means you can put anything between '' and M0 will assume you know what you are doing and will pass it through without any alteration in anyway</span></div><div class="line" id="025340"><span class="nick" style="color:#6b8072"><a href="#025340" label="[02:53:40]">&lt;xentrac&gt;</a></span><span class="message">in SKF the things that are written in machine code in the source are syscall, switching stacks, LITERAL, CALL, JZ, jnz, -, &lt;, !, @, c!, part of write(2), stack initialization, and Getchar</span></div><div class="line" id="025350"><span class="nick" style="color:#6b8072"><a href="#025350" label="[02:53:50]">&lt;xentrac&gt;</a></span><span class="message">which was enough to get it to compile itself successfully</span></div><div class="line" id="025356"><span class="nick" style="color:#2e2a4a"><a href="#025356" label="[02:53:56]">&lt;OriansJ`&gt;</a></span><span class="message">so I would have done those lines in M0 as '135 246' and '91 90 89 205 128 135 236 195'</span></div><div class="line" id="025402"><span class="nick" style="color:#6b8072"><a href="#025402" label="[02:54:02]">&lt;xentrac&gt;</a></span><span class="message">right!</span></div><div class="line" id="025436"><span class="nick" style="color:#6b8072"><a href="#025436" label="[02:54:36]">&lt;xentrac&gt;</a></span><span class="message">the idea was that that was enough to compile enough of a programming language to write a compiler for a higher-level language in it, in which I could write a decent assembler</span></div><div class="line" id="025440"><span class="nick" style="color:#6b8072"><a href="#025440" label="[02:54:40]">&lt;xentrac&gt;</a></span><span class="message">I just never did that part</span></div><div class="line" id="025446"><span class="nick" style="color:#6b8072"><a href="#025446" label="[02:54:46]">&lt;xentrac&gt;</a></span><span class="message">:P</span></div><div class="line" id="025508"><span class="nick" style="color:#6b8072"><a href="#025508" label="[02:55:08]">&lt;xentrac&gt;</a></span><span class="message">perhaps the price of getting obsessed with minimality over practicality</span></div><div class="line" id="025518"><span class="nick" style="color:#6b8072"><a href="#025518" label="[02:55:18]">&lt;xentrac&gt;</a></span><span class="message">on my part</span></div><div class="line" id="025539"><span class="nick" style="color:#2e2a4a"><a href="#025539" label="[02:55:39]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: honestly, your FORTH is alot smaller than mine <a rel="nofollow" href="https://github.com/oriansj/stage0/blob/master/stage2/forth.s">https://github.com/oriansj/stage0/blob/master/stage2/forth.s</a> </span></div><div class="line" id="025610"><span class="nick" style="color:#6b8072"><a href="#025610" label="[02:56:10]">&lt;xentrac&gt;</a></span><span class="message">it's smaller than almost everything!  it sacrificed everything on the altar of smallness</span></div><div class="line" id="025633"><span class="nick" style="color:#6b8072"><a href="#025633" label="[02:56:33]">&lt;xentrac&gt;</a></span><span class="message">except the ability to compile itself into a working i386 ELF executable</span></div><div class="line" id="025713"><span class="nick" style="color:#6b8072"><a href="#025713" label="[02:57:13]">&lt;xentrac&gt;</a></span><span class="message">(and other programs that don't need facilities that are too much more complicated)</span></div><div class="line" id="025824"><span class="nick" style="color:#2e2a4a"><a href="#025824" label="[02:58:24]">&lt;OriansJ`&gt;</a></span><span class="message">and I wanted people to understand everything and sacrificed size to get it</span></div><div class="line" id="025914"><span class="nick" style="color:#2e2a4a"><a href="#025914" label="[02:59:14]">&lt;OriansJ`&gt;</a></span><span class="message">M0 weights in at 1504bytes in size</span></div><div class="line" id="025923"><span class="nick" style="color:#6b8072"><a href="#025923" label="[02:59:23]">&lt;xentrac&gt;</a></span><span class="message">of source?</span></div><div class="line" id="025929"><span class="nick" style="color:#6b8072"><a href="#025929" label="[02:59:29]">&lt;xentrac&gt;</a></span><span class="message">that's pretty awesome</span></div><div class="line" id="025930"><span class="nick" style="color:#2e2a4a"><a href="#025930" label="[02:59:30]">&lt;OriansJ`&gt;</a></span><span class="message">binary</span></div><div class="line" id="025940"><span class="nick" style="color:#6b8072"><a href="#025940" label="[02:59:40]">&lt;xentrac&gt;</a></span><span class="message">that's probably smaller htan the SKF binary, I forget</span></div><div class="line" id="030013"><span class="nick" style="color:#2e2a4a"><a href="#030013" label="[03:00:13]">&lt;OriansJ`&gt;</a></span><span class="message">it is 609 lines of source</span></div><div class="line" id="030039"><span class="nick" style="color:#2e2a4a"><a href="#030039" label="[03:00:39]">&lt;OriansJ`&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/stage0/blob/master/stage1/M0-macro.s">https://github.com/oriansj/stage0/blob/master/stage1/M0-macro.s</a> </span></div><div class="line" id="030057"><span class="nick" style="color:#6b8072"><a href="#030057" label="[03:00:57]">&lt;xentrac&gt;</a></span><span class="message">yeah, in retrospect my bet that making SKF super small (in the sense of simple) would more than compensate for any added difficulty in understanding each line of code did not really pay off</span></div><div class="line" id="030137"><span class="nick" style="color:#2e2a4a"><a href="#030137" label="[03:01:37]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: honestly, it still is a rather impressive FORTH</span></div><div class="line" id="030205"><span class="nick" style="color:#2e2a4a"><a href="#030205" label="[03:02:05]">&lt;OriansJ`&gt;</a></span><span class="message">but like every FORTH thus far, none of them really did what they promised with bootstrapping</span></div><div class="line" id="030210"><span class="nick" style="color:#6b8072"><a href="#030210" label="[03:02:10]">&lt;xentrac&gt;</a></span><span class="message">I'm glad you like it!</span></div><div class="line" id="030231"><span class="nick" style="color:#6b8072"><a href="#030231" label="[03:02:31]">&lt;xentrac&gt;</a></span><span class="message">I wonder what the FORTH/ADHD connection is ;)</span></div><div class="line" id="030341"><span class="nick" style="color:#2e2a4a"><a href="#030341" label="[03:03:41]">&lt;OriansJ`&gt;</a></span><span class="message">good question</span></div><div class="line" id="030348"><span class="nick" style="color:#6b8072"><a href="#030348" label="[03:03:48]">&lt;xentrac&gt;</a></span><span class="message">in the same way that Ur-Scheme isn't really a Scheme without user-defined macros, StoneKnifeForth isn't really a Forth without user-defined IMMEDIATE words</span></div><div class="line" id="030425"><span class="nick" style="color:#6b8072"><a href="#030425" label="[03:04:25]">&lt;xentrac&gt;</a></span><span class="message">it's probably more accurate to describe it as a Forth-like language than as a Forth</span></div><div class="line" id="030715"><span class="nick" style="color:#6b8072"><a href="#030715" label="[03:07:15]">&lt;xentrac&gt;</a></span><span class="message">I find it's sort of easier to write things in assembly than in Forth.  I tend to have less bugs in assembly and it feels easier to understand the code</span></div><div class="line" id="030730"><span class="nick" style="color:#6b8072"><a href="#030730" label="[03:07:30]">&lt;xentrac&gt;</a></span><span class="message">it takes a hell of a lot more code in assembly though</span></div><div class="line" id="030831"><span class="nick" style="color:#6b8072"><a href="#030831" label="[03:08:31]">&lt;xentrac&gt;</a></span><span class="message">I suspect that it takes a lot of discipline to use Forth properly, maybe more discipline than I have, because there's a constant temptation to refactor</span></div><div class="line" id="030840"><span class="nick" style="color:#2e2a4a"><a href="#030840" label="[03:08:40]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: actually; it might depend on if what you are trying to do is the FORTH way of doing things</span></div><div class="line" id="030909"><span class="nick" style="color:#6b8072"><a href="#030909" label="[03:09:09]">&lt;xentrac&gt;</a></span><span class="message">I see stage0/forth.s is an indirect-threaded-code Forth</span></div><div class="line" id="030943"><span class="nick" style="color:#6b8072"><a href="#030943" label="[03:09:43]">&lt;xentrac&gt;</a></span><span class="message">what do you mean?</span></div><div class="line" id="030949"><span class="nick" style="color:#2e2a4a"><a href="#030949" label="[03:09:49]">&lt;OriansJ`&gt;</a></span><span class="message">with alot of amazing contributed work <a rel="nofollow" href="https://github.com/oriansj/stage0/blob/master/stage3/inital_library.fs">https://github.com/oriansj/stage0/blob/master/stage3/inital_library.fs</a> </span></div><div class="line" id="031125"><span class="nick" style="color:#2e2a4a"><a href="#031125" label="[03:11:25]">&lt;OriansJ`&gt;</a></span><span class="message">FORTH is a stack centric world and if you want to do something outside of that you need to do one hell of a messy dance to do it</span></div><div class="line" id="031152"><span class="nick" style="color:#6b8072"><a href="#031152" label="[03:11:52]">&lt;xentrac&gt;</a></span><span class="message">oh, hmm, I used to think that</span></div><div class="line" id="031202"><span class="nick" style="color:#6b8072"><a href="#031202" label="[03:12:02]">&lt;xentrac&gt;</a></span><span class="message">and I think that's where a lot of my trouble with Forth came from actually</span></div><div class="line" id="031227"><span class="nick" style="color:#2e2a4a"><a href="#031227" label="[03:12:27]">&lt;OriansJ`&gt;</a></span><span class="message">the state of the stack needs to be known and respected at all times</span></div><div class="line" id="031234"><span class="nick" style="color:#6b8072"><a href="#031234" label="[03:12:34]">&lt;xentrac&gt;</a></span><span class="message">well sort of</span></div><div class="line" id="031250"><span class="nick" style="color:#6b8072"><a href="#031250" label="[03:12:50]">&lt;xentrac&gt;</a></span><span class="message">what it needs to be in practical terms is obvious</span></div><div class="line" id="031259"><span class="nick" style="color:#6b8072"><a href="#031259" label="[03:12:59]">&lt;xentrac&gt;</a></span><span class="message">the state of the stack needs to be obvious at all times</span></div><div class="line" id="031259"><span class="nick" style="color:#2e2a4a"><a href="#031259" label="[03:12:59]">&lt;OriansJ`&gt;</a></span><span class="message">one wrong push or pop and the entire pile of nested utility falls apart</span></div><div class="line" id="031327"><span class="nick" style="color:#6b8072"><a href="#031327" label="[03:13:27]">&lt;xentrac&gt;</a></span><span class="message">right, and that is a kind of bug you can't have in C or Lisp</span></div><div class="line" id="031403"><span class="nick" style="color:#6b8072"><a href="#031403" label="[03:14:03]">&lt;xentrac&gt;</a></span><span class="message">but the particular trap the stack gets you into is that you have three or five or seven things on the stack and so you forget what they are</span></div><div class="line" id="031422"><span class="nick" style="color:#6b8072"><a href="#031422" label="[03:14:22]">&lt;xentrac&gt;</a></span><span class="message">and that happens because you're afraid to use variables</span></div><div class="line" id="031451"><span class="nick" style="color:#6b8072"><a href="#031451" label="[03:14:51]">&lt;xentrac&gt;</a></span><span class="message">and, at least in my case, that happens because you think the variables are global and therefore toxic</span></div><div class="line" id="031542"><span class="nick" style="color:#2e2a4a"><a href="#031542" label="[03:15:42]">&lt;OriansJ`&gt;</a></span><span class="message">that is why FORTH has this: <a rel="nofollow" href="https://github.com/oriansj/stage0/blob/master/stage3/inital_library.fs#L167">https://github.com/oriansj/stage0/blob/master/stage3/inital_library.fs#L167</a> </span></div><div class="line" id="031631"><span class="nick" style="color:#6b8072"><a href="#031631" label="[03:16:31]">&lt;xentrac&gt;</a></span><span class="message">yeah, .s helps you figure out where your program went wrong</span></div><div class="line" id="031632"><span class="nick" style="color:#2e2a4a"><a href="#031632" label="[03:16:32]">&lt;OriansJ`&gt;</a></span><span class="message">reepca did one hell of a good job improving stage0's FORTH and providing such a useful FORTH library</span></div><div class="line" id="031648"><span class="nick" style="color:#6b8072"><a href="#031648" label="[03:16:48]">&lt;xentrac&gt;</a></span><span class="message">but it doesn't help you design the program so you don't have stack bugs</span></div><div class="line" id="031658"><span class="nick" style="color:#2e2a4a"><a href="#031658" label="[03:16:58]">&lt;OriansJ`&gt;</a></span><span class="message">exactly</span></div><div class="line" id="031707"><span class="nick" style="color:#6b8072"><a href="#031707" label="[03:17:07]">&lt;xentrac&gt;</a></span><span class="message">so, a better way to use the stack is to use it just for argument passing, expression evaluation, saving values in the rare cases where you're doing recursion, and maaybe one local variable</span></div><div class="line" id="031735"><span class="nick" style="color:#2e2a4a"><a href="#031735" label="[03:17:35]">&lt;OriansJ`&gt;</a></span><span class="message">and in the end, writing a C compiler in assembly turned out to be easier than writing a solid FORTH</span></div><div class="line" id="031744"><span class="nick" style="color:#6b8072"><a href="#031744" label="[03:17:44]">&lt;xentrac&gt;</a></span><span class="message">basically the stack is the minimal way to add expression evaluation to assembly language</span></div><div class="line" id="031814"><span class="nick" style="color:#6b8072"><a href="#031814" label="[03:18:14]">&lt;xentrac&gt;</a></span><span class="message">but I still find Forth more bug-prone than assembly, and I suspect that's from lack of experience</span></div><div class="line" id="031818"><span class="nick" style="color:#2e2a4a"><a href="#031818" label="[03:18:18]">&lt;OriansJ`&gt;</a></span><span class="message">actually the stack is where you save locals that you don't want to stomp over</span></div><div class="line" id="031852"><span class="nick" style="color:#6b8072"><a href="#031852" label="[03:18:52]">&lt;xentrac&gt;</a></span><span class="message">yeah, don't do that</span></div><div class="line" id="031900"><span class="nick" style="color:#6b8072"><a href="#031900" label="[03:19:00]">&lt;xentrac&gt;</a></span><span class="message">except in the case of recursion</span></div><div class="line" id="031907"><span class="nick" style="color:#6b8072"><a href="#031907" label="[03:19:07]">&lt;xentrac&gt;</a></span><span class="message">your Forth programs will be full of stack-effect bugs</span></div><div class="line" id="031943"><span class="nick" style="color:#6b8072"><a href="#031943" label="[03:19:43]">&lt;xentrac&gt;</a></span><span class="message">use normal variables</span></div><div class="line" id="031953"><span class="nick" style="color:#6b8072"><a href="#031953" label="[03:19:53]">&lt;xentrac&gt;</a></span><span class="message">don't think of them as C global variables, think of them as C static variables</span></div><div class="line" id="031957"><span class="nick" style="color:#2e2a4a"><a href="#031957" label="[03:19:57]">&lt;OriansJ`&gt;</a></span><span class="message">such a nightmare to solve correctly on a FORTH you wrote yourself on an architecture that no other FORTH supports</span></div><div class="line" id="032019"><span class="nick" style="color:#6b8072"><a href="#032019" label="[03:20:19]">&lt;xentrac&gt;</a></span><span class="message">heh</span></div><div class="line" id="032041"><span class="nick" style="color:#6b8072"><a href="#032041" label="[03:20:41]">&lt;xentrac&gt;</a></span><span class="message">did you get an interactive REPL running, btw? maybe I should try running it and find out</span></div><div class="line" id="032102"><span class="nick" style="color:#2e2a4a"><a href="#032102" label="[03:21:02]">&lt;OriansJ`&gt;</a></span><span class="message">because it is more important that the steps in stage0 be doable on arbitrary new hardware than for me to do it slightly faster once</span></div><div class="line" id="032151"><span class="nick" style="color:#2e2a4a"><a href="#032151" label="[03:21:51]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: absolutely</span></div><div class="line" id="032158"><span class="nick" style="color:#6b8072"><a href="#032158" label="[03:21:58]">&lt;xentrac&gt;</a></span><span class="message">did that help?</span></div><div class="line" id="032217"><span class="nick" style="color:#2e2a4a"><a href="#032217" label="[03:22:17]">&lt;OriansJ`&gt;</a></span><span class="message">./bin/vm --rom roms/forth --memory 1M --tape_01 stage3/intial_library.fs</span></div><div class="line" id="032313"><span class="nick" style="color:#2e2a4a"><a href="#032313" label="[03:23:13]">&lt;OriansJ`&gt;</a></span><span class="message">it enabled some solid testing of the FORTH but there was always this fear in the back of my mind about edge case bugs that I hadn't spotted yet</span></div><div class="line" id="032708"><span class="nick" style="color:#2e2a4a"><a href="#032708" label="[03:27:08]">&lt;OriansJ`&gt;</a></span><span class="message">in the end, C compilers are so much easier to test and build in assembly</span></div><div class="line" id="032822"><span class="nick" style="color:#2e2a4a"><a href="#032822" label="[03:28:22]">&lt;OriansJ`&gt;</a></span><span class="message">I spent longer writing that FORTH than I spent writing cc_x86</span></div><div class="line" id="033421"><span class="nick" style="color:#2e2a4a"><a href="#033421" label="[03:34:21]">&lt;OriansJ`&gt;</a></span><span class="message">So now when someone says bootstrapping should be done in FORTH or Lisp, I roll my eyes and say &quot;Show me one&quot;; I've done them all and from experience FORTH was the worst of the 3, Lisp ends up being much easier in C and C ends up only requiring a rather simple Macro assembly and a trivial debug_list function that you can write in 5 minutes</span></div><div class="line" id="033508"><span class="nick" style="color:#2e2a4a"><a href="#033508" label="[03:35:08]">&lt;OriansJ`&gt;</a></span><span class="message">I even leave it in my cc_*s because it is essential if you wish to extend that C compiler</span></div><div class="line" id="033957"><span class="nick" style="color:#2e2a4a"><a href="#033957" label="[03:39:57]">&lt;OriansJ`&gt;</a></span><span class="message">There is just one small problem with that path though</span></div><div class="line" id="034018"><span class="nick" style="color:#2e2a4a"><a href="#034018" label="[03:40:18]">&lt;OriansJ`&gt;</a></span><span class="message">No scriptable shell to execute the steps</span></div><div class="line" id="034115"><span class="nick" style="color:#2e2a4a"><a href="#034115" label="[03:41:15]">&lt;OriansJ`&gt;</a></span><span class="message">which is why I made this abomination: <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/kaem.c">https://github.com/oriansj/mescc-tools/blob/master/kaem.c</a> </span></div><div class="line" id="035023"><span class="nick" style="color:#6b8072"><a href="#035023" label="[03:50:23]">&lt;xentrac&gt;</a></span><span class="message">haha</span></div><div class="line" id="035026"><span class="nick" style="color:#2e2a4a"><a href="#035026" label="[03:50:26]">&lt;OriansJ`&gt;</a></span><span class="message">I still need to find the time to write it in assembly, M1 and hex0; so that one can use it as the init on a posix to build everything from source with no external dependencies</span></div><div class="line" id="035117"><span class="nick" style="color:#6b8072"><a href="#035117" label="[03:51:17]">&lt;xentrac&gt;</a></span><span class="message">it's still better than command.com</span></div><div class="line" id="035129"><span class="nick" style="color:#2e2a4a"><a href="#035129" label="[03:51:29]">&lt;OriansJ`&gt;</a></span><span class="message">makes for easy to audit bootstraps too: <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/kaem.run">https://github.com/oriansj/mescc-tools/blob/master/kaem.run</a> </span></div><div class="line" id="035209"><span class="nick" style="color:#2e2a4a"><a href="#035209" label="[03:52:09]">&lt;OriansJ`&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-seed/blob/master/kaem.run">https://github.com/oriansj/mescc-tools-seed/blob/master/kaem.run</a> </span></div><div class="line" id="035212"><span class="nick" style="color:#6b8072"><a href="#035212" label="[03:52:12]">&lt;xentrac&gt;</a></span><span class="message">I mean basically kaem is just the minimal scripting of the Unix kernel needed to launch programs, plus a bit of syntax</span></div><div class="line" id="035245"><span class="nick" style="color:#2e2a4a"><a href="#035245" label="[03:52:45]">&lt;OriansJ`&gt;</a></span><span class="message">and path resolution</span></div><div class="line" id="035403"><span class="nick" style="color:#2e2a4a"><a href="#035403" label="[03:54:03]">&lt;OriansJ`&gt;</a></span><span class="message">and when compiled by M2-Planet it is a 16,246 byte binary (that I could probably get down to 1/6th that in assembly)</span></div><div class="line" id="035646"><span class="nick" style="color:#2e2a4a"><a href="#035646" label="[03:56:46]">&lt;OriansJ`&gt;</a></span><span class="message">and the one thing that surprised me is that cat is essential to all bootstraps (if you don't want insane duplication)</span></div><div class="line" id="035745"><span class="nick" style="color:#2e2a4a"><a href="#035745" label="[03:57:45]">&lt;OriansJ`&gt;</a></span><span class="message">so much that I hand wrote a variant of cat that removes the need for &gt; filename in a script such that the shell would not have to support that construct</span></div><div class="line" id="035751"><span class="nick" style="color:#2e2a4a"><a href="#035751" label="[03:57:51]">&lt;OriansJ`&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-seed/blob/master/catm_x86.hex0">https://github.com/oriansj/mescc-tools-seed/blob/master/catm_x86.hex0</a> </span></div><div class="line" id="035823"><span class="nick" style="color:#2e2a4a"><a href="#035823" label="[03:58:23]">&lt;OriansJ`&gt;</a></span><span class="message">basically it is limited by the read/write bandwidth of the posix kernel it runs on</span></div><div class="line" id="040039"><span class="nick" style="color:#2e2a4a"><a href="#040039" label="[04:00:39]">&lt;OriansJ`&gt;</a></span><span class="message">a single 14 instruction loop that pulls upto 1MB of data per cycle</span></div><div class="line" id="040056"><span class="nick" style="color:#6b8072"><a href="#040056" label="[04:00:56]">&lt;xentrac&gt;</a></span><span class="message">heh</span></div><div class="line" id="040135"><span class="nick" style="color:#2e2a4a"><a href="#040135" label="[04:01:35]">&lt;OriansJ`&gt;</a></span><span class="message">I could have easily changed it to 1GB but I didn't want it to run into problems for posix systems with less than 1GB of memory</span></div><div class="line" id="040216"><span class="nick" style="color:#2e2a4a"><a href="#040216" label="[04:02:16]">&lt;OriansJ`&gt;</a></span><span class="message">or if you prefer the NASM version: <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/x86_bootstrap/catm_x86.S">https://github.com/oriansj/mescc-tools/blob/master/x86_bootstrap/catm_x86.S</a> </span></div><div class="line" id="040334"><span class="nick" style="color:#2e2a4a"><a href="#040334" label="[04:03:34]">&lt;OriansJ`&gt;</a></span><span class="message">it ends up being faster than GNU or BSD cat</span></div><div class="line" id="040334"><span class="nick" style="color:#6b8072"><a href="#040334" label="[04:03:34]">&lt;xentrac&gt;</a></span><span class="message">it is surprising that cat is essential</span></div><div class="line" id="040352"><span class="nick" style="color:#6b8072"><a href="#040352" label="[04:03:52]">&lt;xentrac&gt;</a></span><span class="message">that's even more surprsing</span></div><div class="line" id="040354"><span class="nick" style="color:#6b8072"><a href="#040354" label="[04:03:54]">&lt;xentrac&gt;</a></span><span class="message">i</span></div><div class="line" id="040443"><span class="nick" style="color:#6b8072"><a href="#040443" label="[04:04:43]">&lt;xentrac&gt;</a></span><span class="message">Ur-Scheme ended up being only about 1600 lines of Scheme, most of which is really assembly in Scheme syntax</span></div><div class="line" id="040526"><span class="nick" style="color:#2e2a4a"><a href="#040526" label="[04:05:26]">&lt;OriansJ`&gt;</a></span><span class="message">oh and even as a valid elf it is only 215bytes big</span></div><div class="line" id="040532"><span class="nick" style="color:#6b8072"><a href="#040532" label="[04:05:32]">&lt;xentrac&gt;</a></span><span class="message">nice</span></div><div class="line" id="040601"><span class="nick" style="color:#6b8072"><a href="#040601" label="[04:06:01]">&lt;xentrac&gt;</a></span><span class="message">of course Ur-Scheme would add to the Scheme bootstrapping problem rather than help solve it</span></div><div class="line" id="040622"><span class="nick" style="color:#6b8072"><a href="#040622" label="[04:06:22]">&lt;xentrac&gt;</a></span><span class="message">it's kind of amazing that ELF is almost 200 bytes of overhead</span></div><div class="line" id="040640"><span class="nick" style="color:#6b8072"><a href="#040640" label="[04:06:40]">&lt;xentrac&gt;</a></span><span class="message">SKF generates a stripped-down ELF based on the breadbox stuff</span></div><div class="line" id="040741"><span class="nick" style="color:#6b8072"><a href="#040741" label="[04:07:41]">&lt;xentrac&gt;</a></span><span class="message">the ELF overhead in httpdito is actually almost 1000 bytes when built with gas</span></div><div class="line" id="040742"><span class="nick" style="color:#2e2a4a"><a href="#040742" label="[04:07:42]">&lt;OriansJ`&gt;</a></span><span class="message">I simply handwrote custom elf-headers in hex</span></div><div class="line" id="040804"><span class="nick" style="color:#2e2a4a"><a href="#040804" label="[04:08:04]">&lt;OriansJ`&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/tree/master/elf_headers">https://github.com/oriansj/mescc-tools/tree/master/elf_headers</a> </span></div><div class="line" id="040805"><span class="nick" style="color:#6b8072"><a href="#040805" label="[04:08:05]">&lt;xentrac&gt;</a></span><span class="message">even with objcopy -S -R .note.gnu.build-id</span></div><div class="line" id="040816"><span class="nick" style="color:#2e2a4a"><a href="#040816" label="[04:08:16]">&lt;OriansJ`&gt;</a></span><span class="message">and then wrote <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/blood-elf.c">https://github.com/oriansj/mescc-tools/blob/master/blood-elf.c</a>  to generate the dwarf stubs</span></div><div class="line" id="040820"><span class="nick" style="color:#6b8072"><a href="#040820" label="[04:08:20]">&lt;xentrac&gt;</a></span><span class="message">yeah, that's what I did for SKF, except I did them in decimal instead</span></div><div class="line" id="040839"><span class="nick" style="color:#6b8072"><a href="#040839" label="[04:08:39]">&lt;xentrac&gt;</a></span><span class="message">but I did it in a half-assed way and you did the hell out of it :)</span></div><div class="line" id="040856"><span class="nick" style="color:#6b8072"><a href="#040856" label="[04:08:56]">&lt;xentrac&gt;</a></span><span class="message">haha, I just understood the name of &quot;blood-elf.c&quot;</span></div><div class="line" id="040905"><span class="nick" style="color:#6b8072"><a href="#040905" label="[04:09:05]">&lt;xentrac&gt;</a></span><span class="message">it cuts dwarf down to stubs</span></div><div class="line" id="040944"><span class="nick" style="color:#2e2a4a"><a href="#040944" label="[04:09:44]">&lt;OriansJ`&gt;</a></span><span class="message">I had to support the binaries MesCC was generating and janneke did an amazing job figuring out the fiddly bits in ELF I didn't know about</span></div><div class="line" id="041025"><span class="nick" style="color:#2e2a4a"><a href="#041025" label="[04:10:25]">&lt;OriansJ`&gt;</a></span><span class="message">So he gave me a rough sketch and 20 minutes later we had everything we needed</span></div><div class="line" id="041027"><span class="nick" style="color:#6b8072"><a href="#041027" label="[04:10:27]">&lt;xentrac&gt;</a></span><span class="message">:D</span></div><div class="line" id="041048"><span class="nick" style="color:#2e2a4a"><a href="#041048" label="[04:10:48]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: ^_^</span></div><div class="line" id="041124"><span class="nick" style="color:#2e2a4a"><a href="#041124" label="[04:11:24]">&lt;OriansJ`&gt;</a></span><span class="message">in fact MesCC introduced alot of really interesting ways of doing things like: %ELF_end&gt;ELF_base</span></div><div class="line" id="041151"><span class="nick" style="color:#2e2a4a"><a href="#041151" label="[04:11:51]">&lt;OriansJ`&gt;</a></span><span class="message">straight up measure the length between 2 labels</span></div><div class="line" id="041234"><span class="nick" style="color:#2e2a4a"><a href="#041234" label="[04:12:34]">&lt;OriansJ`&gt;</a></span><span class="message">janneke needed it and wrote the first version and then I later made it generic</span></div><div class="line" id="041314"><span class="nick" style="color:#2e2a4a"><a href="#041314" label="[04:13:14]">&lt;OriansJ`&gt;</a></span><span class="message">It is amazing what can be done when other people help you explore thoughts you previously would have never considered</span></div><div class="line" id="041334"><span class="nick" style="color:#6b8072"><a href="#041334" label="[04:13:34]">&lt;xentrac&gt;</a></span><span class="message">%a&gt;b?</span></div><div class="line" id="041411"><span class="nick" style="color:#6b8072"><a href="#041411" label="[04:14:11]">&lt;xentrac&gt;</a></span><span class="message">is that like %(a-b)?</span></div><div class="line" id="041510"><span class="nick" style="color:#2e2a4a"><a href="#041510" label="[04:15:10]">&lt;OriansJ`&gt;</a></span><span class="message">% means write a 32bit relative number, a is the base label name, &gt; indicates that we want the relative difference in addresses and b is the label name for the target</span></div><div class="line" id="041519"><span class="nick" style="color:#2e2a4a"><a href="#041519" label="[04:15:19]">&lt;OriansJ`&gt;</a></span><span class="message">in hex2</span></div><div class="line" id="041528"><span class="nick" style="color:#6b8072"><a href="#041528" label="[04:15:28]">&lt;xentrac&gt;</a></span><span class="message">right, that's what I was understanding</span></div><div class="line" id="041536"><span class="nick" style="color:#6b8072"><a href="#041536" label="[04:15:36]">&lt;xentrac&gt;</a></span><span class="message">yeah, it's wonderful when other people help you think :)</span></div><div class="line" id="041637"><span class="nick" style="color:#2e2a4a"><a href="#041637" label="[04:16:37]">&lt;OriansJ`&gt;</a></span><span class="message">It was janneke's success in Lisp and my pain of writing one in assembly that finally convinced me that Lisp is much easier to do in a C than assembly or below</span></div><div class="line" id="042008"><span class="nick" style="color:#2e2a4a"><a href="#042008" label="[04:20:08]">&lt;OriansJ`&gt;</a></span><span class="message">If push came to shove, I probably could shoe-horn the current mes-m2 into M2 buildable state in a weekend but honestly I want to make mes-m2 a golden standard for an easy to understand lisp</span></div><div class="line" id="042109"><span class="nick" style="color:#2e2a4a"><a href="#042109" label="[04:21:09]">&lt;OriansJ`&gt;</a></span><span class="message">I want every feature of it so well understood that for generations collage professors will pull up it's source code and say &quot;read this and you will understand how a modern lisp works&quot;</span></div><div class="line" id="042127"><span class="nick" style="color:#6b8072"><a href="#042127" label="[04:21:27]">&lt;xentrac&gt;</a></span><span class="message">that would be awesome!</span></div><div class="line" id="042213"><span class="nick" style="color:#2e2a4a"><a href="#042213" label="[04:22:13]">&lt;OriansJ`&gt;</a></span><span class="message">I however still need to figure out a bunch of tiny details that janneke wrapped into it.</span></div><div class="line" id="042301"><span class="nick" style="color:#2e2a4a"><a href="#042301" label="[04:23:01]">&lt;OriansJ`&gt;</a></span><span class="message">for example, how macros tie into the variable definition format (as I wish to simply the variables from a hash table to a simple linked list)</span></div><div class="line" id="042339"><span class="nick" style="color:#2e2a4a"><a href="#042339" label="[04:23:39]">&lt;OriansJ`&gt;</a></span><span class="message">brb</span></div><div class="line" id="042340"><span class="nick" style="color:#6b8072"><a href="#042340" label="[04:23:40]">&lt;xentrac&gt;</a></span><span class="message">have you seen Neel Krishnaswami's micro-lambda-calculus compiler?</span></div><div class="line" id="042439"><span class="nick" style="color:#6b8072"><a href="#042439" label="[04:24:39]">&lt;xentrac&gt;</a></span><span class="message"> <a rel="nofollow" href="http://canonical.org/~kragen/sw/dev3/neelcompiler.ml">http://canonical.org/~kragen/sw/dev3/neelcompiler.ml</a> </span></div><div class="line" id="044153"><span class="nick" style="color:#6b8072"><a href="#044153" label="[04:41:53]">&lt;xentrac&gt;</a></span><span class="message">I find compilery stuff a lot easier to write in OCaml than in C or Lisp or especially assembly</span></div><div class="line" id="044408"><span class="nick" style="color:#6b8072"><a href="#044408" label="[04:44:08]">&lt;xentrac&gt;</a></span><span class="message">or Forth for that matter</span></div><div class="line" id="044428"><span class="nick" style="color:#6b8072"><a href="#044428" label="[04:44:28]">&lt;xentrac&gt;</a></span><span class="message">I haven't managed to write a tiny-ML compiler or interpreter in any of those languages though</span></div><div class="line" id="044548"><span class="nick" style="color:#2e2a4a"><a href="#044548" label="[04:45:48]">&lt;OriansJ`&gt;</a></span><span class="message">no but that is neat</span></div><div class="line" id="044734"><span class="nick" style="color:#2e2a4a"><a href="#044734" label="[04:47:34]">&lt;OriansJ`&gt;</a></span><span class="message">I could probably translate that into C but the runtime dependency on llvm is kinda big for a bootstrap</span></div><div class="line" id="044743"><span class="nick" style="color:#6b8072"><a href="#044743" label="[04:47:43]">&lt;xentrac&gt;</a></span><span class="message">that doesn't depend on LLVM</span></div><div class="line" id="044759"><span class="nick" style="color:#6b8072"><a href="#044759" label="[04:47:59]">&lt;xentrac&gt;</a></span><span class="message">Neel just posted it in a thread about another tiny OCaml compiler that did depend on LLVM</span></div><div class="line" id="044844"><span class="nick" style="color:#6b8072"><a href="#044844" label="[04:48:44]">&lt;xentrac&gt;</a></span><span class="message">as you can see it generates a simple textual quasi-assembly language for a simple register machine, which happens not to be the LLVM virtual machine</span></div><div class="line" id="044909"><span class="nick" style="color:#8dd3c7"><a href="#044909" label="[04:49:09]">&lt;damo22&gt;</a></span><span class="message">i feel that what you guys are doing is going to be revolutionary for seeding an OS from scratch</span></div><div class="line" id="044943"><span class="nick" style="color:#6b8072"><a href="#044943" label="[04:49:43]">&lt;xentrac&gt;</a></span><span class="message">it's definitely pretty straightforward to translate into C or assembly, if you handwave the GC at least, although doing it in C might involve a certain amount of void*</span></div><div class="line" id="045023"><span class="nick" style="color:#8dd3c7"><a href="#045023" label="[04:50:23]">&lt;damo22&gt;</a></span><span class="message">what id like to see is a hardware implementation, so you can buy off the shelf, a tool for bootstrapping any compiler</span></div><div class="line" id="045123"><span class="nick" style="color:#2e2a4a"><a href="#045123" label="[04:51:23]">&lt;OriansJ`&gt;</a></span><span class="message">damo22: at which level?</span></div><div class="line" id="045133"><span class="nick" style="color:#6b8072"><a href="#045133" label="[04:51:33]">&lt;xentrac&gt;</a></span><span class="message">the 'a in the declaration of exp is a type variable, like a C++ template parameter, so you can have an expr exp or an exp of some other kind, although in this case it's only explicitly instantiated with expr</span></div><div class="line" id="045147"><span class="nick" style="color:#2e2a4a"><a href="#045147" label="[04:51:47]">&lt;OriansJ`&gt;</a></span><span class="message">libresilicon, FPGA, TTL, individual transistors or relays?</span></div><div class="line" id="045202"><span class="nick" style="color:#8dd3c7"><a href="#045202" label="[04:52:02]">&lt;damo22&gt;</a></span><span class="message">i dont know much about hw</span></div><div class="line" id="045207"><span class="nick" style="color:#6b8072"><a href="#045207" label="[04:52:07]">&lt;xentrac&gt;</a></span><span class="message">damo22: I agree</span></div><div class="line" id="045254"><span class="nick" style="color:#2e2a4a"><a href="#045254" label="[04:52:54]">&lt;OriansJ`&gt;</a></span><span class="message">well one can already buy an FPGA and make an i386 core run on it</span></div><div class="line" id="045309"><span class="nick" style="color:#6b8072"><a href="#045309" label="[04:53:09]">&lt;xentrac&gt;</a></span><span class="message">has someone done that?  the i386 is pretty big</span></div><div class="line" id="045319"><span class="nick" style="color:#6b8072"><a href="#045319" label="[04:53:19]">&lt;xentrac&gt;</a></span><span class="message">and I didn't know there was an opencores implementation yet</span></div><div class="line" id="045336"><span class="nick" style="color:#2e2a4a"><a href="#045336" label="[04:53:36]">&lt;OriansJ`&gt;</a></span><span class="message">iCE40 FPGAs even have a RISC-V cores availabe and a Free software stack</span></div><div class="line" id="045359"><span class="nick" style="color:#2e2a4a"><a href="#045359" label="[04:53:59]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: yeah, we found it a yearish back</span></div><div class="line" id="045432"><span class="nick" style="color:#2e2a4a"><a href="#045432" label="[04:54:32]">&lt;OriansJ`&gt;</a></span><span class="message">someone interested in helping in hardware showed up and we asked if they would get it ported to the iCE40 family</span></div><div class="line" id="045448"><span class="nick" style="color:#2e2a4a"><a href="#045448" label="[04:54:48]">&lt;OriansJ`&gt;</a></span><span class="message">they vanished and we haven't heard a thing from them since</span></div><div class="line" id="045504"><span class="nick" style="color:#6b8072"><a href="#045504" label="[04:55:04]">&lt;xentrac&gt;</a></span><span class="message">holy crap, RISC-V fits in an ICE40?</span></div><div class="line" id="045538"><span class="nick" style="color:#2e2a4a"><a href="#045538" label="[04:55:38]">&lt;OriansJ`&gt;</a></span><span class="message">yeah, just give me a minute to find it again</span></div><div class="line" id="045711"><span class="nick" style="color:#6b8072"><a href="#045711" label="[04:57:11]">&lt;xentrac&gt;</a></span><span class="message">Calculus Vaporis should fit in an iCE40 with no trouble, since it has about 1000 gates in a bit-parallel implementation, but it's probably a bit too constrained</span></div><div class="line" id="045724"><span class="nick" style="color:#6b8072"><a href="#045724" label="[04:57:24]">&lt;xentrac&gt;</a></span><span class="message">the J1A is an entirely practical CPU to put in an iCE40 though</span></div><div class="line" id="045905"><span class="nick" style="color:#8dd3c7"><a href="#045905" label="[04:59:05]">&lt;damo22&gt;</a></span><span class="message">what about a tool that has a USB port and takes source code in one stream and outputs a binary stream that is the compiled version</span></div><div class="line" id="045939"><span class="nick" style="color:#2e2a4a"><a href="#045939" label="[04:59:39]">&lt;OriansJ`&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/cliffordwolf/picorv32">https://github.com/cliffordwolf/picorv32</a>  761 LUTs</span></div><div class="line" id="050023"><span class="nick" style="color:#2e2a4a"><a href="#050023" label="[05:00:23]">&lt;OriansJ`&gt;</a></span><span class="message">917 LUTs for regular and 2019 LUTs for the set required for Fedora</span></div><div class="line" id="050056"><span class="nick" style="color:#2e2a4a"><a href="#050056" label="[05:00:56]">&lt;OriansJ`&gt;</a></span><span class="message">and another one <a rel="nofollow" href="https://github.com/grahamedgecombe/icicle">https://github.com/grahamedgecombe/icicle</a> </span></div><div class="line" id="050109"><span class="nick" style="color:#6b8072"><a href="#050109" label="[05:01:09]">&lt;xentrac&gt;</a></span><span class="message">damo22: so the thing is that for the trusted box to increase your assurance, it needs to prevent attacks under some security model</span></div><div class="line" id="050225"><span class="nick" style="color:#6b8072"><a href="#050225" label="[05:02:25]">&lt;xentrac&gt;</a></span><span class="message">damo22: if your threat model includes &quot;attacker has control over my laptop&quot; then compiling the code inside a USB stick plugged into the laptop doesn't help; the attacker can just replace the correct compiled version output by the USB stick with a broken or backdoored version</span></div><div class="line" id="050252"><span class="nick" style="color:#6b8072"><a href="#050252" label="[05:02:52]">&lt;xentrac&gt;</a></span><span class="message">damo22: if your threat model, on the other hand, does not include &quot;attacker has control over my laptop&quot;, then you might as well just compile the code on the laptop</span></div><div class="line" id="050256"><span class="nick" style="color:#8dd3c7"><a href="#050256" label="[05:02:56]">&lt;damo22&gt;</a></span><span class="message">ah yes</span></div><div class="line" id="050258"><span class="nick" style="color:#6b8072"><a href="#050258" label="[05:02:58]">&lt;xentrac&gt;</a></span><span class="message">adding the USB stick doesn't help either way</span></div><div class="line" id="050316"><span class="nick" style="color:#8dd3c7"><a href="#050316" label="[05:03:16]">&lt;damo22&gt;</a></span><span class="message">what about a boot image</span></div><div class="line" id="050328"><span class="nick" style="color:#8dd3c7"><a href="#050328" label="[05:03:28]">&lt;damo22&gt;</a></span><span class="message">like a coreboot payload</span></div><div class="line" id="050355"><span class="nick" style="color:#8dd3c7"><a href="#050355" label="[05:03:55]">&lt;damo22&gt;</a></span><span class="message">that has a minimal environment for accepting source and compiling it</span></div><div class="line" id="050446"><span class="nick" style="color:#8dd3c7"><a href="#050446" label="[05:04:46]">&lt;damo22&gt;</a></span><span class="message">a coreboot payload is just a standalone ELF binary</span></div><div class="line" id="050447"><span class="nick" style="color:#6b8072"><a href="#050447" label="[05:04:47]">&lt;xentrac&gt;</a></span><span class="message">replacing your BIOS with a BIOS that is known not to have backdoors and believed not to have security holes does indeed protect against threat models including &quot;attacker has corrupted BIOS&quot; and &quot;attacker knows unpatched BIOS vulnerabilities&quot;</span></div><div class="line" id="050541"><span class="nick" style="color:#6b8072"><a href="#050541" label="[05:05:41]">&lt;xentrac&gt;</a></span><span class="message">and then you could indeed use the laptop's keyboard and screen to look at the code you're compiling, assuming the rest of the hardware that can interfere with that is also trustworthy</span></div><div class="line" id="050556"><span class="nick" style="color:#8dd3c7"><a href="#050556" label="[05:05:56]">&lt;damo22&gt;</a></span><span class="message">yeah</span></div><div class="line" id="050622"><span class="nick" style="color:#8dd3c7"><a href="#050622" label="[05:06:22]">&lt;damo22&gt;</a></span><span class="message">or a kexec kernel image</span></div><div class="line" id="050649"><span class="nick" style="color:#6b8072"><a href="#050649" label="[05:06:49]">&lt;xentrac&gt;</a></span><span class="message">OriansJ`: the PicoRV32 repo seems to talk about running it on Xilinx FPGAs only, not the iCE40</span></div><div class="line" id="050742"><span class="nick" style="color:#6b8072"><a href="#050742" label="[05:07:42]">&lt;xentrac&gt;</a></span><span class="message">the kexec case involves trusting the pre-kexec kernel as well</span></div><div class="line" id="050752"><span class="nick" style="color:#8dd3c7"><a href="#050752" label="[05:07:52]">&lt;damo22&gt;</a></span><span class="message">ok</span></div><div class="line" id="050806"><span class="nick" style="color:#8dd3c7"><a href="#050806" label="[05:08:06]">&lt;damo22&gt;</a></span><span class="message">the coreboot payload is probably more suitable</span></div><div class="line" id="050810"><span class="nick" style="color:#6b8072"><a href="#050810" label="[05:08:10]">&lt;xentrac&gt;</a></span><span class="message">that is, if an attacker has backdoored your pre-kexec kernel, they can leverage that into a successful attack on the post-kexec kernel as well</span></div><div class="line" id="050829"><span class="nick" style="color:#8dd3c7"><a href="#050829" label="[05:08:29]">&lt;damo22&gt;</a></span><span class="message">you could run it as a secondary payload</span></div><div class="line" id="050845"><span class="nick" style="color:#8dd3c7"><a href="#050845" label="[05:08:45]">&lt;damo22&gt;</a></span><span class="message">so if your main machine has a huge disaster</span></div><div class="line" id="050848"><span class="nick" style="color:#6b8072"><a href="#050848" label="[05:08:48]">&lt;xentrac&gt;</a></span><span class="message">OriansJ`: the Icicle repo looks like the real deal though.  that's awesome</span></div><div class="line" id="050856"><span class="nick" style="color:#8dd3c7"><a href="#050856" label="[05:08:56]">&lt;damo22&gt;</a></span><span class="message">you can boot into the rescue bootstrapper</span></div><div class="line" id="051011"><span class="nick" style="color:#6b8072"><a href="#051011" label="[05:10:11]">&lt;xentrac&gt;</a></span><span class="message">damo22: that's an interesting idea!  more as a system recovery tool than as a way to get trustworthy reproducible builds</span></div><div class="line" id="051023"><span class="nick" style="color:#8dd3c7"><a href="#051023" label="[05:10:23]">&lt;damo22&gt;</a></span><span class="message">the point being, you can boot from zero and verify the source code, then save a binary gcc toolchain to disk</span></div><div class="line" id="051228"><span class="nick" style="color:#8dd3c7"><a href="#051228" label="[05:12:28]">&lt;damo22&gt;</a></span><span class="message">well it could function as both</span></div><div class="line" id="051324"><span class="nick" style="color:#6b8072"><a href="#051324" label="[05:13:24]">&lt;xentrac&gt;</a></span><span class="message">so the difficulty with a dual-payload boot ROM on modern hardware is that once you boot, say, Linux, it is possible for Linux to rewrite the boot ROM</span></div><div class="line" id="051342"><span class="nick" style="color:#6b8072"><a href="#051342" label="[05:13:42]">&lt;xentrac&gt;</a></span><span class="message">because it's not a ROM; it's Flash</span></div><div class="line" id="051405"><span class="nick" style="color:#8dd3c7"><a href="#051405" label="[05:14:05]">&lt;damo22&gt;</a></span><span class="message">i know, but unless you have iomem=relaxed option, the SPI is locked down in most cases</span></div><div class="line" id="051411"><span class="nick" style="color:#2e2a4a"><a href="#051411" label="[05:14:11]">&lt;OriansJ`&gt;</a></span><span class="message">or the fact modern hardware has firmware in the CPU that is measured in MB</span></div><div class="line" id="051441"><span class="nick" style="color:#6b8072"><a href="#051441" label="[05:14:41]">&lt;xentrac&gt;</a></span><span class="message">damo22: the handling of iomem=relaxed depends on the kernel; if the attacker has control of the machine they can replace the kernel</span></div><div class="line" id="051445"><span class="nick" style="color:#2e2a4a"><a href="#051445" label="[05:14:45]">&lt;OriansJ`&gt;</a></span><span class="message">which makes it rather trivial to embed something malicious in the CPU microcode that you'll never spot</span></div><div class="line" id="051504"><span class="nick" style="color:#2e2a4a"><a href="#051504" label="[05:15:04]">&lt;OriansJ`&gt;</a></span><span class="message">or the fact that there are single transistor attacks against modern lithography</span></div><div class="line" id="051516"><span class="nick" style="color:#8dd3c7"><a href="#051516" label="[05:15:16]">&lt;damo22&gt;</a></span><span class="message">if you dont trust the x86 architecture, youve got bigger problems</span></div><div class="line" id="051528"><span class="nick" style="color:#2e2a4a"><a href="#051528" label="[05:15:28]">&lt;OriansJ`&gt;</a></span><span class="message">damo22: hence knight</span></div><div class="line" id="051528"><span class="nick" style="color:#6b8072"><a href="#051528" label="[05:15:28]">&lt;xentrac&gt;</a></span><span class="message">yeah, although those are somewhat more difficult attacks to launch</span></div><div class="line" id="051602"><span class="nick" style="color:#6b8072"><a href="#051602" label="[05:16:02]">&lt;xentrac&gt;</a></span><span class="message">any random person who finds a zero-day RCE on your machine can get root and rootkit your kernel</span></div><div class="line" id="051614"><span class="nick" style="color:#2e2a4a"><a href="#051614" label="[05:16:14]">&lt;OriansJ`&gt;</a></span><span class="message">I hope to have answers to all attacks when people ask me about them</span></div><div class="line" id="051616"><span class="nick" style="color:#6b8072"><a href="#051616" label="[05:16:16]">&lt;xentrac&gt;</a></span><span class="message">they will have a much harder time adding malicious transistors to the CPU</span></div><div class="line" id="051653"><span class="nick" style="color:#8dd3c7"><a href="#051653" label="[05:16:53]">&lt;damo22&gt;</a></span><span class="message">well i still think coreboot payload isnt a bad idea</span></div><div class="line" id="051701"><span class="nick" style="color:#2e2a4a"><a href="#051701" label="[05:17:01]">&lt;OriansJ`&gt;</a></span><span class="message">a zero-day RCE when your default iptables rule is drop; certainly is a harder to find bug</span></div><div class="line" id="051724"><span class="nick" style="color:#6b8072"><a href="#051724" label="[05:17:24]">&lt;xentrac&gt;</a></span><span class="message">depends on the avenue</span></div><div class="line" id="051732"><span class="nick" style="color:#8dd3c7"><a href="#051732" label="[05:17:32]">&lt;damo22&gt;</a></span><span class="message">you shouldnt bootstrap the whole GNU ecosystem off x86</span></div><div class="line" id="051740"><span class="nick" style="color:#2e2a4a"><a href="#051740" label="[05:17:40]">&lt;OriansJ`&gt;</a></span><span class="message">damo22: agreed, someone could simply start with a stage0_monitor as a coreboot module</span></div><div class="line" id="051811"><span class="nick" style="color:#2e2a4a"><a href="#051811" label="[05:18:11]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: especially with Intel ME's ethernet sniffer vulnerability</span></div><div class="line" id="051830"><span class="nick" style="color:#8dd3c7"><a href="#051830" label="[05:18:30]">&lt;damo22&gt;</a></span><span class="message">but for many security models for your own purposes, coreboot payload would probably suffice</span></div><div class="line" id="051844"><span class="nick" style="color:#2e2a4a"><a href="#051844" label="[05:18:44]">&lt;OriansJ`&gt;</a></span><span class="message">damo22: I think it would be better to say, one shouldn't depend upon x86 to bootstrap GNU</span></div><div class="line" id="051930"><span class="nick" style="color:#2e2a4a"><a href="#051930" label="[05:19:30]">&lt;OriansJ`&gt;</a></span><span class="message">damo22: I view coreboot payloads as a convience or a floor for people who generally trust their hardware</span></div><div class="line" id="051957"><span class="nick" style="color:#8dd3c7"><a href="#051957" label="[05:19:57]">&lt;damo22&gt;</a></span><span class="message">i have some knowledge of ME <a rel="nofollow" href="http://me.bios.io/images/thumb/5/5e/Intelme.png/450px-Intelme.png">http://me.bios.io/images/thumb/5/5e/Intelme.png/450px-Intelme.png</a> </span></div><div class="line" id="052048"><span class="nick" style="color:#2e2a4a"><a href="#052048" label="[05:20:48]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: (Intel ME directly can read ethernet frames from the ethernet socket and thus be hijacked even with perfect OS software running)</span></div><div class="line" id="052112"><span class="nick" style="color:#6b8072"><a href="#052112" label="[05:21:12]">&lt;xentrac&gt;</a></span><span class="message">right</span></div><div class="line" id="052121"><span class="nick" style="color:#2e2a4a"><a href="#052121" label="[05:21:21]">&lt;OriansJ`&gt;</a></span><span class="message">damo22: I work for the State of Michigan as a Computer security and reliability engineer</span></div><div class="line" id="052136"><span class="nick" style="color:#6b8072"><a href="#052136" label="[05:21:36]">&lt;xentrac&gt;</a></span><span class="message">I was thinking more about things like buffer overflows in libjpeg though</span></div><div class="line" id="052144"><span class="nick" style="color:#2e2a4a"><a href="#052144" label="[05:21:44]">&lt;OriansJ`&gt;</a></span><span class="message">and Intel's ME has been a rat's nest of remote vulnerabilities</span></div><div class="line" id="052150"><span class="nick" style="color:#8dd3c7"><a href="#052150" label="[05:21:50]">&lt;damo22&gt;</a></span><span class="message">indeed</span></div><div class="line" id="052223"><span class="nick" style="color:#2e2a4a"><a href="#052223" label="[05:22:23]">&lt;OriansJ`&gt;</a></span><span class="message">like one could use a self-signed cert to gain access and then use ME to root the host</span></div><div class="line" id="052228"><span class="nick" style="color:#6b8072"><a href="#052228" label="[05:22:28]">&lt;xentrac&gt;</a></span><span class="message">note that damo22 just successfully got me to feed a possibly malicious PNG to Firefox's PNG decoder without ever sending my machine any packets directly</span></div><div class="line" id="052300"><span class="nick" style="color:#6b8072"><a href="#052300" label="[05:23:00]">&lt;xentrac&gt;</a></span><span class="message">so if there were another vulnerability in libpng...</span></div><div class="line" id="052354"><span class="nick" style="color:#2e2a4a"><a href="#052354" label="[05:23:54]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: life is simpler if you take the acceptable compromise strategy</span></div><div class="line" id="052357"><span class="nick" style="color:#8dd3c7"><a href="#052357" label="[05:23:57]">&lt;damo22&gt;</a></span><span class="message">on my thinkpad, i have wiped 95% of the ME firmware</span></div><div class="line" id="052411"><span class="nick" style="color:#8dd3c7"><a href="#052411" label="[05:24:11]">&lt;damo22&gt;</a></span><span class="message">i think its stuck in a loop waiting for its ARC kernel</span></div><div class="line" id="052526"><span class="nick" style="color:#2e2a4a"><a href="#052526" label="[05:25:26]">&lt;OriansJ`&gt;</a></span><span class="message">damo22: me_cleaner</span></div><div class="line" id="052530"><span class="nick" style="color:#8dd3c7"><a href="#052530" label="[05:25:30]">&lt;damo22&gt;</a></span><span class="message">but im a lot happier to use it knowing that it doesnt have a network stack</span></div><div class="line" id="052605"><span class="nick" style="color:#8dd3c7"><a href="#052605" label="[05:26:05]">&lt;damo22&gt;</a></span><span class="message">yeah i helped on that</span></div><div class="line" id="052612"><span class="nick" style="color:#2e2a4a"><a href="#052612" label="[05:26:12]">&lt;OriansJ`&gt;</a></span><span class="message">damo22: nice</span></div><div class="line" id="052627"><span class="nick" style="color:#2e2a4a"><a href="#052627" label="[05:26:27]">&lt;OriansJ`&gt;</a></span><span class="message">libreboot user personally</span></div><div class="line" id="052658"><span class="nick" style="color:#8dd3c7"><a href="#052658" label="[05:26:58]">&lt;damo22&gt;</a></span><span class="message">i was funded to free up 2 chipsets for libreboot</span></div><div class="line" id="052810"><span class="nick" style="color:#2e2a4a"><a href="#052810" label="[05:28:10]">&lt;OriansJ`&gt;</a></span><span class="message">that is cool</span></div><div class="line" id="052847"><span class="nick" style="color:#8dd3c7"><a href="#052847" label="[05:28:47]">&lt;damo22&gt;</a></span><span class="message">i now work in a hospital doing genomics</span></div><div class="line" id="052915"><span class="nick" style="color:#2e2a4a"><a href="#052915" label="[05:29:15]">&lt;OriansJ`&gt;</a></span><span class="message">damo22: take it the libreboot drama got too bad?</span></div><div class="line" id="052939"><span class="nick" style="color:#8dd3c7"><a href="#052939" label="[05:29:39]">&lt;damo22&gt;</a></span><span class="message">yeah, i posted my opinion on that and stopped helping that project</span></div><div class="line" id="053027"><span class="nick" style="color:#8dd3c7"><a href="#053027" label="[05:30:27]">&lt;damo22&gt;</a></span><span class="message">at one point we had a libre fork of coreboot called librecore</span></div><div class="line" id="053035"><span class="nick" style="color:#6b8072"><a href="#053035" label="[05:30:35]">&lt;xentrac&gt;</a></span><span class="message">nice</span></div><div class="line" id="053038"><span class="nick" style="color:#2e2a4a"><a href="#053038" label="[05:30:38]">&lt;OriansJ`&gt;</a></span><span class="message">damo22: as is your rightful choice</span></div><div class="line" id="053046"><span class="nick" style="color:#6b8072"><a href="#053046" label="[05:30:46]">&lt;xentrac&gt;</a></span><span class="message">I didn't know about librecore</span></div><div class="line" id="053109"><span class="nick" style="color:#8dd3c7"><a href="#053109" label="[05:31:09]">&lt;damo22&gt;</a></span><span class="message">it lost traction and focus, no one had time to work on it</span></div><div class="line" id="053127"><span class="nick" style="color:#8dd3c7"><a href="#053127" label="[05:31:27]">&lt;damo22&gt;</a></span><span class="message">and i got a &quot;real&quot; job</span></div><div class="line" id="053158"><span class="nick" style="color:#6b8072"><a href="#053158" label="[05:31:58]">&lt;xentrac&gt;</a></span><span class="message">like your big brother Bob?</span></div><div class="line" id="053204"><span class="nick" style="color:#2e2a4a"><a href="#053204" label="[05:32:04]">&lt;OriansJ`&gt;</a></span><span class="message">damo22: if it makes you feel better; I only get to do this fun stuff in my free time</span></div><div class="line" id="053215"><span class="nick" style="color:#8dd3c7"><a href="#053215" label="[05:32:15]">&lt;damo22&gt;</a></span><span class="message">oh ok</span></div><div class="line" id="053240"><span class="nick" style="color:#8dd3c7"><a href="#053240" label="[05:32:40]">&lt;damo22&gt;</a></span><span class="message">OriansJ`: youre doing great with it you must be dedicated</span></div><div class="line" id="053319"><span class="nick" style="color:#2e2a4a"><a href="#053319" label="[05:33:19]">&lt;OriansJ`&gt;</a></span><span class="message">a couple hours a night and a few hours on the weekend when my wife doesn't demand my time</span></div><div class="line" id="053348"><span class="nick" style="color:#6b8072"><a href="#053348" label="[05:33:48]">&lt;xentrac&gt;</a></span><span class="message">discipline counts for a lot</span></div><div class="line" id="053401"><span class="nick" style="color:#8dd3c7"><a href="#053401" label="[05:34:01]">&lt;damo22&gt;</a></span><span class="message">i have too many hobbies</span></div><div class="line" id="053407"><span class="nick" style="color:#8dd3c7"><a href="#053407" label="[05:34:07]">&lt;damo22&gt;</a></span><span class="message">i can't focus on one anymore</span></div><div class="line" id="053414"><span class="nick" style="color:#6b8072"><a href="#053414" label="[05:34:14]">&lt;xentrac&gt;</a></span><span class="message">do you like programming in Forth?</span></div><div class="line" id="053419"><span class="nick" style="color:#2e2a4a"><a href="#053419" label="[05:34:19]">&lt;OriansJ`&gt;</a></span><span class="message">lack of passion?</span></div><div class="line" id="053430"><span class="nick" style="color:#8dd3c7"><a href="#053430" label="[05:34:30]">&lt;damo22&gt;</a></span><span class="message">i do audio stuff, like recording</span></div><div class="line" id="053431"><span class="nick" style="color:#2e2a4a"><a href="#053431" label="[05:34:31]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: &lt;.&lt;</span></div><div class="line" id="053439"><span class="nick" style="color:#8dd3c7"><a href="#053439" label="[05:34:39]">&lt;damo22&gt;</a></span><span class="message">and DSP</span></div><div class="line" id="053455"><span class="nick" style="color:#8dd3c7"><a href="#053455" label="[05:34:55]">&lt;damo22&gt;</a></span><span class="message">(software based)</span></div><div class="line" id="053531"><span class="nick" style="color:#8dd3c7"><a href="#053531" label="[05:35:31]">&lt;damo22&gt;</a></span><span class="message">ive never heard of forth until yesterday</span></div><div class="line" id="053534"><span class="nick" style="color:#8dd3c7"><a href="#053534" label="[05:35:34]">&lt;damo22&gt;</a></span><span class="message">sorry</span></div><div class="line" id="053617"><span class="nick" style="color:#8dd3c7"><a href="#053617" label="[05:36:17]">&lt;damo22&gt;</a></span><span class="message">my friend roped me in to play a music gig</span></div><div class="line" id="053638"><span class="nick" style="color:#8dd3c7"><a href="#053638" label="[05:36:38]">&lt;damo22&gt;</a></span><span class="message">so i need to practice for that too</span></div><div class="line" id="053834"><span class="nick" style="color:#8dd3c7"><a href="#053834" label="[05:38:34]">&lt;damo22&gt;</a></span><span class="message">i enjoy making these, a few people have bought binaries <a rel="nofollow" href="https://github.com/zamaudio/zam-plugins">https://github.com/zamaudio/zam-plugins</a> </span></div><div class="line" id="053902"><span class="nick" style="color:#2e2a4a"><a href="#053902" label="[05:39:02]">&lt;OriansJ`&gt;</a></span><span class="message">nice</span></div><div class="line" id="054003"><span class="nick" style="color:#2e2a4a"><a href="#054003" label="[05:40:03]">&lt;OriansJ`&gt;</a></span><span class="message">damo22: you did the Gigabyte GA-B75M-D3H coreboot port?</span></div><div class="line" id="054040"><span class="nick" style="color:#8dd3c7"><a href="#054040" label="[05:40:40]">&lt;damo22&gt;</a></span><span class="message">yeah</span></div><div class="line" id="054048"><span class="nick" style="color:#8dd3c7"><a href="#054048" label="[05:40:48]">&lt;damo22&gt;</a></span><span class="message">and D3V</span></div><div class="line" id="054136"><span class="nick" style="color:#8dd3c7"><a href="#054136" label="[05:41:36]">&lt;damo22&gt;</a></span><span class="message">theyre not bad boards</span></div><div class="line" id="054156"><span class="nick" style="color:#2e2a4a"><a href="#054156" label="[05:41:56]">&lt;OriansJ`&gt;</a></span><span class="message">I owe you a thank you and a beer for that bit of work</span></div><div class="line" id="054207"><span class="nick" style="color:#8dd3c7"><a href="#054207" label="[05:42:07]">&lt;damo22&gt;</a></span><span class="message">:D</span></div><div class="line" id="054324"><span class="nick" style="color:#2e2a4a"><a href="#054324" label="[05:43:24]">&lt;OriansJ`&gt;</a></span><span class="message">and if you ever feel a desire to do more of that work let me know (I can send some free hardware your way)</span></div><div class="line" id="054343"><span class="nick" style="color:#8dd3c7"><a href="#054343" label="[05:43:43]">&lt;damo22&gt;</a></span><span class="message">the hardest part was ram init for sandybridge, which i did about half of</span></div><div class="line" id="054448"><span class="nick" style="color:#8dd3c7"><a href="#054448" label="[05:44:48]">&lt;damo22&gt;</a></span><span class="message">autoport can do most of the related boards with that generation</span></div><div class="line" id="054502"><span class="nick" style="color:#8dd3c7"><a href="#054502" label="[05:45:02]">&lt;damo22&gt;</a></span><span class="message">thanks to phcoder</span></div><div class="line" id="054511"><span class="nick" style="color:#2e2a4a"><a href="#054511" label="[05:45:11]">&lt;OriansJ`&gt;</a></span><span class="message">nice to know</span></div><div class="line" id="054517"><span class="nick" style="color:#6b8072"><a href="#054517" label="[05:45:17]">&lt;xentrac&gt;</a></span><span class="message">nice</span></div><div class="line" id="054522"><span class="nick" style="color:#6b8072"><a href="#054522" label="[05:45:22]">&lt;xentrac&gt;</a></span><span class="message">why was ram init hard?</span></div><div class="line" id="054531"><span class="nick" style="color:#8dd3c7"><a href="#054531" label="[05:45:31]">&lt;damo22&gt;</a></span><span class="message">xentrac: because, no docs</span></div><div class="line" id="054536"><span class="nick" style="color:#6b8072"><a href="#054536" label="[05:45:36]">&lt;xentrac&gt;</a></span><span class="message">ohh :(</span></div><div class="line" id="054557"><span class="nick" style="color:#2e2a4a"><a href="#054557" label="[05:45:57]">&lt;OriansJ`&gt;</a></span><span class="message">and no RAM, only L1+L2+L3 cache until it is done</span></div><div class="line" id="054559"><span class="nick" style="color:#6b8072"><a href="#054559" label="[05:45:59]">&lt;xentrac&gt;</a></span><span class="message">OriansJ`: what is &quot;&lt;.&lt;&quot;?</span></div><div class="line" id="054610"><span class="nick" style="color:#2e2a4a"><a href="#054610" label="[05:46:10]">&lt;OriansJ`&gt;</a></span><span class="message">*stares*</span></div><div class="line" id="054623"><span class="nick" style="color:#8dd3c7"><a href="#054623" label="[05:46:23]">&lt;damo22&gt;</a></span><span class="message">yeah you need cache-as-ram</span></div><div class="line" id="054650"><span class="nick" style="color:#2e2a4a"><a href="#054650" label="[05:46:50]">&lt;OriansJ`&gt;</a></span><span class="message">and RAM initialization is entirely architecture specific</span></div><div class="line" id="054653"><span class="nick" style="color:#8dd3c7"><a href="#054653" label="[05:46:53]">&lt;damo22&gt;</a></span><span class="message">if you store too many variables, the whole cache evicts and you wonder why the log stops</span></div><div class="line" id="054653"><span class="nick" style="color:#6b8072"><a href="#054653" label="[05:46:53]">&lt;xentrac&gt;</a></span><span class="message">the cache part doesn't sound that hard, although I guess it's somewhat complicated by the chip powering on in 8086 mode</span></div><div class="line" id="054709"><span class="nick" style="color:#6b8072"><a href="#054709" label="[05:47:09]">&lt;xentrac&gt;</a></span><span class="message">haha</span></div><div class="line" id="054710"><span class="nick" style="color:#2e2a4a"><a href="#054710" label="[05:47:10]">&lt;OriansJ`&gt;</a></span><span class="message">(unless the architecture defines that it is done automatically by hardware)</span></div><div class="line" id="054711"><span class="nick" style="color:#6b8072"><a href="#054711" label="[05:47:11]">&lt;xentrac&gt;</a></span><span class="message">yeah</span></div><div class="line" id="054817"><span class="nick" style="color:#8dd3c7"><a href="#054817" label="[05:48:17]">&lt;damo22&gt;</a></span><span class="message">the jedec start up sequence is complex for DDR3 and is really hardware specific how the memory controller is wired up and controls the lines</span></div><div class="line" id="054840"><span class="nick" style="color:#2e2a4a"><a href="#054840" label="[05:48:40]">&lt;OriansJ`&gt;</a></span><span class="message">It always seemed like such a cheap move forcing the bios to intialize RAM when the chip itself could have done it</span></div><div class="line" id="054849"><span class="nick" style="color:#6b8072"><a href="#054849" label="[05:48:49]">&lt;xentrac&gt;</a></span><span class="message">that sounds a lot harder than only using registers</span></div><div class="line" id="055015"><span class="nick" style="color:#8dd3c7"><a href="#055015" label="[05:50:15]">&lt;damo22&gt;</a></span><span class="message"> <a rel="nofollow" href="https://review.coreboot.org/c/coreboot/+/5786/30/src/northbridge/intel/sandybridge/raminit_native.c">https://review.coreboot.org/c/coreboot/+/5786/30/src/northbridge/intel/sandybridge/raminit_native.c</a> </span></div><div class="line" id="055353"><span class="nick">***</span><span class="message notice">OriansJ` is now known as OriansJ</span></div><div class="line" id="055435"><span class="nick" style="color:#8dd3c7"><a href="#055435" label="[05:54:35]">&lt;damo22&gt;</a></span><span class="message">we used qemu in a special mode that does IO through a serial port direct to an external motherboard to execute the real firmware blob one instruction at a time</span></div><div class="line" id="055550"><span class="nick" style="color:#80b1d3"><a href="#055550" label="[05:55:50]">&lt;OriansJ&gt;</a></span><span class="message">hardware initialization is not for the faint of heart</span></div><div class="line" id="055554"><span class="nick" style="color:#8dd3c7"><a href="#055554" label="[05:55:54]">&lt;damo22&gt;</a></span><span class="message">so you encode the instruction and send it over serial to a monitor that executes the instruction on the cpu and has all the real side effects</span></div><div class="line" id="055607"><span class="nick" style="color:#80b1d3"><a href="#055607" label="[05:56:07]">&lt;OriansJ&gt;</a></span><span class="message">and you can kill hardware too</span></div><div class="line" id="055742"><span class="nick" style="color:#8dd3c7"><a href="#055742" label="[05:57:42]">&lt;damo22&gt;</a></span><span class="message">intel did a reasonable job at making hw resilient to killing</span></div><div class="line" id="055810"><span class="nick" style="color:#8dd3c7"><a href="#055810" label="[05:58:10]">&lt;damo22&gt;</a></span><span class="message">imho</span></div><div class="line" id="055827"><span class="nick" style="color:#8dd3c7"><a href="#055827" label="[05:58:27]">&lt;damo22&gt;</a></span><span class="message">ive not had one dead board</span></div><div class="line" id="055921"><span class="nick" style="color:#8dd3c7"><a href="#055921" label="[05:59:21]">&lt;damo22&gt;</a></span><span class="message">except a thinkpad T60 that EC died</span></div><div class="line" id="060142"><span class="nick" style="color:#8dd3c7"><a href="#060142" label="[06:01:42]">&lt;damo22&gt;</a></span><span class="message">if raminit was easy like setting a few registers to turn it on, we'd have sooo many more coreboot ports</span></div><div class="line" id="060225"><span class="nick" style="color:#8dd3c7"><a href="#060225" label="[06:02:25]">&lt;damo22&gt;</a></span><span class="message">but its now in the hands of google and they are turning it into a blob wrapper</span></div><div class="line" id="095415"><span class="nick" style="color:#6d2462"><a href="#095415" label="[09:54:15]">&lt;dgpv&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/stage0/pull/22">https://github.com/oriansj/stage0/pull/22</a>  -- another 6 bytes shaved from stage0_monitor</span></div><div class="line" id="095601"><span class="nick" style="color:#6d2462"><a href="#095601" label="[09:56:01]">&lt;dgpv&gt;</a></span><span class="message">Got the idea how to save this while on the plane yesterday, so had to implement, even if I said that I will pause working on this</span></div><div class="line" id="095637"><span class="nick" style="color:#6d2462"><a href="#095637" label="[09:56:37]">&lt;dgpv&gt;</a></span><span class="message">I say because the idea came yesterday, this is all part of yesterday's hacking session :-P</span></div><div class="line" id="102917"><span class="nick" style="color:#8dd3c7"><a href="#102917" label="[10:29:17]">&lt;damo22&gt;</a></span><span class="message">which channel would i go to ask for help with expresscard peripherals?</span></div><div class="line" id="133542"><span class="nick" style="color:#80b1d3"><a href="#133542" label="[13:35:42]">&lt;OriansJ&gt;</a></span><span class="message">damo22: depends on if you play with <a rel="nofollow" href="https://github.com/xoreaxeaxeax/sandsifter">https://github.com/xoreaxeaxeax/sandsifter</a>  on Intel chips..</span></div><br /></div></body></html>