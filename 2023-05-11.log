<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-05-11.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000016"><span class="nick" style="color:#389600"><a href="#000016" label="[00:00:16]">&lt;oriansj&gt;</a></span><span class="message">muurkha: to be fair, one could write lisp 1.5 in assembly in an afternoon. (I did: <a rel="nofollow" href="https://github.com/oriansj/stage0/blob/master/stage2/lisp.s">https://github.com/oriansj/stage0/blob/master/stage2/lisp.s</a>) </span></div><div class="line" id="000026"><span class="nick" style="color:#8dd3c7"><a href="#000026" label="[00:00:26]">&lt;muurkha&gt;</a></span><span class="message">you don't need a lot of instructions to write an assembler.  call, ret, mov, load, store, add, jmp, some kind of conditional jump, some way to handle immediate constants</span></div><div class="line" id="000029"><span class="nick" style="color:#2e2a4a"><a href="#000029" label="[00:00:29]">&lt;drakonis&gt;</a></span><span class="message">i only ask due to the assembler that i'm using has some very interesting properties</span></div><div class="line" id="000101"><span class="nick" style="color:#8dd3c7"><a href="#000101" label="[00:01:01]">&lt;muurkha&gt;</a></span><span class="message">oriansj: I think it would take me longer than that, but that's pretty cool</span></div><div class="line" id="000110"><span class="nick" style="color:#389600"><a href="#000110" label="[00:01:10]">&lt;oriansj&gt;</a></span><span class="message">but the lack of macros and reader macro support really makes for a very different lis</span></div><div class="line" id="000157"><span class="nick" style="color:#8dd3c7"><a href="#000157" label="[00:01:57]">&lt;muurkha&gt;</a></span><span class="message">Lisp didn't grow macros until the 70s</span></div><div class="line" id="000200"><span class="nick" style="color:#8dd3c7"><a href="#000200" label="[00:02:00]">&lt;muurkha&gt;</a></span><span class="message">iirc</span></div><div class="line" id="000209"><span class="nick" style="color:#2e2a4a"><a href="#000209" label="[00:02:09]">&lt;drakonis&gt;</a></span><span class="message">fasm-g is extremely minimal and does everything with macros, EVERYTHING</span></div><div class="line" id="000215"><span class="nick" style="color:#2e2a4a"><a href="#000215" label="[00:02:15]">&lt;drakonis&gt;</a></span><span class="message">even the assembler parts</span></div><div class="line" id="000230"><span class="nick" style="color:#8dd3c7"><a href="#000230" label="[00:02:30]">&lt;muurkha&gt;</a></span><span class="message">drakonis: have you looked at GPM?  or maybe m4</span></div><div class="line" id="000235"><span class="nick" style="color:#2e2a4a"><a href="#000235" label="[00:02:35]">&lt;drakonis&gt;</a></span><span class="message">gpm?</span></div><div class="line" id="000246"><span class="nick" style="color:#2e2a4a"><a href="#000246" label="[00:02:46]">&lt;drakonis&gt;</a></span><span class="message">i have not looked at gpm</span></div><div class="line" id="000250"><span class="nick" style="color:#2e2a4a"><a href="#000250" label="[00:02:50]">&lt;drakonis&gt;</a></span><span class="message">have vaguely heard of m4</span></div><div class="line" id="000254"><span class="nick" style="color:#8dd3c7"><a href="#000254" label="[00:02:54]">&lt;muurkha&gt;</a></span><span class="message">GPM is the original of m6</span></div><div class="line" id="000315"><span class="nick" style="color:#8dd3c7"><a href="#000315" label="[00:03:15]">&lt;muurkha&gt;</a></span><span class="message">m6 is basically GPM but in ASCII</span></div><div class="line" id="000334"><span class="nick" style="color:#8dd3c7"><a href="#000334" label="[00:03:34]">&lt;muurkha&gt;</a></span><span class="message">and m4 is a variant of m6</span></div><div class="line" id="000458"><span class="nick" style="color:#8dd3c7"><a href="#000458" label="[00:04:58]">&lt;muurkha&gt;</a></span><span class="message">m4 shows you can do anything with macros but you might regret it</span></div><div class="line" id="000519"><span class="nick" style="color:#2e2a4a"><a href="#000519" label="[00:05:19]">&lt;drakonis&gt;</a></span><span class="message">the unrestrained power of macros i see</span></div><div class="line" id="000526"><span class="nick" style="color:#2e2a4a"><a href="#000526" label="[00:05:26]">&lt;drakonis&gt;</a></span><span class="message">it cursed us with autotools</span></div><div class="line" id="000531"><span class="nick" style="color:#2e2a4a"><a href="#000531" label="[00:05:31]">&lt;drakonis&gt;</a></span><span class="message">truly regrettable</span></div><div class="line" id="000637"><span class="nick" style="color:#389600"><a href="#000637" label="[00:06:37]">&lt;oriansj&gt;</a></span><span class="message">macros that only you need to work with can be blessings. Macros written by others more often than not are a curse</span></div><div class="line" id="000701"><span class="nick" style="color:#2e2a4a"><a href="#000701" label="[00:07:01]">&lt;drakonis&gt;</a></span><span class="message"> <a rel="nofollow" href="https://flatassembler.net/docs.php?article=fasmg_manual">https://flatassembler.net/docs.php?article=fasmg_manual</a>  this is what i got here for my assembler of choice</span></div><div class="line" id="000713"><span class="nick" style="color:#2e2a4a"><a href="#000713" label="[00:07:13]">&lt;drakonis&gt;</a></span><span class="message">though i can see why you're bringing up gpm and/or m4</span></div><div class="line" id="000721"><span class="nick" style="color:#2e2a4a"><a href="#000721" label="[00:07:21]">&lt;drakonis&gt;</a></span><span class="message">since i could do effectively the same thing?</span></div><div class="line" id="000905"><span class="nick" style="color:#2e2a4a"><a href="#000905" label="[00:09:05]">&lt;drakonis&gt;</a></span><span class="message">ie: actually roll my own assembler instead of relying on someone else's work</span></div><div class="line" id="000942"><span class="nick" style="color:#389600"><a href="#000942" label="[00:09:42]">&lt;oriansj&gt;</a></span><span class="message">drakonis: well yeah, that is easy if you go the M1/hex2 route</span></div><div class="line" id="000953"><span class="nick" style="color:#389600"><a href="#000953" label="[00:09:53]">&lt;oriansj&gt;</a></span><span class="message">or write it in C</span></div><div class="line" id="001005"><span class="nick" style="color:#2e2a4a"><a href="#001005" label="[00:10:05]">&lt;drakonis&gt;</a></span><span class="message">ehhh i wanted to learn some low level programming</span></div><div class="line" id="001050"><span class="nick" style="color:#2e2a4a"><a href="#001050" label="[00:10:50]">&lt;drakonis&gt;</a></span><span class="message">i have never gotten to do anything free from the shackles of higher level languages</span></div><div class="line" id="001111"><span class="nick" style="color:#389600"><a href="#001111" label="[00:11:11]">&lt;oriansj&gt;</a></span><span class="message">well a stage0 port will definitely make you know *EVERYTHING* about the low level details of an architecture</span></div><div class="line" id="001144"><span class="nick" style="color:#389600"><a href="#001144" label="[00:11:44]">&lt;oriansj&gt;</a></span><span class="message">and armv7l still needs work (I can provide free hardware if you are interested)</span></div><div class="line" id="001200"><span class="nick" style="color:#2e2a4a"><a href="#001200" label="[00:12:00]">&lt;drakonis&gt;</a></span><span class="message">its too soon for me to even take on that yet</span></div><div class="line" id="001213"><span class="nick" style="color:#2e2a4a"><a href="#001213" label="[00:12:13]">&lt;drakonis&gt;</a></span><span class="message">and perhaps there is such a thing as too low level :v</span></div><div class="line" id="001301"><span class="nick" style="color:#389600"><a href="#001301" label="[00:13:01]">&lt;oriansj&gt;</a></span><span class="message">drakonis: you know the first step in stage0 is usally writing the bits in assembly before doing the conversion right?</span></div><div class="line" id="001320"><span class="nick" style="color:#2e2a4a"><a href="#001320" label="[00:13:20]">&lt;drakonis&gt;</a></span><span class="message">i'm going through the source</span></div><div class="line" id="001325"><span class="nick" style="color:#389600"><a href="#001325" label="[00:13:25]">&lt;oriansj&gt;</a></span><span class="message">so you'd be writing bog standard assembly</span></div><div class="line" id="001349"><span class="nick" style="color:#389600"><a href="#001349" label="[00:13:49]">&lt;oriansj&gt;</a></span><span class="message">and starting from a small program and slowly working up to a C compiler in assembly</span></div><div class="line" id="001441"><span class="nick" style="color:#389600"><a href="#001441" label="[00:14:41]">&lt;oriansj&gt;</a></span><span class="message">I'll even help you</span></div><div class="line" id="001446"><span class="nick" style="color:#2e2a4a"><a href="#001446" label="[00:14:46]">&lt;drakonis&gt;</a></span><span class="message">cool.</span></div><div class="line" id="001559"><span class="nick" style="color:#2e2a4a"><a href="#001559" label="[00:15:59]">&lt;drakonis&gt;</a></span><span class="message">i'll... think about it, but its still too early for me in my current level of knowledge</span></div><div class="line" id="001824"><span class="nick" style="color:#389600"><a href="#001824" label="[00:18:24]">&lt;oriansj&gt;</a></span><span class="message">well if you need a confidence boost, email me (jeremiah@pdp10.guru) with contact details and I can give you a call (signal, session, matrix, etc)</span></div><div class="line" id="001936"><span class="nick" style="color:#2e2a4a"><a href="#001936" label="[00:19:36]">&lt;drakonis&gt;</a></span><span class="message">alright.</span></div><div class="line" id="002737"><span class="nick" style="color:#2e2a4a"><a href="#002737" label="[00:27:37]">&lt;drakonis&gt;</a></span><span class="message">what i need for now is just starting my assembly to forth project before taking on anything else</span></div><div class="line" id="002750"><span class="nick" style="color:#2e2a4a"><a href="#002750" label="[00:27:50]">&lt;drakonis&gt;</a></span><span class="message">doing it for myself and all that</span></div><div class="line" id="002830"><span class="nick" style="color:#2e2a4a"><a href="#002830" label="[00:28:30]">&lt;drakonis&gt;</a></span><span class="message">and thanks oriansj, when i'm ready i'll let you know</span></div><div class="line" id="002936"><span class="nick" style="color:#389600"><a href="#002936" label="[00:29:36]">&lt;oriansj&gt;</a></span><span class="message">of course and if you need another FORTH in assembly implementation: <a rel="nofollow" href="https://github.com/oriansj/stage0/blob/master/stage2/forth.s">https://github.com/oriansj/stage0/blob/master/stage2/forth.s</a> </span></div><div class="line" id="003524"><span class="nick" style="color:#6b8072"><a href="#003524" label="[00:35:24]">&lt;stikonas&gt;</a></span><span class="message">janneke,  oriansj: that's not exactly true with how mescc is implemented</span></div><div class="line" id="003536"><span class="nick" style="color:#6b8072"><a href="#003536" label="[00:35:36]">&lt;stikonas&gt;</a></span><span class="message">(at least right now)</span></div><div class="line" id="003557"><span class="nick" style="color:#6b8072"><a href="#003557" label="[00:35:57]">&lt;stikonas&gt;</a></span><span class="message">it has some workarounds for loading immediates at the expense of fairly long instructions</span></div><div class="line" id="003626"><span class="nick" style="color:#6b8072"><a href="#003626" label="[00:36:26]">&lt;stikonas&gt;</a></span><span class="message">e.g. it stores immediate inline in the code and then loads from there and jumps...</span></div><div class="line" id="003635"><span class="nick" style="color:#6b8072"><a href="#003635" label="[00:36:35]">&lt;stikonas&gt;</a></span><span class="message">so immediates themselves might be doable</span></div><div class="line" id="003642"><span class="nick" style="color:#6b8072"><a href="#003642" label="[00:36:42]">&lt;stikonas&gt;</a></span><span class="message">(that's M1 stuff)</span></div><div class="line" id="003648"><span class="nick" style="color:#6b8072"><a href="#003648" label="[00:36:48]">&lt;stikonas&gt;</a></span><span class="message">on the other hand I've now remembered labels</span></div><div class="line" id="003710"><span class="nick" style="color:#6b8072"><a href="#003710" label="[00:37:10]">&lt;stikonas&gt;</a></span><span class="message">and they would definitely need riscv fixed word behaviour</span></div><div class="line" id="003733"><span class="nick" style="color:#6b8072"><a href="#003733" label="[00:37:33]">&lt;stikonas&gt;</a></span><span class="message">so perhaps some crazy combination of M1 with amd64 architecture and hex2 with riscv might work...</span></div><div class="line" id="003738"><span class="nick" style="color:#6b8072"><a href="#003738" label="[00:37:38]">&lt;stikonas&gt;</a></span><span class="message">but it's a big hack</span></div><div class="line" id="003748"><span class="nick" style="color:#6b8072"><a href="#003748" label="[00:37:48]">&lt;stikonas&gt;</a></span><span class="message">in my opinion stage0-posix defines are better</span></div><div class="line" id="003814"><span class="nick" style="color:#6b8072"><a href="#003814" label="[00:38:14]">&lt;stikonas&gt;</a></span><span class="message">as they allow encoding anything from RV32I, RV32M, RV64I and RV64M</span></div><div class="line" id="003956"><span class="nick" style="color:#6b8072"><a href="#003956" label="[00:39:56]">&lt;stikonas&gt;</a></span><span class="message">drakonis: yes, doing stage0-posix work, e.g. porting new architecture will make you fairly good at assembly</span></div><div class="line" id="004006"><span class="nick" style="color:#6b8072"><a href="#004006" label="[00:40:06]">&lt;stikonas&gt;</a></span><span class="message">I new very little assembly a year ago...</span></div><div class="line" id="004059"><span class="nick" style="color:#6b8072"><a href="#004059" label="[00:40:59]">&lt;stikonas&gt;</a></span><span class="message">now I'm fairly familiar with riscv and x86/amd64 (well for these it's basic stuff, I guess roughly equivalent to RISC instructions, not anything to with vector stuff, etc...)</span></div><div class="line" id="004444"><span class="nick" style="color:#2e2a4a"><a href="#004444" label="[00:44:44]">&lt;drakonis&gt;</a></span><span class="message">vectors are all extensions anyways</span></div><div class="line" id="004456"><span class="nick" style="color:#2e2a4a"><a href="#004456" label="[00:44:56]">&lt;drakonis&gt;</a></span><span class="message">for when you want code that goes fast</span></div><div class="line" id="004656"><span class="nick" style="color:#2e2a4a"><a href="#004656" label="[00:46:56]">&lt;drakonis&gt;</a></span><span class="message">but its good to know</span></div><div class="line" id="012349"><span class="nick" style="color:#389600"><a href="#012349" label="[01:23:49]">&lt;oriansj&gt;</a></span><span class="message">heck, redoing an existing port and improving it is useful too (I hear x86 maps better to octal)</span></div><div class="line" id="015443"><span class="nick" style="color:#8dd3c7"><a href="#015443" label="[01:54:43]">&lt;muurkha&gt;</a></span><span class="message">autotools uses m4 a lot</span></div><div class="line" id="015508"><span class="nick" style="color:#8dd3c7"><a href="#015508" label="[01:55:08]">&lt;muurkha&gt;</a></span><span class="message">I think it's maybe possible to design a less error-prone textual macro language</span></div><div class="line" id="015601"><span class="nick" style="color:#8dd3c7"><a href="#015601" label="[01:56:01]">&lt;muurkha&gt;</a></span><span class="message">yes, the idea of GPM was that it was a macro assembler like fasm, just without the assembler part</span></div><div class="line" id="015708"><span class="nick" style="color:#8dd3c7"><a href="#015708" label="[01:57:08]">&lt;muurkha&gt;</a></span><span class="message">a different approach to bootstrapping an assembler which might be easier is to write a bytecode interpreter in assembly, then write the actual assembly in bytecode</span></div><div class="line" id="020009"><span class="nick" style="color:#8dd3c7"><a href="#020009" label="[02:00:09]">&lt;muurkha&gt;</a></span><span class="message">this is maybe more appealing when the machine is pretty clumsy, like the 6502 or especially the 8080</span></div><div class="line" id="020041"><span class="nick" style="color:#8dd3c7"><a href="#020041" label="[02:00:41]">&lt;muurkha&gt;</a></span><span class="message">uh, I mean write the actual *assembler* in bytecode</span></div><div class="line" id="020220"><span class="nick" style="color:#8dd3c7"><a href="#020220" label="[02:02:20]">&lt;muurkha&gt;</a></span><span class="message">drakonis: you said you're interested in bootstrapping a forth.  a misleading thing about stoneknifeforth and jonesforth is that they're noninteractive</span></div><div class="line" id="020329"><span class="nick" style="color:#2e2a4a"><a href="#020329" label="[02:03:29]">&lt;drakonis&gt;</a></span><span class="message">hmm, that certainly would complicate things</span></div><div class="line" id="020357"><span class="nick" style="color:#8dd3c7"><a href="#020357" label="[02:03:57]">&lt;muurkha&gt;</a></span><span class="message">I think it's maybe better to think of forth as being like an interactive debugger than like a C compiler</span></div><div class="line" id="020444"><span class="nick" style="color:#389600"><a href="#020444" label="[02:04:44]">&lt;oriansj&gt;</a></span><span class="message">but my example FORTH is</span></div><div class="line" id="020500"><span class="nick" style="color:#389600"><a href="#020500" label="[02:05:00]">&lt;oriansj&gt;</a></span><span class="message">very interactive</span></div><div class="line" id="020511"><span class="nick" style="color:#8dd3c7"><a href="#020511" label="[02:05:11]">&lt;muurkha&gt;</a></span><span class="message">like, you can type 71f1 ? to display the word in memory at address 71f1 (assuming you've run the word HEX previously)</span></div><div class="line" id="020512"><span class="nick" style="color:#2e2a4a"><a href="#020512" label="[02:05:12]">&lt;drakonis&gt;</a></span><span class="message">hmm</span></div><div class="line" id="020547"><span class="nick" style="color:#8dd3c7"><a href="#020547" label="[02:05:47]">&lt;muurkha&gt;</a></span><span class="message">or .s to display the stack</span></div><div class="line" id="020638"><span class="nick" style="color:#8dd3c7"><a href="#020638" label="[02:06:38]">&lt;muurkha&gt;</a></span><span class="message">in a C debugger you often proceed by stepping past a line of code</span></div><div class="line" id="020645"><span class="nick" style="color:#2e2a4a"><a href="#020645" label="[02:06:45]">&lt;drakonis&gt;</a></span><span class="message">so, it is a live language</span></div><div class="line" id="020657"><span class="nick" style="color:#8dd3c7"><a href="#020657" label="[02:06:57]">&lt;muurkha&gt;</a></span><span class="message">in Forth you name each line of code instead of numbering it</span></div><div class="line" id="020720"><span class="nick" style="color:#8dd3c7"><a href="#020720" label="[02:07:20]">&lt;muurkha&gt;</a></span><span class="message">so you can &quot;step past&quot; a line of code by typing its name</span></div><div class="line" id="020748"><span class="nick" style="color:#2e2a4a"><a href="#020748" label="[02:07:48]">&lt;drakonis&gt;</a></span><span class="message">as opposed to being the mummified corpse that is most compiled languages</span></div><div class="line" id="020754"><span class="nick" style="color:#8dd3c7"><a href="#020754" label="[02:07:54]">&lt;muurkha&gt;</a></span><span class="message">right</span></div><div class="line" id="020823"><span class="nick" style="color:#8dd3c7"><a href="#020823" label="[02:08:23]">&lt;muurkha&gt;</a></span><span class="message">and with that in mind a lot of its weird design decisions are more understandable</span></div><div class="line" id="020835"><span class="nick" style="color:#8dd3c7"><a href="#020835" label="[02:08:35]">&lt;muurkha&gt;</a></span><span class="message">like, traditionally, no local variables</span></div><div class="line" id="020913"><span class="nick" style="color:#8dd3c7"><a href="#020913" label="[02:09:13]">&lt;muurkha&gt;</a></span><span class="message">I'm no Forth expert, though</span></div><div class="line" id="020940"><span class="nick" style="color:#2e2a4a"><a href="#020940" label="[02:09:40]">&lt;drakonis&gt;</a></span><span class="message">neither am i</span></div><div class="line" id="021032"><span class="nick" style="color:#2e2a4a"><a href="#021032" label="[02:10:32]">&lt;drakonis&gt;</a></span><span class="message">but it is always possible to get better</span></div><div class="line" id="021039"><span class="nick" style="color:#2e2a4a"><a href="#021039" label="[02:10:39]">&lt;drakonis&gt;</a></span><span class="message"> <a rel="nofollow" href="https://ratfactor.com/forth/the_programming_language_that_writes_itself.html">https://ratfactor.com/forth/the_programming_language_that_writes_itself.html</a> </span></div><div class="line" id="021058"><span class="nick" style="color:#2e2a4a"><a href="#021058" label="[02:10:58]">&lt;drakonis&gt;</a></span><span class="message">the author of nasmjf gave a talk about forth earlier this year</span></div><div class="line" id="021139"><span class="nick" style="color:#2e2a4a"><a href="#021139" label="[02:11:39]">&lt;drakonis&gt;</a></span><span class="message">fairly pleasant stuff</span></div><div class="line" id="021158"><span class="nick" style="color:#2e2a4a"><a href="#021158" label="[02:11:58]">&lt;drakonis&gt;</a></span><span class="message">the lack of local variables is usually remedied by the implementations providing the facility</span></div><div class="line" id="021210"><span class="nick" style="color:#8dd3c7"><a href="#021210" label="[02:12:10]">&lt;muurkha&gt;</a></span><span class="message">no</span></div><div class="line" id="021244"><span class="nick" style="color:#8dd3c7"><a href="#021244" label="[02:12:44]">&lt;muurkha&gt;</a></span><span class="message">I mean if you provide the facility it means you can't use the outer interpreter to look at the variables' values</span></div><div class="line" id="021254"><span class="nick" style="color:#2e2a4a"><a href="#021254" label="[02:12:54]">&lt;drakonis&gt;</a></span><span class="message">ah right</span></div><div class="line" id="021256"><span class="nick" style="color:#2e2a4a"><a href="#021256" label="[02:12:56]">&lt;drakonis&gt;</a></span><span class="message">fair enough.</span></div><div class="line" id="021306"><span class="nick" style="color:#8dd3c7"><a href="#021306" label="[02:13:06]">&lt;muurkha&gt;</a></span><span class="message">because they're gone by the time you reach it</span></div><div class="line" id="021328"><span class="nick" style="color:#8dd3c7"><a href="#021328" label="[02:13:28]">&lt;muurkha&gt;</a></span><span class="message">you need a separate debugger</span></div><div class="line" id="021435"><span class="nick" style="color:#8dd3c7"><a href="#021435" label="[02:14:35]">&lt;muurkha&gt;</a></span><span class="message">the idea with Forth, as with Emacs, the ITS HACTRN, and akkartik's Mu, is that your normal UI also works as a debugger</span></div><div class="line" id="021510"><span class="nick" style="color:#8dd3c7"><a href="#021510" label="[02:15:10]">&lt;muurkha&gt;</a></span><span class="message">sort of, anyway</span></div><div class="line" id="021609"><span class="nick" style="color:#2e2a4a"><a href="#021609" label="[02:16:09]">&lt;drakonis&gt;</a></span><span class="message">mu seems interesting</span></div><div class="line" id="021616"><span class="nick" style="color:#2e2a4a"><a href="#021616" label="[02:16:16]">&lt;drakonis&gt;</a></span><span class="message">have you heard about uxn?</span></div><div class="line" id="021722"><span class="nick" style="color:#8dd3c7"><a href="#021722" label="[02:17:22]">&lt;muurkha&gt;</a></span><span class="message">yeah, I think it's flawed in some ways but inspiring in others</span></div><div class="line" id="021738"><span class="nick" style="color:#8dd3c7"><a href="#021738" label="[02:17:38]">&lt;muurkha&gt;</a></span><span class="message">I haven't implemented it yet</span></div><div class="line" id="021758"><span class="nick" style="color:#2e2a4a"><a href="#021758" label="[02:17:58]">&lt;drakonis&gt;</a></span><span class="message">i think that's the beauty of it</span></div><div class="line" id="021906"><span class="nick" style="color:#2e2a4a"><a href="#021906" label="[02:19:06]">&lt;drakonis&gt;</a></span><span class="message">because it isnt some perfect machine it isnt treated as something immutable and immaculate</span></div><div class="line" id="021936"><span class="nick" style="color:#8dd3c7"><a href="#021936" label="[02:19:36]">&lt;muurkha&gt;</a></span><span class="message">the VM design is inherently inefficient in ways that make it unusable for a lot of their targeted apps, so they added peripherals for things like sprites</span></div><div class="line" id="021957"><span class="nick" style="color:#8dd3c7"><a href="#021957" label="[02:19:57]">&lt;muurkha&gt;</a></span><span class="message">yeah, I really like its wabi-sabi vibe</span></div><div class="line" id="022108"><span class="nick" style="color:#8dd3c7"><a href="#022108" label="[02:21:08]">&lt;muurkha&gt;</a></span><span class="message">also I think there's no real benefit to the limited address space, and it makes it hard to bootstrap uxn programming up to the level of something like Lua</span></div><div class="line" id="022204"><span class="nick" style="color:#8dd3c7"><a href="#022204" label="[02:22:04]">&lt;muurkha&gt;</a></span><span class="message">but what kind of matters more is that they have a bunch of roms for it</span></div><div class="line" id="022229"><span class="nick" style="color:#8dd3c7"><a href="#022229" label="[02:22:29]">&lt;muurkha&gt;</a></span><span class="message">I mean, for some purposes, that matters more</span></div><div class="line" id="022246"><span class="nick" style="color:#2e2a4a"><a href="#022246" label="[02:22:46]">&lt;drakonis&gt;</a></span><span class="message">indeed.</span></div><div class="line" id="022313"><span class="nick" style="color:#2e2a4a"><a href="#022313" label="[02:23:13]">&lt;drakonis&gt;</a></span><span class="message">for all purposes and intents, its supposed to be something you could build in the event that access to complex hardware becomes limited</span></div><div class="line" id="022425"><span class="nick" style="color:#2e2a4a"><a href="#022425" label="[02:24:25]">&lt;drakonis&gt;</a></span><span class="message">it is a lot like a fantasy console, in a manner of speaking</span></div><div class="line" id="022628"><span class="nick" style="color:#2e2a4a"><a href="#022628" label="[02:26:28]">&lt;drakonis&gt;</a></span><span class="message">but instead of being some custom hosted design, it is meant to do more than running games</span></div><div class="line" id="022631"><span class="nick" style="color:#2e2a4a"><a href="#022631" label="[02:26:31]">&lt;drakonis&gt;</a></span><span class="message">which is nice</span></div><div class="line" id="022832"><span class="nick" style="color:#2e2a4a"><a href="#022832" label="[02:28:32]">&lt;drakonis&gt;</a></span><span class="message">what is also important is that it actually did inspire others to do something better</span></div><div class="line" id="023035"><span class="nick" style="color:#2e2a4a"><a href="#023035" label="[02:30:35]">&lt;drakonis&gt;</a></span><span class="message">muurkha: you did mention that jonesforth and stoneknifeforth arent interactive, couldn't they be extended into becoming interactive?</span></div><div class="line" id="023112"><span class="nick" style="color:#2e2a4a"><a href="#023112" label="[02:31:12]">&lt;drakonis&gt;</a></span><span class="message">preforth is non interactive but is the base for seedforth, which is in fact, interactive</span></div><div class="line" id="023129"><span class="nick" style="color:#2e2a4a"><a href="#023129" label="[02:31:29]">&lt;drakonis&gt;</a></span><span class="message">rather, the step after seedforth which actually becomes interactive</span></div><div class="line" id="023323"><span class="nick" style="color:#2e2a4a"><a href="#023323" label="[02:33:23]">&lt;drakonis&gt;</a></span><span class="message">anyways, i'm thinking too ahead right now</span></div><div class="line" id="024430"><span class="nick" style="color:#8dd3c7"><a href="#024430" label="[02:44:30]">&lt;muurkha&gt;</a></span><span class="message">well, I think you could write an interactive Forth in them</span></div><div class="line" id="024522"><span class="nick" style="color:#8dd3c7"><a href="#024522" label="[02:45:22]">&lt;muurkha&gt;</a></span><span class="message">I think uxn could be improved a lot in its implementability on low-powered hardware</span></div><div class="line" id="024951"><span class="nick" style="color:#8dd3c7"><a href="#024951" label="[02:49:51]">&lt;muurkha&gt;</a></span><span class="message">like, you could implement it efficiently on an FPGA, if you were going for low power consumption rather than massive speed</span></div><div class="line" id="025103"><span class="nick" style="color:#8dd3c7"><a href="#025103" label="[02:51:03]">&lt;muurkha&gt;</a></span><span class="message">but not on a 6502 or an 8080 or a VAX or a PDP-11 or a PDP-8 or an 8088 or a 68000 or a PicoRV32</span></div><div class="line" id="025153"><span class="nick" style="color:#8dd3c7"><a href="#025153" label="[02:51:53]">&lt;muurkha&gt;</a></span><span class="message">and its programming techniques depend a lot on self-modifying code, which means you can't put the &quot;roms&quot; in ROM</span></div><div class="line" id="025223"><span class="nick" style="color:#8dd3c7"><a href="#025223" label="[02:52:23]">&lt;muurkha&gt;</a></span><span class="message">or build a Harvard processor to run them</span></div><div class="line" id="025419"><span class="nick" style="color:#8dd3c7"><a href="#025419" label="[02:54:19]">&lt;muurkha&gt;</a></span><span class="message">stage2 shows a way to do better; take <a rel="nofollow" href="https://github.com/oriansj/stage0/blob/master/stage2/lisp.s">https://github.com/oriansj/stage0/blob/master/stage2/lisp.s</a>  for example</span></div><div class="line" id="025732"><span class="nick" style="color:#8dd3c7"><a href="#025732" label="[02:57:32]">&lt;muurkha&gt;</a></span><span class="message">it's written in an assembly language for a pretty generic register machine; you could recompile it for just about any processor without much difficulty</span></div><div class="line" id="025808"><span class="nick" style="color:#8dd3c7"><a href="#025808" label="[02:58:08]">&lt;muurkha&gt;</a></span><span class="message">and only a smallish amount of performance overhead, less than 2x usually</span></div><div class="line" id="030201"><span class="nick" style="color:#8dd3c7"><a href="#030201" label="[03:02:01]">&lt;muurkha&gt;</a></span><span class="message">including all those I mentioned above</span></div><div class="line" id="033547"><span class="nick" style="color:#80b1d3"><a href="#033547" label="[03:35:47]">&lt;emilytrau[m]&gt;</a></span><span class="message">John Ericson: i did see your comment about splitting up the mes derivation for parallelism! will look into it 👀</span></div><div class="line" id="034316"><span class="nick" style="color:#6d2462"><a href="#034316" label="[03:43:16]">&lt;ericson2314&gt;</a></span><span class="message">emilytrau: great, thanks!</span></div><div class="line" id="034411"><span class="nick" style="color:#6d2462"><a href="#034411" label="[03:44:11]">&lt;ericson2314&gt;</a></span><span class="message">when I was working on CA derivations, I also would dream of trying to avoid bootstrapping mass rebuilding too :)</span></div><div class="line" id="034419"><span class="nick" style="color:#6d2462"><a href="#034419" label="[03:44:19]">&lt;ericson2314&gt;</a></span><span class="message">very excited to see this finally happen in Nixpkgs!!</span></div><div class="line" id="035837"><span class="nick" style="color:#80b1d3"><a href="#035837" label="[03:58:37]">&lt;emilytrau[m]&gt;</a></span><span class="message">John Ericson: mmm dreaming of the day content-addressed derivations gets enabled in nixpkgs :D</span></div><div class="line" id="035908"><span class="nick" style="color:#2e2a4a"><a href="#035908" label="[03:59:08]">&lt;drakonis&gt;</a></span><span class="message">muurkha: should be a fun read after resting a bit</span></div><div class="line" id="040046"><span class="nick" style="color:#8dd3c7"><a href="#040046" label="[04:00:46]">&lt;muurkha&gt;</a></span><span class="message">I think BCPL or SNOBOL originated the technique oriansj used there, with the idea that you'd implement the virtual machine instruction set in macros for your local assembler</span></div><div class="line" id="040148"><span class="nick" style="color:#6d2462"><a href="#040148" label="[04:01:48]">&lt;ericson2314&gt;</a></span><span class="message">emilytrau[m]: Hopefully we can convene a Hydra team to get merged the necessary changes to it</span></div><div class="line" id="040214"><span class="nick" style="color:#6d2462"><a href="#040214" label="[04:02:14]">&lt;ericson2314&gt;</a></span><span class="message">and then we can test it -&gt; enable it optionally -&gt; enable it by default</span></div><div class="line" id="040325"><span class="nick" style="color:#234e69"><a href="#040325" label="[04:03:25]">&lt;roconnor&gt;</a></span><span class="message">how bad would it be to make some of these bootstrap derivations fixed output?</span></div><div class="line" id="040345"><span class="nick" style="color:#234e69"><a href="#040345" label="[04:03:45]">&lt;roconnor&gt;</a></span><span class="message">That way you can live the dream today.</span></div><div class="line" id="040449"><span class="nick" style="color:#8dd3c7"><a href="#040449" label="[04:04:49]">&lt;muurkha&gt;</a></span><span class="message">you can sort of think of the core Forth words like DUP DROP @ ! ; that way, but you generally can't implement them efficiently</span></div><div class="line" id="040635"><span class="nick" style="color:#2e2a4a"><a href="#040635" label="[04:06:35]">&lt;drakonis&gt;</a></span><span class="message">largely because they don't map very well to this technique?</span></div><div class="line" id="040719"><span class="nick" style="color:#8dd3c7"><a href="#040719" label="[04:07:19]">&lt;muurkha&gt;</a></span><span class="message">well, it's more that the Forth VM isn't very similar to the 8088 or RISC-V</span></div><div class="line" id="040756"><span class="nick" style="color:#8dd3c7"><a href="#040756" label="[04:07:56]">&lt;muurkha&gt;</a></span><span class="message">if you're writing assembly for a virtual register machine you have to do register allocation yourself</span></div><div class="line" id="040818"><span class="nick" style="color:#2e2a4a"><a href="#040818" label="[04:08:18]">&lt;drakonis&gt;</a></span><span class="message">or really because common off the shelf hardware isnt the same?</span></div><div class="line" id="040826"><span class="nick" style="color:#8dd3c7"><a href="#040826" label="[04:08:26]">&lt;muurkha&gt;</a></span><span class="message">and the implementation can map some or all of the virtual machine's registers onto the target machine's registers</span></div><div class="line" id="040851"><span class="nick" style="color:#8dd3c7"><a href="#040851" label="[04:08:51]">&lt;muurkha&gt;</a></span><span class="message">except maybe on the 6502 where you'd map them to the zero page</span></div><div class="line" id="040938"><span class="nick" style="color:#8dd3c7"><a href="#040938" label="[04:09:38]">&lt;muurkha&gt;</a></span><span class="message">whereas to compile Forth efficiently your compiler needs to do the register allocation</span></div><div class="line" id="041008"><span class="nick" style="color:#8dd3c7"><a href="#041008" label="[04:10:08]">&lt;muurkha&gt;</a></span><span class="message">and the Forth syntax isn't generally amenable to being parsed by common macro assemblers either</span></div><div class="line" id="041020"><span class="nick" style="color:#8dd3c7"><a href="#041020" label="[04:10:20]">&lt;muurkha&gt;</a></span><span class="message">unlike SIL: <a rel="nofollow" href="https://wiki.c2.com/?SnobolLanguage">https://wiki.c2.com/?SnobolLanguage</a> </span></div><div class="line" id="041135"><span class="nick" style="color:#2e2a4a"><a href="#041135" label="[04:11:35]">&lt;drakonis&gt;</a></span><span class="message">you'd need an assembler with more advanced macro capabilities that isnt focused on a specific ISA, yes?</span></div><div class="line" id="041231"><span class="nick" style="color:#6d2462"><a href="#041231" label="[04:12:31]">&lt;ericson2314&gt;</a></span><span class="message">roconnor: if we just use this to rebuild the bootstrap tarball, we are doing something pretty close to that</span></div><div class="line" id="041242"><span class="nick" style="color:#389600"><a href="#041242" label="[04:12:42]">&lt;oriansj&gt;</a></span><span class="message">well sectorFORTH did a great job of showing the minimal turing subset of FORTH</span></div><div class="line" id="041247"><span class="nick" style="color:#6d2462"><a href="#041247" label="[04:12:47]">&lt;ericson2314&gt;</a></span><span class="message">(or sure, replace builtin fetch derivation with fixed output)</span></div><div class="line" id="041319"><span class="nick" style="color:#234e69"><a href="#041319" label="[04:13:19]">&lt;roconnor&gt;</a></span><span class="message">If building the tarball is deterministic.  Which it probably is?</span></div><div class="line" id="041343"><span class="nick" style="color:#234e69"><a href="#041343" label="[04:13:43]">&lt;roconnor&gt;</a></span><span class="message">I don't know what shenanagins gcc gets up to.</span></div><div class="line" id="041417"><span class="nick" style="color:#8dd3c7"><a href="#041417" label="[04:14:17]">&lt;muurkha&gt;</a></span><span class="message">roconnor: yeah, it's important to make tarballs deterministic</span></div><div class="line" id="041436"><span class="nick" style="color:#389600"><a href="#041436" label="[04:14:36]">&lt;oriansj&gt;</a></span><span class="message">muurkha: .S is defined here: <a rel="nofollow" href="https://github.com/oriansj/stage0/blob/master/stage3/inital_library.fs#L168">https://github.com/oriansj/stage0/blob/master/stage3/inital_library.fs#L168</a> </span></div><div class="line" id="041450"><span class="nick" style="color:#8dd3c7"><a href="#041450" label="[04:14:50]">&lt;muurkha&gt;</a></span><span class="message">WRT SNOBOL4 SIL, see also <a rel="nofollow" href="https://dl.acm.org/doi/pdf/10.1145/800025.1198417">https://dl.acm.org/doi/pdf/10.1145/800025.1198417</a>  pp. 607- (7/45)</span></div><div class="line" id="041606"><span class="nick" style="color:#8dd3c7"><a href="#041606" label="[04:16:06]">&lt;muurkha&gt;</a></span><span class="message">hmm, maybe Griswold 1970, 1972a is online by now</span></div><div class="line" id="041954"><span class="nick" style="color:#8dd3c7"><a href="#041954" label="[04:19:54]">&lt;muurkha&gt;</a></span><span class="message">talks more about SIL on pp.27-</span></div><div class="line" id="042339"><span class="nick" style="color:#2e2a4a"><a href="#042339" label="[04:23:39]">&lt;drakonis&gt;</a></span><span class="message">alright folks, i'll be off now</span></div><div class="line" id="042357"><span class="nick" style="color:#2e2a4a"><a href="#042357" label="[04:23:57]">&lt;drakonis&gt;</a></span><span class="message">time to get some rest</span></div><div class="line" id="042608"><span class="nick" style="color:#8dd3c7"><a href="#042608" label="[04:26:08]">&lt;muurkha&gt;</a></span><span class="message">hmm, maybe not</span></div><div class="line" id="043125"><span class="nick" style="color:#2e2a4a"><a href="#043125" label="[04:31:25]">&lt;drakonis&gt;</a></span><span class="message">SIL gets only a passing mention there</span></div><div class="line" id="043131"><span class="nick" style="color:#2e2a4a"><a href="#043131" label="[04:31:31]">&lt;drakonis&gt;</a></span><span class="message">nothing technical</span></div><div class="line" id="043139"><span class="nick" style="color:#2e2a4a"><a href="#043139" label="[04:31:39]">&lt;drakonis&gt;</a></span><span class="message">now i really should get going</span></div><div class="line" id="043731"><span class="nick" style="color:#8dd3c7"><a href="#043731" label="[04:37:31]">&lt;muurkha&gt;</a></span><span class="message">yeah, the book goes into a lot more depth</span></div><div class="line" id="073104"><span class="nick" style="color:#6c3d55"><a href="#073104" label="[07:31:04]">&lt;fossy&gt;</a></span><span class="message">stikonas, rickmasters: for single files that can't have license headers, the preferred way for reuse is a n adjacent .license file: <a rel="nofollow" href="https://reuse.software/spec/#comment-headers">https://reuse.software/spec/#comment-headers</a> </span></div><div class="line" id="152216"><span class="nick" style="color:#d9d9d9"><a href="#152216" label="[15:22:16]">&lt;rickmasters&gt;</a></span><span class="message">stikonas, oriansj: I file an Issue for guidance on moving the kernel bootstrap seed: <a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds/issues/38">https://github.com/oriansj/bootstrap-seeds/issues/38</a> </span></div><div class="line" id="152541"><span class="nick" style="color:#bc80bd"><a href="#152541" label="[15:25:41]">&lt;stikonas[m]&gt;</a></span><span class="message">I will be able to update stage0-posix once that is merged</span></div><div class="line" id="152617"><span class="nick" style="color:#bc80bd"><a href="#152617" label="[15:26:17]">&lt;stikonas[m]&gt;</a></span><span class="message">rickmasters: so we need 2 binaries in total before we start building them ourselves?</span></div><div class="line" id="152940"><span class="nick" style="color:#bc80bd"><a href="#152940" label="[15:29:40]">&lt;stikonas[m]&gt;</a></span><span class="message">Oh actually no, just one...</span></div><div class="line" id="153004"><span class="nick" style="color:#bc80bd"><a href="#153004" label="[15:30:04]">&lt;stikonas[m]&gt;</a></span><span class="message">So maybe just add readme with location of stage2</span></div><div class="line" id="153101"><span class="nick" style="color:#d9d9d9"><a href="#153101" label="[15:31:01]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: right, I think a readme is also needed to explain how to compile hex0 and kaem if you choose to use the binary+kernel bootstrap</span></div><div class="line" id="153239"><span class="nick" style="color:#bc80bd"><a href="#153239" label="[15:32:39]">&lt;stikonas[m]&gt;</a></span><span class="message">So stage1.bin, stage1.hex0 and readme then...</span></div><div class="line" id="153322"><span class="nick" style="color:#bc80bd"><a href="#153322" label="[15:33:22]">&lt;stikonas[m]&gt;</a></span><span class="message">Anyway I'll take a look at your pr in more details later (possibly over weekend)</span></div><div class="line" id="162914"><span class="nick" style="color:#3c5b35"><a href="#162914" label="[16:29:14]">&lt;pder&gt;</a></span><span class="message">rickmasters: I was testing your kernel-bootstrap-phase2-v1 branch which is really amazing work by the way.  Running rootfs.py -q completed successfully all the way to gcc 13</span></div><div class="line" id="163041"><span class="nick" style="color:#3c5b35"><a href="#163041" label="[16:30:41]">&lt;pder&gt;</a></span><span class="message">I noticed that during the builder-hex0 phase it loads in files including ones in sysc/distfiles but when make_fiwix_initrd is called all of the files in sysc/distfiles fail on copy_files because they are not present</span></div><div class="line" id="163125"><span class="nick" style="color:#3c5b35"><a href="#163125" label="[16:31:25]">&lt;pder&gt;</a></span><span class="message">After linux boots and the remaining packages are built all of the tarballs for sysc are downloaded again</span></div><div class="line" id="164049"><span class="nick" style="color:#d9d9d9"><a href="#164049" label="[16:40:49]">&lt;rickmasters&gt;</a></span><span class="message">pder: I'm not sure I understand. Are you pre-populating files from sysc? I don't think I'm seeing copy_file errors...</span></div><div class="line" id="164112"><span class="nick" style="color:#d9d9d9"><a href="#164112" label="[16:41:12]">&lt;rickmasters&gt;</a></span><span class="message">pder: I mean, are you pre-populating files in sysc/distfiles?</span></div><div class="line" id="164231"><span class="nick" style="color:#3c5b35"><a href="#164231" label="[16:42:31]">&lt;pder&gt;</a></span><span class="message">I used download-distfiles.sh to predownload all the tarballs if that is what you mean.</span></div><div class="line" id="164306"><span class="nick" style="color:#d9d9d9"><a href="#164306" label="[16:43:06]">&lt;rickmasters&gt;</a></span><span class="message">pder: ok, I haven't tried that. Thanks, I'll take a look.</span></div><div class="line" id="164419"><span class="nick" style="color:#3c5b35"><a href="#164419" label="[16:44:19]">&lt;pder&gt;</a></span><span class="message">When builder-hex0 boots up and loads files into its memory filesystem, is it supposed to include all files needed to bootstrap to the end of sysc?</span></div><div class="line" id="164828"><span class="nick" style="color:#d9d9d9"><a href="#164828" label="[16:48:28]">&lt;rickmasters&gt;</a></span><span class="message">pder: No</span></div><div class="line" id="164912"><span class="nick" style="color:#3c5b35"><a href="#164912" label="[16:49:12]">&lt;pder&gt;</a></span><span class="message">OK, actually I was wrong- builder-hex0 does not load sysc/distfiles/* into its filesystem, but fiwix-file-list.txt contains sysc/distfiles/*</span></div><div class="line" id="164955"><span class="nick" style="color:#3c5b35"><a href="#164955" label="[16:49:55]">&lt;pder&gt;</a></span><span class="message">hence the errors in copy_files in make_fiwix_initrd</span></div><div class="line" id="165436"><span class="nick" style="color:#d9d9d9"><a href="#165436" label="[16:54:36]">&lt;rickmasters&gt;</a></span><span class="message">pder: I suspect it will only work by downloading sysc packages after linux is launched due to memory constraints but maybe I can at least avoid errors...</span></div><div class="line" id="165526"><span class="nick" style="color:#3c5b35"><a href="#165526" label="[16:55:26]">&lt;pder&gt;</a></span><span class="message">maybe when generating fiwix-file-list.txt you can just ignore the sysc/distfiles directory</span></div><div class="line" id="165557"><span class="nick" style="color:#d9d9d9"><a href="#165557" label="[16:55:57]">&lt;rickmasters&gt;</a></span><span class="message">pder: right</span></div><div class="line" id="171023"><span class="nick" style="color:#bc80bd"><a href="#171023" label="[17:10:23]">&lt;stikonas[m]&gt;</a></span><span class="message">pder: you haven't used --external-sources</span></div><div class="line" id="171039"><span class="nick" style="color:#bc80bd"><a href="#171039" label="[17:10:39]">&lt;stikonas[m]&gt;</a></span><span class="message">So you start with an empty sysc disk</span></div><div class="line" id="171134"><span class="nick" style="color:#bc80bd"><a href="#171134" label="[17:11:34]">&lt;stikonas[m]&gt;</a></span><span class="message">You can't put all sysc sources into ram...</span></div><div class="line" id="171142"><span class="nick" style="color:#bc80bd"><a href="#171142" label="[17:11:42]">&lt;stikonas[m]&gt;</a></span><span class="message">It's just too much</span></div><div class="line" id="171429"><span class="nick" style="color:#d9d9d9"><a href="#171429" label="[17:14:29]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: Are the sysc/distfiles from download-distfiles.sh only used for chroot/bwrap?</span></div><div class="line" id="171812"><span class="nick" style="color:#d9d9d9"><a href="#171812" label="[17:18:12]">&lt;rickmasters&gt;</a></span><span class="message">stikonas[m]: It's a bit tricky following all the options and code paths.</span></div><div class="line" id="171908"><span class="nick" style="color:#d9d9d9"><a href="#171908" label="[17:19:08]">&lt;rickmasters&gt;</a></span><span class="message">stikonas[m]: I'll try to make sure I understand what happens with kernel bootstrap if someone uses download-distfiles.sh or --external-sources ...</span></div><div class="line" id="171936"><span class="nick" style="color:#3c5b35"><a href="#171936" label="[17:19:36]">&lt;pder&gt;</a></span><span class="message">stikonas: I don't think --external-sources would make any difference in this case because if I run rootfs.py -q --external-sources system_c.prepare() never gets called</span></div><div class="line" id="171947"><span class="nick" style="color:#bc80bd"><a href="#171947" label="[17:19:47]">&lt;stikonas[m]&gt;</a></span><span class="message">download distfiles is bash implementation of rootfs.py downloader</span></div><div class="line" id="172014"><span class="nick" style="color:#bc80bd"><a href="#172014" label="[17:20:14]">&lt;stikonas[m]&gt;</a></span><span class="message">pder: hmm</span></div><div class="line" id="172103"><span class="nick" style="color:#3c5b35"><a href="#172103" label="[17:21:03]">&lt;pder&gt;</a></span><span class="message">stikonas the else block on line 253 of rootfs.py is run</span></div><div class="line" id="172311"><span class="nick" style="color:#bc80bd"><a href="#172311" label="[17:23:11]">&lt;stikonas[m]&gt;</a></span><span class="message">Yeah, it's probably missing sysc prepare option there</span></div><div class="line" id="172322"><span class="nick" style="color:#bc80bd"><a href="#172322" label="[17:23:22]">&lt;stikonas[m]&gt;</a></span><span class="message">(In the else block)</span></div><div class="line" id="232938"><span class="nick" style="color:#389600"><a href="#232938" label="[23:29:38]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: I agree with stikonas, a simple readme with a link to where builder-hex0 can be found should be sufficient.</span></div><div class="line" id="233319"><span class="nick" style="color:#389600"><a href="#233319" label="[23:33:19]">&lt;oriansj&gt;</a></span><span class="message">and yes, that is the current master repo (until savannah changes their mind and lets us host it there)</span></div><div class="line" id="234022"><span class="nick" style="color:#af8d2f"><a href="#234022" label="[23:40:22]">&lt;probie&gt;</a></span><span class="message">Assume easily supporting multiple architectures is a high priority, and we can assume linux. Do you think it would be viable to implement a simple register based vm, write a bytecode interpreter for it in $arch, write a more full featured assembler in the vm's bytecode, and then later write &quot;compilers&quot; from the bytecode back to $arch?</span></div><div class="line" id="234142"><span class="nick" style="color:#af8d2f"><a href="#234142" label="[23:41:42]">&lt;probie&gt;</a></span><span class="message">My intuition is that this is going to fall over (or at least lose any advantage of the single portable bytecode) due to syscalls being different for different architectures</span></div><div class="line" id="234355"><span class="nick" style="color:#af8d2f"><a href="#234355" label="[23:43:55]">&lt;probie&gt;</a></span><span class="message">but perhaps that can be reduced by building in all the relevant syscalls into the vm, and just having different implementation levels of the vm where more and more syscalls are supported, instead of trying to allow it to make arbitrary syscalls?</span></div><br /></div></body></html>