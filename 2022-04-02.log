<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-04-02.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="011716"><span class="nick" style="color:#8dd3c7"><a href="#011716" label="[01:17:16]">&lt;fossy&gt;</a></span><span class="message">ew, just as I go to do the test of the PR addressing all review comments, a new reproducibility bug rears its head</span></div><div class="line" id="011729"><span class="nick" style="color:#8dd3c7"><a href="#011729" label="[01:17:29]">&lt;fossy&gt;</a></span><span class="message">this time it is the MONTH of the build being coded into the man page</span></div><div class="line" id="011731"><span class="nick" style="color:#8dd3c7"><a href="#011731" label="[01:17:31]">&lt;fossy&gt;</a></span><span class="message">why???'</span></div><div class="line" id="012529"><span class="nick" style="color:#2e2a4a"><a href="#012529" label="[01:25:29]">&lt;littlebobeep&gt;</a></span><span class="message">fossy: What code are you talking about that is not reproducable?</span></div><div class="line" id="012615"><span class="nick" style="color:#8dd3c7"><a href="#012615" label="[01:26:15]">&lt;fossy&gt;</a></span><span class="message">littlebobeep: it seems that help2man, at least by default, writes into the manpage the month and year that the manpage was generated</span></div><div class="line" id="013842"><span class="nick" style="color:#2e2a4a"><a href="#013842" label="[01:38:42]">&lt;littlebobeep&gt;</a></span><span class="message">fossy: Ohhh blasted timestamps... I won't be happy until we have no way to tell what year it is in all software</span></div><div class="line" id="013925"><span class="nick" style="color:#6b8072"><a href="#013925" label="[01:39:25]">&lt;vagrantc&gt;</a></span><span class="message">well, it's still 2020, right?</span></div><div class="line" id="014030"><span class="nick" style="color:#6b8072"><a href="#014030" label="[01:40:30]">&lt;vagrantc&gt;</a></span><span class="message">fossy: i thought a fix for that went to help2man upstream... but maybe only patched in debian? or are you using an old version of help2man?</span></div><div class="line" id="014039"><span class="nick" style="color:#6b8072"><a href="#014039" label="[01:40:39]">&lt;vagrantc&gt;</a></span><span class="message">at least, a fix to respect SOURCE_DATE_EPOCH</span></div><div class="line" id="022215"><span class="nick" style="color:#8dd3c7"><a href="#022215" label="[02:22:15]">&lt;fossy&gt;</a></span><span class="message">vagrantc: it is a old version i believe</span></div><div class="line" id="022317"><span class="nick" style="color:#8dd3c7"><a href="#022317" label="[02:23:17]">&lt;fossy&gt;</a></span><span class="message">yeah it is</span></div><div class="line" id="022420"><span class="nick" style="color:#6b8072"><a href="#022420" label="[02:24:20]">&lt;vagrantc&gt;</a></span><span class="message">for a bootstrap, disabling manpages doesn't seem unreasonable...</span></div><div class="line" id="022749"><span class="nick" style="color:#8dd3c7"><a href="#022749" label="[02:27:49]">&lt;fossy&gt;</a></span><span class="message">this is true</span></div><div class="line" id="024046"><span class="nick" style="color:#80b1d3"><a href="#024046" label="[02:40:46]">&lt;oriansj&gt;</a></span><span class="message">vagrantc: depends on where in the bootstrap chain honestly. Once one has a Guix or Nix seed, proper man pages and the rest would be expected. Below that, not needed at all.</span></div><div class="line" id="024054"><span class="nick" style="color:#6d2462"><a href="#024054" label="[02:40:54]">&lt;stikonas&gt;</a></span><span class="message">well we disable manpages before help2man was built</span></div><div class="line" id="024238"><span class="nick" style="color:#80b1d3"><a href="#024238" label="[02:42:38]">&lt;oriansj&gt;</a></span><span class="message">and could honestly skip help2man entirely and a few more things if one was willing to put in the effort to do so.</span></div><div class="line" id="024505"><span class="nick" style="color:#8dd3c7"><a href="#024505" label="[02:45:05]">&lt;fossy&gt;</a></span><span class="message">its a 1 line diff to fix help2man, i don</span></div><div class="line" id="024510"><span class="nick" style="color:#8dd3c7"><a href="#024510" label="[02:45:10]">&lt;fossy&gt;</a></span><span class="message">'t think it's too much of a problem</span></div><div class="line" id="024553"><span class="nick" style="color:#80b1d3"><a href="#024553" label="[02:45:53]">&lt;oriansj&gt;</a></span><span class="message">it also depends on how one in to interpret the stated goal of &quot;supported fully functioning operating system&quot;</span></div><div class="line" id="024637"><span class="nick" style="color:#80b1d3"><a href="#024637" label="[02:46:37]">&lt;oriansj&gt;</a></span><span class="message">^in^is^</span></div><div class="line" id="024735"><span class="nick" style="color:#80b1d3"><a href="#024735" label="[02:47:35]">&lt;oriansj&gt;</a></span><span class="message">does one need man pages? a web browser? irc client? emacs?</span></div><div class="line" id="024954"><span class="nick" style="color:#80b1d3"><a href="#024954" label="[02:49:54]">&lt;oriansj&gt;</a></span><span class="message">full package manager?</span></div><div class="line" id="025352"><span class="nick" style="color:#234e69"><a href="#025352" label="[02:53:52]">&lt;muurkha&gt;</a></span><span class="message">tetris</span></div><div class="line" id="025622"><span class="nick" style="color:#80b1d3"><a href="#025622" label="[02:56:22]">&lt;oriansj&gt;</a></span><span class="message">muurkha: interesting, no need for gcc just a minimal assembler built by TCC and *BOOM* done</span></div><div class="line" id="025700"><span class="nick" style="color:#234e69"><a href="#025700" label="[02:57:00]">&lt;muurkha&gt;</a></span><span class="message">as long as it can assemble itself</span></div><div class="line" id="025742"><span class="nick" style="color:#80b1d3"><a href="#025742" label="[02:57:42]">&lt;oriansj&gt;</a></span><span class="message">muurkha: well there are kernels written in assembly</span></div><div class="line" id="025748"><span class="nick" style="color:#234e69"><a href="#025748" label="[02:57:48]">&lt;muurkha&gt;</a></span><span class="message">the nand2tetris kids put together a C-level language called &quot;Jack&quot; which is designed to be easy to parse by recursive descent (even easier than Pascal)</span></div><div class="line" id="025759"><span class="nick" style="color:#234e69"><a href="#025759" label="[02:57:59]">&lt;muurkha&gt;</a></span><span class="message">yup, and plenty of assemblers written in it too</span></div><div class="line" id="030020"><span class="nick" style="color:#80b1d3"><a href="#030020" label="[03:00:20]">&lt;oriansj&gt;</a></span><span class="message">muurkha: well M2-Planet's C parser is just 366 lines of C and bootstrapping that in assembly is a straightforward task these days</span></div><div class="line" id="030052"><span class="nick" style="color:#80b1d3"><a href="#030052" label="[03:00:52]">&lt;oriansj&gt;</a></span><span class="message">and we can get to TCC pretty quick</span></div><div class="line" id="030114"><span class="nick" style="color:#80b1d3"><a href="#030114" label="[03:01:14]">&lt;oriansj&gt;</a></span><span class="message">so a kernel written in the C subset that TCC supports also would count</span></div><div class="line" id="030142"><span class="nick" style="color:#80b1d3"><a href="#030142" label="[03:01:42]">&lt;oriansj&gt;</a></span><span class="message">(I believe it can do Linux right?)</span></div><div class="line" id="030227"><span class="nick" style="color:#234e69"><a href="#030227" label="[03:02:27]">&lt;muurkha&gt;</a></span><span class="message">I think a hacked version of TCC could do a hacked version of Linux 15 years ago</span></div><div class="line" id="030301"><span class="nick" style="color:#234e69"><a href="#030301" label="[03:03:01]">&lt;muurkha&gt;</a></span><span class="message">not sure if anyone has gotten tccboot to work with recent versions of Linux</span></div><div class="line" id="030334"><span class="nick" style="color:#80b1d3"><a href="#030334" label="[03:03:34]">&lt;oriansj&gt;</a></span><span class="message">but ultimately it is up to fossy and stikonas to decide where the end goal is (unless someone else is willing to carry the work)</span></div><div class="line" id="030439"><span class="nick" style="color:#234e69"><a href="#030439" label="[03:04:39]">&lt;muurkha&gt;</a></span><span class="message">aye</span></div><div class="line" id="030501"><span class="nick" style="color:#234e69"><a href="#030501" label="[03:05:01]">&lt;muurkha&gt;</a></span><span class="message">hope I didn't sound like I thought otherwise</span></div><div class="line" id="030606"><span class="nick" style="color:#234e69"><a href="#030606" label="[03:06:06]">&lt;muurkha&gt;</a></span><span class="message">I was just saying, tetris is the pinnacle of all software</span></div><div class="line" id="030636"><span class="nick" style="color:#234e69"><a href="#030636" label="[03:06:36]">&lt;muurkha&gt;</a></span><span class="message">this leads to the uncomfortable conclusion that a Gameboy has a &quot;supported fully functioning operating system&quot; though</span></div><div class="line" id="030701"><span class="nick" style="color:#80b1d3"><a href="#030701" label="[03:07:01]">&lt;oriansj&gt;</a></span><span class="message">muurkha: I'm far more partial to warzone2100</span></div><div class="line" id="030749"><span class="nick" style="color:#80b1d3"><a href="#030749" label="[03:07:49]">&lt;oriansj&gt;</a></span><span class="message">I never switch to a distro that doesn't support it</span></div><div class="line" id="030847"><span class="nick" style="color:#80b1d3"><a href="#030847" label="[03:08:47]">&lt;oriansj&gt;</a></span><span class="message">also nanochess's tetris: <a rel="nofollow" href="https://github.com/nanochess/tetranglix">https://github.com/nanochess/tetranglix</a> </span></div><div class="line" id="030908"><span class="nick" style="color:#80b1d3"><a href="#030908" label="[03:09:08]">&lt;oriansj&gt;</a></span><span class="message">muurkha: would indicate one can have tetris without even having an Operating system</span></div><div class="line" id="030929"><span class="nick" style="color:#234e69"><a href="#030929" label="[03:09:29]">&lt;muurkha&gt;</a></span><span class="message">semantics! :)</span></div><div class="line" id="030949"><span class="nick" style="color:#234e69"><a href="#030949" label="[03:09:49]">&lt;muurkha&gt;</a></span><span class="message">I hadn't seen tetranglix</span></div><div class="line" id="031133"><span class="nick" style="color:#234e69"><a href="#031133" label="[03:11:33]">&lt;muurkha&gt;</a></span><span class="message">it claims to be an &quot;OS&quot; but that's a bit of a stretch really</span></div><div class="line" id="031237"><span class="nick" style="color:#234e69"><a href="#031237" label="[03:12:37]">&lt;muurkha&gt;</a></span><span class="message">it turns out it's not originally or primarily by Óscar Toledo G., he just removed the 386 dependencies</span></div><div class="line" id="031251"><span class="nick" style="color:#234e69"><a href="#031251" label="[03:12:51]">&lt;muurkha&gt;</a></span><span class="message">it's mostly by Shikhin Sethi</span></div><div class="line" id="031315"><span class="nick" style="color:#80b1d3"><a href="#031315" label="[03:13:15]">&lt;oriansj&gt;</a></span><span class="message">muurkha: fair point</span></div><div class="line" id="032233"><span class="nick" style="color:#80b1d3"><a href="#032233" label="[03:22:33]">&lt;oriansj&gt;</a></span><span class="message">back to the original point, perhaps now is the time to maybe make a list of what the final goal pieces would be</span></div><div class="line" id="032838"><span class="nick" style="color:#234e69"><a href="#032838" label="[03:28:38]">&lt;muurkha&gt;</a></span><span class="message">if you can build gcc or clang you can probably build an irc client or emacs</span></div><div class="line" id="032905"><span class="nick" style="color:#234e69"><a href="#032905" label="[03:29:05]">&lt;muurkha&gt;</a></span><span class="message">firefox may be a bit tricky due to the rust in servo, not sure how far along bootstrapping rust is</span></div><div class="line" id="032931"><span class="nick" style="color:#234e69"><a href="#032931" label="[03:29:31]">&lt;muurkha&gt;</a></span><span class="message">I think Chromium is pure C++?  probably requires a very recent gcc or clang?</span></div><div class="line" id="033019"><span class="nick" style="color:#234e69"><a href="#033019" label="[03:30:19]">&lt;muurkha&gt;</a></span><span class="message">at some point the Debian reproducible builds project provides a roadmap</span></div><div class="line" id="033430"><span class="nick" style="color:#80b1d3"><a href="#033430" label="[03:34:30]">&lt;oriansj&gt;</a></span><span class="message">well last I checked rust is fully boostrapped (it just is a little memory hungry)</span></div><div class="line" id="033511"><span class="nick" style="color:#234e69"><a href="#033511" label="[03:35:11]">&lt;muurkha&gt;</a></span><span class="message">oh wonderful!</span></div><div class="line" id="033531"><span class="nick" style="color:#234e69"><a href="#033531" label="[03:35:31]">&lt;muurkha&gt;</a></span><span class="message">that probably covers firefox then?  hopefully it doesn't require JS to bootstrap?  ;)</span></div><div class="line" id="033724"><span class="nick" style="color:#80b1d3"><a href="#033724" label="[03:37:24]">&lt;oriansj&gt;</a></span><span class="message">muurkha: that I just don't know</span></div><div class="line" id="033800"><span class="nick" style="color:#80b1d3"><a href="#033800" label="[03:38:00]">&lt;oriansj&gt;</a></span><span class="message">jquery and the bunch however are pretty fucked right now as far as I am aware, in regards to bootstrappability right now</span></div><div class="line" id="033826"><span class="nick" style="color:#80b1d3"><a href="#033826" label="[03:38:26]">&lt;oriansj&gt;</a></span><span class="message">So that could use about 10 years worth of attention</span></div><div class="line" id="033912"><span class="nick" style="color:#234e69"><a href="#033912" label="[03:39:12]">&lt;muurkha&gt;</a></span><span class="message">that's interesting, what's the problem?  can't you run them without minifying them first?</span></div><div class="line" id="035709"><span class="nick" style="color:#80b1d3"><a href="#035709" label="[03:57:09]">&lt;oriansj&gt;</a></span><span class="message">muurkha: I must admit I don't know the details but I do know everyone who gets started doing Javascript bootstrapping, quickly gives up. Even those in the Guix/Nix/Debian/Ubuntu/Red Hat/Arch Communitites</span></div><div class="line" id="043000"><span class="nick" style="color:#2e2a4a"><a href="#043000" label="[04:30:00]">&lt;littlebobeep&gt;</a></span><span class="message">Yeah I am using an Electron app and I hate it &gt;_&lt;</span></div><div class="line" id="082630"><span class="nick" style="color:#6c3d55"><a href="#082630" label="[08:26:30]">&lt;nimaje&gt;</a></span><span class="message">oriansj: small nit-pick it is (mostly) up to the program to support an os and not the os to support an program, there is some stuff an os can do to make it easier like implementing posix (ok and there is stuff like wine, freebsds linuxemu and wsl)</span></div><div class="line" id="083812"><span class="nick" style="color:#6c3d55"><a href="#083812" label="[08:38:12]">&lt;nimaje&gt;</a></span><span class="message">in freebsd ports firefox has a build dependency on nodejs, but no idea what it is used for (where the heck does one find a list of dependencies for building firefox? their docs only say curl and python3, which is obviously incomplete and curl is probably just used to download some of the dependencies)</span></div><div class="line" id="090554"><span class="nick" style="color:#2e2a4a"><a href="#090554" label="[09:05:54]">&lt;littlebobeep&gt;</a></span><span class="message">nimaje: in gnuzilla.scm in guix there are over 50 build dependcies listed for icecate... including llvm and clang which is strange because it says gnu-build-system</span></div><div class="line" id="090656"><span class="nick" style="color:#2e2a4a"><a href="#090656" label="[09:06:56]">&lt;littlebobeep&gt;</a></span><span class="message">But further down it specifies clang and clang++ and llvm-ar and llvm-nm env variables for build I don't know why it uses those</span></div><div class="line" id="154316"><span class="nick" style="color:#80b1d3"><a href="#154316" label="[15:43:16]">&lt;oriansj&gt;</a></span><span class="message">nimaje: I can see that traditional perspective as entirely valid and generally a good idea</span></div><div class="line" id="155234"><span class="nick" style="color:#80b1d3"><a href="#155234" label="[15:52:34]">&lt;oriansj&gt;</a></span><span class="message">however the adoption of KolibriOS, L4Sec and the systemd ecosystem debate seem to indicate the value of compatibility is huge; just like the value of portability for programs is huge as well</span></div><div class="line" id="155541"><span class="nick" style="color:#80b1d3"><a href="#155541" label="[15:55:41]">&lt;oriansj&gt;</a></span><span class="message">So it would be reasonable when doing kernel development to be willing provide functionality that you need to run the programs that matter to you. (aka the *BSDs linux compatibility layer, WINE, etc) Either in user or kernel space</span></div><div class="line" id="160024"><span class="nick" style="color:#80b1d3"><a href="#160024" label="[16:00:24]">&lt;oriansj&gt;</a></span><span class="message">so for the perspective of a bootstrap kernel (which I will ultimately write in assembly) supporting the bare subset of syscalls needed to get TCC up and running is probably the ideal. As after that a more powerful and complex kernel built by TCC could be used.</span></div><div class="line" id="161018"><span class="nick" style="color:#80b1d3"><a href="#161018" label="[16:10:18]">&lt;oriansj&gt;</a></span><span class="message">littlebobeep: the reason for llvm and clang is because they are needed for Rust which is needed to build firefox</span></div><div class="line" id="181432"><span class="nick" style="color:#234e69"><a href="#181432" label="[18:14:32]">&lt;muurkha&gt;</a></span><span class="message">it wouldn't be terribly surprising if Firefox incorporated LLVM to implement JS, though I haven't heard that it does that</span></div><div class="line" id="184110"><span class="nick" style="color:#80b1d3"><a href="#184110" label="[18:41:10]">&lt;oriansj&gt;</a></span><span class="message">muurkha: I have doubts on the ability for anyone to fully understand everything in a 100MB binary</span></div><div class="line" id="184234"><span class="nick" style="color:#234e69"><a href="#184234" label="[18:42:34]">&lt;muurkha&gt;</a></span><span class="message">me too.  you might be able to write ACL2 proofs about it</span></div><div class="line" id="184705"><span class="nick" style="color:#80b1d3"><a href="#184705" label="[18:47:05]">&lt;oriansj&gt;</a></span><span class="message">with the number of leaky abstractions required to produce a binary of that size; I have doubts</span></div><div class="line" id="184818"><span class="nick" style="color:#234e69"><a href="#184818" label="[18:48:18]">&lt;muurkha&gt;</a></span><span class="message">well, the seL4 proofs only rely on the formalization of the part of the CPU instruction set they're using</span></div><div class="line" id="184829"><span class="nick" style="color:#234e69"><a href="#184829" label="[18:48:29]">&lt;muurkha&gt;</a></span><span class="message">but didn't cover spectre/meltdown as I understand it?</span></div><div class="line" id="184859"><span class="nick" style="color:#80b1d3"><a href="#184859" label="[18:48:59]">&lt;oriansj&gt;</a></span><span class="message">muurkha: indeed and were vulnerable to it</span></div><div class="line" id="184938"><span class="nick" style="color:#80b1d3"><a href="#184938" label="[18:49:38]">&lt;oriansj&gt;</a></span><span class="message">consider even the trivial case of a C# program using .NET-core; hello-world.cs is a 140MB binary.</span></div><div class="line" id="185102"><span class="nick" style="color:#234e69"><a href="#185102" label="[18:51:02]">&lt;muurkha&gt;</a></span><span class="message">most of which can be statically proven not to run, presumably</span></div><div class="line" id="185352"><span class="nick" style="color:#80b1d3"><a href="#185352" label="[18:53:52]">&lt;oriansj&gt;</a></span><span class="message">muurkha: well no and attacks exist against hello-world.cs</span></div><div class="line" id="192623"><span class="nick" style="color:#d9d9d9"><a href="#192623" label="[19:26:23]">&lt;bauen1&gt;</a></span><span class="message">the good thing about proofs is that they're very easy (or rather cheap) to verify, so as long as you have hardware that actually does what it says (and what your proof assumes) you will be good</span></div><div class="line" id="192733"><span class="nick" style="color:#234e69"><a href="#192733" label="[19:27:33]">&lt;muurkha&gt;</a></span><span class="message">another good thing about them is that you don't have to choose which hardware or which software you'll trust</span></div><div class="line" id="192809"><span class="nick" style="color:#234e69"><a href="#192809" label="[19:28:09]">&lt;muurkha&gt;</a></span><span class="message">you can check the same proof witness with every implementation of Metamath Zero (except the ones that are broken)</span></div><div class="line" id="192835"><span class="nick" style="color:#234e69"><a href="#192835" label="[19:28:35]">&lt;muurkha&gt;</a></span><span class="message">by contrast, you cannot generate the same binary with every compiler except the ones that are broken</span></div><div class="line" id="193042"><span class="nick" style="color:#234e69"><a href="#193042" label="[19:30:42]">&lt;muurkha&gt;</a></span><span class="message">and although you may be able to generate the same binary with the same compiler running on different hardware, or the same compiler compiled with different compilers, the binaries can mismatch for innocent reasons if your compiler is written in a language that isn't fully deterministic</span></div><div class="line" id="193129"><span class="nick" style="color:#234e69"><a href="#193129" label="[19:31:29]">&lt;muurkha&gt;</a></span><span class="message">it's a different approach than the one we've been pursuing though</span></div><div class="line" id="220340"><span class="nick" style="color:#80b1d3"><a href="#220340" label="[22:03:40]">&lt;oriansj&gt;</a></span><span class="message">muurkha: very true; formal correctness would be nice to see for future applications but it is an additional layer of work which really doesn't fit in low level bootstrapping.</span></div><div class="line" id="220444"><span class="nick" style="color:#80b1d3"><a href="#220444" label="[22:04:44]">&lt;oriansj&gt;</a></span><span class="message">(not that I would reject if someone did formal proofs of correctness for stage0-posix steps)</span></div><div class="line" id="222125"><span class="nick" style="color:#234e69"><a href="#222125" label="[22:21:25]">&lt;muurkha&gt;</a></span><span class="message">well, it's an alternative approach: write your kernel and compiler and proof assistant in whatever language you like, write your proof witness checker in bare-metal machine code, and then write proofs of the machine code of your kernel and compiler.  pretty much what seL4 did</span></div><div class="line" id="222444"><span class="nick" style="color:#80b1d3"><a href="#222444" label="[22:24:44]">&lt;oriansj&gt;</a></span><span class="message">muurkha: 510bytes is pretty tight to put a kernel, compiler and proof assistant</span></div><div class="line" id="222449"><span class="nick" style="color:#234e69"><a href="#222449" label="[22:24:49]">&lt;muurkha&gt;</a></span><span class="message">(at an earlier stage of the project they only wrote proofs of their source code, and I'm not sure if they've done the bare-metal proof witness checker yet)</span></div><div class="line" id="222517"><span class="nick" style="color:#234e69"><a href="#222517" label="[22:25:17]">&lt;muurkha&gt;</a></span><span class="message">the kernel, compiler, and proof assistant can be however big you want, written in any language you want</span></div><div class="line" id="222532"><span class="nick" style="color:#234e69"><a href="#222532" label="[22:25:32]">&lt;muurkha&gt;</a></span><span class="message">and you don't have to run the proof witness checker on an IBM PC either</span></div><div class="line" id="222552"><span class="nick" style="color:#80b1d3"><a href="#222552" label="[22:25:52]">&lt;oriansj&gt;</a></span><span class="message">muurkha: the root bootstrap seed for x86 hardware can't be larger than 510 bytes</span></div><div class="line" id="222634"><span class="nick" style="color:#234e69"><a href="#222634" label="[22:26:34]">&lt;muurkha&gt;</a></span><span class="message">right, but you can run the proof witness checker on non-x86 hardware.  you can burn a PROM with it if you want</span></div><div class="line" id="222656"><span class="nick" style="color:#80b1d3"><a href="#222656" label="[22:26:56]">&lt;oriansj&gt;</a></span><span class="message">hence the suggestion it being done in a later stage for simplicity</span></div><div class="line" id="222751"><span class="nick" style="color:#80b1d3"><a href="#222751" label="[22:27:51]">&lt;oriansj&gt;</a></span><span class="message">aka it is much easier to do with TCC or even just the M2-Planet C subset than having to do it in hex0</span></div><div class="line" id="234237"><span class="nick">***</span><span class="message notice">genr8eofl__ is now known as genr8eofl</span></div><div class="line" id="235414"><span class="nick" style="color:#234e69"><a href="#235414" label="[23:54:14]">&lt;muurkha&gt;</a></span><span class="message">yeah, but what I'm saying is that it's not a different stage of the same process, it's an alternative approach to solving the same problem</span></div><br /></div></body></html>