<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-08-09.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000221"><span class="nick" style="color:#389600"><a href="#000221" label="[00:02:21]">&lt;stikonas&gt;</a></span><span class="message">true...</span></div><div class="line" id="000326"><span class="nick" style="color:#2e2a4a"><a href="#000326" label="[00:03:26]">&lt;oriansj&gt;</a></span><span class="message">it'll become more important as you approach cc_*</span></div><div class="line" id="000430"><span class="nick" style="color:#389600"><a href="#000430" label="[00:04:30]">&lt;stikonas&gt;</a></span><span class="message">yes, as the number of functions and complexity is growing...</span></div><div class="line" id="000431"><span class="nick" style="color:#2e2a4a"><a href="#000431" label="[00:04:31]">&lt;oriansj&gt;</a></span><span class="message">first pass stuff is simple enough to be clever and do neat optimizations but those will bite you hard later on. I learned that the hard way when I was trying to do FORTH in assembly.</span></div><div class="line" id="000546"><span class="nick" style="color:#2e2a4a"><a href="#000546" label="[00:05:46]">&lt;oriansj&gt;</a></span><span class="message">one could say writing a FORTH was the most painful learning experience in assembly programming I have ever had. But what it taught me (don't be clever), I'll never forget when working in assembly..</span></div><div class="line" id="000640"><span class="nick" style="color:#389600"><a href="#000640" label="[00:06:40]">&lt;stikonas&gt;</a></span><span class="message">well, at least by the time we need to write cc_* we won't have to manually hexify...</span></div><div class="line" id="000744"><span class="nick" style="color:#2e2a4a"><a href="#000744" label="[00:07:44]">&lt;oriansj&gt;</a></span><span class="message">yep and you should have some good assembly programming habits down that'll be useful for the rest of your programming career</span></div><div class="line" id="000943"><span class="nick" style="color:#389600"><a href="#000943" label="[00:09:43]">&lt;stikonas&gt;</a></span><span class="message">well, so far I didn't have to use assembly...</span></div><div class="line" id="001030"><span class="nick" style="color:#389600"><a href="#001030" label="[00:10:30]">&lt;stikonas&gt;</a></span><span class="message">but yes, it's still a good idea to have some assembly skills/habit</span></div><div class="line" id="001101"><span class="nick" style="color:#2e2a4a"><a href="#001101" label="[00:11:01]">&lt;oriansj&gt;</a></span><span class="message">stikonas: if you know how to program in assembly and port M2-Planet to that architecture, you'll develop a feel for the why and how of compilers.</span></div><div class="line" id="001136"><span class="nick" style="color:#2e2a4a"><a href="#001136" label="[00:11:36]">&lt;oriansj&gt;</a></span><span class="message">which makes debugging and understanding issues much easier.</span></div><div class="line" id="001138"><span class="nick" style="color:#389600"><a href="#001138" label="[00:11:38]">&lt;stikonas&gt;</a></span><span class="message">I suspect I might need AMD64 more than risc-v though... But I guess there are a lot of similarities</span></div><div class="line" id="001154"><span class="nick" style="color:#389600"><a href="#001154" label="[00:11:54]">&lt;stikonas&gt;</a></span><span class="message">different assembly dialects are more similar than assembly vs C</span></div><div class="line" id="001214"><span class="nick" style="color:#2e2a4a"><a href="#001214" label="[00:12:14]">&lt;oriansj&gt;</a></span><span class="message">stikonas: there is far less differences at that level than you would expect.</span></div><div class="line" id="001253"><span class="nick" style="color:#389600"><a href="#001253" label="[00:12:53]">&lt;stikonas&gt;</a></span><span class="message">well, I already noticed that... After all I did look a lot at other architectures when writing risc-v stuff</span></div><div class="line" id="001304"><span class="nick" style="color:#2e2a4a"><a href="#001304" label="[00:13:04]">&lt;oriansj&gt;</a></span><span class="message">mostly it is just syscall numbers and what registers need to be used for syscalls. The rest is identical.</span></div><div class="line" id="001405"><span class="nick" style="color:#389600"><a href="#001405" label="[00:14:05]">&lt;stikonas&gt;</a></span><span class="message">I guess most of the difference is actually in binary layer... How all those instructions are encoded</span></div><div class="line" id="002301"><span class="nick" style="color:#2e2a4a"><a href="#002301" label="[00:23:01]">&lt;oriansj&gt;</a></span><span class="message">and what arbitrary restrictions the hardware force us to work around.</span></div><div class="line" id="002355"><span class="nick" style="color:#2e2a4a"><a href="#002355" label="[00:23:55]">&lt;oriansj&gt;</a></span><span class="message">like needing to do multiple instructions to load a 32bit immediate or not enough registers or really messed up stack support.</span></div><div class="line" id="002528"><span class="nick" style="color:#2e2a4a"><a href="#002528" label="[00:25:28]">&lt;oriansj&gt;</a></span><span class="message">AArch64 needs one to avoid using the stack pointer when working with the stack because '&quot;reasons&quot;'</span></div><div class="line" id="002645"><span class="nick" style="color:#2e2a4a"><a href="#002645" label="[00:26:45]">&lt;oriansj&gt;</a></span><span class="message">load relative immediate and jump over tends to be popular in RISC architectures. I think PowerPC makes that even more complicated.</span></div><div class="line" id="013421"><span class="nick" style="color:#6b8072"><a href="#013421" label="[01:34:21]">&lt;xentrac&gt;</a></span><span class="message">I think &quot;don't be clever&quot; is the most important lesson of Forth :)</span></div><div class="line" id="013438"><span class="nick" style="color:#6b8072"><a href="#013438" label="[01:34:38]">&lt;xentrac&gt;</a></span><span class="message">21:41 &lt;@oriansj&gt; standardize on 1-2 registers for returns and make sure all other registers are in the state</span></div><div class="line" id="013441"><span class="nick" style="color:#6b8072"><a href="#013441" label="[01:34:41]">&lt;xentrac&gt;</a></span><span class="message">                 they were when the function was called before you do the return.</span></div><div class="line" id="013457"><span class="nick" style="color:#6b8072"><a href="#013457" label="[01:34:57]">&lt;xentrac&gt;</a></span><span class="message">not sure the callee-saves-everything calling convention is the optimal calling convention :D</span></div><div class="line" id="013754"><span class="nick" style="color:#6b8072"><a href="#013754" label="[01:37:54]">&lt;xentrac&gt;</a></span><span class="message">I mean, whatever calling convention you use, it's important to follow it.  but following a calling convention that has a few callee-clobbers registers can be significantly less of a hassle.  you can just use them freely whenever, as long as you don't have a call in the middle</span></div><div class="line" id="013900"><span class="nick" style="color:#6b8072"><a href="#013900" label="[01:39:00]">&lt;xentrac&gt;</a></span><span class="message">it's pretty convenient for things like doing an address calculation or a little bit of arithmetic</span></div><div class="line" id="014152"><span class="nick" style="color:#2e2a4a"><a href="#014152" label="[01:41:52]">&lt;oriansj&gt;</a></span><span class="message">xentrac: it is definitely not the optimal calling convention in terms of CPU efficiency but it is optimal in terms of least number of bugs when writing by hand.</span></div><div class="line" id="014305"><span class="nick" style="color:#2e2a4a"><a href="#014305" label="[01:43:05]">&lt;oriansj&gt;</a></span><span class="message">but I have to agree after 6weeks of full time debugging to just get 1500 working lines of assembly that &quot;don't be clever&quot; is definitely the most important lesson of FORTH.</span></div><div class="line" id="014407"><span class="nick" style="color:#6b8072"><a href="#014407" label="[01:44:07]">&lt;xentrac&gt;</a></span><span class="message">is it?  I mean, if a register is callee-saved, you have a bug if the callee forgets to save it.  but if a register is caller-saved, you have a bug if the caller forgets to save it.  the only difference is that leaf subroutines can't have the second kind of bug, right?</span></div><div class="line" id="014448"><span class="nick" style="color:#6b8072"><a href="#014448" label="[01:44:48]">&lt;xentrac&gt;</a></span><span class="message">I guess there's a second difference, which is that if you have several calls in the same subroutine, each one is a place where you can forget to save a caller-saved register</span></div><div class="line" id="014516"><span class="nick" style="color:#6b8072"><a href="#014516" label="[01:45:16]">&lt;xentrac&gt;</a></span><span class="message">but usually you don't actually save &quot;caller-saved&quot; registers, you just don't use them for values that need to survive a call</span></div><div class="line" id="014724"><span class="nick" style="color:#6b8072"><a href="#014724" label="[01:47:24]">&lt;xentrac&gt;</a></span><span class="message">I'll think about your advice when I write a bunch of assembly, though.  I think you have more experience writing working assembly programs than I do ;)</span></div><div class="line" id="014810"><span class="nick" style="color:#2e2a4a"><a href="#014810" label="[01:48:10]">&lt;oriansj&gt;</a></span><span class="message">well callee-saved just needs a single saving of the registers you are going to change during the running of the function at the start (except for R0 and possibly R1 if you are returning values in them) and a mirror clean up prior to the return.</span></div><div class="line" id="014910"><span class="nick" style="color:#2e2a4a"><a href="#014910" label="[01:49:10]">&lt;oriansj&gt;</a></span><span class="message">no other cognative overhead required.</span></div><div class="line" id="014951"><span class="nick" style="color:#2e2a4a"><a href="#014951" label="[01:49:51]">&lt;oriansj&gt;</a></span><span class="message">So when you start using another register, add a push at the start and a pop before the return. Boom, no longer need to care</span></div><div class="line" id="022109"><span class="nick" style="color:#2e2a4a"><a href="#022109" label="[02:21:09]">&lt;oriansj&gt;</a></span><span class="message">and once I finish verifying mescc-tools for AArch64, there will be an update for stage0-posix using the new hex2 and M1 with baseline RISC-V support.</span></div><div class="line" id="022254"><span class="nick" style="color:#6b8072"><a href="#022254" label="[02:22:54]">&lt;xentrac&gt;</a></span><span class="message">right, I mean, caller-saved doesn't need any saving most of the time.  no pushes, no pops, no worries.  you just can't use the register across calls; if you want the value in it you have to store it somewhere before making the call</span></div><div class="line" id="022625"><span class="nick" style="color:#2e2a4a"><a href="#022625" label="[02:26:25]">&lt;oriansj&gt;</a></span><span class="message">xentrac: which is why it is easier for Compilers to do and honestly works beautifully there.</span></div><div class="line" id="031933"><span class="nick" style="color:#2e2a4a"><a href="#031933" label="[03:19:33]">&lt;oriansj&gt;</a></span><span class="message">and updated stage0-posix is now up</span></div><div class="line" id="032100"><span class="nick" style="color:#6b8072"><a href="#032100" label="[03:21:00]">&lt;xentrac&gt;</a></span><span class="message">yay</span></div><div class="line" id="033105"><span class="nick" style="color:#6b8072"><a href="#033105" label="[03:31:05]">&lt;xentrac&gt;</a></span><span class="message">ugh: <a rel="nofollow" href="https://github.com/riscv/riscv-elf-psabi-doc/blob/master/riscv-elf.md#relocations">https://github.com/riscv/riscv-elf-psabi-doc/blob/master/riscv-elf.md#relocations</a> </span></div><div class="line" id="033359"><span class="nick" style="color:#2e2a4a"><a href="#033359" label="[03:33:59]">&lt;oriansj&gt;</a></span><span class="message">xentrac: thank god we don't have to give a shit about any of that</span></div><div class="line" id="050818"><span class="nick" style="color:#6b8072"><a href="#050818" label="[05:08:18]">&lt;xentrac&gt;</a></span><span class="message">oriansj: haha</span></div><div class="line" id="204012"><span class="nick">***</span><span class="message notice">jackhill_ is now known as jackhill</span></div><div class="line" id="221755"><span class="nick" style="color:#389600"><a href="#221755" label="[22:17:55]">&lt;stikonas&gt;</a></span><span class="message">oriansj: can we pull in new bootstrap-seeds submodule into stage0-posix <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/pull/34/files">https://github.com/oriansj/stage0-posix/pull/34/files</a>  It's just risc-v stuff, so shouldn't break anything else</span></div><div class="line" id="224949"><span class="nick" style="color:#80b1d3"><a href="#224949" label="[22:49:49]">&lt;Hagfish&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.sigstore.dev/">https://www.sigstore.dev/</a> </span></div><div class="line" id="225000"><span class="nick" style="color:#80b1d3"><a href="#225000" label="[22:50:00]">&lt;Hagfish&gt;</a></span><span class="message">wow, that actually looks like it could improve things</span></div><div class="line" id="225016"><span class="nick" style="color:#80b1d3"><a href="#225016" label="[22:50:16]">&lt;Hagfish&gt;</a></span><span class="message">it even mandates transparency logs for software</span></div><div class="line" id="225022"><span class="nick" style="color:#80b1d3"><a href="#225022" label="[22:50:22]">&lt;Hagfish&gt;</a></span><span class="message">more like transparency pogs, amirite?</span></div><div class="line" id="225025"><span class="nick" style="color:#6d2462"><a href="#225025" label="[22:50:25]">&lt;drakonis&gt;</a></span><span class="message">pls</span></div><div class="line" id="225032"><span class="nick" style="color:#6d2462"><a href="#225032" label="[22:50:32]">&lt;drakonis&gt;</a></span><span class="message">guix everything up my guy</span></div><div class="line" id="225242"><span class="nick" style="color:#80b1d3"><a href="#225242" label="[22:52:42]">&lt;Hagfish&gt;</a></span><span class="message">i guess it probably has the design goal that everyone will keep using language-specific package managers, which i think is an antipattern that software needs to move away from</span></div><div class="line" id="225329"><span class="nick" style="color:#80b1d3"><a href="#225329" label="[22:53:29]">&lt;Hagfish&gt;</a></span><span class="message">*design assumption</span></div><div class="line" id="233825"><span class="nick" style="color:#234e69"><a href="#233825" label="[23:38:25]">&lt;civodul&gt;</a></span><span class="message">signatures instead of verification</span></div><div class="line" id="233859"><span class="nick" style="color:#234e69"><a href="#233859" label="[23:38:59]">&lt;civodul&gt;</a></span><span class="message">i prefer verifiability :-)</span></div><div class="line" id="234152"><span class="nick" style="color:#234e69"><a href="#234152" label="[23:41:52]">&lt;civodul&gt;</a></span><span class="message">i suppose it's in part a way to grab US government funding &amp; attention via the executive order on software supply chain security mentioned in <a rel="nofollow" href="https://www.wired.com/story/sigstore-open-source-supply-chain-code-signing/">https://www.wired.com/story/sigstore-open-source-supply-chain-code-signing/</a> </span></div><div class="line" id="235558"><span class="nick" style="color:#389600"><a href="#235558" label="[23:55:58]">&lt;stikonas&gt;</a></span><span class="message">how are they going to achieve immutable logs?</span></div><div class="line" id="235605"><span class="nick" style="color:#6c3d55"><a href="#235605" label="[23:56:05]">&lt;vagrantc&gt;</a></span><span class="message">yeah, signatures just allow a framework for &quot;trust us, or them, or someone, but do just go ahead and trust them&quot;</span></div><div class="line" id="235631"><span class="nick" style="color:#389600"><a href="#235631" label="[23:56:31]">&lt;stikonas&gt;</a></span><span class="message">are they going to store signature in bitcoin blockchain...</span></div><br /></div></body></html>