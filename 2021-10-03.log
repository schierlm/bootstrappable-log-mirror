<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-10-03.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000047"><span class="nick" style="color:#389600"><a href="#000047" label="[00:00:47]">&lt;stikonas&gt;</a></span><span class="message">yeah, a lot of 32-bit constants</span></div><div class="line" id="000057"><span class="nick" style="color:#389600"><a href="#000057" label="[00:00:57]">&lt;stikonas&gt;</a></span><span class="message">although, I wanted to eventually generate them on the fly anyway</span></div><div class="line" id="000106"><span class="nick" style="color:#389600"><a href="#000106" label="[00:01:06]">&lt;stikonas&gt;</a></span><span class="message">rather than using precomputed constants</span></div><div class="line" id="000131"><span class="nick" style="color:#8dd3c7"><a href="#000131" label="[00:01:31]">&lt;fossy&gt;</a></span><span class="message">stikonas: ok i had a look at it i see no reason for that not to work but you need oriansj's change i think</span></div><div class="line" id="000144"><span class="nick" style="color:#389600"><a href="#000144" label="[00:01:44]">&lt;stikonas&gt;</a></span><span class="message">yeah, I'm testing it</span></div><div class="line" id="000152"><span class="nick" style="color:#389600"><a href="#000152" label="[00:01:52]">&lt;stikonas&gt;</a></span><span class="message">just noticed that bootstrapped sha256sum is a bit broken</span></div><div class="line" id="000210"><span class="nick" style="color:#389600"><a href="#000210" label="[00:02:10]">&lt;stikonas&gt;</a></span><span class="message">it's computing some hash but not sha256</span></div><div class="line" id="000227"><span class="nick" style="color:#2e2a4a"><a href="#000227" label="[00:02:27]">&lt;oriansj&gt;</a></span><span class="message">stikonas: it is sha256</span></div><div class="line" id="000242"><span class="nick" style="color:#389600"><a href="#000242" label="[00:02:42]">&lt;stikonas&gt;</a></span><span class="message">oriansj: normally yes</span></div><div class="line" id="000243"><span class="nick" style="color:#8dd3c7"><a href="#000243" label="[00:02:43]">&lt;fossy&gt;</a></span><span class="message">but you want to return *before* env is initalized and not after like is currently at &quot;avoid empty arrays&quot; otherwise it will def break</span></div><div class="line" id="000251"><span class="nick" style="color:#389600"><a href="#000251" label="[00:02:51]">&lt;stikonas&gt;</a></span><span class="message">but risc-v version is miscompiled</span></div><div class="line" id="000301"><span class="nick" style="color:#389600"><a href="#000301" label="[00:03:01]">&lt;stikonas&gt;</a></span><span class="message">the constants in the lookup table are mangled</span></div><div class="line" id="000346"><span class="nick" style="color:#2e2a4a"><a href="#000346" label="[00:03:46]">&lt;oriansj&gt;</a></span><span class="message">stikonas: does RISC-V support PC relative loads?</span></div><div class="line" id="000413"><span class="nick" style="color:#389600"><a href="#000413" label="[00:04:13]">&lt;stikonas&gt;</a></span><span class="message">well, AUIPC</span></div><div class="line" id="000509"><span class="nick" style="color:#2e2a4a"><a href="#000509" label="[00:05:09]">&lt;oriansj&gt;</a></span><span class="message">So what if we do the load jump immediate pattern?</span></div><div class="line" id="000542"><span class="nick" style="color:#389600"><a href="#000542" label="[00:05:42]">&lt;stikonas&gt;</a></span><span class="message">and store number between those?</span></div><div class="line" id="000602"><span class="nick" style="color:#2e2a4a"><a href="#000602" label="[00:06:02]">&lt;oriansj&gt;</a></span><span class="message">as AMD64 and AArch64 don't have these sorts of issues with constants</span></div><div class="line" id="000611"><span class="nick" style="color:#389600"><a href="#000611" label="[00:06:11]">&lt;stikonas&gt;</a></span><span class="message">i.e. load 8 bytes ahead jump, constant, rest of the instructions</span></div><div class="line" id="000620"><span class="nick" style="color:#2e2a4a"><a href="#000620" label="[00:06:20]">&lt;oriansj&gt;</a></span><span class="message">yep</span></div><div class="line" id="000711"><span class="nick" style="color:#389600"><a href="#000711" label="[00:07:11]">&lt;stikonas&gt;</a></span><span class="message">oh, but let me thing about loads</span></div><div class="line" id="000720"><span class="nick" style="color:#389600"><a href="#000720" label="[00:07:20]">&lt;stikonas&gt;</a></span><span class="message">hmm, I guess it's fine</span></div><div class="line" id="000748"><span class="nick" style="color:#389600"><a href="#000748" label="[00:07:48]">&lt;stikonas&gt;</a></span><span class="message">just load address with AUIPC and then do LD on that address</span></div><div class="line" id="000755"><span class="nick" style="color:#6b8072"><a href="#000755" label="[00:07:55]">&lt;xentrac&gt;</a></span><span class="message">oriansj: cool, thanks!\</span></div><div class="line" id="000818"><span class="nick" style="color:#6b8072"><a href="#000818" label="[00:08:18]">&lt;xentrac&gt;</a></span><span class="message">you probably want to addi 4 or something, don't you, stikonas?</span></div><div class="line" id="000829"><span class="nick" style="color:#2e2a4a"><a href="#000829" label="[00:08:29]">&lt;oriansj&gt;</a></span><span class="message">for the jump</span></div><div class="line" id="000834"><span class="nick" style="color:#389600"><a href="#000834" label="[00:08:34]">&lt;stikonas&gt;</a></span><span class="message">yeah, of course</span></div><div class="line" id="000851"><span class="nick" style="color:#2e2a4a"><a href="#000851" label="[00:08:51]">&lt;oriansj&gt;</a></span><span class="message">or you could jump and load backwards</span></div><div class="line" id="000903"><span class="nick" style="color:#2e2a4a"><a href="#000903" label="[00:09:03]">&lt;oriansj&gt;</a></span><span class="message">jump immediate load</span></div><div class="line" id="000925"><span class="nick" style="color:#389600"><a href="#000925" label="[00:09:25]">&lt;stikonas&gt;</a></span><span class="message">well, the other alternative is to emit more complex immediate load code in m2-planet using shifts</span></div><div class="line" id="000930"><span class="nick" style="color:#6b8072"><a href="#000930" label="[00:09:30]">&lt;xentrac&gt;</a></span><span class="message">I guess LD has an immediate offset too</span></div><div class="line" id="000939"><span class="nick" style="color:#389600"><a href="#000939" label="[00:09:39]">&lt;stikonas&gt;</a></span><span class="message">yes, LD has offset too</span></div><div class="line" id="000955"><span class="nick" style="color:#6b8072"><a href="#000955" label="[00:09:55]">&lt;xentrac&gt;</a></span><span class="message">no addi necessary</span></div><div class="line" id="001035"><span class="nick" style="color:#2e2a4a"><a href="#001035" label="[00:10:35]">&lt;oriansj&gt;</a></span><span class="message">also I have no idea why the LUI+addi combo are causing issues</span></div><div class="line" id="001133"><span class="nick" style="color:#389600"><a href="#001133" label="[00:11:33]">&lt;stikonas&gt;</a></span><span class="message">I think it's only supported up to 32-bit signed integers</span></div><div class="line" id="001141"><span class="nick" style="color:#6b8072"><a href="#001141" label="[00:11:41]">&lt;xentrac&gt;</a></span><span class="message">yeah</span></div><div class="line" id="001144"><span class="nick" style="color:#389600"><a href="#001144" label="[00:11:44]">&lt;stikonas&gt;</a></span><span class="message">although it's a bit confusing</span></div><div class="line" id="001153"><span class="nick" style="color:#2e2a4a"><a href="#001153" label="[00:11:53]">&lt;oriansj&gt;</a></span><span class="message">the code base (except for the new RISC-V support) has already been over 64bit architecture support and 32bit integer behavior</span></div><div class="line" id="001155"><span class="nick" style="color:#389600"><a href="#001155" label="[00:11:55]">&lt;stikonas&gt;</a></span><span class="message">why 32-bit unsigned integers fail to work</span></div><div class="line" id="001200"><span class="nick" style="color:#389600"><a href="#001200" label="[00:12:00]">&lt;stikonas&gt;</a></span><span class="message">and basically work only up to 31-bit</span></div><div class="line" id="001215"><span class="nick" style="color:#389600"><a href="#001215" label="[00:12:15]">&lt;stikonas&gt;</a></span><span class="message">well, it's LUI limit</span></div><div class="line" id="001220"><span class="nick" style="color:#389600"><a href="#001220" label="[00:12:20]">&lt;stikonas&gt;</a></span><span class="message">not M2-Planet's limit</span></div><div class="line" id="001230"><span class="nick" style="color:#6b8072"><a href="#001230" label="[00:12:30]">&lt;xentrac&gt;</a></span><span class="message">LUI sign-extends</span></div><div class="line" id="001240"><span class="nick" style="color:#6b8072"><a href="#001240" label="[00:12:40]">&lt;xentrac&gt;</a></span><span class="message">IIRC</span></div><div class="line" id="001253"><span class="nick" style="color:#2e2a4a"><a href="#001253" label="[00:12:53]">&lt;oriansj&gt;</a></span><span class="message">so does AMD64 and AArch64 signed instructions</span></div><div class="line" id="001313"><span class="nick" style="color:#2e2a4a"><a href="#001313" label="[00:13:13]">&lt;oriansj&gt;</a></span><span class="message">does RISC-V not have an unsigned version?</span></div><div class="line" id="001316"><span class="nick" style="color:#6b8072"><a href="#001316" label="[00:13:16]">&lt;xentrac&gt;</a></span><span class="message">no</span></div><div class="line" id="001322"><span class="nick" style="color:#2e2a4a"><a href="#001322" label="[00:13:22]">&lt;oriansj&gt;</a></span><span class="message">that doesn't sign extend</span></div><div class="line" id="001326"><span class="nick" style="color:#6b8072"><a href="#001326" label="[00:13:26]">&lt;xentrac&gt;</a></span><span class="message">no</span></div><div class="line" id="001343"><span class="nick" style="color:#389600"><a href="#001343" label="[00:13:43]">&lt;stikonas&gt;</a></span><span class="message">that's why binutils also does some hacks when you have those larger numbers</span></div><div class="line" id="001358"><span class="nick" style="color:#389600"><a href="#001358" label="[00:13:58]">&lt;stikonas&gt;</a></span><span class="message">it uses AUIPC/addi initially</span></div><div class="line" id="001412"><span class="nick" style="color:#6b8072"><a href="#001412" label="[00:14:12]">&lt;xentrac&gt;</a></span><span class="message">for pointers</span></div><div class="line" id="001424"><span class="nick" style="color:#2e2a4a"><a href="#001424" label="[00:14:24]">&lt;oriansj&gt;</a></span><span class="message">So I guess we need a check in M2-Planet to not produce LUI for 32bit values</span></div><div class="line" id="001427"><span class="nick" style="color:#389600"><a href="#001427" label="[00:14:27]">&lt;stikonas&gt;</a></span><span class="message">sorry lui/addi</span></div><div class="line" id="001432"><span class="nick" style="color:#6b8072"><a href="#001432" label="[00:14:32]">&lt;xentrac&gt;</a></span><span class="message">yeah</span></div><div class="line" id="001438"><span class="nick" style="color:#389600"><a href="#001438" label="[00:14:38]">&lt;stikonas&gt;</a></span><span class="message">well, yes, and probably do something else</span></div><div class="line" id="001457"><span class="nick" style="color:#389600"><a href="#001457" label="[00:14:57]">&lt;stikonas&gt;</a></span><span class="message">I think it actually breaks at 2^31-1-2^11</span></div><div class="line" id="001517"><span class="nick" style="color:#389600"><a href="#001517" label="[00:15:17]">&lt;stikonas&gt;</a></span><span class="message">(that 11-th bit that we add due to sign extension of lower ADDI bits)</span></div><div class="line" id="001539"><span class="nick" style="color:#2e2a4a"><a href="#001539" label="[00:15:39]">&lt;oriansj&gt;</a></span><span class="message">something like 0 != ((0x8 &lt;&lt; 28) &amp; value)</span></div><div class="line" id="001722"><span class="nick" style="color:#2e2a4a"><a href="#001722" label="[00:17:22]">&lt;oriansj&gt;</a></span><span class="message">well that is why we have: <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/hex2_word.c#L101">https://github.com/oriansj/mescc-tools/blob/master/hex2_word.c#L101</a> </span></div><div class="line" id="001731"><span class="nick" style="color:#389600"><a href="#001731" label="[00:17:31]">&lt;stikonas&gt;</a></span><span class="message">oriansj: can you merge <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/pull/26/files">https://github.com/oriansj/mescc-tools/pull/26/files</a> </span></div><div class="line" id="001732"><span class="nick" style="color:#389600"><a href="#001732" label="[00:17:32]">&lt;stikonas&gt;</a></span><span class="message">it works now</span></div><div class="line" id="001745"><span class="nick" style="color:#389600"><a href="#001745" label="[00:17:45]">&lt;stikonas&gt;</a></span><span class="message">argh</span></div><div class="line" id="001747"><span class="nick" style="color:#389600"><a href="#001747" label="[00:17:47]">&lt;stikonas&gt;</a></span><span class="message">wait</span></div><div class="line" id="001747"><span class="nick" style="color:#2e2a4a"><a href="#001747" label="[00:17:47]">&lt;oriansj&gt;</a></span><span class="message">and <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/M1-macro.c#L627">https://github.com/oriansj/mescc-tools/blob/master/M1-macro.c#L627</a> </span></div><div class="line" id="001752"><span class="nick" style="color:#389600"><a href="#001752" label="[00:17:52]">&lt;stikonas&gt;</a></span><span class="message">copy-paste typo</span></div><div class="line" id="001922"><span class="nick" style="color:#389600"><a href="#001922" label="[00:19:22]">&lt;stikonas&gt;</a></span><span class="message">well, you can add range-check in M1-macro.c</span></div><div class="line" id="001939"><span class="nick" style="color:#389600"><a href="#001939" label="[00:19:39]">&lt;stikonas&gt;</a></span><span class="message">but I guess logic of dealing with large immediates in M2-Planet</span></div><div class="line" id="002012"><span class="nick" style="color:#389600"><a href="#002012" label="[00:20:12]">&lt;stikonas&gt;</a></span><span class="message">I guess 0xFFFFFFFF works by accident...</span></div><div class="line" id="002055"><span class="nick" style="color:#2e2a4a"><a href="#002055" label="[00:20:55]">&lt;oriansj&gt;</a></span><span class="message">hence the logic in primary_expr_number</span></div><div class="line" id="002056"><span class="nick" style="color:#389600"><a href="#002056" label="[00:20:56]">&lt;stikonas&gt;</a></span><span class="message">hmm, although, it didn't work in hex2_word.c</span></div><div class="line" id="002125"><span class="nick" style="color:#389600"><a href="#002125" label="[00:21:25]">&lt;stikonas&gt;</a></span><span class="message">well, if 0 != ((0x8 &lt;&lt; 28) &amp; value maybe we shouldn't return</span></div><div class="line" id="002128"><span class="nick" style="color:#389600"><a href="#002128" label="[00:21:28]">&lt;stikonas&gt;</a></span><span class="message">but rather deal with it</span></div><div class="line" id="002235"><span class="nick" style="color:#389600"><a href="#002235" label="[00:22:35]">&lt;stikonas&gt;</a></span><span class="message">ok, <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/pull/26">https://github.com/oriansj/mescc-tools/pull/26</a>  is now ready</span></div><div class="line" id="002248"><span class="nick" style="color:#389600"><a href="#002248" label="[00:22:48]">&lt;stikonas&gt;</a></span><span class="message">works fine and I think this version is uncontroversial now</span></div><div class="line" id="002300"><span class="nick" style="color:#389600"><a href="#002300" label="[00:23:00]">&lt;stikonas&gt;</a></span><span class="message">it just moves zero-length check up</span></div><div class="line" id="002304"><span class="nick" style="color:#389600"><a href="#002304" label="[00:23:04]">&lt;stikonas&gt;</a></span><span class="message">as fossy instructed</span></div><div class="line" id="002341"><span class="nick" style="color:#2e2a4a"><a href="#002341" label="[00:23:41]">&lt;oriansj&gt;</a></span><span class="message">works for me</span></div><div class="line" id="002343"><span class="nick" style="color:#2e2a4a"><a href="#002343" label="[00:23:43]">&lt;oriansj&gt;</a></span><span class="message">merged</span></div><div class="line" id="002524"><span class="nick" style="color:#389600"><a href="#002524" label="[00:25:24]">&lt;stikonas&gt;</a></span><span class="message">yes, it works for me too, just rechecking checksums</span></div><div class="line" id="002531"><span class="nick" style="color:#389600"><a href="#002531" label="[00:25:31]">&lt;stikonas&gt;</a></span><span class="message">and will make stage0-posix update</span></div><div class="line" id="002711"><span class="nick" style="color:#389600"><a href="#002711" label="[00:27:11]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/pull/50">https://github.com/oriansj/stage0-posix/pull/50</a> </span></div><div class="line" id="002753"><span class="nick" style="color:#389600"><a href="#002753" label="[00:27:53]">&lt;stikonas&gt;</a></span><span class="message">all binaries except for sha256sum seem to work correctly</span></div><div class="line" id="002827"><span class="nick" style="color:#389600"><a href="#002827" label="[00:28:27]">&lt;stikonas&gt;</a></span><span class="message">strange, now sha256sum seems to work too...</span></div><div class="line" id="002839"><span class="nick" style="color:#6b8072"><a href="#002839" label="[00:28:39]">&lt;xentrac&gt;</a></span><span class="message">yay determinism!</span></div><div class="line" id="002843"><span class="nick" style="color:#6b8072"><a href="#002843" label="[00:28:43]">&lt;xentrac&gt;</a></span><span class="message">;)</span></div><div class="line" id="002904"><span class="nick" style="color:#389600"><a href="#002904" label="[00:29:04]">&lt;stikonas&gt;</a></span><span class="message">well, code was changed...</span></div><div class="line" id="003029"><span class="nick" style="color:#389600"><a href="#003029" label="[00:30:29]">&lt;stikonas&gt;</a></span><span class="message">although, I'm a bit confused by that...</span></div><div class="line" id="003229"><span class="nick" style="color:#6b8072"><a href="#003229" label="[00:32:29]">&lt;xentrac&gt;</a></span><span class="message">sometimes in those situations it's worth changing it back to see if you can reproduce the error</span></div><div class="line" id="003308"><span class="nick" style="color:#6b8072"><a href="#003308" label="[00:33:08]">&lt;xentrac&gt;</a></span><span class="message">that way you can avoid having it pop up again in two months after another apparently unrelated change</span></div><div class="line" id="003414"><span class="nick" style="color:#389600"><a href="#003414" label="[00:34:14]">&lt;stikonas&gt;</a></span><span class="message">ok, it doesn't work</span></div><div class="line" id="003420"><span class="nick" style="color:#389600"><a href="#003420" label="[00:34:20]">&lt;stikonas&gt;</a></span><span class="message">it ended up in my PATH</span></div><div class="line" id="003431"><span class="nick" style="color:#389600"><a href="#003431" label="[00:34:31]">&lt;stikonas&gt;</a></span><span class="message">so I was running bootstrapped sha256sum both times</span></div><div class="line" id="003445"><span class="nick" style="color:#389600"><a href="#003445" label="[00:34:45]">&lt;stikonas&gt;</a></span><span class="message">anyway, that's probably a good testcase for M2-Planet's large immedates support</span></div><div class="line" id="003512"><span class="nick" style="color:#389600"><a href="#003512" label="[00:35:12]">&lt;stikonas&gt;</a></span><span class="message">once it matches GNU sha256sum, large numbers are fixed</span></div><div class="line" id="004512"><span class="nick" style="color:#2e2a4a"><a href="#004512" label="[00:45:12]">&lt;oriansj&gt;</a></span><span class="message">so RISC-V is almost (so close) to being ready for a stage0-posix release</span></div><div class="line" id="004544"><span class="nick" style="color:#2e2a4a"><a href="#004544" label="[00:45:44]">&lt;oriansj&gt;</a></span><span class="message">just need to sort out the large number support in M2-Planet and are there any other bugs we need to crush?</span></div><div class="line" id="005826"><span class="nick" style="color:#389600"><a href="#005826" label="[00:58:26]">&lt;stikonas&gt;</a></span><span class="message">well, ideally kaem-minimal's crash detection</span></div><div class="line" id="005944"><span class="nick" style="color:#389600"><a href="#005944" label="[00:59:44]">&lt;stikonas&gt;</a></span><span class="message">right now I don't understand why it fails</span></div><div class="line" id="005951"><span class="nick" style="color:#389600"><a href="#005951" label="[00:59:51]">&lt;stikonas&gt;</a></span><span class="message">but it's new code</span></div><div class="line" id="010004"><span class="nick" style="color:#389600"><a href="#010004" label="[01:00:04]">&lt;stikonas&gt;</a></span><span class="message">other arches use older syscall</span></div><div class="line" id="010006"><span class="nick" style="color:#2e2a4a"><a href="#010006" label="[01:00:06]">&lt;oriansj&gt;</a></span><span class="message">and we have some bugs to shake out</span></div><div class="line" id="010018"><span class="nick" style="color:#2e2a4a"><a href="#010018" label="[01:00:18]">&lt;oriansj&gt;</a></span><span class="message">the more it is pushed the better.</span></div><div class="line" id="010035"><span class="nick" style="color:#2e2a4a"><a href="#010035" label="[01:00:35]">&lt;oriansj&gt;</a></span><span class="message">I'll begin fuzzing shortly</span></div><div class="line" id="010056"><span class="nick" style="color:#389600"><a href="#010056" label="[01:00:56]">&lt;stikonas&gt;</a></span><span class="message">waitpid was not available on risc-v</span></div><div class="line" id="010101"><span class="nick" style="color:#389600"><a href="#010101" label="[01:01:01]">&lt;stikonas&gt;</a></span><span class="message">so I had to use wait4</span></div><div class="line" id="010109"><span class="nick" style="color:#389600"><a href="#010109" label="[01:01:09]">&lt;stikonas&gt;</a></span><span class="message">maybe messed up some flags</span></div><div class="line" id="011710"><span class="nick" style="color:#389600"><a href="#011710" label="[01:17:10]">&lt;stikonas&gt;</a></span><span class="message">ok, I think it's not instruction that doesn't work</span></div><div class="line" id="011717"><span class="nick" style="color:#389600"><a href="#011717" label="[01:17:17]">&lt;stikonas&gt;</a></span><span class="message">it does bitwise not</span></div><div class="line" id="011723"><span class="nick" style="color:#389600"><a href="#011723" label="[01:17:23]">&lt;stikonas&gt;</a></span><span class="message">where as I have 4 in the register</span></div><div class="line" id="011726"><span class="nick" style="color:#389600"><a href="#011726" label="[01:17:26]">&lt;stikonas&gt;</a></span><span class="message">and want 0</span></div><div class="line" id="012433"><span class="nick" style="color:#389600"><a href="#012433" label="[01:24:33]">&lt;stikonas&gt;</a></span><span class="message">hmm, I think M2-Planet's implementation also doesn't work for random integrers (it's 1 bitwise xor number)</span></div><div class="line" id="013144"><span class="nick" style="color:#389600"><a href="#013144" label="[01:31:44]">&lt;stikonas&gt;</a></span><span class="message">oriansj: ok, I fixed it in GAS version</span></div><div class="line" id="013149"><span class="nick" style="color:#389600"><a href="#013149" label="[01:31:49]">&lt;stikonas&gt;</a></span><span class="message">I'll try to encode it now and make a PR</span></div><div class="line" id="013159"><span class="nick" style="color:#389600"><a href="#013159" label="[01:31:59]">&lt;stikonas&gt;</a></span><span class="message">so then only big numbers are left...</span></div><div class="line" id="013307"><span class="nick">***</span><span class="message notice">Noisytoot is now known as GPLv3</span></div><div class="line" id="014135"><span class="nick" style="color:#389600"><a href="#014135" label="[01:41:35]">&lt;stikonas&gt;</a></span><span class="message">oh yes, I forgot to fix kaem checksums for other arches...</span></div><div class="line" id="014158"><span class="nick" style="color:#389600"><a href="#014158" label="[01:41:58]">&lt;stikonas&gt;</a></span><span class="message">oriansj: kaem-minimal fix <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/pull/51">https://github.com/oriansj/stage0-posix/pull/51</a> </span></div><div class="line" id="014223"><span class="nick" style="color:#2e2a4a"><a href="#014223" label="[01:42:23]">&lt;oriansj&gt;</a></span><span class="message">umm I just pushed a fix for kaem checksums for the other archs</span></div><div class="line" id="014231"><span class="nick" style="color:#389600"><a href="#014231" label="[01:42:31]">&lt;stikonas&gt;</a></span><span class="message">yeah, I saw</span></div><div class="line" id="014242"><span class="nick" style="color:#389600"><a href="#014242" label="[01:42:42]">&lt;stikonas&gt;</a></span><span class="message">anyway, kaem-minimal wouldn't affect other checksums</span></div><div class="line" id="014315"><span class="nick" style="color:#389600"><a href="#014315" label="[01:43:15]">&lt;stikonas&gt;</a></span><span class="message">just removed one instruction and replaced beqz with bnez</span></div><div class="line" id="014318"><span class="nick" style="color:#389600"><a href="#014318" label="[01:43:18]">&lt;stikonas&gt;</a></span><span class="message">and it works now</span></div><div class="line" id="014330"><span class="nick" style="color:#389600"><a href="#014330" label="[01:43:30]">&lt;stikonas&gt;</a></span><span class="message">well, actually inserted nop to avoid recalculating jumps</span></div><div class="line" id="014349"><span class="nick" style="color:#2e2a4a"><a href="#014349" label="[01:43:49]">&lt;oriansj&gt;</a></span><span class="message">fair, that shit is tedious</span></div><div class="line" id="014446"><span class="nick" style="color:#389600"><a href="#014446" label="[01:44:46]">&lt;stikonas&gt;</a></span><span class="message">but I think M2 implementation of logical not only works for 0 and 1...</span></div><div class="line" id="014454"><span class="nick" style="color:#389600"><a href="#014454" label="[01:44:54]">&lt;stikonas&gt;</a></span><span class="message">so might hit similar problem...</span></div><div class="line" id="014523"><span class="nick" style="color:#2e2a4a"><a href="#014523" label="[01:45:23]">&lt;oriansj&gt;</a></span><span class="message">wait what????</span></div><div class="line" id="014602"><span class="nick" style="color:#2e2a4a"><a href="#014602" label="[01:46:02]">&lt;oriansj&gt;</a></span><span class="message">logical NOT only makes sense for TRUE and FALSE</span></div><div class="line" id="014613"><span class="nick" style="color:#2e2a4a"><a href="#014613" label="[01:46:13]">&lt;oriansj&gt;</a></span><span class="message">which are #defined</span></div><div class="line" id="014635"><span class="nick" style="color:#2e2a4a"><a href="#014635" label="[01:46:35]">&lt;oriansj&gt;</a></span><span class="message">So if you are doing a logical NOT on anything else, it is probably a bug</span></div><div class="line" id="014702"><span class="nick" style="color:#2e2a4a"><a href="#014702" label="[01:47:02]">&lt;oriansj&gt;</a></span><span class="message">bitwise not however will work with anything you want</span></div><div class="line" id="014711"><span class="nick" style="color:#389600"><a href="#014711" label="[01:47:11]">&lt;stikonas&gt;</a></span><span class="message">oh ok...</span></div><div class="line" id="014912"><span class="nick" style="color:#389600"><a href="#014912" label="[01:49:12]">&lt;stikonas&gt;</a></span><span class="message">I was basically trying to implement this: <a rel="nofollow" href="https://github.com/AssemblyScript/musl/blob/aad50fcd791e009961621ddfbe3d4c245fd689a3/include/sys/wait.h#L52">https://github.com/AssemblyScript/musl/blob/aad50fcd791e009961621ddfbe3d4c245fd689a3/include/sys/wait.h#L52</a> </span></div><div class="line" id="014920"><span class="nick" style="color:#389600"><a href="#014920" label="[01:49:20]">&lt;stikonas&gt;</a></span><span class="message">#define WIFEXITED(s) (!WTERMSIG(s))</span></div><div class="line" id="014934"><span class="nick" style="color:#2e2a4a"><a href="#014934" label="[01:49:34]">&lt;oriansj&gt;</a></span><span class="message">So !(a == b) will be correct as ==, !=, &gt;, &gt;=, &lt;, &lt;= only return TRUE or FALSE</span></div><div class="line" id="014936"><span class="nick" style="color:#389600"><a href="#014936" label="[01:49:36]">&lt;stikonas&gt;</a></span><span class="message">and s was equal to 4 when crashed</span></div><div class="line" id="014947"><span class="nick" style="color:#6b8072"><a href="#014947" label="[01:49:47]">&lt;xentrac&gt;</a></span><span class="message">when I read that macro I always thing &quot;excited&quot; is misspelled</span></div><div class="line" id="015014"><span class="nick" style="color:#6b8072"><a href="#015014" label="[01:50:14]">&lt;xentrac&gt;</a></span><span class="message">*think</span></div><div class="line" id="015153"><span class="nick" style="color:#389600"><a href="#015153" label="[01:51:53]">&lt;stikonas&gt;</a></span><span class="message">well, at least gcc defines logical NOT for all integers</span></div><div class="line" id="015202"><span class="nick" style="color:#389600"><a href="#015202" label="[01:52:02]">&lt;stikonas&gt;</a></span><span class="message">e.g. return !4 actually returns 0</span></div><div class="line" id="015215"><span class="nick" style="color:#2e2a4a"><a href="#015215" label="[01:52:15]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/M2libc/blob/main/amd64/Linux/unistd.h#L58">https://github.com/oriansj/M2libc/blob/main/amd64/Linux/unistd.h#L58</a> </span></div><div class="line" id="015238"><span class="nick" style="color:#2e2a4a"><a href="#015238" label="[01:52:38]">&lt;oriansj&gt;</a></span><span class="message">wait4 with struct rusage *ru set to NULL works fine for wait</span></div><div class="line" id="015434"><span class="nick" style="color:#389600"><a href="#015434" label="[01:54:34]">&lt;stikonas&gt;</a></span><span class="message">and return !4 exits with 5 in M2-Planet binary</span></div><div class="line" id="015448"><span class="nick" style="color:#389600"><a href="#015448" label="[01:54:48]">&lt;stikonas&gt;</a></span><span class="message">yes, I did set rusage *ru to NULL...</span></div><div class="line" id="015506"><span class="nick" style="color:#389600"><a href="#015506" label="[01:55:06]">&lt;stikonas&gt;</a></span><span class="message">anyway, just some difference between gcc and M2-Planet...</span></div><div class="line" id="015639"><span class="nick" style="color:#2e2a4a"><a href="#015639" label="[01:56:39]">&lt;oriansj&gt;</a></span><span class="message">return !4 in C isn't exactly proper C and could be considered undefined behavior as I understand.</span></div><div class="line" id="015706"><span class="nick" style="color:#2e2a4a"><a href="#015706" label="[01:57:06]">&lt;oriansj&gt;</a></span><span class="message">Now if TRUE was #define TRUE 4; it might be valid</span></div><div class="line" id="015857"><span class="nick" style="color:#389600"><a href="#015857" label="[01:58:57]">&lt;stikonas&gt;</a></span><span class="message">hmm, it seems C standards do define it...</span></div><div class="line" id="015918"><span class="nick" style="color:#389600"><a href="#015918" label="[01:59:18]">&lt;stikonas&gt;</a></span><span class="message">The  result  of  the  logical  negation  operator!is  0  if  the  value  of  its  operand  comparesunequal to 0, 1 if the value of its operand compares equal to 0.  The result has typeint.</span></div><div class="line" id="020010"><span class="nick" style="color:#2e2a4a"><a href="#020010" label="[02:00:10]">&lt;oriansj&gt;</a></span><span class="message">so 4 would not be in the defined input set</span></div><div class="line" id="020100"><span class="nick" style="color:#2e2a4a"><a href="#020100" label="[02:01:00]">&lt;oriansj&gt;</a></span><span class="message">unless one interprets comparesunequal to 0</span></div><div class="line" id="020134"><span class="nick" style="color:#2e2a4a"><a href="#020134" label="[02:01:34]">&lt;oriansj&gt;</a></span><span class="message">in which case !4 would just return 0</span></div><div class="line" id="020135"><span class="nick" style="color:#389600"><a href="#020135" label="[02:01:35]">&lt;stikonas&gt;</a></span><span class="message">I think defined input set is ints</span></div><div class="line" id="020156"><span class="nick" style="color:#389600"><a href="#020156" label="[02:01:56]">&lt;stikonas&gt;</a></span><span class="message">4 is not 0, so result should be 0 according to C specs</span></div><div class="line" id="020157"><span class="nick" style="color:#2e2a4a"><a href="#020157" label="[02:01:57]">&lt;oriansj&gt;</a></span><span class="message">So why write !4 when it just becomes 0?</span></div><div class="line" id="020210"><span class="nick" style="color:#389600"><a href="#020210" label="[02:02:10]">&lt;stikonas&gt;</a></span><span class="message">anything that is not 0 goes to 0</span></div><div class="line" id="020213"><span class="nick" style="color:#389600"><a href="#020213" label="[02:02:13]">&lt;stikonas&gt;</a></span><span class="message">and 0 goes to 1</span></div><div class="line" id="020313"><span class="nick" style="color:#389600"><a href="#020313" label="[02:03:13]">&lt;stikonas&gt;</a></span><span class="message">and source is here <a rel="nofollow" href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf">http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf</a> </span></div><div class="line" id="020333"><span class="nick" style="color:#389600"><a href="#020333" label="[02:03:33]">&lt;stikonas&gt;</a></span><span class="message">this is some technical draft as for final ones I think you have to pay</span></div><div class="line" id="020348"><span class="nick" style="color:#389600"><a href="#020348" label="[02:03:48]">&lt;stikonas&gt;</a></span><span class="message">negation is 6.5.3.3</span></div><div class="line" id="020613"><span class="nick" style="color:#6b8072"><a href="#020613" label="[02:06:13]">&lt;xentrac&gt;</a></span><span class="message">my protesting against news-media bigotry against &quot;hackers&quot; is being seriously downvoted: <a rel="nofollow" href="https://news.ycombinator.com/item?id=28732879">https://news.ycombinator.com/item?id=28732879</a> </span></div><div class="line" id="024044"><span class="nick">***</span><span class="message notice">GPLv3 is now known as Noisytoot</span></div><div class="line" id="025732"><span class="nick" style="color:#389600"><a href="#025732" label="[02:57:32]">&lt;stikonas&gt;</a></span><span class="message">ok, large ints are working</span></div><div class="line" id="025735"><span class="nick" style="color:#389600"><a href="#025735" label="[02:57:35]">&lt;stikonas&gt;</a></span><span class="message">will do PR tomorrow</span></div><div class="line" id="025742"><span class="nick" style="color:#389600"><a href="#025742" label="[02:57:42]">&lt;stikonas&gt;</a></span><span class="message">once I check checksums and tests</span></div><div class="line" id="030008"><span class="nick" style="color:#2e2a4a"><a href="#030008" label="[03:00:08]">&lt;oriansj&gt;</a></span><span class="message">uh a compare and a jump just to do a logical negation</span></div><div class="line" id="030145"><span class="nick" style="color:#2e2a4a"><a href="#030145" label="[03:01:45]">&lt;oriansj&gt;</a></span><span class="message">although I guess one could uset setne and sete to achieve the same result</span></div><div class="line" id="030421"><span class="nick" style="color:#2e2a4a"><a href="#030421" label="[03:04:21]">&lt;oriansj&gt;</a></span><span class="message">xentrac: media isn't looking to use the correct term in the technical sense nor the cultural one either.</span></div><div class="line" id="030903"><span class="nick" style="color:#2e2a4a"><a href="#030903" label="[03:09:03]">&lt;oriansj&gt;</a></span><span class="message">I believe there is even a term for how inaccurate newspaper articles are. Something about an expert being horrified by the amount of errors when covering the subject they are experienced on. Then promptly forgetting that fact when they turn the page and read an article on politics or some various other topic.</span></div><div class="line" id="031403"><span class="nick" style="color:#2e2a4a"><a href="#031403" label="[03:14:03]">&lt;oriansj&gt;</a></span><span class="message">but yes I agree xentrac that it should be argued for the RMS meaning of the word hacker. <a rel="nofollow" href="https://stallman.org/articles/on-hacking.html">https://stallman.org/articles/on-hacking.html</a>  and I do find it ironic that it isn't embraced on a site called hacker news. However that might be a sign of the shift in culture away from technical brilliant ideas and hacks and towards one chasing the VC dollar.</span></div><div class="line" id="034526"><span class="nick" style="color:#2e2a4a"><a href="#034526" label="[03:45:26]">&lt;oriansj&gt;</a></span><span class="message">looks like M2-Planet has a few new crashes possible on bad input</span></div><div class="line" id="034535"><span class="nick" style="color:#2e2a4a"><a href="#034535" label="[03:45:35]">&lt;oriansj&gt;</a></span><span class="message">nice</span></div><div class="line" id="040409"><span class="nick" style="color:#2e2a4a"><a href="#040409" label="[04:04:09]">&lt;oriansj&gt;</a></span><span class="message">but M1 is looking crash free</span></div><div class="line" id="061500"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o janneke_</span></div><div class="line" id="062726"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o janneke</span></div><div class="line" id="110053"><span class="nick">***</span><span class="message notice">deesix_ is now known as deesix</span></div><div class="line" id="124423"><span class="nick" style="color:#389600"><a href="#124423" label="[12:44:23]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I've now made a PR to get large immediates working in M2-Planet</span></div><div class="line" id="124449"><span class="nick" style="color:#389600"><a href="#124449" label="[12:44:49]">&lt;stikonas&gt;</a></span><span class="message">it might not be the most optimal way...</span></div><div class="line" id="124456"><span class="nick" style="color:#389600"><a href="#124456" label="[12:44:56]">&lt;stikonas&gt;</a></span><span class="message">but it works</span></div><div class="line" id="124632"><span class="nick" style="color:#389600"><a href="#124632" label="[12:46:32]">&lt;stikonas&gt;</a></span><span class="message">(and sha256sum on risc-v now works correctly)</span></div><div class="line" id="124707"><span class="nick" style="color:#389600"><a href="#124707" label="[12:47:07]">&lt;stikonas&gt;</a></span><span class="message">but cc_riscv64 does not support large immediates, maybe we can just leave it like that...</span></div><div class="line" id="133107"><span class="nick" style="color:#2e2a4a"><a href="#133107" label="[13:31:07]">&lt;oriansj&gt;</a></span><span class="message">stikonas: cc_* doesn't have to be perfect, just functional enough to build M2-Planet</span></div><div class="line" id="133434"><span class="nick" style="color:#2e2a4a"><a href="#133434" label="[13:34:34]">&lt;oriansj&gt;</a></span><span class="message">and it looks quite functional enough without large immediate support</span></div><div class="line" id="133640"><span class="nick" style="color:#2e2a4a"><a href="#133640" label="[13:36:40]">&lt;oriansj&gt;</a></span><span class="message">also merged</span></div><div class="line" id="140325"><span class="nick" style="color:#389600"><a href="#140325" label="[14:03:25]">&lt;stikonas&gt;</a></span><span class="message">so basically for risc-v we just need to update m2-planet in stage0 and recalculate checksums</span></div><div class="line" id="141240"><span class="nick" style="color:#2e2a4a"><a href="#141240" label="[14:12:40]">&lt;oriansj&gt;</a></span><span class="message">provided that clears out the remaining bugs. Then yes and we will do an official release</span></div><div class="line" id="141305"><span class="nick" style="color:#2e2a4a"><a href="#141305" label="[14:13:05]">&lt;oriansj&gt;</a></span><span class="message">as adding support for RISC-V is a major achievement and worth marking</span></div><div class="line" id="141323"><span class="nick" style="color:#389600"><a href="#141323" label="[14:13:23]">&lt;stikonas&gt;</a></span><span class="message">I'm now redoing checksums</span></div><div class="line" id="141329"><span class="nick" style="color:#389600"><a href="#141329" label="[14:13:29]">&lt;stikonas&gt;</a></span><span class="message">good  that I have aarch64 hardware...</span></div><div class="line" id="141337"><span class="nick" style="color:#389600"><a href="#141337" label="[14:13:37]">&lt;stikonas&gt;</a></span><span class="message">makes it much less painful</span></div><div class="line" id="141413"><span class="nick" style="color:#2e2a4a"><a href="#141413" label="[14:14:13]">&lt;oriansj&gt;</a></span><span class="message">thank you</span></div><div class="line" id="141444"><span class="nick" style="color:#389600"><a href="#141444" label="[14:14:44]">&lt;stikonas&gt;</a></span><span class="message">risc-v is still slow since its in qemu...</span></div><div class="line" id="141454"><span class="nick" style="color:#389600"><a href="#141454" label="[14:14:54]">&lt;stikonas&gt;</a></span><span class="message">but at least it's not 15min...</span></div><div class="line" id="141616"><span class="nick" style="color:#389600"><a href="#141616" label="[14:16:16]">&lt;stikonas&gt;</a></span><span class="message">anyway, it's probably good enough for release...</span></div><div class="line" id="141632"><span class="nick" style="color:#389600"><a href="#141632" label="[14:16:32]">&lt;stikonas&gt;</a></span><span class="message">if we really need something more later, one can do another bugfix release</span></div><div class="line" id="141656"><span class="nick" style="color:#2e2a4a"><a href="#141656" label="[14:16:56]">&lt;oriansj&gt;</a></span><span class="message">well bugfixing is part of the routine update process anyway</span></div><div class="line" id="141725"><span class="nick" style="color:#389600"><a href="#141725" label="[14:17:25]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/pull/52">https://github.com/oriansj/stage0-posix/pull/52</a> </span></div><div class="line" id="141725"><span class="nick" style="color:#2e2a4a"><a href="#141725" label="[14:17:25]">&lt;oriansj&gt;</a></span><span class="message">but yeah, if the pieces seem to all be working well. It is good enough</span></div><div class="line" id="141747"><span class="nick" style="color:#389600"><a href="#141747" label="[14:17:47]">&lt;stikonas&gt;</a></span><span class="message">well, sha256sum output now matches what gnu coreutils does</span></div><div class="line" id="141801"><span class="nick" style="color:#389600"><a href="#141801" label="[14:18:01]">&lt;stikonas&gt;</a></span><span class="message">(make test_*) runs both</span></div><div class="line" id="141838"><span class="nick" style="color:#2e2a4a"><a href="#141838" label="[14:18:38]">&lt;oriansj&gt;</a></span><span class="message">yep</span></div><div class="line" id="141911"><span class="nick" style="color:#2e2a4a"><a href="#141911" label="[14:19:11]">&lt;oriansj&gt;</a></span><span class="message">merged</span></div><div class="line" id="141916"><span class="nick" style="color:#2e2a4a"><a href="#141916" label="[14:19:16]">&lt;oriansj&gt;</a></span><span class="message">and I will tag for release</span></div><div class="line" id="141953"><span class="nick" style="color:#389600"><a href="#141953" label="[14:19:53]">&lt;stikonas&gt;</a></span><span class="message">and then at some point janneke should update mes's kaem files with new blood-elf option</span></div><div class="line" id="142002"><span class="nick" style="color:#389600"><a href="#142002" label="[14:20:02]">&lt;stikonas&gt;</a></span><span class="message">or we make PR for him</span></div><div class="line" id="142010"><span class="nick" style="color:#389600"><a href="#142010" label="[14:20:10]">&lt;stikonas&gt;</a></span><span class="message">well, it's email there...</span></div><div class="line" id="142043"><span class="nick" style="color:#389600"><a href="#142043" label="[14:20:43]">&lt;stikonas&gt;</a></span><span class="message">sorry wait a moment</span></div><div class="line" id="142052"><span class="nick" style="color:#389600"><a href="#142052" label="[14:20:52]">&lt;stikonas&gt;</a></span><span class="message">I think I have temporary files in checksum</span></div><div class="line" id="142145"><span class="nick" style="color:#389600"><a href="#142145" label="[14:21:45]">&lt;stikonas&gt;</a></span><span class="message">oriansj: we need to remove first 3 lines from riscv64.answers</span></div><div class="line" id="142217"><span class="nick" style="color:#389600"><a href="#142217" label="[14:22:17]">&lt;stikonas&gt;</a></span><span class="message">argh, probably already tagged...</span></div><div class="line" id="142339"><span class="nick" style="color:#2e2a4a"><a href="#142339" label="[14:23:39]">&lt;oriansj&gt;</a></span><span class="message">removed tag</span></div><div class="line" id="142402"><span class="nick" style="color:#2e2a4a"><a href="#142402" label="[14:24:02]">&lt;oriansj&gt;</a></span><span class="message">and I'll do a git reset HEAD~1</span></div><div class="line" id="142432"><span class="nick" style="color:#2e2a4a"><a href="#142432" label="[14:24:32]">&lt;oriansj&gt;</a></span><span class="message">so you can do a clean up and recommit</span></div><div class="line" id="142437"><span class="nick" style="color:#2e2a4a"><a href="#142437" label="[14:24:37]">&lt;oriansj&gt;</a></span><span class="message">and I'll merge</span></div><div class="line" id="142439"><span class="nick" style="color:#389600"><a href="#142439" label="[14:24:39]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/pull/52">https://github.com/oriansj/stage0-posix/pull/52</a> </span></div><div class="line" id="142448"><span class="nick" style="color:#389600"><a href="#142448" label="[14:24:48]">&lt;stikonas&gt;</a></span><span class="message">ok...</span></div><div class="line" id="142547"><span class="nick" style="color:#389600"><a href="#142547" label="[14:25:47]">&lt;stikonas&gt;</a></span><span class="message">those slipped through via make Generate_test_anwers...</span></div><div class="line" id="142606"><span class="nick" style="color:#2e2a4a"><a href="#142606" label="[14:26:06]">&lt;oriansj&gt;</a></span><span class="message">understandably.</span></div><div class="line" id="142628"><span class="nick" style="color:#2e2a4a"><a href="#142628" label="[14:26:28]">&lt;oriansj&gt;</a></span><span class="message">It is why I alway do make clean test-* to prevent such things</span></div><div class="line" id="142648"><span class="nick" style="color:#389600"><a href="#142648" label="[14:26:48]">&lt;stikonas&gt;</a></span><span class="message">I think I was running this while doing M2-Planet checksums...</span></div><div class="line" id="142654"><span class="nick" style="color:#389600"><a href="#142654" label="[14:26:54]">&lt;stikonas&gt;</a></span><span class="message">but forgot for stage0-posix</span></div><div class="line" id="142713"><span class="nick" style="color:#2e2a4a"><a href="#142713" label="[14:27:13]">&lt;oriansj&gt;</a></span><span class="message">these things happen</span></div><div class="line" id="143344"><span class="nick" style="color:#389600"><a href="#143344" label="[14:33:44]">&lt;stikonas&gt;</a></span><span class="message">ok, things seem to work after make clean too now</span></div><div class="line" id="151828"><span class="nick" style="color:#2e2a4a"><a href="#151828" label="[15:18:28]">&lt;oriansj&gt;</a></span><span class="message">and a new official release for mescc-tools is now up (now that the RISC-V isssues have been largely cleared)</span></div><div class="line" id="153554"><span class="nick" style="color:#2e2a4a"><a href="#153554" label="[15:35:54]">&lt;oriansj&gt;</a></span><span class="message">and an M2-Planet release</span></div><div class="line" id="154525"><span class="nick" style="color:#389600"><a href="#154525" label="[15:45:25]">&lt;stikonas&gt;</a></span><span class="message">still a few components left...</span></div><div class="line" id="154543"><span class="nick" style="color:#389600"><a href="#154543" label="[15:45:43]">&lt;stikonas&gt;</a></span><span class="message">I guess bootstrap-seeds need a new release, then mescc-tools-extra and stage0-posix</span></div><div class="line" id="155008"><span class="nick" style="color:#389600"><a href="#155008" label="[15:50:08]">&lt;stikonas&gt;</a></span><span class="message">oh and M2libc...</span></div><div class="line" id="160350"><span class="nick" style="color:#2e2a4a"><a href="#160350" label="[16:03:50]">&lt;oriansj&gt;</a></span><span class="message">sure I</span></div><div class="line" id="160357"><span class="nick" style="color:#2e2a4a"><a href="#160357" label="[16:03:57]">&lt;oriansj&gt;</a></span><span class="message">I'll do some tagging</span></div><div class="line" id="160412"><span class="nick" style="color:#2e2a4a"><a href="#160412" label="[16:04:12]">&lt;oriansj&gt;</a></span><span class="message">although I don't think mescc-tools-extra needs a release</span></div><div class="line" id="160425"><span class="nick" style="color:#2e2a4a"><a href="#160425" label="[16:04:25]">&lt;oriansj&gt;</a></span><span class="message">as nothing new has been added</span></div><div class="line" id="160737"><span class="nick" style="color:#2e2a4a"><a href="#160737" label="[16:07:37]">&lt;oriansj&gt;</a></span><span class="message">but I'll give it a minor tag (v1.2.1)</span></div><div class="line" id="161920"><span class="nick" style="color:#2e2a4a"><a href="#161920" label="[16:19:20]">&lt;oriansj&gt;</a></span><span class="message">ok, I'll incorporate all that and do a proper release for stage0-posix with it all included</span></div><div class="line" id="162006"><span class="nick" style="color:#2e2a4a"><a href="#162006" label="[16:20:06]">&lt;oriansj&gt;</a></span><span class="message">fuzzing for hex2, M1 and M2-Planet all looking good now</span></div><div class="line" id="163833"><span class="nick" style="color:#2e2a4a"><a href="#163833" label="[16:38:33]">&lt;oriansj&gt;</a></span><span class="message">stikonas: what are your thoughts on instead of the output being in bin but rather bin-${ARCH}</span></div><div class="line" id="163901"><span class="nick" style="color:#2e2a4a"><a href="#163901" label="[16:39:01]">&lt;oriansj&gt;</a></span><span class="message">as it would allow all of the architectures to be built in parrallel</span></div><div class="line" id="163914"><span class="nick" style="color:#2e2a4a"><a href="#163914" label="[16:39:14]">&lt;oriansj&gt;</a></span><span class="message">fossy: thoughts?</span></div><div class="line" id="164516"><span class="nick" style="color:#389600"><a href="#164516" label="[16:45:16]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="164524"><span class="nick" style="color:#389600"><a href="#164524" label="[16:45:24]">&lt;stikonas&gt;</a></span><span class="message">that's true but maybe it's better to do</span></div><div class="line" id="164527"><span class="nick" style="color:#389600"><a href="#164527" label="[16:45:27]">&lt;stikonas&gt;</a></span><span class="message">${ARCH}/bin</span></div><div class="line" id="164547"><span class="nick" style="color:#389600"><a href="#164547" label="[16:45:47]">&lt;stikonas&gt;</a></span><span class="message">I think at least from scripting perspective in live-bootstrap that might be easier</span></div><div class="line" id="164559"><span class="nick" style="color:#389600"><a href="#164559" label="[16:45:59]">&lt;stikonas&gt;</a></span><span class="message">then ${ARCH} is basically self-contained...</span></div><div class="line" id="171454"><span class="nick" style="color:#2e2a4a"><a href="#171454" label="[17:14:54]">&lt;oriansj&gt;</a></span><span class="message">good point</span></div><div class="line" id="183305"><span class="nick" style="color:#2e2a4a"><a href="#183305" label="[18:33:05]">&lt;oriansj&gt;</a></span><span class="message">ok all checksums updated, now to enable parallel builds/tests</span></div><div class="line" id="185615"><span class="nick" style="color:#389600"><a href="#185615" label="[18:56:15]">&lt;stikonas&gt;</a></span><span class="message">should also email to bootstrappable mailing list...</span></div><div class="line" id="192230"><span class="nick" style="color:#2e2a4a"><a href="#192230" label="[19:22:30]">&lt;oriansj&gt;</a></span><span class="message">probably after I finish the parallel change</span></div><div class="line" id="200300"><span class="nick" style="color:#2e2a4a"><a href="#200300" label="[20:03:00]">&lt;oriansj&gt;</a></span><span class="message">and I'll finish after I deal with the wife interrupt</span></div><div class="line" id="200749"><span class="nick" style="color:#389600"><a href="#200749" label="[20:07:49]">&lt;stikonas&gt;</a></span><span class="message">sure, I also need to help wife with dinner...</span></div><div class="line" id="232027"><span class="nick" style="color:#2e2a4a"><a href="#232027" label="[23:20:27]">&lt;oriansj&gt;</a></span><span class="message">I'm going to make the parallel builds for the next release cycle as it has grown in complexity to include build artifact inspection and audit. Which will make for a good next release but too much to do in a single day.</span></div><div class="line" id="233003"><span class="nick" style="color:#6d2462"><a href="#233003" label="[23:30:03]">&lt;deesix&gt;</a></span><span class="message">Hello, oriansj. That reminds me the testing unification I left half finished... sorry for that. I need to catch up a bit with (months of) logs and the work on riscv that I've been seeing flying by these days. Congratulations, stikonas!</span></div><div class="line" id="233542"><span class="nick" style="color:#6b8072"><a href="#233542" label="[23:35:42]">&lt;xentrac&gt;</a></span><span class="message">glad to see you, deesix!</span></div><div class="line" id="233605"><span class="nick" style="color:#6d2462"><a href="#233605" label="[23:36:05]">&lt;deesix&gt;</a></span><span class="message">As for &quot;how can two different people running the exact same static binary produce different behaviors&quot;, I saw qemu having bugs that make some runs to segfault but works sometimes (for code that runs 100% fine on the metal).</span></div><div class="line" id="233609"><span class="nick" style="color:#6b8072"><a href="#233609" label="[23:36:09]">&lt;xentrac&gt;</a></span><span class="message">I don't think catching up on months of logs is necessarily a good idea</span></div><div class="line" id="233648"><span class="nick" style="color:#6d2462"><a href="#233648" label="[23:36:48]">&lt;deesix&gt;</a></span><span class="message">xentrac, hello! Thanks :)</span></div><div class="line" id="233651"><span class="nick" style="color:#389600"><a href="#233651" label="[23:36:51]">&lt;stikonas&gt;</a></span><span class="message">deesix: thanks. Yes, risc-v is now done at stage-posix level</span></div><div class="line" id="233709"><span class="nick" style="color:#389600"><a href="#233709" label="[23:37:09]">&lt;stikonas&gt;</a></span><span class="message">well, at least 64-bit version, but I don't think I'll do 32-bits. Somebody else can pick it up</span></div><div class="line" id="233814"><span class="nick" style="color:#389600"><a href="#233814" label="[23:38:14]">&lt;stikonas&gt;</a></span><span class="message">of course there are other stages, not just stage-posix, e.g. mes does not yet have any risc-v support</span></div><div class="line" id="234051"><span class="nick" style="color:#2e2a4a"><a href="#234051" label="[23:40:51]">&lt;oriansj&gt;</a></span><span class="message">deesix: well it is finished for everything except knight and test1000; which honestly made the RISC-V test creation sooo much easier and faster. Thank you for that</span></div><div class="line" id="234122"><span class="nick" style="color:#6d2462"><a href="#234122" label="[23:41:22]">&lt;deesix&gt;</a></span><span class="message">xentrac, sure... all of it is a lot, but a bit of reading to get/recover some context might help, I think... (also to make silly questions again and again :P).</span></div><div class="line" id="234136"><span class="nick" style="color:#2e2a4a"><a href="#234136" label="[23:41:36]">&lt;oriansj&gt;</a></span><span class="message">we got RISC-V tests integrated in only a few minutes but it took a little bit to get them all to pass.</span></div><div class="line" id="234202"><span class="nick" style="color:#2e2a4a"><a href="#234202" label="[23:42:02]">&lt;oriansj&gt;</a></span><span class="message">deesix: we do encourage questions and improved shared understanding.</span></div><div class="line" id="234204"><span class="nick" style="color:#6d2462"><a href="#234204" label="[23:42:04]">&lt;deesix&gt;</a></span><span class="message">xentrac, *not* make</span></div><div class="line" id="234231"><span class="nick" style="color:#8dd3c7"><a href="#234231" label="[23:42:31]">&lt;fossy&gt;</a></span><span class="message">I also think $ARCH/bin is fine</span></div><div class="line" id="234244"><span class="nick" style="color:#389600"><a href="#234244" label="[23:42:44]">&lt;stikonas&gt;</a></span><span class="message">well, that's the point of tests, if they had been passing initially, then they wouldn't have been that useful</span></div><div class="line" id="234245"><span class="nick" style="color:#6d2462"><a href="#234245" label="[23:42:45]">&lt;deesix&gt;</a></span><span class="message">oriansj, great... so they were integrated. Thanks!</span></div><div class="line" id="234254"><span class="nick" style="color:#389600"><a href="#234254" label="[23:42:54]">&lt;stikonas&gt;</a></span><span class="message">now we were able to use them to find a few bugs</span></div><div class="line" id="234341"><span class="nick" style="color:#2e2a4a"><a href="#234341" label="[23:43:41]">&lt;oriansj&gt;</a></span><span class="message">stikonas: and mailed out to mailing list the release announcement</span></div><div class="line" id="234504"><span class="nick" style="color:#389600"><a href="#234504" label="[23:45:04]">&lt;stikonas&gt;</a></span><span class="message">you also did quite a bit of work yourself, you were mostly mentioning me... Anyway, it's good to finally have release out</span></div><div class="line" id="234543"><span class="nick" style="color:#6b8072"><a href="#234543" label="[23:45:43]">&lt;xentrac&gt;</a></span><span class="message">questions are good</span></div><div class="line" id="234935"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o oriansj</span></div><div class="line" id="235017"><span class="nick" style="color:#2e2a4a"><a href="#235017" label="[23:50:17]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well I believe in praising people when they do good work.</span></div><div class="line" id="235107"><span class="nick" style="color:#2e2a4a"><a href="#235107" label="[23:51:07]">&lt;oriansj&gt;</a></span><span class="message">and you absolutely did great work that should be pointed out</span></div><div class="line" id="235838"><span class="nick" style="color:#6b8072"><a href="#235838" label="[23:58:38]">&lt;xentrac&gt;</a></span><span class="message">I think it's great too</span></div><br /></div></body></html>