<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-05-14.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000859"><span class="nick" style="color:#389600"><a href="#000859" label="[00:08:59]">&lt;stikonas&gt;</a></span><span class="message">oriansj: hex2 only supports 32-bit labels, doesn't it?</span></div><div class="line" id="001201"><span class="nick" style="color:#389600"><a href="#001201" label="[00:12:01]">&lt;stikonas&gt;</a></span><span class="message">I wonder why we need  to special-case 64-bits here <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/mes.git/tree/module/mescc/x86_64/as.scm?h=wip-riscv#n129">https://git.savannah.gnu.org/cgit/mes.git/tree/module/mescc/x86_64/as.scm?h=wip-riscv#n129</a> </span></div><div class="line" id="001214"><span class="nick" style="color:#8dd3c7"><a href="#001214" label="[00:12:14]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well we figured one wouldn't need to produce more than a 2GB binary in hex2 and that %0 %label or %label %0 would work for big or little endian 64bit addresses</span></div><div class="line" id="001245"><span class="nick" style="color:#389600"><a href="#001245" label="[00:12:45]">&lt;stikonas&gt;</a></span><span class="message">yeah, we wouldn't build much more than tcc...</span></div><div class="line" id="001309"><span class="nick" style="color:#389600"><a href="#001309" label="[00:13:09]">&lt;stikonas&gt;</a></span><span class="message">anyway, maybe I can skip that 64-bit part for riscv64...</span></div><div class="line" id="001331"><span class="nick" style="color:#8dd3c7"><a href="#001331" label="[00:13:31]">&lt;oriansj&gt;</a></span><span class="message">or just do a riscv32 bit port first</span></div><div class="line" id="001409"><span class="nick" style="color:#389600"><a href="#001409" label="[00:14:09]">&lt;stikonas&gt;</a></span><span class="message">well, I'm just modyfing existing 64-bit port that was using pre riscv defines</span></div><div class="line" id="001423"><span class="nick" style="color:#389600"><a href="#001423" label="[00:14:23]">&lt;stikonas&gt;</a></span><span class="message">which wouldn't really work well with either old or new mescc-tools</span></div><div class="line" id="001435"><span class="nick" style="color:#389600"><a href="#001435" label="[00:14:35]">&lt;stikonas&gt;</a></span><span class="message">but in any case it's easier than new port (riscv32)</span></div><div class="line" id="001526"><span class="nick" style="color:#2e2a4a"><a href="#001526" label="[00:15:26]">&lt;probie&gt;</a></span><span class="message">oriansj: is a lisp interpreter in Haskell (that can be run by Blynn Haskell) particularly desirable, or just a case of &quot;would be cool&quot;?</span></div><div class="line" id="001614"><span class="nick" style="color:#6b8072"><a href="#001614" label="[00:16:14]">&lt;stikonas[m]&gt;</a></span><span class="message">probie: I don't think it's particularly desirable... Just might be cool</span></div><div class="line" id="001656"><span class="nick" style="color:#6b8072"><a href="#001656" label="[00:16:56]">&lt;stikonas[m]&gt;</a></span><span class="message">But it would probably be slow, even slower than mes-m2</span></div><div class="line" id="001821"><span class="nick" style="color:#389600"><a href="#001821" label="[00:18:21]">&lt;stikonas&gt;</a></span><span class="message">oriansj: anyway, I'm now trying to figure out what is all that wrap-in stuff in mescc...</span></div><div class="line" id="001835"><span class="nick" style="color:#389600"><a href="#001835" label="[00:18:35]">&lt;stikonas&gt;</a></span><span class="message">I'm getting errors like Wrong type (expecting string): (#:string &quot;Hello, Mescc!\n&quot;)</span></div><div class="line" id="001905"><span class="nick" style="color:#389600"><a href="#001905" label="[00:19:05]">&lt;stikonas&gt;</a></span><span class="message">so it looks like variables that I get are not strings but somehow wrapped-in strings</span></div><div class="line" id="002017"><span class="nick" style="color:#8dd3c7"><a href="#002017" label="[00:20:17]">&lt;oriansj&gt;</a></span><span class="message">probie: I encourage people to pursue projects they might find fun or cool; not that they always should  be useful</span></div><div class="line" id="002148"><span class="nick" style="color:#2e2a4a"><a href="#002148" label="[00:21:48]">&lt;probie&gt;</a></span><span class="message">The nix derivation for <a rel="nofollow" href="https://github.com/oriansj/blynn-compiler">https://github.com/oriansj/blynn-compiler</a>  doesn't seem to work :(. I'll just build it using gcc for now</span></div><div class="line" id="004740"><span class="nick" style="color:#8dd3c7"><a href="#004740" label="[00:47:40]">&lt;oriansj&gt;</a></span><span class="message">probie: well probably because of the transistion from FILE* builtin type and proper FILE* structs</span></div><div class="line" id="005230"><span class="nick" style="color:#8dd3c7"><a href="#005230" label="[00:52:30]">&lt;oriansj&gt;</a></span><span class="message">and we transistioned to using M2libc after we noticed a good bit of duplication occuring.</span></div><div class="line" id="005258"><span class="nick" style="color:#2e2a4a"><a href="#005258" label="[00:52:58]">&lt;probie&gt;</a></span><span class="message">Nah, I think it's pulling a bad version of M2libc (or not pulling it at all). It's getting &quot;Unable to open for reading file: M2libc/sys/types.h&quot;</span></div><div class="line" id="005350"><span class="nick" style="color:#8dd3c7"><a href="#005350" label="[00:53:50]">&lt;oriansj&gt;</a></span><span class="message">yep, that'll do it</span></div><div class="line" id="005607"><span class="nick" style="color:#8dd3c7"><a href="#005607" label="[00:56:07]">&lt;oriansj&gt;</a></span><span class="message">if you are using M2-Mesoplanet use -I or setting the env variable M2LIBC_PATH to where a copy of M2libc is located</span></div><div class="line" id="005656"><span class="nick" style="color:#8dd3c7"><a href="#005656" label="[00:56:56]">&lt;oriansj&gt;</a></span><span class="message">but there might still be a few lines using the old //CONSTANT behavior</span></div><div class="line" id="005735"><span class="nick" style="color:#2e2a4a"><a href="#005735" label="[00:57:35]">&lt;probie&gt;</a></span><span class="message">To clarify, I'm getting this failure when I run `nix-build -I nixpkgs=<a rel="nofollow" href="https://github.com/OriansJ/blynn-compiler/archive/master.tar.gz">https://github.com/OriansJ/blynn-compiler/archive/master.tar.gz</a>  '&lt;nixpkgs&gt;' -A blynn-compiler`</span></div><div class="line" id="011316"><span class="nick" style="color:#8dd3c7"><a href="#011316" label="[01:13:16]">&lt;oriansj&gt;</a></span><span class="message">probie: here is what I get: <a rel="nofollow" href="https://paste.debian.net/1280186/">https://paste.debian.net/1280186/</a> </span></div><div class="line" id="044434"><span class="nick" style="color:#80b1d3"><a href="#044434" label="[04:44:34]">&lt;drakonis&gt;</a></span><span class="message">muurkha: that's an enjoyable 100r post</span></div><div class="line" id="052646"><span class="nick" style="color:#6d2462"><a href="#052646" label="[05:26:46]">&lt;emilytrau[m]&gt;</a></span><span class="message">&lt;ericson2314&gt; &quot;emilytrau: it looks like kaem-...&quot; &lt;- i didn't notice! great catch thank you!</span></div><div class="line" id="052933"><span class="nick" style="color:#6d2462"><a href="#052933" label="[05:29:33]">&lt;emilytrau[m]&gt;</a></span><span class="message">&lt;ericson2314&gt; &quot;it would also be good to use ...&quot; &lt;- what's the difference between `derivation` and `derivationStrict`? I can't find docs for it or examples in nixpkgs</span></div><div class="line" id="060751"><span class="nick" style="color:#234e69"><a href="#060751" label="[06:07:51]">&lt;muurkha&gt;</a></span><span class="message">drakonis: yeah, I loved it</span></div><div class="line" id="175510"><span class="nick" style="color:#6c3d55"><a href="#175510" label="[17:55:10]">&lt;ericson2314&gt;</a></span><span class="message">&lt;emilytrau[m]&gt; &quot;what's the difference between `...&quot; &lt;- `derivationStrict` is the actual primop, and doesn't leak its inputs</span></div><div class="line" id="175519"><span class="nick" style="color:#6c3d55"><a href="#175519" label="[17:55:19]">&lt;ericson2314&gt;</a></span><span class="message">there is no urgency to use it</span></div><div class="line" id="175542"><span class="nick" style="color:#6c3d55"><a href="#175542" label="[17:55:42]">&lt;ericson2314&gt;</a></span><span class="message">but some of us have been thinking it would be good to migrate Nixpkgs away from always leaking this steam (for perf and sanity)</span></div><div class="line" id="175601"><span class="nick" style="color:#6c3d55"><a href="#175601" label="[17:56:01]">&lt;ericson2314&gt;</a></span><span class="message">and the bootstrap, being self contained, is an excellent place to start :)</span></div><div class="line" id="175623"><span class="nick" style="color:#6c3d55"><a href="#175623" label="[17:56:23]">&lt;ericson2314&gt;</a></span><span class="message">btw, I've started working on the parallelism thing</span></div><div class="line" id="182119"><span class="nick" style="color:#6c3d55"><a href="#182119" label="[18:21:19]">&lt;ericson2314&gt;</a></span><span class="message">no mv or rmdir?</span></div><div class="line" id="183844"><span class="nick" style="color:#6b8072"><a href="#183844" label="[18:38:44]">&lt;stikonas[m]&gt;</a></span><span class="message">In stage0-posix? No those are not present</span></div><div class="line" id="183856"><span class="nick" style="color:#6b8072"><a href="#183856" label="[18:38:56]">&lt;stikonas[m]&gt;</a></span><span class="message">You could do cp followed by rm</span></div><div class="line" id="183936"><span class="nick" style="color:#6b8072"><a href="#183936" label="[18:39:36]">&lt;stikonas[m]&gt;</a></span><span class="message">Possibly rn works on directories too but I'm not sure now</span></div><div class="line" id="184746"><span class="nick" style="color:#6c3d55"><a href="#184746" label="[18:47:46]">&lt;ericson2314&gt;</a></span><span class="message">stikonas: is there a barrier to adding them?</span></div><div class="line" id="184956"><span class="nick" style="color:#6b8072"><a href="#184956" label="[18:49:56]">&lt;stikonas[m]&gt;</a></span><span class="message">Not really...</span></div><div class="line" id="185020"><span class="nick" style="color:#6b8072"><a href="#185020" label="[18:50:20]">&lt;stikonas[m]&gt;</a></span><span class="message">Like I said we already have cp and rm</span></div><div class="line" id="185047"><span class="nick" style="color:#6b8072"><a href="#185047" label="[18:50:47]">&lt;stikonas[m]&gt;</a></span><span class="message">mv is just combination of them</span></div><div class="line" id="194838"><span class="nick" style="color:#6c3d55"><a href="#194838" label="[19:48:38]">&lt;ericson2314&gt;</a></span><span class="message">it seemed like cp recursive was working weirdly?</span></div><div class="line" id="194906"><span class="nick" style="color:#6c3d55"><a href="#194906" label="[19:49:06]">&lt;ericson2314&gt;</a></span><span class="message">also mv has different performance characteristics</span></div><div class="line" id="194924"><span class="nick" style="color:#6b8072"><a href="#194924" label="[19:49:24]">&lt;stikonas[m]&gt;</a></span><span class="message">I don't think we have recursive cp</span></div><div class="line" id="194938"><span class="nick" style="color:#6c3d55"><a href="#194938" label="[19:49:38]">&lt;ericson2314&gt;</a></span><span class="message">yeah it make have just made me a blank dir or something</span></div><div class="line" id="194942"><span class="nick" style="color:#6b8072"><a href="#194942" label="[19:49:42]">&lt;stikonas[m]&gt;</a></span><span class="message">stage0-posix has a fairly simple cp</span></div><div class="line" id="195003"><span class="nick" style="color:#6c3d55"><a href="#195003" label="[19:50:03]">&lt;ericson2314&gt;</a></span><span class="message">`mv` gets &quot;recursion for free&quot;</span></div><div class="line" id="195028"><span class="nick" style="color:#6c3d55"><a href="#195028" label="[19:50:28]">&lt;ericson2314&gt;</a></span><span class="message">so to speak</span></div><div class="line" id="195032"><span class="nick" style="color:#6c3d55"><a href="#195032" label="[19:50:32]">&lt;ericson2314&gt;</a></span><span class="message">anyways, it is not a blocker</span></div><div class="line" id="195039"><span class="nick" style="color:#6c3d55"><a href="#195039" label="[19:50:39]">&lt;ericson2314&gt;</a></span><span class="message">maybe I could contribute it, but no rush</span></div><div class="line" id="195244"><span class="nick" style="color:#6b8072"><a href="#195244" label="[19:52:44]">&lt;stikonas[m]&gt;</a></span><span class="message">As long as we I don't need any new syscalls. We would like to keep initial syscall set small, to not extend builder-hex0 kernel</span></div><div class="line" id="202904"><span class="nick" style="color:#389600"><a href="#202904" label="[20:29:04]">&lt;stikonas&gt;</a></span><span class="message">janneke: so I'm looking a bit at riscv64/as.scm and M1.scm. So x86 version had lots of calls like (#:address ,label) in as.scm that are processed in M1.scm file.</span></div><div class="line" id="202958"><span class="nick" style="color:#389600"><a href="#202958" label="[20:29:58]">&lt;stikonas&gt;</a></span><span class="message">janneke: so for riscv64 I think I need to add similar addresses but specific riscv64 instuction formats</span></div><div class="line" id="203002"><span class="nick" style="color:#389600"><a href="#203002" label="[20:30:02]">&lt;stikonas&gt;</a></span><span class="message">e.g. u_format</span></div><div class="line" id="203016"><span class="nick" style="color:#389600"><a href="#203016" label="[20:30:16]">&lt;stikonas&gt;</a></span><span class="message">do you think they can go to M1.scm?</span></div><div class="line" id="203101"><span class="nick" style="color:#389600"><a href="#203101" label="[20:31:01]">&lt;stikonas&gt;</a></span><span class="message">e.g. what is in x86 hex2:offset3, in riscv64 is address for u-type instructions</span></div><div class="line" id="211158"><span class="nick" style="color:#d9d9d9"><a href="#211158" label="[21:11:58]">&lt;janneke&gt;</a></span><span class="message">stikonas: yes, adding another type (#:u-format) sounds as the way to go</span></div><div class="line" id="212144"><span class="nick" style="color:#6c3d55"><a href="#212144" label="[21:21:44]">&lt;ericson2314&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/ZilchOS/bootstrap-from-tcc">https://github.com/ZilchOS/bootstrap-from-tcc</a>  oh already in Nix</span></div><div class="line" id="212147"><span class="nick" style="color:#6c3d55"><a href="#212147" label="[21:21:47]">&lt;ericson2314&gt;</a></span><span class="message">I wonder if it is useful</span></div><div class="line" id="212158"><span class="nick" style="color:#d9d9d9"><a href="#212158" label="[21:21:58]">&lt;janneke&gt;</a></span><span class="message">stikonas: or possibly keep (#:offset ..) and (#:address ..), but in M1.scm differentiate how to handle those according to the archictecture in info</span></div><div class="line" id="212215"><span class="nick" style="color:#389600"><a href="#212215" label="[21:22:15]">&lt;stikonas&gt;</a></span><span class="message">oh info has architecture...</span></div><div class="line" id="212216"><span class="nick" style="color:#389600"><a href="#212216" label="[21:22:16]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="212219"><span class="nick" style="color:#d9d9d9"><a href="#212219" label="[21:22:19]">&lt;janneke&gt;</a></span><span class="message">wait, has info architecture</span></div><div class="line" id="212233"><span class="nick" style="color:#d9d9d9"><a href="#212233" label="[21:22:33]">&lt;janneke&gt;</a></span><span class="message">right, i was just looking that up</span></div><div class="line" id="212237"><span class="nick" style="color:#389600"><a href="#212237" label="[21:22:37]">&lt;stikonas&gt;</a></span><span class="message">oh, but emitting is more complicated</span></div><div class="line" id="212252"><span class="nick" style="color:#d9d9d9"><a href="#212252" label="[21:22:52]">&lt;janneke&gt;</a></span><span class="message">no, it hasn't</span></div><div class="line" id="212311"><span class="nick" style="color:#389600"><a href="#212311" label="[21:23:11]">&lt;stikonas&gt;</a></span><span class="message">e.g. in x86 it was (string-append &quot;mov____0x32,%&quot; r) (#:address ,label)</span></div><div class="line" id="212312"><span class="nick" style="color:#d9d9d9"><a href="#212312" label="[21:23:12]">&lt;janneke&gt;</a></span><span class="message">yeah, using new labels seems the proper solution</span></div><div class="line" id="212323"><span class="nick" style="color:#389600"><a href="#212323" label="[21:23:23]">&lt;stikonas&gt;</a></span><span class="message">on the other on riscv64 I need to emit a few instructions</span></div><div class="line" id="212326"><span class="nick" style="color:#389600"><a href="#212326" label="[21:23:26]">&lt;stikonas&gt;</a></span><span class="message">something like</span></div><div class="line" id="212440"><span class="nick" style="color:#389600"><a href="#212440" label="[21:24:40]">&lt;stikonas&gt;</a></span><span class="message">&quot;rd_a0 ~label auipc&quot; and then &quot;rd_a0 rs1_a0 !label addiw&quot;</span></div><div class="line" id="212501"><span class="nick" style="color:#389600"><a href="#212501" label="[21:25:01]">&lt;stikonas&gt;</a></span><span class="message">auipc loads high bits and addiw then adds lower bits</span></div><div class="line" id="212521"><span class="nick" style="color:#d9d9d9"><a href="#212521" label="[21:25:21]">&lt;janneke&gt;</a></span><span class="message">ah</span></div><div class="line" id="212542"><span class="nick" style="color:#d9d9d9"><a href="#212542" label="[21:25:42]">&lt;janneke&gt;</a></span><span class="message">you can prolly just create a list</span></div><div class="line" id="212610"><span class="nick" style="color:#d9d9d9"><a href="#212610" label="[21:26:10]">&lt;janneke&gt;</a></span><span class="message">'(&quot;rd_ar&quot; (#:u-format? ..) &quot;auipc&quot;)</span></div><div class="line" id="212927"><span class="nick" style="color:#389600"><a href="#212927" label="[21:29:27]">&lt;stikonas&gt;</a></span><span class="message">ok, I'll try that</span></div><div class="line" id="212931"><span class="nick" style="color:#389600"><a href="#212931" label="[21:29:31]">&lt;stikonas&gt;</a></span><span class="message">though don't expect anything fast... I'm still fighting with scheme which I'm just barely familiar with</span></div><div class="line" id="213005"><span class="nick" style="color:#d9d9d9"><a href="#213005" label="[21:30:05]">&lt;janneke&gt;</a></span><span class="message">stikonas: i'm delighted you're willing to look into this</span></div><div class="line" id="213211"><span class="nick" style="color:#d9d9d9"><a href="#213211" label="[21:32:11]">&lt;janneke&gt;</a></span><span class="message">and i'd much rather have you can enjoy it than finish a bit sooner</span></div><div class="line" id="213435"><span class="nick" style="color:#6c3d55"><a href="#213435" label="[21:34:35]">&lt;ericson2314&gt;</a></span><span class="message">janneke: I would like to add a CLI flag for the CRT dir for tinycc</span></div><div class="line" id="213439"><span class="nick" style="color:#6c3d55"><a href="#213439" label="[21:34:39]">&lt;ericson2314&gt;</a></span><span class="message">what branch/repo should I target?</span></div><div class="line" id="213518"><span class="nick" style="color:#bc80bd"><a href="#213518" label="[21:35:18]">&lt;mihi&gt;</a></span><span class="message">stikonas, I assume you have solved the mystery of &quot;wrapped strings&quot;? :)</span></div><div class="line" id="213610"><span class="nick" style="color:#6b8072"><a href="#213610" label="[21:36:10]">&lt;stikonas[m]&gt;</a></span><span class="message">mihi: more like understood how they are processed</span></div><div class="line" id="213615"><span class="nick" style="color:#6b8072"><a href="#213615" label="[21:36:15]">&lt;stikonas[m]&gt;</a></span><span class="message">after looking at M1.scm</span></div><div class="line" id="213703"><span class="nick" style="color:#389600"><a href="#213703" label="[21:37:03]">&lt;stikonas&gt;</a></span><span class="message">mihi: they are processed in <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/mes.git/tree/module/mescc/M1.scm#n146">https://git.savannah.gnu.org/cgit/mes.git/tree/module/mescc/M1.scm#n146</a> </span></div><div class="line" id="213709"><span class="nick" style="color:#bc80bd"><a href="#213709" label="[21:37:09]">&lt;mihi&gt;</a></span><span class="message">ok :) I would not call those list expressions inside quasiquote and pmatch &quot;calls&quot;, they are just list expressions which are later processed by pmatch :)</span></div><div class="line" id="213751"><span class="nick" style="color:#6c3d55"><a href="#213751" label="[21:37:51]">&lt;ericson2314&gt;</a></span><span class="message">oh maybe I can do '{B}' tricks</span></div><div class="line" id="213826"><span class="nick" style="color:#d9d9d9"><a href="#213826" label="[21:38:26]">&lt;janneke&gt;</a></span><span class="message">ericson2314: the latest in use in guix, is mes-0.23</span></div><div class="line" id="213836"><span class="nick" style="color:#6c3d55"><a href="#213836" label="[21:38:36]">&lt;ericson2314&gt;</a></span><span class="message">ok thanks</span></div><div class="line" id="221057"><span class="nick" style="color:#3c5b35"><a href="#221057" label="[22:10:57]">&lt;Irvise_&gt;</a></span><span class="message">A potentially dumdum question. Can Mes be run in a &quot;normal&quot; Linux distro?</span></div><div class="line" id="221256"><span class="nick" style="color:#3c5b35"><a href="#221256" label="[22:12:56]">&lt;Irvise_&gt;</a></span><span class="message">I would like to test its Scheme support. However, it seems it requires &quot;blood-elf&quot; to be installed in the system. That requires Mescc-tools, which require M1 planet, but that seems to require the rest of the &quot;low level&quot; bootstrap procedures...</span></div><div class="line" id="221806"><span class="nick" style="color:#bc80bd"><a href="#221806" label="[22:18:06]">&lt;mihi&gt;</a></span><span class="message">Irvise_, you can build mescc-tools with gcc or tcc, no M2-Planet required</span></div><div class="line" id="221819"><span class="nick" style="color:#bc80bd"><a href="#221819" label="[22:18:19]">&lt;mihi&gt;</a></span><span class="message">just use the included Makefile</span></div><div class="line" id="221826"><span class="nick" style="color:#d9d9d9"><a href="#221826" label="[22:18:26]">&lt;janneke&gt;</a></span><span class="message">Irvise_: sure, i believe mes is included in debian</span></div><div class="line" id="221925"><span class="nick" style="color:#d9d9d9"><a href="#221925" label="[22:19:25]">&lt;janneke&gt;</a></span><span class="message">as is mescc-tools, no planets are needed</span></div><div class="line" id="221958"><span class="nick" style="color:#d9d9d9"><a href="#221958" label="[22:19:58]">&lt;janneke&gt;</a></span><span class="message">it's also included in guix, as a regular (non-bootstrap) package</span></div><div class="line" id="222005"><span class="nick" style="color:#d9d9d9"><a href="#222005" label="[22:20:05]">&lt;janneke&gt;</a></span><span class="message">guix install mes ;-)</span></div><div class="line" id="222305"><span class="nick" style="color:#3c5b35"><a href="#222305" label="[22:23:05]">&lt;Irvise_&gt;</a></span><span class="message">OpenSUSE does not have nyacc available in the repos. I will go down the Guix route :)</span></div><div class="line" id="222336"><span class="nick" style="color:#d9d9d9"><a href="#222336" label="[22:23:36]">&lt;janneke&gt;</a></span><span class="message">Irvise_: to run mes itself, you don't need mescc-tools or nyacc</span></div><div class="line" id="222343"><span class="nick" style="color:#d9d9d9"><a href="#222343" label="[22:23:43]">&lt;janneke&gt;</a></span><span class="message">those are only required to run mescc</span></div><div class="line" id="222427"><span class="nick" style="color:#6b8072"><a href="#222427" label="[22:24:27]">&lt;stikonas[m]&gt;</a></span><span class="message">And nyacc has to be at very specific version</span></div><div class="line" id="222440"><span class="nick" style="color:#6b8072"><a href="#222440" label="[22:24:40]">&lt;stikonas[m]&gt;</a></span><span class="message">It's just easier to get it outside distro</span></div><div class="line" id="222723"><span class="nick" style="color:#bc80bd"><a href="#222723" label="[22:27:23]">&lt;mihi&gt;</a></span><span class="message">ACTION was not aware that mes, mescc-tools and nyacc are packaged in Debian. Also, the only package depending on either nyacc or mescc-tools in Debian is mes :) But mes in debian stale is at 0.22 and mescc-tools at 1.1 :)</span></div><div class="line" id="223020"><span class="nick" style="color:#6b8072"><a href="#223020" label="[22:30:20]">&lt;stikonas[m]&gt;</a></span><span class="message">And Debian build of mes is built with gcc</span></div><div class="line" id="223033"><span class="nick" style="color:#6b8072"><a href="#223033" label="[22:30:33]">&lt;stikonas[m]&gt;</a></span><span class="message">Unlike guix build which is bootatrapped</span></div><div class="line" id="223047"><span class="nick" style="color:#d9d9d9"><a href="#223047" label="[22:30:47]">&lt;janneke&gt;</a></span><span class="message">sure, well, in guix you can have both</span></div><div class="line" id="223124"><span class="nick" style="color:#6b8072"><a href="#223124" label="[22:31:24]">&lt;stikonas[m]&gt;</a></span><span class="message">Well mes-m2 is crashier than mes</span></div><div class="line" id="223149"><span class="nick" style="color:#6b8072"><a href="#223149" label="[22:31:49]">&lt;stikonas[m]&gt;</a></span><span class="message">I have seen cases of mes-m2 crashing on tcc build</span></div><div class="line" id="223201"><span class="nick" style="color:#6b8072"><a href="#223201" label="[22:32:01]">&lt;stikonas[m]&gt;</a></span><span class="message">But mes working fine</span></div><div class="line" id="223215"><span class="nick" style="color:#d9d9d9"><a href="#223215" label="[22:32:15]">&lt;janneke&gt;</a></span><span class="message">ouch</span></div><div class="line" id="223258"><span class="nick" style="color:#bc80bd"><a href="#223258" label="[22:32:58]">&lt;mihi&gt;</a></span><span class="message">ACTION wonders if did anyone did ddc with mes built with itself or mes-m2 for different compilers that built first mes?</span></div><div class="line" id="223325"><span class="nick" style="color:#bc80bd"><a href="#223325" label="[22:33:25]">&lt;mihi&gt;</a></span><span class="message">I would expect the binaries should be identical once you have built mes with mescc.</span></div><div class="line" id="223328"><span class="nick" style="color:#389600"><a href="#223328" label="[22:33:28]">&lt;stikonas&gt;</a></span><span class="message">I think I've seen that with mes-m2 0.24, haven't tried building tcc with mes-m2</span></div><div class="line" id="223343"><span class="nick" style="color:#389600"><a href="#223343" label="[22:33:43]">&lt;stikonas&gt;</a></span><span class="message">mihi: yes, that will be identical</span></div><div class="line" id="223402"><span class="nick" style="color:#389600"><a href="#223402" label="[22:34:02]">&lt;stikonas&gt;</a></span><span class="message">but binary mes-m2 build with M2-Planet will be quite different from mes built with mescc</span></div><div class="line" id="223417"><span class="nick" style="color:#389600"><a href="#223417" label="[22:34:17]">&lt;stikonas&gt;</a></span><span class="message">M2-Planet binary is maybe twice as big and is 30% or so slower</span></div><div class="line" id="223420"><span class="nick" style="color:#bc80bd"><a href="#223420" label="[22:34:20]">&lt;mihi&gt;</a></span><span class="message">stikonas, so you tested it, but is that just the expectation?</span></div><div class="line" id="223435"><span class="nick" style="color:#389600"><a href="#223435" label="[22:34:35]">&lt;stikonas&gt;</a></span><span class="message">identical builds?</span></div><div class="line" id="223439"><span class="nick" style="color:#389600"><a href="#223439" label="[22:34:39]">&lt;stikonas&gt;</a></span><span class="message">somebody else tested earlier</span></div><div class="line" id="223448"><span class="nick" style="color:#bc80bd"><a href="#223448" label="[22:34:48]">&lt;mihi&gt;</a></span><span class="message">okay :) best argument ever :P</span></div><div class="line" id="223455"><span class="nick" style="color:#389600"><a href="#223455" label="[22:34:55]">&lt;stikonas&gt;</a></span><span class="message">Debian Guix, etc builds were identical</span></div><div class="line" id="223502"><span class="nick" style="color:#389600"><a href="#223502" label="[22:35:02]">&lt;stikonas&gt;</a></span><span class="message">though it was with older versions</span></div><br /></div></body></html>