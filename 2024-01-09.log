<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2024-01-09.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="025147"><span class="nick" style="color:#389600"><a href="#025147" label="[02:51:47]">&lt;oriansj&gt;</a></span><span class="message">muurkha: indeed. Although I can't say that I have ever seen FORTH interpreters written in FORTH. They are usually written in another language (generally assembly) and then expanded in FORTH.</span></div><div class="line" id="025640"><span class="nick" style="color:#389600"><a href="#025640" label="[02:56:40]">&lt;oriansj&gt;</a></span><span class="message">same is true for BASIC</span></div><div class="line" id="051634"><span class="nick" style="color:#8dd3c7"><a href="#051634" label="[05:16:34]">&lt;muurkha&gt;</a></span><span class="message">oriansj: most FORTH interpreters are written in FORTH, using the FORTH as a macro assembler</span></div><div class="line" id="051657"><span class="nick" style="color:#8dd3c7"><a href="#051657" label="[05:16:57]">&lt;muurkha&gt;</a></span><span class="message">the exceptions like jonesforth are, I think, more readable</span></div><div class="line" id="051744"><span class="nick" style="color:#8dd3c7"><a href="#051744" label="[05:17:44]">&lt;muurkha&gt;</a></span><span class="message">but the vast majority of the hundreds of FORTHs that have been written, and I think literally all the historically important ones, have been written in FORTH</span></div><div class="line" id="052117"><span class="nick" style="color:#8dd3c7"><a href="#052117" label="[05:21:17]">&lt;muurkha&gt;</a></span><span class="message">polyForth, FIG-FORTH, F-83, colorForth, Muench and Ting's eForth model, Pygmy Forth, and bigForth are all written in FORTH, for example</span></div><div class="line" id="052253"><span class="nick" style="color:#8dd3c7"><a href="#052253" label="[05:22:53]">&lt;muurkha&gt;</a></span><span class="message">bigForth and colorForth are unusual in this list because they're native-code compilers, so they don't need parts to be written in assembly, except in the sense that the output from any compiler is written in assembly</span></div><div class="line" id="052336"><span class="nick" style="color:#8dd3c7"><a href="#052336" label="[05:23:36]">&lt;muurkha&gt;</a></span><span class="message">I think Win32Forth is also written in Forth, but I can't remember.  that would be an exception to 'all the historically important ones' if not</span></div><div class="line" id="052503"><span class="nick" style="color:#8dd3c7"><a href="#052503" label="[05:25:03]">&lt;muurkha&gt;</a></span><span class="message">the FORTHs I've seen that are *not* written in FORTH are pfe, jonesforth, and gforth</span></div><div class="line" id="093214"><span class="nick" style="color:#2e2a4a"><a href="#093214" label="[09:32:14]">&lt;GoogulatorMobile&gt;</a></span><span class="message">muurkha: more importantly it's not just 0.26 and all releases since then, but also all the intermediate commits</span></div><div class="line" id="093349"><span class="nick" style="color:#2e2a4a"><a href="#093349" label="[09:33:49]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Including 2.x, which was also lost</span></div><div class="line" id="093516"><span class="nick" style="color:#2e2a4a"><a href="#093516" label="[09:35:16]">&lt;GoogulatorMobile&gt;</a></span><span class="message">And we also have development history for the gap Guix currently has</span></div><div class="line" id="094041"><span class="nick" style="color:#2e2a4a"><a href="#094041" label="[09:40:41]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Unfortunately the clisp build of Yale Haskell has some serious issues - but it turns out, we do have another free Common Lisp implementation supported by Yale Haskell out of the box (CMU CL, which is now public domain)</span></div><div class="line" id="094200"><span class="nick" style="color:#2e2a4a"><a href="#094200" label="[09:42:00]">&lt;GoogulatorMobile&gt;</a></span><span class="message">And there's a bootstrap path of clisp (GPL, written in C, not self-hosted) -&gt; SBCL (MIT - derivative of CMU CL, might itself be able to run Yale Haskell) -&gt; CMU CL</span></div><div class="line" id="094407"><span class="nick" style="color:#2e2a4a"><a href="#094407" label="[09:44:07]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Yale Haskell 2.05 does appear to support recursive modules, which are the major reason why Hugs can't bootstrap GHC</span></div><div class="line" id="094450"><span class="nick" style="color:#2e2a4a"><a href="#094450" label="[09:44:50]">&lt;GoogulatorMobile&gt;</a></span><span class="message">So maybe HBC won't even be needed</span></div><div class="line" id="102005"><span class="nick" style="color:#8dd3c7"><a href="#102005" label="[10:20:05]">&lt;muurkha&gt;</a></span><span class="message">GoogulatorMobile: that's fantastic!</span></div><div class="line" id="102101"><span class="nick" style="color:#8dd3c7"><a href="#102101" label="[10:21:01]">&lt;muurkha&gt;</a></span><span class="message">it's surprising that clisp is buggy; it has a good reputation.  I suppose you aren't using a contemporary version of clisp, because I think there wasn't one, but a recent version?</span></div><div class="line" id="102828"><span class="nick" style="color:#6b8072"><a href="#102828" label="[10:28:28]">&lt;Googulator&gt;</a></span><span class="message">It's not that clisp is buggy - the problem is that Yale Haskell never officially supported it.</span></div><div class="line" id="102851"><span class="nick" style="color:#6b8072"><a href="#102851" label="[10:28:51]">&lt;Googulator&gt;</a></span><span class="message">And it seems rekado's port of Yale Haskell to clisp is rather brittle.</span></div><div class="line" id="102916"><span class="nick" style="color:#6b8072"><a href="#102916" label="[10:29:16]">&lt;Googulator&gt;</a></span><span class="message">CMU CL, OTOH, is one of the first-party supported platforms in Yale Haskell.</span></div><div class="line" id="103014"><span class="nick" style="color:#6b8072"><a href="#103014" label="[10:30:14]">&lt;Googulator&gt;</a></span><span class="message">Of course, the problem could well be coming from the fact that I'm trying to compile Yale Haskell on an x86-64 system, an issue that shouldn't come up at all once I move to bootstrapping inside LB.</span></div><div class="line" id="103022"><span class="nick" style="color:#6b8072"><a href="#103022" label="[10:30:22]">&lt;Googulator&gt;</a></span><span class="message">(LB is 32-bit currently)</span></div><div class="line" id="103120"><span class="nick" style="color:#6b8072"><a href="#103120" label="[10:31:20]">&lt;Googulator&gt;</a></span><span class="message">The same clisp has no trouble compiling SBCL.</span></div><div class="line" id="103742"><span class="nick" style="color:#8dd3c7"><a href="#103742" label="[10:37:42]">&lt;muurkha&gt;</a></span><span class="message">interesting, I guess I was assuming without justification that Yale Haskell was written in portable Common Lisp</span></div><div class="line" id="150107"><span class="nick" style="color:#80b1d3"><a href="#150107" label="[15:01:07]">&lt;pder&gt;</a></span><span class="message">Googulator: I tried current LB master and Fiwix hangs a little bit earlier.  The last line I see is &quot;kexec-fiwix: jumping to trampoline..&quot;</span></div><div class="line" id="150223"><span class="nick" style="color:#6b8072"><a href="#150223" label="[15:02:23]">&lt;Googulator&gt;</a></span><span class="message">hmm, so Fiwix basically doesn't even start?</span></div><div class="line" id="150255"><span class="nick" style="color:#80b1d3"><a href="#150255" label="[15:02:55]">&lt;pder&gt;</a></span><span class="message">It appears that way.  Let me verify my environment is clean and I will try again</span></div><div class="line" id="150604"><span class="nick" style="color:#6b8072"><a href="#150604" label="[15:06:04]">&lt;Googulator&gt;</a></span><span class="message">Try booting a regular 32-bit Linux under the same version of qemu - if it boots, please post the e820 map as reported in dmesg</span></div><div class="line" id="162633"><span class="nick" style="color:#80b1d3"><a href="#162633" label="[16:26:33]">&lt;pder&gt;</a></span><span class="message">Googulator: looks like this time it worked.</span></div><div class="line" id="162731"><span class="nick" style="color:#80b1d3"><a href="#162731" label="[16:27:31]">&lt;pder&gt;</a></span><span class="message">This was after doing a git clean and reseting my branch to master</span></div><div class="line" id="164722"><span class="nick" style="color:#6d2462"><a href="#164722" label="[16:47:22]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Perhaps you had too many files there and exceeded some limit</span></div><div class="line" id="171302"><span class="nick" style="color:#80b1d3"><a href="#171302" label="[17:13:02]">&lt;pder&gt;</a></span><span class="message">Googulator: second test worked as well</span></div><div class="line" id="173813"><span class="nick" style="color:#80b1d3"><a href="#173813" label="[17:38:13]">&lt;pder&gt;</a></span><span class="message">I spoke too soon.  I ran the test on the wrong machine.  I am still getting the hang before booting Fiwix</span></div><div class="line" id="174400"><span class="nick" style="color:#80b1d3"><a href="#174400" label="[17:44:00]">&lt;pder&gt;</a></span><span class="message">Let me trying booting linux in this version of qemu and post the e820 map</span></div><div class="line" id="202811"><span class="nick" style="color:#6d2462"><a href="#202811" label="[20:28:11]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Jeremiah Orians&gt; muurkha: fig-forth has all of its implementation written in assembly.</span></div><div class="line" id="203304"><span class="nick" style="color:#6b8072"><a href="#203304" label="[20:33:04]">&lt;Googulator&gt;</a></span><span class="message">rekado: is there something magical needed to get the package cl-yale-haskell work on Guix?</span></div><div class="line" id="203319"><span class="nick" style="color:#6d2462"><a href="#203319" label="[20:33:19]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Jeremiah Orians&gt; And if you just use FORTH as a macro assembler to implement your FORTH, doesn’t that kind of prove the point?</span></div><div class="line" id="203323"><span class="nick" style="color:#6b8072"><a href="#203323" label="[20:33:23]">&lt;Googulator&gt;</a></span><span class="message">For me, it's segfaulting on a simple Hello World.</span></div><div class="line" id="234858"><span class="nick" style="color:#234e69"><a href="#234858" label="[23:48:58]">&lt;stikonas&gt;</a></span><span class="message">Googulator: do you know if traps work fine with subshells in our bashes?</span></div><div class="line" id="234933"><span class="nick" style="color:#234e69"><a href="#234933" label="[23:49:33]">&lt;stikonas&gt;</a></span><span class="message">it  would probably be much cleaner if src_* functions were all &quot;local&quot;</span></div><div class="line" id="234944"><span class="nick" style="color:#234e69"><a href="#234944" label="[23:49:44]">&lt;stikonas&gt;</a></span><span class="message">i.e. variables set there wouldn't propagate back</span></div><br /></div></body></html>