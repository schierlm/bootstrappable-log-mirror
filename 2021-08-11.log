<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-08-11.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="004530"><span class="nick" style="color:#389600"><a href="#004530" label="[00:45:30]">&lt;stikonas&gt;</a></span><span class="message">oriansj: do you think it's acceptable to skip range check for label calculation in UpdateShiftRegister</span></div><div class="line" id="004554"><span class="nick" style="color:#389600"><a href="#004554" label="[00:45:54]">&lt;stikonas&gt;</a></span><span class="message">we'll only ever use it for a couple of programs (hex2.hex1 and I guess catm.hex1)</span></div><div class="line" id="004907"><span class="nick" style="color:#389600"><a href="#004907" label="[00:49:07]">&lt;stikonas&gt;</a></span><span class="message">(for B and J formats)</span></div><div class="line" id="010058"><span class="nick" style="color:#8dd3c7"><a href="#010058" label="[01:00:58]">&lt;Hagfish&gt;</a></span><span class="message">xentrac: a given user of a piece of software should be able to estimate the value of an attack to better than 10 orders of magnitude</span></div><div class="line" id="010111"><span class="nick" style="color:#8dd3c7"><a href="#010111" label="[01:01:11]">&lt;Hagfish&gt;</a></span><span class="message">for a start, most users don't have teradollars worth of assets</span></div><div class="line" id="010202"><span class="nick" style="color:#8dd3c7"><a href="#010202" label="[01:02:02]">&lt;Hagfish&gt;</a></span><span class="message">(yes, i suppose theoretically an attack could somehow cure ageing and enslave you for a billion years, but i don't think such tail risks are above the noise floor of any calculation)</span></div><div class="line" id="010227"><span class="nick" style="color:#2e2a4a"><a href="#010227" label="[01:02:27]">&lt;xentrac&gt;</a></span><span class="message">but it isn't a user that makes these decisions; it's the developers, collectively</span></div><div class="line" id="010253"><span class="nick" style="color:#8dd3c7"><a href="#010253" label="[01:02:53]">&lt;Hagfish&gt;</a></span><span class="message">yeah, the user can't afford to trust the claims a developer makes about their software</span></div><div class="line" id="010313"><span class="nick" style="color:#8dd3c7"><a href="#010313" label="[01:03:13]">&lt;Hagfish&gt;</a></span><span class="message">unless the developer is offering a warranty, backed by a good enough insurance policy</span></div><div class="line" id="010332"><span class="nick" style="color:#2e2a4a"><a href="#010332" label="[01:03:32]">&lt;xentrac&gt;</a></span><span class="message">anyway, I think what you're talking about is making execution deterministic, and that's real security, not the kind of &quot;raise the cost of the attack&quot; stuff you were describing</span></div><div class="line" id="010358"><span class="nick" style="color:#2e2a4a"><a href="#010358" label="[01:03:58]">&lt;xentrac&gt;</a></span><span class="message">similarly with running code without access to the network or the filesystem</span></div><div class="line" id="010404"><span class="nick" style="color:#8dd3c7"><a href="#010404" label="[01:04:04]">&lt;Hagfish&gt;</a></span><span class="message">removing non-determinism doesn't make software secure</span></div><div class="line" id="010425"><span class="nick" style="color:#6b8072"><a href="#010425" label="[01:04:25]">&lt;fossy&gt;</a></span><span class="message">probably a cross-kernel checksum issue? however that will not be a problem shortly</span></div><div class="line" id="010430"><span class="nick" style="color:#2e2a4a"><a href="#010430" label="[01:04:30]">&lt;xentrac&gt;</a></span><span class="message">it makes it secure against containing certain kinds of malware</span></div><div class="line" id="010431"><span class="nick" style="color:#6b8072"><a href="#010431" label="[01:04:31]">&lt;fossy&gt;</a></span><span class="message">i fixed the coreutils thing</span></div><div class="line" id="010449"><span class="nick" style="color:#8dd3c7"><a href="#010449" label="[01:04:49]">&lt;Hagfish&gt;</a></span><span class="message">xentrac: yeah, having formal proofs of a program's properties is valuable</span></div><div class="line" id="010834"><span class="nick" style="color:#389600"><a href="#010834" label="[01:08:34]">&lt;stikonas&gt;</a></span><span class="message">fossy: nice...</span></div><div class="line" id="010850"><span class="nick" style="color:#389600"><a href="#010850" label="[01:08:50]">&lt;stikonas&gt;</a></span><span class="message">I'm trying to debug my hex1 label offset calculation...</span></div><div class="line" id="010945"><span class="nick" style="color:#389600"><a href="#010945" label="[01:09:45]">&lt;stikonas&gt;</a></span><span class="message">mostly working but there is a small problem with risc-v I-type jumps</span></div><div class="line" id="011238"><span class="nick" style="color:#2e2a4a"><a href="#011238" label="[01:12:38]">&lt;xentrac&gt;</a></span><span class="message">what's the problem with the jumps, stikonas?</span></div><div class="line" id="011337"><span class="nick" style="color:#389600"><a href="#011337" label="[01:13:37]">&lt;stikonas&gt;</a></span><span class="message">xentrac: actually on second though there isn't any problem. I think the difference is because I still have to implement other thing pointers (with &amp; symbol)</span></div><div class="line" id="011352"><span class="nick" style="color:#389600"><a href="#011352" label="[01:13:52]">&lt;stikonas&gt;</a></span><span class="message">just noticed that only those labels that point to pointers were incorrect</span></div><div class="line" id="011409"><span class="nick" style="color:#389600"><a href="#011409" label="[01:14:09]">&lt;stikonas&gt;</a></span><span class="message">that's just something I haven't implemented yet</span></div><div class="line" id="011420"><span class="nick" style="color:#389600"><a href="#011420" label="[01:14:20]">&lt;stikonas&gt;</a></span><span class="message">but should be fairly easy</span></div><div class="line" id="011515"><span class="nick" style="color:#389600"><a href="#011515" label="[01:15:15]">&lt;stikonas&gt;</a></span><span class="message">just this function <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/hex2_word.c#L117">https://github.com/oriansj/mescc-tools/blob/master/hex2_word.c#L117</a> </span></div><div class="line" id="011542"><span class="nick" style="color:#389600"><a href="#011542" label="[01:15:42]">&lt;stikonas&gt;</a></span><span class="message">minus all the irrelevant bits, that we don't need</span></div><div class="line" id="011556"><span class="nick" style="color:#2e2a4a"><a href="#011556" label="[01:15:56]">&lt;xentrac&gt;</a></span><span class="message">ah, non-code pointers?</span></div><div class="line" id="011611"><span class="nick" style="color:#389600"><a href="#011611" label="[01:16:11]">&lt;stikonas&gt;</a></span><span class="message">yes...</span></div><div class="line" id="011650"><span class="nick" style="color:#389600"><a href="#011650" label="[01:16:50]">&lt;stikonas&gt;</a></span><span class="message">hmm, maybe we don't really need them though</span></div><div class="line" id="011700"><span class="nick" style="color:#389600"><a href="#011700" label="[01:17:00]">&lt;stikonas&gt;</a></span><span class="message">I used them in kaem-micro</span></div><div class="line" id="011720"><span class="nick" style="color:#389600"><a href="#011720" label="[01:17:20]">&lt;stikonas&gt;</a></span><span class="message">but probably not necessary for hex2</span></div><div class="line" id="011731"><span class="nick" style="color:#389600"><a href="#011731" label="[01:17:31]">&lt;stikonas&gt;</a></span><span class="message">will be required for cc_* later</span></div><div class="line" id="011741"><span class="nick" style="color:#389600"><a href="#011741" label="[01:17:41]">&lt;stikonas&gt;</a></span><span class="message">but that means we can implement them in hex2</span></div><div class="line" id="012223"><span class="nick" style="color:#389600"><a href="#012223" label="[01:22:23]">&lt;stikonas&gt;</a></span><span class="message">which means I just need to do hex encoding of my current code</span></div><div class="line" id="012244"><span class="nick" style="color:#389600"><a href="#012244" label="[01:22:44]">&lt;stikonas&gt;</a></span><span class="message">should be able to do it withing a week before I become busier with other stuff for some time</span></div><div class="line" id="012428"><span class="nick" style="color:#2e2a4a"><a href="#012428" label="[01:24:28]">&lt;xentrac&gt;</a></span><span class="message">yay :)</span></div><div class="line" id="012502"><span class="nick" style="color:#389600"><a href="#012502" label="[01:25:02]">&lt;stikonas&gt;</a></span><span class="message">it's about 500 lines of assembly though...</span></div><div class="line" id="012513"><span class="nick" style="color:#389600"><a href="#012513" label="[01:25:13]">&lt;stikonas&gt;</a></span><span class="message">kaem was only 350</span></div><div class="line" id="012553"><span class="nick" style="color:#389600"><a href="#012553" label="[01:25:53]">&lt;stikonas&gt;</a></span><span class="message">but at leas it's the last piece of risc-v code where manual jumps have to be calculated</span></div><div class="line" id="012713"><span class="nick" style="color:#2e2a4a"><a href="#012713" label="[01:27:13]">&lt;xentrac&gt;</a></span><span class="message">hooray!</span></div><div class="line" id="014724"><span class="nick" style="color:#389600"><a href="#014724" label="[01:47:24]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/pull/35">https://github.com/oriansj/stage0-posix/pull/35</a> </span></div><div class="line" id="022628"><span class="nick" style="color:#389600"><a href="#022628" label="[02:26:28]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I think there might be some problems with label calculation in hex2 when . are used</span></div><div class="line" id="022648"><span class="nick" style="color:#389600"><a href="#022648" label="[02:26:48]">&lt;stikonas&gt;</a></span><span class="message">I was trying to see why M1 files don't build into binaries, but can't see anything bad with M1 itself</span></div><div class="line" id="022707"><span class="nick" style="color:#389600"><a href="#022707" label="[02:27:07]">&lt;stikonas&gt;</a></span><span class="message">and hex2 without dots also works</span></div><div class="line" id="024841"><span class="nick" style="color:#389600"><a href="#024841" label="[02:48:41]">&lt;stikonas&gt;</a></span><span class="message">and the fix is here <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/pull/20">https://github.com/oriansj/mescc-tools/pull/20</a> </span></div><div class="line" id="031127"><span class="nick" style="color:#6d2462"><a href="#031127" label="[03:11:27]">&lt;oriansj&gt;</a></span><span class="message">stikonas: the point of range check is just to do a basic sanity check on the input to make catching certain bugs easier. It doesn't need to be implemented in hex1 or hex2 but it is probably the correct idea in the C version of hex2 (unless I have missed something completely obvious)</span></div><div class="line" id="031249"><span class="nick" style="color:#6d2462"><a href="#031249" label="[03:12:49]">&lt;oriansj&gt;</a></span><span class="message">mescc-tools pull merged</span></div><div class="line" id="031445"><span class="nick" style="color:#6d2462"><a href="#031445" label="[03:14:45]">&lt;oriansj&gt;</a></span><span class="message">stage0-posix pull merged</span></div><div class="line" id="031620"><span class="nick" style="color:#6d2462"><a href="#031620" label="[03:16:20]">&lt;oriansj&gt;</a></span><span class="message">and WordStorePointer will only need to be done for hex2 as the %label1&gt;label2 will absolutely be needed for generating ELF sizes</span></div><div class="line" id="032040"><span class="nick" style="color:#6d2462"><a href="#032040" label="[03:20:40]">&lt;oriansj&gt;</a></span><span class="message">Hagfish: the big problem with exceeding the cost to benefit ratio is the massive value in targetted attacks. For example there are 8 people in google which if compromised would enable an attacker to compromise everyone who is using a google product. There are 4 people at Intel if compromised will result in compromise of *ALL* customers of Intel.</span></div><div class="line" id="032126"><span class="nick" style="color:#6d2462"><a href="#032126" label="[03:21:26]">&lt;oriansj&gt;</a></span><span class="message">That it why I *DO NOT* want anyone to trust me or any code I release. To reduce the benefit from compromising me.</span></div><div class="line" id="032540"><span class="nick" style="color:#6d2462"><a href="#032540" label="[03:25:40]">&lt;oriansj&gt;</a></span><span class="message">Why I recommend that all code written needs to be done with the auditor in mind. Make it as easy as possible for someone to catch any possible compromise or to simply classify any confusing code as evil.</span></div><div class="line" id="034147"><span class="nick" style="color:#234e69"><a href="#034147" label="[03:41:47]">&lt;pabs3&gt;</a></span><span class="message">Hagfish: now I'm thinking of <a rel="nofollow" href="https://xkcd.com/927/">https://xkcd.com/927/</a>  :)</span></div><div class="line" id="054330"><span class="nick" style="color:#2e2a4a"><a href="#054330" label="[05:43:30]">&lt;xentrac&gt;</a></span><span class="message">right, that's what I was saying about how developers don't know how valuable their users' assets are</span></div><div class="line" id="072019"><span class="nick" style="color:#6c3d55"><a href="#072019" label="[07:20:19]">&lt;gforce_de1977&gt;</a></span><span class="message">stikonas: thanks for your input, i will revalidate with a 64 bit build, if the perl-hash-problem persists and report</span></div><div class="line" id="110420"><span class="nick" style="color:#6b8072"><a href="#110420" label="[11:04:20]">&lt;fossy&gt;</a></span><span class="message">i think overall our new winner in long term for &quot;random stupid things that take a long time&quot; is going to be gnulib-tool</span></div><div class="line" id="110422"><span class="nick" style="color:#6b8072"><a href="#110422" label="[11:04:22]">&lt;fossy&gt;</a></span><span class="message">that thing is slow</span></div><div class="line" id="111837"><span class="nick" style="color:#389600"><a href="#111837" label="[11:18:37]">&lt;stikonas&gt;</a></span><span class="message">yeah, I noticed...</span></div><div class="line" id="145100"><span class="nick" style="color:#d9d9d9"><a href="#145100" label="[14:51:00]">&lt;vancz&gt;</a></span><span class="message">hi folks</span></div><div class="line" id="145127"><span class="nick" style="color:#d9d9d9"><a href="#145127" label="[14:51:27]">&lt;vancz&gt;</a></span><span class="message">is there documentation for what the various bootstrap tools like hex take as input?</span></div><div class="line" id="155754"><span class="nick" style="color:#bc80bd"><a href="#155754" label="[15:57:54]">&lt;siraben&gt;</a></span><span class="message">blynn-compiler broken into phases to replace the makefile: <a rel="nofollow" href="https://github.com/siraben/siraben-overlay/blob/b2494763b27a76c9971478b9531bcf7e751bbe77/pkgs/blynn/default.nix">https://github.com/siraben/siraben-overlay/blob/b2494763b27a76c9971478b9531bcf7e751bbe77/pkgs/blynn/default.nix</a> </span></div><div class="line" id="174540"><span class="nick" style="color:#389600"><a href="#174540" label="[17:45:40]">&lt;stikonas&gt;</a></span><span class="message">vancz: a bit...</span></div><div class="line" id="174703"><span class="nick" style="color:#389600"><a href="#174703" label="[17:47:03]">&lt;stikonas&gt;</a></span><span class="message">vancz: README file here describes them a bit <a rel="nofollow" href="https://github.com/oriansj/stage0-posix">https://github.com/oriansj/stage0-posix</a> </span></div><div class="line" id="174809"><span class="nick" style="color:#389600"><a href="#174809" label="[17:48:09]">&lt;stikonas&gt;</a></span><span class="message">basically hex0 just strips out comments and encodes ASCII hex characters into binary equivalent, it's basically a well commented machine code</span></div><div class="line" id="174906"><span class="nick" style="color:#389600"><a href="#174906" label="[17:49:06]">&lt;stikonas&gt;</a></span><span class="message">hex2 also supports assembly labels and can calculate jumps, so instead of encoding jump 10 instructions forward, source can contain jump to certain label</span></div><div class="line" id="175013"><span class="nick" style="color:#389600"><a href="#175013" label="[17:50:13]">&lt;stikonas&gt;</a></span><span class="message">vancz: hex1 is slightly simplified version of hex2, it only supports single character label (and I think it does not support absolute pointers), so only relative jumps are supported</span></div><div class="line" id="175044"><span class="nick" style="color:#389600"><a href="#175044" label="[17:50:44]">&lt;stikonas&gt;</a></span><span class="message">all of these are rough guide, might be tweaked a bit depending on what are the requirements for that specific architecture</span></div><div class="line" id="175250"><span class="nick" style="color:#389600"><a href="#175250" label="[17:52:50]">&lt;stikonas&gt;</a></span><span class="message">and finally M1 takes assembly language as an input, although it's a special dialect that is easy to parse</span></div><div class="line" id="175322"><span class="nick" style="color:#389600"><a href="#175322" label="[17:53:22]">&lt;stikonas&gt;</a></span><span class="message">it's not NASM or GAS syntax but is essentially the same thing content-wise</span></div><div class="line" id="175404"><span class="nick" style="color:#389600"><a href="#175404" label="[17:54:04]">&lt;stikonas&gt;</a></span><span class="message">(modified a bit so that it can be parsed token by token and does not require processing the whole line)</span></div><div class="line" id="181838"><span class="nick" style="color:#6d2462"><a href="#181838" label="[18:18:38]">&lt;oriansj&gt;</a></span><span class="message">vancz: here is a very simple and short introduction to the valid inputs <a rel="nofollow" href="https://bootstrapping.miraheze.org/wiki/Stage0">https://bootstrapping.miraheze.org/wiki/Stage0</a> </span></div><div class="line" id="182105"><span class="nick" style="color:#6d2462"><a href="#182105" label="[18:21:05]">&lt;oriansj&gt;</a></span><span class="message">vancz: and we actively encourage questions as a way to improve our documentation and onboarding processes.</span></div><div class="line" id="184558"><span class="nick" style="color:#389600"><a href="#184558" label="[18:45:58]">&lt;stikonas&gt;</a></span><span class="message">yes, PRs to improve documentation are always welcome</span></div><div class="line" id="194351"><span class="nick" style="color:#d9d9d9"><a href="#194351" label="[19:43:51]">&lt;vancz&gt;</a></span><span class="message">thanks</span></div><div class="line" id="194407"><span class="nick" style="color:#d9d9d9"><a href="#194407" label="[19:44:07]">&lt;vancz&gt;</a></span><span class="message">so the tools dont have anything like man pages yeah?</span></div><div class="line" id="194421"><span class="nick" style="color:#d9d9d9"><a href="#194421" label="[19:44:21]">&lt;vancz&gt;</a></span><span class="message">is stuff still too in flux for that to be worth the effort?</span></div><div class="line" id="195400"><span class="nick" style="color:#389600"><a href="#195400" label="[19:54:00]">&lt;stikonas&gt;</a></span><span class="message">vancz: I think there are some in mescc-tools repo</span></div><div class="line" id="195404"><span class="nick" style="color:#389600"><a href="#195404" label="[19:54:04]">&lt;stikonas&gt;</a></span><span class="message">but that's starting with hex2</span></div><div class="line" id="195436"><span class="nick" style="color:#389600"><a href="#195436" label="[19:54:36]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/tree/master/docs">https://github.com/oriansj/mescc-tools/tree/master/docs</a> </span></div><div class="line" id="195445"><span class="nick" style="color:#389600"><a href="#195445" label="[19:54:45]">&lt;stikonas&gt;</a></span><span class="message">vancz: and this is C version of hex2 which is built a bit later</span></div><div class="line" id="195455"><span class="nick" style="color:#389600"><a href="#195455" label="[19:54:55]">&lt;stikonas&gt;</a></span><span class="message">like I said, assembly versions are a bit arch specific</span></div><div class="line" id="195700"><span class="nick" style="color:#389600"><a href="#195700" label="[19:57:00]">&lt;stikonas&gt;</a></span><span class="message">but I wouldn't say things are in flux</span></div><div class="line" id="195824"><span class="nick" style="color:#389600"><a href="#195824" label="[19:58:24]">&lt;stikonas&gt;</a></span><span class="message">vancz: there is also a bit of a case that some tools are only use once or at most a few times...</span></div><div class="line" id="195845"><span class="nick" style="color:#389600"><a href="#195845" label="[19:58:45]">&lt;stikonas&gt;</a></span><span class="message">so sometimes it's better to look at the example</span></div><div class="line" id="200014"><span class="nick" style="color:#389600"><a href="#200014" label="[20:00:14]">&lt;stikonas&gt;</a></span><span class="message">e.g. to see what hex1 accepts as input, you can look at hex2.hex1 file</span></div><div class="line" id="200554"><span class="nick" style="color:#389600"><a href="#200554" label="[20:05:54]">&lt;stikonas&gt;</a></span><span class="message">vancz: also if you are interested in those low level tools, high-level prototypes are a good place to look</span></div><div class="line" id="200625"><span class="nick" style="color:#389600"><a href="#200625" label="[20:06:25]">&lt;stikonas&gt;</a></span><span class="message">e.g. <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/blob/master/High%20Level%20Prototypes/hex1.c">https://github.com/oriansj/stage0-posix/blob/master/High%20Level%20Prototypes/hex1.c</a> </span></div><div class="line" id="220058"><span class="nick">***</span><span class="message notice">pgreco_ is now known as pgreco</span></div><div class="line" id="233115"><span class="nick" style="color:#389600"><a href="#233115" label="[23:31:15]">&lt;stikonas&gt;</a></span><span class="message">hmm, I think even after my yesterdays fix hex2 might now be dealing with . correctly... Need to think about them more carefully...</span></div><div class="line" id="233754"><span class="nick" style="color:#389600"><a href="#233754" label="[23:37:54]">&lt;stikonas&gt;</a></span><span class="message">no... it was a typo in .M1 file...</span></div><br /></div></body></html>