<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-11-11.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="003206"><span class="nick" style="color:#389600"><a href="#003206" label="[00:32:06]">&lt;oriansj&gt;</a></span><span class="message">riv: we also use checksums to verify downloaded tarballs as well.</span></div><div class="line" id="003526"><span class="nick" style="color:#389600"><a href="#003526" label="[00:35:26]">&lt;oriansj&gt;</a></span><span class="message">but yeah sha256sum is only used in stage0-posix to verify the outputs were correct.</span></div><div class="line" id="004019"><span class="nick" style="color:#389600"><a href="#004019" label="[00:40:19]">&lt;oriansj&gt;</a></span><span class="message">also stikonas merged</span></div><div class="line" id="005705"><span class="nick" style="color:#389600"><a href="#005705" label="[00:57:05]">&lt;oriansj&gt;</a></span><span class="message">and updated in stage0-posix</span></div><div class="line" id="010015"><span class="nick" style="color:#2e2a4a"><a href="#010015" label="[01:00:15]">&lt;stikonas&gt;</a></span><span class="message">well, checksums of downloaded tarballs only use external GNU sha256sum</span></div><div class="line" id="010031"><span class="nick" style="color:#2e2a4a"><a href="#010031" label="[01:00:31]">&lt;stikonas&gt;</a></span><span class="message">it's not (yet) checked inside bootstrap using bootstrapped tools</span></div><div class="line" id="013438"><span class="nick" style="color:#2e2a4a"><a href="#013438" label="[01:34:38]">&lt;stikonas&gt;</a></span><span class="message">I think I might implement more complicated assignment operators next</span></div><div class="line" id="013441"><span class="nick" style="color:#2e2a4a"><a href="#013441" label="[01:34:41]">&lt;stikonas&gt;</a></span><span class="message">e.g. +=</span></div><div class="line" id="013453"><span class="nick" style="color:#2e2a4a"><a href="#013453" label="[01:34:53]">&lt;stikonas&gt;</a></span><span class="message">that should be fairly simple</span></div><div class="line" id="020915"><span class="nick" style="color:#2e2a4a"><a href="#020915" label="[02:09:15]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I'm a bit confused why in token_list <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/blob/6ebe45f369d6bf678a9dd8c6313d94a16d5ca94d/cc_reader.c#L287">https://github.com/oriansj/M2-Planet/blob/6ebe45f369d6bf678a9dd8c6313d94a16d5ca94d/cc_reader.c#L287</a>  both &quot;current-&gt;next&quot; and &quot;current-&gt;prev&quot; are set to &quot;token&quot;. Maybe you remember?</span></div><div class="line" id="020944"><span class="nick" style="color:#2e2a4a"><a href="#020944" label="[02:09:44]">&lt;stikonas&gt;</a></span><span class="message">it looks like we should be constructing doubly linked list</span></div><div class="line" id="021206"><span class="nick" style="color:#2e2a4a"><a href="#021206" label="[02:12:06]">&lt;stikonas&gt;</a></span><span class="message">hmm, maybe I should look at it with gdb...</span></div><div class="line" id="023003"><span class="nick" style="color:#389600"><a href="#023003" label="[02:30:03]">&lt;oriansj&gt;</a></span><span class="message">stikonas: I do remember the exact reason.</span></div><div class="line" id="023115"><span class="nick" style="color:#389600"><a href="#023115" label="[02:31:15]">&lt;oriansj&gt;</a></span><span class="message">Notice that it builds the list by reading a,b,c and building the list like: c-&gt;b-&gt;a and then reverses the list to become a-&gt;b-&gt;c</span></div><div class="line" id="023223"><span class="nick" style="color:#389600"><a href="#023223" label="[02:32:23]">&lt;oriansj&gt;</a></span><span class="message">so -&gt;prev is correct; but -&gt;next needs to be reversed but a single O(n) reverse is faster than building the list correctly the first time.</span></div><div class="line" id="023230"><span class="nick" style="color:#6b8072"><a href="#023230" label="[02:32:30]">&lt;stikonas[m]&gt;</a></span><span class="message">Oh, I see</span></div><div class="line" id="023259"><span class="nick" style="color:#389600"><a href="#023259" label="[02:32:59]">&lt;oriansj&gt;</a></span><span class="message">as appending the list to the new element is quite fast and making that new element the head of the list</span></div><div class="line" id="023342"><span class="nick" style="color:#6b8072"><a href="#023342" label="[02:33:42]">&lt;stikonas[m]&gt;</a></span><span class="message">OK, that's very helpful</span></div><div class="line" id="023456"><span class="nick" style="color:#389600"><a href="#023456" label="[02:34:56]">&lt;oriansj&gt;</a></span><span class="message">perhaps I needed to add a comment so when someone else in the future hits it, it can be known by reading</span></div><div class="line" id="023815"><span class="nick" style="color:#6b8072"><a href="#023815" label="[02:38:15]">&lt;stikonas[m]&gt;</a></span><span class="message">Good idea</span></div><div class="line" id="045714"><span class="nick" style="color:#80b1d3"><a href="#045714" label="[04:57:14]">&lt;muurkha&gt;</a></span><span class="message">happy Armistice Day!</span></div><div class="line" id="053326"><span class="nick">***</span><span class="message notice">DiffieHellman_ is now known as Tejs</span></div><div class="line" id="053535"><span class="nick">***</span><span class="message notice">Tejs is now known as DiffieHellman</span></div><div class="line" id="060013"><span class="nick">***</span><span class="message notice">DiffieHellman is now known as tman</span></div><div class="line" id="060840"><span class="nick">***</span><span class="message notice">tman is now known as DiffieHellman</span></div><div class="line" id="062020"><span class="nick">***</span><span class="message notice">jackhill is now known as KM4MBG</span></div><div class="line" id="062349"><span class="nick">***</span><span class="message notice">KM4MBG is now known as jackhill</span></div><div class="line" id="143305"><span class="nick" style="color:#389600"><a href="#143305" label="[14:33:05]">&lt;oriansj&gt;</a></span><span class="message">took 18hours of fuzzing but a new segfault has been found.</span></div><div class="line" id="143317"><span class="nick" style="color:#389600"><a href="#143317" label="[14:33:17]">&lt;oriansj&gt;</a></span><span class="message">a patch should be up shortly</span></div><div class="line" id="143943"><span class="nick" style="color:#2e2a4a"><a href="#143943" label="[14:39:43]">&lt;stikonas&gt;</a></span><span class="message">and  then we'll have to fuzzy new assignment operators once I'm done with them</span></div><div class="line" id="154855"><span class="nick" style="color:#389600"><a href="#154855" label="[15:48:55]">&lt;oriansj&gt;</a></span><span class="message">well yes</span></div><div class="line" id="171047"><span class="nick" style="color:#6d2462"><a href="#171047" label="[17:10:47]">&lt;gbrlwck&gt;</a></span><span class="message">muurkha: and i thought it was single's day</span></div><div class="line" id="171058"><span class="nick" style="color:#6d2462"><a href="#171058" label="[17:10:58]">&lt;gbrlwck&gt;</a></span><span class="message">oriansj: what exactly do you mean by &quot;fuzzing&quot;?</span></div><div class="line" id="171933"><span class="nick" style="color:#6d2462"><a href="#171933" label="[17:19:33]">&lt;gbrlwck&gt;</a></span><span class="message">Hagfish: thanks for the link! now i finally know how M$ (re-)defines security vulnerability :)</span></div><div class="line" id="172135"><span class="nick" style="color:#80b1d3"><a href="#172135" label="[17:21:35]">&lt;muurkha&gt;</a></span><span class="message">gbrlwck: well, I guess a lot of women found themselves single as a result of the Great War</span></div><div class="line" id="172148"><span class="nick" style="color:#6d2462"><a href="#172148" label="[17:21:48]">&lt;gbrlwck&gt;</a></span><span class="message">lol</span></div><div class="line" id="172224"><span class="nick" style="color:#6d2462"><a href="#172224" label="[17:22:24]">&lt;gbrlwck&gt;</a></span><span class="message">the Great War aka the prequel</span></div><div class="line" id="172309"><span class="nick" style="color:#2e2a4a"><a href="#172309" label="[17:23:09]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: I guess oriansj just pushes random input to M2-Planet in &quot;fuzzing&quot;</span></div><div class="line" id="172400"><span class="nick" style="color:#6d2462"><a href="#172400" label="[17:24:00]">&lt;gbrlwck&gt;</a></span><span class="message">stikonas: as in &quot;random bytes&quot;?  and the expected results are any but a segfault?</span></div><div class="line" id="172422"><span class="nick" style="color:#2e2a4a"><a href="#172422" label="[17:24:22]">&lt;stikonas&gt;</a></span><span class="message">yes, we don't want segfaults</span></div><div class="line" id="172443"><span class="nick" style="color:#2e2a4a"><a href="#172443" label="[17:24:43]">&lt;stikonas&gt;</a></span><span class="message">everything should handle pointers nicely and error out on nullptr</span></div><div class="line" id="172458"><span class="nick" style="color:#2e2a4a"><a href="#172458" label="[17:24:58]">&lt;stikonas&gt;</a></span><span class="message">rather than trying to access them</span></div><div class="line" id="173059"><span class="nick" style="color:#6d2462"><a href="#173059" label="[17:30:59]">&lt;gbrlwck&gt;</a></span><span class="message">so i guess it's not random bytes but rather random C code?</span></div><div class="line" id="173548"><span class="nick" style="color:#2e2a4a"><a href="#173548" label="[17:35:48]">&lt;stikonas&gt;</a></span><span class="message">you have to ask oriansj for details...</span></div><div class="line" id="173558"><span class="nick" style="color:#2e2a4a"><a href="#173558" label="[17:35:58]">&lt;stikonas&gt;</a></span><span class="message">in any case &quot;what is random C code...&quot;</span></div><div class="line" id="173659"><span class="nick" style="color:#2e2a4a"><a href="#173659" label="[17:36:59]">&lt;stikonas&gt;</a></span><span class="message">it might be random bytes but restricted standard characters (alphanumerics, and some symbols)</span></div><div class="line" id="183639"><span class="nick">***</span><span class="message notice">attila_lendvai_ is now known as attila_lendvai</span></div><div class="line" id="190040"><span class="nick" style="color:#6d2462"><a href="#190040" label="[19:00:40]">&lt;gbrlwck&gt;</a></span><span class="message">(where) do we have M1 written in M0 (for riscv64)?</span></div><div class="line" id="190157"><span class="nick" style="color:#6d2462"><a href="#190157" label="[19:01:57]">&lt;gbrlwck&gt;</a></span><span class="message">nvm, it's in stage0-posix/riscv64/Development</span></div><div class="line" id="190245"><span class="nick" style="color:#6d2462"><a href="#190245" label="[19:02:45]">&lt;gbrlwck&gt;</a></span><span class="message">no, it's not...</span></div><div class="line" id="203337"><span class="nick" style="color:#2e2a4a"><a href="#203337" label="[20:33:37]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: there is no M1 written in M0</span></div><div class="line" id="203430"><span class="nick" style="color:#2e2a4a"><a href="#203430" label="[20:34:30]">&lt;stikonas&gt;</a></span><span class="message">M1 is written in C and is compiled using M2-Planet but the resulting M1.M1 file is not easily human readable</span></div><div class="line" id="203441"><span class="nick" style="color:#2e2a4a"><a href="#203441" label="[20:34:41]">&lt;stikonas&gt;</a></span><span class="message">since it's a result of compilation process</span></div><div class="line" id="203454"><span class="nick" style="color:#2e2a4a"><a href="#203454" label="[20:34:54]">&lt;stikonas&gt;</a></span><span class="message">it does a similar thing as M0 but has a few extra goodies</span></div><div class="line" id="205254"><span class="nick" style="color:#389600"><a href="#205254" label="[20:52:54]">&lt;oriansj&gt;</a></span><span class="message">gbrlwck: what I mean by fuzzing is I am using a standard fuzzing tool (AFL to be precise) to try to find inputs which will result in a crash rather than a meaningful exit message or a successful compile.</span></div><div class="line" id="205423"><span class="nick" style="color:#389600"><a href="#205423" label="[20:54:23]">&lt;oriansj&gt;</a></span><span class="message">also M1 is C code built by M2-Planet into M1 output; which if you remember can be compiled by M0 as the major difference between M0 and M1 is M0 is native architecture only and M1 supports ALL of the architectures.</span></div><div class="line" id="205914"><span class="nick" style="color:#389600"><a href="#205914" label="[20:59:14]">&lt;oriansj&gt;</a></span><span class="message">and M0 is written in host specific hex2 where as M1 is written in the M2-Planet C subset to enable enhancements required to quickly add support for new targe architectures.</span></div><div class="line" id="210104"><span class="nick" style="color:#389600"><a href="#210104" label="[21:01:04]">&lt;oriansj&gt;</a></span><span class="message">it is also why changes in M1 for an architecture generally don't happen after a stage0-posix port completes; as they would also need to be reflected in M0 and could consume a considerable amount of effort as hex2 is not an easy language to program in.</span></div><div class="line" id="210127"><span class="nick" style="color:#389600"><a href="#210127" label="[21:01:27]">&lt;oriansj&gt;</a></span><span class="message">(same of course could be said for hex2)</span></div><div class="line" id="211537"><span class="nick" style="color:#2e2a4a"><a href="#211537" label="[21:15:37]">&lt;stikonas&gt;</a></span><span class="message">so I've got assignment operators working, just need to write some test</span></div><div class="line" id="221916"><span class="nick" style="color:#2e2a4a"><a href="#221916" label="[22:19:16]">&lt;stikonas&gt;</a></span><span class="message">oriansj: <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/pull/31">https://github.com/oriansj/M2-Planet/pull/31</a> </span></div><div class="line" id="222156"><span class="nick" style="color:#2e2a4a"><a href="#222156" label="[22:21:56]">&lt;stikonas&gt;</a></span><span class="message">they are basically implemented in preprocessing step</span></div><div class="line" id="223054"><span class="nick" style="color:#234e69"><a href="#223054" label="[22:30:54]">&lt;Hagfish&gt;</a></span><span class="message">that's a great contribution.  really high quality code.  i can almost understand it :P</span></div><div class="line" id="223210"><span class="nick" style="color:#234e69"><a href="#223210" label="[22:32:10]">&lt;Hagfish&gt;</a></span><span class="message">(C isn't really my thing, but it does look very readable)</span></div><div class="line" id="223252"><span class="nick" style="color:#234e69"><a href="#223252" label="[22:32:52]">&lt;Hagfish&gt;</a></span><span class="message">i do wonder if this collection of characters is a bit inscrutable, though</span></div><div class="line" id="223254"><span class="nick" style="color:#234e69"><a href="#223254" label="[22:32:54]">&lt;Hagfish&gt;</a></span><span class="message">&lt;=&gt;|&amp;!^%</span></div><div class="line" id="223319"><span class="nick" style="color:#234e69"><a href="#223319" label="[22:33:19]">&lt;Hagfish&gt;</a></span><span class="message">i can't think of anything clearer</span></div><div class="line" id="223347"><span class="nick" style="color:#234e69"><a href="#223347" label="[22:33:47]">&lt;Hagfish&gt;</a></span><span class="message">assigning it to a variable/constant wouldn't add much (just a layer of indirection)</span></div><div class="line" id="223754"><span class="nick" style="color:#234e69"><a href="#223754" label="[22:37:54]">&lt;Hagfish&gt;</a></span><span class="message">there are different collections of these operator symbols in different places, and it's not obvious which belong where</span></div><div class="line" id="223937"><span class="nick" style="color:#2e2a4a"><a href="#223937" label="[22:39:37]">&lt;stikonas&gt;</a></span><span class="message">well, that &lt;=&gt;|&amp;!^% is mostly how tokenization is deal with, i.e. all those characters are put together when tokenizing</span></div><div class="line" id="224008"><span class="nick" style="color:#234e69"><a href="#224008" label="[22:40:08]">&lt;Hagfish&gt;</a></span><span class="message">and the &quot;+&quot; and &quot;-&quot; cases are dealt with separately, right?</span></div><div class="line" id="224012"><span class="nick" style="color:#2e2a4a"><a href="#224012" label="[22:40:12]">&lt;stikonas&gt;</a></span><span class="message">somewhat forceful approach but it does tokenize it</span></div><div class="line" id="224022"><span class="nick" style="color:#2e2a4a"><a href="#224022" label="[22:40:22]">&lt;stikonas&gt;</a></span><span class="message">yes, those are deal with separately in later if</span></div><div class="line" id="224028"><span class="nick" style="color:#2e2a4a"><a href="#224028" label="[22:40:28]">&lt;stikonas&gt;</a></span><span class="message">because I needed more control there</span></div><div class="line" id="224034"><span class="nick" style="color:#234e69"><a href="#224034" label="[22:40:34]">&lt;Hagfish&gt;</a></span><span class="message">yup, that makes sense</span></div><div class="line" id="224036"><span class="nick" style="color:#2e2a4a"><a href="#224036" label="[22:40:36]">&lt;stikonas&gt;</a></span><span class="message">initially - was also in that group</span></div><div class="line" id="224111"><span class="nick" style="color:#234e69"><a href="#224111" label="[22:41:11]">&lt;Hagfish&gt;</a></span><span class="message">i think i just wish that the language itself was more &quot;regular&quot;, but that would make it less nice to actually code with</span></div><div class="line" id="224128"><span class="nick" style="color:#2e2a4a"><a href="#224128" label="[22:41:28]">&lt;stikonas&gt;</a></span><span class="message">if you look carefully into those if's, I've also sneaked in a change to tokenizer to recognize -- and ++</span></div><div class="line" id="224144"><span class="nick" style="color:#234e69"><a href="#224144" label="[22:41:44]">&lt;Hagfish&gt;</a></span><span class="message">ooh, sneaky :)</span></div><div class="line" id="224146"><span class="nick" style="color:#234e69"><a href="#224146" label="[22:41:46]">&lt;Hagfish&gt;</a></span><span class="message">yeah, that's good</span></div><div class="line" id="224149"><span class="nick" style="color:#2e2a4a"><a href="#224149" label="[22:41:49]">&lt;stikonas&gt;</a></span><span class="message">well, the good thing about C is that it's close to assembly</span></div><div class="line" id="224156"><span class="nick" style="color:#2e2a4a"><a href="#224156" label="[22:41:56]">&lt;stikonas&gt;</a></span><span class="message">well -- and ++ are not working yet</span></div><div class="line" id="224213"><span class="nick" style="color:#2e2a4a"><a href="#224213" label="[22:42:13]">&lt;stikonas&gt;</a></span><span class="message">more stuff needs to be done in the parser</span></div><div class="line" id="224224"><span class="nick" style="color:#234e69"><a href="#224224" label="[22:42:24]">&lt;Hagfish&gt;</a></span><span class="message">not working, but they are recognised as tokens?</span></div><div class="line" id="224236"><span class="nick" style="color:#2e2a4a"><a href="#224236" label="[22:42:36]">&lt;stikonas&gt;</a></span><span class="message">yes</span></div><div class="line" id="224238"><span class="nick" style="color:#234e69"><a href="#224238" label="[22:42:38]">&lt;Hagfish&gt;</a></span><span class="message">cool</span></div><div class="line" id="224246"><span class="nick" style="color:#2e2a4a"><a href="#224246" label="[22:42:46]">&lt;stikonas&gt;</a></span><span class="message">well, M2-Planet will complain right now if you use them</span></div><div class="line" id="224305"><span class="nick" style="color:#234e69"><a href="#224305" label="[22:43:05]">&lt;Hagfish&gt;</a></span><span class="message">better than a segfault, right?</span></div><div class="line" id="224312"><span class="nick" style="color:#2e2a4a"><a href="#224312" label="[22:43:12]">&lt;stikonas&gt;</a></span><span class="message">I don't think it was a segfault before</span></div><div class="line" id="224318"><span class="nick" style="color:#2e2a4a"><a href="#224318" label="[22:43:18]">&lt;stikonas&gt;</a></span><span class="message">just different error</span></div><div class="line" id="224321"><span class="nick" style="color:#234e69"><a href="#224321" label="[22:43:21]">&lt;Hagfish&gt;</a></span><span class="message">hmm, okay</span></div><div class="line" id="224323"><span class="nick" style="color:#2e2a4a"><a href="#224323" label="[22:43:23]">&lt;stikonas&gt;</a></span><span class="message">but compilation is two stage process</span></div><div class="line" id="224343"><span class="nick" style="color:#2e2a4a"><a href="#224343" label="[22:43:43]">&lt;stikonas&gt;</a></span><span class="message">we first tokenize file and group characters into groups of logical tokens (such as keywords, operators, etc...)</span></div><div class="line" id="224358"><span class="nick" style="color:#2e2a4a"><a href="#224358" label="[22:43:58]">&lt;stikonas&gt;</a></span><span class="message">and then parser analyzes tokens and spits out assembly</span></div><div class="line" id="224417"><span class="nick" style="color:#234e69"><a href="#224417" label="[22:44:17]">&lt;Hagfish&gt;</a></span><span class="message">that sounds familiar</span></div><div class="line" id="224420"><span class="nick" style="color:#2e2a4a"><a href="#224420" label="[22:44:20]">&lt;stikonas&gt;</a></span><span class="message">actually assembler (M0 and M1) also does it in two stages, first everything is tokenized</span></div><div class="line" id="224452"><span class="nick" style="color:#2e2a4a"><a href="#224452" label="[22:44:52]">&lt;stikonas&gt;</a></span><span class="message">and then macro words are replaced with hexadecimal equivalents (and some other stuff like immediates are encoded)</span></div><div class="line" id="224628"><span class="nick" style="color:#234e69"><a href="#224628" label="[22:46:28]">&lt;Hagfish&gt;</a></span><span class="message">it feels like in assembly, everything is sort of a special case</span></div><div class="line" id="224644"><span class="nick" style="color:#234e69"><a href="#224644" label="[22:46:44]">&lt;Hagfish&gt;</a></span><span class="message">well, someone had to design the assembly language, and they had a reason for it</span></div><div class="line" id="224704"><span class="nick" style="color:#234e69"><a href="#224704" label="[22:47:04]">&lt;Hagfish&gt;</a></span><span class="message">but it's a bit more &quot;arbitrary&quot; than, say, a minimal Turing machine</span></div><div class="line" id="224732"><span class="nick" style="color:#234e69"><a href="#224732" label="[22:47:32]">&lt;Hagfish&gt;</a></span><span class="message">the arbitrariness is a mixture of developer helpfulness, and limitations of the hardware, i guess</span></div><div class="line" id="224752"><span class="nick" style="color:#234e69"><a href="#224752" label="[22:47:52]">&lt;Hagfish&gt;</a></span><span class="message">and, as you say, the C is close to the assembly</span></div><div class="line" id="224805"><span class="nick" style="color:#2e2a4a"><a href="#224805" label="[22:48:05]">&lt;stikonas&gt;</a></span><span class="message">and another interesting observation I noticed</span></div><div class="line" id="224924"><span class="nick" style="color:#2e2a4a"><a href="#224924" label="[22:49:24]">&lt;stikonas&gt;</a></span><span class="message">so cc_* compiler is mayeb 5 to 7 times larger than M0 (depending on the architecture) but almost all functions from M0 are used in cc_*</span></div><div class="line" id="224939"><span class="nick" style="color:#234e69"><a href="#224939" label="[22:49:39]">&lt;Hagfish&gt;</a></span><span class="message">hmm</span></div><div class="line" id="225002"><span class="nick" style="color:#234e69"><a href="#225002" label="[22:50:02]">&lt;Hagfish&gt;</a></span><span class="message">maybe someone has already managed to sneak in a backdoor :D</span></div><div class="line" id="225121"><span class="nick" style="color:#2e2a4a"><a href="#225121" label="[22:51:21]">&lt;stikonas&gt;</a></span><span class="message">I didn't see any :D</span></div><div class="line" id="225127"><span class="nick" style="color:#2e2a4a"><a href="#225127" label="[22:51:27]">&lt;stikonas&gt;</a></span><span class="message">when I was working on risc-v stuff</span></div><div class="line" id="225128"><span class="nick" style="color:#234e69"><a href="#225128" label="[22:51:28]">&lt;Hagfish&gt;</a></span><span class="message">that's a relief :)</span></div><div class="line" id="225146"><span class="nick" style="color:#2e2a4a"><a href="#225146" label="[22:51:46]">&lt;stikonas&gt;</a></span><span class="message">well, that's one good thing about multi-arch support in stage0-posix</span></div><div class="line" id="225154"><span class="nick" style="color:#2e2a4a"><a href="#225154" label="[22:51:54]">&lt;stikonas&gt;</a></span><span class="message">different arches are often done by different people</span></div><div class="line" id="225202"><span class="nick" style="color:#2e2a4a"><a href="#225202" label="[22:52:02]">&lt;stikonas&gt;</a></span><span class="message">even though it mostly follows the same algorithm</span></div><div class="line" id="230001"><span class="nick" style="color:#234e69"><a href="#230001" label="[23:00:01]">&lt;Hagfish&gt;</a></span><span class="message">the fact that bootstrapping works across multiple arches is a weird kind of &quot;proof of work&quot; :P</span></div><div class="line" id="230210"><span class="nick" style="color:#2e2a4a"><a href="#230210" label="[23:02:10]">&lt;stikonas&gt;</a></span><span class="message">well, so far only stage0-posix works across multiple arches</span></div><div class="line" id="230215"><span class="nick" style="color:#2e2a4a"><a href="#230215" label="[23:02:15]">&lt;stikonas&gt;</a></span><span class="message">anything further doesn't</span></div><div class="line" id="230552"><span class="nick" style="color:#234e69"><a href="#230552" label="[23:05:52]">&lt;Hagfish&gt;</a></span><span class="message">oh, that's a pity</span></div><div class="line" id="234043"><span class="nick" style="color:#389600"><a href="#234043" label="[23:40:43]">&lt;oriansj&gt;</a></span><span class="message">Hagfish: well if there is a backdoor, it is entirely in human auditable source or the tiny root binaries you can trivially audit or replace.</span></div><div class="line" id="234109"><span class="nick" style="color:#389600"><a href="#234109" label="[23:41:09]">&lt;oriansj&gt;</a></span><span class="message">But string matching is kinda universally useful</span></div><div class="line" id="234132"><span class="nick" style="color:#389600"><a href="#234132" label="[23:41:32]">&lt;oriansj&gt;</a></span><span class="message">hence why it appears in M0, cc_*, etc</span></div><div class="line" id="234452"><span class="nick" style="color:#389600"><a href="#234452" label="[23:44:52]">&lt;oriansj&gt;</a></span><span class="message">but yeah the reader would be consideraly more simple if we could assume whitespace between C tokens. (aka require a=b+c; to be written as a = b + c ;)</span></div><div class="line" id="235313"><span class="nick" style="color:#2e2a4a"><a href="#235313" label="[23:53:13]">&lt;stikonas&gt;</a></span><span class="message">well, a lot of C requirements are actually due to how tokenization work</span></div><div class="line" id="235342"><span class="nick" style="color:#2e2a4a"><a href="#235342" label="[23:53:42]">&lt;stikonas&gt;</a></span><span class="message">e.g. stuff like a++1doesn't work and needs space in between: a+ +1</span></div><div class="line" id="235556"><span class="nick" style="color:#389600"><a href="#235556" label="[23:55:56]">&lt;oriansj&gt;</a></span><span class="message">I was thinking more in terms of how much simpler an S-expression tokenizer is</span></div><br /></div></body></html>