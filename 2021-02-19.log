<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-02-19.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000221"><span class="nick" style="color:#389600"><a href="#000221" label="[00:02:21]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: agreed however I have a hard time understanding how an FSF project (Guix) would use a binary blob without issue.</span></div><div class="line" id="000301"><span class="nick" style="color:#8dd3c7"><a href="#000301" label="[00:03:01]">&lt;stikonas&gt;</a></span><span class="message">well, I know what you mean... Although, they also use haskell blobs</span></div><div class="line" id="000326"><span class="nick" style="color:#8dd3c7"><a href="#000326" label="[00:03:26]">&lt;stikonas&gt;</a></span><span class="message">anyway, if &quot;Source&quot; files are banned then even reduced binary seed bootstrap has to be improved</span></div><div class="line" id="000350"><span class="nick" style="color:#8dd3c7"><a href="#000350" label="[00:03:50]">&lt;stikonas&gt;</a></span><span class="message">even if we let configure scripts, there are bison generated files there</span></div><div class="line" id="000426"><span class="nick" style="color:#389600"><a href="#000426" label="[00:04:26]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: that is the idea.</span></div><div class="line" id="000517"><span class="nick" style="color:#8dd3c7"><a href="#000517" label="[00:05:17]">&lt;stikonas&gt;</a></span><span class="message">well, we found one path for that, although for now it needs musl</span></div><div class="line" id="000520"><span class="nick" style="color:#389600"><a href="#000520" label="[00:05:20]">&lt;OriansJ&gt;</a></span><span class="message">as they have been giving a great many languages free passes in the name of getting a user base.</span></div><div class="line" id="000543"><span class="nick" style="color:#389600"><a href="#000543" label="[00:05:43]">&lt;OriansJ&gt;</a></span><span class="message">honestly can't blame them for the choice.</span></div><div class="line" id="000545"><span class="nick" style="color:#8dd3c7"><a href="#000545" label="[00:05:45]">&lt;stikonas&gt;</a></span><span class="message">well, debt taking</span></div><div class="line" id="000555"><span class="nick" style="color:#8dd3c7"><a href="#000555" label="[00:05:55]">&lt;stikonas&gt;</a></span><span class="message">otherwise if you have nothing, you wouldn't have any users</span></div><div class="line" id="000601"><span class="nick" style="color:#389600"><a href="#000601" label="[00:06:01]">&lt;OriansJ&gt;</a></span><span class="message">Hardline bootstrapping is always a tough sell</span></div><div class="line" id="000640"><span class="nick" style="color:#8dd3c7"><a href="#000640" label="[00:06:40]">&lt;stikonas&gt;</a></span><span class="message">but at least bison bootstrapping was once done by gio and reproduced in live-bootstrap</span></div><div class="line" id="000644"><span class="nick" style="color:#8dd3c7"><a href="#000644" label="[00:06:44]">&lt;stikonas&gt;</a></span><span class="message">so that's something doable</span></div><div class="line" id="000720"><span class="nick" style="color:#389600"><a href="#000720" label="[00:07:20]">&lt;OriansJ&gt;</a></span><span class="message">but we are coming up on 5 years of progress and paths (with cheating) that work and are making great progress of paths with less cheating.</span></div><div class="line" id="000732"><span class="nick" style="color:#389600"><a href="#000732" label="[00:07:32]">&lt;OriansJ&gt;</a></span><span class="message">So its getting easier</span></div><div class="line" id="000957"><span class="nick" style="color:#8dd3c7"><a href="#000957" label="[00:09:57]">&lt;stikonas&gt;</a></span><span class="message">I also didn't like that suggestion that guix users are expected to use substitutes in your guix gnutls expiration bug...</span></div><div class="line" id="001044"><span class="nick" style="color:#8dd3c7"><a href="#001044" label="[00:10:44]">&lt;stikonas&gt;</a></span><span class="message"> (<a rel="nofollow" href="https://debbugs.gnu.org/cgi/bugreport.cgi?bug=44559#25">https://debbugs.gnu.org/cgi/bugreport.cgi?bug=44559#25</a>) </span></div><div class="line" id="001212"><span class="nick" style="color:#2e2a4a"><a href="#001212" label="[00:12:12]">&lt;civodul&gt;</a></span><span class="message">stikonas: probably an observation rather than a suggestion</span></div><div class="line" id="001305"><span class="nick" style="color:#8dd3c7"><a href="#001305" label="[00:13:05]">&lt;stikonas&gt;</a></span><span class="message">probably, hence I didn't feel strong enough about it to reply...</span></div><div class="line" id="001318"><span class="nick" style="color:#2e2a4a"><a href="#001318" label="[00:13:18]">&lt;civodul&gt;</a></span><span class="message">i don't think everyone on this channel builds everything from source either :-)</span></div><div class="line" id="001327"><span class="nick" style="color:#8dd3c7"><a href="#001327" label="[00:13:27]">&lt;stikonas&gt;</a></span><span class="message">oh, probably not</span></div><div class="line" id="001401"><span class="nick" style="color:#8dd3c7"><a href="#001401" label="[00:14:01]">&lt;stikonas&gt;</a></span><span class="message">people should have a choice, I just don't want building from source to be completely 2nd class citizen compared to substutes</span></div><div class="line" id="001414"><span class="nick" style="color:#2e2a4a"><a href="#001414" label="[00:14:14]">&lt;civodul&gt;</a></span><span class="message">of course, and that's not the case</span></div><div class="line" id="001438"><span class="nick" style="color:#2e2a4a"><a href="#001438" label="[00:14:38]">&lt;civodul&gt;</a></span><span class="message">expirations happens to be a class of build failures for which we have no good solution</span></div><div class="line" id="001446"><span class="nick" style="color:#2e2a4a"><a href="#001446" label="[00:14:46]">&lt;civodul&gt;</a></span><span class="message">-s</span></div><div class="line" id="001502"><span class="nick" style="color:#8dd3c7"><a href="#001502" label="[00:15:02]">&lt;stikonas&gt;</a></span><span class="message">yeah, I guess there is no &quot;time&quot; namespace</span></div><div class="line" id="001517"><span class="nick" style="color:#2e2a4a"><a href="#001517" label="[00:15:17]">&lt;civodul&gt;</a></span><span class="message">like the bug mentions there's one, but not for that</span></div><div class="line" id="001521"><span class="nick" style="color:#8dd3c7"><a href="#001521" label="[00:15:21]">&lt;stikonas&gt;</a></span><span class="message">like other namespaces used to achieve containers</span></div><div class="line" id="001553"><span class="nick" style="color:#2e2a4a"><a href="#001553" label="[00:15:53]">&lt;civodul&gt;</a></span><span class="message"> <a rel="nofollow" href="http://issues.guix.gnu.org/44559#3">http://issues.guix.gnu.org/44559#3</a> </span></div><div class="line" id="001605"><span class="nick" style="color:#8dd3c7"><a href="#001605" label="[00:16:05]">&lt;stikonas&gt;</a></span><span class="message">oh yeah...</span></div><div class="line" id="001827"><span class="nick" style="color:#80b1d3"><a href="#001827" label="[00:18:27]">*</a></span><span class="message">civodul -&gt; zZz</span></div><div class="line" id="003110"><span class="nick" style="color:#389600"><a href="#003110" label="[00:31:10]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: dongcarl is absolutely right that a new guix release with an updated gnutls would entirely solve the problem; however I find the phrase &quot;you should fork Guix&quot; very rude.</span></div><div class="line" id="003146"><span class="nick" style="color:#389600"><a href="#003146" label="[00:31:46]">&lt;OriansJ&gt;</a></span><span class="message">it is a handwaving way of saying that it doesn't matter if you are right, we don't care and it is very disrespectful towards the people who actually care.</span></div><div class="line" id="003308"><span class="nick" style="color:#389600"><a href="#003308" label="[00:33:08]">&lt;OriansJ&gt;</a></span><span class="message">A more approprate response would have been, this will be fixed in the next release which we plan on doing at X date in the future.</span></div><div class="line" id="003343"><span class="nick" style="color:#6d2462"><a href="#003343" label="[00:33:43]">&lt;Hagfish&gt;</a></span><span class="message">yeah, it is very passive aggressive when people say &quot;it's open source, you can just fork it&quot;</span></div><div class="line" id="003405"><span class="nick" style="color:#6d2462"><a href="#003405" label="[00:34:05]">&lt;Hagfish&gt;</a></span><span class="message">(that's especially true when &quot;it&quot; is a network service that has an established user base)</span></div><div class="line" id="003524"><span class="nick" style="color:#389600"><a href="#003524" label="[00:35:24]">&lt;OriansJ&gt;</a></span><span class="message">even a simple patch request of if you update this, in X days the guix latest will have it fixed.</span></div><div class="line" id="003608"><span class="nick" style="color:#389600"><a href="#003608" label="[00:36:08]">&lt;OriansJ&gt;</a></span><span class="message">every bug is a call to invite the party to participate and make the community better.</span></div><div class="line" id="003835"><span class="nick" style="color:#389600"><a href="#003835" label="[00:38:35]">&lt;OriansJ&gt;</a></span><span class="message">even if it means we only gain a new tester, some documentation or even a better informed user.</span></div><div class="line" id="003921"><span class="nick" style="color:#389600"><a href="#003921" label="[00:39:21]">&lt;OriansJ&gt;</a></span><span class="message">It is one thing to say &quot;patches welcome&quot; and quite another to suggest they &quot;fork off&quot;</span></div><div class="line" id="004112"><span class="nick" style="color:#389600"><a href="#004112" label="[00:41:12]">&lt;OriansJ&gt;</a></span><span class="message">fossy: I hope to upgrade mescc-tools-seed in several major ways this weekend (finally get around to renaming to stage0-posix), convert all builds to use M2libc, etc</span></div><div class="line" id="004206"><span class="nick" style="color:#389600"><a href="#004206" label="[00:42:06]">&lt;OriansJ&gt;</a></span><span class="message">So that you'll be able to leverage M2libc for the various pieces you are working with. (So you'll be able to use C standards like fputs instead of file_print)</span></div><div class="line" id="004235"><span class="nick" style="color:#389600"><a href="#004235" label="[00:42:35]">&lt;OriansJ&gt;</a></span><span class="message">Then I need to begin the long import of MesCC libc functions into M2libc</span></div><div class="line" id="005718"><span class="nick" style="color:#8dd3c7"><a href="#005718" label="[00:57:18]">&lt;stikonas&gt;</a></span><span class="message">fossy: another perl <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/44">https://github.com/fosslinux/live-bootstrap/pull/44</a>  (this one was easy, no changes besides version bump)</span></div><div class="line" id="010553"><span class="nick" style="color:#8dd3c7"><a href="#010553" label="[01:05:53]">&lt;stikonas&gt;</a></span><span class="message">hmm, actually, I need to remove one more file there...</span></div><div class="line" id="013327"><span class="nick" style="color:#234e69"><a href="#013327" label="[01:33:27]">&lt;dongcarl&gt;</a></span><span class="message">I think we should make sure that: 1. “expiration” build failures do not place undue burden on maintainers who may need to keep cutting new releases (say release v2, time passes, then fail, v2.0.1, time passes, then fail, then v2.0.2, etc.) 2. As stikonas mentioned: building from source is not a completely 2nd class citizen compared to</span></div><div class="line" id="013327"><span class="nick" style="color:#234e69"><a href="#013327" label="[01:33:27]">&lt;dongcarl&gt;</a></span><span class="message">substitutes</span></div><div class="line" id="013334"><span class="nick" style="color:#234e69"><a href="#013334" label="[01:33:34]">&lt;dongcarl&gt;</a></span><span class="message">In that sense, the package transformation options are great: they allow working around small problems _without_ the need to fork. In other words, they are solutions which seem proportional to the problem that needs solving.</span></div><div class="line" id="013404"><span class="nick" style="color:#234e69"><a href="#013404" label="[01:34:04]">&lt;dongcarl&gt;</a></span><span class="message">It seems like a --without-tests-for-drv=&lt;derivation to modify&gt; flag would be very helpful, and perhaps a longer-term solution to the &quot;broken test that doesn't really matter and I don't mind rebuilding&quot; problem. Although I am not too familiar with derivation modification internals, I'd be happy to learn.</span></div><div class="line" id="013913"><span class="nick" style="color:#234e69"><a href="#013913" label="[01:39:13]">&lt;dongcarl&gt;</a></span><span class="message">I do want to say that I want to continue directing members of my community to the official Guix releases (and all the other good things on Guix's website) and not my fork. I see the gnutls issue as an opportunity to demonstrate Guix’s flexibility and programmability rather than a reason to fork.</span></div><div class="line" id="014826"><span class="nick" style="color:#8dd3c7"><a href="#014826" label="[01:48:26]">&lt;stikonas&gt;</a></span><span class="message">well, guix is released approximately 2 times per year according to wikipedia, so I guess in a couple of months that issue will go away anyway</span></div><div class="line" id="014948"><span class="nick" style="color:#389600"><a href="#014948" label="[01:49:48]">&lt;OriansJ&gt;</a></span><span class="message">dongcarl: fortunately expiration build failures are a reproducible build failure as well. So distros like Debian are working to eliminate them for us.</span></div><div class="line" id="015121"><span class="nick" style="color:#234e69"><a href="#015121" label="[01:51:21]">&lt;dongcarl&gt;</a></span><span class="message">OriansJ: That's good to know :-)</span></div><div class="line" id="015126"><span class="nick" style="color:#389600"><a href="#015126" label="[01:51:26]">&lt;OriansJ&gt;</a></span><span class="message">in the case of derivation. turning off tests changes the derivation result (even if the resulting binary is identical)</span></div><div class="line" id="015148"><span class="nick" style="color:#389600"><a href="#015148" label="[01:51:48]">&lt;OriansJ&gt;</a></span><span class="message">This isn't a problem for bootstrappers at all</span></div><div class="line" id="015208"><span class="nick" style="color:#234e69"><a href="#015208" label="[01:52:08]">&lt;dongcarl&gt;</a></span><span class="message">OriansJ: Right exactly, it would solve &quot;broken test that doesn't really matter and I don't mind rebuilding&quot;</span></div><div class="line" id="015209"><span class="nick" style="color:#8dd3c7"><a href="#015209" label="[01:52:09]">&lt;stikonas&gt;</a></span><span class="message">well, this is only problem if you use substitutes</span></div><div class="line" id="015212"><span class="nick" style="color:#389600"><a href="#015212" label="[01:52:12]">&lt;OriansJ&gt;</a></span><span class="message">however it requires a great many builds for those who use substitutes</span></div><div class="line" id="015215"><span class="nick" style="color:#8dd3c7"><a href="#015215" label="[01:52:15]">&lt;stikonas&gt;</a></span><span class="message">but then you are not affected at all</span></div><div class="line" id="015230"><span class="nick" style="color:#8dd3c7"><a href="#015230" label="[01:52:30]">&lt;stikonas&gt;</a></span><span class="message">by the expired builds</span></div><div class="line" id="015303"><span class="nick" style="color:#8dd3c7"><a href="#015303" label="[01:53:03]">&lt;stikonas&gt;</a></span><span class="message">how do those expiring tests end up in test suite? accidentally?</span></div><div class="line" id="015305"><span class="nick" style="color:#389600"><a href="#015305" label="[01:53:05]">&lt;OriansJ&gt;</a></span><span class="message">hence why Guix resists changing derivations lower in the build chain.</span></div><div class="line" id="015345"><span class="nick" style="color:#389600"><a href="#015345" label="[01:53:45]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: intensionally. A programmer added a test with a hard coded date in the certificate being tested.</span></div><div class="line" id="015411"><span class="nick" style="color:#389600"><a href="#015411" label="[01:54:11]">&lt;OriansJ&gt;</a></span><span class="message">probably assuming it wouldn't matter by the time the next version came out.</span></div><div class="line" id="015413"><span class="nick" style="color:#8dd3c7"><a href="#015413" label="[01:54:13]">&lt;stikonas&gt;</a></span><span class="message">that's a bit short sighted :(</span></div><div class="line" id="015416"><span class="nick" style="color:#8dd3c7"><a href="#015416" label="[01:54:16]">&lt;stikonas&gt;</a></span><span class="message">yeah...</span></div><div class="line" id="015434"><span class="nick" style="color:#8dd3c7"><a href="#015434" label="[01:54:34]">&lt;stikonas&gt;</a></span><span class="message">could just generate certificate on the fly then with appropriate dates</span></div><div class="line" id="015450"><span class="nick" style="color:#389600"><a href="#015450" label="[01:54:50]">&lt;OriansJ&gt;</a></span><span class="message">but that takes more work to get right</span></div><div class="line" id="015458"><span class="nick" style="color:#8dd3c7"><a href="#015458" label="[01:54:58]">&lt;stikonas&gt;</a></span><span class="message">well, yeah...</span></div><div class="line" id="015501"><span class="nick" style="color:#389600"><a href="#015501" label="[01:55:01]">&lt;OriansJ&gt;</a></span><span class="message">and programmers are lazy by definition.</span></div><div class="line" id="015513"><span class="nick" style="color:#8dd3c7"><a href="#015513" label="[01:55:13]">&lt;stikonas&gt;</a></span><span class="message">and I think often people think that tests are for devs only (I might be guilty of this too)</span></div><div class="line" id="015522"><span class="nick" style="color:#234e69"><a href="#015522" label="[01:55:22]">&lt;dongcarl&gt;</a></span><span class="message">OriansJ: Right, but we already have --without-tests=, which changes derivations, no?</span></div><div class="line" id="015622"><span class="nick" style="color:#389600"><a href="#015622" label="[01:56:22]">&lt;OriansJ&gt;</a></span><span class="message">dongcarl: yes but unfortunately how guix uses derivations, it wouldn't work.</span></div><div class="line" id="015632"><span class="nick" style="color:#6c3d55"><a href="#015632" label="[01:56:32]">&lt;pder&gt;</a></span><span class="message">stikonas: I was looking into the floating point issues with our tcc-musl build.  Check out this output: <a rel="nofollow" href="https://paste.debian.net/1186042/">https://paste.debian.net/1186042/</a> </span></div><div class="line" id="015658"><span class="nick" style="color:#234e69"><a href="#015658" label="[01:56:58]">&lt;dongcarl&gt;</a></span><span class="message">OriansJ: Right, that's what I saw. I don't fully understand why though, if you can point me to the right manual pages, I'd be very grateful!</span></div><div class="line" id="015721"><span class="nick" style="color:#389600"><a href="#015721" label="[01:57:21]">&lt;OriansJ&gt;</a></span><span class="message">if guix version dd5e879c3a41909b991e5841934251f538c6257c needs derivation abc, you have to do exactly x,y and z to make it</span></div><div class="line" id="015735"><span class="nick" style="color:#8dd3c7"><a href="#015735" label="[01:57:35]">&lt;stikonas&gt;</a></span><span class="message">pder: so doubles work but not floats?</span></div><div class="line" id="015745"><span class="nick" style="color:#6c3d55"><a href="#015745" label="[01:57:45]">&lt;pder&gt;</a></span><span class="message">It appears that at least with this very trival test, doubles can be assigned to correctly and we can do simple math.  Its more of a display issue</span></div><div class="line" id="015814"><span class="nick" style="color:#8dd3c7"><a href="#015814" label="[01:58:14]">&lt;stikonas&gt;</a></span><span class="message">oh I see</span></div><div class="line" id="015814"><span class="nick" style="color:#6c3d55"><a href="#015814" label="[01:58:14]">&lt;pder&gt;</a></span><span class="message">The hex representations match gcc, I just cant do printf for doubles</span></div><div class="line" id="015822"><span class="nick" style="color:#8dd3c7"><a href="#015822" label="[01:58:22]">&lt;stikonas&gt;</a></span><span class="message">hmm...</span></div><div class="line" id="015837"><span class="nick" style="color:#8dd3c7"><a href="#015837" label="[01:58:37]">&lt;stikonas&gt;</a></span><span class="message">that's why not too many things are broken...</span></div><div class="line" id="015859"><span class="nick" style="color:#8dd3c7"><a href="#015859" label="[01:58:59]">&lt;stikonas&gt;</a></span><span class="message">although, for bootstrapping perl I have to disable minimum version checks for some reason...</span></div><div class="line" id="015902"><span class="nick" style="color:#389600"><a href="#015902" label="[01:59:02]">&lt;OriansJ&gt;</a></span><span class="message">So guix build foo and guix build foo --without-tests=1 are two entirely different derivations and can't be used to satisfy each other's dependent builds.</span></div><div class="line" id="020002"><span class="nick" style="color:#8dd3c7"><a href="#020002" label="[02:00:02]">&lt;stikonas&gt;</a></span><span class="message">oh, now I understand why without-tests doesn't work</span></div><div class="line" id="020016"><span class="nick" style="color:#8dd3c7"><a href="#020016" label="[02:00:16]">&lt;stikonas&gt;</a></span><span class="message">although, I don't see when current behaviour might be useful...</span></div><div class="line" id="020153"><span class="nick" style="color:#234e69"><a href="#020153" label="[02:01:53]">&lt;dongcarl&gt;</a></span><span class="message">Hmmm okay I see...</span></div><div class="line" id="020259"><span class="nick" style="color:#389600"><a href="#020259" label="[02:02:59]">&lt;OriansJ&gt;</a></span><span class="message">dongcarl: see the checksums in the names are based on the inputs to the build; so when you change an input by turning off the test. The resulting checksums must be different and thus if you need abc-foo; fgh-foo will not satisfy in guix, even if abc-foo and fgh-foo are the exact ssame binary.</span></div><div class="line" id="020304"><span class="nick" style="color:#d9d9d9"><a href="#020304" label="[02:03:04]">&lt;vagrantc&gt;</a></span><span class="message">needs something like --without-tests-recursively</span></div><div class="line" id="020324"><span class="nick" style="color:#6c3d55"><a href="#020324" label="[02:03:24]">&lt;pder&gt;</a></span><span class="message">I havent specifically tested floats, but my understanding is that floats are promoted to doubles when calling printf</span></div><div class="line" id="020400"><span class="nick" style="color:#8dd3c7"><a href="#020400" label="[02:04:00]">&lt;stikonas&gt;</a></span><span class="message">pder: possibly, doesn't matter, you found that it's display issue</span></div><div class="line" id="020411"><span class="nick" style="color:#8dd3c7"><a href="#020411" label="[02:04:11]">&lt;stikonas&gt;</a></span><span class="message">but I guess it also affects some software that parses display</span></div><div class="line" id="020412"><span class="nick" style="color:#389600"><a href="#020412" label="[02:04:12]">&lt;OriansJ&gt;</a></span><span class="message">vagrantc: the problem is guix wants everyone to be on known good binaries</span></div><div class="line" id="020419"><span class="nick" style="color:#234e69"><a href="#020419" label="[02:04:19]">&lt;dongcarl&gt;</a></span><span class="message">OriansJ: Well, I guess in an ideal world you would recursively rewrite upwards, no?</span></div><div class="line" id="020432"><span class="nick" style="color:#d9d9d9"><a href="#020432" label="[02:04:32]">&lt;vagrantc&gt;</a></span><span class="message">and yes, debian's reproducible builds tests are doing builds that should catch issues slightly over a year in advance</span></div><div class="line" id="020434"><span class="nick" style="color:#8dd3c7"><a href="#020434" label="[02:04:34]">&lt;stikonas&gt;</a></span><span class="message">pder: but didn't we have the same problem with mes libc?</span></div><div class="line" id="020437"><span class="nick" style="color:#6c3d55"><a href="#020437" label="[02:04:37]">&lt;pder&gt;</a></span><span class="message">I am wondering if it has anything to do with printf being a variadic function.</span></div><div class="line" id="020448"><span class="nick" style="color:#8dd3c7"><a href="#020448" label="[02:04:48]">&lt;stikonas&gt;</a></span><span class="message">could be...</span></div><div class="line" id="020513"><span class="nick" style="color:#8dd3c7"><a href="#020513" label="[02:05:13]">&lt;stikonas&gt;</a></span><span class="message">because two different libc's are unlikely to have the same bug</span></div><div class="line" id="020523"><span class="nick" style="color:#6c3d55"><a href="#020523" label="[02:05:23]">&lt;pder&gt;</a></span><span class="message">The tcc-mes build prints something random.  printf(&quot;%f&quot;, pi) prints 1.114 or something like that</span></div><div class="line" id="020544"><span class="nick" style="color:#389600"><a href="#020544" label="[02:05:44]">&lt;OriansJ&gt;</a></span><span class="message">dongcarl: well that would impact the packages you build as well (like bitcoin) which would result in a potentially different binary (because of embedded paths)</span></div><div class="line" id="020548"><span class="nick" style="color:#d9d9d9"><a href="#020548" label="[02:05:48]">&lt;vagrantc&gt;</a></span><span class="message">ah, the reproducible builds tests are 398 days ... i think to maximize the chance that the day, month, week, etc aren't going to be the same</span></div><div class="line" id="020807"><span class="nick" style="color:#d9d9d9"><a href="#020807" label="[02:08:07]">&lt;vagrantc&gt;</a></span><span class="message">+1year and 33days ... oh yeah, also timezone potentially tweaking the day ... that's why 33 rather than just 32</span></div><div class="line" id="020911"><span class="nick" style="color:#389600"><a href="#020911" label="[02:09:11]">&lt;OriansJ&gt;</a></span><span class="message">However looking at guix's history the number of expiring bootstrap essential packages seem to be rare.</span></div><div class="line" id="020937"><span class="nick" style="color:#389600"><a href="#020937" label="[02:09:37]">&lt;OriansJ&gt;</a></span><span class="message">(100% crypto related)</span></div><div class="line" id="021012"><span class="nick" style="color:#234e69"><a href="#021012" label="[02:10:12]">&lt;dongcarl&gt;</a></span><span class="message">OriansJ: Okay so how about we have a flag that's --without-tests-recursively=&lt;blah&gt;, which disables blah's test, changes the derivation/checksum of blah, and propagates this change in derivation/checksum upwards (meaning that everything depending on blah has to rebuild)? Unless we're `guix build`-ing a specific derivation, we're basically just</span></div><div class="line" id="021012"><span class="nick" style="color:#234e69"><a href="#021012" label="[02:10:12]">&lt;dongcarl&gt;</a></span><span class="message">building a specification, and that specification can still be fulfilled (albeit with a different derivation).</span></div><div class="line" id="021021"><span class="nick" style="color:#234e69"><a href="#021021" label="[02:10:21]">&lt;dongcarl&gt;</a></span><span class="message">feel free to tell me if I'm completely off base</span></div><div class="line" id="021053"><span class="nick" style="color:#d9d9d9"><a href="#021053" label="[02:10:53]">&lt;vagrantc&gt;</a></span><span class="message">seems theoretically plausible, all it requires is code :)</span></div><div class="line" id="021131"><span class="nick" style="color:#234e69"><a href="#021131" label="[02:11:31]">&lt;dongcarl&gt;</a></span><span class="message">Right, all I'm asking for is a sanity check on theory hehe, since I'm very shaky on that</span></div><div class="line" id="021153"><span class="nick" style="color:#234e69"><a href="#021153" label="[02:11:53]">&lt;dongcarl&gt;</a></span><span class="message">Oh! I found another bootstrap essential failure... This time in `sed`</span></div><div class="line" id="021230"><span class="nick" style="color:#234e69"><a href="#021230" label="[02:12:30]">&lt;dongcarl&gt;</a></span><span class="message">When running on CentOS 8, the test `testsuite/inplace-selinux` fails...</span></div><div class="line" id="021240"><span class="nick" style="color:#d9d9d9"><a href="#021240" label="[02:12:40]">&lt;vagrantc&gt;</a></span><span class="message">good luck!</span></div><div class="line" id="021242"><span class="nick" style="color:#80b1d3"><a href="#021242" label="[02:12:42]">*</a></span><span class="message">vagrantc waves</span></div><div class="line" id="021250"><span class="nick" style="color:#80b1d3"><a href="#021250" label="[02:12:50]">*</a></span><span class="message">dongcarl waves</span></div><div class="line" id="021251"><span class="nick" style="color:#389600"><a href="#021251" label="[02:12:51]">&lt;OriansJ&gt;</a></span><span class="message">dongcarl: sounds reasonable however you have to think of it this way: inside of every binary is encoded paths. You can't define the path based on the binary's checksum because we don't know what it will be</span></div><div class="line" id="021337"><span class="nick" style="color:#389600"><a href="#021337" label="[02:13:37]">&lt;OriansJ&gt;</a></span><span class="message">So to solve that guix and nix just use the checksum of the sources to define the checksum of the path that is embedded in the binaries</span></div><div class="line" id="021351"><span class="nick" style="color:#234e69"><a href="#021351" label="[02:13:51]">&lt;dongcarl&gt;</a></span><span class="message">OriansJ: Yes that all makes sense</span></div><div class="line" id="021401"><span class="nick" style="color:#234e69"><a href="#021401" label="[02:14:01]">&lt;dongcarl&gt;</a></span><span class="message">OriansJ: Checksum attests to the inputs</span></div><div class="line" id="021407"><span class="nick" style="color:#234e69"><a href="#021407" label="[02:14:07]">&lt;dongcarl&gt;</a></span><span class="message">Not the outputs</span></div><div class="line" id="021445"><span class="nick" style="color:#389600"><a href="#021445" label="[02:14:45]">&lt;OriansJ&gt;</a></span><span class="message">and because we have deterministic builds, matching inputs should also have matching outputs</span></div><div class="line" id="021503"><span class="nick" style="color:#234e69"><a href="#021503" label="[02:15:03]">&lt;dongcarl&gt;</a></span><span class="message">Yup (theoretically)</span></div><div class="line" id="021639"><span class="nick" style="color:#80b1d3"><a href="#021639" label="[02:16:39]">*</a></span><span class="message">stikonas waves too</span></div><div class="line" id="021834"><span class="nick" style="color:#389600"><a href="#021834" label="[02:18:34]">&lt;OriansJ&gt;</a></span><span class="message">So package foo-1.2.3 says it needs gnutls-x.y.z not gnutls-x.y.z-disable-test1</span></div><div class="line" id="021948"><span class="nick" style="color:#389600"><a href="#021948" label="[02:19:48]">&lt;OriansJ&gt;</a></span><span class="message">so you have to redefine gnutls-x.y.z to not include the test and then it can continue around it. That is why guix created channels</span></div><div class="line" id="022134"><span class="nick" style="color:#389600"><a href="#022134" label="[02:21:34]">&lt;OriansJ&gt;</a></span><span class="message">So (I am probably wrong here but this is my best guess) in theory creating a guix channel and importing it would enable a work around for gnutls in the bootstrap; however it would likely result in a different checksum; which may or may not be an issue.</span></div><div class="line" id="022307"><span class="nick" style="color:#234e69"><a href="#022307" label="[02:23:07]">&lt;dongcarl&gt;</a></span><span class="message">Hmmmmmmm</span></div><div class="line" id="022404"><span class="nick" style="color:#234e69"><a href="#022404" label="[02:24:04]">&lt;dongcarl&gt;</a></span><span class="message">I tried using a time-machine to build a commit of Guix which had gnutls fixed, but that was unsuccessful... Would a channel/inferior combo work better here?</span></div><div class="line" id="022612"><span class="nick" style="color:#389600"><a href="#022612" label="[02:26:12]">&lt;OriansJ&gt;</a></span><span class="message">dongcarl: well time-machine is about picking a git commit to create the build graph to the package in question but I don't think there is a commit where gnutls is fixed yet which could be pointed to.</span></div><div class="line" id="022721"><span class="nick" style="color:#234e69"><a href="#022721" label="[02:27:21]">&lt;dongcarl&gt;</a></span><span class="message">OriansJ: I think on master they've bumped to a version of gnutls that has this problem fixed...</span></div><div class="line" id="022803"><span class="nick" style="color:#234e69"><a href="#022803" label="[02:28:03]">&lt;dongcarl&gt;</a></span><span class="message">Will try out inferior/channels tho</span></div><div class="line" id="022846"><span class="nick" style="color:#389600"><a href="#022846" label="[02:28:46]">&lt;OriansJ&gt;</a></span><span class="message">dongcarl: sadly I can't be of more help but hopefully it gave you a few ideas to explore.</span></div><div class="line" id="022907"><span class="nick" style="color:#234e69"><a href="#022907" label="[02:29:07]">&lt;dongcarl&gt;</a></span><span class="message">OriansJ: No you were more than helpful as always :-) Thanks!</span></div><div class="line" id="032706"><span class="nick" style="color:#6d2462"><a href="#032706" label="[03:27:06]">&lt;Hagfish&gt;</a></span><span class="message">&quot;Part 31: perl 5.004_05&quot;</span></div><div class="line" id="032709"><span class="nick" style="color:#6d2462"><a href="#032709" label="[03:27:09]">&lt;Hagfish&gt;</a></span><span class="message">you love to see it</span></div><div class="line" id="032916"><span class="nick" style="color:#6d2462"><a href="#032916" label="[03:29:16]">&lt;Hagfish&gt;</a></span><span class="message">i'm really hopeful that the hurdles between there and latest perl (plus autotools) are smaller than the hurdles faced so far</span></div><div class="line" id="033140"><span class="nick" style="color:#6d2462"><a href="#033140" label="[03:31:40]">&lt;Hagfish&gt;</a></span><span class="message">it would almost be worth enticing someone from the perl community to help out with this project, but i wouldn't want to deny stik the credit for all this current and future progress</span></div><div class="line" id="040447"><span class="nick" style="color:#389600"><a href="#040447" label="[04:04:47]">&lt;OriansJ&gt;</a></span><span class="message">well figuring out getting an ppc64le binary to run *AND* produce output to objdump -d is kicking my ass</span></div><div class="line" id="041503"><span class="nick" style="color:#389600"><a href="#041503" label="[04:15:03]">&lt;OriansJ&gt;</a></span><span class="message">I think I figured out the e_entry behavior</span></div><div class="line" id="041710"><span class="nick" style="color:#389600"><a href="#041710" label="[04:17:10]">&lt;OriansJ&gt;</a></span><span class="message">it is only reading the first 32bits of e_entry but then it loads a full 64bits of e_entry address from the location where e_entry points to</span></div><div class="line" id="042700"><span class="nick" style="color:#389600"><a href="#042700" label="[04:27:00]">&lt;OriansJ&gt;</a></span><span class="message">but atleast e_entry can be moved into the ELF_header</span></div><div class="line" id="050159"><span class="nick" style="color:#389600"><a href="#050159" label="[05:01:59]">&lt;OriansJ&gt;</a></span><span class="message">ok first ever mescc-tools official ppc64le test is now up</span></div><div class="line" id="050302"><span class="nick" style="color:#389600"><a href="#050302" label="[05:03:02]">&lt;OriansJ&gt;</a></span><span class="message">just need to figure out the blood-elf details to getting a fully debuggable binary for ppc64le</span></div><div class="line" id="050324"><span class="nick" style="color:#389600"><a href="#050324" label="[05:03:24]">&lt;OriansJ&gt;</a></span><span class="message">but that'll have to wait till tomorrow</span></div><div class="line" id="061506"><span class="nick">***</span><span class="message notice">lukedashjr is now known as luke-jr</span></div><div class="line" id="074047"><span class="nick">***</span><span class="message notice">lukedashjr is now known as luke-jr</span></div><div class="line" id="080845"><span class="nick" style="color:#bc80bd"><a href="#080845" label="[08:08:45]">&lt;plasma41&gt;</a></span><span class="message">Is it currently possible to boot directly to a guile REPL from grub?</span></div><div class="line" id="081008"><span class="nick" style="color:#bc80bd"><a href="#081008" label="[08:10:08]">&lt;plasma41&gt;</a></span><span class="message">Or to launch a guile repl from grub's commandline?</span></div><div class="line" id="081023"><span class="nick" style="color:#bc80bd"><a href="#081023" label="[08:10:23]">&lt;plasma41&gt;</a></span><span class="message">Just thinking out loud</span></div><div class="line" id="081101"><span class="nick" style="color:#bc80bd"><a href="#081101" label="[08:11:01]">&lt;plasma41&gt;</a></span><span class="message">janneke, oriansj: ^</span></div><div class="line" id="081703"><span class="nick" style="color:#3c5b35"><a href="#081703" label="[08:17:03]">&lt;janneke&gt;</a></span><span class="message">plasma41: guile needs a kernel, guix's initrd is written in guile though, so it &quot;boots to guile&quot; in a way</span></div><div class="line" id="081807"><span class="nick" style="color:#bc80bd"><a href="#081807" label="[08:18:07]">&lt;plasma41&gt;</a></span><span class="message">Isn't grub complex enough at this point to count as a kernel, lol?</span></div><div class="line" id="090708"><span class="nick" style="color:#af8d2f"><a href="#090708" label="[09:07:08]">&lt;stikonas[m]&gt;</a></span><span class="message">fossy: regcomp.pl is not invoked in that PR yet, I noticed it later</span></div><div class="line" id="090743"><span class="nick" style="color:#af8d2f"><a href="#090743" label="[09:07:43]">&lt;stikonas[m]&gt;</a></span><span class="message">And building 5.6 directly didn't work</span></div><div class="line" id="090823"><span class="nick" style="color:#af8d2f"><a href="#090823" label="[09:08:23]">&lt;stikonas[m]&gt;</a></span><span class="message">I can try some other 5.5 patch versions, maybe they'll just work</span></div><div class="line" id="091127"><span class="nick" style="color:#af8d2f"><a href="#091127" label="[09:11:27]">&lt;stikonas[m]&gt;</a></span><span class="message">And embed.pl says require 5.003 but doesn't seem buildable with it...</span></div><div class="line" id="130727"><span class="nick" style="color:#389600"><a href="#130727" label="[13:07:27]">&lt;OriansJ&gt;</a></span><span class="message">plasma41: well grub could easily load the guile elf file into RAM and even jmp to its main. guile lacks mmu support, disk drivers, tty drivers and basic process management. Which would result in guile crashing and burning on its first syscall (because it didn't setup the syscall table nor populate it with functions to implement the desired functionality)</span></div><div class="line" id="130837"><span class="nick" style="color:#389600"><a href="#130837" label="[13:08:37]">&lt;OriansJ&gt;</a></span><span class="message">now mes-m2 with a M2libc native library however would actually run and work just fine.</span></div><div class="line" id="131211"><span class="nick" style="color:#389600"><a href="#131211" label="[13:12:11]">&lt;OriansJ&gt;</a></span><span class="message">plasma41: now this is probably something you would enjoy more: <a rel="nofollow" href="https://github.com/jart/sectorlisp">https://github.com/jart/sectorlisp</a> </span></div><div class="line" id="132258"><span class="nick" style="color:#389600"><a href="#132258" label="[13:22:58]">&lt;OriansJ&gt;</a></span><span class="message">or if you wanted something bigger: <a rel="nofollow" href="https://github.com/froggey/Mezzano">https://github.com/froggey/Mezzano</a> </span></div><div class="line" id="161607"><span class="nick" style="color:#6c3d55"><a href="#161607" label="[16:16:07]">&lt;pder&gt;</a></span><span class="message">stikonas: I think I may have found the key to getting floats and doubles working properly.  We just have to rebuild musl one more time using our latest build of tcc</span></div><div class="line" id="175515"><span class="nick" style="color:#389600"><a href="#175515" label="[17:55:15]">&lt;bauen1&gt;</a></span><span class="message">pder: just out of interest, do many intermediate objects change when recompiling musl with the latest tcc (checksum or diffoscope) ?</span></div><div class="line" id="180228"><span class="nick" style="color:#6c3d55"><a href="#180228" label="[18:02:28]">&lt;pder&gt;</a></span><span class="message">bauen1: thats a good question.  I'll try preserving the original build and see what exactly changed with rebuilding.  The first time musl is built it is using tcc statically linked with mes libc</span></div><div class="line" id="180404"><span class="nick" style="color:#389600"><a href="#180404" label="[18:04:04]">&lt;bauen1&gt;</a></span><span class="message">could also help track down potential compiler bugs</span></div><div class="line" id="180613"><span class="nick" style="color:#8dd3c7"><a href="#180613" label="[18:06:13]">&lt;stikonas&gt;</a></span><span class="message">pder: oh, tcc-musl builds musl better?</span></div><div class="line" id="180650"><span class="nick" style="color:#6c3d55"><a href="#180650" label="[18:06:50]">&lt;pder&gt;</a></span><span class="message">it at the very least fixed the issue with printf and floats/doubles, but possibly other things</span></div><div class="line" id="180700"><span class="nick" style="color:#8dd3c7"><a href="#180700" label="[18:07:00]">&lt;stikonas&gt;</a></span><span class="message">it might be interesting to check if it fixes perl</span></div><div class="line" id="180704"><span class="nick" style="color:#6c3d55"><a href="#180704" label="[18:07:04]">&lt;pder&gt;</a></span><span class="message">seq from coreutils now behaves correctly</span></div><div class="line" id="180712"><span class="nick" style="color:#8dd3c7"><a href="#180712" label="[18:07:12]">&lt;stikonas&gt;</a></span><span class="message">oh, good...</span></div><div class="line" id="180716"><span class="nick" style="color:#8dd3c7"><a href="#180716" label="[18:07:16]">&lt;stikonas&gt;</a></span><span class="message">do you have a patch?</span></div><div class="line" id="180724"><span class="nick" style="color:#8dd3c7"><a href="#180724" label="[18:07:24]">&lt;stikonas&gt;</a></span><span class="message">I can try to test perl</span></div><div class="line" id="180729"><span class="nick" style="color:#6c3d55"><a href="#180729" label="[18:07:29]">&lt;pder&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/45">https://github.com/fosslinux/live-bootstrap/pull/45</a> </span></div><div class="line" id="180905"><span class="nick" style="color:#6c3d55"><a href="#180905" label="[18:09:05]">&lt;pder&gt;</a></span><span class="message">Unrelated but I updated coreutils to build and install cp which was already in the makefile but just not built and installed</span></div><div class="line" id="180922"><span class="nick" style="color:#6c3d55"><a href="#180922" label="[18:09:22]">&lt;pder&gt;</a></span><span class="message">Here: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/46">https://github.com/fosslinux/live-bootstrap/pull/46</a> </span></div><div class="line" id="181031"><span class="nick" style="color:#8dd3c7"><a href="#181031" label="[18:10:31]">&lt;stikonas&gt;</a></span><span class="message">oh, that's why cp -r didn't work?</span></div><div class="line" id="181034"><span class="nick" style="color:#8dd3c7"><a href="#181034" label="[18:10:34]">&lt;stikonas&gt;</a></span><span class="message">strange</span></div><div class="line" id="181039"><span class="nick" style="color:#8dd3c7"><a href="#181039" label="[18:10:39]">&lt;stikonas&gt;</a></span><span class="message">I though I did install cp last time...</span></div><div class="line" id="181057"><span class="nick" style="color:#8dd3c7"><a href="#181057" label="[18:10:57]">&lt;stikonas&gt;</a></span><span class="message">oh well...</span></div><div class="line" id="181103"><span class="nick" style="color:#6c3d55"><a href="#181103" label="[18:11:03]">&lt;pder&gt;</a></span><span class="message">You had it in there, just missing from the lines above</span></div><div class="line" id="181156"><span class="nick" style="color:#6c3d55"><a href="#181156" label="[18:11:56]">&lt;pder&gt;</a></span><span class="message">We have been using the minimal cp from mescc-tools-extra the whole time</span></div><div class="line" id="181427"><span class="nick" style="color:#8dd3c7"><a href="#181427" label="[18:14:27]">&lt;stikonas&gt;</a></span><span class="message">ok, I should recheck some hacks where I mv'ed install dir instead of cp -r</span></div><div class="line" id="181849"><span class="nick">***</span><span class="message notice">xwvvvvwx- is now known as xwvvvvwx</span></div><div class="line" id="184423"><span class="nick" style="color:#389600"><a href="#184423" label="[18:44:23]">&lt;bauen1&gt;</a></span><span class="message">also, shouldn't a rebuild of musl with tinycc-musl be unecessary or at least a bug ?</span></div><div class="line" id="184755"><span class="nick" style="color:#8dd3c7"><a href="#184755" label="[18:47:55]">&lt;stikonas&gt;</a></span><span class="message">bauen1: well, tcc-mes might be more buggy...</span></div><div class="line" id="184804"><span class="nick" style="color:#8dd3c7"><a href="#184804" label="[18:48:04]">&lt;stikonas&gt;</a></span><span class="message">that is not surprising to me...</span></div><div class="line" id="184912"><span class="nick" style="color:#389600"><a href="#184912" label="[18:49:12]">&lt;bauen1&gt;</a></span><span class="message">but it shouldn't be</span></div><div class="line" id="184923"><span class="nick" style="color:#389600"><a href="#184923" label="[18:49:23]">&lt;bauen1&gt;</a></span><span class="message">not saying that just recompiling isn't a fast way to move forward</span></div><div class="line" id="185039"><span class="nick" style="color:#8dd3c7"><a href="#185039" label="[18:50:39]">&lt;stikonas&gt;</a></span><span class="message">well, yes, in principle it shouldn't be...</span></div><div class="line" id="185251"><span class="nick" style="color:#389600"><a href="#185251" label="[18:52:51]">&lt;bauen1&gt;</a></span><span class="message">jonathan234#hello</span></div><div class="line" id="185256"><span class="nick" style="color:#389600"><a href="#185256" label="[18:52:56]">&lt;bauen1&gt;</a></span><span class="message">well fuck</span></div><div class="line" id="185305"><span class="nick" style="color:#389600"><a href="#185305" label="[18:53:05]">&lt;bauen1&gt;</a></span><span class="message">time to rotate my passwords</span></div><div class="line" id="185350"><span class="nick" style="color:#389600"><a href="#185350" label="[18:53:50]">&lt;bauen1&gt;</a></span><span class="message">actually no that's an unimportant one</span></div><div class="line" id="190339"><span class="nick" style="color:#8dd3c7"><a href="#190339" label="[19:03:39]">&lt;stikonas&gt;</a></span><span class="message">you can switch to GNU pass or KeyPassXC for storing passwords...</span></div><div class="line" id="190355"><span class="nick" style="color:#8dd3c7"><a href="#190355" label="[19:03:55]">&lt;stikonas&gt;</a></span><span class="message">pder: so your fix helps with perl too</span></div><div class="line" id="190428"><span class="nick" style="color:#8dd3c7"><a href="#190428" label="[19:04:28]">&lt;stikonas&gt;</a></span><span class="message">even perl 5.5 that I had some problems with yesterday works <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/44">https://github.com/fosslinux/live-bootstrap/pull/44</a> </span></div><div class="line" id="190619"><span class="nick" style="color:#389600"><a href="#190619" label="[19:06:19]">&lt;bauen1&gt;</a></span><span class="message">stikonas: i already use password-store</span></div><div class="line" id="193255"><span class="nick" style="color:#6c3d55"><a href="#193255" label="[19:32:55]">&lt;pder&gt;</a></span><span class="message">stikonas: thats great news.  I saw your comment about splitting the rebuild of musl into a separate section and wondered if it might be the best to rebuild tcc once again so it is linked with latest libc.a</span></div><div class="line" id="193347"><span class="nick" style="color:#6c3d55"><a href="#193347" label="[19:33:47]">&lt;pder&gt;</a></span><span class="message">I think related steps might be able to be condensed.  For example, the multiple iterations of perl could be one step similar to bison</span></div><div class="line" id="193350"><span class="nick" style="color:#af8d2f"><a href="#193350" label="[19:33:50]">&lt;stikonas[m]&gt;</a></span><span class="message">Probably makes sense</span></div><div class="line" id="193426"><span class="nick" style="color:#af8d2f"><a href="#193426" label="[19:34:26]">&lt;stikonas[m]&gt;</a></span><span class="message">pder and perl 5.5 should already allow us to run newer automake</span></div><div class="line" id="193443"><span class="nick" style="color:#af8d2f"><a href="#193443" label="[19:34:43]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, should be even better once 5.6 worjs</span></div><div class="line" id="193725"><span class="nick" style="color:#6c3d55"><a href="#193725" label="[19:37:25]">&lt;pder&gt;</a></span><span class="message">I havent looked at all at autotools code.  Does it use a lot of perl modules?</span></div><div class="line" id="195417"><span class="nick" style="color:#6d2462"><a href="#195417" label="[19:54:17]">&lt;Hagfish&gt;</a></span><span class="message">(i see that 5.8 is the first version packaged as bzip, and after that the major releases happened about once per year.  2008-12-14  perl-5.8.9.tar.bz2)</span></div><div class="line" id="201917"><span class="nick" style="color:#af8d2f"><a href="#201917" label="[20:19:17]">&lt;stikonas[m]&gt;</a></span><span class="message">pder old version don't... I haven't checked new ones</span></div><div class="line" id="202045"><span class="nick" style="color:#6c3d55"><a href="#202045" label="[20:20:45]">&lt;pder&gt;</a></span><span class="message">what version of automake and autoconf are we targetting?  We need a version that can handle binutils 2.14 right?</span></div><div class="line" id="204217"><span class="nick" style="color:#6c3d55"><a href="#204217" label="[20:42:17]">&lt;pder&gt;</a></span><span class="message">I assume we were going to try to build the same toolchain as guix with gcc 2.95, binutils 2.14 and glibc (I don't remember)</span></div><div class="line" id="204816"><span class="nick" style="color:#8dd3c7"><a href="#204816" label="[20:48:16]">&lt;stikonas&gt;</a></span><span class="message">pder: well, that's one option but that's not a requirement</span></div><div class="line" id="204830"><span class="nick" style="color:#8dd3c7"><a href="#204830" label="[20:48:30]">&lt;stikonas&gt;</a></span><span class="message">we can try to build gcc 4.x</span></div><div class="line" id="204855"><span class="nick" style="color:#8dd3c7"><a href="#204855" label="[20:48:55]">&lt;stikonas&gt;</a></span><span class="message">pder: but first I think we need to build any binutils and maybe rebuild musl/tcc again</span></div><div class="line" id="204902"><span class="nick" style="color:#8dd3c7"><a href="#204902" label="[20:49:02]">&lt;stikonas&gt;</a></span><span class="message">(that weak symbols stuff)</span></div><div class="line" id="204925"><span class="nick" style="color:#8dd3c7"><a href="#204925" label="[20:49:25]">&lt;stikonas&gt;</a></span><span class="message">it's a bit better now but I think once we have ar we should use it</span></div><div class="line" id="205003"><span class="nick" style="color:#8dd3c7"><a href="#205003" label="[20:50:03]">&lt;stikonas&gt;</a></span><span class="message">well, first fossy should merge PRs that you already prepared...</span></div><div class="line" id="205506"><span class="nick" style="color:#8dd3c7"><a href="#205506" label="[20:55:06]">&lt;stikonas&gt;</a></span><span class="message">pder: by the way, do you know if it was just our tcc that was broken or also on Guix?</span></div><div class="line" id="205834"><span class="nick" style="color:#6c3d55"><a href="#205834" label="[20:58:34]">&lt;pder&gt;</a></span><span class="message">No idea on guix, I have never actually run their bootstrap</span></div><div class="line" id="210109"><span class="nick" style="color:#8dd3c7"><a href="#210109" label="[21:01:09]">&lt;stikonas&gt;</a></span><span class="message">yes, it is broken there too</span></div><div class="line" id="210120"><span class="nick" style="color:#8dd3c7"><a href="#210120" label="[21:01:20]">&lt;stikonas&gt;</a></span><span class="message">just prints garbage</span></div><div class="line" id="210309"><span class="nick" style="color:#8dd3c7"><a href="#210309" label="[21:03:09]">&lt;stikonas&gt;</a></span><span class="message">pder: probably worth explaining a bit in README</span></div><div class="line" id="210315"><span class="nick" style="color:#8dd3c7"><a href="#210315" label="[21:03:15]">&lt;stikonas&gt;</a></span><span class="message">why we rebuild tcc again</span></div><div class="line" id="210345"><span class="nick" style="color:#8dd3c7"><a href="#210345" label="[21:03:45]">&lt;stikonas&gt;</a></span><span class="message">(mention that floats seem to be a bit broken in mes libc)</span></div><div class="line" id="210512"><span class="nick" style="color:#6c3d55"><a href="#210512" label="[21:05:12]">&lt;pder&gt;</a></span><span class="message">ok, hopefully I can understand a bit more later tonight and get at the root cause</span></div><div class="line" id="211057"><span class="nick" style="color:#8dd3c7"><a href="#211057" label="[21:10:57]">&lt;stikonas&gt;</a></span><span class="message">maybe janneke would have any ideas too?</span></div><div class="line" id="211133"><span class="nick" style="color:#8dd3c7"><a href="#211133" label="[21:11:33]">&lt;stikonas&gt;</a></span><span class="message">but at least we now bootstrapped past that</span></div><div class="line" id="214602"><span class="nick" style="color:#6c3d55"><a href="#214602" label="[21:46:02]">&lt;pder&gt;</a></span><span class="message">bauen1: I tried comparing builds of musl using tcc-mes and tcc-musl and then took a hash of all of the *.o files in each build and 92 out of 1266 files are different</span></div><div class="line" id="214644"><span class="nick" style="color:#6c3d55"><a href="#214644" label="[21:46:44]">&lt;pder&gt;</a></span><span class="message">Many are in src/match, but also stdio/vfprintf.o differs</span></div><div class="line" id="214655"><span class="nick" style="color:#6c3d55"><a href="#214655" label="[21:46:55]">&lt;pder&gt;</a></span><span class="message">src/math I mean</span></div><div class="line" id="214731"><span class="nick" style="color:#6c3d55"><a href="#214731" label="[21:47:31]">&lt;pder&gt;</a></span><span class="message">Havent compared the assembly output yet</span></div><div class="line" id="221021"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado</span></div><div class="line" id="221903"><span class="nick" style="color:#389600"><a href="#221903" label="[22:19:03]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: I suggest using ansi coloring to avoid putting in the wrong commands (or passwords) in windows were they don't belong.</span></div><div class="line" id="222003"><span class="nick" style="color:#389600"><a href="#222003" label="[22:20:03]">&lt;bauen1&gt;</a></span><span class="message">OriansJ: like in the password ?</span></div><div class="line" id="222016"><span class="nick" style="color:#389600"><a href="#222016" label="[22:20:16]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: in the interface itself</span></div><div class="line" id="222042"><span class="nick" style="color:#389600"><a href="#222042" label="[22:20:42]">&lt;bauen1&gt;</a></span><span class="message">ah, this was my window manager acting up, so i thought i was in another window, and i typed it by reflex</span></div><div class="line" id="222210"><span class="nick" style="color:#389600"><a href="#222210" label="[22:22:10]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: I don't think I've typed in a password in 8 years. Mooltipass is even approved equipment for the State of Michigan (you have to pay for it but hey)</span></div><div class="line" id="222252"><span class="nick" style="color:#389600"><a href="#222252" label="[22:22:52]">&lt;OriansJ&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.themooltipass.com/">https://www.themooltipass.com/</a> </span></div><div class="line" id="222254"><span class="nick" style="color:#389600"><a href="#222254" label="[22:22:54]">&lt;bauen1&gt;</a></span><span class="message">OriansJ: sadly you can't really copy+paste over vnc</span></div><div class="line" id="222313"><span class="nick" style="color:#389600"><a href="#222313" label="[22:23:13]">&lt;bauen1&gt;</a></span><span class="message">and no matter what you try, nobody here can persuade me to another password manager \o/</span></div><div class="line" id="222318"><span class="nick" style="color:#389600"><a href="#222318" label="[22:23:18]">&lt;bauen1&gt;</a></span><span class="message">i'm happy where i'm at</span></div><div class="line" id="222347"><span class="nick" style="color:#389600"><a href="#222347" label="[22:23:47]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: mooltipass is treated like a keyboard.</span></div><div class="line" id="222349"><span class="nick" style="color:#389600"><a href="#222349" label="[22:23:49]">&lt;bauen1&gt;</a></span><span class="message">if i could figure out the magic behind making my keymap troubles over vnc disappear i could have something emulate keypresses i'm sure</span></div><div class="line" id="222417"><span class="nick" style="color:#389600"><a href="#222417" label="[22:24:17]">&lt;OriansJ&gt;</a></span><span class="message">because it literally leverages the keyboard driver</span></div><div class="line" id="222429"><span class="nick" style="color:#8dd3c7"><a href="#222429" label="[22:24:29]">&lt;stikonas&gt;</a></span><span class="message">well, where it's possible I'm using U2F two factor authentication... Made it myself by reflashing ST-Link V2 debugger...</span></div><div class="line" id="222456"><span class="nick" style="color:#389600"><a href="#222456" label="[22:24:56]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: respectable choice</span></div><div class="line" id="222459"><span class="nick" style="color:#8dd3c7"><a href="#222459" label="[22:24:59]">&lt;stikonas&gt;</a></span><span class="message">although, that again wouldn't work remotey</span></div><div class="line" id="222515"><span class="nick" style="color:#8dd3c7"><a href="#222515" label="[22:25:15]">&lt;stikonas&gt;</a></span><span class="message">kind of followed <a rel="nofollow" href="https://blog.danman.eu/2-usb-crypto-token-for-use-with-gpg-and-ssh/">https://blog.danman.eu/2-usb-crypto-token-for-use-with-gpg-and-ssh/</a> </span></div><div class="line" id="222525"><span class="nick" style="color:#8dd3c7"><a href="#222525" label="[22:25:25]">&lt;stikonas&gt;</a></span><span class="message">also got gnuk token for gpg and ssh, but that one I bought from FSF...</span></div><div class="line" id="222649"><span class="nick" style="color:#389600"><a href="#222649" label="[22:26:49]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: an understandable choice. Although for some people yubikeys tend to better fit their use case.</span></div><div class="line" id="222735"><span class="nick" style="color:#8dd3c7"><a href="#222735" label="[22:27:35]">&lt;stikonas&gt;</a></span><span class="message">yeah, I know some people with yubikeys...</span></div><div class="line" id="222744"><span class="nick" style="color:#8dd3c7"><a href="#222744" label="[22:27:44]">&lt;stikonas&gt;</a></span><span class="message">I guess easier, you just buy it and can use it</span></div><div class="line" id="222810"><span class="nick" style="color:#389600"><a href="#222810" label="[22:28:10]">&lt;OriansJ&gt;</a></span><span class="message">Security like freedom requires people to find where they are comfortable</span></div><div class="line" id="222952"><span class="nick" style="color:#389600"><a href="#222952" label="[22:29:52]">&lt;OriansJ&gt;</a></span><span class="message">and honestly any 2-factor auth is better than memorizing passwords</span></div><div class="line" id="223103"><span class="nick" style="color:#389600"><a href="#223103" label="[22:31:03]">&lt;bauen1&gt;</a></span><span class="message">so i have a few vps, the entire install process has been automated, but now i need to get the public ssh key after install to my laptop so i can add it to known hosts and start ansible to configure them</span></div><div class="line" id="223149"><span class="nick" style="color:#389600"><a href="#223149" label="[22:31:49]">&lt;bauen1&gt;</a></span><span class="message">and for backup i want to be able to login over the console, at the same time not just login-as-root-without-password</span></div><div class="line" id="223249"><span class="nick" style="color:#389600"><a href="#223249" label="[22:32:49]">&lt;bauen1&gt;</a></span><span class="message">which is hard to do since vnc tends to screw up my keymappings and i can't figure out how to get that to work &quot;seamlessly&quot;, so i still have some easy to type passwords for those cases</span></div><div class="line" id="223323"><span class="nick" style="color:#389600"><a href="#223323" label="[22:33:23]">&lt;bauen1&gt;</a></span><span class="message">but apart from console login they're not used, and password authentication for ssh is disabled</span></div><div class="line" id="223342"><span class="nick" style="color:#389600"><a href="#223342" label="[22:33:42]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: well VPS companies like Linode provide a ssh terminal server (so copy paste will work fine) but companies like DigitalOcean with their Crap interface, you need something like mooltipass to get a strong password autotyped.</span></div><div class="line" id="235257"><span class="nick" style="color:#8dd3c7"><a href="#235257" label="[23:52:57]">&lt;fossy&gt;</a></span><span class="message">stikonas: were you going to add a newline here or no <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/43/commits/6f49b05b95e80a6382df57944b1cc093cc798ad7#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5R360">https://github.com/fosslinux/live-bootstrap/pull/43/commits/6f49b05b95e80a6382df57944b1cc093cc798ad7#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5R360</a> </span></div><div class="line" id="235500"><span class="nick" style="color:#8dd3c7"><a href="#235500" label="[23:55:00]">&lt;fossy&gt;</a></span><span class="message">pder: i'm about to merge checksumming, then would you mind rebasing your PRs and adding checksums</span></div><div class="line" id="235525"><span class="nick" style="color:#8dd3c7"><a href="#235525" label="[23:55:25]">&lt;fossy&gt;</a></span><span class="message">otherwise i'm going to be playing catchup forever lol</span></div><div class="line" id="235558"><span class="nick" style="color:#8dd3c7"><a href="#235558" label="[23:55:58]">&lt;stikonas&gt;</a></span><span class="message">hmm, and I'm waiting for musl and cp merged...</span></div><div class="line" id="235603"><span class="nick" style="color:#8dd3c7"><a href="#235603" label="[23:56:03]">&lt;stikonas&gt;</a></span><span class="message">before I can proceed with perl...</span></div><div class="line" id="235640"><span class="nick" style="color:#8dd3c7"><a href="#235640" label="[23:56:40]">&lt;stikonas&gt;</a></span><span class="message">fossy: but now you we have an example of changes that change all checksums...</span></div><div class="line" id="235731"><span class="nick" style="color:#8dd3c7"><a href="#235731" label="[23:57:31]">&lt;stikonas&gt;</a></span><span class="message">fossy: I'm confused about that newline?</span></div><div class="line" id="235736"><span class="nick" style="color:#8dd3c7"><a href="#235736" label="[23:57:36]">&lt;stikonas&gt;</a></span><span class="message">where do I need to insert it?</span></div><div class="line" id="235807"><span class="nick" style="color:#8dd3c7"><a href="#235807" label="[23:58:07]">&lt;stikonas&gt;</a></span><span class="message">argh</span></div><div class="line" id="235809"><span class="nick" style="color:#8dd3c7"><a href="#235809" label="[23:58:09]">&lt;stikonas&gt;</a></span><span class="message">I see...</span></div><div class="line" id="235904"><span class="nick" style="color:#8dd3c7"><a href="#235904" label="[23:59:04]">&lt;stikonas&gt;</a></span><span class="message">fossy: pushed (minor_cleanup_</span></div><div class="line" id="235912"><span class="nick" style="color:#8dd3c7"><a href="#235912" label="[23:59:12]">&lt;stikonas&gt;</a></span><span class="message">that can probably be merged without CI...</span></div><br /></div></body></html>