<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-07-16.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000038"><span class="nick" style="color:#389600"><a href="#000038" label="[00:00:38]">&lt;stikonas&gt;</a></span><span class="message">yes, that's probably simpler</span></div><div class="line" id="000045"><span class="nick" style="color:#389600"><a href="#000045" label="[00:00:45]">&lt;stikonas&gt;</a></span><span class="message">just deallocate required amount of stack</span></div><div class="line" id="000047"><span class="nick" style="color:#389600"><a href="#000047" label="[00:00:47]">&lt;stikonas&gt;</a></span><span class="message">set return value</span></div><div class="line" id="000050"><span class="nick" style="color:#389600"><a href="#000050" label="[00:00:50]">&lt;stikonas&gt;</a></span><span class="message">and ret</span></div><div class="line" id="000950"><span class="nick" style="color:#389600"><a href="#000950" label="[00:09:50]">&lt;stikonas&gt;</a></span><span class="message">ok, pushed this exit() to ret change</span></div><div class="line" id="001025"><span class="nick" style="color:#389600"><a href="#001025" label="[00:10:25]">&lt;stikonas&gt;</a></span><span class="message">will do some other optimizations tomorrow</span></div><div class="line" id="001032"><span class="nick" style="color:#389600"><a href="#001032" label="[00:10:32]">&lt;stikonas&gt;</a></span><span class="message">(or pull requests are also welcome)</span></div><div class="line" id="021225"><span class="nick" style="color:#389600"><a href="#021225" label="[02:12:25]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I've spotted a couple of bytes where we can cut size of hex0...</span></div><div class="line" id="021243"><span class="nick" style="color:#389600"><a href="#021243" label="[02:12:43]">&lt;stikonas&gt;</a></span><span class="message">both on x86 and amd64 for stage0-posix</span></div><div class="line" id="021304"><span class="nick" style="color:#389600"><a href="#021304" label="[02:13:04]">&lt;stikonas&gt;</a></span><span class="message">though one would have to redo hex0 conversion...</span></div><div class="line" id="021630"><span class="nick" style="color:#389600"><a href="#021630" label="[02:16:30]">&lt;stikonas&gt;</a></span><span class="message">e.g. here <a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds/blob/master/POSIX/x86/hex0_x86.hex0#L102">https://github.com/oriansj/bootstrap-seeds/blob/master/POSIX/x86/hex0_x86.hex0#L102</a>  we can use 85C0 (test eax, eax) intead of 83F8 00 (cmp eax, 0) and on line 106 we can similarly use 83FD 00 -&gt; 85ED</span></div><div class="line" id="021825"><span class="nick" style="color:#389600"><a href="#021825" label="[02:18:25]">&lt;stikonas&gt;</a></span><span class="message">let me see if I can spot any other optimizations</span></div><div class="line" id="021841"><span class="nick" style="color:#389600"><a href="#021841" label="[02:18:41]">&lt;stikonas&gt;</a></span><span class="message">(oh and I've just pushed that read/write_byte optimization to stage0-uefi)</span></div><div class="line" id="021950"><span class="nick" style="color:#389600"><a href="#021950" label="[02:19:50]">&lt;stikonas&gt;</a></span><span class="message">hmm, yes, I think I can reduce hex0 size a bit more...</span></div><div class="line" id="025355"><span class="nick" style="color:#389600"><a href="#025355" label="[02:53:55]">&lt;stikonas&gt;</a></span><span class="message">and same read/write_byte optimization from stage0-uefi can go to stage0-posix...</span></div><div class="line" id="031859"><span class="nick" style="color:#389600"><a href="#031859" label="[03:18:59]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I now have 317 byte hex0 (built from M1 sources)</span></div><div class="line" id="031915"><span class="nick" style="color:#389600"><a href="#031915" label="[03:19:15]">&lt;stikonas&gt;</a></span><span class="message">with just these simple optimizations, nothing super fancy</span></div><div class="line" id="032025"><span class="nick" style="color:#389600"><a href="#032025" label="[03:20:25]">&lt;stikonas&gt;</a></span><span class="message">so already 40 bytes down</span></div><div class="line" id="033210"><span class="nick" style="color:#389600"><a href="#033210" label="[03:32:10]">&lt;stikonas&gt;</a></span><span class="message">I'll do more tomorrow, hopefully will go under 300 bytes</span></div><div class="line" id="033254"><span class="nick" style="color:#389600"><a href="#033254" label="[03:32:54]">&lt;stikonas&gt;</a></span><span class="message">and combined with kaem-optional, later I think we can go under 1 KiB</span></div><div class="line" id="042852"><span class="nick" style="color:#2e2a4a"><a href="#042852" label="[04:28:52]">&lt;Hagfish&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.guinnessworldrecords.com/world-records/25052-longest-number-sequence-memorized-in-one-minute-binary">https://www.guinnessworldrecords.com/world-records/25052-longest-number-sequence-memorized-in-one-minute-binary</a> </span></div><div class="line" id="042900"><span class="nick" style="color:#2e2a4a"><a href="#042900" label="[04:29:00]">&lt;Hagfish&gt;</a></span><span class="message">&quot;The longest binary number sequence memorized in one minute is 270 and was achieved by Aravind Pasupathy (India) at the Kasthuri Sreenivasan Trust in Coimbatore, India, on 3 April 2015.&quot;</span></div><div class="line" id="043357"><span class="nick" style="color:#2e2a4a"><a href="#043357" label="[04:33:57]">&lt;Hagfish&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.recordholders.org/en/list/memory.html#bits-30min">https://www.recordholders.org/en/list/memory.html#bits-30min</a>   apparently if given 30 minutes a human can potentially memorise 6270 bits</span></div><div class="line" id="104532"><span class="nick" style="color:#389600"><a href="#104532" label="[10:45:32]">&lt;stikonas&gt;</a></span><span class="message">fossy: maybe you can review <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/187">https://github.com/fosslinux/live-bootstrap/pull/187</a>  when you have some free time</span></div><div class="line" id="122826"><span class="nick" style="color:#6b8072"><a href="#122826" label="[12:28:26]">&lt;oriansj&gt;</a></span><span class="message">stikonas: nice</span></div><div class="line" id="122839"><span class="nick" style="color:#389600"><a href="#122839" label="[12:28:39]">&lt;stikonas&gt;</a></span><span class="message">oriansj: there is no hex0.hex2 for x86?</span></div><div class="line" id="122853"><span class="nick" style="color:#389600"><a href="#122853" label="[12:28:53]">&lt;stikonas&gt;</a></span><span class="message">well, I'm encoding directly from M0 to hex0 right now</span></div><div class="line" id="122910"><span class="nick" style="color:#389600"><a href="#122910" label="[12:29:10]">&lt;stikonas&gt;</a></span><span class="message">did one pass, got the right file size, now need to recalculate jumps</span></div><div class="line" id="122934"><span class="nick" style="color:#389600"><a href="#122934" label="[12:29:34]">&lt;stikonas&gt;</a></span><span class="message">it's now 295 bytes long</span></div><div class="line" id="122941"><span class="nick" style="color:#6b8072"><a href="#122941" label="[12:29:41]">&lt;oriansj&gt;</a></span><span class="message">nice</span></div><div class="line" id="123010"><span class="nick" style="color:#389600"><a href="#123010" label="[12:30:10]">&lt;stikonas&gt;</a></span><span class="message">mostly simple tricks, for example instead of loading mov eax, 5; push 5; pop eax</span></div><div class="line" id="123442"><span class="nick" style="color:#6b8072"><a href="#123442" label="[12:34:42]">&lt;oriansj&gt;</a></span><span class="message">well, we have been using unoptimized to ensure ease of understanding. So keep that in mind.</span></div><div class="line" id="123929"><span class="nick" style="color:#389600"><a href="#123929" label="[12:39:29]">&lt;stikonas&gt;</a></span><span class="message">yeah I know, I always added clear comments and tried to only use simple tricks</span></div><div class="line" id="123942"><span class="nick" style="color:#389600"><a href="#123942" label="[12:39:42]">&lt;stikonas&gt;</a></span><span class="message">e.g. xor eax, eax     ;  eax = 0</span></div><div class="line" id="124009"><span class="nick" style="color:#6b8072"><a href="#124009" label="[12:40:09]">&lt;oriansj&gt;</a></span><span class="message">thank you ^_^</span></div><div class="line" id="124009"><span class="nick" style="color:#389600"><a href="#124009" label="[12:40:09]">&lt;stikonas&gt;</a></span><span class="message">well, I'll do PR soon and then you can review if it's simple enough</span></div><div class="line" id="124031"><span class="nick" style="color:#6b8072"><a href="#124031" label="[12:40:31]">&lt;oriansj&gt;</a></span><span class="message">of course</span></div><div class="line" id="124122"><span class="nick" style="color:#389600"><a href="#124122" label="[12:41:22]">&lt;stikonas&gt;</a></span><span class="message">but it's quite significant reduction in binary size</span></div><div class="line" id="124142"><span class="nick" style="color:#389600"><a href="#124142" label="[12:41:42]">&lt;stikonas&gt;</a></span><span class="message">though a lot of it is due to being less wasteful with zeroes</span></div><div class="line" id="124248"><span class="nick" style="color:#6b8072"><a href="#124248" label="[12:42:48]">&lt;oriansj&gt;</a></span><span class="message">yeah, it was a very naive and simple implementation ripe for improvement.</span></div><div class="line" id="125322"><span class="nick" style="color:#389600"><a href="#125322" label="[12:53:22]">&lt;stikonas&gt;</a></span><span class="message">oriansj: how do you want PR, first stage0-posix, then bootstrap seeds then update submodule or should I start with bootstrap-seeds</span></div><div class="line" id="130110"><span class="nick" style="color:#389600"><a href="#130110" label="[13:01:10]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds/pull/18">https://github.com/oriansj/bootstrap-seeds/pull/18</a> </span></div><div class="line" id="131018"><span class="nick" style="color:#389600"><a href="#131018" label="[13:10:18]">&lt;stikonas&gt;</a></span><span class="message">if changes above seem good, I should also port them to amd64</span></div><div class="line" id="131027"><span class="nick" style="color:#389600"><a href="#131027" label="[13:10:27]">&lt;stikonas&gt;</a></span><span class="message">there is might cut even more bytes...</span></div><div class="line" id="131251"><span class="nick" style="color:#6b8072"><a href="#131251" label="[13:12:51]">&lt;oriansj&gt;</a></span><span class="message">still reviewing but thus far looks good</span></div><div class="line" id="131551"><span class="nick" style="color:#389600"><a href="#131551" label="[13:15:51]">&lt;stikonas&gt;</a></span><span class="message">should I push draft PR for stage0-posix with NASM and M0 changes (but without bootstrap-seeds submodule update)?</span></div><div class="line" id="131605"><span class="nick" style="color:#389600"><a href="#131605" label="[13:16:05]">&lt;stikonas&gt;</a></span><span class="message">although hex0 files do have M0 strings in the comments anyway</span></div><div class="line" id="132043"><span class="nick" style="color:#6b8072"><a href="#132043" label="[13:20:43]">&lt;oriansj&gt;</a></span><span class="message">and merged</span></div><div class="line" id="132122"><span class="nick" style="color:#6b8072"><a href="#132122" label="[13:21:22]">&lt;oriansj&gt;</a></span><span class="message">well if we want to be consistent, they would need to be updated too</span></div><div class="line" id="132237"><span class="nick" style="color:#389600"><a href="#132237" label="[13:22:37]">&lt;stikonas&gt;</a></span><span class="message">yes, I already have them updated</span></div><div class="line" id="132240"><span class="nick" style="color:#389600"><a href="#132240" label="[13:22:40]">&lt;stikonas&gt;</a></span><span class="message">in fact started with them</span></div><div class="line" id="132257"><span class="nick" style="color:#389600"><a href="#132257" label="[13:22:57]">&lt;stikonas&gt;</a></span><span class="message">oh but I first need to make PR to stage0-posix-x86</span></div><div class="line" id="132259"><span class="nick" style="color:#389600"><a href="#132259" label="[13:22:59]">&lt;stikonas&gt;</a></span><span class="message">it's now a separate repo</span></div><div class="line" id="132428"><span class="nick" style="color:#389600"><a href="#132428" label="[13:24:28]">&lt;stikonas&gt;</a></span><span class="message">ok, that one I can push myself</span></div><div class="line" id="132440"><span class="nick" style="color:#389600"><a href="#132440" label="[13:24:40]">&lt;stikonas&gt;</a></span><span class="message">(for reference <a rel="nofollow" href="https://github.com/oriansj/stage0-posix-x86/commit/a53117074e8a35c499f34c0326913d45c3893d6a">https://github.com/oriansj/stage0-posix-x86/commit/a53117074e8a35c499f34c0326913d45c3893d6a</a>) </span></div><div class="line" id="132654"><span class="nick" style="color:#389600"><a href="#132654" label="[13:26:54]">&lt;stikonas&gt;</a></span><span class="message">ok, changes pshed</span></div><div class="line" id="132759"><span class="nick" style="color:#389600"><a href="#132759" label="[13:27:59]">&lt;stikonas&gt;</a></span><span class="message">oh maybe I should update README too that mentions 357 bytes</span></div><div class="line" id="143456"><span class="nick" style="color:#6b8072"><a href="#143456" label="[14:34:56]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well yes, I granted repo commit access to everyone who put serious work into an architecture</span></div><div class="line" id="143901"><span class="nick" style="color:#6b8072"><a href="#143901" label="[14:39:01]">&lt;oriansj&gt;</a></span><span class="message">as I believe those who actively work to make things better should be free to do so.</span></div><div class="line" id="143956"><span class="nick" style="color:#6b8072"><a href="#143956" label="[14:39:56]">&lt;oriansj&gt;</a></span><span class="message">unfortunately github doesn't support the ability to turn off force pushes which can rewrite history and delete progress</span></div><div class="line" id="144000"><span class="nick" style="color:#389600"><a href="#144000" label="[14:40:00]">&lt;stikonas&gt;</a></span><span class="message">well, reviews are still good in any case, although you already reviewed interesting bits...</span></div><div class="line" id="144018"><span class="nick" style="color:#389600"><a href="#144018" label="[14:40:18]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I thought you can mark some branches as protected</span></div><div class="line" id="144035"><span class="nick" style="color:#389600"><a href="#144035" label="[14:40:35]">&lt;stikonas&gt;</a></span><span class="message">let me check on one of my repos</span></div><div class="line" id="144208"><span class="nick" style="color:#389600"><a href="#144208" label="[14:42:08]">&lt;stikonas&gt;</a></span><span class="message">oriansj: go to repo settings-&gt;branches-&gt;add branch protection rule</span></div><div class="line" id="144255"><span class="nick" style="color:#389600"><a href="#144255" label="[14:42:55]">&lt;stikonas&gt;</a></span><span class="message">I guess only master/main branch has to be protected</span></div><div class="line" id="144508"><span class="nick">***</span><span class="message notice">jackhill is now known as KM4MBG</span></div><div class="line" id="144546"><span class="nick">***</span><span class="message notice">KM4MBG is now known as jackhill</span></div><div class="line" id="145820"><span class="nick" style="color:#6b8072"><a href="#145820" label="[14:58:20]">&lt;oriansj&gt;</a></span><span class="message">and only against force pushes and deletes of the main/master branch</span></div><div class="line" id="162255"><span class="nick" style="color:#389600"><a href="#162255" label="[16:22:55]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I think I found a bug in rasm2</span></div><div class="line" id="162411"><span class="nick" style="color:#389600"><a href="#162411" label="[16:24:11]">&lt;stikonas&gt;</a></span><span class="message">not a big deal, but one have to be careful with it...</span></div><div class="line" id="162532"><span class="nick" style="color:#389600"><a href="#162532" label="[16:25:32]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1247414/">https://paste.debian.net/1247414/</a> </span></div><div class="line" id="162807"><span class="nick" style="color:#6b8072"><a href="#162807" label="[16:28:07]">&lt;oriansj&gt;</a></span><span class="message">yeah, pretty common in all assemblers to have such bugs</span></div><div class="line" id="162903"><span class="nick" style="color:#6b8072"><a href="#162903" label="[16:29:03]">&lt;oriansj&gt;</a></span><span class="message">as one will quickly see with: <a rel="nofollow" href="https://github.com/xoreaxeaxeax/sandsifter">https://github.com/xoreaxeaxeax/sandsifter</a> </span></div><div class="line" id="163006"><span class="nick" style="color:#6b8072"><a href="#163006" label="[16:30:06]">&lt;oriansj&gt;</a></span><span class="message">but be careful running it on some processors as it has been known to brick certain hardware</span></div><div class="line" id="163037"><span class="nick" style="color:#389600"><a href="#163037" label="[16:30:37]">&lt;stikonas&gt;</a></span><span class="message">well, this one is purely rasm2 bug, ISA docs or uses e.g. gcc work fine</span></div><div class="line" id="163046"><span class="nick" style="color:#389600"><a href="#163046" label="[16:30:46]">&lt;stikonas&gt;</a></span><span class="message">s/uses//</span></div><div class="line" id="163155"><span class="nick" style="color:#6b8072"><a href="#163155" label="[16:31:55]">&lt;oriansj&gt;</a></span><span class="message">well the ISA docs are wrong in several areas, such as is nop: 2,4 or 6 bytes in size</span></div><div class="line" id="163348"><span class="nick" style="color:#6b8072"><a href="#163348" label="[16:33:48]">&lt;oriansj&gt;</a></span><span class="message">but assuming we stick to the GCC core x86 instruction set, then we should be fine as Intel and AMD seem to be generally very conservative on those encodings</span></div><div class="line" id="163532"><span class="nick" style="color:#389600"><a href="#163532" label="[16:35:32]">&lt;stikonas&gt;</a></span><span class="message">yeah, I don't expect much/any variation amongst different CPUs</span></div><div class="line" id="163554"><span class="nick" style="color:#389600"><a href="#163554" label="[16:35:54]">&lt;stikonas&gt;</a></span><span class="message">we are not using anything remotely uncommon</span></div><div class="line" id="163605"><span class="nick" style="color:#389600"><a href="#163605" label="[16:36:05]">&lt;stikonas&gt;</a></span><span class="message">all the instructions are very basic</span></div><div class="line" id="173219"><span class="nick" style="color:#6b8072"><a href="#173219" label="[17:32:19]">&lt;oriansj&gt;</a></span><span class="message">indeed</span></div><div class="line" id="173252"><span class="nick" style="color:#389600"><a href="#173252" label="[17:32:52]">&lt;stikonas&gt;</a></span><span class="message">ok, hex0 for amd64 will be 405 -&gt; 334 bytes</span></div><div class="line" id="173302"><span class="nick" style="color:#389600"><a href="#173302" label="[17:33:02]">&lt;stikonas&gt;</a></span><span class="message">when I implement exactly the same optimizations</span></div><div class="line" id="174142"><span class="nick" style="color:#6b8072"><a href="#174142" label="[17:41:42]">&lt;oriansj&gt;</a></span><span class="message">nice</span></div><div class="line" id="174240"><span class="nick" style="color:#389600"><a href="#174240" label="[17:42:40]">&lt;stikonas&gt;</a></span><span class="message">still need to convert to hex0...</span></div><div class="line" id="174300"><span class="nick" style="color:#389600"><a href="#174300" label="[17:43:00]">&lt;stikonas&gt;</a></span><span class="message">and then I can go back to optimizing hex0.S for uefi...</span></div><div class="line" id="180409"><span class="nick" style="color:#6b8072"><a href="#180409" label="[18:04:09]">&lt;oriansj&gt;</a></span><span class="message">well decoding PE format details is less than ideal fun</span></div><div class="line" id="180752"><span class="nick" style="color:#389600"><a href="#180752" label="[18:07:52]">&lt;stikonas&gt;</a></span><span class="message">yes, I can imagine...</span></div><div class="line" id="180813"><span class="nick" style="color:#389600"><a href="#180813" label="[18:08:13]">&lt;stikonas&gt;</a></span><span class="message">and I guess testing is slow, since each time you need to launch qemu...</span></div><div class="line" id="185713"><span class="nick" style="color:#6b8072"><a href="#185713" label="[18:57:13]">&lt;oriansj&gt;</a></span><span class="message">and deal with non-deterministic behavior in UEFI too</span></div><div class="line" id="185919"><span class="nick" style="color:#6b8072"><a href="#185919" label="[18:59:19]">&lt;oriansj&gt;</a></span><span class="message">and a sick 2 year old who refuses to rest</span></div><div class="line" id="191210"><span class="nick" style="color:#389600"><a href="#191210" label="[19:12:10]">&lt;stikonas&gt;</a></span><span class="message">well, UEFI can wait...</span></div><div class="line" id="191223"><span class="nick" style="color:#389600"><a href="#191223" label="[19:12:23]">&lt;stikonas&gt;</a></span><span class="message">sick 2 year old is more important</span></div><div class="line" id="193407"><span class="nick" style="color:#389600"><a href="#193407" label="[19:34:07]">&lt;stikonas&gt;</a></span><span class="message">ok, amd64 hex0-seed is now ready <a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds/pull/19">https://github.com/oriansj/bootstrap-seeds/pull/19</a> </span></div><div class="line" id="193818"><span class="nick" style="color:#389600"><a href="#193818" label="[19:38:18]">&lt;stikonas&gt;</a></span><span class="message">and <a rel="nofollow" href="https://github.com/oriansj/stage0-posix-amd64/pull/2">https://github.com/oriansj/stage0-posix-amd64/pull/2</a> </span></div><br /></div></body></html>