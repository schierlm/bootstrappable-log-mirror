<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-02-20.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="003257"><span class="nick" style="color:#8dd3c7"><a href="#003257" label="[00:32:57]">&lt;fossy&gt;</a></span><span class="message">stikonas: argh, true</span></div><div class="line" id="003328"><span class="nick" style="color:#2e2a4a"><a href="#003328" label="[00:33:28]">&lt;stikonas&gt;</a></span><span class="message">well, hopefully fewer mass rebuilds in the future</span></div><div class="line" id="003343"><span class="nick" style="color:#2e2a4a"><a href="#003343" label="[00:33:43]">&lt;stikonas&gt;</a></span><span class="message">this one fixes quite a few problems that we observed before...</span></div><div class="line" id="003351"><span class="nick" style="color:#8dd3c7"><a href="#003351" label="[00:33:51]">&lt;fossy&gt;</a></span><span class="message">what other ones are there?</span></div><div class="line" id="003401"><span class="nick" style="color:#2e2a4a"><a href="#003401" label="[00:34:01]">&lt;stikonas&gt;</a></span><span class="message">problems?</span></div><div class="line" id="003404"><span class="nick" style="color:#8dd3c7"><a href="#003404" label="[00:34:04]">&lt;fossy&gt;</a></span><span class="message">yeah</span></div><div class="line" id="003407"><span class="nick" style="color:#8dd3c7"><a href="#003407" label="[00:34:07]">&lt;fossy&gt;</a></span><span class="message">perl</span></div><div class="line" id="003408"><span class="nick" style="color:#2e2a4a"><a href="#003408" label="[00:34:08]">&lt;stikonas&gt;</a></span><span class="message">well, so far I don't know any more</span></div><div class="line" id="003411"><span class="nick" style="color:#2e2a4a"><a href="#003411" label="[00:34:11]">&lt;stikonas&gt;</a></span><span class="message">well, perl got fixed</span></div><div class="line" id="003415"><span class="nick" style="color:#2e2a4a"><a href="#003415" label="[00:34:15]">&lt;stikonas&gt;</a></span><span class="message">by pder's musl rebuild</span></div><div class="line" id="003416"><span class="nick" style="color:#8dd3c7"><a href="#003416" label="[00:34:16]">&lt;fossy&gt;</a></span><span class="message">yeah</span></div><div class="line" id="003428"><span class="nick" style="color:#2e2a4a"><a href="#003428" label="[00:34:28]">&lt;stikonas&gt;</a></span><span class="message">well, weak sybols are hacky but so far seem to work</span></div><div class="line" id="003437"><span class="nick" style="color:#2e2a4a"><a href="#003437" label="[00:34:37]">&lt;stikonas&gt;</a></span><span class="message">might be a good idea to rebuild after binutils</span></div><div class="line" id="003440"><span class="nick" style="color:#2e2a4a"><a href="#003440" label="[00:34:40]">&lt;stikonas&gt;</a></span><span class="message">but that's rebuilding on top</span></div><div class="line" id="003445"><span class="nick" style="color:#2e2a4a"><a href="#003445" label="[00:34:45]">&lt;stikonas&gt;</a></span><span class="message">i.e. new Parts</span></div><div class="line" id="003450"><span class="nick" style="color:#2e2a4a"><a href="#003450" label="[00:34:50]">&lt;stikonas&gt;</a></span><span class="message">not changing existing parts</span></div><div class="line" id="003505"><span class="nick" style="color:#8dd3c7"><a href="#003505" label="[00:35:05]">&lt;fossy&gt;</a></span><span class="message">yes</span></div><div class="line" id="003727"><span class="nick" style="color:#2e2a4a"><a href="#003727" label="[00:37:27]">&lt;stikonas&gt;</a></span><span class="message">hmm, but so far perl doesn't look that scary</span></div><div class="line" id="003731"><span class="nick" style="color:#2e2a4a"><a href="#003731" label="[00:37:31]">&lt;stikonas&gt;</a></span><span class="message">bison took more effort...</span></div><div class="line" id="004127"><span class="nick" style="color:#2e2a4a"><a href="#004127" label="[00:41:27]">&lt;stikonas&gt;</a></span><span class="message">fossy: this is now ready for review <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/44">https://github.com/fosslinux/live-bootstrap/pull/44</a> </span></div><div class="line" id="004131"><span class="nick" style="color:#2e2a4a"><a href="#004131" label="[00:41:31]">&lt;stikonas&gt;</a></span><span class="message">although, not ready for merge</span></div><div class="line" id="004145"><span class="nick" style="color:#2e2a4a"><a href="#004145" label="[00:41:45]">&lt;stikonas&gt;</a></span><span class="message">(need to rebase on top of cp and musl PRs once they are merged)</span></div><div class="line" id="004237"><span class="nick" style="color:#2e2a4a"><a href="#004237" label="[00:42:37]">&lt;stikonas&gt;</a></span><span class="message">I've also done a few perl cleanups (so that we don't have to hardcode version so many times)</span></div><div class="line" id="004659"><span class="nick" style="color:#2e2a4a"><a href="#004659" label="[00:46:59]">&lt;stikonas&gt;</a></span><span class="message">fossy: do you think we should rebuild tcc again? after pder's musl recompilation</span></div><div class="line" id="004717"><span class="nick" style="color:#2e2a4a"><a href="#004717" label="[00:47:17]">&lt;stikonas&gt;</a></span><span class="message">so that tcc also has non-buggy floats in case it uses them</span></div><div class="line" id="005030"><span class="nick" style="color:#8dd3c7"><a href="#005030" label="[00:50:30]">&lt;fossy&gt;</a></span><span class="message">stikonas: so let me clarify</span></div><div class="line" id="005036"><span class="nick" style="color:#8dd3c7"><a href="#005036" label="[00:50:36]">&lt;fossy&gt;</a></span><span class="message">tcc-mes has buggy floats</span></div><div class="line" id="005044"><span class="nick" style="color:#8dd3c7"><a href="#005044" label="[00:50:44]">&lt;fossy&gt;</a></span><span class="message">musl is compiled, and musl has buggy floats</span></div><div class="line" id="005046"><span class="nick" style="color:#2e2a4a"><a href="#005046" label="[00:50:46]">&lt;stikonas&gt;</a></span><span class="message">well, display is buggy I think</span></div><div class="line" id="005049"><span class="nick" style="color:#8dd3c7"><a href="#005049" label="[00:50:49]">&lt;fossy&gt;</a></span><span class="message">tcc-musl then has buggy floats</span></div><div class="line" id="005058"><span class="nick" style="color:#2e2a4a"><a href="#005058" label="[00:50:58]">&lt;stikonas&gt;</a></span><span class="message">tcc-mes just displays garbage when you print floats</span></div><div class="line" id="005102"><span class="nick" style="color:#8dd3c7"><a href="#005102" label="[00:51:02]">&lt;fossy&gt;</a></span><span class="message">musl is recompiled so now musl does not have buggy floats but tcc-musl may still have buggy floats</span></div><div class="line" id="005106"><span class="nick" style="color:#8dd3c7"><a href="#005106" label="[00:51:06]">&lt;fossy&gt;</a></span><span class="message">correct?</span></div><div class="line" id="005107"><span class="nick" style="color:#2e2a4a"><a href="#005107" label="[00:51:07]">&lt;stikonas&gt;</a></span><span class="message">tcc-musl displays 0 instead of floats</span></div><div class="line" id="005111"><span class="nick" style="color:#2e2a4a"><a href="#005111" label="[00:51:11]">&lt;stikonas&gt;</a></span><span class="message">and musl recompiled works fine</span></div><div class="line" id="005117"><span class="nick" style="color:#2e2a4a"><a href="#005117" label="[00:51:17]">&lt;stikonas&gt;</a></span><span class="message">yes, you are correct</span></div><div class="line" id="005127"><span class="nick" style="color:#8dd3c7"><a href="#005127" label="[00:51:27]">&lt;fossy&gt;</a></span><span class="message">yes, probably worth it to recompile tcc again then</span></div><div class="line" id="005129"><span class="nick" style="color:#2e2a4a"><a href="#005129" label="[00:51:29]">&lt;stikonas&gt;</a></span><span class="message">although, tcc-musl might not use floats for anything</span></div><div class="line" id="005132"><span class="nick" style="color:#2e2a4a"><a href="#005132" label="[00:51:32]">&lt;stikonas&gt;</a></span><span class="message">but safer to recompile</span></div><div class="line" id="005149"><span class="nick" style="color:#8dd3c7"><a href="#005149" label="[00:51:49]">&lt;fossy&gt;</a></span><span class="message">it def uses floats</span></div><div class="line" id="005155"><span class="nick" style="color:#2e2a4a"><a href="#005155" label="[00:51:55]">&lt;stikonas&gt;</a></span><span class="message">yeah, let's rebuild then</span></div><div class="line" id="005206"><span class="nick" style="color:#2e2a4a"><a href="#005206" label="[00:52:06]">&lt;stikonas&gt;</a></span><span class="message">and by the way, tcc from guix is also just as buggy</span></div><div class="line" id="005211"><span class="nick" style="color:#8dd3c7"><a href="#005211" label="[00:52:11]">&lt;fossy&gt;</a></span><span class="message">:D</span></div><div class="line" id="005921"><span class="nick" style="color:#2e2a4a"><a href="#005921" label="[00:59:21]">&lt;stikonas&gt;</a></span><span class="message">fossy: by the way, I was thinking about src_cleanup too, but it's not clear how to properly implement it. Some cleanup actions are best done before default_src_install and some after</span></div><div class="line" id="005936"><span class="nick" style="color:#2e2a4a"><a href="#005936" label="[00:59:36]">&lt;stikonas&gt;</a></span><span class="message">maybe we then need 2 cleanup stages</span></div><div class="line" id="010022"><span class="nick" style="color:#2e2a4a"><a href="#010022" label="[01:00:22]">&lt;stikonas&gt;</a></span><span class="message">something like src_cleanup_preinstall and src_cleanup_postinstall</span></div><div class="line" id="013254"><span class="nick" style="color:#6b8072"><a href="#013254" label="[01:32:54]">&lt;Hagfish&gt;</a></span><span class="message">that looks like a common pattern from package managers and test frameworks</span></div><div class="line" id="013332"><span class="nick" style="color:#6b8072"><a href="#013332" label="[01:33:32]">&lt;Hagfish&gt;</a></span><span class="message">speaking of which (and i apologise if this is an ill-informed question) would it make sense to have a test suite for some of the functions in the bootstrap code?</span></div><div class="line" id="013405"><span class="nick" style="color:#6b8072"><a href="#013405" label="[01:34:05]">&lt;Hagfish&gt;</a></span><span class="message">i guess to some extent the bootstrap process itself is the test, but maybe there are engineering reasons for having unit tests</span></div><div class="line" id="013459"><span class="nick" style="color:#6b8072"><a href="#013459" label="[01:34:59]">&lt;Hagfish&gt;</a></span><span class="message">it would be cool, for example, to have a test which proves that if a source package has the wrong checksum, it is rejected</span></div><div class="line" id="013527"><span class="nick" style="color:#6b8072"><a href="#013527" label="[01:35:27]">&lt;Hagfish&gt;</a></span><span class="message">but i wouldn't know how to write that test in a way that doesn't either make the existing code more complicated, or involve simulating network connections</span></div><div class="line" id="031124"><span class="nick" style="color:#80b1d3"><a href="#031124" label="[03:11:24]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: or just use existing network test tools</span></div><div class="line" id="031429"><span class="nick" style="color:#6d2462"><a href="#031429" label="[03:14:29]">&lt;pder&gt;</a></span><span class="message">what do you guys think about combining Part 20 and Part 21 into one part that that is all building tcc-musl toolchain?</span></div><div class="line" id="031836"><span class="nick" style="color:#6d2462"><a href="#031836" label="[03:18:36]">&lt;pder&gt;</a></span><span class="message">These are the steps: build musl with tcc-mes, build tcc with tcc-0.9.26 followed by tcc-musl, rebuild musl with tcc-musl, rebuild tcc with tcc-musl.</span></div><div class="line" id="033136"><span class="nick" style="color:#6b8072"><a href="#033136" label="[03:31:36]">&lt;Hagfish&gt;</a></span><span class="message">hmm, that does sound like a fairly self-contained process</span></div><div class="line" id="033235"><span class="nick" style="color:#6b8072"><a href="#033235" label="[03:32:35]">&lt;Hagfish&gt;</a></span><span class="message">i'm thinking that each Part should be like a puzzle that someone could try to reduce the number of steps for (without decreasing the readability)</span></div><div class="line" id="033350"><span class="nick" style="color:#6b8072"><a href="#033350" label="[03:33:50]">&lt;Hagfish&gt;</a></span><span class="message">and each puzzle shouldn't have too many irrelevant parts in</span></div><div class="line" id="033431"><span class="nick" style="color:#6b8072"><a href="#033431" label="[03:34:31]">&lt;Hagfish&gt;</a></span><span class="message">so i guess it's a trade off, but i would try to consider what sort of knowledge someone would need to tackle a single Part on its own</span></div><div class="line" id="033857"><span class="nick" style="color:#6d2462"><a href="#033857" label="[03:38:57]">&lt;pder&gt;</a></span><span class="message">On the other hand, the build is more oriented to working on one directory or package at a time</span></div><div class="line" id="033904"><span class="nick" style="color:#6d2462"><a href="#033904" label="[03:39:04]">&lt;pder&gt;</a></span><span class="message">*build system</span></div><div class="line" id="034518"><span class="nick" style="color:#6b8072"><a href="#034518" label="[03:45:18]">&lt;Hagfish&gt;</a></span><span class="message">good point, yeah</span></div><div class="line" id="035705"><span class="nick" style="color:#8dd3c7"><a href="#035705" label="[03:57:05]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: maybe src_cleanup() and root_cleanup()</span></div><div class="line" id="035713"><span class="nick" style="color:#8dd3c7"><a href="#035713" label="[03:57:13]">&lt;fossy&gt;</a></span><span class="message">one to clean up the source files and another to clean up the rootfs</span></div><div class="line" id="035725"><span class="nick" style="color:#8dd3c7"><a href="#035725" label="[03:57:25]">&lt;fossy&gt;</a></span><span class="message">although sometimes we may need to cleanup the rootfs pre install, true</span></div><div class="line" id="074555"><span class="nick" style="color:#234e69"><a href="#074555" label="[07:45:55]">&lt;gforce_de1977&gt;</a></span><span class="message">getting proper PPC bootstrap support working is more interesting these days, the mars rover uses it: <a rel="nofollow" href="https://en.wikipedia.org/wiki/RAD750">https://en.wikipedia.org/wiki/RAD750</a> </span></div><div class="line" id="074558"><span class="nick" style="color:#234e69"><a href="#074558" label="[07:45:58]">&lt;gforce_de1977&gt;</a></span><span class="message">8-)</span></div><div class="line" id="074816"><span class="nick" style="color:#234e69"><a href="#074816" label="[07:48:16]">&lt;gforce_de1977&gt;</a></span><span class="message">also interesting: only the helicopter uses Linux, the rest is VxWorks stuff</span></div><div class="line" id="105927"><span class="nick" style="color:#80b1d3"><a href="#105927" label="[10:59:27]">&lt;OriansJ&gt;</a></span><span class="message">gforce_de1977: PowerPCv1.1 (32bit) is just another on the long list of bootstraps that will have to be done.</span></div><div class="line" id="110120"><span class="nick" style="color:#2e2a4a"><a href="#110120" label="[11:01:20]">&lt;stikonas&gt;</a></span><span class="message">fossy: so regarding /dev/null, the file I'm deleting it's just file. In principle we can create a proper /dev/null device node but musl's configure script breaks it (not sure why)</span></div><div class="line" id="110140"><span class="nick" style="color:#2e2a4a"><a href="#110140" label="[11:01:40]">&lt;stikonas&gt;</a></span><span class="message">so if we want to create real node, we should probably wait until after musl</span></div><div class="line" id="110153"><span class="nick" style="color:#2e2a4a"><a href="#110153" label="[11:01:53]">&lt;stikonas&gt;</a></span><span class="message">(but we have mknod now)</span></div><div class="line" id="110232"><span class="nick" style="color:#80b1d3"><a href="#110232" label="[11:02:32]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: when in doubt strip the configure out</span></div><div class="line" id="110317"><span class="nick" style="color:#80b1d3"><a href="#110317" label="[11:03:17]">&lt;OriansJ&gt;</a></span><span class="message">autotools and configure are about figuring about what you have installed. In bootstrapping we know EXACTLY what we have.</span></div><div class="line" id="110417"><span class="nick" style="color:#2e2a4a"><a href="#110417" label="[11:04:17]">&lt;stikonas&gt;</a></span><span class="message">OriansJ: it's not autotools</span></div><div class="line" id="110431"><span class="nick" style="color:#2e2a4a"><a href="#110431" label="[11:04:31]">&lt;stikonas&gt;</a></span><span class="message">it's a small handwritten configure script</span></div><div class="line" id="115222"><span class="nick" style="color:#2e2a4a"><a href="#115222" label="[11:52:22]">&lt;stikonas&gt;</a></span><span class="message">fossy: any idea why this failed <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/43/checks?check_run_id=1941412273?">https://github.com/fosslinux/live-bootstrap/pull/43/checks?check_run_id=1941412273?</a> </span></div><div class="line" id="115230"><span class="nick" style="color:#2e2a4a"><a href="#115230" label="[11:52:30]">&lt;stikonas&gt;</a></span><span class="message">I rebased on top of your changes</span></div><div class="line" id="115308"><span class="nick" style="color:#2e2a4a"><a href="#115308" label="[11:53:08]">&lt;stikonas&gt;</a></span><span class="message">oh, I see...</span></div><div class="line" id="115314"><span class="nick" style="color:#2e2a4a"><a href="#115314" label="[11:53:14]">&lt;stikonas&gt;</a></span><span class="message">I actually changed string in executable</span></div><div class="line" id="120537"><span class="nick" style="color:#2e2a4a"><a href="#120537" label="[12:05:37]">&lt;stikonas&gt;</a></span><span class="message">ok, fixed</span></div><div class="line" id="125356"><span class="nick" style="color:#234e69"><a href="#125356" label="[12:53:56]">&lt;gforce_de1977&gt;</a></span><span class="message">stikonas: please do at least: rm /dev/null || true</span></div><div class="line" id="125420"><span class="nick" style="color:#234e69"><a href="#125420" label="[12:54:20]">&lt;gforce_de1977&gt;</a></span><span class="message">stikonas: if there *is* a /dev/null, the command has rc!=0</span></div><div class="line" id="125652"><span class="nick" style="color:#6c3d55"><a href="#125652" label="[12:56:52]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, in principle I can add test -f too, but why would there be /dev/null?</span></div><div class="line" id="125703"><span class="nick" style="color:#6c3d55"><a href="#125703" label="[12:57:03]">&lt;stikonas[m]&gt;</a></span><span class="message">Where are you running that script?</span></div><div class="line" id="130654"><span class="nick" style="color:#2e2a4a"><a href="#130654" label="[13:06:54]">&lt;stikonas&gt;</a></span><span class="message">gforce_de1977: ok, I pushed that test -f variant</span></div><div class="line" id="130742"><span class="nick" style="color:#2e2a4a"><a href="#130742" label="[13:07:42]">&lt;stikonas&gt;</a></span><span class="message">but it will only be useful if we device to rebuild musl after we create real /dev/null and only if we figure out why configure was breaking real /dev/null</span></div><div class="line" id="132430"><span class="nick" style="color:#234e69"><a href="#132430" label="[13:24:30]">&lt;gforce_de1977&gt;</a></span><span class="message">stikonas: no problem, it's something cosmetic for later</span></div><div class="line" id="132458"><span class="nick" style="color:#234e69"><a href="#132458" label="[13:24:58]">&lt;gforce_de1977&gt;</a></span><span class="message">stikonas[m]: in my qemu-kernel, there *is* a /dev/null</span></div><div class="line" id="132734"><span class="nick" style="color:#6c3d55"><a href="#132734" label="[13:27:34]">&lt;stikonas[m]&gt;</a></span><span class="message">Strange, isn't /dev/null created by user space, not kernel?</span></div><div class="line" id="132959"><span class="nick" style="color:#2e2a4a"><a href="#132959" label="[13:29:59]">&lt;stikonas&gt;</a></span><span class="message">anyway, I've added it in case it will be useful later (if we decide to rebuild musl)</span></div><div class="line" id="133015"><span class="nick" style="color:#2e2a4a"><a href="#133015" label="[13:30:15]">&lt;stikonas&gt;</a></span><span class="message">it's harmless anyway</span></div><div class="line" id="151430"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado_</span></div><div class="line" id="151432"><span class="nick">***</span><span class="message notice">rekado_ is now known as rekado</span></div><div class="line" id="173401"><span class="nick" style="color:#6d2462"><a href="#173401" label="[17:34:01]">&lt;pder&gt;</a></span><span class="message">fossy: can you please update the README and resync the step numbers run.sh and kaem.after.run with the addition of the checksumming?</span></div><div class="line" id="220054"><span class="nick" style="color:#2e2a4a"><a href="#220054" label="[22:00:54]">&lt;stikonas&gt;</a></span><span class="message">fossy: so I've rebased cleanup patch and fixed checksums now <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/43">https://github.com/fosslinux/live-bootstrap/pull/43</a> </span></div><div class="line" id="222534"><span class="nick" style="color:#6c3d55"><a href="#222534" label="[22:25:34]">&lt;stikonas[m]&gt;</a></span><span class="message">Thanks! I'll rebase perl once you merge the other two PRs</span></div><div class="line" id="225208"><span class="nick">***</span><span class="message notice">mihi_ is now known as mihi</span></div><div class="line" id="230811"><span class="nick" style="color:#8dd3c7"><a href="#230811" label="[23:08:11]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: you're welcome</span></div><div class="line" id="230831"><span class="nick" style="color:#8dd3c7"><a href="#230831" label="[23:08:31]">&lt;fossy&gt;</a></span><span class="message">pingidy ping ping for pder?</span></div><div class="line" id="230844"><span class="nick" style="color:#8dd3c7"><a href="#230844" label="[23:08:44]">&lt;fossy&gt;</a></span><span class="message">right, back to the linux kernel we go</span></div><div class="line" id="231103"><span class="nick" style="color:#2e2a4a"><a href="#231103" label="[23:11:03]">&lt;stikonas&gt;</a></span><span class="message">fossy: pder asked if you can do checksums</span></div><div class="line" id="231120"><span class="nick" style="color:#2e2a4a"><a href="#231120" label="[23:11:20]">&lt;stikonas&gt;</a></span><span class="message">[16:34] &lt;pder&gt; fossy: can you please update the README and resync the step numbers run.sh and kaem.after.run with the addition of the checksumming?</span></div><div class="line" id="231630"><span class="nick" style="color:#2e2a4a"><a href="#231630" label="[23:16:30]">&lt;stikonas&gt;</a></span><span class="message">I guess at least cp shouldn't be too hard...</span></div><div class="line" id="231639"><span class="nick" style="color:#2e2a4a"><a href="#231639" label="[23:16:39]">&lt;stikonas&gt;</a></span><span class="message">but the other musl rebuild will probably be annoying</span></div><div class="line" id="231654"><span class="nick" style="color:#2e2a4a"><a href="#231654" label="[23:16:54]">&lt;stikonas&gt;</a></span><span class="message">I think it will affect all checksums</span></div><div class="line" id="231713"><span class="nick" style="color:#2e2a4a"><a href="#231713" label="[23:17:13]">&lt;stikonas&gt;</a></span><span class="message">but oh well... And my PR is already blocked on those two</span></div><br /></div></body></html>