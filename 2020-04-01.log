<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-04-01.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="001042"><span class="nick" style="color:#389600"><a href="#001042" label="[00:10:42]">&lt;dddddd&gt;</a></span><span class="message">Hello, fossy. Which gash are you talking about (repo/branch/commit)?</span></div><div class="line" id="001116"><span class="nick" style="color:#389600"><a href="#001116" label="[00:11:16]">&lt;dddddd&gt;</a></span><span class="message">I cloned <a rel="nofollow" href="https://gitlab.com/janneke/gash">https://gitlab.com/janneke/gash</a> </span></div><div class="line" id="003439"><span class="nick" style="color:#389600"><a href="#003439" label="[00:34:39]">&lt;dddddd&gt;</a></span><span class="message">The most recent commit fc1b2fac0bdd doesn't have gash/gash.scm (and also fails to ./configure after ./autogen.sh --&gt; configure: error: Gash is missing; please install it.)</span></div><div class="line" id="003610"><span class="nick" style="color:#389600"><a href="#003610" label="[00:36:10]">&lt;dddddd&gt;</a></span><span class="message">master seems quite old, but has that file with 120 being `(with-readline-completion-function completion thunk)`</span></div><div class="line" id="003656"><span class="nick" style="color:#2e2a4a"><a href="#003656" label="[00:36:56]">&lt;fossy&gt;</a></span><span class="message">dddddd: I am talking about the Savannah gash, tip of master</span></div><div class="line" id="004138"><span class="nick" style="color:#389600"><a href="#004138" label="[00:41:38]">&lt;dddddd&gt;</a></span><span class="message">   120	                   (lambda (port)</span></div><div class="line" id="004142"><span class="nick" style="color:#389600"><a href="#004142" label="[00:41:42]">&lt;dddddd&gt;</a></span><span class="message">Is that it?</span></div><div class="line" id="004202"><span class="nick" style="color:#2e2a4a"><a href="#004202" label="[00:42:02]">&lt;fossy&gt;</a></span><span class="message">hm no</span></div><div class="line" id="004216"><span class="nick" style="color:#2e2a4a"><a href="#004216" label="[00:42:16]">&lt;fossy&gt;</a></span><span class="message">One second</span></div><div class="line" id="004227"><span class="nick" style="color:#389600"><a href="#004227" label="[00:42:27]">&lt;dddddd&gt;</a></span><span class="message">^ <a rel="nofollow" href="https://git.savannah.nongnu.org/git/gash.git">https://git.savannah.nongnu.org/git/gash.git</a>  at f22bc5799606</span></div><div class="line" id="004426"><span class="nick" style="color:#2e2a4a"><a href="#004426" label="[00:44:26]">&lt;fossy&gt;</a></span><span class="message">oh, line 119 oops</span></div><div class="line" id="004509"><span class="nick" style="color:#2e2a4a"><a href="#004509" label="[00:45:09]">&lt;fossy&gt;</a></span><span class="message">that is what it is failing on</span></div><div class="line" id="004650"><span class="nick" style="color:#389600"><a href="#004650" label="[00:46:50]">&lt;dddddd&gt;</a></span><span class="message">OK, what are you executing that fails?</span></div><div class="line" id="004704"><span class="nick" style="color:#389600"><a href="#004704" label="[00:47:04]">&lt;dddddd&gt;</a></span><span class="message">I mean, anything?</span></div><div class="line" id="004803"><span class="nick" style="color:#2e2a4a"><a href="#004803" label="[00:48:03]">&lt;fossy&gt;</a></span><span class="message">no script, should just drop to interactive shell</span></div><div class="line" id="004840"><span class="nick" style="color:#2e2a4a"><a href="#004840" label="[00:48:40]">&lt;fossy&gt;</a></span><span class="message">running against guixs static ghile</span></div><div class="line" id="004842"><span class="nick" style="color:#2e2a4a"><a href="#004842" label="[00:48:42]">&lt;fossy&gt;</a></span><span class="message">guile</span></div><div class="line" id="004858"><span class="nick" style="color:#2e2a4a"><a href="#004858" label="[00:48:58]">&lt;fossy&gt;</a></span><span class="message">(on a non guix system)</span></div><div class="line" id="005009"><span class="nick" style="color:#2e2a4a"><a href="#005009" label="[00:50:09]">&lt;fossy&gt;</a></span><span class="message">really, im wondering what part of that code dies,</span></div><div class="line" id="005012"><span class="nick" style="color:#2e2a4a"><a href="#005012" label="[00:50:12]">&lt;fossy&gt;</a></span><span class="message">does</span></div><div class="line" id="005027"><span class="nick" style="color:#2e2a4a"><a href="#005027" label="[00:50:27]">&lt;fossy&gt;</a></span><span class="message">and what it could be trying to open that dosent exist</span></div><div class="line" id="005049"><span class="nick" style="color:#2e2a4a"><a href="#005049" label="[00:50:49]">&lt;fossy&gt;</a></span><span class="message">because it is trying to open &quot;&quot; I guess it will be something to so with the environment that I havent set</span></div><div class="line" id="005101"><span class="nick" style="color:#2e2a4a"><a href="#005101" label="[00:51:01]">&lt;fossy&gt;</a></span><span class="message">oh, I am using --init-mode with kaem</span></div><div class="line" id="005241"><span class="nick" style="color:#389600"><a href="#005241" label="[00:52:41]">&lt;dddddd&gt;</a></span><span class="message">I guess it's a problem with the arguments.</span></div><div class="line" id="005312"><span class="nick" style="color:#389600"><a href="#005312" label="[00:53:12]">&lt;dddddd&gt;</a></span><span class="message">(pair? files) is true, so something is there</span></div><div class="line" id="005433"><span class="nick" style="color:#389600"><a href="#005433" label="[00:54:33]">&lt;dddddd&gt;</a></span><span class="message">Because, IFAIU, files is '() by default, and (pair? '()) is false.</span></div><div class="line" id="005447"><span class="nick" style="color:#2e2a4a"><a href="#005447" label="[00:54:47]">&lt;fossy&gt;</a></span><span class="message">hm.</span></div><div class="line" id="005457"><span class="nick" style="color:#2e2a4a"><a href="#005457" label="[00:54:57]">&lt;fossy&gt;</a></span><span class="message">what does pair? mean</span></div><div class="line" id="005614"><span class="nick" style="color:#2e2a4a"><a href="#005614" label="[00:56:14]">&lt;fossy&gt;</a></span><span class="message">this looks suspicously like a bug in kaem</span></div><div class="line" id="005622"><span class="nick" style="color:#389600"><a href="#005622" label="[00:56:22]">&lt;dddddd&gt;</a></span><span class="message">Is a predicate that returns true if its argument is a pair</span></div><div class="line" id="005629"><span class="nick" style="color:#2e2a4a"><a href="#005629" label="[00:56:29]">&lt;fossy&gt;</a></span><span class="message">ah</span></div><div class="line" id="005642"><span class="nick" style="color:#389600"><a href="#005642" label="[00:56:42]">&lt;dddddd&gt;</a></span><span class="message">a pair being something like (x . y)</span></div><div class="line" id="005722"><span class="nick" style="color:#2e2a4a"><a href="#005722" label="[00:57:22]">&lt;fossy&gt;</a></span><span class="message">Yep</span></div><div class="line" id="005746"><span class="nick" style="color:#2e2a4a"><a href="#005746" label="[00:57:46]">&lt;fossy&gt;</a></span><span class="message">ok, thanks dddddd, I think I know where to go from here</span></div><div class="line" id="005756"><span class="nick" style="color:#6b8072"><a href="#005756" label="[00:57:56]">&lt;xentrac&gt;</a></span><span class="message">:)</span></div><div class="line" id="005827"><span class="nick" style="color:#389600"><a href="#005827" label="[00:58:27]">&lt;dddddd&gt;</a></span><span class="message">That part of the code tries to open the file in the car of the pair, which I guess it should be a script filename</span></div><div class="line" id="005844"><span class="nick" style="color:#2e2a4a"><a href="#005844" label="[00:58:44]">&lt;fossy&gt;</a></span><span class="message">janneke: which is the &quot;correct&quot; gash? your one in gitlab, or Savannah?</span></div><div class="line" id="005858"><span class="nick" style="color:#389600"><a href="#005858" label="[00:58:58]">&lt;dddddd&gt;</a></span><span class="message">Glad to help, fossy. Take all with a grain of salt... This is the first time I look that code.</span></div><div class="line" id="005939"><span class="nick" style="color:#2e2a4a"><a href="#005939" label="[00:59:39]">&lt;fossy&gt;</a></span><span class="message">Well same, but Im sure you know more scheme than me</span></div><div class="line" id="005959"><span class="nick" style="color:#389600"><a href="#005959" label="[00:59:59]">&lt;dddddd&gt;</a></span><span class="message">just a bit!</span></div><div class="line" id="015214"><span class="nick" style="color:#389600"><a href="#015214" label="[01:52:14]">&lt;dddddd&gt;</a></span><span class="message">hmm, I'm not sure if this is the actual problem, fossy, but trailing spaces in a line of the script (kaem.run for example) is considered an arg (as in argc of the called program is 2 instead of 1).</span></div><div class="line" id="015448"><span class="nick" style="color:#2e2a4a"><a href="#015448" label="[01:54:48]">&lt;fossy&gt;</a></span><span class="message">dddddd: OMG</span></div><div class="line" id="015452"><span class="nick" style="color:#2e2a4a"><a href="#015452" label="[01:54:52]">&lt;fossy&gt;</a></span><span class="message">that was it!!!@</span></div><div class="line" id="015508"><span class="nick" style="color:#2e2a4a"><a href="#015508" label="[01:55:08]">&lt;fossy&gt;</a></span><span class="message">yeah, im going to make kaem not do that</span></div><div class="line" id="015957"><span class="nick" style="color:#389600"><a href="#015957" label="[01:59:57]">&lt;dddddd&gt;</a></span><span class="message">great! this is both in master and gash-smallscript (so not introduced in the new branch)</span></div><div class="line" id="020142"><span class="nick" style="color:#2e2a4a"><a href="#020142" label="[02:01:42]">&lt;fossy&gt;</a></span><span class="message">I did test with master just to make sure</span></div><div class="line" id="020154"><span class="nick" style="color:#2e2a4a"><a href="#020154" label="[02:01:54]">&lt;fossy&gt;</a></span><span class="message">please note gash-smallscript is a WIP</span></div><div class="line" id="020204"><span class="nick" style="color:#2e2a4a"><a href="#020204" label="[02:02:04]">&lt;fossy&gt;</a></span><span class="message">force pushes are possible</span></div><div class="line" id="022657"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado_</span></div><div class="line" id="022701"><span class="nick">***</span><span class="message notice">rekado_ is now known as rekado</span></div><div class="line" id="074835"><span class="nick" style="color:#80b1d3"><a href="#074835" label="[07:48:35]">&lt;janneke&gt;</a></span><span class="message">fossy: savannah is the canonical, correct gash</span></div><div class="line" id="074926"><span class="nick" style="color:#80b1d3"><a href="#074926" label="[07:49:26]">&lt;janneke&gt;</a></span><span class="message">both samplet and myself may push some hacking @gitlab; the whole gash-geesh merger and the utils split-off lived there</span></div><div class="line" id="163444"><span class="nick">***</span><span class="message notice">DKordic is now known as S-Jack</span></div><div class="line" id="175258"><span class="nick" style="color:#6d2462"><a href="#175258" label="[17:52:58]">&lt;OriansJ`&gt;</a></span><span class="message">fossy: I finally finished reviewing and I'll be making kaem a submodule of mescc-tools shortly. Just making a few minor changes to keep the workflow consistent with mescc-tools</span></div><div class="line" id="175623"><span class="nick">***</span><span class="message notice">edef is now known as edeg</span></div><div class="line" id="175652"><span class="nick">***</span><span class="message notice">edeg is now known as edf0</span></div><div class="line" id="175721"><span class="nick">***</span><span class="message notice">edf0 is now known as edef</span></div><div class="line" id="180713"><span class="nick" style="color:#6d2462"><a href="#180713" label="[18:07:13]">&lt;OriansJ`&gt;</a></span><span class="message">fossy: kaem is now a submodule of mescc-tools with integration into the standard &quot;make clean test&quot; build cycle</span></div><div class="line" id="180847"><span class="nick" style="color:#6d2462"><a href="#180847" label="[18:08:47]">&lt;OriansJ`&gt;</a></span><span class="message">test13 was incomplete so I provided an approximate solution which is close to what bash does.</span></div><div class="line" id="181450"><span class="nick" style="color:#234e69"><a href="#181450" label="[18:14:50]">&lt;Hagfish&gt;</a></span><span class="message">that's great, OriansJ`</span></div><div class="line" id="181503"><span class="nick" style="color:#234e69"><a href="#181503" label="[18:15:03]">&lt;Hagfish&gt;</a></span><span class="message">so what does the bootstrap path look like now (and where are the gaps)?</span></div><div class="line" id="183217"><span class="nick" style="color:#6d2462"><a href="#183217" label="[18:32:17]">&lt;OriansJ`&gt;</a></span><span class="message">Hagfish: exactly the same: <a rel="nofollow" href="https://github.com/oriansj/talk-notes/blob/master/Current%20bootstrap%20map.pdf">https://github.com/oriansj/talk-notes/blob/master/Current%20bootstrap%20map.pdf</a> </span></div><div class="line" id="183312"><span class="nick" style="color:#6d2462"><a href="#183312" label="[18:33:12]">&lt;OriansJ`&gt;</a></span><span class="message">dddddd is currently finishing slow-utils (but it is good enough to release today if I remember correctly)</span></div><div class="line" id="183520"><span class="nick" style="color:#6d2462"><a href="#183520" label="[18:35:20]">&lt;OriansJ`&gt;</a></span><span class="message">janneke will be pulling out the mes.c binary and mescc-tools from guix; so that there will only be the guile (static binary) in the guix bootstrap. Then the only remaining piece is mes-m2; once completed will slot right where guile is and the entire bootstrap (on top of a POSIX) is done.</span></div><div class="line" id="183633"><span class="nick" style="color:#6d2462"><a href="#183633" label="[18:36:33]">&lt;OriansJ`&gt;</a></span><span class="message">Then bauen1 will be finishing their POSIX, we will convert it to be buildable via M2-Planet; thus reducing the trust only to the hardware and from there it is all metal level work</span></div><div class="line" id="183827"><span class="nick" style="color:#234e69"><a href="#183827" label="[18:38:27]">&lt;Hagfish&gt;</a></span><span class="message">amazing work, everyone</span></div><div class="line" id="183830"><span class="nick" style="color:#6d2462"><a href="#183830" label="[18:38:30]">&lt;OriansJ`&gt;</a></span><span class="message">We will still have to find someone to do i686&amp;/AMD64 in FPGA and then a bunch of libresilicon work which will be really fun.</span></div><div class="line" id="183904"><span class="nick" style="color:#234e69"><a href="#183904" label="[18:39:04]">&lt;Hagfish&gt;</a></span><span class="message">yeah, cool</span></div><div class="line" id="184017"><span class="nick" style="color:#234e69"><a href="#184017" label="[18:40:17]">&lt;Hagfish&gt;</a></span><span class="message">will the POSIX have to be compiled on a trusted machine (or use something like DDC), or is there some way to check that it matches the source?</span></div><div class="line" id="184059"><span class="nick" style="color:#6d2462"><a href="#184059" label="[18:40:59]">&lt;OriansJ`&gt;</a></span><span class="message">Hagfish: if something can be built via M2-Planet, we can do the build on bare metal</span></div><div class="line" id="184112"><span class="nick" style="color:#234e69"><a href="#184112" label="[18:41:12]">&lt;Hagfish&gt;</a></span><span class="message">nice</span></div><div class="line" id="184152"><span class="nick" style="color:#234e69"><a href="#184152" label="[18:41:52]">&lt;Hagfish&gt;</a></span><span class="message">is that still an open research question, or are there examples of things like that?</span></div><div class="line" id="184157"><span class="nick" style="color:#6d2462"><a href="#184157" label="[18:41:57]">&lt;OriansJ`&gt;</a></span><span class="message">and the bare metal will be something that I'll ensure everyone will be able to verify (via FPGA or Libresilicon or TTL)</span></div><div class="line" id="184205"><span class="nick" style="color:#234e69"><a href="#184205" label="[18:42:05]">&lt;Hagfish&gt;</a></span><span class="message">sure</span></div><div class="line" id="184447"><span class="nick" style="color:#6d2462"><a href="#184447" label="[18:44:47]">&lt;OriansJ`&gt;</a></span><span class="message">Hagfish: if you look at stage0, you'll see all of the steps from hex0 to M2-Planet on bare-metal (simulated in software of course)</span></div><div class="line" id="184507"><span class="nick" style="color:#234e69"><a href="#184507" label="[18:45:07]">&lt;Hagfish&gt;</a></span><span class="message">but a POSIX OS...</span></div><div class="line" id="184513"><span class="nick" style="color:#234e69"><a href="#184513" label="[18:45:13]">&lt;Hagfish&gt;</a></span><span class="message">i guess tccboot is somewhat similar</span></div><div class="line" id="184544"><span class="nick" style="color:#6d2462"><a href="#184544" label="[18:45:44]">&lt;OriansJ`&gt;</a></span><span class="message">Hagfish: as in you build the POSIX on knight hardware and write to read-only media</span></div><div class="line" id="184557"><span class="nick" style="color:#234e69"><a href="#184557" label="[18:45:57]">&lt;Hagfish&gt;</a></span><span class="message">WORM</span></div><div class="line" id="184643"><span class="nick" style="color:#6d2462"><a href="#184643" label="[18:46:43]">&lt;OriansJ`&gt;</a></span><span class="message">or floppy disks with the WRITE tag set to off</span></div><div class="line" id="184703"><span class="nick" style="color:#234e69"><a href="#184703" label="[18:47:03]">&lt;Hagfish&gt;</a></span><span class="message">yeah, assuming you trust the disk controller to honour that</span></div><div class="line" id="184725"><span class="nick" style="color:#234e69"><a href="#184725" label="[18:47:25]">&lt;Hagfish&gt;</a></span><span class="message">some sort of serial connection could work too, i guess</span></div><div class="line" id="184837"><span class="nick" style="color:#234e69"><a href="#184837" label="[18:48:37]">&lt;Hagfish&gt;</a></span><span class="message">i guess i'm just not sure of the relative difficulty of building something like m2-planet and building something like a POSIX OS</span></div><div class="line" id="184858"><span class="nick" style="color:#234e69"><a href="#184858" label="[18:48:58]">&lt;Hagfish&gt;</a></span><span class="message">isn't that the hard part of bootstrapping :P</span></div><div class="line" id="185831"><span class="nick" style="color:#6d2462"><a href="#185831" label="[18:58:31]">&lt;OriansJ`&gt;</a></span><span class="message">figuring everything out? I find that the fun part</span></div><div class="line" id="190714"><span class="nick" style="color:#6d2462"><a href="#190714" label="[19:07:14]">&lt;OriansJ`&gt;</a></span><span class="message">well the difficulty of building something like M2-Planet is just having a C compiler as powerful as cc_x86.s; which honestly is a simple program to write in assembly. Having a POSIX OS buildable via M2-Planet is just an incremental process of removing non-standard C constructs until M2-Planet is able to build everything; as we have a great deal of support for inline assembly in M2-Planet</span></div><div class="line" id="191750"><span class="nick" style="color:#6c3d55"><a href="#191750" label="[19:17:50]">&lt;bauen1&gt;</a></span><span class="message">OriansJ`: the amount of inline assembly in my kernel is quite minimal (and can probably be removed completely)</span></div><div class="line" id="191800"><span class="nick" style="color:#6c3d55"><a href="#191800" label="[19:18:00]">&lt;bauen1&gt;</a></span><span class="message">there are however ~200 loc that require an assembler</span></div><div class="line" id="192029"><span class="nick" style="color:#6d2462"><a href="#192029" label="[19:20:29]">&lt;OriansJ`&gt;</a></span><span class="message">bauen1: not even close to a problem ^_^</span></div><div class="line" id="192054"><span class="nick" style="color:#234e69"><a href="#192054" label="[19:20:54]">&lt;Hagfish&gt;</a></span><span class="message">sounds great</span></div><div class="line" id="192056"><span class="nick" style="color:#6d2462"><a href="#192056" label="[19:20:56]">&lt;OriansJ`&gt;</a></span><span class="message">M2-Planet integrates seemlessly with M1 macro assembly source files</span></div><div class="line" id="192112"><span class="nick" style="color:#6d2462"><a href="#192112" label="[19:21:12]">&lt;OriansJ`&gt;</a></span><span class="message">(in fact generates M1 output itself)</span></div><div class="line" id="192140"><span class="nick" style="color:#6c3d55"><a href="#192140" label="[19:21:40]">&lt;bauen1&gt;</a></span><span class="message">nice</span></div><div class="line" id="192151"><span class="nick" style="color:#234e69"><a href="#192151" label="[19:21:51]">&lt;Hagfish&gt;</a></span><span class="message">bauen1: do you have a checklist of things that still need to be done on it?</span></div><div class="line" id="192204"><span class="nick" style="color:#6d2462"><a href="#192204" label="[19:22:04]">&lt;OriansJ`&gt;</a></span><span class="message">So it just becomes the trivial task of converting from your preferred assembly to M1 and that shouldn't take very long at all</span></div><div class="line" id="192210"><span class="nick" style="color:#6c3d55"><a href="#192210" label="[19:22:10]">&lt;bauen1&gt;</a></span><span class="message">not really written down</span></div><div class="line" id="192227"><span class="nick" style="color:#234e69"><a href="#192227" label="[19:22:27]">&lt;Hagfish&gt;</a></span><span class="message">ah well</span></div><div class="line" id="192236"><span class="nick" style="color:#234e69"><a href="#192236" label="[19:22:36]">&lt;Hagfish&gt;</a></span><span class="message">i personally find checklists very satisfying :)</span></div><div class="line" id="192240"><span class="nick" style="color:#6c3d55"><a href="#192240" label="[19:22:40]">&lt;bauen1&gt;</a></span><span class="message">currently working on setting up user code with a seperate page directory, after that is elf loading and then implementing syscalls</span></div><div class="line" id="192304"><span class="nick" style="color:#234e69"><a href="#192304" label="[19:23:04]">&lt;Hagfish&gt;</a></span><span class="message">i have a vague idea of those things :)</span></div><div class="line" id="192307"><span class="nick" style="color:#6c3d55"><a href="#192307" label="[19:23:07]">&lt;bauen1&gt;</a></span><span class="message">does M2 support '__attribute(section(&quot;...&quot;)))' ?</span></div><div class="line" id="192811"><span class="nick" style="color:#6d2462"><a href="#192811" label="[19:28:11]">&lt;OriansJ`&gt;</a></span><span class="message">bauen1: no but I'd have to know what that even means in terms of assembly code before I could add it.</span></div><div class="line" id="192921"><span class="nick" style="color:#6c3d55"><a href="#192921" label="[19:29:21]">&lt;bauen1&gt;</a></span><span class="message">OriansJ`: <a rel="nofollow" href="https://gcc.gnu.org/onlinedocs/gcc/Common-Variable-Attributes.html">https://gcc.gnu.org/onlinedocs/gcc/Common-Variable-Attributes.html</a> </span></div><div class="line" id="192935"><span class="nick" style="color:#6c3d55"><a href="#192935" label="[19:29:35]">&lt;bauen1&gt;</a></span><span class="message">basically emit the data into a seperate elf section</span></div><div class="line" id="192951"><span class="nick" style="color:#6c3d55"><a href="#192951" label="[19:29:51]">&lt;bauen1&gt;</a></span><span class="message">which i currently use to know what data needs to be mapped into user space</span></div><div class="line" id="193315"><span class="nick" style="color:#6d2462"><a href="#193315" label="[19:33:15]">&lt;OriansJ`&gt;</a></span><span class="message">for that I'd need to figure out how to get M1 to generate seperate elf-sections for hex2</span></div><div class="line" id="193427"><span class="nick" style="color:#6c3d55"><a href="#193427" label="[19:34:27]">&lt;bauen1&gt;</a></span><span class="message">i guess it's just a convenience, i just needed a way to have a page aligned start and end address with everything important (and nothing else) inbetween</span></div><div class="line" id="194050"><span class="nick" style="color:#6d2462"><a href="#194050" label="[19:40:50]">&lt;OriansJ`&gt;</a></span><span class="message">bauen1: we can also hide those details inside of a function in a seperate .c source file and do something different for M2-Planet</span></div><div class="line" id="194134"><span class="nick" style="color:#6d2462"><a href="#194134" label="[19:41:34]">&lt;OriansJ`&gt;</a></span><span class="message">but that is just the sort of things we will have to engineer a proper solution to in the long run.</span></div><div class="line" id="194216"><span class="nick" style="color:#6d2462"><a href="#194216" label="[19:42:16]">&lt;OriansJ`&gt;</a></span><span class="message">as I can keep adding features and functionality to M2-Planet+mescc-tools pretty easily</span></div><div class="line" id="194300"><span class="nick" style="color:#6d2462"><a href="#194300" label="[19:43:00]">&lt;OriansJ`&gt;</a></span><span class="message">but generally if we take the time to make everything as simple and clear as possible; such things generally are not needed.</span></div><div class="line" id="220832"><span class="nick" style="color:#2e2a4a"><a href="#220832" label="[22:08:32]">&lt;fossy&gt;</a></span><span class="message">OriansJ`: ^-^ thanks</span></div><br /></div></body></html>