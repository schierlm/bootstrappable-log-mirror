<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-06-18.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="002114"><span class="nick" style="color:#389600"><a href="#002114" label="[00:21:14]">&lt;muurkha&gt;</a></span><span class="message">long-lasting records: <a rel="nofollow" href="https://www.biorxiv.org/content/10.1101/2023.06.01.543133v1">https://www.biorxiv.org/content/10.1101/2023.06.01.543133v1</a> </span></div><div class="line" id="002117"><span class="nick" style="color:#389600"><a href="#002117" label="[00:21:17]">&lt;muurkha&gt;</a></span><span class="message">oops</span></div><div class="line" id="002124"><span class="nick" style="color:#389600"><a href="#002124" label="[00:21:24]">&lt;muurkha&gt;</a></span><span class="message">no, that's actually the right URL</span></div><div class="line" id="012740"><span class="nick" style="color:#8dd3c7"><a href="#012740" label="[01:27:40]">&lt;kerravon&gt;</a></span><span class="message">oriansj - not sure if you saw my message, but i asked what you required for m2libc dos support</span></div><div class="line" id="014243"><span class="nick" style="color:#2e2a4a"><a href="#014243" label="[01:42:43]">&lt;stikonas&gt;</a></span><span class="message">kerravon: it's mostly implementing syscalls</span></div><div class="line" id="014257"><span class="nick" style="color:#2e2a4a"><a href="#014257" label="[01:42:57]">&lt;stikonas&gt;</a></span><span class="message">kerravon: dos should be possible</span></div><div class="line" id="014304"><span class="nick" style="color:#2e2a4a"><a href="#014304" label="[01:43:04]">&lt;stikonas&gt;</a></span><span class="message">after all I managed to port M2libc to UEFI</span></div><div class="line" id="014307"><span class="nick" style="color:#6b8072"><a href="#014307" label="[01:43:07]">&lt;oriansj&gt;</a></span><span class="message">kerravon: not much honestly, just to work a handful of details such as setting up argc/argv; doing a proper exit and the assembly for the syscalls (or most likely bios calls)</span></div><div class="line" id="014339"><span class="nick" style="color:#2e2a4a"><a href="#014339" label="[01:43:39]">&lt;stikonas&gt;</a></span><span class="message">M2-Mesoplanet support might be slightly more annoying</span></div><div class="line" id="014412"><span class="nick" style="color:#2e2a4a"><a href="#014412" label="[01:44:12]">&lt;stikonas&gt;</a></span><span class="message">our M2-Planet/M2-Mesoplanet preprocessors are somwhat limitted and picky</span></div><div class="line" id="014440"><span class="nick" style="color:#2e2a4a"><a href="#014440" label="[01:44:40]">&lt;stikonas&gt;</a></span><span class="message">so order of files to compile/#includes might matter</span></div><div class="line" id="014958"><span class="nick" style="color:#80b1d3"><a href="#014958" label="[01:49:58]">&lt;fossy&gt;</a></span><span class="message">oh, i see</span></div><div class="line" id="015012"><span class="nick" style="color:#80b1d3"><a href="#015012" label="[01:50:12]">&lt;fossy&gt;</a></span><span class="message">i did know that, but completely forgot about it :P</span></div><div class="line" id="015033"><span class="nick" style="color:#2e2a4a"><a href="#015033" label="[01:50:33]">&lt;stikonas&gt;</a></span><span class="message">yeah, same here</span></div><div class="line" id="015043"><span class="nick" style="color:#2e2a4a"><a href="#015043" label="[01:50:43]">&lt;stikonas&gt;</a></span><span class="message">I remember looking at that briefly when reviewing rickmasters work</span></div><div class="line" id="015045"><span class="nick" style="color:#2e2a4a"><a href="#015045" label="[01:50:45]">&lt;stikonas&gt;</a></span><span class="message">but then forgot it</span></div><div class="line" id="015108"><span class="nick" style="color:#2e2a4a"><a href="#015108" label="[01:51:08]">&lt;stikonas&gt;</a></span><span class="message">too many things are happening in bootstrapping...</span></div><div class="line" id="015138"><span class="nick" style="color:#80b1d3"><a href="#015138" label="[01:51:38]">&lt;fossy&gt;</a></span><span class="message">yeah haha</span></div><div class="line" id="015147"><span class="nick" style="color:#2e2a4a"><a href="#015147" label="[01:51:47]">&lt;stikonas&gt;</a></span><span class="message">fossy: so I think that leaves us only with the case of bootstrapping from the &quot;bootstrap&quot; linux kernel</span></div><div class="line" id="015156"><span class="nick" style="color:#2e2a4a"><a href="#015156" label="[01:51:56]">&lt;stikonas&gt;</a></span><span class="message">that one has command line set in sysb</span></div><div class="line" id="015211"><span class="nick" style="color:#2e2a4a"><a href="#015211" label="[01:52:11]">&lt;stikonas&gt;</a></span><span class="message">or in go_sysb function</span></div><div class="line" id="015226"><span class="nick" style="color:#2e2a4a"><a href="#015226" label="[01:52:26]">&lt;stikonas&gt;</a></span><span class="message">fossy: do we plan to keep this long term?</span></div><div class="line" id="015232"><span class="nick" style="color:#2e2a4a"><a href="#015232" label="[01:52:32]">&lt;stikonas&gt;</a></span><span class="message">or shall we completely switch to builder-hex0</span></div><div class="line" id="015246"><span class="nick" style="color:#2e2a4a"><a href="#015246" label="[01:52:46]">&lt;stikonas&gt;</a></span><span class="message">longer term the problem is other ISAs</span></div><div class="line" id="015250"><span class="nick" style="color:#8dd3c7"><a href="#015250" label="[01:52:50]">&lt;kerravon&gt;</a></span><span class="message">oriansj - I have dosstart.asm and dossupa.asm - is that sufficient?</span></div><div class="line" id="015324"><span class="nick" style="color:#2e2a4a"><a href="#015324" label="[01:53:24]">&lt;stikonas&gt;</a></span><span class="message">kerravon: what are these files?</span></div><div class="line" id="015343"><span class="nick" style="color:#2e2a4a"><a href="#015343" label="[01:53:43]">&lt;stikonas&gt;</a></span><span class="message">I guess dosstart launches anoter program?</span></div><div class="line" id="015344"><span class="nick" style="color:#8dd3c7"><a href="#015344" label="[01:53:44]">&lt;kerravon&gt;</a></span><span class="message"> <a rel="nofollow" href="https://sourceforge.net/p/pdos/gitcode/ci/master/tree/pdpclib/dosstart.asm">https://sourceforge.net/p/pdos/gitcode/ci/master/tree/pdpclib/dosstart.asm</a> </span></div><div class="line" id="015401"><span class="nick" style="color:#8dd3c7"><a href="#015401" label="[01:54:01]">&lt;kerravon&gt;</a></span><span class="message"> <a rel="nofollow" href="https://sourceforge.net/p/pdos/gitcode/ci/master/tree/pdpclib/dossupa.asm">https://sourceforge.net/p/pdos/gitcode/ci/master/tree/pdpclib/dossupa.asm</a> </span></div><div class="line" id="015436"><span class="nick" style="color:#8dd3c7"><a href="#015436" label="[01:54:36]">&lt;kerravon&gt;</a></span><span class="message">dosstart is the entry point of an executable</span></div><div class="line" id="015506"><span class="nick" style="color:#2e2a4a"><a href="#015506" label="[01:55:06]">&lt;stikonas&gt;</a></span><span class="message">well these need to be ported to M2libc...</span></div><div class="line" id="015506"><span class="nick" style="color:#8dd3c7"><a href="#015506" label="[01:55:06]">&lt;kerravon&gt;</a></span><span class="message">it does do a bit more work before calling main() with argc and argv though. That code is in C though</span></div><div class="line" id="015519"><span class="nick" style="color:#2e2a4a"><a href="#015519" label="[01:55:19]">&lt;stikonas&gt;</a></span><span class="message">yeah, you can do more before main in C too</span></div><div class="line" id="015524"><span class="nick" style="color:#2e2a4a"><a href="#015524" label="[01:55:24]">&lt;stikonas&gt;</a></span><span class="message">if you look at my UEFI code</span></div><div class="line" id="015532"><span class="nick" style="color:#2e2a4a"><a href="#015532" label="[01:55:32]">&lt;stikonas&gt;</a></span><span class="message">there is quite a bit of C code before we call main</span></div><div class="line" id="015535"><span class="nick" style="color:#8dd3c7"><a href="#015535" label="[01:55:35]">&lt;kerravon&gt;</a></span><span class="message"> <a rel="nofollow" href="https://sourceforge.net/p/pdos/gitcode/ci/master/tree/pdpclib/start.c">https://sourceforge.net/p/pdos/gitcode/ci/master/tree/pdpclib/start.c</a> </span></div><div class="line" id="015608"><span class="nick" style="color:#2e2a4a"><a href="#015608" label="[01:56:08]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/M2libc/blob/main/amd64/uefi/libc-full.M1">https://github.com/oriansj/M2libc/blob/main/amd64/uefi/libc-full.M1</a> </span></div><div class="line" id="015609"><span class="nick" style="color:#8dd3c7"><a href="#015609" label="[01:56:09]">&lt;kerravon&gt;</a></span><span class="message">i'm not sure the assembler code requires &quot;porting&quot;</span></div><div class="line" id="015630"><span class="nick" style="color:#2e2a4a"><a href="#015630" label="[01:56:30]">&lt;stikonas&gt;</a></span><span class="message">kerravon: you need to arrange it in correct functions, etc...</span></div><div class="line" id="015642"><span class="nick" style="color:#8dd3c7"><a href="#015642" label="[01:56:42]">&lt;kerravon&gt;</a></span><span class="message">it already is in functions</span></div><div class="line" id="015706"><span class="nick" style="color:#2e2a4a"><a href="#015706" label="[01:57:06]">&lt;stikonas&gt;</a></span><span class="message">make sure that compiler calling conventions match your compiler</span></div><div class="line" id="015731"><span class="nick" style="color:#2e2a4a"><a href="#015731" label="[01:57:31]">&lt;stikonas&gt;</a></span><span class="message">kerravon: it is in functions, but I would say M2libc puts them more nicely</span></div><div class="line" id="015737"><span class="nick" style="color:#2e2a4a"><a href="#015737" label="[01:57:37]">&lt;stikonas&gt;</a></span><span class="message">with C wrappers</span></div><div class="line" id="015738"><span class="nick" style="color:#8dd3c7"><a href="#015738" label="[01:57:38]">&lt;kerravon&gt;</a></span><span class="message">it is designed to be cdecl calling convention</span></div><div class="line" id="015748"><span class="nick" style="color:#2e2a4a"><a href="#015748" label="[01:57:48]">&lt;stikonas&gt;</a></span><span class="message">yes, but M2-Planet does not now cdecl</span></div><div class="line" id="015753"><span class="nick" style="color:#8dd3c7"><a href="#015753" label="[01:57:53]">&lt;kerravon&gt;</a></span><span class="message">you either need to make your compiler produce that with a switch, or you can override it</span></div><div class="line" id="015805"><span class="nick" style="color:#8dd3c7"><a href="#015805" label="[01:58:05]">&lt;kerravon&gt;</a></span><span class="message">you already have DOS?</span></div><div class="line" id="015810"><span class="nick" style="color:#2e2a4a"><a href="#015810" label="[01:58:10]">&lt;stikonas&gt;</a></span><span class="message">no, we don't</span></div><div class="line" id="015819"><span class="nick" style="color:#2e2a4a"><a href="#015819" label="[01:58:19]">&lt;stikonas&gt;</a></span><span class="message">we only have Linux on a few arches and UEFI (on amd64)</span></div><div class="line" id="015823"><span class="nick" style="color:#2e2a4a"><a href="#015823" label="[01:58:23]">&lt;stikonas&gt;</a></span><span class="message">though UEFI is mostly C code anyway</span></div><div class="line" id="015833"><span class="nick" style="color:#8dd3c7"><a href="#015833" label="[01:58:33]">&lt;kerravon&gt;</a></span><span class="message">then you don't have preexisting calling convention for DOS</span></div><div class="line" id="015841"><span class="nick" style="color:#8dd3c7"><a href="#015841" label="[01:58:41]">&lt;kerravon&gt;</a></span><span class="message">so may as well make the first one cdecl</span></div><div class="line" id="015901"><span class="nick" style="color:#2e2a4a"><a href="#015901" label="[01:59:01]">&lt;stikonas&gt;</a></span><span class="message">I don't think we want to change the compiler</span></div><div class="line" id="015914"><span class="nick" style="color:#8dd3c7"><a href="#015914" label="[01:59:14]">&lt;kerravon&gt;</a></span><span class="message">how can you not change the compiler to generate 8086 code?</span></div><div class="line" id="015916"><span class="nick" style="color:#2e2a4a"><a href="#015916" label="[01:59:16]">&lt;stikonas&gt;</a></span><span class="message">it's better to adapt libc to match compiler convention that we have</span></div><div class="line" id="015941"><span class="nick" style="color:#2e2a4a"><a href="#015941" label="[01:59:41]">&lt;stikonas&gt;</a></span><span class="message">kerravon: we do change compiler a bit, but not in a calling convention way</span></div><div class="line" id="015954"><span class="nick" style="color:#2e2a4a"><a href="#015954" label="[01:59:54]">&lt;stikonas&gt;</a></span><span class="message">it's just if else statement to see what is outputed</span></div><div class="line" id="020019"><span class="nick" style="color:#8dd3c7"><a href="#020019" label="[02:00:19]">&lt;kerravon&gt;</a></span><span class="message">does your compiler currently generate 8086 code?</span></div><div class="line" id="020024"><span class="nick" style="color:#8dd3c7"><a href="#020024" label="[02:00:24]">&lt;kerravon&gt;</a></span><span class="message">16-bit</span></div><div class="line" id="020031"><span class="nick" style="color:#2e2a4a"><a href="#020031" label="[02:00:31]">&lt;stikonas&gt;</a></span><span class="message">no, not 16-bit</span></div><div class="line" id="020034"><span class="nick" style="color:#8dd3c7"><a href="#020034" label="[02:00:34]">&lt;kerravon&gt;</a></span><span class="message">and which memory models?</span></div><div class="line" id="020035"><span class="nick" style="color:#2e2a4a"><a href="#020035" label="[02:00:35]">&lt;stikonas&gt;</a></span><span class="message">see here <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/blob/master/cc_core.c#L148">https://github.com/oriansj/M2-Planet/blob/master/cc_core.c#L148</a> </span></div><div class="line" id="020042"><span class="nick" style="color:#2e2a4a"><a href="#020042" label="[02:00:42]">&lt;stikonas&gt;</a></span><span class="message">how it generates code</span></div><div class="line" id="020104"><span class="nick" style="color:#2e2a4a"><a href="#020104" label="[02:01:04]">&lt;stikonas&gt;</a></span><span class="message">what do you mean by memory models?</span></div><div class="line" id="020116"><span class="nick" style="color:#2e2a4a"><a href="#020116" label="[02:01:16]">&lt;stikonas&gt;</a></span><span class="message">there is stack, etc.. of course</span></div><div class="line" id="020130"><span class="nick" style="color:#8dd3c7"><a href="#020130" label="[02:01:30]">&lt;kerravon&gt;</a></span><span class="message">DOS has tiny, small, medium, compact, large and huge memory models</span></div><div class="line" id="020139"><span class="nick" style="color:#8dd3c7"><a href="#020139" label="[02:01:39]">&lt;kerravon&gt;</a></span><span class="message">why are you wishing to target DOS?</span></div><div class="line" id="020149"><span class="nick" style="color:#8dd3c7"><a href="#020149" label="[02:01:49]">&lt;kerravon&gt;</a></span><span class="message">those memory models are a result of segmentation</span></div><div class="line" id="020224"><span class="nick" style="color:#2e2a4a"><a href="#020224" label="[02:02:24]">&lt;stikonas&gt;</a></span><span class="message">I thought you want to target DOS?</span></div><div class="line" id="020232"><span class="nick" style="color:#2e2a4a"><a href="#020232" label="[02:02:32]">&lt;stikonas&gt;</a></span><span class="message">anyway, if you look at e.g. UEFI</span></div><div class="line" id="020242"><span class="nick" style="color:#2e2a4a"><a href="#020242" label="[02:02:42]">&lt;stikonas&gt;</a></span><span class="message">all calling convention is hidden in a few m2libc functions</span></div><div class="line" id="020255"><span class="nick" style="color:#2e2a4a"><a href="#020255" label="[02:02:55]">&lt;stikonas&gt;</a></span><span class="message">such as <a rel="nofollow" href="https://github.com/oriansj/M2libc/blob/main/uefi/uefi.c#L373">https://github.com/oriansj/M2libc/blob/main/uefi/uefi.c#L373</a> </span></div><div class="line" id="020333"><span class="nick" style="color:#8dd3c7"><a href="#020333" label="[02:03:33]">&lt;kerravon&gt;</a></span><span class="message">i am after a public domain C90 compiler that targets DOS and other targets, yes. but i didn't think we were discussing that</span></div><div class="line" id="020341"><span class="nick" style="color:#2e2a4a"><a href="#020341" label="[02:03:41]">&lt;stikonas&gt;</a></span><span class="message">compiler (M2-Planet) has no idea about UEFI calling convention (which is basically Windows calling convention where some arguments are passed as registers, some pushed to stack...)</span></div><div class="line" id="020353"><span class="nick" style="color:#2e2a4a"><a href="#020353" label="[02:03:53]">&lt;stikonas&gt;</a></span><span class="message">yeah, then M2-Planet wouldn't help you</span></div><div class="line" id="020400"><span class="nick" style="color:#2e2a4a"><a href="#020400" label="[02:04:00]">&lt;stikonas&gt;</a></span><span class="message">that's GPLv3</span></div><div class="line" id="020421"><span class="nick" style="color:#80b1d3"><a href="#020421" label="[02:04:21]">&lt;fossy&gt;</a></span><span class="message">stikonas: long term, i would like to migrate completely to builder-hex0, yeah</span></div><div class="line" id="020440"><span class="nick" style="color:#8dd3c7"><a href="#020440" label="[02:04:40]">&lt;kerravon&gt;</a></span><span class="message">&lt;oriansj&gt;	kerravon: I'll even give you a public domain DOS port of cc_x86 if you are willing to help me add DOS support to M2libc</span></div><div class="line" id="020453"><span class="nick" style="color:#8dd3c7"><a href="#020453" label="[02:04:53]">&lt;kerravon&gt;</a></span><span class="message">i am discussing the latter portion of that</span></div><div class="line" id="020459"><span class="nick" style="color:#80b1d3"><a href="#020459" label="[02:04:59]">&lt;fossy&gt;</a></span><span class="message">but other ISAs will likely require the reintroduction of the same thing when we add them, as you said</span></div><div class="line" id="020535"><span class="nick" style="color:#8dd3c7"><a href="#020535" label="[02:05:35]">&lt;kerravon&gt;</a></span><span class="message">after i have helped you achieve the latter part of that, i'll ask about the former</span></div><div class="line" id="020553"><span class="nick" style="color:#8dd3c7"><a href="#020553" label="[02:05:53]">&lt;kerravon&gt;</a></span><span class="message">maybe i misunderstood</span></div><div class="line" id="020603"><span class="nick" style="color:#2e2a4a"><a href="#020603" label="[02:06:03]">&lt;stikonas&gt;</a></span><span class="message">possibly, that you can talk with oriansj</span></div><div class="line" id="020618"><span class="nick" style="color:#2e2a4a"><a href="#020618" label="[02:06:18]">&lt;stikonas&gt;</a></span><span class="message">he wrote most of cc_x86</span></div><div class="line" id="020626"><span class="nick" style="color:#2e2a4a"><a href="#020626" label="[02:06:26]">&lt;stikonas&gt;</a></span><span class="message">or at least originally wrote</span></div><div class="line" id="020641"><span class="nick" style="color:#2e2a4a"><a href="#020641" label="[02:06:41]">&lt;stikonas&gt;</a></span><span class="message">fossy: so perhaps we want to keep that option working</span></div><div class="line" id="020701"><span class="nick" style="color:#2e2a4a"><a href="#020701" label="[02:07:01]">&lt;stikonas&gt;</a></span><span class="message">and also fix kernel arguments for sysb transfer from linux to linux</span></div><div class="line" id="020716"><span class="nick" style="color:#2e2a4a"><a href="#020716" label="[02:07:16]">&lt;stikonas&gt;</a></span><span class="message">fossy: though we should make sure that we don't break qemu</span></div><div class="line" id="020805"><span class="nick" style="color:#2e2a4a"><a href="#020805" label="[02:08:05]">&lt;stikonas&gt;</a></span><span class="message">fossy: right now we are getting quite a few more arches in mes 0.25, though mes-&gt;tinycc step is still problematic</span></div><div class="line" id="020825"><span class="nick" style="color:#2e2a4a"><a href="#020825" label="[02:08:25]">&lt;stikonas&gt;</a></span><span class="message">fossy: but at least M2-Planet -&gt; mescc will be working much better in the next release</span></div><div class="line" id="020840"><span class="nick" style="color:#80b1d3"><a href="#020840" label="[02:08:40]">&lt;fossy&gt;</a></span><span class="message">yeah, sounds good</span></div><div class="line" id="020929"><span class="nick" style="color:#2e2a4a"><a href="#020929" label="[02:09:29]">&lt;stikonas&gt;</a></span><span class="message">and once we have tcc, I guess further steps should be not too hard</span></div><div class="line" id="020933"><span class="nick" style="color:#2e2a4a"><a href="#020933" label="[02:09:33]">&lt;stikonas&gt;</a></span><span class="message">well, at least on amd64</span></div><div class="line" id="020944"><span class="nick" style="color:#2e2a4a"><a href="#020944" label="[02:09:44]">&lt;stikonas&gt;</a></span><span class="message">riscv64 might be another story</span></div><div class="line" id="021020"><span class="nick" style="color:#2e2a4a"><a href="#021020" label="[02:10:20]">&lt;stikonas&gt;</a></span><span class="message">a lot of things won't work there...</span></div><div class="line" id="021038"><span class="nick" style="color:#2e2a4a"><a href="#021038" label="[02:10:38]">&lt;stikonas&gt;</a></span><span class="message">at least until we reach binutils</span></div><div class="line" id="021204"><span class="nick" style="color:#2e2a4a"><a href="#021204" label="[02:12:04]">&lt;stikonas&gt;</a></span><span class="message">I guess we'll first have pre-gen file bootstrap working there (e.g. on guix...)</span></div><div class="line" id="021229"><span class="nick" style="color:#2e2a4a"><a href="#021229" label="[02:12:29]">&lt;stikonas&gt;</a></span><span class="message">and non-pregen bootstrap will need further porting/patching</span></div><div class="line" id="021528"><span class="nick" style="color:#2e2a4a"><a href="#021528" label="[02:15:28]">&lt;stikonas&gt;</a></span><span class="message">fossy: so what are we doing about <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/305">https://github.com/fosslinux/live-bootstrap/pull/305</a>  ?</span></div><div class="line" id="021543"><span class="nick" style="color:#2e2a4a"><a href="#021543" label="[02:15:43]">&lt;stikonas&gt;</a></span><span class="message">merge or do you want to ask for changes to fix go_sysa function</span></div><div class="line" id="023450"><span class="nick" style="color:#80b1d3"><a href="#023450" label="[02:34:50]">&lt;fossy&gt;</a></span><span class="message">i think i'd prefer go_sysb to have the change, at least for now</span></div><div class="line" id="023649"><span class="nick" style="color:#2e2a4a"><a href="#023649" label="[02:36:49]">&lt;stikonas&gt;</a></span><span class="message">ok, agreed</span></div><div class="line" id="023656"><span class="nick" style="color:#2e2a4a"><a href="#023656" label="[02:36:56]">&lt;stikonas&gt;</a></span><span class="message">can you comment on that PR then?</span></div><div class="line" id="150425"><span class="nick" style="color:#6d2462"><a href="#150425" label="[15:04:25]">&lt;mihi&gt;</a></span><span class="message">kerravon: you probably should know what you get with cc_x86 when you help porting its libc to DOS :) cc_x86 is a subset-of-C compiler (even a subset of M2-Planet) compiling to M1 macro assembly. M1 is a purely token based assembler, i.e. it has no idea about architectues or how instructions are encodded, it just knows that mov_eax,[esp+DWORD] is 8B8424. So in assembler parts of the libc, instead of &quot;mov eax,</span></div><div class="line" id="150425"><span class="nick" style="color:#6d2462"><a href="#150425" label="[15:04:25]">&lt;mihi&gt;</a></span><span class="message">[esp+8]&quot; there has to be written &quot;mov_eax,[esp+DWORD] %8&quot; (the % signalling that you want an absolute 4-byte value). It is hard coded to its own calling convention (one I have not seen before, but I mostly know x86 only), where the caller pushes arguments (either integer or pointers all same width) to the stack, and sets {E,R,}BP to the point before the first argument has been pushed. SP is stack pointer, AX is</span></div><div class="line" id="150426"><span class="nick" style="color:#6d2462"><a href="#150426" label="[15:04:26]">&lt;mihi&gt;</a></span><span class="message">for returning results, DI is callee saved and reserved for outer base pointer in nested function calls, BX is callee saved and reserved as accumulator, all other registers/flags are temporary and therefore caller-saved if caller needs them. Memory model assumes flat pointers, i.e. all pointers are from one linear address space, malloc allocates contiguous regions, and also function pointers are from the same</span></div><div class="line" id="150431"><span class="nick" style="color:#6d2462"><a href="#150431" label="[15:04:31]">&lt;mihi&gt;</a></span><span class="message">address space, i.e. no Harvard Architecture. I understand oriansj 's offer that they will port cc_x86 to DOS and put it to public domain if you help add DOS support to M2libc (and therefore M2-Planet).</span></div><div class="line" id="150531"><span class="nick" style="color:#6d2462"><a href="#150531" label="[15:05:31]">&lt;mihi&gt;</a></span><span class="message">I forgot that arguments are pushed left-to-right and caller has to clean stack afterwards. Due to the frame pointer set by the caller, variable arguments are possible like cdecl without requiring to reverse the arguments on stack.</span></div><div class="line" id="150835"><span class="nick" style="color:#6d2462"><a href="#150835" label="[15:08:35]">&lt;mihi&gt;</a></span><span class="message">(compiler does not support ... as varargs, so in C you have to declare &quot;enough&quot; arguments that everybody uses less than that, but callers can omit any if they don't want to pass so many. Since all function signatures are essentially the same, linking means only checking whether all function names called are also declared).</span></div><div class="line" id="151206"><span class="nick" style="color:#6d2462"><a href="#151206" label="[15:12:06]">&lt;mihi&gt;</a></span><span class="message">muurkha, what tools did you try to use to mirror the Miraheze wiki? The official Export tool will (as you noticed) miss binaries (there are 4 images plus maybe historic versions), so best choice might be to use &lt;<a rel="nofollow" href="https://www.mediawiki.org/wiki/Manual:Grabbers">https://www.mediawiki.org/wiki/Manual:Grabbers</a>&gt; </span></div><div class="line" id="151239"><span class="nick" style="color:#6d2462"><a href="#151239" label="[15:12:39]">&lt;mihi&gt;</a></span><span class="message">or check the dumps provided on Archive.org if they are sufficiently recent.</span></div><div class="line" id="161632"><span class="nick" style="color:#2e2a4a"><a href="#161632" label="[16:16:32]">&lt;stikonas&gt;</a></span><span class="message">interesting desctription of cc_x86/M1. Though M1 does have a little bit of knowledge about some aspects of architectures, i.e. we have to tell that architecture is big endian</span></div><div class="line" id="161641"><span class="nick" style="color:#2e2a4a"><a href="#161641" label="[16:16:41]">&lt;stikonas&gt;</a></span><span class="message">and also it knows quite a bit more about RISC-V</span></div><div class="line" id="162001"><span class="nick" style="color:#2e2a4a"><a href="#162001" label="[16:20:01]">&lt;stikonas&gt;</a></span><span class="message">still, it really is surprisingly platform independent</span></div><div class="line" id="233446"><span class="nick" style="color:#8dd3c7"><a href="#233446" label="[23:34:46]">&lt;kerravon&gt;</a></span><span class="message">mihi - thanks for the info. if it's a subset of C90 then i don't have a particular use for it. I already have SubC</span></div><div class="line" id="233527"><span class="nick" style="color:#8dd3c7"><a href="#233527" label="[23:35:27]">&lt;kerravon&gt;</a></span><span class="message">also there seems to be some confusion</span></div><div class="line" id="233533"><span class="nick" style="color:#8dd3c7"><a href="#233533" label="[23:35:33]">&lt;kerravon&gt;</a></span><span class="message">what does &quot;for DOS&quot; mean?</span></div><div class="line" id="233556"><span class="nick" style="color:#8dd3c7"><a href="#233556" label="[23:35:56]">&lt;kerravon&gt;</a></span><span class="message">you mean DOS with a DOS extender so that you can use 32-bit flat?</span></div><div class="line" id="233615"><span class="nick" style="color:#8dd3c7"><a href="#233615" label="[23:36:15]">&lt;kerravon&gt;</a></span><span class="message">because otherwise DOS is normally 16-bit with various memory models</span></div><div class="line" id="233638"><span class="nick" style="color:#8dd3c7"><a href="#233638" label="[23:36:38]">&lt;kerravon&gt;</a></span><span class="message">so the compiler can't generate all those 32-bit instructions</span></div><div class="line" id="233700"><span class="nick" style="color:#8dd3c7"><a href="#233700" label="[23:37:00]">&lt;kerravon&gt;</a></span><span class="message">well, unless you want to assume DOS running on an 80386 instead of 8086</span></div><div class="line" id="233707"><span class="nick" style="color:#8dd3c7"><a href="#233707" label="[23:37:07]">&lt;kerravon&gt;</a></span><span class="message">then you can use some</span></div><br /></div></body></html>