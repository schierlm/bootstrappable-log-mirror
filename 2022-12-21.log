<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-12-21.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000424"><span class="nick" style="color:#389600"><a href="#000424" label="[00:04:24]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well that was written back when foo[4][5] wouldn't give you the correct answer and bar[3][4] = 'x' would set the wrong bit of memory</span></div><div class="line" id="000655"><span class="nick" style="color:#389600"><a href="#000655" label="[00:06:55]">&lt;oriansj&gt;</a></span><span class="message">So that feature isn't generally used but it does look you did do some testing on it back in November so it is porbably functional</span></div><div class="line" id="000706"><span class="nick" style="color:#389600"><a href="#000706" label="[00:07:06]">&lt;oriansj&gt;</a></span><span class="message">^porbably^probably^</span></div><div class="line" id="001043"><span class="nick" style="color:#8dd3c7"><a href="#001043" label="[00:10:43]">&lt;stikonas&gt;</a></span><span class="message">oh, you think it's this recent change, maybe...</span></div><div class="line" id="001053"><span class="nick" style="color:#8dd3c7"><a href="#001053" label="[00:10:53]">&lt;stikonas&gt;</a></span><span class="message">well, at some point when I have more time I can test</span></div><div class="line" id="001147"><span class="nick" style="color:#8dd3c7"><a href="#001147" label="[00:11:47]">&lt;stikonas&gt;</a></span><span class="message">now I'm getting slowed down in my UEFI work cause I always think that some general improvement in M2-Planet or M2libc would make code nicer...</span></div><div class="line" id="001153"><span class="nick" style="color:#8dd3c7"><a href="#001153" label="[00:11:53]">&lt;stikonas&gt;</a></span><span class="message">which is probably good longer term...</span></div><div class="line" id="001338"><span class="nick" style="color:#8dd3c7"><a href="#001338" label="[00:13:38]">&lt;stikonas&gt;</a></span><span class="message">a couple of things I have in mind is: 1. getenv function. 2. implement C operator precedence for * / %, + -, &lt;&lt; &gt;&gt; operators</span></div><div class="line" id="001521"><span class="nick" style="color:#389600"><a href="#001521" label="[00:15:21]">&lt;oriansj&gt;</a></span><span class="message">stikonas: operator precedence is already there</span></div><div class="line" id="001542"><span class="nick" style="color:#8dd3c7"><a href="#001542" label="[00:15:42]">&lt;stikonas&gt;</a></span><span class="message">oriansj: oh but stuff like 2 + 3 * 6 doesnt work, it returns 30</span></div><div class="line" id="001558"><span class="nick" style="color:#8dd3c7"><a href="#001558" label="[00:15:58]">&lt;stikonas&gt;</a></span><span class="message">it first adds 2 + 3 to get 5 and then multiplies by 6</span></div><div class="line" id="001615"><span class="nick" style="color:#8dd3c7"><a href="#001615" label="[00:16:15]">&lt;stikonas&gt;</a></span><span class="message">it might be that we just need to reorder it a bit</span></div><div class="line" id="001620"><span class="nick" style="color:#8dd3c7"><a href="#001620" label="[00:16:20]">&lt;stikonas&gt;</a></span><span class="message">in additive_expr_stub</span></div><div class="line" id="001700"><span class="nick" style="color:#8dd3c7"><a href="#001700" label="[00:17:00]">&lt;stikonas&gt;</a></span><span class="message">hmm, no, that's not sufficient</span></div><div class="line" id="001735"><span class="nick" style="color:#8dd3c7"><a href="#001735" label="[00:17:35]">&lt;stikonas&gt;</a></span><span class="message">oh, maybe it's not that easy without backtracking...</span></div><div class="line" id="001744"><span class="nick" style="color:#8dd3c7"><a href="#001744" label="[00:17:44]">&lt;stikonas&gt;</a></span><span class="message">oh well, it's not a huge deal</span></div><div class="line" id="001811"><span class="nick" style="color:#8dd3c7"><a href="#001811" label="[00:18:11]">&lt;stikonas&gt;</a></span><span class="message">getenv should be easy one though</span></div><div class="line" id="001828"><span class="nick" style="color:#8dd3c7"><a href="#001828" label="[00:18:28]">&lt;stikonas&gt;</a></span><span class="message">we just need to make sure that envp is store in global variable</span></div><div class="line" id="001949"><span class="nick" style="color:#8dd3c7"><a href="#001949" label="[00:19:49]">&lt;stikonas&gt;</a></span><span class="message">oriansj: anyway, maybe let's merge one of my commits that I created for uefi env variables</span></div><div class="line" id="002009"><span class="nick" style="color:#389600"><a href="#002009" label="[00:20:09]">&lt;oriansj&gt;</a></span><span class="message">stikonas: eventually it just gets to the point where one just needs to do a major rewrite of M2-Planet and at that point you might as well call it M3</span></div><div class="line" id="002101"><span class="nick" style="color:#8dd3c7"><a href="#002101" label="[00:21:01]">&lt;stikonas&gt;</a></span><span class="message">that's true, which is why after thinking a bit, I decided against 2.</span></div><div class="line" id="002133"><span class="nick" style="color:#8dd3c7"><a href="#002133" label="[00:21:33]">&lt;stikonas&gt;</a></span><span class="message">oriansj: <a rel="nofollow" href="https://github.com/oriansj/M2libc/pull/31">https://github.com/oriansj/M2libc/pull/31</a> </span></div><div class="line" id="002309"><span class="nick" style="color:#8dd3c7"><a href="#002309" label="[00:23:09]">&lt;stikonas&gt;</a></span><span class="message">perhaps not the most efficient implementation as it basically reads all variables twice</span></div><div class="line" id="002350"><span class="nick" style="color:#8dd3c7"><a href="#002350" label="[00:23:50]">&lt;stikonas&gt;</a></span><span class="message">(one to get the number of them, then allocates enough memory for envp and then reads all variables again, this time writing into envp)</span></div><div class="line" id="002918"><span class="nick" style="color:#389600"><a href="#002918" label="[00:29:18]">&lt;oriansj&gt;</a></span><span class="message">merged</span></div><div class="line" id="002936"><span class="nick" style="color:#8dd3c7"><a href="#002936" label="[00:29:36]">&lt;stikonas&gt;</a></span><span class="message">thanks</span></div><div class="line" id="004547"><span class="nick" style="color:#2e2a4a"><a href="#004547" label="[00:45:47]">&lt;rickmasters&gt;</a></span><span class="message">Fiwix can now build all packages up to Linux and all known intermittent failures/bugs have been fixed!</span></div><div class="line" id="004657"><span class="nick" style="color:#2e2a4a"><a href="#004657" label="[00:46:57]">&lt;rickmasters&gt;</a></span><span class="message">Last steps remaining to complete kernel bootstrap are: build Fiwix in live-bootstrap with tcc, launch Fiwix with builder-hex0, launch Linux from Fiwix.</span></div><div class="line" id="005154"><span class="nick" style="color:#6b8072"><a href="#005154" label="[00:51:54]">&lt;stikonas[m]&gt;</a></span><span class="message">Another huge progress update!</span></div><div class="line" id="005224"><span class="nick" style="color:#6b8072"><a href="#005224" label="[00:52:24]">&lt;stikonas[m]&gt;</a></span><span class="message">rickmasters: for 1. I guess you need to write kaem file?</span></div><div class="line" id="005230"><span class="nick" style="color:#2e2a4a"><a href="#005230" label="[00:52:30]">&lt;rickmasters&gt;</a></span><span class="message">Yeah, I got musl-1.2.3 and curl to build.</span></div><div class="line" id="005239"><span class="nick" style="color:#6b8072"><a href="#005239" label="[00:52:39]">&lt;stikonas[m]&gt;</a></span><span class="message">Since you said make is not working</span></div><div class="line" id="005354"><span class="nick" style="color:#6b8072"><a href="#005354" label="[00:53:54]">&lt;stikonas[m]&gt;</a></span><span class="message">Launching new kernels is probably a harder task...</span></div><div class="line" id="005408"><span class="nick" style="color:#6b8072"><a href="#005408" label="[00:54:08]">&lt;stikonas[m]&gt;</a></span><span class="message">Need to implement something like kexec?</span></div><div class="line" id="005410"><span class="nick" style="color:#2e2a4a"><a href="#005410" label="[00:54:10]">&lt;rickmasters&gt;</a></span><span class="message">stickonas[m], yes I'll need to repackage tcc-0.9.27 as tar.gz and build it sooner and write a kaem script to build Fiwix</span></div><div class="line" id="005438"><span class="nick" style="color:#2e2a4a"><a href="#005438" label="[00:54:38]">&lt;rickmasters&gt;</a></span><span class="message">stikonas[m]: yes, kexec</span></div><div class="line" id="005505"><span class="nick" style="color:#2e2a4a"><a href="#005505" label="[00:55:05]">&lt;rickmasters&gt;</a></span><span class="message">For builder-hex0 I could probably just write a program in C to launch fiwix since there is no memory protection.</span></div><div class="line" id="005617"><span class="nick" style="color:#2e2a4a"><a href="#005617" label="[00:56:17]">&lt;rickmasters&gt;</a></span><span class="message">For kexec with Fiwix, there is no /proc/mem or /proc/core so I'll have to do something different than standard kexec</span></div><div class="line" id="005637"><span class="nick" style="color:#6b8072"><a href="#005637" label="[00:56:37]">&lt;stikonas[m]&gt;</a></span><span class="message">OK, that's not too bad</span></div><div class="line" id="005650"><span class="nick" style="color:#6b8072"><a href="#005650" label="[00:56:50]">&lt;stikonas[m]&gt;</a></span><span class="message">I was more scared of the first transition</span></div><div class="line" id="005703"><span class="nick" style="color:#6b8072"><a href="#005703" label="[00:57:03]">&lt;stikonas[m]&gt;</a></span><span class="message">As it is really early and we have almost no tools</span></div><div class="line" id="005756"><span class="nick" style="color:#2e2a4a"><a href="#005756" label="[00:57:56]">&lt;rickmasters&gt;</a></span><span class="message">Well, the scary part I haven't mentioned is that I need to create and populate an ext2 file system from user land to boot Fiwix.</span></div><div class="line" id="005908"><span class="nick" style="color:#2e2a4a"><a href="#005908" label="[00:59:08]">&lt;rickmasters&gt;</a></span><span class="message">I'm looking at this package: <a rel="nofollow" href="https://github.com/gkostka/lwext4">https://github.com/gkostka/lwext4</a> </span></div><div class="line" id="005922"><span class="nick" style="color:#6b8072"><a href="#005922" label="[00:59:22]">&lt;stikonas[m]&gt;</a></span><span class="message">Oh yes, that is also tricky...</span></div><div class="line" id="010052"><span class="nick" style="color:#6b8072"><a href="#010052" label="[01:00:52]">&lt;stikonas[m]&gt;</a></span><span class="message">Can we not teach fiwix to read something else instead?</span></div><div class="line" id="010115"><span class="nick" style="color:#389600"><a href="#010115" label="[01:01:15]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: could we just write to new disks the output rather having to do kexec?</span></div><div class="line" id="010306"><span class="nick" style="color:#389600"><a href="#010306" label="[01:03:06]">&lt;oriansj&gt;</a></span><span class="message">(but I trust you know best here)</span></div><div class="line" id="010350"><span class="nick" style="color:#2e2a4a"><a href="#010350" label="[01:03:50]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: I'm not sure exactly what you mean. Use non-bootstrapped tools to create the ext2 file system?</span></div><div class="line" id="010445"><span class="nick" style="color:#6b8072"><a href="#010445" label="[01:04:45]">&lt;stikonas[m]&gt;</a></span><span class="message">I think he only meant reboot instead of kexec</span></div><div class="line" id="010501"><span class="nick" style="color:#389600"><a href="#010501" label="[01:05:01]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: I was actually thinking of builder-hex0 creating a Fiwix disk image and then just shutting down and requiring the user to power on the Fiwix disk image</span></div><div class="line" id="010538"><span class="nick" style="color:#389600"><a href="#010538" label="[01:05:38]">&lt;oriansj&gt;</a></span><span class="message">(if that would make things simpler for you)</span></div><div class="line" id="010546"><span class="nick" style="color:#2e2a4a"><a href="#010546" label="[01:05:46]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: I think the kexec part is not too hard really. Probably a lot easier than preparing the disk.</span></div><div class="line" id="010554"><span class="nick" style="color:#6b8072"><a href="#010554" label="[01:05:54]">&lt;stikonas[m]&gt;</a></span><span class="message">Still, it looks like kexec in builder-hex0 can be done in user land</span></div><div class="line" id="010625"><span class="nick" style="color:#6b8072"><a href="#010625" label="[01:06:25]">&lt;stikonas[m]&gt;</a></span><span class="message">rickmasters: can't we add e.g. tar support instead of ext2?</span></div><div class="line" id="010634"><span class="nick" style="color:#2e2a4a"><a href="#010634" label="[01:06:34]">&lt;rickmasters&gt;</a></span><span class="message">I've looked at the source for Qemu which can boot Fiwix and it's not too bad.</span></div><div class="line" id="010733"><span class="nick" style="color:#6b8072"><a href="#010733" label="[01:07:33]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, in the end we only need to implement a subset of ext2...</span></div><div class="line" id="010734"><span class="nick" style="color:#389600"><a href="#010734" label="[01:07:34]">&lt;oriansj&gt;</a></span><span class="message">well looking at the lwext4; it appears something easily convertable to M2-Planet's C subset</span></div><div class="line" id="010749"><span class="nick" style="color:#389600"><a href="#010749" label="[01:07:49]">&lt;oriansj&gt;</a></span><span class="message">and it definitely looks like something TCC can build without changes</span></div><div class="line" id="011019"><span class="nick" style="color:#6b8072"><a href="#011019" label="[01:10:19]">&lt;stikonas[m]&gt;</a></span><span class="message">oriansj, rickmasters: we would have to link gplv2 only code with gplv3 or later</span></div><div class="line" id="011036"><span class="nick" style="color:#6b8072"><a href="#011036" label="[01:10:36]">&lt;stikonas[m]&gt;</a></span><span class="message">(I think, let me double check)</span></div><div class="line" id="011106"><span class="nick" style="color:#6b8072"><a href="#011106" label="[01:11:06]">&lt;stikonas[m]&gt;</a></span><span class="message">Oh it's gplv2+, do it's fine</span></div><div class="line" id="011540"><span class="nick" style="color:#2e2a4a"><a href="#011540" label="[01:15:40]">&lt;rickmasters&gt;</a></span><span class="message">Wish I could chat more, but I'm off to a christmas party.</span></div><div class="line" id="011546"><span class="nick" style="color:#389600"><a href="#011546" label="[01:15:46]">&lt;oriansj&gt;</a></span><span class="message">So build TCC on builder-hex0; have it build lwext4; which then makes the partition for Fiwix; which then TCC builds, we populate it with everything and then switch over to Fiwix</span></div><div class="line" id="011558"><span class="nick" style="color:#389600"><a href="#011558" label="[01:15:58]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: Have an amazing time ^_^</span></div><div class="line" id="011629"><span class="nick" style="color:#2e2a4a"><a href="#011629" label="[01:16:29]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: thanks, and yes, you've got the steps right</span></div><div class="line" id="011823"><span class="nick" style="color:#2e2a4a"><a href="#011823" label="[01:18:23]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: I'll also consider alternatives like a simpler file system that Fiwix converts to ext2 on the fly, but its not really designed to do lots of file system work directly from the kernel</span></div><div class="line" id="011914"><span class="nick" style="color:#2e2a4a"><a href="#011914" label="[01:19:14]">&lt;rickmasters&gt;</a></span><span class="message">Its all based on syscalls and expects an active process everywhere</span></div><div class="line" id="011942"><span class="nick" style="color:#2e2a4a"><a href="#011942" label="[01:19:42]">&lt;rickmasters&gt;</a></span><span class="message">But anyway, gotta go, talk to you guys later</span></div><div class="line" id="024748"><span class="nick" style="color:#80b1d3"><a href="#024748" label="[02:47:48]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: i never really figured out why that's the case lol</span></div><div class="line" id="024802"><span class="nick" style="color:#80b1d3"><a href="#024802" label="[02:48:02]">&lt;fossy&gt;</a></span><span class="message">rickmasters: that is very exciting!</span></div><div class="line" id="024812"><span class="nick" style="color:#80b1d3"><a href="#024812" label="[02:48:12]">&lt;fossy&gt;</a></span><span class="message">are your changes/patches pushed everywhere?</span></div><div class="line" id="024901"><span class="nick" style="color:#80b1d3"><a href="#024901" label="[02:49:01]">&lt;fossy&gt;</a></span><span class="message">anywhere*</span></div><div class="line" id="025356"><span class="nick" style="color:#80b1d3"><a href="#025356" label="[02:53:56]">&lt;fossy&gt;</a></span><span class="message">BTW, does anyone know, how the hell to escape CFLAGS passed to a configure that includes a -D with spaces? (in this case -D__DATE__=Jan 1 1970) (no i cannot -U__DATE__, it must be set to something)</span></div><div class="line" id="025424"><span class="nick" style="color:#80b1d3"><a href="#025424" label="[02:54:24]">&lt;fossy&gt;</a></span><span class="message">i have tried at least a dozen different escaping combinations that _seem_ like they should work but don't -.-</span></div><div class="line" id="025625"><span class="nick" style="color:#6d2462"><a href="#025625" label="[02:56:25]">&lt;AwesomeAdam54321&gt;</a></span><span class="message">fossy: Does it work without escaping? The #:configure-flags only accepts a list of strings and not one long one probably so that a string can have spaces without issues</span></div><div class="line" id="025717"><span class="nick" style="color:#80b1d3"><a href="#025717" label="[02:57:17]">&lt;fossy&gt;</a></span><span class="message">no, make passes -D__DATE__=Jan 1 1970 with spaces, so the compiler borks cause 1 and 1970 are separate arguments</span></div><div class="line" id="033632"><span class="nick" style="color:#80b1d3"><a href="#033632" label="[03:36:32]">&lt;fossy&gt;</a></span><span class="message">hmm i passed it to make instead of configure as a make variable and that worked. not complaining</span></div><div class="line" id="033644"><span class="nick" style="color:#80b1d3"><a href="#033644" label="[03:36:44]">&lt;fossy&gt;</a></span><span class="message">technically not a good idea but oh well</span></div><div class="line" id="040444"><span class="nick" style="color:#234e69"><a href="#040444" label="[04:04:44]">&lt;pder&gt;</a></span><span class="message">Hi all, I recently ported a bz2 decompression utility similar to ungz in mescc-tools-extra so it builds with M2-Planet.  <a rel="nofollow" href="https://github.com/pder/mescc-tools-extra/tree/unbz2">https://github.com/pder/mescc-tools-extra/tree/unbz2</a> </span></div><div class="line" id="040657"><span class="nick" style="color:#234e69"><a href="#040657" label="[04:06:57]">&lt;pder&gt;</a></span><span class="message">I used the latest M2-Planet in order to build properly (commit 286964d5f81ee7393)</span></div><div class="line" id="040845"><span class="nick" style="color:#80b1d3"><a href="#040845" label="[04:08:45]">&lt;fossy&gt;</a></span><span class="message">neat! pull request it :D</span></div><div class="line" id="041157"><span class="nick" style="color:#234e69"><a href="#041157" label="[04:11:57]">&lt;pder&gt;</a></span><span class="message">I think I will do a draft pull request soon, just needs a little testing.  Hoping this might be useful for the kernel bootstrap</span></div><div class="line" id="041240"><span class="nick" style="color:#80b1d3"><a href="#041240" label="[04:12:40]">&lt;fossy&gt;</a></span><span class="message">at minimum, it will make tarballs smaller, which means less ram</span></div><div class="line" id="090304"><span class="nick" style="color:#6c3d55"><a href="#090304" label="[09:03:04]">&lt;Irvise_&gt;</a></span><span class="message">Welp, the Ol Lisp/Scheme creator really took bootstrapping to heart. He has started documenting the VM binary format and a Scheme-&gt;binary compiler that he hopes to make portable to other Schemes.</span></div><div class="line" id="095652"><span class="nick" style="color:#80b1d3"><a href="#095652" label="[09:56:52]">&lt;fossy&gt;</a></span><span class="message">/ # python</span></div><div class="line" id="095654"><span class="nick" style="color:#80b1d3"><a href="#095654" label="[09:56:54]">&lt;fossy&gt;</a></span><span class="message">Python 3.11.1 (main, xxx xx xxxx, xx:xx:xx) [GCC 4.7.4] on linux</span></div><div class="line" id="095836"><span class="nick" style="color:#80b1d3"><a href="#095836" label="[09:58:36]">&lt;fossy&gt;</a></span><span class="message">:DDD nearly there, just need to check for reproducibility</span></div><div class="line" id="095902"><span class="nick" style="color:#80b1d3"><a href="#095902" label="[09:59:02]">&lt;fossy&gt;</a></span><span class="message">8 versions from start to end</span></div><div class="line" id="095940"><span class="nick" style="color:#80b1d3"><a href="#095940" label="[09:59:40]">&lt;fossy&gt;</a></span><span class="message">it's really interesting to see how generated code increased, probably from about 200 loc in python 2.0 -&gt; 10-20k in most recent version?</span></div><div class="line" id="101545"><span class="nick" style="color:#6b8072"><a href="#101545" label="[10:15:45]">&lt;stikonas[m]&gt;</a></span><span class="message">pder: oh and that might save rickmasters tgd need to repackage tcc 0.9.27</span></div><div class="line" id="101631"><span class="nick" style="color:#6b8072"><a href="#101631" label="[10:16:31]">&lt;stikonas[m]&gt;</a></span><span class="message">fossy: oh nice!</span></div><div class="line" id="102112"><span class="nick" style="color:#6b8072"><a href="#102112" label="[10:21:12]">&lt;stikonas[m]&gt;</a></span><span class="message">pder: by the way, you can use stuff like i += 1 in unbz2.c</span></div><div class="line" id="112315"><span class="nick" style="color:#389600"><a href="#112315" label="[11:23:15]">&lt;oriansj&gt;</a></span><span class="message">nice work pder, I think that will be helpful ^_^</span></div><div class="line" id="112405"><span class="nick" style="color:#389600"><a href="#112405" label="[11:24:05]">&lt;oriansj&gt;</a></span><span class="message">Irvise_: Nice to hear good news like that.</span></div><div class="line" id="112554"><span class="nick" style="color:#389600"><a href="#112554" label="[11:25:54]">&lt;oriansj&gt;</a></span><span class="message">fossy: oh dear, practicially a big ol blob of generated values. (Seriously do interpreted language tend to accumulate those or what) but glad you got that handled for us ^_^</span></div><div class="line" id="113716"><span class="nick" style="color:#6b8072"><a href="#113716" label="[11:37:16]">&lt;stikonas[m]&gt;</a></span><span class="message">Yes, 10-20k loc is a lot...</span></div><div class="line" id="114037"><span class="nick" style="color:#6b8072"><a href="#114037" label="[11:40:37]">&lt;stikonas[m]&gt;</a></span><span class="message">oriansj: compiled languages are usually worse, the whole thing is often written in itself</span></div><div class="line" id="114913"><span class="nick" style="color:#389600"><a href="#114913" label="[11:49:13]">&lt;oriansj&gt;</a></span><span class="message">stikonas[m]: granted, they usually require you to solve the bootstrap the language problem but they don't usually add in a few kloc of &quot;generated code&quot;; which unlike things like psyntax.pp which that entire chain is lost very quickly and most people completely missed it.</span></div><div class="line" id="115308"><span class="nick" style="color:#6b8072"><a href="#115308" label="[11:53:08]">&lt;stikonas[m]&gt;</a></span><span class="message">Yes, I guess it's easier for generated code to hide in interpreted languages</span></div><div class="line" id="120052"><span class="nick" style="color:#389600"><a href="#120052" label="[12:00:52]">&lt;oriansj&gt;</a></span><span class="message">also interpreted languages rarely are written in themselves; so the temptation to use a feature of that interpreted language in its implementation results in that sort of behavior</span></div><br /></div></body></html>