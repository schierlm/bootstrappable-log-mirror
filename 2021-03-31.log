<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-03-31.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="004055"><span class="nick">***</span><span class="message notice">Server sets mode: +cnt </span></div><div class="line" id="004108"><span class="nick">***</span><span class="message notice">edef_ is now known as edef</span></div><div class="line" id="004147"><span class="nick">***</span><span class="message notice">xwvvvvwx- is now known as xwvvvvwx</span></div><div class="line" id="010206"><span class="nick">***</span><span class="message notice">ericonr- is now known as ericonr</span></div><div class="line" id="014009"><span class="nick">***</span><span class="message notice">deltab_ is now known as deltab</span></div><div class="line" id="023823"><span class="nick" style="color:#8dd3c7"><a href="#023823" label="[02:38:23]">&lt;pder&gt;</a></span><span class="message">stikonas: thats great you were able to build gcc without needing autogen.  what's --program-transform-name= doing?  Also, is the tcc static inside array patch needed?</span></div><div class="line" id="023904"><span class="nick" style="color:#2e2a4a"><a href="#023904" label="[02:39:04]">&lt;stikonas&gt;</a></span><span class="message">pder: without it gcc is only installed as i386-unknown-linux-gnu-gcc</span></div><div class="line" id="023914"><span class="nick" style="color:#2e2a4a"><a href="#023914" label="[02:39:14]">&lt;stikonas&gt;</a></span><span class="message">tcc-static patch let's us to drop musl patch</span></div><div class="line" id="023923"><span class="nick" style="color:#2e2a4a"><a href="#023923" label="[02:39:23]">&lt;stikonas&gt;</a></span><span class="message">it's a tradeoff...</span></div><div class="line" id="023931"><span class="nick" style="color:#2e2a4a"><a href="#023931" label="[02:39:31]">&lt;stikonas&gt;</a></span><span class="message">but I think it's better to patch tcc</span></div><div class="line" id="024004"><span class="nick" style="color:#2e2a4a"><a href="#024004" label="[02:40:04]">&lt;stikonas&gt;</a></span><span class="message">pder: somehow when I run configure in gcc subdirectory program-transform-name is preset...</span></div><div class="line" id="024038"><span class="nick" style="color:#2e2a4a"><a href="#024038" label="[02:40:38]">&lt;stikonas&gt;</a></span><span class="message">so it was either unsetting it or installing fixing missing gcc and cpp</span></div><div class="line" id="024138"><span class="nick" style="color:#8dd3c7"><a href="#024138" label="[02:41:38]">&lt;pder&gt;</a></span><span class="message">ah ok, very nice.  Built ok for me in chroot, I am trying qemu</span></div><div class="line" id="024208"><span class="nick" style="color:#8dd3c7"><a href="#024208" label="[02:42:08]">&lt;pder&gt;</a></span><span class="message">I was thinking the tcc patch was related to bash</span></div><div class="line" id="024549"><span class="nick" style="color:#2e2a4a"><a href="#024549" label="[02:45:49]">&lt;stikonas&gt;</a></span><span class="message">tcc patch was also needed to build xz</span></div><div class="line" id="024556"><span class="nick" style="color:#2e2a4a"><a href="#024556" label="[02:45:56]">&lt;stikonas&gt;</a></span><span class="message">but now xz is postponed till after gcc</span></div><div class="line" id="024603"><span class="nick" style="color:#2e2a4a"><a href="#024603" label="[02:46:03]">&lt;stikonas&gt;</a></span><span class="message">anyway, I removed one musl patch</span></div><div class="line" id="024629"><span class="nick" style="color:#2e2a4a"><a href="#024629" label="[02:46:29]">&lt;stikonas&gt;</a></span><span class="message">and I think it's better to do it in compiler instead of special casing in compiled software</span></div><div class="line" id="024644"><span class="nick" style="color:#2e2a4a"><a href="#024644" label="[02:46:44]">&lt;stikonas&gt;</a></span><span class="message">and I think it's smaller than musl patch was</span></div><div class="line" id="024646"><span class="nick" style="color:#8dd3c7"><a href="#024646" label="[02:46:46]">&lt;pder&gt;</a></span><span class="message">I agree</span></div><div class="line" id="024735"><span class="nick" style="color:#2e2a4a"><a href="#024735" label="[02:47:35]">&lt;stikonas&gt;</a></span><span class="message">anyway, with gcc I have more hope in building guile, but I think fossy already started looking at it</span></div><div class="line" id="024747"><span class="nick" style="color:#2e2a4a"><a href="#024747" label="[02:47:47]">&lt;stikonas&gt;</a></span><span class="message">so I'll not look at guile right now</span></div><div class="line" id="024753"><span class="nick" style="color:#8dd3c7"><a href="#024753" label="[02:47:53]">&lt;pder&gt;</a></span><span class="message">Is guile the next milestone?  If so, do we need newer binutils and possibly glibc?</span></div><div class="line" id="024820"><span class="nick" style="color:#2e2a4a"><a href="#024820" label="[02:48:20]">&lt;stikonas&gt;</a></span><span class="message">not sure...</span></div><div class="line" id="024829"><span class="nick" style="color:#2e2a4a"><a href="#024829" label="[02:48:29]">&lt;stikonas&gt;</a></span><span class="message">probably not</span></div><div class="line" id="024851"><span class="nick" style="color:#2e2a4a"><a href="#024851" label="[02:48:51]">&lt;stikonas&gt;</a></span><span class="message">with gcc we can build newer software which tends to work alright with musl</span></div><div class="line" id="024905"><span class="nick" style="color:#8dd3c7"><a href="#024905" label="[02:49:05]">&lt;pder&gt;</a></span><span class="message">I tried out mihi's ppsyntax bootstrap and that worked nicely.  hopefully our gcc version is new enough for guile 3.0.2</span></div><div class="line" id="024936"><span class="nick" style="color:#2e2a4a"><a href="#024936" label="[02:49:36]">&lt;stikonas&gt;</a></span><span class="message">it should be enough</span></div><div class="line" id="025003"><span class="nick" style="color:#2e2a4a"><a href="#025003" label="[02:50:03]">&lt;stikonas&gt;</a></span><span class="message">well, if not, we'll think</span></div><div class="line" id="025023"><span class="nick" style="color:#2e2a4a"><a href="#025023" label="[02:50:23]">&lt;stikonas&gt;</a></span><span class="message">patch, or try to build newer gcc</span></div><div class="line" id="025030"><span class="nick" style="color:#2e2a4a"><a href="#025030" label="[02:50:30]">&lt;stikonas&gt;</a></span><span class="message">although, we can't go much newer</span></div><div class="line" id="025033"><span class="nick" style="color:#2e2a4a"><a href="#025033" label="[02:50:33]">&lt;stikonas&gt;</a></span><span class="message">without C++...</span></div><div class="line" id="025044"><span class="nick" style="color:#2e2a4a"><a href="#025044" label="[02:50:44]">&lt;stikonas&gt;</a></span><span class="message">and g++ might need glibc</span></div><div class="line" id="025206"><span class="nick" style="color:#8dd3c7"><a href="#025206" label="[02:52:06]">&lt;pder&gt;</a></span><span class="message">I believe I started looking at glibc 2.5</span></div><div class="line" id="025216"><span class="nick" style="color:#8dd3c7"><a href="#025216" label="[02:52:16]">&lt;pder&gt;</a></span><span class="message">And it wanted slightly newer binutils</span></div><div class="line" id="025259"><span class="nick" style="color:#2e2a4a"><a href="#025259" label="[02:52:59]">&lt;stikonas&gt;</a></span><span class="message">oh</span></div><div class="line" id="025329"><span class="nick" style="color:#2e2a4a"><a href="#025329" label="[02:53:29]">&lt;stikonas&gt;</a></span><span class="message">isn't glibc 2.5 quite old</span></div><div class="line" id="025355"><span class="nick" style="color:#2e2a4a"><a href="#025355" label="[02:53:55]">&lt;stikonas&gt;</a></span><span class="message">and from the same time as binutils 2.14...</span></div><div class="line" id="025356"><span class="nick" style="color:#2e2a4a"><a href="#025356" label="[02:53:56]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="025401"><span class="nick" style="color:#2e2a4a"><a href="#025401" label="[02:54:01]">&lt;stikonas&gt;</a></span><span class="message">binutils 2.15 is much newer</span></div><div class="line" id="025451"><span class="nick" style="color:#2e2a4a"><a href="#025451" label="[02:54:51]">&lt;stikonas&gt;</a></span><span class="message">anyway, we should be able to update binutils fairly easily</span></div><div class="line" id="025507"><span class="nick" style="color:#8dd3c7"><a href="#025507" label="[02:55:07]">&lt;pder&gt;</a></span><span class="message">Probably now, since you updated autoconf and automake</span></div><div class="line" id="025512"><span class="nick" style="color:#2e2a4a"><a href="#025512" label="[02:55:12]">&lt;stikonas&gt;</a></span><span class="message">with gcc and new autotools</span></div><div class="line" id="025517"><span class="nick" style="color:#2e2a4a"><a href="#025517" label="[02:55:17]">&lt;stikonas&gt;</a></span><span class="message">yes, I've got to autoconf 2.69</span></div><div class="line" id="025529"><span class="nick" style="color:#2e2a4a"><a href="#025529" label="[02:55:29]">&lt;stikonas&gt;</a></span><span class="message">2.71 is buildable but even modern distros don't ship use it yet</span></div><div class="line" id="025534"><span class="nick" style="color:#2e2a4a"><a href="#025534" label="[02:55:34]">&lt;stikonas&gt;</a></span><span class="message">and automake is at 2.11</span></div><div class="line" id="025543"><span class="nick" style="color:#2e2a4a"><a href="#025543" label="[02:55:43]">&lt;stikonas&gt;</a></span><span class="message">1.11</span></div><div class="line" id="025558"><span class="nick" style="color:#2e2a4a"><a href="#025558" label="[02:55:58]">&lt;stikonas&gt;</a></span><span class="message">I might be able to get newer automake (1.12 or newer)</span></div><div class="line" id="025933"><span class="nick" style="color:#8dd3c7"><a href="#025933" label="[02:59:33]">&lt;pder&gt;</a></span><span class="message">gcc 4.0.4 appears to be from 2007 and glibc 2.5 is from 2006- the most recent release before gcc</span></div><div class="line" id="030035"><span class="nick" style="color:#2e2a4a"><a href="#030035" label="[03:00:35]">&lt;stikonas&gt;</a></span><span class="message">oh, we also might want to update tar...</span></div><div class="line" id="030044"><span class="nick" style="color:#2e2a4a"><a href="#030044" label="[03:00:44]">&lt;stikonas&gt;</a></span><span class="message">althouth, maybe I should try to get newer automake first</span></div><div class="line" id="030048"><span class="nick" style="color:#2e2a4a"><a href="#030048" label="[03:00:48]">&lt;stikonas&gt;</a></span><span class="message">and then go for very new tar</span></div><div class="line" id="030239"><span class="nick" style="color:#2e2a4a"><a href="#030239" label="[03:02:39]">&lt;stikonas&gt;</a></span><span class="message">anyway, I think it will be much easier now</span></div><div class="line" id="030255"><span class="nick" style="color:#2e2a4a"><a href="#030255" label="[03:02:55]">&lt;stikonas&gt;</a></span><span class="message">we have a non-toy toolchain now</span></div><div class="line" id="035223"><span class="nick" style="color:#6b8072"><a href="#035223" label="[03:52:23]">&lt;OriansJ`&gt;</a></span><span class="message">well everything after GCC+Glibc is just a question of number of steps not a question of possibility.</span></div><div class="line" id="072829"><span class="nick" style="color:#80b1d3"><a href="#072829" label="[07:28:29]">&lt;gforce_d11977&gt;</a></span><span class="message">stikonas: fossy: i'am a bit further regarding the missing pieces for dirglobs, the kernel symbol CONFIG_UID16=y is needed - after building an i386 kernel it is now stuck at step59: autom4te-2.59: cannot lock autom4te.cache/requests with mode 2 (perhaps you are running make -j on a lame NFS client?): Function not implemend</span></div><div class="line" id="072920"><span class="nick" style="color:#80b1d3"><a href="#072920" label="[07:29:20]">&lt;gforce_d11977&gt;</a></span><span class="message">(but i know, that this is a kernel_knob also, just have to find it)</span></div><div class="line" id="074303"><span class="nick" style="color:#80b1d3"><a href="#074303" label="[07:43:03]">&lt;gforce_d11977&gt;</a></span><span class="message">OriansJ: thanks for clarifiaction, i where thinking that <a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds/blob/cfa108377c15382f58b20394150840e1099b6767/NATIVE/x86/stage0_monitor.img">https://github.com/oriansj/bootstrap-seeds/blob/cfa108377c15382f58b20394150840e1099b6767/NATIVE/x86/stage0_monitor.img</a>  is a full &quot;OS&quot;, but ofcourse it is 'only' the basic machine code monitor for typing in the first bits (written to a floppy disk image for convinience)</span></div><div class="line" id="082659"><span class="nick" style="color:#6d2462"><a href="#082659" label="[08:26:59]">&lt;fossy&gt;</a></span><span class="message">&lt;stikonas&gt; anyway, with gcc I have more hope in building guile, but I think fossy already started looking at it</span></div><div class="line" id="082722"><span class="nick" style="color:#6d2462"><a href="#082722" label="[08:27:22]">&lt;fossy&gt;</a></span><span class="message">not made too much progress n rebase to real gcc is easy</span></div><div class="line" id="084538"><span class="nick" style="color:#80b1d3"><a href="#084538" label="[08:45:38]">&lt;gforce_d11977&gt;</a></span><span class="message">bauen1: see message from 05:28: the symbol needed was CONFIG_UID16=y</span></div><div class="line" id="090131"><span class="nick" style="color:#80b1d3"><a href="#090131" label="[09:01:31]">&lt;gforce_d11977&gt;</a></span><span class="message">i just read, that the Nokia9000 comes with an i386 CPU and 8MB RAM 8-) <a rel="nofollow" href="https://en.wikipedia.org/wiki/Nokia_9000_Communicator">https://en.wikipedia.org/wiki/Nokia_9000_Communicator</a> </span></div><div class="line" id="092443"><span class="nick" style="color:#80b1d3"><a href="#092443" label="[09:24:43]">&lt;gforce_d11977&gt;</a></span><span class="message">also for future use: there are plenty of 386 machines out there with 128mb RAM (8 * 16mb 30-pin SIMM)</span></div><div class="line" id="121219"><span class="nick" style="color:#234e69"><a href="#121219" label="[12:12:19]">&lt;bauen1&gt;</a></span><span class="message">i've made <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/81">https://github.com/fosslinux/live-bootstrap/pull/81</a>  (just passed ci) to update the kernel version and make the bootstrap more robust if /dev is already populated</span></div><div class="line" id="121323"><span class="nick" style="color:#2e2a4a"><a href="#121323" label="[12:13:23]">&lt;stikonas&gt;</a></span><span class="message">bauen1: those changes to if are just syntax changes, aren't they? only last change is functional (remove /dev/console)</span></div><div class="line" id="121400"><span class="nick" style="color:#234e69"><a href="#121400" label="[12:14:00]">&lt;bauen1&gt;</a></span><span class="message">stikonas: not quite, using an if instead of an &amp;&amp; means that a failure of the test statement no longer stops the bootstrap</span></div><div class="line" id="121444"><span class="nick" style="color:#234e69"><a href="#121444" label="[12:14:44]">&lt;bauen1&gt;</a></span><span class="message">stikonas: this way if /dev was already populated before the bootstrap started (user namespace with bind mounts) things won't break due to failure to test if /dev/null is a file (it won't be</span></div><div class="line" id="121448"><span class="nick" style="color:#234e69"><a href="#121448" label="[12:14:48]">&lt;bauen1&gt;</a></span><span class="message">)</span></div><div class="line" id="121600"><span class="nick" style="color:#234e69"><a href="#121600" label="[12:16:00]">&lt;bauen1&gt;</a></span><span class="message">i still need to do a bit more testing before i can make a pr with my usernamespace setup (as currently the download / extraction clashes with --map-root-user of unshare)</span></div><div class="line" id="121618"><span class="nick" style="color:#2e2a4a"><a href="#121618" label="[12:16:18]">&lt;stikonas&gt;</a></span><span class="message">oh, I see, return code is changed</span></div><div class="line" id="121633"><span class="nick" style="color:#2e2a4a"><a href="#121633" label="[12:16:33]">&lt;stikonas&gt;</a></span><span class="message">when it is with &amp;&amp;</span></div><div class="line" id="121717"><span class="nick" style="color:#2e2a4a"><a href="#121717" label="[12:17:17]">&lt;stikonas&gt;</a></span><span class="message">ok, I'll test that PR later in the evening</span></div><div class="line" id="121726"><span class="nick" style="color:#234e69"><a href="#121726" label="[12:17:26]">&lt;bauen1&gt;</a></span><span class="message">maybe there's a way to keep them as one-liners, but it is easy to understand this way</span></div><div class="line" id="121751"><span class="nick" style="color:#2e2a4a"><a href="#121751" label="[12:17:51]">&lt;stikonas&gt;</a></span><span class="message">yeah, I don't mind if's just didn't realize return code is not the same</span></div><div class="line" id="125353"><span class="nick" style="color:#6c3d55"><a href="#125353" label="[12:53:53]">&lt;smartineng&gt;</a></span><span class="message">Hello, is there any list of software showing what is bootstrappable and what is not?</span></div><div class="line" id="125402"><span class="nick" style="color:#6c3d55"><a href="#125402" label="[12:54:02]">&lt;smartineng&gt;</a></span><span class="message">something similar to <a rel="nofollow" href="https://tests.reproducible-builds.org/debian/reproducible.html">https://tests.reproducible-builds.org/debian/reproducible.html</a> </span></div><div class="line" id="125502"><span class="nick" style="color:#234e69"><a href="#125502" label="[12:55:02]">&lt;bauen1&gt;</a></span><span class="message">smartineng: not that i'm aware of, but you can consider everything in the live-bootstrap project to be bootstrappable from a linux kernel + a minimal binary</span></div><div class="line" id="125552"><span class="nick" style="color:#234e69"><a href="#125552" label="[12:55:52]">&lt;bauen1&gt;</a></span><span class="message">or there for anything that can be build with just live-bootstrap as dependency</span></div><div class="line" id="125806"><span class="nick" style="color:#6c3d55"><a href="#125806" label="[12:58:06]">&lt;smartineng&gt;</a></span><span class="message">bauen1: what about guix, do they have exactly the same base of software like live-bootstrap?</span></div><div class="line" id="125927"><span class="nick" style="color:#234e69"><a href="#125927" label="[12:59:27]">&lt;bauen1&gt;</a></span><span class="message">smartineng: not yet, but i think the goals it for guix to be compiled from live-bootstrap, but there are still a few steps missing afaik (i think guile or whatever guix uses isn't quite solved yet, etc...)</span></div><div class="line" id="130125"><span class="nick" style="color:#2e2a4a"><a href="#130125" label="[13:01:25]">&lt;stikonas&gt;</a></span><span class="message">smartineng: guix has to depend on guile anyway</span></div><div class="line" id="130330"><span class="nick" style="color:#2e2a4a"><a href="#130330" label="[13:03:30]">&lt;stikonas&gt;</a></span><span class="message">there is some branch that makes guix use hex0 as a base, but it will still use guile for build orchestration</span></div><div class="line" id="130429"><span class="nick" style="color:#6c3d55"><a href="#130429" label="[13:04:29]">&lt;smartineng&gt;</a></span><span class="message">stikonas: I remember from fosdem conf that they've riched some milestone in bootstrappability but I've never seen any official announcement about it yet</span></div><div class="line" id="130432"><span class="nick" style="color:#2e2a4a"><a href="#130432" label="[13:04:32]">&lt;stikonas&gt;</a></span><span class="message">where as live-bootstrap uses kaem-optional-seed (737 bytes on x86) for orchestration</span></div><div class="line" id="130508"><span class="nick" style="color:#2e2a4a"><a href="#130508" label="[13:05:08]">&lt;stikonas&gt;</a></span><span class="message">smartineng: yes, that's 357 byte hex0 plus guile (I guess at least 12 MB)</span></div><div class="line" id="130537"><span class="nick" style="color:#2e2a4a"><a href="#130537" label="[13:05:37]">&lt;stikonas&gt;</a></span><span class="message">guile is mostly used as a orchestration driver though, it shouldn't affect binaries</span></div><div class="line" id="130549"><span class="nick" style="color:#2e2a4a"><a href="#130549" label="[13:05:49]">&lt;stikonas&gt;</a></span><span class="message">smartineng: although, live-bootstrap goes further in other aspects too</span></div><div class="line" id="130608"><span class="nick" style="color:#2e2a4a"><a href="#130608" label="[13:06:08]">&lt;stikonas&gt;</a></span><span class="message">use of pre-generated files is not allowed in live-bootstrap</span></div><div class="line" id="130702"><span class="nick" style="color:#2e2a4a"><a href="#130702" label="[13:07:02]">&lt;stikonas&gt;</a></span><span class="message">so no pre-gen bison parsers, lexers, no running of pre-packaged configure scripts or pre-packaged Makefile.in's</span></div><div class="line" id="130816"><span class="nick" style="color:#2e2a4a"><a href="#130816" label="[13:08:16]">&lt;stikonas&gt;</a></span><span class="message">smartineng: so this is roughly what guix does <a rel="nofollow" href="https://guix.gnu.org/manual/en/html_node/images/gcc-core-mesboot0-graph.png">https://guix.gnu.org/manual/en/html_node/images/gcc-core-mesboot0-graph.png</a>  (plus as you mentioned mes will go down to hex0 in that graph)</span></div><div class="line" id="130838"><span class="nick" style="color:#2e2a4a"><a href="#130838" label="[13:08:38]">&lt;stikonas&gt;</a></span><span class="message">smartineng: and this is roughly what live-bootstrap does <a rel="nofollow" href="https://github.com/oriansj/talk-notes/blob/master/live-bootstrap.pdf">https://github.com/oriansj/talk-notes/blob/master/live-bootstrap.pdf</a> </span></div><div class="line" id="131412"><span class="nick" style="color:#6c3d55"><a href="#131412" label="[13:14:12]">&lt;smartineng&gt;</a></span><span class="message">really cool thx</span></div><div class="line" id="131458"><span class="nick" style="color:#2e2a4a"><a href="#131458" label="[13:14:58]">&lt;stikonas&gt;</a></span><span class="message">well, I guess the main difference is that guix started as normal distro and were working down towards bootsrappability</span></div><div class="line" id="131508"><span class="nick" style="color:#2e2a4a"><a href="#131508" label="[13:15:08]">&lt;stikonas&gt;</a></span><span class="message">where as live-bootstrap is bottoms up and no intention to be distro</span></div><div class="line" id="131534"><span class="nick" style="color:#2e2a4a"><a href="#131534" label="[13:15:34]">&lt;stikonas&gt;</a></span><span class="message">so live-bootstrap can have stricter standards</span></div><div class="line" id="131629"><span class="nick" style="color:#6c3d55"><a href="#131629" label="[13:16:29]">&lt;smartineng&gt;</a></span><span class="message">stikonas: live-bootstrap theoretically could bootstrapp any linux distro</span></div><div class="line" id="131630"><span class="nick" style="color:#234e69"><a href="#131630" label="[13:16:30]">&lt;bauen1&gt;</a></span><span class="message">i'm also quire interested in bootstrapping debian from live-bootstrap (once a new-ish version of gcc is available that can compile gcc 10), but haven't tried anything yet</span></div><div class="line" id="131634"><span class="nick" style="color:#234e69"><a href="#131634" label="[13:16:34]">&lt;bauen1&gt;</a></span><span class="message">*quite</span></div><div class="line" id="131658"><span class="nick" style="color:#2e2a4a"><a href="#131658" label="[13:16:58]">&lt;stikonas&gt;</a></span><span class="message">smartineng: indeed</span></div><div class="line" id="131720"><span class="nick" style="color:#2e2a4a"><a href="#131720" label="[13:17:20]">&lt;stikonas&gt;</a></span><span class="message">smartineng: it's not there yet, but it would be nice to bootstrap a few distros</span></div><div class="line" id="131830"><span class="nick" style="color:#2e2a4a"><a href="#131830" label="[13:18:30]">&lt;stikonas&gt;</a></span><span class="message">of course once you start bootstrapping distros, standards of what is pre-build will have to be relaxed, e.g. we are not fixing debian's packaging not to use pre-gen stuff</span></div><div class="line" id="131847"><span class="nick" style="color:#2e2a4a"><a href="#131847" label="[13:18:47]">&lt;stikonas&gt;</a></span><span class="message">but that is then up-to distro to care or not</span></div><div class="line" id="131915"><span class="nick" style="color:#234e69"><a href="#131915" label="[13:19:15]">&lt;bauen1&gt;</a></span><span class="message">maybe you could get debian to move towards a non-cyclic dependency graph on architectures where live-bootstrap works</span></div><div class="line" id="131942"><span class="nick" style="color:#234e69"><a href="#131942" label="[13:19:42]">&lt;bauen1&gt;</a></span><span class="message">that could probably make many things a lot easier e.g. for cross building</span></div><div class="line" id="132830"><span class="nick" style="color:#234e69"><a href="#132830" label="[13:28:30]">&lt;bauen1&gt;</a></span><span class="message">if someone wants to play around with gnu stow 2.2.2 i've pushed my build script, so cherry-pick <a rel="nofollow" href="https://github.com/bauen1/live-bootstrap/commit/aebc91d8e45becda40f80cb77b57914c2271d461">https://github.com/bauen1/live-bootstrap/commit/aebc91d8e45becda40f80cb77b57914c2271d461</a> </span></div><div class="line" id="132951"><span class="nick" style="color:#234e69"><a href="#132951" label="[13:29:51]">&lt;bauen1&gt;</a></span><span class="message">i've downloaded my original copy of stow-2.2.2.tar.bz over https and it is pgp signed but i've been unable to find if it was signed with the right key, not sure what the standards are for this project</span></div><div class="line" id="134057"><span class="nick" style="color:#6b8072"><a href="#134057" label="[13:40:57]">&lt;OriansJ`&gt;</a></span><span class="message">smartineng: if you want bootstrapping without a kernel, stage0 exists to address that problem.</span></div><div class="line" id="134127"><span class="nick" style="color:#6b8072"><a href="#134127" label="[13:41:27]">&lt;OriansJ`&gt;</a></span><span class="message">and the lower stages</span></div><div class="line" id="134156"><span class="nick" style="color:#6b8072"><a href="#134156" label="[13:41:56]">&lt;OriansJ`&gt;</a></span><span class="message">have been made to work on BSDs as well (Ideally any POSIX kernel should work)</span></div><div class="line" id="134356"><span class="nick" style="color:#6b8072"><a href="#134356" label="[13:43:56]">&lt;OriansJ`&gt;</a></span><span class="message">porting to DOS and CPM just becomes a task of rewriting a 3 functions (read-byte, write-byte and malloc) which shouldn't be more than 20 assembly instructions per port</span></div><div class="line" id="134751"><span class="nick" style="color:#6c3d55"><a href="#134751" label="[13:47:51]">&lt;smartineng&gt;</a></span><span class="message">OriansJ`: amazing and in general what is minimal hardware requirement for each stages? How it evolve during building bigger blocks?</span></div><div class="line" id="134837"><span class="nick" style="color:#6c3d55"><a href="#134837" label="[13:48:37]">&lt;smartineng&gt;</a></span><span class="message">I have some FPGA dev board on my desk and I would like to play with it using your software</span></div><div class="line" id="135114"><span class="nick" style="color:#6b8072"><a href="#135114" label="[13:51:14]">&lt;OriansJ`&gt;</a></span><span class="message">smartineng: the hardware requirements for hex0 is an 8bit processor and (depending on instruction set) sub 300bytes of ROM and a single 4bits (RAM or Register) to store the first nibble when working.</span></div><div class="line" id="135213"><span class="nick" style="color:#6b8072"><a href="#135213" label="[13:52:13]">&lt;OriansJ`&gt;</a></span><span class="message">hex1 depending on the architecture needs support for 16 or 32bit registers and enough RAM to build the jump table of the program it is running.</span></div><div class="line" id="135316"><span class="nick" style="color:#6b8072"><a href="#135316" label="[13:53:16]">&lt;OriansJ`&gt;</a></span><span class="message">hex2 needs the ability work on 32bit values and enough ram to hold the jump table of the program it is processing.</span></div><div class="line" id="135407"><span class="nick" style="color:#6b8072"><a href="#135407" label="[13:54:07]">&lt;OriansJ`&gt;</a></span><span class="message">M0 can be done in an 8bit processor provided it has a large enough address space and RAM to store the DEFINEs it is applying.</span></div><div class="line" id="135450"><span class="nick" style="color:#6b8072"><a href="#135450" label="[13:54:50]">&lt;OriansJ`&gt;</a></span><span class="message">cc_* tends to need a 32bit register and enough RAM to store the entire program it is compiling and its generated output.</span></div><div class="line" id="135525"><span class="nick" style="color:#6b8072"><a href="#135525" label="[13:55:25]">&lt;OriansJ`&gt;</a></span><span class="message">M2-Planet tends to need a 32bit processor and 8-12MB of RAM to do cross-platform compiles</span></div><div class="line" id="135547"><span class="nick" style="color:#6b8072"><a href="#135547" label="[13:55:47]">&lt;OriansJ`&gt;</a></span><span class="message">mescc-tools tends to work just fine in 6-8MB of RAM.</span></div><div class="line" id="135620"><span class="nick" style="color:#6b8072"><a href="#135620" label="[13:56:20]">&lt;OriansJ`&gt;</a></span><span class="message">mes needs 1-2GB of RAM to run MesCC</span></div><div class="line" id="135710"><span class="nick" style="color:#6b8072"><a href="#135710" label="[13:57:10]">&lt;OriansJ`&gt;</a></span><span class="message">and then the memory requirements tend to grow towards 8GB for the various pieces used.</span></div><div class="line" id="135809"><span class="nick" style="color:#6b8072"><a href="#135809" label="[13:58:09]">&lt;OriansJ`&gt;</a></span><span class="message">but a 32bit or larger register size will be sufficient to bootstrap to the level required to cross-verify any other hardware architecture.</span></div><div class="line" id="135847"><span class="nick" style="color:#6b8072"><a href="#135847" label="[13:58:47]">&lt;OriansJ`&gt;</a></span><span class="message">as once one has M2-Planet+MesCC tools, the rest is just C code and a pinch of Assembly.</span></div><div class="line" id="140024"><span class="nick" style="color:#6c3d55"><a href="#140024" label="[14:00:24]">&lt;smartineng&gt;</a></span><span class="message">I have this board <a rel="nofollow" href="https://radiona.org/ulx3s/">https://radiona.org/ulx3s/</a>  so I can reach max mescc-tools on it, which sounds fun anyway  :)</span></div><div class="line" id="140045"><span class="nick" style="color:#6b8072"><a href="#140045" label="[14:00:45]">&lt;OriansJ`&gt;</a></span><span class="message">nice</span></div><div class="line" id="162218"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado_</span></div><div class="line" id="173938"><span class="nick">***</span><span class="message notice">bauen1_ is now known as bauen1</span></div><div class="line" id="194828"><span class="nick">***</span><span class="message notice">Noisytoot is now known as []{}\|^`-</span></div><div class="line" id="195107"><span class="nick">***</span><span class="message notice">[]{}\|^`- is now known as Noisytoot</span></div><div class="line" id="195354"><span class="nick">***</span><span class="message notice">Noisytoot is now known as ||||||</span></div><div class="line" id="195423"><span class="nick">***</span><span class="message notice">|||||| is now known as Guest7851</span></div><div class="line" id="195833"><span class="nick">***</span><span class="message notice">Guest7851 is now known as Noisytoot</span></div><div class="line" id="203914"><span class="nick" style="color:#8dd3c7"><a href="#203914" label="[20:39:14]">&lt;pder&gt;</a></span><span class="message">OriansJ: do you know if M2-Planet, M2libc and mescc-tools are in a state where it makes sense to update mescc-tools-seed?</span></div><div class="line" id="213230"><span class="nick" style="color:#8dd3c7"><a href="#213230" label="[21:32:30]">&lt;pder&gt;</a></span><span class="message">stikonas: setting archname and osvers to empty strings in sysa/perl-5.6.2/files/config.sh appears to fix the perl Errno.pm line 11 warning</span></div><div class="line" id="213254"><span class="nick" style="color:#8dd3c7"><a href="#213254" label="[21:32:54]">&lt;pder&gt;</a></span><span class="message">If you run perl -V there are still quite a few things undefined, but I am not sure it matters</span></div><div class="line" id="213308"><span class="nick" style="color:#8dd3c7"><a href="#213308" label="[21:33:08]">&lt;pder&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1191853/">https://paste.debian.net/1191853/</a> </span></div><div class="line" id="230156"><span class="nick" style="color:#d9d9d9"><a href="#230156" label="[23:01:56]">&lt;stikonas_&gt;</a></span><span class="message">pder: oh good, are you making PR?</span></div><div class="line" id="230317"><span class="nick">***</span><span class="message notice">stikonas_ is now known as stikonas</span></div><div class="line" id="230524"><span class="nick" style="color:#8dd3c7"><a href="#230524" label="[23:05:24]">&lt;pder&gt;</a></span><span class="message">yes, will do</span></div><div class="line" id="230635"><span class="nick" style="color:#bc80bd"><a href="#230635" label="[23:06:35]">&lt;gef&gt;</a></span><span class="message">fyi. this &quot;tl;dr&quot; email is mine and here's my nick, in case there is any quick question! <a rel="nofollow" href="https://www.freelists.org/post/bootstrappable/The-jenga-of-build-tools-and-their-environments-endtoend-cicd-pipelining">https://www.freelists.org/post/bootstrappable/The-jenga-of-build-tools-and-their-environments-endtoend-cicd-pipelining</a> </span></div><div class="line" id="230704"><span class="nick">***</span><span class="message notice">Noisytoot is now known as ihatecoronaandih</span></div><div class="line" id="230723"><span class="nick">***</span><span class="message notice">ihatecoronaandih is now known as Noisytoot</span></div><div class="line" id="230806"><span class="nick" style="color:#234e69"><a href="#230806" label="[23:08:06]">&lt;bauen1&gt;</a></span><span class="message">do we demand chroot support of the seed kernel or only after we've build our own linux ?</span></div><div class="line" id="230817"><span class="nick" style="color:#234e69"><a href="#230817" label="[23:08:17]">&lt;bauen1&gt;</a></span><span class="message">or rather do we have chroot in sysa or only in sysb ?</span></div><div class="line" id="230915"><span class="nick">***</span><span class="message notice">lukedashjr is now known as luke-jr</span></div><div class="line" id="231542"><span class="nick" style="color:#2e2a4a"><a href="#231542" label="[23:15:42]">&lt;stikonas&gt;</a></span><span class="message">bauen1: interestingly even after you PR, qemu has /dev/console</span></div><div class="line" id="231549"><span class="nick" style="color:#2e2a4a"><a href="#231549" label="[23:15:49]">&lt;stikonas&gt;</a></span><span class="message">I guess it's created dynamically at some point</span></div><div class="line" id="231624"><span class="nick" style="color:#2e2a4a"><a href="#231624" label="[23:16:24]">&lt;stikonas&gt;</a></span><span class="message">bauen1: as for chroot, I guess the plan is eventually everything from bash is on new kernel</span></div><div class="line" id="231630"><span class="nick" style="color:#2e2a4a"><a href="#231630" label="[23:16:30]">&lt;stikonas&gt;</a></span><span class="message">or even a bit earlier</span></div><div class="line" id="231656"><span class="nick" style="color:#2e2a4a"><a href="#231656" label="[23:16:56]">&lt;stikonas&gt;</a></span><span class="message">probably after make</span></div><div class="line" id="231729"><span class="nick" style="color:#2e2a4a"><a href="#231729" label="[23:17:29]">&lt;stikonas&gt;</a></span><span class="message">although, we need to build coreutils for chroot anyway</span></div><div class="line" id="231745"><span class="nick" style="color:#2e2a4a"><a href="#231745" label="[23:17:45]">&lt;stikonas&gt;</a></span><span class="message">and I'm not sure if that can be done with mes</span></div><div class="line" id="231827"><span class="nick" style="color:#2e2a4a"><a href="#231827" label="[23:18:27]">&lt;stikonas&gt;</a></span><span class="message">in which case you would have to wait for coreutils rebuild</span></div><div class="line" id="231852"><span class="nick" style="color:#234e69"><a href="#231852" label="[23:18:52]">&lt;bauen1&gt;</a></span><span class="message">stikonas: have we built perl at that point ? because perl has a chroot function that could be used instead</span></div><div class="line" id="231906"><span class="nick" style="color:#2e2a4a"><a href="#231906" label="[23:19:06]">&lt;stikonas&gt;</a></span><span class="message">gef: I myself don't mind moving everything into a single &quot;organization&quot; on gitlab, but I guess we need to ask others too</span></div><div class="line" id="231916"><span class="nick" style="color:#2e2a4a"><a href="#231916" label="[23:19:16]">&lt;stikonas&gt;</a></span><span class="message">bauen1: no, perl is later</span></div><div class="line" id="231924"><span class="nick" style="color:#2e2a4a"><a href="#231924" label="[23:19:24]">&lt;stikonas&gt;</a></span><span class="message">perl is just before autotools</span></div><div class="line" id="231931"><span class="nick" style="color:#234e69"><a href="#231931" label="[23:19:31]">&lt;bauen1&gt;</a></span><span class="message">well upkg won't work until perl is build for now</span></div><div class="line" id="231959"><span class="nick" style="color:#2e2a4a"><a href="#231959" label="[23:19:59]">&lt;stikonas&gt;</a></span><span class="message">actually, there are just a couple of steps between coreutils rebuild and perl</span></div><div class="line" id="232007"><span class="nick" style="color:#3c5b35"><a href="#232007" label="[23:20:07]">&lt;fosslinux&gt;</a></span><span class="message">¿</span></div><div class="line" id="232015"><span class="nick">***</span><span class="message notice">fosslinux is now known as fossy</span></div><div class="line" id="232026"><span class="nick" style="color:#6d2462"><a href="#232026" label="[23:20:26]">&lt;fossy&gt;</a></span><span class="message">&lt;bauen1&gt; do we demand chroot support of the seed kernel or only after we've build our own linux ?</span></div><div class="line" id="232038"><span class="nick" style="color:#6d2462"><a href="#232038" label="[23:20:38]">&lt;fossy&gt;</a></span><span class="message">we do not demand chroot support in the seed kernel</span></div><div class="line" id="232045"><span class="nick" style="color:#6d2462"><a href="#232045" label="[23:20:45]">&lt;fossy&gt;</a></span><span class="message">I also dont see where it would go</span></div><div class="line" id="232104"><span class="nick" style="color:#2e2a4a"><a href="#232104" label="[23:21:04]">&lt;stikonas&gt;</a></span><span class="message">fossy: I think bauen1 whats it for building packages in isolated environment</span></div><div class="line" id="232105"><span class="nick" style="color:#234e69"><a href="#232105" label="[23:21:05]">&lt;bauen1&gt;</a></span><span class="message">fossy: mostly for building things in a chroot, something i'm experimenting right now</span></div><div class="line" id="232110"><span class="nick" style="color:#6d2462"><a href="#232110" label="[23:21:10]">&lt;fossy&gt;</a></span><span class="message">oh</span></div><div class="line" id="232112"><span class="nick" style="color:#2e2a4a"><a href="#232112" label="[23:21:12]">&lt;stikonas&gt;</a></span><span class="message">so that we know what depends on what</span></div><div class="line" id="232122"><span class="nick" style="color:#6d2462"><a href="#232122" label="[23:21:22]">&lt;fossy&gt;</a></span><span class="message">I dont mind it</span></div><div class="line" id="232128"><span class="nick" style="color:#6d2462"><a href="#232128" label="[23:21:28]">&lt;fossy&gt;</a></span><span class="message">But I also dont see the utility of it</span></div><div class="line" id="232139"><span class="nick" style="color:#234e69"><a href="#232139" label="[23:21:39]">&lt;bauen1&gt;</a></span><span class="message">but given how upkg currently uses stow so it requires perl (until i entertain the idea of rewriting stow in C)</span></div><div class="line" id="232143"><span class="nick" style="color:#6d2462"><a href="#232143" label="[23:21:43]">&lt;fossy&gt;</a></span><span class="message">We are in an environment where we know exactly what is what</span></div><div class="line" id="232250"><span class="nick" style="color:#2e2a4a"><a href="#232250" label="[23:22:50]">&lt;stikonas&gt;</a></span><span class="message">maybe something with bash is then easier?</span></div><div class="line" id="232259"><span class="nick" style="color:#2e2a4a"><a href="#232259" label="[23:22:59]">&lt;stikonas&gt;</a></span><span class="message">that would be available a bit earlier...\</span></div><div class="line" id="232313"><span class="nick" style="color:#2e2a4a"><a href="#232313" label="[23:23:13]">&lt;stikonas&gt;</a></span><span class="message">I haven't thought much about &quot;packaging&quot; though...</span></div><div class="line" id="232315"><span class="nick" style="color:#234e69"><a href="#232315" label="[23:23:15]">&lt;bauen1&gt;</a></span><span class="message">fossy: it's mostly so you can move pieces around more easily, you have a clear list of dependencies, and the build should only be influenced by those</span></div><div class="line" id="232318"><span class="nick" style="color:#2e2a4a"><a href="#232318" label="[23:23:18]">&lt;stikonas&gt;</a></span><span class="message">been busy with gcc and autotools</span></div><div class="line" id="232357"><span class="nick" style="color:#6d2462"><a href="#232357" label="[23:23:57]">&lt;fossy&gt;</a></span><span class="message">bauen1: I guess it increases clarity to an extent.</span></div><div class="line" id="232449"><span class="nick" style="color:#234e69"><a href="#232449" label="[23:24:49]">&lt;bauen1&gt;</a></span><span class="message">you can also enforce certain things like a matching SHA256 sums for every file in the package, can include all SHA256 sums of the dependencies in the resulting &quot;pseudo package&quot; etc...</span></div><div class="line" id="232501"><span class="nick" style="color:#234e69"><a href="#232501" label="[23:25:01]">&lt;bauen1&gt;</a></span><span class="message">you can already do most of these things with helper.sh if you're careful</span></div><div class="line" id="232505"><span class="nick" style="color:#2e2a4a"><a href="#232505" label="[23:25:05]">&lt;stikonas&gt;</a></span><span class="message">yeah, automatic SHA256sums (or other hash) would be useful</span></div><div class="line" id="232521"><span class="nick" style="color:#2e2a4a"><a href="#232521" label="[23:25:21]">&lt;stikonas&gt;</a></span><span class="message">it's getting a bit harder to checksum stuff when we have multiple installed files</span></div><div class="line" id="232544"><span class="nick" style="color:#2e2a4a"><a href="#232544" label="[23:25:44]">&lt;stikonas&gt;</a></span><span class="message">yeah, helpers.sh can be indeed written to do that too</span></div><div class="line" id="232632"><span class="nick" style="color:#2e2a4a"><a href="#232632" label="[23:26:32]">&lt;stikonas&gt;</a></span><span class="message">well, automatic sha256sum and possibility to remove package</span></div><div class="line" id="232711"><span class="nick" style="color:#2e2a4a"><a href="#232711" label="[23:27:11]">&lt;stikonas&gt;</a></span><span class="message">but building with just required dependencies is probably easier with stow?</span></div><div class="line" id="232733"><span class="nick" style="color:#234e69"><a href="#232733" label="[23:27:33]">&lt;bauen1&gt;</a></span><span class="message">i'm just using stow for now as writing fragile shell scripts isn't something i fancy, but it doesn't make use of many advanced features so a `find` and `ln` construct could probably do the job good enough</span></div><div class="line" id="232740"><span class="nick" style="color:#2e2a4a"><a href="#232740" label="[23:27:40]">&lt;stikonas&gt;</a></span><span class="message">although, it's not completely clear to me how will we start with dependencies</span></div><div class="line" id="232752"><span class="nick" style="color:#234e69"><a href="#232752" label="[23:27:52]">&lt;bauen1&gt;</a></span><span class="message">stikonas: stow is just for symlinking all the things in the right place</span></div><div class="line" id="232753"><span class="nick" style="color:#2e2a4a"><a href="#232753" label="[23:27:53]">&lt;stikonas&gt;</a></span><span class="message">when we build first packages, there won't be any packages to include...</span></div><div class="line" id="232810"><span class="nick" style="color:#2e2a4a"><a href="#232810" label="[23:28:10]">&lt;stikonas&gt;</a></span><span class="message">we'll have to manually &quot;define&quot; stuff that was installed earlier</span></div><div class="line" id="232812"><span class="nick" style="color:#2e2a4a"><a href="#232812" label="[23:28:12]">&lt;stikonas&gt;</a></span><span class="message">e.g. tar</span></div><div class="line" id="232815"><span class="nick" style="color:#234e69"><a href="#232815" label="[23:28:15]">&lt;bauen1&gt;</a></span><span class="message">yes</span></div><div class="line" id="232826"><span class="nick" style="color:#234e69"><a href="#232826" label="[23:28:26]">&lt;bauen1&gt;</a></span><span class="message">but after that it should be smooth sailing</span></div><div class="line" id="232834"><span class="nick" style="color:#2e2a4a"><a href="#232834" label="[23:28:34]">&lt;stikonas&gt;</a></span><span class="message">that shouldn't be too hard since most of the early packages install few files</span></div><div class="line" id="232839"><span class="nick" style="color:#2e2a4a"><a href="#232839" label="[23:28:39]">&lt;stikonas&gt;</a></span><span class="message">often just 1</span></div><div class="line" id="233004"><span class="nick" style="color:#234e69"><a href="#233004" label="[23:30:04]">&lt;bauen1&gt;</a></span><span class="message">oh and another aspect was making the bootstrap easier to develop for, then you can tar up parts of the package directory and start from the point where upkg can work and let it skip things it already has</span></div><div class="line" id="233123"><span class="nick" style="color:#2e2a4a"><a href="#233123" label="[23:31:23]">&lt;stikonas&gt;</a></span><span class="message">yeah, that might be helpful...</span></div><div class="line" id="233136"><span class="nick" style="color:#2e2a4a"><a href="#233136" label="[23:31:36]">&lt;stikonas&gt;</a></span><span class="message">builds are getting long</span></div><div class="line" id="233140"><span class="nick" style="color:#234e69"><a href="#233140" label="[23:31:40]">&lt;bauen1&gt;</a></span><span class="message">all in all upkg is just a glorified wrapper around stow, chroot, tar and a few other utilities</span></div><div class="line" id="233143"><span class="nick" style="color:#234e69"><a href="#233143" label="[23:31:43]">&lt;bauen1&gt;</a></span><span class="message">*will be</span></div><div class="line" id="233152"><span class="nick" style="color:#2e2a4a"><a href="#233152" label="[23:31:52]">&lt;stikonas&gt;</a></span><span class="message">and with gcc they will only grow longer because gcc is quite a bit slower than tcc</span></div><div class="line" id="233207"><span class="nick" style="color:#2e2a4a"><a href="#233207" label="[23:32:07]">&lt;stikonas&gt;</a></span><span class="message">unless we compile with -O0 but it's still slower than tcc</span></div><div class="line" id="233550"><span class="nick" style="color:#bc80bd"><a href="#233550" label="[23:35:50]">&lt;gef&gt;</a></span><span class="message">stikonas: &quot;builds are getting long&quot; ... this is where using a bit of containers (during the development effort) would be of help: previously build images are cached and that saves time</span></div><div class="line" id="233627"><span class="nick" style="color:#234e69"><a href="#233627" label="[23:36:27]">&lt;bauen1&gt;</a></span><span class="message">another reason why i'm asking about chroot, how about making sysa after sysb and chroot into it instead ?</span></div><div class="line" id="233638"><span class="nick" style="color:#2e2a4a"><a href="#233638" label="[23:36:38]">&lt;stikonas&gt;</a></span><span class="message">not sure if it's easy to do it via containers...</span></div><div class="line" id="233647"><span class="nick" style="color:#2e2a4a"><a href="#233647" label="[23:36:47]">&lt;stikonas&gt;</a></span><span class="message">we can't use Dockerfile inside bootstrap itself</span></div><div class="line" id="233651"><span class="nick" style="color:#234e69"><a href="#233651" label="[23:36:51]">&lt;bauen1&gt;</a></span><span class="message">i mean we don#t have chroot in sysa before but that could be solved someway</span></div><div class="line" id="233658"><span class="nick" style="color:#bc80bd"><a href="#233658" label="[23:36:58]">&lt;gef&gt;</a></span><span class="message">stikonas: &quot;don't mind moving everything into a single organization on gitlab&quot;: not organization, rather group - and nothing really &quot;moves&quot;, since that is just an extra service really</span></div><div class="line" id="233718"><span class="nick" style="color:#2e2a4a"><a href="#233718" label="[23:37:18]">&lt;stikonas&gt;</a></span><span class="message">well, I mean you need to move project from github to gitlab, don't you?</span></div><div class="line" id="233741"><span class="nick" style="color:#bc80bd"><a href="#233741" label="[23:37:41]">&lt;gef&gt;</a></span><span class="message">stikonas: no need for that, you can mirror them!</span></div><div class="line" id="233837"><span class="nick" style="color:#2e2a4a"><a href="#233837" label="[23:38:37]">&lt;stikonas&gt;</a></span><span class="message">well, but gitlab's CI/CD is not suitable for live-bootstrap</span></div><div class="line" id="233847"><span class="nick" style="color:#2e2a4a"><a href="#233847" label="[23:38:47]">&lt;stikonas&gt;</a></span><span class="message">we run a VM there</span></div><div class="line" id="233857"><span class="nick" style="color:#2e2a4a"><a href="#233857" label="[23:38:57]">&lt;stikonas&gt;</a></span><span class="message">and on gitlab we won't have nested kvm</span></div><div class="line" id="233910"><span class="nick" style="color:#bc80bd"><a href="#233910" label="[23:39:10]">&lt;gef&gt;</a></span><span class="message">if qemu does it, `bootstrappable` should be able, too :)</span></div><div class="line" id="233932"><span class="nick" style="color:#2e2a4a"><a href="#233932" label="[23:39:32]">&lt;stikonas&gt;</a></span><span class="message">it's not a question of can it, but how fast</span></div><div class="line" id="233938"><span class="nick" style="color:#2e2a4a"><a href="#233938" label="[23:39:38]">&lt;stikonas&gt;</a></span><span class="message">if it can do it in 30hours, it's not good</span></div><div class="line" id="233951"><span class="nick" style="color:#2e2a4a"><a href="#233951" label="[23:39:51]">&lt;stikonas&gt;</a></span><span class="message">without kvm, qemu will run approximately 20 times slower</span></div><div class="line" id="234003"><span class="nick" style="color:#bc80bd"><a href="#234003" label="[23:40:03]">&lt;gef&gt;</a></span><span class="message">we can have our own runners, use them as jump hosts to ssh or whatever, there is some freedom</span></div><div class="line" id="234037"><span class="nick" style="color:#2e2a4a"><a href="#234037" label="[23:40:37]">&lt;stikonas&gt;</a></span><span class="message">well, our own runners would work there</span></div><div class="line" id="234038"><span class="nick" style="color:#2e2a4a"><a href="#234038" label="[23:40:38]">&lt;stikonas&gt;</a></span><span class="message">that's true</span></div><div class="line" id="234048"><span class="nick" style="color:#2e2a4a"><a href="#234048" label="[23:40:48]">&lt;stikonas&gt;</a></span><span class="message">but somebody would have to provide them</span></div><div class="line" id="234403"><span class="nick" style="color:#bc80bd"><a href="#234403" label="[23:44:03]">&lt;gef&gt;</a></span><span class="message">who provides the current VM?</span></div><div class="line" id="234552"><span class="nick" style="color:#2e2a4a"><a href="#234552" label="[23:45:52]">&lt;stikonas&gt;</a></span><span class="message">cirrus ci</span></div><div class="line" id="234559"><span class="nick" style="color:#2e2a4a"><a href="#234559" label="[23:45:59]">&lt;stikonas&gt;</a></span><span class="message">they provide free vms</span></div><div class="line" id="234631"><span class="nick" style="color:#2e2a4a"><a href="#234631" label="[23:46:31]">&lt;stikonas&gt;</a></span><span class="message">well, the alternative would be not to run qemu but run CI in chroot mode...</span></div><br /></div></body></html>