<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-02-08.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000015"><span class="nick" style="color:#389600"><a href="#000015" label="[00:00:15]">&lt;oriansj&gt;</a></span><span class="message">possibly; would take alot of digging</span></div><div class="line" id="000428"><span class="nick" style="color:#8dd3c7"><a href="#000428" label="[00:04:28]">&lt;dddddd&gt;</a></span><span class="message">scm is your friend</span></div><div class="line" id="000740"><span class="nick" style="color:#389600"><a href="#000740" label="[00:07:40]">&lt;oriansj&gt;</a></span><span class="message">and a hell of alot of work</span></div><div class="line" id="000821"><span class="nick" style="color:#389600"><a href="#000821" label="[00:08:21]">&lt;oriansj&gt;</a></span><span class="message">right now at 3396lines of code and counting</span></div><div class="line" id="000841"><span class="nick" style="color:#2e2a4a"><a href="#000841" label="[00:08:41]">&lt;fossy&gt;</a></span><span class="message">what is at 3396loc?</span></div><div class="line" id="000930"><span class="nick" style="color:#389600"><a href="#000930" label="[00:09:30]">&lt;oriansj&gt;</a></span><span class="message">mes-m2 right now</span></div><div class="line" id="000940"><span class="nick" style="color:#389600"><a href="#000940" label="[00:09:40]">&lt;oriansj&gt;</a></span><span class="message">(not counting imported functions)</span></div><div class="line" id="001026"><span class="nick" style="color:#2e2a4a"><a href="#001026" label="[00:10:26]">&lt;fossy&gt;</a></span><span class="message">ahh</span></div><div class="line" id="001030"><span class="nick" style="color:#2e2a4a"><a href="#001030" label="[00:10:30]">&lt;fossy&gt;</a></span><span class="message">guile is so weird</span></div><div class="line" id="001031"><span class="nick" style="color:#2e2a4a"><a href="#001031" label="[00:10:31]">&lt;fossy&gt;</a></span><span class="message">wtf</span></div><div class="line" id="001040"><span class="nick" style="color:#2e2a4a"><a href="#001040" label="[00:10:40]">&lt;fossy&gt;</a></span><span class="message">why the hell does</span></div><div class="line" id="001044"><span class="nick" style="color:#2e2a4a"><a href="#001044" label="[00:10:44]">&lt;fossy&gt;</a></span><span class="message">./configure --enable-static=yes --enable-shared=no</span></div><div class="line" id="001051"><span class="nick" style="color:#2e2a4a"><a href="#001051" label="[00:10:51]">&lt;fossy&gt;</a></span><span class="message">end up as</span></div><div class="line" id="001053"><span class="nick" style="color:#2e2a4a"><a href="#001053" label="[00:10:53]">&lt;fossy&gt;</a></span><span class="message">libguile/guile: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=e28ab7a1930166167cab0d0a4e71e3f63e4abbc4, for GNU/Linux 3.2.0, with debug_info, not stripped</span></div><div class="line" id="001206"><span class="nick" style="color:#389600"><a href="#001206" label="[00:12:06]">&lt;oriansj&gt;</a></span><span class="message">a better question why bother with autotools when freaking bootstrapping?</span></div><div class="line" id="001258"><span class="nick" style="color:#389600"><a href="#001258" label="[00:12:58]">&lt;oriansj&gt;</a></span><span class="message">It is like an elementry school teacher telling you that they always wear a condom in class...</span></div><div class="line" id="001301"><span class="nick" style="color:#2e2a4a"><a href="#001301" label="[00:13:01]">&lt;fossy&gt;</a></span><span class="message">because we need guile for the boostrap right now?</span></div><div class="line" id="001349"><span class="nick" style="color:#389600"><a href="#001349" label="[00:13:49]">&lt;oriansj&gt;</a></span><span class="message">fossy: you can pregenerate the build flags when bootstrapping</span></div><div class="line" id="001422"><span class="nick" style="color:#2e2a4a"><a href="#001422" label="[00:14:22]">&lt;fossy&gt;</a></span><span class="message">well all i am trying to do is get a statically linked guile binary seed</span></div><div class="line" id="001433"><span class="nick" style="color:#389600"><a href="#001433" label="[00:14:33]">&lt;oriansj&gt;</a></span><span class="message">aka, gcc foo.c ... -o foo is rather trivial when you know gcc is going to freaking be there</span></div><div class="line" id="001441"><span class="nick" style="color:#2e2a4a"><a href="#001441" label="[00:14:41]">&lt;fossy&gt;</a></span><span class="message">oh yeah</span></div><div class="line" id="001511"><span class="nick" style="color:#2e2a4a"><a href="#001511" label="[00:15:11]">&lt;fossy&gt;</a></span><span class="message">but idk what gcc foo.c .... -o foo is right now</span></div><div class="line" id="001517"><span class="nick" style="color:#2e2a4a"><a href="#001517" label="[00:15:17]">&lt;fossy&gt;</a></span><span class="message">but that is probably what i will end up having to do</span></div><div class="line" id="001527"><span class="nick" style="color:#389600"><a href="#001527" label="[00:15:27]">&lt;oriansj&gt;</a></span><span class="message">indeed</span></div><div class="line" id="001543"><span class="nick" style="color:#2e2a4a"><a href="#001543" label="[00:15:43]">&lt;fossy&gt;</a></span><span class="message">rather than trying to deal with freaking autotools</span></div><div class="line" id="001548"><span class="nick" style="color:#2e2a4a"><a href="#001548" label="[00:15:48]">&lt;fossy&gt;</a></span><span class="message">even mes wasn't this bad</span></div><div class="line" id="001555"><span class="nick" style="color:#2e2a4a"><a href="#001555" label="[00:15:55]">&lt;fossy&gt;</a></span><span class="message">and i was using autotools for that</span></div><div class="line" id="001610"><span class="nick" style="color:#389600"><a href="#001610" label="[00:16:10]">&lt;oriansj&gt;</a></span><span class="message">fossy: mes also has a build script</span></div><div class="line" id="001615"><span class="nick" style="color:#2e2a4a"><a href="#001615" label="[00:16:15]">&lt;fossy&gt;</a></span><span class="message">yes, true</span></div><div class="line" id="001631"><span class="nick" style="color:#389600"><a href="#001631" label="[00:16:31]">&lt;oriansj&gt;</a></span><span class="message">I know because I wrote it when trying to build mes.c with gcc</span></div><div class="line" id="001702"><span class="nick" style="color:#2e2a4a"><a href="#001702" label="[00:17:02]">&lt;fossy&gt;</a></span><span class="message">o.O</span></div><div class="line" id="001704"><span class="nick" style="color:#2e2a4a"><a href="#001704" label="[00:17:04]">&lt;fossy&gt;</a></span><span class="message">lol</span></div><div class="line" id="001919"><span class="nick" style="color:#389600"><a href="#001919" label="[00:19:19]">&lt;oriansj&gt;</a></span><span class="message">what was really a kick in the teeth was when I finally made mes.c buildable via gcc; it exploded from &quot;500 lines of simple C&quot; to 4726lines of macro heavy C (not even counting the functions imported)</span></div><div class="line" id="002131"><span class="nick" style="color:#389600"><a href="#002131" label="[00:21:31]">&lt;oriansj&gt;</a></span><span class="message">boy did snarfing hide alot of sins</span></div><div class="line" id="002345"><span class="nick" style="color:#2e2a4a"><a href="#002345" label="[00:23:45]">&lt;fossy&gt;</a></span><span class="message">wait what</span></div><div class="line" id="002400"><span class="nick" style="color:#2e2a4a"><a href="#002400" label="[00:24:00]">&lt;fossy&gt;</a></span><span class="message">what made it explode like that?!</span></div><div class="line" id="002435"><span class="nick" style="color:#389600"><a href="#002435" label="[00:24:35]">&lt;oriansj&gt;</a></span><span class="message">mes.c depended upon snarfing to build</span></div><div class="line" id="002528"><span class="nick" style="color:#8dd3c7"><a href="#002528" label="[00:25:28]">&lt;dddddd&gt;</a></span><span class="message">oriansj, All tests pass here. Feel free to test and cherry-pick this commit from my M2-Planet repo: &quot;aarch64: do not generate a wasteful stack anymore&quot; b2ece54864fc535f60e93d66561149d966374618</span></div><div class="line" id="002530"><span class="nick" style="color:#389600"><a href="#002530" label="[00:25:30]">&lt;oriansj&gt;</a></span><span class="message">snarfing converted it into a much larger program with lots of expansion done</span></div><div class="line" id="002636"><span class="nick" style="color:#2e2a4a"><a href="#002636" label="[00:26:36]">&lt;fossy&gt;</a></span><span class="message">ah</span></div><div class="line" id="002650"><span class="nick" style="color:#389600"><a href="#002650" label="[00:26:50]">&lt;oriansj&gt;</a></span><span class="message">It is one of the reasons I abandoned mes.c; too much wasn't written by human hands</span></div><div class="line" id="002852"><span class="nick" style="color:#389600"><a href="#002852" label="[00:28:52]">&lt;oriansj&gt;</a></span><span class="message">dddddd: all tests pass here too</span></div><div class="line" id="002906"><span class="nick" style="color:#389600"><a href="#002906" label="[00:29:06]">&lt;oriansj&gt;</a></span><span class="message">merging and uploading shortly</span></div><div class="line" id="002921"><span class="nick" style="color:#8dd3c7"><a href="#002921" label="[00:29:21]">&lt;dddddd&gt;</a></span><span class="message">great, no hurry. Thanks.</span></div><div class="line" id="002945"><span class="nick" style="color:#389600"><a href="#002945" label="[00:29:45]">&lt;oriansj&gt;</a></span><span class="message">dddddd: no, thank you for improving M2-Planet ^_^</span></div><div class="line" id="003926"><span class="nick" style="color:#2e2a4a"><a href="#003926" label="[00:39:26]">&lt;fossy&gt;</a></span><span class="message">i hate autotools</span></div><div class="line" id="003928"><span class="nick" style="color:#2e2a4a"><a href="#003928" label="[00:39:28]">&lt;fossy&gt;</a></span><span class="message">i hate libtool</span></div><div class="line" id="003933"><span class="nick" style="color:#2e2a4a"><a href="#003933" label="[00:39:33]">&lt;fossy&gt;</a></span><span class="message">why are build systems so crappy</span></div><div class="line" id="003935"><span class="nick" style="color:#2e2a4a"><a href="#003935" label="[00:39:35]">&lt;fossy&gt;</a></span><span class="message">ugh</span></div><div class="line" id="003946"><span class="nick" style="color:#80b1d3"><a href="#003946" label="[00:39:46]">*</a></span><span class="message">fossy ..|..</span></div><div class="line" id="004000"><span class="nick" style="color:#2e2a4a"><a href="#004000" label="[00:40:00]">&lt;fossy&gt;</a></span><span class="message">(at autotools/libtool)</span></div><div class="line" id="004220"><span class="nick" style="color:#389600"><a href="#004220" label="[00:42:20]">&lt;oriansj&gt;</a></span><span class="message">fossy: because they are designed to forgive bad platforms of their sins</span></div><div class="line" id="004229"><span class="nick" style="color:#2e2a4a"><a href="#004229" label="[00:42:29]">&lt;fossy&gt;</a></span><span class="message">lmao</span></div><div class="line" id="004302"><span class="nick" style="color:#389600"><a href="#004302" label="[00:43:02]">&lt;oriansj&gt;</a></span><span class="message">You must suffer, so that they can be redeemed</span></div><div class="line" id="004309"><span class="nick" style="color:#2e2a4a"><a href="#004309" label="[00:43:09]">&lt;fossy&gt;</a></span><span class="message">lets eradicate autotools</span></div><div class="line" id="004315"><span class="nick" style="color:#2e2a4a"><a href="#004315" label="[00:43:15]">&lt;fossy&gt;</a></span><span class="message">sh ftw!!</span></div><div class="line" id="004332"><span class="nick" style="color:#389600"><a href="#004332" label="[00:43:32]">&lt;oriansj&gt;</a></span><span class="message">kaem ftw</span></div><div class="line" id="004343"><span class="nick" style="color:#2e2a4a"><a href="#004343" label="[00:43:43]">&lt;fossy&gt;</a></span><span class="message">that too</span></div><div class="line" id="004344"><span class="nick" style="color:#389600"><a href="#004344" label="[00:43:44]">&lt;oriansj&gt;</a></span><span class="message">universal behavior</span></div><div class="line" id="004403"><span class="nick" style="color:#2e2a4a"><a href="#004403" label="[00:44:03]">&lt;fossy&gt;</a></span><span class="message">but you said kaem is the worst build tool</span></div><div class="line" id="004418"><span class="nick" style="color:#389600"><a href="#004418" label="[00:44:18]">&lt;oriansj&gt;</a></span><span class="message">yes it is</span></div><div class="line" id="004424"><span class="nick" style="color:#2e2a4a"><a href="#004424" label="[00:44:24]">&lt;fossy&gt;</a></span><span class="message">lol</span></div><div class="line" id="004447"><span class="nick" style="color:#389600"><a href="#004447" label="[00:44:47]">&lt;oriansj&gt;</a></span><span class="message">It is literally the worst build tool I could make</span></div><div class="line" id="004507"><span class="nick" style="color:#2e2a4a"><a href="#004507" label="[00:45:07]">&lt;fossy&gt;</a></span><span class="message">anyway for the time being im just going to not include a guile in the repository and get anyone who wants to use gcc-seed before mes m2 is ready install guile themselves</span></div><div class="line" id="004508"><span class="nick" style="color:#389600"><a href="#004508" label="[00:45:08]">&lt;oriansj&gt;</a></span><span class="message">but it is sadly better than many others</span></div><div class="line" id="004532"><span class="nick" style="color:#2e2a4a"><a href="#004532" label="[00:45:32]">&lt;fossy&gt;</a></span><span class="message">and then when mes m2 is ready that problem will be solvrd</span></div><div class="line" id="004537"><span class="nick" style="color:#2e2a4a"><a href="#004537" label="[00:45:37]">&lt;fossy&gt;</a></span><span class="message">solved*</span></div><div class="line" id="004549"><span class="nick" style="color:#389600"><a href="#004549" label="[00:45:49]">&lt;oriansj&gt;</a></span><span class="message">or just use environmential guile</span></div><div class="line" id="004605"><span class="nick" style="color:#2e2a4a"><a href="#004605" label="[00:46:05]">&lt;fossy&gt;</a></span><span class="message">whats that</span></div><div class="line" id="004625"><span class="nick" style="color:#389600"><a href="#004625" label="[00:46:25]">&lt;oriansj&gt;</a></span><span class="message">kaem can look up binaries from the PATH variable</span></div><div class="line" id="004709"><span class="nick" style="color:#389600"><a href="#004709" label="[00:47:09]">&lt;oriansj&gt;</a></span><span class="message">we pulled that out of kaem-minimal but if you put echo &quot;foo&quot; in a file and do kaem -f file</span></div><div class="line" id="004721"><span class="nick" style="color:#389600"><a href="#004721" label="[00:47:21]">&lt;oriansj&gt;</a></span><span class="message">it will display the echo just fine</span></div><div class="line" id="004730"><span class="nick" style="color:#2e2a4a"><a href="#004730" label="[00:47:30]">&lt;fossy&gt;</a></span><span class="message">oh rightt</span></div><div class="line" id="004758"><span class="nick" style="color:#2e2a4a"><a href="#004758" label="[00:47:58]">&lt;fossy&gt;</a></span><span class="message">yeah thats what I was going to do</span></div><div class="line" id="004912"><span class="nick" style="color:#389600"><a href="#004912" label="[00:49:12]">&lt;oriansj&gt;</a></span><span class="message">and I'll be updating kaem.c to do the right thing when execve fails</span></div><div class="line" id="011106"><span class="nick" style="color:#389600"><a href="#011106" label="[01:11:06]">&lt;oriansj&gt;</a></span><span class="message">wtf</span></div><div class="line" id="011213"><span class="nick" style="color:#389600"><a href="#011213" label="[01:12:13]">&lt;oriansj&gt;</a></span><span class="message">in man execve it clearly states that execve should not return unless error</span></div><div class="line" id="011413"><span class="nick" style="color:#389600"><a href="#011413" label="[01:14:13]">&lt;oriansj&gt;</a></span><span class="message">however when I change it to return exit_failure; calling it always returns?</span></div><div class="line" id="012007"><span class="nick" style="color:#389600"><a href="#012007" label="[01:20:07]">&lt;oriansj&gt;</a></span><span class="message">yet I set follow-fork-mode child</span></div><div class="line" id="012858"><span class="nick" style="color:#389600"><a href="#012858" label="[01:28:58]">&lt;oriansj&gt;</a></span><span class="message">So just running ./bin/kaem --verbose --strict -f foo</span></div><div class="line" id="012921"><span class="nick" style="color:#389600"><a href="#012921" label="[01:29:21]">&lt;oriansj&gt;</a></span><span class="message">errors out; however when opened with gdb; no issues</span></div><div class="line" id="012928"><span class="nick" style="color:#389600"><a href="#012928" label="[01:29:28]">&lt;oriansj&gt;</a></span><span class="message">WTF</span></div><div class="line" id="012948"><span class="nick" style="color:#2e2a4a"><a href="#012948" label="[01:29:48]">&lt;fossy&gt;</a></span><span class="message">um what</span></div><div class="line" id="013301"><span class="nick" style="color:#389600"><a href="#013301" label="[01:33:01]">&lt;oriansj&gt;</a></span><span class="message">fossy: you can verify it by changing line 348 from _exit(EXIT_SUCCESS); to _exit(EXIT_FAILURE);</span></div><div class="line" id="013320"><span class="nick" style="color:#389600"><a href="#013320" label="[01:33:20]">&lt;oriansj&gt;</a></span><span class="message">and putting /bin/echo &quot;foo&quot; in foo</span></div><div class="line" id="013433"><span class="nick" style="color:#389600"><a href="#013433" label="[01:34:33]">&lt;oriansj&gt;</a></span><span class="message">or any other commands you know will not fail</span></div><div class="line" id="013552"><span class="nick" style="color:#389600"><a href="#013552" label="[01:35:52]">&lt;oriansj&gt;</a></span><span class="message">but open it with cgdb (or just plan gdb) and break at the fork()</span></div><div class="line" id="013604"><span class="nick" style="color:#2e2a4a"><a href="#013604" label="[01:36:04]">&lt;fossy&gt;</a></span><span class="message">I will try this</span></div><div class="line" id="013605"><span class="nick" style="color:#389600"><a href="#013605" label="[01:36:05]">&lt;oriansj&gt;</a></span><span class="message">single stepping results in everything being fine</span></div><div class="line" id="013609"><span class="nick" style="color:#2e2a4a"><a href="#013609" label="[01:36:09]">&lt;fossy&gt;</a></span><span class="message">is this normal kaem</span></div><div class="line" id="013613"><span class="nick" style="color:#2e2a4a"><a href="#013613" label="[01:36:13]">&lt;fossy&gt;</a></span><span class="message">or mini</span></div><div class="line" id="013619"><span class="nick" style="color:#389600"><a href="#013619" label="[01:36:19]">&lt;oriansj&gt;</a></span><span class="message">fossy: normal</span></div><div class="line" id="013623"><span class="nick" style="color:#2e2a4a"><a href="#013623" label="[01:36:23]">&lt;fossy&gt;</a></span><span class="message">ok</span></div><div class="line" id="015140"><span class="nick" style="color:#389600"><a href="#015140" label="[01:51:40]">&lt;oriansj&gt;</a></span><span class="message">freaking waitpid is to blame</span></div><div class="line" id="015301"><span class="nick" style="color:#389600"><a href="#015301" label="[01:53:01]">&lt;oriansj&gt;</a></span><span class="message">now 0 meaning wait for any child process whose process group ID is equal to that of the calling process.</span></div><div class="line" id="015322"><span class="nick" style="color:#389600"><a href="#015322" label="[01:53:22]">&lt;oriansj&gt;</a></span><span class="message">in theory there should be no other processes in the process group ID</span></div><div class="line" id="015337"><span class="nick" style="color:#389600"><a href="#015337" label="[01:53:37]">&lt;oriansj&gt;</a></span><span class="message">but there it is</span></div><div class="line" id="015407"><span class="nick" style="color:#389600"><a href="#015407" label="[01:54:07]">&lt;oriansj&gt;</a></span><span class="message">changing it to a 1 meaning wait for the child whose process ID is equal to the value of pid</span></div><div class="line" id="015415"><span class="nick" style="color:#389600"><a href="#015415" label="[01:54:15]">&lt;oriansj&gt;</a></span><span class="message">does the trick</span></div><div class="line" id="020140"><span class="nick" style="color:#389600"><a href="#020140" label="[02:01:40]">&lt;oriansj&gt;</a></span><span class="message">patch is of course up</span></div><div class="line" id="025838"><span class="nick" style="color:#389600"><a href="#025838" label="[02:58:38]">&lt;oriansj&gt;</a></span><span class="message">looks like I had an off by one error in kaem-minimal.M1</span></div><div class="line" id="030134"><span class="nick" style="color:#2e2a4a"><a href="#030134" label="[03:01:34]">&lt;fossy&gt;</a></span><span class="message">Zoo</span></div><div class="line" id="030136"><span class="nick" style="color:#2e2a4a"><a href="#030136" label="[03:01:36]">&lt;fossy&gt;</a></span><span class="message">oof</span></div><div class="line" id="030152"><span class="nick" style="color:#2e2a4a"><a href="#030152" label="[03:01:52]">&lt;fossy&gt;</a></span><span class="message">waitpid frick u</span></div><div class="line" id="030721"><span class="nick" style="color:#389600"><a href="#030721" label="[03:07:21]">&lt;oriansj&gt;</a></span><span class="message">and I am currently merging your work with the newest version of kaem-minimal</span></div><div class="line" id="032835"><span class="nick" style="color:#389600"><a href="#032835" label="[03:28:35]">&lt;oriansj&gt;</a></span><span class="message">in weird news after the merge AMD64's ../bin/kaem --verbose --strict --file mes-m2.kaem broke</span></div><div class="line" id="033140"><span class="nick" style="color:#389600"><a href="#033140" label="[03:31:40]">&lt;oriansj&gt;</a></span><span class="message">it appears mescc-tools-full-kaem.kaem has been truncated</span></div><div class="line" id="033506"><span class="nick" style="color:#389600"><a href="#033506" label="[03:35:06]">&lt;oriansj&gt;</a></span><span class="message">no worries, it'll be resurrected shortly</span></div><div class="line" id="034725"><span class="nick" style="color:#389600"><a href="#034725" label="[03:47:25]">&lt;oriansj&gt;</a></span><span class="message">bootstrap-seeds is now having a proper binary</span></div><div class="line" id="035032"><span class="nick" style="color:#389600"><a href="#035032" label="[03:50:32]">&lt;oriansj&gt;</a></span><span class="message">WTF</span></div><div class="line" id="035524"><span class="nick" style="color:#389600"><a href="#035524" label="[03:55:24]">&lt;oriansj&gt;</a></span><span class="message">waitpid(f, &amp;status, 1); works with gcc but waitpid(f, &amp;status, 0); works with M2-Planet</span></div><div class="line" id="035804"><span class="nick" style="color:#389600"><a href="#035804" label="[03:58:04]">&lt;oriansj&gt;</a></span><span class="message">it acts like it isn't waiting for anything at all</span></div><div class="line" id="040229"><span class="nick" style="color:#389600"><a href="#040229" label="[04:02:29]">&lt;oriansj&gt;</a></span><span class="message">if I do waitpid(f, &amp;status, 1); M2-Planet build runs crazy then ../bin/kaem is used</span></div><div class="line" id="040353"><span class="nick" style="color:#389600"><a href="#040353" label="[04:03:53]">&lt;oriansj&gt;</a></span><span class="message">but if I do waitpid(f, &amp;status, 0); M2-Planet build works fine but gcc output aborts hard after doing echo &quot;foo&quot;</span></div><div class="line" id="045019"><span class="nick" style="color:#2e2a4a"><a href="#045019" label="[04:50:19]">&lt;fossy&gt;</a></span><span class="message">What the fauq</span></div><div class="line" id="045041"><span class="nick" style="color:#2e2a4a"><a href="#045041" label="[04:50:41]">&lt;fossy&gt;</a></span><span class="message">variable substitution coming soon to a kaem near you</span></div><div class="line" id="045502"><span class="nick" style="color:#389600"><a href="#045502" label="[04:55:02]">&lt;oriansj&gt;</a></span><span class="message">I hate to have to do that but It looks like I don't have much of an option</span></div><div class="line" id="050358"><span class="nick" style="color:#389600"><a href="#050358" label="[05:03:58]">&lt;oriansj&gt;</a></span><span class="message">#define waitmode 1 &amp;&amp; //CONSTANT waitmode 0 will certainly do the trick</span></div><div class="line" id="051039"><span class="nick" style="color:#389600"><a href="#051039" label="[05:10:39]">&lt;oriansj&gt;</a></span><span class="message">I just wish to know why the behavior is different</span></div><div class="line" id="051659"><span class="nick" style="color:#2e2a4a"><a href="#051659" label="[05:16:59]">&lt;fossy&gt;</a></span><span class="message">yes it will</span></div><div class="line" id="051704"><span class="nick" style="color:#2e2a4a"><a href="#051704" label="[05:17:04]">&lt;fossy&gt;</a></span><span class="message">its weird asf tho</span></div><div class="line" id="051752"><span class="nick" style="color:#389600"><a href="#051752" label="[05:17:52]">&lt;oriansj&gt;</a></span><span class="message">If you single step the GCC binary it calls waitpid with the pid instead of 1</span></div><div class="line" id="051829"><span class="nick" style="color:#389600"><a href="#051829" label="[05:18:29]">&lt;oriansj&gt;</a></span><span class="message">with rdi and rdx having the exact same value</span></div><div class="line" id="120713"><span class="nick" style="color:#6d2462"><a href="#120713" label="[12:07:13]">&lt;janneke&gt;</a></span><span class="message">oriansj: mescc-tools WTF?: if [ -e /usr/bin/sha256sum ]; then</span></div><div class="line" id="120728"><span class="nick" style="color:#6d2462"><a href="#120728" label="[12:07:28]">&lt;janneke&gt;</a></span><span class="message">i thought you were running guix?</span></div><div class="line" id="121049"><span class="nick" style="color:#80b1d3"><a href="#121049" label="[12:10:49]">*</a></span><span class="message">janneke goes to patch guix build recipe</span></div><div class="line" id="121115"><span class="nick" style="color:#6d2462"><a href="#121115" label="[12:11:15]">&lt;janneke&gt;</a></span><span class="message">i probably should not complain when i get aarch for free, which i need</span></div><div class="line" id="121147"><span class="nick" style="color:#6d2462"><a href="#121147" label="[12:11:47]">&lt;janneke&gt;</a></span><span class="message">but i've been fighting hardcoded /usr/* checks in configure and build systems for &gt; 25y</span></div><div class="line" id="121408"><span class="nick" style="color:#6d2462"><a href="#121408" label="[12:14:08]">&lt;janneke&gt;</a></span><span class="message">it's so frustrating that the concept of having multiple unix roots still hasn't landed in our collective awareness :-( :-(</span></div><div class="line" id="125133"><span class="nick" style="color:#389600"><a href="#125133" label="[12:51:33]">&lt;oriansj&gt;</a></span><span class="message">janneke: patches are always welcome ^_^</span></div><div class="line" id="125155"><span class="nick" style="color:#389600"><a href="#125155" label="[12:51:55]">&lt;oriansj&gt;</a></span><span class="message">I can't do everything perfect; way too much on my plate these days</span></div><div class="line" id="125358"><span class="nick" style="color:#389600"><a href="#125358" label="[12:53:58]">&lt;oriansj&gt;</a></span><span class="message">it certainly has landed but I just don't remember the correct way to deal wih it when one is using a 737byte shell</span></div><div class="line" id="125525"><span class="nick" style="color:#389600"><a href="#125525" label="[12:55:25]">&lt;oriansj&gt;</a></span><span class="message">I also have /usr/bin/env in my guix config</span></div><div class="line" id="125723"><span class="nick" style="color:#389600"><a href="#125723" label="[12:57:23]">&lt;oriansj&gt;</a></span><span class="message">morning ng0 we have a new 737byte treat for those bootstrapping</span></div><div class="line" id="130430"><span class="nick" style="color:#389600"><a href="#130430" label="[13:04:30]">&lt;oriansj&gt;</a></span><span class="message">well it looks like <a rel="nofollow" href="https://reproducible-builds.org/reports/2020-01/?draft">https://reproducible-builds.org/reports/2020-01/?draft</a>  forgot about stage0 v0.3.0 that occured on 2020/01/18</span></div><div class="line" id="130529"><span class="nick" style="color:#389600"><a href="#130529" label="[13:05:29]">&lt;oriansj&gt;</a></span><span class="message">fair I guess given that v0.4.0 occurred on 2020/02/02</span></div><div class="line" id="131251"><span class="nick" style="color:#389600"><a href="#131251" label="[13:12:51]">&lt;oriansj&gt;</a></span><span class="message">fossy: and I should have the kaem-optional-seed.hex0 done today (as every binary deserves atleast a hex0)</span></div><div class="line" id="131303"><span class="nick" style="color:#389600"><a href="#131303" label="[13:13:03]">&lt;oriansj&gt;</a></span><span class="message">(It is just very very slow work)</span></div><div class="line" id="140418"><span class="nick" style="color:#6d2462"><a href="#140418" label="[14:04:18]">&lt;janneke&gt;</a></span><span class="message">oriansj: yeah, perfection comes from many eyeballs and many patches</span></div><div class="line" id="140521"><span class="nick" style="color:#6d2462"><a href="#140521" label="[14:05:21]">&lt;janneke&gt;</a></span><span class="message">and perfection is many different things to many different minds</span></div><div class="line" id="140729"><span class="nick">***</span><span class="message notice">ng0_ is now known as ng0</span></div><div class="line" id="140741"><span class="nick" style="color:#234e69"><a href="#140741" label="[14:07:41]">&lt;ng0&gt;</a></span><span class="message">morning</span></div><div class="line" id="141008"><span class="nick" style="color:#234e69"><a href="#141008" label="[14:10:08]">&lt;ng0&gt;</a></span><span class="message">well i still need to catch up with the packages.. and do some mental balancing and discussions on the scope of reproducibility in pkgsrc. i have other tasks lined up before that</span></div><div class="line" id="141246"><span class="nick" style="color:#234e69"><a href="#141246" label="[14:12:46]">&lt;ng0&gt;</a></span><span class="message">janneke: i don't know if i was (train/jet)lagged earlier this week and already mentioned it, but i was sitting in your talk and found it very inspiring and good. maybe for the 2 or 3 odd users porting Guix also gets easier once there's almost no binary bootstrap left (because it seems as if there's the expectation that I will port Guix to NetBSD/amd64 native by at least 2 people o.o)</span></div><div class="line" id="141715"><span class="nick" style="color:#234e69"><a href="#141715" label="[14:17:15]">&lt;ng0&gt;</a></span><span class="message">once I get there, I think I need to talk to Guix again for scope of OS support. ideally there doesn't even have to be much initial porting because of our linux emulation, but we'll see how this works out. my many other projects and hobbies complain, but the hacker in me wants it just because it can be done.</span></div><div class="line" id="143226"><span class="nick" style="color:#6d2462"><a href="#143226" label="[14:32:26]">&lt;janneke&gt;</a></span><span class="message">ng0: thank you!</span></div><div class="line" id="143343"><span class="nick" style="color:#6d2462"><a href="#143343" label="[14:33:43]">&lt;janneke&gt;</a></span><span class="message">ooh, guix on NetBSD, that would be nice</span></div><div class="line" id="143445"><span class="nick" style="color:#6d2462"><a href="#143445" label="[14:34:45]">&lt;janneke&gt;</a></span><span class="message">have you seen that some initial scaffold work has been done to port mes to FreeBSD?</span></div><div class="line" id="143450"><span class="nick" style="color:#234e69"><a href="#143450" label="[14:34:50]">&lt;ng0&gt;</a></span><span class="message">i mean it fits the userbase, because some of our users are weird like that, and there's no grudge against GNU contrary to what more loudly rambling people of other projects say. i prefer learning from each other and working together</span></div><div class="line" id="143456"><span class="nick" style="color:#234e69"><a href="#143456" label="[14:34:56]">&lt;ng0&gt;</a></span><span class="message">oh, no</span></div><div class="line" id="143743"><span class="nick" style="color:#6d2462"><a href="#143743" label="[14:37:43]">&lt;janneke&gt;</a></span><span class="message">ng0: /me too; that's good</span></div><div class="line" id="143850"><span class="nick" style="color:#6d2462"><a href="#143850" label="[14:38:50]">&lt;janneke&gt;</a></span><span class="message">i worked with h4nnes on an initial scaffold; really only ELF headers for freebsd in mes; he was very enthousiastic about bootstrapping and i also wanted to venture into *BSD</span></div><div class="line" id="143908"><span class="nick" style="color:#234e69"><a href="#143908" label="[14:39:08]">&lt;ng0&gt;</a></span><span class="message">i see.. interesting :)</span></div><div class="line" id="143921"><span class="nick" style="color:#6d2462"><a href="#143921" label="[14:39:21]">&lt;janneke&gt;</a></span><span class="message">so what's in mes now is really more of a teaser than anything else</span></div><div class="line" id="144312"><span class="nick" style="color:#6c3d55"><a href="#144312" label="[14:43:12]">&lt;hannes&gt;</a></span><span class="message">.oO(and hannes has been procrastinating with lots of other things to continue on the mes / FreeBSD front)</span></div><div class="line" id="144403"><span class="nick" style="color:#6d2462"><a href="#144403" label="[14:44:03]">&lt;janneke&gt;</a></span><span class="message">hannes: ah, sorry for inserting a `4' into your nick ;-)</span></div><div class="line" id="144404"><span class="nick" style="color:#6c3d55"><a href="#144404" label="[14:44:04]">&lt;hannes&gt;</a></span><span class="message">it is not that i lost interest, it is more that i keep myself busy with other things ;)</span></div><div class="line" id="144426"><span class="nick" style="color:#6d2462"><a href="#144426" label="[14:44:26]">&lt;janneke&gt;</a></span><span class="message">hannes: focus!</span></div><div class="line" id="144442"><span class="nick" style="color:#80b1d3"><a href="#144442" label="[14:44:42]">*</a></span><span class="message">janneke is playing with a pinebook pro and ARM stuff</span></div><div class="line" id="144445"><span class="nick" style="color:#6d2462"><a href="#144445" label="[14:44:45]">&lt;janneke&gt;</a></span><span class="message">;)</span></div><div class="line" id="144658"><span class="nick" style="color:#389600"><a href="#144658" label="[14:46:58]">&lt;oriansj&gt;</a></span><span class="message">ng0: I'd love to help get the bootstrap pieces working on the *BSDs</span></div><div class="line" id="144705"><span class="nick" style="color:#389600"><a href="#144705" label="[14:47:05]">&lt;oriansj&gt;</a></span><span class="message">The more roots the better</span></div><div class="line" id="144832"><span class="nick" style="color:#6c3d55"><a href="#144832" label="[14:48:32]">&lt;hannes&gt;</a></span><span class="message">janneke: i suspect sitting somewhere a weekend/week on that with others would help to focus on bootstrapping mes.. ;)</span></div><div class="line" id="145016"><span class="nick" style="color:#d9d9d9"><a href="#145016" label="[14:50:16]">&lt;ng0_&gt;</a></span><span class="message">i'm not quiet sure if/how/etc this can find its way into NetBSD though, I'd have to talk to the right developers. packaging for pkgsrc for now (and porting this way) is better for now. and then there's the precondition that anything which might land in base must have at least a couple of years (or some time) of proven maintenance (and, not sure about this one, work on all tier 1 ports)</span></div><div class="line" id="145057"><span class="nick" style="color:#6d2462"><a href="#145057" label="[14:50:57]">&lt;janneke&gt;</a></span><span class="message">hannes: yes, that would be nice!!</span></div><div class="line" id="145214"><span class="nick" style="color:#6c3d55"><a href="#145214" label="[14:52:14]">&lt;hannes&gt;</a></span><span class="message">ng0_: i at least managed to upstream some nyacc (a dependency of mes/mes-tools) patches (use $MAKE instead of make) -- that has been merged to master (not sure whether there has been a release since)</span></div><div class="line" id="145328"><span class="nick" style="color:#d9d9d9"><a href="#145328" label="[14:53:28]">&lt;ng0_&gt;</a></span><span class="message">i think freebsd has a similar acceptance process, right? no idea if you specifically target freebsd base in the near/far future or only ports</span></div><div class="line" id="145422"><span class="nick" style="color:#6c3d55"><a href="#145422" label="[14:54:22]">&lt;hannes&gt;</a></span><span class="message">ng0_: FreeBSD ports is what I target. I don't know the policies about the base system, but they look rather strict.</span></div><div class="line" id="145432"><span class="nick" style="color:#d9d9d9"><a href="#145432" label="[14:54:32]">&lt;ng0_&gt;</a></span><span class="message">ok</span></div><div class="line" id="145827"><span class="nick" style="color:#389600"><a href="#145827" label="[14:58:27]">&lt;oriansj&gt;</a></span><span class="message">ng0_: Gnu Mes and stage0 have been actively worked on since 2016</span></div><div class="line" id="145854"><span class="nick" style="color:#d9d9d9"><a href="#145854" label="[14:58:54]">&lt;ng0_&gt;</a></span><span class="message">i know. this part wouldn't be questionable</span></div><div class="line" id="150051"><span class="nick" style="color:#d9d9d9"><a href="#150051" label="[15:00:51]">&lt;ng0_&gt;</a></span><span class="message">so let's say we have this in NetBSD. would you accept patches for adding support for all kinds of architectures we support (and can find people for to still test it on)?</span></div><div class="line" id="150312"><span class="nick" style="color:#389600"><a href="#150312" label="[15:03:12]">&lt;oriansj&gt;</a></span><span class="message">ng0_: absolutely</span></div><div class="line" id="150331"><span class="nick" style="color:#d9d9d9"><a href="#150331" label="[15:03:31]">&lt;ng0_&gt;</a></span><span class="message">:)</span></div><div class="line" id="150403"><span class="nick" style="color:#389600"><a href="#150403" label="[15:04:03]">&lt;oriansj&gt;</a></span><span class="message">one can not have a universal bootstrap, without accepting help getting it working everywhere</span></div><div class="line" id="153250"><span class="nick" style="color:#389600"><a href="#153250" label="[15:32:50]">&lt;oriansj&gt;</a></span><span class="message">To be honest, I think any efforts the guix developers take to get guix working on the *BSDs and microkernels like (Gnu Hurd, L4, etc) will end up making it much more independent of many assumptions about hosts; hopefully resulting in a longer living project.</span></div><div class="line" id="153637"><span class="nick" style="color:#6c3d55"><a href="#153637" label="[15:36:37]">&lt;hannes&gt;</a></span><span class="message">^^ this is exactly my experience from a different angle -- having a &quot;unikernel&quot; OS [<a rel="nofollow" href="https://openmirage.org">https://openmirage.org</a>]  initially developed for Xen, then ported to ARM32, and afterwards KVM, followed by VirtIO, FreeBSD BHyve, OpenBSD VMM, ... -- esp. of curiousity may be solo5 (<a rel="nofollow" href="https://github.com/solo5/solo5">https://github.com/solo5/solo5</a>)  which &quot;abstracts&quot; over kvm/bhyve/virtio, but also genode and muen, plus recently seccomp -- a pile of</span></div><div class="line" id="153643"><span class="nick" style="color:#6c3d55"><a href="#153643" label="[15:36:43]">&lt;hannes&gt;</a></span><span class="message">(imho very readable) C code with only few #ifdefs</span></div><div class="line" id="154931"><span class="nick" style="color:#389600"><a href="#154931" label="[15:49:31]">&lt;oriansj&gt;</a></span><span class="message">hannes: exactly, the easier to becomes to port guix to new Operating systems; the better long term survival odds guix has</span></div><div class="line" id="155645"><span class="nick" style="color:#389600"><a href="#155645" label="[15:56:45]">&lt;oriansj&gt;</a></span><span class="message">We must keep a careful eye on the Anna Karenina principle when doing systems planning</span></div><div class="line" id="163815"><span class="nick">***</span><span class="message notice">ng0_ is now known as ng0</span></div><div class="line" id="174105"><span class="nick" style="color:#8dd3c7"><a href="#174105" label="[17:41:05]">&lt;dddddd&gt;</a></span><span class="message">\o</span></div><div class="line" id="184912"><span class="nick" style="color:#8dd3c7"><a href="#184912" label="[18:49:12]">&lt;dddddd&gt;</a></span><span class="message">OK, let's look a bit more that half-finished M1.scm at slow-utils.</span></div><div class="line" id="192727"><span class="nick">***</span><span class="message notice">jelle is now known as blahaj</span></div><div class="line" id="200135"><span class="nick" style="color:#389600"><a href="#200135" label="[20:01:35]">&lt;oriansj&gt;</a></span><span class="message">dddddd: once it is done janneke and guix will have a single binary only scheme, only bootstrap</span></div><div class="line" id="200215"><span class="nick" style="color:#389600"><a href="#200215" label="[20:02:15]">&lt;oriansj&gt;</a></span><span class="message">unless guix has some other hidden binaries it depends upon we need to know about</span></div><div class="line" id="201333"><span class="nick">***</span><span class="message notice">blahaj is now known as jelle</span></div><div class="line" id="213118"><span class="nick" style="color:#2e2a4a"><a href="#213118" label="[21:31:18]">&lt;fossy&gt;</a></span><span class="message">oriansj: nice, how goes the hex0 kaem?</span></div><div class="line" id="221054"><span class="nick" style="color:#2e2a4a"><a href="#221054" label="[22:10:54]">&lt;fossy&gt;</a></span><span class="message">what the f</span></div><div class="line" id="221121"><span class="nick" style="color:#2e2a4a"><a href="#221121" label="[22:11:21]">&lt;fossy&gt;</a></span><span class="message">file_print is making buffer overflows and rewriting a variable that it dosen't even reference</span></div><div class="line" id="221125"><span class="nick" style="color:#2e2a4a"><a href="#221125" label="[22:11:25]">&lt;fossy&gt;</a></span><span class="message">i am so confused</span></div><div class="line" id="221253"><span class="nick" style="color:#2e2a4a"><a href="#221253" label="[22:12:53]">&lt;fossy&gt;</a></span><span class="message">sorry, no numerate_number is</span></div><div class="line" id="221416"><span class="nick" style="color:#2e2a4a"><a href="#221416" label="[22:14:16]">&lt;fossy&gt;</a></span><span class="message">oriansj: M2-Planet does not do any look-ahead compiling optomisations does it?</span></div><div class="line" id="221658"><span class="nick" style="color:#2e2a4a"><a href="#221658" label="[22:16:58]">&lt;fossy&gt;</a></span><span class="message">hmm, i think this is an off-by-one error somewhere</span></div><div class="line" id="221704"><span class="nick" style="color:#2e2a4a"><a href="#221704" label="[22:17:04]">&lt;fossy&gt;</a></span><span class="message">because it only happens with 1-length strings</span></div><div class="line" id="221714"><span class="nick" style="color:#2e2a4a"><a href="#221714" label="[22:17:14]">&lt;fossy&gt;</a></span><span class="message">strings are terminated with a zero afterwards right?</span></div><div class="line" id="221732"><span class="nick" style="color:#2e2a4a"><a href="#221732" label="[22:17:32]">&lt;fossy&gt;</a></span><span class="message">maybe in calloc()?</span></div><div class="line" id="222223"><span class="nick" style="color:#2e2a4a"><a href="#222223" label="[22:22:23]">&lt;fossy&gt;</a></span><span class="message"> <a rel="nofollow" href="https://ttm.sh/ESy.txt">https://ttm.sh/ESy.txt</a> </span></div><div class="line" id="222230"><span class="nick" style="color:#2e2a4a"><a href="#222230" label="[22:22:30]">&lt;fossy&gt;</a></span><span class="message">^ minimal .c bug</span></div><div class="line" id="222432"><span class="nick" style="color:#2e2a4a"><a href="#222432" label="[22:24:32]">&lt;fossy&gt;</a></span><span class="message"> <a rel="nofollow" href="https://ttm.sh/ES6.txt">https://ttm.sh/ES6.txt</a>  with comments</span></div><div class="line" id="222936"><span class="nick" style="color:#bc80bd"><a href="#222936" label="[22:29:36]">&lt;Hagfish&gt;</a></span><span class="message">that sounds like something that fuzzing could have found, but i'm sorry i can't be more helpful than that</span></div><div class="line" id="223039"><span class="nick" style="color:#2e2a4a"><a href="#223039" label="[22:30:39]">&lt;fossy&gt;</a></span><span class="message">Hagfish: fuzzing only finds segfaults and hangs</span></div><div class="line" id="223044"><span class="nick" style="color:#2e2a4a"><a href="#223044" label="[22:30:44]">&lt;fossy&gt;</a></span><span class="message">not undefined behaviour</span></div><div class="line" id="223132"><span class="nick" style="color:#bc80bd"><a href="#223132" label="[22:31:32]">&lt;Hagfish&gt;</a></span><span class="message">oh, good point</span></div><div class="line" id="223207"><span class="nick" style="color:#bc80bd"><a href="#223207" label="[22:32:07]">&lt;Hagfish&gt;</a></span><span class="message">the mention of buffer overflows / rewriting variables made me think of memory safety</span></div><div class="line" id="223216"><span class="nick" style="color:#bc80bd"><a href="#223216" label="[22:32:16]">&lt;Hagfish&gt;</a></span><span class="message">there are sanitisers that find that sort of thing, right?</span></div><div class="line" id="223438"><span class="nick" style="color:#bc80bd"><a href="#223438" label="[22:34:38]">&lt;Hagfish&gt;</a></span><span class="message">&quot;(You can also use AFL_USE_MSAN=1 to enable MSAN instead.)&quot;</span></div><div class="line" id="223453"><span class="nick" style="color:#bc80bd"><a href="#223453" label="[22:34:53]">&lt;Hagfish&gt;</a></span><span class="message">that might be the approach i was thinking of (not that i've ever tried it or recommend it)</span></div><div class="line" id="223915"><span class="nick" style="color:#8dd3c7"><a href="#223915" label="[22:39:15]">&lt;dddddd&gt;</a></span><span class="message">cc is just one char, how can be zero terminated? After it, in memory, is whatever, if I'm reading the code correctly.</span></div><div class="line" id="224213"><span class="nick" style="color:#8dd3c7"><a href="#224213" label="[22:42:13]">&lt;dddddd&gt;</a></span><span class="message">I'd try calloc(2, ...) for cc[1] == 0</span></div><div class="line" id="224739"><span class="nick" style="color:#8dd3c7"><a href="#224739" label="[22:47:39]">&lt;dddddd&gt;</a></span><span class="message">Almost sure no look-ahead optimizations exists in M2-Planet.</span></div><div class="line" id="224933"><span class="nick" style="color:#8dd3c7"><a href="#224933" label="[22:49:33]">&lt;dddddd&gt;</a></span><span class="message">The only optimization I remember is eliminating a double-return, which in some sense is not optimization, but undo some step because it doesn't look ahead.</span></div><div class="line" id="231715"><span class="nick" style="color:#2e2a4a"><a href="#231715" label="[23:17:15]">&lt;fossy&gt;</a></span><span class="message">dddddd: Oh I get it</span></div><div class="line" id="231759"><span class="nick" style="color:#2e2a4a"><a href="#231759" label="[23:17:59]">&lt;fossy&gt;</a></span><span class="message">dddddd: you are right</span></div><div class="line" id="231815"><span class="nick" style="color:#2e2a4a"><a href="#231815" label="[23:18:15]">&lt;fossy&gt;</a></span><span class="message">The behaviour occurs with &quot;full&quot; strings</span></div><div class="line" id="231906"><span class="nick" style="color:#2e2a4a"><a href="#231906" label="[23:19:06]">&lt;fossy&gt;</a></span><span class="message">That are initialized by setting each char individually</span></div><div class="line" id="231919"><span class="nick" style="color:#2e2a4a"><a href="#231919" label="[23:19:19]">&lt;fossy&gt;</a></span><span class="message">So it cant be terminated</span></div><div class="line" id="231938"><span class="nick" style="color:#2e2a4a"><a href="#231938" label="[23:19:38]">&lt;fossy&gt;</a></span><span class="message">And so it spills over until there is a zero</span></div><div class="line" id="231957"><span class="nick" style="color:#2e2a4a"><a href="#231957" label="[23:19:57]">&lt;fossy&gt;</a></span><span class="message">Solution: when doing that, allocate one more than characters</span></div><div class="line" id="232037"><span class="nick" style="color:#2e2a4a"><a href="#232037" label="[23:20:37]">&lt;fossy&gt;</a></span><span class="message">And set array[length - 1] = 0</span></div><div class="line" id="232500"><span class="nick" style="color:#8dd3c7"><a href="#232500" label="[23:25:00]">&lt;dddddd&gt;</a></span><span class="message">Right, always one more than chars expected. About terminating... calloc does that for you (initilizes everything to 0) but it's fine to be explicit, making sure you terminate the string with zero.</span></div><div class="line" id="233447"><span class="nick" style="color:#2e2a4a"><a href="#233447" label="[23:34:47]">&lt;fossy&gt;</a></span><span class="message">dddddd: if you fill up the string, manually, there is no gurantee the next byte will be 0</span></div><div class="line" id="233501"><span class="nick" style="color:#2e2a4a"><a href="#233501" label="[23:35:01]">&lt;fossy&gt;</a></span><span class="message">as the next byte is outside the allocation</span></div><div class="line" id="233532"><span class="nick" style="color:#2e2a4a"><a href="#233532" label="[23:35:32]">&lt;fossy&gt;</a></span><span class="message">and the way most string functions work is that they have no regard for string boundries outside of a terminating 0</span></div><div class="line" id="233705"><span class="nick" style="color:#8dd3c7"><a href="#233705" label="[23:37:05]">&lt;dddddd&gt;</a></span><span class="message">It's zero if you don't overwrite the one calloc put there, at the end (on the plus one byte).</span></div><div class="line" id="233815"><span class="nick" style="color:#8dd3c7"><a href="#233815" label="[23:38:15]">&lt;dddddd&gt;</a></span><span class="message">char* cc = calloc(2, sizeof(char)); cc[0] = 'h';</span></div><div class="line" id="233853"><span class="nick" style="color:#8dd3c7"><a href="#233853" label="[23:38:53]">&lt;dddddd&gt;</a></span><span class="message">Two bytes allocated for a one char string. cc[1] is zero right now, per calloc semantics.</span></div><div class="line" id="234000"><span class="nick" style="color:#8dd3c7"><a href="#234000" label="[23:40:00]">&lt;dddddd&gt;</a></span><span class="message">For &quot;hi&quot; instead of &quot;h&quot; --&gt; char* cc = calloc(3, sizeof(char)); cc[0] = 'h';  cc[1] = 'i';</span></div><div class="line" id="234014"><span class="nick" style="color:#8dd3c7"><a href="#234014" label="[23:40:14]">&lt;dddddd&gt;</a></span><span class="message">cc[2] is zero, so well terminated &quot;hi&quot; string.</span></div><div class="line" id="234038"><span class="nick" style="color:#2e2a4a"><a href="#234038" label="[23:40:38]">&lt;fossy&gt;</a></span><span class="message">yes, correct</span></div><div class="line" id="234057"><span class="nick" style="color:#2e2a4a"><a href="#234057" label="[23:40:57]">&lt;fossy&gt;</a></span><span class="message">you need to allocate length plus 1</span></div><div class="line" id="234454"><span class="nick" style="color:#389600"><a href="#234454" label="[23:44:54]">&lt;oriansj&gt;</a></span><span class="message">fossy: M2-Planet does not do any padding on allocation. Aka, if you ask for 1 byte, the next allocation will be exactly after it. That said dddddd is correct in the only &quot;optimization&quot; is for double returns (It just slightly reduces binary sizes)</span></div><div class="line" id="234610"><span class="nick" style="color:#389600"><a href="#234610" label="[23:46:10]">&lt;oriansj&gt;</a></span><span class="message">In short undefined behavior that works &quot;fine&quot; in GCC and Clang break because you are not properly terminating your strings.</span></div><div class="line" id="234702"><span class="nick" style="color:#389600"><a href="#234702" label="[23:47:02]">&lt;oriansj&gt;</a></span><span class="message">M2-Planet assumes you know what you are doing and gets out of your way.</span></div><div class="line" id="234723"><span class="nick" style="color:#2e2a4a"><a href="#234723" label="[23:47:23]">&lt;fossy&gt;</a></span><span class="message">yes</span></div><div class="line" id="234744"><span class="nick" style="color:#2e2a4a"><a href="#234744" label="[23:47:44]">&lt;fossy&gt;</a></span><span class="message">it was simply a silly mistake on my part</span></div><div class="line" id="234753"><span class="nick" style="color:#389600"><a href="#234753" label="[23:47:53]">&lt;oriansj&gt;</a></span><span class="message">So if you tell M2-Planet, you want to rewrite your program while executing to do polymorphic programming, it is easy to do</span></div><div class="line" id="234817"><span class="nick" style="color:#2e2a4a"><a href="#234817" label="[23:48:17]">&lt;fossy&gt;</a></span><span class="message">hows kaem hex0 going?</span></div><div class="line" id="234843"><span class="nick" style="color:#389600"><a href="#234843" label="[23:48:43]">&lt;oriansj&gt;</a></span><span class="message">fossy: Should be done in the next couple hours.</span></div><div class="line" id="234847"><span class="nick" style="color:#2e2a4a"><a href="#234847" label="[23:48:47]">&lt;fossy&gt;</a></span><span class="message">Nice</span></div><div class="line" id="234912"><span class="nick" style="color:#389600"><a href="#234912" label="[23:49:12]">&lt;oriansj&gt;</a></span><span class="message">hex0 programming is always slow as shit; Like doing art with sand</span></div><div class="line" id="234913"><span class="nick" style="color:#2e2a4a"><a href="#234913" label="[23:49:13]">&lt;fossy&gt;</a></span><span class="message">Did you go to hex2 first?</span></div><div class="line" id="234955"><span class="nick" style="color:#389600"><a href="#234955" label="[23:49:55]">&lt;oriansj&gt;</a></span><span class="message">I do it from scratch to keep me honest</span></div><div class="line" id="235208"><span class="nick" style="color:#389600"><a href="#235208" label="[23:52:08]">&lt;oriansj&gt;</a></span><span class="message">Hence, why I do this sort of so rarely. It is a massive pain to write a 737byte binary in hex0</span></div><div class="line" id="235238"><span class="nick" style="color:#389600"><a href="#235238" label="[23:52:38]">&lt;oriansj&gt;</a></span><span class="message">hex1 and hex2 isn't so bad because the offsets are automatically calculated for you</span></div><div class="line" id="235500"><span class="nick" style="color:#389600"><a href="#235500" label="[23:55:00]">&lt;oriansj&gt;</a></span><span class="message">I can easily do 4974lines of M0 in a day or 1300ish lines of hex2 in a day</span></div><div class="line" id="235623"><span class="nick" style="color:#389600"><a href="#235623" label="[23:56:23]">&lt;oriansj&gt;</a></span><span class="message">but I rarely write hex0 programs more than 400lines long and they take all day</span></div><div class="line" id="235733"><span class="nick" style="color:#389600"><a href="#235733" label="[23:57:33]">&lt;oriansj&gt;</a></span><span class="message">x86/hex1_x86.hex0 is only 329lines long</span></div><br /></div></body></html>