<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-07-24.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="001503"><span class="nick" style="color:#8dd3c7"><a href="#001503" label="[00:15:03]">&lt;oriansj&gt;</a></span><span class="message">mihi: thank you for the tip, I'll have to revist the shrinking of the DOS stub section after we get something generally usable</span></div><div class="line" id="002050"><span class="nick" style="color:#8dd3c7"><a href="#002050" label="[00:20:50]">&lt;oriansj&gt;</a></span><span class="message">and I noticed that clang didn't make the second PE DOS stub the same size either</span></div><div class="line" id="002105"><span class="nick" style="color:#8dd3c7"><a href="#002105" label="[00:21:05]">&lt;oriansj&gt;</a></span><span class="message">56bytes instead of 64bytes; so odd</span></div><div class="line" id="002113"><span class="nick" style="color:#2e2a4a"><a href="#002113" label="[00:21:13]">&lt;stikonas&gt;</a></span><span class="message">oh, that's strange...</span></div><div class="line" id="002120"><span class="nick" style="color:#2e2a4a"><a href="#002120" label="[00:21:20]">&lt;stikonas&gt;</a></span><span class="message">I thought compile would keep it the same</span></div><div class="line" id="002131"><span class="nick" style="color:#2e2a4a"><a href="#002131" label="[00:21:31]">&lt;stikonas&gt;</a></span><span class="message">oriansj: you can also try fasm2</span></div><div class="line" id="002251"><span class="nick" style="color:#8dd3c7"><a href="#002251" label="[00:22:51]">&lt;oriansj&gt;</a></span><span class="message">also the Characteristics part of the PE header is different too</span></div><div class="line" id="002501"><span class="nick" style="color:#8dd3c7"><a href="#002501" label="[00:25:01]">&lt;oriansj&gt;</a></span><span class="message">and it didn't bother to set the checksum either????</span></div><div class="line" id="002727"><span class="nick" style="color:#2e2a4a"><a href="#002727" label="[00:27:27]">&lt;stikonas&gt;</a></span><span class="message">checksum probably doesn't matter for UEFI...</span></div><div class="line" id="003148"><span class="nick" style="color:#8dd3c7"><a href="#003148" label="[00:31:48]">&lt;oriansj&gt;</a></span><span class="message">but why did it previously set the checksum field?</span></div><div class="line" id="005818"><span class="nick" style="color:#8dd3c7"><a href="#005818" label="[00:58:18]">&lt;oriansj&gt;</a></span><span class="message">but in fun news, the _start is kept at 0x200 so I could sync multiple fields without issue</span></div><div class="line" id="005831"><span class="nick" style="color:#8dd3c7"><a href="#005831" label="[00:58:31]">&lt;oriansj&gt;</a></span><span class="message">and now the diff is even smaller</span></div><div class="line" id="010646"><span class="nick" style="color:#8dd3c7"><a href="#010646" label="[01:06:46]">&lt;oriansj&gt;</a></span><span class="message">and managed to turn off .reloc without deleting it: <a rel="nofollow" href="https://paste.debian.net/1248181/">https://paste.debian.net/1248181/</a> </span></div><div class="line" id="010818"><span class="nick" style="color:#8dd3c7"><a href="#010818" label="[01:08:18]">&lt;oriansj&gt;</a></span><span class="message">I still have no idea why changing the number of sections requires one to update the Characteristics</span></div><div class="line" id="011445"><span class="nick" style="color:#2e2a4a"><a href="#011445" label="[01:14:45]">&lt;stikonas&gt;</a></span><span class="message">oriansj: have you tried looking at what changed in characteristics?</span></div><div class="line" id="011521"><span class="nick" style="color:#8dd3c7"><a href="#011521" label="[01:15:21]">&lt;oriansj&gt;</a></span><span class="message">well I found 4 different definitions for what the bits in characteristics mean and they don't seem to agree</span></div><div class="line" id="011657"><span class="nick" style="color:#8dd3c7"><a href="#011657" label="[01:16:57]">&lt;oriansj&gt;</a></span><span class="message">22 20 appears to mean Reserved &amp; Section contains comments or some other type of information. &amp; Reserved. &amp; Reserved.</span></div><div class="line" id="011840"><span class="nick" style="color:#2e2a4a"><a href="#011840" label="[01:18:40]">&lt;stikonas&gt;</a></span><span class="message">there is python module pefile</span></div><div class="line" id="011849"><span class="nick" style="color:#2e2a4a"><a href="#011849" label="[01:18:49]">&lt;stikonas&gt;</a></span><span class="message">maybe that could be useful for all this work</span></div><div class="line" id="011925"><span class="nick" style="color:#2e2a4a"><a href="#011925" label="[01:19:25]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/erocarrera/pefile/blob/master/pefile.py#L162">https://github.com/erocarrera/pefile/blob/master/pefile.py#L162</a> </span></div><div class="line" id="011943"><span class="nick" style="color:#8dd3c7"><a href="#011943" label="[01:19:43]">&lt;oriansj&gt;</a></span><span class="message">probably</span></div><div class="line" id="012008"><span class="nick" style="color:#8dd3c7"><a href="#012008" label="[01:20:08]">&lt;oriansj&gt;</a></span><span class="message">be a good deal easier than documentation and guessing</span></div><div class="line" id="012139"><span class="nick" style="color:#8dd3c7"><a href="#012139" label="[01:21:39]">&lt;oriansj&gt;</a></span><span class="message">guix environment --ad-hoc python-pefile --fallback</span></div><div class="line" id="012855"><span class="nick" style="color:#2e2a4a"><a href="#012855" label="[01:28:55]">&lt;stikonas&gt;</a></span><span class="message">and then you can run pe = pefile.PE(&quot;hex0.efi&quot;) and analyze that pe struct</span></div><div class="line" id="013210"><span class="nick" style="color:#2e2a4a"><a href="#013210" label="[01:32:10]">&lt;stikonas&gt;</a></span><span class="message">pe.dump_dict() or pe.dump_info()</span></div><div class="line" id="013300"><span class="nick" style="color:#2e2a4a"><a href="#013300" label="[01:33:00]">&lt;stikonas&gt;</a></span><span class="message">that said we'll still have to figure out how to change things without breaking UEFI</span></div><div class="line" id="013552"><span class="nick" style="color:#2e2a4a"><a href="#013552" label="[01:35:52]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1248183/">https://paste.debian.net/1248183/</a> </span></div><div class="line" id="013716"><span class="nick" style="color:#2e2a4a"><a href="#013716" label="[01:37:16]">&lt;stikonas&gt;</a></span><span class="message">only one section has IMAGE_SCN_MEM_WRITE</span></div><div class="line" id="014041"><span class="nick" style="color:#8dd3c7"><a href="#014041" label="[01:40:41]">&lt;oriansj&gt;</a></span><span class="message">that would be .data</span></div><div class="line" id="014325"><span class="nick" style="color:#2e2a4a"><a href="#014325" label="[01:43:25]">&lt;stikonas&gt;</a></span><span class="message">yes, but I guess we can steal that flag and apply to .text section</span></div><div class="line" id="014329"><span class="nick" style="color:#2e2a4a"><a href="#014329" label="[01:43:29]">&lt;stikonas&gt;</a></span><span class="message">and get rid of .data</span></div><div class="line" id="014357"><span class="nick" style="color:#2e2a4a"><a href="#014357" label="[01:43:57]">&lt;stikonas&gt;</a></span><span class="message">unless it's impossible to remove .data</span></div><div class="line" id="014439"><span class="nick" style="color:#8dd3c7"><a href="#014439" label="[01:44:39]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well we are going to figure all of that out</span></div><div class="line" id="014701"><span class="nick" style="color:#2e2a4a"><a href="#014701" label="[01:47:01]">&lt;stikonas&gt;</a></span><span class="message">fossy: by the way, is this good to merge <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/187">https://github.com/fosslinux/live-bootstrap/pull/187</a>  ?</span></div><div class="line" id="015734"><span class="nick" style="color:#8dd3c7"><a href="#015734" label="[01:57:34]">&lt;oriansj&gt;</a></span><span class="message">thanks for the tip, certainly makes things a good bit clear</span></div><div class="line" id="020018"><span class="nick" style="color:#2e2a4a"><a href="#020018" label="[02:00:18]">&lt;stikonas&gt;</a></span><span class="message">well, I just happened to stumble upon that pefile, I wasn't aware of it before</span></div><div class="line" id="020604"><span class="nick" style="color:#8dd3c7"><a href="#020604" label="[02:06:04]">&lt;oriansj&gt;</a></span><span class="message">and I hacked together a little tool for us: <a rel="nofollow" href="https://paste.debian.net/1248187/">https://paste.debian.net/1248187/</a> </span></div><div class="line" id="020848"><span class="nick" style="color:#8dd3c7"><a href="#020848" label="[02:08:48]">&lt;oriansj&gt;</a></span><span class="message">and hex2 -f hex0.hex0 -o hex0.efi &amp;&amp; ./PE_INFO.py -o dump1 &amp;&amp; meld dump dump1 lets us get a quick peek</span></div><div class="line" id="021237"><span class="nick" style="color:#2e2a4a"><a href="#021237" label="[02:12:37]">&lt;stikonas&gt;</a></span><span class="message">well, I'll go to bed soon, but hopefully this helps you</span></div><div class="line" id="021303"><span class="nick" style="color:#8dd3c7"><a href="#021303" label="[02:13:03]">&lt;oriansj&gt;</a></span><span class="message">hopefully I have something useful for you by the time you wakeup</span></div><div class="line" id="021309"><span class="nick" style="color:#8dd3c7"><a href="#021309" label="[02:13:09]">&lt;oriansj&gt;</a></span><span class="message">^_^</span></div><div class="line" id="023756"><span class="nick" style="color:#8dd3c7"><a href="#023756" label="[02:37:56]">&lt;oriansj&gt;</a></span><span class="message">well I can cleanly delete the relocation section now, it however stalls on run (I'm guess because it actually needed the relocations</span></div><div class="line" id="023806"><span class="nick" style="color:#8dd3c7"><a href="#023806" label="[02:38:06]">&lt;oriansj&gt;</a></span><span class="message">)</span></div><div class="line" id="024552"><span class="nick" style="color:#8dd3c7"><a href="#024552" label="[02:45:52]">&lt;oriansj&gt;</a></span><span class="message">minor tweak: <a rel="nofollow" href="https://paste.debian.net/1248189/">https://paste.debian.net/1248189/</a> </span></div><div class="line" id="024659"><span class="nick" style="color:#8dd3c7"><a href="#024659" label="[02:46:59]">&lt;oriansj&gt;</a></span><span class="message">I can't believe I forgot to notice line 31</span></div><div class="line" id="024714"><span class="nick" style="color:#8dd3c7"><a href="#024714" label="[02:47:14]">&lt;oriansj&gt;</a></span><span class="message">use: pe = pefile.PE(inputfile) instead</span></div><div class="line" id="035711"><span class="nick" style="color:#8dd3c7"><a href="#035711" label="[03:57:11]">&lt;oriansj&gt;</a></span><span class="message">.reloc is going to be the big victory as it appears the memory address UEFI puts us in changes</span></div><div class="line" id="035826"><span class="nick" style="color:#8dd3c7"><a href="#035826" label="[03:58:26]">&lt;oriansj&gt;</a></span><span class="message">so we are gonna have to go PC relative addressing to make this work</span></div><div class="line" id="040119"><span class="nick" style="color:#6b8072"><a href="#040119" label="[04:01:19]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: oh, i forgot about that - merged</span></div><div class="line" id="040130"><span class="nick" style="color:#6b8072"><a href="#040130" label="[04:01:30]">&lt;fossy&gt;</a></span><span class="message">i did look at it but didn't finish reviewing before</span></div><div class="line" id="040203"><span class="nick" style="color:#6b8072"><a href="#040203" label="[04:02:03]">&lt;fossy&gt;</a></span><span class="message">also, nice work on hex0 optimzations</span></div><div class="line" id="040846"><span class="nick" style="color:#8dd3c7"><a href="#040846" label="[04:08:46]">&lt;oriansj&gt;</a></span><span class="message">stikonas: you'll have to replace all [label] bits with [rip+label] but it'll work around things nicely</span></div><div class="line" id="041634"><span class="nick" style="color:#8dd3c7"><a href="#041634" label="[04:16:34]">&lt;oriansj&gt;</a></span><span class="message">we are down to 1024bytes now</span></div><div class="line" id="041700"><span class="nick" style="color:#8dd3c7"><a href="#041700" label="[04:17:00]">&lt;oriansj&gt;</a></span><span class="message">and we have writes to memory without hangs, no .reloc</span></div><div class="line" id="041807"><span class="nick" style="color:#8dd3c7"><a href="#041807" label="[04:18:07]">&lt;oriansj&gt;</a></span><span class="message">(doing this in x86 and RISC-V is gonna cost a call/pop combo because no PC relative addressing support)</span></div><div class="line" id="042438"><span class="nick" style="color:#80b1d3"><a href="#042438" label="[04:24:38]">&lt;muurkha&gt;</a></span><span class="message">RISC-V has extensive PC-relative addressing support to avoid needing a call/pop combo</span></div><div class="line" id="042541"><span class="nick" style="color:#8dd3c7"><a href="#042541" label="[04:25:41]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1248192/">https://paste.debian.net/1248192/</a> </span></div><div class="line" id="042654"><span class="nick" style="color:#80b1d3"><a href="#042654" label="[04:26:54]">&lt;muurkha&gt;</a></span><span class="message">the B* instructions, used for conditional branches, and the JAL instruction, used for unconditional branches and calls, are *only* PC-relative; they don't support an absolute addressing mode</span></div><div class="line" id="042808"><span class="nick" style="color:#80b1d3"><a href="#042808" label="[04:28:08]">&lt;muurkha&gt;</a></span><span class="message">the JALR instruction, used for returning, invoking function pointers, and indexing jump tables, does interpret its register argument as an absolute address, adding its 12-bit immediate operand to that register to get the absolute address to transfer to</span></div><div class="line" id="042816"><span class="nick" style="color:#8dd3c7"><a href="#042816" label="[04:28:16]">&lt;oriansj&gt;</a></span><span class="message">muurkha: I am talking about loading/storing relative to the PC register</span></div><div class="line" id="042841"><span class="nick" style="color:#80b1d3"><a href="#042841" label="[04:28:41]">&lt;muurkha&gt;</a></span><span class="message">but loading a PC-relative base address just requires an AUIPC, same as loading and storing relative to the PC register</span></div><div class="line" id="042925"><span class="nick" style="color:#8dd3c7"><a href="#042925" label="[04:29:25]">&lt;oriansj&gt;</a></span><span class="message">right, that stupid double instruction combo</span></div><div class="line" id="042958"><span class="nick" style="color:#8dd3c7"><a href="#042958" label="[04:29:58]">&lt;oriansj&gt;</a></span><span class="message">I knew something annoying was needed with risc-v to do this</span></div><div class="line" id="043002"><span class="nick" style="color:#80b1d3"><a href="#043002" label="[04:30:02]">&lt;muurkha&gt;</a></span><span class="message">moreover you can AUIPC once to get a base address and then LW and SW relative to that base address multiple times</span></div><div class="line" id="043012"><span class="nick" style="color:#80b1d3"><a href="#043012" label="[04:30:12]">&lt;muurkha&gt;</a></span><span class="message">a PC-relative base address I mean</span></div><div class="line" id="043027"><span class="nick" style="color:#80b1d3"><a href="#043027" label="[04:30:27]">&lt;muurkha&gt;</a></span><span class="message">as long as you don't clobber the register you put the PC-relative base pointer into</span></div><div class="line" id="043044"><span class="nick" style="color:#8dd3c7"><a href="#043044" label="[04:30:44]">&lt;oriansj&gt;</a></span><span class="message">muurkha: and remember to account for the dift</span></div><div class="line" id="043102"><span class="nick" style="color:#8dd3c7"><a href="#043102" label="[04:31:02]">&lt;oriansj&gt;</a></span><span class="message">as you move away from the PC you stored in a register</span></div><div class="line" id="043104"><span class="nick" style="color:#80b1d3"><a href="#043104" label="[04:31:04]">&lt;muurkha&gt;</a></span><span class="message">LW and SW can index off it with a signed 12-bit offset, giving you 4 KiB of PC-relative space</span></div><div class="line" id="043138"><span class="nick" style="color:#80b1d3"><a href="#043138" label="[04:31:38]">&lt;muurkha&gt;</a></span><span class="message">you don't need to account for the diff in each LW and SW instruction, just the original AUIPC instruction to load the base address of your PC-relative data page</span></div><div class="line" id="043221"><span class="nick" style="color:#80b1d3"><a href="#043221" label="[04:32:21]">&lt;muurkha&gt;</a></span><span class="message">if you need more than 4 KiB you do need a two-instruction combo every time you want to do a PC-relative load or store.  but that's also true of absolute loads and stores on RISC-V</span></div><div class="line" id="043231"><span class="nick" style="color:#80b1d3"><a href="#043231" label="[04:32:31]">&lt;muurkha&gt;</a></span><span class="message">it's just that in that case the first instruction is an LUI instead of an AUIPC</span></div><div class="line" id="043332"><span class="nick" style="color:#80b1d3"><a href="#043332" label="[04:33:32]">&lt;muurkha&gt;</a></span><span class="message">the standard RISC-V ABI reserves register x3 for &quot;gp&quot;, the global pointer</span></div><div class="line" id="043339"><span class="nick" style="color:#80b1d3"><a href="#043339" label="[04:33:39]">&lt;muurkha&gt;</a></span><span class="message">and x4 for &quot;tp&quot;, the thread pointer</span></div><div class="line" id="043417"><span class="nick" style="color:#80b1d3"><a href="#043417" label="[04:34:17]">&lt;muurkha&gt;</a></span><span class="message">those might be especially reasonable places to store base addresses for PC-relative statically allocated data</span></div><div class="line" id="043505"><span class="nick" style="color:#8dd3c7"><a href="#043505" label="[04:35:05]">&lt;oriansj&gt;</a></span><span class="message">down to 598</span></div><div class="line" id="043538"><span class="nick" style="color:#80b1d3"><a href="#043538" label="[04:35:38]">&lt;muurkha&gt;</a></span><span class="message">if you want to locate the base address of the data somewhere that isn't a multiple of 4KiB away from the instruction after the AUIPC, you can fix it up with an ADDI</span></div><div class="line" id="043656"><span class="nick" style="color:#80b1d3"><a href="#043656" label="[04:36:56]">&lt;muurkha&gt;</a></span><span class="message">the AUIPC/ADDI combo is the LA pseudoinstruction provided by many RISC-V assemblers</span></div><div class="line" id="043711"><span class="nick" style="color:#8dd3c7"><a href="#043711" label="[04:37:11]">&lt;oriansj&gt;</a></span><span class="message">well we only need a handful of things stored, so having 32 registers means we can store 28 things in registers instead of RAM</span></div><div class="line" id="043730"><span class="nick" style="color:#8dd3c7"><a href="#043730" label="[04:37:30]">&lt;oriansj&gt;</a></span><span class="message">which might end up being the superior solution</span></div><div class="line" id="043754"><span class="nick" style="color:#80b1d3"><a href="#043754" label="[04:37:54]">&lt;muurkha&gt;</a></span><span class="message">certainly to the extent that you can store things in registers it's desirable to do so</span></div><div class="line" id="043830"><span class="nick" style="color:#8dd3c7"><a href="#043830" label="[04:38:30]">&lt;oriansj&gt;</a></span><span class="message">well not all RISC-V have 32 registers... so yeah</span></div><div class="line" id="043842"><span class="nick" style="color:#80b1d3"><a href="#043842" label="[04:38:42]">&lt;muurkha&gt;</a></span><span class="message">all RV32I and RV64s do</span></div><div class="line" id="043853"><span class="nick" style="color:#80b1d3"><a href="#043853" label="[04:38:53]">&lt;muurkha&gt;</a></span><span class="message">I haven't actually seen an RV32E design yet (the 16-register variant)</span></div><div class="line" id="043855"><span class="nick" style="color:#8dd3c7"><a href="#043855" label="[04:38:55]">&lt;oriansj&gt;</a></span><span class="message">E only support 16 registers</span></div><div class="line" id="043908"><span class="nick" style="color:#80b1d3"><a href="#043908" label="[04:39:08]">&lt;muurkha&gt;</a></span><span class="message">right</span></div><div class="line" id="043939"><span class="nick" style="color:#80b1d3"><a href="#043939" label="[04:39:39]">&lt;muurkha&gt;</a></span><span class="message">but if you want more than 28 global variables, loading a global pointer gives you 1024 more 32-bit global variables or 512 64-bit ones</span></div><div class="line" id="043946"><span class="nick" style="color:#8dd3c7"><a href="#043946" label="[04:39:46]">&lt;oriansj&gt;</a></span><span class="message">and the proposed further reduced might only have r0-r4 so only 3 actual registers</span></div><div class="line" id="044006"><span class="nick" style="color:#80b1d3"><a href="#044006" label="[04:40:06]">&lt;muurkha&gt;</a></span><span class="message">haven't heard of that; I haven't even seen an RV32E design</span></div><div class="line" id="044007"><span class="nick" style="color:#8dd3c7"><a href="#044007" label="[04:40:07]">&lt;oriansj&gt;</a></span><span class="message">but that might never be ratified</span></div><div class="line" id="044129"><span class="nick" style="color:#8dd3c7"><a href="#044129" label="[04:41:29]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1248194/">https://paste.debian.net/1248194/</a>  598bytes and looks like more room to strip things remains</span></div><div class="line" id="044444"><span class="nick" style="color:#80b1d3"><a href="#044444" label="[04:44:44]">&lt;muurkha&gt;</a></span><span class="message">hmm, maybe SeRV does have an option to implement RV32E</span></div><div class="line" id="044844"><span class="nick" style="color:#8dd3c7"><a href="#044844" label="[04:48:44]">&lt;oriansj&gt;</a></span><span class="message">mihi: we can eliminate the DOS stub entirely</span></div><div class="line" id="044940"><span class="nick" style="color:#8dd3c7"><a href="#044940" label="[04:49:40]">&lt;oriansj&gt;</a></span><span class="message">I still haven't figured out how to move _start before 0x200 bytes into the file but I completely dropped that DOS stub</span></div><div class="line" id="045041"><span class="nick" style="color:#8dd3c7"><a href="#045041" label="[04:50:41]">&lt;oriansj&gt;</a></span><span class="message">check it out: <a rel="nofollow" href="https://paste.debian.net/1248195/">https://paste.debian.net/1248195/</a> </span></div><div class="line" id="045057"><span class="nick" style="color:#80b1d3"><a href="#045057" label="[04:50:57]">&lt;muurkha&gt;</a></span><span class="message">I did find an RV32E: <a rel="nofollow" href="https://codeberg.org/tok/attocore">https://codeberg.org/tok/attocore</a> </span></div><div class="line" id="045741"><span class="nick" style="color:#8dd3c7"><a href="#045741" label="[04:57:41]">&lt;oriansj&gt;</a></span><span class="message">darn I couldn't null out the data dictionaries</span></div><div class="line" id="051932"><span class="nick" style="color:#8dd3c7"><a href="#051932" label="[05:19:32]">&lt;oriansj&gt;</a></span><span class="message">534bytes</span></div><div class="line" id="060908"><span class="nick" style="color:#8dd3c7"><a href="#060908" label="[06:09:08]">&lt;oriansj&gt;</a></span><span class="message">finally freaking moved _start</span></div><div class="line" id="061224"><span class="nick" style="color:#8dd3c7"><a href="#061224" label="[06:12:24]">&lt;oriansj&gt;</a></span><span class="message">454bytes</span></div><div class="line" id="061558"><span class="nick" style="color:#8dd3c7"><a href="#061558" label="[06:15:58]">&lt;oriansj&gt;</a></span><span class="message">down to 16bytes of nulls that I haven't figured out how to remove yet</span></div><div class="line" id="061713"><span class="nick" style="color:#8dd3c7"><a href="#061713" label="[06:17:13]">&lt;oriansj&gt;</a></span><span class="message">boom: <a rel="nofollow" href="https://paste.debian.net/1248197/">https://paste.debian.net/1248197/</a> </span></div><div class="line" id="061810"><span class="nick" style="color:#8dd3c7"><a href="#061810" label="[06:18:10]">&lt;oriansj&gt;</a></span><span class="message">basically everything after line 129 is your hex program</span></div><div class="line" id="061847"><span class="nick" style="color:#8dd3c7"><a href="#061847" label="[06:18:47]">&lt;oriansj&gt;</a></span><span class="message">only the size lines need to be adjusted for bigger programs</span></div><div class="line" id="062004"><span class="nick" style="color:#8dd3c7"><a href="#062004" label="[06:20:04]">&lt;oriansj&gt;</a></span><span class="message">how to do: Number of whole/partial pages in hex2 seems like a problem</span></div><div class="line" id="062023"><span class="nick" style="color:#8dd3c7"><a href="#062023" label="[06:20:23]">&lt;oriansj&gt;</a></span><span class="message">but we can figure it out</span></div><div class="line" id="062103"><span class="nick" style="color:#8dd3c7"><a href="#062103" label="[06:21:03]">&lt;oriansj&gt;</a></span><span class="message">and I'm gonna get some sleep</span></div><div class="line" id="072257"><span class="nick" style="color:#80b1d3"><a href="#072257" label="[07:22:57]">&lt;muurkha&gt;</a></span><span class="message">nice, you're under half a K!</span></div><div class="line" id="075139"><span class="nick" style="color:#80b1d3"><a href="#075139" label="[07:51:39]">&lt;muurkha&gt;</a></span><span class="message">apparently zephyr can be built to run on RV32E: <a rel="nofollow" href="https://docs.zephyrproject.org/latest/boards/riscv/index.html">https://docs.zephyrproject.org/latest/boards/riscv/index.html</a> </span></div><div class="line" id="104440"><span class="nick" style="color:#6d2462"><a href="#104440" label="[10:44:40]">&lt;stikonas[m]&gt;</a></span><span class="message">yes, 454 bytes should be good enough to give us well under 1 KiB hex0.efi</span></div><div class="line" id="104531"><span class="nick" style="color:#6d2462"><a href="#104531" label="[10:45:31]">&lt;stikonas[m]&gt;</a></span><span class="message">but sure if we can get kaem.efi into another 1 KiB... I first need to optimize it a bit in stage0-posix</span></div><div class="line" id="131359"><span class="nick" style="color:#2e2a4a"><a href="#131359" label="[13:13:59]">&lt;stikonas&gt;</a></span><span class="message">oriansj: good progress. I'm now trying to use your header but I'm still a bit confused what needs changing. I tried adjusting  VirtualSize and SizeOfRawData but binary just gets stuck...</span></div><div class="line" id="131414"><span class="nick" style="color:#2e2a4a"><a href="#131414" label="[13:14:14]">&lt;stikonas&gt;</a></span><span class="message">but I think we should be fairly close now</span></div><div class="line" id="131417"><span class="nick" style="color:#2e2a4a"><a href="#131417" label="[13:14:17]">&lt;stikonas&gt;</a></span><span class="message">see <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/amd64/hex0.hex0">https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/amd64/hex0.hex0</a> </span></div><div class="line" id="131759"><span class="nick" style="color:#2e2a4a"><a href="#131759" label="[13:17:59]">&lt;stikonas&gt;</a></span><span class="message">perhaps something messed up in .hex0 code</span></div><div class="line" id="131806"><span class="nick" style="color:#2e2a4a"><a href="#131806" label="[13:18:06]">&lt;stikonas&gt;</a></span><span class="message">if I replace early bytes with exit, it works</span></div><div class="line" id="131846"><span class="nick" style="color:#2e2a4a"><a href="#131846" label="[13:18:46]">&lt;stikonas&gt;</a></span><span class="message">so that gives me some way of debbuging this</span></div><div class="line" id="132909"><span class="nick" style="color:#2e2a4a"><a href="#132909" label="[13:29:09]">&lt;stikonas&gt;</a></span><span class="message">hmm, yes, there are some errors that I made</span></div><div class="line" id="140942"><span class="nick" style="color:#2e2a4a"><a href="#140942" label="[14:09:42]">&lt;stikonas&gt;</a></span><span class="message">and done</span></div><div class="line" id="140949"><span class="nick" style="color:#2e2a4a"><a href="#140949" label="[14:09:49]">&lt;stikonas&gt;</a></span><span class="message">oriansj: we now have hex0.efi</span></div><div class="line" id="142033"><span class="nick" style="color:#2e2a4a"><a href="#142033" label="[14:20:33]">&lt;stikonas&gt;</a></span><span class="message">and pushed <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/amd64">https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/amd64</a> </span></div><div class="line" id="142107"><span class="nick" style="color:#2e2a4a"><a href="#142107" label="[14:21:07]">&lt;stikonas&gt;</a></span><span class="message">probably should later add Makefile to run production stuff (not development) in qemu...</span></div><div class="line" id="142205"><span class="nick" style="color:#8dd3c7"><a href="#142205" label="[14:22:05]">&lt;oriansj&gt;</a></span><span class="message">stikonas: very nicely done</span></div><div class="line" id="142219"><span class="nick" style="color:#2e2a4a"><a href="#142219" label="[14:22:19]">&lt;stikonas&gt;</a></span><span class="message">I'll now be away for some hours...</span></div><div class="line" id="142233"><span class="nick" style="color:#2e2a4a"><a href="#142233" label="[14:22:33]">&lt;stikonas&gt;</a></span><span class="message">but that's a good place to take a break</span></div><div class="line" id="142317"><span class="nick" style="color:#8dd3c7"><a href="#142317" label="[14:23:17]">&lt;oriansj&gt;</a></span><span class="message">as the next UEFI problem is how to adjust the page count in the binaries</span></div><div class="line" id="142323"><span class="nick" style="color:#2e2a4a"><a href="#142323" label="[14:23:23]">&lt;stikonas&gt;</a></span><span class="message">787 bytes now</span></div><div class="line" id="142336"><span class="nick" style="color:#2e2a4a"><a href="#142336" label="[14:23:36]">&lt;stikonas&gt;</a></span><span class="message">we need this when programs get bigger?</span></div><div class="line" id="142533"><span class="nick" style="color:#8dd3c7"><a href="#142533" label="[14:25:33]">&lt;oriansj&gt;</a></span><span class="message">we need this when we stop hand editing the PE header</span></div><div class="line" id="142552"><span class="nick" style="color:#2e2a4a"><a href="#142552" label="[14:25:52]">&lt;stikonas&gt;</a></span><span class="message">well, right now I only edited size of the binaries</span></div><div class="line" id="142608"><span class="nick" style="color:#2e2a4a"><a href="#142608" label="[14:26:08]">&lt;stikonas&gt;</a></span><span class="message">VirtualSize  SizeOfRawData and size of code</span></div><div class="line" id="142631"><span class="nick" style="color:#8dd3c7"><a href="#142631" label="[14:26:31]">&lt;oriansj&gt;</a></span><span class="message">which is fine for now, I'm just thinking about what needs to be done for binaries built by M2-Planet and above</span></div><div class="line" id="142647"><span class="nick" style="color:#2e2a4a"><a href="#142647" label="[14:26:47]">&lt;stikonas&gt;</a></span><span class="message">oh ok</span></div><div class="line" id="142657"><span class="nick" style="color:#2e2a4a"><a href="#142657" label="[14:26:57]">&lt;stikonas&gt;</a></span><span class="message">well, it will be a while till we get there...</span></div><div class="line" id="142706"><span class="nick" style="color:#2e2a4a"><a href="#142706" label="[14:27:06]">&lt;stikonas&gt;</a></span><span class="message">I should probably optimize stage0-posix binaries a bit...</span></div><div class="line" id="142732"><span class="nick" style="color:#2e2a4a"><a href="#142732" label="[14:27:32]">&lt;stikonas&gt;</a></span><span class="message">most of the code can be reused in uefi</span></div><div class="line" id="142746"><span class="nick" style="color:#2e2a4a"><a href="#142746" label="[14:27:46]">&lt;stikonas&gt;</a></span><span class="message">although different callling conventions sometimes mess things up a bit</span></div><div class="line" id="142810"><span class="nick" style="color:#8dd3c7"><a href="#142810" label="[14:28:10]">&lt;oriansj&gt;</a></span><span class="message">well, stage0-posix binaries effectively are working UEFI binaries once they get the new PE header and we swap out the syscalls (and convert to RIP for our labels)</span></div><div class="line" id="142859"><span class="nick" style="color:#8dd3c7"><a href="#142859" label="[14:28:59]">&lt;oriansj&gt;</a></span><span class="message">so yeah, much smaller task</span></div><div class="line" id="143014"><span class="nick" style="color:#2e2a4a"><a href="#143014" label="[14:30:14]">&lt;stikonas&gt;</a></span><span class="message">well, calling conventions are a bit different</span></div><div class="line" id="143017"><span class="nick" style="color:#2e2a4a"><a href="#143017" label="[14:30:17]">&lt;stikonas&gt;</a></span><span class="message">different registers are volatile</span></div><div class="line" id="143031"><span class="nick" style="color:#2e2a4a"><a href="#143031" label="[14:30:31]">&lt;stikonas&gt;</a></span><span class="message">so we might need to make sure everything is pushed/poped onto stack</span></div><div class="line" id="143054"><span class="nick" style="color:#8dd3c7"><a href="#143054" label="[14:30:54]">&lt;oriansj&gt;</a></span><span class="message">but that can be contained entirely in the syscall functions</span></div><div class="line" id="143058"><span class="nick" style="color:#2e2a4a"><a href="#143058" label="[14:30:58]">&lt;stikonas&gt;</a></span><span class="message">yes</span></div><div class="line" id="143117"><span class="nick" style="color:#2e2a4a"><a href="#143117" label="[14:31:17]">&lt;stikonas&gt;</a></span><span class="message">well, in hex0.efi I also used rdi instead of rbp in stage0-uefi</span></div><div class="line" id="143127"><span class="nick" style="color:#2e2a4a"><a href="#143127" label="[14:31:27]">&lt;stikonas&gt;</a></span><span class="message">as I wanted to use rbp to save stack pointer</span></div><div class="line" id="143155"><span class="nick" style="color:#2e2a4a"><a href="#143155" label="[14:31:55]">&lt;stikonas&gt;</a></span><span class="message">and posix-amd64 uses rbp because rdi is volatile</span></div><div class="line" id="143212"><span class="nick" style="color:#2e2a4a"><a href="#143212" label="[14:32:12]">&lt;stikonas&gt;</a></span><span class="message">but once we go past bootstrap binaries, binary size matters less</span></div><div class="line" id="143224"><span class="nick" style="color:#8dd3c7"><a href="#143224" label="[14:32:24]">&lt;oriansj&gt;</a></span><span class="message">stikonas: indeed</span></div><div class="line" id="143231"><span class="nick" style="color:#2e2a4a"><a href="#143231" label="[14:32:31]">&lt;stikonas&gt;</a></span><span class="message">in any case rbp-&gt;rdi only affected a few lines</span></div><div class="line" id="143325"><span class="nick" style="color:#2e2a4a"><a href="#143325" label="[14:33:25]">&lt;stikonas&gt;</a></span><span class="message">maybe we should also try to see if header can be compressed further...</span></div><div class="line" id="143325"><span class="nick" style="color:#8dd3c7"><a href="#143325" label="[14:33:25]">&lt;oriansj&gt;</a></span><span class="message">also we will end up having to make UEFI M2libc support, which ironically would enable UEFI binaries that are the same as POSIX binaries</span></div><div class="line" id="143408"><span class="nick" style="color:#8dd3c7"><a href="#143408" label="[14:34:08]">&lt;oriansj&gt;</a></span><span class="message">well there is only 16bytes I couldn't figure out how to eliminate and the optional header that UEFI seems to think isn't optional</span></div><div class="line" id="143554"><span class="nick" style="color:#2e2a4a"><a href="#143554" label="[14:35:54]">&lt;stikonas&gt;</a></span><span class="message">and nothing more can be zeroed?</span></div><div class="line" id="143636"><span class="nick" style="color:#8dd3c7"><a href="#143636" label="[14:36:36]">&lt;oriansj&gt;</a></span><span class="message">well right now 85.4626% of my example is zeros</span></div><div class="line" id="143651"><span class="nick" style="color:#2e2a4a"><a href="#143651" label="[14:36:51]">&lt;stikonas&gt;</a></span><span class="message">well, maybe we can push it to bootstrap-seeds then...</span></div><div class="line" id="143653"><span class="nick" style="color:#2e2a4a"><a href="#143653" label="[14:36:53]">&lt;stikonas&gt;</a></span><span class="message">let me make a PR...</span></div><div class="line" id="144052"><span class="nick" style="color:#2e2a4a"><a href="#144052" label="[14:40:52]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds/pull/22">https://github.com/oriansj/bootstrap-seeds/pull/22</a> </span></div><div class="line" id="144425"><span class="nick" style="color:#8dd3c7"><a href="#144425" label="[14:44:25]">&lt;oriansj&gt;</a></span><span class="message">merged, thank you stikonas for all your hard work</span></div><div class="line" id="144455"><span class="nick" style="color:#2e2a4a"><a href="#144455" label="[14:44:55]">&lt;stikonas&gt;</a></span><span class="message">you did half of the work...</span></div><div class="line" id="144519"><span class="nick" style="color:#8dd3c7"><a href="#144519" label="[14:45:19]">&lt;oriansj&gt;</a></span><span class="message">correction, I did half the fun ^_^</span></div><div class="line" id="144524"><span class="nick" style="color:#2e2a4a"><a href="#144524" label="[14:45:24]">&lt;stikonas&gt;</a></span><span class="message">the nice thing about  UEFI is that it should be easy to automate...</span></div><div class="line" id="144548"><span class="nick" style="color:#2e2a4a"><a href="#144548" label="[14:45:48]">&lt;stikonas&gt;</a></span><span class="message">so one can create automatic chains, build some POSIX kernel, and automatically continue to GCC</span></div><div class="line" id="144550"><span class="nick" style="color:#2e2a4a"><a href="#144550" label="[14:45:50]">&lt;stikonas&gt;</a></span><span class="message">eventually...</span></div><div class="line" id="144654"><span class="nick" style="color:#8dd3c7"><a href="#144654" label="[14:46:54]">&lt;oriansj&gt;</a></span><span class="message">knowing this group, we can get there faster than expected</span></div><div class="line" id="144844"><span class="nick" style="color:#8dd3c7"><a href="#144844" label="[14:48:44]">&lt;oriansj&gt;</a></span><span class="message">plus, I'll probably learn alot along the way</span></div><div class="line" id="145222"><span class="nick" style="color:#8dd3c7"><a href="#145222" label="[14:52:22]">&lt;oriansj&gt;</a></span><span class="message">after I get enough time to setup a git repo on bootstrapping.world, I'll probably upload my notes as they seem useful for new people wanting to learn</span></div><div class="line" id="145638"><span class="nick" style="color:#6d2462"><a href="#145638" label="[14:56:38]">&lt;stikonas[m]&gt;</a></span><span class="message">What is are you running there?</span></div><div class="line" id="145651"><span class="nick" style="color:#6d2462"><a href="#145651" label="[14:56:51]">&lt;stikonas[m]&gt;</a></span><span class="message">s/is/OS/ ?</span></div><div class="line" id="145708"><span class="nick" style="color:#6d2462"><a href="#145708" label="[14:57:08]">&lt;stikonas[m]&gt;</a></span><span class="message">We can probably just install some distro packages</span></div><div class="line" id="152430"><span class="nick" style="color:#234e69"><a href="#152430" label="[15:24:30]">&lt;mihi&gt;</a></span><span class="message">oriansj, stikonas[m]: what problems did you run into when trying to zero CountBytesLastPage and CountPages in the MZ header? According to PE spec, it should be valid if both are zero, it will use the size of the file in this case. I also tested with some (not digitally signed) UEFI binaries with UEFI hexedit to zero it, and on my machines they still boot.</span></div><div class="line" id="152458"><span class="nick" style="color:#8dd3c7"><a href="#152458" label="[15:24:58]">&lt;oriansj&gt;</a></span><span class="message">well currently it is Debian 5.10.120-1</span></div><div class="line" id="152516"><span class="nick" style="color:#234e69"><a href="#152516" label="[15:25:16]">&lt;mihi&gt;</a></span><span class="message">(obviously if you want to append resources to the PE file, as in self-extracting archive files on Windows, the fields are needed to tell the loader where the image ends and the resources start)</span></div><div class="line" id="152639"><span class="nick" style="color:#8dd3c7"><a href="#152639" label="[15:26:39]">&lt;oriansj&gt;</a></span><span class="message">mihi: I believe stikonas figured that out but no it is unlikely for us to add resources to our PE files (unless we choose to append the sources)</span></div><div class="line" id="153659"><span class="nick" style="color:#234e69"><a href="#153659" label="[15:36:59]">&lt;mihi&gt;</a></span><span class="message">oriansj, I assume that is the kernel version running on Debian 11 :)</span></div><div class="line" id="153830"><span class="nick" style="color:#234e69"><a href="#153830" label="[15:38:30]">&lt;mihi&gt;</a></span><span class="message">I am not aware of any turnkey Debian packages for setting up a git server. If you want to push via ssh, you probably want to restrict the commands the people can run (via rbash or sshd_config or similar), if you want to push via git-http-backend CGI, setting up some basic webserver config is something you probably have to do yourself.</span></div><div class="line" id="153924"><span class="nick" style="color:#234e69"><a href="#153924" label="[15:39:24]">&lt;mihi&gt;</a></span><span class="message">if all your users are fully trusted (not to use TCP forwarding or install a bitcoin miner), all you have to do is create a shared directory with correct permissions (sgid some group).</span></div><div class="line" id="154115"><span class="nick" style="color:#234e69"><a href="#154115" label="[15:41:15]">&lt;mihi&gt;</a></span><span class="message">(after installing sshd and git, obviously)</span></div><div class="line" id="154525"><span class="nick" style="color:#234e69"><a href="#154525" label="[15:45:25]">&lt;mihi&gt;</a></span><span class="message">git-shell (as login shell) or gitolite (as separate user) would be other options to restrict ssh access; note that neither of these provide ways for users to self-service (change) their SSH keys.</span></div><div class="line" id="160812"><span class="nick" style="color:#8dd3c7"><a href="#160812" label="[16:08:12]">&lt;oriansj&gt;</a></span><span class="message">mihi: well only people here would be getting access to create repos/push changes to them</span></div><div class="line" id="160947"><span class="nick" style="color:#8dd3c7"><a href="#160947" label="[16:09:47]">&lt;oriansj&gt;</a></span><span class="message">there isn't likely going to be much free compute for a bitcoin miner as we will be doing builds on it as well</span></div><div class="line" id="161151"><span class="nick" style="color:#8dd3c7"><a href="#161151" label="[16:11:51]">&lt;oriansj&gt;</a></span><span class="message">and I do have documented steps for that setup: <a rel="nofollow" href="https://paste.debian.net/1248236/">https://paste.debian.net/1248236/</a> </span></div><div class="line" id="161428"><span class="nick" style="color:#8dd3c7"><a href="#161428" label="[16:14:28]">&lt;oriansj&gt;</a></span><span class="message">as for using the server for TCP forwarding; well if they are willing to do: ssh -L 8080:localhost:9050 username@host I can install a tor service on the server and the traffic can go on its merry way</span></div><div class="line" id="161734"><span class="nick" style="color:#8dd3c7"><a href="#161734" label="[16:17:34]">&lt;oriansj&gt;</a></span><span class="message">but if they do something other than that, there will be logs on the outbound linked to their ssh credentials... so yeah</span></div><div class="line" id="161930"><span class="nick" style="color:#8dd3c7"><a href="#161930" label="[16:19:30]">&lt;oriansj&gt;</a></span><span class="message">doing ssh -D 8080 username@host will just get all of your web traffic logged and tagged with your username</span></div><div class="line" id="162122"><span class="nick" style="color:#8dd3c7"><a href="#162122" label="[16:21:22]">&lt;oriansj&gt;</a></span><span class="message">because I understand people being in an environment where tor is forbidden and a private entry node sometimes is just what they need</span></div><div class="line" id="162234"><span class="nick" style="color:#8dd3c7"><a href="#162234" label="[16:22:34]">&lt;oriansj&gt;</a></span><span class="message">and giving someone here a 100GB of network traffic to help them out is a small price to pay</span></div><div class="line" id="162938"><span class="nick" style="color:#8dd3c7"><a href="#162938" label="[16:29:38]">&lt;oriansj&gt;</a></span><span class="message">in the case of someone putting a crypto miner on the server, I'll just set their default priority so that they get compute last and they are free to leverage any unused CPU cycles</span></div><div class="line" id="163105"><span class="nick" style="color:#8dd3c7"><a href="#163105" label="[16:31:05]">&lt;oriansj&gt;</a></span><span class="message">if the useful services and other users don't need the CPU cycles, why would anyone care if someone finds a use for them?</span></div><div class="line" id="163218"><span class="nick" style="color:#8dd3c7"><a href="#163218" label="[16:32:18]">&lt;oriansj&gt;</a></span><span class="message">now if that server was in my home and I'd have to pay for the extra electricity, then I'd care but on a rented server or a colo-rack where electricity is included in the price; I wouldn't care</span></div><div class="line" id="163347"><span class="nick" style="color:#8dd3c7"><a href="#163347" label="[16:33:47]">&lt;oriansj&gt;</a></span><span class="message">if the company renting the server or colo-rack had a problem with it, then I might have to take a different position to ensure the services remained available</span></div><div class="line" id="163738"><span class="nick" style="color:#8dd3c7"><a href="#163738" label="[16:37:38]">&lt;oriansj&gt;</a></span><span class="message">good catch on the incorrect comment by the way</span></div><div class="line" id="164401"><span class="nick" style="color:#8dd3c7"><a href="#164401" label="[16:44:01]">&lt;oriansj&gt;</a></span><span class="message">fixed</span></div><div class="line" id="220328"><span class="nick" style="color:#6d2462"><a href="#220328" label="[22:03:28]">&lt;stikonas[m]&gt;</a></span><span class="message">mihi, I haven't tried to zero those yet, we can try</span></div><div class="line" id="220345"><span class="nick" style="color:#6d2462"><a href="#220345" label="[22:03:45]">&lt;stikonas[m]&gt;</a></span><span class="message">I mostly just took the header that oriansj prepared and just adjusted necessary things</span></div><div class="line" id="220659"><span class="nick" style="color:#6d2462"><a href="#220659" label="[22:06:59]">&lt;stikonas[m]&gt;</a></span><span class="message">hmm, yes debian doesn't seam to package git hosting stuff, there are only unofficial packages</span></div><div class="line" id="220726"><span class="nick" style="color:#2e2a4a"><a href="#220726" label="[22:07:26]">&lt;stikonas&gt;</a></span><span class="message">oriansj: what if we configure rootless podman and run something in container?</span></div><div class="line" id="220736"><span class="nick" style="color:#2e2a4a"><a href="#220736" label="[22:07:36]">&lt;stikonas&gt;</a></span><span class="message">that way we don't need root to administer it</span></div><div class="line" id="221110"><span class="nick" style="color:#6d2462"><a href="#221110" label="[22:11:10]">&lt;stikonas[m]&gt;</a></span><span class="message">one just needs to configure subuid, subgit and install some packages as root first to get rootless podman working and after that it might just require normal unprivileged user</span></div><div class="line" id="221827"><span class="nick" style="color:#2e2a4a"><a href="#221827" label="[22:18:27]">&lt;stikonas&gt;</a></span><span class="message">yes, i think we can zero those 2 entries in MZ header that mihi mentioned</span></div><div class="line" id="224213"><span class="nick" style="color:#2e2a4a"><a href="#224213" label="[22:42:13]">&lt;stikonas&gt;</a></span><span class="message">and  there is still a bug in kaem.c</span></div><div class="line" id="224220"><span class="nick" style="color:#2e2a4a"><a href="#224220" label="[22:42:20]">&lt;stikonas&gt;</a></span><span class="message">it can only run one command</span></div><div class="line" id="224239"><span class="nick" style="color:#2e2a4a"><a href="#224239" label="[22:42:39]">&lt;stikonas&gt;</a></span><span class="message">but probably some parsing bug, nothing to do with UEFI</span></div><div class="line" id="224829"><span class="nick" style="color:#2e2a4a"><a href="#224829" label="[22:48:29]">&lt;stikonas&gt;</a></span><span class="message">quite a few more PE fields can be set to 0. all characteristics, etc...</span></div><div class="line" id="225152"><span class="nick" style="color:#8dd3c7"><a href="#225152" label="[22:51:52]">&lt;oriansj&gt;</a></span><span class="message">well refinement is expected.</span></div><div class="line" id="225307"><span class="nick" style="color:#8dd3c7"><a href="#225307" label="[22:53:07]">&lt;oriansj&gt;</a></span><span class="message">and guix packages are also an option, as are complex build/setups using any standard automation tool (like ansible, puppet, chef, salt, etc)</span></div><div class="line" id="225512"><span class="nick" style="color:#8dd3c7"><a href="#225512" label="[22:55:12]">&lt;oriansj&gt;</a></span><span class="message">we could do the whole Kubernetes cluster thing if we really wanted.</span></div><div class="line" id="225903"><span class="nick" style="color:#2e2a4a"><a href="#225903" label="[22:59:03]">&lt;stikonas&gt;</a></span><span class="message">not worth the hassle...</span></div><div class="line" id="225913"><span class="nick" style="color:#2e2a4a"><a href="#225913" label="[22:59:13]">&lt;stikonas&gt;</a></span><span class="message">especially with only 1 host...</span></div><div class="line" id="225950"><span class="nick" style="color:#2e2a4a"><a href="#225950" label="[22:59:50]">&lt;stikonas&gt;</a></span><span class="message">setting up Kubernetes might be worth for big provider with multiple redundant hosts</span></div><div class="line" id="230014"><span class="nick" style="color:#2e2a4a"><a href="#230014" label="[23:00:14]">&lt;stikonas&gt;</a></span><span class="message">but it's probably overkill for our usecase</span></div><div class="line" id="230236"><span class="nick" style="color:#2e2a4a"><a href="#230236" label="[23:02:36]">&lt;stikonas&gt;</a></span><span class="message">hmm, even size of code from COFF header seems to be ignored</span></div><div class="line" id="231016"><span class="nick" style="color:#2e2a4a"><a href="#231016" label="[23:10:16]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I think I've now zeroed everything possible <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi/commit/e51956a58cb0f229a82b6b76a3bc00dc648cec94">https://git.stikonas.eu/andrius/stage0-uefi/commit/e51956a58cb0f229a82b6b76a3bc00dc648cec94</a> </span></div><div class="line" id="231140"><span class="nick" style="color:#2e2a4a"><a href="#231140" label="[23:11:40]">&lt;stikonas&gt;</a></span><span class="message">bit it would be good to try it on baremetal before pushing to bootstrap-seeds</span></div><div class="line" id="231530"><span class="nick" style="color:#8dd3c7"><a href="#231530" label="[23:15:30]">&lt;oriansj&gt;</a></span><span class="message">nice, unfortunately I have no UEFI hardware (As I run on Librebooted machines personally)</span></div><div class="line" id="232156"><span class="nick" style="color:#2e2a4a"><a href="#232156" label="[23:21:56]">&lt;stikonas&gt;</a></span><span class="message">well, my laptop has UEFI, so I can try it, but maybe tomorrow</span></div><div class="line" id="232258"><span class="nick" style="color:#2e2a4a"><a href="#232258" label="[23:22:58]">&lt;stikonas&gt;</a></span><span class="message">though I suspect most of hardware is actually running the same tianocore stuff at higher levels (only hardware initialization stuff might differ)</span></div><div class="line" id="233326"><span class="nick" style="color:#8dd3c7"><a href="#233326" label="[23:33:26]">&lt;oriansj&gt;</a></span><span class="message">thus far I am looking at pagure, gitile, gitea, sourcehut and Kallithea as options to setup for the git repo</span></div><div class="line" id="233353"><span class="nick" style="color:#2e2a4a"><a href="#233353" label="[23:33:53]">&lt;stikonas&gt;</a></span><span class="message">I've only tried gitea and gitlab. gitlab was a huge resource hog...</span></div><div class="line" id="233429"><span class="nick" style="color:#2e2a4a"><a href="#233429" label="[23:34:29]">&lt;stikonas&gt;</a></span><span class="message">gitea is significantly smaller and similar GUI (although it does not have any integrated CI)</span></div><div class="line" id="233436"><span class="nick" style="color:#8dd3c7"><a href="#233436" label="[23:34:36]">&lt;oriansj&gt;</a></span><span class="message">in terms of disk? CPU? RAM?</span></div><div class="line" id="233515"><span class="nick" style="color:#2e2a4a"><a href="#233515" label="[23:35:15]">&lt;stikonas&gt;</a></span><span class="message">I think mostly RAM</span></div><div class="line" id="233537"><span class="nick" style="color:#2e2a4a"><a href="#233537" label="[23:35:37]">&lt;stikonas&gt;</a></span><span class="message">it was on arm64 SoC, so RAM was fairly limited</span></div><div class="line" id="233606"><span class="nick" style="color:#2e2a4a"><a href="#233606" label="[23:36:06]">&lt;stikonas&gt;</a></span><span class="message">but I guess disk and CPU are also more used in gitalb</span></div><div class="line" id="233610"><span class="nick" style="color:#2e2a4a"><a href="#233610" label="[23:36:10]">&lt;stikonas&gt;</a></span><span class="message">gitlab</span></div><div class="line" id="233617"><span class="nick" style="color:#8dd3c7"><a href="#233617" label="[23:36:17]">&lt;oriansj&gt;</a></span><span class="message">I'm not a huge fan of Gitlab because it requires people to run JavaScript to see anything</span></div><div class="line" id="233648"><span class="nick" style="color:#2e2a4a"><a href="#233648" label="[23:36:48]">&lt;stikonas&gt;</a></span><span class="message">well, yes... And also resource intensive like I said...</span></div><div class="line" id="233813"><span class="nick" style="color:#8dd3c7"><a href="#233813" label="[23:38:13]">&lt;oriansj&gt;</a></span><span class="message">also we don't require an Integrated build service but it would be nice to have one available without worrying about limits</span></div><div class="line" id="233917"><span class="nick" style="color:#80b1d3"><a href="#233917" label="[23:39:17]">&lt;muurkha&gt;</a></span><span class="message">oriansj: agreed, but it feels like an improvement over github in that the server software is free</span></div><div class="line" id="233936"><span class="nick" style="color:#80b1d3"><a href="#233936" label="[23:39:36]">&lt;muurkha&gt;</a></span><span class="message">I haven't heard of pagure, gitile, and Kallithea</span></div><div class="line" id="233940"><span class="nick" style="color:#2e2a4a"><a href="#233940" label="[23:39:40]">&lt;stikonas&gt;</a></span><span class="message">well, in the worst case we can use a separate CI...</span></div><div class="line" id="233949"><span class="nick" style="color:#2e2a4a"><a href="#233949" label="[23:39:49]">&lt;stikonas&gt;</a></span><span class="message">yes, I haven't heard about pagure gitile or Kallithea</span></div><div class="line" id="233956"><span class="nick" style="color:#80b1d3"><a href="#233956" label="[23:39:56]">&lt;muurkha&gt;</a></span><span class="message">yeah, the gitlab CI stuff is nice</span></div><div class="line" id="234030"><span class="nick" style="color:#80b1d3"><a href="#234030" label="[23:40:30]">&lt;muurkha&gt;</a></span><span class="message">people on #riscv pointed out that the current RV32E spec is still a draft</span></div><div class="line" id="234051"><span class="nick" style="color:#2e2a4a"><a href="#234051" label="[23:40:51]">&lt;stikonas&gt;</a></span><span class="message">yes, but even if we don't have integrated CI, I can set up Jenkins or something like that...</span></div><div class="line" id="234124"><span class="nick" style="color:#80b1d3"><a href="#234124" label="[23:41:24]">&lt;muurkha&gt;</a></span><span class="message">yeah, and also CI is not rocket science</span></div><div class="line" id="234210"><span class="nick" style="color:#80b1d3"><a href="#234210" label="[23:42:10]">&lt;muurkha&gt;</a></span><span class="message">a git post-update hook can run wget or curl or touch or whatever to kick off a regression test script</span></div><div class="line" id="234301"><span class="nick" style="color:#80b1d3"><a href="#234301" label="[23:43:01]">&lt;muurkha&gt;</a></span><span class="message">64% of the benefit of gitlab CI for 4% of the effort</span></div><div class="line" id="234312"><span class="nick" style="color:#8dd3c7"><a href="#234312" label="[23:43:12]">&lt;oriansj&gt;</a></span><span class="message">muurkha: well the big problem is I only have so much time, of which I hope only a subset is needed to maintain/update/etc the service</span></div><div class="line" id="234326"><span class="nick" style="color:#80b1d3"><a href="#234326" label="[23:43:26]">&lt;muurkha&gt;</a></span><span class="message">of course</span></div><div class="line" id="234356"><span class="nick" style="color:#8dd3c7"><a href="#234356" label="[23:43:56]">&lt;oriansj&gt;</a></span><span class="message">paying for the servers is easy, administration however takes time</span></div><div class="line" id="234440"><span class="nick" style="color:#8dd3c7"><a href="#234440" label="[23:44:40]">&lt;oriansj&gt;</a></span><span class="message">and unless someone wants an admin account to take up that responsibility, I am left trying to figure out the least effort option</span></div><div class="line" id="234442"><span class="nick" style="color:#80b1d3"><a href="#234442" label="[23:44:42]">&lt;muurkha&gt;</a></span><span class="message">gitlab CI gives you containers, a status page for the CI run (linked from the commit), yaml to configure it, and a work queue/worker pool system to do the CI runs</span></div><div class="line" id="234509"><span class="nick" style="color:#80b1d3"><a href="#234509" label="[23:45:09]">&lt;muurkha&gt;</a></span><span class="message">it's definitely easier</span></div><div class="line" id="234528"><span class="nick" style="color:#8dd3c7"><a href="#234528" label="[23:45:28]">&lt;oriansj&gt;</a></span><span class="message">yeah, gitlab isn't an option I'm considering due to personal preferences</span></div><div class="line" id="234539"><span class="nick" style="color:#80b1d3"><a href="#234539" label="[23:45:39]">&lt;muurkha&gt;</a></span><span class="message">probably some of the others have similar features</span></div><div class="line" id="234558"><span class="nick" style="color:#8dd3c7"><a href="#234558" label="[23:45:58]">&lt;oriansj&gt;</a></span><span class="message">pagure-ci seems to be featureful</span></div><div class="line" id="234609"><span class="nick" style="color:#8dd3c7"><a href="#234609" label="[23:46:09]">&lt;oriansj&gt;</a></span><span class="message">for continious integration</span></div><div class="line" id="234635"><span class="nick" style="color:#80b1d3"><a href="#234635" label="[23:46:35]">&lt;muurkha&gt;</a></span><span class="message">but what I'm saying is that if you want automatic builds and test runs on commit, kicking them off from .git/hooks/post-update is not difficult</span></div><div class="line" id="234735"><span class="nick" style="color:#2e2a4a"><a href="#234735" label="[23:47:35]">&lt;stikonas&gt;</a></span><span class="message">administration shouldn't be too bad once initial setup is done</span></div><div class="line" id="234752"><span class="nick" style="color:#2e2a4a"><a href="#234752" label="[23:47:52]">&lt;stikonas&gt;</a></span><span class="message">even mail server setup that I'm running doesn't need much maintenance</span></div><div class="line" id="234905"><span class="nick" style="color:#8dd3c7"><a href="#234905" label="[23:49:05]">&lt;oriansj&gt;</a></span><span class="message">fair, also public backups folder for the data make for a cheap recovery if things go wrong.</span></div><div class="line" id="234919"><span class="nick" style="color:#8dd3c7"><a href="#234919" label="[23:49:19]">&lt;oriansj&gt;</a></span><span class="message">and I'll be doing a scripted setup that will be made available</span></div><div class="line" id="235056"><span class="nick" style="color:#2e2a4a"><a href="#235056" label="[23:50:56]">&lt;stikonas&gt;</a></span><span class="message">I did use <a rel="nofollow" href="https://github.com/geerlingguy/ansible-role-jenkins">https://github.com/geerlingguy/ansible-role-jenkins</a>  before to setup Jenkins if we have to go that route.</span></div><div class="line" id="235113"><span class="nick" style="color:#8dd3c7"><a href="#235113" label="[23:51:13]">&lt;oriansj&gt;</a></span><span class="message">I could even pay someone to do the work assuming</span></div><div class="line" id="235125"><span class="nick" style="color:#2e2a4a"><a href="#235125" label="[23:51:25]">&lt;stikonas&gt;</a></span><span class="message">we should be able to set it up ourselves...</span></div><div class="line" id="235127"><span class="nick" style="color:#8dd3c7"><a href="#235127" label="[23:51:27]">&lt;oriansj&gt;</a></span><span class="message">they don't ask for some amount I can't afford</span></div><div class="line" id="235206"><span class="nick" style="color:#8dd3c7"><a href="#235206" label="[23:52:06]">&lt;oriansj&gt;</a></span><span class="message">true</span></div><div class="line" id="235249"><span class="nick" style="color:#2e2a4a"><a href="#235249" label="[23:52:49]">&lt;stikonas&gt;</a></span><span class="message">it's probably harder to pick the hosting system</span></div><div class="line" id="235251"><span class="nick" style="color:#2e2a4a"><a href="#235251" label="[23:52:51]">&lt;stikonas&gt;</a></span><span class="message">than to install it</span></div><div class="line" id="235320"><span class="nick" style="color:#8dd3c7"><a href="#235320" label="[23:53:20]">&lt;oriansj&gt;</a></span><span class="message">true</span></div><div class="line" id="235335"><span class="nick" style="color:#8dd3c7"><a href="#235335" label="[23:53:35]">&lt;oriansj&gt;</a></span><span class="message">too many reasonable options</span></div><div class="line" id="235943"><span class="nick" style="color:#2e2a4a"><a href="#235943" label="[23:59:43]">&lt;stikonas&gt;</a></span><span class="message">hmm, personally I think I like gitea UI most as it's familiar to most people (very similar to github). And it's only a single binary. Downsides are slightly harder to configure CI</span></div><div class="line" id="235956"><span class="nick" style="color:#2e2a4a"><a href="#235956" label="[23:59:56]">&lt;stikonas&gt;</a></span><span class="message">we need to set up something separately</span></div><br /></div></body></html>