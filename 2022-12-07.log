<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-12-07.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="010342"><span class="nick" style="color:#389600"><a href="#010342" label="[01:03:42]">&lt;stikonas&gt;</a></span><span class="message">oriansj: do you remember why we have current_target-&gt;indirect-&gt;size here <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/blob/master/cc_core.c#L1162">https://github.com/oriansj/M2-Planet/blob/master/cc_core.c#L1162</a>  ?</span></div><div class="line" id="010352"><span class="nick" style="color:#389600"><a href="#010352" label="[01:03:52]">&lt;stikonas&gt;</a></span><span class="message">in particular why indirect?</span></div><div class="line" id="010602"><span class="nick" style="color:#389600"><a href="#010602" label="[01:06:02]">&lt;stikonas&gt;</a></span><span class="message">do we not want to add size of the object to address when we calculate a[1]?</span></div><div class="line" id="010613"><span class="nick" style="color:#389600"><a href="#010613" label="[01:06:13]">&lt;stikonas&gt;</a></span><span class="message">rather than size of pointer type</span></div><div class="line" id="010924"><span class="nick" style="color:#389600"><a href="#010924" label="[01:09:24]">&lt;stikonas&gt;</a></span><span class="message">i.e. if sizeof(a) is let's say 24</span></div><div class="line" id="010936"><span class="nick" style="color:#389600"><a href="#010936" label="[01:09:36]">&lt;stikonas&gt;</a></span><span class="message">we should just use offset expression * 24</span></div><div class="line" id="011044"><span class="nick" style="color:#389600"><a href="#011044" label="[01:10:44]">&lt;stikonas&gt;</a></span><span class="message">rather than expression &lt;&lt; log2(8) (on 64-bit arches)</span></div><div class="line" id="011225"><span class="nick" style="color:#389600"><a href="#011225" label="[01:12:25]">&lt;stikonas&gt;</a></span><span class="message">was it an optimization from when the type size was only power of 2...</span></div><div class="line" id="025950"><span class="nick" style="color:#8dd3c7"><a href="#025950" label="[02:59:50]">&lt;oriansj&gt;</a></span><span class="message">stikonas: I believe that is for an array of objects; we do the cheap thing and allocate a 2^n size block for each index; so that we can index it cheaply by just doing a bitshift of the index (no muliplication)</span></div><div class="line" id="030024"><span class="nick" style="color:#389600"><a href="#030024" label="[03:00:24]">&lt;stikonas&gt;</a></span><span class="message">ok, so we can't do this optimization for structs</span></div><div class="line" id="030105"><span class="nick" style="color:#389600"><a href="#030105" label="[03:01:05]">&lt;stikonas&gt;</a></span><span class="message">which is a blocker for getting struct a[i].member working</span></div><div class="line" id="030120"><span class="nick" style="color:#8dd3c7"><a href="#030120" label="[03:01:20]">&lt;oriansj&gt;</a></span><span class="message">unfortunately</span></div><div class="line" id="030137"><span class="nick" style="color:#389600"><a href="#030137" label="[03:01:37]">&lt;stikonas&gt;</a></span><span class="message">I'll see if I can fix it</span></div><div class="line" id="030142"><span class="nick" style="color:#389600"><a href="#030142" label="[03:01:42]">&lt;stikonas&gt;</a></span><span class="message">but there are other issues</span></div><div class="line" id="030228"><span class="nick" style="color:#389600"><a href="#030228" label="[03:02:28]">&lt;stikonas&gt;</a></span><span class="message">so might take a while</span></div><div class="line" id="030302"><span class="nick" style="color:#8dd3c7"><a href="#030302" label="[03:03:02]">&lt;oriansj&gt;</a></span><span class="message">understandably</span></div><div class="line" id="030338"><span class="nick" style="color:#389600"><a href="#030338" label="[03:03:38]">&lt;stikonas&gt;</a></span><span class="message">in particular I need to define struct ** type</span></div><div class="line" id="030342"><span class="nick" style="color:#389600"><a href="#030342" label="[03:03:42]">&lt;stikonas&gt;</a></span><span class="message">n cc_types.c</span></div><div class="line" id="030407"><span class="nick" style="color:#389600"><a href="#030407" label="[03:04:07]">&lt;stikonas&gt;</a></span><span class="message">and fix backlinks, so that current_target-&gt;type works for structs</span></div><div class="line" id="030935"><span class="nick" style="color:#8dd3c7"><a href="#030935" label="[03:09:35]">&lt;oriansj&gt;</a></span><span class="message">sounds exciting</span></div><div class="line" id="133350"><span class="nick" style="color:#2e2a4a"><a href="#133350" label="[13:33:50]">&lt;drakonis&gt;</a></span><span class="message">hm, zig no longer has any c++ in its bootstrap path</span></div><div class="line" id="133847"><span class="nick" style="color:#389600"><a href="#133847" label="[13:38:47]">&lt;stikonas&gt;</a></span><span class="message">drakonis: is it just C now?</span></div><div class="line" id="133854"><span class="nick" style="color:#2e2a4a"><a href="#133854" label="[13:38:54]">&lt;drakonis&gt;</a></span><span class="message">yes.</span></div><div class="line" id="133902"><span class="nick" style="color:#389600"><a href="#133902" label="[13:39:02]">&lt;stikonas&gt;</a></span><span class="message">though for bootstrapping, I think c++ should be fine, we can bootstrap g++</span></div><div class="line" id="134142"><span class="nick" style="color:#8dd3c7"><a href="#134142" label="[13:41:42]">&lt;oriansj&gt;</a></span><span class="message">well c++ was never hard to bootstrap once we got gcc</span></div><div class="line" id="134212"><span class="nick" style="color:#8dd3c7"><a href="#134212" label="[13:42:12]">&lt;oriansj&gt;</a></span><span class="message">but lets just hope zig doesn't do any hops which break its bootstrap chain</span></div><div class="line" id="134254"><span class="nick" style="color:#6b8072"><a href="#134254" label="[13:42:54]">&lt;qyliss&gt;</a></span><span class="message">The C is generated though, right?</span></div><div class="line" id="134341"><span class="nick" style="color:#6b8072"><a href="#134341" label="[13:43:41]">&lt;qyliss&gt;</a></span><span class="message">I was trying to understand this earlier.  Not sure I got it right, but it looked to me like they were replacing human-written C++ with machine-generated C or a WASI binary.</span></div><div class="line" id="134410"><span class="nick" style="color:#2e2a4a"><a href="#134410" label="[13:44:10]">&lt;drakonis&gt;</a></span><span class="message">they're using WASI to C to zig</span></div><div class="line" id="134412"><span class="nick" style="color:#2e2a4a"><a href="#134412" label="[13:44:12]">&lt;drakonis&gt;</a></span><span class="message">afaik?</span></div><div class="line" id="134421"><span class="nick" style="color:#6b8072"><a href="#134421" label="[13:44:21]">&lt;qyliss&gt;</a></span><span class="message">Yeah, where does the WASI binary come from?</span></div><div class="line" id="134425"><span class="nick" style="color:#6b8072"><a href="#134425" label="[13:44:25]">&lt;qyliss&gt;</a></span><span class="message">How do you audit it?</span></div><div class="line" id="134429"><span class="nick" style="color:#2e2a4a"><a href="#134429" label="[13:44:29]">&lt;drakonis&gt;</a></span><span class="message">the new stage 1 source is in zig's repository</span></div><div class="line" id="134449"><span class="nick" style="color:#6b8072"><a href="#134449" label="[13:44:49]">&lt;qyliss&gt;</a></span><span class="message">How do you know those sources correspond to the binary?</span></div><div class="line" id="134453"><span class="nick" style="color:#2e2a4a"><a href="#134453" label="[13:44:53]">&lt;drakonis&gt;</a></span><span class="message">actually</span></div><div class="line" id="134456"><span class="nick" style="color:#2e2a4a"><a href="#134456" label="[13:44:56]">&lt;drakonis&gt;</a></span><span class="message">its c to wasi to zig</span></div><div class="line" id="134524"><span class="nick" style="color:#2e2a4a"><a href="#134524" label="[13:45:24]">&lt;drakonis&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/ziglang/zig/tree/master/stage1">https://github.com/ziglang/zig/tree/master/stage1</a> </span></div><div class="line" id="134659"><span class="nick" style="color:#8dd3c7"><a href="#134659" label="[13:46:59]">&lt;oriansj&gt;</a></span><span class="message">so zig; now requires a convoluted path to bootstrap... *shakes head*</span></div><div class="line" id="134700"><span class="nick" style="color:#6b8072"><a href="#134700" label="[13:47:00]">&lt;qyliss&gt;</a></span><span class="message">Like, how do you verify zig1.wasm.zst corresponds to its source, when you don't already have a zig compiler?</span></div><div class="line" id="134728"><span class="nick" style="color:#8dd3c7"><a href="#134728" label="[13:47:28]">&lt;oriansj&gt;</a></span><span class="message">qyliss: probably bootstrapping an earlier zig compiler</span></div><div class="line" id="134735"><span class="nick" style="color:#2e2a4a"><a href="#134735" label="[13:47:35]">&lt;drakonis&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/ziglang/zig/commit/20d86d9c63476b6312b87dc5b0e4aa4822eb7717">https://github.com/ziglang/zig/commit/20d86d9c63476b6312b87dc5b0e4aa4822eb7717</a>  apparently that's supposed to go away?</span></div><div class="line" id="134745"><span class="nick" style="color:#2e2a4a"><a href="#134745" label="[13:47:45]">&lt;drakonis&gt;</a></span><span class="message">i just asked on irc about that</span></div><div class="line" id="134755"><span class="nick" style="color:#6b8072"><a href="#134755" label="[13:47:55]">&lt;qyliss&gt;</a></span><span class="message">oriansj: They claim there's no need for multiple compiler versions, but they don't seem to have taken this into account.</span></div><div class="line" id="134808"><span class="nick" style="color:#6b8072"><a href="#134808" label="[13:48:08]">&lt;qyliss&gt;</a></span><span class="message">At least afaict.</span></div><div class="line" id="134836"><span class="nick" style="color:#8dd3c7"><a href="#134836" label="[13:48:36]">&lt;oriansj&gt;</a></span><span class="message">qyliss: they never take proper bootstrapping into account *ever*</span></div><div class="line" id="134846"><span class="nick" style="color:#6b8072"><a href="#134846" label="[13:48:46]">&lt;qyliss&gt;</a></span><span class="message">oh, that's sad</span></div><div class="line" id="134849"><span class="nick" style="color:#6b8072"><a href="#134849" label="[13:48:49]">&lt;qyliss&gt;</a></span><span class="message">I thought zig was one of the good ones.</span></div><div class="line" id="134913"><span class="nick" style="color:#2e2a4a"><a href="#134913" label="[13:49:13]">&lt;drakonis&gt;</a></span><span class="message">is it a recurring event?</span></div><div class="line" id="134935"><span class="nick" style="color:#8dd3c7"><a href="#134935" label="[13:49:35]">&lt;oriansj&gt;</a></span><span class="message">a literal 637 KB binary file; seriously?</span></div><div class="line" id="134943"><span class="nick" style="color:#2e2a4a"><a href="#134943" label="[13:49:43]">&lt;drakonis&gt;</a></span><span class="message">i just asked on irc about that</span></div><div class="line" id="135021"><span class="nick" style="color:#389600"><a href="#135021" label="[13:50:21]">&lt;stikonas&gt;</a></span><span class="message">well, commit message says replace this commit with something else but still strage, why commit binary blobs in the first place</span></div><div class="line" id="135030"><span class="nick" style="color:#2e2a4a"><a href="#135030" label="[13:50:30]">&lt;drakonis&gt;</a></span><span class="message">yes, sure.</span></div><div class="line" id="135048"><span class="nick" style="color:#2e2a4a"><a href="#135048" label="[13:50:48]">&lt;drakonis&gt;</a></span><span class="message">i assume andrew forgot to remove that</span></div><div class="line" id="135111"><span class="nick" style="color:#6b8072"><a href="#135111" label="[13:51:11]">&lt;qyliss&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/ziglang/zig/pull/13560">https://github.com/ziglang/zig/pull/13560</a> </span></div><div class="line" id="135120"><span class="nick" style="color:#6b8072"><a href="#135120" label="[13:51:20]">&lt;qyliss&gt;</a></span><span class="message">This is what I read earlier.</span></div><div class="line" id="135131"><span class="nick" style="color:#6b8072"><a href="#135131" label="[13:51:31]">&lt;qyliss&gt;</a></span><span class="message">(and it's merged, including the binary)</span></div><div class="line" id="135205"><span class="nick" style="color:#8dd3c7"><a href="#135205" label="[13:52:05]">&lt;oriansj&gt;</a></span><span class="message">talk about downgrading from &quot;reasonable to bootstrap&quot; to &quot;we be fucked&quot;</span></div><div class="line" id="135208"><span class="nick" style="color:#389600"><a href="#135208" label="[13:52:08]">&lt;stikonas&gt;</a></span><span class="message">The idea here is to use a small WASI binary as a stage1 kernel that is committed to source control and therefore can be used to build any commit from source</span></div><div class="line" id="135323"><span class="nick" style="color:#2e2a4a"><a href="#135323" label="[13:53:23]">&lt;drakonis&gt;</a></span><span class="message">it will be removed later though</span></div><div class="line" id="135434"><span class="nick" style="color:#8dd3c7"><a href="#135434" label="[13:54:34]">&lt;oriansj&gt;</a></span><span class="message">the question isn't what purpose the binary has; so much as can it be bootstrapped bit for bit</span></div><div class="line" id="135448"><span class="nick" style="color:#6b8072"><a href="#135448" label="[13:54:48]">&lt;qyliss&gt;</a></span><span class="message">drakonis: <a rel="nofollow" href="https://github.com/ziglang/zig/issues/6378">https://github.com/ziglang/zig/issues/6378</a>  implies they want to replace it with generated C</span></div><div class="line" id="135450"><span class="nick" style="color:#389600"><a href="#135450" label="[13:54:50]">&lt;stikonas&gt;</a></span><span class="message">looks like they plan to remove it</span></div><div class="line" id="135503"><span class="nick" style="color:#389600"><a href="#135503" label="[13:55:03]">&lt;stikonas&gt;</a></span><span class="message">oh, but generated C is not any more human inspectable...</span></div><div class="line" id="135507"><span class="nick" style="color:#6b8072"><a href="#135507" label="[13:55:07]">&lt;qyliss&gt;</a></span><span class="message">which would still not be real bootstrapping</span></div><div class="line" id="135509"><span class="nick" style="color:#6b8072"><a href="#135509" label="[13:55:09]">&lt;qyliss&gt;</a></span><span class="message">yeah</span></div><div class="line" id="135607"><span class="nick" style="color:#389600"><a href="#135607" label="[13:56:07]">&lt;stikonas&gt;</a></span><span class="message">so basically you need to build older zig</span></div><div class="line" id="135610"><span class="nick" style="color:#389600"><a href="#135610" label="[13:56:10]">&lt;stikonas&gt;</a></span><span class="message">with C++</span></div><div class="line" id="135624"><span class="nick" style="color:#389600"><a href="#135624" label="[13:56:24]">&lt;stikonas&gt;</a></span><span class="message">and then you can bootstrap 1.0 iteratively through intermediate stages</span></div><div class="line" id="135627"><span class="nick" style="color:#6b8072"><a href="#135627" label="[13:56:27]">&lt;qyliss&gt;</a></span><span class="message">&quot;O(1) bootstrapping&quot; lol</span></div><div class="line" id="135632"><span class="nick" style="color:#389600"><a href="#135632" label="[13:56:32]">&lt;stikonas&gt;</a></span><span class="message">(as there will be breaking changes)</span></div><div class="line" id="135725"><span class="nick" style="color:#2e2a4a"><a href="#135725" label="[13:57:25]">&lt;drakonis&gt;</a></span><span class="message">its a work in progress.</span></div><div class="line" id="135738"><span class="nick" style="color:#6b8072"><a href="#135738" label="[13:57:38]">&lt;qyliss&gt;</a></span><span class="message">drakonis: is the *plan* a work in progress?</span></div><div class="line" id="135800"><span class="nick" style="color:#2e2a4a"><a href="#135800" label="[13:58:00]">&lt;drakonis&gt;</a></span><span class="message">no, the bootstrapping process, i suppose</span></div><div class="line" id="135802"><span class="nick" style="color:#6b8072"><a href="#135802" label="[13:58:02]">&lt;qyliss&gt;</a></span><span class="message">because at the end of the plan outlined in that issue zig still won't be O(1) bootstrappable</span></div><div class="line" id="135806"><span class="nick" style="color:#8dd3c7"><a href="#135806" label="[13:58:06]">&lt;oriansj&gt;</a></span><span class="message">and zig needs someone to keep an eye to keeping its bootstrap path alive</span></div><div class="line" id="135827"><span class="nick" style="color:#8dd3c7"><a href="#135827" label="[13:58:27]">&lt;oriansj&gt;</a></span><span class="message">while we still can</span></div><div class="line" id="135902"><span class="nick" style="color:#8dd3c7"><a href="#135902" label="[13:59:02]">&lt;oriansj&gt;</a></span><span class="message">even if it means an ugly guix build chain</span></div><div class="line" id="135914"><span class="nick" style="color:#389600"><a href="#135914" label="[13:59:14]">&lt;stikonas&gt;</a></span><span class="message">might need to build from git snapshots</span></div><div class="line" id="135917"><span class="nick" style="color:#389600"><a href="#135917" label="[13:59:17]">&lt;stikonas&gt;</a></span><span class="message">rather than from releases...</span></div><div class="line" id="135937"><span class="nick" style="color:#389600"><a href="#135937" label="[13:59:37]">&lt;stikonas&gt;</a></span><span class="message">which is not the end of the world but a bit annoying</span></div><div class="line" id="140105"><span class="nick" style="color:#2e2a4a"><a href="#140105" label="[14:01:05]">&lt;drakonis&gt;</a></span><span class="message"> <a rel="nofollow" href="https://vimeo.com/768787662">https://vimeo.com/768787662</a> </span></div><div class="line" id="142212"><span class="nick" style="color:#6b8072"><a href="#142212" label="[14:22:12]">&lt;qyliss&gt;</a></span><span class="message">three hours? D:</span></div><div class="line" id="142359"><span class="nick" style="color:#2e2a4a"><a href="#142359" label="[14:23:59]">&lt;drakonis&gt;</a></span><span class="message">eh, just the first 50 are relevant to the discussion</span></div><div class="line" id="142401"><span class="nick" style="color:#2e2a4a"><a href="#142401" label="[14:24:01]">&lt;drakonis&gt;</a></span><span class="message">its still 50 minutes</span></div><div class="line" id="143223"><span class="nick" style="color:#2e2a4a"><a href="#143223" label="[14:32:23]">&lt;drakonis&gt;</a></span><span class="message">and i gotta step in and criticize now</span></div><div class="line" id="143249"><span class="nick" style="color:#2e2a4a"><a href="#143249" label="[14:32:49]">&lt;drakonis&gt;</a></span><span class="message">hewing and hawing about zig not properly bootstrapping helps nobody</span></div><div class="line" id="143347"><span class="nick" style="color:#6b8072"><a href="#143347" label="[14:33:47]">&lt;qyliss&gt;</a></span><span class="message">as opposed to?</span></div><div class="line" id="143615"><span class="nick" style="color:#2e2a4a"><a href="#143615" label="[14:36:15]">&lt;drakonis&gt;</a></span><span class="message">i was going to say participating on improving the process but its never so simple, is it?</span></div><div class="line" id="143622"><span class="nick" style="color:#6b8072"><a href="#143622" label="[14:36:22]">&lt;qyliss&gt;</a></span><span class="message">somebody tried!</span></div><div class="line" id="143632"><span class="nick" style="color:#2e2a4a"><a href="#143632" label="[14:36:32]">&lt;drakonis&gt;</a></span><span class="message">oic</span></div><div class="line" id="143635"><span class="nick" style="color:#2e2a4a"><a href="#143635" label="[14:36:35]">&lt;drakonis&gt;</a></span><span class="message">alright.</span></div><div class="line" id="143645"><span class="nick" style="color:#6b8072"><a href="#143645" label="[14:36:45]">&lt;qyliss&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/ziglang/zig/pull/13560#issuecomment-1340617840">https://github.com/ziglang/zig/pull/13560#issuecomment-1340617840</a> </span></div><div class="line" id="143654"><span class="nick" style="color:#6b8072"><a href="#143654" label="[14:36:54]">&lt;qyliss&gt;</a></span><span class="message">maybe they'll get a better answer</span></div><div class="line" id="143657"><span class="nick" style="color:#6b8072"><a href="#143657" label="[14:36:57]">&lt;qyliss&gt;</a></span><span class="message">it was only today</span></div><div class="line" id="143708"><span class="nick" style="color:#6b8072"><a href="#143708" label="[14:37:08]">&lt;qyliss&gt;</a></span><span class="message">but there's no point anybody else joining in and bridaging them with the same question</span></div><div class="line" id="143720"><span class="nick" style="color:#2e2a4a"><a href="#143720" label="[14:37:20]">&lt;drakonis&gt;</a></span><span class="message">aye.</span></div><div class="line" id="144251"><span class="nick" style="color:#6b8072"><a href="#144251" label="[14:42:51]">&lt;qyliss&gt;</a></span><span class="message">overall it's just frustrating to see a project that seemed to understand the importance of bootstrappability miss the mark like this</span></div><div class="line" id="144259"><span class="nick" style="color:#6b8072"><a href="#144259" label="[14:42:59]">&lt;qyliss&gt;</a></span><span class="message">more so than if it was just some new language that didn't care at all</span></div><div class="line" id="144328"><span class="nick" style="color:#6b8072"><a href="#144328" label="[14:43:28]">&lt;qyliss&gt;</a></span><span class="message">because it suggests a lack of understanding of why bootstrappability is important (trust, auditability)</span></div><div class="line" id="150155"><span class="nick" style="color:#2e2a4a"><a href="#150155" label="[15:01:55]">&lt;drakonis&gt;</a></span><span class="message">i'm listening to the recording right now</span></div><div class="line" id="150215"><span class="nick" style="color:#2e2a4a"><a href="#150215" label="[15:02:15]">&lt;drakonis&gt;</a></span><span class="message">seems like the binary blob will go away in the future</span></div><div class="line" id="150248"><span class="nick" style="color:#2e2a4a"><a href="#150248" label="[15:02:48]">&lt;drakonis&gt;</a></span><span class="message">but only when there's a replacement for it</span></div><div class="line" id="150356"><span class="nick" style="color:#2e2a4a"><a href="#150356" label="[15:03:56]">&lt;drakonis&gt;</a></span><span class="message">after there's a spec and someone uses that spec to write a bootstrapping compiler for zig</span></div><div class="line" id="150527"><span class="nick" style="color:#6b8072"><a href="#150527" label="[15:05:27]">&lt;qyliss&gt;</a></span><span class="message">so… the Rust approach?</span></div><div class="line" id="150604"><span class="nick" style="color:#2e2a4a"><a href="#150604" label="[15:06:04]">&lt;drakonis&gt;</a></span><span class="message">i guess?</span></div><div class="line" id="150615"><span class="nick" style="color:#2e2a4a"><a href="#150615" label="[15:06:15]">&lt;drakonis&gt;</a></span><span class="message">its far easier to write a bootstrapping compiler for zig than rust</span></div><div class="line" id="150621"><span class="nick" style="color:#2e2a4a"><a href="#150621" label="[15:06:21]">&lt;drakonis&gt;</a></span><span class="message">this is around minute 13</span></div><div class="line" id="150630"><span class="nick" style="color:#6b8072"><a href="#150630" label="[15:06:30]">&lt;qyliss&gt;</a></span><span class="message">otoh, a bootstrapping compiler exists for Rust already!</span></div><div class="line" id="150636"><span class="nick" style="color:#2e2a4a"><a href="#150636" label="[15:06:36]">&lt;drakonis&gt;</a></span><span class="message">oh, impressive</span></div><div class="line" id="150657"><span class="nick" style="color:#6b8072"><a href="#150657" label="[15:06:57]">&lt;qyliss&gt;</a></span><span class="message">(mrustc, unless you mean something different by a bootstrapping compiler)</span></div><div class="line" id="150727"><span class="nick" style="color:#2e2a4a"><a href="#150727" label="[15:07:27]">&lt;drakonis&gt;</a></span><span class="message">no, i meant mrustc</span></div><div class="line" id="150903"><span class="nick" style="color:#6b8072"><a href="#150903" label="[15:09:03]">&lt;qyliss&gt;</a></span><span class="message">also gccrs now I guess</span></div><div class="line" id="150906"><span class="nick" style="color:#6b8072"><a href="#150906" label="[15:09:06]">&lt;qyliss&gt;</a></span><span class="message">it was merged yesterday or so</span></div><div class="line" id="150921"><span class="nick" style="color:#6b8072"><a href="#150921" label="[15:09:21]">&lt;qyliss&gt;</a></span><span class="message">I don't know if it can compile rustc yet</span></div><div class="line" id="150952"><span class="nick" style="color:#80b1d3"><a href="#150952" label="[15:09:52]">&lt;stikonas[m]&gt;</a></span><span class="message">It's not just rustc that needs building, you also need cargo</span></div><div class="line" id="151002"><span class="nick" style="color:#6b8072"><a href="#151002" label="[15:10:02]">&lt;qyliss&gt;</a></span><span class="message">mrustc takes care of that though, doesn't it?</span></div><div class="line" id="151009"><span class="nick" style="color:#6b8072"><a href="#151009" label="[15:10:09]">&lt;qyliss&gt;</a></span><span class="message">with minicargo</span></div><div class="line" id="151012"><span class="nick" style="color:#80b1d3"><a href="#151012" label="[15:10:12]">&lt;stikonas[m]&gt;</a></span><span class="message">Mrusrc does</span></div><div class="line" id="151024"><span class="nick" style="color:#80b1d3"><a href="#151024" label="[15:10:24]">&lt;stikonas[m]&gt;</a></span><span class="message">I don't know about gccrs</span></div><div class="line" id="151027"><span class="nick" style="color:#6b8072"><a href="#151027" label="[15:10:27]">&lt;qyliss&gt;</a></span><span class="message">but in principle you could use minicargo+gccrs, right?</span></div><div class="line" id="151105"><span class="nick" style="color:#80b1d3"><a href="#151105" label="[15:11:05]">&lt;stikonas[m]&gt;</a></span><span class="message">No, minicargo is tied to mrustc</span></div><div class="line" id="151108"><span class="nick" style="color:#6b8072"><a href="#151108" label="[15:11:08]">&lt;qyliss&gt;</a></span><span class="message">ah okay</span></div><div class="line" id="151113"><span class="nick" style="color:#80b1d3"><a href="#151113" label="[15:11:13]">&lt;stikonas[m]&gt;</a></span><span class="message">If I remember correctly</span></div><div class="line" id="185950"><span class="nick" style="color:#8dd3c7"><a href="#185950" label="[18:59:50]">&lt;oriansj&gt;</a></span><span class="message">perhaps the C++  version can be (or is??) feature parity with the blob; which if true one could delete the blob and verify that it is our mzig approach going forward.</span></div><div class="line" id="190152"><span class="nick" style="color:#389600"><a href="#190152" label="[19:01:52]">&lt;stikonas&gt;</a></span><span class="message">oriansj: my impression was that they want to do some breaking changes and not keep updating C++ version</span></div><div class="line" id="190234"><span class="nick" style="color:#8dd3c7"><a href="#190234" label="[19:02:34]">&lt;oriansj&gt;</a></span><span class="message">if they are going to do breaking changes against the binary, I have run out of all possible reasons for them to even have that blob</span></div><div class="line" id="190235"><span class="nick" style="color:#389600"><a href="#190235" label="[19:02:35]">&lt;stikonas&gt;</a></span><span class="message">so if zig maintainers don't want to maintain it, somebody else would have to</span></div><div class="line" id="190244"><span class="nick" style="color:#8dd3c7"><a href="#190244" label="[19:02:44]">&lt;oriansj&gt;</a></span><span class="message">oh joy</span></div><div class="line" id="190250"><span class="nick" style="color:#389600"><a href="#190250" label="[19:02:50]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I thought they'll be updating binary</span></div><div class="line" id="190256"><span class="nick" style="color:#389600"><a href="#190256" label="[19:02:56]">&lt;stikonas&gt;</a></span><span class="message">until they decided to stabilize for 1.0 release</span></div><div class="line" id="190304"><span class="nick" style="color:#389600"><a href="#190304" label="[19:03:04]">&lt;stikonas&gt;</a></span><span class="message">when they'll create a C &quot;blob&quot;</span></div><div class="line" id="194112"><span class="nick" style="color:#2e2a4a"><a href="#194112" label="[19:41:12]">&lt;drakonis&gt;</a></span><span class="message">ACTION taps stream recording</span></div><div class="line" id="194140"><span class="nick" style="color:#2e2a4a"><a href="#194140" label="[19:41:40]">&lt;drakonis&gt;</a></span><span class="message">watch the first 15 minutes to get the gist of the whole thing or the first 50 minutes to get the full view</span></div><div class="line" id="194157"><span class="nick" style="color:#2e2a4a"><a href="#194157" label="[19:41:57]">&lt;drakonis&gt;</a></span><span class="message">as the rest of the recording is andrew working on the implementation</span></div><div class="line" id="194258"><span class="nick" style="color:#2e2a4a"><a href="#194258" label="[19:42:58]">&lt;drakonis&gt;</a></span><span class="message">and mzig, innit?</span></div><div class="line" id="195002"><span class="nick" style="color:#2e2a4a"><a href="#195002" label="[19:50:02]">&lt;drakonis&gt;</a></span><span class="message">is it already under development?</span></div><div class="line" id="231758"><span class="nick" style="color:#8dd3c7"><a href="#231758" label="[23:17:58]">&lt;oriansj&gt;</a></span><span class="message">drakonis: and mzig is a pun on mrustc; which was just me suggesting we take the C++ version that was hand written and ensure it is able to be feature parity with the binary and thus give us a path forward.</span></div><div class="line" id="231837"><span class="nick" style="color:#8dd3c7"><a href="#231837" label="[23:18:37]">&lt;oriansj&gt;</a></span><span class="message">But if they are going to replace the binary, then we might not have enough free developers to make that a viable option.</span></div><div class="line" id="231929"><span class="nick" style="color:#8dd3c7"><a href="#231929" label="[23:19:29]">&lt;oriansj&gt;</a></span><span class="message">(I will be watching the stream ideally later tonight [waiting on it to finish downloading])</span></div><div class="line" id="231942"><span class="nick" style="color:#389600"><a href="#231942" label="[23:19:42]">&lt;stikonas&gt;</a></span><span class="message">in that case just do O(n) bootstrap rather than O(1)...</span></div><div class="line" id="232012"><span class="nick" style="color:#8dd3c7"><a href="#232012" label="[23:20:12]">&lt;oriansj&gt;</a></span><span class="message">stikonas: assuming we don't hit another gap like we did with Bison</span></div><div class="line" id="232016"><span class="nick" style="color:#389600"><a href="#232016" label="[23:20:16]">&lt;stikonas&gt;</a></span><span class="message">(I didn't have time to watch stream, though I might be able to soon prepare a PR to add struct[index].member support to M2-Planet</span></div><div class="line" id="232032"><span class="nick" style="color:#8dd3c7"><a href="#232032" label="[23:20:32]">&lt;oriansj&gt;</a></span><span class="message">stikonas: now that is more exciting to me</span></div><div class="line" id="232053"><span class="nick" style="color:#389600"><a href="#232053" label="[23:20:53]">&lt;stikonas&gt;</a></span><span class="message">it will be less optimal than shifts (push, multiply and pop)</span></div><div class="line" id="232123"><span class="nick" style="color:#389600"><a href="#232123" label="[23:21:23]">&lt;stikonas&gt;</a></span><span class="message">but I guess it's more correct when you have non-power-of-two structs</span></div><div class="line" id="232201"><span class="nick" style="color:#8dd3c7"><a href="#232201" label="[23:22:01]">&lt;oriansj&gt;</a></span><span class="message">which honestly is probably for the best</span></div><div class="line" id="232202"><span class="nick" style="color:#389600"><a href="#232202" label="[23:22:02]">&lt;stikonas&gt;</a></span><span class="message">I've added doubly indirect struct types (since those are used in e.g. M1)</span></div><div class="line" id="232220"><span class="nick" style="color:#389600"><a href="#232220" label="[23:22:20]">&lt;stikonas&gt;</a></span><span class="message">I don't think we need to support anything higher...</span></div><div class="line" id="232251"><span class="nick" style="color:#8dd3c7"><a href="#232251" label="[23:22:51]">&lt;oriansj&gt;</a></span><span class="message">we have more than enough to bootstrap a haskell like language; so probably</span></div><div class="line" id="232335"><span class="nick" style="color:#389600"><a href="#232335" label="[23:23:35]">&lt;stikonas&gt;</a></span><span class="message">it's not hard  to add, but I doubt we will need tripple indirection in bootstrapping</span></div><div class="line" id="232404"><span class="nick" style="color:#389600"><a href="#232404" label="[23:24:04]">&lt;stikonas&gt;</a></span><span class="message">anyway, I've got x86 and amd64 working (and amd64 version is good enough to remove that UEFI hack</span></div><div class="line" id="232433"><span class="nick" style="color:#8dd3c7"><a href="#232433" label="[23:24:33]">&lt;oriansj&gt;</a></span><span class="message">nice</span></div><div class="line" id="232744"><span class="nick" style="color:#389600"><a href="#232744" label="[23:27:44]">&lt;stikonas&gt;</a></span><span class="message">though I'm slightly unhappy with the fact that it will be the third place with e.g. emit_out(&quot;mul_rbx\n&quot;)</span></div><div class="line" id="232819"><span class="nick" style="color:#389600"><a href="#232819" label="[23:28:19]">&lt;stikonas&gt;</a></span><span class="message">but I don't know if it's worth factoring it out into a separate function...</span></div><div class="line" id="234016"><span class="nick" style="color:#8dd3c7"><a href="#234016" label="[23:40:16]">&lt;oriansj&gt;</a></span><span class="message">probably not yet</span></div><div class="line" id="235141"><span class="nick" style="color:#389600"><a href="#235141" label="[23:51:41]">&lt;stikonas&gt;</a></span><span class="message">well, it's just a small snippet unlike loading and storing stuff...</span></div><br /></div></body></html>