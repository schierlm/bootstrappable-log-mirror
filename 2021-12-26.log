<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-12-26.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="002424"><span class="nick" style="color:#8dd3c7"><a href="#002424" label="[00:24:24]">&lt;fossy&gt;</a></span><span class="message">doras: your understanding of skipping the python stuff is correct, and I have intentionally designed it as such so that can be done reasonably easily</span></div><div class="line" id="002532"><span class="nick" style="color:#8dd3c7"><a href="#002532" label="[00:25:32]">&lt;fossy&gt;</a></span><span class="message">really, rootfs.py shouldn't be used in production, its mostly just a development wrapper, although some complexity particularly with moving of sources etc can be improved</span></div><div class="line" id="002940"><span class="nick" style="color:#8dd3c7"><a href="#002940" label="[00:29:40]">&lt;fossy&gt;</a></span><span class="message">doras: can you explain why you need to skip most of live-bootstrap? I dont exactly follow</span></div><div class="line" id="003759"><span class="nick" style="color:#2e2a4a"><a href="#003759" label="[00:37:59]">&lt;doras&gt;</a></span><span class="message">fossy: consider BuildStream to be a tool which allows one to automate different types of actions in the context of a sandbox environment. Each BuildStream element basically prepares the sandbox environment (input), performs an action or set of action inside the environment (build, copy files, run commands, filter out file types, etc.), and collect the result (output). Chaining these elements using build-time and runtime dependencies</span></div><div class="line" id="003759"><span class="nick" style="color:#2e2a4a"><a href="#003759" label="[00:37:59]">&lt;doras&gt;</a></span><span class="message">allows one to easily automate and maintain very complex sets of operations, and run them in parallel where possible. Combined with the fact that each element type (called a plugin) is fully programmable, it's a versatile tool.</span></div><div class="line" id="003914"><span class="nick" style="color:#2e2a4a"><a href="#003914" label="[00:39:14]">&lt;doras&gt;</a></span><span class="message">However, BuildStream doesn't have a &quot;built-in&quot; sysroot for its sandbox environment. An element must always provide one as a build-dependency.</span></div><div class="line" id="004027"><span class="nick" style="color:#2e2a4a"><a href="#004027" label="[00:40:27]">&lt;doras&gt;</a></span><span class="message">This is important because one of BuildStream's main purposes is reproducibility. You want a specific element to run at the exact same conditions regardless of the host that runs it.</span></div><div class="line" id="004301"><span class="nick" style="color:#2e2a4a"><a href="#004301" label="[00:43:01]">&lt;doras&gt;</a></span><span class="message">So this is simple when you build an element which depends on a set of existing elements, since they must also depend eventually on something resembling a basic sysroot.</span></div><div class="line" id="004324"><span class="nick" style="color:#2e2a4a"><a href="#004324" label="[00:43:24]">&lt;doras&gt;</a></span><span class="message">The &quot;eventually&quot; part is the tricky part. You have to start with something.</span></div><div class="line" id="004446"><span class="nick" style="color:#2e2a4a"><a href="#004446" label="[00:44:46]">&lt;doras&gt;</a></span><span class="message">So in our project this &quot;something&quot; is a previous image of a small subset of our runtime (called PreBootstrap). Each release depends on the PreBootstrap image of the previous release.</span></div><div class="line" id="004512"><span class="nick" style="color:#2e2a4a"><a href="#004512" label="[00:45:12]">&lt;doras&gt;</a></span><span class="message">The first release depended on a Yocto sysroot if I'm not mistaken.</span></div><div class="line" id="004712"><span class="nick" style="color:#2e2a4a"><a href="#004712" label="[00:47:12]">&lt;doras&gt;</a></span><span class="message">The PreBootstrap image is only used as a base system which bootstraps a new bootstrap image, which is what we use to actually build the project.</span></div><div class="line" id="004808"><span class="nick" style="color:#2e2a4a"><a href="#004808" label="[00:48:08]">&lt;doras&gt;</a></span><span class="message">So obviously all of this is not very bootstrappable, as we rely on a chain of bootstraps that we can't really follow or reproduce entirely.</span></div><div class="line" id="004928"><span class="nick" style="color:#2e2a4a"><a href="#004928" label="[00:49:28]">&lt;doras&gt;</a></span><span class="message">So to make this bootstrappable, we starting thinking about trying to use your project as a base of our PreBootstrap image, instead of our own images.</span></div><div class="line" id="004938"><span class="nick" style="color:#2e2a4a"><a href="#004938" label="[00:49:38]">&lt;doras&gt;</a></span><span class="message">we started*</span></div><div class="line" id="005235"><span class="nick" style="color:#2e2a4a"><a href="#005235" label="[00:52:35]">&lt;doras&gt;</a></span><span class="message">To achieve this we need to create an element whose input is bootstrap seeds and sources alone, and whose output is something that brings us closer to a sysroot.</span></div><div class="line" id="005605"><span class="nick" style="color:#2e2a4a"><a href="#005605" label="[00:56:05]">&lt;doras&gt;</a></span><span class="message">However, if we use live-bootstrap &quot;as documented&quot; by running rootfs.py, we'll need to be to run Python, which suggests that the input to our sandbox is not only bootstrap seeds and sources, but also binaries that can run Python scripts. Obviously this would mean that we are no longer be bootstrappable, so shouldn't do it.</span></div><div class="line" id="010033"><span class="nick" style="color:#2e2a4a"><a href="#010033" label="[01:00:33]">&lt;doras&gt;</a></span><span class="message">The best thing live-bootstrap could do to help us achieve this is to provide a git repo that includes everything necessary for a complete the sysa+sysc bootstrap (with git submodules, if needed) already located in all the right places, with a single requirement to fully bootstrap: execution of a seed.</span></div><div class="line" id="010224"><span class="nick" style="color:#2e2a4a"><a href="#010224" label="[01:02:24]">&lt;doras&gt;</a></span><span class="message">So it would only require: git clone, git submodule update, chroot to the repo root + execute seed.</span></div><div class="line" id="010515"><span class="nick" style="color:#2e2a4a"><a href="#010515" label="[01:05:15]">&lt;doras&gt;</a></span><span class="message">You decided to split the chroot-based bootstrap process into two phases: sysa and sysc; this is entirely fine and also makes sense. However, the fact that each of the two requires a different input to its sandbox (chroot) means that we need two separate elements for it.</span></div><div class="line" id="011110"><span class="nick" style="color:#2e2a4a"><a href="#011110" label="[01:11:10]">&lt;doras&gt;</a></span><span class="message">So this means that we can't have sysa's run.sh do a chroot to sysc's since we have to do it ourselves. So ideally, we would have each of the two live in a separate git repo (or a separate directory within the same repo), and be fully bootstappable in source-form without any manipulation necessary: git clone, git submodule update, chroot to the sysa/sysc directory + execute seed.</span></div><div class="line" id="011300"><span class="nick" style="color:#2e2a4a"><a href="#011300" label="[01:13:00]">&lt;doras&gt;</a></span><span class="message">Of course, the sandbox sysroot of sysc would be the bootstrap products of sysa.</span></div><div class="line" id="011532"><span class="nick" style="color:#2e2a4a"><a href="#011532" label="[01:15:32]">&lt;doras&gt;</a></span><span class="message">So I guess it's not really skip most of live-bootstrap, but more of... miss the point of live-bootstrap trying to make lives easier to bootstrap.</span></div><div class="line" id="011651"><span class="nick" style="color:#6b8072"><a href="#011651" label="[01:16:51]">&lt;stikonas[m]&gt;</a></span><span class="message">oriansj: I'll take a look at #include functionality tomorrow</span></div><div class="line" id="011652"><span class="nick" style="color:#2e2a4a"><a href="#011652" label="[01:16:52]">&lt;doras&gt;</a></span><span class="message">Because its current structure and the fact that many manual preparations are needed is kind of user-friendly, but not automation-friendly.</span></div><div class="line" id="011902"><span class="nick" style="color:#80b1d3"><a href="#011902" label="[01:19:02]">&lt;stikonas&gt;</a></span><span class="message">doras: and yes, everything is statically linked but the reason for that</span></div><div class="line" id="011908"><span class="nick" style="color:#2e2a4a"><a href="#011908" label="[01:19:08]">&lt;doras&gt;</a></span><span class="message">It would have been nice if it had an automation-friendly &quot;core&quot; repo as I described above which is self-contained and has 0 external dependencies as one would hope from a boostrappable system, and then maybe a user-friendly &quot;helper scripts&quot; repo that wraps it nicely for those who wish to do things manually.</span></div><div class="line" id="011909"><span class="nick" style="color:#80b1d3"><a href="#011909" label="[01:19:09]">&lt;stikonas&gt;</a></span><span class="message">is that I couldn't get dynamic linker to work</span></div><div class="line" id="011938"><span class="nick" style="color:#80b1d3"><a href="#011938" label="[01:19:38]">&lt;stikonas&gt;</a></span><span class="message">musl in principle fully supports dynamic linker, but for some reason I was getting a crash</span></div><div class="line" id="012038"><span class="nick" style="color:#80b1d3"><a href="#012038" label="[01:20:38]">&lt;stikonas&gt;</a></span><span class="message">doras: and yes, we have more things than necessary in the final image</span></div><div class="line" id="012048"><span class="nick" style="color:#80b1d3"><a href="#012048" label="[01:20:48]">&lt;stikonas&gt;</a></span><span class="message">we basically ship all old versions</span></div><div class="line" id="012059"><span class="nick" style="color:#80b1d3"><a href="#012059" label="[01:20:59]">&lt;stikonas&gt;</a></span><span class="message">including gcc 4.0.4 even though we have gcc 4.7.4</span></div><div class="line" id="012119"><span class="nick" style="color:#80b1d3"><a href="#012119" label="[01:21:19]">&lt;stikonas&gt;</a></span><span class="message">the reason is that right now it's hard to remove things, there is no easy way to say, remove all gcc 4.0.4 files</span></div><div class="line" id="012129"><span class="nick" style="color:#80b1d3"><a href="#012129" label="[01:21:29]">&lt;stikonas&gt;</a></span><span class="message">that can be implemented but it needs more work</span></div><div class="line" id="012135"><span class="nick" style="color:#80b1d3"><a href="#012135" label="[01:21:35]">&lt;stikonas&gt;</a></span><span class="message">so it's not done yet</span></div><div class="line" id="012200"><span class="nick" style="color:#80b1d3"><a href="#012200" label="[01:22:00]">&lt;stikonas&gt;</a></span><span class="message">ideally, we could create some kind of packages from inside the bootstrap</span></div><div class="line" id="012216"><span class="nick" style="color:#80b1d3"><a href="#012216" label="[01:22:16]">&lt;stikonas&gt;</a></span><span class="message">well, you need to build to a certain point before that becomes feasible</span></div><div class="line" id="012252"><span class="nick" style="color:#80b1d3"><a href="#012252" label="[01:22:52]">&lt;stikonas&gt;</a></span><span class="message">at the very least we need coreutils/bash and make</span></div><div class="line" id="012402"><span class="nick" style="color:#80b1d3"><a href="#012402" label="[01:24:02]">&lt;stikonas&gt;</a></span><span class="message">doras: why it it strange that /bin does not point to /usr/bin?</span></div><div class="line" id="012436"><span class="nick" style="color:#80b1d3"><a href="#012436" label="[01:24:36]">&lt;stikonas&gt;</a></span><span class="message">symlinking /bin to /usr/bin is optional, some distros do that, some don't</span></div><div class="line" id="012455"><span class="nick" style="color:#80b1d3"><a href="#012455" label="[01:24:55]">&lt;stikonas&gt;</a></span><span class="message">but you need at least some stuff in /bin, hence those symlink</span></div><div class="line" id="012514"><span class="nick" style="color:#80b1d3"><a href="#012514" label="[01:25:14]">&lt;stikonas&gt;</a></span><span class="message">e.g. without /bin/sh symlink you can't just run scripts with #!/bin/sh shebang</span></div><div class="line" id="012627"><span class="nick" style="color:#2e2a4a"><a href="#012627" label="[01:26:27]">&lt;doras&gt;</a></span><span class="message">stikonas: because every binary seems to be in /usr/bin, yet there are a few symlinks inside /bin that point at executables in /usr/bin.</span></div><div class="line" id="012644"><span class="nick" style="color:#80b1d3"><a href="#012644" label="[01:26:44]">&lt;stikonas&gt;</a></span><span class="message">well, without those symlinks inside /bin some things would break</span></div><div class="line" id="012727"><span class="nick" style="color:#80b1d3"><a href="#012727" label="[01:27:27]">&lt;stikonas&gt;</a></span><span class="message">doras: also regarding external tools for initramfs</span></div><div class="line" id="012731"><span class="nick" style="color:#2e2a4a"><a href="#012731" label="[01:27:31]">&lt;doras&gt;</a></span><span class="message">But why not create one big symlink from /bin to usr/bin instead of individual ones inside /usr/bin?</span></div><div class="line" id="012747"><span class="nick" style="color:#80b1d3"><a href="#012747" label="[01:27:47]">&lt;stikonas&gt;</a></span><span class="message">doras: because we can't create symlinks early in the bootstrap</span></div><div class="line" id="012800"><span class="nick" style="color:#80b1d3"><a href="#012800" label="[01:28:00]">&lt;stikonas&gt;</a></span><span class="message"> /bin is created earlier</span></div><div class="line" id="012808"><span class="nick" style="color:#80b1d3"><a href="#012808" label="[01:28:08]">&lt;stikonas&gt;</a></span><span class="message">but we can do it your way</span></div><div class="line" id="012811"><span class="nick" style="color:#80b1d3"><a href="#012811" label="[01:28:11]">&lt;stikonas&gt;</a></span><span class="message">once ls is available</span></div><div class="line" id="012827"><span class="nick" style="color:#80b1d3"><a href="#012827" label="[01:28:27]">&lt;stikonas&gt;</a></span><span class="message">delete /bin and run ln -s /usr/bin /bin</span></div><div class="line" id="012852"><span class="nick" style="color:#80b1d3"><a href="#012852" label="[01:28:52]">&lt;stikonas&gt;</a></span><span class="message">so regarding that initramfs image, it is uncompressed</span></div><div class="line" id="012904"><span class="nick" style="color:#80b1d3"><a href="#012904" label="[01:29:04]">&lt;stikonas&gt;</a></span><span class="message">so should be possible to create even without cpio</span></div><div class="line" id="012918"><span class="nick" style="color:#80b1d3"><a href="#012918" label="[01:29:18]">&lt;stikonas&gt;</a></span><span class="message">anyway, you still need kernel for baremetal mode</span></div><div class="line" id="012955"><span class="nick" style="color:#2e2a4a"><a href="#012955" label="[01:29:55]">&lt;doras&gt;</a></span><span class="message">stikonas: these were a few of my observations, as a form of constructive feedback to the project :)</span></div><div class="line" id="012955"><span class="nick" style="color:#80b1d3"><a href="#012955" label="[01:29:55]">&lt;stikonas&gt;</a></span><span class="message">so that's the bigger problem...</span></div><div class="line" id="013020"><span class="nick" style="color:#80b1d3"><a href="#013020" label="[01:30:20]">&lt;stikonas&gt;</a></span><span class="message">well, stage0-posix is kind of easier start but better for automation</span></div><div class="line" id="013032"><span class="nick" style="color:#80b1d3"><a href="#013032" label="[01:30:32]">&lt;stikonas&gt;</a></span><span class="message">more pure approach would be to start bootstrap on baremetal</span></div><div class="line" id="013038"><span class="nick" style="color:#80b1d3"><a href="#013038" label="[01:30:38]">&lt;stikonas&gt;</a></span><span class="message">even without kernel</span></div><div class="line" id="013044"><span class="nick" style="color:#80b1d3"><a href="#013044" label="[01:30:44]">&lt;stikonas&gt;</a></span><span class="message">but then you would have more manual steps</span></div><div class="line" id="013056"><span class="nick" style="color:#80b1d3"><a href="#013056" label="[01:30:56]">&lt;stikonas&gt;</a></span><span class="message">and more hw specific manual work</span></div><div class="line" id="013106"><span class="nick" style="color:#80b1d3"><a href="#013106" label="[01:31:06]">&lt;stikonas&gt;</a></span><span class="message">so stage0-posix is kind of compromise to get something working</span></div><div class="line" id="013127"><span class="nick" style="color:#80b1d3"><a href="#013127" label="[01:31:27]">&lt;stikonas&gt;</a></span><span class="message">anyway, tar and cpio files are fairly human readable</span></div><div class="line" id="013323"><span class="nick" style="color:#80b1d3"><a href="#013323" label="[01:33:23]">&lt;stikonas&gt;</a></span><span class="message">oh, but your don't need cpio for chroot mode</span></div><div class="line" id="013404"><span class="nick" style="color:#80b1d3"><a href="#013404" label="[01:34:04]">&lt;stikonas&gt;</a></span><span class="message">well, there is still rootfs.py that downloads sources</span></div><div class="line" id="013447"><span class="nick" style="color:#2e2a4a"><a href="#013447" label="[01:34:47]">&lt;doras&gt;</a></span><span class="message">stikonas: we want to create a system whereby any user with the necessary seeds and sources and access to a system running BuildStream, even offline in a cave, or using a cloud-hosted container that they can't reboot, would be able to reproduce freedesktop-sdk fully, and as a result also gnome-build-meta and GNOME OS, the KDE runtimes, and potentially other interesting use cases.</span></div><div class="line" id="013511"><span class="nick" style="color:#2e2a4a"><a href="#013511" label="[01:35:11]">&lt;doras&gt;</a></span><span class="message">All they need is to run a single BuildStream build after cloning the repo.</span></div><div class="line" id="013704"><span class="nick" style="color:#2e2a4a"><a href="#013704" label="[01:37:04]">&lt;doras&gt;</a></span><span class="message">BuildStream would automatically bootstrap everything locally for that user from seeds all the way to GTK4 and whatever else.</span></div><div class="line" id="013727"><span class="nick" style="color:#80b1d3"><a href="#013727" label="[01:37:27]">&lt;stikonas&gt;</a></span><span class="message">well, somehow we need to supply to BuildStreem that directory layout that rootfs.py prepared</span></div><div class="line" id="013840"><span class="nick" style="color:#80b1d3"><a href="#013840" label="[01:38:40]">&lt;stikonas&gt;</a></span><span class="message">well, one of the issues is that stage0-posix has to be starting rootfs point in the bootstrapping system</span></div><div class="line" id="013918"><span class="nick" style="color:#80b1d3"><a href="#013918" label="[01:39:18]">&lt;stikonas&gt;</a></span><span class="message">since there is no &quot;cd&quot; command, we can only run a single &quot;init&quot; script</span></div><div class="line" id="013924"><span class="nick" style="color:#2e2a4a"><a href="#013924" label="[01:39:24]">&lt;doras&gt;</a></span><span class="message">I personally and naively believe that rootfs.py doesn't need to prepare things. Things need to come prepared, or at least with a simple recipe for their preparation.</span></div><div class="line" id="013942"><span class="nick" style="color:#80b1d3"><a href="#013942" label="[01:39:42]">&lt;stikonas&gt;</a></span><span class="message">well, it is fairly simple recipy</span></div><div class="line" id="013954"><span class="nick" style="color:#80b1d3"><a href="#013954" label="[01:39:54]">&lt;stikonas&gt;</a></span><span class="message">it mostly moves things around a bit</span></div><div class="line" id="014002"><span class="nick" style="color:#80b1d3"><a href="#014002" label="[01:40:02]">&lt;stikonas&gt;</a></span><span class="message">maybe some of that can be done in the repo</span></div><div class="line" id="014021"><span class="nick" style="color:#80b1d3"><a href="#014021" label="[01:40:21]">&lt;stikonas&gt;</a></span><span class="message">fossy: what do you think?</span></div><div class="line" id="014040"><span class="nick" style="color:#80b1d3"><a href="#014040" label="[01:40:40]">&lt;stikonas&gt;</a></span><span class="message">in that case we would have to move things around in live-bootstrap repo to closely match where things are in bootstrapped system</span></div><div class="line" id="014051"><span class="nick" style="color:#80b1d3"><a href="#014051" label="[01:40:51]">&lt;stikonas&gt;</a></span><span class="message">in principle it might work</span></div><div class="line" id="014114"><span class="nick" style="color:#80b1d3"><a href="#014114" label="[01:41:14]">&lt;stikonas&gt;</a></span><span class="message">with some scripting changes</span></div><div class="line" id="014123"><span class="nick" style="color:#80b1d3"><a href="#014123" label="[01:41:23]">&lt;stikonas&gt;</a></span><span class="message">e.g. /after becomes /sysa</span></div><div class="line" id="014211"><span class="nick" style="color:#80b1d3"><a href="#014211" label="[01:42:11]">&lt;stikonas&gt;</a></span><span class="message">hmm...</span></div><div class="line" id="014228"><span class="nick" style="color:#80b1d3"><a href="#014228" label="[01:42:28]">&lt;stikonas&gt;</a></span><span class="message">although the problem then is that root of the repo is still stage0-posix...</span></div><div class="line" id="014234"><span class="nick" style="color:#80b1d3"><a href="#014234" label="[01:42:34]">&lt;stikonas&gt;</a></span><span class="message">so live-bootstrap repo would be a bit of a mess :(</span></div><div class="line" id="014347"><span class="nick" style="color:#80b1d3"><a href="#014347" label="[01:43:47]">&lt;stikonas&gt;</a></span><span class="message">I guess at least a bit of preparation is unavoidable</span></div><div class="line" id="014414"><span class="nick" style="color:#80b1d3"><a href="#014414" label="[01:44:14]">&lt;stikonas&gt;</a></span><span class="message">there are some configuration parameters, e.g. which arch we are bootstrapping</span></div><div class="line" id="014728"><span class="nick" style="color:#6d2462"><a href="#014728" label="[01:47:28]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well stage0-posix by default puts its binaries in $ARCH/bin and once it is done; we can move everything to anywhere you want.</span></div><div class="line" id="014902"><span class="nick" style="color:#8dd3c7"><a href="#014902" label="[01:49:02]">&lt;fossy&gt;</a></span><span class="message">stikonas: doras I think that my packaging plans are pretty reasonable wrt to fixing most problems. if we have a set of packages that can be extracted from the end of sysa sysa and sysc can be operated completely separately</span></div><div class="line" id="014952"><span class="nick" style="color:#8dd3c7"><a href="#014952" label="[01:49:52]">&lt;fossy&gt;</a></span><span class="message">sysc does have /usr/bin symlinked to /bin</span></div><div class="line" id="014957"><span class="nick" style="color:#8dd3c7"><a href="#014957" label="[01:49:57]">&lt;fossy&gt;</a></span><span class="message">Iirc</span></div><div class="line" id="015031"><span class="nick" style="color:#8dd3c7"><a href="#015031" label="[01:50:31]">&lt;fossy&gt;</a></span><span class="message">doras: thank you for your observations so far, this is very helpful in determining how we can improve live bootstrap for end users :)</span></div><div class="line" id="015047"><span class="nick" style="color:#8dd3c7"><a href="#015047" label="[01:50:47]">&lt;fossy&gt;</a></span><span class="message">&lt;doras&gt; I personally and naively believe that rootfs.py doesn't need to prepare things. Things need to come prepared, or at least with a simple recipe for their preparation.</span></div><div class="line" id="015103"><span class="nick" style="color:#80b1d3"><a href="#015103" label="[01:51:03]">&lt;stikonas&gt;</a></span><span class="message">well, stat's how stage0-posix works, there is no preparation there</span></div><div class="line" id="015110"><span class="nick" style="color:#80b1d3"><a href="#015110" label="[01:51:10]">&lt;stikonas&gt;</a></span><span class="message">you just kick off init process</span></div><div class="line" id="015117"><span class="nick" style="color:#8dd3c7"><a href="#015117" label="[01:51:17]">&lt;fossy&gt;</a></span><span class="message">FWIW, I completely agree with this</span></div><div class="line" id="015147"><span class="nick" style="color:#8dd3c7"><a href="#015147" label="[01:51:47]">&lt;fossy&gt;</a></span><span class="message">its just that currently, there is shortcuts we have taken in the meantime to make this easier to develop</span></div><div class="line" id="015205"><span class="nick" style="color:#80b1d3"><a href="#015205" label="[01:52:05]">&lt;stikonas&gt;</a></span><span class="message">indeed</span></div><div class="line" id="015216"><span class="nick" style="color:#80b1d3"><a href="#015216" label="[01:52:16]">&lt;stikonas&gt;</a></span><span class="message">and rootfs.py should be simple enough to be doable manually without python</span></div><div class="line" id="015248"><span class="nick" style="color:#8dd3c7"><a href="#015248" label="[01:52:48]">&lt;fossy&gt;</a></span><span class="message">We could (rather trivially) write in words what needs to be prepared now, however, including splitting out sources information form sys*.py files</span></div><div class="line" id="015638"><span class="nick" style="color:#2e2a4a"><a href="#015638" label="[01:56:38]">&lt;doras&gt;</a></span><span class="message">fossy: it would be a very good start indeed.</span></div><div class="line" id="015640"><span class="nick" style="color:#2e2a4a"><a href="#015640" label="[01:56:40]">&lt;doras&gt;</a></span><span class="message">Right now I'm reverse engineering it :)</span></div><div class="line" id="015710"><span class="nick" style="color:#2e2a4a"><a href="#015710" label="[01:57:10]">&lt;doras&gt;</a></span><span class="message">Quite slowly</span></div><div class="line" id="015845"><span class="nick" style="color:#80b1d3"><a href="#015845" label="[01:58:45]">&lt;stikonas&gt;</a></span><span class="message">why reverse engineering, it's in python...</span></div><div class="line" id="015856"><span class="nick" style="color:#80b1d3"><a href="#015856" label="[01:58:56]">&lt;stikonas&gt;</a></span><span class="message">but yes, we can try to start simplifying some things</span></div><div class="line" id="020100"><span class="nick" style="color:#80b1d3"><a href="#020100" label="[02:01:00]">&lt;stikonas&gt;</a></span><span class="message">hmm, probably one things that can be simplified and removed from rootfs.py</span></div><div class="line" id="020109"><span class="nick" style="color:#80b1d3"><a href="#020109" label="[02:01:09]">&lt;stikonas&gt;</a></span><span class="message">is to just put /sources directory in rootfs</span></div><div class="line" id="020121"><span class="nick" style="color:#80b1d3"><a href="#020121" label="[02:01:21]">&lt;stikonas&gt;</a></span><span class="message">and have scripts inside bootstrap do the copying</span></div><div class="line" id="020335"><span class="nick" style="color:#80b1d3"><a href="#020335" label="[02:03:35]">&lt;stikonas&gt;</a></span><span class="message">that would remove the need for this line <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/lib/sysgeneral.py#L138">https://github.com/fosslinux/live-bootstrap/blob/master/lib/sysgeneral.py#L138</a> </span></div><div class="line" id="020429"><span class="nick" style="color:#2e2a4a"><a href="#020429" label="[02:04:29]">&lt;doras&gt;</a></span><span class="message">stikonas: for example, I think we create a copy of &quot;kaem-optional-seed&quot; called &quot;init&quot; inside sysa/tmp, and then we actually execute its old name in the chroot case.</span></div><div class="line" id="020502"><span class="nick" style="color:#80b1d3"><a href="#020502" label="[02:05:02]">&lt;stikonas&gt;</a></span><span class="message">oh init is for the qemu mdoe</span></div><div class="line" id="020515"><span class="nick" style="color:#80b1d3"><a href="#020515" label="[02:05:15]">&lt;stikonas&gt;</a></span><span class="message">Linux kernel runs /init file when it boots</span></div><div class="line" id="020529"><span class="nick" style="color:#80b1d3"><a href="#020529" label="[02:05:29]">&lt;stikonas&gt;</a></span><span class="message">for chroot mode that copy doens't matter</span></div><div class="line" id="020543"><span class="nick" style="color:#80b1d3"><a href="#020543" label="[02:05:43]">&lt;stikonas&gt;</a></span><span class="message">hence we execute kaem-optional-seed</span></div><div class="line" id="020553"><span class="nick" style="color:#80b1d3"><a href="#020553" label="[02:05:53]">&lt;stikonas&gt;</a></span><span class="message">we could just as well run init, it would result in the same thing</span></div><div class="line" id="020649"><span class="nick" style="color:#2e2a4a"><a href="#020649" label="[02:06:49]">&lt;doras&gt;</a></span><span class="message">This is just an example for things that aren't trivial to figure out when looking at the source.</span></div><div class="line" id="020803"><span class="nick" style="color:#80b1d3"><a href="#020803" label="[02:08:03]">&lt;stikonas&gt;</a></span><span class="message">oh, I think we can already remove mkduild parameter from rootfs.py</span></div><div class="line" id="020809"><span class="nick" style="color:#80b1d3"><a href="#020809" label="[02:08:09]">&lt;stikonas&gt;</a></span><span class="message">let me do that</span></div><div class="line" id="020818"><span class="nick" style="color:#80b1d3"><a href="#020818" label="[02:08:18]">&lt;stikonas&gt;</a></span><span class="message">it's a tiny simplification, but still</span></div><div class="line" id="020901"><span class="nick" style="color:#80b1d3"><a href="#020901" label="[02:09:01]">&lt;stikonas&gt;</a></span><span class="message">that option is from times before stage0-posix had simple mkdir implementation</span></div><div class="line" id="020909"><span class="nick" style="color:#80b1d3"><a href="#020909" label="[02:09:09]">&lt;stikonas&gt;</a></span><span class="message">so we had to prepare some empty directories in advance</span></div><div class="line" id="020912"><span class="nick" style="color:#80b1d3"><a href="#020912" label="[02:09:12]">&lt;stikonas&gt;</a></span><span class="message">that's no longer necessary</span></div><div class="line" id="021109"><span class="nick" style="color:#80b1d3"><a href="#021109" label="[02:11:09]">&lt;stikonas&gt;</a></span><span class="message">pushed: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/commit/6e3fab4da2e9c4b7ccc0625b83d70f7ccb19f6f4">https://github.com/fosslinux/live-bootstrap/commit/6e3fab4da2e9c4b7ccc0625b83d70f7ccb19f6f4</a> </span></div><div class="line" id="021415"><span class="nick" style="color:#8dd3c7"><a href="#021415" label="[02:14:15]">&lt;fossy&gt;</a></span><span class="message">&lt;stikonas&gt; although the problem then is that root of the repo is still stage0-posix...</span></div><div class="line" id="021423"><span class="nick" style="color:#8dd3c7"><a href="#021423" label="[02:14:23]">&lt;fossy&gt;</a></span><span class="message">yes, this is the main problem</span></div><div class="line" id="021434"><span class="nick" style="color:#8dd3c7"><a href="#021434" label="[02:14:34]">&lt;fossy&gt;</a></span><span class="message">and something I am not prepared to really change</span></div><div class="line" id="021453"><span class="nick" style="color:#80b1d3"><a href="#021453" label="[02:14:53]">&lt;stikonas&gt;</a></span><span class="message">yes, that's indeed the complicated thing</span></div><div class="line" id="021510"><span class="nick" style="color:#80b1d3"><a href="#021510" label="[02:15:10]">&lt;stikonas&gt;</a></span><span class="message">we can't easily change it without making live-bootstrap repo really messy</span></div><div class="line" id="021611"><span class="nick" style="color:#80b1d3"><a href="#021611" label="[02:16:11]">&lt;stikonas&gt;</a></span><span class="message">but maybe at least simplify things enough, so that rootfs.py is a bit simpler</span></div><div class="line" id="021620"><span class="nick" style="color:#80b1d3"><a href="#021620" label="[02:16:20]">&lt;stikonas&gt;</a></span><span class="message">although even now it's not that complicated</span></div><div class="line" id="021633"><span class="nick" style="color:#80b1d3"><a href="#021633" label="[02:16:33]">&lt;stikonas&gt;</a></span><span class="message">but there are a few things that can be removed</span></div><div class="line" id="021804"><span class="nick" style="color:#80b1d3"><a href="#021804" label="[02:18:04]">&lt;stikonas&gt;</a></span><span class="message">but at least half of rootfs.py code is list of sources and their checksums...</span></div><div class="line" id="021903"><span class="nick" style="color:#8dd3c7"><a href="#021903" label="[02:19:03]">&lt;fossy&gt;</a></span><span class="message">which can be trivally represented by eg. json</span></div><div class="line" id="021944"><span class="nick" style="color:#80b1d3"><a href="#021944" label="[02:19:44]">&lt;stikonas&gt;</a></span><span class="message">yeah, but then you need json reader...</span></div><div class="line" id="022011"><span class="nick" style="color:#80b1d3"><a href="#022011" label="[02:20:11]">&lt;stikonas&gt;</a></span><span class="message">it's nothing that can't be manually done</span></div><div class="line" id="022114"><span class="nick" style="color:#80b1d3"><a href="#022114" label="[02:21:14]">&lt;stikonas&gt;</a></span><span class="message">but automation will need some kind of preparation</span></div><div class="line" id="022133"><span class="nick" style="color:#80b1d3"><a href="#022133" label="[02:21:33]">&lt;stikonas&gt;</a></span><span class="message">unless we really move to stage0-posix in root (/)</span></div><div class="line" id="022138"><span class="nick" style="color:#80b1d3"><a href="#022138" label="[02:21:38]">&lt;stikonas&gt;</a></span><span class="message">which is sigh...</span></div><div class="line" id="022246"><span class="nick" style="color:#6d2462"><a href="#022246" label="[02:22:46]">&lt;oriansj&gt;</a></span><span class="message">well we could add CD support to kaem-optional-seed with some effort</span></div><div class="line" id="022345"><span class="nick" style="color:#80b1d3"><a href="#022345" label="[02:23:45]">&lt;stikonas&gt;</a></span><span class="message">not sure if that would help</span></div><div class="line" id="022352"><span class="nick" style="color:#80b1d3"><a href="#022352" label="[02:23:52]">&lt;stikonas&gt;</a></span><span class="message">well, maybe</span></div><div class="line" id="022359"><span class="nick" style="color:#80b1d3"><a href="#022359" label="[02:23:59]">&lt;stikonas&gt;</a></span><span class="message">but it will blow up the size of the seed</span></div><div class="line" id="022407"><span class="nick" style="color:#80b1d3"><a href="#022407" label="[02:24:07]">&lt;stikonas&gt;</a></span><span class="message">which is really not ideal</span></div><div class="line" id="022423"><span class="nick" style="color:#6d2462"><a href="#022423" label="[02:24:23]">&lt;oriansj&gt;</a></span><span class="message">by 70-120bytes more (approximate guess)</span></div><div class="line" id="022434"><span class="nick" style="color:#80b1d3"><a href="#022434" label="[02:24:34]">&lt;stikonas&gt;</a></span><span class="message">kaem-optional-seed is already one of the hardest bits to write</span></div><div class="line" id="022456"><span class="nick" style="color:#6d2462"><a href="#022456" label="[02:24:56]">&lt;oriansj&gt;</a></span><span class="message">yeah and we want to convert to kaem-micro-seed when possible</span></div><div class="line" id="022456"><span class="nick" style="color:#80b1d3"><a href="#022456" label="[02:24:56]">&lt;stikonas&gt;</a></span><span class="message">(the other being hex1)</span></div><div class="line" id="022536"><span class="nick" style="color:#6d2462"><a href="#022536" label="[02:25:36]">&lt;oriansj&gt;</a></span><span class="message">as it'll shrink things once everything is fully stablized.</span></div><div class="line" id="022557"><span class="nick" style="color:#80b1d3"><a href="#022557" label="[02:25:57]">&lt;stikonas&gt;</a></span><span class="message">well, it will shrink the seed</span></div><div class="line" id="022615"><span class="nick" style="color:#80b1d3"><a href="#022615" label="[02:26:15]">&lt;stikonas&gt;</a></span><span class="message">although kaem-mini will still be written in hex0</span></div><div class="line" id="022625"><span class="nick" style="color:#80b1d3"><a href="#022625" label="[02:26:25]">&lt;stikonas&gt;</a></span><span class="message">and that is still ideally minimized</span></div><div class="line" id="022634"><span class="nick" style="color:#80b1d3"><a href="#022634" label="[02:26:34]">&lt;stikonas&gt;</a></span><span class="message">once you have .hex1, things become much better</span></div><div class="line" id="022647"><span class="nick" style="color:#80b1d3"><a href="#022647" label="[02:26:47]">&lt;stikonas&gt;</a></span><span class="message">anyway, going to bed now, you all can continue discussing</span></div><div class="line" id="022859"><span class="nick" style="color:#6d2462"><a href="#022859" label="[02:28:59]">&lt;oriansj&gt;</a></span><span class="message">also given that stage0-posix is only a handful of folders (all self-contained) it is trivial to just move everything out of the way as part of after.kaem</span></div><div class="line" id="023748"><span class="nick" style="color:#8dd3c7"><a href="#023748" label="[02:37:48]">&lt;fossy&gt;</a></span><span class="message">I really really really don't want stage0-posix at root of live-bootstrap</span></div><div class="line" id="023826"><span class="nick" style="color:#8dd3c7"><a href="#023826" label="[02:38:26]">&lt;fossy&gt;</a></span><span class="message">It would be OK to be able to copy paste everything in live-bootstrap to the root of stage0-posix and then go from there IMO</span></div><div class="line" id="023832"><span class="nick" style="color:#6d2462"><a href="#023832" label="[02:38:32]">&lt;oriansj&gt;</a></span><span class="message">fossy: ok, what change can I make in stage0-posix that would help you in that regard?</span></div><div class="line" id="023923"><span class="nick" style="color:#8dd3c7"><a href="#023923" label="[02:39:23]">&lt;fossy&gt;</a></span><span class="message">mm, not certain just yet</span></div><div class="line" id="023941"><span class="nick" style="color:#8dd3c7"><a href="#023941" label="[02:39:41]">&lt;fossy&gt;</a></span><span class="message">I dont think anything yet</span></div><div class="line" id="023959"><span class="nick" style="color:#8dd3c7"><a href="#023959" label="[02:39:59]">&lt;fossy&gt;</a></span><span class="message">but I will let you know if I find something useful later</span></div><div class="line" id="024352"><span class="nick" style="color:#6d2462"><a href="#024352" label="[02:43:52]">&lt;oriansj&gt;</a></span><span class="message">well here is an unfinished idea: break up stage0-posix into separate git repos for each Architecture</span></div><div class="line" id="024442"><span class="nick" style="color:#6d2462"><a href="#024442" label="[02:44:42]">&lt;oriansj&gt;</a></span><span class="message">so that live-bootstrap can just do git submodule for the architectures it wants to support and then throw an kaem.$arch file into its root</span></div><div class="line" id="024606"><span class="nick" style="color:#6d2462"><a href="#024606" label="[02:46:06]">&lt;oriansj&gt;</a></span><span class="message">it would need to include bootstrap-seeds, M2libc, M2-Planet, mescc-tools and mescc-tools-extra as git submodules as well.</span></div><div class="line" id="024813"><span class="nick" style="color:#8dd3c7"><a href="#024813" label="[02:48:13]">&lt;fossy&gt;</a></span><span class="message">yes, but we still have the problem of not supporting cd early, so we require a great amount of random files in live-bootstrap root</span></div><div class="line" id="024826"><span class="nick" style="color:#6d2462"><a href="#024826" label="[02:48:26]">&lt;oriansj&gt;</a></span><span class="message">it has the added benefit of allowing me to give people specific access to a single Arch that they work on</span></div><div class="line" id="024844"><span class="nick" style="color:#6d2462"><a href="#024844" label="[02:48:44]">&lt;oriansj&gt;</a></span><span class="message">fossy: well not exactly</span></div><div class="line" id="024912"><span class="nick" style="color:#6d2462"><a href="#024912" label="[02:49:12]">&lt;oriansj&gt;</a></span><span class="message">only init and kaem.$arch; everything else will be in folders</span></div><div class="line" id="024928"><span class="nick" style="color:#8dd3c7"><a href="#024928" label="[02:49:28]">&lt;fossy&gt;</a></span><span class="message">hmm</span></div><div class="line" id="025028"><span class="nick" style="color:#6d2462"><a href="#025028" label="[02:50:28]">&lt;oriansj&gt;</a></span><span class="message">the answers.$arch file isn't actually required</span></div><div class="line" id="025042"><span class="nick" style="color:#6d2462"><a href="#025042" label="[02:50:42]">&lt;oriansj&gt;</a></span><span class="message">nor the makefile</span></div><div class="line" id="025054"><span class="nick" style="color:#6d2462"><a href="#025054" label="[02:50:54]">&lt;oriansj&gt;</a></span><span class="message">after.kaem can be put anywhere</span></div><div class="line" id="025105"><span class="nick" style="color:#8dd3c7"><a href="#025105" label="[02:51:05]">&lt;fossy&gt;</a></span><span class="message">ok, yes, this is a reasonable path forward, I think</span></div><div class="line" id="025110"><span class="nick" style="color:#6d2462"><a href="#025110" label="[02:51:10]">&lt;oriansj&gt;</a></span><span class="message">as the kaem at that stage does support CD</span></div><div class="line" id="025158"><span class="nick" style="color:#8dd3c7"><a href="#025158" label="[02:51:58]">&lt;fossy&gt;</a></span><span class="message">particularly if we cab make the folder named something like, zstage0_x86 of something, just so it appears at the end of the list in a directory listing</span></div><div class="line" id="025232"><span class="nick" style="color:#6d2462"><a href="#025232" label="[02:52:32]">&lt;oriansj&gt;</a></span><span class="message">fossy: git submodules allows arbitrary naming</span></div><div class="line" id="025302"><span class="nick" style="color:#6d2462"><a href="#025302" label="[02:53:02]">&lt;oriansj&gt;</a></span><span class="message">its why stage0-posix is the submodule with a folder named Linux in stage0</span></div><div class="line" id="025349"><span class="nick" style="color:#6d2462"><a href="#025349" label="[02:53:49]">&lt;oriansj&gt;</a></span><span class="message">just set path = blah in .gitmodules</span></div><div class="line" id="025446"><span class="nick" style="color:#6d2462"><a href="#025446" label="[02:54:46]">&lt;oriansj&gt;</a></span><span class="message">I was going to do stage0-posix-$arch but keep the folder names in stage0-posix</span></div><div class="line" id="025500"><span class="nick" style="color:#8dd3c7"><a href="#025500" label="[02:55:00]">&lt;fossy&gt;</a></span><span class="message">yeah, exactly, I can't see any reason why this wouldn't be possible</span></div><div class="line" id="025517"><span class="nick" style="color:#6d2462"><a href="#025517" label="[02:55:17]">&lt;oriansj&gt;</a></span><span class="message">just requires a block of time for me to do it</span></div><div class="line" id="025553"><span class="nick" style="color:#8dd3c7"><a href="#025553" label="[02:55:53]">&lt;fossy&gt;</a></span><span class="message">well, no extreme rush, I would like to finish packaging in live-bootstrap first</span></div><div class="line" id="025617"><span class="nick" style="color:#6d2462"><a href="#025617" label="[02:56:17]">&lt;oriansj&gt;</a></span><span class="message">of course</span></div><div class="line" id="025753"><span class="nick" style="color:#6d2462"><a href="#025753" label="[02:57:53]">&lt;oriansj&gt;</a></span><span class="message">plus I am long overdue for figuring out the bus factor plan for my pieces.</span></div><div class="line" id="132609"><span class="nick" style="color:#6d2462"><a href="#132609" label="[13:26:09]">&lt;oriansj&gt;</a></span><span class="message">hmmm</span></div><div class="line" id="132620"><span class="nick" style="color:#6d2462"><a href="#132620" label="[13:26:20]">&lt;oriansj&gt;</a></span><span class="message">stikonas: I managed to reduce it down to a trivial test: <a rel="nofollow" href="https://paste.debian.net/1224800/">https://paste.debian.net/1224800/</a> </span></div><div class="line" id="132711"><span class="nick" style="color:#80b1d3"><a href="#132711" label="[13:27:11]">&lt;stikonas&gt;</a></span><span class="message">oh, ok, let's see. I've just started looking at it but with the test it would be clearer what to look for</span></div><div class="line" id="132740"><span class="nick" style="color:#6d2462"><a href="#132740" label="[13:27:40]">&lt;oriansj&gt;</a></span><span class="message">and I found a few other preprocessor bugs along the way</span></div><div class="line" id="132840"><span class="nick" style="color:#80b1d3"><a href="#132840" label="[13:28:40]">&lt;stikonas&gt;</a></span><span class="message">well, that's not surprising. preprocessor is still a very new thing in M2 world</span></div><div class="line" id="132855"><span class="nick" style="color:#6d2462"><a href="#132855" label="[13:28:55]">&lt;oriansj&gt;</a></span><span class="message">indeed</span></div><div class="line" id="133021"><span class="nick" style="color:#6d2462"><a href="#133021" label="[13:30:21]">&lt;oriansj&gt;</a></span><span class="message">and I'm thinking preserving comments in -E output is probably a good idea so I've altered comment behavior to save all comments as a single token for easier clean up later if we change our mind</span></div><div class="line" id="133320"><span class="nick" style="color:#80b1d3"><a href="#133320" label="[13:33:20]">&lt;stikonas&gt;</a></span><span class="message">that's fine</span></div><div class="line" id="133611"><span class="nick" style="color:#80b1d3"><a href="#133611" label="[13:36:11]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I can see in gdb what goes wrong</span></div><div class="line" id="133655"><span class="nick" style="color:#80b1d3"><a href="#133655" label="[13:36:55]">&lt;stikonas&gt;</a></span><span class="message">oriansj: so this define consists of more than one token (which we should support)</span></div><div class="line" id="133707"><span class="nick" style="color:#80b1d3"><a href="#133707" label="[13:37:07]">&lt;stikonas&gt;</a></span><span class="message">we have &quot;-&quot; and then &quot;1&quot;</span></div><div class="line" id="133733"><span class="nick" style="color:#80b1d3"><a href="#133733" label="[13:37:33]">&lt;stikonas&gt;</a></span><span class="message">but because we are in the #else block this kicks in after the first token <a rel="nofollow" href="https://github.com/oriansj/M2-Mesoplanet/blob/b34a2528c8efb95e0f0970d208fbb0d3ffb4c4ec/cc_macro.c#L588">https://github.com/oriansj/M2-Mesoplanet/blob/b34a2528c8efb95e0f0970d208fbb0d3ffb4c4ec/cc_macro.c#L588</a> </span></div><div class="line" id="133802"><span class="nick" style="color:#80b1d3"><a href="#133802" label="[13:38:02]">&lt;stikonas&gt;</a></span><span class="message">and sets hold = NULL</span></div><div class="line" id="133918"><span class="nick" style="color:#80b1d3"><a href="#133918" label="[13:39:18]">&lt;stikonas&gt;</a></span><span class="message">and then on the next iteratio nof while loop hold is NULL and things go wrong</span></div><div class="line" id="133954"><span class="nick" style="color:#80b1d3"><a href="#133954" label="[13:39:54]">&lt;stikonas&gt;</a></span><span class="message">maybe just if(NULL == hold) continue; ?</span></div><div class="line" id="134050"><span class="nick" style="color:#80b1d3"><a href="#134050" label="[13:40:50]">&lt;stikonas&gt;</a></span><span class="message">well, continue after moving to the next token</span></div><div class="line" id="134300"><span class="nick" style="color:#80b1d3"><a href="#134300" label="[13:43:00]">&lt;stikonas&gt;</a></span><span class="message">oriansj: something like <a rel="nofollow" href="https://paste.debian.net/1224801/">https://paste.debian.net/1224801/</a> </span></div><div class="line" id="134311"><span class="nick" style="color:#80b1d3"><a href="#134311" label="[13:43:11]">&lt;stikonas&gt;</a></span><span class="message">or am I missing something else here</span></div><div class="line" id="134446"><span class="nick" style="color:#6d2462"><a href="#134446" label="[13:44:46]">&lt;oriansj&gt;</a></span><span class="message">stikonas: might work</span></div><div class="line" id="134456"><span class="nick" style="color:#6d2462"><a href="#134456" label="[13:44:56]">&lt;oriansj&gt;</a></span><span class="message">I'll give it a try</span></div><div class="line" id="134507"><span class="nick" style="color:#6d2462"><a href="#134507" label="[13:45:07]">&lt;oriansj&gt;</a></span><span class="message">see if any knock on problems</span></div><div class="line" id="135456"><span class="nick" style="color:#6d2462"><a href="#135456" label="[13:54:56]">&lt;oriansj&gt;</a></span><span class="message">doesn't look like it causes problems.</span></div><div class="line" id="135615"><span class="nick" style="color:#6d2462"><a href="#135615" label="[13:56:15]">&lt;oriansj&gt;</a></span><span class="message">so now M2-Mesoplanet -E -f foo.c -o bar.c should work correctly</span></div><div class="line" id="135821"><span class="nick" style="color:#80b1d3"><a href="#135821" label="[13:58:21]">&lt;stikonas&gt;</a></span><span class="message">ok, that's good</span></div><div class="line" id="135838"><span class="nick" style="color:#6d2462"><a href="#135838" label="[13:58:38]">&lt;oriansj&gt;</a></span><span class="message">so why is mkstemp now throwing a segfaults for me now</span></div><div class="line" id="135906"><span class="nick" style="color:#6d2462"><a href="#135906" label="[13:59:06]">&lt;oriansj&gt;</a></span><span class="message">stikonas: can you pull the latest and see if M2-Mesoplanet -f foo.c -o bar works for you</span></div><div class="line" id="135923"><span class="nick" style="color:#6d2462"><a href="#135923" label="[13:59:23]">&lt;oriansj&gt;</a></span><span class="message">(to rule out local problems on my side)</span></div><div class="line" id="140119"><span class="nick" style="color:#80b1d3"><a href="#140119" label="[14:01:19]">&lt;stikonas&gt;</a></span><span class="message">pulling</span></div><div class="line" id="140315"><span class="nick" style="color:#80b1d3"><a href="#140315" label="[14:03:15]">&lt;stikonas&gt;</a></span><span class="message">seems to work on that EOT testcase you + int main() {return 0;}</span></div><div class="line" id="140322"><span class="nick" style="color:#80b1d3"><a href="#140322" label="[14:03:22]">&lt;stikonas&gt;</a></span><span class="message">s/EOT/EOF/</span></div><div class="line" id="140338"><span class="nick" style="color:#80b1d3"><a href="#140338" label="[14:03:38]">&lt;stikonas&gt;</a></span><span class="message">oh, but I have built M2-Mesoplanet with gcc</span></div><div class="line" id="140342"><span class="nick" style="color:#80b1d3"><a href="#140342" label="[14:03:42]">&lt;stikonas&gt;</a></span><span class="message">so maybe that's the issue</span></div><div class="line" id="140400"><span class="nick" style="color:#80b1d3"><a href="#140400" label="[14:04:00]">&lt;stikonas&gt;</a></span><span class="message">or are you also building it with gcc</span></div><div class="line" id="140406"><span class="nick" style="color:#6d2462"><a href="#140406" label="[14:04:06]">&lt;oriansj&gt;</a></span><span class="message">no; my issue is with GCC built M2-Mesoplanet</span></div><div class="line" id="140427"><span class="nick" style="color:#80b1d3"><a href="#140427" label="[14:04:27]">&lt;stikonas&gt;</a></span><span class="message">so at least simple files work</span></div><div class="line" id="140459"><span class="nick" style="color:#6d2462"><a href="#140459" label="[14:04:59]">&lt;oriansj&gt;</a></span><span class="message">yeah but complex input files shouldn't change the mkstemp behavior</span></div><div class="line" id="140509"><span class="nick" style="color:#80b1d3"><a href="#140509" label="[14:05:09]">&lt;stikonas&gt;</a></span><span class="message">yeah...</span></div><div class="line" id="140600"><span class="nick" style="color:#6d2462"><a href="#140600" label="[14:06:00]">&lt;oriansj&gt;</a></span><span class="message">but since your test worked, we know that M2-Mesoplanet works</span></div><div class="line" id="140612"><span class="nick" style="color:#6d2462"><a href="#140612" label="[14:06:12]">&lt;oriansj&gt;</a></span><span class="message">and #include is actually working</span></div><div class="line" id="140936"><span class="nick" style="color:#6d2462"><a href="#140936" label="[14:09:36]">&lt;oriansj&gt;</a></span><span class="message">brb</span></div><div class="line" id="152949"><span class="nick" style="color:#6d2462"><a href="#152949" label="[15:29:49]">&lt;oriansj&gt;</a></span><span class="message">yeah, it is a bug with the glibc I built.</span></div><div class="line" id="160308"><span class="nick" style="color:#80b1d3"><a href="#160308" label="[16:03:08]">&lt;stikonas&gt;</a></span><span class="message">ok</span></div><div class="line" id="160315"><span class="nick" style="color:#80b1d3"><a href="#160315" label="[16:03:15]">&lt;stikonas&gt;</a></span><span class="message">hopefully it works with M2libc...</span></div><div class="line" id="173644"><span class="nick" style="color:#234e69"><a href="#173644" label="[17:36:44]">&lt;gbrlwck&gt;</a></span><span class="message">i'm confused about MEScc allocating local variable space on the stack, but as far as i can tell does not deallocate that space.  looking at the M1 output of lib/tests/scaffold/04-call-0.c which results in <a rel="nofollow" href="https://termbin.com/ri5p">https://termbin.com/ri5p</a>  ):  wouldn't two calls to testi result in twice the stack space allocated instead of a alloc-dealloc-realloc pattern?</span></div><div class="line" id="173903"><span class="nick" style="color:#6c3d55"><a href="#173903" label="[17:39:03]">&lt;nimaje&gt;</a></span><span class="message">wasn't the point of a call stack that when you return the current stackframe gets discarded?</span></div><div class="line" id="174030"><span class="nick" style="color:#234e69"><a href="#174030" label="[17:40:30]">&lt;gbrlwck&gt;</a></span><span class="message">nimaje: i have no idea!  but how could a CPU know where to (re-)increase the SP to after calling a function?</span></div><div class="line" id="174613"><span class="nick" style="color:#2e2a4a"><a href="#174613" label="[17:46:13]">&lt;doras&gt;</a></span><span class="message">Would it be possible for after.kaem to be made aware of the architecture in which it is running?</span></div><div class="line" id="174648"><span class="nick" style="color:#2e2a4a"><a href="#174648" label="[17:46:48]">&lt;doras&gt;</a></span><span class="message">Currently this is external knowledge which requires access to cp or mv from the user of live-bootstrap.</span></div><div class="line" id="174831"><span class="nick" style="color:#2e2a4a"><a href="#174831" label="[17:48:31]">&lt;doras&gt;</a></span><span class="message">Actually, I think we have get_machine at this stage.</span></div><div class="line" id="174832"><span class="nick" style="color:#2e2a4a"><a href="#174832" label="[17:48:32]">&lt;doras&gt;</a></span><span class="message">Hmmm...</span></div><div class="line" id="174909"><span class="nick" style="color:#234e69"><a href="#174909" label="[17:49:09]">&lt;gbrlwck&gt;</a></span><span class="message">doras: isn't it in the ARCH env var?</span></div><div class="line" id="174924"><span class="nick" style="color:#6c3d55"><a href="#174924" label="[17:49:24]">&lt;nimaje&gt;</a></span><span class="message">how does  ret  know where to jump back to? (modern?) cpus have a register pointing at the current stackframe and that frame should begin shortly after the SP at the time the  call  was</span></div><div class="line" id="174955"><span class="nick" style="color:#2e2a4a"><a href="#174955" label="[17:49:55]">&lt;doras&gt;</a></span><span class="message">gbrlwck: currently live-bootstrap injects this information to the bootstrap directory as part of its preparation stage.</span></div><div class="line" id="175115"><span class="nick" style="color:#2e2a4a"><a href="#175115" label="[17:51:15]">&lt;doras&gt;</a></span><span class="message">It basically renames after.kaem.x86 or after.kaem.amd64 to after.kaem</span></div><div class="line" id="175119"><span class="nick" style="color:#234e69"><a href="#175119" label="[17:51:19]">&lt;gbrlwck&gt;</a></span><span class="message">doras: currently live-bootstrap is only ready for x86; i've added some changes to get it to build up to mes-m2 for riscv64.  only thing i needed to do was to set a ARCH=riscv64 in sysa/after.kaem.riscv64</span></div><div class="line" id="175120"><span class="nick" style="color:#80b1d3"><a href="#175120" label="[17:51:20]">&lt;stikonas&gt;</a></span><span class="message">doras: get_machine does print information needed but you can't consume it in kaem scripts</span></div><div class="line" id="175129"><span class="nick" style="color:#234e69"><a href="#175129" label="[17:51:29]">&lt;gbrlwck&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/gbrlwck/live-bootstrap/commit/875f5d1ac42452023fa596b3396dd283af67f0cf">https://github.com/gbrlwck/live-bootstrap/commit/875f5d1ac42452023fa596b3396dd283af67f0cf</a> </span></div><div class="line" id="175153"><span class="nick" style="color:#80b1d3"><a href="#175153" label="[17:51:53]">&lt;stikonas&gt;</a></span><span class="message">you can't really pass that information into kaem without adding additional syscalls (dup)</span></div><div class="line" id="175210"><span class="nick" style="color:#80b1d3"><a href="#175210" label="[17:52:10]">&lt;stikonas&gt;</a></span><span class="message">hence for now arch is injected</span></div><div class="line" id="175305"><span class="nick" style="color:#80b1d3"><a href="#175305" label="[17:53:05]">&lt;stikonas&gt;</a></span><span class="message">you can probably write a binary like get_machine that sets those for you</span></div><div class="line" id="175314"><span class="nick" style="color:#80b1d3"><a href="#175314" label="[17:53:14]">&lt;stikonas&gt;</a></span><span class="message">and launches the next script</span></div><div class="line" id="175414"><span class="nick" style="color:#234e69"><a href="#175414" label="[17:54:14]">&lt;gbrlwck&gt;</a></span><span class="message">nimaje: so you're saying in x86 this is done automatically?  i thought for ret to work we only needed the previous stack pointer (+ offset to the next instruction)?.  in rv64 we sacrifice one of the &quot;general purpose&quot; registers for the RA (return address).</span></div><div class="line" id="175504"><span class="nick">***</span><span class="message notice">nckxmas is now known as nckx</span></div><div class="line" id="175628"><span class="nick" style="color:#80b1d3"><a href="#175628" label="[17:56:28]">&lt;stikonas&gt;</a></span><span class="message">doras: still, how would even get_machine help?</span></div><div class="line" id="175644"><span class="nick" style="color:#80b1d3"><a href="#175644" label="[17:56:44]">&lt;stikonas&gt;</a></span><span class="message">get_machine would always print amd64 on my system</span></div><div class="line" id="175649"><span class="nick" style="color:#80b1d3"><a href="#175649" label="[17:56:49]">&lt;stikonas&gt;</a></span><span class="message">even if I'm running x86 bootstrap</span></div><div class="line" id="175704"><span class="nick" style="color:#2e2a4a"><a href="#175704" label="[17:57:04]">&lt;doras&gt;</a></span><span class="message">I see.</span></div><div class="line" id="175720"><span class="nick" style="color:#80b1d3"><a href="#175720" label="[17:57:20]">&lt;stikonas&gt;</a></span><span class="message">in some sense like you said arch is an external parameter</span></div><div class="line" id="175801"><span class="nick" style="color:#80b1d3"><a href="#175801" label="[17:58:01]">&lt;stikonas&gt;</a></span><span class="message">although right now I think we input that external parameter twice</span></div><div class="line" id="175827"><span class="nick" style="color:#80b1d3"><a href="#175827" label="[17:58:27]">&lt;stikonas&gt;</a></span><span class="message">once, when we pick kaem-optional-seed that we run, and second time is that after.kaem.arch file</span></div><div class="line" id="175839"><span class="nick" style="color:#80b1d3"><a href="#175839" label="[17:58:39]">&lt;stikonas&gt;</a></span><span class="message">in principle, second one should be deducible from the first</span></div><div class="line" id="175856"><span class="nick" style="color:#80b1d3"><a href="#175856" label="[17:58:56]">&lt;stikonas&gt;</a></span><span class="message">but I can't see how to do that with get_machine</span></div><div class="line" id="175939"><span class="nick" style="color:#80b1d3"><a href="#175939" label="[17:59:39]">&lt;stikonas&gt;</a></span><span class="message">in C, maybe...</span></div><div class="line" id="175959"><span class="nick" style="color:#80b1d3"><a href="#175959" label="[17:59:59]">&lt;stikonas&gt;</a></span><span class="message">e.g. that new tool M2-Mesoplanet is aware of its own arch</span></div><div class="line" id="180103"><span class="nick" style="color:#80b1d3"><a href="#180103" label="[18:01:03]">&lt;stikonas&gt;</a></span><span class="message">so in principle other binaries, e.g. kaem could be made aware of that too</span></div><div class="line" id="180128"><span class="nick" style="color:#2e2a4a"><a href="#180128" label="[18:01:28]">&lt;doras&gt;</a></span><span class="message">stikonas: that second time is an issue for me. Just complicates things.</span></div><div class="line" id="180151"><span class="nick" style="color:#80b1d3"><a href="#180151" label="[18:01:51]">&lt;stikonas&gt;</a></span><span class="message">so I think the way to go then</span></div><div class="line" id="180202"><span class="nick" style="color:#80b1d3"><a href="#180202" label="[18:02:02]">&lt;stikonas&gt;</a></span><span class="message">is to implement $ARCH built-in env variable in kaem</span></div><div class="line" id="180346"><span class="nick" style="color:#80b1d3"><a href="#180346" label="[18:03:46]">&lt;stikonas&gt;</a></span><span class="message">the other STAGE0_ARCH variable can then be worked out automatically using some scripting...</span></div><div class="line" id="180409"><span class="nick" style="color:#80b1d3"><a href="#180409" label="[18:04:09]">&lt;stikonas&gt;</a></span><span class="message">using a few if statements in .kaem files</span></div><div class="line" id="180441"><span class="nick" style="color:#80b1d3"><a href="#180441" label="[18:04:41]">&lt;stikonas&gt;</a></span><span class="message">doras: and the first time is fine for you?</span></div><div class="line" id="180451"><span class="nick" style="color:#80b1d3"><a href="#180451" label="[18:04:51]">&lt;stikonas&gt;</a></span><span class="message">(choice of kaem-optional-seed)</span></div><div class="line" id="180505"><span class="nick" style="color:#80b1d3"><a href="#180505" label="[18:05:05]">&lt;stikonas&gt;</a></span><span class="message">we can't really get rid of that one</span></div><div class="line" id="180531"><span class="nick" style="color:#80b1d3"><a href="#180531" label="[18:05:31]">&lt;stikonas&gt;</a></span><span class="message">since that one is a real choice of which chain to run</span></div><div class="line" id="180612"><span class="nick" style="color:#2e2a4a"><a href="#180612" label="[18:06:12]">&lt;doras&gt;</a></span><span class="message">I'm still not sure because I don't have the full picture, but I think it's fine since it's the only executable we're actually executing directly as part of sysa, it's easy to give different paths for different architectures.</span></div><div class="line" id="180719"><span class="nick" style="color:#2e2a4a"><a href="#180719" label="[18:07:19]">&lt;doras&gt;</a></span><span class="message">Moving files is a different story.</span></div><div class="line" id="180805"><span class="nick" style="color:#234e69"><a href="#180805" label="[18:08:05]">&lt;gbrlwck&gt;</a></span><span class="message">doras: what exactly are you doing/trying to do (if i may ask)?</span></div><div class="line" id="180836"><span class="nick" style="color:#2e2a4a"><a href="#180836" label="[18:08:36]">&lt;doras&gt;</a></span><span class="message">gbrlwck: I basically want to build live-boostrap, including preparations, with nothing but a kernel providing chroot and the execution of the seed.</span></div><div class="line" id="180850"><span class="nick" style="color:#234e69"><a href="#180850" label="[18:08:50]">&lt;gbrlwck&gt;</a></span><span class="message">on which architecture?</span></div><div class="line" id="180928"><span class="nick" style="color:#2e2a4a"><a href="#180928" label="[18:09:28]">&lt;doras&gt;</a></span><span class="message">Currently live-bootstrap can build all the way to sysc only on x86 as far as I know.</span></div><div class="line" id="181102"><span class="nick" style="color:#2e2a4a"><a href="#181102" label="[18:11:02]">&lt;doras&gt;</a></span><span class="message">But the kernel system doing the bootstrap would be running on x86_64.</span></div><div class="line" id="181214"><span class="nick" style="color:#2e2a4a"><a href="#181214" label="[18:12:14]">&lt;doras&gt;</a></span><span class="message">We would want to bootstrap amd64, aarch64, riscv and ppc64le once they are supported, but for now we'll have to cross-compile them.</span></div><div class="line" id="181241"><span class="nick" style="color:#234e69"><a href="#181241" label="[18:12:41]">&lt;gbrlwck&gt;</a></span><span class="message">i thought `./rootfs.py --chroot` was to run live-bootstrap on a host-arch (without providing a separate kernel) and the default used qemu (where providing a kernel is necessary)</span></div><div class="line" id="181359"><span class="nick" style="color:#2e2a4a"><a href="#181359" label="[18:13:59]">&lt;doras&gt;</a></span><span class="message">Well, I'm running live-boostrap on a host, not booting to initramfs or similar.</span></div><div class="line" id="181602"><span class="nick" style="color:#2e2a4a"><a href="#181602" label="[18:16:02]">&lt;doras&gt;</a></span><span class="message">But I want to prepare live-bootstrap for building without depending on anything from the host.</span></div><div class="line" id="182043"><span class="nick" style="color:#2e2a4a"><a href="#182043" label="[18:20:43]">&lt;doras&gt;</a></span><span class="message">stikonas: would having a different stage0-posix git repo for each architecture also remove the need for the $ARCH and $STAGE0_ARCH variables?</span></div><div class="line" id="183725"><span class="nick" style="color:#2e2a4a"><a href="#183725" label="[18:37:25]">&lt;doras&gt;</a></span><span class="message">Assuming we can stage the correct repo in sysa/tmp, of course, and that each repo would be largely identical in its file names and structure.</span></div><div class="line" id="184709"><span class="nick" style="color:#80b1d3"><a href="#184709" label="[18:47:09]">&lt;stikonas&gt;</a></span><span class="message">doras: it's probably not necessary</span></div><div class="line" id="184721"><span class="nick" style="color:#80b1d3"><a href="#184721" label="[18:47:21]">&lt;stikonas&gt;</a></span><span class="message">it looks a bit too complicated</span></div><div class="line" id="184727"><span class="nick" style="color:#80b1d3"><a href="#184727" label="[18:47:27]">&lt;stikonas&gt;</a></span><span class="message">to split arch repos but we'll see</span></div><div class="line" id="184838"><span class="nick" style="color:#2e2a4a"><a href="#184838" label="[18:48:38]">&lt;doras&gt;</a></span><span class="message">stikonas: would it though?</span></div><div class="line" id="184919"><span class="nick" style="color:#80b1d3"><a href="#184919" label="[18:49:19]">&lt;stikonas&gt;</a></span><span class="message">hmm, maybe not, they are quite independent...</span></div><div class="line" id="185002"><span class="nick" style="color:#80b1d3"><a href="#185002" label="[18:50:02]">&lt;stikonas&gt;</a></span><span class="message">but still, we only need to define $ARCH variable in further steps</span></div><div class="line" id="185058"><span class="nick" style="color:#80b1d3"><a href="#185058" label="[18:50:58]">&lt;stikonas&gt;</a></span><span class="message">anyway, it's up to oriansj whether to split stage0-posix...</span></div><div class="line" id="192020"><span class="nick" style="color:#2e2a4a"><a href="#192020" label="[19:20:20]">&lt;doras&gt;</a></span><span class="message">stikonas: could kaem read those from a config file if we had one?</span></div><div class="line" id="192139"><span class="nick" style="color:#80b1d3"><a href="#192139" label="[19:21:39]">&lt;stikonas&gt;</a></span><span class="message">not out of box right now but shouldn't be too hard to add</span></div><div class="line" id="192149"><span class="nick" style="color:#80b1d3"><a href="#192149" label="[19:21:49]">&lt;stikonas&gt;</a></span><span class="message">basically you need to add support to . / source command</span></div><div class="line" id="192336"><span class="nick" style="color:#80b1d3"><a href="#192336" label="[19:23:36]">&lt;stikonas&gt;</a></span><span class="message">right now kaem only supports supports env variables, cd, pwd, set, unsed, exec  and echo</span></div><div class="line" id="192359"><span class="nick" style="color:#80b1d3"><a href="#192359" label="[19:23:59]">&lt;stikonas&gt;</a></span><span class="message">and this is full kaem that is written in C</span></div><div class="line" id="192432"><span class="nick" style="color:#80b1d3"><a href="#192432" label="[19:24:32]">&lt;stikonas&gt;</a></span><span class="message">kaem-optional-seed is a much smaller program written in hex0 and only supports running commands with arguments are removing comments</span></div><div class="line" id="192524"><span class="nick" style="color:#80b1d3"><a href="#192524" label="[19:25:24]">&lt;stikonas&gt;</a></span><span class="message">in principle it would be nicer if everything can just run with the config file</span></div><div class="line" id="192539"><span class="nick" style="color:#80b1d3"><a href="#192539" label="[19:25:39]">&lt;stikonas&gt;</a></span><span class="message">which can then be either handwritten or created using python helper</span></div><div class="line" id="192559"><span class="nick" style="color:#2e2a4a"><a href="#192559" label="[19:25:59]">&lt;doras&gt;</a></span><span class="message">But at the after.kaem stage we already have the full kaem, don't we?</span></div><div class="line" id="192610"><span class="nick" style="color:#80b1d3"><a href="#192610" label="[19:26:10]">&lt;stikonas&gt;</a></span><span class="message">doras: yes</span></div><div class="line" id="192635"><span class="nick" style="color:#80b1d3"><a href="#192635" label="[19:26:35]">&lt;stikonas&gt;</a></span><span class="message">full kaem is maybe step 9 out of 18 or so in stage0-posix</span></div><div class="line" id="195717"><span class="nick" style="color:#2e2a4a"><a href="#195717" label="[19:57:17]">&lt;doras&gt;</a></span><span class="message">stikonas: it may also require &quot;export&quot;, no?</span></div><div class="line" id="201258"><span class="nick" style="color:#80b1d3"><a href="#201258" label="[20:12:58]">&lt;stikonas&gt;</a></span><span class="message">doras: just VAR=value should work</span></div><div class="line" id="201335"><span class="nick" style="color:#2e2a4a"><a href="#201335" label="[20:13:35]">&lt;doras&gt;</a></span><span class="message">So kaem currently exports every variable?</span></div><div class="line" id="201354"><span class="nick" style="color:#80b1d3"><a href="#201354" label="[20:13:54]">&lt;stikonas&gt;</a></span><span class="message">probably, but I'm not 100% sure</span></div><div class="line" id="201418"><span class="nick" style="color:#80b1d3"><a href="#201418" label="[20:14:18]">&lt;stikonas&gt;</a></span><span class="message">in any case we only needs those variables in kaem script itself</span></div><div class="line" id="201453"><span class="nick" style="color:#80b1d3"><a href="#201453" label="[20:14:53]">&lt;stikonas&gt;</a></span><span class="message">config file that bash later consumes also does not export</span></div><div class="line" id="201522"><span class="nick" style="color:#80b1d3"><a href="#201522" label="[20:15:22]">&lt;stikonas&gt;</a></span><span class="message">since config variables only affect branches in the script itself</span></div><div class="line" id="201714"><span class="nick" style="color:#80b1d3"><a href="#201714" label="[20:17:14]">&lt;stikonas&gt;</a></span><span class="message">so we define some variables like GUILE_LOAD_PATH in mes build script and it works</span></div><div class="line" id="201720"><span class="nick" style="color:#80b1d3"><a href="#201720" label="[20:17:20]">&lt;stikonas&gt;</a></span><span class="message">so I think it's basically automatic export</span></div><div class="line" id="201747"><span class="nick" style="color:#80b1d3"><a href="#201747" label="[20:17:47]">&lt;stikonas&gt;</a></span><span class="message">at least until we reach next scripting engine (bash)</span></div><div class="line" id="202301"><span class="nick" style="color:#2e2a4a"><a href="#202301" label="[20:23:01]">&lt;doras&gt;</a></span><span class="message">I guess so.</span></div><div class="line" id="235937"><span class="nick" style="color:#8dd3c7"><a href="#235937" label="[23:59:37]">&lt;fossy&gt;</a></span><span class="message">doras, stikonas: yes, kaem currently exports every variable</span></div><br /></div></body></html>