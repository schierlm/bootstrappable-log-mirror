<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-04-15.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="001527"><span class="nick" style="color:#389600"><a href="#001527" label="[00:15:27]">&lt;fossy&gt;</a></span><span class="message">haha, &quot;who disassembles doors&quot;</span></div><div class="line" id="024112"><span class="nick" style="color:#8dd3c7"><a href="#024112" label="[02:41:12]">&lt;oriansj&gt;</a></span><span class="message">fossy: yeah, it is super funny. Until it is your kid and you have to explain to the babysitter that closing the bathroom door to have privacy will likely result in the door falling onto their head by said child wishing to continue playing.</span></div><div class="line" id="121852"><span class="nick" style="color:#2e2a4a"><a href="#121852" label="[12:18:52]">&lt;doras&gt;</a></span><span class="message">So where do we stand in regards to kernel bootstrap? Is a Linux kernel still a seed requirement for building sysa?</span></div><div class="line" id="123002"><span class="nick" style="color:#6b8072"><a href="#123002" label="[12:30:02]">&lt;j-k-web&gt;</a></span><span class="message">&gt; I am starting work on the Fiwix to Linux kexec. - rickmasters 2023-04-13</span></div><div class="line" id="123002"><span class="nick" style="color:#6b8072"><a href="#123002" label="[12:30:02]">&lt;j-k-web&gt;</a></span><span class="message">also</span></div><div class="line" id="123003"><span class="nick" style="color:#6b8072"><a href="#123003" label="[12:30:03]">&lt;j-k-web&gt;</a></span><span class="message"> <a rel="nofollow" href="https://logs.guix.gnu.org/bootstrappable/2023-03-20.log#070004">https://logs.guix.gnu.org/bootstrappable/2023-03-20.log#070004</a> </span></div><div class="line" id="123417"><span class="nick" style="color:#6b8072"><a href="#123417" label="[12:34:17]">&lt;j-k-web&gt;</a></span><span class="message">with live-bootstrap when building mes it grabs the mes source + nyacc source but then not much of a mention after that. is it unpacked to the same dir as mes?</span></div><div class="line" id="123436"><span class="nick" style="color:#6b8072"><a href="#123436" label="[12:34:36]">&lt;j-k-web&gt;</a></span><span class="message">*same dir mes source</span></div><div class="line" id="123917"><span class="nick" style="color:#80b1d3"><a href="#123917" label="[12:39:17]">&lt;gforce_d11977&gt;</a></span><span class="message">here my asciinema recording from head/trunk of yesterday evening with qemu and builder.hex0 kernel: <a rel="nofollow" href="https://creepy77.playat.ch/live/">https://creepy77.playat.ch/live/</a> </span></div><div class="line" id="132834"><span class="nick" style="color:#2e2a4a"><a href="#132834" label="[13:28:34]">&lt;doras&gt;</a></span><span class="message">I see. So kexec to Linux is still missing.</span></div><div class="line" id="133259"><span class="nick" style="color:#6d2462"><a href="#133259" label="[13:32:59]">&lt;rickmasters&gt;</a></span><span class="message">doras: yes it only works up to building Linux. We integrated what works so far to make it easier to test changes and make sure keeps working.</span></div><div class="line" id="133431"><span class="nick" style="color:#6d2462"><a href="#133431" label="[13:34:31]">&lt;rickmasters&gt;</a></span><span class="message">Of course if you use a Linux kernel it will still run to completion like before.</span></div><div class="line" id="134027"><span class="nick" style="color:#6d2462"><a href="#134027" label="[13:40:27]">&lt;rickmasters&gt;</a></span><span class="message">j-k-web: if you are asking about the nyacc source, it is unpacked in a sibling directory next to mes.</span></div><div class="line" id="134116"><span class="nick" style="color:#2e2a4a"><a href="#134116" label="[13:41:16]">&lt;doras&gt;</a></span><span class="message">rickmasters: impressive progress :)</span></div><div class="line" id="134151"><span class="nick" style="color:#6d2462"><a href="#134151" label="[13:41:51]">&lt;rickmasters&gt;</a></span><span class="message">doras: thanks!</span></div><div class="line" id="134245"><span class="nick" style="color:#6d2462"><a href="#134245" label="[13:42:45]">&lt;rickmasters&gt;</a></span><span class="message">j-k-web: Check out GUILE_LOAD_PATH here to see how nyacc is located: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysa/run.kaem">https://github.com/fosslinux/live-bootstrap/blob/master/sysa/run.kaem</a> </span></div><div class="line" id="140806"><span class="nick" style="color:#8dd3c7"><a href="#140806" label="[14:08:06]">&lt;oriansj&gt;</a></span><span class="message">yeah, the combo of mes/nyacc and M2-Planet/M2libc is a good bit touchy</span></div><div class="line" id="141548"><span class="nick" style="color:#234e69"><a href="#141548" label="[14:15:48]">&lt;Mikaku&gt;</a></span><span class="message">rickmasters: next week I'll open a new issue for kexec with a commit where you can easily switch from Fiwix to a new Fiwix kernel</span></div><div class="line" id="141610"><span class="nick" style="color:#234e69"><a href="#141610" label="[14:16:10]">&lt;Mikaku&gt;</a></span><span class="message">rickmasters: this will put the foundations to add support to be able to switch From Fiwix to a Linux kernel</span></div><div class="line" id="141643"><span class="nick" style="color:#234e69"><a href="#141643" label="[14:16:43]">&lt;Mikaku&gt;</a></span><span class="message">I'm preparing the documentation that will help to understand how is kexec implemented in FIwix</span></div><div class="line" id="141823"><span class="nick" style="color:#6d2462"><a href="#141823" label="[14:18:23]">&lt;rickmasters&gt;</a></span><span class="message">Mikaku: Thank you! That will be very helpful and I'm looking forward to it.</span></div><div class="line" id="143237"><span class="nick" style="color:#6c3d55"><a href="#143237" label="[14:32:37]">&lt;river&gt;</a></span><span class="message"> <a rel="nofollow" href="https://matklad.github.io/2023/04/13/reasonable-bootstrap.html">https://matklad.github.io/2023/04/13/reasonable-bootstrap.html</a> </span></div><div class="line" id="150956"><span class="nick" style="color:#6b8072"><a href="#150956" label="[15:09:56]">&lt;j-k-web&gt;</a></span><span class="message">thanks for the nyacc details both. is there anywhere the `libc-mini.a` etc builder parts live standalone? or do they only live in live-bootstrap mes-xyz.kaem?</span></div><div class="line" id="151717"><span class="nick" style="color:#d9d9d9"><a href="#151717" label="[15:17:17]">&lt;stikonas&gt;</a></span><span class="message">j-k-web: no, it's not standalone...</span></div><div class="line" id="151726"><span class="nick" style="color:#d9d9d9"><a href="#151726" label="[15:17:26]">&lt;stikonas&gt;</a></span><span class="message">there is also makefile in mes repo that builds libc-mini.a</span></div><div class="line" id="152325"><span class="nick" style="color:#d9d9d9"><a href="#152325" label="[15:23:25]">&lt;stikonas&gt;</a></span><span class="message">j-k-web: what you described is not that different to what we already have for rust, just webassembly instead of C</span></div><div class="line" id="152352"><span class="nick" style="color:#d9d9d9"><a href="#152352" label="[15:23:52]">&lt;stikonas&gt;</a></span><span class="message">there is a rust to C compiler that is independent of the host architecture</span></div><div class="line" id="152424"><span class="nick" style="color:#6b8072"><a href="#152424" label="[15:24:24]">&lt;j-k-web&gt;</a></span><span class="message">well I'm still at the mes part trying to work up to tcc still. no make or gcc etc</span></div><div class="line" id="152439"><span class="nick" style="color:#d9d9d9"><a href="#152439" label="[15:24:39]">&lt;stikonas&gt;</a></span><span class="message">j-k-web: oh, sorry, that was river's post</span></div><div class="line" id="152457"><span class="nick" style="color:#d9d9d9"><a href="#152457" label="[15:24:57]">&lt;stikonas&gt;</a></span><span class="message">I suspect most of the complexity is not in what we output, i.e. webassembly or C</span></div><div class="line" id="152509"><span class="nick" style="color:#d9d9d9"><a href="#152509" label="[15:25:09]">&lt;stikonas&gt;</a></span><span class="message">but in implementing features of the language that is compiled</span></div><div class="line" id="152538"><span class="nick" style="color:#d9d9d9"><a href="#152538" label="[15:25:38]">&lt;stikonas&gt;</a></span><span class="message">e.g. only a few percent of M2-Planet's code is target specific</span></div><div class="line" id="152618"><span class="nick" style="color:#d9d9d9"><a href="#152618" label="[15:26:18]">&lt;stikonas&gt;</a></span><span class="message">though perhaps webassembly can be compiled or interpreted with less RAM than huge C files</span></div><div class="line" id="153459"><span class="nick" style="color:#bc80bd"><a href="#153459" label="[15:34:59]">&lt;msavoritias&gt;</a></span><span class="message">that plus webassembly is probably easier to work with(?) at least it should be</span></div><div class="line" id="154555"><span class="nick" style="color:#3c5b35"><a href="#154555" label="[15:45:55]">&lt;stikonas[m]&gt;</a></span><span class="message">Unlikely to be much easier...</span></div><div class="line" id="154603"><span class="nick" style="color:#3c5b35"><a href="#154603" label="[15:46:03]">&lt;stikonas[m]&gt;</a></span><span class="message">C is well known anyway</span></div><div class="line" id="154612"><span class="nick" style="color:#3c5b35"><a href="#154612" label="[15:46:12]">&lt;stikonas[m]&gt;</a></span><span class="message">So it's not hard to spit C code</span></div><div class="line" id="154736"><span class="nick" style="color:#bc80bd"><a href="#154736" label="[15:47:36]">&lt;msavoritias&gt;</a></span><span class="message">hmm. makes sense</span></div><div class="line" id="154751"><span class="nick" style="color:#3c5b35"><a href="#154751" label="[15:47:51]">&lt;stikonas[m]&gt;</a></span><span class="message">Web assembly is probably easier to parse than C</span></div><div class="line" id="154802"><span class="nick" style="color:#3c5b35"><a href="#154802" label="[15:48:02]">&lt;stikonas[m]&gt;</a></span><span class="message">But we alrwady have GCC</span></div><div class="line" id="154810"><span class="nick" style="color:#3c5b35"><a href="#154810" label="[15:48:10]">&lt;stikonas[m]&gt;</a></span><span class="message">If we consider rust bootstrap</span></div><div class="line" id="154843"><span class="nick" style="color:#3c5b35"><a href="#154843" label="[15:48:43]">&lt;stikonas[m]&gt;</a></span><span class="message">Adding something like web assembly to stage0 might make some simplification though</span></div><div class="line" id="155026"><span class="nick" style="color:#3c5b35"><a href="#155026" label="[15:50:26]">&lt;stikonas[m]&gt;</a></span><span class="message">Maybe it can be smaller than cc_x86</span></div><div class="line" id="155125"><span class="nick" style="color:#bc80bd"><a href="#155125" label="[15:51:25]">&lt;msavoritias&gt;</a></span><span class="message">personally i see myself moving to webassembly for cross compiling stuff. and a low level vm</span></div><div class="line" id="155131"><span class="nick" style="color:#bc80bd"><a href="#155131" label="[15:51:31]">&lt;msavoritias&gt;</a></span><span class="message">that basically C is right now</span></div><div class="line" id="155155"><span class="nick" style="color:#bc80bd"><a href="#155155" label="[15:51:55]">&lt;msavoritias&gt;</a></span><span class="message">mainly due to the smaller amount of overhead writing it.</span></div><div class="line" id="155212"><span class="nick" style="color:#bc80bd"><a href="#155212" label="[15:52:12]">&lt;msavoritias&gt;</a></span><span class="message">at least I have been discouraged for learning C because of that ^^'</span></div><div class="line" id="155253"><span class="nick" style="color:#bc80bd"><a href="#155253" label="[15:52:53]">&lt;msavoritias&gt;</a></span><span class="message">plus i probably dont even have to use gcc at that point</span></div><div class="line" id="161422"><span class="nick" style="color:#8dd3c7"><a href="#161422" label="[16:14:22]">&lt;oriansj&gt;</a></span><span class="message">river: yeah, that is the we are just distributing a binary and you need to use that if you want to build our crap.</span></div><div class="line" id="161849"><span class="nick" style="color:#8dd3c7"><a href="#161849" label="[16:18:49]">&lt;oriansj&gt;</a></span><span class="message">but supporting the generation of web assembly output is reasonable as it is effectively portable object code</span></div><div class="line" id="162021"><span class="nick" style="color:#8dd3c7"><a href="#162021" label="[16:20:21]">&lt;oriansj&gt;</a></span><span class="message">and the support of running web assembly also makes sense as it is just supporting a standard object code format.</span></div><div class="line" id="163428"><span class="nick" style="color:#8dd3c7"><a href="#163428" label="[16:34:28]">&lt;oriansj&gt;</a></span><span class="message">honestly there isn't much of a difference between web assembly and IBM's TIMI in regards to just being a portable binary format</span></div><div class="line" id="181857"><span class="nick" style="color:#2e2a4a"><a href="#181857" label="[18:18:57]">&lt;doras&gt;</a></span><span class="message">fossy, stikonas: do you think the description of the minimal seeds in README.md is no longer representative given the recent kernel work? Is it possible to switch to sysb and continue the bootstrap without kexec support? I'd like to mention the minimal seeds in my presentation and would prefer to share the up-to-date information.</span></div><div class="line" id="181924"><span class="nick" style="color:#2e2a4a"><a href="#181924" label="[18:19:24]">&lt;doras&gt;</a></span><span class="message">Actually, it's README.rst :)</span></div><div class="line" id="181945"><span class="nick" style="color:#3c5b35"><a href="#181945" label="[18:19:45]">&lt;stikonas[m]&gt;</a></span><span class="message">doras: reboot might be possible bug needs other work</span></div><div class="line" id="181955"><span class="nick" style="color:#3c5b35"><a href="#181955" label="[18:19:55]">&lt;stikonas[m]&gt;</a></span><span class="message">I.e. we need to mount hard disk</span></div><div class="line" id="182018"><span class="nick" style="color:#2e2a4a"><a href="#182018" label="[18:20:18]">&lt;doras&gt;</a></span><span class="message">Ah, I see. So we can't actually continue to sysb for now.</span></div><div class="line" id="182025"><span class="nick" style="color:#3c5b35"><a href="#182025" label="[18:20:25]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, not yet</span></div><div class="line" id="182106"><span class="nick" style="color:#3c5b35"><a href="#182106" label="[18:21:06]">&lt;stikonas[m]&gt;</a></span><span class="message">But if you have time, you could say that we are only kexec away from full bootstrap of use space and kernel</span></div><div class="line" id="182112"><span class="nick" style="color:#3c5b35"><a href="#182112" label="[18:21:12]">&lt;stikonas[m]&gt;</a></span><span class="message">And for now we start with 4k builder-hex0</span></div><div class="line" id="182140"><span class="nick" style="color:#3c5b35"><a href="#182140" label="[18:21:40]">&lt;stikonas[m]&gt;</a></span><span class="message">It might be possible to add &quot;kexec&quot; to builder-hex0-mini</span></div><div class="line" id="182201"><span class="nick" style="color:#3c5b35"><a href="#182201" label="[18:22:01]">&lt;stikonas[m]&gt;</a></span><span class="message">Which fits in 1 sector...</span></div><div class="line" id="182338"><span class="nick" style="color:#2e2a4a"><a href="#182338" label="[18:23:38]">&lt;doras&gt;</a></span><span class="message">stikonas: so post-kexec effort you'd expect to have ~4KB seed with a Linux kernel no longer required?</span></div><div class="line" id="182600"><span class="nick" style="color:#3c5b35"><a href="#182600" label="[18:26:00]">&lt;stikonas[m]&gt;</a></span><span class="message">Yes</span></div><div class="line" id="182635"><span class="nick" style="color:#2e2a4a"><a href="#182635" label="[18:26:35]">&lt;doras&gt;</a></span><span class="message">Nice :)</span></div><div class="line" id="182701"><span class="nick" style="color:#d9d9d9"><a href="#182701" label="[18:27:01]">&lt;stikonas&gt;</a></span><span class="message">doras: keep in mind that builder-hex0 basically have something like hex0 and kaem built-in</span></div><div class="line" id="182712"><span class="nick" style="color:#d9d9d9"><a href="#182712" label="[18:27:12]">&lt;stikonas&gt;</a></span><span class="message">so you don't need to double count those</span></div><div class="line" id="182725"><span class="nick" style="color:#d9d9d9"><a href="#182725" label="[18:27:25]">&lt;stikonas&gt;</a></span><span class="message">at least that's my recollection</span></div><div class="line" id="182729"><span class="nick" style="color:#d9d9d9"><a href="#182729" label="[18:27:29]">&lt;stikonas&gt;</a></span><span class="message">but I can quickly check</span></div><div class="line" id="182801"><span class="nick" style="color:#d9d9d9"><a href="#182801" label="[18:28:01]">&lt;stikonas&gt;</a></span><span class="message">yes, it has hex0 command <a rel="nofollow" href="https://github.com/ironmeld/builder-hex0/blob/main/builder-hex0.hex2#L62">https://github.com/ironmeld/builder-hex0/blob/main/builder-hex0.hex2#L62</a> </span></div><div class="line" id="182824"><span class="nick" style="color:#d9d9d9"><a href="#182824" label="[18:28:24]">&lt;stikonas&gt;</a></span><span class="message">(this is hex2 prototype of builder-hex0, so a bit easier to read)</span></div><div class="line" id="183034"><span class="nick" style="color:#d9d9d9"><a href="#183034" label="[18:30:34]">&lt;stikonas&gt;</a></span><span class="message">doras: and these are command that builder-hex0 runs on boot <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/b0a2747ada52a6f2486d202e15f9f4db01f5caff/sysa.py#L180">https://github.com/fosslinux/live-bootstrap/blob/b0a2747ada52a6f2486d202e15f9f4db01f5caff/sysa.py#L180</a> </span></div><div class="line" id="183047"><span class="nick" style="color:#d9d9d9"><a href="#183047" label="[18:30:47]">&lt;stikonas&gt;</a></span><span class="message">so builder hex0 from stage0-posix</span></div><div class="line" id="183057"><span class="nick" style="color:#d9d9d9"><a href="#183057" label="[18:30:57]">&lt;stikonas&gt;</a></span><span class="message">then builds kaem</span></div><div class="line" id="183102"><span class="nick" style="color:#d9d9d9"><a href="#183102" label="[18:31:02]">&lt;stikonas&gt;</a></span><span class="message">and kicks it off</span></div><div class="line" id="183118"><span class="nick" style="color:#d9d9d9"><a href="#183118" label="[18:31:18]">&lt;stikonas&gt;</a></span><span class="message">so strictly speaking hex0 and kaem-optional are not seeds in kernel bootstrap</span></div><div class="line" id="183410"><span class="nick" style="color:#2e2a4a"><a href="#183410" label="[18:34:10]">&lt;doras&gt;</a></span><span class="message">Oh.</span></div><div class="line" id="183558"><span class="nick" style="color:#2e2a4a"><a href="#183558" label="[18:35:58]">&lt;doras&gt;</a></span><span class="message">Well, I guess. If they are just embedded into builder-hex0, one can claim that builder-hex0 is the only seed.</span></div><div class="line" id="183645"><span class="nick" style="color:#d9d9d9"><a href="#183645" label="[18:36:45]">&lt;stikonas&gt;</a></span><span class="message">well, some simpler versions are embedded</span></div><div class="line" id="183958"><span class="nick" style="color:#d9d9d9"><a href="#183958" label="[18:39:58]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: speaking of builder-hex0 mini, did you have any ideas how it can boot the next step?</span></div><div class="line" id="184120"><span class="nick" style="color:#d9d9d9"><a href="#184120" label="[18:41:20]">&lt;stikonas&gt;</a></span><span class="message">I wonder if we can somehow chain something like: builder-hex0-mini-&gt;builder-hex1-mini-&gt;builder-hex2-mini and then just boot into hex2 version of your kernel (builder-hex0.hex2)</span></div><div class="line" id="184154"><span class="nick" style="color:#d9d9d9"><a href="#184154" label="[18:41:54]">&lt;stikonas&gt;</a></span><span class="message">(perhaps if this is possible builder-hex0 wouldn't be the right name...)</span></div><div class="line" id="184728"><span class="nick" style="color:#6d2462"><a href="#184728" label="[18:47:28]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: builder-hex0-mini just needs to write to memory and jump, it becomes a boot loader / hex0 compiler.</span></div><div class="line" id="184836"><span class="nick" style="color:#6d2462"><a href="#184836" label="[18:48:36]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: the name builder-hex0 refers to the fact that it builds with a built-in hex0 compiler.</span></div><div class="line" id="184854"><span class="nick" style="color:#d9d9d9"><a href="#184854" label="[18:48:54]">&lt;stikonas&gt;</a></span><span class="message">I see</span></div><div class="line" id="184932"><span class="nick" style="color:#d9d9d9"><a href="#184932" label="[18:49:32]">&lt;stikonas&gt;</a></span><span class="message">so presumably we can write something that has hex1 built-in</span></div><div class="line" id="184957"><span class="nick" style="color:#d9d9d9"><a href="#184957" label="[18:49:57]">&lt;stikonas&gt;</a></span><span class="message">which might be smaller amount of hex0 code than full builder-hex0...</span></div><div class="line" id="185013"><span class="nick" style="color:#d9d9d9"><a href="#185013" label="[18:50:13]">&lt;stikonas&gt;</a></span><span class="message">though given that we already have builder-hex0.hex0, maybe it's not worth it</span></div><div class="line" id="185054"><span class="nick" style="color:#6d2462"><a href="#185054" label="[18:50:54]">&lt;rickmasters&gt;</a></span><span class="message">If it can compile hex0 and launch executables, stage0-posix can provide everything else, so it would be redundant.</span></div><div class="line" id="185341"><span class="nick" style="color:#6d2462"><a href="#185341" label="[18:53:41]">&lt;rickmasters&gt;</a></span><span class="message">So anyway, if we have bootloader-hex0 compile and jump to builder-hex0 then maybe we can remove a bit of code from builder-hex0 but not a whole lot.</span></div><div class="line" id="185507"><span class="nick" style="color:#6d2462"><a href="#185507" label="[18:55:07]">&lt;rickmasters&gt;</a></span><span class="message">(I'd probably create a new name &quot;bootloader-hex0&quot; if it has a different purpose)</span></div><div class="line" id="185608"><span class="nick" style="color:#d9d9d9"><a href="#185608" label="[18:56:08]">&lt;stikonas&gt;</a></span><span class="message">well, I was just thinking that builder-hex0 implements quite a few syscalls</span></div><div class="line" id="185617"><span class="nick" style="color:#d9d9d9"><a href="#185617" label="[18:56:17]">&lt;stikonas&gt;</a></span><span class="message">and we don't need that many for the first steps</span></div><div class="line" id="185642"><span class="nick" style="color:#d9d9d9"><a href="#185642" label="[18:56:42]">&lt;stikonas&gt;</a></span><span class="message">but anyway, that's something for future, we don't even have fiwix-&gt;linux kexec yet</span></div><div class="line" id="185852"><span class="nick" style="color:#6d2462"><a href="#185852" label="[18:58:52]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: I do think there is merit to transitioning to a higher-level kernel earlier.</span></div><div class="line" id="190014"><span class="nick" style="color:#d9d9d9"><a href="#190014" label="[19:00:14]">&lt;stikonas&gt;</a></span><span class="message">no, I agree with that</span></div><div class="line" id="190033"><span class="nick" style="color:#d9d9d9"><a href="#190033" label="[19:00:33]">&lt;stikonas&gt;</a></span><span class="message">I don't think that we should run a lot of stuff with builder-hex0-mini</span></div><div class="line" id="190051"><span class="nick" style="color:#d9d9d9"><a href="#190051" label="[19:00:51]">&lt;stikonas&gt;</a></span><span class="message">but I was thinking whether it makes to have another medium-level kernel...</span></div><div class="line" id="190110"><span class="nick" style="color:#d9d9d9"><a href="#190110" label="[19:01:10]">&lt;stikonas&gt;</a></span><span class="message">anyway, it's up to you as you would have more insight on what makes sense there</span></div><div class="line" id="190137"><span class="nick" style="color:#6d2462"><a href="#190137" label="[19:01:37]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: Yeah, just doing a boot loader and hex0 compiler is a challenge in one sector.</span></div><div class="line" id="190200"><span class="nick" style="color:#d9d9d9"><a href="#190200" label="[19:02:00]">&lt;stikonas&gt;</a></span><span class="message">yeah, I know...</span></div><div class="line" id="190216"><span class="nick" style="color:#d9d9d9"><a href="#190216" label="[19:02:16]">&lt;stikonas&gt;</a></span><span class="message">let me see how big is hex0 compiler in stage0-posix</span></div><div class="line" id="190322"><span class="nick" style="color:#d9d9d9"><a href="#190322" label="[19:03:22]">&lt;stikonas&gt;</a></span><span class="message">well, that one is 172 bytes, but you might not be able to have it so compact in baremetal environment</span></div><div class="line" id="190429"><span class="nick" style="color:#d9d9d9"><a href="#190429" label="[19:04:29]">&lt;stikonas&gt;</a></span><span class="message">as you might need to use some registers for other purposes, etc...</span></div><div class="line" id="190510"><span class="nick" style="color:#6d2462"><a href="#190510" label="[19:05:10]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: builder-hex0-mini is only 384 bytes total and the hex0 compiler part is 96 bytes I think.</span></div><div class="line" id="190749"><span class="nick" style="color:#6d2462"><a href="#190749" label="[19:07:49]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: Anyway, a much smaller bootloader seed is definitely possible.</span></div><div class="line" id="190815"><span class="nick" style="color:#6d2462"><a href="#190815" label="[19:08:15]">&lt;rickmasters&gt;</a></span><span class="message">I mean much smaller than builder-hex0 and probably smaller than builder-hex0-mini.</span></div><div class="line" id="190837"><span class="nick" style="color:#d9d9d9"><a href="#190837" label="[19:08:37]">&lt;stikonas&gt;</a></span><span class="message">yes, I think so</span></div><div class="line" id="190912"><span class="nick" style="color:#d9d9d9"><a href="#190912" label="[19:09:12]">&lt;stikonas&gt;</a></span><span class="message">even 4K is probably smaller than I thought possible</span></div><div class="line" id="190929"><span class="nick" style="color:#d9d9d9"><a href="#190929" label="[19:09:29]">&lt;stikonas&gt;</a></span><span class="message">(for kernel that can run POSIX binaries)</span></div><div class="line" id="191156"><span class="nick" style="color:#6d2462"><a href="#191156" label="[19:11:56]">&lt;rickmasters&gt;</a></span><span class="message">Even so, its a lot of hex0. We could probably strip it down to only run hex2 and a kexec like function to another kernel in hex2.</span></div><div class="line" id="191219"><span class="nick" style="color:#d9d9d9"><a href="#191219" label="[19:12:19]">&lt;stikonas&gt;</a></span><span class="message">yes, that was exactly my question above</span></div><div class="line" id="191234"><span class="nick" style="color:#d9d9d9"><a href="#191234" label="[19:12:34]">&lt;stikonas&gt;</a></span><span class="message">(though maybe I was not super clear)</span></div><div class="line" id="191303"><span class="nick" style="color:#d9d9d9"><a href="#191303" label="[19:13:03]">&lt;stikonas&gt;</a></span><span class="message">and maybe we can do everything in just builder-hex0-mini, without any intermediate kernel</span></div><div class="line" id="191304"><span class="nick" style="color:#6d2462"><a href="#191304" label="[19:13:04]">&lt;rickmasters&gt;</a></span><span class="message">No I understood. There were other questions too. :) yes, its something I've thought about.</span></div><div class="line" id="191342"><span class="nick" style="color:#6d2462"><a href="#191342" label="[19:13:42]">&lt;rickmasters&gt;</a></span><span class="message">mini?</span></div><div class="line" id="191410"><span class="nick" style="color:#d9d9d9"><a href="#191410" label="[19:14:10]">&lt;stikonas&gt;</a></span><span class="message">well, this thing <a rel="nofollow" href="https://github.com/ironmeld/builder-hex0/blob/main/builder-hex0-mini.hex0">https://github.com/ironmeld/builder-hex0/blob/main/builder-hex0-mini.hex0</a> </span></div><div class="line" id="191518"><span class="nick" style="color:#6d2462"><a href="#191518" label="[19:15:18]">&lt;rickmasters&gt;</a></span><span class="message">Right, that currently runs in 16-bit mode and writes to disk then reboots. So its enough to build and reboot to builder-hex0.</span></div><div class="line" id="191612"><span class="nick" style="color:#6d2462"><a href="#191612" label="[19:16:12]">&lt;rickmasters&gt;</a></span><span class="message">I'm not sure what you mean &quot;do everything in just builder-hex0-mini&quot; ?</span></div><div class="line" id="191636"><span class="nick" style="color:#d9d9d9"><a href="#191636" label="[19:16:36]">&lt;stikonas&gt;</a></span><span class="message">well, somehow build hex2 in it and  run it</span></div><div class="line" id="191734"><span class="nick" style="color:#d9d9d9"><a href="#191734" label="[19:17:34]">&lt;stikonas&gt;</a></span><span class="message">or like I said before another option is build an intermediate kernel that does not have to fit in 1 sector, is much smaller than 4K but can run hex1 or hex2 inside it</span></div><div class="line" id="192012"><span class="nick" style="color:#6d2462"><a href="#192012" label="[19:20:12]">&lt;rickmasters&gt;</a></span><span class="message">I'm thinking start with the tiniest hex0 compiler with kexec to satisfy the tiny seed idea and building up from there.</span></div><div class="line" id="192040"><span class="nick" style="color:#6d2462"><a href="#192040" label="[19:20:40]">&lt;rickmasters&gt;</a></span><span class="message">That's pretty easy to do - just some modest changes to builder-hex0-mini.</span></div><div class="line" id="192125"><span class="nick" style="color:#6d2462"><a href="#192125" label="[19:21:25]">&lt;rickmasters&gt;</a></span><span class="message">Then the next kernel can run hex2 or exec hex2 - I'm not sure.</span></div><div class="line" id="192219"><span class="nick" style="color:#d9d9d9"><a href="#192219" label="[19:22:19]">&lt;stikonas&gt;</a></span><span class="message">yeah, something like that</span></div><div class="line" id="192231"><span class="nick" style="color:#d9d9d9"><a href="#192231" label="[19:22:31]">&lt;stikonas&gt;</a></span><span class="message">(exact details to be determined later)</span></div><div class="line" id="192342"><span class="nick" style="color:#6d2462"><a href="#192342" label="[19:23:42]">&lt;rickmasters&gt;</a></span><span class="message">Yes, there are options for later. I initially went with exec hex2 because I was focused on writing a kernel to support stage0-posix rather than try to replace any of it.</span></div><div class="line" id="192357"><span class="nick" style="color:#d9d9d9"><a href="#192357" label="[19:23:57]">&lt;stikonas&gt;</a></span><span class="message">oriansj, rickmasters: how about this idea for &quot;hex1.5&quot;. We can have two hex character labels  that are encoded into byte</span></div><div class="line" id="192413"><span class="nick" style="color:#d9d9d9"><a href="#192413" label="[19:24:13]">&lt;stikonas&gt;</a></span><span class="message">that should still be easy enough to do without any of those hex2 lookup tables</span></div><div class="line" id="192428"><span class="nick" style="color:#d9d9d9"><a href="#192428" label="[19:24:28]">&lt;stikonas&gt;</a></span><span class="message">and 256 labels are enough for builder-hex0</span></div><div class="line" id="192613"><span class="nick" style="color:#d9d9d9"><a href="#192613" label="[19:26:13]">&lt;stikonas&gt;</a></span><span class="message">right now hex1 can support maybe 90 labels...</span></div><div class="line" id="192742"><span class="nick" style="color:#6d2462"><a href="#192742" label="[19:27:42]">&lt;rickmasters&gt;</a></span><span class="message">Sounds fine to me</span></div><div class="line" id="235918"><span class="nick" style="color:#8dd3c7"><a href="#235918" label="[23:59:18]">&lt;oriansj&gt;</a></span><span class="message">stikonas: actually hex1 supports 256 distinct labels as anything after : is the label offset in the label table</span></div><div class="line" id="235942"><span class="nick" style="color:#d9d9d9"><a href="#235942" label="[23:59:42]">&lt;stikonas&gt;</a></span><span class="message">ok, so theoretically enough to build builder-hex0 in hex1 form</span></div><div class="line" id="235959"><span class="nick" style="color:#d9d9d9"><a href="#235959" label="[23:59:59]">&lt;stikonas&gt;</a></span><span class="message">though we would have to use non-printable characters</span></div><br /></div></body></html>