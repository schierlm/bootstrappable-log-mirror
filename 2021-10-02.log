<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-10-02.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="001308"><span class="nick" style="color:#389600"><a href="#001308" label="[00:13:08]">&lt;Hagfish&gt;</a></span><span class="message"> <a rel="nofollow" href="https://security.googleblog.com/2021/10/introducing-secure-open-source-pilot.html">https://security.googleblog.com/2021/10/introducing-secure-open-source-pilot.html</a> </span></div><div class="line" id="001318"><span class="nick" style="color:#389600"><a href="#001318" label="[00:13:18]">&lt;Hagfish&gt;</a></span><span class="message">&quot; The program is initially focused on rewarding the following work:     Software supply chain security improvements including hardening CI/CD pipelines and distribution infrastructure.&quot;</span></div><div class="line" id="001652"><span class="nick" style="color:#389600"><a href="#001652" label="[00:16:52]">&lt;Hagfish&gt;</a></span><span class="message">i don't know if google fully appreciates the significance of bootstrapping work when it comes to SSCS, but they're spending $1m just to start, so there may be people/projects here that should look into this</span></div><div class="line" id="001921"><span class="nick" style="color:#389600"><a href="#001921" label="[00:19:21]">&lt;Hagfish&gt;</a></span><span class="message">actually they are offering grants of between $500 and $10,000, and i think this tier may be the most relevant:</span></div><div class="line" id="001925"><span class="nick" style="color:#389600"><a href="#001925" label="[00:19:25]">&lt;Hagfish&gt;</a></span><span class="message">&quot;$5,000-$10,000 for moderately complex improvements that offer compelling security benefits.&quot;</span></div><div class="line" id="001935"><span class="nick" style="color:#8dd3c7"><a href="#001935" label="[00:19:35]">&lt;xentrac&gt;</a></span><span class="message">SSCS?</span></div><div class="line" id="001939"><span class="nick" style="color:#8dd3c7"><a href="#001939" label="[00:19:39]">&lt;xentrac&gt;</a></span><span class="message">oh</span></div><div class="line" id="001940"><span class="nick" style="color:#8dd3c7"><a href="#001940" label="[00:19:40]">&lt;xentrac&gt;</a></span><span class="message">sorry</span></div><div class="line" id="001949"><span class="nick" style="color:#8dd3c7"><a href="#001949" label="[00:19:49]">&lt;xentrac&gt;</a></span><span class="message">Software supply chain security</span></div><div class="line" id="002015"><span class="nick" style="color:#8dd3c7"><a href="#002015" label="[00:20:15]">&lt;xentrac&gt;</a></span><span class="message">I think there are people at Google that do fully appreciate it</span></div><div class="line" id="002022"><span class="nick" style="color:#389600"><a href="#002022" label="[00:20:22]">&lt;Hagfish&gt;</a></span><span class="message">i think i've seen an acronym like that used before, but yeah, sorry, i sort of relied on it being reverse engineered from the context :)</span></div><div class="line" id="002047"><span class="nick" style="color:#8dd3c7"><a href="#002047" label="[00:20:47]">&lt;xentrac&gt;</a></span><span class="message">they developed their internal Titan CPU specifically to solve the bootstrapping problem we're working on</span></div><div class="line" id="002053"><span class="nick" style="color:#389600"><a href="#002053" label="[00:20:53]">&lt;Hagfish&gt;</a></span><span class="message">the question is, are those people at Google the ones that decide how the rewards are distributed?</span></div><div class="line" id="002058"><span class="nick" style="color:#389600"><a href="#002058" label="[00:20:58]">&lt;Hagfish&gt;</a></span><span class="message">oh, nice</span></div><div class="line" id="002059"><span class="nick" style="color:#2e2a4a"><a href="#002059" label="[00:20:59]">&lt;oriansj&gt;</a></span><span class="message">stikonas: merged thank you</span></div><div class="line" id="002100"><span class="nick" style="color:#8dd3c7"><a href="#002100" label="[00:21:00]">&lt;xentrac&gt;</a></span><span class="message">and they've also done most of the work on its OpenTitan successor</span></div><div class="line" id="002129"><span class="nick" style="color:#389600"><a href="#002129" label="[00:21:29]">&lt;Hagfish&gt;</a></span><span class="message">it's sort of hard to quantify the security benefit of bootstrapping</span></div><div class="line" id="002137"><span class="nick" style="color:#8dd3c7"><a href="#002137" label="[00:21:37]">&lt;xentrac&gt;</a></span><span class="message">I think they have spent significantly more than $1m developing OpenTitan</span></div><div class="line" id="002144"><span class="nick" style="color:#6b8072"><a href="#002144" label="[00:21:44]">&lt;stikonas&gt;</a></span><span class="message">oriansj: thanks!</span></div><div class="line" id="002150"><span class="nick" style="color:#8dd3c7"><a href="#002150" label="[00:21:50]">&lt;xentrac&gt;</a></span><span class="message">(which is a RISC-V implementation)</span></div><div class="line" id="002156"><span class="nick" style="color:#389600"><a href="#002156" label="[00:21:56]">&lt;Hagfish&gt;</a></span><span class="message">if it did uncover some 40 year old self-propagating backdoor, then the value in finding and fixing that is almost limitless</span></div><div class="line" id="002227"><span class="nick" style="color:#8dd3c7"><a href="#002227" label="[00:22:27]">&lt;xentrac&gt;</a></span><span class="message">yeah, but it's much more likely to prevent the introduction of a new one</span></div><div class="line" id="002236"><span class="nick" style="color:#389600"><a href="#002236" label="[00:22:36]">&lt;Hagfish&gt;</a></span><span class="message">right, that's a better way to frame it</span></div><div class="line" id="002240"><span class="nick" style="color:#6b8072"><a href="#002240" label="[00:22:40]">&lt;stikonas&gt;</a></span><span class="message">oriansj: so now with my local M2-Planet port I can build up to M1-0 and M1-0 seems to be working fine. hex2-1 is somehow not working properly (runs but outputs somewhat corrupted files)</span></div><div class="line" id="002303"><span class="nick" style="color:#2e2a4a"><a href="#002303" label="[00:23:03]">&lt;oriansj&gt;</a></span><span class="message">stikonas: that would be a broken chmod function</span></div><div class="line" id="002309"><span class="nick" style="color:#6b8072"><a href="#002309" label="[00:23:09]">&lt;stikonas&gt;</a></span><span class="message">oh?</span></div><div class="line" id="002320"><span class="nick" style="color:#6b8072"><a href="#002320" label="[00:23:20]">&lt;stikonas&gt;</a></span><span class="message">why would chmod cause that?</span></div><div class="line" id="002332"><span class="nick" style="color:#6b8072"><a href="#002332" label="[00:23:32]">&lt;stikonas&gt;</a></span><span class="message">I mean hex output is not what it is</span></div><div class="line" id="002440"><span class="nick" style="color:#2e2a4a"><a href="#002440" label="[00:24:40]">&lt;oriansj&gt;</a></span><span class="message">oh, then that is different than the wrong permission bits issue I've seen with hex2 in testing</span></div><div class="line" id="002533"><span class="nick" style="color:#6b8072"><a href="#002533" label="[00:25:33]">&lt;stikonas&gt;</a></span><span class="message">probably something in libc still</span></div><div class="line" id="002928"><span class="nick" style="color:#6b8072"><a href="#002928" label="[00:29:28]">&lt;stikonas&gt;</a></span><span class="message">blood-elf and M1 probably exercise quite a bit of M2's functionality</span></div><div class="line" id="003049"><span class="nick" style="color:#2e2a4a"><a href="#003049" label="[00:30:49]">&lt;oriansj&gt;</a></span><span class="message">well M2 just converts C to M1 without changing the things that would be valid in M1. (Like the inline assembly and immediates (unless the architecture requires it))</span></div><div class="line" id="004701"><span class="nick" style="color:#6b8072"><a href="#004701" label="[00:47:01]">&lt;stikonas&gt;</a></span><span class="message">hmm, hex2-1 does seem to work on at least some files (e.g. catm_riscv64.hex1)</span></div><div class="line" id="004716"><span class="nick" style="color:#6b8072"><a href="#004716" label="[00:47:16]">&lt;stikonas&gt;</a></span><span class="message">so it's not completely broken...</span></div><div class="line" id="005011"><span class="nick" style="color:#6b8072"><a href="#005011" label="[00:50:11]">&lt;stikonas&gt;</a></span><span class="message">it's probably something in ELF header that upsets it</span></div><div class="line" id="010154"><span class="nick" style="color:#6b8072"><a href="#010154" label="[01:01:54]">&lt;stikonas&gt;</a></span><span class="message">ok, it's the . notation that triggers some corruption</span></div><div class="line" id="010216"><span class="nick" style="color:#6b8072"><a href="#010216" label="[01:02:16]">&lt;stikonas&gt;</a></span><span class="message">might be something to do with unsigned overflows...</span></div><div class="line" id="010333"><span class="nick" style="color:#6b8072"><a href="#010333" label="[01:03:33]">&lt;stikonas&gt;</a></span><span class="message">since Development/hex2_riscv64.hex2 file works just fine (and it does not use . notation) but &quot;.11111111 12345678&quot; already fails</span></div><div class="line" id="010512"><span class="nick" style="color:#6b8072"><a href="#010512" label="[01:05:12]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I think I know what's going on</span></div><div class="line" id="010542"><span class="nick" style="color:#6b8072"><a href="#010542" label="[01:05:42]">&lt;stikonas&gt;</a></span><span class="message">hex2.word in '.' processing uses constant 0xFF000000</span></div><div class="line" id="010558"><span class="nick" style="color:#6b8072"><a href="#010558" label="[01:05:58]">&lt;stikonas&gt;</a></span><span class="message">which is probably outside what we correctly handle with LUI/ADDI</span></div><div class="line" id="011431"><span class="nick" style="color:#6b8072"><a href="#011431" label="[01:14:31]">&lt;stikonas&gt;</a></span><span class="message">oriansj: yes, that's what was causing it</span></div><div class="line" id="011452"><span class="nick" style="color:#6b8072"><a href="#011452" label="[01:14:52]">&lt;stikonas&gt;</a></span><span class="message">would you be willing to accept patch to workaround this (we should probably fix large numbers eventually)</span></div><div class="line" id="011518"><span class="nick" style="color:#6b8072"><a href="#011518" label="[01:15:18]">&lt;stikonas&gt;</a></span><span class="message">i.e. replace 0xFF000000 with (0xFF &lt;&lt; 24)</span></div><div class="line" id="011558"><span class="nick" style="color:#6b8072"><a href="#011558" label="[01:15:58]">&lt;stikonas&gt;</a></span><span class="message">with this change I can build up to at least full kaem</span></div><div class="line" id="011617"><span class="nick" style="color:#6b8072"><a href="#011617" label="[01:16:17]">&lt;stikonas&gt;</a></span><span class="message">but most likely M2-Planet will self-host too</span></div><div class="line" id="011922"><span class="nick" style="color:#6b8072"><a href="#011922" label="[01:19:22]">&lt;stikonas&gt;</a></span><span class="message">yes, I have full M2-Planet binary now</span></div><div class="line" id="012118"><span class="nick" style="color:#6b8072"><a href="#012118" label="[01:21:18]">&lt;stikonas&gt;</a></span><span class="message">oriansj: <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/pull/24">https://github.com/oriansj/mescc-tools/pull/24</a> </span></div><div class="line" id="012638"><span class="nick" style="color:#6b8072"><a href="#012638" label="[01:26:38]">&lt;stikonas&gt;</a></span><span class="message">and initial port of M2-Planet <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/pull/22">https://github.com/oriansj/M2-Planet/pull/22</a> </span></div><div class="line" id="020236"><span class="nick" style="color:#6b8072"><a href="#020236" label="[02:02:36]">&lt;stikonas&gt;</a></span><span class="message">argh, somewhat annoyingly self-hosted M2-Planet is broken, I guess same issue of large immediates</span></div><div class="line" id="123008"><span class="nick" style="color:#2e2a4a"><a href="#123008" label="[12:30:08]">&lt;oriansj&gt;</a></span><span class="message">stikonas: let me take a look</span></div><div class="line" id="123120"><span class="nick" style="color:#6b8072"><a href="#123120" label="[12:31:20]">&lt;stikonas&gt;</a></span><span class="message">oriansj: to M2-Planet?</span></div><div class="line" id="123149"><span class="nick" style="color:#6b8072"><a href="#123149" label="[12:31:49]">&lt;stikonas&gt;</a></span><span class="message">I think we need to implement large numbers manually... Binutils is doing something like that</span></div><div class="line" id="123156"><span class="nick" style="color:#6b8072"><a href="#123156" label="[12:31:56]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/bminor/binutils-gdb/blob/master/gas/config/tc-riscv.c#L1573">https://github.com/bminor/binutils-gdb/blob/master/gas/config/tc-riscv.c#L1573</a> </span></div><div class="line" id="123218"><span class="nick" style="color:#6b8072"><a href="#123218" label="[12:32:18]">&lt;stikonas&gt;</a></span><span class="message">although, large numbers break a bit earlier in M2-Planet toolchain</span></div><div class="line" id="123246"><span class="nick" style="color:#6b8072"><a href="#123246" label="[12:32:46]">&lt;stikonas&gt;</a></span><span class="message">I think it's working up to 2^31 - 1 - 2^11</span></div><div class="line" id="123257"><span class="nick" style="color:#2e2a4a"><a href="#123257" label="[12:32:57]">&lt;oriansj&gt;</a></span><span class="message">test1000 also tends to break real easily by design</span></div><div class="line" id="123347"><span class="nick" style="color:#6b8072"><a href="#123347" label="[12:33:47]">&lt;stikonas&gt;</a></span><span class="message">yeah, I haven't implemented test1000 yet</span></div><div class="line" id="123401"><span class="nick" style="color:#6b8072"><a href="#123401" label="[12:34:01]">&lt;stikonas&gt;</a></span><span class="message">although, it's mostly copy paste from mescc-tools-full.kaem file</span></div><div class="line" id="123437"><span class="nick" style="color:#2e2a4a"><a href="#123437" label="[12:34:37]">&lt;oriansj&gt;</a></span><span class="message">yet your code changes in cc_core.c do change what test1000 expects: <a rel="nofollow" href="https://paste.debian.net/1214081/">https://paste.debian.net/1214081/</a> </span></div><div class="line" id="123450"><span class="nick" style="color:#6b8072"><a href="#123450" label="[12:34:50]">&lt;stikonas&gt;</a></span><span class="message">oh, let me fix it then</span></div><div class="line" id="123807"><span class="nick" style="color:#2e2a4a"><a href="#123807" label="[12:38:07]">&lt;oriansj&gt;</a></span><span class="message">easy mistake to make. Happens all the time</span></div><div class="line" id="124122"><span class="nick" style="color:#6b8072"><a href="#124122" label="[12:41:22]">&lt;stikonas&gt;</a></span><span class="message">strange, I'm getting different hashes (compared to pastebin) in proof.answer</span></div><div class="line" id="124315"><span class="nick" style="color:#2e2a4a"><a href="#124315" label="[12:43:15]">&lt;oriansj&gt;</a></span><span class="message">well that means we are doing something different</span></div><div class="line" id="124348"><span class="nick" style="color:#6b8072"><a href="#124348" label="[12:43:48]">&lt;stikonas&gt;</a></span><span class="message">hmm, I have newest M2libc there</span></div><div class="line" id="124353"><span class="nick" style="color:#6b8072"><a href="#124353" label="[12:43:53]">&lt;stikonas&gt;</a></span><span class="message">but that's only riscv changes</span></div><div class="line" id="124356"><span class="nick" style="color:#6b8072"><a href="#124356" label="[12:43:56]">&lt;stikonas&gt;</a></span><span class="message">shouldn't affect amd64</span></div><div class="line" id="124410"><span class="nick" style="color:#6b8072"><a href="#124410" label="[12:44:10]">&lt;stikonas&gt;</a></span><span class="message">I get 92c8b0a0e142e2a825bd10cb7d7e2d581ca2ba608f4e21009c1d9837728205d2  test/test1000/proof</span></div><div class="line" id="124422"><span class="nick" style="color:#2e2a4a"><a href="#124422" label="[12:44:22]">&lt;oriansj&gt;</a></span><span class="message">less me check to see what M2libc I am on</span></div><div class="line" id="124451"><span class="nick" style="color:#6b8072"><a href="#124451" label="[12:44:51]">&lt;stikonas&gt;</a></span><span class="message">I've also added --little-endian to that blood-elf command in test1000</span></div><div class="line" id="124618"><span class="nick" style="color:#2e2a4a"><a href="#124618" label="[12:46:18]">&lt;oriansj&gt;</a></span><span class="message">which shouldn't change anything</span></div><div class="line" id="124706"><span class="nick" style="color:#2e2a4a"><a href="#124706" label="[12:47:06]">&lt;oriansj&gt;</a></span><span class="message">M2libc is at b58dbe11e6111489aca54c57a8bd1087a9d5db90</span></div><div class="line" id="124736"><span class="nick" style="color:#6b8072"><a href="#124736" label="[12:47:36]">&lt;stikonas&gt;</a></span><span class="message">yes, it's the sam then</span></div><div class="line" id="124742"><span class="nick" style="color:#2e2a4a"><a href="#124742" label="[12:47:42]">&lt;oriansj&gt;</a></span><span class="message">I am on M2-Planet commit f5f5f8942de9f89b2eed6290a2442d38cb2e1397</span></div><div class="line" id="124808"><span class="nick" style="color:#2e2a4a"><a href="#124808" label="[12:48:08]">&lt;oriansj&gt;</a></span><span class="message">and I am doing an x86 and armv7l build test</span></div><div class="line" id="124829"><span class="nick" style="color:#2e2a4a"><a href="#124829" label="[12:48:29]">&lt;oriansj&gt;</a></span><span class="message">(which all architectures should produce identicial results)</span></div><div class="line" id="124857"><span class="nick" style="color:#6b8072"><a href="#124857" label="[12:48:57]">&lt;stikonas&gt;</a></span><span class="message">hmm, yes, I'm on that commit too</span></div><div class="line" id="125015"><span class="nick" style="color:#6b8072"><a href="#125015" label="[12:50:15]">&lt;stikonas&gt;</a></span><span class="message">and no local changes?</span></div><div class="line" id="125051"><span class="nick" style="color:#2e2a4a"><a href="#125051" label="[12:50:51]">&lt;oriansj&gt;</a></span><span class="message">yet different build results when running RISC-V?</span></div><div class="line" id="125123"><span class="nick" style="color:#2e2a4a"><a href="#125123" label="[12:51:23]">&lt;oriansj&gt;</a></span><span class="message">interesting</span></div><div class="line" id="125202"><span class="nick" style="color:#2e2a4a"><a href="#125202" label="[12:52:02]">&lt;oriansj&gt;</a></span><span class="message">I guess we need to find the delta</span></div><div class="line" id="125231"><span class="nick" style="color:#6b8072"><a href="#125231" label="[12:52:31]">&lt;stikonas&gt;</a></span><span class="message">well, that 92c8b0a0e142e2a825bd10cb7d7e2d581ca2ba608f4e21009c1d9837728205d2 hash is amd64 test</span></div><div class="line" id="125301"><span class="nick" style="color:#6b8072"><a href="#125301" label="[12:53:01]">&lt;stikonas&gt;</a></span><span class="message">oh, actually it's in your file too</span></div><div class="line" id="125310"><span class="nick" style="color:#6b8072"><a href="#125310" label="[12:53:10]">&lt;stikonas&gt;</a></span><span class="message">in - part of the diff rather than +</span></div><div class="line" id="125315"><span class="nick" style="color:#6b8072"><a href="#125315" label="[12:53:15]">&lt;stikonas&gt;</a></span><span class="message">I think I was looking at the wrong line</span></div><div class="line" id="125340"><span class="nick" style="color:#6b8072"><a href="#125340" label="[12:53:40]">&lt;stikonas&gt;</a></span><span class="message">oriansj: which one is the new and which one is the old?</span></div><div class="line" id="125411"><span class="nick" style="color:#2e2a4a"><a href="#125411" label="[12:54:11]">&lt;oriansj&gt;</a></span><span class="message">the old is the minus and the plus is the new</span></div><div class="line" id="125421"><span class="nick" style="color:#6b8072"><a href="#125421" label="[12:54:21]">&lt;stikonas&gt;</a></span><span class="message">hmm, so I was getting the old hash...</span></div><div class="line" id="125422"><span class="nick" style="color:#6b8072"><a href="#125422" label="[12:54:22]">&lt;stikonas&gt;</a></span><span class="message">strange</span></div><div class="line" id="125520"><span class="nick" style="color:#6b8072"><a href="#125520" label="[12:55:20]">&lt;stikonas&gt;</a></span><span class="message">oh, I see, my mistake</span></div><div class="line" id="125534"><span class="nick" style="color:#6b8072"><a href="#125534" label="[12:55:34]">&lt;stikonas&gt;</a></span><span class="message">I was looking at the wrong file</span></div><div class="line" id="125552"><span class="nick" style="color:#6b8072"><a href="#125552" label="[12:55:52]">&lt;stikonas&gt;</a></span><span class="message">ok, I'll then update my PR</span></div><div class="line" id="125621"><span class="nick" style="color:#2e2a4a"><a href="#125621" label="[12:56:21]">&lt;oriansj&gt;</a></span><span class="message">you can also git apply the paste and git will understand</span></div><div class="line" id="125838"><span class="nick" style="color:#6b8072"><a href="#125838" label="[12:58:38]">&lt;stikonas&gt;</a></span><span class="message">yeah, I know</span></div><div class="line" id="125854"><span class="nick" style="color:#6b8072"><a href="#125854" label="[12:58:54]">&lt;stikonas&gt;</a></span><span class="message">well, I just wanted to check that it indeed matches, but it does</span></div><div class="line" id="125932"><span class="nick" style="color:#6b8072"><a href="#125932" label="[12:59:32]">&lt;stikonas&gt;</a></span><span class="message">ok, updated</span></div><div class="line" id="130125"><span class="nick" style="color:#2e2a4a"><a href="#130125" label="[13:01:25]">&lt;oriansj&gt;</a></span><span class="message">and I'll have the updated blood-elf flags in place in a couple minutes</span></div><div class="line" id="130207"><span class="nick" style="color:#6b8072"><a href="#130207" label="[13:02:07]">&lt;stikonas&gt;</a></span><span class="message">and then I guess stage0-posix needs to pull-in new M2-Planet...</span></div><div class="line" id="130226"><span class="nick" style="color:#6b8072"><a href="#130226" label="[13:02:26]">&lt;stikonas&gt;</a></span><span class="message">(or maybe I should first try to fix large numbers)</span></div><div class="line" id="130245"><span class="nick" style="color:#6b8072"><a href="#130245" label="[13:02:45]">&lt;stikonas&gt;</a></span><span class="message">although, that should be a smaller change and only affect risc-v</span></div><div class="line" id="130359"><span class="nick" style="color:#2e2a4a"><a href="#130359" label="[13:03:59]">&lt;oriansj&gt;</a></span><span class="message">well we might as well get risc-v fully into M2-Planet</span></div><div class="line" id="130632"><span class="nick" style="color:#2e2a4a"><a href="#130632" label="[13:06:32]">&lt;oriansj&gt;</a></span><span class="message">and then I'll update stage0-posix x86, AMD64 and AArch64 ports to use the new blood-elf flag</span></div><div class="line" id="131043"><span class="nick" style="color:#2e2a4a"><a href="#131043" label="[13:10:43]">&lt;oriansj&gt;</a></span><span class="message">and the blood-elf flag update for M2-Planet is now up</span></div><div class="line" id="131446"><span class="nick" style="color:#2e2a4a"><a href="#131446" label="[13:14:46]">&lt;oriansj&gt;</a></span><span class="message">stikonas: you'll want to add this to makefile-tests <a rel="nofollow" href="https://paste.debian.net/1214086/">https://paste.debian.net/1214086/</a> </span></div><div class="line" id="131539"><span class="nick" style="color:#6d2462"><a href="#131539" label="[13:15:39]">&lt;stikonas[m]&gt;</a></span><span class="message">Ok</span></div><div class="line" id="131542"><span class="nick" style="color:#2e2a4a"><a href="#131542" label="[13:15:42]">&lt;oriansj&gt;</a></span><span class="message">and I assume you can make test/test1000/hello-riscv64.sh to mirror what is in AArch64's test/test1000/hello-aarch64.sh</span></div><div class="line" id="131604"><span class="nick" style="color:#2e2a4a"><a href="#131604" label="[13:16:04]">&lt;oriansj&gt;</a></span><span class="message">which will make risc-v output part of the test suite</span></div><div class="line" id="131609"><span class="nick" style="color:#6d2462"><a href="#131609" label="[13:16:09]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, once self-hosting works</span></div><div class="line" id="131624"><span class="nick" style="color:#6d2462"><a href="#131624" label="[13:16:24]">&lt;stikonas[m]&gt;</a></span><span class="message">right now it is broken</span></div><div class="line" id="131653"><span class="nick" style="color:#2e2a4a"><a href="#131653" label="[13:16:53]">&lt;oriansj&gt;</a></span><span class="message">actually that is fine as cross-hosting checks, even for broken output matters</span></div><div class="line" id="131720"><span class="nick" style="color:#2e2a4a"><a href="#131720" label="[13:17:20]">&lt;oriansj&gt;</a></span><span class="message">as all architectures given the same input (and flags) must always produce the exact same output</span></div><div class="line" id="131800"><span class="nick" style="color:#6d2462"><a href="#131800" label="[13:18:00]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, I guess test will fail for now but rightfully so</span></div><div class="line" id="131901"><span class="nick" style="color:#2e2a4a"><a href="#131901" label="[13:19:01]">&lt;oriansj&gt;</a></span><span class="message">well how does this sound as a reasonable compromise: add the tests that currently pass on RISC-V and I'll verify that other architectures confirm matching results</span></div><div class="line" id="132036"><span class="nick" style="color:#2e2a4a"><a href="#132036" label="[13:20:36]">&lt;oriansj&gt;</a></span><span class="message">also if RISC-V is producing a correct proof result for test1000, it means it self-hosted just fine</span></div><div class="line" id="132219"><span class="nick" style="color:#6b8072"><a href="#132219" label="[13:22:19]">&lt;stikonas&gt;</a></span><span class="message">ok, let me pull in blood-elf changes and then I cna add tests</span></div><div class="line" id="132322"><span class="nick" style="color:#2e2a4a"><a href="#132322" label="[13:23:22]">&lt;oriansj&gt;</a></span><span class="message">because if you see: out=test/test1000/proof: OK when running test1000 for RISC-V you are done successfully porting M2-Planet to RISC-V</span></div><div class="line" id="132516"><span class="nick" style="color:#2e2a4a"><a href="#132516" label="[13:25:16]">&lt;oriansj&gt;</a></span><span class="message">and if it is the wrong checksum, we then compare the proof files to hunt down the problem.</span></div><div class="line" id="133712"><span class="nick" style="color:#6b8072"><a href="#133712" label="[13:37:12]">&lt;stikonas&gt;</a></span><span class="message">ok, test0020 now fails...</span></div><div class="line" id="133900"><span class="nick" style="color:#6b8072"><a href="#133900" label="[13:39:00]">&lt;stikonas&gt;</a></span><span class="message">it's actually segfault</span></div><div class="line" id="133933"><span class="nick" style="color:#2e2a4a"><a href="#133933" label="[13:39:33]">&lt;oriansj&gt;</a></span><span class="message">good</span></div><div class="line" id="134759"><span class="nick" style="color:#6b8072"><a href="#134759" label="[13:47:59]">&lt;stikonas&gt;</a></span><span class="message">hmm, might be hex2 issue</span></div><div class="line" id="134812"><span class="nick" style="color:#6b8072"><a href="#134812" label="[13:48:12]">&lt;stikonas&gt;</a></span><span class="message">test0020.M1 and test0020.hex2 look fine</span></div><div class="line" id="134913"><span class="nick" style="color:#2e2a4a"><a href="#134913" label="[13:49:13]">&lt;oriansj&gt;</a></span><span class="message">do you get 626ca275bbb320e6b5ebde0bff50d10bd1dc78ee8163d37f71fb77d10099ca7c  test/test0020/tmp-riscv64/struct.M1 ?</span></div><div class="line" id="134953"><span class="nick" style="color:#2e2a4a"><a href="#134953" label="[13:49:53]">&lt;oriansj&gt;</a></span><span class="message">and 8e4c805f0aa40c8904f11811e827a5a4198165148b96f195d3f6acd027039202  test/results/test0020-riscv64-binary</span></div><div class="line" id="135326"><span class="nick" style="color:#6b8072"><a href="#135326" label="[13:53:26]">&lt;stikonas&gt;</a></span><span class="message">oriansj: yes for .M1 but no for hex2</span></div><div class="line" id="135337"><span class="nick" style="color:#6b8072"><a href="#135337" label="[13:53:37]">&lt;stikonas&gt;</a></span><span class="message">oh, sorry, you pasted binary, not hex2</span></div><div class="line" id="135351"><span class="nick" style="color:#6b8072"><a href="#135351" label="[13:53:51]">&lt;stikonas&gt;</a></span><span class="message">but still no</span></div><div class="line" id="135426"><span class="nick" style="color:#6b8072"><a href="#135426" label="[13:54:26]">&lt;stikonas&gt;</a></span><span class="message">maybe my hex2 (riscv64 build) is indeed buggy</span></div><div class="line" id="135428"><span class="nick" style="color:#2e2a4a"><a href="#135428" label="[13:54:28]">&lt;oriansj&gt;</a></span><span class="message">is this your hex2? b6f289956fd3623f0545e8521ec2023b042109d83a3791c3aab4014b6116dd2d  test/test0020/tmp-riscv64/struct.hex2</span></div><div class="line" id="135437"><span class="nick" style="color:#6b8072"><a href="#135437" label="[13:54:37]">&lt;stikonas&gt;</a></span><span class="message">yes</span></div><div class="line" id="135504"><span class="nick" style="color:#2e2a4a"><a href="#135504" label="[13:55:04]">&lt;oriansj&gt;</a></span><span class="message">good. So now we have reduced it down to a local hex2 issue</span></div><div class="line" id="135505"><span class="nick" style="color:#6b8072"><a href="#135505" label="[13:55:05]">&lt;stikonas&gt;</a></span><span class="message">so must be issue in hex2 binary</span></div><div class="line" id="135509"><span class="nick" style="color:#6b8072"><a href="#135509" label="[13:55:09]">&lt;stikonas&gt;</a></span><span class="message">yes</span></div><div class="line" id="135530"><span class="nick" style="color:#6b8072"><a href="#135530" label="[13:55:30]">&lt;stikonas&gt;</a></span><span class="message">probably again issue or large numbers</span></div><div class="line" id="135533"><span class="nick" style="color:#2e2a4a"><a href="#135533" label="[13:55:33]">&lt;oriansj&gt;</a></span><span class="message">use GCC to build hex2 to eliminate self-host as a potential cause</span></div><div class="line" id="135609"><span class="nick" style="color:#6b8072"><a href="#135609" label="[13:56:09]">&lt;stikonas&gt;</a></span><span class="message">yes, it's almost surely that</span></div><div class="line" id="135626"><span class="nick" style="color:#6b8072"><a href="#135626" label="[13:56:26]">&lt;stikonas&gt;</a></span><span class="message">I can see 0xfffff000 in hex2_word.c where ~ is handled</span></div><div class="line" id="135635"><span class="nick" style="color:#6b8072"><a href="#135635" label="[13:56:35]">&lt;stikonas&gt;</a></span><span class="message">and AUIPC instruction is where crash happens</span></div><div class="line" id="135638"><span class="nick" style="color:#2e2a4a"><a href="#135638" label="[13:56:38]">&lt;oriansj&gt;</a></span><span class="message">in fact you should just do a GCC build of all of mescc-tools and use those binaries while hunting down issues in M2-Planet</span></div><div class="line" id="135656"><span class="nick" style="color:#6b8072"><a href="#135656" label="[13:56:56]">&lt;stikonas&gt;</a></span><span class="message">yeah...</span></div><div class="line" id="135720"><span class="nick" style="color:#2e2a4a"><a href="#135720" label="[13:57:20]">&lt;oriansj&gt;</a></span><span class="message">that way we are only testing one thing at a time</span></div><div class="line" id="135727"><span class="nick" style="color:#6b8072"><a href="#135727" label="[13:57:27]">&lt;stikonas&gt;</a></span><span class="message">yeah...</span></div><div class="line" id="135730"><span class="nick" style="color:#6b8072"><a href="#135730" label="[13:57:30]">&lt;stikonas&gt;</a></span><span class="message">I'll do that...</span></div><div class="line" id="135807"><span class="nick" style="color:#2e2a4a"><a href="#135807" label="[13:58:07]">&lt;oriansj&gt;</a></span><span class="message">after we get M2-Planet happish, we will go back to figure out why it isn't happy in the self-host with something known good to compare against</span></div><div class="line" id="135917"><span class="nick" style="color:#6b8072"><a href="#135917" label="[13:59:17]">&lt;stikonas&gt;</a></span><span class="message">ok, then test0020 is happy</span></div><div class="line" id="135933"><span class="nick" style="color:#6b8072"><a href="#135933" label="[13:59:33]">&lt;stikonas&gt;</a></span><span class="message">it's now test0105 that fails</span></div><div class="line" id="140028"><span class="nick" style="color:#2e2a4a"><a href="#140028" label="[14:00:28]">&lt;oriansj&gt;</a></span><span class="message">eded68800781a8986f0a0703edee6ebf6f23251365b7fb40d1cc04462e322869  test/test0105/tmp-riscv64/lisp.M1</span></div><div class="line" id="140035"><span class="nick" style="color:#2e2a4a"><a href="#140035" label="[14:00:35]">&lt;oriansj&gt;</a></span><span class="message">62d7d6b7bae3c5006bcce96c726d7fb918ff84971c5a2b6c3d397765cded3245  test/test0105/tmp-riscv64/lisp.hex2</span></div><div class="line" id="140042"><span class="nick" style="color:#2e2a4a"><a href="#140042" label="[14:00:42]">&lt;oriansj&gt;</a></span><span class="message">0a1cb20f6420950ade08152e8e25b546158db8bc4f13fe9bc5747fa8240b48ce  test/results/test0105-riscv64-binary</span></div><div class="line" id="140046"><span class="nick" style="color:#6b8072"><a href="#140046" label="[14:00:46]">&lt;stikonas&gt;</a></span><span class="message">one moment</span></div><div class="line" id="140052"><span class="nick" style="color:#6b8072"><a href="#140052" label="[14:00:52]">&lt;stikonas&gt;</a></span><span class="message">it actually succeeds sometimes</span></div><div class="line" id="140057"><span class="nick" style="color:#6b8072"><a href="#140057" label="[14:00:57]">&lt;stikonas&gt;</a></span><span class="message">and sometimes crashes</span></div><div class="line" id="140132"><span class="nick" style="color:#2e2a4a"><a href="#140132" label="[14:01:32]">&lt;oriansj&gt;</a></span><span class="message">but the checksums?</span></div><div class="line" id="140136"><span class="nick" style="color:#6b8072"><a href="#140136" label="[14:01:36]">&lt;stikonas&gt;</a></span><span class="message">checking</span></div><div class="line" id="140205"><span class="nick" style="color:#6b8072"><a href="#140205" label="[14:02:05]">&lt;stikonas&gt;</a></span><span class="message">checksums are the same</span></div><div class="line" id="140302"><span class="nick" style="color:#6b8072"><a href="#140302" label="[14:03:02]">&lt;stikonas&gt;</a></span><span class="message">and crashes in memset</span></div><div class="line" id="140325"><span class="nick" style="color:#2e2a4a"><a href="#140325" label="[14:03:25]">&lt;oriansj&gt;</a></span><span class="message">trying to reproduce crash here (no crashes yet)</span></div><div class="line" id="140350"><span class="nick" style="color:#2e2a4a"><a href="#140350" label="[14:03:50]">&lt;oriansj&gt;</a></span><span class="message">(using qemu-usermode emulation)</span></div><div class="line" id="140400"><span class="nick" style="color:#6b8072"><a href="#140400" label="[14:04:00]">&lt;stikonas&gt;</a></span><span class="message">same here (qemu-usermode)</span></div><div class="line" id="140407"><span class="nick" style="color:#6b8072"><a href="#140407" label="[14:04:07]">&lt;stikonas&gt;</a></span><span class="message">tries to access memory at 0x61c000</span></div><div class="line" id="140410"><span class="nick" style="color:#6b8072"><a href="#140410" label="[14:04:10]">&lt;stikonas&gt;</a></span><span class="message">which is unallocated</span></div><div class="line" id="140555"><span class="nick" style="color:#2e2a4a"><a href="#140555" label="[14:05:55]">&lt;oriansj&gt;</a></span><span class="message">how can two different people running the exact same static binary produce different behaviors</span></div><div class="line" id="140630"><span class="nick" style="color:#6b8072"><a href="#140630" label="[14:06:30]">&lt;stikonas&gt;</a></span><span class="message">well, I get occasional passes and occasional crashes</span></div><div class="line" id="140641"><span class="nick" style="color:#6b8072"><a href="#140641" label="[14:06:41]">&lt;stikonas&gt;</a></span><span class="message">it's kernel that's preventing access</span></div><div class="line" id="140651"><span class="nick" style="color:#6b8072"><a href="#140651" label="[14:06:51]">&lt;stikonas&gt;</a></span><span class="message">and remaining tests pass with gcc'ed mescc-tools</span></div><div class="line" id="140704"><span class="nick" style="color:#6b8072"><a href="#140704" label="[14:07:04]">&lt;stikonas&gt;</a></span><span class="message">including test1000</span></div><div class="line" id="140809"><span class="nick" style="color:#2e2a4a"><a href="#140809" label="[14:08:09]">&lt;oriansj&gt;</a></span><span class="message">commit that. I'd like to verify we both have making checksums for all of the RISC-V binaries</span></div><div class="line" id="140934"><span class="nick" style="color:#6b8072"><a href="#140934" label="[14:09:34]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/pull/23">https://github.com/oriansj/M2-Planet/pull/23</a> </span></div><div class="line" id="140939"><span class="nick" style="color:#2e2a4a"><a href="#140939" label="[14:09:39]">&lt;oriansj&gt;</a></span><span class="message">thank you stikonas</span></div><div class="line" id="141046"><span class="nick" style="color:#2e2a4a"><a href="#141046" label="[14:10:46]">&lt;oriansj&gt;</a></span><span class="message">(you forgot to include checksums)</span></div><div class="line" id="141110"><span class="nick" style="color:#6b8072"><a href="#141110" label="[14:11:10]">&lt;stikonas&gt;</a></span><span class="message">oh yes...</span></div><div class="line" id="141110"><span class="nick" style="color:#2e2a4a"><a href="#141110" label="[14:11:10]">&lt;oriansj&gt;</a></span><span class="message">make Generate-test-answers will populate that after the tests run</span></div><div class="line" id="141208"><span class="nick" style="color:#6b8072"><a href="#141208" label="[14:12:08]">&lt;stikonas&gt;</a></span><span class="message">and also need test1000 checksum...</span></div><div class="line" id="141256"><span class="nick" style="color:#6b8072"><a href="#141256" label="[14:12:56]">&lt;stikonas&gt;</a></span><span class="message">oh, that one is unaffected...</span></div><div class="line" id="141329"><span class="nick" style="color:#2e2a4a"><a href="#141329" label="[14:13:29]">&lt;oriansj&gt;</a></span><span class="message">the proof only changes if the code that makes up M2-Planet changes</span></div><div class="line" id="141330"><span class="nick" style="color:#6b8072"><a href="#141330" label="[14:13:30]">&lt;stikonas&gt;</a></span><span class="message">ok, updated</span></div><div class="line" id="141337"><span class="nick" style="color:#6b8072"><a href="#141337" label="[14:13:37]">&lt;stikonas&gt;</a></span><span class="message">yes, I realized that</span></div><div class="line" id="141500"><span class="nick" style="color:#6b8072"><a href="#141500" label="[14:15:00]">&lt;stikonas&gt;</a></span><span class="message">so I think it's mostly hex2 issue that's left</span></div><div class="line" id="141509"><span class="nick" style="color:#6b8072"><a href="#141509" label="[14:15:09]">&lt;stikonas&gt;</a></span><span class="message">when it's not compiled by gcc...</span></div><div class="line" id="141516"><span class="nick" style="color:#6b8072"><a href="#141516" label="[14:15:16]">&lt;stikonas&gt;</a></span><span class="message">I can add another workaround like the one you merged...</span></div><div class="line" id="141543"><span class="nick" style="color:#2e2a4a"><a href="#141543" label="[14:15:43]">&lt;oriansj&gt;</a></span><span class="message">lets not jump to conclusions with hex2</span></div><div class="line" id="141543"><span class="nick" style="color:#6b8072"><a href="#141543" label="[14:15:43]">&lt;stikonas&gt;</a></span><span class="message">although, I think M2-Planet also needs to learn to handle large numbers</span></div><div class="line" id="141558"><span class="nick" style="color:#6b8072"><a href="#141558" label="[14:15:58]">&lt;stikonas&gt;</a></span><span class="message">ok, let's see M2-Planet first</span></div><div class="line" id="141603"><span class="nick" style="color:#2e2a4a"><a href="#141603" label="[14:16:03]">&lt;oriansj&gt;</a></span><span class="message">M2-Planet handles 32bit numbers just fine</span></div><div class="line" id="141610"><span class="nick" style="color:#6b8072"><a href="#141610" label="[14:16:10]">&lt;stikonas&gt;</a></span><span class="message">not on risc-v</span></div><div class="line" id="141618"><span class="nick" style="color:#2e2a4a"><a href="#141618" label="[14:16:18]">&lt;oriansj&gt;</a></span><span class="message">it uses 0xFFFFFFFF and 0xFF000000 without issue</span></div><div class="line" id="141629"><span class="nick" style="color:#6b8072"><a href="#141629" label="[14:16:29]">&lt;stikonas&gt;</a></span><span class="message">on other arches...</span></div><div class="line" id="141644"><span class="nick" style="color:#2e2a4a"><a href="#141644" label="[14:16:44]">&lt;oriansj&gt;</a></span><span class="message">So we need to understand what special care RISC-V needs</span></div><div class="line" id="141652"><span class="nick" style="color:#2e2a4a"><a href="#141652" label="[14:16:52]">&lt;oriansj&gt;</a></span><span class="message">in regards to 32bit numbers</span></div><div class="line" id="141653"><span class="nick" style="color:#6b8072"><a href="#141653" label="[14:16:53]">&lt;stikonas&gt;</a></span><span class="message">on risc-v it issues AUIPC + ADDI which fails for 32 bit numbers, works fine until routhly 2^31</span></div><div class="line" id="141713"><span class="nick" style="color:#6b8072"><a href="#141713" label="[14:17:13]">&lt;stikonas&gt;</a></span><span class="message">I think just need to issue more assembly commands to shift everything to lower immediates</span></div><div class="line" id="141717"><span class="nick" style="color:#6b8072"><a href="#141717" label="[14:17:17]">&lt;stikonas&gt;</a></span><span class="message">that's what binutils does</span></div><div class="line" id="141823"><span class="nick" style="color:#2e2a4a"><a href="#141823" label="[14:18:23]">&lt;oriansj&gt;</a></span><span class="message">we are not binutils, so we need to understand what needs to be done at the individual instruction encoding level</span></div><div class="line" id="141938"><span class="nick" style="color:#2e2a4a"><a href="#141938" label="[14:19:38]">&lt;oriansj&gt;</a></span><span class="message">for example do we need to do sign extension to full 64bits of the register?</span></div><div class="line" id="141950"><span class="nick" style="color:#6b8072"><a href="#141950" label="[14:19:50]">&lt;stikonas&gt;</a></span><span class="message">yeah, we should check those</span></div><div class="line" id="142001"><span class="nick" style="color:#6b8072"><a href="#142001" label="[14:20:01]">&lt;stikonas&gt;</a></span><span class="message">there might be some mess up with addi vs addiw</span></div><div class="line" id="142103"><span class="nick" style="color:#2e2a4a"><a href="#142103" label="[14:21:03]">&lt;oriansj&gt;</a></span><span class="message">So when one does 0xFF000000 what does the register look like and what should it look like</span></div><div class="line" id="142139"><span class="nick" style="color:#6b8072"><a href="#142139" label="[14:21:39]">&lt;stikonas&gt;</a></span><span class="message">well, I tested with basically the followign program, int i = 0xFF000000; convert to string; fputs(...);</span></div><div class="line" id="142144"><span class="nick" style="color:#2e2a4a"><a href="#142144" label="[14:21:44]">&lt;oriansj&gt;</a></span><span class="message">on amd64 and AArch64 it sign extends</span></div><div class="line" id="142204"><span class="nick" style="color:#6b8072"><a href="#142204" label="[14:22:04]">&lt;stikonas&gt;</a></span><span class="message">well, on riscv you can't just load 0xFF000000</span></div><div class="line" id="142211"><span class="nick" style="color:#6b8072"><a href="#142211" label="[14:22:11]">&lt;stikonas&gt;</a></span><span class="message">you need to do AUIPC+ADDI</span></div><div class="line" id="142233"><span class="nick" style="color:#6b8072"><a href="#142233" label="[14:22:33]">&lt;stikonas&gt;</a></span><span class="message">but I think it's limitted to 32 bit signed integers</span></div><div class="line" id="142313"><span class="nick" style="color:#2e2a4a"><a href="#142313" label="[14:23:13]">&lt;oriansj&gt;</a></span><span class="message">ok and what do AUIPC+ADDI need to ensure the correct result? when needing to put 0xFFFFFFFFFF000000 into the register?</span></div><div class="line" id="142330"><span class="nick" style="color:#6b8072"><a href="#142330" label="[14:23:30]">&lt;stikonas&gt;</a></span><span class="message">if we use ADDI then it sign extends to 64 bits, if we use AUIPC + ADDIW then it limits to 32 bits and sign is in 32'nd bit</span></div><div class="line" id="142330"><span class="nick" style="color:#2e2a4a"><a href="#142330" label="[14:23:30]">&lt;oriansj&gt;</a></span><span class="message">(0xFF000000 in M2-Planet terms)</span></div><div class="line" id="142428"><span class="nick" style="color:#6b8072"><a href="#142428" label="[14:24:28]">&lt;stikonas&gt;</a></span><span class="message">sorry, LUI instead of AUIPC, but rest applies</span></div><div class="line" id="142527"><span class="nick" style="color:#2e2a4a"><a href="#142527" label="[14:25:27]">&lt;oriansj&gt;</a></span><span class="message">ok and what does LUI need to be for 0xFF00000000 ?</span></div><div class="line" id="142619"><span class="nick" style="color:#2e2a4a"><a href="#142619" label="[14:26:19]">&lt;oriansj&gt;</a></span><span class="message">armv7l, x86, amd64 and AArch64 confirming riscv64 test results</span></div><div class="line" id="142657"><span class="nick" style="color:#6b8072"><a href="#142657" label="[14:26:57]">&lt;stikonas&gt;</a></span><span class="message">well we do ~0xFF000000 which means LUI is getting FF000 as its immediate, hmm</span></div><div class="line" id="142835"><span class="nick" style="color:#2e2a4a"><a href="#142835" label="[14:28:35]">&lt;oriansj&gt;</a></span><span class="message">Ok, so is Hex2 outputting that value?</span></div><div class="line" id="142916"><span class="nick" style="color:#2e2a4a"><a href="#142916" label="[14:29:16]">&lt;oriansj&gt;</a></span><span class="message">correctly?</span></div><div class="line" id="143139"><span class="nick" style="color:#6b8072"><a href="#143139" label="[14:31:39]">&lt;stikonas&gt;</a></span><span class="message">checking, I did that ~0xFF000000 test and binary contains lui with 0 as immediate</span></div><div class="line" id="143216"><span class="nick" style="color:#6b8072"><a href="#143216" label="[14:32:16]">&lt;stikonas&gt;</a></span><span class="message">oh, sorry, too many 0 in .M1 file</span></div><div class="line" id="143316"><span class="nick" style="color:#6b8072"><a href="#143316" label="[14:33:16]">&lt;stikonas&gt;</a></span><span class="message">well, not it loads 0xffffffffff000000 into register</span></div><div class="line" id="143343"><span class="nick" style="color:#6b8072"><a href="#143343" label="[14:33:43]">&lt;stikonas&gt;</a></span><span class="message">with (gcc'ed hex2)</span></div><div class="line" id="143417"><span class="nick" style="color:#6b8072"><a href="#143417" label="[14:34:17]">&lt;stikonas&gt;</a></span><span class="message">I'm just testing with</span></div><div class="line" id="143420"><span class="nick" style="color:#6b8072"><a href="#143420" label="[14:34:20]">&lt;stikonas&gt;</a></span><span class="message">:_start</span></div><div class="line" id="143421"><span class="nick" style="color:#6b8072"><a href="#143421" label="[14:34:21]">&lt;stikonas&gt;</a></span><span class="message">RD_A0 ~0xFF000000 LUI</span></div><div class="line" id="143423"><span class="nick" style="color:#6b8072"><a href="#143423" label="[14:34:23]">&lt;stikonas&gt;</a></span><span class="message">RD_A0 RS1_A0 !0xFF000000 ADDI</span></div><div class="line" id="143424"><span class="nick" style="color:#6b8072"><a href="#143424" label="[14:34:24]">&lt;stikonas&gt;</a></span><span class="message">:ELF_en</span></div><div class="line" id="143630"><span class="nick" style="color:#6b8072"><a href="#143630" label="[14:36:30]">&lt;stikonas&gt;</a></span><span class="message">same with bootstrapped hex2-1 and M1-0</span></div><div class="line" id="143632"><span class="nick" style="color:#6b8072"><a href="#143632" label="[14:36:32]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="143708"><span class="nick" style="color:#6b8072"><a href="#143708" label="[14:37:08]">&lt;stikonas&gt;</a></span><span class="message">seems to work but that might not be the ideal testcase because ADDI gets 0 as immediate</span></div><div class="line" id="144621"><span class="nick" style="color:#2e2a4a"><a href="#144621" label="[14:46:21]">&lt;oriansj&gt;</a></span><span class="message">and does hex2 produce 0 as the immediate given !0xFF000000 ?</span></div><div class="line" id="144741"><span class="nick" style="color:#6b8072"><a href="#144741" label="[14:47:41]">&lt;stikonas&gt;</a></span><span class="message">oh that's in the code</span></div><div class="line" id="144745"><span class="nick" style="color:#6b8072"><a href="#144745" label="[14:47:45]">&lt;stikonas&gt;</a></span><span class="message">it should produce 0 for ! part</span></div><div class="line" id="144755"><span class="nick" style="color:#2e2a4a"><a href="#144755" label="[14:47:55]">&lt;oriansj&gt;</a></span><span class="message">well it wouldn't be that hard to iterate through all 2^32 possible inputs and make sure hex2 and M1 do the correct thing for all of them.</span></div><div class="line" id="144804"><span class="nick" style="color:#6b8072"><a href="#144804" label="[14:48:04]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/hex2_word.c#L67">https://github.com/oriansj/mescc-tools/blob/master/hex2_word.c#L67</a> </span></div><div class="line" id="144838"><span class="nick" style="color:#6b8072"><a href="#144838" label="[14:48:38]">&lt;stikonas&gt;</a></span><span class="message">sorry, should actually point out to M1 code</span></div><div class="line" id="144843"><span class="nick" style="color:#6b8072"><a href="#144843" label="[14:48:43]">&lt;stikonas&gt;</a></span><span class="message">that's the one dealing with immediates</span></div><div class="line" id="144848"><span class="nick" style="color:#6b8072"><a href="#144848" label="[14:48:48]">&lt;stikonas&gt;</a></span><span class="message">hex2 is just labels</span></div><div class="line" id="144917"><span class="nick" style="color:#6b8072"><a href="#144917" label="[14:49:17]">&lt;stikonas&gt;</a></span><span class="message">well, it's <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/M1-macro.c#L620">https://github.com/oriansj/mescc-tools/blob/master/M1-macro.c#L620</a> </span></div><div class="line" id="144930"><span class="nick" style="color:#6b8072"><a href="#144930" label="[14:49:30]">&lt;stikonas&gt;</a></span><span class="message">so 0xFF000000 &amp; 0xfff gives 0</span></div><div class="line" id="145110"><span class="nick" style="color:#2e2a4a"><a href="#145110" label="[14:51:10]">&lt;oriansj&gt;</a></span><span class="message">So if it works fine in M1+hex2; which means the binary is correct, what is the problem?</span></div><div class="line" id="145122"><span class="nick" style="color:#2e2a4a"><a href="#145122" label="[14:51:22]">&lt;oriansj&gt;</a></span><span class="message">where is 0xFF000000 causing an issue?</span></div><div class="line" id="145153"><span class="nick" style="color:#2e2a4a"><a href="#145153" label="[14:51:53]">&lt;oriansj&gt;</a></span><span class="message">M2-Planet is outputting the correct M1 instructions correct?</span></div><div class="line" id="145523"><span class="nick" style="color:#6b8072"><a href="#145523" label="[14:55:23]">&lt;stikonas&gt;</a></span><span class="message">well, the problem is that M2-Planet segfaults</span></div><div class="line" id="145542"><span class="nick" style="color:#6b8072"><a href="#145542" label="[14:55:42]">&lt;stikonas&gt;</a></span><span class="message">(and also remember that test0020 that failed with non-gcc'ed hex2)</span></div><div class="line" id="145556"><span class="nick" style="color:#6b8072"><a href="#145556" label="[14:55:56]">&lt;stikonas&gt;</a></span><span class="message">I think M2-Planet is outputting correct thing</span></div><div class="line" id="145621"><span class="nick" style="color:#6b8072"><a href="#145621" label="[14:56:21]">&lt;stikonas&gt;</a></span><span class="message">although, I'm not fully sure now, getting a bit confused with this bug</span></div><div class="line" id="145622"><span class="nick" style="color:#2e2a4a"><a href="#145622" label="[14:56:22]">&lt;oriansj&gt;</a></span><span class="message">but not when building hex2</span></div><div class="line" id="145658"><span class="nick" style="color:#2e2a4a"><a href="#145658" label="[14:56:58]">&lt;oriansj&gt;</a></span><span class="message">So let us look closer at hex2 for a second.</span></div><div class="line" id="145729"><span class="nick" style="color:#2e2a4a"><a href="#145729" label="[14:57:29]">&lt;oriansj&gt;</a></span><span class="message">So build hex2 with M2-Planet and keep the gcc hex2 around</span></div><div class="line" id="145748"><span class="nick" style="color:#6b8072"><a href="#145748" label="[14:57:48]">&lt;stikonas&gt;</a></span><span class="message">ok</span></div><div class="line" id="145752"><span class="nick" style="color:#2e2a4a"><a href="#145752" label="[14:57:52]">&lt;oriansj&gt;</a></span><span class="message">and do the following have them both build test0020 binaries from the exact same hex2 file</span></div><div class="line" id="145755"><span class="nick" style="color:#6b8072"><a href="#145755" label="[14:57:55]">&lt;stikonas&gt;</a></span><span class="message">different arches are fine I guess...</span></div><div class="line" id="145801"><span class="nick" style="color:#2e2a4a"><a href="#145801" label="[14:58:01]">&lt;oriansj&gt;</a></span><span class="message">and what are the differences</span></div><div class="line" id="145802"><span class="nick" style="color:#6b8072"><a href="#145802" label="[14:58:02]">&lt;stikonas&gt;</a></span><span class="message">gcc'ed hex2 is amd64</span></div><div class="line" id="145812"><span class="nick" style="color:#6b8072"><a href="#145812" label="[14:58:12]">&lt;stikonas&gt;</a></span><span class="message">boostrapped hex2 is riscv64</span></div><div class="line" id="145818"><span class="nick" style="color:#6b8072"><a href="#145818" label="[14:58:18]">&lt;stikonas&gt;</a></span><span class="message">ok, let me compare binaries</span></div><div class="line" id="145835"><span class="nick" style="color:#2e2a4a"><a href="#145835" label="[14:58:35]">&lt;oriansj&gt;</a></span><span class="message">as hex2 should always behave the exact same regardless of host or target</span></div><div class="line" id="145900"><span class="nick" style="color:#2e2a4a"><a href="#145900" label="[14:59:00]">&lt;oriansj&gt;</a></span><span class="message">and where they are different let us take a closer look</span></div><div class="line" id="150005"><span class="nick" style="color:#2e2a4a"><a href="#150005" label="[15:00:05]">&lt;oriansj&gt;</a></span><span class="message">xeh will help with doing a compare with the resulting binaries</span></div><div class="line" id="150011"><span class="nick" style="color:#2e2a4a"><a href="#150011" label="[15:00:11]">&lt;oriansj&gt;</a></span><span class="message">(its in stage0)</span></div><div class="line" id="150100"><span class="nick" style="color:#6b8072"><a href="#150100" label="[15:01:00]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1214102/">https://paste.debian.net/1214102/</a> </span></div><div class="line" id="150109"><span class="nick" style="color:#6b8072"><a href="#150109" label="[15:01:09]">&lt;stikonas&gt;</a></span><span class="message">oh, I just diffoscope</span></div><div class="line" id="150113"><span class="nick" style="color:#6b8072"><a href="#150113" label="[15:01:13]">&lt;stikonas&gt;</a></span><span class="message">or do you wnat xeh?</span></div><div class="line" id="150144"><span class="nick" style="color:#2e2a4a"><a href="#150144" label="[15:01:44]">&lt;oriansj&gt;</a></span><span class="message">that is fine as well</span></div><div class="line" id="150216"><span class="nick" style="color:#6b8072"><a href="#150216" label="[15:02:16]">&lt;stikonas&gt;</a></span><span class="message">so 4 differences</span></div><div class="line" id="150335"><span class="nick" style="color:#2e2a4a"><a href="#150335" label="[15:03:35]">&lt;oriansj&gt;</a></span><span class="message">4bytes total of differences</span></div><div class="line" id="150354"><span class="nick" style="color:#6b8072"><a href="#150354" label="[15:03:54]">&lt;stikonas&gt;</a></span><span class="message">and I think those are LUI instructions</span></div><div class="line" id="150400"><span class="nick" style="color:#6b8072"><a href="#150400" label="[15:04:00]">&lt;stikonas&gt;</a></span><span class="message">or addi after them</span></div><div class="line" id="150409"><span class="nick" style="color:#2e2a4a"><a href="#150409" label="[15:04:09]">&lt;oriansj&gt;</a></span><span class="message">addiw a0, a0, 1900 vs  sd s1, 240(a3) mv s2, a4</span></div><div class="line" id="150424"><span class="nick" style="color:#2e2a4a"><a href="#150424" label="[15:04:24]">&lt;oriansj&gt;</a></span><span class="message">rasm2 -a riscv -b 64 -d 'e4fa 3a89'</span></div><div class="line" id="150514"><span class="nick" style="color:#2e2a4a"><a href="#150514" label="[15:05:14]">&lt;oriansj&gt;</a></span><span class="message">well that would certainly cause a segfault</span></div><div class="line" id="150516"><span class="nick" style="color:#6b8072"><a href="#150516" label="[15:05:16]">&lt;stikonas&gt;</a></span><span class="message">so second is wrong</span></div><div class="line" id="150533"><span class="nick" style="color:#2e2a4a"><a href="#150533" label="[15:05:33]">&lt;oriansj&gt;</a></span><span class="message">very wrong</span></div><div class="line" id="150553"><span class="nick" style="color:#6b8072"><a href="#150553" label="[15:05:53]">&lt;stikonas&gt;</a></span><span class="message">is addiw misencoded</span></div><div class="line" id="150556"><span class="nick" style="color:#6b8072"><a href="#150556" label="[15:05:56]">&lt;stikonas&gt;</a></span><span class="message">in riscv defs</span></div><div class="line" id="150557"><span class="nick" style="color:#6b8072"><a href="#150557" label="[15:05:57]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="150600"><span class="nick" style="color:#6b8072"><a href="#150600" label="[15:06:00]">&lt;stikonas&gt;</a></span><span class="message">I'm confused</span></div><div class="line" id="150611"><span class="nick" style="color:#6b8072"><a href="#150611" label="[15:06:11]">&lt;stikonas&gt;</a></span><span class="message">oh, maybe it's not immediates but label jumps</span></div><div class="line" id="150629"><span class="nick" style="color:#6b8072"><a href="#150629" label="[15:06:29]">&lt;stikonas&gt;</a></span><span class="message">yeah, that's right</span></div><div class="line" id="150649"><span class="nick" style="color:#6b8072"><a href="#150649" label="[15:06:49]">&lt;stikonas&gt;</a></span><span class="message">those differences are in the second line of AUIPC/ADDIW pairs</span></div><div class="line" id="150651"><span class="nick" style="color:#6b8072"><a href="#150651" label="[15:06:51]">&lt;stikonas&gt;</a></span><span class="message">where we look up labels</span></div><div class="line" id="150733"><span class="nick" style="color:#2e2a4a"><a href="#150733" label="[15:07:33]">&lt;oriansj&gt;</a></span><span class="message">can we distill the hex2 down into a smaller test by elimination</span></div><div class="line" id="150748"><span class="nick" style="color:#6b8072"><a href="#150748" label="[15:07:48]">&lt;stikonas&gt;</a></span><span class="message">well, it's almost surely something <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/hex2_word.c#L66">https://github.com/oriansj/mescc-tools/blob/master/hex2_word.c#L66</a> </span></div><div class="line" id="150750"><span class="nick" style="color:#2e2a4a"><a href="#150750" label="[15:07:50]">&lt;oriansj&gt;</a></span><span class="message">it doesn't have to run but be different</span></div><div class="line" id="150801"><span class="nick" style="color:#6b8072"><a href="#150801" label="[15:08:01]">&lt;stikonas&gt;</a></span><span class="message">in those 3 lines</span></div><div class="line" id="150901"><span class="nick" style="color:#6b8072"><a href="#150901" label="[15:09:01]">&lt;stikonas&gt;</a></span><span class="message">yeah, some smaller test would be nicer</span></div><div class="line" id="150906"><span class="nick" style="color:#6b8072"><a href="#150906" label="[15:09:06]">&lt;stikonas&gt;</a></span><span class="message">hex2 is a bit too big to debug</span></div><div class="line" id="150958"><span class="nick" style="color:#2e2a4a"><a href="#150958" label="[15:09:58]">&lt;oriansj&gt;</a></span><span class="message">since they take the same hex2 as input. Cut it in half</span></div><div class="line" id="151019"><span class="nick" style="color:#2e2a4a"><a href="#151019" label="[15:10:19]">&lt;oriansj&gt;</a></span><span class="message">bisect the input hex2 file until only the parts that are different remain</span></div><div class="line" id="151059"><span class="nick" style="color:#6b8072"><a href="#151059" label="[15:10:59]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="151111"><span class="nick" style="color:#6b8072"><a href="#151111" label="[15:11:11]">&lt;stikonas&gt;</a></span><span class="message">hex2 would complain once I cut out functions...</span></div><div class="line" id="151115"><span class="nick" style="color:#6b8072"><a href="#151115" label="[15:11:15]">&lt;stikonas&gt;</a></span><span class="message">even if it's not run...</span></div><div class="line" id="151132"><span class="nick" style="color:#2e2a4a"><a href="#151132" label="[15:11:32]">&lt;oriansj&gt;</a></span><span class="message">only if you remove lables needed</span></div><div class="line" id="151148"><span class="nick" style="color:#6b8072"><a href="#151148" label="[15:11:48]">&lt;stikonas&gt;</a></span><span class="message">well, yes, if I keep labels, that should work</span></div><div class="line" id="151423"><span class="nick" style="color:#2e2a4a"><a href="#151423" label="[15:14:23]">&lt;oriansj&gt;</a></span><span class="message">unless the issue is a specific offset size but then they will both match and you'll know you removed the diffference we are trying to distill</span></div><div class="line" id="151608"><span class="nick" style="color:#6b8072"><a href="#151608" label="[15:16:08]">&lt;stikonas&gt;</a></span><span class="message">well, I'm removing one function at a time while keeping label</span></div><div class="line" id="151613"><span class="nick" style="color:#6b8072"><a href="#151613" label="[15:16:13]">&lt;stikonas&gt;</a></span><span class="message">and recalculating hashes every time</span></div><div class="line" id="151649"><span class="nick" style="color:#6b8072"><a href="#151649" label="[15:16:49]">&lt;stikonas&gt;</a></span><span class="message">so at the very least we should get a smaller test file</span></div><div class="line" id="151656"><span class="nick" style="color:#6b8072"><a href="#151656" label="[15:16:56]">&lt;stikonas&gt;</a></span><span class="message">that is still broken</span></div><div class="line" id="151707"><span class="nick" style="color:#2e2a4a"><a href="#151707" label="[15:17:07]">&lt;oriansj&gt;</a></span><span class="message">and if it is a difference you can replace lines with '00 00 00 00' to isolate the issue to the instructions in question</span></div><div class="line" id="151822"><span class="nick" style="color:#2e2a4a"><a href="#151822" label="[15:18:22]">&lt;oriansj&gt;</a></span><span class="message">must smaller problem space to search</span></div><div class="line" id="151917"><span class="nick" style="color:#6b8072"><a href="#151917" label="[15:19:17]">&lt;stikonas&gt;</a></span><span class="message">in the end it will probably be some stupid bug</span></div><div class="line" id="151923"><span class="nick" style="color:#6b8072"><a href="#151923" label="[15:19:23]">&lt;stikonas&gt;</a></span><span class="message">it often is in these cases...</span></div><div class="line" id="152241"><span class="nick" style="color:#2e2a4a"><a href="#152241" label="[15:22:41]">&lt;oriansj&gt;</a></span><span class="message">and a good test for mescc-tools</span></div><div class="line" id="152738"><span class="nick" style="color:#6b8072"><a href="#152738" label="[15:27:38]">&lt;stikonas&gt;</a></span><span class="message">it's probably some specific offset</span></div><div class="line" id="152803"><span class="nick" style="color:#6b8072"><a href="#152803" label="[15:28:03]">&lt;stikonas&gt;</a></span><span class="message">I can still try to minimize .hex2 file a bit</span></div><div class="line" id="153042"><span class="nick" style="color:#6b8072"><a href="#153042" label="[15:30:42]">&lt;stikonas&gt;</a></span><span class="message">once I have 1 difference, we can just calculate offset</span></div><div class="line" id="153353"><span class="nick" style="color:#6b8072"><a href="#153353" label="[15:33:53]">&lt;stikonas&gt;</a></span><span class="message">oriansj: removing one extra instruction from <a rel="nofollow" href="https://paste.debian.net/1214106/">https://paste.debian.net/1214106/</a>  causes files to be  the same</span></div><div class="line" id="153405"><span class="nick" style="color:#6b8072"><a href="#153405" label="[15:34:05]">&lt;stikonas&gt;</a></span><span class="message">this is still producing 1 byte difference</span></div><div class="line" id="153503"><span class="nick" style="color:#6b8072"><a href="#153503" label="[15:35:03]">&lt;stikonas&gt;</a></span><span class="message">and it's probably related to 2048</span></div><div class="line" id="153515"><span class="nick" style="color:#6b8072"><a href="#153515" label="[15:35:15]">&lt;stikonas&gt;</a></span><span class="message">file size is 2060 - first and last instructions would be 2052</span></div><div class="line" id="153530"><span class="nick" style="color:#6b8072"><a href="#153530" label="[15:35:30]">&lt;stikonas&gt;</a></span><span class="message">and 2048 + 8 works fine</span></div><div class="line" id="153604"><span class="nick" style="color:#6b8072"><a href="#153604" label="[15:36:04]">&lt;stikonas&gt;</a></span><span class="message">and 2048 is the range of !</span></div><div class="line" id="153844"><span class="nick" style="color:#2e2a4a"><a href="#153844" label="[15:38:44]">&lt;oriansj&gt;</a></span><span class="message">So the difference is the 00050000 .00000500 !FUNCTION_putchar 1B000000</span></div><div class="line" id="153922"><span class="nick" style="color:#2e2a4a"><a href="#153922" label="[15:39:22]">&lt;oriansj&gt;</a></span><span class="message">is the value = value + 4; the problem?</span></div><div class="line" id="154057"><span class="nick" style="color:#2e2a4a"><a href="#154057" label="[15:40:57]">&lt;oriansj&gt;</a></span><span class="message">would moving it after shiftregister = shiftregister ^ tempword; produce the correct behavior in the M2-Planet tests?</span></div><div class="line" id="154100"><span class="nick" style="color:#6b8072"><a href="#154100" label="[15:41:00]">&lt;stikonas&gt;</a></span><span class="message">well, value + 4 has to be there</span></div><div class="line" id="154111"><span class="nick" style="color:#6b8072"><a href="#154111" label="[15:41:11]">&lt;stikonas&gt;</a></span><span class="message">but that's why problem comes at 2060 and not at 2056</span></div><div class="line" id="154125"><span class="nick" style="color:#6b8072"><a href="#154125" label="[15:41:25]">&lt;stikonas&gt;</a></span><span class="message">so another data point is</span></div><div class="line" id="154131"><span class="nick" style="color:#6b8072"><a href="#154131" label="[15:41:31]">&lt;stikonas&gt;</a></span><span class="message">hex2-0 works fine on this file</span></div><div class="line" id="154223"><span class="nick" style="color:#6b8072"><a href="#154223" label="[15:42:23]">&lt;stikonas&gt;</a></span><span class="message">this is what we do there <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/blob/master/riscv64/GAS/hex2_riscv64.S#L357">https://github.com/oriansj/stage0-posix/blob/master/riscv64/GAS/hex2_riscv64.S#L357</a> </span></div><div class="line" id="154249"><span class="nick" style="color:#6b8072"><a href="#154249" label="[15:42:49]">&lt;stikonas&gt;</a></span><span class="message">I specifically use addiw a0, a0, 4 and slliw there in hex2-0</span></div><div class="line" id="154311"><span class="nick" style="color:#6b8072"><a href="#154311" label="[15:43:11]">&lt;stikonas&gt;</a></span><span class="message">but M2-Planet issues addi and slli there</span></div><div class="line" id="154329"><span class="nick" style="color:#6b8072"><a href="#154329" label="[15:43:29]">&lt;stikonas&gt;</a></span><span class="message">which is why things go wrong then</span></div><div class="line" id="154355"><span class="nick" style="color:#6b8072"><a href="#154355" label="[15:43:55]">&lt;stikonas&gt;</a></span><span class="message">but using addiw in M2-Planet would break other things...</span></div><div class="line" id="154409"><span class="nick" style="color:#6b8072"><a href="#154409" label="[15:44:09]">&lt;stikonas&gt;</a></span><span class="message">all the pointer arithmetic would go wrong if result is restricted to 32-bit</span></div><div class="line" id="154420"><span class="nick" style="color:#6b8072"><a href="#154420" label="[15:44:20]">&lt;stikonas&gt;</a></span><span class="message">as stack pointer is outside 32-bits</span></div><div class="line" id="154439"><span class="nick" style="color:#2e2a4a"><a href="#154439" label="[15:44:39]">&lt;oriansj&gt;</a></span><span class="message">So?</span></div><div class="line" id="154455"><span class="nick" style="color:#2e2a4a"><a href="#154455" label="[15:44:55]">&lt;oriansj&gt;</a></span><span class="message">we don't use addiw when doing pointer work</span></div><div class="line" id="154526"><span class="nick" style="color:#2e2a4a"><a href="#154526" label="[15:45:26]">&lt;oriansj&gt;</a></span><span class="message">we use addiw when working with integers</span></div><div class="line" id="154650"><span class="nick" style="color:#6b8072"><a href="#154650" label="[15:46:50]">&lt;stikonas&gt;</a></span><span class="message">ok, I'll try to change some emit_out commands but after lunch</span></div><div class="line" id="154755"><span class="nick" style="color:#2e2a4a"><a href="#154755" label="[15:47:55]">&lt;oriansj&gt;</a></span><span class="message">and I'm going to try to distill your test further</span></div><div class="line" id="154914"><span class="nick" style="color:#2e2a4a"><a href="#154914" label="[15:49:14]">&lt;oriansj&gt;</a></span><span class="message">67800000 $_END_IF_fseek_5 6F000000 ??</span></div><div class="line" id="155724"><span class="nick" style="color:#6d2462"><a href="#155724" label="[15:57:24]">&lt;stikonas[m]&gt;</a></span><span class="message">That's 2 commands</span></div><div class="line" id="160352"><span class="nick" style="color:#2e2a4a"><a href="#160352" label="[16:03:52]">&lt;oriansj&gt;</a></span><span class="message">and can you sanity check that this: <a rel="nofollow" href="https://paste.debian.net/1214107/">https://paste.debian.net/1214107/</a>  produces different outputs between the gcc and the M2-Planet hex2</span></div><div class="line" id="160516"><span class="nick" style="color:#2e2a4a"><a href="#160516" label="[16:05:16]">&lt;oriansj&gt;</a></span><span class="message">(if so there is exactly two calls into UpdateShiftRegister which makes for easy simple stepping to see the problem)</span></div><div class="line" id="161045"><span class="nick" style="color:#2e2a4a"><a href="#161045" label="[16:10:45]">&lt;oriansj&gt;</a></span><span class="message">then we will know exactly where it goes wrong</span></div><div class="line" id="163643"><span class="nick" style="color:#2e2a4a"><a href="#163643" label="[16:36:43]">&lt;oriansj&gt;</a></span><span class="message">melg8: I'll have the fix for <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/issues/18">https://github.com/oriansj/M2-Planet/issues/18</a>  up in a couple minutes</span></div><div class="line" id="163854"><span class="nick" style="color:#2e2a4a"><a href="#163854" label="[16:38:54]">&lt;oriansj&gt;</a></span><span class="message">and patches up</span></div><div class="line" id="163901"><span class="nick" style="color:#6b8072"><a href="#163901" label="[16:39:01]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1214109/">https://paste.debian.net/1214109/</a>  still reproduces it</span></div><div class="line" id="163905"><span class="nick" style="color:#6b8072"><a href="#163905" label="[16:39:05]">&lt;stikonas&gt;</a></span><span class="message">but ~ is essential...</span></div><div class="line" id="165526"><span class="nick" style="color:#8dd3c7"><a href="#165526" label="[16:55:26]">&lt;xentrac&gt;</a></span><span class="message">huh, I didn't know AUIPC was capable of causing a crash</span></div><div class="line" id="170150"><span class="nick" style="color:#6b8072"><a href="#170150" label="[17:01:50]">&lt;stikonas&gt;</a></span><span class="message">xentrac: it's not AUIPC that's causing a crash</span></div><div class="line" id="170157"><span class="nick" style="color:#2e2a4a"><a href="#170157" label="[17:01:57]">&lt;oriansj&gt;</a></span><span class="message">xentrac: it is if hex2 converts addiw a0, a0, 1900 into sd s1, 240(a3) mv s2, a4</span></div><div class="line" id="170158"><span class="nick" style="color:#6b8072"><a href="#170158" label="[17:01:58]">&lt;stikonas&gt;</a></span><span class="message">it's hex2 misencoding AUIPC/ADDI pair</span></div><div class="line" id="170242"><span class="nick" style="color:#2e2a4a"><a href="#170242" label="[17:02:42]">&lt;oriansj&gt;</a></span><span class="message">So we are figuring out exactly why when built by M2-Planet hex2 does that</span></div><div class="line" id="170550"><span class="nick" style="color:#8dd3c7"><a href="#170550" label="[17:05:50]">&lt;xentrac&gt;</a></span><span class="message">oh, heh, sorry</span></div><div class="line" id="170641"><span class="nick" style="color:#2e2a4a"><a href="#170641" label="[17:06:41]">&lt;oriansj&gt;</a></span><span class="message">no worries, shared understanding is essential to effective cooperation</span></div><div class="line" id="171847"><span class="nick" style="color:#2e2a4a"><a href="#171847" label="[17:18:47]">&lt;oriansj&gt;</a></span><span class="message">I guess I need to build hex2 from M2 myself to get a better look at this bug</span></div><div class="line" id="172030"><span class="nick" style="color:#6b8072"><a href="#172030" label="[17:20:30]">&lt;stikonas&gt;</a></span><span class="message">that might be useful...</span></div><div class="line" id="172036"><span class="nick" style="color:#6b8072"><a href="#172036" label="[17:20:36]">&lt;stikonas&gt;</a></span><span class="message">I'm trying to look with gdb...</span></div><div class="line" id="172051"><span class="nick" style="color:#6b8072"><a href="#172051" label="[17:20:51]">&lt;stikonas&gt;</a></span><span class="message">although, I should probably build hex2 with gcc-riscv64</span></div><div class="line" id="172102"><span class="nick" style="color:#6b8072"><a href="#172102" label="[17:21:02]">&lt;stikonas&gt;</a></span><span class="message">amd64 version has different registers, so harder to compare</span></div><div class="line" id="172110"><span class="nick" style="color:#2e2a4a"><a href="#172110" label="[17:21:10]">&lt;oriansj&gt;</a></span><span class="message">fair</span></div><div class="line" id="172145"><span class="nick" style="color:#6b8072"><a href="#172145" label="[17:21:45]">&lt;stikonas&gt;</a></span><span class="message">well, we have 2 good hex2's one is hex2-0 and the other is gcc'ed hex2</span></div><div class="line" id="172205"><span class="nick" style="color:#2e2a4a"><a href="#172205" label="[17:22:05]">&lt;oriansj&gt;</a></span><span class="message">one can also compare the M2-Planet build hex2 (amd64) against the riscv64 M2-Planet build as they should be doing functionally the exact same thing</span></div><div class="line" id="172312"><span class="nick" style="color:#6b8072"><a href="#172312" label="[17:23:12]">&lt;stikonas&gt;</a></span><span class="message">yes, there are a few things we can try that might all uncover where exactly things go wrong</span></div><div class="line" id="172637"><span class="nick" style="color:#6b8072"><a href="#172637" label="[17:26:37]">&lt;stikonas&gt;</a></span><span class="message">oriansj: so I can see some difference already</span></div><div class="line" id="172647"><span class="nick" style="color:#2e2a4a"><a href="#172647" label="[17:26:47]">&lt;oriansj&gt;</a></span><span class="message">good</span></div><div class="line" id="172700"><span class="nick" style="color:#6b8072"><a href="#172700" label="[17:27:00]">&lt;stikonas&gt;</a></span><span class="message">when I'm on this line <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/hex2_word.c#L103">https://github.com/oriansj/mescc-tools/blob/master/hex2_word.c#L103</a> </span></div><div class="line" id="172710"><span class="nick" style="color:#6b8072"><a href="#172710" label="[17:27:10]">&lt;stikonas&gt;</a></span><span class="message">tempword on amd64 version is 0xfffff000</span></div><div class="line" id="172720"><span class="nick" style="color:#6b8072"><a href="#172720" label="[17:27:20]">&lt;stikonas&gt;</a></span><span class="message">but riscv64 register is 0xfffffffffffff000</span></div><div class="line" id="172727"><span class="nick" style="color:#6b8072"><a href="#172727" label="[17:27:27]">&lt;stikonas&gt;</a></span><span class="message">oh, but maybe that's alright</span></div><div class="line" id="172728"><span class="nick" style="color:#6b8072"><a href="#172728" label="[17:27:28]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="172746"><span class="nick" style="color:#6b8072"><a href="#172746" label="[17:27:46]">&lt;stikonas&gt;</a></span><span class="message">because on amd64 version I'm printing &quot;p tempword&quot; directly</span></div><div class="line" id="172758"><span class="nick" style="color:#6b8072"><a href="#172758" label="[17:27:58]">&lt;stikonas&gt;</a></span><span class="message">gdb has access to source there</span></div><div class="line" id="172905"><span class="nick" style="color:#6b8072"><a href="#172905" label="[17:29:05]">&lt;stikonas&gt;</a></span><span class="message">but yeah, that's probably causing it</span></div><div class="line" id="172918"><span class="nick" style="color:#6b8072"><a href="#172918" label="[17:29:18]">&lt;stikonas&gt;</a></span><span class="message">since we were not using addw...</span></div><div class="line" id="172923"><span class="nick" style="color:#6b8072"><a href="#172923" label="[17:29:23]">&lt;stikonas&gt;</a></span><span class="message">I think addw would have restricted it</span></div><div class="line" id="173001"><span class="nick" style="color:#2e2a4a"><a href="#173001" label="[17:30:01]">&lt;oriansj&gt;</a></span><span class="message">well use gdb to hand set the register to see if it fixes the output</span></div><div class="line" id="173620"><span class="nick" style="color:#6b8072"><a href="#173620" label="[17:36:20]">&lt;stikonas&gt;</a></span><span class="message">hmm, something very strange is happening</span></div><div class="line" id="173708"><span class="nick" style="color:#6b8072"><a href="#173708" label="[17:37:08]">&lt;stikonas&gt;</a></span><span class="message">when I read shiftregister next time it's 0xffffffff</span></div><div class="line" id="173712"><span class="nick" style="color:#6b8072"><a href="#173712" label="[17:37:12]">&lt;stikonas&gt;</a></span><span class="message">rather than zero</span></div><div class="line" id="173728"><span class="nick" style="color:#6b8072"><a href="#173728" label="[17:37:28]">&lt;stikonas&gt;</a></span><span class="message">probably need to go back and see how it got this value</span></div><div class="line" id="174508"><span class="nick" style="color:#6b8072"><a href="#174508" label="[17:45:08]">&lt;stikonas&gt;</a></span><span class="message">hmm, it got changed at some point between two invocations of UpdateShiftRegister</span></div><div class="line" id="174609"><span class="nick" style="color:#6b8072"><a href="#174609" label="[17:46:09]">&lt;stikonas&gt;</a></span><span class="message">I guess in unsigned sr_nextb</span></div><div class="line" id="174659"><span class="nick" style="color:#6b8072"><a href="#174659" label="[17:46:59]">&lt;stikonas&gt;</a></span><span class="message">ok, that makes sense</span></div><div class="line" id="174716"><span class="nick" style="color:#6b8072"><a href="#174716" label="[17:47:16]">&lt;stikonas&gt;</a></span><span class="message"> 0xfffff000 &gt;&gt; 8 would give 0</span></div><div class="line" id="174724"><span class="nick" style="color:#6b8072"><a href="#174724" label="[17:47:24]">&lt;stikonas&gt;</a></span><span class="message">but not 0xfffffffffffff000 &gt;&gt; 8</span></div><div class="line" id="175008"><span class="nick" style="color:#6b8072"><a href="#175008" label="[17:50:08]">&lt;stikonas&gt;</a></span><span class="message">oriansj: and yes, handsetting it to 0xfffff000 fixes the output</span></div><div class="line" id="175117"><span class="nick" style="color:#6b8072"><a href="#175117" label="[17:51:17]">&lt;stikonas&gt;</a></span><span class="message">should we just restrict it in hex2_word.c to 32-bits using bitmask?</span></div><div class="line" id="175143"><span class="nick" style="color:#6b8072"><a href="#175143" label="[17:51:43]">&lt;stikonas&gt;</a></span><span class="message">hmm, although, that's not really the right thing to do...</span></div><div class="line" id="175157"><span class="nick" style="color:#6b8072"><a href="#175157" label="[17:51:57]">&lt;stikonas&gt;</a></span><span class="message">should figure out why M2-Planet generates it incorrectly</span></div><div class="line" id="180139"><span class="nick" style="color:#6b8072"><a href="#180139" label="[18:01:39]">&lt;stikonas&gt;</a></span><span class="message">oriansj: hmm, arithmetic_recursion should issue the second string for unsigned?</span></div><div class="line" id="180929"><span class="nick" style="color:#6b8072"><a href="#180929" label="[18:09:29]">&lt;stikonas&gt;</a></span><span class="message">ok, that doesn't actually matter...</span></div><div class="line" id="180943"><span class="nick" style="color:#6b8072"><a href="#180943" label="[18:09:43]">&lt;stikonas&gt;</a></span><span class="message">but it's right, the correct 2nd string was issued</span></div><div class="line" id="182207"><span class="nick" style="color:#6b8072"><a href="#182207" label="[18:22:07]">&lt;stikonas&gt;</a></span><span class="message">oriansj: so what should we do?</span></div><div class="line" id="182222"><span class="nick" style="color:#6b8072"><a href="#182222" label="[18:22:22]">&lt;stikonas&gt;</a></span><span class="message">I can workaround this by restricting value to &amp; 0xffffffff</span></div><div class="line" id="182244"><span class="nick" style="color:#6b8072"><a href="#182244" label="[18:22:44]">&lt;stikonas&gt;</a></span><span class="message">but I'm a bit confused how to fix this properly in M2-Planet...</span></div><div class="line" id="182346"><span class="nick" style="color:#2e2a4a"><a href="#182346" label="[18:23:46]">&lt;oriansj&gt;</a></span><span class="message">well let me think about it</span></div><div class="line" id="182445"><span class="nick" style="color:#6b8072"><a href="#182445" label="[18:24:45]">&lt;stikonas&gt;</a></span><span class="message">that UpdateShiftRegister function really assumes that it's variables are 32-bit</span></div><div class="line" id="182544"><span class="nick" style="color:#6b8072"><a href="#182544" label="[18:25:44]">&lt;stikonas&gt;</a></span><span class="message">with hex2_word.c workaround M2-Planet is self-hosting and seems to work fine</span></div><div class="line" id="182601"><span class="nick" style="color:#6b8072"><a href="#182601" label="[18:26:01]">&lt;stikonas&gt;</a></span><span class="message">but it's a bit unsatisfactory solution</span></div><div class="line" id="182612"><span class="nick" style="color:#2e2a4a"><a href="#182612" label="[18:26:12]">&lt;oriansj&gt;</a></span><span class="message">fair</span></div><div class="line" id="183038"><span class="nick" style="color:#2e2a4a"><a href="#183038" label="[18:30:38]">&lt;oriansj&gt;</a></span><span class="message">what if we do this to hex2: <a rel="nofollow" href="https://paste.debian.net/1214115/">https://paste.debian.net/1214115/</a> </span></div><div class="line" id="183207"><span class="nick" style="color:#6b8072"><a href="#183207" label="[18:32:07]">&lt;stikonas&gt;</a></span><span class="message">that should fix it too</span></div><div class="line" id="183226"><span class="nick" style="color:#6b8072"><a href="#183226" label="[18:32:26]">&lt;stikonas&gt;</a></span><span class="message">although, let me check what happens if I replace add-&gt;addw in primary_expr_stubs</span></div><div class="line" id="183305"><span class="nick" style="color:#6b8072"><a href="#183305" label="[18:33:05]">&lt;stikonas&gt;</a></span><span class="message">(and other operations, not just add)</span></div><div class="line" id="183307"><span class="nick" style="color:#2e2a4a"><a href="#183307" label="[18:33:07]">&lt;oriansj&gt;</a></span><span class="message">can you confirm that the patch fixes hex2's behavior in regards to the M2-Planet produced hex2</span></div><div class="line" id="183444"><span class="nick" style="color:#6b8072"><a href="#183444" label="[18:34:44]">&lt;stikonas&gt;</a></span><span class="message">yeah, I'll test it now</span></div><div class="line" id="183450"><span class="nick" style="color:#2e2a4a"><a href="#183450" label="[18:34:50]">&lt;oriansj&gt;</a></span><span class="message">thank you</span></div><div class="line" id="183500"><span class="nick" style="color:#6b8072"><a href="#183500" label="[18:35:00]">&lt;stikonas&gt;</a></span><span class="message">that change add-&gt;addw etc breaks pointers, so I'll undo it</span></div><div class="line" id="183527"><span class="nick" style="color:#6b8072"><a href="#183527" label="[18:35:27]">&lt;stikonas&gt;</a></span><span class="message">well, as expected since it breaks all long int operations</span></div><div class="line" id="183604"><span class="nick" style="color:#6b8072"><a href="#183604" label="[18:36:04]">&lt;stikonas&gt;</a></span><span class="message">oriansj: oh, actually, that will only fix value if . is encountered</span></div><div class="line" id="183635"><span class="nick" style="color:#6b8072"><a href="#183635" label="[18:36:35]">&lt;stikonas&gt;</a></span><span class="message">I don't have any dots in my testcase</span></div><div class="line" id="183658"><span class="nick" style="color:#6b8072"><a href="#183658" label="[18:36:58]">&lt;stikonas&gt;</a></span><span class="message">oh sorry</span></div><div class="line" id="183703"><span class="nick" style="color:#6b8072"><a href="#183703" label="[18:37:03]">&lt;stikonas&gt;</a></span><span class="message">that's incorrect</span></div><div class="line" id="183712"><span class="nick" style="color:#6b8072"><a href="#183712" label="[18:37:12]">&lt;stikonas&gt;</a></span><span class="message">swap is not inside UpdateShiftRegister_DOT</span></div><div class="line" id="183755"><span class="nick" style="color:#6b8072"><a href="#183755" label="[18:37:55]">&lt;stikonas&gt;</a></span><span class="message">anyway, compiling</span></div><div class="line" id="184217"><span class="nick" style="color:#6b8072"><a href="#184217" label="[18:42:17]">&lt;stikonas&gt;</a></span><span class="message">no, I think I still get M2-Planet segfault</span></div><div class="line" id="184219"><span class="nick" style="color:#6b8072"><a href="#184219" label="[18:42:19]">&lt;stikonas&gt;</a></span><span class="message">let's fire gdb...</span></div><div class="line" id="184240"><span class="nick" style="color:#2e2a4a"><a href="#184240" label="[18:42:40]">&lt;oriansj&gt;</a></span><span class="message">new patch <a rel="nofollow" href="https://paste.debian.net/1214117/">https://paste.debian.net/1214117/</a> </span></div><div class="line" id="184302"><span class="nick" style="color:#2e2a4a"><a href="#184302" label="[18:43:02]">&lt;oriansj&gt;</a></span><span class="message">(also trying to clear out things that might cause issues with M0)</span></div><div class="line" id="184412"><span class="nick" style="color:#6b8072"><a href="#184412" label="[18:44:12]">&lt;stikonas&gt;</a></span><span class="message">yes, those would cauase issues with M0...</span></div><div class="line" id="184419"><span class="nick" style="color:#6b8072"><a href="#184419" label="[18:44:19]">&lt;stikonas&gt;</a></span><span class="message">although M1 which we use then is fine</span></div><div class="line" id="184519"><span class="nick" style="color:#2e2a4a"><a href="#184519" label="[18:45:19]">&lt;oriansj&gt;</a></span><span class="message">as now UpdateShiftRegister should not include any values exceeding 24bits</span></div><div class="line" id="184615"><span class="nick" style="color:#6b8072"><a href="#184615" label="[18:46:15]">&lt;stikonas&gt;</a></span><span class="message">I am seeing a couple of unrelated problems with my tests but maybe let's deal with hex2 first</span></div><div class="line" id="184624"><span class="nick" style="color:#6b8072"><a href="#184624" label="[18:46:24]">&lt;stikonas&gt;</a></span><span class="message">(those are kaem issues)</span></div><div class="line" id="184655"><span class="nick" style="color:#2e2a4a"><a href="#184655" label="[18:46:55]">&lt;oriansj&gt;</a></span><span class="message">easiest to solve one problem at a time</span></div><div class="line" id="184716"><span class="nick" style="color:#6b8072"><a href="#184716" label="[18:47:16]">&lt;stikonas&gt;</a></span><span class="message">indeed</span></div><div class="line" id="184738"><span class="nick" style="color:#2e2a4a"><a href="#184738" label="[18:47:38]">&lt;oriansj&gt;</a></span><span class="message">so new patch: fix or no fix?</span></div><div class="line" id="184740"><span class="nick" style="color:#6b8072"><a href="#184740" label="[18:47:40]">&lt;stikonas&gt;</a></span><span class="message">at least hex2-0 is not as slow as on aarch64</span></div><div class="line" id="184743"><span class="nick" style="color:#6b8072"><a href="#184743" label="[18:47:43]">&lt;stikonas&gt;</a></span><span class="message">still compiling</span></div><div class="line" id="184754"><span class="nick" style="color:#6b8072"><a href="#184754" label="[18:47:54]">&lt;stikonas&gt;</a></span><span class="message">it takes about 2 minutes for hex2-0 to link everything</span></div><div class="line" id="184802"><span class="nick" style="color:#6b8072"><a href="#184802" label="[18:48:02]">&lt;stikonas&gt;</a></span><span class="message">but better than 15 min on aarch64...</span></div><div class="line" id="184834"><span class="nick" style="color:#6b8072"><a href="#184834" label="[18:48:34]">&lt;stikonas&gt;</a></span><span class="message">GAS version of hex2 actually works much faster, maybe 10s</span></div><div class="line" id="184842"><span class="nick" style="color:#2e2a4a"><a href="#184842" label="[18:48:42]">&lt;oriansj&gt;</a></span><span class="message">well C-x e in bash really is so handy if one sets export EDITOR=emacs</span></div><div class="line" id="184843"><span class="nick" style="color:#6b8072"><a href="#184843" label="[18:48:43]">&lt;stikonas&gt;</a></span><span class="message">so qemu must be slowing things down</span></div><div class="line" id="184957"><span class="nick" style="color:#2e2a4a"><a href="#184957" label="[18:49:57]">&lt;oriansj&gt;</a></span><span class="message">(correction C-x C-e )</span></div><div class="line" id="185001"><span class="nick" style="color:#6b8072"><a href="#185001" label="[18:50:01]">&lt;stikonas&gt;</a></span><span class="message">no, still segfault...</span></div><div class="line" id="185014"><span class="nick" style="color:#6b8072"><a href="#185014" label="[18:50:14]">&lt;stikonas&gt;</a></span><span class="message">(when M2-Planet is built)</span></div><div class="line" id="185028"><span class="nick" style="color:#2e2a4a"><a href="#185028" label="[18:50:28]">&lt;oriansj&gt;</a></span><span class="message">and the test?</span></div><div class="line" id="185101"><span class="nick" style="color:#6b8072"><a href="#185101" label="[18:51:01]">&lt;stikonas&gt;</a></span><span class="message">test is now fine I think</span></div><div class="line" id="185108"><span class="nick" style="color:#6b8072"><a href="#185108" label="[18:51:08]">&lt;stikonas&gt;</a></span><span class="message">so probably this helps with hex2</span></div><div class="line" id="185125"><span class="nick" style="color:#2e2a4a"><a href="#185125" label="[18:51:25]">&lt;oriansj&gt;</a></span><span class="message">lets confirm and then isolate next possible problem</span></div><div class="line" id="185147"><span class="nick" style="color:#2e2a4a"><a href="#185147" label="[18:51:47]">&lt;oriansj&gt;</a></span><span class="message">I'll commit if it does fix the behavior in question</span></div><div class="line" id="185213"><span class="nick" style="color:#6b8072"><a href="#185213" label="[18:52:13]">&lt;stikonas&gt;</a></span><span class="message">yes, it looks like testcase is passign now</span></div><div class="line" id="185220"><span class="nick" style="color:#6b8072"><a href="#185220" label="[18:52:20]">&lt;stikonas&gt;</a></span><span class="message">yeah, let's push it</span></div><div class="line" id="185252"><span class="nick" style="color:#6b8072"><a href="#185252" label="[18:52:52]">&lt;stikonas&gt;</a></span><span class="message">when we had a lot of bugs, it's easy to confuse yourself...</span></div><div class="line" id="185342"><span class="nick" style="color:#2e2a4a"><a href="#185342" label="[18:53:42]">&lt;oriansj&gt;</a></span><span class="message">yep, now we are slowly knocking out the last</span></div><div class="line" id="185354"><span class="nick" style="color:#2e2a4a"><a href="#185354" label="[18:53:54]">&lt;oriansj&gt;</a></span><span class="message">of the RISC-V specific bugs</span></div><div class="line" id="185739"><span class="nick" style="color:#2e2a4a"><a href="#185739" label="[18:57:39]">&lt;oriansj&gt;</a></span><span class="message">So using gcc built M2-Planet, M1, blood-elf and hex2 compared against M2 built output, what is the first layer that is different?</span></div><div class="line" id="185749"><span class="nick" style="color:#2e2a4a"><a href="#185749" label="[18:57:49]">&lt;oriansj&gt;</a></span><span class="message">or is it identical all the way down to binary</span></div><div class="line" id="185908"><span class="nick" style="color:#2e2a4a"><a href="#185908" label="[18:59:08]">&lt;oriansj&gt;</a></span><span class="message">The first program that produces a difference is where we need to look for the next bug to crush</span></div><div class="line" id="185926"><span class="nick" style="color:#6b8072"><a href="#185926" label="[18:59:26]">&lt;stikonas&gt;</a></span><span class="message">M2.m1 is the same</span></div><div class="line" id="185950"><span class="nick" style="color:#2e2a4a"><a href="#185950" label="[18:59:50]">&lt;oriansj&gt;</a></span><span class="message">good</span></div><div class="line" id="190154"><span class="nick" style="color:#6b8072"><a href="#190154" label="[19:01:54]">&lt;stikonas&gt;</a></span><span class="message">hold produced by M1 is the same too</span></div><div class="line" id="190156"><span class="nick" style="color:#6b8072"><a href="#190156" label="[19:01:56]">&lt;stikonas&gt;</a></span><span class="message">ok, that's good</span></div><div class="line" id="190335"><span class="nick" style="color:#2e2a4a"><a href="#190335" label="[19:03:35]">&lt;oriansj&gt;</a></span><span class="message">so another hex2 bug or matching binaries?</span></div><div class="line" id="190339"><span class="nick" style="color:#6b8072"><a href="#190339" label="[19:03:39]">&lt;stikonas&gt;</a></span><span class="message">ok, another hex2 bug</span></div><div class="line" id="190342"><span class="nick" style="color:#6b8072"><a href="#190342" label="[19:03:42]">&lt;stikonas&gt;</a></span><span class="message">binaries are different</span></div><div class="line" id="190345"><span class="nick" style="color:#6b8072"><a href="#190345" label="[19:03:45]">&lt;stikonas&gt;</a></span><span class="message">let's see diff</span></div><div class="line" id="190431"><span class="nick" style="color:#6b8072"><a href="#190431" label="[19:04:31]">&lt;stikonas&gt;</a></span><span class="message">another addiw issue...</span></div><div class="line" id="190509"><span class="nick" style="color:#2e2a4a"><a href="#190509" label="[19:05:09]">&lt;oriansj&gt;</a></span><span class="message">did you update the C source for hex2?</span></div><div class="line" id="190523"><span class="nick" style="color:#6b8072"><a href="#190523" label="[19:05:23]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1214118/">https://paste.debian.net/1214118/</a> </span></div><div class="line" id="190530"><span class="nick" style="color:#6b8072"><a href="#190530" label="[19:05:30]">&lt;stikonas&gt;</a></span><span class="message">yes, I pulled in mescc-tools</span></div><div class="line" id="190534"><span class="nick" style="color:#6b8072"><a href="#190534" label="[19:05:34]">&lt;stikonas&gt;</a></span><span class="message">into stage0-posix</span></div><div class="line" id="190624"><span class="nick" style="color:#6b8072"><a href="#190624" label="[19:06:24]">&lt;stikonas&gt;</a></span><span class="message">(--- is the correctly behaving binary, +++ is bootstrapped)</span></div><div class="line" id="190833"><span class="nick" style="color:#6b8072"><a href="#190833" label="[19:08:33]">&lt;stikonas&gt;</a></span><span class="message">probably if ((value &amp; 0xFFF) &lt; 0x800) tempword = value &amp; (0xFFFFF &lt;&lt; 12);</span></div><div class="line" id="190844"><span class="nick" style="color:#6b8072"><a href="#190844" label="[19:08:44]">&lt;stikonas&gt;</a></span><span class="message">if value is still 64-bit in the register</span></div><div class="line" id="190903"><span class="nick" style="color:#6b8072"><a href="#190903" label="[19:09:03]">&lt;stikonas&gt;</a></span><span class="message">that would still trigger what we see</span></div><div class="line" id="191242"><span class="nick" style="color:#2e2a4a"><a href="#191242" label="[19:12:42]">&lt;oriansj&gt;</a></span><span class="message">yet (0xFFFFF &lt;&lt; 12) can only be a 32bit value</span></div><div class="line" id="191257"><span class="nick" style="color:#2e2a4a"><a href="#191257" label="[19:12:57]">&lt;oriansj&gt;</a></span><span class="message">with the top 32bits being zero</span></div><div class="line" id="191332"><span class="nick" style="color:#6b8072"><a href="#191332" label="[19:13:32]">&lt;stikonas&gt;</a></span><span class="message">hmm, that's true...</span></div><div class="line" id="192230"><span class="nick" style="color:#6b8072"><a href="#192230" label="[19:22:30]">&lt;stikonas&gt;</a></span><span class="message">then problem must be somewhere else</span></div><div class="line" id="192231"><span class="nick" style="color:#6b8072"><a href="#192231" label="[19:22:31]">&lt;stikonas&gt;</a></span><span class="message">strange...</span></div><div class="line" id="192242"><span class="nick" style="color:#6b8072"><a href="#192242" label="[19:22:42]">&lt;stikonas&gt;</a></span><span class="message">I don't see anything else that might go wrong in UpdateShiftRegister</span></div><div class="line" id="192951"><span class="nick" style="color:#2e2a4a"><a href="#192951" label="[19:29:51]">&lt;oriansj&gt;</a></span><span class="message">So let us isolate a test</span></div><div class="line" id="193226"><span class="nick" style="color:#6b8072"><a href="#193226" label="[19:32:26]">&lt;stikonas&gt;</a></span><span class="message">oriansj: ok, I have a patch that fixes it...</span></div><div class="line" id="193234"><span class="nick" style="color:#2e2a4a"><a href="#193234" label="[19:32:34]">&lt;oriansj&gt;</a></span><span class="message">nice</span></div><div class="line" id="193252"><span class="nick" style="color:#6b8072"><a href="#193252" label="[19:32:52]">&lt;stikonas&gt;</a></span><span class="message">might want to figure out a smaller set</span></div><div class="line" id="193255"><span class="nick" style="color:#6b8072"><a href="#193255" label="[19:32:55]">&lt;stikonas&gt;</a></span><span class="message">but this fixes:</span></div><div class="line" id="193328"><span class="nick" style="color:#6b8072"><a href="#193328" label="[19:33:28]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1214122/">https://paste.debian.net/1214122/</a> </span></div><div class="line" id="193346"><span class="nick" style="color:#6b8072"><a href="#193346" label="[19:33:46]">&lt;stikonas&gt;</a></span><span class="message">((0xFFFF &lt;&lt; 16) + 0xFFFF) might be a bit over the top, I can try 0xFFFFFFFF</span></div><div class="line" id="193546"><span class="nick" style="color:#2e2a4a"><a href="#193546" label="[19:35:46]">&lt;oriansj&gt;</a></span><span class="message">(0xFFFF &lt;&lt; 16) | 0xFFFF will always be exactly 32bits of 0xFFFFFFFF</span></div><div class="line" id="193624"><span class="nick" style="color:#6b8072"><a href="#193624" label="[19:36:24]">&lt;stikonas&gt;</a></span><span class="message">yaeh, bitwise or is faster...</span></div><div class="line" id="193635"><span class="nick" style="color:#2e2a4a"><a href="#193635" label="[19:36:35]">&lt;oriansj&gt;</a></span><span class="message">and can't overflow</span></div><div class="line" id="193644"><span class="nick" style="color:#2e2a4a"><a href="#193644" label="[19:36:44]">&lt;oriansj&gt;</a></span><span class="message">even accidentially</span></div><div class="line" id="193847"><span class="nick" style="color:#6b8072"><a href="#193847" label="[19:38:47]">&lt;stikonas&gt;</a></span><span class="message">and 0xFFFFFFFF does not work</span></div><div class="line" id="193941"><span class="nick" style="color:#6b8072"><a href="#193941" label="[19:39:41]">&lt;stikonas&gt;</a></span><span class="message">which is that 32-bit loading bug</span></div><div class="line" id="194025"><span class="nick" style="color:#2e2a4a"><a href="#194025" label="[19:40:25]">&lt;oriansj&gt;</a></span><span class="message">until I teach M2-Planet to properly deal with 16, 32 and 64bit integer types</span></div><div class="line" id="194118"><span class="nick" style="color:#6b8072"><a href="#194118" label="[19:41:18]">&lt;stikonas&gt;</a></span><span class="message">well, we have something that works...</span></div><div class="line" id="194129"><span class="nick" style="color:#6b8072"><a href="#194129" label="[19:41:29]">&lt;stikonas&gt;</a></span><span class="message">just doing final test with &amp; ((0xFFFF &lt;&lt; 16) | 0xFFFF);</span></div><div class="line" id="194132"><span class="nick" style="color:#6b8072"><a href="#194132" label="[19:41:32]">&lt;stikonas&gt;</a></span><span class="message">and then you can push it</span></div><div class="line" id="194143"><span class="nick" style="color:#6b8072"><a href="#194143" label="[19:41:43]">&lt;stikonas&gt;</a></span><span class="message">or I can make a PR...</span></div><div class="line" id="194207"><span class="nick" style="color:#2e2a4a"><a href="#194207" label="[19:42:07]">&lt;oriansj&gt;</a></span><span class="message">however you prefer as RISC-V is your success</span></div><div class="line" id="194318"><span class="nick" style="color:#6b8072"><a href="#194318" label="[19:43:18]">&lt;stikonas&gt;</a></span><span class="message">well, you did a lot of work too. Anyway, it works and I have change locally</span></div><div class="line" id="194323"><span class="nick" style="color:#6b8072"><a href="#194323" label="[19:43:23]">&lt;stikonas&gt;</a></span><span class="message">so might be quicker to commit</span></div><div class="line" id="194451"><span class="nick" style="color:#2e2a4a"><a href="#194451" label="[19:44:51]">&lt;oriansj&gt;</a></span><span class="message">I'm just happy to see stage0 continue to make progress in ways previously thought impossible ^_^</span></div><div class="line" id="194523"><span class="nick" style="color:#6b8072"><a href="#194523" label="[19:45:23]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/pull/25">https://github.com/oriansj/mescc-tools/pull/25</a> </span></div><div class="line" id="194552"><span class="nick" style="color:#6b8072"><a href="#194552" label="[19:45:52]">&lt;stikonas&gt;</a></span><span class="message">well, with risc-v we had to add word-based M1 syntax</span></div><div class="line" id="194559"><span class="nick" style="color:#6b8072"><a href="#194559" label="[19:45:59]">&lt;stikonas&gt;</a></span><span class="message">which was slightly annoying to implement</span></div><div class="line" id="194559"><span class="nick" style="color:#2e2a4a"><a href="#194559" label="[19:45:59]">&lt;oriansj&gt;</a></span><span class="message">merged</span></div><div class="line" id="194603"><span class="nick" style="color:#6b8072"><a href="#194603" label="[19:46:03]">&lt;stikonas&gt;</a></span><span class="message">but is starting to work</span></div><div class="line" id="194658"><span class="nick" style="color:#2e2a4a"><a href="#194658" label="[19:46:58]">&lt;oriansj&gt;</a></span><span class="message">and once solid enough it'll enable MesCC to finally be able to support RISC-V</span></div><div class="line" id="194713"><span class="nick" style="color:#6b8072"><a href="#194713" label="[19:47:13]">&lt;stikonas&gt;</a></span><span class="message">well, mescc needs porting too</span></div><div class="line" id="194716"><span class="nick" style="color:#6b8072"><a href="#194716" label="[19:47:16]">&lt;stikonas&gt;</a></span><span class="message">but it will be easier now</span></div><div class="line" id="194729"><span class="nick" style="color:#6b8072"><a href="#194729" label="[19:47:29]">&lt;stikonas&gt;</a></span><span class="message">the tools have some testing in the field</span></div><div class="line" id="194743"><span class="nick" style="color:#2e2a4a"><a href="#194743" label="[19:47:43]">&lt;oriansj&gt;</a></span><span class="message">and syntax details have been worked out</span></div><div class="line" id="194744"><span class="nick" style="color:#6b8072"><a href="#194744" label="[19:47:44]">&lt;stikonas&gt;</a></span><span class="message">not just written speculatively and hoping that it would work</span></div><div class="line" id="194809"><span class="nick" style="color:#6b8072"><a href="#194809" label="[19:48:09]">&lt;stikonas&gt;</a></span><span class="message">hmm, cd doesn't seem to work in kaem... should check M2libc function</span></div><div class="line" id="195229"><span class="nick" style="color:#6b8072"><a href="#195229" label="[19:52:29]">&lt;stikonas&gt;</a></span><span class="message">oh, I'm misreading things again :(. It's not cd but blood-elf needing new flags</span></div><div class="line" id="195440"><span class="nick" style="color:#2e2a4a"><a href="#195440" label="[19:54:40]">&lt;oriansj&gt;</a></span><span class="message">yep, I'm updating x86 blood-elf flags right now, then I'll be doing the AMD64 and then AArch64</span></div><div class="line" id="195645"><span class="nick" style="color:#6b8072"><a href="#195645" label="[19:56:45]">&lt;stikonas&gt;</a></span><span class="message">yep, everything seems to build</span></div><div class="line" id="195707"><span class="nick" style="color:#6b8072"><a href="#195707" label="[19:57:07]">&lt;stikonas&gt;</a></span><span class="message">need to add another ${ENDIANESS_FLAG} in mescc-tools-extra.kaem file</span></div><div class="line" id="195821"><span class="nick" style="color:#2e2a4a"><a href="#195821" label="[19:58:21]">&lt;oriansj&gt;</a></span><span class="message">well ENDIANESS will be the same for hex2, M1 and blood-elf and the flags are identical for all tools</span></div><div class="line" id="195824"><span class="nick" style="color:#6b8072"><a href="#195824" label="[19:58:24]">&lt;stikonas&gt;</a></span><span class="message">although, I have a very strange problem with kaem-minimal</span></div><div class="line" id="195846"><span class="nick" style="color:#6b8072"><a href="#195846" label="[19:58:46]">&lt;stikonas&gt;</a></span><span class="message">I added ../bin/kaem --verbose --strict -f mescc-tools-full-kaem.kaem</span></div><div class="line" id="195853"><span class="nick" style="color:#6b8072"><a href="#195853" label="[19:58:53]">&lt;stikonas&gt;</a></span><span class="message">and it fails to run</span></div><div class="line" id="195906"><span class="nick" style="color:#6b8072"><a href="#195906" label="[19:59:06]">&lt;stikonas&gt;</a></span><span class="message">prints it but doesn't seem to run</span></div><div class="line" id="200051"><span class="nick" style="color:#2e2a4a"><a href="#200051" label="[20:00:51]">&lt;oriansj&gt;</a></span><span class="message">well sanity check with the gcc built kaem to see if it would run without issue. Then we can see if we found a new issue</span></div><div class="line" id="200159"><span class="nick" style="color:#6b8072"><a href="#200159" label="[20:01:59]">&lt;stikonas&gt;</a></span><span class="message">full kaem works</span></div><div class="line" id="200205"><span class="nick" style="color:#6b8072"><a href="#200205" label="[20:02:05]">&lt;stikonas&gt;</a></span><span class="message">that's kaem-minimal bug</span></div><div class="line" id="200209"><span class="nick" style="color:#6b8072"><a href="#200209" label="[20:02:09]">&lt;stikonas&gt;</a></span><span class="message">the one written in hex0...</span></div><div class="line" id="200215"><span class="nick" style="color:#6b8072"><a href="#200215" label="[20:02:15]">&lt;stikonas&gt;</a></span><span class="message">I can test GAS prototype</span></div><div class="line" id="200302"><span class="nick" style="color:#6b8072"><a href="#200302" label="[20:03:02]">&lt;stikonas&gt;</a></span><span class="message">GAS version has the problem</span></div><div class="line" id="200311"><span class="nick" style="color:#6b8072"><a href="#200311" label="[20:03:11]">&lt;stikonas&gt;</a></span><span class="message">so a bug must be in the logic</span></div><div class="line" id="200332"><span class="nick" style="color:#6b8072"><a href="#200332" label="[20:03:32]">&lt;stikonas&gt;</a></span><span class="message">well, I can try high level prototype</span></div><div class="line" id="200353"><span class="nick" style="color:#6b8072"><a href="#200353" label="[20:03:53]">&lt;stikonas&gt;</a></span><span class="message">oh, that one works</span></div><div class="line" id="200609"><span class="nick" style="color:#6b8072"><a href="#200609" label="[20:06:09]">&lt;stikonas&gt;</a></span><span class="message">and I think another bug is that kaem-minimal on riscv64 does not stop if child segfaults...</span></div><div class="line" id="200815"><span class="nick" style="color:#2e2a4a"><a href="#200815" label="[20:08:15]">&lt;oriansj&gt;</a></span><span class="message">good find</span></div><div class="line" id="201153"><span class="nick" style="color:#6b8072"><a href="#201153" label="[20:11:53]">&lt;stikonas&gt;</a></span><span class="message">ok, first issue is probably a bug in my kaem-minimal assembly</span></div><div class="line" id="201202"><span class="nick" style="color:#6b8072"><a href="#201202" label="[20:12:02]">&lt;stikonas&gt;</a></span><span class="message">looks like it does not pass through any shell variables</span></div><div class="line" id="201218"><span class="nick" style="color:#6b8072"><a href="#201218" label="[20:12:18]">&lt;stikonas&gt;</a></span><span class="message">so full kaem just exists</span></div><div class="line" id="201242"><span class="nick" style="color:#6b8072"><a href="#201242" label="[20:12:42]">&lt;stikonas&gt;</a></span><span class="message">that's the only difference I can see from strace</span></div><div class="line" id="201417"><span class="nick" style="color:#2e2a4a"><a href="#201417" label="[20:14:17]">&lt;oriansj&gt;</a></span><span class="message">well kaem should function just fine without any shell variables</span></div><div class="line" id="201419"><span class="nick" style="color:#6b8072"><a href="#201419" label="[20:14:19]">&lt;stikonas&gt;</a></span><span class="message">I guess that's a bug in kaem.c actually</span></div><div class="line" id="201420"><span class="nick" style="color:#6b8072"><a href="#201420" label="[20:14:20]">&lt;stikonas&gt;</a></span><span class="message">yes...</span></div><div class="line" id="201423"><span class="nick" style="color:#6b8072"><a href="#201423" label="[20:14:23]">&lt;stikonas&gt;</a></span><span class="message">env -i ../bin/kaem --verbose --strict --file mescc-tools-full-kaem.kaem</span></div><div class="line" id="201425"><span class="nick" style="color:#6b8072"><a href="#201425" label="[20:14:25]">&lt;stikonas&gt;</a></span><span class="message">segfaults</span></div><div class="line" id="201436"><span class="nick" style="color:#2e2a4a"><a href="#201436" label="[20:14:36]">&lt;oriansj&gt;</a></span><span class="message">it is literally the standard nightmare-mode</span></div><div class="line" id="201455"><span class="nick" style="color:#2e2a4a"><a href="#201455" label="[20:14:55]">&lt;oriansj&gt;</a></span><span class="message">(or bootstrap mode)</span></div><div class="line" id="201511"><span class="nick" style="color:#2e2a4a"><a href="#201511" label="[20:15:11]">&lt;oriansj&gt;</a></span><span class="message">as one can't expect an environment when starting from kaem-optional</span></div><div class="line" id="201526"><span class="nick" style="color:#6b8072"><a href="#201526" label="[20:15:26]">&lt;stikonas&gt;</a></span><span class="message">oh, there is kaem -i flag</span></div><div class="line" id="201537"><span class="nick" style="color:#6b8072"><a href="#201537" label="[20:15:37]">&lt;stikonas&gt;</a></span><span class="message">which prevents reading environment</span></div><div class="line" id="201549"><span class="nick" style="color:#2e2a4a"><a href="#201549" label="[20:15:49]">&lt;oriansj&gt;</a></span><span class="message">--init-mode</span></div><div class="line" id="201601"><span class="nick" style="color:#6b8072"><a href="#201601" label="[20:16:01]">&lt;stikonas&gt;</a></span><span class="message">yes...</span></div><div class="line" id="201612"><span class="nick" style="color:#6b8072"><a href="#201612" label="[20:16:12]">&lt;stikonas&gt;</a></span><span class="message">although still, populate_env shouldn't crash on empty environment</span></div><div class="line" id="201654"><span class="nick" style="color:#2e2a4a"><a href="#201654" label="[20:16:54]">&lt;oriansj&gt;</a></span><span class="message">well there is an easy way to check to see if it is</span></div><div class="line" id="201808"><span class="nick" style="color:#2e2a4a"><a href="#201808" label="[20:18:08]">&lt;oriansj&gt;</a></span><span class="message">set --init-mode and see if it clears out the issue</span></div><div class="line" id="201905"><span class="nick" style="color:#6b8072"><a href="#201905" label="[20:19:05]">&lt;stikonas&gt;</a></span><span class="message">yes, I already tried</span></div><div class="line" id="201907"><span class="nick" style="color:#6b8072"><a href="#201907" label="[20:19:07]">&lt;stikonas&gt;</a></span><span class="message">init mode works</span></div><div class="line" id="201913"><span class="nick" style="color:#6b8072"><a href="#201913" label="[20:19:13]">&lt;stikonas&gt;</a></span><span class="message">I'm just looking at what's causing thecrash</span></div><div class="line" id="201930"><span class="nick" style="color:#6b8072"><a href="#201930" label="[20:19:30]">&lt;stikonas&gt;</a></span><span class="message">it crashes in while loop</span></div><div class="line" id="201931"><span class="nick" style="color:#6b8072"><a href="#201931" label="[20:19:31]">&lt;stikonas&gt;</a></span><span class="message">while(n-&gt;next-&gt;var != NULL) n = n-&gt;next;</span></div><div class="line" id="201952"><span class="nick" style="color:#6b8072"><a href="#201952" label="[20:19:52]">&lt;stikonas&gt;</a></span><span class="message">well, n is env</span></div><div class="line" id="201958"><span class="nick" style="color:#6b8072"><a href="#201958" label="[20:19:58]">&lt;stikonas&gt;</a></span><span class="message">so if env is NULL, then yes...</span></div><div class="line" id="202001"><span class="nick" style="color:#6b8072"><a href="#202001" label="[20:20:01]">&lt;stikonas&gt;</a></span><span class="message">that would crash it</span></div><div class="line" id="202038"><span class="nick" style="color:#2e2a4a"><a href="#202038" label="[20:20:38]">&lt;oriansj&gt;</a></span><span class="message">guess we need a single require in populate_env</span></div><div class="line" id="202117"><span class="nick" style="color:#2e2a4a"><a href="#202117" label="[20:21:17]">&lt;oriansj&gt;</a></span><span class="message">just require(NULL != envp, &quot;should not have received a NULL environment&quot;);</span></div><div class="line" id="202134"><span class="nick" style="color:#6b8072"><a href="#202134" label="[20:21:34]">&lt;stikonas&gt;</a></span><span class="message">wel, that would alert user...</span></div><div class="line" id="202134"><span class="nick" style="color:#2e2a4a"><a href="#202134" label="[20:21:34]">&lt;oriansj&gt;</a></span><span class="message">or return depending how you wish to treat a null envp</span></div><div class="line" id="202138"><span class="nick" style="color:#6b8072"><a href="#202138" label="[20:21:38]">&lt;stikonas&gt;</a></span><span class="message">but cna we not deal iwth it?</span></div><div class="line" id="202140"><span class="nick" style="color:#6b8072"><a href="#202140" label="[20:21:40]">&lt;stikonas&gt;</a></span><span class="message">exactly</span></div><div class="line" id="202150"><span class="nick" style="color:#6b8072"><a href="#202150" label="[20:21:50]">&lt;stikonas&gt;</a></span><span class="message">just add if ( n != NULL)</span></div><div class="line" id="202207"><span class="nick" style="color:#6b8072"><a href="#202207" label="[20:22:07]">&lt;stikonas&gt;</a></span><span class="message">well, maybe let's ask fossy</span></div><div class="line" id="202217"><span class="nick" style="color:#2e2a4a"><a href="#202217" label="[20:22:17]">&lt;oriansj&gt;</a></span><span class="message">yeah if(NULL == envp) return will do the correct thing</span></div><div class="line" id="202218"><span class="nick" style="color:#6b8072"><a href="#202218" label="[20:22:18]">&lt;stikonas&gt;</a></span><span class="message">fossy did a lot of work on kaem too</span></div><div class="line" id="202254"><span class="nick" style="color:#2e2a4a"><a href="#202254" label="[20:22:54]">&lt;oriansj&gt;</a></span><span class="message">yep, fossy took my minimal kaem and made it into a much more real shell</span></div><div class="line" id="202316"><span class="nick" style="color:#2e2a4a"><a href="#202316" label="[20:23:16]">&lt;oriansj&gt;</a></span><span class="message">impressive work honestly given the bugs of M2-Planet back then</span></div><div class="line" id="202424"><span class="nick" style="color:#6b8072"><a href="#202424" label="[20:24:24]">&lt;stikonas&gt;</a></span><span class="message">yeah, it might benefit from a few other improvements but it's quite impressive now for such small piece of software</span></div><div class="line" id="202429"><span class="nick" style="color:#6b8072"><a href="#202429" label="[20:24:29]">&lt;stikonas&gt;</a></span><span class="message">e.g. exec more might be nice</span></div><div class="line" id="202439"><span class="nick" style="color:#6b8072"><a href="#202439" label="[20:24:39]">&lt;stikonas&gt;</a></span><span class="message">for chaining into thte next script</span></div><div class="line" id="202456"><span class="nick" style="color:#6b8072"><a href="#202456" label="[20:24:56]">&lt;stikonas&gt;</a></span><span class="message">now live-bootstrap ends up with loads of kaem processes waiting</span></div><div class="line" id="202502"><span class="nick" style="color:#6b8072"><a href="#202502" label="[20:25:02]">&lt;stikonas&gt;</a></span><span class="message">kaem-micro actually does the right thing</span></div><div class="line" id="202611"><span class="nick" style="color:#2e2a4a"><a href="#202611" label="[20:26:11]">&lt;oriansj&gt;</a></span><span class="message">and fix for kaem is up</span></div><div class="line" id="202657"><span class="nick" style="color:#6b8072"><a href="#202657" label="[20:26:57]">&lt;stikonas&gt;</a></span><span class="message">ok, testing it</span></div><div class="line" id="202735"><span class="nick" style="color:#2e2a4a"><a href="#202735" label="[20:27:35]">&lt;oriansj&gt;</a></span><span class="message">it is kinda amazing how well a buggy C compiler's output hangs together.</span></div><div class="line" id="202815"><span class="nick" style="color:#6b8072"><a href="#202815" label="[20:28:15]">&lt;stikonas&gt;</a></span><span class="message">indeed...</span></div><div class="line" id="202831"><span class="nick" style="color:#6b8072"><a href="#202831" label="[20:28:31]">&lt;stikonas&gt;</a></span><span class="message">it's far simpler than what I imagined C compiler would be</span></div><div class="line" id="202836"><span class="nick" style="color:#6b8072"><a href="#202836" label="[20:28:36]">&lt;stikonas&gt;</a></span><span class="message">and works alrightish</span></div><div class="line" id="202857"><span class="nick" style="color:#6b8072"><a href="#202857" label="[20:28:57]">&lt;stikonas&gt;</a></span><span class="message">needs some workarounds in C but definitely easier to write than assembly</span></div><div class="line" id="202907"><span class="nick" style="color:#2e2a4a"><a href="#202907" label="[20:29:07]">&lt;oriansj&gt;</a></span><span class="message">good enough to bootstrap GCC</span></div><div class="line" id="202924"><span class="nick" style="color:#6b8072"><a href="#202924" label="[20:29:24]">&lt;stikonas&gt;</a></span><span class="message">well, at least mes as a first stage</span></div><div class="line" id="202955"><span class="nick" style="color:#6b8072"><a href="#202955" label="[20:29:55]">&lt;stikonas&gt;</a></span><span class="message">outch, it still segfaults</span></div><div class="line" id="202958"><span class="nick" style="color:#2e2a4a"><a href="#202958" label="[20:29:58]">&lt;oriansj&gt;</a></span><span class="message">in contrast with scheme/lisp interpreters which are *VERY* touchy (especially in regards to garbage collection)</span></div><div class="line" id="203041"><span class="nick" style="color:#6b8072"><a href="#203041" label="[20:30:41]">&lt;stikonas&gt;</a></span><span class="message">so envp must not be NULL then...</span></div><div class="line" id="203200"><span class="nick" style="color:#6b8072"><a href="#203200" label="[20:32:00]">&lt;stikonas&gt;</a></span><span class="message">it's probably treated as empty array</span></div><div class="line" id="203310"><span class="nick" style="color:#6b8072"><a href="#203310" label="[20:33:10]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I think you need a * before envp there</span></div><div class="line" id="203328"><span class="nick" style="color:#6b8072"><a href="#203328" label="[20:33:28]">&lt;stikonas&gt;</a></span><span class="message">if(NULL == *envp) return;</span></div><div class="line" id="203427"><span class="nick" style="color:#2e2a4a"><a href="#203427" label="[20:34:27]">&lt;oriansj&gt;</a></span><span class="message">that would be if envp[0] was null</span></div><div class="line" id="203433"><span class="nick" style="color:#2e2a4a"><a href="#203433" label="[20:34:33]">&lt;oriansj&gt;</a></span><span class="message">but envp wasn't null</span></div><div class="line" id="203435"><span class="nick" style="color:#6b8072"><a href="#203435" label="[20:34:35]">&lt;stikonas&gt;</a></span><span class="message">oh, but does M2-planet support *envp</span></div><div class="line" id="203437"><span class="nick" style="color:#6b8072"><a href="#203437" label="[20:34:37]">&lt;stikonas&gt;</a></span><span class="message">?</span></div><div class="line" id="203442"><span class="nick" style="color:#6b8072"><a href="#203442" label="[20:34:42]">&lt;stikonas&gt;</a></span><span class="message">probably not</span></div><div class="line" id="203446"><span class="nick" style="color:#2e2a4a"><a href="#203446" label="[20:34:46]">&lt;oriansj&gt;</a></span><span class="message">yes it does</span></div><div class="line" id="203450"><span class="nick" style="color:#6b8072"><a href="#203450" label="[20:34:50]">&lt;stikonas&gt;</a></span><span class="message">well, envp[0[ would work</span></div><div class="line" id="203452"><span class="nick" style="color:#6b8072"><a href="#203452" label="[20:34:52]">&lt;stikonas&gt;</a></span><span class="message">oh ok</span></div><div class="line" id="203523"><span class="nick" style="color:#2e2a4a"><a href="#203523" label="[20:35:23]">&lt;oriansj&gt;</a></span><span class="message">but not *foo = *bar; silliness</span></div><div class="line" id="203531"><span class="nick" style="color:#6b8072"><a href="#203531" label="[20:35:31]">&lt;stikonas&gt;</a></span><span class="message">ok</span></div><div class="line" id="203617"><span class="nick" style="color:#6b8072"><a href="#203617" label="[20:36:17]">&lt;stikonas&gt;</a></span><span class="message">so I think riscv64 is almost done then</span></div><div class="line" id="203622"><span class="nick" style="color:#2e2a4a"><a href="#203622" label="[20:36:22]">&lt;oriansj&gt;</a></span><span class="message">and honestly *envp is probably the wrong thing everytime its written</span></div><div class="line" id="203629"><span class="nick" style="color:#6b8072"><a href="#203629" label="[20:36:29]">&lt;stikonas&gt;</a></span><span class="message">I guess I'll leave riscv32 for somebody else to do :)</span></div><div class="line" id="203637"><span class="nick" style="color:#2e2a4a"><a href="#203637" label="[20:36:37]">&lt;oriansj&gt;</a></span><span class="message">completely fair</span></div><div class="line" id="203654"><span class="nick" style="color:#6b8072"><a href="#203654" label="[20:36:54]">&lt;stikonas&gt;</a></span><span class="message">would be far easier exervice</span></div><div class="line" id="203658"><span class="nick" style="color:#6b8072"><a href="#203658" label="[20:36:58]">&lt;stikonas&gt;</a></span><span class="message">exercise</span></div><div class="line" id="203810"><span class="nick" style="color:#2e2a4a"><a href="#203810" label="[20:38:10]">&lt;oriansj&gt;</a></span><span class="message">possibly depending on the amount of differences</span></div><div class="line" id="203821"><span class="nick" style="color:#2e2a4a"><a href="#203821" label="[20:38:21]">&lt;oriansj&gt;</a></span><span class="message">and how skilled the developer is in assembly</span></div><div class="line" id="203830"><span class="nick" style="color:#2e2a4a"><a href="#203830" label="[20:38:30]">&lt;oriansj&gt;</a></span><span class="message">but a good learning experience none the less</span></div><div class="line" id="203948"><span class="nick" style="color:#2e2a4a"><a href="#203948" label="[20:39:48]">&lt;oriansj&gt;</a></span><span class="message">x86 and AMD64 done. Just need to do AArch64</span></div><div class="line" id="204116"><span class="nick" style="color:#6b8072"><a href="#204116" label="[20:41:16]">&lt;stikonas&gt;</a></span><span class="message">will you then update M2-Planet submodule?</span></div><div class="line" id="204130"><span class="nick" style="color:#6b8072"><a href="#204130" label="[20:41:30]">&lt;stikonas&gt;</a></span><span class="message">(and mescc-tools)</span></div><div class="line" id="204143"><span class="nick" style="color:#6b8072"><a href="#204143" label="[20:41:43]">&lt;stikonas&gt;</a></span><span class="message">I can then submit remaining kaem scripts to build remaining binaries</span></div><div class="line" id="204156"><span class="nick" style="color:#6b8072"><a href="#204156" label="[20:41:56]">&lt;stikonas&gt;</a></span><span class="message">ok and envp[0] works</span></div><div class="line" id="204221"><span class="nick" style="color:#6b8072"><a href="#204221" label="[20:42:21]">&lt;stikonas&gt;</a></span><span class="message">so you need if(NULL == envp[0]) return;</span></div><div class="line" id="204324"><span class="nick" style="color:#6b8072"><a href="#204324" label="[20:43:24]">&lt;stikonas&gt;</a></span><span class="message">riscv32 probably has very few differences... It's mostly using lw, sw instead of ld, sd and in some places 32-bit specific issues (pointers are 4-bit long, rather than 8-bit)</span></div><div class="line" id="204351"><span class="nick" style="color:#2e2a4a"><a href="#204351" label="[20:43:51]">&lt;oriansj&gt;</a></span><span class="message">will do that once I verify AArch64 is good</span></div><div class="line" id="204402"><span class="nick" style="color:#6b8072"><a href="#204402" label="[20:44:02]">&lt;stikonas&gt;</a></span><span class="message">ok, thanks</span></div><div class="line" id="204656"><span class="nick" style="color:#6b8072"><a href="#204656" label="[20:46:56]">&lt;stikonas&gt;</a></span><span class="message">AArrch64 must be slow to test...</span></div><div class="line" id="204715"><span class="nick" style="color:#6b8072"><a href="#204715" label="[20:47:15]">&lt;stikonas&gt;</a></span><span class="message">if you are running on qemu user mode</span></div><div class="line" id="204739"><span class="nick" style="color:#8dd3c7"><a href="#204739" label="[20:47:39]">&lt;xentrac&gt;</a></span><span class="message">4-byte rather than 8-byte?</span></div><div class="line" id="204758"><span class="nick" style="color:#2e2a4a"><a href="#204758" label="[20:47:58]">&lt;oriansj&gt;</a></span><span class="message">64bits is 8bytes 32bits is 4bytes</span></div><div class="line" id="204824"><span class="nick" style="color:#2e2a4a"><a href="#204824" label="[20:48:24]">&lt;oriansj&gt;</a></span><span class="message">stikonas: very slow, so I avoid changing it when possible</span></div><div class="line" id="204846"><span class="nick" style="color:#2e2a4a"><a href="#204846" label="[20:48:46]">&lt;oriansj&gt;</a></span><span class="message">but I probably need to byte the bullet and fix the hex2 performance</span></div><div class="line" id="204929"><span class="nick" style="color:#8dd3c7"><a href="#204929" label="[20:49:29]">&lt;xentrac&gt;</a></span><span class="message">heh</span></div><div class="line" id="204939"><span class="nick" style="color:#6b8072"><a href="#204939" label="[20:49:39]">&lt;stikonas&gt;</a></span><span class="message">yes, of course bytes...</span></div><div class="line" id="204942"><span class="nick" style="color:#8dd3c7"><a href="#204942" label="[20:49:42]">&lt;xentrac&gt;</a></span><span class="message">just a matter of buffering?</span></div><div class="line" id="204955"><span class="nick" style="color:#2e2a4a"><a href="#204955" label="[20:49:55]">&lt;oriansj&gt;</a></span><span class="message">xentrac: pointer size is register size</span></div><div class="line" id="204956"><span class="nick" style="color:#6b8072"><a href="#204956" label="[20:49:56]">&lt;stikonas&gt;</a></span><span class="message">xentrac: it's due to qemu issuing a lot of other syscalls</span></div><div class="line" id="205014"><span class="nick" style="color:#6b8072"><a href="#205014" label="[20:50:14]">&lt;stikonas&gt;</a></span><span class="message">and context switches are slow</span></div><div class="line" id="205057"><span class="nick" style="color:#2e2a4a"><a href="#205057" label="[20:50:57]">&lt;oriansj&gt;</a></span><span class="message">hence a huge performance difference between hand written hex2 and M2-Planet hex2 (with M2-Planet's output being an order of magnitude faster)</span></div><div class="line" id="205059"><span class="nick" style="color:#6b8072"><a href="#205059" label="[20:50:59]">&lt;stikonas&gt;</a></span><span class="message">so by moving io buffer to stack, I was able to achieve 8x speedup</span></div><div class="line" id="205126"><span class="nick" style="color:#6b8072"><a href="#205126" label="[20:51:26]">&lt;stikonas&gt;</a></span><span class="message">well, it's mostly because that hex2 is buitlt with blood-elf</span></div><div class="line" id="205201"><span class="nick" style="color:#2e2a4a"><a href="#205201" label="[20:52:01]">&lt;oriansj&gt;</a></span><span class="message">stikonas: or doing far less calls to write with bigger blocks</span></div><div class="line" id="205250"><span class="nick" style="color:#2e2a4a"><a href="#205250" label="[20:52:50]">&lt;oriansj&gt;</a></span><span class="message">So doing a buffer and flush for hex2 would probably make a major difference but would be much harder to write in hex1</span></div><div class="line" id="205621"><span class="nick" style="color:#8dd3c7"><a href="#205621" label="[20:56:21]">&lt;xentrac&gt;</a></span><span class="message">stikonas: is qemu issuing syscalls because hex2 is issuing a lot of syscalls?</span></div><div class="line" id="205647"><span class="nick" style="color:#8dd3c7"><a href="#205647" label="[20:56:47]">&lt;xentrac&gt;</a></span><span class="message">that's what I meant by &quot;just a matter of buffering&quot;: less calls to write() with bigger blocks</span></div><div class="line" id="205752"><span class="nick" style="color:#6b8072"><a href="#205752" label="[20:57:52]">&lt;stikonas&gt;</a></span><span class="message">xentrac: qemu is issuing some extra syscalls because I guess it finds binary suspicious</span></div><div class="line" id="205800"><span class="nick" style="color:#6b8072"><a href="#205800" label="[20:58:00]">&lt;stikonas&gt;</a></span><span class="message">no section headers, etc...</span></div><div class="line" id="205807"><span class="nick" style="color:#6b8072"><a href="#205807" label="[20:58:07]">&lt;stikonas&gt;</a></span><span class="message">so it has to be extra careful</span></div><div class="line" id="205819"><span class="nick" style="color:#6b8072"><a href="#205819" label="[20:58:19]">&lt;stikonas&gt;</a></span><span class="message">same binary compiled with GAS is much faster</span></div><div class="line" id="205849"><span class="nick" style="color:#6b8072"><a href="#205849" label="[20:58:49]">&lt;stikonas&gt;</a></span><span class="message">it's not just calls to write</span></div><div class="line" id="205905"><span class="nick" style="color:#6b8072"><a href="#205905" label="[20:59:05]">&lt;stikonas&gt;</a></span><span class="message">it's also calls to scratch space on heap</span></div><div class="line" id="210054"><span class="nick" style="color:#8dd3c7"><a href="#210054" label="[21:00:54]">&lt;xentrac&gt;</a></span><span class="message">I added output buffering to qfitzah a week and a half ago, which turned out to make it slightly *smaller* (on i386) rather than larger; not sure how much that correlates with &quot;harder to write in hex1&quot;</span></div><div class="line" id="210120"><span class="nick" style="color:#8dd3c7"><a href="#210120" label="[21:01:20]">&lt;xentrac&gt;</a></span><span class="message">especially &quot;harder to write in hex1 for RISC-V&quot;</span></div><div class="line" id="210133"><span class="nick" style="color:#8dd3c7"><a href="#210133" label="[21:01:33]">&lt;xentrac&gt;</a></span><span class="message">but it's some sort of data point</span></div><div class="line" id="210159"><span class="nick" style="color:#6b8072"><a href="#210159" label="[21:01:59]">&lt;stikonas&gt;</a></span><span class="message">ok, so some data for final M2 linking (which is normally done with C version of hex2):</span></div><div class="line" id="210214"><span class="nick" style="color:#6b8072"><a href="#210214" label="[21:02:14]">&lt;stikonas&gt;</a></span><span class="message">time GAS/hex2 temp test</span></div><div class="line" id="210217"><span class="nick" style="color:#6b8072"><a href="#210217" label="[21:02:17]">&lt;stikonas&gt;</a></span><span class="message">real    0m9,055s</span></div><div class="line" id="210218"><span class="nick" style="color:#6b8072"><a href="#210218" label="[21:02:18]">&lt;stikonas&gt;</a></span><span class="message">user    0m5,777s</span></div><div class="line" id="210220"><span class="nick" style="color:#6b8072"><a href="#210220" label="[21:02:20]">&lt;stikonas&gt;</a></span><span class="message">sys     0m2,889s</span></div><div class="line" id="210303"><span class="nick" style="color:#8dd3c7"><a href="#210303" label="[21:03:03]">&lt;xentrac&gt;</a></span><span class="message">I switched from `mov $foo, %al; call putchar` to `mov $foo, %al; stosb`.  so it's sort of a quirk of the i386 that there's a 1-byte instruction for &quot;mov %al, (%edi); inc %edi&quot;</span></div><div class="line" id="210312"><span class="nick" style="color:#6b8072"><a href="#210312" label="[21:03:12]">&lt;stikonas&gt;</a></span><span class="message">C version: time ./hex2-1 --architecture riscv64 --little-endian --base-address 0x600000 -f temp -o test</span></div><div class="line" id="210314"><span class="nick" style="color:#6b8072"><a href="#210314" label="[21:03:14]">&lt;stikonas&gt;</a></span><span class="message">real    0m2,577s</span></div><div class="line" id="210315"><span class="nick" style="color:#6b8072"><a href="#210315" label="[21:03:15]">&lt;stikonas&gt;</a></span><span class="message">user    0m2,432s</span></div><div class="line" id="210317"><span class="nick" style="color:#6b8072"><a href="#210317" label="[21:03:17]">&lt;stikonas&gt;</a></span><span class="message">sys     0m0,030s</span></div><div class="line" id="210354"><span class="nick" style="color:#8dd3c7"><a href="#210354" label="[21:03:54]">&lt;xentrac&gt;</a></span><span class="message">while a call is 5 bytes</span></div><div class="line" id="210422"><span class="nick" style="color:#8dd3c7"><a href="#210422" label="[21:04:22]">&lt;xentrac&gt;</a></span><span class="message">if I'd been hand-assembling the code it would have saved me a lot of jump offset calculations tho</span></div><div class="line" id="210455"><span class="nick" style="color:#2e2a4a"><a href="#210455" label="[21:04:55]">&lt;oriansj&gt;</a></span><span class="message">well jump offset calculations are quite cheap.</span></div><div class="line" id="210523"><span class="nick" style="color:#6b8072"><a href="#210523" label="[21:05:23]">&lt;stikonas&gt;</a></span><span class="message">and hex1 version of hex2: time ./hex2-0 temp test</span></div><div class="line" id="210559"><span class="nick" style="color:#6b8072"><a href="#210559" label="[21:05:59]">&lt;stikonas&gt;</a></span><span class="message">real    2m23,123s</span></div><div class="line" id="210600"><span class="nick" style="color:#6b8072"><a href="#210600" label="[21:06:00]">&lt;stikonas&gt;</a></span><span class="message">user    2m8,890s</span></div><div class="line" id="210602"><span class="nick" style="color:#6b8072"><a href="#210602" label="[21:06:02]">&lt;stikonas&gt;</a></span><span class="message">sys     0m12,145s</span></div><div class="line" id="210629"><span class="nick" style="color:#6b8072"><a href="#210629" label="[21:06:29]">&lt;stikonas&gt;</a></span><span class="message">note that GAS and hex1 version are running exactly the same assembly instructions</span></div><div class="line" id="210740"><span class="nick" style="color:#6b8072"><a href="#210740" label="[21:07:40]">&lt;stikonas&gt;</a></span><span class="message">and this hex2 is already optimized, runs about 8 times faster than before</span></div><div class="line" id="210931"><span class="nick" style="color:#6b8072"><a href="#210931" label="[21:09:31]">&lt;stikonas&gt;</a></span><span class="message">well, jump offset calculations are quite cheap for program to do, but quite annoying to do by hand</span></div><div class="line" id="210954"><span class="nick" style="color:#6b8072"><a href="#210954" label="[21:09:54]">&lt;stikonas&gt;</a></span><span class="message">once you have hex1, rest of the stage-posix stuff becomes less tedious</span></div><div class="line" id="211012"><span class="nick" style="color:#6b8072"><a href="#211012" label="[21:10:12]">&lt;stikonas&gt;</a></span><span class="message">and more time is spend on programming rather than enconding binaries</span></div><div class="line" id="211015"><span class="nick" style="color:#2e2a4a"><a href="#211015" label="[21:10:15]">&lt;oriansj&gt;</a></span><span class="message">kinda</span></div><div class="line" id="211049"><span class="nick" style="color:#2e2a4a"><a href="#211049" label="[21:10:49]">&lt;oriansj&gt;</a></span><span class="message">hex1 removes the biggest pain. hex2 pulls out the next big pain and M0 pulls out the last major frustration.</span></div><div class="line" id="211106"><span class="nick" style="color:#2e2a4a"><a href="#211106" label="[21:11:06]">&lt;oriansj&gt;</a></span><span class="message">then cc_* makes everything SOOOOOOOOOOOOOOOOOOO much easier</span></div><div class="line" id="211111"><span class="nick" style="color:#6b8072"><a href="#211111" label="[21:11:11]">&lt;stikonas&gt;</a></span><span class="message">yeah, after M0 I just wrote directly in M1 code</span></div><div class="line" id="211119"><span class="nick" style="color:#6b8072"><a href="#211119" label="[21:11:19]">&lt;stikonas&gt;</a></span><span class="message">yeah, with cc_* porting is basically done</span></div><div class="line" id="211127"><span class="nick" style="color:#6b8072"><a href="#211127" label="[21:11:27]">&lt;stikonas&gt;</a></span><span class="message">most of the other software is automatically unlocked</span></div><div class="line" id="211133"><span class="nick" style="color:#6b8072"><a href="#211133" label="[21:11:33]">&lt;stikonas&gt;</a></span><span class="message">at least if you catch bugs...</span></div><div class="line" id="211144"><span class="nick" style="color:#6b8072"><a href="#211144" label="[21:11:44]">&lt;stikonas&gt;</a></span><span class="message">which does take some time as we saw</span></div><div class="line" id="211146"><span class="nick" style="color:#6b8072"><a href="#211146" label="[21:11:46]">&lt;stikonas&gt;</a></span><span class="message">but doable</span></div><div class="line" id="211205"><span class="nick" style="color:#2e2a4a"><a href="#211205" label="[21:12:05]">&lt;oriansj&gt;</a></span><span class="message">and sorts out porting issues for those tools as well</span></div><div class="line" id="211433"><span class="nick" style="color:#6b8072"><a href="#211433" label="[21:14:33]">&lt;stikonas&gt;</a></span><span class="message">yeah, but you get a lot of C software for free</span></div><div class="line" id="211439"><span class="nick" style="color:#6b8072"><a href="#211439" label="[21:14:39]">&lt;stikonas&gt;</a></span><span class="message">at least non-toolchain stuff...</span></div><div class="line" id="211451"><span class="nick" style="color:#2e2a4a"><a href="#211451" label="[21:14:51]">&lt;oriansj&gt;</a></span><span class="message">I just hope we can find someone willing to work on the porting work for the pieces after TCC, which will become more important over time</span></div><div class="line" id="211452"><span class="nick" style="color:#6b8072"><a href="#211452" label="[21:14:52]">&lt;stikonas&gt;</a></span><span class="message">like kaem, and all mescc-tools-extra</span></div><div class="line" id="211502"><span class="nick" style="color:#6b8072"><a href="#211502" label="[21:15:02]">&lt;stikonas&gt;</a></span><span class="message">even TCC...</span></div><div class="line" id="211518"><span class="nick" style="color:#6b8072"><a href="#211518" label="[21:15:18]">&lt;stikonas&gt;</a></span><span class="message">riscv is not in tcc 0.9.26</span></div><div class="line" id="211521"><span class="nick" style="color:#6b8072"><a href="#211521" label="[21:15:21]">&lt;stikonas&gt;</a></span><span class="message">need some backporting</span></div><div class="line" id="211538"><span class="nick" style="color:#6b8072"><a href="#211538" label="[21:15:38]">&lt;stikonas&gt;</a></span><span class="message">or somebody to improve mescc and mes libc to build newer TCC</span></div><div class="line" id="211549"><span class="nick" style="color:#2e2a4a"><a href="#211549" label="[21:15:49]">&lt;oriansj&gt;</a></span><span class="message">or enhancements to MesCC to build TCC without changes</span></div><div class="line" id="211632"><span class="nick" style="color:#2e2a4a"><a href="#211632" label="[21:16:32]">&lt;oriansj&gt;</a></span><span class="message">or depending on level of ambition, a version of TCC that M2-Planet can build directly</span></div><div class="line" id="211810"><span class="nick" style="color:#6b8072"><a href="#211810" label="[21:18:10]">&lt;stikonas&gt;</a></span><span class="message">oh, cp might be broken</span></div><div class="line" id="211816"><span class="nick" style="color:#6b8072"><a href="#211816" label="[21:18:16]">&lt;stikonas&gt;</a></span><span class="message">actually no, it's fine</span></div><div class="line" id="211820"><span class="nick" style="color:#2e2a4a"><a href="#211820" label="[21:18:20]">&lt;oriansj&gt;</a></span><span class="message">or perhaps I'll pick up the M3 work in the future. which would provide a binutils compatible assembly syntax and standard linker sort of details</span></div><div class="line" id="211829"><span class="nick" style="color:#6b8072"><a href="#211829" label="[21:18:29]">&lt;stikonas&gt;</a></span><span class="message">I'm just forgetting that it has fewer features than coreutils version</span></div><div class="line" id="211831"><span class="nick" style="color:#6b8072"><a href="#211831" label="[21:18:31]">&lt;stikonas&gt;</a></span><span class="message">no . support</span></div><div class="line" id="211858"><span class="nick" style="color:#2e2a4a"><a href="#211858" label="[21:18:58]">&lt;oriansj&gt;</a></span><span class="message">nothing to stop you from adding it</span></div><div class="line" id="211936"><span class="nick" style="color:#2e2a4a"><a href="#211936" label="[21:19:36]">&lt;oriansj&gt;</a></span><span class="message">but perhaps after we get a proper RISC-V stage0-posix port out as a major release</span></div><div class="line" id="212300"><span class="nick" style="color:#6b8072"><a href="#212300" label="[21:23:00]">&lt;stikonas&gt;</a></span><span class="message">ok, mes will be a bit harder to build...</span></div><div class="line" id="212309"><span class="nick" style="color:#6b8072"><a href="#212309" label="[21:23:09]">&lt;stikonas&gt;</a></span><span class="message">since some files need porting</span></div><div class="line" id="212339"><span class="nick" style="color:#6b8072"><a href="#212339" label="[21:23:39]">&lt;stikonas&gt;</a></span><span class="message">it uses some of its own stuff instead of M2libc</span></div><div class="line" id="212454"><span class="nick" style="color:#6b8072"><a href="#212454" label="[21:24:54]">&lt;stikonas&gt;</a></span><span class="message">but yes, at we first need a new stage0-posix release with riscv support</span></div><div class="line" id="212516"><span class="nick" style="color:#6b8072"><a href="#212516" label="[21:25:16]">&lt;stikonas&gt;</a></span><span class="message">at least untar and ungz seem to work fine</span></div><div class="line" id="212521"><span class="nick" style="color:#6b8072"><a href="#212521" label="[21:25:21]">&lt;stikonas&gt;</a></span><span class="message">I was able to unpack mes</span></div><div class="line" id="212956"><span class="nick" style="color:#2e2a4a"><a href="#212956" label="[21:29:56]">&lt;oriansj&gt;</a></span><span class="message">well I don't think I ever managed to convince janneke that using M2libc would be worth his effort and there are things in meslibc that are not yet in M2libc.</span></div><div class="line" id="213040"><span class="nick" style="color:#2e2a4a"><a href="#213040" label="[21:30:40]">&lt;oriansj&gt;</a></span><span class="message">I guess I probably need to find a week or two to incorporate all of those functions into M2libc and port to all of the architectures before he *might* reconsider</span></div><div class="line" id="213043"><span class="nick" style="color:#6b8072"><a href="#213043" label="[21:30:43]">&lt;stikonas&gt;</a></span><span class="message">well, M2libc is newer anyway</span></div><div class="line" id="213058"><span class="nick" style="color:#6b8072"><a href="#213058" label="[21:30:58]">&lt;stikonas&gt;</a></span><span class="message">when mes first appeared, I guess there was no other options</span></div><div class="line" id="213231"><span class="nick" style="color:#6b8072"><a href="#213231" label="[21:32:31]">&lt;stikonas&gt;</a></span><span class="message">well, stage0-posix  still has somewhat smaller immediate range on riscv...</span></div><div class="line" id="213240"><span class="nick" style="color:#6b8072"><a href="#213240" label="[21:32:40]">&lt;stikonas&gt;</a></span><span class="message">but maybe we can survive with it</span></div><div class="line" id="213245"><span class="nick" style="color:#6b8072"><a href="#213245" label="[21:32:45]">&lt;stikonas&gt;</a></span><span class="message">it's almost 31-bit</span></div><div class="line" id="213330"><span class="nick" style="color:#6b8072"><a href="#213330" label="[21:33:30]">&lt;stikonas&gt;</a></span><span class="message">and branches are now all indirect, so should support 20 bits...</span></div><div class="line" id="213429"><span class="nick" style="color:#6b8072"><a href="#213429" label="[21:34:29]">&lt;stikonas&gt;</a></span><span class="message">that's 1 MiB...</span></div><div class="line" id="213455"><span class="nick" style="color:#6b8072"><a href="#213455" label="[21:34:55]">&lt;stikonas&gt;</a></span><span class="message">M2-Planet is about 250 KiB without debug sections...</span></div><div class="line" id="213508"><span class="nick" style="color:#6b8072"><a href="#213508" label="[21:35:08]">&lt;stikonas&gt;</a></span><span class="message">mes is probably similar</span></div><div class="line" id="213702"><span class="nick" style="color:#2e2a4a"><a href="#213702" label="[21:37:02]">&lt;oriansj&gt;</a></span><span class="message">mes-m2 is 212,325bytes</span></div><div class="line" id="213746"><span class="nick" style="color:#2e2a4a"><a href="#213746" label="[21:37:46]">&lt;oriansj&gt;</a></span><span class="message">but uses a great deal more memory when running</span></div><div class="line" id="213837"><span class="nick" style="color:#2e2a4a"><a href="#213837" label="[21:38:37]">&lt;oriansj&gt;</a></span><span class="message">M2-Planet is exactly 272,452bytes right now (for AMD64)</span></div><div class="line" id="213954"><span class="nick" style="color:#2e2a4a"><a href="#213954" label="[21:39:54]">&lt;oriansj&gt;</a></span><span class="message">and I just fixed the mes-m2 kaem.run build file</span></div><div class="line" id="214114"><span class="nick" style="color:#2e2a4a"><a href="#214114" label="[21:41:14]">&lt;oriansj&gt;</a></span><span class="message">now to get back to updating kaem</span></div><div class="line" id="214138"><span class="nick" style="color:#6d2462"><a href="#214138" label="[21:41:38]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, ricv binaries are a bit bigger</span></div><div class="line" id="214158"><span class="nick" style="color:#6d2462"><a href="#214158" label="[21:41:58]">&lt;stikonas[m]&gt;</a></span><span class="message">Push/pop are 8 bytes each</span></div><div class="line" id="214241"><span class="nick" style="color:#2e2a4a"><a href="#214241" label="[21:42:41]">&lt;oriansj&gt;</a></span><span class="message">stikonas: in kaem array_length would return a zero if NULL == envp[0]</span></div><div class="line" id="214257"><span class="nick" style="color:#6d2462"><a href="#214257" label="[21:42:57]">&lt;stikonas[m]&gt;</a></span><span class="message">Yes</span></div><div class="line" id="214305"><span class="nick" style="color:#6d2462"><a href="#214305" label="[21:43:05]">&lt;stikonas[m]&gt;</a></span><span class="message">But next while loop crashes</span></div><div class="line" id="214315"><span class="nick" style="color:#6d2462"><a href="#214315" label="[21:43:15]">&lt;stikonas[m]&gt;</a></span><span class="message">For is skipped</span></div><div class="line" id="214328"><span class="nick" style="color:#6d2462"><a href="#214328" label="[21:43:28]">&lt;stikonas[m]&gt;</a></span><span class="message">And n == NULL</span></div><div class="line" id="214450"><span class="nick" style="color:#2e2a4a"><a href="#214450" label="[21:44:50]">&lt;oriansj&gt;</a></span><span class="message">ok got a good fix</span></div><div class="line" id="214550"><span class="nick" style="color:#2e2a4a"><a href="#214550" label="[21:45:50]">&lt;oriansj&gt;</a></span><span class="message">and pathc up</span></div><div class="line" id="214906"><span class="nick" style="color:#6b8072"><a href="#214906" label="[21:49:06]">&lt;stikonas&gt;</a></span><span class="message">mescc-tools?</span></div><div class="line" id="214946"><span class="nick" style="color:#6b8072"><a href="#214946" label="[21:49:46]">&lt;stikonas&gt;</a></span><span class="message">ok, I can see it on savannah</span></div><div class="line" id="215301"><span class="nick" style="color:#2e2a4a"><a href="#215301" label="[21:53:01]">&lt;oriansj&gt;</a></span><span class="message">forgot to also push to github for a second there</span></div><div class="line" id="215317"><span class="nick" style="color:#2e2a4a"><a href="#215317" label="[21:53:17]">&lt;oriansj&gt;</a></span><span class="message">(now it is one both)</span></div><div class="line" id="215345"><span class="nick" style="color:#6b8072"><a href="#215345" label="[21:53:45]">&lt;stikonas&gt;</a></span><span class="message">it's fine, git makes it easy to pull from multiple sources</span></div><div class="line" id="215432"><span class="nick" style="color:#2e2a4a"><a href="#215432" label="[21:54:32]">&lt;oriansj&gt;</a></span><span class="message">true and savannah is always my preferred master source. ( just can't get bootstrap-seeds in )</span></div><div class="line" id="215604"><span class="nick" style="color:#6b8072"><a href="#215604" label="[21:56:04]">&lt;stikonas&gt;</a></span><span class="message">well, yeah, I am not really a fan of github either</span></div><div class="line" id="215643"><span class="nick" style="color:#6b8072"><a href="#215643" label="[21:56:43]">&lt;stikonas&gt;</a></span><span class="message">have some personal projects on gitlab though...</span></div><div class="line" id="215757"><span class="nick" style="color:#2e2a4a"><a href="#215757" label="[21:57:57]">&lt;oriansj&gt;</a></span><span class="message">I never got gitlab to work without JavaScript</span></div><div class="line" id="220017"><span class="nick" style="color:#2e2a4a"><a href="#220017" label="[22:00:17]">&lt;oriansj&gt;</a></span><span class="message">but then again, I am of the extreme N0-js perspective even though a more moderate LibreJS-only perspective would probably enable a good deal of functionality needed.</span></div><div class="line" id="220018"><span class="nick" style="color:#6b8072"><a href="#220018" label="[22:00:18]">&lt;stikonas&gt;</a></span><span class="message">oh yes, I've whitelisted various gitlab servers in noscript...</span></div><div class="line" id="220052"><span class="nick" style="color:#6b8072"><a href="#220052" label="[22:00:52]">&lt;stikonas&gt;</a></span><span class="message">yeah, gitlab's JS is libre as far as I'm aware..</span></div><div class="line" id="220119"><span class="nick" style="color:#2e2a4a"><a href="#220119" label="[22:01:19]">&lt;oriansj&gt;</a></span><span class="message">well the FSF's LibreJS plugin does check for you</span></div><div class="line" id="220152"><span class="nick" style="color:#2e2a4a"><a href="#220152" label="[22:01:52]">&lt;oriansj&gt;</a></span><span class="message">correction GNU LibreJS</span></div><div class="line" id="220741"><span class="nick" style="color:#2e2a4a"><a href="#220741" label="[22:07:41]">&lt;oriansj&gt;</a></span><span class="message">so does the kaem update fix the remaining kaem issue for RISC-V64 for stage0-posix?</span></div><div class="line" id="220930"><span class="nick" style="color:#6b8072"><a href="#220930" label="[22:09:30]">&lt;stikonas&gt;</a></span><span class="message">yes, it fixes that empty environment issue</span></div><div class="line" id="221005"><span class="nick" style="color:#6b8072"><a href="#221005" label="[22:10:05]">&lt;stikonas&gt;</a></span><span class="message">well, there is a smaller issue in kaem-minimal</span></div><div class="line" id="221013"><span class="nick" style="color:#6b8072"><a href="#221013" label="[22:10:13]">&lt;stikonas&gt;</a></span><span class="message">it fails to detect segfaults</span></div><div class="line" id="221031"><span class="nick" style="color:#6b8072"><a href="#221031" label="[22:10:31]">&lt;stikonas&gt;</a></span><span class="message">but that's less of a problem if you don't segfault</span></div><div class="line" id="221210"><span class="nick" style="color:#2e2a4a"><a href="#221210" label="[22:12:10]">&lt;oriansj&gt;</a></span><span class="message">but something you'll fix</span></div><div class="line" id="221238"><span class="nick" style="color:#2e2a4a"><a href="#221238" label="[22:12:38]">&lt;oriansj&gt;</a></span><span class="message">perhaps the old kaem-minimal for RISC-V which read from kaem.run?</span></div><div class="line" id="221247"><span class="nick" style="color:#6b8072"><a href="#221247" label="[22:12:47]">&lt;stikonas&gt;</a></span><span class="message">well, I'll try to figure it out</span></div><div class="line" id="221249"><span class="nick" style="color:#6b8072"><a href="#221249" label="[22:12:49]">&lt;stikonas&gt;</a></span><span class="message">but not today...</span></div><div class="line" id="221254"><span class="nick" style="color:#2e2a4a"><a href="#221254" label="[22:12:54]">&lt;oriansj&gt;</a></span><span class="message">fair</span></div><div class="line" id="221313"><span class="nick" style="color:#2e2a4a"><a href="#221313" label="[22:13:13]">&lt;oriansj&gt;</a></span><span class="message">as your RISC-V work will be the next major release for stage0-posix</span></div><div class="line" id="221328"><span class="nick" style="color:#6b8072"><a href="#221328" label="[22:13:28]">&lt;stikonas&gt;</a></span><span class="message">well, first you need to pull in M2-Planet...</span></div><div class="line" id="221410"><span class="nick" style="color:#2e2a4a"><a href="#221410" label="[22:14:10]">&lt;oriansj&gt;</a></span><span class="message">it is on: 057724344431736d72e55cb51a1f8f1c3df256df</span></div><div class="line" id="221434"><span class="nick" style="color:#2e2a4a"><a href="#221434" label="[22:14:34]">&lt;oriansj&gt;</a></span><span class="message">with commit fb5fe9c487c39a3e5349e022d199f1676da16bee for stage0-posix</span></div><div class="line" id="221556"><span class="nick" style="color:#2e2a4a"><a href="#221556" label="[22:15:56]">&lt;oriansj&gt;</a></span><span class="message">So unless I missed something all that remains is for me to do the AArch64 verification for the new fixed kaem and do a commit</span></div><div class="line" id="221654"><span class="nick" style="color:#2e2a4a"><a href="#221654" label="[22:16:54]">&lt;oriansj&gt;</a></span><span class="message">then all that remains would be the RISC-V kaem steps you are working on</span></div><div class="line" id="221716"><span class="nick" style="color:#2e2a4a"><a href="#221716" label="[22:17:16]">&lt;oriansj&gt;</a></span><span class="message">(and the RISC-V64 checksums too)</span></div><div class="line" id="223052"><span class="nick" style="color:#2e2a4a"><a href="#223052" label="[22:30:52]">&lt;oriansj&gt;</a></span><span class="message">possibly improvements to HACKING or docs/M2-Planet.1 if either can think of something that needs to fix updated or fixed in them to provide improved understanding.</span></div><div class="line" id="231725"><span class="nick" style="color:#6b8072"><a href="#231725" label="[23:17:25]">&lt;stikonas&gt;</a></span><span class="message">yeah, we need to mention that RISC-V is also supported now in readmes...</span></div><div class="line" id="231804"><span class="nick" style="color:#2e2a4a"><a href="#231804" label="[23:18:04]">&lt;oriansj&gt;</a></span><span class="message">and hopefully capture anything that tripped you up when porting RISC-V to M2-Planet into HACKING</span></div><div class="line" id="231832"><span class="nick" style="color:#8dd3c7"><a href="#231832" label="[23:18:32]">&lt;xentrac&gt;</a></span><span class="message">yeah!</span></div><div class="line" id="231855"><span class="nick" style="color:#8dd3c7"><a href="#231855" label="[23:18:55]">&lt;xentrac&gt;</a></span><span class="message">your experience will be super valuable to people like me</span></div><div class="line" id="231923"><span class="nick" style="color:#8dd3c7"><a href="#231923" label="[23:19:23]">&lt;xentrac&gt;</a></span><span class="message">oriansj: yes, jump offset calculations are quite cheap — unless you're doing them in your head</span></div><div class="line" id="231947"><span class="nick" style="color:#6b8072"><a href="#231947" label="[23:19:47]">&lt;stikonas&gt;</a></span><span class="message">well, that's why this is the first thing we write in hex0</span></div><div class="line" id="232029"><span class="nick" style="color:#8dd3c7"><a href="#232029" label="[23:20:29]">&lt;xentrac&gt;</a></span><span class="message">amusingly my subroutine table size optimization in Qfitzah eliminates the need to calculate jump offsets for procedure calls, because the offset in the call instruction is just the offset into the procedure table</span></div><div class="line" id="232039"><span class="nick" style="color:#8dd3c7"><a href="#232039" label="[23:20:39]">&lt;xentrac&gt;</a></span><span class="message">instead of being PC-relative</span></div><div class="line" id="232133"><span class="nick" style="color:#2e2a4a"><a href="#232133" label="[23:21:33]">&lt;oriansj&gt;</a></span><span class="message">seems touchy to where it is loaded into RAM</span></div><div class="line" id="232152"><span class="nick" style="color:#8dd3c7"><a href="#232152" label="[23:21:52]">&lt;xentrac&gt;</a></span><span class="message">20-bit branch offsets don't care how much memory mes-m2 uses when running; you don't compile jumps into the runtime heap into the binary :)</span></div><div class="line" id="232234"><span class="nick" style="color:#6b8072"><a href="#232234" label="[23:22:34]">&lt;stikonas&gt;</a></span><span class="message">well, it's possible to avoid 20-bit limitation by doing jalr call...</span></div><div class="line" id="232248"><span class="nick" style="color:#6b8072"><a href="#232248" label="[23:22:48]">&lt;stikonas&gt;</a></span><span class="message">but we are unlikely to hit that limit with M2-Planet</span></div><div class="line" id="232256"><span class="nick" style="color:#8dd3c7"><a href="#232256" label="[23:22:56]">&lt;xentrac&gt;</a></span><span class="message">oriansj: what do you mean about the touchiness?</span></div><div class="line" id="232259"><span class="nick" style="color:#6b8072"><a href="#232259" label="[23:22:59]">&lt;stikonas&gt;</a></span><span class="message">so we can let more advanced compilers worry about that</span></div><div class="line" id="232330"><span class="nick" style="color:#8dd3c7"><a href="#232330" label="[23:23:30]">&lt;xentrac&gt;</a></span><span class="message">right now I'm writing Qfitzah with gas and GNU ld, so the procedure table gets populated by the linker from relocations when it builds the binary</span></div><div class="line" id="232537"><span class="nick" style="color:#2e2a4a"><a href="#232537" label="[23:25:37]">&lt;oriansj&gt;</a></span><span class="message">xentrac: by touchy I mean the task of getting mes-m2 into any form for GCC or M2-Planet is quite painful</span></div><div class="line" id="232606"><span class="nick" style="color:#8dd3c7"><a href="#232606" label="[23:26:06]">&lt;xentrac&gt;</a></span><span class="message">hmm?  what were you saying was &quot;touchy to where it is loaded into RAM&quot;?</span></div><div class="line" id="232614"><span class="nick" style="color:#2e2a4a"><a href="#232614" label="[23:26:14]">&lt;oriansj&gt;</a></span><span class="message">we spent 2 years trying to get mes-m2 into a form that could be built by M2-Planet and still run MesCC</span></div><div class="line" id="232627"><span class="nick" style="color:#8dd3c7"><a href="#232627" label="[23:26:27]">&lt;xentrac&gt;</a></span><span class="message">sure</span></div><div class="line" id="232635"><span class="nick" style="color:#2e2a4a"><a href="#232635" label="[23:26:35]">&lt;oriansj&gt;</a></span><span class="message">as for your table idea</span></div><div class="line" id="232655"><span class="nick" style="color:#2e2a4a"><a href="#232655" label="[23:26:55]">&lt;oriansj&gt;</a></span><span class="message">you would need to do absolute loads or still do relative offsets</span></div><div class="line" id="232746"><span class="nick" style="color:#8dd3c7"><a href="#232746" label="[23:27:46]">&lt;xentrac&gt;</a></span><span class="message">what do you mean?  the procedure pointers in the procedure table are absolute addresses</span></div><div class="line" id="232819"><span class="nick" style="color:#2e2a4a"><a href="#232819" label="[23:28:19]">&lt;oriansj&gt;</a></span><span class="message">xentrac: ok now if the location of the procedure table was changed what happens</span></div><div class="line" id="233003"><span class="nick" style="color:#8dd3c7"><a href="#233003" label="[23:30:03]">&lt;xentrac&gt;</a></span><span class="message">well, the startup code loads its address into %ebp.  the startup code gets the procedure table's address from the linker, but if that weren't feasible, you could put the procedure table in the same segment with the startup code and do `call *(.+5); pop %ebp`  (wait, is it 5?  I forget, but whatever it is)</span></div><div class="line" id="233057"><span class="nick" style="color:#8dd3c7"><a href="#233057" label="[23:30:57]">&lt;xentrac&gt;</a></span><span class="message">I don't know if the trick is actually useful for hex0, hex1, hex2</span></div><div class="line" id="233057"><span class="nick" style="color:#2e2a4a"><a href="#233057" label="[23:30:57]">&lt;oriansj&gt;</a></span><span class="message">call label label: pop %ebp</span></div><div class="line" id="233105"><span class="nick" style="color:#8dd3c7"><a href="#233105" label="[23:31:05]">&lt;xentrac&gt;</a></span><span class="message">right</span></div><div class="line" id="233159"><span class="nick" style="color:#2e2a4a"><a href="#233159" label="[23:31:59]">&lt;oriansj&gt;</a></span><span class="message">so your table is at some offset from your binary that runs</span></div><div class="line" id="233208"><span class="nick" style="color:#6b8072"><a href="#233208" label="[23:32:08]">&lt;stikonas&gt;</a></span><span class="message">hmm, something is a bit broken now</span></div><div class="line" id="233225"><span class="nick" style="color:#6b8072"><a href="#233225" label="[23:32:25]">&lt;stikonas&gt;</a></span><span class="message">might be envp commit</span></div><div class="line" id="233245"><span class="nick" style="color:#8dd3c7"><a href="#233245" label="[23:32:45]">&lt;xentrac&gt;</a></span><span class="message">well, not in the way it's currently built; it's in the .data segment, and the linker pokes the proper immediate constant into the instruction when it links</span></div><div class="line" id="233254"><span class="nick" style="color:#6b8072"><a href="#233254" label="[23:32:54]">&lt;stikonas&gt;</a></span><span class="message">oriansj: it's trying to run /M2-Planet --architecture  -f /sys/types.h -f //Linux/sys/stat.h -f /stddef.h -f //Linux/unistd.h -f /stdlib.c -f //Linux/fcntl.h -f /stdio.c -f /string.c -f /bootstrappable.c -f sha256sum.c --debug -o sha256sum.M1</span></div><div class="line" id="233314"><span class="nick" style="color:#6b8072"><a href="#233314" label="[23:33:14]">&lt;stikonas&gt;</a></span><span class="message">that looks like empty env variables</span></div><div class="line" id="233321"><span class="nick" style="color:#8dd3c7"><a href="#233321" label="[23:33:21]">&lt;xentrac&gt;</a></span><span class="message">it does</span></div><div class="line" id="233323"><span class="nick" style="color:#8dd3c7"><a href="#233323" label="[23:33:23]">&lt;xentrac&gt;</a></span><span class="message">in Qfitzah I came up with the procedure-table trick to save bytes, because although I'm easily under my 2 KiB goal, my 1 KiB stretch goal is looking dodgy without bytecode</span></div><div class="line" id="233329"><span class="nick" style="color:#6b8072"><a href="#233329" label="[23:33:29]">&lt;stikonas&gt;</a></span><span class="message">even though this invocation of kaem should have some variables set</span></div><div class="line" id="233357"><span class="nick" style="color:#8dd3c7"><a href="#233357" label="[23:33:57]">&lt;xentrac&gt;</a></span><span class="message">does kaem live long enough to look in /proc/12734/env?</span></div><div class="line" id="233429"><span class="nick" style="color:#8dd3c7"><a href="#233429" label="[23:34:29]">&lt;xentrac&gt;</a></span><span class="message">I mean /proc/12734/environ</span></div><div class="line" id="233436"><span class="nick" style="color:#2e2a4a"><a href="#233436" label="[23:34:36]">&lt;oriansj&gt;</a></span><span class="message">xentrac: yes but we are not going to make it Linux specific</span></div><div class="line" id="233501"><span class="nick" style="color:#8dd3c7"><a href="#233501" label="[23:35:01]">&lt;xentrac&gt;</a></span><span class="message">stikonas can certainly debug the bug in a Linux-specific way</span></div><div class="line" id="233515"><span class="nick" style="color:#8dd3c7"><a href="#233515" label="[23:35:15]">&lt;xentrac&gt;</a></span><span class="message">I'm not suggesting putting opening /proc/$pid/environ into the code :)</span></div><div class="line" id="233517"><span class="nick" style="color:#2e2a4a"><a href="#233517" label="[23:35:17]">&lt;oriansj&gt;</a></span><span class="message">it can also use sleep</span></div><div class="line" id="233622"><span class="nick" style="color:#6b8072"><a href="#233622" label="[23:36:22]">&lt;stikonas&gt;</a></span><span class="message">well, syscall numbers are probably linux specific but yeah, we shouldn't put anything more</span></div><div class="line" id="233652"><span class="nick" style="color:#8dd3c7"><a href="#233652" label="[23:36:52]">&lt;xentrac&gt;</a></span><span class="message">yeah, lots of places support Linux syscall numbers but not Linux /proc</span></div><div class="line" id="233732"><span class="nick" style="color:#2e2a4a"><a href="#233732" label="[23:37:32]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well netbsd and freebsd seem to support them enough (now that we fixed up the ELF-headers to be more strict)</span></div><div class="line" id="233749"><span class="nick" style="color:#6b8072"><a href="#233749" label="[23:37:49]">&lt;stikonas&gt;</a></span><span class="message">hmm, I guess if they want to support same C libraries it's simpler</span></div><div class="line" id="233757"><span class="nick" style="color:#6b8072"><a href="#233757" label="[23:37:57]">&lt;stikonas&gt;</a></span><span class="message">to share syscall numbers between OSes...</span></div><div class="line" id="233811"><span class="nick" style="color:#6b8072"><a href="#233811" label="[23:38:11]">&lt;stikonas&gt;</a></span><span class="message">even though Linux itself does not share syscall numbers between different arches</span></div><div class="line" id="233929"><span class="nick" style="color:#6b8072"><a href="#233929" label="[23:39:29]">&lt;stikonas&gt;</a></span><span class="message">ok, switching back to envp[0] check seem to fix kaem</span></div><div class="line" id="233943"><span class="nick" style="color:#6b8072"><a href="#233943" label="[23:39:43]">&lt;stikonas&gt;</a></span><span class="message">although, I'm a bit confused why checking for empty arrays break things</span></div><div class="line" id="233946"><span class="nick" style="color:#2e2a4a"><a href="#233946" label="[23:39:46]">&lt;oriansj&gt;</a></span><span class="message">notice that M2libc does ${ARCH}/${OS}/things</span></div><div class="line" id="234007"><span class="nick" style="color:#234e69"><a href="#234007" label="[23:40:07]">&lt;fossy&gt;</a></span><span class="message">oriansj: stikonas, yes I think it is reasonable to just not read in the environment if there is a null envp</span></div><div class="line" id="234008"><span class="nick" style="color:#6b8072"><a href="#234008" label="[23:40:08]">&lt;stikonas&gt;</a></span><span class="message">yeah, that's true, we can support different oses there</span></div><div class="line" id="234024"><span class="nick" style="color:#6b8072"><a href="#234024" label="[23:40:24]">&lt;stikonas&gt;</a></span><span class="message">fossy: yeah, we already tried to do that but a couple of non-working commits</span></div><div class="line" id="234027"><span class="nick" style="color:#234e69"><a href="#234027" label="[23:40:27]">&lt;fossy&gt;</a></span><span class="message">but I cant recall if there was special logic for the first item in the linked list</span></div><div class="line" id="234030"><span class="nick" style="color:#6b8072"><a href="#234030" label="[23:40:30]">&lt;stikonas&gt;</a></span><span class="message">let me try once more and you can both review</span></div><div class="line" id="234031"><span class="nick" style="color:#8dd3c7"><a href="#234031" label="[23:40:31]">&lt;xentrac&gt;</a></span><span class="message">what were the aspects of the ELF headers NetBSD and FreeBSD were choking on?</span></div><div class="line" id="234045"><span class="nick" style="color:#6b8072"><a href="#234045" label="[23:40:45]">&lt;stikonas&gt;</a></span><span class="message">fossy: maybe that's why current version fails to work</span></div><div class="line" id="234050"><span class="nick" style="color:#234e69"><a href="#234050" label="[23:40:50]">&lt;fossy&gt;</a></span><span class="message">I think probablt</span></div><div class="line" id="234151"><span class="nick" style="color:#2e2a4a"><a href="#234151" label="[23:41:51]">&lt;oriansj&gt;</a></span><span class="message">xentrac: see for yourself <a rel="nofollow" href="https://github.com/oriansj/M2libc/blob/main/x86/ELF-x86.hex2#L30">https://github.com/oriansj/M2libc/blob/main/x86/ELF-x86.hex2#L30</a>  it is labeled</span></div><div class="line" id="234220"><span class="nick" style="color:#6b8072"><a href="#234220" label="[23:42:20]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/pull/26">https://github.com/oriansj/mescc-tools/pull/26</a> </span></div><div class="line" id="234226"><span class="nick" style="color:#6b8072"><a href="#234226" label="[23:42:26]">&lt;stikonas&gt;</a></span><span class="message">fossy: can you take a look?</span></div><div class="line" id="234236"><span class="nick" style="color:#6b8072"><a href="#234236" label="[23:42:36]">&lt;stikonas&gt;</a></span><span class="message">I reverted the last commit that does not work</span></div><div class="line" id="234335"><span class="nick" style="color:#2e2a4a"><a href="#234335" label="[23:43:35]">&lt;oriansj&gt;</a></span><span class="message">array_length(envp) shouldn't change right?</span></div><div class="line" id="234510"><span class="nick" style="color:#6b8072"><a href="#234510" label="[23:45:10]">&lt;stikonas&gt;</a></span><span class="message">well, I can undo that 2nd bit</span></div><div class="line" id="234514"><span class="nick" style="color:#6b8072"><a href="#234514" label="[23:45:14]">&lt;stikonas&gt;</a></span><span class="message">and see if it still works</span></div><div class="line" id="235157"><span class="nick" style="color:#6b8072"><a href="#235157" label="[23:51:57]">&lt;stikonas&gt;</a></span><span class="message">ok, it works, PR updated</span></div><div class="line" id="235207"><span class="nick" style="color:#6b8072"><a href="#235207" label="[23:52:07]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/pull/26/files">https://github.com/oriansj/mescc-tools/pull/26/files</a> </span></div><div class="line" id="235211"><span class="nick" style="color:#6b8072"><a href="#235211" label="[23:52:11]">&lt;stikonas&gt;</a></span><span class="message">it's just one-liner now</span></div><div class="line" id="235445"><span class="nick" style="color:#2e2a4a"><a href="#235445" label="[23:54:45]">&lt;oriansj&gt;</a></span><span class="message">well that would be a null dereference if envp actually was a null pointer</span></div><div class="line" id="235530"><span class="nick" style="color:#2e2a4a"><a href="#235530" label="[23:55:30]">&lt;oriansj&gt;</a></span><span class="message">as 0[0] will definitely segfault</span></div><div class="line" id="235548"><span class="nick" style="color:#6b8072"><a href="#235548" label="[23:55:48]">&lt;stikonas&gt;</a></span><span class="message">hmm, it doesn't segfault here though</span></div><div class="line" id="235551"><span class="nick" style="color:#6b8072"><a href="#235551" label="[23:55:51]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="235602"><span class="nick" style="color:#2e2a4a"><a href="#235602" label="[23:56:02]">&lt;oriansj&gt;</a></span><span class="message">because envp isn't actually NULL</span></div><div class="line" id="235610"><span class="nick" style="color:#2e2a4a"><a href="#235610" label="[23:56:10]">&lt;oriansj&gt;</a></span><span class="message">it is just an empty array</span></div><div class="line" id="235622"><span class="nick" style="color:#6b8072"><a href="#235622" label="[23:56:22]">&lt;stikonas&gt;</a></span><span class="message">yeah, looks like it</span></div><div class="line" id="235639"><span class="nick" style="color:#8dd3c7"><a href="#235639" label="[23:56:39]">&lt;xentrac&gt;</a></span><span class="message">oriansj: thanks!</span></div><div class="line" id="235711"><span class="nick" style="color:#2e2a4a"><a href="#235711" label="[23:57:11]">&lt;oriansj&gt;</a></span><span class="message">So a one line change would be to add the if(NULL == envp[0]) return; after the if(NULL == envp) return;</span></div><div class="line" id="235716"><span class="nick" style="color:#8dd3c7"><a href="#235716" label="[23:57:16]">&lt;xentrac&gt;</a></span><span class="message">just EI_OSABI and EI_ABIVERSION, eh?</span></div><div class="line" id="235758"><span class="nick" style="color:#2e2a4a"><a href="#235758" label="[23:57:58]">&lt;oriansj&gt;</a></span><span class="message">xentrac: yeah the Linux emulation layer checks to make sure it isn't running for native binaries</span></div><div class="line" id="235827"><span class="nick" style="color:#6b8072"><a href="#235827" label="[23:58:27]">&lt;stikonas&gt;</a></span><span class="message">ok, let's test that</span></div><div class="line" id="235941"><span class="nick" style="color:#6b8072"><a href="#235941" label="[23:59:41]">&lt;stikonas&gt;</a></span><span class="message">ouch</span></div><div class="line" id="235946"><span class="nick" style="color:#6b8072"><a href="#235946" label="[23:59:46]">&lt;stikonas&gt;</a></span><span class="message">sha256sum does not work</span></div><div class="line" id="235955"><span class="nick" style="color:#6b8072"><a href="#235955" label="[23:59:55]">&lt;stikonas&gt;</a></span><span class="message">hmm, I guess large integer issues...</span></div><br /></div></body></html>