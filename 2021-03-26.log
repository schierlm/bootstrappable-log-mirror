<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-03-26.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000526"><span class="nick" style="color:#8dd3c7"><a href="#000526" label="[00:05:26]">&lt;stikonas&gt;</a></span><span class="message">so I think we should stop at autoconf 2.69 for now</span></div><div class="line" id="000558"><span class="nick" style="color:#8dd3c7"><a href="#000558" label="[00:05:58]">&lt;stikonas&gt;</a></span><span class="message">at least according to gentoo 2.70 and 2.71 are buggy, probably caused by the following commit <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/autoconf.git/commit/?id=aba75f6d4a9c875a9d5d90a07c6b3678db66a4bf">https://git.savannah.gnu.org/cgit/autoconf.git/commit/?id=aba75f6d4a9c875a9d5d90a07c6b3678db66a4bf</a> </span></div><div class="line" id="000811"><span class="nick" style="color:#8dd3c7"><a href="#000811" label="[00:08:11]">&lt;stikonas&gt;</a></span><span class="message">although, 2.70 has better support for reproducible builds...</span></div><div class="line" id="002816"><span class="nick" style="color:#2e2a4a"><a href="#002816" label="[00:28:16]">&lt;bauen1&gt;</a></span><span class="message">hm, so i've made some changes to use unshare with chroot (a bit better than running everything as uid=0) and it seems that musl will fail the build, probably right after the configures script `creating config.mak... done`</span></div><div class="line" id="002841"><span class="nick" style="color:#2e2a4a"><a href="#002841" label="[00:28:41]">&lt;bauen1&gt;</a></span><span class="message">maybe something weird to do with how i setup devtmpfs in the chroot</span></div><div class="line" id="003243"><span class="nick" style="color:#8dd3c7"><a href="#003243" label="[00:32:43]">&lt;stikonas&gt;</a></span><span class="message">configure script there is in general mildly broken</span></div><div class="line" id="003251"><span class="nick" style="color:#8dd3c7"><a href="#003251" label="[00:32:51]">&lt;stikonas&gt;</a></span><span class="message">it creates /dev/null file</span></div><div class="line" id="003303"><span class="nick" style="color:#8dd3c7"><a href="#003303" label="[00:33:03]">&lt;stikonas&gt;</a></span><span class="message">even if there is proper /dev/null device node</span></div><div class="line" id="003333"><span class="nick" style="color:#8dd3c7"><a href="#003333" label="[00:33:33]">&lt;stikonas&gt;</a></span><span class="message">might be some bash (possibly bash-mes) bug</span></div><div class="line" id="003442"><span class="nick" style="color:#2e2a4a"><a href="#003442" label="[00:34:42]">&lt;bauen1&gt;</a></span><span class="message">as in it will try to mknod /dev/null ?</span></div><div class="line" id="003450"><span class="nick" style="color:#2e2a4a"><a href="#003450" label="[00:34:50]">&lt;bauen1&gt;</a></span><span class="message">because afaik that won't be possible in a userns</span></div><div class="line" id="003624"><span class="nick" style="color:#8dd3c7"><a href="#003624" label="[00:36:24]">&lt;stikonas&gt;</a></span><span class="message">bauen1: oh, we do create /dev/null node later</span></div><div class="line" id="003645"><span class="nick" style="color:#8dd3c7"><a href="#003645" label="[00:36:45]">&lt;stikonas&gt;</a></span><span class="message">which musl build fails? Is it first?</span></div><div class="line" id="003654"><span class="nick" style="color:#8dd3c7"><a href="#003654" label="[00:36:54]">&lt;stikonas&gt;</a></span><span class="message">at that time we don't create device nodes yet</span></div><div class="line" id="003713"><span class="nick" style="color:#8dd3c7"><a href="#003713" label="[00:37:13]">&lt;stikonas&gt;</a></span><span class="message">later we create /dev/null which is actually used by the scripts</span></div><div class="line" id="015100"><span class="nick" style="color:#8dd3c7"><a href="#015100" label="[01:51:00]">&lt;stikonas&gt;</a></span><span class="message">fossy: argh, we are still using some generated files for GCC...</span></div><div class="line" id="015143"><span class="nick" style="color:#8dd3c7"><a href="#015143" label="[01:51:43]">&lt;stikonas&gt;</a></span><span class="message">cc: pder</span></div><div class="line" id="015414"><span class="nick" style="color:#8dd3c7"><a href="#015414" label="[01:54:14]">&lt;stikonas&gt;</a></span><span class="message">I think we need to build autogen</span></div><div class="line" id="015519"><span class="nick" style="color:#8dd3c7"><a href="#015519" label="[01:55:19]">&lt;stikonas&gt;</a></span><span class="message">and looks like guile too</span></div><div class="line" id="015531"><span class="nick" style="color:#8dd3c7"><a href="#015531" label="[01:55:31]">&lt;stikonas&gt;</a></span><span class="message">which might be annoying</span></div><div class="line" id="020536"><span class="nick" style="color:#8dd3c7"><a href="#020536" label="[02:05:36]">&lt;stikonas&gt;</a></span><span class="message">ok, I think just two files, everything else is fine, but these two files will be really annoying</span></div><div class="line" id="020542"><span class="nick" style="color:#8dd3c7"><a href="#020542" label="[02:05:42]">&lt;stikonas&gt;</a></span><span class="message">fixinc/fixincl.x and Makefile.in</span></div><div class="line" id="021044"><span class="nick" style="color:#8dd3c7"><a href="#021044" label="[02:10:44]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/issues/78">https://github.com/fosslinux/live-bootstrap/issues/78</a> </span></div><div class="line" id="023016"><span class="nick" style="color:#6b8072"><a href="#023016" label="[02:30:16]">&lt;Hagfish&gt;</a></span><span class="message">wow, what a nasty surprise lurking in gcc</span></div><div class="line" id="023151"><span class="nick" style="color:#6b8072"><a href="#023151" label="[02:31:51]">&lt;Hagfish&gt;</a></span><span class="message">i guess there are no obvious patches/shortcuts that could skip autogen/guile just for those 2 files</span></div><div class="line" id="023916"><span class="nick" style="color:#8dd3c7"><a href="#023916" label="[02:39:16]">&lt;stikonas&gt;</a></span><span class="message">fixincludes might be skippable...</span></div><div class="line" id="023921"><span class="nick" style="color:#8dd3c7"><a href="#023921" label="[02:39:21]">&lt;stikonas&gt;</a></span><span class="message">Makefile.in... not really</span></div><div class="line" id="023928"><span class="nick" style="color:#8dd3c7"><a href="#023928" label="[02:39:28]">&lt;stikonas&gt;</a></span><span class="message">well, unless somebody writes manual Makefile</span></div><div class="line" id="023941"><span class="nick" style="color:#8dd3c7"><a href="#023941" label="[02:39:41]">&lt;stikonas&gt;</a></span><span class="message">downgrading to gcc 3 might be the most practical for now</span></div><div class="line" id="024240"><span class="nick" style="color:#6b8072"><a href="#024240" label="[02:42:40]">&lt;Hagfish&gt;</a></span><span class="message">then gcc3 to make guile?</span></div><div class="line" id="024247"><span class="nick" style="color:#8dd3c7"><a href="#024247" label="[02:42:47]">&lt;stikonas&gt;</a></span><span class="message">possibly...</span></div><div class="line" id="024259"><span class="nick" style="color:#8dd3c7"><a href="#024259" label="[02:42:59]">&lt;stikonas&gt;</a></span><span class="message">haven't investigated yet, just found this issue...</span></div><div class="line" id="024316"><span class="nick" style="color:#8dd3c7"><a href="#024316" label="[02:43:16]">&lt;stikonas&gt;</a></span><span class="message">going to bed now anyway</span></div><div class="line" id="024329"><span class="nick" style="color:#6b8072"><a href="#024329" label="[02:43:29]">&lt;Hagfish&gt;</a></span><span class="message">don't have nightmares :)</span></div><div class="line" id="062328"><span class="nick" style="color:#80b1d3"><a href="#062328" label="[06:23:28]">&lt;siraben&gt;</a></span><span class="message">another bootstrappable Haskell dialect <a rel="nofollow" href="https://github.com/bkomuves/nanohs">https://github.com/bkomuves/nanohs</a> </span></div><div class="line" id="064626"><span class="nick" style="color:#6d2462"><a href="#064626" label="[06:46:26]">&lt;fossy&gt;</a></span><span class="message">neat</span></div><div class="line" id="111731"><span class="nick" style="color:#2e2a4a"><a href="#111731" label="[11:17:31]">&lt;bauen1&gt;</a></span><span class="message">stikonas: in a userns you can't use mknod as far as i know, so i create a dev dir with empty files and bind mount the individual devices (null, zero, urando, random, tty, ptmx)</span></div><div class="line" id="111737"><span class="nick" style="color:#2e2a4a"><a href="#111737" label="[11:17:37]">&lt;bauen1&gt;</a></span><span class="message">and yes the first one fails</span></div><div class="line" id="112212"><span class="nick" style="color:#8dd3c7"><a href="#112212" label="[11:22:12]">&lt;stikonas&gt;</a></span><span class="message">bauen1: that might work temporarily for you, but I'm not sure what will happen with that configure bug that overwrites /dev/null. I guess in a user ns it won't be able to do it</span></div><div class="line" id="112702"><span class="nick" style="color:#2e2a4a"><a href="#112702" label="[11:27:02]">&lt;bauen1&gt;</a></span><span class="message">stikonas: i'm not sure really, because i think the configure script itself actually finishes without issue</span></div><div class="line" id="112705"><span class="nick" style="color:#2e2a4a"><a href="#112705" label="[11:27:05]">&lt;bauen1&gt;</a></span><span class="message">i'll test that</span></div><div class="line" id="112751"><span class="nick" style="color:#8dd3c7"><a href="#112751" label="[11:27:51]">&lt;stikonas&gt;</a></span><span class="message">well, inside normal chroot it creates /dev/null file containing some text</span></div><div class="line" id="112808"><span class="nick" style="color:#8dd3c7"><a href="#112808" label="[11:28:08]">&lt;stikonas&gt;</a></span><span class="message">in later runs we already mknod /dev/null, and configure script overwrites it</span></div><div class="line" id="112858"><span class="nick" style="color:#2e2a4a"><a href="#112858" label="[11:28:58]">&lt;bauen1&gt;</a></span><span class="message">so if it already exists it shouldn't be a problem right ?</span></div><div class="line" id="112928"><span class="nick" style="color:#8dd3c7"><a href="#112928" label="[11:29:28]">&lt;stikonas&gt;</a></span><span class="message">it shouldn't, mknod should actually be skipped</span></div><div class="line" id="112938"><span class="nick" style="color:#8dd3c7"><a href="#112938" label="[11:29:38]">&lt;stikonas&gt;</a></span><span class="message">because all invocations are with test || mknod</span></div><div class="line" id="112958"><span class="nick" style="color:#8dd3c7"><a href="#112958" label="[11:29:58]">&lt;stikonas&gt;</a></span><span class="message">e.g. test -c /dev/null || mknod -m 666 /dev/null c 1 3</span></div><div class="line" id="114731"><span class="nick" style="color:#234e69"><a href="#114731" label="[11:47:31]">&lt;nimaje&gt;</a></span><span class="message">probably it isn't a character special file (from test(1) &quot;-c file       True if file exists and is a character special file.&quot;)</span></div><div class="line" id="115237"><span class="nick" style="color:#8dd3c7"><a href="#115237" label="[11:52:37]">&lt;stikonas&gt;</a></span><span class="message">no, mknod that we create is character special file</span></div><div class="line" id="115250"><span class="nick" style="color:#8dd3c7"><a href="#115250" label="[11:52:50]">&lt;stikonas&gt;</a></span><span class="message">it works fine for us</span></div><div class="line" id="115302"><span class="nick" style="color:#8dd3c7"><a href="#115302" label="[11:53:02]">&lt;stikonas&gt;</a></span><span class="message">it's something in musl's configure script that overwrites it</span></div><div class="line" id="115312"><span class="nick" style="color:#8dd3c7"><a href="#115312" label="[11:53:12]">&lt;stikonas&gt;</a></span><span class="message">possibly broken output redirection...</span></div><div class="line" id="123218"><span class="nick" style="color:#2e2a4a"><a href="#123218" label="[12:32:18]">&lt;bauen1&gt;</a></span><span class="message">stikonas: the configure script does a bunch of redirection to /dev/null and runs cc with outputfile as /dev/null a bunch time, so imo it would make sense to have /dev/null present from the beginning (or at least before building musl)</span></div><div class="line" id="123240"><span class="nick" style="color:#2e2a4a"><a href="#123240" label="[12:32:40]">&lt;bauen1&gt;</a></span><span class="message">and it also uses /dev/null as input when creating temporary files, so it might not except random junk in there</span></div><div class="line" id="123256"><span class="nick" style="color:#8dd3c7"><a href="#123256" label="[12:32:56]">&lt;stikonas&gt;</a></span><span class="message">bauen1: well, we can't create /dev/null too early</span></div><div class="line" id="123309"><span class="nick" style="color:#8dd3c7"><a href="#123309" label="[12:33:09]">&lt;stikonas&gt;</a></span><span class="message">bauen1: in any case, like I said</span></div><div class="line" id="123318"><span class="nick" style="color:#8dd3c7"><a href="#123318" label="[12:33:18]">&lt;stikonas&gt;</a></span><span class="message">presense of /dev/null block device does not matter</span></div><div class="line" id="123325"><span class="nick" style="color:#8dd3c7"><a href="#123325" label="[12:33:25]">&lt;stikonas&gt;</a></span><span class="message">later passes of musl build</span></div><div class="line" id="123339"><span class="nick" style="color:#8dd3c7"><a href="#123339" label="[12:33:39]">&lt;stikonas&gt;</a></span><span class="message">they all replace /dev/null character device with random junk</span></div><div class="line" id="123359"><span class="nick" style="color:#2e2a4a"><a href="#123359" label="[12:33:59]">&lt;bauen1&gt;</a></span><span class="message">well they shouldn't if it's an actual block device ?</span></div><div class="line" id="123413"><span class="nick" style="color:#8dd3c7"><a href="#123413" label="[12:34:13]">&lt;stikonas&gt;</a></span><span class="message">they shouldn't, possibly bug in our bash</span></div><div class="line" id="123418"><span class="nick" style="color:#8dd3c7"><a href="#123418" label="[12:34:18]">&lt;stikonas&gt;</a></span><span class="message">bash is built with mes libc</span></div><div class="line" id="123423"><span class="nick" style="color:#2e2a4a"><a href="#123423" label="[12:34:23]">&lt;bauen1&gt;</a></span><span class="message">ah i see</span></div><div class="line" id="130335"><span class="nick" style="color:#2e2a4a"><a href="#130335" label="[13:03:35]">&lt;bauen1&gt;</a></span><span class="message">but it's very weird trying to debug this error, looks like the `Subprocess error 256` is from kaem ?</span></div><div class="line" id="130352"><span class="nick" style="color:#2e2a4a"><a href="#130352" label="[13:03:52]">&lt;bauen1&gt;</a></span><span class="message">and the echo line i put after the configure doesn't get hit even though the configure script supposedly reached the end</span></div><div class="line" id="130530"><span class="nick" style="color:#2e2a4a"><a href="#130530" label="[13:05:30]">&lt;bauen1&gt;</a></span><span class="message">even printed the last line correctly `creating config.mak... done` so that's quite confusing</span></div><div class="line" id="130930"><span class="nick" style="color:#2e2a4a"><a href="#130930" label="[13:09:30]">&lt;bauen1&gt;</a></span><span class="message">i also don't see any ANOM_ABEND audit log entries in my hosts audit system which is what would happen if some bug caused bash to segfault</span></div><div class="line" id="131819"><span class="nick" style="color:#8dd3c7"><a href="#131819" label="[13:18:19]">&lt;stikonas&gt;</a></span><span class="message">Subprocess error 256 from kaem simply means that bash exited with non-zero exit status, ignore that</span></div><div class="line" id="131904"><span class="nick" style="color:#8dd3c7"><a href="#131904" label="[13:19:04]">&lt;stikonas&gt;</a></span><span class="message">so somehow configure exits eith non-zero code just before it finishes?</span></div><div class="line" id="131916"><span class="nick" style="color:#8dd3c7"><a href="#131916" label="[13:19:16]">&lt;stikonas&gt;</a></span><span class="message">but after config.mak was done</span></div><div class="line" id="132051"><span class="nick" style="color:#8dd3c7"><a href="#132051" label="[13:20:51]">&lt;stikonas&gt;</a></span><span class="message">hmm, although done is the last thing</span></div><div class="line" id="132054"><span class="nick" style="color:#8dd3c7"><a href="#132054" label="[13:20:54]">&lt;stikonas&gt;</a></span><span class="message">in the script</span></div><div class="line" id="132057"><span class="nick" style="color:#2e2a4a"><a href="#132057" label="[13:20:57]">&lt;bauen1&gt;</a></span><span class="message">yes exactly</span></div><div class="line" id="132114"><span class="nick" style="color:#2e2a4a"><a href="#132114" label="[13:21:14]">&lt;bauen1&gt;</a></span><span class="message">i've added some stuff to print me the exit code of the configure script, hopefully that sheds some light on the why</span></div><div class="line" id="132121"><span class="nick" style="color:#2e2a4a"><a href="#132121" label="[13:21:21]">&lt;bauen1&gt;</a></span><span class="message">is that the first time bash is ever run ?</span></div><div class="line" id="132247"><span class="nick" style="color:#2e2a4a"><a href="#132247" label="[13:22:47]">&lt;bauen1&gt;</a></span><span class="message">hm not really</span></div><div class="line" id="132253"><span class="nick" style="color:#2e2a4a"><a href="#132253" label="[13:22:53]">&lt;bauen1&gt;</a></span><span class="message">well let's wait for this run to finish</span></div><div class="line" id="132315"><span class="nick" style="color:#2e2a4a"><a href="#132315" label="[13:23:15]">&lt;bauen1&gt;</a></span><span class="message">perhaps some sort of unit tests for the components could be helpful for debugging but i'm not sure</span></div><div class="line" id="133042"><span class="nick" style="color:#8dd3c7"><a href="#133042" label="[13:30:42]">&lt;stikonas&gt;</a></span><span class="message">yeah, some tests might be useful for debugging, although, most errors are apparent very quickly, as bootstrap process itself is kind of self-testing</span></div><div class="line" id="133058"><span class="nick" style="color:#8dd3c7"><a href="#133058" label="[13:30:58]">&lt;stikonas&gt;</a></span><span class="message">so any error and you are unlikely to build the next thing</span></div><div class="line" id="145913"><span class="nick" style="color:#2e2a4a"><a href="#145913" label="[14:59:13]">&lt;bauen1&gt;</a></span><span class="message">and echoing $? is of the opinion that the configure script exited with code 512</span></div><div class="line" id="150115"><span class="nick" style="color:#6c3d55"><a href="#150115" label="[15:01:15]">&lt;gforce_de1977&gt;</a></span><span class="message">i did not know, that this is even possible, was the opinion, that 255 is max 8-)</span></div><div class="line" id="151640"><span class="nick" style="color:#2e2a4a"><a href="#151640" label="[15:16:40]">&lt;bauen1&gt;</a></span><span class="message">yes, something smells like bugs</span></div><div class="line" id="151707"><span class="nick" style="color:#2e2a4a"><a href="#151707" label="[15:17:07]">&lt;bauen1&gt;</a></span><span class="message">if you've build live-bootstrap in a normal chroot before, what kernel version where you using ?</span></div><div class="line" id="152831"><span class="nick" style="color:#8dd3c7"><a href="#152831" label="[15:28:31]">&lt;stikonas&gt;</a></span><span class="message">bauen1: do you mean in qemu?</span></div><div class="line" id="152841"><span class="nick" style="color:#8dd3c7"><a href="#152841" label="[15:28:41]">&lt;stikonas&gt;</a></span><span class="message">chroot mode just uses whatever your distro is running</span></div><div class="line" id="152901"><span class="nick" style="color:#8dd3c7"><a href="#152901" label="[15:29:01]">&lt;stikonas&gt;</a></span><span class="message">although in qemu I use the same kernel too (but both are self-compiled gentoo kernels)</span></div><div class="line" id="152941"><span class="nick" style="color:#8dd3c7"><a href="#152941" label="[15:29:41]">&lt;stikonas&gt;</a></span><span class="message">bauen1: so 5.10.23-gentoo-gnu but I guess that alone wouldn't say much</span></div><div class="line" id="152943"><span class="nick" style="color:#2e2a4a"><a href="#152943" label="[15:29:43]">&lt;bauen1&gt;</a></span><span class="message">stikonas: both, i'm just trying to figure out if the kernel could play some role (linux 5.10.24-1 the latest from debian unstable)</span></div><div class="line" id="152955"><span class="nick" style="color:#8dd3c7"><a href="#152955" label="[15:29:55]">&lt;stikonas&gt;</a></span><span class="message">unlikely to play any role</span></div><div class="line" id="155443"><span class="nick" style="color:#2e2a4a"><a href="#155443" label="[15:54:43]">&lt;bauen1&gt;</a></span><span class="message">maybe my hardening is messing with it, but i also don't see anything audited in journald</span></div><div class="line" id="155456"><span class="nick" style="color:#2e2a4a"><a href="#155456" label="[15:54:56]">&lt;bauen1&gt;</a></span><span class="message">might be time to spin up a test vm and run it with a normal chroot there</span></div><div class="line" id="164123"><span class="nick" style="color:#2e2a4a"><a href="#164123" label="[16:41:23]">&lt;bauen1&gt;</a></span><span class="message">also something interesting was posted on hn <a rel="nofollow" href="https://news.ycombinator.com/item?id=26591669">https://news.ycombinator.com/item?id=26591669</a>  where a laptop used to build a kernel was compromised and used to tamper with the build kernel for another system</span></div><div class="line" id="170425"><span class="nick" style="color:#6c3d55"><a href="#170425" label="[17:04:25]">&lt;gforce_de1977&gt;</a></span><span class="message">what comes to my mind regarding /dev/null: when we compile a kernel with devtmpfs with automount and fill the initrd with /dev/null (which is a configure/compiletime option) than we dont have to mess with such stuff. we just have a kernel which just knows /dev/null</span></div><div class="line" id="174818"><span class="nick" style="color:#2e2a4a"><a href="#174818" label="[17:48:18]">&lt;bauen1&gt;</a></span><span class="message">how can i escape $ in kaem ? \$ ?</span></div><div class="line" id="174916"><span class="nick" style="color:#2e2a4a"><a href="#174916" label="[17:49:16]">&lt;bauen1&gt;</a></span><span class="message">documentation for how to use kaem seems a bit lacking <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/tree/master/Kaem">https://github.com/oriansj/mescc-tools/tree/master/Kaem</a>  lol</span></div><div class="line" id="175147"><span class="nick" style="color:#2e2a4a"><a href="#175147" label="[17:51:47]">&lt;bauen1&gt;</a></span><span class="message">and if i'm understanding <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/Kaem/variable.c#L228-L292">https://github.com/oriansj/mescc-tools/blob/master/Kaem/variable.c#L228-L292</a>  right it's well basically not possible</span></div><div class="line" id="175247"><span class="nick" style="color:#8dd3c7"><a href="#175247" label="[17:52:47]">&lt;stikonas&gt;</a></span><span class="message">bauen1: escaping in kaem is very limited</span></div><div class="line" id="175311"><span class="nick" style="color:#8dd3c7"><a href="#175311" label="[17:53:11]">&lt;stikonas&gt;</a></span><span class="message">that's why we build bash as soon as possible</span></div><div class="line" id="175344"><span class="nick" style="color:#2e2a4a"><a href="#175344" label="[17:53:44]">&lt;bauen1&gt;</a></span><span class="message">right, but not being able to actually express every ascii character in the file to pass to other commands seems a bit concerning</span></div><div class="line" id="175421"><span class="nick" style="color:#8dd3c7"><a href="#175421" label="[17:54:21]">&lt;stikonas&gt;</a></span><span class="message">well, we hit that with &quot; chars</span></div><div class="line" id="175428"><span class="nick" style="color:#8dd3c7"><a href="#175428" label="[17:54:28]">&lt;stikonas&gt;</a></span><span class="message">fossy then fixed those</span></div><div class="line" id="175502"><span class="nick" style="color:#8dd3c7"><a href="#175502" label="[17:55:02]">&lt;stikonas&gt;</a></span><span class="message">but kaem is really just to get started, so it only has enough features to get us to next step</span></div><div class="line" id="175505"><span class="nick" style="color:#8dd3c7"><a href="#175505" label="[17:55:05]">&lt;stikonas&gt;</a></span><span class="message">which isn't even bash</span></div><div class="line" id="175514"><span class="nick" style="color:#8dd3c7"><a href="#175514" label="[17:55:14]">&lt;stikonas&gt;</a></span><span class="message">as soon as we get make, we switch build srcripts to makefiles</span></div><div class="line" id="175536"><span class="nick" style="color:#8dd3c7"><a href="#175536" label="[17:55:36]">&lt;stikonas&gt;</a></span><span class="message">(called from kaem but it's then very simple call with definitely no escaping needed)</span></div><div class="line" id="180103"><span class="nick" style="color:#6c3d55"><a href="#180103" label="[18:01:03]">&lt;gforce_de1977&gt;</a></span><span class="message">bauen1: which string exactly you want to build? or is it about $?</span></div><div class="line" id="180546"><span class="nick" style="color:#2e2a4a"><a href="#180546" label="[18:05:46]">&lt;bauen1&gt;</a></span><span class="message">gforce_de1977: i just wanted to quickly test bash, but i've now written a proper bash script to do the testing</span></div><div class="line" id="180704"><span class="nick" style="color:#6c3d55"><a href="#180704" label="[18:07:04]">&lt;gforce_de1977&gt;</a></span><span class="message">ok, there is always a work around</span></div><div class="line" id="180808"><span class="nick" style="color:#6c3d55"><a href="#180808" label="[18:08:08]">&lt;gforce_de1977&gt;</a></span><span class="message">because 'kaem' belongs to our initial binary seed, we should not extend, but minimize it</span></div><div class="line" id="180848"><span class="nick" style="color:#6c3d55"><a href="#180848" label="[18:08:48]">&lt;gforce_de1977&gt;</a></span><span class="message">minimize + simplify</span></div><div class="line" id="181127"><span class="nick" style="color:#8dd3c7"><a href="#181127" label="[18:11:27]">&lt;stikonas&gt;</a></span><span class="message">kaem is not really an initial binary seed</span></div><div class="line" id="181138"><span class="nick" style="color:#8dd3c7"><a href="#181138" label="[18:11:38]">&lt;stikonas&gt;</a></span><span class="message">kaem-optional-seed is but it is different program from kaem</span></div><div class="line" id="181214"><span class="nick" style="color:#8dd3c7"><a href="#181214" label="[18:12:14]">&lt;stikonas&gt;</a></span><span class="message">kaem-optional-seed just runs command with arguments, no variables, no escaping, nothing...</span></div><div class="line" id="181225"><span class="nick" style="color:#8dd3c7"><a href="#181225" label="[18:12:25]">&lt;stikonas&gt;</a></span><span class="message">on the other hand kaem is a bit bigger</span></div><div class="line" id="181911"><span class="nick">***</span><span class="message notice">lukedashjr is now known as luke-jr</span></div><div class="line" id="181939"><span class="nick" style="color:#2e2a4a"><a href="#181939" label="[18:19:39]">&lt;bauen1&gt;</a></span><span class="message">gforce_de1977: my line of thinking was more that it should be avoided to introduce such &quot;bootstrap problems&quot; ourselfs (like the inability to output a $ without an existing file that contains this $)</span></div><div class="line" id="182554"><span class="nick">***</span><span class="message notice">lukedashjr is now known as luke-jr</span></div><div class="line" id="190330"><span class="nick" style="color:#6c3d55"><a href="#190330" label="[19:03:30]">&lt;gforce_de1977&gt;</a></span><span class="message">stikonas: bauen1: you are right, thanks for clarification</span></div><div class="line" id="213256"><span class="nick" style="color:#8dd3c7"><a href="#213256" label="[21:32:56]">&lt;stikonas&gt;</a></span><span class="message">fossy: pder: should we temporarily disable build of gcc in live-bootstrap?</span></div><div class="line" id="213316"><span class="nick" style="color:#8dd3c7"><a href="#213316" label="[21:33:16]">&lt;stikonas&gt;</a></span><span class="message">(and I guess bring back some older? bash)</span></div><div class="line" id="214300"><span class="nick">***</span><span class="message notice">lukedashjr is now known as luke-jr</span></div><div class="line" id="215306"><span class="nick">***</span><span class="message notice">lukedashjr is now known as luke-jr</span></div><div class="line" id="215840"><span class="nick" style="color:#d9d9d9"><a href="#215840" label="[21:58:40]">&lt;pder&gt;</a></span><span class="message">stikonas: do you know if fixincludes is an issue, or just Makefile.in?</span></div><div class="line" id="215944"><span class="nick" style="color:#d9d9d9"><a href="#215944" label="[21:59:44]">&lt;pder&gt;</a></span><span class="message">I looked at the git history of Makefile.in and it looks like it started to be autogenerated in 2002</span></div><div class="line" id="220521"><span class="nick" style="color:#d9d9d9"><a href="#220521" label="[22:05:21]">&lt;pder&gt;</a></span><span class="message">getting autogen working is probably a dead end at this point because we need guile and thats probably not possible to bootstrap without significant work</span></div><div class="line" id="220633"><span class="nick" style="color:#d9d9d9"><a href="#220633" label="[22:06:33]">&lt;pder&gt;</a></span><span class="message">maybe autogen could run on mes?  Or we could write some perl to transform Makefile.def and Makefile.tpl into Makefile.in</span></div><div class="line" id="220822"><span class="nick" style="color:#8dd3c7"><a href="#220822" label="[22:08:22]">&lt;stikonas&gt;</a></span><span class="message">pder: I think both</span></div><div class="line" id="220838"><span class="nick" style="color:#8dd3c7"><a href="#220838" label="[22:08:38]">&lt;stikonas&gt;</a></span><span class="message">but in any case, we'll have to bootsrap guile if we want gcc newer than 3</span></div><div class="line" id="220853"><span class="nick" style="color:#8dd3c7"><a href="#220853" label="[22:08:53]">&lt;stikonas&gt;</a></span><span class="message">unless we build C++ compiler with gcc 3 and jump to clang...</span></div><div class="line" id="220914"><span class="nick" style="color:#8dd3c7"><a href="#220914" label="[22:09:14]">&lt;stikonas&gt;</a></span><span class="message">this will very significantly deviate from guix bootstrap though...</span></div><div class="line" id="220928"><span class="nick" style="color:#8dd3c7"><a href="#220928" label="[22:09:28]">&lt;stikonas&gt;</a></span><span class="message">pder: but guile might not be too hard...</span></div><div class="line" id="220952"><span class="nick" style="color:#8dd3c7"><a href="#220952" label="[22:09:52]">&lt;stikonas&gt;</a></span><span class="message">it's just that I'm not very familier with it, there is also that pp-syntax issue that mihi sovled for 3.0.2</span></div><div class="line" id="221000"><span class="nick" style="color:#8dd3c7"><a href="#221000" label="[22:10:00]">&lt;stikonas&gt;</a></span><span class="message">but we probably need to build some other guile version for autogen</span></div><div class="line" id="221028"><span class="nick" style="color:#8dd3c7"><a href="#221028" label="[22:10:28]">&lt;stikonas&gt;</a></span><span class="message">anyway, I think I can move some stuff from after gcc to before, like newer libtool</span></div><div class="line" id="221032"><span class="nick" style="color:#8dd3c7"><a href="#221032" label="[22:10:32]">&lt;stikonas&gt;</a></span><span class="message">probably even xz</span></div><div class="line" id="221158"><span class="nick" style="color:#8dd3c7"><a href="#221158" label="[22:11:58]">&lt;stikonas&gt;</a></span><span class="message">guile definitely needs newer libtool</span></div><div class="line" id="221200"><span class="nick" style="color:#8dd3c7"><a href="#221200" label="[22:12:00]">&lt;stikonas&gt;</a></span><span class="message">but that's fine...</span></div><div class="line" id="221218"><span class="nick" style="color:#8dd3c7"><a href="#221218" label="[22:12:18]">&lt;stikonas&gt;</a></span><span class="message">but if we bootsrap guile early, that might also be useful to guix</span></div><div class="line" id="222704"><span class="nick" style="color:#bc80bd"><a href="#222704" label="[22:27:04]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: kaem, like all pieces I work on are need driven. If you &quot;need&quot; kaem to support \$ in some specific way to do something useful in bootstrapping. I'll add it or show the work around for it. (I try not to add support for features until someone expresses a need for them)</span></div><div class="line" id="223009"><span class="nick" style="color:#bc80bd"><a href="#223009" label="[22:30:09]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: deviations from the guix bootstrap while doing a no-pregen bootstrap seem just the cost of improving Guix's bootstrap</span></div><div class="line" id="223351"><span class="nick" style="color:#bc80bd"><a href="#223351" label="[22:33:51]">&lt;OriansJ&gt;</a></span><span class="message">with a few minor tweaks to paths (into /gnu/store with sha paths) of course</span></div><div class="line" id="224125"><span class="nick" style="color:#6d2462"><a href="#224125" label="[22:41:25]">&lt;fossy&gt;</a></span><span class="message">stikonas: I will look into guile bootstrap today</span></div><div class="line" id="224133"><span class="nick" style="color:#6d2462"><a href="#224133" label="[22:41:33]">&lt;fossy&gt;</a></span><span class="message">I wonder how new it needs to be</span></div><div class="line" id="224152"><span class="nick" style="color:#6d2462"><a href="#224152" label="[22:41:52]">&lt;fossy&gt;</a></span><span class="message">If we can avoid using a version with psyntax entirely then its just another package</span></div><div class="line" id="224245"><span class="nick" style="color:#8dd3c7"><a href="#224245" label="[22:42:45]">&lt;stikonas&gt;</a></span><span class="message">oh, older versions are without psyntax?</span></div><div class="line" id="224254"><span class="nick" style="color:#8dd3c7"><a href="#224254" label="[22:42:54]">&lt;stikonas&gt;</a></span><span class="message">well, at the moment I'm rebasing xz PR beforeGCC</span></div><div class="line" id="224303"><span class="nick" style="color:#8dd3c7"><a href="#224303" label="[22:43:03]">&lt;stikonas&gt;</a></span><span class="message">so we have libtool and new autotools</span></div><div class="line" id="224316"><span class="nick" style="color:#8dd3c7"><a href="#224316" label="[22:43:16]">&lt;stikonas&gt;</a></span><span class="message">tcc on xz fails a bit not maybe fixable</span></div><div class="line" id="224326"><span class="nick" style="color:#8dd3c7"><a href="#224326" label="[22:43:26]">&lt;stikonas&gt;</a></span><span class="message">(it's the same static thing inside array)</span></div><div class="line" id="224337"><span class="nick" style="color:#8dd3c7"><a href="#224337" label="[22:43:37]">&lt;stikonas&gt;</a></span><span class="message">maybe we can find which patch from tcc mob fixes it</span></div><div class="line" id="230014"><span class="nick" style="color:#bc80bd"><a href="#230014" label="[23:00:14]">&lt;OriansJ&gt;</a></span><span class="message">fossy: well the psyntax problem was recently solved.</span></div><div class="line" id="230037"><span class="nick" style="color:#bc80bd"><a href="#230037" label="[23:00:37]">&lt;OriansJ&gt;</a></span><span class="message">(some porting might be required for older versions of guile)</span></div><div class="line" id="231255"><span class="nick" style="color:#bc80bd"><a href="#231255" label="[23:12:55]">&lt;OriansJ&gt;</a></span><span class="message">now if there is other issues with bootstrapping guile without pregen I am unaware of them and they are probably something that need addressing in guix too. (guile devs seemed open to the psyntax bootstrap work; hopefully they upstream it soon and take the maintance work off our plates)</span></div><div class="line" id="234729"><span class="nick" style="color:#6d2462"><a href="#234729" label="[23:47:29]">&lt;fossy&gt;</a></span><span class="message">OriansJ: yeah i know, porting to &lt;3.0 would proabbly be annoying</span></div><div class="line" id="235756"><span class="nick" style="color:#6d2462"><a href="#235756" label="[23:57:56]">&lt;fossy&gt;</a></span><span class="message">stikonas: FWIW, with your libtool in the xz pr, that is now new enough to work with autoreconf :)</span></div><div class="line" id="235902"><span class="nick" style="color:#6d2462"><a href="#235902" label="[23:59:02]">&lt;fossy&gt;</a></span><span class="message">hm, guile 3.0 is going to be pushing the limits of our versions of auto{make,conf} and libtool, needs very new things</span></div><div class="line" id="235906"><span class="nick" style="color:#6d2462"><a href="#235906" label="[23:59:06]">&lt;fossy&gt;</a></span><span class="message">let's see how we go</span></div><div class="line" id="235936"><span class="nick" style="color:#8dd3c7"><a href="#235936" label="[23:59:36]">&lt;stikonas&gt;</a></span><span class="message">fossy: autotools are fine</span></div><div class="line" id="235941"><span class="nick" style="color:#8dd3c7"><a href="#235941" label="[23:59:41]">&lt;stikonas&gt;</a></span><span class="message">I can go a bit further</span></div><div class="line" id="235947"><span class="nick" style="color:#8dd3c7"><a href="#235947" label="[23:59:47]">&lt;stikonas&gt;</a></span><span class="message">I'm now moving libtool before GCC</span></div><div class="line" id="235955"><span class="nick" style="color:#6d2462"><a href="#235955" label="[23:59:55]">&lt;fossy&gt;</a></span><span class="message">stikonas: i'll just follow your formula for autotools lol</span></div><br /></div></body></html>