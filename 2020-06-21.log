<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-06-21.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="004633"><span class="nick">***</span><span class="message notice">terpri_ is now known as terpri</span></div><div class="line" id="024837"><span class="nick" style="color:#8dd3c7"><a href="#024837" label="[02:48:37]">&lt;OriansJ`&gt;</a></span><span class="message">markjenkinsznc: if it makes life any easier for you &quot;technically&quot; HALT is just 0xFF, and NOP is 0x00; I just used 0xFFFFFFFF as HALT to make my disassembler's job easier and I made 0x00000000 as NOP; when I probably should have just defined that as NULL as it is what I ment. Although if I was being exactly true to the spec Knight doesn't support NOP operations and 0x00 was supposed to be an illegal instruction that should trap upon</span></div><div class="line" id="024837"><span class="nick" style="color:#8dd3c7"><a href="#024837" label="[02:48:37]">&lt;OriansJ`&gt;</a></span><span class="message">execution.</span></div><div class="line" id="030243"><span class="nick" style="color:#2e2a4a"><a href="#030243" label="[03:02:43]">&lt;plasma41&gt;</a></span><span class="message">Where can I read more about the Knight TTL architecture?</span></div><div class="line" id="135026"><span class="nick">***</span><span class="message notice">roptat_ is now known as roptat</span></div><div class="line" id="211232"><span class="nick" style="color:#8dd3c7"><a href="#211232" label="[21:12:32]">&lt;OriansJ`&gt;</a></span><span class="message">plasma41: well I was going to implement knight in TTL and that is going to be what is going to be used. (I was planning on doing that after putting Knight on an FPGA via the iCEstorm toolset) It is on the backlog, after I get mes-m2 done.</span></div><div class="line" id="220822"><span class="nick" style="color:#2e2a4a"><a href="#220822" label="[22:08:22]">&lt;plasma41&gt;</a></span><span class="message">OriansJ`: In your talk-notes repository, the file 'bootstrabbable.org' describes knight as &quot;a hardware specification that was implemented back in the 1970s in TTL&quot;. I have been unable to locate this specification. Where is it and could it be linked to from more places that mention knight?</span></div><div class="line" id="230537"><span class="nick" style="color:#8dd3c7"><a href="#230537" label="[23:05:37]">&lt;OriansJ`&gt;</a></span><span class="message">plasma41: fair, it is rather esoteric being a Computer designed by a failed company with only the marketing material surviving. However one must remember the architecture itself isn't important as I could just as easily write the pieces for a PDP-1 or even Magic-1 <a rel="nofollow" href="http://www.magic-1.org/">http://www.magic-1.org/</a>  or a 6502 or z80. It was ultimately selected because it seemed like the architecture least likely to have an existing binary rootkit for.</span></div><div class="line" id="231510"><span class="nick" style="color:#2e2a4a"><a href="#231510" label="[23:15:10]">&lt;plasma41&gt;</a></span><span class="message">OriansJ`: What failed company?</span></div><div class="line" id="231905"><span class="nick" style="color:#8dd3c7"><a href="#231905" label="[23:19:05]">&lt;OriansJ`&gt;</a></span><span class="message">plasma41: good question, I'll have to find that in my notes' git history as it wasn't something I felt needed preservation; as it doesn't relate to the bootstrapping technical details that I thought mattered.</span></div><div class="line" id="232045"><span class="nick" style="color:#8dd3c7"><a href="#232045" label="[23:20:45]">&lt;OriansJ`&gt;</a></span><span class="message">It has been 5years since I last dealt with any of the original materials</span></div><div class="line" id="232154"><span class="nick" style="color:#2e2a4a"><a href="#232154" label="[23:21:54]">&lt;plasma41&gt;</a></span><span class="message">OriansJ`: My thinking is: If there's an existing specification for a TTL computer and if it can be used for bootstrapping, I want to know about it, so I can build one.</span></div><div class="line" id="232306"><span class="nick" style="color:#8dd3c7"><a href="#232306" label="[23:23:06]">&lt;OriansJ`&gt;</a></span><span class="message">plasma41: we already have existing machines readily available for bootstrapping implemented in TTL (PDP-10, VAX, etc) and more impressively Transistor-Diode logic (PDP-1)</span></div><div class="line" id="232347"><span class="nick" style="color:#8dd3c7"><a href="#232347" label="[23:23:47]">&lt;OriansJ`&gt;</a></span><span class="message">just such machines tend to cost $10K-100K to make</span></div><div class="line" id="232408"><span class="nick" style="color:#8dd3c7"><a href="#232408" label="[23:24:08]">&lt;OriansJ`&gt;</a></span><span class="message">and circuit diagrams are rare to say the least</span></div><div class="line" id="232443"><span class="nick" style="color:#8dd3c7"><a href="#232443" label="[23:24:43]">&lt;OriansJ`&gt;</a></span><span class="message">Not to mention the copyright issues associated with such diagrams</span></div><div class="line" id="232602"><span class="nick" style="color:#8dd3c7"><a href="#232602" label="[23:26:02]">&lt;OriansJ`&gt;</a></span><span class="message">Sometimes it is better to start with a clean white sheet and design according to a specification</span></div><div class="line" id="232623"><span class="nick" style="color:#8dd3c7"><a href="#232623" label="[23:26:23]">&lt;OriansJ`&gt;</a></span><span class="message">especially since we want truly libre-hardware</span></div><div class="line" id="233054"><span class="nick" style="color:#8dd3c7"><a href="#233054" label="[23:30:54]">&lt;OriansJ`&gt;</a></span><span class="message">Company name: Knight electronics and the machine's product name was Lilith.</span></div><div class="line" id="233124"><span class="nick" style="color:#2e2a4a"><a href="#233124" label="[23:31:24]">&lt;plasma41&gt;</a></span><span class="message">OriansJ`: Neat, thanks.</span></div><div class="line" id="233232"><span class="nick" style="color:#8dd3c7"><a href="#233232" label="[23:32:32]">&lt;OriansJ`&gt;</a></span><span class="message">a 16bit processor with a rather sparse instruction set because the holes were going to be filled with 32, 64, 128 and 256bit instruction extensions</span></div><div class="line" id="233255"><span class="nick" style="color:#8dd3c7"><a href="#233255" label="[23:32:55]">&lt;OriansJ`&gt;</a></span><span class="message">which is what ultimately killed it in the market (wasteful of RAM)</span></div><div class="line" id="233455"><span class="nick" style="color:#8dd3c7"><a href="#233455" label="[23:34:55]">&lt;OriansJ`&gt;</a></span><span class="message">The knight 32bit follow up was supposed to be called Dawn</span></div><div class="line" id="233530"><span class="nick" style="color:#8dd3c7"><a href="#233530" label="[23:35:30]">&lt;OriansJ`&gt;</a></span><span class="message">Lots of girl code names it seems</span></div><div class="line" id="234032"><span class="nick" style="color:#2e2a4a"><a href="#234032" label="[23:40:32]">&lt;plasma41&gt;</a></span><span class="message">OriansJ`: I can't find anything about Knight Electronics or the Lilith or Dawn computers in web searches. Where did you learn about them?</span></div><div class="line" id="234431"><span class="nick" style="color:#8dd3c7"><a href="#234431" label="[23:44:31]">&lt;OriansJ`&gt;</a></span><span class="message">plasma41: MSU engineering Library on one of my novelty first searches down a row</span></div><div class="line" id="234451"><span class="nick" style="color:#8dd3c7"><a href="#234451" label="[23:44:51]">&lt;OriansJ`&gt;</a></span><span class="message">literally only 16 of the 256 first byte values were used;</span></div><div class="line" id="234822"><span class="nick" style="color:#6b8072"><a href="#234822" label="[23:48:22]">&lt;xentrac&gt;</a></span><span class="message">oh, I had no iea that the Knight CPU came from a company; i thought it was your design</span></div><div class="line" id="234920"><span class="nick" style="color:#6b8072"><a href="#234920" label="[23:49:20]">&lt;xentrac&gt;</a></span><span class="message">I was looking at Wirth's RISC last night, which is probably feasible to implement in TTL (or more reasonably 74Cxx)</span></div><div class="line" id="234946"><span class="nick" style="color:#6b8072"><a href="#234946" label="[23:49:46]">&lt;xentrac&gt;</a></span><span class="message">it *has* been implemented in FPGAs</span></div><div class="line" id="235019"><span class="nick" style="color:#8dd3c7"><a href="#235019" label="[23:50:19]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: well modern CPUs are implemented in FPGAs</span></div><div class="line" id="235032"><span class="nick" style="color:#8dd3c7"><a href="#235032" label="[23:50:32]">&lt;OriansJ`&gt;</a></span><span class="message">So that isn't a low bar</span></div><div class="line" id="235123"><span class="nick" style="color:#8dd3c7"><a href="#235123" label="[23:51:23]">&lt;OriansJ`&gt;</a></span><span class="message">(it is part of the current generation CPU design process); on FPGAs that cost $$$</span></div><div class="line" id="235219"><span class="nick" style="color:#8dd3c7"><a href="#235219" label="[23:52:19]">&lt;OriansJ`&gt;</a></span><span class="message">now if the design was implemented on a $5 FPGA like the iCE40; then I would find that worth while</span></div><div class="line" id="235246"><span class="nick" style="color:#8dd3c7"><a href="#235246" label="[23:52:46]">&lt;OriansJ`&gt;</a></span><span class="message">(The 1K luts version not the 8K luts)</span></div><div class="line" id="235329"><span class="nick" style="color:#8dd3c7"><a href="#235329" label="[23:53:29]">&lt;OriansJ`&gt;</a></span><span class="message">as there are RISC-V designs on the 8K iCE40</span></div><div class="line" id="235554"><span class="nick" style="color:#6b8072"><a href="#235554" label="[23:55:54]">&lt;xentrac&gt;</a></span><span class="message">I didn't know that about RISC-V</span></div><div class="line" id="235611"><span class="nick" style="color:#6b8072"><a href="#235611" label="[23:56:11]">&lt;xentrac&gt;</a></span><span class="message">I only knew about the J1A</span></div><div class="line" id="235626"><span class="nick" style="color:#6b8072"><a href="#235626" label="[23:56:26]">&lt;xentrac&gt;</a></span><span class="message">Wirth's RISC has Oberon running on it</span></div><div class="line" id="235654"><span class="nick" style="color:#8dd3c7"><a href="#235654" label="[23:56:54]">&lt;OriansJ`&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/grahamedgecombe/icicle">https://github.com/grahamedgecombe/icicle</a> </span></div><div class="line" id="235710"><span class="nick" style="color:#6b8072"><a href="#235710" label="[23:57:10]">&lt;xentrac&gt;</a></span><span class="message">it has 16 logic instructions, two memory instructions, branching instructions (from 1 to 64 of them depending on how you count), and a couple of interrupt-related instructions</span></div><div class="line" id="235725"><span class="nick" style="color:#6b8072"><a href="#235725" label="[23:57:25]">&lt;xentrac&gt;</a></span><span class="message">it's reasonably modern</span></div><div class="line" id="235755"><span class="nick" style="color:#8dd3c7"><a href="#235755" label="[23:57:55]">&lt;OriansJ`&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/cliffordwolf/picorv32">https://github.com/cliffordwolf/picorv32</a> </span></div><br /></div></body></html>