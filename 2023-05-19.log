<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-05-19.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="004525"><span class="nick" style="color:#389600"><a href="#004525" label="[00:45:25]">&lt;stikonas&gt;</a></span><span class="message">janneke: got some partial success with scaffold/hello.c</span></div><div class="line" id="004543"><span class="nick" style="color:#389600"><a href="#004543" label="[00:45:43]">&lt;stikonas&gt;</a></span><span class="message">it compiles, runs and exists with 42 but didn't print anything</span></div><div class="line" id="004650"><span class="nick" style="color:#389600"><a href="#004650" label="[00:46:50]">&lt;stikonas&gt;</a></span><span class="message">so I will have to debug what went wrong with printing</span></div><div class="line" id="011514"><span class="nick" style="color:#389600"><a href="#011514" label="[01:15:14]">&lt;stikonas&gt;</a></span><span class="message">hmm, printing works if I comment out environ = envp in __init_io</span></div><div class="line" id="011555"><span class="nick" style="color:#389600"><a href="#011555" label="[01:15:55]">&lt;stikonas&gt;</a></span><span class="message">probably something wrong with crt1.c then...</span></div><div class="line" id="022829"><span class="nick" style="color:#389600"><a href="#022829" label="[02:28:29]">&lt;stikonas&gt;</a></span><span class="message">oh, it's actually variable padding that is broken...</span></div><div class="line" id="022853"><span class="nick" style="color:#389600"><a href="#022853" label="[02:28:53]">&lt;stikonas&gt;</a></span><span class="message">!0x00 is encoded to .00000000 which ends up being empty in binary</span></div><div class="line" id="025902"><span class="nick" style="color:#389600"><a href="#025902" label="[02:59:02]">&lt;stikonas&gt;</a></span><span class="message">it's coming from <a rel="nofollow" href="https://gitlab.com/janneke/mes/-/blob/wip-riscv/module/mescc/M1.scm#L139">https://gitlab.com/janneke/mes/-/blob/wip-riscv/module/mescc/M1.scm#L139</a>  ...</span></div><div class="line" id="030033"><span class="nick" style="color:#8dd3c7"><a href="#030033" label="[03:00:33]">&lt;oriansj&gt;</a></span><span class="message">stikonas, janneke wouldn't the syscall numbers be best defined in the C library and thus asm (&quot;li_____%a7,SYS_write&quot;); would become asm (&quot;rd_a7 !&quot; SYSCALL_WRITE &quot; addi&quot;);</span></div><div class="line" id="030308"><span class="nick" style="color:#8dd3c7"><a href="#030308" label="[03:03:08]">&lt;oriansj&gt;</a></span><span class="message">Irvise_: well rain1 did a bit of work with TCC to get it into a state where it could compile GCC again (it for a bit there lost that ability)</span></div><div class="line" id="030336"><span class="nick" style="color:#389600"><a href="#030336" label="[03:03:36]">&lt;stikonas&gt;</a></span><span class="message">oriansj: we do have them in syscall library</span></div><div class="line" id="030341"><span class="nick" style="color:#389600"><a href="#030341" label="[03:03:41]">&lt;stikonas&gt;</a></span><span class="message">I might come back to it later</span></div><div class="line" id="030403"><span class="nick" style="color:#389600"><a href="#030403" label="[03:04:03]">&lt;stikonas&gt;</a></span><span class="message">oriansj: though at the moment C library defines them as #defines</span></div><div class="line" id="030406"><span class="nick" style="color:#389600"><a href="#030406" label="[03:04:06]">&lt;stikonas&gt;</a></span><span class="message">so it's not a string</span></div><div class="line" id="030443"><span class="nick" style="color:#389600"><a href="#030443" label="[03:04:43]">&lt;stikonas&gt;</a></span><span class="message">anyway, I don't think I'll resolve that mescc global variable padding issue today</span></div><div class="line" id="030559"><span class="nick" style="color:#389600"><a href="#030559" label="[03:05:59]">&lt;stikonas&gt;</a></span><span class="message">there is a hack to replace ! with % and overpad everything</span></div><div class="line" id="030602"><span class="nick" style="color:#389600"><a href="#030602" label="[03:06:02]">&lt;stikonas&gt;</a></span><span class="message">but it's a bit ugly</span></div><div class="line" id="030915"><span class="nick" style="color:#8dd3c7"><a href="#030915" label="[03:09:15]">&lt;oriansj&gt;</a></span><span class="message">stikonas: no you missed what I am pointing out</span></div><div class="line" id="030937"><span class="nick" style="color:#8dd3c7"><a href="#030937" label="[03:09:37]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1280621/">https://paste.debian.net/1280621/</a> </span></div><div class="line" id="031004"><span class="nick" style="color:#2e2a4a"><a href="#031004" label="[03:10:04]">&lt;stikonas[m]&gt;</a></span><span class="message">Yes, that does work</span></div><div class="line" id="031011"><span class="nick" style="color:#8dd3c7"><a href="#031011" label="[03:10:11]">&lt;oriansj&gt;</a></span><span class="message">you just do #DEFINE SYSCALL_WRITE &quot;64&quot;</span></div><div class="line" id="031025"><span class="nick" style="color:#2e2a4a"><a href="#031025" label="[03:10:25]">&lt;stikonas[m]&gt;</a></span><span class="message">But currently meslibc has 42 instead of &quot;42&quot;</span></div><div class="line" id="031037"><span class="nick" style="color:#2e2a4a"><a href="#031037" label="[03:10:37]">&lt;stikonas[m]&gt;</a></span><span class="message">Oh but that can be solves</span></div><div class="line" id="031049"><span class="nick" style="color:#2e2a4a"><a href="#031049" label="[03:10:49]">&lt;stikonas[m]&gt;</a></span><span class="message">I can just add</span></div><div class="line" id="031105"><span class="nick" style="color:#8dd3c7"><a href="#031105" label="[03:11:05]">&lt;oriansj&gt;</a></span><span class="message">inside of #ifdef block to determine what architecture uses which values</span></div><div class="line" id="031113"><span class="nick" style="color:#2e2a4a"><a href="#031113" label="[03:11:13]">&lt;stikonas[m]&gt;</a></span><span class="message">fputs(&quot;hello &quot;'SYSCALL_HUH&quot;&quot; back&quot;, stdout)</span></div><div class="line" id="031139"><span class="nick" style="color:#2e2a4a"><a href="#031139" label="[03:11:39]">&lt;stikonas[m]&gt;</a></span><span class="message">oriansj: anyway, the bigger issue is global variable padding with zeroes</span></div><div class="line" id="031210"><span class="nick" style="color:#2e2a4a"><a href="#031210" label="[03:12:10]">&lt;stikonas[m]&gt;</a></span><span class="message">mescc just prints required number of !0x00</span></div><div class="line" id="031236"><span class="nick" style="color:#2e2a4a"><a href="#031236" label="[03:12:36]">&lt;stikonas[m]&gt;</a></span><span class="message">Which is noop in word based hex2...</span></div><div class="line" id="031408"><span class="nick" style="color:#8dd3c7"><a href="#031408" label="[03:14:08]">&lt;oriansj&gt;</a></span><span class="message">well we could switch it to the padding in M1 (aka &lt;100 does 100 null bytes)</span></div><div class="line" id="031503"><span class="nick" style="color:#2e2a4a"><a href="#031503" label="[03:15:03]">&lt;stikonas[m]&gt;</a></span><span class="message">We should discuss it with janneke  anyway...</span></div><div class="line" id="031506"><span class="nick" style="color:#8dd3c7"><a href="#031506" label="[03:15:06]">&lt;oriansj&gt;</a></span><span class="message">but if the goal is to padd to alignment &lt; will work</span></div><div class="line" id="031531"><span class="nick" style="color:#2e2a4a"><a href="#031531" label="[03:15:31]">&lt;stikonas[m]&gt;</a></span><span class="message">Alignment is optional in mescc right now</span></div><div class="line" id="031629"><span class="nick" style="color:#8dd3c7"><a href="#031629" label="[03:16:29]">&lt;oriansj&gt;</a></span><span class="message">but alignment support is required in hex2 and padding support is required in M1</span></div><div class="line" id="031629"><span class="nick" style="color:#2e2a4a"><a href="#031629" label="[03:16:29]">&lt;stikonas[m]&gt;</a></span><span class="message">But it will print wither sizeof(var) of !0x00 or register size of !0x00</span></div><div class="line" id="031716"><span class="nick" style="color:#8dd3c7"><a href="#031716" label="[03:17:16]">&lt;oriansj&gt;</a></span><span class="message">so just output &lt;sizeof(var)</span></div><div class="line" id="031744"><span class="nick" style="color:#8dd3c7"><a href="#031744" label="[03:17:44]">&lt;oriansj&gt;</a></span><span class="message">if sizeof(var) is 42 =&gt; &lt;42</span></div><div class="line" id="031803"><span class="nick" style="color:#2e2a4a"><a href="#031803" label="[03:18:03]">&lt;stikonas[m]&gt;</a></span><span class="message">Yeah, that might work</span></div><div class="line" id="031827"><span class="nick" style="color:#2e2a4a"><a href="#031827" label="[03:18:27]">&lt;stikonas[m]&gt;</a></span><span class="message">Though will still need rewriting that bit of mescc</span></div><div class="line" id="031901"><span class="nick" style="color:#2e2a4a"><a href="#031901" label="[03:19:01]">&lt;stikonas[m]&gt;</a></span><span class="message">I guess here <a rel="nofollow" href="https://gitlab.com/janneke/mes/-/blob/wip-riscv/module/mescc/M1.scm#L233">https://gitlab.com/janneke/mes/-/blob/wip-riscv/module/mescc/M1.scm#L233</a> </span></div><div class="line" id="031924"><span class="nick" style="color:#8dd3c7"><a href="#031924" label="[03:19:24]">&lt;oriansj&gt;</a></span><span class="message">but it would probably simplify things as no need to loop to produce a block of !0x00</span></div><div class="line" id="031952"><span class="nick" style="color:#2e2a4a"><a href="#031952" label="[03:19:52]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, it's scheme..., so no loop already</span></div><div class="line" id="032021"><span class="nick" style="color:#2e2a4a"><a href="#032021" label="[03:20:21]">&lt;stikonas[m]&gt;</a></span><span class="message">It just creates a list of (0 0 0...) with that iota</span></div><div class="line" id="032058"><span class="nick" style="color:#2e2a4a"><a href="#032058" label="[03:20:58]">&lt;stikonas[m]&gt;</a></span><span class="message">And there is another function that  converts numbers to M1...</span></div><div class="line" id="032129"><span class="nick" style="color:#2e2a4a"><a href="#032129" label="[03:21:29]">&lt;stikonas[m]&gt;</a></span><span class="message">Quite a bit different from how M2-Planet emits code...</span></div><div class="line" id="032148"><span class="nick" style="color:#8dd3c7"><a href="#032148" label="[03:21:48]">&lt;oriansj&gt;</a></span><span class="message">yep</span></div><div class="line" id="032221"><span class="nick" style="color:#2e2a4a"><a href="#032221" label="[03:22:21]">&lt;stikonas[m]&gt;</a></span><span class="message">Though after a few days it's getting a bit easier to write lisp...</span></div><div class="line" id="033043"><span class="nick" style="color:#8dd3c7"><a href="#033043" label="[03:30:43]">&lt;oriansj&gt;</a></span><span class="message">yeah, the hardest bit of using Lisp is just remembering the names and the varargs behavior of functions</span></div><div class="line" id="034320"><span class="nick" style="color:#6b8072"><a href="#034320" label="[03:43:20]">&lt;sam_&gt;</a></span><span class="message">haha yes</span></div><div class="line" id="034326"><span class="nick" style="color:#6b8072"><a href="#034326" label="[03:43:26]">&lt;sam_&gt;</a></span><span class="message">glad it's not just me :)</span></div><div class="line" id="065901"><span class="nick" style="color:#80b1d3"><a href="#065901" label="[06:59:01]">&lt;janneke&gt;</a></span><span class="message">&quot;&lt;stikonas&gt; [23:45:25] janneke: got some partial success with scaffold/hello.c&quot;</span></div><div class="line" id="065903"><span class="nick" style="color:#80b1d3"><a href="#065903" label="[06:59:03]">&lt;janneke&gt;</a></span><span class="message">\o/</span></div><div class="line" id="070055"><span class="nick" style="color:#80b1d3"><a href="#070055" label="[07:00:55]">&lt;janneke&gt;</a></span><span class="message">oriansj, stikonas[m]: syscall defines for x86: <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/mes.git/tree/lib/x86-mes/x86.M1#n327">https://git.savannah.gnu.org/cgit/mes.git/tree/lib/x86-mes/x86.M1#n327</a> </span></div><div class="line" id="185719"><span class="nick" style="color:#6d2462"><a href="#185719" label="[18:57:19]">&lt;muurkha&gt;</a></span><span class="message">hi joeyh_, thanks for writing git-annex and like a third of Debian</span></div><div class="line" id="190659"><span class="nick" style="color:#234e69"><a href="#190659" label="[19:06:59]">&lt;[exa]&gt;</a></span><span class="message">&lt;3</span></div><div class="line" id="212031"><span class="nick" style="color:#389600"><a href="#212031" label="[21:20:31]">&lt;stikonas&gt;</a></span><span class="message">oriansj, janneke: I think I found a reasonably nice way to write out those riscv syscalls</span></div><div class="line" id="212057"><span class="nick" style="color:#389600"><a href="#212057" label="[21:20:57]">&lt;stikonas&gt;</a></span><span class="message">oriansj's way didn't work I think because in mescc multiple strings are not concatenated, it has to be a single line string</span></div><div class="line" id="212137"><span class="nick" style="color:#389600"><a href="#212137" label="[21:21:37]">&lt;stikonas&gt;</a></span><span class="message">but I managed to sort it out using macros</span></div><div class="line" id="212146"><span class="nick" style="color:#389600"><a href="#212146" label="[21:21:46]">&lt;stikonas&gt;</a></span><span class="message">e.g. now it looks like asm(RISCV_SYSCALL(SYS_write));</span></div><div class="line" id="212246"><span class="nick" style="color:#389600"><a href="#212246" label="[21:22:46]">&lt;stikonas&gt;</a></span><span class="message">amd then RISCV_SYSCALL is define via</span></div><div class="line" id="212248"><span class="nick" style="color:#389600"><a href="#212248" label="[21:22:48]">&lt;stikonas&gt;</a></span><span class="message">#define MAKESTRING(s) #s</span></div><div class="line" id="212250"><span class="nick" style="color:#389600"><a href="#212250" label="[21:22:50]">&lt;stikonas&gt;</a></span><span class="message">#define MAKESTRING2(str) MAKESTRING(rd_a7 ! ## str addi)</span></div><div class="line" id="212251"><span class="nick" style="color:#389600"><a href="#212251" label="[21:22:51]">&lt;stikonas&gt;</a></span><span class="message">#define RISCV_SYSCALL(str) MAKESTRING2(str</span></div><div class="line" id="212348"><span class="nick" style="color:#389600"><a href="#212348" label="[21:23:48]">&lt;stikonas&gt;</a></span><span class="message">so this way we only need to have one canonical place for syscall numbers (just in syscall.h)</span></div><div class="line" id="212443"><span class="nick" style="color:#389600"><a href="#212443" label="[21:24:43]">&lt;stikonas&gt;</a></span><span class="message">well, there is probably another copy in m2 folder but that's unavoidable, M2-Planet is not capable of parsing such complex macros</span></div><div class="line" id="212613"><span class="nick" style="color:#389600"><a href="#212613" label="[21:26:13]">&lt;stikonas&gt;</a></span><span class="message">still need to deal with the other problem...</span></div><div class="line" id="212628"><span class="nick" style="color:#389600"><a href="#212628" label="[21:26:28]">&lt;stikonas&gt;</a></span><span class="message">that is adding zeroes to store global variables</span></div><div class="line" id="231337"><span class="nick" style="color:#389600"><a href="#231337" label="[23:13:37]">&lt;stikonas&gt;</a></span><span class="message">hmm, I think I should actually more or less port M2-Planet's padding/global variable initialization code to mescc...</span></div><br /></div></body></html>