<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-02-15.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="002347"><span class="nick" style="color:#8dd3c7"><a href="#002347" label="[00:23:47]">&lt;fossy&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/pull/7">https://github.com/oriansj/mescc-tools/pull/7</a> </span></div><div class="line" id="002401"><span class="nick" style="color:#8dd3c7"><a href="#002401" label="[00:24:01]">&lt;fossy&gt;</a></span><span class="message">;)</span></div><div class="line" id="005909"><span class="nick" style="color:#2e2a4a"><a href="#005909" label="[00:59:09]">&lt;OriansJ&gt;</a></span><span class="message">fossy: merged</span></div><div class="line" id="005916"><span class="nick" style="color:#2e2a4a"><a href="#005916" label="[00:59:16]">&lt;OriansJ&gt;</a></span><span class="message">thank you</span></div><div class="line" id="010935"><span class="nick" style="color:#6b8072"><a href="#010935" label="[01:09:35]">&lt;dddddd&gt;</a></span><span class="message">cooperation from some kernel would be great, but it's not necessary</span></div><div class="line" id="011012"><span class="nick" style="color:#6b8072"><a href="#011012" label="[01:10:12]">&lt;dddddd&gt;</a></span><span class="message">M2-Planet compatible from scratch makes some sense too</span></div><div class="line" id="011720"><span class="nick" style="color:#2e2a4a"><a href="#011720" label="[01:17:20]">&lt;OriansJ&gt;</a></span><span class="message">fossy: don't forget to do &quot;make kaem&quot; when testing</span></div><div class="line" id="011752"><span class="nick" style="color:#2e2a4a"><a href="#011752" label="[01:17:52]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: to a degree but it wouldn't be the first program to be converted to be built via M2-Planet</span></div><div class="line" id="011830"><span class="nick" style="color:#6b8072"><a href="#011830" label="[01:18:30]">&lt;dddddd&gt;</a></span><span class="message">who updates mescc-tools at savannah.nongnu?</span></div><div class="line" id="011908"><span class="nick" style="color:#2e2a4a"><a href="#011908" label="[01:19:08]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: that would be me</span></div><div class="line" id="011934"><span class="nick" style="color:#6b8072"><a href="#011934" label="[01:19:34]">&lt;dddddd&gt;</a></span><span class="message">ok, I'll mirror your repo meanwhile</span></div><div class="line" id="012019"><span class="nick" style="color:#2e2a4a"><a href="#012019" label="[01:20:19]">&lt;OriansJ&gt;</a></span><span class="message">the savannah repo is the official; the github is for quick merges and pull requests</span></div><div class="line" id="012044"><span class="nick" style="color:#2e2a4a"><a href="#012044" label="[01:20:44]">&lt;OriansJ&gt;</a></span><span class="message">(I am far more willing to have a broken commit on github than on savannah)</span></div><div class="line" id="015930"><span class="nick" style="color:#8dd3c7"><a href="#015930" label="[01:59:30]">&lt;fossy&gt;</a></span><span class="message">ah, yes</span></div><div class="line" id="015940"><span class="nick">***</span><span class="message notice">fosslinux is now known as fossy</span></div><div class="line" id="020854"><span class="nick" style="color:#80b1d3"><a href="#020854" label="[02:08:54]">&lt;OriansJ`&gt;</a></span><span class="message">I'll be updating mescc-tools-seed shortly</span></div><div class="line" id="022511"><span class="nick" style="color:#80b1d3"><a href="#022511" label="[02:25:11]">&lt;OriansJ`&gt;</a></span><span class="message">patches are up</span></div><div class="line" id="025301"><span class="nick">***</span><span class="message notice">OriansJ` is now known as OriansJ</span></div><div class="line" id="031633"><span class="nick" style="color:#2e2a4a"><a href="#031633" label="[03:16:33]">&lt;OriansJ&gt;</a></span><span class="message">I guess it is time for mescc-tools-seed to have some test answers</span></div><div class="line" id="032513"><span class="nick" style="color:#2e2a4a"><a href="#032513" label="[03:25:13]">&lt;OriansJ&gt;</a></span><span class="message">now make clean test-amd64 and make clean test-x86 will do what is expected</span></div><div class="line" id="032558"><span class="nick" style="color:#2e2a4a"><a href="#032558" label="[03:25:58]">&lt;OriansJ&gt;</a></span><span class="message">patches are up</span></div><div class="line" id="033728"><span class="nick" style="color:#2e2a4a"><a href="#033728" label="[03:37:28]">&lt;OriansJ&gt;</a></span><span class="message">people please take the time to check if mescc-tools-seed tests pass locally for you</span></div><div class="line" id="095036"><span class="nick" style="color:#2e2a4a"><a href="#095036" label="[09:50:36]">&lt;OriansJ&gt;</a></span><span class="message">good morning</span></div><div class="line" id="095151"><span class="nick" style="color:#8dd3c7"><a href="#095151" label="[09:51:51]">&lt;fossy&gt;</a></span><span class="message">Good morning OriansJ</span></div><div class="line" id="095234"><span class="nick" style="color:#6d2462"><a href="#095234" label="[09:52:34]">&lt;janneke&gt;</a></span><span class="message">good morning OriansJ. fossy</span></div><div class="line" id="095247"><span class="nick" style="color:#8dd3c7"><a href="#095247" label="[09:52:47]">&lt;fossy&gt;</a></span><span class="message">Well its evening here</span></div><div class="line" id="095252"><span class="nick" style="color:#8dd3c7"><a href="#095252" label="[09:52:52]">&lt;fossy&gt;</a></span><span class="message">but yeah</span></div><div class="line" id="095254"><span class="nick" style="color:#8dd3c7"><a href="#095254" label="[09:52:54]">&lt;fossy&gt;</a></span><span class="message">morning</span></div><div class="line" id="095341"><span class="nick" style="color:#6d2462"><a href="#095341" label="[09:53:41]">&lt;janneke&gt;</a></span><span class="message">also a good evening, all :-)</span></div><div class="line" id="095513"><span class="nick" style="color:#8dd3c7"><a href="#095513" label="[09:55:13]">&lt;fossy&gt;</a></span><span class="message">Gosh shells are annoying</span></div><div class="line" id="095527"><span class="nick" style="color:#8dd3c7"><a href="#095527" label="[09:55:27]">&lt;fossy&gt;</a></span><span class="message">parsing strings in m2 planet is hella annoying</span></div><div class="line" id="095602"><span class="nick" style="color:#8dd3c7"><a href="#095602" label="[09:56:02]">&lt;fossy&gt;</a></span><span class="message">here I was thinking that I had working variable substitution but noo not if its in the middle of a token</span></div><div class="line" id="100008"><span class="nick" style="color:#6d2462"><a href="#100008" label="[10:00:08]">&lt;janneke&gt;</a></span><span class="message">yeah, i have great expectations for gash</span></div><div class="line" id="101929"><span class="nick" style="color:#2e2a4a"><a href="#101929" label="[10:19:29]">&lt;OriansJ&gt;</a></span><span class="message">fossy: well M2-Planet lacks alot of string handling functions because I was able to engineer my way around having them.</span></div><div class="line" id="101946"><span class="nick" style="color:#8dd3c7"><a href="#101946" label="[10:19:46]">&lt;fossy&gt;</a></span><span class="message">OriansJ: understandably</span></div><div class="line" id="102005"><span class="nick" style="color:#2e2a4a"><a href="#102005" label="[10:20:05]">&lt;OriansJ&gt;</a></span><span class="message">now I can help you make some string primitives that help you if you would like</span></div><div class="line" id="102011"><span class="nick" style="color:#8dd3c7"><a href="#102011" label="[10:20:11]">&lt;fossy&gt;</a></span><span class="message">OriansJ: and well m2 planet isnt really made for string parsing</span></div><div class="line" id="102033"><span class="nick" style="color:#8dd3c7"><a href="#102033" label="[10:20:33]">&lt;fossy&gt;</a></span><span class="message">hm, I think ill be ok</span></div><div class="line" id="102038"><span class="nick" style="color:#2e2a4a"><a href="#102038" label="[10:20:38]">&lt;OriansJ&gt;</a></span><span class="message">fossy: ummm, that is basically the heart of what a C compiler is</span></div><div class="line" id="102046"><span class="nick" style="color:#8dd3c7"><a href="#102046" label="[10:20:46]">&lt;fossy&gt;</a></span><span class="message">I just need to be more careful with edge cases</span></div><div class="line" id="102137"><span class="nick" style="color:#2e2a4a"><a href="#102137" label="[10:21:37]">&lt;OriansJ&gt;</a></span><span class="message">well one can always add restrictions to catch such cases.</span></div><div class="line" id="102147"><span class="nick" style="color:#8dd3c7"><a href="#102147" label="[10:21:47]">&lt;fossy&gt;</a></span><span class="message">uh?</span></div><div class="line" id="102158"><span class="nick" style="color:#8dd3c7"><a href="#102158" label="[10:21:58]">&lt;fossy&gt;</a></span><span class="message">which c compilers are developed around strings?</span></div><div class="line" id="102246"><span class="nick" style="color:#2e2a4a"><a href="#102246" label="[10:22:46]">&lt;OriansJ&gt;</a></span><span class="message">what do you think &quot;if&quot; &quot;while&quot; &quot;asm&quot; and &quot;goto&quot; are?</span></div><div class="line" id="102336"><span class="nick" style="color:#2e2a4a"><a href="#102336" label="[10:23:36]">&lt;OriansJ&gt;</a></span><span class="message">strings that when matched case the state machine to perform specific generation of assembly</span></div><div class="line" id="102505"><span class="nick" style="color:#8dd3c7"><a href="#102505" label="[10:25:05]">&lt;fossy&gt;</a></span><span class="message">oh, right, I get what you mean</span></div><div class="line" id="102525"><span class="nick" style="color:#2e2a4a"><a href="#102525" label="[10:25:25]">&lt;OriansJ&gt;</a></span><span class="message">also you know you can create a custom struct for the storage of shell variables right?</span></div><div class="line" id="102559"><span class="nick" style="color:#8dd3c7"><a href="#102559" label="[10:25:59]">&lt;fossy&gt;</a></span><span class="message">yes, havent done that yet because I havent needed it</span></div><div class="line" id="102613"><span class="nick" style="color:#2e2a4a"><a href="#102613" label="[10:26:13]">&lt;OriansJ&gt;</a></span><span class="message">then only have to handle string generation at one place and the string assignment at another.</span></div><div class="line" id="102617"><span class="nick" style="color:#8dd3c7"><a href="#102617" label="[10:26:17]">&lt;fossy&gt;</a></span><span class="message">but I think that is a good idea in the long run</span></div><div class="line" id="102626"><span class="nick" style="color:#8dd3c7"><a href="#102626" label="[10:26:26]">&lt;fossy&gt;</a></span><span class="message">hm, yes</span></div><div class="line" id="102632"><span class="nick" style="color:#8dd3c7"><a href="#102632" label="[10:26:32]">&lt;fossy&gt;</a></span><span class="message">would make the code rather cleaner</span></div><div class="line" id="102656"><span class="nick" style="color:#2e2a4a"><a href="#102656" label="[10:26:56]">&lt;OriansJ&gt;</a></span><span class="message">think far less about code, far more about what data structures map well to the problem space</span></div><div class="line" id="102729"><span class="nick" style="color:#8dd3c7"><a href="#102729" label="[10:27:29]">&lt;fossy&gt;</a></span><span class="message">wise words</span></div><div class="line" id="102742"><span class="nick" style="color:#8dd3c7"><a href="#102742" label="[10:27:42]">&lt;fossy&gt;</a></span><span class="message">I have never thought enough about the high level overview of a program</span></div><div class="line" id="102755"><span class="nick" style="color:#8dd3c7"><a href="#102755" label="[10:27:55]">&lt;fossy&gt;</a></span><span class="message">and data structures etc</span></div><div class="line" id="102806"><span class="nick" style="color:#2e2a4a"><a href="#102806" label="[10:28:06]">&lt;OriansJ&gt;</a></span><span class="message">with the right data structures, the code become simple to understand and reason about. Remember the goal isn't efficiency but clarity</span></div><div class="line" id="102832"><span class="nick" style="color:#8dd3c7"><a href="#102832" label="[10:28:32]">&lt;fossy&gt;</a></span><span class="message">certinaly for this project</span></div><div class="line" id="102857"><span class="nick" style="color:#2e2a4a"><a href="#102857" label="[10:28:57]">&lt;OriansJ&gt;</a></span><span class="message">fossy: for every project that isn't super computing</span></div><div class="line" id="102921"><span class="nick" style="color:#2e2a4a"><a href="#102921" label="[10:29:21]">&lt;OriansJ&gt;</a></span><span class="message">Code is for humans to read and for computers to incidentally execute</span></div><div class="line" id="103001"><span class="nick" style="color:#8dd3c7"><a href="#103001" label="[10:30:01]">&lt;fossy&gt;</a></span><span class="message">Hm yes</span></div><div class="line" id="103056"><span class="nick" style="color:#2e2a4a"><a href="#103056" label="[10:30:56]">&lt;OriansJ&gt;</a></span><span class="message">If the code is clean and simple, it is easy to make fast</span></div><div class="line" id="103225"><span class="nick" style="color:#2e2a4a"><a href="#103225" label="[10:32:25]">&lt;OriansJ&gt;</a></span><span class="message">M2-Planet (built via gcc) can compile over 100KLOC/s</span></div><div class="line" id="103316"><span class="nick" style="color:#2e2a4a"><a href="#103316" label="[10:33:16]">&lt;OriansJ&gt;</a></span><span class="message">No fancy tricks, no crazy optimizations; just clean code doing simple things with a clean data structure</span></div><div class="line" id="103522"><span class="nick" style="color:#8dd3c7"><a href="#103522" label="[10:35:22]">&lt;fossy&gt;</a></span><span class="message"> Righr</span></div><div class="line" id="103524"><span class="nick" style="color:#8dd3c7"><a href="#103524" label="[10:35:24]">&lt;fossy&gt;</a></span><span class="message">right</span></div><div class="line" id="103536"><span class="nick" style="color:#8dd3c7"><a href="#103536" label="[10:35:36]">&lt;fossy&gt;</a></span><span class="message">Like using a linked list for tokens</span></div><div class="line" id="103648"><span class="nick" style="color:#2e2a4a"><a href="#103648" label="[10:36:48]">&lt;OriansJ&gt;</a></span><span class="message">there are faster data structures, more efficient sort implementations, etc but by keeping everything simple it makes future conversions possible and easy.</span></div><div class="line" id="103834"><span class="nick" style="color:#2e2a4a"><a href="#103834" label="[10:38:34]">&lt;OriansJ&gt;</a></span><span class="message">understanding of what you are doing and why is key to writing the code that will do the right thing.</span></div><div class="line" id="104147"><span class="nick" style="color:#2e2a4a"><a href="#104147" label="[10:41:47]">&lt;OriansJ&gt;</a></span><span class="message">fossy: have you read K&amp;R's C book?</span></div><div class="line" id="104201"><span class="nick" style="color:#8dd3c7"><a href="#104201" label="[10:42:01]">&lt;fossy&gt;</a></span><span class="message">I have not</span></div><div class="line" id="104232"><span class="nick" style="color:#8dd3c7"><a href="#104232" label="[10:42:32]">&lt;fossy&gt;</a></span><span class="message">Oh wait</span></div><div class="line" id="104235"><span class="nick" style="color:#8dd3c7"><a href="#104235" label="[10:42:35]">&lt;fossy&gt;</a></span><span class="message">Ive read parts</span></div><div class="line" id="104246"><span class="nick" style="color:#8dd3c7"><a href="#104246" label="[10:42:46]">&lt;fossy&gt;</a></span><span class="message">But not all</span></div><div class="line" id="104257"><span class="nick" style="color:#8dd3c7"><a href="#104257" label="[10:42:57]">&lt;fossy&gt;</a></span><span class="message">And quite a while ago</span></div><div class="line" id="104414"><span class="nick" style="color:#2e2a4a"><a href="#104414" label="[10:44:14]">&lt;OriansJ&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1130693/">https://paste.debian.net/1130693/</a> </span></div><div class="line" id="104449"><span class="nick" style="color:#2e2a4a"><a href="#104449" label="[10:44:49]">&lt;OriansJ&gt;</a></span><span class="message">the first rule about art is you must know the rules before you can break the rules.</span></div><div class="line" id="104506"><span class="nick" style="color:#8dd3c7"><a href="#104506" label="[10:45:06]">&lt;fossy&gt;</a></span><span class="message">I like that</span></div><div class="line" id="104536"><span class="nick" style="color:#8dd3c7"><a href="#104536" label="[10:45:36]">&lt;fossy&gt;</a></span><span class="message">I think my dad has a physical copy of it, the cover looks vagualy familiar</span></div><div class="line" id="104543"><span class="nick" style="color:#2e2a4a"><a href="#104543" label="[10:45:43]">&lt;OriansJ&gt;</a></span><span class="message">K&amp;R C covers alot of the rules one needs to know about C</span></div><div class="line" id="104555"><span class="nick" style="color:#2e2a4a"><a href="#104555" label="[10:45:55]">&lt;OriansJ&gt;</a></span><span class="message">read it, cover to cover</span></div><div class="line" id="104617"><span class="nick" style="color:#2e2a4a"><a href="#104617" label="[10:46:17]">&lt;OriansJ&gt;</a></span><span class="message">take the time to absorb why they write code that way</span></div><div class="line" id="104704"><span class="nick" style="color:#8dd3c7"><a href="#104704" label="[10:47:04]">&lt;fossy&gt;</a></span><span class="message">And pausing to do the exercises (it has those right), one would assume</span></div><div class="line" id="104730"><span class="nick" style="color:#2e2a4a"><a href="#104730" label="[10:47:30]">&lt;OriansJ&gt;</a></span><span class="message">or just writing code for yourself to get a feel for it</span></div><div class="line" id="104838"><span class="nick" style="color:#2e2a4a"><a href="#104838" label="[10:48:38]">&lt;OriansJ&gt;</a></span><span class="message">good code is like poetry; profound, moving and deceptively simple.</span></div><div class="line" id="104949"><span class="nick" style="color:#2e2a4a"><a href="#104949" label="[10:49:49]">&lt;OriansJ&gt;</a></span><span class="message">Being clever is one's greatest enemy because debugging is twice as hard as programming.</span></div><div class="line" id="104958"><span class="nick" style="color:#8dd3c7"><a href="#104958" label="[10:49:58]">&lt;fossy&gt;</a></span><span class="message">I often get frustrated with my not so poetic code</span></div><div class="line" id="105015"><span class="nick" style="color:#2e2a4a"><a href="#105015" label="[10:50:15]">&lt;OriansJ&gt;</a></span><span class="message">good, it means you have taste</span></div><div class="line" id="105021"><span class="nick" style="color:#8dd3c7"><a href="#105021" label="[10:50:21]">&lt;fossy&gt;</a></span><span class="message">I want my code to look good the first time</span></div><div class="line" id="105036"><span class="nick" style="color:#2e2a4a"><a href="#105036" label="[10:50:36]">&lt;OriansJ&gt;</a></span><span class="message">fossy: it doesn't work that way</span></div><div class="line" id="105039"><span class="nick" style="color:#8dd3c7"><a href="#105039" label="[10:50:39]">&lt;fossy&gt;</a></span><span class="message">But I know thats not going to happen</span></div><div class="line" id="105055"><span class="nick" style="color:#8dd3c7"><a href="#105055" label="[10:50:55]">&lt;fossy&gt;</a></span><span class="message">Its not how anything works, youre right</span></div><div class="line" id="105133"><span class="nick" style="color:#2e2a4a"><a href="#105133" label="[10:51:33]">&lt;OriansJ&gt;</a></span><span class="message">nothing you make will be perfect but did doesn't mean what you make can't be beautiful</span></div><div class="line" id="105224"><span class="nick" style="color:#2e2a4a"><a href="#105224" label="[10:52:24]">&lt;OriansJ&gt;</a></span><span class="message">you will learn in time and with effort your code can become more beautiful than mine</span></div><div class="line" id="105350"><span class="nick" style="color:#2e2a4a"><a href="#105350" label="[10:53:50]">&lt;OriansJ&gt;</a></span><span class="message">remember to keep striving for better and you'll get much farther than you can dream.</span></div><div class="line" id="105641"><span class="nick" style="color:#2e2a4a"><a href="#105641" label="[10:56:41]">&lt;OriansJ&gt;</a></span><span class="message">The hard part is when you are starting in a field where you have natural taste/talent. Because you are better at spotting your own failings and it takes longer to get to the skill level where you start to feel good about your own work.</span></div><div class="line" id="110840"><span class="nick" style="color:#2e2a4a"><a href="#110840" label="[11:08:40]">&lt;OriansJ&gt;</a></span><span class="message">hey rain1</span></div><div class="line" id="110844"><span class="nick" style="color:#234e69"><a href="#110844" label="[11:08:44]">&lt;rain1&gt;</a></span><span class="message">hello!</span></div><div class="line" id="110942"><span class="nick" style="color:#234e69"><a href="#110942" label="[11:09:42]">&lt;rain1&gt;</a></span><span class="message">hows it going?</span></div><div class="line" id="111019"><span class="nick" style="color:#2e2a4a"><a href="#111019" label="[11:10:19]">&lt;OriansJ&gt;</a></span><span class="message">well I am trying to figure out the correct way to preserve lexical scope in mes-m2 but also allow future references</span></div><div class="line" id="111657"><span class="nick" style="color:#234e69"><a href="#111657" label="[11:16:57]">&lt;rain1&gt;</a></span><span class="message">i didn't realize that m2 could have lexical scope</span></div><div class="line" id="111710"><span class="nick" style="color:#234e69"><a href="#111710" label="[11:17:10]">&lt;rain1&gt;</a></span><span class="message">that seems like an advanced feature for so low on the stack</span></div><div class="line" id="111851"><span class="nick" style="color:#2e2a4a"><a href="#111851" label="[11:18:51]">&lt;OriansJ&gt;</a></span><span class="message">really?</span></div><div class="line" id="112053"><span class="nick" style="color:#2e2a4a"><a href="#112053" label="[11:20:53]">&lt;OriansJ&gt;</a></span><span class="message">if you look at mes_eval.c:165</span></div><div class="line" id="112103"><span class="nick" style="color:#2e2a4a"><a href="#112103" label="[11:21:03]">&lt;OriansJ&gt;</a></span><span class="message">you'll see how it currently does it</span></div><div class="line" id="112241"><span class="nick" style="color:#234e69"><a href="#112241" label="[11:22:41]">&lt;rain1&gt;</a></span><span class="message">oh i must have meen thinking of m1</span></div><div class="line" id="112244"><span class="nick" style="color:#234e69"><a href="#112244" label="[11:22:44]">&lt;rain1&gt;</a></span><span class="message">now i get you!</span></div><div class="line" id="112340"><span class="nick" style="color:#2e2a4a"><a href="#112340" label="[11:23:40]">&lt;OriansJ&gt;</a></span><span class="message">fortunately M2-Planet enables one to largely ignore everything about M1 and hex2 while working</span></div><div class="line" id="112410"><span class="nick" style="color:#2e2a4a"><a href="#112410" label="[11:24:10]">&lt;OriansJ&gt;</a></span><span class="message">as cc_* and up all support lexical scoping by default</span></div><div class="line" id="112501"><span class="nick" style="color:#2e2a4a"><a href="#112501" label="[11:25:01]">&lt;OriansJ&gt;</a></span><span class="message">M1 and below down have a function construct so the very concept of scoping is non-applicable.</span></div><div class="line" id="112521"><span class="nick" style="color:#2e2a4a"><a href="#112521" label="[11:25:21]">&lt;OriansJ&gt;</a></span><span class="message">^down^don't^</span></div><div class="line" id="112738"><span class="nick" style="color:#234e69"><a href="#112738" label="[11:27:38]">&lt;rain1&gt;</a></span><span class="message">I think the way i handled future references was to process the code twice, once to just create a list of top level definition names and then second time to evaluate them with an environment that bound them all to #f</span></div><div class="line" id="112815"><span class="nick" style="color:#2e2a4a"><a href="#112815" label="[11:28:15]">&lt;OriansJ&gt;</a></span><span class="message">I see</span></div><div class="line" id="115353"><span class="nick" style="color:#2e2a4a"><a href="#115353" label="[11:53:53]">&lt;OriansJ&gt;</a></span><span class="message">ugh, assoc is so ugly right now</span></div><div class="line" id="115804"><span class="nick" style="color:#2e2a4a"><a href="#115804" label="[11:58:04]">&lt;OriansJ&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1130696/">https://paste.debian.net/1130696/</a> </span></div><div class="line" id="115847"><span class="nick" style="color:#2e2a4a"><a href="#115847" label="[11:58:47]">&lt;OriansJ&gt;</a></span><span class="message">It resolves the forward reference problem in a very ugly way</span></div><div class="line" id="120900"><span class="nick" style="color:#2e2a4a"><a href="#120900" label="[12:09:00]">&lt;OriansJ&gt;</a></span><span class="message">yet not perfectly</span></div><div class="line" id="120903"><span class="nick" style="color:#2e2a4a"><a href="#120903" label="[12:09:03]">&lt;OriansJ&gt;</a></span><span class="message">hmmm</span></div><div class="line" id="124628"><span class="nick" style="color:#2e2a4a"><a href="#124628" label="[12:46:28]">&lt;OriansJ&gt;</a></span><span class="message">I just realized I've been working on bootstrapping guix since 2016-05-01 (when I announced on #guix that I completed the initial hex program for AMD64 and was working on exec_enable in hex); although discussions about reducing guix began around 2016-03-21. janneke I guess I wish I had more to show for nearly 4 years of work.</span></div><div class="line" id="135921"><span class="nick" style="color:#2e2a4a"><a href="#135921" label="[13:59:21]">&lt;OriansJ&gt;</a></span><span class="message">I got 1 deep of lambda work of forward references to work; now to get this to work <a rel="nofollow" href="https://paste.debian.net/1130709/">https://paste.debian.net/1130709/</a> </span></div><div class="line" id="145453"><span class="nick" style="color:#6b8072"><a href="#145453" label="[14:54:53]">&lt;dddddd&gt;</a></span><span class="message">Hi, #bootstrappable</span></div><div class="line" id="150204"><span class="nick" style="color:#6c3d55"><a href="#150204" label="[15:02:04]">&lt;deesix&gt;</a></span><span class="message">OriansJ, you have a lot to show, worked hard and made many sacrifices for it. Indeed, you push yourself a lot; be gentle to yourself (:</span></div><div class="line" id="150351"><span class="nick" style="color:#6c3d55"><a href="#150351" label="[15:03:51]">&lt;deesix&gt;</a></span><span class="message">This is not a competition IMHO and there's only the hurry you impose (which feel too much sometimes, to be honest)</span></div><div class="line" id="150504"><span class="nick" style="color:#6c3d55"><a href="#150504" label="[15:05:04]">&lt;deesix&gt;</a></span><span class="message">*self-impose</span></div><div class="line" id="150633"><span class="nick" style="color:#6c3d55"><a href="#150633" label="[15:06:33]">&lt;deesix&gt;</a></span><span class="message">Now, if one have to met some deadline that's another history. But it's not the case AFAIU.</span></div><div class="line" id="151054"><span class="nick" style="color:#6c3d55"><a href="#151054" label="[15:10:54]">&lt;deesix&gt;</a></span><span class="message">So, just have fun and create that poetry you talked about earlier, which takes time.</span></div><div class="line" id="151607"><span class="nick" style="color:#2e2a4a"><a href="#151607" label="[15:16:07]">&lt;OriansJ&gt;</a></span><span class="message">true</span></div><div class="line" id="152449"><span class="nick" style="color:#2e2a4a"><a href="#152449" label="[15:24:49]">&lt;OriansJ&gt;</a></span><span class="message">half of that time was wasted on dead ends; which taught me a valuable lesson [why C won: It is just better for building foundations]</span></div><div class="line" id="153723"><span class="nick" style="color:#6b8072"><a href="#153723" label="[15:37:23]">&lt;dddddd&gt;</a></span><span class="message">I guess it's not wasted then. (sorry for the nick jumping)</span></div><div class="line" id="154147"><span class="nick" style="color:#2e2a4a"><a href="#154147" label="[15:41:47]">&lt;OriansJ&gt;</a></span><span class="message">no worries</span></div><div class="line" id="154327"><span class="nick" style="color:#2e2a4a"><a href="#154327" label="[15:43:27]">&lt;OriansJ&gt;</a></span><span class="message">well, perhaps it is best thought of the lessons you least want to learn are the ones you spend the most time and pain learning</span></div><div class="line" id="160003"><span class="nick" style="color:#2e2a4a"><a href="#160003" label="[16:00:03]">&lt;OriansJ&gt;</a></span><span class="message">hmmm, I might have cracked it (nested lambda forward references)</span></div><div class="line" id="160433"><span class="nick" style="color:#2e2a4a"><a href="#160433" label="[16:04:33]">&lt;OriansJ&gt;</a></span><span class="message">It is a little messy but it passes the previously pasted test</span></div><div class="line" id="162134"><span class="nick" style="color:#2e2a4a"><a href="#162134" label="[16:21:34]">&lt;OriansJ&gt;</a></span><span class="message">I guess it is finally time for me to add assq, assv and assoc to mes-m2's scheme primitives</span></div><div class="line" id="162615"><span class="nick" style="color:#2e2a4a"><a href="#162615" label="[16:26:15]">&lt;OriansJ&gt;</a></span><span class="message">really? caddar</span></div><div class="line" id="162928"><span class="nick" style="color:#2e2a4a"><a href="#162928" label="[16:29:28]">&lt;OriansJ&gt;</a></span><span class="message">patches are up</span></div><div class="line" id="163055"><span class="nick" style="color:#2e2a4a"><a href="#163055" label="[16:30:55]">&lt;OriansJ&gt;</a></span><span class="message">It isn't an ideal solution (because I haven't figured one out yet) but it doesn't break any of the tests and is still lexically scoped (except when it punts looking for a variable outside of the lexical scope)</span></div><div class="line" id="171408"><span class="nick" style="color:#2e2a4a"><a href="#171408" label="[17:14:08]">&lt;OriansJ&gt;</a></span><span class="message">hmmmm <a rel="nofollow" href="https://paste.debian.net/1130725/">https://paste.debian.net/1130725/</a> </span></div><div class="line" id="180043"><span class="nick" style="color:#2e2a4a"><a href="#180043" label="[18:00:43]">&lt;OriansJ&gt;</a></span><span class="message">hmmm: <a rel="nofollow" href="https://paste.debian.net/1130731/">https://paste.debian.net/1130731/</a> </span></div><div class="line" id="180910"><span class="nick" style="color:#2e2a4a"><a href="#180910" label="[18:09:10]">&lt;OriansJ&gt;</a></span><span class="message">I need input on scheme validity of the following s-expression: ((lambda a (cons a a)) 4 5 6 7)</span></div><div class="line" id="181028"><span class="nick" style="color:#2e2a4a"><a href="#181028" label="[18:10:28]">&lt;OriansJ&gt;</a></span><span class="message">as I thought the only valid lambda expressions are (define (foo a) (cons a a)) and (define foo (lambda (a) (cons a a)))</span></div><div class="line" id="184452"><span class="nick" style="color:#6b8072"><a href="#184452" label="[18:44:52]">&lt;dddddd&gt;</a></span><span class="message">maybe <a rel="nofollow" href="https://www.gnu.org/software/guile/manual/html_node/Lambda-Alternatives.html">https://www.gnu.org/software/guile/manual/html_node/Lambda-Alternatives.html</a> </span></div><div class="line" id="184802"><span class="nick" style="color:#2e2a4a"><a href="#184802" label="[18:48:02]">&lt;OriansJ&gt;</a></span><span class="message">well yes, guile does kinda do that in a weird way</span></div><div class="line" id="184838"><span class="nick" style="color:#2e2a4a"><a href="#184838" label="[18:48:38]">&lt;OriansJ&gt;</a></span><span class="message">but it just doesn't appear valid in r7rs as far as I can tell</span></div><div class="line" id="185246"><span class="nick" style="color:#6b8072"><a href="#185246" label="[18:52:46]">&lt;dddddd&gt;</a></span><span class="message">MIT/GNU Scheme, chicken and racket versions I have around are fine with that s-expression too.</span></div><div class="line" id="185503"><span class="nick" style="color:#2e2a4a"><a href="#185503" label="[18:55:03]">&lt;OriansJ&gt;</a></span><span class="message">and mes.scm also appears to use it as well</span></div><div class="line" id="185512"><span class="nick" style="color:#6b8072"><a href="#185512" label="[18:55:12]">&lt;dddddd&gt;</a></span><span class="message">No idea about standarization, sorry.</span></div><div class="line" id="190114"><span class="nick" style="color:#6b8072"><a href="#190114" label="[19:01:14]">&lt;dddddd&gt;</a></span><span class="message">r7rs 4.1.4. Procedures has 3 options for formals. I'd say that's the second one.</span></div><div class="line" id="192116"><span class="nick" style="color:#2e2a4a"><a href="#192116" label="[19:21:16]">&lt;OriansJ&gt;</a></span><span class="message">that is the least schemey of the set</span></div><div class="line" id="192621"><span class="nick">***</span><span class="message notice">hannes_ is now known as hannes</span></div><div class="line" id="193225"><span class="nick" style="color:#6b8072"><a href="#193225" label="[19:32:25]">&lt;dddddd&gt;</a></span><span class="message">M1.scm now knows about one of the KNIGHT special cases (@ is just another char; it has no special meaning, unlike other archs). Let's see what's going on in &quot;hexify string&quot;.</span></div><div class="line" id="193446"><span class="nick" style="color:#2e2a4a"><a href="#193446" label="[19:34:46]">&lt;OriansJ&gt;</a></span><span class="message">well in M1 for KNIGHT !@$%&amp; are just passed as is because they are just displacements</span></div><div class="line" id="193511"><span class="nick" style="color:#2e2a4a"><a href="#193511" label="[19:35:11]">&lt;OriansJ&gt;</a></span><span class="message">hence why '00 00 00 01' instead of %1 is used in M2-Planet</span></div><div class="line" id="193621"><span class="nick" style="color:#2e2a4a"><a href="#193621" label="[19:36:21]">&lt;OriansJ&gt;</a></span><span class="message">in cc_core.c:444 (primary_expr_number)</span></div><div class="line" id="193642"><span class="nick" style="color:#6b8072"><a href="#193642" label="[19:36:42]">&lt;dddddd&gt;</a></span><span class="message">True, I didn't explain well. No prefix is special (@ is just a default of the implementation).</span></div><div class="line" id="193714"><span class="nick" style="color:#2e2a4a"><a href="#193714" label="[19:37:14]">&lt;OriansJ&gt;</a></span><span class="message">correct</span></div><div class="line" id="193739"><span class="nick" style="color:#2e2a4a"><a href="#193739" label="[19:37:39]">&lt;OriansJ&gt;</a></span><span class="message">as KNIGHT only supports 16bit immediates</span></div><div class="line" id="193818"><span class="nick" style="color:#2e2a4a"><a href="#193818" label="[19:38:18]">&lt;OriansJ&gt;</a></span><span class="message">(I could fix that in the base architecture if there was a real need but I haven't yet found a good reason for it yet)</span></div><div class="line" id="193955"><span class="nick" style="color:#2e2a4a"><a href="#193955" label="[19:39:55]">&lt;OriansJ&gt;</a></span><span class="message">mostly because then I'd probably have to support LOADUI8 R0 !1; LOADI32 R0 %1 and LOADUI256 R14 ?1 and end up having to redo M0 for knight</span></div><div class="line" id="195112"><span class="nick" style="color:#6b8072"><a href="#195112" label="[19:51:12]">&lt;dddddd&gt;</a></span><span class="message">Thanks for the context, always helpful.</span></div><div class="line" id="195909"><span class="nick" style="color:#2e2a4a"><a href="#195909" label="[19:59:09]">&lt;OriansJ&gt;</a></span><span class="message">as there are primitives in the original knight what I didn't include in the VM, simply because I wanted to simplify the implementation (like the pack and unpack instructions)</span></div><div class="line" id="200016"><span class="nick" style="color:#2e2a4a"><a href="#200016" label="[20:00:16]">&lt;OriansJ&gt;</a></span><span class="message">There was one that I was tempted to include but wasn't sure if it was worth the effort CMPSET.? R0 R1 R2 IMMEDIATE</span></div><div class="line" id="200121"><span class="nick" style="color:#2e2a4a"><a href="#200121" label="[20:01:21]">&lt;OriansJ&gt;</a></span><span class="message">Which would have compared R1 and R2 (if .E if equal, .NE if not equal, etc) and if the condition was true set R0 to the signed value of the immediate</span></div><div class="line" id="200232"><span class="nick" style="color:#2e2a4a"><a href="#200232" label="[20:02:32]">&lt;OriansJ&gt;</a></span><span class="message">basically x86's SET? instructions on steroids</span></div><div class="line" id="201119"><span class="nick" style="color:#2e2a4a"><a href="#201119" label="[20:11:19]">&lt;OriansJ&gt;</a></span><span class="message">changing line 1880 of Ur-scheme from (lambda cmd (cond to (lambda (cmd) (cond  gets mes-m2 all the way to the assert-equal statements</span></div><div class="line" id="201226"><span class="nick" style="color:#2e2a4a"><a href="#201226" label="[20:12:26]">&lt;OriansJ&gt;</a></span><span class="message">So less than 400 lines left to get working</span></div><div class="line" id="201312"><span class="nick" style="color:#2e2a4a"><a href="#201312" label="[20:13:12]">&lt;OriansJ&gt;</a></span><span class="message">now just to figure out what is causing the ERROR: not equal (#f #\\f)</span></div><div class="line" id="202822"><span class="nick" style="color:#2e2a4a"><a href="#202822" label="[20:28:22]">&lt;OriansJ&gt;</a></span><span class="message">hmmm why is (sample-unget 'unget)</span></div><div class="line" id="203045"><span class="nick" style="color:#2e2a4a"><a href="#203045" label="[20:30:45]">&lt;OriansJ&gt;</a></span><span class="message">line 1904 for anyone curious</span></div><div class="line" id="203719"><span class="nick" style="color:#2e2a4a"><a href="#203719" label="[20:37:19]">&lt;OriansJ&gt;</a></span><span class="message">minor correction to the previous (lambda cmd (... It is (lambda (. cmd) (...</span></div><div class="line" id="203854"><span class="nick" style="color:#2e2a4a"><a href="#203854" label="[20:38:54]">&lt;OriansJ&gt;</a></span><span class="message">which fixes the previous error message</span></div><div class="line" id="203913"><span class="nick" style="color:#2e2a4a"><a href="#203913" label="[20:39:13]">&lt;OriansJ&gt;</a></span><span class="message">and mes-m2 now gets all the way to: = received non-integer</span></div><div class="line" id="205048"><span class="nick" style="color:#2e2a4a"><a href="#205048" label="[20:50:48]">&lt;OriansJ&gt;</a></span><span class="message">which appears to be 1905</span></div><div class="line" id="205203"><span class="nick" style="color:#2e2a4a"><a href="#205203" label="[20:52:03]">&lt;OriansJ&gt;</a></span><span class="message">which doesn't make any sense; as that uses equal? and mes-m2's equal? doesn't leverage = at all</span></div><div class="line" id="210114"><span class="nick" style="color:#8dd3c7"><a href="#210114" label="[21:01:14]">&lt;fossy&gt;</a></span><span class="message">OriansJ: there is so much for you to show for 4 years of work</span></div><div class="line" id="210138"><span class="nick" style="color:#8dd3c7"><a href="#210138" label="[21:01:38]">&lt;fossy&gt;</a></span><span class="message">stage0 mescc tools seed mes m2 m2 planet</span></div><div class="line" id="210255"><span class="nick" style="color:#8dd3c7"><a href="#210255" label="[21:02:55]">&lt;fossy&gt;</a></span><span class="message">you've made the first modern c compiler in assembly, designed and programmed pretty much all of the lower stages of the bootstrap, the hardest part of it all IMHO</span></div><div class="line" id="210344"><span class="nick" style="color:#2e2a4a"><a href="#210344" label="[21:03:44]">&lt;OriansJ&gt;</a></span><span class="message">I just can't get 2KLOC scheme programs to run</span></div><div class="line" id="210704"><span class="nick" style="color:#2e2a4a"><a href="#210704" label="[21:07:04]">&lt;OriansJ&gt;</a></span><span class="message">as debugging interpreters is so much harder than compilers</span></div><div class="line" id="210747"><span class="nick" style="color:#8dd3c7"><a href="#210747" label="[21:07:47]">&lt;fossy&gt;</a></span><span class="message">Of course they are, thats unfortunately the nature of them</span></div><div class="line" id="211250"><span class="nick" style="color:#2e2a4a"><a href="#211250" label="[21:12:50]">&lt;OriansJ&gt;</a></span><span class="message">I've started to wonder why scheme interpreters are such a mess regardless what language they are written in</span></div><div class="line" id="212151"><span class="nick" style="color:#2e2a4a"><a href="#212151" label="[21:21:51]">&lt;OriansJ&gt;</a></span><span class="message">I mean literally a proper scheme parser in haskell takes 5 pages of code</span></div><div class="line" id="212304"><span class="nick" style="color:#2e2a4a"><a href="#212304" label="[21:23:04]">&lt;OriansJ&gt;</a></span><span class="message">and I am trying to shove it into 250 lines for a reader and 330lines for a tokenizer in a primitive subset of C here;</span></div><div class="line" id="212333"><span class="nick" style="color:#8dd3c7"><a href="#212333" label="[21:23:33]">&lt;fossy&gt;</a></span><span class="message">OriansJ: last night when you said 20:25 &lt;OriansJ&gt; also you know you can create a custom struct for the storage of shell variables right? | you can't pass the actual struct to execve as argv right, you need a function that simply converts it to a char**, correct?</span></div><div class="line" id="212452"><span class="nick" style="color:#d9d9d9"><a href="#212452" label="[21:24:52]">&lt;bauen1&gt;</a></span><span class="message">what's this about a c compiler written in assembly ? (i want a link ;) )</span></div><div class="line" id="212535"><span class="nick" style="color:#2e2a4a"><a href="#212535" label="[21:25:35]">&lt;OriansJ&gt;</a></span><span class="message">fossy: well execve only accepts const char *,  const char * [], const char *[] and struct pt_regs</span></div><div class="line" id="212554"><span class="nick" style="color:#2e2a4a"><a href="#212554" label="[21:25:54]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: I wrote like 4 of them in a speed run a couple weeks ago</span></div><div class="line" id="212627"><span class="nick" style="color:#8dd3c7"><a href="#212627" label="[21:26:27]">&lt;fossy&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/stage0/blob/master/stage2/cc_x86.s">https://github.com/oriansj/stage0/blob/master/stage2/cc_x86.s</a> </span></div><div class="line" id="212653"><span class="nick" style="color:#2e2a4a"><a href="#212653" label="[21:26:53]">&lt;OriansJ&gt;</a></span><span class="message">here is one for amd64 <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-seed/blob/master/AMD64/cc_amd64.M1">https://github.com/oriansj/mescc-tools-seed/blob/master/AMD64/cc_amd64.M1</a> </span></div><div class="line" id="212718"><span class="nick" style="color:#2e2a4a"><a href="#212718" label="[21:27:18]">&lt;OriansJ&gt;</a></span><span class="message">here is another for x86 <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-seed/blob/master/x86/cc_x86.M1">https://github.com/oriansj/mescc-tools-seed/blob/master/x86/cc_x86.M1</a> </span></div><div class="line" id="212732"><span class="nick" style="color:#2e2a4a"><a href="#212732" label="[21:27:32]">&lt;OriansJ&gt;</a></span><span class="message">here is one for AArch64 <a rel="nofollow" href="https://github.com/oriansj/stage0/blob/master/stage2/cc_aarch64.s">https://github.com/oriansj/stage0/blob/master/stage2/cc_aarch64.s</a> </span></div><div class="line" id="212756"><span class="nick" style="color:#d9d9d9"><a href="#212756" label="[21:27:56]">&lt;bauen1&gt;</a></span><span class="message">amazing</span></div><div class="line" id="212759"><span class="nick" style="color:#2e2a4a"><a href="#212759" label="[21:27:59]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: and they all can be bootstrapped from nothing (357bytes to be precise)</span></div><div class="line" id="212825"><span class="nick" style="color:#d9d9d9"><a href="#212825" label="[21:28:25]">&lt;bauen1&gt;</a></span><span class="message">what kind of c can they compiler ?</span></div><div class="line" id="212841"><span class="nick" style="color:#d9d9d9"><a href="#212841" label="[21:28:41]">&lt;bauen1&gt;</a></span><span class="message">as far as i read about this project stage0 eventually compiles tinycc =</span></div><div class="line" id="212845"><span class="nick" style="color:#8dd3c7"><a href="#212845" label="[21:28:45]">&lt;fossy&gt;</a></span><span class="message">bauen1: a very small subset of C.</span></div><div class="line" id="212909"><span class="nick" style="color:#2e2a4a"><a href="#212909" label="[21:29:09]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: here is an example of a C compiler written in C that they can compile <a rel="nofollow" href="https://github.com/oriansj/M2-Planet">https://github.com/oriansj/M2-Planet</a> </span></div><div class="line" id="212921"><span class="nick" style="color:#2e2a4a"><a href="#212921" label="[21:29:21]">&lt;OriansJ&gt;</a></span><span class="message">oh by the way, it is a cross-platform C compiler</span></div><div class="line" id="212943"><span class="nick" style="color:#8dd3c7"><a href="#212943" label="[21:29:43]">&lt;fossy&gt;</a></span><span class="message">cc_* family -&gt; M2-Planet (written in the cc_* subset, cross-platform) -&gt; Mes-M2 (WIP -- a scheme interpreter) -&gt; MesCC (C compiler in Scheme) -&gt; TinyCC</span></div><div class="line" id="212959"><span class="nick" style="color:#8dd3c7"><a href="#212959" label="[21:29:59]">&lt;fossy&gt;</a></span><span class="message">From there to the GNU triplet of GCC, Glibc and Binutils</span></div><div class="line" id="213007"><span class="nick" style="color:#2e2a4a"><a href="#213007" label="[21:30:07]">&lt;OriansJ&gt;</a></span><span class="message">all you need to bootstrap from nothing to mes-m2+M2-Planet+mescc-tools is just git clone  <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-seed">https://github.com/oriansj/mescc-tools-seed</a>  and <a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds">https://github.com/oriansj/bootstrap-seeds</a> </span></div><div class="line" id="213011"><span class="nick" style="color:#d9d9d9"><a href="#213011" label="[21:30:11]">&lt;bauen1&gt;</a></span><span class="message">i'll have to keep an eye on this</span></div><div class="line" id="213024"><span class="nick" style="color:#8dd3c7"><a href="#213024" label="[21:30:24]">&lt;fossy&gt;</a></span><span class="message">you should ;)</span></div><div class="line" id="213042"><span class="nick" style="color:#2e2a4a"><a href="#213042" label="[21:30:42]">&lt;OriansJ&gt;</a></span><span class="message">here is the current bootstrap map: <a rel="nofollow" href="https://github.com/oriansj/talk-notes/blob/master/Current%20bootstrap%20map.pdf">https://github.com/oriansj/talk-notes/blob/master/Current%20bootstrap%20map.pdf</a> </span></div><div class="line" id="213103"><span class="nick" style="color:#2e2a4a"><a href="#213103" label="[21:31:03]">&lt;OriansJ&gt;</a></span><span class="message">everything above mes-m2 (minus slow-utils) is done</span></div><div class="line" id="213113"><span class="nick" style="color:#2e2a4a"><a href="#213113" label="[21:31:13]">&lt;OriansJ&gt;</a></span><span class="message">and everything below mes-m2 is also done</span></div><div class="line" id="213131"><span class="nick" style="color:#d9d9d9"><a href="#213131" label="[21:31:31]">&lt;bauen1&gt;</a></span><span class="message">i'm currently writing a unix-clone kernel with the goal of having self-hosting (in a few years lol) with only sh, make and tinycc</span></div><div class="line" id="213144"><span class="nick" style="color:#d9d9d9"><a href="#213144" label="[21:31:44]">&lt;bauen1&gt;</a></span><span class="message">so maybe i'll eventually bootstrap that from &quot;nothing&quot;</span></div><div class="line" id="213149"><span class="nick" style="color:#2e2a4a"><a href="#213149" label="[21:31:49]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: then you are in luck</span></div><div class="line" id="213203"><span class="nick" style="color:#8dd3c7"><a href="#213203" label="[21:32:03]">&lt;fossy&gt;</a></span><span class="message">OriansJ: as kaem grows it will obviously need to be splitted into multiple files to keep it readable; hence, opinions on moving it back to a seperate repository?</span></div><div class="line" id="213204"><span class="nick" style="color:#2e2a4a"><a href="#213204" label="[21:32:04]">&lt;OriansJ&gt;</a></span><span class="message">would you be interested in collaboration?</span></div><div class="line" id="213209"><span class="nick" style="color:#8dd3c7"><a href="#213209" label="[21:32:09]">&lt;fossy&gt;</a></span><span class="message">bauen1: oooooo</span></div><div class="line" id="213240"><span class="nick" style="color:#2e2a4a"><a href="#213240" label="[21:32:40]">&lt;OriansJ&gt;</a></span><span class="message">fossy: entirely possible</span></div><div class="line" id="213250"><span class="nick" style="color:#d9d9d9"><a href="#213250" label="[21:32:50]">&lt;bauen1&gt;</a></span><span class="message">fossy: i'm still at the stage of virtual file system without any userspace done</span></div><div class="line" id="213256"><span class="nick" style="color:#8dd3c7"><a href="#213256" label="[21:32:56]">&lt;fossy&gt;</a></span><span class="message">OriansJ: do you have an opinion either way?</span></div><div class="line" id="213302"><span class="nick" style="color:#2e2a4a"><a href="#213302" label="[21:33:02]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: not a problem</span></div><div class="line" id="213307"><span class="nick" style="color:#d9d9d9"><a href="#213307" label="[21:33:07]">&lt;bauen1&gt;</a></span><span class="message">the previous version did have a userspace and could run tinycc so i'll get there eventually</span></div><div class="line" id="213308"><span class="nick" style="color:#8dd3c7"><a href="#213308" label="[21:33:08]">&lt;fossy&gt;</a></span><span class="message">bauen1: do you have a link as of yet?</span></div><div class="line" id="213311"><span class="nick" style="color:#d9d9d9"><a href="#213311" label="[21:33:11]">&lt;bauen1&gt;</a></span><span class="message">but basically yes</span></div><div class="line" id="213313"><span class="nick" style="color:#2e2a4a"><a href="#213313" label="[21:33:13]">&lt;OriansJ&gt;</a></span><span class="message">we can provide the userspace</span></div><div class="line" id="213316"><span class="nick" style="color:#8dd3c7"><a href="#213316" label="[21:33:16]">&lt;fossy&gt;</a></span><span class="message">^^^</span></div><div class="line" id="213330"><span class="nick" style="color:#8dd3c7"><a href="#213330" label="[21:33:30]">&lt;fossy&gt;</a></span><span class="message">we don't currently have a solution to the kernel bootstrap problem</span></div><div class="line" id="213334"><span class="nick" style="color:#d9d9d9"><a href="#213334" label="[21:33:34]">&lt;bauen1&gt;</a></span><span class="message">no userspace as in: no multitasking / process support and no elf loading</span></div><div class="line" id="213351"><span class="nick" style="color:#2e2a4a"><a href="#213351" label="[21:33:51]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: it is a solvable problem</span></div><div class="line" id="213354"><span class="nick" style="color:#8dd3c7"><a href="#213354" label="[21:33:54]">&lt;fossy&gt;</a></span><span class="message">atm everything runs on top of a 70MB+ linux blob</span></div><div class="line" id="213403"><span class="nick" style="color:#2e2a4a"><a href="#213403" label="[21:34:03]">&lt;OriansJ&gt;</a></span><span class="message">single tasking is fine</span></div><div class="line" id="213423"><span class="nick" style="color:#2e2a4a"><a href="#213423" label="[21:34:23]">&lt;OriansJ&gt;</a></span><span class="message">we just need a POSIX good enough to run a single script</span></div><div class="line" id="213430"><span class="nick" style="color:#8dd3c7"><a href="#213430" label="[21:34:30]">&lt;fossy&gt;</a></span><span class="message">bauen1: is this code anywhere yet?</span></div><div class="line" id="213432"><span class="nick" style="color:#d9d9d9"><a href="#213432" label="[21:34:32]">&lt;bauen1&gt;</a></span><span class="message"> <a rel="nofollow" href="https://gitlab.com/bauen1/myunix">https://gitlab.com/bauen1/myunix</a>  myunix version 2</span></div><div class="line" id="213435"><span class="nick" style="color:#d9d9d9"><a href="#213435" label="[21:34:35]">&lt;bauen1&gt;</a></span><span class="message"> <a rel="nofollow" href="https://gitlab.com/myunix/myunix">https://gitlab.com/myunix/myunix</a>  the current rewrite</span></div><div class="line" id="213444"><span class="nick" style="color:#8dd3c7"><a href="#213444" label="[21:34:44]">&lt;fossy&gt;</a></span><span class="message">oops, i already asked that sorry</span></div><div class="line" id="213444"><span class="nick" style="color:#2e2a4a"><a href="#213444" label="[21:34:44]">&lt;OriansJ&gt;</a></span><span class="message">only 20ish syscalls total</span></div><div class="line" id="213459"><span class="nick" style="color:#d9d9d9"><a href="#213459" label="[21:34:59]">&lt;bauen1&gt;</a></span><span class="message">OriansJ: a list of the syscalls you would require would be nice \o/</span></div><div class="line" id="213527"><span class="nick" style="color:#2e2a4a"><a href="#213527" label="[21:35:27]">&lt;OriansJ&gt;</a></span><span class="message">no problem</span></div><div class="line" id="213553"><span class="nick" style="color:#d9d9d9"><a href="#213553" label="[21:35:53]">&lt;bauen1&gt;</a></span><span class="message">the staging branch of rewrite nr. 3 has x86_64 and i686 support along with the first vfs parts (currently only local)</span></div><div class="line" id="213703"><span class="nick" style="color:#2e2a4a"><a href="#213703" label="[21:37:03]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: read, write, open, close, fork, execve, brk and the rest we could remove the need for to a degree</span></div><div class="line" id="213709"><span class="nick" style="color:#8dd3c7"><a href="#213709" label="[21:37:09]">&lt;fossy&gt;</a></span><span class="message">gosh damn</span></div><div class="line" id="213717"><span class="nick" style="color:#8dd3c7"><a href="#213717" label="[21:37:17]">&lt;fossy&gt;</a></span><span class="message">that's a beast of a macro</span></div><div class="line" id="213747"><span class="nick" style="color:#d9d9d9"><a href="#213747" label="[21:37:47]">&lt;bauen1&gt;</a></span><span class="message">fossy: where ?</span></div><div class="line" id="213757"><span class="nick" style="color:#8dd3c7"><a href="#213757" label="[21:37:57]">&lt;fossy&gt;</a></span><span class="message">kernel.c:21</span></div><div class="line" id="213801"><span class="nick" style="color:#d9d9d9"><a href="#213801" label="[21:38:01]">&lt;bauen1&gt;</a></span><span class="message">myunix version 2 is a real mess in terms of code-style and everything else</span></div><div class="line" id="214010"><span class="nick" style="color:#d9d9d9"><a href="#214010" label="[21:40:10]">&lt;bauen1&gt;</a></span><span class="message">(the reason staging is mostly local atm is that i push every commit seperately and wait for ci so every commit at the very least compiles but gitlab-ci normally only runs on HEAD)</span></div><div class="line" id="214015"><span class="nick" style="color:#2e2a4a"><a href="#214015" label="[21:40:15]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: this might work <a rel="nofollow" href="https://github.com/bauen1/myunix">https://github.com/bauen1/myunix</a> </span></div><div class="line" id="214114"><span class="nick" style="color:#8dd3c7"><a href="#214114" label="[21:41:14]">&lt;fossy&gt;</a></span><span class="message">wow that one is much nice</span></div><div class="line" id="214116"><span class="nick" style="color:#8dd3c7"><a href="#214116" label="[21:41:16]">&lt;fossy&gt;</a></span><span class="message">nicer*</span></div><div class="line" id="214124"><span class="nick" style="color:#d9d9d9"><a href="#214124" label="[21:41:24]">&lt;bauen1&gt;</a></span><span class="message">yes, that version is good enough to run tinycc</span></div><div class="line" id="214149"><span class="nick" style="color:#d9d9d9"><a href="#214149" label="[21:41:49]">&lt;bauen1&gt;</a></span><span class="message">but it has too many bugs and code-quality issues (and a few design issues)</span></div><div class="line" id="214200"><span class="nick" style="color:#2e2a4a"><a href="#214200" label="[21:42:00]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: completely fair</span></div><div class="line" id="214204"><span class="nick" style="color:#8dd3c7"><a href="#214204" label="[21:42:04]">&lt;fossy&gt;</a></span><span class="message">is that v1?</span></div><div class="line" id="214205"><span class="nick" style="color:#d9d9d9"><a href="#214205" label="[21:42:05]">&lt;bauen1&gt;</a></span><span class="message">so i hope to achive feature-parity with the rewrite in a few months</span></div><div class="line" id="214210"><span class="nick" style="color:#d9d9d9"><a href="#214210" label="[21:42:10]">&lt;bauen1&gt;</a></span><span class="message">v1 is somewhere else iirc</span></div><div class="line" id="214232"><span class="nick" style="color:#2e2a4a"><a href="#214232" label="[21:42:32]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: with a handful of minor restrictions, you might be buildable via M2-Planet</span></div><div class="line" id="214237"><span class="nick" style="color:#8dd3c7"><a href="#214237" label="[21:42:37]">&lt;fossy&gt;</a></span><span class="message">^</span></div><div class="line" id="214243"><span class="nick" style="color:#2e2a4a"><a href="#214243" label="[21:42:43]">&lt;OriansJ&gt;</a></span><span class="message">which we are planning to bootstrap from bare metal</span></div><div class="line" id="214245"><span class="nick" style="color:#8dd3c7"><a href="#214245" label="[21:42:45]">&lt;fossy&gt;</a></span><span class="message">notably __attribute__</span></div><div class="line" id="214311"><span class="nick" style="color:#2e2a4a"><a href="#214311" label="[21:43:11]">&lt;OriansJ&gt;</a></span><span class="message">which would enable us to collectively solve the posix bootstrap problem too</span></div><div class="line" id="214321"><span class="nick" style="color:#d9d9d9"><a href="#214321" label="[21:43:21]">&lt;bauen1&gt;</a></span><span class="message">fossy: version 1: <a rel="nofollow" href="https://github.com/bauen1/brainOS/">https://github.com/bauen1/brainOS/</a> </span></div><div class="line" id="214348"><span class="nick" style="color:#d9d9d9"><a href="#214348" label="[21:43:48]">&lt;bauen1&gt;</a></span><span class="message">keep in mind that i worked on that when i was 15 and it's mostly copy-pasta and &quot;educated guesswork&quot;</span></div><div class="line" id="214407"><span class="nick" style="color:#8dd3c7"><a href="#214407" label="[21:44:07]">&lt;fossy&gt;</a></span><span class="message">;)</span></div><div class="line" id="214409"><span class="nick" style="color:#d9d9d9"><a href="#214409" label="[21:44:09]">&lt;bauen1&gt;</a></span><span class="message">actually maybe 16</span></div><div class="line" id="214425"><span class="nick" style="color:#d9d9d9"><a href="#214425" label="[21:44:25]">&lt;bauen1&gt;</a></span><span class="message">fossy: which restrictions on __attribute__ ?</span></div><div class="line" id="214503"><span class="nick" style="color:#d9d9d9"><a href="#214503" label="[21:45:03]">&lt;bauen1&gt;</a></span><span class="message">i only really need __attribute__((packed)) but if the compiler doesn't attempt to optimise it could be ignored</span></div><div class="line" id="214510"><span class="nick" style="color:#8dd3c7"><a href="#214510" label="[21:45:10]">&lt;fossy&gt;</a></span><span class="message">bauen1: m2 planet does not have __attribute__</span></div><div class="line" id="214524"><span class="nick" style="color:#8dd3c7"><a href="#214524" label="[21:45:24]">&lt;fossy&gt;</a></span><span class="message">the compiler does not do any optimizations pretty much</span></div><div class="line" id="214550"><span class="nick" style="color:#2e2a4a"><a href="#214550" label="[21:45:50]">&lt;OriansJ&gt;</a></span><span class="message">So the binary will be very unoptimized but bootstrappable</span></div><div class="line" id="214555"><span class="nick" style="color:#8dd3c7"><a href="#214555" label="[21:45:55]">&lt;fossy&gt;</a></span><span class="message">^</span></div><div class="line" id="214714"><span class="nick" style="color:#2e2a4a"><a href="#214714" label="[21:47:14]">&lt;OriansJ&gt;</a></span><span class="message">we also would be willing to help the transistion if you are open to it bauen1</span></div><div class="line" id="214731"><span class="nick">***</span><span class="message notice">janneke_ is now known as janneke</span></div><div class="line" id="214934"><span class="nick" style="color:#d9d9d9"><a href="#214934" label="[21:49:34]">&lt;bauen1&gt;</a></span><span class="message">sure, let me get it self-hosting first</span></div><div class="line" id="215049"><span class="nick" style="color:#2e2a4a"><a href="#215049" label="[21:50:49]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: ok</span></div><div class="line" id="215129"><span class="nick" style="color:#2e2a4a"><a href="#215129" label="[21:51:29]">&lt;OriansJ&gt;</a></span><span class="message">(we also don't need anything fancy with the file system fat32 or ext2 is fine)</span></div><div class="line" id="215219"><span class="nick" style="color:#d9d9d9"><a href="#215219" label="[21:52:19]">&lt;bauen1&gt;</a></span><span class="message">i'm happy if if my tar read-only filesystem driver works, filesystems are a mess :/</span></div><div class="line" id="215256"><span class="nick" style="color:#2e2a4a"><a href="#215256" label="[21:52:56]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: I am more than happy to help</span></div><div class="line" id="215339"><span class="nick" style="color:#d9d9d9"><a href="#215339" label="[21:53:39]">&lt;bauen1&gt;</a></span><span class="message">technically you could also get around that by taring up and just writing the tar file to a block device ...</span></div><div class="line" id="215434"><span class="nick" style="color:#2e2a4a"><a href="#215434" label="[21:54:34]">&lt;OriansJ&gt;</a></span><span class="message">AFK</span></div><div class="line" id="224037"><span class="nick" style="color:#bc80bd"><a href="#224037" label="[22:40:37]">&lt;theruran&gt;</a></span><span class="message">janneke: I've got a single XFAIL on 'make check' of gash and a FAIL on 'make check-spec' too. (latest master clone.) is that expected?</span></div><div class="line" id="224254"><span class="nick" style="color:#6d2462"><a href="#224254" label="[22:42:54]">&lt;janneke&gt;</a></span><span class="message">theruran: one XFAIL is expected (eXpected Failures are always expected :-)</span></div><div class="line" id="224304"><span class="nick" style="color:#bc80bd"><a href="#224304" label="[22:43:04]">&lt;theruran&gt;</a></span><span class="message">ah got it</span></div><div class="line" id="224322"><span class="nick" style="color:#6d2462"><a href="#224322" label="[22:43:22]">&lt;janneke&gt;</a></span><span class="message">not sure about check-spec</span></div><div class="line" id="224325"><span class="nick" style="color:#3c5b35"><a href="#224325" label="[22:43:25]">*</a></span><span class="message">janneke has a look</span></div><div class="line" id="224328"><span class="nick" style="color:#bc80bd"><a href="#224328" label="[22:43:28]">&lt;theruran&gt;</a></span><span class="message">FAIL: oil/spec/loop.test.sh - I can share the log if you're interested</span></div><div class="line" id="224357"><span class="nick" style="color:#bc80bd"><a href="#224357" label="[22:43:57]">&lt;theruran&gt;</a></span><span class="message">or file a bug report somewhere</span></div><div class="line" id="224826"><span class="nick" style="color:#6d2462"><a href="#224826" label="[22:48:26]">&lt;janneke&gt;</a></span><span class="message">theruran: i haven't really worked on gash for some months, being focussed on gash-utils; i get two failures even -- but a mail to gash-devel@nongnu.org is always appreciated</span></div><div class="line" id="224859"><span class="nick" style="color:#bc80bd"><a href="#224859" label="[22:48:59]">&lt;theruran&gt;</a></span><span class="message">janneke: OK - I will look at it further then. thanks!</span></div><div class="line" id="224918"><span class="nick" style="color:#6d2462"><a href="#224918" label="[22:49:18]">&lt;janneke&gt;</a></span><span class="message">theruran: thank you for reaching out!</span></div><br /></div></body></html>