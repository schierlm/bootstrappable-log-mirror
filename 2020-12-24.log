<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-12-24.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000717"><span class="nick" style="color:#8dd3c7"><a href="#000717" label="[00:07:17]">&lt;fosslinux&gt;</a></span><span class="message">hi, i'm back</span></div><div class="line" id="000728"><span class="nick">***</span><span class="message notice">fosslinux is now known as fossy</span></div><div class="line" id="000825"><span class="nick" style="color:#2e2a4a"><a href="#000825" label="[00:08:25]">&lt;fossy&gt;</a></span><span class="message">siraben: i was reading the logs form when i ws out (<a rel="nofollow" href="http://logs.guix.gnu.org/bootstrappable/2020-12-23.log">http://logs.guix.gnu.org/bootstrappable/2020-12-23.log</a>) </span></div><div class="line" id="000837"><span class="nick" style="color:#2e2a4a"><a href="#000837" label="[00:08:37]">&lt;fossy&gt;</a></span><span class="message">please please note that mes is not currently in the bootstrap</span></div><div class="line" id="000851"><span class="nick" style="color:#2e2a4a"><a href="#000851" label="[00:08:51]">&lt;fossy&gt;</a></span><span class="message">we need it to work under mes-m2</span></div><div class="line" id="001045"><span class="nick" style="color:#2e2a4a"><a href="#001045" label="[00:10:45]">&lt;fossy&gt;</a></span><span class="message">OriansJ: i have a PR coming your way shortly for some basic command line utilities in M2-Planet (cp, chmod are the main ones)</span></div><div class="line" id="001200"><span class="nick" style="color:#2e2a4a"><a href="#001200" label="[00:12:00]">&lt;fossy&gt;</a></span><span class="message">OriansJ: also, if you have some time, would you mind implementing dup2 and pipe syscalls?</span></div><div class="line" id="012448"><span class="nick" style="color:#6b8072"><a href="#012448" label="[01:24:48]">&lt;siraben&gt;</a></span><span class="message">fossy: yeah mes-m2 I mean</span></div><div class="line" id="014944"><span class="nick" style="color:#80b1d3"><a href="#014944" label="[01:49:44]">&lt;OriansJ&gt;</a></span><span class="message">siraben: short version stage0 is the overall project; a universal set of steps to bootstrap GCC with the main repo focused on bare metal bootstraps. With mescc-tools-seed being a POSIX fork with the goal of proving those exact same steps on POSIX kernels so that people can on existing systems verify and produce idential binaries as the same bare metal tools.</span></div><div class="line" id="015011"><span class="nick" style="color:#80b1d3"><a href="#015011" label="[01:50:11]">&lt;OriansJ&gt;</a></span><span class="message">as M2-Planet on bare metal behaves exactly the same as on a POSIX or DOS or etc</span></div><div class="line" id="015140"><span class="nick" style="color:#80b1d3"><a href="#015140" label="[01:51:40]">&lt;OriansJ&gt;</a></span><span class="message">if a step can't be converted into binary, 1 input file and 1 output file; it means it probably needs refinement.</span></div><div class="line" id="015231"><span class="nick" style="color:#80b1d3"><a href="#015231" label="[01:52:31]">&lt;OriansJ&gt;</a></span><span class="message">mihi: if you don't wish to perform those changes, just say so. I'm do them myself when I get some free time this weekend/week.</span></div><div class="line" id="015528"><span class="nick" style="color:#80b1d3"><a href="#015528" label="[01:55:28]">&lt;OriansJ&gt;</a></span><span class="message">fossy: I'll do what I can when I get the chance.</span></div><div class="line" id="020158"><span class="nick" style="color:#2e2a4a"><a href="#020158" label="[02:01:58]">&lt;fossy&gt;</a></span><span class="message">OriansJ: yeah no rush at all</span></div><div class="line" id="020246"><span class="nick" style="color:#80b1d3"><a href="#020246" label="[02:02:46]">&lt;OriansJ&gt;</a></span><span class="message">mihi: as a general rule, never do work that you don't think is the right thing. If you think I am wrong. Good; tell me. Understand disagreements are healthy things here.</span></div><div class="line" id="020255"><span class="nick" style="color:#2e2a4a"><a href="#020255" label="[02:02:55]">&lt;fossy&gt;</a></span><span class="message">I am excited for when we are able to get to the bare metal bit</span></div><div class="line" id="020358"><span class="nick" style="color:#80b1d3"><a href="#020358" label="[02:03:58]">&lt;OriansJ&gt;</a></span><span class="message">Burnout is too easy in long projects like this. We have plenty of time to address issues and reach compromises which make sense to all parties involved.</span></div><div class="line" id="020454"><span class="nick" style="color:#80b1d3"><a href="#020454" label="[02:04:54]">&lt;OriansJ&gt;</a></span><span class="message">fossy: well I started the x86 hex0 bare metal pieces <a rel="nofollow" href="https://github.com/oriansj/stage0/tree/master/x86">https://github.com/oriansj/stage0/tree/master/x86</a> </span></div><div class="line" id="020547"><span class="nick" style="color:#80b1d3"><a href="#020547" label="[02:05:47]">&lt;OriansJ&gt;</a></span><span class="message">I just got side tracked with the microcode problem in bootstrap trust; went with something that has previously been done in TTL and thus probably could be done again.</span></div><div class="line" id="020641"><span class="nick" style="color:#80b1d3"><a href="#020641" label="[02:06:41]">&lt;OriansJ&gt;</a></span><span class="message">In short my ambition for this project is probably a little unhealthy but boy does it involve a lot of fun and cool projects.</span></div><div class="line" id="020744"><span class="nick" style="color:#80b1d3"><a href="#020744" label="[02:07:44]">&lt;OriansJ&gt;</a></span><span class="message">How many people get to say they wrote a Garbage collected compacting Lisp in assembly (That they also created from scratch) or a FORTH or a C Compiler in Assembly?</span></div><div class="line" id="020755"><span class="nick" style="color:#80b1d3"><a href="#020755" label="[02:07:55]">&lt;OriansJ&gt;</a></span><span class="message">let alone all three</span></div><div class="line" id="021402"><span class="nick" style="color:#80b1d3"><a href="#021402" label="[02:14:02]">&lt;OriansJ&gt;</a></span><span class="message">mihi: as a general rule, I am a dumbass who mades bad decisions but ultimately whoever does the work gets to decide the direction of change. Eg whoever is willing to do more work than me gets to overrule me on design decisions. everyone gets to make suggestions and provide perspective but whoever is writing the code that gets things done.</span></div><div class="line" id="021716"><span class="nick" style="color:#80b1d3"><a href="#021716" label="[02:17:16]">&lt;OriansJ&gt;</a></span><span class="message">pder and siraben are doing more blynn-compiler work than me; they get to dictate direction. deesix and yt are doing more AArch64 work than me; they decide how M2-Planet/etc are going to work. fossy does more kaem work than me and thus can dictate the direction of kaem.</span></div><div class="line" id="023354"><span class="nick" style="color:#80b1d3"><a href="#023354" label="[02:33:54]">&lt;OriansJ&gt;</a></span><span class="message">as a general rule I try to never reject a Pull Request or patch unless I am unwilling to do the work to support it.</span></div><div class="line" id="044458"><span class="nick" style="color:#6d2462"><a href="#044458" label="[04:44:58]">&lt;pder&gt;</a></span><span class="message">OriansJ: I pushed another small change for blynn-compiler.  I did some profiling on vm.c and found that lazy3 and others are called a ton.  Simplifying that code reduces the bootstrap time about 10% on my machine and I think it is more readable.</span></div><div class="line" id="045527"><span class="nick" style="color:#6b8072"><a href="#045527" label="[04:55:27]">&lt;siraben&gt;</a></span><span class="message">OriansJ: thanks for the clarification on stage0</span></div><div class="line" id="050051"><span class="nick" style="color:#2e2a4a"><a href="#050051" label="[05:00:51]">&lt;fossy&gt;</a></span><span class="message">hm, found a small issue</span></div><div class="line" id="050118"><span class="nick" style="color:#2e2a4a"><a href="#050118" label="[05:01:18]">&lt;fossy&gt;</a></span><span class="message">siraben: pder post marginally, we have to go ./bin/x &lt; something &gt; something</span></div><div class="line" id="050137"><span class="nick" style="color:#2e2a4a"><a href="#050137" label="[05:01:37]">&lt;fossy&gt;</a></span><span class="message">wait nevermind</span></div><div class="line" id="050151"><span class="nick" style="color:#2e2a4a"><a href="#050151" label="[05:01:51]">&lt;fossy&gt;</a></span><span class="message">once dup2 and pipe are implemented i can do pipe support in kaem then we are all good</span></div><div class="line" id="050330"><span class="nick" style="color:#6d2462"><a href="#050330" label="[05:03:30]">&lt;pder&gt;</a></span><span class="message">fossy: also it would be a very simple change for me to make the marginally stage and on take input and output arguments so the redirection is not needed</span></div><div class="line" id="050357"><span class="nick" style="color:#2e2a4a"><a href="#050357" label="[05:03:57]">&lt;fossy&gt;</a></span><span class="message">pder: well, that would be pretty good</span></div><div class="line" id="050407"><span class="nick" style="color:#2e2a4a"><a href="#050407" label="[05:04:07]">&lt;fossy&gt;</a></span><span class="message">so that when we implement a kernel it dosen't need pipe support</span></div><div class="line" id="050413"><span class="nick" style="color:#2e2a4a"><a href="#050413" label="[05:04:13]">&lt;fossy&gt;</a></span><span class="message">which adds a really complex layer to IPC</span></div><div class="line" id="071337"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado_</span></div><div class="line" id="071340"><span class="nick">***</span><span class="message notice">rekado_ is now known as rekado</span></div><div class="line" id="084032"><span class="nick" style="color:#80b1d3"><a href="#084032" label="[08:40:32]">&lt;OriansJ&gt;</a></span><span class="message">pder: thank you for the work; merged</span></div><div class="line" id="084544"><span class="nick" style="color:#6b8072"><a href="#084544" label="[08:45:44]">&lt;siraben&gt;</a></span><span class="message">pder: how did you profile?</span></div><div class="line" id="091536"><span class="nick" style="color:#80b1d3"><a href="#091536" label="[09:15:36]">&lt;OriansJ&gt;</a></span><span class="message">sad to see gnutls-3.6.12 still broken and guix binary v1.2.0 has thus far never worked without substitutes. <a rel="nofollow" href="https://issues.guix.info/44559">https://issues.guix.info/44559</a> </span></div><div class="line" id="101323"><span class="nick" style="color:#234e69"><a href="#101323" label="[10:13:23]">&lt;deesix&gt;</a></span><span class="message">fossy, so you still need dup2 and pipe? Also, where are cp and chmod needed?</span></div><div class="line" id="103512"><span class="nick" style="color:#6b8072"><a href="#103512" label="[10:35:12]">&lt;siraben&gt;</a></span><span class="message">pder: I will look into minimizing the diff between the stages to make auditing easier</span></div><div class="line" id="103533"><span class="nick" style="color:#6b8072"><a href="#103533" label="[10:35:33]">&lt;siraben&gt;</a></span><span class="message">also, might it be good idea to number the stages?</span></div><div class="line" id="104122"><span class="nick" style="color:#2e2a4a"><a href="#104122" label="[10:41:22]">&lt;fossy&gt;</a></span><span class="message">deesix: it would certinaly be nice to have those which enables shell redirection in kaem</span></div><div class="line" id="104144"><span class="nick" style="color:#2e2a4a"><a href="#104144" label="[10:41:44]">&lt;fossy&gt;</a></span><span class="message">cp and chmod are being used in my new project</span></div><div class="line" id="104208"><span class="nick" style="color:#2e2a4a"><a href="#104208" label="[10:42:08]">&lt;fossy&gt;</a></span><span class="message">which I will make public before the new year</span></div><div class="line" id="104214"><span class="nick" style="color:#234e69"><a href="#104214" label="[10:42:14]">&lt;deesix&gt;</a></span><span class="message">OriansJ, on the topic of &quot;finally start treating libc seriously I guess in M2-Planet&quot;, I find it very weird that we're using files from M2-Planet/test/ all over the makefiles/scripts, in mescc-tools-seed for example.</span></div><div class="line" id="104430"><span class="nick" style="color:#2e2a4a"><a href="#104430" label="[10:44:30]">&lt;fossy&gt;</a></span><span class="message">an initramfs for linux that bootstraps up to a full linux system taking a  linux kernel seed, kaem seed and hex0 seed (and mes seed until blynn or smth is done)</span></div><div class="line" id="104533"><span class="nick" style="color:#2e2a4a"><a href="#104533" label="[10:45:33]">&lt;fossy&gt;</a></span><span class="message">with ability to easily replace the seed kernel when a better kernel presents itself</span></div><div class="line" id="110030"><span class="nick" style="color:#234e69"><a href="#110030" label="[11:00:30]">&lt;deesix&gt;</a></span><span class="message">fossy, I read you asked for dup2 and pipe, then again at the marginally conversation (kind of rejecting the idea) and OriansJ (or anyone) going to implement them when the need is not there anymore.</span></div><div class="line" id="111021"><span class="nick" style="color:#234e69"><a href="#111021" label="[11:10:21]">&lt;deesix&gt;</a></span><span class="message">*then mentioned again</span></div><div class="line" id="112145"><span class="nick" style="color:#2e2a4a"><a href="#112145" label="[11:21:45]">&lt;fossy&gt;</a></span><span class="message">deesix: shell redirection is a nice-to-have under any circumstances, it helps greatly espeically for things such as debugging and logging, as well as in some earlier compile staged</span></div><div class="line" id="112158"><span class="nick" style="color:#2e2a4a"><a href="#112158" label="[11:21:58]">&lt;fossy&gt;</a></span><span class="message">such as the first binutils, gcc, bash, etc</span></div><div class="line" id="112234"><span class="nick" style="color:#2e2a4a"><a href="#112234" label="[11:22:34]">&lt;fossy&gt;</a></span><span class="message">however it is not strictly nessecary now if blynn-compiler will have inputs and outputs as arguments rather than as stdout/in</span></div><div class="line" id="112330"><span class="nick" style="color:#2e2a4a"><a href="#112330" label="[11:23:30]">&lt;fossy&gt;</a></span><span class="message">i don't really know yet, need to thing more about it</span></div><div class="line" id="112344"><span class="nick" style="color:#2e2a4a"><a href="#112344" label="[11:23:44]">&lt;fossy&gt;</a></span><span class="message">it might be better to work around a lack of it for sake of a bootstrappable kernel as i said in the marginally conversation</span></div><div class="line" id="112832"><span class="nick" style="color:#234e69"><a href="#112832" label="[11:28:32]">&lt;deesix&gt;</a></span><span class="message">OriansJ, I was a bit confused about $arch_defs.M1, ELF-$arch-debug.hex2, ELF-$arch.hex2 and libc-core.M1 being also in M2-Planet/test/common_$arch/ (and for AArch64 they were created here originally) but I guess in this case the canonical ones are those at mescc-tools-seed/$arch/, right? Because makefiles/scripts don't use the M2-Planet ones. Am I looking at this correctly?</span></div><div class="line" id="113906"><span class="nick" style="color:#234e69"><a href="#113906" label="[11:39:06]">&lt;deesix&gt;</a></span><span class="message">fossy, I see; just checking if the request was still open. Thanks for the details.</span></div><div class="line" id="114554"><span class="nick" style="color:#6b8072"><a href="#114554" label="[11:45:54]">&lt;siraben&gt;</a></span><span class="message">min-diff branch is up and testing via CI <a rel="nofollow" href="https://github.com/siraben/compiler/commits/min-diff">https://github.com/siraben/compiler/commits/min-diff</a> </span></div><div class="line" id="115331"><span class="nick" style="color:#2e2a4a"><a href="#115331" label="[11:53:31]">&lt;fossy&gt;</a></span><span class="message">janneke: mes is segfaulting for me and i cannot figure out why</span></div><div class="line" id="115421"><span class="nick" style="color:#6c3d55"><a href="#115421" label="[11:54:21]">&lt;janneke&gt;</a></span><span class="message">fossy: oh</span></div><div class="line" id="115425"><span class="nick" style="color:#6c3d55"><a href="#115425" label="[11:54:25]">&lt;janneke&gt;</a></span><span class="message">what architecture, which version?</span></div><div class="line" id="115430"><span class="nick" style="color:#2e2a4a"><a href="#115430" label="[11:54:30]">&lt;fossy&gt;</a></span><span class="message">when i run bin/mes-mescc --verbose</span></div><div class="line" id="115435"><span class="nick" style="color:#2e2a4a"><a href="#115435" label="[11:54:35]">&lt;fossy&gt;</a></span><span class="message">i have tested 0.21, 0.22 and master</span></div><div class="line" id="115445"><span class="nick" style="color:#2e2a4a"><a href="#115445" label="[11:54:45]">&lt;fossy&gt;</a></span><span class="message">it segfaults attempting to provide a bactrace</span></div><div class="line" id="115449"><span class="nick" style="color:#2e2a4a"><a href="#115449" label="[11:54:49]">&lt;fossy&gt;</a></span><span class="message">amd64</span></div><div class="line" id="115502"><span class="nick" style="color:#2e2a4a"><a href="#115502" label="[11:55:02]">&lt;fossy&gt;</a></span><span class="message">compiled using ./bootstrap.sh</span></div><div class="line" id="115507"><span class="nick" style="color:#6c3d55"><a href="#115507" label="[11:55:07]">&lt;janneke&gt;</a></span><span class="message">hmm</span></div><div class="line" id="115536"><span class="nick" style="color:#2e2a4a"><a href="#115536" label="[11:55:36]">&lt;fossy&gt;</a></span><span class="message">i have a backtrade coming, sec</span></div><div class="line" id="115601"><span class="nick" style="color:#6c3d55"><a href="#115601" label="[11:56:01]">&lt;janneke&gt;</a></span><span class="message">have you tried MES_DEBUG=3, or something?</span></div><div class="line" id="115645"><span class="nick" style="color:#2e2a4a"><a href="#115645" label="[11:56:45]">&lt;fossy&gt;</a></span><span class="message">no, not yet</span></div><div class="line" id="115700"><span class="nick" style="color:#2e2a4a"><a href="#115700" label="[11:57:00]">&lt;fossy&gt;</a></span><span class="message"> <a rel="nofollow" href="https://ttm.sh/dJS.txt">https://ttm.sh/dJS.txt</a>  &lt;-- backtrace</span></div><div class="line" id="115738"><span class="nick" style="color:#2e2a4a"><a href="#115738" label="[11:57:38]">&lt;fossy&gt;</a></span><span class="message"> <a rel="nofollow" href="https://ttm.sh/dJW.txt">https://ttm.sh/dJW.txt</a>  &lt;-- MES_DEBUG=3, immediatly followed by segfault</span></div><div class="line" id="115813"><span class="nick" style="color:#2e2a4a"><a href="#115813" label="[11:58:13]">&lt;fossy&gt;</a></span><span class="message">strace yields nothing of interest</span></div><div class="line" id="115858"><span class="nick" style="color:#6c3d55"><a href="#115858" label="[11:58:58]">&lt;janneke&gt;</a></span><span class="message">fossy: ah; try --version</span></div><div class="line" id="115907"><span class="nick" style="color:#6c3d55"><a href="#115907" label="[11:59:07]">&lt;janneke&gt;</a></span><span class="message">it segfaults after it finds an error</span></div><div class="line" id="115911"><span class="nick" style="color:#80b1d3"><a href="#115911" label="[11:59:11]">&lt;OriansJ&gt;</a></span><span class="message">deesix: understandably. The test/common_$arch/ was just a quick choice that probably wasn't well thought out. As the concept of making a proper for libc in M2-Planet didn't even seem reasonable.</span></div><div class="line" id="115924"><span class="nick" style="color:#6c3d55"><a href="#115924" label="[11:59:24]">&lt;janneke&gt;</a></span><span class="message">yes, a backtrace would be nice</span></div><div class="line" id="120008"><span class="nick" style="color:#80b1d3"><a href="#120008" label="[12:00:08]">&lt;OriansJ&gt;</a></span><span class="message">so technically there is no canonical libc for things being built by M2-Planet</span></div><div class="line" id="120029"><span class="nick" style="color:#2e2a4a"><a href="#120029" label="[12:00:29]">&lt;fossy&gt;</a></span><span class="message">janneke: ah, yes, --version works. i have reprod this in a number of different settings, but when i acidentally passed --vrebose to mes it happened to do this. os this segfault i am seeing expected behaviour? in this particular case?</span></div><div class="line" id="120051"><span class="nick" style="color:#2e2a4a"><a href="#120051" label="[12:00:51]">&lt;fossy&gt;</a></span><span class="message"> <a rel="nofollow" href="https://ttm.sh/dJS.txt">https://ttm.sh/dJS.txt</a>  is a backtrace</span></div><div class="line" id="120134"><span class="nick" style="color:#80b1d3"><a href="#120134" label="[12:01:34]">&lt;OriansJ&gt;</a></span><span class="message">as M2-Planet you have no binary libraries, only source code that you explicitly include with -f and thus one could always write their own file library or string library.</span></div><div class="line" id="120206"><span class="nick" style="color:#2e2a4a"><a href="#120206" label="[12:02:06]">&lt;fossy&gt;</a></span><span class="message">i looked at the relevant files and what seems off is the very large value of x, which expectedly so when indexed in some global array is wayyy off</span></div><div class="line" id="120207"><span class="nick" style="color:#80b1d3"><a href="#120207" label="[12:02:07]">&lt;OriansJ&gt;</a></span><span class="message">as the #include's only mean things to GCC but not M2-Planet.</span></div><div class="line" id="120211"><span class="nick" style="color:#6c3d55"><a href="#120211" label="[12:02:11]">&lt;janneke&gt;</a></span><span class="message">fossy: it depends on how you define &quot;expected&quot;, because it's not desirable...but yeah, i see this too</span></div><div class="line" id="120222"><span class="nick" style="color:#6c3d55"><a href="#120222" label="[12:02:22]">&lt;janneke&gt;</a></span><span class="message">fossy: you found a bug!</span></div><div class="line" id="120313"><span class="nick" style="color:#2e2a4a"><a href="#120313" label="[12:03:13]">&lt;fossy&gt;</a></span><span class="message">janneke: yay</span></div><div class="line" id="120337"><span class="nick" style="color:#2e2a4a"><a href="#120337" label="[12:03:37]">&lt;fossy&gt;</a></span><span class="message"> now time to track down this other odd segfault which may not be related but might also be me being dumb</span></div><div class="line" id="120359"><span class="nick" style="color:#80b1d3"><a href="#120359" label="[12:03:59]">&lt;OriansJ&gt;</a></span><span class="message">and yes right now M2-Planet built with GCC doesn't use the contents of test/common_$arch/ because #include &lt;stdio.h&gt; and #include &lt;stdlib.h&gt; does include all of that functionality</span></div><div class="line" id="120518"><span class="nick" style="color:#80b1d3"><a href="#120518" label="[12:05:18]">&lt;OriansJ&gt;</a></span><span class="message">but I guess it is time for me to put in the effort to provide the primitives C programmers would expect of M2-Planet when they #include some standard libraries.</span></div><div class="line" id="120524"><span class="nick" style="color:#6c3d55"><a href="#120524" label="[12:05:24]">&lt;janneke&gt;</a></span><span class="message">fossy: you probably want to run mes/mescc using their wrappers in scripts/*</span></div><div class="line" id="120533"><span class="nick" style="color:#2e2a4a"><a href="#120533" label="[12:05:33]">&lt;fossy&gt;</a></span><span class="message">mes has a wrapper?</span></div><div class="line" id="120539"><span class="nick" style="color:#2e2a4a"><a href="#120539" label="[12:05:39]">&lt;fossy&gt;</a></span><span class="message">i am using the mescc wrapper</span></div><div class="line" id="120559"><span class="nick" style="color:#6c3d55"><a href="#120559" label="[12:05:59]">&lt;janneke&gt;</a></span><span class="message">ah, no mes has no wrapper, sorry</span></div><div class="line" id="120618"><span class="nick" style="color:#80b1d3"><a href="#120618" label="[12:06:18]">&lt;OriansJ&gt;</a></span><span class="message">fossy: if you checkout mes-m2; there is a snapshot of MesCC and nyacc that should work out of the box if mescc-tools is in your $PATH</span></div><div class="line" id="120636"><span class="nick" style="color:#2e2a4a"><a href="#120636" label="[12:06:36]">&lt;fossy&gt;</a></span><span class="message">work ootb with full mes?</span></div><div class="line" id="120731"><span class="nick" style="color:#80b1d3"><a href="#120731" label="[12:07:31]">&lt;OriansJ&gt;</a></span><span class="message">fossy: it should however I only tested with guile</span></div><div class="line" id="120914"><span class="nick" style="color:#2e2a4a"><a href="#120914" label="[12:09:14]">&lt;fossy&gt;</a></span><span class="message">janneke: ah found the other one</span></div><div class="line" id="120917"><span class="nick" style="color:#2e2a4a"><a href="#120917" label="[12:09:17]">&lt;fossy&gt;</a></span><span class="message">scripts/mescc --help</span></div><div class="line" id="120940"><span class="nick" style="color:#2e2a4a"><a href="#120940" label="[12:09:40]">&lt;fossy&gt;</a></span><span class="message">which after my small modifications produces this command bin/mes-mescc --no-auto-compile -e main -L module -L mes/module module/mescc.scm --help</span></div><div class="line" id="121032"><span class="nick" style="color:#2e2a4a"><a href="#121032" label="[12:10:32]">&lt;fossy&gt;</a></span><span class="message">which with MES_DEBUG=3 gives <a rel="nofollow" href="https://ttm.sh/dJI.txt">https://ttm.sh/dJI.txt</a>  and given the assertion error looks suspeciously similar to the other segfault</span></div><div class="line" id="121104"><span class="nick" style="color:#6c3d55"><a href="#121104" label="[12:11:04]">&lt;janneke&gt;</a></span><span class="message">oh my</span></div><div class="line" id="121111"><span class="nick" style="color:#6c3d55"><a href="#121111" label="[12:11:11]">&lt;janneke&gt;</a></span><span class="message">it's our lucky day</span></div><div class="line" id="121148"><span class="nick" style="color:#2e2a4a"><a href="#121148" label="[12:11:48]">&lt;fossy&gt;</a></span><span class="message">sorry to inundate you with this lol</span></div><div class="line" id="121209"><span class="nick" style="color:#80b1d3"><a href="#121209" label="[12:12:09]">&lt;OriansJ&gt;</a></span><span class="message">fossy: that would be if you ran a fuzzer against mes.c</span></div><div class="line" id="121303"><span class="nick" style="color:#2e2a4a"><a href="#121303" label="[12:13:03]">&lt;fossy&gt;</a></span><span class="message">yeah so 'if (TYPE (x) != TCHAR &amp;&amp; TYPE (x) != TNUMBER)'  and 'assert (TYPE (string) == TSTRING);' are the two lines causing the segfaults, I think that TYPE() macro has issues</span></div><div class="line" id="121311"><span class="nick" style="color:#2e2a4a"><a href="#121311" label="[12:13:11]">&lt;fossy&gt;</a></span><span class="message">or the passing of x (whatever that is) around</span></div><div class="line" id="121349"><span class="nick" style="color:#2e2a4a"><a href="#121349" label="[12:13:49]">&lt;fossy&gt;</a></span><span class="message">anyway i'm signing off for the night. cya all</span></div><div class="line" id="122746"><span class="nick" style="color:#6c3d55"><a href="#122746" label="[12:27:46]">&lt;janneke&gt;</a></span><span class="message">night!</span></div><div class="line" id="122843"><span class="nick" style="color:#234e69"><a href="#122843" label="[12:28:43]">&lt;deesix&gt;</a></span><span class="message">OriansJ, sure; M2-Planet ignores #define (or any kind of standard preprocessing) and gcc don't use test/common_$arch/ at all (with our asm()). As for my questions about the 4 files... Is mescc-tools-seed the home the $arch_defs.M1? What about ELF*?</span></div><div class="line" id="123042"><span class="nick" style="color:#80b1d3"><a href="#123042" label="[12:30:42]">&lt;OriansJ&gt;</a></span><span class="message">deesix: I probably should figure that out since these files are probably only going to get copied as more things try to be built with M2-Planet</span></div><div class="line" id="125043"><span class="nick" style="color:#234e69"><a href="#125043" label="[12:50:43]">&lt;deesix&gt;</a></span><span class="message">OriansJ, indeed. Duplication is sometimes required but too much &quot;doing the same fix 5 times&quot; is not funny at all. For context, I'd like to say that I was looking at how to resolve the /two kinds of stacks/ we get from the AArch64 M1 definitions.</span></div><div class="line" id="125312"><span class="nick" style="color:#80b1d3"><a href="#125312" label="[12:53:12]">&lt;OriansJ&gt;</a></span><span class="message">Perhaps a M2lib of sorts for projects that are written in M1 or use M2</span></div><div class="line" id="125347"><span class="nick" style="color:#80b1d3"><a href="#125347" label="[12:53:47]">&lt;OriansJ&gt;</a></span><span class="message">A single place for common definitions and libraries.</span></div><div class="line" id="125438"><span class="nick" style="color:#80b1d3"><a href="#125438" label="[12:54:38]">&lt;OriansJ&gt;</a></span><span class="message">Where proper C standard functions can be done in C</span></div><div class="line" id="125942"><span class="nick" style="color:#80b1d3"><a href="#125942" label="[12:59:42]">&lt;OriansJ&gt;</a></span><span class="message">*or atleast the M2-Planet subset of C we support*</span></div><div class="line" id="131205"><span class="nick" style="color:#80b1d3"><a href="#131205" label="[13:12:05]">&lt;OriansJ&gt;</a></span><span class="message">probably should think of making it easy for people to add their own OS if they don't do standard Linux syscalls</span></div><div class="line" id="131242"><span class="nick" style="color:#80b1d3"><a href="#131242" label="[13:12:42]">&lt;OriansJ&gt;</a></span><span class="message">let me whip together something for say AArch64 tell me what I did wrong and we can iterate towards something better long term.</span></div><div class="line" id="132216"><span class="nick" style="color:#234e69"><a href="#132216" label="[13:22:16]">&lt;deesix&gt;</a></span><span class="message">OriansJ, there's no hurry. Take your time to think if you want. Support for other OS is a thing to have in mind, but maybe not a priority.</span></div><div class="line" id="132224"><span class="nick" style="color:#6b8072"><a href="#132224" label="[13:22:24]">&lt;siraben&gt;</a></span><span class="message">I'm not a macOS expert but that would be good to have at some point as well</span></div><div class="line" id="132231"><span class="nick" style="color:#6b8072"><a href="#132231" label="[13:22:31]">&lt;siraben&gt;</a></span><span class="message">Along with BSD and such</span></div><div class="line" id="132410"><span class="nick" style="color:#234e69"><a href="#132410" label="[13:24:10]">&lt;deesix&gt;</a></span><span class="message">... or maybe it is :D</span></div><div class="line" id="132648"><span class="nick" style="color:#80b1d3"><a href="#132648" label="[13:26:48]">&lt;OriansJ&gt;</a></span><span class="message">Here we go: <a rel="nofollow" href="https://github.com/oriansj/M2libc">https://github.com/oriansj/M2libc</a> </span></div><div class="line" id="132742"><span class="nick" style="color:#6b8072"><a href="#132742" label="[13:27:42]">&lt;siraben&gt;</a></span><span class="message">OriansJ: I haven't been keeping up this this discussion, what is it?</span></div><div class="line" id="132745"><span class="nick" style="color:#6b8072"><a href="#132745" label="[13:27:45]">&lt;siraben&gt;</a></span><span class="message">s/this/with</span></div><div class="line" id="132813"><span class="nick" style="color:#80b1d3"><a href="#132813" label="[13:28:13]">&lt;OriansJ&gt;</a></span><span class="message">siraben: a future solution to the copy paste problem with building things with M2-Planet</span></div><div class="line" id="132825"><span class="nick" style="color:#80b1d3"><a href="#132825" label="[13:28:25]">&lt;OriansJ&gt;</a></span><span class="message">a standard C library of sorts</span></div><div class="line" id="132843"><span class="nick" style="color:#6b8072"><a href="#132843" label="[13:28:43]">&lt;siraben&gt;</a></span><span class="message">what's the copy paste problem?</span></div><div class="line" id="132909"><span class="nick" style="color:#80b1d3"><a href="#132909" label="[13:29:09]">&lt;OriansJ&gt;</a></span><span class="message">siraben: notice how blynn-compiler has a copy of files from M2-Planet?</span></div><div class="line" id="132942"><span class="nick" style="color:#6b8072"><a href="#132942" label="[13:29:42]">&lt;siraben&gt;</a></span><span class="message">oh, in the functions directory?</span></div><div class="line" id="132943"><span class="nick" style="color:#6b8072"><a href="#132943" label="[13:29:43]">&lt;siraben&gt;</a></span><span class="message">yes</span></div><div class="line" id="132958"><span class="nick" style="color:#80b1d3"><a href="#132958" label="[13:29:58]">&lt;OriansJ&gt;</a></span><span class="message">when some bug gets fixed in M2-Planet, one then has to find and fix all the copies too</span></div><div class="line" id="133031"><span class="nick" style="color:#80b1d3"><a href="#133031" label="[13:30:31]">&lt;OriansJ&gt;</a></span><span class="message">So create it as a unique repo which can be used as a submodule</span></div><div class="line" id="133124"><span class="nick" style="color:#80b1d3"><a href="#133124" label="[13:31:24]">&lt;OriansJ&gt;</a></span><span class="message">That way people who care about the C lib in M2-Planet have one single place for everything mescc-tools and M2-Planet specific</span></div><div class="line" id="133300"><span class="nick" style="color:#80b1d3"><a href="#133300" label="[13:33:00]">&lt;OriansJ&gt;</a></span><span class="message">So if someone wants to port it all to barOS which doesn't support Linux syscalls, they need only add a folder for each architecture and provide the their own syscall primitives.</span></div><div class="line" id="133349"><span class="nick" style="color:#80b1d3"><a href="#133349" label="[13:33:49]">&lt;OriansJ&gt;</a></span><span class="message">it also allows BSDs to have different struct sizes from Linux for things like utsname</span></div><div class="line" id="133418"><span class="nick" style="color:#80b1d3"><a href="#133418" label="[13:34:18]">&lt;OriansJ&gt;</a></span><span class="message">it is very much a raw idea right now.</span></div><div class="line" id="133532"><span class="nick" style="color:#80b1d3"><a href="#133532" label="[13:35:32]">&lt;OriansJ&gt;</a></span><span class="message">So I want people to figure out what I am doing wrong.</span></div><div class="line" id="133950"><span class="nick" style="color:#80b1d3"><a href="#133950" label="[13:39:50]">&lt;OriansJ&gt;</a></span><span class="message">for example let us say a program needs functions and constants that #include&lt;stdio.h&gt; traidtionally supplies. So we have <a rel="nofollow" href="https://github.com/oriansj/M2libc/blob/main/stdio.h">https://github.com/oriansj/M2libc/blob/main/stdio.h</a> </span></div><div class="line" id="133952"><span class="nick" style="color:#234e69"><a href="#133952" label="[13:39:52]">&lt;deesix&gt;</a></span><span class="message">Oh, yes... 0202471cef4685b8bb4470d1618a15ab32b131ef of blynn-compiler also catched my eye; not only functions/ but definitions for one arch (scared to see more comming).</span></div><div class="line" id="134017"><span class="nick" style="color:#80b1d3"><a href="#134017" label="[13:40:17]">&lt;OriansJ&gt;</a></span><span class="message">it needs some work but the general idea is there.</span></div><div class="line" id="134044"><span class="nick" style="color:#80b1d3"><a href="#134044" label="[13:40:44]">&lt;OriansJ&gt;</a></span><span class="message">Everything architecture specific is stripped out and placed in its own $arch_folder</span></div><div class="line" id="134148"><span class="nick" style="color:#80b1d3"><a href="#134148" label="[13:41:48]">&lt;OriansJ&gt;</a></span><span class="message">Then we make it a submodule in M2-Planet and anywhere else where we have this sort of duplication and save ourselves a lot of trouble long term.</span></div><div class="line" id="134257"><span class="nick" style="color:#d9d9d9"><a href="#134257" label="[13:42:57]">*</a></span><span class="message">deesix is in a fight with some &quot;typos&quot; in ELF* comments, but the copy-paste is winning for now :P</span></div><div class="line" id="134334"><span class="nick" style="color:#80b1d3"><a href="#134334" label="[13:43:34]">&lt;OriansJ&gt;</a></span><span class="message">well this is going to be a big clean up job with lots of pieces needing love.</span></div><div class="line" id="134452"><span class="nick" style="color:#80b1d3"><a href="#134452" label="[13:44:52]">&lt;OriansJ&gt;</a></span><span class="message">But I guess eventually I had to address this sort of problem of my own creation. Again.</span></div><div class="line" id="134539"><span class="nick" style="color:#80b1d3"><a href="#134539" label="[13:45:39]">&lt;OriansJ&gt;</a></span><span class="message">and if we do it right, MesCC can also share the work done.</span></div><div class="line" id="135007"><span class="nick" style="color:#234e69"><a href="#135007" label="[13:50:07]">&lt;deesix&gt;</a></span><span class="message">What would be wrong for MesCC? What to watch out?</span></div><div class="line" id="135152"><span class="nick" style="color:#80b1d3"><a href="#135152" label="[13:51:52]">&lt;OriansJ&gt;</a></span><span class="message">deesix: well MesCC doesn't support FUNCTION and does follow #includes and would require us to have matching #defines for each of our // CONSTANTs</span></div><div class="line" id="135237"><span class="nick" style="color:#80b1d3"><a href="#135237" label="[13:52:37]">&lt;OriansJ&gt;</a></span><span class="message">but other than that standard M2-Planet code should work great with MesCC.</span></div><div class="line" id="135352"><span class="nick" style="color:#80b1d3"><a href="#135352" label="[13:53:52]">&lt;OriansJ&gt;</a></span><span class="message">janneke: what do you think of that?</span></div><div class="line" id="135914"><span class="nick" style="color:#6c3d55"><a href="#135914" label="[13:59:14]">&lt;janneke&gt;</a></span><span class="message">the biggest problem with the full source bootstrap was pointer arithmetic</span></div><div class="line" id="140040"><span class="nick" style="color:#6c3d55"><a href="#140040" label="[14:00:40]">&lt;janneke&gt;</a></span><span class="message">and function static variables</span></div><div class="line" id="140103"><span class="nick" style="color:#6c3d55"><a href="#140103" label="[14:01:03]">&lt;janneke&gt;</a></span><span class="message">the FUNCTION thing is merely an annoyance; one cannot mix mescc and m2 code</span></div><div class="line" id="140137"><span class="nick" style="color:#6c3d55"><a href="#140137" label="[14:01:37]">&lt;janneke&gt;</a></span><span class="message">other than that, m2-planet with the # and // tricks is brilliant</span></div><div class="line" id="140146"><span class="nick" style="color:#80b1d3"><a href="#140146" label="[14:01:46]">&lt;OriansJ&gt;</a></span><span class="message">janneke: one can if one doesn't use M2 features that MesCC doesn't support</span></div><div class="line" id="140158"><span class="nick" style="color:#80b1d3"><a href="#140158" label="[14:01:58]">&lt;OriansJ&gt;</a></span><span class="message">So pointer arithmetic we can do</span></div><div class="line" id="140242"><span class="nick" style="color:#80b1d3"><a href="#140242" label="[14:02:42]">&lt;OriansJ&gt;</a></span><span class="message">function static variables would require M2-Planet to add support but we can cross that bridge when/if we get there.</span></div><div class="line" id="140401"><span class="nick" style="color:#80b1d3"><a href="#140401" label="[14:04:01]">&lt;OriansJ&gt;</a></span><span class="message">as static variables would just be a label with a NULL in M2-Planet's output</span></div><div class="line" id="140554"><span class="nick" style="color:#80b1d3"><a href="#140554" label="[14:05:54]">&lt;OriansJ&gt;</a></span><span class="message">So adding it wouldn't be hard; as it is just a minimally scoped global variable</span></div><div class="line" id="140649"><span class="nick" style="color:#6b8072"><a href="#140649" label="[14:06:49]">&lt;siraben&gt;</a></span><span class="message">OriansJ: I see. that's a good idea for porting it to other OSes that have different syscall primitives</span></div><div class="line" id="151145"><span class="nick" style="color:#6b8072"><a href="#151145" label="[15:11:45]">&lt;siraben&gt;</a></span><span class="message">OriansJ: I opened <a rel="nofollow" href="https://github.com/oriansj/blynn-compiler/pull/{13">https://github.com/oriansj/blynn-compiler/pull/{13</a>,14} </span></div><div class="line" id="155156"><span class="nick" style="color:#80b1d3"><a href="#155156" label="[15:51:56]">&lt;OriansJ&gt;</a></span><span class="message">siraben: merged</span></div><div class="line" id="155330"><span class="nick" style="color:#6d2462"><a href="#155330" label="[15:53:30]">&lt;pder&gt;</a></span><span class="message">siraben: I used valgrind (callgrind) with the gcc build, and also compared M1 output with the M2-Planet build</span></div><div class="line" id="155430"><span class="nick" style="color:#6b8072"><a href="#155430" label="[15:54:30]">&lt;siraben&gt;</a></span><span class="message">OriansJ: thanks</span></div><div class="line" id="155507"><span class="nick" style="color:#6b8072"><a href="#155507" label="[15:55:07]">&lt;siraben&gt;</a></span><span class="message">so performing map/foldr fusion those places should have made crossly.hs faster, but I have not benchmarked it</span></div><div class="line" id="155512"><span class="nick" style="color:#6b8072"><a href="#155512" label="[15:55:12]">&lt;siraben&gt;</a></span><span class="message">pder: I see</span></div><div class="line" id="155525"><span class="nick" style="color:#80b1d3"><a href="#155525" label="[15:55:25]">&lt;OriansJ&gt;</a></span><span class="message">pder: easy way to determe if M2-Planet is producing problems.</span></div><div class="line" id="160036"><span class="nick" style="color:#bc80bd"><a href="#160036" label="[16:00:36]">&lt;mihi&gt;</a></span><span class="message">OriansJ: I agree on what you wrote about who dictates the direction of a project. On the other hand, I don't want to create pull requests where I know that I will create you more work in the future as you are not satisified with how it is done. Especially since all that performance tweaking is only a side quest to the real goal.</span></div><div class="line" id="160121"><span class="nick" style="color:#bc80bd"><a href="#160121" label="[16:01:21]">&lt;mihi&gt;</a></span><span class="message">And yes, burnout is a thing, which is why I intend not to do any coding during the holidays (or as little as possible) and instead relax. For me, the holidays is 24th/25th/26th (UTC+1 timezone)</span></div><div class="line" id="160229"><span class="nick" style="color:#bc80bd"><a href="#160229" label="[16:02:29]">&lt;mihi&gt;</a></span><span class="message">so if you beat me to it, feel free to change it as you see it fit better. I currently don't see it helpful or necessary to make file.c more bloated and memory hungry for no measurable benefits.</span></div><div class="line" id="160535"><span class="nick" style="color:#bc80bd"><a href="#160535" label="[16:05:35]">&lt;mihi&gt;</a></span><span class="message">about M2libc: I like the idea and the general file layout. I would prefer the names to be more consistent between architectures, i. e. M2libc/$(get_machine)/ELF-debug.hex2 being always the debug ELF stub, or if needed M2libc/$(get_machine)/ELF-$(get_machine)-debug.hex2. As you have to change all paths anyway, I don't think that makes it a lot more work, and maybe can share some code in M2-Planet tests.</span></div><div class="line" id="161025"><span class="nick" style="color:#bc80bd"><a href="#161025" label="[16:10:25]">&lt;mihi&gt;</a></span><span class="message">about other archs: I would love to see getting M2-Planet and assorted stuff to be ported to x86_64 EFI Boot Services (so that it can be run directly from UEFI shell). But that would require lots of changes, starting from that it does not use ELF but PE/COFF binaries, and syscalls are basically jumps into a giant jump table called the EFI Boot services table, which is a member of the EFI system table which is</span></div><div class="line" id="161025"><span class="nick" style="color:#bc80bd"><a href="#161025" label="[16:10:25]">&lt;mihi&gt;</a></span><span class="message">passed as a pointer to the main entry point.</span></div><div class="line" id="161033"><span class="nick" style="color:#80b1d3"><a href="#161033" label="[16:10:33]">&lt;OriansJ&gt;</a></span><span class="message">mihi: seems entirely reasonable; enjoy your holiday.</span></div><div class="line" id="161117"><span class="nick" style="color:#80b1d3"><a href="#161117" label="[16:11:17]">&lt;OriansJ&gt;</a></span><span class="message">oh that is far easier to do than you think</span></div><div class="line" id="161122"><span class="nick" style="color:#bc80bd"><a href="#161122" label="[16:11:22]">&lt;mihi&gt;</a></span><span class="message">but I know that I won't be able to spare enough time to implement it myself in the near future, so I won't want to make anyone else do so either.</span></div><div class="line" id="161245"><span class="nick" style="color:#bc80bd"><a href="#161245" label="[16:12:45]">&lt;mihi&gt;</a></span><span class="message">(did I mention that the calling conventions used to call EFI services are different from what is generally used?)</span></div><div class="line" id="161246"><span class="nick" style="color:#80b1d3"><a href="#161246" label="[16:12:46]">&lt;OriansJ&gt;</a></span><span class="message">Only the syscalls would need to be replaced and libc-core.M1 tweaked and PE.hex2 would need to be written but then you would be done.</span></div><div class="line" id="161321"><span class="nick" style="color:#80b1d3"><a href="#161321" label="[16:13:21]">&lt;OriansJ&gt;</a></span><span class="message">calling convention is a NULL point when you can use ASM()</span></div><div class="line" id="161341"><span class="nick" style="color:#bc80bd"><a href="#161341" label="[16:13:41]">&lt;mihi&gt;</a></span><span class="message">(which probably can be fixed by setting up the stack layout by _asm directives, but I did that some time ago and it took me &quot;too long&quot; to get it right)</span></div><div class="line" id="161400"><span class="nick" style="color:#80b1d3"><a href="#161400" label="[16:14:00]">&lt;OriansJ&gt;</a></span><span class="message">How  M2-Planet calls your read/write/etc doesn't matter as long as the primitives do the transformation.</span></div><div class="line" id="161416"><span class="nick" style="color:#bc80bd"><a href="#161416" label="[16:14:16]">&lt;mihi&gt;</a></span><span class="message">OriansJ, true</span></div><div class="line" id="161453"><span class="nick" style="color:#80b1d3"><a href="#161453" label="[16:14:53]">&lt;OriansJ&gt;</a></span><span class="message">eg you could call read with the arguments in the wrong order and just have the assembly block fix it and then do what is required on the host.</span></div><div class="line" id="161548"><span class="nick" style="color:#80b1d3"><a href="#161548" label="[16:15:48]">&lt;OriansJ&gt;</a></span><span class="message">So it oculd be done in an afternoon by anyone familiar with the host system's conventions and syscall # list</span></div><div class="line" id="161626"><span class="nick" style="color:#80b1d3"><a href="#161626" label="[16:16:26]">&lt;OriansJ&gt;</a></span><span class="message">the PE.hex2 is probably the hard part</span></div><div class="line" id="161636"><span class="nick" style="color:#bc80bd"><a href="#161636" label="[16:16:36]">&lt;mihi&gt;</a></span><span class="message">if that person also was familiar with the structure of the PE/COFF format (I never looked at it using a hex editor), and with M2-Planet calling conventions :)</span></div><div class="line" id="161645"><span class="nick" style="color:#80b1d3"><a href="#161645" label="[16:16:45]">&lt;OriansJ&gt;</a></span><span class="message">as I am not too familiar with the format</span></div><div class="line" id="161653"><span class="nick" style="color:#d9d9d9"><a href="#161653" label="[16:16:53]">*</a></span><span class="message">mihi neither</span></div><div class="line" id="161818"><span class="nick" style="color:#80b1d3"><a href="#161818" label="[16:18:18]">&lt;OriansJ&gt;</a></span><span class="message">M2-Planet doesn't have calling conventions; only architecture specific stack conventions</span></div><div class="line" id="162037"><span class="nick" style="color:#80b1d3"><a href="#162037" label="[16:20:37]">&lt;OriansJ&gt;</a></span><span class="message">for example because x86 is a stack that grows towards zero and we push arguments 1 then 2 then 3. It is always base pointer - offset With a return address from the call before the locals</span></div><div class="line" id="162122"><span class="nick" style="color:#bc80bd"><a href="#162122" label="[16:21:22]">&lt;mihi&gt;</a></span><span class="message">so the calling convention of M2-Planet is &quot;pass all arguments on the stack&quot;. That is also a calling convention :)</span></div><div class="line" id="162151"><span class="nick" style="color:#bc80bd"><a href="#162151" label="[16:21:51]">&lt;mihi&gt;</a></span><span class="message">IIRC for UEFI the first 2 arguments are in registers and the rest is on the stack (in reverse order from what Linux does)</span></div><div class="line" id="162201"><span class="nick" style="color:#80b1d3"><a href="#162201" label="[16:22:01]">&lt;OriansJ&gt;</a></span><span class="message">mihi: a very lazy one but yes and returns in what your architecture prefers in R0 (x86 =&gt; EAX)</span></div><div class="line" id="162318"><span class="nick" style="color:#80b1d3"><a href="#162318" label="[16:23:18]">&lt;OriansJ&gt;</a></span><span class="message">^prefers in^refers to as^</span></div><div class="line" id="162347"><span class="nick" style="color:#bc80bd"><a href="#162347" label="[16:23:47]">&lt;mihi&gt;</a></span><span class="message">unfortunately, the Phoenix Wiki has been down for a few years now (it was very useful as it had pages for all the UEFI structs and functions), and I don't really want to point to the 10MB large UEFI spec PDF :)</span></div><div class="line" id="162422"><span class="nick" style="color:#80b1d3"><a href="#162422" label="[16:24:22]">&lt;OriansJ&gt;</a></span><span class="message">mihi: then encode the knowledge with your code</span></div><div class="line" id="162454"><span class="nick" style="color:#80b1d3"><a href="#162454" label="[16:24:54]">&lt;OriansJ&gt;</a></span><span class="message">M2-Planet supports /* block comments */ and M1/hex2 support ; and # line comments</span></div><div class="line" id="162513"><span class="nick" style="color:#80b1d3"><a href="#162513" label="[16:25:13]">&lt;OriansJ&gt;</a></span><span class="message">So embed understanding with code.</span></div><div class="line" id="162531"><span class="nick" style="color:#80b1d3"><a href="#162531" label="[16:25:31]">&lt;OriansJ&gt;</a></span><span class="message">we don't need the full spec to bootstrap</span></div><div class="line" id="162608"><span class="nick" style="color:#bc80bd"><a href="#162608" label="[16:26:08]">&lt;mihi&gt;</a></span><span class="message">EFI SYSTEM TABLE is here <a rel="nofollow" href="http://web.archive.org/web/20181109122233/http://wiki.phoenix.com/wiki/index.php/EFI_SYSTEM_TABLE">http://web.archive.org/web/20181109122233/http://wiki.phoenix.com/wiki/index.php/EFI_SYSTEM_TABLE</a>,  and EFI BOOT SERVICES TABLE is here <a rel="nofollow" href="http://web.archive.org/web/20181019212744/http://wiki.phoenix.com/wiki/index.php/EFI_BOOT_SERVICES">http://web.archive.org/web/20181019212744/http://wiki.phoenix.com/wiki/index.php/EFI_BOOT_SERVICES</a> </span></div><div class="line" id="162708"><span class="nick" style="color:#bc80bd"><a href="#162708" label="[16:27:08]">&lt;mihi&gt;</a></span><span class="message">and for file access one would need <a rel="nofollow" href="http://web.archive.org/web/20181007081027/http://wiki.phoenix.com/wiki/index.php/EFI_SIMPLE_FILE_SYSTEM_PROTOCOL">http://web.archive.org/web/20181007081027/http://wiki.phoenix.com/wiki/index.php/EFI_SIMPLE_FILE_SYSTEM_PROTOCOL</a> </span></div><div class="line" id="162725"><span class="nick" style="color:#bc80bd"><a href="#162725" label="[16:27:25]">&lt;mihi&gt;</a></span><span class="message">err I mean <a rel="nofollow" href="http://web.archive.org/web/20181007081027/http://wiki.phoenix.com/wiki/index.php/EFI_FILE_PROTOCOL">http://web.archive.org/web/20181007081027/http://wiki.phoenix.com/wiki/index.php/EFI_FILE_PROTOCOL</a> </span></div><div class="line" id="162804"><span class="nick" style="color:#bc80bd"><a href="#162804" label="[16:28:04]">&lt;mihi&gt;</a></span><span class="message">I wouldn't be able to do it in one afternoon :)</span></div><div class="line" id="162921"><span class="nick" style="color:#80b1d3"><a href="#162921" label="[16:29:21]">&lt;OriansJ&gt;</a></span><span class="message">mihi: open, close, read and write is too much for an afternoon?</span></div><div class="line" id="163035"><span class="nick" style="color:#80b1d3"><a href="#163035" label="[16:30:35]">&lt;OriansJ&gt;</a></span><span class="message">doesn't even eed to be a proper read or write, just a fgetc and fputc that works on a single byte at a time.</span></div><div class="line" id="163136"><span class="nick" style="color:#80b1d3"><a href="#163136" label="[16:31:36]">&lt;OriansJ&gt;</a></span><span class="message">M2-Planet using cc-minimal.c is just a single file read and a single file write.</span></div><div class="line" id="163137"><span class="nick" style="color:#bc80bd"><a href="#163137" label="[16:31:37]">&lt;mihi&gt;</a></span><span class="message">more wrapping my head round where to get the correct pointers from that need to be called to open a file. read/write is simple in comparison.</span></div><div class="line" id="163200"><span class="nick" style="color:#80b1d3"><a href="#163200" label="[16:32:00]">&lt;OriansJ&gt;</a></span><span class="message">fair</span></div><div class="line" id="163209"><span class="nick" style="color:#bc80bd"><a href="#163209" label="[16:32:09]">&lt;mihi&gt;</a></span><span class="message">When implementing it in C it is (tedious but straightforward), but that assumes I'm using a C compiler that does the calling conventions for me.</span></div><div class="line" id="163400"><span class="nick" style="color:#bc80bd"><a href="#163400" label="[16:34:00]">&lt;mihi&gt;</a></span><span class="message">not to forget that if you want relative paths (and you probably want them) you'd have to first query the path of the currently running binary, find the last slash, append the relative path name, and pass that path to the syscall.</span></div><div class="line" id="163425"><span class="nick" style="color:#bc80bd"><a href="#163425" label="[16:34:25]">&lt;mihi&gt;</a></span><span class="message">there are no chdir or similar syscalls in EFI Boot Services.</span></div><div class="line" id="163443"><span class="nick" style="color:#bc80bd"><a href="#163443" label="[16:34:43]">&lt;mihi&gt;</a></span><span class="message">but fortunately it will resolve ../ for you</span></div><div class="line" id="163549"><span class="nick" style="color:#bc80bd"><a href="#163549" label="[16:35:49]">&lt;mihi&gt;</a></span><span class="message">but yeah, considering how Computrace has subverted the platform, not the best platform to bootstrap either</span></div><div class="line" id="165919"><span class="nick" style="color:#6d2462"><a href="#165919" label="[16:59:19]">&lt;pder&gt;</a></span><span class="message">Not sure if this is known issue in M2-Planet, but indexing into a two dimensional array does not seem to work.</span></div><div class="line" id="165945"><span class="nick" style="color:#6d2462"><a href="#165945" label="[16:59:45]">&lt;pder&gt;</a></span><span class="message">char getargchar(int n, int k) { return env_argv[n][k]; } does not work</span></div><div class="line" id="170008"><span class="nick" style="color:#6d2462"><a href="#170008" label="[17:00:08]">&lt;pder&gt;</a></span><span class="message">char getargchar(int n, int k) { char *tmp = env_argv[n]; return tmp[k]; } works</span></div><div class="line" id="174242"><span class="nick" style="color:#80b1d3"><a href="#174242" label="[17:42:42]">&lt;OriansJ&gt;</a></span><span class="message">pder: I can confirm multidimensional arrays are broken in M2-Planet.</span></div><div class="line" id="174340"><span class="nick" style="color:#80b1d3"><a href="#174340" label="[17:43:40]">&lt;OriansJ&gt;</a></span><span class="message">for that use case.</span></div><div class="line" id="174621"><span class="nick" style="color:#80b1d3"><a href="#174621" label="[17:46:21]">&lt;OriansJ&gt;</a></span><span class="message">At this point, I think I need to just start tracking these sorts of bugs publicly</span></div><div class="line" id="181348"><span class="nick" style="color:#80b1d3"><a href="#181348" label="[18:13:48]">&lt;OriansJ&gt;</a></span><span class="message">ok the first attempt at a public list: <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/blob/master/known_issues.org">https://github.com/oriansj/M2-Planet/blob/master/known_issues.org</a> </span></div><div class="line" id="183915"><span class="nick" style="color:#6b8072"><a href="#183915" label="[18:39:15]">&lt;siraben&gt;</a></span><span class="message">pder: there appears to be a regression, if you try to run the generated C program from precisely.hs it no longer compiles with GCC</span></div><div class="line" id="184013"><span class="nick" style="color:#d9d9d9"><a href="#184013" label="[18:40:13]">*</a></span><span class="message">siraben posted a file: out.c (13KiB) &lt; <a rel="nofollow" href="https://matrix.org/_matrix/media/r0/download/matrix.org/cqXXGVgbAThxSHhggxULIEOX">https://matrix.org/_matrix/media/r0/download/matrix.org/cqXXGVgbAThxSHhggxULIEOX</a>  &gt;</span></div><div class="line" id="184606"><span class="nick" style="color:#80b1d3"><a href="#184606" label="[18:46:06]">&lt;OriansJ&gt;</a></span><span class="message">fortunately the fix is trivial: <a rel="nofollow" href="https://paste.debian.net/1178222/">https://paste.debian.net/1178222/</a> </span></div><div class="line" id="184645"><span class="nick" style="color:#80b1d3"><a href="#184645" label="[18:46:45]">&lt;OriansJ&gt;</a></span><span class="message">add a single ')' in the generated output.</span></div><div class="line" id="184746"><span class="nick" style="color:#80b1d3"><a href="#184746" label="[18:47:46]">&lt;OriansJ&gt;</a></span><span class="message">but also that code wouldn't compile with M2-Planet either</span></div><div class="line" id="184838"><span class="nick" style="color:#80b1d3"><a href="#184838" label="[18:48:38]">&lt;OriansJ&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1178223/">https://paste.debian.net/1178223/</a> </span></div><div class="line" id="185331"><span class="nick" style="color:#6b8072"><a href="#185331" label="[18:53:31]">&lt;siraben&gt;</a></span><span class="message">this also means it's a good idea to CI the code generation</span></div><div class="line" id="190342"><span class="nick" style="color:#80b1d3"><a href="#190342" label="[19:03:42]">&lt;OriansJ&gt;</a></span><span class="message">siraben: or the CI didn't care that the build failed</span></div><div class="line" id="190404"><span class="nick" style="color:#6b8072"><a href="#190404" label="[19:04:04]">&lt;siraben&gt;</a></span><span class="message">OriansJ: because it was never tested</span></div><div class="line" id="190454"><span class="nick" style="color:#80b1d3"><a href="#190454" label="[19:04:54]">&lt;OriansJ&gt;</a></span><span class="message">well running go.sh is the testing or make ALL</span></div><div class="line" id="190530"><span class="nick" style="color:#80b1d3"><a href="#190530" label="[19:05:30]">&lt;OriansJ&gt;</a></span><span class="message">as go.sh is set -eux</span></div><div class="line" id="190813"><span class="nick" style="color:#6b8072"><a href="#190813" label="[19:08:13]">&lt;siraben&gt;</a></span><span class="message">OriansJ: ah, I should clarify that it's not precisely.hs failing to compile but the _output_ of precisely.hs failing to compile</span></div><div class="line" id="190948"><span class="nick" style="color:#80b1d3"><a href="#190948" label="[19:09:48]">&lt;OriansJ&gt;</a></span><span class="message">ok</span></div><div class="line" id="191433"><span class="nick" style="color:#80b1d3"><a href="#191433" label="[19:14:33]">&lt;OriansJ&gt;</a></span><span class="message">siraben: so it probably would be a good idea to make some tests for precisely to ensure its primitives behave like GHC's primitives</span></div><div class="line" id="191558"><span class="nick" style="color:#6b8072"><a href="#191558" label="[19:15:58]">&lt;siraben&gt;</a></span><span class="message">yeah, there's also a mandelbrot test by ben lynn which we could adapt</span></div><div class="line" id="191655"><span class="nick" style="color:#80b1d3"><a href="#191655" label="[19:16:55]">&lt;OriansJ&gt;</a></span><span class="message">That way as we approximate the required functionality for bootstrapping GHC; we minimize the number of regressions.</span></div><div class="line" id="191740"><span class="nick" style="color:#80b1d3"><a href="#191740" label="[19:17:40]">&lt;OriansJ&gt;</a></span><span class="message">but yes; leveraging the previously written tests probably is a good idea.</span></div><div class="line" id="193954"><span class="nick" style="color:#6b8072"><a href="#193954" label="[19:39:54]">&lt;siraben&gt;</a></span><span class="message">POC of such a test (dropping the breaking change for now), <a rel="nofollow" href="https://github.com/siraben/compiler/runs/1606175037?check_suite_focus=true">https://github.com/siraben/compiler/runs/1606175037?check_suite_focus=true</a> </span></div><div class="line" id="195332"><span class="nick" style="color:#6d2462"><a href="#195332" label="[19:53:32]">&lt;pder&gt;</a></span><span class="message">sorry about that, I didnt notice it because I only tested ./go.sh and make</span></div><div class="line" id="200137"><span class="nick" style="color:#6d2462"><a href="#200137" label="[20:01:37]">&lt;pder&gt;</a></span><span class="message">What do you think about adding one more step to go.sh to have bin/precisely compile precisely.hs and recompile?</span></div><div class="line" id="200221"><span class="nick" style="color:#80b1d3"><a href="#200221" label="[20:02:21]">&lt;OriansJ&gt;</a></span><span class="message">self-hosting is usually a good test for a compiler</span></div><div class="line" id="200238"><span class="nick" style="color:#6b8072"><a href="#200238" label="[20:02:38]">&lt;siraben&gt;</a></span><span class="message">pder: yes tht would be a good idea as well</span></div><div class="line" id="200301"><span class="nick" style="color:#6b8072"><a href="#200301" label="[20:03:01]">&lt;siraben&gt;</a></span><span class="message">pder: well, actually, I think go.sh should be for building only, we could have a test.sh file for the tests</span></div><div class="line" id="200336"><span class="nick" style="color:#6d2462"><a href="#200336" label="[20:03:36]">&lt;pder&gt;</a></span><span class="message">Speaking of samples, there is also site/q11.hs which is known as the N-queens problem.  That might be nice to adapt so it runs on precisely</span></div><div class="line" id="200940"><span class="nick" style="color:#6d2462"><a href="#200940" label="[20:09:40]">&lt;pder&gt;</a></span><span class="message">I pushed the missing ) fix to my master branch.  Also I fixed getargchar() so it works with M2-Planet.  Now command like arguments work like ./bin/precisely coms</span></div><div class="line" id="201002"><span class="nick" style="color:#6d2462"><a href="#201002" label="[20:10:02]">&lt;pder&gt;</a></span><span class="message">*line</span></div><div class="line" id="201112"><span class="nick" style="color:#80b1d3"><a href="#201112" label="[20:11:12]">&lt;OriansJ&gt;</a></span><span class="message">pder: merged</span></div><div class="line" id="202249"><span class="nick" style="color:#6d2462"><a href="#202249" label="[20:22:49]">&lt;pder&gt;</a></span><span class="message">Thanks.  I was thinking about the best way to avoid shell redirection in the build since it may not be available.  The ffi probably needs to be extended to allow opening files for both input and output, but I think most of that could be done in Haskell.  siraben: thoughts?</span></div><div class="line" id="202406"><span class="nick" style="color:#6b8072"><a href="#202406" label="[20:24:06]">&lt;siraben&gt;</a></span><span class="message">pder: Oh yeah could use blynn-compiler as a shell scripting language</span></div><div class="line" id="202626"><span class="nick" style="color:#6b8072"><a href="#202626" label="[20:26:26]">&lt;siraben&gt;</a></span><span class="message">Some form of modules would really help here, hm.</span></div><div class="line" id="202642"><span class="nick" style="color:#6b8072"><a href="#202642" label="[20:26:42]">&lt;siraben&gt;</a></span><span class="message">if we had #include in blynn-compiler, even.</span></div><div class="line" id="202722"><span class="nick" style="color:#6d2462"><a href="#202722" label="[20:27:22]">&lt;pder&gt;</a></span><span class="message">For example in precisely.hs on line 2046 is where main is declared and we parse args.  I think we would want to be able to specify an input and output file there.</span></div><div class="line" id="202840"><span class="nick" style="color:#6d2462"><a href="#202840" label="[20:28:40]">&lt;pder&gt;</a></span><span class="message">I dont think that would be too involved.  The include function in Haskell would just call into C to open the file and read from that file handle</span></div><div class="line" id="202856"><span class="nick" style="color:#80b1d3"><a href="#202856" label="[20:28:56]">&lt;OriansJ&gt;</a></span><span class="message">siraben: well #include is simple to add. just treat it like an expanded macro; that is what the C preprocessor would do.</span></div><div class="line" id="202928"><span class="nick" style="color:#6b8072"><a href="#202928" label="[20:29:28]">&lt;siraben&gt;</a></span><span class="message">OriansJ: right, but we'd have to implement that in Haskell or C?</span></div><div class="line" id="202940"><span class="nick" style="color:#6b8072"><a href="#202940" label="[20:29:40]">&lt;siraben&gt;</a></span><span class="message">Because if we did so in Haskell, would have to open/close files</span></div><div class="line" id="203001"><span class="nick" style="color:#6b8072"><a href="#203001" label="[20:30:01]">&lt;siraben&gt;</a></span><span class="message">and that requires extending the FFI, which we need to do at some point anyway</span></div><div class="line" id="203016"><span class="nick" style="color:#6b8072"><a href="#203016" label="[20:30:16]">&lt;siraben&gt;</a></span><span class="message">pder: ah yes</span></div><div class="line" id="203030"><span class="nick" style="color:#80b1d3"><a href="#203030" label="[20:30:30]">&lt;OriansJ&gt;</a></span><span class="message">siraben: either will work but it is more of a question which seems more fun to you.</span></div><div class="line" id="203246"><span class="nick" style="color:#80b1d3"><a href="#203246" label="[20:32:46]">&lt;OriansJ&gt;</a></span><span class="message">as opening a file in C can either mean just returning a file handle (eg the number 5) or returning a struct which might contain the contents of the file as a char array.</span></div><div class="line" id="221555"><span class="nick" style="color:#3c5b35"><a href="#221555" label="[22:15:55]">&lt;stikonas&gt;</a></span><span class="message">hmm, so how will blynn-compiler be used for bootstrap. At the moment I see it creates something called precisely? Is this going to be used for further more complete haskell?</span></div><div class="line" id="222905"><span class="nick" style="color:#2e2a4a"><a href="#222905" label="[22:29:05]">&lt;fossy&gt;</a></span><span class="message">stikonas: probably a scheme interpreter on top which then can go to mescc and firneds</span></div><div class="line" id="222925"><span class="nick" style="color:#2e2a4a"><a href="#222925" label="[22:29:25]">&lt;fossy&gt;</a></span><span class="message">janneke: FWIW i got a bit further by using scripts/mescc.scm rather than module/mescc.scm</span></div><div class="line" id="223057"><span class="nick" style="color:#2e2a4a"><a href="#223057" label="[22:30:57]">&lt;fossy&gt;</a></span><span class="message">do you know why i might be getting assert fail: TYPE (string) == TSTRING</span></div><div class="line" id="223802"><span class="nick" style="color:#2e2a4a"><a href="#223802" label="[22:38:02]">&lt;fossy&gt;</a></span><span class="message">success! building mes-0.22 using mescc!!!</span></div><div class="line" id="223824"><span class="nick" style="color:#2e2a4a"><a href="#223824" label="[22:38:24]">&lt;fossy&gt;</a></span><span class="message">your mes-0.21-skldafjiowaturiewjklngklasdngfklureiowautiorsdjklfjaioetwlekjr (not those letters) didn't work but mes-0.22 works!</span></div><br /></div></body></html>