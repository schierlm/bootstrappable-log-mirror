<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-05-23.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000257"><span class="nick" style="color:#389600"><a href="#000257" label="[00:02:57]">&lt;stikonas&gt;</a></span><span class="message">can anybody figure out why shellcheck is offended <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/174/checks?check_run_id=6546511171">https://github.com/fosslinux/live-bootstrap/pull/174/checks?check_run_id=6546511171</a>  ?</span></div><div class="line" id="000440"><span class="nick" style="color:#389600"><a href="#000440" label="[00:04:40]">&lt;stikonas&gt;</a></span><span class="message">I guess I'll just disable it</span></div><div class="line" id="000558"><span class="nick" style="color:#8dd3c7"><a href="#000558" label="[00:05:58]">&lt;oriansj&gt;</a></span><span class="message">well prefix as a common environmental variable name and PREFIX is close to prefix hence the error</span></div><div class="line" id="000619"><span class="nick" style="color:#8dd3c7"><a href="#000619" label="[00:06:19]">&lt;oriansj&gt;</a></span><span class="message">just changing from PREFIX to prefix would make it shutup too</span></div><div class="line" id="001435"><span class="nick" style="color:#8dd3c7"><a href="#001435" label="[00:14:35]">&lt;oriansj&gt;</a></span><span class="message">well we know 510 bytes is enough for FORTH and LISP (thanks to sectorForth and sectorLisp) so someone could probably do a variation of M0 in 510bytes</span></div><div class="line" id="001609"><span class="nick" style="color:#8dd3c7"><a href="#001609" label="[00:16:09]">&lt;oriansj&gt;</a></span><span class="message">(say limited to %label and &amp;label offsets only and %0x123 values)</span></div><div class="line" id="002323"><span class="nick" style="color:#8dd3c7"><a href="#002323" label="[00:23:23]">&lt;oriansj&gt;</a></span><span class="message">but hex0 can be done in under 250bytes</span></div><div class="line" id="003553"><span class="nick" style="color:#8dd3c7"><a href="#003553" label="[00:35:53]">&lt;oriansj&gt;</a></span><span class="message">and that can be done without any clever hacks</span></div><div class="line" id="010330"><span class="nick" style="color:#8dd3c7"><a href="#010330" label="[01:03:30]">&lt;oriansj&gt;</a></span><span class="message">but there still remains the question are there any better languages that could fix in 250bytes?</span></div><div class="line" id="010339"><span class="nick" style="color:#8dd3c7"><a href="#010339" label="[01:03:39]">&lt;oriansj&gt;</a></span><span class="message">^fix^fit^</span></div><div class="line" id="011143"><span class="nick" style="color:#389600"><a href="#011143" label="[01:11:43]">&lt;stikonas&gt;</a></span><span class="message">if it's a better language more than that could be acceptable</span></div><div class="line" id="011220"><span class="nick" style="color:#389600"><a href="#011220" label="[01:12:20]">&lt;stikonas&gt;</a></span><span class="message">we still need to write &quot;hex1&quot; and kaem in hex0 code</span></div><div class="line" id="011404"><span class="nick" style="color:#6b8072"><a href="#011404" label="[01:14:04]">&lt;drakonis&gt;</a></span><span class="message">oriansj: sectorlisp?</span></div><div class="line" id="011414"><span class="nick" style="color:#6b8072"><a href="#011414" label="[01:14:14]">&lt;drakonis&gt;</a></span><span class="message">oh wait</span></div><div class="line" id="011427"><span class="nick" style="color:#6b8072"><a href="#011427" label="[01:14:27]">&lt;drakonis&gt;</a></span><span class="message">this one's actually 512 bytes</span></div><div class="line" id="011434"><span class="nick" style="color:#8dd3c7"><a href="#011434" label="[01:14:34]">&lt;oriansj&gt;</a></span><span class="message">510 bytes</span></div><div class="line" id="011435"><span class="nick" style="color:#8dd3c7"><a href="#011435" label="[01:14:35]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/jart/sectorlisp">https://github.com/jart/sectorlisp</a> </span></div><div class="line" id="011453"><span class="nick" style="color:#8dd3c7"><a href="#011453" label="[01:14:53]">&lt;oriansj&gt;</a></span><span class="message">the last 2 bytes always have to be AA55</span></div><div class="line" id="011508"><span class="nick" style="color:#389600"><a href="#011508" label="[01:15:08]">&lt;stikonas&gt;</a></span><span class="message">but the problem is lack of useful sectorlist programs</span></div><div class="line" id="011531"><span class="nick" style="color:#389600"><a href="#011531" label="[01:15:31]">&lt;stikonas&gt;</a></span><span class="message">if somebody could implement e.g M0 in sectorlisp, maybe that would be useful</span></div><div class="line" id="011548"><span class="nick" style="color:#8dd3c7"><a href="#011548" label="[01:15:48]">&lt;oriansj&gt;</a></span><span class="message">unless you made it so you are doing stosb byte es:[edi], al; push ebp</span></div><div class="line" id="011707"><span class="nick" style="color:#8dd3c7"><a href="#011707" label="[01:17:07]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well yes, alternate (ideally better roots) are encouraged for anyone who thinks they can do it better.</span></div><div class="line" id="012248"><span class="nick" style="color:#8dd3c7"><a href="#012248" label="[01:22:48]">&lt;oriansj&gt;</a></span><span class="message">perhaps a dumb question but can sectorlisp or sectorforth self-host?</span></div><div class="line" id="012317"><span class="nick" style="color:#8dd3c7"><a href="#012317" label="[01:23:17]">&lt;oriansj&gt;</a></span><span class="message">because I suspect they probably would not be able to</span></div><div class="line" id="012346"><span class="nick" style="color:#8dd3c7"><a href="#012346" label="[01:23:46]">&lt;oriansj&gt;</a></span><span class="message">in which case, hex0 would be the most advanced self-hosting language that fits in 510 bytes</span></div><div class="line" id="012357"><span class="nick" style="color:#6b8072"><a href="#012357" label="[01:23:57]">&lt;drakonis&gt;</a></span><span class="message">its written in C</span></div><div class="line" id="012524"><span class="nick" style="color:#6b8072"><a href="#012524" label="[01:25:24]">&lt;drakonis&gt;</a></span><span class="message">oh it can be self hosted</span></div><div class="line" id="012534"><span class="nick" style="color:#6b8072"><a href="#012534" label="[01:25:34]">&lt;drakonis&gt;</a></span><span class="message">provided you have another lisp implementation</span></div><div class="line" id="012539"><span class="nick" style="color:#6b8072"><a href="#012539" label="[01:25:39]">&lt;drakonis&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/jart/sectorlisp#overview">https://github.com/jart/sectorlisp#overview</a> </span></div><div class="line" id="012552"><span class="nick" style="color:#6b8072"><a href="#012552" label="[01:25:52]">&lt;drakonis&gt;</a></span><span class="message">also sectorlisp.S</span></div><div class="line" id="012954"><span class="nick" style="color:#8dd3c7"><a href="#012954" label="[01:29:54]">&lt;oriansj&gt;</a></span><span class="message">drakonis: self-hosting for an interpreted language would mean that it would able to run a program capable of building its own binary.</span></div><div class="line" id="013005"><span class="nick" style="color:#6b8072"><a href="#013005" label="[01:30:05]">&lt;drakonis&gt;</a></span><span class="message">ah right</span></div><div class="line" id="013010"><span class="nick" style="color:#6b8072"><a href="#013010" label="[01:30:10]">&lt;drakonis&gt;</a></span><span class="message">i guess not then?</span></div><div class="line" id="013031"><span class="nick" style="color:#6b8072"><a href="#013031" label="[01:30:31]">&lt;drakonis&gt;</a></span><span class="message">well, check the readme</span></div><div class="line" id="013038"><span class="nick" style="color:#6b8072"><a href="#013038" label="[01:30:38]">&lt;drakonis&gt;</a></span><span class="message">i don't know how to answer that</span></div><div class="line" id="013052"><span class="nick" style="color:#8dd3c7"><a href="#013052" label="[01:30:52]">&lt;oriansj&gt;</a></span><span class="message">drakonis: depends on if a sufficiently powerful assembler can be written in its contraints</span></div><div class="line" id="013059"><span class="nick" style="color:#6b8072"><a href="#013059" label="[01:30:59]">&lt;drakonis&gt;</a></span><span class="message">accurately, at least.</span></div><div class="line" id="013118"><span class="nick" style="color:#6b8072"><a href="#013118" label="[01:31:18]">&lt;drakonis&gt;</a></span><span class="message">it is a lisp, it probably could, with sufficient effort.</span></div><div class="line" id="013210"><span class="nick" style="color:#8dd3c7"><a href="#013210" label="[01:32:10]">&lt;oriansj&gt;</a></span><span class="message">looking at its implementation for car; mov(%di),%ax</span></div><div class="line" id="013243"><span class="nick" style="color:#8dd3c7"><a href="#013243" label="[01:32:43]">&lt;oriansj&gt;</a></span><span class="message">it is limited to 16bit memory</span></div><div class="line" id="013511"><span class="nick" style="color:#8dd3c7"><a href="#013511" label="[01:35:11]">&lt;oriansj&gt;</a></span><span class="message">you'll have to do everything as a string as it doesn't support numbers or arithmetic operations or binary operations</span></div><div class="line" id="013551"><span class="nick" style="color:#8dd3c7"><a href="#013551" label="[01:35:51]">&lt;oriansj&gt;</a></span><span class="message">it also can't write to disk</span></div><div class="line" id="013601"><span class="nick" style="color:#8dd3c7"><a href="#013601" label="[01:36:01]">&lt;oriansj&gt;</a></span><span class="message">only read from terminal and write to terminal</span></div><div class="line" id="013705"><span class="nick" style="color:#6b8072"><a href="#013705" label="[01:37:05]">&lt;drakonis&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/jart/sectorlisp/commit/28062acdc9b3cd7f6bda4a25bf6273b36b12b10f">https://github.com/jart/sectorlisp/commit/28062acdc9b3cd7f6bda4a25bf6273b36b12b10f</a> </span></div><div class="line" id="013709"><span class="nick" style="color:#8dd3c7"><a href="#013709" label="[01:37:09]">&lt;oriansj&gt;</a></span><span class="message">so it is neat but not actually useful for bootstrapping</span></div><div class="line" id="014109"><span class="nick" style="color:#8dd3c7"><a href="#014109" label="[01:41:09]">&lt;oriansj&gt;</a></span><span class="message">drakonis: look for the interrupts (that is how you write to disk leveraging the bios)</span></div><div class="line" id="014137"><span class="nick" style="color:#6b8072"><a href="#014137" label="[01:41:37]">&lt;drakonis&gt;</a></span><span class="message">alright, although i'll admit that this is not a topic i should be getting into</span></div><div class="line" id="014145"><span class="nick" style="color:#8dd3c7"><a href="#014145" label="[01:41:45]">&lt;oriansj&gt;</a></span><span class="message">only int 0x16 and int 0x10 is used</span></div><div class="line" id="014145"><span class="nick" style="color:#6b8072"><a href="#014145" label="[01:41:45]">&lt;drakonis&gt;</a></span><span class="message">because it is outside of my domain of expertise</span></div><div class="line" id="014147"><span class="nick" style="color:#6b8072"><a href="#014147" label="[01:41:47]">&lt;drakonis&gt;</a></span><span class="message">way out there</span></div><div class="line" id="014440"><span class="nick" style="color:#6b8072"><a href="#014440" label="[01:44:40]">&lt;drakonis&gt;</a></span><span class="message">apologies.</span></div><div class="line" id="014552"><span class="nick" style="color:#80b1d3"><a href="#014552" label="[01:45:52]">&lt;achaninja&gt;</a></span><span class="message">The portable C implementation of sector lisp looks interesting</span></div><div class="line" id="014741"><span class="nick" style="color:#80b1d3"><a href="#014741" label="[01:47:41]">&lt;achaninja&gt;</a></span><span class="message">arguably if hex0 was not small, it would be a good initial seed</span></div><div class="line" id="014753"><span class="nick" style="color:#80b1d3"><a href="#014753" label="[01:47:53]">&lt;achaninja&gt;</a></span><span class="message">you could implement hex0 in sector lisp</span></div><div class="line" id="014815"><span class="nick" style="color:#80b1d3"><a href="#014815" label="[01:48:15]">&lt;achaninja&gt;</a></span><span class="message">but hex0 is smaller :D</span></div><div class="line" id="015641"><span class="nick" style="color:#8dd3c7"><a href="#015641" label="[01:56:41]">&lt;oriansj&gt;</a></span><span class="message">achaninja: the problem with sector lisp is one can't create new binaries as it has no ability to do writes to disk</span></div><div class="line" id="015819"><span class="nick" style="color:#8dd3c7"><a href="#015819" label="[01:58:19]">&lt;oriansj&gt;</a></span><span class="message">so one would need to hack in support for write (not easy given the number of free bytes)</span></div><div class="line" id="015850"><span class="nick" style="color:#8dd3c7"><a href="#015850" label="[01:58:50]">&lt;oriansj&gt;</a></span><span class="message">and hack in support for a basic filesystem (possibly in the lisp code)</span></div><div class="line" id="015910"><span class="nick" style="color:#389600"><a href="#015910" label="[01:59:10]">&lt;stikonas&gt;</a></span><span class="message">yeah, that's one of the problems of those small interpreters, they don't actually implement enough syscalls...</span></div><div class="line" id="015922"><span class="nick" style="color:#8dd3c7"><a href="#015922" label="[01:59:22]">&lt;oriansj&gt;</a></span><span class="message">and figure out a way to encode arbitrary bytes without having support for integers, arithmetic or binary operations</span></div><div class="line" id="015925"><span class="nick" style="color:#389600"><a href="#015925" label="[01:59:25]">&lt;stikonas&gt;</a></span><span class="message">that's why they are fairly small</span></div><div class="line" id="015932"><span class="nick" style="color:#389600"><a href="#015932" label="[01:59:32]">&lt;stikonas&gt;</a></span><span class="message">quite a bit of code in hex0 is dealing with syscalls</span></div><div class="line" id="020016"><span class="nick" style="color:#389600"><a href="#020016" label="[02:00:16]">&lt;stikonas&gt;</a></span><span class="message">but that's what let's us to do further bootstrapping</span></div><div class="line" id="020203"><span class="nick" style="color:#8dd3c7"><a href="#020203" label="[02:02:03]">&lt;oriansj&gt;</a></span><span class="message">well if one hacked in support for an intersection return and was able to write arbitrary bytes into RAM, one might be able to create a function that could write to disk</span></div><div class="line" id="020218"><span class="nick" style="color:#6b8072"><a href="#020218" label="[02:02:18]">&lt;drakonis&gt;</a></span><span class="message">you also have sectorforth</span></div><div class="line" id="020238"><span class="nick" style="color:#8dd3c7"><a href="#020238" label="[02:02:38]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/cesarblum/sectorforth.git">https://github.com/cesarblum/sectorforth.git</a> </span></div><div class="line" id="020241"><span class="nick" style="color:#6b8072"><a href="#020241" label="[02:02:41]">&lt;drakonis&gt;</a></span><span class="message"> <a rel="nofollow" href="https://justine.lol/sectorlisp2/">https://justine.lol/sectorlisp2/</a> </span></div><div class="line" id="020312"><span class="nick" style="color:#6b8072"><a href="#020312" label="[02:03:12]">&lt;drakonis&gt;</a></span><span class="message">its a different repository</span></div><div class="line" id="020345"><span class="nick" style="color:#6b8072"><a href="#020345" label="[02:03:45]">&lt;drakonis&gt;</a></span><span class="message">or not really</span></div><div class="line" id="020347"><span class="nick" style="color:#6b8072"><a href="#020347" label="[02:03:47]">&lt;drakonis&gt;</a></span><span class="message">hm</span></div><div class="line" id="020405"><span class="nick" style="color:#8dd3c7"><a href="#020405" label="[02:04:05]">&lt;oriansj&gt;</a></span><span class="message">well sectorforth doesn't have an interrupt for writing to disk</span></div><div class="line" id="020406"><span class="nick" style="color:#6b8072"><a href="#020406" label="[02:04:06]">&lt;drakonis&gt;</a></span><span class="message">okay same repository</span></div><div class="line" id="020446"><span class="nick" style="color:#6b8072"><a href="#020446" label="[02:04:46]">&lt;drakonis&gt;</a></span><span class="message">quite impressive nonethelss</span></div><div class="line" id="020451"><span class="nick" style="color:#6b8072"><a href="#020451" label="[02:04:51]">&lt;drakonis&gt;</a></span><span class="message">nonetheless</span></div><div class="line" id="020529"><span class="nick" style="color:#6b8072"><a href="#020529" label="[02:05:29]">&lt;drakonis&gt;</a></span><span class="message">i found blinkenlights through it</span></div><div class="line" id="020620"><span class="nick" style="color:#8dd3c7"><a href="#020620" label="[02:06:20]">&lt;oriansj&gt;</a></span><span class="message">sectorforth seems much more promising</span></div><div class="line" id="020634"><span class="nick" style="color:#8dd3c7"><a href="#020634" label="[02:06:34]">&lt;oriansj&gt;</a></span><span class="message">it does have the ability to write arbitrary bytes into RAM</span></div><div class="line" id="020723"><span class="nick" style="color:#8dd3c7"><a href="#020723" label="[02:07:23]">&lt;oriansj&gt;</a></span><span class="message">and it supports nand and add</span></div><div class="line" id="020930"><span class="nick" style="color:#8dd3c7"><a href="#020930" label="[02:09:30]">&lt;oriansj&gt;</a></span><span class="message">no intersegment return -_-</span></div><div class="line" id="021004"><span class="nick" style="color:#8dd3c7"><a href="#021004" label="[02:10:04]">&lt;oriansj&gt;</a></span><span class="message">and the data segment is different than the code segment, so no way to execute the bytes you write into memory either.</span></div><div class="line" id="021804"><span class="nick" style="color:#8dd3c7"><a href="#021804" label="[02:18:04]">&lt;oriansj&gt;</a></span><span class="message">correction; the data segment is the same as the code segment</span></div><div class="line" id="021902"><span class="nick" style="color:#8dd3c7"><a href="#021902" label="[02:19:02]">&lt;oriansj&gt;</a></span><span class="message">and the extra segment and the stack segment too</span></div><div class="line" id="022147"><span class="nick" style="color:#8dd3c7"><a href="#022147" label="[02:21:47]">&lt;oriansj&gt;</a></span><span class="message">no dup but probably easy to hack in</span></div><div class="line" id="022238"><span class="nick" style="color:#6d2462"><a href="#022238" label="[02:22:38]">&lt;rickmasters&gt;</a></span><span class="message">stikonas, orianjs: i just pushed a few small improvements to builder-hex0</span></div><div class="line" id="022254"><span class="nick" style="color:#6d2462"><a href="#022254" label="[02:22:54]">&lt;rickmasters&gt;</a></span><span class="message">*oriansj</span></div><div class="line" id="022336"><span class="nick" style="color:#6d2462"><a href="#022336" label="[02:23:36]">&lt;rickmasters&gt;</a></span><span class="message">it supports mkdir and access, and i fixed a bug that turned zero length writes into an infinite write</span></div><div class="line" id="022351"><span class="nick" style="color:#6d2462"><a href="#022351" label="[02:23:51]">&lt;rickmasters&gt;</a></span><span class="message">anyway, mes-m2 runs hello world to completion</span></div><div class="line" id="022415"><span class="nick" style="color:#6d2462"><a href="#022415" label="[02:24:15]">&lt;rickmasters&gt;</a></span><span class="message">its still under 3K, only 62 more bytes</span></div><div class="line" id="022448"><span class="nick" style="color:#389600"><a href="#022448" label="[02:24:48]">&lt;stikonas&gt;</a></span><span class="message">oh, interesting</span></div><div class="line" id="022545"><span class="nick" style="color:#6d2462"><a href="#022545" label="[02:25:45]">&lt;rickmasters&gt;</a></span><span class="message">i don't know how to setup mescc but i'd like to try when i have time, if only to discover what syscalls it attempts</span></div><div class="line" id="022755"><span class="nick" style="color:#234e69"><a href="#022755" label="[02:27:55]">&lt;Hagfish&gt;</a></span><span class="message">implementing mkdir in under 62 bytes?  am i understanding that correctly?</span></div><div class="line" id="022804"><span class="nick" style="color:#389600"><a href="#022804" label="[02:28:04]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: you can try script from <a rel="nofollow" href="https://github.com/stikonas/boot2now/blob/mes/after.kaem">https://github.com/stikonas/boot2now/blob/mes/after.kaem</a> </span></div><div class="line" id="022825"><span class="nick" style="color:#6d2462"><a href="#022825" label="[02:28:25]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: ok</span></div><div class="line" id="022839"><span class="nick" style="color:#389600"><a href="#022839" label="[02:28:39]">&lt;stikonas&gt;</a></span><span class="message">though you'll have to rebase on top of your changes</span></div><div class="line" id="022851"><span class="nick" style="color:#6d2462"><a href="#022851" label="[02:28:51]">&lt;rickmasters&gt;</a></span><span class="message">HagFish: it just creates a zero length file, and access just checks for an existing file, so pretty primitive</span></div><div class="line" id="022916"><span class="nick" style="color:#234e69"><a href="#022916" label="[02:29:16]">&lt;Hagfish&gt;</a></span><span class="message">interesting, thank you</span></div><div class="line" id="023028"><span class="nick" style="color:#6d2462"><a href="#023028" label="[02:30:28]">&lt;rickmasters&gt;</a></span><span class="message">by supporting zero length writes, &quot;src 0 x86/artifact&quot; also works now, creating a fake directory, which M2-Mesoplanet looks for</span></div><div class="line" id="023310"><span class="nick" style="color:#8dd3c7"><a href="#023310" label="[02:33:10]">&lt;oriansj&gt;</a></span><span class="message">well sectorforth doesn't support integers either (directly) so it'll be pretty hacky to get integer support in FORTH code given its primitive subset</span></div><div class="line" id="023311"><span class="nick" style="color:#234e69"><a href="#023311" label="[02:33:11]">&lt;Hagfish&gt;</a></span><span class="message">the best code is &quot;no code&quot;, and the second best code is &quot;just enough code&quot; :)</span></div><div class="line" id="023419"><span class="nick" style="color:#8dd3c7"><a href="#023419" label="[02:34:19]">&lt;oriansj&gt;</a></span><span class="message">and no dup means that one will be having to do a great deal of manual value entry</span></div><div class="line" id="023450"><span class="nick" style="color:#8dd3c7"><a href="#023450" label="[02:34:50]">&lt;oriansj&gt;</a></span><span class="message">and its clear memory on error behavior means getting it to do anything meaningful will be an exercise in frustration</span></div><div class="line" id="023521"><span class="nick" style="color:#6d2462"><a href="#023521" label="[02:35:21]">&lt;rickmasters&gt;</a></span><span class="message">BTW, i spent some time with sectorlisp and thought it was really cool, learned a lot about how lisp is implemented</span></div><div class="line" id="023545"><span class="nick" style="color:#6d2462"><a href="#023545" label="[02:35:45]">&lt;rickmasters&gt;</a></span><span class="message">but sectorlisp can do very little practical stuff needed for compilers</span></div><div class="line" id="023938"><span class="nick" style="color:#8dd3c7"><a href="#023938" label="[02:39:38]">&lt;oriansj&gt;</a></span><span class="message">no denying both sectorLisp and sectorForth are both awesome hacks</span></div><div class="line" id="024049"><span class="nick" style="color:#8dd3c7"><a href="#024049" label="[02:40:49]">&lt;oriansj&gt;</a></span><span class="message">just getting them to do something as simple as writing an arbitrary byte into memory [and jumping to that byte later] (or onto disk) looks like an impossible dream</span></div><div class="line" id="024153"><span class="nick" style="color:#6d2462"><a href="#024153" label="[02:41:53]">&lt;rickmasters&gt;</a></span><span class="message">i was thinking something internal could take a list of hex strings and write it back</span></div><div class="line" id="024237"><span class="nick" style="color:#6d2462"><a href="#024237" label="[02:42:37]">&lt;rickmasters&gt;</a></span><span class="message">i spent an embarrassingly long time writing a list concat function to concat two lists, got it to work, but man it was difficult (for me)</span></div><div class="line" id="024321"><span class="nick" style="color:#8dd3c7"><a href="#024321" label="[02:43:21]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: no worries, not everyone is a good match for all languages</span></div><div class="line" id="024349"><span class="nick" style="color:#8dd3c7"><a href="#024349" label="[02:43:49]">&lt;oriansj&gt;</a></span><span class="message">personally I spent too much time in assembly and C to flow in LISP anymore</span></div><div class="line" id="024351"><span class="nick" style="color:#6d2462"><a href="#024351" label="[02:43:51]">&lt;rickmasters&gt;</a></span><span class="message">sorry, to be clear, i meant write a lisp list back to disk, not sure how you could wedge that into the interpreter (or after) though</span></div><div class="line" id="024514"><span class="nick" style="color:#8dd3c7"><a href="#024514" label="[02:45:14]">&lt;oriansj&gt;</a></span><span class="message">it would be a very ugly hack if even possible</span></div><div class="line" id="024941"><span class="nick" style="color:#8dd3c7"><a href="#024941" label="[02:49:41]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/cesarblum/sectorforth/blob/master/examples/01-helloworld.f">https://github.com/cesarblum/sectorforth/blob/master/examples/01-helloworld.f</a> </span></div><div class="line" id="024957"><span class="nick" style="color:#8dd3c7"><a href="#024957" label="[02:49:57]">&lt;oriansj&gt;</a></span><span class="message">you have to define integers</span></div><div class="line" id="025207"><span class="nick" style="color:#8dd3c7"><a href="#025207" label="[02:52:07]">&lt;oriansj&gt;</a></span><span class="message">8bytes per 3-&gt;9 9bytes per 10-&gt;99 10bytes per 100-&gt;999</span></div><div class="line" id="025249"><span class="nick" style="color:#8dd3c7"><a href="#025249" label="[02:52:49]">&lt;oriansj&gt;</a></span><span class="message">and you only have 4KB for everything.</span></div><div class="line" id="025551"><span class="nick" style="color:#8dd3c7"><a href="#025551" label="[02:55:51]">&lt;oriansj&gt;</a></span><span class="message">but with creativity and a boatload of patience, it is in theory possible to use sectorForth create the bytes needed to do a disk write and execute that code</span></div><div class="line" id="032433"><span class="nick" style="color:#6c3d55"><a href="#032433" label="[03:24:33]">&lt;muurkha&gt;</a></span><span class="message">oriansj: yeah, I think the original BF was 256 bytes</span></div><div class="line" id="032554"><span class="nick" style="color:#6c3d55"><a href="#032554" label="[03:25:54]">&lt;muurkha&gt;</a></span><span class="message">wrt sectorlisp I don't want to be involved in anything that jart touches: <a rel="nofollow" href="https://en.wikipedia.org/wiki/Justine_Tunney#Political_writing">https://en.wikipedia.org/wiki/Justine_Tunney#Political_writing</a> </span></div><div class="line" id="032736"><span class="nick" style="color:#8dd3c7"><a href="#032736" label="[03:27:36]">&lt;oriansj&gt;</a></span><span class="message">muurkha: you can get BF in under 100bytes if one is really willing to do very ugly hacks</span></div><div class="line" id="033021"><span class="nick" style="color:#6c3d55"><a href="#033021" label="[03:30:21]">&lt;muurkha&gt;</a></span><span class="message">her technical work is impressive but I don't want to get lynched for endorsing someone with her repellent political views</span></div><div class="line" id="033033"><span class="nick" style="color:#6c3d55"><a href="#033033" label="[03:30:33]">&lt;muurkha&gt;</a></span><span class="message">can you really?</span></div><div class="line" id="033132"><span class="nick" style="color:#8dd3c7"><a href="#033132" label="[03:31:32]">&lt;oriansj&gt;</a></span><span class="message">muurkha: I can respect that view and those who choose to make those choices for themselves.</span></div><div class="line" id="033200"><span class="nick" style="color:#8dd3c7"><a href="#033200" label="[03:32:00]">&lt;oriansj&gt;</a></span><span class="message">I care about the technical reality of the usefulness of people's contributions to the shared collective goal.</span></div><div class="line" id="033221"><span class="nick" style="color:#6c3d55"><a href="#033221" label="[03:32:21]">&lt;muurkha&gt;</a></span><span class="message">hopefully we live in a world where that is a viable strategy</span></div><div class="line" id="033237"><span class="nick" style="color:#8dd3c7"><a href="#033237" label="[03:32:37]">&lt;oriansj&gt;</a></span><span class="message">My rejection of sectorLisp as a bootstrap language is purely on technical grounds, it simply doesn't work and it can't self-host</span></div><div class="line" id="033433"><span class="nick" style="color:#8dd3c7"><a href="#033433" label="[03:34:33]">&lt;oriansj&gt;</a></span><span class="message">sectorForth on the other hand could be used but it takes about a half hour of perfect typing to get it to the point where you could start typing in the hex you want to write to disk</span></div><div class="line" id="033455"><span class="nick" style="color:#6c3d55"><a href="#033455" label="[03:34:55]">&lt;muurkha&gt;</a></span><span class="message">yeah, you need something that can edit really</span></div><div class="line" id="033457"><span class="nick" style="color:#8dd3c7"><a href="#033457" label="[03:34:57]">&lt;oriansj&gt;</a></span><span class="message">(it takes 10 minutes of typing to do hello world)</span></div><div class="line" id="033520"><span class="nick" style="color:#6c3d55"><a href="#033520" label="[03:35:20]">&lt;muurkha&gt;</a></span><span class="message">speaking of technical reality I found something the other day that might be useful for hex0</span></div><div class="line" id="033543"><span class="nick" style="color:#8dd3c7"><a href="#033543" label="[03:35:43]">&lt;oriansj&gt;</a></span><span class="message">muurkha: oh please do share</span></div><div class="line" id="033559"><span class="nick" style="color:#6c3d55"><a href="#033559" label="[03:35:59]">&lt;muurkha&gt;</a></span><span class="message">&gt;&gt;&gt; [(ord(c) + 30) % 39 for c in '0123456789abcdef']</span></div><div class="line" id="033559"><span class="nick" style="color:#6c3d55"><a href="#033559" label="[03:35:59]">&lt;muurkha&gt;</a></span><span class="message">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]</span></div><div class="line" id="033651"><span class="nick" style="color:#6c3d55"><a href="#033651" label="[03:36:51]">&lt;muurkha&gt;</a></span><span class="message">this is unfortunately very much in the vein of &quot;a program that complies with the spec but no one knows how it works&quot; though</span></div><div class="line" id="033707"><span class="nick" style="color:#8dd3c7"><a href="#033707" label="[03:37:07]">&lt;oriansj&gt;</a></span><span class="message">I know how that works</span></div><div class="line" id="033744"><span class="nick" style="color:#6c3d55"><a href="#033744" label="[03:37:44]">&lt;muurkha&gt;</a></span><span class="message">it definitely isn't the most transparent (or robust!) way to convert a hex digit to binary</span></div><div class="line" id="033802"><span class="nick" style="color:#6c3d55"><a href="#033802" label="[03:38:02]">&lt;muurkha&gt;</a></span><span class="message">but there exist a number of machine languages in which it's the shortest</span></div><div class="line" id="033819"><span class="nick" style="color:#8dd3c7"><a href="#033819" label="[03:38:19]">&lt;oriansj&gt;</a></span><span class="message">actually it isn't far off from index(c, &quot;0123456789ABCDEF&quot;)</span></div><div class="line" id="034001"><span class="nick" style="color:#6c3d55"><a href="#034001" label="[03:40:01]">&lt;muurkha&gt;</a></span><span class="message">yeah, I'm not sure i386 is one of them</span></div><div class="line" id="034057"><span class="nick" style="color:#8dd3c7"><a href="#034057" label="[03:40:57]">&lt;oriansj&gt;</a></span><span class="message">in x86 that would be  add eax, 30; idiv 39 (if I am getting idiv correct)</span></div><div class="line" id="034126"><span class="nick" style="color:#6c3d55"><a href="#034126" label="[03:41:26]">&lt;muurkha&gt;</a></span><span class="message">you have to put the divisor in a register, don't you?  or can you really use an immediate?</span></div><div class="line" id="034134"><span class="nick" style="color:#6c3d55"><a href="#034134" label="[03:41:34]">&lt;muurkha&gt;</a></span><span class="message">also you have to zero edx first</span></div><div class="line" id="034150"><span class="nick" style="color:#8dd3c7"><a href="#034150" label="[03:41:50]">&lt;oriansj&gt;</a></span><span class="message">muurkha: you can use an immediate with x86</span></div><div class="line" id="034224"><span class="nick" style="color:#6c3d55"><a href="#034224" label="[03:42:24]">&lt;muurkha&gt;</a></span><span class="message">sweet.  but it's a 32-bit immediate, isnt 'it?</span></div><div class="line" id="034240"><span class="nick" style="color:#8dd3c7"><a href="#034240" label="[03:42:40]">&lt;oriansj&gt;</a></span><span class="message">but you might be partially right about edx; you would need to sign extend if with ctq (or something like that) if you are doing signed division</span></div><div class="line" id="034316"><span class="nick" style="color:#6c3d55"><a href="#034316" label="[03:43:16]">&lt;muurkha&gt;</a></span><span class="message">might be shorter to mov bl, 39 or mov cl, 39 if you have a pre-zeroed register handy.  but more bug-prone</span></div><div class="line" id="034322"><span class="nick" style="color:#8dd3c7"><a href="#034322" label="[03:43:22]">&lt;oriansj&gt;</a></span><span class="message">muurkha: F7FF is idiv 39</span></div><div class="line" id="034324"><span class="nick" style="color:#6c3d55"><a href="#034324" label="[03:43:24]">&lt;muurkha&gt;</a></span><span class="message">arguably it's not a good idea to include hex conversion code that silently converts uppercase A to 17 if the objective is high assurance against undetected backdoors.  but it trades off against byte length</span></div><div class="line" id="034328"><span class="nick" style="color:#6c3d55"><a href="#034328" label="[03:43:28]">&lt;muurkha&gt;</a></span><span class="message">sweet</span></div><div class="line" id="034356"><span class="nick" style="color:#6c3d55"><a href="#034356" label="[03:43:56]">&lt;muurkha&gt;</a></span><span class="message">in Unicode U+F7FF is </span></div><div class="line" id="034430"><span class="nick" style="color:#6c3d55"><a href="#034430" label="[03:44:30]">&lt;muurkha&gt;</a></span><span class="message">I found that in March when I was visiting my in-laws and just kept forgetting to share it</span></div><div class="line" id="034448"><span class="nick" style="color:#6c3d55"><a href="#034448" label="[03:44:48]">&lt;muurkha&gt;</a></span><span class="message">add al, 39 is also shorter</span></div><div class="line" id="034458"><span class="nick" style="color:#6c3d55"><a href="#034458" label="[03:44:58]">&lt;muurkha&gt;</a></span><span class="message">because the immediate is only one byte instead of 4</span></div><div class="line" id="034533"><span class="nick" style="color:#8dd3c7"><a href="#034533" label="[03:45:33]">&lt;oriansj&gt;</a></span><span class="message">83c01e vs 041e; so you are right</span></div><div class="line" id="034635"><span class="nick" style="color:#6c3d55"><a href="#034635" label="[03:46:35]">&lt;muurkha&gt;</a></span><span class="message">it has to happen from time to time</span></div><div class="line" id="034736"><span class="nick" style="color:#6c3d55"><a href="#034736" label="[03:47:36]">&lt;muurkha&gt;</a></span><span class="message">I think there are no values for 30 and 39 that make this formula work for uppercase instead of lowercase</span></div><div class="line" id="034802"><span class="nick" style="color:#8dd3c7"><a href="#034802" label="[03:48:02]">&lt;oriansj&gt;</a></span><span class="message">well it is a single bit flip to convert uppercase to lower case</span></div><div class="line" id="034901"><span class="nick" style="color:#6c3d55"><a href="#034901" label="[03:49:01]">&lt;muurkha&gt;</a></span><span class="message">right, or al, 32, isn't it?</span></div><div class="line" id="035019"><span class="nick" style="color:#8dd3c7"><a href="#035019" label="[03:50:19]">&lt;oriansj&gt;</a></span><span class="message">to go from a-f to A-F one uses 0xDF</span></div><div class="line" id="035032"><span class="nick" style="color:#6c3d55"><a href="#035032" label="[03:50:32]">&lt;muurkha&gt;</a></span><span class="message">with AND, yes</span></div><div class="line" id="035052"><span class="nick" style="color:#6c3d55"><a href="#035052" label="[03:50:52]">&lt;muurkha&gt;</a></span><span class="message">i386's lack of an abjunction instruction like BIC is not an obstacle with a constant</span></div><div class="line" id="035238"><span class="nick" style="color:#8dd3c7"><a href="#035238" label="[03:52:38]">&lt;oriansj&gt;</a></span><span class="message">so for or it would be or eax, 0x20</span></div><div class="line" id="035320"><span class="nick" style="color:#8dd3c7"><a href="#035320" label="[03:53:20]">&lt;oriansj&gt;</a></span><span class="message">using al it is: 0c20</span></div><div class="line" id="035735"><span class="nick" style="color:#d9d9d9"><a href="#035735" label="[03:57:35]">&lt;midgardian[m]&gt;</a></span><span class="message">&lt;oriansj&gt; &quot;the method for testing compile...&quot; &lt;- Thank you for the replies [oriansj](<a rel="nofollow" href="https://matrix.to/#/%40oriansj%3Alibera.chat">https://matrix.to/#/%40oriansj%3Alibera.chat</a>),  but I am curious what method you used to determine how long M2-Planet took to compile?</span></div><div class="line" id="035836"><span class="nick" style="color:#8dd3c7"><a href="#035836" label="[03:58:36]">&lt;oriansj&gt;</a></span><span class="message">midgardian[m]: did you mean how long it takes to self-host?</span></div><div class="line" id="040053"><span class="nick" style="color:#8dd3c7"><a href="#040053" label="[04:00:53]">&lt;oriansj&gt;</a></span><span class="message">(define (hexy a) (modulo (+ (logior a 32) 30) 39))</span></div><div class="line" id="040112"><span class="nick" style="color:#8dd3c7"><a href="#040112" label="[04:01:12]">&lt;oriansj&gt;</a></span><span class="message">can be done in just 8bytes on x86</span></div><div class="line" id="040136"><span class="nick" style="color:#6c3d55"><a href="#040136" label="[04:01:36]">&lt;muurkha&gt;</a></span><span class="message">assuming edx and the non-al parts of eax are pre-zeroed</span></div><div class="line" id="040159"><span class="nick" style="color:#8dd3c7"><a href="#040159" label="[04:01:59]">&lt;oriansj&gt;</a></span><span class="message">very true</span></div><div class="line" id="040300"><span class="nick" style="color:#6c3d55"><a href="#040300" label="[04:03:00]">&lt;muurkha&gt;</a></span><span class="message">I see things like that and I think that, for all the shitty bonehead moves in the 8086 design like its pseudo-segmentation, there are some fucking brilliant design features too</span></div><div class="line" id="040337"><span class="nick" style="color:#6c3d55"><a href="#040337" label="[04:03:37]">&lt;muurkha&gt;</a></span><span class="message">btw did you ever look at hugi-compo entries?  if spending half an hour on this is your idea of fun you'd probably enjoy hugi-compo</span></div><div class="line" id="040413"><span class="nick" style="color:#8dd3c7"><a href="#040413" label="[04:04:13]">&lt;oriansj&gt;</a></span><span class="message">muurkha: honestly never heard of that before</span></div><div class="line" id="040428"><span class="nick" style="color:#6c3d55"><a href="#040428" label="[04:04:28]">&lt;muurkha&gt;</a></span><span class="message">because Google is a vast wasteland of SEO spam</span></div><div class="line" id="040513"><span class="nick" style="color:#8dd3c7"><a href="#040513" label="[04:05:13]">&lt;oriansj&gt;</a></span><span class="message">I am guessing: <a rel="nofollow" href="https://www.hugi.scene.org/compo/compoold.htm">https://www.hugi.scene.org/compo/compoold.htm</a> </span></div><div class="line" id="040540"><span class="nick" style="color:#6c3d55"><a href="#040540" label="[04:05:40]">&lt;muurkha&gt;</a></span><span class="message">yeah, <a rel="nofollow" href="https://www.hugi.scene.org/compo/">https://www.hugi.scene.org/compo/</a>  and that</span></div><div class="line" id="040853"><span class="nick" style="color:#8dd3c7"><a href="#040853" label="[04:08:53]">&lt;oriansj&gt;</a></span><span class="message">god, I would love to see what they could do with the problem of producing the largest subset of M0 in under 510bytes</span></div><div class="line" id="040919"><span class="nick" style="color:#d9d9d9"><a href="#040919" label="[04:09:19]">&lt;midgardian[m]&gt;</a></span><span class="message">&lt;oriansj&gt; &quot;midgardian: did you mean how...&quot; &lt;- No, sorry, in the message I replied to it is about you benchmarking how fast M2-Planet can compile 100Mloc file</span></div><div class="line" id="040943"><span class="nick" style="color:#6c3d55"><a href="#040943" label="[04:09:43]">&lt;muurkha&gt;</a></span><span class="message">what I think would be super cool would be an annotated disassembly of all the competition winners</span></div><div class="line" id="041028"><span class="nick" style="color:#8dd3c7"><a href="#041028" label="[04:10:28]">&lt;oriansj&gt;</a></span><span class="message">midgardian[m]: time -v ./bin/test1000 -f testfile -o result is sufficient to get approximate runtime</span></div><div class="line" id="041035"><span class="nick" style="color:#6c3d55"><a href="#041035" label="[04:10:35]">&lt;muurkha&gt;</a></span><span class="message">I tried doing that for bootOS but I never finished it: <a rel="nofollow" href="https://dercuano.github.io/notes/bootos-notes.html#addtoc_4">https://dercuano.github.io/notes/bootos-notes.html#addtoc_4</a> </span></div><div class="line" id="041229"><span class="nick" style="color:#8dd3c7"><a href="#041229" label="[04:12:29]">&lt;oriansj&gt;</a></span><span class="message">muurkha: he does a very good job of covering it in his book (I bought both of his books and read them cover to cover)</span></div><div class="line" id="041302"><span class="nick" style="color:#6c3d55"><a href="#041302" label="[04:13:02]">&lt;muurkha&gt;</a></span><span class="message">in part because I couldn't get the ENTER command to work in QEMU, not sure what I was doing wrong</span></div><div class="line" id="041316"><span class="nick" style="color:#6c3d55"><a href="#041316" label="[04:13:16]">&lt;muurkha&gt;</a></span><span class="message">oh, awesome!  I'd like to read his books too</span></div><div class="line" id="041406"><span class="nick" style="color:#8dd3c7"><a href="#041406" label="[04:14:06]">&lt;oriansj&gt;</a></span><span class="message">well I can mail you copies if you would like</span></div><div class="line" id="041423"><span class="nick" style="color:#6c3d55"><a href="#041423" label="[04:14:23]">&lt;muurkha&gt;</a></span><span class="message">I... haven't had good luck receiving mail from overseas</span></div><div class="line" id="041440"><span class="nick" style="color:#6c3d55"><a href="#041440" label="[04:14:40]">&lt;muurkha&gt;</a></span><span class="message">my sister sent me a happy new year's card in December 2020</span></div><div class="line" id="041447"><span class="nick" style="color:#6c3d55"><a href="#041447" label="[04:14:47]">&lt;muurkha&gt;</a></span><span class="message">it arrived sometime around January 2022</span></div><div class="line" id="041612"><span class="nick" style="color:#6c3d55"><a href="#041612" label="[04:16:12]">&lt;muurkha&gt;</a></span><span class="message">in the page I linked above you can kind of see why I think octal is better than hex for i386</span></div><div class="line" id="041640"><span class="nick" style="color:#6c3d55"><a href="#041640" label="[04:16:40]">&lt;muurkha&gt;</a></span><span class="message">in octal 27x is &quot;move immediate to 16-bit register x&quot;</span></div><div class="line" id="041712"><span class="nick" style="color:#6c3d55"><a href="#041712" label="[04:17:12]">&lt;muurkha&gt;</a></span><span class="message">in hex that's b8, b9, ba, ... bf</span></div><div class="line" id="041742"><span class="nick" style="color:#8dd3c7"><a href="#041742" label="[04:17:42]">&lt;oriansj&gt;</a></span><span class="message">I absolutely agree</span></div><div class="line" id="041810"><span class="nick" style="color:#8dd3c7"><a href="#041810" label="[04:18:10]">&lt;oriansj&gt;</a></span><span class="message">I just used hex for x86 in stage0-posix because it was a quick hack</span></div><div class="line" id="041830"><span class="nick" style="color:#6c3d55"><a href="#041830" label="[04:18:30]">&lt;muurkha&gt;</a></span><span class="message">so you have to do the mapping that &quot;be&quot; is &quot;move immediate to 16-bit register si&quot; because si is 6 and e is 8 + 6</span></div><div class="line" id="041915"><span class="nick" style="color:#6c3d55"><a href="#041915" label="[04:19:15]">&lt;muurkha&gt;</a></span><span class="message">but you run into the problem that all the manuals and basically everyone who's familiar with i386 or 8086 code is familiar with hex</span></div><div class="line" id="041939"><span class="nick" style="color:#6c3d55"><a href="#041939" label="[04:19:39]">&lt;muurkha&gt;</a></span><span class="message">so I can tell you interrupt 20 (exit program) is CD20 but I have no idea what it is in octal</span></div><div class="line" id="042119"><span class="nick" style="color:#6c3d55"><a href="#042119" label="[04:21:19]">&lt;muurkha&gt;</a></span><span class="message">I think that in head-to-head comparisons of compiler output RISC-V with the Compressed instruction extension usually beats i386 for code density and I think even 8086</span></div><div class="line" id="042138"><span class="nick" style="color:#8dd3c7"><a href="#042138" label="[04:21:38]">&lt;oriansj&gt;</a></span><span class="message">I just use this table: <a rel="nofollow" href="https://paste.debian.net/1241708/">https://paste.debian.net/1241708/</a> </span></div><div class="line" id="042253"><span class="nick" style="color:#6c3d55"><a href="#042253" label="[04:22:53]">&lt;muurkha&gt;</a></span><span class="message">heh</span></div><div class="line" id="042305"><span class="nick" style="color:#8dd3c7"><a href="#042305" label="[04:23:05]">&lt;oriansj&gt;</a></span><span class="message">315 040</span></div><div class="line" id="042331"><span class="nick" style="color:#6c3d55"><a href="#042331" label="[04:23:31]">&lt;muurkha&gt;</a></span><span class="message">right, but it's going to take me quite a while before 315 040 is as familiar as CD 20 :)</span></div><div class="line" id="042406"><span class="nick" style="color:#6c3d55"><a href="#042406" label="[04:24:06]">&lt;muurkha&gt;</a></span><span class="message">(it's actually CD 21 that's the familiar one, but *that* level of mental math is within my capacities)</span></div><div class="line" id="042412"><span class="nick" style="color:#8dd3c7"><a href="#042412" label="[04:24:12]">&lt;oriansj&gt;</a></span><span class="message">well int 040 isn't that much harder than int 0x20</span></div><div class="line" id="042448"><span class="nick" style="color:#6c3d55"><a href="#042448" label="[04:24:48]">&lt;muurkha&gt;</a></span><span class="message">I suspect that i386 has more opportunities for hand-tweaking because of things like the implicit operands of idiv or rep movsb and the shorter addressing modes for things like [ebp+4*esi+12]</span></div><div class="line" id="042510"><span class="nick" style="color:#8dd3c7"><a href="#042510" label="[04:25:10]">&lt;oriansj&gt;</a></span><span class="message">muurkha: understatement of the decade</span></div><div class="line" id="042538"><span class="nick" style="color:#8dd3c7"><a href="#042538" label="[04:25:38]">&lt;oriansj&gt;</a></span><span class="message">my x86 is the fewest instructions possible not the smallest binary possible</span></div><div class="line" id="042602"><span class="nick" style="color:#6c3d55"><a href="#042602" label="[04:26:02]">&lt;muurkha&gt;</a></span><span class="message">RISC-V C will generally use more instructions but (in compiler output) less bytes</span></div><div class="line" id="042701"><span class="nick" style="color:#8dd3c7"><a href="#042701" label="[04:27:01]">&lt;oriansj&gt;</a></span><span class="message">literally just 29 DEFINES worth of opcodes (one of which is: DEFINE NULL 00000000)</span></div><div class="line" id="042744"><span class="nick" style="color:#6c3d55"><a href="#042744" label="[04:27:44]">&lt;muurkha&gt;</a></span><span class="message">oh, fewest distinct instructions, not shortest program counted in instructions?</span></div><div class="line" id="042838"><span class="nick" style="color:#8dd3c7"><a href="#042838" label="[04:28:38]">&lt;oriansj&gt;</a></span><span class="message">muurkha: I was just learning x86 assembly and wanted to get done as quickly as possible as it was so much worse than knight assembly programming</span></div><div class="line" id="042948"><span class="nick" style="color:#6c3d55"><a href="#042948" label="[04:29:48]">&lt;muurkha&gt;</a></span><span class="message">I think probably x86 assembly is better than knight for really terrible programmers like me</span></div><div class="line" id="042958"><span class="nick" style="color:#6c3d55"><a href="#042958" label="[04:29:58]">&lt;muurkha&gt;</a></span><span class="message">not actually better</span></div><div class="line" id="043000"><span class="nick" style="color:#6c3d55"><a href="#043000" label="[04:30:00]">&lt;muurkha&gt;</a></span><span class="message">but more fun</span></div><div class="line" id="043100"><span class="nick" style="color:#8dd3c7"><a href="#043100" label="[04:31:00]">&lt;oriansj&gt;</a></span><span class="message">I guess it depends on how one defines better</span></div><div class="line" id="043103"><span class="nick" style="color:#6c3d55"><a href="#043103" label="[04:31:03]">&lt;muurkha&gt;</a></span><span class="message">because (as hugi-compo demonstrates) trying to write things in fewer bytes is a never-ending challenge, and that's the kind of distraction that I'm prone to</span></div><div class="line" id="043233"><span class="nick" style="color:#6c3d55"><a href="#043233" label="[04:32:33]">&lt;muurkha&gt;</a></span><span class="message">I'd forgotten, there actually was a BF interpreter compo, and the winner got it down to 98 bytes: <a rel="nofollow" href="https://www.hugi.scene.org/compo/compoold.htm#compo6">https://www.hugi.scene.org/compo/compoold.htm#compo6</a> </span></div><div class="line" id="043413"><span class="nick" style="color:#6c3d55"><a href="#043413" label="[04:34:13]">&lt;muurkha&gt;</a></span><span class="message">back in the i386 and earlier days you could also try to write things in fewer *cycles*, which is the same kind of problem</span></div><div class="line" id="043716"><span class="nick" style="color:#6c3d55"><a href="#043716" label="[04:37:16]">&lt;muurkha&gt;</a></span><span class="message">super fun but in the larger scheme of things it's sort of wankery in the sense that the value system you need to win at it is the opposite of the value system you need to, for example, invent Python or the URL or C</span></div><div class="line" id="044105"><span class="nick" style="color:#8dd3c7"><a href="#044105" label="[04:41:05]">&lt;oriansj&gt;</a></span><span class="message">muurkha: actually I get that appeal</span></div><div class="line" id="044139"><span class="nick" style="color:#6c3d55"><a href="#044139" label="[04:41:39]">&lt;muurkha&gt;</a></span><span class="message">yeah, but you also get stuff done instead of getting stuck in it :)</span></div><div class="line" id="044213"><span class="nick" style="color:#8dd3c7"><a href="#044213" label="[04:42:13]">&lt;oriansj&gt;</a></span><span class="message">for various levels of done, I guess</span></div><div class="line" id="044251"><span class="nick" style="color:#6c3d55"><a href="#044251" label="[04:42:51]">&lt;muurkha&gt;</a></span><span class="message">but it's pretty great to be able to do things that other people think are impossible for anyone to do</span></div><div class="line" id="044442"><span class="nick" style="color:#8dd3c7"><a href="#044442" label="[04:44:42]">&lt;oriansj&gt;</a></span><span class="message">muurkha: you certainly pull that off yourself</span></div><div class="line" id="044527"><span class="nick" style="color:#6c3d55"><a href="#044527" label="[04:45:27]">&lt;muurkha&gt;</a></span><span class="message">I do?  people have definitely written Scheme compilers in Scheme before.  compilers that compile all of Scheme in fact, not just part of it</span></div><div class="line" id="044633"><span class="nick" style="color:#6c3d55"><a href="#044633" label="[04:46:33]">&lt;muurkha&gt;</a></span><span class="message">I don't remember if I mentioned this here before, but it kind of has some of the hugi-compo energy despite being in JS: <a rel="nofollow" href="http://canonical.org/~kragen/sw/dev3/trama">http://canonical.org/~kragen/sw/dev3/trama</a> </span></div><div class="line" id="044755"><span class="nick" style="color:#8dd3c7"><a href="#044755" label="[04:47:55]">&lt;oriansj&gt;</a></span><span class="message">muurkha: yes, you deliver code worth reading</span></div><div class="line" id="044814"><span class="nick" style="color:#6c3d55"><a href="#044814" label="[04:48:14]">&lt;muurkha&gt;</a></span><span class="message">thanks!  but that's also hardly impossible for anyone to do, SICP is full of it</span></div><div class="line" id="044932"><span class="nick" style="color:#6c3d55"><a href="#044932" label="[04:49:32]">&lt;muurkha&gt;</a></span><span class="message">with the trama page I wanted to explore visual textures for a bilevel display that I could compute in a few instructions per pixel</span></div><div class="line" id="044933"><span class="nick" style="color:#8dd3c7"><a href="#044933" label="[04:49:33]">&lt;oriansj&gt;</a></span><span class="message">muurkha: I know isn't impossible for anyone to do but most people don't</span></div><div class="line" id="045437"><span class="nick" style="color:#6c3d55"><a href="#045437" label="[04:54:37]">&lt;muurkha&gt;</a></span><span class="message">true, but most of the time it's not their objective; they're writing code because they want to run it rather than for people to read</span></div><div class="line" id="045506"><span class="nick" style="color:#6c3d55"><a href="#045506" label="[04:55:06]">&lt;muurkha&gt;</a></span><span class="message">I was thinking about the donut in <a rel="nofollow" href="https://www.a1k0n.net/2011/07/20/donut-math.html">https://www.a1k0n.net/2011/07/20/donut-math.html</a>  today</span></div><div class="line" id="045551"><span class="nick" style="color:#8dd3c7"><a href="#045551" label="[04:55:51]">&lt;oriansj&gt;</a></span><span class="message">I have an M2-Planet version of that</span></div><div class="line" id="045620"><span class="nick" style="color:#6c3d55"><a href="#045620" label="[04:56:20]">&lt;muurkha&gt;</a></span><span class="message">oh really? I didn't see it!</span></div><div class="line" id="045912"><span class="nick" style="color:#8dd3c7"><a href="#045912" label="[04:59:12]">&lt;oriansj&gt;</a></span><span class="message">just needed to add a usleep definition in M2libc but didn't get around to it</span></div><div class="line" id="045935"><span class="nick" style="color:#6c3d55"><a href="#045935" label="[04:59:35]">&lt;muurkha&gt;</a></span><span class="message">you could use a delay loop</span></div><div class="line" id="050011"><span class="nick" style="color:#8dd3c7"><a href="#050011" label="[05:00:11]">&lt;oriansj&gt;</a></span><span class="message">probably, just didn't around to it</span></div><div class="line" id="050707"><span class="nick" style="color:#6c3d55"><a href="#050707" label="[05:07:07]">&lt;muurkha&gt;</a></span><span class="message">I thought the animation of the Lambert-shaded point cloud was visually pretty striking and it occurred to me that you could use ellipses for the points as a sort of hatching (<a rel="nofollow" href="https://en.wikipedia.org/wiki/Hatching">https://en.wikipedia.org/wiki/Hatching</a>) </span></div><div class="line" id="050800"><span class="nick" style="color:#6c3d55"><a href="#050800" label="[05:08:00]">&lt;muurkha&gt;</a></span><span class="message">it kind of reminded me of <a rel="nofollow" href="https://wavegrower.tumblr.com/">https://wavegrower.tumblr.com/</a> </span></div><div class="line" id="050927"><span class="nick" style="color:#6c3d55"><a href="#050927" label="[05:09:27]">&lt;muurkha&gt;</a></span><span class="message">he uses ellipses that way but without the Lambert shading in a lot of his graphics</span></div><div class="line" id="050937"><span class="nick" style="color:#6c3d55"><a href="#050937" label="[05:09:37]">&lt;muurkha&gt;</a></span><span class="message">seems like a promising approach to non-photorealistic rendering</span></div><div class="line" id="053214"><span class="nick" style="color:#8dd3c7"><a href="#053214" label="[05:32:14]">&lt;oriansj&gt;</a></span><span class="message">neat</span></div><div class="line" id="055024"><span class="nick" style="color:#8dd3c7"><a href="#055024" label="[05:50:24]">&lt;oriansj&gt;</a></span><span class="message">here is my M2-Planet donut.c: <a rel="nofollow" href="https://paste.debian.net/1241711/">https://paste.debian.net/1241711/</a> </span></div><div class="line" id="055338"><span class="nick" style="color:#8dd3c7"><a href="#055338" label="[05:53:38]">&lt;oriansj&gt;</a></span><span class="message">there is a divide by zero segfault and I haven't gotten the time to figure what is causing it</span></div><div class="line" id="055405"><span class="nick" style="color:#8dd3c7"><a href="#055405" label="[05:54:05]">&lt;oriansj&gt;</a></span><span class="message">but it compiles just fine with: ./bin/M2-Mesoplanet --architecture amd64 -f /home/oriansj/donut.c -o donut</span></div><div class="line" id="055439"><span class="nick" style="color:#8dd3c7"><a href="#055439" label="[05:54:39]">&lt;oriansj&gt;</a></span><span class="message">gcc donut.c -o donut &amp;&amp; ./donut compiles it just fine</span></div><div class="line" id="080748"><span class="nick">***</span><span class="message notice">roptat is now known as Guest8033</span></div><div class="line" id="081844"><span class="nick">***</span><span class="message notice">Server sets mode: +cnt </span></div><div class="line" id="100617"><span class="nick" style="color:#6c3d55"><a href="#100617" label="[10:06:17]">&lt;muurkha&gt;</a></span><span class="message">neat</span></div><div class="line" id="123257"><span class="nick" style="color:#bc80bd"><a href="#123257" label="[12:32:57]">&lt;doras&gt;</a></span><span class="message">stikonas: it's slightly risky to resume the bootstrap like this. A build step should only be skipped if all build steps before it were skipped.</span></div><div class="line" id="123356"><span class="nick" style="color:#bc80bd"><a href="#123356" label="[12:33:56]">&lt;doras&gt;</a></span><span class="message">Otherwise we allow a scenario where a change in mes or in coreutils, for example, doesn't cause musl, guile or other later steps in the bootstrap to rebuild as well.</span></div><div class="line" id="123615"><span class="nick" style="color:#bc80bd"><a href="#123615" label="[12:36:15]">&lt;doras&gt;</a></span><span class="message">The current design in live-boostrap as far as I can tell is that all build steps that precede a given build step are considered inputs to that build step. There's no explicit dependency management. This is also why we can't do parallel builds, because we have no dependency tree.</span></div><div class="line" id="124209"><span class="nick" style="color:#bc80bd"><a href="#124209" label="[12:42:09]">&lt;doras&gt;</a></span><span class="message">I'm not sure yet how to achieve this functionality reliably, but it's worth thinking about.</span></div><div class="line" id="124929"><span class="nick" style="color:#8dd3c7"><a href="#124929" label="[12:49:29]">&lt;oriansj&gt;</a></span><span class="message">doras: export step_03_complete=1 ; if sha256sum -c sha256ssums &amp;&amp; step_03_complete</span></div><div class="line" id="125223"><span class="nick" style="color:#bc80bd"><a href="#125223" label="[12:52:23]">&lt;doras&gt;</a></span><span class="message">oriansj: it can work, but also requires numbering all build steps, or checking each preceding build step by name (&quot;mes_build_complete&quot;). It would mostly be annoying to maintain this.</span></div><div class="line" id="125301"><span class="nick" style="color:#bc80bd"><a href="#125301" label="[12:53:01]">&lt;doras&gt;</a></span><span class="message">I wonder if we could come up with something better than this..</span></div><div class="line" id="125724"><span class="nick" style="color:#8dd3c7"><a href="#125724" label="[12:57:24]">&lt;oriansj&gt;</a></span><span class="message">well reverse dependency management ultimately is knowing what list of things need to be done first; So it is going to require a list regardless</span></div><div class="line" id="125924"><span class="nick" style="color:#6c3d55"><a href="#125924" label="[12:59:24]">&lt;muurkha&gt;</a></span><span class="message">the topological sort used as the first example algorithm in TAOCP volume 1 is something like 30 machine instructions long</span></div><div class="line" id="125953"><span class="nick" style="color:#6c3d55"><a href="#125953" label="[12:59:53]">&lt;muurkha&gt;</a></span><span class="message">but I guess you do need at least a list of build artifacts</span></div><div class="line" id="130002"><span class="nick" style="color:#8dd3c7"><a href="#130002" label="[13:00:02]">&lt;oriansj&gt;</a></span><span class="message">now if we are consistent with naming, we could write a program which just reads a list file and spawns off copies of itself for its dependencies and if they all return true, the result is true else return false</span></div><div class="line" id="130123"><span class="nick" style="color:#8dd3c7"><a href="#130123" label="[13:01:23]">&lt;oriansj&gt;</a></span><span class="message">if dependencies needs.list</span></div><div class="line" id="130138"><span class="nick" style="color:#6c3d55"><a href="#130138" label="[13:01:38]">&lt;muurkha&gt;</a></span><span class="message">manually sorting things into a total order is probably easier than listing the dependency of each build artifact</span></div><div class="line" id="130447"><span class="nick" style="color:#8dd3c7"><a href="#130447" label="[13:04:47]">&lt;oriansj&gt;</a></span><span class="message">well yes: needs.list could just be the name of the previous step</span></div><div class="line" id="130532"><span class="nick" style="color:#8dd3c7"><a href="#130532" label="[13:05:32]">&lt;oriansj&gt;</a></span><span class="message">and the sha256sum command for the previous step</span></div><div class="line" id="131141"><span class="nick" style="color:#8dd3c7"><a href="#131141" label="[13:11:41]">&lt;oriansj&gt;</a></span><span class="message">that way the tool becomes general purpose enough such that if we later to decide to allow parallel builds, it becomes simple to convert to a planned build model like guix has.</span></div><div class="line" id="133030"><span class="nick" style="color:#8dd3c7"><a href="#133030" label="[13:30:30]">&lt;oriansj&gt;</a></span><span class="message">or if we are willing to just make all our lives simpler longer term. Have it build the dependency tree itself from those list files let it figure out the build order</span></div><div class="line" id="133140"><span class="nick" style="color:#6c3d55"><a href="#133140" label="[13:31:40]">&lt;muurkha&gt;</a></span><span class="message">yeah, that's what I was saying about topological sort, and what you were saying about spawning off copies of itself</span></div><div class="line" id="133205"><span class="nick" style="color:#6d2462"><a href="#133205" label="[13:32:05]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: I finally got around to filing an Issue for hex1 and hex2 writing beyond declared ELF memory</span></div><div class="line" id="133214"><span class="nick" style="color:#6c3d55"><a href="#133214" label="[13:32:14]">&lt;muurkha&gt;</a></span><span class="message">an incremental build system is just a memoizer for your compiler and linker</span></div><div class="line" id="133355"><span class="nick" style="color:#6d2462"><a href="#133355" label="[13:33:55]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: could you clarify &quot;we still need to write &quot;hex1&quot; and kaem in hex0 code&quot; - aren't they written in hex0 already?</span></div><div class="line" id="133357"><span class="nick" style="color:#8dd3c7"><a href="#133357" label="[13:33:57]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: thanks</span></div><div class="line" id="133448"><span class="nick" style="color:#8dd3c7"><a href="#133448" label="[13:34:48]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: we were discussing the practical problems of using sectorLisp and sectorForth as languages for the bootstrap seed</span></div><div class="line" id="133600"><span class="nick" style="color:#8dd3c7"><a href="#133600" label="[13:36:00]">&lt;oriansj&gt;</a></span><span class="message">and that was more about if use used them, we would have to figure out how to build those tool from them.</span></div><div class="line" id="133619"><span class="nick" style="color:#6d2462"><a href="#133619" label="[13:36:19]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: sure. as I said last night I explored sectorlisp for that purpose and it didn't look practical or better than the current plan</span></div><div class="line" id="133700"><span class="nick" style="color:#8dd3c7"><a href="#133700" label="[13:37:00]">&lt;oriansj&gt;</a></span><span class="message">agree</span></div><div class="line" id="133804"><span class="nick" style="color:#6d2462"><a href="#133804" label="[13:38:04]">&lt;rickmasters&gt;</a></span><span class="message">i didn't get far looking a Forth</span></div><div class="line" id="133834"><span class="nick" style="color:#6d2462"><a href="#133834" label="[13:38:34]">&lt;rickmasters&gt;</a></span><span class="message">my reaction was an immediate, &quot;yeah, uh ... nope&quot;</span></div><div class="line" id="134011"><span class="nick" style="color:#6d2462"><a href="#134011" label="[13:40:11]">&lt;rickmasters&gt;</a></span><span class="message">... the syntax makes badly written perl look good but i'm sure like anything it can sink in over time</span></div><div class="line" id="134014"><span class="nick" style="color:#6c3d55"><a href="#134014" label="[13:40:14]">&lt;muurkha&gt;</a></span><span class="message">haha yeah</span></div><div class="line" id="134029"><span class="nick" style="color:#6c3d55"><a href="#134029" label="[13:40:29]">&lt;muurkha&gt;</a></span><span class="message">I don't know, there are Forth programmers who say it does</span></div><div class="line" id="134042"><span class="nick" style="color:#6c3d55"><a href="#134042" label="[13:40:42]">&lt;muurkha&gt;</a></span><span class="message">but I think I've given up on that ever happening for me</span></div><div class="line" id="134114"><span class="nick" style="color:#6c3d55"><a href="#134114" label="[13:41:14]">&lt;muurkha&gt;</a></span><span class="message">after 27 years of writing very little Forth, but including <a rel="nofollow" href="https://github.com/kragen/stoneknifeforth">https://github.com/kragen/stoneknifeforth</a> </span></div><div class="line" id="134139"><span class="nick" style="color:#8dd3c7"><a href="#134139" label="[13:41:39]">&lt;oriansj&gt;</a></span><span class="message">well FORTH as a language is fine if you can keep a stack of infinite depth in your brain</span></div><div class="line" id="134151"><span class="nick" style="color:#6c3d55"><a href="#134151" label="[13:41:51]">&lt;muurkha&gt;</a></span><span class="message">no, that's not the problem with Forth</span></div><div class="line" id="134156"><span class="nick" style="color:#6c3d55"><a href="#134156" label="[13:41:56]">&lt;muurkha&gt;</a></span><span class="message">well, it *can* be</span></div><div class="line" id="134205"><span class="nick" style="color:#6c3d55"><a href="#134205" label="[13:42:05]">&lt;muurkha&gt;</a></span><span class="message">but successful Forth programmers avoid doing that</span></div><div class="line" id="134216"><span class="nick" style="color:#6c3d55"><a href="#134216" label="[13:42:16]">&lt;muurkha&gt;</a></span><span class="message">and the stack in their brain is about the same depth as the stack you need for C</span></div><div class="line" id="134236"><span class="nick" style="color:#8dd3c7"><a href="#134236" label="[13:42:36]">&lt;oriansj&gt;</a></span><span class="message">muurkha: 3 levels?</span></div><div class="line" id="134249"><span class="nick" style="color:#6c3d55"><a href="#134249" label="[13:42:49]">&lt;muurkha&gt;</a></span><span class="message">or 2 maybe</span></div><div class="line" id="134341"><span class="nick" style="color:#8dd3c7"><a href="#134341" label="[13:43:41]">&lt;oriansj&gt;</a></span><span class="message">machine code, current code, high level plan</span></div><div class="line" id="134342"><span class="nick" style="color:#6c3d55"><a href="#134342" label="[13:43:42]">&lt;muurkha&gt;</a></span><span class="message">it's just that instead of writing if(NULL != head-&gt;prev) { head-&gt;prev-&gt;next = p; } p-&gt;prev = head-&gt;prev;</span></div><div class="line" id="134420"><span class="nick" style="color:#6c3d55"><a href="#134420" label="[13:44:20]">&lt;muurkha&gt;</a></span><span class="message">you write head @ prev @ if  p @  head @ prev @ next !  then  head @ prev @  p @ prev !</span></div><div class="line" id="134520"><span class="nick" style="color:#6c3d55"><a href="#134520" label="[13:45:20]">&lt;muurkha&gt;</a></span><span class="message">there's never more than two things on the Forth operrand stack there</span></div><div class="line" id="134618"><span class="nick" style="color:#6c3d55"><a href="#134618" label="[13:46:18]">&lt;muurkha&gt;</a></span><span class="message">but I just never got to the point where that was as easy for me to read as the pop infix version</span></div><div class="line" id="134843"><span class="nick" style="color:#6c3d55"><a href="#134843" label="[13:48:43]">&lt;muurkha&gt;</a></span><span class="message">and you can tweak it slightly, like maybe you actually want to factor out the if statement into its own subroutine, or keep head as a third item on the operand stack, or make the @ implicit in the struct access words, and maybe use VALUE instead of VARIABLE, so you can write something like  p  head prev next !</span></div><div class="line" id="134901"><span class="nick" style="color:#6c3d55"><a href="#134901" label="[13:49:01]">&lt;muurkha&gt;</a></span><span class="message">but it just never gets to the level of clarity I want</span></div><div class="line" id="134906"><span class="nick" style="color:#8dd3c7"><a href="#134906" label="[13:49:06]">&lt;oriansj&gt;</a></span><span class="message">(if (!= NULL (-&gt; prev head)) (:= (-&gt; next (-&gt; prev head)) p) (:= (-&gt; prev p) (-&gt; prev head)))</span></div><div class="line" id="134908"><span class="nick" style="color:#6c3d55"><a href="#134908" label="[13:49:08]">&lt;muurkha&gt;</a></span><span class="message">I think visually nested expression syntax makes the data flow more understandable</span></div><div class="line" id="134941"><span class="nick" style="color:#6c3d55"><a href="#134941" label="[13:49:41]">&lt;muurkha&gt;</a></span><span class="message">yeah, that works, though more traditionally in Lisps you make field accessors functions of their own</span></div><div class="line" id="135015"><span class="nick" style="color:#6c3d55"><a href="#135015" label="[13:50:15]">&lt;muurkha&gt;</a></span><span class="message">(if (head prev) (setf (next (head prev)) p))  (setf (prev p) (prev head))</span></div><div class="line" id="135133"><span class="nick" style="color:#6c3d55"><a href="#135133" label="[13:51:33]">&lt;muurkha&gt;</a></span><span class="message">my tentative conclusion is that Forth isn't really designed as a &quot;programming language&quot; in the sense of something like C, where the idea is that you sit down and write a program the way you would write an essay, and then someone else can read it</span></div><div class="line" id="135135"><span class="nick" style="color:#8dd3c7"><a href="#135135" label="[13:51:35]">&lt;oriansj&gt;</a></span><span class="message">don't you mean (if (prev head) (setf (next (prev head))) (setf (prev p) (prev head)))</span></div><div class="line" id="135149"><span class="nick" style="color:#6c3d55"><a href="#135149" label="[13:51:49]">&lt;muurkha&gt;</a></span><span class="message">I do, thanks</span></div><div class="line" id="135239"><span class="nick" style="color:#8dd3c7"><a href="#135239" label="[13:52:39]">&lt;oriansj&gt;</a></span><span class="message">well the reason I did -&gt; is because it makes readibility easier</span></div><div class="line" id="135338"><span class="nick" style="color:#8dd3c7"><a href="#135338" label="[13:53:38]">&lt;oriansj&gt;</a></span><span class="message">I could have also flipped the behavior so it would have been (-&gt; head prev) and could have possibily allowed one to write (-&gt; head prev next)</span></div><div class="line" id="135338"><span class="nick" style="color:#6c3d55"><a href="#135338" label="[13:53:38]">&lt;muurkha&gt;</a></span><span class="message">Forth, like bash, is designed as a sort of hybrid between an interactive command-line interface and a programming language.  but it's a command-line interface for a ROM monitor or debugger, not for a filesystem</span></div><div class="line" id="135413"><span class="nick" style="color:#6c3d55"><a href="#135413" label="[13:54:13]">&lt;muurkha&gt;</a></span><span class="message">that is, the priority is on giving you access to the machine to try stuff out interactively</span></div><div class="line" id="135448"><span class="nick" style="color:#6c3d55"><a href="#135448" label="[13:54:48]">&lt;muurkha&gt;</a></span><span class="message">which is exactly the right priority if you're trying to get some experimental hardware to work on the Kitt Peak telescope</span></div><div class="line" id="135507"><span class="nick" style="color:#6c3d55"><a href="#135507" label="[13:55:07]">&lt;muurkha&gt;</a></span><span class="message">because you don't know enough about the hardware up front to know what you have to do</span></div><div class="line" id="135533"><span class="nick" style="color:#6c3d55"><a href="#135533" label="[13:55:33]">&lt;muurkha&gt;</a></span><span class="message">so in a sense Forth is more similar to GDB than it is to C</span></div><div class="line" id="135555"><span class="nick" style="color:#6c3d55"><a href="#135555" label="[13:55:55]">&lt;muurkha&gt;</a></span><span class="message">nowadays people often use Tcl for that kind of thing for pretty much the same reasons</span></div><div class="line" id="135650"><span class="nick" style="color:#8dd3c7"><a href="#135650" label="[13:56:50]">&lt;oriansj&gt;</a></span><span class="message">and for good reason</span></div><div class="line" id="140001"><span class="nick" style="color:#6c3d55"><a href="#140001" label="[14:00:01]">&lt;muurkha&gt;</a></span><span class="message">yeah, Tcl has real drawbacks but it's a lot more readable than Forth</span></div><div class="line" id="140314"><span class="nick" style="color:#6c3d55"><a href="#140314" label="[14:03:14]">&lt;muurkha&gt;</a></span><span class="message">as I see it, Forth's strong point is that it gives you an interactive development environment with a debugger in 2K–16K, which is 64–1024 times less memory than you need for Tcl</span></div><div class="line" id="140719"><span class="nick" style="color:#3c5b35"><a href="#140719" label="[14:07:19]">&lt;mihi&gt;</a></span><span class="message">muurkha, oriansj: indeed, there is no a and b for (ORD(@&quot;0123456789ABCDEF&quot;)+a)%b being their hex value, as b would need to be 7 and 7 is smaller than 16. However, if you allow 3 add/mod operations, you can do (ORD%32+9)%25, which as an added bonus works for both uppercase and lowercase.</span></div><div class="line" id="140738"><span class="nick" style="color:#3c5b35"><a href="#140738" label="[14:07:38]">&lt;mihi&gt;</a></span><span class="message">&gt;&gt;&gt; [(ord(c) % 32 + 9) % 25 for c in '0123456789abcdef0123456789ABCDEF']</span></div><div class="line" id="140746"><span class="nick" style="color:#3c5b35"><a href="#140746" label="[14:07:46]">&lt;mihi&gt;</a></span><span class="message">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 8,</span></div><div class="line" id="140746"><span class="nick" style="color:#3c5b35"><a href="#140746" label="[14:07:46]">&lt;mihi&gt;</a></span><span class="message">9, 10, 11, 12, 13, 14, 15]</span></div><div class="line" id="140936"><span class="nick" style="color:#3c5b35"><a href="#140936" label="[14:09:36]">&lt;mihi&gt;</a></span><span class="message">oriansj, what do you mean that sectorForth does not support DUP? It is not a built-in word, but sp@ and @ are built-ins, and the first thing the hello world program does is define a DUP word... <a rel="nofollow" href="https://github.com/cesarblum/sectorforth/blob/master/examples/01-helloworld.f#L5">https://github.com/cesarblum/sectorforth/blob/master/examples/01-helloworld.f#L5</a> </span></div><div class="line" id="141059"><span class="nick" style="color:#6c3d55"><a href="#141059" label="[14:10:59]">&lt;muurkha&gt;</a></span><span class="message">mihi: good point!</span></div><div class="line" id="141620"><span class="nick" style="color:#6c3d55"><a href="#141620" label="[14:16:20]">&lt;muurkha&gt;</a></span><span class="message">(also code written in Forth typically runs about 100× faster than code written in Tcl)</span></div><div class="line" id="144922"><span class="nick" style="color:#80b1d3"><a href="#144922" label="[14:49:22]">&lt;achaninja&gt;</a></span><span class="message">muurkha: I haven't seen many forth programs in practice.</span></div><div class="line" id="145037"><span class="nick" style="color:#80b1d3"><a href="#145037" label="[14:50:37]">&lt;achaninja&gt;</a></span><span class="message">For a lot of languages that say they are an order of magnitude better on whatever axis - there are surprisingly few things taking advantage of it to make money.</span></div><div class="line" id="145749"><span class="nick" style="color:#6c3d55"><a href="#145749" label="[14:57:49]">&lt;muurkha&gt;</a></span><span class="message">yeah, you probably won't find a lot of large programs written in bash or Tcl or gdbscript either, especially shrink-wrapped commercial products :)</span></div><div class="line" id="145805"><span class="nick" style="color:#6c3d55"><a href="#145805" label="[14:58:05]">&lt;muurkha&gt;</a></span><span class="message">or powershell either I think</span></div><div class="line" id="145854"><span class="nick" style="color:#80b1d3"><a href="#145854" label="[14:58:54]">&lt;achaninja&gt;</a></span><span class="message">I was also partially thinking about haskell</span></div><div class="line" id="145907"><span class="nick" style="color:#80b1d3"><a href="#145907" label="[14:59:07]">&lt;achaninja&gt;</a></span><span class="message">there are some interesting claims about the powers of forth around</span></div><div class="line" id="145918"><span class="nick" style="color:#6c3d55"><a href="#145918" label="[14:59:18]">&lt;muurkha&gt;</a></span><span class="message">yeah, and I think they're sort of misleading sometimes</span></div><div class="line" id="150015"><span class="nick" style="color:#6c3d55"><a href="#150015" label="[15:00:15]">&lt;muurkha&gt;</a></span><span class="message">but I think it really is true that you can be 100× more productive with Forth than with a C compiler if what you're doing is trying to figure out which registers you need to set in which order to get some piece of badly-documented hardware to work</span></div><div class="line" id="150118"><span class="nick" style="color:#6c3d55"><a href="#150118" label="[15:01:18]">&lt;muurkha&gt;</a></span><span class="message">and probably the biggest commercial shipment of Forth was Sun's open boot prom, which was later used in the OLPC</span></div><div class="line" id="150219"><span class="nick" style="color:#6c3d55"><a href="#150219" label="[15:02:19]">&lt;muurkha&gt;</a></span><span class="message">FedEx was also using Forth for their sign-here tablets their delivery drivers for quite a few years, but FedEx is just one user</span></div><div class="line" id="150316"><span class="nick" style="color:#80b1d3"><a href="#150316" label="[15:03:16]">&lt;achaninja&gt;</a></span><span class="message">haha, thats kind of cool</span></div><div class="line" id="150355"><span class="nick" style="color:#6c3d55"><a href="#150355" label="[15:03:55]">&lt;muurkha&gt;</a></span><span class="message">if what you need is to Write A Program then probably C is better than Forth, but if you want to interactively poke at device registers with a responsive scriptable environment, then Forth or Tcl is going to be a lot more productive than a C compiler</span></div><div class="line" id="150445"><span class="nick" style="color:#6c3d55"><a href="#150445" label="[15:04:45]">&lt;muurkha&gt;</a></span><span class="message">nowadays running Tcl or GDB on your laptop and connecting to your debug target over a serial cable is probably a better approach to that most of the time</span></div><div class="line" id="150507"><span class="nick" style="color:#6c3d55"><a href="#150507" label="[15:05:07]">&lt;muurkha&gt;</a></span><span class="message">and C compilers are a lot faster than they were in the 01970s or 01980s too</span></div><div class="line" id="155448"><span class="nick">***</span><span class="message notice">Avichi is now known as Avici</span></div><div class="line" id="162532"><span class="nick" style="color:#af8d2f"><a href="#162532" label="[16:25:32]">&lt;integfred&gt;</a></span><span class="message">Check this out: <a rel="nofollow" href="https://github.com/publicsite/mavenCentralReconstruction_exampleOutput">https://github.com/publicsite/mavenCentralReconstruction_exampleOutput</a>  <a rel="nofollow" href="https://github.com/publicsite/MavenCentralReconstruction">https://github.com/publicsite/MavenCentralReconstruction</a> </span></div><div class="line" id="165429"><span class="nick" style="color:#bc80bd"><a href="#165429" label="[16:54:29]">&lt;doras&gt;</a></span><span class="message">fossy, stikonas: I submitted a PR to add a rootless bootstrap mode: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/175">https://github.com/fosslinux/live-bootstrap/pull/175</a> </span></div><div class="line" id="165627"><span class="nick" style="color:#bc80bd"><a href="#165627" label="[16:56:27]">&lt;doras&gt;</a></span><span class="message">Unfortunately a recent change seems to have broke it, so it currently fails during `automake-1.11.2`'s build. I'll take a look at it later.</span></div><div class="line" id="165804"><span class="nick" style="color:#bc80bd"><a href="#165804" label="[16:58:04]">&lt;doras&gt;</a></span><span class="message">I'm running a qemu bootstrap in parallel to see if the failure is seen there as well.</span></div><div class="line" id="165951"><span class="nick" style="color:#bc80bd"><a href="#165951" label="[16:59:51]">&lt;doras&gt;</a></span><span class="message">stikonas: it seems to be related to &quot;amhello&quot;: <a rel="nofollow" href="https://gitlab.gnome.org/-/snippets/3507/raw/main/automake-1.11.2-build.log">https://gitlab.gnome.org/-/snippets/3507/raw/main/automake-1.11.2-build.log</a> </span></div><div class="line" id="175758"><span class="nick">***</span><span class="message notice">j4m3s[m] is now known as tototo[m]</span></div><div class="line" id="194908"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o janneke</span></div><div class="line" id="195958"><span class="nick" style="color:#bc80bd"><a href="#195958" label="[19:59:58]">&lt;doras&gt;</a></span><span class="message">Never mind, it doesn't seem to reproduce.</span></div><div class="line" id="200014"><span class="nick" style="color:#bc80bd"><a href="#200014" label="[20:00:14]">&lt;doras&gt;</a></span><span class="message">At all, not even in the bwrap mode.</span></div><div class="line" id="200019"><span class="nick" style="color:#bc80bd"><a href="#200019" label="[20:00:19]">&lt;doras&gt;</a></span><span class="message">Very odd.</span></div><div class="line" id="201043"><span class="nick" style="color:#bc80bd"><a href="#201043" label="[20:10:43]">&lt;doras&gt;</a></span><span class="message">The next thing I'm missing from live-bootstrap is an install mode. It's fun and all to be thrown into an interactive shell after a bootstrap success (or failure), but it's not practical for projects that want to consume live-bootstrap's final output.</span></div><div class="line" id="201232"><span class="nick" style="color:#bc80bd"><a href="#201232" label="[20:12:32]">&lt;doras&gt;</a></span><span class="message">Maybe an &quot;--interactive&quot; command line option needs to be added, so the &quot;install mode&quot; is the default behavior.</span></div><div class="line" id="205248"><span class="nick" style="color:#389600"><a href="#205248" label="[20:52:48]">&lt;stikonas[m]&gt;</a></span><span class="message">doras: well, I was only adding that binary preseed thing for development purposes</span></div><div class="line" id="205933"><span class="nick" style="color:#389600"><a href="#205933" label="[20:59:33]">&lt;stikonas[m]&gt;</a></span><span class="message">doras: but wouldn't change in mes or coreutils change checksums?</span></div><div class="line" id="210017"><span class="nick" style="color:#389600"><a href="#210017" label="[21:00:17]">&lt;stikonas[m]&gt;</a></span><span class="message">--repo is not meant to be used together with --update-checksums</span></div><div class="line" id="210635"><span class="nick" style="color:#bc80bd"><a href="#210635" label="[21:06:35]">&lt;doras&gt;</a></span><span class="message">stikonas: I guess I'm imagining a future where one can make arbitrary changes, rebuild, and then only the affected steps are executed.</span></div><div class="line" id="210727"><span class="nick" style="color:#bc80bd"><a href="#210727" label="[21:07:27]">&lt;doras&gt;</a></span><span class="message">But it's probably going to be a long time before we can accomplish this.</span></div><div class="line" id="211800"><span class="nick" style="color:#bc80bd"><a href="#211800" label="[21:18:00]">&lt;doras&gt;</a></span><span class="message">stikonas: how would you approach the &quot;install mode&quot; for live-bootstrap? Would it be reasonable to introduce a command argument to determine if one should be dropped to an interactive shell upon bootstrap success/failure? This decision would be added to a new variable in bootstrap.cfg so we can avoid running bash interactively, and exit completely when the bootstrap ends or fails.</span></div><div class="line" id="212125"><span class="nick" style="color:#bc80bd"><a href="#212125" label="[21:21:25]">&lt;doras&gt;</a></span><span class="message">I actually don't need the entire &quot;install mode&quot; that one would imagine. No need to install the final output to a DESTDIR or similar. This is mostly because I'd expect this logic to be in rootfs.py, and in the BuildStream case I wouldn't have Python anyway.</span></div><div class="line" id="212151"><span class="nick" style="color:#bc80bd"><a href="#212151" label="[21:21:51]">&lt;doras&gt;</a></span><span class="message">I just need the bootstrap portion of it.</span></div><div class="line" id="212334"><span class="nick" style="color:#bc80bd"><a href="#212334" label="[21:23:34]">&lt;doras&gt;</a></span><span class="message">Maybe an &quot;--exit-after-bootstrap&quot; argument would make sense.</span></div><div class="line" id="212400"><span class="nick" style="color:#bc80bd"><a href="#212400" label="[21:24:00]">&lt;doras&gt;</a></span><span class="message">I'm open to ideas and name suggestions.</span></div><div class="line" id="213808"><span class="nick" style="color:#234e69"><a href="#213808" label="[21:38:08]">&lt;Hagfish&gt;</a></span><span class="message">having arguments to determine that behaviour does seem sensible, so i think you're right to suggest them</span></div><div class="line" id="214217"><span class="nick" style="color:#234e69"><a href="#214217" label="[21:42:17]">&lt;Hagfish&gt;</a></span><span class="message">i guess &quot;exit&quot; makes it clear, but in terms of naming, you might prefer a mention of &quot;shell&quot; (if that's what it affects) rather than &quot;bootstrap&quot; (which is just one possible use case?)</span></div><div class="line" id="220104"><span class="nick" style="color:#389600"><a href="#220104" label="[22:01:04]">&lt;stikonas[m]&gt;</a></span><span class="message">doras: what should be the output of install mode?</span></div><div class="line" id="220136"><span class="nick" style="color:#389600"><a href="#220136" label="[22:01:36]">&lt;stikonas[m]&gt;</a></span><span class="message">I've added after.sh hook that can be replaced</span></div><div class="line" id="220145"><span class="nick" style="color:#389600"><a href="#220145" label="[22:01:45]">&lt;stikonas[m]&gt;</a></span><span class="message">But that's all inside chroor</span></div><div class="line" id="220249"><span class="nick" style="color:#389600"><a href="#220249" label="[22:02:49]">&lt;stikonas[m]&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysc/after.sh">https://github.com/fosslinux/live-bootstrap/blob/master/sysc/after.sh</a> </span></div><div class="line" id="220659"><span class="nick" style="color:#389600"><a href="#220659" label="[22:06:59]">&lt;stikonas&gt;</a></span><span class="message">but yes, some option to rootfs.py would make sense...</span></div><div class="line" id="220722"><span class="nick" style="color:#389600"><a href="#220722" label="[22:07:22]">&lt;stikonas&gt;</a></span><span class="message">but I don't know what's the best way to exit would be</span></div><div class="line" id="220758"><span class="nick" style="color:#389600"><a href="#220758" label="[22:07:58]">&lt;stikonas&gt;</a></span><span class="message">1. keep installation disk image in qemu mode? But that wouldn't work in chroot mode</span></div><div class="line" id="220827"><span class="nick" style="color:#389600"><a href="#220827" label="[22:08:27]">&lt;stikonas&gt;</a></span><span class="message">where maybe we would like to get something outside chroot?</span></div><div class="line" id="221818"><span class="nick" style="color:#bc80bd"><a href="#221818" label="[22:18:18]">&lt;doras&gt;</a></span><span class="message">It's probably only relevant to chroot and bwrap modes.</span></div><div class="line" id="225353"><span class="nick" style="color:#389600"><a href="#225353" label="[22:53:53]">&lt;stikonas&gt;</a></span><span class="message">strange, my preseed PR seems to have changed quite a few package hashes</span></div><div class="line" id="225853"><span class="nick" style="color:#bc80bd"><a href="#225853" label="[22:58:53]">&lt;doras&gt;</a></span><span class="message">Shouldn't it keep hashes exactly the same by definition?</span></div><div class="line" id="230125"><span class="nick" style="color:#389600"><a href="#230125" label="[23:01:25]">&lt;stikonas&gt;</a></span><span class="message">doras: I mean running &quot;rootfs.py -c&quot; changes hashes</span></div><div class="line" id="230135"><span class="nick" style="color:#389600"><a href="#230135" label="[23:01:35]">&lt;stikonas&gt;</a></span><span class="message">not the packing/unpacking step</span></div><div class="line" id="230143"><span class="nick" style="color:#389600"><a href="#230143" label="[23:01:43]">&lt;stikonas&gt;</a></span><span class="message">just running it normally</span></div><div class="line" id="230202"><span class="nick" style="color:#389600"><a href="#230202" label="[23:02:02]">&lt;stikonas&gt;</a></span><span class="message">there are some changes to helpers.sh, but I've no idea why they cause changes in binaries</span></div><div class="line" id="230224"><span class="nick" style="color:#bc80bd"><a href="#230224" label="[23:02:24]">&lt;doras&gt;</a></span><span class="message">Yes, it shouldn't change those. If it does, it's probably a bug.</span></div><div class="line" id="230256"><span class="nick" style="color:#389600"><a href="#230256" label="[23:02:56]">&lt;stikonas&gt;</a></span><span class="message">e.g. diffoscope shows <a rel="nofollow" href="https://paste.debian.net/1241789/">https://paste.debian.net/1241789/</a> </span></div><div class="line" id="230336"><span class="nick" style="color:#389600"><a href="#230336" label="[23:03:36]">&lt;stikonas&gt;</a></span><span class="message">though not very comprehensible without disassembly</span></div><div class="line" id="230347"><span class="nick" style="color:#bc80bd"><a href="#230347" label="[23:03:47]">&lt;doras&gt;</a></span><span class="message">Also, regarding the install mode, I think the qemu mode already has a proper output in the form of a rootfs image. This is similar to the sysc rootfs directory that we end up with in the chroot and bwrap modes.</span></div><div class="line" id="230529"><span class="nick" style="color:#bc80bd"><a href="#230529" label="[23:05:29]">&lt;doras&gt;</a></span><span class="message">So the output is already in some form or another. The only &quot;pressing&quot; issue in the sense of an install mode is that we assume a human is running the bootstrap and monitoring the terminal, or expecting an interactive shell.</span></div><div class="line" id="230606"><span class="nick" style="color:#389600"><a href="#230606" label="[23:06:06]">&lt;stikonas&gt;</a></span><span class="message">that's why I split interactive bash into after.sh file</span></div><div class="line" id="230615"><span class="nick" style="color:#389600"><a href="#230615" label="[23:06:15]">&lt;stikonas&gt;</a></span><span class="message">so that it's easily replaceable</span></div><div class="line" id="230704"><span class="nick" style="color:#389600"><a href="#230704" label="[23:07:04]">&lt;stikonas&gt;</a></span><span class="message">I can't understand much from sed disassembly <a rel="nofollow" href="https://paste.debian.net/1241790/">https://paste.debian.net/1241790/</a>  ...</span></div><div class="line" id="230743"><span class="nick" style="color:#bc80bd"><a href="#230743" label="[23:07:43]">&lt;doras&gt;</a></span><span class="message">I think we also have a &quot;trap&quot; and some other bash invocations that end up interactive.</span></div><div class="line" id="230823"><span class="nick" style="color:#bc80bd"><a href="#230823" label="[23:08:23]">&lt;doras&gt;</a></span><span class="message">But anyway, a CI pipeline doesn't want to end up in an interactive (i.e., blocking) shell in any form or scenario. I want to allow this use case.</span></div><div class="line" id="230839"><span class="nick" style="color:#389600"><a href="#230839" label="[23:08:39]">&lt;stikonas&gt;</a></span><span class="message">oh that trap is only invoked on failures</span></div><div class="line" id="230904"><span class="nick" style="color:#389600"><a href="#230904" label="[23:09:04]">&lt;stikonas&gt;</a></span><span class="message">we shouldn't commit failing commits</span></div><div class="line" id="231029"><span class="nick" style="color:#389600"><a href="#231029" label="[23:10:29]">&lt;stikonas&gt;</a></span><span class="message">but yes, we can disable trap depending on bootstrap.cfg</span></div><div class="line" id="231047"><span class="nick" style="color:#389600"><a href="#231047" label="[23:10:47]">&lt;stikonas&gt;</a></span><span class="message">doras: also not that traps are completely broken in sysa</span></div><div class="line" id="231123"><span class="nick" style="color:#389600"><a href="#231123" label="[23:11:23]">&lt;stikonas&gt;</a></span><span class="message">that first bash has quite a few things broken</span></div><div class="line" id="231152"><span class="nick" style="color:#389600"><a href="#231152" label="[23:11:52]">&lt;stikonas&gt;</a></span><span class="message">not sure if it's meslibc or compiler defines</span></div><div class="line" id="231301"><span class="nick" style="color:#bc80bd"><a href="#231301" label="[23:13:01]">&lt;doras&gt;</a></span><span class="message">Regarding the hash changes, I'd try to start commenting out functionality until you get the same hash. The binary changes are very odd.</span></div><div class="line" id="231449"><span class="nick" style="color:#389600"><a href="#231449" label="[23:14:49]">&lt;stikonas&gt;</a></span><span class="message">yeah, I might try that</span></div><div class="line" id="231531"><span class="nick" style="color:#bc80bd"><a href="#231531" label="[23:15:31]">&lt;doras&gt;</a></span><span class="message">meslibc seems to have quite a few stubs. I wouldn't be surprised if things break.</span></div><div class="line" id="231721"><span class="nick" style="color:#bc80bd"><a href="#231721" label="[23:17:21]">&lt;doras&gt;</a></span><span class="message">stikonas @stikonas:libera.chat: I'd appreciate it if you could try to run my bwrap-based bootstrap when you get a chance: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/175">https://github.com/fosslinux/live-bootstrap/pull/175</a> </span></div><div class="line" id="231757"><span class="nick" style="color:#389600"><a href="#231757" label="[23:17:57]">&lt;stikonas&gt;</a></span><span class="message">yeah, I can try to at least kick it off</span></div><div class="line" id="231824"><span class="nick" style="color:#389600"><a href="#231824" label="[23:18:24]">&lt;stikonas&gt;</a></span><span class="message">though I might not have time to review it all for 2 weeks or so</span></div><div class="line" id="231838"><span class="nick" style="color:#389600"><a href="#231838" label="[23:18:38]">&lt;stikonas&gt;</a></span><span class="message">but there is also fossy to do reviews</span></div><div class="line" id="231919"><span class="nick" style="color:#bc80bd"><a href="#231919" label="[23:19:19]">&lt;doras&gt;</a></span><span class="message">I really wonder if it works for anyone else. It should be more reproducible than the chroot mode in theory because its environment is more confined.</span></div><div class="line" id="232041"><span class="nick" style="color:#389600"><a href="#232041" label="[23:20:41]">&lt;stikonas&gt;</a></span><span class="message">doras: bwrap: --cap-add in setuid mode can be used only by root</span></div><div class="line" id="232102"><span class="nick" style="color:#389600"><a href="#232102" label="[23:21:02]">&lt;stikonas&gt;</a></span><span class="message">what do I need to configure to avoid that?</span></div><div class="line" id="232121"><span class="nick" style="color:#389600"><a href="#232121" label="[23:21:21]">&lt;stikonas&gt;</a></span><span class="message">oh, and I need to manually delete tmp/ and sysc/tmp to re-run it</span></div><div class="line" id="232201"><span class="nick" style="color:#bc80bd"><a href="#232201" label="[23:22:01]">&lt;doras&gt;</a></span><span class="message">You don't have user namespaces enabled in your kernel?</span></div><div class="line" id="232221"><span class="nick" style="color:#bc80bd"><a href="#232221" label="[23:22:21]">&lt;doras&gt;</a></span><span class="message">Well, unprivileged namespaces, more accurately.</span></div><div class="line" id="232224"><span class="nick" style="color:#389600"><a href="#232224" label="[23:22:24]">&lt;stikonas&gt;</a></span><span class="message">I can check...</span></div><div class="line" id="232228"><span class="nick" style="color:#389600"><a href="#232228" label="[23:22:28]">&lt;stikonas&gt;</a></span><span class="message">it does work with sudo</span></div><div class="line" id="232249"><span class="nick" style="color:#389600"><a href="#232249" label="[23:22:49]">&lt;stikonas&gt;</a></span><span class="message">need to find it first in menuconfig</span></div><div class="line" id="232316"><span class="nick" style="color:#389600"><a href="#232316" label="[23:23:16]">&lt;stikonas&gt;</a></span><span class="message">I think I have namespaces</span></div><div class="line" id="232340"><span class="nick" style="color:#bc80bd"><a href="#232340" label="[23:23:40]">&lt;doras&gt;</a></span><span class="message">I wonder why it needs the real root user though in setuid mode though. The setuid itself should give it all of root's permissions to set up the sandbox and the drop the privileges.</span></div><div class="line" id="232357"><span class="nick" style="color:#389600"><a href="#232357" label="[23:23:57]">&lt;stikonas&gt;</a></span><span class="message">I have both CONFIG_NAMESPACES=y and individual ones like CONFIG_USER_NS=y</span></div><div class="line" id="232407"><span class="nick" style="color:#bc80bd"><a href="#232407" label="[23:24:07]">&lt;doras&gt;</a></span><span class="message">stikonas @stikonas:libera.chat: which distro are you using?</span></div><div class="line" id="232427"><span class="nick" style="color:#389600"><a href="#232427" label="[23:24:27]">&lt;stikonas&gt;</a></span><span class="message">Gentoo</span></div><div class="line" id="232441"><span class="nick" style="color:#389600"><a href="#232441" label="[23:24:41]">&lt;stikonas&gt;</a></span><span class="message">probably needs some extra configu</span></div><div class="line" id="232447"><span class="nick" style="color:#389600"><a href="#232447" label="[23:24:47]">&lt;stikonas&gt;</a></span><span class="message">but it would be good to understand that and document it</span></div><div class="line" id="232611"><span class="nick" style="color:#389600"><a href="#232611" label="[23:26:11]">&lt;stikonas&gt;</a></span><span class="message">and bubblewrap is build with USE=suid</span></div><div class="line" id="232627"><span class="nick" style="color:#389600"><a href="#232627" label="[23:26:27]">&lt;stikonas&gt;</a></span><span class="message">so I think that should set setuid</span></div><div class="line" id="232702"><span class="nick" style="color:#bc80bd"><a href="#232702" label="[23:27:02]">&lt;doras&gt;</a></span><span class="message">I think I missed the tmp deletion part. Thanks for pointing it out.</span></div><div class="line" id="232730"><span class="nick" style="color:#bc80bd"><a href="#232730" label="[23:27:30]">&lt;doras&gt;</a></span><span class="message">I'm used to running with a script that manually deletes those, so I haven't noticed.</span></div><div class="line" id="232903"><span class="nick" style="color:#bc80bd"><a href="#232903" label="[23:29:03]">&lt;doras&gt;</a></span><span class="message">stikonas @stikonas:libera.chat: if you run the following, does it work?</span></div><div class="line" id="232903"><span class="nick" style="color:#bc80bd"><a href="#232903" label="[23:29:03]">&lt;doras&gt;</a></span><span class="message">unshare --user --map-root-user bash</span></div><div class="line" id="232941"><span class="nick" style="color:#bc80bd"><a href="#232941" label="[23:29:41]">&lt;doras&gt;</a></span><span class="message">You should &quot;become root&quot; without a need for sudo or a password.</span></div><div class="line" id="232954"><span class="nick" style="color:#389600"><a href="#232954" label="[23:29:54]">&lt;stikonas&gt;</a></span><span class="message">doras: it works if I build bubblewrap without suid</span></div><div class="line" id="233016"><span class="nick" style="color:#bc80bd"><a href="#233016" label="[23:30:16]">&lt;doras&gt;</a></span><span class="message">Great!</span></div><div class="line" id="233028"><span class="nick" style="color:#389600"><a href="#233028" label="[23:30:28]">&lt;stikonas&gt;</a></span><span class="message">can you document that too?</span></div><div class="line" id="233121"><span class="nick" style="color:#bc80bd"><a href="#233121" label="[23:31:21]">&lt;doras&gt;</a></span><span class="message">Which part of it?</span></div><div class="line" id="233149"><span class="nick" style="color:#389600"><a href="#233149" label="[23:31:49]">&lt;stikonas&gt;</a></span><span class="message">hmm, so does your distro have bwrap as setuid?</span></div><div class="line" id="233203"><span class="nick" style="color:#bc80bd"><a href="#233203" label="[23:32:03]">&lt;doras&gt;</a></span><span class="message">I did mention in my commit that bubblewrap can operate in rootless mode if unprivileged namespaces are allowed.</span></div><div class="line" id="233215"><span class="nick" style="color:#389600"><a href="#233215" label="[23:32:15]">&lt;stikonas&gt;</a></span><span class="message">unshare doesn't help</span></div><div class="line" id="233227"><span class="nick" style="color:#389600"><a href="#233227" label="[23:32:27]">&lt;stikonas&gt;</a></span><span class="message">yes, but I think you also need no setuid on bwrap binary</span></div><div class="line" id="233233"><span class="nick" style="color:#389600"><a href="#233233" label="[23:32:33]">&lt;stikonas&gt;</a></span><span class="message">with unshare I got bwrap: setting up uid map: Permission denied</span></div><div class="line" id="233258"><span class="nick" style="color:#bc80bd"><a href="#233258" label="[23:32:58]">&lt;doras&gt;</a></span><span class="message">The unshare part was just to test if the kernel supports unprivileged namespaces.</span></div><div class="line" id="233314"><span class="nick" style="color:#bc80bd"><a href="#233314" label="[23:33:14]">&lt;doras&gt;</a></span><span class="message">Most distros have it enabled these days. I use Fedora and Arch.</span></div><div class="line" id="233343"><span class="nick" style="color:#bc80bd"><a href="#233343" label="[23:33:43]">&lt;doras&gt;</a></span><span class="message">But also Ubuntu and Debian have it enabled by default.</span></div><div class="line" id="233413"><span class="nick" style="color:#389600"><a href="#233413" label="[23:34:13]">&lt;stikonas&gt;</a></span><span class="message">oh ok</span></div><div class="line" id="233414"><span class="nick" style="color:#bc80bd"><a href="#233414" label="[23:34:14]">&lt;doras&gt;</a></span><span class="message">All of their derivatives also have it enabled by default, including Mint.</span></div><div class="line" id="233418"><span class="nick" style="color:#389600"><a href="#233418" label="[23:34:18]">&lt;stikonas&gt;</a></span><span class="message">strange then...</span></div><div class="line" id="233432"><span class="nick" style="color:#389600"><a href="#233432" label="[23:34:32]">&lt;stikonas&gt;</a></span><span class="message">anyway, I'll try without suid and see if it runs to completion</span></div><div class="line" id="233512"><span class="nick" style="color:#389600"><a href="#233512" label="[23:35:12]">&lt;stikonas&gt;</a></span><span class="message">so no idea why I got that --cap-add in setuid mode can be used only by root</span></div><div class="line" id="233538"><span class="nick" style="color:#bc80bd"><a href="#233538" label="[23:35:38]">&lt;doras&gt;</a></span><span class="message">Sure.</span></div><div class="line" id="233606"><span class="nick" style="color:#389600"><a href="#233606" label="[23:36:06]">&lt;stikonas&gt;</a></span><span class="message">might be <a rel="nofollow" href="https://bugs.gentoo.org/669210">https://bugs.gentoo.org/669210</a> </span></div><div class="line" id="233621"><span class="nick" style="color:#389600"><a href="#233621" label="[23:36:21]">&lt;stikonas&gt;</a></span><span class="message">well, at least some explanation</span></div><div class="line" id="233622"><span class="nick" style="color:#bc80bd"><a href="#233622" label="[23:36:22]">&lt;doras&gt;</a></span><span class="message">I has to use that option because we chroot between sysa and sysc as part of the bootstrap.</span></div><div class="line" id="233622"><span class="nick" style="color:#bc80bd"><a href="#233622" label="[23:36:22]">&lt;doras&gt;</a></span><span class="message">had*</span></div><div class="line" id="233628"><span class="nick" style="color:#bc80bd"><a href="#233628" label="[23:36:28]">&lt;doras&gt;</a></span><span class="message">Otherwise it's not needed</span></div><div class="line" id="233929"><span class="nick" style="color:#bc80bd"><a href="#233929" label="[23:39:29]">&lt;doras&gt;</a></span><span class="message">People were afraid of unprivileged namespaces until a few years ago. I think everyone realized it was quite safe around 2020, and distros that came after that had it enabled by default.</span></div><div class="line" id="234028"><span class="nick" style="color:#389600"><a href="#234028" label="[23:40:28]">&lt;stikonas&gt;</a></span><span class="message">yeah, so it sounds like bwrap can either use user namespaces or suid but for some reason for me only the former works</span></div><div class="line" id="234102"><span class="nick" style="color:#389600"><a href="#234102" label="[23:41:02]">&lt;stikonas&gt;</a></span><span class="message">well, I'll see if sysa-&gt;sysc transition works</span></div><div class="line" id="234103"><span class="nick" style="color:#bc80bd"><a href="#234103" label="[23:41:03]">&lt;doras&gt;</a></span><span class="message">Which error did you actually see in the suid mode?</span></div><div class="line" id="234117"><span class="nick" style="color:#389600"><a href="#234117" label="[23:41:17]">&lt;stikonas&gt;</a></span><span class="message">bwrap: --cap-add in setuid mode can be used only by root</span></div><div class="line" id="234206"><span class="nick" style="color:#389600"><a href="#234206" label="[23:42:06]">&lt;stikonas&gt;</a></span><span class="message">so coming from <a rel="nofollow" href="https://github.com/containers/bubblewrap/blob/main/bubblewrap.c#L2598">https://github.com/containers/bubblewrap/blob/main/bubblewrap.c#L2598</a> </span></div><div class="line" id="234234"><span class="nick" style="color:#bc80bd"><a href="#234234" label="[23:42:34]">&lt;doras&gt;</a></span><span class="message">Interesting indeed. One would expect suid to allow all of root's capabilities. Strange that it doesn't.</span></div><div class="line" id="234236"><span class="nick" style="color:#8dd3c7"><a href="#234236" label="[23:42:36]">&lt;qyliss&gt;</a></span><span class="message">the last unprivileged user namespace privilege escalation i heard about was from this year... <a rel="nofollow" href="https://seclists.org/oss-sec/2022/q1/55">https://seclists.org/oss-sec/2022/q1/55</a> </span></div><div class="line" id="234519"><span class="nick" style="color:#bc80bd"><a href="#234519" label="[23:45:19]">&lt;doras&gt;</a></span><span class="message">qyliss: any additional functionality has an attack surface, obviously.</span></div><div class="line" id="234601"><span class="nick" style="color:#bc80bd"><a href="#234601" label="[23:46:01]">&lt;doras&gt;</a></span><span class="message">However, it's not a &quot;security nightmare&quot; as people initially thought. Or not today, anyway.</span></div><div class="line" id="235310"><span class="nick" style="color:#bc80bd"><a href="#235310" label="[23:53:10]">&lt;doras&gt;</a></span><span class="message">stikonas @stikonas:libera.chat: we could easily remove this capability though if we re-introduce the mode in which we go back to rootfs.py after sysa's bootstrap completes and then initiate sysc's bootstrap with an additional command.</span></div><div class="line" id="235344"><span class="nick" style="color:#389600"><a href="#235344" label="[23:53:44]">&lt;stikonas&gt;</a></span><span class="message">hmm, maybe. Not sure what's better</span></div><div class="line" id="235354"><span class="nick" style="color:#389600"><a href="#235354" label="[23:53:54]">&lt;stikonas&gt;</a></span><span class="message">though if we do that, only for bwrap mode</span></div><div class="line" id="235403"><span class="nick" style="color:#389600"><a href="#235403" label="[23:54:03]">&lt;stikonas&gt;</a></span><span class="message">chroot mode should keep chrooting</span></div><div class="line" id="235502"><span class="nick" style="color:#bc80bd"><a href="#235502" label="[23:55:02]">&lt;doras&gt;</a></span><span class="message">The bwrap mode doesn't require entering passwords or similar upon execution, unlike the chroot mode, so the user experience wouldn't be negatively impacted.</span></div><div class="line" id="235818"><span class="nick" style="color:#bc80bd"><a href="#235818" label="[23:58:18]">&lt;doras&gt;</a></span><span class="message">stikonas @stikonas:libera.chat: I think we can easily avoid both the chroot to sysc and password prompts in the chroot mode, simply by running the two bootstrap executions in the context of a single elevated shell command.</span></div><div class="line" id="235854"><span class="nick" style="color:#389600"><a href="#235854" label="[23:58:54]">&lt;stikonas&gt;</a></span><span class="message">that's true</span></div><br /></div></body></html>