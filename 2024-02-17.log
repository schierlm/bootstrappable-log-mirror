<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2024-02-17.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000232"><span class="nick" style="color:#389600"><a href="#000232" label="[00:02:32]">&lt;oriansj&gt;</a></span><span class="message">the only time you should be setting filesize to zero is when O_TRUNC is set; otherwise the standard would be not to truncate</span></div><div class="line" id="000514"><span class="nick" style="color:#389600"><a href="#000514" label="[00:05:14]">&lt;oriansj&gt;</a></span><span class="message">but other than that, yeah it looks reasonable</span></div><div class="line" id="000627"><span class="nick" style="color:#8dd3c7"><a href="#000627" label="[00:06:27]">&lt;stikonas&gt;</a></span><span class="message">well, I could update it</span></div><div class="line" id="000634"><span class="nick" style="color:#8dd3c7"><a href="#000634" label="[00:06:34]">&lt;stikonas&gt;</a></span><span class="message">let me double check what uses the other open mode</span></div><div class="line" id="000643"><span class="nick" style="color:#8dd3c7"><a href="#000643" label="[00:06:43]">&lt;stikonas&gt;</a></span><span class="message">almost everything else opens files with O_TRUNC</span></div><div class="line" id="000801"><span class="nick" style="color:#8dd3c7"><a href="#000801" label="[00:08:01]">&lt;stikonas&gt;</a></span><span class="message">well, mkstemp is using the other mode</span></div><div class="line" id="000825"><span class="nick" style="color:#8dd3c7"><a href="#000825" label="[00:08:25]">&lt;stikonas&gt;</a></span><span class="message">but ok, I can limit the second if to (O_WRONLY | O_CREAT | O_TRUNC)</span></div><div class="line" id="001054"><span class="nick" style="color:#8dd3c7"><a href="#001054" label="[00:10:54]">&lt;stikonas&gt;</a></span><span class="message">oriansj:  is it better now?</span></div><div class="line" id="001110"><span class="nick" style="color:#8dd3c7"><a href="#001110" label="[00:11:10]">&lt;stikonas&gt;</a></span><span class="message">or do you want me to do flag &amp; O_TRUNC ?</span></div><div class="line" id="001124"><span class="nick" style="color:#389600"><a href="#001124" label="[00:11:24]">&lt;oriansj&gt;</a></span><span class="message">correct</span></div><div class="line" id="001151"><span class="nick" style="color:#389600"><a href="#001151" label="[00:11:51]">&lt;oriansj&gt;</a></span><span class="message">as O_TRUNC can be combined with other modes (which may not be reasonable)</span></div><div class="line" id="001157"><span class="nick" style="color:#8dd3c7"><a href="#001157" label="[00:11:57]">&lt;stikonas&gt;</a></span><span class="message">ok, I'll do that then...</span></div><div class="line" id="001550"><span class="nick" style="color:#8dd3c7"><a href="#001550" label="[00:15:50]">&lt;stikonas&gt;</a></span><span class="message">ok, updated</span></div><div class="line" id="001622"><span class="nick" style="color:#8dd3c7"><a href="#001622" label="[00:16:22]">&lt;stikonas&gt;</a></span><span class="message">oh wait, maybe I should insert free</span></div><div class="line" id="001627"><span class="nick" style="color:#8dd3c7"><a href="#001627" label="[00:16:27]">&lt;stikonas&gt;</a></span><span class="message">before return in the failing branch...</span></div><div class="line" id="001726"><span class="nick" style="color:#8dd3c7"><a href="#001726" label="[00:17:26]">&lt;stikonas&gt;</a></span><span class="message">ok, pushed again</span></div><div class="line" id="001952"><span class="nick" style="color:#389600"><a href="#001952" label="[00:19:52]">&lt;oriansj&gt;</a></span><span class="message">merged</span></div><div class="line" id="002304"><span class="nick" style="color:#8dd3c7"><a href="#002304" label="[00:23:04]">&lt;stikonas&gt;</a></span><span class="message">thanks</span></div><div class="line" id="003436"><span class="nick" style="color:#8dd3c7"><a href="#003436" label="[00:34:36]">&lt;stikonas&gt;</a></span><span class="message">ok, now I think it works fine and is blocked by posix bootstrap issues only...</span></div><div class="line" id="003449"><span class="nick" style="color:#8dd3c7"><a href="#003449" label="[00:34:49]">&lt;stikonas&gt;</a></span><span class="message">we need to figure out why tcc-mes crashes on x86_64</span></div><div class="line" id="003459"><span class="nick" style="color:#8dd3c7"><a href="#003459" label="[00:34:59]">&lt;stikonas&gt;</a></span><span class="message">not looking forward to debugging it though :(</span></div><div class="line" id="003953"><span class="nick" style="color:#389600"><a href="#003953" label="[00:39:53]">&lt;oriansj&gt;</a></span><span class="message">well tcc is surprisingly buggy</span></div><div class="line" id="004044"><span class="nick" style="color:#389600"><a href="#004044" label="[00:40:44]">&lt;oriansj&gt;</a></span><span class="message">despite being wath appears to be a very simple AST walker.</span></div><div class="line" id="004103"><span class="nick" style="color:#389600"><a href="#004103" label="[00:41:03]">&lt;oriansj&gt;</a></span><span class="message">^wath^what^</span></div><div class="line" id="004125"><span class="nick" style="color:#8dd3c7"><a href="#004125" label="[00:41:25]">&lt;stikonas&gt;</a></span><span class="message">oriansj: well, here it's not really tcc's fault</span></div><div class="line" id="004133"><span class="nick" style="color:#8dd3c7"><a href="#004133" label="[00:41:33]">&lt;stikonas&gt;</a></span><span class="message">these bugs are still mescc bugs</span></div><div class="line" id="004146"><span class="nick" style="color:#8dd3c7"><a href="#004146" label="[00:41:46]">&lt;stikonas&gt;</a></span><span class="message">its 64-bit support is still really really experimental</span></div><div class="line" id="004206"><span class="nick" style="color:#8dd3c7"><a href="#004206" label="[00:42:06]">&lt;stikonas&gt;</a></span><span class="message">despite us managing to build that step on riscv64</span></div><div class="line" id="004242"><span class="nick" style="color:#389600"><a href="#004242" label="[00:42:42]">&lt;oriansj&gt;</a></span><span class="message">well yes, binary generation is very touchy</span></div><div class="line" id="004325"><span class="nick" style="color:#389600"><a href="#004325" label="[00:43:25]">&lt;oriansj&gt;</a></span><span class="message">and tcc for some reason never thought: hey lets output assembly and simplify the parts so that they are easier to debug</span></div><div class="line" id="004405"><span class="nick" style="color:#8dd3c7"><a href="#004405" label="[00:44:05]">&lt;stikonas&gt;</a></span><span class="message">well, yeah, if tcc was more readable, debugging would be easier too</span></div><div class="line" id="004413"><span class="nick" style="color:#389600"><a href="#004413" label="[00:44:13]">&lt;oriansj&gt;</a></span><span class="message">even outputting a custom llvm style assembly would have been a better option</span></div><div class="line" id="004423"><span class="nick" style="color:#8dd3c7"><a href="#004423" label="[00:44:23]">&lt;stikonas&gt;</a></span><span class="message">though part of it is that blood-elf debug info is very minimal</span></div><div class="line" id="004432"><span class="nick" style="color:#8dd3c7"><a href="#004432" label="[00:44:32]">&lt;stikonas&gt;</a></span><span class="message">we only have some function labels</span></div><div class="line" id="004515"><span class="nick" style="color:#389600"><a href="#004515" label="[00:45:15]">&lt;oriansj&gt;</a></span><span class="message">wouldn't be an issue if TCC didn't do the rewrite the binary blob sort of logic (which is just a bad idea)</span></div><div class="line" id="020044"><span class="nick" style="color:#2e2a4a"><a href="#020044" label="[02:00:44]">&lt;fossy&gt;</a></span><span class="message">Googulator: regarding i915_sw_fence.patch, does our gcc really not support __aligned?</span></div><div class="line" id="020047"><span class="nick" style="color:#2e2a4a"><a href="#020047" label="[02:00:47]">&lt;fossy&gt;</a></span><span class="message">that's surprising if so...</span></div><div class="line" id="020053"><span class="nick" style="color:#2e2a4a"><a href="#020053" label="[02:00:53]">&lt;fossy&gt;</a></span><span class="message">or maybe it doesn't support __aligned(4)?</span></div><div class="line" id="020105"><span class="nick" style="color:#2e2a4a"><a href="#020105" label="[02:01:05]">&lt;fossy&gt;</a></span><span class="message">in particular?</span></div><div class="line" id="021656"><span class="nick" style="color:#8dd3c7"><a href="#021656" label="[02:16:56]">&lt;stikonas&gt;</a></span><span class="message">hmm, doesn't look like posix-runner can binaries compiled with tcc (not yet bootstrapped)</span></div><div class="line" id="021829"><span class="nick" style="color:#8dd3c7"><a href="#021829" label="[02:18:29]">&lt;stikonas&gt;</a></span><span class="message">and even non-bootstrap tcc can't produce a working tcc on x86_64 with meslibc...</span></div><div class="line" id="021845"><span class="nick" style="color:#8dd3c7"><a href="#021845" label="[02:18:45]">&lt;stikonas&gt;</a></span><span class="message">so I don't think I'll be able to get it working anytime soon...</span></div><div class="line" id="022451"><span class="nick" style="color:#389600"><a href="#022451" label="[02:24:51]">&lt;oriansj&gt;</a></span><span class="message">I guess I have my work cut out for me then</span></div><div class="line" id="022913"><span class="nick" style="color:#8dd3c7"><a href="#022913" label="[02:29:13]">&lt;stikonas&gt;</a></span><span class="message">in what sense?</span></div><div class="line" id="023001"><span class="nick" style="color:#8dd3c7"><a href="#023001" label="[02:30:01]">&lt;stikonas&gt;</a></span><span class="message">if anything, it seems that there is more work...</span></div><div class="line" id="023005"><span class="nick" style="color:#8dd3c7"><a href="#023005" label="[02:30:05]">&lt;stikonas&gt;</a></span><span class="message">than I initially thought</span></div><div class="line" id="023134"><span class="nick" style="color:#2e2a4a"><a href="#023134" label="[02:31:34]">&lt;fossy&gt;</a></span><span class="message">stikonas: &quot;work cut out for me&quot; is an idiom for having something very difficult to do</span></div><div class="line" id="023143"><span class="nick" style="color:#8dd3c7"><a href="#023143" label="[02:31:43]">&lt;stikonas&gt;</a></span><span class="message">oh I see</span></div><div class="line" id="023145"><span class="nick" style="color:#2e2a4a"><a href="#023145" label="[02:31:45]">&lt;fossy&gt;</a></span><span class="message">which is a very backwards idiom lol</span></div><div class="line" id="023243"><span class="nick" style="color:#8dd3c7"><a href="#023243" label="[02:32:43]">&lt;stikonas&gt;</a></span><span class="message">yeah, which is what confused me...</span></div><div class="line" id="025108"><span class="nick" style="color:#389600"><a href="#025108" label="[02:51:08]">&lt;oriansj&gt;</a></span><span class="message">I am starting to wonder if C compilers were originally designed  as a prank that went too far.</span></div><div class="line" id="025305"><span class="nick" style="color:#389600"><a href="#025305" label="[02:53:05]">&lt;oriansj&gt;</a></span><span class="message">like, originally there were no structs and 5[a] was a reasonable thing to write</span></div><div class="line" id="025458"><span class="nick" style="color:#389600"><a href="#025458" label="[02:54:58]">&lt;oriansj&gt;</a></span><span class="message">and it started with a macros powerful enough to have C code that looks like Basic and a great deal of basic optimizations were explicitly defined away by default</span></div><div class="line" id="025610"><span class="nick" style="color:#389600"><a href="#025610" label="[02:56:10]">&lt;oriansj&gt;</a></span><span class="message">there is for, while and do; when just loop would have been enough, simpler to implement and more suitable for optimizations</span></div><div class="line" id="025845"><span class="nick" style="color:#389600"><a href="#025845" label="[02:58:45]">&lt;oriansj&gt;</a></span><span class="message">fall through case by default; weird variable shadowing rules and the lack of proper types out of the box (uint8_t, int16_t, etc)</span></div><div class="line" id="052819"><span class="nick" style="color:#6b8072"><a href="#052819" label="[05:28:19]">&lt;Googulator&gt;</a></span><span class="message">checking on my bare metal test systems, the kernel upgrade to 4.14 (and/or the replacement of the deblob script by a patch) had a pleasant side effect: Intel integrated GPUs now have a proper framebuffer console after kexec to Linux, no longer locked in 80x25 text mode</span></div><div class="line" id="054155"><span class="nick" style="color:#6b8072"><a href="#054155" label="[05:41:55]">&lt;Googulator&gt;</a></span><span class="message">fossy: are you OK with merging <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/438">https://github.com/fosslinux/live-bootstrap/pull/438</a>,  or is there anything you'd like to see addressed?</span></div><div class="line" id="054231"><span class="nick" style="color:#6b8072"><a href="#054231" label="[05:42:31]">&lt;Googulator&gt;</a></span><span class="message">it's a semi-prerequisite for the 4.14 upgrade - the actual base tarball isn't required, but the accompanying hygenie fixes are</span></div><div class="line" id="054314"><span class="nick" style="color:#6b8072"><a href="#054314" label="[05:43:14]">&lt;Googulator&gt;</a></span><span class="message">...seems like I'm too tired to spell hygiene correctly :)</span></div><div class="line" id="063102"><span class="nick" style="color:#2e2a4a"><a href="#063102" label="[06:31:02]">&lt;fossy&gt;</a></span><span class="message">Googulator: LGTM, i was just waiting for ci to run tbh :)</span></div><div class="line" id="131153"><span class="nick" style="color:#80b1d3"><a href="#131153" label="[13:11:53]">&lt;Exaga&gt;</a></span><span class="message">hello :)</span></div><div class="line" id="131317"><span class="nick" style="color:#80b1d3"><a href="#131317" label="[13:13:17]">&lt;Exaga&gt;</a></span><span class="message">can anybody help me with bootstrapping an initrd please? i'm very new to this and am finding some of the instructions on <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/">https://github.com/oriansj/mescc-tools/</a>  a little to advanced for me</span></div><div class="line" id="131713"><span class="nick" style="color:#80b1d3"><a href="#131713" label="[13:17:13]">&lt;Exaga&gt;</a></span><span class="message">and also the instructions on <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap">https://github.com/fosslinux/live-bootstrap</a>  too</span></div><div class="line" id="132228"><span class="nick" style="color:#8dd3c7"><a href="#132228" label="[13:22:28]">&lt;stikonas&gt;</a></span><span class="message">Exaga: hi</span></div><div class="line" id="132254"><span class="nick" style="color:#8dd3c7"><a href="#132254" label="[13:22:54]">&lt;stikonas&gt;</a></span><span class="message">Exaga: first of all where do you want to run bootstrap on?</span></div><div class="line" id="132307"><span class="nick" style="color:#8dd3c7"><a href="#132307" label="[13:23:07]">&lt;stikonas&gt;</a></span><span class="message">it does not work on all hardware</span></div><div class="line" id="132507"><span class="nick" style="color:#8dd3c7"><a href="#132507" label="[13:25:07]">&lt;stikonas&gt;</a></span><span class="message">and i would suggest starting with userspace only bootstrap before you move to baremetal</span></div><div class="line" id="132956"><span class="nick" style="color:#8dd3c7"><a href="#132956" label="[13:29:56]">&lt;stikonas&gt;</a></span><span class="message">to just run live-bootstrap on existing system you need to clone it recursively with git clone --recursive  <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap">https://github.com/fosslinux/live-bootstrap</a> </span></div><div class="line" id="133004"><span class="nick" style="color:#8dd3c7"><a href="#133004" label="[13:30:04]">&lt;stikonas&gt;</a></span><span class="message">then either</span></div><div class="line" id="133039"><span class="nick" style="color:#8dd3c7"><a href="#133039" label="[13:30:39]">&lt;stikonas&gt;</a></span><span class="message">./rootfs --chroot or ./rootfs --bwrap</span></div><div class="line" id="133048"><span class="nick" style="color:#8dd3c7"><a href="#133048" label="[13:30:48]">&lt;stikonas&gt;</a></span><span class="message">former requires root and latter uses linux namespaces</span></div><div class="line" id="133107"><span class="nick" style="color:#8dd3c7"><a href="#133107" label="[13:31:07]">&lt;stikonas&gt;</a></span><span class="message">this does not do anything with the kernel at all</span></div><div class="line" id="133122"><span class="nick" style="color:#8dd3c7"><a href="#133122" label="[13:31:22]">&lt;stikonas&gt;</a></span><span class="message">then you could try running the whole thing in qemu with ./rootfs --qemu</span></div><div class="line" id="133206"><span class="nick" style="color:#8dd3c7"><a href="#133206" label="[13:32:06]">&lt;stikonas&gt;</a></span><span class="message">that will prepare qemu image for bootstrapping on x86 BIOS VM and will build from tiny 200 byte seed to proper linux system</span></div><div class="line" id="133238"><span class="nick" style="color:#8dd3c7"><a href="#133238" label="[13:32:38]">&lt;stikonas&gt;</a></span><span class="message">as for baremetal bootstrap we have some support via ./rootfs --bare-metal</span></div><div class="line" id="133251"><span class="nick" style="color:#8dd3c7"><a href="#133251" label="[13:32:51]">&lt;stikonas&gt;</a></span><span class="message">but it right now it is limited to BIOS systems</span></div><div class="line" id="133258"><span class="nick" style="color:#8dd3c7"><a href="#133258" label="[13:32:58]">&lt;stikonas&gt;</a></span><span class="message">and again x86 only</span></div><div class="line" id="133827"><span class="nick" style="color:#80b1d3"><a href="#133827" label="[13:38:27]">&lt;Exaga&gt;</a></span><span class="message">stikonas: hello and thanks for assisting me</span></div><div class="line" id="133840"><span class="nick" style="color:#80b1d3"><a href="#133840" label="[13:38:40]">&lt;Exaga&gt;</a></span><span class="message">just so you know... i am very, very new to bootstrapping</span></div><div class="line" id="133847"><span class="nick" style="color:#8dd3c7"><a href="#133847" label="[13:38:47]">&lt;stikonas&gt;</a></span><span class="message">yeah, that's fine :)</span></div><div class="line" id="133854"><span class="nick" style="color:#8dd3c7"><a href="#133854" label="[13:38:54]">&lt;stikonas&gt;</a></span><span class="message">we have quite a lot of stuff</span></div><div class="line" id="133904"><span class="nick" style="color:#8dd3c7"><a href="#133904" label="[13:39:04]">&lt;stikonas&gt;</a></span><span class="message">so as usual, it might be a bit overwhelming at first</span></div><div class="line" id="133908"><span class="nick" style="color:#80b1d3"><a href="#133908" label="[13:39:08]">&lt;Exaga&gt;</a></span><span class="message">ok so to answer you... i have an initrd</span></div><div class="line" id="133943"><span class="nick" style="color:#80b1d3"><a href="#133943" label="[13:39:43]">&lt;Exaga&gt;</a></span><span class="message">and i'm looking to turn it into a minirootfs - if that makes sense</span></div><div class="line" id="133955"><span class="nick" style="color:#80b1d3"><a href="#133955" label="[13:39:55]">&lt;Exaga&gt;</a></span><span class="message">sorry if my terminology is not accurate</span></div><div class="line" id="134001"><span class="nick" style="color:#8dd3c7"><a href="#134001" label="[13:40:01]">&lt;stikonas&gt;</a></span><span class="message">but where does initrd comes from</span></div><div class="line" id="134005"><span class="nick" style="color:#8dd3c7"><a href="#134005" label="[13:40:05]">&lt;stikonas&gt;</a></span><span class="message">yeah, I'm still a bit confused</span></div><div class="line" id="134016"><span class="nick" style="color:#8dd3c7"><a href="#134016" label="[13:40:16]">&lt;stikonas&gt;</a></span><span class="message">but no worries either me or somebody else can try to help</span></div><div class="line" id="134038"><span class="nick" style="color:#80b1d3"><a href="#134038" label="[13:40:38]">&lt;Exaga&gt;</a></span><span class="message">the initrd is created from someone else's bash script</span></div><div class="line" id="134048"><span class="nick" style="color:#80b1d3"><a href="#134048" label="[13:40:48]">&lt;Exaga&gt;</a></span><span class="message">i am trying to teach myself how to do it myself</span></div><div class="line" id="134112"><span class="nick" style="color:#80b1d3"><a href="#134112" label="[13:41:12]">&lt;Exaga&gt;</a></span><span class="message">so the bash script builds the initrd</span></div><div class="line" id="134124"><span class="nick" style="color:#8dd3c7"><a href="#134124" label="[13:41:24]">&lt;stikonas&gt;</a></span><span class="message">well, initrd itself is just a small archive (similar to tar but is usually cpio)</span></div><div class="line" id="134127"><span class="nick" style="color:#80b1d3"><a href="#134127" label="[13:41:27]">&lt;Exaga&gt;</a></span><span class="message">but it is just bare installs of pkgs and nothing more</span></div><div class="line" id="134132"><span class="nick" style="color:#80b1d3"><a href="#134132" label="[13:41:32]">&lt;Exaga&gt;</a></span><span class="message">yes</span></div><div class="line" id="134202"><span class="nick" style="color:#80b1d3"><a href="#134202" label="[13:42:02]">&lt;Exaga&gt;</a></span><span class="message">this is cpio -di</span></div><div class="line" id="134222"><span class="nick" style="color:#80b1d3"><a href="#134222" label="[13:42:22]">&lt;Exaga&gt;</a></span><span class="message">do you want a link to this script so you may review it ?</span></div><div class="line" id="134252"><span class="nick" style="color:#8dd3c7"><a href="#134252" label="[13:42:52]">&lt;stikonas&gt;</a></span><span class="message">well, feel free to post it</span></div><div class="line" id="134256"><span class="nick" style="color:#80b1d3"><a href="#134256" label="[13:42:56]">&lt;Exaga&gt;</a></span><span class="message"> <a rel="nofollow" href="https://slackware.uk/slackwarearm/slackwarearm-devtools/minirootfs/scripts/miniroot.build">https://slackware.uk/slackwarearm/slackwarearm-devtools/minirootfs/scripts/miniroot.build</a> </span></div><div class="line" id="134330"><span class="nick" style="color:#80b1d3"><a href="#134330" label="[13:43:30]">&lt;Exaga&gt;</a></span><span class="message">and this is how i build my initrd, using this script. of course it has been modifed to suit my own settings</span></div><div class="line" id="134359"><span class="nick" style="color:#80b1d3"><a href="#134359" label="[13:43:59]">&lt;Exaga&gt;</a></span><span class="message">so, from there i found <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap">https://github.com/fosslinux/live-bootstrap</a>  and thought it might be very useful</span></div><div class="line" id="134409"><span class="nick" style="color:#8dd3c7"><a href="#134409" label="[13:44:09]">&lt;stikonas&gt;</a></span><span class="message">hmm, it's a bit different I think</span></div><div class="line" id="134410"><span class="nick" style="color:#80b1d3"><a href="#134410" label="[13:44:10]">&lt;Exaga&gt;</a></span><span class="message">this lead me to <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/">https://github.com/oriansj/mescc-tools/</a> </span></div><div class="line" id="134426"><span class="nick" style="color:#8dd3c7"><a href="#134426" label="[13:44:26]">&lt;stikonas&gt;</a></span><span class="message">what we are trying to do here</span></div><div class="line" id="134438"><span class="nick" style="color:#8dd3c7"><a href="#134438" label="[13:44:38]">&lt;stikonas&gt;</a></span><span class="message">is trying to start with almost no binary code</span></div><div class="line" id="134440"><span class="nick" style="color:#8dd3c7"><a href="#134440" label="[13:44:40]">&lt;stikonas&gt;</a></span><span class="message">just pure source</span></div><div class="line" id="134450"><span class="nick" style="color:#8dd3c7"><a href="#134450" label="[13:44:50]">&lt;stikonas&gt;</a></span><span class="message">and a really tiny binary</span></div><div class="line" id="134454"><span class="nick" style="color:#8dd3c7"><a href="#134454" label="[13:44:54]">&lt;stikonas&gt;</a></span><span class="message">and build up from there</span></div><div class="line" id="134505"><span class="nick" style="color:#80b1d3"><a href="#134505" label="[13:45:05]">&lt;Exaga&gt;</a></span><span class="message">i am trying to create a minirootfs that boots</span></div><div class="line" id="134519"><span class="nick" style="color:#8dd3c7"><a href="#134519" label="[13:45:19]">&lt;stikonas&gt;</a></span><span class="message">yeah, but that's a bit different</span></div><div class="line" id="134521"><span class="nick" style="color:#80b1d3"><a href="#134521" label="[13:45:21]">&lt;Exaga&gt;</a></span><span class="message">i have a kernel and an initrd but no clue how to put these together</span></div><div class="line" id="134530"><span class="nick" style="color:#8dd3c7"><a href="#134530" label="[13:45:30]">&lt;stikonas&gt;</a></span><span class="message">you need a bootloader I think</span></div><div class="line" id="134540"><span class="nick" style="color:#80b1d3"><a href="#134540" label="[13:45:40]">&lt;Exaga&gt;</a></span><span class="message">and i am so green it's unreal so please feel free to advise and instruct accordingly</span></div><div class="line" id="134544"><span class="nick" style="color:#8dd3c7"><a href="#134544" label="[13:45:44]">&lt;stikonas&gt;</a></span><span class="message">neither mescc-tools nor live-bootstrap would be too helpful here...</span></div><div class="line" id="134603"><span class="nick" style="color:#80b1d3"><a href="#134603" label="[13:46:03]">&lt;Exaga&gt;</a></span><span class="message">ok so now... familiar territory. i have a bootlader</span></div><div class="line" id="134610"><span class="nick" style="color:#80b1d3"><a href="#134610" label="[13:46:10]">&lt;Exaga&gt;</a></span><span class="message">i'm working on the raspberry pi</span></div><div class="line" id="134627"><span class="nick" style="color:#80b1d3"><a href="#134627" label="[13:46:27]">&lt;Exaga&gt;</a></span><span class="message">it's a closed source bootloader</span></div><div class="line" id="134629"><span class="nick" style="color:#8dd3c7"><a href="#134629" label="[13:46:29]">&lt;stikonas&gt;</a></span><span class="message">hmm, perhaps #raspberrypi channel exists</span></div><div class="line" id="134633"><span class="nick" style="color:#80b1d3"><a href="#134633" label="[13:46:33]">&lt;Exaga&gt;</a></span><span class="message">this is the easy part :)</span></div><div class="line" id="134703"><span class="nick" style="color:#80b1d3"><a href="#134703" label="[13:47:03]">&lt;Exaga&gt;</a></span><span class="message">yes there is the #raspberrypi channel</span></div><div class="line" id="134718"><span class="nick" style="color:#80b1d3"><a href="#134718" label="[13:47:18]">&lt;Exaga&gt;</a></span><span class="message">but this is nothing to do with raspberry pi OS</span></div><div class="line" id="134719"><span class="nick" style="color:#8dd3c7"><a href="#134719" label="[13:47:19]">&lt;stikonas&gt;</a></span><span class="message">I think people there would know more</span></div><div class="line" id="134729"><span class="nick" style="color:#8dd3c7"><a href="#134729" label="[13:47:29]">&lt;stikonas&gt;</a></span><span class="message">yeah, but still they'll know about how raspberry pi boots</span></div><div class="line" id="134733"><span class="nick" style="color:#80b1d3"><a href="#134733" label="[13:47:33]">&lt;Exaga&gt;</a></span><span class="message">i am using slackware aarch64 OS</span></div><div class="line" id="134813"><span class="nick" style="color:#80b1d3"><a href="#134813" label="[13:48:13]">&lt;Exaga&gt;</a></span><span class="message">and it's easy to load the kernel and initrd from them</span></div><div class="line" id="134830"><span class="nick" style="color:#8dd3c7"><a href="#134830" label="[13:48:30]">&lt;stikonas&gt;</a></span><span class="message">I dont' have raspberry pi myself, so a bit harder for me to help here...</span></div><div class="line" id="134835"><span class="nick" style="color:#80b1d3"><a href="#134835" label="[13:48:35]">&lt;Exaga&gt;</a></span><span class="message">but i'm knife and forking my way to doing it entirely myself</span></div><div class="line" id="134855"><span class="nick" style="color:#80b1d3"><a href="#134855" label="[13:48:55]">&lt;Exaga&gt;</a></span><span class="message">tbh stikonas i don't think the hardware or software is a concern</span></div><div class="line" id="134910"><span class="nick" style="color:#8dd3c7"><a href="#134910" label="[13:49:10]">&lt;stikonas&gt;</a></span><span class="message">well, generally, you just put whatever you want in initramfs</span></div><div class="line" id="134923"><span class="nick" style="color:#80b1d3"><a href="#134923" label="[13:49:23]">&lt;Exaga&gt;</a></span><span class="message">i'm interested in learning the processes involved in going from nothing to bootable minirootfs</span></div><div class="line" id="134934"><span class="nick" style="color:#80b1d3"><a href="#134934" label="[13:49:34]">&lt;Exaga&gt;</a></span><span class="message">yes,</span></div><div class="line" id="134958"><span class="nick" style="color:#8dd3c7"><a href="#134958" label="[13:49:58]">&lt;stikonas&gt;</a></span><span class="message">well, on arm you can't do it from nothing in any case right now</span></div><div class="line" id="135015"><span class="nick" style="color:#80b1d3"><a href="#135015" label="[13:50:15]">&lt;Exaga&gt;</a></span><span class="message">why is that?</span></div><div class="line" id="135016"><span class="nick" style="color:#8dd3c7"><a href="#135016" label="[13:50:16]">&lt;stikonas&gt;</a></span><span class="message">we have only finished x86 (not even x86_64)</span></div><div class="line" id="135022"><span class="nick" style="color:#80b1d3"><a href="#135022" label="[13:50:22]">&lt;Exaga&gt;</a></span><span class="message">ahh i see</span></div><div class="line" id="135027"><span class="nick" style="color:#8dd3c7"><a href="#135027" label="[13:50:27]">&lt;stikonas&gt;</a></span><span class="message">well, needs porting...</span></div><div class="line" id="135036"><span class="nick" style="color:#80b1d3"><a href="#135036" label="[13:50:36]">&lt;Exaga&gt;</a></span><span class="message">so i am in uncharted waters here then</span></div><div class="line" id="135038"><span class="nick" style="color:#8dd3c7"><a href="#135038" label="[13:50:38]">&lt;stikonas&gt;</a></span><span class="message">and the process is using lots of steps, some of them are old software</span></div><div class="line" id="135047"><span class="nick" style="color:#8dd3c7"><a href="#135047" label="[13:50:47]">&lt;stikonas&gt;</a></span><span class="message">yeah, if you want to start with nothing, then yes</span></div><div class="line" id="135054"><span class="nick" style="color:#8dd3c7"><a href="#135054" label="[13:50:54]">&lt;stikonas&gt;</a></span><span class="message">but if you have an existing linux system</span></div><div class="line" id="135055"><span class="nick" style="color:#80b1d3"><a href="#135055" label="[13:50:55]">&lt;Exaga&gt;</a></span><span class="message">that's a good thing where slackware is concerned</span></div><div class="line" id="135116"><span class="nick" style="color:#8dd3c7"><a href="#135116" label="[13:51:16]">&lt;stikonas&gt;</a></span><span class="message">then you just need to compile some binaries that you want to put in minirootfs</span></div><div class="line" id="135124"><span class="nick" style="color:#80b1d3"><a href="#135124" label="[13:51:24]">&lt;Exaga&gt;</a></span><span class="message">it is one of the few distros resisting systemd :D</span></div><div class="line" id="135149"><span class="nick" style="color:#80b1d3"><a href="#135149" label="[13:51:49]">&lt;Exaga&gt;</a></span><span class="message">ok binaries... which ones are we talkling about please ?</span></div><div class="line" id="135150"><span class="nick" style="color:#8dd3c7"><a href="#135150" label="[13:51:50]">&lt;stikonas&gt;</a></span><span class="message">then pack it that initamfs</span></div><div class="line" id="135157"><span class="nick" style="color:#8dd3c7"><a href="#135157" label="[13:51:57]">&lt;stikonas&gt;</a></span><span class="message">it's entirely up to you</span></div><div class="line" id="135202"><span class="nick" style="color:#8dd3c7"><a href="#135202" label="[13:52:02]">&lt;stikonas&gt;</a></span><span class="message">you can have just bash</span></div><div class="line" id="135209"><span class="nick" style="color:#80b1d3"><a href="#135209" label="[13:52:09]">&lt;Exaga&gt;</a></span><span class="message">:D</span></div><div class="line" id="135218"><span class="nick" style="color:#8dd3c7"><a href="#135218" label="[13:52:18]">&lt;stikonas&gt;</a></span><span class="message">but just bash won't let you do much...</span></div><div class="line" id="135237"><span class="nick" style="color:#80b1d3"><a href="#135237" label="[13:52:37]">&lt;Exaga&gt;</a></span><span class="message">stikonas: sorry for laughing but your knowledge and experience is too advanced for mine</span></div><div class="line" id="135255"><span class="nick" style="color:#80b1d3"><a href="#135255" label="[13:52:55]">&lt;Exaga&gt;</a></span><span class="message">this is the problem i come across often, because i really do know very little :D</span></div><div class="line" id="135256"><span class="nick" style="color:#8dd3c7"><a href="#135256" label="[13:52:56]">&lt;stikonas&gt;</a></span><span class="message">ok, maybe let's wait for somebody else here who can explain</span></div><div class="line" id="135307"><span class="nick" style="color:#8dd3c7"><a href="#135307" label="[13:53:07]">&lt;stikonas&gt;</a></span><span class="message">a bit better than me</span></div><div class="line" id="135416"><span class="nick" style="color:#80b1d3"><a href="#135416" label="[13:54:16]">&lt;Exaga&gt;</a></span><span class="message">i'm sure yours is quite appropriate and well founded, it's my problem in that i do not understand you fully. because i have so little knowledge and experience of this topic</span></div><div class="line" id="135444"><span class="nick" style="color:#80b1d3"><a href="#135444" label="[13:54:44]">&lt;Exaga&gt;</a></span><span class="message">so binaries such as bash, gawk, etc.</span></div><div class="line" id="135503"><span class="nick" style="color:#6d2462"><a href="#135503" label="[13:55:03]">&lt;mihi&gt;</a></span><span class="message">Exaga, my approach in learning (if you never did it): 1) Try to build static busybox and create a rootfs from it where you can chroot into it and the binaries work.</span></div><div class="line" id="135524"><span class="nick" style="color:#80b1d3"><a href="#135524" label="[13:55:24]">&lt;Exaga&gt;</a></span><span class="message">mihi: i have heard about busybox and have built the pkg and installed it</span></div><div class="line" id="135525"><span class="nick" style="color:#6d2462"><a href="#135525" label="[13:55:25]">&lt;mihi&gt;</a></span><span class="message">2) try to get the rootfs bootable (still with only static busybox in it)</span></div><div class="line" id="135547"><span class="nick" style="color:#6d2462"><a href="#135547" label="[13:55:47]">&lt;mihi&gt;</a></span><span class="message">Exaga, don't take the binary package, but get the source code and compil it yourself</span></div><div class="line" id="135550"><span class="nick" style="color:#80b1d3"><a href="#135550" label="[13:55:50]">&lt;Exaga&gt;</a></span><span class="message">i have looked at other initrootfs and tried to work out how they've done it</span></div><div class="line" id="135635"><span class="nick" style="color:#6d2462"><a href="#135635" label="[13:56:35]">&lt;mihi&gt;</a></span><span class="message">once you got that working, have a look at LFS (or PiLFS) which is a tutorial how to build your own compiler and system without resorting to tools like busybox</span></div><div class="line" id="135652"><span class="nick" style="color:#80b1d3"><a href="#135652" label="[13:56:52]">&lt;Exaga&gt;</a></span><span class="message">ok that sounds like a plan mihi - a static busybox in a chroot</span></div><div class="line" id="135757"><span class="nick" style="color:#80b1d3"><a href="#135757" label="[13:57:57]">&lt;Exaga&gt;</a></span><span class="message">it's like going somewhere in real life for the first time... and you don;t know how to get there and lose your way. that's basically where i am :D</span></div><div class="line" id="135757"><span class="nick" style="color:#8dd3c7"><a href="#135757" label="[13:57:57]">&lt;stikonas&gt;</a></span><span class="message">oh yeah, LFS has a good documentation</span></div><div class="line" id="135841"><span class="nick" style="color:#80b1d3"><a href="#135841" label="[13:58:41]">&lt;Exaga&gt;</a></span><span class="message">if i can learn the methods and ways of achieving success... this is what i am interested in undertaking</span></div><div class="line" id="144958"><span class="nick" style="color:#234e69"><a href="#144958" label="[14:49:58]">&lt;mid-kid&gt;</a></span><span class="message">Watching an &quot;emerge -e @system&quot; firing off without a hitch is oddly satisfying.</span></div><div class="line" id="145115"><span class="nick" style="color:#234e69"><a href="#145115" label="[14:51:15]">&lt;mid-kid&gt;</a></span><span class="message">I'll publish my instructions once it's done, though they're not great. I've kind of brute forced my way here.</span></div><div class="line" id="151653"><span class="nick" style="color:#6c3d55"><a href="#151653" label="[15:16:53]">&lt;Guest85&gt;</a></span><span class="message">Hi, init.img run qemu but does not continue from here ./kaem.x86</span></div><div class="line" id="151805"><span class="nick" style="color:#234e69"><a href="#151805" label="[15:18:05]">&lt;mid-kid&gt;</a></span><span class="message">That's odd</span></div><div class="line" id="151848"><span class="nick" style="color:#6c3d55"><a href="#151848" label="[15:18:48]">&lt;Guest85&gt;</a></span><span class="message">img create this command ./rootfs.py -b -a x86 --cores 4</span></div><div class="line" id="152200"><span class="nick" style="color:#234e69"><a href="#152200" label="[15:22:00]">&lt;mid-kid&gt;</a></span><span class="message">Why aren't you using ./rootfs.py -q?</span></div><div class="line" id="152219"><span class="nick" style="color:#234e69"><a href="#152219" label="[15:22:19]">&lt;mid-kid&gt;</a></span><span class="message">That one works for me.</span></div><div class="line" id="152241"><span class="nick" style="color:#234e69"><a href="#152241" label="[15:22:41]">&lt;mid-kid&gt;</a></span><span class="message">If you want to do it manually I recommend reading the python scripts to see what qemu options they use to boot.</span></div><div class="line" id="154247"><span class="nick" style="color:#6b8072"><a href="#154247" label="[15:42:47]">&lt;Googulator&gt;</a></span><span class="message">Guest85: -b is for bare-metal usage - it's possible to run a -b image in qemu, but you will have to manually pad it to the right size, because qemu has no option to expand the size of a raw disk; it will present a 256MB disk image as a 256MB disk to the guest OS</span></div><div class="line" id="154311"><span class="nick" style="color:#6b8072"><a href="#154311" label="[15:43:11]">&lt;Googulator&gt;</a></span><span class="message">unless you're actually running it on bare metal, of course</span></div><div class="line" id="154351"><span class="nick" style="color:#8dd3c7"><a href="#154351" label="[15:43:51]">&lt;stikonas&gt;</a></span><span class="message">Googulator: do we still support non builder-hex0 -b builds?</span></div><div class="line" id="154405"><span class="nick" style="color:#6b8072"><a href="#154405" label="[15:44:05]">&lt;Googulator&gt;</a></span><span class="message">we should, but I never tried</span></div><div class="line" id="154422"><span class="nick" style="color:#6b8072"><a href="#154422" label="[15:44:22]">&lt;Googulator&gt;</a></span><span class="message">&amp; IIRC it's rather complicated, possibly requiring 2 disks</span></div><div class="line" id="154429"><span class="nick" style="color:#6b8072"><a href="#154429" label="[15:44:29]">&lt;Googulator&gt;</a></span><span class="message">as in 2 physical disks</span></div><div class="line" id="154540"><span class="nick" style="color:#8dd3c7"><a href="#154540" label="[15:45:40]">&lt;stikonas&gt;</a></span><span class="message">oh, that's slightly annoying</span></div><div class="line" id="154554"><span class="nick" style="color:#8dd3c7"><a href="#154554" label="[15:45:54]">&lt;stikonas&gt;</a></span><span class="message">but with Linux perhaps it just works from USB drive</span></div><div class="line" id="154738"><span class="nick" style="color:#8dd3c7"><a href="#154738" label="[15:47:38]">&lt;stikonas&gt;</a></span><span class="message">perhaps I should try that for now...</span></div><div class="line" id="154802"><span class="nick" style="color:#8dd3c7"><a href="#154802" label="[15:48:02]">&lt;stikonas&gt;</a></span><span class="message">as UEFI bootstrap doesn't seems to be nowhere close to working</span></div><div class="line" id="155012"><span class="nick" style="color:#8dd3c7"><a href="#155012" label="[15:50:12]">&lt;stikonas&gt;</a></span><span class="message">(despite working far better than a year ago)</span></div><div class="line" id="155205"><span class="nick" style="color:#6b8072"><a href="#155205" label="[15:52:05]">&lt;Googulator&gt;</a></span><span class="message">hmm, looks like it doesn't exactly work atm</span></div><div class="line" id="155220"><span class="nick" style="color:#6b8072"><a href="#155220" label="[15:52:20]">&lt;Googulator&gt;</a></span><span class="message">&quot;Please:</span></div><div class="line" id="155220"><span class="nick" style="color:#6b8072"><a href="#155220" label="[15:52:20]">&lt;Googulator&gt;</a></span><span class="message">  1. Take baremetal-vmlinuz/disk/initramfs and your kernel, boot using this.</span></div><div class="line" id="155221"><span class="nick" style="color:#6b8072"><a href="#155221" label="[15:52:21]">&lt;Googulator&gt;</a></span><span class="message">  2. Take baremetal-vmlinuz/disk/disk.img and put this on a writable storage medium.&quot;</span></div><div class="line" id="155254"><span class="nick" style="color:#6b8072"><a href="#155254" label="[15:52:54]">&lt;Googulator&gt;</a></span><span class="message">baremetal-vmlinuz/disk/disk.img is actually baremetal-vmlinuz/disk.img, and baremetal-vmlinuz/disk/initramfs doesn't actually exist</span></div><div class="line" id="155344"><span class="nick" style="color:#8dd3c7"><a href="#155344" label="[15:53:44]">&lt;stikonas&gt;</a></span><span class="message">hmm, there is disk.img that is not in disk directory</span></div><div class="line" id="155419"><span class="nick" style="color:#8dd3c7"><a href="#155419" label="[15:54:19]">&lt;stikonas&gt;</a></span><span class="message">need to check rootfs.py to see what it contains...</span></div><div class="line" id="155811"><span class="nick" style="color:#8dd3c7"><a href="#155811" label="[15:58:11]">&lt;stikonas&gt;</a></span><span class="message">yeah, qemu mode with custom kernel also doesn't work</span></div><div class="line" id="155820"><span class="nick" style="color:#6b8072"><a href="#155820" label="[15:58:20]">&lt;Googulator&gt;</a></span><span class="message">I've changed that a while ago, because putting the image in the directory it's created from caused a rudimentary version of the image to be included in itself</span></div><div class="line" id="155840"><span class="nick" style="color:#6b8072"><a href="#155840" label="[15:58:40]">&lt;Googulator&gt;</a></span><span class="message">i.e. in kernel bootstrap mode, init.img ended up containing an incomplete init.img as a file</span></div><div class="line" id="160023"><span class="nick" style="color:#6b8072"><a href="#160023" label="[16:00:23]">&lt;Googulator&gt;</a></span><span class="message">seems like the reference to initramfs is just bogus - disk.img and your kernel is all you need</span></div><div class="line" id="160106"><span class="nick" style="color:#8dd3c7"><a href="#160106" label="[16:01:06]">&lt;stikonas&gt;</a></span><span class="message">but how would that work?</span></div><div class="line" id="160119"><span class="nick" style="color:#8dd3c7"><a href="#160119" label="[16:01:19]">&lt;stikonas&gt;</a></span><span class="message">I thought kernel needs initramfs with all those seeds and sources</span></div><div class="line" id="160132"><span class="nick" style="color:#6b8072"><a href="#160132" label="[16:01:32]">&lt;Googulator&gt;</a></span><span class="message">no, that's in disk.img</span></div><div class="line" id="160141"><span class="nick" style="color:#8dd3c7"><a href="#160141" label="[16:01:41]">&lt;stikonas&gt;</a></span><span class="message">oh, so it should mount disk.img on boot</span></div><div class="line" id="160143"><span class="nick" style="color:#6b8072"><a href="#160143" label="[16:01:43]">&lt;Googulator&gt;</a></span><span class="message">the kernel should have everything needed to access the disk</span></div><div class="line" id="160258"><span class="nick" style="color:#6b8072"><a href="#160258" label="[16:02:58]">&lt;Googulator&gt;</a></span><span class="message">on UEFI, put the kernel on a fat32 flash drive, and boot it via UEFI shell or whatever UI your firmware provides, passing the correct root= parameter</span></div><div class="line" id="160306"><span class="nick" style="color:#6b8072"><a href="#160306" label="[16:03:06]">&lt;Googulator&gt;</a></span><span class="message">on BIOS... well, it's a bit harder</span></div><div class="line" id="160443"><span class="nick" style="color:#6b8072"><a href="#160443" label="[16:04:43]">&lt;Googulator&gt;</a></span><span class="message">qemu mode uses &quot;console=ttyS0 root=/dev/sda1 rootfstype=ext3 init=/init rw&quot; as the kernel command line</span></div><div class="line" id="160513"><span class="nick" style="color:#6b8072"><a href="#160513" label="[16:05:13]">&lt;Googulator&gt;</a></span><span class="message">on UEFI bare metal, you'd therefore use &quot;consoleblank=0 root=/dev/sda1 rootfstype=ext3 init=/init rw&quot;, adjusting sda1 as needed</span></div><div class="line" id="160725"><span class="nick" style="color:#8dd3c7"><a href="#160725" label="[16:07:25]">&lt;stikonas&gt;</a></span><span class="message">yaeh, I cna try that a bit later...</span></div><div class="line" id="160728"><span class="nick" style="color:#8dd3c7"><a href="#160728" label="[16:07:28]">&lt;stikonas&gt;</a></span><span class="message">thanks</span></div><div class="line" id="174434"><span class="nick" style="color:#8dd3c7"><a href="#174434" label="[17:44:34]">&lt;stikonas&gt;</a></span><span class="message">oh, most likely tcc built binaries don't work because posix-runner does not yet handle elf segments</span></div><div class="line" id="174457"><span class="nick" style="color:#8dd3c7"><a href="#174457" label="[17:44:57]">&lt;stikonas&gt;</a></span><span class="message">we need to load .data segment to the appropriate offset</span></div><div class="line" id="175238"><span class="nick" style="color:#8dd3c7"><a href="#175238" label="[17:52:38]">&lt;stikonas&gt;</a></span><span class="message">and we need to allocate one big continuous block of memory to hold all segments</span></div><div class="line" id="175540"><span class="nick" style="color:#8dd3c7"><a href="#175540" label="[17:55:40]">&lt;stikonas&gt;</a></span><span class="message">and then hope that there are only relative uses</span></div><div class="line" id="175547"><span class="nick" style="color:#8dd3c7"><a href="#175547" label="[17:55:47]">&lt;stikonas&gt;</a></span><span class="message">or set up proper paging...</span></div><div class="line" id="180547"><span class="nick" style="color:#234e69"><a href="#180547" label="[18:05:47]">&lt;mid-kid&gt;</a></span><span class="message"> <a rel="nofollow" href="https://mid-kid.root.sx/git/mid-kid/bootstrap/src/branch/master/gentoo-2024/gentoo.txt">https://mid-kid.root.sx/git/mid-kid/bootstrap/src/branch/master/gentoo-2024/gentoo.txt</a> </span></div><div class="line" id="180550"><span class="nick" style="color:#234e69"><a href="#180550" label="[18:05:50]">&lt;mid-kid&gt;</a></span><span class="message">Alright there we go</span></div><div class="line" id="180648"><span class="nick" style="color:#234e69"><a href="#180648" label="[18:06:48]">&lt;mid-kid&gt;</a></span><span class="message">There might be some steps that seem to fail or have to be ran multiple times, idk</span></div><div class="line" id="180654"><span class="nick" style="color:#234e69"><a href="#180654" label="[18:06:54]">&lt;mid-kid&gt;</a></span><span class="message">If I do this again I would try a different approach</span></div><div class="line" id="180818"><span class="nick" style="color:#234e69"><a href="#180818" label="[18:08:18]">&lt;mid-kid&gt;</a></span><span class="message">I kinda used an oversized hammer to solve the multilib problem</span></div><div class="line" id="180829"><span class="nick" style="color:#234e69"><a href="#180829" label="[18:08:29]">&lt;mid-kid&gt;</a></span><span class="message">I think sam_ was interested, maybe he can laugh at me and tell me how to do better.</span></div><div class="line" id="181636"><span class="nick" style="color:#6b8072"><a href="#181636" label="[18:16:36]">&lt;Googulator&gt;</a></span><span class="message">wait, did -q --cores 8 _just work_ for you?</span></div><div class="line" id="182315"><span class="nick" style="color:#234e69"><a href="#182315" label="[18:23:15]">&lt;mid-kid&gt;</a></span><span class="message">...yeah?</span></div><div class="line" id="182616"><span class="nick" style="color:#6b8072"><a href="#182616" label="[18:26:16]">&lt;Googulator&gt;</a></span><span class="message">I guess the e820 patches must have helped there</span></div><div class="line" id="182654"><span class="nick" style="color:#6b8072"><a href="#182654" label="[18:26:54]">&lt;Googulator&gt;</a></span><span class="message">before that, it was going OOM with --cores &gt; 3 unless you used swap</span></div><div class="line" id="182722"><span class="nick" style="color:#6b8072"><a href="#182722" label="[18:27:22]">&lt;Googulator&gt;</a></span><span class="message">of course, the kernel now has access to 4GiB RAM instead of just under 3GiB</span></div><div class="line" id="182730"><span class="nick" style="color:#234e69"><a href="#182730" label="[18:27:30]">&lt;mid-kid&gt;</a></span><span class="message">ah</span></div><div class="line" id="182735"><span class="nick" style="color:#6b8072"><a href="#182735" label="[18:27:35]">&lt;Googulator&gt;</a></span><span class="message">(more if you use the -qr option to add more)</span></div><div class="line" id="182757"><span class="nick" style="color:#6b8072"><a href="#182757" label="[18:27:57]">&lt;Googulator&gt;</a></span><span class="message">that was actually the reason why I added swap support in the first place</span></div><div class="line" id="182845"><span class="nick" style="color:#234e69"><a href="#182845" label="[18:28:45]">&lt;mid-kid&gt;</a></span><span class="message">I don't remember the cores value I used,maybe it was 4</span></div><div class="line" id="182903"><span class="nick" style="color:#6b8072"><a href="#182903" label="[18:29:03]">&lt;Googulator&gt;</a></span><span class="message">so I could make use of my 4 cores in my bare metal test rig and 8 in qemu on my main machine</span></div><div class="line" id="182915"><span class="nick" style="color:#6b8072"><a href="#182915" label="[18:29:15]">&lt;Googulator&gt;</a></span><span class="message">well, the script says 8</span></div><div class="line" id="183151"><span class="nick" style="color:#234e69"><a href="#183151" label="[18:31:51]">&lt;mid-kid&gt;</a></span><span class="message">true but I wrote that part retroactively</span></div><div class="line" id="183344"><span class="nick" style="color:#6b8072"><a href="#183344" label="[18:33:44]">&lt;Googulator&gt;</a></span><span class="message">oh OK</span></div><div class="line" id="183356"><span class="nick" style="color:#6b8072"><a href="#183356" label="[18:33:56]">&lt;Googulator&gt;</a></span><span class="message">that may not Just Work(TM) then</span></div><div class="line" id="183407"><span class="nick" style="color:#6b8072"><a href="#183407" label="[18:34:07]">&lt;Googulator&gt;</a></span><span class="message">unless you also pass -qr 8192 or use swap</span></div><div class="line" id="185217"><span class="nick" style="color:#d9d9d9"><a href="#185217" label="[18:52:17]">&lt;sam_&gt;</a></span><span class="message">mid-kid: looks not bad at all</span></div><div class="line" id="185225"><span class="nick" style="color:#d9d9d9"><a href="#185225" label="[18:52:25]">&lt;sam_&gt;</a></span><span class="message">nice job</span></div><div class="line" id="201555"><span class="nick" style="color:#bc80bd"><a href="#201555" label="[20:15:55]">&lt;rickmasters&gt;</a></span><span class="message">Googulator: On a curl failure of openssl-1.1.1l, I was hoping for bash interactive, but got a kernel panic &quot;Attempted to kill init!&quot;</span></div><div class="line" id="201710"><span class="nick" style="color:#bc80bd"><a href="#201710" label="[20:17:10]">&lt;rickmasters&gt;</a></span><span class="message">Googulator: I'm wondering if the bash trap is working of if that error is outside scope?</span></div><div class="line" id="202648"><span class="nick" style="color:#bc80bd"><a href="#202648" label="[20:26:48]">&lt;rickmasters&gt;</a></span><span class="message">Hmm, it looks like the trap is installed in /init for Linux but maybe its lost when bash 5 is launched? I'll try setting it again...</span></div><div class="line" id="203555"><span class="nick" style="color:#bc80bd"><a href="#203555" label="[20:35:55]">&lt;rickmasters&gt;</a></span><span class="message">I don't think I was getting bash interactive at the end of a build either.</span></div><div class="line" id="203730"><span class="nick" style="color:#bc80bd"><a href="#203730" label="[20:37:30]">&lt;rickmasters&gt;</a></span><span class="message">I'll try adding an EXIT trap in open_console.sh</span></div><div class="line" id="210412"><span class="nick" style="color:#bc80bd"><a href="#210412" label="[21:04:12]">&lt;rickmasters&gt;</a></span><span class="message">fossy: would you mind testing a potential fix for your bare metal output issue?</span></div><div class="line" id="210525"><span class="nick" style="color:#bc80bd"><a href="#210525" label="[21:05:25]">&lt;rickmasters&gt;</a></span><span class="message">fossy: Before generating image, go to builder-hex0/ and run git fetch; git checkout 5c8c8a8991cb8b4063ae7a02c76235a8ce38af83</span></div><div class="line" id="210604"><span class="nick" style="color:#bc80bd"><a href="#210604" label="[21:06:04]">&lt;rickmasters&gt;</a></span><span class="message">fossy: please let me know if that fixes it.</span></div><div class="line" id="225101"><span class="nick" style="color:#3c5b35"><a href="#225101" label="[22:51:01]">&lt;GoogulatorMobile&gt;</a></span><span class="message">rickmasters: weird, I did get a trap prompt from a curl failure just yesterday</span></div><div class="line" id="225230"><span class="nick" style="color:#3c5b35"><a href="#225230" label="[22:52:30]">&lt;GoogulatorMobile&gt;</a></span><span class="message">It was for gcc13</span></div><div class="line" id="225247"><span class="nick" style="color:#3c5b35"><a href="#225247" label="[22:52:47]">&lt;GoogulatorMobile&gt;</a></span><span class="message">So certainly using bash 5.2 there</span></div><div class="line" id="225338"><span class="nick" style="color:#bc80bd"><a href="#225338" label="[22:53:38]">&lt;rickmasters&gt;</a></span><span class="message">Interesting. What mode where you running?</span></div><div class="line" id="233524"><span class="nick" style="color:#bc80bd"><a href="#233524" label="[23:35:24]">&lt;rickmasters&gt;</a></span><span class="message">I just got a one time download checksum error for gnulib-8e128e.tar.gz</span></div><div class="line" id="233545"><span class="nick" style="color:#bc80bd"><a href="#233545" label="[23:35:45]">&lt;rickmasters&gt;</a></span><span class="message">I think we talked about this before.</span></div><div class="line" id="234201"><span class="nick" style="color:#bc80bd"><a href="#234201" label="[23:42:01]">&lt;rickmasters&gt;</a></span><span class="message">The bad gnulib-8e128e.tar.gz has an extra 14MB of garbage on the end.</span></div><br /></div></body></html>