<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2019-12-26.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000142"><span class="nick" style="color:#389600"><a href="#000142" label="[00:01:42]">&lt;mid-kid&gt;</a></span><span class="message">Okay, I think I've figured it out. Mes' execvp tries to search the file in $PATH because the path doesnt start with a leading '/'.</span></div><div class="line" id="000219"><span class="nick" style="color:#389600"><a href="#000219" label="[00:02:19]">&lt;mid-kid&gt;</a></span><span class="message">Making a makefile that tries to run a file with a shebang through an absolute path to the file seems to work. I'll try patching mes real quick.</span></div><div class="line" id="000814"><span class="nick" style="color:#389600"><a href="#000814" label="[00:08:14]">&lt;mid-kid&gt;</a></span><span class="message">Yep, that worked: <a rel="nofollow" href="https://pastebin.com/raw/jDi7j29Y">https://pastebin.com/raw/jDi7j29Y</a> </span></div><div class="line" id="000834"><span class="nick" style="color:#389600"><a href="#000834" label="[00:08:34]">&lt;mid-kid&gt;</a></span><span class="message">Probably not the &quot;proper&quot; way to do this but it seems to work now.</span></div><div class="line" id="001014"><span class="nick" style="color:#389600"><a href="#001014" label="[00:10:14]">&lt;mid-kid&gt;</a></span><span class="message">Now I can build gcc-core-mesboot :)</span></div><div class="line" id="003121"><span class="nick" style="color:#8dd3c7"><a href="#003121" label="[00:31:21]">&lt;oriansj&gt;</a></span><span class="message">mid-kid: well the correct way to fix it would be to fix lib/mes/search-path.c's search_path but that would work as a work around</span></div><div class="line" id="014044"><span class="nick" style="color:#6b8072"><a href="#014044" label="[01:40:44]">&lt;xentrac&gt;</a></span><span class="message">oriansj: a cognitive preload requirement?</span></div><div class="line" id="014136"><span class="nick" style="color:#6b8072"><a href="#014136" label="[01:41:36]">&lt;xentrac&gt;</a></span><span class="message">two languages with very different philosophies from Scheme are Perl and C</span></div><div class="line" id="014145"><span class="nick" style="color:#6b8072"><a href="#014145" label="[01:41:45]">&lt;xentrac&gt;</a></span><span class="message">both were considerably more successful for a long time</span></div><div class="line" id="014315"><span class="nick" style="color:#6b8072"><a href="#014315" label="[01:43:15]">&lt;xentrac&gt;</a></span><span class="message">I think this is largely a result of their being more practical; Scheme was conceived as an exploration of the fundamentals of programming, while C was conceived as a more practical alternative to assembly</span></div><div class="line" id="014317"><span class="nick" style="color:#8dd3c7"><a href="#014317" label="[01:43:17]">&lt;oriansj&gt;</a></span><span class="message">xentrac: are</span></div><div class="line" id="014332"><span class="nick" style="color:#6b8072"><a href="#014332" label="[01:43:32]">&lt;xentrac&gt;</a></span><span class="message">I think probably Perl is less successful than Scheme right now</span></div><div class="line" id="014400"><span class="nick" style="color:#8dd3c7"><a href="#014400" label="[01:44:00]">&lt;oriansj&gt;</a></span><span class="message">both are considerably more successful than scheme if you look at metrics such as number of lines of code used in production, etc</span></div><div class="line" id="014456"><span class="nick" style="color:#8dd3c7"><a href="#014456" label="[01:44:56]">&lt;oriansj&gt;</a></span><span class="message">number of active developers is another critical metric</span></div><div class="line" id="014524"><span class="nick" style="color:#6b8072"><a href="#014524" label="[01:45:24]">&lt;xentrac&gt;</a></span><span class="message">well, Perl does have a lot of lines of code still used in production</span></div><div class="line" id="014605"><span class="nick" style="color:#6b8072"><a href="#014605" label="[01:46:05]">&lt;xentrac&gt;</a></span><span class="message">not sure it has that much new</span></div><div class="line" id="014624"><span class="nick" style="color:#6b8072"><a href="#014624" label="[01:46:24]">&lt;xentrac&gt;</a></span><span class="message">PHP has kind of taken over that area --- a programming language by and for non-programmers</span></div><div class="line" id="014627"><span class="nick" style="color:#6b8072"><a href="#014627" label="[01:46:27]">&lt;xentrac&gt;</a></span><span class="message">what do you mean by &quot;preload&quot;?</span></div><div class="line" id="014821"><span class="nick" style="color:#8dd3c7"><a href="#014821" label="[01:48:21]">&lt;oriansj&gt;</a></span><span class="message">xentrac: I mean by preload as in the amount of the language you need to know before you can write a useful program.</span></div><div class="line" id="015104"><span class="nick" style="color:#8dd3c7"><a href="#015104" label="[01:51:04]">&lt;oriansj&gt;</a></span><span class="message">well the only github metric I could find on Scheme popularity was from 2010 (so the numbers are probably wrong) <a rel="nofollow" href="https://www.r-bloggers.com/github-stats-on-programming-languages/">https://www.r-bloggers.com/github-stats-on-programming-languages/</a> </span></div><div class="line" id="015131"><span class="nick" style="color:#6b8072"><a href="#015131" label="[01:51:31]">&lt;xentrac&gt;</a></span><span class="message">I think Racket is more popular now than in 2010</span></div><div class="line" id="015228"><span class="nick" style="color:#6b8072"><a href="#015228" label="[01:52:28]">&lt;xentrac&gt;</a></span><span class="message">I don't think you need to know more to write a useful Scheme program than to write a useful C program; rather the contrary actually</span></div><div class="line" id="015257"><span class="nick" style="color:#8dd3c7"><a href="#015257" label="[01:52:57]">&lt;oriansj&gt;</a></span><span class="message">and here is what I found from 2018 <a rel="nofollow" href="https://github.com/benfred/github-analysis">https://github.com/benfred/github-analysis</a> </span></div><div class="line" id="015334"><span class="nick" style="color:#6b8072"><a href="#015334" label="[01:53:34]">&lt;xentrac&gt;</a></span><span class="message">but I do think C syntax is more readable, and the basic concepts are more popular, so more people know them ahead of time</span></div><div class="line" id="015400"><span class="nick" style="color:#6b8072"><a href="#015400" label="[01:54:00]">&lt;xentrac&gt;</a></span><span class="message">like, to write useful C programs knowing Pascal or Fortran ahead of time, the amount you need to learn is very small indeed</span></div><div class="line" id="015521"><span class="nick" style="color:#6b8072"><a href="#015521" label="[01:55:21]">&lt;xentrac&gt;</a></span><span class="message">there are some things that are a lot easier to solve with the Scheme way of thinking though</span></div><div class="line" id="015803"><span class="nick" style="color:#8dd3c7"><a href="#015803" label="[01:58:03]">&lt;oriansj&gt;</a></span><span class="message">xentrac: true; although C generally has better introduction material readily available.</span></div><div class="line" id="015855"><span class="nick" style="color:#8dd3c7"><a href="#015855" label="[01:58:55]">&lt;oriansj&gt;</a></span><span class="message">aka, searching for how to do things in scheme tends to bring up dead-ends far more than successes</span></div><div class="line" id="015912"><span class="nick" style="color:#6b8072"><a href="#015912" label="[01:59:12]">&lt;xentrac&gt;</a></span><span class="message">in 1979?</span></div><div class="line" id="020021"><span class="nick" style="color:#6b8072"><a href="#020021" label="[02:00:21]">&lt;xentrac&gt;</a></span><span class="message">there's better introductory material available because C has been more popular since the languages' births circa 1972 and 1976 I think</span></div><div class="line" id="020044"><span class="nick" style="color:#8dd3c7"><a href="#020044" label="[02:00:44]">&lt;oriansj&gt;</a></span><span class="message">xentrac: in the eyes of beginners not experienced programmers</span></div><div class="line" id="020053"><span class="nick" style="color:#6b8072"><a href="#020053" label="[02:00:53]">&lt;xentrac&gt;</a></span><span class="message">initially the introductory material available was just that produced by the relevant groups</span></div><div class="line" id="020112"><span class="nick" style="color:#6b8072"><a href="#020112" label="[02:01:12]">&lt;xentrac&gt;</a></span><span class="message">well, I suppose K&amp;R is aimed at beginners, while the LtU papers are very much not</span></div><div class="line" id="020153"><span class="nick" style="color:#8dd3c7"><a href="#020153" label="[02:01:53]">&lt;oriansj&gt;</a></span><span class="message">even haskell has: Learn You a Haskell for Great Good</span></div><div class="line" id="020156"><span class="nick" style="color:#6b8072"><a href="#020156" label="[02:01:56]">&lt;xentrac&gt;</a></span><span class="message">but I think the crucial advantage was in C's adoption by experienced programmers, people like the BDS C guy</span></div><div class="line" id="020245"><span class="nick" style="color:#6b8072"><a href="#020245" label="[02:02:45]">&lt;xentrac&gt;</a></span><span class="message">C, being aimed at practicality, was useful on CP/M, while Scheme was not</span></div><div class="line" id="020314"><span class="nick" style="color:#8dd3c7"><a href="#020314" label="[02:03:14]">&lt;oriansj&gt;</a></span><span class="message">I'd argue its crucial advantage was its general availability of both good implementations but also good training material</span></div><div class="line" id="020314"><span class="nick" style="color:#6b8072"><a href="#020314" label="[02:03:14]">&lt;xentrac&gt;</a></span><span class="message">you could write a text editor in C in an afternoon; we've all done it</span></div><div class="line" id="020336"><span class="nick" style="color:#6b8072"><a href="#020336" label="[02:03:36]">&lt;xentrac&gt;</a></span><span class="message">if you did that in Scheme it wouldn't run reliably on a Z80</span></div><div class="line" id="020349"><span class="nick" style="color:#8dd3c7"><a href="#020349" label="[02:03:49]">&lt;oriansj&gt;</a></span><span class="message">but one could write zork</span></div><div class="line" id="020406"><span class="nick" style="color:#6b8072"><a href="#020406" label="[02:04:06]">&lt;xentrac&gt;</a></span><span class="message">zork got rewritten for the z-machine to run on 8-bit computers</span></div><div class="line" id="020421"><span class="nick" style="color:#6b8072"><a href="#020421" label="[02:04:21]">&lt;xentrac&gt;</a></span><span class="message">8-bit zork was not scheme</span></div><div class="line" id="020431"><span class="nick" style="color:#6b8072"><a href="#020431" label="[02:04:31]">&lt;xentrac&gt;</a></span><span class="message">but it was the kind of thing that scheme could enable you to imagine</span></div><div class="line" id="020437"><span class="nick" style="color:#6b8072"><a href="#020437" label="[02:04:37]">&lt;xentrac&gt;</a></span><span class="message">I agree that those were crucial advantages</span></div><div class="line" id="020437"><span class="nick" style="color:#8dd3c7"><a href="#020437" label="[02:04:37]">&lt;oriansj&gt;</a></span><span class="message">zork was compiled scheme</span></div><div class="line" id="020449"><span class="nick" style="color:#8dd3c7"><a href="#020449" label="[02:04:49]">&lt;oriansj&gt;</a></span><span class="message">lisp to be exact</span></div><div class="line" id="020449"><span class="nick" style="color:#6b8072"><a href="#020449" label="[02:04:49]">&lt;xentrac&gt;</a></span><span class="message">no, fundamentally not</span></div><div class="line" id="020452"><span class="nick" style="color:#6b8072"><a href="#020452" label="[02:04:52]">&lt;xentrac&gt;</a></span><span class="message">very far from it</span></div><div class="line" id="020505"><span class="nick" style="color:#6b8072"><a href="#020505" label="[02:05:05]">&lt;xentrac&gt;</a></span><span class="message">there was a zork in lisp, yes</span></div><div class="line" id="020511"><span class="nick" style="color:#8dd3c7"><a href="#020511" label="[02:05:11]">&lt;oriansj&gt;</a></span><span class="message">xentrac: I have a Jason Scott Interview that proves otherwise</span></div><div class="line" id="020527"><span class="nick" style="color:#6b8072"><a href="#020527" label="[02:05:27]">&lt;xentrac&gt;</a></span><span class="message">jason scott didn't write zork</span></div><div class="line" id="020534"><span class="nick" style="color:#8dd3c7"><a href="#020534" label="[02:05:34]">&lt;oriansj&gt;</a></span><span class="message">correct</span></div><div class="line" id="020538"><span class="nick" style="color:#6b8072"><a href="#020538" label="[02:05:38]">&lt;xentrac&gt;</a></span><span class="message">or even write an emulator for the z-machine</span></div><div class="line" id="020601"><span class="nick" style="color:#8dd3c7"><a href="#020601" label="[02:06:01]">&lt;oriansj&gt;</a></span><span class="message">but he interviewed the person who wrote the zork version for the PDP-11 which became the basis of zork for the personal computer</span></div><div class="line" id="020618"><span class="nick" style="color:#6b8072"><a href="#020618" label="[02:06:18]">&lt;xentrac&gt;</a></span><span class="message">&quot;basis of&quot; is a very fuzzy term</span></div><div class="line" id="020630"><span class="nick" style="color:#6b8072"><a href="#020630" label="[02:06:30]">&lt;xentrac&gt;</a></span><span class="message">the z-machine has a very different worldview from Scheme or Lisp</span></div><div class="line" id="020658"><span class="nick" style="color:#6b8072"><a href="#020658" label="[02:06:58]">&lt;xentrac&gt;</a></span><span class="message">specifically, it's designed in such a way as to have no implicit memory allocation</span></div><div class="line" id="020659"><span class="nick" style="color:#8dd3c7"><a href="#020659" label="[02:06:59]">&lt;oriansj&gt;</a></span><span class="message">xentrac: z-machine is just a sweet-16 way of dealing with bytecode</span></div><div class="line" id="020703"><span class="nick" style="color:#6b8072"><a href="#020703" label="[02:07:03]">&lt;xentrac&gt;</a></span><span class="message">actually no run-time memory allocation at all</span></div><div class="line" id="020736"><span class="nick" style="color:#8dd3c7"><a href="#020736" label="[02:07:36]">&lt;oriansj&gt;</a></span><span class="message">the byte-code itself is compiled from sources</span></div><div class="line" id="020739"><span class="nick" style="color:#6b8072"><a href="#020739" label="[02:07:39]">&lt;xentrac&gt;</a></span><span class="message">that is, not only doesn't it have a garbage collector, it doesn't even have reference counting or malloc/free</span></div><div class="line" id="020839"><span class="nick" style="color:#6b8072"><a href="#020839" label="[02:08:39]">&lt;xentrac&gt;</a></span><span class="message">much less closures</span></div><div class="line" id="020916"><span class="nick" style="color:#8dd3c7"><a href="#020916" label="[02:09:16]">&lt;oriansj&gt;</a></span><span class="message">xentrac: compiled Lisps don't have to require those things</span></div><div class="line" id="020939"><span class="nick" style="color:#6b8072"><a href="#020939" label="[02:09:39]">&lt;xentrac&gt;</a></span><span class="message">it didn't have dynamic typing</span></div><div class="line" id="021006"><span class="nick" style="color:#8dd3c7"><a href="#021006" label="[02:10:06]">&lt;oriansj&gt;</a></span><span class="message">think of lisp code running though the eyes of a Fortran programmer</span></div><div class="line" id="021007"><span class="nick" style="color:#6b8072"><a href="#021007" label="[02:10:07]">&lt;xentrac&gt;</a></span><span class="message">if you can't use those things, what you're writing isn't Lisp, regardless of whether its syntax is written in S-expressions or not</span></div><div class="line" id="021036"><span class="nick" style="color:#6b8072"><a href="#021036" label="[02:10:36]">&lt;xentrac&gt;</a></span><span class="message">(and I don't know what the Infocom high-level language looked like; I think it's been lost)</span></div><div class="line" id="021127"><span class="nick" style="color:#8dd3c7"><a href="#021127" label="[02:11:27]">&lt;oriansj&gt;</a></span><span class="message">xentrac: it was a Lisp dialect called Model description language</span></div><div class="line" id="021137"><span class="nick" style="color:#80b1d3"><a href="#021137" label="[02:11:37]">&lt;dddddd&gt;</a></span><span class="message">It's ZIL, and the sources of the games are available.</span></div><div class="line" id="021138"><span class="nick" style="color:#6b8072"><a href="#021138" label="[02:11:38]">&lt;xentrac&gt;</a></span><span class="message">it's not a Lisp dialect :)</span></div><div class="line" id="021242"><span class="nick" style="color:#8dd3c7"><a href="#021242" label="[02:12:42]">&lt;oriansj&gt;</a></span><span class="message">thank you for reminding me dddddd</span></div><div class="line" id="021249"><span class="nick" style="color:#8dd3c7"><a href="#021249" label="[02:12:49]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/historicalsource/zork1">https://github.com/historicalsource/zork1</a> </span></div><div class="line" id="021301"><span class="nick" style="color:#6b8072"><a href="#021301" label="[02:13:01]">&lt;xentrac&gt;</a></span><span class="message">dddddd: nice, thanks!</span></div><div class="line" id="021350"><span class="nick" style="color:#8dd3c7"><a href="#021350" label="[02:13:50]">&lt;oriansj&gt;</a></span><span class="message">it even includes old Lisp reader macros</span></div><div class="line" id="021448"><span class="nick" style="color:#6b8072"><a href="#021448" label="[02:14:48]">&lt;xentrac&gt;</a></span><span class="message">I think the Z-machine is super interesting because of the way it provides flexible data structures without any run-time memory allocation</span></div><div class="line" id="021517"><span class="nick" style="color:#6b8072"><a href="#021517" label="[02:15:17]">&lt;xentrac&gt;</a></span><span class="message">it's profoundly different from both the Lisp model and the C model</span></div><div class="line" id="021545"><span class="nick" style="color:#80b1d3"><a href="#021545" label="[02:15:45]">&lt;dddddd&gt;</a></span><span class="message">My pleasure. I'm quite a bit into IF (;</span></div><div class="line" id="021557"><span class="nick" style="color:#8dd3c7"><a href="#021557" label="[02:15:57]">&lt;oriansj&gt;</a></span><span class="message">and I found the interview: <a rel="nofollow" href="https://archive.org/details/GETLAMP-Supnik">https://archive.org/details/GETLAMP-Supnik</a> </span></div><div class="line" id="021602"><span class="nick" style="color:#6b8072"><a href="#021602" label="[02:16:02]">&lt;xentrac&gt;</a></span><span class="message">how do you feel about Inform-7?</span></div><div class="line" id="021651"><span class="nick" style="color:#8dd3c7"><a href="#021651" label="[02:16:51]">&lt;oriansj&gt;</a></span><span class="message">He is the guy behind getting old code running agai</span></div><div class="line" id="021944"><span class="nick" style="color:#6b8072"><a href="#021944" label="[02:19:44]">&lt;xentrac&gt;</a></span><span class="message">who, Bob?</span></div><div class="line" id="021951"><span class="nick" style="color:#8dd3c7"><a href="#021951" label="[02:19:51]">&lt;oriansj&gt;</a></span><span class="message">yep</span></div><div class="line" id="022129"><span class="nick" style="color:#6b8072"><a href="#022129" label="[02:21:29]">&lt;xentrac&gt;</a></span><span class="message">even the ZIL syntax is pretty far from Lisp, as it turns out</span></div><div class="line" id="022316"><span class="nick" style="color:#6b8072"><a href="#022316" label="[02:23:16]">&lt;xentrac&gt;</a></span><span class="message">(but pretty close to the syntax in the historicalsource/ repo)</span></div><div class="line" id="022912"><span class="nick" style="color:#80b1d3"><a href="#022912" label="[02:29:12]">&lt;dddddd&gt;</a></span><span class="message">Inform 7 is kind of genius, but it's a double-edge sword in the sense that feels easier than it is. Also, localization feels weird (and not completely supported last time I checked).</span></div><div class="line" id="024245"><span class="nick" style="color:#6b8072"><a href="#024245" label="[02:42:45]">&lt;xentrac&gt;</a></span><span class="message">so the ZIL instructions for structuring data are &lt;MOVE ,GLUE ,OUTPUT-HOPPER&gt;, &lt;LOC ,GLUE&gt;, &lt;REMOVE ,HORSE&gt;, &lt;FIRST? ,KITCHEN-CABINET&gt;, and &lt;NEXT? ,SEVERED-HEAD&gt;</span></div><div class="line" id="024256"><span class="nick" style="color:#6b8072"><a href="#024256" label="[02:42:56]">&lt;xentrac&gt;</a></span><span class="message">according to this &quot;Learning ZIL&quot; book</span></div><div class="line" id="024354"><span class="nick" style="color:#6b8072"><a href="#024354" label="[02:43:54]">&lt;xentrac&gt;</a></span><span class="message">I can't figure out yet if ZIL had recursion</span></div><div class="line" id="024411"><span class="nick" style="color:#6b8072"><a href="#024411" label="[02:44:11]">&lt;xentrac&gt;</a></span><span class="message">I imagine probably so?</span></div><div class="line" id="024417"><span class="nick" style="color:#6b8072"><a href="#024417" label="[02:44:17]">&lt;xentrac&gt;</a></span><span class="message">it doesn't have lists though</span></div><div class="line" id="024433"><span class="nick" style="color:#6b8072"><a href="#024433" label="[02:44:33]">&lt;xentrac&gt;</a></span><span class="message">aside from &lt;NEXT? .FOO&gt;</span></div><div class="line" id="024551"><span class="nick" style="color:#6b8072"><a href="#024551" label="[02:45:51]">&lt;xentrac&gt;</a></span><span class="message">(because it had to run on the Z-machine)</span></div><div class="line" id="024837"><span class="nick" style="color:#6b8072"><a href="#024837" label="[02:48:37]">&lt;xentrac&gt;</a></span><span class="message">the syntax is Lispier than I thought at first</span></div><div class="line" id="030821"><span class="nick" style="color:#6b8072"><a href="#030821" label="[03:08:21]">&lt;xentrac&gt;</a></span><span class="message">things it has in common with Lisp: prefix fully-parenthesized syntax (though using &lt;&gt;), symbols, COND, variadic functions.  things it doesn't have in common: semantics, implicit variables (you need to use . or , in a way similar to $ in bash or Tcl)</span></div><div class="line" id="105423"><span class="nick">***</span><span class="message notice">pgreco_ is now known as pgreco</span></div><div class="line" id="110851"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado</span></div><div class="line" id="115731"><span class="nick" style="color:#6d2462"><a href="#115731" label="[11:57:31]">&lt;jelle&gt;</a></span><span class="message">is golang btw bootstrappable?</span></div><div class="line" id="121220"><span class="nick" style="color:#389600"><a href="#121220" label="[12:12:20]">&lt;mid-kid&gt;</a></span><span class="message">golang is probably the easiest. Build go 1.4, then build the latest.</span></div><div class="line" id="121235"><span class="nick" style="color:#8dd3c7"><a href="#121235" label="[12:12:35]">&lt;oriansj&gt;</a></span><span class="message">jelle: if you mean the language go; in the sorta there was a C package that could be built to bootstrap go sort of way, yes. Now does that source code look like it was written by a machine, yeah...</span></div><div class="line" id="121300"><span class="nick" style="color:#6d2462"><a href="#121300" label="[12:13:00]">&lt;jelle&gt;</a></span><span class="message">oriansj: yes language go :p</span></div><div class="line" id="121320"><span class="nick" style="color:#234e69"><a href="#121320" label="[12:13:20]">*</a></span><span class="message">jelle is wondering if guix does this. I should probably take a closer look at the git repo :D</span></div><div class="line" id="121329"><span class="nick" style="color:#8dd3c7"><a href="#121329" label="[12:13:29]">&lt;oriansj&gt;</a></span><span class="message">jelle: So in effect yes and hence why go is in guix</span></div><div class="line" id="121348"><span class="nick" style="color:#6d2462"><a href="#121348" label="[12:13:48]">&lt;jelle&gt;</a></span><span class="message">I see!</span></div><div class="line" id="121413"><span class="nick" style="color:#8dd3c7"><a href="#121413" label="[12:14:13]">&lt;oriansj&gt;</a></span><span class="message">however looking at the C code, large chunks definitely do not match the sort of C code humans would write</span></div><div class="line" id="121745"><span class="nick" style="color:#8dd3c7"><a href="#121745" label="[12:17:45]">&lt;oriansj&gt;</a></span><span class="message">So it is the sort of we have a problem to deal with later but atleast we have a solid handle on it sort of thing.</span></div><div class="line" id="121934"><span class="nick" style="color:#8dd3c7"><a href="#121934" label="[12:19:34]">&lt;oriansj&gt;</a></span><span class="message">Basically a human could go and replace the generated bits by hand; solving that bootstrap sort of detail but it isn't a priority because other languages like Haskell and C don't even have that</span></div><div class="line" id="123004"><span class="nick" style="color:#8dd3c7"><a href="#123004" label="[12:30:04]">&lt;oriansj&gt;</a></span><span class="message">(I means I guess C now sorta has something close with the bootstrap of M2-Planet+mescc-tools+mes-m2 (<a rel="nofollow" href="https://github.com/oriansj/mescc-tools-seed">https://github.com/oriansj/mescc-tools-seed</a>)  but it is that last step which is killing me)</span></div><div class="line" id="125430"><span class="nick" style="color:#6c3d55"><a href="#125430" label="[12:54:30]">&lt;stikonas&gt;</a></span><span class="message">mid-kid, jelle: golang is bootstrappable with gcc directly, it builds with gccgo</span></div><div class="line" id="125612"><span class="nick" style="color:#6c3d55"><a href="#125612" label="[12:56:12]">&lt;stikonas&gt;</a></span><span class="message">what's wrong with this approach? or am I missing something?</span></div><div class="line" id="134525"><span class="nick" style="color:#389600"><a href="#134525" label="[13:45:25]">&lt;mid-kid&gt;</a></span><span class="message">There isn't much wrong with that approach other than historically being restricted to newer gcc versions (older implemented go 1.3 iirc)</span></div><div class="line" id="134658"><span class="nick" style="color:#389600"><a href="#134658" label="[13:46:58]">&lt;mid-kid&gt;</a></span><span class="message">Also idk how compatible both implementations are, and the &quot;official&quot; implementation is committed to being buildable with go1.4 and they maintain sources to bootstrap it.</span></div><div class="line" id="134735"><span class="nick" style="color:#389600"><a href="#134735" label="[13:47:35]">&lt;mid-kid&gt;</a></span><span class="message">idk how guix does it.</span></div><div class="line" id="135027"><span class="nick" style="color:#389600"><a href="#135027" label="[13:50:27]">&lt;mid-kid&gt;</a></span><span class="message">Is it normal for glibc 2.2.5's adjtime.c to take 2h to compile under gcc 2.95.3?</span></div><div class="line" id="135042"><span class="nick" style="color:#389600"><a href="#135042" label="[13:50:42]">&lt;mid-kid&gt;</a></span><span class="message">seems like it's stuck.</span></div><div class="line" id="142232"><span class="nick" style="color:#389600"><a href="#142232" label="[14:22:32]">&lt;mid-kid&gt;</a></span><span class="message">Rebuilt and now it works. huh.</span></div><div class="line" id="142440"><span class="nick" style="color:#6c3d55"><a href="#142440" label="[14:24:40]">&lt;stikonas&gt;</a></span><span class="message">by the way, are there any plans for non x86/amd64 bootstrap of gcc? I think tcc only supports those arches</span></div><div class="line" id="142638"><span class="nick" style="color:#6c3d55"><a href="#142638" label="[14:26:38]">&lt;stikonas&gt;</a></span><span class="message">oh, maybe I'm wrong, tcc seems to have arm32 backend...</span></div><div class="line" id="161355"><span class="nick">***</span><span class="message notice">warren_ is now known as warren</span></div><div class="line" id="224940"><span class="nick" style="color:#8dd3c7"><a href="#224940" label="[22:49:40]">&lt;oriansj&gt;</a></span><span class="message">stikonas: the last I checked gccgo only supports up to 1.3 but one needs 1.4 to complete the current bootstrap chain. So there is that gap (Looking forward to when that is closed)</span></div><div class="line" id="225038"><span class="nick" style="color:#8dd3c7"><a href="#225038" label="[22:50:38]">&lt;oriansj&gt;</a></span><span class="message">also we have plans to extend MesCC to be able to build GCC directly, then we need only need ensure guile/mes-m2 runs on that platform.</span></div><div class="line" id="225226"><span class="nick" style="color:#8dd3c7"><a href="#225226" label="[22:52:26]">&lt;oriansj&gt;</a></span><span class="message">I also still need to take the time to do the stage0 steps for armv7l and aarch64 to enable those bootstraps in mescc-tools-seed; (armv7l support in M2-Planet is already done, dddddd is working on the aarch64 and it is in close to release state)</span></div><div class="line" id="230217"><span class="nick" style="color:#8dd3c7"><a href="#230217" label="[23:02:17]">&lt;oriansj&gt;</a></span><span class="message">mes-m2 is currently stuck because I have not been able to figure out a good set of tests for use-modules and define-module but alteast now 1+, 1- and guile records now work out of the box</span></div><div class="line" id="230246"><span class="nick" style="color:#8dd3c7"><a href="#230246" label="[23:02:46]">&lt;oriansj&gt;</a></span><span class="message">and I thought people would find this funny: <a rel="nofollow" href="https://twitter.com/ben_burnes/status/1178676970609139712">https://twitter.com/ben_burnes/status/1178676970609139712</a> </span></div><br /></div></body></html>