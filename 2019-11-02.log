<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2019-11-02.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="003133"><span class="nick" style="color:#389600"><a href="#003133" label="[00:31:33]">&lt;oriansj&gt;</a></span><span class="message">greetings twinshadow</span></div><div class="line" id="011309"><span class="nick" style="color:#8dd3c7"><a href="#011309" label="[01:13:09]">&lt;twinshadow&gt;</a></span><span class="message">oriansj: hey</span></div><div class="line" id="012108"><span class="nick" style="color:#389600"><a href="#012108" label="[01:21:08]">&lt;oriansj&gt;</a></span><span class="message">twinshadow: what fun things are you working on?</span></div><div class="line" id="012154"><span class="nick" style="color:#389600"><a href="#012154" label="[01:21:54]">&lt;oriansj&gt;</a></span><span class="message">greetings theruran</span></div><div class="line" id="012204"><span class="nick" style="color:#6b8072"><a href="#012204" label="[01:22:04]">&lt;theruran&gt;</a></span><span class="message">o/</span></div><div class="line" id="012231"><span class="nick" style="color:#389600"><a href="#012231" label="[01:22:31]">&lt;oriansj&gt;</a></span><span class="message">theruran: working on something fun I hope</span></div><div class="line" id="012313"><span class="nick" style="color:#6b8072"><a href="#012313" label="[01:23:13]">&lt;theruran&gt;</a></span><span class="message">mostly lurking :) but yeah, interested in bootstrapping a LISP system</span></div><div class="line" id="012341"><span class="nick" style="color:#389600"><a href="#012341" label="[01:23:41]">&lt;oriansj&gt;</a></span><span class="message">theruran: good; lots of fun pieces to do that</span></div><div class="line" id="012555"><span class="nick" style="color:#6b8072"><a href="#012555" label="[01:25:55]">&lt;theruran&gt;</a></span><span class="message">reading Lisp as the Maxwell's Equations of Software</span></div><div class="line" id="012850"><span class="nick" style="color:#389600"><a href="#012850" label="[01:28:50]">&lt;oriansj&gt;</a></span><span class="message">you might like this then: <a rel="nofollow" href="https://github.com/oriansj/mes-m2">https://github.com/oriansj/mes-m2</a> </span></div><div class="line" id="012945"><span class="nick" style="color:#389600"><a href="#012945" label="[01:29:45]">&lt;oriansj&gt;</a></span><span class="message">The First portable bootstrappable Scheme</span></div><div class="line" id="013027"><span class="nick" style="color:#389600"><a href="#013027" label="[01:30:27]">&lt;oriansj&gt;</a></span><span class="message">(We are slowly working to make it fully mes.c compatible)</span></div><div class="line" id="013109"><span class="nick" style="color:#6b8072"><a href="#013109" label="[01:31:09]">&lt;theruran&gt;</a></span><span class="message">yeah! this is awesome!</span></div><div class="line" id="013133"><span class="nick" style="color:#389600"><a href="#013133" label="[01:31:33]">&lt;oriansj&gt;</a></span><span class="message">and I do mean from quite small bootstrap binaries: <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-seed">https://github.com/oriansj/mescc-tools-seed</a>  (357 bytes)</span></div><div class="line" id="013135"><span class="nick" style="color:#6b8072"><a href="#013135" label="[01:31:35]">&lt;theruran&gt;</a></span><span class="message">I want to implement a KLambda machine to host Shen lisp</span></div><div class="line" id="013235"><span class="nick" style="color:#389600"><a href="#013235" label="[01:32:35]">&lt;oriansj&gt;</a></span><span class="message">ambitious, I like it</span></div><div class="line" id="013306"><span class="nick" style="color:#6b8072"><a href="#013306" label="[01:33:06]">&lt;theruran&gt;</a></span><span class="message">yeah, in a memory-safe language :)</span></div><div class="line" id="013342"><span class="nick" style="color:#389600"><a href="#013342" label="[01:33:42]">&lt;oriansj&gt;</a></span><span class="message">one would hope real metal</span></div><div class="line" id="013359"><span class="nick" style="color:#6b8072"><a href="#013359" label="[01:33:59]">&lt;theruran&gt;</a></span><span class="message">we'll see how my research plan develops. I need to meet with my advisor again to discuss what to do next</span></div><div class="line" id="013405"><span class="nick" style="color:#389600"><a href="#013405" label="[01:34:05]">&lt;oriansj&gt;</a></span><span class="message">but generally a virtual machine first: <a rel="nofollow" href="https://github.com/oriansj/knight-vm">https://github.com/oriansj/knight-vm</a> </span></div><div class="line" id="013414"><span class="nick" style="color:#389600"><a href="#013414" label="[01:34:14]">&lt;oriansj&gt;</a></span><span class="message">Then FPGA</span></div><div class="line" id="013430"><span class="nick" style="color:#389600"><a href="#013430" label="[01:34:30]">&lt;oriansj&gt;</a></span><span class="message">Then custom asic</span></div><div class="line" id="013505"><span class="nick" style="color:#6b8072"><a href="#013505" label="[01:35:05]">&lt;theruran&gt;</a></span><span class="message">True! Steele and Sussman outlined the VM in their SCHEME-79 and SCHEME-81 architectures. A VM of this Lisp microprocessor should be made first</span></div><div class="line" id="013545"><span class="nick" style="color:#6b8072"><a href="#013545" label="[01:35:45]">&lt;theruran&gt;</a></span><span class="message">err not the VM, they implemented a real chip. but they provide the state machine for the Lisp processor</span></div><div class="line" id="013622"><span class="nick" style="color:#389600"><a href="#013622" label="[01:36:22]">&lt;oriansj&gt;</a></span><span class="message">no worries, I am familiar with their papers</span></div><div class="line" id="013728"><span class="nick" style="color:#389600"><a href="#013728" label="[01:37:28]">&lt;oriansj&gt;</a></span><span class="message">Though I have found tagged memory harder to bootstrap from zero</span></div><div class="line" id="013810"><span class="nick" style="color:#6b8072"><a href="#013810" label="[01:38:10]">&lt;theruran&gt;</a></span><span class="message">great, now I know how to ask ;)</span></div><div class="line" id="013813"><span class="nick" style="color:#6b8072"><a href="#013813" label="[01:38:13]">&lt;theruran&gt;</a></span><span class="message">who*</span></div><div class="line" id="013851"><span class="nick" style="color:#389600"><a href="#013851" label="[01:38:51]">&lt;oriansj&gt;</a></span><span class="message">But once one has a proper C compiler or lisp compiler; the bootstrap gains some lovely benefits for free.</span></div><div class="line" id="013911"><span class="nick" style="color:#6b8072"><a href="#013911" label="[01:39:11]">&lt;theruran&gt;</a></span><span class="message">oriansj: because of the extra juggling needed at the hex or assembly level?</span></div><div class="line" id="013955"><span class="nick" style="color:#389600"><a href="#013955" label="[01:39:55]">&lt;oriansj&gt;</a></span><span class="message">it is more restrictions and things to keep track of that make the process harder (but not impossible)</span></div><div class="line" id="014109"><span class="nick" style="color:#6b8072"><a href="#014109" label="[01:41:09]">&lt;theruran&gt;</a></span><span class="message">I see, yeah</span></div><div class="line" id="014202"><span class="nick" style="color:#6b8072"><a href="#014202" label="[01:42:02]">&lt;theruran&gt;</a></span><span class="message">I like this guy's project: <a rel="nofollow" href="http://akkartik.name/post/mu-2019-2">http://akkartik.name/post/mu-2019-2</a> </span></div><div class="line" id="014202"><span class="nick" style="color:#6b8072"><a href="#014202" label="[01:42:02]">&lt;theruran&gt;</a></span><span class="message">It's a different direction than where I'm headed but fun to learn how he is approaching the bootstrapping process.</span></div><div class="line" id="014318"><span class="nick" style="color:#389600"><a href="#014318" label="[01:43:18]">&lt;oriansj&gt;</a></span><span class="message">nice guy; lots of fun discussions on this channel</span></div><div class="line" id="014650"><span class="nick" style="color:#389600"><a href="#014650" label="[01:46:50]">&lt;oriansj&gt;</a></span><span class="message">essentially when working at the hex or binary level, everything takes alot longer and it harder to change. Think of making a picture with individual pieces of colored sand; simple and small pictures can be done with reasonable effort but as the complexity of the picture and the size of it goes up it can exceed the amount of effort people are psychologically able to perform.</span></div><div class="line" id="014752"><span class="nick" style="color:#6b8072"><a href="#014752" label="[01:47:52]">&lt;theruran&gt;</a></span><span class="message">but if your architecture is just low-level Lisp expressions then no need for bit-fiddling, right?</span></div><div class="line" id="014830"><span class="nick" style="color:#389600"><a href="#014830" label="[01:48:30]">&lt;oriansj&gt;</a></span><span class="message">theruran: how do you plan on encoding your instructions? your integers? your floats?</span></div><div class="line" id="015006"><span class="nick" style="color:#6b8072"><a href="#015006" label="[01:50:06]">&lt;theruran&gt;</a></span><span class="message">as in, how to tell the Lisp microprocessor what to do?</span></div><div class="line" id="015032"><span class="nick" style="color:#389600"><a href="#015032" label="[01:50:32]">&lt;oriansj&gt;</a></span><span class="message">bit-fiddling is just part of all real software assemblers and compilers</span></div><div class="line" id="015227"><span class="nick" style="color:#6b8072"><a href="#015227" label="[01:52:27]">&lt;theruran&gt;</a></span><span class="message">from what I understood of their architecture, the hardware takes care of that level of detail. it even has a garbage collector. the authors say the line between hardware and software can be drawn anywhere</span></div><div class="line" id="015309"><span class="nick" style="color:#389600"><a href="#015309" label="[01:53:09]">&lt;oriansj&gt;</a></span><span class="message">well using ascii encoded strings for numbers in hardware is far from a wise idea</span></div><div class="line" id="015347"><span class="nick" style="color:#389600"><a href="#015347" label="[01:53:47]">&lt;oriansj&gt;</a></span><span class="message">0xFF would consume 5bytes instead of 1</span></div><div class="line" id="015514"><span class="nick" style="color:#6b8072"><a href="#015514" label="[01:55:14]">&lt;theruran&gt;</a></span><span class="message">so a bootstrapping compiler will still be needed to translate ASCII-encoded Lisp programs into their hex instruction addresses and values?</span></div><div class="line" id="015515"><span class="nick" style="color:#389600"><a href="#015515" label="[01:55:15]">&lt;oriansj&gt;</a></span><span class="message">it would also take hundreds of more clock cycles to perform a simple calculation that could be done in a single cycle in a better format</span></div><div class="line" id="015601"><span class="nick" style="color:#389600"><a href="#015601" label="[01:56:01]">&lt;oriansj&gt;</a></span><span class="message">Do you wish ADD instruction to consume 3 bytes to express something that could fit in 1 byte?</span></div><div class="line" id="015703"><span class="nick" style="color:#6b8072"><a href="#015703" label="[01:57:03]">&lt;theruran&gt;</a></span><span class="message">I don't know. I don't think there is an ADD instruction</span></div><div class="line" id="015704"><span class="nick" style="color:#389600"><a href="#015704" label="[01:57:04]">&lt;oriansj&gt;</a></span><span class="message">aka do you encode ADD as 41 44 44 ... or just 04 ..</span></div><div class="line" id="015808"><span class="nick" style="color:#389600"><a href="#015808" label="[01:58:08]">&lt;oriansj&gt;</a></span><span class="message">well one could easily do a Turing Tarpit instruction set</span></div><div class="line" id="015835"><span class="nick" style="color:#6b8072"><a href="#015835" label="[01:58:35]">&lt;theruran&gt;</a></span><span class="message">I imagine the Lisp processor is pretty slow by today's standards, but it may not matter.</span></div><div class="line" id="015913"><span class="nick" style="color:#389600"><a href="#015913" label="[01:59:13]">&lt;oriansj&gt;</a></span><span class="message">theruran: it could also be impressively fast if done correctly</span></div><div class="line" id="020042"><span class="nick" style="color:#6b8072"><a href="#020042" label="[02:00:42]">&lt;theruran&gt;</a></span><span class="message">would love to get there because I think it would mean much safer computers and easier to extend</span></div><div class="line" id="020157"><span class="nick" style="color:#389600"><a href="#020157" label="[02:01:57]">&lt;oriansj&gt;</a></span><span class="message">well it isn't the hardware that makes it easy to extend, it is the software.</span></div><div class="line" id="020223"><span class="nick" style="color:#389600"><a href="#020223" label="[02:02:23]">&lt;oriansj&gt;</a></span><span class="message">OpenGenera on DEC Alpha proved that</span></div><div class="line" id="020318"><span class="nick" style="color:#6b8072"><a href="#020318" label="[02:03:18]">&lt;theruran&gt;</a></span><span class="message">I am betting on Lisp and you know all the reasons already. Abstract C Machines should be considered harmful.</span></div><div class="line" id="020320"><span class="nick" style="color:#389600"><a href="#020320" label="[02:03:20]">&lt;oriansj&gt;</a></span><span class="message">but properly made hardware can certainly add safety properties that software just can't provide.</span></div><div class="line" id="020555"><span class="nick" style="color:#389600"><a href="#020555" label="[02:05:55]">&lt;oriansj&gt;</a></span><span class="message">I think of them as a tool; used wisely you can do impressive things but act foolish and the price must be paid</span></div><div class="line" id="020853"><span class="nick" style="color:#6b8072"><a href="#020853" label="[02:08:53]">&lt;theruran&gt;</a></span><span class="message">without formal verification tools to do the sanity checking for us, they are too dangerous for mere mortals to use</span></div><div class="line" id="021632"><span class="nick" style="color:#389600"><a href="#021632" label="[02:16:32]">&lt;oriansj&gt;</a></span><span class="message">So what? Not every program has to be correct nor secure.</span></div><div class="line" id="021718"><span class="nick" style="color:#389600"><a href="#021718" label="[02:17:18]">&lt;oriansj&gt;</a></span><span class="message">If one needs the properties of C and assembly; there is no way to have automatic formal verification.</span></div><div class="line" id="021758"><span class="nick" style="color:#389600"><a href="#021758" label="[02:17:58]">&lt;oriansj&gt;</a></span><span class="message">Now one can follow a process that results in C and assembly code that have formally proven properties</span></div><div class="line" id="021826"><span class="nick" style="color:#389600"><a href="#021826" label="[02:18:26]">&lt;oriansj&gt;</a></span><span class="message">but compilers can easily violate those assumptions</span></div><div class="line" id="021848"><span class="nick" style="color:#389600"><a href="#021848" label="[02:18:48]">&lt;oriansj&gt;</a></span><span class="message">especially when optimizing undefined behavior</span></div><div class="line" id="021855"><span class="nick" style="color:#6b8072"><a href="#021855" label="[02:18:55]">&lt;theruran&gt;</a></span><span class="message">in my opinion, we must raise the bar and create correct programs. It should not be relegated to military defense and aerospace applications. Normal users deserve working software.</span></div><div class="line" id="021920"><span class="nick" style="color:#6b8072"><a href="#021920" label="[02:19:20]">&lt;theruran&gt;</a></span><span class="message">I agree that not every program needs to be verified, but those should be at the upper-most level: basically user scripts.</span></div><div class="line" id="021948"><span class="nick" style="color:#389600"><a href="#021948" label="[02:19:48]">&lt;oriansj&gt;</a></span><span class="message">theruran: good; now how are you going to help make that reality?</span></div><div class="line" id="022051"><span class="nick" style="color:#6b8072"><a href="#022051" label="[02:20:51]">&lt;theruran&gt;</a></span><span class="message">by doing the formal verification work, either of legacy systems or building a new one without the same problems</span></div><div class="line" id="022147"><span class="nick" style="color:#6b8072"><a href="#022147" label="[02:21:47]">&lt;theruran&gt;</a></span><span class="message">the tools are much better nowadays. No need to learn some obscure logic programming and proof assistants</span></div><div class="line" id="022147"><span class="nick" style="color:#389600"><a href="#022147" label="[02:21:47]">&lt;oriansj&gt;</a></span><span class="message">now what does progress towards that goal look like</span></div><div class="line" id="022229"><span class="nick" style="color:#389600"><a href="#022229" label="[02:22:29]">&lt;oriansj&gt;</a></span><span class="message">what is missing or needs to be fixed first</span></div><div class="line" id="022248"><span class="nick" style="color:#6b8072"><a href="#022248" label="[02:22:48]">&lt;theruran&gt;</a></span><span class="message">one simple way to start would be to verify minilisp.c</span></div><div class="line" id="022302"><span class="nick" style="color:#389600"><a href="#022302" label="[02:23:02]">&lt;oriansj&gt;</a></span><span class="message">good</span></div><div class="line" id="022335"><span class="nick" style="color:#6b8072"><a href="#022335" label="[02:23:35]">&lt;theruran&gt;</a></span><span class="message">another way I am considering is modeling Steele and Sussman's Lisp microprocessor state machine using abstract state machines</span></div><div class="line" id="022346"><span class="nick" style="color:#389600"><a href="#022346" label="[02:23:46]">&lt;oriansj&gt;</a></span><span class="message">I look forward to seeing it</span></div><div class="line" id="022431"><span class="nick" style="color:#6b8072"><a href="#022431" label="[02:24:31]">&lt;theruran&gt;</a></span><span class="message">thanks oriansj! it may take me many more months. I am still getting used to being a student researcher :)</span></div><div class="line" id="022536"><span class="nick" style="color:#6b8072"><a href="#022536" label="[02:25:36]">&lt;theruran&gt;</a></span><span class="message">will be sure to share my progress here</span></div><div class="line" id="022555"><span class="nick" style="color:#389600"><a href="#022555" label="[02:25:55]">&lt;oriansj&gt;</a></span><span class="message">theruran: just remember, one  person can change the world an inch at a time</span></div><div class="line" id="022614"><span class="nick" style="color:#389600"><a href="#022614" label="[02:26:14]">&lt;oriansj&gt;</a></span><span class="message">keep pushing</span></div><div class="line" id="022615"><span class="nick" style="color:#6b8072"><a href="#022615" label="[02:26:15]">&lt;theruran&gt;</a></span><span class="message">✊</span></div><div class="line" id="022844"><span class="nick" style="color:#389600"><a href="#022844" label="[02:28:44]">&lt;oriansj&gt;</a></span><span class="message">we are always here to help those who want to make the world a better place</span></div><div class="line" id="022920"><span class="nick" style="color:#389600"><a href="#022920" label="[02:29:20]">&lt;oriansj&gt;</a></span><span class="message">learn, share, teach and create something worth sharing</span></div><div class="line" id="023002"><span class="nick" style="color:#6b8072"><a href="#023002" label="[02:30:02]">&lt;theruran&gt;</a></span><span class="message">thank you. glad to have found this community because you are working on stuff that will upend the status quo</span></div><div class="line" id="023133"><span class="nick" style="color:#389600"><a href="#023133" label="[02:31:33]">&lt;oriansj&gt;</a></span><span class="message">theruran: it isn't everyday you get to solve a 61 year old open Computer Science problem and have this much fun  with your friends doing it</span></div><div class="line" id="023200"><span class="nick" style="color:#6b8072"><a href="#023200" label="[02:32:00]">&lt;theruran&gt;</a></span><span class="message">wow :D</span></div><div class="line" id="023351"><span class="nick" style="color:#389600"><a href="#023351" label="[02:33:51]">&lt;oriansj&gt;</a></span><span class="message">The Trusting Trust attack is literally from a 1958 paper on subverting Soviet technical infrastructure and soon it will be solved.</span></div><div class="line" id="023519"><span class="nick" style="color:#6b8072"><a href="#023519" label="[02:35:19]">&lt;theruran&gt;</a></span><span class="message">I guess I didn't realize it wasn't solved yet</span></div><div class="line" id="023541"><span class="nick" style="color:#6b8072"><a href="#023541" label="[02:35:41]">&lt;theruran&gt;</a></span><span class="message">well, at a practical level definitely not. but experimentally yes</span></div><div class="line" id="023611"><span class="nick" style="color:#389600"><a href="#023611" label="[02:36:11]">&lt;oriansj&gt;</a></span><span class="message">well the DDC paper provided a roadmap</span></div><div class="line" id="023634"><span class="nick" style="color:#389600"><a href="#023634" label="[02:36:34]">&lt;oriansj&gt;</a></span><span class="message">Guix provided a solution to the GCC and up bit</span></div><div class="line" id="023659"><span class="nick" style="color:#389600"><a href="#023659" label="[02:36:59]">&lt;oriansj&gt;</a></span><span class="message">Mes.c is providing the scheme to GCC bit</span></div><div class="line" id="023703"><span class="nick" style="color:#6b8072"><a href="#023703" label="[02:37:03]">&lt;theruran&gt;</a></span><span class="message">true. what's the DDC paper?</span></div><div class="line" id="023823"><span class="nick" style="color:#389600"><a href="#023823" label="[02:38:23]">&lt;oriansj&gt;</a></span><span class="message">The paper that started it all: <a rel="nofollow" href="https://dwheeler.com/trusting-trust/">https://dwheeler.com/trusting-trust/</a> </span></div><div class="line" id="023934"><span class="nick" style="color:#389600"><a href="#023934" label="[02:39:34]">&lt;oriansj&gt;</a></span><span class="message">It was a formal proof that allows one for the first time know that they have defeated the trusting trust attack.</span></div><div class="line" id="023957"><span class="nick" style="color:#389600"><a href="#023957" label="[02:39:57]">&lt;oriansj&gt;</a></span><span class="message">It is what inspired the Repoducible builds project</span></div><div class="line" id="024031"><span class="nick" style="color:#389600"><a href="#024031" label="[02:40:31]">&lt;oriansj&gt;</a></span><span class="message">that started the huge task of making gcc builds reproducible</span></div><div class="line" id="024044"><span class="nick" style="color:#6b8072"><a href="#024044" label="[02:40:44]">&lt;theruran&gt;</a></span><span class="message">Oh, I've been on this page before but I don't think I've read this paper yet. Diverse Double Compiling is more robust that what is outlined in Trusting Trust?</span></div><div class="line" id="024135"><span class="nick" style="color:#389600"><a href="#024135" label="[02:41:35]">&lt;oriansj&gt;</a></span><span class="message">It is a way to prove if binaries contain such an attack</span></div><div class="line" id="024145"><span class="nick" style="color:#6b8072"><a href="#024145" label="[02:41:45]">&lt;theruran&gt;</a></span><span class="message">gotcha</span></div><div class="line" id="024222"><span class="nick" style="color:#389600"><a href="#024222" label="[02:42:22]">&lt;oriansj&gt;</a></span><span class="message">IE: If the result is bit-for-bit identical with the untrusted executable, then the source code accurately represents the executable.</span></div><div class="line" id="024326"><span class="nick" style="color:#389600"><a href="#024326" label="[02:43:26]">&lt;oriansj&gt;</a></span><span class="message">and by bootstrapping off a single 357 byte binary; we have a path to a trusted root compiler</span></div><div class="line" id="024536"><span class="nick" style="color:#389600"><a href="#024536" label="[02:45:36]">&lt;oriansj&gt;</a></span><span class="message">be sure to watch the talk, it is well worth it</span></div><div class="line" id="024746"><span class="nick" style="color:#6b8072"><a href="#024746" label="[02:47:46]">&lt;theruran&gt;</a></span><span class="message">will do. thanks</span></div><div class="line" id="024841"><span class="nick" style="color:#389600"><a href="#024841" label="[02:48:41]">&lt;oriansj&gt;</a></span><span class="message">So all that remains is the close the gap between mes-m2 and mes.c</span></div><div class="line" id="024958"><span class="nick" style="color:#389600"><a href="#024958" label="[02:49:58]">&lt;oriansj&gt;</a></span><span class="message">oh and if you want to help; there are scheme programs that still need writing</span></div><div class="line" id="025108"><span class="nick" style="color:#6b8072"><a href="#025108" label="[02:51:08]">&lt;theruran&gt;</a></span><span class="message">so the project is very close to completing its mission? very exciting!</span></div><div class="line" id="025114"><span class="nick" style="color:#6b8072"><a href="#025114" label="[02:51:14]">&lt;theruran&gt;</a></span><span class="message">what Scheme programs must be written?</span></div><div class="line" id="025234"><span class="nick" style="color:#389600"><a href="#025234" label="[02:52:34]">&lt;oriansj&gt;</a></span><span class="message">well correct me if I am wrong janneke but we still need scheme versions of: bzip2, coreutils, gawk, grep, gzip, patch, sed,</span></div><div class="line" id="025237"><span class="nick" style="color:#389600"><a href="#025237" label="[02:52:37]">&lt;oriansj&gt;</a></span><span class="message">tar, xz</span></div><div class="line" id="025302"><span class="nick" style="color:#389600"><a href="#025302" label="[02:53:02]">&lt;oriansj&gt;</a></span><span class="message">after which guix's bootstrap seed will be just guile</span></div><div class="line" id="025407"><span class="nick" style="color:#389600"><a href="#025407" label="[02:54:07]">&lt;oriansj&gt;</a></span><span class="message">and as mes.c grows to fix into guile's place; then the transistion will be end to end complete</span></div><div class="line" id="025449"><span class="nick" style="color:#6b8072"><a href="#025449" label="[02:54:49]">&lt;theruran&gt;</a></span><span class="message">bootstrapping Guile from a hex seed and low-level Lisp intermediate language?</span></div><div class="line" id="025531"><span class="nick" style="color:#6b8072"><a href="#025531" label="[02:55:31]">&lt;theruran&gt;</a></span><span class="message">do the Scheme versions need to implement all of the same features?</span></div><div class="line" id="025611"><span class="nick" style="color:#389600"><a href="#025611" label="[02:56:11]">&lt;oriansj&gt;</a></span><span class="message">well see there is a problem in guile; it can't be built from human writen source right now</span></div><div class="line" id="025614"><span class="nick" style="color:#6b8072"><a href="#025614" label="[02:56:14]">&lt;theruran&gt;</a></span><span class="message">oh, so writing it in mes-m2 Scheme</span></div><div class="line" id="025733"><span class="nick" style="color:#389600"><a href="#025733" label="[02:57:33]">&lt;oriansj&gt;</a></span><span class="message">as one needs guile to convert the human written source into something that can be currently built; thus mes.c needs to grow up enough to do that step</span></div><div class="line" id="025824"><span class="nick" style="color:#389600"><a href="#025824" label="[02:58:24]">&lt;oriansj&gt;</a></span><span class="message">mes-m2 is just the name for a fork of mes.c with the goal of being buildable by M2-Planet fast</span></div><div class="line" id="025850"><span class="nick" style="color:#389600"><a href="#025850" label="[02:58:50]">&lt;oriansj&gt;</a></span><span class="message">and now that it can be built via M2-Planet and all tests pass</span></div><div class="line" id="025907"><span class="nick" style="color:#389600"><a href="#025907" label="[02:59:07]">&lt;oriansj&gt;</a></span><span class="message">I have the task of making it become closer and closer to mes.c</span></div><div class="line" id="030004"><span class="nick" style="color:#389600"><a href="#030004" label="[03:00:04]">&lt;oriansj&gt;</a></span><span class="message">everything from hex0-&gt;M2-Planet-&gt;mes-m2 is done already</span></div><div class="line" id="030100"><span class="nick" style="color:#389600"><a href="#030100" label="[03:01:00]">&lt;oriansj&gt;</a></span><span class="message">it is just writing C code to get mes-m2 up to mes.c; so that is able to self-host MesCC</span></div><div class="line" id="030254"><span class="nick" style="color:#6b8072"><a href="#030254" label="[03:02:54]">&lt;theruran&gt;</a></span><span class="message">is it C or a subset of C?</span></div><div class="line" id="030325"><span class="nick" style="color:#389600"><a href="#030325" label="[03:03:25]">&lt;oriansj&gt;</a></span><span class="message">MesCC is a C99 compiler</span></div><div class="line" id="030358"><span class="nick" style="color:#389600"><a href="#030358" label="[03:03:58]">&lt;oriansj&gt;</a></span><span class="message">M2-Planet is a highly restricted subset of C</span></div><div class="line" id="030454"><span class="nick" style="color:#389600"><a href="#030454" label="[03:04:54]">&lt;oriansj&gt;</a></span><span class="message">Written in a more restricted subset of C</span></div><div class="line" id="030510"><span class="nick" style="color:#389600"><a href="#030510" label="[03:05:10]">&lt;oriansj&gt;</a></span><span class="message">that I implemented in assembly</span></div><div class="line" id="030603"><span class="nick" style="color:#389600"><a href="#030603" label="[03:06:03]">&lt;oriansj&gt;</a></span><span class="message">So this code: <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/blob/master/cc_core.c">https://github.com/oriansj/M2-Planet/blob/master/cc_core.c</a>  supports more C functionality than it uses</span></div><div class="line" id="030712"><span class="nick" style="color:#389600"><a href="#030712" label="[03:07:12]">&lt;oriansj&gt;</a></span><span class="message">and the assembly version is availble in multiple forms: <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-seed/blob/master/x86/cc_x86.M1">https://github.com/oriansj/mescc-tools-seed/blob/master/x86/cc_x86.M1</a>  <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-seed/blob/master/x86/NASM/cc_x86.S">https://github.com/oriansj/mescc-tools-seed/blob/master/x86/NASM/cc_x86.S</a> </span></div><div class="line" id="030830"><span class="nick" style="color:#6b8072"><a href="#030830" label="[03:08:30]">&lt;theruran&gt;</a></span><span class="message">it's really impressive work everyone!</span></div><div class="line" id="030852"><span class="nick" style="color:#6b8072"><a href="#030852" label="[03:08:52]">&lt;theruran&gt;</a></span><span class="message">what dialect of Scheme is used to write the remaining pieces?</span></div><div class="line" id="030948"><span class="nick" style="color:#389600"><a href="#030948" label="[03:09:48]">&lt;oriansj&gt;</a></span><span class="message">well we are sticking to a common core subset to make the transistion from guile to Mes.c as small as possible</span></div><div class="line" id="031111"><span class="nick" style="color:#6b8072"><a href="#031111" label="[03:11:11]">&lt;theruran&gt;</a></span><span class="message">where?</span></div><div class="line" id="031135"><span class="nick" style="color:#389600"><a href="#031135" label="[03:11:35]">&lt;oriansj&gt;</a></span><span class="message">for example, I am rewriting mescc-tools in scheme <a rel="nofollow" href="https://github.com/oriansj/slow-utils">https://github.com/oriansj/slow-utils</a>  so that mescc-tools don't have to be in the binary total</span></div><div class="line" id="031208"><span class="nick" style="color:#389600"><a href="#031208" label="[03:12:08]">&lt;oriansj&gt;</a></span><span class="message">The bash replacement is being done here: <a rel="nofollow" href="https://gitlab.com/rutger.van.beusekom/gash.git">https://gitlab.com/rutger.van.beusekom/gash.git</a> </span></div><div class="line" id="031423"><span class="nick" style="color:#6b8072"><a href="#031423" label="[03:14:23]">&lt;theruran&gt;</a></span><span class="message">how similar is Scheme Shell (scsh) to Gash, I wonder?</span></div><div class="line" id="031512"><span class="nick" style="color:#389600"><a href="#031512" label="[03:15:12]">&lt;oriansj&gt;</a></span><span class="message">well Gash is a Bash drop in compatible</span></div><div class="line" id="031522"><span class="nick" style="color:#6b8072"><a href="#031522" label="[03:15:22]">&lt;theruran&gt;</a></span><span class="message">the code looks good!</span></div><div class="line" id="031536"><span class="nick" style="color:#389600"><a href="#031536" label="[03:15:36]">&lt;oriansj&gt;</a></span><span class="message">good programmers</span></div><div class="line" id="031700"><span class="nick" style="color:#6b8072"><a href="#031700" label="[03:17:00]">&lt;theruran&gt;</a></span><span class="message">everything here is being built on much sounder foundations. when the bootstrap is complete it will feel incredibly empowering to use such systems</span></div><div class="line" id="031701"><span class="nick" style="color:#389600"><a href="#031701" label="[03:17:01]">&lt;oriansj&gt;</a></span><span class="message">More people should be on tomorrow morning; so I am off to bed and hopefully we can chat more later. ^_^</span></div><div class="line" id="031709"><span class="nick" style="color:#6b8072"><a href="#031709" label="[03:17:09]">&lt;theruran&gt;</a></span><span class="message">peace!</span></div><div class="line" id="092755"><span class="nick" style="color:#80b1d3"><a href="#092755" label="[09:27:55]">&lt;janneke&gt;</a></span><span class="message">oriansj: mostly correct, you said:</span></div><div class="line" id="092800"><span class="nick" style="color:#80b1d3"><a href="#092800" label="[09:28:00]">&lt;janneke&gt;</a></span><span class="message">well correct me if I am wrong janneke but we still need scheme versions of: bzip2, coreutils, gawk, grep, gzip, patch, sed,tar, xz</span></div><div class="line" id="092849"><span class="nick" style="color:#80b1d3"><a href="#092849" label="[09:28:49]">&lt;janneke&gt;</a></span><span class="message">we already have awk, coreutils, grep, sed, tar</span></div><div class="line" id="092924"><span class="nick" style="color:#80b1d3"><a href="#092924" label="[09:29:24]">&lt;janneke&gt;</a></span><span class="message">we don't need bzip2, patch</span></div><div class="line" id="092953"><span class="nick" style="color:#80b1d3"><a href="#092953" label="[09:29:53]">&lt;janneke&gt;</a></span><span class="message">iwbn if awk and sed were more feature-complete</span></div><div class="line" id="093017"><span class="nick" style="color:#80b1d3"><a href="#093017" label="[09:30:17]">&lt;janneke&gt;</a></span><span class="message">and we have a broken compress, a gzip would be nice</span></div><div class="line" id="093200"><span class="nick" style="color:#80b1d3"><a href="#093200" label="[09:32:00]">&lt;janneke&gt;</a></span><span class="message">when i say: &quot;we don't need&quot;, i mean that we can bootstrap C versions of those tools before we need them</span></div><div class="line" id="093331"><span class="nick" style="color:#80b1d3"><a href="#093331" label="[09:33:31]">&lt;janneke&gt;</a></span><span class="message">oriansj, theruran gash and geesh were merged and gash core moved here: <a rel="nofollow" href="https://savannah.gnu.org/projects/gash">https://savannah.gnu.org/projects/gash</a> </span></div><div class="line" id="093738"><span class="nick" style="color:#80b1d3"><a href="#093738" label="[09:37:38]">&lt;janneke&gt;</a></span><span class="message">gash-core-utils has been moved to a new WIP feature branch, now temporarily living here: <a rel="nofollow" href="https://gitlab.com/janneke/gash">https://gitlab.com/janneke/gash</a> </span></div><div class="line" id="093754"><span class="nick" style="color:#80b1d3"><a href="#093754" label="[09:37:54]">&lt;janneke&gt;</a></span><span class="message">this will all be cleaned-up and released some time soon</span></div><div class="line" id="122553"><span class="nick" style="color:#389600"><a href="#122553" label="[12:25:53]">&lt;oriansj&gt;</a></span><span class="message">janneke: thank you for correcting me; I am glad to see the eliminations of binaries from the guix bootstrap in such a good state</span></div><div class="line" id="122911"><span class="nick" style="color:#389600"><a href="#122911" label="[12:29:11]">&lt;oriansj&gt;</a></span><span class="message">The next Guix release and announcement is going to be quite impressive</span></div><div class="line" id="133920"><span class="nick" style="color:#80b1d3"><a href="#133920" label="[13:39:20]">&lt;janneke&gt;</a></span><span class="message">oriansj: well yes, this has not been released but we have it prototyped</span></div><div class="line" id="133937"><span class="nick" style="color:#80b1d3"><a href="#133937" label="[13:39:37]">&lt;janneke&gt;</a></span><span class="message">so some rough edges all around</span></div><div class="line" id="144311"><span class="nick" style="color:#389600"><a href="#144311" label="[14:43:11]">&lt;oriansj&gt;</a></span><span class="message">currently doing a big shift in stage0 to make the amount of duplication go down a good bit</span></div><div class="line" id="144342"><span class="nick" style="color:#389600"><a href="#144342" label="[14:43:42]">&lt;oriansj&gt;</a></span><span class="message">which requires me to clean up some old bios level hex pieces</span></div><div class="line" id="162443"><span class="nick" style="color:#6d2462"><a href="#162443" label="[16:24:43]">&lt;xentrac&gt;</a></span><span class="message">janneke: thank you for the update!</span></div><div class="line" id="162857"><span class="nick" style="color:#80b1d3"><a href="#162857" label="[16:28:57]">&lt;janneke&gt;</a></span><span class="message">xentrac: yw</span></div><div class="line" id="162936"><span class="nick" style="color:#80b1d3"><a href="#162936" label="[16:29:36]">&lt;janneke&gt;</a></span><span class="message">oriansj: samplet is working on the next gash release and will probably do the next announcement of the guix bootstrap</span></div><div class="line" id="162953"><span class="nick" style="color:#6d2462"><a href="#162953" label="[16:29:53]">&lt;xentrac&gt;</a></span><span class="message">what about xz?</span></div><div class="line" id="162956"><span class="nick" style="color:#80b1d3"><a href="#162956" label="[16:29:56]">&lt;janneke&gt;</a></span><span class="message">his work will probably be mes-0.19 based, whereas i am prototyping with mes-0.21rc</span></div><div class="line" id="163245"><span class="nick" style="color:#80b1d3"><a href="#163245" label="[16:32:45]">&lt;janneke&gt;</a></span><span class="message">xentrac: xz is quite probematic, i succeeded to build it with gcc 4.6 or 4.7</span></div><div class="line" id="163255"><span class="nick" style="color:#80b1d3"><a href="#163255" label="[16:32:55]">&lt;janneke&gt;</a></span><span class="message">it won't build with tcc or gcc-2.95</span></div><div class="line" id="163303"><span class="nick" style="color:#80b1d3"><a href="#163303" label="[16:33:03]">&lt;janneke&gt;</a></span><span class="message">*problematic</span></div><div class="line" id="163340"><span class="nick" style="color:#80b1d3"><a href="#163340" label="[16:33:40]">&lt;janneke&gt;</a></span><span class="message">however, we can avoid using it until we have gcc-4.x</span></div><div class="line" id="163427"><span class="nick" style="color:#80b1d3"><a href="#163427" label="[16:34:27]">&lt;janneke&gt;</a></span><span class="message">it would be a feature if we either got rid of xz entirely, or get some good bootstrap-oriented maintenance on it</span></div><div class="line" id="163646"><span class="nick" style="color:#6d2462"><a href="#163646" label="[16:36:46]">&lt;xentrac&gt;</a></span><span class="message">I mean do we need a scheme version of it?</span></div><div class="line" id="163914"><span class="nick" style="color:#389600"><a href="#163914" label="[16:39:14]">&lt;oriansj&gt;</a></span><span class="message">need no; would it be nice to have, yes</span></div><div class="line" id="164033"><span class="nick" style="color:#234e69"><a href="#164033" label="[16:40:33]">&lt;dddddd&gt;</a></span><span class="message">Hello booters!</span></div><div class="line" id="164045"><span class="nick" style="color:#389600"><a href="#164045" label="[16:40:45]">&lt;oriansj&gt;</a></span><span class="message">how goes the aarch64 work?</span></div><div class="line" id="164541"><span class="nick" style="color:#234e69"><a href="#164541" label="[16:45:41]">&lt;dddddd&gt;</a></span><span class="message">fine, msub for % is working. I have some simplification for if that I need to check on the metal and port to the rest of the control structures.</span></div><div class="line" id="164630"><span class="nick" style="color:#234e69"><a href="#164630" label="[16:46:30]">&lt;dddddd&gt;</a></span><span class="message">slow but steady progress last weekends</span></div><div class="line" id="164740"><span class="nick" style="color:#389600"><a href="#164740" label="[16:47:40]">&lt;oriansj&gt;</a></span><span class="message">nice</span></div><div class="line" id="164806"><span class="nick" style="color:#389600"><a href="#164806" label="[16:48:06]">&lt;oriansj&gt;</a></span><span class="message">hopefully you are having lots of fun</span></div><div class="line" id="165449"><span class="nick" style="color:#389600"><a href="#165449" label="[16:54:49]">&lt;oriansj&gt;</a></span><span class="message">I probably prepare for mescc-tools-seed Release v1.1 by including mes-m2 into the build process</span></div><div class="line" id="165517"><span class="nick" style="color:#80b1d3"><a href="#165517" label="[16:55:17]">&lt;janneke&gt;</a></span><span class="message">xentrac: a scheme version of gzip has higher priority for me than xz</span></div><div class="line" id="165609"><span class="nick" style="color:#80b1d3"><a href="#165609" label="[16:56:09]">&lt;janneke&gt;</a></span><span class="message">guix uses xz to store patched tarballs</span></div><div class="line" id="165625"><span class="nick" style="color:#80b1d3"><a href="#165625" label="[16:56:25]">&lt;janneke&gt;</a></span><span class="message">we can work around that by applying patches in the build recipe</span></div><div class="line" id="165710"><span class="nick" style="color:#80b1d3"><a href="#165710" label="[16:57:10]">&lt;janneke&gt;</a></span><span class="message">another workaround could be to tell guix to use gzip for patched bootstrap source tarballs, that needs some work</span></div><div class="line" id="170241"><span class="nick" style="color:#389600"><a href="#170241" label="[17:02:41]">&lt;oriansj&gt;</a></span><span class="message">well tar files would be fine as compression isn't required at these sizes</span></div><div class="line" id="170319"><span class="nick" style="color:#389600"><a href="#170319" label="[17:03:19]">&lt;oriansj&gt;</a></span><span class="message">provided of course Mescc can compile gzip</span></div><div class="line" id="170410"><span class="nick" style="color:#6c3d55"><a href="#170410" label="[17:04:10]">*</a></span><span class="message">xentrac isn't required at these sizes</span></div><div class="line" id="170453"><span class="nick" style="color:#389600"><a href="#170453" label="[17:04:53]">&lt;oriansj&gt;</a></span><span class="message">* xentrac is clearly wrong *</span></div><div class="line" id="170514"><span class="nick" style="color:#6d2462"><a href="#170514" label="[17:05:14]">&lt;xentrac&gt;</a></span><span class="message">well that goes without saying</span></div><div class="line" id="170623"><span class="nick" style="color:#389600"><a href="#170623" label="[17:06:23]">&lt;oriansj&gt;</a></span><span class="message">Nothing worth having came from a man who wasn't willing to be wrong</span></div><div class="line" id="170640"><span class="nick" style="color:#389600"><a href="#170640" label="[17:06:40]">&lt;oriansj&gt;</a></span><span class="message">keep being awesome xentrac</span></div><div class="line" id="170650"><span class="nick" style="color:#6c3d55"><a href="#170650" label="[17:06:50]">*</a></span><span class="message">xentrac blushes</span></div><div class="line" id="171602"><span class="nick" style="color:#389600"><a href="#171602" label="[17:16:02]">&lt;oriansj&gt;</a></span><span class="message">janneke: my current goal: make it possible to just git clone --recursive mescc-tools-seed and kaem --verbose strict and have the future guix seed built</span></div><div class="line" id="171640"><span class="nick" style="color:#389600"><a href="#171640" label="[17:16:40]">&lt;oriansj&gt;</a></span><span class="message">So I am integrating the mes-m2 build into it and will include the initial self-host steps required for mes.c</span></div><div class="line" id="171708"><span class="nick" style="color:#389600"><a href="#171708" label="[17:17:08]">&lt;oriansj&gt;</a></span><span class="message">but as of right now mes-m2 isnt at the self-host stage; I'll just put what I have</span></div><div class="line" id="174337"><span class="nick" style="color:#80b1d3"><a href="#174337" label="[17:43:37]">&lt;janneke&gt;</a></span><span class="message">oriansj: good plan</span></div><div class="line" id="174506"><span class="nick" style="color:#80b1d3"><a href="#174506" label="[17:45:06]">&lt;janneke&gt;</a></span><span class="message">oriansj: the scheme-only bootstrap uses uncompressed, plain tar balls for mes, tcc, make and gzip</span></div><div class="line" id="174527"><span class="nick" style="color:#80b1d3"><a href="#174527" label="[17:45:27]">&lt;janneke&gt;</a></span><span class="message">for now, that's pretty ok'ish</span></div><div class="line" id="174619"><span class="nick" style="color:#6d2462"><a href="#174619" label="[17:46:19]">&lt;xentrac&gt;</a></span><span class="message">if we had a scheme gzip, could we dispense with all four of those?</span></div><div class="line" id="174622"><span class="nick" style="color:#80b1d3"><a href="#174622" label="[17:46:22]">&lt;janneke&gt;</a></span><span class="message">another options is a scripted build for gzip, and use tar.gz for make already</span></div><div class="line" id="174643"><span class="nick" style="color:#389600"><a href="#174643" label="[17:46:43]">&lt;oriansj&gt;</a></span><span class="message">well we always can do kaem scripts</span></div><div class="line" id="174649"><span class="nick" style="color:#6d2462"><a href="#174649" label="[17:46:49]">&lt;xentrac&gt;</a></span><span class="message">heh</span></div><div class="line" id="174651"><span class="nick" style="color:#80b1d3"><a href="#174651" label="[17:46:51]">&lt;janneke&gt;</a></span><span class="message">xentrac: yes, we could use regular .tar.gz balls</span></div><div class="line" id="174729"><span class="nick" style="color:#6c3d55"><a href="#174729" label="[17:47:29]">*</a></span><span class="message">janneke goes to prepare dinner</span></div><div class="line" id="174913"><span class="nick" style="color:#6c3d55"><a href="#174913" label="[17:49:13]">*</a></span><span class="message">xentrac wishes he hadn't compressd his dinner with xz</span></div><div class="line" id="174917"><span class="nick" style="color:#389600"><a href="#174917" label="[17:49:17]">&lt;oriansj&gt;</a></span><span class="message">it just depends on which gets done first: someone writes gz in scheme or someone writes a kaem.run script for gzip's build</span></div><div class="line" id="174932"><span class="nick" style="color:#6d2462"><a href="#174932" label="[17:49:32]">&lt;xentrac&gt;</a></span><span class="message">the second one sounds a lot easier</span></div><div class="line" id="174939"><span class="nick" style="color:#6d2462"><a href="#174939" label="[17:49:39]">&lt;xentrac&gt;</a></span><span class="message">but the first one sounds a lot cooler</span></div><div class="line" id="175001"><span class="nick" style="color:#389600"><a href="#175001" label="[17:50:01]">&lt;oriansj&gt;</a></span><span class="message">well nothing impressive ever was easy</span></div><div class="line" id="175116"><span class="nick" style="color:#6d2462"><a href="#175116" label="[17:51:16]">&lt;xentrac&gt;</a></span><span class="message">apparently Dijkstra thought up Dijkstra's algorithm in 20 minutes</span></div><div class="line" id="175122"><span class="nick" style="color:#389600"><a href="#175122" label="[17:51:22]">&lt;oriansj&gt;</a></span><span class="message">So open call for anyone who wants to work on either one of them ^_^</span></div><div class="line" id="175222"><span class="nick" style="color:#389600"><a href="#175222" label="[17:52:22]">&lt;oriansj&gt;</a></span><span class="message">xentrac: but yet there are entire classes of programmers who take months to get it</span></div><div class="line" id="175251"><span class="nick" style="color:#6d2462"><a href="#175251" label="[17:52:51]">&lt;xentrac&gt;</a></span><span class="message">I think probably the hard part is becoming the kind of person for whom thinking up Dijkstra's algorithm is easy</span></div><div class="line" id="175321"><span class="nick" style="color:#6d2462"><a href="#175321" label="[17:53:21]">&lt;xentrac&gt;</a></span><span class="message">I remember a Feynman story about drumming</span></div><div class="line" id="175352"><span class="nick" style="color:#6d2462"><a href="#175352" label="[17:53:52]">&lt;xentrac&gt;</a></span><span class="message">He was doing this bongo ballet thing or something, and they had a composer who had written a score for it</span></div><div class="line" id="175434"><span class="nick" style="color:#6d2462"><a href="#175434" label="[17:54:34]">&lt;xentrac&gt;</a></span><span class="message">and he and the other guys playing the drums gradually learned to play the score, measure by painstaking measure</span></div><div class="line" id="175442"><span class="nick" style="color:#6d2462"><a href="#175442" label="[17:54:42]">&lt;xentrac&gt;</a></span><span class="message">by practicing for weeks and weeks they finally got it</span></div><div class="line" id="175506"><span class="nick" style="color:#6d2462"><a href="#175506" label="[17:55:06]">&lt;xentrac&gt;</a></span><span class="message">then one day he showed the score to an experienced drummer who could sight-read</span></div><div class="line" id="175527"><span class="nick" style="color:#6d2462"><a href="#175527" label="[17:55:27]">&lt;xentrac&gt;</a></span><span class="message">and the guy said, &quot;oh, it's like this?&quot; and knocked out the rhythm immediately on his drum set</span></div><div class="line" id="175555"><span class="nick" style="color:#6d2462"><a href="#175555" label="[17:55:55]">&lt;xentrac&gt;</a></span><span class="message">Feynman was very impressed that the drummer could do in seconds what had taken him weeks</span></div><div class="line" id="175621"><span class="nick" style="color:#6d2462"><a href="#175621" label="[17:56:21]">&lt;xentrac&gt;</a></span><span class="message">For the drummer it was easy; for Feynman it was impressive.  But becoming the drummer wasn't easy</span></div><div class="line" id="175627"><span class="nick" style="color:#389600"><a href="#175627" label="[17:56:27]">&lt;oriansj&gt;</a></span><span class="message">indeed</span></div><div class="line" id="175921"><span class="nick" style="color:#6d2462"><a href="#175921" label="[17:59:21]">&lt;xentrac&gt;</a></span><span class="message">(my favorite Feynman stories are the Feynman stories where Feynman isn't just telling you an anecdote about how smart Feynman is)</span></div><div class="line" id="181521"><span class="nick" style="color:#389600"><a href="#181521" label="[18:15:21]">&lt;oriansj&gt;</a></span><span class="message">have you seen the Feynman talk about AI?</span></div><div class="line" id="181727"><span class="nick" style="color:#6d2462"><a href="#181727" label="[18:17:27]">&lt;xentrac&gt;</a></span><span class="message">no?</span></div><div class="line" id="182525"><span class="nick" style="color:#389600"><a href="#182525" label="[18:25:25]">&lt;oriansj&gt;</a></span><span class="message">janneke: and the initial x86 port of mes-m2 passed all tests!!!</span></div><div class="line" id="182626"><span class="nick" style="color:#389600"><a href="#182626" label="[18:26:26]">&lt;oriansj&gt;</a></span><span class="message">xentrac: <a rel="nofollow" href="https://www.youtube.com/watch?v=EKWGGDXe5MA">https://www.youtube.com/watch?v=EKWGGDXe5MA</a> </span></div><div class="line" id="183114"><span class="nick" style="color:#389600"><a href="#183114" label="[18:31:14]">&lt;oriansj&gt;</a></span><span class="message">and mescc-tools-seed v1.1 is now up</span></div><div class="line" id="183148"><span class="nick" style="color:#389600"><a href="#183148" label="[18:31:48]">&lt;oriansj&gt;</a></span><span class="message">with mes-m2 builds for both AMD64 and x86 that pass the tests</span></div><div class="line" id="184158"><span class="nick" style="color:#6d2462"><a href="#184158" label="[18:41:58]">&lt;xentrac&gt;</a></span><span class="message">thansk!</span></div><div class="line" id="184705"><span class="nick" style="color:#80b1d3"><a href="#184705" label="[18:47:05]">&lt;janneke&gt;</a></span><span class="message">oriansj: brilliant work, as always!</span></div><div class="line" id="185408"><span class="nick" style="color:#389600"><a href="#185408" label="[18:54:08]">&lt;oriansj&gt;</a></span><span class="message">janneke: I was thinking of a behavior change in mes.c and mes-m2; if the ENV variable MES exists fallback to the MES_BOOT behavior of mes.c; otherwise use the easier to test behavior of mes-m2</span></div><div class="line" id="185557"><span class="nick" style="color:#389600"><a href="#185557" label="[18:55:57]">&lt;oriansj&gt;</a></span><span class="message">or we could do the reverse with another variable name</span></div><div class="line" id="185832"><span class="nick" style="color:#80b1d3"><a href="#185832" label="[18:58:32]">&lt;janneke&gt;</a></span><span class="message">oriansj: ah nice -- yes, let's use another variable..or wait</span></div><div class="line" id="185856"><span class="nick" style="color:#80b1d3"><a href="#185856" label="[18:58:56]">&lt;janneke&gt;</a></span><span class="message">the mes build system uses `MES' in scripts to set the mes executable</span></div><div class="line" id="185913"><span class="nick" style="color:#80b1d3"><a href="#185913" label="[18:59:13]">&lt;janneke&gt;</a></span><span class="message">oriansj: you have seen more of those scripts than you would like, i guess :-/</span></div><div class="line" id="185924"><span class="nick" style="color:#80b1d3"><a href="#185924" label="[18:59:24]">&lt;janneke&gt;</a></span><span class="message">and it's a bit of a mess</span></div><div class="line" id="185942"><span class="nick" style="color:#389600"><a href="#185942" label="[18:59:42]">&lt;oriansj&gt;</a></span><span class="message">how about MES_CORE</span></div><div class="line" id="185943"><span class="nick" style="color:#80b1d3"><a href="#185943" label="[18:59:43]">&lt;janneke&gt;</a></span><span class="message">i have also been using `GUILE' and 'SCHEME' to set the scheme interpreter variable</span></div><div class="line" id="190004"><span class="nick" style="color:#80b1d3"><a href="#190004" label="[19:00:04]">&lt;janneke&gt;</a></span><span class="message">that needs to be cleaned up i guess</span></div><div class="line" id="190013"><span class="nick" style="color:#80b1d3"><a href="#190013" label="[19:00:13]">&lt;janneke&gt;</a></span><span class="message">yeah, MES_CORE is perfect</span></div><div class="line" id="190018"><span class="nick" style="color:#389600"><a href="#190018" label="[19:00:18]">&lt;oriansj&gt;</a></span><span class="message">if set; use the new behavior for testing</span></div><div class="line" id="190054"><span class="nick" style="color:#389600"><a href="#190054" label="[19:00:54]">&lt;oriansj&gt;</a></span><span class="message">otherwise load the boot.scm per the mes.c way of doing things and exit when done</span></div><div class="line" id="192822"><span class="nick" style="color:#389600"><a href="#192822" label="[19:28:22]">&lt;oriansj&gt;</a></span><span class="message">I'll just throw up a minimal version so that you can play with it</span></div><div class="line" id="194334"><span class="nick" style="color:#389600"><a href="#194334" label="[19:43:34]">&lt;oriansj&gt;</a></span><span class="message">and it looks like I made a mistake with env_lookup</span></div><div class="line" id="195037"><span class="nick" style="color:#389600"><a href="#195037" label="[19:50:37]">&lt;oriansj&gt;</a></span><span class="message">janneke: the primitive version is up and I'll start the process of getting mes-m2 more mes.c friendly</span></div><div class="line" id="211104"><span class="nick" style="color:#d9d9d9"><a href="#211104" label="[21:11:04]">&lt;janneke_&gt;</a></span><span class="message">\o/</span></div><div class="line" id="211112"><span class="nick">***</span><span class="message notice">janneke_ is now known as janneke</span></div><br /></div></body></html>