<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-11-12.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000058"><span class="nick" style="color:#389600"><a href="#000058" label="[00:00:58]">&lt;oriansj&gt;</a></span><span class="message">literally 50 lines if you want to get fancy: <a rel="nofollow" href="https://github.com/oriansj/Slow_Lisp/blob/master/lisp_read.c#L56">https://github.com/oriansj/Slow_Lisp/blob/master/lisp_read.c#L56</a> </span></div><div class="line" id="000726"><span class="nick" style="color:#8dd3c7"><a href="#000726" label="[00:07:26]">&lt;stikonas&gt;</a></span><span class="message">well, list is basically designed to have a very simple syntax</span></div><div class="line" id="001247"><span class="nick" style="color:#389600"><a href="#001247" label="[00:12:47]">&lt;oriansj&gt;</a></span><span class="message">well s-expressions wasn't so much designed as stumbled upon while trying to figure out how to implement M-expressions</span></div><div class="line" id="001548"><span class="nick" style="color:#389600"><a href="#001548" label="[00:15:48]">&lt;oriansj&gt;</a></span><span class="message">but yeah, if implementation simplicity and ease of porting was the goal for C, s-expressions would have been much easier to do in assembly</span></div><div class="line" id="001851"><span class="nick" style="color:#389600"><a href="#001851" label="[00:18:51]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/stage0/blob/master/stage2/lisp.s#L124">https://github.com/oriansj/stage0/blob/master/stage2/lisp.s#L124</a>  like 60 lines of assembly total</span></div><div class="line" id="002131"><span class="nick" style="color:#389600"><a href="#002131" label="[00:21:31]">&lt;oriansj&gt;</a></span><span class="message">oh and your M2-Planet enhancement was been merged.</span></div><div class="line" id="002435"><span class="nick" style="color:#389600"><a href="#002435" label="[00:24:35]">&lt;oriansj&gt;</a></span><span class="message">and we found a crash</span></div><div class="line" id="002753"><span class="nick" style="color:#8dd3c7"><a href="#002753" label="[00:27:53]">&lt;stikonas&gt;</a></span><span class="message">hmm, that's quick...</span></div><div class="line" id="004144"><span class="nick" style="color:#8dd3c7"><a href="#004144" label="[00:41:44]">&lt;stikonas&gt;</a></span><span class="message">oriansj: could it be that head-&gt;prev-&gt;s crashes?</span></div><div class="line" id="004159"><span class="nick" style="color:#8dd3c7"><a href="#004159" label="[00:41:59]">&lt;stikonas&gt;</a></span><span class="message">e.g. if you give input like += 1</span></div><div class="line" id="004327"><span class="nick" style="color:#8dd3c7"><a href="#004327" label="[00:43:27]">&lt;stikonas&gt;</a></span><span class="message">oriansj: yes, that crashes</span></div><div class="line" id="004359"><span class="nick" style="color:#8dd3c7"><a href="#004359" label="[00:43:59]">&lt;stikonas&gt;</a></span><span class="message">oriansj: just put &quot;+=&quot; as input file</span></div><div class="line" id="005013"><span class="nick" style="color:#389600"><a href="#005013" label="[00:50:13]">&lt;oriansj&gt;</a></span><span class="message">yes that is exactly the case found</span></div><div class="line" id="005151"><span class="nick" style="color:#389600"><a href="#005151" label="[00:51:51]">&lt;oriansj&gt;</a></span><span class="message">I'm thinking of putting the fix in insert_token</span></div><div class="line" id="005310"><span class="nick" style="color:#8dd3c7"><a href="#005310" label="[00:53:10]">&lt;stikonas&gt;</a></span><span class="message">yaeh, I have a working fix</span></div><div class="line" id="005333"><span class="nick" style="color:#8dd3c7"><a href="#005333" label="[00:53:33]">&lt;stikonas&gt;</a></span><span class="message">probably the same as yours</span></div><div class="line" id="005453"><span class="nick" style="color:#389600"><a href="#005453" label="[00:54:53]">&lt;oriansj&gt;</a></span><span class="message">a simple require is all that it requires (unless you want a full line error message)</span></div><div class="line" id="005511"><span class="nick" style="color:#8dd3c7"><a href="#005511" label="[00:55:11]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/stikonas/M2-Planet/commit/ba51f3dcc8807a7e3d9e68686732a3c28de87d20">https://github.com/stikonas/M2-Planet/commit/ba51f3dcc8807a7e3d9e68686732a3c28de87d20</a> </span></div><div class="line" id="005513"><span class="nick" style="color:#389600"><a href="#005513" label="[00:55:13]">&lt;oriansj&gt;</a></span><span class="message">but yeah, I'm finishing up the commit locally</span></div><div class="line" id="005536"><span class="nick" style="color:#8dd3c7"><a href="#005536" label="[00:55:36]">&lt;stikonas&gt;</a></span><span class="message">yeah, I also had require</span></div><div class="line" id="005612"><span class="nick" style="color:#389600"><a href="#005612" label="[00:56:12]">&lt;oriansj&gt;</a></span><span class="message">I guess that works too; I'll merge yours</span></div><div class="line" id="005635"><span class="nick" style="color:#8dd3c7"><a href="#005635" label="[00:56:35]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/pull/32">https://github.com/oriansj/M2-Planet/pull/32</a> </span></div><div class="line" id="005929"><span class="nick" style="color:#8dd3c7"><a href="#005929" label="[00:59:29]">&lt;stikonas&gt;</a></span><span class="message">and I'm updating stage0-posix</span></div><div class="line" id="010521"><span class="nick" style="color:#8dd3c7"><a href="#010521" label="[01:05:21]">&lt;stikonas&gt;</a></span><span class="message">and it's here <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/pull/65">https://github.com/oriansj/stage0-posix/pull/65</a> </span></div><div class="line" id="010647"><span class="nick" style="color:#8dd3c7"><a href="#010647" label="[01:06:47]">&lt;stikonas&gt;</a></span><span class="message">something went wrong with github PR title...</span></div><div class="line" id="010657"><span class="nick" style="color:#8dd3c7"><a href="#010657" label="[01:06:57]">&lt;stikonas&gt;</a></span><span class="message">but the commit inside seems to be the correct one</span></div><div class="line" id="011929"><span class="nick" style="color:#389600"><a href="#011929" label="[01:19:29]">&lt;oriansj&gt;</a></span><span class="message">and merged</span></div><div class="line" id="012014"><span class="nick" style="color:#389600"><a href="#012014" label="[01:20:14]">&lt;oriansj&gt;</a></span><span class="message">and looks like fuzzing on the new fix, is looking good.</span></div><div class="line" id="012523"><span class="nick" style="color:#8dd3c7"><a href="#012523" label="[01:25:23]">&lt;stikonas&gt;</a></span><span class="message">ok, that's good</span></div><div class="line" id="012540"><span class="nick" style="color:#8dd3c7"><a href="#012540" label="[01:25:40]">&lt;stikonas&gt;</a></span><span class="message">well, that crash was easy to spot once you said there is a crash</span></div><div class="line" id="012735"><span class="nick" style="color:#389600"><a href="#012735" label="[01:27:35]">&lt;oriansj&gt;</a></span><span class="message">well yes, the more frequently we fuzz, the less places for possible bugs to creep in</span></div><div class="line" id="131022"><span class="nick" style="color:#6b8072"><a href="#131022" label="[13:10:22]">&lt;avalenn&gt;</a></span><span class="message">Hello. Where should I start to read stage0 and stage1 source code?</span></div><div class="line" id="131335"><span class="nick" style="color:#6b8072"><a href="#131335" label="[13:13:35]">&lt;avalenn&gt;</a></span><span class="message">In a pure &quot;I am one of those 70% of developers able to understand it so I will try&quot; way.</span></div><div class="line" id="131453"><span class="nick" style="color:#80b1d3"><a href="#131453" label="[13:14:53]">&lt;riv&gt;</a></span><span class="message">wb avalenn</span></div><div class="line" id="131455"><span class="nick" style="color:#80b1d3"><a href="#131455" label="[13:14:55]">&lt;riv&gt;</a></span><span class="message">start at stage0</span></div><div class="line" id="131838"><span class="nick" style="color:#6b8072"><a href="#131838" label="[13:18:38]">&lt;avalenn&gt;</a></span><span class="message">s/able to/that should be able to/</span></div><div class="line" id="132319"><span class="nick" style="color:#389600"><a href="#132319" label="[13:23:19]">&lt;oriansj&gt;</a></span><span class="message">avalenn: well first which architecture would you like to use for trust: x86, AMD64, RISC-V(64bit, AArch64 or knight?</span></div><div class="line" id="132629"><span class="nick" style="color:#389600"><a href="#132629" label="[13:26:29]">&lt;oriansj&gt;</a></span><span class="message">for x86, AMD64, AArch64 or RISC-V you'll want to start in their respective folder in here: <a rel="nofollow" href="https://github.com/oriansj/stage0-posix">https://github.com/oriansj/stage0-posix</a>  but for the knight bare metal bootstrap: <a rel="nofollow" href="https://github.com/oriansj/stage0">https://github.com/oriansj/stage0</a> </span></div><div class="line" id="132634"><span class="nick" style="color:#6b8072"><a href="#132634" label="[13:26:34]">&lt;avalenn&gt;</a></span><span class="message">I will focus on RISC-V for now.</span></div><div class="line" id="132641"><span class="nick" style="color:#6b8072"><a href="#132641" label="[13:26:41]">&lt;avalenn&gt;</a></span><span class="message">What is knight?</span></div><div class="line" id="132810"><span class="nick" style="color:#389600"><a href="#132810" label="[13:28:10]">&lt;oriansj&gt;</a></span><span class="message">A CPU ISA</span></div><div class="line" id="132920"><span class="nick" style="color:#389600"><a href="#132920" label="[13:29:20]">&lt;oriansj&gt;</a></span><span class="message">the roots of trust can be found here: <a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds">https://github.com/oriansj/bootstrap-seeds</a>  (or replaced by any functional equivalent)</span></div><div class="line" id="133110"><span class="nick" style="color:#389600"><a href="#133110" label="[13:31:10]">&lt;oriansj&gt;</a></span><span class="message">general descriptions can be found here: <a rel="nofollow" href="https://github.com/oriansj/talk-notes">https://github.com/oriansj/talk-notes</a>  with the actual bootstrap path being expressed here: <a rel="nofollow" href="https://github.com/oriansj/talk-notes/blob/master/live-bootstrap.dot">https://github.com/oriansj/talk-notes/blob/master/live-bootstrap.dot</a>   (or if you don't wish to generate and want just the pretty picture: <a rel="nofollow" href="https://github.com/oriansj/talk-notes/blob/master/live-bootstrap.pdf">https://github.com/oriansj/talk-notes/blob/master/live-bootstrap.pdf</a>  )</span></div><div class="line" id="133242"><span class="nick" style="color:#389600"><a href="#133242" label="[13:32:42]">&lt;oriansj&gt;</a></span><span class="message">You can find details about knight here: <a rel="nofollow" href="https://github.com/oriansj/stage0/tree/master/Knight%20Reference">https://github.com/oriansj/stage0/tree/master/Knight%20Reference</a> </span></div><div class="line" id="133316"><span class="nick" style="color:#389600"><a href="#133316" label="[13:33:16]">&lt;oriansj&gt;</a></span><span class="message">and even submit suggested improvements to the ISA if you so desire to do so.</span></div><div class="line" id="133415"><span class="nick" style="color:#6b8072"><a href="#133415" label="[13:34:15]">&lt;avalenn&gt;</a></span><span class="message">Is it an ISA designed for this project?</span></div><div class="line" id="133437"><span class="nick" style="color:#6b8072"><a href="#133437" label="[13:34:37]">&lt;avalenn&gt;</a></span><span class="message">Thank you for the links. I will try that.</span></div><div class="line" id="133532"><span class="nick" style="color:#389600"><a href="#133532" label="[13:35:32]">&lt;oriansj&gt;</a></span><span class="message">avalenn: nope, it existed long ago but never became popular; so its patents are expired</span></div><div class="line" id="133700"><span class="nick" style="color:#389600"><a href="#133700" label="[13:37:00]">&lt;oriansj&gt;</a></span><span class="message">and could be implemented out of individual logic gates by a motivated individual</span></div><div class="line" id="133725"><span class="nick" style="color:#6b8072"><a href="#133725" label="[13:37:25]">&lt;avalenn&gt;</a></span><span class="message">Ok. I could not find any pointer to Knight after a quick internet search. Thus my question.</span></div><div class="line" id="140528"><span class="nick" style="color:#8dd3c7"><a href="#140528" label="[14:05:28]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I've realized that there is an issue with those new assignment operators. If we want to fix it, probably the whole thing needs rewriting</span></div><div class="line" id="140538"><span class="nick" style="color:#8dd3c7"><a href="#140538" label="[14:05:38]">&lt;stikonas&gt;</a></span><span class="message">but I think it wouldn't affect building mes</span></div><div class="line" id="140600"><span class="nick" style="color:#8dd3c7"><a href="#140600" label="[14:06:00]">&lt;stikonas&gt;</a></span><span class="message">it doesn't support expressions on the left hand side...</span></div><div class="line" id="140611"><span class="nick" style="color:#8dd3c7"><a href="#140611" label="[14:06:11]">&lt;stikonas&gt;</a></span><span class="message">so stuff like a-&gt;b += 1;</span></div><div class="line" id="140712"><span class="nick" style="color:#8dd3c7"><a href="#140712" label="[14:07:12]">&lt;stikonas&gt;</a></span><span class="message">avalenn: I think the company that made Knight folded up before Internet became a thing</span></div><div class="line" id="140722"><span class="nick" style="color:#8dd3c7"><a href="#140722" label="[14:07:22]">&lt;stikonas&gt;</a></span><span class="message">hence can't easily find any references there</span></div><div class="line" id="140808"><span class="nick" style="color:#8dd3c7"><a href="#140808" label="[14:08:08]">&lt;stikonas&gt;</a></span><span class="message">avalenn: and if you are focussing on risc-v, it's me who wrote most of the early bootstrap code for risc-v so feel free to ask questions</span></div><div class="line" id="140843"><span class="nick" style="color:#8dd3c7"><a href="#140843" label="[14:08:43]">&lt;stikonas&gt;</a></span><span class="message">risc-v bootstrap is fone in  stage0-posix but anything after that (e.g. mes/mescc is still WIP)</span></div><div class="line" id="140903"><span class="nick" style="color:#8dd3c7"><a href="#140903" label="[14:09:03]">&lt;stikonas&gt;</a></span><span class="message">well, mes-m2 actually builds, but mescc have not yet been ported</span></div><div class="line" id="140942"><span class="nick" style="color:#8dd3c7"><a href="#140942" label="[14:09:42]">&lt;stikonas&gt;</a></span><span class="message">I think gbrlwck is trying to port mescc to risc-v</span></div><div class="line" id="141724"><span class="nick" style="color:#6b8072"><a href="#141724" label="[14:17:24]">&lt;avalenn&gt;</a></span><span class="message">stikonas: I am not sure I really will take the time to read all, depends a lot of my other activities. But if I have questions I now know where to ask them ;-)</span></div><div class="line" id="143946"><span class="nick" style="color:#6d2462"><a href="#143946" label="[14:39:46]">&lt;gbrlwck&gt;</a></span><span class="message">stikonas: yes, i am (still)..</span></div><div class="line" id="144121"><span class="nick" style="color:#6d2462"><a href="#144121" label="[14:41:21]">&lt;gbrlwck&gt;</a></span><span class="message">that being said: i get mescc to emit riscv64 M1 code, but ELF header and stuff is missing. i have implemented longjmp and setjmp (not sure if i did that correctly)... <a rel="nofollow" href="https://github.com/gbrlwck/mes-m2/">https://github.com/gbrlwck/mes-m2/</a> </span></div><div class="line" id="144125"><span class="nick" style="color:#6d2462"><a href="#144125" label="[14:41:25]">&lt;gbrlwck&gt;</a></span><span class="message">any ideas?</span></div><div class="line" id="144655"><span class="nick" style="color:#8dd3c7"><a href="#144655" label="[14:46:55]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: have you added a copy of ELF header to mes-m2?</span></div><div class="line" id="144727"><span class="nick" style="color:#8dd3c7"><a href="#144727" label="[14:47:27]">&lt;stikonas&gt;</a></span><span class="message">e.g. x86 version is in ./lib/linux/x86-mes/</span></div><div class="line" id="145048"><span class="nick" style="color:#6d2462"><a href="#145048" label="[14:50:48]">&lt;gbrlwck&gt;</a></span><span class="message">i think that's it!</span></div><div class="line" id="145642"><span class="nick" style="color:#234e69"><a href="#145642" label="[14:56:42]">&lt;muurkha&gt;</a></span><span class="message">stikonas: arguably internet existed</span></div><div class="line" id="145747"><span class="nick" style="color:#6c3d55"><a href="#145747" label="[14:57:47]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, yes, but web didn't</span></div><div class="line" id="145817"><span class="nick" style="color:#6c3d55"><a href="#145817" label="[14:58:17]">&lt;stikonas[m]&gt;</a></span><span class="message">And when people say searched on the internet they mean searched on the web</span></div><div class="line" id="150032"><span class="nick" style="color:#234e69"><a href="#150032" label="[15:00:32]">&lt;muurkha&gt;</a></span><span class="message">I searched on archie</span></div><div class="line" id="151327"><span class="nick" style="color:#6d2462"><a href="#151327" label="[15:13:27]">&lt;gbrlwck&gt;</a></span><span class="message">muurkha: archie?</span></div><div class="line" id="152734"><span class="nick" style="color:#6d2462"><a href="#152734" label="[15:27:34]">&lt;gbrlwck&gt;</a></span><span class="message">does elf64-0exit-42.hex2 _have_ to be aligned?</span></div><div class="line" id="153104"><span class="nick" style="color:#8dd3c7"><a href="#153104" label="[15:31:04]">&lt;stikonas&gt;</a></span><span class="message">probably not</span></div><div class="line" id="153109"><span class="nick" style="color:#8dd3c7"><a href="#153109" label="[15:31:09]">&lt;stikonas&gt;</a></span><span class="message">other arches don't seem to do that</span></div><div class="line" id="153212"><span class="nick" style="color:#8dd3c7"><a href="#153212" label="[15:32:12]">&lt;stikonas&gt;</a></span><span class="message">risc-v is fixed width instruction set architecture anyway</span></div><div class="line" id="153221"><span class="nick" style="color:#8dd3c7"><a href="#153221" label="[15:32:21]">&lt;stikonas&gt;</a></span><span class="message">so everything is always alligned to 4 bytes</span></div><div class="line" id="153250"><span class="nick" style="color:#8dd3c7"><a href="#153250" label="[15:32:50]">&lt;stikonas&gt;</a></span><span class="message">well, at least .text part is aligned. .data parts might not be aligned</span></div><div class="line" id="161534"><span class="nick" style="color:#d9d9d9"><a href="#161534" label="[16:15:34]">&lt;ekaitz&gt;</a></span><span class="message">stikonas: is riscv port ready?</span></div><div class="line" id="161603"><span class="nick" style="color:#d9d9d9"><a href="#161603" label="[16:16:03]">&lt;ekaitz&gt;</a></span><span class="message">i've been reading all the steps and it looks like you made a lot of work!</span></div><div class="line" id="161614"><span class="nick" style="color:#8dd3c7"><a href="#161614" label="[16:16:14]">&lt;stikonas&gt;</a></span><span class="message">ekaitz: well, stage0-posix port is done</span></div><div class="line" id="161622"><span class="nick" style="color:#d9d9d9"><a href="#161622" label="[16:16:22]">&lt;ekaitz&gt;</a></span><span class="message">wow!</span></div><div class="line" id="161626"><span class="nick" style="color:#d9d9d9"><a href="#161626" label="[16:16:26]">&lt;ekaitz&gt;</a></span><span class="message">amazing</span></div><div class="line" id="161628"><span class="nick" style="color:#8dd3c7"><a href="#161628" label="[16:16:28]">&lt;stikonas&gt;</a></span><span class="message">ekaitz: and we can even build mes-m2 but only on real HW</span></div><div class="line" id="161643"><span class="nick" style="color:#8dd3c7"><a href="#161643" label="[16:16:43]">&lt;stikonas&gt;</a></span><span class="message">does not work that well in qemu-user emulation</span></div><div class="line" id="161700"><span class="nick" style="color:#d9d9d9"><a href="#161700" label="[16:17:00]">&lt;ekaitz&gt;</a></span><span class="message">man this is awesome</span></div><div class="line" id="161701"><span class="nick" style="color:#8dd3c7"><a href="#161701" label="[16:17:01]">&lt;stikonas&gt;</a></span><span class="message">(due to us using a lot of brk space that qemu does not like)</span></div><div class="line" id="161720"><span class="nick" style="color:#8dd3c7"><a href="#161720" label="[16:17:20]">&lt;stikonas&gt;</a></span><span class="message">ekaitz: and mescc port is in progress (but not by me)</span></div><div class="line" id="161739"><span class="nick" style="color:#d9d9d9"><a href="#161739" label="[16:17:39]">&lt;ekaitz&gt;</a></span><span class="message">oh really cool</span></div><div class="line" id="161755"><span class="nick" style="color:#8dd3c7"><a href="#161755" label="[16:17:55]">&lt;stikonas&gt;</a></span><span class="message">but after that it's more complicated...</span></div><div class="line" id="161759"><span class="nick" style="color:#d9d9d9"><a href="#161759" label="[16:17:59]">&lt;ekaitz&gt;</a></span><span class="message">i've been out for a couple of months and all this happened!</span></div><div class="line" id="161805"><span class="nick" style="color:#8dd3c7"><a href="#161805" label="[16:18:05]">&lt;stikonas&gt;</a></span><span class="message">mescc-&gt;tcc only works on x86</span></div><div class="line" id="161812"><span class="nick" style="color:#8dd3c7"><a href="#161812" label="[16:18:12]">&lt;stikonas&gt;</a></span><span class="message">ekaitz: well, not I moved onto improving M2-Planet</span></div><div class="line" id="161822"><span class="nick" style="color:#8dd3c7"><a href="#161822" label="[16:18:22]">&lt;stikonas&gt;</a></span><span class="message">to actally make mes-m2 unnecessary</span></div><div class="line" id="161828"><span class="nick" style="color:#8dd3c7"><a href="#161828" label="[16:18:28]">&lt;stikonas&gt;</a></span><span class="message">and to build upstream mes</span></div><div class="line" id="161837"><span class="nick" style="color:#d9d9d9"><a href="#161837" label="[16:18:37]">&lt;ekaitz&gt;</a></span><span class="message">oh great</span></div><div class="line" id="161859"><span class="nick" style="color:#d9d9d9"><a href="#161859" label="[16:18:59]">&lt;ekaitz&gt;</a></span><span class="message">if everything goes as expected I'll work on Mes in the near future</span></div><div class="line" id="161911"><span class="nick" style="color:#d9d9d9"><a href="#161911" label="[16:19:11]">&lt;ekaitz&gt;</a></span><span class="message">so we'll see if we can make tcc and everything work</span></div><div class="line" id="161933"><span class="nick" style="color:#8dd3c7"><a href="#161933" label="[16:19:33]">&lt;stikonas&gt;</a></span><span class="message">things that got added over last month are #ifdef, #ifndef, #undef, #error, #if VARIABLE, double arrays of pointers, e.g. argv[i][j] (but not int [i'</span></div><div class="line" id="161941"><span class="nick" style="color:#8dd3c7"><a href="#161941" label="[16:19:41]">&lt;stikonas&gt;</a></span><span class="message">but not int [i][j]</span></div><div class="line" id="162004"><span class="nick" style="color:#8dd3c7"><a href="#162004" label="[16:20:04]">&lt;stikonas&gt;</a></span><span class="message">then also variable dereferencing, i.e. *p</span></div><div class="line" id="162040"><span class="nick" style="color:#8dd3c7"><a href="#162040" label="[16:20:40]">&lt;stikonas&gt;</a></span><span class="message">and last change is partial support for compound assignments, e.g. a += 1;</span></div><div class="line" id="162043"><span class="nick" style="color:#6d2462"><a href="#162043" label="[16:20:43]">&lt;gbrlwck&gt;</a></span><span class="message">ekaitz: i have no ETA, but i'm currently working on MEScc to emit riscv64 M1</span></div><div class="line" id="162109"><span class="nick" style="color:#8dd3c7"><a href="#162109" label="[16:21:09]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: it would be good if you eventually you submit your port to upstream mes too</span></div><div class="line" id="162110"><span class="nick" style="color:#d9d9d9"><a href="#162110" label="[16:21:10]">&lt;ekaitz&gt;</a></span><span class="message">great!</span></div><div class="line" id="162118"><span class="nick" style="color:#8dd3c7"><a href="#162118" label="[16:21:18]">&lt;stikonas&gt;</a></span><span class="message">(as opposed to mes-m2 fork)</span></div><div class="line" id="162133"><span class="nick" style="color:#6d2462"><a href="#162133" label="[16:21:33]">&lt;gbrlwck&gt;</a></span><span class="message">stikonas: that's the plan :P but first i need to get stuff to work</span></div><div class="line" id="162139"><span class="nick" style="color:#d9d9d9"><a href="#162139" label="[16:21:39]">&lt;ekaitz&gt;</a></span><span class="message">next is to make TCC work on riscv too, right?</span></div><div class="line" id="162148"><span class="nick" style="color:#8dd3c7"><a href="#162148" label="[16:21:48]">&lt;stikonas&gt;</a></span><span class="message">yeah, upstream mes is mostly the same stuff, but need to adjust their build system</span></div><div class="line" id="162148"><span class="nick" style="color:#d9d9d9"><a href="#162148" label="[16:21:48]">&lt;ekaitz&gt;</a></span><span class="message">there's a lot of work to do around there</span></div><div class="line" id="162205"><span class="nick" style="color:#8dd3c7"><a href="#162205" label="[16:22:05]">&lt;stikonas&gt;</a></span><span class="message">ekaitz: well, TCC is trickier...</span></div><div class="line" id="162213"><span class="nick" style="color:#d9d9d9"><a href="#162213" label="[16:22:13]">&lt;ekaitz&gt;</a></span><span class="message">ofc</span></div><div class="line" id="162219"><span class="nick" style="color:#8dd3c7"><a href="#162219" label="[16:22:19]">&lt;stikonas&gt;</a></span><span class="message">we can only build older patched version of TCC</span></div><div class="line" id="162230"><span class="nick" style="color:#8dd3c7"><a href="#162230" label="[16:22:30]">&lt;stikonas&gt;</a></span><span class="message">so 1) need to backport it from newer TCC</span></div><div class="line" id="162237"><span class="nick" style="color:#8dd3c7"><a href="#162237" label="[16:22:37]">&lt;stikonas&gt;</a></span><span class="message">2) fix older TCC to work on more than just x86</span></div><div class="line" id="162316"><span class="nick" style="color:#8dd3c7"><a href="#162316" label="[16:23:16]">&lt;stikonas&gt;</a></span><span class="message">this is for of TCC that we were building <a rel="nofollow" href="https://gitlab.com/janneke/tinycc/-/tree/mes-0.23.24">https://gitlab.com/janneke/tinycc/-/tree/mes-0.23.24</a> </span></div><div class="line" id="162507"><span class="nick" style="color:#d9d9d9"><a href="#162507" label="[16:25:07]">&lt;ekaitz&gt;</a></span><span class="message">in any case that is later building some gcc that we'd need to backport too, right?</span></div><div class="line" id="162520"><span class="nick" style="color:#8dd3c7"><a href="#162520" label="[16:25:20]">&lt;stikonas&gt;</a></span><span class="message">yeah, that might also be complicated</span></div><div class="line" id="162523"><span class="nick" style="color:#8dd3c7"><a href="#162523" label="[16:25:23]">&lt;stikonas&gt;</a></span><span class="message">also binutils</span></div><div class="line" id="162534"><span class="nick" style="color:#8dd3c7"><a href="#162534" label="[16:25:34]">&lt;stikonas&gt;</a></span><span class="message">(in particular GAS)</span></div><div class="line" id="162603"><span class="nick" style="color:#8dd3c7"><a href="#162603" label="[16:26:03]">&lt;stikonas&gt;</a></span><span class="message">the newest binutils that we could build was 2.14</span></div><div class="line" id="162616"><span class="nick" style="color:#8dd3c7"><a href="#162616" label="[16:26:16]">&lt;stikonas&gt;</a></span><span class="message">(could build early in the bootstrap)</span></div><div class="line" id="162646"><span class="nick" style="color:#d9d9d9"><a href="#162646" label="[16:26:46]">&lt;ekaitz&gt;</a></span><span class="message">well we'll see if I can help with any of this</span></div><div class="line" id="162738"><span class="nick" style="color:#6d2462"><a href="#162738" label="[16:27:38]">&lt;gbrlwck&gt;</a></span><span class="message">ekaitz: of course you can</span></div><div class="line" id="162751"><span class="nick" style="color:#6d2462"><a href="#162751" label="[16:27:51]">&lt;gbrlwck&gt;</a></span><span class="message">maybe s/if/how/</span></div><div class="line" id="162946"><span class="nick" style="color:#d9d9d9"><a href="#162946" label="[16:29:46]">&lt;ekaitz&gt;</a></span><span class="message">yeah it could be</span></div><div class="line" id="163005"><span class="nick" style="color:#d9d9d9"><a href="#163005" label="[16:30:05]">&lt;ekaitz&gt;</a></span><span class="message">i'm capable of the best and the worst so we'll see hahah</span></div><div class="line" id="163016"><span class="nick" style="color:#8dd3c7"><a href="#163016" label="[16:30:16]">&lt;stikonas&gt;</a></span><span class="message">and there is also riscv32 that is not done</span></div><div class="line" id="163205"><span class="nick" style="color:#d9d9d9"><a href="#163205" label="[16:32:05]">&lt;ekaitz&gt;</a></span><span class="message">it shouldn't be very difficult</span></div><div class="line" id="163223"><span class="nick" style="color:#8dd3c7"><a href="#163223" label="[16:32:23]">&lt;stikonas&gt;</a></span><span class="message">well, getting elf header would be a start</span></div><div class="line" id="163235"><span class="nick" style="color:#8dd3c7"><a href="#163235" label="[16:32:35]">&lt;stikonas&gt;</a></span><span class="message">and you already have experience in that. After all you wrote riscv64 header</span></div><div class="line" id="163253"><span class="nick" style="color:#8dd3c7"><a href="#163253" label="[16:32:53]">&lt;stikonas&gt;</a></span><span class="message">and yes, a lot of stuff can be taken from riscv64</span></div><div class="line" id="163300"><span class="nick" style="color:#8dd3c7"><a href="#163300" label="[16:33:00]">&lt;stikonas&gt;</a></span><span class="message">just need to adjust to smaller register size</span></div><div class="line" id="163304"><span class="nick" style="color:#d9d9d9"><a href="#163304" label="[16:33:04]">&lt;ekaitz&gt;</a></span><span class="message">i basically copied the x86 one and changed two fields</span></div><div class="line" id="163321"><span class="nick" style="color:#d9d9d9"><a href="#163321" label="[16:33:21]">&lt;ekaitz&gt;</a></span><span class="message">with the info I got from the wikipedia page</span></div><div class="line" id="163323"><span class="nick" style="color:#d9d9d9"><a href="#163323" label="[16:33:23]">&lt;ekaitz&gt;</a></span><span class="message">:)</span></div><div class="line" id="163822"><span class="nick" style="color:#d9d9d9"><a href="#163822" label="[16:38:22]">&lt;ekaitz&gt;</a></span><span class="message">i'll give it a shot these days and see if I can make hex0 for risc32</span></div><div class="line" id="164648"><span class="nick" style="color:#8dd3c7"><a href="#164648" label="[16:46:48]">&lt;stikonas&gt;</a></span><span class="message">probably just need to change ld-&gt;lw after elf-header is ready</span></div><div class="line" id="164703"><span class="nick" style="color:#8dd3c7"><a href="#164703" label="[16:47:03]">&lt;stikonas&gt;</a></span><span class="message">well, and immediates that ld loads</span></div><div class="line" id="165304"><span class="nick" style="color:#d9d9d9"><a href="#165304" label="[16:53:04]">&lt;ekaitz&gt;</a></span><span class="message">yes and from that i can dig a little bit on the next steps of the process and check the changes they will need</span></div><div class="line" id="170239"><span class="nick" style="color:#234e69"><a href="#170239" label="[17:02:39]">&lt;muurkha&gt;</a></span><span class="message">gbrlwck: archie was an internet search engine that predated the web</span></div><div class="line" id="170255"><span class="nick" style="color:#234e69"><a href="#170255" label="[17:02:55]">&lt;muurkha&gt;</a></span><span class="message">it searched ftp sites</span></div><div class="line" id="170852"><span class="nick" style="color:#8dd3c7"><a href="#170852" label="[17:08:52]">&lt;stikonas&gt;</a></span><span class="message">that's still from 1990...</span></div><div class="line" id="170900"><span class="nick" style="color:#8dd3c7"><a href="#170900" label="[17:09:00]">&lt;stikonas&gt;</a></span><span class="message">I think knight is from seventies</span></div><div class="line" id="171014"><span class="nick" style="color:#234e69"><a href="#171014" label="[17:10:14]">&lt;muurkha&gt;</a></span><span class="message">yeah</span></div><div class="line" id="171027"><span class="nick" style="color:#234e69"><a href="#171027" label="[17:10:27]">&lt;muurkha&gt;</a></span><span class="message">and it's arguable whether the internet was even an internet then</span></div><div class="line" id="171351"><span class="nick" style="color:#6d2462"><a href="#171351" label="[17:13:51]">&lt;gbrlwck&gt;</a></span><span class="message">hmmm... i get &quot;mescc: file not found: &quot;x86-mes/libmescc.a&quot;&quot;.. how do i generate that?</span></div><div class="line" id="171437"><span class="nick" style="color:#6d2462"><a href="#171437" label="[17:14:37]">&lt;gbrlwck&gt;</a></span><span class="message">and &quot;riscv64-mes/libmescc.a&quot;</span></div><div class="line" id="172103"><span class="nick" style="color:#6d2462"><a href="#172103" label="[17:21:03]">&lt;gbrlwck&gt;</a></span><span class="message">nvm</span></div><div class="line" id="174925"><span class="nick" style="color:#6d2462"><a href="#174925" label="[17:49:25]">&lt;gbrlwck&gt;</a></span><span class="message">does &quot;Target label FUNCTION___init_io is not valid&quot; mean it's missing some libc?</span></div><div class="line" id="175042"><span class="nick" style="color:#8dd3c7"><a href="#175042" label="[17:50:42]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: init_io seems something from M2libc</span></div><div class="line" id="175058"><span class="nick" style="color:#8dd3c7"><a href="#175058" label="[17:50:58]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: mes libc does not use that if I remember correctly</span></div><div class="line" id="175138"><span class="nick" style="color:#8dd3c7"><a href="#175138" label="[17:51:38]">&lt;stikonas&gt;</a></span><span class="message">so not sure why something calls that function</span></div><div class="line" id="175154"><span class="nick" style="color:#8dd3c7"><a href="#175154" label="[17:51:54]">&lt;stikonas&gt;</a></span><span class="message">grepping init_io does not find anything in mes</span></div><div class="line" id="175218"><span class="nick" style="color:#8dd3c7"><a href="#175218" label="[17:52:18]">&lt;stikonas&gt;</a></span><span class="message">it is used in M2libc's libc-full.m1</span></div><div class="line" id="175228"><span class="nick" style="color:#6d2462"><a href="#175228" label="[17:52:28]">&lt;gbrlwck&gt;</a></span><span class="message">it appears in my crt1.o (M1) which i've just compiled</span></div><div class="line" id="175239"><span class="nick" style="color:#8dd3c7"><a href="#175239" label="[17:52:39]">&lt;stikonas&gt;</a></span><span class="message">compiled from which source?</span></div><div class="line" id="175332"><span class="nick" style="color:#8dd3c7"><a href="#175332" label="[17:53:32]">&lt;stikonas&gt;</a></span><span class="message">hmm, live-bootstrap builds it from lib/linux/x86-mes-mescc/crt1.c</span></div><div class="line" id="175423"><span class="nick" style="color:#8dd3c7"><a href="#175423" label="[17:54:23]">&lt;stikonas&gt;</a></span><span class="message">did you write an equivalent file for riscv?</span></div><div class="line" id="175555"><span class="nick" style="color:#6d2462"><a href="#175555" label="[17:55:55]">&lt;gbrlwck&gt;</a></span><span class="message">i compiled mes-m2/lib/linux/riscv64-mes-m2/crt1.M1 (using stage0-posix's M1) and copied it to lib/riscv64-mes/crt1.o</span></div><div class="line" id="175718"><span class="nick" style="color:#8dd3c7"><a href="#175718" label="[17:57:18]">&lt;stikonas&gt;</a></span><span class="message">yeah, that wouldn't work</span></div><div class="line" id="175726"><span class="nick" style="color:#8dd3c7"><a href="#175726" label="[17:57:26]">&lt;stikonas&gt;</a></span><span class="message">that crt1.M1 file is for M2-Planet</span></div><div class="line" id="175732"><span class="nick" style="color:#8dd3c7"><a href="#175732" label="[17:57:32]">&lt;stikonas&gt;</a></span><span class="message">don't use anything from -m2 folders</span></div><div class="line" id="175736"><span class="nick" style="color:#6d2462"><a href="#175736" label="[17:57:36]">&lt;gbrlwck&gt;</a></span><span class="message">aha!</span></div><div class="line" id="175738"><span class="nick" style="color:#6d2462"><a href="#175738" label="[17:57:38]">&lt;gbrlwck&gt;</a></span><span class="message">k</span></div><div class="line" id="175808"><span class="nick" style="color:#8dd3c7"><a href="#175808" label="[17:58:08]">&lt;stikonas&gt;</a></span><span class="message">everything in -m2 is for m2-Planet</span></div><div class="line" id="175820"><span class="nick" style="color:#8dd3c7"><a href="#175820" label="[17:58:20]">&lt;stikonas&gt;</a></span><span class="message">and in -gcc for gcc and -mescc for mescc</span></div><div class="line" id="175836"><span class="nick" style="color:#6d2462"><a href="#175836" label="[17:58:36]">&lt;gbrlwck&gt;</a></span><span class="message">i see</span></div><div class="line" id="175901"><span class="nick" style="color:#8dd3c7"><a href="#175901" label="[17:59:01]">&lt;stikonas&gt;</a></span><span class="message">calling convention, etc might be different</span></div><div class="line" id="175941"><span class="nick" style="color:#8dd3c7"><a href="#175941" label="[17:59:41]">&lt;stikonas&gt;</a></span><span class="message">look at crt1.c file in lib/linux/$arch-mescc directories</span></div><div class="line" id="180000"><span class="nick" style="color:#8dd3c7"><a href="#180000" label="[18:00:00]">&lt;stikonas&gt;</a></span><span class="message">it's all inline assembly though, despite .c extension</span></div><div class="line" id="180220"><span class="nick" style="color:#6d2462"><a href="#180220" label="[18:02:20]">&lt;gbrlwck&gt;</a></span><span class="message">there's none yet for riscv64 (in mes-m2). but there's work from laanwj, it just needs adaption to our (new) riscv M1</span></div><div class="line" id="181547"><span class="nick" style="color:#6d2462"><a href="#181547" label="[18:15:47]">&lt;gbrlwck&gt;</a></span><span class="message">would &quot;ld_____%t0,0(%t5)&quot; be the same as &quot;RD_T0 RS1_T5 LD&quot;?</span></div><div class="line" id="181633"><span class="nick" style="color:#8dd3c7"><a href="#181633" label="[18:16:33]">&lt;stikonas&gt;</a></span><span class="message">yes</span></div><div class="line" id="181646"><span class="nick" style="color:#6d2462"><a href="#181646" label="[18:16:46]">&lt;gbrlwck&gt;</a></span><span class="message">thanks!</span></div><div class="line" id="181705"><span class="nick" style="color:#8dd3c7"><a href="#181705" label="[18:17:05]">&lt;stikonas&gt;</a></span><span class="message">in GAS syntax it is &quot;ld t0, 0(t5)&quot;</span></div><div class="line" id="181717"><span class="nick" style="color:#8dd3c7"><a href="#181717" label="[18:17:17]">&lt;stikonas&gt;</a></span><span class="message">so that define kind of mimics that syntax</span></div><div class="line" id="181730"><span class="nick" style="color:#6d2462"><a href="#181730" label="[18:17:30]">&lt;gbrlwck&gt;</a></span><span class="message">and the 0(t5) part means 0+ the value in t5?</span></div><div class="line" id="181811"><span class="nick" style="color:#8dd3c7"><a href="#181811" label="[18:18:11]">&lt;stikonas&gt;</a></span><span class="message">yes, load from the addess 0 + t5</span></div><div class="line" id="181907"><span class="nick" style="color:#8dd3c7"><a href="#181907" label="[18:19:07]">&lt;stikonas&gt;</a></span><span class="message">and you can always compare gas vs m1 syntax using Development prototypes that we have</span></div><div class="line" id="181923"><span class="nick" style="color:#8dd3c7"><a href="#181923" label="[18:19:23]">&lt;stikonas&gt;</a></span><span class="message">most programs have .S version written in GAS and also .M1 version</span></div><div class="line" id="182225"><span class="nick" style="color:#6d2462"><a href="#182225" label="[18:22:25]">&lt;gbrlwck&gt;</a></span><span class="message">unfortunately i think they're missing for laanwj's work in upstream MES</span></div><div class="line" id="182300"><span class="nick" style="color:#6d2462"><a href="#182300" label="[18:23:00]">&lt;gbrlwck&gt;</a></span><span class="message">what does the last part here: &quot;li_____%t1,$i32 &amp;environ&quot; mean ($i32 &amp;environ)?</span></div><div class="line" id="190516"><span class="nick" style="color:#8dd3c7"><a href="#190516" label="[19:05:16]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck I think that's load immediate value from that label</span></div><div class="line" id="190631"><span class="nick" style="color:#8dd3c7"><a href="#190631" label="[19:06:31]">&lt;stikonas&gt;</a></span><span class="message">in the new risc-v M1 syntax I was just issuing AUIPC and ADDI calls</span></div><div class="line" id="222538"><span class="nick" style="color:#389600"><a href="#222538" label="[22:25:38]">&lt;oriansj&gt;</a></span><span class="message">stikonas: looking at the operators further; one can't properly implement them in the preprocessor at all.</span></div><div class="line" id="222849"><span class="nick" style="color:#389600"><a href="#222849" label="[22:28:49]">&lt;oriansj&gt;</a></span><span class="message">now the tokenization improvement works great.</span></div><div class="line" id="222925"><span class="nick" style="color:#389600"><a href="#222925" label="[22:29:25]">&lt;oriansj&gt;</a></span><span class="message">The problem is you'll want it in the cc_core.c chain with + and / operators</span></div><div class="line" id="222946"><span class="nick" style="color:#6c3d55"><a href="#222946" label="[22:29:46]">&lt;stikonas[m]&gt;</a></span><span class="message">Yeah, I'm looking at implementing them properly</span></div><div class="line" id="223022"><span class="nick" style="color:#389600"><a href="#223022" label="[22:30:22]">&lt;oriansj&gt;</a></span><span class="message">and adding support for ++ and -- would probably fit too</span></div><div class="line" id="223023"><span class="nick" style="color:#6c3d55"><a href="#223023" label="[22:30:23]">&lt;stikonas[m]&gt;</a></span><span class="message">I do have prefix inc/decrements working if you want to review</span></div><div class="line" id="223036"><span class="nick" style="color:#389600"><a href="#223036" label="[22:30:36]">&lt;oriansj&gt;</a></span><span class="message">I'll take a look</span></div><div class="line" id="223051"><span class="nick" style="color:#6c3d55"><a href="#223051" label="[22:30:51]">&lt;stikonas[m]&gt;</a></span><span class="message">Prefix ++ works not too bad in unary-expr</span></div><div class="line" id="223150"><span class="nick" style="color:#8dd3c7"><a href="#223150" label="[22:31:50]">&lt;stikonas&gt;</a></span><span class="message">so stuff like *++p doesn't work but ++*p works</span></div><div class="line" id="223223"><span class="nick" style="color:#389600"><a href="#223223" label="[22:32:23]">&lt;oriansj&gt;</a></span><span class="message">well stuff like *++P and ++*P wouldn't work anyways in M2-Planet unless p was a char</span></div><div class="line" id="223312"><span class="nick" style="color:#8dd3c7"><a href="#223312" label="[22:33:12]">&lt;stikonas&gt;</a></span><span class="message">oriansj: <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/pull/33">https://github.com/oriansj/M2-Planet/pull/33</a> </span></div><div class="line" id="223326"><span class="nick" style="color:#8dd3c7"><a href="#223326" label="[22:33:26]">&lt;stikonas&gt;</a></span><span class="message">and it's not that useful generally</span></div><div class="line" id="223333"><span class="nick" style="color:#8dd3c7"><a href="#223333" label="[22:33:33]">&lt;stikonas&gt;</a></span><span class="message">even in gcc</span></div><div class="line" id="223431"><span class="nick" style="color:#8dd3c7"><a href="#223431" label="[22:34:31]">&lt;stikonas&gt;</a></span><span class="message">++*P is used significantly more often</span></div><div class="line" id="223507"><span class="nick" style="color:#8dd3c7"><a href="#223507" label="[22:35:07]">&lt;stikonas&gt;</a></span><span class="message">*++p probably only makes sense in gcc if you are dealing with some double array of pointers</span></div><div class="line" id="223554"><span class="nick" style="color:#8dd3c7"><a href="#223554" label="[22:35:54]">&lt;stikonas&gt;</a></span><span class="message">oriansj: as for assignment operators, I thought maybe expression() is the right place</span></div><div class="line" id="223604"><span class="nick" style="color:#234e69"><a href="#223604" label="[22:36:04]">&lt;muurkha&gt;</a></span><span class="message">no, *++p is &quot;the next item in the array p points into&quot;</span></div><div class="line" id="223607"><span class="nick" style="color:#8dd3c7"><a href="#223607" label="[22:36:07]">&lt;stikonas&gt;</a></span><span class="message">but I haven't got it working yet</span></div><div class="line" id="223618"><span class="nick" style="color:#8dd3c7"><a href="#223618" label="[22:36:18]">&lt;stikonas&gt;</a></span><span class="message">muurkha: in normal C</span></div><div class="line" id="223628"><span class="nick" style="color:#8dd3c7"><a href="#223628" label="[22:36:28]">&lt;stikonas&gt;</a></span><span class="message">M2-Planet has problems with pointer arithmetic</span></div><div class="line" id="223632"><span class="nick" style="color:#234e69"><a href="#223632" label="[22:36:32]">&lt;muurkha&gt;</a></span><span class="message">doesn't gcc compile normal C though?</span></div><div class="line" id="223638"><span class="nick" style="color:#8dd3c7"><a href="#223638" label="[22:36:38]">&lt;stikonas&gt;</a></span><span class="message">gcc yes</span></div><div class="line" id="223707"><span class="nick" style="color:#8dd3c7"><a href="#223707" label="[22:37:07]">&lt;stikonas&gt;</a></span><span class="message">well, yes, occasionally *++p might be useful but it is very rare</span></div><div class="line" id="223717"><span class="nick" style="color:#234e69"><a href="#223717" label="[22:37:17]">&lt;muurkha&gt;</a></span><span class="message">the thing I was disagreeing with was &quot;*++p probably only makes sense in gcc if&quot;, did you mean &quot;M2-Planet&quot; instead of &quot;gcc&quot; in that sentence?</span></div><div class="line" id="223749"><span class="nick" style="color:#389600"><a href="#223749" label="[22:37:49]">&lt;oriansj&gt;</a></span><span class="message">and merged</span></div><div class="line" id="223840"><span class="nick" style="color:#8dd3c7"><a href="#223840" label="[22:38:40]">&lt;stikonas&gt;</a></span><span class="message">I'm not even sure if mescc supports *++p</span></div><div class="line" id="223846"><span class="nick" style="color:#234e69"><a href="#223846" label="[22:38:46]">&lt;muurkha&gt;</a></span><span class="message">I don't think so</span></div><div class="line" id="223847"><span class="nick" style="color:#389600"><a href="#223847" label="[22:38:47]">&lt;oriansj&gt;</a></span><span class="message">muurkha: some Proper C constructs seem like a bad idea to support because they tend to be abused in ways they shouldn't be used.</span></div><div class="line" id="223902"><span class="nick" style="color:#234e69"><a href="#223902" label="[22:39:02]">&lt;muurkha&gt;</a></span><span class="message">oriansj: sure</span></div><div class="line" id="223905"><span class="nick" style="color:#8dd3c7"><a href="#223905" label="[22:39:05]">&lt;stikonas&gt;</a></span><span class="message">muurkha: yeah, I think you are right but still that makes code harder to read</span></div><div class="line" id="223921"><span class="nick" style="color:#234e69"><a href="#223921" label="[22:39:21]">&lt;muurkha&gt;</a></span><span class="message">people sometimes disagree on which ones</span></div><div class="line" id="223941"><span class="nick" style="color:#8dd3c7"><a href="#223941" label="[22:39:41]">&lt;stikonas&gt;</a></span><span class="message">well, with pointer arithmetic sometimes you can write a very short code</span></div><div class="line" id="223942"><span class="nick" style="color:#389600"><a href="#223942" label="[22:39:42]">&lt;oriansj&gt;</a></span><span class="message">also stikonas; should we look at what it would take for M2-Planet to compile the version of TCC that MesCC compiles?</span></div><div class="line" id="224005"><span class="nick" style="color:#8dd3c7"><a href="#224005" label="[22:40:05]">&lt;stikonas&gt;</a></span><span class="message">oriansj: hmm, at the very least it will require switch/case</span></div><div class="line" id="224017"><span class="nick" style="color:#8dd3c7"><a href="#224017" label="[22:40:17]">&lt;stikonas&gt;</a></span><span class="message">and meslibc</span></div><div class="line" id="224024"><span class="nick" style="color:#234e69"><a href="#224024" label="[22:40:24]">&lt;muurkha&gt;</a></span><span class="message">I think &quot;the next item in the array p points into&quot; is a useful thing to have syntax for; it can result in code being less error-prone rather than more so</span></div><div class="line" id="224036"><span class="nick" style="color:#8dd3c7"><a href="#224036" label="[22:40:36]">&lt;stikonas&gt;</a></span><span class="message">other than that, I think not too much on top of what mes requires</span></div><div class="line" id="224049"><span class="nick" style="color:#8dd3c7"><a href="#224049" label="[22:40:49]">&lt;stikonas&gt;</a></span><span class="message">isn't p[1] clearer?</span></div><div class="line" id="224051"><span class="nick" style="color:#234e69"><a href="#224051" label="[22:40:51]">&lt;muurkha&gt;</a></span><span class="message">no</span></div><div class="line" id="224055"><span class="nick" style="color:#234e69"><a href="#224055" label="[22:40:55]">&lt;muurkha&gt;</a></span><span class="message">there are a lot of algorithms that are natural to write in terms of iterating over sequences in that way</span></div><div class="line" id="224125"><span class="nick" style="color:#8dd3c7"><a href="#224125" label="[22:41:25]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I was trying to get some diff first to see what we need for mes...</span></div><div class="line" id="224129"><span class="nick" style="color:#8dd3c7"><a href="#224129" label="[22:41:29]">&lt;stikonas&gt;</a></span><span class="message">but it's unfinished</span></div><div class="line" id="224132"><span class="nick" style="color:#234e69"><a href="#224132" label="[22:41:32]">&lt;muurkha&gt;</a></span><span class="message">if you want to write it as p[i] you need to separately maintain p and i, and you have to be careful not to use i to index the wrong thing, which is something C's type system can't help you with</span></div><div class="line" id="224213"><span class="nick" style="color:#234e69"><a href="#224213" label="[22:42:13]">&lt;muurkha&gt;</a></span><span class="message">you're introducing a machine-level concept of integers instead of working with the problem-domain concept of iterators</span></div><div class="line" id="224249"><span class="nick" style="color:#8dd3c7"><a href="#224249" label="[22:42:49]">&lt;stikonas&gt;</a></span><span class="message">oriansj: <a rel="nofollow" href="https://paste.debian.net/1219344/">https://paste.debian.net/1219344/</a> </span></div><div class="line" id="224259"><span class="nick" style="color:#234e69"><a href="#224259" label="[22:42:59]">&lt;muurkha&gt;</a></span><span class="message">so indexing arrays explicitly instead of using pointer arithmetic requires you to program at a lower level, which is more error-prone</span></div><div class="line" id="224308"><span class="nick" style="color:#8dd3c7"><a href="#224308" label="[22:43:08]">&lt;stikonas&gt;</a></span><span class="message">it's mostly meslibc and i haven't looked in mes/src/* that much</span></div><div class="line" id="224339"><span class="nick" style="color:#234e69"><a href="#224339" label="[22:43:39]">&lt;muurkha&gt;</a></span><span class="message">(sometimes it's unavoidable, good luck trying to write binary search in terms of pointer arithmetic, but often it's not)</span></div><div class="line" id="224411"><span class="nick" style="color:#8dd3c7"><a href="#224411" label="[22:44:11]">&lt;stikonas&gt;</a></span><span class="message">well, true, it might be useful in some cases</span></div><div class="line" id="224428"><span class="nick" style="color:#234e69"><a href="#224428" label="[22:44:28]">&lt;muurkha&gt;</a></span><span class="message">there are people who are more comfortable with explicit numerical indexing, and if they are your intended audience, that's how you should write your code</span></div><div class="line" id="224431"><span class="nick" style="color:#8dd3c7"><a href="#224431" label="[22:44:31]">&lt;stikonas&gt;</a></span><span class="message">I think I was mostly looking &quot;useful&quot; in terms of what is used in mes or tcc</span></div><div class="line" id="224432"><span class="nick" style="color:#234e69"><a href="#224432" label="[22:44:32]">&lt;muurkha&gt;</a></span><span class="message">so they can understand it</span></div><div class="line" id="224459"><span class="nick" style="color:#8dd3c7"><a href="#224459" label="[22:44:59]">&lt;stikonas&gt;</a></span><span class="message">oriansj: oh and also at least support for . operator to get struct members</span></div><div class="line" id="224500"><span class="nick" style="color:#234e69"><a href="#224500" label="[22:45:00]">&lt;muurkha&gt;</a></span><span class="message">but being able to use pointers as iterators is a small but significant simplicity advantage</span></div><div class="line" id="224643"><span class="nick" style="color:#8dd3c7"><a href="#224643" label="[22:46:43]">&lt;stikonas&gt;</a></span><span class="message">oriansj: so at the very least for mes we need struct members .  then function-type defines in the preprocessor, postfix increments, casting</span></div><div class="line" id="224658"><span class="nick" style="color:#389600"><a href="#224658" label="[22:46:58]">&lt;oriansj&gt;</a></span><span class="message">muurkha: disagree in terms of implementation but I might grant you in regards to use</span></div><div class="line" id="224722"><span class="nick" style="color:#8dd3c7"><a href="#224722" label="[22:47:22]">&lt;stikonas&gt;</a></span><span class="message">oriansj: and I guess pointer arithmetic (1 vs sizeof)</span></div><div class="line" id="224738"><span class="nick" style="color:#8dd3c7"><a href="#224738" label="[22:47:38]">&lt;stikonas&gt;</a></span><span class="message">some of them we can try to simplify in mes rather than improving m2-planet...</span></div><div class="line" id="224741"><span class="nick" style="color:#389600"><a href="#224741" label="[22:47:41]">&lt;oriansj&gt;</a></span><span class="message">that is a good bit larger of a diff</span></div><div class="line" id="224753"><span class="nick" style="color:#8dd3c7"><a href="#224753" label="[22:47:53]">&lt;stikonas&gt;</a></span><span class="message">larger of a diff than what?</span></div><div class="line" id="224807"><span class="nick" style="color:#8dd3c7"><a href="#224807" label="[22:48:07]">&lt;stikonas&gt;</a></span><span class="message">this doesn't even cover actual mes.c files</span></div><div class="line" id="224824"><span class="nick" style="color:#389600"><a href="#224824" label="[22:48:24]">&lt;oriansj&gt;</a></span><span class="message">adding support for struct members via . and function-type defines</span></div><div class="line" id="224825"><span class="nick" style="color:#8dd3c7"><a href="#224825" label="[22:48:25]">&lt;stikonas&gt;</a></span><span class="message">janneke really did quite a bit of porting/simplification in mes-m2</span></div><div class="line" id="224832"><span class="nick" style="color:#8dd3c7"><a href="#224832" label="[22:48:32]">&lt;stikonas&gt;</a></span><span class="message">oh those</span></div><div class="line" id="224843"><span class="nick" style="color:#8dd3c7"><a href="#224843" label="[22:48:43]">&lt;stikonas&gt;</a></span><span class="message">yeah, these are more complicated things</span></div><div class="line" id="224854"><span class="nick" style="color:#8dd3c7"><a href="#224854" label="[22:48:54]">&lt;stikonas&gt;</a></span><span class="message">function type-defines are at least fully in cc_macro</span></div><div class="line" id="224858"><span class="nick" style="color:#8dd3c7"><a href="#224858" label="[22:48:58]">&lt;stikonas&gt;</a></span><span class="message">and no need to deal with cc_core</span></div><div class="line" id="224901"><span class="nick" style="color:#389600"><a href="#224901" label="[22:49:01]">&lt;oriansj&gt;</a></span><span class="message">and pointer arithmetic is gonna be a major change</span></div><div class="line" id="224903"><span class="nick" style="color:#8dd3c7"><a href="#224903" label="[22:49:03]">&lt;stikonas&gt;</a></span><span class="message">so fairly independent</span></div><div class="line" id="224916"><span class="nick" style="color:#8dd3c7"><a href="#224916" label="[22:49:16]">&lt;stikonas&gt;</a></span><span class="message">well, maybe we need to keep #ifdef __M2__ for mes then</span></div><div class="line" id="224933"><span class="nick" style="color:#389600"><a href="#224933" label="[22:49:33]">&lt;oriansj&gt;</a></span><span class="message">yep just replace them with FUNCTION statements</span></div><div class="line" id="224939"><span class="nick" style="color:#234e69"><a href="#224939" label="[22:49:39]">&lt;muurkha&gt;</a></span><span class="message">oriansj: oh, yes, pointer arithmetic is more complicated to implement than pointers without arithmetic, for sure</span></div><div class="line" id="225001"><span class="nick" style="color:#234e69"><a href="#225001" label="[22:50:01]">&lt;muurkha&gt;</a></span><span class="message">not saying it's necessarily worthwhile</span></div><div class="line" id="225035"><span class="nick" style="color:#8dd3c7"><a href="#225035" label="[22:50:35]">&lt;stikonas&gt;</a></span><span class="message">oriansj: oh you want to automatically generate functions?</span></div><div class="line" id="225039"><span class="nick" style="color:#8dd3c7"><a href="#225039" label="[22:50:39]">&lt;stikonas&gt;</a></span><span class="message">for function-like defines?</span></div><div class="line" id="225039"><span class="nick" style="color:#234e69"><a href="#225039" label="[22:50:39]">&lt;muurkha&gt;</a></span><span class="message">just saying I don't agree with the criticism that *using* it necessarily results in less-readable or more bug-prone code</span></div><div class="line" id="225059"><span class="nick" style="color:#8dd3c7"><a href="#225059" label="[22:50:59]">&lt;stikonas&gt;</a></span><span class="message">hmm, that might work but I'm not yet sure if that's the easiest option</span></div><div class="line" id="225123"><span class="nick" style="color:#8dd3c7"><a href="#225123" label="[22:51:23]">&lt;stikonas&gt;</a></span><span class="message">maybe it is...</span></div><div class="line" id="225138"><span class="nick" style="color:#8dd3c7"><a href="#225138" label="[22:51:38]">&lt;stikonas&gt;</a></span><span class="message">we mostly need to support things like #define TYPE(x) g_cells[x].type</span></div><div class="line" id="225209"><span class="nick" style="color:#8dd3c7"><a href="#225209" label="[22:52:09]">&lt;stikonas&gt;</a></span><span class="message">so if we create function TYPE which returns g_cells[x].type that might work but then the question is what is the type of x?</span></div><div class="line" id="225231"><span class="nick" style="color:#8dd3c7"><a href="#225231" label="[22:52:31]">&lt;stikonas&gt;</a></span><span class="message">defines being type-independent make it hard</span></div><div class="line" id="225257"><span class="nick" style="color:#8dd3c7"><a href="#225257" label="[22:52:57]">&lt;stikonas&gt;</a></span><span class="message">mes probably uses only ints...</span></div><div class="line" id="225345"><span class="nick" style="color:#389600"><a href="#225345" label="[22:53:45]">&lt;oriansj&gt;</a></span><span class="message">well fully proper macro expansion would solve that</span></div><div class="line" id="225417"><span class="nick" style="color:#389600"><a href="#225417" label="[22:54:17]">&lt;oriansj&gt;</a></span><span class="message">a bit of work but nothing that couldn't be done in a weekend with luck</span></div><div class="line" id="225516"><span class="nick" style="color:#8dd3c7"><a href="#225516" label="[22:55:16]">&lt;stikonas&gt;</a></span><span class="message">maybe more than a weekend...</span></div><div class="line" id="225527"><span class="nick" style="color:#8dd3c7"><a href="#225527" label="[22:55:27]">&lt;stikonas&gt;</a></span><span class="message">but it's just text replacement</span></div><div class="line" id="225531"><span class="nick" style="color:#8dd3c7"><a href="#225531" label="[22:55:31]">&lt;stikonas&gt;</a></span><span class="message">so shouldn't be impossible to do</span></div><div class="line" id="225602"><span class="nick" style="color:#8dd3c7"><a href="#225602" label="[22:56:02]">&lt;stikonas&gt;</a></span><span class="message">anyway, I should probably try to properly fix assignment operators</span></div><div class="line" id="225602"><span class="nick" style="color:#389600"><a href="#225602" label="[22:56:02]">&lt;oriansj&gt;</a></span><span class="message">plus there is code you could steal from kaem to assist</span></div><div class="line" id="225615"><span class="nick" style="color:#8dd3c7"><a href="#225615" label="[22:56:15]">&lt;stikonas&gt;</a></span><span class="message">even though what we have might already work for mes.c</span></div><div class="line" id="225644"><span class="nick" style="color:#8dd3c7"><a href="#225644" label="[22:56:44]">&lt;stikonas&gt;</a></span><span class="message">but tcc would definitely need them fixed</span></div><div class="line" id="225656"><span class="nick" style="color:#389600"><a href="#225656" label="[22:56:56]">&lt;oriansj&gt;</a></span><span class="message">the problem is there are too many possible paths forward, all of which will provide a benefit</span></div><div class="line" id="225725"><span class="nick" style="color:#8dd3c7"><a href="#225725" label="[22:57:25]">&lt;stikonas&gt;</a></span><span class="message">exactly, and I'm not sure either what to do</span></div><div class="line" id="225744"><span class="nick" style="color:#8dd3c7"><a href="#225744" label="[22:57:44]">&lt;stikonas&gt;</a></span><span class="message">well, postfix operators might be the next thing to do</span></div><div class="line" id="225752"><span class="nick" style="color:#8dd3c7"><a href="#225752" label="[22:57:52]">&lt;stikonas&gt;</a></span><span class="message">but those might be a bit quirkier</span></div><div class="line" id="225811"><span class="nick" style="color:#8dd3c7"><a href="#225811" label="[22:58:11]">&lt;stikonas&gt;</a></span><span class="message">we first use value there and only then increment</span></div><div class="line" id="225909"><span class="nick" style="color:#8dd3c7"><a href="#225909" label="[22:59:09]">&lt;stikonas&gt;</a></span><span class="message">but yes, after that I'm not sure. Indeed too many paths</span></div><div class="line" id="225913"><span class="nick" style="color:#389600"><a href="#225913" label="[22:59:13]">&lt;oriansj&gt;</a></span><span class="message">or just do expansion in cc_macro to ++ =&gt; + 1</span></div><div class="line" id="225934"><span class="nick" style="color:#8dd3c7"><a href="#225934" label="[22:59:34]">&lt;stikonas&gt;</a></span><span class="message">but that wouldn't work, would it?</span></div><div class="line" id="225946"><span class="nick" style="color:#389600"><a href="#225946" label="[22:59:46]">&lt;oriansj&gt;</a></span><span class="message">why not?</span></div><div class="line" id="225954"><span class="nick" style="color:#8dd3c7"><a href="#225954" label="[22:59:54]">&lt;stikonas&gt;</a></span><span class="message">first of all preprocessor can't tell the difrerence between pre and postincrement</span></div><div class="line" id="230011"><span class="nick" style="color:#389600"><a href="#230011" label="[23:00:11]">&lt;oriansj&gt;</a></span><span class="message">well it can look at the tokens before and after</span></div><div class="line" id="230013"><span class="nick" style="color:#8dd3c7"><a href="#230013" label="[23:00:13]">&lt;stikonas&gt;</a></span><span class="message">and then what would happen at *nextchar++</span></div><div class="line" id="230037"><span class="nick" style="color:#8dd3c7"><a href="#230037" label="[23:00:37]">&lt;stikonas&gt;</a></span><span class="message">this is the value at next char and only then we increase nextchar by 1</span></div><div class="line" id="230120"><span class="nick" style="color:#389600"><a href="#230120" label="[23:01:20]">&lt;oriansj&gt;</a></span><span class="message">hmmm</span></div><div class="line" id="230124"><span class="nick" style="color:#8dd3c7"><a href="#230124" label="[23:01:24]">&lt;stikonas&gt;</a></span><span class="message">it's probably like assignment, would work in the very simple cases in macro preprocessor</span></div><div class="line" id="230132"><span class="nick" style="color:#8dd3c7"><a href="#230132" label="[23:01:32]">&lt;stikonas&gt;</a></span><span class="message">but those more complicated ones fail</span></div><div class="line" id="230143"><span class="nick" style="color:#8dd3c7"><a href="#230143" label="[23:01:43]">&lt;stikonas&gt;</a></span><span class="message">except that in this case everybody uses more complicated construct</span></div><div class="line" id="230207"><span class="nick" style="color:#8dd3c7"><a href="#230207" label="[23:02:07]">&lt;stikonas&gt;</a></span><span class="message">mes and tcc (and everywhere else) are full of things like *p++</span></div><div class="line" id="230234"><span class="nick" style="color:#8dd3c7"><a href="#230234" label="[23:02:34]">&lt;stikonas&gt;</a></span><span class="message">hmm, although, we'll have another problem with *p++</span></div><div class="line" id="230240"><span class="nick" style="color:#8dd3c7"><a href="#230240" label="[23:02:40]">&lt;stikonas&gt;</a></span><span class="message">pointer arithmetic is not working...</span></div><div class="line" id="230307"><span class="nick" style="color:#8dd3c7"><a href="#230307" label="[23:03:07]">&lt;stikonas&gt;</a></span><span class="message">so perhaps pointer arithmetic needs sorting out</span></div><div class="line" id="230309"><span class="nick" style="color:#8dd3c7"><a href="#230309" label="[23:03:09]">&lt;stikonas&gt;</a></span><span class="message">but that's a bit scary</span></div><div class="line" id="230315"><span class="nick" style="color:#389600"><a href="#230315" label="[23:03:15]">&lt;oriansj&gt;</a></span><span class="message">very much so</span></div><div class="line" id="230335"><span class="nick" style="color:#389600"><a href="#230335" label="[23:03:35]">&lt;oriansj&gt;</a></span><span class="message">as was even basic preprocessor support until yt added cc_macro.c</span></div><div class="line" id="230425"><span class="nick" style="color:#8dd3c7"><a href="#230425" label="[23:04:25]">&lt;stikonas&gt;</a></span><span class="message">in any case M2-Planet is more capable now than what we had before yt added preprocessor</span></div><div class="line" id="230517"><span class="nick" style="color:#389600"><a href="#230517" label="[23:05:17]">&lt;oriansj&gt;</a></span><span class="message">to add proper pointer arithmetic would require changing the state machine in an ugly way that would break things for a little while</span></div><div class="line" id="230558"><span class="nick" style="color:#8dd3c7"><a href="#230558" label="[23:05:58]">&lt;stikonas&gt;</a></span><span class="message">it might be that I already did most of the easy stuff over the last few weeks</span></div><div class="line" id="230601"><span class="nick" style="color:#8dd3c7"><a href="#230601" label="[23:06:01]">&lt;stikonas&gt;</a></span><span class="message">and rest will be harder</span></div><div class="line" id="230637"><span class="nick" style="color:#389600"><a href="#230637" label="[23:06:37]">&lt;oriansj&gt;</a></span><span class="message">while depends upon how you look at it, in terms of mental complexity, no it isn't harder.</span></div><div class="line" id="230701"><span class="nick" style="color:#8dd3c7"><a href="#230701" label="[23:07:01]">&lt;stikonas&gt;</a></span><span class="message">oh another thing that mes or tcc might need is logical AND and logical OR</span></div><div class="line" id="230702"><span class="nick" style="color:#389600"><a href="#230702" label="[23:07:02]">&lt;oriansj&gt;</a></span><span class="message">But if in terms of number  of lines of code needing to be changed, yeah it is gonna grow</span></div><div class="line" id="230732"><span class="nick" style="color:#8dd3c7"><a href="#230732" label="[23:07:32]">&lt;stikonas&gt;</a></span><span class="message">right now M2-Planet ises bitwise AND/OR instead</span></div><div class="line" id="230755"><span class="nick" style="color:#389600"><a href="#230755" label="[23:07:55]">&lt;oriansj&gt;</a></span><span class="message">as it was the fastest and simplest to implement</span></div><div class="line" id="230801"><span class="nick" style="color:#8dd3c7"><a href="#230801" label="[23:08:01]">&lt;stikonas&gt;</a></span><span class="message">which works for 0 and 1 so gets us running in 95% of the cases</span></div><div class="line" id="230806"><span class="nick" style="color:#389600"><a href="#230806" label="[23:08:06]">&lt;oriansj&gt;</a></span><span class="message">as we don't build a proper AST</span></div><div class="line" id="230847"><span class="nick" style="color:#8dd3c7"><a href="#230847" label="[23:08:47]">&lt;stikonas&gt;</a></span><span class="message">mescc does build it, doesn't it?</span></div><div class="line" id="230907"><span class="nick" style="color:#389600"><a href="#230907" label="[23:09:07]">&lt;oriansj&gt;</a></span><span class="message">it uses Nyacc to do that</span></div><div class="line" id="230925"><span class="nick" style="color:#8dd3c7"><a href="#230925" label="[23:09:25]">&lt;stikonas&gt;</a></span><span class="message">yeah, that's what I thought too, when I briefly looked at nyacc</span></div><div class="line" id="230945"><span class="nick" style="color:#8dd3c7"><a href="#230945" label="[23:09:45]">&lt;stikonas&gt;</a></span><span class="message">but I'm not too familiar with scheme</span></div><div class="line" id="231021"><span class="nick" style="color:#389600"><a href="#231021" label="[23:10:21]">&lt;oriansj&gt;</a></span><span class="message">fair</span></div><div class="line" id="231055"><span class="nick" style="color:#8dd3c7"><a href="#231055" label="[23:10:55]">&lt;stikonas&gt;</a></span><span class="message">so if we don't want to support pointer arithmetic, then we just try to implement preprocessor functions, which are independent of this</span></div><div class="line" id="231110"><span class="nick" style="color:#8dd3c7"><a href="#231110" label="[23:11:10]">&lt;stikonas&gt;</a></span><span class="message">and patch remaining mes to avoid stuff that uses them</span></div><div class="line" id="231112"><span class="nick" style="color:#8dd3c7"><a href="#231112" label="[23:11:12]">&lt;stikonas&gt;</a></span><span class="message">hmm...</span></div><div class="line" id="231127"><span class="nick" style="color:#8dd3c7"><a href="#231127" label="[23:11:27]">&lt;stikonas&gt;</a></span><span class="message">it would still be a smaller patch than original mes-m2 diff</span></div><div class="line" id="231134"><span class="nick" style="color:#8dd3c7"><a href="#231134" label="[23:11:34]">&lt;stikonas&gt;</a></span><span class="message">so might be upstreamable</span></div><div class="line" id="231747"><span class="nick" style="color:#8dd3c7"><a href="#231747" label="[23:17:47]">&lt;stikonas&gt;</a></span><span class="message">oriansj: oh, and found another issue with prefix increments...</span></div><div class="line" id="231758"><span class="nick" style="color:#8dd3c7"><a href="#231758" label="[23:17:58]">&lt;stikonas&gt;</a></span><span class="message">without = increment is not stored...</span></div><div class="line" id="231812"><span class="nick" style="color:#8dd3c7"><a href="#231812" label="[23:18:12]">&lt;stikonas&gt;</a></span><span class="message">that's a bit bad...</span></div><div class="line" id="231836"><span class="nick" style="color:#8dd3c7"><a href="#231836" label="[23:18:36]">&lt;stikonas&gt;</a></span><span class="message">maybe we shouldn't have merged it yet</span></div><div class="line" id="231953"><span class="nick" style="color:#8dd3c7"><a href="#231953" label="[23:19:53]">&lt;stikonas&gt;</a></span><span class="message">anyway, over this weekend I'll try to fix this and assignments</span></div><div class="line" id="232146"><span class="nick" style="color:#389600"><a href="#232146" label="[23:21:46]">&lt;oriansj&gt;</a></span><span class="message">stikonas: here is a thought.</span></div><div class="line" id="232244"><span class="nick" style="color:#389600"><a href="#232244" label="[23:22:44]">&lt;oriansj&gt;</a></span><span class="message">what if we just stick to the minimal subset of C functionality required in M2-Planet for building mes-m2, mescc-tools and mescc-tools-extra</span></div><div class="line" id="232420"><span class="nick" style="color:#8dd3c7"><a href="#232420" label="[23:24:20]">&lt;stikonas&gt;</a></span><span class="message">maybe.. We'll have to maintain mes-m2 then</span></div><div class="line" id="232437"><span class="nick" style="color:#389600"><a href="#232437" label="[23:24:37]">&lt;oriansj&gt;</a></span><span class="message">for a little bit</span></div><div class="line" id="232443"><span class="nick" style="color:#8dd3c7"><a href="#232443" label="[23:24:43]">&lt;stikonas&gt;</a></span><span class="message">although, I would still like to fix those two things (assignments and prefix)</span></div><div class="line" id="232504"><span class="nick" style="color:#389600"><a href="#232504" label="[23:25:04]">&lt;oriansj&gt;</a></span><span class="message">stikonas: you are free to work on anything you think would be fun to do</span></div><div class="line" id="232506"><span class="nick" style="color:#8dd3c7"><a href="#232506" label="[23:25:06]">&lt;stikonas&gt;</a></span><span class="message">well, this also needs some input from janneke</span></div><div class="line" id="232517"><span class="nick" style="color:#8dd3c7"><a href="#232517" label="[23:25:17]">&lt;stikonas&gt;</a></span><span class="message">to know what his plans are for future mes</span></div><div class="line" id="232545"><span class="nick" style="color:#389600"><a href="#232545" label="[23:25:45]">&lt;oriansj&gt;</a></span><span class="message">true</span></div><div class="line" id="232614"><span class="nick" style="color:#8dd3c7"><a href="#232614" label="[23:26:14]">&lt;stikonas&gt;</a></span><span class="message">somewhat annoyingly we do support quite large subset of C</span></div><div class="line" id="232623"><span class="nick" style="color:#8dd3c7"><a href="#232623" label="[23:26:23]">&lt;stikonas&gt;</a></span><span class="message">just a tiny bit too small</span></div><div class="line" id="232725"><span class="nick" style="color:#389600"><a href="#232725" label="[23:27:25]">&lt;oriansj&gt;</a></span><span class="message">what will make you laugh is MesCC can't compile M2-Planet</span></div><div class="line" id="232735"><span class="nick" style="color:#8dd3c7"><a href="#232735" label="[23:27:35]">&lt;stikonas&gt;</a></span><span class="message">oh</span></div><div class="line" id="232751"><span class="nick" style="color:#8dd3c7"><a href="#232751" label="[23:27:51]">&lt;stikonas&gt;</a></span><span class="message">what feature it doens't like?</span></div><div class="line" id="232937"><span class="nick" style="color:#389600"><a href="#232937" label="[23:29:37]">&lt;oriansj&gt;</a></span><span class="message">don't remember exactly but there is even a commit in mes-m2 about it</span></div><div class="line" id="233046"><span class="nick" style="color:#389600"><a href="#233046" label="[23:30:46]">&lt;oriansj&gt;</a></span><span class="message">mes.c never was designed in terms of what M2-Planet supported, only what MesCC could compile and get good performance out of</span></div><div class="line" id="233122"><span class="nick" style="color:#389600"><a href="#233122" label="[23:31:22]">&lt;oriansj&gt;</a></span><span class="message">as the 9 hour compile times with a segfault at the end were brutal earlier in MesCC's development</span></div><div class="line" id="233140"><span class="nick" style="color:#389600"><a href="#233140" label="[23:31:40]">&lt;oriansj&gt;</a></span><span class="message">so considerable effort was spent on speeding that up</span></div><div class="line" id="233223"><span class="nick" style="color:#389600"><a href="#233223" label="[23:32:23]">&lt;oriansj&gt;</a></span><span class="message">M2-Planet was entirely an after thought, as janneke was originally going to do Mes.c in hex0</span></div><div class="line" id="233324"><span class="nick" style="color:#389600"><a href="#233324" label="[23:33:24]">&lt;oriansj&gt;</a></span><span class="message">you can see that in his fosdem 2017 talk</span></div><div class="line" id="233334"><span class="nick" style="color:#389600"><a href="#233334" label="[23:33:34]">&lt;oriansj&gt;</a></span><span class="message">(link in my talk notes)</span></div><div class="line" id="233357"><span class="nick" style="color:#8dd3c7"><a href="#233357" label="[23:33:57]">&lt;stikonas&gt;</a></span><span class="message">hmm, yeah, mes.c in hex0 would be brutal too</span></div><div class="line" id="233411"><span class="nick" style="color:#389600"><a href="#233411" label="[23:34:11]">&lt;oriansj&gt;</a></span><span class="message">even the use of mescc-tools was a very slow and painful transistion</span></div><div class="line" id="233414"><span class="nick" style="color:#8dd3c7"><a href="#233414" label="[23:34:14]">&lt;stikonas&gt;</a></span><span class="message">well, M2-Planet is in principle quite nicely done</span></div><div class="line" id="233506"><span class="nick" style="color:#8dd3c7"><a href="#233506" label="[23:35:06]">&lt;stikonas&gt;</a></span><span class="message">and simplified version is portable to M1 assembly via (cc_*)</span></div><div class="line" id="233514"><span class="nick" style="color:#389600"><a href="#233514" label="[23:35:14]">&lt;oriansj&gt;</a></span><span class="message">and the follow up M3 hasn't gotten much love because it is hard to focus and program with a screaming toddler demanding playtime with me</span></div><div class="line" id="233533"><span class="nick" style="color:#8dd3c7"><a href="#233533" label="[23:35:33]">&lt;stikonas&gt;</a></span><span class="message">remind me what was M3 about?</span></div><div class="line" id="233557"><span class="nick" style="color:#389600"><a href="#233557" label="[23:35:57]">&lt;oriansj&gt;</a></span><span class="message">think binutils compatible linker and assembler and a compiler able to directly build TCC</span></div><div class="line" id="233628"><span class="nick" style="color:#8dd3c7"><a href="#233628" label="[23:36:28]">&lt;stikonas&gt;</a></span><span class="message">oh, so 3 programs, not just one</span></div><div class="line" id="233709"><span class="nick" style="color:#389600"><a href="#233709" label="[23:37:09]">&lt;oriansj&gt;</a></span><span class="message">and binutils compatibility to make live-bootstrap getting muslibc much easier and sooner</span></div><div class="line" id="234320"><span class="nick" style="color:#389600"><a href="#234320" label="[23:43:20]">&lt;oriansj&gt;</a></span><span class="message">it is still a bit from getting done: <a rel="nofollow" href="https://github.com/oriansj/M3-Meteoroid">https://github.com/oriansj/M3-Meteoroid</a> </span></div><div class="line" id="234338"><span class="nick" style="color:#389600"><a href="#234338" label="[23:43:38]">&lt;oriansj&gt;</a></span><span class="message">but it has the major linker bits for x86 done</span></div><div class="line" id="234556"><span class="nick" style="color:#8dd3c7"><a href="#234556" label="[23:45:56]">&lt;stikonas&gt;</a></span><span class="message">hmm, actually now I'm looking at pre increment, it's actually seems to be best done at preprocessor level</span></div><div class="line" id="234613"><span class="nick" style="color:#8dd3c7"><a href="#234613" label="[23:46:13]">&lt;stikonas&gt;</a></span><span class="message">opposite to assignments</span></div><div class="line" id="234630"><span class="nick" style="color:#8dd3c7"><a href="#234630" label="[23:46:30]">&lt;stikonas&gt;</a></span><span class="message">i.e. replace pre-increment with a = a + 1</span></div><div class="line" id="234702"><span class="nick" style="color:#8dd3c7"><a href="#234702" label="[23:47:02]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="234726"><span class="nick" style="color:#8dd3c7"><a href="#234726" label="[23:47:26]">&lt;stikonas&gt;</a></span><span class="message">anyway, I'l probably think a bit more tomorrow</span></div><div class="line" id="234854"><span class="nick" style="color:#389600"><a href="#234854" label="[23:48:54]">&lt;oriansj&gt;</a></span><span class="message">sounds like a good plan</span></div><div class="line" id="234930"><span class="nick" style="color:#8dd3c7"><a href="#234930" label="[23:49:30]">&lt;stikonas&gt;</a></span><span class="message">since stuff like ++(a+1) is not a legal expression</span></div><div class="line" id="234956"><span class="nick" style="color:#8dd3c7"><a href="#234956" label="[23:49:56]">&lt;stikonas&gt;</a></span><span class="message">hmm, or maybe the whole thing is more complicated...</span></div><div class="line" id="235012"><span class="nick" style="color:#8dd3c7"><a href="#235012" label="[23:50:12]">&lt;stikonas&gt;</a></span><span class="message">well, in the worse case I'll just revert my last two merges...</span></div><div class="line" id="235012"><span class="nick" style="color:#389600"><a href="#235012" label="[23:50:12]">&lt;oriansj&gt;</a></span><span class="message">well the weeds of C can get really really ugly</span></div><div class="line" id="235044"><span class="nick" style="color:#8dd3c7"><a href="#235044" label="[23:50:44]">&lt;stikonas&gt;</a></span><span class="message">yeah, it's surprising how much easier small subset of C is</span></div><div class="line" id="235055"><span class="nick" style="color:#8dd3c7"><a href="#235055" label="[23:50:55]">&lt;stikonas&gt;</a></span><span class="message">although, maybe it wasn't that easy until it was written</span></div><div class="line" id="235121"><span class="nick" style="color:#389600"><a href="#235121" label="[23:51:21]">&lt;oriansj&gt;</a></span><span class="message">and M2-Planet solves a hard enough problem (being buildable by a Compiler written in assembly) without having to add more on top</span></div><div class="line" id="235312"><span class="nick" style="color:#389600"><a href="#235312" label="[23:53:12]">&lt;oriansj&gt;</a></span><span class="message">honestly I'd strip features from M2-Planet if it allowed cc_* to become simpler</span></div><div class="line" id="235326"><span class="nick" style="color:#8dd3c7"><a href="#235326" label="[23:53:26]">&lt;stikonas&gt;</a></span><span class="message">well, that's true</span></div><div class="line" id="235338"><span class="nick" style="color:#8dd3c7"><a href="#235338" label="[23:53:38]">&lt;stikonas&gt;</a></span><span class="message">but M2-Planet uses fairly restricted subset of C for itself</span></div><div class="line" id="235637"><span class="nick" style="color:#389600"><a href="#235637" label="[23:56:37]">&lt;oriansj&gt;</a></span><span class="message">well it has a few extras like '\n' and the like which could be dropped from cc_* with only moderate extra complexity</span></div><div class="line" id="235936"><span class="nick" style="color:#389600"><a href="#235936" label="[23:59:36]">&lt;oriansj&gt;</a></span><span class="message">but the pretty in_set lines were too nice to work around over a dozen lines of assembly</span></div><br /></div></body></html>