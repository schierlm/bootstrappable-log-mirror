<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2019-10-09.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000318"><span class="nick" style="color:#389600"><a href="#000318" label="[00:03:18]">&lt;xentrac&gt;</a></span><span class="message">argh, fucking Microsoft blocking wget</span></div><div class="line" id="000644"><span class="nick" style="color:#389600"><a href="#000644" label="[00:06:44]">&lt;xentrac&gt;</a></span><span class="message">I wonder if their synthesis algorithm is applicable to APLish things</span></div><div class="line" id="001631"><span class="nick" style="color:#8dd3c7"><a href="#001631" label="[00:16:31]">&lt;true-grue&gt;</a></span><span class="message">xentrac, Well, It works for stack and register machines. Should work for short combinator-based programs too.</span></div><div class="line" id="010559"><span class="nick" style="color:#6b8072"><a href="#010559" label="[01:05:59]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: add user_agent = Mozilla/5.0 (Windows NT 6.1; rv:52.0) Gecko/20100101 Firefox/52.0 to your ~/.wgetrc</span></div><div class="line" id="010615"><span class="nick" style="color:#6b8072"><a href="#010615" label="[01:06:15]">&lt;OriansJ&gt;</a></span><span class="message">that'll solve the wget filtering problem</span></div><div class="line" id="010636"><span class="nick" style="color:#6b8072"><a href="#010636" label="[01:06:36]">&lt;OriansJ&gt;</a></span><span class="message">janneke: nicely done as always.</span></div><div class="line" id="010708"><span class="nick" style="color:#6b8072"><a href="#010708" label="[01:07:08]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: sorry about misinterpreting your previous post</span></div><div class="line" id="011047"><span class="nick" style="color:#6b8072"><a href="#011047" label="[01:10:47]">&lt;OriansJ&gt;</a></span><span class="message">true-grue: I've been considering if porting M2-Planet+mescc-tools to it would be worth the trouble. As it would provide another possible root for our bootstrap but it also requires me to figure out how to squeeze 16KB of memory usage out of cc_x86 (unless I can get the z80 code dense enough)</span></div><div class="line" id="012915"><span class="nick" style="color:#389600"><a href="#012915" label="[01:29:15]">&lt;xentrac&gt;</a></span><span class="message">OriansJ: heh, probably.  I just used links in this case!</span></div><div class="line" id="012919"><span class="nick" style="color:#389600"><a href="#012919" label="[01:29:19]">&lt;xentrac&gt;</a></span><span class="message">what did you misinterpret?</span></div><div class="line" id="013044"><span class="nick" style="color:#389600"><a href="#013044" label="[01:30:44]">&lt;xentrac&gt;</a></span><span class="message">if you want to bootstrap from a microcontroller for trustworthiness purposes, it might be best to use a software emulator, like the AVR-CP/M emulator which I think did a Z80</span></div><div class="line" id="013053"><span class="nick" style="color:#389600"><a href="#013053" label="[01:30:53]">&lt;xentrac&gt;</a></span><span class="message">but with a larger memory space, maybe</span></div><div class="line" id="013131"><span class="nick" style="color:#389600"><a href="#013131" label="[01:31:31]">&lt;xentrac&gt;</a></span><span class="message">since we can accept something like three orders of magnitude slowdown in that context</span></div><div class="line" id="014819"><span class="nick" style="color:#6b8072"><a href="#014819" label="[01:48:19]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: I misinterpreted the &quot;surprisingly non-transcendent&quot; comment.</span></div><div class="line" id="014856"><span class="nick" style="color:#6b8072"><a href="#014856" label="[01:48:56]">&lt;OriansJ&gt;</a></span><span class="message">As for bootstrap, I was thinking of doing a custom architecture in TTL as my root of trust</span></div><div class="line" id="014959"><span class="nick" style="color:#6b8072"><a href="#014959" label="[01:49:59]">&lt;OriansJ&gt;</a></span><span class="message">and simply adding the Z80 and other common cheap microcontrollers as potential additional sources of trust that other people could easily leverage for their own root of trust</span></div><div class="line" id="020429"><span class="nick" style="color:#389600"><a href="#020429" label="[02:04:29]">&lt;xentrac&gt;</a></span><span class="message">oh, yeah</span></div><div class="line" id="020510"><span class="nick" style="color:#389600"><a href="#020510" label="[02:05:10]">&lt;xentrac&gt;</a></span><span class="message">it's not *bad* code, just doesn't have the inevitable-theorem quality of, say, qmail or something</span></div><div class="line" id="020751"><span class="nick" style="color:#389600"><a href="#020751" label="[02:07:51]">&lt;xentrac&gt;</a></span><span class="message">it does have some clever tricks in it; the loop over the built-in commands leaves SI pointing past the end of the command name in the command string, for example</span></div><div class="line" id="020757"><span class="nick" style="color:#389600"><a href="#020757" label="[02:07:57]">&lt;xentrac&gt;</a></span><span class="message">if it finds a match</span></div><div class="line" id="021220"><span class="nick" style="color:#389600"><a href="#021220" label="[02:12:20]">&lt;xentrac&gt;</a></span><span class="message">9-bit bytes and 18-bit address words might be a reasonable tradeoff for custom architecture.  also, a bit-serial ALU will save you a lot of gates, but maybe using bitslice ALU chips is a better idea</span></div><div class="line" id="021257"><span class="nick" style="color:#389600"><a href="#021257" label="[02:12:57]">&lt;xentrac&gt;</a></span><span class="message">18-bit addresses would allow you to fit everything into 256KiB instead of 64KiB, which makes the problem a lot easier</span></div><div class="line" id="023300"><span class="nick" style="color:#389600"><a href="#023300" label="[02:33:00]">&lt;xentrac&gt;</a></span><span class="message">Wirth's RISC is probably a good design to look at for inspiration; it's almost as simple as Chifir or TECS Hack, but designed to be practical rather than uncompromisingly minimal</span></div><div class="line" id="070317"><span class="nick" style="color:#389600"><a href="#070317" label="[07:03:17]">&lt;xentrac&gt;</a></span><span class="message">I'm about halfway through bootOS now and I'm running into a lot of clever tricks now</span></div><div class="line" id="070320"><span class="nick" style="color:#389600"><a href="#070320" label="[07:03:20]">&lt;xentrac&gt;</a></span><span class="message">also though</span></div><div class="line" id="070519"><span class="nick" style="color:#389600"><a href="#070519" label="[07:05:19]">&lt;xentrac&gt;</a></span><span class="message">when I'm programming in 8088 assembly there are occasionally times when there's something I have to do that is possible but takes a great deal more ceremony than it seems like it should</span></div><div class="line" id="070806"><span class="nick" style="color:#389600"><a href="#070806" label="[07:08:06]">&lt;xentrac&gt;</a></span><span class="message">that isn't happening here, and I suspect that this is a question of thoughtful software design that flows with the machine's strengths instead of fighting it</span></div><div class="line" id="095257"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado</span></div><div class="line" id="105010"><span class="nick" style="color:#80b1d3"><a href="#105010" label="[10:50:10]">&lt;rain2&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.gnu.org/software/mes/">https://www.gnu.org/software/mes/</a> </span></div><div class="line" id="154304"><span class="nick">***</span><span class="message notice">xwvvvvwx- is now known as xwvvvvwx</span></div><div class="line" id="155334"><span class="nick">***</span><span class="message notice">janneke_ is now known as janneke`</span></div><div class="line" id="155522"><span class="nick">***</span><span class="message notice">coldtom8 is now known as coldtom</span></div><div class="line" id="160124"><span class="nick">***</span><span class="message notice">janneke` is now known as janneke</span></div><div class="line" id="175527"><span class="nick">***</span><span class="message notice">roptat_ is now known as roptat</span></div><div class="line" id="184534"><span class="nick">***</span><span class="message notice">ng0_ is now known as ng0</span></div><div class="line" id="205201"><span class="nick" style="color:#6d2462"><a href="#205201" label="[20:52:01]">&lt;dgpv&gt;</a></span><span class="message">looking at stage0/stage0_monitor.hex0 -- it seems it can be made at least 4 bytes shorter by replacing two instances of `LOADUI R1 0` with `FALSE R0`</span></div><div class="line" id="220310"><span class="nick" style="color:#6d2462"><a href="#220310" label="[22:03:10]">&lt;dgpv&gt;</a></span><span class="message">Although maybe `LOADUI R1 0` was used intentionally  because it may be more clear to someone than `FALSE R0`..  but it is used in other place to zero out a register</span></div><div class="line" id="221437"><span class="nick" style="color:#6d2462"><a href="#221437" label="[22:14:37]">&lt;dgpv&gt;</a></span><span class="message">anyway, <a rel="nofollow" href="https://github.com/oriansj/stage0/pull/18">https://github.com/oriansj/stage0/pull/18</a> </span></div><div class="line" id="231537"><span class="nick" style="color:#6d2462"><a href="#231537" label="[23:15:37]">&lt;dgpv&gt;</a></span><span class="message">correction:  replacing two instances of `LOADUI R1 0` with `FALSE R1` (made mistype R0/R1 here in the chat)</span></div><div class="line" id="232013"><span class="nick" style="color:#234e69"><a href="#232013" label="[23:20:13]">&lt;OriansJ`&gt;</a></span><span class="message">dgpv: you are absolutely correct; I really haven't put any effort into making the original stage0_monitor any smaller and I am certain there are lots of easy gains to be made</span></div><div class="line" id="232211"><span class="nick" style="color:#6d2462"><a href="#232211" label="[23:22:11]">&lt;dgpv&gt;</a></span><span class="message">as I understand it needs to be somehow entered manually on the real hardware, so less bytes to enter should be better :-)</span></div><div class="line" id="232419"><span class="nick" style="color:#234e69"><a href="#232419" label="[23:24:19]">&lt;OriansJ`&gt;</a></span><span class="message">dgpv: you are indeed correct, I am reviewing the commits for correctness now</span></div><div class="line" id="232556"><span class="nick" style="color:#234e69"><a href="#232556" label="[23:25:56]">&lt;OriansJ`&gt;</a></span><span class="message">altough you appear to have made a minor false assumption with &quot;sed 's/^[^#]*# //; s/^:[^[:space:]][^[:space:]]*/\0 ;/' stage0/stage0_monitor.hex0 &gt; test/stage0_test_scratch/stage0_monitor.hex0.s&quot;</span></div><div class="line" id="232710"><span class="nick" style="color:#6d2462"><a href="#232710" label="[23:27:10]">&lt;dgpv&gt;</a></span><span class="message">totally possible</span></div><div class="line" id="232722"><span class="nick" style="color:#234e69"><a href="#232722" label="[23:27:22]">&lt;OriansJ`&gt;</a></span><span class="message">as bin/hex can build stage0/stage0_monitor.hex0 directly and there is no need to run it through the asm in test_stage0_monitor_asm_match</span></div><div class="line" id="232800"><span class="nick" style="color:#6d2462"><a href="#232800" label="[23:28:00]">&lt;dgpv&gt;</a></span><span class="message">the goal to do this is to make sure that comments actually match the hex</span></div><div class="line" id="232842"><span class="nick" style="color:#234e69"><a href="#232842" label="[23:28:42]">&lt;OriansJ`&gt;</a></span><span class="message">I see</span></div><div class="line" id="232853"><span class="nick" style="color:#6d2462"><a href="#232853" label="[23:28:53]">&lt;dgpv&gt;</a></span><span class="message">If you edited the hex values you may forget to fix the comments</span></div><div class="line" id="232904"><span class="nick" style="color:#234e69"><a href="#232904" label="[23:29:04]">&lt;OriansJ`&gt;</a></span><span class="message">in which case that is a reasonable step</span></div><div class="line" id="232911"><span class="nick" style="color:#6d2462"><a href="#232911" label="[23:29:11]">&lt;dgpv&gt;</a></span><span class="message">and this test can catch some of this</span></div><div class="line" id="232930"><span class="nick" style="color:#6d2462"><a href="#232930" label="[23:29:30]">&lt;dgpv&gt;</a></span><span class="message">(can't catch the :label &lt;offset&gt; case)</span></div><div class="line" id="232959"><span class="nick" style="color:#234e69"><a href="#232959" label="[23:29:59]">&lt;OriansJ`&gt;</a></span><span class="message">well we kind of can with hex0 but with hex1 it is a minor issue</span></div><div class="line" id="233013"><span class="nick" style="color:#6d2462"><a href="#233013" label="[23:30:13]">&lt;dgpv&gt;</a></span><span class="message">:hex 9a &lt;--- this offset updated manually, but checking that it is indeed correct via the script seems too complex</span></div><div class="line" id="233101"><span class="nick" style="color:#234e69"><a href="#233101" label="[23:31:01]">&lt;OriansJ`&gt;</a></span><span class="message">we can change the label comments to te form # :label ; offset = 9a to make it easier</span></div><div class="line" id="233127"><span class="nick" style="color:#6d2462"><a href="#233127" label="[23:31:27]">&lt;dgpv&gt;</a></span><span class="message">well I just solved it with additional sed substitution</span></div><div class="line" id="233144"><span class="nick" style="color:#6d2462"><a href="#233144" label="[23:31:44]">&lt;dgpv&gt;</a></span><span class="message">but this makes assumption about the format for :label comments</span></div><div class="line" id="233348"><span class="nick" style="color:#6d2462"><a href="#233348" label="[23:33:48]">&lt;dgpv&gt;</a></span><span class="message">should I push the change with `# :label ; offset = 9a` and simplified sed substitiution ?</span></div><div class="line" id="233451"><span class="nick" style="color:#234e69"><a href="#233451" label="[23:34:51]">&lt;OriansJ`&gt;</a></span><span class="message">probably a better plan long term</span></div><div class="line" id="233523"><span class="nick" style="color:#389600"><a href="#233523" label="[23:35:23]">&lt;xentrac&gt;</a></span><span class="message">btw I commented on the orange website: <a rel="nofollow" href="https://news.ycombinator.com/item?id=21207046">https://news.ycombinator.com/item?id=21207046</a>  and <a rel="nofollow" href="https://news.ycombinator.com/item?id=21207016;">https://news.ycombinator.com/item?id=21207016;</a>  LARTs invited if I'm talking nonsense</span></div><div class="line" id="233529"><span class="nick" style="color:#6d2462"><a href="#233529" label="[23:35:29]">&lt;dgpv&gt;</a></span><span class="message">I will force-push</span></div><div class="line" id="233604"><span class="nick" style="color:#6d2462"><a href="#233604" label="[23:36:04]">&lt;dgpv&gt;</a></span><span class="message">done</span></div><div class="line" id="233748"><span class="nick" style="color:#6d2462"><a href="#233748" label="[23:37:48]">&lt;dgpv&gt;</a></span><span class="message">oops</span></div><div class="line" id="233758"><span class="nick" style="color:#6d2462"><a href="#233758" label="[23:37:58]">&lt;dgpv&gt;</a></span><span class="message">I was late :-)</span></div><div class="line" id="233844"><span class="nick" style="color:#234e69"><a href="#233844" label="[23:38:44]">&lt;OriansJ`&gt;</a></span><span class="message">no worries, I fixed it</span></div><div class="line" id="233915"><span class="nick" style="color:#6d2462"><a href="#233915" label="[23:39:15]">&lt;dgpv&gt;</a></span><span class="message">cool</span></div><div class="line" id="233932"><span class="nick" style="color:#234e69"><a href="#233932" label="[23:39:32]">&lt;OriansJ`&gt;</a></span><span class="message">thank you for taking the time to help ^_^</span></div><div class="line" id="233950"><span class="nick" style="color:#6d2462"><a href="#233950" label="[23:39:50]">&lt;dgpv&gt;</a></span><span class="message">glad to help</span></div><div class="line" id="234118"><span class="nick" style="color:#6d2462"><a href="#234118" label="[23:41:18]">&lt;dgpv&gt;</a></span><span class="message">I would love to tinker with bootstrap via lisp, but too much other work unfortunately</span></div><div class="line" id="234218"><span class="nick" style="color:#389600"><a href="#234218" label="[23:42:18]">&lt;xentrac&gt;</a></span><span class="message">that's a good problem to have :)</span></div><div class="line" id="234307"><span class="nick" style="color:#234e69"><a href="#234307" label="[23:43:07]">&lt;OriansJ`&gt;</a></span><span class="message">dgpv: well we do have some small lisp programs that need being written if you are interested</span></div><div class="line" id="234329"><span class="nick" style="color:#6d2462"><a href="#234329" label="[23:43:29]">&lt;dgpv&gt;</a></span><span class="message">got one free day to dedicate to this, so I looked around the code to understand how it all works, maybe if I can find some more time in the future</span></div><div class="line" id="234344"><span class="nick" style="color:#389600"><a href="#234344" label="[23:43:44]">&lt;xentrac&gt;</a></span><span class="message">awesome :)</span></div><div class="line" id="234400"><span class="nick" style="color:#234e69"><a href="#234400" label="[23:44:00]">&lt;OriansJ`&gt;</a></span><span class="message">and if you need any clarification or help let us know ^_^</span></div><div class="line" id="234412"><span class="nick" style="color:#6d2462"><a href="#234412" label="[23:44:12]">&lt;dgpv&gt;</a></span><span class="message">as I understand after looking, the road to bootstrap to lisp would be to implement the scheme that mes implements</span></div><div class="line" id="234432"><span class="nick" style="color:#6d2462"><a href="#234432" label="[23:44:32]">&lt;dgpv&gt;</a></span><span class="message">and then just use the mescc</span></div><div class="line" id="234504"><span class="nick" style="color:#6d2462"><a href="#234504" label="[23:45:04]">&lt;dgpv&gt;</a></span><span class="message">but this is indeed quite a lot of work</span></div><div class="line" id="234534"><span class="nick" style="color:#6d2462"><a href="#234534" label="[23:45:34]">&lt;dgpv&gt;</a></span><span class="message">and mes source code is not very easy read, especially around eval loop</span></div><div class="line" id="234545"><span class="nick" style="color:#6d2462"><a href="#234545" label="[23:45:45]">&lt;dgpv&gt;</a></span><span class="message">so much gotos :)</span></div><div class="line" id="234633"><span class="nick" style="color:#6d2462"><a href="#234633" label="[23:46:33]">&lt;dgpv&gt;</a></span><span class="message">the lisp.s as currently implemented does not have macro facility, right ?</span></div><div class="line" id="234640"><span class="nick" style="color:#234e69"><a href="#234640" label="[23:46:40]">&lt;OriansJ`&gt;</a></span><span class="message">dgpv: well I have been working to simplify that <a rel="nofollow" href="https://github.com/oriansj/mes-m2">https://github.com/oriansj/mes-m2</a>  but I am still in the unpacking the complexity phase</span></div><div class="line" id="234713"><span class="nick" style="color:#234e69"><a href="#234713" label="[23:47:13]">&lt;OriansJ`&gt;</a></span><span class="message">lisp.s is the assembly version of this: <a rel="nofollow" href="https://github.com/oriansj/slow_lisp">https://github.com/oriansj/slow_lisp</a> </span></div><div class="line" id="234718"><span class="nick" style="color:#6d2462"><a href="#234718" label="[23:47:18]">&lt;dgpv&gt;</a></span><span class="message">yes I've seen m2, too. It is a bit easier</span></div><div class="line" id="234744"><span class="nick" style="color:#234e69"><a href="#234744" label="[23:47:44]">&lt;OriansJ`&gt;</a></span><span class="message">So no macros nor tail-recursive but easily buildable via M2-Planet</span></div><div class="line" id="234940"><span class="nick" style="color:#234e69"><a href="#234940" label="[23:49:40]">&lt;OriansJ`&gt;</a></span><span class="message">In the end mes-m2 will end up sharing a great deal with slow_lisp in terms of implementation details; while including all of the additional functionality that janneke needs for MesCC. with possibly extensions needed to support Guix</span></div><div class="line" id="235127"><span class="nick" style="color:#6d2462"><a href="#235127" label="[23:51:27]">&lt;dgpv&gt;</a></span><span class="message">so now you actually can bootstrap from scratch, but only for x86, right ?</span></div><div class="line" id="235244"><span class="nick" style="color:#6d2462"><a href="#235244" label="[23:52:44]">&lt;dgpv&gt;</a></span><span class="message">because you have c compiler in asm that targets x86</span></div><div class="line" id="235322"><span class="nick" style="color:#6d2462"><a href="#235322" label="[23:53:22]">&lt;dgpv&gt;</a></span><span class="message">and if theres a bootstrap path via lisp it will be architecture independent</span></div><div class="line" id="235333"><span class="nick" style="color:#6d2462"><a href="#235333" label="[23:53:33]">&lt;dgpv&gt;</a></span><span class="message">right ?</span></div><div class="line" id="235412"><span class="nick" style="color:#234e69"><a href="#235412" label="[23:54:12]">&lt;OriansJ`&gt;</a></span><span class="message">I currently have 3 bootstraps from scratch to M2-Planet (which is cross-platform by default) and once it can build mes-m2; we instantly have the ability to run MesCC on all platforms supported by M2-Planet</span></div><div class="line" id="235453"><span class="nick" style="color:#234e69"><a href="#235453" label="[23:54:53]">&lt;OriansJ`&gt;</a></span><span class="message">MesCC doesn't support as many architectures as M2-Planet yet but that can be fixed later and with much less work than me doing another port from scratch</span></div><div class="line" id="235603"><span class="nick" style="color:#234e69"><a href="#235603" label="[23:56:03]">&lt;OriansJ`&gt;</a></span><span class="message">dddddd: is currently getting aarch64 ported to M2-Planet (and we support making armv7l binaries [that also work on armv6 too])</span></div><div class="line" id="235727"><span class="nick" style="color:#234e69"><a href="#235727" label="[23:57:27]">&lt;OriansJ`&gt;</a></span><span class="message">So once mes-m2 is done, I am going to do a from scratch for armv7l and aarch64; so that we will have 5 seperate architectures that are all able to reproduce all binaries used by all other architectures; thus forcing any hardware based attacks to have to be identical on all hardware architectures under test</span></div><div class="line" id="235739"><span class="nick" style="color:#6d2462"><a href="#235739" label="[23:57:39]">&lt;dgpv&gt;</a></span><span class="message">ok so that forth/lisp path on stage2 is not of practical importance now</span></div><div class="line" id="235754"><span class="nick" style="color:#6d2462"><a href="#235754" label="[23:57:54]">&lt;dgpv&gt;</a></span><span class="message">only relevant as a demonstration that it can be done</span></div><div class="line" id="235815"><span class="nick" style="color:#234e69"><a href="#235815" label="[23:58:15]">&lt;OriansJ`&gt;</a></span><span class="message">dgpv: essentially they were false paths based on people's largely unfounded beliefs on the easiest way to bootstrap complex software</span></div><div class="line" id="235909"><span class="nick" style="color:#389600"><a href="#235909" label="[23:59:09]">&lt;xentrac&gt;</a></span><span class="message">I still think forth+lisp is probably the easiest way to bootstrap complex software but I admit this is not founded on actual success doing it :)</span></div><div class="line" id="235932"><span class="nick" style="color:#234e69"><a href="#235932" label="[23:59:32]">&lt;OriansJ`&gt;</a></span><span class="message">writing a lisp in assembly is harder than writing a C compiler in assembly and if you don't build it with macros and tail recursion by default it is good as useless.</span></div><br /></div></body></html>