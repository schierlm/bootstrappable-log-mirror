<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-01-18.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000150"><span class="nick" style="color:#8dd3c7"><a href="#000150" label="[00:01:50]">&lt;fossy&gt;</a></span><span class="message">lol</span></div><div class="line" id="000152"><span class="nick" style="color:#8dd3c7"><a href="#000152" label="[00:01:52]">&lt;fossy&gt;</a></span><span class="message">ok</span></div><div class="line" id="000318"><span class="nick" style="color:#2e2a4a"><a href="#000318" label="[00:03:18]">&lt;stikonas&gt;</a></span><span class="message">well, usually if you force-push, it updates PR and there is a link to changes...</span></div><div class="line" id="005324"><span class="nick" style="color:#2e2a4a"><a href="#005324" label="[00:53:24]">&lt;stikonas&gt;</a></span><span class="message">hmm, one more issue left with my Makefile for coreutils</span></div><div class="line" id="005331"><span class="nick" style="color:#2e2a4a"><a href="#005331" label="[00:53:31]">&lt;stikonas&gt;</a></span><span class="message">for some reason it wants /bin/sh</span></div><div class="line" id="005504"><span class="nick" style="color:#8dd3c7"><a href="#005504" label="[00:55:04]">&lt;fossy&gt;</a></span><span class="message">stikonas: ah; there are a number of causes of that that i ran into with bash</span></div><div class="line" id="005520"><span class="nick" style="color:#2e2a4a"><a href="#005520" label="[00:55:20]">&lt;stikonas&gt;</a></span><span class="message">argh, maybe advanced rules</span></div><div class="line" id="005529"><span class="nick" style="color:#2e2a4a"><a href="#005529" label="[00:55:29]">&lt;stikonas&gt;</a></span><span class="message">let me show you my makefile</span></div><div class="line" id="005530"><span class="nick" style="color:#8dd3c7"><a href="#005530" label="[00:55:30]">&lt;fossy&gt;</a></span><span class="message">1. cd 2. some types of characters that actually should be escaped inc ( , ] [ ) } { ' &quot;</span></div><div class="line" id="005538"><span class="nick" style="color:#8dd3c7"><a href="#005538" label="[00:55:38]">&lt;fossy&gt;</a></span><span class="message">sorry not quotes</span></div><div class="line" id="005544"><span class="nick" style="color:#8dd3c7"><a href="#005544" label="[00:55:44]">&lt;fossy&gt;</a></span><span class="message">but look for stransge characters</span></div><div class="line" id="005548"><span class="nick" style="color:#8dd3c7"><a href="#005548" label="[00:55:48]">&lt;fossy&gt;</a></span><span class="message">yeah show your makefile</span></div><div class="line" id="005600"><span class="nick" style="color:#8dd3c7"><a href="#005600" label="[00:56:00]">&lt;fossy&gt;</a></span><span class="message">also, restructure nearly done</span></div><div class="line" id="005717"><span class="nick" style="color:#2e2a4a"><a href="#005717" label="[00:57:17]">&lt;stikonas&gt;</a></span><span class="message">fossy: <a rel="nofollow" href="https://paste.debian.net/1181567/">https://paste.debian.net/1181567/</a> </span></div><div class="line" id="005735"><span class="nick" style="color:#2e2a4a"><a href="#005735" label="[00:57:35]">&lt;stikonas&gt;</a></span><span class="message">maybe $(BINARIES) : % : %.o needs /bin/sh?</span></div><div class="line" id="005757"><span class="nick" style="color:#2e2a4a"><a href="#005757" label="[00:57:57]">&lt;stikonas&gt;</a></span><span class="message">also I have -DDIR_TO_FD\(Dir_p\)</span></div><div class="line" id="005802"><span class="nick" style="color:#2e2a4a"><a href="#005802" label="[00:58:02]">&lt;stikonas&gt;</a></span><span class="message">but I thought this is escaped</span></div><div class="line" id="005815"><span class="nick" style="color:#8dd3c7"><a href="#005815" label="[00:58:15]">&lt;fossy&gt;</a></span><span class="message">yeah that should work</span></div><div class="line" id="005857"><span class="nick" style="color:#8dd3c7"><a href="#005857" label="[00:58:57]">&lt;fossy&gt;</a></span><span class="message">i bet its somewhere in 109-114</span></div><div class="line" id="010004"><span class="nick" style="color:#2e2a4a"><a href="#010004" label="[01:00:04]">&lt;stikonas&gt;</a></span><span class="message">hmm, but it fails to build even library</span></div><div class="line" id="010018"><span class="nick" style="color:#2e2a4a"><a href="#010018" label="[01:00:18]">&lt;stikonas&gt;</a></span><span class="message">it immediately went to building basename</span></div><div class="line" id="010025"><span class="nick" style="color:#2e2a4a"><a href="#010025" label="[01:00:25]">&lt;stikonas&gt;</a></span><span class="message">even without libfetish.a</span></div><div class="line" id="010026"><span class="nick" style="color:#2e2a4a"><a href="#010026" label="[01:00:26]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="010214"><span class="nick" style="color:#2e2a4a"><a href="#010214" label="[01:02:14]">&lt;stikonas&gt;</a></span><span class="message">doesn't seem to be the last lines...</span></div><div class="line" id="010233"><span class="nick" style="color:#2e2a4a"><a href="#010233" label="[01:02:33]">&lt;stikonas&gt;</a></span><span class="message">I guess it's $(BINARIES) : % : %.o</span></div><div class="line" id="011743"><span class="nick" style="color:#8dd3c7"><a href="#011743" label="[01:17:43]">&lt;fossy&gt;</a></span><span class="message">probably</span></div><div class="line" id="011753"><span class="nick" style="color:#8dd3c7"><a href="#011753" label="[01:17:53]">&lt;fossy&gt;</a></span><span class="message">maybe that is unsupported by the make version</span></div><div class="line" id="012125"><span class="nick" style="color:#2e2a4a"><a href="#012125" label="[01:21:25]">&lt;stikonas&gt;</a></span><span class="message">ok, I think it's something in CFLAGS</span></div><div class="line" id="012131"><span class="nick" style="color:#2e2a4a"><a href="#012131" label="[01:21:31]">&lt;stikonas&gt;</a></span><span class="message">with those PACKAGE names and versions</span></div><div class="line" id="012736"><span class="nick" style="color:#2e2a4a"><a href="#012736" label="[01:27:36]">&lt;stikonas&gt;</a></span><span class="message">fossy: ok, I think it's space in PACKAGE_NAME=GNU Coreutils</span></div><div class="line" id="012746"><span class="nick" style="color:#2e2a4a"><a href="#012746" label="[01:27:46]">&lt;stikonas&gt;</a></span><span class="message">GNUCoreutils seems to work</span></div><div class="line" id="012755"><span class="nick" style="color:#2e2a4a"><a href="#012755" label="[01:27:55]">&lt;stikonas&gt;</a></span><span class="message">GNU\ Coreutils also doesn't work</span></div><div class="line" id="012852"><span class="nick" style="color:#2e2a4a"><a href="#012852" label="[01:28:52]">&lt;stikonas&gt;</a></span><span class="message">or maybe it does</span></div><div class="line" id="012926"><span class="nick" style="color:#8dd3c7"><a href="#012926" label="[01:29:26]">&lt;fossy&gt;</a></span><span class="message">stikonas: ohhh yeah a space would do it</span></div><div class="line" id="013009"><span class="nick" style="color:#2e2a4a"><a href="#013009" label="[01:30:09]">&lt;stikonas&gt;</a></span><span class="message">ok, now builds but fails to install</span></div><div class="line" id="013020"><span class="nick" style="color:#2e2a4a"><a href="#013020" label="[01:30:20]">&lt;stikonas&gt;</a></span><span class="message">I guess sh is needed if I do it in one go...</span></div><div class="line" id="013140"><span class="nick" style="color:#2e2a4a"><a href="#013140" label="[01:31:40]">&lt;stikonas&gt;</a></span><span class="message">I can probably workaround that...</span></div><div class="line" id="021139"><span class="nick" style="color:#2e2a4a"><a href="#021139" label="[02:11:39]">&lt;stikonas&gt;</a></span><span class="message">ok, fixed it</span></div><div class="line" id="021155"><span class="nick" style="color:#2e2a4a"><a href="#021155" label="[02:11:55]">&lt;stikonas&gt;</a></span><span class="message">fossy: do you want to merge grep first?</span></div><div class="line" id="021159"><span class="nick" style="color:#2e2a4a"><a href="#021159" label="[02:11:59]">&lt;stikonas&gt;</a></span><span class="message">or should I do PR on top</span></div><div class="line" id="021247"><span class="nick" style="color:#8dd3c7"><a href="#021247" label="[02:12:47]">&lt;fossy&gt;</a></span><span class="message">stikonas: i'm going to finish the restructure, then either me or you can fix your PRs for the restructure (its just moving files around) and then i'll merge them</span></div><div class="line" id="021259"><span class="nick" style="color:#2e2a4a"><a href="#021259" label="[02:12:59]">&lt;stikonas&gt;</a></span><span class="message">ok...</span></div><div class="line" id="021344"><span class="nick" style="color:#2e2a4a"><a href="#021344" label="[02:13:44]">&lt;stikonas&gt;</a></span><span class="message">well, let me test what I have and then I can try to make PR so that you can take a look and maybe restructure</span></div><div class="line" id="021347"><span class="nick" style="color:#2e2a4a"><a href="#021347" label="[02:13:47]">&lt;stikonas&gt;</a></span><span class="message">since I'll go to bed soon</span></div><div class="line" id="021421"><span class="nick" style="color:#2e2a4a"><a href="#021421" label="[02:14:21]">&lt;stikonas&gt;</a></span><span class="message">the whole install thing is much simpler than  I initially wrote, it's just $(SRC_DIR)/install $^ $(bindir)</span></div><div class="line" id="021547"><span class="nick" style="color:#8dd3c7"><a href="#021547" label="[02:15:47]">&lt;fossy&gt;</a></span><span class="message">lol nice</span></div><div class="line" id="021612"><span class="nick" style="color:#2e2a4a"><a href="#021612" label="[02:16:12]">&lt;stikonas&gt;</a></span><span class="message">no need to foreach</span></div><div class="line" id="021641"><span class="nick" style="color:#2e2a4a"><a href="#021641" label="[02:16:41]">&lt;stikonas&gt;</a></span><span class="message">make is definitely nice for coreutils...</span></div><div class="line" id="021653"><span class="nick" style="color:#2e2a4a"><a href="#021653" label="[02:16:53]">&lt;stikonas&gt;</a></span><span class="message">it would have been a nightmare to do everything in kaem</span></div><div class="line" id="022357"><span class="nick" style="color:#2e2a4a"><a href="#022357" label="[02:23:57]">&lt;stikonas&gt;</a></span><span class="message">so the biggest missing things from coreutils are ls and mknod</span></div><div class="line" id="022410"><span class="nick" style="color:#2e2a4a"><a href="#022410" label="[02:24:10]">&lt;stikonas&gt;</a></span><span class="message">hopefully they'll be easier with better libc</span></div><div class="line" id="022425"><span class="nick" style="color:#2e2a4a"><a href="#022425" label="[02:24:25]">&lt;stikonas&gt;</a></span><span class="message">although, we don't need them until we want interactive shell</span></div><div class="line" id="023038"><span class="nick" style="color:#8dd3c7"><a href="#023038" label="[02:30:38]">&lt;fossy&gt;</a></span><span class="message">yea</span></div><div class="line" id="023113"><span class="nick" style="color:#2e2a4a"><a href="#023113" label="[02:31:13]">&lt;stikonas&gt;</a></span><span class="message">also chroot is missing</span></div><div class="line" id="023119"><span class="nick" style="color:#2e2a4a"><a href="#023119" label="[02:31:19]">&lt;stikonas&gt;</a></span><span class="message">but we need better libc for that too</span></div><div class="line" id="023132"><span class="nick" style="color:#2e2a4a"><a href="#023132" label="[02:31:32]">&lt;stikonas&gt;</a></span><span class="message">hopefully we can get musl...</span></div><div class="line" id="023142"><span class="nick" style="color:#8dd3c7"><a href="#023142" label="[02:31:42]">&lt;fossy&gt;</a></span><span class="message">why would we need chroot</span></div><div class="line" id="023146"><span class="nick" style="color:#2e2a4a"><a href="#023146" label="[02:31:46]">&lt;stikonas&gt;</a></span><span class="message">build process should be slightly easier now with coreutils...</span></div><div class="line" id="023150"><span class="nick" style="color:#8dd3c7"><a href="#023150" label="[02:31:50]">&lt;fossy&gt;</a></span><span class="message">ya</span></div><div class="line" id="023153"><span class="nick" style="color:#2e2a4a"><a href="#023153" label="[02:31:53]">&lt;stikonas&gt;</a></span><span class="message">well, we don't really need it...</span></div><div class="line" id="023215"><span class="nick" style="color:#2e2a4a"><a href="#023215" label="[02:32:15]">&lt;stikonas&gt;</a></span><span class="message">maybe much later</span></div><div class="line" id="023233"><span class="nick" style="color:#2e2a4a"><a href="#023233" label="[02:32:33]">&lt;stikonas&gt;</a></span><span class="message">might be easier to install into chroot than mix c libraries...</span></div><div class="line" id="023236"><span class="nick" style="color:#2e2a4a"><a href="#023236" label="[02:32:36]">&lt;stikonas&gt;</a></span><span class="message">but who knows...</span></div><div class="line" id="023245"><span class="nick" style="color:#2e2a4a"><a href="#023245" label="[02:32:45]">&lt;stikonas&gt;</a></span><span class="message">in principle we can just have different folders</span></div><div class="line" id="023248"><span class="nick" style="color:#2e2a4a"><a href="#023248" label="[02:32:48]">&lt;stikonas&gt;</a></span><span class="message">like we have /after</span></div><div class="line" id="023304"><span class="nick" style="color:#2e2a4a"><a href="#023304" label="[02:33:04]">&lt;stikonas&gt;</a></span><span class="message">but anyway, musl should help with bison</span></div><div class="line" id="023321"><span class="nick" style="color:#8dd3c7"><a href="#023321" label="[02:33:21]">&lt;fossy&gt;</a></span><span class="message">well sooner rather than later i'm going to put linux 2.4.26 into it and then we will have sysb</span></div><div class="line" id="023322"><span class="nick" style="color:#2e2a4a"><a href="#023322" label="[02:33:22]">&lt;stikonas&gt;</a></span><span class="message">(and probably other things too)</span></div><div class="line" id="023342"><span class="nick" style="color:#2e2a4a"><a href="#023342" label="[02:33:42]">&lt;stikonas&gt;</a></span><span class="message">linux 2.4.26 as sysa?</span></div><div class="line" id="023347"><span class="nick" style="color:#2e2a4a"><a href="#023347" label="[02:33:47]">&lt;stikonas&gt;</a></span><span class="message">or sysb?</span></div><div class="line" id="023616"><span class="nick" style="color:#2e2a4a"><a href="#023616" label="[02:36:16]">&lt;stikonas&gt;</a></span><span class="message">ok, coreutils is here</span></div><div class="line" id="023618"><span class="nick" style="color:#2e2a4a"><a href="#023618" label="[02:36:18]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/16">https://github.com/fosslinux/live-bootstrap/pull/16</a> </span></div><div class="line" id="023620"><span class="nick" style="color:#2e2a4a"><a href="#023620" label="[02:36:20]">&lt;stikonas&gt;</a></span><span class="message">I'm going to sleep</span></div><div class="line" id="023625"><span class="nick" style="color:#8dd3c7"><a href="#023625" label="[02:36:25]">&lt;fossy&gt;</a></span><span class="message">night</span></div><div class="line" id="023628"><span class="nick" style="color:#2e2a4a"><a href="#023628" label="[02:36:28]">&lt;stikonas&gt;</a></span><span class="message">fossy: anything after coreutils will now use better cp</span></div><div class="line" id="023632"><span class="nick" style="color:#2e2a4a"><a href="#023632" label="[02:36:32]">&lt;stikonas&gt;</a></span><span class="message">so we don't need to chmod</span></div><div class="line" id="023634"><span class="nick" style="color:#8dd3c7"><a href="#023634" label="[02:36:34]">&lt;fossy&gt;</a></span><span class="message">linux 2.4.26 compiled as sysb</span></div><div class="line" id="023637"><span class="nick" style="color:#2e2a4a"><a href="#023637" label="[02:36:37]">&lt;stikonas&gt;</a></span><span class="message">or can use install</span></div><div class="line" id="023642"><span class="nick" style="color:#8dd3c7"><a href="#023642" label="[02:36:42]">&lt;fossy&gt;</a></span><span class="message">nice</span></div><div class="line" id="032901"><span class="nick">***</span><span class="message notice">xwvvvvwx- is now known as xwvvvvwx</span></div><div class="line" id="034525"><span class="nick" style="color:#6b8072"><a href="#034525" label="[03:45:25]">&lt;pabs3&gt;</a></span><span class="message">interesting response to the LWN bootstrappable article about what hardware to run the full bootstrap process on: <a rel="nofollow" href="https://lwn.net/Articles/842923/">https://lwn.net/Articles/842923/</a> </span></div><div class="line" id="040207"><span class="nick" style="color:#80b1d3"><a href="#040207" label="[04:02:07]">&lt;Hagfish&gt;</a></span><span class="message">another interesting article here: <a rel="nofollow" href="https://venam.nixers.net/blog/unix/2020/03/29/distro-pkgs.html">https://venam.nixers.net/blog/unix/2020/03/29/distro-pkgs.html</a> </span></div><div class="line" id="040222"><span class="nick" style="color:#80b1d3"><a href="#040222" label="[04:02:22]">&lt;Hagfish&gt;</a></span><span class="message">Guix and reproducibility get shoutouts:</span></div><div class="line" id="040232"><span class="nick" style="color:#80b1d3"><a href="#040232" label="[04:02:32]">&lt;Hagfish&gt;</a></span><span class="message">&quot;The most prominent example is Nix and Guix, that use a purely functional deployment model where software is installed into unique directories generated through cryptographic hashes. &quot;</span></div><div class="line" id="040337"><span class="nick" style="color:#80b1d3"><a href="#040337" label="[04:03:37]">&lt;Hagfish&gt;</a></span><span class="message">heh, they add a clarification in a footnote:</span></div><div class="line" id="040340"><span class="nick" style="color:#80b1d3"><a href="#040340" label="[04:03:40]">&lt;Hagfish&gt;</a></span><span class="message">'EDIT: It has come to my understanding that I’ve conflated the meaning of “reproducible”, as in reproducing bit-for-bit identical software, and “reproducible”, as in recreate the functionality of an operating system in this article.'</span></div><div class="line" id="040509"><span class="nick" style="color:#6d2462"><a href="#040509" label="[04:05:09]">&lt;xentrac&gt;</a></span><span class="message">there's a whole spectrum, yea</span></div><div class="line" id="040510"><span class="nick" style="color:#6d2462"><a href="#040510" label="[04:05:10]">&lt;xentrac&gt;</a></span><span class="message">h</span></div><div class="line" id="041318"><span class="nick" style="color:#234e69"><a href="#041318" label="[04:13:18]">&lt;siraben&gt;</a></span><span class="message">Yes, because Nix also keep track of bit-for-bit reproducibility in <a rel="nofollow" href="https://r13y.com/">https://r13y.com/</a> </span></div><div class="line" id="091457"><span class="nick" style="color:#6c3d55"><a href="#091457" label="[09:14:57]">&lt;gforce_de1977&gt;</a></span><span class="message">stikonas: bauen1: new numbers: a kernel 5.10.8 with 'tinyconfig', without procs/sysfs/printk ist 680k compressed and 1124k uncompressed, so much larger than 'myunix' 8-)))</span></div><div class="line" id="091515"><span class="nick" style="color:#6c3d55"><a href="#091515" label="[09:15:15]">&lt;gforce_de1977&gt;</a></span><span class="message">(good morning to all of you)</span></div><div class="line" id="091639"><span class="nick" style="color:#6c3d55"><a href="#091639" label="[09:16:39]">&lt;gforce_de1977&gt;</a></span><span class="message">and the most interesting: it boots in ~70 milliseconds to kaem</span></div><div class="line" id="095339"><span class="nick" style="color:#d9d9d9"><a href="#095339" label="[09:53:39]">&lt;bauen1&gt;</a></span><span class="message">gforce_de1977: ah, that looks much more comparable, myunix is still lacking most features, so let's see how that turns out when i have the first userspace programm running with basic io, fork and mmap support</span></div><div class="line" id="095427"><span class="nick" style="color:#d9d9d9"><a href="#095427" label="[09:54:27]">&lt;bauen1&gt;</a></span><span class="message">&gt; Another approach would be to find an ARM SOC that has a bootrom that has been dumped and reviewed where users can easily input code and that has a display controller that don't need complex software to be used.</span></div><div class="line" id="095518"><span class="nick" style="color:#d9d9d9"><a href="#095518" label="[09:55:18]">&lt;bauen1&gt;</a></span><span class="message">good idea, i do have a pine h64 where i've reviewed the bootrom (and for a pine a64), no idea how complex it would be to add a display and keyboard, you probably need a usb stack for that</span></div><div class="line" id="095651"><span class="nick" style="color:#d9d9d9"><a href="#095651" label="[09:56:51]">&lt;bauen1&gt;</a></span><span class="message">i also have a 65c816 &quot;computer&quot; build from chips, which could function as a simple spi burner perhaps, writing the initial code for it using dip switches, but it currently relies on an atmega for IO</span></div><div class="line" id="100048"><span class="nick" style="color:#8dd3c7"><a href="#100048" label="[10:00:48]">&lt;fossy&gt;</a></span><span class="message">nice!!</span></div><div class="line" id="101039"><span class="nick" style="color:#6c3d55"><a href="#101039" label="[10:10:39]">&lt;gforce_de1977&gt;</a></span><span class="message">bauen1: i was thinking about ARM and in general: there is IMHO no need for peripherals (display, usb, block, net), because we can just dump out the resulting binaries on serial console (e.g. base64 encoded). generally spoken, the machines must be as simply as possible</span></div><div class="line" id="101319"><span class="nick" style="color:#6c3d55"><a href="#101319" label="[10:13:19]">&lt;gforce_de1977&gt;</a></span><span class="message">i'am a fan of doing the builds in qemu, so fiddling with real hardware is something for later 8-) but i understand the needed thrustchain / reproducibility concerns</span></div><div class="line" id="101557"><span class="nick" style="color:#6c3d55"><a href="#101557" label="[10:15:57]">&lt;gforce_de1977&gt;</a></span><span class="message">(and qemu has a serial console too...)</span></div><div class="line" id="101808"><span class="nick" style="color:#6c3d55"><a href="#101808" label="[10:18:08]">&lt;gforce_de1977&gt;</a></span><span class="message">bauen1: is coreboot an option? it seems to be available for some platforms</span></div><div class="line" id="101850"><span class="nick" style="color:#6c3d55"><a href="#101850" label="[10:18:50]">&lt;gforce_de1977&gt;</a></span><span class="message">(and coreboot can be provided as an BIOS replacement for QEMU)</span></div><div class="line" id="103151"><span class="nick" style="color:#d9d9d9"><a href="#103151" label="[10:31:51]">&lt;bauen1&gt;</a></span><span class="message">gforce_de1977: the only binary blob the allwinner chips used on those boards is the bootrom, and it can't be changed</span></div><div class="line" id="103250"><span class="nick" style="color:#d9d9d9"><a href="#103250" label="[10:32:50]">&lt;bauen1&gt;</a></span><span class="message">gforce_de1977: i would disagree, you at least need a way to review the code on the &quot;trusted computing base&quot;, you only really need 1 button to confirm that the source code looks like it should</span></div><div class="line" id="103311"><span class="nick" style="color:#d9d9d9"><a href="#103311" label="[10:33:11]">&lt;bauen1&gt;</a></span><span class="message">but yes, block and network access are optional (but very helpful)</span></div><div class="line" id="104829"><span class="nick" style="color:#6c3d55"><a href="#104829" label="[10:48:29]">&lt;gforce_de1977&gt;</a></span><span class="message">bauen1: allwinner on Pine64? Is the bootrom &quot;opensourced&quot;?</span></div><div class="line" id="105028"><span class="nick" style="color:#bc80bd"><a href="#105028" label="[10:50:28]">&lt;stikonas[m]&gt;</a></span><span class="message">Hmm, I have rockpro64 that also only needs bootrom, but bootrom is not open</span></div><div class="line" id="105043"><span class="nick" style="color:#bc80bd"><a href="#105043" label="[10:50:43]">&lt;stikonas[m]&gt;</a></span><span class="message">It's 32kb...</span></div><div class="line" id="105156"><span class="nick" style="color:#bc80bd"><a href="#105156" label="[10:51:56]">&lt;stikonas[m]&gt;</a></span><span class="message">But you can't run much until you train ram</span></div><div class="line" id="105212"><span class="nick" style="color:#d9d9d9"><a href="#105212" label="[10:52:12]">&lt;bauen1&gt;</a></span><span class="message">^ i've found a 2 bugs in the sbrom, one of which you can use to bypass secure boot :/</span></div><div class="line" id="105517"><span class="nick" style="color:#d9d9d9"><a href="#105517" label="[10:55:17]">&lt;bauen1&gt;</a></span><span class="message">in anyway 32kb binary blob is a lot bettern that your average x86 board ...</span></div><div class="line" id="110307"><span class="nick" style="color:#bc80bd"><a href="#110307" label="[11:03:07]">&lt;stikonas[m]&gt;</a></span><span class="message">And bootrom is ROM, so kind of hardware</span></div><div class="line" id="110341"><span class="nick" style="color:#6c3d55"><a href="#110341" label="[11:03:41]">&lt;gforce_de1977&gt;</a></span><span class="message">can somebody point me to the specs of &quot;<a rel="nofollow" href="https://github.com/oriansj/knight-vm">https://github.com/oriansj/knight-vm</a>&quot;  ?</span></div><div class="line" id="110359"><span class="nick" style="color:#bc80bd"><a href="#110359" label="[11:03:59]">&lt;stikonas[m]&gt;</a></span><span class="message">On x86 you have BIOS which is what u-boot does on arm, and u-boot is free</span></div><div class="line" id="110505"><span class="nick" style="color:#6c3d55"><a href="#110505" label="[11:05:05]">&lt;gforce_de1977&gt;</a></span><span class="message">stikonas: but in theory you can write an uboot or coreboot to a flash/rom</span></div><div class="line" id="110540"><span class="nick" style="color:#6c3d55"><a href="#110540" label="[11:05:40]">&lt;gforce_de1977&gt;</a></span><span class="message">also or1k is interesting, there is even an QEMU target</span></div><div class="line" id="110614"><span class="nick" style="color:#d9d9d9"><a href="#110614" label="[11:06:14]">&lt;bauen1&gt;</a></span><span class="message">stikonas[m]: i mean you probably only need a small &quot;bootloader&quot; that sets up dram, and (maybe calling into the bootrom) loads some more chunks from spi flash</span></div><div class="line" id="110634"><span class="nick" style="color:#d9d9d9"><a href="#110634" label="[11:06:34]">&lt;bauen1&gt;</a></span><span class="message">probably don't even need a C compiler or u-boot</span></div><div class="line" id="110703"><span class="nick" style="color:#bc80bd"><a href="#110703" label="[11:07:03]">&lt;stikonas[m]&gt;</a></span><span class="message">Yes, that's what u-boot does in early stages</span></div><div class="line" id="110706"><span class="nick" style="color:#6c3d55"><a href="#110706" label="[11:07:06]">&lt;gforce_de1977&gt;</a></span><span class="message">or1k for fun: <a rel="nofollow" href="https://s-macke.github.io/jor1k/">https://s-macke.github.io/jor1k/</a> </span></div><div class="line" id="110707"><span class="nick" style="color:#bc80bd"><a href="#110707" label="[11:07:07]">&lt;stikonas[m]&gt;</a></span><span class="message">But maybe can be done in assembly...</span></div><div class="line" id="110718"><span class="nick" style="color:#d9d9d9"><a href="#110718" label="[11:07:18]">&lt;bauen1&gt;</a></span><span class="message">stikonas[m]: essentially reimplementing the spl in assembly</span></div><div class="line" id="110734"><span class="nick" style="color:#bc80bd"><a href="#110734" label="[11:07:34]">&lt;stikonas[m]&gt;</a></span><span class="message">Yeah...</span></div><div class="line" id="110803"><span class="nick" style="color:#bc80bd"><a href="#110803" label="[11:08:03]">&lt;stikonas[m]&gt;</a></span><span class="message">Anyway, early bootstrap is unfortunately always hardware specific</span></div><div class="line" id="110853"><span class="nick" style="color:#bc80bd"><a href="#110853" label="[11:08:53]">&lt;stikonas[m]&gt;</a></span><span class="message">So probably will only be done on limited number if hardware</span></div><div class="line" id="114836"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado_</span></div><div class="line" id="114839"><span class="nick">***</span><span class="message notice">rekado_ is now known as rekado</span></div><div class="line" id="115439"><span class="nick" style="color:#6c3d55"><a href="#115439" label="[11:54:39]">&lt;gforce_de1977&gt;</a></span><span class="message">fossy: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/17">https://github.com/fosslinux/live-bootstrap/pull/17</a> </span></div><div class="line" id="115641"><span class="nick" style="color:#2e2a4a"><a href="#115641" label="[11:56:41]">&lt;stikonas&gt;</a></span><span class="message">are we not running CI in chroot?</span></div><div class="line" id="115717"><span class="nick" style="color:#2e2a4a"><a href="#115717" label="[11:57:17]">&lt;stikonas&gt;</a></span><span class="message">hmm, although, later chroot will be harder once we have sysb</span></div><div class="line" id="122039"><span class="nick" style="color:#6c3d55"><a href="#122039" label="[12:20:39]">&lt;gforce_de1977&gt;</a></span><span class="message">stikonas: think about other platforms, you need qemu anyway</span></div><div class="line" id="123605"><span class="nick" style="color:#2e2a4a"><a href="#123605" label="[12:36:05]">&lt;stikonas&gt;</a></span><span class="message">I don't think we can emulate other platforms in ci...</span></div><div class="line" id="123610"><span class="nick" style="color:#2e2a4a"><a href="#123610" label="[12:36:10]">&lt;stikonas&gt;</a></span><span class="message">that would be too slow</span></div><div class="line" id="123644"><span class="nick" style="color:#2e2a4a"><a href="#123644" label="[12:36:44]">&lt;stikonas&gt;</a></span><span class="message">without kvm, it will take a day to complete the run (and we haven't even started bootstrapping gcc)</span></div><div class="line" id="125227"><span class="nick" style="color:#6c3d55"><a href="#125227" label="[12:52:27]">&lt;gforce_de1977&gt;</a></span><span class="message">stikonas: talking now about speed does not help. all these computers out there have time 8-) lets compare real numbers, if we have arm64-bootstrap up to tcc. I doubt it needs a day in emulation</span></div><div class="line" id="125403"><span class="nick" style="color:#2e2a4a"><a href="#125403" label="[12:54:03]">&lt;stikonas&gt;</a></span><span class="message">well, I only meant you can't run automatic free CI on somebody's else runners...</span></div><div class="line" id="125408"><span class="nick" style="color:#2e2a4a"><a href="#125408" label="[12:54:08]">&lt;stikonas&gt;</a></span><span class="message">you'll run out of free credit</span></div><div class="line" id="130011"><span class="nick" style="color:#6c3d55"><a href="#130011" label="[13:00:11]">&lt;gforce_de1977&gt;</a></span><span class="message">stikonas: are github-action runners limited somehow?</span></div><div class="line" id="130152"><span class="nick" style="color:#2e2a4a"><a href="#130152" label="[13:01:52]">&lt;stikonas&gt;</a></span><span class="message">hmm, not sure...</span></div><div class="line" id="130156"><span class="nick" style="color:#6c3d55"><a href="#130156" label="[13:01:56]">&lt;gforce_de1977&gt;</a></span><span class="message">stikonas: <a rel="nofollow" href="https://docs.github.com/en/actions/reference/usage-limits-billing-and-administration">https://docs.github.com/en/actions/reference/usage-limits-billing-and-administration</a> </span></div><div class="line" id="130159"><span class="nick" style="color:#2e2a4a"><a href="#130159" label="[13:01:59]">&lt;stikonas&gt;</a></span><span class="message">maybe not for now</span></div><div class="line" id="130207"><span class="nick" style="color:#6c3d55"><a href="#130207" label="[13:02:07]">&lt;gforce_de1977&gt;</a></span><span class="message">stikonas: basically: there are no limits</span></div><div class="line" id="130306"><span class="nick" style="color:#6c3d55"><a href="#130306" label="[13:03:06]">&lt;gforce_de1977&gt;</a></span><span class="message">stikonas: and running './rootfs ci' on my computer is free-of-charge anyway 8-)</span></div><div class="line" id="130328"><span class="nick" style="color:#2e2a4a"><a href="#130328" label="[13:03:28]">&lt;stikonas&gt;</a></span><span class="message">yeah, on own hardware definitely</span></div><div class="line" id="131355"><span class="nick" style="color:#d9d9d9"><a href="#131355" label="[13:13:55]">&lt;bauen1&gt;</a></span><span class="message">speed in our case is more limited by money (or free credits or free capacity) than anything else, not something to worry about (too much) right now</span></div><div class="line" id="131724"><span class="nick" style="color:#6c3d55"><a href="#131724" label="[13:17:24]">&lt;gforce_de1977&gt;</a></span><span class="message">bauen1: yea, it's better to *have* tests, even when they are slow, than not to test &quot;because its slow&quot; 8-)</span></div><div class="line" id="135243"><span class="nick" style="color:#3c5b35"><a href="#135243" label="[13:52:43]">&lt;OriansJ&gt;</a></span><span class="message">gforce_de1977: beyond the instruction set <a rel="nofollow" href="https://github.com/oriansj/stage0/tree/master/Knight%20Reference">https://github.com/oriansj/stage0/tree/master/Knight%20Reference</a>  what additional hardware reference do you need?</span></div><div class="line" id="135912"><span class="nick">***</span><span class="message notice">card.freenode.net sets mode: +o rekado</span></div><div class="line" id="140531"><span class="nick" style="color:#3c5b35"><a href="#140531" label="[14:05:31]">&lt;OriansJ&gt;</a></span><span class="message">pabs3: interesting article. I guess the bigger question is how much bootstrapping work needs to be done on a trusted machine. Because if one needs GCC to have any trust for another machine, there are bigger problems which bootstrapping GCC will not address.</span></div><div class="line" id="140633"><span class="nick" style="color:#3c5b35"><a href="#140633" label="[14:06:33]">&lt;OriansJ&gt;</a></span><span class="message">eg like why does firmware that just initializes the memory and loads 512bytes into memory need GCC to be built?</span></div><div class="line" id="140633"><span class="nick" style="color:#2e2a4a"><a href="#140633" label="[14:06:33]">&lt;stikonas&gt;</a></span><span class="message">I guess if you can bootstrap up to M2-planet on trusted machine and check that hashes match it should be fine...</span></div><div class="line" id="140724"><span class="nick" style="color:#2e2a4a"><a href="#140724" label="[14:07:24]">&lt;stikonas&gt;</a></span><span class="message">well, if hardware is compromised then indeed bootstrapping will not help..</span></div><div class="line" id="140736"><span class="nick" style="color:#3c5b35"><a href="#140736" label="[14:07:36]">&lt;OriansJ&gt;</a></span><span class="message">or why a CPU has more than 1MB of Microcode</span></div><div class="line" id="140806"><span class="nick" style="color:#3c5b35"><a href="#140806" label="[14:08:06]">&lt;OriansJ&gt;</a></span><span class="message">bootstrapping of software alone will not solve these sorts of hardware problems.</span></div><div class="line" id="140934"><span class="nick" style="color:#3c5b35"><a href="#140934" label="[14:09:34]">&lt;OriansJ&gt;</a></span><span class="message">as once you get past cc_*, it stops being possible to properly check that the software is doing what you expected on hardware you don't trust; if you don't have a machine you can trust to compare against.</span></div><div class="line" id="141111"><span class="nick" style="color:#3c5b35"><a href="#141111" label="[14:11:11]">&lt;OriansJ&gt;</a></span><span class="message">Modern GCC needs 1+GB of Memory to be built if I remember correctly.</span></div><div class="line" id="141127"><span class="nick" style="color:#3c5b35"><a href="#141127" label="[14:11:27]">&lt;OriansJ&gt;</a></span><span class="message">a posix kernel as well</span></div><div class="line" id="141206"><span class="nick" style="color:#3c5b35"><a href="#141206" label="[14:12:06]">&lt;OriansJ&gt;</a></span><span class="message">also the number of supported architectures is limited</span></div><div class="line" id="141227"><span class="nick" style="color:#3c5b35"><a href="#141227" label="[14:12:27]">&lt;OriansJ&gt;</a></span><span class="message">mostly by the oldest version of GCC in the bootstrap chain.</span></div><div class="line" id="141359"><span class="nick" style="color:#6c3d55"><a href="#141359" label="[14:13:59]">&lt;gforce_de1977&gt;</a></span><span class="message">OriansJ: thanks for the reference, i was in hope, that it 'comes from somewhere' (university?)</span></div><div class="line" id="141456"><span class="nick" style="color:#3c5b35"><a href="#141456" label="[14:14:56]">&lt;OriansJ&gt;</a></span><span class="message">gforce_de1977: long dead computer company's advertisements actually. As I never managed to find a copy of their actual manuals</span></div><div class="line" id="141613"><span class="nick" style="color:#6c3d55"><a href="#141613" label="[14:16:13]">&lt;gforce_de1977&gt;</a></span><span class="message">OriansJ: in the appendix, there is a pointer to Motorola 6809..., strange: there is not even a wikipedia entry for Knight-Architecture i know of...</span></div><div class="line" id="141659"><span class="nick" style="color:#6c3d55"><a href="#141659" label="[14:16:59]">&lt;gforce_de1977&gt;</a></span><span class="message">OriansJ: you selected knight, because of the possible easy implementation path?</span></div><div class="line" id="141825"><span class="nick" style="color:#3c5b35"><a href="#141825" label="[14:18:25]">&lt;OriansJ&gt;</a></span><span class="message">gforce_de1977: no patents that would still apply, Could be done in individual logic gates and because it was different enough that a trusting trust attack in software wouldn't include it.</span></div><div class="line" id="141903"><span class="nick" style="color:#3c5b35"><a href="#141903" label="[14:19:03]">&lt;OriansJ&gt;</a></span><span class="message">aka, it is weird and essentially forgotten</span></div><div class="line" id="141904"><span class="nick" style="color:#6c3d55"><a href="#141904" label="[14:19:04]">&lt;gforce_de1977&gt;</a></span><span class="message">OriansJ: understand, thank you!</span></div><div class="line" id="141943"><span class="nick" style="color:#3c5b35"><a href="#141943" label="[14:19:43]">&lt;OriansJ&gt;</a></span><span class="message">One needs to remember the more arbitrary hardware we can throw at the lower levels of the bootstrap the better.</span></div><div class="line" id="142003"><span class="nick" style="color:#6c3d55"><a href="#142003" label="[14:20:03]">&lt;gforce_de1977&gt;</a></span><span class="message">OriansJ: yes, i'am totally on your side!</span></div><div class="line" id="142028"><span class="nick" style="color:#3c5b35"><a href="#142028" label="[14:20:28]">&lt;OriansJ&gt;</a></span><span class="message">I want college students to think up arbitrary crap, get the stage0 steps up to cc_* running on it and make hiding hardware backdoors impossible.</span></div><div class="line" id="142154"><span class="nick" style="color:#3c5b35"><a href="#142154" label="[14:21:54]">&lt;OriansJ&gt;</a></span><span class="message">then I plan on doing libresilicon to get a trusted CPU and use that as a basis of trust. (That anyone can build)</span></div><div class="line" id="142211"><span class="nick" style="color:#6c3d55"><a href="#142211" label="[14:22:11]">&lt;gforce_de1977&gt;</a></span><span class="message">OriansJ: i very nice idea! hopefully some teacher gets impressed and the show can start</span></div><div class="line" id="142227"><span class="nick" style="color:#3c5b35"><a href="#142227" label="[14:22:27]">&lt;OriansJ&gt;</a></span><span class="message">As trying to buy trust just doesn't work</span></div><div class="line" id="142307"><span class="nick" style="color:#3c5b35"><a href="#142307" label="[14:23:07]">&lt;OriansJ&gt;</a></span><span class="message">well it does make for a good instruction to how software works.</span></div><div class="line" id="142328"><span class="nick" style="color:#3c5b35"><a href="#142328" label="[14:23:28]">&lt;OriansJ&gt;</a></span><span class="message">Starts with no linker, builds a minimal linker, then assembler and then a C compiler</span></div><div class="line" id="142926"><span class="nick" style="color:#3c5b35"><a href="#142926" label="[14:29:26]">&lt;OriansJ&gt;</a></span><span class="message">it allows one to teach an introduction to assembly; where there is no magic and the students get to define their own instructions.</span></div><div class="line" id="143026"><span class="nick" style="color:#3c5b35"><a href="#143026" label="[14:30:26]">&lt;OriansJ&gt;</a></span><span class="message">as every piece must be trivial to understand both in how it works and why. If any of it fails that, I need to fix it.</span></div><div class="line" id="143056"><span class="nick" style="color:#3c5b35"><a href="#143056" label="[14:30:56]">&lt;OriansJ&gt;</a></span><span class="message">As all of the early stages must be something that fits inside one's head</span></div><div class="line" id="163858"><span class="nick" style="color:#af8d2f"><a href="#163858" label="[16:38:58]">&lt;mid-kid&gt;</a></span><span class="message">If I understand correctly, Guix builds each &quot;package&quot; in a deterministic manner, and this applies to commencement.scm as well.</span></div><div class="line" id="163918"><span class="nick" style="color:#af8d2f"><a href="#163918" label="[16:39:18]">&lt;mid-kid&gt;</a></span><span class="message">However, binutils' `ar` tool likes to store the timestamps of files in .a archives, making them mismatch.</span></div><div class="line" id="163955"><span class="nick" style="color:#af8d2f"><a href="#163955" label="[16:39:55]">&lt;mid-kid&gt;</a></span><span class="message">And I see no use of the ar -D option or --enable-deterministic-archives, or any patch to disable the storing of timestamps.</span></div><div class="line" id="164024"><span class="nick" style="color:#af8d2f"><a href="#164024" label="[16:40:24]">&lt;mid-kid&gt;</a></span><span class="message">How does Guix deal with this, does it reset the timestamps during build? Does it use a filesystem without timestamps?</span></div><div class="line" id="164201"><span class="nick" style="color:#af8d2f"><a href="#164201" label="[16:42:01]">&lt;mid-kid&gt;</a></span><span class="message">binutils-2.14 doesn't even have a -D option to disable the storing of timestamps.</span></div><div class="line" id="164502"><span class="nick" style="color:#6d2462"><a href="#164502" label="[16:45:02]">&lt;xentrac&gt;</a></span><span class="message">OriansJ: I really like this idea and I wish I had taken a class like this</span></div><div class="line" id="164547"><span class="nick" style="color:#6d2462"><a href="#164547" label="[16:45:47]">&lt;xentrac&gt;</a></span><span class="message">but I am not experienced enough with teaching people to know whether it would be more popular or effective for most people than the more common approaches to it</span></div><div class="line" id="172743"><span class="nick" style="color:#2e2a4a"><a href="#172743" label="[17:27:43]">&lt;stikonas&gt;</a></span><span class="message">mid-kid: probably resets timestampts but ask on #guix</span></div><div class="line" id="172753"><span class="nick" style="color:#af8d2f"><a href="#172753" label="[17:27:53]">&lt;mid-kid&gt;</a></span><span class="message">Alright</span></div><div class="line" id="174037"><span class="nick" style="color:#389600"><a href="#174037" label="[17:40:37]">&lt;civodul&gt;</a></span><span class="message">mid-kid: for ar, Guix builds Binutils with --enable-deterministic-archives, which always resets timestamps</span></div><div class="line" id="174059"><span class="nick" style="color:#389600"><a href="#174059" label="[17:40:59]">&lt;civodul&gt;</a></span><span class="message">as for the files in /gnu/store, their mtime is always set to 1 (one second after the Epoch)</span></div><div class="line" id="174118"><span class="nick" style="color:#389600"><a href="#174118" label="[17:41:18]">&lt;civodul&gt;</a></span><span class="message">(this is inherited from Nix)</span></div><div class="line" id="174537"><span class="nick" style="color:#2e2a4a"><a href="#174537" label="[17:45:37]">&lt;stikonas&gt;</a></span><span class="message">mid-kid: but in any case guix does not build each package in deterministic manner. It tries to do as much as possible, but definitely far from every</span></div><div class="line" id="174722"><span class="nick" style="color:#af8d2f"><a href="#174722" label="[17:47:22]">&lt;mid-kid&gt;</a></span><span class="message">oh? I thought that was the point? Might be misled...</span></div><div class="line" id="174749"><span class="nick" style="color:#af8d2f"><a href="#174749" label="[17:47:49]">&lt;mid-kid&gt;</a></span><span class="message">civodul: the binutils used for commencement.scm packages doesn't have this option.</span></div><div class="line" id="174951"><span class="nick" style="color:#2e2a4a"><a href="#174951" label="[17:49:51]">&lt;stikonas&gt;</a></span><span class="message">mid-kid: also commencement.scm takes a few shortcuts in bootstrapping stuff (some of them due to guile driving the build process, if we don't have guile, we can't run e.g. gash)...</span></div><div class="line" id="175017"><span class="nick" style="color:#6c3d55"><a href="#175017" label="[17:50:17]">&lt;gforce_de1977&gt;</a></span><span class="message">fossy: can you please just add my pullrequest, otherwise i always have to change your script, which is annoying. the argument1 &quot;ci&quot; should not hurt for you or other people, but could be of use: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/17/commits/902428e8885cea678005c1f9bc93dc0ea483716e">https://github.com/fosslinux/live-bootstrap/pull/17/commits/902428e8885cea678005c1f9bc93dc0ea483716e</a> </span></div><div class="line" id="175154"><span class="nick" style="color:#af8d2f"><a href="#175154" label="[17:51:54]">&lt;mid-kid&gt;</a></span><span class="message">stikonas: Right, but it's the only working &quot;full&quot; bootstrap chain I've found, so I'm trying to understand it.</span></div><div class="line" id="175229"><span class="nick" style="color:#2e2a4a"><a href="#175229" label="[17:52:29]">&lt;stikonas&gt;</a></span><span class="message">mid-kid: well, we have some bootstrap chain (based on guix) that does not take shortcuts, but it's not finished yet</span></div><div class="line" id="175250"><span class="nick" style="color:#2e2a4a"><a href="#175250" label="[17:52:50]">&lt;stikonas&gt;</a></span><span class="message">we have built tcc, sed, coreutils, gzip, tar, bzip2, m4, make...</span></div><div class="line" id="175306"><span class="nick" style="color:#2e2a4a"><a href="#175306" label="[17:53:06]">&lt;stikonas&gt;</a></span><span class="message">but properly building bash and autotools is much harder...</span></div><div class="line" id="175322"><span class="nick" style="color:#2e2a4a"><a href="#175322" label="[17:53:22]">&lt;stikonas&gt;</a></span><span class="message">e.g. guix just runs configure scripts that are in packages</span></div><div class="line" id="175326"><span class="nick" style="color:#2e2a4a"><a href="#175326" label="[17:53:26]">&lt;stikonas&gt;</a></span><span class="message">even though they are not really source</span></div><div class="line" id="175341"><span class="nick" style="color:#2e2a4a"><a href="#175341" label="[17:53:41]">&lt;stikonas&gt;</a></span><span class="message">and bash source has some autogenerated C files too</span></div><div class="line" id="175342"><span class="nick" style="color:#6d2462"><a href="#175342" label="[17:53:42]">&lt;xentrac&gt;</a></span><span class="message">OriansJ: the Knight was originally a 16-bit machine, right?  I'm trying to find documentation for the original machine and failing</span></div><div class="line" id="175408"><span class="nick" style="color:#2e2a4a"><a href="#175408" label="[17:54:08]">&lt;stikonas&gt;</a></span><span class="message">well, original manufacture was gone before internet appeared</span></div><div class="line" id="175414"><span class="nick" style="color:#2e2a4a"><a href="#175414" label="[17:54:14]">&lt;stikonas&gt;</a></span><span class="message">so I guess it would be hard to find anything online</span></div><div class="line" id="175418"><span class="nick" style="color:#af8d2f"><a href="#175418" label="[17:54:18]">&lt;mid-kid&gt;</a></span><span class="message">stikonas: where can I find it?</span></div><div class="line" id="175431"><span class="nick" style="color:#2e2a4a"><a href="#175431" label="[17:54:31]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/">https://github.com/fosslinux/live-bootstrap/</a> </span></div><div class="line" id="175459"><span class="nick" style="color:#2e2a4a"><a href="#175459" label="[17:54:59]">&lt;stikonas&gt;</a></span><span class="message">mid-kid: this is my branch  that goes just a bit further <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/16">https://github.com/fosslinux/live-bootstrap/pull/16</a> </span></div><div class="line" id="175519"><span class="nick" style="color:#2e2a4a"><a href="#175519" label="[17:55:19]">&lt;stikonas&gt;</a></span><span class="message">mid-kid: not that bash is included there but it's not &quot;properly&quot; done like I mentioned above, we need to bootstrap flex/bison</span></div><div class="line" id="175534"><span class="nick" style="color:#af8d2f"><a href="#175534" label="[17:55:34]">&lt;mid-kid&gt;</a></span><span class="message">ooh, interesting.</span></div><div class="line" id="175536"><span class="nick" style="color:#2e2a4a"><a href="#175536" label="[17:55:36]">&lt;stikonas&gt;</a></span><span class="message">and that might require building musl</span></div><div class="line" id="175544"><span class="nick" style="color:#2e2a4a"><a href="#175544" label="[17:55:44]">&lt;stikonas&gt;</a></span><span class="message">mid-kid: but you can run quite a bit of it</span></div><div class="line" id="175551"><span class="nick" style="color:#2e2a4a"><a href="#175551" label="[17:55:51]">&lt;stikonas&gt;</a></span><span class="message">(either in QEMU, chroot or on real hardware)</span></div><div class="line" id="175637"><span class="nick" style="color:#2e2a4a"><a href="#175637" label="[17:56:37]">&lt;stikonas&gt;</a></span><span class="message">so it starts with 357 byte hex0 and 737 byte non-interactive kaem shell)</span></div><div class="line" id="175743"><span class="nick" style="color:#2e2a4a"><a href="#175743" label="[17:57:43]">&lt;stikonas&gt;</a></span><span class="message">mid-kid: but getting autotools will be hard :(</span></div><div class="line" id="175805"><span class="nick" style="color:#2e2a4a"><a href="#175805" label="[17:58:05]">&lt;stikonas&gt;</a></span><span class="message">autotools depend on perl, and perl also needs perl for full build</span></div><div class="line" id="175828"><span class="nick" style="color:#2e2a4a"><a href="#175828" label="[17:58:28]">&lt;stikonas&gt;</a></span><span class="message">(Configure script used for building perl is generated with perl)</span></div><div class="line" id="175855"><span class="nick" style="color:#af8d2f"><a href="#175855" label="[17:58:55]">&lt;mid-kid&gt;</a></span><span class="message">I'll check it out, I was basing my scripts on the guix bootstrap chain, with about 2MB of mes+busybox as seed, as I thought mes-m2 was still unusable.</span></div><div class="line" id="175904"><span class="nick" style="color:#af8d2f"><a href="#175904" label="[17:59:04]">&lt;mid-kid&gt;</a></span><span class="message">I see it doesn't go beyond mes though?</span></div><div class="line" id="175925"><span class="nick" style="color:#af8d2f"><a href="#175925" label="[17:59:25]">&lt;mid-kid&gt;</a></span><span class="message">I mean, beyond tcc</span></div><div class="line" id="175954"><span class="nick" style="color:#6d2462"><a href="#175954" label="[17:59:54]">&lt;xentrac&gt;</a></span><span class="message">stikonas: is there an autoconf ./configure alternative to ./Configure for Perl, or am I misremembering?</span></div><div class="line" id="180002"><span class="nick" style="color:#6d2462"><a href="#180002" label="[18:00:02]">&lt;xentrac&gt;</a></span><span class="message">(or does autoconf depend on Perl too?)</span></div><div class="line" id="180108"><span class="nick" style="color:#2e2a4a"><a href="#180108" label="[18:01:08]">&lt;stikonas&gt;</a></span><span class="message">xentrac: autoconf depend on perl</span></div><div class="line" id="180111"><span class="nick" style="color:#2e2a4a"><a href="#180111" label="[18:01:11]">&lt;stikonas&gt;</a></span><span class="message">automake is written in perl</span></div><div class="line" id="180124"><span class="nick" style="color:#2e2a4a"><a href="#180124" label="[18:01:24]">&lt;stikonas&gt;</a></span><span class="message">and part of autonf too I think</span></div><div class="line" id="180154"><span class="nick" style="color:#2e2a4a"><a href="#180154" label="[18:01:54]">&lt;stikonas&gt;</a></span><span class="message">mid-kid: it goes a bit beyond tcc</span></div><div class="line" id="180200"><span class="nick" style="color:#af8d2f"><a href="#180200" label="[18:02:00]">&lt;mid-kid&gt;</a></span><span class="message">As for autotools, in some cases you can make your own config.h and avoid it, especially with the older GNU packages.</span></div><div class="line" id="180206"><span class="nick" style="color:#2e2a4a"><a href="#180206" label="[18:02:06]">&lt;stikonas&gt;</a></span><span class="message">it's tcc + sed, coreutils, gzip, tar, bzip2, m4, make...</span></div><div class="line" id="180219"><span class="nick" style="color:#2e2a4a"><a href="#180219" label="[18:02:19]">&lt;stikonas&gt;</a></span><span class="message">mid-kid: that's what we did for those packages</span></div><div class="line" id="180227"><span class="nick" style="color:#af8d2f"><a href="#180227" label="[18:02:27]">&lt;mid-kid&gt;</a></span><span class="message">Ah, I see.</span></div><div class="line" id="180234"><span class="nick" style="color:#2e2a4a"><a href="#180234" label="[18:02:34]">&lt;stikonas&gt;</a></span><span class="message">but we'll have to bootstrap it at some point</span></div><div class="line" id="180239"><span class="nick" style="color:#2e2a4a"><a href="#180239" label="[18:02:39]">&lt;stikonas&gt;</a></span><span class="message">you just can't do it for gcc</span></div><div class="line" id="180240"><span class="nick" style="color:#af8d2f"><a href="#180240" label="[18:02:40]">&lt;mid-kid&gt;</a></span><span class="message">Yeah.</span></div><div class="line" id="180349"><span class="nick" style="color:#2e2a4a"><a href="#180349" label="[18:03:49]">&lt;stikonas&gt;</a></span><span class="message">mid-kid: initially it was just plain &quot;kaem&quot; shell scripts that we used, but now we have make, so we are using hand-written makefiles</span></div><div class="line" id="180408"><span class="nick" style="color:#2e2a4a"><a href="#180408" label="[18:04:08]">&lt;stikonas&gt;</a></span><span class="message">e.g. to build coreutils <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/16/commits/9faa0cc41d86b49aacd0607b8f9140adc6f0c80a#diff-eb831fbd3cd4ce82d41075e54e9883905a30963ee09d79883060e7a74245d4ce">https://github.com/fosslinux/live-bootstrap/pull/16/commits/9faa0cc41d86b49aacd0607b8f9140adc6f0c80a#diff-eb831fbd3cd4ce82d41075e54e9883905a30963ee09d79883060e7a74245d4ce</a> </span></div><div class="line" id="180424"><span class="nick" style="color:#2e2a4a"><a href="#180424" label="[18:04:24]">&lt;stikonas&gt;</a></span><span class="message">mid-kid: we probably need to build musl too...</span></div><div class="line" id="180428"><span class="nick" style="color:#2e2a4a"><a href="#180428" label="[18:04:28]">&lt;stikonas&gt;</a></span><span class="message">next..</span></div><div class="line" id="180435"><span class="nick" style="color:#2e2a4a"><a href="#180435" label="[18:04:35]">&lt;stikonas&gt;</a></span><span class="message">mes libc is a bit too small</span></div><div class="line" id="180531"><span class="nick" style="color:#af8d2f"><a href="#180531" label="[18:05:31]">&lt;mid-kid&gt;</a></span><span class="message">Haven't found a way to build musl (even older versions) with tcc+mes-libc yet...</span></div><div class="line" id="180537"><span class="nick" style="color:#af8d2f"><a href="#180537" label="[18:05:37]">&lt;mid-kid&gt;</a></span><span class="message">That said I didn't try very hard.</span></div><div class="line" id="180808"><span class="nick" style="color:#2e2a4a"><a href="#180808" label="[18:08:08]">&lt;stikonas&gt;</a></span><span class="message">mid-kid: I did try the other day, but still some of the things need fixing</span></div><div class="line" id="180823"><span class="nick" style="color:#2e2a4a"><a href="#180823" label="[18:08:23]">&lt;stikonas&gt;</a></span><span class="message">mid-kid: this fork <a rel="nofollow" href="https://gitlab.com/giomasce/musl/">https://gitlab.com/giomasce/musl/</a> </span></div><div class="line" id="180833"><span class="nick" style="color:#2e2a4a"><a href="#180833" label="[18:08:33]">&lt;stikonas&gt;</a></span><span class="message">but you also need tcc newer than 0.9.27</span></div><div class="line" id="180847"><span class="nick" style="color:#2e2a4a"><a href="#180847" label="[18:08:47]">&lt;stikonas&gt;</a></span><span class="message">(but not latest git, because that one does not build on mes libc)</span></div><div class="line" id="180855"><span class="nick" style="color:#6c3d55"><a href="#180855" label="[18:08:55]">&lt;gforce_de1977&gt;</a></span><span class="message">perl? KILL IT WITH FIRE! 8-) <a rel="nofollow" href="https://lkml.org/lkml/2015/1/6/850">https://lkml.org/lkml/2015/1/6/850</a> </span></div><div class="line" id="180901"><span class="nick" style="color:#af8d2f"><a href="#180901" label="[18:09:01]">&lt;mid-kid&gt;</a></span><span class="message">ahhhh....</span></div><div class="line" id="181048"><span class="nick" style="color:#2e2a4a"><a href="#181048" label="[18:10:48]">&lt;stikonas&gt;</a></span><span class="message"> /usr/bin/automake-1.13: Perl script text executable</span></div><div class="line" id="181209"><span class="nick" style="color:#389600"><a href="#181209" label="[18:12:09]">&lt;civodul&gt;</a></span><span class="message">mid-kid: ah ha! it could be that it didn't exist, but not that most makefiles do &quot;ar D&quot;, which is equivalent</span></div><div class="line" id="181252"><span class="nick" style="color:#2e2a4a"><a href="#181252" label="[18:12:52]">&lt;stikonas&gt;</a></span><span class="message">well, you can also make .a archives using cat</span></div><div class="line" id="181257"><span class="nick" style="color:#2e2a4a"><a href="#181257" label="[18:12:57]">&lt;stikonas&gt;</a></span><span class="message">cat is deterministic :D</span></div><div class="line" id="181346"><span class="nick" style="color:#2e2a4a"><a href="#181346" label="[18:13:46]">&lt;stikonas&gt;</a></span><span class="message">that's what we use to build mes libc</span></div><div class="line" id="181429"><span class="nick" style="color:#389600"><a href="#181429" label="[18:14:29]">&lt;civodul&gt;</a></span><span class="message">heh yes, that too :-)</span></div><div class="line" id="181439"><span class="nick" style="color:#6d2462"><a href="#181439" label="[18:14:39]">&lt;xentrac&gt;</a></span><span class="message">stikonas: yeah, I think autoconf would probably have been written in Perl too if it had been started a few years later</span></div><div class="line" id="181604"><span class="nick" style="color:#2e2a4a"><a href="#181604" label="[18:16:04]">&lt;stikonas&gt;</a></span><span class="message">yeah, now it's shell script that uses m4 and awk...</span></div><div class="line" id="181615"><span class="nick" style="color:#2e2a4a"><a href="#181615" label="[18:16:15]">&lt;stikonas&gt;</a></span><span class="message">well, we have m4, awk still needs bison...</span></div><div class="line" id="181645"><span class="nick" style="color:#af8d2f"><a href="#181645" label="[18:16:45]">&lt;mid-kid&gt;</a></span><span class="message">civodul does binutils 2.14 have the option though?</span></div><div class="line" id="181657"><span class="nick" style="color:#389600"><a href="#181657" label="[18:16:57]">&lt;civodul&gt;</a></span><span class="message">dunno</span></div><div class="line" id="181746"><span class="nick" style="color:#af8d2f"><a href="#181746" label="[18:17:46]">&lt;mid-kid&gt;</a></span><span class="message">it's not mentioned in the manpage at least...</span></div><div class="line" id="181929"><span class="nick" style="color:#6d2462"><a href="#181929" label="[18:19:29]">&lt;xentrac&gt;</a></span><span class="message">stikonas: hmm, are there no awk implementations without yacc?  surely someone must have written a recursive-descent-parsing awk at some point</span></div><div class="line" id="182028"><span class="nick" style="color:#389600"><a href="#182028" label="[18:20:28]">&lt;civodul&gt;</a></span><span class="message">mid-kid: interesting: it would seem that gcc-core-mesboot0 is not reproducible</span></div><div class="line" id="182035"><span class="nick" style="color:#389600"><a href="#182035" label="[18:20:35]">&lt;civodul&gt;</a></span><span class="message">checking whether this is due to that</span></div><div class="line" id="182140"><span class="nick" style="color:#af8d2f"><a href="#182140" label="[18:21:40]">&lt;mid-kid&gt;</a></span><span class="message">wouldn't be too surprised. I think I'll end up patching 2.14 and 2.20 to force removing the timestamps.</span></div><div class="line" id="182201"><span class="nick" style="color:#2e2a4a"><a href="#182201" label="[18:22:01]">&lt;stikonas&gt;</a></span><span class="message">xentrac: maybe there are, but I haven't looke to omuch since we need yacc anyway</span></div><div class="line" id="182210"><span class="nick" style="color:#2e2a4a"><a href="#182210" label="[18:22:10]">&lt;stikonas&gt;</a></span><span class="message">or rather bison if I remember correctly</span></div><div class="line" id="182215"><span class="nick" style="color:#2e2a4a"><a href="#182215" label="[18:22:15]">&lt;stikonas&gt;</a></span><span class="message">(bash needs it)</span></div><div class="line" id="182325"><span class="nick" style="color:#389600"><a href="#182325" label="[18:23:25]">&lt;civodul&gt;</a></span><span class="message">mid-kid: good catch, that was it!</span></div><div class="line" id="182328"><span class="nick" style="color:#8dd3c7"><a href="#182328" label="[18:23:28]">*</a></span><span class="message">civodul files a bug</span></div><div class="line" id="182515"><span class="nick" style="color:#6d2462"><a href="#182515" label="[18:25:15]">&lt;xentrac&gt;</a></span><span class="message">civodul: not reproducible in the sense that the results aren't bitwise the same, or not reproducible in the sense that it doesn't build at all?</span></div><div class="line" id="182556"><span class="nick" style="color:#af8d2f"><a href="#182556" label="[18:25:56]">&lt;mid-kid&gt;</a></span><span class="message">bitwise</span></div><div class="line" id="182617"><span class="nick" style="color:#6d2462"><a href="#182617" label="[18:26:17]">&lt;xentrac&gt;</a></span><span class="message">stikonas: ah, and awk isn't sufficient for autoconf because it also depends on Perl, and awk isn't otherwis necessary for bison?  maybe some kind of graphviz diagram would be helpful for this kind of thing</span></div><div class="line" id="182742"><span class="nick" style="color:#2e2a4a"><a href="#182742" label="[18:27:42]">&lt;stikonas&gt;</a></span><span class="message">xentrac: yeah... diagrams might be helpful</span></div><div class="line" id="182756"><span class="nick" style="color:#2e2a4a"><a href="#182756" label="[18:27:56]">&lt;stikonas&gt;</a></span><span class="message">so autotools depend on perl, m4, awk</span></div><div class="line" id="182759"><span class="nick" style="color:#2e2a4a"><a href="#182759" label="[18:27:59]">&lt;stikonas&gt;</a></span><span class="message">perl depends on perl</span></div><div class="line" id="182801"><span class="nick" style="color:#2e2a4a"><a href="#182801" label="[18:28:01]">&lt;stikonas&gt;</a></span><span class="message">m4 we have</span></div><div class="line" id="182802"><span class="nick" style="color:#389600"><a href="#182802" label="[18:28:02]">&lt;civodul&gt;</a></span><span class="message">xentrac: in the sense that they're not bit-reproducible, due to timestamps in .a files</span></div><div class="line" id="182805"><span class="nick" style="color:#2e2a4a"><a href="#182805" label="[18:28:05]">&lt;stikonas&gt;</a></span><span class="message">awk depends on bison</span></div><div class="line" id="182805"><span class="nick" style="color:#6d2462"><a href="#182805" label="[18:28:05]">&lt;xentrac&gt;</a></span><span class="message">mawk and gawk both depend on yacc</span></div><div class="line" id="182834"><span class="nick" style="color:#2e2a4a"><a href="#182834" label="[18:28:34]">&lt;stikonas&gt;</a></span><span class="message">bison and flex depend on each other but there is some bison-bootstrap path via heirloom lex/yacc that we can try</span></div><div class="line" id="182843"><span class="nick" style="color:#6d2462"><a href="#182843" label="[18:28:43]">&lt;xentrac&gt;</a></span><span class="message">civodul: we might want clearer terminology to distinguish FTBFS from &quot;nondeterministic&quot;</span></div><div class="line" id="183032"><span class="nick" style="color:#389600"><a href="#183032" label="[18:30:32]">&lt;civodul&gt;</a></span><span class="message">xentrac: ah sure, i'm used to the Guix and R-B contexts where it's clear that it's bitwise reproducibility we're talking about :-)</span></div><div class="line" id="183047"><span class="nick" style="color:#6d2462"><a href="#183047" label="[18:30:47]">&lt;xentrac&gt;</a></span><span class="message">original-awk also depends on yacc (but presumably any old yacc, not specifically bison, which might be a distinction worth making in light of nyacc)</span></div><div class="line" id="183103"><span class="nick" style="color:#6d2462"><a href="#183103" label="[18:31:03]">&lt;xentrac&gt;</a></span><span class="message">civodul: sorry if I'm being dense!</span></div><div class="line" id="183119"><span class="nick" style="color:#389600"><a href="#183119" label="[18:31:19]">&lt;civodul&gt;</a></span><span class="message">np!</span></div><div class="line" id="183327"><span class="nick" style="color:#6d2462"><a href="#183327" label="[18:33:27]">&lt;xentrac&gt;</a></span><span class="message">awk from 9base (the Plan 9 awk) also depends on yacc.  although the plan9 yacc in 9base doesn't seem to depend on yacc</span></div><div class="line" id="183548"><span class="nick" style="color:#6d2462"><a href="#183548" label="[18:35:48]">&lt;xentrac&gt;</a></span><span class="message">that is, 9base_6.orig/yacc doesn't contain any *.y files or anything that looks like an LALR transition table encoded in C</span></div><div class="line" id="183619"><span class="nick" style="color:#6d2462"><a href="#183619" label="[18:36:19]">&lt;xentrac&gt;</a></span><span class="message">I was concerned that maybe it would be written in Plan9 C instead of ANSI C but I don't see any obvious sense in which that is the case</span></div><div class="line" id="183635"><span class="nick" style="color:#6d2462"><a href="#183635" label="[18:36:35]">&lt;xentrac&gt;</a></span><span class="message">but maybe nyacc is a better option</span></div><div class="line" id="183703"><span class="nick" style="color:#6d2462"><a href="#183703" label="[18:37:03]">&lt;xentrac&gt;</a></span><span class="message">(also presumably Debian's 9base package doesn't require Plan9 C to build!)</span></div><div class="line" id="220852"><span class="nick" style="color:#6d2462"><a href="#220852" label="[22:08:52]">&lt;xentrac&gt;</a></span><span class="message">&quot;to my great surprise, even the latest GCC compiler happily supports the PDP11 architecture&quot; <a rel="nofollow" href="http://spritesmods.com/?art=minipdp11&amp;page=3">http://spritesmods.com/?art=minipdp11&amp;page=3</a> </span></div><div class="line" id="223253"><span class="nick" style="color:#8dd3c7"><a href="#223253" label="[22:32:53]">&lt;fossy&gt;</a></span><span class="message">gforce_de1977: I see no reason to add unnessecary complexity to rootfs.sh when those exact commands can just go in the ci script, since we would just be using it for CI</span></div><div class="line" id="223503"><span class="nick" style="color:#3c5b35"><a href="#223503" label="[22:35:03]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: building for and running on are two very different problems.</span></div><div class="line" id="223605"><span class="nick" style="color:#6d2462"><a href="#223605" label="[22:36:05]">&lt;xentrac&gt;</a></span><span class="message">yeah, I don't think GCC can even run on a sun2</span></div><div class="line" id="223716"><span class="nick" style="color:#6d2462"><a href="#223716" label="[22:37:16]">&lt;xentrac&gt;</a></span><span class="message">(because the 68000 ignored the most significant byte of not just the physical address but also the virtual address!)</span></div><div class="line" id="225629"><span class="nick" style="color:#2e2a4a"><a href="#225629" label="[22:56:29]">&lt;stikonas&gt;</a></span><span class="message">fossy: I've added a couple of more utils to coreutils PR...</span></div><div class="line" id="225652"><span class="nick" style="color:#2e2a4a"><a href="#225652" label="[22:56:52]">&lt;stikonas&gt;</a></span><span class="message">but I guess I still need to update everything to your refactor</span></div><div class="line" id="225654"><span class="nick" style="color:#2e2a4a"><a href="#225654" label="[22:56:54]">&lt;stikonas&gt;</a></span><span class="message">once you push</span></div><div class="line" id="225821"><span class="nick" style="color:#2e2a4a"><a href="#225821" label="[22:58:21]">&lt;stikonas&gt;</a></span><span class="message">fossy: I also had another quick look at musl (still manual testing)... Hit a few problems btu hopefully they are not intractable</span></div><div class="line" id="225914"><span class="nick" style="color:#2e2a4a"><a href="#225914" label="[22:59:14]">&lt;stikonas&gt;</a></span><span class="message">first of all we need newer tinycc... secondly, I might be hitting the same problem you had with mes libc (I guess that's why you had to create unified sources)</span></div><div class="line" id="225950"><span class="nick" style="color:#2e2a4a"><a href="#225950" label="[22:59:50]">&lt;stikonas&gt;</a></span><span class="message">and binaries were still segfaulting for me... (although they do compile)</span></div><div class="line" id="231214"><span class="nick" style="color:#2e2a4a"><a href="#231214" label="[23:12:14]">&lt;pder&gt;</a></span><span class="message">stikonas: earlier you said that perl depends on perl.  Where are you seeing that?</span></div><div class="line" id="231253"><span class="nick" style="color:#2e2a4a"><a href="#231253" label="[23:12:53]">&lt;stikonas&gt;</a></span><span class="message">pder: Configure script is generated using perl</span></div><div class="line" id="231311"><span class="nick" style="color:#2e2a4a"><a href="#231311" label="[23:13:11]">&lt;stikonas&gt;</a></span><span class="message">so if you don't want to use pregenerated files (that are not source) then you get this dependency</span></div><div class="line" id="231325"><span class="nick" style="color:#2e2a4a"><a href="#231325" label="[23:13:25]">&lt;pder&gt;</a></span><span class="message">Ah, I see.</span></div><div class="line" id="231329"><span class="nick" style="color:#2e2a4a"><a href="#231329" label="[23:13:29]">&lt;stikonas&gt;</a></span><span class="message">it's not a &quot;strong&quot; dependency like e.g. gcc depends on gcc...</span></div><div class="line" id="231413"><span class="nick" style="color:#2e2a4a"><a href="#231413" label="[23:14:13]">&lt;stikonas&gt;</a></span><span class="message">so we might be able to write some manual build script to build miniperl</span></div><div class="line" id="231418"><span class="nick" style="color:#2e2a4a"><a href="#231418" label="[23:14:18]">&lt;stikonas&gt;</a></span><span class="message">if that can create configure...</span></div><div class="line" id="231427"><span class="nick" style="color:#2e2a4a"><a href="#231427" label="[23:14:27]">&lt;stikonas&gt;</a></span><span class="message">but I'm not sure at this stage</span></div><br /></div></body></html>