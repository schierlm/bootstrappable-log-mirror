<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-01-03.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="035043"><span class="nick" style="color:#8dd3c7"><a href="#035043" label="[03:50:43]">&lt;oriansj&gt;</a></span><span class="message">fossy: guile can also be used inplace of mes.c (which enables even faster running of MesCC)</span></div><div class="line" id="035312"><span class="nick" style="color:#2e2a4a"><a href="#035312" label="[03:53:12]">&lt;fossy&gt;</a></span><span class="message">oriansj: but to reduce the seeds mes would be smaller</span></div><div class="line" id="062233"><span class="nick" style="color:#2e2a4a"><a href="#062233" label="[06:22:33]">&lt;fossy&gt;</a></span><span class="message">nice, 280kb busybox</span></div><div class="line" id="164110"><span class="nick">***</span><span class="message notice">ng0_ is now known as ng0</span></div><div class="line" id="204716"><span class="nick" style="color:#8dd3c7"><a href="#204716" label="[20:47:16]">&lt;oriansj&gt;</a></span><span class="message">fossy: I say this because mes-m2 is going to be a drop in replacement for guile when done and it'll be bootstrapped in mescc-tools-seed <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-seed">https://github.com/oriansj/mescc-tools-seed</a>  which if you didn't know reduces the binaries down to 357bytes.</span></div><div class="line" id="204809"><span class="nick" style="color:#8dd3c7"><a href="#204809" label="[20:48:09]">&lt;oriansj&gt;</a></span><span class="message">also no need for busybox at all with gash</span></div><div class="line" id="205130"><span class="nick" style="color:#2e2a4a"><a href="#205130" label="[20:51:30]">&lt;fossy&gt;</a></span><span class="message">oriansj: oh yes, I plan to refractor the early stages with mescc tools seed, mes-m2 and gash once mes-m2 can run mescv</span></div><div class="line" id="205141"><span class="nick" style="color:#2e2a4a"><a href="#205141" label="[20:51:41]">&lt;fossy&gt;</a></span><span class="message">mescc*</span></div><div class="line" id="205142"><span class="nick" style="color:#8dd3c7"><a href="#205142" label="[20:51:42]">&lt;oriansj&gt;</a></span><span class="message">That is why mes-m2 is taking so long; it needs work to become a drop in replacement for guile</span></div><div class="line" id="205353"><span class="nick" style="color:#8dd3c7"><a href="#205353" label="[20:53:53]">&lt;oriansj&gt;</a></span><span class="message">fossy: also if you write your steps in kaem.run format, it can be included in mescc-tools-seed and thus leveraged by all distros that wish to leverage it</span></div><div class="line" id="205430"><span class="nick" style="color:#8dd3c7"><a href="#205430" label="[20:54:30]">&lt;oriansj&gt;</a></span><span class="message">(an example <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-seed/blob/master/AMD64/mescc-tools.kaem">https://github.com/oriansj/mescc-tools-seed/blob/master/AMD64/mescc-tools.kaem</a>  )</span></div><div class="line" id="205617"><span class="nick" style="color:#2e2a4a"><a href="#205617" label="[20:56:17]">&lt;fossy&gt;</a></span><span class="message">oriansj: whats mescc-tools-seed</span></div><div class="line" id="205620"><span class="nick" style="color:#2e2a4a"><a href="#205620" label="[20:56:20]">&lt;fossy&gt;</a></span><span class="message">Sorry</span></div><div class="line" id="205635"><span class="nick" style="color:#2e2a4a"><a href="#205635" label="[20:56:35]">&lt;fossy&gt;</a></span><span class="message">acidentally pressed entre</span></div><div class="line" id="205638"><span class="nick" style="color:#2e2a4a"><a href="#205638" label="[20:56:38]">&lt;fossy&gt;</a></span><span class="message">enter</span></div><div class="line" id="205649"><span class="nick" style="color:#2e2a4a"><a href="#205649" label="[20:56:49]">&lt;fossy&gt;</a></span><span class="message">whats the goal of mescc tools seed</span></div><div class="line" id="205719"><span class="nick" style="color:#2e2a4a"><a href="#205719" label="[20:57:19]">&lt;fossy&gt;</a></span><span class="message">ie, is it meant to be able to bootstrap up to mescc, or all the way to a GCC 9 triplet?</span></div><div class="line" id="205726"><span class="nick" style="color:#8dd3c7"><a href="#205726" label="[20:57:26]">&lt;oriansj&gt;</a></span><span class="message">fossy: mescc-tools-seed is just a repo that brings together all of the pieces needed to bootstrap gcc from hex0 into a single place</span></div><div class="line" id="205731"><span class="nick" style="color:#2e2a4a"><a href="#205731" label="[20:57:31]">&lt;fossy&gt;</a></span><span class="message">ah, ok</span></div><div class="line" id="205743"><span class="nick" style="color:#2e2a4a"><a href="#205743" label="[20:57:43]">&lt;fossy&gt;</a></span><span class="message">ive used it for mes-m2</span></div><div class="line" id="205758"><span class="nick" style="color:#8dd3c7"><a href="#205758" label="[20:57:58]">&lt;oriansj&gt;</a></span><span class="message">It leverages git modules to include exact commits of the source repos to ensure always working bootstraps</span></div><div class="line" id="205808"><span class="nick" style="color:#2e2a4a"><a href="#205808" label="[20:58:08]">&lt;fossy&gt;</a></span><span class="message">OK, ill work within kaem.run then</span></div><div class="line" id="205833"><span class="nick" style="color:#2e2a4a"><a href="#205833" label="[20:58:33]">&lt;fossy&gt;</a></span><span class="message">how will the sources for later parts of the bootstrap work, with GCC and the like?</span></div><div class="line" id="205845"><span class="nick" style="color:#2e2a4a"><a href="#205845" label="[20:58:45]">&lt;fossy&gt;</a></span><span class="message">will that also be git modules</span></div><div class="line" id="205852"><span class="nick" style="color:#8dd3c7"><a href="#205852" label="[20:58:52]">&lt;oriansj&gt;</a></span><span class="message">bingo</span></div><div class="line" id="205919"><span class="nick" style="color:#8dd3c7"><a href="#205919" label="[20:59:19]">&lt;oriansj&gt;</a></span><span class="message">So that scripts have relative paths that will always exist in a known good state</span></div><div class="line" id="205933"><span class="nick" style="color:#2e2a4a"><a href="#205933" label="[20:59:33]">&lt;fossy&gt;</a></span><span class="message">so using savannah.gnu.org I assume</span></div><div class="line" id="205953"><span class="nick" style="color:#8dd3c7"><a href="#205953" label="[20:59:53]">&lt;oriansj&gt;</a></span><span class="message">when possible yes</span></div><div class="line" id="210620"><span class="nick" style="color:#2e2a4a"><a href="#210620" label="[21:06:20]">&lt;fossy&gt;</a></span><span class="message">cool</span></div><div class="line" id="210654"><span class="nick" style="color:#2e2a4a"><a href="#210654" label="[21:06:54]">&lt;fossy&gt;</a></span><span class="message">oriansj: wheres mes-m2 up to, is there a blocker at the moment or something?</span></div><div class="line" id="210851"><span class="nick" style="color:#8dd3c7"><a href="#210851" label="[21:08:51]">&lt;oriansj&gt;</a></span><span class="message">fossy: the blocker is I still need to figure out a good test for guile modules that is correct. (then I'll hit my next blocker)</span></div><div class="line" id="210923"><span class="nick" style="color:#2e2a4a"><a href="#210923" label="[21:09:23]">&lt;fossy&gt;</a></span><span class="message">hrm</span></div><div class="line" id="210924"><span class="nick" style="color:#8dd3c7"><a href="#210924" label="[21:09:24]">&lt;oriansj&gt;</a></span><span class="message">Full guile compatiblity is something that mes.c didn't have</span></div><div class="line" id="210952"><span class="nick" style="color:#8dd3c7"><a href="#210952" label="[21:09:52]">&lt;oriansj&gt;</a></span><span class="message">So by forcing myself to do it the correct way, will reduce work in the long term but also requires alot more upfront work</span></div><div class="line" id="211036"><span class="nick" style="color:#6b8072"><a href="#211036" label="[21:10:36]">*</a></span><span class="message">fossy research guile modules</span></div><div class="line" id="211133"><span class="nick" style="color:#8dd3c7"><a href="#211133" label="[21:11:33]">&lt;oriansj&gt;</a></span><span class="message">which is why I keep saying leverage guile for MesCC; so that when I finally get done, it is a trivial change (replace guile with mes-m2) and boom completely done</span></div><div class="line" id="211145"><span class="nick" style="color:#2e2a4a"><a href="#211145" label="[21:11:45]">&lt;fossy&gt;</a></span><span class="message">right I see</span></div><div class="line" id="211156"><span class="nick" style="color:#8dd3c7"><a href="#211156" label="[21:11:56]">&lt;oriansj&gt;</a></span><span class="message">it not only solves the gcc bootstrap but also the guile bootstrap problem</span></div><div class="line" id="211213"><span class="nick" style="color:#2e2a4a"><a href="#211213" label="[21:12:13]">&lt;fossy&gt;</a></span><span class="message">is there any reason to leverage mes instead of guile right now, if its only for mescc</span></div><div class="line" id="211233"><span class="nick" style="color:#2e2a4a"><a href="#211233" label="[21:12:33]">&lt;fossy&gt;</a></span><span class="message">because afaict mes is smaller then guile</span></div><div class="line" id="211250"><span class="nick" style="color:#8dd3c7"><a href="#211250" label="[21:12:50]">&lt;oriansj&gt;</a></span><span class="message">fossy: that is absolutely true</span></div><div class="line" id="211317"><span class="nick" style="color:#8dd3c7"><a href="#211317" label="[21:13:17]">&lt;oriansj&gt;</a></span><span class="message">but right now the guix bootstrap seed will still be cut by 50% when it reduces down to just guile</span></div><div class="line" id="211323"><span class="nick" style="color:#2e2a4a"><a href="#211323" label="[21:13:23]">&lt;fossy&gt;</a></span><span class="message">right</span></div><div class="line" id="211353"><span class="nick" style="color:#8dd3c7"><a href="#211353" label="[21:13:53]">&lt;oriansj&gt;</a></span><span class="message">Then the focus becomes making mes-m2 guile compatible and everyone can pull in the same direction at the end</span></div><div class="line" id="211412"><span class="nick" style="color:#2e2a4a"><a href="#211412" label="[21:14:12]">&lt;fossy&gt;</a></span><span class="message">yep</span></div><div class="line" id="211511"><span class="nick" style="color:#2e2a4a"><a href="#211511" label="[21:15:11]">&lt;fossy&gt;</a></span><span class="message">now on a slightly different topic, how is architecture support going in the early stages (stage0, m2-planet, cc_*, mes-m2)?</span></div><div class="line" id="211618"><span class="nick" style="color:#8dd3c7"><a href="#211618" label="[21:16:18]">&lt;oriansj&gt;</a></span><span class="message">right now all of the steps up to mes-m2 are done for x86, AMD64 and knight but armv7l still needs the early stages implemented (but mescc-tools, M2-Planet and mes-m2 work out of the box on armv7l right now)</span></div><div class="line" id="211651"><span class="nick" style="color:#2e2a4a"><a href="#211651" label="[21:16:51]">&lt;fossy&gt;</a></span><span class="message">okey</span></div><div class="line" id="211701"><span class="nick" style="color:#8dd3c7"><a href="#211701" label="[21:17:01]">&lt;oriansj&gt;</a></span><span class="message">dddddd: is currently doing a port of M2-Planet too AArch64, mescc-tools already has a working port to AArch64 and mes-m2 should work without issue when done</span></div><div class="line" id="211727"><span class="nick" style="color:#2e2a4a"><a href="#211727" label="[21:17:27]">&lt;fossy&gt;</a></span><span class="message">because mes-m2 is architecture independent right</span></div><div class="line" id="211745"><span class="nick" style="color:#8dd3c7"><a href="#211745" label="[21:17:45]">&lt;oriansj&gt;</a></span><span class="message">as is M2-Planet and mescc-tools; correct</span></div><div class="line" id="211752"><span class="nick" style="color:#2e2a4a"><a href="#211752" label="[21:17:52]">&lt;fossy&gt;</a></span><span class="message">right</span></div><div class="line" id="211849"><span class="nick" style="color:#2e2a4a"><a href="#211849" label="[21:18:49]">&lt;fossy&gt;</a></span><span class="message">since mescc-tools-seed is for everything up to GCC why is it called mescc-tools-seed</span></div><div class="line" id="211943"><span class="nick" style="color:#8dd3c7"><a href="#211943" label="[21:19:43]">&lt;oriansj&gt;</a></span><span class="message">because it is a single &quot;seed&quot; repo needed in bootstrapping; the mescc-tools bit is entirely because it was just for bootstrapping mescc-tools only (originally)</span></div><div class="line" id="212058"><span class="nick" style="color:#2e2a4a"><a href="#212058" label="[21:20:58]">&lt;fossy&gt;</a></span><span class="message">ah</span></div><div class="line" id="212405"><span class="nick" style="color:#8dd3c7"><a href="#212405" label="[21:24:05]">&lt;oriansj&gt;</a></span><span class="message">to the question of the cc_*; well that bit is 100% host specific and needs to be written from scratch on each new host architecture (fortunately it can be done in just a day of work)</span></div><div class="line" id="212617"><span class="nick" style="color:#8dd3c7"><a href="#212617" label="[21:26:17]">&lt;oriansj&gt;</a></span><span class="message">stage0 is the end game, bootstrap from hardware (no firmware, microcode or bios) and build a posix and everything else required.</span></div><div class="line" id="213152"><span class="nick" style="color:#2e2a4a"><a href="#213152" label="[21:31:52]">&lt;fossy&gt;</a></span><span class="message">for things past GCC like Java, is there any compelling reason to write bootstrap scripts in kaem rather than shell, which by that point you have?</span></div><div class="line" id="213226"><span class="nick" style="color:#8dd3c7"><a href="#213226" label="[21:32:26]">&lt;oriansj&gt;</a></span><span class="message">fossy: nope, as after that point bash and make and the rest are readily available</span></div><div class="line" id="213239"><span class="nick" style="color:#2e2a4a"><a href="#213239" label="[21:32:39]">&lt;fossy&gt;</a></span><span class="message">right ok</span></div><div class="line" id="213244"><span class="nick" style="color:#2e2a4a"><a href="#213244" label="[21:32:44]">&lt;fossy&gt;</a></span><span class="message">oh, I just realised</span></div><div class="line" id="213312"><span class="nick" style="color:#2e2a4a"><a href="#213312" label="[21:33:12]">&lt;fossy&gt;</a></span><span class="message">we don't have make and the like for GCC 4.7 and GCC 9</span></div><div class="line" id="213327"><span class="nick" style="color:#2e2a4a"><a href="#213327" label="[21:33:27]">&lt;fossy&gt;</a></span><span class="message">I wonder how guix does it</span></div><div class="line" id="213402"><span class="nick" style="color:#80b1d3"><a href="#213402" label="[21:34:02]">&lt;NieDzejkob&gt;</a></span><span class="message">wouldn't make compile fine with mescc?</span></div><div class="line" id="213419"><span class="nick" style="color:#80b1d3"><a href="#213419" label="[21:34:19]">&lt;NieDzejkob&gt;</a></span><span class="message">or I think there's tcc somewhere in the mix? Can't recall</span></div><div class="line" id="213425"><span class="nick" style="color:#2e2a4a"><a href="#213425" label="[21:34:25]">&lt;fossy&gt;</a></span><span class="message">yeah there is</span></div><div class="line" id="213435"><span class="nick" style="color:#2e2a4a"><a href="#213435" label="[21:34:35]">&lt;fossy&gt;</a></span><span class="message">tcc should be able to compile it</span></div><div class="line" id="213435"><span class="nick" style="color:#6d2462"><a href="#213435" label="[21:34:35]">&lt;janneke&gt;</a></span><span class="message">make is one of the first programs we build after tcc</span></div><div class="line" id="213456"><span class="nick" style="color:#2e2a4a"><a href="#213456" label="[21:34:56]">&lt;fossy&gt;</a></span><span class="message">janneke: but you build tcc without make because its simple enough for that?</span></div><div class="line" id="213503"><span class="nick" style="color:#8dd3c7"><a href="#213503" label="[21:35:03]">&lt;oriansj&gt;</a></span><span class="message">and make only needs a shell like bash (but gash can do that job)</span></div><div class="line" id="213518"><span class="nick" style="color:#6d2462"><a href="#213518" label="[21:35:18]">&lt;janneke&gt;</a></span><span class="message">in fact, make is one of the few tools we do not have a gash/guile implementation of</span></div><div class="line" id="213541"><span class="nick" style="color:#6d2462"><a href="#213541" label="[21:35:41]">&lt;janneke&gt;</a></span><span class="message">fossy: well...it depends on how you look at it</span></div><div class="line" id="213549"><span class="nick" style="color:#2e2a4a"><a href="#213549" label="[21:35:49]">&lt;fossy&gt;</a></span><span class="message">lol</span></div><div class="line" id="213607"><span class="nick" style="color:#6d2462"><a href="#213607" label="[21:36:07]">&lt;janneke&gt;</a></span><span class="message">we must build it without make, because we do not have make yet</span></div><div class="line" id="213612"><span class="nick" style="color:#2e2a4a"><a href="#213612" label="[21:36:12]">&lt;fossy&gt;</a></span><span class="message">yeah</span></div><div class="line" id="213630"><span class="nick" style="color:#8dd3c7"><a href="#213630" label="[21:36:30]">&lt;oriansj&gt;</a></span><span class="message">we do alot of ugly things but we can always clean them up later</span></div><div class="line" id="213700"><span class="nick" style="color:#6d2462"><a href="#213700" label="[21:37:00]">&lt;janneke&gt;</a></span><span class="message">yes, what oriansj says!</span></div><div class="line" id="213727"><span class="nick" style="color:#6d2462"><a href="#213727" label="[21:37:27]">&lt;janneke&gt;</a></span><span class="message">i really want to get rid of gcc-2.95.3 some time, but first things first</span></div><div class="line" id="213740"><span class="nick" style="color:#80b1d3"><a href="#213740" label="[21:37:40]">&lt;NieDzejkob&gt;</a></span><span class="message">O_o what is gcc-2.95.3 used for?</span></div><div class="line" id="213800"><span class="nick" style="color:#6d2462"><a href="#213800" label="[21:38:00]">&lt;janneke&gt;</a></span><span class="message">to build glibc-2.2.5</span></div><div class="line" id="213800"><span class="nick" style="color:#8dd3c7"><a href="#213800" label="[21:38:00]">&lt;oriansj&gt;</a></span><span class="message">NieDzejkob: it is the first GCC being built from TCC</span></div><div class="line" id="213803"><span class="nick" style="color:#2e2a4a"><a href="#213803" label="[21:38:03]">&lt;fossy&gt;</a></span><span class="message">oriansj: about mescc-tools-seed, once mes m2 is guile compatible whats the purpose of kaem past mes m2 if we can use gash</span></div><div class="line" id="213825"><span class="nick" style="color:#2e2a4a"><a href="#213825" label="[21:38:25]">&lt;fossy&gt;</a></span><span class="message">why don't you skip to GCC 4.7.4 janneke</span></div><div class="line" id="213849"><span class="nick" style="color:#6d2462"><a href="#213849" label="[21:38:49]">&lt;janneke&gt;</a></span><span class="message">fossy: i will, when someone makes that work</span></div><div class="line" id="213852"><span class="nick" style="color:#6d2462"><a href="#213852" label="[21:38:52]">&lt;janneke&gt;</a></span><span class="message">patches appreciated</span></div><div class="line" id="213853"><span class="nick" style="color:#2e2a4a"><a href="#213853" label="[21:38:53]">&lt;fossy&gt;</a></span><span class="message">ah</span></div><div class="line" id="213853"><span class="nick" style="color:#8dd3c7"><a href="#213853" label="[21:38:53]">&lt;oriansj&gt;</a></span><span class="message">fossy: all kaem scripts are bash (gash) scripts</span></div><div class="line" id="213859"><span class="nick" style="color:#2e2a4a"><a href="#213859" label="[21:38:59]">&lt;fossy&gt;</a></span><span class="message">dosent it work at the moment</span></div><div class="line" id="213902"><span class="nick" style="color:#2e2a4a"><a href="#213902" label="[21:39:02]">&lt;fossy&gt;</a></span><span class="message">oriansj: wait what</span></div><div class="line" id="213911"><span class="nick" style="color:#80b1d3"><a href="#213911" label="[21:39:11]">&lt;NieDzejkob&gt;</a></span><span class="message">Wait, is the Knight mes is done for the Knight with its photo on the wikipedia page for lisp machines? <a rel="nofollow" href="https://en.wikipedia.org/wiki/Lisp_machine">https://en.wikipedia.org/wiki/Lisp_machine</a> </span></div><div class="line" id="213921"><span class="nick" style="color:#8dd3c7"><a href="#213921" label="[21:39:21]">&lt;oriansj&gt;</a></span><span class="message">fossy: you can run kaem scripts with bash</span></div><div class="line" id="213925"><span class="nick" style="color:#80b1d3"><a href="#213925" label="[21:39:25]">&lt;NieDzejkob&gt;</a></span><span class="message">fossy: kaem is a subset of bash</span></div><div class="line" id="213928"><span class="nick" style="color:#2e2a4a"><a href="#213928" label="[21:39:28]">&lt;fossy&gt;</a></span><span class="message">oh right</span></div><div class="line" id="213934"><span class="nick" style="color:#6d2462"><a href="#213934" label="[21:39:34]">&lt;janneke&gt;</a></span><span class="message">fossy: the real reason is that bootstrapping gcc-2.95 is *much* easier than bootstrapping gcc-4.x</span></div><div class="line" id="213942"><span class="nick" style="color:#2e2a4a"><a href="#213942" label="[21:39:42]">&lt;fossy&gt;</a></span><span class="message">janneke: fair enougj</span></div><div class="line" id="213945"><span class="nick" style="color:#2e2a4a"><a href="#213945" label="[21:39:45]">&lt;fossy&gt;</a></span><span class="message">enough</span></div><div class="line" id="214001"><span class="nick" style="color:#6d2462"><a href="#214001" label="[21:40:01]">&lt;janneke&gt;</a></span><span class="message">think glibc, binutils, coreutils requirements, etc.</span></div><div class="line" id="214042"><span class="nick" style="color:#8dd3c7"><a href="#214042" label="[21:40:42]">&lt;oriansj&gt;</a></span><span class="message">NieDzejkob: Knight architecture predates Lisp machines by over 20 years</span></div><div class="line" id="214043"><span class="nick" style="color:#6d2462"><a href="#214043" label="[21:40:43]">&lt;janneke&gt;</a></span><span class="message">so, for the short term (ahum) we chose the simplest route</span></div><div class="line" id="214056"><span class="nick" style="color:#2e2a4a"><a href="#214056" label="[21:40:56]">&lt;fossy&gt;</a></span><span class="message">oriansj: so would it be fesible to leverage non kaem features post mes m2 since we have gash</span></div><div class="line" id="214107"><span class="nick" style="color:#6d2462"><a href="#214107" label="[21:41:07]">&lt;janneke&gt;</a></span><span class="message">now that works, we are filling in the gaps and work to create the most maintainable and auditable route</span></div><div class="line" id="214108"><span class="nick" style="color:#8dd3c7"><a href="#214108" label="[21:41:08]">&lt;oriansj&gt;</a></span><span class="message">fossy: exactly</span></div><div class="line" id="214115"><span class="nick" style="color:#2e2a4a"><a href="#214115" label="[21:41:15]">&lt;fossy&gt;</a></span><span class="message">rightt</span></div><div class="line" id="214224"><span class="nick" style="color:#80b1d3"><a href="#214224" label="[21:42:24]">&lt;NieDzejkob&gt;</a></span><span class="message">I'm kinda considering literate programming as a way to make auditability easy</span></div><div class="line" id="214230"><span class="nick" style="color:#2e2a4a"><a href="#214230" label="[21:42:30]">&lt;fossy&gt;</a></span><span class="message">then we can do things like have a centralized script post mes m2 rather then a per architecture script</span></div><div class="line" id="214258"><span class="nick" style="color:#8dd3c7"><a href="#214258" label="[21:42:58]">&lt;oriansj&gt;</a></span><span class="message">fossy: well we can run guix directly from source</span></div><div class="line" id="214310"><span class="nick" style="color:#8dd3c7"><a href="#214310" label="[21:43:10]">&lt;oriansj&gt;</a></span><span class="message">if we make mes-m2 a guile drop in compatible</span></div><div class="line" id="214321"><span class="nick" style="color:#2e2a4a"><a href="#214321" label="[21:43:21]">&lt;fossy&gt;</a></span><span class="message">oriansj: of course, im talking like outside guix</span></div><div class="line" id="214335"><span class="nick" style="color:#2e2a4a"><a href="#214335" label="[21:43:35]">&lt;fossy&gt;</a></span><span class="message">like with mescc tools seed and my current project to script all that up</span></div><div class="line" id="214356"><span class="nick" style="color:#8dd3c7"><a href="#214356" label="[21:43:56]">&lt;oriansj&gt;</a></span><span class="message">fossy: yep, it certainly would be possible</span></div><div class="line" id="214359"><span class="nick" style="color:#2e2a4a"><a href="#214359" label="[21:43:59]">&lt;fossy&gt;</a></span><span class="message">(script mes to GCC)</span></div><div class="line" id="215300"><span class="nick" style="color:#8dd3c7"><a href="#215300" label="[21:53:00]">&lt;oriansj&gt;</a></span><span class="message">plus we are aiming at expanding MesCC to be able to build GCC, binutils, coreutils, etc directly; but such an effort will be a major task and take a good bit of time. (at which point MesCC becomes a major competitor to Clang and GCC)</span></div><div class="line" id="215846"><span class="nick" style="color:#80b1d3"><a href="#215846" label="[21:58:46]">&lt;NieDzejkob&gt;</a></span><span class="message">wait, isn't most of a compiler just optimizations?</span></div><div class="line" id="215913"><span class="nick" style="color:#80b1d3"><a href="#215913" label="[21:59:13]">&lt;NieDzejkob&gt;</a></span><span class="message">or does GCC use some C extensions that are *that* hard to implement?</span></div><div class="line" id="215931"><span class="nick" style="color:#80b1d3"><a href="#215931" label="[21:59:31]">&lt;NieDzejkob&gt;</a></span><span class="message">I would've thought they'd stay with standard C for comparibility</span></div><div class="line" id="215939"><span class="nick" style="color:#80b1d3"><a href="#215939" label="[21:59:39]">&lt;NieDzejkob&gt;</a></span><span class="message">compatibility*</span></div><div class="line" id="220054"><span class="nick" style="color:#8dd3c7"><a href="#220054" label="[22:00:54]">&lt;oriansj&gt;</a></span><span class="message">NieDzejkob: all C compilers add extensions to the C language (they are obvious)</span></div><div class="line" id="220126"><span class="nick" style="color:#8dd3c7"><a href="#220126" label="[22:01:26]">&lt;oriansj&gt;</a></span><span class="message">but yes you are correct in most of the work in most compilers becomes incorporating optimizations and porting</span></div><div class="line" id="220304"><span class="nick" style="color:#80b1d3"><a href="#220304" label="[22:03:04]">&lt;NieDzejkob&gt;</a></span><span class="message">are optimizations actually necessary to build GCC (say, because the performance is abysmal otherwise)?</span></div><div class="line" id="220656"><span class="nick" style="color:#8dd3c7"><a href="#220656" label="[22:06:56]">&lt;oriansj&gt;</a></span><span class="message">NieDzejkob: well; some code only works when you do tail call elimination but I can't say for specific is GCC is one of those programs</span></div><div class="line" id="230743"><span class="nick" style="color:#8dd3c7"><a href="#230743" label="[23:07:43]">&lt;oriansj&gt;</a></span><span class="message">hmmm, I might need to add support for keywords into mes-m2 before I add proper modules</span></div><br /></div></body></html>