<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-02-14.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000800"><span class="nick" style="color:#8dd3c7"><a href="#000800" label="[00:08:00]">&lt;fossy&gt;</a></span><span class="message">markjenkinswznc: thanks, this is super helpful</span></div><div class="line" id="000839"><span class="nick" style="color:#8dd3c7"><a href="#000839" label="[00:08:39]">&lt;fossy&gt;</a></span><span class="message">markjenkinswznc: this is precisely the idea</span></div><div class="line" id="000852"><span class="nick" style="color:#8dd3c7"><a href="#000852" label="[00:08:52]">&lt;fossy&gt;</a></span><span class="message">a os portable bootstrap</span></div><div class="line" id="001308"><span class="nick" style="color:#2e2a4a"><a href="#001308" label="[00:13:08]">&lt;OriansJ&gt;</a></span><span class="message">and why I wrote kaem-minimal.hex0; to help fossy have a smaller bootstrap</span></div><div class="line" id="003716"><span class="nick" style="color:#6b8072"><a href="#003716" label="[00:37:16]">&lt;xentrac&gt;</a></span><span class="message">markjenkinswznc: why TTL?</span></div><div class="line" id="004932"><span class="nick" style="color:#2e2a4a"><a href="#004932" label="[00:49:32]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: it is the goal of Knight's hardware implementation to rule out any lithography based attacks (Such as the nexus intruder program class)</span></div><div class="line" id="005029"><span class="nick" style="color:#2e2a4a"><a href="#005029" label="[00:50:29]">&lt;OriansJ&gt;</a></span><span class="message">I believe the phrase is there is no kill like overkill</span></div><div class="line" id="005217"><span class="nick" style="color:#6b8072"><a href="#005217" label="[00:52:17]">&lt;xentrac&gt;</a></span><span class="message">sure, but why TTL rather than CMOS?</span></div><div class="line" id="005400"><span class="nick" style="color:#2e2a4a"><a href="#005400" label="[00:54:00]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: because CMOS processes do not have manual mask generation processes these days</span></div><div class="line" id="005542"><span class="nick" style="color:#6b8072"><a href="#005542" label="[00:55:42]">&lt;xentrac&gt;</a></span><span class="message">well, TTL processes don't have any mask generation processes at all these days</span></div><div class="line" id="010347"><span class="nick" style="color:#2e2a4a"><a href="#010347" label="[01:03:47]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: true to a degree; plus manufactor of TTL circuts in one's garage is much easier than a 2K transistor chip</span></div><div class="line" id="010431"><span class="nick" style="color:#6b8072"><a href="#010431" label="[01:04:31]">&lt;xentrac&gt;</a></span><span class="message">you can definitely make a 2K transistor TTL chip</span></div><div class="line" id="010448"><span class="nick" style="color:#6b8072"><a href="#010448" label="[01:04:48]">&lt;xentrac&gt;</a></span><span class="message">or a 1-transistor CMOS chip, such as a 2N7000</span></div><div class="line" id="010506"><span class="nick" style="color:#6b8072"><a href="#010506" label="[01:05:06]">&lt;xentrac&gt;</a></span><span class="message">I don't mean in your garage necessarily</span></div><div class="line" id="010635"><span class="nick" style="color:#2e2a4a"><a href="#010635" label="[01:06:35]">&lt;OriansJ&gt;</a></span><span class="message">Well the idea is anyone with access to 1950s level technology should be able to independently reproduce everything to make any attack vulnerable to detection</span></div><div class="line" id="010636"><span class="nick" style="color:#6b8072"><a href="#010636" label="[01:06:36]">&lt;xentrac&gt;</a></span><span class="message">TTL doesn't really have a hard limit on how many transistors you can put on a chip, and there have been ECL CPUs with many millions of transistors</span></div><div class="line" id="010650"><span class="nick" style="color:#6b8072"><a href="#010650" label="[01:06:50]">&lt;xentrac&gt;</a></span><span class="message">so you could probably do the same thing with TTL</span></div><div class="line" id="010701"><span class="nick" style="color:#6b8072"><a href="#010701" label="[01:07:01]">&lt;xentrac&gt;</a></span><span class="message">people don't because CMOS gets faster when it gets smaller and TTL doesn't</span></div><div class="line" id="010727"><span class="nick" style="color:#6b8072"><a href="#010727" label="[01:07:27]">&lt;xentrac&gt;</a></span><span class="message">I mean, it does, a little.  but not like CMOS</span></div><div class="line" id="010753"><span class="nick" style="color:#6b8072"><a href="#010753" label="[01:07:53]">&lt;xentrac&gt;</a></span><span class="message">(TTL has parasitic capacitances too, after all)</span></div><div class="line" id="010905"><span class="nick" style="color:#2e2a4a"><a href="#010905" label="[01:09:05]">&lt;OriansJ&gt;</a></span><span class="message">fair; and the point of TTL as a goal is less about process and more about level of public review. An gate level schematic that can be built out of individual gates or as a single CMOS chip to reproduce the results</span></div><div class="line" id="011627"><span class="nick" style="color:#2e2a4a"><a href="#011627" label="[01:16:27]">&lt;OriansJ&gt;</a></span><span class="message">Thus there becomes no attack any nation state can perform that could compromise the bootstrap binaries</span></div><div class="line" id="011706"><span class="nick" style="color:#2e2a4a"><a href="#011706" label="[01:17:06]">&lt;OriansJ&gt;</a></span><span class="message">as anyone in their garage would be able to make their own chips and detect such a scheme</span></div><div class="line" id="011712"><span class="nick" style="color:#6b8072"><a href="#011712" label="[01:17:12]">&lt;xentrac&gt;</a></span><span class="message">right</span></div><div class="line" id="011732"><span class="nick" style="color:#6b8072"><a href="#011732" label="[01:17:32]">&lt;xentrac&gt;</a></span><span class="message">if you wanted to maximize the ease of hand assembly, you could use RTL</span></div><div class="line" id="011755"><span class="nick" style="color:#6b8072"><a href="#011755" label="[01:17:55]">&lt;xentrac&gt;</a></span><span class="message">once you're working in ICs it has very little advantage though</span></div><div class="line" id="011824"><span class="nick" style="color:#2e2a4a"><a href="#011824" label="[01:18:24]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: I'll keep that in mind, when I go to doing the physical implemntation.</span></div><div class="line" id="011841"><span class="nick" style="color:#2e2a4a"><a href="#011841" label="[01:18:41]">&lt;OriansJ&gt;</a></span><span class="message">But first I need to finish the GCC bootstrap via mes-m2</span></div><div class="line" id="011849"><span class="nick" style="color:#6b8072"><a href="#011849" label="[01:18:49]">&lt;xentrac&gt;</a></span><span class="message">Hooray!</span></div><div class="line" id="012014"><span class="nick" style="color:#2e2a4a"><a href="#012014" label="[01:20:14]">&lt;OriansJ&gt;</a></span><span class="message">and I was thinking about how <a rel="nofollow" href="http://canonical.org/~kragen/sw/urscheme/">http://canonical.org/~kragen/sw/urscheme/</a>  and MesCC could mutually benefit from shared code and a trick from GCC to make porting them both much easier.</span></div><div class="line" id="012237"><span class="nick" style="color:#2e2a4a"><a href="#012237" label="[01:22:37]">&lt;OriansJ&gt;</a></span><span class="message">Should one switch them to generate an idealized intermediate architecture as a target, it enables shared optimizations to occur across all architectures and a single per architecture specializer (that can be shared betwen them) which becomes the only work needed by them to be ported to new host architectures.</span></div><div class="line" id="012544"><span class="nick" style="color:#2e2a4a"><a href="#012544" label="[01:25:44]">&lt;OriansJ&gt;</a></span><span class="message">but that is just a crazy idea of mine to break the scheme bootstrap problem in half and have guix bootstrapped from a single scheme compiler.</span></div><div class="line" id="012833"><span class="nick" style="color:#6b8072"><a href="#012833" label="[01:28:33]">&lt;xentrac&gt;</a></span><span class="message">interesting!</span></div><div class="line" id="012850"><span class="nick" style="color:#80b1d3"><a href="#012850" label="[01:28:50]">&lt;dddddd&gt;</a></span><span class="message">I was reading about GENERIC and GIMPLE just a few hours ago!</span></div><div class="line" id="012939"><span class="nick" style="color:#6b8072"><a href="#012939" label="[01:29:39]">&lt;xentrac&gt;</a></span><span class="message">Condolences!</span></div><div class="line" id="012953"><span class="nick" style="color:#80b1d3"><a href="#012953" label="[01:29:53]">&lt;dddddd&gt;</a></span><span class="message">Not into the details (:</span></div><div class="line" id="013042"><span class="nick" style="color:#80b1d3"><a href="#013042" label="[01:30:42]">&lt;dddddd&gt;</a></span><span class="message">Is IR an invention of gcc?!</span></div><div class="line" id="013238"><span class="nick" style="color:#2e2a4a"><a href="#013238" label="[01:32:38]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: hard to say but they are the first C compiler to aggressively exploit it</span></div><div class="line" id="013425"><span class="nick" style="color:#6b8072"><a href="#013425" label="[01:34:25]">&lt;xentrac&gt;</a></span><span class="message">no, no, lots of compilers used intermediate representations</span></div><div class="line" id="013520"><span class="nick" style="color:#6b8072"><a href="#013520" label="[01:35:20]">&lt;xentrac&gt;</a></span><span class="message">the Dragon Book has a chapter or two about them, and it was published in 1977</span></div><div class="line" id="013655"><span class="nick" style="color:#2e2a4a"><a href="#013655" label="[01:36:55]">&lt;OriansJ&gt;</a></span><span class="message">PCC came out in 1973</span></div><div class="line" id="013712"><span class="nick" style="color:#6b8072"><a href="#013712" label="[01:37:12]">&lt;xentrac&gt;</a></span><span class="message">?!</span></div><div class="line" id="013712"><span class="nick" style="color:#80b1d3"><a href="#013712" label="[01:37:12]">&lt;dddddd&gt;</a></span><span class="message">Yeah, kind of remember that, so &quot;gcc trick&quot; surprised me a bit.</span></div><div class="line" id="013738"><span class="nick" style="color:#6b8072"><a href="#013738" label="[01:37:38]">&lt;xentrac&gt;</a></span><span class="message">well, GIMPLE isn't really an idealized intermediate architecture...</span></div><div class="line" id="013828"><span class="nick" style="color:#6b8072"><a href="#013828" label="[01:38:28]">&lt;xentrac&gt;</a></span><span class="message">I mean there are lots of kinds of IR and most of them don't look very much like CPU instruction sets</span></div><div class="line" id="013851"><span class="nick" style="color:#6b8072"><a href="#013851" label="[01:38:51]">&lt;xentrac&gt;</a></span><span class="message">(although of course you could implement any of them in hardware!)</span></div><div class="line" id="014336"><span class="nick" style="color:#2e2a4a"><a href="#014336" label="[01:43:36]">&lt;OriansJ&gt;</a></span><span class="message">Hence why GCC was the first to aggressively exploit it (more optimizations than anyone!)</span></div><div class="line" id="014436"><span class="nick" style="color:#6b8072"><a href="#014436" label="[01:44:36]">&lt;xentrac&gt;</a></span><span class="message">yeah, I don't think so</span></div><div class="line" id="014625"><span class="nick" style="color:#2e2a4a"><a href="#014625" label="[01:46:25]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: ok, might I ask what compiler had more architecture independent optimizations prior to GCC?</span></div><div class="line" id="014824"><span class="nick" style="color:#6b8072"><a href="#014824" label="[01:48:24]">&lt;xentrac&gt;</a></span><span class="message">I guess it depends on which point in GCC's evolution you're looking at.  there might even have been times in GCC's evolution where the answer was &quot;nothing&quot;</span></div><div class="line" id="014911"><span class="nick" style="color:#6b8072"><a href="#014911" label="[01:49:11]">&lt;xentrac&gt;</a></span><span class="message">right now I think the answer is probably &quot;portland group C&quot;; 25 years ago probably &quot;CenterLine&quot;; when GCC was initially started probably pcc</span></div><div class="line" id="015026"><span class="nick" style="color:#6b8072"><a href="#015026" label="[01:50:26]">&lt;xentrac&gt;</a></span><span class="message">(and any other portable C compiler, maybe VUCK's C compiler, but there weren't that many around at the time)</span></div><div class="line" id="015132"><span class="nick" style="color:#2e2a4a"><a href="#015132" label="[01:51:32]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: you might be entirely correct as I honestly never heard of those compilers before</span></div><div class="line" id="015222"><span class="nick" style="color:#6b8072"><a href="#015222" label="[01:52:22]">&lt;xentrac&gt;</a></span><span class="message">you just mentioned pcc yourself, although I think you might have meant 1983 rather than 1973</span></div><div class="line" id="015239"><span class="nick" style="color:#80b1d3"><a href="#015239" label="[01:52:39]">&lt;dddddd&gt;</a></span><span class="message">Tangentially, looking for old GCC I found <a rel="nofollow" href="https://virtuallyfun.com/wordpress/2016/12/01/building-using-gcc-0-90-aka-first-public-version/">https://virtuallyfun.com/wordpress/2016/12/01/building-using-gcc-0-90-aka-first-public-version/</a>   (I guess it's well know; bison and all that; for Vax and 68000/68020).</span></div><div class="line" id="015244"><span class="nick" style="color:#2e2a4a"><a href="#015244" label="[01:52:44]">&lt;OriansJ&gt;</a></span><span class="message"> <a rel="nofollow" href="https://en.wikipedia.org/wiki/Portable_C_Compiler">https://en.wikipedia.org/wiki/Portable_C_Compiler</a> </span></div><div class="line" id="015251"><span class="nick" style="color:#6b8072"><a href="#015251" label="[01:52:51]">&lt;xentrac&gt;</a></span><span class="message">ah, 1977</span></div><div class="line" id="015305"><span class="nick" style="color:#6b8072"><a href="#015305" label="[01:53:05]">&lt;xentrac&gt;</a></span><span class="message">dddddd: nice!</span></div><div class="line" id="015340"><span class="nick" style="color:#80b1d3"><a href="#015340" label="[01:53:40]">&lt;dddddd&gt;</a></span><span class="message">That started the rabbit hole path to GENERIC and so...</span></div><div class="line" id="015655"><span class="nick" style="color:#6b8072"><a href="#015655" label="[01:56:55]">&lt;xentrac&gt;</a></span><span class="message">heh, there's a postscript to the announcement by Tower</span></div><div class="line" id="020406"><span class="nick" style="color:#2e2a4a"><a href="#020406" label="[02:04:06]">&lt;OriansJ&gt;</a></span><span class="message">stupid idea, could linux v1.0 be converted to M2-Planet C in a reasonable amount of effort?</span></div><div class="line" id="021038"><span class="nick" style="color:#6b8072"><a href="#021038" label="[02:10:38]">&lt;xentrac&gt;</a></span><span class="message">yeah, I have no idea</span></div><div class="line" id="021908"><span class="nick" style="color:#6d2462"><a href="#021908" label="[02:19:08]">&lt;stikonas&gt;</a></span><span class="message">can linux v1.0 run on anything modern?</span></div><div class="line" id="032623"><span class="nick" style="color:#234e69"><a href="#032623" label="[03:26:23]">&lt;Hagfish&gt;</a></span><span class="message">&quot;In the future, it may be necessary to increase the level of confidence in this validation, which could prompt the need for a &quot;simpler&quot; and more verifiable reimplementation of rustc&quot;</span></div><div class="line" id="032628"><span class="nick" style="color:#234e69"><a href="#032628" label="[03:26:28]">&lt;Hagfish&gt;</a></span><span class="message"> <a rel="nofollow" href="https://ferrous-systems.com/blog/sealed-rust-the-plan/">https://ferrous-systems.com/blog/sealed-rust-the-plan/</a> </span></div><div class="line" id="034511"><span class="nick" style="color:#6c3d55"><a href="#034511" label="[03:45:11]">&lt;markjenkinswznc&gt;</a></span><span class="message">OriansJ, Ur-scheme is a nice find. If it has a great test suite like it says, that's super, even without, interpreting it with mes-m2 and seeing if it can reproducibly recompile itself is a good sanity test, a good test to pass before interpreting mescc to compile mes/mes-m2 into a reproducible stable-mutual self-hosting loop</span></div><div class="line" id="132922"><span class="nick" style="color:#d9d9d9"><a href="#132922" label="[13:29:22]">&lt;janneke&gt;</a></span><span class="message">OriansJ: yes that's interesting, in a way i can't wait till the time we can worry about those things and play with them</span></div><div class="line" id="192727"><span class="nick" style="color:#bc80bd"><a href="#192727" label="[19:27:27]">*</a></span><span class="message">janneke just booted first home-built linux on the pinebook-pro</span></div><div class="line" id="193524"><span class="nick" style="color:#3c5b35"><a href="#193524" label="[19:35:24]">&lt;jelle&gt;</a></span><span class="message">:-)</span></div><div class="line" id="205840"><span class="nick" style="color:#af8d2f"><a href="#205840" label="[20:58:40]">&lt;pder&gt;</a></span><span class="message">I am trying to troubleshoot an apparent bug in mes-m2, but I am new to scheme.</span></div><div class="line" id="205908"><span class="nick" style="color:#af8d2f"><a href="#205908" label="[20:59:08]">&lt;pder&gt;</a></span><span class="message">(member (list 'a) '(b (a) c)) evaluates to #f but it should be ((a) c)</span></div><div class="line" id="210102"><span class="nick" style="color:#af8d2f"><a href="#210102" label="[21:01:02]">&lt;pder&gt;</a></span><span class="message">Oddly in mes-m2 (equal? (list 'a) (car (cdr '(b (a) c)))) evaluates to #t</span></div><div class="line" id="214743"><span class="nick" style="color:#8dd3c7"><a href="#214743" label="[21:47:43]">&lt;fossy&gt;</a></span><span class="message">OriansJ: I would really appreciate it if you could look at BeeOS</span></div><div class="line" id="214824"><span class="nick" style="color:#8dd3c7"><a href="#214824" label="[21:48:24]">&lt;fossy&gt;</a></span><span class="message">It seems to be a reasonable target that with minimsation and conversiton to m2 planet could likely be a target for our kernel work</span></div><div class="line" id="215114"><span class="nick" style="color:#8dd3c7"><a href="#215114" label="[21:51:14]">&lt;fossy&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/search?p=2&amp;q=POSIX+kernel&amp;type=Repositories&amp;utf8=%E2%9C%93">https://github.com/search?p=2&amp;q=POSIX+kernel&amp;type=Repositories&amp;utf8=%E2%9C%93</a> </span></div><div class="line" id="215120"><span class="nick" style="color:#8dd3c7"><a href="#215120" label="[21:51:20]">&lt;fossy&gt;</a></span><span class="message">Some more interesting ones</span></div><div class="line" id="215226"><span class="nick" style="color:#8dd3c7"><a href="#215226" label="[21:52:26]">&lt;fossy&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/mikaku/Fiwix/blob/master/README.md">https://github.com/mikaku/Fiwix/blob/master/README.md</a> </span></div><div class="line" id="215233"><span class="nick" style="color:#8dd3c7"><a href="#215233" label="[21:52:33]">&lt;fossy&gt;</a></span><span class="message">heres the other one that looked super good</span></div><div class="line" id="220831"><span class="nick" style="color:#8dd3c7"><a href="#220831" label="[22:08:31]">&lt;fossy&gt;</a></span><span class="message">probably too many LOC tho</span></div><div class="line" id="221921"><span class="nick" style="color:#2e2a4a"><a href="#221921" label="[22:19:21]">&lt;OriansJ&gt;</a></span><span class="message">pder: looks like an interesting bug for me to fix</span></div><div class="line" id="222011"><span class="nick" style="color:#2e2a4a"><a href="#222011" label="[22:20:11]">&lt;OriansJ&gt;</a></span><span class="message">pder: nope, looks like I just screwed up the member definition</span></div><div class="line" id="222047"><span class="nick" style="color:#2e2a4a"><a href="#222047" label="[22:20:47]">&lt;OriansJ&gt;</a></span><span class="message">it is supposed to (member i (cdr l)) and I wrote (memq i (cdr l))</span></div><div class="line" id="222053"><span class="nick" style="color:#2e2a4a"><a href="#222053" label="[22:20:53]">&lt;OriansJ&gt;</a></span><span class="message">easy to fix</span></div><div class="line" id="222656"><span class="nick" style="color:#af8d2f"><a href="#222656" label="[22:26:56]">&lt;pder&gt;</a></span><span class="message">Ah ok, I was looking in the wrong place.  Looks like memv has a similar bug calling memq</span></div><div class="line" id="222730"><span class="nick" style="color:#2e2a4a"><a href="#222730" label="[22:27:30]">&lt;OriansJ&gt;</a></span><span class="message">yep, fixing both of those now</span></div><div class="line" id="222816"><span class="nick" style="color:#af8d2f"><a href="#222816" label="[22:28:16]">&lt;pder&gt;</a></span><span class="message">I was looking at mes/module/mes/scm.mes but that does not seem to be used yet</span></div><div class="line" id="222849"><span class="nick" style="color:#2e2a4a"><a href="#222849" label="[22:28:49]">&lt;OriansJ&gt;</a></span><span class="message">nope as I haven't yet figured out modules</span></div><div class="line" id="222953"><span class="nick" style="color:#2e2a4a"><a href="#222953" label="[22:29:53]">&lt;OriansJ&gt;</a></span><span class="message">and patch is up (with a prototype for case statement support in mes-m2)</span></div><div class="line" id="223253"><span class="nick" style="color:#2e2a4a"><a href="#223253" label="[22:32:53]">&lt;OriansJ&gt;</a></span><span class="message">fossy: this looks promising: <a rel="nofollow" href="https://github.com/lutoma/xelix">https://github.com/lutoma/xelix</a>  although someone would need to reach out and see if they are interested in cooperation</span></div><div class="line" id="223750"><span class="nick" style="color:#af8d2f"><a href="#223750" label="[22:37:50]">&lt;pder&gt;</a></span><span class="message">Great, thanks!</span></div><div class="line" id="223753"><span class="nick" style="color:#2e2a4a"><a href="#223753" label="[22:37:53]">&lt;OriansJ&gt;</a></span><span class="message">fossy: there are alot of POSIX kernels out there; the really important question is which of them are willing to collaborate with us.</span></div><div class="line" id="223928"><span class="nick" style="color:#2e2a4a"><a href="#223928" label="[22:39:28]">&lt;OriansJ&gt;</a></span><span class="message">fossy: as basically any POSIX which has a free (as in freedom) License and an interested developer(s) [multiple are of course preferred] will work.</span></div><div class="line" id="224055"><span class="nick" style="color:#2e2a4a"><a href="#224055" label="[22:40:55]">&lt;OriansJ&gt;</a></span><span class="message">The problem is finding them, getting them to engage and hammer out any bugs in getting mescc-tools-seed+above running on them. (as after we get GCC running, we can just compile linux and be done)</span></div><div class="line" id="224702"><span class="nick" style="color:#2e2a4a"><a href="#224702" label="[22:47:02]">&lt;OriansJ&gt;</a></span><span class="message">if the title wouldn't get me hellbanned; I would be so tempted to post &quot;stage0 project seeks kernel developer(s) for hot bootstrapping action&quot; just to try to get someone to help with that work</span></div><div class="line" id="232059"><span class="nick" style="color:#389600"><a href="#232059" label="[23:20:59]">&lt;dzho&gt;</a></span><span class="message">heh</span></div><br /></div></body></html>