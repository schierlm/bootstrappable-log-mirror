<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-10-27.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000010"><span class="nick" style="color:#389600"><a href="#000010" label="[00:00:10]">&lt;oriansj&gt;</a></span><span class="message">stikonas: that is mkdirat; not mkdir</span></div><div class="line" id="000020"><span class="nick" style="color:#389600"><a href="#000020" label="[00:00:20]">&lt;oriansj&gt;</a></span><span class="message">(it is also on my list)</span></div><div class="line" id="000322"><span class="nick" style="color:#389600"><a href="#000322" label="[00:03:22]">&lt;oriansj&gt;</a></span><span class="message">but it does look like we are setting the wrong registers</span></div><div class="line" id="000407"><span class="nick" style="color:#389600"><a href="#000407" label="[00:04:07]">&lt;oriansj&gt;</a></span><span class="message">as we only need to set X1 and X0 (with the syscall in X8)</span></div><div class="line" id="000424"><span class="nick" style="color:#389600"><a href="#000424" label="[00:04:24]">&lt;oriansj&gt;</a></span><span class="message">pretty easy to use GDB to confirm that</span></div><div class="line" id="000450"><span class="nick" style="color:#389600"><a href="#000450" label="[00:04:50]">&lt;oriansj&gt;</a></span><span class="message">USA-RedDragon: if you would like I can talk you through the process</span></div><div class="line" id="000543"><span class="nick" style="color:#2e2a4a"><a href="#000543" label="[00:05:43]">&lt;USA-RedDragon&gt;</a></span><span class="message">I made a draft PR with what I've got so far: <a rel="nofollow" href="https://github.com/oriansj/M2libc/pull/17">https://github.com/oriansj/M2libc/pull/17</a> </span></div><div class="line" id="000551"><span class="nick" style="color:#389600"><a href="#000551" label="[00:05:51]">&lt;oriansj&gt;</a></span><span class="message">as all C functions output by M2-Planet have FUNCTION_ prefixes and if you used blood-elf, you can just set a breakpoint at FUNCTION_mkdir</span></div><div class="line" id="000654"><span class="nick" style="color:#6b8072"><a href="#000654" label="[00:06:54]">&lt;stikonas&gt;</a></span><span class="message">oriansj: as far as I can see, aarch64 does not have mkdir, only mkdirat</span></div><div class="line" id="001111"><span class="nick" style="color:#6b8072"><a href="#001111" label="[00:11:11]">&lt;stikonas&gt;</a></span><span class="message">and  stage0-uefi changes pushed (now reaches M1-0)</span></div><div class="line" id="001120"><span class="nick" style="color:#6b8072"><a href="#001120" label="[00:11:20]">&lt;stikonas&gt;</a></span><span class="message">I've skipped blood-elf as it's not immediately useful</span></div><div class="line" id="001146"><span class="nick" style="color:#6b8072"><a href="#001146" label="[00:11:46]">&lt;stikonas&gt;</a></span><span class="message">we can maybe build blood-elf once we have full non-bootstrap M2libc</span></div><div class="line" id="001155"><span class="nick" style="color:#6b8072"><a href="#001155" label="[00:11:55]">&lt;stikonas&gt;</a></span><span class="message">in case somebody wants to build debug POSIX binaries on UEFI</span></div><div class="line" id="002518"><span class="nick" style="color:#389600"><a href="#002518" label="[00:25:18]">&lt;oriansj&gt;</a></span><span class="message">USA-RedDragon: your SET_X2_FROM_X1 define decodes to: orr x2, xzr, x1, lsl 8 and no arguments are passed to functions via registers (they are passed on the stack)</span></div><div class="line" id="002830"><span class="nick" style="color:#389600"><a href="#002830" label="[00:28:30]">&lt;oriansj&gt;</a></span><span class="message">so you probably want to use e20301aa</span></div><div class="line" id="003106"><span class="nick" style="color:#389600"><a href="#003106" label="[00:31:06]">&lt;oriansj&gt;</a></span><span class="message">(you can verify it with: rasm2 -a arm -b 64  -d 'e20300aa' if you would like)</span></div><div class="line" id="003225"><span class="nick" style="color:#389600"><a href="#003225" label="[00:32:25]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well we could figure out the debug format for PE binaries and then our UEFI binaries can be debuggable as well</span></div><div class="line" id="003319"><span class="nick" style="color:#2e2a4a"><a href="#003319" label="[00:33:19]">&lt;USA-RedDragon&gt;</a></span><span class="message">Weird. <a rel="nofollow" href="https://onlinedisassembler.com/odaweb/">https://onlinedisassembler.com/odaweb/</a>  decoded both e22301aa and e20301aa to `mov x2, x1`</span></div><div class="line" id="003331"><span class="nick" style="color:#2e2a4a"><a href="#003331" label="[00:33:31]">&lt;USA-RedDragon&gt;</a></span><span class="message">But that's alright, that part is going to get reverted anyway</span></div><div class="line" id="003336"><span class="nick" style="color:#2e2a4a"><a href="#003336" label="[00:33:36]">&lt;USA-RedDragon&gt;</a></span><span class="message">Got mkdir working</span></div><div class="line" id="003343"><span class="nick" style="color:#2e2a4a"><a href="#003343" label="[00:33:43]">&lt;USA-RedDragon&gt;</a></span><span class="message">without that</span></div><div class="line" id="003403"><span class="nick" style="color:#2e2a4a"><a href="#003403" label="[00:34:03]">&lt;USA-RedDragon&gt;</a></span><span class="message">Thanks for the `rasm2` top</span></div><div class="line" id="003409"><span class="nick" style="color:#2e2a4a"><a href="#003409" label="[00:34:09]">&lt;USA-RedDragon&gt;</a></span><span class="message">tip*</span></div><div class="line" id="003429"><span class="nick" style="color:#389600"><a href="#003429" label="[00:34:29]">&lt;oriansj&gt;</a></span><span class="message">just install radare2 and you can also do things like: rasm2 -a arm -b 64  'mov x2, x1'</span></div><div class="line" id="003512"><span class="nick" style="color:#389600"><a href="#003512" label="[00:35:12]">&lt;oriansj&gt;</a></span><span class="message">that way you don't depend upon a web service to lookup instruction encodings/decodings</span></div><div class="line" id="003523"><span class="nick" style="color:#2e2a4a"><a href="#003523" label="[00:35:23]">&lt;USA-RedDragon&gt;</a></span><span class="message">love it</span></div><div class="line" id="004353"><span class="nick" style="color:#389600"><a href="#004353" label="[00:43:53]">&lt;oriansj&gt;</a></span><span class="message">stikonas: Well I did pull these syscall numbers from the Linux kernel itself about 3 years ago but I can't image they removed public syscalls unless no one was using them or they were non-functional</span></div><div class="line" id="010500"><span class="nick" style="color:#389600"><a href="#010500" label="[01:05:00]">&lt;oriansj&gt;</a></span><span class="message">USA-RedDragon: If the pathname given in pathname is relative, then it is interpreted relative to the directory referred to by the file descriptor dirfd (rather than relative to the current working directory of the calling process) mov x0, #-0x64 translates to: mov X0, AT_FDCWD</span></div><div class="line" id="010542"><span class="nick" style="color:#389600"><a href="#010542" label="[01:05:42]">&lt;oriansj&gt;</a></span><span class="message">which just ultimately just causes mkdirat to behave exactly like mkdir</span></div><div class="line" id="010655"><span class="nick" style="color:#6b8072"><a href="#010655" label="[01:06:55]">&lt;stikonas&gt;</a></span><span class="message">oriansj: not sure if it's that easy, I briefly looked, addind debug sections might make UEFI not run them</span></div><div class="line" id="010702"><span class="nick" style="color:#6b8072"><a href="#010702" label="[01:07:02]">&lt;stikonas&gt;</a></span><span class="message">so you might need to build two binaries</span></div><div class="line" id="010709"><span class="nick" style="color:#6b8072"><a href="#010709" label="[01:07:09]">&lt;stikonas&gt;</a></span><span class="message">and we don't have internal gdb either</span></div><div class="line" id="010723"><span class="nick" style="color:#6b8072"><a href="#010723" label="[01:07:23]">&lt;stikonas&gt;</a></span><span class="message">so one would still have to connect with external gdb</span></div><div class="line" id="010802"><span class="nick" style="color:#6b8072"><a href="#010802" label="[01:08:02]">&lt;stikonas&gt;</a></span><span class="message">but I found that radare2 (at least on amd64) often gives wrong answers...</span></div><div class="line" id="010818"><span class="nick" style="color:#6b8072"><a href="#010818" label="[01:08:18]">&lt;stikonas&gt;</a></span><span class="message">so it might be good to use it but double check with web server</span></div><div class="line" id="010839"><span class="nick" style="color:#6b8072"><a href="#010839" label="[01:08:39]">&lt;stikonas&gt;</a></span><span class="message">actually, the way risc-v was implemented, I didn't have to use anything at all</span></div><div class="line" id="010846"><span class="nick" style="color:#6b8072"><a href="#010846" label="[01:08:46]">&lt;stikonas&gt;</a></span><span class="message">neither web service nor radare</span></div><div class="line" id="010907"><span class="nick" style="color:#6b8072"><a href="#010907" label="[01:09:07]">&lt;stikonas&gt;</a></span><span class="message">so that's nice, though at the expense of more complicated hex2 (but that was unavoidable on riscv)</span></div><div class="line" id="010914"><span class="nick" style="color:#389600"><a href="#010914" label="[01:09:14]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well gdb can also be used to disassemble a binary while you run it</span></div><div class="line" id="010936"><span class="nick" style="color:#6b8072"><a href="#010936" label="[01:09:36]">&lt;stikonas&gt;</a></span><span class="message">anyway, debug binaries can be left for future improvement if somebody bothers</span></div><div class="line" id="010957"><span class="nick" style="color:#389600"><a href="#010957" label="[01:09:57]">&lt;oriansj&gt;</a></span><span class="message">stikonas: completely fair as it looks messy</span></div><div class="line" id="011643"><span class="nick" style="color:#2e2a4a"><a href="#011643" label="[01:16:43]">&lt;USA-RedDragon&gt;</a></span><span class="message">I got to stage 4 with the changes in my PR</span></div><div class="line" id="011840"><span class="nick" style="color:#6b8072"><a href="#011840" label="[01:18:40]">&lt;stikonas&gt;</a></span><span class="message">USA-RedDragon: of live-bootstrap?</span></div><div class="line" id="011847"><span class="nick" style="color:#2e2a4a"><a href="#011847" label="[01:18:47]">&lt;USA-RedDragon&gt;</a></span><span class="message">Yeah, sorry</span></div><div class="line" id="012444"><span class="nick" style="color:#6b8072"><a href="#012444" label="[01:24:44]">&lt;stikonas&gt;</a></span><span class="message">well, those are easy steps</span></div><div class="line" id="012516"><span class="nick" style="color:#6b8072"><a href="#012516" label="[01:25:16]">&lt;stikonas&gt;</a></span><span class="message">mes -&gt; tcc 0.9.26 is the hard one...</span></div><div class="line" id="012523"><span class="nick" style="color:#6b8072"><a href="#012523" label="[01:25:23]">&lt;stikonas&gt;</a></span><span class="message">which only works for x86, not even amd64</span></div><div class="line" id="012608"><span class="nick" style="color:#2e2a4a"><a href="#012608" label="[01:26:08]">&lt;USA-RedDragon&gt;</a></span><span class="message">Ah I see why mes failed. Comment in the kaem file says &quot;# Restore once mes adds arch specific kaem files&quot;. I know my next task</span></div><div class="line" id="012629"><span class="nick" style="color:#2e2a4a"><a href="#012629" label="[01:26:29]">&lt;USA-RedDragon&gt;</a></span><span class="message">Well here's hoping I can figure something out. :)</span></div><div class="line" id="012920"><span class="nick" style="color:#6b8072"><a href="#012920" label="[01:29:20]">&lt;stikonas&gt;</a></span><span class="message">USA-RedDragon: that might have been done already</span></div><div class="line" id="012923"><span class="nick" style="color:#6b8072"><a href="#012923" label="[01:29:23]">&lt;stikonas&gt;</a></span><span class="message">in the latest mes release</span></div><div class="line" id="012943"><span class="nick" style="color:#6b8072"><a href="#012943" label="[01:29:43]">&lt;stikonas&gt;</a></span><span class="message">there was one recently and I've already pushed it into live-bootstrap</span></div><div class="line" id="013352"><span class="nick" style="color:#2e2a4a"><a href="#013352" label="[01:33:52]">&lt;USA-RedDragon&gt;</a></span><span class="message">Yeah I see some recent arm stuff</span></div><div class="line" id="013533"><span class="nick" style="color:#2e2a4a"><a href="#013533" label="[01:35:33]">&lt;USA-RedDragon&gt;</a></span><span class="message">Will kaem pass in variables? Like, for <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/mes.git/tree/kaem.run#n22">https://git.savannah.gnu.org/cgit/mes.git/tree/kaem.run#n22</a>,  can I run `mes_cpu=arm64 kaem --verbose --strict --file kaem.run`</span></div><div class="line" id="014045"><span class="nick" style="color:#6b8072"><a href="#014045" label="[01:40:45]">&lt;stikonas&gt;</a></span><span class="message">USA-RedDragon: I think so</span></div><div class="line" id="014152"><span class="nick" style="color:#6b8072"><a href="#014152" label="[01:41:52]">&lt;stikonas&gt;</a></span><span class="message">kaem automatically exports all it's variables to child processes</span></div><div class="line" id="015043"><span class="nick" style="color:#6b8072"><a href="#015043" label="[01:50:43]">&lt;stikonas&gt;</a></span><span class="message">USA-RedDragon: basically kaem stores all it's env variables in a linked list here <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/Kaem/kaem_globals.h#L32">https://github.com/oriansj/mescc-tools/blob/master/Kaem/kaem_globals.h#L32</a> </span></div><div class="line" id="015045"><span class="nick" style="color:#389600"><a href="#015045" label="[01:50:45]">&lt;oriansj&gt;</a></span><span class="message">USA-RedDragon: yes, kaem will use any environment you give it</span></div><div class="line" id="015246"><span class="nick" style="color:#6b8072"><a href="#015246" label="[01:52:46]">&lt;stikonas&gt;</a></span><span class="message">and then passes it to execve call <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/Kaem/kaem.c#L1095">https://github.com/oriansj/mescc-tools/blob/master/Kaem/kaem.c#L1095</a> </span></div><div class="line" id="015256"><span class="nick" style="color:#6b8072"><a href="#015256" label="[01:52:56]">&lt;stikonas&gt;</a></span><span class="message">hmm, for UEFI we'll have to do som ifdefs here...</span></div><div class="line" id="015337"><span class="nick" style="color:#6b8072"><a href="#015337" label="[01:53:37]">&lt;stikonas&gt;</a></span><span class="message">to implement passing of environmental variables and also don't do forking</span></div><div class="line" id="015512"><span class="nick" style="color:#389600"><a href="#015512" label="[01:55:12]">&lt;oriansj&gt;</a></span><span class="message">well the lack of forking presents a serious problem for a shell.</span></div><div class="line" id="015542"><span class="nick" style="color:#6b8072"><a href="#015542" label="[01:55:42]">&lt;stikonas&gt;</a></span><span class="message">well, should still be possible to implement</span></div><div class="line" id="015613"><span class="nick" style="color:#6b8072"><a href="#015613" label="[01:56:13]">&lt;stikonas&gt;</a></span><span class="message">we can spawn other processes, so just need to correctly pass command line options and env variables</span></div><div class="line" id="015619"><span class="nick" style="color:#6b8072"><a href="#015619" label="[01:56:19]">&lt;stikonas&gt;</a></span><span class="message">which are all stored in a single string</span></div><div class="line" id="015706"><span class="nick" style="color:#6b8072"><a href="#015706" label="[01:57:06]">&lt;stikonas&gt;</a></span><span class="message">but I think ifdefs will be unavoidable</span></div><div class="line" id="015712"><span class="nick" style="color:#6b8072"><a href="#015712" label="[01:57:12]">&lt;stikonas&gt;</a></span><span class="message">we can't make it full POSIX compatible</span></div><div class="line" id="015839"><span class="nick" style="color:#6b8072"><a href="#015839" label="[01:58:39]">&lt;stikonas&gt;</a></span><span class="message">hmm, speaking of shell</span></div><div class="line" id="015859"><span class="nick" style="color:#6b8072"><a href="#015859" label="[01:58:59]">&lt;stikonas&gt;</a></span><span class="message">I wonder how hard would it be to add an optional interactive mode to kaem</span></div><div class="line" id="015906"><span class="nick" style="color:#6b8072"><a href="#015906" label="[01:59:06]">&lt;stikonas&gt;</a></span><span class="message">(possibly without any editing capabilities)</span></div><div class="line" id="015936"><span class="nick" style="color:#389600"><a href="#015936" label="[01:59:36]">&lt;oriansj&gt;</a></span><span class="message">stikonas: not hard at all actually</span></div><div class="line" id="015938"><span class="nick" style="color:#6b8072"><a href="#015938" label="[01:59:38]">&lt;stikonas&gt;</a></span><span class="message">probably not too hard though for now not high priority</span></div><div class="line" id="020123"><span class="nick" style="color:#389600"><a href="#020123" label="[02:01:23]">&lt;oriansj&gt;</a></span><span class="message">just need to add a couple little things to M2libc: <a rel="nofollow" href="https://paste.debian.net/1258374/">https://paste.debian.net/1258374/</a> </span></div><div class="line" id="020142"><span class="nick" style="color:#389600"><a href="#020142" label="[02:01:42]">&lt;oriansj&gt;</a></span><span class="message">(specifically termios.h)</span></div><div class="line" id="020501"><span class="nick" style="color:#389600"><a href="#020501" label="[02:05:01]">&lt;oriansj&gt;</a></span><span class="message">the following: struct termios' definition, the function isatty, the function tcgetattr, the function tcsetattr and the #defines for BRKINT | ICRNL | INPCK | ISTRIP | IXON | OPOST | CS8 | ECHO | ICANON | IEXTEN | ISIG | TCSAFLUSH | VMIN | VTIME</span></div><div class="line" id="020608"><span class="nick" style="color:#80b1d3"><a href="#020608" label="[02:06:08]">&lt;muurkha&gt;</a></span><span class="message">ugh</span></div><div class="line" id="020704"><span class="nick" style="color:#80b1d3"><a href="#020704" label="[02:07:04]">&lt;muurkha&gt;</a></span><span class="message">oriansj: PDP-7 Unix implemented exit() by execing the shell</span></div><div class="line" id="020732"><span class="nick" style="color:#80b1d3"><a href="#020732" label="[02:07:32]">&lt;muurkha&gt;</a></span><span class="message">so it could run an interactive shell without forking</span></div><div class="line" id="020811"><span class="nick" style="color:#80b1d3"><a href="#020811" label="[02:08:11]">&lt;muurkha&gt;</a></span><span class="message">because the PDP-7 didn't have virtual memory, not even a base register, forking was quite a heavyweight operation that involved dumping the computer's memory out to a disk.  likewise context switches</span></div><div class="line" id="020821"><span class="nick" style="color:#6b8072"><a href="#020821" label="[02:08:21]">&lt;stikonas&gt;</a></span><span class="message">this is different kind of forking</span></div><div class="line" id="020839"><span class="nick" style="color:#6b8072"><a href="#020839" label="[02:08:39]">&lt;stikonas&gt;</a></span><span class="message">when I said we have no forking, I meant no fork() type of call that makes a clone of process</span></div><div class="line" id="020843"><span class="nick" style="color:#6b8072"><a href="#020843" label="[02:08:43]">&lt;stikonas&gt;</a></span><span class="message">instead it spawns</span></div><div class="line" id="020913"><span class="nick" style="color:#80b1d3"><a href="#020913" label="[02:09:13]">&lt;muurkha&gt;</a></span><span class="message">right, because it's from the VMS→WindowsNT→UEFI lineage</span></div><div class="line" id="020921"><span class="nick" style="color:#80b1d3"><a href="#020921" label="[02:09:21]">&lt;muurkha&gt;</a></span><span class="message">EFI</span></div><div class="line" id="020954"><span class="nick" style="color:#80b1d3"><a href="#020954" label="[02:09:54]">&lt;muurkha&gt;</a></span><span class="message">which doesn't have execve() or anything similar either, does it?</span></div><div class="line" id="021141"><span class="nick" style="color:#6b8072"><a href="#021141" label="[02:11:41]">&lt;stikonas&gt;</a></span><span class="message">no, there is only LoadImage function and then StartImage</span></div><div class="line" id="021201"><span class="nick" style="color:#6b8072"><a href="#021201" label="[02:12:01]">&lt;stikonas&gt;</a></span><span class="message">there is a call for exiting too but it's optional</span></div><div class="line" id="021225"><span class="nick" style="color:#6b8072"><a href="#021225" label="[02:12:25]">&lt;stikonas&gt;</a></span><span class="message">you can just do return and it goes back to the caller</span></div><div class="line" id="021239"><span class="nick" style="color:#6b8072"><a href="#021239" label="[02:12:39]">&lt;stikonas&gt;</a></span><span class="message">callers address is saved on stack</span></div><div class="line" id="021305"><span class="nick" style="color:#80b1d3"><a href="#021305" label="[02:13:05]">&lt;muurkha&gt;</a></span><span class="message">StartImage is sort of like execve() I guess</span></div><div class="line" id="021818"><span class="nick" style="color:#389600"><a href="#021818" label="[02:18:18]">&lt;oriansj&gt;</a></span><span class="message">good thing M2-Planet supports #ifdef statements</span></div><div class="line" id="021855"><span class="nick" style="color:#6b8072"><a href="#021855" label="[02:18:55]">&lt;stikonas&gt;</a></span><span class="message">yeah, I guess it is somewhat similar</span></div><div class="line" id="021902"><span class="nick" style="color:#6b8072"><a href="#021902" label="[02:19:02]">&lt;stikonas&gt;</a></span><span class="message">or at least we can implement execve that way</span></div><div class="line" id="021929"><span class="nick" style="color:#6b8072"><a href="#021929" label="[02:19:29]">&lt;stikonas&gt;</a></span><span class="message">hmm, I wonder if we can then somehow fake fork call...</span></div><div class="line" id="021946"><span class="nick" style="color:#6b8072"><a href="#021946" label="[02:19:46]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="022035"><span class="nick" style="color:#6b8072"><a href="#022035" label="[02:20:35]">&lt;stikonas&gt;</a></span><span class="message">probably not...</span></div><div class="line" id="022104"><span class="nick" style="color:#6b8072"><a href="#022104" label="[02:21:04]">&lt;stikonas&gt;</a></span><span class="message">we could always just have return 0;</span></div><div class="line" id="022119"><span class="nick" style="color:#6b8072"><a href="#022119" label="[02:21:19]">&lt;stikonas&gt;</a></span><span class="message">then it will think that it's a child and do execve (start image)</span></div><div class="line" id="022143"><span class="nick" style="color:#6b8072"><a href="#022143" label="[02:21:43]">&lt;stikonas&gt;</a></span><span class="message">but then the next line in kaem <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/Kaem/kaem.c#L1099">https://github.com/oriansj/mescc-tools/blob/master/Kaem/kaem.c#L1099</a>  will have to be #ifdefed</span></div><div class="line" id="022749"><span class="nick" style="color:#80b1d3"><a href="#022749" label="[02:27:49]">&lt;muurkha&gt;</a></span><span class="message">heh, that's an amusing idea</span></div><div class="line" id="022808"><span class="nick" style="color:#6b8072"><a href="#022808" label="[02:28:08]">&lt;stikonas&gt;</a></span><span class="message">not sure if that's the best way, as it is a bit against the spec</span></div><div class="line" id="022815"><span class="nick" style="color:#6b8072"><a href="#022815" label="[02:28:15]">&lt;stikonas&gt;</a></span><span class="message">execve does not return on success</span></div><div class="line" id="022831"><span class="nick" style="color:#80b1d3"><a href="#022831" label="[02:28:31]">&lt;muurkha&gt;</a></span><span class="message">implement fork to be setjmp() and return 0, and exit() to be longjmp? :)</span></div><div class="line" id="023346"><span class="nick" style="color:#6b8072"><a href="#023346" label="[02:33:46]">&lt;stikonas&gt;</a></span><span class="message">probably less hacky way, is to just #ifdef the whole fork/execve stuff and just add spawn function...</span></div><div class="line" id="023818"><span class="nick" style="color:#6b8072"><a href="#023818" label="[02:38:18]">&lt;stikonas&gt;</a></span><span class="message">hmm, interesting, I think mkdir in UEFI is just open call</span></div><div class="line" id="023830"><span class="nick" style="color:#6b8072"><a href="#023830" label="[02:38:30]">&lt;stikonas&gt;</a></span><span class="message">with create atribute (but we already use it for files)</span></div><div class="line" id="024133"><span class="nick" style="color:#389600"><a href="#024133" label="[02:41:33]">&lt;oriansj&gt;</a></span><span class="message">stikonas: actually spawn would be in the #ifdef and the fork/execve bit would be inside the #else block</span></div><div class="line" id="024225"><span class="nick" style="color:#6b8072"><a href="#024225" label="[02:42:25]">&lt;stikonas&gt;</a></span><span class="message">anyway, I'll probably do it in smaller bits</span></div><div class="line" id="024234"><span class="nick" style="color:#6b8072"><a href="#024234" label="[02:42:34]">&lt;stikonas&gt;</a></span><span class="message">first get enough to build hex2 and M1 from C sources</span></div><div class="line" id="024255"><span class="nick" style="color:#6b8072"><a href="#024255" label="[02:42:55]">&lt;stikonas&gt;</a></span><span class="message">that will need far fewer things than kaem</span></div><div class="line" id="024426"><span class="nick" style="color:#389600"><a href="#024426" label="[02:44:26]">&lt;oriansj&gt;</a></span><span class="message">and less hacking around  a bad spec</span></div><div class="line" id="024654"><span class="nick" style="color:#389600"><a href="#024654" label="[02:46:54]">&lt;oriansj&gt;</a></span><span class="message">although you really should do an announce for getting M2-Planet self-hosting on UEFI; as you might be right about it being the first self-hosting Compiler to run on UEFI</span></div><div class="line" id="025041"><span class="nick" style="color:#389600"><a href="#025041" label="[02:50:41]">&lt;oriansj&gt;</a></span><span class="message">stikonas: could we use EFI_GLOBAL_VARIABLE as environment variables?</span></div><div class="line" id="025205"><span class="nick" style="color:#389600"><a href="#025205" label="[02:52:05]">&lt;oriansj&gt;</a></span><span class="message">using GetVariable and SetVariable</span></div><div class="line" id="025312"><span class="nick" style="color:#6d2462"><a href="#025312" label="[02:53:12]">&lt;stikonas[m]&gt;</a></span><span class="message">Hmm, maybe we could but do we need?</span></div><div class="line" id="025319"><span class="nick" style="color:#6d2462"><a href="#025319" label="[02:53:19]">&lt;stikonas[m]&gt;</a></span><span class="message">Hmm</span></div><div class="line" id="025330"><span class="nick" style="color:#6d2462"><a href="#025330" label="[02:53:30]">&lt;stikonas[m]&gt;</a></span><span class="message">Those are completely global</span></div><div class="line" id="025449"><span class="nick" style="color:#6d2462"><a href="#025449" label="[02:54:49]">&lt;stikonas[m]&gt;</a></span><span class="message">And I'm not sure if they are persistent or not</span></div><div class="line" id="025518"><span class="nick" style="color:#6d2462"><a href="#025518" label="[02:55:18]">&lt;stikonas[m]&gt;</a></span><span class="message">We don't really want them stored in nvram...</span></div><div class="line" id="025524"><span class="nick" style="color:#389600"><a href="#025524" label="[02:55:24]">&lt;oriansj&gt;</a></span><span class="message">we only need them to persist for the duration of kaem's life</span></div><div class="line" id="025547"><span class="nick" style="color:#6d2462"><a href="#025547" label="[02:55:47]">&lt;stikonas[m]&gt;</a></span><span class="message">OK, nvram is a separate attribute</span></div><div class="line" id="025622"><span class="nick" style="color:#6d2462"><a href="#025622" label="[02:56:22]">&lt;stikonas[m]&gt;</a></span><span class="message">We can use BOOTSERVICE_ACCESS</span></div><div class="line" id="025721"><span class="nick" style="color:#6d2462"><a href="#025721" label="[02:57:21]">&lt;stikonas[m]&gt;</a></span><span class="message">Though finding out what to read withGetVariable is tricky</span></div><div class="line" id="025722"><span class="nick" style="color:#389600"><a href="#025722" label="[02:57:22]">&lt;oriansj&gt;</a></span><span class="message">that should simplify passing an environment to a process</span></div><div class="line" id="025819"><span class="nick" style="color:#389600"><a href="#025819" label="[02:58:19]">&lt;oriansj&gt;</a></span><span class="message">fortunately we know exactly what environment variables are available/used</span></div><div class="line" id="030039"><span class="nick" style="color:#389600"><a href="#030039" label="[03:00:39]">&lt;oriansj&gt;</a></span><span class="message">and once we have process execution, M2libc will become the most powerful C Posix library for UEFI</span></div><div class="line" id="030117"><span class="nick" style="color:#389600"><a href="#030117" label="[03:01:17]">&lt;oriansj&gt;</a></span><span class="message">as we already blow <a rel="nofollow" href="https://gitlab.com/bztsrc/posix-uefi">https://gitlab.com/bztsrc/posix-uefi</a>  out of the water.</span></div><div class="line" id="030338"><span class="nick" style="color:#6d2462"><a href="#030338" label="[03:03:38]">&lt;stikonas[m]&gt;</a></span><span class="message">Oh we have more than posix-uefi?</span></div><div class="line" id="030352"><span class="nick" style="color:#6d2462"><a href="#030352" label="[03:03:52]">&lt;stikonas[m]&gt;</a></span><span class="message">I saw it briefly</span></div><div class="line" id="030523"><span class="nick" style="color:#389600"><a href="#030523" label="[03:05:23]">&lt;oriansj&gt;</a></span><span class="message">a good deal more</span></div><div class="line" id="031024"><span class="nick" style="color:#389600"><a href="#031024" label="[03:10:24]">&lt;oriansj&gt;</a></span><span class="message">we have fcntl.c, signal.h, stddef.h, our stdlib.h is bigger and our stdio.h supports more</span></div><div class="line" id="031057"><span class="nick" style="color:#389600"><a href="#031057" label="[03:10:57]">&lt;oriansj&gt;</a></span><span class="message">the only bits they have which we don't are: qsort.c and time.c</span></div><div class="line" id="042136"><span class="nick">***</span><span class="message notice">lanodan is now known as Guest8010</span></div><br /></div></body></html>