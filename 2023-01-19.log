<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-01-19.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="003153"><span class="nick" style="color:#389600"><a href="#003153" label="[00:31:53]">&lt;rickmasters&gt;</a></span><span class="message">I have an update on the kernel bootstrap work.</span></div><div class="line" id="003206"><span class="nick" style="color:#389600"><a href="#003206" label="[00:32:06]">&lt;rickmasters&gt;</a></span><span class="message">I added better file descriptor support to the builder-hex0 kernel.</span></div><div class="line" id="003220"><span class="nick" style="color:#389600"><a href="#003220" label="[00:32:20]">&lt;rickmasters&gt;</a></span><span class="message">Now it can support running tcc-0.9.27 to build a fully functional Fiwix kernel.</span></div><div class="line" id="003229"><span class="nick" style="color:#389600"><a href="#003229" label="[00:32:29]">&lt;rickmasters&gt;</a></span><span class="message">As a reminder, Fiwix can build Linux 4.9.10.</span></div><div class="line" id="003238"><span class="nick" style="color:#389600"><a href="#003238" label="[00:32:38]">&lt;rickmasters&gt;</a></span><span class="message">The remaining work is to implement (kexec/no rebooting) transitions from builder-hex0 to Fiwix to Linux.</span></div><div class="line" id="003445"><span class="nick" style="color:#389600"><a href="#003445" label="[00:34:45]">&lt;rickmasters&gt;</a></span><span class="message">The builder-hex0 kernel currently weighs in at 3466 bytes.</span></div><div class="line" id="005151"><span class="nick" style="color:#8dd3c7"><a href="#005151" label="[00:51:51]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: nice!</span></div><div class="line" id="005200"><span class="nick" style="color:#8dd3c7"><a href="#005200" label="[00:52:00]">&lt;stikonas&gt;</a></span><span class="message">I guess there is still some effort needed to upstream stuff?</span></div><div class="line" id="005321"><span class="nick" style="color:#389600"><a href="#005321" label="[00:53:21]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: I have around a dozen improvements to upstream to Fiwix.</span></div><div class="line" id="005401"><span class="nick" style="color:#389600"><a href="#005401" label="[00:54:01]">&lt;rickmasters&gt;</a></span><span class="message">I have one required improvement to mes libc</span></div><div class="line" id="005452"><span class="nick" style="color:#389600"><a href="#005452" label="[00:54:52]">&lt;rickmasters&gt;</a></span><span class="message">I have a change to both versions of musl to bypass the need for the clone syscall</span></div><div class="line" id="005521"><span class="nick" style="color:#389600"><a href="#005521" label="[00:55:21]">&lt;rickmasters&gt;</a></span><span class="message">I have two or three small changes to tcc</span></div><div class="line" id="005622"><span class="nick" style="color:#8dd3c7"><a href="#005622" label="[00:56:22]">&lt;stikonas&gt;</a></span><span class="message">well, mes should be easy, I'm sure janneke would accept your patch</span></div><div class="line" id="005626"><span class="nick" style="color:#389600"><a href="#005626" label="[00:56:26]">&lt;rickmasters&gt;</a></span><span class="message">These changes would generate new checksums for many live-bootstrap binaries and packages</span></div><div class="line" id="005650"><span class="nick" style="color:#8dd3c7"><a href="#005650" label="[00:56:50]">&lt;stikonas&gt;</a></span><span class="message">oh, that is fine, any mes update also breaks all checksums until after musl</span></div><div class="line" id="005707"><span class="nick" style="color:#8dd3c7"><a href="#005707" label="[00:57:07]">&lt;stikonas&gt;</a></span><span class="message">we now have a fairly good scripting to update them</span></div><div class="line" id="005733"><span class="nick" style="color:#8dd3c7"><a href="#005733" label="[00:57:33]">&lt;stikonas&gt;</a></span><span class="message">all tar.bz2 packages end up in /usr/src/repo directory and you can just check it there</span></div><div class="line" id="005751"><span class="nick" style="color:#8dd3c7"><a href="#005751" label="[00:57:51]">&lt;stikonas&gt;</a></span><span class="message">back to patching. Musl should be easy too as we have patch then</span></div><div class="line" id="005817"><span class="nick" style="color:#8dd3c7"><a href="#005817" label="[00:58:17]">&lt;stikonas&gt;</a></span><span class="message">tcc might be a bit trickier, maybe we can use your pathching script or replace from stage0-posix...</span></div><div class="line" id="005845"><span class="nick" style="color:#389600"><a href="#005845" label="[00:58:45]">&lt;rickmasters&gt;</a></span><span class="message">Yes, I'm already patching all my changes with simple-patch</span></div><div class="line" id="010021"><span class="nick" style="color:#389600"><a href="#010021" label="[01:00:21]">&lt;rickmasters&gt;</a></span><span class="message">I also need to formulate an integration strategy with live-bootstrap but it shouldn't be too hard.</span></div><div class="line" id="010119"><span class="nick" style="color:#8dd3c7"><a href="#010119" label="[01:01:19]">&lt;stikonas&gt;</a></span><span class="message">well, builder-hex0 takes different input than initramfs image live-bootstrap uses now</span></div><div class="line" id="010136"><span class="nick" style="color:#8dd3c7"><a href="#010136" label="[01:01:36]">&lt;stikonas&gt;</a></span><span class="message">perhaps fiwix can be integrated first</span></div><div class="line" id="010231"><span class="nick" style="color:#389600"><a href="#010231" label="[01:02:31]">&lt;rickmasters&gt;</a></span><span class="message">I'm thinking just dump the boot2now file system scripts in a directory and add that option to the python launcher</span></div><div class="line" id="010345"><span class="nick" style="color:#389600"><a href="#010345" label="[01:03:45]">&lt;rickmasters&gt;</a></span><span class="message">Yeah, I have a kaem script for Fiwix</span></div><div class="line" id="010717"><span class="nick" style="color:#389600"><a href="#010717" label="[01:07:17]">&lt;rickmasters&gt;</a></span><span class="message">I modified a version of live-bootstrap to produce an ext2 file system for Fiwix so I've done that kind of work already.</span></div><div class="line" id="011221"><span class="nick" style="color:#2e2a4a"><a href="#011221" label="[01:12:21]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: I am so so very very excited by your progress.</span></div><div class="line" id="011254"><span class="nick" style="color:#389600"><a href="#011254" label="[01:12:54]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: Thanks! I'm hoping the hardest parts are done now - writing and compiling the kernels.</span></div><div class="line" id="011423"><span class="nick" style="color:#389600"><a href="#011423" label="[01:14:23]">&lt;rickmasters&gt;</a></span><span class="message">Of course, I only wrote one kernel.</span></div><div class="line" id="011439"><span class="nick" style="color:#2e2a4a"><a href="#011439" label="[01:14:39]">&lt;oriansj&gt;</a></span><span class="message">Well the hardest parts will likely be solving the hardware bootstrap problem but your kernel work really paved the way for other people to do kernel ports</span></div><div class="line" id="011513"><span class="nick" style="color:#2e2a4a"><a href="#011513" label="[01:15:13]">&lt;oriansj&gt;</a></span><span class="message">and honestly probably saved me from 5-10 years of work</span></div><div class="line" id="011546"><span class="nick" style="color:#389600"><a href="#011546" label="[01:15:46]">&lt;rickmasters&gt;</a></span><span class="message">Yeah, I was just talking about the kernel bootstrap work. The hardest parts are done in relation to the work remaining to kexec/boot them.</span></div><div class="line" id="011640"><span class="nick" style="color:#2e2a4a"><a href="#011640" label="[01:16:40]">&lt;oriansj&gt;</a></span><span class="message">I also hope the kexec/boot work is a nice peaceful jot to victory for you</span></div><div class="line" id="011706"><span class="nick" style="color:#389600"><a href="#011706" label="[01:17:06]">&lt;rickmasters&gt;</a></span><span class="message">In the bigger picture there is still so much difficult work - for hardware and other architectures.</span></div><div class="line" id="011741"><span class="nick" style="color:#2e2a4a"><a href="#011741" label="[01:17:41]">&lt;oriansj&gt;</a></span><span class="message">oh, I think of it as a lot of fun and a way to really finally know all of the secrets</span></div><div class="line" id="011939"><span class="nick" style="color:#6b8072"><a href="#011939" label="[01:19:39]">&lt;fossy&gt;</a></span><span class="message">rickmasters: that is very exciting update! thanks for your work :D</span></div><div class="line" id="012010"><span class="nick" style="color:#389600"><a href="#012010" label="[01:20:10]">&lt;rickmasters&gt;</a></span><span class="message">fossy: thank you</span></div><div class="line" id="012050"><span class="nick" style="color:#6b8072"><a href="#012050" label="[01:20:50]">&lt;fossy&gt;</a></span><span class="message">rickmasters: builder-hex0 is effectively stage0-posix+kernel right?</span></div><div class="line" id="012124"><span class="nick" style="color:#8dd3c7"><a href="#012124" label="[01:21:24]">&lt;stikonas&gt;</a></span><span class="message">fossy: builder-hex0 I guess is just kernel</span></div><div class="line" id="012128"><span class="nick" style="color:#8dd3c7"><a href="#012128" label="[01:21:28]">&lt;stikonas&gt;</a></span><span class="message">but it can run stage0-posix</span></div><div class="line" id="012131"><span class="nick" style="color:#2e2a4a"><a href="#012131" label="[01:21:31]">&lt;oriansj&gt;</a></span><span class="message">(and the steps to TCC-0.9.27 too by the looks of it)</span></div><div class="line" id="012143"><span class="nick" style="color:#8dd3c7"><a href="#012143" label="[01:21:43]">&lt;stikonas&gt;</a></span><span class="message">and in fact it includes an implementation of hex0 inside the kernel</span></div><div class="line" id="012151"><span class="nick" style="color:#389600"><a href="#012151" label="[01:21:51]">&lt;rickmasters&gt;</a></span><span class="message">builder-hex0 also includes a primitive shell and hex0 compiler</span></div><div class="line" id="012208"><span class="nick" style="color:#8dd3c7"><a href="#012208" label="[01:22:08]">&lt;stikonas&gt;</a></span><span class="message">it's boot2now that is builder-hex0+ stage0-posix + a few extra steps to TCC</span></div><div class="line" id="012208"><span class="nick" style="color:#389600"><a href="#012208" label="[01:22:08]">&lt;rickmasters&gt;</a></span><span class="message">and bootloader</span></div><div class="line" id="012219"><span class="nick" style="color:#80b1d3"><a href="#012219" label="[01:22:19]">&lt;muurkha&gt;</a></span><span class="message">I always get these confused</span></div><div class="line" id="012225"><span class="nick" style="color:#6b8072"><a href="#012225" label="[01:22:25]">&lt;fossy&gt;</a></span><span class="message">ah right</span></div><div class="line" id="012239"><span class="nick" style="color:#6b8072"><a href="#012239" label="[01:22:39]">&lt;fossy&gt;</a></span><span class="message">so in terms of live-bootstrap integration we effectively prepend builder-hex0 to stage0-posix</span></div><div class="line" id="012330"><span class="nick" style="color:#2e2a4a"><a href="#012330" label="[01:23:30]">&lt;oriansj&gt;</a></span><span class="message">and insert the fiwix kernel bootstrap prior to the Linux kernel build</span></div><div class="line" id="012338"><span class="nick" style="color:#6b8072"><a href="#012338" label="[01:23:38]">&lt;fossy&gt;</a></span><span class="message">yep</span></div><div class="line" id="012400"><span class="nick" style="color:#6b8072"><a href="#012400" label="[01:24:00]">&lt;fossy&gt;</a></span><span class="message">rickmasters: are there any patches for fiwix compatibility to userland software? or is it only kernel changes you made</span></div><div class="line" id="012420"><span class="nick" style="color:#389600"><a href="#012420" label="[01:24:20]">&lt;rickmasters&gt;</a></span><span class="message">builder-hex0 is compiled into one binary that can process source for stage0-posix, mes, tcc, and Fiwix and produce new executables and the Fiwix kernel</span></div><div class="line" id="012455"><span class="nick" style="color:#389600"><a href="#012455" label="[01:24:55]">&lt;rickmasters&gt;</a></span><span class="message">The boot2now project is the driver that assembles that source code and appends it to the binary in the form of a bootable disk image.</span></div><div class="line" id="012629"><span class="nick" style="color:#2e2a4a"><a href="#012629" label="[01:26:29]">&lt;oriansj&gt;</a></span><span class="message">(Which later I can solve generating using the Nanochess BootOS)</span></div><div class="line" id="012721"><span class="nick" style="color:#389600"><a href="#012721" label="[01:27:21]">&lt;rickmasters&gt;</a></span><span class="message">fossy: The Fiwix specific change was to patch musl to avoid using the clone system call. I replaced it with fork and a little bit more.</span></div><div class="line" id="012734"><span class="nick" style="color:#6b8072"><a href="#012734" label="[01:27:34]">&lt;fossy&gt;</a></span><span class="message">oh, that's no big deal at all</span></div><div class="line" id="012802"><span class="nick" style="color:#389600"><a href="#012802" label="[01:28:02]">&lt;rickmasters&gt;</a></span><span class="message">fossy: I also tested that musl change with the Linux kernel and it ran to the end fine</span></div><div class="line" id="012812"><span class="nick" style="color:#2e2a4a"><a href="#012812" label="[01:28:12]">&lt;oriansj&gt;</a></span><span class="message">and a single boot sector kernel should be a small enough root of trust for our bootstrap chain (and we don't need to automate the building of the boot2now disk image if we have a written procedure for generating it)</span></div><div class="line" id="012904"><span class="nick" style="color:#6b8072"><a href="#012904" label="[01:29:04]">&lt;fossy&gt;</a></span><span class="message">whats the format of the disk, in terms of providing files live-bootstrap needs? since builder-hex0 doesn't use a full-featured filesystem</span></div><div class="line" id="012915"><span class="nick" style="color:#6b8072"><a href="#012915" label="[01:29:15]">&lt;fossy&gt;</a></span><span class="message">ie, how does the disk get translated into vfs</span></div><div class="line" id="013000"><span class="nick" style="color:#389600"><a href="#013000" label="[01:30:00]">&lt;rickmasters&gt;</a></span><span class="message">The initial file system is a series of source files appended together with a small text header that has the file name and number of bytes</span></div><div class="line" id="013031"><span class="nick" style="color:#389600"><a href="#013031" label="[01:30:31]">&lt;rickmasters&gt;</a></span><span class="message">That is read off the disk into a primitive memory file system.</span></div><div class="line" id="013051"><span class="nick" style="color:#6b8072"><a href="#013051" label="[01:30:51]">&lt;fossy&gt;</a></span><span class="message">good, that is very simple</span></div><div class="line" id="013117"><span class="nick" style="color:#389600"><a href="#013117" label="[01:31:17]">&lt;rickmasters&gt;</a></span><span class="message">In theory, it could be created with a text editor.</span></div><div class="line" id="013149"><span class="nick" style="color:#6b8072"><a href="#013149" label="[01:31:49]">&lt;fossy&gt;</a></span><span class="message">yeah, i just wanted to make sure this wouldn't require any logic in rootfs.py that is too hard to perform manually</span></div><div class="line" id="013155"><span class="nick" style="color:#389600"><a href="#013155" label="[01:31:55]">&lt;rickmasters&gt;</a></span><span class="message">Except I also currently append tar files. But in theory, those could be expanded into text files.</span></div><div class="line" id="013433"><span class="nick" style="color:#389600"><a href="#013433" label="[01:34:33]">&lt;rickmasters&gt;</a></span><span class="message">fossy: this is an example shell script that output files in the expected format: <a rel="nofollow" href="https://github.com/ironmeld/boot2now/blob/main/tool-steps/builder-hex0-with-stage0-posix/gather-stage0-posix-srcs.sh">https://github.com/ironmeld/boot2now/blob/main/tool-steps/builder-hex0-with-stage0-posix/gather-stage0-posix-srcs.sh</a> </span></div><div class="line" id="013635"><span class="nick" style="color:#6b8072"><a href="#013635" label="[01:36:35]">&lt;fossy&gt;</a></span><span class="message">rickmasters: i have no worries about that</span></div><div class="line" id="013711"><span class="nick" style="color:#6b8072"><a href="#013711" label="[01:37:11]">&lt;fossy&gt;</a></span><span class="message">even easier to audit than cpio (which is what we use right now)</span></div><div class="line" id="013921"><span class="nick" style="color:#6b8072"><a href="#013921" label="[01:39:21]">&lt;fossy&gt;</a></span><span class="message">hrm, should add a TRUST.md equivalent to live-bootstrap, like in boot2now</span></div><div class="line" id="013933"><span class="nick" style="color:#6b8072"><a href="#013933" label="[01:39:33]">&lt;fossy&gt;</a></span><span class="message">because all the right concerns and unsolved problems are there</span></div><div class="line" id="014334"><span class="nick" style="color:#2e2a4a"><a href="#014334" label="[01:43:34]">&lt;oriansj&gt;</a></span><span class="message">and is absolutely correct</span></div><div class="line" id="014341"><span class="nick" style="color:#389600"><a href="#014341" label="[01:43:41]">&lt;rickmasters&gt;</a></span><span class="message">fossy: feel free to copy any of it you'd like and attribution is not necessary</span></div><div class="line" id="014426"><span class="nick" style="color:#6b8072"><a href="#014426" label="[01:44:26]">&lt;fossy&gt;</a></span><span class="message">rickmasters: thanks</span></div><div class="line" id="014910"><span class="nick" style="color:#389600"><a href="#014910" label="[01:49:10]">&lt;rickmasters&gt;</a></span><span class="message">The text of TRUST.md was initially part of the README but I broke it out because it was a bit too philosophical and maybe distracting from the &quot;useful&quot; stuff in the README</span></div><div class="line" id="015446"><span class="nick" style="color:#80b1d3"><a href="#015446" label="[01:54:46]">&lt;muurkha&gt;</a></span><span class="message">perhaps relevant to bootstrapping tar: &quot;Tar.pl – A tar creator and extractor in ~130 lines of Prolog&quot; <a rel="nofollow" href="https://news.ycombinator.com/item?id=34427081">https://news.ycombinator.com/item?id=34427081</a> </span></div><div class="line" id="015537"><span class="nick" style="color:#8dd3c7"><a href="#015537" label="[01:55:37]">&lt;stikonas&gt;</a></span><span class="message">muurkha: we already have untar in stage0-posix</span></div><div class="line" id="015548"><span class="nick" style="color:#8dd3c7"><a href="#015548" label="[01:55:48]">&lt;stikonas&gt;</a></span><span class="message">that's good enough</span></div><div class="line" id="015640"><span class="nick" style="color:#8dd3c7"><a href="#015640" label="[01:56:40]">&lt;stikonas&gt;</a></span><span class="message">maybe more lines of code here <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-extra/blob/master/untar.c">https://github.com/oriansj/mescc-tools-extra/blob/master/untar.c</a> </span></div><div class="line" id="015644"><span class="nick" style="color:#8dd3c7"><a href="#015644" label="[01:56:44]">&lt;stikonas&gt;</a></span><span class="message">but it's not any more complicated</span></div><div class="line" id="015716"><span class="nick" style="color:#8dd3c7"><a href="#015716" label="[01:57:16]">&lt;stikonas&gt;</a></span><span class="message">and half of it is argument parsing (whereas tar.pl doesn't seem to support arguments)</span></div><div class="line" id="015757"><span class="nick" style="color:#8dd3c7"><a href="#015757" label="[01:57:57]">&lt;stikonas&gt;</a></span><span class="message">well, we didn't have a goal to minimize lines of code in untar.c</span></div><div class="line" id="015848"><span class="nick" style="color:#80b1d3"><a href="#015848" label="[01:58:48]">&lt;muurkha&gt;</a></span><span class="message">good enough is a good start</span></div><div class="line" id="020254"><span class="nick" style="color:#2e2a4a"><a href="#020254" label="[02:02:54]">&lt;oriansj&gt;</a></span><span class="message">also we don't have a known good path to Prolog yet</span></div><div class="line" id="021426"><span class="nick" style="color:#80b1d3"><a href="#021426" label="[02:14:26]">&lt;muurkha&gt;</a></span><span class="message">Prolog is a tiny language though</span></div><div class="line" id="021441"><span class="nick" style="color:#8dd3c7"><a href="#021441" label="[02:14:41]">&lt;stikonas&gt;</a></span><span class="message">tar is also almost a human readable format</span></div><div class="line" id="021454"><span class="nick" style="color:#8dd3c7"><a href="#021454" label="[02:14:54]">&lt;stikonas&gt;</a></span><span class="message">so perhaps it's not surprising that implementations are short</span></div><div class="line" id="021501"><span class="nick" style="color:#80b1d3"><a href="#021501" label="[02:15:01]">&lt;muurkha&gt;</a></span><span class="message">yeah</span></div><div class="line" id="021519"><span class="nick" style="color:#8dd3c7"><a href="#021519" label="[02:15:19]">&lt;stikonas&gt;</a></span><span class="message">it's a bit more complex than rickmasters filesystem but not terribly more so</span></div><div class="line" id="024739"><span class="nick" style="color:#6d2462"><a href="#024739" label="[02:47:39]">&lt;pabs3&gt;</a></span><span class="message">Kotlin bootstrap news <a rel="nofollow" href="https://lists.debian.org/msgid-search/0c8a9407ee5b10d1459aa2484ad0699b@apache.org">https://lists.debian.org/msgid-search/0c8a9407ee5b10d1459aa2484ad0699b@apache.org</a> </span></div><div class="line" id="024749"><span class="nick" style="color:#6d2462"><a href="#024749" label="[02:47:49]">&lt;pabs3&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/ebourg/kotlin-bootstrapping">https://github.com/ebourg/kotlin-bootstrapping</a> </span></div><div class="line" id="031846"><span class="nick" style="color:#234e69"><a href="#031846" label="[03:18:46]">&lt;stikonas[m]&gt;</a></span><span class="message">It was also on our mailing list</span></div><br /></div></body></html>