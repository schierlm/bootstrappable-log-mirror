<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-04-02.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000300"><span class="nick" style="color:#8dd3c7"><a href="#000300" label="[00:03:00]">&lt;stikonas&gt;</a></span><span class="message">fossy: by the way, guile only needs automake 1.12</span></div><div class="line" id="000303"><span class="nick" style="color:#8dd3c7"><a href="#000303" label="[00:03:03]">&lt;stikonas&gt;</a></span><span class="message">I just checked</span></div><div class="line" id="000313"><span class="nick" style="color:#8dd3c7"><a href="#000313" label="[00:03:13]">&lt;stikonas&gt;</a></span><span class="message">configure.ac:AM_INIT_AUTOMAKE([1.12 gnu no-define -Wall -Wno-override \</span></div><div class="line" id="000332"><span class="nick" style="color:#8dd3c7"><a href="#000332" label="[00:03:32]">&lt;stikonas&gt;</a></span><span class="message">so you don't need 1.16.2</span></div><div class="line" id="000345"><span class="nick" style="color:#8dd3c7"><a href="#000345" label="[00:03:45]">&lt;stikonas&gt;</a></span><span class="message">yes, release tarball was generated with 1.16.2 but that's fine</span></div><div class="line" id="000349"><span class="nick" style="color:#8dd3c7"><a href="#000349" label="[00:03:49]">&lt;stikonas&gt;</a></span><span class="message">we can use 1.15.x</span></div><div class="line" id="000745"><span class="nick" style="color:#8dd3c7"><a href="#000745" label="[00:07:45]">&lt;stikonas&gt;</a></span><span class="message">ok, so config.h is different when I run configure in subdirectory...</span></div><div class="line" id="000753"><span class="nick" style="color:#8dd3c7"><a href="#000753" label="[00:07:53]">&lt;stikonas&gt;</a></span><span class="message">must be some configure arguments...</span></div><div class="line" id="002202"><span class="nick" style="color:#2e2a4a"><a href="#002202" label="[00:22:02]">&lt;fossy&gt;</a></span><span class="message">stikonas: ooh, i see</span></div><div class="line" id="002213"><span class="nick" style="color:#2e2a4a"><a href="#002213" label="[00:22:13]">&lt;fossy&gt;</a></span><span class="message">ok i'll just do that</span></div><div class="line" id="002500"><span class="nick" style="color:#8dd3c7"><a href="#002500" label="[00:25:00]">&lt;stikonas&gt;</a></span><span class="message">I think 1.15 should be enough for almost everything</span></div><div class="line" id="002524"><span class="nick" style="color:#8dd3c7"><a href="#002524" label="[00:25:24]">&lt;stikonas&gt;</a></span><span class="message">I have not yet seen software that needed 1.16</span></div><div class="line" id="002529"><span class="nick" style="color:#8dd3c7"><a href="#002529" label="[00:25:29]">&lt;stikonas&gt;</a></span><span class="message">although, I didn't look too much</span></div><div class="line" id="002535"><span class="nick" style="color:#8dd3c7"><a href="#002535" label="[00:25:35]">&lt;stikonas&gt;</a></span><span class="message">but e.g. latest tar only needs 1.15</span></div><div class="line" id="002650"><span class="nick" style="color:#8dd3c7"><a href="#002650" label="[00:26:50]">&lt;stikonas&gt;</a></span><span class="message">well, occasionally AM_INIT is incorrect</span></div><div class="line" id="002657"><span class="nick" style="color:#8dd3c7"><a href="#002657" label="[00:26:57]">&lt;stikonas&gt;</a></span><span class="message">but 1.15 is much newer than 1.12 anyway</span></div><div class="line" id="002702"><span class="nick" style="color:#8dd3c7"><a href="#002702" label="[00:27:02]">&lt;stikonas&gt;</a></span><span class="message">so hopefully will work</span></div><div class="line" id="002714"><span class="nick" style="color:#8dd3c7"><a href="#002714" label="[00:27:14]">&lt;stikonas&gt;</a></span><span class="message">oh, some progress with binutils</span></div><div class="line" id="002732"><span class="nick" style="color:#8dd3c7"><a href="#002732" label="[00:27:32]">&lt;stikonas&gt;</a></span><span class="message">need a few more sed hacks on config.in file (we already have some)</span></div><div class="line" id="003215"><span class="nick" style="color:#8dd3c7"><a href="#003215" label="[00:32:15]">&lt;stikonas&gt;</a></span><span class="message">fossy: but I think you'll also need to package some guile dependencies</span></div><div class="line" id="003221"><span class="nick" style="color:#8dd3c7"><a href="#003221" label="[00:32:21]">&lt;stikonas&gt;</a></span><span class="message">namely gmp and libunistring</span></div><div class="line" id="004506"><span class="nick" style="color:#8dd3c7"><a href="#004506" label="[00:45:06]">&lt;stikonas&gt;</a></span><span class="message">ok, binutils rebuilt...</span></div><div class="line" id="005219"><span class="nick" style="color:#6b8072"><a href="#005219" label="[00:52:19]">&lt;roptat&gt;</a></span><span class="message">I looked again at scala... I now have a lexer for scala2 and 3 (it's supposed to work for both languages) that I wrote by more or less translating scala to java</span></div><div class="line" id="005407"><span class="nick" style="color:#6b8072"><a href="#005407" label="[00:54:07]">&lt;roptat&gt;</a></span><span class="message">so, I tried to write a parser, but the parser in Scala uses a lot of the standard library and a lot of scala features that I can't easily translate to Java</span></div><div class="line" id="005702"><span class="nick" style="color:#6b8072"><a href="#005702" label="[00:57:02]">&lt;roptat&gt;</a></span><span class="message">well, I'm not sure what I should do: either spend some time to translate the infrastructure around names, constants, numbers, the ast and the parser from scala to my project, or use the documentation to derive my own types for the ast, ignoring what scala does</span></div><div class="line" id="005737"><span class="nick" style="color:#6b8072"><a href="#005737" label="[00:57:37]">&lt;roptat&gt;</a></span><span class="message">the first sounds a bit complex but maybe the result will be more correct</span></div><div class="line" id="005802"><span class="nick" style="color:#6b8072"><a href="#005802" label="[00:58:02]">&lt;roptat&gt;</a></span><span class="message">the second ensures that I understand better what's going on and what each construct corresponds to, so it's maybe easier for me to produce code from it</span></div><div class="line" id="010046"><span class="nick" style="color:#8dd3c7"><a href="#010046" label="[01:00:46]">&lt;stikonas&gt;</a></span><span class="message">fossy: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/83">https://github.com/fosslinux/live-bootstrap/pull/83</a> </span></div><div class="line" id="010954"><span class="nick" style="color:#8dd3c7"><a href="#010954" label="[01:09:54]">&lt;stikonas&gt;</a></span><span class="message">pder: so I solved autogen for binutils too</span></div><div class="line" id="011000"><span class="nick" style="color:#8dd3c7"><a href="#011000" label="[01:10:00]">&lt;stikonas&gt;</a></span><span class="message">we had it in 2.14 as well</span></div><div class="line" id="011022"><span class="nick" style="color:#80b1d3"><a href="#011022" label="[01:10:22]">&lt;pder&gt;</a></span><span class="message">I just saw that.  That's great news</span></div><div class="line" id="011421"><span class="nick" style="color:#80b1d3"><a href="#011421" label="[01:14:21]">&lt;pder&gt;</a></span><span class="message">I just created a PR for the perl warning fix</span></div><div class="line" id="011430"><span class="nick" style="color:#8dd3c7"><a href="#011430" label="[01:14:30]">&lt;stikonas&gt;</a></span><span class="message">pder: any reason why you we looking at 2.18? and not e.g. latest?</span></div><div class="line" id="011515"><span class="nick" style="color:#80b1d3"><a href="#011515" label="[01:15:15]">&lt;pder&gt;</a></span><span class="message">I was just trying to keep gcc, glibc, and binutils from the same timeframe since there can be mismatches</span></div><div class="line" id="011606"><span class="nick" style="color:#8dd3c7"><a href="#011606" label="[01:16:06]">&lt;stikonas&gt;</a></span><span class="message">hmm, it probaby will work with new ones...</span></div><div class="line" id="011629"><span class="nick" style="color:#8dd3c7"><a href="#011629" label="[01:16:29]">&lt;stikonas&gt;</a></span><span class="message">especially binutils</span></div><div class="line" id="011642"><span class="nick" style="color:#8dd3c7"><a href="#011642" label="[01:16:42]">&lt;stikonas&gt;</a></span><span class="message">probably just needs some minimum versions for certain features</span></div><div class="line" id="011652"><span class="nick" style="color:#8dd3c7"><a href="#011652" label="[01:16:52]">&lt;stikonas&gt;</a></span><span class="message">glibc and gcc might be more tied...</span></div><div class="line" id="011703"><span class="nick" style="color:#8dd3c7"><a href="#011703" label="[01:17:03]">&lt;stikonas&gt;</a></span><span class="message">although, we managed to build gcc C backend with musl</span></div><div class="line" id="011714"><span class="nick" style="color:#8dd3c7"><a href="#011714" label="[01:17:14]">&lt;stikonas&gt;</a></span><span class="message">which is completely different</span></div><div class="line" id="011819"><span class="nick" style="color:#80b1d3"><a href="#011819" label="[01:18:19]">&lt;pder&gt;</a></span><span class="message">Yeah its possible newer binutils might work.  I just had in my mind we would need to make incremental jumps with compatible versions of gcc glibc and binutils</span></div><div class="line" id="011845"><span class="nick" style="color:#8dd3c7"><a href="#011845" label="[01:18:45]">&lt;stikonas&gt;</a></span><span class="message">well, in my opinion, let's try newest first, and if that doesn't work, we go back</span></div><div class="line" id="011856"><span class="nick" style="color:#8dd3c7"><a href="#011856" label="[01:18:56]">&lt;stikonas&gt;</a></span><span class="message">well, with gcc we definitely need incremental jumps</span></div><div class="line" id="011931"><span class="nick" style="color:#8dd3c7"><a href="#011931" label="[01:19:31]">&lt;stikonas&gt;</a></span><span class="message">first of all we'll have to do full build of gcc &lt;= 4.7.4  (including C++ frontend)</span></div><div class="line" id="011959"><span class="nick" style="color:#80b1d3"><a href="#011959" label="[01:19:59]">&lt;pder&gt;</a></span><span class="message">I cant remember what I was looking at, but I've seen a matrix of possible gcc glibc compatible versions when building toolchains</span></div><div class="line" id="012041"><span class="nick" style="color:#8dd3c7"><a href="#012041" label="[01:20:41]">&lt;stikonas&gt;</a></span><span class="message">for gcc <a rel="nofollow" href="https://gcc.gnu.org/install/prerequisites.html">https://gcc.gnu.org/install/prerequisites.html</a>  says</span></div><div class="line" id="012047"><span class="nick" style="color:#8dd3c7"><a href="#012047" label="[01:20:47]">&lt;stikonas&gt;</a></span><span class="message">you either need gcc 4.8 or greater</span></div><div class="line" id="012058"><span class="nick" style="color:#8dd3c7"><a href="#012058" label="[01:20:58]">&lt;stikonas&gt;</a></span><span class="message">or use --disable-stage1-checking</span></div><div class="line" id="012146"><span class="nick" style="color:#8dd3c7"><a href="#012146" label="[01:21:46]">&lt;stikonas&gt;</a></span><span class="message">so I guess we need maybe one intermediate version</span></div><div class="line" id="012220"><span class="nick" style="color:#80b1d3"><a href="#012220" label="[01:22:20]">&lt;pder&gt;</a></span><span class="message"> <a rel="nofollow" href="https://stackoverflow.com/questions/35873558/glibc-vs-gcc-vs-binutils-compatibility">https://stackoverflow.com/questions/35873558/glibc-vs-gcc-vs-binutils-compatibility</a> </span></div><div class="line" id="012254"><span class="nick" style="color:#8dd3c7"><a href="#012254" label="[01:22:54]">&lt;stikonas&gt;</a></span><span class="message">hmm, it's mostly question marks</span></div><div class="line" id="012302"><span class="nick" style="color:#8dd3c7"><a href="#012302" label="[01:23:02]">&lt;stikonas&gt;</a></span><span class="message">I guess just nobody tried</span></div><div class="line" id="012456"><span class="nick" style="color:#8dd3c7"><a href="#012456" label="[01:24:56]">&lt;stikonas&gt;</a></span><span class="message">(of ir they tried, didn't bother updating this matrix</span></div><div class="line" id="012542"><span class="nick" style="color:#80b1d3"><a href="#012542" label="[01:25:42]">&lt;pder&gt;</a></span><span class="message">Something to at least keep in mind in case we run into subtle breakage</span></div><div class="line" id="013140"><span class="nick" style="color:#8dd3c7"><a href="#013140" label="[01:31:40]">&lt;stikonas&gt;</a></span><span class="message">well, with had some subtle breakage with musl too...</span></div><div class="line" id="013153"><span class="nick" style="color:#8dd3c7"><a href="#013153" label="[01:31:53]">&lt;stikonas&gt;</a></span><span class="message">even now with building binutils 2.14... had to apply some sed hacks</span></div><div class="line" id="033825"><span class="nick" style="color:#2e2a4a"><a href="#033825" label="[03:38:25]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: merged</span></div><div class="line" id="034620"><span class="nick" style="color:#6d2462"><a href="#034620" label="[03:46:20]">&lt;Hagfish&gt;</a></span><span class="message">&quot;GNU Automake from 1.15 series. This is the last version that runs on Perl 5.6.&quot;</span></div><div class="line" id="034633"><span class="nick" style="color:#6d2462"><a href="#034633" label="[03:46:33]">&lt;Hagfish&gt;</a></span><span class="message">it's so cool to watch all this time travel :)</span></div><div class="line" id="034643"><span class="nick" style="color:#6d2462"><a href="#034643" label="[03:46:43]">&lt;Hagfish&gt;</a></span><span class="message">is Perl 5.8 needed next?</span></div><div class="line" id="120937"><span class="nick" style="color:#2e2a4a"><a href="#120937" label="[12:09:37]">&lt;fossy&gt;</a></span><span class="message">hm, something weird is up with perl</span></div><div class="line" id="120950"><span class="nick" style="color:#2e2a4a"><a href="#120950" label="[12:09:50]">&lt;fossy&gt;</a></span><span class="message">PRIVLIB_EXP.. dosen't exist?!</span></div><div class="line" id="131457"><span class="nick" style="color:#8dd3c7"><a href="#131457" label="[13:14:57]">&lt;stikonas&gt;</a></span><span class="message">fossy: strange, is this new perl or current perl?</span></div><div class="line" id="134905"><span class="nick" style="color:#234e69"><a href="#134905" label="[13:49:05]">&lt;bauen1&gt;</a></span><span class="message">stikonas: (apart from being useful) is there any other motivation / idea you have in mind with <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/85">https://github.com/fosslinux/live-bootstrap/pull/85</a>  ?</span></div><div class="line" id="135429"><span class="nick" style="color:#8dd3c7"><a href="#135429" label="[13:54:29]">&lt;stikonas&gt;</a></span><span class="message">bauen1: not really at the moment</span></div><div class="line" id="135442"><span class="nick" style="color:#8dd3c7"><a href="#135442" label="[13:54:42]">&lt;stikonas&gt;</a></span><span class="message">that's it for now...</span></div><div class="line" id="135527"><span class="nick" style="color:#8dd3c7"><a href="#135527" label="[13:55:27]">&lt;stikonas&gt;</a></span><span class="message">and tcc-musl-pass1 does not fully support it yet</span></div><div class="line" id="135538"><span class="nick" style="color:#8dd3c7"><a href="#135538" label="[13:55:38]">&lt;stikonas&gt;</a></span><span class="message">maybe we should split it into two passes ...</span></div><div class="line" id="135853"><span class="nick" style="color:#8dd3c7"><a href="#135853" label="[13:58:53]">&lt;stikonas&gt;</a></span><span class="message">bauen1: well, I thought it might eventually help you with upkg</span></div><div class="line" id="135949"><span class="nick" style="color:#234e69"><a href="#135949" label="[13:59:49]">&lt;bauen1&gt;</a></span><span class="message">yes it's very useful</span></div><div class="line" id="140056"><span class="nick" style="color:#234e69"><a href="#140056" label="[14:00:56]">&lt;bauen1&gt;</a></span><span class="message">i'm still thinking about using a chroot, at least for transitioning into /after, but after that i'll do a few test runs to test setting up a /after/upkgs directory by hand, so that will make it much easier to do</span></div><div class="line" id="140058"><span class="nick" style="color:#8dd3c7"><a href="#140058" label="[14:00:58]">&lt;stikonas&gt;</a></span><span class="message">I sometimes find DESTDIR useful for debugging</span></div><div class="line" id="140635"><span class="nick" style="color:#8dd3c7"><a href="#140635" label="[14:06:35]">&lt;stikonas&gt;</a></span><span class="message">although, right now we mostly use autotools which supports DESTDIR anyway</span></div><div class="line" id="154741"><span class="nick" style="color:#6c3d55"><a href="#154741" label="[15:47:41]">&lt;gforce_d11977&gt;</a></span><span class="message">wow: i think i found the needed KERNEL_SYMBOL, now i have: bash-5.1: checksumming installed files. sha256sum: WARNING: 1 of 1 computed checksum did NOT match</span></div><div class="line" id="154821"><span class="nick" style="color:#6c3d55"><a href="#154821" label="[15:48:21]">&lt;gforce_d11977&gt;</a></span><span class="message">sha256sum is: 41dd3dfa62efcd8a71392e09747aab93660b0549f39cb4e673547db47a02bc27 /after/bin/bash</span></div><div class="line" id="154900"><span class="nick" style="color:#6c3d55"><a href="#154900" label="[15:49:00]">&lt;gforce_d11977&gt;</a></span><span class="message">and 2621200 bytes</span></div><div class="line" id="161504"><span class="nick">***</span><span class="message notice">mephista is now known as spicy_icecream</span></div><div class="line" id="174101"><span class="nick" style="color:#d9d9d9"><a href="#174101" label="[17:41:01]">&lt;janneke&gt;</a></span><span class="message"> <a rel="nofollow" href="https://twitter.com/orionwl/status/1378006927058296834">https://twitter.com/orionwl/status/1378006927058296834</a> </span></div><div class="line" id="174109"><span class="nick" style="color:#d9d9d9"><a href="#174109" label="[17:41:09]">&lt;janneke&gt;</a></span><span class="message">OriansJ`: ^</span></div><div class="line" id="174222"><span class="nick" style="color:#d9d9d9"><a href="#174222" label="[17:42:22]">&lt;janneke&gt;</a></span><span class="message">initial risc-v support, with a question/observation</span></div><div class="line" id="184106"><span class="nick" style="color:#234e69"><a href="#184106" label="[18:41:06]">&lt;bauen1&gt;</a></span><span class="message">in run.sh do we treat /after as the new root (in that case i would very much like to do a chroot syscall to execute it), or do we just not touch anything in / except for /after ?</span></div><div class="line" id="184302"><span class="nick" style="color:#234e69"><a href="#184302" label="[18:43:02]">&lt;bauen1&gt;</a></span><span class="message">i'm thinking of where to place the &quot;upkgs&quot; directory, and if to include the &quot;after&quot; component in the pseudo packages</span></div><div class="line" id="184939"><span class="nick" style="color:#8dd3c7"><a href="#184939" label="[18:49:39]">&lt;stikonas&gt;</a></span><span class="message">bauen1: we don't have chroot that early...</span></div><div class="line" id="184953"><span class="nick" style="color:#8dd3c7"><a href="#184953" label="[18:49:53]">&lt;stikonas&gt;</a></span><span class="message">when we start building in /after</span></div><div class="line" id="185013"><span class="nick" style="color:#8dd3c7"><a href="#185013" label="[18:50:13]">&lt;stikonas&gt;</a></span><span class="message">although, there might be some other ways to make very early build nicer...</span></div><div class="line" id="185054"><span class="nick" style="color:#8dd3c7"><a href="#185054" label="[18:50:54]">&lt;stikonas&gt;</a></span><span class="message">bauen1: but anyway, we don't need anything outside /after</span></div><div class="line" id="185108"><span class="nick" style="color:#234e69"><a href="#185108" label="[18:51:08]">&lt;bauen1&gt;</a></span><span class="message">stikonas: it'd be very easy to build chroot from coreutils in early build by implementing the chroot syscall in mes libc</span></div><div class="line" id="185139"><span class="nick" style="color:#8dd3c7"><a href="#185139" label="[18:51:39]">&lt;stikonas&gt;</a></span><span class="message">but /after is even earlier, isn't it?</span></div><div class="line" id="185146"><span class="nick" style="color:#8dd3c7"><a href="#185146" label="[18:51:46]">&lt;stikonas&gt;</a></span><span class="message">at around M2-PLanet</span></div><div class="line" id="185200"><span class="nick" style="color:#8dd3c7"><a href="#185200" label="[18:52:00]">&lt;stikonas&gt;</a></span><span class="message">maybe once we have M2-libc</span></div><div class="line" id="185227"><span class="nick" style="color:#8dd3c7"><a href="#185227" label="[18:52:27]">&lt;stikonas&gt;</a></span><span class="message">gforce_d11977: worth checking the contents of pipesize.h</span></div><div class="line" id="185237"><span class="nick" style="color:#8dd3c7"><a href="#185237" label="[18:52:37]">&lt;stikonas&gt;</a></span><span class="message">we saw some differences there</span></div><div class="line" id="185247"><span class="nick" style="color:#8dd3c7"><a href="#185247" label="[18:52:47]">&lt;stikonas&gt;</a></span><span class="message">but I think we've got a workaround now</span></div><div class="line" id="185314"><span class="nick" style="color:#234e69"><a href="#185314" label="[18:53:14]">&lt;bauen1&gt;</a></span><span class="message">oh right</span></div><div class="line" id="185343"><span class="nick" style="color:#234e69"><a href="#185343" label="[18:53:43]">&lt;bauen1&gt;</a></span><span class="message">i mean you could write a single purpose utility to do the chroot syscall in assembly even</span></div><div class="line" id="185352"><span class="nick" style="color:#8dd3c7"><a href="#185352" label="[18:53:52]">&lt;stikonas&gt;</a></span><span class="message">well, that's true</span></div><div class="line" id="185511"><span class="nick" style="color:#234e69"><a href="#185511" label="[18:55:11]">&lt;bauen1&gt;</a></span><span class="message">meh, this is one of those things where no available answer is the best :/ i hate those</span></div><div class="line" id="200325"><span class="nick" style="color:#6c3d55"><a href="#200325" label="[20:03:25]">&lt;gforce_d11977&gt;</a></span><span class="message">stikonas: only content of '/after/bash-5.1/build/bash-5.1/builtins/pipesize.h' beside comments is: #define PIPESIZE 65536</span></div><div class="line" id="200841"><span class="nick" style="color:#8dd3c7"><a href="#200841" label="[20:08:41]">&lt;stikonas&gt;</a></span><span class="message">yeah, that's right</span></div><div class="line" id="200851"><span class="nick" style="color:#8dd3c7"><a href="#200851" label="[20:08:51]">&lt;stikonas&gt;</a></span><span class="message">gforce_d11977: so something else is different for you...</span></div><div class="line" id="200911"><span class="nick" style="color:#8dd3c7"><a href="#200911" label="[20:09:11]">&lt;stikonas&gt;</a></span><span class="message">well, you can try to compare two binaries</span></div><div class="line" id="200915"><span class="nick" style="color:#8dd3c7"><a href="#200915" label="[20:09:15]">&lt;stikonas&gt;</a></span><span class="message">and see what's different</span></div><div class="line" id="201113"><span class="nick" style="color:#6c3d55"><a href="#201113" label="[20:11:13]">&lt;gforce_d11977&gt;</a></span><span class="message">thats bad. i will try another run. the kernel symbol which is needed for automake seems to be 'CONFIG_FILE_LOCKING=y'</span></div><div class="line" id="201130"><span class="nick" style="color:#6c3d55"><a href="#201130" label="[20:11:30]">&lt;gforce_d11977&gt;</a></span><span class="message">(which adds 11k to kernel size 8-)))</span></div><div class="line" id="201203"><span class="nick" style="color:#6c3d55"><a href="#201203" label="[20:12:03]">&lt;gforce_d11977&gt;</a></span><span class="message">stikonas: in your case i guess it says #define PIPESIZE 512 ?</span></div><div class="line" id="201224"><span class="nick" style="color:#8dd3c7"><a href="#201224" label="[20:12:24]">&lt;stikonas&gt;</a></span><span class="message">gforce_d11977: no, pipesize 65536 is fine</span></div><div class="line" id="201258"><span class="nick" style="color:#6c3d55"><a href="#201258" label="[20:12:58]">&lt;gforce_d11977&gt;</a></span><span class="message">but the binary still differs, ok understand - so there is another variation we are not ware of at the moment</span></div><div class="line" id="201300"><span class="nick" style="color:#8dd3c7"><a href="#201300" label="[20:13:00]">&lt;stikonas&gt;</a></span><span class="message">well, anything to do with automake will be in non-bootstrap kernel</span></div><div class="line" id="201309"><span class="nick" style="color:#8dd3c7"><a href="#201309" label="[20:13:09]">&lt;stikonas&gt;</a></span><span class="message">gforce_d11977: it might be kernel related</span></div><div class="line" id="201326"><span class="nick" style="color:#8dd3c7"><a href="#201326" label="[20:13:26]">&lt;stikonas&gt;</a></span><span class="message">but you can try to do diff betweeen two binaries and inspect it</span></div><div class="line" id="201343"><span class="nick" style="color:#8dd3c7"><a href="#201343" label="[20:13:43]">&lt;stikonas&gt;</a></span><span class="message">that's how we initially spotted that pipesize.h issue (which since then was fixed)</span></div><div class="line" id="201344"><span class="nick" style="color:#6c3d55"><a href="#201344" label="[20:13:44]">&lt;gforce_d11977&gt;</a></span><span class="message">ok, i will store the binary somehow</span></div><div class="line" id="201600"><span class="nick" style="color:#8dd3c7"><a href="#201600" label="[20:16:00]">&lt;stikonas&gt;</a></span><span class="message">try tmux and store-buffer</span></div><div class="line" id="201610"><span class="nick" style="color:#8dd3c7"><a href="#201610" label="[20:16:10]">&lt;stikonas&gt;</a></span><span class="message">you might need to inject busybox inside</span></div><div class="line" id="201659"><span class="nick" style="color:#8dd3c7"><a href="#201659" label="[20:16:59]">&lt;stikonas&gt;</a></span><span class="message">to encode binary into text</span></div><div class="line" id="203358"><span class="nick" style="color:#6c3d55"><a href="#203358" label="[20:33:58]">&lt;gforce_d11977&gt;</a></span><span class="message">stikonas: here is my bash5.1 binary: <a rel="nofollow" href="http://intercity-vpn.de/bash5.1-sha256-41dd3dfa62efcd8a71392e09747aab93660b0549f39cb4e673547db47a02bc27.bin">http://intercity-vpn.de/bash5.1-sha256-41dd3dfa62efcd8a71392e09747aab93660b0549f39cb4e673547db47a02bc27.bin</a> </span></div><div class="line" id="203429"><span class="nick" style="color:#6c3d55"><a href="#203429" label="[20:34:29]">&lt;gforce_d11977&gt;</a></span><span class="message">base64 and sed was my friend 8-)</span></div><div class="line" id="203607"><span class="nick" style="color:#8dd3c7"><a href="#203607" label="[20:36:07]">&lt;stikonas&gt;</a></span><span class="message">hmm, you bash binary is also smaller</span></div><div class="line" id="203621"><span class="nick" style="color:#8dd3c7"><a href="#203621" label="[20:36:21]">&lt;stikonas&gt;</a></span><span class="message">(last time we saw hash mismatch with bash, binaries had identical size)</span></div><div class="line" id="203848"><span class="nick" style="color:#8dd3c7"><a href="#203848" label="[20:38:48]">&lt;stikonas&gt;</a></span><span class="message">gforce_d11977: hmm, they seem to be completely different binaries</span></div><div class="line" id="203858"><span class="nick" style="color:#6c3d55"><a href="#203858" label="[20:38:58]">&lt;gforce_d11977&gt;</a></span><span class="message">at least the binary works...for reference, this is the used kernel config: <a rel="nofollow" href="http://intercity-vpn.de/bash5.1-sha256-41dd3dfa62efcd8a71392e09747aab93660b0549f39cb4e673547db47a02bc27-kernel-config.txt">http://intercity-vpn.de/bash5.1-sha256-41dd3dfa62efcd8a71392e09747aab93660b0549f39cb4e673547db47a02bc27-kernel-config.txt</a> </span></div><div class="line" id="203937"><span class="nick" style="color:#8dd3c7"><a href="#203937" label="[20:39:37]">&lt;stikonas&gt;</a></span><span class="message">we have --build=i386-unknown-linux-gnu</span></div><div class="line" id="203943"><span class="nick" style="color:#8dd3c7"><a href="#203943" label="[20:39:43]">&lt;stikonas&gt;</a></span><span class="message">maybe we also need to add --target and --host</span></div><div class="line" id="203946"><span class="nick" style="color:#8dd3c7"><a href="#203946" label="[20:39:46]">&lt;stikonas&gt;</a></span><span class="message">is that 32 bit kernel?</span></div><div class="line" id="203953"><span class="nick" style="color:#6c3d55"><a href="#203953" label="[20:39:53]">&lt;gforce_d11977&gt;</a></span><span class="message">yes, 32bit ofcourse</span></div><div class="line" id="204012"><span class="nick" style="color:#8dd3c7"><a href="#204012" label="[20:40:12]">&lt;stikonas&gt;</a></span><span class="message">ok, can you try to add --target and --host options to configure</span></div><div class="line" id="204016"><span class="nick" style="color:#8dd3c7"><a href="#204016" label="[20:40:16]">&lt;stikonas&gt;</a></span><span class="message">rebuild and tell me the hash</span></div><div class="line" id="204019"><span class="nick" style="color:#6c3d55"><a href="#204019" label="[20:40:19]">&lt;gforce_d11977&gt;</a></span><span class="message">ok</span></div><div class="line" id="204024"><span class="nick" style="color:#8dd3c7"><a href="#204024" label="[20:40:24]">&lt;stikonas&gt;</a></span><span class="message">I'll try here with 64 bit kernel</span></div><div class="line" id="204136"><span class="nick" style="color:#8dd3c7"><a href="#204136" label="[20:41:36]">&lt;stikonas&gt;</a></span><span class="message">just add</span></div><div class="line" id="204138"><span class="nick" style="color:#8dd3c7"><a href="#204138" label="[20:41:38]">&lt;stikonas&gt;</a></span><span class="message">+        --target=i386-unknown-linux-gnu \</span></div><div class="line" id="204139"><span class="nick" style="color:#8dd3c7"><a href="#204139" label="[20:41:39]">&lt;stikonas&gt;</a></span><span class="message">+        --host=i386-unknown-linux-gnu \</span></div><div class="line" id="204142"><span class="nick" style="color:#8dd3c7"><a href="#204142" label="[20:41:42]">&lt;stikonas&gt;</a></span><span class="message">after --build= option</span></div><div class="line" id="204150"><span class="nick" style="color:#8dd3c7"><a href="#204150" label="[20:41:50]">&lt;stikonas&gt;</a></span><span class="message">well, without pluses, those are from diff probram</span></div><div class="line" id="204818"><span class="nick" style="color:#6c3d55"><a href="#204818" label="[20:48:18]">&lt;gforce_d11977&gt;</a></span><span class="message">really? i added to /after/bash-5.1/bash-5.1.sh -&gt; --host=i386 and --target=i386-unknown-linux to the configure step</span></div><div class="line" id="204853"><span class="nick" style="color:#8dd3c7"><a href="#204853" label="[20:48:53]">&lt;stikonas&gt;</a></span><span class="message">what is really?</span></div><div class="line" id="204856"><span class="nick" style="color:#8dd3c7"><a href="#204856" label="[20:48:56]">&lt;stikonas&gt;</a></span><span class="message">yeah, those are right</span></div><div class="line" id="204901"><span class="nick" style="color:#6c3d55"><a href="#204901" label="[20:49:01]">&lt;gforce_d11977&gt;</a></span><span class="message">and the has is now: d654ccfee843598297b11eb97c6ef30822c276e6584abc3db4a149cec8d94724</span></div><div class="line" id="204911"><span class="nick" style="color:#8dd3c7"><a href="#204911" label="[20:49:11]">&lt;stikonas&gt;</a></span><span class="message">oh, maybe build both with i386-unknown-linux-gnu</span></div><div class="line" id="204914"><span class="nick" style="color:#8dd3c7"><a href="#204914" label="[20:49:14]">&lt;stikonas&gt;</a></span><span class="message">not some variation</span></div><div class="line" id="204916"><span class="nick" style="color:#6c3d55"><a href="#204916" label="[20:49:16]">&lt;gforce_d11977&gt;</a></span><span class="message">and the size is now: 2624087</span></div><div class="line" id="204916"><span class="nick" style="color:#8dd3c7"><a href="#204916" label="[20:49:16]">&lt;stikonas&gt;</a></span><span class="message">it might affect hash</span></div><div class="line" id="204925"><span class="nick" style="color:#8dd3c7"><a href="#204925" label="[20:49:25]">&lt;stikonas&gt;</a></span><span class="message">well, I'm rebuilding here too</span></div><div class="line" id="204941"><span class="nick" style="color:#8dd3c7"><a href="#204941" label="[20:49:41]">&lt;stikonas&gt;</a></span><span class="message">maybe I'll push to a branch</span></div><div class="line" id="204948"><span class="nick" style="color:#8dd3c7"><a href="#204948" label="[20:49:48]">&lt;stikonas&gt;</a></span><span class="message">to make sure we are testing the same thing</span></div><div class="line" id="205009"><span class="nick" style="color:#6c3d55"><a href="#205009" label="[20:50:09]">&lt;gforce_d11977&gt;</a></span><span class="message">and pipesize.h has '#define PIPESIZE 65536'</span></div><div class="line" id="205041"><span class="nick" style="color:#8dd3c7"><a href="#205041" label="[20:50:41]">&lt;stikonas&gt;</a></span><span class="message">I'm now building this branch <a rel="nofollow" href="https://github.com/stikonas/live-bootstrap/tree/bash">https://github.com/stikonas/live-bootstrap/tree/bash</a> </span></div><div class="line" id="205047"><span class="nick" style="color:#8dd3c7"><a href="#205047" label="[20:50:47]">&lt;stikonas&gt;</a></span><span class="message">not sure about the hashes yet...</span></div><div class="line" id="205051"><span class="nick" style="color:#8dd3c7"><a href="#205051" label="[20:50:51]">&lt;stikonas&gt;</a></span><span class="message">they might be different</span></div><div class="line" id="205133"><span class="nick" style="color:#6c3d55"><a href="#205133" label="[20:51:33]">&lt;gforce_d11977&gt;</a></span><span class="message">ok...lets new, for now a throw aways my build (i have all configs to eventually reproduce) and try to limit the needed config-symbols</span></div><div class="line" id="205228"><span class="nick" style="color:#6c3d55"><a href="#205228" label="[20:52:28]">&lt;gforce_d11977&gt;</a></span><span class="message">can you please document, that we need the symbol: CONFIG_UID16=y for the dirglobs (please find a better name)</span></div><div class="line" id="205311"><span class="nick" style="color:#6c3d55"><a href="#205311" label="[20:53:11]">&lt;gforce_d11977&gt;</a></span><span class="message">and that we need the symbol: CONFIG_FILE_LOCKING=y for automake-1.8.x</span></div><div class="line" id="205500"><span class="nick" style="color:#8dd3c7"><a href="#205500" label="[20:55:00]">&lt;stikonas&gt;</a></span><span class="message">gforce_d11977: well, maybe you can document?</span></div><div class="line" id="205508"><span class="nick" style="color:#8dd3c7"><a href="#205508" label="[20:55:08]">&lt;stikonas&gt;</a></span><span class="message">you were doing those tests with small kernel</span></div><div class="line" id="205531"><span class="nick" style="color:#8dd3c7"><a href="#205531" label="[20:55:31]">&lt;stikonas&gt;</a></span><span class="message">although, automake is built so late, I think requireing many symbols is not that big problem anyway</span></div><div class="line" id="205537"><span class="nick" style="color:#8dd3c7"><a href="#205537" label="[20:55:37]">&lt;stikonas&gt;</a></span><span class="message">although, it's still good to know</span></div><div class="line" id="205801"><span class="nick" style="color:#234e69"><a href="#205801" label="[20:58:01]">&lt;bauen1&gt;</a></span><span class="message">so using DESTDIR will expose various occasions where we don't create the directories before trying to copy stuff into them (i've just hit that with automake1.6.3 stage1 / stage2)</span></div><div class="line" id="210253"><span class="nick" style="color:#6c3d55"><a href="#210253" label="[21:02:53]">&lt;gforce_d11977&gt;</a></span><span class="message">stikonas: my kernel is not really small, it's just a 'make tinyconfig' where still a lot of stuff is in, but you are right, a 'make defconfig' works. the point is: if we want to have our own kernel for bootstrapping (which must not be linux), than this is good to know</span></div><div class="line" id="210403"><span class="nick" style="color:#6c3d55"><a href="#210403" label="[21:04:03]">&lt;gforce_d11977&gt;</a></span><span class="message">also: i had to try 55 invocations of bootstrap to find this one needed symbol 8-((((</span></div><div class="line" id="210514"><span class="nick" style="color:#234e69"><a href="#210514" label="[21:05:14]">&lt;bauen1&gt;</a></span><span class="message">gforce_d11977: if it makes you feel better, soon it should be possible to skip some steps in the bootstrap easily, _soon_ (tm)</span></div><div class="line" id="210530"><span class="nick" style="color:#6c3d55"><a href="#210530" label="[21:05:30]">&lt;gforce_d11977&gt;</a></span><span class="message">8-)))</span></div><div class="line" id="210546"><span class="nick" style="color:#6c3d55"><a href="#210546" label="[21:05:46]">&lt;gforce_d11977&gt;</a></span><span class="message">it makes me feel better!</span></div><div class="line" id="210926"><span class="nick" style="color:#234e69"><a href="#210926" label="[21:09:26]">&lt;bauen1&gt;</a></span><span class="message">at least the it will be easier to skip the steps after perl 5.6.2, everything before is a bit tricky</span></div><div class="line" id="212658"><span class="nick" style="color:#6b8072"><a href="#212658" label="[21:26:58]">&lt;roptat&gt;</a></span><span class="message">in the end, I went with the second solution, where I use the AST from scalameta because it's much easier to implement, while following the structure from the scala parser to create the AST. I think it's best because it's easier, and I don't loose information: scala is simply doing a lot of work in the parser that I probably will do much later</span></div><div class="line" id="212717"><span class="nick" style="color:#6b8072"><a href="#212717" label="[21:27:17]">&lt;roptat&gt;</a></span><span class="message">I can parse simple literals now ^^</span></div><div class="line" id="212810"><span class="nick" style="color:#6b8072"><a href="#212810" label="[21:28:10]">&lt;roptat&gt;</a></span><span class="message">working on expressions, which I need to really finish literals (because interpolated strings are considered to be literals and they can contain arbitrary expressions)</span></div><div class="line" id="215458"><span class="nick" style="color:#8dd3c7"><a href="#215458" label="[21:54:58]">&lt;stikonas&gt;</a></span><span class="message">nice work on scala!</span></div><div class="line" id="215525"><span class="nick" style="color:#8dd3c7"><a href="#215525" label="[21:55:25]">&lt;stikonas&gt;</a></span><span class="message">gforce_d11977: hmm, no changes here in bash checksum with --host and --target options</span></div><div class="line" id="215609"><span class="nick" style="color:#8dd3c7"><a href="#215609" label="[21:56:09]">&lt;stikonas&gt;</a></span><span class="message">bauen1: oh, that might be true regarding DESTDIR...</span></div><div class="line" id="215643"><span class="nick" style="color:#8dd3c7"><a href="#215643" label="[21:56:43]">&lt;stikonas&gt;</a></span><span class="message">well, I guess we'll fix them eventually</span></div><div class="line" id="220333"><span class="nick" style="color:#6c3d55"><a href="#220333" label="[22:03:33]">&lt;gforce_d11977&gt;</a></span><span class="message">fossy: stikonas: if i can test/help something, poke me: i will prepare a pullrequest during easter regarding the &quot;minikernel&quot; thing, so that is really is a 386 machine</span></div><div class="line" id="220451"><span class="nick" style="color:#8dd3c7"><a href="#220451" label="[22:04:51]">&lt;stikonas&gt;</a></span><span class="message">well, at some point we also want to cross-compile gcc for x86_64</span></div><div class="line" id="220511"><span class="nick" style="color:#8dd3c7"><a href="#220511" label="[22:05:11]">&lt;stikonas&gt;</a></span><span class="message">and now that we have gcc, this might be sooner rather than later...</span></div><div class="line" id="220535"><span class="nick" style="color:#8dd3c7"><a href="#220535" label="[22:05:35]">&lt;stikonas&gt;</a></span><span class="message">although, I'm not sure what fossy's plans are towards x86_64 right now</span></div><div class="line" id="220903"><span class="nick" style="color:#234e69"><a href="#220903" label="[22:09:03]">&lt;bauen1&gt;</a></span><span class="message">stikonas: yep, as i start building packages with DESTDIR i'll iron out the bugs</span></div><div class="line" id="221012"><span class="nick" style="color:#8dd3c7"><a href="#221012" label="[22:10:12]">&lt;stikonas&gt;</a></span><span class="message">well, automake'ed packages should be fine</span></div><div class="line" id="221032"><span class="nick" style="color:#8dd3c7"><a href="#221032" label="[22:10:32]">&lt;stikonas&gt;</a></span><span class="message">it's the stuff before that (which automake 1.6.3 stage1/stage2 are examples of</span></div><div class="line" id="221220"><span class="nick" style="color:#6c3d55"><a href="#221220" label="[22:12:20]">&lt;gforce_d11977&gt;</a></span><span class="message">stikonas: ofcourse we want to cross compile all architectures and check if the sha256sums are matching with native compiling</span></div><div class="line" id="221245"><span class="nick" style="color:#8dd3c7"><a href="#221245" label="[22:12:45]">&lt;stikonas&gt;</a></span><span class="message">well, x86_64 is more than just cross-compile</span></div><div class="line" id="221249"><span class="nick" style="color:#6c3d55"><a href="#221249" label="[22:12:49]">&lt;gforce_d11977&gt;</a></span><span class="message">but you are right, first step is to make x86_64 working too</span></div><div class="line" id="221312"><span class="nick" style="color:#8dd3c7"><a href="#221312" label="[22:13:12]">&lt;stikonas&gt;</a></span><span class="message">x86_64 bootstrap is likely to be via i386 at the beginning</span></div><div class="line" id="221317"><span class="nick" style="color:#8dd3c7"><a href="#221317" label="[22:13:17]">&lt;stikonas&gt;</a></span><span class="message">just like in guix</span></div><div class="line" id="221328"><span class="nick" style="color:#8dd3c7"><a href="#221328" label="[22:13:28]">&lt;stikonas&gt;</a></span><span class="message">(because i386 code runs natively on those CPUs)</span></div><div class="line" id="221343"><span class="nick" style="color:#6c3d55"><a href="#221343" label="[22:13:43]">&lt;gforce_d11977&gt;</a></span><span class="message">a really? because the is no &quot;native&quot; bootstrap implemented yet?</span></div><div class="line" id="221352"><span class="nick" style="color:#6c3d55"><a href="#221352" label="[22:13:52]">&lt;gforce_d11977&gt;</a></span><span class="message">&quot;there is no&quot;</span></div><div class="line" id="221411"><span class="nick" style="color:#8dd3c7"><a href="#221411" label="[22:14:11]">&lt;stikonas&gt;</a></span><span class="message">no, I think it would  work</span></div><div class="line" id="221434"><span class="nick" style="color:#8dd3c7"><a href="#221434" label="[22:14:34]">&lt;stikonas&gt;</a></span><span class="message">but we don't really have to do a separate chain for x86_64</span></div><div class="line" id="221535"><span class="nick" style="color:#8dd3c7"><a href="#221535" label="[22:15:35]">&lt;stikonas&gt;</a></span><span class="message">writing full bootstrap chain is much more work than just letting 32 -bit code run on 64-bit cpu</span></div><div class="line" id="221702"><span class="nick" style="color:#8dd3c7"><a href="#221702" label="[22:17:02]">&lt;stikonas&gt;</a></span><span class="message">especially before autotools are available, there would be a lot of manual tweaking of makefiles</span></div><div class="line" id="221719"><span class="nick" style="color:#8dd3c7"><a href="#221719" label="[22:17:19]">&lt;stikonas&gt;</a></span><span class="message">right now all the makefiles are x86 only</span></div><div class="line" id="221742"><span class="nick" style="color:#8dd3c7"><a href="#221742" label="[22:17:42]">&lt;stikonas&gt;</a></span><span class="message">some of them I guess would work on other arches, but some of them hardcode i386 stuff</span></div><div class="line" id="221839"><span class="nick" style="color:#6c3d55"><a href="#221839" label="[22:18:39]">&lt;gforce_d11977&gt;</a></span><span class="message">hmmm....is this really so much work? ok, yes - there is a reason that autotools exists 8-)))</span></div><div class="line" id="221939"><span class="nick" style="color:#8dd3c7"><a href="#221939" label="[22:19:39]">&lt;stikonas&gt;</a></span><span class="message">well, it tooks us some time go get to autotools in live-bootstrap</span></div><div class="line" id="221944"><span class="nick" style="color:#8dd3c7"><a href="#221944" label="[22:19:44]">&lt;stikonas&gt;</a></span><span class="message">2nd time would be quicker of course...</span></div><div class="line" id="221948"><span class="nick" style="color:#8dd3c7"><a href="#221948" label="[22:19:48]">&lt;stikonas&gt;</a></span><span class="message">but still</span></div><div class="line" id="223326"><span class="nick">***</span><span class="message notice">Thunderbi is now known as nckx</span></div><div class="line" id="223708"><span class="nick" style="color:#234e69"><a href="#223708" label="[22:37:08]">&lt;bauen1&gt;</a></span><span class="message">gnu stow has a `require 5.006_001;` line, does that mean it won't work with anything sooner than perl 5.6.1 ?</span></div><div class="line" id="230132"><span class="nick" style="color:#8dd3c7"><a href="#230132" label="[23:01:32]">&lt;stikonas&gt;</a></span><span class="message">bauen1: indeed</span></div><div class="line" id="230217"><span class="nick" style="color:#8dd3c7"><a href="#230217" label="[23:02:17]">&lt;stikonas&gt;</a></span><span class="message">bauen1: that doesn't matter too much for us</span></div><div class="line" id="230224"><span class="nick" style="color:#8dd3c7"><a href="#230224" label="[23:02:24]">&lt;stikonas&gt;</a></span><span class="message">all perl versions are built subsequently</span></div><div class="line" id="230233"><span class="nick" style="color:#8dd3c7"><a href="#230233" label="[23:02:33]">&lt;stikonas&gt;</a></span><span class="message">and basically replace each other</span></div><div class="line" id="230258"><span class="nick" style="color:#8dd3c7"><a href="#230258" label="[23:02:58]">&lt;stikonas&gt;</a></span><span class="message">well, maybe the only difference is that perl 5.6.1 will not yet be in a package</span></div><div class="line" id="230347"><span class="nick" style="color:#8dd3c7"><a href="#230347" label="[23:03:47]">&lt;stikonas&gt;</a></span><span class="message">although, some of the things that we should condider building might need newer perl anyway</span></div><div class="line" id="230357"><span class="nick" style="color:#8dd3c7"><a href="#230357" label="[23:03:57]">&lt;stikonas&gt;</a></span><span class="message">so maybe it makes sense to try to build perl 5.8....</span></div><div class="line" id="231943"><span class="nick" style="color:#8dd3c7"><a href="#231943" label="[23:19:43]">&lt;stikonas&gt;</a></span><span class="message">fossy: I'm now looking at tar (and I guess same is true for some other new GNU software). When gnulib is used, Makefile.am is basically generated by gnulib-tool <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/gnulib.git/tree/gnulib-tool">https://git.savannah.gnu.org/cgit/gnulib.git/tree/gnulib-tool</a> </span></div><div class="line" id="231950"><span class="nick" style="color:#8dd3c7"><a href="#231950" label="[23:19:50]">&lt;stikonas&gt;</a></span><span class="message">basically when importing gnulib into repo...</span></div><div class="line" id="231957"><span class="nick" style="color:#8dd3c7"><a href="#231957" label="[23:19:57]">&lt;stikonas&gt;</a></span><span class="message">I'm not sure how we want to handle those...</span></div><div class="line" id="232459"><span class="nick" style="color:#234e69"><a href="#232459" label="[23:24:59]">&lt;bauen1&gt;</a></span><span class="message">stikonas: if necessary i'll just use a bunch of `ln` calls to emulate what stow is doing until we have it, currently i've adapted the first stages of automake to use stow as a test <a rel="nofollow" href="https://github.com/bauen1/live-bootstrap/tree/add-gnu-stow">https://github.com/bauen1/live-bootstrap/tree/add-gnu-stow</a> </span></div><div class="line" id="232534"><span class="nick" style="color:#234e69"><a href="#232534" label="[23:25:34]">&lt;bauen1&gt;</a></span><span class="message">i'll find out if that works as intented in ~1h ...</span></div><div class="line" id="232606"><span class="nick" style="color:#8dd3c7"><a href="#232606" label="[23:26:06]">&lt;stikonas&gt;</a></span><span class="message">ok, that should work</span></div><div class="line" id="232748"><span class="nick" style="color:#234e69"><a href="#232748" label="[23:27:48]">&lt;bauen1&gt;</a></span><span class="message">in theory stow can be used to &quot;exchange&quot; the running perl version by invoking it at once to unlink the old one and link the new one, but i think so far the perl executable path is hard coded to 5.6.2</span></div><div class="line" id="232916"><span class="nick" style="color:#bc80bd"><a href="#232916" label="[23:29:16]">&lt;OriansJ`&gt;</a></span><span class="message">janneke: it is nice to see the risc-v work being started for mescc-tools by someone other than me.</span></div><div class="line" id="233006"><span class="nick" style="color:#8dd3c7"><a href="#233006" label="[23:30:06]">&lt;stikonas&gt;</a></span><span class="message">bauen1: well, I think if we eventually get newer perl, there is no point of keeping older perl</span></div><div class="line" id="233015"><span class="nick" style="color:#8dd3c7"><a href="#233015" label="[23:30:15]">&lt;stikonas&gt;</a></span><span class="message">everything should just work with 5.8</span></div><div class="line" id="233029"><span class="nick" style="color:#8dd3c7"><a href="#233029" label="[23:30:29]">&lt;stikonas&gt;</a></span><span class="message">autotools in fact require 5.6 that we have but strongly recomment 5.8</span></div><div class="line" id="233034"><span class="nick" style="color:#8dd3c7"><a href="#233034" label="[23:30:34]">&lt;stikonas&gt;</a></span><span class="message">*recommend</span></div><div class="line" id="233044"><span class="nick" style="color:#bc80bd"><a href="#233044" label="[23:30:44]">&lt;OriansJ`&gt;</a></span><span class="message">but there is no way for hex2 to support non-byte aligned offsets for immediates without significant increase in complexity in hex2. to a point at which just having a standard Linker and Assembler would be a better investment of time.</span></div><div class="line" id="233206"><span class="nick" style="color:#bc80bd"><a href="#233206" label="[23:32:06]">&lt;OriansJ`&gt;</a></span><span class="message">Now in M3 it'll certainly be easy but minor waste of memory for implemention simplicity in bootstrapping seems like a far better trade-off.</span></div><div class="line" id="233304"><span class="nick" style="color:#8dd3c7"><a href="#233304" label="[23:33:04]">&lt;stikonas&gt;</a></span><span class="message">indeed, memory usage by first steps is very small anyway</span></div><div class="line" id="233319"><span class="nick" style="color:#8dd3c7"><a href="#233319" label="[23:33:19]">&lt;stikonas&gt;</a></span><span class="message">mes later needs much more</span></div><div class="line" id="233344"><span class="nick" style="color:#234e69"><a href="#233344" label="[23:33:44]">&lt;bauen1&gt;</a></span><span class="message">mes (or rather mescc) is also horribly slow</span></div><div class="line" id="233414"><span class="nick" style="color:#bc80bd"><a href="#233414" label="[23:34:14]">&lt;OriansJ`&gt;</a></span><span class="message">bauen1: entirely my fault for making M2-Planet non-optimizing</span></div><div class="line" id="233438"><span class="nick" style="color:#8dd3c7"><a href="#233438" label="[23:34:38]">&lt;stikonas&gt;</a></span><span class="message">I'm not sure if mescc built mes is any faster...</span></div><div class="line" id="233452"><span class="nick" style="color:#8dd3c7"><a href="#233452" label="[23:34:52]">&lt;stikonas&gt;</a></span><span class="message">building tcc takes 8 minutes or so</span></div><div class="line" id="233457"><span class="nick" style="color:#bc80bd"><a href="#233457" label="[23:34:57]">&lt;OriansJ`&gt;</a></span><span class="message">stikonas: easy to prove both ways</span></div><div class="line" id="233513"><span class="nick" style="color:#8dd3c7"><a href="#233513" label="[23:35:13]">&lt;stikonas&gt;</a></span><span class="message">well, yeah, running 2nd pass of mes build should prove</span></div><div class="line" id="233555"><span class="nick" style="color:#bc80bd"><a href="#233555" label="[23:35:55]">&lt;OriansJ`&gt;</a></span><span class="message">stikonas: stupid question but is M2-Planet built mes.c able to run MesCC well enough to build TCC directly?</span></div><div class="line" id="233642"><span class="nick" style="color:#8dd3c7"><a href="#233642" label="[23:36:42]">&lt;stikonas&gt;</a></span><span class="message">OriansJ`: I suspect the problem is libc</span></div><div class="line" id="233716"><span class="nick" style="color:#8dd3c7"><a href="#233716" label="[23:37:16]">&lt;stikonas&gt;</a></span><span class="message">M2-Planet built mes uses a tiny libc, not full mescclibc</span></div><div class="line" id="233731"><span class="nick" style="color:#8dd3c7"><a href="#233731" label="[23:37:31]">&lt;stikonas&gt;</a></span><span class="message">in fact, I think tcc needs even more functions than mes</span></div><div class="line" id="233754"><span class="nick" style="color:#8dd3c7"><a href="#233754" label="[23:37:54]">&lt;stikonas&gt;</a></span><span class="message">when we build meslibc, there are two parts, one is built into libc.a and another into libc+tcc.a</span></div><div class="line" id="233805"><span class="nick" style="color:#8dd3c7"><a href="#233805" label="[23:38:05]">&lt;stikonas&gt;</a></span><span class="message">I guess the latter are extra functions needed by tcc</span></div><div class="line" id="233835"><span class="nick" style="color:#8dd3c7"><a href="#233835" label="[23:38:35]">&lt;stikonas&gt;</a></span><span class="message">anyway, building libc takes probably even more time than building mes</span></div><div class="line" id="233847"><span class="nick" style="color:#bc80bd"><a href="#233847" label="[23:38:47]">&lt;OriansJ`&gt;</a></span><span class="message">stikonas: but M2-Planet built binaries don't care about libc; the libc behavior is entirely MesCC not the binary built by M2-Planet</span></div><div class="line" id="233912"><span class="nick" style="color:#8dd3c7"><a href="#233912" label="[23:39:12]">&lt;stikonas&gt;</a></span><span class="message">hmm, that might be true...</span></div><div class="line" id="233927"><span class="nick" style="color:#8dd3c7"><a href="#233927" label="[23:39:27]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="233935"><span class="nick" style="color:#bc80bd"><a href="#233935" label="[23:39:35]">&lt;OriansJ`&gt;</a></span><span class="message">so only if the binary M2-Planet makes lacks primitives that MesCC self-hosting would include would it be any different</span></div><div class="line" id="234039"><span class="nick" style="color:#8dd3c7"><a href="#234039" label="[23:40:39]">&lt;stikonas&gt;</a></span><span class="message">well, one can try to build it directly</span></div><div class="line" id="234044"><span class="nick" style="color:#8dd3c7"><a href="#234044" label="[23:40:44]">&lt;stikonas&gt;</a></span><span class="message">I guess nobody have tried</span></div><div class="line" id="234112"><span class="nick" style="color:#bc80bd"><a href="#234112" label="[23:41:12]">&lt;OriansJ`&gt;</a></span><span class="message">M2-Planet binaries need nothing outside of a kernel supporting syscalls.</span></div><div class="line" id="234244"><span class="nick" style="color:#bc80bd"><a href="#234244" label="[23:42:44]">&lt;OriansJ`&gt;</a></span><span class="message">(And if the functions in M2libc are done talking to hardware directly not even that)</span></div><div class="line" id="234414"><span class="nick" style="color:#8dd3c7"><a href="#234414" label="[23:44:14]">&lt;stikonas&gt;</a></span><span class="message">I guess one can try  to comment out stuff after <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysa/mes/mes.kaem#L24">https://github.com/fosslinux/live-bootstrap/blob/master/sysa/mes/mes.kaem#L24</a> </span></div><div class="line" id="234452"><span class="nick" style="color:#8dd3c7"><a href="#234452" label="[23:44:52]">&lt;stikonas&gt;</a></span><span class="message">if that works, early bootstrap might be significantly quicker...</span></div><div class="line" id="235014"><span class="nick" style="color:#8dd3c7"><a href="#235014" label="[23:50:14]">&lt;stikonas&gt;</a></span><span class="message">OriansJ`: building now, we'll know in a few minutes</span></div><div class="line" id="235036"><span class="nick" style="color:#8dd3c7"><a href="#235036" label="[23:50:36]">&lt;stikonas&gt;</a></span><span class="message">or maybe more if mes built with M2-Planet is slower</span></div><div class="line" id="235038"><span class="nick" style="color:#bc80bd"><a href="#235038" label="[23:50:38]">&lt;OriansJ`&gt;</a></span><span class="message">stikonas: thank you for checking for me ^_^</span></div><div class="line" id="235128"><span class="nick" style="color:#8dd3c7"><a href="#235128" label="[23:51:28]">&lt;stikonas&gt;</a></span><span class="message">well, it's not a hard check... Just comment out most of the file</span></div><div class="line" id="235147"><span class="nick" style="color:#8dd3c7"><a href="#235147" label="[23:51:47]">&lt;stikonas&gt;</a></span><span class="message">so far no errors, 2 minutes into building tcc</span></div><div class="line" id="235151"><span class="nick" style="color:#bc80bd"><a href="#235151" label="[23:51:51]">&lt;OriansJ`&gt;</a></span><span class="message">I'm currently trying to find a powerpc32 linux distro that works with qemu for mescc-tools development</span></div><div class="line" id="235153"><span class="nick" style="color:#8dd3c7"><a href="#235153" label="[23:51:53]">&lt;stikonas&gt;</a></span><span class="message">so it might just work</span></div><div class="line" id="235325"><span class="nick" style="color:#bc80bd"><a href="#235325" label="[23:53:25]">&lt;OriansJ`&gt;</a></span><span class="message">(just slower than MesCC built mes.c probably as no optimizations done)</span></div><div class="line" id="235616"><span class="nick" style="color:#8dd3c7"><a href="#235616" label="[23:56:16]">&lt;stikonas&gt;</a></span><span class="message">it seems to be slower enough that I can notice, but not terribly slow</span></div><div class="line" id="235928"><span class="nick" style="color:#8dd3c7"><a href="#235928" label="[23:59:28]">&lt;stikonas&gt;</a></span><span class="message">it as about 30% slower but now I got loads of errors...</span></div><br /></div></body></html>