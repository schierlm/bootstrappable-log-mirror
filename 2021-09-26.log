<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-09-26.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000006"><span class="nick" style="color:#389600"><a href="#000006" label="[00:00:06]">&lt;oriansj&gt;</a></span><span class="message">Store_String only allocates 256bytes (buffer overflow)</span></div><div class="line" id="000023"><span class="nick" style="color:#389600"><a href="#000023" label="[00:00:23]">&lt;oriansj&gt;</a></span><span class="message">the line is 293 chars in length</span></div><div class="line" id="000037"><span class="nick" style="color:#389600"><a href="#000037" label="[00:00:37]">&lt;oriansj&gt;</a></span><span class="message">up to 512 -&gt; boom problem sovled</span></div><div class="line" id="000050"><span class="nick" style="color:#8dd3c7"><a href="#000050" label="[00:00:50]">&lt;stikonas&gt;</a></span><span class="message">ok, and I found the issue in cc_*</span></div><div class="line" id="000103"><span class="nick" style="color:#8dd3c7"><a href="#000103" label="[00:01:03]">&lt;stikonas&gt;</a></span><span class="message">it fixes that string to be normal</span></div><div class="line" id="000409"><span class="nick" style="color:#8dd3c7"><a href="#000409" label="[00:04:09]">&lt;stikonas&gt;</a></span><span class="message">oriansj: <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/pull/47">https://github.com/oriansj/stage0-posix/pull/47</a> </span></div><div class="line" id="000435"><span class="nick" style="color:#8dd3c7"><a href="#000435" label="[00:04:35]">&lt;stikonas&gt;</a></span><span class="message">are you incraesing the buffer? or should I do that?</span></div><div class="line" id="001948"><span class="nick" style="color:#389600"><a href="#001948" label="[00:19:48]">&lt;oriansj&gt;</a></span><span class="message">I'm thinking of what the correct thing to do is. the simplest would be unify the max string size to match the M1 default (4K) but because M0 doesn't deduplicate nor use a scratch it ends up being a good bit bigger in terms of RAM (about 300MB if we do 4K but only 16MB if we do 256)</span></div><div class="line" id="002017"><span class="nick" style="color:#8dd3c7"><a href="#002017" label="[00:20:17]">&lt;stikonas&gt;</a></span><span class="message">well, 4K is probably too much</span></div><div class="line" id="002029"><span class="nick" style="color:#8dd3c7"><a href="#002029" label="[00:20:29]">&lt;stikonas&gt;</a></span><span class="message">especially since M0 does not compile large programs...</span></div><div class="line" id="002036"><span class="nick" style="color:#8dd3c7"><a href="#002036" label="[00:20:36]">&lt;stikonas&gt;</a></span><span class="message">M1 might be used to build something much bigger</span></div><div class="line" id="002057"><span class="nick" style="color:#8dd3c7"><a href="#002057" label="[00:20:57]">&lt;stikonas&gt;</a></span><span class="message">maybe 512 would be a good compromise?</span></div><div class="line" id="002114"><span class="nick" style="color:#389600"><a href="#002114" label="[00:21:14]">&lt;oriansj&gt;</a></span><span class="message">and 16MB of RAM is far easier to bootstrap in regards to core memory or current libre lithography process than 300MB</span></div><div class="line" id="002137"><span class="nick" style="color:#8dd3c7"><a href="#002137" label="[00:21:37]">&lt;stikonas&gt;</a></span><span class="message">that's what AArch version is using</span></div><div class="line" id="002143"><span class="nick" style="color:#8dd3c7"><a href="#002143" label="[00:21:43]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="002145"><span class="nick" style="color:#8dd3c7"><a href="#002145" label="[00:21:45]">&lt;stikonas&gt;</a></span><span class="message">true...</span></div><div class="line" id="002253"><span class="nick" style="color:#389600"><a href="#002253" label="[00:22:53]">&lt;oriansj&gt;</a></span><span class="message">and having different values would enable us to notice the differences between architectures to highlight if we change M2-Planet in a way that breaks the 256 boundary like this in the future.</span></div><div class="line" id="002340"><span class="nick" style="color:#8dd3c7"><a href="#002340" label="[00:23:40]">&lt;stikonas&gt;</a></span><span class="message">so we should keep it at 256?</span></div><div class="line" id="002400"><span class="nick" style="color:#8dd3c7"><a href="#002400" label="[00:24:00]">&lt;stikonas&gt;</a></span><span class="message">well, in principle that should be enough if cc_riscv64 is implemented without bugs</span></div><div class="line" id="002412"><span class="nick" style="color:#389600"><a href="#002412" label="[00:24:12]">&lt;oriansj&gt;</a></span><span class="message">unless I modify M2-Planet's test1000 to also check for too large strings in M1.</span></div><div class="line" id="002413"><span class="nick" style="color:#8dd3c7"><a href="#002413" label="[00:24:13]">&lt;stikonas&gt;</a></span><span class="message">although, let me test if M0 now works fine on M2.M1</span></div><div class="line" id="002543"><span class="nick" style="color:#8dd3c7"><a href="#002543" label="[00:25:43]">&lt;stikonas&gt;</a></span><span class="message">hmm, actually still crashes</span></div><div class="line" id="002757"><span class="nick" style="color:#389600"><a href="#002757" label="[00:27:57]">&lt;oriansj&gt;</a></span><span class="message">the question is does M1 and M0 output (when built by the full C hex2 produce the exact same output)</span></div><div class="line" id="002852"><span class="nick" style="color:#8dd3c7"><a href="#002852" label="[00:28:52]">&lt;stikonas&gt;</a></span><span class="message">no :(</span></div><div class="line" id="002855"><span class="nick" style="color:#8dd3c7"><a href="#002855" label="[00:28:55]">&lt;stikonas&gt;</a></span><span class="message">let's make a diff...</span></div><div class="line" id="002924"><span class="nick" style="color:#8dd3c7"><a href="#002924" label="[00:29:24]">&lt;stikonas&gt;</a></span><span class="message">oh, different line breaks...</span></div><div class="line" id="002949"><span class="nick" style="color:#8dd3c7"><a href="#002949" label="[00:29:49]">&lt;stikonas&gt;</a></span><span class="message">let me compare final binaries...</span></div><div class="line" id="002955"><span class="nick" style="color:#389600"><a href="#002955" label="[00:29:55]">&lt;oriansj&gt;</a></span><span class="message">(hence why I suggested after both pass through the full C hex2)</span></div><div class="line" id="003037"><span class="nick" style="color:#389600"><a href="#003037" label="[00:30:37]">&lt;oriansj&gt;</a></span><span class="message">as whitespace differences are expected between M0 and M1 but the hex2 inputs should functionally be identical</span></div><div class="line" id="003056"><span class="nick" style="color:#8dd3c7"><a href="#003056" label="[00:30:56]">&lt;stikonas&gt;</a></span><span class="message">yes, final binaries are identical</span></div><div class="line" id="003113"><span class="nick" style="color:#8dd3c7"><a href="#003113" label="[00:31:13]">&lt;stikonas&gt;</a></span><span class="message">but that's when M0 does not crash...</span></div><div class="line" id="003121"><span class="nick" style="color:#8dd3c7"><a href="#003121" label="[00:31:21]">&lt;stikonas&gt;</a></span><span class="message">let me see where it still crashes</span></div><div class="line" id="003413"><span class="nick" style="color:#8dd3c7"><a href="#003413" label="[00:34:13]">&lt;stikonas&gt;</a></span><span class="message">yeah, still crashes in Reverse_List</span></div><div class="line" id="003443"><span class="nick" style="color:#8dd3c7"><a href="#003443" label="[00:34:43]">&lt;stikonas&gt;</a></span><span class="message">and still garbage in brk pointer...</span></div><div class="line" id="003522"><span class="nick" style="color:#8dd3c7"><a href="#003522" label="[00:35:22]">&lt;stikonas&gt;</a></span><span class="message">so I think you found a different bug with those weird strings</span></div><div class="line" id="003532"><span class="nick" style="color:#8dd3c7"><a href="#003532" label="[00:35:32]">&lt;stikonas&gt;</a></span><span class="message">not even 512 byte buffer helps</span></div><div class="line" id="003619"><span class="nick" style="color:#389600"><a href="#003619" label="[00:36:19]">&lt;oriansj&gt;</a></span><span class="message">well one stupid hack is have brk add 512 to all non-zero sized requests</span></div><div class="line" id="003648"><span class="nick" style="color:#389600"><a href="#003648" label="[00:36:48]">&lt;oriansj&gt;</a></span><span class="message">and if the garbage still exists it is because the kernel isn't zeroing memory before passing it to our process.</span></div><div class="line" id="003825"><span class="nick" style="color:#389600"><a href="#003825" label="[00:38:25]">&lt;oriansj&gt;</a></span><span class="message">which will eliminate all under allocation problems (or add 1MB if you are really worried)</span></div><div class="line" id="004045"><span class="nick" style="color:#8dd3c7"><a href="#004045" label="[00:40:45]">&lt;stikonas&gt;</a></span><span class="message">no, adding 512 does not help here...</span></div><div class="line" id="004112"><span class="nick" style="color:#8dd3c7"><a href="#004112" label="[00:41:12]">&lt;stikonas&gt;</a></span><span class="message">maybe it's qemu translation layer messing up something</span></div><div class="line" id="004117"><span class="nick" style="color:#8dd3c7"><a href="#004117" label="[00:41:17]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="004127"><span class="nick" style="color:#8dd3c7"><a href="#004127" label="[00:41:27]">&lt;stikonas&gt;</a></span><span class="message">not too sure about what qemu does exactly</span></div><div class="line" id="004252"><span class="nick" style="color:#8dd3c7"><a href="#004252" label="[00:42:52]">&lt;stikonas&gt;</a></span><span class="message">although, it might be crashing less frequently</span></div><div class="line" id="004310"><span class="nick" style="color:#8dd3c7"><a href="#004310" label="[00:43:10]">&lt;stikonas&gt;</a></span><span class="message">only my first run crashed</span></div><div class="line" id="004313"><span class="nick" style="color:#389600"><a href="#004313" label="[00:43:13]">&lt;oriansj&gt;</a></span><span class="message">make all allocations a multiple of 8?</span></div><div class="line" id="004328"><span class="nick" style="color:#8dd3c7"><a href="#004328" label="[00:43:28]">&lt;stikonas&gt;</a></span><span class="message">ok and another</span></div><div class="line" id="004339"><span class="nick" style="color:#8dd3c7"><a href="#004339" label="[00:43:39]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="004407"><span class="nick" style="color:#389600"><a href="#004407" label="[00:44:07]">&lt;oriansj&gt;</a></span><span class="message">add 512 then and 0xFFFFFFF8</span></div><div class="line" id="004445"><span class="nick" style="color:#8dd3c7"><a href="#004445" label="[00:44:45]">&lt;stikonas&gt;</a></span><span class="message">let me first reduce string buffer back to 256</span></div><div class="line" id="004914"><span class="nick" style="color:#8dd3c7"><a href="#004914" label="[00:49:14]">&lt;stikonas&gt;</a></span><span class="message">nope, that doesn't help either</span></div><div class="line" id="005020"><span class="nick" style="color:#8dd3c7"><a href="#005020" label="[00:50:20]">&lt;stikonas&gt;</a></span><span class="message">crash in #0  Reverse_List_Loop () at M0_riscv64.S:257</span></div><div class="line" id="005031"><span class="nick" style="color:#8dd3c7"><a href="#005031" label="[00:50:31]">&lt;stikonas&gt;</a></span><span class="message">but that's only because it's the first place where dereference happens</span></div><div class="line" id="005055"><span class="nick" style="color:#389600"><a href="#005055" label="[00:50:55]">&lt;oriansj&gt;</a></span><span class="message">dereference?</span></div><div class="line" id="005115"><span class="nick" style="color:#389600"><a href="#005115" label="[00:51:15]">&lt;oriansj&gt;</a></span><span class="message">next is a direct pointer</span></div><div class="line" id="005243"><span class="nick" style="color:#8dd3c7"><a href="#005243" label="[00:52:43]">&lt;stikonas&gt;</a></span><span class="message">well, a1 already contains some garbage at that time</span></div><div class="line" id="005302"><span class="nick" style="color:#8dd3c7"><a href="#005302" label="[00:53:02]">&lt;stikonas&gt;</a></span><span class="message">I have $a1 = 0x646e655f464c453a</span></div><div class="line" id="005417"><span class="nick" style="color:#389600"><a href="#005417" label="[00:54:17]">&lt;oriansj&gt;</a></span><span class="message">does the load not set the whole register?</span></div><div class="line" id="005428"><span class="nick" style="color:#8dd3c7"><a href="#005428" label="[00:54:28]">&lt;stikonas&gt;</a></span><span class="message">it should</span></div><div class="line" id="005436"><span class="nick" style="color:#8dd3c7"><a href="#005436" label="[00:54:36]">&lt;stikonas&gt;</a></span><span class="message">ld is 64 bit</span></div><div class="line" id="005444"><span class="nick" style="color:#8dd3c7"><a href="#005444" label="[00:54:44]">&lt;stikonas&gt;</a></span><span class="message">(lw is 32 bit) and lb is 8 bit</span></div><div class="line" id="005705"><span class="nick" style="color:#8dd3c7"><a href="#005705" label="[00:57:05]">&lt;stikonas&gt;</a></span><span class="message">and M0 is able to build cc_riscv64 just fine... So must be quite corner-case bug</span></div><div class="line" id="005848"><span class="nick" style="color:#8dd3c7"><a href="#005848" label="[00:58:48]">&lt;stikonas&gt;</a></span><span class="message">I still suspect something with brk</span></div><div class="line" id="005902"><span class="nick" style="color:#8dd3c7"><a href="#005902" label="[00:59:02]">&lt;stikonas&gt;</a></span><span class="message">as that malloc is the only function that writes to s4 register</span></div><div class="line" id="005906"><span class="nick" style="color:#8dd3c7"><a href="#005906" label="[00:59:06]">&lt;stikonas&gt;</a></span><span class="message">and s4 contains garbage</span></div><div class="line" id="010025"><span class="nick" style="color:#8dd3c7"><a href="#010025" label="[01:00:25]">&lt;stikonas&gt;</a></span><span class="message">sorry, I meant s1</span></div><div class="line" id="010029"><span class="nick" style="color:#389600"><a href="#010029" label="[01:00:29]">&lt;oriansj&gt;</a></span><span class="message">syscalls might set s4</span></div><div class="line" id="010039"><span class="nick" style="color:#8dd3c7"><a href="#010039" label="[01:00:39]">&lt;stikonas&gt;</a></span><span class="message">but s1 and s4 have same stuff</span></div><div class="line" id="010046"><span class="nick" style="color:#8dd3c7"><a href="#010046" label="[01:00:46]">&lt;stikonas&gt;</a></span><span class="message">no, I don't think syscalls touch s registers</span></div><div class="line" id="010053"><span class="nick" style="color:#8dd3c7"><a href="#010053" label="[01:00:53]">&lt;stikonas&gt;</a></span><span class="message">they return stuff in a registers</span></div><div class="line" id="010057"><span class="nick" style="color:#8dd3c7"><a href="#010057" label="[01:00:57]">&lt;stikonas&gt;</a></span><span class="message">normally a0</span></div><div class="line" id="010059"><span class="nick" style="color:#389600"><a href="#010059" label="[01:00:59]">&lt;oriansj&gt;</a></span><span class="message">what registers does linux syscalls actually use</span></div><div class="line" id="010127"><span class="nick" style="color:#8dd3c7"><a href="#010127" label="[01:01:27]">&lt;stikonas&gt;</a></span><span class="message">a7 is syscall number then a0, a1, a2, ... a6 are syscall arguments</span></div><div class="line" id="010131"><span class="nick" style="color:#389600"><a href="#010131" label="[01:01:31]">&lt;oriansj&gt;</a></span><span class="message">because any register used in a syscall maybe modified during any syscall</span></div><div class="line" id="010226"><span class="nick" style="color:#8dd3c7"><a href="#010226" label="[01:02:26]">&lt;stikonas&gt;</a></span><span class="message">well, it returns a0 and then we do mv s1, a0                         # Set our malloc pointer</span></div><div class="line" id="010235"><span class="nick" style="color:#389600"><a href="#010235" label="[01:02:35]">&lt;oriansj&gt;</a></span><span class="message">so any syscall can alter a1 and a4</span></div><div class="line" id="010250"><span class="nick" style="color:#8dd3c7"><a href="#010250" label="[01:02:50]">&lt;stikonas&gt;</a></span><span class="message">yes, that's true</span></div><div class="line" id="010350"><span class="nick" style="color:#8dd3c7"><a href="#010350" label="[01:03:50]">&lt;stikonas&gt;</a></span><span class="message">a4 is actually completely unused</span></div><div class="line" id="010403"><span class="nick" style="color:#8dd3c7"><a href="#010403" label="[01:04:03]">&lt;stikonas&gt;</a></span><span class="message">for some reason I have it only once pushed and popped from the stack</span></div><div class="line" id="010414"><span class="nick" style="color:#8dd3c7"><a href="#010414" label="[01:04:14]">&lt;stikonas&gt;</a></span><span class="message">but not used at all, so those lines can be removed</span></div><div class="line" id="010822"><span class="nick" style="color:#389600"><a href="#010822" label="[01:08:22]">&lt;oriansj&gt;</a></span><span class="message">well the pops at the end of Reverse_List are to undo all register changes except the register used to return the reversed list</span></div><div class="line" id="011942"><span class="nick" style="color:#389600"><a href="#011942" label="[01:19:42]">&lt;oriansj&gt;</a></span><span class="message">one thing you can do is have gdb break when S4 changes</span></div><div class="line" id="011949"><span class="nick" style="color:#389600"><a href="#011949" label="[01:19:49]">&lt;oriansj&gt;</a></span><span class="message">assuming it shouldn't change much</span></div><div class="line" id="012012"><span class="nick" style="color:#389600"><a href="#012012" label="[01:20:12]">&lt;oriansj&gt;</a></span><span class="message">correction S1 changes</span></div><div class="line" id="012021"><span class="nick" style="color:#389600"><a href="#012021" label="[01:20:21]">&lt;oriansj&gt;</a></span><span class="message">watch S1 should do it</span></div><div class="line" id="012221"><span class="nick" style="color:#8dd3c7"><a href="#012221" label="[01:22:21]">&lt;stikonas&gt;</a></span><span class="message">well, it does change quite  a bit</span></div><div class="line" id="012224"><span class="nick" style="color:#8dd3c7"><a href="#012224" label="[01:22:24]">&lt;stikonas&gt;</a></span><span class="message">once per token</span></div><div class="line" id="012256"><span class="nick" style="color:#8dd3c7"><a href="#012256" label="[01:22:56]">&lt;stikonas&gt;</a></span><span class="message">there are 234233 words in M2.M1</span></div><div class="line" id="012306"><span class="nick" style="color:#8dd3c7"><a href="#012306" label="[01:23:06]">&lt;stikonas&gt;</a></span><span class="message">well, some are comments but there are still a lot...</span></div><div class="line" id="013849"><span class="nick" style="color:#389600"><a href="#013849" label="[01:38:49]">&lt;oriansj&gt;</a></span><span class="message">the top 32bits from malloc should always be zero right?</span></div><div class="line" id="014223"><span class="nick" style="color:#8dd3c7"><a href="#014223" label="[01:42:23]">&lt;stikonas&gt;</a></span><span class="message">hmm, I guess so</span></div><div class="line" id="014319"><span class="nick" style="color:#389600"><a href="#014319" label="[01:43:19]">&lt;oriansj&gt;</a></span><span class="message">so only break if the top 32bits are anything other than zero</span></div><div class="line" id="014413"><span class="nick" style="color:#8dd3c7"><a href="#014413" label="[01:44:13]">&lt;stikonas&gt;</a></span><span class="message">but I don't understand yet why that happens...</span></div><div class="line" id="015020"><span class="nick" style="color:#389600"><a href="#015020" label="[01:50:20]">&lt;oriansj&gt;</a></span><span class="message">well breaking when it does, lets us know where to give us more clues</span></div><div class="line" id="015336"><span class="nick" style="color:#8dd3c7"><a href="#015336" label="[01:53:36]">&lt;stikonas&gt;</a></span><span class="message">oh I see you mean stop in debugger...</span></div><div class="line" id="015340"><span class="nick" style="color:#8dd3c7"><a href="#015340" label="[01:53:40]">&lt;stikonas&gt;</a></span><span class="message">yeah, I can try that....</span></div><div class="line" id="015345"><span class="nick" style="color:#8dd3c7"><a href="#015345" label="[01:53:45]">&lt;stikonas&gt;</a></span><span class="message">although, maybe tomorrow</span></div><div class="line" id="070319"><span class="nick" style="color:#6b8072"><a href="#070319" label="[07:03:19]">&lt;pabs3&gt;</a></span><span class="message">could someone apply this patch to the website? <a rel="nofollow" href="https://paste.debian.net/plain/1213263/">https://paste.debian.net/plain/1213263/</a> </span></div><div class="line" id="081306"><span class="nick" style="color:#80b1d3"><a href="#081306" label="[08:13:06]">&lt;janneke&gt;</a></span><span class="message">pabs3: thanks.  i've completed the commit messages by adding the changelog and and applied the patch set</span></div><div class="line" id="093328"><span class="nick" style="color:#6b8072"><a href="#093328" label="[09:33:28]">&lt;pabs3&gt;</a></span><span class="message">janneke: the commit messages were already in the patchset, there were two commits</span></div><div class="line" id="093438"><span class="nick" style="color:#6b8072"><a href="#093438" label="[09:34:38]">&lt;pabs3&gt;</a></span><span class="message">ah, I see what you mean, you copied the list of changed files into the commit message. I generally just use `git log --stat` when I want to see that.</span></div><div class="line" id="093447"><span class="nick" style="color:#6b8072"><a href="#093447" label="[09:34:47]">&lt;pabs3&gt;</a></span><span class="message">thanks for merging</span></div><div class="line" id="094332"><span class="nick" style="color:#80b1d3"><a href="#094332" label="[09:43:32]">&lt;janneke&gt;</a></span><span class="message">yw, yes we appreciate and for some projects require gnu style changelogs, see <a rel="nofollow" href="https://guix.gnu.org/manual/en/html_node/Submitting-Patches.html">https://guix.gnu.org/manual/en/html_node/Submitting-Patches.html</a>  and <a rel="nofollow" href="https://www.gnu.org/prep/standards/html_node/Change-Logs.html#Change-Logs">https://www.gnu.org/prep/standards/html_node/Change-Logs.html#Change-Logs</a> </span></div><div class="line" id="094641"><span class="nick" style="color:#6b8072"><a href="#094641" label="[09:46:41]">&lt;pabs3&gt;</a></span><span class="message">I see</span></div><div class="line" id="213928"><span class="nick" style="color:#6d2462"><a href="#213928" label="[21:39:28]">&lt;NieDzejkob&gt;</a></span><span class="message">hot take: gnu-style changelogs are a relic from the era of VCSes not existing and the only reason they're still being used is that nobody realized that they don't make sense anymore</span></div><div class="line" id="215347"><span class="nick" style="color:#389600"><a href="#215347" label="[21:53:47]">&lt;oriansj&gt;</a></span><span class="message">NieDzejkob: there is a big difference between not making sense anymore and not being in a form that optimally matches the tools that are available *now*</span></div><div class="line" id="215548"><span class="nick" style="color:#389600"><a href="#215548" label="[21:55:48]">&lt;oriansj&gt;</a></span><span class="message">learning how to shoe a horse is a skill that in a public school would fall into the not making sense anymore category. Whereas teaching of visual basic would be in a form that doesn't optimally match the tools that are available now.</span></div><div class="line" id="215758"><span class="nick" style="color:#389600"><a href="#215758" label="[21:57:58]">&lt;oriansj&gt;</a></span><span class="message">I'd argue gnu-style changelogs are more of not being optimal than being senseless these days; as there is great value in good commit messages and commit patterns in a style that makes it easier for others to disect and understand. A skill I hope to one day properly learn (if abit slowly at this point)</span></div><div class="line" id="221230"><span class="nick" style="color:#6d2462"><a href="#221230" label="[22:12:30]">&lt;NieDzejkob&gt;</a></span><span class="message">Listing the functions and files the commit touched doesn't &quot;make it easier for others to understand&quot;</span></div><div class="line" id="222701"><span class="nick" style="color:#389600"><a href="#222701" label="[22:27:01]">&lt;oriansj&gt;</a></span><span class="message">NieDzejkob: but &quot;What was the rationale for a given change, and what were its main ideas?&quot; certainly does</span></div><div class="line" id="222754"><span class="nick" style="color:#6d2462"><a href="#222754" label="[22:27:54]">&lt;NieDzejkob&gt;</a></span><span class="message">yes, but that's the opposite of the GNU changelog format.</span></div><div class="line" id="222825"><span class="nick" style="color:#389600"><a href="#222825" label="[22:28:25]">&lt;oriansj&gt;</a></span><span class="message">but it is literally what it says: <a rel="nofollow" href="https://www.gnu.org/prep/standards/standards.html">https://www.gnu.org/prep/standards/standards.html</a> </span></div><div class="line" id="222852"><span class="nick" style="color:#389600"><a href="#222852" label="[22:28:52]">&lt;oriansj&gt;</a></span><span class="message">another good bit: Is there any additional information regarding the change, and if so, where can it be found?</span></div><div class="line" id="222920"><span class="nick" style="color:#389600"><a href="#222920" label="[22:29:20]">&lt;oriansj&gt;</a></span><span class="message">and suggests: one commit for each logical changeset</span></div><div class="line" id="223343"><span class="nick" style="color:#6d2462"><a href="#223343" label="[22:33:43]">&lt;NieDzejkob&gt;</a></span><span class="message">hmm. Apparently what the document actually says and what the Guix folks are doing while citing the document are two entirely different things.</span></div><div class="line" id="223521"><span class="nick" style="color:#389600"><a href="#223521" label="[22:35:21]">&lt;oriansj&gt;</a></span><span class="message">yes it is called using a previously learned skill without updating it to match the new improved standards.</span></div><div class="line" id="223736"><span class="nick" style="color:#234e69"><a href="#223736" label="[22:37:36]">&lt;civodul&gt;</a></span><span class="message">NieDzejkob: it's not quite that they don't make sense anymore; they give a view of the intended language-level changes, as oppose to line-by-line changes</span></div><div class="line" id="223838"><span class="nick" style="color:#389600"><a href="#223838" label="[22:38:38]">&lt;oriansj&gt;</a></span><span class="message">as scheme isn't so much a programming language but as glue for a community to create its own langague to express the solving of a problem.</span></div><div class="line" id="224413"><span class="nick" style="color:#389600"><a href="#224413" label="[22:44:13]">&lt;oriansj&gt;</a></span><span class="message">stikonas: fsopen is RISC-V's open? #430 or is my partially construction documentation completely off: <a rel="nofollow" href="https://paste.debian.net/1213370/">https://paste.debian.net/1213370/</a> </span></div><div class="line" id="224801"><span class="nick" style="color:#8dd3c7"><a href="#224801" label="[22:48:01]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I've used openat</span></div><div class="line" id="225046"><span class="nick" style="color:#8dd3c7"><a href="#225046" label="[22:50:46]">&lt;stikonas&gt;</a></span><span class="message">fsopen seems to be something to do with file systems</span></div><div class="line" id="231522"><span class="nick" style="color:#389600"><a href="#231522" label="[23:15:22]">&lt;oriansj&gt;</a></span><span class="message">well that is what an open command does. it opens a file in a file system.</span></div><div class="line" id="231907"><span class="nick" style="color:#8dd3c7"><a href="#231907" label="[23:19:07]">&lt;stikonas&gt;</a></span><span class="message">and fsopen seems to open a file system, not a file in filesystem</span></div><div class="line" id="231914"><span class="nick" style="color:#8dd3c7"><a href="#231914" label="[23:19:14]">&lt;stikonas&gt;</a></span><span class="message">i.e. for mounting purposes</span></div><div class="line" id="231945"><span class="nick" style="color:#8dd3c7"><a href="#231945" label="[23:19:45]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://lwn.net/Articles/759499/">https://lwn.net/Articles/759499/</a> </span></div><div class="line" id="232105"><span class="nick" style="color:#389600"><a href="#232105" label="[23:21:05]">&lt;oriansj&gt;</a></span><span class="message">thanks, learned something new</span></div><div class="line" id="232805"><span class="nick" style="color:#8dd3c7"><a href="#232805" label="[23:28:05]">&lt;stikonas&gt;</a></span><span class="message">well, I didn't know this either</span></div><div class="line" id="232847"><span class="nick" style="color:#8dd3c7"><a href="#232847" label="[23:28:47]">&lt;stikonas&gt;</a></span><span class="message">and I just spend lots of time resetting up my openwrt router after upgrade refused to carry over old configuration</span></div><div class="line" id="232928"><span class="nick" style="color:#8dd3c7"><a href="#232928" label="[23:29:28]">&lt;stikonas&gt;</a></span><span class="message">so didn't really have time to look at M0 crashe yet...</span></div><div class="line" id="233003"><span class="nick" style="color:#8dd3c7"><a href="#233003" label="[23:30:03]">&lt;stikonas&gt;</a></span><span class="message">oriansj: but this is probably worth pulling in <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/pull/47">https://github.com/oriansj/stage0-posix/pull/47</a> </span></div><div class="line" id="233014"><span class="nick" style="color:#8dd3c7"><a href="#233014" label="[23:30:14]">&lt;stikonas&gt;</a></span><span class="message">otherwise we will be hitting too long string bug</span></div><br /></div></body></html>