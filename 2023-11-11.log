<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-11-11.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="001234"><span class="nick" style="color:#389600"><a href="#001234" label="[00:12:34]">&lt;Googulator&gt;</a></span><span class="message">I've just realized that my the part of my proposal where the boot sector just prints dots until it can see the real sector 1 has a slight vulnerability: a backdoored host could write a boot sector that actually wants to load more binary code from sector 1 and beyond, but implements the same wait-with-dots behavior until sector 1 becomes visible.</span></div><div class="line" id="001234"><span class="nick" style="color:#389600"><a href="#001234" label="[00:12:34]">&lt;Googulator&gt;</a></span><span class="message">Also, a malicious boot sector could just read from sector 2, 4, 6, and so on, ignoring the inaccessible odd-numbered ones. All of this could enable the malicious boot sector to emulate the clean one. Luckily, it's fixable.</span></div><div class="line" id="001328"><span class="nick" style="color:#389600"><a href="#001328" label="[00:13:28]">&lt;Googulator&gt;</a></span><span class="message">Instead of a single switch on the A8 line, have switches on all address lines A8 and up. On boot, the user needs to close them in such an order that the A8 switch is closed last, since that's what the legit boot sector checks.</span></div><div class="line" id="001343"><span class="nick" style="color:#389600"><a href="#001343" label="[00:13:43]">&lt;Googulator&gt;</a></span><span class="message">This way, on boot, truly only the first sector is accessible.</span></div><div class="line" id="001519"><span class="nick" style="color:#389600"><a href="#001519" label="[00:15:19]">&lt;Googulator&gt;</a></span><span class="message">Then, rather than just printing a dot everytime the boot sector sees itself as sector 1, it prints a dot, followed by the entire contents of sector 1 (i.e. itself), hex-encoded. This way, a malicious boot sector has no chance of embedding a compressed copy of the clean one within itself and emulate this behavior.</span></div><div class="line" id="001556"><span class="nick" style="color:#389600"><a href="#001556" label="[00:15:56]">&lt;Googulator&gt;</a></span><span class="message">This can be made even stronger if instead of padding the boot sector with zeros, we pad with new, cryptographically secure pseudorandom data every time we generate a bare metal image.</span></div><div class="line" id="001704"><span class="nick" style="color:#389600"><a href="#001704" label="[00:17:04]">&lt;Googulator&gt;</a></span><span class="message">This maximally reduces the compressibility of the boot sector, leaving no space for a malicious boot sector's own code if it chooses to embed a compressed clean copy.</span></div><div class="line" id="001912"><span class="nick" style="color:#389600"><a href="#001912" label="[00:19:12]">&lt;Googulator&gt;</a></span><span class="message">Ideally, the source of the random data should be something like /dev/random, or even a true hardware RNG. Alternatively, seed a PRNG with way more than 512 bytes of data.</span></div><div class="line" id="003316"><span class="nick" style="color:#8dd3c7"><a href="#003316" label="[00:33:16]">&lt;oriansj&gt;</a></span><span class="message">stikonas: we can always optimize the generated code in M2-Planet, it was just my first guess at how to do it (there definitely are potential improvements I missed)</span></div><div class="line" id="003423"><span class="nick" style="color:#8dd3c7"><a href="#003423" label="[00:34:23]">&lt;oriansj&gt;</a></span><span class="message">Googulator: you could set all of the lines to be toggled off by a single switch</span></div><div class="line" id="003604"><span class="nick" style="color:#389600"><a href="#003604" label="[00:36:04]">&lt;Googulator&gt;</a></span><span class="message">That could lead to the lines getting connected in a nondeterministic order. It's important that the lowest-numbered line (in my example, A8) is connected last. However, 2 switches should be doable.</span></div><div class="line" id="003617"><span class="nick" style="color:#389600"><a href="#003617" label="[00:36:17]">&lt;Googulator&gt;</a></span><span class="message">One for A8, one for everything A9 and up</span></div><div class="line" id="003641"><span class="nick" style="color:#8dd3c7"><a href="#003641" label="[00:36:41]">&lt;oriansj&gt;</a></span><span class="message">assuming CRC is sufficient, you could have sector 0 validate itself prior to its use and use a manually set (and impossible guess 100Byte random seed) to ensure an attacker can't just hardcode a crc value</span></div><div class="line" id="003711"><span class="nick" style="color:#389600"><a href="#003711" label="[00:37:11]">&lt;Googulator&gt;</a></span><span class="message">Sector 0 isn't the problem</span></div><div class="line" id="003737"><span class="nick" style="color:#389600"><a href="#003737" label="[00:37:37]">&lt;Googulator&gt;</a></span><span class="message">It's actually the _legit_ sector 0 that can get confused if line A8 comes up before A9</span></div><div class="line" id="003819"><span class="nick" style="color:#389600"><a href="#003819" label="[00:38:19]">&lt;Googulator&gt;</a></span><span class="message">In that case, it will read sector 1 just fine, but read garbage instead of subsequent sectors</span></div><div class="line" id="004004"><span class="nick" style="color:#8dd3c7"><a href="#004004" label="[00:40:04]">&lt;oriansj&gt;</a></span><span class="message">stikonas: now to begin fuzzing the crap out the new switch functionality</span></div><div class="line" id="004004"><span class="nick" style="color:#389600"><a href="#004004" label="[00:40:04]">&lt;Googulator&gt;</a></span><span class="message">2 switches are needed to defend not against attacks, but rather against random glitching from a nondeterministic switching order</span></div><div class="line" id="004115"><span class="nick" style="color:#389600"><a href="#004115" label="[00:41:15]">&lt;Googulator&gt;</a></span><span class="message">BTW, is anyone still working on bootstrapping Haskell?</span></div><div class="line" id="004120"><span class="nick" style="color:#2e2a4a"><a href="#004120" label="[00:41:20]">&lt;stikonas&gt;</a></span><span class="message">Googulator: I don't think so</span></div><div class="line" id="004134"><span class="nick" style="color:#2e2a4a"><a href="#004134" label="[00:41:34]">&lt;stikonas&gt;</a></span><span class="message">there were few attemts but not too successful</span></div><div class="line" id="004211"><span class="nick" style="color:#2e2a4a"><a href="#004211" label="[00:42:11]">&lt;stikonas&gt;</a></span><span class="message">Googulator: by the way, can't you write boot sector to e.g. optical media and inspect under microscope?</span></div><div class="line" id="004251"><span class="nick" style="color:#389600"><a href="#004251" label="[00:42:51]">&lt;Googulator&gt;</a></span><span class="message">Because it seems we do have surviving sources for GHC v0.26: <a rel="nofollow" href="https://hub.darcs.net/simon/ghc_old/patch/93ed5c1c4b5ca702e69fc1d21c847bd824035eff">https://hub.darcs.net/simon/ghc_old/patch/93ed5c1c4b5ca702e69fc1d21c847bd824035eff</a> </span></div><div class="line" id="004406"><span class="nick" style="color:#389600"><a href="#004406" label="[00:44:06]">&lt;Googulator&gt;</a></span><span class="message">All attempts I found so far seem to focus on v.029</span></div><div class="line" id="004412"><span class="nick" style="color:#389600"><a href="#004412" label="[00:44:12]">&lt;Googulator&gt;</a></span><span class="message">v0.29</span></div><div class="line" id="004524"><span class="nick" style="color:#389600"><a href="#004524" label="[00:45:24]">&lt;Googulator&gt;</a></span><span class="message">stikonas: not sure if that's possible with a plain old light microscope, and using an electron microscope introduces trust issues (electron microscopes are usually digital with lots of firmware, among other issues)</span></div><div class="line" id="004620"><span class="nick" style="color:#389600"><a href="#004620" label="[00:46:20]">&lt;Googulator&gt;</a></span><span class="message">GHC v0.26 sources in Git, a bit easier to read because it has a proper web interface: <a rel="nofollow" href="https://gitlab.haskell.org/ghc/ghc/-/tree/e7d21ee4f8ac907665a7e170c71d59e13a01da09">https://gitlab.haskell.org/ghc/ghc/-/tree/e7d21ee4f8ac907665a7e170c71d59e13a01da09</a> </span></div><div class="line" id="004725"><span class="nick" style="color:#2e2a4a"><a href="#004725" label="[00:47:25]">&lt;stikonas&gt;</a></span><span class="message">Googulator: there were attempts at far newer GHC</span></div><div class="line" id="004741"><span class="nick" style="color:#389600"><a href="#004741" label="[00:47:41]">&lt;Googulator&gt;</a></span><span class="message">newer, yes</span></div><div class="line" id="004744"><span class="nick" style="color:#389600"><a href="#004744" label="[00:47:44]">&lt;Googulator&gt;</a></span><span class="message">but not older</span></div><div class="line" id="004804"><span class="nick" style="color:#389600"><a href="#004804" label="[00:48:04]">&lt;Googulator&gt;</a></span><span class="message">this predates 0.29</span></div><div class="line" id="004811"><span class="nick" style="color:#2e2a4a"><a href="#004811" label="[00:48:11]">&lt;stikonas&gt;</a></span><span class="message">oh, this is the last blog post <a rel="nofollow" href="https://www.joachim-breitner.de/blog/802-More_thoughts_on_a_bootstrappable_GHC">https://www.joachim-breitner.de/blog/802-More_thoughts_on_a_bootstrappable_GHC</a> </span></div><div class="line" id="004911"><span class="nick" style="color:#389600"><a href="#004911" label="[00:49:11]">&lt;Googulator&gt;</a></span><span class="message">Unfortunately, <a rel="nofollow" href="https://gitlab.haskell.org/ghc/ghc/-/blob/e7d21ee4f8ac907665a7e170c71d59e13a01da09/ghc/docs/install_guide/installing.lit#L1480">https://gitlab.haskell.org/ghc/ghc/-/blob/e7d21ee4f8ac907665a7e170c71d59e13a01da09/ghc/docs/install_guide/installing.lit#L1480</a> </span></div><div class="line" id="004923"><span class="nick" style="color:#2e2a4a"><a href="#004923" label="[00:49:23]">&lt;stikonas&gt;</a></span><span class="message">yeah, the old ones have this problem</span></div><div class="line" id="004927"><span class="nick" style="color:#389600"><a href="#004927" label="[00:49:27]">&lt;Googulator&gt;</a></span><span class="message">&quot;GHC~0.26 doesn't build with HBC.  (It could, but we haven't put in the effort to maintain it.)&quot;</span></div><div class="line" id="004929"><span class="nick" style="color:#2e2a4a"><a href="#004929" label="[00:49:29]">&lt;stikonas&gt;</a></span><span class="message">and lit files I think are not bootstrapped either</span></div><div class="line" id="004945"><span class="nick" style="color:#2e2a4a"><a href="#004945" label="[00:49:45]">&lt;stikonas&gt;</a></span><span class="message">there was some attempt at 2.something I think</span></div><div class="line" id="004957"><span class="nick" style="color:#389600"><a href="#004957" label="[00:49:57]">&lt;Googulator&gt;</a></span><span class="message">isn't lit just documentation?</span></div><div class="line" id="005107"><span class="nick" style="color:#2e2a4a"><a href="#005107" label="[00:51:07]">&lt;stikonas&gt;</a></span><span class="message">oh, maybe I'm confusing it with something else</span></div><div class="line" id="005120"><span class="nick" style="color:#2e2a4a"><a href="#005120" label="[00:51:20]">&lt;stikonas&gt;</a></span><span class="message">I remember early ghc depended on something starting with l...</span></div><div class="line" id="005137"><span class="nick" style="color:#2e2a4a"><a href="#005137" label="[00:51:37]">&lt;stikonas&gt;</a></span><span class="message">or maybe it was some other compiler, nh98 or something like that</span></div><div class="line" id="005150"><span class="nick" style="color:#2e2a4a"><a href="#005150" label="[00:51:50]">&lt;stikonas&gt;</a></span><span class="message">anyway, I'm not most up to date on this...</span></div><div class="line" id="005150"><span class="nick" style="color:#389600"><a href="#005150" label="[00:51:50]">&lt;Googulator&gt;</a></span><span class="message">It appears GHC v0.24 may have been the last version explicitly buildable using HBC - unfortunately it's lost, and so are all earlier versions</span></div><div class="line" id="005201"><span class="nick" style="color:#389600"><a href="#005201" label="[00:52:01]">&lt;Googulator&gt;</a></span><span class="message">IIRC it was LML (Chalmers Lazy ML)</span></div><div class="line" id="005208"><span class="nick" style="color:#2e2a4a"><a href="#005208" label="[00:52:08]">&lt;stikonas&gt;</a></span><span class="message">oh indeed</span></div><div class="line" id="005253"><span class="nick" style="color:#389600"><a href="#005253" label="[00:52:53]">&lt;Googulator&gt;</a></span><span class="message">But AFAIK that was only used in super early releases (all of which are lost)</span></div><div class="line" id="005305"><span class="nick" style="color:#389600"><a href="#005305" label="[00:53:05]">&lt;Googulator&gt;</a></span><span class="message">Before self-hosting was achieved</span></div><div class="line" id="005407"><span class="nick" style="color:#389600"><a href="#005407" label="[00:54:07]">&lt;Googulator&gt;</a></span><span class="message">I already posted on r/lostmedia, but nothing found so far before v0.26: <a rel="nofollow" href="https://www.reddit.com/r/lostmedia/comments/17qcemw/fully_lost_old_versions_of_the_glasgow_haskell/?sort=new">https://www.reddit.com/r/lostmedia/comments/17qcemw/fully_lost_old_versions_of_the_glasgow_haskell/?sort=new</a> </span></div><div class="line" id="005627"><span class="nick" style="color:#2e2a4a"><a href="#005627" label="[00:56:27]">&lt;stikonas&gt;</a></span><span class="message">and thee old versions would be tricky to run on new systems in any case</span></div><div class="line" id="005811"><span class="nick" style="color:#6b8072"><a href="#005811" label="[00:58:11]">&lt;Googulator25&gt;</a></span><span class="message">network issues...</span></div><div class="line" id="005853"><span class="nick" style="color:#389600"><a href="#005853" label="[00:58:53]">&lt;Googulator&gt;</a></span><span class="message">Any ideas what could be causing this error?</span></div><div class="line" id="005853"><span class="nick" style="color:#389600"><a href="#005853" label="[00:58:53]">&lt;Googulator&gt;</a></span><span class="message">[    4.046888] RAMDISK: gzip image found at block 0</span></div><div class="line" id="005854"><span class="nick" style="color:#389600"><a href="#005854" label="[00:58:54]">&lt;Googulator&gt;</a></span><span class="message">[    4.241804] RAMDISK: incomplete write (9780 != 16384)</span></div><div class="line" id="005854"><span class="nick" style="color:#389600"><a href="#005854" label="[00:58:54]">&lt;Googulator&gt;</a></span><span class="message">[    4.247450] write error</span></div><div class="line" id="005855"><span class="nick" style="color:#389600"><a href="#005855" label="[00:58:55]">&lt;Googulator&gt;</a></span><span class="message">[    4.248331] VFS: Cannot open root device &quot;(null)&quot; or unknown-block(0,0): error -6</span></div><div class="line" id="005922"><span class="nick" style="color:#2e2a4a"><a href="#005922" label="[00:59:22]">&lt;stikonas&gt;</a></span><span class="message">in live-bootstrap?</span></div><div class="line" id="005939"><span class="nick" style="color:#2e2a4a"><a href="#005939" label="[00:59:39]">&lt;stikonas&gt;</a></span><span class="message">possibly truncated initramfs?</span></div><div class="line" id="005955"><span class="nick" style="color:#389600"><a href="#005955" label="[00:59:55]">&lt;Googulator&gt;</a></span><span class="message">That's what it seems to be, but why?</span></div><div class="line" id="010005"><span class="nick" style="color:#389600"><a href="#010005" label="[01:00:05]">&lt;Googulator&gt;</a></span><span class="message">Is there some hard limit on initramfs file size?</span></div><div class="line" id="010009"><span class="nick" style="color:#2e2a4a"><a href="#010009" label="[01:00:09]">&lt;stikonas&gt;</a></span><span class="message">there might be</span></div><div class="line" id="010021"><span class="nick" style="color:#2e2a4a"><a href="#010021" label="[01:00:21]">&lt;stikonas&gt;</a></span><span class="message">but I don't know why</span></div><div class="line" id="010032"><span class="nick" style="color:#2e2a4a"><a href="#010032" label="[01:00:32]">&lt;stikonas&gt;</a></span><span class="message">I've seen cases where live-bootstrap failed to load big initramfs...</span></div><div class="line" id="010047"><span class="nick" style="color:#2e2a4a"><a href="#010047" label="[01:00:47]">&lt;stikonas&gt;</a></span><span class="message">but that might be before kernel bootstrapping work</span></div><div class="line" id="010055"><span class="nick" style="color:#2e2a4a"><a href="#010055" label="[01:00:55]">&lt;stikonas&gt;</a></span><span class="message">but probably we still have various limits</span></div><div class="line" id="010114"><span class="nick" style="color:#2e2a4a"><a href="#010114" label="[01:01:14]">&lt;stikonas&gt;</a></span><span class="message">Googulator: but which bootstrap option are you using?</span></div><div class="line" id="010133"><span class="nick" style="color:#389600"><a href="#010133" label="[01:01:33]">&lt;Googulator&gt;</a></span><span class="message">qemu with kernel bootstrapping, but I made some changes</span></div><div class="line" id="010135"><span class="nick" style="color:#2e2a4a"><a href="#010135" label="[01:01:35]">&lt;stikonas&gt;</a></span><span class="message">I think builder-hex0 does not create gziped initramfs</span></div><div class="line" id="010138"><span class="nick" style="color:#2e2a4a"><a href="#010138" label="[01:01:38]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="010207"><span class="nick" style="color:#389600"><a href="#010207" label="[01:02:07]">&lt;Googulator&gt;</a></span><span class="message">This is the 2nd initramfs</span></div><div class="line" id="010211"><span class="nick" style="color:#389600"><a href="#010211" label="[01:02:11]">&lt;Googulator&gt;</a></span><span class="message">build in Fiwix for Linux</span></div><div class="line" id="010212"><span class="nick" style="color:#2e2a4a"><a href="#010212" label="[01:02:12]">&lt;stikonas&gt;</a></span><span class="message">but I had sometimes case of initramfs not booting when I forgot to remove some big files from /sysa/distfiles</span></div><div class="line" id="010314"><span class="nick" style="color:#389600"><a href="#010314" label="[01:03:14]">&lt;Googulator&gt;</a></span><span class="message">I'm trying to bring the compiled Linux kernel image into the final system, so that after bootstrap, I can have a bootable image</span></div><div class="line" id="010314"><span class="nick" style="color:#2e2a4a"><a href="#010314" label="[01:03:14]">&lt;stikonas&gt;</a></span><span class="message">x86 imposes quite a few limits</span></div><div class="line" id="010322"><span class="nick" style="color:#2e2a4a"><a href="#010322" label="[01:03:22]">&lt;stikonas&gt;</a></span><span class="message">due to 32-bit memory addressing</span></div><div class="line" id="010330"><span class="nick" style="color:#2e2a4a"><a href="#010330" label="[01:03:30]">&lt;stikonas&gt;</a></span><span class="message">and kernel uses 1GiB internally</span></div><div class="line" id="010334"><span class="nick" style="color:#2e2a4a"><a href="#010334" label="[01:03:34]">&lt;stikonas&gt;</a></span><span class="message">so only 3 GiB are left</span></div><div class="line" id="010352"><span class="nick" style="color:#2e2a4a"><a href="#010352" label="[01:03:52]">&lt;stikonas&gt;</a></span><span class="message">Googulator: yeah, that can definitely exceed the size</span></div><div class="line" id="010401"><span class="nick" style="color:#2e2a4a"><a href="#010401" label="[01:04:01]">&lt;stikonas&gt;</a></span><span class="message">some of the limits that we have might be fairly tight</span></div><div class="line" id="010429"><span class="nick" style="color:#2e2a4a"><a href="#010429" label="[01:04:29]">&lt;stikonas&gt;</a></span><span class="message">partly because we keep everything in RAM before Linux</span></div><div class="line" id="010435"><span class="nick" style="color:#2e2a4a"><a href="#010435" label="[01:04:35]">&lt;stikonas&gt;</a></span><span class="message">Fiwix could use hard drives</span></div><div class="line" id="010448"><span class="nick" style="color:#2e2a4a"><a href="#010448" label="[01:04:48]">&lt;stikonas&gt;</a></span><span class="message">that's an option (though needs work in live-bootstrap)</span></div><div class="line" id="010507"><span class="nick" style="color:#2e2a4a"><a href="#010507" label="[01:05:07]">&lt;stikonas&gt;</a></span><span class="message">but then we'll lose ability to bootstrap on hardware with e.g. nvme which Fiwix doesn't support</span></div><div class="line" id="011249"><span class="nick" style="color:#389600"><a href="#011249" label="[01:12:49]">&lt;Googulator&gt;</a></span><span class="message">Meanwhile, just realized another problem with my Trusting-Trust-resistance plan: some of the files in srcfs are gzipped; just printing those as-is won't give us a readable printout before their contents are executed</span></div><div class="line" id="013524"><span class="nick" style="color:#2e2a4a"><a href="#013524" label="[01:35:24]">&lt;stikonas&gt;</a></span><span class="message">Googulator: well, that's not hard to solve</span></div><div class="line" id="013539"><span class="nick" style="color:#2e2a4a"><a href="#013539" label="[01:35:39]">&lt;stikonas&gt;</a></span><span class="message">just need to print their contents as we unzip them</span></div><div class="line" id="013559"><span class="nick" style="color:#2e2a4a"><a href="#013559" label="[01:35:59]">&lt;stikonas&gt;</a></span><span class="message">and tars on the other hand are mostly human readable</span></div><div class="line" id="014803"><span class="nick" style="color:#389600"><a href="#014803" label="[01:48:03]">&lt;Googulator&gt;</a></span><span class="message">Yeah, printing on ungz could help there</span></div><div class="line" id="014842"><span class="nick" style="color:#389600"><a href="#014842" label="[01:48:42]">&lt;Googulator&gt;</a></span><span class="message">builder-stage2 could then use a &quot;zip&quot; command, almost synonymous with &quot;src&quot;, but not printing what it reads (because it's useless binary garbage at that point)</span></div><div class="line" id="020249"><span class="nick" style="color:#8dd3c7"><a href="#020249" label="[02:02:49]">&lt;oriansj&gt;</a></span><span class="message">well nothing should be gzip'd or bzip'd until after we properly bootstrap their unpackers</span></div><div class="line" id="020616"><span class="nick" style="color:#8dd3c7"><a href="#020616" label="[02:06:16]">&lt;oriansj&gt;</a></span><span class="message">well an hour of fuzzy thus far and no segfaults found yet</span></div><div class="line" id="020646"><span class="nick" style="color:#8dd3c7"><a href="#020646" label="[02:06:46]">&lt;oriansj&gt;</a></span><span class="message">^fuzzy^fuzzing^</span></div><div class="line" id="020850"><span class="nick" style="color:#2e2a4a"><a href="#020850" label="[02:08:50]">&lt;stikonas&gt;</a></span><span class="message">that's good</span></div><div class="line" id="021030"><span class="nick" style="color:#8dd3c7"><a href="#021030" label="[02:10:30]">&lt;oriansj&gt;</a></span><span class="message">but much more tests need to be written before we know the instructions it generates produces correct behavior over all normally written code</span></div><div class="line" id="021111"><span class="nick" style="color:#2e2a4a"><a href="#021111" label="[02:11:11]">&lt;stikonas&gt;</a></span><span class="message">well, you could also start dogfooding a bit of that in stage0</span></div><div class="line" id="021136"><span class="nick" style="color:#2e2a4a"><a href="#021136" label="[02:11:36]">&lt;stikonas&gt;</a></span><span class="message">i.e. mescc-tools or M2-Mesoplanet could use switch now</span></div><div class="line" id="021148"><span class="nick" style="color:#8dd3c7"><a href="#021148" label="[02:11:48]">&lt;oriansj&gt;</a></span><span class="message">and mescc-tools-extras</span></div><div class="line" id="021609"><span class="nick" style="color:#2e2a4a"><a href="#021609" label="[02:16:09]">&lt;stikonas&gt;</a></span><span class="message">some projects like to claim that they write compiler in its own language and (make bootstrapping hard) in order to test features. But as we have shown, having bootstrap chain and also various helper tools gives you just as many tests...</span></div><div class="line" id="022700"><span class="nick" style="color:#80b1d3"><a href="#022700" label="[02:27:00]">&lt;muurkha&gt;</a></span><span class="message">they're more of a pain to maintain</span></div><div class="line" id="022724"><span class="nick" style="color:#80b1d3"><a href="#022724" label="[02:27:24]">&lt;muurkha&gt;</a></span><span class="message">I mean adding a feature to your language and being able to use it is fun</span></div><div class="line" id="022757"><span class="nick" style="color:#80b1d3"><a href="#022757" label="[02:27:57]">&lt;muurkha&gt;</a></span><span class="message">maintaining multiple slightly different copies of your compiler codebase maintained under different restrictive language subsets is the opposite of fun for most people</span></div><div class="line" id="023028"><span class="nick" style="color:#2e2a4a"><a href="#023028" label="[02:30:28]">&lt;stikonas&gt;</a></span><span class="message">not necesserily different coppies, e.g. you can have your language X written in C++, compiled with GCC, but then all other tooling (which most languages have too) can be written in that new language</span></div><div class="line" id="023103"><span class="nick" style="color:#80b1d3"><a href="#023103" label="[02:31:03]">&lt;muurkha&gt;</a></span><span class="message">sure, that's a thing you can do if you're a total masochist</span></div><div class="line" id="023120"><span class="nick" style="color:#80b1d3"><a href="#023120" label="[02:31:20]">&lt;muurkha&gt;</a></span><span class="message">or if your language is worse than C++ for writing compilers in, and a few such languages do exist.  Fortran 77, for example</span></div><div class="line" id="023131"><span class="nick" style="color:#2e2a4a"><a href="#023131" label="[02:31:31]">&lt;stikonas&gt;</a></span><span class="message">well, even inside gcc, you hav estuff like fortran</span></div><div class="line" id="023133"><span class="nick" style="color:#2e2a4a"><a href="#023133" label="[02:31:33]">&lt;stikonas&gt;</a></span><span class="message">yeah...</span></div><div class="line" id="023146"><span class="nick" style="color:#2e2a4a"><a href="#023146" label="[02:31:46]">&lt;stikonas&gt;</a></span><span class="message">well, doesn't have to be C++</span></div><div class="line" id="023155"><span class="nick" style="color:#2e2a4a"><a href="#023155" label="[02:31:55]">&lt;stikonas&gt;</a></span><span class="message">just one of the already bootstrapped languages</span></div><div class="line" id="023234"><span class="nick" style="color:#80b1d3"><a href="#023234" label="[02:32:34]">&lt;muurkha&gt;</a></span><span class="message">yeah, Scheme is fairly decent.  jcowan pointed out the other day that there is a widely supported (but withdrawn!) SRFI that supplies pattern matching</span></div><div class="line" id="023245"><span class="nick" style="color:#80b1d3"><a href="#023245" label="[02:32:45]">&lt;muurkha&gt;</a></span><span class="message">which I probably would have used for Ur-Scheme if I'd known about it</span></div><div class="line" id="025101"><span class="nick" style="color:#389600"><a href="#025101" label="[02:51:01]">&lt;Googulator&gt;</a></span><span class="message">Found the initrd size limit...</span></div><div class="line" id="025137"><span class="nick" style="color:#389600"><a href="#025137" label="[02:51:37]">&lt;Googulator&gt;</a></span><span class="message">In kexec-fiwix.c, we tell Fiwix how much RAM to reserve for the eventual Linux kernel to kexec into</span></div><div class="line" id="025139"><span class="nick" style="color:#389600"><a href="#025139" label="[02:51:39]">&lt;Googulator&gt;</a></span><span class="message"> kexec_proto=linux kexec_size=67000</span></div><div class="line" id="030629"><span class="nick" style="color:#8dd3c7"><a href="#030629" label="[03:06:29]">&lt;oriansj&gt;</a></span><span class="message">muurkha: I guess I am a masochist then, because I find writing a compiler in even assembly to be fun</span></div><div class="line" id="030639"><span class="nick" style="color:#80b1d3"><a href="#030639" label="[03:06:39]">&lt;muurkha&gt;</a></span><span class="message">:)</span></div><div class="line" id="030646"><span class="nick" style="color:#8dd3c7"><a href="#030646" label="[03:06:46]">&lt;oriansj&gt;</a></span><span class="message">and assembly is a much worse language than c++ to work in</span></div><div class="line" id="030712"><span class="nick" style="color:#8dd3c7"><a href="#030712" label="[03:07:12]">&lt;oriansj&gt;</a></span><span class="message">(in terms of productivity and ease of improvement)</span></div><div class="line" id="030717"><span class="nick" style="color:#80b1d3"><a href="#030717" label="[03:07:17]">&lt;muurkha&gt;</a></span><span class="message">maybe, I like assembly better</span></div><div class="line" id="030725"><span class="nick" style="color:#80b1d3"><a href="#030725" label="[03:07:25]">&lt;muurkha&gt;</a></span><span class="message">but it's certainly slower going</span></div><div class="line" id="030808"><span class="nick" style="color:#8dd3c7"><a href="#030808" label="[03:08:08]">&lt;oriansj&gt;</a></span><span class="message">well it is a bad language for figuring out what you want to do</span></div><div class="line" id="030828"><span class="nick" style="color:#8dd3c7"><a href="#030828" label="[03:08:28]">&lt;oriansj&gt;</a></span><span class="message">but it is pretty quick if you know exactly what you want to do and how to do it</span></div><div class="line" id="030846"><span class="nick" style="color:#80b1d3"><a href="#030846" label="[03:08:46]">&lt;muurkha&gt;</a></span><span class="message">it might depend in part on your programming environment</span></div><div class="line" id="030905"><span class="nick" style="color:#80b1d3"><a href="#030905" label="[03:09:05]">&lt;muurkha&gt;</a></span><span class="message">I think Minsky wrote a paper about how computers were good vehicles for poorly-thought-out ideas?</span></div><div class="line" id="030916"><span class="nick" style="color:#80b1d3"><a href="#030916" label="[03:09:16]">&lt;muurkha&gt;</a></span><span class="message">he liked interactively programming in machine code in DDT</span></div><div class="line" id="030952"><span class="nick" style="color:#80b1d3"><a href="#030952" label="[03:09:52]">&lt;muurkha&gt;</a></span><span class="message">yes, in 01967: &quot;WHY PROGRAMMING IS A GOOD MEDIUM FOR EXPRESSING POORLY UNDERSTOOD AND SLOPPILY­FORMULATED IDEAS&quot; <a rel="nofollow" href="https://web.media.mit.edu/~minsky/papers/Why%20programming%20is--.html">https://web.media.mit.edu/~minsky/papers/Why%20programming%20is--.html</a> </span></div><div class="line" id="030956"><span class="nick" style="color:#8dd3c7"><a href="#030956" label="[03:09:56]">&lt;oriansj&gt;</a></span><span class="message">well pdp-10s running ITS were much more fun than any system around these days</span></div><div class="line" id="031138"><span class="nick" style="color:#80b1d3"><a href="#031138" label="[03:11:38]">&lt;muurkha&gt;</a></span><span class="message">you can run one now if you want</span></div><div class="line" id="031143"><span class="nick" style="color:#80b1d3"><a href="#031143" label="[03:11:43]">&lt;muurkha&gt;</a></span><span class="message">but I think he wrote that paper before ITS</span></div><div class="line" id="031200"><span class="nick" style="color:#8dd3c7"><a href="#031200" label="[03:12:00]">&lt;oriansj&gt;</a></span><span class="message">and it is probably the inspiration for the LISP behavior on exceptions</span></div><div class="line" id="031237"><span class="nick" style="color:#8dd3c7"><a href="#031237" label="[03:12:37]">&lt;oriansj&gt;</a></span><span class="message">drop into a lisp shell and fix the code and inspect/mess with the variables if needed</span></div><div class="line" id="031324"><span class="nick" style="color:#80b1d3"><a href="#031324" label="[03:13:24]">&lt;muurkha&gt;</a></span><span class="message">ITS probably isn't the inspiration for that; you could do that in DDT in the 01950s</span></div><div class="line" id="031403"><span class="nick" style="color:#80b1d3"><a href="#031403" label="[03:14:03]">&lt;muurkha&gt;</a></span><span class="message">and all the BASIC environments I've used work that way too, which I suspect is what the original Dartmouth BASIC system did in the early 01960s</span></div><div class="line" id="031423"><span class="nick" style="color:#80b1d3"><a href="#031423" label="[03:14:23]">&lt;muurkha&gt;</a></span><span class="message">but it's very plausible that DDT was the inspiration for that LISP behavior</span></div><div class="line" id="031447"><span class="nick" style="color:#80b1d3"><a href="#031447" label="[03:14:47]">&lt;muurkha&gt;</a></span><span class="message">larsb described DDT the other day as &quot;Emacs for machine code&quot;, and I think there's something to that</span></div><div class="line" id="031641"><span class="nick" style="color:#8dd3c7"><a href="#031641" label="[03:16:41]">&lt;oriansj&gt;</a></span><span class="message">plus the 36bit machine was quite beautiful assembly</span></div><div class="line" id="031858"><span class="nick" style="color:#80b1d3"><a href="#031858" label="[03:18:58]">&lt;muurkha&gt;</a></span><span class="message">it looks nice but I haven't tried using it</span></div><div class="line" id="031921"><span class="nick" style="color:#80b1d3"><a href="#031921" label="[03:19:21]">&lt;muurkha&gt;</a></span><span class="message">it's a big benefit for DDT though</span></div><div class="line" id="032014"><span class="nick" style="color:#80b1d3"><a href="#032014" label="[03:20:14]">&lt;muurkha&gt;</a></span><span class="message">because the consistent instruction format makes it easy for DDT to follow a pointer from an instruction word to the operand word that it's referencing; it has a key for that</span></div><div class="line" id="032100"><span class="nick" style="color:#80b1d3"><a href="#032100" label="[03:21:00]">&lt;muurkha&gt;</a></span><span class="message">obviously that makes less sense when you're referring to a local variable in a stack frame or an instance variable in an object, but those were a lot less common than they are now</span></div><div class="line" id="035943"><span class="nick" style="color:#8dd3c7"><a href="#035943" label="[03:59:43]">&lt;oriansj&gt;</a></span><span class="message">and they actually passed syscall arguments in registers; which meant their .text sections were actually pure assembly instructions and no data</span></div><div class="line" id="040047"><span class="nick" style="color:#8dd3c7"><a href="#040047" label="[04:00:47]">&lt;oriansj&gt;</a></span><span class="message">which from first hand experience makes for a much simpler disassembler</span></div><div class="line" id="104148"><span class="nick" style="color:#6d2462"><a href="#104148" label="[10:41:48]">&lt;jcowan&gt;</a></span><span class="message">What made ITS special was that DDT was its shell</span></div><div class="line" id="134645"><span class="nick" style="color:#8dd3c7"><a href="#134645" label="[13:46:45]">&lt;oriansj&gt;</a></span><span class="message">13 hours of fuzzing, no segfaults yet</span></div><div class="line" id="231608"><span class="nick" style="color:#234e69"><a href="#231608" label="[23:16:08]">&lt;vagrantc&gt;</a></span><span class="message">hrm. struggling with updating the debian packages for mescc-tools 1.5+ due to the git submodule for M2libc ... which are a dependency for updating mes</span></div><div class="line" id="232234"><span class="nick" style="color:#234e69"><a href="#232234" label="[23:22:34]">&lt;vagrantc&gt;</a></span><span class="message">seems i have a few suboptimal approaches ... treat M2libc as a patch, manually create a tarball of the relevent M2libc bits, package M2libc as it's own source package ... or convince upstream to not use git submodules :)</span></div><div class="line" id="232346"><span class="nick" style="color:#234e69"><a href="#232346" label="[23:23:46]">&lt;vagrantc&gt;</a></span><span class="message">or is it plausible to build M2libc independently?</span></div><div class="line" id="232351"><span class="nick" style="color:#234e69"><a href="#232351" label="[23:23:51]">&lt;vagrantc&gt;</a></span><span class="message">and then just use that?</span></div><div class="line" id="232523"><span class="nick" style="color:#2e2a4a"><a href="#232523" label="[23:25:23]">&lt;stikonas&gt;</a></span><span class="message">vagrantc: why do you need to treat M2libc separately?</span></div><div class="line" id="232527"><span class="nick" style="color:#2e2a4a"><a href="#232527" label="[23:25:27]">&lt;stikonas&gt;</a></span><span class="message">it's included in the tarball</span></div><div class="line" id="232540"><span class="nick" style="color:#234e69"><a href="#232540" label="[23:25:40]">&lt;vagrantc&gt;</a></span><span class="message">stikonas: which tarball?</span></div><div class="line" id="232557"><span class="nick" style="color:#2e2a4a"><a href="#232557" label="[23:25:57]">&lt;stikonas&gt;</a></span><span class="message">vagrantc: release tarball</span></div><div class="line" id="232559"><span class="nick" style="color:#234e69"><a href="#232559" label="[23:25:59]">&lt;vagrantc&gt;</a></span><span class="message">the tarball of mescc-tools i have does not include it</span></div><div class="line" id="232609"><span class="nick" style="color:#2e2a4a"><a href="#232609" label="[23:26:09]">&lt;stikonas&gt;</a></span><span class="message">where did you get your tarball from?</span></div><div class="line" id="232616"><span class="nick" style="color:#2e2a4a"><a href="#232616" label="[23:26:16]">&lt;stikonas&gt;</a></span><span class="message">the one in the release announcement should have</span></div><div class="line" id="232621"><span class="nick" style="color:#2e2a4a"><a href="#232621" label="[23:26:21]">&lt;stikonas&gt;</a></span><span class="message">or the one in savannah download area too</span></div><div class="line" id="232636"><span class="nick" style="color:#234e69"><a href="#232636" label="[23:26:36]">&lt;vagrantc&gt;</a></span><span class="message">ok, will look for that one.</span></div><div class="line" id="232703"><span class="nick" style="color:#234e69"><a href="#232703" label="[23:27:03]">&lt;vagrantc&gt;</a></span><span class="message">i think i'm using one auto-generated from git as a web interface</span></div><div class="line" id="232945"><span class="nick" style="color:#234e69"><a href="#232945" label="[23:29:45]">&lt;vagrantc&gt;</a></span><span class="message">and then there's the question of where do i find the most up-to-date gpg key</span></div><div class="line" id="233150"><span class="nick" style="color:#234e69"><a href="#233150" label="[23:31:50]">&lt;vagrantc&gt;</a></span><span class="message">hrm. <a rel="nofollow" href="https://download.savannah.nongnu.org/releases/mescc-tools/">https://download.savannah.nongnu.org/releases/mescc-tools/</a>  only has 1.5.0 and 1.5.1 is out ...</span></div><div class="line" id="233229"><span class="nick" style="color:#234e69"><a href="#233229" label="[23:32:29]">&lt;vagrantc&gt;</a></span><span class="message">i have yet to even find a release announcement for mescc-tools</span></div><div class="line" id="233352"><span class="nick" style="color:#6c3d55"><a href="#233352" label="[23:33:52]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; vagrantc: announcement is on bootstrapoable list</span></div><div class="line" id="233405"><span class="nick" style="color:#6c3d55"><a href="#233405" label="[23:34:05]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; 1.5.0 is the latest</span></div><div class="line" id="233416"><span class="nick" style="color:#6c3d55"><a href="#233416" label="[23:34:16]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Though we messed up with tarballs a bit</span></div><div class="line" id="233421"><span class="nick" style="color:#6c3d55"><a href="#233421" label="[23:34:21]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Or got tags</span></div><div class="line" id="233510"><span class="nick" style="color:#6c3d55"><a href="#233510" label="[23:35:10]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; I pushed 1.5.0 tag to github (which had no tags) without realising that oriansj pushed 1.5.0 tag to savannah</span></div><div class="line" id="233532"><span class="nick" style="color:#6c3d55"><a href="#233532" label="[23:35:32]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; So later oriansj tagged savannah commit  with 1.5.1</span></div><div class="line" id="233620"><span class="nick" style="color:#6c3d55"><a href="#233620" label="[23:36:20]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; vagrantc: and my key is at <a rel="nofollow" href="https://stikonas.eu/andrius.asc">https://stikonas.eu/andrius.asc</a> </span></div><div class="line" id="233623"><span class="nick" style="color:#234e69"><a href="#233623" label="[23:36:23]">&lt;vagrantc&gt;</a></span><span class="message">so ... what is tagged as 1.5.1 is what is shipped as 1.5.0 ?</span></div><div class="line" id="233639"><span class="nick" style="color:#6c3d55"><a href="#233639" label="[23:36:39]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; On savannah yes</span></div><div class="line" id="233640"><span class="nick" style="color:#234e69"><a href="#233640" label="[23:36:40]">&lt;vagrantc&gt;</a></span><span class="message">or what is tagged as 1.5.1 is not a tag that should be used?</span></div><div class="line" id="233657"><span class="nick" style="color:#6c3d55"><a href="#233657" label="[23:36:57]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; On github is 1.5.0 both tag and release</span></div><div class="line" id="233704"><span class="nick" style="color:#234e69"><a href="#233704" label="[23:37:04]">&lt;vagrantc&gt;</a></span><span class="message">can we get a 1.5.2 that makes this madness go away? :)</span></div><div class="line" id="233718"><span class="nick" style="color:#6c3d55"><a href="#233718" label="[23:37:18]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; I guess we could...</span></div><div class="line" id="233726"><span class="nick" style="color:#234e69"><a href="#233726" label="[23:37:26]">&lt;vagrantc&gt;</a></span><span class="message">or at least, sweeps the madness under the rug</span></div><div class="line" id="233752"><span class="nick" style="color:#6c3d55"><a href="#233752" label="[23:37:52]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; I had no push access to savannah before this ...</span></div><div class="line" id="233808"><span class="nick" style="color:#6c3d55"><a href="#233808" label="[23:38:08]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; So didn't psy so much attention to it :(</span></div><div class="line" id="233820"><span class="nick" style="color:#6c3d55"><a href="#233820" label="[23:38:20]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Anyway, for now use that tarball</span></div><div class="line" id="233837"><span class="nick" style="color:#6c3d55"><a href="#233837" label="[23:38:37]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; I can later create a new one</span></div><div class="line" id="233911"><span class="nick" style="color:#6c3d55"><a href="#233911" label="[23:39:11]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; There is one other small fix since then anyway</span></div><div class="line" id="234027"><span class="nick" style="color:#234e69"><a href="#234027" label="[23:40:27]">&lt;vagrantc&gt;</a></span><span class="message">maybe i am not subscribed to the bootstrappable list...</span></div><div class="line" id="234113"><span class="nick" style="color:#80b1d3"><a href="#234113" label="[23:41:13]">&lt;muurkha&gt;</a></span><span class="message">oriansj: as opposed to, say, the PDP-8, where jcowan tells me you normally put the arguments after the call instruction?</span></div><div class="line" id="234223"><span class="nick" style="color:#2e2a4a"><a href="#234223" label="[23:42:23]">&lt;stikonas&gt;</a></span><span class="message">vagrantc: there is also changelog on github release page</span></div><div class="line" id="234239"><span class="nick" style="color:#234e69"><a href="#234239" label="[23:42:39]">&lt;vagrantc&gt;</a></span><span class="message">stikonas: should i pull tarballs from the github release page?</span></div><div class="line" id="234247"><span class="nick" style="color:#2e2a4a"><a href="#234247" label="[23:42:47]">&lt;stikonas&gt;</a></span><span class="message">should be the same</span></div><div class="line" id="234253"><span class="nick" style="color:#2e2a4a"><a href="#234253" label="[23:42:53]">&lt;stikonas&gt;</a></span><span class="message">I'll upload to both</span></div><div class="line" id="234259"><span class="nick" style="color:#2e2a4a"><a href="#234259" label="[23:42:59]">&lt;stikonas&gt;</a></span><span class="message">so savannah might be nicer in principle</span></div><div class="line" id="234301"><span class="nick" style="color:#2e2a4a"><a href="#234301" label="[23:43:01]">&lt;stikonas&gt;</a></span><span class="message">but up to you</span></div><div class="line" id="234328"><span class="nick" style="color:#234e69"><a href="#234328" label="[23:43:28]">&lt;vagrantc&gt;</a></span><span class="message">let's see if i can find the right one :)</span></div><div class="line" id="234331"><span class="nick" style="color:#2e2a4a"><a href="#234331" label="[23:43:31]">&lt;stikonas&gt;</a></span><span class="message">but you can at least read here <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/releases/tag/Release_1.5.0">https://github.com/oriansj/mescc-tools/releases/tag/Release_1.5.0</a> </span></div><div class="line" id="234344"><span class="nick" style="color:#2e2a4a"><a href="#234344" label="[23:43:44]">&lt;stikonas&gt;</a></span><span class="message">what changed... Though it's mostly the same content as changelog.org</span></div><div class="line" id="235824"><span class="nick" style="color:#234e69"><a href="#235824" label="[23:58:24]">&lt;vagrantc&gt;</a></span><span class="message">ok, seem to be on the right path finally...</span></div><div class="line" id="235859"><span class="nick" style="color:#234e69"><a href="#235859" label="[23:58:59]">&lt;vagrantc&gt;</a></span><span class="message">stikonas: thanks for wrapping up the confusion, but would definitely appreciate a new release that reduces the chances of confusion :)</span></div><div class="line" id="235940"><span class="nick" style="color:#2e2a4a"><a href="#235940" label="[23:59:40]">&lt;stikonas&gt;</a></span><span class="message">yeah, I'll make a new one as soon as I sort out my misbehaving mouse (probably due to being in the middle of upgrade, none of the buttons work, so I'm keyboard only)</span></div><br /></div></body></html>