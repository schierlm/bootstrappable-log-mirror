<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-12-31.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="001852"><span class="nick" style="color:#389600"><a href="#001852" label="[00:18:52]">&lt;muurkha&gt;</a></span><span class="message">I could be wrong but I don't think any of us here has significant hardware expertise, so we may not be in the best position to assess the threat</span></div><div class="line" id="001919"><span class="nick" style="color:#389600"><a href="#001919" label="[00:19:19]">&lt;muurkha&gt;</a></span><span class="message">I mean I don't, and you don't, oriansj.  maybe fossy or stikonas[m] or bauen1 or somebody does</span></div><div class="line" id="002509"><span class="nick" style="color:#8dd3c7"><a href="#002509" label="[00:25:09]">&lt;oriansj&gt;</a></span><span class="message">muurkha: absolutely correct.</span></div><div class="line" id="002944"><span class="nick" style="color:#2e2a4a"><a href="#002944" label="[00:29:44]">*</a></span><span class="message">vagrantc is racking up an extensive track record for breaking hardware</span></div><div class="line" id="002949"><span class="nick" style="color:#8dd3c7"><a href="#002949" label="[00:29:49]">&lt;oriansj&gt;</a></span><span class="message">It is kinda my last bootstrapping goal before I am *done* with a minor hope someone else does it first. Then one needs only that information printed and a simple hex0-monitor</span></div><div class="line" id="003157"><span class="nick" style="color:#6b8072"><a href="#003157" label="[00:31:57]">&lt;bauen1&gt;</a></span><span class="message">oriansj: that's a shame, it would be interesting to read that paper</span></div><div class="line" id="003305"><span class="nick" style="color:#6b8072"><a href="#003305" label="[00:33:05]">&lt;bauen1&gt;</a></span><span class="message">muurkha: i have experience with building toy cpus / vhdl / logic, but not with the reverse engineering of hardware (and the electrical / transistor knowledge that requires)</span></div><div class="line" id="004316"><span class="nick" style="color:#8dd3c7"><a href="#004316" label="[00:43:16]">&lt;oriansj&gt;</a></span><span class="message">also it'll be nice to see knight in an FPGA and hopefully in real hardware</span></div><div class="line" id="022146"><span class="nick" style="color:#6d2462"><a href="#022146" label="[02:21:46]">&lt;stikonas&gt;</a></span><span class="message">fossy: how do you compute checksums in qemu? hacked the build to output it to the screen?</span></div><div class="line" id="022230"><span class="nick" style="color:#6d2462"><a href="#022230" label="[02:22:30]">&lt;stikonas&gt;</a></span><span class="message">at some point I'll have to recalculate kexec checksum...</span></div><div class="line" id="022425"><span class="nick" style="color:#6d2462"><a href="#022425" label="[02:24:25]">&lt;stikonas&gt;</a></span><span class="message">I briefly tried changing sources directory, it's only a few lines of change but then a lot of checksums change</span></div><div class="line" id="022607"><span class="nick" style="color:#389600"><a href="#022607" label="[02:26:07]">&lt;muurkha&gt;</a></span><span class="message">bauen1: yeah, that's more or less where I am too.  I've spent maybe 100 hours in my life debugging logic circuits on breadboards, but my VHDL/Verilog knowledge is all spectator-sport armchair-quarterback bullshit, unlike yours</span></div><div class="line" id="045435"><span class="nick" style="color:#234e69"><a href="#045435" label="[04:54:35]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: hm? now that I'm checksumming packages rather than individual files, i'm just running sha256sum in the final bash prompt after everything finishes</span></div><div class="line" id="045445"><span class="nick" style="color:#234e69"><a href="#045445" label="[04:54:45]">&lt;fossy&gt;</a></span><span class="message">i don't have hardware experience, muurkha</span></div><div class="line" id="145652"><span class="nick" style="color:#6c3d55"><a href="#145652" label="[14:56:52]">&lt;doras&gt;</a></span><span class="message">If we're discussing sources, the next annoying part I'm struggling with is the nontrivial logic which determines where each tar should be staged under &quot;/after&quot;.</span></div><div class="line" id="145955"><span class="nick" style="color:#6d2462"><a href="#145955" label="[14:59:55]">&lt;stikonas&gt;</a></span><span class="message">doras: well, that can be changed but we need to first wait for fossy to land his changes</span></div><div class="line" id="150022"><span class="nick" style="color:#6d2462"><a href="#150022" label="[15:00:22]">&lt;stikonas&gt;</a></span><span class="message">doras: the simplest change is to leave everything in sources and move logic of moving tarballs into bootstrap chain</span></div><div class="line" id="150054"><span class="nick" style="color:#6d2462"><a href="#150054" label="[15:00:54]">&lt;stikonas&gt;</a></span><span class="message">or actually copying rather than moving</span></div><div class="line" id="150106"><span class="nick" style="color:#6d2462"><a href="#150106" label="[15:01:06]">&lt;stikonas&gt;</a></span><span class="message">since we only build cp binary in stage0-posix</span></div><div class="line" id="150126"><span class="nick" style="color:#6c3d55"><a href="#150126" label="[15:01:26]">&lt;doras&gt;</a></span><span class="message">Makes sense.</span></div><div class="line" id="150143"><span class="nick" style="color:#6d2462"><a href="#150143" label="[15:01:43]">&lt;stikonas&gt;</a></span><span class="message">or maybe make source packages know that sources are in /sources</span></div><div class="line" id="150148"><span class="nick" style="color:#6d2462"><a href="#150148" label="[15:01:48]">&lt;stikonas&gt;</a></span><span class="message">and unpack from there</span></div><div class="line" id="150243"><span class="nick" style="color:#6d2462"><a href="#150243" label="[15:02:43]">&lt;stikonas&gt;</a></span><span class="message">it makes it a bit less nice from development perspective but I guess that will be managable</span></div><div class="line" id="150311"><span class="nick" style="color:#6d2462"><a href="#150311" label="[15:03:11]">&lt;stikonas&gt;</a></span><span class="message">right now one has to maintain only downloadable list in python and checksum file</span></div><div class="line" id="150333"><span class="nick" style="color:#6d2462"><a href="#150333" label="[15:03:33]">&lt;stikonas&gt;</a></span><span class="message">moving into bootstrap means that we'll have a third place</span></div><div class="line" id="150357"><span class="nick" style="color:#6d2462"><a href="#150357" label="[15:03:57]">&lt;stikonas&gt;</a></span><span class="message">although logic in python will be simplified (only download into /sources directory)</span></div><div class="line" id="150438"><span class="nick" style="color:#6c3d55"><a href="#150438" label="[15:04:38]">&lt;doras&gt;</a></span><span class="message">I was thinking of staging sources in tmp/after/sources and then have the bootstrap figure out things from there.</span></div><div class="line" id="150628"><span class="nick" style="color:#6c3d55"><a href="#150628" label="[15:06:28]">&lt;doras&gt;</a></span><span class="message">But it's not so simple because the current logic just extracts every tar under tmp/after/&lt;package&gt;/src.</span></div><div class="line" id="150645"><span class="nick" style="color:#6c3d55"><a href="#150645" label="[15:06:45]">&lt;doras&gt;</a></span><span class="message">So each &quot;package&quot; extracts its own sources and doesn't touch others'.</span></div><div class="line" id="150749"><span class="nick" style="color:#6c3d55"><a href="#150749" label="[15:07:49]">&lt;doras&gt;</a></span><span class="message">I guess it can be achieved by being more explicit in the package logic and list exactly which tar is required for each package at the bootstrap level.</span></div><div class="line" id="150810"><span class="nick" style="color:#6d2462"><a href="#150810" label="[15:08:10]">&lt;stikonas&gt;</a></span><span class="message">doras: well, I think just in tmp/sources</span></div><div class="line" id="150822"><span class="nick" style="color:#6d2462"><a href="#150822" label="[15:08:22]">&lt;stikonas&gt;</a></span><span class="message">I'll later rename after to sysa too</span></div><div class="line" id="150835"><span class="nick" style="color:#6d2462"><a href="#150835" label="[15:08:35]">&lt;stikonas&gt;</a></span><span class="message">but that operation changes a lot of checksums</span></div><div class="line" id="150847"><span class="nick" style="color:#6d2462"><a href="#150847" label="[15:08:47]">&lt;stikonas&gt;</a></span><span class="message">and fossy is reworking checksum code right now</span></div><div class="line" id="150906"><span class="nick" style="color:#6c3d55"><a href="#150906" label="[15:09:06]">&lt;doras&gt;</a></span><span class="message">From what I could tell the sources are only relevant for the current tmp/after packages.</span></div><div class="line" id="151003"><span class="nick" style="color:#6c3d55"><a href="#151003" label="[15:10:03]">&lt;doras&gt;</a></span><span class="message">But either works</span></div><div class="line" id="151032"><span class="nick" style="color:#6d2462"><a href="#151032" label="[15:10:32]">&lt;stikonas&gt;</a></span><span class="message">well, and sysc also has source tarballs</span></div><div class="line" id="151043"><span class="nick" style="color:#6d2462"><a href="#151043" label="[15:10:43]">&lt;stikonas&gt;</a></span><span class="message">they are in sysc/usr/src/</span></div><div class="line" id="151124"><span class="nick" style="color:#6d2462"><a href="#151124" label="[15:11:24]">&lt;stikonas&gt;</a></span><span class="message">but at that time we have bash, so easier to script</span></div><div class="line" id="151207"><span class="nick" style="color:#6c3d55"><a href="#151207" label="[15:12:07]">&lt;doras&gt;</a></span><span class="message">Haven't gotten to sysc yet :)</span></div><div class="line" id="151228"><span class="nick" style="color:#6d2462"><a href="#151228" label="[15:12:28]">&lt;stikonas&gt;</a></span><span class="message">anyway, we can simplify quite a bit of preparation code</span></div><div class="line" id="151238"><span class="nick" style="color:#6d2462"><a href="#151238" label="[15:12:38]">&lt;stikonas&gt;</a></span><span class="message">but a bit will still be needed</span></div><div class="line" id="151243"><span class="nick" style="color:#6d2462"><a href="#151243" label="[15:12:43]">&lt;stikonas&gt;</a></span><span class="message">possibly something like this</span></div><div class="line" id="151255"><span class="nick" style="color:#6d2462"><a href="#151255" label="[15:12:55]">&lt;stikonas&gt;</a></span><span class="message">1) clone stage0-posix</span></div><div class="line" id="151308"><span class="nick" style="color:#6d2462"><a href="#151308" label="[15:13:08]">&lt;stikonas&gt;</a></span><span class="message">2) clone live-bootstrap</span></div><div class="line" id="151335"><span class="nick" style="color:#6d2462"><a href="#151335" label="[15:13:35]">&lt;stikonas&gt;</a></span><span class="message">if you want to run manually without python then 3) copy live-bootstrap over on top of stage0-posix</span></div><div class="line" id="151346"><span class="nick" style="color:#6d2462"><a href="#151346" label="[15:13:46]">&lt;stikonas&gt;</a></span><span class="message">4) download sources into /sources directory</span></div><div class="line" id="151353"><span class="nick" style="color:#6d2462"><a href="#151353" label="[15:13:53]">&lt;stikonas&gt;</a></span><span class="message">and run kaem-optional-seed</span></div><div class="line" id="151409"><span class="nick" style="color:#6d2462"><a href="#151409" label="[15:14:09]">&lt;stikonas&gt;</a></span><span class="message">I think that's the maximum we can achieve</span></div><div class="line" id="151513"><span class="nick" style="color:#6d2462"><a href="#151513" label="[15:15:13]">&lt;stikonas&gt;</a></span><span class="message">or maybe run bchroot kaem-optional-seed</span></div><div class="line" id="151620"><span class="nick" style="color:#6c3d55"><a href="#151620" label="[15:16:20]">&lt;doras&gt;</a></span><span class="message">That would be so much better if we could do that.</span></div><div class="line" id="151801"><span class="nick" style="color:#6d2462"><a href="#151801" label="[15:18:01]">&lt;stikonas&gt;</a></span><span class="message">yeah, I think that's doable</span></div><div class="line" id="151819"><span class="nick" style="color:#6d2462"><a href="#151819" label="[15:18:19]">&lt;stikonas&gt;</a></span><span class="message">at least run with some isolation</span></div><div class="line" id="151836"><span class="nick" style="color:#6d2462"><a href="#151836" label="[15:18:36]">&lt;stikonas&gt;</a></span><span class="message">not sure about run without isolation (just on normal system) without any chroots or anything</span></div><div class="line" id="151907"><span class="nick" style="color:#6d2462"><a href="#151907" label="[15:19:07]">&lt;stikonas&gt;</a></span><span class="message">stage0-posix can run like that but not live-bootstrap</span></div><div class="line" id="151934"><span class="nick" style="color:#6c3d55"><a href="#151934" label="[15:19:34]">&lt;doras&gt;</a></span><span class="message">If we could also convert the current source download logic to rely on a yaml manifest or similar, it would be so much easier to work with.</span></div><div class="line" id="151952"><span class="nick" style="color:#6d2462"><a href="#151952" label="[15:19:52]">&lt;stikonas&gt;</a></span><span class="message">well, that should be also doable</span></div><div class="line" id="152001"><span class="nick" style="color:#6d2462"><a href="#152001" label="[15:20:01]">&lt;stikonas&gt;</a></span><span class="message">yaml in python is easy enough to work</span></div><div class="line" id="152015"><span class="nick" style="color:#6d2462"><a href="#152015" label="[15:20:15]">&lt;stikonas&gt;</a></span><span class="message">just need to decide on format of that file</span></div><div class="line" id="152123"><span class="nick" style="color:#6d2462"><a href="#152123" label="[15:21:23]">&lt;stikonas&gt;</a></span><span class="message">could be something like package in one level, then tarball name as children nodes and then its children nodes is url</span></div><div class="line" id="152134"><span class="nick" style="color:#6d2462"><a href="#152134" label="[15:21:34]">&lt;stikonas&gt;</a></span><span class="message">but anyway, that's for later</span></div><div class="line" id="152219"><span class="nick" style="color:#6b8072"><a href="#152219" label="[15:22:19]">&lt;bauen1&gt;</a></span><span class="message">i do remember that i still have some code that uses gnu stow to make pseudo packages, is that still of interest for live-bootstrap ?</span></div><div class="line" id="152311"><span class="nick" style="color:#6c3d55"><a href="#152311" label="[15:23:11]">&lt;doras&gt;</a></span><span class="message">It's better to keep the format as flat as possible. I think this would work well: each node contains: url, destination directory and file name.</span></div><div class="line" id="152532"><span class="nick" style="color:#6c3d55"><a href="#152532" label="[15:25:32]">&lt;doras&gt;</a></span><span class="message">So for example for mes you'd have: url: <a rel="nofollow" href="https://github.com/oriansj/mes-m2/archive/75a50911d89a84b7aa5ebabab52eb09795c0d61b.tar.gz">https://github.com/oriansj/mes-m2/archive/75a50911d89a84b7aa5ebabab52eb09795c0d61b.tar.gz</a>,  destination: sysa/tmp/after/mes/src, filename: mes.tar.gz</span></div><div class="line" id="152535"><span class="nick" style="color:#6d2462"><a href="#152535" label="[15:25:35]">&lt;stikonas&gt;</a></span><span class="message">bauen1: I think fossy is replacing it with something else</span></div><div class="line" id="152559"><span class="nick" style="color:#6d2462"><a href="#152559" label="[15:25:59]">&lt;stikonas&gt;</a></span><span class="message">but I'm not sure yet how common fossy's and your packages are</span></div><div class="line" id="152608"><span class="nick" style="color:#6d2462"><a href="#152608" label="[15:26:08]">&lt;stikonas&gt;</a></span><span class="message">i.e. are they one or the other or orthogonal</span></div><div class="line" id="152649"><span class="nick" style="color:#6d2462"><a href="#152649" label="[15:26:49]">&lt;stikonas&gt;</a></span><span class="message">yeah, maybe flat is better...</span></div><div class="line" id="152723"><span class="nick" style="color:#6c3d55"><a href="#152723" label="[15:27:23]">&lt;doras&gt;</a></span><span class="message">stikonas: I guess it would also be useful to have the hash in the manifest for downloading purposes, but that would duplicate the package hashes to two files, won't it?</span></div><div class="line" id="152744"><span class="nick" style="color:#6c3d55"><a href="#152744" label="[15:27:44]">&lt;doras&gt;</a></span><span class="message">I mean the tar hashes.</span></div><div class="line" id="152748"><span class="nick" style="color:#6d2462"><a href="#152748" label="[15:27:48]">&lt;stikonas&gt;</a></span><span class="message">hmm, it would...</span></div><div class="line" id="152800"><span class="nick" style="color:#6d2462"><a href="#152800" label="[15:28:00]">&lt;stikonas&gt;</a></span><span class="message">but maybe you can just download and run sha256sum on everything?</span></div><div class="line" id="152804"><span class="nick" style="color:#6d2462"><a href="#152804" label="[15:28:04]">&lt;stikonas&gt;</a></span><span class="message">we'll see</span></div><div class="line" id="152819"><span class="nick" style="color:#6d2462"><a href="#152819" label="[15:28:19]">&lt;stikonas&gt;</a></span><span class="message">that's a bit too far to plan now</span></div><div class="line" id="152834"><span class="nick" style="color:#6c3d55"><a href="#152834" label="[15:28:34]">&lt;doras&gt;</a></span><span class="message">Hmmm...</span></div><div class="line" id="152847"><span class="nick" style="color:#6d2462"><a href="#152847" label="[15:28:47]">&lt;stikonas&gt;</a></span><span class="message">first I wanted to simplify after-&gt;sysa rename</span></div><div class="line" id="152856"><span class="nick" style="color:#6c3d55"><a href="#152856" label="[15:28:56]">&lt;doras&gt;</a></span><span class="message">When are the hashes currently checked?</span></div><div class="line" id="152901"><span class="nick" style="color:#6d2462"><a href="#152901" label="[15:29:01]">&lt;stikonas&gt;</a></span><span class="message">on download</span></div><div class="line" id="152911"><span class="nick" style="color:#6c3d55"><a href="#152911" label="[15:29:11]">&lt;doras&gt;</a></span><span class="message">Only on download?</span></div><div class="line" id="152912"><span class="nick" style="color:#6d2462"><a href="#152912" label="[15:29:12]">&lt;stikonas&gt;</a></span><span class="message">rootfs.py checks them</span></div><div class="line" id="152915"><span class="nick" style="color:#6d2462"><a href="#152915" label="[15:29:15]">&lt;stikonas&gt;</a></span><span class="message">yes, only on download</span></div><div class="line" id="152921"><span class="nick" style="color:#6c3d55"><a href="#152921" label="[15:29:21]">&lt;doras&gt;</a></span><span class="message">Oh</span></div><div class="line" id="152937"><span class="nick" style="color:#6d2462"><a href="#152937" label="[15:29:37]">&lt;stikonas&gt;</a></span><span class="message">well, download happens on each run</span></div><div class="line" id="152943"><span class="nick" style="color:#6c3d55"><a href="#152943" label="[15:29:43]">&lt;doras&gt;</a></span><span class="message">So it wouldn't duplicate the hashes, it would just move them to the manifest.</span></div><div class="line" id="152956"><span class="nick" style="color:#6d2462"><a href="#152956" label="[15:29:56]">&lt;stikonas&gt;</a></span><span class="message">hmm, that's right</span></div><div class="line" id="153001"><span class="nick" style="color:#6c3d55"><a href="#153001" label="[15:30:01]">&lt;doras&gt;</a></span><span class="message">And then when a download completes, the hash would be verified.</span></div><div class="line" id="153012"><span class="nick" style="color:#6d2462"><a href="#153012" label="[15:30:12]">&lt;stikonas&gt;</a></span><span class="message">so maybe it's fine</span></div><div class="line" id="153022"><span class="nick" style="color:#6d2462"><a href="#153022" label="[15:30:22]">&lt;stikonas&gt;</a></span><span class="message">although now producing hash file was really nice...</span></div><div class="line" id="153044"><span class="nick" style="color:#6d2462"><a href="#153044" label="[15:30:44]">&lt;stikonas&gt;</a></span><span class="message">just sha256sum * &gt;&gt; ../SHA256SUMS.sources</span></div><div class="line" id="153102"><span class="nick" style="color:#6c3d55"><a href="#153102" label="[15:31:02]">&lt;doras&gt;</a></span><span class="message">I think we can create a helper script for this.</span></div><div class="line" id="153104"><span class="nick" style="color:#6d2462"><a href="#153104" label="[15:31:04]">&lt;stikonas&gt;</a></span><span class="message">but it's fine, we don't change them often</span></div><div class="line" id="153118"><span class="nick" style="color:#6d2462"><a href="#153118" label="[15:31:18]">&lt;stikonas&gt;</a></span><span class="message">yeah, we can do a script too</span></div><div class="line" id="153138"><span class="nick" style="color:#6d2462"><a href="#153138" label="[15:31:38]">&lt;stikonas&gt;</a></span><span class="message">ok, I'll be back in an hour or so...</span></div><div class="line" id="154324"><span class="nick" style="color:#6c3d55"><a href="#154324" label="[15:43:24]">&lt;doras&gt;</a></span><span class="message">It may even be useful to have separate manifests for sysa, sysb and sysc, so it's easy to track exactly which sources each require, so if someone only wants to bootstrap sysa, they wouldn't need to download all the rest.</span></div><div class="line" id="170017"><span class="nick" style="color:#6c3d55"><a href="#170017" label="[17:00:17]">&lt;doras&gt;</a></span><span class="message">I couldn't find where the stage0 binary checksums are verified. The ones under sysa/stage0-posix/checksums.</span></div><div class="line" id="170341"><span class="nick" style="color:#6c3d55"><a href="#170341" label="[17:03:41]">&lt;doras&gt;</a></span><span class="message">Perhaps they aren't?</span></div><div class="line" id="173506"><span class="nick" style="color:#6d2462"><a href="#173506" label="[17:35:06]">&lt;stikonas&gt;</a></span><span class="message">doras: they are verified by stage0-posix</span></div><div class="line" id="173541"><span class="nick" style="color:#6d2462"><a href="#173541" label="[17:35:41]">&lt;stikonas&gt;</a></span><span class="message">doras: <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/blob/master/x86/kaem.run#L44">https://github.com/oriansj/stage0-posix/blob/master/x86/kaem.run#L44</a> </span></div><div class="line" id="173605"><span class="nick" style="color:#6d2462"><a href="#173605" label="[17:36:05]">&lt;stikonas&gt;</a></span><span class="message">using the sha256sum that we just built</span></div><div class="line" id="173628"><span class="nick" style="color:#6c3d55"><a href="#173628" label="[17:36:28]">&lt;doras&gt;</a></span><span class="message">stikonas: so is sysa/stage0-posix/checksums an unused leftover in live-bootstrap?</span></div><div class="line" id="173639"><span class="nick" style="color:#6d2462"><a href="#173639" label="[17:36:39]">&lt;stikonas&gt;</a></span><span class="message">probably, let me check</span></div><div class="line" id="173752"><span class="nick" style="color:#6d2462"><a href="#173752" label="[17:37:52]">&lt;stikonas&gt;</a></span><span class="message">yes, it's not used</span></div><div class="line" id="173754"><span class="nick" style="color:#6d2462"><a href="#173754" label="[17:37:54]">&lt;stikonas&gt;</a></span><span class="message">I can delete it</span></div><div class="line" id="173849"><span class="nick" style="color:#6d2462"><a href="#173849" label="[17:38:49]">&lt;stikonas&gt;</a></span><span class="message">it might be from before stage0-posix had added checksums</span></div><div class="line" id="173927"><span class="nick" style="color:#6d2462"><a href="#173927" label="[17:39:27]">&lt;stikonas&gt;</a></span><span class="message">doras: pushed</span></div><div class="line" id="174018"><span class="nick" style="color:#6d2462"><a href="#174018" label="[17:40:18]">&lt;stikonas&gt;</a></span><span class="message">anyway, keep in mind that these checksum files are just for us to be more confident that bootstrap is reproducible</span></div><div class="line" id="174044"><span class="nick" style="color:#6d2462"><a href="#174044" label="[17:40:44]">&lt;stikonas&gt;</a></span><span class="message">but it's not &quot;a proof&quot;</span></div><div class="line" id="174134"><span class="nick" style="color:#6d2462"><a href="#174134" label="[17:41:34]">&lt;stikonas&gt;</a></span><span class="message">i.e. one can imagine some malicious sha256sum binary that prints fake checksum</span></div><div class="line" id="174522"><span class="nick" style="color:#6d2462"><a href="#174522" label="[17:45:22]">&lt;stikonas&gt;</a></span><span class="message">for somebody to prove that there is no backdoor in sha256sum, one has to externally check hex0</span></div><div class="line" id="174536"><span class="nick" style="color:#6d2462"><a href="#174536" label="[17:45:36]">&lt;stikonas&gt;</a></span><span class="message">(i.e. not with sha256sum that we just built)</span></div><div class="line" id="174705"><span class="nick" style="color:#6d2462"><a href="#174705" label="[17:47:05]">&lt;stikonas&gt;</a></span><span class="message">this whole thing is I guess related to Goedel's incompleteness theorem</span></div><div class="line" id="174716"><span class="nick" style="color:#6d2462"><a href="#174716" label="[17:47:16]">&lt;stikonas&gt;</a></span><span class="message">that no system containing arithmetic can prove its own consistency</span></div><div class="line" id="174840"><span class="nick" style="color:#6c3d55"><a href="#174840" label="[17:48:40]">&lt;doras&gt;</a></span><span class="message">I just gave a Matrix-level thumbs up. I wonder what it did in IRC, if at all.</span></div><div class="line" id="174850"><span class="nick" style="color:#6b8072"><a href="#174850" label="[17:48:50]">&lt;bauen1&gt;</a></span><span class="message">doras: nothing</span></div><div class="line" id="174857"><span class="nick" style="color:#6c3d55"><a href="#174857" label="[17:48:57]">&lt;doras&gt;</a></span><span class="message">:)</span></div><div class="line" id="174903"><span class="nick" style="color:#6c3d55"><a href="#174903" label="[17:49:03]">&lt;doras&gt;</a></span><span class="message">👍️</span></div><div class="line" id="174911"><span class="nick" style="color:#6c3d55"><a href="#174911" label="[17:49:11]">&lt;doras&gt;</a></span><span class="message">Does that look better?</span></div><div class="line" id="175502"><span class="nick" style="color:#6b8072"><a href="#175502" label="[17:55:02]">&lt;bauen1&gt;</a></span><span class="message">well, i probably don't have the appropiate font installed because it renders as a box</span></div><div class="line" id="180419"><span class="nick" style="color:#6b8072"><a href="#180419" label="[18:04:19]">&lt;bauen1&gt;</a></span><span class="message">how far is live-bootstrap at this point ? from the readme it can finally compile a linux kernel, so it can't be that far away, right ?</span></div><div class="line" id="180527"><span class="nick" style="color:#6b8072"><a href="#180527" label="[18:05:27]">&lt;bauen1&gt;</a></span><span class="message">oh and it can build guile, so that should be pretty close to bootstrapping guix ?</span></div><div class="line" id="180823"><span class="nick" style="color:#6d2462"><a href="#180823" label="[18:08:23]">&lt;stikonas&gt;</a></span><span class="message">I can see thumbs up icon on my font</span></div><div class="line" id="180841"><span class="nick" style="color:#6d2462"><a href="#180841" label="[18:08:41]">&lt;stikonas&gt;</a></span><span class="message">bauen1: yes, it can build guile and gcc 4.7.4</span></div><div class="line" id="180859"><span class="nick" style="color:#6d2462"><a href="#180859" label="[18:08:59]">&lt;stikonas&gt;</a></span><span class="message">bauen1: although, guix bootstrap would probably belong in a project on top of live-bootstrap</span></div><div class="line" id="180917"><span class="nick" style="color:#6d2462"><a href="#180917" label="[18:09:17]">&lt;stikonas&gt;</a></span><span class="message">(and other distros too)</span></div><div class="line" id="180931"><span class="nick" style="color:#6b8072"><a href="#180931" label="[18:09:31]">&lt;bauen1&gt;</a></span><span class="message">stikonas: i agree</span></div><div class="line" id="180932"><span class="nick" style="color:#6d2462"><a href="#180932" label="[18:09:32]">&lt;stikonas&gt;</a></span><span class="message">bauen1: we initially built guile to be able to run autogen</span></div><div class="line" id="180946"><span class="nick" style="color:#6b8072"><a href="#180946" label="[18:09:46]">&lt;bauen1&gt;</a></span><span class="message">so that means live-bootstrap still needs to build a newer version of gcc ?</span></div><div class="line" id="180949"><span class="nick" style="color:#6d2462"><a href="#180949" label="[18:09:49]">&lt;stikonas&gt;</a></span><span class="message">bauen1: but autogen turned out to be fairly impossible to bootsrtap without using pre-generated files</span></div><div class="line" id="181003"><span class="nick" style="color:#6d2462"><a href="#181003" label="[18:10:03]">&lt;stikonas&gt;</a></span><span class="message">bauen1: well, we can get a newer version</span></div><div class="line" id="181013"><span class="nick" style="color:#6d2462"><a href="#181013" label="[18:10:13]">&lt;stikonas&gt;</a></span><span class="message">it's just a couple of packages on top</span></div><div class="line" id="181023"><span class="nick" style="color:#6c3d55"><a href="#181023" label="[18:10:23]">&lt;doras&gt;</a></span><span class="message">stikonas: is SHA256SUMS.sources currently copied to sysa/tmp/after for no reason?</span></div><div class="line" id="181029"><span class="nick" style="color:#6d2462"><a href="#181029" label="[18:10:29]">&lt;stikonas&gt;</a></span><span class="message">although due to lack of autogen, binutils and gcc build scripts are a bit nasty</span></div><div class="line" id="181038"><span class="nick" style="color:#6d2462"><a href="#181038" label="[18:10:38]">&lt;stikonas&gt;</a></span><span class="message">doras: yes, right now for now reason</span></div><div class="line" id="181049"><span class="nick" style="color:#6b8072"><a href="#181049" label="[18:10:49]">&lt;bauen1&gt;</a></span><span class="message">stikonas: and the pregenerated files are too big to write from hand / modify ?</span></div><div class="line" id="181059"><span class="nick" style="color:#6d2462"><a href="#181059" label="[18:10:59]">&lt;stikonas&gt;</a></span><span class="message">it was for potential future use if we decide to check tarballs inside bootstrap</span></div><div class="line" id="181137"><span class="nick" style="color:#6d2462"><a href="#181137" label="[18:11:37]">&lt;stikonas&gt;</a></span><span class="message">bauen1: for autogen it's not clear how to approach that</span></div><div class="line" id="181149"><span class="nick" style="color:#6d2462"><a href="#181149" label="[18:11:49]">&lt;stikonas&gt;</a></span><span class="message">for gcc/binutils, Makefile.in uses autogen mostly as templating engine</span></div><div class="line" id="181208"><span class="nick" style="color:#6d2462"><a href="#181208" label="[18:12:08]">&lt;stikonas&gt;</a></span><span class="message">i.e. one could rewrite it to use something else (e.g. jinja2)</span></div><div class="line" id="181224"><span class="nick" style="color:#6d2462"><a href="#181224" label="[18:12:24]">&lt;stikonas&gt;</a></span><span class="message">but that's still quite a bit of work</span></div><div class="line" id="181253"><span class="nick" style="color:#6d2462"><a href="#181253" label="[18:12:53]">&lt;stikonas&gt;</a></span><span class="message">for autogen, all the versions that we found (even already first version in git) has files that were generated with autogen</span></div><div class="line" id="181300"><span class="nick" style="color:#6d2462"><a href="#181300" label="[18:13:00]">&lt;stikonas&gt;</a></span><span class="message">if you want, you can take a look</span></div><div class="line" id="181306"><span class="nick" style="color:#6d2462"><a href="#181306" label="[18:13:06]">&lt;stikonas&gt;</a></span><span class="message">but both me and fossy tried to look a bit</span></div><div class="line" id="181316"><span class="nick" style="color:#6d2462"><a href="#181316" label="[18:13:16]">&lt;stikonas&gt;</a></span><span class="message">and it's just too scary</span></div><div class="line" id="181504"><span class="nick" style="color:#6b8072"><a href="#181504" label="[18:15:04]">&lt;bauen1&gt;</a></span><span class="message">&gt; AutoGen will accept either its own definition format, or XML files as definition input, in addition to CGI data (for producing dynamic HTML) and traditional AutoGen definitions.</span></div><div class="line" id="181508"><span class="nick" style="color:#6d2462"><a href="#181508" label="[18:15:08]">&lt;stikonas&gt;</a></span><span class="message">bauen1: well, maybe one can try to do the same with autogen</span></div><div class="line" id="181509"><span class="nick" style="color:#6b8072"><a href="#181509" label="[18:15:09]">&lt;bauen1&gt;</a></span><span class="message">yes that does indeed look scary</span></div><div class="line" id="181509"><span class="nick" style="color:#6d2462"><a href="#181509" label="[18:15:09]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/autogen.git/tree/autoopts?id=8c4ae21e5a19d32036965da9753c6b2be9b753e0">https://git.savannah.gnu.org/cgit/autogen.git/tree/autoopts?id=8c4ae21e5a19d32036965da9753c6b2be9b753e0</a> </span></div><div class="line" id="181513"><span class="nick" style="color:#6d2462"><a href="#181513" label="[18:15:13]">&lt;stikonas&gt;</a></span><span class="message">this is the first version</span></div><div class="line" id="181520"><span class="nick" style="color:#6d2462"><a href="#181520" label="[18:15:20]">&lt;stikonas&gt;</a></span><span class="message">that is in git</span></div><div class="line" id="181528"><span class="nick" style="color:#6d2462"><a href="#181528" label="[18:15:28]">&lt;stikonas&gt;</a></span><span class="message">although, I seem to remember that fossy said it was broken</span></div><div class="line" id="181618"><span class="nick" style="color:#6b8072"><a href="#181618" label="[18:16:18]">&lt;bauen1&gt;</a></span><span class="message">stikonas: how do i recognise a file build by autogen ?</span></div><div class="line" id="181627"><span class="nick" style="color:#6d2462"><a href="#181627" label="[18:16:27]">&lt;stikonas&gt;</a></span><span class="message">well, tpl files are all autogen input files</span></div><div class="line" id="181657"><span class="nick" style="color:#6d2462"><a href="#181657" label="[18:16:57]">&lt;stikonas&gt;</a></span><span class="message">maybe makefile has some hint</span></div><div class="line" id="181713"><span class="nick" style="color:#6d2462"><a href="#181713" label="[18:17:13]">&lt;stikonas&gt;</a></span><span class="message">well, in gcc it explicitely says autogenerated by</span></div><div class="line" id="181714"><span class="nick" style="color:#6b8072"><a href="#181714" label="[18:17:14]">&lt;bauen1&gt;</a></span><span class="message">oh what the fuck</span></div><div class="line" id="181739"><span class="nick" style="color:#6d2462"><a href="#181739" label="[18:17:39]">&lt;stikonas&gt;</a></span><span class="message">e.g. <a rel="nofollow" href="https://raw.githubusercontent.com/gcc-mirror/gcc/master/Makefile.in">https://raw.githubusercontent.com/gcc-mirror/gcc/master/Makefile.in</a> </span></div><div class="line" id="181742"><span class="nick" style="color:#6b8072"><a href="#181742" label="[18:17:42]">&lt;bauen1&gt;</a></span><span class="message">fossy: what's broken about the first version of autogen ?</span></div><div class="line" id="181758"><span class="nick" style="color:#6d2462"><a href="#181758" label="[18:17:58]">&lt;stikonas&gt;</a></span><span class="message"># Makefile.in is generated from Makefile.tpl by 'autogen Makefile.def'.</span></div><div class="line" id="181843"><span class="nick" style="color:#6d2462"><a href="#181843" label="[18:18:43]">&lt;stikonas&gt;</a></span><span class="message">bauen1: also autogen tightly integrates with guile and probably won't always work with guile 3, so that might give extra headache</span></div><div class="line" id="181849"><span class="nick" style="color:#6d2462"><a href="#181849" label="[18:18:49]">&lt;stikonas&gt;</a></span><span class="message">although, maybe that's solvable</span></div><div class="line" id="181851"><span class="nick" style="color:#6b8072"><a href="#181851" label="[18:18:51]">&lt;bauen1&gt;</a></span><span class="message">stikonas: so the first version contains 460 + 274 + 278 lines of autogen input, so that doesn't seem that bad, and most of it could be skipped if it's about options we don't care about</span></div><div class="line" id="182006"><span class="nick" style="color:#6d2462"><a href="#182006" label="[18:20:06]">&lt;stikonas&gt;</a></span><span class="message">bauen1: I can't even run configure there configure: error: can not find sources in . or ..</span></div><div class="line" id="182019"><span class="nick" style="color:#6d2462"><a href="#182019" label="[18:20:19]">&lt;stikonas&gt;</a></span><span class="message">although, maybe one can try to build without autotools</span></div><div class="line" id="182045"><span class="nick" style="color:#6d2462"><a href="#182045" label="[18:20:45]">&lt;stikonas&gt;</a></span><span class="message">bauen1: ok, another folder clearly contains autogen generated c file <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/autogen.git/tree/compat?id=8c4ae21e5a19d32036965da9753c6b2be9b753e0">https://git.savannah.gnu.org/cgit/autogen.git/tree/compat?id=8c4ae21e5a19d32036965da9753c6b2be9b753e0</a> </span></div><div class="line" id="182103"><span class="nick" style="color:#6d2462"><a href="#182103" label="[18:21:03]">&lt;stikonas&gt;</a></span><span class="message">strsignal.h is autogenerated</span></div><div class="line" id="182114"><span class="nick" style="color:#6b8072"><a href="#182114" label="[18:21:14]">&lt;bauen1&gt;</a></span><span class="message">yeah, why would you even do that ....</span></div><div class="line" id="182136"><span class="nick" style="color:#6d2462"><a href="#182136" label="[18:21:36]">&lt;stikonas&gt;</a></span><span class="message">fossy even tried to write autogen maintainer</span></div><div class="line" id="182211"><span class="nick" style="color:#6d2462"><a href="#182211" label="[18:22:11]">&lt;stikonas&gt;</a></span><span class="message">but we didn't get any useful answer. Just something like you need either autogen or use files from repo/tarball</span></div><div class="line" id="182232"><span class="nick" style="color:#6b8072"><a href="#182232" label="[18:22:32]">&lt;bauen1&gt;</a></span><span class="message">urgh</span></div><div class="line" id="182239"><span class="nick" style="color:#6d2462"><a href="#182239" label="[18:22:39]">&lt;stikonas&gt;</a></span><span class="message">bauen1: so that is basically why nobody added autogen to live-bootstrap yet...</span></div><div class="line" id="182255"><span class="nick" style="color:#6d2462"><a href="#182255" label="[18:22:55]">&lt;stikonas&gt;</a></span><span class="message">if somebody can unentangle this mess it would definitely be good</span></div><div class="line" id="182303"><span class="nick" style="color:#6d2462"><a href="#182303" label="[18:23:03]">&lt;stikonas&gt;</a></span><span class="message">but I'm not very hopeful on this</span></div><div class="line" id="182339"><span class="nick" style="color:#6d2462"><a href="#182339" label="[18:23:39]">&lt;stikonas&gt;</a></span><span class="message">maybe somebody who is familiar with autogen and scheme already can do a quicker job</span></div><div class="line" id="182348"><span class="nick" style="color:#6d2462"><a href="#182348" label="[18:23:48]">&lt;stikonas&gt;</a></span><span class="message">but starting from scratch is hard</span></div><div class="line" id="182348"><span class="nick" style="color:#6b8072"><a href="#182348" label="[18:23:48]">&lt;bauen1&gt;</a></span><span class="message">stikonas: if building the version that you've linked &quot;initial revision&quot; will help, that should be doable at least</span></div><div class="line" id="182415"><span class="nick" style="color:#6d2462"><a href="#182415" label="[18:24:15]">&lt;stikonas&gt;</a></span><span class="message">well, it's just a guess now, but presumably one can try to build on top of that</span></div><div class="line" id="182421"><span class="nick" style="color:#6d2462"><a href="#182421" label="[18:24:21]">&lt;stikonas&gt;</a></span><span class="message">well, that's how I managed to build perl</span></div><div class="line" id="182433"><span class="nick" style="color:#6d2462"><a href="#182433" label="[18:24:33]">&lt;stikonas&gt;</a></span><span class="message">but it wasn't nowhere near as bad</span></div><div class="line" id="182445"><span class="nick" style="color:#6d2462"><a href="#182445" label="[18:24:45]">&lt;stikonas&gt;</a></span><span class="message">I had to rewrite some perl scripts from perl 5.000 in awk</span></div><div class="line" id="182509"><span class="nick" style="color:#6d2462"><a href="#182509" label="[18:25:09]">&lt;stikonas&gt;</a></span><span class="message">and then we did a few jumps via intermediate perl versions (maybe 6 of them)</span></div><div class="line" id="182531"><span class="nick" style="color:#6b8072"><a href="#182531" label="[18:25:31]">&lt;bauen1&gt;</a></span><span class="message">stikonas: i suspect you'll need a few more for autogen :(</span></div><div class="line" id="182540"><span class="nick" style="color:#6d2462"><a href="#182540" label="[18:25:40]">&lt;stikonas&gt;</a></span><span class="message">probably</span></div><div class="line" id="182557"><span class="nick" style="color:#6d2462"><a href="#182557" label="[18:25:57]">&lt;stikonas&gt;</a></span><span class="message">e.g. replaced opcode.perl with <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysa/perl-5.000/files/opcode.awk">https://github.com/fosslinux/live-bootstrap/blob/master/sysa/perl-5.000/files/opcode.awk</a> </span></div><div class="line" id="182603"><span class="nick" style="color:#6d2462"><a href="#182603" label="[18:26:03]">&lt;stikonas&gt;</a></span><span class="message">but these are fairly small scripts</span></div><div class="line" id="183245"><span class="nick" style="color:#6b8072"><a href="#183245" label="[18:32:45]">&lt;bauen1&gt;</a></span><span class="message">of course somebody had the smart idea to add an eval / shell command to a text processor</span></div><div class="line" id="185132"><span class="nick" style="color:#6b8072"><a href="#185132" label="[18:51:32]">&lt;bauen1&gt;</a></span><span class="message">yep that first commit is horribly broken</span></div><div class="line" id="185346"><span class="nick" style="color:#6b8072"><a href="#185346" label="[18:53:46]">&lt;bauen1&gt;</a></span><span class="message">like, where tf did the `src` directory go</span></div><div class="line" id="185917"><span class="nick" style="color:#6b8072"><a href="#185917" label="[18:59:17]">&lt;bauen1&gt;</a></span><span class="message">stikonas: by cleverly defining the HAVE_XXX macros you could exclude most (if not all) code in the compat directory, but the src folder ist just misssing</span></div><div class="line" id="190420"><span class="nick" style="color:#6d2462"><a href="#190420" label="[19:04:20]">&lt;stikonas&gt;</a></span><span class="message">yeah, so maybe don't look at that first commit</span></div><div class="line" id="194958"><span class="nick" style="color:#6b8072"><a href="#194958" label="[19:49:58]">&lt;bauen1&gt;</a></span><span class="message">yeah, i'll go back to playing with hardware i think</span></div><div class="line" id="200822"><span class="nick" style="color:#6d2462"><a href="#200822" label="[20:08:22]">&lt;stikonas&gt;</a></span><span class="message">yeah, autogen is mean :D</span></div><div class="line" id="200903"><span class="nick" style="color:#6d2462"><a href="#200903" label="[20:09:03]">&lt;stikonas&gt;</a></span><span class="message">but unfortunately gcc and binutils use it for Makefile.in :(</span></div><br /></div></body></html>