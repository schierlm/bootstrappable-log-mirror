<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-12-05.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000130"><span class="nick" style="color:#389600"><a href="#000130" label="[00:01:30]">&lt;oriansj&gt;</a></span><span class="message">janneke: or it is so fun people don't even think to ask anyone for help</span></div><div class="line" id="064301"><span class="nick" style="color:#8dd3c7"><a href="#064301" label="[06:43:01]">&lt;janneke&gt;</a></span><span class="message">oriansj: yeah, who knows ;)</span></div><div class="line" id="184444"><span class="nick" style="color:#2e2a4a"><a href="#184444" label="[18:44:44]">&lt;Googulator1&gt;</a></span><span class="message">...who knew bootstrapping inside a VM can somehow crash the host OS...</span></div><div class="line" id="184931"><span class="nick" style="color:#2e2a4a"><a href="#184931" label="[18:49:31]">&lt;Googulator1&gt;</a></span><span class="message">fossy: a little snippet useful for debugging live-bootstrap: trap 'bash -c '&quot;'&quot;'while true; do printf &quot;# &quot;;Â  $(cat); done'&quot;'&quot;'' ERR</span></div><div class="line" id="185012"><span class="nick" style="color:#2e2a4a"><a href="#185012" label="[18:50:12]">&lt;Googulator1&gt;</a></span><span class="message">works in the very first bash build to get an interactive shell if something goes wrong</span></div><div class="line" id="185038"><span class="nick" style="color:#2e2a4a"><a href="#185038" label="[18:50:38]">&lt;Googulator1&gt;</a></span><span class="message">replace &quot;set -e&quot; with this in the script you want to debug</span></div><div class="line" id="185334"><span class="nick" style="color:#8dd3c7"><a href="#185334" label="[18:53:34]">&lt;janneke&gt;</a></span><span class="message">on #gnu, someone just asked &quot;can gcc be compiled without gcc&quot;</span></div><div class="line" id="190314"><span class="nick" style="color:#6b8072"><a href="#190314" label="[19:03:14]">&lt;Googulator&gt;</a></span><span class="message">the only downside to this Bash snippet is that it requires an Enter followed by a Ctrl+D before it accepts a command</span></div><div class="line" id="193352"><span class="nick" style="color:#6b8072"><a href="#193352" label="[19:33:52]">&lt;Googulator&gt;</a></span><span class="message">added to script-generator: <a rel="nofollow" href="https://gist.github.com/Googulator/3984097de4e618ac7bc4ef13ca261568">https://gist.github.com/Googulator/3984097de4e618ac7bc4ef13ca261568</a> </span></div><div class="line" id="214652"><span class="nick" style="color:#6b8072"><a href="#214652" label="[21:46:52]">&lt;Googulator&gt;</a></span><span class="message">fossy: caught a bug in script-generator: in interpreter(), last may be used uninitialized</span></div><div class="line" id="214706"><span class="nick" style="color:#6b8072"><a href="#214706" label="[21:47:06]">&lt;Googulator&gt;</a></span><span class="message">causing weird behavior if the first directive is a define</span></div><div class="line" id="225048"><span class="nick" style="color:#80b1d3"><a href="#225048" label="[22:50:48]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;cosinusoidally&gt; I've managed to get my alternative bootstrap path up to tcc 0.9.27. I can generate a copy of tcc.o that is bit identical to that of my in tree tcc 0.9.27 rebuilding itself.</span></div><div class="line" id="225105"><span class="nick" style="color:#80b1d3"><a href="#225105" label="[22:51:05]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;cosinusoidally&gt; Only thing that is not quite right atm is libtcc1.o . I think there's a bug in my polyfill libc that is causing the assembler to select slightly differrent instructions:  2b 8d dc ff ff ff  (sub    -0x24(%ebp),%ecx) vs 2b 4d dc (sub    -0x24(%ebp),%ecx) . If I link the same tcc.o against glibc then the bug goes away.</span></div><div class="line" id="225230"><span class="nick" style="color:#80b1d3"><a href="#225230" label="[22:52:30]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;cosinusoidally&gt; <a rel="nofollow" href="https://github.com/cosinusoidally/tcc_bootstrap_alt/blob/master/sum">https://github.com/cosinusoidally/tcc_bootstrap_alt/blob/master/sum</a>  are the expected hashes</span></div><div class="line" id="225846"><span class="nick" style="color:#6d2462"><a href="#225846" label="[22:58:46]">&lt;janus&gt;</a></span><span class="message">cosinusoidally: you wrote sub (-0x24(%ebp),%ecx) twice?</span></div><div class="line" id="230712"><span class="nick" style="color:#80b1d3"><a href="#230712" label="[23:07:12]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;cosinusoidally&gt; In the &quot;incorrect&quot; libtcc1.o sub    -0x24(%ebp),%ecx is encoded as 2b 8d dc ff ff ff , in the correct one it is 2b 4d dc</span></div><div class="line" id="230736"><span class="nick" style="color:#80b1d3"><a href="#230736" label="[23:07:36]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;cosinusoidally&gt; It is encoding a 32 bit immediate rather than a 8 bit one</span></div><div class="line" id="230858"><span class="nick" style="color:#6b8072"><a href="#230858" label="[23:08:58]">&lt;Googulator&gt;</a></span><span class="message">Is linking a fully native binary on the agenda?</span></div><div class="line" id="230919"><span class="nick" style="color:#80b1d3"><a href="#230919" label="[23:09:19]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;cosinusoidally&gt; There's probably some bug in my libc. For example I got a long way with a broken strcmp (until I replaced my buggy version with a good one from meslibc)</span></div><div class="line" id="231334"><span class="nick" style="color:#80b1d3"><a href="#231334" label="[23:13:34]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;cosinusoidally&gt; Googulator: at the moment I'm loading/running the elf files with a custom loader (from tcc_27 I run ./x86/bin/elf_loader_cc_x86.exe -l libtcc1.o -l ../tcc_26/libc_boot3.o -l tcc.o ...) but in theory if I figure out the correct tcc comand I could get it to generate a linked binary version of itself. tcc.o will currently be looking in the wrong place for crt files etc.</span></div><div class="line" id="231601"><span class="nick" style="color:#6b8072"><a href="#231601" label="[23:16:01]">&lt;Googulator&gt;</a></span><span class="message">If you managed to do that, we could remove mes/mescc from the bootstrap path in live-bootstrap, at least on x86</span></div><div class="line" id="231650"><span class="nick" style="color:#6b8072"><a href="#231650" label="[23:16:50]">&lt;Googulator&gt;</a></span><span class="message">building mes, and then building tcc with mescc is currently the slowest step on the way to getting a Linux kernel</span></div><div class="line" id="231703"><span class="nick" style="color:#6b8072"><a href="#231703" label="[23:17:03]">&lt;Googulator&gt;</a></span><span class="message">&amp; it gets exponentially slower on older hardware</span></div><div class="line" id="231822"><span class="nick" style="color:#6b8072"><a href="#231822" label="[23:18:22]">&lt;Googulator&gt;</a></span><span class="message">on a Core 2 Duo, just compiling tcc to assembly with mes takes longer than the entire Linux kernel build</span></div><div class="line" id="231910"><span class="nick" style="color:#6b8072"><a href="#231910" label="[23:19:10]">&lt;Googulator&gt;</a></span><span class="message">on modern hardware, Linux is slower to build than mes-tcc, but mes-tcc is still a really slow step, especially compared to how fast tcc then rebuilds itself</span></div><div class="line" id="232020"><span class="nick" style="color:#6b8072"><a href="#232020" label="[23:20:20]">&lt;Googulator&gt;</a></span><span class="message">I actually tested some commands to have tcc_27 loaded by elf_loader generate a fully linked version of itself, but it breaks due to lseek not being implemented</span></div><div class="line" id="232051"><span class="nick" style="color:#80b1d3"><a href="#232051" label="[23:20:51]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;cosinusoidally&gt; In theory if I could create a drop in replacement to tcc-mes here <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/f98161581c6423f53169cfcd4356af6ed9757b3d/sysa/tcc-0.9.26/tcc-0.9.26.kaem#L113">https://github.com/fosslinux/live-bootstrap/blob/f98161581c6423f53169cfcd4356af6ed9757b3d/sysa/tcc-0.9.26/tcc-0.9.26.kaem#L113</a>  then I could bypass mescc</span></div><div class="line" id="232135"><span class="nick" style="color:#80b1d3"><a href="#232135" label="[23:21:35]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;cosinusoidally&gt; yep lseek is currently missing. I was adding libc functions one at a time as required <a rel="nofollow" href="https://github.com/cosinusoidally/tcc_bootstrap_alt/blob/master/tcc_10/libc_boot3.c#L357">https://github.com/cosinusoidally/tcc_bootstrap_alt/blob/master/tcc_10/libc_boot3.c#L357</a> </span></div><div class="line" id="232229"><span class="nick" style="color:#6b8072"><a href="#232229" label="[23:22:29]">&lt;Googulator&gt;</a></span><span class="message">yeah, that tcc-mes is a pain in the ass to get built</span></div><div class="line" id="232249"><span class="nick" style="color:#6b8072"><a href="#232249" label="[23:22:49]">&lt;Googulator&gt;</a></span><span class="message">also, building meslibc with tcc would be the dream too</span></div><div class="line" id="232309"><span class="nick" style="color:#6b8072"><a href="#232309" label="[23:23:09]">&lt;Googulator&gt;</a></span><span class="message">not sure if it's feasible</span></div><div class="line" id="232352"><span class="nick" style="color:#6b8072"><a href="#232352" label="[23:23:52]">&lt;Googulator&gt;</a></span><span class="message">btw, has anyone figured out a way to run mescc using guile instead of mes, just to compare the speed?</span></div><div class="line" id="232400"><span class="nick" style="color:#6b8072"><a href="#232400" label="[23:24:00]">&lt;Googulator&gt;</a></span><span class="message">I get &quot;no code for module (mescc)&quot;</span></div><div class="line" id="232434"><span class="nick" style="color:#6b8072"><a href="#232434" label="[23:24:34]">&lt;Googulator&gt;</a></span><span class="message">(of course guile is not gonna be available in early bootstrap where mescc is needed, but I'm trying to figure out if the slowness comes from mes or mescc)</span></div><div class="line" id="232656"><span class="nick" style="color:#80b1d3"><a href="#232656" label="[23:26:56]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;cosinusoidally&gt; meslibc does get built by tcc in <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysa/tcc-0.9.26/tcc-0.9.26.kaem">https://github.com/fosslinux/live-bootstrap/blob/master/sysa/tcc-0.9.26/tcc-0.9.26.kaem</a>  .iirc a stock tcc 0.9.27 can't build it though.</span></div><div class="line" id="233040"><span class="nick" style="color:#6b8072"><a href="#233040" label="[23:30:40]">&lt;Googulator&gt;</a></span><span class="message">hmm, &quot;if match ${ARCH} riscv64; then tcc-mes -c [...] ../${TCC_PKG}/lib/lib-arm64.c&quot;</span></div><div class="line" id="233048"><span class="nick" style="color:#6b8072"><a href="#233048" label="[23:30:48]">&lt;Googulator&gt;</a></span><span class="message">is that actually correct?</span></div><div class="line" id="233111"><span class="nick" style="color:#6b8072"><a href="#233111" label="[23:31:11]">&lt;Googulator&gt;</a></span><span class="message">lib-arm64.c for riscv64, and only for riscv64, not even for arm64?</span></div><div class="line" id="234243"><span class="nick" style="color:#234e69"><a href="#234243" label="[23:42:43]">&lt;stikonas&gt;</a></span><span class="message">Googulator: yes, you can run mes with guile</span></div><div class="line" id="234249"><span class="nick" style="color:#234e69"><a href="#234249" label="[23:42:49]">&lt;stikonas&gt;</a></span><span class="message">it's quite a bit faster</span></div><div class="line" id="234257"><span class="nick" style="color:#234e69"><a href="#234257" label="[23:42:57]">&lt;stikonas&gt;</a></span><span class="message">at leasta few times if I remember correctly</span></div><div class="line" id="234348"><span class="nick" style="color:#6b8072"><a href="#234348" label="[23:43:48]">&lt;Googulator&gt;</a></span><span class="message">if it's &quot;a few times&quot;, that's not a big enough improvement, given how slow it is right now</span></div><div class="line" id="234350"><span class="nick" style="color:#234e69"><a href="#234350" label="[23:43:50]">&lt;stikonas&gt;</a></span><span class="message">probably one can get some speed from mes back if we replace if's with switch statements throught mes</span></div><div class="line" id="234407"><span class="nick" style="color:#234e69"><a href="#234407" label="[23:44:07]">&lt;stikonas&gt;</a></span><span class="message">well, on riscv64 getting to tcc takes a week</span></div><div class="line" id="234416"><span class="nick" style="color:#6b8072"><a href="#234416" label="[23:44:16]">&lt;Googulator&gt;</a></span><span class="message">ouch</span></div><div class="line" id="234424"><span class="nick" style="color:#6b8072"><a href="#234424" label="[23:44:24]">&lt;Googulator&gt;</a></span><span class="message">what core?</span></div><div class="line" id="234425"><span class="nick" style="color:#234e69"><a href="#234425" label="[23:44:25]">&lt;stikonas&gt;</a></span><span class="message">but it works, I've ran it...</span></div><div class="line" id="234435"><span class="nick" style="color:#234e69"><a href="#234435" label="[23:44:35]">&lt;stikonas&gt;</a></span><span class="message">visionfive2 machine, let me checck the core</span></div><div class="line" id="234447"><span class="nick" style="color:#234e69"><a href="#234447" label="[23:44:47]">&lt;stikonas&gt;</a></span><span class="message">JH7110</span></div><div class="line" id="234458"><span class="nick" style="color:#234e69"><a href="#234458" label="[23:44:58]">&lt;stikonas&gt;</a></span><span class="message">but that machine doesn't feel that slow with GCC</span></div><div class="line" id="234502"><span class="nick" style="color:#234e69"><a href="#234502" label="[23:45:02]">&lt;stikonas&gt;</a></span><span class="message">so must be something mes is doing</span></div><div class="line" id="234510"><span class="nick" style="color:#234e69"><a href="#234510" label="[23:45:10]">&lt;stikonas&gt;</a></span><span class="message">possibly memory?</span></div><div class="line" id="234527"><span class="nick" style="color:#6b8072"><a href="#234527" label="[23:45:27]">&lt;Googulator&gt;</a></span><span class="message">I'm quite sure it's memory bandwidth related</span></div><div class="line" id="234537"><span class="nick" style="color:#234e69"><a href="#234537" label="[23:45:37]">&lt;stikonas&gt;</a></span><span class="message">mes and M2-Planet and kind of based on x86</span></div><div class="line" id="234547"><span class="nick" style="color:#234e69"><a href="#234547" label="[23:45:47]">&lt;stikonas&gt;</a></span><span class="message">so codegen does a lot of stack pushes/pops</span></div><div class="line" id="234552"><span class="nick" style="color:#234e69"><a href="#234552" label="[23:45:52]">&lt;stikonas&gt;</a></span><span class="message">rather than using registers</span></div><div class="line" id="234606"><span class="nick" style="color:#234e69"><a href="#234606" label="[23:46:06]">&lt;stikonas&gt;</a></span><span class="message">but I'm not sure if that's the cause of slowness</span></div><div class="line" id="234615"><span class="nick" style="color:#234e69"><a href="#234615" label="[23:46:15]">&lt;stikonas&gt;</a></span><span class="message">probably not having huge cache also slows it down</span></div><div class="line" id="234641"><span class="nick" style="color:#6b8072"><a href="#234641" label="[23:46:41]">&lt;Googulator&gt;</a></span><span class="message">I'm testing on Core 2 Duo/Quad and Ryzen 7840HS - the Ryzen is about 2x faster building the Linux kernel (on 1 core, since no SMP in Fiwix), but over 10x faster for building tcc with mes</span></div><div class="line" id="234652"><span class="nick" style="color:#6b8072"><a href="#234652" label="[23:46:52]">&lt;Googulator&gt;</a></span><span class="message">Clock &amp; IPC difference explains the difference in Linux</span></div><div class="line" id="234701"><span class="nick" style="color:#6b8072"><a href="#234701" label="[23:47:01]">&lt;Googulator&gt;</a></span><span class="message">tcc-mes, not so much</span></div><div class="line" id="234709"><span class="nick" style="color:#234e69"><a href="#234709" label="[23:47:09]">&lt;stikonas&gt;</a></span><span class="message">Ryzen's have far bigger Cache or am I misremembering?</span></div><div class="line" id="234731"><span class="nick" style="color:#6b8072"><a href="#234731" label="[23:47:31]">&lt;Googulator&gt;</a></span><span class="message">8MB L2, 16MB L3</span></div><div class="line" id="234737"><span class="nick" style="color:#6b8072"><a href="#234737" label="[23:47:37]">&lt;Googulator&gt;</a></span><span class="message">Core has 4MB L2 and no L3</span></div><div class="line" id="234749"><span class="nick" style="color:#6b8072"><a href="#234749" label="[23:47:49]">&lt;Googulator&gt;</a></span><span class="message">but the biggest difference is RAM</span></div><div class="line" id="234752"><span class="nick" style="color:#6b8072"><a href="#234752" label="[23:47:52]">&lt;Googulator&gt;</a></span><span class="message">DDR2 vs DDR5</span></div><div class="line" id="234804"><span class="nick" style="color:#6b8072"><a href="#234804" label="[23:48:04]">&lt;Googulator&gt;</a></span><span class="message">10 vs 90 GB/s</span></div><div class="line" id="234837"><span class="nick" style="color:#234e69"><a href="#234837" label="[23:48:37]">&lt;stikonas&gt;</a></span><span class="message">hmm, I wonder what is RAM speed in visionfive2</span></div><div class="line" id="234938"><span class="nick" style="color:#6b8072"><a href="#234938" label="[23:49:38]">&lt;Googulator&gt;</a></span><span class="message">it's claimed to be &quot;LPDDR4&quot;</span></div><div class="line" id="234946"><span class="nick" style="color:#6b8072"><a href="#234946" label="[23:49:46]">&lt;Googulator&gt;</a></span><span class="message">not clear if that's plain 4 or 4X</span></div><div class="line" id="234947"><span class="nick" style="color:#234e69"><a href="#234947" label="[23:49:47]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://forum.rvspace.org/uploads/default/original/2X/5/593b9475b31724bab32e53059e185931e5225cf4.gif">https://forum.rvspace.org/uploads/default/original/2X/5/593b9475b31724bab32e53059e185931e5225cf4.gif</a> </span></div><div class="line" id="234954"><span class="nick" style="color:#234e69"><a href="#234954" label="[23:49:54]">&lt;stikonas&gt;</a></span><span class="message">that might be useful</span></div><div class="line" id="235013"><span class="nick" style="color:#234e69"><a href="#235013" label="[23:50:13]">&lt;stikonas&gt;</a></span><span class="message">random 64-bit reads are under 1 GiB/s</span></div><div class="line" id="235031"><span class="nick" style="color:#6b8072"><a href="#235031" label="[23:50:31]">&lt;Googulator&gt;</a></span><span class="message">That's _not healthy_</span></div><div class="line" id="235038"><span class="nick" style="color:#234e69"><a href="#235038" label="[23:50:38]">&lt;stikonas&gt;</a></span><span class="message">hmm, what is x axis here?</span></div><div class="line" id="235052"><span class="nick" style="color:#6b8072"><a href="#235052" label="[23:50:52]">&lt;Googulator&gt;</a></span><span class="message">there's no reason for LPDDR4(X) to be that slow</span></div><div class="line" id="235055"><span class="nick" style="color:#234e69"><a href="#235055" label="[23:50:55]">&lt;stikonas&gt;</a></span><span class="message">but that might explain why visionfive2 is so slow...</span></div><div class="line" id="235101"><span class="nick" style="color:#234e69"><a href="#235101" label="[23:51:01]">&lt;stikonas&gt;</a></span><span class="message">(when using mes)</span></div><div class="line" id="235332"><span class="nick" style="color:#6c3d55"><a href="#235332" label="[23:53:32]">&lt;GoogulatorMobile&gt;</a></span><span class="message">qemu has crashed the host system again... wtf</span></div><div class="line" id="235353"><span class="nick" style="color:#234e69"><a href="#235353" label="[23:53:53]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://doc-en.rvspace.org/JH7110/Datasheet/JH7110_DS/c_ddr.html">https://doc-en.rvspace.org/JH7110/Datasheet/JH7110_DS/c_ddr.html</a>  also says DDR4/3 and LPDDR4/3 modes and signaling, rates up to the speed of 2,800 Mbps</span></div><div class="line" id="235401"><span class="nick" style="color:#234e69"><a href="#235401" label="[23:54:01]">&lt;stikonas&gt;</a></span><span class="message">so it's really slow...</span></div><div class="line" id="235420"><span class="nick" style="color:#6c3d55"><a href="#235420" label="[23:54:20]">&lt;GoogulatorMobile&gt;</a></span><span class="message">That's misleading</span></div><div class="line" id="235427"><span class="nick" style="color:#6c3d55"><a href="#235427" label="[23:54:27]">&lt;GoogulatorMobile&gt;</a></span><span class="message">It's per-pin</span></div><div class="line" id="235441"><span class="nick" style="color:#234e69"><a href="#235441" label="[23:54:41]">&lt;stikonas&gt;</a></span><span class="message">oh ok</span></div><div class="line" id="235445"><span class="nick" style="color:#6c3d55"><a href="#235445" label="[23:54:45]">&lt;GoogulatorMobile&gt;</a></span><span class="message">The Micron chip is 1866MHz DDR</span></div><div class="line" id="235520"><span class="nick" style="color:#6c3d55"><a href="#235520" label="[23:55:20]">&lt;GoogulatorMobile&gt;</a></span><span class="message">So 3733 &quot;Mbps&quot; (more correctly MT/s)</span></div><div class="line" id="235557"><span class="nick" style="color:#234e69"><a href="#235557" label="[23:55:57]">&lt;stikonas&gt;</a></span><span class="message">ok, there is also this <a rel="nofollow" href="https://openbenchmarking.org/result/2301270-MISK-VISIONF75">https://openbenchmarking.org/result/2301270-MISK-VISIONF75</a> </span></div><div class="line" id="235604"><span class="nick" style="color:#234e69"><a href="#235604" label="[23:56:04]">&lt;stikonas&gt;</a></span><span class="message">so 3 GB/s</span></div><div class="line" id="235643"><span class="nick" style="color:#6c3d55"><a href="#235643" label="[23:56:43]">&lt;GoogulatorMobile&gt;</a></span><span class="message">It has 2 channels of 16 bits each, so a 32-bit wide interface</span></div><div class="line" id="235715"><span class="nick" style="color:#6c3d55"><a href="#235715" label="[23:57:15]">&lt;GoogulatorMobile&gt;</a></span><span class="message">In theory, it should hit just under 15GB/s</span></div><div class="line" id="235836"><span class="nick" style="color:#6c3d55"><a href="#235836" label="[23:58:36]">&lt;GoogulatorMobile&gt;</a></span><span class="message">The Rock 5B (very similar board, but ARM64) gets 34GB/s</span></div><div class="line" id="235856"><span class="nick" style="color:#6c3d55"><a href="#235856" label="[23:58:56]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Both boards are made by Radxa, but different cobranding</span></div><br /></div></body></html>