<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-05-03.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="003153"><span class="nick" style="color:#8dd3c7"><a href="#003153" label="[00:31:53]">&lt;stikonas&gt;</a></span><span class="message">fossy: xbps is missing from parts.rst</span></div><div class="line" id="003406"><span class="nick" style="color:#8dd3c7"><a href="#003406" label="[00:34:06]">&lt;stikonas&gt;</a></span><span class="message">oh and openssl too</span></div><div class="line" id="003436"><span class="nick" style="color:#8dd3c7"><a href="#003436" label="[00:34:36]">&lt;stikonas&gt;</a></span><span class="message">and libarchive</span></div><div class="line" id="004414"><span class="nick" style="color:#2e2a4a"><a href="#004414" label="[00:44:14]">&lt;theruran&gt;</a></span><span class="message">huh, does M1 need M2-Planet to build? I wasn't expecting that given the numbering scheme</span></div><div class="line" id="010239"><span class="nick" style="color:#6b8072"><a href="#010239" label="[01:02:39]">&lt;oriansj&gt;</a></span><span class="message">achaninja: the difference between M2-Planet and M2-Mesoplanet is the difference between a C compiler and a C macro preprocessor. (aka M2-Mesoplanet does macro expansion and does fork to make compiling a single step instead of separate compile, assemble and link steps)</span></div><div class="line" id="010556"><span class="nick" style="color:#6b8072"><a href="#010556" label="[01:05:56]">&lt;oriansj&gt;</a></span><span class="message">littlebobeep: the reason they are depreciated is because we standardized the flags to be more consistent and reduce the numbers of issues the inconsistent capitialization cased</span></div><div class="line" id="010726"><span class="nick" style="color:#6b8072"><a href="#010726" label="[01:07:26]">&lt;oriansj&gt;</a></span><span class="message">we gave 2 years notice and a whole 5 releases after our change to the new flags to enable people to switch to them. 2 releases warning of the depreciation before their final removal.</span></div><div class="line" id="010841"><span class="nick" style="color:#6b8072"><a href="#010841" label="[01:08:41]">&lt;oriansj&gt;</a></span><span class="message">janneke: I'll look into it but be warned macro expansion in kaem is primitive</span></div><div class="line" id="011317"><span class="nick" style="color:#6b8072"><a href="#011317" label="[01:13:17]">&lt;oriansj&gt;</a></span><span class="message">theruran: well stage2 FORTH is just the Turing Core of FORTH, there is still a good bit of FORTH to write before it contains the more advanced features of FORTH.</span></div><div class="line" id="011444"><span class="nick" style="color:#6b8072"><a href="#011444" label="[01:14:44]">&lt;oriansj&gt;</a></span><span class="message">theruran: well M1 is a C program and we need it (or M0) to use M2-Planet</span></div><div class="line" id="011555"><span class="nick" style="color:#6b8072"><a href="#011555" label="[01:15:55]">&lt;oriansj&gt;</a></span><span class="message">and originally cc_x86 could build it, so it did come before M2-Planet</span></div><div class="line" id="012500"><span class="nick" style="color:#80b1d3"><a href="#012500" label="[01:25:00]">&lt;stikonas[m]&gt;</a></span><span class="message">yes, kaem only supports ${var} and that's it, not even $var</span></div><div class="line" id="012957"><span class="nick" style="color:#6b8072"><a href="#012957" label="[01:29:57]">&lt;oriansj&gt;</a></span><span class="message">and echo ${foo:-bacon} will work just fine but echo ${foo:-${bacon}} will just echo ${bacon} without evaluation</span></div><div class="line" id="013325"><span class="nick" style="color:#6b8072"><a href="#013325" label="[01:33:25]">&lt;oriansj&gt;</a></span><span class="message">so you can do CPATH=${CPATH:-/bin/mescc} and it'll do the correct thing</span></div><div class="line" id="013729"><span class="nick" style="color:#6b8072"><a href="#013729" label="[01:37:29]">&lt;oriansj&gt;</a></span><span class="message">for example: foo=${foo:-/usr/bin/M2-Planet}; ${foo} -f bar -o bleh; will spawn M2-Planet and compile the file bar into the output bleh</span></div><div class="line" id="013911"><span class="nick" style="color:#6b8072"><a href="#013911" label="[01:39:11]">&lt;oriansj&gt;</a></span><span class="message">but foo=${foo:-$HOME/bin/M2-Planet} or foo=${foo:-${HOME}/bin/M2-Planet} currently does not work</span></div><div class="line" id="013936"><span class="nick" style="color:#6b8072"><a href="#013936" label="[01:39:36]">&lt;oriansj&gt;</a></span><span class="message">but you can work around that with if/else statements using match</span></div><div class="line" id="014335"><span class="nick" style="color:#6b8072"><a href="#014335" label="[01:43:35]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1239748/">https://paste.debian.net/1239748/</a> </span></div><div class="line" id="014604"><span class="nick" style="color:#6b8072"><a href="#014604" label="[01:46:04]">&lt;oriansj&gt;</a></span><span class="message">I admit it isn't pretty and kaem variable expansion could be enhanced to enable cleaner constructs</span></div><div class="line" id="014816"><span class="nick" style="color:#6d2462"><a href="#014816" label="[01:48:16]">&lt;littlebobeep&gt;</a></span><span class="message">Wow I did not know stage0 was in comencement.scm I have not been paying attention clearly</span></div><div class="line" id="015730"><span class="nick" style="color:#6d2462"><a href="#015730" label="[01:57:30]">&lt;littlebobeep&gt;</a></span><span class="message">It looks like it depends on tar and coreutils binaries though?</span></div><div class="line" id="020133"><span class="nick" style="color:#8dd3c7"><a href="#020133" label="[02:01:33]">&lt;stikonas&gt;</a></span><span class="message">littlebobeep: <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/guix.git/tree/gnu/packages/bootstrap.scm#n112">https://git.savannah.gnu.org/cgit/guix.git/tree/gnu/packages/bootstrap.scm#n112</a>  it's bash, mkdir, tar, xz and in addition guile</span></div><div class="line" id="020153"><span class="nick" style="color:#8dd3c7"><a href="#020153" label="[02:01:53]">&lt;stikonas&gt;</a></span><span class="message">those things are not used in the build itself but more like automation driver</span></div><div class="line" id="020305"><span class="nick" style="color:#8dd3c7"><a href="#020305" label="[02:03:05]">&lt;stikonas&gt;</a></span><span class="message">but it's not mandatory and we have a kaem based automation (but that's obviously outside guix)</span></div><div class="line" id="020410"><span class="nick" style="color:#6d2462"><a href="#020410" label="[02:04:10]">&lt;littlebobeep&gt;</a></span><span class="message">Right I was confused by adding stage0-posix in guix but not go from scratch like in live-bootstrap</span></div><div class="line" id="020523"><span class="nick" style="color:#8dd3c7"><a href="#020523" label="[02:05:23]">&lt;stikonas&gt;</a></span><span class="message">well, two different ways of doing bootstrap...</span></div><div class="line" id="020542"><span class="nick" style="color:#8dd3c7"><a href="#020542" label="[02:05:42]">&lt;stikonas&gt;</a></span><span class="message">one (guix) is kind of started from the top down</span></div><div class="line" id="020547"><span class="nick" style="color:#6d2462"><a href="#020547" label="[02:05:47]">&lt;littlebobeep&gt;</a></span><span class="message">how do you mean &quot;top down&quot;?</span></div><div class="line" id="020607"><span class="nick" style="color:#8dd3c7"><a href="#020607" label="[02:06:07]">&lt;stikonas&gt;</a></span><span class="message">guix is first of all a distro with lots of packages and the goal was to reduce bootstrap seed</span></div><div class="line" id="020629"><span class="nick" style="color:#8dd3c7"><a href="#020629" label="[02:06:29]">&lt;stikonas&gt;</a></span><span class="message">live-bootstrap started with just stage0-posix and built stuff on top of that</span></div><div class="line" id="020650"><span class="nick" style="color:#8dd3c7"><a href="#020650" label="[02:06:50]">&lt;stikonas&gt;</a></span><span class="message">hence slightly different decisions, etc</span></div><div class="line" id="020721"><span class="nick" style="color:#8dd3c7"><a href="#020721" label="[02:07:21]">&lt;stikonas&gt;</a></span><span class="message">live-bootstrap is stricter in not allowing pre-generated files</span></div><div class="line" id="020721"><span class="nick" style="color:#8dd3c7"><a href="#020721" label="[02:07:21]">&lt;stikonas&gt;</a></span><span class="message">but it's not meant to be end-product for user like Guix is</span></div><div class="line" id="020839"><span class="nick" style="color:#8dd3c7"><a href="#020839" label="[02:08:39]">&lt;stikonas&gt;</a></span><span class="message">live-bootstrap  is more of bottom-up approach</span></div><div class="line" id="020913"><span class="nick" style="color:#8dd3c7"><a href="#020913" label="[02:09:13]">&lt;stikonas&gt;</a></span><span class="message">it started with very little and eventually built more stuff up to gcc and even guile</span></div><div class="line" id="021019"><span class="nick" style="color:#6d2462"><a href="#021019" label="[02:10:19]">&lt;littlebobeep&gt;</a></span><span class="message">I'd need to check live-bootstrap history to know what even the point was originally if it could not build up to GCC</span></div><div class="line" id="021128"><span class="nick" style="color:#6b8072"><a href="#021128" label="[02:11:28]">&lt;oriansj&gt;</a></span><span class="message">littlebobeep: well when live-bootstrap started there was a gap between M2-Planet and Mes.c</span></div><div class="line" id="021152"><span class="nick" style="color:#6b8072"><a href="#021152" label="[02:11:52]">&lt;oriansj&gt;</a></span><span class="message">but it was a gap that slowly was closing (and ultimately closed with mes-m2)</span></div><div class="line" id="021210"><span class="nick" style="color:#8dd3c7"><a href="#021210" label="[02:12:10]">&lt;stikonas&gt;</a></span><span class="message">that happened in early 2021 I think</span></div><div class="line" id="021238"><span class="nick" style="color:#6b8072"><a href="#021238" label="[02:12:38]">&lt;oriansj&gt;</a></span><span class="message">so about 5 years *AFTER* stage0 got started</span></div><div class="line" id="021302"><span class="nick" style="color:#8dd3c7"><a href="#021302" label="[02:13:02]">&lt;stikonas&gt;</a></span><span class="message">but once m2-planet and mes gap was closed, gcc was reached fairly quickly in live-bootstrap</span></div><div class="line" id="021307"><span class="nick" style="color:#6b8072"><a href="#021307" label="[02:13:07]">&lt;oriansj&gt;</a></span><span class="message">so it was a considerable amount of work to get the point where we are today</span></div><div class="line" id="021345"><span class="nick" style="color:#8dd3c7"><a href="#021345" label="[02:13:45]">&lt;stikonas&gt;</a></span><span class="message">and it's still only x86</span></div><div class="line" id="021452"><span class="nick" style="color:#6b8072"><a href="#021452" label="[02:14:52]">&lt;oriansj&gt;</a></span><span class="message">so a good deal more work is needed to iron out the details and flush out ports to different architectures</span></div><div class="line" id="021611"><span class="nick" style="color:#8dd3c7"><a href="#021611" label="[02:16:11]">&lt;stikonas&gt;</a></span><span class="message">oriansj: we have a smaller seed than 357 bytes :)</span></div><div class="line" id="021641"><span class="nick" style="color:#8dd3c7"><a href="#021641" label="[02:16:41]">&lt;stikonas&gt;</a></span><span class="message">though arguably x86 is more important</span></div><div class="line" id="021652"><span class="nick" style="color:#8dd3c7"><a href="#021652" label="[02:16:52]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds/blob/master/POSIX/riscv32/hex0-seed">https://github.com/oriansj/bootstrap-seeds/blob/master/POSIX/riscv32/hex0-seed</a> </span></div><div class="line" id="021722"><span class="nick" style="color:#6b8072"><a href="#021722" label="[02:17:22]">&lt;oriansj&gt;</a></span><span class="message">well, I didn't want to distract too much from janneke's announcement on such a small point</span></div><div class="line" id="021743"><span class="nick" style="color:#8dd3c7"><a href="#021743" label="[02:17:43]">&lt;stikonas&gt;</a></span><span class="message">yes, it's only 1 byte difference anyway</span></div><div class="line" id="021812"><span class="nick" style="color:#6d2462"><a href="#021812" label="[02:18:12]">&lt;littlebobeep&gt;</a></span><span class="message">stikonas: Why is it only x86 when I see hex0 and kaem for aarch64 here: <a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds/tree/master/POSIX/AArch64">https://github.com/oriansj/bootstrap-seeds/tree/master/POSIX/AArch64</a> </span></div><div class="line" id="021827"><span class="nick" style="color:#8dd3c7"><a href="#021827" label="[02:18:27]">&lt;stikonas&gt;</a></span><span class="message">littlebobeep: stage0-posix is multi-platform</span></div><div class="line" id="021844"><span class="nick" style="color:#8dd3c7"><a href="#021844" label="[02:18:44]">&lt;stikonas&gt;</a></span><span class="message">then we have some gaps to mes-&gt;mescc-&gt;tcc</span></div><div class="line" id="021856"><span class="nick" style="color:#6b8072"><a href="#021856" label="[02:18:56]">&lt;oriansj&gt;</a></span><span class="message">littlebobeep: because it is the pieces after stage0-posix that have bootstrapping problems for different architectures</span></div><div class="line" id="021906"><span class="nick" style="color:#8dd3c7"><a href="#021906" label="[02:19:06]">&lt;stikonas&gt;</a></span><span class="message">stage0-posix to mes is not particularly hard, just a bit of work and was done in some other cases</span></div><div class="line" id="021914"><span class="nick" style="color:#6b8072"><a href="#021914" label="[02:19:14]">&lt;oriansj&gt;</a></span><span class="message">for example MesCC doesn't support RISC-V yet</span></div><div class="line" id="021924"><span class="nick" style="color:#8dd3c7"><a href="#021924" label="[02:19:24]">&lt;stikonas&gt;</a></span><span class="message">then mes-&gt;mescc is what oriansj said</span></div><div class="line" id="021931"><span class="nick" style="color:#8dd3c7"><a href="#021931" label="[02:19:31]">&lt;stikonas&gt;</a></span><span class="message">and mescc-&gt;tcc is again only x86</span></div><div class="line" id="021941"><span class="nick" style="color:#8dd3c7"><a href="#021941" label="[02:19:41]">&lt;stikonas&gt;</a></span><span class="message">because old version of tcc was patched to build with mescc</span></div><div class="line" id="021947"><span class="nick" style="color:#8dd3c7"><a href="#021947" label="[02:19:47]">&lt;stikonas&gt;</a></span><span class="message">but it was only done for x86</span></div><div class="line" id="022005"><span class="nick" style="color:#8dd3c7"><a href="#022005" label="[02:20:05]">&lt;stikonas&gt;</a></span><span class="message">so quite a few gaps and not enough volunteers to close them</span></div><div class="line" id="022014"><span class="nick" style="color:#6d2462"><a href="#022014" label="[02:20:14]">&lt;littlebobeep&gt;</a></span><span class="message">But isn't tcc written in C so why is this not ISA-agnostic?</span></div><div class="line" id="022023"><span class="nick" style="color:#8dd3c7"><a href="#022023" label="[02:20:23]">&lt;stikonas&gt;</a></span><span class="message">no compiler is ISA agnostic</span></div><div class="line" id="022033"><span class="nick" style="color:#8dd3c7"><a href="#022033" label="[02:20:33]">&lt;stikonas&gt;</a></span><span class="message">it needs to emit assembly</span></div><div class="line" id="022038"><span class="nick" style="color:#6d2462"><a href="#022038" label="[02:20:38]">&lt;littlebobeep&gt;</a></span><span class="message">ah right</span></div><div class="line" id="022045"><span class="nick" style="color:#6b8072"><a href="#022045" label="[02:20:45]">&lt;oriansj&gt;</a></span><span class="message">littlebobeep: there is no such thing as any serious program being ISA-agnostic</span></div><div class="line" id="022127"><span class="nick" style="color:#6b8072"><a href="#022127" label="[02:21:27]">&lt;oriansj&gt;</a></span><span class="message">even cat has different behavior on x86 than AMD64</span></div><div class="line" id="022133"><span class="nick" style="color:#6d2462"><a href="#022133" label="[02:21:33]">&lt;littlebobeep&gt;</a></span><span class="message">haha really aren't LISP and Python programs ISA-agnostic</span></div><div class="line" id="022159"><span class="nick" style="color:#8dd3c7"><a href="#022159" label="[02:21:59]">&lt;stikonas&gt;</a></span><span class="message">well, it's a bit easier with interpreters</span></div><div class="line" id="022207"><span class="nick" style="color:#6b8072"><a href="#022207" label="[02:22:07]">&lt;oriansj&gt;</a></span><span class="message">littlebobeep: nope, try to run Python or any LISP on both x86 and S390X</span></div><div class="line" id="022312"><span class="nick" style="color:#6d2462"><a href="#022312" label="[02:23:12]">&lt;littlebobeep&gt;</a></span><span class="message">I know literally nothing about S390X, can we pick something easier??  :P  how about x86 and ARM.... you just need to compile the intepreter for either ISA and your same LISP or Python &quot;serious program&quot; should work, no?</span></div><div class="line" id="022317"><span class="nick" style="color:#6b8072"><a href="#022317" label="[02:23:17]">&lt;oriansj&gt;</a></span><span class="message">it is easier to port a C compiler to a new architecture than to get an interpretted language to behave the same on a new architecture.</span></div><div class="line" id="022354"><span class="nick" style="color:#8dd3c7"><a href="#022354" label="[02:23:54]">&lt;stikonas&gt;</a></span><span class="message">janneke might disagree with you</span></div><div class="line" id="022406"><span class="nick" style="color:#6b8072"><a href="#022406" label="[02:24:06]">&lt;oriansj&gt;</a></span><span class="message">indeed</span></div><div class="line" id="022426"><span class="nick" style="color:#8dd3c7"><a href="#022426" label="[02:24:26]">&lt;stikonas&gt;</a></span><span class="message">but at least some people would find writing compilers much easier</span></div><div class="line" id="022438"><span class="nick" style="color:#6b8072"><a href="#022438" label="[02:24:38]">&lt;oriansj&gt;</a></span><span class="message">but M2-Planet works on more architectures than Mes.c/MesCC does</span></div><div class="line" id="022503"><span class="nick" style="color:#6b8072"><a href="#022503" label="[02:25:03]">&lt;oriansj&gt;</a></span><span class="message">and GCC works on more architectures than Guile does</span></div><div class="line" id="022609"><span class="nick" style="color:#6b8072"><a href="#022609" label="[02:26:09]">&lt;oriansj&gt;</a></span><span class="message">now that might be a matter of programmer effort (janneke is probably a better programmer than I am)</span></div><div class="line" id="022814"><span class="nick" style="color:#6d2462"><a href="#022814" label="[02:28:14]">&lt;littlebobeep&gt;</a></span><span class="message">So basically if I want to bootstrap on ARM I need x86 hardware (in 32-bit mode only?) and get up to tcc (or gcc?) then I have to cross-compile stuff for ARM?  What is the utility of the stage0/stage1/stage2 ARM code if I cannot use it?</span></div><div class="line" id="022816"><span class="nick" style="color:#6b8072"><a href="#022816" label="[02:28:16]">&lt;oriansj&gt;</a></span><span class="message">or perhaps level of complexity (MesCC is much more advanced than M2-Planet)</span></div><div class="line" id="022859"><span class="nick" style="color:#6b8072"><a href="#022859" label="[02:28:59]">&lt;oriansj&gt;</a></span><span class="message">littlebobeep: the 32bit arm bootstrapping work hasn't been done yet.</span></div><div class="line" id="022936"><span class="nick" style="color:#6d2462"><a href="#022936" label="[02:29:36]">&lt;littlebobeep&gt;</a></span><span class="message">oriansj: I am honestly more interested in ARMv8-x/aarch64</span></div><div class="line" id="022957"><span class="nick" style="color:#8dd3c7"><a href="#022957" label="[02:29:57]">&lt;stikonas&gt;</a></span><span class="message">that is only up to stage0-posix</span></div><div class="line" id="023006"><span class="nick" style="color:#6b8072"><a href="#023006" label="[02:30:06]">&lt;oriansj&gt;</a></span><span class="message">we have 32bit arm support in M2-Planet and mescc-tools but if you look in stage0-posix: <a rel="nofollow" href="https://github.com/oriansj/stage0-posix-armv7l">https://github.com/oriansj/stage0-posix-armv7l</a>  it is all just prototype bits</span></div><div class="line" id="023117"><span class="nick" style="color:#6b8072"><a href="#023117" label="[02:31:17]">&lt;oriansj&gt;</a></span><span class="message">so a couple days of refinement work and conversion and it could be done if one was so interested.</span></div><div class="line" id="023320"><span class="nick" style="color:#6d2462"><a href="#023320" label="[02:33:20]">&lt;littlebobeep&gt;</a></span><span class="message">Yeah I have owned armhf hardware in the past but honestly am more interested in aarch64</span></div><div class="line" id="023406"><span class="nick" style="color:#6b8072"><a href="#023406" label="[02:34:06]">&lt;oriansj&gt;</a></span><span class="message">I am however not certain on the state of MesCC's ARM porting work: <a rel="nofollow" href="https://nlnet.nl/project/GNUMes-arm/">https://nlnet.nl/project/GNUMes-arm/</a> </span></div><div class="line" id="023425"><span class="nick" style="color:#6b8072"><a href="#023425" label="[02:34:25]">&lt;oriansj&gt;</a></span><span class="message">but janneke certainly could indicate the state exactly</span></div><div class="line" id="023533"><span class="nick" style="color:#6b8072"><a href="#023533" label="[02:35:33]">&lt;oriansj&gt;</a></span><span class="message">so with some work (not certain to the exact amount) live-bootstrap could be expanded to support your target architecture as well</span></div><div class="line" id="023646"><span class="nick" style="color:#6d2462"><a href="#023646" label="[02:36:46]">&lt;littlebobeep&gt;</a></span><span class="message">Well it looks like a lot of stage0 code is done: <a rel="nofollow" href="https://github.com/oriansj/stage0-posix-aarch64">https://github.com/oriansj/stage0-posix-aarch64</a>    but we need M2-Planet and MesCC to be taught to generate aarch64 assembly or what?</span></div><div class="line" id="023733"><span class="nick" style="color:#6d2462"><a href="#023733" label="[02:37:33]">&lt;littlebobeep&gt;</a></span><span class="message">I don't know what the stage0 code can be used for if the next step is completely missing</span></div><div class="line" id="023832"><span class="nick" style="color:#80b1d3"><a href="#023832" label="[02:38:32]">&lt;stikonas[m]&gt;</a></span><span class="message">M2-Planet supports aarch64 just fine</span></div><div class="line" id="023858"><span class="nick" style="color:#80b1d3"><a href="#023858" label="[02:38:58]">&lt;stikonas[m]&gt;</a></span><span class="message">It's mostly stuff around mes that needs more work</span></div><div class="line" id="024010"><span class="nick" style="color:#6d2462"><a href="#024010" label="[02:40:10]">&lt;littlebobeep&gt;</a></span><span class="message">stikonas[m]: Oh that's nice about M2-Planet.... as for Mes, is it the Scheme interpreter in C that does not work or the Scheme code in MesCC that cannot compile armhf/aarch64 assembly yet?</span></div><div class="line" id="024054"><span class="nick" style="color:#80b1d3"><a href="#024054" label="[02:40:54]">&lt;stikonas[m]&gt;</a></span><span class="message">Both</span></div><div class="line" id="024112"><span class="nick" style="color:#80b1d3"><a href="#024112" label="[02:41:12]">&lt;stikonas[m]&gt;</a></span><span class="message">Mes libc might need updates to build with m2-planet</span></div><div class="line" id="024128"><span class="nick" style="color:#80b1d3"><a href="#024128" label="[02:41:28]">&lt;stikonas[m]&gt;</a></span><span class="message">As m2libc is not capable of building mes</span></div><div class="line" id="024312"><span class="nick" style="color:#6d2462"><a href="#024312" label="[02:43:12]">&lt;littlebobeep&gt;</a></span><span class="message">I see.... so how do I bootstrap ARM systems?? &gt;_&lt;  I need x86 hardware then to get up the GCC and just cross-compile Guix bootstrap binaries and use Guix (because stage0 on ARM seems useless without later stages)</span></div><div class="line" id="024407"><span class="nick" style="color:#80b1d3"><a href="#024407" label="[02:44:07]">&lt;stikonas[m]&gt;</a></span><span class="message">I guess but you'll get different guix bootstrap binaries</span></div><div class="line" id="024423"><span class="nick" style="color:#80b1d3"><a href="#024423" label="[02:44:23]">&lt;stikonas[m]&gt;</a></span><span class="message">And of course substitutes won't work</span></div><div class="line" id="024559"><span class="nick" style="color:#6d2462"><a href="#024559" label="[02:45:59]">&lt;littlebobeep&gt;</a></span><span class="message">stikonas[m]: Different..... well does this mean every subsequent package I compile will be different hashes because my bootstrap binaries were different?</span></div><div class="line" id="024610"><span class="nick" style="color:#6d2462"><a href="#024610" label="[02:46:10]">&lt;littlebobeep&gt;</a></span><span class="message">Why would substitutes not work once I had base system installed?</span></div><div class="line" id="024631"><span class="nick" style="color:#6d2462"><a href="#024631" label="[02:46:31]">&lt;littlebobeep&gt;</a></span><span class="message">If Guile is running Guix should be able to download substitutes, no?</span></div><div class="line" id="024652"><span class="nick" style="color:#80b1d3"><a href="#024652" label="[02:46:52]">&lt;stikonas[m]&gt;</a></span><span class="message">Cause all your hashes won't match what build servers use</span></div><div class="line" id="024715"><span class="nick" style="color:#80b1d3"><a href="#024715" label="[02:47:15]">&lt;stikonas[m]&gt;</a></span><span class="message">Hash of bootstrap binaries affects all other binaries in guix</span></div><div class="line" id="024731"><span class="nick" style="color:#80b1d3"><a href="#024731" label="[02:47:31]">&lt;stikonas[m]&gt;</a></span><span class="message">Cause it's hash if inputs, not contents</span></div><div class="line" id="024803"><span class="nick" style="color:#80b1d3"><a href="#024803" label="[02:48:03]">&lt;stikonas[m]&gt;</a></span><span class="message">So every single guix output will be different than on CI server</span></div><div class="line" id="025041"><span class="nick" style="color:#80b1d3"><a href="#025041" label="[02:50:41]">&lt;stikonas[m]&gt;</a></span><span class="message">There is no easy way of replacing binaries from bootstrap.scm</span></div><div class="line" id="025231"><span class="nick" style="color:#6b8072"><a href="#025231" label="[02:52:31]">&lt;oriansj&gt;</a></span><span class="message">but doing a double bootstrap might get you what you want</span></div><div class="line" id="025257"><span class="nick" style="color:#80b1d3"><a href="#025257" label="[02:52:57]">&lt;stikonas[m]&gt;</a></span><span class="message">depending on how bootsrsp binaries were built</span></div><div class="line" id="025313"><span class="nick" style="color:#80b1d3"><a href="#025313" label="[02:53:13]">&lt;stikonas[m]&gt;</a></span><span class="message">It's not really documented</span></div><div class="line" id="025331"><span class="nick" style="color:#80b1d3"><a href="#025331" label="[02:53:31]">&lt;stikonas[m]&gt;</a></span><span class="message">Might need specific version of guix</span></div><div class="line" id="025341"><span class="nick" style="color:#6b8072"><a href="#025341" label="[02:53:41]">&lt;oriansj&gt;</a></span><span class="message">and we can hope that Guix uses live-bootstrap as a second path to the bootstrap binaries</span></div><div class="line" id="025347"><span class="nick" style="color:#80b1d3"><a href="#025347" label="[02:53:47]">&lt;stikonas[m]&gt;</a></span><span class="message">Or even manually built</span></div><div class="line" id="025420"><span class="nick" style="color:#6b8072"><a href="#025420" label="[02:54:20]">&lt;oriansj&gt;</a></span><span class="message">but ultimately possible (even if it requires a bit of funny work)</span></div><div class="line" id="030513"><span class="nick" style="color:#234e69"><a href="#030513" label="[03:05:13]">&lt;pabs3&gt;</a></span><span class="message">ISTR bootstrapping via LISP/Forth have both been considered but discarded in favour of the hex0 approach? <a rel="nofollow" href="https://lwn.net/Articles/893547/">https://lwn.net/Articles/893547/</a> </span></div><div class="line" id="031743"><span class="nick" style="color:#80b1d3"><a href="#031743" label="[03:17:43]">&lt;stikonas[m]&gt;</a></span><span class="message">pabs3: in favour of cc_x86 approach (C compiler in assembly)</span></div><div class="line" id="031831"><span class="nick" style="color:#80b1d3"><a href="#031831" label="[03:18:31]">&lt;stikonas[m]&gt;</a></span><span class="message">Mostly due to lack of interest in bootstrapping via lisp/forth</span></div><div class="line" id="031843"><span class="nick" style="color:#80b1d3"><a href="#031843" label="[03:18:43]">&lt;stikonas[m]&gt;</a></span><span class="message">Nobody wanted to do that</span></div><div class="line" id="031930"><span class="nick" style="color:#234e69"><a href="#031930" label="[03:19:30]">&lt;pabs3&gt;</a></span><span class="message">I see. do you want to respond to the post?</span></div><div class="line" id="032035"><span class="nick" style="color:#80b1d3"><a href="#032035" label="[03:20:35]">&lt;stikonas[m]&gt;</a></span><span class="message">I don't have an account, feel free to respond</span></div><div class="line" id="032158"><span class="nick" style="color:#80b1d3"><a href="#032158" label="[03:21:58]">&lt;stikonas[m]&gt;</a></span><span class="message">But some posts there feel as if people are suggesting possible paths</span></div><div class="line" id="032213"><span class="nick" style="color:#80b1d3"><a href="#032213" label="[03:22:13]">&lt;stikonas[m]&gt;</a></span><span class="message">Without realising that we are done</span></div><div class="line" id="032508"><span class="nick" style="color:#6c3d55"><a href="#032508" label="[03:25:08]">&lt;achaninja&gt;</a></span><span class="message">my new perspective is that the repositories are not exactly the clearest to follow</span></div><div class="line" id="032516"><span class="nick" style="color:#6c3d55"><a href="#032516" label="[03:25:16]">&lt;achaninja&gt;</a></span><span class="message">they are filled with failed experiments and old code</span></div><div class="line" id="032553"><span class="nick" style="color:#6c3d55"><a href="#032553" label="[03:25:53]">&lt;achaninja&gt;</a></span><span class="message">the stage0-posix repo is quite confusing but at least running it was simple</span></div><div class="line" id="032631"><span class="nick" style="color:#6c3d55"><a href="#032631" label="[03:26:31]">&lt;achaninja&gt;</a></span><span class="message">e.g. multiple copies of the m2 libc as different nested submodules</span></div><div class="line" id="032659"><span class="nick" style="color:#234e69"><a href="#032659" label="[03:26:59]">&lt;pabs3&gt;</a></span><span class="message">I'll leave responding to someone who knows the details</span></div><div class="line" id="032728"><span class="nick" style="color:#6c3d55"><a href="#032728" label="[03:27:28]">&lt;achaninja&gt;</a></span><span class="message">I'm not trying to be critical, I greatly appreciate it all and think its fantastic</span></div><div class="line" id="032745"><span class="nick" style="color:#6c3d55"><a href="#032745" label="[03:27:45]">&lt;achaninja&gt;</a></span><span class="message">and the fact that it works is enough for me</span></div><div class="line" id="032803"><span class="nick" style="color:#234e69"><a href="#032803" label="[03:28:03]">&lt;pabs3&gt;</a></span><span class="message">like the repro builds project, there always be regressions and new arches/software things to bootstrap, so I definitely wouldn't call it done</span></div><div class="line" id="032814"><span class="nick" style="color:#6c3d55"><a href="#032814" label="[03:28:14]">&lt;achaninja&gt;</a></span><span class="message">it just takes a lot of jumping around repositories and rereading to understand what is going on</span></div><div class="line" id="032814"><span class="nick" style="color:#6c3d55"><a href="#032814" label="[03:28:14]">&lt;achaninja&gt;</a></span><span class="message">yeah</span></div><div class="line" id="032837"><span class="nick" style="color:#6c3d55"><a href="#032837" label="[03:28:37]">&lt;achaninja&gt;</a></span><span class="message">lots of arches - its quite impressive</span></div><div class="line" id="032858"><span class="nick" style="color:#234e69"><a href="#032858" label="[03:28:58]">&lt;pabs3&gt;</a></span><span class="message">(also things like shortening bootstrap chains to avoid zillions of ancient versions)</span></div><div class="line" id="032923"><span class="nick" style="color:#6d2462"><a href="#032923" label="[03:29:23]">&lt;littlebobeep&gt;</a></span><span class="message">stikonas[m]: I don't understand why you cannot have different hashes of bootstrap binaries then just use Guix to download substitutes, you are not compiling the substitutes so why does it matter that locally compiled packages would be different hashes than substitutes built with different bootstrap path?  If the substitutes support your ISA they should run, even if your bootstrap binaries are</span></div><div class="line" id="032923"><span class="nick" style="color:#6d2462"><a href="#032923" label="[03:29:23]">&lt;littlebobeep&gt;</a></span><span class="message">different, no?  I have not studied substitutes much I never used them so correct me if I am wrong</span></div><div class="line" id="033023"><span class="nick" style="color:#80b1d3"><a href="#033023" label="[03:30:23]">&lt;stikonas[m]&gt;</a></span><span class="message">Guix ci server simply won't have substitutes that your guix is requesting</span></div><div class="line" id="033212"><span class="nick" style="color:#80b1d3"><a href="#033212" label="[03:32:12]">&lt;stikonas[m]&gt;</a></span><span class="message">gcc-hash1 and gcc-hash2 are different unrelated things for guix</span></div><div class="line" id="033217"><span class="nick" style="color:#6c3d55"><a href="#033217" label="[03:32:17]">&lt;achaninja&gt;</a></span><span class="message">i dunno about guix, but nix has more than one type of package, some are 'content hashed', others are 'build script hashed'</span></div><div class="line" id="033233"><span class="nick" style="color:#6c3d55"><a href="#033233" label="[03:32:33]">&lt;achaninja&gt;</a></span><span class="message">content hashed packages in nix don't care about where they came from</span></div><div class="line" id="033738"><span class="nick" style="color:#6d2462"><a href="#033738" label="[03:37:38]">&lt;littlebobeep&gt;</a></span><span class="message">stikonas[m]: Okay I will have to study how substitutes work to understand as I never used them before, but it does not make logical sense to me once you have a base OS installed that binaries for the correct ISA cannot simply be downloaded and executed, even if the bootstrap path was different... a different bootstrap path just means the hashes should be different if you compile yourself, it</span></div><div class="line" id="033744"><span class="nick" style="color:#6d2462"><a href="#033744" label="[03:37:44]">&lt;littlebobeep&gt;</a></span><span class="message">should not cause binary incompatibility with substitutes built using a different bootstrap</span></div><div class="line" id="034857"><span class="nick" style="color:#6b8072"><a href="#034857" label="[03:48:57]">&lt;oriansj&gt;</a></span><span class="message">pabs3: well the lisp and the FORTh approaches were discarded because writing a useful C compiler in Assembly was literally done in less than 24 hours. I challenge *ANYONE* to make a cc_x86 in Lisp or FORTH or any real language in that time frame before they claim their language is better for bootstrapping. Then I want to see them build their language in assembly because no one wants to do that shit in hex</span></div><div class="line" id="035009"><span class="nick" style="color:#6b8072"><a href="#035009" label="[03:50:09]">&lt;oriansj&gt;</a></span><span class="message">achaninja: from your fresh perspective what could be done to aid in making things more clear and easier to understand?</span></div><div class="line" id="035318"><span class="nick" style="color:#6b8072"><a href="#035318" label="[03:53:18]">&lt;oriansj&gt;</a></span><span class="message">pabs3: I can't respond but if I were to respond, I'd merely suggest if those languages were actually any good at bootstrapping, why when they had decades to prove that point that a single inexperienced C programmer did what they couldn't in less than 24 hours and then started to do bootstrapping speed runs to show how trivial of a problem it really was.</span></div><div class="line" id="035356"><span class="nick" style="color:#6c3d55"><a href="#035356" label="[03:53:56]">&lt;achaninja&gt;</a></span><span class="message">oriansj: as one example - I don't think knight is explained once. My understanding now is that knight is a custom virtual architecture you have made to simulate bootstrapping. I guess I inferred stage0-posix is a port away from the knight architecture</span></div><div class="line" id="035407"><span class="nick" style="color:#234e69"><a href="#035407" label="[03:54:07]">&lt;pabs3&gt;</a></span><span class="message">I can paste these answers to LWN if you want</span></div><div class="line" id="035423"><span class="nick" style="color:#2e2a4a"><a href="#035423" label="[03:54:23]">&lt;theruran&gt;</a></span><span class="message">oriansj: I am interested in cutting out C from the bootstrap path to Ada, that's why I was looking at lisp.s and forth.s</span></div><div class="line" id="035456"><span class="nick" style="color:#6b8072"><a href="#035456" label="[03:54:56]">&lt;oriansj&gt;</a></span><span class="message">pabs3: give me a couple minutes to compile a well framed reponse for you to paste</span></div><div class="line" id="035508"><span class="nick" style="color:#234e69"><a href="#035508" label="[03:55:08]">&lt;pabs3&gt;</a></span><span class="message">ok, thanks</span></div><div class="line" id="035640"><span class="nick" style="color:#6b8072"><a href="#035640" label="[03:56:40]">&lt;oriansj&gt;</a></span><span class="message">achaninja: stage0 is bare metal (no operating systems) stage0-posix is the stage0 steps on top of a POSIX kernel. Knight was an ancient CPU architecture that was rare enough for me to say that probably wasn't backdoor'd and used it to learn how to program in assembly</span></div><div class="line" id="035729"><span class="nick" style="color:#6c3d55"><a href="#035729" label="[03:57:29]">&lt;achaninja&gt;</a></span><span class="message">I see</span></div><div class="line" id="035834"><span class="nick" style="color:#6b8072"><a href="#035834" label="[03:58:34]">&lt;oriansj&gt;</a></span><span class="message">theruran: well you would either have to find an Ada compiler written in a language other than C or Ada or create one using a language that wasn't bootstrapped in C or written in C and repeat until you hit assembly.</span></div><div class="line" id="035947"><span class="nick" style="color:#6c3d55"><a href="#035947" label="[03:59:47]">&lt;achaninja&gt;</a></span><span class="message">oriansj: another question I had</span></div><div class="line" id="035958"><span class="nick" style="color:#6c3d55"><a href="#035958" label="[03:59:58]">&lt;achaninja&gt;</a></span><span class="message">can m2-mes run mescc?</span></div><div class="line" id="040009"><span class="nick" style="color:#6b8072"><a href="#040009" label="[04:00:09]">&lt;oriansj&gt;</a></span><span class="message">achaninja: yes</span></div><div class="line" id="040013"><span class="nick" style="color:#6c3d55"><a href="#040013" label="[04:00:13]">&lt;achaninja&gt;</a></span><span class="message">the documentation says it cant</span></div><div class="line" id="040014"><span class="nick" style="color:#6c3d55"><a href="#040014" label="[04:00:14]">&lt;achaninja&gt;</a></span><span class="message">sirt if</span></div><div class="line" id="040017"><span class="nick" style="color:#6c3d55"><a href="#040017" label="[04:00:17]">&lt;achaninja&gt;</a></span><span class="message">sort of</span></div><div class="line" id="040025"><span class="nick" style="color:#6b8072"><a href="#040025" label="[04:00:25]">&lt;oriansj&gt;</a></span><span class="message">it also needs nyacc</span></div><div class="line" id="040058"><span class="nick" style="color:#6c3d55"><a href="#040058" label="[04:00:58]">&lt;achaninja&gt;</a></span><span class="message">so this is accurate:</span></div><div class="line" id="040100"><span class="nick" style="color:#6c3d55"><a href="#040100" label="[04:01:00]">&lt;achaninja&gt;</a></span><span class="message">The goal of this project is to provide a minimally-adapted GNU Mes which can be compiled by M2-Planet and is able to compile the real GNU Mes (and thereby run mescc).</span></div><div class="line" id="040115"><span class="nick" style="color:#6c3d55"><a href="#040115" label="[04:01:15]">&lt;achaninja&gt;</a></span><span class="message">you first need to compile the real gnu mes</span></div><div class="line" id="040132"><span class="nick" style="color:#6c3d55"><a href="#040132" label="[04:01:32]">&lt;achaninja&gt;</a></span><span class="message">before you can run mescc</span></div><div class="line" id="040141"><span class="nick" style="color:#6c3d55"><a href="#040141" label="[04:01:41]">&lt;achaninja&gt;</a></span><span class="message">?</span></div><div class="line" id="040144"><span class="nick" style="color:#6b8072"><a href="#040144" label="[04:01:44]">&lt;oriansj&gt;</a></span><span class="message">achaninja: we don't actually compile the real gnu mes right now and just run MesCC on mes-m2</span></div><div class="line" id="040158"><span class="nick" style="color:#6b8072"><a href="#040158" label="[04:01:58]">&lt;oriansj&gt;</a></span><span class="message">and use that to compile TCC and bootstrap the rest</span></div><div class="line" id="040211"><span class="nick" style="color:#6c3d55"><a href="#040211" label="[04:02:11]">&lt;achaninja&gt;</a></span><span class="message">right, that snippet is from the readme which confused me</span></div><div class="line" id="040226"><span class="nick" style="color:#2e2a4a"><a href="#040226" label="[04:02:26]">&lt;theruran&gt;</a></span><span class="message">oriansj: I was originally looking at portable Schemes, but I want to explore other paths too. my impression of Forth is that it's easier to read and write than assembly</span></div><div class="line" id="040306"><span class="nick" style="color:#2e2a4a"><a href="#040306" label="[04:03:06]">&lt;theruran&gt;</a></span><span class="message">well, and this seedForth-interactive has exceptions, for example that would be handy</span></div><div class="line" id="040309"><span class="nick" style="color:#6c3d55"><a href="#040309" label="[04:03:09]">&lt;achaninja&gt;</a></span><span class="message">I attempted to run m2-mes but got a few segfaults</span></div><div class="line" id="040319"><span class="nick" style="color:#6b8072"><a href="#040319" label="[04:03:19]">&lt;oriansj&gt;</a></span><span class="message">theruran: depends on how comfortable you are dealing with stacks honestly</span></div><div class="line" id="040338"><span class="nick" style="color:#6c3d55"><a href="#040338" label="[04:03:38]">&lt;achaninja&gt;</a></span><span class="message">(probably user error)</span></div><div class="line" id="040339"><span class="nick" style="color:#2e2a4a"><a href="#040339" label="[04:03:39]">&lt;theruran&gt;</a></span><span class="message">good point. :) it's hard to say</span></div><div class="line" id="040404"><span class="nick" style="color:#6b8072"><a href="#040404" label="[04:04:04]">&lt;oriansj&gt;</a></span><span class="message">achaninja: well mes-m2 is *very* touchy unfortunately</span></div><div class="line" id="040409"><span class="nick" style="color:#6c3d55"><a href="#040409" label="[04:04:09]">&lt;achaninja&gt;</a></span><span class="message">fwiw, im trying to bootstrap a linux package tree from stage0-posix</span></div><div class="line" id="040423"><span class="nick" style="color:#6b8072"><a href="#040423" label="[04:04:23]">&lt;oriansj&gt;</a></span><span class="message">so it is better to just blame me for its bugginess</span></div><div class="line" id="040428"><span class="nick" style="color:#6c3d55"><a href="#040428" label="[04:04:28]">&lt;achaninja&gt;</a></span><span class="message">:P</span></div><div class="line" id="040440"><span class="nick" style="color:#6b8072"><a href="#040440" label="[04:04:40]">&lt;oriansj&gt;</a></span><span class="message">achaninja: did you look at live-bootstrap yet?</span></div><div class="line" id="040450"><span class="nick" style="color:#6c3d55"><a href="#040450" label="[04:04:50]">&lt;achaninja&gt;</a></span><span class="message">yeah</span></div><div class="line" id="040452"><span class="nick" style="color:#6c3d55"><a href="#040452" label="[04:04:52]">&lt;achaninja&gt;</a></span><span class="message">I was hoping I could avoid qemu</span></div><div class="line" id="040526"><span class="nick" style="color:#6c3d55"><a href="#040526" label="[04:05:26]">&lt;achaninja&gt;</a></span><span class="message">I guess live bootstrap would be the best example though</span></div><div class="line" id="040540"><span class="nick" style="color:#6b8072"><a href="#040540" label="[04:05:40]">&lt;oriansj&gt;</a></span><span class="message">achaninja: you don't need qemu, just write directly to a hard disk and boot</span></div><div class="line" id="040848"><span class="nick" style="color:#6c3d55"><a href="#040848" label="[04:08:48]">&lt;achaninja&gt;</a></span><span class="message">it looks like live-bootstrap uses python and qemu - i guess its ok</span></div><div class="line" id="040935"><span class="nick" style="color:#6c3d55"><a href="#040935" label="[04:09:35]">&lt;achaninja&gt;</a></span><span class="message">I was trying to make a system that could be bootstrapped on a host linux that only had curl and shell basically</span></div><div class="line" id="040958"><span class="nick" style="color:#6c3d55"><a href="#040958" label="[04:09:58]">&lt;achaninja&gt;</a></span><span class="message">and perhaps a way to chroot</span></div><div class="line" id="041056"><span class="nick" style="color:#6c3d55"><a href="#041056" label="[04:10:56]">&lt;achaninja&gt;</a></span><span class="message">I suppose python and qemu are quite common anyway</span></div><div class="line" id="041202"><span class="nick" style="color:#6c3d55"><a href="#041202" label="[04:12:02]">&lt;achaninja&gt;</a></span><span class="message">thanks for the help :) I will study live-bootstrap more</span></div><div class="line" id="041220"><span class="nick" style="color:#6c3d55"><a href="#041220" label="[04:12:20]">&lt;achaninja&gt;</a></span><span class="message">and thanks again for everything</span></div><div class="line" id="041223"><span class="nick" style="color:#6c3d55"><a href="#041223" label="[04:12:23]">&lt;achaninja&gt;</a></span><span class="message">its really cool</span></div><div class="line" id="041543"><span class="nick" style="color:#6c3d55"><a href="#041543" label="[04:15:43]">&lt;achaninja&gt;</a></span><span class="message">in a way livebootstrap is better than what I was thinking because it also controls the kernel</span></div><div class="line" id="042353"><span class="nick" style="color:#6b8072"><a href="#042353" label="[04:23:53]">&lt;oriansj&gt;</a></span><span class="message">pabs3: <a rel="nofollow" href="https://paste.debian.net/1239757/">https://paste.debian.net/1239757/</a>  here is my response [And yes I am trying to goad them into providing us with additional bootstrapping roots thus making our trust model even stronger]</span></div><div class="line" id="042518"><span class="nick" style="color:#234e69"><a href="#042518" label="[04:25:18]">&lt;pabs3&gt;</a></span><span class="message">will post</span></div><div class="line" id="042611"><span class="nick" style="color:#6b8072"><a href="#042611" label="[04:26:11]">&lt;oriansj&gt;</a></span><span class="message">achaninja: well in live-bootstrap the python and the qemu bit can be disposed of if you are willing to do manual work as once you have it, you only need a kernel and to use kaem-optional-seed as your init</span></div><div class="line" id="042621"><span class="nick" style="color:#6b8072"><a href="#042621" label="[04:26:21]">&lt;oriansj&gt;</a></span><span class="message">pabs3: thank you</span></div><div class="line" id="042644"><span class="nick" style="color:#234e69"><a href="#042644" label="[04:26:44]">&lt;pabs3&gt;</a></span><span class="message">I think that last para will need to be edited, that sort of language isn't appropriate on LWN :)</span></div><div class="line" id="042747"><span class="nick" style="color:#234e69"><a href="#042747" label="[04:27:47]">&lt;pabs3&gt;</a></span><span class="message">replaced with &quot;stop talking&quot; :)</span></div><div class="line" id="042812"><span class="nick" style="color:#234e69"><a href="#042812" label="[04:28:12]">&lt;pabs3&gt;</a></span><span class="message"> <a rel="nofollow" href="https://lwn.net/Articles/893608/">https://lwn.net/Articles/893608/</a> </span></div><div class="line" id="042825"><span class="nick" style="color:#d9d9d9"><a href="#042825" label="[04:28:25]">&lt;muurkha&gt;</a></span><span class="message">haha</span></div><div class="line" id="042857"><span class="nick" style="color:#6b8072"><a href="#042857" label="[04:28:57]">&lt;oriansj&gt;</a></span><span class="message">pabs3: thank you for the correction in language</span></div><div class="line" id="043105"><span class="nick" style="color:#d9d9d9"><a href="#043105" label="[04:31:05]">&lt;muurkha&gt;</a></span><span class="message">you could probably find a way to phrase it that makes it sound like you're calmly amused by the boasting of the Forth and Lisp enthusiasts</span></div><div class="line" id="043144"><span class="nick" style="color:#d9d9d9"><a href="#043144" label="[04:31:44]">&lt;muurkha&gt;</a></span><span class="message">rather than angrily trying to... out-boast them</span></div><div class="line" id="043238"><span class="nick" style="color:#6b8072"><a href="#043238" label="[04:32:38]">&lt;oriansj&gt;</a></span><span class="message">muurkha: good point; not sure how to do that but would be interesting to see</span></div><div class="line" id="043329"><span class="nick" style="color:#bc80bd"><a href="#043329" label="[04:33:29]">&lt;vagrantc&gt;</a></span><span class="message">reproducible builds doesn't mean much without bootstrappability ...</span></div><div class="line" id="043346"><span class="nick" style="color:#bc80bd"><a href="#043346" label="[04:33:46]">&lt;vagrantc&gt;</a></span><span class="message">and bootstrapping is a lot stronger with reproducible builds...</span></div><div class="line" id="043357"><span class="nick" style="color:#d9d9d9"><a href="#043357" label="[04:33:57]">&lt;muurkha&gt;</a></span><span class="message">well, when you say, &quot;In the decades for which Lisp and FORTH existed, why didn't they solve such a trivial problem?&quot; it sounds like you're attacking Lisp and Forth and think they're worthless</span></div><div class="line" id="043404"><span class="nick" style="color:#bc80bd"><a href="#043404" label="[04:34:04]">&lt;vagrantc&gt;</a></span><span class="message">this whole &quot;one of the other argument&quot; is silly.</span></div><div class="line" id="043411"><span class="nick" style="color:#bc80bd"><a href="#043411" label="[04:34:11]">&lt;vagrantc&gt;</a></span><span class="message">er, &quot;one or the other&quot;</span></div><div class="line" id="043431"><span class="nick" style="color:#bc80bd"><a href="#043431" label="[04:34:31]">&lt;vagrantc&gt;</a></span><span class="message">it's not which is more important, because they are more meaningful together</span></div><div class="line" id="043446"><span class="nick" style="color:#d9d9d9"><a href="#043446" label="[04:34:46]">&lt;muurkha&gt;</a></span><span class="message">vagrantc: agreed</span></div><div class="line" id="043454"><span class="nick" style="color:#6b8072"><a href="#043454" label="[04:34:54]">&lt;oriansj&gt;</a></span><span class="message">excellent point vagrantc</span></div><div class="line" id="043536"><span class="nick" style="color:#6b8072"><a href="#043536" label="[04:35:36]">&lt;oriansj&gt;</a></span><span class="message">as the combination of M2-Planet+mescc-tools+MesCC proved</span></div><div class="line" id="043610"><span class="nick" style="color:#d9d9d9"><a href="#043610" label="[04:36:10]">&lt;muurkha&gt;</a></span><span class="message">oriansj: imagine what an elderly, respected professor who had written cc_x86 would write about people claiming Forth and Lisp were better</span></div><div class="line" id="043632"><span class="nick" style="color:#d9d9d9"><a href="#043632" label="[04:36:32]">&lt;muurkha&gt;</a></span><span class="message">calmly amused and secure in his accomplishment instead of defensive and counterattacking</span></div><div class="line" id="043644"><span class="nick" style="color:#d9d9d9"><a href="#043644" label="[04:36:44]">&lt;muurkha&gt;</a></span><span class="message">because you deserve to be secure in your accomplishment</span></div><div class="line" id="043701"><span class="nick" style="color:#d9d9d9"><a href="#043701" label="[04:37:01]">&lt;muurkha&gt;</a></span><span class="message">and I think what you're doing is doctorate-quality work</span></div><div class="line" id="043743"><span class="nick" style="color:#d9d9d9"><a href="#043743" label="[04:37:43]">&lt;muurkha&gt;</a></span><span class="message">I think it's possible that the Lisp/Forth/whatever approach will ultimately yield a shorter, simpler path, but that has yet to be shown</span></div><div class="line" id="043808"><span class="nick" style="color:#d9d9d9"><a href="#043808" label="[04:38:08]">&lt;muurkha&gt;</a></span><span class="message">it might turn out that it does, and that would be a good thing, because then we'd have a shorter, simpler path</span></div><div class="line" id="043819"><span class="nick" style="color:#d9d9d9"><a href="#043819" label="[04:38:19]">&lt;muurkha&gt;</a></span><span class="message">but for now the best one we've found is cc_x86</span></div><div class="line" id="043858"><span class="nick" style="color:#d9d9d9"><a href="#043858" label="[04:38:58]">&lt;muurkha&gt;</a></span><span class="message">the other thing is that if someone *did* find that shorter, simpler path, we'd want them to expect a warm welcome here</span></div><div class="line" id="043902"><span class="nick" style="color:#d9d9d9"><a href="#043902" label="[04:39:02]">&lt;muurkha&gt;</a></span><span class="message">not attacks</span></div><div class="line" id="043952"><span class="nick" style="color:#6c3d55"><a href="#043952" label="[04:39:52]">&lt;achaninja&gt;</a></span><span class="message">personally I think if bootstrap must be done via tcc, there is not that much point in using lisp/forth</span></div><div class="line" id="044013"><span class="nick" style="color:#6c3d55"><a href="#044013" label="[04:40:13]">&lt;achaninja&gt;</a></span><span class="message">just my opinion though</span></div><div class="line" id="044017"><span class="nick" style="color:#d9d9d9"><a href="#044017" label="[04:40:17]">&lt;muurkha&gt;</a></span><span class="message">for example, <a rel="nofollow" href="http://canonical.org/~kragen/sw/dev3/qfitzah.s">http://canonical.org/~kragen/sw/dev3/qfitzah.s</a>  is an exploration of mine in that direction.  I haven't gotten there yet and I may not get there, but if I do get there I sure hope you don't think it's an attack on cc_x86</span></div><div class="line" id="044042"><span class="nick" style="color:#d9d9d9"><a href="#044042" label="[04:40:42]">&lt;muurkha&gt;</a></span><span class="message">achaninja: it might turn out that something lispy or forthy turns out to be a shorter path to tcc</span></div><div class="line" id="044052"><span class="nick" style="color:#d9d9d9"><a href="#044052" label="[04:40:52]">&lt;muurkha&gt;</a></span><span class="message">or even a shorter alternative to tcc for building gcc</span></div><div class="line" id="044104"><span class="nick" style="color:#6b8072"><a href="#044104" label="[04:41:04]">&lt;oriansj&gt;</a></span><span class="message">muurkha: I'd honestly love to see myself get proven wrong</span></div><div class="line" id="044124"><span class="nick" style="color:#234e69"><a href="#044124" label="[04:41:24]">&lt;pabs3&gt;</a></span><span class="message">vagrantc: can I quote you on LWN? :) want to respond to <a rel="nofollow" href="https://lwn.net/Articles/893339/">https://lwn.net/Articles/893339/</a> </span></div><div class="line" id="044129"><span class="nick" style="color:#d9d9d9"><a href="#044129" label="[04:41:29]">&lt;muurkha&gt;</a></span><span class="message">oriansj: that anticipated delight isn't coming through yet</span></div><div class="line" id="044138"><span class="nick" style="color:#6b8072"><a href="#044138" label="[04:41:38]">&lt;oriansj&gt;</a></span><span class="message">a shorter and better path in *ANY* language is quite welcome</span></div><div class="line" id="044233"><span class="nick" style="color:#6d2462"><a href="#044233" label="[04:42:33]">&lt;littlebobeep&gt;</a></span><span class="message">Sorry LISP/Forth path is SUPER interesting topic, but can someone please tell me how to use stage0 without a kernel binary, I thought it was impossible for live-bootstrap to function without Linux image at present?</span></div><div class="line" id="044239"><span class="nick" style="color:#d9d9d9"><a href="#044239" label="[04:42:39]">&lt;muurkha&gt;</a></span><span class="message">qfitzah is 731 lines of assembly right now, and will probably be close to 1000 lines when it's done, which is significantly less than the 3783 SLOC of cc_x86.  but qfitzah is just an interpreter</span></div><div class="line" id="044353"><span class="nick" style="color:#6b8072"><a href="#044353" label="[04:43:53]">&lt;oriansj&gt;</a></span><span class="message">littlebobeep: live-bootstrap does need Linux right now but stage0 pieces don't require a kernel at all</span></div><div class="line" id="044429"><span class="nick" style="color:#6b8072"><a href="#044429" label="[04:44:29]">&lt;oriansj&gt;</a></span><span class="message">in fact every piece can run on bare metal with a single input and a single output (say serial ports or paper tape or etc)</span></div><div class="line" id="044448"><span class="nick" style="color:#6d2462"><a href="#044448" label="[04:44:48]">&lt;littlebobeep&gt;</a></span><span class="message">oriansj: Okay I don't understand how to use stage0 without a kernel.... obviously this is on x86 only so U-boot is out so can you load init steps diretly from GRUB?</span></div><div class="line" id="044510"><span class="nick" style="color:#6d2462"><a href="#044510" label="[04:45:10]">&lt;littlebobeep&gt;</a></span><span class="message">OKay I don't have serial or paper tape on my x86 hardware haha</span></div><div class="line" id="044522"><span class="nick" style="color:#6b8072"><a href="#044522" label="[04:45:22]">&lt;oriansj&gt;</a></span><span class="message">that is why one idea is to get a POSIX kernel  M2-Planet can build which is good enough to run live-bootstrap up to the Linux bootstrap bit</span></div><div class="line" id="044604"><span class="nick" style="color:#6b8072"><a href="#044604" label="[04:46:04]">&lt;oriansj&gt;</a></span><span class="message">littlebobeep: well on x86, you fit everything in an MBR (510 bytes) and work off of that</span></div><div class="line" id="044632"><span class="nick" style="color:#6b8072"><a href="#044632" label="[04:46:32]">&lt;oriansj&gt;</a></span><span class="message">floppy drives also would work</span></div><div class="line" id="044710"><span class="nick" style="color:#6b8072"><a href="#044710" label="[04:47:10]">&lt;oriansj&gt;</a></span><span class="message">one suggested roots is: <a rel="nofollow" href="https://github.com/nanochess/bootOS">https://github.com/nanochess/bootOS</a> </span></div><div class="line" id="044729"><span class="nick" style="color:#d9d9d9"><a href="#044729" label="[04:47:29]">&lt;muurkha&gt;</a></span><span class="message">the hypothesis behind qfitzah is that you can write a C compiler in the language it interprets in a lot less than 3000 lines of code, because otccn.c is 524 SLOC and otccelfn.c is 730, and I think the Qfitzah language will be easier to write compilers in than C</span></div><div class="line" id="044730"><span class="nick" style="color:#6d2462"><a href="#044730" label="[04:47:30]">&lt;littlebobeep&gt;</a></span><span class="message">Ahhhh do SSDs even have MBR</span></div><div class="line" id="044741"><span class="nick" style="color:#6d2462"><a href="#044741" label="[04:47:41]">&lt;littlebobeep&gt;</a></span><span class="message">I have no floppy hardware :P</span></div><div class="line" id="044758"><span class="nick" style="color:#d9d9d9"><a href="#044758" label="[04:47:58]">&lt;muurkha&gt;</a></span><span class="message">yeah, the MBR is a thing that the BIOS imposes on your disk</span></div><div class="line" id="044809"><span class="nick" style="color:#6d2462"><a href="#044809" label="[04:48:09]">&lt;littlebobeep&gt;</a></span><span class="message">muurkha: BIOS?  I have either proprietary UEFI or coreboot</span></div><div class="line" id="044815"><span class="nick" style="color:#d9d9d9"><a href="#044815" label="[04:48:15]">&lt;muurkha&gt;</a></span><span class="message">yeah, or UEFI</span></div><div class="line" id="044832"><span class="nick" style="color:#6b8072"><a href="#044832" label="[04:48:32]">&lt;oriansj&gt;</a></span><span class="message">muurkha: I look forward to seeing your program, it looks awesome</span></div><div class="line" id="044930"><span class="nick" style="color:#6b8072"><a href="#044930" label="[04:49:30]">&lt;oriansj&gt;</a></span><span class="message">littlebobeep: mbr behavior is pretty standard for all x86 firmware</span></div><div class="line" id="044940"><span class="nick" style="color:#d9d9d9"><a href="#044940" label="[04:49:40]">&lt;muurkha&gt;</a></span><span class="message">oriansj: if you want you can git clone <a rel="nofollow" href="http://canonical.org/~kragen/sw/dev3/.git">http://canonical.org/~kragen/sw/dev3/.git</a>  and make dump_qfitzah</span></div><div class="line" id="044947"><span class="nick" style="color:#6d2462"><a href="#044947" label="[04:49:47]">&lt;littlebobeep&gt;</a></span><span class="message">oriansj: Okay even for SSDs?</span></div><div class="line" id="045001"><span class="nick" style="color:#d9d9d9"><a href="#045001" label="[04:50:01]">&lt;muurkha&gt;</a></span><span class="message">it runs but it's pretty janky</span></div><div class="line" id="045005"><span class="nick" style="color:#6d2462"><a href="#045005" label="[04:50:05]">&lt;littlebobeep&gt;</a></span><span class="message">What if I use GPT partitioning?</span></div><div class="line" id="045058"><span class="nick" style="color:#6b8072"><a href="#045058" label="[04:50:58]">&lt;oriansj&gt;</a></span><span class="message">littlebobeep: There is still an MBR loaded on boot with the standard signature</span></div><div class="line" id="045118"><span class="nick" style="color:#d9d9d9"><a href="#045118" label="[04:51:18]">&lt;muurkha&gt;</a></span><span class="message">littlebobeep: btw your nickname is awesome</span></div><div class="line" id="045139"><span class="nick" style="color:#6d2462"><a href="#045139" label="[04:51:39]">&lt;littlebobeep&gt;</a></span><span class="message">muurkha: ^_^</span></div><div class="line" id="045204"><span class="nick" style="color:#6d2462"><a href="#045204" label="[04:52:04]">&lt;littlebobeep&gt;</a></span><span class="message">oriansj: You are saying still MBR loaded on SSDs with GPT schemes?</span></div><div class="line" id="045229"><span class="nick" style="color:#6b8072"><a href="#045229" label="[04:52:29]">&lt;oriansj&gt;</a></span><span class="message">littlebobeep: you can prove it to yourself if you like</span></div><div class="line" id="045251"><span class="nick" style="color:#6d2462"><a href="#045251" label="[04:52:51]">&lt;littlebobeep&gt;</a></span><span class="message">oriansj: So would I not even need GRUB?  I could load stage0 binaries directly from UEFI or coreboot?</span></div><div class="line" id="045309"><span class="nick" style="color:#6b8072"><a href="#045309" label="[04:53:09]">&lt;oriansj&gt;</a></span><span class="message">no you would not need GRUB</span></div><div class="line" id="045354"><span class="nick" style="color:#6b8072"><a href="#045354" label="[04:53:54]">&lt;oriansj&gt;</a></span><span class="message">in fact GRUB installs in the MBR its loader to boot</span></div><div class="line" id="045406"><span class="nick" style="color:#d9d9d9"><a href="#045406" label="[04:54:06]">&lt;muurkha&gt;</a></span><span class="message">(current tinycc is 75kloc)</span></div><div class="line" id="045423"><span class="nick" style="color:#6b8072"><a href="#045423" label="[04:54:23]">&lt;oriansj&gt;</a></span><span class="message">that is how GRUB even gets loaded at all</span></div><div class="line" id="045457"><span class="nick" style="color:#d9d9d9"><a href="#045457" label="[04:54:57]">&lt;muurkha&gt;</a></span><span class="message">UEFI in general is pretty good at loading binaries directly, it can load something like a PE executable</span></div><div class="line" id="045521"><span class="nick" style="color:#6d2462"><a href="#045521" label="[04:55:21]">&lt;littlebobeep&gt;</a></span><span class="message">oriansj: Can't you install GRUB elsewhere and avoid putting anything in MBR?</span></div><div class="line" id="045525"><span class="nick" style="color:#d9d9d9"><a href="#045525" label="[04:55:25]">&lt;muurkha&gt;</a></span><span class="message">you don't need to go through the traditional 512-byte MBR → second stage bootloader → real kernel chain like with BIOS</span></div><div class="line" id="045554"><span class="nick" style="color:#6d2462"><a href="#045554" label="[04:55:54]">&lt;littlebobeep&gt;</a></span><span class="message">muurkha: What about coreboot?</span></div><div class="line" id="045623"><span class="nick" style="color:#d9d9d9"><a href="#045623" label="[04:56:23]">&lt;muurkha&gt;</a></span><span class="message">I don't know much about coreboot except that I wish I was using it</span></div><div class="line" id="045623"><span class="nick" style="color:#6b8072"><a href="#045623" label="[04:56:23]">&lt;oriansj&gt;</a></span><span class="message">littlebobeep: yeah with coreboot, you can ignore the MBR entirely by using GRUB instead of seabios</span></div><div class="line" id="045633"><span class="nick" style="color:#bc80bd"><a href="#045633" label="[04:56:33]">&lt;vagrantc&gt;</a></span><span class="message">pabs3: sure!</span></div><div class="line" id="045700"><span class="nick" style="color:#234e69"><a href="#045700" label="[04:57:00]">&lt;pabs3&gt;</a></span><span class="message">thanks, posted <a rel="nofollow" href="https://lwn.net/Articles/893610/">https://lwn.net/Articles/893610/</a> </span></div><div class="line" id="045740"><span class="nick" style="color:#6d2462"><a href="#045740" label="[04:57:40]">&lt;littlebobeep&gt;</a></span><span class="message">oriansj: Ahhh well GRUB does not support LUKS2 IIRC which was problematic for choosing a payload (I haven't chosen a payload yet)</span></div><div class="line" id="045806"><span class="nick" style="color:#bc80bd"><a href="#045806" label="[04:58:06]">&lt;vagrantc&gt;</a></span><span class="message">what is especially cool is if you can bit-for-bit reproducibly arrive at the same point from two different bootstrapping paths</span></div><div class="line" id="045824"><span class="nick" style="color:#234e69"><a href="#045824" label="[04:58:24]">&lt;pabs3&gt;</a></span><span class="message">littlebobeep: GRUB supports LUKS2 now <a rel="nofollow" href="https://www.phoronix.com/scan.php?page=news_item&amp;px=GRUB-2.06-Released">https://www.phoronix.com/scan.php?page=news_item&amp;px=GRUB-2.06-Released</a> </span></div><div class="line" id="045834"><span class="nick" style="color:#bc80bd"><a href="#045834" label="[04:58:34]">&lt;vagrantc&gt;</a></span><span class="message">more bootstrapping paths are surely welcome</span></div><div class="line" id="045924"><span class="nick" style="color:#6c3d55"><a href="#045924" label="[04:59:24]">&lt;achaninja&gt;</a></span><span class="message">btw, I found a  C compiler that might offer an alternative to tcc -</span></div><div class="line" id="045926"><span class="nick" style="color:#6c3d55"><a href="#045926" label="[04:59:26]">&lt;achaninja&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/lasarus/C-Compiler">https://github.com/lasarus/C-Compiler</a> </span></div><div class="line" id="045931"><span class="nick" style="color:#6c3d55"><a href="#045931" label="[04:59:31]">&lt;achaninja&gt;</a></span><span class="message">it includes an assembler and linker</span></div><div class="line" id="045955"><span class="nick" style="color:#6c3d55"><a href="#045955" label="[04:59:55]">&lt;achaninja&gt;</a></span><span class="message">though i guess theres no rush to replace tcc</span></div><div class="line" id="050015"><span class="nick" style="color:#6d2462"><a href="#050015" label="[05:00:15]">&lt;littlebobeep&gt;</a></span><span class="message">pabs3: OH WOW such old news, look at me</span></div><div class="line" id="050128"><span class="nick" style="color:#6b8072"><a href="#050128" label="[05:01:28]">&lt;oriansj&gt;</a></span><span class="message">littlebobeep: well there are some serious restrictions on luks2 use right now but remember we are all able to learn from each other and no one is expected to know everything.</span></div><div class="line" id="050221"><span class="nick" style="color:#6d2462"><a href="#050221" label="[05:02:21]">&lt;littlebobeep&gt;</a></span><span class="message">But I might still need seabios to choose between multiple SSDs, USB flash, CD/DVD, etc. boot devices with nice menu, I don't think GRUB supports this, so I might need something messy like coreboot --&gt; seabios --&gt; GRUB</span></div><div class="line" id="050245"><span class="nick" style="color:#6d2462"><a href="#050245" label="[05:02:45]">&lt;littlebobeep&gt;</a></span><span class="message">But I don't have a good OS to compile these on as of yet</span></div><div class="line" id="050327"><span class="nick" style="color:#d9d9d9"><a href="#050327" label="[05:03:27]">&lt;muurkha&gt;</a></span><span class="message">pabs3: that's wonderful news!</span></div><div class="line" id="050351"><span class="nick" style="color:#6b8072"><a href="#050351" label="[05:03:51]">&lt;oriansj&gt;</a></span><span class="message">achaninja: no license file means absolutely no go</span></div><div class="line" id="050438"><span class="nick" style="color:#6b8072"><a href="#050438" label="[05:04:38]">&lt;oriansj&gt;</a></span><span class="message">if it had an FSF approved license, it might be a different story but right off the bat the lack of a license file is a serious red flag</span></div><div class="line" id="050529"><span class="nick" style="color:#6d2462"><a href="#050529" label="[05:05:29]">&lt;littlebobeep&gt;</a></span><span class="message">oriansj: Ooohhh well what restrictions are there?  You mean like only supporting PBKDF2?  <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/grub.git/commit/?id=365e0cc3e7e44151c14dd29514c2f870b49f9755">https://git.savannah.gnu.org/cgit/grub.git/commit/?id=365e0cc3e7e44151c14dd29514c2f870b49f9755</a> </span></div><div class="line" id="050617"><span class="nick" style="color:#6d2462"><a href="#050617" label="[05:06:17]">&lt;littlebobeep&gt;</a></span><span class="message">I don't know why I would prefer one KDF over another, I need to read more...</span></div><div class="line" id="050738"><span class="nick" style="color:#d9d9d9"><a href="#050738" label="[05:07:38]">&lt;muurkha&gt;</a></span><span class="message">achaninja: maybe you could ask the author about a license</span></div><div class="line" id="050830"><span class="nick" style="color:#6b8072"><a href="#050830" label="[05:08:30]">&lt;oriansj&gt;</a></span><span class="message">littlebobeep: yes that would be an example of a restriction you need to be careful about if wanting to leverage grub to boot a luks2 partition</span></div><div class="line" id="050834"><span class="nick" style="color:#d9d9d9"><a href="#050834" label="[05:08:34]">&lt;muurkha&gt;</a></span><span class="message">littlebobeep: PBKDF2 is fine, but scrypt is memory-hard and therefore possibly less vulnerable to ASIC attacks</span></div><div class="line" id="051110"><span class="nick" style="color:#6d2462"><a href="#051110" label="[05:11:10]">&lt;littlebobeep&gt;</a></span><span class="message">muurkha: Bitmain and Goldshell built some: <a rel="nofollow" href="https://asicmarketplace.com/scrypt/">https://asicmarketplace.com/scrypt/</a> </span></div><div class="line" id="051213"><span class="nick" style="color:#6d2462"><a href="#051213" label="[05:12:13]">&lt;littlebobeep&gt;</a></span><span class="message">oriansj: Know of any other restrictions?</span></div><div class="line" id="051217"><span class="nick" style="color:#d9d9d9"><a href="#051217" label="[05:12:17]">&lt;muurkha&gt;</a></span><span class="message">littlebobeep: yeah, I don't mean you can't accelerate it with ASICs, but that the speedup is smaller than for non-memory-hard KDFs</span></div><div class="line" id="051653"><span class="nick" style="color:#6b8072"><a href="#051653" label="[05:16:53]">&lt;oriansj&gt;</a></span><span class="message">littlebobeep: you need to use GRUB 2.06 or newer. The GRUB EFI binary does not support LUKS2 yet</span></div><div class="line" id="051905"><span class="nick" style="color:#6d2462"><a href="#051905" label="[05:19:05]">&lt;littlebobeep&gt;</a></span><span class="message">oriansj: Yeah I don't see a problem using a new version if it supports the features I want, but what do you mean &quot;GRUB EFI&quot; don't all GRUB 2.x versions support EFI/UEFI?   Anyway I don't like UEFI much so I will avoid Tianocore and use Seabios or something I guess</span></div><div class="line" id="051956"><span class="nick" style="color:#6d2462"><a href="#051956" label="[05:19:56]">&lt;littlebobeep&gt;</a></span><span class="message">I have one machine where coreboot is incompatible so I might just for example use GRUB 2.06+ but again here I don't understand your dichotomous contrast between GRUB and GRUB EFI</span></div><div class="line" id="052144"><span class="nick" style="color:#6d2462"><a href="#052144" label="[05:21:44]">&lt;littlebobeep&gt;</a></span><span class="message">I think with UEFI I need unencrypted FAT32 efi partition which sounds lame</span></div><div class="line" id="052156"><span class="nick" style="color:#6b8072"><a href="#052156" label="[05:21:56]">&lt;oriansj&gt;</a></span><span class="message">as I remember is GRUB EFI 2.06 had an issue which resulted it being disabled for EFI builds. I am however fuzz on the exact details</span></div><div class="line" id="052335"><span class="nick" style="color:#6d2462"><a href="#052335" label="[05:23:35]">&lt;littlebobeep&gt;</a></span><span class="message">oriansj: But aren't all GRUB 2.x versions UEFI compatible?</span></div><div class="line" id="052426"><span class="nick" style="color:#6b8072"><a href="#052426" label="[05:24:26]">&lt;oriansj&gt;</a></span><span class="message">ALL UEFI binaries are PE binaries, not all GRUB builds are PE binaries</span></div><div class="line" id="052618"><span class="nick" style="color:#6d2462"><a href="#052618" label="[05:26:18]">&lt;littlebobeep&gt;</a></span><span class="message">TIL PE is a Microsoft format</span></div><div class="line" id="061142"><span class="nick" style="color:#6b8072"><a href="#061142" label="[06:11:42]">&lt;oriansj&gt;</a></span><span class="message">hmmm, I wonder if s-expression C would still count as C code</span></div><div class="line" id="062300"><span class="nick" style="color:#d9d9d9"><a href="#062300" label="[06:23:00]">&lt;muurkha&gt;</a></span><span class="message">if it doesn't all you need is a parser</span></div><div class="line" id="062638"><span class="nick" style="color:#d9d9d9"><a href="#062638" label="[06:26:38]">&lt;muurkha&gt;</a></span><span class="message">which I guess might sound sort of like &quot;now draw the rest of the owl&quot;</span></div><div class="line" id="062803"><span class="nick" style="color:#d9d9d9"><a href="#062803" label="[06:28:03]">&lt;muurkha&gt;</a></span><span class="message">in general I think of parsers for programming languages as being a bit easier than the other parts of a compiler (type checking, code generation, the operations on primitive types) but I guess C is a simpleminded enough language that parsing might actually be the majority of, say, otcc</span></div><div class="line" id="062847"><span class="nick" style="color:#6b8072"><a href="#062847" label="[06:28:47]">&lt;oriansj&gt;</a></span><span class="message">well I was thinking of how much could cc_* be trimed down if given a blank sheet of paper</span></div><div class="line" id="063032"><span class="nick" style="color:#d9d9d9"><a href="#063032" label="[06:30:32]">&lt;muurkha&gt;</a></span><span class="message">it's a little hard to tell in otcc because parsing is interspersed with code generation</span></div><div class="line" id="063105"><span class="nick" style="color:#d9d9d9"><a href="#063105" label="[06:31:05]">&lt;muurkha&gt;</a></span><span class="message">skip(')'); unary(0); if (tok == '=') {next(); o(0x50); /* push %eax */ expr(); o(0x59); /* pop %ecx */ o(0x0188 + (t == TOK_INT)); /* movl %eax/%al, (%ecx) */} else if (t) {</span></div><div class="line" id="063343"><span class="nick" style="color:#d9d9d9"><a href="#063343" label="[06:33:43]">&lt;muurkha&gt;</a></span><span class="message">certainly there's nothing wrong with writing your bootstrap C compiler in S-expression syntax if you want to avoid writing a precedence parser</span></div><div class="line" id="063423"><span class="nick" style="color:#d9d9d9"><a href="#063423" label="[06:34:23]">&lt;muurkha&gt;</a></span><span class="message">there are even cases where S-expression syntax is clearer, like if (x &amp; 0x03 == 0x02) { ... }</span></div><div class="line" id="063541"><span class="nick" style="color:#d9d9d9"><a href="#063541" label="[06:35:41]">&lt;muurkha&gt;</a></span><span class="message">which (as is probably obvious to you but not to everybody) actually means if (false) { ... }</span></div><div class="line" id="063615"><span class="nick" style="color:#d9d9d9"><a href="#063615" label="[06:36:15]">&lt;muurkha&gt;</a></span><span class="message">because 0x03 == 0x02 is 0 and x &amp; 0 is always 0</span></div><div class="line" id="063643"><span class="nick" style="color:#d9d9d9"><a href="#063643" label="[06:36:43]">&lt;muurkha&gt;</a></span><span class="message">I think it's pretty common for S-expression syntax to be less clear than infix syntax, though</span></div><div class="line" id="063759"><span class="nick" style="color:#6b8072"><a href="#063759" label="[06:37:59]">&lt;oriansj&gt;</a></span><span class="message">but brutally simple to parse: <a rel="nofollow" href="https://paste.debian.net/1239764/">https://paste.debian.net/1239764/</a> </span></div><div class="line" id="063822"><span class="nick" style="color:#d9d9d9"><a href="#063822" label="[06:38:22]">&lt;muurkha&gt;</a></span><span class="message">yeah, absolutely!</span></div><div class="line" id="063858"><span class="nick" style="color:#d9d9d9"><a href="#063858" label="[06:38:58]">&lt;muurkha&gt;</a></span><span class="message">Forth syntax is even simpler: &quot;words are separated by spaces&quot;.  but I never got to the point of finding Forth syntax as readable as infix or S-expression syntax</span></div><div class="line" id="063946"><span class="nick" style="color:#d9d9d9"><a href="#063946" label="[06:39:46]">&lt;muurkha&gt;</a></span><span class="message">you know how Neal Stephenson says that every man cherishes a dream that, given the right circumstances, he could spend a few years studying martial arts at a Shaolin temple or something and become an invincible fighter?  I don't</span></div><div class="line" id="064007"><span class="nick" style="color:#6b8072"><a href="#064007" label="[06:40:07]">&lt;oriansj&gt;</a></span><span class="message">well in C I can get away without +/-/*/\//% or &amp;&amp;/&amp;/||/|/^ primitives</span></div><div class="line" id="064009"><span class="nick" style="color:#d9d9d9"><a href="#064009" label="[06:40:09]">&lt;muurkha&gt;</a></span><span class="message">I cherish the dream that if I spent a few years programming in Forth it would become readable to me</span></div><div class="line" id="064029"><span class="nick" style="color:#d9d9d9"><a href="#064029" label="[06:40:29]">&lt;muurkha&gt;</a></span><span class="message">as readable as S-expressions, at least, if not as readable as infix syntax</span></div><div class="line" id="064106"><span class="nick" style="color:#d9d9d9"><a href="#064106" label="[06:41:06]">&lt;muurkha&gt;</a></span><span class="message">fuck, I'd be satisfied with &quot;no more bug-prone than assembly&quot;</span></div><div class="line" id="064117"><span class="nick" style="color:#d9d9d9"><a href="#064117" label="[06:41:17]">&lt;muurkha&gt;</a></span><span class="message">I'll never know because I'll never spend years programming in Forth because it's not 01989</span></div><div class="line" id="064134"><span class="nick" style="color:#6b8072"><a href="#064134" label="[06:41:34]">&lt;oriansj&gt;</a></span><span class="message">well FORTH just makes me wince at another off by one stack bug</span></div><div class="line" id="064200"><span class="nick" style="color:#d9d9d9"><a href="#064200" label="[06:42:00]">&lt;muurkha&gt;</a></span><span class="message">yeah, although I did finally learn how to solve *that* problem</span></div><div class="line" id="064231"><span class="nick" style="color:#d9d9d9"><a href="#064231" label="[06:42:31]">&lt;muurkha&gt;</a></span><span class="message">the problem is that I was trying to use the operand stack for variables, and that's bad</span></div><div class="line" id="064244"><span class="nick" style="color:#d9d9d9"><a href="#064244" label="[06:42:44]">&lt;muurkha&gt;</a></span><span class="message">it's good for maybe one variable, if that</span></div><div class="line" id="064417"><span class="nick" style="color:#d9d9d9"><a href="#064417" label="[06:44:17]">&lt;muurkha&gt;</a></span><span class="message">the other problem is that I was trying to put multiple lines of code into a single function</span></div><div class="line" id="064458"><span class="nick" style="color:#d9d9d9"><a href="#064458" label="[06:44:58]">&lt;muurkha&gt;</a></span><span class="message">if you limit your Forth subroutines to one or maybe two lines of code you can use the text interpreter as a single-stepping debugger</span></div><div class="line" id="064501"><span class="nick" style="color:#6b8072"><a href="#064501" label="[06:45:01]">&lt;oriansj&gt;</a></span><span class="message">actually if we force C programmers to use whitespace in a handful of cases: <a rel="nofollow" href="https://paste.debian.net/1239765/">https://paste.debian.net/1239765/</a>  becomes a valid C parser</span></div><div class="line" id="064518"><span class="nick" style="color:#d9d9d9"><a href="#064518" label="[06:45:18]">&lt;muurkha&gt;</a></span><span class="message">but instead of typing &quot;step&quot; in GDB you type the name of the next line of code you want to run</span></div><div class="line" id="064543"><span class="nick" style="color:#d9d9d9"><a href="#064543" label="[06:45:43]">&lt;muurkha&gt;</a></span><span class="message">that makes it pretty easy to track down your off-by-one stack bugs</span></div><div class="line" id="064620"><span class="nick" style="color:#d9d9d9"><a href="#064620" label="[06:46:20]">&lt;muurkha&gt;</a></span><span class="message">at that point Forth becomes just an untyped C with obfuscated RPN syntax</span></div><div class="line" id="064650"><span class="nick" style="color:#d9d9d9"><a href="#064650" label="[06:46:50]">&lt;muurkha&gt;</a></span><span class="message">but an interpreter, and if you're running on some kind of poorly characterized hardware an interpreter is worth the hardware's weight in gold</span></div><div class="line" id="064740"><span class="nick" style="color:#d9d9d9"><a href="#064740" label="[06:47:40]">&lt;muurkha&gt;</a></span><span class="message">but at that point you can pretty much compile C to Forth one to one</span></div><div class="line" id="064949"><span class="nick" style="color:#d9d9d9"><a href="#064949" label="[06:49:49]">&lt;muurkha&gt;</a></span><span class="message">instead of while(c != '\n') c = fgetc(input); you write something like  begin  c @ lf &lt;&gt; while  input fgetc c !  repeat</span></div><div class="line" id="065008"><span class="nick" style="color:#d9d9d9"><a href="#065008" label="[06:50:08]">&lt;muurkha&gt;</a></span><span class="message">and you give it a name so you can call it from the text interpreter</span></div><div class="line" id="065153"><span class="nick" style="color:#d9d9d9"><a href="#065153" label="[06:51:53]">&lt;muurkha&gt;</a></span><span class="message">the problem I have with that kind of thing is that because I am never going to spend a few years programming in Forth I am just never going to be able to read  begin  c @ lf &lt;&gt; while  as easily as while (c != '\n')</span></div><div class="line" id="065217"><span class="nick" style="color:#d9d9d9"><a href="#065217" label="[06:52:17]">&lt;muurkha&gt;</a></span><span class="message">or even (while (!= c '\n') or whatever</span></div><div class="line" id="065326"><span class="nick" style="color:#d9d9d9"><a href="#065326" label="[06:53:26]">&lt;muurkha&gt;</a></span><span class="message">but the readability difference between while(c != '\n') c = fgetc(input); and (while (!= c '\n') (= c (fgetc input))) is just not that major to me</span></div><div class="line" id="065524"><span class="nick" style="color:#d9d9d9"><a href="#065524" label="[06:55:24]">&lt;muurkha&gt;</a></span><span class="message">btw sizeof(char) is 1 by definition, it doesn't give you any extra portability</span></div><div class="line" id="065549"><span class="nick" style="color:#d9d9d9"><a href="#065549" label="[06:55:49]">&lt;muurkha&gt;</a></span><span class="message">I'd factor out that definition of strdup into a separate function</span></div><div class="line" id="070659"><span class="nick" style="color:#6b8072"><a href="#070659" label="[07:06:59]">&lt;oriansj&gt;</a></span><span class="message">ok I stripped out a few things from C that aren't actually required and it does a ok subset of C</span></div><div class="line" id="070700"><span class="nick" style="color:#6b8072"><a href="#070700" label="[07:07:00]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/torture_c">https://github.com/oriansj/torture_c</a> </span></div><div class="line" id="070728"><span class="nick" style="color:#6b8072"><a href="#070728" label="[07:07:28]">&lt;oriansj&gt;</a></span><span class="message">needs refinement but it is solidly in the right direction for minimal C subset implementation</span></div><div class="line" id="070743"><span class="nick" style="color:#6c3d55"><a href="#070743" label="[07:07:43]">&lt;achaninja&gt;</a></span><span class="message">oriansj: nice - does it build itself?</span></div><div class="line" id="070800"><span class="nick" style="color:#6c3d55"><a href="#070800" label="[07:08:00]">&lt;achaninja&gt;</a></span><span class="message">I too am in the C compiler club :P</span></div><div class="line" id="070801"><span class="nick" style="color:#6c3d55"><a href="#070801" label="[07:08:01]">&lt;achaninja&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/andrewchambers/c">https://github.com/andrewchambers/c</a> </span></div><div class="line" id="070813"><span class="nick" style="color:#6c3d55"><a href="#070813" label="[07:08:13]">&lt;achaninja&gt;</a></span><span class="message">I love C</span></div><div class="line" id="071109"><span class="nick" style="color:#6b8072"><a href="#071109" label="[07:11:09]">&lt;oriansj&gt;</a></span><span class="message">achaninja: well it was a 20 minute hack to cut down M2-Planet so not yet</span></div><div class="line" id="071127"><span class="nick" style="color:#d9d9d9"><a href="#071127" label="[07:11:27]">&lt;muurkha&gt;</a></span><span class="message">wonderful!</span></div><div class="line" id="071203"><span class="nick" style="color:#6b8072"><a href="#071203" label="[07:12:03]">&lt;oriansj&gt;</a></span><span class="message">also I need to figure out a hack to put in gcc_req.h that would enable # line comments in C such that I don't have to add /**/ support back in</span></div><div class="line" id="071311"><span class="nick" style="color:#6c3d55"><a href="#071311" label="[07:13:11]">&lt;achaninja&gt;</a></span><span class="message">have you seen c4 btw? I guess you might have</span></div><div class="line" id="071322"><span class="nick" style="color:#6c3d55"><a href="#071322" label="[07:13:22]">&lt;achaninja&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/rswier/c4">https://github.com/rswier/c4</a> </span></div><div class="line" id="071341"><span class="nick" style="color:#6c3d55"><a href="#071341" label="[07:13:41]">&lt;achaninja&gt;</a></span><span class="message">it sort of interpreters C</span></div><div class="line" id="071347"><span class="nick" style="color:#6c3d55"><a href="#071347" label="[07:13:47]">&lt;achaninja&gt;</a></span><span class="message">interprets*</span></div><div class="line" id="071438"><span class="nick" style="color:#d9d9d9"><a href="#071438" label="[07:14:38]">&lt;muurkha&gt;</a></span><span class="message">hmm, isn't /**/ support something like if (nextchar('/') &amp;&amp; nextchar('*')) while (!(nextchar('*') &amp;&amp; nextchar('/'))) discard_char(); ?</span></div><div class="line" id="071527"><span class="nick" style="color:#d9d9d9"><a href="#071527" label="[07:15:27]">&lt;muurkha&gt;</a></span><span class="message">the intended semantics there are that nextchar(c) advances the input pointer by 1 if the next char is c, returning true, and otherwise returns false and leaves the input pointer unchanged</span></div><div class="line" id="071625"><span class="nick" style="color:#6b8072"><a href="#071625" label="[07:16:25]">&lt;oriansj&gt;</a></span><span class="message">well it is just a couple lines: <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/blob/master/cc_reader.c#L268">https://github.com/oriansj/M2-Planet/blob/master/cc_reader.c#L268</a> </span></div><div class="line" id="071644"><span class="nick" style="color:#d9d9d9"><a href="#071644" label="[07:16:44]">&lt;muurkha&gt;</a></span><span class="message">hmm, I guess that's not quite right because you actually need to leave the input pointer before the '/2' or '* ' instead of in the middle of it</span></div><div class="line" id="071653"><span class="nick" style="color:#6b8072"><a href="#071653" label="[07:16:53]">&lt;oriansj&gt;</a></span><span class="message">but I am wondering if there was a way to skip it while remaining GCC compatible</span></div><div class="line" id="071749"><span class="nick" style="color:#d9d9d9"><a href="#071749" label="[07:17:49]">&lt;muurkha&gt;</a></span><span class="message">hmm, how does that handle the &quot;/2&quot; case?</span></div><div class="line" id="071831"><span class="nick" style="color:#d9d9d9"><a href="#071831" label="[07:18:31]">&lt;muurkha&gt;</a></span><span class="message">I don't see where the byte consumed on line 270 gets unconsumed if the following thing wasn't a '*' or '/' or '='</span></div><div class="line" id="071832"><span class="nick" style="color:#6b8072"><a href="#071832" label="[07:18:32]">&lt;oriansj&gt;</a></span><span class="message">/2 just becomes / and 2 as separate tokens</span></div><div class="line" id="071856"><span class="nick" style="color:#d9d9d9"><a href="#071856" label="[07:18:56]">&lt;muurkha&gt;</a></span><span class="message">sorry if this is a super naive question</span></div><div class="line" id="071921"><span class="nick" style="color:#6b8072"><a href="#071921" label="[07:19:21]">&lt;oriansj&gt;</a></span><span class="message">we just pass the char back in the second time we hit that function</span></div><div class="line" id="071956"><span class="nick" style="color:#d9d9d9"><a href="#071956" label="[07:19:56]">&lt;muurkha&gt;</a></span><span class="message">oh, because it falls out the bottom and returns '/'</span></div><div class="line" id="072005"><span class="nick" style="color:#6b8072"><a href="#072005" label="[07:20:05]">&lt;oriansj&gt;</a></span><span class="message">so as 2 doesn't match anything else in that if statement and it just falls out as the return char to the calling function who just shoves it back in</span></div><div class="line" id="072035"><span class="nick" style="color:#6b8072"><a href="#072035" label="[07:20:35]">&lt;oriansj&gt;</a></span><span class="message">the token &quot;/&quot; is just placed in the list</span></div><div class="line" id="072140"><span class="nick" style="color:#d9d9d9"><a href="#072140" label="[07:21:40]">&lt;muurkha&gt;</a></span><span class="message">I see</span></div><div class="line" id="072144"><span class="nick" style="color:#6b8072"><a href="#072144" label="[07:21:44]">&lt;oriansj&gt;</a></span><span class="message">as we build the token list in a push down fashion and just do a reverse at the end to save time and work</span></div><div class="line" id="072150"><span class="nick" style="color:#6c3d55"><a href="#072150" label="[07:21:50]">&lt;achaninja&gt;</a></span><span class="message">sorry if its not wanted - but heres another 'C like' written in sexpressions -  <a rel="nofollow" href="https://c9x.me/qscm/">https://c9x.me/qscm/</a> </span></div><div class="line" id="072156"><span class="nick" style="color:#d9d9d9"><a href="#072156" label="[07:21:56]">&lt;muurkha&gt;</a></span><span class="message">cool!</span></div><div class="line" id="072157"><span class="nick" style="color:#6c3d55"><a href="#072157" label="[07:21:57]">&lt;achaninja&gt;</a></span><span class="message">that self hosts</span></div><div class="line" id="072301"><span class="nick" style="color:#6c3d55"><a href="#072301" label="[07:23:01]">&lt;achaninja&gt;</a></span><span class="message">oops sorry i might have misremembered</span></div><div class="line" id="072318"><span class="nick" style="color:#6b8072"><a href="#072318" label="[07:23:18]">&lt;oriansj&gt;</a></span><span class="message">achaninja: it happens</span></div><div class="line" id="072348"><span class="nick" style="color:#d9d9d9"><a href="#072348" label="[07:23:48]">&lt;muurkha&gt;</a></span><span class="message">haha, &quot;The compiler in qscm (17.qscm ~7k) and in C (qscm.c ~5k).&quot;</span></div><div class="line" id="072351"><span class="nick" style="color:#d9d9d9"><a href="#072351" label="[07:23:51]">&lt;muurkha&gt;</a></span><span class="message">but here &quot;C&quot; means</span></div><div class="line" id="072411"><span class="nick" style="color:#d9d9d9"><a href="#072411" label="[07:24:11]">&lt;muurkha&gt;</a></span><span class="message">D(6,((L(2)==')')?qnil:B(Z4(qcomp,L(3),L(2),A),B(Z1(qnxt),Z3(q,L(2),Z4(qapp,L(5),A,qtok))))))</span></div><div class="line" id="072429"><span class="nick" style="color:#6c3d55"><a href="#072429" label="[07:24:29]">&lt;achaninja&gt;</a></span><span class="message">yeah, i misremembered, I remember a version that emit binary similar to tcc</span></div><div class="line" id="072434"><span class="nick" style="color:#6c3d55"><a href="#072434" label="[07:24:34]">&lt;achaninja&gt;</a></span><span class="message">this version seems to emit C</span></div><div class="line" id="072441"><span class="nick" style="color:#6c3d55"><a href="#072441" label="[07:24:41]">&lt;achaninja&gt;</a></span><span class="message">maybe I can find the binary version</span></div><div class="line" id="072458"><span class="nick" style="color:#d9d9d9"><a href="#072458" label="[07:24:58]">&lt;muurkha&gt;</a></span><span class="message">yeah, it does emit C</span></div><div class="line" id="072527"><span class="nick" style="color:#6b8072"><a href="#072527" label="[07:25:27]">&lt;oriansj&gt;</a></span><span class="message">well for a second there I thought an APL programmer was using long variables names and was confused.</span></div><div class="line" id="072530"><span class="nick" style="color:#6c3d55"><a href="#072530" label="[07:25:30]">&lt;achaninja&gt;</a></span><span class="message">perhaps its not much simpler than torture c</span></div><div class="line" id="072617"><span class="nick" style="color:#6b8072"><a href="#072617" label="[07:26:17]">&lt;oriansj&gt;</a></span><span class="message">and torture c does work with int foo(int a, char* b) {...}</span></div><div class="line" id="072729"><span class="nick" style="color:#6c3d55"><a href="#072729" label="[07:27:29]">&lt;achaninja&gt;</a></span><span class="message">another fun one - a lisp in 1k lines of C - <a rel="nofollow" href="https://github.com/rui314/minilisp">https://github.com/rui314/minilisp</a> </span></div><div class="line" id="072742"><span class="nick" style="color:#6c3d55"><a href="#072742" label="[07:27:42]">&lt;achaninja&gt;</a></span><span class="message">(I've sort of been collecting these projects over time)</span></div><div class="line" id="072842"><span class="nick" style="color:#6b8072"><a href="#072842" label="[07:28:42]">&lt;oriansj&gt;</a></span><span class="message">achaninja: have you seen sectorlisp or sectorbasic or sectorForth yet?</span></div><div class="line" id="073038"><span class="nick" style="color:#6c3d55"><a href="#073038" label="[07:30:38]">&lt;achaninja&gt;</a></span><span class="message">oh nice - I had forgotten about sectorlisp - had not seen the others</span></div><div class="line" id="073108"><span class="nick" style="color:#d9d9d9"><a href="#073108" label="[07:31:08]">&lt;muurkha&gt;</a></span><span class="message">I was trying to find a list of what language features torture_c does or doesn't have</span></div><div class="line" id="073321"><span class="nick" style="color:#6b8072"><a href="#073321" label="[07:33:21]">&lt;oriansj&gt;</a></span><span class="message">well it supports structs (with -&gt; access), arrays, functions, variables, inline assembly, 'chars', &quot;strings&quot;, if and while statements</span></div><div class="line" id="073340"><span class="nick" style="color:#d9d9d9"><a href="#073340" label="[07:33:40]">&lt;muurkha&gt;</a></span><span class="message">pointers? arithmetic?</span></div><div class="line" id="073415"><span class="nick" style="color:#d9d9d9"><a href="#073415" label="[07:34:15]">&lt;muurkha&gt;</a></span><span class="message">integer constants?  sequences of statements?  parameter type declarations?</span></div><div class="line" id="073435"><span class="nick" style="color:#6c3d55"><a href="#073435" label="[07:34:35]">&lt;achaninja&gt;</a></span><span class="message">whats the goal with torture c btw?</span></div><div class="line" id="073437"><span class="nick" style="color:#d9d9d9"><a href="#073437" label="[07:34:37]">&lt;muurkha&gt;</a></span><span class="message">structs passed and returned by value?  struct assignment?</span></div><div class="line" id="073548"><span class="nick" style="color:#6c3d55"><a href="#073548" label="[07:35:48]">&lt;achaninja&gt;</a></span><span class="message">muurkha: that doesn't sound very minimal</span></div><div class="line" id="073551"><span class="nick" style="color:#6b8072"><a href="#073551" label="[07:35:51]">&lt;oriansj&gt;</a></span><span class="message">well = is supported; it does support integer constants. compound statements and parameter type declarations and custom compond types</span></div><div class="line" id="073619"><span class="nick" style="color:#d9d9d9"><a href="#073619" label="[07:36:19]">&lt;muurkha&gt;</a></span><span class="message">achaninja: I'm not saying those things *should* be supported, just asking if they are</span></div><div class="line" id="073731"><span class="nick" style="color:#6b8072"><a href="#073731" label="[07:37:31]">&lt;oriansj&gt;</a></span><span class="message">but a = b + c; would need to be rewritten as a = add(b, c); int add(int b, int c) { asm(&quot;load eax, [esp+4]&quot; &quot;add eax, ebx&quot;);}</span></div><div class="line" id="073735"><span class="nick" style="color:#6c3d55"><a href="#073735" label="[07:37:35]">&lt;achaninja&gt;</a></span><span class="message">I think the first version of C basically had int and arrays only.</span></div><div class="line" id="073742"><span class="nick" style="color:#6c3d55"><a href="#073742" label="[07:37:42]">&lt;achaninja&gt;</a></span><span class="message">pointer and int are similar</span></div><div class="line" id="073814"><span class="nick" style="color:#6b8072"><a href="#073814" label="[07:38:14]">&lt;oriansj&gt;</a></span><span class="message">it does support int* and char*</span></div><div class="line" id="073820"><span class="nick" style="color:#6c3d55"><a href="#073820" label="[07:38:20]">&lt;achaninja&gt;</a></span><span class="message">I had a link to the first C compiler ... let me see</span></div><div class="line" id="073901"><span class="nick" style="color:#6c3d55"><a href="#073901" label="[07:39:01]">&lt;achaninja&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/mortdeus/legacy-cc/tree/master/prestruct">https://github.com/mortdeus/legacy-cc/tree/master/prestruct</a> </span></div><div class="line" id="073906"><span class="nick" style="color:#6c3d55"><a href="#073906" label="[07:39:06]">&lt;achaninja&gt;</a></span><span class="message">prestruct - 1972 :)</span></div><div class="line" id="073939"><span class="nick" style="color:#6b8072"><a href="#073939" label="[07:39:39]">&lt;oriansj&gt;</a></span><span class="message">but struct is to minimal to add</span></div><div class="line" id="073948"><span class="nick" style="color:#6c3d55"><a href="#073948" label="[07:39:48]">&lt;achaninja&gt;</a></span><span class="message">yeah struct is worth it</span></div><div class="line" id="073955"><span class="nick" style="color:#6c3d55"><a href="#073955" label="[07:39:55]">&lt;achaninja&gt;</a></span><span class="message">better then remembering offsets</span></div><div class="line" id="074029"><span class="nick" style="color:#6b8072"><a href="#074029" label="[07:40:29]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/blob/master/cc_types.c#L215">https://github.com/oriansj/M2-Planet/blob/master/cc_types.c#L215</a> </span></div><div class="line" id="074054"><span class="nick" style="color:#6c3d55"><a href="#074054" label="[07:40:54]">&lt;achaninja&gt;</a></span><span class="message">I just found it humorous since the first C compiler might have been a worse torture to use than torture C</span></div><div class="line" id="074114"><span class="nick" style="color:#6b8072"><a href="#074114" label="[07:41:14]">&lt;oriansj&gt;</a></span><span class="message">and more lines of code too</span></div><div class="line" id="074129"><span class="nick" style="color:#6c3d55"><a href="#074129" label="[07:41:29]">&lt;achaninja&gt;</a></span><span class="message">:P we have hindsight</span></div><div class="line" id="074203"><span class="nick" style="color:#6c3d55"><a href="#074203" label="[07:42:03]">&lt;achaninja&gt;</a></span><span class="message">this is really fun</span></div><div class="line" id="074233"><span class="nick" style="color:#6c3d55"><a href="#074233" label="[07:42:33]">&lt;achaninja&gt;</a></span><span class="message">oriansj: are you working on making the bootstrap more portable?</span></div><div class="line" id="074237"><span class="nick" style="color:#6c3d55"><a href="#074237" label="[07:42:37]">&lt;achaninja&gt;</a></span><span class="message">is that the sort of goal</span></div><div class="line" id="074352"><span class="nick" style="color:#6b8072"><a href="#074352" label="[07:43:52]">&lt;oriansj&gt;</a></span><span class="message">achaninja: well I will work to help get stage0-posix, mescc-tools and M2-Planet ported to more architectures; my main goal is to push the limits of bootstrapping to new heights</span></div><div class="line" id="074702"><span class="nick" style="color:#6c3d55"><a href="#074702" label="[07:47:02]">&lt;achaninja&gt;</a></span><span class="message">cool :)</span></div><div class="line" id="075117"><span class="nick" style="color:#6c3d55"><a href="#075117" label="[07:51:17]">&lt;achaninja&gt;</a></span><span class="message">I was exploring alternative paths other than tcc</span></div><div class="line" id="075131"><span class="nick" style="color:#6c3d55"><a href="#075131" label="[07:51:31]">&lt;achaninja&gt;</a></span><span class="message">i gotta make sure they work with mescc I guess</span></div><div class="line" id="075144"><span class="nick" style="color:#6c3d55"><a href="#075144" label="[07:51:44]">&lt;achaninja&gt;</a></span><span class="message">I like tcc, but i am not a fan of its code at all tbh</span></div><div class="line" id="075149"><span class="nick" style="color:#6b8072"><a href="#075149" label="[07:51:49]">&lt;oriansj&gt;</a></span><span class="message">achaninja: well not exactly</span></div><div class="line" id="075210"><span class="nick" style="color:#6b8072"><a href="#075210" label="[07:52:10]">&lt;oriansj&gt;</a></span><span class="message">as if you could build qbe with your C compiler</span></div><div class="line" id="075233"><span class="nick" style="color:#6c3d55"><a href="#075233" label="[07:52:33]">&lt;achaninja&gt;</a></span><span class="message">i have been trying to get a version of musl that proc can build</span></div><div class="line" id="075234"><span class="nick" style="color:#6b8072"><a href="#075234" label="[07:52:34]">&lt;oriansj&gt;</a></span><span class="message">we could skip over TCC and mescc entirely and go straight to GCC building</span></div><div class="line" id="075248"><span class="nick" style="color:#6c3d55"><a href="#075248" label="[07:52:48]">&lt;achaninja&gt;</a></span><span class="message">cproc*</span></div><div class="line" id="075250"><span class="nick" style="color:#6c3d55"><a href="#075250" label="[07:52:50]">&lt;achaninja&gt;</a></span><span class="message">hmm</span></div><div class="line" id="075335"><span class="nick" style="color:#6c3d55"><a href="#075335" label="[07:53:35]">&lt;achaninja&gt;</a></span><span class="message">the problem is the linker and assembler</span></div><div class="line" id="075343"><span class="nick" style="color:#6c3d55"><a href="#075343" label="[07:53:43]">&lt;achaninja&gt;</a></span><span class="message">well for me that was a problem</span></div><div class="line" id="075348"><span class="nick" style="color:#6c3d55"><a href="#075348" label="[07:53:48]">&lt;achaninja&gt;</a></span><span class="message">I found</span></div><div class="line" id="075357"><span class="nick" style="color:#6c3d55"><a href="#075357" label="[07:53:57]">&lt;achaninja&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/aligrudi/neatld">https://github.com/aligrudi/neatld</a> </span></div><div class="line" id="075408"><span class="nick" style="color:#6c3d55"><a href="#075408" label="[07:54:08]">&lt;achaninja&gt;</a></span><span class="message">and I wrote a small x86 assembler</span></div><div class="line" id="075422"><span class="nick" style="color:#6c3d55"><a href="#075422" label="[07:54:22]">&lt;achaninja&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/andrewchambers/minias">https://github.com/andrewchambers/minias</a> </span></div><div class="line" id="075434"><span class="nick" style="color:#6c3d55"><a href="#075434" label="[07:54:34]">&lt;achaninja&gt;</a></span><span class="message">but yeah, just lots of pieces but nothing that all works</span></div><div class="line" id="075437"><span class="nick" style="color:#d9d9d9"><a href="#075437" label="[07:54:37]">&lt;muurkha&gt;</a></span><span class="message">achaninja: I think the first versions of C didn't have arrays, just pointers</span></div><div class="line" id="075454"><span class="nick" style="color:#d9d9d9"><a href="#075454" label="[07:54:54]">&lt;muurkha&gt;</a></span><span class="message">some people describe bc as being &quot;an early version of C&quot; and I think that's sort of true</span></div><div class="line" id="075509"><span class="nick" style="color:#6b8072"><a href="#075509" label="[07:55:09]">&lt;oriansj&gt;</a></span><span class="message">achaninja: well it takes a good deal of work to get all of the pieces working together well</span></div><div class="line" id="075511"><span class="nick" style="color:#d9d9d9"><a href="#075511" label="[07:55:11]">&lt;muurkha&gt;</a></span><span class="message">(but of course early B or C was never arbitrary precision)</span></div><div class="line" id="075520"><span class="nick" style="color:#6c3d55"><a href="#075520" label="[07:55:20]">&lt;achaninja&gt;</a></span><span class="message">oriansj: yeah :P</span></div><div class="line" id="075551"><span class="nick" style="color:#d9d9d9"><a href="#075551" label="[07:55:51]">&lt;muurkha&gt;</a></span><span class="message">achaninja: you don't like             t = &quot;++#m--%am*@R&lt;^1c/@%[_[H3c%@%[_[H3c+@.B#d-@%:_^BKd&lt;&lt;Z/03e&gt;&gt;`/03e&lt;=0f&gt;=/f&lt;@.f&gt;@1f==&amp;g!=\'g&amp;&amp;k||#l&amp;@.BCh^@.BSi|@.B+j~@/%Yd!</span></div><div class="line" id="075554"><span class="nick" style="color:#d9d9d9"><a href="#075554" label="[07:55:54]">&lt;muurkha&gt;</a></span><span class="message">@&amp;d*@b&quot;;</span></div><div class="line" id="075557"><span class="nick" style="color:#d9d9d9"><a href="#075557" label="[07:55:57]">&lt;muurkha&gt;</a></span><span class="message">?</span></div><div class="line" id="075557"><span class="nick" style="color:#6b8072"><a href="#075557" label="[07:55:57]">&lt;oriansj&gt;</a></span><span class="message">which is why I am so tempted to repick up the M3 work and build my own binutils compatible linker and assembler</span></div><div class="line" id="075621"><span class="nick" style="color:#6c3d55"><a href="#075621" label="[07:56:21]">&lt;achaninja&gt;</a></span><span class="message">I spent some time refactoring tcc into just a linker and assembler, but it wasn't fun at all</span></div><div class="line" id="075734"><span class="nick" style="color:#6b8072"><a href="#075734" label="[07:57:34]">&lt;oriansj&gt;</a></span><span class="message">hmmm</span></div><div class="line" id="075901"><span class="nick" style="color:#6b8072"><a href="#075901" label="[07:59:01]">&lt;oriansj&gt;</a></span><span class="message">what if I solved that linker and assembler problem for you?</span></div><div class="line" id="080034"><span class="nick" style="color:#6c3d55"><a href="#080034" label="[08:00:34]">&lt;achaninja&gt;</a></span><span class="message">well my original plan before i found mes/stage0 was to make a binary seed that contained cproc - qbe - some assembler - some linker .</span></div><div class="line" id="080044"><span class="nick" style="color:#6c3d55"><a href="#080044" label="[08:00:44]">&lt;achaninja&gt;</a></span><span class="message">then plot a path from that to g++</span></div><div class="line" id="080130"><span class="nick" style="color:#6c3d55"><a href="#080130" label="[08:01:30]">&lt;achaninja&gt;</a></span><span class="message">its still relatively big</span></div><div class="line" id="080206"><span class="nick" style="color:#6b8072"><a href="#080206" label="[08:02:06]">&lt;oriansj&gt;</a></span><span class="message">achaninja: well what would you find most fun?</span></div><div class="line" id="080300"><span class="nick" style="color:#6c3d55"><a href="#080300" label="[08:03:00]">&lt;achaninja&gt;</a></span><span class="message">not sure yet - I definitely want to help.</span></div><div class="line" id="080310"><span class="nick" style="color:#6c3d55"><a href="#080310" label="[08:03:10]">&lt;achaninja&gt;</a></span><span class="message">hmm</span></div><div class="line" id="080332"><span class="nick" style="color:#d9d9d9"><a href="#080332" label="[08:03:32]">&lt;muurkha&gt;</a></span><span class="message">:)</span></div><div class="line" id="080355"><span class="nick" style="color:#d9d9d9"><a href="#080355" label="[08:03:55]">&lt;muurkha&gt;</a></span><span class="message">oriansj: I promise not to argue with achaninja about the nature of truth</span></div><div class="line" id="080416"><span class="nick" style="color:#6b8072"><a href="#080416" label="[08:04:16]">&lt;oriansj&gt;</a></span><span class="message">lol</span></div><div class="line" id="080509"><span class="nick" style="color:#6b8072"><a href="#080509" label="[08:05:09]">&lt;oriansj&gt;</a></span><span class="message">achaninja: the most important bit is you enjoy yourself and have fun in your bootstrapping work.</span></div><div class="line" id="080542"><span class="nick" style="color:#6b8072"><a href="#080542" label="[08:05:42]">&lt;oriansj&gt;</a></span><span class="message">we encourage people to solve the problems they want solved in the way they want to solve them.</span></div><div class="line" id="080620"><span class="nick" style="color:#6c3d55"><a href="#080620" label="[08:06:20]">&lt;achaninja&gt;</a></span><span class="message">nice - my main goal is bootstrapping my distro from stage0</span></div><div class="line" id="080625"><span class="nick" style="color:#6c3d55"><a href="#080625" label="[08:06:25]">&lt;achaninja&gt;</a></span><span class="message">its a musl based distro</span></div><div class="line" id="080629"><span class="nick" style="color:#6b8072"><a href="#080629" label="[08:06:29]">&lt;oriansj&gt;</a></span><span class="message">we are here to provide encouragement, support, help and friendship</span></div><div class="line" id="080635"><span class="nick" style="color:#3c5b35"><a href="#080635" label="[08:06:35]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: oh, ok, i'll add those in my PR</span></div><div class="line" id="080642"><span class="nick" style="color:#6c3d55"><a href="#080642" label="[08:06:42]">&lt;achaninja&gt;</a></span><span class="message">haha - well its a niche topic and not everyone enjoys it :P</span></div><div class="line" id="080706"><span class="nick" style="color:#6c3d55"><a href="#080706" label="[08:07:06]">&lt;achaninja&gt;</a></span><span class="message">I am also a big fan of short build times</span></div><div class="line" id="080710"><span class="nick" style="color:#3c5b35"><a href="#080710" label="[08:07:10]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: the out of space problem was my fault, i had got my directories in some weird state triggering something weird in qemu/linux kernel, a fresh clone and it's all gone</span></div><div class="line" id="080714"><span class="nick" style="color:#6c3d55"><a href="#080714" label="[08:07:14]">&lt;achaninja&gt;</a></span><span class="message">the two are sort of at odds with eachother</span></div><div class="line" id="080736"><span class="nick" style="color:#6c3d55"><a href="#080736" label="[08:07:36]">&lt;achaninja&gt;</a></span><span class="message">but I can appreciate wanted to shorten all these bootstrap chains</span></div><div class="line" id="080750"><span class="nick" style="color:#d9d9d9"><a href="#080750" label="[08:07:50]">&lt;muurkha&gt;</a></span><span class="message">yeah</span></div><div class="line" id="080821"><span class="nick" style="color:#6b8072"><a href="#080821" label="[08:08:21]">&lt;oriansj&gt;</a></span><span class="message">well right now the longest part of live-bootstrap is MesCC building TCC if I remember correctly</span></div><div class="line" id="080835"><span class="nick" style="color:#d9d9d9"><a href="#080835" label="[08:08:35]">&lt;muurkha&gt;</a></span><span class="message">my thought with Qfitzah was that it ought to be reasonably straightforward to implement an interpreter for a very-high-level language in assembly</span></div><div class="line" id="080848"><span class="nick" style="color:#6c3d55"><a href="#080848" label="[08:08:48]">&lt;achaninja&gt;</a></span><span class="message">oriansj: how long does it take mesCC to build tcc?</span></div><div class="line" id="080856"><span class="nick" style="color:#6c3d55"><a href="#080856" label="[08:08:56]">&lt;achaninja&gt;</a></span><span class="message">I wasn't able to do it locally yet</span></div><div class="line" id="081043"><span class="nick" style="color:#6b8072"><a href="#081043" label="[08:10:43]">&lt;oriansj&gt;</a></span><span class="message">hmmm, stikonas or fossy would know better than me but if I recall correctly it is in the 30 minute range</span></div><div class="line" id="081124"><span class="nick" style="color:#6b8072"><a href="#081124" label="[08:11:24]">&lt;oriansj&gt;</a></span><span class="message">so there is room for serious improvement</span></div><div class="line" id="081131"><span class="nick" style="color:#6c3d55"><a href="#081131" label="[08:11:31]">&lt;achaninja&gt;</a></span><span class="message">I am not too worried though - for my package tree I was gonna have an optional bootstrap that you can toggle</span></div><div class="line" id="081147"><span class="nick" style="color:#6c3d55"><a href="#081147" label="[08:11:47]">&lt;achaninja&gt;</a></span><span class="message">or just download from a known stage</span></div><div class="line" id="081159"><span class="nick" style="color:#3c5b35"><a href="#081159" label="[08:11:59]">&lt;fossy&gt;</a></span><span class="message">achaninja, we are getting closer and closer to being able to run live-bootstrap without python and qemu as well</span></div><div class="line" id="081212"><span class="nick" style="color:#3c5b35"><a href="#081212" label="[08:12:12]">&lt;fossy&gt;</a></span><span class="message">you can run live-bootstrap right now in a chroot without python</span></div><div class="line" id="081220"><span class="nick" style="color:#d9d9d9"><a href="#081220" label="[08:12:20]">&lt;muurkha&gt;</a></span><span class="message">leaping directly from machine code to a higher-order programming language with pattern matching, flexible parametrically-polymorphic data containers, and dynamically dispatched method calls with multiple dispatch</span></div><div class="line" id="081236"><span class="nick" style="color:#6c3d55"><a href="#081236" label="[08:12:36]">&lt;achaninja&gt;</a></span><span class="message">fossy: nice</span></div><div class="line" id="081258"><span class="nick" style="color:#6b8072"><a href="#081258" label="[08:12:58]">&lt;oriansj&gt;</a></span><span class="message">muurkha: yes your Qfitzah looks like it could be quite interesting</span></div><div class="line" id="081331"><span class="nick" style="color:#6c3d55"><a href="#081331" label="[08:13:31]">&lt;achaninja&gt;</a></span><span class="message">can I get a link to Qfitzah ? I might have missed it</span></div><div class="line" id="081449"><span class="nick" style="color:#6b8072"><a href="#081449" label="[08:14:49]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="http://canonical.org/~kragen/sw/dev3/qfitzah.s">http://canonical.org/~kragen/sw/dev3/qfitzah.s</a> </span></div><div class="line" id="081449"><span class="nick" style="color:#3c5b35"><a href="#081449" label="[08:14:49]">&lt;fossy&gt;</a></span><span class="message">oriansj: on my system, mes libc is about 15 minutes, and tcc is a further ~10?</span></div><div class="line" id="081504"><span class="nick" style="color:#3c5b35"><a href="#081504" label="[08:15:04]">&lt;fossy&gt;</a></span><span class="message">i'm just up to that part in alive-bootstrap right now, will report back when it finishes</span></div><div class="line" id="081623"><span class="nick" style="color:#6b8072"><a href="#081623" label="[08:16:23]">&lt;oriansj&gt;</a></span><span class="message">cc_x86 is 14,479bytes in size so 1184 bytes of executable is rather tightly written assembly</span></div><div class="line" id="081741"><span class="nick" style="color:#6b8072"><a href="#081741" label="[08:17:41]">&lt;oriansj&gt;</a></span><span class="message">even M0 is 1613bytes in size and that just supports DEFINEs, Raw strings, hex literals and %immediates</span></div><div class="line" id="081756"><span class="nick" style="color:#3c5b35"><a href="#081756" label="[08:17:56]">&lt;fossy&gt;</a></span><span class="message">littlebobeep: RE: arm. there is quite a bit that would still need to be done to get arm working. I think mes has proper arm code generation now so that's fine, mes libc might be incomplete though. I think mes-m2 is also fine. TinyCC is def not fine, 0.9.26 (mes built version) i think has no arm support at all. 0.9.27/mob are ok i think. then it would be a matter of ironing out</span></div><div class="line" id="081758"><span class="nick" style="color:#3c5b35"><a href="#081758" label="[08:17:58]">&lt;fossy&gt;</a></span><span class="message">incompatibilites from tcc</span></div><div class="line" id="081824"><span class="nick" style="color:#3c5b35"><a href="#081824" label="[08:18:24]">&lt;fossy&gt;</a></span><span class="message">aarch64 may be unsupported by some part of the early triplet we use (binutils?)</span></div><div class="line" id="081836"><span class="nick" style="color:#3c5b35"><a href="#081836" label="[08:18:36]">&lt;fossy&gt;</a></span><span class="message">although, we arent really up to additional architectures in live-bootstrap yet</span></div><div class="line" id="082025"><span class="nick" style="color:#6b8072"><a href="#082025" label="[08:20:25]">&lt;oriansj&gt;</a></span><span class="message">one could say we need more developers to help flush out those issues before we can really say we support those architectures</span></div><div class="line" id="082447"><span class="nick" style="color:#6d2462"><a href="#082447" label="[08:24:47]">&lt;littlebobeep&gt;</a></span><span class="message">fossy: literally one minor point release of tcc magically has arm support?</span></div><div class="line" id="082818"><span class="nick" style="color:#af8d2f"><a href="#082818" label="[08:28:18]">&lt;janneke&gt;</a></span><span class="message">fossy, littlebobeep : on the guix' experimental wip-arm-bootstrap branch we build until glibc-mesboot0</span></div><div class="line" id="082845"><span class="nick" style="color:#af8d2f"><a href="#082845" label="[08:28:45]">&lt;janneke&gt;</a></span><span class="message">much work has been done in bootstrappable-tinycc</span></div><div class="line" id="083116"><span class="nick" style="color:#d9d9d9"><a href="#083116" label="[08:31:16]">&lt;muurkha&gt;</a></span><span class="message">oriansj: yeah, but Qfitzah is doing a great deal less than cc_x86.  it's an interpreter in which you could conceivably almost write something like cc_x86</span></div><div class="line" id="083509"><span class="nick" style="color:#6d2462"><a href="#083509" label="[08:35:09]">&lt;littlebobeep&gt;</a></span><span class="message">oriansj: what is qbe?</span></div><div class="line" id="083542"><span class="nick" style="color:#6b8072"><a href="#083542" label="[08:35:42]">&lt;oriansj&gt;</a></span><span class="message">well cc_x86 is a pretty low bar for a high level language; literally just pattern matching and basic stat tracking</span></div><div class="line" id="083613"><span class="nick" style="color:#6d2462"><a href="#083613" label="[08:36:13]">&lt;littlebobeep&gt;</a></span><span class="message">oriansj: also what is M3?</span></div><div class="line" id="083622"><span class="nick" style="color:#6b8072"><a href="#083622" label="[08:36:22]">&lt;oriansj&gt;</a></span><span class="message">littlebobeep: qbe is like a more minimal version of llvm: <a rel="nofollow" href="https://c9x.me/compile/">https://c9x.me/compile/</a> </span></div><div class="line" id="083851"><span class="nick" style="color:#6d2462"><a href="#083851" label="[08:38:51]">&lt;littlebobeep&gt;</a></span><span class="message">fossy: At what point are python and qemu required in the process currently?</span></div><div class="line" id="084039"><span class="nick" style="color:#6d2462"><a href="#084039" label="[08:40:39]">&lt;littlebobeep&gt;</a></span><span class="message">janneke: That's nice to hear!  is this armhf or aarch64?</span></div><div class="line" id="084042"><span class="nick" style="color:#d9d9d9"><a href="#084042" label="[08:40:42]">&lt;muurkha&gt;</a></span><span class="message">oriansj: yeah but Qfitzah doesn't have, like, arithmetic.  just enough logic that you can define arithmetic in terms of the Peano axioms.  but I've come to the conclusion that it at least needs integer subtraction and probably bitwise AND or OR, and most of the code is in there for that</span></div><div class="line" id="084137"><span class="nick" style="color:#6b8072"><a href="#084137" label="[08:41:37]">&lt;oriansj&gt;</a></span><span class="message">or inline assembly</span></div><div class="line" id="084313"><span class="nick" style="color:#d9d9d9"><a href="#084313" label="[08:43:13]">&lt;muurkha&gt;</a></span><span class="message">well, if you're using a program written in Qfitzah to output a program in assembly, you can certainly say what to include in it</span></div><div class="line" id="084415"><span class="nick" style="color:#d9d9d9"><a href="#084415" label="[08:44:15]">&lt;muurkha&gt;</a></span><span class="message">qbe is neat</span></div><div class="line" id="084601"><span class="nick" style="color:#6b8072"><a href="#084601" label="[08:46:01]">&lt;oriansj&gt;</a></span><span class="message">and I have to get up for work in 4 hours so off to sleep for me</span></div><div class="line" id="084740"><span class="nick" style="color:#6d2462"><a href="#084740" label="[08:47:40]">&lt;littlebobeep&gt;</a></span><span class="message">ouch</span></div><div class="line" id="084758"><span class="nick" style="color:#d9d9d9"><a href="#084758" label="[08:47:58]">&lt;muurkha&gt;</a></span><span class="message">sleep well</span></div><div class="line" id="090628"><span class="nick" style="color:#af8d2f"><a href="#090628" label="[09:06:28]">&lt;janneke&gt;</a></span><span class="message">littlebobeep: that's armhf</span></div><div class="line" id="090738"><span class="nick" style="color:#af8d2f"><a href="#090738" label="[09:07:38]">&lt;janneke&gt;</a></span><span class="message">the initial bootstrap phase is 32bit for x86 and arm</span></div><div class="line" id="093408"><span class="nick" style="color:#6d2462"><a href="#093408" label="[09:34:08]">&lt;littlebobeep&gt;</a></span><span class="message">janneke: Okay well stage0 has aarch64 support so what is it Mes and TCC that are armhf-only?</span></div><div class="line" id="093916"><span class="nick" style="color:#af8d2f"><a href="#093916" label="[09:39:16]">&lt;janneke&gt;</a></span><span class="message">littlebobeep: 64 bit in the initial bootstrap is not essential, i.e., &quot;just for fun&quot;</span></div><div class="line" id="093952"><span class="nick" style="color:#af8d2f"><a href="#093952" label="[09:39:52]">&lt;janneke&gt;</a></span><span class="message">so, minimal priority</span></div><div class="line" id="094607"><span class="nick" style="color:#6d2462"><a href="#094607" label="[09:46:07]">&lt;littlebobeep&gt;</a></span><span class="message">Why wouldn't the goal to have full path for every ISA?</span></div><div class="line" id="095235"><span class="nick" style="color:#d9d9d9"><a href="#095235" label="[09:52:35]">&lt;muurkha&gt;</a></span><span class="message">oh dear, pabs3 posted the impolitic version to <a rel="nofollow" href="https://news.ycombinator.com/item?id=31244753">https://news.ycombinator.com/item?id=31244753</a> </span></div><div class="line" id="095301"><span class="nick" style="color:#d9d9d9"><a href="#095301" label="[09:53:01]">&lt;muurkha&gt;</a></span><span class="message">with the predictable response that HN assholes saw someone being defensive and went on the attack :(</span></div><div class="line" id="095310"><span class="nick" style="color:#af8d2f"><a href="#095310" label="[09:53:10]">&lt;janneke&gt;</a></span><span class="message">littlebobeep: it's not about goals, it's about priorites</span></div><div class="line" id="095406"><span class="nick" style="color:#af8d2f"><a href="#095406" label="[09:54:06]">&lt;janneke&gt;</a></span><span class="message">for arm and x86, 64bit is unnecessary work</span></div><div class="line" id="095728"><span class="nick" style="color:#af8d2f"><a href="#095728" label="[09:57:28]">&lt;janneke&gt;</a></span><span class="message">the guix bootstrap performs a gcc cross build anyway, so we automagically go from 32bit to 65 there, if necessary</span></div><div class="line" id="095800"><span class="nick" style="color:#6c3d55"><a href="#095800" label="[09:58:00]">&lt;achaninja&gt;</a></span><span class="message">oriansj: theres another C compiler that now has inline assembly</span></div><div class="line" id="095808"><span class="nick" style="color:#6c3d55"><a href="#095808" label="[09:58:08]">&lt;achaninja&gt;</a></span><span class="message">the cosmopolitan libc fork of chibicc</span></div><div class="line" id="095838"><span class="nick" style="color:#6c3d55"><a href="#095838" label="[09:58:38]">&lt;achaninja&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/jart/cosmopolitan/tree/master/third_party/chibicc">https://github.com/jart/cosmopolitan/tree/master/third_party/chibicc</a> </span></div><div class="line" id="095845"><span class="nick" style="color:#6c3d55"><a href="#095845" label="[09:58:45]">&lt;achaninja&gt;</a></span><span class="message">however, cosmopolitan is its own can of worms lol</span></div><div class="line" id="095914"><span class="nick" style="color:#6d2462"><a href="#095914" label="[09:59:14]">&lt;littlebobeep&gt;</a></span><span class="message">janneke: You mean it cross builds from armhf to aarch64...?  Not from x86 to arm, right?</span></div><div class="line" id="095941"><span class="nick" style="color:#af8d2f"><a href="#095941" label="[09:59:41]">&lt;janneke&gt;</a></span><span class="message">littlebobeep: right, and it builds from x86 to x86_64</span></div><div class="line" id="100011"><span class="nick" style="color:#af8d2f"><a href="#100011" label="[10:00:11]">&lt;janneke&gt;</a></span><span class="message">note that the guix bootsrtap for arm does not reach that gcc-cross stage just yet</span></div><div class="line" id="100104"><span class="nick" style="color:#6c3d55"><a href="#100104" label="[10:01:04]">&lt;achaninja&gt;</a></span><span class="message">cosmopolitan libc might be perfect for bootstrapping though</span></div><div class="line" id="100108"><span class="nick" style="color:#6c3d55"><a href="#100108" label="[10:01:08]">&lt;achaninja&gt;</a></span><span class="message">it has a bare metal mode</span></div><div class="line" id="100517"><span class="nick" style="color:#6d2462"><a href="#100517" label="[10:05:17]">&lt;littlebobeep&gt;</a></span><span class="message">janneke: If this is true, what is the purpose of aarch64 and x86_64 bootstrap binaries like bash, mkdir, tar, xz, and guile and glibc ld?</span></div><div class="line" id="100544"><span class="nick" style="color:#6d2462"><a href="#100544" label="[10:05:44]">&lt;littlebobeep&gt;</a></span><span class="message">I see Mes is 32-bit only but other stuff has 64-bit versions</span></div><div class="line" id="100655"><span class="nick" style="color:#af8d2f"><a href="#100655" label="[10:06:55]">&lt;janneke&gt;</a></span><span class="message">littlebobeep: why not use native versions if they are available?</span></div><div class="line" id="100726"><span class="nick" style="color:#af8d2f"><a href="#100726" label="[10:07:26]">&lt;janneke&gt;</a></span><span class="message">or to put it differently, before we implemented the reduced binary seed bootstraps, each arch had its own binaries</span></div><div class="line" id="100737"><span class="nick" style="color:#af8d2f"><a href="#100737" label="[10:07:37]">&lt;janneke&gt;</a></span><span class="message">we didn't change that</span></div><div class="line" id="101336"><span class="nick" style="color:#d9d9d9"><a href="#101336" label="[10:13:36]">&lt;muurkha&gt;</a></span><span class="message">with respect to cosmopolitan, I would not touch anything Justine Tunney is responsible for with a ten-kilometer pole: <a rel="nofollow" href="https://en.wikipedia.org/wiki/Justine_Tunney#Political_writing">https://en.wikipedia.org/wiki/Justine_Tunney#Political_writing</a> </span></div><div class="line" id="101925"><span class="nick" style="color:#389600"><a href="#101925" label="[10:19:25]">&lt;littlebo1eep&gt;</a></span><span class="message">janneke: I am just confused because you just said it is minimal priority to have 64-bit native support but I see all these 64-bit binaries in boostrap.scm and also early on, maybe only TCC and Mes are missing?  I know the 64-bit bootstrap binaries have been around for years, but I am confused at what point things started being cross-built from 32 to 64 bit like you mentioned?</span></div><div class="line" id="103853"><span class="nick" style="color:#af8d2f"><a href="#103853" label="[10:38:53]">&lt;janneke&gt;</a></span><span class="message">littlebo1eep: the cross build has always been part of the guix bootstrap</span></div><div class="line" id="103931"><span class="nick" style="color:#af8d2f"><a href="#103931" label="[10:39:31]">&lt;janneke&gt;</a></span><span class="message">it's just sanity removing all traces of your bootstrap binaries, although none of the major gnu/linux distros bother to do so</span></div><div class="line" id="104101"><span class="nick" style="color:#af8d2f"><a href="#104101" label="[10:41:01]">&lt;janneke&gt;</a></span><span class="message">littlebo1eep: yeah, its 'only mes and tcc' (and possibly gcc-2.95 and an early binutils) right now</span></div><div class="line" id="104116"><span class="nick" style="color:#389600"><a href="#104116" label="[10:41:16]">&lt;littlebo1eep&gt;</a></span><span class="message">janneke: Why do you need to cross build if you literally have 64-bit binaries of gcc, binutils, guile, coreutils, etc.?  At what point does that switch to 32, then back to 64-bit again?</span></div><div class="line" id="104122"><span class="nick" style="color:#af8d2f"><a href="#104122" label="[10:41:22]">&lt;janneke&gt;</a></span><span class="message">note that &quot;only mes and tcc&quot; cost me 6 years to get working for x86</span></div><div class="line" id="104141"><span class="nick" style="color:#389600"><a href="#104141" label="[10:41:41]">&lt;littlebo1eep&gt;</a></span><span class="message">haha 6 years is a long time .....</span></div><div class="line" id="104200"><span class="nick" style="color:#af8d2f"><a href="#104200" label="[10:42:00]">&lt;janneke&gt;</a></span><span class="message">exactly, that's why i find your questions so weird</span></div><div class="line" id="104219"><span class="nick" style="color:#af8d2f"><a href="#104219" label="[10:42:19]">&lt;janneke&gt;</a></span><span class="message">&quot;why not do much more unnecessary work, why hasn't that been done?&quot;</span></div><div class="line" id="104256"><span class="nick" style="color:#af8d2f"><a href="#104256" label="[10:42:56]">&lt;janneke&gt;</a></span><span class="message">&quot;&lt;janneke&gt; it's just sanity removing all traces of your bootstrap binaries,</span></div><div class="line" id="104257"><span class="nick" style="color:#af8d2f"><a href="#104257" label="[10:42:57]">&lt;janneke&gt;</a></span><span class="message">          although none of the major gnu/linux distros bother to do so  [10:39]&quot;</span></div><div class="line" id="104309"><span class="nick" style="color:#389600"><a href="#104309" label="[10:43:09]">&lt;littlebo1eep&gt;</a></span><span class="message">I'm not asking why it hasn't been done as much as trying to figure out what is missing</span></div><div class="line" id="104327"><span class="nick" style="color:#af8d2f"><a href="#104327" label="[10:43:27]">&lt;janneke&gt;</a></span><span class="message">the cross build is from 64-&gt;64 in guix 1.0</span></div><div class="line" id="104406"><span class="nick" style="color:#389600"><a href="#104406" label="[10:44:06]">&lt;littlebo1eep&gt;</a></span><span class="message">Right I don't remember there used to be a 32-bit step</span></div><div class="line" id="104509"><span class="nick" style="color:#af8d2f"><a href="#104509" label="[10:45:09]">&lt;janneke&gt;</a></span><span class="message">there wasnt, int guix 1.0</span></div><div class="line" id="104744"><span class="nick" style="color:#af8d2f"><a href="#104744" label="[10:47:44]">&lt;janneke&gt;</a></span><span class="message">in guix 1.0, the cross build was 32-&gt;32, and 64-&gt;64</span></div><div class="line" id="104816"><span class="nick" style="color:#389600"><a href="#104816" label="[10:48:16]">&lt;littlebo1eep&gt;</a></span><span class="message">I think I started with Guix 0.8.2 and used bootstrap binaries x86_64....</span></div><div class="line" id="104825"><span class="nick" style="color:#6c3d55"><a href="#104825" label="[10:48:25]">&lt;achaninja&gt;</a></span><span class="message">janneke: are you able to build many other programs with mescc?</span></div><div class="line" id="104829"><span class="nick" style="color:#6c3d55"><a href="#104829" label="[10:48:29]">&lt;achaninja&gt;</a></span><span class="message">I guess most of the effort has been on tcc</span></div><div class="line" id="104900"><span class="nick" style="color:#af8d2f"><a href="#104900" label="[10:49:00]">&lt;janneke&gt;</a></span><span class="message">achaninja: i havent tried, really</span></div><div class="line" id="104957"><span class="nick" style="color:#af8d2f"><a href="#104957" label="[10:49:57]">&lt;janneke&gt;</a></span><span class="message">littlebo1eep: that's right</span></div><div class="line" id="105226"><span class="nick" style="color:#af8d2f"><a href="#105226" label="[10:52:26]">&lt;janneke&gt;</a></span><span class="message">in M2-Planet 1.10.0, #include is still a noop, right?</span></div><div class="line" id="112311"><span class="nick" style="color:#234e69"><a href="#112311" label="[11:23:11]">&lt;pabs3&gt;</a></span><span class="message">muurkha: that wasn't intended :(</span></div><div class="line" id="112838"><span class="nick" style="color:#d9d9d9"><a href="#112838" label="[11:28:38]">&lt;muurkha&gt;</a></span><span class="message">pabs3: yeah, I didn't think you intended it</span></div><div class="line" id="112855"><span class="nick" style="color:#d9d9d9"><a href="#112855" label="[11:28:55]">&lt;muurkha&gt;</a></span><span class="message">it's not your fault you aren't cynical enough about Character Assassination News</span></div><div class="line" id="115057"><span class="nick" style="color:#80b1d3"><a href="#115057" label="[11:50:57]">&lt;stikonas[m]&gt;</a></span><span class="message">janneke: includes will always  be noop in M2-Planet</span></div><div class="line" id="115111"><span class="nick" style="color:#80b1d3"><a href="#115111" label="[11:51:11]">&lt;stikonas[m]&gt;</a></span><span class="message">You might want to look at M2-Mesoplanet</span></div><div class="line" id="115125"><span class="nick" style="color:#80b1d3"><a href="#115125" label="[11:51:25]">&lt;stikonas[m]&gt;</a></span><span class="message">It's part of latest stage0-posix</span></div><div class="line" id="115140"><span class="nick" style="color:#80b1d3"><a href="#115140" label="[11:51:40]">&lt;stikonas[m]&gt;</a></span><span class="message">And it's C preprocessor with include support</span></div><div class="line" id="115148"><span class="nick" style="color:#af8d2f"><a href="#115148" label="[11:51:48]">&lt;janneke&gt;</a></span><span class="message">stikonas[m]: okay, just sent a patch to oriansj for #include_next</span></div><div class="line" id="115217"><span class="nick" style="color:#80b1d3"><a href="#115217" label="[11:52:17]">&lt;stikonas[m]&gt;</a></span><span class="message">It forks and calls M2-planet, blood_elf, M1 and hex2</span></div><div class="line" id="115224"><span class="nick" style="color:#af8d2f"><a href="#115224" label="[11:52:24]">&lt;janneke&gt;</a></span><span class="message">stikonas[m]: i'm first trying to catch-up with 1.10.0</span></div><div class="line" id="115355"><span class="nick" style="color:#af8d2f"><a href="#115355" label="[11:53:55]">&lt;janneke&gt;</a></span><span class="message">the post-1.8 features are pretty cool, only #ifdef'ing around &quot;unsigned long&quot; is some work</span></div><div class="line" id="115614"><span class="nick" style="color:#af8d2f"><a href="#115614" label="[11:56:14]">&lt;janneke&gt;</a></span><span class="message">but most lib/m2/ duplications and hacks can be easily removed</span></div><div class="line" id="115811"><span class="nick" style="color:#80b1d3"><a href="#115811" label="[11:58:11]">&lt;stikonas[m]&gt;</a></span><span class="message">We still are fairly limited in m2-planet but a bit less so than before</span></div><div class="line" id="115859"><span class="nick" style="color:#af8d2f"><a href="#115859" label="[11:58:59]">&lt;janneke&gt;</a></span><span class="message">yeah, well this is awesome</span></div><div class="line" id="120923"><span class="nick" style="color:#6c3d55"><a href="#120923" label="[12:09:23]">&lt;achaninja&gt;</a></span><span class="message">fossy: ah I missed the --chroot option to live-bootstrap</span></div><div class="line" id="130630"><span class="nick" style="color:#80b1d3"><a href="#130630" label="[13:06:30]">&lt;stikonas[m]&gt;</a></span><span class="message">janneke: so if I remember correctly, M2-Planet 1.10 supports simple constant #defines but M2-Mesoplanet can do function like macros , e.g. #define ADD(a,b) a+b</span></div><div class="line" id="130718"><span class="nick" style="color:#af8d2f"><a href="#130718" label="[13:07:18]">&lt;janneke&gt;</a></span><span class="message">stikonas[m]: ah, nice</span></div><div class="line" id="130809"><span class="nick" style="color:#af8d2f"><a href="#130809" label="[13:08:09]">&lt;janneke&gt;</a></span><span class="message">is Mesoplanet written in M2?</span></div><div class="line" id="131224"><span class="nick" style="color:#80b1d3"><a href="#131224" label="[13:12:24]">&lt;stikonas[m]&gt;</a></span><span class="message">janneke: yes, it's kind of fork of M2-Planet with compiler stripped out</span></div><div class="line" id="131304"><span class="nick" style="color:#80b1d3"><a href="#131304" label="[13:13:04]">&lt;stikonas[m]&gt;</a></span><span class="message">So we first build M2-planet, then kaem then M2-Mesoplanet</span></div><div class="line" id="131354"><span class="nick" style="color:#80b1d3"><a href="#131354" label="[13:13:54]">&lt;stikonas[m]&gt;</a></span><span class="message">But M2-Mesoplanet has no requirement to work on baremetal, so we are a bit more flexible</span></div><div class="line" id="131424"><span class="nick" style="color:#80b1d3"><a href="#131424" label="[13:14:24]">&lt;stikonas[m]&gt;</a></span><span class="message">And we don't have to keep to cc_* subset, we can use full M2</span></div><div class="line" id="131442"><span class="nick" style="color:#80b1d3"><a href="#131442" label="[13:14:42]">&lt;stikonas[m]&gt;</a></span><span class="message">which is not allowed in M2-Planet</span></div><div class="line" id="131527"><span class="nick" style="color:#80b1d3"><a href="#131527" label="[13:15:27]">&lt;stikonas[m]&gt;</a></span><span class="message">cc_* is less capable than even M2-Planet</span></div><div class="line" id="131700"><span class="nick" style="color:#80b1d3"><a href="#131700" label="[13:17:00]">&lt;stikonas[m]&gt;</a></span><span class="message">But because M2-Mesoplanet supports includes, you might need to add some ifdefs to mes if we want to use it to build mes</span></div><div class="line" id="131808"><span class="nick" style="color:#80b1d3"><a href="#131808" label="[13:18:08]">&lt;stikonas[m]&gt;</a></span><span class="message">Although I think oriansj added an option to disable #include functionality</span></div><div class="line" id="132853"><span class="nick" style="color:#6b8072"><a href="#132853" label="[13:28:53]">&lt;oriansj&gt;</a></span><span class="message">stikonas: yeah the option --no-includes will turn off following #includes for M2-Mesoplanet while still preserving all of the C macro expansion and spawning goodies</span></div><div class="line" id="133103"><span class="nick" style="color:#6b8072"><a href="#133103" label="[13:31:03]">&lt;oriansj&gt;</a></span><span class="message">muurkha: It is nice to see they realize when I said 24 hours, I did really mean non-stop for 24 hours. They are a bit wrong on the 100 characters per minute as cc_x86 involves a great deal of repetitive copy and paste bits (a very regular structure)</span></div><div class="line" id="133217"><span class="nick" style="color:#6b8072"><a href="#133217" label="[13:32:17]">&lt;oriansj&gt;</a></span><span class="message">yet it literally has a debug function at the buttom and they think that I did that &quot;without testing anything&quot;; now that is hilarious</span></div><div class="line" id="133432"><span class="nick" style="color:#d9d9d9"><a href="#133432" label="[13:34:32]">&lt;muurkha&gt;</a></span><span class="message">maybe they thought you didn't have time to test if you were typing 20 words per minute on average</span></div><div class="line" id="133838"><span class="nick" style="color:#6b8072"><a href="#133838" label="[13:38:38]">&lt;oriansj&gt;</a></span><span class="message">and the technical responses seem to be a FORTH C compiler that doesn't support structs, arrays,  function pointers, inline assembly or variables more than 1 char long and a Lisp program that doesn't actually solve the technical challenge at all.</span></div><div class="line" id="134034"><span class="nick" style="color:#6b8072"><a href="#134034" label="[13:40:34]">&lt;oriansj&gt;</a></span><span class="message">muurkha: emacs C-x ( and C-x ) are muscle memory for me these days and boy does it make it quick to layout correct code fast</span></div><div class="line" id="134313"><span class="nick" style="color:#6c3d55"><a href="#134313" label="[13:43:13]">&lt;achaninja&gt;</a></span><span class="message">random question, is mescc still being improved to handle more C code?</span></div><div class="line" id="134344"><span class="nick" style="color:#6c3d55"><a href="#134344" label="[13:43:44]">&lt;achaninja&gt;</a></span><span class="message">or is it considered enough that it can build tcc</span></div><div class="line" id="134755"><span class="nick" style="color:#6c3d55"><a href="#134755" label="[13:47:55]">&lt;achaninja&gt;</a></span><span class="message">that is to say, does mes aim to be a 'complete' C compiler, or complete enough.</span></div><div class="line" id="134758"><span class="nick" style="color:#6b8072"><a href="#134758" label="[13:47:58]">&lt;oriansj&gt;</a></span><span class="message">achaninja: well mescc is being improved (in fact it is currently the most advanced C compiler written in scheme right now) and has the very unique distinction of having the simplest/smallest requirements of any C compiler written in Lisp.</span></div><div class="line" id="134824"><span class="nick" style="color:#6c3d55"><a href="#134824" label="[13:48:24]">&lt;achaninja&gt;</a></span><span class="message">I didn't know there were others :P</span></div><div class="line" id="134840"><span class="nick" style="color:#6c3d55"><a href="#134840" label="[13:48:40]">&lt;achaninja&gt;</a></span><span class="message">I think building tcc makes it quite sophisticated</span></div><div class="line" id="134938"><span class="nick" style="color:#6b8072"><a href="#134938" label="[13:49:38]">&lt;oriansj&gt;</a></span><span class="message">there is an ancient Common Lisp C compiler but The subset of Common Lisp you would need to support would actually end up being bigger and more complicated than TCC itself</span></div><div class="line" id="135013"><span class="nick" style="color:#6c3d55"><a href="#135013" label="[13:50:13]">&lt;achaninja&gt;</a></span><span class="message">perhaps I can try building chibicc using mescc</span></div><div class="line" id="135020"><span class="nick" style="color:#6c3d55"><a href="#135020" label="[13:50:20]">&lt;achaninja&gt;</a></span><span class="message">if it hasn't been tried</span></div><div class="line" id="135041"><span class="nick" style="color:#6c3d55"><a href="#135041" label="[13:50:41]">&lt;achaninja&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/rui314/chibicc">https://github.com/rui314/chibicc</a> </span></div><div class="line" id="135118"><span class="nick" style="color:#6c3d55"><a href="#135118" label="[13:51:18]">&lt;achaninja&gt;</a></span><span class="message">(it lacks an assembler/linker)</span></div><div class="line" id="135135"><span class="nick" style="color:#6c3d55"><a href="#135135" label="[13:51:35]">&lt;achaninja&gt;</a></span><span class="message">I guess the only benefit of these other C compilers is just speed</span></div><div class="line" id="135147"><span class="nick" style="color:#d9d9d9"><a href="#135147" label="[13:51:47]">&lt;muurkha&gt;</a></span><span class="message">oriansj: if you want to indent or dedent code, C-x i now lets you move the block back and forth with the arrow keys</span></div><div class="line" id="135433"><span class="nick" style="color:#6c3d55"><a href="#135433" label="[13:54:33]">&lt;achaninja&gt;</a></span><span class="message">I mean to say, if mescc could build just as much C code as tcc - theres no need for tcc in the bootstrap</span></div><div class="line" id="135906"><span class="nick" style="color:#6c3d55"><a href="#135906" label="[13:59:06]">&lt;achaninja&gt;</a></span><span class="message">Another thing I thought a tiny bit about was if compiling an emulator is a valid way to bootstrap other arches</span></div><div class="line" id="135927"><span class="nick" style="color:#d9d9d9"><a href="#135927" label="[13:59:27]">&lt;muurkha&gt;</a></span><span class="message">a cross-compiler is good enough if your CPU isn't backdoored</span></div><div class="line" id="135931"><span class="nick" style="color:#d9d9d9"><a href="#135931" label="[13:59:31]">&lt;muurkha&gt;</a></span><span class="message">IMHO</span></div><div class="line" id="140015"><span class="nick" style="color:#6c3d55"><a href="#140015" label="[14:00:15]">&lt;achaninja&gt;</a></span><span class="message">true, i guess you need a cross compiler regardless</span></div><div class="line" id="140101"><span class="nick" style="color:#6c3d55"><a href="#140101" label="[14:01:01]">&lt;achaninja&gt;</a></span><span class="message">actually i guess not, you can do multiple seeds like is being done</span></div><div class="line" id="140640"><span class="nick" style="color:#80b1d3"><a href="#140640" label="[14:06:40]">&lt;stikonas[m]&gt;</a></span><span class="message">achaninja: tcc though is much faster</span></div><div class="line" id="140727"><span class="nick" style="color:#80b1d3"><a href="#140727" label="[14:07:27]">&lt;stikonas[m]&gt;</a></span><span class="message">Building tcc with mescc takes 10 min and fractions of a second to rebuild with tcc</span></div><div class="line" id="140748"><span class="nick" style="color:#80b1d3"><a href="#140748" label="[14:07:48]">&lt;stikonas[m]&gt;</a></span><span class="message">Though getting rid of old tcc 0.9.26 would be nice</span></div><div class="line" id="140756"><span class="nick" style="color:#80b1d3"><a href="#140756" label="[14:07:56]">&lt;stikonas[m]&gt;</a></span><span class="message">If we can build tcc 0.9.27</span></div><div class="line" id="140847"><span class="nick" style="color:#80b1d3"><a href="#140847" label="[14:08:47]">&lt;stikonas[m]&gt;</a></span><span class="message">And emulator is fine in principle even if overkill in some cases</span></div><div class="line" id="140904"><span class="nick" style="color:#af8d2f"><a href="#140904" label="[14:09:04]">&lt;janneke&gt;</a></span><span class="message">yes, gitting rid of 0.9.26 would be nice</span></div><div class="line" id="142144"><span class="nick" style="color:#6c3d55"><a href="#142144" label="[14:21:44]">&lt;achaninja&gt;</a></span><span class="message">yeah its trading time for complexity i guess</span></div><div class="line" id="142213"><span class="nick" style="color:#6c3d55"><a href="#142213" label="[14:22:13]">&lt;achaninja&gt;</a></span><span class="message">the tcc code is sort of like an exercise in obfuscation - but it works</span></div><div class="line" id="142226"><span class="nick" style="color:#6c3d55"><a href="#142226" label="[14:22:26]">&lt;achaninja&gt;</a></span><span class="message">it did start life as otcc</span></div><div class="line" id="142320"><span class="nick" style="color:#6c3d55"><a href="#142320" label="[14:23:20]">&lt;achaninja&gt;</a></span><span class="message">(mostly joking)</span></div><div class="line" id="142716"><span class="nick" style="color:#6c3d55"><a href="#142716" label="[14:27:16]">&lt;achaninja&gt;</a></span><span class="message">and by complexity i just meant trading two compilers for one compiler</span></div><div class="line" id="144953"><span class="nick" style="color:#8dd3c7"><a href="#144953" label="[14:49:53]">&lt;pflanze&gt;</a></span><span class="message">Is actually anything I wrote in <a rel="nofollow" href="https://news.ycombinator.com/item?id=31247576">https://news.ycombinator.com/item?id=31247576</a>  correct?</span></div><div class="line" id="145034"><span class="nick" style="color:#8dd3c7"><a href="#145034" label="[14:50:34]">&lt;pflanze&gt;</a></span><span class="message">Also, hi, first time I'm here.</span></div><div class="line" id="145130"><span class="nick" style="color:#af8d2f"><a href="#145130" label="[14:51:30]">&lt;janneke&gt;</a></span><span class="message">pflanze: welcome!</span></div><div class="line" id="145342"><span class="nick" style="color:#af8d2f"><a href="#145342" label="[14:53:42]">&lt;janneke&gt;</a></span><span class="message">pflanze: ah no, there is no competition, at least not yet ;)</span></div><div class="line" id="145520"><span class="nick" style="color:#af8d2f"><a href="#145520" label="[14:55:20]">&lt;janneke&gt;</a></span><span class="message">pflanze: stage0, of with cc_x86.c is now part, as a project started off from the bottom (hex0) and is working up</span></div><div class="line" id="145619"><span class="nick" style="color:#af8d2f"><a href="#145619" label="[14:56:19]">&lt;janneke&gt;</a></span><span class="message">when stage0 just started, i created mes soon to be folowed by mescc, which aimed to build a version of tinycc and the remaining bootstrap for guix</span></div><div class="line" id="145732"><span class="nick" style="color:#af8d2f"><a href="#145732" label="[14:57:32]">&lt;janneke&gt;</a></span><span class="message">the first versions of mescc had their own linker, which were later replaced by mescc-tools of stage0</span></div><div class="line" id="145846"><span class="nick" style="color:#8dd3c7"><a href="#145846" label="[14:58:46]">&lt;pflanze&gt;</a></span><span class="message">&quot;I created mes soon to be followed by mescc&quot;, do you refer with mes here to the Scheme interpreter?</span></div><div class="line" id="145915"><span class="nick" style="color:#8dd3c7"><a href="#145915" label="[14:59:15]">&lt;pflanze&gt;</a></span><span class="message">Or, is mescc also an independent project with the same name as the mescc inside the mes repository?</span></div><div class="line" id="145916"><span class="nick" style="color:#80b1d3"><a href="#145916" label="[14:59:16]">&lt;stikonas[m]&gt;</a></span><span class="message">pflanze: basically we bootstrap from hex stuff to macro assembly, then cc_x86 then M2-Planet (simple c compiler in c) then mes and mescc</span></div><div class="line" id="145938"><span class="nick" style="color:#80b1d3"><a href="#145938" label="[14:59:38]">&lt;stikonas[m]&gt;</a></span><span class="message">So both are part of bootstrap chain right now</span></div><div class="line" id="150036"><span class="nick" style="color:#8dd3c7"><a href="#150036" label="[15:00:36]">&lt;pflanze&gt;</a></span><span class="message">cc_x86.s? Or is there a cc_x86.c, too (janneke mentions the latter)?</span></div><div class="line" id="150045"><span class="nick" style="color:#6c3d55"><a href="#150045" label="[15:00:45]">&lt;achaninja&gt;</a></span><span class="message">janneke: I am not really a scheme expert, is the nyacc parser not in the mes repository?</span></div><div class="line" id="150134"><span class="nick" style="color:#80b1d3"><a href="#150134" label="[15:01:34]">&lt;stikonas[m]&gt;</a></span><span class="message">pflanze: there is a prototype in C cc_x86.c which was later expanded into M2-Planet</span></div><div class="line" id="150204"><span class="nick" style="color:#80b1d3"><a href="#150204" label="[15:02:04]">&lt;stikonas[m]&gt;</a></span><span class="message">But main version of cc_x86 is in assembly</span></div><div class="line" id="150229"><span class="nick" style="color:#80b1d3"><a href="#150229" label="[15:02:29]">&lt;stikonas[m]&gt;</a></span><span class="message">Actually not .s but .M1 but same idea</span></div><div class="line" id="150253"><span class="nick" style="color:#80b1d3"><a href="#150253" label="[15:02:53]">&lt;stikonas[m]&gt;</a></span><span class="message">Just different assembly syntax that is easier to parse</span></div><div class="line" id="150435"><span class="nick" style="color:#80b1d3"><a href="#150435" label="[15:04:35]">&lt;stikonas[m]&gt;</a></span><span class="message">achaninja: nyacc is not in mes repository</span></div><div class="line" id="150437"><span class="nick" style="color:#8dd3c7"><a href="#150437" label="[15:04:37]">&lt;pflanze&gt;</a></span><span class="message">This one, right? <a rel="nofollow" href="https://github.com/oriansj/stage0/blob/master/stage2/cc_x86.s">https://github.com/oriansj/stage0/blob/master/stage2/cc_x86.s</a>   I did notice the uppercase notation and otherwise unusual looks, but I'm not really familiar with x86 asm.</span></div><div class="line" id="150504"><span class="nick" style="color:#80b1d3"><a href="#150504" label="[15:05:04]">&lt;stikonas[m]&gt;</a></span><span class="message">You need to download it separately and set up env variables to point to it</span></div><div class="line" id="150510"><span class="nick" style="color:#6c3d55"><a href="#150510" label="[15:05:10]">&lt;achaninja&gt;</a></span><span class="message">I see, I didn't realise the C parser was in that project</span></div><div class="line" id="150538"><span class="nick" style="color:#80b1d3"><a href="#150538" label="[15:05:38]">&lt;stikonas[m]&gt;</a></span><span class="message">pflanze: yes, that's for baremetal bootstrap, we have a version for POSIX bootstrap</span></div><div class="line" id="150612"><span class="nick" style="color:#80b1d3"><a href="#150612" label="[15:06:12]">&lt;stikonas[m]&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/stage0-posix-x86/blob/master/cc_x86.M1">https://github.com/oriansj/stage0-posix-x86/blob/master/cc_x86.M1</a> </span></div><div class="line" id="150644"><span class="nick" style="color:#8dd3c7"><a href="#150644" label="[15:06:44]">&lt;pflanze&gt;</a></span><span class="message">Ah</span></div><div class="line" id="150658"><span class="nick" style="color:#80b1d3"><a href="#150658" label="[15:06:58]">&lt;stikonas[m]&gt;</a></span><span class="message">Or e.g. we have cc_riscv64 here <a rel="nofollow" href="https://github.com/oriansj/stage0-posix-riscv64/blob/master/cc_riscv64.M1">https://github.com/oriansj/stage0-posix-riscv64/blob/master/cc_riscv64.M1</a> </span></div><div class="line" id="150744"><span class="nick" style="color:#80b1d3"><a href="#150744" label="[15:07:44]">&lt;stikonas[m]&gt;</a></span><span class="message">There is cc_* for x86, amd64, riscv32, riscv64, aarch64</span></div><div class="line" id="150801"><span class="nick" style="color:#8dd3c7"><a href="#150801" label="[15:08:01]">&lt;pflanze&gt;</a></span><span class="message">I see</span></div><div class="line" id="150810"><span class="nick" style="color:#80b1d3"><a href="#150810" label="[15:08:10]">&lt;stikonas[m]&gt;</a></span><span class="message">All share same algorithm</span></div><div class="line" id="150842"><span class="nick" style="color:#80b1d3"><a href="#150842" label="[15:08:42]">&lt;stikonas[m]&gt;</a></span><span class="message">M2-planet also has very similar algorithm but in C and extended with extra features</span></div><div class="line" id="150907"><span class="nick" style="color:#8dd3c7"><a href="#150907" label="[15:09:07]">&lt;pflanze&gt;</a></span><span class="message">Wouldn't it make sense to have the variants (both .M1 and .s, as well as architectures) in the same repo?</span></div><div class="line" id="150947"><span class="nick" style="color:#80b1d3"><a href="#150947" label="[15:09:47]">&lt;stikonas[m]&gt;</a></span><span class="message">stage0 is baremetal bootstrap and stage0-posix is for running things on Linux kernel</span></div><div class="line" id="150953"><span class="nick" style="color:#80b1d3"><a href="#150953" label="[15:09:53]">&lt;stikonas[m]&gt;</a></span><span class="message">Hence 2 repos</span></div><div class="line" id="151040"><span class="nick" style="color:#80b1d3"><a href="#151040" label="[15:10:40]">&lt;stikonas[m]&gt;</a></span><span class="message">stage0 is not easily automatable and might need adjustments to your hardware</span></div><div class="line" id="151108"><span class="nick" style="color:#80b1d3"><a href="#151108" label="[15:11:08]">&lt;stikonas[m]&gt;</a></span><span class="message">stage0-posix is automated bootstrap chain</span></div><div class="line" id="151129"><span class="nick" style="color:#80b1d3"><a href="#151129" label="[15:11:29]">&lt;stikonas[m]&gt;</a></span><span class="message">There is a trivial shell kaem  (757 bytes) to kickoff bootstrap</span></div><div class="line" id="151338"><span class="nick" style="color:#8dd3c7"><a href="#151338" label="[15:13:38]">&lt;pflanze&gt;</a></span><span class="message">I should try this out, does that work on Qemu? I guess there's a page that instructs me how to go about it, and I should just read through the <a rel="nofollow" href="https://bootstrappable.org/">https://bootstrappable.org/</a>  first?</span></div><div class="line" id="151436"><span class="nick" style="color:#8dd3c7"><a href="#151436" label="[15:14:36]">&lt;pflanze&gt;</a></span><span class="message">I'll have to leave in a bit for a couple hours but will be back later.</span></div><div class="line" id="151815"><span class="nick" style="color:#80b1d3"><a href="#151815" label="[15:18:15]">&lt;stikonas[m]&gt;</a></span><span class="message">live-bootsrap can run in either qemu or chroot</span></div><div class="line" id="151834"><span class="nick" style="color:#6c3d55"><a href="#151834" label="[15:18:34]">&lt;achaninja&gt;</a></span><span class="message">I fwiw i just finished a live-bootstrap in a chroot</span></div><div class="line" id="151838"><span class="nick" style="color:#80b1d3"><a href="#151838" label="[15:18:38]">&lt;stikonas[m]&gt;</a></span><span class="message">There is an optional rootfs.py script to help you launch things</span></div><div class="line" id="151854"><span class="nick" style="color:#80b1d3"><a href="#151854" label="[15:18:54]">&lt;stikonas[m]&gt;</a></span><span class="message">Qemu mode needs you to supply 32 bit kernel</span></div><div class="line" id="151934"><span class="nick" style="color:#80b1d3"><a href="#151934" label="[15:19:34]">&lt;stikonas[m]&gt;</a></span><span class="message">Should also work directly on hardware without qemu but I haven't tried yet</span></div><div class="line" id="152049"><span class="nick" style="color:#80b1d3"><a href="#152049" label="[15:20:49]">&lt;stikonas[m]&gt;</a></span><span class="message">pflanze: see <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst">https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst</a> </span></div><div class="line" id="152537"><span class="nick" style="color:#8dd3c7"><a href="#152537" label="[15:25:37]">&lt;pflanze&gt;</a></span><span class="message">I'll have a go trying out some bootstrap paths and get a proper understanding, maybe writing up what insights I have. (May take a few days, but I'll start tonight.)</span></div><div class="line" id="152946"><span class="nick" style="color:#80b1d3"><a href="#152946" label="[15:29:46]">&lt;stikonas[m]&gt;</a></span><span class="message">Also a bit outdated and incomplete but we have a graph here</span></div><div class="line" id="152949"><span class="nick" style="color:#80b1d3"><a href="#152949" label="[15:29:49]">&lt;stikonas[m]&gt;</a></span><span class="message"> <a rel="nofollow" href="https://stikonas.eu/files/bootstrap/live-bootstrap.svg">https://stikonas.eu/files/bootstrap/live-bootstrap.svg</a> </span></div><div class="line" id="153243"><span class="nick" style="color:#80b1d3"><a href="#153243" label="[15:32:43]">&lt;stikonas[m]&gt;</a></span><span class="message">(Some stuff was reordered, etc). Some of the arrows later in the process are missing. And everything after bash 5.1 is not in graph</span></div><div class="line" id="153528"><span class="nick" style="color:#8dd3c7"><a href="#153528" label="[15:35:28]">&lt;pflanze&gt;</a></span><span class="message">Cool. If that info can be extracted automatically (scripts, dependencies), maybe I can contribute code to do that. But I'll first have acquaint myself with it.</span></div><div class="line" id="153614"><span class="nick" style="color:#8dd3c7"><a href="#153614" label="[15:36:14]">&lt;pflanze&gt;</a></span><span class="message">(On second thought, there are so many arrows, at least partially it already must be automatic.)</span></div><div class="line" id="153733"><span class="nick" style="color:#2e2a4a"><a href="#153733" label="[15:37:33]">*</a></span><span class="message">pflanze off for a few hours</span></div><div class="line" id="153753"><span class="nick" style="color:#80b1d3"><a href="#153753" label="[15:37:53]">&lt;stikonas[m]&gt;</a></span><span class="message">No, it was manually written (there is .dot file somewhere)</span></div><div class="line" id="153908"><span class="nick" style="color:#80b1d3"><a href="#153908" label="[15:39:08]">&lt;stikonas[m]&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/talk-notes/blob/master/live-bootstrap.dot">https://github.com/oriansj/talk-notes/blob/master/live-bootstrap.dot</a> </span></div><div class="line" id="153933"><span class="nick" style="color:#80b1d3"><a href="#153933" label="[15:39:33]">&lt;stikonas[m]&gt;</a></span><span class="message">Basically by following build scripts and looking at dependencies</span></div><div class="line" id="153957"><span class="nick" style="color:#80b1d3"><a href="#153957" label="[15:39:57]">&lt;stikonas[m]&gt;</a></span><span class="message">Though that becomes harder/impossible once you start using autotools</span></div><div class="line" id="181142"><span class="nick" style="color:#af8d2f"><a href="#181142" label="[18:11:42]">&lt;janneke&gt;</a></span><span class="message">hmm, m2-planet chockes on: #if __M2__ || !(__MESC__ &amp;&amp; __arm__)</span></div><div class="line" id="182747"><span class="nick" style="color:#80b1d3"><a href="#182747" label="[18:27:47]">&lt;stikonas[m]&gt;</a></span><span class="message">What's the error?</span></div><div class="line" id="183019"><span class="nick" style="color:#d9d9d9"><a href="#183019" label="[18:30:19]">&lt;muurkha&gt;</a></span><span class="message">another bootstrapping-related article on the orange website, this one about Hare: <a rel="nofollow" href="https://news.ycombinator.com/item?id=31247387">https://news.ycombinator.com/item?id=31247387</a> </span></div><div class="line" id="183308"><span class="nick" style="color:#af8d2f"><a href="#183308" label="[18:33:08]">&lt;janneke&gt;</a></span><span class="message">lib/mes/ntoab.c:32:newline expected at end of macro directive</span></div><div class="line" id="183309"><span class="nick" style="color:#af8d2f"><a href="#183309" label="[18:33:09]">&lt;janneke&gt;</a></span><span class="message">found: ')'</span></div><div class="line" id="183351"><span class="nick" style="color:#af8d2f"><a href="#183351" label="[18:33:51]">&lt;janneke&gt;</a></span><span class="message">and hmm, m2-planet does not define __linux__</span></div><div class="line" id="183437"><span class="nick" style="color:#d9d9d9"><a href="#183437" label="[18:34:37]">&lt;muurkha&gt;</a></span><span class="message"> <a rel="nofollow" href="https://harelang.org/tutorials/introduction/">https://harelang.org/tutorials/introduction/</a>  makes it sound like Golang without maps, the GC, the goroutines, or the interfaces, just slices and defer</span></div><div class="line" id="183927"><span class="nick" style="color:#2e2a4a"><a href="#183927" label="[18:39:27]">*</a></span><span class="message">janneke will send a patch for __linux__</span></div><div class="line" id="185347"><span class="nick" style="color:#af8d2f"><a href="#185347" label="[18:53:47]">&lt;janneke&gt;</a></span><span class="message">hmm, m2-planet does not have &quot;short&quot;</span></div><div class="line" id="190955"><span class="nick" style="color:#6b8072"><a href="#190955" label="[19:09:55]">&lt;oriansj&gt;</a></span><span class="message">pflanze: not competing but working together to build a shared dream.</span></div><div class="line" id="191107"><span class="nick" style="color:#6b8072"><a href="#191107" label="[19:11:07]">&lt;oriansj&gt;</a></span><span class="message">Also to do mes-m2 in assembly would be a 3 month project for me but entirely possible to do (It took a bit to get mes.c into a state where gcc could directly compile it with having to do snarfing first)</span></div><div class="line" id="191144"><span class="nick" style="color:#6b8072"><a href="#191144" label="[19:11:44]">&lt;oriansj&gt;</a></span><span class="message">janneke: why would it define __linux__ ? it has no idea what environment it is running on</span></div><div class="line" id="191226"><span class="nick" style="color:#6b8072"><a href="#191226" label="[19:12:26]">&lt;oriansj&gt;</a></span><span class="message">hence why M2-Planet support -D __linux__ if you need it defined</span></div><div class="line" id="191338"><span class="nick" style="color:#6b8072"><a href="#191338" label="[19:13:38]">&lt;oriansj&gt;</a></span><span class="message">janneke: yeah, I haven't found a need for short yet but can be added with a bit of work.</span></div><div class="line" id="191743"><span class="nick" style="color:#af8d2f"><a href="#191743" label="[19:17:43]">&lt;janneke&gt;</a></span><span class="message">oriansj: just like gcc defines __linux__</span></div><div class="line" id="191752"><span class="nick" style="color:#2e2a4a"><a href="#191752" label="[19:17:52]">*</a></span><span class="message">janneke sent a patch, btw</span></div><div class="line" id="191910"><span class="nick" style="color:#af8d2f"><a href="#191910" label="[19:19:10]">&lt;janneke&gt;</a></span><span class="message">hmm, possibly that patch is naive</span></div><div class="line" id="191918"><span class="nick" style="color:#af8d2f"><a href="#191918" label="[19:19:18]">&lt;janneke&gt;</a></span><span class="message">m2-planet knows perfectly well which platform it's running on...</span></div><div class="line" id="191937"><span class="nick" style="color:#af8d2f"><a href="#191937" label="[19:19:37]">&lt;janneke&gt;</a></span><span class="message">...but it does not know if it's cross-compiling, of course...</span></div><div class="line" id="192009"><span class="nick" style="color:#af8d2f"><a href="#192009" label="[19:20:09]">&lt;janneke&gt;</a></span><span class="message">i'll add the -D &lt;platform&gt; to kaem.run</span></div><div class="line" id="192226"><span class="nick" style="color:#6b8072"><a href="#192226" label="[19:22:26]">&lt;oriansj&gt;</a></span><span class="message">janneke: how can it know what platform it is running on?</span></div><div class="line" id="192242"><span class="nick" style="color:#6b8072"><a href="#192242" label="[19:22:42]">&lt;oriansj&gt;</a></span><span class="message">it just defaults to knight assembly by default</span></div><div class="line" id="192358"><span class="nick" style="color:#af8d2f"><a href="#192358" label="[19:23:58]">&lt;janneke&gt;</a></span><span class="message">right; it only knows when it's being built by gcc</span></div><div class="line" id="192416"><span class="nick" style="color:#6b8072"><a href="#192416" label="[19:24:16]">&lt;oriansj&gt;</a></span><span class="message">it is int main(int argc, char** argv); there is no envp to pull from to know about the world outside of what it is told</span></div><div class="line" id="192458"><span class="nick" style="color:#af8d2f"><a href="#192458" label="[19:24:58]">&lt;janneke&gt;</a></span><span class="message">i have no pressing need for short, i think</span></div><div class="line" id="192537"><span class="nick" style="color:#af8d2f"><a href="#192537" label="[19:25:37]">&lt;janneke&gt;</a></span><span class="message">stat gets possibly problematic without short, but using 'char foo; char foo_filler_;' now</span></div><div class="line" id="192554"><span class="nick" style="color:#af8d2f"><a href="#192554" label="[19:25:54]">&lt;janneke&gt;</a></span><span class="message">btw, m2-planet has become very impressive</span></div><div class="line" id="192558"><span class="nick" style="color:#6b8072"><a href="#192558" label="[19:25:58]">&lt;oriansj&gt;</a></span><span class="message">or just char[2] label; will work as well</span></div><div class="line" id="192615"><span class="nick" style="color:#6b8072"><a href="#192615" label="[19:26:15]">&lt;oriansj&gt;</a></span><span class="message">as that is supported in structs</span></div><div class="line" id="192623"><span class="nick" style="color:#af8d2f"><a href="#192623" label="[19:26:23]">&lt;janneke&gt;</a></span><span class="message">ah, nice</span></div><div class="line" id="192706"><span class="nick" style="color:#af8d2f"><a href="#192706" label="[19:27:06]">&lt;janneke&gt;</a></span><span class="message">i'm able to remove the vast majority of the workarounds that made for 0.24</span></div><div class="line" id="192757"><span class="nick" style="color:#6b8072"><a href="#192757" label="[19:27:57]">&lt;oriansj&gt;</a></span><span class="message">and you can do #if __M2__ .. #elif __MESC__ ... #else ...</span></div><div class="line" id="192759"><span class="nick" style="color:#80b1d3"><a href="#192759" label="[19:27:59]">&lt;stikonas[m]&gt;</a></span><span class="message">janneke: yes, that was the goal of my m2-planet work for 1.10.0</span></div><div class="line" id="192827"><span class="nick" style="color:#af8d2f"><a href="#192827" label="[19:28:27]">&lt;janneke&gt;</a></span><span class="message">yes, i'm using that a lot</span></div><div class="line" id="192907"><span class="nick" style="color:#8dd3c7"><a href="#192907" label="[19:29:07]">&lt;stikonas&gt;</a></span><span class="message">I was deliberately trying to implement some of the stuff that would reduce the diff between between mes 0.23 and what is now 0.24</span></div><div class="line" id="192907"><span class="nick" style="color:#6b8072"><a href="#192907" label="[19:29:07]">&lt;oriansj&gt;</a></span><span class="message">and ideally get M2libc to the state you can just use it when bootstrapping and just standard glibc libraries in standard usage</span></div><div class="line" id="192926"><span class="nick" style="color:#af8d2f"><a href="#192926" label="[19:29:26]">&lt;janneke&gt;</a></span><span class="message">yeah, that's what the mes c library also does</span></div><div class="line" id="192930"><span class="nick" style="color:#6b8072"><a href="#192930" label="[19:29:30]">&lt;oriansj&gt;</a></span><span class="message">to reduce your total support work and help you with porting to new architectures</span></div><div class="line" id="193024"><span class="nick" style="color:#8dd3c7"><a href="#193024" label="[19:30:24]">&lt;stikonas&gt;</a></span><span class="message">one thing that I still don't particularly like about M2libc is that every low level function have to be rewritten in inline asm, so a lot of copy pasting rather than having syscall_NUMBER() helpers...</span></div><div class="line" id="193026"><span class="nick" style="color:#6b8072"><a href="#193026" label="[19:30:26]">&lt;oriansj&gt;</a></span><span class="message">(I might need to convert M2-Planet+M2libc to use MesCC's M1 DEFINEs first)</span></div><div class="line" id="193112"><span class="nick" style="color:#8dd3c7"><a href="#193112" label="[19:31:12]">&lt;stikonas&gt;</a></span><span class="message">so there is a lot of inline M1 code...</span></div><div class="line" id="193201"><span class="nick" style="color:#6b8072"><a href="#193201" label="[19:32:01]">&lt;oriansj&gt;</a></span><span class="message">stikonas: completely fair, I did that to make debugging syscall behavior easier</span></div><div class="line" id="193242"><span class="nick" style="color:#8dd3c7"><a href="#193242" label="[19:32:42]">&lt;stikonas&gt;</a></span><span class="message">well, yeah, you don't need backtrace in this case</span></div><div class="line" id="193533"><span class="nick" style="color:#af8d2f"><a href="#193533" label="[19:35:33]">&lt;janneke&gt;</a></span><span class="message">hehe, this is fun:</span></div><div class="line" id="193538"><span class="nick" style="color:#af8d2f"><a href="#193538" label="[19:35:38]">&lt;janneke&gt;</a></span><span class="message">#if __M2__</span></div><div class="line" id="193539"><span class="nick" style="color:#af8d2f"><a href="#193539" label="[19:35:39]">&lt;janneke&gt;</a></span><span class="message">...</span></div><div class="line" id="193542"><span class="nick" style="color:#af8d2f"><a href="#193542" label="[19:35:42]">&lt;janneke&gt;</a></span><span class="message">#lse</span></div><div class="line" id="193556"><span class="nick" style="color:#af8d2f"><a href="#193556" label="[19:35:56]">&lt;janneke&gt;</a></span><span class="message">#define &lt;something that breaks M2&gt;</span></div><div class="line" id="193605"><span class="nick" style="color:#af8d2f"><a href="#193605" label="[19:36:05]">&lt;janneke&gt;</a></span><span class="message">#endif</span></div><div class="line" id="193620"><span class="nick" style="color:#2e2a4a"><a href="#193620" label="[19:36:20]">*</a></span><span class="message">janneke is not complaining!</span></div><div class="line" id="193835"><span class="nick" style="color:#af8d2f"><a href="#193835" label="[19:38:35]">&lt;janneke&gt;</a></span><span class="message">okay, mes builds without --bootstrap-mode</span></div><div class="line" id="193844"><span class="nick" style="color:#af8d2f"><a href="#193844" label="[19:38:44]">&lt;janneke&gt;</a></span><span class="message">Running mes-m2</span></div><div class="line" id="193844"><span class="nick" style="color:#af8d2f"><a href="#193844" label="[19:38:44]">&lt;janneke&gt;</a></span><span class="message"> +&gt; ./bin/mes-m2 -c (display 'Hello,M2-mes!) (newline)</span></div><div class="line" id="193844"><span class="nick" style="color:#af8d2f"><a href="#193844" label="[19:38:44]">&lt;janneke&gt;</a></span><span class="message">./bin/mes-m2 abnormal termination, signal number = 11</span></div><div class="line" id="193844"><span class="nick" style="color:#8dd3c7"><a href="#193844" label="[19:38:44]">&lt;stikonas&gt;</a></span><span class="message">tokenizer got broken?</span></div><div class="line" id="193844"><span class="nick" style="color:#2e2a4a"><a href="#193844" label="[19:38:44]">*</a></span><span class="message">janneke is afk for some dinner</span></div><div class="line" id="193933"><span class="nick" style="color:#6b8072"><a href="#193933" label="[19:39:33]">&lt;oriansj&gt;</a></span><span class="message">still need to figure out how to fuzz mes.c</span></div><div class="line" id="193955"><span class="nick" style="color:#6b8072"><a href="#193955" label="[19:39:55]">&lt;oriansj&gt;</a></span><span class="message">and clear out all of the segfaults that lurk inside</span></div><div class="line" id="194348"><span class="nick" style="color:#8dd3c7"><a href="#194348" label="[19:43:48]">&lt;stikonas&gt;</a></span><span class="message">janneke: nice! Also what do you think about multiple kaem files for indiviaual arches (not just x86)? Something along the lines of <a rel="nofollow" href="https://github.com/oriansj/mes-m2/blob/master/kaem.run">https://github.com/oriansj/mes-m2/blob/master/kaem.run</a>  and <a rel="nofollow" href="https://github.com/oriansj/mes-m2/blob/master/kaem.x86">https://github.com/oriansj/mes-m2/blob/master/kaem.x86</a> </span></div><div class="line" id="194810"><span class="nick" style="color:#8dd3c7"><a href="#194810" label="[19:48:10]">&lt;stikonas&gt;</a></span><span class="message">(this and some riscv64 support are probably the only interesting things from mes-m2 that are not in mes)</span></div><div class="line" id="194959"><span class="nick" style="color:#8dd3c7"><a href="#194959" label="[19:49:59]">&lt;stikonas&gt;</a></span><span class="message">and then mes-m2 can probably be forgotten</span></div><div class="line" id="195141"><span class="nick" style="color:#af8d2f"><a href="#195141" label="[19:51:41]">&lt;janneke&gt;</a></span><span class="message">ah sure, i will can add kaem.&lt;cpu&gt;</span></div><div class="line" id="195221"><span class="nick" style="color:#af8d2f"><a href="#195221" label="[19:52:21]">&lt;janneke&gt;</a></span><span class="message">i just rebased the riscv work, finally, but want finish this m2-planet supported cleanups first</span></div><div class="line" id="195232"><span class="nick" style="color:#d9d9d9"><a href="#195232" label="[19:52:32]">&lt;muurkha&gt;</a></span><span class="message">awesome!</span></div><div class="line" id="221020"><span class="nick" style="color:#8dd3c7"><a href="#221020" label="[22:10:20]">&lt;stikonas&gt;</a></span><span class="message">did a bit of testing: M2-Planet 0.10.0 -&gt; mes 0.24 seems to work just fine, so no regressions</span></div><div class="line" id="221046"><span class="nick" style="color:#8dd3c7"><a href="#221046" label="[22:10:46]">&lt;stikonas&gt;</a></span><span class="message">I meant M2-Planet 1.10.0</span></div><div class="line" id="222815"><span class="nick" style="color:#af8d2f"><a href="#222815" label="[22:28:15]">&lt;janneke&gt;</a></span><span class="message">stikonas: nice</span></div><div class="line" id="232412"><span class="nick" style="color:#6c3d55"><a href="#232412" label="[23:24:12]">&lt;achaninja&gt;</a></span><span class="message">how do you guy install nyacc for mes development? not sure exactly how to get he mes build to pick it up</span></div><div class="line" id="232724"><span class="nick" style="color:#6c3d55"><a href="#232724" label="[23:27:24]">&lt;achaninja&gt;</a></span><span class="message"> <a rel="nofollow" href="https://pastebin.com/raw/KUJMAtdQ">https://pastebin.com/raw/KUJMAtdQ</a> </span></div><div class="line" id="232738"><span class="nick" style="color:#6c3d55"><a href="#232738" label="[23:27:38]">&lt;achaninja&gt;</a></span><span class="message">my build error isn't giving much feedback</span></div><div class="line" id="232939"><span class="nick" style="color:#8dd3c7"><a href="#232939" label="[23:29:39]">&lt;stikonas&gt;</a></span><span class="message">achaninja: unpack it and export GUILE_LOAD_PATH, something like <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysa/after.kaem#L26">https://github.com/fosslinux/live-bootstrap/blob/master/sysa/after.kaem#L26</a> </span></div><div class="line" id="233013"><span class="nick" style="color:#8dd3c7"><a href="#233013" label="[23:30:13]">&lt;stikonas&gt;</a></span><span class="message">${sysa}/${MES_PKG}/src/${NYACC_PKG} is /path/to/nyacc, so you need /path/to/nyacc/module</span></div><div class="line" id="233024"><span class="nick" style="color:#8dd3c7"><a href="#233024" label="[23:30:24]">&lt;stikonas&gt;</a></span><span class="message">and also 2 directories inside mes itself</span></div><div class="line" id="233115"><span class="nick" style="color:#8dd3c7"><a href="#233115" label="[23:31:15]">&lt;stikonas&gt;</a></span><span class="message">then I think you might also need to export MES_PREFIX and some parameters for garbage collector <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysa/mes/mes.kaem#L11">https://github.com/fosslinux/live-bootstrap/blob/master/sysa/mes/mes.kaem#L11</a> </span></div><div class="line" id="233221"><span class="nick" style="color:#8dd3c7"><a href="#233221" label="[23:32:21]">&lt;stikonas&gt;</a></span><span class="message">oh, you are trying to compile using guile... in that case I don't have enough background to answer</span></div><div class="line" id="233309"><span class="nick" style="color:#6c3d55"><a href="#233309" label="[23:33:09]">&lt;achaninja&gt;</a></span><span class="message">I have mes too</span></div><div class="line" id="233319"><span class="nick" style="color:#6c3d55"><a href="#233319" label="[23:33:19]">&lt;achaninja&gt;</a></span><span class="message">I mainly want to see what other C code I can run it on</span></div><div class="line" id="233406"><span class="nick" style="color:#6c3d55"><a href="#233406" label="[23:34:06]">&lt;achaninja&gt;</a></span><span class="message">thanks  that is helpful - I was missing some of these paths</span></div><div class="line" id="233630"><span class="nick" style="color:#6c3d55"><a href="#233630" label="[23:36:30]">&lt;achaninja&gt;</a></span><span class="message">that was it, just with guile you do'nt need mes/module</span></div><div class="line" id="233645"><span class="nick" style="color:#6c3d55"><a href="#233645" label="[23:36:45]">&lt;achaninja&gt;</a></span><span class="message">thank you</span></div><div class="line" id="233715"><span class="nick" style="color:#6c3d55"><a href="#233715" label="[23:37:15]">&lt;achaninja&gt;</a></span><span class="message">oh new error</span></div><div class="line" id="233756"><span class="nick" style="color:#6c3d55"><a href="#233756" label="[23:37:56]">&lt;achaninja&gt;</a></span><span class="message"> <a rel="nofollow" href="https://pastebin.com/raw/Skh8z8gZ">https://pastebin.com/raw/Skh8z8gZ</a> </span></div><div class="line" id="233805"><span class="nick" style="color:#6c3d55"><a href="#233805" label="[23:38:05]">&lt;achaninja&gt;</a></span><span class="message">perhaps someone has seen this before</span></div><div class="line" id="235315"><span class="nick" style="color:#8dd3c7"><a href="#235315" label="[23:53:15]">&lt;stikonas&gt;</a></span><span class="message">achaninja: hmm, looks like you are using wrong libc variant</span></div><div class="line" id="235319"><span class="nick" style="color:#8dd3c7"><a href="#235319" label="[23:53:19]">&lt;stikonas&gt;</a></span><span class="message">this one is for gcc and not for mescc</span></div><div class="line" id="235336"><span class="nick" style="color:#8dd3c7"><a href="#235336" label="[23:53:36]">&lt;stikonas&gt;</a></span><span class="message">probably something is misconfigured</span></div><div class="line" id="235351"><span class="nick" style="color:#6c3d55"><a href="#235351" label="[23:53:51]">&lt;achaninja&gt;</a></span><span class="message">yeah, changing to CC=clang worked, its like my version of binutils was incompatible</span></div><div class="line" id="235357"><span class="nick" style="color:#6c3d55"><a href="#235357" label="[23:53:57]">&lt;achaninja&gt;</a></span><span class="message">withe the inline assembly</span></div><div class="line" id="235439"><span class="nick" style="color:#8dd3c7"><a href="#235439" label="[23:54:39]">&lt;stikonas&gt;</a></span><span class="message">using mes and mesccon themselves is probably the least error prone but also the slowest</span></div><div class="line" id="235540"><span class="nick" style="color:#6c3d55"><a href="#235540" label="[23:55:40]">&lt;achaninja&gt;</a></span><span class="message">I'm not sure what the build does exactly but it seemed to build meslibc with my  host CC first</span></div><div class="line" id="235549"><span class="nick" style="color:#6c3d55"><a href="#235549" label="[23:55:49]">&lt;achaninja&gt;</a></span><span class="message">now its building it with mescc</span></div><div class="line" id="235717"><span class="nick" style="color:#8dd3c7"><a href="#235717" label="[23:57:17]">&lt;stikonas&gt;</a></span><span class="message">yeah, I think if you run configure or something like that that's what happens</span></div><div class="line" id="235733"><span class="nick" style="color:#8dd3c7"><a href="#235733" label="[23:57:33]">&lt;stikonas&gt;</a></span><span class="message">that's kind of development workflow</span></div><div class="line" id="235801"><span class="nick" style="color:#8dd3c7"><a href="#235801" label="[23:58:01]">&lt;stikonas&gt;</a></span><span class="message">the bootstrapping workflow is to use M2-Planet to build mes (for some reasons that binary is called mes-m2)</span></div><div class="line" id="235818"><span class="nick" style="color:#6c3d55"><a href="#235818" label="[23:58:18]">&lt;achaninja&gt;</a></span><span class="message">yeah, i have mes-m2 from stage0-posix</span></div><div class="line" id="235825"><span class="nick" style="color:#6c3d55"><a href="#235825" label="[23:58:25]">&lt;achaninja&gt;</a></span><span class="message">it seems to work</span></div><div class="line" id="235831"><span class="nick" style="color:#8dd3c7"><a href="#235831" label="[23:58:31]">&lt;stikonas&gt;</a></span><span class="message">and then use mes-m2 binary to build libc.a and optionally rebuild mes</span></div><div class="line" id="235846"><span class="nick" style="color:#6c3d55"><a href="#235846" label="[23:58:46]">&lt;achaninja&gt;</a></span><span class="message">oh i see</span></div><div class="line" id="235852"><span class="nick" style="color:#6c3d55"><a href="#235852" label="[23:58:52]">&lt;achaninja&gt;</a></span><span class="message">why does it bother building mes?</span></div><div class="line" id="235903"><span class="nick" style="color:#6c3d55"><a href="#235903" label="[23:59:03]">&lt;achaninja&gt;</a></span><span class="message">is mes better than mes-m2 in some way?</span></div><div class="line" id="235924"><span class="nick" style="color:#8dd3c7"><a href="#235924" label="[23:59:24]">&lt;stikonas&gt;</a></span><span class="message">in live-bootstrap we don't bother building mes, there we use mes-m2 to run mescc to build tcc directly</span></div><div class="line" id="235935"><span class="nick" style="color:#8dd3c7"><a href="#235935" label="[23:59:35]">&lt;stikonas&gt;</a></span><span class="message">mes binary seems faster than mes-m2</span></div><div class="line" id="235950"><span class="nick" style="color:#8dd3c7"><a href="#235950" label="[23:59:50]">&lt;stikonas&gt;</a></span><span class="message">possibly code emmited is better</span></div><div class="line" id="235958"><span class="nick" style="color:#8dd3c7"><a href="#235958" label="[23:59:58]">&lt;stikonas&gt;</a></span><span class="message">and is more optimized</span></div><br /></div></body></html>