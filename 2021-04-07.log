<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-04-07.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="002208"><span class="nick" style="color:#8dd3c7"><a href="#002208" label="[00:22:08]">&lt;fossy&gt;</a></span><span class="message">stikonas: how do you mean, API?</span></div><div class="line" id="002225"><span class="nick" style="color:#8dd3c7"><a href="#002225" label="[00:22:25]">&lt;fossy&gt;</a></span><span class="message">like function args and the like, not external communications to it?</span></div><div class="line" id="002237"><span class="nick" style="color:#2e2a4a"><a href="#002237" label="[00:22:37]">&lt;stikonas&gt;</a></span><span class="message">yeah</span></div><div class="line" id="002256"><span class="nick" style="color:#2e2a4a"><a href="#002256" label="[00:22:56]">&lt;stikonas&gt;</a></span><span class="message">my current attempt is get_file(url, mkbuild=False, output=None):</span></div><div class="line" id="002312"><span class="nick" style="color:#2e2a4a"><a href="#002312" label="[00:23:12]">&lt;stikonas&gt;</a></span><span class="message">where url and output can be either str or list(str)</span></div><div class="line" id="002329"><span class="nick" style="color:#8dd3c7"><a href="#002329" label="[00:23:29]">&lt;fossy&gt;</a></span><span class="message">sounds reasonable</span></div><div class="line" id="002342"><span class="nick" style="color:#2e2a4a"><a href="#002342" label="[00:23:42]">&lt;stikonas&gt;</a></span><span class="message">well, we can't have dictionaries because they are not sorted</span></div><div class="line" id="002355"><span class="nick" style="color:#2e2a4a"><a href="#002355" label="[00:23:55]">&lt;stikonas&gt;</a></span><span class="message">and we need to treat the first element in a different way</span></div><div class="line" id="002407"><span class="nick" style="color:#8dd3c7"><a href="#002407" label="[00:24:07]">&lt;fossy&gt;</a></span><span class="message">yeah i just thought the same thing</span></div><div class="line" id="011427"><span class="nick" style="color:#8dd3c7"><a href="#011427" label="[01:14:27]">&lt;fossy&gt;</a></span><span class="message">stikonas: another nice rootfs feature would be to have a different package name than the basename of the tarball</span></div><div class="line" id="011439"><span class="nick" style="color:#8dd3c7"><a href="#011439" label="[01:14:39]">&lt;fossy&gt;</a></span><span class="message">then we could avoid renaming things</span></div><div class="line" id="011453"><span class="nick" style="color:#8dd3c7"><a href="#011453" label="[01:14:53]">&lt;fossy&gt;</a></span><span class="message">and another thing i am running into now is i am downloading a single .c file from alpine for a musl incompatibility</span></div><div class="line" id="011529"><span class="nick" style="color:#2e2a4a"><a href="#011529" label="[01:15:29]">&lt;stikonas&gt;</a></span><span class="message">fossy: oh, I see regarding basename...</span></div><div class="line" id="011541"><span class="nick" style="color:#2e2a4a"><a href="#011541" label="[01:15:41]">&lt;stikonas&gt;</a></span><span class="message">I'm now around that part of the code right now</span></div><div class="line" id="011543"><span class="nick" style="color:#2e2a4a"><a href="#011543" label="[01:15:43]">&lt;stikonas&gt;</a></span><span class="message">let me see</span></div><div class="line" id="013817"><span class="nick" style="color:#2e2a4a"><a href="#013817" label="[01:38:17]">&lt;stikonas&gt;</a></span><span class="message">ok, python thingy is starting to work...</span></div><div class="line" id="013842"><span class="nick" style="color:#2e2a4a"><a href="#013842" label="[01:38:42]">&lt;stikonas&gt;</a></span><span class="message">although, at least for now it's a bit longer syntax... need to add &quot;self&quot;: self.get_file(&quot;<a rel="nofollow" href="https://ftpmirror.gnu.org/gnu/sed/sed-4.0.9.tar.gz">https://ftpmirror.gnu.org/gnu/sed/sed-4.0.9.tar.gz</a>&quot;,  mkbuild=True)</span></div><div class="line" id="014517"><span class="nick" style="color:#2e2a4a"><a href="#014517" label="[01:45:17]">&lt;stikonas&gt;</a></span><span class="message">maybe I'll try to rework code a bit not to need that...</span></div><div class="line" id="015738"><span class="nick" style="color:#8dd3c7"><a href="#015738" label="[01:57:38]">&lt;fossy&gt;</a></span><span class="message">is self an instance of SysA?</span></div><div class="line" id="015814"><span class="nick" style="color:#8dd3c7"><a href="#015814" label="[01:58:14]">&lt;fossy&gt;</a></span><span class="message">bit hacky but you could have that instance as a global and then have a setter</span></div><div class="line" id="020326"><span class="nick" style="color:#2e2a4a"><a href="#020326" label="[02:03:26]">&lt;stikonas&gt;</a></span><span class="message">yeah, self is SysA</span></div><div class="line" id="020334"><span class="nick" style="color:#2e2a4a"><a href="#020334" label="[02:03:34]">&lt;stikonas&gt;</a></span><span class="message">but I'm thinkinf of just getting rid of that class</span></div><div class="line" id="020345"><span class="nick" style="color:#2e2a4a"><a href="#020345" label="[02:03:45]">&lt;stikonas&gt;</a></span><span class="message">and keep functions in just module rather than class</span></div><div class="line" id="020505"><span class="nick" style="color:#2e2a4a"><a href="#020505" label="[02:05:05]">&lt;stikonas&gt;</a></span><span class="message">it's not like we will be creating many SysA objects...</span></div><div class="line" id="020509"><span class="nick" style="color:#8dd3c7"><a href="#020509" label="[02:05:09]">&lt;fossy&gt;</a></span><span class="message">yeah</span></div><div class="line" id="020512"><span class="nick" style="color:#8dd3c7"><a href="#020512" label="[02:05:12]">&lt;fossy&gt;</a></span><span class="message">that works too</span></div><div class="line" id="020518"><span class="nick" style="color:#8dd3c7"><a href="#020518" label="[02:05:18]">&lt;fossy&gt;</a></span><span class="message">as long as there is ablility for a SysB</span></div><div class="line" id="020531"><span class="nick" style="color:#2e2a4a"><a href="#020531" label="[02:05:31]">&lt;stikonas&gt;</a></span><span class="message">hmm, I'm not sure how much will be done from rootfs</span></div><div class="line" id="020540"><span class="nick" style="color:#2e2a4a"><a href="#020540" label="[02:05:40]">&lt;stikonas&gt;</a></span><span class="message">most of the processing will probably be from inside sysa</span></div><div class="line" id="020543"><span class="nick" style="color:#2e2a4a"><a href="#020543" label="[02:05:43]">&lt;stikonas&gt;</a></span><span class="message">during bootstrap</span></div><div class="line" id="020554"><span class="nick" style="color:#8dd3c7"><a href="#020554" label="[02:05:54]">&lt;fossy&gt;</a></span><span class="message">stikonas: yeah correct</span></div><div class="line" id="020557"><span class="nick" style="color:#8dd3c7"><a href="#020557" label="[02:05:57]">&lt;fossy&gt;</a></span><span class="message">hm</span></div><div class="line" id="020608"><span class="nick" style="color:#2e2a4a"><a href="#020608" label="[02:06:08]">&lt;stikonas&gt;</a></span><span class="message">we just need to download stuff into different target dir that is inside sysa...</span></div><div class="line" id="020617"><span class="nick" style="color:#8dd3c7"><a href="#020617" label="[02:06:17]">&lt;fossy&gt;</a></span><span class="message">i was thinking for sysb that we would just download tarballs outside and cp them to a /sysb in /sysa</span></div><div class="line" id="020622"><span class="nick" style="color:#8dd3c7"><a href="#020622" label="[02:06:22]">&lt;fossy&gt;</a></span><span class="message">uh /sysb in sysa</span></div><div class="line" id="020626"><span class="nick" style="color:#2e2a4a"><a href="#020626" label="[02:06:26]">&lt;stikonas&gt;</a></span><span class="message">although even for sysa, I think it might be worth putting sources into subdir of /after</span></div><div class="line" id="020636"><span class="nick" style="color:#2e2a4a"><a href="#020636" label="[02:06:36]">&lt;stikonas&gt;</a></span><span class="message">yeah...</span></div><div class="line" id="020641"><span class="nick" style="color:#8dd3c7"><a href="#020641" label="[02:06:41]">&lt;fossy&gt;</a></span><span class="message">hm, whyso?</span></div><div class="line" id="020644"><span class="nick" style="color:#8dd3c7"><a href="#020644" label="[02:06:44]">&lt;fossy&gt;</a></span><span class="message">reduce host processing?</span></div><div class="line" id="020713"><span class="nick" style="color:#2e2a4a"><a href="#020713" label="[02:07:13]">&lt;stikonas&gt;</a></span><span class="message">no, just tidiness...</span></div><div class="line" id="020718"><span class="nick" style="color:#2e2a4a"><a href="#020718" label="[02:07:18]">&lt;stikonas&gt;</a></span><span class="message">I'm not sure about that yet anyway</span></div><div class="line" id="020724"><span class="nick" style="color:#2e2a4a"><a href="#020724" label="[02:07:24]">&lt;stikonas&gt;</a></span><span class="message">it's just now when we are in /after</span></div><div class="line" id="020748"><span class="nick" style="color:#8dd3c7"><a href="#020748" label="[02:07:48]">&lt;fossy&gt;</a></span><span class="message">i think it is more useful to attribute sources to a package</span></div><div class="line" id="020751"><span class="nick" style="color:#2e2a4a"><a href="#020751" label="[02:07:51]">&lt;stikonas&gt;</a></span><span class="message">there are a lot of package directories and they are mixed with installation directories like bin/ lib/ share/</span></div><div class="line" id="020756"><span class="nick" style="color:#8dd3c7"><a href="#020756" label="[02:07:56]">&lt;fossy&gt;</a></span><span class="message">ohhhh</span></div><div class="line" id="020801"><span class="nick" style="color:#2e2a4a"><a href="#020801" label="[02:08:01]">&lt;stikonas&gt;</a></span><span class="message">no, keep the name</span></div><div class="line" id="020803"><span class="nick" style="color:#8dd3c7"><a href="#020803" label="[02:08:03]">&lt;fossy&gt;</a></span><span class="message">so you mean move all the build things to a subdirectory</span></div><div class="line" id="020808"><span class="nick" style="color:#8dd3c7"><a href="#020808" label="[02:08:08]">&lt;fossy&gt;</a></span><span class="message">not copying sources</span></div><div class="line" id="020808"><span class="nick" style="color:#2e2a4a"><a href="#020808" label="[02:08:08]">&lt;stikonas&gt;</a></span><span class="message">not sure...</span></div><div class="line" id="020811"><span class="nick" style="color:#2e2a4a"><a href="#020811" label="[02:08:11]">&lt;stikonas&gt;</a></span><span class="message">yeah</span></div><div class="line" id="020814"><span class="nick" style="color:#8dd3c7"><a href="#020814" label="[02:08:14]">&lt;fossy&gt;</a></span><span class="message">yeah that makes sense</span></div><div class="line" id="020821"><span class="nick" style="color:#8dd3c7"><a href="#020821" label="[02:08:21]">&lt;fossy&gt;</a></span><span class="message">i wouldn't mind that</span></div><div class="line" id="020831"><span class="nick" style="color:#2e2a4a"><a href="#020831" label="[02:08:31]">&lt;stikonas&gt;</a></span><span class="message">anyway, I don't want to change too many things in one go</span></div><div class="line" id="020836"><span class="nick" style="color:#8dd3c7"><a href="#020836" label="[02:08:36]">&lt;fossy&gt;</a></span><span class="message">+1</span></div><div class="line" id="020855"><span class="nick" style="color:#2e2a4a"><a href="#020855" label="[02:08:55]">&lt;stikonas&gt;</a></span><span class="message">so this time I'll just mostly convert 1-1 from bash to python</span></div><div class="line" id="020909"><span class="nick" style="color:#2e2a4a"><a href="#020909" label="[02:09:09]">&lt;stikonas&gt;</a></span><span class="message">with some minor changes</span></div><div class="line" id="020914"><span class="nick" style="color:#2e2a4a"><a href="#020914" label="[02:09:14]">&lt;stikonas&gt;</a></span><span class="message">but nothing major</span></div><div class="line" id="021002"><span class="nick" style="color:#2e2a4a"><a href="#021002" label="[02:10:02]">&lt;stikonas&gt;</a></span><span class="message">argh, now I remember why I had class</span></div><div class="line" id="021006"><span class="nick" style="color:#2e2a4a"><a href="#021006" label="[02:10:06]">&lt;stikonas&gt;</a></span><span class="message">it's to have a desctructor</span></div><div class="line" id="021041"><span class="nick" style="color:#8dd3c7"><a href="#021041" label="[02:10:41]">&lt;fossy&gt;</a></span><span class="message">can just call destructor as a function no?</span></div><div class="line" id="021042"><span class="nick" style="color:#2e2a4a"><a href="#021042" label="[02:10:42]">&lt;stikonas&gt;</a></span><span class="message">although, I think in Python you can have that without class too</span></div><div class="line" id="021044"><span class="nick" style="color:#2e2a4a"><a href="#021044" label="[02:10:44]">&lt;stikonas&gt;</a></span><span class="message">I think so</span></div><div class="line" id="021057"><span class="nick" style="color:#8dd3c7"><a href="#021057" label="[02:10:57]">&lt;fossy&gt;</a></span><span class="message">yeah you just make it into a normal function and call it at the end</span></div><div class="line" id="021112"><span class="nick" style="color:#2e2a4a"><a href="#021112" label="[02:11:12]">&lt;stikonas&gt;</a></span><span class="message">yeah, I'll see tomorrow..</span></div><div class="line" id="021118"><span class="nick" style="color:#8dd3c7"><a href="#021118" label="[02:11:18]">&lt;fossy&gt;</a></span><span class="message">:D</span></div><div class="line" id="021120"><span class="nick" style="color:#2e2a4a"><a href="#021120" label="[02:11:20]">&lt;stikonas&gt;</a></span><span class="message">I've pushed my intermediate changes</span></div><div class="line" id="021144"><span class="nick" style="color:#2e2a4a"><a href="#021144" label="[02:11:44]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/stikonas/live-bootstrap/commit/731431f4a2f884309e1fe5e3a3c36697e1b2c839">https://github.com/stikonas/live-bootstrap/commit/731431f4a2f884309e1fe5e3a3c36697e1b2c839</a> </span></div><div class="line" id="021200"><span class="nick" style="color:#2e2a4a"><a href="#021200" label="[02:12:00]">&lt;stikonas&gt;</a></span><span class="message">this can bootstrap up to sed...</span></div><div class="line" id="021210"><span class="nick" style="color:#2e2a4a"><a href="#021210" label="[02:12:10]">&lt;stikonas&gt;</a></span><span class="message">although, after sed it's just extending the list of packages, nothing new</span></div><div class="line" id="021541"><span class="nick" style="color:#2e2a4a"><a href="#021541" label="[02:15:41]">&lt;stikonas&gt;</a></span><span class="message">by the way, what example do you have of where you want different package name and basename?</span></div><div class="line" id="021554"><span class="nick" style="color:#2e2a4a"><a href="#021554" label="[02:15:54]">&lt;stikonas&gt;</a></span><span class="message">is it not what output variable was doing?</span></div><div class="line" id="025027"><span class="nick" style="color:#8dd3c7"><a href="#025027" label="[02:50:27]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: yeah that kinda is what output variable was doing. the example was however that i was downloading a raw C files</span></div><div class="line" id="025034"><span class="nick" style="color:#8dd3c7"><a href="#025034" label="[02:50:34]">&lt;fossy&gt;</a></span><span class="message">(getopt for musl)</span></div><div class="line" id="025040"><span class="nick" style="color:#8dd3c7"><a href="#025040" label="[02:50:40]">&lt;fossy&gt;</a></span><span class="message">so i just wanted to be able to give it a package name</span></div><div class="line" id="025059"><span class="nick" style="color:#8dd3c7"><a href="#025059" label="[02:50:59]">&lt;fossy&gt;</a></span><span class="message">although i have said screw u to metaconfig and am moving on from trying that so not worrying about that issue anymore</span></div><div class="line" id="094453"><span class="nick" style="color:#6b8072"><a href="#094453" label="[09:44:53]">&lt;bauen1&gt;</a></span><span class="message">stikonas[m]: i would like to have the sources in a seperate directory (perhaps src), so that it's easier to find important / less important things</span></div><div class="line" id="094521"><span class="nick" style="color:#6b8072"><a href="#094521" label="[09:45:21]">&lt;bauen1&gt;</a></span><span class="message">stikonas[m]: latest wip <a rel="nofollow" href="https://github.com/bauen1/live-bootstrap/commit/77f6213aa85e49af3f9f7da7a2670552bd9b7873">https://github.com/bauen1/live-bootstrap/commit/77f6213aa85e49af3f9f7da7a2670552bd9b7873</a>  with a upkg_link_pkg / upkg_unlink_pkg</span></div><div class="line" id="094603"><span class="nick" style="color:#6b8072"><a href="#094603" label="[09:46:03]">&lt;bauen1&gt;</a></span><span class="message">but then again i'd also really like it if we could chroot into /after (or make it sysb), since we shouldn't be touching / anymore and everything important has been copied over</span></div><div class="line" id="095058"><span class="nick" style="color:#6b8072"><a href="#095058" label="[09:50:58]">&lt;bauen1&gt;</a></span><span class="message">and moving the sources in a seperate directory means i can use chkstow more easily to find &quot;left overs&quot;</span></div><div class="line" id="102533"><span class="nick" style="color:#8dd3c7"><a href="#102533" label="[10:25:33]">&lt;fossy&gt;</a></span><span class="message">making much better progress with cuystom makefile for perl</span></div><div class="line" id="102542"><span class="nick" style="color:#8dd3c7"><a href="#102542" label="[10:25:42]">&lt;fossy&gt;</a></span><span class="message">however old bison *is* needed, it dosen't compile with new bison</span></div><div class="line" id="102553"><span class="nick" style="color:#8dd3c7"><a href="#102553" label="[10:25:53]">&lt;fossy&gt;</a></span><span class="message">i have a backwards path for getting it but it does need old flex</span></div><div class="line" id="102558"><span class="nick" style="color:#8dd3c7"><a href="#102558" label="[10:25:58]">&lt;fossy&gt;</a></span><span class="message">which we have but we delete</span></div><div class="line" id="102601"><span class="nick" style="color:#8dd3c7"><a href="#102601" label="[10:26:01]">&lt;fossy&gt;</a></span><span class="message">so we can just not delete it</span></div><div class="line" id="102633"><span class="nick" style="color:#8dd3c7"><a href="#102633" label="[10:26:33]">&lt;fossy&gt;</a></span><span class="message">bauen1: i really prefer having the sources in a package-specific directory - it makes it very clear what package is using what and makes extractions easier</span></div><div class="line" id="102707"><span class="nick" style="color:#8dd3c7"><a href="#102707" label="[10:27:07]">&lt;fossy&gt;</a></span><span class="message">bauen1: regarding chrooting into /after, that would def be a sysb</span></div><div class="line" id="102721"><span class="nick" style="color:#8dd3c7"><a href="#102721" label="[10:27:21]">&lt;fossy&gt;</a></span><span class="message">i don't mind it for the short term but in the long term that chroot would be replaced with kernel magic</span></div><div class="line" id="102729"><span class="nick" style="color:#8dd3c7"><a href="#102729" label="[10:27:29]">&lt;fossy&gt;</a></span><span class="message">so don't rely on it being a chroot</span></div><div class="line" id="102853"><span class="nick" style="color:#6b8072"><a href="#102853" label="[10:28:53]">&lt;bauen1&gt;</a></span><span class="message">fossy: yes, i meant stuffing the whole e.g. bash-2.05b directory into a &quot;source&quot; directory</span></div><div class="line" id="102907"><span class="nick" style="color:#8dd3c7"><a href="#102907" label="[10:29:07]">&lt;fossy&gt;</a></span><span class="message">lmao i have done that twice today then</span></div><div class="line" id="102913"><span class="nick" style="color:#8dd3c7"><a href="#102913" label="[10:29:13]">&lt;fossy&gt;</a></span><span class="message">yes, all for that</span></div><div class="line" id="102915"><span class="nick" style="color:#6b8072"><a href="#102915" label="[10:29:15]">&lt;bauen1&gt;</a></span><span class="message">fossy: chroot can of course also be acomplished by rebooting</span></div><div class="line" id="102923"><span class="nick" style="color:#8dd3c7"><a href="#102923" label="[10:29:23]">&lt;fossy&gt;</a></span><span class="message">m, kexec is the goal</span></div><div class="line" id="102930"><span class="nick" style="color:#8dd3c7"><a href="#102930" label="[10:29:30]">&lt;fossy&gt;</a></span><span class="message">i have a &quot;via qemu&quot; idea</span></div><div class="line" id="102935"><span class="nick" style="color:#8dd3c7"><a href="#102935" label="[10:29:35]">&lt;fossy&gt;</a></span><span class="message">cause kexec sucks</span></div><div class="line" id="102953"><span class="nick" style="color:#8dd3c7"><a href="#102953" label="[10:29:53]">&lt;fossy&gt;</a></span><span class="message">but it is completely untested and not in development</span></div><div class="line" id="103002"><span class="nick" style="color:#6b8072"><a href="#103002" label="[10:30:02]">&lt;bauen1&gt;</a></span><span class="message">i don't really mind how it's achieved, i just want to make the &quot;quasi&quot; boundary into a real boundary</span></div><div class="line" id="103017"><span class="nick" style="color:#8dd3c7"><a href="#103017" label="[10:30:17]">&lt;fossy&gt;</a></span><span class="message">where are you planning to make the boundary? what package?</span></div><div class="line" id="103022"><span class="nick" style="color:#8dd3c7"><a href="#103022" label="[10:30:22]">&lt;fossy&gt;</a></span><span class="message">clearly not at e.g. tcc...</span></div><div class="line" id="103030"><span class="nick" style="color:#6b8072"><a href="#103030" label="[10:30:30]">&lt;bauen1&gt;</a></span><span class="message">fossy: the point at which we transition to /after</span></div><div class="line" id="103035"><span class="nick" style="color:#8dd3c7"><a href="#103035" label="[10:30:35]">&lt;fossy&gt;</a></span><span class="message">how can you chroot there</span></div><div class="line" id="103042"><span class="nick" style="color:#8dd3c7"><a href="#103042" label="[10:30:42]">&lt;fossy&gt;</a></span><span class="message">there's no tools to chroot</span></div><div class="line" id="103052"><span class="nick" style="color:#6b8072"><a href="#103052" label="[10:30:52]">&lt;bauen1&gt;</a></span><span class="message">fossy: that's a one liner in C to do so</span></div><div class="line" id="103115"><span class="nick" style="color:#8dd3c7"><a href="#103115" label="[10:31:15]">&lt;fossy&gt;</a></span><span class="message">you'd have to add chroot syscall support to m2-planet</span></div><div class="line" id="103120"><span class="nick" style="color:#8dd3c7"><a href="#103120" label="[10:31:20]">&lt;fossy&gt;</a></span><span class="message">we don't even have mes libc at that point</span></div><div class="line" id="103129"><span class="nick" style="color:#6b8072"><a href="#103129" label="[10:31:29]">&lt;bauen1&gt;</a></span><span class="message">right i keep forgetting that</span></div><div class="line" id="103152"><span class="nick" style="color:#8dd3c7"><a href="#103152" label="[10:31:52]">&lt;fossy&gt;</a></span><span class="message">i don't think mes libc has chroot syscall either (but that's even easier to add a syscall to, i can do that if you want)</span></div><div class="line" id="103201"><span class="nick" style="color:#8dd3c7"><a href="#103201" label="[10:32:01]">&lt;fossy&gt;</a></span><span class="message">but then you'd have to wait for mes-libc-patched...</span></div><div class="line" id="103203"><span class="nick" style="color:#6b8072"><a href="#103203" label="[10:32:03]">&lt;bauen1&gt;</a></span><span class="message">fossy: for i'm just thinking</span></div><div class="line" id="103207"><span class="nick" style="color:#6b8072"><a href="#103207" label="[10:32:07]">&lt;bauen1&gt;</a></span><span class="message">*for now</span></div><div class="line" id="103244"><span class="nick" style="color:#8dd3c7"><a href="#103244" label="[10:32:44]">&lt;fossy&gt;</a></span><span class="message">m ok</span></div><div class="line" id="103300"><span class="nick" style="color:#8dd3c7"><a href="#103300" label="[10:33:00]">&lt;fossy&gt;</a></span><span class="message">a very worthy goal</span></div><div class="line" id="103323"><span class="nick" style="color:#8dd3c7"><a href="#103323" label="[10:33:23]">&lt;fossy&gt;</a></span><span class="message">another option is using /after up until a particular point and then instating the &quot;boundary&quot; into real isolation through chroot</span></div><div class="line" id="103327"><span class="nick" style="color:#6b8072"><a href="#103327" label="[10:33:27]">&lt;bauen1&gt;</a></span><span class="message">at some point i need to make a &quot;cut&quot; and have everything (more or less) managed by stow / upkg so i can start with building pseudo packages in chroots</span></div><div class="line" id="103344"><span class="nick" style="color:#6b8072"><a href="#103344" label="[10:33:44]">&lt;bauen1&gt;</a></span><span class="message">fossy: but then you have all these things that hard code /after in their binaries</span></div><div class="line" id="103354"><span class="nick" style="color:#6b8072"><a href="#103354" label="[10:33:54]">&lt;bauen1&gt;</a></span><span class="message">and search pathes, which is the mess i would like to avoid</span></div><div class="line" id="103356"><span class="nick" style="color:#8dd3c7"><a href="#103356" label="[10:33:56]">&lt;fossy&gt;</a></span><span class="message">bauen1: ugh, yeah, didn't think of that</span></div><div class="line" id="103412"><span class="nick" style="color:#8dd3c7"><a href="#103412" label="[10:34:12]">&lt;fossy&gt;</a></span><span class="message">hm that will be quite messy</span></div><div class="line" id="103420"><span class="nick" style="color:#6b8072"><a href="#103420" label="[10:34:20]">&lt;bauen1&gt;</a></span><span class="message">chrooting into /after avoids that, and we can later copy over things to a new root (sysb) without recompiling things</span></div><div class="line" id="103437"><span class="nick" style="color:#8dd3c7"><a href="#103437" label="[10:34:37]">&lt;fossy&gt;</a></span><span class="message">what would be your ideal staged process for moving live-bootstrap over to upkg</span></div><div class="line" id="103443"><span class="nick" style="color:#8dd3c7"><a href="#103443" label="[10:34:43]">&lt;fossy&gt;</a></span><span class="message">the stow/upkg stuff all has to happen at once right</span></div><div class="line" id="103448"><span class="nick" style="color:#6b8072"><a href="#103448" label="[10:34:48]">&lt;bauen1&gt;</a></span><span class="message">not quite</span></div><div class="line" id="103504"><span class="nick" style="color:#6b8072"><a href="#103504" label="[10:35:04]">&lt;bauen1&gt;</a></span><span class="message">in <a rel="nofollow" href="https://github.com/bauen1/live-bootstrap/commit/77f6213aa85e49af3f9f7da7a2670552bd9b7873">https://github.com/bauen1/live-bootstrap/commit/77f6213aa85e49af3f9f7da7a2670552bd9b7873</a>  i'm &quot;packaging&quot; sed by using ln manually</span></div><div class="line" id="103531"><span class="nick" style="color:#6b8072"><a href="#103531" label="[10:35:31]">&lt;bauen1&gt;</a></span><span class="message">but at the point where we have perl 5.6.2 we can get stow to easily build chroots for package building</span></div><div class="line" id="103627"><span class="nick" style="color:#8dd3c7"><a href="#103627" label="[10:36:27]">&lt;fossy&gt;</a></span><span class="message">hm i find that pretty ugly</span></div><div class="line" id="103634"><span class="nick" style="color:#6b8072"><a href="#103634" label="[10:36:34]">&lt;bauen1&gt;</a></span><span class="message">yes</span></div><div class="line" id="103634"><span class="nick" style="color:#8dd3c7"><a href="#103634" label="[10:36:34]">&lt;fossy&gt;</a></span><span class="message">particularly if we are doing that for a whole lot of packages up until stow</span></div><div class="line" id="103711"><span class="nick" style="color:#8dd3c7"><a href="#103711" label="[10:37:11]">&lt;fossy&gt;</a></span><span class="message">what exactly is the chroot building thing</span></div><div class="line" id="103715"><span class="nick" style="color:#6b8072"><a href="#103715" label="[10:37:15]">&lt;bauen1&gt;</a></span><span class="message">there's probably a decent-ish way of doing a recursive function in bash to do the linking, but ln also doesn't support `--relative` which i think is necessary for making stow recognise it (i'll test it)</span></div><div class="line" id="103725"><span class="nick" style="color:#8dd3c7"><a href="#103725" label="[10:37:25]">&lt;fossy&gt;</a></span><span class="message">i still don't really get what youre saying with that</span></div><div class="line" id="103730"><span class="nick" style="color:#8dd3c7"><a href="#103730" label="[10:37:30]">&lt;fossy&gt;</a></span><span class="message">do you mean like how most package managers do it</span></div><div class="line" id="103734"><span class="nick" style="color:#8dd3c7"><a href="#103734" label="[10:37:34]">&lt;fossy&gt;</a></span><span class="message">package builders*</span></div><div class="line" id="103743"><span class="nick" style="color:#8dd3c7"><a href="#103743" label="[10:37:43]">&lt;fossy&gt;</a></span><span class="message">(idk about most even, but void does)</span></div><div class="line" id="103823"><span class="nick" style="color:#6b8072"><a href="#103823" label="[10:38:23]">&lt;bauen1&gt;</a></span><span class="message">fossy: currently &quot;upkg-build&quot; would make a directory, bind mount / mknod a basic /dev, copy over (or bind mount read only) /upkgs, link dependencies, copy source + package script, run package script inside chroot</span></div><div class="line" id="103837"><span class="nick" style="color:#8dd3c7"><a href="#103837" label="[10:38:37]">&lt;fossy&gt;</a></span><span class="message">yeah right</span></div><div class="line" id="103923"><span class="nick" style="color:#8dd3c7"><a href="#103923" label="[10:39:23]">&lt;fossy&gt;</a></span><span class="message">that sounds good</span></div><div class="line" id="103925"><span class="nick" style="color:#6b8072"><a href="#103925" label="[10:39:25]">&lt;bauen1&gt;</a></span><span class="message">the major benefit this brings is a clear list of dependencies, so you can skip rebuilding based on hashes, or reorder things more easily</span></div><div class="line" id="103939"><span class="nick" style="color:#6b8072"><a href="#103939" label="[10:39:39]">&lt;bauen1&gt;</a></span><span class="message">it does *not* have any sort of dependency resolution, that's your job :D</span></div><div class="line" id="103959"><span class="nick" style="color:#8dd3c7"><a href="#103959" label="[10:39:59]">&lt;fossy&gt;</a></span><span class="message">please ensure the dependencies are versioned, whatever you do :P</span></div><div class="line" id="104016"><span class="nick" style="color:#8dd3c7"><a href="#104016" label="[10:40:16]">&lt;fossy&gt;</a></span><span class="message">because as i am sure you are aware we have many many versions of auto*</span></div><div class="line" id="104034"><span class="nick" style="color:#6b8072"><a href="#104034" label="[10:40:34]">&lt;bauen1&gt;</a></span><span class="message">&quot;you want autoconf ?&quot;, &quot;sure, maybe you'll get 1.13, 1.12 or something else ...&quot;</span></div><div class="line" id="104049"><span class="nick" style="color:#8dd3c7"><a href="#104049" label="[10:40:49]">&lt;fossy&gt;</a></span><span class="message">heh</span></div><div class="line" id="104101"><span class="nick" style="color:#8dd3c7"><a href="#104101" label="[10:41:01]">&lt;fossy&gt;</a></span><span class="message">saying cause most package managers only care about one version</span></div><div class="line" id="104106"><span class="nick" style="color:#6b8072"><a href="#104106" label="[10:41:06]">&lt;bauen1&gt;</a></span><span class="message">yes</span></div><div class="line" id="104125"><span class="nick" style="color:#6b8072"><a href="#104125" label="[10:41:25]">&lt;bauen1&gt;</a></span><span class="message">there is no concept of a &quot;version&quot; right now, mostly the convention of using &quot;$pkgname-$pkgversion-$versionsuffix&quot;</span></div><div class="line" id="104132"><span class="nick" style="color:#8dd3c7"><a href="#104132" label="[10:41:32]">&lt;fossy&gt;</a></span><span class="message">even that's fine</span></div><div class="line" id="104142"><span class="nick" style="color:#8dd3c7"><a href="#104142" label="[10:41:42]">&lt;fossy&gt;</a></span><span class="message">i would prefer that versions are handled as completely seperate packages</span></div><div class="line" id="104649"><span class="nick" style="color:#6b8072"><a href="#104649" label="[10:46:49]">&lt;bauen1&gt;</a></span><span class="message">calling it a package manager might be a bit of an insult towards what dpkg/apt and the likes are doing lol</span></div><div class="line" id="104900"><span class="nick" style="color:#6b8072"><a href="#104900" label="[10:49:00]">&lt;bauen1&gt;</a></span><span class="message">and the next package that seems to ignore DESTDIR: binutils-2.14 ...</span></div><div class="line" id="105320"><span class="nick" style="color:#6b8072"><a href="#105320" label="[10:53:20]">&lt;bauen1&gt;</a></span><span class="message">stikonas[m]: you've used $() instead of ${} in binutils-2.14.sh</span></div><div class="line" id="105536"><span class="nick" style="color:#80b1d3"><a href="#105536" label="[10:55:36]">&lt;stikonas[m]&gt;</a></span><span class="message">Oh, needs fixing then</span></div><div class="line" id="140357"><span class="nick" style="color:#8dd3c7"><a href="#140357" label="[14:03:57]">&lt;fossy&gt;</a></span><span class="message">janneke: just wanted to cehck, there is currently no progress for riscv bootstrap, right?</span></div><div class="line" id="140845"><span class="nick" style="color:#6d2462"><a href="#140845" label="[14:08:45]">&lt;janneke&gt;</a></span><span class="message">fossy: other than the efforts by laanwj, you mean?</span></div><div class="line" id="140940"><span class="nick" style="color:#8dd3c7"><a href="#140940" label="[14:09:40]">&lt;fossy&gt;</a></span><span class="message">rings a bell.. what did they do?</span></div><div class="line" id="140952"><span class="nick" style="color:#8dd3c7"><a href="#140952" label="[14:09:52]">&lt;fossy&gt;</a></span><span class="message">ooh</span></div><div class="line" id="140954"><span class="nick" style="color:#8dd3c7"><a href="#140954" label="[14:09:54]">&lt;fossy&gt;</a></span><span class="message">found it</span></div><div class="line" id="140956"><span class="nick" style="color:#8dd3c7"><a href="#140956" label="[14:09:56]">&lt;fossy&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/laanwj/guix-mes/commits/riscv64">https://github.com/laanwj/guix-mes/commits/riscv64</a> </span></div><div class="line" id="141001"><span class="nick" style="color:#8dd3c7"><a href="#141001" label="[14:10:01]">&lt;fossy&gt;</a></span><span class="message">very neat and very new</span></div><div class="line" id="142558"><span class="nick" style="color:#234e69"><a href="#142558" label="[14:25:58]">&lt;gforce_de1977&gt;</a></span><span class="message">after 86400 seconds my nokvm-qemu-testbuilds where aborted: <a rel="nofollow" href="http://intercity-vpn.de/bootstrap/bootstrap.log-16.txt">http://intercity-vpn.de/bootstrap/bootstrap.log-16.txt</a> </span></div><div class="line" id="142621"><span class="nick" style="color:#234e69"><a href="#142621" label="[14:26:21]">&lt;gforce_de1977&gt;</a></span><span class="message">(still compiling mescc.scm)</span></div><div class="line" id="142809"><span class="nick" style="color:#6b8072"><a href="#142809" label="[14:28:09]">&lt;bauen1&gt;</a></span><span class="message">oh boy</span></div><div class="line" id="142827"><span class="nick" style="color:#6b8072"><a href="#142827" label="[14:28:27]">&lt;bauen1&gt;</a></span><span class="message">looking at that i'm not sure if nokvm will get to the bash of interest in 2 days</span></div><div class="line" id="152853"><span class="nick" style="color:#2e2a4a"><a href="#152853" label="[15:28:53]">&lt;stikonas&gt;</a></span><span class="message">bauen1: that will take like a week...</span></div><div class="line" id="152905"><span class="nick" style="color:#2e2a4a"><a href="#152905" label="[15:29:05]">&lt;stikonas&gt;</a></span><span class="message">if not 2 weeks</span></div><div class="line" id="152911"><span class="nick" style="color:#2e2a4a"><a href="#152911" label="[15:29:11]">&lt;stikonas&gt;</a></span><span class="message">that's just 20% of meslibc</span></div><div class="line" id="152924"><span class="nick" style="color:#2e2a4a"><a href="#152924" label="[15:29:24]">&lt;stikonas&gt;</a></span><span class="message">than you still need to build mes and tcc</span></div><div class="line" id="153624"><span class="nick" style="color:#6b8072"><a href="#153624" label="[15:36:24]">&lt;bauen1&gt;</a></span><span class="message">&gt;_&gt; alright</span></div><div class="line" id="153709"><span class="nick" style="color:#6b8072"><a href="#153709" label="[15:37:09]">&lt;bauen1&gt;</a></span><span class="message">there's also just been another patchset on the tcc mailing list about riscv64 inline assembly, so that part is starting to get filled in too</span></div><div class="line" id="154844"><span class="nick" style="color:#2e2a4a"><a href="#154844" label="[15:48:44]">&lt;stikonas&gt;</a></span><span class="message">although, that part would have to be backported to janneke's tcc 0.9.26 too</span></div><div class="line" id="154900"><span class="nick" style="color:#2e2a4a"><a href="#154900" label="[15:49:00]">&lt;stikonas&gt;</a></span><span class="message">unless mescc can be improved to build newer tcc</span></div><div class="line" id="155122"><span class="nick" style="color:#6b8072"><a href="#155122" label="[15:51:22]">&lt;bauen1&gt;</a></span><span class="message">you could also try to update jannekes tcc a bit</span></div><div class="line" id="155139"><span class="nick" style="color:#6b8072"><a href="#155139" label="[15:51:39]">&lt;bauen1&gt;</a></span><span class="message">iirc there are some patches after 0.9.26 (and 0.9.27) that make building musl simpler</span></div><div class="line" id="155633"><span class="nick" style="color:#2e2a4a"><a href="#155633" label="[15:56:33]">&lt;stikonas&gt;</a></span><span class="message">well, we build musl with 0.9.27</span></div><div class="line" id="155640"><span class="nick" style="color:#2e2a4a"><a href="#155640" label="[15:56:40]">&lt;stikonas&gt;</a></span><span class="message">and one patch is already applied</span></div><div class="line" id="155732"><span class="nick" style="color:#2e2a4a"><a href="#155732" label="[15:57:32]">&lt;stikonas&gt;</a></span><span class="message">not sure if there is more that we can simplify</span></div><div class="line" id="155747"><span class="nick" style="color:#2e2a4a"><a href="#155747" label="[15:57:47]">&lt;stikonas&gt;</a></span><span class="message">unless somebody fixes that weak symbol stuff</span></div><div class="line" id="160714"><span class="nick" style="color:#6b8072"><a href="#160714" label="[16:07:14]">&lt;bauen1&gt;</a></span><span class="message">0.9.27 is the latest release and i'm pretty sure ~2 years old now ...</span></div><div class="line" id="161143"><span class="nick" style="color:#2e2a4a"><a href="#161143" label="[16:11:43]">&lt;stikonas&gt;</a></span><span class="message">yeah, I just grabbed one patch from the tcc mob branch</span></div><div class="line" id="161213"><span class="nick" style="color:#2e2a4a"><a href="#161213" label="[16:12:13]">&lt;stikonas&gt;</a></span><span class="message">then there are a few patches that remove some more complicated assembly, but I don't think tcc mob will be able to deal with it anyway</span></div><div class="line" id="161225"><span class="nick" style="color:#2e2a4a"><a href="#161225" label="[16:12:25]">&lt;stikonas&gt;</a></span><span class="message">and there is weak symbol stuff....</span></div><div class="line" id="161232"><span class="nick" style="color:#2e2a4a"><a href="#161232" label="[16:12:32]">&lt;stikonas&gt;</a></span><span class="message">that's basically all that we patch</span></div><div class="line" id="161533"><span class="nick" style="color:#6b8072"><a href="#161533" label="[16:15:33]">&lt;bauen1&gt;</a></span><span class="message">that sounds quite decent</span></div><div class="line" id="161556"><span class="nick" style="color:#6b8072"><a href="#161556" label="[16:15:56]">&lt;bauen1&gt;</a></span><span class="message">i don't remember any issues related to weak symbols but i also didn't make much use of myunix musl libc yet</span></div><div class="line" id="161606"><span class="nick" style="color:#6b8072"><a href="#161606" label="[16:16:06]">&lt;bauen1&gt;</a></span><span class="message">and i was using a fairly recent git commit</span></div><div class="line" id="162008"><span class="nick" style="color:#2e2a4a"><a href="#162008" label="[16:20:08]">&lt;stikonas&gt;</a></span><span class="message">well, tcc -ar had some issues with weak symbols in .a archives</span></div><div class="line" id="162020"><span class="nick" style="color:#2e2a4a"><a href="#162020" label="[16:20:20]">&lt;stikonas&gt;</a></span><span class="message">once we had binutils ar, those patches are dropped</span></div><div class="line" id="162035"><span class="nick" style="color:#2e2a4a"><a href="#162035" label="[16:20:35]">&lt;stikonas&gt;</a></span><span class="message">well, those weak symbols patches are more of a hack than proper fix</span></div><div class="line" id="162042"><span class="nick" style="color:#2e2a4a"><a href="#162042" label="[16:20:42]">&lt;stikonas&gt;</a></span><span class="message">proper fix would be to fix tcc -ar</span></div><div class="line" id="162519"><span class="nick" style="color:#6b8072"><a href="#162519" label="[16:25:19]">&lt;bauen1&gt;</a></span><span class="message">oh right</span></div><div class="line" id="224913"><span class="nick" style="color:#6c3d55"><a href="#224913" label="[22:49:13]">&lt;mihi&gt;</a></span><span class="message">Hello :)</span></div><div class="line" id="225002"><span class="nick" style="color:#6c3d55"><a href="#225002" label="[22:50:02]">&lt;mihi&gt;</a></span><span class="message">Did anyone before try to create a graph of source packages used to build build-dependencies of all Debian packages, and then run a cycle detector on it?</span></div><div class="line" id="225141"><span class="nick" style="color:#6c3d55"><a href="#225141" label="[22:51:41]">&lt;mihi&gt;</a></span><span class="message">I wanted to try, my first attempt of manually resolving build-depends only found 41 self-cycles, but running a perl script that parses &quot;apt-get -s build-depend&quot; for 1000 random packages found ~30 more. However, running apt-get -s build-depend on a package takes about 10-15 seconds, so I really don't want to run it for the 28000 remaining source packages...</span></div><div class="line" id="225232"><span class="nick" style="color:#6c3d55"><a href="#225232" label="[22:52:32]">&lt;mihi&gt;</a></span><span class="message">I understand that solving dependencies is &quot;hard&quot; (due to virtual packages, conflicts and version constraints), but is there really no easier way? (libapt-pkg-perl does not seem to expose this kind of action)</span></div><div class="line" id="225246"><span class="nick" style="color:#6c3d55"><a href="#225246" label="[22:52:46]">&lt;mihi&gt;</a></span><span class="message">maybe gforce_de1977 wants to try on his server farm :-P</span></div><div class="line" id="225343"><span class="nick" style="color:#6c3d55"><a href="#225343" label="[22:53:43]">&lt;mihi&gt;</a></span><span class="message">(next step would be to parse the output for packages that are not self-dependent and run some cycle checker algorithm on that. I assume that part would be orders of magnitude faster when using e.g. Tarjan's algorithm)</span></div><div class="line" id="225913"><span class="nick" style="color:#6c3d55"><a href="#225913" label="[22:59:13]">&lt;mihi&gt;</a></span><span class="message">My code so far is here: <a rel="nofollow" href="https://gist.github.com/schierlm/9695dd20e4f34bc5929b8b298888d76c">https://gist.github.com/schierlm/9695dd20e4f34bc5929b8b298888d76c</a> </span></div><div class="line" id="230630"><span class="nick" style="color:#6b8072"><a href="#230630" label="[23:06:30]">&lt;bauen1&gt;</a></span><span class="message">mihi: there's #debian-bootstrap on oftc, i was also thinking of how i can eventually tie in live-bootstrap to build debian from scratch</span></div><div class="line" id="230718"><span class="nick" style="color:#6b8072"><a href="#230718" label="[23:07:18]">&lt;bauen1&gt;</a></span><span class="message">mihi: i've also found <a rel="nofollow" href="https://wiki.debian.org/CircularBuildDependencies">https://wiki.debian.org/CircularBuildDependencies</a>  and <a rel="nofollow" href="https://wiki.debian.org/DependencyHell">https://wiki.debian.org/DependencyHell</a> </span></div><div class="line" id="231317"><span class="nick" style="color:#6c3d55"><a href="#231317" label="[23:13:17]">&lt;mihi&gt;</a></span><span class="message">bauen1: <a rel="nofollow" href="https://wiki.debian.org/CircularBuildDependencies">https://wiki.debian.org/CircularBuildDependencies</a>  suggests to run a script to find circular dependencies in essential packages. I am not sure how to interpret this. By definition, *all* packages build-depend on build-essential packages which are a superset of essential packages. So finding cycles within them is meaningless as there could be many more non-declared ones. I was interested in cycles in non-essential packages (to</span></div><div class="line" id="231317"><span class="nick" style="color:#6c3d55"><a href="#231317" label="[23:13:17]">&lt;mihi&gt;</a></span><span class="message">find obscure compilers and stuff that may need some bootstrapping)</span></div><div class="line" id="231401"><span class="nick" style="color:#6b8072"><a href="#231401" label="[23:14:01]">&lt;bauen1&gt;</a></span><span class="message">oh i over read half of what you where saying, i'm sorry</span></div><div class="line" id="231447"><span class="nick" style="color:#6c3d55"><a href="#231447" label="[23:14:47]">&lt;mihi&gt;</a></span><span class="message">so to build debian from scratch, in my opinion at least the 80 build-essential source packages need to be tried manually.</span></div><div class="line" id="231508"><span class="nick" style="color:#6b8072"><a href="#231508" label="[23:15:08]">&lt;bauen1&gt;</a></span><span class="message">i'm not sure how the information about source packages is distributed but dose-distcheck or similar tools parse it manually which should be *a lot* faster than invoking apt</span></div><div class="line" id="231625"><span class="nick" style="color:#6b8072"><a href="#231625" label="[23:16:25]">&lt;bauen1&gt;</a></span><span class="message">my idea for continueing from live-bootstrap to debian is to make the debian dependency graph non cyclic (e.g. by rewriting some packages) and to introduce some of the live-bootstrap pseudo packages as packages for the debian bootstrap</span></div><div class="line" id="231627"><span class="nick" style="color:#6c3d55"><a href="#231627" label="[23:16:27]">&lt;mihi&gt;</a></span><span class="message">I did a manual parse (using libapt-pkg-perl) by checking all concrete build-depends of a source package against package outputs of that source package. But that totally skipped virtual packages with more than one alternative and/or and package constraints</span></div><div class="line" id="231710"><span class="nick" style="color:#6c3d55"><a href="#231710" label="[23:17:10]">&lt;mihi&gt;</a></span><span class="message">and it seems that those are important in practice. bsdmainutils for example has no obvious build-deps on itself, but when running apt, it will install bsdmainutils to build bsdmainutils.</span></div><div class="line" id="231744"><span class="nick" style="color:#6b8072"><a href="#231744" label="[23:17:44]">&lt;bauen1&gt;</a></span><span class="message">mihi: it could also be faster to only use the unstable repo instead of buster + d-u + d-s</span></div><div class="line" id="231849"><span class="nick" style="color:#6c3d55"><a href="#231849" label="[23:18:49]">&lt;mihi&gt;</a></span><span class="message">I don't believe there are that many packages in d-u or d-s that are not inside main anyway. Only more recent versions. And about unstable - how much stuff is in there that FTBFS?</span></div><div class="line" id="232026"><span class="nick" style="color:#6b8072"><a href="#232026" label="[23:20:26]">&lt;bauen1&gt;</a></span><span class="message">mihi: it's more about eliminating duplicated packages, and generally removing things apt has to do</span></div><div class="line" id="232145"><span class="nick" style="color:#6c3d55"><a href="#232145" label="[23:21:45]">&lt;mihi&gt;</a></span><span class="message">even if it took 5 seconds per package instead of 10 or 15, it would run for more than 35 hours.</span></div><div class="line" id="232718"><span class="nick" style="color:#6b8072"><a href="#232718" label="[23:27:18]">&lt;bauen1&gt;</a></span><span class="message">so creating a graph of source packages and their build dependencies can probably be achieved by parsing the Sources manually, but you also want to do things properly (including virtual packages) and are hence using apt ?</span></div><div class="line" id="232934"><span class="nick" style="color:#6b8072"><a href="#232934" label="[23:29:34]">&lt;bauen1&gt;</a></span><span class="message">but yeah, the information you're trying to get would be very useful and maybe even exists somewhere ?</span></div><div class="line" id="233043"><span class="nick" style="color:#6b8072"><a href="#233043" label="[23:30:43]">&lt;bauen1&gt;</a></span><span class="message">or rather, i'd be very surprised if it didn't since you will hit this issue if you try to cross compile too</span></div><div class="line" id="233434"><span class="nick" style="color:#6c3d55"><a href="#233434" label="[23:34:34]">&lt;mihi&gt;</a></span><span class="message">yeah, I wanted to avoid reimplementing the whole solver logic for dependencies, running the risk that it would be even slower than apt (and buggier).</span></div><div class="line" id="233810"><span class="nick" style="color:#6c3d55"><a href="#233810" label="[23:38:10]">&lt;mihi&gt;</a></span><span class="message">your comment about cross compilation makes me remember that I ignored arch dependency completely. Arch:all packages (e.g compiled Java bytecode) could still create bootstrap loops but should not matter when cross-compiling.</span></div><div class="line" id="233813"><span class="nick" style="color:#6b8072"><a href="#233813" label="[23:38:13]">&lt;bauen1&gt;</a></span><span class="message">mihi: i'd really recommend you to talk to some of the cross compiling debian folks, i would think they already have the data that you're after (or at least know tools)</span></div><div class="line" id="235713"><span class="nick" style="color:#2e2a4a"><a href="#235713" label="[23:57:13]">&lt;stikonas&gt;</a></span><span class="message">well, at the moment debian doesn't even try to bootstrap openjdk via jamvm...</span></div><div class="line" id="235746"><span class="nick" style="color:#2e2a4a"><a href="#235746" label="[23:57:46]">&lt;stikonas&gt;</a></span><span class="message">and with jamvm you indeed have to be careful with compiled bytecode... jamvm tarball ships with it</span></div><div class="line" id="235815"><span class="nick" style="color:#2e2a4a"><a href="#235815" label="[23:58:15]">&lt;stikonas&gt;</a></span><span class="message">at some point I found that guix was not removing pre-compiled bytecode from jamvm, but luckily patch to fix that was one-liner</span></div><br /></div></body></html>