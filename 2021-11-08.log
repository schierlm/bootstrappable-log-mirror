<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-11-08.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="011441"><span class="nick" style="color:#8dd3c7"><a href="#011441" label="[01:14:41]">&lt;stikonas&gt;</a></span><span class="message">oriansj: can you also review <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/pull/30">https://github.com/oriansj/M2-Planet/pull/30</a>  ?</span></div><div class="line" id="011513"><span class="nick" style="color:#8dd3c7"><a href="#011513" label="[01:15:13]">&lt;stikonas&gt;</a></span><span class="message">it should add support to stuff like *a instead of having to use a[0]</span></div><div class="line" id="011530"><span class="nick" style="color:#8dd3c7"><a href="#011530" label="[01:15:30]">&lt;stikonas&gt;</a></span><span class="message">that's used quite a bit in mes</span></div><div class="line" id="012035"><span class="nick" style="color:#8dd3c7"><a href="#012035" label="[01:20:35]">&lt;stikonas&gt;</a></span><span class="message">hmm, although I think it only implements things like a = *b but not *a = b</span></div><div class="line" id="012043"><span class="nick" style="color:#2e2a4a"><a href="#012043" label="[01:20:43]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well *a isn't just a[0]; it is the FULL object so for a struct it might be a[0], a[1], a[2]...a[32]</span></div><div class="line" id="012113"><span class="nick" style="color:#8dd3c7"><a href="#012113" label="[01:21:13]">&lt;stikonas&gt;</a></span><span class="message">hmm...</span></div><div class="line" id="012124"><span class="nick" style="color:#2e2a4a"><a href="#012124" label="[01:21:24]">&lt;oriansj&gt;</a></span><span class="message">*a = *b is the full copying of an object</span></div><div class="line" id="012140"><span class="nick" style="color:#8dd3c7"><a href="#012140" label="[01:21:40]">&lt;stikonas&gt;</a></span><span class="message">oh indeed...</span></div><div class="line" id="012145"><span class="nick" style="color:#8dd3c7"><a href="#012145" label="[01:21:45]">&lt;stikonas&gt;</a></span><span class="message">ok, nevermind that PR then...</span></div><div class="line" id="012223"><span class="nick" style="color:#2e2a4a"><a href="#012223" label="[01:22:23]">&lt;oriansj&gt;</a></span><span class="message">I love the ambition</span></div><div class="line" id="012237"><span class="nick" style="color:#8dd3c7"><a href="#012237" label="[01:22:37]">&lt;stikonas&gt;</a></span><span class="message">well, I might be able to fix it but it needs more thought...</span></div><div class="line" id="012252"><span class="nick" style="color:#2e2a4a"><a href="#012252" label="[01:22:52]">&lt;oriansj&gt;</a></span><span class="message">well it is only used in mes.c garbage collection</span></div><div class="line" id="012308"><span class="nick" style="color:#8dd3c7"><a href="#012308" label="[01:23:08]">&lt;stikonas&gt;</a></span><span class="message">it's only used in mes libc</span></div><div class="line" id="012317"><span class="nick" style="color:#2e2a4a"><a href="#012317" label="[01:23:17]">&lt;oriansj&gt;</a></span><span class="message">so maybe we can convince janneke to remove its use from master</span></div><div class="line" id="012332"><span class="nick" style="color:#8dd3c7"><a href="#012332" label="[01:23:32]">&lt;stikonas&gt;</a></span><span class="message">well, that's what he did with mes-m2...</span></div><div class="line" id="012405"><span class="nick" style="color:#8dd3c7"><a href="#012405" label="[01:24:05]">&lt;stikonas&gt;</a></span><span class="message">but was mostly thinking about char* arrays...</span></div><div class="line" id="012407"><span class="nick" style="color:#2e2a4a"><a href="#012407" label="[01:24:07]">&lt;oriansj&gt;</a></span><span class="message">but didn't backport to master</span></div><div class="line" id="012425"><span class="nick" style="color:#8dd3c7"><a href="#012425" label="[01:24:25]">&lt;stikonas&gt;</a></span><span class="message">and in char* arrays *s means s[0]</span></div><div class="line" id="012451"><span class="nick" style="color:#2e2a4a"><a href="#012451" label="[01:24:51]">&lt;oriansj&gt;</a></span><span class="message">as it is only a single byte in size</span></div><div class="line" id="012527"><span class="nick" style="color:#2e2a4a"><a href="#012527" label="[01:25:27]">&lt;oriansj&gt;</a></span><span class="message">and multi-dimensional array test is now test0026 in M2-Planet</span></div><div class="line" id="012757"><span class="nick" style="color:#8dd3c7"><a href="#012757" label="[01:27:57]">&lt;stikonas&gt;</a></span><span class="message">ok, it passes here too</span></div><div class="line" id="012902"><span class="nick" style="color:#2e2a4a"><a href="#012902" label="[01:29:02]">&lt;oriansj&gt;</a></span><span class="message">and the 24 fuzz run has found 8 new unique crashes; so I'll debug and add some requires to catch them</span></div><div class="line" id="012912"><span class="nick" style="color:#2e2a4a"><a href="#012912" label="[01:29:12]">&lt;oriansj&gt;</a></span><span class="message">^24^24 hour^</span></div><div class="line" id="013325"><span class="nick" style="color:#8dd3c7"><a href="#013325" label="[01:33:25]">&lt;stikonas&gt;</a></span><span class="message">hmm 8 is quite a lot :(. But on the other hand, we do have quite a bit more of functionality</span></div><div class="line" id="013713"><span class="nick" style="color:#2e2a4a"><a href="#013713" label="[01:37:13]">&lt;oriansj&gt;</a></span><span class="message">actually 8 isn't bad at all for 24hours of fuzzing, it means only 1-2 places that need input validation</span></div><div class="line" id="013755"><span class="nick" style="color:#2e2a4a"><a href="#013755" label="[01:37:55]">&lt;oriansj&gt;</a></span><span class="message">trust me, when I started fuzzing 6K unique crashes in 30 seconds were not uncommon</span></div><div class="line" id="014544"><span class="nick" style="color:#2e2a4a"><a href="#014544" label="[01:45:44]">&lt;oriansj&gt;</a></span><span class="message">in this case, it only requires a single if(null == token) exception block</span></div><div class="line" id="014613"><span class="nick" style="color:#8dd3c7"><a href="#014613" label="[01:46:13]">&lt;stikonas&gt;</a></span><span class="message">hmm, my PR actually does seem to work on the right hand side of equality...</span></div><div class="line" id="014618"><span class="nick" style="color:#8dd3c7"><a href="#014618" label="[01:46:18]">&lt;stikonas&gt;</a></span><span class="message">(for dereferencing)</span></div><div class="line" id="014647"><span class="nick" style="color:#2e2a4a"><a href="#014647" label="[01:46:47]">&lt;oriansj&gt;</a></span><span class="message">well that is useful as a half-step</span></div><div class="line" id="014714"><span class="nick" style="color:#8dd3c7"><a href="#014714" label="[01:47:14]">&lt;stikonas&gt;</a></span><span class="message">yeah, but maybe will finish the rest before pushing</span></div><div class="line" id="014719"><span class="nick" style="color:#8dd3c7"><a href="#014719" label="[01:47:19]">&lt;stikonas&gt;</a></span><span class="message">otherwise it might be confusing</span></div><div class="line" id="014725"><span class="nick" style="color:#8dd3c7"><a href="#014725" label="[01:47:25]">&lt;stikonas&gt;</a></span><span class="message">but e.g this seems to work <a rel="nofollow" href="https://paste.debian.net/1218614/">https://paste.debian.net/1218614/</a> </span></div><div class="line" id="014728"><span class="nick" style="color:#8dd3c7"><a href="#014728" label="[01:47:28]">&lt;stikonas&gt;</a></span><span class="message">(prints test)</span></div><div class="line" id="014747"><span class="nick" style="color:#8dd3c7"><a href="#014747" label="[01:47:47]">&lt;stikonas&gt;</a></span><span class="message">not just &quot;t&quot;</span></div><div class="line" id="014938"><span class="nick" style="color:#2e2a4a"><a href="#014938" label="[01:49:38]">&lt;oriansj&gt;</a></span><span class="message">nice</span></div><div class="line" id="015053"><span class="nick" style="color:#2e2a4a"><a href="#015053" label="[01:50:53]">&lt;oriansj&gt;</a></span><span class="message">and solution for existing fuzz crashes up</span></div><div class="line" id="015112"><span class="nick" style="color:#2e2a4a"><a href="#015112" label="[01:51:12]">&lt;oriansj&gt;</a></span><span class="message">I'll start fuzzing the latest code paths</span></div><div class="line" id="015419"><span class="nick" style="color:#2e2a4a"><a href="#015419" label="[01:54:19]">&lt;oriansj&gt;</a></span><span class="message">(pointer happy code concerns me heavily when doing audits)</span></div><div class="line" id="015627"><span class="nick" style="color:#8dd3c7"><a href="#015627" label="[01:56:27]">&lt;stikonas&gt;</a></span><span class="message">yeah, that's definitely important...</span></div><div class="line" id="143933"><span class="nick" style="color:#6b8072"><a href="#143933" label="[14:39:33]">&lt;muurkha&gt;</a></span><span class="message">happy Frege's birthday</span></div><div class="line" id="180821"><span class="nick" style="color:#80b1d3"><a href="#180821" label="[18:08:21]">&lt;gbrlwck&gt;</a></span><span class="message">what makes 'include/mes/macros.h' tricky (mentioned here by stikons 2 days ago)? isn't preprocessing mostly just (literal) text replacement?</span></div><div class="line" id="181953"><span class="nick" style="color:#8dd3c7"><a href="#181953" label="[18:19:53]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: it's two things there, one is preprocessing (so somebody has to implement more advanced text replacement than what we have right now)</span></div><div class="line" id="182008"><span class="nick" style="color:#8dd3c7"><a href="#182008" label="[18:20:08]">&lt;stikonas&gt;</a></span><span class="message">and the other thing that needs implementing is '.' operator for struct members</span></div><div class="line" id="182019"><span class="nick" style="color:#8dd3c7"><a href="#182019" label="[18:20:19]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: it's definitely possible to do</span></div><div class="line" id="182115"><span class="nick">***</span><span class="message notice">wowaname is now known as opal</span></div><div class="line" id="182141"><span class="nick" style="color:#8dd3c7"><a href="#182141" label="[18:21:41]">&lt;stikonas&gt;</a></span><span class="message">maybe tricky is not the best word</span></div><div class="line" id="182206"><span class="nick" style="color:#8dd3c7"><a href="#182206" label="[18:22:06]">&lt;stikonas&gt;</a></span><span class="message">but it would probably need more code than some other features</span></div><div class="line" id="182246"><span class="nick" style="color:#8dd3c7"><a href="#182246" label="[18:22:46]">&lt;stikonas&gt;</a></span><span class="message">(e.g. *s syntax for pointers)</span></div><div class="line" id="182341"><span class="nick" style="color:#8dd3c7"><a href="#182341" label="[18:23:41]">&lt;stikonas&gt;</a></span><span class="message">so far, a lot of other features needed fairly small changes</span></div><div class="line" id="182431"><span class="nick" style="color:#8dd3c7"><a href="#182431" label="[18:24:31]">&lt;stikonas&gt;</a></span><span class="message">e.g. support for array of pointers (like char **argv) only needed 2 lines of code <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/commit/546cb1ac957cacfcc34a0e7b58f8e43d3392e417">https://github.com/oriansj/M2-Planet/commit/546cb1ac957cacfcc34a0e7b58f8e43d3392e417</a> </span></div><div class="line" id="182952"><span class="nick" style="color:#8dd3c7"><a href="#182952" label="[18:29:52]">&lt;stikonas&gt;</a></span><span class="message">having M2-Planet tests does make it less tricky, but maybe we first need to add more tests that check existing macro functionality</span></div><div class="line" id="183319"><span class="nick" style="color:#2e2a4a"><a href="#183319" label="[18:33:19]">&lt;oriansj&gt;</a></span><span class="message">well yes, it is best to add a test for behavior after adding that feature into M2-Planet, so that regressions are much more quickly found</span></div><div class="line" id="183349"><span class="nick" style="color:#2e2a4a"><a href="#183349" label="[18:33:49]">&lt;oriansj&gt;</a></span><span class="message">perhaps test driven development might be something worth investing in M2-Planet</span></div><div class="line" id="184638"><span class="nick" style="color:#8dd3c7"><a href="#184638" label="[18:46:38]">&lt;stikonas&gt;</a></span><span class="message">yes, perhaps I'll add tests too for that *s pointer feature</span></div><div class="line" id="184738"><span class="nick" style="color:#8dd3c7"><a href="#184738" label="[18:47:38]">&lt;stikonas&gt;</a></span><span class="message">and tests did help us to finish of cc_riscv64 and other risc-v stuff</span></div><div class="line" id="184750"><span class="nick" style="color:#8dd3c7"><a href="#184750" label="[18:47:50]">&lt;stikonas&gt;</a></span><span class="message">s/of/off/</span></div><div class="line" id="184811"><span class="nick" style="color:#8dd3c7"><a href="#184811" label="[18:48:11]">&lt;stikonas&gt;</a></span><span class="message">there were some minor issues before everything started working</span></div><div class="line" id="185933"><span class="nick" style="color:#8dd3c7"><a href="#185933" label="[18:59:33]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: defines are handled in <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/blob/master/cc_macro.c#L421">https://github.com/oriansj/M2-Planet/blob/master/cc_macro.c#L421</a> </span></div><div class="line" id="190005"><span class="nick" style="color:#8dd3c7"><a href="#190005" label="[19:00:05]">&lt;stikonas&gt;</a></span><span class="message">so basically here we need to somehow implement stuff those functions like #define A(x,y) x+y</span></div><div class="line" id="190018"><span class="nick" style="color:#8dd3c7"><a href="#190018" label="[19:00:18]">&lt;stikonas&gt;</a></span><span class="message">right now it's just litereal test replacement #define A a</span></div><div class="line" id="203154"><span class="nick" style="color:#80b1d3"><a href="#203154" label="[20:31:54]">&lt;gbrlwck&gt;</a></span><span class="message">what raises hex2's &quot;Target label _start is not valid&quot; ?</span></div><div class="line" id="203719"><span class="nick" style="color:#6d2462"><a href="#203719" label="[20:37:19]">&lt;stikonas[m]&gt;</a></span><span class="message">gbrlwck: missing label</span></div><div class="line" id="203808"><span class="nick" style="color:#6d2462"><a href="#203808" label="[20:38:08]">&lt;stikonas[m]&gt;</a></span><span class="message">I guess consequence of not including libc-full.M1</span></div><div class="line" id="204354"><span class="nick" style="color:#8dd3c7"><a href="#204354" label="[20:43:54]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: _start is the label specified in ELF header, that's the first label where kernel will jump after creating new process</span></div><div class="line" id="204437"><span class="nick" style="color:#8dd3c7"><a href="#204437" label="[20:44:37]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/M2libc/blob/main/riscv64/libc-full.M1">https://github.com/oriansj/M2libc/blob/main/riscv64/libc-full.M1</a> </span></div><div class="line" id="204533"><span class="nick" style="color:#8dd3c7"><a href="#204533" label="[20:45:33]">&lt;stikonas&gt;</a></span><span class="message">we do a bit of argc/argv/envp preparation there, initialize stdout/stdin/stderr jump to main() and on return from main() call SYS_exit syscall</span></div><div class="line" id="213015"><span class="nick" style="color:#80b1d3"><a href="#213015" label="[21:30:15]">&lt;gbrlwck&gt;</a></span><span class="message">thanks! so i need to tell mescc to include it.. <a rel="nofollow" href="https://termbin.com/7s4i">https://termbin.com/7s4i</a>  doesn't do the trick. any ideas?</span></div><div class="line" id="213627"><span class="nick" style="color:#8dd3c7"><a href="#213627" label="[21:36:27]">&lt;stikonas&gt;</a></span><span class="message">oh, mescc uses its own libc.M1</span></div><div class="line" id="213749"><span class="nick" style="color:#80b1d3"><a href="#213749" label="[21:37:49]">&lt;gbrlwck&gt;</a></span><span class="message">neither repo &quot;mes&quot; nor repo &quot;mes-m2&quot; seem to have such a file</span></div><div class="line" id="213833"><span class="nick" style="color:#8dd3c7"><a href="#213833" label="[21:38:33]">&lt;stikonas&gt;</a></span><span class="message">mes-m2 has ./lib/linux/riscv64-mes-m2/crt1.M1</span></div><div class="line" id="214130"><span class="nick" style="color:#8dd3c7"><a href="#214130" label="[21:41:30]">&lt;stikonas&gt;</a></span><span class="message">crt stands for C runtime</span></div><div class="line" id="214140"><span class="nick" style="color:#80b1d3"><a href="#214140" label="[21:41:40]">&lt;gbrlwck&gt;</a></span><span class="message">aha!</span></div><div class="line" id="214153"><span class="nick" style="color:#8dd3c7"><a href="#214153" label="[21:41:53]">&lt;stikonas&gt;</a></span><span class="message">gcc also uses something similar</span></div><div class="line" id="214628"><span class="nick" style="color:#80b1d3"><a href="#214628" label="[21:46:28]">&lt;gbrlwck&gt;</a></span><span class="message">but i guess this /should/ be included automatically?</span></div><div class="line" id="215345"><span class="nick" style="color:#8dd3c7"><a href="#215345" label="[21:53:45]">&lt;stikonas&gt;</a></span><span class="message">this one is m2 specific</span></div><div class="line" id="215350"><span class="nick" style="color:#8dd3c7"><a href="#215350" label="[21:53:50]">&lt;stikonas&gt;</a></span><span class="message">mescc wouldn't know about it</span></div><div class="line" id="215401"><span class="nick" style="color:#8dd3c7"><a href="#215401" label="[21:54:01]">&lt;stikonas&gt;</a></span><span class="message">it might be looking at riscv64-mes-mescc</span></div><div class="line" id="215403"><span class="nick" style="color:#8dd3c7"><a href="#215403" label="[21:54:03]">&lt;stikonas&gt;</a></span><span class="message">or something like that</span></div><div class="line" id="215436"><span class="nick" style="color:#8dd3c7"><a href="#215436" label="[21:54:36]">&lt;stikonas&gt;</a></span><span class="message">and contents might have to be a bit different</span></div><div class="line" id="215454"><span class="nick" style="color:#8dd3c7"><a href="#215454" label="[21:54:54]">&lt;stikonas&gt;</a></span><span class="message">different compiler might need somewhat different initialization</span></div><div class="line" id="215508"><span class="nick" style="color:#8dd3c7"><a href="#215508" label="[21:55:08]">&lt;stikonas&gt;</a></span><span class="message">(due to differences in calling convention)</span></div><div class="line" id="215604"><span class="nick" style="color:#8dd3c7"><a href="#215604" label="[21:56:04]">&lt;stikonas&gt;</a></span><span class="message">and wip-riscv branch <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/mes.git/tree/lib/riscv64-mes-mescc?h=wip-riscv">https://git.savannah.gnu.org/cgit/mes.git/tree/lib/riscv64-mes-mescc?h=wip-riscv</a>  does not have anything yet there</span></div><div class="line" id="215628"><span class="nick" style="color:#8dd3c7"><a href="#215628" label="[21:56:28]">&lt;stikonas&gt;</a></span><span class="message">porting crt is one of the more annoying things, since it's mostly assembly</span></div><div class="line" id="215647"><span class="nick" style="color:#8dd3c7"><a href="#215647" label="[21:56:47]">&lt;stikonas&gt;</a></span><span class="message">so you have to understand compiler calling convention</span></div><div class="line" id="215654"><span class="nick" style="color:#8dd3c7"><a href="#215654" label="[21:56:54]">&lt;stikonas&gt;</a></span><span class="message">and what preparation in needs</span></div><div class="line" id="215726"><span class="nick" style="color:#8dd3c7"><a href="#215726" label="[21:57:26]">&lt;stikonas&gt;</a></span><span class="message">at least there are a few examples in other arches</span></div><div class="line" id="215808"><span class="nick" style="color:#80b1d3"><a href="#215808" label="[21:58:08]">&lt;gbrlwck&gt;</a></span><span class="message">it doesn't look too bad</span></div><div class="line" id="215857"><span class="nick" style="color:#80b1d3"><a href="#215857" label="[21:58:57]">&lt;gbrlwck&gt;</a></span><span class="message">so i just have to port void longjump() and int setjmp() ?</span></div><div class="line" id="220020"><span class="nick" style="color:#80b1d3"><a href="#220020" label="[22:00:20]">&lt;gbrlwck&gt;</a></span><span class="message">and by &quot;compiler calling convention&quot; you mean how we save register states on the stack?</span></div><div class="line" id="222807"><span class="nick" style="color:#8dd3c7"><a href="#222807" label="[22:28:07]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: indeed, that's how we save registers on the stack and how function arguments are passed</span></div><div class="line" id="222900"><span class="nick" style="color:#8dd3c7"><a href="#222900" label="[22:29:00]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: those longjump and setjmp are kind of ported but with different M1 defs file (that's before we got that . thing in mescc-tools)</span></div><div class="line" id="222948"><span class="nick" style="color:#8dd3c7"><a href="#222948" label="[22:29:48]">&lt;stikonas&gt;</a></span><span class="message">other arches also have exit-42 <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/mes.git/tree/lib/x86_64-mes-mescc">https://git.savannah.gnu.org/cgit/mes.git/tree/lib/x86_64-mes-mescc</a> </span></div><div class="line" id="222953"><span class="nick" style="color:#8dd3c7"><a href="#222953" label="[22:29:53]">&lt;stikonas&gt;</a></span><span class="message">maybe you'll need it too</span></div><div class="line" id="222954"><span class="nick" style="color:#80b1d3"><a href="#222954" label="[22:29:54]">&lt;gbrlwck&gt;</a></span><span class="message">but shouldn't we use the M1defs file from M2libc?</span></div><div class="line" id="223018"><span class="nick" style="color:#8dd3c7"><a href="#223018" label="[22:30:18]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: M1defs file in M2libc is newer than that branch with attempted risc-v port of mes</span></div><div class="line" id="223020"><span class="nick" style="color:#80b1d3"><a href="#223020" label="[22:30:20]">&lt;gbrlwck&gt;</a></span><span class="message">stikonas: exit-42 is just &quot;RD_A0 !42 ADDI&quot; ;)</span></div><div class="line" id="223029"><span class="nick" style="color:#8dd3c7"><a href="#223029" label="[22:30:29]">&lt;stikonas&gt;</a></span><span class="message">now yes, we use M2libc file</span></div><div class="line" id="223044"><span class="nick" style="color:#80b1d3"><a href="#223044" label="[22:30:44]">&lt;gbrlwck&gt;</a></span><span class="message">yeah, i'm on a new/my own branch</span></div><div class="line" id="223113"><span class="nick" style="color:#8dd3c7"><a href="#223113" label="[22:31:13]">&lt;stikonas&gt;</a></span><span class="message">hnnm I'm trying to find where crt1 for mescc is</span></div><div class="line" id="223221"><span class="nick" style="color:#8dd3c7"><a href="#223221" label="[22:32:21]">&lt;stikonas&gt;</a></span><span class="message">ok, that's amd64 version <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/mes.git/tree/lib/linux/x86_64-mes-mescc">https://git.savannah.gnu.org/cgit/mes.git/tree/lib/linux/x86_64-mes-mescc</a> </span></div><div class="line" id="223246"><span class="nick" style="color:#8dd3c7"><a href="#223246" label="[22:32:46]">&lt;stikonas&gt;</a></span><span class="message">another copy of exit-42.S ...</span></div><div class="line" id="223249"><span class="nick" style="color:#8dd3c7"><a href="#223249" label="[22:32:49]">&lt;stikonas&gt;</a></span><span class="message">not sure why</span></div><div class="line" id="223315"><span class="nick" style="color:#80b1d3"><a href="#223315" label="[22:33:15]">&lt;gbrlwck&gt;</a></span><span class="message">for good luck</span></div><div class="line" id="223345"><span class="nick" style="color:#8dd3c7"><a href="#223345" label="[22:33:45]">&lt;stikonas&gt;</a></span><span class="message">so _start is in crt1.c although that's really and assembly file</span></div><div class="line" id="223349"><span class="nick" style="color:#8dd3c7"><a href="#223349" label="[22:33:49]">&lt;stikonas&gt;</a></span><span class="message">despite .c extension...</span></div><div class="line" id="223355"><span class="nick" style="color:#8dd3c7"><a href="#223355" label="[22:33:55]">&lt;stikonas&gt;</a></span><span class="message">everything inside is inline assembly</span></div><div class="line" id="223433"><span class="nick" style="color:#8dd3c7"><a href="#223433" label="[22:34:33]">&lt;stikonas&gt;</a></span><span class="message">probably that's simpled with mescc than to specify an external assembly file like we did with M2-Planet</span></div><div class="line" id="223659"><span class="nick" style="color:#80b1d3"><a href="#223659" label="[22:36:59]">&lt;gbrlwck&gt;</a></span><span class="message">?</span></div><div class="line" id="223939"><span class="nick" style="color:#80b1d3"><a href="#223939" label="[22:39:39]">&lt;gbrlwck&gt;</a></span><span class="message">stikonas: i didn't understand what you meant with your last statement</span></div><div class="line" id="231900"><span class="nick" style="color:#8dd3c7"><a href="#231900" label="[23:19:00]">&lt;stikonas&gt;</a></span><span class="message">I meant that's why mescc crt1 file is in .c file with inline assembly rather than in M1 file</span></div><div class="line" id="232019"><span class="nick" style="color:#80b1d3"><a href="#232019" label="[23:20:19]">&lt;gbrlwck&gt;</a></span><span class="message">ah, yes :) makes sense</span></div><br /></div></body></html>