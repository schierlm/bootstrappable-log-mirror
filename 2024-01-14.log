<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2024-01-14.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="010912"><span class="nick" style="color:#389600"><a href="#010912" label="[01:09:12]">&lt;lrvick&gt;</a></span><span class="message">Okay, it is failing because it tries to overwrite /etc/resolv.conf to 1.1.1.1.</span></div><div class="line" id="010929"><span class="nick" style="color:#389600"><a href="#010929" label="[01:09:29]">&lt;lrvick&gt;</a></span><span class="message">No internet access should be happening within this build, so I am unsure why</span></div><div class="line" id="010941"><span class="nick" style="color:#389600"><a href="#010941" label="[01:09:41]">&lt;lrvick&gt;</a></span><span class="message"> <a rel="nofollow" href="https://dpaste.org/pNsZC">https://dpaste.org/pNsZC</a> </span></div><div class="line" id="011005"><span class="nick" style="color:#389600"><a href="#011005" label="[01:10:05]">&lt;lrvick&gt;</a></span><span class="message">/etc/resolv.conf is immutable within docker so this should fail, but I don't know why it is happening at all</span></div><div class="line" id="011051"><span class="nick" style="color:#8dd3c7"><a href="#011051" label="[01:10:51]">&lt;fossy&gt;</a></span><span class="message">ah; etc/resolv.conf is changed for the mode where --external-sources is not used, and so we need etc/resolv.conf for when we download distfiles within the live-bootstrap environment later on (but obviously, you are not doing that)</span></div><div class="line" id="011317"><span class="nick" style="color:#8dd3c7"><a href="#011317" label="[01:13:17]">&lt;fossy&gt;</a></span><span class="message">ummm</span></div><div class="line" id="011428"><span class="nick" style="color:#8dd3c7"><a href="#011428" label="[01:14:28]">&lt;fossy&gt;</a></span><span class="message">best way to fix this is probably to pass through EXTERNAL_SOURCES into bootstrap.cfg and put the addition of resolv.conf in a conditional</span></div><div class="line" id="011747"><span class="nick" style="color:#8dd3c7"><a href="#011747" label="[01:17:47]">&lt;fossy&gt;</a></span><span class="message">lrvick: give this patch a go? <a rel="nofollow" href="https://0x0.st/HUm6.diff">https://0x0.st/HUm6.diff</a> </span></div><div class="line" id="011753"><span class="nick" style="color:#8dd3c7"><a href="#011753" label="[01:17:53]">&lt;fossy&gt;</a></span><span class="message">untested but its pretty simple</span></div><div class="line" id="021458"><span class="nick" style="color:#2e2a4a"><a href="#021458" label="[02:14:58]">&lt;stikonas&gt;</a></span><span class="message">hmm, kaem uses more memory than I expected...</span></div><div class="line" id="021516"><span class="nick" style="color:#2e2a4a"><a href="#021516" label="[02:15:16]">&lt;stikonas&gt;</a></span><span class="message">running mescc-tools-mini-kaem file ends up using about 10 MiB of RAM</span></div><div class="line" id="021545"><span class="nick" style="color:#2e2a4a"><a href="#021545" label="[02:15:45]">&lt;stikonas&gt;</a></span><span class="message">hmm, I guess we reserve long buffers to store commands and their args</span></div><div class="line" id="023539"><span class="nick" style="color:#389600"><a href="#023539" label="[02:35:39]">&lt;lrvick&gt;</a></span><span class="message">giving it a shot now. fossy == fosslinux for the git --author?</span></div><div class="line" id="023555"><span class="nick" style="color:#389600"><a href="#023555" label="[02:35:55]">&lt;lrvick&gt;</a></span><span class="message">seems reasonable to just make that configurable</span></div><div class="line" id="094654"><span class="nick" style="color:#389600"><a href="#094654" label="[09:46:54]">&lt;lrvick&gt;</a></span><span class="message">live-bootstrap building with --docker now working in my branch. Will make a PR if there is any interest.</span></div><div class="line" id="094739"><span class="nick" style="color:#389600"><a href="#094739" label="[09:47:39]">&lt;lrvick&gt;</a></span><span class="message">For my own use case I will want to build the seeds myself and inject them, and avoid using the python script, but this will be a good baseline control if nothing else.</span></div><div class="line" id="095541"><span class="nick" style="color:#8dd3c7"><a href="#095541" label="[09:55:41]">&lt;fossy&gt;</a></span><span class="message">lrvick: sure</span></div><div class="line" id="095615"><span class="nick" style="color:#8dd3c7"><a href="#095615" label="[09:56:15]">&lt;fossy&gt;</a></span><span class="message">lrvick: it would be nice to have. the more environments it works on, the greater robustness that the project has (usually) (unless its a dumb environment, but docker isnt)_</span></div><div class="line" id="122507"><span class="nick" style="color:#2e2a4a"><a href="#122507" label="[12:25:07]">&lt;stikonas&gt;</a></span><span class="message">ok, I think I know why kaem misbehaves with exit codes...</span></div><div class="line" id="122529"><span class="nick" style="color:#2e2a4a"><a href="#122529" label="[12:25:29]">&lt;stikonas&gt;</a></span><span class="message">it's probably because I didn't bother making a duplicate of program code itself when forking</span></div><div class="line" id="122541"><span class="nick" style="color:#2e2a4a"><a href="#122541" label="[12:25:41]">&lt;stikonas&gt;</a></span><span class="message">which wouldn't matter if it only runs execve</span></div><div class="line" id="122548"><span class="nick" style="color:#2e2a4a"><a href="#122548" label="[12:25:48]">&lt;stikonas&gt;</a></span><span class="message">but kaem does more between forking and execve</span></div><div class="line" id="122617"><span class="nick" style="color:#2e2a4a"><a href="#122617" label="[12:26:17]">&lt;stikonas&gt;</a></span><span class="message">so global variables and in particular malloc linked list gets corrupted</span></div><div class="line" id="125146"><span class="nick" style="color:#2e2a4a"><a href="#125146" label="[12:51:46]">&lt;stikonas&gt;</a></span><span class="message">and the fix is up</span></div><div class="line" id="125215"><span class="nick" style="color:#2e2a4a"><a href="#125215" label="[12:52:15]">&lt;stikonas&gt;</a></span><span class="message">now it gets stuck somewhere in M2-Mesoplanet when building mescc-tools-extra...</span></div><div class="line" id="130642"><span class="nick" style="color:#2e2a4a"><a href="#130642" label="[13:06:42]">&lt;stikonas&gt;</a></span><span class="message">in the meantime I think my last commit fixed mes-m2</span></div><div class="line" id="130654"><span class="nick" style="color:#2e2a4a"><a href="#130654" label="[13:06:54]">&lt;stikonas&gt;</a></span><span class="message">it now sucessfully ran mescc to on crt1.c</span></div><div class="line" id="134619"><span class="nick" style="color:#2e2a4a"><a href="#134619" label="[13:46:19]">&lt;stikonas&gt;</a></span><span class="message">and M2-Mesoplanet hang fixed too... so posix-runner now can run stage0-posix (minus kaem-optional-seed)</span></div><div class="line" id="134644"><span class="nick" style="color:#2e2a4a"><a href="#134644" label="[13:46:44]">&lt;stikonas&gt;</a></span><span class="message">and mescc runs for a while, though somehow lib/mes/assert_msg.c failed to build after 20 or so other files built</span></div><div class="line" id="134655"><span class="nick" style="color:#2e2a4a"><a href="#134655" label="[13:46:55]">&lt;stikonas&gt;</a></span><span class="message">maybe I should retry with my latest fix that fixed M2-Mesoplanet...</span></div><div class="line" id="140926"><span class="nick" style="color:#2e2a4a"><a href="#140926" label="[14:09:26]">&lt;stikonas&gt;</a></span><span class="message">hmm, that file does build if I build it first</span></div><div class="line" id="141017"><span class="nick" style="color:#2e2a4a"><a href="#141017" label="[14:10:17]">&lt;stikonas&gt;</a></span><span class="message">rickmasters did mention that mes does some strange things file files being opened multiple times... So maybe it's that</span></div><div class="line" id="151333"><span class="nick" style="color:#2e2a4a"><a href="#151333" label="[15:13:33]">&lt;stikonas&gt;</a></span><span class="message">ok, with some small hack that still needs investigation I managed to use  mes-m2 to build mes on UEFI/x86_64 (hack was restartign mesclibc build from the point of previous failure, so needed a few runs to build all of it)</span></div><div class="line" id="151359"><span class="nick" style="color:#2e2a4a"><a href="#151359" label="[15:13:59]">&lt;stikonas&gt;</a></span><span class="message">mes itself doesn't run at all, probably because mescc emits non position independent code on x86_64...</span></div><div class="line" id="151437"><span class="nick" style="color:#2e2a4a"><a href="#151437" label="[15:14:37]">&lt;stikonas&gt;</a></span><span class="message">(though the same binary runs fine back on Linux)</span></div><div class="line" id="152110"><span class="nick" style="color:#2e2a4a"><a href="#152110" label="[15:21:10]">&lt;stikonas&gt;</a></span><span class="message">janneke: I think we need to fix it on mes side</span></div><div class="line" id="152132"><span class="nick" style="color:#2e2a4a"><a href="#152132" label="[15:21:32]">&lt;stikonas&gt;</a></span><span class="message">if we want it to run using posix-runner kernel</span></div><div class="line" id="152400"><span class="nick" style="color:#2e2a4a"><a href="#152400" label="[15:24:00]">&lt;stikonas&gt;</a></span><span class="message">(should be easier than trying to figure out how to setup virtual memory and page mappings...)</span></div><div class="line" id="152621"><span class="nick" style="color:#6b8072"><a href="#152621" label="[15:26:21]">&lt;janneke&gt;</a></span><span class="message">stikonas: how is mescc's code position-dependent, don't addresses get filled-in only at the hex2 stage?</span></div><div class="line" id="152659"><span class="nick" style="color:#6b8072"><a href="#152659" label="[15:26:59]">&lt;janneke&gt;</a></span><span class="message">(not that patching mescc would be problematic, just curious)</span></div><div class="line" id="153008"><span class="nick" style="color:#2e2a4a"><a href="#153008" label="[15:30:08]">&lt;stikonas&gt;</a></span><span class="message">janneke: addresses are filled in hex2, but some of them are relative to base address</span></div><div class="line" id="153017"><span class="nick" style="color:#2e2a4a"><a href="#153017" label="[15:30:17]">&lt;stikonas&gt;</a></span><span class="message">so the binary has to be loaded at base address</span></div><div class="line" id="153130"><span class="nick" style="color:#2e2a4a"><a href="#153130" label="[15:31:30]">&lt;stikonas&gt;</a></span><span class="message">the way posix-runner works is it asks for some memory from UEFI (basically malloc) and it will get some segment but we have no control over where it will be</span></div><div class="line" id="153157"><span class="nick" style="color:#2e2a4a"><a href="#153157" label="[15:31:57]">&lt;stikonas&gt;</a></span><span class="message">so e.g. mes might be compiled with --base-address 0x08048000</span></div><div class="line" id="153227"><span class="nick" style="color:#2e2a4a"><a href="#153227" label="[15:32:27]">&lt;stikonas&gt;</a></span><span class="message">so let's say some label (global variable) might be say at 0x08148000</span></div><div class="line" id="153258"><span class="nick" style="color:#2e2a4a"><a href="#153258" label="[15:32:58]">&lt;stikonas&gt;</a></span><span class="message">and mes would have something like mov rax, 0x08148000</span></div><div class="line" id="153355"><span class="nick" style="color:#2e2a4a"><a href="#153355" label="[15:33:55]">&lt;stikonas&gt;</a></span><span class="message">but we can only load the binary at &quot;random&quot; address that we got allocated, it could be 0x12345678</span></div><div class="line" id="153417"><span class="nick" style="color:#6b8072"><a href="#153417" label="[15:34:17]">&lt;janneke&gt;</a></span><span class="message">oh my</span></div><div class="line" id="153421"><span class="nick" style="color:#2e2a4a"><a href="#153421" label="[15:34:21]">&lt;stikonas&gt;</a></span><span class="message">so the real address of that global variable would be 0x12445678</span></div><div class="line" id="153434"><span class="nick" style="color:#2e2a4a"><a href="#153434" label="[15:34:34]">&lt;stikonas&gt;</a></span><span class="message">Linux kernel solves this by using Virtual addresses and MMU</span></div><div class="line" id="153448"><span class="nick" style="color:#6b8072"><a href="#153448" label="[15:34:48]">&lt;janneke&gt;</a></span><span class="message">yeah</span></div><div class="line" id="153523"><span class="nick" style="color:#2e2a4a"><a href="#153523" label="[15:35:23]">&lt;stikonas&gt;</a></span><span class="message">what M2-Planet now does (since maybe a year or 2 ago) is rather than using absolute addresses</span></div><div class="line" id="153538"><span class="nick" style="color:#2e2a4a"><a href="#153538" label="[15:35:38]">&lt;stikonas&gt;</a></span><span class="message">it loads stuff relative to instruction pointer</span></div><div class="line" id="153620"><span class="nick" style="color:#2e2a4a"><a href="#153620" label="[15:36:20]">&lt;stikonas&gt;</a></span><span class="message">so mov_rax, &amp;label becomes  lea_rax,[rip+DWORD] %label</span></div><div class="line" id="153659"><span class="nick" style="color:#2e2a4a"><a href="#153659" label="[15:36:59]">&lt;stikonas&gt;</a></span><span class="message">and that number is then no longer absolute address (&amp;) but is relative address (%)</span></div><div class="line" id="153726"><span class="nick" style="color:#2e2a4a"><a href="#153726" label="[15:37:26]">&lt;stikonas&gt;</a></span><span class="message">I guess in normal assembly it is &quot;lea rax, [rip+label]&quot;</span></div><div class="line" id="153814"><span class="nick" style="color:#2e2a4a"><a href="#153814" label="[15:38:14]">&lt;stikonas&gt;</a></span><span class="message">which should be easy enough to make</span></div><div class="line" id="153845"><span class="nick" style="color:#2e2a4a"><a href="#153845" label="[15:38:45]">&lt;stikonas&gt;</a></span><span class="message">(assuming I can find out all the places where it is emitted)</span></div><div class="line" id="153855"><span class="nick" style="color:#2e2a4a"><a href="#153855" label="[15:38:55]">&lt;stikonas&gt;</a></span><span class="message">I guess mostly in x86_64/as.scm</span></div><div class="line" id="160441"><span class="nick" style="color:#2e2a4a"><a href="#160441" label="[16:04:41]">&lt;stikonas&gt;</a></span><span class="message">hmm, just found <a rel="nofollow" href="https://blog.llandsmeer.com/tech/2019/07/21/uefi-x64-userland.html">https://blog.llandsmeer.com/tech/2019/07/21/uefi-x64-userland.html</a> </span></div><div class="line" id="160458"><span class="nick" style="color:#2e2a4a"><a href="#160458" label="[16:04:58]">&lt;stikonas&gt;</a></span><span class="message">maybe I could try to implement some paging...</span></div><div class="line" id="160504"><span class="nick" style="color:#2e2a4a"><a href="#160504" label="[16:05:04]">&lt;stikonas&gt;</a></span><span class="message">rather than make changes to mes...</span></div><div class="line" id="160506"><span class="nick" style="color:#2e2a4a"><a href="#160506" label="[16:05:06]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="160646"><span class="nick" style="color:#2e2a4a"><a href="#160646" label="[16:06:46]">&lt;stikonas&gt;</a></span><span class="message">sounds like it might be doable...</span></div><div class="line" id="192454"><span class="nick" style="color:#389600"><a href="#192454" label="[19:24:54]">&lt;lrvick&gt;</a></span><span class="message">Okay just did two back to back container builds from 0 on two different systems and afaict the only non-deterministic thing is the /usr/lib/python3.8/__pycache__ folder which I assume I can just nuke safely.</span></div><div class="line" id="202718"><span class="nick" style="color:#80b1d3"><a href="#202718" label="[20:27:18]">&lt;vagrantc&gt;</a></span><span class="message">janneke: oh, mes was removed from debian testing due to failing to build on armhf :(</span></div><div class="line" id="202732"><span class="nick" style="color:#80b1d3"><a href="#202732" label="[20:27:32]">&lt;vagrantc&gt;</a></span><span class="message">i kept meaning to write to bug-mes but ... well ... here we are ...</span></div><div class="line" id="202751"><span class="nick" style="color:#80b1d3"><a href="#202751" label="[20:27:51]">&lt;vagrantc&gt;</a></span><span class="message">since 0.25 it has been segfaulting</span></div><div class="line" id="202803"><span class="nick" style="color:#6b8072"><a href="#202803" label="[20:28:03]">&lt;janneke&gt;</a></span><span class="message">vagrantc: how sad :(</span></div><div class="line" id="202825"><span class="nick" style="color:#6b8072"><a href="#202825" label="[20:28:25]">&lt;janneke&gt;</a></span><span class="message">have you checked 0.25.1 yet?</span></div><div class="line" id="202844"><span class="nick" style="color:#80b1d3"><a href="#202844" label="[20:28:44]">&lt;vagrantc&gt;</a></span><span class="message">same issue with 0.26 ... not sure if i checked 0.25.x</span></div><div class="line" id="202848"><span class="nick" style="color:#2e2a4a"><a href="#202848" label="[20:28:48]">&lt;stikonas&gt;</a></span><span class="message">well, that's just testing?</span></div><div class="line" id="202855"><span class="nick" style="color:#2e2a4a"><a href="#202855" label="[20:28:55]">&lt;stikonas&gt;</a></span><span class="message">it's still in unstable, isn't it?</span></div><div class="line" id="202901"><span class="nick" style="color:#80b1d3"><a href="#202901" label="[20:29:01]">&lt;vagrantc&gt;</a></span><span class="message"> <a rel="nofollow" href="https://buildd.debian.org/status/logs.php?pkg=mes&amp;arch=armhf">https://buildd.debian.org/status/logs.php?pkg=mes&amp;arch=armhf</a> </span></div><div class="line" id="202903"><span class="nick" style="color:#2e2a4a"><a href="#202903" label="[20:29:03]">&lt;stikonas&gt;</a></span><span class="message">so if it gets fixed, it will be automatically reinstated?</span></div><div class="line" id="202905"><span class="nick" style="color:#80b1d3"><a href="#202905" label="[20:29:05]">&lt;vagrantc&gt;</a></span><span class="message">stikonas: yes</span></div><div class="line" id="202920"><span class="nick" style="color:#2e2a4a"><a href="#202920" label="[20:29:20]">&lt;stikonas&gt;</a></span><span class="message">mes 0.26 is very slow though...</span></div><div class="line" id="202928"><span class="nick" style="color:#2e2a4a"><a href="#202928" label="[20:29:28]">&lt;stikonas&gt;</a></span><span class="message">we need a new release :)</span></div><div class="line" id="203013"><span class="nick" style="color:#80b1d3"><a href="#203013" label="[20:30:13]">&lt;vagrantc&gt;</a></span><span class="message">i also have some packaging of m2-planet which maybe i should upload to debian as well</span></div><div class="line" id="203016"><span class="nick" style="color:#6b8072"><a href="#203016" label="[20:30:16]">&lt;janneke&gt;</a></span><span class="message">yeah...but we might need an armhf patch before we release?</span></div><div class="line" id="203054"><span class="nick" style="color:#6b8072"><a href="#203054" label="[20:30:54]">&lt;janneke&gt;</a></span><span class="message">i haven't checked if 0.25.1 builds with armhf, but if 0.26 doesn't...</span></div><div class="line" id="203113"><span class="nick" style="color:#80b1d3"><a href="#203113" label="[20:31:13]">&lt;vagrantc&gt;</a></span><span class="message">riscv64 &quot;just&quot; has a single test suite failure</span></div><div class="line" id="203114"><span class="nick" style="color:#6b8072"><a href="#203114" label="[20:31:14]">&lt;janneke&gt;</a></span><span class="message">there's nothing arm specific in 0.25..0.25.1...0.26</span></div><div class="line" id="203133"><span class="nick" style="color:#80b1d3"><a href="#203133" label="[20:31:33]">&lt;vagrantc&gt;</a></span><span class="message">oops, two test failures</span></div><div class="line" id="203152"><span class="nick" style="color:#80b1d3"><a href="#203152" label="[20:31:52]">&lt;vagrantc&gt;</a></span><span class="message">so it seems gcc builds of mes are now the obscure codepaths :)</span></div><div class="line" id="203307"><span class="nick" style="color:#80b1d3"><a href="#203307" label="[20:33:07]">&lt;vagrantc&gt;</a></span><span class="message">janneke: i'll follow-up to bug-mes with links and whatnot</span></div><div class="line" id="203410"><span class="nick" style="color:#6b8072"><a href="#203410" label="[20:34:10]">&lt;janneke&gt;</a></span><span class="message">hmm, more and more codepaths...</span></div><div class="line" id="203412"><span class="nick" style="color:#6b8072"><a href="#203412" label="[20:34:12]">&lt;janneke&gt;</a></span><span class="message">:(</span></div><div class="line" id="203431"><span class="nick" style="color:#6b8072"><a href="#203431" label="[20:34:31]">&lt;janneke&gt;</a></span><span class="message">vagrantc: thanks, i'll have a look at the arm segfault</span></div><div class="line" id="203433"><span class="nick" style="color:#80b1d3"><a href="#203433" label="[20:34:33]">&lt;vagrantc&gt;</a></span><span class="message">it might also be perfectly valid to abaondon some codepaths</span></div><div class="line" id="203707"><span class="nick" style="color:#2e2a4a"><a href="#203707" label="[20:37:07]">&lt;stikonas&gt;</a></span><span class="message">well, arm might at some point be replaced with aarch64...</span></div><div class="line" id="203715"><span class="nick" style="color:#2e2a4a"><a href="#203715" label="[20:37:15]">&lt;stikonas&gt;</a></span><span class="message">arm32 is not gaining any popularity</span></div><div class="line" id="204446"><span class="nick" style="color:#80b1d3"><a href="#204446" label="[20:44:46]">&lt;vagrantc&gt;</a></span><span class="message">maybe first you need aarch64 port? :)</span></div><div class="line" id="204533"><span class="nick" style="color:#2e2a4a"><a href="#204533" label="[20:45:33]">&lt;stikonas&gt;</a></span><span class="message">well, somebody was working on it...</span></div><div class="line" id="204548"><span class="nick" style="color:#2e2a4a"><a href="#204548" label="[20:45:48]">&lt;stikonas&gt;</a></span><span class="message">well, stage0-posix only has aarch64 port and no armv7 port</span></div><div class="line" id="204621"><span class="nick" style="color:#80b1d3"><a href="#204621" label="[20:46:21]">&lt;vagrantc&gt;</a></span><span class="message">wheee!</span></div><div class="line" id="204715"><span class="nick" style="color:#2e2a4a"><a href="#204715" label="[20:47:15]">&lt;stikonas&gt;</a></span><span class="message">and full bootstrap is only working on x86 :)</span></div><div class="line" id="204722"><span class="nick" style="color:#80b1d3"><a href="#204722" label="[20:47:22]">&lt;vagrantc&gt;</a></span><span class="message">but yeah, unlike x86, it is not reasonable to assume you can first build the &quot;simpler&quot; arm32 and then use that to bootstrap up to arm64, as not all arm64 capable processors support arm32</span></div><div class="line" id="204747"><span class="nick" style="color:#80b1d3"><a href="#204747" label="[20:47:47]">&lt;vagrantc&gt;</a></span><span class="message">same with riscv64, if anyone is crazy enough to try riscv32 :)</span></div><div class="line" id="204910"><span class="nick" style="color:#2e2a4a"><a href="#204910" label="[20:49:10]">&lt;stikonas&gt;</a></span><span class="message">well, we have stage0-posix-riscv32</span></div><div class="line" id="204919"><span class="nick" style="color:#2e2a4a"><a href="#204919" label="[20:49:19]">&lt;stikonas&gt;</a></span><span class="message">but at the very least it doesn't run on visionfive2</span></div><div class="line" id="204923"><span class="nick" style="color:#2e2a4a"><a href="#204923" label="[20:49:23]">&lt;stikonas&gt;</a></span><span class="message">only runs on qemu...</span></div><br /></div></body></html>