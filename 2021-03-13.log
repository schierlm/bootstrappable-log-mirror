<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-03-13.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="003342"><span class="nick" style="color:#8dd3c7"><a href="#003342" label="[00:33:42]">&lt;OriansJ&gt;</a></span><span class="message">but perhaps that is just my hope to eliminate perl and autotools from the bootstrap path because none of that belongs in an environment where you know what you have and will get anything you need ahead of time.</span></div><div class="line" id="003450"><span class="nick" style="color:#2e2a4a"><a href="#003450" label="[00:34:50]">&lt;stikonas&gt;</a></span><span class="message">well, perhaps somebody can just write makefiles for binutils and gcc...</span></div><div class="line" id="003516"><span class="nick" style="color:#2e2a4a"><a href="#003516" label="[00:35:16]">&lt;stikonas&gt;</a></span><span class="message">although, at some point you probably still want to bootstrap perl...</span></div><div class="line" id="003533"><span class="nick" style="color:#2e2a4a"><a href="#003533" label="[00:35:33]">&lt;stikonas&gt;</a></span><span class="message">it's still a reasonably widely used language</span></div><div class="line" id="003548"><span class="nick" style="color:#8dd3c7"><a href="#003548" label="[00:35:48]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: I figure dealing with it with GCC and Guix would be less work for us long term.</span></div><div class="line" id="003604"><span class="nick" style="color:#2e2a4a"><a href="#003604" label="[00:36:04]">&lt;stikonas&gt;</a></span><span class="message">maybe a bit less...</span></div><div class="line" id="003630"><span class="nick" style="color:#2e2a4a"><a href="#003630" label="[00:36:30]">&lt;stikonas&gt;</a></span><span class="message">although, I found perl work easier than bootstrapping bison...</span></div><div class="line" id="003647"><span class="nick" style="color:#2e2a4a"><a href="#003647" label="[00:36:47]">&lt;stikonas&gt;</a></span><span class="message">(I guess because bison needed musl and libc's are trickier)</span></div><div class="line" id="003837"><span class="nick" style="color:#8dd3c7"><a href="#003837" label="[00:38:37]">&lt;OriansJ&gt;</a></span><span class="message">or because Bison Devs assumed glibc and were lazier</span></div><div class="line" id="004246"><span class="nick" style="color:#8dd3c7"><a href="#004246" label="[00:42:46]">&lt;OriansJ&gt;</a></span><span class="message">or IBM paid some devs to get Perl working on AIX with their wackjob libc which had knock on effects</span></div><div class="line" id="004438"><span class="nick" style="color:#8dd3c7"><a href="#004438" label="[00:44:38]">&lt;OriansJ&gt;</a></span><span class="message">or maybe janneke never looked at building bison and skipeed the handful of functions needed in meslibc to solve it without having to do musl</span></div><div class="line" id="004526"><span class="nick" style="color:#8dd3c7"><a href="#004526" label="[00:45:26]">&lt;OriansJ&gt;</a></span><span class="message">As creating a minimal libc is trivial</span></div><div class="line" id="004618"><span class="nick" style="color:#8dd3c7"><a href="#004618" label="[00:46:18]">&lt;OriansJ&gt;</a></span><span class="message">but a full C89 libc is a shitload of functions</span></div><div class="line" id="004701"><span class="nick" style="color:#2e2a4a"><a href="#004701" label="[00:47:01]">&lt;stikonas&gt;</a></span><span class="message">well, yeah, I understand the reasoning for mes libc...</span></div><div class="line" id="004701"><span class="nick" style="color:#8dd3c7"><a href="#004701" label="[00:47:01]">&lt;OriansJ&gt;</a></span><span class="message">not sure if English or Metric shitload but it is enough to choke a llama</span></div><div class="line" id="004727"><span class="nick" style="color:#2e2a4a"><a href="#004727" label="[00:47:27]">&lt;stikonas&gt;</a></span><span class="message">it's mostly metric system here in England.... Appart from miles...</span></div><div class="line" id="004803"><span class="nick" style="color:#2e2a4a"><a href="#004803" label="[00:48:03]">&lt;stikonas&gt;</a></span><span class="message">fossy: this is now with green tick <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/61">https://github.com/fosslinux/live-bootstrap/pull/61</a> </span></div><div class="line" id="004805"><span class="nick" style="color:#8dd3c7"><a href="#004805" label="[00:48:05]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: sometimes referred as imperial units</span></div><div class="line" id="004834"><span class="nick" style="color:#2e2a4a"><a href="#004834" label="[00:48:34]">&lt;stikonas&gt;</a></span><span class="message">fossy: just minor changes to address your review comments</span></div><div class="line" id="004902"><span class="nick" style="color:#2e2a4a"><a href="#004902" label="[00:49:02]">&lt;stikonas&gt;</a></span><span class="message">I guess in US they use imperial units more...</span></div><div class="line" id="005057"><span class="nick" style="color:#8dd3c7"><a href="#005057" label="[00:50:57]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: yes with our 2liter Colas and 1KG heart-attack burgers; nothing but Imperial units</span></div><div class="line" id="005353"><span class="nick" style="color:#8dd3c7"><a href="#005353" label="[00:53:53]">&lt;OriansJ&gt;</a></span><span class="message">it kinda depends on the industry but more often than not newer things use metric units but older things use imperial units because there are costs in changing things.</span></div><div class="line" id="005434"><span class="nick" style="color:#6b8072"><a href="#005434" label="[00:54:34]">&lt;fossy&gt;</a></span><span class="message">well janneke has expressed dislike for musl so I dont think mes libc is really meant to be used as a precursor to musl</span></div><div class="line" id="005440"><span class="nick" style="color:#6b8072"><a href="#005440" label="[00:54:40]">&lt;fossy&gt;</a></span><span class="message">it just happens to work well for that</span></div><div class="line" id="005537"><span class="nick" style="color:#8dd3c7"><a href="#005537" label="[00:55:37]">&lt;OriansJ&gt;</a></span><span class="message">fossy: You are also really good at glueing together working pieces from our ad-hoc mess of bootstrap pieces.</span></div><div class="line" id="005602"><span class="nick" style="color:#6b8072"><a href="#005602" label="[00:56:02]">&lt;fossy&gt;</a></span><span class="message">^-^ stikonas is very good at that too</span></div><div class="line" id="005800"><span class="nick" style="color:#8dd3c7"><a href="#005800" label="[00:58:00]">&lt;OriansJ&gt;</a></span><span class="message">fossy: I prefer to say that stikonas is very good chasing annoying problems down.</span></div><div class="line" id="005803"><span class="nick" style="color:#2e2a4a"><a href="#005803" label="[00:58:03]">&lt;stikonas&gt;</a></span><span class="message">well, the only reason why I chose musl was because it was the only complete enough libc easily buildable with tcc</span></div><div class="line" id="005921"><span class="nick" style="color:#6b8072"><a href="#005921" label="[00:59:21]">&lt;fossy&gt;</a></span><span class="message">well there are few options that exist</span></div><div class="line" id="005931"><span class="nick" style="color:#2e2a4a"><a href="#005931" label="[00:59:31]">&lt;stikonas&gt;</a></span><span class="message">and our goal was to remove as much pre-generated stuff as possible... So bison was necessity</span></div><div class="line" id="005936"><span class="nick" style="color:#6b8072"><a href="#005936" label="[00:59:36]">&lt;fossy&gt;</a></span><span class="message">musl, uclibc, glibc, thats all the complete ish libc I can think of</span></div><div class="line" id="005948"><span class="nick" style="color:#2e2a4a"><a href="#005948" label="[00:59:48]">&lt;stikonas&gt;</a></span><span class="message">yeah, and uclibc was not looking as easy as musl</span></div><div class="line" id="005951"><span class="nick" style="color:#6b8072"><a href="#005951" label="[00:59:51]">&lt;fossy&gt;</a></span><span class="message">stikonas: only one small readme change I see for libtool then I will merge</span></div><div class="line" id="005953"><span class="nick" style="color:#6b8072"><a href="#005953" label="[00:59:53]">&lt;fossy&gt;</a></span><span class="message">no</span></div><div class="line" id="010001"><span class="nick" style="color:#6b8072"><a href="#010001" label="[01:00:01]">&lt;fossy&gt;</a></span><span class="message">Wasnt uclibc a glibc fork?</span></div><div class="line" id="010027"><span class="nick" style="color:#6b8072"><a href="#010027" label="[01:00:27]">&lt;fossy&gt;</a></span><span class="message">oh</span></div><div class="line" id="010028"><span class="nick" style="color:#6b8072"><a href="#010028" label="[01:00:28]">&lt;fossy&gt;</a></span><span class="message">no</span></div><div class="line" id="010037"><span class="nick" style="color:#6b8072"><a href="#010037" label="[01:00:37]">&lt;fossy&gt;</a></span><span class="message">but incorporated code from glibc</span></div><div class="line" id="010146"><span class="nick" style="color:#2e2a4a"><a href="#010146" label="[01:01:46]">&lt;stikonas&gt;</a></span><span class="message">fossy: ok, pushed</span></div><div class="line" id="010524"><span class="nick" style="color:#6b8072"><a href="#010524" label="[01:05:24]">&lt;fossy&gt;</a></span><span class="message">Merged</span></div><div class="line" id="010545"><span class="nick" style="color:#6b8072"><a href="#010545" label="[01:05:45]">&lt;fossy&gt;</a></span><span class="message">Neat I like autoclose issues</span></div><div class="line" id="010601"><span class="nick" style="color:#2e2a4a"><a href="#010601" label="[01:06:01]">&lt;stikonas&gt;</a></span><span class="message">hmm, I'm now looking at coreutils and getdate.c</span></div><div class="line" id="010608"><span class="nick" style="color:#6b8072"><a href="#010608" label="[01:06:08]">&lt;fossy&gt;</a></span><span class="message">Issue?</span></div><div class="line" id="010614"><span class="nick" style="color:#2e2a4a"><a href="#010614" label="[01:06:14]">&lt;stikonas&gt;</a></span><span class="message">it also has getdate.y-&gt;getdate.c</span></div><div class="line" id="010619"><span class="nick" style="color:#6b8072"><a href="#010619" label="[01:06:19]">&lt;fossy&gt;</a></span><span class="message">oh</span></div><div class="line" id="010621"><span class="nick" style="color:#2e2a4a"><a href="#010621" label="[01:06:21]">&lt;stikonas&gt;</a></span><span class="message">I think the simplest way that would work</span></div><div class="line" id="010632"><span class="nick" style="color:#2e2a4a"><a href="#010632" label="[01:06:32]">&lt;stikonas&gt;</a></span><span class="message">is to not build it and remove touch that uses it</span></div><div class="line" id="010645"><span class="nick" style="color:#6b8072"><a href="#010645" label="[01:06:45]">&lt;fossy&gt;</a></span><span class="message">I swear we removed it</span></div><div class="line" id="010648"><span class="nick" style="color:#6b8072"><a href="#010648" label="[01:06:48]">&lt;fossy&gt;</a></span><span class="message">or was that tar</span></div><div class="line" id="010648"><span class="nick" style="color:#2e2a4a"><a href="#010648" label="[01:06:48]">&lt;stikonas&gt;</a></span><span class="message">(we'll later have touch back when we rebuild coreutils)</span></div><div class="line" id="010650"><span class="nick" style="color:#2e2a4a"><a href="#010650" label="[01:06:50]">&lt;stikonas&gt;</a></span><span class="message">yeah, tar</span></div><div class="line" id="010700"><span class="nick" style="color:#2e2a4a"><a href="#010700" label="[01:07:00]">&lt;stikonas&gt;</a></span><span class="message">so far I only found it in coreutils, nothing in between</span></div><div class="line" id="010705"><span class="nick" style="color:#6b8072"><a href="#010705" label="[01:07:05]">&lt;fossy&gt;</a></span><span class="message">we use touch tho</span></div><div class="line" id="010711"><span class="nick" style="color:#2e2a4a"><a href="#010711" label="[01:07:11]">&lt;stikonas&gt;</a></span><span class="message">catm will work...</span></div><div class="line" id="010716"><span class="nick" style="color:#2e2a4a"><a href="#010716" label="[01:07:16]">&lt;stikonas&gt;</a></span><span class="message">and it's only in one place...</span></div><div class="line" id="010717"><span class="nick" style="color:#6b8072"><a href="#010717" label="[01:07:17]">&lt;fossy&gt;</a></span><span class="message">we can patch touch probably trivally</span></div><div class="line" id="010724"><span class="nick" style="color:#6b8072"><a href="#010724" label="[01:07:24]">&lt;fossy&gt;</a></span><span class="message">yeah ok</span></div><div class="line" id="010725"><span class="nick" style="color:#2e2a4a"><a href="#010725" label="[01:07:25]">&lt;stikonas&gt;</a></span><span class="message">either patch touch</span></div><div class="line" id="010736"><span class="nick" style="color:#2e2a4a"><a href="#010736" label="[01:07:36]">&lt;stikonas&gt;</a></span><span class="message">or replace touch with catm until yacc is ready</span></div><div class="line" id="010739"><span class="nick" style="color:#2e2a4a"><a href="#010739" label="[01:07:39]">&lt;stikonas&gt;</a></span><span class="message">yet another option</span></div><div class="line" id="010745"><span class="nick" style="color:#2e2a4a"><a href="#010745" label="[01:07:45]">&lt;stikonas&gt;</a></span><span class="message">is to first build heirloom tools</span></div><div class="line" id="010746"><span class="nick" style="color:#6b8072"><a href="#010746" label="[01:07:46]">&lt;fossy&gt;</a></span><span class="message">1 second</span></div><div class="line" id="010759"><span class="nick" style="color:#2e2a4a"><a href="#010759" label="[01:07:59]">&lt;stikonas&gt;</a></span><span class="message">althouth there we use true to &quot;ignore&quot; ranlib command</span></div><div class="line" id="010810"><span class="nick" style="color:#2e2a4a"><a href="#010810" label="[01:08:10]">&lt;stikonas&gt;</a></span><span class="message">we can patch it out from the makefile though</span></div><div class="line" id="010821"><span class="nick" style="color:#2e2a4a"><a href="#010821" label="[01:08:21]">&lt;stikonas&gt;</a></span><span class="message">so quite a few different options</span></div><div class="line" id="010836"><span class="nick" style="color:#6b8072"><a href="#010836" label="[01:08:36]">&lt;fossy&gt;</a></span><span class="message">we dont even use touch that much tbh</span></div><div class="line" id="010840"><span class="nick" style="color:#2e2a4a"><a href="#010840" label="[01:08:40]">&lt;stikonas&gt;</a></span><span class="message">exactly</span></div><div class="line" id="010843"><span class="nick" style="color:#6b8072"><a href="#010843" label="[01:08:43]">&lt;fossy&gt;</a></span><span class="message">we can probably just not build it</span></div><div class="line" id="010843"><span class="nick" style="color:#2e2a4a"><a href="#010843" label="[01:08:43]">&lt;stikonas&gt;</a></span><span class="message">so I only found it in bash</span></div><div class="line" id="010852"><span class="nick" style="color:#2e2a4a"><a href="#010852" label="[01:08:52]">&lt;stikonas&gt;</a></span><span class="message">yeah, then use catm in bash</span></div><div class="line" id="010901"><span class="nick" style="color:#6b8072"><a href="#010901" label="[01:09:01]">&lt;fossy&gt;</a></span><span class="message">I just checked, its like 4-5 times?</span></div><div class="line" id="010903"><span class="nick" style="color:#2e2a4a"><a href="#010903" label="[01:09:03]">&lt;stikonas&gt;</a></span><span class="message">and after that we very quickly rebuild coreutils</span></div><div class="line" id="010907"><span class="nick" style="color:#6b8072"><a href="#010907" label="[01:09:07]">&lt;fossy&gt;</a></span><span class="message">yes</span></div><div class="line" id="010911"><span class="nick" style="color:#2e2a4a"><a href="#010911" label="[01:09:11]">&lt;stikonas&gt;</a></span><span class="message">yaeh...</span></div><div class="line" id="010913"><span class="nick" style="color:#6b8072"><a href="#010913" label="[01:09:13]">&lt;fossy&gt;</a></span><span class="message">its only 10 parts away ish</span></div><div class="line" id="010920"><span class="nick" style="color:#6b8072"><a href="#010920" label="[01:09:20]">&lt;fossy&gt;</a></span><span class="message">lets do that then</span></div><div class="line" id="010932"><span class="nick" style="color:#2e2a4a"><a href="#010932" label="[01:09:32]">&lt;stikonas&gt;</a></span><span class="message">I can't remove getdate.c though...</span></div><div class="line" id="010935"><span class="nick" style="color:#2e2a4a"><a href="#010935" label="[01:09:35]">&lt;stikonas&gt;</a></span><span class="message">we don't have rm</span></div><div class="line" id="010940"><span class="nick" style="color:#2e2a4a"><a href="#010940" label="[01:09:40]">&lt;stikonas&gt;</a></span><span class="message">but shouldn't matter</span></div><div class="line" id="010945"><span class="nick" style="color:#2e2a4a"><a href="#010945" label="[01:09:45]">&lt;stikonas&gt;</a></span><span class="message">we didn't remove it in tar case either</span></div><div class="line" id="010948"><span class="nick" style="color:#2e2a4a"><a href="#010948" label="[01:09:48]">&lt;stikonas&gt;</a></span><span class="message">just don't compile it</span></div><div class="line" id="011001"><span class="nick" style="color:#6b8072"><a href="#011001" label="[01:10:01]">&lt;fossy&gt;</a></span><span class="message">yeah I was gonna say</span></div><div class="line" id="011006"><span class="nick" style="color:#6b8072"><a href="#011006" label="[01:10:06]">&lt;fossy&gt;</a></span><span class="message">we dont need to remove it</span></div><div class="line" id="011015"><span class="nick" style="color:#6b8072"><a href="#011015" label="[01:10:15]">&lt;fossy&gt;</a></span><span class="message">just take it out of lib_src</span></div><div class="line" id="011016"><span class="nick" style="color:#2e2a4a"><a href="#011016" label="[01:10:16]">&lt;stikonas&gt;</a></span><span class="message">at that stage we use handwritten makefiles, so full control over build process</span></div><div class="line" id="011018"><span class="nick" style="color:#2e2a4a"><a href="#011018" label="[01:10:18]">&lt;stikonas&gt;</a></span><span class="message">yeah...</span></div><div class="line" id="011338"><span class="nick" style="color:#2e2a4a"><a href="#011338" label="[01:13:38]">&lt;stikonas&gt;</a></span><span class="message">ok, testing now, probably won't finish today, cause some hashes might change</span></div><div class="line" id="011450"><span class="nick" style="color:#6b8072"><a href="#011450" label="[01:14:50]">&lt;fossy&gt;</a></span><span class="message">yeah...</span></div><div class="line" id="011506"><span class="nick" style="color:#6b8072"><a href="#011506" label="[01:15:06]">&lt;fossy&gt;</a></span><span class="message">take as long as you need</span></div><div class="line" id="011536"><span class="nick" style="color:#2e2a4a"><a href="#011536" label="[01:15:36]">&lt;stikonas&gt;</a></span><span class="message">and some improvements from live-bootstrap are going to guix <a rel="nofollow" href="https://issues.guix.gnu.org/45962">https://issues.guix.gnu.org/45962</a>  ...</span></div><div class="line" id="011548"><span class="nick" style="color:#2e2a4a"><a href="#011548" label="[01:15:48]">&lt;stikonas&gt;</a></span><span class="message">guix will hopefully have deterministic ar</span></div><div class="line" id="011907"><span class="nick" style="color:#80b1d3"><a href="#011907" label="[01:19:07]">&lt;Hagfish&gt;</a></span><span class="message">fantastic</span></div><div class="line" id="015140"><span class="nick" style="color:#6d2462"><a href="#015140" label="[01:51:40]">&lt;pabs3&gt;</a></span><span class="message">OriansJ: agreed re libre hardware. but libresilicon is not enough to establish trust in hardware. have you seen bunnie's posts/talks on hardware supply chain security for eg?</span></div><div class="line" id="021051"><span class="nick" style="color:#8dd3c7"><a href="#021051" label="[02:10:51]">&lt;OriansJ&gt;</a></span><span class="message">pabs3: yes I have</span></div><div class="line" id="021145"><span class="nick" style="color:#6d2462"><a href="#021145" label="[02:11:45]">&lt;pabs3&gt;</a></span><span class="message">ah good. I especially like the RISC-V impedance mismatch one</span></div><div class="line" id="021205"><span class="nick" style="color:#8dd3c7"><a href="#021205" label="[02:12:05]">&lt;OriansJ&gt;</a></span><span class="message">I quite enjoyed the optically verifiable circuits in the display; which logically extended to enable an optically verifiable CPU core</span></div><div class="line" id="021317"><span class="nick" style="color:#8dd3c7"><a href="#021317" label="[02:13:17]">&lt;OriansJ&gt;</a></span><span class="message">^logically extended^could logically be extended^</span></div><div class="line" id="021441"><span class="nick" style="color:#8dd3c7"><a href="#021441" label="[02:14:41]">&lt;OriansJ&gt;</a></span><span class="message">wouldn't allow a very powerful or complex CPU core but certainly a 32/64bit RISC-II or MIPS-I style RISC processor for bootstrapping and cross verification.</span></div><div class="line" id="021605"><span class="nick" style="color:#8dd3c7"><a href="#021605" label="[02:16:05]">&lt;OriansJ&gt;</a></span><span class="message">RAM chips however are harder to address as we would need atleast 1GB to do a full and proper bootstrap to Linux+GCC+Guix</span></div><div class="line" id="021754"><span class="nick" style="color:#2e2a4a"><a href="#021754" label="[02:17:54]">&lt;stikonas&gt;</a></span><span class="message">maybe can do with less than 1 GB...</span></div><div class="line" id="021847"><span class="nick" style="color:#2e2a4a"><a href="#021847" label="[02:18:47]">&lt;stikonas&gt;</a></span><span class="message">hmm...</span></div><div class="line" id="021855"><span class="nick" style="color:#2e2a4a"><a href="#021855" label="[02:18:55]">&lt;stikonas&gt;</a></span><span class="message">gcc itself though might need a lot</span></div><div class="line" id="021914"><span class="nick" style="color:#8dd3c7"><a href="#021914" label="[02:19:14]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: maybe but Optical Circuits would be 16KB per Chip or 262,144 chips</span></div><div class="line" id="021930"><span class="nick" style="color:#2e2a4a"><a href="#021930" label="[02:19:30]">&lt;stikonas&gt;</a></span><span class="message">yeah, that's too many</span></div><div class="line" id="021939"><span class="nick" style="color:#2e2a4a"><a href="#021939" label="[02:19:39]">&lt;stikonas&gt;</a></span><span class="message">even if you reduce RAM usage by some small factor</span></div><div class="line" id="021946"><span class="nick" style="color:#8dd3c7"><a href="#021946" label="[02:19:46]">&lt;OriansJ&gt;</a></span><span class="message">even if we produced them at $1/per chip it still would cost a shitload of money</span></div><div class="line" id="021950"><span class="nick" style="color:#2e2a4a"><a href="#021950" label="[02:19:50]">&lt;stikonas&gt;</a></span><span class="message">it wouldn't go down by orders of magnitude</span></div><div class="line" id="022040"><span class="nick" style="color:#8dd3c7"><a href="#022040" label="[02:20:40]">&lt;OriansJ&gt;</a></span><span class="message">If we cut it down to 64MB, we are still looking at 4,096 chips</span></div><div class="line" id="022111"><span class="nick" style="color:#8dd3c7"><a href="#022111" label="[02:21:11]">&lt;OriansJ&gt;</a></span><span class="message">which could be econommically possible to work with but not an easy thing to ask of a large population.</span></div><div class="line" id="022143"><span class="nick" style="color:#2e2a4a"><a href="#022143" label="[02:21:43]">&lt;stikonas&gt;</a></span><span class="message">gcc source is more than 64 MB already</span></div><div class="line" id="022159"><span class="nick" style="color:#2e2a4a"><a href="#022159" label="[02:21:59]">&lt;stikonas&gt;</a></span><span class="message">well, gcc-core is a bit smaller</span></div><div class="line" id="022211"><span class="nick" style="color:#8dd3c7"><a href="#022211" label="[02:22:11]">&lt;OriansJ&gt;</a></span><span class="message">hence, it is the bigger half of the problem</span></div><div class="line" id="022223"><span class="nick" style="color:#2e2a4a"><a href="#022223" label="[02:22:23]">&lt;stikonas&gt;</a></span><span class="message">well, at some point you have to switch to storage media...</span></div><div class="line" id="022231"><span class="nick" style="color:#8dd3c7"><a href="#022231" label="[02:22:31]">&lt;OriansJ&gt;</a></span><span class="message">as one can do a 64bit processor in 20K transistors</span></div><div class="line" id="022307"><span class="nick" style="color:#2e2a4a"><a href="#022307" label="[02:23:07]">&lt;stikonas&gt;</a></span><span class="message">store all the source code on punch cards :D</span></div><div class="line" id="022316"><span class="nick" style="color:#8dd3c7"><a href="#022316" label="[02:23:16]">&lt;OriansJ&gt;</a></span><span class="message">but storage media these days include CPUs, ROM and RAM</span></div><div class="line" id="022332"><span class="nick" style="color:#8dd3c7"><a href="#022332" label="[02:23:32]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: here I was planning on a mile of paper-tape</span></div><div class="line" id="022347"><span class="nick" style="color:#8dd3c7"><a href="#022347" label="[02:23:47]">&lt;OriansJ&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.hermieusupply.com/en-EN/flight-strip.html">https://www.hermieusupply.com/en-EN/flight-strip.html</a> </span></div><div class="line" id="022402"><span class="nick" style="color:#8dd3c7"><a href="#022402" label="[02:24:02]">&lt;OriansJ&gt;</a></span><span class="message">As taper tape is no longer being manufactored, the closest equivelent</span></div><div class="line" id="023213"><span class="nick" style="color:#8dd3c7"><a href="#023213" label="[02:32:13]">&lt;OriansJ&gt;</a></span><span class="message">as punch cards would be even more expensive to do (let alone distribute)</span></div><div class="line" id="023421"><span class="nick" style="color:#8dd3c7"><a href="#023421" label="[02:34:21]">&lt;OriansJ&gt;</a></span><span class="message">Or we can engineer so that either trusted or untrusted parts can be used where solid standards exist and make it so detection of untrusted hardware changing builds can be trivially detected.</span></div><div class="line" id="023524"><span class="nick" style="color:#8dd3c7"><a href="#023524" label="[02:35:24]">&lt;OriansJ&gt;</a></span><span class="message">Because I don't care if untrusted hardware is used to build binaries if the resulting binaries are identically to the binaries build by the trusted hardware (just slower and on more expensive hardware)</span></div><div class="line" id="023705"><span class="nick" style="color:#234e69"><a href="#023705" label="[02:37:05]">&lt;vagrantc&gt;</a></span><span class="message">and that's where reproducible builds comes in :)</span></div><div class="line" id="023706"><span class="nick" style="color:#8dd3c7"><a href="#023706" label="[02:37:06]">&lt;OriansJ&gt;</a></span><span class="message">We also have the advantage of time; because Bootstrap pieces are small, quick to build and slow to change.</span></div><div class="line" id="023733"><span class="nick" style="color:#8dd3c7"><a href="#023733" label="[02:37:33]">&lt;OriansJ&gt;</a></span><span class="message">vagrantc: indeed; univeral cross-reproducibility.</span></div><div class="line" id="023815"><span class="nick" style="color:#6b8072"><a href="#023815" label="[02:38:15]">&lt;fossy&gt;</a></span><span class="message">yeah exactly</span></div><div class="line" id="023831"><span class="nick" style="color:#8dd3c7"><a href="#023831" label="[02:38:31]">&lt;OriansJ&gt;</a></span><span class="message">M2-Planet+M2libc+Mescc-tools produce identical outputs regards of host operating system (or bare metal), hardware, voltages, etc</span></div><div class="line" id="023928"><span class="nick" style="color:#8dd3c7"><a href="#023928" label="[02:39:28]">&lt;OriansJ&gt;</a></span><span class="message">There is no escaping the universal cross-reproducible builds when it even works on arbitrary hardware that hasn't even been invented yet.</span></div><div class="line" id="024128"><span class="nick" style="color:#8dd3c7"><a href="#024128" label="[02:41:28]">&lt;OriansJ&gt;</a></span><span class="message">If one needs something with more trust like Bunny's project; then you need only trusted hardware and Bunny is doing an amazing job trying to provide that.</span></div><div class="line" id="024318"><span class="nick" style="color:#8dd3c7"><a href="#024318" label="[02:43:18]">&lt;OriansJ&gt;</a></span><span class="message">but in terms of bootstrapping, we can leverage untrusted hardware and still not be concerned because we have a larger population of people doing the exact same calculations on arbitrary machines (any of which would detect malicious hardware tampering with our builds)</span></div><div class="line" id="024334"><span class="nick" style="color:#8dd3c7"><a href="#024334" label="[02:43:34]">&lt;OriansJ&gt;</a></span><span class="message">(or buggy hardware which is probably much more common)</span></div><div class="line" id="024751"><span class="nick" style="color:#8dd3c7"><a href="#024751" label="[02:47:51]">&lt;OriansJ&gt;</a></span><span class="message">and lets be honest; knight is alien enough and I'll take great pleasure getting it built into an optically verifiable chip after we get all of the software pieces is order.</span></div><div class="line" id="024909"><span class="nick" style="color:#8dd3c7"><a href="#024909" label="[02:49:09]">&lt;OriansJ&gt;</a></span><span class="message">But we have *A LOT* of porting efforts to do.</span></div><div class="line" id="042846"><span class="nick" style="color:#6c3d55"><a href="#042846" label="[04:28:46]">&lt;lle-bout&gt;</a></span><span class="message">OriansJ: hey, I have a question, to bootstrap from baremetal, how can an input device like a keyboard be managed from there?</span></div><div class="line" id="044643"><span class="nick" style="color:#d9d9d9"><a href="#044643" label="[04:46:43]">*</a></span><span class="message">pabs3 would suggest that input should be ignored until the final build products have been booted</span></div><div class="line" id="061300"><span class="nick" style="color:#6b8072"><a href="#061300" label="[06:13:00]">&lt;fossy&gt;</a></span><span class="message">how do you mean, pabs3</span></div><div class="line" id="062648"><span class="nick" style="color:#6c3d55"><a href="#062648" label="[06:26:48]">&lt;lle-bout&gt;</a></span><span class="message">pabs3: but we need input to actually input the GNU Mes stuff into the baremetal env, don't we?</span></div><div class="line" id="070454"><span class="nick" style="color:#6d2462"><a href="#070454" label="[07:04:54]">&lt;pabs3&gt;</a></span><span class="message">I would have assumed that the whole bootstrap would be automatic after it is started</span></div><div class="line" id="070521"><span class="nick" style="color:#6d2462"><a href="#070521" label="[07:05:21]">&lt;pabs3&gt;</a></span><span class="message">so no keyboard input would be needed</span></div><div class="line" id="070540"><span class="nick" style="color:#6c3d55"><a href="#070540" label="[07:05:40]">&lt;lle-bout&gt;</a></span><span class="message">pabs3: well if you use GNU Mes from baremetal, you need to input something to the computer, the GNU Mes stuff can't get on there by itself</span></div><div class="line" id="070556"><span class="nick" style="color:#6c3d55"><a href="#070556" label="[07:05:56]">&lt;lle-bout&gt;</a></span><span class="message">You need some kind of input device to transfer GNU Mes on there</span></div><div class="line" id="070607"><span class="nick" style="color:#6c3d55"><a href="#070607" label="[07:06:07]">&lt;lle-bout&gt;</a></span><span class="message">If there's no kernel, no device drivers, how do you do</span></div><div class="line" id="070639"><span class="nick" style="color:#6c3d55"><a href="#070639" label="[07:06:39]">&lt;lle-bout&gt;</a></span><span class="message">No software for keyboards, serial ports, or others, since you explicitly want to bootstrap that</span></div><div class="line" id="070705"><span class="nick" style="color:#6c3d55"><a href="#070705" label="[07:07:05]">&lt;lle-bout&gt;</a></span><span class="message">There has to be some kind of hardware manipulation there to get the GNU Mes stuff on the computer</span></div><div class="line" id="070906"><span class="nick" style="color:#6d2462"><a href="#070906" label="[07:09:06]">&lt;pabs3&gt;</a></span><span class="message">I thought mes was one of the later layers? but indeed the machine code seed of the bootstrap plus the source needs to be written to the device bootup storage somehow</span></div><div class="line" id="070920"><span class="nick" style="color:#6c3d55"><a href="#070920" label="[07:09:20]">&lt;lle-bout&gt;</a></span><span class="message">pabs3: sorry I tend to consider GNU Mes as the whole thing</span></div><div class="line" id="070946"><span class="nick" style="color:#6c3d55"><a href="#070946" label="[07:09:46]">&lt;lle-bout&gt;</a></span><span class="message">How do we write it to such storage?</span></div><div class="line" id="071023"><span class="nick" style="color:#6d2462"><a href="#071023" label="[07:10:23]">&lt;pabs3&gt;</a></span><span class="message">I was considering that all the source would be input at the same time as the seed</span></div><div class="line" id="071116"><span class="nick" style="color:#6c3d55"><a href="#071116" label="[07:11:16]">&lt;lle-bout&gt;</a></span><span class="message">pabs3: yes that's probably the best thing to do, how do we do it you think?</span></div><div class="line" id="071134"><span class="nick" style="color:#6d2462"><a href="#071134" label="[07:11:34]">&lt;pabs3&gt;</a></span><span class="message">and a keyboard certainly isn't useful for inputting the entirety of the gcc source :)</span></div><div class="line" id="071149"><span class="nick" style="color:#6d2462"><a href="#071149" label="[07:11:49]">&lt;pabs3&gt;</a></span><span class="message">OTOH both storage and most keyboards are full of untrusted binary blobs too though, so hmmm</span></div><div class="line" id="071159"><span class="nick" style="color:#6c3d55"><a href="#071159" label="[07:11:59]">&lt;lle-bout&gt;</a></span><span class="message">yes probably</span></div><div class="line" id="071235"><span class="nick" style="color:#6d2462"><a href="#071235" label="[07:12:35]">&lt;pabs3&gt;</a></span><span class="message">there are definitely libre keyboard firmware projects, but no libre storage firmware projects that I know of</span></div><div class="line" id="071245"><span class="nick" style="color:#6c3d55"><a href="#071245" label="[07:12:45]">&lt;lle-bout&gt;</a></span><span class="message">My main concern is the device driver</span></div><div class="line" id="071955"><span class="nick" style="color:#6c3d55"><a href="#071955" label="[07:19:55]">&lt;lle-bout&gt;</a></span><span class="message">I believe one must check with reproducibility all the binaries later on</span></div><div class="line" id="072208"><span class="nick" style="color:#6c3d55"><a href="#072208" label="[07:22:08]">&lt;lle-bout&gt;</a></span><span class="message">I don't believe it's possible to design malware that can infect current and future compilers in a reliable way, so that they are both themselves infected and also generate infected compilers</span></div><div class="line" id="072223"><span class="nick" style="color:#6c3d55"><a href="#072223" label="[07:22:23]">&lt;lle-bout&gt;</a></span><span class="message">(reproducibly)</span></div><div class="line" id="072427"><span class="nick" style="color:#6b8072"><a href="#072427" label="[07:24:27]">&lt;fossy&gt;</a></span><span class="message">unfortunately a bare metal bootstrap needs an appropriate platform</span></div><div class="line" id="072432"><span class="nick" style="color:#6b8072"><a href="#072432" label="[07:24:32]">&lt;fossy&gt;</a></span><span class="message">which dosent exist rn</span></div><div class="line" id="072527"><span class="nick" style="color:#6c3d55"><a href="#072527" label="[07:25:27]">&lt;lle-bout&gt;</a></span><span class="message">fossy: what would be the requirements?</span></div><div class="line" id="073303"><span class="nick" style="color:#6b8072"><a href="#073303" label="[07:33:03]">&lt;fossy&gt;</a></span><span class="message">lle-bout: fully open design, specification and implementation; free input mechanic that can have verifiable input; running binaries directly on the CPU (no BIOS), (optional) ease of running programs without any kernel</span></div><div class="line" id="073317"><span class="nick" style="color:#6b8072"><a href="#073317" label="[07:33:17]">&lt;fossy&gt;</a></span><span class="message">also a free storage system</span></div><div class="line" id="175648"><span class="nick" style="color:#8dd3c7"><a href="#175648" label="[17:56:48]">&lt;OriansJ&gt;</a></span><span class="message">lle-bout: well you are not supposed to manage hardware when bootstrapping on bare-metal, you are supposed to leverage specified functionality to produce required results. So only the pieces such has the hex0-monitor need to concern themselves with how to deal with input from a user and the associated devices. As for Mes, it needs a kernel to work. Currently only M2-Planet+M2libc+mescc-tools (and below) can run on bare metal. (Currently</span></div><div class="line" id="175648"><span class="nick" style="color:#8dd3c7"><a href="#175648" label="[17:56:48]">&lt;OriansJ&gt;</a></span><span class="message">specified to have one input and one output device [such as a paper tape reader and a paper tape writer])</span></div><div class="line" id="175811"><span class="nick" style="color:#8dd3c7"><a href="#175811" label="[17:58:11]">&lt;OriansJ&gt;</a></span><span class="message">So the plan is to get a minimal POSIX kernel written in the M2-Planet C subset, then the steps leading to GCC+Linux+Guix can be done without modification.</span></div><div class="line" id="180032"><span class="nick" style="color:#8dd3c7"><a href="#180032" label="[18:00:32]">&lt;OriansJ&gt;</a></span><span class="message">But such work is always 100% hardware specific and requires customization at the read/write functions to deal with the hardware used. (Which is why I made such work as easy as possible, rather than trying to provide a much more complex general solution, to reduce the sizes involved and the audit work required.)</span></div><div class="line" id="180255"><span class="nick" style="color:#8dd3c7"><a href="#180255" label="[18:02:55]">&lt;OriansJ&gt;</a></span><span class="message">fossy: there are plenty of appropriate bootstrap platforms in existence already (PDP-11s, Cray-1s, etc)</span></div><div class="line" id="180401"><span class="nick" style="color:#8dd3c7"><a href="#180401" label="[18:04:01]">&lt;OriansJ&gt;</a></span><span class="message">They are just part of the porting work required</span></div><div class="line" id="180710"><span class="nick" style="color:#8dd3c7"><a href="#180710" label="[18:07:10]">&lt;OriansJ&gt;</a></span><span class="message">I've been leaving the more fun architectures to people who might want to do the work</span></div><div class="line" id="181242"><span class="nick" style="color:#8dd3c7"><a href="#181242" label="[18:12:42]">&lt;OriansJ&gt;</a></span><span class="message">But if the time comes and no one else wants to do that work, I'll add it to my queue and knock it out too.</span></div><div class="line" id="181932"><span class="nick" style="color:#8dd3c7"><a href="#181932" label="[18:19:32]">&lt;OriansJ&gt;</a></span><span class="message">As I have always said this isn't a boom done project but something we are going to have to keep working for decades as the world changes below our feet</span></div><div class="line" id="182932"><span class="nick" style="color:#8dd3c7"><a href="#182932" label="[18:29:32]">&lt;OriansJ&gt;</a></span><span class="message">We might have short term goals and targets that we hit to keep spirits high and keep visable progress. But change is the only constant, pieces that can't keep up with it will be replaced by new ones that do.</span></div><div class="line" id="183513"><span class="nick" style="color:#8dd3c7"><a href="#183513" label="[18:35:13]">&lt;OriansJ&gt;</a></span><span class="message">We have already what appeared impossible into a solvable problem and with the continued efforts it'll become an easier and easier problem. But we need to keep up with the world changing around us. But this is a Red Queen's race, where the better job we do the easier it will be for people to create new Architectures and get FLOSS software running on it.</span></div><div class="line" id="210652"><span class="nick" style="color:#2e2a4a"><a href="#210652" label="[21:06:52]">&lt;stikonas&gt;</a></span><span class="message">fossy: so I think I've solved that getdate.y issue <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/62">https://github.com/fosslinux/live-bootstrap/pull/62</a> </span></div><div class="line" id="210730"><span class="nick" style="color:#2e2a4a"><a href="#210730" label="[21:07:30]">&lt;stikonas&gt;</a></span><span class="message">had to patch it away from touch</span></div><div class="line" id="210757"><span class="nick" style="color:#2e2a4a"><a href="#210757" label="[21:07:57]">&lt;stikonas&gt;</a></span><span class="message">since I couldn't build touch 5 with bison and touch 6 with musl</span></div><div class="line" id="210808"><span class="nick" style="color:#2e2a4a"><a href="#210808" label="[21:08:08]">&lt;stikonas&gt;</a></span><span class="message">so for now we'll stay with touch with mes</span></div><div class="line" id="211634"><span class="nick" style="color:#8dd3c7"><a href="#211634" label="[21:16:34]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: why would touch need bison? It just sets timestamps on files/folders</span></div><div class="line" id="211730"><span class="nick" style="color:#2e2a4a"><a href="#211730" label="[21:17:30]">&lt;stikonas&gt;</a></span><span class="message">OriansJ: well, it depends on get_date function for some reason...</span></div><div class="line" id="211759"><span class="nick" style="color:#2e2a4a"><a href="#211759" label="[21:17:59]">&lt;stikonas&gt;</a></span><span class="message">anyway, that's a question for coreutils maintainers (at that time at least)</span></div><div class="line" id="211847"><span class="nick" style="color:#2e2a4a"><a href="#211847" label="[21:18:47]">&lt;stikonas&gt;</a></span><span class="message">OriansJ: <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/coreutils.git/tree/src/touch.c?h=v5.0#n309">https://git.savannah.gnu.org/cgit/coreutils.git/tree/src/touch.c?h=v5.0#n309</a> </span></div><div class="line" id="211853"><span class="nick" style="color:#2e2a4a"><a href="#211853" label="[21:18:53]">&lt;stikonas&gt;</a></span><span class="message">basically it uses bison to parse date format</span></div><div class="line" id="211911"><span class="nick" style="color:#2e2a4a"><a href="#211911" label="[21:19:11]">&lt;stikonas&gt;</a></span><span class="message">       -d, --date=STRING</span></div><div class="line" id="211913"><span class="nick" style="color:#2e2a4a"><a href="#211913" label="[21:19:13]">&lt;stikonas&gt;</a></span><span class="message">              parse STRING and use it instead of current time</span></div><div class="line" id="211926"><span class="nick" style="color:#2e2a4a"><a href="#211926" label="[21:19:26]">&lt;stikonas&gt;</a></span><span class="message">maybe bison is a bit overkill for that...</span></div><div class="line" id="211930"><span class="nick" style="color:#2e2a4a"><a href="#211930" label="[21:19:30]">&lt;stikonas&gt;</a></span><span class="message">but it is what it is</span></div><div class="line" id="211953"><span class="nick" style="color:#2e2a4a"><a href="#211953" label="[21:19:53]">&lt;stikonas&gt;</a></span><span class="message">anyway, I basically &quot;broke&quot; that -d argument in my patch</span></div><div class="line" id="214022"><span class="nick" style="color:#8dd3c7"><a href="#214022" label="[21:40:22]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: yeah definitely overkill but probably a quick and dirty hack that stuck around because no one else wanted to do it in just plain C.</span></div><div class="line" id="215451"><span class="nick" style="color:#bc80bd"><a href="#215451" label="[21:54:51]">&lt;mihi&gt;</a></span><span class="message">Hello :-) <a rel="nofollow" href="https://github.com/schierlm/guile-psyntax-bootstrapping">https://github.com/schierlm/guile-psyntax-bootstrapping</a>  works now \o/</span></div><div class="line" id="215531"><span class="nick" style="color:#bc80bd"><a href="#215531" label="[21:55:31]">&lt;mihi&gt;</a></span><span class="message">and (not surprisingly) when building on 64-bit Linux, the bootstrapped psyntax-pp.scm is identical to the shipped one.</span></div><div class="line" id="215553"><span class="nick" style="color:#bc80bd"><a href="#215553" label="[21:55:53]">&lt;mihi&gt;</a></span><span class="message">The CI will also download guile-3.0.2, remove psyntax-pp.scm, bootstrap it and compare the hash with original.</span></div><div class="line" id="215627"><span class="nick" style="color:#2e2a4a"><a href="#215627" label="[21:56:27]">&lt;stikonas&gt;</a></span><span class="message">nice work!</span></div><div class="line" id="215640"><span class="nick" style="color:#bc80bd"><a href="#215640" label="[21:56:40]">&lt;mihi&gt;</a></span><span class="message">rekado_, in case you are interested, #'(... foo) will create a syntax object that wraps a symbol foo, even if foo is an ellipsis or a bound syntax variable. Those (... ...) are used to generate an ellipsis in a generated syntax-case statement :)</span></div><div class="line" id="215710"><span class="nick" style="color:#bc80bd"><a href="#215710" label="[21:57:10]">&lt;mihi&gt;</a></span><span class="message">and I did not know that, so my implementation of 'syntax did not do it. That's why it was not working for me.</span></div><div class="line" id="215734"><span class="nick" style="color:#8dd3c7"><a href="#215734" label="[21:57:34]">&lt;OriansJ&gt;</a></span><span class="message">mihi: wonderful, thank you *VERY MUCH*</span></div><div class="line" id="215903"><span class="nick" style="color:#bc80bd"><a href="#215903" label="[21:59:03]">&lt;mihi&gt;</a></span><span class="message">The fix for 'syntax was rather simple. <a rel="nofollow" href="https://github.com/schierlm/guile-psyntax-bootstrapping/blob/main/psyntax-bootstrap/step3.scm#L42-L43.">https://github.com/schierlm/guile-psyntax-bootstrapping/blob/main/psyntax-bootstrap/step3.scm#L42-L43.</a>  The hardeds part was finding out in which order and when to swap the $sc-dispatch and macroexpand-hook from bootstrap impl to real so that the system does not fall apart.</span></div><div class="line" id="220037"><span class="nick" style="color:#bc80bd"><a href="#220037" label="[22:00:37]">&lt;mihi&gt;</a></span><span class="message">the psyntax.pp can be used for 3.0.2. to 3.0.5, but not latest git as they decided to change psyntax implementation again after a while.</span></div><div class="line" id="220123"><span class="nick" style="color:#bc80bd"><a href="#220123" label="[22:01:23]">&lt;mihi&gt;</a></span><span class="message">when 3.0.6 gets out we'll have to check if it is easier to bootstrap 3.0.6 from 3.0.5 or change the current bootstrap to support it.</span></div><div class="line" id="220200"><span class="nick" style="color:#bc80bd"><a href="#220200" label="[22:02:00]">&lt;mihi&gt;</a></span><span class="message">OriansJ, thank you very much for M2-Planet and mescc :)</span></div><div class="line" id="220217"><span class="nick" style="color:#bc80bd"><a href="#220217" label="[22:02:17]">&lt;mihi&gt;</a></span><span class="message">s/mescc/M2Libc/</span></div><div class="line" id="220255"><span class="nick" style="color:#8dd3c7"><a href="#220255" label="[22:02:55]">&lt;OriansJ&gt;</a></span><span class="message">mihi: : mescc-tools but but I like your work *alot*</span></div><div class="line" id="220432"><span class="nick" style="color:#bc80bd"><a href="#220432" label="[22:04:32]">&lt;mihi&gt;</a></span><span class="message">OriansJ, I assume you appreciate it so much because you tried yourself hard to accomplish it. If you did not try, you don't know how hard it can be...</span></div><div class="line" id="220654"><span class="nick" style="color:#bc80bd"><a href="#220654" label="[22:06:54]">&lt;mihi&gt;</a></span><span class="message">but the satisfaction once it did not fail but print #&lt;unspecified&gt; into the REPL was worth it. :)</span></div><div class="line" id="221326"><span class="nick" style="color:#6b8072"><a href="#221326" label="[22:13:26]">&lt;fossy&gt;</a></span><span class="message">&lt;OriansJ&gt; fossy: there are plenty of appropriate bootstrap platforms in existence already (PDP-11s, Cray-1s, etc)</span></div><div class="line" id="221342"><span class="nick" style="color:#6b8072"><a href="#221342" label="[22:13:42]">&lt;fossy&gt;</a></span><span class="message">how many pdp11s still exist</span></div><div class="line" id="222305"><span class="nick" style="color:#8dd3c7"><a href="#222305" label="[22:23:05]">&lt;OriansJ&gt;</a></span><span class="message">mihi: actually I appreciate it so much because of what it represents. A full and proper bootstrap without generated files for Guix; a task which was considered an absolute impossibility not even 5 years ago. And you got the last piece of the chain done with live-bootstrap doing the pieces leading up to it.</span></div><div class="line" id="222435"><span class="nick" style="color:#8dd3c7"><a href="#222435" label="[22:24:35]">&lt;OriansJ&gt;</a></span><span class="message">But yes, I am quite certain it was a difficult task and its completition is definitely unquestionable proof of your brilliant work.</span></div><div class="line" id="222535"><span class="nick" style="color:#8dd3c7"><a href="#222535" label="[22:25:35]">&lt;OriansJ&gt;</a></span><span class="message">you really should announce it on #Guix because it is going to be a milestone for them too.</span></div><div class="line" id="222557"><span class="nick" style="color:#2e2a4a"><a href="#222557" label="[22:25:57]">&lt;stikonas&gt;</a></span><span class="message">and I guess also on mailing lists: bootstrappable and guix-devel</span></div><div class="line" id="222737"><span class="nick" style="color:#8dd3c7"><a href="#222737" label="[22:27:37]">&lt;OriansJ&gt;</a></span><span class="message">fossy: couple thousands in industrial settings, hundreds in Museums and tens in personal collections. But SIMH can be used for the development work and we only need a single working one to do the verification work.</span></div><div class="line" id="222934"><span class="nick" style="color:#bc80bd"><a href="#222934" label="[22:29:34]">&lt;mihi&gt;</a></span><span class="message">stikonas, fossy, OriansJ: did you check and psyntax.pp is really the last missing piece for guile? I'm not that familiar with it, and I would not be surprised if there are other generated files left...</span></div><div class="line" id="222950"><span class="nick" style="color:#bc80bd"><a href="#222950" label="[22:29:50]">&lt;mihi&gt;</a></span><span class="message">yet if there are more, just let's tackle the other ones too :)</span></div><div class="line" id="222952"><span class="nick" style="color:#2e2a4a"><a href="#222952" label="[22:29:52]">&lt;stikonas&gt;</a></span><span class="message">I certainly didn't check...</span></div><div class="line" id="223117"><span class="nick" style="color:#8dd3c7"><a href="#223117" label="[22:31:17]">&lt;OriansJ&gt;</a></span><span class="message">mihi: well last time I checked, it was Bison pregens but we bootstrapped Bison so those shouldn't be a problem but you are right; verifying isn't a bad idea.</span></div><div class="line" id="223142"><span class="nick" style="color:#bc80bd"><a href="#223142" label="[22:31:42]">&lt;mihi&gt;</a></span><span class="message">do you have any heuristics for finding generated files? for example some script that can parse Makefiles and find files that are both outputs and bundled in source control?</span></div><div class="line" id="223214"><span class="nick" style="color:#bc80bd"><a href="#223214" label="[22:32:14]">&lt;mihi&gt;</a></span><span class="message">or by grepping for keywords? or is the only way to actually review every single file?</span></div><div class="line" id="223233"><span class="nick" style="color:#bc80bd"><a href="#223233" label="[22:32:33]">&lt;mihi&gt;</a></span><span class="message">(or word-of-mouth here in the mailing list?)</span></div><div class="line" id="223238"><span class="nick" style="color:#2e2a4a"><a href="#223238" label="[22:32:38]">&lt;stikonas&gt;</a></span><span class="message">hm, I sometimes grep for &quot;generated&quot;</span></div><div class="line" id="223241"><span class="nick" style="color:#bc80bd"><a href="#223241" label="[22:32:41]">&lt;mihi&gt;</a></span><span class="message">s/here/here or/</span></div><div class="line" id="223241"><span class="nick" style="color:#2e2a4a"><a href="#223241" label="[22:32:41]">&lt;stikonas&gt;</a></span><span class="message">or something similar</span></div><div class="line" id="223314"><span class="nick" style="color:#bc80bd"><a href="#223314" label="[22:33:14]">&lt;mihi&gt;</a></span><span class="message">would not work for psyntax.pp :(</span></div><div class="line" id="223339"><span class="nick" style="color:#2e2a4a"><a href="#223339" label="[22:33:39]">&lt;stikonas&gt;</a></span><span class="message">well, certainly, it only relies on people being nice and leaving a comment that file is generated...</span></div><div class="line" id="223418"><span class="nick" style="color:#8dd3c7"><a href="#223418" label="[22:34:18]">&lt;OriansJ&gt;</a></span><span class="message">mihi: well behaved generated files try to explicitly state so but unfortunately not all programmers are so kind and thus only a manual inspection with the question can I understand this is usually the only honest method.</span></div><div class="line" id="223625"><span class="nick" style="color:#2e2a4a"><a href="#223625" label="[22:36:25]">&lt;stikonas&gt;</a></span><span class="message">well, guile also has some lex files, but those are also bootstrapped together with bison</span></div><div class="line" id="223731"><span class="nick" style="color:#8dd3c7"><a href="#223731" label="[22:37:31]">&lt;OriansJ&gt;</a></span><span class="message">we also have M4 and autotools are not that far off (If I remember correctly)</span></div><div class="line" id="224026"><span class="nick" style="color:#2e2a4a"><a href="#224026" label="[22:40:26]">&lt;stikonas&gt;</a></span><span class="message">yeah, need to bootstrap newer autotools, but shouldn't be too bad</span></div><div class="line" id="224037"><span class="nick" style="color:#2e2a4a"><a href="#224037" label="[22:40:37]">&lt;stikonas&gt;</a></span><span class="message">the harderst part I guess were perl modules that we already have</span></div><div class="line" id="224058"><span class="nick" style="color:#2e2a4a"><a href="#224058" label="[22:40:58]">&lt;stikonas&gt;</a></span><span class="message">now just a bit of circular dependencies on automake/autoconf but those are not too hard to break with minor patching</span></div><div class="line" id="224113"><span class="nick" style="color:#2e2a4a"><a href="#224113" label="[22:41:13]">&lt;stikonas&gt;</a></span><span class="message">(if you are unwilling to use pre-generated configure scripts)</span></div><div class="line" id="224151"><span class="nick" style="color:#2e2a4a"><a href="#224151" label="[22:41:51]">&lt;stikonas&gt;</a></span><span class="message">I'll probably try to get newer automake working next...</span></div><div class="line" id="224410"><span class="nick" style="color:#8dd3c7"><a href="#224410" label="[22:44:10]">&lt;OriansJ&gt;</a></span><span class="message">So mihi I am sure that all that remains can be sorted out in live-bootstrap and you took out the biggest blocker we had in guile and what remains (if anything) should be addressable.</span></div><div class="line" id="225119"><span class="nick" style="color:#8dd3c7"><a href="#225119" label="[22:51:19]">&lt;OriansJ&gt;</a></span><span class="message">fossy: also ebay <a rel="nofollow" href="https://www.ebay.com/itm/Vintage-DIGITAL-DEC-PDP-1123-11-23-Mainframe-Computer-w-Cards-Powers-On/203250339708?epid=1820501256&amp;hash=item2f52aa0f7c:g:tL4AAOSwgIZgA34z">https://www.ebay.com/itm/Vintage-DIGITAL-DEC-PDP-1123-11-23-Mainframe-Computer-w-Cards-Powers-On/203250339708?epid=1820501256&amp;hash=item2f52aa0f7c:g:tL4AAOSwgIZgA34z</a> </span></div><div class="line" id="225146"><span class="nick" style="color:#6b8072"><a href="#225146" label="[22:51:46]">&lt;fossy&gt;</a></span><span class="message">mihi: i usually do the same thing, grep for generated, and also look for any *.y *.tab.c *.lex etc etc</span></div><div class="line" id="225154"><span class="nick" style="color:#6b8072"><a href="#225154" label="[22:51:54]">&lt;fossy&gt;</a></span><span class="message">OriansJ: hm, i didn't realise they were that common</span></div><div class="line" id="225203"><span class="nick" style="color:#6b8072"><a href="#225203" label="[22:52:03]">&lt;fossy&gt;</a></span><span class="message">maybe i was thinking of pdp-8s that were virtually nonexistant</span></div><div class="line" id="225257"><span class="nick" style="color:#8dd3c7"><a href="#225257" label="[22:52:57]">&lt;OriansJ&gt;</a></span><span class="message">fossy: PDP-10 and PDP-6 are the most rare only 12 and 2 made respectively.</span></div><div class="line" id="225337"><span class="nick" style="color:#6b8072"><a href="#225337" label="[22:53:37]">&lt;fossy&gt;</a></span><span class="message">stikonas: are all of these pass2 checksums ones that were just missing?</span></div><div class="line" id="225443"><span class="nick" style="color:#2e2a4a"><a href="#225443" label="[22:54:43]">&lt;stikonas&gt;</a></span><span class="message">fossy: I suspect it was some PR just before you merged checksums</span></div><div class="line" id="225449"><span class="nick" style="color:#2e2a4a"><a href="#225449" label="[22:54:49]">&lt;stikonas&gt;</a></span><span class="message">so somehow they were missing</span></div><div class="line" id="225457"><span class="nick" style="color:#6b8072"><a href="#225457" label="[22:54:57]">&lt;fossy&gt;</a></span><span class="message">stikonas: hm, sounds likely</span></div><div class="line" id="225536"><span class="nick" style="color:#2e2a4a"><a href="#225536" label="[22:55:36]">&lt;stikonas&gt;</a></span><span class="message">so building touch is quite annoying...</span></div><div class="line" id="225542"><span class="nick" style="color:#6b8072"><a href="#225542" label="[22:55:42]">&lt;fossy&gt;</a></span><span class="message">is fprintftime just another thing needed for date</span></div><div class="line" id="225543"><span class="nick" style="color:#2e2a4a"><a href="#225543" label="[22:55:43]">&lt;stikonas&gt;</a></span><span class="message">in the end I decided to patch it...</span></div><div class="line" id="225546"><span class="nick" style="color:#2e2a4a"><a href="#225546" label="[22:55:46]">&lt;stikonas&gt;</a></span><span class="message">yes..</span></div><div class="line" id="225548"><span class="nick" style="color:#6b8072"><a href="#225548" label="[22:55:48]">&lt;fossy&gt;</a></span><span class="message">yeah thats fine</span></div><div class="line" id="225550"><span class="nick" style="color:#6b8072"><a href="#225550" label="[22:55:50]">&lt;fossy&gt;</a></span><span class="message">ok</span></div><div class="line" id="225558"><span class="nick" style="color:#6b8072"><a href="#225558" label="[22:55:58]">&lt;fossy&gt;</a></span><span class="message">CI then merge</span></div><div class="line" id="225605"><span class="nick" style="color:#2e2a4a"><a href="#225605" label="[22:56:05]">&lt;stikonas&gt;</a></span><span class="message">oh, this CI run is just changed commit message...</span></div><div class="line" id="225609"><span class="nick" style="color:#2e2a4a"><a href="#225609" label="[22:56:09]">&lt;stikonas&gt;</a></span><span class="message">I was a bit unhappy...</span></div><div class="line" id="225613"><span class="nick" style="color:#2e2a4a"><a href="#225613" label="[22:56:13]">&lt;stikonas&gt;</a></span><span class="message">no changes since last pass</span></div><div class="line" id="225621"><span class="nick" style="color:#2e2a4a"><a href="#225621" label="[22:56:21]">&lt;stikonas&gt;</a></span><span class="message">(there is green tick visible there)</span></div><div class="line" id="225656"><span class="nick" style="color:#2e2a4a"><a href="#225656" label="[22:56:56]">&lt;stikonas&gt;</a></span><span class="message">if you want, we can still wait...</span></div><div class="line" id="225718"><span class="nick" style="color:#2e2a4a"><a href="#225718" label="[22:57:18]">&lt;stikonas&gt;</a></span><span class="message">and I'm now testing &quot;expect&quot; changes locally...</span></div><div class="line" id="225728"><span class="nick" style="color:#2e2a4a"><a href="#225728" label="[22:57:28]">&lt;stikonas&gt;</a></span><span class="message">to see if I can enable interactive bash</span></div><div class="line" id="225758"><span class="nick" style="color:#6b8072"><a href="#225758" label="[22:57:58]">&lt;fossy&gt;</a></span><span class="message">oh i see it</span></div><div class="line" id="225805"><span class="nick" style="color:#2e2a4a"><a href="#225805" label="[22:58:05]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://cirrus-ci.com/task/5340936117944320">https://cirrus-ci.com/task/5340936117944320</a> </span></div><div class="line" id="225808"><span class="nick" style="color:#6b8072"><a href="#225808" label="[22:58:08]">&lt;fossy&gt;</a></span><span class="message">yeah</span></div><div class="line" id="225810"><span class="nick" style="color:#6b8072"><a href="#225810" label="[22:58:10]">&lt;fossy&gt;</a></span><span class="message">merge</span></div><div class="line" id="225900"><span class="nick" style="color:#2e2a4a"><a href="#225900" label="[22:59:00]">&lt;stikonas&gt;</a></span><span class="message">so I hope now we got rid of all pregenerated stuff...</span></div><div class="line" id="225912"><span class="nick" style="color:#2e2a4a"><a href="#225912" label="[22:59:12]">&lt;stikonas&gt;</a></span><span class="message">both libtool and this getdate.y are cleaned up</span></div><div class="line" id="225928"><span class="nick" style="color:#2e2a4a"><a href="#225928" label="[22:59:28]">&lt;stikonas&gt;</a></span><span class="message">somehow they slipped through initially</span></div><div class="line" id="230009"><span class="nick" style="color:#6b8072"><a href="#230009" label="[23:00:09]">&lt;fossy&gt;</a></span><span class="message">i think we will find a few slips here and there</span></div><div class="line" id="230013"><span class="nick" style="color:#6b8072"><a href="#230013" label="[23:00:13]">&lt;fossy&gt;</a></span><span class="message">these things are hard to find sometimes</span></div><div class="line" id="230029"><span class="nick" style="color:#6b8072"><a href="#230029" label="[23:00:29]">&lt;fossy&gt;</a></span><span class="message">i think i have found a very good way to check</span></div><div class="line" id="230040"><span class="nick" style="color:#6b8072"><a href="#230040" label="[23:00:40]">&lt;fossy&gt;</a></span><span class="message">normally git checkouts *don't* have pregenerated files</span></div><div class="line" id="230044"><span class="nick" style="color:#6b8072"><a href="#230044" label="[23:00:44]">&lt;fossy&gt;</a></span><span class="message">so compare a directory listing</span></div><div class="line" id="232258"><span class="nick" style="color:#8dd3c7"><a href="#232258" label="[23:22:58]">&lt;OriansJ&gt;</a></span><span class="message">the great thing about perfection is that it is a road and not a destination.</span></div><div class="line" id="232537"><span class="nick" style="color:#234e69"><a href="#232537" label="[23:25:37]">&lt;vagrantc&gt;</a></span><span class="message">if you're lucky, some nice hikes off the beaten trail :)</span></div><div class="line" id="234344"><span class="nick" style="color:#8dd3c7"><a href="#234344" label="[23:43:44]">&lt;OriansJ&gt;</a></span><span class="message">vagrantc: very clearly we are all entirely off the path and cutting into new jungle.</span></div><div class="line" id="234519"><span class="nick" style="color:#bc80bd"><a href="#234519" label="[23:45:19]">&lt;mihi&gt;</a></span><span class="message">Mailing list post: <a rel="nofollow" href="https://www.freelists.org/post/bootstrappable/Can-Guile-be-bootstrapped-from-source-without-psyntaxppscm">https://www.freelists.org/post/bootstrappable/Can-Guile-be-bootstrapped-from-source-without-psyntaxppscm</a>,7 </span></div><div class="line" id="234610"><span class="nick" style="color:#bc80bd"><a href="#234610" label="[23:46:10]">&lt;mihi&gt;</a></span><span class="message">I hope nobody is unhappy that I hijacked an old guile-user thread from 2017...</span></div><div class="line" id="234712"><span class="nick" style="color:#8dd3c7"><a href="#234712" label="[23:47:12]">&lt;OriansJ&gt;</a></span><span class="message">with news this big I don't think they would mind.</span></div><div class="line" id="234725"><span class="nick" style="color:#3c5b35"><a href="#234725" label="[23:47:25]">&lt;janneke&gt;</a></span><span class="message">mihi: oh, beautiful</span></div><div class="line" id="234836"><span class="nick" style="color:#3c5b35"><a href="#234836" label="[23:48:36]">&lt;janneke&gt;</a></span><span class="message">this means we can probably use this bootstrapped syntax-case in mes?  could even be faster than our current psyntax?</span></div><div class="line" id="234925"><span class="nick" style="color:#bc80bd"><a href="#234925" label="[23:49:25]">&lt;mihi&gt;</a></span><span class="message">Apart from noticing the existence of psyntax.pp in mes, I have not had a closer look at it (yet).</span></div><div class="line" id="235058"><span class="nick" style="color:#bc80bd"><a href="#235058" label="[23:50:58]">&lt;mihi&gt;</a></span><span class="message">or in other words if there are any Guile primitives that are not available in mes. But I guess if they are, the code can be changed to work around it. It should mostly work if you have just defmacros as well as make-syntax/syntax-expression/syntax-wrap/syntax-module</span></div><div class="line" id="235258"><span class="nick" style="color:#3c5b35"><a href="#235258" label="[23:52:58]">&lt;janneke&gt;</a></span><span class="message">ah okay, that means it's goint to be some work</span></div><div class="line" id="235309"><span class="nick" style="color:#3c5b35"><a href="#235309" label="[23:53:09]">&lt;janneke&gt;</a></span><span class="message">wondering what syntax-module might be</span></div><div class="line" id="235604"><span class="nick" style="color:#bc80bd"><a href="#235604" label="[23:56:04]">&lt;mihi&gt;</a></span><span class="message">I don't use it. Guile uses it to distinguish which module contained the syntax object, so that #'x on toplevel in module X does not clash with #'x on toplevel in module Y.</span></div><div class="line" id="235614"><span class="nick" style="color:#2e2a4a"><a href="#235614" label="[23:56:14]">&lt;stikonas&gt;</a></span><span class="message">does psyntax have a lot of impact on speed of mes?</span></div><div class="line" id="235659"><span class="nick" style="color:#3c5b35"><a href="#235659" label="[23:56:59]">&lt;janneke&gt;</a></span><span class="message">i believe it does, however, there's no alternative to compare it to</span></div><div class="line" id="235730"><span class="nick" style="color:#bc80bd"><a href="#235730" label="[23:57:30]">&lt;mihi&gt;</a></span><span class="message">I just set it to '(bootstrapping bootstrapping) so that it is different from a real module, in case any syntax objects escape from the bootstrap.</span></div><div class="line" id="235741"><span class="nick" style="color:#3c5b35"><a href="#235741" label="[23:57:41]">&lt;janneke&gt;</a></span><span class="message">right</span></div><div class="line" id="235808"><span class="nick" style="color:#3c5b35"><a href="#235808" label="[23:58:08]">&lt;janneke&gt;</a></span><span class="message">i'll want to take a look after i get guile modules up in mes</span></div><br /></div></body></html>