<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2019-12-29.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="135509"><span class="nick" style="color:#8dd3c7"><a href="#135509" label="[13:55:09]">&lt;oriansj&gt;</a></span><span class="message">Morning</span></div><div class="line" id="142531"><span class="nick" style="color:#2e2a4a"><a href="#142531" label="[14:25:31]">&lt;janneke&gt;</a></span><span class="message">morning oriansj</span></div><div class="line" id="143447"><span class="nick" style="color:#2e2a4a"><a href="#143447" label="[14:34:47]">&lt;janneke&gt;</a></span><span class="message">mid-kid: thanks for your bug report; i have put-up a similar fix: <a rel="nofollow" href="http://git.savannah.gnu.org/cgit/mes.git/commit/?h=wip&amp;id=cca07aff2bc515213c7a9c1a04ef6e97c50109f5">http://git.savannah.gnu.org/cgit/mes.git/commit/?h=wip&amp;id=cca07aff2bc515213c7a9c1a04ef6e97c50109f5</a> </span></div><div class="line" id="144210"><span class="nick" style="color:#8dd3c7"><a href="#144210" label="[14:42:10]">&lt;oriansj&gt;</a></span><span class="message">janneke: have you taken a look at the current state of mes-m2 yet?</span></div><div class="line" id="144718"><span class="nick" style="color:#2e2a4a"><a href="#144718" label="[14:47:18]">&lt;janneke&gt;</a></span><span class="message">oriansj: no, i haven't -- you made good progress?</span></div><div class="line" id="144828"><span class="nick" style="color:#6b8072"><a href="#144828" label="[14:48:28]">*</a></span><span class="message">janneke has been enjoying holidays and will have do that some days more</span></div><div class="line" id="145507"><span class="nick" style="color:#8dd3c7"><a href="#145507" label="[14:55:07]">&lt;oriansj&gt;</a></span><span class="message">janneke: well I got it to a much nicer state, virtually all of the primitives match guile's behavior exactly</span></div><div class="line" id="145602"><span class="nick" style="color:#2e2a4a"><a href="#145602" label="[14:56:02]">&lt;janneke&gt;</a></span><span class="message">oriansj: that's amazing</span></div><div class="line" id="145624"><span class="nick" style="color:#8dd3c7"><a href="#145624" label="[14:56:24]">&lt;oriansj&gt;</a></span><span class="message">The only remaining major piece is support for guile's module system and then everything becomes a slow incremental march until until we are able to solve the guix and guile bootstraps</span></div><div class="line" id="145629"><span class="nick" style="color:#6b8072"><a href="#145629" label="[14:56:29]">*</a></span><span class="message">janneke sometimes feels a bit sad that because of the forking we are doing some duplicate work...</span></div><div class="line" id="145712"><span class="nick" style="color:#2e2a4a"><a href="#145712" label="[14:57:12]">&lt;janneke&gt;</a></span><span class="message">oriansj: i suspect you don't want to use guile-1.8's boot-9 module implementation?</span></div><div class="line" id="145741"><span class="nick" style="color:#2e2a4a"><a href="#145741" label="[14:57:41]">&lt;janneke&gt;</a></span><span class="message">i have been playing with porting that to my wip-module branch</span></div><div class="line" id="145805"><span class="nick" style="color:#8dd3c7"><a href="#145805" label="[14:58:05]">&lt;oriansj&gt;</a></span><span class="message">janneke: well I honestly haven't figured out the best way to implement module support that would work long term</span></div><div class="line" id="145859"><span class="nick" style="color:#8dd3c7"><a href="#145859" label="[14:58:59]">&lt;oriansj&gt;</a></span><span class="message">Because if I could limit it to a handful of well designed primitives and did the rest in scheme functions and macros, it would be much nicer</span></div><div class="line" id="150028"><span class="nick" style="color:#2e2a4a"><a href="#150028" label="[15:00:28]">&lt;janneke&gt;</a></span><span class="message">oriansj: on wip-module, i copied the guile hash-table and low-level record and module functionality and then run guile-1.8's boot-9.scm</span></div><div class="line" id="150041"><span class="nick" style="color:#2e2a4a"><a href="#150041" label="[15:00:41]">&lt;janneke&gt;</a></span><span class="message">copied/reimplemented</span></div><div class="line" id="150336"><span class="nick" style="color:#2e2a4a"><a href="#150336" label="[15:03:36]">&lt;janneke&gt;</a></span><span class="message">otoh, we need the most thorough review we can imagine, and you/we are doing an amazing job there :-)</span></div><div class="line" id="150358"><span class="nick" style="color:#8dd3c7"><a href="#150358" label="[15:03:58]">&lt;oriansj&gt;</a></span><span class="message">janneke: have you looked at mes-m2's mes_record.c?</span></div><div class="line" id="150456"><span class="nick" style="color:#8dd3c7"><a href="#150456" label="[15:04:56]">&lt;oriansj&gt;</a></span><span class="message">or test/test019/record.scm</span></div><div class="line" id="150539"><span class="nick" style="color:#8dd3c7"><a href="#150539" label="[15:05:39]">&lt;oriansj&gt;</a></span><span class="message">which are all of the record primitives that guile exposes by default</span></div><div class="line" id="150807"><span class="nick" style="color:#8dd3c7"><a href="#150807" label="[15:08:07]">&lt;oriansj&gt;</a></span><span class="message">I designed it to be trivial to understand and easy to inspect/use</span></div><div class="line" id="152545"><span class="nick" style="color:#2e2a4a"><a href="#152545" label="[15:25:45]">&lt;janneke&gt;</a></span><span class="message">oh, you did it all in C..interesting.</span></div><div class="line" id="152554"><span class="nick" style="color:#2e2a4a"><a href="#152554" label="[15:25:54]">&lt;janneke&gt;</a></span><span class="message">that could be much faster</span></div><div class="line" id="152610"><span class="nick" style="color:#8dd3c7"><a href="#152610" label="[15:26:10]">&lt;oriansj&gt;</a></span><span class="message">janneke: it also makes it more introspectable when debugging</span></div><div class="line" id="152649"><span class="nick" style="color:#8dd3c7"><a href="#152649" label="[15:26:49]">&lt;oriansj&gt;</a></span><span class="message">I did something similar with Macros, so that we literally have a single point of pre macro expand and post macro expand to know if are macros are doing what we expect of them</span></div><div class="line" id="152752"><span class="nick" style="color:#2e2a4a"><a href="#152752" label="[15:27:52]">&lt;janneke&gt;</a></span><span class="message">this is all pretty exciting!</span></div><div class="line" id="152900"><span class="nick" style="color:#2e2a4a"><a href="#152900" label="[15:29:00]">&lt;janneke&gt;</a></span><span class="message">having m2-planet, the need for a true minimalistic C core is no more</span></div><div class="line" id="152931"><span class="nick" style="color:#8dd3c7"><a href="#152931" label="[15:29:31]">&lt;oriansj&gt;</a></span><span class="message">janneke: exactly, we have the freedom to not worry about lines of code but how understandable our code is</span></div><div class="line" id="152942"><span class="nick" style="color:#2e2a4a"><a href="#152942" label="[15:29:42]">&lt;janneke&gt;</a></span><span class="message">yes</span></div><div class="line" id="153014"><span class="nick" style="color:#8dd3c7"><a href="#153014" label="[15:30:14]">&lt;oriansj&gt;</a></span><span class="message">and the path for mes-m2 is to become a drop in replacement for guile;</span></div><div class="line" id="153046"><span class="nick" style="color:#2e2a4a"><a href="#153046" label="[15:30:46]">&lt;janneke&gt;</a></span><span class="message">that could be a reason to do certain things in scheme; and that's a much better reason than &quot;we need the core to not change and be minimal, because we need to hand-code it in assembly&quot;</span></div><div class="line" id="153058"><span class="nick" style="color:#2e2a4a"><a href="#153058" label="[15:30:58]">&lt;janneke&gt;</a></span><span class="message">yes</span></div><div class="line" id="153142"><span class="nick" style="color:#8dd3c7"><a href="#153142" label="[15:31:42]">&lt;oriansj&gt;</a></span><span class="message">so guix can be reduced down to just guile for now and when mes-m2 is done; we filp the switch once and boom everything is done</span></div><div class="line" id="153148"><span class="nick" style="color:#2e2a4a"><a href="#153148" label="[15:31:48]">&lt;janneke&gt;</a></span><span class="message">having these well-defined interfaces always gives us the freedom to move things from C to Scheme and vise versa</span></div><div class="line" id="153224"><span class="nick" style="color:#8dd3c7"><a href="#153224" label="[15:32:24]">&lt;oriansj&gt;</a></span><span class="message">It also allows all future guix hardware bootstraps have to deal with is the stage0 steps</span></div><div class="line" id="153235"><span class="nick" style="color:#8dd3c7"><a href="#153235" label="[15:32:35]">&lt;oriansj&gt;</a></span><span class="message">thus making porting of guix trivial</span></div><div class="line" id="153305"><span class="nick" style="color:#2e2a4a"><a href="#153305" label="[15:33:05]">&lt;janneke&gt;</a></span><span class="message">yes, civudul's initrd experiments help define what we need from guix to do a build</span></div><div class="line" id="153329"><span class="nick" style="color:#8dd3c7"><a href="#153329" label="[15:33:29]">&lt;oriansj&gt;</a></span><span class="message">janneke: actually I have something even better than initrd in the pipe</span></div><div class="line" id="153354"><span class="nick" style="color:#8dd3c7"><a href="#153354" label="[15:33:54]">&lt;oriansj&gt;</a></span><span class="message">building a posix from bare metal using cc_x86</span></div><div class="line" id="153419"><span class="nick" style="color:#8dd3c7"><a href="#153419" label="[15:34:19]">&lt;oriansj&gt;</a></span><span class="message">No need to trust a kernel at all</span></div><div class="line" id="153527"><span class="nick" style="color:#2e2a4a"><a href="#153527" label="[15:35:27]">&lt;janneke&gt;</a></span><span class="message">i think hannes will like that; sounds uni-kernel'ish</span></div><div class="line" id="153604"><span class="nick" style="color:#2e2a4a"><a href="#153604" label="[15:36:04]">&lt;janneke&gt;</a></span><span class="message">re initrd; i was referring to defining the guile compatibility target for mes</span></div><div class="line" id="153656"><span class="nick" style="color:#2e2a4a"><a href="#153656" label="[15:36:56]">&lt;janneke&gt;</a></span><span class="message">an initrd build is guile+(minimal guix).scm</span></div><div class="line" id="153709"><span class="nick" style="color:#2e2a4a"><a href="#153709" label="[15:37:09]">&lt;janneke&gt;</a></span><span class="message">we &quot;just&quot; need to =&gt; mes+(minimal guix).scm and we're done</span></div><div class="line" id="153724"><span class="nick" style="color:#8dd3c7"><a href="#153724" label="[15:37:24]">&lt;oriansj&gt;</a></span><span class="message">yep</span></div><div class="line" id="153736"><span class="nick" style="color:#2e2a4a"><a href="#153736" label="[15:37:36]">&lt;janneke&gt;</a></span><span class="message">so it's all orthogonal</span></div><div class="line" id="153830"><span class="nick" style="color:#8dd3c7"><a href="#153830" label="[15:38:30]">&lt;oriansj&gt;</a></span><span class="message">just keep marching down the path as usual. Find something blocking the road, break through it though sheer will</span></div><div class="line" id="153843"><span class="nick" style="color:#2e2a4a"><a href="#153843" label="[15:38:43]">&lt;janneke&gt;</a></span><span class="message">we may want to look at building on hurd, and try removing everything except the microkernel</span></div><div class="line" id="153900"><span class="nick" style="color:#2e2a4a"><a href="#153900" label="[15:39:00]">&lt;janneke&gt;</a></span><span class="message">the idea of cross-distro hash comparisons is very interesting</span></div><div class="line" id="153957"><span class="nick" style="color:#8dd3c7"><a href="#153957" label="[15:39:57]">&lt;oriansj&gt;</a></span><span class="message">janneke: well one will still need some posix compatibility in microkernels otherwise read/write become something much more complex</span></div><div class="line" id="154339"><span class="nick" style="color:#2e2a4a"><a href="#154339" label="[15:43:39]">&lt;janneke&gt;</a></span><span class="message">oriansj: yes, we need some open/read/write functionality but that could be real simple; we would not need a hurd filesystem daemon, e.g. even key-value store could work</span></div><div class="line" id="154344"><span class="nick" style="color:#8dd3c7"><a href="#154344" label="[15:43:44]">&lt;oriansj&gt;</a></span><span class="message">and I know you'll be excited by the fact that all M2-Planet builds are 100% deterministic (including cross-distro, cross-architecture and environment blind)</span></div><div class="line" id="154415"><span class="nick" style="color:#8dd3c7"><a href="#154415" label="[15:44:15]">&lt;oriansj&gt;</a></span><span class="message">and if I can do the same thing with mes-m2; well that makes for something very special</span></div><div class="line" id="164930"><span class="nick">***</span><span class="message notice">ng0_ is now known as ng0</span></div><div class="line" id="170410"><span class="nick" style="color:#8dd3c7"><a href="#170410" label="[17:04:10]">&lt;oriansj&gt;</a></span><span class="message">janneke: one thing we can do to speed up our scheme is to compile it and I was wdonering if you have seen Peter Norvig's compile1.lisp (a scheme compiler written in scheme)</span></div><div class="line" id="170517"><span class="nick" style="color:#2e2a4a"><a href="#170517" label="[17:05:17]">&lt;janneke&gt;</a></span><span class="message">oriansj: no, i haven't looked at compiling scheme or scheme compilers at all, really</span></div><div class="line" id="170604"><span class="nick" style="color:#2e2a4a"><a href="#170604" label="[17:06:04]">&lt;janneke&gt;</a></span><span class="message">i glanced at scheme48 three years ago and found it too unwieldy to really look</span></div><div class="line" id="170634"><span class="nick" style="color:#2e2a4a"><a href="#170634" label="[17:06:34]">&lt;janneke&gt;</a></span><span class="message">but it could be a good idea although at the moment speed is not an issue</span></div><div class="line" id="170653"><span class="nick" style="color:#2e2a4a"><a href="#170653" label="[17:06:53]">&lt;janneke&gt;</a></span><span class="message">when mescc matures it could become an issue :)</span></div><div class="line" id="171503"><span class="nick" style="color:#8dd3c7"><a href="#171503" label="[17:15:03]">&lt;oriansj&gt;</a></span><span class="message">well you know me, I am always thinking about how to start addressing problems long before we hit them.</span></div><div class="line" id="171727"><span class="nick" style="color:#8dd3c7"><a href="#171727" label="[17:17:27]">&lt;oriansj&gt;</a></span><span class="message">speaking of which, we really should take a serious look at building binutils directly from MesCC as a major priority in MesCC development</span></div><div class="line" id="173348"><span class="nick" style="color:#8dd3c7"><a href="#173348" label="[17:33:48]">&lt;oriansj&gt;</a></span><span class="message">(It will allow us to switch MesCC from producing M1-macro output to gas output and make the tooling for MesCC easier to maintain in the long run)</span></div><div class="line" id="173908"><span class="nick" style="color:#8dd3c7"><a href="#173908" label="[17:39:08]">&lt;oriansj&gt;</a></span><span class="message">and with the current expansion of mes-m2 into a drop-in replacement for guile, MesCC will be able to switch to guile by default and make MesCC a true competitor to GCC in the long run</span></div><div class="line" id="173936"><span class="nick" style="color:#8dd3c7"><a href="#173936" label="[17:39:36]">&lt;oriansj&gt;</a></span><span class="message">(Potentially beat clang too)</span></div><div class="line" id="174156"><span class="nick" style="color:#2e2a4a"><a href="#174156" label="[17:41:56]">&lt;janneke&gt;</a></span><span class="message">hmm, and then we need to rewrite gas in scheme ;-)</span></div><div class="line" id="181609"><span class="nick" style="color:#80b1d3"><a href="#181609" label="[18:16:09]">&lt;xentrac&gt;</a></span><span class="message">that doesn't sound too hard</span></div><div class="line" id="213335"><span class="nick" style="color:#6d2462"><a href="#213335" label="[21:33:35]">&lt;bitmapper&gt;</a></span><span class="message">rekado: hi!</span></div><div class="line" id="213340"><span class="nick" style="color:#6d2462"><a href="#213340" label="[21:33:40]">&lt;bitmapper&gt;</a></span><span class="message">i saw your post about nhc98</span></div><div class="line" id="213410"><span class="nick" style="color:#6d2462"><a href="#213410" label="[21:34:10]">&lt;bitmapper&gt;</a></span><span class="message">was wondering if you've made any progress on it since then</span></div><div class="line" id="213604"><span class="nick" style="color:#6d2462"><a href="#213604" label="[21:36:04]">&lt;bitmapper&gt;</a></span><span class="message">i'm interested in this for two very different reasons, to be honest</span></div><div class="line" id="213702"><span class="nick" style="color:#6d2462"><a href="#213702" label="[21:37:02]">&lt;bitmapper&gt;</a></span><span class="message">number one being that hugs has been ported to plan 9</span></div><div class="line" id="225303"><span class="nick" style="color:#234e69"><a href="#225303" label="[22:53:03]">&lt;dddddd&gt;</a></span><span class="message">Huang: Can We Build Trustable Hardware? <a rel="nofollow" href="https://lwn.net/Articles/808129/">https://lwn.net/Articles/808129/</a> </span></div><div class="line" id="230838"><span class="nick" style="color:#8dd3c7"><a href="#230838" label="[23:08:38]">&lt;oriansj&gt;</a></span><span class="message">janneke: or just let the binutils team deal with it and just use a fixed tree in MesCC that depends upon mescc-tools for the bootstrap of that piece and save us some trouble until we get a couple of schemers willing to do that work</span></div><div class="line" id="230849"><span class="nick" style="color:#8dd3c7"><a href="#230849" label="[23:08:49]">&lt;oriansj&gt;</a></span><span class="message">xentrac: exactly ^_^</span></div><div class="line" id="231243"><span class="nick" style="color:#8dd3c7"><a href="#231243" label="[23:12:43]">&lt;oriansj&gt;</a></span><span class="message">dddddd: well the answer to trustable hardware is based on how the process for lithography is done. Aka in the end you either need to make it out of TTL (or individual transistors) or trust the party making your chips.</span></div><div class="line" id="231447"><span class="nick" style="color:#8dd3c7"><a href="#231447" label="[23:14:47]">&lt;oriansj&gt;</a></span><span class="message">Now anything that we can do to make detecting underhanded things in the lithography process cheaper and make the financial penalty to the organization who does that work higher for violation; the lower the risk</span></div><div class="line" id="231534"><span class="nick" style="color:#8dd3c7"><a href="#231534" label="[23:15:34]">&lt;oriansj&gt;</a></span><span class="message">(aka you don't risk $1M when the other side only needs to spend $1 to catch you)</span></div><div class="line" id="231742"><span class="nick" style="color:#8dd3c7"><a href="#231742" label="[23:17:42]">&lt;oriansj&gt;</a></span><span class="message">aka be willing to pay $1 for a $0.01 part; if the manufactor is willing to risk $1M in penalities per chip if compromised.</span></div><div class="line" id="231930"><span class="nick" style="color:#8dd3c7"><a href="#231930" label="[23:19:30]">&lt;oriansj&gt;</a></span><span class="message">Heck be willing to spend $20 for a $0.01 part if the manufactor is willing to risk $10M in penalities per chip if compromised and that business will spend $5 per chip to ensure security.</span></div><div class="line" id="232707"><span class="nick" style="color:#80b1d3"><a href="#232707" label="[23:27:07]">&lt;xentrac&gt;</a></span><span class="message">perhaps we can inspect the chips with a ptychographic microscope</span></div><div class="line" id="232826"><span class="nick" style="color:#80b1d3"><a href="#232826" label="[23:28:26]">&lt;xentrac&gt;</a></span><span class="message">but constructing them myself sounds cheaper</span></div><div class="line" id="233107"><span class="nick" style="color:#8dd3c7"><a href="#233107" label="[23:31:07]">&lt;oriansj&gt;</a></span><span class="message">xentrac: well there is no way that you can know for certain if the backdoor is only in 1 in 100,000 chips</span></div><div class="line" id="233135"><span class="nick" style="color:#8dd3c7"><a href="#233135" label="[23:31:35]">&lt;oriansj&gt;</a></span><span class="message">also TTL computers are freaking expensive</span></div><div class="line" id="233147"><span class="nick" style="color:#80b1d3"><a href="#233147" label="[23:31:47]">&lt;xentrac&gt;</a></span><span class="message">perhaps we can compile on 100,000 chips and use the majority-rule compilation result</span></div><div class="line" id="233157"><span class="nick" style="color:#8dd3c7"><a href="#233157" label="[23:31:57]">&lt;oriansj&gt;</a></span><span class="message">(Think $10K+)</span></div><div class="line" id="233158"><span class="nick" style="color:#80b1d3"><a href="#233158" label="[23:31:58]">&lt;xentrac&gt;</a></span><span class="message">and decap the minority chips</span></div><div class="line" id="233222"><span class="nick" style="color:#80b1d3"><a href="#233222" label="[23:32:22]">&lt;xentrac&gt;</a></span><span class="message">nah, there are TTL computers you can build for under US$100</span></div><div class="line" id="233229"><span class="nick" style="color:#80b1d3"><a href="#233229" label="[23:32:29]">&lt;xentrac&gt;</a></span><span class="message">from SSI TTL</span></div><div class="line" id="233234"><span class="nick" style="color:#6d2462"><a href="#233234" label="[23:32:34]">&lt;bitmapper&gt;</a></span><span class="message">i know of someone working on EBL for chipfab</span></div><div class="line" id="233241"><span class="nick" style="color:#8dd3c7"><a href="#233241" label="[23:32:41]">&lt;oriansj&gt;</a></span><span class="message">Or do a compilation and then decap after you get the result</span></div><div class="line" id="233251"><span class="nick" style="color:#80b1d3"><a href="#233251" label="[23:32:51]">&lt;xentrac&gt;</a></span><span class="message">ah, good point</span></div><div class="line" id="233331"><span class="nick" style="color:#8dd3c7"><a href="#233331" label="[23:33:31]">&lt;oriansj&gt;</a></span><span class="message">Monster 6502 ended up costing $10K to build if I remember correctly</span></div><div class="line" id="233334"><span class="nick" style="color:#80b1d3"><a href="#233334" label="[23:33:34]">&lt;xentrac&gt;</a></span><span class="message">the MOnSter 6502 would cost thousands of dollars if someone were buying it</span></div><div class="line" id="233337"><span class="nick" style="color:#80b1d3"><a href="#233337" label="[23:33:37]">&lt;xentrac&gt;</a></span><span class="message">yeah</span></div><div class="line" id="233343"><span class="nick" style="color:#80b1d3"><a href="#233343" label="[23:33:43]">&lt;xentrac&gt;</a></span><span class="message">but it's not using TTL and it's not using any chips</span></div><div class="line" id="233506"><span class="nick" style="color:#80b1d3"><a href="#233506" label="[23:35:06]">&lt;xentrac&gt;</a></span><span class="message">it's NMOS IIRC, maybe CMOS</span></div><div class="line" id="233644"><span class="nick" style="color:#80b1d3"><a href="#233644" label="[23:36:44]">&lt;xentrac&gt;</a></span><span class="message">and things like the 74181 are worth quite a lot of discrete transistors</span></div><div class="line" id="233750"><span class="nick" style="color:#8dd3c7"><a href="#233750" label="[23:37:50]">&lt;oriansj&gt;</a></span><span class="message">well we would want to limit ourselves to only chips that are readily available all over the world and are trivial for any garage fab to make</span></div><div class="line" id="233834"><span class="nick" style="color:#80b1d3"><a href="#233834" label="[23:38:34]">&lt;xentrac&gt;</a></span><span class="message">right now I don't think there are any chips that are trivial for any garage fab to make</span></div><div class="line" id="233844"><span class="nick" style="color:#8dd3c7"><a href="#233844" label="[23:38:44]">&lt;oriansj&gt;</a></span><span class="message">But then again I view this as a process problem</span></div><div class="line" id="233923"><span class="nick" style="color:#80b1d3"><a href="#233923" label="[23:39:23]">&lt;xentrac&gt;</a></span><span class="message">but hopefully we can improve that situation</span></div><div class="line" id="233927"><span class="nick" style="color:#8dd3c7"><a href="#233927" label="[23:39:27]">&lt;oriansj&gt;</a></span><span class="message">right now we have garage fabs able to make nands and nors and simple SRAM</span></div><div class="line" id="233936"><span class="nick" style="color:#80b1d3"><a href="#233936" label="[23:39:36]">&lt;xentrac&gt;</a></span><span class="message">able to, yes, but not trivially</span></div><div class="line" id="233940"><span class="nick" style="color:#80b1d3"><a href="#233940" label="[23:39:40]">&lt;xentrac&gt;</a></span><span class="message">also I think just one</span></div><div class="line" id="233943"><span class="nick" style="color:#80b1d3"><a href="#233943" label="[23:39:43]">&lt;xentrac&gt;</a></span><span class="message">Sam Zeloof</span></div><div class="line" id="233953"><span class="nick" style="color:#8dd3c7"><a href="#233953" label="[23:39:53]">&lt;oriansj&gt;</a></span><span class="message">xentrac: true</span></div><div class="line" id="234018"><span class="nick" style="color:#80b1d3"><a href="#234018" label="[23:40:18]">&lt;xentrac&gt;</a></span><span class="message">whose last name mysteriously is &quot;fools&quot; backwards, so I'd like to see replication of his results</span></div><div class="line" id="234020"><span class="nick" style="color:#8dd3c7"><a href="#234020" label="[23:40:20]">&lt;oriansj&gt;</a></span><span class="message">but trivial in the anyone willing to do the work can get the results sort of trivial</span></div><div class="line" id="234055"><span class="nick" style="color:#80b1d3"><a href="#234055" label="[23:40:55]">&lt;xentrac&gt;</a></span><span class="message">I mean I think he's probably for real but we're a long way from &quot;anyone willing to do the work can get the results&quot;</span></div><div class="line" id="234119"><span class="nick" style="color:#8dd3c7"><a href="#234119" label="[23:41:19]">&lt;oriansj&gt;</a></span><span class="message">well we are just at the beginning of doing this work</span></div><div class="line" id="234122"><span class="nick" style="color:#80b1d3"><a href="#234122" label="[23:41:22]">&lt;xentrac&gt;</a></span><span class="message">yes</span></div><div class="line" id="234150"><span class="nick" style="color:#8dd3c7"><a href="#234150" label="[23:41:50]">&lt;oriansj&gt;</a></span><span class="message">3 years ago, people were telling me it was impossible to bootstrap a C compiler from assembly</span></div><div class="line" id="234206"><span class="nick" style="color:#8dd3c7"><a href="#234206" label="[23:42:06]">&lt;oriansj&gt;</a></span><span class="message">Now I've done it 3 different times</span></div><div class="line" id="234216"><span class="nick" style="color:#8dd3c7"><a href="#234216" label="[23:42:16]">&lt;oriansj&gt;</a></span><span class="message">(knight, x86 and AMD64)</span></div><div class="line" id="234222"><span class="nick" style="color:#80b1d3"><a href="#234222" label="[23:42:22]">&lt;xentrac&gt;</a></span><span class="message">those people were silly</span></div><div class="line" id="234248"><span class="nick" style="color:#80b1d3"><a href="#234248" label="[23:42:48]">&lt;xentrac&gt;</a></span><span class="message">as we found out, one of the most popular CP/M C compilers was written in assembly</span></div><div class="line" id="234259"><span class="nick" style="color:#80b1d3"><a href="#234259" label="[23:42:59]">&lt;xentrac&gt;</a></span><span class="message">and 8080 assembly at that, not a comfortable assembly like 386 or Knight</span></div><div class="line" id="234312"><span class="nick" style="color:#80b1d3"><a href="#234312" label="[23:43:12]">&lt;xentrac&gt;</a></span><span class="message">people just get way too intimidated by things</span></div><div class="line" id="234320"><span class="nick" style="color:#8dd3c7"><a href="#234320" label="[23:43:20]">&lt;oriansj&gt;</a></span><span class="message">xentrac: those people just were not  assembly programmers</span></div><div class="line" id="234335"><span class="nick" style="color:#80b1d3"><a href="#234335" label="[23:43:35]">&lt;xentrac&gt;</a></span><span class="message">speaking of which, I need to get back to hacking on PDf generation for Dercuano</span></div><div class="line" id="234346"><span class="nick" style="color:#8dd3c7"><a href="#234346" label="[23:43:46]">&lt;oriansj&gt;</a></span><span class="message">otherwise they were actually really good programmers</span></div><div class="line" id="234413"><span class="nick" style="color:#80b1d3"><a href="#234413" label="[23:44:13]">&lt;xentrac&gt;</a></span><span class="message">I hacked together a font cascade mechanism to get rid of the tofu but I still need to integrate it into the HTML rendering engine I wrote the other night</span></div><div class="line" id="234433"><span class="nick" style="color:#80b1d3"><a href="#234433" label="[23:44:33]">&lt;xentrac&gt;</a></span><span class="message">you can see lots of tofu in <a rel="nofollow" href="http://canonical.org/~kragen/dercuano.pre-20191229.pdf">http://canonical.org/~kragen/dercuano.pre-20191229.pdf</a> </span></div><div class="line" id="234442"><span class="nick" style="color:#8dd3c7"><a href="#234442" label="[23:44:42]">&lt;oriansj&gt;</a></span><span class="message">xentrac: and pandoc not an option?</span></div><div class="line" id="234459"><span class="nick" style="color:#80b1d3"><a href="#234459" label="[23:44:59]">&lt;xentrac&gt;</a></span><span class="message">dunno, haven't tried it</span></div><div class="line" id="234531"><span class="nick" style="color:#8dd3c7"><a href="#234531" label="[23:45:31]">&lt;oriansj&gt;</a></span><span class="message">So I expect we will be hitting lots of problems when doing the hardware bootstrap</span></div><div class="line" id="234536"><span class="nick" style="color:#80b1d3"><a href="#234536" label="[23:45:36]">&lt;xentrac&gt;</a></span><span class="message">probably should've</span></div><div class="line" id="234544"><span class="nick" style="color:#80b1d3"><a href="#234544" label="[23:45:44]">&lt;xentrac&gt;</a></span><span class="message">for sure</span></div><div class="line" id="234628"><span class="nick" style="color:#8dd3c7"><a href="#234628" label="[23:46:28]">&lt;oriansj&gt;</a></span><span class="message">I even have a plan to rewrite hex0, hex1, hex2 and M0 for knight if I end up needing to change the instruction encoding to simplify the implementation</span></div><div class="line" id="234639"><span class="nick" style="color:#80b1d3"><a href="#234639" label="[23:46:39]">&lt;xentrac&gt;</a></span><span class="message">nice!</span></div><div class="line" id="234819"><span class="nick" style="color:#8dd3c7"><a href="#234819" label="[23:48:19]">&lt;oriansj&gt;</a></span><span class="message">So, I expect failures and cheating and abuse but in the end, no one should have to trust me nor anyone else</span></div><div class="line" id="235839"><span class="nick" style="color:#8dd3c7"><a href="#235839" label="[23:58:39]">&lt;oriansj&gt;</a></span><span class="message">It is why anything in my code that isn't obvious is a bug that needs to be fixed</span></div><br /></div></body></html>