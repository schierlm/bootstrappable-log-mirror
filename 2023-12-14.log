<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-12-14.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="002433"><span class="nick" style="color:#389600"><a href="#002433" label="[00:24:33]">&lt;oriansj&gt;</a></span><span class="message">Guest25: well  I am guessing your mescc-tools hex2 did something wrong; as it should result in file permissions of 0750</span></div><div class="line" id="002506"><span class="nick" style="color:#389600"><a href="#002506" label="[00:25:06]">&lt;oriansj&gt;</a></span><span class="message">if it is unable to do so, it should atleast warn you with: Unable to change permissions\n</span></div><div class="line" id="002555"><span class="nick" style="color:#389600"><a href="#002555" label="[00:25:55]">&lt;oriansj&gt;</a></span><span class="message">cosinusoidally: definitely something worth exploring</span></div><div class="line" id="002604"><span class="nick" style="color:#389600"><a href="#002604" label="[00:26:04]">&lt;oriansj&gt;</a></span><span class="message">thank you for your hard work ^_^</span></div><div class="line" id="002752"><span class="nick" style="color:#8dd3c7"><a href="#002752" label="[00:27:52]">&lt;stikonas&gt;</a></span><span class="message">oriansj: well, with fossy's work on autogenerating live-bootstrap build scripts it might be easier to support multiple branches in the bootstrap</span></div><div class="line" id="002857"><span class="nick" style="color:#8dd3c7"><a href="#002857" label="[00:28:57]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/cdcc78394d1b4b0aa366ba447aebfb8107da351d/steps/manifest">https://github.com/fosslinux/live-bootstrap/blob/cdcc78394d1b4b0aa366ba447aebfb8107da351d/steps/manifest</a> </span></div><div class="line" id="003047"><span class="nick" style="color:#8dd3c7"><a href="#003047" label="[00:30:47]">&lt;stikonas&gt;</a></span><span class="message">it's much cleaner than gazillion of handwritten kaem and bash scripts with those build steps</span></div><div class="line" id="003141"><span class="nick" style="color:#389600"><a href="#003141" label="[00:31:41]">&lt;oriansj&gt;</a></span><span class="message">looks like a incremental apporach to declarative functional package management</span></div><div class="line" id="003311"><span class="nick" style="color:#389600"><a href="#003311" label="[00:33:11]">&lt;oriansj&gt;</a></span><span class="message">makes me wonder if we should resurrect the blynn-compiler work and do a proper package manager in the haskell subset it supports</span></div><div class="line" id="003919"><span class="nick" style="color:#389600"><a href="#003919" label="[00:39:19]">&lt;oriansj&gt;</a></span><span class="message">bringing a little gentoo USE flags and guix into the bootstrap</span></div><div class="line" id="004920"><span class="nick" style="color:#2e2a4a"><a href="#004920" label="[00:49:20]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Å tikonas&gt; Might be a bit overkill so early in the bootstrap</span></div><div class="line" id="005839"><span class="nick" style="color:#6b8072"><a href="#005839" label="[00:58:39]">&lt;Googulator&gt;</a></span><span class="message">Can mes run bootar?</span></div><div class="line" id="005900"><span class="nick" style="color:#6b8072"><a href="#005900" label="[00:59:00]">&lt;Googulator&gt;</a></span><span class="message">If it can, we get xz support as soon as we get mes running</span></div><div class="line" id="010005"><span class="nick" style="color:#6b8072"><a href="#010005" label="[01:00:05]">&lt;Googulator&gt;</a></span><span class="message">(at the cost of having to run Scheme code early in the bootstrap, which I'm not too fond of, given the extreme memory intensity almost rivalling AI...)</span></div><div class="line" id="010149"><span class="nick" style="color:#389600"><a href="#010149" label="[01:01:49]">&lt;oriansj&gt;</a></span><span class="message">Googulator: not yet if I remember correctly. But there is nothing stopping unxz from being added to mescc-tools-extra</span></div><div class="line" id="010248"><span class="nick" style="color:#389600"><a href="#010248" label="[01:02:48]">&lt;oriansj&gt;</a></span><span class="message">which already has unbz2, ungz and untar</span></div><div class="line" id="010321"><span class="nick" style="color:#389600"><a href="#010321" label="[01:03:21]">&lt;oriansj&gt;</a></span><span class="message">it'll probably be a week or two of work</span></div><div class="line" id="010358"><span class="nick" style="color:#6b8072"><a href="#010358" label="[01:03:58]">&lt;Googulator&gt;</a></span><span class="message">depends on the difficulty of writing an LZMA decompressor in m2 / mescc / tcc-compatible C, vs writing it in Mes-compatible Scheme</span></div><div class="line" id="010451"><span class="nick" style="color:#389600"><a href="#010451" label="[01:04:51]">&lt;oriansj&gt;</a></span><span class="message">well you can use an existing LZMA decompressor written in C and then just incrementally remove usages of C features that are not yet supported.</span></div><div class="line" id="010539"><span class="nick" style="color:#389600"><a href="#010539" label="[01:05:39]">&lt;oriansj&gt;</a></span><span class="message">(or depending on the usefulness of the C feature; I could add support for that feature in M2-Planet)</span></div><div class="line" id="010542"><span class="nick" style="color:#6b8072"><a href="#010542" label="[01:05:42]">&lt;Googulator&gt;</a></span><span class="message">isn't the existing LZMA decompressor C++?</span></div><div class="line" id="010652"><span class="nick" style="color:#6b8072"><a href="#010652" label="[01:06:52]">&lt;Googulator&gt;</a></span><span class="message">although we do bring up xz before g++, so I guess it must have a pure-C implementation of it</span></div><div class="line" id="010708"><span class="nick" style="color:#6b8072"><a href="#010708" label="[01:07:08]">&lt;Googulator&gt;</a></span><span class="message">but IIRC Igor Pavlov's original implementation is in C++</span></div><div class="line" id="010720"><span class="nick" style="color:#389600"><a href="#010720" label="[01:07:20]">&lt;oriansj&gt;</a></span><span class="message">there appears to be a C implementation: <a rel="nofollow" href="https://github.com/lloyd/easylzma/blob/master/src/pavlov/LzmaDec.c">https://github.com/lloyd/easylzma/blob/master/src/pavlov/LzmaDec.c</a> </span></div><div class="line" id="010813"><span class="nick" style="color:#389600"><a href="#010813" label="[01:08:13]">&lt;oriansj&gt;</a></span><span class="message">and another one: <a rel="nofollow" href="https://github.com/ionescu007/minlzma">https://github.com/ionescu007/minlzma</a> </span></div><div class="line" id="010857"><span class="nick" style="color:#6b8072"><a href="#010857" label="[01:08:57]">&lt;Googulator&gt;</a></span><span class="message">fossy: is this now stable enough to be worth porting to? <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/commit/cdcc78394d1b4b0aa366ba447aebfb8107da351d">https://github.com/fosslinux/live-bootstrap/commit/cdcc78394d1b4b0aa366ba447aebfb8107da351d</a> </span></div><div class="line" id="010901"><span class="nick" style="color:#389600"><a href="#010901" label="[01:09:01]">&lt;oriansj&gt;</a></span><span class="message">and we can probably find many more in pure C</span></div><div class="line" id="011310"><span class="nick" style="color:#80b1d3"><a href="#011310" label="[01:13:10]">&lt;muurkha&gt;</a></span><span class="message">there's some concerns about how well specified the xz format is (not lzma itself): <a rel="nofollow" href="https://lzip.nongnu.org/xz_inadequate.html">https://lzip.nongnu.org/xz_inadequate.html</a> </span></div><div class="line" id="011337"><span class="nick" style="color:#80b1d3"><a href="#011337" label="[01:13:37]">&lt;muurkha&gt;</a></span><span class="message">but maybe that doesn't matter if you're running a nailed-down set of xz files through a nailed-down version of xz</span></div><div class="line" id="011625"><span class="nick" style="color:#389600"><a href="#011625" label="[01:16:25]">&lt;oriansj&gt;</a></span><span class="message">muurkha: completely fair and there is nothing stopping us from a minimal xz spec to support a handful of files and later expanding to meet growing bootstrap needs for xz</span></div><div class="line" id="012256"><span class="nick" style="color:#389600"><a href="#012256" label="[01:22:56]">&lt;oriansj&gt;</a></span><span class="message">stikonas: and I'll just be fixing those M2libc formatting details</span></div><div class="line" id="013409"><span class="nick" style="color:#389600"><a href="#013409" label="[01:34:09]">&lt;oriansj&gt;</a></span><span class="message">and the use of unsigned long isn't going to work in M2-Planet but I can just replace that with SCM and it'll work</span></div><div class="line" id="013426"><span class="nick" style="color:#389600"><a href="#013426" label="[01:34:26]">&lt;oriansj&gt;</a></span><span class="message">(or ulong)</span></div><div class="line" id="015311"><span class="nick" style="color:#6b8072"><a href="#015311" label="[01:53:11]">&lt;Googulator&gt;</a></span><span class="message">I've been looking at closing the &quot;HTTP gap&quot; - turns out, we're downloading 27 files totalling 166MiB over plain HTTP between the 1st and 2nd builds of curl, of which 68MiB is nss which is only downloaded for certdata.txt</span></div><div class="line" id="015404"><span class="nick" style="color:#6b8072"><a href="#015404" label="[01:54:04]">&lt;Googulator&gt;</a></span><span class="message">so about 100MiB if we ship certdata.txt ourself</span></div><div class="line" id="015454"><span class="nick" style="color:#6b8072"><a href="#015454" label="[01:54:54]">&lt;Googulator&gt;</a></span><span class="message">still too much to just shove into srcfs and expect to stay below 256MiB</span></div><div class="line" id="015950"><span class="nick" style="color:#6b8072"><a href="#015950" label="[01:59:50]">&lt;Googulator&gt;</a></span><span class="message">Recompressing it all as xz pushes it to 58MiB - combined with bz2 recompression of everything that comes before network, we might just fit the 256MiB limit</span></div><div class="line" id="020054"><span class="nick" style="color:#389600"><a href="#020054" label="[02:00:54]">&lt;oriansj&gt;</a></span><span class="message">stikonas: we might want to think about another M2libc release soon</span></div><div class="line" id="020624"><span class="nick" style="color:#6b8072"><a href="#020624" label="[02:06:24]">&lt;Googulator&gt;</a></span><span class="message">ok, recompression alone won't help, we end up with a 285MiB srcfs</span></div><div class="line" id="020726"><span class="nick" style="color:#6b8072"><a href="#020726" label="[02:07:26]">&lt;Googulator&gt;</a></span><span class="message">assuming ideal compression</span></div><div class="line" id="021140"><span class="nick" style="color:#8dd3c7"><a href="#021140" label="[02:11:40]">&lt;stikonas&gt;</a></span><span class="message">oriansj: yeah, and perhaps M2-Planet</span></div><div class="line" id="021143"><span class="nick" style="color:#6b8072"><a href="#021143" label="[02:11:43]">&lt;Googulator&gt;</a></span><span class="message">with unxz.c or other early XZ decompression, we can get down to 215MiB</span></div><div class="line" id="021231"><span class="nick" style="color:#6b8072"><a href="#021231" label="[02:12:31]">&lt;Googulator&gt;</a></span><span class="message">including everything needed for HTTPS downloads</span></div><div class="line" id="021317"><span class="nick" style="color:#6b8072"><a href="#021317" label="[02:13:17]">&lt;Googulator&gt;</a></span><span class="message">of course, I cheated a bit here and used solid compression - in practice, we could only recompress individual tarballs</span></div><div class="line" id="021335"><span class="nick" style="color:#6b8072"><a href="#021335" label="[02:13:35]">&lt;Googulator&gt;</a></span><span class="message">at least before we move to disk</span></div><div class="line" id="021418"><span class="nick" style="color:#6b8072"><a href="#021418" label="[02:14:18]">&lt;Googulator&gt;</a></span><span class="message">but I would still be much happier if we could postpone steps to after HTTPS is available</span></div><div class="line" id="021502"><span class="nick" style="color:#8dd3c7"><a href="#021502" label="[02:15:02]">&lt;stikonas&gt;</a></span><span class="message">Googulator: slightly different question: remember we discussed it makes sense to do first posix kernel in UEFI to be builder-hex0.efi or something like that. But can we easily do that, probably posix binaries that we use, will want to use specific memory addresses</span></div><div class="line" id="021512"><span class="nick" style="color:#8dd3c7"><a href="#021512" label="[02:15:12]">&lt;stikonas&gt;</a></span><span class="message">and we might not be able to get those blocks from UEFI...</span></div><div class="line" id="021554"><span class="nick" style="color:#6b8072"><a href="#021554" label="[02:15:54]">&lt;Googulator&gt;</a></span><span class="message">...because our binaries aren't relocatable?</span></div><div class="line" id="021625"><span class="nick" style="color:#8dd3c7"><a href="#021625" label="[02:16:25]">&lt;stikonas&gt;</a></span><span class="message">hmm, some might be</span></div><div class="line" id="021645"><span class="nick" style="color:#8dd3c7"><a href="#021645" label="[02:16:45]">&lt;stikonas&gt;</a></span><span class="message">at least stage0-posix has all but kaem-optional.hex0 relocatable</span></div><div class="line" id="021651"><span class="nick" style="color:#8dd3c7"><a href="#021651" label="[02:16:51]">&lt;stikonas&gt;</a></span><span class="message">and we can make that relocatable too</span></div><div class="line" id="021701"><span class="nick" style="color:#8dd3c7"><a href="#021701" label="[02:17:01]">&lt;stikonas&gt;</a></span><span class="message">not sure what happens in mes and tcc though</span></div><div class="line" id="021753"><span class="nick" style="color:#8dd3c7"><a href="#021753" label="[02:17:53]">&lt;stikonas&gt;</a></span><span class="message">also it might be hard to implement brk :(</span></div><div class="line" id="021759"><span class="nick" style="color:#6b8072"><a href="#021759" label="[02:17:59]">&lt;Googulator&gt;</a></span><span class="message">UEFI itself provides no means for paging, right?</span></div><div class="line" id="021826"><span class="nick" style="color:#8dd3c7"><a href="#021826" label="[02:18:26]">&lt;stikonas&gt;</a></span><span class="message">well, in UEFI you can request memory pages, but I don't think you can configure MMU there</span></div><div class="line" id="021844"><span class="nick" style="color:#8dd3c7"><a href="#021844" label="[02:18:44]">&lt;stikonas&gt;</a></span><span class="message">we could e.g. request 100 MiB or so of continuous memory</span></div><div class="line" id="021852"><span class="nick" style="color:#8dd3c7"><a href="#021852" label="[02:18:52]">&lt;stikonas&gt;</a></span><span class="message">but even that might not be enough for mes</span></div><div class="line" id="021912"><span class="nick" style="color:#8dd3c7"><a href="#021912" label="[02:19:12]">&lt;stikonas&gt;</a></span><span class="message">and mes doesn't request all in one go...</span></div><div class="line" id="022026"><span class="nick" style="color:#8dd3c7"><a href="#022026" label="[02:20:26]">&lt;stikonas&gt;</a></span><span class="message">hmm, tricky...</span></div><div class="line" id="022033"><span class="nick" style="color:#6b8072"><a href="#022033" label="[02:20:33]">&lt;Googulator&gt;</a></span><span class="message">what do we use brk for? It's deprecated since 1997 at least.</span></div><div class="line" id="022049"><span class="nick" style="color:#8dd3c7"><a href="#022049" label="[02:20:49]">&lt;stikonas&gt;</a></span><span class="message">Googulator: M2libc and meslibc generally requests memory via brk</span></div><div class="line" id="022055"><span class="nick" style="color:#8dd3c7"><a href="#022055" label="[02:20:55]">&lt;stikonas&gt;</a></span><span class="message">maybe we could change that...</span></div><div class="line" id="022125"><span class="nick" style="color:#8dd3c7"><a href="#022125" label="[02:21:25]">&lt;stikonas&gt;</a></span><span class="message">well, for stage0-posix it really is the simplest way</span></div><div class="line" id="022128"><span class="nick" style="color:#6b8072"><a href="#022128" label="[02:21:28]">&lt;Googulator&gt;</a></span><span class="message">notably POSIX.1-2001 doesn't even consider brk and sbrk to be standard system calls anymore</span></div><div class="line" id="022221"><span class="nick" style="color:#6b8072"><a href="#022221" label="[02:22:21]">&lt;Googulator&gt;</a></span><span class="message">POSIX.1-1998 is the last one to mention them, specifically to declare them deprecated and warn that a compliant system may not even provide a real implementation - the only requirement is that it must error out if not actually implemented</span></div><div class="line" id="022234"><span class="nick" style="color:#8dd3c7"><a href="#022234" label="[02:22:34]">&lt;stikonas&gt;</a></span><span class="message">yet it is still working in 2023...</span></div><div class="line" id="022252"><span class="nick" style="color:#6b8072"><a href="#022252" label="[02:22:52]">&lt;Googulator&gt;</a></span><span class="message">working on _some_ kernels, that is</span></div><div class="line" id="022305"><span class="nick" style="color:#6b8072"><a href="#022305" label="[02:23:05]">&lt;Googulator&gt;</a></span><span class="message">luckily that includes builder-hex0, Fiwix and Linux</span></div><div class="line" id="022308"><span class="nick" style="color:#8dd3c7"><a href="#022308" label="[02:23:08]">&lt;stikonas&gt;</a></span><span class="message">indeed</span></div><div class="line" id="022310"><span class="nick" style="color:#6b8072"><a href="#022310" label="[02:23:10]">&lt;Googulator&gt;</a></span><span class="message">but notably not xnu</span></div><div class="line" id="022323"><span class="nick" style="color:#8dd3c7"><a href="#022323" label="[02:23:23]">&lt;stikonas&gt;</a></span><span class="message">well, perhaps we need to add mmap and munmap</span></div><div class="line" id="022336"><span class="nick" style="color:#8dd3c7"><a href="#022336" label="[02:23:36]">&lt;stikonas&gt;</a></span><span class="message">(or whatever is used instead of brk)</span></div><div class="line" id="022343"><span class="nick" style="color:#6b8072"><a href="#022343" label="[02:23:43]">&lt;Googulator&gt;</a></span><span class="message">mmap is the replacement</span></div><div class="line" id="022505"><span class="nick" style="color:#8dd3c7"><a href="#022505" label="[02:25:05]">&lt;stikonas&gt;</a></span><span class="message">well, for stage0-uefi we had a solution there</span></div><div class="line" id="022510"><span class="nick" style="color:#8dd3c7"><a href="#022510" label="[02:25:10]">&lt;stikonas&gt;</a></span><span class="message">but it might not scale to mes...</span></div><div class="line" id="022607"><span class="nick" style="color:#6b8072"><a href="#022607" label="[02:26:07]">&lt;Googulator&gt;</a></span><span class="message">Does mes require one large contiguous allocation?</span></div><div class="line" id="022608"><span class="nick" style="color:#8dd3c7"><a href="#022608" label="[02:26:08]">&lt;stikonas&gt;</a></span><span class="message">oh, actually we might not be using brk directly there</span></div><div class="line" id="022612"><span class="nick" style="color:#8dd3c7"><a href="#022612" label="[02:26:12]">&lt;stikonas&gt;</a></span><span class="message">probably not</span></div><div class="line" id="022619"><span class="nick" style="color:#8dd3c7"><a href="#022619" label="[02:26:19]">&lt;stikonas&gt;</a></span><span class="message">it will only affect speed anyway</span></div><div class="line" id="022640"><span class="nick" style="color:#8dd3c7"><a href="#022640" label="[02:26:40]">&lt;stikonas&gt;</a></span><span class="message">so I just checked M2libc/uefi defines brk to return -1</span></div><div class="line" id="022651"><span class="nick" style="color:#8dd3c7"><a href="#022651" label="[02:26:51]">&lt;stikonas&gt;</a></span><span class="message">calloc just never uses it</span></div><div class="line" id="022721"><span class="nick" style="color:#6b8072"><a href="#022721" label="[02:27:21]">&lt;Googulator&gt;</a></span><span class="message">If mes can tolerate e.g. 10 blocks of 100MiB each, that should be doable using UEFI memory allocations</span></div><div class="line" id="022800"><span class="nick" style="color:#8dd3c7"><a href="#022800" label="[02:28:00]">&lt;stikonas&gt;</a></span><span class="message">I imagine mes will call calloc gazillion of times with some small allocations</span></div><div class="line" id="022815"><span class="nick" style="color:#8dd3c7"><a href="#022815" label="[02:28:15]">&lt;stikonas&gt;</a></span><span class="message">but posix ELF binaries right now have calloc -&gt; brk</span></div><div class="line" id="022823"><span class="nick" style="color:#6b8072"><a href="#022823" label="[02:28:23]">&lt;Googulator&gt;</a></span><span class="message">I'm hoping nothing actually relies on brk's contiguous extension behavior</span></div><div class="line" id="022829"><span class="nick" style="color:#8dd3c7"><a href="#022829" label="[02:28:29]">&lt;stikonas&gt;</a></span><span class="message">so perhaps we just it calloc-&gt;mmap</span></div><div class="line" id="022843"><span class="nick" style="color:#8dd3c7"><a href="#022843" label="[02:28:43]">&lt;stikonas&gt;</a></span><span class="message">probably nothing</span></div><div class="line" id="022846"><span class="nick" style="color:#8dd3c7"><a href="#022846" label="[02:28:46]">&lt;stikonas&gt;</a></span><span class="message">so maybe it would just work</span></div><div class="line" id="022855"><span class="nick" style="color:#8dd3c7"><a href="#022855" label="[02:28:55]">&lt;stikonas&gt;</a></span><span class="message">perhaps I was too scared...</span></div><div class="line" id="022858"><span class="nick" style="color:#6b8072"><a href="#022858" label="[02:28:58]">&lt;Googulator&gt;</a></span><span class="message">calloc certainly comes with no guarantee that what you get will be contiguous with a previous allocation</span></div><div class="line" id="022910"><span class="nick" style="color:#8dd3c7"><a href="#022910" label="[02:29:10]">&lt;stikonas&gt;</a></span><span class="message">no, but calloc itself will have to be improved</span></div><div class="line" id="022912"><span class="nick" style="color:#6b8072"><a href="#022912" label="[02:29:12]">&lt;Googulator&gt;</a></span><span class="message">just that it will be _internally_ contiguous</span></div><div class="line" id="022913"><span class="nick" style="color:#8dd3c7"><a href="#022913" label="[02:29:13]">&lt;stikonas&gt;</a></span><span class="message">right now assumption</span></div><div class="line" id="022931"><span class="nick" style="color:#8dd3c7"><a href="#022931" label="[02:29:31]">&lt;stikonas&gt;</a></span><span class="message">is that if brk limit is reached, call brk to get more memory and continue from the earlier block</span></div><div class="line" id="023038"><span class="nick" style="color:#8dd3c7"><a href="#023038" label="[02:30:38]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/mes.git/tree/lib/linux/malloc.c">https://git.savannah.gnu.org/cgit/mes.git/tree/lib/linux/malloc.c</a> </span></div><div class="line" id="023139"><span class="nick" style="color:#8dd3c7"><a href="#023139" label="[02:31:39]">&lt;stikonas&gt;</a></span><span class="message">here M2libc actually has far more sophisticated implementation <a rel="nofollow" href="https://github.com/oriansj/M2libc/blob/main/stdlib.c">https://github.com/oriansj/M2libc/blob/main/stdlib.c</a> </span></div><div class="line" id="023222"><span class="nick" style="color:#8dd3c7"><a href="#023222" label="[02:32:22]">&lt;stikonas&gt;</a></span><span class="message">so perhaps we just need to improve mes/lib/linux/malloc.c</span></div><div class="line" id="023317"><span class="nick" style="color:#8dd3c7"><a href="#023317" label="[02:33:17]">&lt;stikonas&gt;</a></span><span class="message">anyway, thanks for discussion</span></div><div class="line" id="023324"><span class="nick" style="color:#8dd3c7"><a href="#023324" label="[02:33:24]">&lt;stikonas&gt;</a></span><span class="message">things are a bit clearer now</span></div><div class="line" id="023337"><span class="nick" style="color:#8dd3c7"><a href="#023337" label="[02:33:37]">&lt;stikonas&gt;</a></span><span class="message">though I first need to fix uefi bootstrap binaries to work :(</span></div><div class="line" id="023414"><span class="nick" style="color:#8dd3c7"><a href="#023414" label="[02:34:14]">&lt;stikonas&gt;</a></span><span class="message">somehow pushing rbp to stack at the beginning of the program breaks my test in QEMU, but without that it doesn't work on real HW...</span></div><div class="line" id="023420"><span class="nick" style="color:#8dd3c7"><a href="#023420" label="[02:34:20]">&lt;stikonas&gt;</a></span><span class="message">probably something more complicated is going on...</span></div><div class="line" id="023624"><span class="nick" style="color:#6b8072"><a href="#023624" label="[02:36:24]">&lt;Googulator&gt;</a></span><span class="message">Also note: per POSIX, &quot; These interfaces need not be reentrant. &quot;</span></div><div class="line" id="023711"><span class="nick" style="color:#6b8072"><a href="#023711" label="[02:37:11]">&lt;Googulator&gt;</a></span><span class="message">As in, you're supposed to call brk or sbrk at most once in a process's lifetime, even according to the older standard that still defines them at all,</span></div><div class="line" id="023718"><span class="nick" style="color:#6b8072"><a href="#023718" label="[02:37:18]">&lt;Googulator&gt;</a></span><span class="message">.</span></div><div class="line" id="023741"><span class="nick" style="color:#6b8072"><a href="#023741" label="[02:37:41]">&lt;Googulator&gt;</a></span><span class="message">What mes is doing is anything but POSIX.</span></div><div class="line" id="023750"><span class="nick" style="color:#8dd3c7"><a href="#023750" label="[02:37:50]">&lt;stikonas&gt;</a></span><span class="message">well, both M2libc and mes is abusing posix then...</span></div><div class="line" id="023802"><span class="nick" style="color:#8dd3c7"><a href="#023802" label="[02:38:02]">&lt;stikonas&gt;</a></span><span class="message">but how were you supposed to get more memory then?</span></div><div class="line" id="023808"><span class="nick" style="color:#8dd3c7"><a href="#023808" label="[02:38:08]">&lt;stikonas&gt;</a></span><span class="message">back in the pre mmap days</span></div><div class="line" id="023820"><span class="nick" style="color:#6b8072"><a href="#023820" label="[02:38:20]">&lt;Googulator&gt;</a></span><span class="message">You were supposed to know your memory needs in advance.</span></div><div class="line" id="023850"><span class="nick" style="color:#8dd3c7"><a href="#023850" label="[02:38:50]">&lt;stikonas&gt;</a></span><span class="message">man brk definitely doesn't talk about reentrancy</span></div><div class="line" id="024016"><span class="nick" style="color:#6b8072"><a href="#024016" label="[02:40:16]">&lt;Googulator&gt;</a></span><span class="message">probably because it was never an issue on Linux</span></div><div class="line" id="024025"><span class="nick" style="color:#6b8072"><a href="#024025" label="[02:40:25]">&lt;Googulator&gt;</a></span><span class="message">but Linux != POSIX</span></div><div class="line" id="024039"><span class="nick" style="color:#8dd3c7"><a href="#024039" label="[02:40:39]">&lt;stikonas&gt;</a></span><span class="message">yeah, I understand...</span></div><div class="line" id="024135"><span class="nick" style="color:#6b8072"><a href="#024135" label="[02:41:35]">&lt;Googulator&gt;</a></span><span class="message">also, POSIX considers the actual interface used by libc's implementation of malloc to be an implementation detail</span></div><div class="line" id="024236"><span class="nick" style="color:#8dd3c7"><a href="#024236" label="[02:42:36]">&lt;stikonas&gt;</a></span><span class="message">yeah, so apps should be fine</span></div><div class="line" id="024244"><span class="nick" style="color:#8dd3c7"><a href="#024244" label="[02:42:44]">&lt;stikonas&gt;</a></span><span class="message">but meslibc will need some fixes</span></div><div class="line" id="024253"><span class="nick" style="color:#8dd3c7"><a href="#024253" label="[02:42:53]">&lt;stikonas&gt;</a></span><span class="message">which is fine...</span></div><div class="line" id="024312"><span class="nick" style="color:#80b1d3"><a href="#024312" label="[02:43:12]">&lt;muurkha&gt;</a></span><span class="message">ACTION sips coffee, watching the flames</span></div><div class="line" id="024536"><span class="nick" style="color:#6b8072"><a href="#024536" label="[02:45:36]">&lt;Googulator&gt;</a></span><span class="message">How accurate is <a rel="nofollow" href="https://bootstrapping.miraheze.org/wiki/Live-bootstrap">https://bootstrapping.miraheze.org/wiki/Live-bootstrap</a>  these days?</span></div><div class="line" id="024555"><span class="nick" style="color:#6b8072"><a href="#024555" label="[02:45:55]">&lt;Googulator&gt;</a></span><span class="message">Some parts are clearly outdated (e.g. we don't have make 3.80 anymore, and no mention of Fiwix)</span></div><div class="line" id="025152"><span class="nick" style="color:#2e2a4a"><a href="#025152" label="[02:51:52]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Å tikonas&gt; Googulator: yeah, its an old snapshot of parts.rst</span></div><div class="line" id="025210"><span class="nick" style="color:#2e2a4a"><a href="#025210" label="[02:52:10]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Å tikonas&gt; We shouldn't really duplicate it there</span></div><div class="line" id="025304"><span class="nick" style="color:#2e2a4a"><a href="#025304" label="[02:53:04]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Å tikonas&gt; Ideally link to parts.rst rather than old snapshot</span></div><div class="line" id="025631"><span class="nick" style="color:#6b8072"><a href="#025631" label="[02:56:31]">&lt;Googulator&gt;</a></span><span class="message">Why do we even build coreutils 6.10 immediately after 5.0?</span></div><div class="line" id="030015"><span class="nick" style="color:#6b8072"><a href="#030015" label="[03:00:15]">&lt;Googulator&gt;</a></span><span class="message">oh, mktemp...</span></div><div class="line" id="030321"><span class="nick" style="color:#6b8072"><a href="#030321" label="[03:03:21]">&lt;Googulator&gt;</a></span><span class="message">coreutils 6.10 would be great to get rid of, as it's almost 9MiB</span></div><div class="line" id="030334"><span class="nick" style="color:#6b8072"><a href="#030334" label="[03:03:34]">&lt;Googulator&gt;</a></span><span class="message">interestingly, both 5.0 and 8.32 are waaaay smaller</span></div><div class="line" id="030621"><span class="nick" style="color:#2e2a4a"><a href="#030621" label="[03:06:21]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Å tikonas&gt; Googulator: might be sha256sum too</span></div><div class="line" id="030650"><span class="nick" style="color:#6b8072"><a href="#030650" label="[03:06:50]">&lt;Googulator&gt;</a></span><span class="message">Do we really need another sha256sum at this stage?</span></div><div class="line" id="030727"><span class="nick" style="color:#6b8072"><a href="#030727" label="[03:07:27]">&lt;Googulator&gt;</a></span><span class="message">Won't the bootstrap one suffice until we build coreutils 8.32?</span></div><div class="line" id="031038"><span class="nick" style="color:#6d2462"><a href="#031038" label="[03:10:38]">&lt;deesix&gt;</a></span><span class="message">Googulator, you mean &quot;call brk or sbrk at most once in a process's lifetime&quot; because &quot;need not be reentrant&quot;?</span></div><div class="line" id="031108"><span class="nick" style="color:#6b8072"><a href="#031108" label="[03:11:08]">&lt;Googulator&gt;</a></span><span class="message">That's certainly how I interpret it.</span></div><div class="line" id="031237"><span class="nick" style="color:#6d2462"><a href="#031237" label="[03:12:37]">&lt;deesix&gt;</a></span><span class="message">IFAIU, reentrant is about calls from multiple threads, not about the complete lifetime.</span></div><div class="line" id="031414"><span class="nick" style="color:#6b8072"><a href="#031414" label="[03:14:14]">&lt;Googulator&gt;</a></span><span class="message">that sounds more like thread safety than reentrancy</span></div><div class="line" id="031453"><span class="nick" style="color:#6d2462"><a href="#031453" label="[03:14:53]">&lt;deesix&gt;</a></span><span class="message">Same thing, basically, indeed.</span></div><div class="line" id="031506"><span class="nick" style="color:#6b8072"><a href="#031506" label="[03:15:06]">&lt;Googulator&gt;</a></span><span class="message">IIRC in a threaded context, reentrancy is specifically about calling the same code twice _from the same thread_</span></div><div class="line" id="031619"><span class="nick" style="color:#80b1d3"><a href="#031619" label="[03:16:19]">&lt;muurkha&gt;</a></span><span class="message">no</span></div><div class="line" id="031645"><span class="nick" style="color:#80b1d3"><a href="#031645" label="[03:16:45]">&lt;muurkha&gt;</a></span><span class="message">at least that's not how I've understood it</span></div><div class="line" id="031724"><span class="nick" style="color:#80b1d3"><a href="#031724" label="[03:17:24]">&lt;muurkha&gt;</a></span><span class="message">the way I understand the term, code that isn't re-entrant at all can't be made thread-safe (except by wrapping it in a mutex to ensure that only one thread can ever be in it)</span></div><div class="line" id="031751"><span class="nick" style="color:#80b1d3"><a href="#031751" label="[03:17:51]">&lt;muurkha&gt;</a></span><span class="message">but multiple threads isn't the only way you can hit re-entrancy problems</span></div><div class="line" id="031758"><span class="nick" style="color:#80b1d3"><a href="#031758" label="[03:17:58]">&lt;muurkha&gt;</a></span><span class="message">recursion and interrupts are two others</span></div><div class="line" id="031833"><span class="nick" style="color:#80b1d3"><a href="#031833" label="[03:18:33]">&lt;muurkha&gt;</a></span><span class="message">and mutexes don't help with those</span></div><div class="line" id="031924"><span class="nick" style="color:#80b1d3"><a href="#031924" label="[03:19:24]">&lt;muurkha&gt;</a></span><span class="message">but code that isn't re-entrant at all can still be called safely many times from the same thread, or in a single-threaded process</span></div><div class="line" id="031931"><span class="nick" style="color:#80b1d3"><a href="#031931" label="[03:19:31]">&lt;muurkha&gt;</a></span><span class="message">as long as it returns before each new call!</span></div><div class="line" id="032033"><span class="nick" style="color:#80b1d3"><a href="#032033" label="[03:20:33]">&lt;muurkha&gt;</a></span><span class="message">the issue with brk or sbrk not being re-entrant in traditional (non-threaded!) Unix is that malloc commonly calls sbrk, and it's easy to accidentally write an interrupt handler that calls malloc</span></div><div class="line" id="032135"><span class="nick" style="color:#80b1d3"><a href="#032135" label="[03:21:35]">&lt;muurkha&gt;</a></span><span class="message"> <a rel="nofollow" href="https://en.wikipedia.org/wiki/Reentrancy_">https://en.wikipedia.org/wiki/Reentrancy_</a>(computing)  says, &quot;A computer program or subroutine is called reentrant if multiple invocations can safely run concurrently on multiple processors, or if on a single-processor system its execution can be interrupted and a new execution of it can be safely started (it can be &quot;re-entered&quot;). The interruption could be caused by an internal action such as a jump</span></div><div class="line" id="032141"><span class="nick" style="color:#80b1d3"><a href="#032141" label="[03:21:41]">&lt;muurkha&gt;</a></span><span class="message">or call, or by an external action such as an interrupt or signal, unlike recursion, where new invocations can only be caused by internal call.&quot;</span></div><div class="line" id="032411"><span class="nick" style="color:#80b1d3"><a href="#032411" label="[03:24:11]">&lt;muurkha&gt;</a></span><span class="message">the article has handy examples of things that are neither thread-safe nor reentrant, thread-safe but not reentrant (which I said was impossible), and both reentrant and thread-safe</span></div><div class="line" id="032549"><span class="nick" style="color:#80b1d3"><a href="#032549" label="[03:25:49]">&lt;muurkha&gt;</a></span><span class="message">so I guess it agrees with Googulator on the definition</span></div><div class="line" id="032822"><span class="nick" style="color:#6d2462"><a href="#032822" label="[03:28:22]">&lt;deesix&gt;</a></span><span class="message">I handwave-y &quot;basically&quot; because, one way or the other... nothing seems related to the whole &quot;lifetime&quot; and not be able to call brk more than once, which sounds very weird to me.</span></div><div class="line" id="032955"><span class="nick" style="color:#6b8072"><a href="#032955" label="[03:29:55]">&lt;Googulator&gt;</a></span><span class="message">I wonder what's the term for a procedure that can only be called once in a context, because it doesn't clean up after itself</span></div><div class="line" id="033018"><span class="nick" style="color:#6b8072"><a href="#033018" label="[03:30:18]">&lt;Googulator&gt;</a></span><span class="message">I always thought that's what &quot;reentrancy&quot; meant, not merely interrupt safety</span></div><div class="line" id="033315"><span class="nick" style="color:#6b8072"><a href="#033315" label="[03:33:15]">&lt;Googulator&gt;</a></span><span class="message">&quot;Bison 3.4.1 is buggy and segfaults when perl 5.32.1 is built. This is probably because it was built with a hand-written makefile. We do not build the latest bison because perl 5.32.1 requires bison &lt;= 3.4.2.&quot;</span></div><div class="line" id="033316"><span class="nick" style="color:#6b8072"><a href="#033316" label="[03:33:16]">&lt;Googulator&gt;</a></span><span class="message">That sounds like the difference is in how it's built, not the actual version. Why use both then?</span></div><div class="line" id="033349"><span class="nick" style="color:#6b8072"><a href="#033349" label="[03:33:49]">&lt;Googulator&gt;</a></span><span class="message">Rather than just rebuilding 3.4.1 with proper build system the 2nd time, or using 3.4.2 with the special makefile.</span></div><div class="line" id="033541"><span class="nick" style="color:#80b1d3"><a href="#033541" label="[03:35:41]">&lt;muurkha&gt;</a></span><span class="message">Googulator: maybe &quot;unusably buggy&quot;?</span></div><div class="line" id="033711"><span class="nick" style="color:#6b8072"><a href="#033711" label="[03:37:11]">&lt;Googulator&gt;</a></span><span class="message">Such a situation can commonly emerge when converting a standalone command line program into a library, or when adding a GUI or other interactive mode - and I've seen bugs related to this called reentrancy issues.</span></div><div class="line" id="042842"><span class="nick" style="color:#2e2a4a"><a href="#042842" label="[04:28:42]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Å tikonas&gt; Googulator: bootstrap sha256sum has bugs with large files</span></div><div class="line" id="042935"><span class="nick" style="color:#6b8072"><a href="#042935" label="[04:29:35]">&lt;Googulator&gt;</a></span><span class="message">I guess we need to keep it before binutils/linux then</span></div><div class="line" id="043336"><span class="nick" style="color:#6b8072"><a href="#043336" label="[04:33:36]">&lt;Googulator&gt;</a></span><span class="message">Any idea why we download coreutils 8.32 from savannah-git (much smaller tarball, presumably without pregen files), but 5.0 and 6.10 from ftp.gnu.org?</span></div><div class="line" id="043407"><span class="nick" style="color:#6b8072"><a href="#043407" label="[04:34:07]">&lt;Googulator&gt;</a></span><span class="message">also note: git.savannah.gnu.org/cgit/coreutils.git/snapshot/coreutils-8.32.tar.bz2 works (we currently use gz here)</span></div><div class="line" id="043443"><span class="nick" style="color:#6b8072"><a href="#043443" label="[04:34:43]">&lt;Googulator&gt;</a></span><span class="message">in fact, we can even get xz from savannah, e.g. <a rel="nofollow" href="http://git.savannah.gnu.org/cgit/coreutils.git/snapshot/coreutils-6.10.tar.xz">http://git.savannah.gnu.org/cgit/coreutils.git/snapshot/coreutils-6.10.tar.xz</a> </span></div><div class="line" id="102040"><span class="nick" style="color:#2e2a4a"><a href="#102040" label="[10:20:40]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Å tikonas&gt; We should be able to switch to xz snapshot.</span></div><div class="line" id="102138"><span class="nick" style="color:#2e2a4a"><a href="#102138" label="[10:21:38]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Å tikonas&gt; And I think we do snapshots here because release tarballs did not have enough info to regenerate pregenerated files</span></div><div class="line" id="102242"><span class="nick" style="color:#2e2a4a"><a href="#102242" label="[10:22:42]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Å tikonas&gt; Googulator: perhaps we could extend coreutils 6.10 and remove 5.0</span></div><div class="line" id="123606"><span class="nick" style="color:#234e69"><a href="#123606" label="[12:36:06]">&lt;fossy&gt;</a></span><span class="message">stikonas, i'm just performing final tests, should be good to go with the PRs in the next 24hrs</span></div><div class="line" id="123646"><span class="nick" style="color:#234e69"><a href="#123646" label="[12:36:46]">&lt;fossy&gt;</a></span><span class="message">i'll be merging in this order</span></div><div class="line" id="123722"><span class="nick" style="color:#234e69"><a href="#123722" label="[12:37:22]">&lt;fossy&gt;</a></span><span class="message">#337 #340 #341 #343 #344, rebase #334 on master, merge #334</span></div><div class="line" id="123733"><span class="nick" style="color:#234e69"><a href="#123733" label="[12:37:33]">&lt;fossy&gt;</a></span><span class="message">if you're ok with that i'll proceed within a few days</span></div><div class="line" id="123739"><span class="nick" style="color:#234e69"><a href="#123739" label="[12:37:39]">&lt;fossy&gt;</a></span><span class="message">few -&gt; 2</span></div><div class="line" id="123824"><span class="nick" style="color:#234e69"><a href="#123824" label="[12:38:24]">&lt;fossy&gt;</a></span><span class="message">oh and i need to push the arch specific checksums ofr simple-patch</span></div><div class="line" id="123935"><span class="nick" style="color:#2e2a4a"><a href="#123935" label="[12:39:35]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Å tikonas&gt; fossy: thanks for update</span></div><div class="line" id="123945"><span class="nick" style="color:#2e2a4a"><a href="#123945" label="[12:39:45]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Å tikonas&gt; I'll wait with mes 0.26 then</span></div><div class="line" id="124012"><span class="nick" style="color:#234e69"><a href="#124012" label="[12:40:12]">&lt;fossy&gt;</a></span><span class="message">:)</span></div><div class="line" id="124021"><span class="nick" style="color:#234e69"><a href="#124021" label="[12:40:21]">&lt;fossy&gt;</a></span><span class="message">mes 0.26 is looking very neat!</span></div><div class="line" id="124033"><span class="nick" style="color:#234e69"><a href="#124033" label="[12:40:33]">&lt;fossy&gt;</a></span><span class="message">does gash run natively on mes 0.26 now</span></div><div class="line" id="133109"><span class="nick" style="color:#2e2a4a"><a href="#133109" label="[13:31:09]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Å tikonas&gt; fossy: probably non release version</span></div><div class="line" id="133124"><span class="nick" style="color:#2e2a4a"><a href="#133124" label="[13:31:24]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Å tikonas&gt; fossy: but with gash we will have to be careful</span></div><div class="line" id="133135"><span class="nick" style="color:#2e2a4a"><a href="#133135" label="[13:31:35]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Å tikonas&gt; It's probably heavy on syscalls</span></div><div class="line" id="133156"><span class="nick" style="color:#2e2a4a"><a href="#133156" label="[13:31:56]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Å tikonas&gt; So we might struggle before fiwix</span></div><div class="line" id="133216"><span class="nick" style="color:#2e2a4a"><a href="#133216" label="[13:32:16]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Å tikonas&gt; I haven't tried gash yet</span></div><div class="line" id="133232"><span class="nick" style="color:#2e2a4a"><a href="#133232" label="[13:32:32]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Å tikonas&gt; But mes itself runs fine on builder-hex0</span></div><div class="line" id="133300"><span class="nick" style="color:#2e2a4a"><a href="#133300" label="[13:33:00]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Å tikonas&gt; Even if we need to adjust meslibc build script a lot to are those new syscalls</span></div><div class="line" id="145442"><span class="nick" style="color:#6c3d55"><a href="#145442" label="[14:54:42]">&lt;janneke&gt;</a></span><span class="message">fossy: for gash you need the wip-modular-mes branch</span></div><div class="line" id="145448"><span class="nick" style="color:#6c3d55"><a href="#145448" label="[14:54:48]">&lt;janneke&gt;</a></span><span class="message">(so that's a branch in gash)</span></div><div class="line" id="145454"><span class="nick" style="color:#6c3d55"><a href="#145454" label="[14:54:54]">&lt;janneke&gt;</a></span><span class="message">and from gash-utils you need the wip-mes branch</span></div><div class="line" id="161516"><span class="nick" style="color:#8dd3c7"><a href="#161516" label="[16:15:16]">&lt;stikonas&gt;</a></span><span class="message">we probably don't need to much from gash-utils anyway</span></div><div class="line" id="161620"><span class="nick" style="color:#8dd3c7"><a href="#161620" label="[16:16:20]">&lt;stikonas&gt;</a></span><span class="message">but having more powerful shell (than kaem) early on could be a big improvement</span></div><div class="line" id="162209"><span class="nick" style="color:#6c3d55"><a href="#162209" label="[16:22:09]">&lt;janneke&gt;</a></span><span class="message">right</span></div><div class="line" id="162642"><span class="nick" style="color:#8dd3c7"><a href="#162642" label="[16:26:42]">&lt;stikonas&gt;</a></span><span class="message">on the other hand, it might make bootstrap simpler...</span></div><div class="line" id="162655"><span class="nick" style="color:#8dd3c7"><a href="#162655" label="[16:26:55]">&lt;stikonas&gt;</a></span><span class="message">so I guess there is a tradeoff between speed and simplicity...</span></div><div class="line" id="163258"><span class="nick" style="color:#6c3d55"><a href="#163258" label="[16:32:58]">&lt;janneke&gt;</a></span><span class="message">yeah</span></div><div class="line" id="163311"><span class="nick" style="color:#6c3d55"><a href="#163311" label="[16:33:11]">&lt;janneke&gt;</a></span><span class="message">stikonas: thinking (again) about how slow the bootstrap on riscv is...</span></div><div class="line" id="163336"><span class="nick" style="color:#6c3d55"><a href="#163336" label="[16:33:36]">&lt;janneke&gt;</a></span><span class="message">i remember emilytrau mentioning they built mes C files all in parallel</span></div><div class="line" id="163350"><span class="nick" style="color:#8dd3c7"><a href="#163350" label="[16:33:50]">&lt;stikonas&gt;</a></span><span class="message">janneke: I think it  wouldn't help</span></div><div class="line" id="163407"><span class="nick" style="color:#8dd3c7"><a href="#163407" label="[16:34:07]">&lt;stikonas&gt;</a></span><span class="message">if the bottleneck is indeed RAM bandwidth</span></div><div class="line" id="163440"><span class="nick" style="color:#6c3d55"><a href="#163440" label="[16:34:40]">&lt;janneke&gt;</a></span><span class="message">not if you have (only) one machine; right</span></div><div class="line" id="163458"><span class="nick" style="color:#8dd3c7"><a href="#163458" label="[16:34:58]">&lt;stikonas&gt;</a></span><span class="message">because gcc is not that slow</span></div><div class="line" id="163510"><span class="nick" style="color:#8dd3c7"><a href="#163510" label="[16:35:10]">&lt;stikonas&gt;</a></span><span class="message">I was building gcc 4.6 from ekaitz branch on riscv</span></div><div class="line" id="163515"><span class="nick" style="color:#8dd3c7"><a href="#163515" label="[16:35:15]">&lt;stikonas&gt;</a></span><span class="message">and even 3 stage bootstrap is just 2h or so</span></div><div class="line" id="163520"><span class="nick" style="color:#6c3d55"><a href="#163520" label="[16:35:20]">&lt;janneke&gt;</a></span><span class="message">ah, oh that's good news in a way</span></div><div class="line" id="163534"><span class="nick" style="color:#6c3d55"><a href="#163534" label="[16:35:34]">&lt;janneke&gt;</a></span><span class="message">so it's really mes that is exceptionally slow</span></div><div class="line" id="163537"><span class="nick" style="color:#8dd3c7"><a href="#163537" label="[16:35:37]">&lt;stikonas&gt;</a></span><span class="message">yeah, only mes is exceptionally slow</span></div><div class="line" id="163540"><span class="nick" style="color:#8dd3c7"><a href="#163540" label="[16:35:40]">&lt;stikonas&gt;</a></span><span class="message">so both good and bad</span></div><div class="line" id="163547"><span class="nick" style="color:#8dd3c7"><a href="#163547" label="[16:35:47]">&lt;stikonas&gt;</a></span><span class="message">good is that other parts are reasonably fast</span></div><div class="line" id="163614"><span class="nick" style="color:#8dd3c7"><a href="#163614" label="[16:36:14]">&lt;stikonas&gt;</a></span><span class="message">but to reach them, you need a week or so on visionfive2</span></div><div class="line" id="163640"><span class="nick" style="color:#8dd3c7"><a href="#163640" label="[16:36:40]">&lt;stikonas&gt;</a></span><span class="message">well, we don't yet have anything in the chain after tcc, we went directly to building gcc for now</span></div><div class="line" id="163648"><span class="nick" style="color:#8dd3c7"><a href="#163648" label="[16:36:48]">&lt;stikonas&gt;</a></span><span class="message">first to make sure we have a working GCC</span></div><div class="line" id="163653"><span class="nick" style="color:#8dd3c7"><a href="#163653" label="[16:36:53]">&lt;stikonas&gt;</a></span><span class="message">will bridge tcc and gcc later...</span></div><div class="line" id="163835"><span class="nick" style="color:#8dd3c7"><a href="#163835" label="[16:38:35]">&lt;stikonas&gt;</a></span><span class="message">janneke: I wonder how much can be gained by switching those long if/else sequences to switch in mes.c</span></div><div class="line" id="163907"><span class="nick" style="color:#8dd3c7"><a href="#163907" label="[16:39:07]">&lt;stikonas&gt;</a></span><span class="message">wouldn't be much faster, but maybe can speed it up by a bit</span></div><div class="line" id="183610"><span class="nick" style="color:#389600"><a href="#183610" label="[18:36:10]">&lt;oriansj&gt;</a></span><span class="message">well, there are lots of potential improvements to explore and even more bugs to fix. (probably need to figure out why mescc-tools-extra sha256sum is giving wrong results and at what size)</span></div><div class="line" id="183822"><span class="nick" style="color:#8dd3c7"><a href="#183822" label="[18:38:22]">&lt;stikonas&gt;</a></span><span class="message">I think it was at 1 MiB</span></div><div class="line" id="184919"><span class="nick" style="color:#389600"><a href="#184919" label="[18:49:19]">&lt;oriansj&gt;</a></span><span class="message">odd</span></div><div class="line" id="185041"><span class="nick" style="color:#389600"><a href="#185041" label="[18:50:41]">&lt;oriansj&gt;</a></span><span class="message">just checked a 5,296,912byte file and it matches the core utils sha256sum result</span></div><div class="line" id="185243"><span class="nick" style="color:#389600"><a href="#185243" label="[18:52:43]">&lt;oriansj&gt;</a></span><span class="message">and a 73,598,107byte file</span></div><div class="line" id="185450"><span class="nick" style="color:#389600"><a href="#185450" label="[18:54:50]">&lt;oriansj&gt;</a></span><span class="message">I know it will break on files greater than 2GB due to the signed 32bit value</span></div><div class="line" id="185714"><span class="nick" style="color:#389600"><a href="#185714" label="[18:57:14]">&lt;oriansj&gt;</a></span><span class="message">and 1.5GB can result in a segment fault</span></div><div class="line" id="190718"><span class="nick" style="color:#389600"><a href="#190718" label="[19:07:18]">&lt;oriansj&gt;</a></span><span class="message">and checking a 472,700,928byte binary file I do see matching checksums from the x86 stage0-posix bootstrapped sha256sum</span></div><div class="line" id="190751"><span class="nick" style="color:#389600"><a href="#190751" label="[19:07:51]">&lt;oriansj&gt;</a></span><span class="message">which should be large enough for everything for a good while</span></div><div class="line" id="193614"><span class="nick" style="color:#8dd3c7"><a href="#193614" label="[19:36:14]">&lt;stikonas&gt;</a></span><span class="message">hmm, maybe whatever bug we had is fixed...</span></div><div class="line" id="195753"><span class="nick" style="color:#6c3d55"><a href="#195753" label="[19:57:53]">&lt;janneke&gt;</a></span><span class="message">stikonas: iwbn if a fairly simple change as if/else =&gt; switch would improve performance</span></div><div class="line" id="195836"><span class="nick" style="color:#8dd3c7"><a href="#195836" label="[19:58:36]">&lt;stikonas&gt;</a></span><span class="message">well, if/else probably has far worse assembly</span></div><div class="line" id="195947"><span class="nick" style="color:#6c3d55"><a href="#195947" label="[19:59:47]">&lt;janneke&gt;</a></span><span class="message">...and eval_apply is the most intensively executed code</span></div><div class="line" id="200018"><span class="nick" style="color:#6c3d55"><a href="#200018" label="[20:00:18]">&lt;janneke&gt;</a></span><span class="message">so yeah, it might even be a happy suprise...hard to say!</span></div><div class="line" id="200049"><span class="nick" style="color:#8dd3c7"><a href="#200049" label="[20:00:49]">&lt;stikonas&gt;</a></span><span class="message">we'll need a new M2-Planet...</span></div><div class="line" id="200112"><span class="nick" style="color:#6c3d55"><a href="#200112" label="[20:01:12]">&lt;janneke&gt;</a></span><span class="message">just when everything seems so nice and stable ;-P</span></div><div class="line" id="200313"><span class="nick" style="color:#8dd3c7"><a href="#200313" label="[20:03:13]">&lt;stikonas&gt;</a></span><span class="message">well, oriansj already implemented switch there</span></div><div class="line" id="200426"><span class="nick" style="color:#6c3d55"><a href="#200426" label="[20:04:26]">&lt;janneke&gt;</a></span><span class="message">oh, so &quot;we&quot;'re just a bunch of lazy laggards :)</span></div><div class="line" id="200520"><span class="nick" style="color:#6c3d55"><a href="#200520" label="[20:05:20]">&lt;janneke&gt;</a></span><span class="message">(for the record, this has been one of my most intensive years, mes-wise, and i've been amazed by all your work too!)</span></div><div class="line" id="201948"><span class="nick" style="color:#d9d9d9"><a href="#201948" label="[20:19:48]">&lt;GoogulatorMobile&gt;</a></span><span class="message">I've just realized there's another neat perk to reducing srcfs to 256MiB, which is unrelated to the trusted Flash drive</span></div><div class="line" id="202041"><span class="nick" style="color:#d9d9d9"><a href="#202041" label="[20:20:41]">&lt;GoogulatorMobile&gt;</a></span><span class="message">I've been running with kexec_size=256MiB for a while with no ill effects</span></div><div class="line" id="202104"><span class="nick" style="color:#d9d9d9"><a href="#202104" label="[20:21:04]">&lt;GoogulatorMobile&gt;</a></span><span class="message">And that space is accessible as a ramdisk before we kexec to Linux</span></div><div class="line" id="202208"><span class="nick" style="color:#d9d9d9"><a href="#202208" label="[20:22:08]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Which means, we can avoid the &quot;nuke distfiles&quot; step during the Linux build</span></div><div class="line" id="202244"><span class="nick" style="color:#d9d9d9"><a href="#202244" label="[20:22:44]">&lt;GoogulatorMobile&gt;</a></span><span class="message">&amp; basically bring over an almost arbitrary amount of source code from the Fiwix world into the Linux one</span></div><div class="line" id="203242"><span class="nick" style="color:#8dd3c7"><a href="#203242" label="[20:32:42]">&lt;stikonas&gt;</a></span><span class="message">GoogulatorMobile: well, we could save on some stuff, coreutils is one thing...</span></div><div class="line" id="203248"><span class="nick" style="color:#8dd3c7"><a href="#203248" label="[20:32:48]">&lt;stikonas&gt;</a></span><span class="message">though we probably want to bring in gash</span></div><div class="line" id="203307"><span class="nick" style="color:#8dd3c7"><a href="#203307" label="[20:33:07]">&lt;stikonas&gt;</a></span><span class="message">and also give some space for future growth of some projects (stage0/mes)</span></div><div class="line" id="203338"><span class="nick" style="color:#d9d9d9"><a href="#203338" label="[20:33:38]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Tbh, I'm not a fan of gash... or anything that would use the mes interpreter, for that matter</span></div><div class="line" id="203408"><span class="nick" style="color:#8dd3c7"><a href="#203408" label="[20:34:08]">&lt;stikonas&gt;</a></span><span class="message">yes, I know, but we need to solve that non-redistributable binary issue</span></div><div class="line" id="203427"><span class="nick" style="color:#8dd3c7"><a href="#203427" label="[20:34:27]">&lt;stikonas&gt;</a></span><span class="message">so at the very least I would like to run musl's ./configure script before bash</span></div><div class="line" id="203437"><span class="nick" style="color:#d9d9d9"><a href="#203437" label="[20:34:37]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Can't we use Plan9 lex/yacc?</span></div><div class="line" id="203515"><span class="nick" style="color:#d9d9d9"><a href="#203515" label="[20:35:15]">&lt;GoogulatorMobile&gt;</a></span><span class="message">(MIT licensed)</span></div><div class="line" id="203524"><span class="nick" style="color:#8dd3c7"><a href="#203524" label="[20:35:24]">&lt;stikonas&gt;</a></span><span class="message">no idea... maybe</span></div><div class="line" id="203546"><span class="nick" style="color:#8dd3c7"><a href="#203546" label="[20:35:46]">&lt;stikonas&gt;</a></span><span class="message">but if it's not compatible with bison bootstrap, we might need both</span></div><div class="line" id="203611"><span class="nick" style="color:#8dd3c7"><a href="#203611" label="[20:36:11]">&lt;stikonas&gt;</a></span><span class="message">GoogulatorMobile: are you against because it is slow?</span></div><div class="line" id="203636"><span class="nick" style="color:#d9d9d9"><a href="#203636" label="[20:36:36]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Yeah, I don't want to see m(olass)es in the bootstrap path for that reason</span></div><div class="line" id="203701"><span class="nick" style="color:#8dd3c7"><a href="#203701" label="[20:37:01]">&lt;stikonas&gt;</a></span><span class="message">well, configure script wouldn't take long....</span></div><div class="line" id="203701"><span class="nick" style="color:#d9d9d9"><a href="#203701" label="[20:37:01]">&lt;GoogulatorMobile&gt;</a></span><span class="message">I know, risc-v is far slower yet, but still</span></div><div class="line" id="203707"><span class="nick" style="color:#8dd3c7"><a href="#203707" label="[20:37:07]">&lt;stikonas&gt;</a></span><span class="message">it's a fairly small script</span></div><div class="line" id="203718"><span class="nick" style="color:#8dd3c7"><a href="#203718" label="[20:37:18]">&lt;stikonas&gt;</a></span><span class="message">well, risc-v hardware will improve</span></div><div class="line" id="203755"><span class="nick" style="color:#8dd3c7"><a href="#203755" label="[20:37:55]">&lt;stikonas&gt;</a></span><span class="message">but this is a really simple script <a rel="nofollow" href="https://github.com/bminor/musl/blob/master/configure">https://github.com/bminor/musl/blob/master/configure</a> </span></div><div class="line" id="203800"><span class="nick" style="color:#8dd3c7"><a href="#203800" label="[20:38:00]">&lt;stikonas&gt;</a></span><span class="message">can't be too bad</span></div><div class="line" id="203845"><span class="nick" style="color:#d9d9d9"><a href="#203845" label="[20:38:45]">&lt;GoogulatorMobile&gt;</a></span><span class="message">I'm not sure the size of the script would matter too much</span></div><div class="line" id="203905"><span class="nick" style="color:#d9d9d9"><a href="#203905" label="[20:39:05]">&lt;GoogulatorMobile&gt;</a></span><span class="message">mes-gash may even be slow to hello world</span></div><div class="line" id="203943"><span class="nick" style="color:#d9d9d9"><a href="#203943" label="[20:39:43]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Also, it's telling that even _guile_ is quite slow</span></div><div class="line" id="203956"><span class="nick" style="color:#8dd3c7"><a href="#203956" label="[20:39:56]">&lt;stikonas&gt;</a></span><span class="message">well, true...</span></div><div class="line" id="204011"><span class="nick" style="color:#d9d9d9"><a href="#204011" label="[20:40:11]">&lt;GoogulatorMobile&gt;</a></span><span class="message">I have a feeling a performant Scheme implementation is not possible on our current CPU architectures</span></div><div class="line" id="204040"><span class="nick" style="color:#d9d9d9"><a href="#204040" label="[20:40:40]">&lt;GoogulatorMobile&gt;</a></span><span class="message">I mean, Scheme is a Lisp dialect... there's a reason why a custom architecture was originally designed for running Lisp</span></div><div class="line" id="204132"><span class="nick" style="color:#8dd3c7"><a href="#204132" label="[20:41:32]">&lt;stikonas&gt;</a></span><span class="message">as for sizes, perhaps we'll have to switch to more configurable bootstraps</span></div><div class="line" id="204145"><span class="nick" style="color:#8dd3c7"><a href="#204145" label="[20:41:45]">&lt;stikonas&gt;</a></span><span class="message">e.g. there would be different manifest files for different usecase</span></div><div class="line" id="204150"><span class="nick" style="color:#8dd3c7"><a href="#204150" label="[20:41:50]">&lt;stikonas&gt;</a></span><span class="message">usecases</span></div><div class="line" id="204225"><span class="nick" style="color:#8dd3c7"><a href="#204225" label="[20:42:25]">&lt;stikonas&gt;</a></span><span class="message">that's becoming easier with that fossy's rework</span></div><div class="line" id="204248"><span class="nick" style="color:#8dd3c7"><a href="#204248" label="[20:42:48]">&lt;stikonas&gt;</a></span><span class="message">e.g. if we want to target gcc 4.6 rather than gcc 4.0 for riscv, we could do it separately</span></div><div class="line" id="204357"><span class="nick" style="color:#d9d9d9"><a href="#204357" label="[20:43:57]">&lt;GoogulatorMobile&gt;</a></span><span class="message">I wonder what makes binutils almost 30MiB...</span></div><div class="line" id="204407"><span class="nick" style="color:#d9d9d9"><a href="#204407" label="[20:44:07]">&lt;GoogulatorMobile&gt;</a></span><span class="message">For sure not source code</span></div><div class="line" id="204456"><span class="nick" style="color:#8dd3c7"><a href="#204456" label="[20:44:56]">&lt;stikonas&gt;</a></span><span class="message">older binutils were smaller</span></div><div class="line" id="204510"><span class="nick" style="color:#8dd3c7"><a href="#204510" label="[20:45:10]">&lt;stikonas&gt;</a></span><span class="message">but older binutils also work much worse</span></div><div class="line" id="204539"><span class="nick" style="color:#8dd3c7"><a href="#204539" label="[20:45:39]">&lt;stikonas&gt;</a></span><span class="message">half of that binutils size is gas directory</span></div><div class="line" id="204556"><span class="nick" style="color:#8dd3c7"><a href="#204556" label="[20:45:56]">&lt;stikonas&gt;</a></span><span class="message">oh, 95 / 122 MB is testsuite</span></div><div class="line" id="204614"><span class="nick" style="color:#d9d9d9"><a href="#204614" label="[20:46:14]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Yeah, it would be great to ship a slimmed down version there</span></div><div class="line" id="204740"><span class="nick" style="color:#8dd3c7"><a href="#204740" label="[20:47:40]">&lt;stikonas&gt;</a></span><span class="message">perhaps you could write a postprocessing script</span></div><div class="line" id="204752"><span class="nick" style="color:#8dd3c7"><a href="#204752" label="[20:47:52]">&lt;stikonas&gt;</a></span><span class="message">that optionally repacks tarballs and injects new checksums</span></div><div class="line" id="204809"><span class="nick" style="color:#8dd3c7"><a href="#204809" label="[20:48:09]">&lt;stikonas&gt;</a></span><span class="message">though some people might prefer not to run repacking</span></div><div class="line" id="204830"><span class="nick" style="color:#d9d9d9"><a href="#204830" label="[20:48:30]">&lt;GoogulatorMobile&gt;</a></span><span class="message">slim binutils + early XZ support + coreutils improvements + pushing GMP &amp; co to when it's actually needed = easy 256MiB, even if we include everything needed for HTTPS</span></div><div class="line" id="204851"><span class="nick" style="color:#d9d9d9"><a href="#204851" label="[20:48:51]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Plain HTTP dependency is a huge threat to the project imo</span></div><div class="line" id="204851"><span class="nick" style="color:#8dd3c7"><a href="#204851" label="[20:48:51]">&lt;stikonas&gt;</a></span><span class="message">GMP and co is in sysc, isn't it?</span></div><div class="line" id="204857"><span class="nick" style="color:#8dd3c7"><a href="#204857" label="[20:48:57]">&lt;stikonas&gt;</a></span><span class="message">GoogulatorMobile: why?</span></div><div class="line" id="204908"><span class="nick" style="color:#8dd3c7"><a href="#204908" label="[20:49:08]">&lt;stikonas&gt;</a></span><span class="message">nothing depens on HTTP for security</span></div><div class="line" id="204913"><span class="nick" style="color:#d9d9d9"><a href="#204913" label="[20:49:13]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Not security</span></div><div class="line" id="204918"><span class="nick" style="color:#8dd3c7"><a href="#204918" label="[20:49:18]">&lt;stikonas&gt;</a></span><span class="message">unless your NIC can break sha256sum</span></div><div class="line" id="204922"><span class="nick" style="color:#d9d9d9"><a href="#204922" label="[20:49:22]">&lt;GoogulatorMobile&gt;</a></span><span class="message">But finding HTTP sources that remain HTTP</span></div><div class="line" id="204929"><span class="nick" style="color:#8dd3c7"><a href="#204929" label="[20:49:29]">&lt;stikonas&gt;</a></span><span class="message">well, that is true...</span></div><div class="line" id="205018"><span class="nick" style="color:#d9d9d9"><a href="#205018" label="[20:50:18]">&lt;GoogulatorMobile&gt;</a></span><span class="message">We can safely use HTTP links if we so choose, but at no stage should we depend on the existence of HTTP links that don't redirect to HTTPS</span></div><div class="line" id="205032"><span class="nick" style="color:#d9d9d9"><a href="#205032" label="[20:50:32]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Because those are all going away eventually</span></div><div class="line" id="205040"><span class="nick" style="color:#8dd3c7"><a href="#205040" label="[20:50:40]">&lt;stikonas&gt;</a></span><span class="message">I agree with this</span></div><div class="line" id="205104"><span class="nick" style="color:#8dd3c7"><a href="#205104" label="[20:51:04]">&lt;stikonas&gt;</a></span><span class="message">unless we self-host those tarballs</span></div><div class="line" id="205114"><span class="nick" style="color:#8dd3c7"><a href="#205114" label="[20:51:14]">&lt;stikonas&gt;</a></span><span class="message">but that's another can of worms</span></div><div class="line" id="205219"><span class="nick" style="color:#8dd3c7"><a href="#205219" label="[20:52:19]">&lt;stikonas&gt;</a></span><span class="message">but openssl 1 is also not ideal there</span></div><div class="line" id="205224"><span class="nick" style="color:#d9d9d9"><a href="#205224" label="[20:52:24]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Also, some ISPs or corporate environments might straight up block plain HTTP traffic</span></div><div class="line" id="205225"><span class="nick" style="color:#8dd3c7"><a href="#205225" label="[20:52:25]">&lt;stikonas&gt;</a></span><span class="message">we should either keep it up to date</span></div><div class="line" id="205241"><span class="nick" style="color:#8dd3c7"><a href="#205241" label="[20:52:41]">&lt;stikonas&gt;</a></span><span class="message">GoogulatorMobile: you have bigger problems there in corporate environemnts</span></div><div class="line" id="205247"><span class="nick" style="color:#8dd3c7"><a href="#205247" label="[20:52:47]">&lt;stikonas&gt;</a></span><span class="message">even HTTPS links would be blocked</span></div><div class="line" id="205306"><span class="nick" style="color:#8dd3c7"><a href="#205306" label="[20:53:06]">&lt;stikonas&gt;</a></span><span class="message">you are unlikely to be able to run live-bootstrap there</span></div><div class="line" id="205312"><span class="nick" style="color:#8dd3c7"><a href="#205312" label="[20:53:12]">&lt;stikonas&gt;</a></span><span class="message">unless you preinject all sources</span></div><div class="line" id="205316"><span class="nick" style="color:#8dd3c7"><a href="#205316" label="[20:53:16]">&lt;stikonas&gt;</a></span><span class="message">or use your own mirror</span></div><div class="line" id="205352"><span class="nick" style="color:#8dd3c7"><a href="#205352" label="[20:53:52]">&lt;stikonas&gt;</a></span><span class="message">especially less known sources</span></div><div class="line" id="205400"><span class="nick" style="color:#8dd3c7"><a href="#205400" label="[20:54:00]">&lt;stikonas&gt;</a></span><span class="message">in particular stuff like old flex...</span></div><div class="line" id="205428"><span class="nick" style="color:#8dd3c7"><a href="#205428" label="[20:54:28]">&lt;stikonas&gt;</a></span><span class="message"> (<a rel="nofollow" href="http://download.nust.na/pub2/openpkg1/sources/DST/flex/flex-2.5.11.tar.gz">http://download.nust.na/pub2/openpkg1/sources/DST/flex/flex-2.5.11.tar.gz</a>) </span></div><div class="line" id="205511"><span class="nick" style="color:#8dd3c7"><a href="#205511" label="[20:55:11]">&lt;stikonas&gt;</a></span><span class="message">that's some fairly obscure mirror...</span></div><div class="line" id="205628"><span class="nick" style="color:#d9d9d9"><a href="#205628" label="[20:56:28]">&lt;GoogulatorMobile&gt;</a></span><span class="message">I would expect plain HTTP blocking to become the norm in the near future</span></div><div class="line" id="211040"><span class="nick" style="color:#8dd3c7"><a href="#211040" label="[21:10:40]">&lt;stikonas&gt;</a></span><span class="message">doesn't apt download stuff from debian using http?</span></div><div class="line" id="211117"><span class="nick" style="color:#8dd3c7"><a href="#211117" label="[21:11:17]">&lt;stikonas&gt;</a></span><span class="message">though it's from the mirrors that are under Debian's control</span></div><div class="line" id="211120"><span class="nick" style="color:#8dd3c7"><a href="#211120" label="[21:11:20]">&lt;stikonas&gt;</a></span><span class="message">not random other mirrors</span></div><div class="line" id="225516"><span class="nick" style="color:#234e69"><a href="#225516" label="[22:55:16]">&lt;fossy&gt;</a></span><span class="message">janneke: thanks for the gash branches. i'll investigate them at some point (but i think in live-bootstrap we should probably wait for them to stabilise a bit)</span></div><div class="line" id="225615"><span class="nick" style="color:#80b1d3"><a href="#225615" label="[22:56:15]">&lt;muurkha&gt;</a></span><span class="message">current Chromium does block unencrypted HTTP, as does HTTP/3</span></div><div class="line" id="225918"><span class="nick" style="color:#bc80bd"><a href="#225918" label="[22:59:18]">&lt;janus&gt;</a></span><span class="message">muurkha: but how am i able to open <a rel="nofollow" href="http://neverssl.com">http://neverssl.com</a>  then?</span></div><div class="line" id="225954"><span class="nick" style="color:#bc80bd"><a href="#225954" label="[22:59:54]">&lt;janus&gt;</a></span><span class="message">it seems to redirect to another page, even if i use incognito. surely it should fail before redirecting if your assertion were true</span></div><div class="line" id="231522"><span class="nick" style="color:#80b1d3"><a href="#231522" label="[23:15:22]">&lt;muurkha&gt;</a></span><span class="message">janus: maybe you've already told chromium it's okay?</span></div><div class="line" id="231609"><span class="nick" style="color:#80b1d3"><a href="#231609" label="[23:16:09]">&lt;muurkha&gt;</a></span><span class="message">or maybe you're not using the version of chromium where i've seen this behavior?</span></div><div class="line" id="231622"><span class="nick" style="color:#80b1d3"><a href="#231622" label="[23:16:22]">&lt;muurkha&gt;</a></span><span class="message">also both chromium and firefox have dropped ftp support</span></div><div class="line" id="231819"><span class="nick" style="color:#bc80bd"><a href="#231819" label="[23:18:19]">&lt;janus&gt;</a></span><span class="message">muurkha: that's why i try incognito, so that it doesn't know about my settings</span></div><div class="line" id="231843"><span class="nick" style="color:#bc80bd"><a href="#231843" label="[23:18:43]">&lt;janus&gt;</a></span><span class="message">i am on chrome 120.0.6099.71-1</span></div><div class="line" id="231957"><span class="nick" style="color:#bc80bd"><a href="#231957" label="[23:19:57]">&lt;janus&gt;</a></span><span class="message">even <a rel="nofollow" href="http://download.nust.na/">http://download.nust.na/</a>  opens . it says 'insecure' in the url bar</span></div><div class="line" id="232528"><span class="nick" style="color:#bc80bd"><a href="#232528" label="[23:25:28]">&lt;janus&gt;</a></span><span class="message">maybe google patched my chromium before packaging chrome</span></div><div class="line" id="232804"><span class="nick" style="color:#8dd3c7"><a href="#232804" label="[23:28:04]">&lt;stikonas&gt;</a></span><span class="message">yeah, http works on my ungoogled-chromium too</span></div><div class="line" id="232822"><span class="nick" style="color:#80b1d3"><a href="#232822" label="[23:28:22]">&lt;muurkha&gt;</a></span><span class="message">I'll have to investigate morre</span></div><div class="line" id="232825"><span class="nick" style="color:#80b1d3"><a href="#232825" label="[23:28:25]">&lt;muurkha&gt;</a></span><span class="message">*more</span></div><div class="line" id="232829"><span class="nick" style="color:#80b1d3"><a href="#232829" label="[23:28:29]">&lt;muurkha&gt;</a></span><span class="message">thanks!</span></div><br /></div></body></html>