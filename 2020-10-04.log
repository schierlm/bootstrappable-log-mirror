<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-10-04.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="015905"><span class="nick" style="color:#8dd3c7"><a href="#015905" label="[01:59:05]">&lt;OriansJ`&gt;</a></span><span class="message">or I just incredibly stupid and missing something completely obvious</span></div><div class="line" id="021642"><span class="nick" style="color:#2e2a4a"><a href="#021642" label="[02:16:42]">&lt;xentrac&gt;</a></span><span class="message">when programming I spend a substantial fraction of my time missing things that are, in retrospect, completely obvious</span></div><div class="line" id="021922"><span class="nick" style="color:#8dd3c7"><a href="#021922" label="[02:19:22]">&lt;OriansJ`&gt;</a></span><span class="message">hence why I am begging janneke to take 2 minutes to get me a single guile command to work using MesCC</span></div><div class="line" id="021943"><span class="nick" style="color:#8dd3c7"><a href="#021943" label="[02:19:43]">&lt;OriansJ`&gt;</a></span><span class="message">because I don't know what I am missing.</span></div><div class="line" id="022017"><span class="nick" style="color:#8dd3c7"><a href="#022017" label="[02:20:17]">&lt;OriansJ`&gt;</a></span><span class="message">I just want someone to be able to git clone mes-m2; run that command (or an alternate one because I missed something there)</span></div><div class="line" id="022035"><span class="nick" style="color:#8dd3c7"><a href="#022035" label="[02:20:35]">&lt;OriansJ`&gt;</a></span><span class="message">and demonstrate MesCC compiling anything</span></div><div class="line" id="022111"><span class="nick" style="color:#8dd3c7"><a href="#022111" label="[02:21:11]">&lt;OriansJ`&gt;</a></span><span class="message">I don't care if it is hello world or return-42.c</span></div><div class="line" id="022141"><span class="nick" style="color:#2e2a4a"><a href="#022141" label="[02:21:41]">&lt;xentrac&gt;</a></span><span class="message">yeah, it's always better to work with a buddy</span></div><div class="line" id="022145"><span class="nick" style="color:#8dd3c7"><a href="#022145" label="[02:21:45]">&lt;OriansJ`&gt;</a></span><span class="message">Just something that works using only guile and the source code in mes-m2</span></div><div class="line" id="022241"><span class="nick" style="color:#8dd3c7"><a href="#022241" label="[02:22:41]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: and what buddy is better than the original and primary author of the very program you wish to run.</span></div><div class="line" id="022743"><span class="nick" style="color:#8dd3c7"><a href="#022743" label="[02:27:43]">&lt;OriansJ`&gt;</a></span><span class="message">am I asking too much?</span></div><div class="line" id="023051"><span class="nick" style="color:#8dd3c7"><a href="#023051" label="[02:30:51]">&lt;OriansJ`&gt;</a></span><span class="message">I've literally done every single step from hex0 to M2-Planet + mes-m2; I just need the bare minimal MesCC that works with guile; so that I have a stable target to complete the bootstrap.</span></div><div class="line" id="023237"><span class="nick" style="color:#2e2a4a"><a href="#023237" label="[02:32:37]">&lt;xentrac&gt;</a></span><span class="message">maybe if janneke is asleep or something then asking him to help you right now might be asking too much :)</span></div><div class="line" id="023616"><span class="nick" style="color:#8dd3c7"><a href="#023616" label="[02:36:16]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: true; I guess I keep forgetting the distance between us all.</span></div><div class="line" id="023708"><span class="nick" style="color:#2e2a4a"><a href="#023708" label="[02:37:08]">&lt;xentrac&gt;</a></span><span class="message">or on a fishing trip, or just sick of achieving amazing accomplishments</span></div><div class="line" id="023859"><span class="nick" style="color:#8dd3c7"><a href="#023859" label="[02:38:59]">&lt;OriansJ`&gt;</a></span><span class="message">well he is 7 hours ahead of me if I remember correctly so 3:38am; thus probably sleeping or having a great time away from the computer.</span></div><div class="line" id="024611"><span class="nick" style="color:#8dd3c7"><a href="#024611" label="[02:46:11]">&lt;OriansJ`&gt;</a></span><span class="message">the fact that no one else on is saying &quot;hey idiot the solution is this: posts patch&quot; does not look good in regards to MesCC's bus factor.</span></div><div class="line" id="024748"><span class="nick" style="color:#8dd3c7"><a href="#024748" label="[02:47:48]">&lt;OriansJ`&gt;</a></span><span class="message">unless most of the people on the channel are just entirely passive observers and wouldn't post &quot;I'm here but don't know how to fix that&quot;</span></div><div class="line" id="024815"><span class="nick" style="color:#2e2a4a"><a href="#024815" label="[02:48:15]">&lt;xentrac&gt;</a></span><span class="message">that's kindof where I'm at: passive observer of everything</span></div><div class="line" id="024842"><span class="nick" style="color:#2e2a4a"><a href="#024842" label="[02:48:42]">&lt;xentrac&gt;</a></span><span class="message">not my intention or desire, but that's where I am at the moment.  sorry</span></div><div class="line" id="025013"><span class="nick" style="color:#8dd3c7"><a href="#025013" label="[02:50:13]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: fair but atleast you interact; otherwise I'd be effectively posting to an empty channel and wondering why even bother if no one cares to so much as communicate &quot;meh&quot;</span></div><div class="line" id="025423"><span class="nick" style="color:#8dd3c7"><a href="#025423" label="[02:54:23]">&lt;OriansJ`&gt;</a></span><span class="message">Heck the net reaction of being the only person to ever write a C compiler in arm assembly was iterally 2 up votes and an email in chinese (according to google translate) telling me to kill myself because I am keeping bitcoin insecure by not working harder.</span></div><div class="line" id="025919"><span class="nick" style="color:#8dd3c7"><a href="#025919" label="[02:59:19]">&lt;OriansJ`&gt;</a></span><span class="message">mostly I just lost all motivation to do any work for a week after I got that...</span></div><div class="line" id="025921"><span class="nick" style="color:#6b8072"><a href="#025921" label="[02:59:21]">&lt;Hagfish&gt;</a></span><span class="message">maybe your chinese cyberbully should have sent you some free bitcoin to motivate you to improve bitcoin more :)</span></div><div class="line" id="030109"><span class="nick" style="color:#6b8072"><a href="#030109" label="[03:01:09]">&lt;Hagfish&gt;</a></span><span class="message">i wonder if that's a technique state-sponsored hackers will adopt (if they haven't already):  finding contacting details of open source contributors and spamming them with demotivating rubbish</span></div><div class="line" id="030120"><span class="nick" style="color:#6b8072"><a href="#030120" label="[03:01:20]">&lt;Hagfish&gt;</a></span><span class="message">using GPT-3 they could automate that quite well</span></div><div class="line" id="030143"><span class="nick" style="color:#6b8072"><a href="#030143" label="[03:01:43]">&lt;Hagfish&gt;</a></span><span class="message">*contact details</span></div><div class="line" id="030640"><span class="nick" style="color:#8dd3c7"><a href="#030640" label="[03:06:40]">&lt;OriansJ`&gt;</a></span><span class="message">Hagfish: The only crypto donation I got was approximately $10 of Lumens from nixo; through keybase</span></div><div class="line" id="030751"><span class="nick" style="color:#2e2a4a"><a href="#030751" label="[03:07:51]">&lt;xentrac&gt;</a></span><span class="message">OriansJ`: there are always foolish and aggressive people; after all everyone is born that way</span></div><div class="line" id="030759"><span class="nick" style="color:#2e2a4a"><a href="#030759" label="[03:07:59]">&lt;xentrac&gt;</a></span><span class="message">what matters is the few who are not</span></div><div class="line" id="031129"><span class="nick" style="color:#8dd3c7"><a href="#031129" label="[03:11:29]">&lt;OriansJ`&gt;</a></span><span class="message">I honestly don't do this work for anyone else; I do it because I have to get it outside of me.</span></div><div class="line" id="031234"><span class="nick" style="color:#8dd3c7"><a href="#031234" label="[03:12:34]">&lt;OriansJ`&gt;</a></span><span class="message">but lately, playing with my son; that need isn't so bad.</span></div><div class="line" id="031317"><span class="nick" style="color:#8dd3c7"><a href="#031317" label="[03:13:17]">&lt;OriansJ`&gt;</a></span><span class="message">now it is more like, a fun puzzle to work on in what little free time I have.</span></div><div class="line" id="031501"><span class="nick" style="color:#8dd3c7"><a href="#031501" label="[03:15:01]">&lt;OriansJ`&gt;</a></span><span class="message">I guess, I look forward more to the hardware work; after I finish the GCC bootstrap.</span></div><div class="line" id="031701"><span class="nick" style="color:#8dd3c7"><a href="#031701" label="[03:17:01]">&lt;OriansJ`&gt;</a></span><span class="message">Mostly, I look forward to sharing all of this with my son when he gets older.</span></div><div class="line" id="031808"><span class="nick" style="color:#8dd3c7"><a href="#031808" label="[03:18:08]">&lt;OriansJ`&gt;</a></span><span class="message">I might end up having to write alot more explainations of various parts (maybe write a book or 2)</span></div><div class="line" id="031854"><span class="nick" style="color:#8dd3c7"><a href="#031854" label="[03:18:54]">&lt;OriansJ`&gt;</a></span><span class="message">akin to the Lion's book</span></div><div class="line" id="032750"><span class="nick" style="color:#2e2a4a"><a href="#032750" label="[03:27:50]">&lt;xentrac&gt;</a></span><span class="message">I really appreciate that you're doing it, for what that's worth</span></div><div class="line" id="032829"><span class="nick" style="color:#8dd3c7"><a href="#032829" label="[03:28:29]">&lt;OriansJ`&gt;</a></span><span class="message">maybe call it &quot;Bootstrapping GCC with rage, depression, a few friends and 50 man years of work&quot;</span></div><div class="line" id="032947"><span class="nick" style="color:#2e2a4a"><a href="#032947" label="[03:29:47]">&lt;xentrac&gt;</a></span><span class="message">have you read the scsh acknowledgments?</span></div><div class="line" id="033012"><span class="nick" style="color:#8dd3c7"><a href="#033012" label="[03:30:12]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: no, I have not. Funny?</span></div><div class="line" id="033303"><span class="nick" style="color:#8dd3c7"><a href="#033303" label="[03:33:03]">&lt;OriansJ`&gt;</a></span><span class="message"> <a rel="nofollow" href="https://scsh.net/docu/html/man.html">https://scsh.net/docu/html/man.html</a>  now that is impressive</span></div><div class="line" id="033430"><span class="nick" style="color:#8dd3c7"><a href="#033430" label="[03:34:30]">&lt;OriansJ`&gt;</a></span><span class="message">makes me wish I learned that shell before bash</span></div><div class="line" id="033839"><span class="nick" style="color:#2e2a4a"><a href="#033839" label="[03:38:39]">&lt;xentrac&gt;</a></span><span class="message">some people find it funny</span></div><div class="line" id="033901"><span class="nick" style="color:#2e2a4a"><a href="#033901" label="[03:39:01]">&lt;xentrac&gt;</a></span><span class="message">yes, that</span></div><div class="line" id="034340"><span class="nick" style="color:#8dd3c7"><a href="#034340" label="[03:43:40]">&lt;OriansJ`&gt;</a></span><span class="message">this one is good too: <a rel="nofollow" href="https://www.ccs.neu.edu/home/shivers/advisor-stmt-original.txt">https://www.ccs.neu.edu/home/shivers/advisor-stmt-original.txt</a> </span></div><div class="line" id="034516"><span class="nick" style="color:#2e2a4a"><a href="#034516" label="[03:45:16]">&lt;xentrac&gt;</a></span><span class="message">it's always refreshing to see someone who so completely rejects opportunities to self-promote</span></div><div class="line" id="034805"><span class="nick" style="color:#8dd3c7"><a href="#034805" label="[03:48:05]">&lt;OriansJ`&gt;</a></span><span class="message">well because without minimal self-promotion, nothing one does will generally be noted.</span></div><div class="line" id="035534"><span class="nick" style="color:#2e2a4a"><a href="#035534" label="[03:55:34]">&lt;xentrac&gt;</a></span><span class="message">well, he does promote things he does, as well as things other people do, or did</span></div><div class="line" id="121135"><span class="nick" style="color:#8dd3c7"><a href="#121135" label="[12:11:35]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: so in effect, he is an amazing self-promoter; who is capable of convincing you that he is so impressive that he can completely reject opporunities to self-promote but still get noticed.</span></div><div class="line" id="121351"><span class="nick" style="color:#8dd3c7"><a href="#121351" label="[12:13:51]">&lt;OriansJ`&gt;</a></span><span class="message">Which reminds me of the rule of 10,000 ; imagine anything that you believe that everyone in the world knows about at this very second. Now realize that no matter what there are 10,000 new people showing up tomorrow. How do we ensure they find out too.</span></div><div class="line" id="121849"><span class="nick">***</span><span class="message notice">OriansJ` is now known as OriansJ</span></div><div class="line" id="122320"><span class="nick" style="color:#80b1d3"><a href="#122320" label="[12:23:20]">&lt;OriansJ&gt;</a></span><span class="message">well let us hope 10am is janneke awake/online time</span></div><div class="line" id="123702"><span class="nick" style="color:#6d2462"><a href="#123702" label="[12:37:02]">&lt;fossy&gt;</a></span><span class="message">OriansJ: which TZ are you in?</span></div><div class="line" id="123839"><span class="nick" style="color:#6d2462"><a href="#123839" label="[12:38:39]">&lt;fossy&gt;</a></span><span class="message">oh, OriansJ, i might be able to help you</span></div><div class="line" id="123844"><span class="nick" style="color:#6d2462"><a href="#123844" label="[12:38:44]">&lt;fossy&gt;</a></span><span class="message">this is what i am using rn for gcc-seed:</span></div><div class="line" id="123957"><span class="nick" style="color:#6d2462"><a href="#123957" label="[12:39:57]">&lt;fossy&gt;</a></span><span class="message">guile --no-auto-compile -e main -L module -L mes/module module/mescc.scm -o prog prog.c</span></div><div class="line" id="124006"><span class="nick" style="color:#6d2462"><a href="#124006" label="[12:40:06]">&lt;fossy&gt;</a></span><span class="message">it took me a fiddling to get that to work well, though</span></div><div class="line" id="124007"><span class="nick" style="color:#80b1d3"><a href="#124007" label="[12:40:07]">&lt;OriansJ&gt;</a></span><span class="message">fossy: same timezone as Detroit</span></div><div class="line" id="124103"><span class="nick" style="color:#6d2462"><a href="#124103" label="[12:41:03]">&lt;fossy&gt;</a></span><span class="message">from the root of a mes tarball post-make</span></div><div class="line" id="124212"><span class="nick" style="color:#6d2462"><a href="#124212" label="[12:42:12]">&lt;fossy&gt;</a></span><span class="message">happy to help you try and get further, I hope I have a reasonable understanding of how to run mescc since I struggled with guile and mes for quite a while</span></div><div class="line" id="124328"><span class="nick" style="color:#80b1d3"><a href="#124328" label="[12:43:28]">&lt;OriansJ&gt;</a></span><span class="message">well, let us help others avoid the struggle by getting MesCC working in mes-m2 right out of the box</span></div><div class="line" id="124343"><span class="nick" style="color:#6d2462"><a href="#124343" label="[12:43:43]">&lt;fossy&gt;</a></span><span class="message">if it works i would be over the moon TBH</span></div><div class="line" id="124410"><span class="nick" style="color:#6d2462"><a href="#124410" label="[12:44:10]">&lt;fossy&gt;</a></span><span class="message">i can't grok scheme atm</span></div><div class="line" id="124427"><span class="nick" style="color:#6d2462"><a href="#124427" label="[12:44:27]">&lt;fossy&gt;</a></span><span class="message">i've been trying to get a hold of it but functional programming is still a bit over my head in some ways</span></div><div class="line" id="124749"><span class="nick" style="color:#2e2a4a"><a href="#124749" label="[12:47:49]">&lt;xentrac&gt;</a></span><span class="message">OriansJ: yes, there is surely a countersignaling component to Shivers's trolling</span></div><div class="line" id="131838"><span class="nick" style="color:#80b1d3"><a href="#131838" label="[13:18:38]">&lt;OriansJ&gt;</a></span><span class="message">fossy: no luck thus far here for me</span></div><div class="line" id="132915"><span class="nick" style="color:#234e69"><a href="#132915" label="[13:29:15]">&lt;g_bor[m]1&gt;</a></span><span class="message"> [OriansJ](<a rel="nofollow" href="https://matrix.to/#/@freenode_OriansJ:matrix.org">https://matrix.to/#/@freenode_OriansJ:matrix.org</a>):  hope that i am not too late to the party, but I just read the tail calls discussion.</span></div><div class="line" id="133110"><span class="nick" style="color:#80b1d3"><a href="#133110" label="[13:31:10]">&lt;OriansJ&gt;</a></span><span class="message">g_bor[m]1: it is never too late to contribute</span></div><div class="line" id="133315"><span class="nick" style="color:#80b1d3"><a href="#133315" label="[13:33:15]">&lt;OriansJ&gt;</a></span><span class="message">the big piece right now is getting MesCC to work  out of the box in mes-m2; just leveraging a single guile command.</span></div><div class="line" id="133430"><span class="nick" style="color:#234e69"><a href="#133430" label="[13:34:30]">&lt;g_bor[m]1&gt;</a></span><span class="message">I believe it would be manageable to create a simplified thing that does continuation passing style. It would serve as an immediate layer. Then tail calls simply get out of the equation. How does that sound?</span></div><div class="line" id="133510"><span class="nick" style="color:#234e69"><a href="#133510" label="[13:35:10]">&lt;g_bor[m]1&gt;</a></span><span class="message">Intermediate...</span></div><div class="line" id="133614"><span class="nick" style="color:#80b1d3"><a href="#133614" label="[13:36:14]">&lt;OriansJ&gt;</a></span><span class="message">g_bor[m]1: certainly possible</span></div><div class="line" id="133621"><span class="nick" style="color:#6c3d55"><a href="#133621" label="[13:36:21]">&lt;rain1&gt;</a></span><span class="message">morning</span></div><div class="line" id="133628"><span class="nick" style="color:#80b1d3"><a href="#133628" label="[13:36:28]">&lt;OriansJ&gt;</a></span><span class="message">morning rain1</span></div><div class="line" id="133637"><span class="nick" style="color:#234e69"><a href="#133637" label="[13:36:37]">&lt;g_bor[m]1&gt;</a></span><span class="message">morning</span></div><div class="line" id="133706"><span class="nick" style="color:#80b1d3"><a href="#133706" label="[13:37:06]">&lt;OriansJ&gt;</a></span><span class="message">g_bor[m]1: I just don't know a way of implementing CPS that doesn't create one big tangled mess</span></div><div class="line" id="133717"><span class="nick" style="color:#6c3d55"><a href="#133717" label="[13:37:17]">&lt;rain1&gt;</a></span><span class="message">i had bad luck with CPS before</span></div><div class="line" id="133905"><span class="nick" style="color:#80b1d3"><a href="#133905" label="[13:39:05]">&lt;OriansJ&gt;</a></span><span class="message">as you can see; I really want mes-m2 to be trivial to understand: <a rel="nofollow" href="https://github.com/oriansj/mes-m2/blob/master/mes_eval.c#L224">https://github.com/oriansj/mes-m2/blob/master/mes_eval.c#L224</a> </span></div><div class="line" id="133937"><span class="nick" style="color:#6c3d55"><a href="#133937" label="[13:39:37]">&lt;rain1&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/rain-1/single_cream/blob/master/src/sch3.c#L999">https://github.com/rain-1/single_cream/blob/master/src/sch3.c#L999</a>  this is what i did</span></div><div class="line" id="134001"><span class="nick" style="color:#6c3d55"><a href="#134001" label="[13:40:01]">&lt;rain1&gt;</a></span><span class="message">for calls in tail position we use goto to jump back instead of recursion</span></div><div class="line" id="134058"><span class="nick" style="color:#234e69"><a href="#134058" label="[13:40:58]">&lt;g_bor[m]1&gt;</a></span><span class="message">The thing here is that the intermediate rep does not need to be 'usable'. We can use the simplest possible transform. I would go with a mechanical cps transform on the scheme site, and yes, goto for c calls.</span></div><div class="line" id="134133"><span class="nick" style="color:#6c3d55"><a href="#134133" label="[13:41:33]">&lt;rain1&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/rain-1/single_cream/blob/master/src/sch3.c#L1157">https://github.com/rain-1/single_cream/blob/master/src/sch3.c#L1157</a>  when applying a closure we set the current exp to its body and the env to its (already evaluated) arguments - and then jump back to eval</span></div><div class="line" id="134145"><span class="nick" style="color:#234e69"><a href="#134145" label="[13:41:45]">&lt;g_bor[m]1&gt;</a></span><span class="message">In tail position.</span></div><div class="line" id="134209"><span class="nick" style="color:#234e69"><a href="#134209" label="[13:42:09]">&lt;g_bor[m]1&gt;</a></span><span class="message">It does not even matter how long code it produces...</span></div><div class="line" id="134437"><span class="nick" style="color:#234e69"><a href="#134437" label="[13:44:37]">&lt;g_bor[m]1&gt;</a></span><span class="message">So it would be ok to be a tangled mess, as far as only the generated code is a tangled mess, but the transpilers are simple.</span></div><div class="line" id="134455"><span class="nick" style="color:#234e69"><a href="#134455" label="[13:44:55]">&lt;g_bor[m]1&gt;</a></span><span class="message">What do you think?</span></div><div class="line" id="134457"><span class="nick" style="color:#6c3d55"><a href="#134457" label="[13:44:57]">&lt;rain1&gt;</a></span><span class="message">the problem ih ad with my early compiler was that the CPS generated lots of extra lambdas</span></div><div class="line" id="134500"><span class="nick" style="color:#6c3d55"><a href="#134500" label="[13:45:00]">&lt;rain1&gt;</a></span><span class="message">and this slowed down execution</span></div><div class="line" id="134504"><span class="nick" style="color:#6c3d55"><a href="#134504" label="[13:45:04]">&lt;rain1&gt;</a></span><span class="message">of course I did something wrong</span></div><div class="line" id="134543"><span class="nick" style="color:#6c3d55"><a href="#134543" label="[13:45:43]">&lt;rain1&gt;</a></span><span class="message">I think I know now, how you do it right - <a rel="nofollow" href="http://matt.might.net/articles/cps-conversion/">http://matt.might.net/articles/cps-conversion/</a>  - but i have not tried it</span></div><div class="line" id="134549"><span class="nick" style="color:#6c3d55"><a href="#134549" label="[13:45:49]">&lt;rain1&gt;</a></span><span class="message">so i am just a bit scared of having the same blowup problem again</span></div><div class="line" id="134603"><span class="nick" style="color:#80b1d3"><a href="#134603" label="[13:46:03]">&lt;OriansJ&gt;</a></span><span class="message">g_bor[m]1: really not a fan of tangled messes; as I want people to be able to audit, debug and generally understand everything about mes-m2. So that they know nothing underhanded is hidden anywhere.</span></div><div class="line" id="134607"><span class="nick" style="color:#6c3d55"><a href="#134607" label="[13:46:07]">&lt;rain1&gt;</a></span><span class="message">the thing about the CPS transform is technically you can just turn everything into ore lambdas</span></div><div class="line" id="134608"><span class="nick" style="color:#6c3d55"><a href="#134608" label="[13:46:08]">&lt;rain1&gt;</a></span><span class="message">more*</span></div><div class="line" id="134628"><span class="nick" style="color:#6c3d55"><a href="#134628" label="[13:46:28]">&lt;rain1&gt;</a></span><span class="message">but it's way better to classify CPS created lambdas according to their kind and execute them differently</span></div><div class="line" id="134647"><span class="nick" style="color:#6c3d55"><a href="#134647" label="[13:46:47]">&lt;rain1&gt;</a></span><span class="message">this is where the link talks about Partitioned CPS, recovering the stack</span></div><div class="line" id="135051"><span class="nick" style="color:#234e69"><a href="#135051" label="[13:50:51]">&lt;g_bor[m]1&gt;</a></span><span class="message"> [OriansJ](<a rel="nofollow" href="https://matrix.to/#/@freenode_OriansJ:matrix.org">https://matrix.to/#/@freenode_OriansJ:matrix.org</a>):  yes, it depeds on how you define the complexity. I was thinking about in terms of this: have a simple source, then have a chain of simple transformers. If you are confident that these are doing the right thing, it does not matter how complicated are the intermediate representations passed along the chain.</span></div><div class="line" id="135242"><span class="nick" style="color:#80b1d3"><a href="#135242" label="[13:52:42]">&lt;OriansJ&gt;</a></span><span class="message">g_bor[m]1: look, I am fine with complext intermediate representations (comments can easily explain them in detail); I just don't know how to get CPS into mes-m2 in a simple form.</span></div><div class="line" id="135357"><span class="nick" style="color:#234e69"><a href="#135357" label="[13:53:57]">&lt;g_bor[m]1&gt;</a></span><span class="message">There is also one more thing, in the first layer simplicity dominates over performance. As we build up the bootstrap, we can change the transformers of the chain with more performant ones, as we have more powerful tool to build these, and we might express them with similar simplicity higher up the chain.</span></div><div class="line" id="135440"><span class="nick" style="color:#234e69"><a href="#135440" label="[13:54:40]">&lt;g_bor[m]1&gt;</a></span><span class="message">Ok, that now makes sense to me.</span></div><div class="line" id="135457"><span class="nick" style="color:#234e69"><a href="#135457" label="[13:54:57]">&lt;g_bor[m]1&gt;</a></span><span class="message">I will try to have a look</span></div><div class="line" id="135458"><span class="nick" style="color:#80b1d3"><a href="#135458" label="[13:54:58]">&lt;OriansJ&gt;</a></span><span class="message">well g_bor[m]1, mes-m2 is well on its way to being able to run <a rel="nofollow" href="http://canonical.org/~kragen/sw/urscheme/">http://canonical.org/~kragen/sw/urscheme/</a> </span></div><div class="line" id="135546"><span class="nick" style="color:#80b1d3"><a href="#135546" label="[13:55:46]">&lt;OriansJ&gt;</a></span><span class="message">which would allow us to move the scheme bootstrap work into a subset of scheme itself</span></div><div class="line" id="135716"><span class="nick" style="color:#234e69"><a href="#135716" label="[13:57:16]">&lt;g_bor[m]1&gt;</a></span><span class="message">Ok, will have a look at that also.</span></div><div class="line" id="135750"><span class="nick" style="color:#80b1d3"><a href="#135750" label="[13:57:50]">&lt;OriansJ&gt;</a></span><span class="message">The primary limitation there right now is I need to fix mes-m2's macro expansion phase: <a rel="nofollow" href="https://github.com/oriansj/mes-m2/blob/master/mes_macro.c">https://github.com/oriansj/mes-m2/blob/master/mes_macro.c</a> </span></div><div class="line" id="140112"><span class="nick" style="color:#80b1d3"><a href="#140112" label="[14:01:12]">&lt;OriansJ&gt;</a></span><span class="message">and then instead of messing around in C; scheme can become the primary language of bootstrapping work</span></div><div class="line" id="140157"><span class="nick" style="color:#6c3d55"><a href="#140157" label="[14:01:57]">&lt;rain1&gt;</a></span><span class="message">yeah getting self extensible as soon as possible is the key</span></div><div class="line" id="140233"><span class="nick" style="color:#80b1d3"><a href="#140233" label="[14:02:33]">&lt;OriansJ&gt;</a></span><span class="message">but personally, I am hoping I can just get MesCC in a working state; so that mes-m2 will be able to grow to run it directly. So that I don't end up having to build a scheme compiler too</span></div><div class="line" id="140237"><span class="nick" style="color:#6c3d55"><a href="#140237" label="[14:02:37]">&lt;rain1&gt;</a></span><span class="message">you could probably cut that file down a lot, since you have eval already it isn't really necessary to implement stuff like a macro table</span></div><div class="line" id="140243"><span class="nick" style="color:#6c3d55"><a href="#140243" label="[14:02:43]">&lt;rain1&gt;</a></span><span class="message">since that can just be implemented in scheme</span></div><div class="line" id="140250"><span class="nick" style="color:#6c3d55"><a href="#140250" label="[14:02:50]">&lt;rain1&gt;</a></span><span class="message">that's what i did in single_cream</span></div><div class="line" id="140409"><span class="nick" style="color:#80b1d3"><a href="#140409" label="[14:04:09]">&lt;OriansJ&gt;</a></span><span class="message">rain1: you are probably right</span></div><div class="line" id="140500"><span class="nick" style="color:#80b1d3"><a href="#140500" label="[14:05:00]">&lt;OriansJ&gt;</a></span><span class="message">just like I could probably simplify the reader and printer too by having the scheme core lambda lift it</span></div><div class="line" id="140521"><span class="nick" style="color:#6c3d55"><a href="#140521" label="[14:05:21]">&lt;rain1&gt;</a></span><span class="message">the printer yeah, but doing a reader im not sure</span></div><div class="line" id="140540"><span class="nick" style="color:#6c3d55"><a href="#140540" label="[14:05:40]">&lt;rain1&gt;</a></span><span class="message">unless you included pre-parsed scheme code in a C file</span></div><div class="line" id="140631"><span class="nick" style="color:#80b1d3"><a href="#140631" label="[14:06:31]">&lt;OriansJ&gt;</a></span><span class="message">but I guess those last 2 years working in assembly, made me look at it differently</span></div><div class="line" id="140704"><span class="nick" style="color:#80b1d3"><a href="#140704" label="[14:07:04]">&lt;OriansJ&gt;</a></span><span class="message">looks like janneke is now online</span></div><div class="line" id="140725"><span class="nick" style="color:#80b1d3"><a href="#140725" label="[14:07:25]">&lt;OriansJ&gt;</a></span><span class="message">janneke: I need your help with MesCC</span></div><div class="line" id="140744"><span class="nick" style="color:#d9d9d9"><a href="#140744" label="[14:07:44]">&lt;janneke&gt;</a></span><span class="message">OriansJ: sure, what's up</span></div><div class="line" id="140819"><span class="nick" style="color:#80b1d3"><a href="#140819" label="[14:08:19]">&lt;OriansJ&gt;</a></span><span class="message">I need your help getting the version of MesCC in mes-m2 working out of the box</span></div><div class="line" id="140857"><span class="nick" style="color:#80b1d3"><a href="#140857" label="[14:08:57]">&lt;OriansJ&gt;</a></span><span class="message">eg one should be able to run git clone and then guile --no-auto-compile -e main -L module -L mes/module -s module/mescc.scm -c mes.c -o foo.S and see MesCC produce a useful result</span></div><div class="line" id="141043"><span class="nick" style="color:#80b1d3"><a href="#141043" label="[14:10:43]">&lt;OriansJ&gt;</a></span><span class="message">if you could build off of commit 383436c07a4f86fad6218ea2bef285229a7c6ad5 it would be quite helpful</span></div><div class="line" id="141205"><span class="nick" style="color:#80b1d3"><a href="#141205" label="[14:12:05]">&lt;OriansJ&gt;</a></span><span class="message">or guile -L module/ -e main -s scripts/mescc.scm -- -c mes.c -o foo.S (basically any single guile command which would result in MesCC compiling anything)</span></div><div class="line" id="142024"><span class="nick" style="color:#bc80bd"><a href="#142024" label="[14:20:24]">*</a></span><span class="message">janneke pulls</span></div><div class="line" id="142102"><span class="nick" style="color:#d9d9d9"><a href="#142102" label="[14:21:02]">&lt;janneke&gt;</a></span><span class="message">OriansJ: alright, i'm having a look</span></div><div class="line" id="142110"><span class="nick" style="color:#80b1d3"><a href="#142110" label="[14:21:10]">&lt;OriansJ&gt;</a></span><span class="message">thank you janneke</span></div><div class="line" id="142242"><span class="nick" style="color:#d9d9d9"><a href="#142242" label="[14:22:42]">&lt;janneke&gt;</a></span><span class="message">(surely you'll have to do some sort of guix environment -l guix.scm // apt install ...)</span></div><div class="line" id="142328"><span class="nick" style="color:#d9d9d9"><a href="#142328" label="[14:23:28]">&lt;janneke&gt;</a></span><span class="message">i'm guessing something like guix environment --ad-hoc guile nyacc mescc-tools</span></div><div class="line" id="142402"><span class="nick" style="color:#80b1d3"><a href="#142402" label="[14:24:02]">&lt;OriansJ&gt;</a></span><span class="message">janneke: no; there will just git clone mes-m2 and then do useful work. Hence why nyacc is included in it</span></div><div class="line" id="142520"><span class="nick" style="color:#d9d9d9"><a href="#142520" label="[14:25:20]">&lt;janneke&gt;</a></span><span class="message">ah yes, i see</span></div><div class="line" id="142550"><span class="nick" style="color:#80b1d3"><a href="#142550" label="[14:25:50]">&lt;OriansJ&gt;</a></span><span class="message">imagine just a statically compiled guile binary and the clone repo of mes-m2 are the only things you have on the system.</span></div><div class="line" id="142609"><span class="nick" style="color:#80b1d3"><a href="#142609" label="[14:26:09]">&lt;OriansJ&gt;</a></span><span class="message">as that is what mes-m2 will ultimately behave like</span></div><div class="line" id="142630"><span class="nick" style="color:#3c5b35"><a href="#142630" label="[14:26:30]">&lt;stikonas&gt;</a></span><span class="message">yeah, it's much easier to build with M-2 Planet than mescc, messc should also be this simple...</span></div><div class="line" id="142635"><span class="nick" style="color:#d9d9d9"><a href="#142635" label="[14:26:35]">&lt;janneke&gt;</a></span><span class="message">hmm, guile.scm is missing</span></div><div class="line" id="142705"><span class="nick" style="color:#d9d9d9"><a href="#142705" label="[14:27:05]">&lt;janneke&gt;</a></span><span class="message">ice-9/boot-9.scm:3300:6: In procedure resolve-interface:</span></div><div class="line" id="142706"><span class="nick" style="color:#d9d9d9"><a href="#142706" label="[14:27:06]">&lt;janneke&gt;</a></span><span class="message">no code for module (mes guile)</span></div><div class="line" id="142739"><span class="nick" style="color:#d9d9d9"><a href="#142739" label="[14:27:39]">&lt;janneke&gt;</a></span><span class="message">i guess that was removed/not imported either to avoid, or because we did not want, to use guile</span></div><div class="line" id="142807"><span class="nick" style="color:#80b1d3"><a href="#142807" label="[14:28:07]">&lt;OriansJ&gt;</a></span><span class="message">entirely possible, it would certainly be my mistake</span></div><div class="line" id="142915"><span class="nick" style="color:#d9d9d9"><a href="#142915" label="[14:29:15]">&lt;janneke&gt;</a></span><span class="message">note that it's a good idea to compile the scm files during development</span></div><div class="line" id="142921"><span class="nick" style="color:#d9d9d9"><a href="#142921" label="[14:29:21]">&lt;janneke&gt;</a></span><span class="message">it gives much better error messages</span></div><div class="line" id="144841"><span class="nick" style="color:#80b1d3"><a href="#144841" label="[14:48:41]">&lt;OriansJ&gt;</a></span><span class="message">I blame 2 years of working in hex and assembly</span></div><div class="line" id="144939"><span class="nick" style="color:#d9d9d9"><a href="#144939" label="[14:49:39]">&lt;janneke&gt;</a></span><span class="message">hehe</span></div><div class="line" id="145127"><span class="nick" style="color:#80b1d3"><a href="#145127" label="[14:51:27]">&lt;OriansJ&gt;</a></span><span class="message">arm assembly is like bath salts; it only drives you crazy and you still hate the experience because instead of doing something sane like LOAD R0 #577; you have to do load R0 , [PC + 8]; b pc+4; .word 577</span></div><div class="line" id="145532"><span class="nick" style="color:#80b1d3"><a href="#145532" label="[14:55:32]">&lt;OriansJ&gt;</a></span><span class="message">So 12bytes to encode what could be done in 6bytes in a sane architecture</span></div><div class="line" id="145642"><span class="nick" style="color:#80b1d3"><a href="#145642" label="[14:56:42]">&lt;OriansJ&gt;</a></span><span class="message">it is freaking 2020, we have billions of transistors and they can't bother to support division? Seriously WTF</span></div><div class="line" id="145752"><span class="nick" style="color:#80b1d3"><a href="#145752" label="[14:57:52]">&lt;OriansJ&gt;</a></span><span class="message">Trying to write kaem in M1 for armv7l is an exercise in frustration.</span></div><div class="line" id="145951"><span class="nick" style="color:#d9d9d9"><a href="#145951" label="[14:59:51]">&lt;janneke&gt;</a></span><span class="message">OriansJ: i've added two commits to master at <a rel="nofollow" href="https://gitlab.com/janneke/mes-m2">https://gitlab.com/janneke/mes-m2</a> </span></div><div class="line" id="145957"><span class="nick" style="color:#d9d9d9"><a href="#145957" label="[14:59:57]">&lt;janneke&gt;</a></span><span class="message">OriansJ: hope that helps</span></div><div class="line" id="150008"><span class="nick" style="color:#80b1d3"><a href="#150008" label="[15:00:08]">&lt;OriansJ&gt;</a></span><span class="message">thank you janneke</span></div><div class="line" id="150118"><span class="nick" style="color:#d9d9d9"><a href="#150118" label="[15:01:18]">&lt;janneke&gt;</a></span><span class="message">OriansJ: yw!</span></div><div class="line" id="150310"><span class="nick" style="color:#af8d2f"><a href="#150310" label="[15:03:10]">&lt;jelle&gt;</a></span><span class="message">TIL about GCC 2.96, somewhat bootstrapping related I guess <a rel="nofollow" href="https://twitter.com/Foone/status/1312451205814128640">https://twitter.com/Foone/status/1312451205814128640</a> </span></div><div class="line" id="150354"><span class="nick" style="color:#389600"><a href="#150354" label="[15:03:54]">&lt;bauen1&gt;</a></span><span class="message">OriansJ: i've been disassembling the boot rom of the allwinner h5 (armv7) and while the load immediate is a bit annoying everything else is pretty easy to understand (it has a certain similiarity with 6502)</span></div><div class="line" id="150444"><span class="nick" style="color:#80b1d3"><a href="#150444" label="[15:04:44]">&lt;OriansJ&gt;</a></span><span class="message">success</span></div><div class="line" id="150502"><span class="nick" style="color:#389600"><a href="#150502" label="[15:05:02]">&lt;bauen1&gt;</a></span><span class="message">it does have its fair share of &quot;obscure&quot; opcodes</span></div><div class="line" id="150505"><span class="nick" style="color:#d9d9d9"><a href="#150505" label="[15:05:05]">&lt;janneke&gt;</a></span><span class="message">jelle: fun times</span></div><div class="line" id="150552"><span class="nick" style="color:#389600"><a href="#150552" label="[15:05:52]">&lt;bauen1&gt;</a></span><span class="message">there's also been another post on hackernews about a small c compiler <a rel="nofollow" href="https://news.ycombinator.com/item?id=24676851">https://news.ycombinator.com/item?id=24676851</a> </span></div><div class="line" id="150703"><span class="nick" style="color:#389600"><a href="#150703" label="[15:07:03]">&lt;bauen1&gt;</a></span><span class="message">apparently by the creator of 8cc but with the goal of being easier to understand</span></div><div class="line" id="151329"><span class="nick" style="color:#389600"><a href="#151329" label="[15:13:29]">&lt;bauen1&gt;</a></span><span class="message">OriansJ: are you at the point where mescc works correctly (using guile) but mes-m2 doesn't (yet) support all features necessary to run it ?</span></div><div class="line" id="151515"><span class="nick" style="color:#80b1d3"><a href="#151515" label="[15:15:15]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: well janneke's recent commit does get guile --no-auto-compile -L module -e main scripts/mescc.scm -S -o foo.S scaffold/exit-42.c working</span></div><div class="line" id="152922"><span class="nick" style="color:#80b1d3"><a href="#152922" label="[15:29:22]">&lt;OriansJ&gt;</a></span><span class="message">however guile --no-auto-compile -L module -e main scripts/mescc.scm -S mes.c -o foo.S doesn't work but I am guessing because I need to include some libraries in include and the pass a parameter to tell MesCC to use that folder instead of trying to read ~/.guix-profile/include/gnu/stubs.h:7</span></div><div class="line" id="153055"><span class="nick" style="color:#d9d9d9"><a href="#153055" label="[15:30:55]">&lt;janneke&gt;</a></span><span class="message">yeah, -I &lt;somewhere&gt;; although mescc works best with mes lib c</span></div><div class="line" id="153631"><span class="nick" style="color:#80b1d3"><a href="#153631" label="[15:36:31]">&lt;OriansJ&gt;</a></span><span class="message">janneke: I copied over the include folder from mes (and pushed as commit 99842b12108319e8d3d4fbe9eb7c01dcaad8f206 ) yet still a bit of an error when I run: guile --no-auto-compile -L module -e main scripts/mescc.scm -I include -S mes.c -o foo.S</span></div><div class="line" id="153706"><span class="nick" style="color:#bc80bd"><a href="#153706" label="[15:37:06]">*</a></span><span class="message">janneke looks</span></div><div class="line" id="154020"><span class="nick" style="color:#d9d9d9"><a href="#154020" label="[15:40:20]">&lt;janneke&gt;</a></span><span class="message">init-declr-&gt;info: not supported:  ((ftn-declr (scope (ident &quot;FUNCTION&quot;)) ...</span></div><div class="line" id="154053"><span class="nick" style="color:#80b1d3"><a href="#154053" label="[15:40:53]">&lt;OriansJ&gt;</a></span><span class="message">if you notice gcc_req.h</span></div><div class="line" id="154129"><span class="nick" style="color:#80b1d3"><a href="#154129" label="[15:41:29]">&lt;OriansJ&gt;</a></span><span class="message">where I typedef FUNCTION to enable a common function pointer type with GCC and M2-Planet</span></div><div class="line" id="154556"><span class="nick" style="color:#80b1d3"><a href="#154556" label="[15:45:56]">&lt;OriansJ&gt;</a></span><span class="message">would I be leveraging functionality that MesCC doesn't currently support?</span></div><div class="line" id="154648"><span class="nick" style="color:#d9d9d9"><a href="#154648" label="[15:46:48]">&lt;janneke&gt;</a></span><span class="message">yes, looks like an unspported C construct</span></div><div class="line" id="154808"><span class="nick" style="color:#80b1d3"><a href="#154808" label="[15:48:08]">&lt;OriansJ&gt;</a></span><span class="message">but I am happy to report guile --no-auto-compile -L module -e main scripts/mescc.scm -I include -S ../mescc-tools/M1-macro.c -o foo.S works quite happily</span></div><div class="line" id="154827"><span class="nick" style="color:#d9d9d9"><a href="#154827" label="[15:48:27]">&lt;janneke&gt;</a></span><span class="message">good!</span></div><div class="line" id="154901"><span class="nick" style="color:#80b1d3"><a href="#154901" label="[15:49:01]">&lt;OriansJ&gt;</a></span><span class="message">I guess I have a feature request for MesCC janneke so that it'll be able to build mes-m2</span></div><div class="line" id="154924"><span class="nick" style="color:#80b1d3"><a href="#154924" label="[15:49:24]">&lt;OriansJ&gt;</a></span><span class="message">^_^</span></div><div class="line" id="154944"><span class="nick" style="color:#d9d9d9"><a href="#154944" label="[15:49:44]">&lt;janneke&gt;</a></span><span class="message">hehe, you're doing cwazy stuff that even tcc doesn't need</span></div><div class="line" id="155013"><span class="nick" style="color:#d9d9d9"><a href="#155013" label="[15:50:13]">&lt;janneke&gt;</a></span><span class="message">you can probably #ifdef around that for now</span></div><div class="line" id="155126"><span class="nick" style="color:#80b1d3"><a href="#155126" label="[15:51:26]">&lt;OriansJ&gt;</a></span><span class="message">yet so trivial to support <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/blob/master/cc_core.c#L352">https://github.com/oriansj/M2-Planet/blob/master/cc_core.c#L352</a> </span></div><div class="line" id="155259"><span class="nick" style="color:#80b1d3"><a href="#155259" label="[15:52:59]">&lt;OriansJ&gt;</a></span><span class="message">well I am dreaming of a day where we no longer need TCC and can just use MesCC to compile GCC directly.</span></div><div class="line" id="155556"><span class="nick" style="color:#80b1d3"><a href="#155556" label="[15:55:56]">&lt;OriansJ&gt;</a></span><span class="message">I guess I finally beat janneke to supporting a C feature. It took 2 years but I finally did it ^_^</span></div><div class="line" id="155632"><span class="nick" style="color:#d9d9d9"><a href="#155632" label="[15:56:32]">&lt;janneke&gt;</a></span><span class="message">:)</span></div><div class="line" id="155709"><span class="nick" style="color:#80b1d3"><a href="#155709" label="[15:57:09]">&lt;OriansJ&gt;</a></span><span class="message">had to go crazy in assembly and bootstrap the world from scratch but finally after 2 long years. I finally didn't get beaten to a C feature by janneke ^_^</span></div><div class="line" id="155845"><span class="nick" style="color:#80b1d3"><a href="#155845" label="[15:58:45]">&lt;OriansJ&gt;</a></span><span class="message">now I have the irony of having the ability to bootstrap mes-m2 but not the ability to run MesCC on mes-m2; which can bootstrap GCC but not mes-m2.</span></div><div class="line" id="155917"><span class="nick" style="color:#d9d9d9"><a href="#155917" label="[15:59:17]">&lt;janneke&gt;</a></span><span class="message">brilliant!</span></div><div class="line" id="160038"><span class="nick" style="color:#80b1d3"><a href="#160038" label="[16:00:38]">&lt;OriansJ&gt;</a></span><span class="message">So I guess it is now a race to see which happens first. MesCC gaining the ability to build mes-m2 or mes-m2 gaining the ability to run MesCC</span></div><div class="line" id="160249"><span class="nick" style="color:#80b1d3"><a href="#160249" label="[16:02:49]">&lt;OriansJ&gt;</a></span><span class="message">This seriously is HILARIOUS, I gotta put this in the README</span></div><div class="line" id="160441"><span class="nick" style="color:#6c3d55"><a href="#160441" label="[16:04:41]">&lt;rain1&gt;</a></span><span class="message">haha</span></div><div class="line" id="160708"><span class="nick" style="color:#80b1d3"><a href="#160708" label="[16:07:08]">&lt;OriansJ&gt;</a></span><span class="message">now for the entire world to see: <a rel="nofollow" href="https://github.com/oriansj/mes-m2/blob/master/README.md">https://github.com/oriansj/mes-m2/blob/master/README.md</a> </span></div><div class="line" id="160729"><span class="nick" style="color:#389600"><a href="#160729" label="[16:07:29]">&lt;bauen1&gt;</a></span><span class="message">lol</span></div><div class="line" id="160801"><span class="nick" style="color:#80b1d3"><a href="#160801" label="[16:08:01]">&lt;OriansJ&gt;</a></span><span class="message">I guess the biggest bootstrapping challenge of all has just started. Is janneke able to build a C compiler powerful enough to build the crap that I write.  ^_^</span></div><div class="line" id="160803"><span class="nick" style="color:#389600"><a href="#160803" label="[16:08:03]">&lt;bauen1&gt;</a></span><span class="message">and this is the last components missing to bootstrapping linux + gnu from nothing</span></div><div class="line" id="160824"><span class="nick" style="color:#80b1d3"><a href="#160824" label="[16:08:24]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: effectively yes</span></div><div class="line" id="160824"><span class="nick" style="color:#bc80bd"><a href="#160824" label="[16:08:24]">*</a></span><span class="message">janneke gives up</span></div><div class="line" id="160836"><span class="nick" style="color:#80b1d3"><a href="#160836" label="[16:08:36]">&lt;OriansJ&gt;</a></span><span class="message">LOLZ</span></div><div class="line" id="160844"><span class="nick" style="color:#d9d9d9"><a href="#160844" label="[16:08:44]">&lt;janneke&gt;</a></span><span class="message">let's call it kwits</span></div><div class="line" id="160851"><span class="nick" style="color:#389600"><a href="#160851" label="[16:08:51]">&lt;bauen1&gt;</a></span><span class="message">awesome</span></div><div class="line" id="160859"><span class="nick" style="color:#80b1d3"><a href="#160859" label="[16:08:59]">&lt;OriansJ&gt;</a></span><span class="message">*ROFL*</span></div><div class="line" id="160912"><span class="nick" style="color:#d9d9d9"><a href="#160912" label="[16:09:12]">&lt;janneke&gt;</a></span><span class="message">that proves it, -can't be done-</span></div><div class="line" id="160942"><span class="nick" style="color:#80b1d3"><a href="#160942" label="[16:09:42]">&lt;OriansJ&gt;</a></span><span class="message">*shit you made me laugh so loud I woke up my son and my wife is pissed*</span></div><div class="line" id="161033"><span class="nick" style="color:#d9d9d9"><a href="#161033" label="[16:10:33]">&lt;janneke&gt;</a></span><span class="message">hehe, *lol* -- oops</span></div><div class="line" id="161043"><span class="nick" style="color:#d9d9d9"><a href="#161043" label="[16:10:43]">&lt;janneke&gt;</a></span><span class="message">you can tell her i apologized</span></div><div class="line" id="161056"><span class="nick" style="color:#d9d9d9"><a href="#161056" label="[16:10:56]">&lt;janneke&gt;</a></span><span class="message">(at a good time)</span></div><div class="line" id="161135"><span class="nick" style="color:#80b1d3"><a href="#161135" label="[16:11:35]">&lt;OriansJ&gt;</a></span><span class="message">from the other side of the house no less</span></div><div class="line" id="161250"><span class="nick" style="color:#80b1d3"><a href="#161250" label="[16:12:50]">&lt;OriansJ&gt;</a></span><span class="message">and now here I am wondering, does this explain all of the insanity I saw in Mes.c</span></div><div class="line" id="161340"><span class="nick" style="color:#80b1d3"><a href="#161340" label="[16:13:40]">&lt;OriansJ&gt;</a></span><span class="message">like janneke forgot that function pointers existed and reinvented a new type of function pointers to shoe horn that functionality into mes.c</span></div><div class="line" id="161358"><span class="nick" style="color:#80b1d3"><a href="#161358" label="[16:13:58]">&lt;OriansJ&gt;</a></span><span class="message">oh my god, it explains SOOO MUCH</span></div><div class="line" id="161423"><span class="nick" style="color:#80b1d3"><a href="#161423" label="[16:14:23]">&lt;OriansJ&gt;</a></span><span class="message">janneke literally void*'d his way to bootstrap GCC</span></div><div class="line" id="161604"><span class="nick" style="color:#80b1d3"><a href="#161604" label="[16:16:04]">&lt;OriansJ&gt;</a></span><span class="message">So we have a scheme programmer dealing mostly with C and a C programmer dealing mostly with scheme.</span></div><div class="line" id="162620"><span class="nick" style="color:#d9d9d9"><a href="#162620" label="[16:26:20]">&lt;janneke&gt;</a></span><span class="message">oh my, looks like i've been silly :-)</span></div><div class="line" id="162739"><span class="nick" style="color:#d9d9d9"><a href="#162739" label="[16:27:39]">&lt;janneke&gt;</a></span><span class="message">oh well, easy cleanups are the best</span></div><div class="line" id="162843"><span class="nick" style="color:#80b1d3"><a href="#162843" label="[16:28:43]">&lt;OriansJ&gt;</a></span><span class="message">I think I know how to fix macros in mes-m2 now</span></div><div class="line" id="185359"><span class="nick" style="color:#6b8072"><a href="#185359" label="[18:53:59]">&lt;Hagfish&gt;</a></span><span class="message">from the creator of 8cc: <a rel="nofollow" href="https://github.com/rui314/chibicc">https://github.com/rui314/chibicc</a> </span></div><div class="line" id="185411"><span class="nick" style="color:#6b8072"><a href="#185411" label="[18:54:11]">&lt;Hagfish&gt;</a></span><span class="message">(another small C compiler that can't compile gcc?)</span></div><div class="line" id="185523"><span class="nick" style="color:#3c5b35"><a href="#185523" label="[18:55:23]">&lt;stikonas&gt;</a></span><span class="message">maybe nobody tried?</span></div><div class="line" id="194906"><span class="nick" style="color:#80b1d3"><a href="#194906" label="[19:49:06]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: well it is trivial to create a C compiler</span></div><div class="line" id="194937"><span class="nick" style="color:#80b1d3"><a href="#194937" label="[19:49:37]">&lt;OriansJ&gt;</a></span><span class="message">and if someone took the time to simplify GCC, then most C compilers in the world would be able to compile GCC with trivial efforts</span></div><div class="line" id="195024"><span class="nick" style="color:#80b1d3"><a href="#195024" label="[19:50:24]">&lt;OriansJ&gt;</a></span><span class="message">but as no one is crazy enough to do that, we are stuck with only equally crazy efforts for making compilers capable of building the current mess that is GCC.</span></div><div class="line" id="195144"><span class="nick" style="color:#80b1d3"><a href="#195144" label="[19:51:44]">&lt;OriansJ&gt;</a></span><span class="message">It would take 2 years of effort but it isn't outside the realm of possiblity that someone could convert GCC 4.7.4 into a form that M2-Planet could directly compile.</span></div><div class="line" id="195218"><span class="nick" style="color:#80b1d3"><a href="#195218" label="[19:52:18]">&lt;OriansJ&gt;</a></span><span class="message">Honestly, I toyed with the idea of doing that mightself for the M3 work.</span></div><div class="line" id="195303"><span class="nick" style="color:#80b1d3"><a href="#195303" label="[19:53:03]">&lt;OriansJ&gt;</a></span><span class="message">then I saw the state of binutils.</span></div><div class="line" id="195507"><span class="nick" style="color:#80b1d3"><a href="#195507" label="[19:55:07]">&lt;OriansJ&gt;</a></span><span class="message">having to support all of that arbitrary half supported crap for platforms that don't even exist anymore (Itanic anyone?) and binary formats no one uses (BeOS hunk) simply because no one has the &quot;authority&quot; to remove anything.</span></div><div class="line" id="195557"><span class="nick" style="color:#80b1d3"><a href="#195557" label="[19:55:57]">&lt;OriansJ&gt;</a></span><span class="message">but silently breaking functionality and leaving a boatload of compiler warning around like a river of sewage through a school playground</span></div><div class="line" id="200141"><span class="nick" style="color:#80b1d3"><a href="#200141" label="[20:01:41]">&lt;OriansJ&gt;</a></span><span class="message">if anything the source code for compilers by definition must be the cleanest code on the block but the reality one sees in clang and GCC reminds one of cthulhu and the filth of eldrich horror; which comes as a side effect of people working in a code base levels beyound their understanding.</span></div><div class="line" id="200730"><span class="nick" style="color:#80b1d3"><a href="#200730" label="[20:07:30]">&lt;OriansJ&gt;</a></span><span class="message">I guess one could say the best thing about C compilers is there are so many standards to choose from and only a handful of complex programs work with multiple C compilers.</span></div><div class="line" id="201008"><span class="nick" style="color:#80b1d3"><a href="#201008" label="[20:10:08]">&lt;OriansJ&gt;</a></span><span class="message">Which is why GCC is so hard to replace with Clang, despite literal armies of paid programmers trying to replace the need for GCC.</span></div><div class="line" id="201754"><span class="nick" style="color:#80b1d3"><a href="#201754" label="[20:17:54]">&lt;OriansJ&gt;</a></span><span class="message">At its core, C is a trivial language. you take a stream of characters and convert into a list of tokens. you feed that list of tokens into a C state machine and out comes the assembly list. Which you then can optimize to various levels and then you convert the remaining assembly list into an object file; that you then link into your binary.</span></div><div class="line" id="201805"><span class="nick" style="color:#80b1d3"><a href="#201805" label="[20:18:05]">&lt;OriansJ&gt;</a></span><span class="message">depending upon how much of the language you wish to support, it can be done in less than 500 lines of C code.</span></div><div class="line" id="201907"><span class="nick" style="color:#80b1d3"><a href="#201907" label="[20:19:07]">&lt;OriansJ&gt;</a></span><span class="message">with the C state machine being either the simplest or the most complex part of your program. (With optimzation either being missing or the most complex part of your program)</span></div><div class="line" id="201946"><span class="nick" style="color:#80b1d3"><a href="#201946" label="[20:19:46]">&lt;OriansJ&gt;</a></span><span class="message">and yes the preprocessor can really complicate the shit out of everything but it probably should be thought of as a seperate program.</span></div><div class="line" id="202452"><span class="nick" style="color:#8dd3c7"><a href="#202452" label="[20:24:52]">&lt;V&gt;</a></span><span class="message">a very simple unoptimised compiler, yes</span></div><div class="line" id="202517"><span class="nick" style="color:#8dd3c7"><a href="#202517" label="[20:25:17]">&lt;V&gt;</a></span><span class="message">you *probably* want to lower it to an IR, then have a large number of optimisation passes on that, along with keeping metadata attached so you can do LTO...</span></div><div class="line" id="202611"><span class="nick" style="color:#8dd3c7"><a href="#202611" label="[20:26:11]">&lt;V&gt;</a></span><span class="message">and that's not to mention the amount of effort it takes to write a parser that can recover from syntax errors, good error messages, static analysis for dead code &amp; memory unsafety, ...</span></div><div class="line" id="202647"><span class="nick" style="color:#8dd3c7"><a href="#202647" label="[20:26:47]">&lt;V&gt;</a></span><span class="message">and then generating code that's properly optimised for n different architectures, where different operations become more efficient over time, etc</span></div><div class="line" id="203056"><span class="nick" style="color:#389600"><a href="#203056" label="[20:30:56]">&lt;bauen1&gt;</a></span><span class="message">the preprocessor should really be a standalone program, but at the same time it really shouldn't exist (in it's current form)</span></div><div class="line" id="203245"><span class="nick" style="color:#8dd3c7"><a href="#203245" label="[20:32:45]">&lt;V&gt;</a></span><span class="message">*also* if you want to be compatible with vendor-specific extensions (which are real and useful to a decent extent) then there's all of that as well</span></div><div class="line" id="204440"><span class="nick" style="color:#80b1d3"><a href="#204440" label="[20:44:40]">&lt;OriansJ&gt;</a></span><span class="message">V: indeed making C fast or easy to work with is a bitch to do</span></div><div class="line" id="204837"><span class="nick" style="color:#80b1d3"><a href="#204837" label="[20:48:37]">&lt;OriansJ&gt;</a></span><span class="message">but then again so is every other serious language</span></div><div class="line" id="205107"><span class="nick" style="color:#80b1d3"><a href="#205107" label="[20:51:07]">&lt;OriansJ&gt;</a></span><span class="message">basic lisp interpreter -&gt; 300 lines of C; A full compliant scheme -&gt; 177,056 lines of C and 92,817 lines of scheme too</span></div><div class="line" id="205248"><span class="nick" style="color:#80b1d3"><a href="#205248" label="[20:52:48]">&lt;OriansJ&gt;</a></span><span class="message">but that might just be me complaining about how much of that standard, I have to support to build other people's shit.</span></div><div class="line" id="220529"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado</span></div><br /></div></body></html>