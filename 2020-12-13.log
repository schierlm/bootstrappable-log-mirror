<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-12-13.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="003403"><span class="nick" style="color:#8dd3c7"><a href="#003403" label="[00:34:03]">&lt;OriansJ&gt;</a></span><span class="message">yt: I can absolutely tell you are not an emacs whitespace mode user.</span></div><div class="line" id="003414"><span class="nick" style="color:#2e2a4a"><a href="#003414" label="[00:34:14]">&lt;xentrac&gt;</a></span><span class="message">haha</span></div><div class="line" id="003441"><span class="nick" style="color:#6b8072"><a href="#003441" label="[00:34:41]">&lt;fossy&gt;</a></span><span class="message">hows that</span></div><div class="line" id="003456"><span class="nick" style="color:#8dd3c7"><a href="#003456" label="[00:34:56]">&lt;OriansJ&gt;</a></span><span class="message">fossy: the whitespace</span></div><div class="line" id="003501"><span class="nick" style="color:#6b8072"><a href="#003501" label="[00:35:01]">&lt;fossy&gt;</a></span><span class="message">does anyone else other than me here not use emacs</span></div><div class="line" id="003526"><span class="nick" style="color:#6b8072"><a href="#003526" label="[00:35:26]">&lt;fossy&gt;</a></span><span class="message">what characteristic of the whitespace leads you to draw that conclusion</span></div><div class="line" id="003528"><span class="nick" style="color:#8dd3c7"><a href="#003528" label="[00:35:28]">&lt;OriansJ&gt;</a></span><span class="message">fossy: vim has a whitespace mode too</span></div><div class="line" id="003537"><span class="nick" style="color:#6b8072"><a href="#003537" label="[00:35:37]">&lt;fossy&gt;</a></span><span class="message">oh ive never used it</span></div><div class="line" id="003544"><span class="nick" style="color:#2e2a4a"><a href="#003544" label="[00:35:44]">&lt;xentrac&gt;</a></span><span class="message">trailing whitespace at the ends of lines presumably</span></div><div class="line" id="003609"><span class="nick" style="color:#8dd3c7"><a href="#003609" label="[00:36:09]">&lt;OriansJ&gt;</a></span><span class="message">mixing of tabs and spaces too</span></div><div class="line" id="003637"><span class="nick" style="color:#8dd3c7"><a href="#003637" label="[00:36:37]">&lt;OriansJ&gt;</a></span><span class="message">I do tab indention and space alignment</span></div><div class="line" id="003652"><span class="nick" style="color:#2e2a4a"><a href="#003652" label="[00:36:52]">&lt;xentrac&gt;</a></span><span class="message">aha, so it's tabstop-dependent code</span></div><div class="line" id="003720"><span class="nick" style="color:#8dd3c7"><a href="#003720" label="[00:37:20]">&lt;OriansJ&gt;</a></span><span class="message">so \tadd r0 r1 r2\space\space\space# comment</span></div><div class="line" id="003735"><span class="nick" style="color:#8dd3c7"><a href="#003735" label="[00:37:35]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: no, just a style of mine</span></div><div class="line" id="003758"><span class="nick" style="color:#8dd3c7"><a href="#003758" label="[00:37:58]">&lt;OriansJ&gt;</a></span><span class="message">that looks universally consistent regardless of your tab size</span></div><div class="line" id="003813"><span class="nick" style="color:#2e2a4a"><a href="#003813" label="[00:38:13]">&lt;xentrac&gt;</a></span><span class="message">yes, it does.  I meant &quot;mixing of tabs and spaces too&quot;</span></div><div class="line" id="004203"><span class="nick" style="color:#8dd3c7"><a href="#004203" label="[00:42:03]">&lt;OriansJ&gt;</a></span><span class="message">I also have sin running too; so unicode characters are like giant red flags</span></div><div class="line" id="004341"><span class="nick" style="color:#8dd3c7"><a href="#004341" label="[00:43:41]">&lt;OriansJ&gt;</a></span><span class="message">plus doing #\t instead of #\space\space\space to comment lines of assembly don't require messing any further with whitespace to keep everything lined up nice.</span></div><div class="line" id="004837"><span class="nick" style="color:#8dd3c7"><a href="#004837" label="[00:48:37]">&lt;OriansJ&gt;</a></span><span class="message">and if you cloned stage0 you can build your own copy of sin with: gcc High_level_prototypes/sin.c -o bin/sin</span></div><div class="line" id="005242"><span class="nick" style="color:#8dd3c7"><a href="#005242" label="[00:52:42]">&lt;OriansJ&gt;</a></span><span class="message">fossy: and for refernce I too am a vim user as well as an emacs user; they both have things they do better than the other. Never really cared for evil-mode though.</span></div><div class="line" id="005541"><span class="nick" style="color:#2e2a4a"><a href="#005541" label="[00:55:41]">&lt;xentrac&gt;</a></span><span class="message">I use vim for writing email or editing configuration files, emacs for programming usually</span></div><div class="line" id="020530"><span class="nick">***</span><span class="message notice">scs is now known as Guest16503</span></div><div class="line" id="022025"><span class="nick" style="color:#8dd3c7"><a href="#022025" label="[02:20:25]">&lt;OriansJ&gt;</a></span><span class="message">deesix: if it wouldn't be to much to ask; could you do a little double check for me</span></div><div class="line" id="022821"><span class="nick" style="color:#8dd3c7"><a href="#022821" label="[02:28:21]">&lt;OriansJ&gt;</a></span><span class="message">yt: there is a bug with postfix_expr_array_string_6</span></div><div class="line" id="022941"><span class="nick" style="color:#8dd3c7"><a href="#022941" label="[02:29:41]">&lt;OriansJ&gt;</a></span><span class="message">it needs to be '00' not '  ' as M0 will just be dropping the '\'' which will result in the string being: &quot;# looking up offset\n&quot; instead of an empty string</span></div><div class="line" id="023151"><span class="nick" style="color:#8dd3c7"><a href="#023151" label="[02:31:51]">&lt;OriansJ&gt;</a></span><span class="message">but besides that and some whitespace issues; I see no problem with cc_aarch64.M1 and will be merging now with a small patch to clear out the issues</span></div><div class="line" id="025000"><span class="nick" style="color:#8dd3c7"><a href="#025000" label="[02:50:00]">&lt;OriansJ&gt;</a></span><span class="message">yt: cc_aarch64.M1 has been merged</span></div><div class="line" id="030433"><span class="nick" style="color:#8dd3c7"><a href="#030433" label="[03:04:33]">&lt;OriansJ&gt;</a></span><span class="message">and the whitespace fixes are up</span></div><div class="line" id="030537"><span class="nick" style="color:#8dd3c7"><a href="#030537" label="[03:05:37]">&lt;OriansJ&gt;</a></span><span class="message">yt: all that remains is kaem and the steps in kaem form to complete the AArch64 mescc-tools-seed bootstrap</span></div><div class="line" id="031547"><span class="nick" style="color:#8dd3c7"><a href="#031547" label="[03:15:47]">&lt;OriansJ&gt;</a></span><span class="message">deesix: I only need an extra set of eyes to make sure I didn't miss something obvious with the DEFINEs</span></div><div class="line" id="041055"><span class="nick">***</span><span class="message notice">scs is now known as Guest44817</span></div><div class="line" id="095548"><span class="nick" style="color:#80b1d3"><a href="#095548" label="[09:55:48]">&lt;siraben&gt;</a></span><span class="message">pder: interesting, runhaskell lonely.hs &lt; effectively.hs works but if I compile lonely.hs using GHC and do ./lonely.hs &lt; effectively.hs, I get an error about invalid argument to Prelude.chr</span></div><div class="line" id="095846"><span class="nick" style="color:#80b1d3"><a href="#095846" label="[09:58:46]">&lt;siraben&gt;</a></span><span class="message">new patch <a rel="nofollow" href="https://ix.io/2HOl">https://ix.io/2HOl</a> </span></div><div class="line" id="095952"><span class="nick" style="color:#80b1d3"><a href="#095952" label="[09:59:52]">&lt;siraben&gt;</a></span><span class="message">alright, so we should figure out how to get the generated lonely.c to compile</span></div><div class="line" id="113219"><span class="nick" style="color:#6b8072"><a href="#113219" label="[11:32:19]">&lt;fossy&gt;</a></span><span class="message">OriansJ: yt give me a ping when you do kaem and I'll review it</span></div><div class="line" id="113314"><span class="nick" style="color:#8dd3c7"><a href="#113314" label="[11:33:14]">&lt;OriansJ&gt;</a></span><span class="message">thank you fossy</span></div><div class="line" id="114307"><span class="nick" style="color:#8dd3c7"><a href="#114307" label="[11:43:07]">&lt;OriansJ&gt;</a></span><span class="message">hey rain1 how are things?</span></div><div class="line" id="114354"><span class="nick" style="color:#6d2462"><a href="#114354" label="[11:43:54]">&lt;rain1&gt;</a></span><span class="message">hey! pretty good here. just back from gym</span></div><div class="line" id="114356"><span class="nick" style="color:#6d2462"><a href="#114356" label="[11:43:56]">&lt;rain1&gt;</a></span><span class="message">how are you?</span></div><div class="line" id="114648"><span class="nick" style="color:#8dd3c7"><a href="#114648" label="[11:46:48]">&lt;OriansJ&gt;</a></span><span class="message">still learning how to deal with the being a dad; everyday is a series of new learning experiences and challenging problems to face.</span></div><div class="line" id="114737"><span class="nick" style="color:#8dd3c7"><a href="#114737" label="[11:47:37]">&lt;OriansJ&gt;</a></span><span class="message">So lots of fun but moments where I wonder how could I be so stupid.</span></div><div class="line" id="114810"><span class="nick" style="color:#8dd3c7"><a href="#114810" label="[11:48:10]">&lt;OriansJ&gt;</a></span><span class="message">its great but it really kills a big chunk of my hacking time.</span></div><div class="line" id="114938"><span class="nick" style="color:#8dd3c7"><a href="#114938" label="[11:49:38]">&lt;OriansJ&gt;</a></span><span class="message">fortunately yt has taken up the AArch64 work; pder and siraben are taking the lead bootstrapping Haskell</span></div><div class="line" id="124349"><span class="nick" style="color:#6d2462"><a href="#124349" label="[12:43:49]">&lt;rain1&gt;</a></span><span class="message">that's wonderful :)</span></div><div class="line" id="165403"><span class="nick" style="color:#234e69"><a href="#165403" label="[16:54:03]">&lt;deesix&gt;</a></span><span class="message">OriansJ, sure. I'll take a look at the DEFINEs in cc_aarch64.M1.</span></div><div class="line" id="165509"><span class="nick" style="color:#80b1d3"><a href="#165509" label="[16:55:09]">&lt;siraben&gt;</a></span><span class="message">OriansJ: do you plan on teaching your son math and programming?</span></div><div class="line" id="165629"><span class="nick" style="color:#80b1d3"><a href="#165629" label="[16:56:29]">&lt;siraben&gt;</a></span><span class="message">OriansJ: it would be an achievement to actually bootstrap haskell for real, heh</span></div><div class="line" id="165710"><span class="nick" style="color:#80b1d3"><a href="#165710" label="[16:57:10]">&lt;siraben&gt;</a></span><span class="message">Though of course, once we have blynn → mes-m2, that's it</span></div><div class="line" id="180304"><span class="nick" style="color:#8dd3c7"><a href="#180304" label="[18:03:04]">&lt;OriansJ&gt;</a></span><span class="message">deesix: thank you</span></div><div class="line" id="180414"><span class="nick" style="color:#8dd3c7"><a href="#180414" label="[18:04:14]">&lt;OriansJ&gt;</a></span><span class="message">siraben: well it is ultimately what haskell primitives are required to build GHC; once those are achieved, then that bootstrap will too be solved.</span></div><div class="line" id="180507"><span class="nick" style="color:#8dd3c7"><a href="#180507" label="[18:05:07]">&lt;OriansJ&gt;</a></span><span class="message">but first we have to get blynn done; then we can extend it until done.</span></div><div class="line" id="181650"><span class="nick" style="color:#8dd3c7"><a href="#181650" label="[18:16:50]">&lt;OriansJ&gt;</a></span><span class="message">or simply use it to write the next piece of the haskell bootstrap in a haskell subset we embed in blynn-compiler</span></div><div class="line" id="181918"><span class="nick" style="color:#8dd3c7"><a href="#181918" label="[18:19:18]">&lt;OriansJ&gt;</a></span><span class="message">we will have to deal with the contents of blob/ before the bootstrap will be done. Either by generation or pulling a hex0 and just commenting it to hell and back</span></div><div class="line" id="182749"><span class="nick" style="color:#80b1d3"><a href="#182749" label="[18:27:49]">&lt;siraben&gt;</a></span><span class="message">I can ask around the GHC channels to see what the process is like</span></div><div class="line" id="184632"><span class="nick" style="color:#80b1d3"><a href="#184632" label="[18:46:32]">&lt;siraben&gt;</a></span><span class="message">OriansJ: are able to bootstrap GCC using mescc? I notice in <a rel="nofollow" href="https://github.com/oriansj/talk-notes/blob/master/Current%20bootstrap%20map.pdf">https://github.com/oriansj/talk-notes/blob/master/Current%20bootstrap%20map.pdf</a>  the path is all blue</span></div><div class="line" id="193451"><span class="nick" style="color:#6c3d55"><a href="#193451" label="[19:34:51]">&lt;stikonas&gt;</a></span><span class="message">siraben: on x86 and amd64 you can, aarch64 is still wip</span></div><div class="line" id="193954"><span class="nick" style="color:#d9d9d9"><a href="#193954" label="[19:39:54]">&lt;yt_&gt;</a></span><span class="message">OriansJ: I'm terribly sorry about the whitespace mess.  I was using emacs' align-regexp to get the comments aligned properly, but that seems to enjoy inserting tabs while everything else is spaces...</span></div><div class="line" id="194001"><span class="nick" style="color:#d9d9d9"><a href="#194001" label="[19:40:01]">&lt;yt_&gt;</a></span><span class="message">thanks for fixing that up though</span></div><div class="line" id="194955"><span class="nick" style="color:#d9d9d9"><a href="#194955" label="[19:49:55]">&lt;yt_&gt;</a></span><span class="message">OriansJ: hmm I now see a hash mismatch for cc_aarch64, possible after the postfix_expr_array_string_6 fix?</span></div><div class="line" id="195008"><span class="nick" style="color:#d9d9d9"><a href="#195008" label="[19:50:08]">&lt;yt_&gt;</a></span><span class="message">possibly*</span></div><div class="line" id="195327"><span class="nick" style="color:#d9d9d9"><a href="#195327" label="[19:53:27]">&lt;yt_&gt;</a></span><span class="message">fossy: OriansJ: kaem is up <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-seed/pull/18">https://github.com/oriansj/mescc-tools-seed/pull/18</a> </span></div><div class="line" id="195344"><span class="nick" style="color:#d9d9d9"><a href="#195344" label="[19:53:44]">&lt;yt_&gt;</a></span><span class="message">I've included a fixed cc_aarch64 hash</span></div><div class="line" id="195736"><span class="nick" style="color:#8dd3c7"><a href="#195736" label="[19:57:36]">&lt;OriansJ&gt;</a></span><span class="message">siraben: yes once one has a scheme that is able to run MesCC; they are able to bootstrap GCC from it.</span></div><div class="line" id="195947"><span class="nick" style="color:#8dd3c7"><a href="#195947" label="[19:59:47]">&lt;OriansJ&gt;</a></span><span class="message">yt:  no worries, all is a work in progress. and yes the addition of the null at postfix_expr_array_string_6 did change the checksum. I'll begin reviewing shortly (this should be done much faster)</span></div><div class="line" id="200838"><span class="nick" style="color:#d9d9d9"><a href="#200838" label="[20:08:38]">&lt;yt_&gt;</a></span><span class="message">OriansJ: kaem-0 is much smaller, thankfully!</span></div><div class="line" id="200916"><span class="nick" style="color:#8dd3c7"><a href="#200916" label="[20:09:16]">&lt;OriansJ&gt;</a></span><span class="message">yt: well yes; the bare minimal init/shell required to build everything</span></div><div class="line" id="201059"><span class="nick" style="color:#d9d9d9"><a href="#201059" label="[20:10:59]">&lt;yt_&gt;</a></span><span class="message">OriansJ: as with hex0, would you mind placing the kaem-0-seed into bootstrap-seeds?  I should have the full bootstrap script ready when you have reviewed kaem</span></div><div class="line" id="201147"><span class="nick" style="color:#8dd3c7"><a href="#201147" label="[20:11:47]">&lt;OriansJ&gt;</a></span><span class="message">yt: I was planning on it ^_^</span></div><div class="line" id="201337"><span class="nick" style="color:#d9d9d9"><a href="#201337" label="[20:13:37]">&lt;yt_&gt;</a></span><span class="message">OriansJ: thank you :-)</span></div><div class="line" id="201405"><span class="nick" style="color:#d9d9d9"><a href="#201405" label="[20:14:05]">&lt;yt_&gt;</a></span><span class="message">OriansJ: ah, it looks like mescc-tools-full-kaem.kaem is still missing a copyright header</span></div><div class="line" id="201545"><span class="nick" style="color:#8dd3c7"><a href="#201545" label="[20:15:45]">&lt;OriansJ&gt;</a></span><span class="message">yt_: I'll fix that when I update the bootstrap-seeds in mescc-tools-seed</span></div><div class="line" id="201651"><span class="nick" style="color:#d9d9d9"><a href="#201651" label="[20:16:51]">&lt;yt_&gt;</a></span><span class="message">OriansJ: sweet, I'll pick them up then</span></div><div class="line" id="203321"><span class="nick" style="color:#8dd3c7"><a href="#203321" label="[20:33:21]">&lt;OriansJ&gt;</a></span><span class="message">yt: and merged; bootstrap-seeds updated and license headers added. All patches are up. Assuming no issues in the kaem scripts; AArch64 has been bootstrapped to the M2-Planet+mes-m2 level</span></div><div class="line" id="203548"><span class="nick" style="color:#8dd3c7"><a href="#203548" label="[20:35:48]">&lt;OriansJ&gt;</a></span><span class="message">I guess; I need to pick up the half done armv7l work in mescc-tools again.</span></div><div class="line" id="203622"><span class="nick" style="color:#8dd3c7"><a href="#203622" label="[20:36:22]">&lt;OriansJ&gt;</a></span><span class="message">(I did the GAS work; just needed to convert to M1 and so on)</span></div><div class="line" id="204007"><span class="nick" style="color:#bc80bd"><a href="#204007" label="[20:40:07]">&lt;bauen1&gt;</a></span><span class="message">&gt; is able to run MesCC; they are able to bootstrap GCC from it.</span></div><div class="line" id="204024"><span class="nick" style="color:#bc80bd"><a href="#204024" label="[20:40:24]">&lt;bauen1&gt;</a></span><span class="message">does that mean that the nyancc finally got finished ?</span></div><div class="line" id="204652"><span class="nick" style="color:#8dd3c7"><a href="#204652" label="[20:46:52]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: not exactly; right now the current path from scheme+MesCC is to build TCC and use that to bootstrap GCC</span></div><div class="line" id="204716"><span class="nick" style="color:#bc80bd"><a href="#204716" label="[20:47:16]">&lt;bauen1&gt;</a></span><span class="message">OriansJ: nice, does that actually work yet ? (sorry i've been a bit out of the loop)</span></div><div class="line" id="204824"><span class="nick" style="color:#8dd3c7"><a href="#204824" label="[20:48:24]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: yes; that has been working for a while now. (x86 and AMD64 only right now but armv7l is in progress for MesCC)</span></div><div class="line" id="204942"><span class="nick" style="color:#bc80bd"><a href="#204942" label="[20:49:42]">&lt;bauen1&gt;</a></span><span class="message">wow that's is awesome</span></div><div class="line" id="205257"><span class="nick" style="color:#8dd3c7"><a href="#205257" label="[20:52:57]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: if you wish to know the exact steps; I very carefully documented them here: <a rel="nofollow" href="https://github.com/oriansj/talk-notes/blob/master/Current%20bootstrap%20map.pdf">https://github.com/oriansj/talk-notes/blob/master/Current%20bootstrap%20map.pdf</a>  and I believe that fossy has a fork of mescc-tools-seed that includes the exact commands required too. (using guile as a stand in for mes-m2 of course)</span></div><div class="line" id="205457"><span class="nick" style="color:#8dd3c7"><a href="#205457" label="[20:54:57]">&lt;OriansJ&gt;</a></span><span class="message">janneke's talk at fosdem last year covered guix's reduced binary seed using gash, gash-utils and MesCC <a rel="nofollow" href="https://video.fosdem.org/2020/AW1.125/gnumes.webm">https://video.fosdem.org/2020/AW1.125/gnumes.webm</a>  which put guix's root of trust down to 60MB</span></div><div class="line" id="205554"><span class="nick" style="color:#8dd3c7"><a href="#205554" label="[20:55:54]">&lt;OriansJ&gt;</a></span><span class="message">although I never got a copy of janneke's talk sources to include in the repo along with the rest of the talks.</span></div><div class="line" id="212013"><span class="nick" style="color:#d9d9d9"><a href="#212013" label="[21:20:13]">&lt;yt_&gt;</a></span><span class="message">OriansJ: <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-seed/pull/19">https://github.com/oriansj/mescc-tools-seed/pull/19</a>  here are the kaem scripts to complete the aarch64 bootstrap!</span></div><div class="line" id="213835"><span class="nick" style="color:#234e69"><a href="#213835" label="[21:38:35]">&lt;deesix&gt;</a></span><span class="message">OriansJ, yt_, a brief first look at all of the M1 DEFINEs in mescc-tools-seed/AArch64 (not just cc_aarch64.M1, as all of them is just a bit more work) I'm finding some minor duplication (as in the same instruction and different symbol). objdump dissasemble is matching quite nicely so far, as expected, but I'm yet to finish comparing.</span></div><div class="line" id="214718"><span class="nick" style="color:#234e69"><a href="#214718" label="[21:47:18]">&lt;deesix&gt;</a></span><span class="message">For example, the somehow more explicit STR_BYTE_W3_[X1]_1 is also defined elsewhere as TST_X1_7. ADD_X0_X0_X14_LSL4 has a version with an extra underscore (the later is like the similar ADD_X0_X1_X0_LSL_3).</span></div><div class="line" id="215144"><span class="nick" style="color:#d9d9d9"><a href="#215144" label="[21:51:44]">&lt;yt_&gt;</a></span><span class="message">deesix: the TST_X1_7 DEFINE sounds like a copy-paste errror, that should not be identical STR_BYTE_W3_[X1]_1</span></div><div class="line" id="215149"><span class="nick" style="color:#234e69"><a href="#215149" label="[21:51:49]">&lt;deesix&gt;</a></span><span class="message">I'm adding the recent kaem-minimal.M1 to the bunch (It took a while to mirror).</span></div><div class="line" id="215342"><span class="nick" style="color:#8dd3c7"><a href="#215342" label="[21:53:42]">&lt;OriansJ&gt;</a></span><span class="message">deesix: thank you for double checking.</span></div><div class="line" id="215639"><span class="nick" style="color:#234e69"><a href="#215639" label="[21:56:39]">&lt;deesix&gt;</a></span><span class="message">yt_, it seems so, consume_token_pad seems the origin of the error, I guess (in a couple of hex2 implementations).</span></div><div class="line" id="220016"><span class="nick" style="color:#d9d9d9"><a href="#220016" label="[22:00:16]">&lt;yt_&gt;</a></span><span class="message">deesix: with that bug, looks like consume_token_pad will always write two null bytes, but not actually align x1</span></div><div class="line" id="220039"><span class="nick" style="color:#d9d9d9"><a href="#220039" label="[22:00:39]">&lt;yt_&gt;</a></span><span class="message">I suppose nothing actually depends on that alignment, so the bootstrap still works</span></div><div class="line" id="220046"><span class="nick" style="color:#d9d9d9"><a href="#220046" label="[22:00:46]">&lt;yt_&gt;</a></span><span class="message">I'll have a fix for that in just a minute</span></div><div class="line" id="220103"><span class="nick" style="color:#d9d9d9"><a href="#220103" label="[22:01:03]">&lt;yt_&gt;</a></span><span class="message">deesix: nice find though!</span></div><div class="line" id="221126"><span class="nick" style="color:#d9d9d9"><a href="#221126" label="[22:11:26]">&lt;yt_&gt;</a></span><span class="message">deesix: OriansJ: fixed &amp; added to the pull request. it only changed the hash of hex2-0</span></div><div class="line" id="221229"><span class="nick" style="color:#8dd3c7"><a href="#221229" label="[22:12:29]">&lt;OriansJ&gt;</a></span><span class="message">yt: will review shortly (still reviewing your last patch)</span></div><div class="line" id="221258"><span class="nick" style="color:#8dd3c7"><a href="#221258" label="[22:12:58]">&lt;OriansJ&gt;</a></span><span class="message">(baby interference active)</span></div><div class="line" id="221555"><span class="nick" style="color:#d9d9d9"><a href="#221555" label="[22:15:55]">&lt;yt_&gt;</a></span><span class="message">OriansJ: no worries, take your time</span></div><div class="line" id="222054"><span class="nick" style="color:#8dd3c7"><a href="#222054" label="[22:20:54]">&lt;OriansJ&gt;</a></span><span class="message">yt_: all merged and pushed</span></div><div class="line" id="222418"><span class="nick" style="color:#8dd3c7"><a href="#222418" label="[22:24:18]">&lt;OriansJ&gt;</a></span><span class="message">now I guess all that is left is making the world aware.</span></div><div class="line" id="222633"><span class="nick" style="color:#8dd3c7"><a href="#222633" label="[22:26:33]">&lt;OriansJ&gt;</a></span><span class="message">I leave the Public Relations work to yt and siraben;</span></div><div class="line" id="222717"><span class="nick" style="color:#8dd3c7"><a href="#222717" label="[22:27:17]">&lt;OriansJ&gt;</a></span><span class="message">as I am sure the Haskell work will grab people's attention.</span></div><div class="line" id="222808"><span class="nick" style="color:#8dd3c7"><a href="#222808" label="[22:28:08]">&lt;OriansJ&gt;</a></span><span class="message">bootstrapping A C compiler, a scheme interpreter and a haskell compiler from hex</span></div><div class="line" id="222823"><span class="nick" style="color:#d9d9d9"><a href="#222823" label="[22:28:23]">&lt;yt_&gt;</a></span><span class="message">OriansJ: is the Haskell work going to bootstrap into Mes (and MesCC) or is it &quot;just&quot; to Haskell?</span></div><div class="line" id="222824"><span class="nick" style="color:#8dd3c7"><a href="#222824" label="[22:28:24]">&lt;OriansJ&gt;</a></span><span class="message">oh and it works on multiple architectures</span></div><div class="line" id="222947"><span class="nick" style="color:#8dd3c7"><a href="#222947" label="[22:29:47]">&lt;OriansJ&gt;</a></span><span class="message">yt_: first goal is to get it the stage that GHC and it can build matching behavior. After that the Mes and Haskell work can be done in the order which makes the work easier.</span></div><div class="line" id="223101"><span class="nick" style="color:#8dd3c7"><a href="#223101" label="[22:31:01]">&lt;OriansJ&gt;</a></span><span class="message">as siraben believes they can solve the scheme bootstrap problem with it.</span></div><div class="line" id="223128"><span class="nick" style="color:#8dd3c7"><a href="#223128" label="[22:31:28]">&lt;OriansJ&gt;</a></span><span class="message">And when someone else is willing to save me the work; I let them</span></div><div class="line" id="224045"><span class="nick" style="color:#d9d9d9"><a href="#224045" label="[22:40:45]">&lt;yt_&gt;</a></span><span class="message">OriansJ: ah I can see a few Scheme compilers in Haskell floating around so that makes sense</span></div><div class="line" id="224133"><span class="nick" style="color:#8dd3c7"><a href="#224133" label="[22:41:33]">&lt;OriansJ&gt;</a></span><span class="message">It has been more than 4 years of hard work and lots of failed paths. But the final step is always just out of grasp.</span></div><div class="line" id="224216"><span class="nick" style="color:#8dd3c7"><a href="#224216" label="[22:42:16]">&lt;OriansJ&gt;</a></span><span class="message">mes-m2 if it could just overcome the macro problem would solve the bootstrap but I can't figure it out.</span></div><div class="line" id="224253"><span class="nick" style="color:#d9d9d9"><a href="#224253" label="[22:42:53]">&lt;yt_&gt;</a></span><span class="message">It does seem like a very complicated path to bootstrap to GCC.  But I suppose that once there is *a* path, it can always be simplified.</span></div><div class="line" id="224315"><span class="nick" style="color:#d9d9d9"><a href="#224315" label="[22:43:15]">&lt;yt_&gt;</a></span><span class="message">OriansJ: yeah, I had a brief look at mes-m2 as well, but couldn't wrap my head around it.</span></div><div class="line" id="224328"><span class="nick" style="color:#8dd3c7"><a href="#224328" label="[22:43:28]">&lt;OriansJ&gt;</a></span><span class="message">with work TCC could be converted into M2-Planet form (I just haven't gotten to do that work yet) and solve the bootstrap that way (straight from M2-Planet -&gt; M3 -&gt; GCC)</span></div><div class="line" id="224436"><span class="nick" style="color:#d9d9d9"><a href="#224436" label="[22:44:36]">&lt;yt_&gt;</a></span><span class="message">OriansJ: what is the M3 in that?</span></div><div class="line" id="224828"><span class="nick" style="color:#8dd3c7"><a href="#224828" label="[22:48:28]">&lt;OriansJ&gt;</a></span><span class="message">yt_: M3 was 3 pieces writeen in M2-Planet's subset of C: a proper ELF linker, a GAS compatible Assembler and TCC converted to exporting GAS assembly output and using M2-Planet's C subset.</span></div><div class="line" id="224924"><span class="nick" style="color:#8dd3c7"><a href="#224924" label="[22:49:24]">&lt;OriansJ&gt;</a></span><span class="message">The Linker and Assembler to be in binutils compatible form; so that MesCC can benefit from it and speed up its porting process.</span></div><div class="line" id="225003"><span class="nick" style="color:#8dd3c7"><a href="#225003" label="[22:50:03]">&lt;OriansJ&gt;</a></span><span class="message">and the converted TCC to make future porting match the current M2-Planet porting process (simply add strings)</span></div><div class="line" id="225248"><span class="nick" style="color:#d9d9d9"><a href="#225248" label="[22:52:48]">&lt;yt_&gt;</a></span><span class="message">OriansJ: this project? <a rel="nofollow" href="https://github.com/oriansj/M3-Meteoroid">https://github.com/oriansj/M3-Meteoroid</a>  looks like there is still a lot to do!</span></div><div class="line" id="225357"><span class="nick" style="color:#8dd3c7"><a href="#225357" label="[22:53:57]">&lt;OriansJ&gt;</a></span><span class="message">yt_: well actually that piece is nearly done (it is the ELF linker); just need to add the bit that writes the final binary.</span></div><div class="line" id="225513"><span class="nick" style="color:#8dd3c7"><a href="#225513" label="[22:55:13]">&lt;OriansJ&gt;</a></span><span class="message">it was sort of the &quot;screw it&quot; plan if the scheme requirement becomes unsolvable</span></div><div class="line" id="225609"><span class="nick" style="color:#8dd3c7"><a href="#225609" label="[22:56:09]">&lt;OriansJ&gt;</a></span><span class="message">hence the interest and work in blynn-compiler instead as it looks like less work.</span></div><div class="line" id="225634"><span class="nick" style="color:#d9d9d9"><a href="#225634" label="[22:56:34]">&lt;yt_&gt;</a></span><span class="message">or at least more interesting work, so more people are interested in doing it :D</span></div><div class="line" id="231115"><span class="nick" style="color:#8dd3c7"><a href="#231115" label="[23:11:15]">&lt;OriansJ&gt;</a></span><span class="message">yt_: honestly if siraben and pder were not involved in the Haskell work; it would have been unlikely for me to have found it or make as much progress as they have managed to do in such a short amount of time.</span></div><div class="line" id="231223"><span class="nick" style="color:#8dd3c7"><a href="#231223" label="[23:12:23]">&lt;OriansJ&gt;</a></span><span class="message">They are excellent and doing impressive work and blynn-compiler clearly demonstrates that.</span></div><div class="line" id="231350"><span class="nick" style="color:#8dd3c7"><a href="#231350" label="[23:13:50]">&lt;OriansJ&gt;</a></span><span class="message">all I did was start on the C code conversion and they managed to run with it.</span></div><br /></div></body></html>