<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-05-17.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="024027"><span class="nick" style="color:#8dd3c7"><a href="#024027" label="[02:40:27]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: my current task is to first create the tools for creating and reading a bootstrap filesystem in the M2-Planet C subset. Then to write a program to be the bootloader in the MBR. Then finally a kernel (assuming someone else doesn't decide to pick it up to help speed things along.</span></div><div class="line" id="024034"><span class="nick" style="color:#8dd3c7"><a href="#024034" label="[02:40:34]">&lt;oriansj&gt;</a></span><span class="message">)</span></div><div class="line" id="024210"><span class="nick" style="color:#8dd3c7"><a href="#024210" label="[02:42:10]">&lt;oriansj&gt;</a></span><span class="message">as for why mescc; it seemed far more logical than expecting janneke to write mes.c in hex and for me to write another C compiler capable of building TCC when mescc could do the job.</span></div><div class="line" id="024314"><span class="nick" style="color:#8dd3c7"><a href="#024314" label="[02:43:14]">&lt;oriansj&gt;</a></span><span class="message">It might have not been the optimal solution and it was a great deal of work to get there but it works and until someone puts in time to do something that replaces it, it is what we have to work with.</span></div><div class="line" id="024509"><span class="nick" style="color:#8dd3c7"><a href="#024509" label="[02:45:09]">&lt;oriansj&gt;</a></span><span class="message">dongcarl: <a rel="nofollow" href="https://logs.guix.gnu.org/bootstrappable/2022-05-15.log">https://logs.guix.gnu.org/bootstrappable/2022-05-15.log</a>  starting at: oh and if you are bribed (say in the terms of $$$ Millions) to subvert the bootstrap</span></div><div class="line" id="030146"><span class="nick" style="color:#2e2a4a"><a href="#030146" label="[03:01:46]">&lt;littlebobeep&gt;</a></span><span class="message">stikonas: you find ASM easier than Scheme?  XD</span></div><div class="line" id="030223"><span class="nick" style="color:#6b8072"><a href="#030223" label="[03:02:23]">&lt;stikonas&gt;</a></span><span class="message">littlebobeep: I didn't say that...</span></div><div class="line" id="030240"><span class="nick" style="color:#6b8072"><a href="#030240" label="[03:02:40]">&lt;stikonas&gt;</a></span><span class="message">but right now ASM is more familiar to me</span></div><div class="line" id="030253"><span class="nick" style="color:#2e2a4a"><a href="#030253" label="[03:02:53]">&lt;littlebobeep&gt;</a></span><span class="message">Ohhh well I thought you worked on ASM code for example and you said you were not goot at scheme</span></div><div class="line" id="030254"><span class="nick" style="color:#6b8072"><a href="#030254" label="[03:02:54]">&lt;stikonas&gt;</a></span><span class="message">that doesn't mean easier, just that I might have invested more time in learning it</span></div><div class="line" id="030300"><span class="nick" style="color:#2e2a4a"><a href="#030300" label="[03:03:00]">&lt;littlebobeep&gt;</a></span><span class="message">I seeeee</span></div><div class="line" id="030317"><span class="nick" style="color:#6b8072"><a href="#030317" label="[03:03:17]">&lt;stikonas&gt;</a></span><span class="message">I worked on riscv support (so asm code too) for stage0-posix</span></div><div class="line" id="030321"><span class="nick" style="color:#6b8072"><a href="#030321" label="[03:03:21]">&lt;stikonas&gt;</a></span><span class="message">that's it...</span></div><div class="line" id="030356"><span class="nick" style="color:#2e2a4a"><a href="#030356" label="[03:03:56]">&lt;littlebobeep&gt;</a></span><span class="message">ja I knew you did riscv but I didn't know if you contributed ARM or x86 work too</span></div><div class="line" id="030402"><span class="nick" style="color:#6b8072"><a href="#030402" label="[03:04:02]">&lt;stikonas&gt;</a></span><span class="message">no</span></div><div class="line" id="030405"><span class="nick" style="color:#8dd3c7"><a href="#030405" label="[03:04:05]">&lt;oriansj&gt;</a></span><span class="message">and asm is very easy to build a predictive model of in your mind</span></div><div class="line" id="030417"><span class="nick" style="color:#2e2a4a"><a href="#030417" label="[03:04:17]">&lt;littlebobeep&gt;</a></span><span class="message">oriansj: is it?  :P</span></div><div class="line" id="030423"><span class="nick" style="color:#6b8072"><a href="#030423" label="[03:04:23]">&lt;stikonas&gt;</a></span><span class="message">and asm is somewhat close to C</span></div><div class="line" id="030450"><span class="nick" style="color:#6b8072"><a href="#030450" label="[03:04:50]">&lt;stikonas&gt;</a></span><span class="message">you still have &quot;functions&quot; just you need to add some extra stack work before and after</span></div><div class="line" id="030504"><span class="nick" style="color:#8dd3c7"><a href="#030504" label="[03:05:04]">&lt;oriansj&gt;</a></span><span class="message">littlebobeep: well how much do you know about assembly language programming?</span></div><div class="line" id="030532"><span class="nick" style="color:#2e2a4a"><a href="#030532" label="[03:05:32]">&lt;littlebobeep&gt;</a></span><span class="message">oriansj: not as much as you ;)</span></div><div class="line" id="030558"><span class="nick" style="color:#2e2a4a"><a href="#030558" label="[03:05:58]">&lt;littlebobeep&gt;</a></span><span class="message">I find it quite difficult to understand compared to high-level languages</span></div><div class="line" id="030637"><span class="nick" style="color:#8dd3c7"><a href="#030637" label="[03:06:37]">&lt;oriansj&gt;</a></span><span class="message">but even without knowing that if I showed you load r0, [r1+next] could you guess what it would probably do?</span></div><div class="line" id="030650"><span class="nick" style="color:#80b1d3"><a href="#030650" label="[03:06:50]">&lt;achaninja&gt;</a></span><span class="message">if you have programmed a lot of C you can get by in assembly by just transliterating</span></div><div class="line" id="030743"><span class="nick" style="color:#80b1d3"><a href="#030743" label="[03:07:43]">&lt;achaninja&gt;</a></span><span class="message">give each variable a stack location, use call and leave + ret for functions</span></div><div class="line" id="030910"><span class="nick" style="color:#80b1d3"><a href="#030910" label="[03:09:10]">&lt;achaninja&gt;</a></span><span class="message">i guess that is sort of what happened with the high level prototypes included with stage0</span></div><div class="line" id="031049"><span class="nick" style="color:#80b1d3"><a href="#031049" label="[03:10:49]">&lt;achaninja&gt;</a></span><span class="message">w.r.t. zstd in that thread above, I can vouch it is very fast</span></div><div class="line" id="031118"><span class="nick" style="color:#80b1d3"><a href="#031118" label="[03:11:18]">&lt;achaninja&gt;</a></span><span class="message">far faster than xz for compression and decompression by something like an order of magnitude</span></div><div class="line" id="031127"><span class="nick" style="color:#80b1d3"><a href="#031127" label="[03:11:27]">&lt;achaninja&gt;</a></span><span class="message">its even comparable to lz4</span></div><div class="line" id="031129"><span class="nick" style="color:#80b1d3"><a href="#031129" label="[03:11:29]">&lt;achaninja&gt;</a></span><span class="message">in speed</span></div><div class="line" id="031153"><span class="nick" style="color:#80b1d3"><a href="#031153" label="[03:11:53]">&lt;achaninja&gt;</a></span><span class="message">with good compression ratios</span></div><div class="line" id="064952"><span class="nick">***</span><span class="message notice">lukedashjr is now known as luke-jr</span></div><div class="line" id="082631"><span class="nick" style="color:#6d2462"><a href="#082631" label="[08:26:31]">&lt;bauen1&gt;</a></span><span class="message">oriansj: being bribed sounds like getting funded :D</span></div><div class="line" id="082732"><span class="nick" style="color:#234e69"><a href="#082732" label="[08:27:32]">&lt;unmatched-paren&gt;</a></span><span class="message">precisely :) we were noting that it could be incredibly easy to _look_ like you're subverting stage0, but actually you're just taking the money :D</span></div><div class="line" id="094452"><span class="nick" style="color:#6c3d55"><a href="#094452" label="[09:44:52]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: not really any good reason for links in separate file</span></div><div class="line" id="100113"><span class="nick" style="color:#d9d9d9"><a href="#100113" label="[10:01:13]">&lt;stikonas[m]&gt;</a></span><span class="message">fossy: I'll see if I can simplify it</span></div><div class="line" id="100126"><span class="nick" style="color:#d9d9d9"><a href="#100126" label="[10:01:26]">&lt;stikonas[m]&gt;</a></span><span class="message">I have a fix for other issues</span></div><div class="line" id="100156"><span class="nick" style="color:#d9d9d9"><a href="#100156" label="[10:01:56]">&lt;stikonas[m]&gt;</a></span><span class="message">Will make PR later</span></div><div class="line" id="122702"><span class="nick" style="color:#8dd3c7"><a href="#122702" label="[12:27:02]">&lt;oriansj&gt;</a></span><span class="message">bauen1: well effectively it has to be, otherwise you wouldn't have the time/effort required to get it in a form that wouldn't be immediately flagged and cause everything you have ever done to be more deeply audited.</span></div><div class="line" id="155621"><span class="nick">***</span><span class="message notice">furrymcg1e is now known as furrymcgee</span></div><div class="line" id="175001"><span class="nick">***</span><span class="message notice">jjardon_ is now known as jjardon</span></div><div class="line" id="175003"><span class="nick">***</span><span class="message notice">dnm_ is now known as dnm</span></div><div class="line" id="190500"><span class="nick" style="color:#bc80bd"><a href="#190500" label="[19:05:00]">&lt;dongcarl&gt;</a></span><span class="message">oriansj: haha that was a great read, not a bad way to exploit the handler's relative ignorance</span></div><div class="line" id="205441"><span class="nick" style="color:#3c5b35"><a href="#205441" label="[20:54:41]">&lt;muurkha&gt;</a></span><span class="message">achaninja: I didn't realize zstd was comparable to lz4!</span></div><div class="line" id="231544"><span class="nick">***</span><span class="message notice">stikonas_ is now known as stikonas</span></div><div class="line" id="231612"><span class="nick" style="color:#6b8072"><a href="#231612" label="[23:16:12]">&lt;stikonas&gt;</a></span><span class="message">fossy: I might have a way to sort out those symlinks in live-bootstrap packages</span></div><div class="line" id="231622"><span class="nick" style="color:#6b8072"><a href="#231622" label="[23:16:22]">&lt;stikonas&gt;</a></span><span class="message">it's a bit of a hack but seems to work</span></div><div class="line" id="231650"><span class="nick" style="color:#6b8072"><a href="#231650" label="[23:16:50]">&lt;stikonas&gt;</a></span><span class="message">or at least it worked till findutils was built and we switched to different tar command (which then crashed for me0</span></div><br /></div></body></html>