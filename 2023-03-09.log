<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-03-09.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="030722"><span class="nick" style="color:#389600"><a href="#030722" label="[03:07:22]">&lt;muurkha&gt;</a></span><span class="message">this project might be of interest to some folks in here: <a rel="nofollow" href="https://hackaday.io/project/177716-the-libre-autarkic-laptop">https://hackaday.io/project/177716-the-libre-autarkic-laptop</a> </span></div><div class="line" id="065303"><span class="nick" style="color:#8dd3c7"><a href="#065303" label="[06:53:03]">&lt;fossy&gt;</a></span><span class="message">rickmasters: sounds good, yeah i just did that quick and dirt, havent done checksums and the like</span></div><div class="line" id="094926"><span class="nick" style="color:#2e2a4a"><a href="#094926" label="[09:49:26]">&lt;avih&gt;</a></span><span class="message">oriansj: in <a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds/blob/master/README.md">https://github.com/oriansj/bootstrap-seeds/blob/master/README.md</a>  you give an example hex0 using sed and xxd, but xxd is not posix. i thought it could be useful to have a version which runs on a posix system without using a compiler, e.g. using shell and printf, like so: <a rel="nofollow" href="https://0x0.st/HibE.txt">https://0x0.st/HibE.txt</a> </span></div><div class="line" id="101203"><span class="nick" style="color:#2e2a4a"><a href="#101203" label="[10:12:03]">&lt;avih&gt;</a></span><span class="message">so this is verifiable by comparison, as it runs on all shells i have access to with identical output (at least for builder-hex0.hex0). this was tested using several versions of dash, busybox ash, free/net bsd sh, openbsd sh, bash, ksh93, yash, gwsh, and more.</span></div><div class="line" id="101242"><span class="nick" style="color:#2e2a4a"><a href="#101242" label="[10:12:42]">&lt;avih&gt;</a></span><span class="message">(and the ever popular mksh)</span></div><div class="line" id="103714"><span class="nick" style="color:#6b8072"><a href="#103714" label="[10:37:14]">&lt;stikonas[m]&gt;</a></span><span class="message">Interesting. (hex0 in pure shell)</span></div><div class="line" id="105023"><span class="nick" style="color:#2e2a4a"><a href="#105023" label="[10:50:23]">&lt;avih&gt;</a></span><span class="message">well, not strictly pure. it uses printf, which is not necessarily a shell builtin, but is posix regardless</span></div><div class="line" id="105716"><span class="nick" style="color:#6b8072"><a href="#105716" label="[10:57:16]">&lt;stikonas[m]&gt;</a></span><span class="message">Well yes, though I think most shells have printf</span></div><div class="line" id="110110"><span class="nick" style="color:#2e2a4a"><a href="#110110" label="[11:01:10]">&lt;avih&gt;</a></span><span class="message">yup</span></div><div class="line" id="111327"><span class="nick" style="color:#2e2a4a"><a href="#111327" label="[11:13:27]">&lt;avih&gt;</a></span><span class="message">the notable ones without builtin printf are yash, mksh, and openbsd sh (based on pdksh)</span></div><div class="line" id="111437"><span class="nick" style="color:#2e2a4a"><a href="#111437" label="[11:14:37]">&lt;avih&gt;</a></span><span class="message">no, actually yash does have a builtin printf</span></div><div class="line" id="111601"><span class="nick" style="color:#2e2a4a"><a href="#111601" label="[11:16:01]">&lt;avih&gt;</a></span><span class="message">compiling builder-hex0.hex0 takes 100-700 ms with the various shells with builtin printf, and about 6s on those without builtin printf</span></div><div class="line" id="111701"><span class="nick" style="color:#2e2a4a"><a href="#111701" label="[11:17:01]">&lt;avih&gt;</a></span><span class="message">(invoking printf 3500 times can be slow with an external binary...)</span></div><div class="line" id="112903"><span class="nick" style="color:#2e2a4a"><a href="#112903" label="[11:29:03]">&lt;avih&gt;</a></span><span class="message">that's a buffering version, for comparison <a rel="nofollow" href="https://0x0.st/HicN.txt">https://0x0.st/HicN.txt</a> </span></div><div class="line" id="114658"><span class="nick" style="color:#6b8072"><a href="#114658" label="[11:46:58]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, hex0 itself does no buffering...</span></div><div class="line" id="114727"><span class="nick" style="color:#2e2a4a"><a href="#114727" label="[11:47:27]">&lt;avih&gt;</a></span><span class="message">it doesn't need to</span></div><div class="line" id="152826"><span class="nick" style="color:#80b1d3"><a href="#152826" label="[15:28:26]">&lt;oriansj&gt;</a></span><span class="message">muurkha: I do like the idea of a solar powered laptop; certainly the idea of an energy efficient e-ink screened laptop, having a computer that one can fully understand and empowering everyone in the world to take control of their computing. I just have doubts that this is just another overly complex idea not sufficiently explored before being shared with the world.</span></div><div class="line" id="152852"><span class="nick" style="color:#80b1d3"><a href="#152852" label="[15:28:52]">&lt;oriansj&gt;</a></span><span class="message">avih: thank you, I will certainly include that ^_^</span></div><div class="line" id="153643"><span class="nick" style="color:#389600"><a href="#153643" label="[15:36:43]">&lt;muurkha&gt;</a></span><span class="message">oriansj: it'll be interesting to see how it works out</span></div><div class="line" id="154149"><span class="nick" style="color:#2e2a4a"><a href="#154149" label="[15:41:49]">&lt;avih&gt;</a></span><span class="message">oriansj: do you want me to open a PR? if yes, let me know which project/files (e.g. hex0-posix might be more suitable, etc)</span></div><div class="line" id="154258"><span class="nick" style="color:#80b1d3"><a href="#154258" label="[15:42:58]">&lt;oriansj&gt;</a></span><span class="message">avih: I was thinking of creating a folder called alternatives in bootstrap-seeds for hex0 implementations in other languages</span></div><div class="line" id="154311"><span class="nick" style="color:#2e2a4a"><a href="#154311" label="[15:43:11]">&lt;avih&gt;</a></span><span class="message">sounds good to me</span></div><div class="line" id="154345"><span class="nick" style="color:#80b1d3"><a href="#154345" label="[15:43:45]">&lt;oriansj&gt;</a></span><span class="message">so create a PR and include a line with how to use it</span></div><div class="line" id="154402"><span class="nick" style="color:#80b1d3"><a href="#154402" label="[15:44:02]">&lt;oriansj&gt;</a></span><span class="message">I'll merge it</span></div><div class="line" id="154446"><span class="nick" style="color:#2e2a4a"><a href="#154446" label="[15:44:46]">&lt;avih&gt;</a></span><span class="message">so here <a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds">https://github.com/oriansj/bootstrap-seeds</a>  another folder &quot;alternatives&quot; alongside NATIVE/POSIX/ETC ?</span></div><div class="line" id="154455"><span class="nick" style="color:#2e2a4a"><a href="#154455" label="[15:44:55]">&lt;avih&gt;</a></span><span class="message">etc*</span></div><div class="line" id="155359"><span class="nick" style="color:#2e2a4a"><a href="#155359" label="[15:53:59]">&lt;avih&gt;</a></span><span class="message">oriansj: i'm adding a readme with this title &quot;This firectory contains various implementations of the `hex0` monitor&quot; and was wondering whether &quot;monitor&quot; is the correct term to use? to me it's more like a compiler...</span></div><div class="line" id="172234"><span class="nick" style="color:#6b8072"><a href="#172234" label="[17:22:34]">&lt;stikonas[m]&gt;</a></span><span class="message">avih: hex0 monitor is slightly different thing</span></div><div class="line" id="172312"><span class="nick" style="color:#6b8072"><a href="#172312" label="[17:23:12]">&lt;stikonas[m]&gt;</a></span><span class="message">hex0 monitor would read characters from some input device (e.g.keyboard)</span></div><div class="line" id="172318"><span class="nick" style="color:#6b8072"><a href="#172318" label="[17:23:18]">&lt;stikonas[m]&gt;</a></span><span class="message">And output bin file</span></div><div class="line" id="172351"><span class="nick" style="color:#2e2a4a"><a href="#172351" label="[17:23:51]">&lt;avih&gt;</a></span><span class="message">&quot;slightly different&quot; than what?</span></div><div class="line" id="172507"><span class="nick" style="color:#6d2462"><a href="#172507" label="[17:25:07]">&lt;AwesomeAdam54321&gt;</a></span><span class="message">stikonas[m]: Why not call it a hex0 interpreter instead of a monitor?</span></div><div class="line" id="172554"><span class="nick" style="color:#2e2a4a"><a href="#172554" label="[17:25:54]">&lt;avih&gt;</a></span><span class="message">i think it's a compiler. it takes input in source form (text) and outputs a binary object.</span></div><div class="line" id="172615"><span class="nick" style="color:#6d2462"><a href="#172615" label="[17:26:15]">&lt;AwesomeAdam54321&gt;</a></span><span class="message">but an interactive compiler</span></div><div class="line" id="172629"><span class="nick" style="color:#2e2a4a"><a href="#172629" label="[17:26:29]">&lt;avih&gt;</a></span><span class="message">?</span></div><div class="line" id="172724"><span class="nick" style="color:#2e2a4a"><a href="#172724" label="[17:27:24]">&lt;avih&gt;</a></span><span class="message">also, it's not an interpreter. an interpreter executes lines of source code one after another. hex0 does not execute anything. it only translates text to binary</span></div><div class="line" id="172731"><span class="nick" style="color:#6d2462"><a href="#172731" label="[17:27:31]">&lt;AwesomeAdam54321&gt;</a></span><span class="message">avih: It's a compiler, but rather than taking the contents of a text file as input, the input is given through an interactive interface</span></div><div class="line" id="172758"><span class="nick" style="color:#6d2462"><a href="#172758" label="[17:27:58]">&lt;AwesomeAdam54321&gt;</a></span><span class="message">like from a keyboard</span></div><div class="line" id="172950"><span class="nick" style="color:#2e2a4a"><a href="#172950" label="[17:29:50]">&lt;avih&gt;</a></span><span class="message">where the input comes from (keyboard or a source file) does not affect what it does with that input. and what it does is translate the source input into binary output. which, to me, is a compiler.</span></div><div class="line" id="173040"><span class="nick" style="color:#2e2a4a"><a href="#173040" label="[17:30:40]">&lt;avih&gt;</a></span><span class="message">i'm not arguing that &quot;monitor&quot; is bad terminology, only that it's not obvious to me why it's used.</span></div><div class="line" id="173053"><span class="nick" style="color:#6b8072"><a href="#173053" label="[17:30:53]">&lt;stikonas[m]&gt;</a></span><span class="message">Yeah, it's not obvious</span></div><div class="line" id="173135"><span class="nick" style="color:#6b8072"><a href="#173135" label="[17:31:35]">&lt;stikonas[m]&gt;</a></span><span class="message">It's might be used for baremetal bootstrap</span></div><div class="line" id="173144"><span class="nick" style="color:#6b8072"><a href="#173144" label="[17:31:44]">&lt;stikonas[m]&gt;</a></span><span class="message">For POSIX we don't need it</span></div><div class="line" id="173154"><span class="nick" style="color:#2e2a4a"><a href="#173154" label="[17:31:54]">&lt;avih&gt;</a></span><span class="message">anyway, PR is open here <a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds/pull/37">https://github.com/oriansj/bootstrap-seeds/pull/37</a> </span></div><div class="line" id="185153"><span class="nick" style="color:#234e69"><a href="#185153" label="[18:51:53]">&lt;gforce_de1977&gt;</a></span><span class="message">avih: at least interesting! - as far is I know: printf is a builtin and 'test' or '[' is an external command - but thats not important - and: export LC_ALL=C is needed why?</span></div><div class="line" id="185301"><span class="nick" style="color:#234e69"><a href="#185301" label="[18:53:01]">&lt;gforce_de1977&gt;</a></span><span class="message">avih: also better use: printf '%s' &quot;$var&quot;</span></div><div class="line" id="185628"><span class="nick" style="color:#234e69"><a href="#185628" label="[18:56:28]">&lt;gforce_de1977&gt;</a></span><span class="message">avih: once i had a similar idea, but yours is better: <a rel="nofollow" href="https://github.com/bittorf/GNU-mes-documentation-attempt/blob/main/step00/hex0-to-binary-debug.sh">https://github.com/bittorf/GNU-mes-documentation-attempt/blob/main/step00/hex0-to-binary-debug.sh</a> </span></div><div class="line" id="190939"><span class="nick" style="color:#80b1d3"><a href="#190939" label="[19:09:39]">&lt;oriansj&gt;</a></span><span class="message">avih: looks great, thank you . merged</span></div><div class="line" id="191029"><span class="nick" style="color:#2e2a4a"><a href="#191029" label="[19:10:29]">&lt;avih&gt;</a></span><span class="message">gforce_de1977: LC_ALL is needed because otherwise [0-9a-fA-F] depends on the collating locale. printf %s &quot;$var&quot; will not work, because &quot;$buf&quot; is a sequence of octal values in the form of &quot;\nnn&quot;, and we don't want to print that literally, but rather let printf interpret the &quot;\nnn&quot; as octal value</span></div><div class="line" id="191059"><span class="nick" style="color:#234e69"><a href="#191059" label="[19:10:59]">&lt;gforce_de1977&gt;</a></span><span class="message">avih: understand! - great</span></div><div class="line" id="191137"><span class="nick" style="color:#2e2a4a"><a href="#191137" label="[19:11:37]">&lt;avih&gt;</a></span><span class="message">as for whether printf or test or [ are builtin, posix doesn't mandate that any of them be a builtin, but in most shells they are.</span></div><div class="line" id="191203"><span class="nick" style="color:#234e69"><a href="#191203" label="[19:12:03]">&lt;gforce_de1977&gt;</a></span><span class="message">avih: yes - thats wild somehow</span></div><div class="line" id="191343"><span class="nick" style="color:#2e2a4a"><a href="#191343" label="[19:13:43]">&lt;avih&gt;</a></span><span class="message">oriansj: cheers :)</span></div><div class="line" id="191422"><span class="nick" style="color:#80b1d3"><a href="#191422" label="[19:14:22]">&lt;oriansj&gt;</a></span><span class="message">AwesomeAdam54321: well one can do hex0 /dev/stdin $output and it would work but the code wouldn't execute until you did ctrl-d./$output\n</span></div><div class="line" id="192845"><span class="nick" style="color:#6b8072"><a href="#192845" label="[19:28:45]">&lt;stikonas[m]&gt;</a></span><span class="message">[ is also built-in</span></div><div class="line" id="192940"><span class="nick" style="color:#6b8072"><a href="#192940" label="[19:29:40]">&lt;stikonas[m]&gt;</a></span><span class="message">Any shell that doesn't have [ would be fairly slow</span></div><div class="line" id="202314"><span class="nick" style="color:#80b1d3"><a href="#202314" label="[20:23:14]">&lt;oriansj&gt;</a></span><span class="message">avih: I made a small tweak to make debugging easier: <a rel="nofollow" href="https://paste.debian.net/1273504/">https://paste.debian.net/1273504/</a>  and I noticed a small bug if one does: ./hex0.sh &lt; ../POSIX/x86/hex0_x86.hex0 &gt;| foo</span></div><div class="line" id="202528"><span class="nick" style="color:#2e2a4a"><a href="#202528" label="[20:25:28]">&lt;avih&gt;</a></span><span class="message">sec, checking</span></div><div class="line" id="202827"><span class="nick" style="color:#2e2a4a"><a href="#202827" label="[20:28:27]">&lt;avih&gt;</a></span><span class="message">oriansj: i'm noticing few changes: 1. style (spaces to tabs, etc) - that's fine. 2. you report errors but go on anyway - i think that's a bug, but depends on the specification. is there a spec for hex0 source? 3. you use echo -e. that's a bug because -e is not portable. also, $line may contain chars which don't print well, or which modify the terminal state etc. this can be discussed. 4. the &quot;exit 1&quot; line is not unreachable, because everything which is</span></div><div class="line" id="202828"><span class="nick" style="color:#2e2a4a"><a href="#202828" label="[20:28:28]">&lt;avih&gt;</a></span><span class="message"> not hex pair now goes through the echo -e ... ; continue code, skipping the exit 1 line</span></div><div class="line" id="202910"><span class="nick" style="color:#2e2a4a"><a href="#202910" label="[20:29:10]">&lt;avih&gt;</a></span><span class="message">not reachable*</span></div><div class="line" id="202941"><span class="nick" style="color:#2e2a4a"><a href="#202941" label="[20:29:41]">&lt;avih&gt;</a></span><span class="message">not sure i understand the bug you refer to</span></div><div class="line" id="203200"><span class="nick" style="color:#2e2a4a"><a href="#203200" label="[20:32:00]">&lt;avih&gt;</a></span><span class="message">(&gt;| is a bash thing which overrides the noclobber option. not sure how that relates to the bug behavior, if at all</span></div><div class="line" id="203401"><span class="nick" style="color:#2e2a4a"><a href="#203401" label="[20:34:01]">&lt;avih&gt;</a></span><span class="message">also, /dev/stderr is not portable. if you want to &quot;echo&quot; arbitrary string to stderr, the portable way is: printf %s\\n &quot;$string&quot; &gt;&amp;2</span></div><div class="line" id="203539"><span class="nick" style="color:#80b1d3"><a href="#203539" label="[20:35:39]">&lt;oriansj&gt;</a></span><span class="message">avih: sorry for not being clear</span></div><div class="line" id="203615"><span class="nick" style="color:#2e2a4a"><a href="#203615" label="[20:36:15]">&lt;avih&gt;</a></span><span class="message">no worries, but do clarify :)</span></div><div class="line" id="203625"><span class="nick" style="color:#80b1d3"><a href="#203625" label="[20:36:25]">&lt;oriansj&gt;</a></span><span class="message">the change was just to highlight the lines which would result in exit 1 conditions in the original code</span></div><div class="line" id="203640"><span class="nick" style="color:#2e2a4a"><a href="#203640" label="[20:36:40]">&lt;avih&gt;</a></span><span class="message">yes, i get that part</span></div><div class="line" id="203711"><span class="nick" style="color:#80b1d3"><a href="#203711" label="[20:37:11]">&lt;oriansj&gt;</a></span><span class="message">and I was pointing that those lines in POSIX/x86/hex0_x86.hex0 were causing an issue</span></div><div class="line" id="203739"><span class="nick" style="color:#2e2a4a"><a href="#203739" label="[20:37:39]">&lt;avih&gt;</a></span><span class="message">wait, you mean that it does not process that file correctly?</span></div><div class="line" id="203747"><span class="nick" style="color:#80b1d3"><a href="#203747" label="[20:37:47]">&lt;oriansj&gt;</a></span><span class="message">indeed</span></div><div class="line" id="203813"><span class="nick" style="color:#2e2a4a"><a href="#203813" label="[20:38:13]">&lt;avih&gt;</a></span><span class="message">huh, interesting. is that a bug in the file? or in the script?</span></div><div class="line" id="203918"><span class="nick" style="color:#80b1d3"><a href="#203918" label="[20:39:18]">&lt;oriansj&gt;</a></span><span class="message">well if one assumes one *must* have spaces between bytes in hex0 then it would be a bugin the file but as that isn't in the hex0 spec, it would be a minor defectin the script for not covering that edge case</span></div><div class="line" id="203933"><span class="nick" style="color:#2e2a4a"><a href="#203933" label="[20:39:33]">&lt;avih&gt;</a></span><span class="message">oh, i see. i didn't understand the spec i think. it has 4-digits hex values</span></div><div class="line" id="203939"><span class="nick" style="color:#2e2a4a"><a href="#203939" label="[20:39:39]">&lt;avih&gt;</a></span><span class="message">i thought the spec was only two digits</span></div><div class="line" id="203958"><span class="nick" style="color:#80b1d3"><a href="#203958" label="[20:39:58]">&lt;oriansj&gt;</a></span><span class="message">yes 2-digits hex per byte</span></div><div class="line" id="204007"><span class="nick" style="color:#2e2a4a"><a href="#204007" label="[20:40:07]">&lt;avih&gt;</a></span><span class="message">but then the output from 4 digits depends on the endianess of the platform</span></div><div class="line" id="204033"><span class="nick" style="color:#80b1d3"><a href="#204033" label="[20:40:33]">&lt;oriansj&gt;</a></span><span class="message">not exactly</span></div><div class="line" id="204040"><span class="nick" style="color:#2e2a4a"><a href="#204040" label="[20:40:40]">&lt;avih&gt;</a></span><span class="message">well, then the source is an invalid hex0 source, e.g. this line <a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds/blob/master/POSIX/x86/hex0_x86.hex0#L68">https://github.com/oriansj/bootstrap-seeds/blob/master/POSIX/x86/hex0_x86.hex0#L68</a> </span></div><div class="line" id="204053"><span class="nick" style="color:#80b1d3"><a href="#204053" label="[20:40:53]">&lt;oriansj&gt;</a></span><span class="message">as 01 23 and 0123 would both mean the same thing in hex0</span></div><div class="line" id="204108"><span class="nick" style="color:#2e2a4a"><a href="#204108" label="[20:41:08]">&lt;avih&gt;</a></span><span class="message">where is that specified?</span></div><div class="line" id="204159"><span class="nick" style="color:#80b1d3"><a href="#204159" label="[20:41:59]">&lt;oriansj&gt;</a></span><span class="message">in the hex0 not being whitespace sensitive</span></div><div class="line" id="204201"><span class="nick" style="color:#2e2a4a"><a href="#204201" label="[20:42:01]">&lt;avih&gt;</a></span><span class="message">but also, in that case does that mean that in 0123, it always writes the 01 byte before the 23 byte, regardless of the system endianess? I'd think that's confusing...</span></div><div class="line" id="204253"><span class="nick" style="color:#2e2a4a"><a href="#204253" label="[20:42:53]">&lt;avih&gt;</a></span><span class="message">because it looks like the hex value 0x0123, and the representation on stream/memory of such value does depend on endianess</span></div><div class="line" id="204337"><span class="nick" style="color:#80b1d3"><a href="#204337" label="[20:43:37]">&lt;oriansj&gt;</a></span><span class="message">well yes as the spec is reading 2 hex digits and outputting a byte in left to right order and not depending on any host endianness so that all architectures  will always produce the exactsame output with the same hex0</span></div><div class="line" id="204420"><span class="nick" style="color:#2e2a4a"><a href="#204420" label="[20:44:20]">&lt;avih&gt;</a></span><span class="message">right</span></div><div class="line" id="204426"><span class="nick" style="color:#2e2a4a"><a href="#204426" label="[20:44:26]">&lt;avih&gt;</a></span><span class="message">i also see &quot;Hex0 is trivial to implement [1] It just needs to read 2 hex nybbles and output a byte, you can ignore all non-hex characters&quot;</span></div><div class="line" id="204449"><span class="nick" style="color:#80b1d3"><a href="#204449" label="[20:44:49]">&lt;oriansj&gt;</a></span><span class="message">so 0123456789 is the same for both big and little endian systems as it would be the bytes: 01 23 45 67 89 if one wanted to white space separate them</span></div><div class="line" id="204505"><span class="nick" style="color:#2e2a4a"><a href="#204505" label="[20:45:05]">&lt;avih&gt;</a></span><span class="message">does that mean that 0y1z2r3q  should also be interpreted as if it was 01 23  ?</span></div><div class="line" id="204508"><span class="nick" style="color:#80b1d3"><a href="#204508" label="[20:45:08]">&lt;oriansj&gt;</a></span><span class="message">and 0 1 2 3 4 5 6 7 8 9 would also produce the same value</span></div><div class="line" id="204518"><span class="nick" style="color:#80b1d3"><a href="#204518" label="[20:45:18]">&lt;oriansj&gt;</a></span><span class="message">indeed</span></div><div class="line" id="204556"><span class="nick" style="color:#80b1d3"><a href="#204556" label="[20:45:56]">&lt;oriansj&gt;</a></span><span class="message">let me check in the equal in C code for reference</span></div><div class="line" id="204559"><span class="nick" style="color:#2e2a4a"><a href="#204559" label="[20:45:59]">&lt;avih&gt;</a></span><span class="message">ok, so i completely misunderstood the spec. off topic, i think it should be as strict as possible, to be able to catch source errors, but as i said, off topic.</span></div><div class="line" id="204637"><span class="nick" style="color:#2e2a4a"><a href="#204637" label="[20:46:37]">&lt;avih&gt;</a></span><span class="message">anyway, i'll post a fixup PR soon, ok?</span></div><div class="line" id="204642"><span class="nick" style="color:#80b1d3"><a href="#204642" label="[20:46:42]">&lt;oriansj&gt;</a></span><span class="message">avih: I agree that strict implementations should exist</span></div><div class="line" id="204711"><span class="nick" style="color:#2e2a4a"><a href="#204711" label="[20:47:11]">&lt;avih&gt;</a></span><span class="message">well, no, the implementation should adhere to the spec as closely as possible, but this spec is very loose...</span></div><div class="line" id="204734"><span class="nick" style="color:#80b1d3"><a href="#204734" label="[20:47:34]">&lt;oriansj&gt;</a></span><span class="message">and printing warnings for 0y1z2r3q as bad form is entirely valid (and probably a very good idea)</span></div><div class="line" id="204744"><span class="nick" style="color:#2e2a4a"><a href="#204744" label="[20:47:44]">&lt;avih&gt;</a></span><span class="message">or rather, it's well defined, but allows inputs which would be considered errors in other languages</span></div><div class="line" id="204816"><span class="nick" style="color:#80b1d3"><a href="#204816" label="[20:48:16]">&lt;oriansj&gt;</a></span><span class="message">well hex0 does a more complex stripping than you would think</span></div><div class="line" id="204825"><span class="nick" style="color:#2e2a4a"><a href="#204825" label="[20:48:25]">&lt;avih&gt;</a></span><span class="message">?</span></div><div class="line" id="204829"><span class="nick" style="color:#2e2a4a"><a href="#204829" label="[20:48:29]">&lt;avih&gt;</a></span><span class="message">what do you mean?</span></div><div class="line" id="204839"><span class="nick" style="color:#80b1d3"><a href="#204839" label="[20:48:39]">&lt;oriansj&gt;</a></span><span class="message">it first removes the comments and all non-hex values entirely before processing</span></div><div class="line" id="204850"><span class="nick" style="color:#2e2a4a"><a href="#204850" label="[20:48:50]">&lt;avih&gt;</a></span><span class="message">right</span></div><div class="line" id="204921"><span class="nick" style="color:#80b1d3"><a href="#204921" label="[20:49:21]">&lt;oriansj&gt;</a></span><span class="message">so 0 1 2\n3 5 7 just becomes 012357 and that is read 2 digits at a time</span></div><div class="line" id="204931"><span class="nick" style="color:#2e2a4a"><a href="#204931" label="[20:49:31]">&lt;avih&gt;</a></span><span class="message">fwiw, i don't think it should warn, because it's perfectly valid, because the spec says so</span></div><div class="line" id="205008"><span class="nick" style="color:#80b1d3"><a href="#205008" label="[20:50:08]">&lt;oriansj&gt;</a></span><span class="message">well one could warn mixing non-hex characters outside of comments</span></div><div class="line" id="205009"><span class="nick" style="color:#2e2a4a"><a href="#205009" label="[20:50:09]">&lt;avih&gt;</a></span><span class="message">if you want to add a new spec, hex0-strict, for instance, which is more what I thought the spec was, that's fine, but with the current spec there's nothing to warn about.</span></div><div class="line" id="205040"><span class="nick" style="color:#80b1d3"><a href="#205040" label="[20:50:40]">&lt;oriansj&gt;</a></span><span class="message">as those despite being technically valid are a code smell of confusing or misleading code</span></div><div class="line" id="205115"><span class="nick" style="color:#80b1d3"><a href="#205115" label="[20:51:15]">&lt;oriansj&gt;</a></span><span class="message">avih: would you help me better formalize a good hex0-stric spec?</span></div><div class="line" id="205154"><span class="nick" style="color:#2e2a4a"><a href="#205154" label="[20:51:54]">&lt;avih&gt;</a></span><span class="message">sure. the spec i &quot;followed&quot; is also described in a comment at the script file. it's three lines.</span></div><div class="line" id="205215"><span class="nick" style="color:#2e2a4a"><a href="#205215" label="[20:52:15]">&lt;avih&gt;</a></span><span class="message">apparently i imagined it, but still, it's a good spec i think :)</span></div><div class="line" id="205316"><span class="nick" style="color:#2e2a4a"><a href="#205316" label="[20:53:16]">&lt;avih&gt;</a></span><span class="message">i do think it's important to separate the bytes though, due to the endianess confusion</span></div><div class="line" id="205442"><span class="nick" style="color:#80b1d3"><a href="#205442" label="[20:54:42]">&lt;oriansj&gt;</a></span><span class="message">complete fair and I can fix up the existing hex0 files to include that property</span></div><div class="line" id="205511"><span class="nick" style="color:#2e2a4a"><a href="#205511" label="[20:55:11]">&lt;avih&gt;</a></span><span class="message">well, we don't know how many hex0 files are out there, so i don't know if it should be removed from the spec</span></div><div class="line" id="205523"><span class="nick" style="color:#2e2a4a"><a href="#205523" label="[20:55:23]">&lt;avih&gt;</a></span><span class="message">but in source files, sure, it would make them clearer IMHO</span></div><div class="line" id="205616"><span class="nick" style="color:#80b1d3"><a href="#205616" label="[20:56:16]">&lt;oriansj&gt;</a></span><span class="message">well that is why a hex0-strict implementation is a good thing</span></div><div class="line" id="205644"><span class="nick" style="color:#2e2a4a"><a href="#205644" label="[20:56:44]">&lt;avih&gt;</a></span><span class="message">it needs a strict spec first :)</span></div><div class="line" id="205712"><span class="nick" style="color:#2e2a4a"><a href="#205712" label="[20:57:12]">&lt;avih&gt;</a></span><span class="message">that's teh spec i followed <a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds/blob/master/hex0-alternatives/hex0.sh#L7-L11">https://github.com/oriansj/bootstrap-seeds/blob/master/hex0-alternatives/hex0.sh#L7-L11</a> </span></div><div class="line" id="205714"><span class="nick" style="color:#80b1d3"><a href="#205714" label="[20:57:14]">&lt;oriansj&gt;</a></span><span class="message">exactly ^_^</span></div><div class="line" id="205833"><span class="nick" style="color:#2e2a4a"><a href="#205833" label="[20:58:33]">&lt;avih&gt;</a></span><span class="message">i.e. it's either comment, or it's uninterrupted pairs of hex digits, separated by any number of space/tabs/newline</span></div><div class="line" id="205855"><span class="nick" style="color:#2e2a4a"><a href="#205855" label="[20:58:55]">&lt;avih&gt;</a></span><span class="message">(but not vertical tab, etc)</span></div><div class="line" id="205904"><span class="nick" style="color:#2e2a4a"><a href="#205904" label="[20:59:04]">&lt;avih&gt;</a></span><span class="message">i.e. the standard shell IFS</span></div><div class="line" id="210026"><span class="nick" style="color:#80b1d3"><a href="#210026" label="[21:00:26]">&lt;oriansj&gt;</a></span><span class="message">sounds good for the strict spec</span></div><div class="line" id="210053"><span class="nick" style="color:#2e2a4a"><a href="#210053" label="[21:00:53]">&lt;avih&gt;</a></span><span class="message">oriansj: if i understand correctly, according to the current spec, there can be no errors at the source file, except if there's an odd number of hex digits outside of comments? or is that valid too?</span></div><div class="line" id="210113"><span class="nick" style="color:#80b1d3"><a href="#210113" label="[21:01:13]">&lt;oriansj&gt;</a></span><span class="message">and lone hex digits probably should be wrong as well</span></div><div class="line" id="210129"><span class="nick" style="color:#2e2a4a"><a href="#210129" label="[21:01:29]">&lt;avih&gt;</a></span><span class="message">e.g. a file which only contains a single char: 1</span></div><div class="line" id="210150"><span class="nick" style="color:#2e2a4a"><a href="#210150" label="[21:01:50]">&lt;avih&gt;</a></span><span class="message">is it valid? if yes, is it 0x01? or 0x10?</span></div><div class="line" id="210205"><span class="nick" style="color:#80b1d3"><a href="#210205" label="[21:02:05]">&lt;oriansj&gt;</a></span><span class="message">I'd say hard no</span></div><div class="line" id="210224"><span class="nick" style="color:#80b1d3"><a href="#210224" label="[21:02:24]">&lt;oriansj&gt;</a></span><span class="message">current implementations will drop it entirely</span></div><div class="line" id="210252"><span class="nick" style="color:#2e2a4a"><a href="#210252" label="[21:02:52]">&lt;avih&gt;</a></span><span class="message">right, so other than a final odd hex digit outside of comment, any random stream of bytes is a valid hex0 source according to the current spec, right?</span></div><div class="line" id="210442"><span class="nick" style="color:#80b1d3"><a href="#210442" label="[21:04:42]">&lt;oriansj&gt;</a></span><span class="message">well yes with the detail that all non-hex characters will be dropped prior to processing and only ASCII hex characters will be valid for the generation of bytes</span></div><div class="line" id="210505"><span class="nick" style="color:#2e2a4a"><a href="#210505" label="[21:05:05]">&lt;avih&gt;</a></span><span class="message">sure</span></div><div class="line" id="210535"><span class="nick" style="color:#2e2a4a"><a href="#210535" label="[21:05:35]">&lt;avih&gt;</a></span><span class="message">and in the current reference implementation, even an off hex digit is valid, as it's ignored together with non-hex bytes, yes?</span></div><div class="line" id="210541"><span class="nick" style="color:#2e2a4a"><a href="#210541" label="[21:05:41]">&lt;avih&gt;</a></span><span class="message">odd*</span></div><div class="line" id="210546"><span class="nick" style="color:#80b1d3"><a href="#210546" label="[21:05:46]">&lt;oriansj&gt;</a></span><span class="message">so utf-8 3byte F characters would be entirely dropped and would be misleading to those reading the code</span></div><div class="line" id="210605"><span class="nick" style="color:#2e2a4a"><a href="#210605" label="[21:06:05]">&lt;avih&gt;</a></span><span class="message">indeed</span></div><div class="line" id="210608"><span class="nick" style="color:#80b1d3"><a href="#210608" label="[21:06:08]">&lt;oriansj&gt;</a></span><span class="message">correct</span></div><div class="line" id="210708"><span class="nick" style="color:#2e2a4a"><a href="#210708" label="[21:07:08]">&lt;avih&gt;</a></span><span class="message">fwiw, personally i find it both weird and amusing that this works: head -c 1024 &lt;/dev/urandom &gt;valid-src.hex0</span></div><div class="line" id="210725"><span class="nick" style="color:#2e2a4a"><a href="#210725" label="[21:07:25]">&lt;avih&gt;</a></span><span class="message">it shouldn't be :)</span></div><div class="line" id="210747"><span class="nick" style="color:#80b1d3"><a href="#210747" label="[21:07:47]">&lt;oriansj&gt;</a></span><span class="message">well hex0 is very dumb to enable small implementations</span></div><div class="line" id="210847"><span class="nick" style="color:#2e2a4a"><a href="#210847" label="[21:08:47]">&lt;avih&gt;</a></span><span class="message">it's been years since i wrote assembly, so i don't know how harder it would be to be stricter. in C i don't think it's a burden, and neither in sh</span></div><div class="line" id="210933"><span class="nick" style="color:#80b1d3"><a href="#210933" label="[21:09:33]">&lt;oriansj&gt;</a></span><span class="message">well doing a strict version in assembly would ballon its size from 255bytes to a couple KB</span></div><div class="line" id="210959"><span class="nick" style="color:#2e2a4a"><a href="#210959" label="[21:09:59]">&lt;avih&gt;</a></span><span class="message">i have to take your word :)</span></div><div class="line" id="211022"><span class="nick" style="color:#2e2a4a"><a href="#211022" label="[21:10:22]">&lt;avih&gt;</a></span><span class="message">(i believe you though)</span></div><div class="line" id="211027"><span class="nick" style="color:#80b1d3"><a href="#211027" label="[21:10:27]">&lt;oriansj&gt;</a></span><span class="message">but strict versions in higher level languages could provide better warnings, errors and recommendations while producing the exact same output</span></div><div class="line" id="211216"><span class="nick" style="color:#2e2a4a"><a href="#211216" label="[21:12:16]">&lt;avih&gt;</a></span><span class="message">i don't believe so much in warnings TBH. if it's specified then it's valid. warning is something which is specified but is murky for some reason. IMHO that's a bug at the spec.</span></div><div class="line" id="211306"><span class="nick" style="color:#2e2a4a"><a href="#211306" label="[21:13:06]">&lt;avih&gt;</a></span><span class="message">but that's philosophical. a spec could also say &quot;in such case, an implementation may produce a warning&quot;, to make it more valid :)</span></div><div class="line" id="211448"><span class="nick" style="color:#80b1d3"><a href="#211448" label="[21:14:48]">&lt;oriansj&gt;</a></span><span class="message">entirely valid point</span></div><div class="line" id="211800"><span class="nick" style="color:#2e2a4a"><a href="#211800" label="[21:18:00]">&lt;avih&gt;</a></span><span class="message">oriansj: so, how's this for a battle plan: 1. i revise the code to handle the current spec. 2. you write a stricter hex0 spec, possibly starting from my definition, and i can go over it if you want. 3. I'll update the script to support both strict and non-strict.</span></div><div class="line" id="211932"><span class="nick" style="color:#80b1d3"><a href="#211932" label="[21:19:32]">&lt;oriansj&gt;</a></span><span class="message">well I am not much of a language lawyer but I'll take a crack at it</span></div><div class="line" id="212019"><span class="nick" style="color:#2e2a4a"><a href="#212019" label="[21:20:19]">&lt;avih&gt;</a></span><span class="message">heh</span></div><div class="line" id="212039"><span class="nick" style="color:#80b1d3"><a href="#212039" label="[21:20:39]">&lt;oriansj&gt;</a></span><span class="message">and I'll be updating the *.hex0 programs in bootstrap-seeds to conform to the more rigourous hex0-strict spec</span></div><div class="line" id="212040"><span class="nick" style="color:#2e2a4a"><a href="#212040" label="[21:20:40]">&lt;avih&gt;</a></span><span class="message">i could have a go at it instead if you prefer</span></div><div class="line" id="212059"><span class="nick" style="color:#2e2a4a"><a href="#212059" label="[21:20:59]">&lt;avih&gt;</a></span><span class="message">(the stricter spec)</span></div><div class="line" id="212120"><span class="nick" style="color:#2e2a4a"><a href="#212120" label="[21:21:20]">&lt;avih&gt;</a></span><span class="message">but i wouldn't know where to put it. as far as i can tell it's only specified here? <a rel="nofollow" href="https://bootstrapping.miraheze.org/wiki/Stage0">https://bootstrapping.miraheze.org/wiki/Stage0</a> </span></div><div class="line" id="212245"><span class="nick" style="color:#2e2a4a"><a href="#212245" label="[21:22:45]">&lt;avih&gt;</a></span><span class="message">so it would need two things: 1. make it clearer what the current spec is. specifically that any random stream of bytes is valid, and explain why. 2. add the stricter and recommended spec similar to what i mistakingly described and followed</span></div><div class="line" id="212318"><span class="nick" style="color:#80b1d3"><a href="#212318" label="[21:23:18]">&lt;oriansj&gt;</a></span><span class="message">good question; I don't think we have an official formal specification repo yet (anyone is free to correct me if they started on that)</span></div><div class="line" id="212421"><span class="nick" style="color:#2e2a4a"><a href="#212421" label="[21:24:21]">&lt;avih&gt;</a></span><span class="message">i'm not aware of one, but i also never looked for one :)</span></div><div class="line" id="212620"><span class="nick" style="color:#2e2a4a"><a href="#212620" label="[21:26:20]">&lt;avih&gt;</a></span><span class="message">i think we can start with the wiki page then?</span></div><div class="line" id="212629"><span class="nick" style="color:#2e2a4a"><a href="#212629" label="[21:26:29]">&lt;avih&gt;</a></span><span class="message">(once we have revised texts, that is)</span></div><div class="line" id="212711"><span class="nick" style="color:#80b1d3"><a href="#212711" label="[21:27:11]">&lt;oriansj&gt;</a></span><span class="message">of course and I probably should update the wiki clones too</span></div><div class="line" id="212741"><span class="nick" style="color:#2e2a4a"><a href="#212741" label="[21:27:41]">&lt;avih&gt;</a></span><span class="message">what are &quot;the wiki clones&quot;?</span></div><div class="line" id="212845"><span class="nick" style="color:#2e2a4a"><a href="#212845" label="[21:28:45]">&lt;avih&gt;</a></span><span class="message">or do you have an implementation which you consider a reference one, in c?</span></div><div class="line" id="212858"><span class="nick" style="color:#80b1d3"><a href="#212858" label="[21:28:58]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://git.sr.ht/~oriansj/bootstrappable-wiki">https://git.sr.ht/~oriansj/bootstrappable-wiki</a> </span></div><div class="line" id="212902"><span class="nick" style="color:#2e2a4a"><a href="#212902" label="[21:29:02]">&lt;avih&gt;</a></span><span class="message">s/or/oriansj/</span></div><div class="line" id="212939"><span class="nick" style="color:#80b1d3"><a href="#212939" label="[21:29:39]">&lt;oriansj&gt;</a></span><span class="message">the contents of the wiki and the mailing list have been put into a git cloneable wiki</span></div><div class="line" id="213035"><span class="nick" style="color:#2e2a4a"><a href="#213035" label="[21:30:35]">&lt;avih&gt;</a></span><span class="message">oh, i see, that's the &quot;wiki clones&quot;. i thought that link was a reference c implementation, except i couldn't find any c file :)</span></div><div class="line" id="213041"><span class="nick" style="color:#80b1d3"><a href="#213041" label="[21:30:41]">&lt;oriansj&gt;</a></span><span class="message">that way if the wiki goes down, everyone should have the ability to create a perfect clone where ever they want</span></div><div class="line" id="213111"><span class="nick" style="color:#80b1d3"><a href="#213111" label="[21:31:11]">&lt;oriansj&gt;</a></span><span class="message">avih: git pull on the the bootstrap-seeds to get a reference C implementation</span></div><div class="line" id="213152"><span class="nick" style="color:#80b1d3"><a href="#213152" label="[21:31:52]">&lt;oriansj&gt;</a></span><span class="message">(of hex0)</span></div><div class="line" id="213229"><span class="nick" style="color:#2e2a4a"><a href="#213229" label="[21:32:29]">&lt;avih&gt;</a></span><span class="message">i don't think i see any c files there. i already have it cloned, that's where i added the hex0-alternatives dir</span></div><div class="line" id="213324"><span class="nick" style="color:#2e2a4a"><a href="#213324" label="[21:33:24]">&lt;avih&gt;</a></span><span class="message">oh lol, you just added it :)</span></div><div class="line" id="213329"><span class="nick" style="color:#80b1d3"><a href="#213329" label="[21:33:29]">&lt;oriansj&gt;</a></span><span class="message">I just added commit 31543031833baeebb9d4e99b7fce81a23eb3f84b to the master ^_^</span></div><div class="line" id="213332"><span class="nick" style="color:#2e2a4a"><a href="#213332" label="[21:33:32]">&lt;avih&gt;</a></span><span class="message">inside hex0-alternatives. good</span></div><div class="line" id="213557"><span class="nick" style="color:#2e2a4a"><a href="#213557" label="[21:35:57]">&lt;avih&gt;</a></span><span class="message">oriansj: you don't need FILE *f = fopen(&quot;/dev/stdin&quot;, &quot;r&quot;). that's not portable, and also not needed, because you can use &quot;stdin&quot; in any place where &quot;f&quot; is used (same goes for &quot;stdout&quot; and &quot;stderr&quot;, e.g. fprintf(stderr, whatever))</span></div><div class="line" id="213628"><span class="nick" style="color:#2e2a4a"><a href="#213628" label="[21:36:28]">&lt;avih&gt;</a></span><span class="message">or int c = fgetc(stdin)</span></div><div class="line" id="213651"><span class="nick" style="color:#6c3d55"><a href="#213651" label="[21:36:51]">&lt;stikonas&gt;</a></span><span class="message">avih: if you update .hex0 programs, keep in mind that bootstrap-seeds is just a copy, main version of hex0 files are in other repos (stage0-posix/stage0-uefi/stage0)</span></div><div class="line" id="213731"><span class="nick" style="color:#80b1d3"><a href="#213731" label="[21:37:31]">&lt;oriansj&gt;</a></span><span class="message">indeed</span></div><div class="line" id="213802"><span class="nick" style="color:#80b1d3"><a href="#213802" label="[21:38:02]">&lt;oriansj&gt;</a></span><span class="message">and the changes should not produce any checksum or other diferences from the existing files</span></div><div class="line" id="213805"><span class="nick" style="color:#2e2a4a"><a href="#213805" label="[21:38:05]">&lt;avih&gt;</a></span><span class="message">stikonas: well, i don't know where the &quot;master&quot; is...</span></div><div class="line" id="213825"><span class="nick" style="color:#6c3d55"><a href="#213825" label="[21:38:25]">&lt;stikonas&gt;</a></span><span class="message">well, that's why I mentioned it here</span></div><div class="line" id="213827"><span class="nick" style="color:#2e2a4a"><a href="#213827" label="[21:38:27]">&lt;avih&gt;</a></span><span class="message">obviously i'd prefer it over downstream clones</span></div><div class="line" id="213857"><span class="nick" style="color:#6c3d55"><a href="#213857" label="[21:38:57]">&lt;stikonas&gt;</a></span><span class="message">.hex0 files in bootstrap-seeds are included just for context</span></div><div class="line" id="213912"><span class="nick" style="color:#2e2a4a"><a href="#213912" label="[21:39:12]">&lt;avih&gt;</a></span><span class="message">i'm not touching .hex0 files</span></div><div class="line" id="213923"><span class="nick" style="color:#80b1d3"><a href="#213923" label="[21:39:23]">&lt;oriansj&gt;</a></span><span class="message">and allowing people to skip creating their own hex0 implementation that they trust</span></div><div class="line" id="213946"><span class="nick" style="color:#6c3d55"><a href="#213946" label="[21:39:46]">&lt;stikonas&gt;</a></span><span class="message">e.g. for x86 is here <a rel="nofollow" href="https://github.com/oriansj/stage0-posix-x86/blob/master/hex0_x86.hex0">https://github.com/oriansj/stage0-posix-x86/blob/master/hex0_x86.hex0</a> </span></div><div class="line" id="213946"><span class="nick" style="color:#2e2a4a"><a href="#213946" label="[21:39:46]">&lt;avih&gt;</a></span><span class="message">seems like oriansj wants to, to make it clearer, possibly after having a stricter spec too</span></div><div class="line" id="214003"><span class="nick" style="color:#6c3d55"><a href="#214003" label="[21:40:03]">&lt;stikonas&gt;</a></span><span class="message">so if you want to edit any of the hex0 files, edit them there and later sync them back to bootstrap-seeds</span></div><div class="line" id="214046"><span class="nick" style="color:#2e2a4a"><a href="#214046" label="[21:40:46]">&lt;avih&gt;</a></span><span class="message">i don't, but thanks for the heads up anyway</span></div><div class="line" id="214116"><span class="nick" style="color:#6c3d55"><a href="#214116" label="[21:41:16]">&lt;stikonas&gt;</a></span><span class="message">anyway, bootstrap-seeds will have to be not strict</span></div><div class="line" id="214130"><span class="nick" style="color:#6c3d55"><a href="#214130" label="[21:41:30]">&lt;stikonas&gt;</a></span><span class="message">only alternatives can be strict</span></div><div class="line" id="214210"><span class="nick" style="color:#2e2a4a"><a href="#214210" label="[21:42:10]">&lt;avih&gt;</a></span><span class="message">i don't think i understand the difference</span></div><div class="line" id="214256"><span class="nick" style="color:#2e2a4a"><a href="#214256" label="[21:42:56]">&lt;avih&gt;</a></span><span class="message">also, i don't think any file _needs_ to be strict. i see &quot;strict&quot; as a way for the hex0 compiler to be able to point out places where the source could be clearer.</span></div><div class="line" id="214324"><span class="nick" style="color:#2e2a4a"><a href="#214324" label="[21:43:24]">&lt;avih&gt;</a></span><span class="message">(by making it fail on such cases)</span></div><div class="line" id="214339"><span class="nick" style="color:#80b1d3"><a href="#214339" label="[21:43:39]">&lt;oriansj&gt;</a></span><span class="message">avih: I think stikonas is indicating that the hex0-seeds can't be strict but the hex0-alternates can be and the .hex0 code can comply with a stricter set of rules than it implments</span></div><div class="line" id="214421"><span class="nick" style="color:#6c3d55"><a href="#214421" label="[21:44:21]">&lt;stikonas&gt;</a></span><span class="message">that's right, thanks for clarifying</span></div><div class="line" id="214449"><span class="nick" style="color:#2e2a4a"><a href="#214449" label="[21:44:49]">&lt;avih&gt;</a></span><span class="message">you mean that the source of the self-hosting hex0 seed can be loose, even if it implements a strict spec? (or maybe the other way around?)</span></div><div class="line" id="214521"><span class="nick" style="color:#6c3d55"><a href="#214521" label="[21:45:21]">&lt;stikonas&gt;</a></span><span class="message">no, vice versa</span></div><div class="line" id="214524"><span class="nick" style="color:#6c3d55"><a href="#214524" label="[21:45:24]">&lt;stikonas&gt;</a></span><span class="message">source can be stricter</span></div><div class="line" id="214535"><span class="nick" style="color:#6c3d55"><a href="#214535" label="[21:45:35]">&lt;stikonas&gt;</a></span><span class="message">but it will not error out on non strict source files</span></div><div class="line" id="214539"><span class="nick" style="color:#2e2a4a"><a href="#214539" label="[21:45:39]">&lt;avih&gt;</a></span><span class="message">but implementation should remain loose?</span></div><div class="line" id="214545"><span class="nick" style="color:#2e2a4a"><a href="#214545" label="[21:45:45]">&lt;avih&gt;</a></span><span class="message">right</span></div><div class="line" id="214658"><span class="nick" style="color:#2e2a4a"><a href="#214658" label="[21:46:58]">&lt;avih&gt;</a></span><span class="message">anyway, so i'll write some text: 1. a more accurate description of the current spec. 2. a stricter spec, and a recommendation that source files follow it. after it's reviewed, someone uploads it to the wiki and whatever?</span></div><div class="line" id="214716"><span class="nick" style="color:#80b1d3"><a href="#214716" label="[21:47:16]">&lt;oriansj&gt;</a></span><span class="message">sounds good</span></div><div class="line" id="214737"><span class="nick" style="color:#2e2a4a"><a href="#214737" label="[21:47:37]">&lt;avih&gt;</a></span><span class="message">good. i'l probably have a draft later today or tomorrow.</span></div><div class="line" id="214743"><span class="nick" style="color:#80b1d3"><a href="#214743" label="[21:47:43]">&lt;oriansj&gt;</a></span><span class="message">I'll handle the uploading to the wiki</span></div><div class="line" id="214812"><span class="nick" style="color:#2e2a4a"><a href="#214812" label="[21:48:12]">&lt;avih&gt;</a></span><span class="message">k</span></div><div class="line" id="214853"><span class="nick" style="color:#6c3d55"><a href="#214853" label="[21:48:53]">&lt;stikonas&gt;</a></span><span class="message">yes, implmentation will remain loose</span></div><div class="line" id="214909"><span class="nick" style="color:#6c3d55"><a href="#214909" label="[21:49:09]">&lt;stikonas&gt;</a></span><span class="message">as oriansj said, you can't have strict implementation that is so small</span></div><div class="line" id="215005"><span class="nick" style="color:#80b1d3"><a href="#215005" label="[21:50:05]">&lt;oriansj&gt;</a></span><span class="message">and the strict and the loose implementations should produce the exact same output if the input is actually good form hex0</span></div><div class="line" id="215025"><span class="nick" style="color:#80b1d3"><a href="#215025" label="[21:50:25]">&lt;oriansj&gt;</a></span><span class="message">^hex0^hex0-strict^</span></div><div class="line" id="215030"><span class="nick" style="color:#2e2a4a"><a href="#215030" label="[21:50:30]">&lt;avih&gt;</a></span><span class="message">yup</span></div><div class="line" id="215204"><span class="nick" style="color:#80b1d3"><a href="#215204" label="[21:52:04]">&lt;oriansj&gt;</a></span><span class="message">and hex0-strict is to reduce confusion and make code auditing easier</span></div><div class="line" id="215248"><span class="nick" style="color:#2e2a4a"><a href="#215248" label="[21:52:48]">&lt;avih&gt;</a></span><span class="message">yup</span></div><div class="line" id="222126"><span class="nick" style="color:#d9d9d9"><a href="#222126" label="[22:21:26]">&lt;mihi&gt;</a></span><span class="message">avih, oriansj: FWIW, I don't really care about hex0 spec, but in hex2 I have already used the fact that you can write DE AD BE EF as DEA DBE EF if it makes the instruction sequence clearer. And I've also put comments between adjacent nybbles of a byte. So in case the hex0 spec is made stricter, probably hex2 spec should explicitly allow this. Also about requiring whitespace between words, UEFI hex0</span></div><div class="line" id="222126"><span class="nick" style="color:#d9d9d9"><a href="#222126" label="[22:21:26]">&lt;mihi&gt;</a></span><span class="message">image currently does not always have them and it does not hurt its legibility in my opinion..</span></div><div class="line" id="222202"><span class="nick" style="color:#d9d9d9"><a href="#222202" label="[22:22:02]">&lt;mihi&gt;</a></span><span class="message">s/hex0 image/hex0 seed/</span></div><div class="line" id="222347"><span class="nick" style="color:#80b1d3"><a href="#222347" label="[22:23:47]">&lt;oriansj&gt;</a></span><span class="message">mihi: well sounds like a good discussion would be needed before we make a strict hex2 spec</span></div><div class="line" id="222401"><span class="nick" style="color:#d9d9d9"><a href="#222401" label="[22:24:01]">&lt;mihi&gt;</a></span><span class="message">allowing CHUCK NORRIS as replacement for CC is something I would not endorse</span></div><div class="line" id="222452"><span class="nick" style="color:#d9d9d9"><a href="#222452" label="[22:24:52]">&lt;mihi&gt;</a></span><span class="message">just like #chuck is only a valid HTML color (in some legacy tag attributes), but not a valid CSS color</span></div><div class="line" id="222510"><span class="nick" style="color:#2e2a4a"><a href="#222510" label="[22:25:10]">&lt;avih&gt;</a></span><span class="message">mihi: yeah, i did have second thoughts about allowing ABCD to denote the sequence of bytes 0xab followed by 0xcd. i don't write hex0 files so i don't know how useful that is, but i do _think_ it's a potential footgun, because if an op-code is 0xabcd, then the sequence of bytes depends on the endianess of the system, so on a big endian system the order 0xab and then 0xbc is correct, but on a little endian system, the opcode 0xabcd should be written as</span></div><div class="line" id="222511"><span class="nick" style="color:#2e2a4a"><a href="#222511" label="[22:25:11]">&lt;avih&gt;</a></span><span class="message">CDAB at the hex0 file, and i think it would be better to not introduce such doubt</span></div><div class="line" id="222612"><span class="nick" style="color:#2e2a4a"><a href="#222612" label="[22:26:12]">&lt;avih&gt;</a></span><span class="message">so others would have to chip in on whether that's desirable to support or not</span></div><div class="line" id="222619"><span class="nick" style="color:#d9d9d9"><a href="#222619" label="[22:26:19]">&lt;mihi&gt;</a></span><span class="message">yeah, having 12-bit fields in instructions as 3 hex digits also only really works when the architecture is big endian</span></div><div class="line" id="222628"><span class="nick" style="color:#2e2a4a"><a href="#222628" label="[22:26:28]">&lt;avih&gt;</a></span><span class="message">(in the strict mode)</span></div><div class="line" id="222630"><span class="nick" style="color:#6c3d55"><a href="#222630" label="[22:26:30]">&lt;stikonas&gt;</a></span><span class="message">mihi: is that  3 byte sequence for aarch64?</span></div><div class="line" id="222642"><span class="nick" style="color:#d9d9d9"><a href="#222642" label="[22:26:42]">&lt;mihi&gt;</a></span><span class="message">nope :)</span></div><div class="line" id="222645"><span class="nick" style="color:#80b1d3"><a href="#222645" label="[22:26:45]">&lt;oriansj&gt;</a></span><span class="message">well in hex0 it would be written as CD AB if the byte order was supposed to be 0xCD 0xAB; only in hex1 and above does endianness show up</span></div><div class="line" id="222702"><span class="nick" style="color:#6c3d55"><a href="#222702" label="[22:27:02]">&lt;stikonas&gt;</a></span><span class="message">I don't remember seeing any 3 byte sequences in x86 or amd64 hex2 files</span></div><div class="line" id="222710"><span class="nick" style="color:#80b1d3"><a href="#222710" label="[22:27:10]">&lt;oriansj&gt;</a></span><span class="message">~labels</span></div><div class="line" id="222711"><span class="nick" style="color:#6c3d55"><a href="#222711" label="[22:27:11]">&lt;stikonas&gt;</a></span><span class="message">or maybe I just remember poorly</span></div><div class="line" id="222754"><span class="nick" style="color:#6c3d55"><a href="#222754" label="[22:27:54]">&lt;stikonas&gt;</a></span><span class="message">oh we do have a lot</span></div><div class="line" id="222805"><span class="nick" style="color:#6c3d55"><a href="#222805" label="[22:28:05]">&lt;stikonas&gt;</a></span><span class="message">it's mostly spaced according to opcodes</span></div><div class="line" id="222823"><span class="nick" style="color:#80b1d3"><a href="#222823" label="[22:28:23]">&lt;oriansj&gt;</a></span><span class="message">or registers or what ever else makes sense</span></div><div class="line" id="222842"><span class="nick" style="color:#80b1d3"><a href="#222842" label="[22:28:42]">&lt;oriansj&gt;</a></span><span class="message">for example DEFINE R15 F sort of bits</span></div><div class="line" id="222858"><span class="nick" style="color:#6c3d55"><a href="#222858" label="[22:28:58]">&lt;stikonas&gt;</a></span><span class="message">hmm, actually it's still pairs in amd64, just can be more than 1 pair</span></div><div class="line" id="223110"><span class="nick" style="color:#6c3d55"><a href="#223110" label="[22:31:10]">&lt;stikonas&gt;</a></span><span class="message">but yes, we are mostly putting spaces around opcode boundaries, not around bytes</span></div><div class="line" id="223121"><span class="nick" style="color:#6c3d55"><a href="#223121" label="[22:31:21]">&lt;stikonas&gt;</a></span><span class="message">which I think makes most sense</span></div><div class="line" id="223141"><span class="nick" style="color:#6c3d55"><a href="#223141" label="[22:31:41]">&lt;stikonas&gt;</a></span><span class="message">because even in hex code, you dont' program directly in hex</span></div><div class="line" id="223153"><span class="nick" style="color:#6c3d55"><a href="#223153" label="[22:31:53]">&lt;stikonas&gt;</a></span><span class="message">but you think of an opcode, and then insert hex sequence for that opcode</span></div><div class="line" id="223202"><span class="nick" style="color:#6c3d55"><a href="#223202" label="[22:32:02]">&lt;stikonas&gt;</a></span><span class="message">and endianess doesn't really matter</span></div><div class="line" id="223232"><span class="nick" style="color:#2e2a4a"><a href="#223232" label="[22:32:32]">&lt;avih&gt;</a></span><span class="message">fwiw, if possible, i do think that the strict mode should be practical, and that people don't revert to loose mode because they can make the code clearer that way</span></div><div class="line" id="223315"><span class="nick" style="color:#2e2a4a"><a href="#223315" label="[22:33:15]">&lt;avih&gt;</a></span><span class="message">but i don't know how to translate that statement into a specification because i don't have practice in writing hex0 files</span></div><div class="line" id="223324"><span class="nick" style="color:#6c3d55"><a href="#223324" label="[22:33:24]">&lt;stikonas&gt;</a></span><span class="message">hmm, so for example right now we have E8 21000000 for calling a function 0x21 bytes ahead</span></div><div class="line" id="223340"><span class="nick" style="color:#6c3d55"><a href="#223340" label="[22:33:40]">&lt;stikonas&gt;</a></span><span class="message">which is clearer than E8 21 00 00 00</span></div><div class="line" id="223410"><span class="nick" style="color:#6c3d55"><a href="#223410" label="[22:34:10]">&lt;stikonas&gt;</a></span><span class="message">(this is call %read_byte in M1 file)</span></div><div class="line" id="223441"><span class="nick" style="color:#d9d9d9"><a href="#223441" label="[22:34:41]">&lt;mihi&gt;</a></span><span class="message">avih, when somebody talks about EBFB and CD20 (16-bit x86 assembly), I would interpret them as EB FB and CD 20 anyway (but perhaps because I know what these opcodes o)</span></div><div class="line" id="223546"><span class="nick" style="color:#6c3d55"><a href="#223546" label="[22:35:46]">&lt;stikonas&gt;</a></span><span class="message">jump 0xFB :D</span></div><div class="line" id="223555"><span class="nick" style="color:#d9d9d9"><a href="#223555" label="[22:35:55]">&lt;mihi&gt;</a></span><span class="message">or maybe it is because OllyDbg which I used for *years* displays it as such (<a rel="nofollow" href="https://sectools.org/images/screenshots/OllyDbg2.gif">https://sectools.org/images/screenshots/OllyDbg2.gif</a>) </span></div><div class="line" id="223629"><span class="nick" style="color:#389600"><a href="#223629" label="[22:36:29]">&lt;muurkha&gt;</a></span><span class="message">yeah, I'd certainly read it as CD 20 (exit)</span></div><div class="line" id="223657"><span class="nick" style="color:#2e2a4a"><a href="#223657" label="[22:36:57]">&lt;avih&gt;</a></span><span class="message">mihi: sure, but on a little endian system, the opcode ABCD would have to be reversed at the hex0 file. that's my main gripe with it, that a sequence of ABCD might look like the value 0xabcd, but that's only true on big endian</span></div><div class="line" id="223658"><span class="nick" style="color:#389600"><a href="#223658" label="[22:36:58]">&lt;muurkha&gt;</a></span><span class="message">it's a little worrisome to think that, depending on context, it might actually mean ?C D2 0?</span></div><div class="line" id="223742"><span class="nick" style="color:#6c3d55"><a href="#223742" label="[22:37:42]">&lt;stikonas&gt;</a></span><span class="message">avih: but you dont' need to think about it as ABCD</span></div><div class="line" id="223809"><span class="nick" style="color:#6c3d55"><a href="#223809" label="[22:38:09]">&lt;stikonas&gt;</a></span><span class="message">if it's reversed in hex0, everybody starts thinking of it as CD AB</span></div><div class="line" id="223812"><span class="nick" style="color:#d9d9d9"><a href="#223812" label="[22:38:12]">&lt;mihi&gt;</a></span><span class="message">avih, if you write 0xABCD, I would agree, but ABCD does not resemble 0xABCD for me when thinking about assembly dumps</span></div><div class="line" id="223847"><span class="nick" style="color:#6c3d55"><a href="#223847" label="[22:38:47]">&lt;stikonas&gt;</a></span><span class="message">I think that's because most arches are either little endian or big endian</span></div><div class="line" id="223857"><span class="nick" style="color:#6c3d55"><a href="#223857" label="[22:38:57]">&lt;stikonas&gt;</a></span><span class="message">so you never really have to think what is your endianness</span></div><div class="line" id="223859"><span class="nick" style="color:#389600"><a href="#223859" label="[22:38:59]">&lt;muurkha&gt;</a></span><span class="message">my butt is big endian</span></div><div class="line" id="223911"><span class="nick" style="color:#2e2a4a"><a href="#223911" label="[22:39:11]">&lt;avih&gt;</a></span><span class="message">i mean, let's say a malicious actor presents a hex0 code for review, and it includes the line &quot;ABCD 00  # opcode ABCD sets $whatever to 0&quot;</span></div><div class="line" id="223937"><span class="nick" style="color:#389600"><a href="#223937" label="[22:39:37]">&lt;muurkha&gt;</a></span><span class="message">yeah</span></div><div class="line" id="223954"><span class="nick" style="color:#2e2a4a"><a href="#223954" label="[22:39:54]">&lt;avih&gt;</a></span><span class="message">and it's intended for a little endian system, and the comment is correct, but don't actually describe the code, because the opcode is actually 0xcdab in this case</span></div><div class="line" id="224015"><span class="nick" style="color:#6c3d55"><a href="#224015" label="[22:40:15]">&lt;stikonas&gt;</a></span><span class="message">but is there anybody thinking of it as 0xcdab?</span></div><div class="line" id="224030"><span class="nick" style="color:#2e2a4a"><a href="#224030" label="[22:40:30]">&lt;avih&gt;</a></span><span class="message">that's what i'm asking :)</span></div><div class="line" id="224032"><span class="nick" style="color:#6c3d55"><a href="#224032" label="[22:40:32]">&lt;stikonas&gt;</a></span><span class="message">most tools show it as AB CD</span></div><div class="line" id="224050"><span class="nick" style="color:#6c3d55"><a href="#224050" label="[22:40:50]">&lt;stikonas&gt;</a></span><span class="message">at least those tools that are aware that this is little endian code</span></div><div class="line" id="224126"><span class="nick" style="color:#d9d9d9"><a href="#224126" label="[22:41:26]">&lt;mihi&gt;</a></span><span class="message">quick poll: on x86 (little endian), what is the opcode for REP MOVSW?</span></div><div class="line" id="224159"><span class="nick" style="color:#2e2a4a"><a href="#224159" label="[22:41:59]">&lt;avih&gt;</a></span><span class="message">anyway, i think the problem is clear. what isn't clear is what the strict spec should allow. if you guys think that spaces should not be necessary between bytes, and can happen between nibbles, then that's fine.</span></div><div class="line" id="224200"><span class="nick" style="color:#389600"><a href="#224200" label="[22:42:00]">&lt;muurkha&gt;</a></span><span class="message">it's two opcodes.  or are you asking to see if we know without looking it up?</span></div><div class="line" id="224203"><span class="nick" style="color:#2e2a4a"><a href="#224203" label="[22:42:03]">&lt;avih&gt;</a></span><span class="message">you just need to decide</span></div><div class="line" id="224211"><span class="nick" style="color:#d9d9d9"><a href="#224211" label="[22:42:11]">&lt;mihi&gt;</a></span><span class="message">I'd say F3A5, while avid would probably say (0x)A5F3</span></div><div class="line" id="224236"><span class="nick" style="color:#d9d9d9"><a href="#224236" label="[22:42:36]">&lt;mihi&gt;</a></span><span class="message">muurkha, you are free to pipe stuff into nasm, it is not closed book question :D</span></div><div class="line" id="224302"><span class="nick" style="color:#6c3d55"><a href="#224302" label="[22:43:02]">&lt;stikonas&gt;</a></span><span class="message">I would also say F3A5</span></div><div class="line" id="224441"><span class="nick" style="color:#389600"><a href="#224441" label="[22:44:41]">&lt;muurkha&gt;</a></span><span class="message">yeah, F3 A5 or F3A5</span></div><div class="line" id="224445"><span class="nick" style="color:#2e2a4a"><a href="#224445" label="[22:44:45]">&lt;avih&gt;</a></span><span class="message">what about spaces between nibbles? i think someone mentioned it earlier?</span></div><div class="line" id="224459"><span class="nick" style="color:#d9d9d9"><a href="#224459" label="[22:44:59]">&lt;mihi&gt;</a></span><span class="message">avih, out of curiosity, what (little-endian) platform would treat opcode numbers larger than 1 byte the way you think?</span></div><div class="line" id="224504"><span class="nick" style="color:#389600"><a href="#224504" label="[22:45:04]">&lt;muurkha&gt;</a></span><span class="message">I am somewhat disquieted by the idea of spaces between nibbles</span></div><div class="line" id="224545"><span class="nick" style="color:#389600"><a href="#224545" label="[22:45:45]">&lt;muurkha&gt;</a></span><span class="message">RISC-V's instruction format is pervasively little-endian but it's also damned hard to read in hex</span></div><div class="line" id="224603"><span class="nick" style="color:#2e2a4a"><a href="#224603" label="[22:46:03]">&lt;avih&gt;</a></span><span class="message">mihi: i don't know. if you guys think that's not gonna be an issue, i'm cool with that. but i had to raise the concern :)</span></div><div class="line" id="224604"><span class="nick" style="color:#6c3d55"><a href="#224604" label="[22:46:04]">&lt;stikonas&gt;</a></span><span class="message">risc-v immediate encoding is terrible</span></div><div class="line" id="224613"><span class="nick" style="color:#6c3d55"><a href="#224613" label="[22:46:13]">&lt;stikonas&gt;</a></span><span class="message">it took me so much time to get those early bits sorted</span></div><div class="line" id="224622"><span class="nick" style="color:#6c3d55"><a href="#224622" label="[22:46:22]">&lt;stikonas&gt;</a></span><span class="message">much harder to write hex0 code than on x86</span></div><div class="line" id="224624"><span class="nick" style="color:#d9d9d9"><a href="#224624" label="[22:46:24]">&lt;mihi&gt;</a></span><span class="message">avih, raising the concern is obviously fine :)</span></div><div class="line" id="224631"><span class="nick" style="color:#6c3d55"><a href="#224631" label="[22:46:31]">&lt;stikonas&gt;</a></span><span class="message">though later bits (once you have M0) on risc-v are much nicer</span></div><div class="line" id="224652"><span class="nick" style="color:#6c3d55"><a href="#224652" label="[22:46:52]">&lt;stikonas&gt;</a></span><span class="message">avih: various disassemblers also think it's F3A5</span></div><div class="line" id="224655"><span class="nick" style="color:#6c3d55"><a href="#224655" label="[22:46:55]">&lt;stikonas&gt;</a></span><span class="message">e.g. try <a rel="nofollow" href="https://defuse.ca/online-x86-assembler.htm">https://defuse.ca/online-x86-assembler.htm</a> </span></div><div class="line" id="224752"><span class="nick" style="color:#6c3d55"><a href="#224752" label="[22:47:52]">&lt;stikonas&gt;</a></span><span class="message">so I think everybody encodes little endianess already into opcodes</span></div><div class="line" id="224756"><span class="nick" style="color:#6c3d55"><a href="#224756" label="[22:47:56]">&lt;stikonas&gt;</a></span><span class="message">when they think about them</span></div><div class="line" id="224813"><span class="nick" style="color:#6c3d55"><a href="#224813" label="[22:48:13]">&lt;stikonas&gt;</a></span><span class="message">which is simpler for most people</span></div><div class="line" id="224833"><span class="nick" style="color:#6c3d55"><a href="#224833" label="[22:48:33]">&lt;stikonas&gt;</a></span><span class="message">because it saves you from having to swap bytes again</span></div><div class="line" id="224857"><span class="nick" style="color:#6c3d55"><a href="#224857" label="[22:48:57]">&lt;stikonas&gt;</a></span><span class="message">(you still need to do it for immediate constants)</span></div><div class="line" id="224908"><span class="nick" style="color:#389600"><a href="#224908" label="[22:49:08]">&lt;muurkha&gt;</a></span><span class="message">no, see <a rel="nofollow" href="https://sectools.org/images/screenshots/OllyDbg2.gif">https://sectools.org/images/screenshots/OllyDbg2.gif</a> </span></div><div class="line" id="224917"><span class="nick" style="color:#6c3d55"><a href="#224917" label="[22:49:17]">&lt;stikonas&gt;</a></span><span class="message">but swapping endianess of immediate constants is trivial compared to risc-v...</span></div><div class="line" id="224930"><span class="nick" style="color:#389600"><a href="#224930" label="[22:49:30]">&lt;muurkha&gt;</a></span><span class="message">the immediate constants are written out in little-endian in the hex dump window</span></div><div class="line" id="224942"><span class="nick" style="color:#389600"><a href="#224942" label="[22:49:42]">&lt;muurkha&gt;</a></span><span class="message">not swapped back to conventional human order</span></div><div class="line" id="225010"><span class="nick" style="color:#6c3d55"><a href="#225010" label="[22:50:10]">&lt;stikonas&gt;</a></span><span class="message">yes, immediate constants are also written in this order in hex0</span></div><div class="line" id="225015"><span class="nick" style="color:#2e2a4a"><a href="#225015" label="[22:50:15]">&lt;avih&gt;</a></span><span class="message">stikonas: so basically, literature of LE architectures describe the multi-byte sequences at the order they appear in memory, rather than by their value (where the memory representation would be different than the order they're written, left to right)?</span></div><div class="line" id="225015"><span class="nick" style="color:#6c3d55"><a href="#225015" label="[22:50:15]">&lt;stikonas&gt;</a></span><span class="message">i.e. 21 is 21000000</span></div><div class="line" id="225037"><span class="nick" style="color:#389600"><a href="#225037" label="[22:50:37]">&lt;muurkha&gt;</a></span><span class="message">right</span></div><div class="line" id="225042"><span class="nick" style="color:#6c3d55"><a href="#225042" label="[22:50:42]">&lt;stikonas&gt;</a></span><span class="message">it does seems to be so, though I haven't read much literature</span></div><div class="line" id="225102"><span class="nick" style="color:#6c3d55"><a href="#225102" label="[22:51:02]">&lt;stikonas&gt;</a></span><span class="message">x86 is a bit messed up anyway</span></div><div class="line" id="225107"><span class="nick" style="color:#6c3d55"><a href="#225107" label="[22:51:07]">&lt;stikonas&gt;</a></span><span class="message">we use hex</span></div><div class="line" id="225113"><span class="nick" style="color:#2e2a4a"><a href="#225113" label="[22:51:13]">&lt;avih&gt;</a></span><span class="message">ok, so for now spacing will not be mandatory between bytes.</span></div><div class="line" id="225115"><span class="nick" style="color:#6c3d55"><a href="#225115" label="[22:51:15]">&lt;stikonas&gt;</a></span><span class="message">whereas it actually maps much better to octal</span></div><div class="line" id="225123"><span class="nick" style="color:#389600"><a href="#225123" label="[22:51:23]">&lt;muurkha&gt;</a></span><span class="message">the RISC-V literature generally describes instruction words not in the order they appear in memory</span></div><div class="line" id="225123"><span class="nick" style="color:#2e2a4a"><a href="#225123" label="[22:51:23]">&lt;avih&gt;</a></span><span class="message">what about allowing spaces between nibbles? that was mentioned earlier</span></div><div class="line" id="225134"><span class="nick" style="color:#6c3d55"><a href="#225134" label="[22:51:34]">&lt;stikonas&gt;</a></span><span class="message">e.g. mov rsi,rsp is 4889E6</span></div><div class="line" id="225138"><span class="nick" style="color:#389600"><a href="#225138" label="[22:51:38]">&lt;muurkha&gt;</a></span><span class="message">it displays 32-bit or sometimes 16-bit instruction words</span></div><div class="line" id="225143"><span class="nick" style="color:#6c3d55"><a href="#225143" label="[22:51:43]">&lt;stikonas&gt;</a></span><span class="message">but in hex you can't really tell what is move what is rsi and what is rsp</span></div><div class="line" id="225219"><span class="nick" style="color:#6c3d55"><a href="#225219" label="[22:52:19]">&lt;stikonas&gt;</a></span><span class="message">avih: generally I think people prefer spaces between opcodes</span></div><div class="line" id="225222"><span class="nick" style="color:#6c3d55"><a href="#225222" label="[22:52:22]">&lt;stikonas&gt;</a></span><span class="message">not nibbles</span></div><div class="line" id="225235"><span class="nick" style="color:#6c3d55"><a href="#225235" label="[22:52:35]">&lt;stikonas&gt;</a></span><span class="message">but hex0 implementation is not aware of opcodes</span></div><div class="line" id="225243"><span class="nick" style="color:#6c3d55"><a href="#225243" label="[22:52:43]">&lt;stikonas&gt;</a></span><span class="message">so it can't really check</span></div><div class="line" id="225259"><span class="nick" style="color:#389600"><a href="#225259" label="[22:52:59]">&lt;muurkha&gt;</a></span><span class="message">I wrote a thing a few years ago about how the intel instruction sets are more readable in octal: <a rel="nofollow" href="https://dercuano.github.io/notes/8080-opcode-map.html">https://dercuano.github.io/notes/8080-opcode-map.html</a> </span></div><div class="line" id="225300"><span class="nick" style="color:#6c3d55"><a href="#225300" label="[22:53:00]">&lt;stikonas&gt;</a></span><span class="message">but people do think of opcodes</span></div><div class="line" id="225320"><span class="nick" style="color:#2e2a4a"><a href="#225320" label="[22:53:20]">&lt;avih&gt;</a></span><span class="message">right, the way i grasped it, hex0 is representing a sequence of bytes, which is why initially i thought mandatory spacing between bytes would make it more concise.</span></div><div class="line" id="225402"><span class="nick" style="color:#2e2a4a"><a href="#225402" label="[22:54:02]">&lt;avih&gt;</a></span><span class="message">what about &quot;inline&quot; comments? that was mentioned earlier as well</span></div><div class="line" id="225416"><span class="nick" style="color:#6c3d55"><a href="#225416" label="[22:54:16]">&lt;stikonas&gt;</a></span><span class="message">well, it mostly comes from the way we right hex0 code</span></div><div class="line" id="225431"><span class="nick" style="color:#6c3d55"><a href="#225431" label="[22:54:31]">&lt;stikonas&gt;</a></span><span class="message">we start with assembly prototype (i.e. what as can compile)</span></div><div class="line" id="225444"><span class="nick" style="color:#6c3d55"><a href="#225444" label="[22:54:44]">&lt;stikonas&gt;</a></span><span class="message">then we convert it to simplified syntax that M1 or M0 can build</span></div><div class="line" id="225503"><span class="nick" style="color:#6c3d55"><a href="#225503" label="[22:55:03]">&lt;stikonas&gt;</a></span><span class="message">so for example it would be push !1         # prepare to set rdx to 1</span></div><div class="line" id="225514"><span class="nick" style="color:#6c3d55"><a href="#225514" label="[22:55:14]">&lt;stikonas&gt;</a></span><span class="message">and then we keep both as comment in hex0 file</span></div><div class="line" id="225522"><span class="nick" style="color:#6c3d55"><a href="#225522" label="[22:55:22]">&lt;stikonas&gt;</a></span><span class="message">6A 01               ; push !1         # prepare to set rdx to 1</span></div><div class="line" id="225538"><span class="nick" style="color:#2e2a4a"><a href="#225538" label="[22:55:38]">&lt;avih&gt;</a></span><span class="message">nono, comment till end of line are fine, and really necessary</span></div><div class="line" id="225556"><span class="nick" style="color:#6c3d55"><a href="#225556" label="[22:55:56]">&lt;stikonas&gt;</a></span><span class="message">oh, those random hex characters</span></div><div class="line" id="225604"><span class="nick" style="color:#6c3d55"><a href="#225604" label="[22:56:04]">&lt;stikonas&gt;</a></span><span class="message">non-hex</span></div><div class="line" id="225605"><span class="nick" style="color:#6c3d55"><a href="#225605" label="[22:56:05]">&lt;stikonas&gt;</a></span><span class="message">they are not used</span></div><div class="line" id="225612"><span class="nick" style="color:#2e2a4a"><a href="#225612" label="[22:56:12]">&lt;avih&gt;</a></span><span class="message">someone mentioned earlier comments between bytes</span></div><div class="line" id="225616"><span class="nick" style="color:#6c3d55"><a href="#225616" label="[22:56:16]">&lt;stikonas&gt;</a></span><span class="message">that's just because all implementations ignore everythign else</span></div><div class="line" id="225631"><span class="nick" style="color:#2e2a4a"><a href="#225631" label="[22:56:31]">&lt;avih&gt;</a></span><span class="message">sure, but should strict mode allow it?</span></div><div class="line" id="225632"><span class="nick" style="color:#6c3d55"><a href="#225632" label="[22:56:32]">&lt;stikonas&gt;</a></span><span class="message">cause that would mean you need to add extra handling of other characters</span></div><div class="line" id="225641"><span class="nick" style="color:#6c3d55"><a href="#225641" label="[22:56:41]">&lt;stikonas&gt;</a></span><span class="message">I would say no</span></div><div class="line" id="225717"><span class="nick" style="color:#6c3d55"><a href="#225717" label="[22:57:17]">&lt;stikonas&gt;</a></span><span class="message">6AMNY01 is just unreadable</span></div><div class="line" id="225728"><span class="nick" style="color:#2e2a4a"><a href="#225728" label="[22:57:28]">&lt;avih&gt;</a></span><span class="message">i certainly agree</span></div><div class="line" id="225744"><span class="nick" style="color:#6c3d55"><a href="#225744" label="[22:57:44]">&lt;stikonas&gt;</a></span><span class="message">but in the minimal implementation, you don't want another conditional</span></div><div class="line" id="225750"><span class="nick" style="color:#6c3d55"><a href="#225750" label="[22:57:50]">&lt;stikonas&gt;</a></span><span class="message">to handle other characters</span></div><div class="line" id="225807"><span class="nick" style="color:#2e2a4a"><a href="#225807" label="[22:58:07]">&lt;avih&gt;</a></span><span class="message">but again, the goal is also to be practical. we don't want people reverting to loose mode only because they can make it more readable this way</span></div><div class="line" id="225919"><span class="nick" style="color:#6c3d55"><a href="#225919" label="[22:59:19]">&lt;stikonas&gt;</a></span><span class="message">well, nobody would be using those other non-hex characters in the middle</span></div><div class="line" id="225931"><span class="nick" style="color:#6c3d55"><a href="#225931" label="[22:59:31]">&lt;stikonas&gt;</a></span><span class="message">just like nobody puts random URLs in C code</span></div><div class="line" id="225943"><span class="nick" style="color:#6c3d55"><a href="#225943" label="[22:59:43]">&lt;stikonas&gt;</a></span><span class="message">C spec allows to put 1 URL per function</span></div><div class="line" id="230014"><span class="nick" style="color:#2e2a4a"><a href="#230014" label="[23:00:14]">&lt;avih&gt;</a></span><span class="message">so to summarize: for each line, after we remove the longest suffix which begins with '#' or ';' and then split the line into &quot;tokens&quot; separated by spaces/tabs, then each token has to be an even number of hex digits, which are interpreted as a sequence of two-digits hex values, left to right?</span></div><div class="line" id="230014"><span class="nick" style="color:#6c3d55"><a href="#230014" label="[23:00:14]">&lt;stikonas&gt;</a></span><span class="message">actually, 1 http URL and 1 https URL per function  is allowed</span></div><div class="line" id="230124"><span class="nick" style="color:#2e2a4a"><a href="#230124" label="[23:01:24]">&lt;avih&gt;</a></span><span class="message">&lt;stikonas&gt; C spec allows to put 1 URL per function &lt;-- what?</span></div><div class="line" id="230126"><span class="nick" style="color:#6c3d55"><a href="#230126" label="[23:01:26]">&lt;stikonas&gt;</a></span><span class="message">i.e. something like this is a valid C code <a rel="nofollow" href="https://paste.debian.net/1273527/">https://paste.debian.net/1273527/</a> </span></div><div class="line" id="230144"><span class="nick" style="color:#2e2a4a"><a href="#230144" label="[23:01:44]">&lt;avih&gt;</a></span><span class="message">no?!</span></div><div class="line" id="230154"><span class="nick" style="color:#6c3d55"><a href="#230154" label="[23:01:54]">&lt;stikonas&gt;</a></span><span class="message">yes, gcc will compile this</span></div><div class="line" id="230200"><span class="nick" style="color:#2e2a4a"><a href="#230200" label="[23:02:00]">&lt;avih&gt;</a></span><span class="message">wtf</span></div><div class="line" id="230206"><span class="nick" style="color:#6c3d55"><a href="#230206" label="[23:02:06]">&lt;stikonas&gt;</a></span><span class="message">try</span></div><div class="line" id="230244"><span class="nick" style="color:#bc80bd"><a href="#230244" label="[23:02:44]">&lt;FireFly&gt;</a></span><span class="message">oh</span></div><div class="line" id="230307"><span class="nick" style="color:#bc80bd"><a href="#230307" label="[23:03:07]">&lt;FireFly&gt;</a></span><span class="message">stikonas: amazing :D</span></div><div class="line" id="230311"><span class="nick" style="color:#2e2a4a"><a href="#230311" label="[23:03:11]">&lt;avih&gt;</a></span><span class="message">stikonas: i don't think that's in the spec</span></div><div class="line" id="230319"><span class="nick" style="color:#2e2a4a"><a href="#230319" label="[23:03:19]">&lt;avih&gt;</a></span><span class="message">can you point me to it in the c99 spec?</span></div><div class="line" id="230329"><span class="nick" style="color:#6c3d55"><a href="#230329" label="[23:03:29]">&lt;stikonas&gt;</a></span><span class="message">sure</span></div><div class="line" id="230330"><span class="nick" style="color:#bc80bd"><a href="#230330" label="[23:03:30]">&lt;FireFly&gt;</a></span><span class="message">it is spec-compliant syntax</span></div><div class="line" id="230400"><span class="nick" style="color:#2e2a4a"><a href="#230400" label="[23:04:00]">&lt;avih&gt;</a></span><span class="message">i did read the c99 spec start to finish at least once. i just don't recall such thing</span></div><div class="line" id="230402"><span class="nick" style="color:#6c3d55"><a href="#230402" label="[23:04:02]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.dii.uchile.cl/~daespino/files/Iso_C_1999_definition.pdf">https://www.dii.uchile.cl/~daespino/files/Iso_C_1999_definition.pdf</a>  section 6.8.1</span></div><div class="line" id="230443"><span class="nick" style="color:#d9d9d9"><a href="#230443" label="[23:04:43]">&lt;mihi&gt;</a></span><span class="message">works in Java, too. While Java has no goto, it has labels and // comments</span></div><div class="line" id="230459"><span class="nick" style="color:#2e2a4a"><a href="#230459" label="[23:04:59]">&lt;avih&gt;</a></span><span class="message">i don't see how 6.8.1 allows it...</span></div><div class="line" id="230506"><span class="nick" style="color:#6c3d55"><a href="#230506" label="[23:05:06]">&lt;stikonas&gt;</a></span><span class="message">it's https: label</span></div><div class="line" id="230508"><span class="nick" style="color:#bc80bd"><a href="#230508" label="[23:05:08]">&lt;FireFly&gt;</a></span><span class="message">avih: single-line comment</span></div><div class="line" id="230510"><span class="nick" style="color:#6c3d55"><a href="#230510" label="[23:05:10]">&lt;stikonas&gt;</a></span><span class="message">followed by a comment</span></div><div class="line" id="230512"><span class="nick" style="color:#bc80bd"><a href="#230512" label="[23:05:12]">&lt;FireFly&gt;</a></span><span class="message">well, label + comment</span></div><div class="line" id="230521"><span class="nick" style="color:#6c3d55"><a href="#230521" label="[23:05:21]">&lt;stikonas&gt;</a></span><span class="message">another interesting hack is while (x --&gt; 0)</span></div><div class="line" id="230526"><span class="nick" style="color:#2e2a4a"><a href="#230526" label="[23:05:26]">&lt;avih&gt;</a></span><span class="message">the https: part is fine, but what follows shouldn't, i think</span></div><div class="line" id="230535"><span class="nick" style="color:#6c3d55"><a href="#230535" label="[23:05:35]">&lt;stikonas&gt;</a></span><span class="message">what follows is a commend</span></div><div class="line" id="230536"><span class="nick" style="color:#2e2a4a"><a href="#230536" label="[23:05:36]">&lt;avih&gt;</a></span><span class="message">oh ffs</span></div><div class="line" id="230538"><span class="nick" style="color:#6c3d55"><a href="#230538" label="[23:05:38]">&lt;stikonas&gt;</a></span><span class="message">comment</span></div><div class="line" id="230541"><span class="nick" style="color:#2e2a4a"><a href="#230541" label="[23:05:41]">&lt;avih&gt;</a></span><span class="message">right</span></div><div class="line" id="230546"><span class="nick" style="color:#2e2a4a"><a href="#230546" label="[23:05:46]">&lt;avih&gt;</a></span><span class="message">man</span></div><div class="line" id="230551"><span class="nick" style="color:#bc80bd"><a href="#230551" label="[23:05:51]">&lt;FireFly&gt;</a></span><span class="message">I had to paste it into vim to get it, touché :p</span></div><div class="line" id="230556"><span class="nick" style="color:#2e2a4a"><a href="#230556" label="[23:05:56]">&lt;avih&gt;</a></span><span class="message">:)</span></div><div class="line" id="230602"><span class="nick" style="color:#d9d9d9"><a href="#230602" label="[23:06:02]">&lt;mihi&gt;</a></span><span class="message">x = a /*/*/*/*/*/ b;</span></div><div class="line" id="230622"><span class="nick" style="color:#2e2a4a"><a href="#230622" label="[23:06:22]">&lt;avih&gt;</a></span><span class="message">ok, so how does that relate to hex0 strict spec? :)</span></div><div class="line" id="230700"><span class="nick" style="color:#6c3d55"><a href="#230700" label="[23:07:00]">&lt;stikonas&gt;</a></span><span class="message">just saying that random strange stuff can be formally allowed by the spec but people would not use it</span></div><div class="line" id="230715"><span class="nick" style="color:#2e2a4a"><a href="#230715" label="[23:07:15]">&lt;avih&gt;</a></span><span class="message">right.</span></div><div class="line" id="230719"><span class="nick" style="color:#2e2a4a"><a href="#230719" label="[23:07:19]">&lt;avih&gt;</a></span><span class="message">so anyway, this? &lt;avih&gt; so to summarize: for each line, after we remove the longest suffix which begins with '#' or ';' and then split the line into &quot;tokens&quot; separated by spaces/tabs, then each token has to be an even number of hex digits, which are interpreted as a sequence of two-digits hex values, left to right?</span></div><div class="line" id="230801"><span class="nick" style="color:#6c3d55"><a href="#230801" label="[23:08:01]">&lt;stikonas&gt;</a></span><span class="message">well, at for some arches that makes sense</span></div><div class="line" id="230816"><span class="nick" style="color:#6c3d55"><a href="#230816" label="[23:08:16]">&lt;stikonas&gt;</a></span><span class="message">i.e. in x86 we always use them in pairs</span></div><div class="line" id="230819"><span class="nick" style="color:#2e2a4a"><a href="#230819" label="[23:08:19]">&lt;avih&gt;</a></span><span class="message">what's missing for the other arches?</span></div><div class="line" id="230830"><span class="nick" style="color:#6c3d55"><a href="#230830" label="[23:08:30]">&lt;stikonas&gt;</a></span><span class="message">but e.g. for knight oriansj used single hex tokens</span></div><div class="line" id="230838"><span class="nick" style="color:#6c3d55"><a href="#230838" label="[23:08:38]">&lt;stikonas&gt;</a></span><span class="message">which could represent register</span></div><div class="line" id="230904"><span class="nick" style="color:#2e2a4a"><a href="#230904" label="[23:09:04]">&lt;avih&gt;</a></span><span class="message">so i presume that writing individual nibbles would make it clearer to read in such cases?</span></div><div class="line" id="231001"><span class="nick" style="color:#6c3d55"><a href="#231001" label="[23:10:01]">&lt;stikonas&gt;</a></span><span class="message">e.g. see <a rel="nofollow" href="https://github.com/oriansj/M2libc/blob/main/knight/knight_defs.M1">https://github.com/oriansj/M2libc/blob/main/knight/knight_defs.M1</a> </span></div><div class="line" id="231003"><span class="nick" style="color:#2e2a4a"><a href="#231003" label="[23:10:03]">&lt;avih&gt;</a></span><span class="message">IOW, if the spec requires even sequence of digits, then whoever find it clearer to use individual nibbles would revert to loose mode?</span></div><div class="line" id="231022"><span class="nick" style="color:#2e2a4a"><a href="#231022" label="[23:10:22]">&lt;avih&gt;</a></span><span class="message">that's not great...</span></div><div class="line" id="231034"><span class="nick" style="color:#6c3d55"><a href="#231034" label="[23:10:34]">&lt;stikonas&gt;</a></span><span class="message">which means we shouldn't ask it in spec</span></div><div class="line" id="231052"><span class="nick" style="color:#6c3d55"><a href="#231052" label="[23:10:52]">&lt;stikonas&gt;</a></span><span class="message">because it really depends on the specific details of how architecture encodes stuff</span></div><div class="line" id="231056"><span class="nick" style="color:#2e2a4a"><a href="#231056" label="[23:10:56]">&lt;avih&gt;</a></span><span class="message">stikonas: that link is not hex0</span></div><div class="line" id="231106"><span class="nick" style="color:#6c3d55"><a href="#231106" label="[23:11:06]">&lt;stikonas&gt;</a></span><span class="message">not, that link is opcode to hex map</span></div><div class="line" id="231119"><span class="nick" style="color:#6c3d55"><a href="#231119" label="[23:11:19]">&lt;stikonas&gt;</a></span><span class="message">like I said, people think in opcodes</span></div><div class="line" id="231126"><span class="nick" style="color:#2e2a4a"><a href="#231126" label="[23:11:26]">&lt;avih&gt;</a></span><span class="message">(that i can tell, because technically any random sequence of bytes is a valid hex0 source...)</span></div><div class="line" id="231128"><span class="nick" style="color:#6c3d55"><a href="#231128" label="[23:11:28]">&lt;stikonas&gt;</a></span><span class="message">e.g. move register1 register2</span></div><div class="line" id="231158"><span class="nick" style="color:#6c3d55"><a href="#231158" label="[23:11:58]">&lt;stikonas&gt;</a></span><span class="message">and other &quot;move&quot; or register is a pair of bytes or single byte or something worse is arch specific</span></div><div class="line" id="231302"><span class="nick" style="color:#6c3d55"><a href="#231302" label="[23:13:02]">&lt;stikonas&gt;</a></span><span class="message">and some arches are nasty</span></div><div class="line" id="231359"><span class="nick" style="color:#2e2a4a"><a href="#231359" label="[23:13:59]">&lt;avih&gt;</a></span><span class="message">so you think single digits should be allowed, but they always end up as part of a pair at the same line?</span></div><div class="line" id="231425"><span class="nick" style="color:#6c3d55"><a href="#231425" label="[23:14:25]">&lt;stikonas&gt;</a></span><span class="message">in practice I think they will be on the same line...</span></div><div class="line" id="231426"><span class="nick" style="color:#2e2a4a"><a href="#231426" label="[23:14:26]">&lt;avih&gt;</a></span><span class="message">i.e. if, after striping the trailing comment, a line has an odd number of hex digits, then it's invalid?</span></div><div class="line" id="231448"><span class="nick" style="color:#6c3d55"><a href="#231448" label="[23:14:48]">&lt;stikonas&gt;</a></span><span class="message">but again, I don't think having them on the same line should be a spec</span></div><div class="line" id="231515"><span class="nick" style="color:#2e2a4a"><a href="#231515" label="[23:15:15]">&lt;avih&gt;</a></span><span class="message">otherwise it's very easy to accidentally leave an off digit at one line, which will shift the rest of the file by 4 bits...</span></div><div class="line" id="231525"><span class="nick" style="color:#2e2a4a"><a href="#231525" label="[23:15:25]">&lt;avih&gt;</a></span><span class="message">odd*</span></div><div class="line" id="231553"><span class="nick" style="color:#6c3d55"><a href="#231553" label="[23:15:53]">&lt;stikonas&gt;</a></span><span class="message">but maybe it will just shift 1 line</span></div><div class="line" id="231557"><span class="nick" style="color:#6c3d55"><a href="#231557" label="[23:15:57]">&lt;stikonas&gt;</a></span><span class="message">and you are back to normal</span></div><div class="line" id="231559"><span class="nick" style="color:#2e2a4a"><a href="#231559" label="[23:15:59]">&lt;avih&gt;</a></span><span class="message">stikonas: why not? remember, we want the strictest practical spec we can produce.</span></div><div class="line" id="231602"><span class="nick" style="color:#6c3d55"><a href="#231602" label="[23:16:02]">&lt;stikonas&gt;</a></span><span class="message">just you wanted to have some end of line comment</span></div><div class="line" id="231639"><span class="nick" style="color:#2e2a4a"><a href="#231639" label="[23:16:39]">&lt;avih&gt;</a></span><span class="message">and we want to be able to identify errors</span></div><div class="line" id="231724"><span class="nick" style="color:#2e2a4a"><a href="#231724" label="[23:17:24]">&lt;avih&gt;</a></span><span class="message">the problem with the current spec is that it doesn't have any errors at all. any typo at the source will be valid to the compiler</span></div><div class="line" id="231735"><span class="nick" style="color:#6c3d55"><a href="#231735" label="[23:17:35]">&lt;stikonas&gt;</a></span><span class="message">avih: so this <a rel="nofollow" href="https://paste.debian.net/1273528/">https://paste.debian.net/1273528/</a>  would be invalid then?</span></div><div class="line" id="231808"><span class="nick" style="color:#6c3d55"><a href="#231808" label="[23:18:08]">&lt;stikonas&gt;</a></span><span class="message">(this is of course fake hex, not x86 or anything else, but just to illustrate the point</span></div><div class="line" id="231838"><span class="nick" style="color:#80b1d3"><a href="#231838" label="[23:18:38]">&lt;oriansj&gt;</a></span><span class="message">well if we think of hex0 of having a mapping of 1 instruction per line</span></div><div class="line" id="231848"><span class="nick" style="color:#2e2a4a"><a href="#231848" label="[23:18:48]">&lt;avih&gt;</a></span><span class="message">stikonas: that's what i'm asking, yes. i thought it should be invalid. what do you think the produced sequence of bytes should be for this source?</span></div><div class="line" id="231904"><span class="nick" style="color:#80b1d3"><a href="#231904" label="[23:19:04]">&lt;oriansj&gt;</a></span><span class="message">and all architectures we plan on supporting have instructions that are multiples of 8bits</span></div><div class="line" id="231911"><span class="nick" style="color:#6c3d55"><a href="#231911" label="[23:19:11]">&lt;stikonas&gt;</a></span><span class="message">well, it's the same as 01FE or 0xFE01</span></div><div class="line" id="231929"><span class="nick" style="color:#2e2a4a"><a href="#231929" label="[23:19:29]">&lt;avih&gt;</a></span><span class="message">oh, sorry, i missed the last F at the first line</span></div><div class="line" id="231958"><span class="nick" style="color:#80b1d3"><a href="#231958" label="[23:19:58]">&lt;oriansj&gt;</a></span><span class="message">so the strict spec should be able to require after removal of all comments and whitespace to be an even set of hex characters</span></div><div class="line" id="232030"><span class="nick" style="color:#80b1d3"><a href="#232030" label="[23:20:30]">&lt;oriansj&gt;</a></span><span class="message">and in the strict spec we can explicity forbid all non-hex characters that are not inside of comments</span></div><div class="line" id="232048"><span class="nick" style="color:#80b1d3"><a href="#232048" label="[23:20:48]">&lt;oriansj&gt;</a></span><span class="message">(excluding whitespace of course)</span></div><div class="line" id="232058"><span class="nick" style="color:#2e2a4a"><a href="#232058" label="[23:20:58]">&lt;avih&gt;</a></span><span class="message">right</span></div><div class="line" id="232105"><span class="nick" style="color:#6c3d55"><a href="#232105" label="[23:21:05]">&lt;stikonas&gt;</a></span><span class="message">I'm definitely for removing non-hex characters outside comments</span></div><div class="line" id="232112"><span class="nick" style="color:#d9d9d9"><a href="#232112" label="[23:21:12]">&lt;mihi&gt;</a></span><span class="message">hmm, as a compromise, how about allowing some special character (like *) to be added for partial bytes? Or would it make the parser/checker too complicated?</span></div><div class="line" id="232114"><span class="nick" style="color:#6c3d55"><a href="#232114" label="[23:21:14]">&lt;stikonas&gt;</a></span><span class="message">that's a clear improvements</span></div><div class="line" id="232138"><span class="nick" style="color:#d9d9d9"><a href="#232138" label="[23:21:38]">&lt;mihi&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1273530/">https://paste.debian.net/1273530/</a> </span></div><div class="line" id="232151"><span class="nick" style="color:#80b1d3"><a href="#232151" label="[23:21:51]">&lt;oriansj&gt;</a></span><span class="message">and we don't even need to support all whitespace characters either; just space, \t, \n and \r should be sufficient</span></div><div class="line" id="232154"><span class="nick" style="color:#2e2a4a"><a href="#232154" label="[23:21:54]">&lt;avih&gt;</a></span><span class="message">oriansj: so you think that it's practical to write readable hex0 files without using individual hex digits? i.e. that the digits are always in an even sequence?</span></div><div class="line" id="232156"><span class="nick" style="color:#d9d9d9"><a href="#232156" label="[23:21:56]">&lt;mihi&gt;</a></span><span class="message">existing lax implementations will ignore it</span></div><div class="line" id="232314"><span class="nick" style="color:#2e2a4a"><a href="#232314" label="[23:23:14]">&lt;avih&gt;</a></span><span class="message">mihi: no objection here if you think it would be useful</span></div><div class="line" id="232315"><span class="nick" style="color:#80b1d3"><a href="#232315" label="[23:23:15]">&lt;oriansj&gt;</a></span><span class="message">well in some architectures doing add R0 R1 R15 as AF0 0 1 F is most readable but when you strip out the whitespace it'll be an even number of hex digits only</span></div><div class="line" id="232343"><span class="nick" style="color:#d9d9d9"><a href="#232343" label="[23:23:43]">&lt;mihi&gt;</a></span><span class="message">but probably we are in bikeshedding or <a rel="nofollow" href="https://xkcd.com/1172/">https://xkcd.com/1172/</a>  land ...</span></div><div class="line" id="232401"><span class="nick" style="color:#80b1d3"><a href="#232401" label="[23:24:01]">&lt;oriansj&gt;</a></span><span class="message">mihi: I don't think partial bytes make sense in hex0</span></div><div class="line" id="232432"><span class="nick" style="color:#d9d9d9"><a href="#232432" label="[23:24:32]">&lt;mihi&gt;</a></span><span class="message">okay. I used them in hex2, but I do not really care about hex0 in that respect</span></div><div class="line" id="232529"><span class="nick" style="color:#6c3d55"><a href="#232529" label="[23:25:29]">&lt;stikonas&gt;</a></span><span class="message">but if we care too much about whitespace rules, then we'll end up with another python</span></div><div class="line" id="232645"><span class="nick" style="color:#2e2a4a"><a href="#232645" label="[23:26:45]">&lt;avih&gt;</a></span><span class="message">right, so there are dew options: 1. allowing any number of consecutive digits, including odd number, including one. 2. same as 1, but per line it should be even number of digits. 1.1: same as 1, but individual digits should be marked somehow, e.g. with *. 2.2: same as 2 but individual digits are marked</span></div><div class="line" id="232649"><span class="nick" style="color:#2e2a4a"><a href="#232649" label="[23:26:49]">&lt;avih&gt;</a></span><span class="message">few*</span></div><div class="line" id="232734"><span class="nick" style="color:#2e2a4a"><a href="#232734" label="[23:27:34]">&lt;avih&gt;</a></span><span class="message">i think 2 should generally be both practical and allow the compiler to detect issues?</span></div><div class="line" id="232752"><span class="nick" style="color:#80b1d3"><a href="#232752" label="[23:27:52]">&lt;oriansj&gt;</a></span><span class="message">mihi: in x86/M0_x86.hex2: I see the * in the comment not in the body</span></div><div class="line" id="232914"><span class="nick" style="color:#2e2a4a"><a href="#232914" label="[23:29:14]">&lt;avih&gt;</a></span><span class="message">fwiw, i don't think marking is necessary. if you guys deem that individual digits can make it more readable, then it's fine. no need to mark it IMHO</span></div><div class="line" id="232930"><span class="nick" style="color:#6c3d55"><a href="#232930" label="[23:29:30]">&lt;stikonas&gt;</a></span><span class="message">no, marking them extra would be confusing</span></div><div class="line" id="232945"><span class="nick" style="color:#2e2a4a"><a href="#232945" label="[23:29:45]">&lt;avih&gt;</a></span><span class="message">the question remain of whether an individual byte can be split over lines</span></div><div class="line" id="233004"><span class="nick" style="color:#2e2a4a"><a href="#233004" label="[23:30:04]">&lt;avih&gt;</a></span><span class="message">like here <a rel="nofollow" href="https://paste.debian.net/1273528/">https://paste.debian.net/1273528/</a> </span></div><div class="line" id="233006"><span class="nick" style="color:#6c3d55"><a href="#233006" label="[23:30:06]">&lt;stikonas&gt;</a></span><span class="message">individual hex</span></div><div class="line" id="233015"><span class="nick" style="color:#6c3d55"><a href="#233015" label="[23:30:15]">&lt;stikonas&gt;</a></span><span class="message">bytes can definitely be split</span></div><div class="line" id="233024"><span class="nick" style="color:#2e2a4a"><a href="#233024" label="[23:30:24]">&lt;avih&gt;</a></span><span class="message">i don't understand.</span></div><div class="line" id="233030"><span class="nick" style="color:#6c3d55"><a href="#233030" label="[23:30:30]">&lt;stikonas&gt;</a></span><span class="message">oh ignore that</span></div><div class="line" id="233059"><span class="nick" style="color:#2e2a4a"><a href="#233059" label="[23:30:59]">&lt;avih&gt;</a></span><span class="message">so do we want to allow splitting bytes between lines at the strict spec, like at that link?</span></div><div class="line" id="233112"><span class="nick" style="color:#80b1d3"><a href="#233112" label="[23:31:12]">&lt;oriansj&gt;</a></span><span class="message">avih: Well I can't imagine a good reason to slit a byte between lines</span></div><div class="line" id="233117"><span class="nick" style="color:#2e2a4a"><a href="#233117" label="[23:31:17]">&lt;avih&gt;</a></span><span class="message">i.e. the same byte starts in one line and continues at the next one</span></div><div class="line" id="233128"><span class="nick" style="color:#6c3d55"><a href="#233128" label="[23:31:28]">&lt;stikonas&gt;</a></span><span class="message">oriansj: what do you think?</span></div><div class="line" id="233136"><span class="nick" style="color:#6c3d55"><a href="#233136" label="[23:31:36]">&lt;stikonas&gt;</a></span><span class="message">I know in hex2 code we definitely allow it</span></div><div class="line" id="233154"><span class="nick" style="color:#6c3d55"><a href="#233154" label="[23:31:54]">&lt;stikonas&gt;</a></span><span class="message">because M0 can produce one define per line</span></div><div class="line" id="233212"><span class="nick" style="color:#6c3d55"><a href="#233212" label="[23:32:12]">&lt;stikonas&gt;</a></span><span class="message">but that's hex0...</span></div><div class="line" id="233220"><span class="nick" style="color:#80b1d3"><a href="#233220" label="[23:32:20]">&lt;oriansj&gt;</a></span><span class="message">splitting inside of a single line is common and aids in comprehension</span></div><div class="line" id="233244"><span class="nick" style="color:#2e2a4a"><a href="#233244" label="[23:32:44]">&lt;avih&gt;</a></span><span class="message">stikonas: the question is not whether it's allowed or not, but whether it can practically make the code more readable.</span></div><div class="line" id="233333"><span class="nick" style="color:#2e2a4a"><a href="#233333" label="[23:33:33]">&lt;avih&gt;</a></span><span class="message">if yes, then disallowing that would harm the readability. but if perfectly readable source can get away with full bytes per line, then there's no issue IMHO</span></div><div class="line" id="233333"><span class="nick" style="color:#80b1d3"><a href="#233333" label="[23:33:33]">&lt;oriansj&gt;</a></span><span class="message">I know M1 generated output might spit a line but I can't remember ever manually splitting a byte between line</span></div><div class="line" id="233343"><span class="nick" style="color:#6c3d55"><a href="#233343" label="[23:33:43]">&lt;stikonas&gt;</a></span><span class="message">no, I think we never did that</span></div><div class="line" id="233358"><span class="nick" style="color:#6c3d55"><a href="#233358" label="[23:33:58]">&lt;stikonas&gt;</a></span><span class="message">but this example <a rel="nofollow" href="https://paste.debian.net/1273528/">https://paste.debian.net/1273528/</a>  shows a plausible scenario</span></div><div class="line" id="233408"><span class="nick" style="color:#6c3d55"><a href="#233408" label="[23:34:08]">&lt;stikonas&gt;</a></span><span class="message">(though never used in practice)</span></div><div class="line" id="233442"><span class="nick" style="color:#6c3d55"><a href="#233442" label="[23:34:42]">&lt;stikonas&gt;</a></span><span class="message">but then again, maybe this is spacebar heating</span></div><div class="line" id="233517"><span class="nick" style="color:#80b1d3"><a href="#233517" label="[23:35:17]">&lt;oriansj&gt;</a></span><span class="message">yeah, I don't accept that as valid even with RISC-V levels of crazy encoding</span></div><div class="line" id="233548"><span class="nick" style="color:#6c3d55"><a href="#233548" label="[23:35:48]">&lt;stikonas&gt;</a></span><span class="message">ok, let's say we need full byte in a line then</span></div><div class="line" id="233611"><span class="nick" style="color:#2e2a4a"><a href="#233611" label="[23:36:11]">&lt;avih&gt;</a></span><span class="message">stricter spec should help users, by being able to detect some accidental errors at the code. you guys write hex0 code, so you should decide to what extent the strictness goes, to balane your needs</span></div><div class="line" id="233611"><span class="nick" style="color:#80b1d3"><a href="#233611" label="[23:36:11]">&lt;oriansj&gt;</a></span><span class="message">doing multiple line comments above a messy instruction is common and easily understood</span></div><div class="line" id="233714"><span class="nick" style="color:#6c3d55"><a href="#233714" label="[23:37:14]">&lt;stikonas&gt;</a></span><span class="message">hopefully we don't need to write much hex0 code...</span></div><div class="line" id="233723"><span class="nick" style="color:#6c3d55"><a href="#233723" label="[23:37:23]">&lt;stikonas&gt;</a></span><span class="message">it's tedious...</span></div><div class="line" id="233744"><span class="nick" style="color:#80b1d3"><a href="#233744" label="[23:37:44]">&lt;oriansj&gt;</a></span><span class="message">stikonas: only for a handful of steps when setting up a new architecture</span></div><div class="line" id="233801"><span class="nick" style="color:#6c3d55"><a href="#233801" label="[23:38:01]">&lt;stikonas&gt;</a></span><span class="message">actually in practice, if you want to add a new arch (say to stage0-posix). You'll spend more time writing M0 or even C code than hex0 code</span></div><div class="line" id="233824"><span class="nick" style="color:#6c3d55"><a href="#233824" label="[23:38:24]">&lt;stikonas&gt;</a></span><span class="message">which is true for every single arch I guess</span></div><div class="line" id="233846"><span class="nick" style="color:#80b1d3"><a href="#233846" label="[23:38:46]">&lt;oriansj&gt;</a></span><span class="message">yeah, the biggest problem usually is figuring out how the spec lies</span></div><div class="line" id="233956"><span class="nick" style="color:#80b1d3"><a href="#233956" label="[23:39:56]">&lt;oriansj&gt;</a></span><span class="message">armv7l lied about bit order; powerpc lies about the e_entry and so forth</span></div><div class="line" id="233957"><span class="nick" style="color:#2e2a4a"><a href="#233957" label="[23:39:57]">&lt;avih&gt;</a></span><span class="message">so you guys agreed on this for each line: 1. strip comments (the longest suffix which begins with '#' or ';'). 2. what remain must be any sequence of hex digits, spaces, and tabs. 3. the overall number of hex digits in &quot;2&quot; must be even.</span></div><div class="line" id="234033"><span class="nick" style="color:#d9d9d9"><a href="#234033" label="[23:40:33]">&lt;mihi&gt;</a></span><span class="message">ACTION agrees :)</span></div><div class="line" id="234034"><span class="nick" style="color:#80b1d3"><a href="#234034" label="[23:40:34]">&lt;oriansj&gt;</a></span><span class="message">avih: you can also safely strip out the spaces and tabs too</span></div><div class="line" id="234109"><span class="nick" style="color:#2e2a4a"><a href="#234109" label="[23:41:09]">&lt;avih&gt;</a></span><span class="message">what do you mean?</span></div><div class="line" id="234123"><span class="nick" style="color:#d9d9d9"><a href="#234123" label="[23:41:23]">&lt;mihi&gt;</a></span><span class="message">the spaces and tabs have no semantic meaning</span></div><div class="line" id="234124"><span class="nick" style="color:#2e2a4a"><a href="#234124" label="[23:41:24]">&lt;avih&gt;</a></span><span class="message">i'm talking logically, not implementation details</span></div><div class="line" id="234136"><span class="nick" style="color:#2e2a4a"><a href="#234136" label="[23:41:36]">&lt;avih&gt;</a></span><span class="message">sure, but they are alowed</span></div><div class="line" id="234137"><span class="nick" style="color:#6c3d55"><a href="#234137" label="[23:41:37]">&lt;stikonas&gt;</a></span><span class="message">oh we need to allow a bit more</span></div><div class="line" id="234139"><span class="nick" style="color:#2e2a4a"><a href="#234139" label="[23:41:39]">&lt;avih&gt;</a></span><span class="message">ll</span></div><div class="line" id="234145"><span class="nick" style="color:#6c3d55"><a href="#234145" label="[23:41:45]">&lt;stikonas&gt;</a></span><span class="message">\r is also allowed whitespace</span></div><div class="line" id="234154"><span class="nick" style="color:#6c3d55"><a href="#234154" label="[23:41:54]">&lt;stikonas&gt;</a></span><span class="message">(carriage return)</span></div><div class="line" id="234155"><span class="nick" style="color:#80b1d3"><a href="#234155" label="[23:41:55]">&lt;oriansj&gt;</a></span><span class="message">0 1 2 3 4 5 6 7 8 9 and 0123456789 are the same thing</span></div><div class="line" id="234200"><span class="nick" style="color:#80b1d3"><a href="#234200" label="[23:42:00]">&lt;oriansj&gt;</a></span><span class="message">(in hex0)</span></div><div class="line" id="234214"><span class="nick" style="color:#2e2a4a"><a href="#234214" label="[23:42:14]">&lt;avih&gt;</a></span><span class="message">stikonas: i actually considered it and concluded against it. this could be seriously misleading in some tools at the terminal</span></div><div class="line" id="234219"><span class="nick" style="color:#6c3d55"><a href="#234219" label="[23:42:19]">&lt;stikonas&gt;</a></span><span class="message">e.g. if somebody has windows line ending</span></div><div class="line" id="234237"><span class="nick" style="color:#2e2a4a"><a href="#234237" label="[23:42:37]">&lt;avih&gt;</a></span><span class="message">then they can choose unix line ending. even notepad can handle it</span></div><div class="line" id="234239"><span class="nick" style="color:#d9d9d9"><a href="#234239" label="[23:42:39]">&lt;mihi&gt;</a></span><span class="message">stikonas, I would define a line to be separated by either \r\n or \n, that should cover the \r case</span></div><div class="line" id="234240"><span class="nick" style="color:#6c3d55"><a href="#234240" label="[23:42:40]">&lt;stikonas&gt;</a></span><span class="message">e.g. say you are in UEFI shell</span></div><div class="line" id="234301"><span class="nick" style="color:#6c3d55"><a href="#234301" label="[23:43:01]">&lt;stikonas&gt;</a></span><span class="message">yeah, only in new line endings</span></div><div class="line" id="234320"><span class="nick" style="color:#d9d9d9"><a href="#234320" label="[23:43:20]">&lt;mihi&gt;</a></span><span class="message">TBH I am not sure how hex0 implementations treat 12 # comment \r 34 #another comment \n</span></div><div class="line" id="234335"><span class="nick" style="color:#d9d9d9"><a href="#234335" label="[23:43:35]">&lt;mihi&gt;</a></span><span class="message">so I would disallow it</span></div><div class="line" id="234342"><span class="nick" style="color:#6c3d55"><a href="#234342" label="[23:43:42]">&lt;stikonas&gt;</a></span><span class="message">\r is ignored</span></div><div class="line" id="234402"><span class="nick" style="color:#6c3d55"><a href="#234402" label="[23:44:02]">&lt;stikonas&gt;</a></span><span class="message">just like \n is ignored</span></div><div class="line" id="234412"><span class="nick" style="color:#80b1d3"><a href="#234412" label="[23:44:12]">&lt;oriansj&gt;</a></span><span class="message">well UEFI shell uses \n\r but bios level programs would only get \r when the enter key is struck</span></div><div class="line" id="234429"><span class="nick" style="color:#d9d9d9"><a href="#234429" label="[23:44:29]">&lt;mihi&gt;</a></span><span class="message">\n is significant for teminating comments, and I'm not sure whether \r also does it or only in some implementations</span></div><div class="line" id="234515"><span class="nick" style="color:#d9d9d9"><a href="#234515" label="[23:45:15]">&lt;mihi&gt;</a></span><span class="message">but we have oriansj's C implementation now :)</span></div><div class="line" id="234531"><span class="nick" style="color:#2e2a4a"><a href="#234531" label="[23:45:31]">&lt;avih&gt;</a></span><span class="message">oriansj: is/can &quot;UEFI shell&quot; be used to write hex0 files, and the concern is that it will end lines with \r\n, which then might be considered invalid with strict hex0 compiler?</span></div><div class="line" id="234546"><span class="nick" style="color:#6c3d55"><a href="#234546" label="[23:45:46]">&lt;stikonas&gt;</a></span><span class="message">yes, I just checked UEFI shell adds  0D 0A even if you set ASCII (i.e. non Unicode) file</span></div><div class="line" id="234602"><span class="nick" style="color:#6c3d55"><a href="#234602" label="[23:46:02]">&lt;stikonas&gt;</a></span><span class="message">yes UEFI shell can definitely be used to write hex0 file</span></div><div class="line" id="234607"><span class="nick" style="color:#d9d9d9"><a href="#234607" label="[23:46:07]">&lt;mihi&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds/blob/master/hex0-alternatives/hex0.c#L47">https://github.com/oriansj/bootstrap-seeds/blob/master/hex0-alternatives/hex0.c#L47</a>  terminates comments at \r</span></div><div class="line" id="234621"><span class="nick" style="color:#2e2a4a"><a href="#234621" label="[23:46:21]">&lt;avih&gt;</a></span><span class="message">right, so i think strict spec should allow \r\n line endings, but not \r before a comment, yes?</span></div><div class="line" id="234638"><span class="nick" style="color:#d9d9d9"><a href="#234638" label="[23:46:38]">&lt;mihi&gt;</a></span><span class="message">fine for me</span></div><div class="line" id="234707"><span class="nick" style="color:#6c3d55"><a href="#234707" label="[23:47:07]">&lt;stikonas&gt;</a></span><span class="message">well, I guess either \r\n or \n\r</span></div><div class="line" id="234719"><span class="nick" style="color:#d9d9d9"><a href="#234719" label="[23:47:19]">&lt;mihi&gt;</a></span><span class="message">ACTION never seen \n\r :)</span></div><div class="line" id="234722"><span class="nick" style="color:#6c3d55"><a href="#234722" label="[23:47:22]">&lt;stikonas&gt;</a></span><span class="message">actually \r is also legal on some Macs</span></div><div class="line" id="234722"><span class="nick" style="color:#2e2a4a"><a href="#234722" label="[23:47:22]">&lt;avih&gt;</a></span><span class="message">and \r is allowed in a comment, even if it can lead to tricks such as abcd # \r 1234</span></div><div class="line" id="234736"><span class="nick" style="color:#6c3d55"><a href="#234736" label="[23:47:36]">&lt;stikonas&gt;</a></span><span class="message">\r is also a new line</span></div><div class="line" id="234738"><span class="nick" style="color:#2e2a4a"><a href="#234738" label="[23:47:38]">&lt;avih&gt;</a></span><span class="message">stikonas: i think \r is the &quot;old&quot; mac line ending</span></div><div class="line" id="234752"><span class="nick" style="color:#6c3d55"><a href="#234752" label="[23:47:52]">&lt;stikonas&gt;</a></span><span class="message">I think so</span></div><div class="line" id="234756"><span class="nick" style="color:#2e2a4a"><a href="#234756" label="[23:47:56]">&lt;avih&gt;</a></span><span class="message">these days \n alone is used on mac too afaik</span></div><div class="line" id="234756"><span class="nick" style="color:#6c3d55"><a href="#234756" label="[23:47:56]">&lt;stikonas&gt;</a></span><span class="message">before they switched to POSIX</span></div><div class="line" id="234810"><span class="nick" style="color:#6c3d55"><a href="#234810" label="[23:48:10]">&lt;stikonas&gt;</a></span><span class="message">ok, maybe we can ignore it</span></div><div class="line" id="234832"><span class="nick" style="color:#2e2a4a"><a href="#234832" label="[23:48:32]">&lt;avih&gt;</a></span><span class="message">ignore \r? or ignore the fact that some systems use it as EOL marker? :)</span></div><div class="line" id="234857"><span class="nick" style="color:#6c3d55"><a href="#234857" label="[23:48:57]">&lt;stikonas&gt;</a></span><span class="message">ignore the fact that some systems use it</span></div><div class="line" id="234859"><span class="nick" style="color:#6c3d55"><a href="#234859" label="[23:48:59]">&lt;stikonas&gt;</a></span><span class="message">here is the full list</span></div><div class="line" id="234900"><span class="nick" style="color:#6c3d55"><a href="#234900" label="[23:49:00]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://en.wikipedia.org/wiki/Newline">https://en.wikipedia.org/wiki/Newline</a> </span></div><div class="line" id="234905"><span class="nick" style="color:#80b1d3"><a href="#234905" label="[23:49:05]">&lt;oriansj&gt;</a></span><span class="message">Acorn BBC and RISC-OS did \n\r</span></div><div class="line" id="234913"><span class="nick" style="color:#6c3d55"><a href="#234913" label="[23:49:13]">&lt;stikonas&gt;</a></span><span class="message">we definitely don't support all of them even in loose implementation</span></div><div class="line" id="234927"><span class="nick" style="color:#6c3d55"><a href="#234927" label="[23:49:27]">&lt;stikonas&gt;</a></span><span class="message">ok, in some sense we do support it</span></div><div class="line" id="234934"><span class="nick" style="color:#6c3d55"><a href="#234934" label="[23:49:34]">&lt;stikonas&gt;</a></span><span class="message">they are just ignored</span></div><div class="line" id="235014"><span class="nick" style="color:#2e2a4a"><a href="#235014" label="[23:50:14]">&lt;avih&gt;</a></span><span class="message">&quot;the classic Mac OS, MIT Lisp Machine and OS-9&quot; &lt;- the most modern systems which use \r EOL natively. yeah, i think we can ignore it.</span></div><div class="line" id="235054"><span class="nick" style="color:#2e2a4a"><a href="#235054" label="[23:50:54]">&lt;avih&gt;</a></span><span class="message">we could simply treat \r as EOL too</span></div><div class="line" id="235055"><span class="nick" style="color:#80b1d3"><a href="#235055" label="[23:50:55]">&lt;oriansj&gt;</a></span><span class="message">well we can solve this pretty easily</span></div><div class="line" id="235130"><span class="nick" style="color:#2e2a4a"><a href="#235130" label="[23:51:30]">&lt;avih&gt;</a></span><span class="message">?</span></div><div class="line" id="235201"><span class="nick" style="color:#80b1d3"><a href="#235201" label="[23:52:01]">&lt;oriansj&gt;</a></span><span class="message">we allow loose hex0 to support system default EOL but strict hex0 to require \n</span></div><div class="line" id="235223"><span class="nick" style="color:#2e2a4a"><a href="#235223" label="[23:52:23]">&lt;avih&gt;</a></span><span class="message">ACTION likes :)</span></div><div class="line" id="235317"><span class="nick" style="color:#80b1d3"><a href="#235317" label="[23:53:17]">&lt;oriansj&gt;</a></span><span class="message">and every step after hex0 can just use SET and that'll set \n at end of line</span></div><div class="line" id="235320"><span class="nick" style="color:#6c3d55"><a href="#235320" label="[23:53:20]">&lt;stikonas&gt;</a></span><span class="message">well, loose hex0 supports everything like it does today</span></div><div class="line" id="235341"><span class="nick" style="color:#2e2a4a"><a href="#235341" label="[23:53:41]">&lt;avih&gt;</a></span><span class="message">also, i would think that in the unlikely event that someone tries to write a hex0 file using one of these machines, it should have editors/tools to convert EOL, like dos2unix does (i think it can handle old mac too)</span></div><div class="line" id="235459"><span class="nick" style="color:#2e2a4a"><a href="#235459" label="[23:54:59]">&lt;avih&gt;</a></span><span class="message">so basically, for the strict mode, \r which is not followed by \n is invalid?</span></div><div class="line" id="235511"><span class="nick" style="color:#6c3d55"><a href="#235511" label="[23:55:11]">&lt;stikonas&gt;</a></span><span class="message">I guess that's fine</span></div><div class="line" id="235539"><span class="nick" style="color:#6c3d55"><a href="#235539" label="[23:55:39]">&lt;stikonas&gt;</a></span><span class="message">that covers everything that is not a museum piece</span></div><div class="line" id="235546"><span class="nick" style="color:#2e2a4a"><a href="#235546" label="[23:55:46]">&lt;avih&gt;</a></span><span class="message">that at least covers the UEFI thing and people using notepad :)</span></div><div class="line" id="235639"><span class="nick" style="color:#d9d9d9"><a href="#235639" label="[23:56:39]">&lt;mihi&gt;</a></span><span class="message">and anything that is not \r \n \t or 20-7E is also invalid I think. Or do we need Arabic comments?</span></div><div class="line" id="235709"><span class="nick" style="color:#2e2a4a"><a href="#235709" label="[23:57:09]">&lt;avih&gt;</a></span><span class="message">?</span></div><div class="line" id="235717"><span class="nick" style="color:#6c3d55"><a href="#235717" label="[23:57:17]">&lt;stikonas&gt;</a></span><span class="message">in comments we allow more stuff I guess</span></div><div class="line" id="235718"><span class="nick" style="color:#2e2a4a"><a href="#235718" label="[23:57:18]">&lt;avih&gt;</a></span><span class="message">what's 20-7E?</span></div><div class="line" id="235723"><span class="nick" style="color:#6c3d55"><a href="#235723" label="[23:57:23]">&lt;stikonas&gt;</a></span><span class="message">ascii codes?</span></div><div class="line" id="235728"><span class="nick" style="color:#2e2a4a"><a href="#235728" label="[23:57:28]">&lt;avih&gt;</a></span><span class="message">yeah, in comment everything goes</span></div><div class="line" id="235745"><span class="nick" style="color:#2e2a4a"><a href="#235745" label="[23:57:45]">&lt;avih&gt;</a></span><span class="message">yeah, got it. i think it's some code for something</span></div><div class="line" id="235745"><span class="nick" style="color:#80b1d3"><a href="#235745" label="[23:57:45]">&lt;oriansj&gt;</a></span><span class="message">mihi: ascii only as there are way too many utf-8 and other source attacks</span></div><div class="line" id="235756"><span class="nick" style="color:#6c3d55"><a href="#235756" label="[23:57:56]">&lt;stikonas&gt;</a></span><span class="message">we are not ascii only already</span></div><div class="line" id="235757"><span class="nick" style="color:#d9d9d9"><a href="#235757" label="[23:57:57]">&lt;mihi&gt;</a></span><span class="message">do we want to allow UTF-8 in comments? Also Right-to-left-overrides?</span></div><div class="line" id="235803"><span class="nick" style="color:#6c3d55"><a href="#235803" label="[23:58:03]">&lt;stikonas&gt;</a></span><span class="message">at least due to my copyright statements</span></div><div class="line" id="235810"><span class="nick" style="color:#2e2a4a"><a href="#235810" label="[23:58:10]">&lt;avih&gt;</a></span><span class="message">well, we already said that outside of comments only hex digits, spaces and tabs are allowed</span></div><div class="line" id="235817"><span class="nick" style="color:#2e2a4a"><a href="#235817" label="[23:58:17]">&lt;avih&gt;</a></span><span class="message">so that's inside ASCII7 by definition</span></div><div class="line" id="235905"><span class="nick" style="color:#2e2a4a"><a href="#235905" label="[23:59:05]">&lt;avih&gt;</a></span><span class="message">IMO in a comment anything goes, except \r which is not followed by \n</span></div><br /></div></body></html>