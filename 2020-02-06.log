<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-02-06.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000133"><span class="nick" style="color:#389600"><a href="#000133" label="[00:01:33]">&lt;Hagfish&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/aep/zz">https://github.com/aep/zz</a> </span></div><div class="line" id="000143"><span class="nick" style="color:#389600"><a href="#000143" label="[00:01:43]">&lt;Hagfish&gt;</a></span><span class="message">&quot;ZZ (drunk octopus) a rust inspired transpiler and symbolic verifier to bare metal C&quot;</span></div><div class="line" id="000218"><span class="nick" style="color:#389600"><a href="#000218" label="[00:02:18]">&lt;Hagfish&gt;</a></span><span class="message">that seems extremely clever, although i don't know enough about C to know whether it is actually useful</span></div><div class="line" id="002255"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado</span></div><div class="line" id="012130"><span class="nick">***</span><span class="message notice">duncanm_ is now known as duncanm</span></div><div class="line" id="013204"><span class="nick" style="color:#2e2a4a"><a href="#013204" label="[01:32:04]">&lt;oriansj&gt;</a></span><span class="message">dddddd: well that haskell compiler looks promising; provided they keep up the work they might end up solving the ghc problem for us</span></div><div class="line" id="013311"><span class="nick" style="color:#2e2a4a"><a href="#013311" label="[01:33:11]">&lt;oriansj&gt;</a></span><span class="message">I however am insanely tired of the only x lines of code argument about bootstrapping. 500 lines of C, lisp and FORTH are in no way compariable in terms of bootstrapping difficulty</span></div><div class="line" id="014543"><span class="nick" style="color:#2e2a4a"><a href="#014543" label="[01:45:43]">&lt;oriansj&gt;</a></span><span class="message">just purge the line comments from M2-Planet and it is a single line program. :rolleyes:</span></div><div class="line" id="015508"><span class="nick" style="color:#2e2a4a"><a href="#015508" label="[01:55:08]">&lt;oriansj&gt;</a></span><span class="message">also it appears to depend upon gforth, clang and docker</span></div><div class="line" id="015657"><span class="nick" style="color:#2e2a4a"><a href="#015657" label="[01:56:57]">&lt;oriansj&gt;</a></span><span class="message">now if I was being extra ironic, demonstrate the trusting trust attack by making a version of M2-Planet that only has zero lines of code in its bootstrap.</span></div><div class="line" id="015932"><span class="nick" style="color:#2e2a4a"><a href="#015932" label="[01:59:32]">&lt;oriansj&gt;</a></span><span class="message">Now if he wrote seed-forth in assembly, or M1 (hell I'd even given credit if it was in M2-Planet) I would celebrate his success; however bootstrapping from a program that is bigger than 50MB means your bootstrap binaries is larger than guix's.</span></div><div class="line" id="020319"><span class="nick" style="color:#2e2a4a"><a href="#020319" label="[02:03:19]">&lt;oriansj&gt;</a></span><span class="message">Further assuming that 2KB is staticly linked and no other libraries are depended upon. (x86/cc_x86 is 14,446bytes and was written in 24hours) he should be able to reduce his bootstrap to just NASM or M1 in less than a day; then it might be worth incorporating.</span></div><div class="line" id="021112"><span class="nick" style="color:#2e2a4a"><a href="#021112" label="[02:11:12]">&lt;oriansj&gt;</a></span><span class="message">NOPE, super dynamically linking; depends upon glibc and multiple prebuild libraries.</span></div><div class="line" id="021554"><span class="nick" style="color:#2e2a4a"><a href="#021554" label="[02:15:54]">&lt;oriansj&gt;</a></span><span class="message">look stage0's forth is 4,372bytes and 1506 lines long and supports most of seed-forth; with minimal effort it can be made into a seed-forth and will be trivial to port to other architectures (just translate the functions one by one). Let us assume it is done and he has it; what useful bootstrapping thing will we have?</span></div><div class="line" id="021711"><span class="nick" style="color:#2e2a4a"><a href="#021711" label="[02:17:11]">&lt;oriansj&gt;</a></span><span class="message">at least with mes.c (~500lines of &quot;simple C&quot;) janneke wrote MesCC and did something useful in terms of real bootstrapping.</span></div><div class="line" id="023936"><span class="nick" style="color:#2e2a4a"><a href="#023936" label="[02:39:36]">&lt;oriansj&gt;</a></span><span class="message">atleast jones FORTH had the fucking balls to be written in assembly (macro'd to all hell assembly but assembly none the less); which if you didn't know is what stage0's FORTH is (jones FORTH translated into M0)</span></div><div class="line" id="024019"><span class="nick" style="color:#2e2a4a"><a href="#024019" label="[02:40:19]">&lt;oriansj&gt;</a></span><span class="message">hell I even give lisp the win for actually bootstrapping GCC.</span></div><div class="line" id="024137"><span class="nick" style="color:#2e2a4a"><a href="#024137" label="[02:41:37]">&lt;oriansj&gt;</a></span><span class="message">instead of being smug and talking about how minimal their shit was; lisp programmers (janneke to be precise) actually got their shit together and did the freaking work to deliver a non-trivial result.</span></div><div class="line" id="024329"><span class="nick" style="color:#2e2a4a"><a href="#024329" label="[02:43:29]">&lt;oriansj&gt;</a></span><span class="message">if that FORTH could build mes.c or tcc or anyting of value in bootstrapping; it would be really freaking useful; but no, it depends upon a bootstrap bigger than freaking guix and it doesn't deliver anything beyound a FORTH less useful than GFORTH (which it freaking depends upon)</span></div><div class="line" id="024935"><span class="nick" style="color:#2e2a4a"><a href="#024935" label="[02:49:35]">&lt;oriansj&gt;</a></span><span class="message">sorry dddddd for ranting for so long but I am just so freaking tired of language fetishism. I no longer care about language, I care about what they can do of value. Assembly the results are obviously useful. C the results are obviously useful. Scheme (thanks to guix, guile and MesCC) the results are obviously useful (just don't try to write it in anything lower than C; you'll lose 9months of your life like I did). FORTH: ummm I'm cool I</span></div><div class="line" id="024935"><span class="nick" style="color:#2e2a4a"><a href="#024935" label="[02:49:35]">&lt;oriansj&gt;</a></span><span class="message">swear trust me (thanks for wasting 4months of my life)</span></div><div class="line" id="025141"><span class="nick" style="color:#2e2a4a"><a href="#025141" label="[02:51:41]">&lt;oriansj&gt;</a></span><span class="message">Hagfish: to your question; it has potential but until anyone does anything of value in it, assume it is another experiment in programming language that end up not being worth the effort (Rust is barely beginning to show they might be past that phase)</span></div><div class="line" id="025804"><span class="nick" style="color:#2e2a4a"><a href="#025804" label="[02:58:04]">&lt;oriansj&gt;</a></span><span class="message">dddddd: and thank you for the fix, I appreciate it</span></div><div class="line" id="065053"><span class="nick" style="color:#6b8072"><a href="#065053" label="[06:50:53]">&lt;janneke&gt;</a></span><span class="message">oriansj: thank you</span></div><div class="line" id="065126"><span class="nick" style="color:#6b8072"><a href="#065126" label="[06:51:26]">&lt;janneke&gt;</a></span><span class="message">i like getting things to work, although that's often just a first step</span></div><div class="line" id="110651"><span class="nick" style="color:#2e2a4a"><a href="#110651" label="[11:06:51]">&lt;oriansj&gt;</a></span><span class="message">speaking of which janneke what is the plan to reduce guix and finally close the gap?</span></div><div class="line" id="150307"><span class="nick" style="color:#80b1d3"><a href="#150307" label="[15:03:07]">&lt;dddddd&gt;</a></span><span class="message">Sorry for firing those bad feelings, oriansj. A good informed rant is good, also serves as escape valve (instead of burning you from the inside). I guess docker is just an option but you're right about the need of a HOSTFORTH, I missed that. I was hoping that their preforth were more low-level. Anyway, implementation details aside, I guess the identification of a minimal subset (and how to grow it) is their contribution. Eventualy one can</span></div><div class="line" id="150307"><span class="nick" style="color:#80b1d3"><a href="#150307" label="[15:03:07]">&lt;dddddd&gt;</a></span><span class="message">reimplement from the metal.</span></div><div class="line" id="150314"><span class="nick" style="color:#80b1d3"><a href="#150314" label="[15:03:14]">&lt;dddddd&gt;</a></span><span class="message">Thanks for your insights.</span></div><div class="line" id="151002"><span class="nick" style="color:#80b1d3"><a href="#151002" label="[15:10:02]">&lt;dddddd&gt;</a></span><span class="message">The recording from janneke's talk is still not available, but many other are. It happens, the one you want more, the later it comes :P</span></div><div class="line" id="153144"><span class="nick" style="color:#6b8072"><a href="#153144" label="[15:31:44]">&lt;janneke&gt;</a></span><span class="message">oriansj: you have seen my ugly prototype of mes-m2 merger/rewrite into mes hack, just before mes-m2 made radical changes to boot-0, tests and slow_lisp</span></div><div class="line" id="153216"><span class="nick" style="color:#6b8072"><a href="#153216" label="[15:32:16]">&lt;janneke&gt;</a></span><span class="message">the first poc will off course use that</span></div><div class="line" id="153323"><span class="nick" style="color:#6b8072"><a href="#153323" label="[15:33:23]">&lt;janneke&gt;</a></span><span class="message">meanwhile i will start looking at how to merge your work since the past ~4months</span></div><div class="line" id="154114"><span class="nick" style="color:#6d2462"><a href="#154114" label="[15:41:14]">&lt;civodul&gt;</a></span><span class="message">and there's the wip-bootstrap branch (&quot;full Scheme&quot;) that's also pretty exciting!</span></div><div class="line" id="155144"><span class="nick" style="color:#6b8072"><a href="#155144" label="[15:51:44]">&lt;janneke&gt;</a></span><span class="message">civodul: sure, that's my current focus; oriansj was asking about my fsb plans</span></div><div class="line" id="155236"><span class="nick" style="color:#6b8072"><a href="#155236" label="[15:52:36]">&lt;janneke&gt;</a></span><span class="message">civodul: i'm currently looking why my new, rebased wip-bootstrap needs two ugly, long 'setenv stanzas re-inserted that you managed to remove on core-updates</span></div><div class="line" id="160456"><span class="nick" style="color:#234e69"><a href="#160456" label="[16:04:56]">&lt;NieDzejkob&gt;</a></span><span class="message">So, what's the story with ML bootstrap? Is anybody working on a bootstrappable ML compiler?</span></div><div class="line" id="163407"><span class="nick" style="color:#6c3d55"><a href="#163407" label="[16:34:07]">&lt;rain1&gt;</a></span><span class="message">sorry NieDzejkob not sure</span></div><div class="line" id="163410"><span class="nick" style="color:#6c3d55"><a href="#163410" label="[16:34:10]">&lt;rain1&gt;</a></span><span class="message">we looked into ocaml and cakeml a bit</span></div><div class="line" id="163424"><span class="nick" style="color:#6c3d55"><a href="#163424" label="[16:34:24]">&lt;rain1&gt;</a></span><span class="message">there was some really good progress on ocaml</span></div><div class="line" id="163445"><span class="nick" style="color:#6c3d55"><a href="#163445" label="[16:34:45]">&lt;rain1&gt;</a></span><span class="message">the SMLs seem like they would be a lot harder to deal with to me</span></div><div class="line" id="163454"><span class="nick" style="color:#d9d9d9"><a href="#163454" label="[16:34:54]">&lt;xentrac&gt;</a></span><span class="message">why harder?</span></div><div class="line" id="163458"><span class="nick" style="color:#234e69"><a href="#163458" label="[16:34:58]">&lt;NieDzejkob&gt;</a></span><span class="message">okay, I guess I'll look into SML</span></div><div class="line" id="163542"><span class="nick" style="color:#6c3d55"><a href="#163542" label="[16:35:42]">&lt;rain1&gt;</a></span><span class="message">they tend to be self hosted without much thought of building in terms of a small core</span></div><div class="line" id="163700"><span class="nick" style="color:#d9d9d9"><a href="#163700" label="[16:37:00]">&lt;xentrac&gt;</a></span><span class="message">ah</span></div><div class="line" id="165806"><span class="nick" style="color:#bc80bd"><a href="#165806" label="[16:58:06]">&lt;jackhill&gt;</a></span><span class="message">NieDzejkob: you might find this thread interesting: <a rel="nofollow" href="https://lists.gnu.org/archive/html/guix-devel/2019-12/msg00177.html">https://lists.gnu.org/archive/html/guix-devel/2019-12/msg00177.html</a>  because of MLs us in the formal methods community. There are at least people interested in it.</span></div><div class="line" id="175717"><span class="nick" style="color:#6b8072"><a href="#175717" label="[17:57:17]">&lt;janneke&gt;</a></span><span class="message">civodul: on wip-bootstrap that i intend to rebase+rewrite after you update core-updates, shall i change all the 'bootstrap: ' prefix in commit messages to 'gnu: commencement: '?  you were using that and i liked it better</span></div><div class="line" id="180146"><span class="nick" style="color:#6d2462"><a href="#180146" label="[18:01:46]">&lt;civodul&gt;</a></span><span class="message">janneke: sure, i think that's what i've been using in the past</span></div><div class="line" id="180211"><span class="nick" style="color:#6d2462"><a href="#180211" label="[18:02:11]">&lt;civodul&gt;</a></span><span class="message">&quot;gnu:&quot; is for (gnu packages), and then, i either write &quot;PACKAGE: &quot; or &quot;CATEGORY: &quot;</span></div><div class="line" id="180220"><span class="nick" style="color:#6d2462"><a href="#180220" label="[18:02:20]">&lt;civodul&gt;</a></span><span class="message">that's the rough idea :-)</span></div><div class="line" id="182233"><span class="nick" style="color:#6b8072"><a href="#182233" label="[18:22:33]">&lt;janneke&gt;</a></span><span class="message">civodul: good; the reviewers must have been quite lenient towards me in the past ;-)</span></div><div class="line" id="182504"><span class="nick" style="color:#6d2462"><a href="#182504" label="[18:25:04]">&lt;civodul&gt;</a></span><span class="message">janneke: getting commit logs right is considered less important than getting bootstrapping right, i guess :-)</span></div><div class="line" id="183855"><span class="nick" style="color:#2e2a4a"><a href="#183855" label="[18:38:55]">&lt;oriansj&gt;</a></span><span class="message">dddddd, I made a recording of janneke's talk and I could possibly share if you wanted</span></div><div class="line" id="184638"><span class="nick" style="color:#6d2462"><a href="#184638" label="[18:46:38]">&lt;civodul&gt;</a></span><span class="message">speaking of which, do you know why there's no video for your talk, janneke ?</span></div><div class="line" id="184708"><span class="nick" style="color:#2e2a4a"><a href="#184708" label="[18:47:08]">&lt;oriansj&gt;</a></span><span class="message">janneke: well, I must admit that my merger  of our two branches of mes-m2 being a slow process is entirely my fault of ambition. I want mes-m2 to solve the guix and guile bootstrap problems.</span></div><div class="line" id="184918"><span class="nick" style="color:#2e2a4a"><a href="#184918" label="[18:49:18]">&lt;oriansj&gt;</a></span><span class="message">I was hoping that once slow-utils finishes; mescc could just leverage a statically compiled guile and guix could be reduced to a single binary bootstrap.</span></div><div class="line" id="185020"><span class="nick" style="color:#2e2a4a"><a href="#185020" label="[18:50:20]">&lt;oriansj&gt;</a></span><span class="message">after which the mes-m2 work will slowly grow until it becomes a drop in solution and we will be done</span></div><div class="line" id="190212"><span class="nick" style="color:#2e2a4a"><a href="#190212" label="[19:02:12]">&lt;oriansj&gt;</a></span><span class="message">but now that mescc-tools has been fuzzed to hell and segment faults have been largely eliminated (12 hour fuzzing runs turning up nothing); M2-Planet finally on AArch64 (because dddddd is awesome) and now all of the architectures now have atleast 1 cc_* written (making future porting work easier). There are no excuses left for me not to focus on mes-m2 becoming a full scheme capable of running gash, guile bootstrap, guix and MesCC tools</span></div><div class="line" id="190212"><span class="nick" style="color:#2e2a4a"><a href="#190212" label="[19:02:12]">&lt;oriansj&gt;</a></span><span class="message">(and not in that order).</span></div><div class="line" id="201420"><span class="nick" style="color:#2e2a4a"><a href="#201420" label="[20:14:20]">&lt;oriansj&gt;</a></span><span class="message">Please criticise everything about that plan you think could be better.</span></div><div class="line" id="201443"><span class="nick" style="color:#2e2a4a"><a href="#201443" label="[20:14:43]">&lt;oriansj&gt;</a></span><span class="message">&gt;open question to everyone&lt;</span></div><div class="line" id="202929"><span class="nick" style="color:#3c5b35"><a href="#202929" label="[20:29:29]">&lt;fossy&gt;</a></span><span class="message">oriansj: for the most part I agree, mes-m2 should be the focus right now. Its pretty much the missing part and the other parts are mostly complete. IMO the dev plan for mes-m2 should go 1. Make mescc run 2. Make gash run 3. Make guix run/guile bootstrap. Either is ok, because guile bootstrap will essentially allow guix to use guile. But if one is easier than the other I would do that first.</span></div><div class="line" id="202945"><span class="nick" style="color:#3c5b35"><a href="#202945" label="[20:29:45]">&lt;fossy&gt;</a></span><span class="message">In terms of the full scheme bootstrap in this</span></div><div class="line" id="202951"><span class="nick" style="color:#3c5b35"><a href="#202951" label="[20:29:51]">&lt;fossy&gt;</a></span><span class="message">guix*</span></div><div class="line" id="203029"><span class="nick" style="color:#3c5b35"><a href="#203029" label="[20:30:29]">&lt;fossy&gt;</a></span><span class="message">I do not think it is too far fetched to only have the single guile binary. Mes may be needed since I found it impossible to get guile to run mescc.</span></div><div class="line" id="203138"><span class="nick" style="color:#3c5b35"><a href="#203138" label="[20:31:38]">&lt;fossy&gt;</a></span><span class="message">however my what I am now calling gcc-seed (fork of mescc tools seed) that works up to GCC 9 toolchain, is using guile and mes. Once mes m2 can run mescc and gash, we will have a complete bootstrap.</span></div><div class="line" id="203229"><span class="nick" style="color:#3c5b35"><a href="#203229" label="[20:32:29]">&lt;fossy&gt;</a></span><span class="message">Actually, not even gash, if I can get kaem into a reasonable state.... Leads me to another question, how far should I develop kaem?</span></div><div class="line" id="203245"><span class="nick" style="color:#3c5b35"><a href="#203245" label="[20:32:45]">&lt;fossy&gt;</a></span><span class="message">Do we want to not need gash and be able to just use kaem up to make?</span></div><div class="line" id="203302"><span class="nick" style="color:#2e2a4a"><a href="#203302" label="[20:33:02]">&lt;oriansj&gt;</a></span><span class="message">so you are thinking having janneke make using MesCC on Guile easier is a good priority?</span></div><div class="line" id="203303"><span class="nick" style="color:#3c5b35"><a href="#203303" label="[20:33:03]">&lt;fossy&gt;</a></span><span class="message">IMO, thats probably a waste of time</span></div><div class="line" id="203351"><span class="nick" style="color:#3c5b35"><a href="#203351" label="[20:33:51]">&lt;fossy&gt;</a></span><span class="message">oriansj: not in the long term. For the full scheme bootstrap yes, but the work will quickly become obosolete when mes m2 is done</span></div><div class="line" id="203359"><span class="nick" style="color:#3c5b35"><a href="#203359" label="[20:33:59]">&lt;fossy&gt;</a></span><span class="message">&quot;Done&quot;</span></div><div class="line" id="203504"><span class="nick" style="color:#2e2a4a"><a href="#203504" label="[20:35:04]">&lt;oriansj&gt;</a></span><span class="message">well not entirely as waste as being more scheme agnostic and friendly would help MesCC in the long term</span></div><div class="line" id="203540"><span class="nick" style="color:#3c5b35"><a href="#203540" label="[20:35:40]">&lt;fossy&gt;</a></span><span class="message">I havent been here for long and I guess where to go from here is directly related to what our goal is</span></div><div class="line" id="203607"><span class="nick" style="color:#3c5b35"><a href="#203607" label="[20:36:07]">&lt;fossy&gt;</a></span><span class="message">If our goal is to have a full bootstrap then getting mes-m2 to run mescc and gash should be the priority</span></div><div class="line" id="203644"><span class="nick" style="color:#3c5b35"><a href="#203644" label="[20:36:44]">&lt;fossy&gt;</a></span><span class="message">If our goal is to make guix into a full bootstrap then getting from mes m2 to guix is likely the priority</span></div><div class="line" id="203647"><span class="nick" style="color:#3c5b35"><a href="#203647" label="[20:36:47]">&lt;fossy&gt;</a></span><span class="message">o</span></div><div class="line" id="203708"><span class="nick" style="color:#3c5b35"><a href="#203708" label="[20:37:08]">&lt;fossy&gt;</a></span><span class="message">oriansj: &lt;fossy&gt; IMO, thats probably a waste of time was RE: &lt;fossy&gt; Do we want to not need gash and be able to just use kaem up to make?</span></div><div class="line" id="203854"><span class="nick" style="color:#2e2a4a"><a href="#203854" label="[20:38:54]">&lt;oriansj&gt;</a></span><span class="message">well it is possible to get kaem able to make make. Which reduce our dependence on the success of guix in the bootstrap</span></div><div class="line" id="203943"><span class="nick" style="color:#2e2a4a"><a href="#203943" label="[20:39:43]">&lt;oriansj&gt;</a></span><span class="message">but it would have to be done by someone  who thinks it would be a fun project.</span></div><div class="line" id="204056"><span class="nick" style="color:#2e2a4a"><a href="#204056" label="[20:40:56]">&lt;oriansj&gt;</a></span><span class="message">as it would be some work</span></div><div class="line" id="204937"><span class="nick" style="color:#af8d2f"><a href="#204937" label="[20:49:37]">*</a></span><span class="message">fossy is the person who thinks it'd be a fun project</span></div><div class="line" id="204951"><span class="nick" style="color:#3c5b35"><a href="#204951" label="[20:49:51]">&lt;fossy&gt;</a></span><span class="message">however a /more/ fun project for me is removing guix from the bootstrap</span></div><div class="line" id="204955"><span class="nick" style="color:#3c5b35"><a href="#204955" label="[20:49:55]">&lt;fossy&gt;</a></span><span class="message">no offense to guix</span></div><div class="line" id="205002"><span class="nick" style="color:#3c5b35"><a href="#205002" label="[20:50:02]">&lt;fossy&gt;</a></span><span class="message">but i want to be able to bootstrap my comptuers without guix</span></div><div class="line" id="205015"><span class="nick" style="color:#3c5b35"><a href="#205015" label="[20:50:15]">&lt;fossy&gt;</a></span><span class="message">i don't want to remove scheme.. just guix</span></div><div class="line" id="205022"><span class="nick" style="color:#3c5b35"><a href="#205022" label="[20:50:22]">&lt;fossy&gt;</a></span><span class="message">which is waht gcc-seed is trying to do</span></div><div class="line" id="205035"><span class="nick" style="color:#6c3d55"><a href="#205035" label="[20:50:35]">&lt;rain1&gt;</a></span><span class="message">i havent heard of gcc-seed</span></div><div class="line" id="205038"><span class="nick" style="color:#6c3d55"><a href="#205038" label="[20:50:38]">&lt;rain1&gt;</a></span><span class="message">is there a link for it?</span></div><div class="line" id="205334"><span class="nick" style="color:#6b8072"><a href="#205334" label="[20:53:34]">&lt;janneke&gt;</a></span><span class="message">fossy: no offence taken; guix was never meant to be a dependency of the full source bootstrap</span></div><div class="line" id="205428"><span class="nick" style="color:#3c5b35"><a href="#205428" label="[20:54:28]">&lt;fossy&gt;</a></span><span class="message">rain1: its my project i'm doing, extending mescc-tools-seed to bootstrap gcc</span></div><div class="line" id="205430"><span class="nick" style="color:#3c5b35"><a href="#205430" label="[20:54:30]">&lt;fossy&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/gcc-seed">https://github.com/fosslinux/gcc-seed</a> </span></div><div class="line" id="205440"><span class="nick" style="color:#3c5b35"><a href="#205440" label="[20:54:40]">&lt;fossy&gt;</a></span><span class="message">it is v v v bad right now</span></div><div class="line" id="205443"><span class="nick" style="color:#6b8072"><a href="#205443" label="[20:54:43]">&lt;janneke&gt;</a></span><span class="message">oriansj: please don't feel bad about anything; for 0.19 i merged a lot of your work (snarfing, cyclic include, mes_open, etc)</span></div><div class="line" id="205451"><span class="nick" style="color:#3c5b35"><a href="#205451" label="[20:54:51]">&lt;fossy&gt;</a></span><span class="message">and i need to clean it up a /lot/</span></div><div class="line" id="205501"><span class="nick" style="color:#3c5b35"><a href="#205501" label="[20:55:01]">&lt;fossy&gt;</a></span><span class="message">because TinyCC is a very poorly coded piece of software</span></div><div class="line" id="205529"><span class="nick" style="color:#6c3d55"><a href="#205529" label="[20:55:29]">&lt;rain1&gt;</a></span><span class="message">fossy: cool I will check it out. have you see gio's ASMC OS?</span></div><div class="line" id="205530"><span class="nick" style="color:#3c5b35"><a href="#205530" label="[20:55:30]">&lt;fossy&gt;</a></span><span class="message">the hacks i had to do to get TinyCC non-prefixed and work &quot;everywhere&quot;</span></div><div class="line" id="205539"><span class="nick" style="color:#6b8072"><a href="#205539" label="[20:55:39]">&lt;janneke&gt;</a></span><span class="message">oriansj: it will take some time before i get to the previous pre-slow_lisp merger: first the scheme-only bootstrap</span></div><div class="line" id="205544"><span class="nick" style="color:#3c5b35"><a href="#205544" label="[20:55:44]">&lt;fossy&gt;</a></span><span class="message">rain1: No I havent.</span></div><div class="line" id="205552"><span class="nick" style="color:#6b8072"><a href="#205552" label="[20:55:52]">&lt;janneke&gt;</a></span><span class="message">oriansj: arm work has just re-started</span></div><div class="line" id="205558"><span class="nick" style="color:#3c5b35"><a href="#205558" label="[20:55:58]">&lt;fossy&gt;</a></span><span class="message">the idea is that gcc-seed would ideally be build from an initramfs</span></div><div class="line" id="205609"><span class="nick" style="color:#3c5b35"><a href="#205609" label="[20:56:09]">&lt;fossy&gt;</a></span><span class="message">rain1: link?</span></div><div class="line" id="205613"><span class="nick" style="color:#6c3d55"><a href="#205613" label="[20:56:13]">&lt;rain1&gt;</a></span><span class="message"> <a rel="nofollow" href="https://gitlab.com/giomasce/asmc">https://gitlab.com/giomasce/asmc</a> </span></div><div class="line" id="205754"><span class="nick" style="color:#3c5b35"><a href="#205754" label="[20:57:54]">&lt;fossy&gt;</a></span><span class="message">rain1: very interesting!</span></div><div class="line" id="205825"><span class="nick" style="color:#3c5b35"><a href="#205825" label="[20:58:25]">&lt;fossy&gt;</a></span><span class="message">oh, also AMD64 is b0rked on gcc-seed</span></div><div class="line" id="205830"><span class="nick" style="color:#3c5b35"><a href="#205830" label="[20:58:30]">&lt;fossy&gt;</a></span><span class="message">because flipping tinycc</span></div><div class="line" id="210627"><span class="nick" style="color:#80b1d3"><a href="#210627" label="[21:06:27]">&lt;dddddd&gt;</a></span><span class="message">Oh, I also missed your repo, fossy. I see the goal of getting to gcc as the more broadly applicable one.</span></div><div class="line" id="211141"><span class="nick" style="color:#6b8072"><a href="#211141" label="[21:11:41]">&lt;janneke&gt;</a></span><span class="message">fossy: guix just was the first distribution to declare minimalistic bootstrap seeds to be an important goal</span></div><div class="line" id="212817"><span class="nick" style="color:#389600"><a href="#212817" label="[21:28:17]">&lt;Hagfish&gt;</a></span><span class="message">gcc-seed sounds great, and anything that can be gained from asmc will only make it better</span></div><div class="line" id="213334"><span class="nick" style="color:#2e2a4a"><a href="#213334" label="[21:33:34]">&lt;oriansj&gt;</a></span><span class="message">indeed, we all can help each other achieve our successes</span></div><div class="line" id="214448"><span class="nick" style="color:#d9d9d9"><a href="#214448" label="[21:44:48]">&lt;xentrac&gt;</a></span><span class="message">fossy: that's interesting; what aspects of TinyCC are coded very poorly?</span></div><div class="line" id="214543"><span class="nick" style="color:#2e2a4a"><a href="#214543" label="[21:45:43]">&lt;oriansj&gt;</a></span><span class="message">xentrac: ever try to build tcc without make?</span></div><div class="line" id="214638"><span class="nick" style="color:#2e2a4a"><a href="#214638" label="[21:46:38]">&lt;oriansj&gt;</a></span><span class="message">or perhaps as a single shell command?</span></div><div class="line" id="214646"><span class="nick" style="color:#3c5b35"><a href="#214646" label="[21:46:46]">&lt;fossy&gt;</a></span><span class="message">^^^^</span></div><div class="line" id="214737"><span class="nick" style="color:#2e2a4a"><a href="#214737" label="[21:47:37]">&lt;oriansj&gt;</a></span><span class="message">note this even occurs if you use gcc or clang</span></div><div class="line" id="214749"><span class="nick">***</span><span class="message notice">deesix_ is now known as deesix</span></div><div class="line" id="214844"><span class="nick" style="color:#2e2a4a"><a href="#214844" label="[21:48:44]">&lt;oriansj&gt;</a></span><span class="message">what happens until you stumble into the magic ordering? oh yeah it refuses to freaking build</span></div><div class="line" id="214914"><span class="nick" style="color:#d9d9d9"><a href="#214914" label="[21:49:14]">&lt;xentrac&gt;</a></span><span class="message">no, just otcc</span></div><div class="line" id="214934"><span class="nick" style="color:#2e2a4a"><a href="#214934" label="[21:49:34]">&lt;oriansj&gt;</a></span><span class="message">(Hence why I want MesCC to grow until it can build gcc directly)</span></div><div class="line" id="214938"><span class="nick" style="color:#d9d9d9"><a href="#214938" label="[21:49:38]">&lt;xentrac&gt;</a></span><span class="message">are you saying you think its build system is poorly thought out?</span></div><div class="line" id="215028"><span class="nick" style="color:#2e2a4a"><a href="#215028" label="[21:50:28]">&lt;oriansj&gt;</a></span><span class="message">I'm saying the coding skill level involved has dropped over th years</span></div><div class="line" id="215152"><span class="nick" style="color:#d9d9d9"><a href="#215152" label="[21:51:52]">&lt;xentrac&gt;</a></span><span class="message">that seems almost tautological in this case</span></div><div class="line" id="215207"><span class="nick" style="color:#d9d9d9"><a href="#215207" label="[21:52:07]">&lt;xentrac&gt;</a></span><span class="message">but what are the indicators you see of that?</span></div><div class="line" id="215224"><span class="nick" style="color:#2e2a4a"><a href="#215224" label="[21:52:24]">&lt;oriansj&gt;</a></span><span class="message">no C compiler should demand as many C features as it provides</span></div><div class="line" id="215414"><span class="nick" style="color:#2e2a4a"><a href="#215414" label="[21:54:14]">&lt;oriansj&gt;</a></span><span class="message">janneke had to literally change implementation details to fix that in TCC</span></div><div class="line" id="215452"><span class="nick" style="color:#2e2a4a"><a href="#215452" label="[21:54:52]">&lt;oriansj&gt;</a></span><span class="message">otherwise janneke would have implemented all the feature to build GCC directly</span></div><div class="line" id="215803"><span class="nick" style="color:#2e2a4a"><a href="#215803" label="[21:58:03]">&lt;oriansj&gt;</a></span><span class="message">which you know is probably a good idea at this point as it will significantly reduce the bootstrap chain</span></div><div class="line" id="215900"><span class="nick" style="color:#2e2a4a"><a href="#215900" label="[21:59:00]">&lt;oriansj&gt;</a></span><span class="message">not a huge rush at this point as guix allows the hiding of insane levels of complexity</span></div><div class="line" id="220216"><span class="nick" style="color:#2e2a4a"><a href="#220216" label="[22:02:16]">&lt;oriansj&gt;</a></span><span class="message">as fossy has been discovering by converting the guix steps to shell (and one of the reasons why kaem improvements are key to guix free init bootstrap)</span></div><div class="line" id="221756"><span class="nick" style="color:#2e2a4a"><a href="#221756" label="[22:17:56]">&lt;oriansj&gt;</a></span><span class="message">fossy: looking at your reduced kaem, I think I have a way to make it even smaller</span></div><div class="line" id="221805"><span class="nick" style="color:#3c5b35"><a href="#221805" label="[22:18:05]">&lt;fossy&gt;</a></span><span class="message">oriansj: yes?</span></div><div class="line" id="221818"><span class="nick" style="color:#3c5b35"><a href="#221818" label="[22:18:18]">&lt;fossy&gt;</a></span><span class="message">make sure you are looking at minimal-debug branch not minimal</span></div><div class="line" id="221833"><span class="nick" style="color:#3c5b35"><a href="#221833" label="[22:18:33]">&lt;fossy&gt;</a></span><span class="message">Minimal has some very weird errors</span></div><div class="line" id="221836"><span class="nick" style="color:#2e2a4a"><a href="#221836" label="[22:18:36]">&lt;oriansj&gt;</a></span><span class="message">drop the need for -f; just assume anything passed is a filename</span></div><div class="line" id="221919"><span class="nick" style="color:#2e2a4a"><a href="#221919" label="[22:19:19]">&lt;oriansj&gt;</a></span><span class="message">which limits you to 1 argument</span></div><div class="line" id="221944"><span class="nick" style="color:#3c5b35"><a href="#221944" label="[22:19:44]">&lt;fossy&gt;</a></span><span class="message">Good idea</span></div><div class="line" id="221947"><span class="nick" style="color:#3c5b35"><a href="#221947" label="[22:19:47]">&lt;fossy&gt;</a></span><span class="message">I will do that</span></div><div class="line" id="222059"><span class="nick" style="color:#2e2a4a"><a href="#222059" label="[22:20:59]">&lt;oriansj&gt;</a></span><span class="message">also skip the error message and just exit(EXIT_FAILURE) as we have it as default verbose</span></div><div class="line" id="222502"><span class="nick" style="color:#2e2a4a"><a href="#222502" label="[22:25:02]">&lt;oriansj&gt;</a></span><span class="message">we can also move everything from execute_commands into main to save a function call and then replace the outer while with a goto which will also be smaller</span></div><div class="line" id="223346"><span class="nick" style="color:#2e2a4a"><a href="#223346" label="[22:33:46]">&lt;oriansj&gt;</a></span><span class="message">although I would include the kaem-optional-seed build steps and source in mescc-tools-seed (even if the steps are commented out) so that if anyone asks about the 5KB blob, we can say uncomment this and you'll build it yourself.</span></div><div class="line" id="223604"><span class="nick" style="color:#2e2a4a"><a href="#223604" label="[22:36:04]">&lt;oriansj&gt;</a></span><span class="message">also AMD64 can leverage the same binary as it can run x86 binaries too</span></div><div class="line" id="223733"><span class="nick" style="color:#2e2a4a"><a href="#223733" label="[22:37:33]">&lt;oriansj&gt;</a></span><span class="message">but it looks like you already did that that last one</span></div><div class="line" id="223741"><span class="nick" style="color:#2e2a4a"><a href="#223741" label="[22:37:41]">&lt;oriansj&gt;</a></span><span class="message">&gt;.&lt; my bad</span></div><br /></div></body></html>