<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-01-22.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000402"><span class="nick" style="color:#389600"><a href="#000402" label="[00:04:02]">&lt;alMalsamo&gt;</a></span><span class="message">Is Musl used anywhere in the live-bootstrap process?</span></div><div class="line" id="014610"><span class="nick" style="color:#2e2a4a"><a href="#014610" label="[01:46:10]">&lt;oriansj&gt;</a></span><span class="message">alMalsamo: did you not look at the steps? <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst">https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst</a> </span></div><div class="line" id="022123"><span class="nick" style="color:#6b8072"><a href="#022123" label="[02:21:23]">&lt;stikonas&gt;</a></span><span class="message">alMalsamo: indeed, musl is used in most of the live-bootstrap process</span></div><div class="line" id="022133"><span class="nick" style="color:#6b8072"><a href="#022133" label="[02:21:33]">&lt;stikonas&gt;</a></span><span class="message">we build it quite early with tcc</span></div><div class="line" id="022254"><span class="nick" style="color:#6b8072"><a href="#022254" label="[02:22:54]">&lt;stikonas&gt;</a></span><span class="message">on the other hand, guix bootstrap does not use musl but it's not as rigorous in terms of pre-generated files</span></div><div class="line" id="022424"><span class="nick" style="color:#6b8072"><a href="#022424" label="[02:24:24]">&lt;stikonas&gt;</a></span><span class="message">alMalsamo: before musl we only have meslibc</span></div><div class="line" id="022437"><span class="nick" style="color:#6b8072"><a href="#022437" label="[02:24:37]">&lt;stikonas&gt;</a></span><span class="message">it's a much smaller libc</span></div><div class="line" id="022521"><span class="nick" style="color:#6b8072"><a href="#022521" label="[02:25:21]">&lt;stikonas&gt;</a></span><span class="message">and also has some licensing clashes with heirloom-devtools, so heirloom-yacc and heirloom-lex binaries are not redistributable</span></div><div class="line" id="022612"><span class="nick" style="color:#6b8072"><a href="#022612" label="[02:26:12]">&lt;stikonas&gt;</a></span><span class="message">(since GPL is not compatible with CDDL, same licensing issue as ZFS filesystem on Linux kernel)</span></div><div class="line" id="022704"><span class="nick" style="color:#6b8072"><a href="#022704" label="[02:27:04]">&lt;stikonas&gt;</a></span><span class="message">but that issue would go away if gash would be updated to run on mes, which might happen in the future</span></div><div class="line" id="022733"><span class="nick" style="color:#6b8072"><a href="#022733" label="[02:27:33]">&lt;stikonas&gt;</a></span><span class="message">gash is a shell, so we would be able to postpone bash build to a bit later</span></div><div class="line" id="023526"><span class="nick" style="color:#389600"><a href="#023526" label="[02:35:26]">&lt;alMalsamo&gt;</a></span><span class="message">Hmm gash doesn't run on Mes?  Only Guile or what?</span></div><div class="line" id="023546"><span class="nick" style="color:#389600"><a href="#023546" label="[02:35:46]">&lt;alMalsamo&gt;</a></span><span class="message">I thought the whole point of Gash and Gash-utils was to replace C binaries in GNU Guix bootstrap on Mes</span></div><div class="line" id="024614"><span class="nick" style="color:#2e2a4a"><a href="#024614" label="[02:46:14]">&lt;oriansj&gt;</a></span><span class="message">alMalsamo: yes the point of Gash and Gash-utils was to remove the need for the bash and core util binaries used at the root of the Gnu Guix bootstrap; however you are forgetting the core of the Guix bootstrap is a rather larget guile binary</span></div><div class="line" id="024729"><span class="nick" style="color:#2e2a4a"><a href="#024729" label="[02:47:29]">&lt;oriansj&gt;</a></span><span class="message">live-bootstrap lacks that issue and uses kaem-optional (757bytes) to drive the bootstrap and later builds guile from source (which could be used as the root binary for Guix)</span></div><div class="line" id="025224"><span class="nick" style="color:#389600"><a href="#025224" label="[02:52:24]">&lt;alMalsamo&gt;</a></span><span class="message">oriansj: live-bootstrap/sysa/stage0-posix/src/x86/kaem-minimal.hex0</span></div><div class="line" id="025238"><span class="nick" style="color:#389600"><a href="#025238" label="[02:52:38]">&lt;alMalsamo&gt;</a></span><span class="message">Is that kaem-optional or is it a different file?</span></div><div class="line" id="025323"><span class="nick" style="color:#389600"><a href="#025323" label="[02:53:23]">&lt;alMalsamo&gt;</a></span><span class="message">oriansj: I thought GNU Guix bootstrap uses GNU Mes Scheme interpreter now instead of Guile, why on earth did janneke code GNU Mes then?</span></div><div class="line" id="025444"><span class="nick" style="color:#2e2a4a"><a href="#025444" label="[02:54:44]">&lt;oriansj&gt;</a></span><span class="message">alMalsamo: kaem-minimal.hex0 is the hex0 source code and kaem-optional-seed is the binary generated when you build that source</span></div><div class="line" id="025600"><span class="nick" style="color:#2e2a4a"><a href="#025600" label="[02:56:00]">&lt;oriansj&gt;</a></span><span class="message">alMalsamo: what do you thing gash, gash-utils, bootar and guix itself is running on?</span></div><div class="line" id="025609"><span class="nick" style="color:#389600"><a href="#025609" label="[02:56:09]">&lt;alMalsamo&gt;</a></span><span class="message">Okay thanks for the clarification.  unfortunately I am not entirely sure what &quot;kaem&quot; even is, and I don't think I am 1337 enough to decipher/audit this code taking a look at it.  I am mostly familiar with reading Scheme code</span></div><div class="line" id="025642"><span class="nick" style="color:#2e2a4a"><a href="#025642" label="[02:56:42]">&lt;oriansj&gt;</a></span><span class="message">alMalsamo: kaem is a shell</span></div><div class="line" id="025716"><span class="nick" style="color:#389600"><a href="#025716" label="[02:57:16]">&lt;alMalsamo&gt;</a></span><span class="message">oriansj: Hmm I dunno I haven't installed GNU Guix since before GNU Mes was invented, but since GNU Mes exists now I kind of assumed that the Scheme interpreter portion of Mes was used in the bootstrap process, not Guile</span></div><div class="line" id="025730"><span class="nick" style="color:#2e2a4a"><a href="#025730" label="[02:57:30]">&lt;oriansj&gt;</a></span><span class="message">which just reads text and creates an array and calls execve and waits for it to finish</span></div><div class="line" id="025808"><span class="nick" style="color:#2e2a4a"><a href="#025808" label="[02:58:08]">&lt;oriansj&gt;</a></span><span class="message">alMalsamo: easy mistake to make and honestly a point I wish they were more clear about</span></div><div class="line" id="025855"><span class="nick" style="color:#2e2a4a"><a href="#025855" label="[02:58:55]">&lt;oriansj&gt;</a></span><span class="message">if you can read C code: <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/blob/master/High%20Level%20Prototypes/kaem-minimal.c">https://github.com/oriansj/stage0-posix/blob/master/High%20Level%20Prototypes/kaem-minimal.c</a> </span></div><div class="line" id="025945"><span class="nick" style="color:#389600"><a href="#025945" label="[02:59:45]">&lt;alMalsamo&gt;</a></span><span class="message">Hmm okay then what is the point of coding a seperate Scheme intepreter in GNU Mes project if it is not even used in GNU Guix bootstrap process?  When would this portion of GNU Mes ever get used?</span></div><div class="line" id="030008"><span class="nick" style="color:#2e2a4a"><a href="#030008" label="[03:00:08]">&lt;oriansj&gt;</a></span><span class="message">alMalsamo: oh it is used</span></div><div class="line" id="030014"><span class="nick" style="color:#2e2a4a"><a href="#030014" label="[03:00:14]">&lt;oriansj&gt;</a></span><span class="message">it just doesn't run everything yet</span></div><div class="line" id="030042"><span class="nick" style="color:#2e2a4a"><a href="#030042" label="[03:00:42]">&lt;oriansj&gt;</a></span><span class="message">for example it is used to run MesCC to compile TCC</span></div><div class="line" id="030102"><span class="nick" style="color:#389600"><a href="#030102" label="[03:01:02]">&lt;alMalsamo&gt;</a></span><span class="message">oriansj: Okay I am more familiar with Scheme than C but I will take a look at kaem-minimal.c and see if I can understand it.  I already have it locally: live-bootstrap/sysa/stage0-posix/src/High\ Level\ Prototypes/kaem-minimal.c</span></div><div class="line" id="030211"><span class="nick" style="color:#2e2a4a"><a href="#030211" label="[03:02:11]">&lt;oriansj&gt;</a></span><span class="message">alMalsamo: well if any of it is unclear, please let me know. I'm more than happy to explain anything that isn't completely clear and will be more than happy to improve its comments to aid future understanding for the next people who read it</span></div><div class="line" id="030214"><span class="nick" style="color:#389600"><a href="#030214" label="[03:02:14]">&lt;alMalsamo&gt;</a></span><span class="message">And this is going to be a very n00b question (sorry) but I don't even understand what language kaem-minimal.hex0 is written in, the only low-language I am familiar with is assembly, what exactly *is* hex0?</span></div><div class="line" id="030236"><span class="nick" style="color:#2e2a4a"><a href="#030236" label="[03:02:36]">&lt;oriansj&gt;</a></span><span class="message">alMalsamo: we love n00b questions</span></div><div class="line" id="030259"><span class="nick" style="color:#389600"><a href="#030259" label="[03:02:59]">&lt;alMalsamo&gt;</a></span><span class="message">oriansj: Thanks for being open to helping I appreciate it.  I am not skilled enough to create low-level code like this so I am immensely appreicative for your contributions to bootstrappable builds in general!</span></div><div class="line" id="030333"><span class="nick" style="color:#2e2a4a"><a href="#030333" label="[03:03:33]">&lt;oriansj&gt;</a></span><span class="message">a byte is 8bits; a nibble is 4bits and can be expressed by 0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F</span></div><div class="line" id="030407"><span class="nick" style="color:#389600"><a href="#030407" label="[03:04:07]">&lt;alMalsamo&gt;</a></span><span class="message">I would like to audit as much of this code as I can however it seems very vital way to install an OS, unfortunately most GNU+Linux users don't give a flying fuck about diverse double compilation I dunno why not &gt;_&lt;</span></div><div class="line" id="030427"><span class="nick" style="color:#389600"><a href="#030427" label="[03:04:27]">&lt;alMalsamo&gt;</a></span><span class="message">Yes I am familiar with byte vs. nibble and also hexadecimal notation</span></div><div class="line" id="030444"><span class="nick" style="color:#2e2a4a"><a href="#030444" label="[03:04:44]">&lt;oriansj&gt;</a></span><span class="message">So by reading 20 and combining them into a single byte, we get the byte value 0x20 which is the byte for the space character</span></div><div class="line" id="030509"><span class="nick" style="color:#2e2a4a"><a href="#030509" label="[03:05:09]">&lt;oriansj&gt;</a></span><span class="message">to aid understanding we added line comment syntax</span></div><div class="line" id="030514"><span class="nick" style="color:#2e2a4a"><a href="#030514" label="[03:05:14]">&lt;oriansj&gt;</a></span><span class="message"># line comment</span></div><div class="line" id="030516"><span class="nick" style="color:#2e2a4a"><a href="#030516" label="[03:05:16]">&lt;oriansj&gt;</a></span><span class="message">and</span></div><div class="line" id="030519"><span class="nick" style="color:#2e2a4a"><a href="#030519" label="[03:05:19]">&lt;oriansj&gt;</a></span><span class="message">; line comment</span></div><div class="line" id="030559"><span class="nick" style="color:#2e2a4a"><a href="#030559" label="[03:05:59]">&lt;oriansj&gt;</a></span><span class="message">so a hex0 program would read a ; or # and just throw away everything until it hits a line feed character</span></div><div class="line" id="030700"><span class="nick" style="color:#2e2a4a"><a href="#030700" label="[03:07:00]">&lt;oriansj&gt;</a></span><span class="message">whitespace characters and everything else is ignored (except EOF which marks we are done)</span></div><div class="line" id="030755"><span class="nick" style="color:#2e2a4a"><a href="#030755" label="[03:07:55]">&lt;oriansj&gt;</a></span><span class="message">So we just read a byte, checks if it is EOF or 0-F or ; or # or throws it away</span></div><div class="line" id="030844"><span class="nick" style="color:#2e2a4a"><a href="#030844" label="[03:08:44]">&lt;oriansj&gt;</a></span><span class="message">if it is 0-F (a-f are also supported but mapped to A-F) we store it until we read another hex character</span></div><div class="line" id="030924"><span class="nick" style="color:#2e2a4a"><a href="#030924" label="[03:09:24]">&lt;oriansj&gt;</a></span><span class="message">then we shift it 4bits and add the new hex value to get a byte that we write directly with no further changes</span></div><div class="line" id="031005"><span class="nick" style="color:#2e2a4a"><a href="#031005" label="[03:10:05]">&lt;oriansj&gt;</a></span><span class="message">So in effect a hex0 program is like doing art via individual colored grains of sand</span></div><div class="line" id="031042"><span class="nick" style="color:#2e2a4a"><a href="#031042" label="[03:10:42]">&lt;oriansj&gt;</a></span><span class="message">it is very tedious, boring and error prone (especially with jumps)</span></div><div class="line" id="031103"><span class="nick" style="color:#2e2a4a"><a href="#031103" label="[03:11:03]">&lt;oriansj&gt;</a></span><span class="message">So we write as little as possible in hex0</span></div><div class="line" id="031242"><span class="nick" style="color:#389600"><a href="#031242" label="[03:12:42]">&lt;alMalsamo&gt;</a></span><span class="message">Hmm okay but I still don't understand what *language* this is, I mean it seems instructions are encoded in hexadecimal somehow, but this is not in assembly or something?  how is a hex0 program &quot;assembled&quot; or &quot;converted&quot; to a binary executable to actually be run on a CPU?</span></div><div class="line" id="031349"><span class="nick" style="color:#2e2a4a"><a href="#031349" label="[03:13:49]">&lt;oriansj&gt;</a></span><span class="message">alMalsamo: the language is hex0, the output *IS* binary</span></div><div class="line" id="031413"><span class="nick" style="color:#2e2a4a"><a href="#031413" label="[03:14:13]">&lt;oriansj&gt;</a></span><span class="message">we are writing in machine code directly</span></div><div class="line" id="031426"><span class="nick" style="color:#2e2a4a"><a href="#031426" label="[03:14:26]">&lt;oriansj&gt;</a></span><span class="message">it is below assembly</span></div><div class="line" id="031432"><span class="nick" style="color:#2e2a4a"><a href="#031432" label="[03:14:32]">&lt;oriansj&gt;</a></span><span class="message">below a linker</span></div><div class="line" id="031436"><span class="nick" style="color:#2e2a4a"><a href="#031436" label="[03:14:36]">&lt;oriansj&gt;</a></span><span class="message">below loaders</span></div><div class="line" id="031459"><span class="nick" style="color:#2e2a4a"><a href="#031459" label="[03:14:59]">&lt;oriansj&gt;</a></span><span class="message">it is the very bits that run directly on the bare metal</span></div><div class="line" id="031515"><span class="nick" style="color:#389600"><a href="#031515" label="[03:15:15]">&lt;alMalsamo&gt;</a></span><span class="message">Okay damn so you have to make new hex0 code for every microarchitecture then similar to assembly language?</span></div><div class="line" id="031544"><span class="nick" style="color:#389600"><a href="#031544" label="[03:15:44]">&lt;alMalsamo&gt;</a></span><span class="message">What turns hex0 text into binary?</span></div><div class="line" id="031547"><span class="nick" style="color:#2e2a4a"><a href="#031547" label="[03:15:47]">&lt;oriansj&gt;</a></span><span class="message">alMalsamo: fortunately no; we only need to make a new hex0 for every unique instruction set</span></div><div class="line" id="031612"><span class="nick" style="color:#2e2a4a"><a href="#031612" label="[03:16:12]">&lt;oriansj&gt;</a></span><span class="message">alMalsamo: well we have multiple paths to do so</span></div><div class="line" id="031633"><span class="nick" style="color:#389600"><a href="#031633" label="[03:16:33]">&lt;alMalsamo&gt;</a></span><span class="message">Hmm but each microarchitecture usually HAS a unique instruction set, right?  Unique ISA?</span></div><div class="line" id="031642"><span class="nick" style="color:#2e2a4a"><a href="#031642" label="[03:16:42]">&lt;oriansj&gt;</a></span><span class="message">one could even hand convert and toggle it into memory if one so desired</span></div><div class="line" id="031708"><span class="nick" style="color:#389600"><a href="#031708" label="[03:17:08]">&lt;alMalsamo&gt;</a></span><span class="message">x86 vs. ARM vs. RISC-V all have different ISAs so I assume writing in machine code would require doing everything from scratch for each ISA</span></div><div class="line" id="031728"><span class="nick" style="color:#2e2a4a"><a href="#031728" label="[03:17:28]">&lt;oriansj&gt;</a></span><span class="message">alMalsamo: well no, see backwards binary compatibility is the most valuable part of an ISA. Aka binaries built previously will continue to run without changes</span></div><div class="line" id="031806"><span class="nick" style="color:#2e2a4a"><a href="#031806" label="[03:18:06]">&lt;oriansj&gt;</a></span><span class="message">alMalsamo: and we do in fact redo all of the steps up until M2-Planet from scratch for each of those ISAs</span></div><div class="line" id="031854"><span class="nick" style="color:#2e2a4a"><a href="#031854" label="[03:18:54]">&lt;oriansj&gt;</a></span><span class="message">so provided we restrict ourselves to a minimal subset, our programs should run on ALL implementations of that ISA</span></div><div class="line" id="031912"><span class="nick" style="color:#389600"><a href="#031912" label="[03:19:12]">&lt;alMalsamo&gt;</a></span><span class="message">Hmm but backwards binary compatability would only apply to processors implementing a single ISA, how could binaries be compatible acorss different microarchitecures?</span></div><div class="line" id="031942"><span class="nick" style="color:#2e2a4a"><a href="#031942" label="[03:19:42]">&lt;oriansj&gt;</a></span><span class="message">alMalsamo: you seem to be mistaking different ISAs for microarchitectures</span></div><div class="line" id="032015"><span class="nick" style="color:#2e2a4a"><a href="#032015" label="[03:20:15]">&lt;oriansj&gt;</a></span><span class="message">see an infinite number of different microarchitectures can implement the same ISA and run the exact same binaries without changes</span></div><div class="line" id="032021"><span class="nick" style="color:#389600"><a href="#032021" label="[03:20:21]">&lt;alMalsamo&gt;</a></span><span class="message">Hmm maybe I am, I guess microarchitecure refers to a generation of a design WITHIN an ISA?</span></div><div class="line" id="032037"><span class="nick" style="color:#2e2a4a"><a href="#032037" label="[03:20:37]">&lt;oriansj&gt;</a></span><span class="message">but no two different ISAs can be expected to run the exact same binaries</span></div><div class="line" id="032101"><span class="nick" style="color:#2e2a4a"><a href="#032101" label="[03:21:01]">&lt;oriansj&gt;</a></span><span class="message">alMalsamo: that would be correct</span></div><div class="line" id="032126"><span class="nick" style="color:#389600"><a href="#032126" label="[03:21:26]">&lt;alMalsamo&gt;</a></span><span class="message">I see stage0-posix code for RISC-V and ARM so damn you had to code all of these for each ISA from scratch?  That would require intimate knowledge of each ISA's machine code...</span></div><div class="line" id="032133"><span class="nick" style="color:#389600"><a href="#032133" label="[03:21:33]">&lt;alMalsamo&gt;</a></span><span class="message">What are you some kind of wizard?</span></div><div class="line" id="032147"><span class="nick" style="color:#2e2a4a"><a href="#032147" label="[03:21:47]">&lt;oriansj&gt;</a></span><span class="message">alMalsamo: nope</span></div><div class="line" id="032211"><span class="nick" style="color:#2e2a4a"><a href="#032211" label="[03:22:11]">&lt;oriansj&gt;</a></span><span class="message">just someone willing to do the work</span></div><div class="line" id="032259"><span class="nick" style="color:#2e2a4a"><a href="#032259" label="[03:22:59]">&lt;oriansj&gt;</a></span><span class="message">it just requires one to admit they don't know and being willing to look stupid to understand what they need to reason about</span></div><div class="line" id="032357"><span class="nick" style="color:#2e2a4a"><a href="#032357" label="[03:23:57]">&lt;oriansj&gt;</a></span><span class="message">no one here knows everything</span></div><div class="line" id="032358"><span class="nick" style="color:#389600"><a href="#032358" label="[03:23:58]">&lt;alMalsamo&gt;</a></span><span class="message">Hmm well you don't look very stupid to me haha</span></div><div class="line" id="032414"><span class="nick" style="color:#389600"><a href="#032414" label="[03:24:14]">&lt;alMalsamo&gt;</a></span><span class="message">I tried studying assembly x86 for example and never got very far.</span></div><div class="line" id="032427"><span class="nick" style="color:#2e2a4a"><a href="#032427" label="[03:24:27]">&lt;oriansj&gt;</a></span><span class="message">alMalsamo: well we love to help people learn here</span></div><div class="line" id="032438"><span class="nick" style="color:#389600"><a href="#032438" label="[03:24:38]">&lt;alMalsamo&gt;</a></span><span class="message">Low-level stuff like this hurts my brain :P</span></div><div class="line" id="032508"><span class="nick" style="color:#2e2a4a"><a href="#032508" label="[03:25:08]">&lt;oriansj&gt;</a></span><span class="message">alMalsamo: that might be because no one took the time to help make it clear for you</span></div><div class="line" id="032537"><span class="nick" style="color:#389600"><a href="#032537" label="[03:25:37]">&lt;alMalsamo&gt;</a></span><span class="message">Well I appreciate you using GNU GPLv3+ license, but I am not as big a fan of Github</span></div><div class="line" id="032604"><span class="nick" style="color:#2e2a4a"><a href="#032604" label="[03:26:04]">&lt;oriansj&gt;</a></span><span class="message">alMalsamo: that is absolutely fine</span></div><div class="line" id="032630"><span class="nick" style="color:#2e2a4a"><a href="#032630" label="[03:26:30]">&lt;oriansj&gt;</a></span><span class="message">I'm more than happy to get this all into savannah or other hosting locations as well</span></div><div class="line" id="032645"><span class="nick" style="color:#2e2a4a"><a href="#032645" label="[03:26:45]">&lt;oriansj&gt;</a></span><span class="message">I just haven't had the time to do so</span></div><div class="line" id="032755"><span class="nick" style="color:#389600"><a href="#032755" label="[03:27:55]">&lt;alMalsamo&gt;</a></span><span class="message">So you said that one could hand convert hex0 code and toggle it into memory, but how exactly does hex0 code get executed in the bootstrap process once I try this on my Thinkpad?  I mean if hex0 is a kind of machine code representation then it doesn't need an assembler which is great, but SOMETHING has to convert it from text to an executable somehow right?</span></div><div class="line" id="032825"><span class="nick" style="color:#389600"><a href="#032825" label="[03:28:25]">&lt;alMalsamo&gt;</a></span><span class="message">And do you actually have RISC-V32 and RISC-V64 hardware you are testing this stuff on?</span></div><div class="line" id="032944"><span class="nick" style="color:#2e2a4a"><a href="#032944" label="[03:29:44]">&lt;oriansj&gt;</a></span><span class="message">alMalsamo: that we is why provide the kaem-optional-seed binary for direct execution and provide you multiple methods of generating the exact same binary from the hex0 source provided</span></div><div class="line" id="033031"><span class="nick" style="color:#2e2a4a"><a href="#033031" label="[03:30:31]">&lt;oriansj&gt;</a></span><span class="message">if you want to waste a weekend, you can manually verify every single byte in the binary corresponds to the hex0 source provided.</span></div><div class="line" id="033138"><span class="nick" style="color:#2e2a4a"><a href="#033138" label="[03:31:38]">&lt;oriansj&gt;</a></span><span class="message">alMalsamo: I actually didn't do the RISC-V porting, that was stikonas; I just helped with the mescc-tools enhancements needed.</span></div><div class="line" id="033205"><span class="nick" style="color:#2e2a4a"><a href="#033205" label="[03:32:05]">&lt;oriansj&gt;</a></span><span class="message">and I use qemu for that testing</span></div><div class="line" id="033543"><span class="nick" style="color:#2e2a4a"><a href="#033543" label="[03:35:43]">&lt;oriansj&gt;</a></span><span class="message">but there was someone with actual RISC-V hardware who did do testing and found a difference between the qemu and actual metal (Gabriel Wicki (I think their handle is gbrlwck))</span></div><div class="line" id="033808"><span class="nick" style="color:#2e2a4a"><a href="#033808" label="[03:38:08]">&lt;oriansj&gt;</a></span><span class="message">alMalsamo: why do you think there are 4 files in here: <a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds/tree/master/POSIX/x86">https://github.com/oriansj/bootstrap-seeds/tree/master/POSIX/x86</a>  2 hex0 sources and 2 binaries that directly correspond to that hex0 source code</span></div><div class="line" id="034540"><span class="nick" style="color:#80b1d3"><a href="#034540" label="[03:45:40]">&lt;sam_&gt;</a></span><span class="message">oriansj++ (it's the right attitude to have)</span></div><div class="line" id="034549"><span class="nick" style="color:#80b1d3"><a href="#034549" label="[03:45:49]">&lt;sam_&gt;</a></span><span class="message">not being afraid to ask random questions is really key</span></div><div class="line" id="034734"><span class="nick" style="color:#389600"><a href="#034734" label="[03:47:34]">&lt;alMalsamo&gt;</a></span><span class="message">sam_: Hey you are from #gentoo right?  You been here awhile?</span></div><div class="line" id="035013"><span class="nick" style="color:#80b1d3"><a href="#035013" label="[03:50:13]">&lt;sam_&gt;</a></span><span class="message">hi, yes :)</span></div><div class="line" id="035046"><span class="nick" style="color:#389600"><a href="#035046" label="[03:50:46]">&lt;alMalsamo&gt;</a></span><span class="message">Hmm hex0-seed is fucking tiny though!  What does this do?</span></div><div class="line" id="035108"><span class="nick" style="color:#389600"><a href="#035108" label="[03:51:08]">&lt;alMalsamo&gt;</a></span><span class="message">sam_: Okay I didn't think you would be here haha</span></div><div class="line" id="035116"><span class="nick" style="color:#6d2462"><a href="#035116" label="[03:51:16]">*</a></span><span class="message">sam_ is in a lot of places</span></div><div class="line" id="035145"><span class="nick" style="color:#389600"><a href="#035145" label="[03:51:45]">&lt;alMalsamo&gt;</a></span><span class="message">sam_: Do you use GNU Guix or just Gentoo?</span></div><div class="line" id="035158"><span class="nick" style="color:#80b1d3"><a href="#035158" label="[03:51:58]">&lt;sam_&gt;</a></span><span class="message">just Gentoo. Not enough hours in the day for anything else :)</span></div><div class="line" id="035206"><span class="nick" style="color:#80b1d3"><a href="#035206" label="[03:52:06]">&lt;sam_&gt;</a></span><span class="message">But been tempted to try guix in foreign mode</span></div><div class="line" id="035220"><span class="nick" style="color:#389600"><a href="#035220" label="[03:52:20]">&lt;alMalsamo&gt;</a></span><span class="message">Hmm so what brings you to #bootstrappable then?</span></div><div class="line" id="035220"><span class="nick" style="color:#2e2a4a"><a href="#035220" label="[03:52:20]">&lt;oriansj&gt;</a></span><span class="message">alMalsamo: hex0-seed does exactly what one should expect, take hex0 files and output binaries</span></div><div class="line" id="035229"><span class="nick" style="color:#80b1d3"><a href="#035229" label="[03:52:29]">&lt;sam_&gt;</a></span><span class="message">it's an interesting project (and important IMO)</span></div><div class="line" id="035235"><span class="nick" style="color:#389600"><a href="#035235" label="[03:52:35]">&lt;alMalsamo&gt;</a></span><span class="message">oriansj: Oh cool that is what I was looking for then</span></div><div class="line" id="035239"><span class="nick" style="color:#80b1d3"><a href="#035239" label="[03:52:39]">&lt;sam_&gt;</a></span><span class="message">bootstrappable is not just for guix</span></div><div class="line" id="035314"><span class="nick" style="color:#80b1d3"><a href="#035314" label="[03:53:14]">&lt;sam_&gt;</a></span><span class="message">(also, stikonas[m] kind of got me interested in modern-day bootstrapping with his OpenJDK work.)</span></div><div class="line" id="035321"><span class="nick" style="color:#389600"><a href="#035321" label="[03:53:21]">&lt;alMalsamo&gt;</a></span><span class="message">sam_: Hmm but what other distros does it even apply to?  I haven't found another distro that performs diverse double compilation</span></div><div class="line" id="035326"><span class="nick" style="color:#80b1d3"><a href="#035326" label="[03:53:26]">&lt;sam_&gt;</a></span><span class="message">i'm also here because it's relevant to me for e.g. rust</span></div><div class="line" id="035333"><span class="nick" style="color:#2e2a4a"><a href="#035333" label="[03:53:33]">&lt;oriansj&gt;</a></span><span class="message">alMalsamo: here is it in C if you prefer it that way: <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/blob/master/High%20Level%20Prototypes/hex0.c">https://github.com/oriansj/stage0-posix/blob/master/High%20Level%20Prototypes/hex0.c</a> </span></div><div class="line" id="035354"><span class="nick" style="color:#80b1d3"><a href="#035354" label="[03:53:54]">&lt;sam_&gt;</a></span><span class="message">bootstrapping applies to all distros. distros may wish to e.g. use guix to get a well-known seed. but bootstrapping also applies to other languages, like Java (which needs Java to build), or Rust (which needs Rust to build)</span></div><div class="line" id="035702"><span class="nick" style="color:#2e2a4a"><a href="#035702" label="[03:57:02]">&lt;oriansj&gt;</a></span><span class="message">the last 5 years have been very eventful for bootstrapping.</span></div><div class="line" id="035923"><span class="nick" style="color:#2e2a4a"><a href="#035923" label="[03:59:23]">&lt;oriansj&gt;</a></span><span class="message">with BootOS, SectorForth and SectorLisp providing new possible roots. live-bootstrap providing a full path from M2-Planet to GCC+guile; Gnu Mes/MesCC providing a C compiler written in scheme that is able to self-host; blynn-compiler providing a possible path to bootstrap haskell (not quite done but tempting) and many more</span></div><div class="line" id="040110"><span class="nick" style="color:#389600"><a href="#040110" label="[04:01:10]">&lt;alMalsamo&gt;</a></span><span class="message">Hmm I haven't heard of BootOS, SectorForth and SectorLisp...</span></div><div class="line" id="040932"><span class="nick" style="color:#2e2a4a"><a href="#040932" label="[04:09:32]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/nanochess/bootOS">https://github.com/nanochess/bootOS</a>  , <a rel="nofollow" href="https://github.com/cesarblum/sectorforth.git">https://github.com/cesarblum/sectorforth.git</a>  and <a rel="nofollow" href="https://github.com/jart/sectorlisp">https://github.com/jart/sectorlisp</a> </span></div><div class="line" id="041703"><span class="nick" style="color:#389600"><a href="#041703" label="[04:17:03]">&lt;alMalsamo&gt;</a></span><span class="message">Hmm I read bootOS readme, how does this help?  Looks like it only supports 8088 CPUs who even has that anyway?</span></div><div class="line" id="041755"><span class="nick" style="color:#389600"><a href="#041755" label="[04:17:55]">&lt;alMalsamo&gt;</a></span><span class="message">Looks like the only apps supported are a couple games and a BASIC intepreter...</span></div><div class="line" id="041844"><span class="nick" style="color:#2e2a4a"><a href="#041844" label="[04:18:44]">&lt;oriansj&gt;</a></span><span class="message">alMalsamo: all x86 and AMD64 processors can run 8088 binaries</span></div><div class="line" id="041908"><span class="nick" style="color:#2e2a4a"><a href="#041908" label="[04:19:08]">&lt;oriansj&gt;</a></span><span class="message">and the key point it is able to write hex programs to disk and load them</span></div><div class="line" id="042557"><span class="nick" style="color:#389600"><a href="#042557" label="[04:25:57]">&lt;alMalsamo&gt;</a></span><span class="message">Hmm so would something like BootOS remove the dependency on an i686 Linux kernel image in to live-boostrap process or am I misunderstanding?</span></div><div class="line" id="042832"><span class="nick" style="color:#2e2a4a"><a href="#042832" label="[04:28:32]">&lt;oriansj&gt;</a></span><span class="message">stikonas: I cracked the bug and it was me being stupid</span></div><div class="line" id="042938"><span class="nick" style="color:#2e2a4a"><a href="#042938" label="[04:29:38]">&lt;oriansj&gt;</a></span><span class="message">alMalsamo: live-bootstrap is the steps after stage0</span></div><div class="line" id="043000"><span class="nick" style="color:#2e2a4a"><a href="#043000" label="[04:30:00]">&lt;oriansj&gt;</a></span><span class="message">stage0-posix to be specific in its current form</span></div><div class="line" id="043038"><span class="nick" style="color:#2e2a4a"><a href="#043038" label="[04:30:38]">&lt;oriansj&gt;</a></span><span class="message">BootOS provides an alternate root starting point for stage0 on x86 without depending on any kernel or Operating System at all</span></div><div class="line" id="043129"><span class="nick" style="color:#389600"><a href="#043129" label="[04:31:29]">&lt;alMalsamo&gt;</a></span><span class="message">Oohh that's pretty cool actually, have you actually bootstrapped starting from BootOS then?</span></div><div class="line" id="043227"><span class="nick" style="color:#2e2a4a"><a href="#043227" label="[04:32:27]">&lt;oriansj&gt;</a></span><span class="message">alMalsamo: anyone can make the hex0 seeds in BootOS</span></div><div class="line" id="043426"><span class="nick" style="color:#2e2a4a"><a href="#043426" label="[04:34:26]">&lt;oriansj&gt;</a></span><span class="message">just don't type in the comments</span></div><div class="line" id="043514"><span class="nick" style="color:#2e2a4a"><a href="#043514" label="[04:35:14]">&lt;oriansj&gt;</a></span><span class="message">we still need to sort out a proper bootstrap kernel written in M2-Planet's C subset or admit defeat and just write a couple minimal POSIX in assembly for fun</span></div><div class="line" id="044315"><span class="nick" style="color:#2e2a4a"><a href="#044315" label="[04:43:15]">&lt;oriansj&gt;</a></span><span class="message">stikonas: and I think we have a regression in M2-Mesoplanet in regards to #defines</span></div><div class="line" id="044357"><span class="nick" style="color:#2e2a4a"><a href="#044357" label="[04:43:57]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1227979/">https://paste.debian.net/1227979/</a> </span></div><div class="line" id="044435"><span class="nick" style="color:#2e2a4a"><a href="#044435" label="[04:44:35]">&lt;oriansj&gt;</a></span><span class="message">I'll dig into it tomorrow as it seems to be related to a bug in building ungz with M2-Mesoplanet</span></div><div class="line" id="051044"><span class="nick" style="color:#389600"><a href="#051044" label="[05:10:44]">&lt;alMalsamo&gt;</a></span><span class="message">oriansj: Another n00b question heh, what exactly are M2-Planet and M2-Mesoplanet and what is the difference between the two?</span></div><div class="line" id="110933"><span class="nick" style="color:#234e69"><a href="#110933" label="[11:09:33]">&lt;stikonas[m]&gt;</a></span><span class="message">C compiler</span></div><div class="line" id="111015"><span class="nick" style="color:#234e69"><a href="#111015" label="[11:10:15]">&lt;stikonas[m]&gt;</a></span><span class="message">Difference is like cc1 and gcc</span></div><div class="line" id="111029"><span class="nick" style="color:#234e69"><a href="#111029" label="[11:10:29]">&lt;stikonas[m]&gt;</a></span><span class="message">Once compiles C</span></div><div class="line" id="111248"><span class="nick" style="color:#234e69"><a href="#111248" label="[11:12:48]">&lt;stikonas[m]&gt;</a></span><span class="message">The other is a wrapper that runs other executables</span></div><div class="line" id="111415"><span class="nick" style="color:#234e69"><a href="#111415" label="[11:14:15]">&lt;stikonas[m]&gt;</a></span><span class="message">E.g. GCC runs cc1, as, ld commands</span></div><div class="line" id="111454"><span class="nick" style="color:#234e69"><a href="#111454" label="[11:14:54]">&lt;stikonas[m]&gt;</a></span><span class="message">So M2-planet is just C compiler</span></div><div class="line" id="111514"><span class="nick" style="color:#234e69"><a href="#111514" label="[11:15:14]">&lt;stikonas[m]&gt;</a></span><span class="message">But it outputs assembly, not binaries</span></div><div class="line" id="112154"><span class="nick" style="color:#234e69"><a href="#112154" label="[11:21:54]">&lt;stikonas[m]&gt;</a></span><span class="message">alMalsamo: also I wrote stage0-posix risc-v port without previous experience in risc-v and almost no experience in assembly programming</span></div><div class="line" id="112226"><span class="nick" style="color:#234e69"><a href="#112226" label="[11:22:26]">&lt;stikonas[m]&gt;</a></span><span class="message">It's not that hard as you think, although it is a bit tedious</span></div><div class="line" id="123529"><span class="nick" style="color:#6b8072"><a href="#123529" label="[12:35:29]">&lt;stikonas&gt;</a></span><span class="message">sam_: Guix as foreign distro is useful if you want something that is not packaged in Gentoo (or any of its overlays) but is in Guix</span></div><div class="line" id="123739"><span class="nick" style="color:#6b8072"><a href="#123739" label="[12:37:39]">&lt;stikonas&gt;</a></span><span class="message">(and provided that one is too lazy to package that program as ebuild)</span></div><div class="line" id="130043"><span class="nick" style="color:#2e2a4a"><a href="#130043" label="[13:00:43]">&lt;oriansj&gt;</a></span><span class="message">stikonas: absolutely correct</span></div><div class="line" id="130336"><span class="nick" style="color:#2e2a4a"><a href="#130336" label="[13:03:36]">&lt;oriansj&gt;</a></span><span class="message">now my turn for a dumb question; anyone know how to make GCC or Clang throw a big fat warning when in one file there is a prototype void set_env(char** envp); and it is used like so set_env(envp); and in another file where set_env is actually defined, its definition is just void set_env() {...} as passing an argument to a M2-Planet C function that doesn't expect an argument will result in an off by 1 (register size) bug and this is the</span></div><div class="line" id="130337"><span class="nick" style="color:#2e2a4a"><a href="#130337" label="[13:03:37]">&lt;oriansj&gt;</a></span><span class="message">second time it has shown up.</span></div><div class="line" id="130521"><span class="nick" style="color:#2e2a4a"><a href="#130521" label="[13:05:21]">&lt;oriansj&gt;</a></span><span class="message">or if that isn't possible, should I just create that functionality for M2-Planet?</span></div><div class="line" id="131105"><span class="nick" style="color:#2e2a4a"><a href="#131105" label="[13:11:05]">&lt;oriansj&gt;</a></span><span class="message">alMalsamo: one could say, doing stage0-posix work we will give you all the experience needed to become a good low level programmer.</span></div><div class="line" id="132436"><span class="nick" style="color:#6b8072"><a href="#132436" label="[13:24:36]">&lt;stikonas&gt;</a></span><span class="message">strange, I thought gcc would flag argument mismatch...</span></div><div class="line" id="132555"><span class="nick" style="color:#6b8072"><a href="#132555" label="[13:25:55]">&lt;stikonas&gt;</a></span><span class="message">oriansj: what if you use -Wextra</span></div><div class="line" id="132601"><span class="nick" style="color:#6b8072"><a href="#132601" label="[13:26:01]">&lt;stikonas&gt;</a></span><span class="message">still no warnings?</span></div><div class="line" id="135044"><span class="nick" style="color:#2e2a4a"><a href="#135044" label="[13:50:44]">&lt;oriansj&gt;</a></span><span class="message">stikonas: the only warnings given are: <a rel="nofollow" href="https://paste.debian.net/1228011/">https://paste.debian.net/1228011/</a> </span></div><div class="line" id="135135"><span class="nick" style="color:#6b8072"><a href="#135135" label="[13:51:35]">&lt;stikonas&gt;</a></span><span class="message">hmm, and this includes even -Wall</span></div><div class="line" id="135144"><span class="nick" style="color:#6b8072"><a href="#135144" label="[13:51:44]">&lt;stikonas&gt;</a></span><span class="message">so I guess it's not possible to get it to show warning</span></div><div class="line" id="135156"><span class="nick" style="color:#6b8072"><a href="#135156" label="[13:51:56]">&lt;stikonas&gt;</a></span><span class="message">very strange...</span></div><div class="line" id="135609"><span class="nick" style="color:#6b8072"><a href="#135609" label="[13:56:09]">&lt;stikonas&gt;</a></span><span class="message">anyway, segfault is gone now</span></div><div class="line" id="135631"><span class="nick" style="color:#6b8072"><a href="#135631" label="[13:56:31]">&lt;stikonas&gt;</a></span><span class="message">although, I do get some other error</span></div><div class="line" id="135640"><span class="nick" style="color:#6b8072"><a href="#135640" label="[13:56:40]">&lt;stikonas&gt;</a></span><span class="message">non-line number: - provided to #FILENAME</span></div><div class="line" id="135939"><span class="nick" style="color:#6b8072"><a href="#135939" label="[13:59:39]">&lt;stikonas&gt;</a></span><span class="message">this is when I try to build blood-elf.c and stringify.c</span></div><div class="line" id="140517"><span class="nick" style="color:#6b8072"><a href="#140517" label="[14:05:17]">&lt;stikonas&gt;</a></span><span class="message">in the meantime I've updated submodules in stage0-posix to pull in your fixes</span></div><div class="line" id="140556"><span class="nick" style="color:#2e2a4a"><a href="#140556" label="[14:05:56]">&lt;oriansj&gt;</a></span><span class="message">well --dirty-mode should help figure out this bug</span></div><div class="line" id="140700"><span class="nick" style="color:#6b8072"><a href="#140700" label="[14:07:00]">&lt;stikonas&gt;</a></span><span class="message">-E should work too...</span></div><div class="line" id="141450"><span class="nick" style="color:#2e2a4a"><a href="#141450" label="[14:14:50]">&lt;oriansj&gt;</a></span><span class="message">ok that is an M2-Planet bug</span></div><div class="line" id="162241"><span class="nick" style="color:#2e2a4a"><a href="#162241" label="[16:22:41]">&lt;oriansj&gt;</a></span><span class="message">ok M2-Planet fix is up</span></div><div class="line" id="162617"><span class="nick" style="color:#2e2a4a"><a href="#162617" label="[16:26:17]">&lt;oriansj&gt;</a></span><span class="message">now to figure out the M2-Mesoplanet macro regression</span></div><div class="line" id="163937"><span class="nick" style="color:#2e2a4a"><a href="#163937" label="[16:39:37]">&lt;oriansj&gt;</a></span><span class="message">ok #define foo 15 + /* blah */ 1 is to replace foo with just 15 + 1</span></div><div class="line" id="171735"><span class="nick" style="color:#6b8072"><a href="#171735" label="[17:17:35]">&lt;stikonas&gt;</a></span><span class="message">hmm, nowI get empty final binary...</span></div><div class="line" id="171751"><span class="nick" style="color:#6b8072"><a href="#171751" label="[17:17:51]">&lt;stikonas&gt;</a></span><span class="message">./AMD64/bin/M2-Mesoplanet -f mescc-tools/blood-elf.c -f mescc-tools/stringify.c -o blood-elf</span></div><div class="line" id="171809"><span class="nick" style="color:#6b8072"><a href="#171809" label="[17:18:09]">&lt;stikonas&gt;</a></span><span class="message">but it's the same problem with gcc</span></div><div class="line" id="175311"><span class="nick" style="color:#2e2a4a"><a href="#175311" label="[17:53:11]">&lt;oriansj&gt;</a></span><span class="message">stikonas: ok use --dirty-mode and lets work backwards</span></div><div class="line" id="175348"><span class="nick" style="color:#2e2a4a"><a href="#175348" label="[17:53:48]">&lt;oriansj&gt;</a></span><span class="message">is the /tmp/M1-macro-* file containing valid hex2 contents</span></div><div class="line" id="180200"><span class="nick" style="color:#6b8072"><a href="#180200" label="[18:02:00]">&lt;stikonas&gt;</a></span><span class="message">hmm, unknown argument</span></div><div class="line" id="180232"><span class="nick" style="color:#6b8072"><a href="#180232" label="[18:02:32]">&lt;stikonas&gt;</a></span><span class="message">strange, it is in the source</span></div><div class="line" id="180247"><span class="nick" style="color:#6b8072"><a href="#180247" label="[18:02:47]">&lt;stikonas&gt;</a></span><span class="message">argh, Im running the wrong binary</span></div><div class="line" id="180426"><span class="nick" style="color:#6b8072"><a href="#180426" label="[18:04:26]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I don't even get to M1-macro*</span></div><div class="line" id="180430"><span class="nick" style="color:#6b8072"><a href="#180430" label="[18:04:30]">&lt;stikonas&gt;</a></span><span class="message">M2-Planet-000000 is already empty</span></div><div class="line" id="181551"><span class="nick" style="color:#2e2a4a"><a href="#181551" label="[18:15:51]">&lt;oriansj&gt;</a></span><span class="message">here is what I am getting as output: <a rel="nofollow" href="https://paste.debian.net/1228031/">https://paste.debian.net/1228031/</a> </span></div><div class="line" id="182956"><span class="nick" style="color:#2e2a4a"><a href="#182956" label="[18:29:56]">&lt;oriansj&gt;</a></span><span class="message">and now I found the reason for the ungz.c compile problem for M2-Mesoplanet</span></div><div class="line" id="183033"><span class="nick" style="color:#2e2a4a"><a href="#183033" label="[18:30:33]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1228032/">https://paste.debian.net/1228032/</a> </span></div><div class="line" id="183205"><span class="nick" style="color:#2e2a4a"><a href="#183205" label="[18:32:05]">&lt;oriansj&gt;</a></span><span class="message">in short M2-Mesoplanet isn't eliminating the #if defined(__M2__) block in the output but rather just replacing the __M2__ with 42 and dumping it out (which doesn't produce the correct result in the output)</span></div><div class="line" id="183435"><span class="nick" style="color:#6b8072"><a href="#183435" label="[18:34:35]">&lt;stikonas&gt;</a></span><span class="message">yeah, your output looks better</span></div><div class="line" id="183627"><span class="nick" style="color:#6b8072"><a href="#183627" label="[18:36:27]">&lt;stikonas&gt;</a></span><span class="message">oh, M2libc needs update</span></div><div class="line" id="183759"><span class="nick" style="color:#6b8072"><a href="#183759" label="[18:37:59]">&lt;stikonas&gt;</a></span><span class="message">hmm, no, the problem is somewhere else</span></div><div class="line" id="183813"><span class="nick" style="color:#6b8072"><a href="#183813" label="[18:38:13]">&lt;stikonas&gt;</a></span><span class="message">oriansj: is #ifdef __M2__ also broken?</span></div><div class="line" id="183817"><span class="nick" style="color:#6b8072"><a href="#183817" label="[18:38:17]">&lt;stikonas&gt;</a></span><span class="message">or just #if defined</span></div><div class="line" id="183824"><span class="nick" style="color:#2e2a4a"><a href="#183824" label="[18:38:24]">&lt;oriansj&gt;</a></span><span class="message">stikonas: no I have a different fix</span></div><div class="line" id="183827"><span class="nick" style="color:#2e2a4a"><a href="#183827" label="[18:38:27]">&lt;oriansj&gt;</a></span><span class="message">give me a minute</span></div><div class="line" id="195925"><span class="nick" style="color:#2e2a4a"><a href="#195925" label="[19:59:25]">&lt;oriansj&gt;</a></span><span class="message">well that was a fast way to max out RAM</span></div><div class="line" id="200033"><span class="nick" style="color:#2e2a4a"><a href="#200033" label="[20:00:33]">&lt;oriansj&gt;</a></span><span class="message">ok now __M2__ will expand to __M2__ in the output while still being defined for the macro functionality</span></div><div class="line" id="200125"><span class="nick" style="color:#2e2a4a"><a href="#200125" label="[20:01:25]">&lt;oriansj&gt;</a></span><span class="message">and ungz.c is now able to be compiled with just: ./bin/M2-Mesoplanet -f ../mescc-tools-extra/ungz.c -o ungz</span></div><div class="line" id="200338"><span class="nick" style="color:#2e2a4a"><a href="#200338" label="[20:03:38]">&lt;oriansj&gt;</a></span><span class="message">and patches are up</span></div><div class="line" id="204617"><span class="nick" style="color:#2e2a4a"><a href="#204617" label="[20:46:17]">&lt;oriansj&gt;</a></span><span class="message">stikonas: it working now for you?</span></div><div class="line" id="205254"><span class="nick" style="color:#2e2a4a"><a href="#205254" label="[20:52:54]">&lt;oriansj&gt;</a></span><span class="message">anyone?</span></div><div class="line" id="210644"><span class="nick" style="color:#6b8072"><a href="#210644" label="[21:06:44]">&lt;stikonas&gt;</a></span><span class="message">one moment, checking</span></div><div class="line" id="210847"><span class="nick" style="color:#6b8072"><a href="#210847" label="[21:08:47]">&lt;stikonas&gt;</a></span><span class="message">no, same problem as before, empty files</span></div><div class="line" id="210928"><span class="nick" style="color:#6b8072"><a href="#210928" label="[21:09:28]">&lt;stikonas&gt;</a></span><span class="message">hmm, I'll have to investigate it...</span></div><div class="line" id="212116"><span class="nick" style="color:#2e2a4a"><a href="#212116" label="[21:21:16]">&lt;oriansj&gt;</a></span><span class="message">is the /tmp/M2-Mesoplanet-* file there?</span></div><div class="line" id="212215"><span class="nick" style="color:#2e2a4a"><a href="#212215" label="[21:22:15]">&lt;oriansj&gt;</a></span><span class="message">also does which M2-Planet show the correct file?</span></div><div class="line" id="220330"><span class="nick" style="color:#6b8072"><a href="#220330" label="[22:03:30]">&lt;stikonas&gt;</a></span><span class="message">yes tmp/Mesoplanet file is there</span></div><div class="line" id="220352"><span class="nick" style="color:#6b8072"><a href="#220352" label="[22:03:52]">&lt;stikonas&gt;</a></span><span class="message">oh, this time I might have forgotten to add M2-Planet to PATH</span></div><div class="line" id="220451"><span class="nick" style="color:#2e2a4a"><a href="#220451" label="[22:04:51]">&lt;oriansj&gt;</a></span><span class="message">sounds like we should add a sanity check to detect if M2-Planet, M1, blood-elf and hex2 actually exist before trying to use them</span></div><div class="line" id="220513"><span class="nick" style="color:#6b8072"><a href="#220513" label="[22:05:13]">&lt;stikonas&gt;</a></span><span class="message">no, it's still there</span></div><div class="line" id="220518"><span class="nick" style="color:#6b8072"><a href="#220518" label="[22:05:18]">&lt;stikonas&gt;</a></span><span class="message">even after I added M2-PLanet to path</span></div><div class="line" id="220523"><span class="nick" style="color:#6b8072"><a href="#220523" label="[22:05:23]">&lt;stikonas&gt;</a></span><span class="message">output is empty</span></div><div class="line" id="220557"><span class="nick" style="color:#2e2a4a"><a href="#220557" label="[22:05:57]">&lt;oriansj&gt;</a></span><span class="message">ok, and when you manually run the M2-Planet command?</span></div><div class="line" id="220558"><span class="nick" style="color:#6b8072"><a href="#220558" label="[22:05:58]">&lt;stikonas&gt;</a></span><span class="message">but if I manually run that command that M2-Mesoplanet outputs</span></div><div class="line" id="220600"><span class="nick" style="color:#6b8072"><a href="#220600" label="[22:06:00]">&lt;stikonas&gt;</a></span><span class="message">it works</span></div><div class="line" id="220622"><span class="nick" style="color:#6b8072"><a href="#220622" label="[22:06:22]">&lt;stikonas&gt;</a></span><span class="message">hmm, so something wrong with spawning</span></div><div class="line" id="220636"><span class="nick" style="color:#2e2a4a"><a href="#220636" label="[22:06:36]">&lt;oriansj&gt;</a></span><span class="message">ok</span></div><div class="line" id="220650"><span class="nick" style="color:#6b8072"><a href="#220650" label="[22:06:50]">&lt;stikonas&gt;</a></span><span class="message">but this is also reproducible on gcc-compiled version</span></div><div class="line" id="220703"><span class="nick" style="color:#6b8072"><a href="#220703" label="[22:07:03]">&lt;stikonas&gt;</a></span><span class="message">so can't be M2libc problem</span></div><div class="line" id="220706"><span class="nick" style="color:#6b8072"><a href="#220706" label="[22:07:06]">&lt;stikonas&gt;</a></span><span class="message">strange</span></div><div class="line" id="220801"><span class="nick" style="color:#2e2a4a"><a href="#220801" label="[22:08:01]">&lt;oriansj&gt;</a></span><span class="message">hmm</span></div><div class="line" id="220826"><span class="nick" style="color:#6b8072"><a href="#220826" label="[22:08:26]">&lt;stikonas&gt;</a></span><span class="message">[pid 345935] execve(&quot;/home/andrius/repositories/bootstrap/stage0-posix/M2-Planet&quot;, [&quot;M2-Planet&quot;, &quot;--file&quot;, &quot;/tmp/M2-Mesoplanet-OxPtp4&quot;, &quot;--output&quot;, &quot;/tmp/M2-Planet-ZMbz2v&quot;, &quot;--architecture&quot;, &quot;amd64&quot;, &quot;--debug&quot;], 0x7ffda7b58388 /* 100 vars */) = -1 EACCES (Permission denied)</span></div><div class="line" id="220840"><span class="nick" style="color:#6b8072"><a href="#220840" label="[22:08:40]">&lt;stikonas&gt;</a></span><span class="message">but why...</span></div><div class="line" id="220901"><span class="nick" style="color:#2e2a4a"><a href="#220901" label="[22:09:01]">&lt;oriansj&gt;</a></span><span class="message">ls -hal /home/andrius/repositories/bootstrap/stage0-posix/M2-Planet</span></div><div class="line" id="220933"><span class="nick" style="color:#2e2a4a"><a href="#220933" label="[22:09:33]">&lt;oriansj&gt;</a></span><span class="message">it should be -rwxr-x---</span></div><div class="line" id="220954"><span class="nick" style="color:#6b8072"><a href="#220954" label="[22:09:54]">&lt;stikonas&gt;</a></span><span class="message">oh wait, why is even reading that directory</span></div><div class="line" id="221007"><span class="nick" style="color:#6b8072"><a href="#221007" label="[22:10:07]">&lt;stikonas&gt;</a></span><span class="message">it should run binary from AMD64/bin/M2-Planet</span></div><div class="line" id="221017"><span class="nick" style="color:#6b8072"><a href="#221017" label="[22:10:17]">&lt;stikonas&gt;</a></span><span class="message">oh I see</span></div><div class="line" id="221021"><span class="nick" style="color:#6b8072"><a href="#221021" label="[22:10:21]">&lt;stikonas&gt;</a></span><span class="message">I've added wrong thing to PATH</span></div><div class="line" id="221036"><span class="nick" style="color:#6b8072"><a href="#221036" label="[22:10:36]">&lt;stikonas&gt;</a></span><span class="message">well, actually I have both stage-posix root and bin directories in PATH</span></div><div class="line" id="221045"><span class="nick" style="color:#6b8072"><a href="#221045" label="[22:10:45]">&lt;stikonas&gt;</a></span><span class="message">and it tries to execute directory</span></div><div class="line" id="221124"><span class="nick" style="color:#6b8072"><a href="#221124" label="[22:11:24]">&lt;stikonas&gt;</a></span><span class="message">ok, it works now</span></div><div class="line" id="221156"><span class="nick" style="color:#6b8072"><a href="#221156" label="[22:11:56]">&lt;stikonas&gt;</a></span><span class="message">oriansj: thanks for helping me figure this out</span></div><div class="line" id="221203"><span class="nick" style="color:#6b8072"><a href="#221203" label="[22:12:03]">&lt;stikonas&gt;</a></span><span class="message">it was my fault...</span></div><div class="line" id="221221"><span class="nick" style="color:#6b8072"><a href="#221221" label="[22:12:21]">&lt;stikonas&gt;</a></span><span class="message">now the question is, should we start using Mesoplanet for building stuff in stage0-posix?</span></div><div class="line" id="221312"><span class="nick" style="color:#6b8072"><a href="#221312" label="[22:13:12]">&lt;stikonas&gt;</a></span><span class="message">or keep current kaem scripts invoking M2-Planet/blood-elf/M1/hex2</span></div><div class="line" id="221956"><span class="nick" style="color:#2e2a4a"><a href="#221956" label="[22:19:56]">&lt;oriansj&gt;</a></span><span class="message">stikonas: I'm thinking we change stage0-posix to use M2-Mesoplanet for everything after we have M1, blood-elf, hex2 and M2-planet</span></div><div class="line" id="222040"><span class="nick" style="color:#2e2a4a"><a href="#222040" label="[22:20:40]">&lt;oriansj&gt;</a></span><span class="message">however we absolutely should add some logic in cc_spawn.c to give a useful error message when execve fails like it did for you</span></div><div class="line" id="222239"><span class="nick" style="color:#2e2a4a"><a href="#222239" label="[22:22:39]">&lt;oriansj&gt;</a></span><span class="message">stikonas: also I don't think of your issue as something needing fault but rather a clear sign of something we could improve in M2-Mesoplanet</span></div><div class="line" id="222322"><span class="nick" style="color:#2e2a4a"><a href="#222322" label="[22:23:22]">&lt;oriansj&gt;</a></span><span class="message">say make M2-Mesoplanet responsible for mescc-tools-extra builds</span></div><div class="line" id="222330"><span class="nick" style="color:#2e2a4a"><a href="#222330" label="[22:23:30]">&lt;oriansj&gt;</a></span><span class="message">it'll certainly simplify everything</span></div><div class="line" id="222432"><span class="nick" style="color:#2e2a4a"><a href="#222432" label="[22:24:32]">&lt;oriansj&gt;</a></span><span class="message">although you may wish to set PATH in kaem prior to its use to prevent it from picking up anything from the environment</span></div><div class="line" id="222631"><span class="nick" style="color:#6b8072"><a href="#222631" label="[22:26:31]">&lt;stikonas&gt;</a></span><span class="message">well, I thought we need at least full kaem</span></div><div class="line" id="222655"><span class="nick" style="color:#6b8072"><a href="#222655" label="[22:26:55]">&lt;stikonas&gt;</a></span><span class="message">hmm, or maybe not</span></div><div class="line" id="222706"><span class="nick" style="color:#2e2a4a"><a href="#222706" label="[22:27:06]">&lt;oriansj&gt;</a></span><span class="message">well full kaem to set a PATH</span></div><div class="line" id="222707"><span class="nick" style="color:#6b8072"><a href="#222707" label="[22:27:07]">&lt;stikonas&gt;</a></span><span class="message">it's just that before kaem we can't set environmental variables</span></div><div class="line" id="222719"><span class="nick" style="color:#6b8072"><a href="#222719" label="[22:27:19]">&lt;stikonas&gt;</a></span><span class="message">although maybe we don't need any</span></div><div class="line" id="222748"><span class="nick" style="color:#6b8072"><a href="#222748" label="[22:27:48]">&lt;stikonas&gt;</a></span><span class="message">anyway, let me first update stage0-posix to have all required submodules</span></div><div class="line" id="222926"><span class="nick" style="color:#2e2a4a"><a href="#222926" label="[22:29:26]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well spawning requires PATH</span></div><div class="line" id="222937"><span class="nick" style="color:#6b8072"><a href="#222937" label="[22:29:37]">&lt;stikonas&gt;</a></span><span class="message">oh yes</span></div><div class="line" id="222942"><span class="nick" style="color:#6b8072"><a href="#222942" label="[22:29:42]">&lt;stikonas&gt;</a></span><span class="message">so after kaem then</span></div><div class="line" id="223121"><span class="nick" style="color:#6b8072"><a href="#223121" label="[22:31:21]">&lt;stikonas&gt;</a></span><span class="message">oh actually maybe after M2-Planet</span></div><div class="line" id="223140"><span class="nick" style="color:#6b8072"><a href="#223140" label="[22:31:40]">&lt;stikonas&gt;</a></span><span class="message">right... because initial M2 binary would not be picked up by M2-Mesoplanet</span></div><div class="line" id="223209"><span class="nick" style="color:#6b8072"><a href="#223209" label="[22:32:09]">&lt;stikonas&gt;</a></span><span class="message">so yes, mescc-tools-extra then</span></div><div class="line" id="223254"><span class="nick" style="color:#2e2a4a"><a href="#223254" label="[22:32:54]">&lt;oriansj&gt;</a></span><span class="message">and I just upgraded M2-Mesoplanet to produce a meaningful error message if it is unable to execute any of the essential binaries</span></div><div class="line" id="223259"><span class="nick" style="color:#2e2a4a"><a href="#223259" label="[22:32:59]">&lt;oriansj&gt;</a></span><span class="message">and patch is up</span></div><div class="line" id="223304"><span class="nick" style="color:#6b8072"><a href="#223304" label="[22:33:04]">&lt;stikonas&gt;</a></span><span class="message">ok, let me pull that in too</span></div><div class="line" id="223431"><span class="nick" style="color:#2e2a4a"><a href="#223431" label="[22:34:31]">&lt;oriansj&gt;</a></span><span class="message">and if possible please verify that it would catch and provide useful information if you have the same issue as you discovered.</span></div><div class="line" id="223515"><span class="nick" style="color:#6b8072"><a href="#223515" label="[22:35:15]">&lt;stikonas&gt;</a></span><span class="message">sure</span></div><div class="line" id="223520"><span class="nick" style="color:#2e2a4a"><a href="#223520" label="[22:35:20]">&lt;oriansj&gt;</a></span><span class="message">as I don't want someone else to also run into that sort of bug in M2-Mesoplanet if possible</span></div><div class="line" id="223915"><span class="nick" style="color:#6b8072"><a href="#223915" label="[22:39:15]">&lt;stikonas&gt;</a></span><span class="message">ok, got that error messagen ow</span></div><div class="line" id="223953"><span class="nick" style="color:#6b8072"><a href="#223953" label="[22:39:53]">&lt;stikonas&gt;</a></span><span class="message">oriansj: one idea for optimization if it's not hard</span></div><div class="line" id="223957"><span class="nick" style="color:#2e2a4a"><a href="#223957" label="[22:39:57]">&lt;oriansj&gt;</a></span><span class="message">good, now I found another place where we could improve the error reporting</span></div><div class="line" id="224007"><span class="nick" style="color:#6b8072"><a href="#224007" label="[22:40:07]">&lt;stikonas&gt;</a></span><span class="message">right now I think include happens unconditionally</span></div><div class="line" id="224016"><span class="nick" style="color:#6b8072"><a href="#224016" label="[22:40:16]">&lt;stikonas&gt;</a></span><span class="message">even if it's wrong #if branch</span></div><div class="line" id="224033"><span class="nick" style="color:#6b8072"><a href="#224033" label="[22:40:33]">&lt;stikonas&gt;</a></span><span class="message">that is probably what slows M2-Mesoplanet down</span></div><div class="line" id="224138"><span class="nick" style="color:#2e2a4a"><a href="#224138" label="[22:41:38]">&lt;oriansj&gt;</a></span><span class="message">that is true</span></div><div class="line" id="224211"><span class="nick" style="color:#2e2a4a"><a href="#224211" label="[22:42:11]">&lt;oriansj&gt;</a></span><span class="message">and it is probably should be something we could optimize</span></div><div class="line" id="224256"><span class="nick" style="color:#2e2a4a"><a href="#224256" label="[22:42:56]">&lt;oriansj&gt;</a></span><span class="message">fortunately it only hits each file only once (previously it hit them multiple times and really slowed things down)</span></div><div class="line" id="224323"><span class="nick" style="color:#6b8072"><a href="#224323" label="[22:43:23]">&lt;stikonas&gt;</a></span><span class="message">oh yeah, that would have been much slower</span></div><div class="line" id="224423"><span class="nick" style="color:#2e2a4a"><a href="#224423" label="[22:44:23]">&lt;oriansj&gt;</a></span><span class="message">and I found something wrong <a rel="nofollow" href="https://paste.debian.net/1228057/">https://paste.debian.net/1228057/</a> </span></div><div class="line" id="224457"><span class="nick" style="color:#2e2a4a"><a href="#224457" label="[22:44:57]">&lt;oriansj&gt;</a></span><span class="message">a spawned program returning 1; wouldn't cause that logic to be hit at all</span></div><div class="line" id="224600"><span class="nick" style="color:#6b8072"><a href="#224600" label="[22:46:00]">&lt;stikonas&gt;</a></span><span class="message">oh, isn't this code from kaem?</span></div><div class="line" id="224634"><span class="nick" style="color:#2e2a4a"><a href="#224634" label="[22:46:34]">&lt;oriansj&gt;</a></span><span class="message">yeah</span></div><div class="line" id="224649"><span class="nick" style="color:#6b8072"><a href="#224649" label="[22:46:49]">&lt;stikonas&gt;</a></span><span class="message">oriansj: return code is given by (status &amp; 0xff00) &gt;&gt; 8</span></div><div class="line" id="224738"><span class="nick" style="color:#6b8072"><a href="#224738" label="[22:47:38]">&lt;stikonas&gt;</a></span><span class="message">strange, I thought kaem works with returning 1</span></div><div class="line" id="224744"><span class="nick" style="color:#6b8072"><a href="#224744" label="[22:47:44]">&lt;stikonas&gt;</a></span><span class="message">at least I tested it with /bin/false</span></div><div class="line" id="224808"><span class="nick" style="color:#2e2a4a"><a href="#224808" label="[22:48:08]">&lt;oriansj&gt;</a></span><span class="message">what are the bottom 8 bits for?</span></div><div class="line" id="224827"><span class="nick" style="color:#6b8072"><a href="#224827" label="[22:48:27]">&lt;stikonas&gt;</a></span><span class="message">well, that's what documentation told to do</span></div><div class="line" id="224829"><span class="nick" style="color:#6b8072"><a href="#224829" label="[22:48:29]">&lt;stikonas&gt;</a></span><span class="message">let me find</span></div><div class="line" id="225006"><span class="nick" style="color:#6b8072"><a href="#225006" label="[22:50:06]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://git.musl-libc.org/cgit/musl/tree/include/sys/wait.h#n48">https://git.musl-libc.org/cgit/musl/tree/include/sys/wait.h#n48</a> </span></div><div class="line" id="225014"><span class="nick" style="color:#6b8072"><a href="#225014" label="[22:50:14]">&lt;stikonas&gt;</a></span><span class="message">so probably bottom 8 bits store other info</span></div><div class="line" id="225026"><span class="nick" style="color:#6b8072"><a href="#225026" label="[22:50:26]">&lt;stikonas&gt;</a></span><span class="message">e.g. whether it crashed, etc...</span></div><div class="line" id="225144"><span class="nick" style="color:#6b8072"><a href="#225144" label="[22:51:44]">&lt;stikonas&gt;</a></span><span class="message">ok, stage0-posix submodules are udpated</span></div><div class="line" id="225152"><span class="nick" style="color:#6b8072"><a href="#225152" label="[22:51:52]">&lt;stikonas&gt;</a></span><span class="message">so should have a working Mesoplanet now</span></div><div class="line" id="225441"><span class="nick" style="color:#2e2a4a"><a href="#225441" label="[22:54:41]">&lt;oriansj&gt;</a></span><span class="message">ok since we aggressively fuzz M2-Planet, M1, blood-elf and hex2, they will likely never be set</span></div><div class="line" id="225614"><span class="nick" style="color:#2e2a4a"><a href="#225614" label="[22:56:14]">&lt;oriansj&gt;</a></span><span class="message">hmm but probably could be used in output in kaem.</span></div><div class="line" id="231804"><span class="nick" style="color:#2e2a4a"><a href="#231804" label="[23:18:04]">&lt;oriansj&gt;</a></span><span class="message">hmm I am tempted to flip kaem's behavior in regards to failing programs</span></div><div class="line" id="231833"><span class="nick" style="color:#2e2a4a"><a href="#231833" label="[23:18:33]">&lt;oriansj&gt;</a></span><span class="message">say --non-strict instead of --strict; so that the default is to be strict and exit on failure</span></div><div class="line" id="231848"><span class="nick" style="color:#2e2a4a"><a href="#231848" label="[23:18:48]">&lt;oriansj&gt;</a></span><span class="message">fossy: thoughts?</span></div><br /></div></body></html>