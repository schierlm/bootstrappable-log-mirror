<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-04-14.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="005155"><span class="nick" style="color:#8dd3c7"><a href="#005155" label="[00:51:55]">&lt;stikonas&gt;</a></span><span class="message">bauen1: oh? do you have error logs?</span></div><div class="line" id="005248"><span class="nick" style="color:#8dd3c7"><a href="#005248" label="[00:52:48]">&lt;stikonas&gt;</a></span><span class="message">fossy: can we merge <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/97">https://github.com/fosslinux/live-bootstrap/pull/97</a>  ?</span></div><div class="line" id="005310"><span class="nick" style="color:#8dd3c7"><a href="#005310" label="[00:53:10]">&lt;stikonas&gt;</a></span><span class="message">you mentionde that I need to just resolve conflicts, although, you didn't give me green tick, so I don't wnat to merge myself then</span></div><div class="line" id="012625"><span class="nick" style="color:#2e2a4a"><a href="#012625" label="[01:26:25]">&lt;OriansJ`&gt;</a></span><span class="message">gef: if I wanted to have a starting point for x86 bios call level bootstrap, I'd start with this: <a rel="nofollow" href="https://github.com/nanochess/bootOS">https://github.com/nanochess/bootOS</a> </span></div><div class="line" id="012727"><span class="nick" style="color:#2e2a4a"><a href="#012727" label="[01:27:27]">&lt;OriansJ`&gt;</a></span><span class="message">Then one writes a floppy loader in hex0 and then one need only replace the system calls in stage0-posix to bios calls and you are done.</span></div><div class="line" id="012939"><span class="nick" style="color:#2e2a4a"><a href="#012939" label="[01:29:39]">&lt;OriansJ`&gt;</a></span><span class="message">basically one loads the whole source floppy into RAM at a known memory address and writes the result into a known memory address and dump the whole thing to a floppy disk when done. Which works fine as none of the binaries from hex0 to M2-Planet are even close to the size of a floppy disk and once you have M2-Planet, just write a minimal posix in the M2-Planet C compiler subset.</span></div><div class="line" id="013048"><span class="nick" style="color:#2e2a4a"><a href="#013048" label="[01:30:48]">&lt;OriansJ`&gt;</a></span><span class="message">you can get 90% of the work done by just porting stage0-posix to DOS or CPM. (Which I will do once I sort out the mes-m2 business)</span></div><div class="line" id="021551"><span class="nick" style="color:#8dd3c7"><a href="#021551" label="[02:15:51]">&lt;stikonas&gt;</a></span><span class="message">but arguiably bios calls aren't really better than posix calls</span></div><div class="line" id="021556"><span class="nick" style="color:#8dd3c7"><a href="#021556" label="[02:15:56]">&lt;stikonas&gt;</a></span><span class="message">it's just a different environment</span></div><div class="line" id="022417"><span class="nick" style="color:#6b8072"><a href="#022417" label="[02:24:17]">&lt;fossy&gt;</a></span><span class="message">stikonas: merged both</span></div><div class="line" id="022432"><span class="nick" style="color:#6b8072"><a href="#022432" label="[02:24:32]">&lt;fossy&gt;</a></span><span class="message">nah, bios calls are better than posix calls</span></div><div class="line" id="022436"><span class="nick" style="color:#6b8072"><a href="#022436" label="[02:24:36]">&lt;fossy&gt;</a></span><span class="message">they are closer to the metal</span></div><div class="line" id="022447"><span class="nick" style="color:#2e2a4a"><a href="#022447" label="[02:24:47]">&lt;OriansJ`&gt;</a></span><span class="message">stikonas: well it depends very very heavily on the size of the BIOS. For example original IBM 5150 PC bios was four 2kB ROM chips (so 8kB)</span></div><div class="line" id="022448"><span class="nick" style="color:#6b8072"><a href="#022448" label="[02:24:48]">&lt;fossy&gt;</a></span><span class="message">which removes a layer of abstraction and hence one of the seeds</span></div><div class="line" id="022459"><span class="nick" style="color:#2e2a4a"><a href="#022459" label="[02:24:59]">&lt;OriansJ`&gt;</a></span><span class="message">but UEFI can be 100+MB in size</span></div><div class="line" id="022506"><span class="nick" style="color:#6b8072"><a href="#022506" label="[02:25:06]">&lt;fossy&gt;</a></span><span class="message">yeah ._.</span></div><div class="line" id="022520"><span class="nick" style="color:#6b8072"><a href="#022520" label="[02:25:20]">&lt;fossy&gt;</a></span><span class="message">but either way using posix calls requires running a kernel on top of the bios</span></div><div class="line" id="022531"><span class="nick" style="color:#6b8072"><a href="#022531" label="[02:25:31]">&lt;fossy&gt;</a></span><span class="message">it just adds another layer to whatever is below</span></div><div class="line" id="022637"><span class="nick" style="color:#2e2a4a"><a href="#022637" label="[02:26:37]">&lt;OriansJ`&gt;</a></span><span class="message">fortunately porting to CPM/DOS should get stage0 to 90% of running on x86 bare metal</span></div><div class="line" id="022655"><span class="nick" style="color:#2e2a4a"><a href="#022655" label="[02:26:55]">&lt;OriansJ`&gt;</a></span><span class="message">but first I have one heck of a mes-m2 puzzle to solve.</span></div><div class="line" id="022910"><span class="nick" style="color:#8dd3c7"><a href="#022910" label="[02:29:10]">&lt;stikonas&gt;</a></span><span class="message">fossy: thanks!</span></div><div class="line" id="022913"><span class="nick" style="color:#2e2a4a"><a href="#022913" label="[02:29:13]">&lt;OriansJ`&gt;</a></span><span class="message">1) why the heck does identical binaries &quot;assert fail: string-&gt;type == TSTRING&quot; on one system but successfully compile on another 2) get mes-m2 into a form that GCC can compile</span></div><div class="line" id="022931"><span class="nick" style="color:#8dd3c7"><a href="#022931" label="[02:29:31]">&lt;stikonas&gt;</a></span><span class="message">OriansJ`: live-bootstrap now merged your suggestion of not rebuilding mes</span></div><div class="line" id="022952"><span class="nick" style="color:#6b8072"><a href="#022952" label="[02:29:52]">&lt;fossy&gt;</a></span><span class="message">stikonas: from my initial testing i *think* we should be able to use metaconfig for recent perl</span></div><div class="line" id="023012"><span class="nick" style="color:#6b8072"><a href="#023012" label="[02:30:12]">&lt;fossy&gt;</a></span><span class="message">thankfully there is one perl dev who is receptive to using metaconfig in distros so i'm following debian's path on using metaconfig</span></div><div class="line" id="023013"><span class="nick" style="color:#8dd3c7"><a href="#023013" label="[02:30:13]">&lt;stikonas&gt;</a></span><span class="message">yeah, I was more hopeful once you said Debian uses it</span></div><div class="line" id="023023"><span class="nick" style="color:#8dd3c7"><a href="#023023" label="[02:30:23]">&lt;stikonas&gt;</a></span><span class="message">that's good</span></div><div class="line" id="023032"><span class="nick" style="color:#6b8072"><a href="#023032" label="[02:30:32]">&lt;fossy&gt;</a></span><span class="message">yeah 5.10 isn't possible because of git/cvs history</span></div><div class="line" id="023034"><span class="nick" style="color:#8dd3c7"><a href="#023034" label="[02:30:34]">&lt;stikonas&gt;</a></span><span class="message">I might forsee some difficulty though</span></div><div class="line" id="023039"><span class="nick" style="color:#6b8072"><a href="#023039" label="[02:30:39]">&lt;fossy&gt;</a></span><span class="message">m?</span></div><div class="line" id="023042"><span class="nick" style="color:#8dd3c7"><a href="#023042" label="[02:30:42]">&lt;stikonas&gt;</a></span><span class="message">with reproducible builds</span></div><div class="line" id="023050"><span class="nick" style="color:#6b8072"><a href="#023050" label="[02:30:50]">&lt;fossy&gt;</a></span><span class="message">oh, yeah, that's quite possible</span></div><div class="line" id="023051"><span class="nick" style="color:#8dd3c7"><a href="#023051" label="[02:30:51]">&lt;stikonas&gt;</a></span><span class="message">but maybe it will just work</span></div><div class="line" id="023107"><span class="nick" style="color:#8dd3c7"><a href="#023107" label="[02:31:07]">&lt;stikonas&gt;</a></span><span class="message">that's something that's good to solve anyway</span></div><div class="line" id="023116"><span class="nick" style="color:#6b8072"><a href="#023116" label="[02:31:16]">&lt;fossy&gt;</a></span><span class="message">i'm guessing that metaconfig will create a Configure that != Configure.orig</span></div><div class="line" id="023123"><span class="nick" style="color:#6b8072"><a href="#023123" label="[02:31:23]">&lt;fossy&gt;</a></span><span class="message">but should be reproducible anyways</span></div><div class="line" id="023127"><span class="nick" style="color:#8dd3c7"><a href="#023127" label="[02:31:27]">&lt;stikonas&gt;</a></span><span class="message">or maybe some distros (debian or guix solved it)</span></div><div class="line" id="023129"><span class="nick" style="color:#6b8072"><a href="#023129" label="[02:31:29]">&lt;fossy&gt;</a></span><span class="message">the script isn't all that complex</span></div><div class="line" id="023133"><span class="nick" style="color:#8dd3c7"><a href="#023133" label="[02:31:33]">&lt;stikonas&gt;</a></span><span class="message">yeah, let's see when we get there</span></div><div class="line" id="023135"><span class="nick" style="color:#6b8072"><a href="#023135" label="[02:31:35]">&lt;fossy&gt;</a></span><span class="message">does guix do metaconfig?</span></div><div class="line" id="023144"><span class="nick" style="color:#8dd3c7"><a href="#023144" label="[02:31:44]">&lt;stikonas&gt;</a></span><span class="message">do you know what perl is needed to run recent metaconfig?</span></div><div class="line" id="023151"><span class="nick" style="color:#6b8072"><a href="#023151" label="[02:31:51]">&lt;fossy&gt;</a></span><span class="message">oh, old</span></div><div class="line" id="023151"><span class="nick" style="color:#8dd3c7"><a href="#023151" label="[02:31:51]">&lt;stikonas&gt;</a></span><span class="message">no idea, maybe not...</span></div><div class="line" id="023155"><span class="nick" style="color:#8dd3c7"><a href="#023155" label="[02:31:55]">&lt;stikonas&gt;</a></span><span class="message">oh ok</span></div><div class="line" id="023203"><span class="nick" style="color:#6b8072"><a href="#023203" label="[02:32:03]">&lt;fossy&gt;</a></span><span class="message">i think it's use 5.004 or smth?</span></div><div class="line" id="023219"><span class="nick" style="color:#8dd3c7"><a href="#023219" label="[02:32:19]">&lt;stikonas&gt;</a></span><span class="message">well, I think perl 5.8 is definitely possible  but if we can get to something new with Configure, that's better</span></div><div class="line" id="023219"><span class="nick" style="color:#6b8072"><a href="#023219" label="[02:32:19]">&lt;fossy&gt;</a></span><span class="message">the only reason i dind't jump straight to new is because regen.pl uses a bunch of modules introduced in 5.8</span></div><div class="line" id="023230"><span class="nick" style="color:#6b8072"><a href="#023230" label="[02:32:30]">&lt;fossy&gt;</a></span><span class="message">well i have 5.10 done without modules</span></div><div class="line" id="023231"><span class="nick" style="color:#8dd3c7"><a href="#023231" label="[02:32:31]">&lt;stikonas&gt;</a></span><span class="message">oh I see</span></div><div class="line" id="023245"><span class="nick" style="color:#8dd3c7"><a href="#023245" label="[02:32:45]">&lt;stikonas&gt;</a></span><span class="message">and metaconfig doesn't need modules?</span></div><div class="line" id="023248"><span class="nick" style="color:#6b8072"><a href="#023248" label="[02:32:48]">&lt;fossy&gt;</a></span><span class="message">without ext/ modules</span></div><div class="line" id="023250"><span class="nick" style="color:#6b8072"><a href="#023250" label="[02:32:50]">&lt;fossy&gt;</a></span><span class="message">yeah</span></div><div class="line" id="023301"><span class="nick" style="color:#8dd3c7"><a href="#023301" label="[02:33:01]">&lt;stikonas&gt;</a></span><span class="message">oh that's better than I might have expected</span></div><div class="line" id="023306"><span class="nick" style="color:#8dd3c7"><a href="#023306" label="[02:33:06]">&lt;stikonas&gt;</a></span><span class="message">considering all the mess in perl :D</span></div><div class="line" id="023325"><span class="nick" style="color:#6b8072"><a href="#023325" label="[02:33:25]">&lt;fossy&gt;</a></span><span class="message">it is very  messy, you have to have exactly the right vesion of metaconfig, but metaconfig itself isn't bad software :P</span></div><div class="line" id="023333"><span class="nick" style="color:#6b8072"><a href="#023333" label="[02:33:33]">&lt;fossy&gt;</a></span><span class="message">just the process of obtaining and using it on a codebase</span></div><div class="line" id="023338"><span class="nick" style="color:#8dd3c7"><a href="#023338" label="[02:33:38]">&lt;stikonas&gt;</a></span><span class="message">I see</span></div><div class="line" id="023354"><span class="nick" style="color:#8dd3c7"><a href="#023354" label="[02:33:54]">&lt;stikonas&gt;</a></span><span class="message">well, autotools have some compatibility problems too</span></div><div class="line" id="023408"><span class="nick" style="color:#6b8072"><a href="#023408" label="[02:34:08]">&lt;fossy&gt;</a></span><span class="message">cause the tarball with all the metaconfig stuff for perl contains two versions of metaconfig, and then there's an external version, and another one tagged for that release..</span></div><div class="line" id="023409"><span class="nick" style="color:#8dd3c7"><a href="#023409" label="[02:34:09]">&lt;stikonas&gt;</a></span><span class="message">although, it's more forgiving if you use different version</span></div><div class="line" id="023415"><span class="nick" style="color:#6b8072"><a href="#023415" label="[02:34:15]">&lt;fossy&gt;</a></span><span class="message">m yeah</span></div><div class="line" id="023438"><span class="nick" style="color:#6b8072"><a href="#023438" label="[02:34:38]">&lt;fossy&gt;</a></span><span class="message">i chose debian's ver of dist</span></div><div class="line" id="023453"><span class="nick" style="color:#6b8072"><a href="#023453" label="[02:34:53]">&lt;fossy&gt;</a></span><span class="message">dist being the package contianing metaconfig</span></div><div class="line" id="023549"><span class="nick" style="color:#8dd3c7"><a href="#023549" label="[02:35:49]">&lt;stikonas&gt;</a></span><span class="message">hmm, I should probably try building libunistring at some point</span></div><div class="line" id="023553"><span class="nick" style="color:#8dd3c7"><a href="#023553" label="[02:35:53]">&lt;stikonas&gt;</a></span><span class="message">that's definitely needed for guile</span></div><div class="line" id="023643"><span class="nick" style="color:#2e2a4a"><a href="#023643" label="[02:36:43]">&lt;OriansJ`&gt;</a></span><span class="message">originally I thought the mes-m2 failures had to do with the systems being virtualized but then when I tried a guixsd it worked just fine. So now I am looking at the possiblity that mes-m2 currently only runs correctly on systems with guix installed.</span></div><div class="line" id="023734"><span class="nick" style="color:#8dd3c7"><a href="#023734" label="[02:37:34]">&lt;stikonas&gt;</a></span><span class="message">hmm, somehow mes-m2 uses something from outside?</span></div><div class="line" id="023812"><span class="nick" style="color:#2e2a4a"><a href="#023812" label="[02:38:12]">&lt;OriansJ`&gt;</a></span><span class="message">Those wishing to help me crack this nut need only git clone <a rel="nofollow" href="https://github.com/oriansj/mes-m2">https://github.com/oriansj/mes-m2</a>  and have M2-Planet+mescc-tools in their path</span></div><div class="line" id="023821"><span class="nick" style="color:#8dd3c7"><a href="#023821" label="[02:38:21]">&lt;stikonas&gt;</a></span><span class="message">we also need to resolve other intermittent errors in live-bootstrap...</span></div><div class="line" id="023918"><span class="nick" style="color:#2e2a4a"><a href="#023918" label="[02:39:18]">&lt;OriansJ`&gt;</a></span><span class="message">stikonas: it feels that way that is why I've been trying to do a fully isolated build of mes-m2 to rule that out but I have been unable to get it to work in virtual machines that don't have guix installed.</span></div><div class="line" id="023946"><span class="nick" style="color:#2e2a4a"><a href="#023946" label="[02:39:46]">&lt;OriansJ`&gt;</a></span><span class="message">and the command that produces the error is of course the example in the README</span></div><div class="line" id="024114"><span class="nick" style="color:#2e2a4a"><a href="#024114" label="[02:41:14]">&lt;OriansJ`&gt;</a></span><span class="message">I'm going to carve out a few hours tomorrow to try to reduce what exactly in guix corresponds to the difference in behavior in hopes to reduce it down to something smaller.</span></div><div class="line" id="024234"><span class="nick" style="color:#8dd3c7"><a href="#024234" label="[02:42:34]">&lt;stikonas&gt;</a></span><span class="message">well, I ran make there and it worked</span></div><div class="line" id="024315"><span class="nick" style="color:#8dd3c7"><a href="#024315" label="[02:43:15]">&lt;stikonas&gt;</a></span><span class="message">Hello,M2-mes!</span></div><div class="line" id="024352"><span class="nick" style="color:#2e2a4a"><a href="#024352" label="[02:43:52]">&lt;OriansJ`&gt;</a></span><span class="message">stikonas: that ways works</span></div><div class="line" id="024401"><span class="nick" style="color:#2e2a4a"><a href="#024401" label="[02:44:01]">&lt;OriansJ`&gt;</a></span><span class="message">it is:  ./bin/mes --no-auto-compile -L module -e main scripts/mescc.scm -I include -v -S scaffold/exit-42.c -o foo.S</span></div><div class="line" id="024408"><span class="nick" style="color:#2e2a4a"><a href="#024408" label="[02:44:08]">&lt;OriansJ`&gt;</a></span><span class="message">that doesn't always work</span></div><div class="line" id="024415"><span class="nick" style="color:#8dd3c7"><a href="#024415" label="[02:44:15]">&lt;stikonas&gt;</a></span><span class="message">yeah, segfault</span></div><div class="line" id="024454"><span class="nick" style="color:#2e2a4a"><a href="#024454" label="[02:44:54]">&lt;OriansJ`&gt;</a></span><span class="message">it is the ENV</span></div><div class="line" id="024530"><span class="nick" style="color:#2e2a4a"><a href="#024530" label="[02:45:30]">&lt;OriansJ`&gt;</a></span><span class="message">running it via kaem with --init-mode produces the segfault on running systems</span></div><div class="line" id="024923"><span class="nick" style="color:#2e2a4a"><a href="#024923" label="[02:49:23]">&lt;OriansJ`&gt;</a></span><span class="message">ok I've got a minimal set of env variables to expore</span></div><div class="line" id="025058"><span class="nick" style="color:#2e2a4a"><a href="#025058" label="[02:50:58]">&lt;OriansJ`&gt;</a></span><span class="message">down to 20 ENV variables</span></div><div class="line" id="025222"><span class="nick" style="color:#2e2a4a"><a href="#025222" label="[02:52:22]">&lt;OriansJ`&gt;</a></span><span class="message">env variable is GUILE_LOAD_PATH=/home/$username/.guix-profile/share/guile/site/3.0/</span></div><div class="line" id="025328"><span class="nick" style="color:#2e2a4a"><a href="#025328" label="[02:53:28]">&lt;OriansJ`&gt;</a></span><span class="message">setting to GUILE_LOAD_PATH=/usr/share/guile/site/2.2/ works as well on the known working system</span></div><div class="line" id="025343"><span class="nick" style="color:#2e2a4a"><a href="#025343" label="[02:53:43]">&lt;OriansJ`&gt;</a></span><span class="message">stikonas: does export GUILE_LOAD_PATH=/usr/share/guile/site/2.2/ make it work for you?</span></div><div class="line" id="025503"><span class="nick" style="color:#8dd3c7"><a href="#025503" label="[02:55:03]">&lt;stikonas&gt;</a></span><span class="message">yes</span></div><div class="line" id="025547"><span class="nick" style="color:#2e2a4a"><a href="#025547" label="[02:55:47]">&lt;OriansJ`&gt;</a></span><span class="message">now to fix the README to reflect this new information</span></div><div class="line" id="025637"><span class="nick" style="color:#8dd3c7"><a href="#025637" label="[02:56:37]">&lt;stikonas&gt;</a></span><span class="message">but that sounds like something is loaded from there?</span></div><div class="line" id="025645"><span class="nick" style="color:#2e2a4a"><a href="#025645" label="[02:56:45]">&lt;OriansJ`&gt;</a></span><span class="message">looks like setting it to: GUILE_LOAD_PATH=. works as well</span></div><div class="line" id="025708"><span class="nick" style="color:#2e2a4a"><a href="#025708" label="[02:57:08]">&lt;OriansJ`&gt;</a></span><span class="message">so I think mes just segfaults when it tries to read an ENV variable that isn't there.</span></div><div class="line" id="025727"><span class="nick" style="color:#8dd3c7"><a href="#025727" label="[02:57:27]">&lt;stikonas&gt;</a></span><span class="message">even setting to GUILE_LOAD_PATH= works</span></div><div class="line" id="025739"><span class="nick" style="color:#8dd3c7"><a href="#025739" label="[02:57:39]">&lt;stikonas&gt;</a></span><span class="message">yeah, looks like it</span></div><div class="line" id="025750"><span class="nick" style="color:#8dd3c7"><a href="#025750" label="[02:57:50]">&lt;stikonas&gt;</a></span><span class="message">should it be fixed in mes though?</span></div><div class="line" id="025806"><span class="nick" style="color:#2e2a4a"><a href="#025806" label="[02:58:06]">&lt;OriansJ`&gt;</a></span><span class="message">stikonas: absolutely, janneke we have a bug report for you!</span></div><div class="line" id="025807"><span class="nick" style="color:#8dd3c7"><a href="#025807" label="[02:58:07]">&lt;stikonas&gt;</a></span><span class="message">instead of defining dummy env variable</span></div><div class="line" id="030654"><span class="nick" style="color:#2e2a4a"><a href="#030654" label="[03:06:54]">&lt;OriansJ`&gt;</a></span><span class="message">it is the (setenv &quot;GUILE_LOAD_PATH&quot; (string-append dir &quot;:&quot; (getenv &quot;GUILE_LOAD_PATH&quot;)))))</span></div><div class="line" id="030706"><span class="nick" style="color:#2e2a4a"><a href="#030706" label="[03:07:06]">&lt;OriansJ`&gt;</a></span><span class="message">in mes/module/mes/boot-0.scm</span></div><div class="line" id="030739"><span class="nick" style="color:#2e2a4a"><a href="#030739" label="[03:07:39]">&lt;OriansJ`&gt;</a></span><span class="message">getenv will return #f which isn't a string and the rest goes from there</span></div><div class="line" id="031253"><span class="nick" style="color:#2e2a4a"><a href="#031253" label="[03:12:53]">&lt;OriansJ`&gt;</a></span><span class="message">janneke: here is the diff required to stop the segfaults: <a rel="nofollow" href="https://paste.debian.net/1193677/">https://paste.debian.net/1193677/</a> </span></div><div class="line" id="033711"><span class="nick" style="color:#2e2a4a"><a href="#033711" label="[03:37:11]">&lt;OriansJ`&gt;</a></span><span class="message">and the fix is in mes-m2 along with a fix the for the double ctrl-d behavior in mes</span></div><div class="line" id="035240"><span class="nick" style="color:#6b8072"><a href="#035240" label="[03:52:40]">&lt;fossy&gt;</a></span><span class="message">gio: i was just re-browsing asmc and saw this: <a rel="nofollow" href="https://gitlab.com/giomasce/linux/tree/tcc2">https://gitlab.com/giomasce/linux/tree/tcc2</a> </span></div><div class="line" id="035243"><span class="nick" style="color:#6b8072"><a href="#035243" label="[03:52:43]">&lt;fossy&gt;</a></span><span class="message">does this work! :O</span></div><div class="line" id="035355"><span class="nick" style="color:#6b8072"><a href="#035355" label="[03:53:55]">&lt;fossy&gt;</a></span><span class="message">janneke: also, can one theoretically build mes c library using tinycc?</span></div><div class="line" id="041728"><span class="nick" style="color:#2e2a4a"><a href="#041728" label="[04:17:28]">&lt;OriansJ`&gt;</a></span><span class="message">fossy: looking at the libc files indicates provided you don't use the ones with the M1 asm but the binutils asm; then yeah it'll probably work</span></div><div class="line" id="071019"><span class="nick" style="color:#80b1d3"><a href="#071019" label="[07:10:19]">&lt;janneke&gt;</a></span><span class="message">OriansJ`: okay thanks -- yeah, GUILE_LOAD_PATH must be set anyway to find nyacc, of course</span></div><div class="line" id="071229"><span class="nick" style="color:#80b1d3"><a href="#071229" label="[07:12:29]">&lt;janneke&gt;</a></span><span class="message">there is no form of check for any of that, and that's bad</span></div><div class="line" id="073904"><span class="nick">***</span><span class="message notice">lukedashjr is now known as luke-jr</span></div><div class="line" id="074023"><span class="nick" style="color:#6d2462"><a href="#074023" label="[07:40:23]">&lt;gforce_d11977&gt;</a></span><span class="message">stikonas: fossy: i updated the issue 93: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/issues/93">https://github.com/fosslinux/live-bootstrap/issues/93</a> </span></div><div class="line" id="075345"><span class="nick" style="color:#6d2462"><a href="#075345" label="[07:53:45]">&lt;gforce_d11977&gt;</a></span><span class="message">and added issue 99 for bash-5.1 with a proposed work around: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/issues/99">https://github.com/fosslinux/live-bootstrap/issues/99</a> </span></div><div class="line" id="081517"><span class="nick" style="color:#80b1d3"><a href="#081517" label="[08:15:17]">&lt;janneke&gt;</a></span><span class="message">fossy: the mes c library is built by tinycc in the bootstrap, yes.  there is no other c library for tinycc to use, right?</span></div><div class="line" id="081953"><span class="nick" style="color:#80b1d3"><a href="#081953" label="[08:19:53]">&lt;janneke&gt;</a></span><span class="message">fossy: See <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/mes.git/plain/doc/talks/fosdem21/stage-mes.png?h=wip-talks">https://git.savannah.gnu.org/cgit/mes.git/plain/doc/talks/fosdem21/stage-mes.png?h=wip-talks</a> </span></div><div class="line" id="082423"><span class="nick" style="color:#6b8072"><a href="#082423" label="[08:24:23]">&lt;fossy&gt;</a></span><span class="message">janneke: oh yeah duh what am I saying I literally wrote a script where mes c library was built by tinycc</span></div><div class="line" id="083235"><span class="nick" style="color:#80b1d3"><a href="#083235" label="[08:32:35]">&lt;janneke&gt;</a></span><span class="message">fossy: ah, well you may not realise how much effort went into &quot;can theoretically build&quot; to &quot;can build well enough for a full gnu/linux bootstrap&quot;</span></div><div class="line" id="083618"><span class="nick" style="color:#6d2462"><a href="#083618" label="[08:36:18]">&lt;gforce_d11977&gt;</a></span><span class="message">fossy: yeah! issue-100: 8-))) <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/issues/100">https://github.com/fosslinux/live-bootstrap/issues/100</a> </span></div><div class="line" id="083835"><span class="nick" style="color:#6b8072"><a href="#083835" label="[08:38:35]">&lt;fossy&gt;</a></span><span class="message">&lt;janneke&gt; fossy: ah, well you may not realise how much effort went into &quot;can theoretically build&quot; to &quot;can build well enough for a full gnu/linux bootstrap&quot;</span></div><div class="line" id="083942"><span class="nick" style="color:#6b8072"><a href="#083942" label="[08:39:42]">&lt;fossy&gt;</a></span><span class="message">the latter is a significant tier above the first, the amount larger a libc needs to be to be able to thrill the role mes libc does is much larger than that to build tinycc, if thats what you mean</span></div><div class="line" id="083954"><span class="nick" style="color:#6b8072"><a href="#083954" label="[08:39:54]">&lt;fossy&gt;</a></span><span class="message">I have a reasonable idea of that from live bootstrap</span></div><div class="line" id="084003"><span class="nick" style="color:#6b8072"><a href="#084003" label="[08:40:03]">&lt;fossy&gt;</a></span><span class="message">fufill*</span></div><div class="line" id="091802"><span class="nick" style="color:#234e69"><a href="#091802" label="[09:18:02]">&lt;gio&gt;</a></span><span class="message">fossy: No, it doesn't work yet. I still believe that it's not far from working, but I haven't been able to touch it for two years.</span></div><div class="line" id="094455"><span class="nick" style="color:#6c3d55"><a href="#094455" label="[09:44:55]">&lt;bauen1&gt;</a></span><span class="message">stikonas[m]: no, i restarted the run, i'll try to save the log the next time it occurs</span></div><div class="line" id="103105"><span class="nick" style="color:#6d2462"><a href="#103105" label="[10:31:05]">&lt;gforce_d11977&gt;</a></span><span class="message">gio: like bauen1 said: &quot;we just need enough money to send everyone in this irc room to a remote island for a few months, along with an empty computer and a dozent books about x86 then the problem will solve itself</span></div><div class="line" id="103820"><span class="nick" style="color:#234e69"><a href="#103820" label="[10:38:20]">&lt;gio&gt;</a></span><span class="message">If you have a way to give me money to work on that, no need for the remote island! :-P</span></div><div class="line" id="104626"><span class="nick" style="color:#6d2462"><a href="#104626" label="[10:46:26]">&lt;gforce_d11977&gt;</a></span><span class="message">8-)))</span></div><div class="line" id="105117"><span class="nick" style="color:#6c3d55"><a href="#105117" label="[10:51:17]">&lt;bauen1&gt;</a></span><span class="message">stikonas[m]: actually it's just happened again, probably timing related and because i'm missing the autotool unversioned symlinks it becomes obvious: <a rel="nofollow" href="http://glados.bauen1.xyz/misc_stuff_might_disappear/bootstrap.log">http://glados.bauen1.xyz/misc_stuff_might_disappear/bootstrap.log</a> </span></div><div class="line" id="105149"><span class="nick" style="color:#6c3d55"><a href="#105149" label="[10:51:49]">&lt;bauen1&gt;</a></span><span class="message">these are the kind of issues comparing a few runs with make --debug will reveal too</span></div><div class="line" id="105300"><span class="nick" style="color:#8dd3c7"><a href="#105300" label="[10:53:00]">&lt;stikonas&gt;</a></span><span class="message">bauen1: that's one of gforce_d11977's documented bugs</span></div><div class="line" id="105320"><span class="nick" style="color:#6c3d55"><a href="#105320" label="[10:53:20]">&lt;bauen1&gt;</a></span><span class="message">oh really</span></div><div class="line" id="105329"><span class="nick" style="color:#6c3d55"><a href="#105329" label="[10:53:29]">&lt;bauen1&gt;</a></span><span class="message">i must have missed that</span></div><div class="line" id="133151"><span class="nick" style="color:#2e2a4a"><a href="#133151" label="[13:31:51]">&lt;OriansJ`&gt;</a></span><span class="message">bauen1: it is easy to miss things now that progress seems to be speeding up.</span></div><div class="line" id="133354"><span class="nick" style="color:#2e2a4a"><a href="#133354" label="[13:33:54]">&lt;OriansJ`&gt;</a></span><span class="message">janneke: the only places where GUILE_LOAD_PATH is referenced is: mes/module/mes/guile.mes and mes/module/mes/boot-0.scm so I don't think it needs to be set for nyacc</span></div><div class="line" id="133446"><span class="nick" style="color:#2e2a4a"><a href="#133446" label="[13:34:46]">&lt;OriansJ`&gt;</a></span><span class="message">grep -iR GUILE_LOAD_PATH shows that quite quickly in mes-m2 (which contains a copy of nyacc)</span></div><div class="line" id="133717"><span class="nick" style="color:#6c3d55"><a href="#133717" label="[13:37:17]">&lt;bauen1&gt;</a></span><span class="message">yeah, i have to rebase on master every few days now lol</span></div><div class="line" id="134548"><span class="nick" style="color:#2e2a4a"><a href="#134548" label="[13:45:48]">&lt;OriansJ`&gt;</a></span><span class="message">I'd even bet money that janneke and civodul never would have thought it would have been possible to bootstrap GCC without pregenerated files but here we are, we literally did it.</span></div><div class="line" id="134606"><span class="nick" style="color:#2e2a4a"><a href="#134606" label="[13:46:06]">&lt;OriansJ`&gt;</a></span><span class="message">back when we started of course</span></div><div class="line" id="134634"><span class="nick" style="color:#2e2a4a"><a href="#134634" label="[13:46:34]">&lt;OriansJ`&gt;</a></span><span class="message">but the community has been slowly growing, getting new perspectives and solutions to hard to crack problems.</span></div><div class="line" id="135512"><span class="nick" style="color:#2e2a4a"><a href="#135512" label="[13:55:12]">&lt;OriansJ`&gt;</a></span><span class="message">I would have never expected someone to show up and say hey I made a preprocessor for M2-Planet but it happened and now M2-Planet allows janneke to do things like #if defined(__M2__) to paper around the limitations of M2-Planet and #if __MESC__ to write a single library without having to have seperate files for everything</span></div><div class="line" id="135603"><span class="nick" style="color:#6d2462"><a href="#135603" label="[13:56:03]">&lt;gforce_d11977&gt;</a></span><span class="message">bauen1: stikonas: fossy: another round, another (small) issue: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/issues/101">https://github.com/fosslinux/live-bootstrap/issues/101</a> </span></div><div class="line" id="135650"><span class="nick" style="color:#8dd3c7"><a href="#135650" label="[13:56:50]">&lt;stikonas&gt;</a></span><span class="message">hmm, strange, there should be /bin/sh symlink</span></div><div class="line" id="135812"><span class="nick" style="color:#6d2462"><a href="#135812" label="[13:58:12]">&lt;gforce_d11977&gt;</a></span><span class="message">here the stats from the mass-run tonight: <a rel="nofollow" href="https://paste.debian.net/1193719/">https://paste.debian.net/1193719/</a> </span></div><div class="line" id="135819"><span class="nick" style="color:#6d2462"><a href="#135819" label="[13:58:19]">&lt;gforce_d11977&gt;</a></span><span class="message">(312 x CI)</span></div><div class="line" id="135834"><span class="nick" style="color:#8dd3c7"><a href="#135834" label="[13:58:34]">&lt;stikonas&gt;</a></span><span class="message">and regarding <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/issues/99">https://github.com/fosslinux/live-bootstrap/issues/99</a>,  maybe we should just manually output good pipesize... info the header file. after all, any other value will result in bad checksum</span></div><div class="line" id="135929"><span class="nick" style="color:#6d2462"><a href="#135929" label="[13:59:29]">&lt;gforce_d11977&gt;</a></span><span class="message">i already output/cat the pipesize.h file in the logs</span></div><div class="line" id="135931"><span class="nick" style="color:#8dd3c7"><a href="#135931" label="[13:59:31]">&lt;stikonas&gt;</a></span><span class="message">gforce_d11977: so basically  Argument &quot;&quot; isn.t numeric in bitwise and is the main remaining issue</span></div><div class="line" id="135945"><span class="nick" style="color:#6d2462"><a href="#135945" label="[13:59:45]">&lt;gforce_d11977&gt;</a></span><span class="message">yes, this one seems to be really often</span></div><div class="line" id="135953"><span class="nick" style="color:#8dd3c7"><a href="#135953" label="[13:59:53]">&lt;stikonas&gt;</a></span><span class="message">gforce_d11977: yeah, I mean not output pipesize.h, but use our fixed pipesize.h file</span></div><div class="line" id="140007"><span class="nick" style="color:#8dd3c7"><a href="#140007" label="[14:00:07]">&lt;stikonas&gt;</a></span><span class="message">not sure why you see those intermittent issues more often though</span></div><div class="line" id="140014"><span class="nick" style="color:#8dd3c7"><a href="#140014" label="[14:00:14]">&lt;stikonas&gt;</a></span><span class="message">I saw them maybe a few times</span></div><div class="line" id="143203"><span class="nick" style="color:#6b8072"><a href="#143203" label="[14:32:03]">&lt;fossy&gt;</a></span><span class="message">&lt;gforce_d11977&gt; gio: like bauen1 said: &quot;we just need enough money to send everyone in this irc room to a remote island for a few months, along with an empty computer and a dozent books about x86 then the problem will solve itself</span></div><div class="line" id="143209"><span class="nick" style="color:#6b8072"><a href="#143209" label="[14:32:09]">&lt;fossy&gt;</a></span><span class="message">and some source code :p</span></div><div class="line" id="143300"><span class="nick" style="color:#234e69"><a href="#143300" label="[14:33:00]">&lt;gio&gt;</a></span><span class="message">A lot of source code, I hope!</span></div><div class="line" id="143426"><span class="nick" style="color:#234e69"><a href="#143426" label="[14:34:26]">&lt;gio&gt;</a></span><span class="message">Like in The Matrix: &quot;Guns, lots of guns!&quot;.</span></div><div class="line" id="143821"><span class="nick" style="color:#6c3d55"><a href="#143821" label="[14:38:21]">&lt;bauen1&gt;</a></span><span class="message">and just maybe a bit of food and water</span></div><div class="line" id="160024"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado</span></div><div class="line" id="184721"><span class="nick" style="color:#d9d9d9"><a href="#184721" label="[18:47:21]">&lt;NieDzejkob&gt;</a></span><span class="message">I see there's been some discussion on my 2klinux repo. Yes, there's a working FAT driver, and a bare-metal FORTH that runs in ring0. re: bison generated parsers — none of that, I started because I was dissatisfied with the &quot;purity&quot;, so to say, of the current approaches, which generally assume a kernel. As others have noticed, the C compiler part is basically nonexistent, as the project ended up on the backburner</span></div><div class="line" id="185042"><span class="nick" style="color:#d9d9d9"><a href="#185042" label="[18:50:42]">&lt;NieDzejkob&gt;</a></span><span class="message">Since last touching the project I've realized that as it is, 2klinux is quite hostile to introspection, as all the source code is simply compiled/interpreted/ran immediately on boot, without user control. I think I'd go for something where a REPL and/or text editor comes in earlier.</span></div><div class="line" id="190221"><span class="nick" style="color:#6c3d55"><a href="#190221" label="[19:02:21]">&lt;bauen1&gt;</a></span><span class="message">^ the introspection part is also something that live-bootstrap is somewhat lacking currently</span></div><div class="line" id="190457"><span class="nick" style="color:#6c3d55"><a href="#190457" label="[19:04:57]">&lt;bauen1&gt;</a></span><span class="message">i also think that some arm chip is probably a lot easier to truely bootstrap, yes most have some form of binary blob in a rom to load the &quot;bootloader&quot;, but it's a step forward that is very easy to achieve (the initial bootstrap will be highly platform dependens anyway)</span></div><div class="line" id="190652"><span class="nick" style="color:#d9d9d9"><a href="#190652" label="[19:06:52]">&lt;NieDzejkob&gt;</a></span><span class="message">I think I'd start with something that 1. is driven with the keyboard or serial port 2. lets you write and load stuff 3. fits in 512 bytes, as you can't meaningfully do less on x86. Whether that lets you fit a forth or only some kind of monitor (cf. <a rel="nofollow" href="https://github.com/niedzejkob/ember">https://github.com/niedzejkob/ember</a>). </span></div><div class="line" id="190706"><span class="nick" style="color:#6c3d55"><a href="#190706" label="[19:07:06]">&lt;bauen1&gt;</a></span><span class="message">truely in this context just means without reliance on a kernel (or uefi which is basically a whole operating system)</span></div><div class="line" id="190737"><span class="nick" style="color:#d9d9d9"><a href="#190737" label="[19:07:37]">&lt;NieDzejkob&gt;</a></span><span class="message">Well there's the question of whether you want to do this with commodity hardware or not</span></div><div class="line" id="190813"><span class="nick" style="color:#d9d9d9"><a href="#190813" label="[19:08:13]">&lt;NieDzejkob&gt;</a></span><span class="message">If not, why stop at an arm/riscv chip? Go grab a bag of 74xx chips.</span></div><div class="line" id="190836"><span class="nick" style="color:#bc80bd"><a href="#190836" label="[19:08:36]">&lt;xentrac&gt;</a></span><span class="message">hello!  I'm not dead yet</span></div><div class="line" id="190839"><span class="nick" style="color:#d9d9d9"><a href="#190839" label="[19:08:39]">&lt;NieDzejkob&gt;</a></span><span class="message">and then use *that* until you can compile coreboot, I guess?</span></div><div class="line" id="190844"><span class="nick" style="color:#bc80bd"><a href="#190844" label="[19:08:44]">&lt;xentrac&gt;</a></span><span class="message">how are things going?</span></div><div class="line" id="190913"><span class="nick" style="color:#6c3d55"><a href="#190913" label="[19:09:13]">&lt;bauen1&gt;</a></span><span class="message">NieDzejkob: my current plan would be to add an sd card reader / writer to my 65c816 sbc, which can be &quot;bootstrapped&quot; using dip switches, use it to write the initial monitor for the arm sbc to the sd card, copy more code to the sd card, then boot the arm sbc (which has an uart, so hook up your trusted terminal), from the monitor load / review / compile more source code</span></div><div class="line" id="191008"><span class="nick" style="color:#6c3d55"><a href="#191008" label="[19:10:08]">&lt;bauen1&gt;</a></span><span class="message">NieDzejkob: my goal is mostly to reduce the amount of blobs involved, you probably can't quite avoid them, while staying cheap and main stream enough that other people can &quot;easily&quot; follow my steps</span></div><div class="line" id="191017"><span class="nick" style="color:#d9d9d9"><a href="#191017" label="[19:10:17]">&lt;NieDzejkob&gt;</a></span><span class="message">hmm <a rel="nofollow" href="https://www.bunniestudios.com/blog/?page_id=3592">https://www.bunniestudios.com/blog/?page_id=3592</a> </span></div><div class="line" id="191029"><span class="nick" style="color:#d9d9d9"><a href="#191029" label="[19:10:29]">&lt;NieDzejkob&gt;</a></span><span class="message">sd cards are quite... smart</span></div><div class="line" id="191034"><span class="nick" style="color:#6c3d55"><a href="#191034" label="[19:10:34]">&lt;bauen1&gt;</a></span><span class="message">how exactly you populate the initial sd card probably depends on your paranoia</span></div><div class="line" id="191110"><span class="nick" style="color:#6c3d55"><a href="#191110" label="[19:11:10]">&lt;bauen1&gt;</a></span><span class="message">NieDzejkob: true, you could also write the initial stage (until you have something like dm-verity) to an eeprom and have the arm sbc boot from that</span></div><div class="line" id="191112"><span class="nick" style="color:#3c5b35"><a href="#191112" label="[19:11:12]">&lt;gef&gt;</a></span><span class="message">&gt; the initial bootstrap will be highly platform dependens anyway)</span></div><div class="line" id="191112"><span class="nick" style="color:#3c5b35"><a href="#191112" label="[19:11:12]">&lt;gef&gt;</a></span><span class="message">it doesn't have to be, as regards the bootstrapping: using some kind of OISC (single command) emulation layer could allow a generic approach, although the I/O aspect is more of a question.</span></div><div class="line" id="191220"><span class="nick" style="color:#3c5b35"><a href="#191220" label="[19:12:20]">&lt;gef&gt;</a></span><span class="message">OISC make FORTH very affordable and as long as you can feed a checksum, hash or some similar control function, you can then boot from untrusted media without too much worry</span></div><div class="line" id="191258"><span class="nick" style="color:#3c5b35"><a href="#191258" label="[19:12:58]">&lt;gef&gt;</a></span><span class="message">(i.e. calculate cheksum before passing on the execution)</span></div><div class="line" id="191353"><span class="nick" style="color:#6c3d55"><a href="#191353" label="[19:13:53]">&lt;bauen1&gt;</a></span><span class="message">gef: imo the initial bootstrap is just platform dependent parts, a hypervisor, an sd card driver, irq driver, memory management, uart driver ... ; by the point at which a generic approach will buy you a lot you'll probably already have the ability to load additional code from a storage medium</span></div><div class="line" id="191358"><span class="nick" style="color:#6c3d55"><a href="#191358" label="[19:13:58]">&lt;bauen1&gt;</a></span><span class="message">(and review it)</span></div><div class="line" id="191503"><span class="nick" style="color:#3c5b35"><a href="#191503" label="[19:15:03]">&lt;gef&gt;</a></span><span class="message">I think we shouldn't have to talk about irq &amp; memory management, until the moment a kernel gets fired up. And even then, it should be possible to arrive somewhere far in the bootstrap process before they become a strict necessity.</span></div><div class="line" id="191603"><span class="nick" style="color:#6d2462"><a href="#191603" label="[19:16:03]">&lt;gforce_d11977&gt;</a></span><span class="message">NieDzejkob: hello and thanks a lot for your explaining words: dumb question: what means &quot;backburner&quot; exactly? is this some polish slang maybe?</span></div><div class="line" id="191643"><span class="nick" style="color:#bc80bd"><a href="#191643" label="[19:16:43]">&lt;xentrac&gt;</a></span><span class="message">bauen1: what are the unavoidable blobs involved?</span></div><div class="line" id="191720"><span class="nick" style="color:#6c3d55"><a href="#191720" label="[19:17:20]">&lt;bauen1&gt;</a></span><span class="message">gef: it depends on what requirements your storage, i/o and isolation mechanisms (if you want any e.g. kernel / userspace) drivers have mostly, but yes, you might get away with never freeing memory if you have enough etc..</span></div><div class="line" id="191725"><span class="nick" style="color:#6c3d55"><a href="#191725" label="[19:17:25]">&lt;bauen1&gt;</a></span><span class="message">it's all about trade offs once again</span></div><div class="line" id="191737"><span class="nick" style="color:#bc80bd"><a href="#191737" label="[19:17:37]">&lt;xentrac&gt;</a></span><span class="message">gef: an OISC is easy to implement but pretty painful to program without an assembler, macro processor, etc.</span></div><div class="line" id="191839"><span class="nick" style="color:#bc80bd"><a href="#191839" label="[19:18:39]">&lt;xentrac&gt;</a></span><span class="message">I suspect something like Brainfuck might be about the right level</span></div><div class="line" id="191840"><span class="nick" style="color:#3c5b35"><a href="#191840" label="[19:18:40]">&lt;gef&gt;</a></span><span class="message">SBN4 is a beauty (for regex, interpreters and compilers) but a kernel pushes it a bit too far. However, for anything in user space that regards the subject of this channel, it is should be sufficient.</span></div><div class="line" id="191855"><span class="nick" style="color:#6c3d55"><a href="#191855" label="[19:18:55]">&lt;bauen1&gt;</a></span><span class="message">xentrac: harddriver controllers, etc... ; but most importantly some sort of bootloader in a rom somewhere that starts the processor, i don't think you can avoid that one easily</span></div><div class="line" id="191929"><span class="nick" style="color:#bc80bd"><a href="#191929" label="[19:19:29]">&lt;xentrac&gt;</a></span><span class="message">gef: is SBN4 &quot;subtract and branch if negative 4&quot;?</span></div><div class="line" id="191943"><span class="nick" style="color:#3c5b35"><a href="#191943" label="[19:19:43]">&lt;gef&gt;</a></span><span class="message">xentrac: right. Different level than BF and all that</span></div><div class="line" id="192019"><span class="nick" style="color:#bc80bd"><a href="#192019" label="[19:20:19]">&lt;xentrac&gt;</a></span><span class="message">I mean BF or something slightly less annoying might be the right level to replace the OISC</span></div><div class="line" id="192029"><span class="nick" style="color:#6c3d55"><a href="#192029" label="[19:20:29]">&lt;bauen1&gt;</a></span><span class="message">you can however choose a path that gets you running code that involves almost none or only rom blobs in the loading chain, and assuming that the rom blobs are small enough you might even call them hardware (which in theory you also need to verify)</span></div><div class="line" id="192109"><span class="nick" style="color:#3c5b35"><a href="#192109" label="[19:21:09]">&lt;gef&gt;</a></span><span class="message">I've done various experiments and among OISC choices I haven't found something that beats it, so far.</span></div><div class="line" id="192109"><span class="nick" style="color:#d9d9d9"><a href="#192109" label="[19:21:09]">&lt;NieDzejkob&gt;</a></span><span class="message">gforce_d11977: english idiom, I believe. &quot;not being done now, but left to be considered in the future&quot; -- cambridge dict</span></div><div class="line" id="192119"><span class="nick" style="color:#bc80bd"><a href="#192119" label="[19:21:19]">&lt;xentrac&gt;</a></span><span class="message">bauen1: you should be able to get a 65c816 running without a big rom blob I'd think?  certainly you can with a 6502</span></div><div class="line" id="192131"><span class="nick" style="color:#6c3d55"><a href="#192131" label="[19:21:31]">&lt;bauen1&gt;</a></span><span class="message">xentrac: yes, but that thing won't run linux</span></div><div class="line" id="192148"><span class="nick" style="color:#bc80bd"><a href="#192148" label="[19:21:48]">&lt;xentrac&gt;</a></span><span class="message">true</span></div><div class="line" id="192154"><span class="nick" style="color:#6c3d55"><a href="#192154" label="[19:21:54]">&lt;bauen1&gt;</a></span><span class="message">xentrac: i'm assuming that you want to do a bootstrap on mostly easy / cheap to obtain hardware</span></div><div class="line" id="192210"><span class="nick" style="color:#6c3d55"><a href="#192210" label="[19:22:10]">&lt;bauen1&gt;</a></span><span class="message">xentrac: if you have the resources for risc-v build by hand from your own gates, then that's the way to go</span></div><div class="line" id="192245"><span class="nick" style="color:#bc80bd"><a href="#192245" label="[19:22:45]">&lt;xentrac&gt;</a></span><span class="message">maybe building with a pick-and-place robot and just verifying it by hand would be better ;)</span></div><div class="line" id="192251"><span class="nick" style="color:#6c3d55"><a href="#192251" label="[19:22:51]">&lt;bauen1&gt;</a></span><span class="message">xentrac: but if you have to choose between an arm sbc with a 32kb (more like 16kb) bootrom and an x86 with a 100mb uefi implementation + intel me + bootrom, i think arm has a lot more potential</span></div><div class="line" id="192335"><span class="nick" style="color:#bc80bd"><a href="#192335" label="[19:23:35]">&lt;xentrac&gt;</a></span><span class="message">you don't have to trust the hard drive controller as long as it doesn't have access to scribble all over your memory and you have some way to verify data you get from it</span></div><div class="line" id="192417"><span class="nick" style="color:#bc80bd"><a href="#192417" label="[19:24:17]">&lt;xentrac&gt;</a></span><span class="message">before you run it</span></div><div class="line" id="192441"><span class="nick" style="color:#3c5b35"><a href="#192441" label="[19:24:41]">&lt;gef&gt;</a></span><span class="message">xentrac: sharp, that is the case. Not even the loading functions, you'd just need to trust the checksums and that your state of memory is undisturbed</span></div><div class="line" id="192558"><span class="nick" style="color:#6d2462"><a href="#192558" label="[19:25:58]">&lt;gforce_d11977&gt;</a></span><span class="message">NieDzejkob: thanks bauen1: yes, do the bootstrap on 6502/C64 + 16MB REU with bankswitching would be interesting. friend of mine has now 3 years time and is an expert in 6502 assembler, maybe i can convince him to join the project 8-)</span></div><div class="line" id="192641"><span class="nick" style="color:#af8d2f"><a href="#192641" label="[19:26:41]">*</a></span><span class="message">NieDzejkob is more of a Z80 person himself</span></div><div class="line" id="192711"><span class="nick" style="color:#6c3d55"><a href="#192711" label="[19:27:11]">&lt;bauen1&gt;</a></span><span class="message">technically my 65c816 sbc is cheating a bit by using an atmega to emulate an 16 byte bootrom and uart lol</span></div><div class="line" id="192813"><span class="nick" style="color:#bc80bd"><a href="#192813" label="[19:28:13]">&lt;xentrac&gt;</a></span><span class="message">gef: there's still the question of where you get the checksums, and the checksumming code, from; I wonder if you could use XXTEA as a secure hash function?</span></div><div class="line" id="192900"><span class="nick" style="color:#bc80bd"><a href="#192900" label="[19:29:00]">&lt;xentrac&gt;</a></span><span class="message">a 16-byte bootrom is a thing you can quite reasonably build out of discrete logic</span></div><div class="line" id="192916"><span class="nick" style="color:#3c5b35"><a href="#192916" label="[19:29:16]">&lt;gef&gt;</a></span><span class="message">z80, 6502, x86, 68*: i've been there. For bootstrapping, sbn4 won me over, because it allows for one single approach across all platforms. IMHO, the checksum function has to be adjusted to it. I would avoid a specific CPU checksum, so that it is easy to cross check multiple CPUs in parallel.</span></div><div class="line" id="192941"><span class="nick" style="color:#bc80bd"><a href="#192941" label="[19:29:41]">&lt;xentrac&gt;</a></span><span class="message">what's sbn4, sorry?</span></div><div class="line" id="192945"><span class="nick" style="color:#6d2462"><a href="#192945" label="[19:29:45]">&lt;gforce_d11977&gt;</a></span><span class="message">xentrac: NieDzejkob: ...'my 65c816 sbc, which can be &quot;bootstrapped&quot; using dip switches' ... how can you feed data into your 65c816 SBC? pix?</span></div><div class="line" id="193058"><span class="nick" style="color:#d9d9d9"><a href="#193058" label="[19:30:58]">&lt;NieDzejkob&gt;</a></span><span class="message">I've actually built a ROM out of around 100 diodes before...</span></div><div class="line" id="193059"><span class="nick" style="color:#3c5b35"><a href="#193059" label="[19:30:59]">&lt;gef&gt;</a></span><span class="message">xentract: one example is this: <a rel="nofollow" href="https://en.wikipedia.org/wiki/One-instruction_set_computer#subneg4">https://en.wikipedia.org/wiki/One-instruction_set_computer#subneg4</a> </span></div><div class="line" id="193107"><span class="nick" style="color:#3c5b35"><a href="#193107" label="[19:31:07]">&lt;gef&gt;</a></span><span class="message">xentrac: one example is this: <a rel="nofollow" href="https://en.wikipedia.org/wiki/One-instruction_set_computer#subneg4">https://en.wikipedia.org/wiki/One-instruction_set_computer#subneg4</a> </span></div><div class="line" id="193142"><span class="nick" style="color:#d9d9d9"><a href="#193142" label="[19:31:42]">&lt;NieDzejkob&gt;</a></span><span class="message">not for any bootstrapping-related topic, I just needed a ROM with a capacity so small that using the available chips felt wasteful</span></div><div class="line" id="193150"><span class="nick" style="color:#bc80bd"><a href="#193150" label="[19:31:50]">&lt;xentrac&gt;</a></span><span class="message">NieDzejkob: and a decoder to drive the word lines, I suppose?</span></div><div class="line" id="193159"><span class="nick" style="color:#bc80bd"><a href="#193159" label="[19:31:59]">&lt;xentrac&gt;</a></span><span class="message">gef: aha, okay</span></div><div class="line" id="193230"><span class="nick" style="color:#d9d9d9"><a href="#193230" label="[19:32:30]">&lt;NieDzejkob&gt;</a></span><span class="message">even though it would've been cheaper, faster, and take less space with an eeprom</span></div><div class="line" id="193242"><span class="nick" style="color:#d9d9d9"><a href="#193242" label="[19:32:42]">&lt;NieDzejkob&gt;</a></span><span class="message">xentrac: yeah, I think that part was a 74xx demux</span></div><div class="line" id="193302"><span class="nick" style="color:#bc80bd"><a href="#193302" label="[19:33:02]">&lt;xentrac&gt;</a></span><span class="message">oh, heh, decode on output rather than iput</span></div><div class="line" id="193331"><span class="nick" style="color:#bc80bd"><a href="#193331" label="[19:33:31]">&lt;xentrac&gt;</a></span><span class="message">you can get by with fewer diodes if you use a sparser encoding with more one-hot fields</span></div><div class="line" id="193405"><span class="nick" style="color:#d9d9d9"><a href="#193405" label="[19:34:05]">&lt;NieDzejkob&gt;</a></span><span class="message">no, on the input</span></div><div class="line" id="193411"><span class="nick" style="color:#bc80bd"><a href="#193411" label="[19:34:11]">&lt;xentrac&gt;</a></span><span class="message">which also tends to result in simpler logic downstream: more wires, less gaets</span></div><div class="line" id="193424"><span class="nick" style="color:#bc80bd"><a href="#193424" label="[19:34:24]">&lt;xentrac&gt;</a></span><span class="message">*gates</span></div><div class="line" id="193425"><span class="nick" style="color:#d9d9d9"><a href="#193425" label="[19:34:25]">&lt;NieDzejkob&gt;</a></span><span class="message">demux with input tied high as a one-hot encoder</span></div><div class="line" id="193439"><span class="nick" style="color:#bc80bd"><a href="#193439" label="[19:34:39]">&lt;xentrac&gt;</a></span><span class="message">I see</span></div><div class="line" id="193522"><span class="nick" style="color:#bc80bd"><a href="#193522" label="[19:35:22]">&lt;xentrac&gt;</a></span><span class="message">if you use a CMOS mux/demux then the unselected outputs are just tristated, but unfortunately that doesn't save you the diodes</span></div><div class="line" id="193536"><span class="nick" style="color:#bc80bd"><a href="#193536" label="[19:35:36]">&lt;xentrac&gt;</a></span><span class="message">well you can avoid diodes on one word I guess</span></div><div class="line" id="193623"><span class="nick" style="color:#bc80bd"><a href="#193623" label="[19:36:23]">&lt;xentrac&gt;</a></span><span class="message">gef: a thing about subleq and similar machines is that they tend to be kind of more complicated to implement in hardware than machines that have &quot;more instructions&quot;</span></div><div class="line" id="193701"><span class="nick" style="color:#bc80bd"><a href="#193701" label="[19:37:01]">&lt;xentrac&gt;</a></span><span class="message">because to actually implement a subleq-family CPU you need to cycle through a longish series of states within each instruction</span></div><div class="line" id="193904"><span class="nick" style="color:#6d2462"><a href="#193904" label="[19:39:04]">&lt;gforce_d11977&gt;</a></span><span class="message">Geek Rant #6 - My DIY 65816 Computer | <a rel="nofollow" href="https://youtu.be/1spMekg8GM8?t=117">https://youtu.be/1spMekg8GM8?t=117</a> </span></div><div class="line" id="194230"><span class="nick" style="color:#d9d9d9"><a href="#194230" label="[19:42:30]">&lt;NieDzejkob&gt;</a></span><span class="message">&lt;stikonas&gt; it seemed to me that stuff like busybox is not easy to build &lt;/stikonas&gt; it shouldn't be that hard if you just take the sources and don't insist on using the original build system</span></div><div class="line" id="194341"><span class="nick" style="color:#8dd3c7"><a href="#194341" label="[19:43:41]">&lt;stikonas&gt;</a></span><span class="message">it probably depends on how good libc you have...</span></div><div class="line" id="195210"><span class="nick" style="color:#3c5b35"><a href="#195210" label="[19:52:10]">&lt;gef&gt;</a></span><span class="message">xentract: I've implemented sbn4 years ago in just 12 lines of microcode, very sparse and easy. But it requires ALU subtraction (for which I used an EPROM actually)</span></div><div class="line" id="195215"><span class="nick" style="color:#8dd3c7"><a href="#195215" label="[19:52:15]">&lt;stikonas&gt;</a></span><span class="message">well, I'm just saying that because we briefly looked at other shells in live-bootstrap</span></div><div class="line" id="195250"><span class="nick" style="color:#8dd3c7"><a href="#195250" label="[19:52:50]">&lt;stikonas&gt;</a></span><span class="message">but in the end fossy have built bash first</span></div><div class="line" id="195422"><span class="nick" style="color:#bc80bd"><a href="#195422" label="[19:54:22]">&lt;xentrac&gt;</a></span><span class="message">gef: yeah, and you need a microcycle counter to index the microcode store.  I think you can get by without any such state, just the program counter, if you're doing a harvard architecture?</span></div><div class="line" id="195448"><span class="nick" style="color:#bc80bd"><a href="#195448" label="[19:54:48]">&lt;xentrac&gt;</a></span><span class="message">I mean basically you replace the microcode that implements sbn4 with the program you really want to run</span></div><div class="line" id="195509"><span class="nick" style="color:#6d2462"><a href="#195509" label="[19:55:09]">&lt;gforce_d11977&gt;</a></span><span class="message">stikonas: i feel/hope that if the bootstrap works, that there will be a battle to shorten the path (e.g. using other shells or toolchain implementations)</span></div><div class="line" id="195534"><span class="nick" style="color:#bc80bd"><a href="#195534" label="[19:55:34]">&lt;xentrac&gt;</a></span><span class="message">if you really want to minimize the number of gates you can do your subtraction bit-serially but then you need a &quot;microcycle counter&quot; again to count the bits</span></div><div class="line" id="195725"><span class="nick" style="color:#3c5b35"><a href="#195725" label="[19:57:25]">&lt;gef&gt;</a></span><span class="message">xentrac: there are several opportunities for optimisations... actually, I'm not trying to minimize gates per se, but rather have something that is both usable and understandable (therefor auditable and bootstrappable)</span></div><div class="line" id="195738"><span class="nick" style="color:#8dd3c7"><a href="#195738" label="[19:57:38]">&lt;stikonas&gt;</a></span><span class="message">gforce_d11977: I'm not sure if that will shorten the path, you'll have to build bash sooner or later, you'll have to build bison, sooner or later. You might be able to get rid of autotools and perl, but then you have to rewrite build systems of binutils and gcc</span></div><div class="line" id="200137"><span class="nick" style="color:#bc80bd"><a href="#200137" label="[20:01:37]">&lt;xentrac&gt;</a></span><span class="message">yeah, there's always a tradeoff between having a machine code that's easy to debug, and having a machine code that's easy to implement</span></div><div class="line" id="200437"><span class="nick" style="color:#bc80bd"><a href="#200437" label="[20:04:37]">&lt;xentrac&gt;</a></span><span class="message">I think there's a pretty wide range in that tradeoff space where some kind of RPN is the optimum</span></div><div class="line" id="200600"><span class="nick" style="color:#bc80bd"><a href="#200600" label="[20:06:00]">&lt;xentrac&gt;</a></span><span class="message">that's where I was coming from with <a rel="nofollow" href="https://github.com/kragen/calculusvaporis">https://github.com/kragen/calculusvaporis</a>  although I haven't actually built it or even simulated the informal RTL I wrote there, just the instruction-level semantics</span></div><div class="line" id="201037"><span class="nick" style="color:#bc80bd"><a href="#201037" label="[20:10:37]">&lt;xentrac&gt;</a></span><span class="message">I suspect that the 12-bit words and the two-word stack were probably both over-aggressive; 16 bits and three or four words are probably better tradeoffs</span></div><div class="line" id="201146"><span class="nick" style="color:#bc80bd"><a href="#201146" label="[20:11:46]">&lt;xentrac&gt;</a></span><span class="message">A 16-bit memory space is enough to support a reasonable self-hosting system with an IDE, as demonstrated by Turbo Pascal for CP/M; by contrast, the 12-bit PDP-8 mostly ran code cross-compiled on a larger machine</span></div><div class="line" id="201501"><span class="nick" style="color:#bc80bd"><a href="#201501" label="[20:15:01]">&lt;xentrac&gt;</a></span><span class="message">Calculus Vaporis needs four microcycles per instruction.  if you make it a Harvard architecture and give it a separate index register to drive the address bus during data fetches I think you can eliminate the microcycle state machine?</span></div><div class="line" id="201638"><span class="nick" style="color:#bc80bd"><a href="#201638" label="[20:16:38]">&lt;xentrac&gt;</a></span><span class="message">but it was just my first amateur effort.  it's probably possible to do a lot better</span></div><div class="line" id="202204"><span class="nick" style="color:#bc80bd"><a href="#202204" label="[20:22:04]">&lt;xentrac&gt;</a></span><span class="message">it has 7 opcodes, and my sketch of the instruction decoder was about 20 NAND gates</span></div><div class="line" id="210214"><span class="nick" style="color:#6d2462"><a href="#210214" label="[21:02:14]">&lt;gforce_d11977&gt;</a></span><span class="message">stikonas: the busybox ash can be compiled, so that it behaves in some ways like a bash, maybe all the tools can work with that instead of using &quot;the real thing&quot;. but bash/ash/sh alone is not the only issue, having a busybox or a similar multicall binary approach can *maybe* make things easier</span></div><div class="line" id="213858"><span class="nick" style="color:#8dd3c7"><a href="#213858" label="[21:38:58]">&lt;stikonas&gt;</a></span><span class="message">gforce_d11977: not sure about it being much easier. yes, you might be able to substitute bash with busybox sh but how much does that win...</span></div><div class="line" id="213914"><span class="nick" style="color:#8dd3c7"><a href="#213914" label="[21:39:14]">&lt;stikonas&gt;</a></span><span class="message">if you want actual multicall binary, you still have to build a lot of things, so similar complexity to coreutils</span></div><div class="line" id="214030"><span class="nick" style="color:#8dd3c7"><a href="#214030" label="[21:40:30]">&lt;stikonas&gt;</a></span><span class="message">but in any case no-pregen bootstrap needs at least gcc which means we need bison, that means we need m4/flex/non-toy libc and some shell</span></div><div class="line" id="214211"><span class="nick" style="color:#8dd3c7"><a href="#214211" label="[21:42:11]">&lt;stikonas&gt;</a></span><span class="message">that's already significant part of live-bootstrap</span></div><div class="line" id="215521"><span class="nick" style="color:#bc80bd"><a href="#215521" label="[21:55:21]">&lt;xentrac&gt;</a></span><span class="message">ugh, m4</span></div><div class="line" id="215541"><span class="nick" style="color:#bc80bd"><a href="#215541" label="[21:55:41]">&lt;xentrac&gt;</a></span><span class="message">stikonas: is there a reasonably up-to-date dependency diagram somewhere?</span></div><div class="line" id="215606"><span class="nick" style="color:#bc80bd"><a href="#215606" label="[21:56:06]">&lt;xentrac&gt;</a></span><span class="message">that describes our current critical path from nand to tetris, or at least stage0 to firefox</span></div><div class="line" id="215801"><span class="nick" style="color:#6c3d55"><a href="#215801" label="[21:58:01]">&lt;bauen1&gt;</a></span><span class="message">xentrac: you need to code / review the initial steps by hand, up until your secure hash function, then you can reuse binaries / code from earlier reviews if you know their hash, and remember the hash of any additional code you reviewed, etc... building your own hash tree (if it is tampered with or you loose it you'll have to do a lot of reviewing again)</span></div><div class="line" id="215831"><span class="nick" style="color:#bc80bd"><a href="#215831" label="[21:58:31]">&lt;xentrac&gt;</a></span><span class="message">bauen1: aye</span></div><div class="line" id="215910"><span class="nick" style="color:#6c3d55"><a href="#215910" label="[21:59:10]">&lt;bauen1&gt;</a></span><span class="message">gforce_d11977: you could use uart or a dip switch + led interface to feed data in/out of my 65c816 sbc</span></div><div class="line" id="220139"><span class="nick" style="color:#6c3d55"><a href="#220139" label="[22:01:39]">&lt;bauen1&gt;</a></span><span class="message">stikonas: you don't need bash if you adjust later code not to need it, so you can push bash further down the line, which might result in less dependencies (e.g. you now don't need a specific version of the autotools) ; so there is some benefit in investigating these things</span></div><div class="line" id="220223"><span class="nick" style="color:#6c3d55"><a href="#220223" label="[22:02:23]">&lt;bauen1&gt;</a></span><span class="message">stikonas: and perhaps make the bootstrap easier to understand / reduce bugs, maybe</span></div><div class="line" id="220314"><span class="nick" style="color:#6c3d55"><a href="#220314" label="[22:03:14]">&lt;bauen1&gt;</a></span><span class="message">xentrac: i've talked a bit about securing the &quot;progress&quot; of a bootstrap, how you can build such a hash tree and what isolation mechanisms a kernel could provide to make your life easier</span></div><div class="line" id="220356"><span class="nick" style="color:#6c3d55"><a href="#220356" label="[22:03:56]">&lt;bauen1&gt;</a></span><span class="message">xentrac: in the end it kind of depends on what action you want to take when you find a bug in the bootstrap, and if you can even exclude the possibilitie that it has contaminated later stages in some form</span></div><div class="line" id="220755"><span class="nick" style="color:#6c3d55"><a href="#220755" label="[22:07:55]">&lt;bauen1&gt;</a></span><span class="message">maybe i'll do a bit of a demo using SELinux to show how the kernel can be used to protect the integrity of earlier bootstrap &quot;stages&quot; from the later, and also marking code as untrusted until the user has reviewed them and marked them as trusted ...</span></div><div class="line" id="224147"><span class="nick" style="color:#8dd3c7"><a href="#224147" label="[22:41:47]">&lt;stikonas&gt;</a></span><span class="message">bauen1: but we don't use any dependencies for bash</span></div><div class="line" id="224150"><span class="nick" style="color:#8dd3c7"><a href="#224150" label="[22:41:50]">&lt;stikonas&gt;</a></span><span class="message">it's just make</span></div><div class="line" id="224230"><span class="nick" style="color:#8dd3c7"><a href="#224230" label="[22:42:30]">&lt;stikonas&gt;</a></span><span class="message">xentrac: OriansJ` and me made some diagram</span></div><div class="line" id="224344"><span class="nick" style="color:#8dd3c7"><a href="#224344" label="[22:43:44]">&lt;stikonas&gt;</a></span><span class="message">xentrac: it's roughly <a rel="nofollow" href="https://github.com/oriansj/talk-notes/blob/master/live-bootstrap.pdf">https://github.com/oriansj/talk-notes/blob/master/live-bootstrap.pdf</a>  (a lot of later dependencies are missing because they use too many things from before)</span></div><div class="line" id="224355"><span class="nick" style="color:#bc80bd"><a href="#224355" label="[22:43:55]">&lt;xentrac&gt;</a></span><span class="message">ooh cool</span></div><div class="line" id="224403"><span class="nick" style="color:#bc80bd"><a href="#224403" label="[22:44:03]">&lt;xentrac&gt;</a></span><span class="message">thanks</span></div><div class="line" id="224452"><span class="nick" style="color:#8dd3c7"><a href="#224452" label="[22:44:52]">&lt;stikonas&gt;</a></span><span class="message">svg if you prefer that <a rel="nofollow" href="https://stikonas.eu/files/bootstrap/live-bootstrap.svg">https://stikonas.eu/files/bootstrap/live-bootstrap.svg</a> </span></div><div class="line" id="224617"><span class="nick" style="color:#8dd3c7"><a href="#224617" label="[22:46:17]">&lt;stikonas&gt;</a></span><span class="message">posibly autotools can be simplified a bit</span></div><div class="line" id="224649"><span class="nick" style="color:#bc80bd"><a href="#224649" label="[22:46:49]">&lt;xentrac&gt;</a></span><span class="message">or possibly burned to the ground</span></div><div class="line" id="224759"><span class="nick" style="color:#8dd3c7"><a href="#224759" label="[22:47:59]">&lt;stikonas&gt;</a></span><span class="message">then you need to rewrite all other build systems</span></div><div class="line" id="224851"><span class="nick" style="color:#bc80bd"><a href="#224851" label="[22:48:51]">&lt;xentrac&gt;</a></span><span class="message">because they all use autotools, you mean?</span></div><div class="line" id="224910"><span class="nick" style="color:#8dd3c7"><a href="#224910" label="[22:49:10]">&lt;stikonas&gt;</a></span><span class="message">yes, almost everything</span></div><div class="line" id="224918"><span class="nick" style="color:#8dd3c7"><a href="#224918" label="[22:49:18]">&lt;stikonas&gt;</a></span><span class="message">for early stuff we wrote manual makefiles</span></div><div class="line" id="224934"><span class="nick" style="color:#8dd3c7"><a href="#224934" label="[22:49:34]">&lt;stikonas&gt;</a></span><span class="message">but that's worse than autotools...</span></div><div class="line" id="224934"><span class="nick" style="color:#bc80bd"><a href="#224934" label="[22:49:34]">&lt;xentrac&gt;</a></span><span class="message">is the dot source for this available somewhere?</span></div><div class="line" id="224940"><span class="nick" style="color:#8dd3c7"><a href="#224940" label="[22:49:40]">&lt;stikonas&gt;</a></span><span class="message">yes, same repo</span></div><div class="line" id="224941"><span class="nick" style="color:#bc80bd"><a href="#224941" label="[22:49:41]">&lt;xentrac&gt;</a></span><span class="message">yeah, it is</span></div><div class="line" id="225122"><span class="nick" style="color:#6c3d55"><a href="#225122" label="[22:51:22]">&lt;bauen1&gt;</a></span><span class="message">stikonas: then it's less of an issue, but we still have 2 versions of bash that are build, so it might be better to replace / eliminate one of them</span></div><div class="line" id="225139"><span class="nick" style="color:#8dd3c7"><a href="#225139" label="[22:51:39]">&lt;stikonas&gt;</a></span><span class="message">bauen1: I doubt that</span></div><div class="line" id="225147"><span class="nick" style="color:#8dd3c7"><a href="#225147" label="[22:51:47]">&lt;stikonas&gt;</a></span><span class="message">first bash is non-interactive</span></div><div class="line" id="225200"><span class="nick" style="color:#bc80bd"><a href="#225200" label="[22:52:00]">&lt;xentrac&gt;</a></span><span class="message">this dot diagram is super great</span></div><div class="line" id="225214"><span class="nick" style="color:#bc80bd"><a href="#225214" label="[22:52:14]">&lt;xentrac&gt;</a></span><span class="message">thanks!</span></div><div class="line" id="225215"><span class="nick" style="color:#8dd3c7"><a href="#225215" label="[22:52:15]">&lt;stikonas&gt;</a></span><span class="message">first bash is built without readline</span></div><div class="line" id="225228"><span class="nick" style="color:#8dd3c7"><a href="#225228" label="[22:52:28]">&lt;stikonas&gt;</a></span><span class="message">because readline uses termios.h, so need better libc</span></div><div class="line" id="225245"><span class="nick" style="color:#8dd3c7"><a href="#225245" label="[22:52:45]">&lt;stikonas&gt;</a></span><span class="message">well, unless libmescc gets significantly more functions</span></div><div class="line" id="225255"><span class="nick" style="color:#8dd3c7"><a href="#225255" label="[22:52:55]">&lt;stikonas&gt;</a></span><span class="message">but that is just moving complexity elsewhere</span></div><div class="line" id="225419"><span class="nick" style="color:#8dd3c7"><a href="#225419" label="[22:54:19]">&lt;stikonas&gt;</a></span><span class="message">round bash in the middle of the diagram is just for convenience it's bash-2.05b that is on the left</span></div><div class="line" id="225436"><span class="nick" style="color:#8dd3c7"><a href="#225436" label="[22:54:36]">&lt;stikonas&gt;</a></span><span class="message">2nd bash is after gcc</span></div><div class="line" id="230618"><span class="nick" style="color:#6c3d55"><a href="#230618" label="[23:06:18]">&lt;bauen1&gt;</a></span><span class="message">also regarding the spdx copyright headers, how many line changes constitues a change that would need me to add my own name with SPDX-FileCopyrightText: ?</span></div><div class="line" id="230637"><span class="nick" style="color:#6c3d55"><a href="#230637" label="[23:06:37]">&lt;bauen1&gt;</a></span><span class="message">since i'll be touching most scripts, but with relatively minor changes (add a few env vars, an additional mkdir here and there)</span></div><div class="line" id="230834"><span class="nick" style="color:#8dd3c7"><a href="#230834" label="[23:08:34]">&lt;stikonas&gt;</a></span><span class="message">bauen1: feel free to add if you want your name</span></div><div class="line" id="230915"><span class="nick" style="color:#8dd3c7"><a href="#230915" label="[23:09:15]">&lt;stikonas&gt;</a></span><span class="message">especially here, it's better to keep licensing info precise</span></div><div class="line" id="232526"><span class="nick" style="color:#6c3d55"><a href="#232526" label="[23:25:26]">&lt;bauen1&gt;</a></span><span class="message">right that's a good idea</span></div><br /></div></body></html>