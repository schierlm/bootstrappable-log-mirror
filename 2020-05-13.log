<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-05-13.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="010945"><span class="nick" style="color:#8dd3c7"><a href="#010945" label="[01:09:45]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: well the only class of build systems that don't map to that paradigm are the snarfing build systems but those I classify as bootstrapping toxic waste. As the human reviewed source may be nothing like the source that is ultimately built.</span></div><div class="line" id="011302"><span class="nick" style="color:#2e2a4a"><a href="#011302" label="[01:13:02]">&lt;xentrac&gt;</a></span><span class="message">snarfing?</span></div><div class="line" id="020644"><span class="nick" style="color:#8dd3c7"><a href="#020644" label="[02:06:44]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: think lisp macro expansion applied to a source file, just prior to it being sent to the compiler. It allows for things such as squeezing mes.c in under 500 lines of C code; despite the fact it was impossible for GCC to compile such code (and the resulting work required to get it able to be built with GCC directly ballooned the code to about 4Kloc)</span></div><div class="line" id="020744"><span class="nick" style="color:#8dd3c7"><a href="#020744" label="[02:07:44]">&lt;OriansJ`&gt;</a></span><span class="message">It is a siren song for programmers in languages with proper macros.</span></div><div class="line" id="020808"><span class="nick" style="color:#2e2a4a"><a href="#020808" label="[02:08:08]">&lt;xentrac&gt;</a></span><span class="message">what's a &quot;snarfing build system&quot;?</span></div><div class="line" id="020843"><span class="nick" style="color:#8dd3c7"><a href="#020843" label="[02:08:43]">&lt;OriansJ`&gt;</a></span><span class="message">I believe it took janneke nearly a month to convert the snarfing mes.c to something that GCC could even compile</span></div><div class="line" id="020923"><span class="nick" style="color:#2e2a4a"><a href="#020923" label="[02:09:23]">&lt;xentrac&gt;</a></span><span class="message">sounds snarfy!</span></div><div class="line" id="021025"><span class="nick" style="color:#8dd3c7"><a href="#021025" label="[02:10:25]">&lt;OriansJ`&gt;</a></span><span class="message">honestly the first time I ever saw such a system was when I was trying to figure out how to compile Mes.c with M2-Planet</span></div><div class="line" id="021111"><span class="nick" style="color:#8dd3c7"><a href="#021111" label="[02:11:11]">&lt;OriansJ`&gt;</a></span><span class="message">Turns out it required a boatload of work just to get GCC to compile mes.c</span></div><div class="line" id="021135"><span class="nick" style="color:#2e2a4a"><a href="#021135" label="[02:11:35]">&lt;xentrac&gt;</a></span><span class="message">so I see</span></div><div class="line" id="021152"><span class="nick" style="color:#8dd3c7"><a href="#021152" label="[02:11:52]">&lt;OriansJ`&gt;</a></span><span class="message">Then it took me 2 months just to remove the compile warnings and errors</span></div><div class="line" id="021323"><span class="nick" style="color:#2e2a4a"><a href="#021323" label="[02:13:23]">&lt;xentrac&gt;</a></span><span class="message">where did the build system enter into this?</span></div><div class="line" id="021541"><span class="nick" style="color:#8dd3c7"><a href="#021541" label="[02:15:41]">&lt;OriansJ`&gt;</a></span><span class="message">it was part of the mes.c build process for a long time before I got janneke to switch to a much simpler build</span></div><div class="line" id="021637"><span class="nick" style="color:#8dd3c7"><a href="#021637" label="[02:16:37]">&lt;OriansJ`&gt;</a></span><span class="message">It took 1.5-2 Months to clear out all of the C macros (as M2-Planet doesn't support any C macros)</span></div><div class="line" id="021929"><span class="nick" style="color:#2e2a4a"><a href="#021929" label="[02:19:29]">&lt;xentrac&gt;</a></span><span class="message">the problem with the build system was that it needed to compile the C source using a C compiler that included a C preprocessor?</span></div><div class="line" id="022040"><span class="nick" style="color:#8dd3c7"><a href="#022040" label="[02:20:40]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: the problem with the build system  was it  that it was not possible to compile the source code without the build system.</span></div><div class="line" id="022100"><span class="nick" style="color:#2e2a4a"><a href="#022100" label="[02:21:00]">&lt;xentrac&gt;</a></span><span class="message">why not?  what was it doing?</span></div><div class="line" id="022110"><span class="nick" style="color:#2e2a4a"><a href="#022110" label="[02:21:10]">&lt;xentrac&gt;</a></span><span class="message">you said it was snarfing but I don't know what that means</span></div><div class="line" id="022214"><span class="nick" style="color:#8dd3c7"><a href="#022214" label="[02:22:14]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: think lisp macro expansion upon the files but the compiler only sees the expanded files and the user only has the non-expanded files</span></div><div class="line" id="022231"><span class="nick" style="color:#8dd3c7"><a href="#022231" label="[02:22:31]">&lt;OriansJ`&gt;</a></span><span class="message">the build system does the expanding</span></div><div class="line" id="022318"><span class="nick" style="color:#2e2a4a"><a href="#022318" label="[02:23:18]">&lt;xentrac&gt;</a></span><span class="message">janneke implemented Lisp macros in the build system?  How does that help generate C for the compiler?</span></div><div class="line" id="022341"><span class="nick" style="color:#2e2a4a"><a href="#022341" label="[02:23:41]">&lt;xentrac&gt;</a></span><span class="message">I feel embarrassed because I feel like I must be asking a really stupid question so maybe I should stop</span></div><div class="line" id="022347"><span class="nick" style="color:#2e2a4a"><a href="#022347" label="[02:23:47]">&lt;xentrac&gt;</a></span><span class="message">I must be misunderstanding something basic</span></div><div class="line" id="022357"><span class="nick" style="color:#8dd3c7"><a href="#022357" label="[02:23:57]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: mes.c is a lisp interpreter, not a Compiler</span></div><div class="line" id="022411"><span class="nick" style="color:#2e2a4a"><a href="#022411" label="[02:24:11]">&lt;xentrac&gt;</a></span><span class="message">sensible</span></div><div class="line" id="022519"><span class="nick" style="color:#8dd3c7"><a href="#022519" label="[02:25:19]">&lt;OriansJ`&gt;</a></span><span class="message">the build system used guile to manipulate the contents of the source file to generate the C code that ultimately was built into the binary mes</span></div><div class="line" id="022557"><span class="nick" style="color:#2e2a4a"><a href="#022557" label="[02:25:57]">&lt;xentrac&gt;</a></span><span class="message">oh, it used a compiler written in Guile to compile mes.c from whatever it was written in into actual C?</span></div><div class="line" id="022620"><span class="nick" style="color:#8dd3c7"><a href="#022620" label="[02:26:20]">&lt;OriansJ`&gt;</a></span><span class="message">approximately correct</span></div><div class="line" id="022655"><span class="nick" style="color:#2e2a4a"><a href="#022655" label="[02:26:55]">&lt;xentrac&gt;</a></span><span class="message">and you're categorizing that compiler as part of the build system</span></div><div class="line" id="022704"><span class="nick" style="color:#2e2a4a"><a href="#022704" label="[02:27:04]">&lt;xentrac&gt;</a></span><span class="message">I think I understand now</span></div><div class="line" id="022716"><span class="nick" style="color:#8dd3c7"><a href="#022716" label="[02:27:16]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: it was part of the build system</span></div><div class="line" id="022743"><span class="nick" style="color:#8dd3c7"><a href="#022743" label="[02:27:43]">&lt;OriansJ`&gt;</a></span><span class="message">which is what made it a snarfing build system</span></div><div class="line" id="022829"><span class="nick" style="color:#2e2a4a"><a href="#022829" label="[02:28:29]">&lt;xentrac&gt;</a></span><span class="message">I see</span></div><div class="line" id="022917"><span class="nick" style="color:#8dd3c7"><a href="#022917" label="[02:29:17]">&lt;OriansJ`&gt;</a></span><span class="message">thus they as a class are considerably difficult to remove/replace in a build chain; even with considerable help.</span></div><div class="line" id="023027"><span class="nick" style="color:#8dd3c7"><a href="#023027" label="[02:30:27]">&lt;OriansJ`&gt;</a></span><span class="message">janneke wrote both the snarfing and the source code but it still took him a month to unwind it into buildable source code.</span></div><div class="line" id="023434"><span class="nick" style="color:#8dd3c7"><a href="#023434" label="[02:34:34]">&lt;OriansJ`&gt;</a></span><span class="message">it is partly why I created kaem, so that bootstrappers didn't have an excuse in regards to doing sane builds. (737 bytes with lots of room for shrinking the binary)</span></div><div class="line" id="023840"><span class="nick" style="color:#8dd3c7"><a href="#023840" label="[02:38:40]">&lt;OriansJ`&gt;</a></span><span class="message">funny thing is scheme would be so much easier to bootstrap if it wasn't for this syntax-case monster (which will probably end up being bigger to implement than the rest of the language put together)</span></div><div class="line" id="024605"><span class="nick" style="color:#8dd3c7"><a href="#024605" label="[02:46:05]">&lt;OriansJ`&gt;</a></span><span class="message">although knowing my luck, odds are I am probably just making this all harder on myself then necessary and someone with a different set of eyes just needs to rewrite mes_macro.c and the bootstrap to GCC would be done.</span></div><div class="line" id="025026"><span class="nick" style="color:#2e2a4a"><a href="#025026" label="[02:50:26]">&lt;xentrac&gt;</a></span><span class="message">yes, I think syntax-case or syntax-rules is notoriously annoying to implement, and probably a language that provided just bare syntactic closures would be much simpler</span></div><div class="line" id="025147"><span class="nick" style="color:#8dd3c7"><a href="#025147" label="[02:51:47]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: but it needs to be compatible with common scheme macros as it appears impossible to seperate scheme users from macros</span></div><div class="line" id="030235"><span class="nick" style="color:#8dd3c7"><a href="#030235" label="[03:02:35]">&lt;OriansJ`&gt;</a></span><span class="message">and running MesCC and guix would be required to finish the guix bootstrap.</span></div><div class="line" id="030313"><span class="nick" style="color:#8dd3c7"><a href="#030313" label="[03:03:13]">&lt;OriansJ`&gt;</a></span><span class="message">(bootstrapping guile on the other hand would require full support of syntax-case)</span></div><div class="line" id="042329"><span class="nick" style="color:#2e2a4a"><a href="#042329" label="[04:23:29]">&lt;xentrac&gt;</a></span><span class="message">I mean you could have a syntax-case implementation written in Scheme with syntactic closures</span></div><div class="line" id="082154"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado_</span></div><div class="line" id="082157"><span class="nick">***</span><span class="message notice">rekado_ is now known as rekado</span></div><br /></div></body></html>