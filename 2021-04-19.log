<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-04-19.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="003507"><span class="nick" style="color:#8dd3c7"><a href="#003507" label="[00:35:07]">&lt;fossy&gt;</a></span><span class="message">&lt;stikonas&gt; fossy: for mes libc FILES variable, do we want one file per line?</span></div><div class="line" id="003527"><span class="nick" style="color:#8dd3c7"><a href="#003527" label="[00:35:27]">&lt;fossy&gt;</a></span><span class="message">what about break at column 80?</span></div><div class="line" id="003703"><span class="nick" style="color:#2e2a4a"><a href="#003703" label="[00:37:03]">&lt;stikonas&gt;</a></span><span class="message">fossy: yes, that's what I did</span></div><div class="line" id="003720"><span class="nick" style="color:#2e2a4a"><a href="#003720" label="[00:37:20]">&lt;stikonas&gt;</a></span><span class="message">+ extra line break when parent folder changes</span></div><div class="line" id="003734"><span class="nick" style="color:#8dd3c7"><a href="#003734" label="[00:37:34]">&lt;fossy&gt;</a></span><span class="message">yeah sounds good</span></div><div class="line" id="003745"><span class="nick" style="color:#8dd3c7"><a href="#003745" label="[00:37:45]">&lt;fossy&gt;</a></span><span class="message">Ill review again in just a moment</span></div><div class="line" id="003747"><span class="nick" style="color:#2e2a4a"><a href="#003747" label="[00:37:47]">&lt;stikonas&gt;</a></span><span class="message">cleaning up remaining texinfo files</span></div><div class="line" id="003752"><span class="nick" style="color:#2e2a4a"><a href="#003752" label="[00:37:52]">&lt;stikonas&gt;</a></span><span class="message">but mnaybe in another PR then</span></div><div class="line" id="003758"><span class="nick" style="color:#2e2a4a"><a href="#003758" label="[00:37:58]">&lt;stikonas&gt;</a></span><span class="message">this one is already getting big</span></div><div class="line" id="003838"><span class="nick" style="color:#2e2a4a"><a href="#003838" label="[00:38:38]">&lt;stikonas&gt;</a></span><span class="message">fossy: oh, there is a typo in commit message...</span></div><div class="line" id="003841"><span class="nick" style="color:#2e2a4a"><a href="#003841" label="[00:38:41]">&lt;stikonas&gt;</a></span><span class="message">I can update it</span></div><div class="line" id="023153"><span class="nick" style="color:#2e2a4a"><a href="#023153" label="[02:31:53]">&lt;stikonas&gt;</a></span><span class="message">ok, I have no more ideas about the remaining 3 intermittent errors... <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/issues">https://github.com/fosslinux/live-bootstrap/issues</a> </span></div><div class="line" id="023210"><span class="nick" style="color:#2e2a4a"><a href="#023210" label="[02:32:10]">&lt;stikonas&gt;</a></span><span class="message">at least we caught the ones that were happening most frequently</span></div><div class="line" id="024644"><span class="nick" style="color:#6b8072"><a href="#024644" label="[02:46:44]">&lt;OriansJ`&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/issues/94">https://github.com/fosslinux/live-bootstrap/issues/94</a>  perhaps bash redirect pipe failed to flush to disk. checking for vti.tmp in the Post-mortem would either confirm or refute that hypothesis</span></div><div class="line" id="024911"><span class="nick" style="color:#6b8072"><a href="#024911" label="[02:49:11]">&lt;OriansJ`&gt;</a></span><span class="message">This would be perl failing to write the makefile <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/issues/102">https://github.com/fosslinux/live-bootstrap/issues/102</a> </span></div><div class="line" id="024936"><span class="nick" style="color:#6b8072"><a href="#024936" label="[02:49:36]">&lt;OriansJ`&gt;</a></span><span class="message">( or M4 )</span></div><div class="line" id="025023"><span class="nick" style="color:#2e2a4a"><a href="#025023" label="[02:50:23]">&lt;stikonas&gt;</a></span><span class="message">yes, and another one is similar with mkdir failure</span></div><div class="line" id="025030"><span class="nick" style="color:#2e2a4a"><a href="#025030" label="[02:50:30]">&lt;stikonas&gt;</a></span><span class="message">but it's not clear why...</span></div><div class="line" id="025040"><span class="nick" style="color:#2e2a4a"><a href="#025040" label="[02:50:40]">&lt;stikonas&gt;</a></span><span class="message">and I think those runs are in QEMU (initramfs)</span></div><div class="line" id="025045"><span class="nick" style="color:#2e2a4a"><a href="#025045" label="[02:50:45]">&lt;stikonas&gt;</a></span><span class="message">so there shouldn't be disk</span></div><div class="line" id="025058"><span class="nick" style="color:#6b8072"><a href="#025058" label="[02:50:58]">&lt;OriansJ`&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/issues/103">https://github.com/fosslinux/live-bootstrap/issues/103</a>  this seems like a sync to disk bug would issuing sync fix it in testing?</span></div><div class="line" id="025121"><span class="nick" style="color:#2e2a4a"><a href="#025121" label="[02:51:21]">&lt;stikonas&gt;</a></span><span class="message">gforce_de1977: can you try inserting sync there?</span></div><div class="line" id="025128"><span class="nick" style="color:#2e2a4a"><a href="#025128" label="[02:51:28]">&lt;stikonas&gt;</a></span><span class="message">(after mkdir)</span></div><div class="line" id="025206"><span class="nick" style="color:#2e2a4a"><a href="#025206" label="[02:52:06]">&lt;stikonas&gt;</a></span><span class="message">anyway, those errors are infrequent even in gforce_de1977's runs</span></div><div class="line" id="025220"><span class="nick" style="color:#2e2a4a"><a href="#025220" label="[02:52:20]">&lt;stikonas&gt;</a></span><span class="message">and gforce_de1977 somehow has higher failure rate for intermittent errors</span></div><div class="line" id="025259"><span class="nick" style="color:#6b8072"><a href="#025259" label="[02:52:59]">&lt;OriansJ`&gt;</a></span><span class="message">stikonas[m]: well look at how much RAM you are using stikonas[m] and how much gforce_de1977 is.</span></div><div class="line" id="025330"><span class="nick" style="color:#6b8072"><a href="#025330" label="[02:53:30]">&lt;OriansJ`&gt;</a></span><span class="message">in sufficient memory will reduce RAM caching by the kernel and lead to exposing disk issues.</span></div><div class="line" id="025352"><span class="nick" style="color:#80b1d3"><a href="#025352" label="[02:53:52]">&lt;stikonas[m]&gt;</a></span><span class="message">Hmm, that's true</span></div><div class="line" id="025419"><span class="nick" style="color:#6b8072"><a href="#025419" label="[02:54:19]">&lt;OriansJ`&gt;</a></span><span class="message">especially if the disk IO is choked by a swapfile and applications doing lots of swapping.</span></div><div class="line" id="025625"><span class="nick" style="color:#6b8072"><a href="#025625" label="[02:56:25]">&lt;OriansJ`&gt;</a></span><span class="message">All posix kernels have permission to fail on any system call and applications are expected to check syscall returns for errors but most don't</span></div><div class="line" id="025707"><span class="nick" style="color:#6b8072"><a href="#025707" label="[02:57:07]">&lt;OriansJ`&gt;</a></span><span class="message">So mkdir could have easily gotten an error code and ignored it and happily went on its way to create a bug</span></div><div class="line" id="025734"><span class="nick" style="color:#6b8072"><a href="#025734" label="[02:57:34]">&lt;OriansJ`&gt;</a></span><span class="message">The same for application writes (which are not being retried)</span></div><div class="line" id="030155"><span class="nick" style="color:#6b8072"><a href="#030155" label="[03:01:55]">&lt;OriansJ`&gt;</a></span><span class="message">we could tweak our libc to test that hypothesis and have it write to stderr on a write syscall failure and see if the error message we expect shows up.</span></div><div class="line" id="032516"><span class="nick" style="color:#6d2462"><a href="#032516" label="[03:25:16]">&lt;Hagfish&gt;</a></span><span class="message">that's clever, i've never thought of adding something like that to a libc</span></div><div class="line" id="034902"><span class="nick" style="color:#6b8072"><a href="#034902" label="[03:49:02]">&lt;OriansJ`&gt;</a></span><span class="message">Hagfish: benefits of bootstrapping. no source is immune from being pried open and being played with, so that we can understand how it works.</span></div><div class="line" id="040434"><span class="nick" style="color:#234e69"><a href="#040434" label="[04:04:34]">&lt;c4droid&gt;</a></span><span class="message">Hi, emm, someone know how to use the bootstrap seeds to build something or write some package definitions?</span></div><div class="line" id="040459"><span class="nick" style="color:#234e69"><a href="#040459" label="[04:04:59]">&lt;c4droid&gt;</a></span><span class="message">I watched the document, but I still have a little confused</span></div><div class="line" id="041815"><span class="nick" style="color:#234e69"><a href="#041815" label="[04:18:15]">&lt;c4droid&gt;</a></span><span class="message">I'm current work on make Linux From Scratch to reproducible, using the guix power, but I stucked at using bootstrap seeds build temp toolchain</span></div><div class="line" id="042914"><span class="nick" style="color:#6b8072"><a href="#042914" label="[04:29:14]">&lt;OriansJ`&gt;</a></span><span class="message">c4droid: if you look at <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/mescc-tools.scm">https://github.com/oriansj/mescc-tools/blob/master/mescc-tools.scm</a>  you'll see you can use guix to just run a straight make</span></div><div class="line" id="044230"><span class="nick" style="color:#234e69"><a href="#044230" label="[04:42:30]">&lt;c4droid&gt;</a></span><span class="message">OriansJ`: I watch that, maybe I should make some research for it</span></div><div class="line" id="050541"><span class="nick" style="color:#234e69"><a href="#050541" label="[05:05:41]">&lt;c4droid&gt;</a></span><span class="message">OriansJ`: Hi, I just take some research, first using mes tool to build guix, then build the lfs cross toolchain, and build the lfs final system, it's that right?</span></div><div class="line" id="050731"><span class="nick" style="color:#234e69"><a href="#050731" label="[05:07:31]">&lt;c4droid&gt;</a></span><span class="message">mes tool-&gt;guix-mesboot-&gt;lfs-cross-toolchain(guix-mesboot)-&gt;lfs-final-system(guix-mesboot+lfs-cross-toolchain)</span></div><div class="line" id="051128"><span class="nick" style="color:#234e69"><a href="#051128" label="[05:11:28]">&lt;c4droid&gt;</a></span><span class="message">maybe I wrong..</span></div><div class="line" id="101021"><span class="nick" style="color:#6c3d55"><a href="#101021" label="[10:10:21]">&lt;gforce_d11977&gt;</a></span><span class="message">stikonas: ok, will add a 'sync' after each 'mkdir' too see if it helps. OriansJ: let me first check if a 'sync' helps, if not we can output every write syscall error using stderr</span></div><div class="line" id="105957"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado_</span></div><div class="line" id="110002"><span class="nick">***</span><span class="message notice">rekado_ is now known as rekado</span></div><div class="line" id="124526"><span class="nick">***</span><span class="message notice">roptat_ is now known as roptat</span></div><div class="line" id="213044"><span class="nick">***</span><span class="message notice">terpri_ is now known as terpri</span></div><div class="line" id="233510"><span class="nick" style="color:#d9d9d9"><a href="#233510" label="[23:35:10]">&lt;bauen1&gt;</a></span><span class="message"> /18</span></div><div class="line" id="234826"><span class="nick" style="color:#6b8072"><a href="#234826" label="[23:48:26]">&lt;OriansJ`&gt;</a></span><span class="message">c4droid: hopefully I am understanding you correctly but you appear to wish to be doing a full bootstrap for Linux from Scratch; in which case you probably wish to follow these steps: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/">https://github.com/fosslinux/live-bootstrap/</a>  which have the following dependency graph: <a rel="nofollow" href="https://github.com/oriansj/talk-notes/blob/master/live-bootstrap.pdf">https://github.com/oriansj/talk-notes/blob/master/live-bootstrap.pdf</a>  and from which you should be able to do a full Linux from Scratch using the version of GCC</span></div><div class="line" id="234827"><span class="nick" style="color:#6b8072"><a href="#234827" label="[23:48:27]">&lt;OriansJ`&gt;</a></span><span class="message">produced. For Guix is different than Linux from Scratch and implements a different bootstrap map: <a rel="nofollow" href="https://github.com/oriansj/talk-notes/blob/master/Current%20bootstrap%20map.pdf">https://github.com/oriansj/talk-notes/blob/master/Current%20bootstrap%20map.pdf</a>  and requires a static guile binary as well to drive the steps (and it does use pregenerated files as of right now.)</span></div><br /></div></body></html>