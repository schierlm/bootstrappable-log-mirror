<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-12-19.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000005"><span class="nick" style="color:#389600"><a href="#000005" label="[00:00:05]">&lt;Googulator&gt;</a></span><span class="message">also, the swap creation script only matters if you use the -s option</span></div><div class="line" id="000031"><span class="nick" style="color:#389600"><a href="#000031" label="[00:00:31]">&lt;Googulator&gt;</a></span><span class="message">so <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/commit/a767609910e1ca9521ee681c608a6ebccc0f56e5">https://github.com/fosslinux/live-bootstrap/commit/a767609910e1ca9521ee681c608a6ebccc0f56e5</a>  should work if you don't try to use swap</span></div><div class="line" id="000123"><span class="nick" style="color:#389600"><a href="#000123" label="[00:01:23]">&lt;Googulator&gt;</a></span><span class="message">checksums are wrong in these, though, so use --update-checksum</span></div><div class="line" id="000821"><span class="nick" style="color:#8dd3c7"><a href="#000821" label="[00:08:21]">&lt;stikonas&gt;</a></span><span class="message">somehow python distfiles downloader seems quite unreliable now for me...</span></div><div class="line" id="000843"><span class="nick" style="color:#389600"><a href="#000843" label="[00:08:43]">&lt;Googulator&gt;</a></span><span class="message">yeah, it happens to me as well occasionally</span></div><div class="line" id="000920"><span class="nick" style="color:#8dd3c7"><a href="#000920" label="[00:09:20]">&lt;stikonas&gt;</a></span><span class="message">downloaded tcc-0.9.27 using wget....</span></div><div class="line" id="001014"><span class="nick" style="color:#389600"><a href="#001014" label="[00:10:14]">&lt;Googulator&gt;</a></span><span class="message">this is one of the reasons why I implemented manifest-driven downloads (skipping files that are needed only after network is up)</span></div><div class="line" id="001143"><span class="nick" style="color:#8dd3c7"><a href="#001143" label="[00:11:43]">&lt;stikonas&gt;</a></span><span class="message">yeah, but python requests shouldn't be that bad...</span></div><div class="line" id="001150"><span class="nick" style="color:#8dd3c7"><a href="#001150" label="[00:11:50]">&lt;stikonas&gt;</a></span><span class="message">we must be misusing it...</span></div><div class="line" id="001249"><span class="nick" style="color:#389600"><a href="#001249" label="[00:12:49]">&lt;Googulator&gt;</a></span><span class="message">I think it's probably the servers throttling us</span></div><div class="line" id="001303"><span class="nick" style="color:#8dd3c7"><a href="#001303" label="[00:13:03]">&lt;stikonas&gt;</a></span><span class="message">hmm, maybe...</span></div><div class="line" id="001304"><span class="nick" style="color:#389600"><a href="#001304" label="[00:13:04]">&lt;Googulator&gt;</a></span><span class="message">python-requests is seen as a suspicious UA</span></div><div class="line" id="001422"><span class="nick" style="color:#389600"><a href="#001422" label="[00:14:22]">&lt;Googulator&gt;</a></span><span class="message">could even be AI defense - most AI is written in Python these days, so blockking Python UAs helps defend against potential AI bots (like Bing AI, but malicious)</span></div><div class="line" id="001634"><span class="nick" style="color:#8dd3c7"><a href="#001634" label="[00:16:34]">&lt;stikonas&gt;</a></span><span class="message">yeah, it could be...</span></div><div class="line" id="001643"><span class="nick" style="color:#8dd3c7"><a href="#001643" label="[00:16:43]">&lt;stikonas&gt;</a></span><span class="message">since I don't remember it being so bad even a year ago</span></div><div class="line" id="001709"><span class="nick" style="color:#8dd3c7"><a href="#001709" label="[00:17:09]">&lt;stikonas&gt;</a></span><span class="message">ok, checksum-transcriber on riscv should be 560df1e8527df9758252f6255c144cfd6b1555b9d2aa6162011204061af80ab5</span></div><div class="line" id="001749"><span class="nick" style="color:#8dd3c7"><a href="#001749" label="[00:17:49]">&lt;stikonas&gt;</a></span><span class="message">maybe I should make a commit with all fixes first...</span></div><div class="line" id="001754"><span class="nick" style="color:#389600"><a href="#001754" label="[00:17:54]">&lt;Googulator&gt;</a></span><span class="message">checksum-transcriber also changed on amd64, even though it's pre-mes</span></div><div class="line" id="001808"><span class="nick" style="color:#389600"><a href="#001808" label="[00:18:08]">&lt;Googulator&gt;</a></span><span class="message">I'm guessing amd64 checksums weren't updated before the final merge of simplify</span></div><div class="line" id="001908"><span class="nick" style="color:#389600"><a href="#001908" label="[00:19:08]">&lt;Googulator&gt;</a></span><span class="message">also, simple-patch doesn't even have any amd64 checksums rn</span></div><div class="line" id="001930"><span class="nick" style="color:#8dd3c7"><a href="#001930" label="[00:19:30]">&lt;stikonas&gt;</a></span><span class="message">probably not...</span></div><div class="line" id="002014"><span class="nick" style="color:#8dd3c7"><a href="#002014" label="[00:20:14]">&lt;stikonas&gt;</a></span><span class="message">well, tbh, nothing but x86 is usable...</span></div><div class="line" id="002026"><span class="nick" style="color:#8dd3c7"><a href="#002026" label="[00:20:26]">&lt;stikonas&gt;</a></span><span class="message">everything else is just for development</span></div><div class="line" id="002113"><span class="nick" style="color:#389600"><a href="#002113" label="[00:21:13]">&lt;Googulator&gt;</a></span><span class="message">How far does riscv get?</span></div><div class="line" id="002306"><span class="nick" style="color:#2e2a4a"><a href="#002306" label="[00:23:06]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Googulator: tcc-0.9.26</span></div><div class="line" id="002346"><span class="nick" style="color:#389600"><a href="#002346" label="[00:23:46]">&lt;Googulator&gt;</a></span><span class="message">And arm64 gets no love at all, from what I've seen</span></div><div class="line" id="002350"><span class="nick" style="color:#389600"><a href="#002350" label="[00:23:50]">&lt;Googulator&gt;</a></span><span class="message">not even supported in mes</span></div><div class="line" id="002410"><span class="nick" style="color:#389600"><a href="#002410" label="[00:24:10]">&lt;Googulator&gt;</a></span><span class="message">even though it's a bit more mature ecosystem than riscv64</span></div><div class="line" id="002516"><span class="nick" style="color:#2e2a4a"><a href="#002516" label="[00:25:16]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; well, riscv is open ISA</span></div><div class="line" id="002522"><span class="nick" style="color:#2e2a4a"><a href="#002522" label="[00:25:22]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; so probably got more attention because of that</span></div><div class="line" id="002536"><span class="nick" style="color:#8dd3c7"><a href="#002536" label="[00:25:36]">&lt;stikonas&gt;</a></span><span class="message">Googulator: for arm you could try switching to 32-bits in mes...</span></div><div class="line" id="002546"><span class="nick" style="color:#389600"><a href="#002546" label="[00:25:46]">&lt;Googulator&gt;</a></span><span class="message">armv4</span></div><div class="line" id="002547"><span class="nick" style="color:#8dd3c7"><a href="#002547" label="[00:25:47]">&lt;stikonas&gt;</a></span><span class="message">though maybe not all boards support 32-bit mode</span></div><div class="line" id="002554"><span class="nick" style="color:#8dd3c7"><a href="#002554" label="[00:25:54]">&lt;stikonas&gt;</a></span><span class="message">oh, not even v7...</span></div><div class="line" id="002605"><span class="nick" style="color:#389600"><a href="#002605" label="[00:26:05]">&lt;Googulator&gt;</a></span><span class="message">that may not even work on boards that do have 32-bit mode</span></div><div class="line" id="002624"><span class="nick" style="color:#389600"><a href="#002624" label="[00:26:24]">&lt;Googulator&gt;</a></span><span class="message">IIRC armv5 is a compatibility break point</span></div><div class="line" id="002645"><span class="nick" style="color:#8dd3c7"><a href="#002645" label="[00:26:45]">&lt;stikonas&gt;</a></span><span class="message">anyway, arm bootstrap is a mess  indeed</span></div><div class="line" id="002652"><span class="nick" style="color:#8dd3c7"><a href="#002652" label="[00:26:52]">&lt;stikonas&gt;</a></span><span class="message">stage0-posix has aarch64</span></div><div class="line" id="002656"><span class="nick" style="color:#389600"><a href="#002656" label="[00:26:56]">&lt;Googulator&gt;</a></span><span class="message">v5 or newer code will run on v8/9 cores supporting 32-bit mode, but IIRC not v4</span></div><div class="line" id="002710"><span class="nick" style="color:#8dd3c7"><a href="#002710" label="[00:27:10]">&lt;stikonas&gt;</a></span><span class="message">but it's a bit hacky...</span></div><div class="line" id="002719"><span class="nick" style="color:#8dd3c7"><a href="#002719" label="[00:27:19]">&lt;stikonas&gt;</a></span><span class="message">probably less tested..</span></div><div class="line" id="002738"><span class="nick" style="color:#389600"><a href="#002738" label="[00:27:38]">&lt;Googulator&gt;</a></span><span class="message">is that meant to run on top of an existing Linux kernel?</span></div><div class="line" id="002741"><span class="nick" style="color:#8dd3c7"><a href="#002741" label="[00:27:41]">&lt;stikonas&gt;</a></span><span class="message">yeah</span></div><div class="line" id="002748"><span class="nick" style="color:#8dd3c7"><a href="#002748" label="[00:27:48]">&lt;stikonas&gt;</a></span><span class="message">nothing but x86 has kernel bootstrap</span></div><div class="line" id="002800"><span class="nick" style="color:#8dd3c7"><a href="#002800" label="[00:28:00]">&lt;stikonas&gt;</a></span><span class="message">for other arches we probably want uefi bootstrap</span></div><div class="line" id="002811"><span class="nick" style="color:#8dd3c7"><a href="#002811" label="[00:28:11]">&lt;stikonas&gt;</a></span><span class="message">at least to start with</span></div><div class="line" id="002823"><span class="nick" style="color:#8dd3c7"><a href="#002823" label="[00:28:23]">&lt;stikonas&gt;</a></span><span class="message">well, ideally something that uboot can drive too</span></div><div class="line" id="002844"><span class="nick" style="color:#8dd3c7"><a href="#002844" label="[00:28:44]">&lt;stikonas&gt;</a></span><span class="message">otherwise each SoC just has different boot sequence...</span></div><div class="line" id="002846"><span class="nick" style="color:#389600"><a href="#002846" label="[00:28:46]">&lt;Googulator&gt;</a></span><span class="message">IMO it's fair to require enabling uefi support in uboot</span></div><div class="line" id="002854"><span class="nick" style="color:#8dd3c7"><a href="#002854" label="[00:28:54]">&lt;stikonas&gt;</a></span><span class="message">yeah...</span></div><div class="line" id="002901"><span class="nick" style="color:#8dd3c7"><a href="#002901" label="[00:29:01]">&lt;stikonas&gt;</a></span><span class="message">it's basically default option these days</span></div><div class="line" id="002909"><span class="nick" style="color:#389600"><a href="#002909" label="[00:29:09]">&lt;Googulator&gt;</a></span><span class="message">although some major vendors don't do that by default *cough* Rockchip &amp; Radxa *cough*</span></div><div class="line" id="002912"><span class="nick" style="color:#8dd3c7"><a href="#002912" label="[00:29:12]">&lt;stikonas&gt;</a></span><span class="message">but I'm still struggling with UEFI even on amd64...</span></div><div class="line" id="002940"><span class="nick" style="color:#8dd3c7"><a href="#002940" label="[00:29:40]">&lt;stikonas&gt;</a></span><span class="message">well, upstream u-boot is usually better</span></div><div class="line" id="002948"><span class="nick" style="color:#8dd3c7"><a href="#002948" label="[00:29:48]">&lt;stikonas&gt;</a></span><span class="message">though might take some time to support newer boards</span></div><div class="line" id="003103"><span class="nick" style="color:#389600"><a href="#003103" label="[00:31:03]">&lt;Googulator&gt;</a></span><span class="message">in the end, what we will need is to achieve bootstrap from the BROM up on _one_ decent board</span></div><div class="line" id="003131"><span class="nick" style="color:#389600"><a href="#003131" label="[00:31:31]">&lt;Googulator&gt;</a></span><span class="message">and also to build u-boot and/or edk2 in a bootstrapped environment</span></div><div class="line" id="003149"><span class="nick" style="color:#389600"><a href="#003149" label="[00:31:49]">&lt;Googulator&gt;</a></span><span class="message">then we can build trusted bootloaders for other boards using that</span></div><div class="line" id="003306"><span class="nick" style="color:#389600"><a href="#003306" label="[00:33:06]">&lt;Googulator&gt;</a></span><span class="message">Rockchip happens to be relatively decent in this regard, especially the 35xx chips</span></div><div class="line" id="003345"><span class="nick" style="color:#389600"><a href="#003345" label="[00:33:45]">&lt;Googulator&gt;</a></span><span class="message">32KiB embedded boot ROM, loads an insigned, unencrypted binary with minimal header from SPI to 1MiB SRAM</span></div><div class="line" id="003350"><span class="nick" style="color:#389600"><a href="#003350" label="[00:33:50]">&lt;Googulator&gt;</a></span><span class="message">*unsigned</span></div><div class="line" id="003415"><span class="nick" style="color:#389600"><a href="#003415" label="[00:34:15]">&lt;Googulator&gt;</a></span><span class="message">(that would be an arm version of builder-hex0 customized for the particular SoC)</span></div><div class="line" id="003505"><span class="nick" style="color:#389600"><a href="#003505" label="[00:35:05]">&lt;Googulator&gt;</a></span><span class="message">of course, bootstrapping DRAM controller initialization &amp; training is gonna be a challenge</span></div><div class="line" id="003531"><span class="nick" style="color:#389600"><a href="#003531" label="[00:35:31]">&lt;Googulator&gt;</a></span><span class="message">especially since RK35xx currently relies on a blob for that</span></div><div class="line" id="003702"><span class="nick" style="color:#8dd3c7"><a href="#003702" label="[00:37:02]">&lt;stikonas&gt;</a></span><span class="message">u-boot and edk2 is probably out of scope for early bootstrapped environment</span></div><div class="line" id="003715"><span class="nick" style="color:#8dd3c7"><a href="#003715" label="[00:37:15]">&lt;stikonas&gt;</a></span><span class="message">and DRAM training is tricky</span></div><div class="line" id="003722"><span class="nick" style="color:#8dd3c7"><a href="#003722" label="[00:37:22]">&lt;stikonas&gt;</a></span><span class="message">you might need a board with decent amount of SRAM</span></div><div class="line" id="003738"><span class="nick" style="color:#8dd3c7"><a href="#003738" label="[00:37:38]">&lt;stikonas&gt;</a></span><span class="message">e.g. rk3399 can trai DRAM as part of u-boot</span></div><div class="line" id="003755"><span class="nick" style="color:#8dd3c7"><a href="#003755" label="[00:37:55]">&lt;stikonas&gt;</a></span><span class="message">but SRAM is so small that relevant u-boot  stage barely fits there</span></div><div class="line" id="003819"><span class="nick" style="color:#389600"><a href="#003819" label="[00:38:19]">&lt;Googulator&gt;</a></span><span class="message">IIRC 3399's bootloader is also nowhere near as open as later RK SoCs</span></div><div class="line" id="003829"><span class="nick" style="color:#8dd3c7"><a href="#003829" label="[00:38:29]">&lt;stikonas&gt;</a></span><span class="message">how come?</span></div><div class="line" id="003839"><span class="nick" style="color:#8dd3c7"><a href="#003839" label="[00:38:39]">&lt;stikonas&gt;</a></span><span class="message">it doesn't use any blobs at least</span></div><div class="line" id="003840"><span class="nick" style="color:#389600"><a href="#003840" label="[00:38:40]">&lt;Googulator&gt;</a></span><span class="message">requiring an encrypted/scrambled image for the initial loader</span></div><div class="line" id="003850"><span class="nick" style="color:#389600"><a href="#003850" label="[00:38:50]">&lt;Googulator&gt;</a></span><span class="message">(the keys are at least publicly known for it)</span></div><div class="line" id="003850"><span class="nick" style="color:#8dd3c7"><a href="#003850" label="[00:38:50]">&lt;stikonas&gt;</a></span><span class="message">no, that's not true</span></div><div class="line" id="003902"><span class="nick" style="color:#8dd3c7"><a href="#003902" label="[00:39:02]">&lt;stikonas&gt;</a></span><span class="message">you can just use pre u-boot</span></div><div class="line" id="003923"><span class="nick" style="color:#389600"><a href="#003923" label="[00:39:23]">&lt;Googulator&gt;</a></span><span class="message">I don't mean u-boot's downstream interface</span></div><div class="line" id="003925"><span class="nick" style="color:#389600"><a href="#003925" label="[00:39:25]">&lt;Googulator&gt;</a></span><span class="message">that's just fine</span></div><div class="line" id="003928"><span class="nick" style="color:#8dd3c7"><a href="#003928" label="[00:39:28]">&lt;stikonas&gt;</a></span><span class="message">so BROM -&gt; U-boot TPL (that does DRAM training) -&gt; BROM -&gt; U-boot SPL -&gt; ATF-&gt; U-boot proper</span></div><div class="line" id="003937"><span class="nick" style="color:#8dd3c7"><a href="#003937" label="[00:39:37]">&lt;stikonas&gt;</a></span><span class="message">I think tha'ts the boot sequence</span></div><div class="line" id="003948"><span class="nick" style="color:#389600"><a href="#003948" label="[00:39:48]">&lt;Googulator&gt;</a></span><span class="message">yeah, but you have to encrypt &amp; sign TPL</span></div><div class="line" id="003953"><span class="nick" style="color:#8dd3c7"><a href="#003953" label="[00:39:53]">&lt;stikonas&gt;</a></span><span class="message">no, not on my board</span></div><div class="line" id="004001"><span class="nick" style="color:#8dd3c7"><a href="#004001" label="[00:40:01]">&lt;stikonas&gt;</a></span><span class="message">rockpro64 is fine</span></div><div class="line" id="004010"><span class="nick" style="color:#8dd3c7"><a href="#004010" label="[00:40:10]">&lt;stikonas&gt;</a></span><span class="message">maybe there are some boards where you need to do that</span></div><div class="line" id="004011"><span class="nick" style="color:#389600"><a href="#004011" label="[00:40:11]">&lt;Googulator&gt;</a></span><span class="message">AFAIK you do, it's just done by default using a well-known default key</span></div><div class="line" id="004050"><span class="nick" style="color:#8dd3c7"><a href="#004050" label="[00:40:50]">&lt;stikonas&gt;</a></span><span class="message">I thought only SPI needs some minor modification</span></div><div class="line" id="004101"><span class="nick" style="color:#8dd3c7"><a href="#004101" label="[00:41:01]">&lt;stikonas&gt;</a></span><span class="message">possibly writing every second byte or something similar</span></div><div class="line" id="004102"><span class="nick" style="color:#8dd3c7"><a href="#004102" label="[00:41:02]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="004109"><span class="nick" style="color:#389600"><a href="#004109" label="[00:41:09]">&lt;Googulator&gt;</a></span><span class="message">or maybe it's the header that needs to be crypted</span></div><div class="line" id="004129"><span class="nick" style="color:#389600"><a href="#004129" label="[00:41:29]">&lt;Googulator&gt;</a></span><span class="message">but I remember you can't have a pre-35xx image be entirely in cleartext</span></div><div class="line" id="004152"><span class="nick" style="color:#389600"><a href="#004152" label="[00:41:52]">&lt;Googulator&gt;</a></span><span class="message">again, this is not a lockout, since the keys used (by default) are published</span></div><div class="line" id="004157"><span class="nick" style="color:#389600"><a href="#004157" label="[00:41:57]">&lt;Googulator&gt;</a></span><span class="message">but not good for bootstrapping</span></div><div class="line" id="004234"><span class="nick" style="color:#8dd3c7"><a href="#004234" label="[00:42:34]">&lt;stikonas&gt;</a></span><span class="message">yeah, cryptography / signing is not good for bootstrapping</span></div><div class="line" id="004249"><span class="nick" style="color:#8dd3c7"><a href="#004249" label="[00:42:49]">&lt;stikonas&gt;</a></span><span class="message">i.e. even if key is known, you don't want to sign hex0.efi</span></div><div class="line" id="004402"><span class="nick" style="color:#389600"><a href="#004402" label="[00:44:02]">&lt;Googulator&gt;</a></span><span class="message">meanwhile, qemu is building linux</span></div><div class="line" id="004415"><span class="nick" style="color:#389600"><a href="#004415" label="[00:44:15]">&lt;Googulator&gt;</a></span><span class="message">bare metal system still in mes</span></div><div class="line" id="004509"><span class="nick" style="color:#6b8072"><a href="#004509" label="[00:45:09]">&lt;fossy&gt;</a></span><span class="message">what is your bare metal system Googulator</span></div><div class="line" id="004531"><span class="nick" style="color:#8dd3c7"><a href="#004531" label="[00:45:31]">&lt;stikonas&gt;</a></span><span class="message">Googulator: I wonder if you are thinking of another boot sequence that rockchip supports and uses proprietary blob</span></div><div class="line" id="004553"><span class="nick" style="color:#8dd3c7"><a href="#004553" label="[00:45:53]">&lt;stikonas&gt;</a></span><span class="message">so far (but I haven't looked thouroughly) I can't see uboot doing any signing/encryption</span></div><div class="line" id="004603"><span class="nick" style="color:#389600"><a href="#004603" label="[00:46:03]">&lt;Googulator&gt;</a></span><span class="message">fossy: Asus P5K Premium with Q6600 and 4GB of DDR2-800 (dual-channel so 1600 effective)</span></div><div class="line" id="004612"><span class="nick" style="color:#389600"><a href="#004612" label="[00:46:12]">&lt;Googulator&gt;</a></span><span class="message">stikonas: not uboot</span></div><div class="line" id="004627"><span class="nick" style="color:#389600"><a href="#004627" label="[00:46:27]">&lt;Googulator&gt;</a></span><span class="message">but the utility that generates the final image you can flash on SPI or SD/eMMC</span></div><div class="line" id="004635"><span class="nick" style="color:#8dd3c7"><a href="#004635" label="[00:46:35]">&lt;stikonas&gt;</a></span><span class="message">there is no utility</span></div><div class="line" id="004640"><span class="nick" style="color:#8dd3c7"><a href="#004640" label="[00:46:40]">&lt;stikonas&gt;</a></span><span class="message">I just use u-boot directly</span></div><div class="line" id="004646"><span class="nick" style="color:#389600"><a href="#004646" label="[00:46:46]">&lt;Googulator&gt;</a></span><span class="message">there's a header that needs to be prepended, and that's encrypted IIRC</span></div><div class="line" id="004704"><span class="nick" style="color:#8dd3c7"><a href="#004704" label="[00:47:04]">&lt;stikonas&gt;</a></span><span class="message">u-boot produces idbloader-spi.img and u-boot.itb files</span></div><div class="line" id="004708"><span class="nick" style="color:#8dd3c7"><a href="#004708" label="[00:47:08]">&lt;stikonas&gt;</a></span><span class="message">none of those seem encrypted</span></div><div class="line" id="004718"><span class="nick" style="color:#389600"><a href="#004718" label="[00:47:18]">&lt;Googulator&gt;</a></span><span class="message">IIRC idbloader-spi.img's header is</span></div><div class="line" id="004726"><span class="nick" style="color:#389600"><a href="#004726" label="[00:47:26]">&lt;Googulator&gt;</a></span><span class="message">maybe that was even earlier SoCs though</span></div><div class="line" id="004729"><span class="nick" style="color:#8dd3c7"><a href="#004729" label="[00:47:29]">&lt;stikonas&gt;</a></span><span class="message">hmm, maybe...</span></div><div class="line" id="004739"><span class="nick" style="color:#8dd3c7"><a href="#004739" label="[00:47:39]">&lt;stikonas&gt;</a></span><span class="message">let me see that idbloader</span></div><div class="line" id="004746"><span class="nick" style="color:#8dd3c7"><a href="#004746" label="[00:47:46]">&lt;stikonas&gt;</a></span><span class="message">but it's produced directly by u-boot</span></div><div class="line" id="004750"><span class="nick" style="color:#389600"><a href="#004750" label="[00:47:50]">&lt;Googulator&gt;</a></span><span class="message">on 35xx, there's the RKNS header, which is now fully in the clear</span></div><div class="line" id="004754"><span class="nick" style="color:#8dd3c7"><a href="#004754" label="[00:47:54]">&lt;stikonas&gt;</a></span><span class="message">unless it does some inline header encryption</span></div><div class="line" id="004819"><span class="nick" style="color:#389600"><a href="#004819" label="[00:48:19]">&lt;Googulator&gt;</a></span><span class="message">on older SoCs, the header had to be encrypted (and it had a different magic vs &quot;RKNS&quot;)</span></div><div class="line" id="004851"><span class="nick" style="color:#8dd3c7"><a href="#004851" label="[00:48:51]">&lt;stikonas&gt;</a></span><span class="message">well, begining of the file is a bit unreadable</span></div><div class="line" id="004900"><span class="nick" style="color:#8dd3c7"><a href="#004900" label="[00:49:00]">&lt;stikonas&gt;</a></span><span class="message">though it's not like I can read aarch64 machine code...</span></div><div class="line" id="005024"><span class="nick" style="color:#8dd3c7"><a href="#005024" label="[00:50:24]">&lt;stikonas&gt;</a></span><span class="message">ok, it's this tool: <a rel="nofollow" href="https://github.com/u-boot/u-boot/blob/master/tools/mkimage.c">https://github.com/u-boot/u-boot/blob/master/tools/mkimage.c</a> </span></div><div class="line" id="005200"><span class="nick" style="color:#8dd3c7"><a href="#005200" label="[00:52:00]">&lt;stikonas&gt;</a></span><span class="message">ok, I guess this is what you are talking about: <a rel="nofollow" href="https://github.com/u-boot/u-boot/blob/master/tools/rkcommon.c">https://github.com/u-boot/u-boot/blob/master/tools/rkcommon.c</a> </span></div><div class="line" id="005305"><span class="nick" style="color:#389600"><a href="#005305" label="[00:53:05]">&lt;Googulator&gt;</a></span><span class="message">yes, 3399 still needs the V1 header</span></div><div class="line" id="005355"><span class="nick" style="color:#8dd3c7"><a href="#005355" label="[00:53:55]">&lt;stikonas&gt;</a></span><span class="message">ok, I see...</span></div><div class="line" id="005408"><span class="nick" style="color:#8dd3c7"><a href="#005408" label="[00:54:08]">&lt;stikonas&gt;</a></span><span class="message">yeah, not a problem for using stuff, but problem for bootstrappign</span></div><div class="line" id="005428"><span class="nick" style="color:#8dd3c7"><a href="#005428" label="[00:54:28]">&lt;stikonas&gt;</a></span><span class="message">well, bootstrapping from BROM...</span></div><div class="line" id="005431"><span class="nick" style="color:#389600"><a href="#005431" label="[00:54:31]">&lt;Googulator&gt;</a></span><span class="message">the header is always RC4-encrypted, while the binaries referenced in it can be in the clear or RC4</span></div><div class="line" id="005453"><span class="nick" style="color:#389600"><a href="#005453" label="[00:54:53]">&lt;Googulator&gt;</a></span><span class="message">at least RC4 is a stream cipher, so you can just ship a premade keystream &amp; XOR with it</span></div><div class="line" id="005455"><span class="nick" style="color:#8dd3c7"><a href="#005455" label="[00:54:55]">&lt;stikonas&gt;</a></span><span class="message">yes, the key is there...</span></div><div class="line" id="005558"><span class="nick" style="color:#8dd3c7"><a href="#005558" label="[00:55:58]">&lt;stikonas&gt;</a></span><span class="message">well, rc4 is fairly simple...</span></div><div class="line" id="005559"><span class="nick" style="color:#8dd3c7"><a href="#005559" label="[00:55:59]">&lt;stikonas&gt;</a></span><span class="message">but still</span></div><div class="line" id="005615"><span class="nick" style="color:#8dd3c7"><a href="#005615" label="[00:56:15]">&lt;stikonas&gt;</a></span><span class="message">not something I want to do by hand...</span></div><div class="line" id="005718"><span class="nick" style="color:#8dd3c7"><a href="#005718" label="[00:57:18]">&lt;stikonas&gt;</a></span><span class="message">but what's the point of all this mes if key is open...</span></div><div class="line" id="005730"><span class="nick" style="color:#8dd3c7"><a href="#005730" label="[00:57:30]">&lt;stikonas&gt;</a></span><span class="message">s/mes/mess/</span></div><div class="line" id="005816"><span class="nick" style="color:#389600"><a href="#005816" label="[00:58:16]">&lt;Googulator&gt;</a></span><span class="message">IIRC you can reprogram it by burning some efuses</span></div><div class="line" id="005824"><span class="nick" style="color:#389600"><a href="#005824" label="[00:58:24]">&lt;Googulator&gt;</a></span><span class="message">to lock it down fully</span></div><div class="line" id="005840"><span class="nick" style="color:#389600"><a href="#005840" label="[00:58:40]">&lt;Googulator&gt;</a></span><span class="message">that's still the case in 35xx</span></div><div class="line" id="005904"><span class="nick" style="color:#389600"><a href="#005904" label="[00:59:04]">&lt;Googulator&gt;</a></span><span class="message">but 35xx just uses no crypto at all when it's not locked down</span></div><div class="line" id="005913"><span class="nick" style="color:#389600"><a href="#005913" label="[00:59:13]">&lt;Googulator&gt;</a></span><span class="message">earlier SoCs instead fall back to a default key</span></div><div class="line" id="010133"><span class="nick" style="color:#8dd3c7"><a href="#010133" label="[01:01:33]">&lt;stikonas&gt;</a></span><span class="message">yeah, I think I've read about those efuses</span></div><div class="line" id="010142"><span class="nick" style="color:#8dd3c7"><a href="#010142" label="[01:01:42]">&lt;stikonas&gt;</a></span><span class="message">you can kind of implement your own secure boot there</span></div><div class="line" id="010205"><span class="nick" style="color:#8dd3c7"><a href="#010205" label="[01:02:05]">&lt;stikonas&gt;</a></span><span class="message">but in home environment I'm more likely to just brick my board :D</span></div><div class="line" id="011917"><span class="nick" style="color:#389600"><a href="#011917" label="[01:19:17]">&lt;Googulator&gt;</a></span><span class="message">btw, any idea why building automake in chroot fails with &quot;rm: cannot lstat `*/Makefile.in': No such file or directory&quot; in WSL2?</span></div><div class="line" id="012154"><span class="nick" style="color:#8dd3c7"><a href="#012154" label="[01:21:54]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="012224"><span class="nick" style="color:#8dd3c7"><a href="#012224" label="[01:22:24]">&lt;stikonas&gt;</a></span><span class="message">that is strange</span></div><div class="line" id="012232"><span class="nick" style="color:#8dd3c7"><a href="#012232" label="[01:22:32]">&lt;stikonas&gt;</a></span><span class="message">WSL2 just runs linux kernel in emulation, doesn't it...</span></div><div class="line" id="012237"><span class="nick" style="color:#8dd3c7"><a href="#012237" label="[01:22:37]">&lt;stikonas&gt;</a></span><span class="message">so syscalls should behave the same</span></div><div class="line" id="012343"><span class="nick" style="color:#389600"><a href="#012343" label="[01:23:43]">&lt;Googulator&gt;</a></span><span class="message">yes</span></div><div class="line" id="012425"><span class="nick" style="color:#389600"><a href="#012425" label="[01:24:25]">&lt;Googulator&gt;</a></span><span class="message">and if I run the same command outside the chroot (even using the binaries created within), it just works</span></div><div class="line" id="012425"><span class="nick" style="color:#8dd3c7"><a href="#012425" label="[01:24:25]">&lt;stikonas&gt;</a></span><span class="message">can you get into chroot?</span></div><div class="line" id="012430"><span class="nick" style="color:#8dd3c7"><a href="#012430" label="[01:24:30]">&lt;stikonas&gt;</a></span><span class="message">possibly by injecting static bash from later</span></div><div class="line" id="012441"><span class="nick" style="color:#8dd3c7"><a href="#012441" label="[01:24:41]">&lt;stikonas&gt;</a></span><span class="message">but anyway, no idea...</span></div><div class="line" id="012446"><span class="nick" style="color:#8dd3c7"><a href="#012446" label="[01:24:46]">&lt;stikonas&gt;</a></span><span class="message">is it reproducible?</span></div><div class="line" id="012448"><span class="nick" style="color:#389600"><a href="#012448" label="[01:24:48]">&lt;Googulator&gt;</a></span><span class="message">hmm, just realized it's using bash expansion in that command</span></div><div class="line" id="012452"><span class="nick" style="color:#389600"><a href="#012452" label="[01:24:52]">&lt;Googulator&gt;</a></span><span class="message">and I used my modern bash</span></div><div class="line" id="012513"><span class="nick" style="color:#8dd3c7"><a href="#012513" label="[01:25:13]">&lt;stikonas&gt;</a></span><span class="message">hmm, yeah, that might affect it</span></div><div class="line" id="012525"><span class="nick" style="color:#8dd3c7"><a href="#012525" label="[01:25:25]">&lt;stikonas&gt;</a></span><span class="message">but you can't easily use our old bash for interactive debugging...</span></div><div class="line" id="012612"><span class="nick" style="color:#389600"><a href="#012612" label="[01:26:12]">&lt;Googulator&gt;</a></span><span class="message">OK, reproducible with that old bash</span></div><div class="line" id="012627"><span class="nick" style="color:#389600"><a href="#012627" label="[01:26:27]">&lt;Googulator&gt;</a></span><span class="message">../chroot/usr/bin/rm -- configure Makefile.in */Makefile.in */*/Makefile.in aclocal.m4 automake.info* -&gt; works</span></div><div class="line" id="012644"><span class="nick" style="color:#389600"><a href="#012644" label="[01:26:44]">&lt;Googulator&gt;</a></span><span class="message">../chroot/usr/bin/bash -c '../chroot/usr/bin/rm -- configure Makefile.in */Makefile.in */*/Makefile.in aclocal.m4 automake.info*' -&gt; error</span></div><div class="line" id="012902"><span class="nick" style="color:#8dd3c7"><a href="#012902" label="[01:29:02]">&lt;stikonas&gt;</a></span><span class="message">hmm, now the questions is why..</span></div><div class="line" id="012945"><span class="nick" style="color:#389600"><a href="#012945" label="[01:29:45]">&lt;Googulator&gt;</a></span><span class="message">$ ../chroot/usr/bin/bash -c 'echo -- configure Makefile.in */Makefile.in */*/Makefile.in aclocal.m4 automake.info*'</span></div><div class="line" id="012945"><span class="nick" style="color:#389600"><a href="#012945" label="[01:29:45]">&lt;Googulator&gt;</a></span><span class="message">-- configure Makefile.in */Makefile.in */*/Makefile.in aclocal.m4 automake.info automake.info-1 automake.info-2 automake.info-3 automake.info-4</span></div><div class="line" id="012946"><span class="nick" style="color:#8dd3c7"><a href="#012946" label="[01:29:46]">&lt;stikonas&gt;</a></span><span class="message">do files exist?</span></div><div class="line" id="012951"><span class="nick" style="color:#389600"><a href="#012951" label="[01:29:51]">&lt;Googulator&gt;</a></span><span class="message">$ bash -c 'echo -- configure Makefile</span></div><div class="line" id="012952"><span class="nick" style="color:#389600"><a href="#012952" label="[01:29:52]">&lt;Googulator&gt;</a></span><span class="message">.in */Makefile.in */*/Makefile.in aclocal.m4 automake.info*'</span></div><div class="line" id="012952"><span class="nick" style="color:#389600"><a href="#012952" label="[01:29:52]">&lt;Googulator&gt;</a></span><span class="message">-- configure Makefile.in lib/Makefile.in m4/Makefile.in tests/Makefile.in lib/Automake/Makefile.in lib/am/Makefile.in aclocal.m4 automake.info automake.info-1 automake.info-2 automake.info-3 automake.info-4</span></div><div class="line" id="012959"><span class="nick" style="color:#389600"><a href="#012959" label="[01:29:59]">&lt;Googulator&gt;</a></span><span class="message">WTF?</span></div><div class="line" id="013011"><span class="nick" style="color:#8dd3c7"><a href="#013011" label="[01:30:11]">&lt;stikonas&gt;</a></span><span class="message">WSL...</span></div><div class="line" id="013018"><span class="nick" style="color:#389600"><a href="#013018" label="[01:30:18]">&lt;Googulator&gt;</a></span><span class="message">The */ somehow fails to expand</span></div><div class="line" id="013148"><span class="nick" style="color:#389600"><a href="#013148" label="[01:31:48]">&lt;Googulator&gt;</a></span><span class="message">and since this is WSL2, I'm worried this will come back to haunt us on regular Linux with a similar kernel</span></div><div class="line" id="013203"><span class="nick" style="color:#80b1d3"><a href="#013203" label="[01:32:03]">&lt;mihi&gt;</a></span><span class="message">Googulator, is that inside drvfs (i.e. /mnt/c/...) or is this normal root filesystem (ext4)?</span></div><div class="line" id="013218"><span class="nick" style="color:#389600"><a href="#013218" label="[01:32:18]">&lt;Googulator&gt;</a></span><span class="message">this is on ext4</span></div><div class="line" id="013240"><span class="nick" style="color:#80b1d3"><a href="#013240" label="[01:32:40]">&lt;mihi&gt;</a></span><span class="message">oh ok. With drvfs i had some strange encounters before...</span></div><div class="line" id="013947"><span class="nick" style="color:#389600"><a href="#013947" label="[01:39:47]">&lt;Googulator&gt;</a></span><span class="message">this is even weirder...</span></div><div class="line" id="013948"><span class="nick" style="color:#389600"><a href="#013948" label="[01:39:48]">&lt;Googulator&gt;</a></span><span class="message">$ ./chroot/bin/bash -c 'echo */manifest'</span></div><div class="line" id="013948"><span class="nick" style="color:#389600"><a href="#013948" label="[01:39:48]">&lt;Googulator&gt;</a></span><span class="message">steps/manifest</span></div><div class="line" id="013954"><span class="nick" style="color:#389600"><a href="#013954" label="[01:39:54]">&lt;Googulator&gt;</a></span><span class="message">$ ./chroot/usr/bin/bash -c 'echo */manifest'</span></div><div class="line" id="013955"><span class="nick" style="color:#389600"><a href="#013955" label="[01:39:55]">&lt;Googulator&gt;</a></span><span class="message">*/manifest</span></div><div class="line" id="014019"><span class="nick" style="color:#389600"><a href="#014019" label="[01:40:19]">&lt;Googulator&gt;</a></span><span class="message">$ diff chroot/bin/bash chroot/usr/bin/bash</span></div><div class="line" id="014021"><span class="nick" style="color:#389600"><a href="#014021" label="[01:40:21]">&lt;Googulator&gt;</a></span><span class="message">Binary files chroot/bin/bash and chroot/usr/bin/bash differ</span></div><div class="line" id="014047"><span class="nick" style="color:#389600"><a href="#014047" label="[01:40:47]">&lt;Googulator&gt;</a></span><span class="message">oh...</span></div><div class="line" id="014112"><span class="nick" style="color:#389600"><a href="#014112" label="[01:41:12]">&lt;Googulator&gt;</a></span><span class="message">chroot/bin/bash is an absolute symlink to /usr/bin/bash AKA my normal, modern bash shell</span></div><div class="line" id="014207"><span class="nick" style="color:#8dd3c7"><a href="#014207" label="[01:42:07]">&lt;stikonas&gt;</a></span><span class="message">anyway, it sounds like globbing is broken</span></div><div class="line" id="014232"><span class="nick" style="color:#8dd3c7"><a href="#014232" label="[01:42:32]">&lt;stikonas&gt;</a></span><span class="message">though I'm surprised you even reached automake</span></div><div class="line" id="014236"><span class="nick" style="color:#8dd3c7"><a href="#014236" label="[01:42:36]">&lt;stikonas&gt;</a></span><span class="message">and didn't hit anything in helpers.sh</span></div><div class="line" id="014245"><span class="nick" style="color:#389600"><a href="#014245" label="[01:42:45]">&lt;Googulator&gt;</a></span><span class="message">$ ../chroot/usr/bin/bash -c 'echo */*'</span></div><div class="line" id="014246"><span class="nick" style="color:#389600"><a href="#014246" label="[01:42:46]">&lt;Googulator&gt;</a></span><span class="message">a/test</span></div><div class="line" id="014250"><span class="nick" style="color:#389600"><a href="#014250" label="[01:42:50]">&lt;Googulator&gt;</a></span><span class="message">$ ../chroot/usr/bin/bash -c 'echo */test'</span></div><div class="line" id="014250"><span class="nick" style="color:#389600"><a href="#014250" label="[01:42:50]">&lt;Googulator&gt;</a></span><span class="message">*/test</span></div><div class="line" id="014712"><span class="nick" style="color:#8dd3c7"><a href="#014712" label="[01:47:12]">&lt;stikonas&gt;</a></span><span class="message">and echo a/* ?</span></div><div class="line" id="014731"><span class="nick" style="color:#389600"><a href="#014731" label="[01:47:31]">&lt;Googulator&gt;</a></span><span class="message">works</span></div><div class="line" id="014805"><span class="nick" style="color:#389600"><a href="#014805" label="[01:48:05]">&lt;Googulator&gt;</a></span><span class="message">?/test fails</span></div><div class="line" id="014809"><span class="nick" style="color:#389600"><a href="#014809" label="[01:48:09]">&lt;Googulator&gt;</a></span><span class="message">?/?est works</span></div><div class="line" id="014822"><span class="nick" style="color:#389600"><a href="#014822" label="[01:48:22]">&lt;Googulator&gt;</a></span><span class="message">?/test* works</span></div><div class="line" id="014840"><span class="nick" style="color:#389600"><a href="#014840" label="[01:48:40]">&lt;Googulator&gt;</a></span><span class="message">*/test* works</span></div><div class="line" id="015258"><span class="nick" style="color:#389600"><a href="#015258" label="[01:52:58]">&lt;Googulator&gt;</a></span><span class="message">spun up a proper VM with Linux and copied this bash into it - it misbehaves the same</span></div><div class="line" id="015326"><span class="nick" style="color:#8dd3c7"><a href="#015326" label="[01:53:26]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="015334"><span class="nick" style="color:#8dd3c7"><a href="#015334" label="[01:53:34]">&lt;stikonas&gt;</a></span><span class="message">so how does it work outside wsl?</span></div><div class="line" id="015352"><span class="nick" style="color:#389600"><a href="#015352" label="[01:53:52]">&lt;Googulator&gt;</a></span><span class="message">must be a different binary</span></div><div class="line" id="015402"><span class="nick" style="color:#389600"><a href="#015402" label="[01:54:02]">&lt;Googulator&gt;</a></span><span class="message">it's somehow miscompiled in WSL, but compiles fine otherwise</span></div><div class="line" id="015603"><span class="nick" style="color:#8dd3c7"><a href="#015603" label="[01:56:03]">&lt;stikonas&gt;</a></span><span class="message">shouldn't this have been caught by checksuming?</span></div><div class="line" id="015609"><span class="nick" style="color:#8dd3c7"><a href="#015609" label="[01:56:09]">&lt;stikonas&gt;</a></span><span class="message">or have you turned it off?</span></div><div class="line" id="015626"><span class="nick" style="color:#389600"><a href="#015626" label="[01:56:26]">&lt;Googulator&gt;</a></span><span class="message">I'm using --update-checksums because I'm still generating the final checksums in qemu as we speak</span></div><div class="line" id="015651"><span class="nick" style="color:#389600"><a href="#015651" label="[01:56:51]">&lt;Googulator&gt;</a></span><span class="message">mes upgrade changed a lot of checksums</span></div><div class="line" id="015953"><span class="nick" style="color:#8dd3c7"><a href="#015953" label="[01:59:53]">&lt;stikonas&gt;</a></span><span class="message">and this bash is even before ./configure scripts</span></div><div class="line" id="020007"><span class="nick" style="color:#8dd3c7"><a href="#020007" label="[02:00:07]">&lt;stikonas&gt;</a></span><span class="message">so it's not like somehow WSL would change build config</span></div><div class="line" id="023909"><span class="nick" style="color:#389600"><a href="#023909" label="[02:39:09]">&lt;Googulator&gt;</a></span><span class="message">Ran another chroot bootstrap, this time in a proper VM</span></div><div class="line" id="023915"><span class="nick" style="color:#389600"><a href="#023915" label="[02:39:15]">&lt;Googulator&gt;</a></span><span class="message">The resulting bash binary is *identical*</span></div><div class="line" id="023945"><span class="nick" style="color:#389600"><a href="#023945" label="[02:39:45]">&lt;Googulator&gt;</a></span><span class="message">and echo &quot;*/test&quot; fails just the same when called outside chroot</span></div><div class="line" id="023947"><span class="nick" style="color:#389600"><a href="#023947" label="[02:39:47]">&lt;Googulator&gt;</a></span><span class="message">BUT:</span></div><div class="line" id="023956"><span class="nick" style="color:#389600"><a href="#023956" label="[02:39:56]">&lt;Googulator&gt;</a></span><span class="message">in the VM:</span></div><div class="line" id="024008"><span class="nick" style="color:#389600"><a href="#024008" label="[02:40:08]">&lt;Googulator&gt;</a></span><span class="message">$ sudo chroot chroot/ bash -c 'echo */LICENSE'</span></div><div class="line" id="024009"><span class="nick" style="color:#389600"><a href="#024009" label="[02:40:09]">&lt;Googulator&gt;</a></span><span class="message">AArch64/LICENSE AMD64/LICENSE M2-Mesoplanet/LICENSE M2-Planet/LICENSE M2libc/LICENSE armv7l/LICENSE bootstrap-seeds/LICENSE riscv32/LICENSE riscv64/LICENSE x86/LICENSE</span></div><div class="line" id="024013"><span class="nick" style="color:#389600"><a href="#024013" label="[02:40:13]">&lt;Googulator&gt;</a></span><span class="message">in wsl2:</span></div><div class="line" id="024026"><span class="nick" style="color:#389600"><a href="#024026" label="[02:40:26]">&lt;Googulator&gt;</a></span><span class="message">$ sudo chroot chroot/ bash -c 'echo */LICENSE'</span></div><div class="line" id="024026"><span class="nick" style="color:#389600"><a href="#024026" label="[02:40:26]">&lt;Googulator&gt;</a></span><span class="message">*/LICENSE</span></div><div class="line" id="024107"><span class="nick" style="color:#389600"><a href="#024107" label="[02:41:07]">&lt;Googulator&gt;</a></span><span class="message">WTF?!</span></div><div class="line" id="030600"><span class="nick" style="color:#389600"><a href="#030600" label="[03:06:00]">&lt;Googulator&gt;</a></span><span class="message">even sudo chroot chroot/ env - PATH=/usr/bin bash -c 'echo */LICENSE' shows the same difference</span></div><div class="line" id="030659"><span class="nick" style="color:#389600"><a href="#030659" label="[03:06:59]">&lt;Googulator&gt;</a></span><span class="message">in strace, the only difference I can see is the order in which directory entries are returned</span></div><div class="line" id="030851"><span class="nick" style="color:#6d2462"><a href="#030851" label="[03:08:51]">&lt;deesix&gt;</a></span><span class="message">Globbing has a few configs... what 'set -o | grep noglob' says, for example?</span></div><div class="line" id="031050"><span class="nick" style="color:#389600"><a href="#031050" label="[03:10:50]">&lt;Googulator&gt;</a></span><span class="message">sudo chroot chroot/ env - PATH=/usr/bin bash -c 'set -o' is identical between the 2 systems</span></div><div class="line" id="031812"><span class="nick" style="color:#6d2462"><a href="#031812" label="[03:18:12]">&lt;deesix&gt;</a></span><span class="message">Is it also broken during interactive execution?</span></div><div class="line" id="032024"><span class="nick" style="color:#389600"><a href="#032024" label="[03:20:24]">&lt;Googulator&gt;</a></span><span class="message">this is the early bash built in Fiwix, it doesn't support any interaction</span></div><div class="line" id="102824"><span class="nick" style="color:#2e2a4a"><a href="#102824" label="[10:28:24]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Christoph&gt; I recall someone on this channel said that they circumvented mes and directly built tcc, and that this saved a lot of time. Even though there are many complaints about the time mes consumes, it is still in use. Why is it still necessary?</span></div><div class="line" id="104929"><span class="nick" style="color:#6b8072"><a href="#104929" label="[10:49:29]">&lt;fossy&gt;</a></span><span class="message">Christoph, primarily because no-one has implemented it yet :)</span></div><div class="line" id="104947"><span class="nick" style="color:#6b8072"><a href="#104947" label="[10:49:47]">&lt;fossy&gt;</a></span><span class="message">additionally, we need to ensure that mes libc can still be built using tcc</span></div><div class="line" id="105000"><span class="nick" style="color:#6b8072"><a href="#105000" label="[10:50:00]">&lt;fossy&gt;</a></span><span class="message">theres a few question marks still lingering regarding a mesless bootstrap</span></div><div class="line" id="105817"><span class="nick" style="color:#2e2a4a"><a href="#105817" label="[10:58:17]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Christoph: also alternative path is x86 only</span></div><div class="line" id="105856"><span class="nick" style="color:#2e2a4a"><a href="#105856" label="[10:58:56]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; And far more work needed to port to any other arch due to number of steps</span></div><div class="line" id="105940"><span class="nick" style="color:#2e2a4a"><a href="#105940" label="[10:59:40]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; And  combinee that with horibble tcc code</span></div><div class="line" id="110103"><span class="nick" style="color:#2e2a4a"><a href="#110103" label="[11:01:03]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; So maybe we can have an alternative path as optional choise</span></div><div class="line" id="110119"><span class="nick" style="color:#2e2a4a"><a href="#110119" label="[11:01:19]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; But we still need mes for those other usecases</span></div><div class="line" id="110136"><span class="nick" style="color:#2e2a4a"><a href="#110136" label="[11:01:36]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Even if it is slow</span></div><div class="line" id="111721"><span class="nick" style="color:#2e2a4a"><a href="#111721" label="[11:17:21]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Christoph&gt; I see. Thank you!</span></div><div class="line" id="142916"><span class="nick" style="color:#80b1d3"><a href="#142916" label="[14:29:16]">&lt;mihi&gt;</a></span><span class="message">Googulator, some things you could try: compare &quot;tune2fs -l&quot; of both ext4 filesystems, compare the base path (or its length) to the directory where you glob, compare kernel config (large file support), look at &quot;ls -li&quot; output for the directories if anything looks weird (e.g. inode numbers with weird bit patterns).</span></div><div class="line" id="142941"><span class="nick" style="color:#80b1d3"><a href="#142941" label="[14:29:41]">&lt;mihi&gt;</a></span><span class="message">If you have coreutils ls built from same libc as your bash, you can also try comparing &quot;ls -li&quot; output, especially look for any zero inodes</span></div><div class="line" id="143125"><span class="nick" style="color:#80b1d3"><a href="#143125" label="[14:31:25]">&lt;mihi&gt;</a></span><span class="message">(bash's own glob implementation ignores dirents with d_ino == 0)</span></div><div class="line" id="192827"><span class="nick" style="color:#2e2a4a"><a href="#192827" label="[19:28:27]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;cosinusoidally&gt; Christoph: I've raised <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/issues/355">https://github.com/fosslinux/live-bootstrap/issues/355</a>  regarding adding my alt tcc bootstrap path optionally. I'll raise a PR once fossy has stabilised their recent refactoring of live-bootstrap. My bootstrap path path is i386 only (and is difficult to port to other arches since I have about 13 versions of tcc in my tree). tbh it's probably &quot;easier&quot; for me to write an i386...</span></div><div class="line" id="192832"><span class="nick" style="color:#2e2a4a"><a href="#192832" label="[19:28:32]">&lt;matrix_bridge&gt;</a></span><span class="message">... emulator to run the bootstrap up to a version that supports other arches rather than trying to actually port it.</span></div><div class="line" id="193014"><span class="nick" style="color:#2e2a4a"><a href="#193014" label="[19:30:14]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;cosinusoidally&gt; eg tcc_bootstrap_alt runs in about 10 mins when running under qemu binfmt_misc user mode emulation on a Raspberry PI 4.</span></div><div class="line" id="193054"><span class="nick" style="color:#2e2a4a"><a href="#193054" label="[19:30:54]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;cosinusoidally&gt; I could do that, then get tcc 0.9.27 to generate an arm version of itself.</span></div><div class="line" id="193203"><span class="nick" style="color:#2e2a4a"><a href="#193203" label="[19:32:03]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;cosinusoidally&gt; but tbh that's probably way down my list as I have other things I want to do first.</span></div><div class="line" id="225846"><span class="nick" style="color:#234e69"><a href="#225846" label="[22:58:46]">&lt;GoogulatorMobile&gt;</a></span><span class="message">...f*** SourceForge.</span></div><div class="line" id="225915"><span class="nick" style="color:#234e69"><a href="#225915" label="[22:59:15]">&lt;GoogulatorMobile&gt;</a></span><span class="message">I was trying to fix the download timeout issue, and as a first attempt, I set the user agent to look like Firefox.</span></div><div class="line" id="225950"><span class="nick" style="color:#234e69"><a href="#225950" label="[22:59:50]">&lt;GoogulatorMobile&gt;</a></span><span class="message">And suddenly, SF &quot;direct&quot; links now redirect to HTML splash pages.</span></div><div class="line" id="230020"><span class="nick" style="color:#234e69"><a href="#230020" label="[23:00:20]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Is download-distfiles.sh reliable for you?</span></div><div class="line" id="230053"><span class="nick" style="color:#234e69"><a href="#230053" label="[23:00:53]">&lt;GoogulatorMobile&gt;</a></span><span class="message">If it is, we can probably just use a curl user-agent in the Requests downloader.</span></div><div class="line" id="233424"><span class="nick" style="color:#8dd3c7"><a href="#233424" label="[23:34:24]">&lt;stikonas&gt;</a></span><span class="message">GoogulatorMobile: I think download-distfiles is reliable...</span></div><div class="line" id="234918"><span class="nick" style="color:#8dd3c7"><a href="#234918" label="[23:49:18]">&lt;stikonas&gt;</a></span><span class="message">hmm, is mes-0.26 much slower (or I guess memory bandwidth intensive...)</span></div><div class="line" id="234952"><span class="nick" style="color:#8dd3c7"><a href="#234952" label="[23:49:52]">&lt;stikonas&gt;</a></span><span class="message">though this time it might be CPU instead (as I'm running riscv64 bootstrap with qemu user emulation)</span></div><br /></div></body></html>