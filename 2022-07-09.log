<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-07-09.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000330"><span class="nick" style="color:#389600"><a href="#000330" label="[00:03:30]">&lt;stikonas&gt;</a></span><span class="message">ok I see it. By the way bashisms are explicitly allowed in live-bootstrap too...</span></div><div class="line" id="000449"><span class="nick" style="color:#389600"><a href="#000449" label="[00:04:49]">&lt;stikonas&gt;</a></span><span class="message">anyway, I should probalby go back to my kaem prototype work...</span></div><div class="line" id="000454"><span class="nick" style="color:#8dd3c7"><a href="#000454" label="[00:04:54]">&lt;mihi&gt;</a></span><span class="message">ah ok, I only remember some discussion about bashisms in this channel, not sure about which project they were.</span></div><div class="line" id="000518"><span class="nick" style="color:#389600"><a href="#000518" label="[00:05:18]">&lt;stikonas&gt;</a></span><span class="message">I think somebody tried to convince us not to use them in live-bootstrpa</span></div><div class="line" id="000529"><span class="nick" style="color:#8dd3c7"><a href="#000529" label="[00:05:29]">&lt;mihi&gt;</a></span><span class="message">I guess the easiest bandaid fix is in <a rel="nofollow" href="https://github.com/mirror/sed/blob/cba6413f07c39d757bafcfff411588e3c0631627/sed/utils.c#L290">https://github.com/mirror/sed/blob/cba6413f07c39d757bafcfff411588e3c0631627/sed/utils.c#L290</a>  to check whether utils_fp_name(stream) starts with /dev/ and ignore errors...</span></div><div class="line" id="000543"><span class="nick" style="color:#389600"><a href="#000543" label="[00:05:43]">&lt;stikonas&gt;</a></span><span class="message">but given that bash is the only shell we have (besides kaem), it makes little sense to restrict ourselves</span></div><div class="line" id="000650"><span class="nick" style="color:#8dd3c7"><a href="#000650" label="[00:06:50]">&lt;mihi&gt;</a></span><span class="message">About kaem, UEFI and UTF-16: Did you check whether UEFI shell's editor can work with both ascii and UTF-16 files?</span></div><div class="line" id="000703"><span class="nick" style="color:#8dd3c7"><a href="#000703" label="[00:07:03]">&lt;mihi&gt;</a></span><span class="message">honestly I don't know...</span></div><div class="line" id="000749"><span class="nick" style="color:#389600"><a href="#000749" label="[00:07:49]">&lt;stikonas&gt;</a></span><span class="message">mihi: I think it can't</span></div><div class="line" id="000755"><span class="nick" style="color:#389600"><a href="#000755" label="[00:07:55]">&lt;stikonas&gt;</a></span><span class="message">it produces UTF-16 files</span></div><div class="line" id="000809"><span class="nick" style="color:#8dd3c7"><a href="#000809" label="[00:08:09]">&lt;mihi&gt;</a></span><span class="message">so probably kaem should be able to read them :)</span></div><div class="line" id="000822"><span class="nick" style="color:#2e2a4a"><a href="#000822" label="[00:08:22]">&lt;oriansj&gt;</a></span><span class="message">and not need any conversion at all</span></div><div class="line" id="000843"><span class="nick" style="color:#389600"><a href="#000843" label="[00:08:43]">&lt;stikonas&gt;</a></span><span class="message">well, right now I read ASCII files</span></div><div class="line" id="000851"><span class="nick" style="color:#389600"><a href="#000851" label="[00:08:51]">&lt;stikonas&gt;</a></span><span class="message">possibly we can add another optional binary</span></div><div class="line" id="000904"><span class="nick" style="color:#389600"><a href="#000904" label="[00:09:04]">&lt;stikonas&gt;</a></span><span class="message">to convert UTF-16 into ASCII</span></div><div class="line" id="000935"><span class="nick" style="color:#2e2a4a"><a href="#000935" label="[00:09:35]">&lt;oriansj&gt;</a></span><span class="message">sure, we can add it to mescc-tools-extra</span></div><div class="line" id="000950"><span class="nick" style="color:#389600"><a href="#000950" label="[00:09:50]">&lt;stikonas&gt;</a></span><span class="message">it might have to be written in hex0</span></div><div class="line" id="000950"><span class="nick" style="color:#8dd3c7"><a href="#000950" label="[00:09:50]">&lt;mihi&gt;</a></span><span class="message">is it hard to skip all nulls when reading the ASCII file? Which would work for our cases.</span></div><div class="line" id="001015"><span class="nick" style="color:#389600"><a href="#001015" label="[00:10:15]">&lt;stikonas&gt;</a></span><span class="message">maybe we can do it on reading</span></div><div class="line" id="001016"><span class="nick" style="color:#2e2a4a"><a href="#001016" label="[00:10:16]">&lt;oriansj&gt;</a></span><span class="message">well in assembly we can just not look for nulls</span></div><div class="line" id="001021"><span class="nick" style="color:#389600"><a href="#001021" label="[00:10:21]">&lt;stikonas&gt;</a></span><span class="message">we need to skip 00 and FF and FE</span></div><div class="line" id="001053"><span class="nick" style="color:#389600"><a href="#001053" label="[00:10:53]">&lt;stikonas&gt;</a></span><span class="message">file starts with UTF byte order mark FFFE that helps to determine endianness</span></div><div class="line" id="001115"><span class="nick" style="color:#389600"><a href="#001115" label="[00:11:15]">&lt;stikonas&gt;</a></span><span class="message">well, it's just a couple of if's to skip if we read those...</span></div><div class="line" id="001140"><span class="nick" style="color:#389600"><a href="#001140" label="[00:11:40]">&lt;stikonas&gt;</a></span><span class="message">also not sure what to do with line breaks...</span></div><div class="line" id="001145"><span class="nick" style="color:#389600"><a href="#001145" label="[00:11:45]">&lt;stikonas&gt;</a></span><span class="message">either I just don't do them</span></div><div class="line" id="001202"><span class="nick" style="color:#2e2a4a"><a href="#001202" label="[00:12:02]">&lt;oriansj&gt;</a></span><span class="message">as 4C 00 4F 00 4C 00 isn't any different than 4C 4F 4C to logic looking only for 0A and 20</span></div><div class="line" id="001204"><span class="nick" style="color:#389600"><a href="#001204" label="[00:12:04]">&lt;stikonas&gt;</a></span><span class="message">since we only need them from m2-planet  and before kaem</span></div><div class="line" id="001233"><span class="nick" style="color:#389600"><a href="#001233" label="[00:12:33]">&lt;stikonas&gt;</a></span><span class="message">maybe I should paste what I currently have</span></div><div class="line" id="001318"><span class="nick" style="color:#389600"><a href="#001318" label="[00:13:18]">&lt;stikonas&gt;</a></span><span class="message">hmm, debian pastebin thinks that kaem is spam...</span></div><div class="line" id="001340"><span class="nick" style="color:#2e2a4a"><a href="#001340" label="[00:13:40]">&lt;oriansj&gt;</a></span><span class="message">we can do pascal strings or just ensure 4 nulls at the end</span></div><div class="line" id="001341"><span class="nick" style="color:#8dd3c7"><a href="#001341" label="[00:13:41]">&lt;mihi&gt;</a></span><span class="message">yet another 4 letter acronym :P</span></div><div class="line" id="001428"><span class="nick" style="color:#2e2a4a"><a href="#001428" label="[00:14:28]">&lt;oriansj&gt;</a></span><span class="message">read only words and if the last word is all zeros</span></div><div class="line" id="001449"><span class="nick" style="color:#389600"><a href="#001449" label="[00:14:49]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.ubuntu.com/p/vkNtDZfmyV/">https://paste.ubuntu.com/p/vkNtDZfmyV/</a> </span></div><div class="line" id="001529"><span class="nick" style="color:#389600"><a href="#001529" label="[00:15:29]">&lt;stikonas&gt;</a></span><span class="message">right now I think I've got load_image to work but not yet start_image, that one exists with non-zero exit code without launching child</span></div><div class="line" id="001602"><span class="nick" style="color:#389600"><a href="#001602" label="[00:16:02]">&lt;stikonas&gt;</a></span><span class="message">I guess             else if(c == '\n') { should also have || '\r'</span></div><div class="line" id="001633"><span class="nick" style="color:#389600"><a href="#001633" label="[00:16:33]">&lt;stikonas&gt;</a></span><span class="message">and then add some if c == 0 to skip over...</span></div><div class="line" id="001732"><span class="nick" style="color:#389600"><a href="#001732" label="[00:17:32]">&lt;stikonas&gt;</a></span><span class="message">so this kaem doesn't have to do so much tokenization but on the other hand UEFI API is somewhat bulky</span></div><div class="line" id="001814"><span class="nick" style="color:#389600"><a href="#001814" label="[00:18:14]">&lt;stikonas&gt;</a></span><span class="message">and we also need to do the same fix in hex0, hex1, ...</span></div><div class="line" id="001833"><span class="nick" style="color:#8dd3c7"><a href="#001833" label="[00:18:33]">&lt;mihi&gt;</a></span><span class="message">For info, I just tried with VirtualBox's UEFI shell's editor, when you save file with F2 it is Unicode, but when you press F9 before F2 it will become ASCII.</span></div><div class="line" id="001920"><span class="nick" style="color:#389600"><a href="#001920" label="[00:19:20]">&lt;stikonas&gt;</a></span><span class="message">oh yes, I missed  that File type thing</span></div><div class="line" id="001936"><span class="nick" style="color:#389600"><a href="#001936" label="[00:19:36]">&lt;stikonas&gt;</a></span><span class="message">so I think we just assume that files are ASCII</span></div><div class="line" id="001941"><span class="nick" style="color:#8dd3c7"><a href="#001941" label="[00:19:41]">&lt;mihi&gt;</a></span><span class="message">so probably if it is easier, restricting to ASCII files should be fine :)</span></div><div class="line" id="002029"><span class="nick" style="color:#2e2a4a"><a href="#002029" label="[00:20:29]">&lt;oriansj&gt;</a></span><span class="message">siraben: umm it might be simpler than you think</span></div><div class="line" id="002034"><span class="nick" style="color:#389600"><a href="#002034" label="[00:20:34]">&lt;stikonas&gt;</a></span><span class="message">well, it will save us some bytes...</span></div><div class="line" id="002041"><span class="nick" style="color:#2e2a4a"><a href="#002041" label="[00:20:41]">&lt;oriansj&gt;</a></span><span class="message">stikonas: <a rel="nofollow" href="https://unicode.org/roadmaps/bmp/">https://unicode.org/roadmaps/bmp/</a> </span></div><div class="line" id="002112"><span class="nick" style="color:#389600"><a href="#002112" label="[00:21:12]">&lt;stikonas&gt;</a></span><span class="message">?</span></div><div class="line" id="002133"><span class="nick" style="color:#2e2a4a"><a href="#002133" label="[00:21:33]">&lt;oriansj&gt;</a></span><span class="message">fgetc function can just drop the nulls and read another byte</span></div><div class="line" id="002149"><span class="nick" style="color:#2e2a4a"><a href="#002149" label="[00:21:49]">&lt;oriansj&gt;</a></span><span class="message">as long as we stick to ascii</span></div><div class="line" id="002212"><span class="nick" style="color:#2e2a4a"><a href="#002212" label="[00:22:12]">&lt;oriansj&gt;</a></span><span class="message">all the bytes we will be reading are 00 ##</span></div><div class="line" id="002236"><span class="nick" style="color:#389600"><a href="#002236" label="[00:22:36]">&lt;stikonas&gt;</a></span><span class="message">oriansj: we don't have fgetc though...</span></div><div class="line" id="002252"><span class="nick" style="color:#389600"><a href="#002252" label="[00:22:52]">&lt;stikonas&gt;</a></span><span class="message">I didn't put it in another function...</span></div><div class="line" id="002256"><span class="nick" style="color:#389600"><a href="#002256" label="[00:22:56]">&lt;stikonas&gt;</a></span><span class="message">we might but we'll see...</span></div><div class="line" id="002308"><span class="nick" style="color:#389600"><a href="#002308" label="[00:23:08]">&lt;stikonas&gt;</a></span><span class="message">I'll first get something working, then we can tune C code</span></div><div class="line" id="002309"><span class="nick" style="color:#2e2a4a"><a href="#002309" label="[00:23:09]">&lt;oriansj&gt;</a></span><span class="message">stikonas: fgetc is just what I call the function that reads a byte in kaem/hex0</span></div><div class="line" id="002317"><span class="nick" style="color:#389600"><a href="#002317" label="[00:23:17]">&lt;stikonas&gt;</a></span><span class="message">ok...</span></div><div class="line" id="002332"><span class="nick" style="color:#2e2a4a"><a href="#002332" label="[00:23:32]">&lt;oriansj&gt;</a></span><span class="message">in your C code, it would just be a function called anything you want which does the fgetc call</span></div><div class="line" id="002342"><span class="nick" style="color:#389600"><a href="#002342" label="[00:23:42]">&lt;stikonas&gt;</a></span><span class="message">yeah, it's fin-&gt;read(fin, &amp;size, &amp;c);</span></div><div class="line" id="002407"><span class="nick" style="color:#389600"><a href="#002407" label="[00:24:07]">&lt;stikonas&gt;</a></span><span class="message">where uint64_t size = 1</span></div><div class="line" id="002443"><span class="nick" style="color:#389600"><a href="#002443" label="[00:24:43]">&lt;stikonas&gt;</a></span><span class="message">oriansj: and what about line breaks?</span></div><div class="line" id="002444"><span class="nick" style="color:#2e2a4a"><a href="#002444" label="[00:24:44]">&lt;oriansj&gt;</a></span><span class="message">so yeah, a little function with a goto if c is zero</span></div><div class="line" id="002454"><span class="nick" style="color:#389600"><a href="#002454" label="[00:24:54]">&lt;stikonas&gt;</a></span><span class="message">do we need them?</span></div><div class="line" id="002503"><span class="nick" style="color:#389600"><a href="#002503" label="[00:25:03]">&lt;stikonas&gt;</a></span><span class="message">we can't easily use \</span></div><div class="line" id="002530"><span class="nick" style="color:#2e2a4a"><a href="#002530" label="[00:25:30]">&lt;oriansj&gt;</a></span><span class="message">I don't know if we need them in UEFI</span></div><div class="line" id="002533"><span class="nick" style="color:#389600"><a href="#002533" label="[00:25:33]">&lt;stikonas&gt;</a></span><span class="message">because all paths use that \</span></div><div class="line" id="002538"><span class="nick" style="color:#389600"><a href="#002538" label="[00:25:38]">&lt;stikonas&gt;</a></span><span class="message">ok, I think let's not add them</span></div><div class="line" id="002600"><span class="nick" style="color:#389600"><a href="#002600" label="[00:26:00]">&lt;stikonas&gt;</a></span><span class="message">even in POSIX we don't use them that much</span></div><div class="line" id="002625"><span class="nick" style="color:#2e2a4a"><a href="#002625" label="[00:26:25]">&lt;oriansj&gt;</a></span><span class="message">just to make long commands pretty</span></div><div class="line" id="002925"><span class="nick" style="color:#389600"><a href="#002925" label="[00:29:25]">&lt;stikonas&gt;</a></span><span class="message">ok, got it to run hex0 (was a minor bug with child image handler, should be passed by value)</span></div><div class="line" id="002949"><span class="nick" style="color:#389600"><a href="#002949" label="[00:29:49]">&lt;stikonas&gt;</a></span><span class="message">now I need to fix command line arguments that are passed to child and I think kaem prototype will be done</span></div><div class="line" id="003027"><span class="nick" style="color:#2e2a4a"><a href="#003027" label="[00:30:27]">&lt;oriansj&gt;</a></span><span class="message">nice</span></div><div class="line" id="003228"><span class="nick" style="color:#389600"><a href="#003228" label="[00:32:28]">&lt;stikonas&gt;</a></span><span class="message">well, it's an easy part...</span></div><div class="line" id="003232"><span class="nick" style="color:#8dd3c7"><a href="#003232" label="[00:32:32]">&lt;mihi&gt;</a></span><span class="message">stikonas, when you use MEDIA_FILEPATH_DP as device path, you should be able to avoid actually loading the file yourself.</span></div><div class="line" id="003233"><span class="nick" style="color:#389600"><a href="#003233" label="[00:32:33]">&lt;stikonas&gt;</a></span><span class="message">converting it to hex0 will be harder</span></div><div class="line" id="003247"><span class="nick" style="color:#389600"><a href="#003247" label="[00:32:47]">&lt;stikonas&gt;</a></span><span class="message">mihi, yes I know, but I'm not sure if it's much smaller</span></div><div class="line" id="003253"><span class="nick" style="color:#389600"><a href="#003253" label="[00:32:53]">&lt;stikonas&gt;</a></span><span class="message">in terms of code</span></div><div class="line" id="003308"><span class="nick" style="color:#8dd3c7"><a href="#003308" label="[00:33:08]">&lt;mihi&gt;</a></span><span class="message">you might be right. :D</span></div><div class="line" id="003312"><span class="nick" style="color:#389600"><a href="#003312" label="[00:33:12]">&lt;stikonas&gt;</a></span><span class="message">mihi: cause I need to copy the file location string</span></div><div class="line" id="003345"><span class="nick" style="color:#389600"><a href="#003345" label="[00:33:45]">&lt;stikonas&gt;</a></span><span class="message">and I still need to allocate_pool for file path string</span></div><div class="line" id="003357"><span class="nick" style="color:#389600"><a href="#003357" label="[00:33:57]">&lt;stikonas&gt;</a></span><span class="message">so I thought I can just as well read the whole file into it</span></div><div class="line" id="003546"><span class="nick" style="color:#8dd3c7"><a href="#003546" label="[00:35:46]">&lt;mihi&gt;</a></span><span class="message">for the filename you could probably get away with a static buffer. Also I believe you could free the device path and maybe even the executable image between Load_image and start_image.</span></div><div class="line" id="003659"><span class="nick" style="color:#389600"><a href="#003659" label="[00:36:59]">&lt;stikonas&gt;</a></span><span class="message">mihi: static buffer is not that good in hex0</span></div><div class="line" id="003708"><span class="nick" style="color:#389600"><a href="#003708" label="[00:37:08]">&lt;stikonas&gt;</a></span><span class="message">your binary will grow by that size</span></div><div class="line" id="003737"><span class="nick" style="color:#8dd3c7"><a href="#003737" label="[00:37:37]">&lt;mihi&gt;</a></span><span class="message">so buffer allocated at startup with either allocpool or allocpages.</span></div><div class="line" id="003806"><span class="nick" style="color:#389600"><a href="#003806" label="[00:38:06]">&lt;stikonas&gt;</a></span><span class="message">yeah, I think freeing earlier does work</span></div><div class="line" id="011111"><span class="nick" style="color:#389600"><a href="#011111" label="[01:11:11]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I think I've got it working now: <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi">https://git.stikonas.eu/andrius/stage0-uefi</a> </span></div><div class="line" id="011149"><span class="nick" style="color:#389600"><a href="#011149" label="[01:11:49]">&lt;stikonas&gt;</a></span><span class="message">at the moment there is an assumption that children don't check loadoptionssize field</span></div><div class="line" id="011211"><span class="nick" style="color:#389600"><a href="#011211" label="[01:12:11]">&lt;stikonas&gt;</a></span><span class="message">it might be a good idea to fix that even if we don't use it</span></div><div class="line" id="011226"><span class="nick" style="color:#389600"><a href="#011226" label="[01:12:26]">&lt;stikonas&gt;</a></span><span class="message">but other than that it seems to work</span></div><div class="line" id="011313"><span class="nick" style="color:#389600"><a href="#011313" label="[01:13:13]">&lt;stikonas&gt;</a></span><span class="message">3.5 KiB when compiled with C compiler, but hopefully will be smaller when we hand-write it</span></div><div class="line" id="145452"><span class="nick" style="color:#2e2a4a"><a href="#145452" label="[14:54:52]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well assuming PE format doesn't include a bunch of required crap, we definitely should be able to trim that down by 4x</span></div><div class="line" id="145923"><span class="nick" style="color:#389600"><a href="#145923" label="[14:59:23]">&lt;stikonas&gt;</a></span><span class="message">well, looking at those binaries, there are a lof of gaps filled with either 0x00 or 0xCC</span></div><div class="line" id="150034"><span class="nick" style="color:#389600"><a href="#150034" label="[15:00:34]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I'm thinking a bit on how to go from C to hex0...</span></div><div class="line" id="150047"><span class="nick" style="color:#389600"><a href="#150047" label="[15:00:47]">&lt;stikonas&gt;</a></span><span class="message">I guess we first need to try to target some off the shelf assembler</span></div><div class="line" id="150251"><span class="nick" style="color:#389600"><a href="#150251" label="[15:02:51]">&lt;stikonas&gt;</a></span><span class="message">but I don't think nasm works...</span></div><div class="line" id="150431"><span class="nick" style="color:#389600"><a href="#150431" label="[15:04:31]">&lt;stikonas&gt;</a></span><span class="message">so maybe I should just use llvm-as as it natively supports PE binaries that UEFI uses</span></div><div class="line" id="150856"><span class="nick" style="color:#2e2a4a"><a href="#150856" label="[15:08:56]">&lt;oriansj&gt;</a></span><span class="message">stikonas: does UEFI support return codes?</span></div><div class="line" id="152022"><span class="nick" style="color:#389600"><a href="#152022" label="[15:20:22]">&lt;stikonas&gt;</a></span><span class="message">oriansj: it does</span></div><div class="line" id="152037"><span class="nick" style="color:#389600"><a href="#152037" label="[15:20:37]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I think it supports even more of them than POSIX</span></div><div class="line" id="152047"><span class="nick" style="color:#389600"><a href="#152047" label="[15:20:47]">&lt;stikonas&gt;</a></span><span class="message">up to native integer length, so uint64_t on 64-bit system</span></div><div class="line" id="152101"><span class="nick" style="color:#389600"><a href="#152101" label="[15:21:01]">&lt;stikonas&gt;</a></span><span class="message">oriansj: and it also supports returning arbitrary text data</span></div><div class="line" id="152106"><span class="nick" style="color:#389600"><a href="#152106" label="[15:21:06]">&lt;stikonas&gt;</a></span><span class="message">but I haven't coded that in caem</span></div><div class="line" id="152107"><span class="nick" style="color:#2e2a4a"><a href="#152107" label="[15:21:07]">&lt;oriansj&gt;</a></span><span class="message">here is my idea: a hex2 binary which just returns 42</span></div><div class="line" id="152108"><span class="nick" style="color:#389600"><a href="#152108" label="[15:21:08]">&lt;stikonas&gt;</a></span><span class="message">in kaem</span></div><div class="line" id="152141"><span class="nick" style="color:#2e2a4a"><a href="#152141" label="[15:21:41]">&lt;oriansj&gt;</a></span><span class="message">shouldn't need any more than a few assembly instructions and should cover the basics of the headers needed</span></div><div class="line" id="152158"><span class="nick" style="color:#389600"><a href="#152158" label="[15:21:58]">&lt;stikonas&gt;</a></span><span class="message">yeah, we can start with that...</span></div><div class="line" id="152445"><span class="nick" style="color:#2e2a4a"><a href="#152445" label="[15:24:45]">&lt;oriansj&gt;</a></span><span class="message">well it doesn't look horrific: <a rel="nofollow" href="https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/Portable_Executable_32_bit_Structure_in_SVG_fixed.svg/2980px-Portable_Executable_32_bit_Structure_in_SVG_fixed.svg.png">https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/Portable_Executable_32_bit_Structure_in_SVG_fixed.svg/2980px-Portable_Executable_32_bit_Structure_in_SVG_fixed.svg.png</a> </span></div><div class="line" id="152650"><span class="nick" style="color:#2e2a4a"><a href="#152650" label="[15:26:50]">&lt;oriansj&gt;</a></span><span class="message">but will probably take some experimentation to discover what we can just NULL and what needs to be carefully set</span></div><div class="line" id="153002"><span class="nick" style="color:#2e2a4a"><a href="#153002" label="[15:30:02]">&lt;oriansj&gt;</a></span><span class="message">the checksum bit has me concerned how to do that in hex2</span></div><div class="line" id="153019"><span class="nick" style="color:#2e2a4a"><a href="#153019" label="[15:30:19]">&lt;oriansj&gt;</a></span><span class="message">but we might be able to ignore it and put nulls if it isn't actually checked.</span></div><div class="line" id="153507"><span class="nick" style="color:#389600"><a href="#153507" label="[15:35:07]">&lt;stikonas&gt;</a></span><span class="message">there might be some differences in 64-bit version...</span></div><div class="line" id="153521"><span class="nick" style="color:#2e2a4a"><a href="#153521" label="[15:35:21]">&lt;oriansj&gt;</a></span><span class="message">hopefully we don't need the DOS stub program (unless it ends up making things simpler for us)</span></div><div class="line" id="153712"><span class="nick" style="color:#2e2a4a"><a href="#153712" label="[15:37:12]">&lt;oriansj&gt;</a></span><span class="message">ooooh, as COM binaries are a property of PE files; wouldn't that mean UEFI supports COM binaries with PE wrappers?</span></div><div class="line" id="153728"><span class="nick" style="color:#2e2a4a"><a href="#153728" label="[15:37:28]">&lt;oriansj&gt;</a></span><span class="message">or too hopeful of a thought?</span></div><div class="line" id="153804"><span class="nick" style="color:#389600"><a href="#153804" label="[15:38:04]">&lt;stikonas&gt;</a></span><span class="message">hmm, no idea...</span></div><div class="line" id="153937"><span class="nick" style="color:#389600"><a href="#153937" label="[15:39:37]">&lt;stikonas&gt;</a></span><span class="message">oriansj: DOS stub can be zeroed</span></div><div class="line" id="153948"><span class="nick" style="color:#389600"><a href="#153948" label="[15:39:48]">&lt;stikonas&gt;</a></span><span class="message">at on QEMU it's still happy</span></div><div class="line" id="154018"><span class="nick" style="color:#389600"><a href="#154018" label="[15:40:18]">&lt;stikonas&gt;</a></span><span class="message">not sure if we can completely skip it</span></div><div class="line" id="154026"><span class="nick" style="color:#389600"><a href="#154026" label="[15:40:26]">&lt;stikonas&gt;</a></span><span class="message">but at least if it's zeroed, then it's not too bad</span></div><div class="line" id="154040"><span class="nick" style="color:#2e2a4a"><a href="#154040" label="[15:40:40]">&lt;oriansj&gt;</a></span><span class="message">I was thinking something a little more aggressive</span></div><div class="line" id="154151"><span class="nick" style="color:#2e2a4a"><a href="#154151" label="[15:41:51]">&lt;oriansj&gt;</a></span><span class="message">as the DOS_STUB is just a COM file, if we put a useful program in there, would UEFI actually run it? As then we can skip virtually all of the PE file format entirely</span></div><div class="line" id="154204"><span class="nick" style="color:#389600"><a href="#154204" label="[15:42:04]">&lt;stikonas&gt;</a></span><span class="message">oh I see</span></div><div class="line" id="154206"><span class="nick" style="color:#389600"><a href="#154206" label="[15:42:06]">&lt;stikonas&gt;</a></span><span class="message">we can try...</span></div><div class="line" id="154224"><span class="nick" style="color:#389600"><a href="#154224" label="[15:42:24]">&lt;stikonas&gt;</a></span><span class="message">though maybe UEFI would just jump to normal entry point</span></div><div class="line" id="154227"><span class="nick" style="color:#389600"><a href="#154227" label="[15:42:27]">&lt;stikonas&gt;</a></span><span class="message">and ignore dos_stub</span></div><div class="line" id="154237"><span class="nick" style="color:#2e2a4a"><a href="#154237" label="[15:42:37]">&lt;oriansj&gt;</a></span><span class="message">indeed, we don't yet know</span></div><div class="line" id="154251"><span class="nick" style="color:#2e2a4a"><a href="#154251" label="[15:42:51]">&lt;oriansj&gt;</a></span><span class="message">but we certainly will have some fun figuring this puzzle out</span></div><div class="line" id="154335"><span class="nick" style="color:#389600"><a href="#154335" label="[15:43:35]">&lt;stikonas&gt;</a></span><span class="message">checksums are already zeroed in my test file</span></div><div class="line" id="154336"><span class="nick" style="color:#389600"><a href="#154336" label="[15:43:36]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://stikonas.eu/files/bootstrap/test.efi">https://stikonas.eu/files/bootstrap/test.efi</a> </span></div><div class="line" id="154342"><span class="nick" style="color:#389600"><a href="#154342" label="[15:43:42]">&lt;stikonas&gt;</a></span><span class="message">I didn't even have to do it</span></div><div class="line" id="154352"><span class="nick" style="color:#389600"><a href="#154352" label="[15:43:52]">&lt;stikonas&gt;</a></span><span class="message">so probably most of the fields can be  at the very least zeroed</span></div><div class="line" id="154447"><span class="nick" style="color:#389600"><a href="#154447" label="[15:44:47]">&lt;stikonas&gt;</a></span><span class="message">this can be built with fasm: <a rel="nofollow" href="https://stikonas.eu/files/bootstrap/test.asm">https://stikonas.eu/files/bootstrap/test.asm</a> </span></div><div class="line" id="154602"><span class="nick" style="color:#2e2a4a"><a href="#154602" label="[15:46:02]">&lt;oriansj&gt;</a></span><span class="message">thanks, that'll be handy for testing</span></div><div class="line" id="154746"><span class="nick" style="color:#389600"><a href="#154746" label="[15:47:46]">&lt;stikonas&gt;</a></span><span class="message">(I just put it in Development/rootfs directory in stage0-uefi repo and then tried to manualy run it</span></div><div class="line" id="155419"><span class="nick" style="color:#389600"><a href="#155419" label="[15:54:19]">&lt;stikonas&gt;</a></span><span class="message">not sure if this applies to UEFI but <a rel="nofollow" href="https://stackoverflow.com/questions/553029/what-is-the-smallest-possible-windows-pe-executable">https://stackoverflow.com/questions/553029/what-is-the-smallest-possible-windows-pe-executable</a> </span></div><div class="line" id="155442"><span class="nick" style="color:#389600"><a href="#155442" label="[15:54:42]">&lt;stikonas&gt;</a></span><span class="message">The smallest x64 PE executable is 268 bytes.</span></div><div class="line" id="155722"><span class="nick" style="color:#389600"><a href="#155722" label="[15:57:22]">&lt;stikonas&gt;</a></span><span class="message">I wonder if UEFI can run 32-bit binaries</span></div><div class="line" id="155728"><span class="nick" style="color:#389600"><a href="#155728" label="[15:57:28]">&lt;stikonas&gt;</a></span><span class="message">that could cut the size by a lot</span></div><div class="line" id="160341"><span class="nick" style="color:#2e2a4a"><a href="#160341" label="[16:03:41]">&lt;oriansj&gt;</a></span><span class="message">well we have to abuse UEFI to find its limits</span></div><div class="line" id="161151"><span class="nick" style="color:#389600"><a href="#161151" label="[16:11:51]">&lt;stikonas&gt;</a></span><span class="message">well, be careful with that. Best to make sure it's within specs, otherwise some things might work in one implementation but not the other</span></div><div class="line" id="161334"><span class="nick" style="color:#389600"><a href="#161334" label="[16:13:34]">&lt;stikonas&gt;</a></span><span class="message">though I guess we can test on a few different computers and see if things generally work</span></div><div class="line" id="161929"><span class="nick" style="color:#2e2a4a"><a href="#161929" label="[16:19:29]">&lt;oriansj&gt;</a></span><span class="message">well the problem with specs is they don't always reflect reality</span></div><div class="line" id="162023"><span class="nick" style="color:#2e2a4a"><a href="#162023" label="[16:20:23]">&lt;oriansj&gt;</a></span><span class="message">but yes, generally we should be confirming to the specification to give us the greatest compatibility as possible</span></div><div class="line" id="173835"><span class="nick" style="color:#2e2a4a"><a href="#173835" label="[17:38:35]">&lt;oriansj&gt;</a></span><span class="message">^confirming^conforming^</span></div><div class="line" id="223754"><span class="nick" style="color:#80b1d3"><a href="#223754" label="[22:37:54]">&lt;muurkha&gt;</a></span><span class="message">possibly of interest to some here: <a rel="nofollow" href="https://www.offlineos.com/">https://www.offlineos.com/</a> </span></div><div class="line" id="223844"><span class="nick" style="color:#80b1d3"><a href="#223844" label="[22:38:44]">&lt;muurkha&gt;</a></span><span class="message"> <a rel="nofollow" href="http://b5l4xazoe5xjswxrptga65mbcq4o5ism2isee2kc76gohmrdf3o5jdqd.onion/">http://b5l4xazoe5xjswxrptga65mbcq4o5ism2isee2kc76gohmrdf3o5jdqd.onion/</a> </span></div><div class="line" id="224840"><span class="nick" style="color:#6d2462"><a href="#224840" label="[22:48:40]">&lt;Hagfish&gt;</a></span><span class="message">have all the UEFI tests been done in qemu so far?  (sorry, i haven't been following, but it seems like there's another big achievement ahead or recently passed)</span></div><div class="line" id="224925"><span class="nick" style="color:#389600"><a href="#224925" label="[22:49:25]">&lt;stikonas&gt;</a></span><span class="message">Hagfish: yes, only in qemu</span></div><div class="line" id="224936"><span class="nick" style="color:#389600"><a href="#224936" label="[22:49:36]">&lt;stikonas&gt;</a></span><span class="message">there wasn't much to run until recently</span></div><div class="line" id="224941"><span class="nick" style="color:#389600"><a href="#224941" label="[22:49:41]">&lt;stikonas&gt;</a></span><span class="message">and it's much quicker to boot qemu</span></div><div class="line" id="224949"><span class="nick" style="color:#6d2462"><a href="#224949" label="[22:49:49]">&lt;Hagfish&gt;</a></span><span class="message">yeah, i'm just glad i haven't missed the big moment :)</span></div><div class="line" id="225033"><span class="nick" style="color:#389600"><a href="#225033" label="[22:50:33]">&lt;stikonas&gt;</a></span><span class="message">there isn't that much right now yet</span></div><div class="line" id="225036"><span class="nick" style="color:#389600"><a href="#225036" label="[22:50:36]">&lt;stikonas&gt;</a></span><span class="message">it's just two C programs</span></div><div class="line" id="225048"><span class="nick" style="color:#6d2462"><a href="#225048" label="[22:50:48]">&lt;Hagfish&gt;</a></span><span class="message">sure</span></div><div class="line" id="225055"><span class="nick" style="color:#6d2462"><a href="#225055" label="[22:50:55]">&lt;Hagfish&gt;</a></span><span class="message">but it's like booting the first computer, in a way</span></div><div class="line" id="225118"><span class="nick" style="color:#6d2462"><a href="#225118" label="[22:51:18]">&lt;Hagfish&gt;</a></span><span class="message">it might not do anything, but it's sort of a clearly defined start point</span></div><div class="line" id="225226"><span class="nick" style="color:#6d2462"><a href="#225226" label="[22:52:26]">&lt;Hagfish&gt;</a></span><span class="message">the set of all bootstrapped software is currently empty, but soon that set will grow and grow until it includes all software</span></div><div class="line" id="225241"><span class="nick" style="color:#6d2462"><a href="#225241" label="[22:52:41]">&lt;Hagfish&gt;</a></span><span class="message">(although i guess the definition of &quot;bootstrapped&quot; will change over time)</span></div><div class="line" id="225306"><span class="nick" style="color:#6d2462"><a href="#225306" label="[22:53:06]">&lt;Hagfish&gt;</a></span><span class="message">does it count if you didn't solder the transistors together yourself?  etc.</span></div><div class="line" id="225607"><span class="nick" style="color:#80b1d3"><a href="#225607" label="[22:56:07]">&lt;muurkha&gt;</a></span><span class="message">this was a continuous source of controversy on the old homebrew computing newsgroup.  comp.homebrew?  I forget</span></div><div class="line" id="225649"><span class="nick" style="color:#80b1d3"><a href="#225649" label="[22:56:49]">&lt;muurkha&gt;</a></span><span class="message">which was for people using existing chips but not existing boards, basically</span></div><div class="line" id="225940"><span class="nick" style="color:#6d2462"><a href="#225940" label="[22:59:40]">&lt;Hagfish&gt;</a></span><span class="message">yeah, that's an interesting dividing line</span></div><div class="line" id="230005"><span class="nick" style="color:#6d2462"><a href="#230005" label="[23:00:05]">&lt;Hagfish&gt;</a></span><span class="message">and i think it's perfectly valid to talk about &quot;bootstrapped within qemu&quot;, that's still an amazing technical achievement and rules out all sorts of attacks</span></div><div class="line" id="230246"><span class="nick" style="color:#80b1d3"><a href="#230246" label="[23:02:46]">&lt;muurkha&gt;</a></span><span class="message">maybe, I'm not sure it rules anything out against an active adversary</span></div><div class="line" id="230302"><span class="nick" style="color:#389600"><a href="#230302" label="[23:03:02]">&lt;stikonas&gt;</a></span><span class="message">well, qemu or real hardware shouldn't really metter</span></div><div class="line" id="230307"><span class="nick" style="color:#389600"><a href="#230307" label="[23:03:07]">&lt;stikonas&gt;</a></span><span class="message">*matter</span></div><div class="line" id="230307"><span class="nick" style="color:#80b1d3"><a href="#230307" label="[23:03:07]">&lt;muurkha&gt;</a></span><span class="message">it matters a lot</span></div><div class="line" id="230322"><span class="nick" style="color:#6d2462"><a href="#230322" label="[23:03:22]">&lt;Hagfish&gt;</a></span><span class="message">an attacker wouldn't target qemu if they know a defender can just run the same code on real metal</span></div><div class="line" id="230324"><span class="nick" style="color:#80b1d3"><a href="#230324" label="[23:03:24]">&lt;muurkha&gt;</a></span><span class="message">real hardware isn't vulnerable to the compiler with which you compiled the kernel under which qemu is running</span></div><div class="line" id="230333"><span class="nick" style="color:#80b1d3"><a href="#230333" label="[23:03:33]">&lt;muurkha&gt;</a></span><span class="message">or with which you compiled qemu</span></div><div class="line" id="230411"><span class="nick" style="color:#80b1d3"><a href="#230411" label="[23:04:11]">&lt;muurkha&gt;</a></span><span class="message">Hagfish: not unless they've compromised the metal, but that only matters once we can just run the same code on real metal</span></div><div class="line" id="230429"><span class="nick" style="color:#389600"><a href="#230429" label="[23:04:29]">&lt;stikonas&gt;</a></span><span class="message">qemu was built with gcc, uefi was probably built with gcc too...</span></div><div class="line" id="230433"><span class="nick" style="color:#389600"><a href="#230433" label="[23:04:33]">&lt;stikonas&gt;</a></span><span class="message">even on baremetal</span></div><div class="line" id="230439"><span class="nick" style="color:#80b1d3"><a href="#230439" label="[23:04:39]">&lt;muurkha&gt;</a></span><span class="message">probably</span></div><div class="line" id="230443"><span class="nick" style="color:#6d2462"><a href="#230443" label="[23:04:43]">&lt;Hagfish&gt;</a></span><span class="message">muurkha: ah yes, if they've compromised the metal, then it would make sense to hide the same behaviour in qemu, for consistency</span></div><div class="line" id="230503"><span class="nick" style="color:#389600"><a href="#230503" label="[23:05:03]">&lt;stikonas&gt;</a></span><span class="message">yes, but you can compromise firmware</span></div><div class="line" id="230513"><span class="nick" style="color:#6d2462"><a href="#230513" label="[23:05:13]">&lt;Hagfish&gt;</a></span><span class="message">true</span></div><div class="line" id="230515"><span class="nick" style="color:#389600"><a href="#230515" label="[23:05:15]">&lt;stikonas&gt;</a></span><span class="message">you don't need to compromise hardware</span></div><div class="line" id="230518"><span class="nick" style="color:#80b1d3"><a href="#230518" label="[23:05:18]">&lt;muurkha&gt;</a></span><span class="message">and even if they haven't compromised the metal or the firmware, they could compromise qemu in an undetected way until you actually did compare the results</span></div><div class="line" id="230548"><span class="nick" style="color:#80b1d3"><a href="#230548" label="[23:05:48]">&lt;muurkha&gt;</a></span><span class="message">and then only if you respond to a discrepancy in a very persistent way</span></div><div class="line" id="230549"><span class="nick" style="color:#6d2462"><a href="#230549" label="[23:05:49]">&lt;Hagfish&gt;</a></span><span class="message">comparing the results seems cheap, but i guess there's a question of which machine you do the comparison on :)</span></div><div class="line" id="230604"><span class="nick" style="color:#80b1d3"><a href="#230604" label="[23:06:04]">&lt;muurkha&gt;</a></span><span class="message">it's cheaper once the bare-metal results exist :)</span></div><div class="line" id="230613"><span class="nick" style="color:#6d2462"><a href="#230613" label="[23:06:13]">&lt;Hagfish&gt;</a></span><span class="message">true :)</span></div><div class="line" id="230617"><span class="nick" style="color:#389600"><a href="#230617" label="[23:06:17]">&lt;stikonas&gt;</a></span><span class="message">in any case if metal or fimrware is compromosed, it's unlikely to be trusting trust attack. It will probably be just backdoor (kind of like management engine)</span></div><div class="line" id="230633"><span class="nick" style="color:#80b1d3"><a href="#230633" label="[23:06:33]">&lt;muurkha&gt;</a></span><span class="message">yeah</span></div><div class="line" id="230651"><span class="nick" style="color:#80b1d3"><a href="#230651" label="[23:06:51]">&lt;muurkha&gt;</a></span><span class="message">still, barer metal would be great</span></div><div class="line" id="230703"><span class="nick" style="color:#389600"><a href="#230703" label="[23:07:03]">&lt;stikonas&gt;</a></span><span class="message">well, builder-hex0 is closer to bare metal, we have  that</span></div><div class="line" id="230722"><span class="nick" style="color:#389600"><a href="#230722" label="[23:07:22]">&lt;stikonas&gt;</a></span><span class="message">but it's slow and somewhat hard to use (since it's close to baremetal)</span></div><div class="line" id="230737"><span class="nick" style="color:#80b1d3"><a href="#230737" label="[23:07:37]">&lt;muurkha&gt;</a></span><span class="message">in Accelerando there's a fun line about this which involves bootstrapping on a clock-radio microcontrololer</span></div><div class="line" id="230743"><span class="nick" style="color:#389600"><a href="#230743" label="[23:07:43]">&lt;stikonas&gt;</a></span><span class="message">on the other hand stage0-uefi could probably be automated almost to the extent of stage0-posix</span></div><div class="line" id="230826"><span class="nick" style="color:#389600"><a href="#230826" label="[23:08:26]">&lt;stikonas&gt;</a></span><span class="message">but if you  want to do real baremetal bootstrapping with no firmware, e.g. on some arm system or riscv</span></div><div class="line" id="230837"><span class="nick" style="color:#389600"><a href="#230837" label="[23:08:37]">&lt;stikonas&gt;</a></span><span class="message">then builder-hex0 is a good starting point</span></div><div class="line" id="230852"><span class="nick" style="color:#389600"><a href="#230852" label="[23:08:52]">&lt;stikonas&gt;</a></span><span class="message">though you have to replace bios syscalls with minimal hardware drivers</span></div><div class="line" id="230901"><span class="nick" style="color:#80b1d3"><a href="#230901" label="[23:09:01]">&lt;muurkha&gt;</a></span><span class="message">yeah</span></div><div class="line" id="231030"><span class="nick" style="color:#80b1d3"><a href="#231030" label="[23:10:30]">&lt;muurkha&gt;</a></span><span class="message">you could presumably get a pretty usable system running an an 8-bit AVR talking to encrypted external memory</span></div><div class="line" id="231111"><span class="nick" style="color:#80b1d3"><a href="#231111" label="[23:11:11]">&lt;muurkha&gt;</a></span><span class="message">ARMs usually seem to have a lot of annoying HAL attack surface</span></div><div class="line" id="231204"><span class="nick" style="color:#80b1d3"><a href="#231204" label="[23:12:04]">&lt;muurkha&gt;</a></span><span class="message">but to a certain degree this is counting angels on the head of a pin, given the enormous progress we've already made</span></div><div class="line" id="231415"><span class="nick" style="color:#80b1d3"><a href="#231415" label="[23:14:15]">&lt;muurkha&gt;</a></span><span class="message">(I say &quot;encrypted external memory&quot; because the choice of the right authenticated encryption mode could ensure that hypothetical malicious external memory can't do anything worse than a DoS)</span></div><br /></div></body></html>