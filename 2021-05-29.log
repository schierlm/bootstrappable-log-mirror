<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-05-29.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="002417"><span class="nick" style="color:#8dd3c7"><a href="#002417" label="[00:24:17]">&lt;oriansj&gt;</a></span><span class="message">fossy: My perspective on FSF having their own IRC infrastructure is as follows: <a rel="nofollow" href="https://rachelbythebay.com/w/2021/05/26/irc/">https://rachelbythebay.com/w/2021/05/26/irc/</a> </span></div><div class="line" id="002925"><span class="nick" style="color:#2e2a4a"><a href="#002925" label="[00:29:25]">&lt;stikonas&gt;</a></span><span class="message">fossy: when you have time #120 and #122 can have some reviews. Also I'm looking at texinfo and gnulib stuff there is weird</span></div><div class="line" id="003009"><span class="nick" style="color:#2e2a4a"><a href="#003009" label="[00:30:09]">&lt;stikonas&gt;</a></span><span class="message">it's not a submodule like in other git repos...</span></div><div class="line" id="003101"><span class="nick" style="color:#2e2a4a"><a href="#003101" label="[00:31:01]">&lt;stikonas&gt;</a></span><span class="message">well, once I can identify revision, I guess it will be the same</span></div><div class="line" id="004603"><span class="nick" style="color:#8dd3c7"><a href="#004603" label="[00:46:03]">&lt;oriansj&gt;</a></span><span class="message">Well this does look interesting: <a rel="nofollow" href="https://github.com/alphapapa/matrix-client.el">https://github.com/alphapapa/matrix-client.el</a>  it doesn't look ready for use yet.</span></div><div class="line" id="013203"><span class="nick" style="color:#8dd3c7"><a href="#013203" label="[01:32:03]">&lt;oriansj&gt;</a></span><span class="message">well this certainly looks interesting: <a rel="nofollow" href="https://libre-soc.org/">https://libre-soc.org/</a> </span></div><div class="line" id="014933"><span class="nick" style="color:#6b8072"><a href="#014933" label="[01:49:33]">&lt;vagrantc&gt;</a></span><span class="message">oriansj: it looks good on the surface, but i find one of the main people pushing it has a history of burning bridges and burying projects after they get funded</span></div><div class="line" id="015024"><span class="nick" style="color:#6b8072"><a href="#015024" label="[01:50:24]">&lt;vagrantc&gt;</a></span><span class="message">i feel a bit awkward saying it so bluntly, but frankly, it has happened so many times i feel like anything less would almost be dishonest</span></div><div class="line" id="015051"><span class="nick" style="color:#6b8072"><a href="#015051" label="[01:50:51]">&lt;vagrantc&gt;</a></span><span class="message">maybe this one will be different? :)</span></div><div class="line" id="021116"><span class="nick" style="color:#8dd3c7"><a href="#021116" label="[02:11:16]">&lt;oriansj&gt;</a></span><span class="message">vagrantc: thank you for that information that I was not aware of.</span></div><div class="line" id="021359"><span class="nick" style="color:#6b8072"><a href="#021359" label="[02:13:59]">&lt;vagrantc&gt;</a></span><span class="message">it's hard, because they promote good ideas on important issues, and projects i really *want* to see succeed ... but i eventually told myself &quot;never again will i get my hopes up&quot;</span></div><div class="line" id="021427"><span class="nick" style="color:#6b8072"><a href="#021427" label="[02:14:27]">&lt;vagrantc&gt;</a></span><span class="message">maybe there are enough people on this one that it might work out...</span></div><div class="line" id="023727"><span class="nick" style="color:#8dd3c7"><a href="#023727" label="[02:37:27]">&lt;oriansj&gt;</a></span><span class="message">vagrantc: all success depends on the people and some people shouldn't be trusted based on their previous behavior alone.</span></div><div class="line" id="030140"><span class="nick" style="color:#80b1d3"><a href="#030140" label="[03:01:40]">&lt;Hagfish&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/122/files">https://github.com/fosslinux/live-bootstrap/pull/122/files</a>  more great work by stikonas</span></div><div class="line" id="030219"><span class="nick" style="color:#80b1d3"><a href="#030219" label="[03:02:19]">&lt;Hagfish&gt;</a></span><span class="message">the only thing that looks odd to me is there various different gnulib snapshots being downloaded</span></div><div class="line" id="030232"><span class="nick" style="color:#80b1d3"><a href="#030232" label="[03:02:32]">&lt;Hagfish&gt;</a></span><span class="message">i'm not sure if the reasons for those snapshots is explained anywhere</span></div><div class="line" id="052821"><span class="nick" style="color:#8dd3c7"><a href="#052821" label="[05:28:21]">&lt;oriansj&gt;</a></span><span class="message">there, now it is no longer possible for M2-Planet to show wrong line numbers</span></div><div class="line" id="052911"><span class="nick" style="color:#8dd3c7"><a href="#052911" label="[05:29:11]">&lt;oriansj&gt;</a></span><span class="message">now on every byte read, it will update line numbers if '\n' is found.</span></div><div class="line" id="060518"><span class="nick" style="color:#8dd3c7"><a href="#060518" label="[06:05:18]">&lt;oriansj&gt;</a></span><span class="message">I should probably add a proper sha256sum to mescc-tools-extras</span></div><div class="line" id="060902"><span class="nick" style="color:#8dd3c7"><a href="#060902" label="[06:09:02]">&lt;oriansj&gt;</a></span><span class="message">38KB isn't half bad for a static binary of sha256sum</span></div><div class="line" id="062240"><span class="nick" style="color:#8dd3c7"><a href="#062240" label="[06:22:40]">&lt;oriansj&gt;</a></span><span class="message">and that is now up</span></div><div class="line" id="062317"><span class="nick" style="color:#8dd3c7"><a href="#062317" label="[06:23:17]">&lt;oriansj&gt;</a></span><span class="message">build with M2-Planet --architecture ${ARCH} \</span></div><div class="line" id="062436"><span class="nick" style="color:#8dd3c7"><a href="#062436" label="[06:24:36]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1199260/">https://paste.debian.net/1199260/</a> </span></div><div class="line" id="062557"><span class="nick" style="color:#8dd3c7"><a href="#062557" label="[06:25:57]">&lt;oriansj&gt;</a></span><span class="message">So a little ugly and needs a pinch of cleanup but it works and behaves just like standard sha256sum (minus a slightly more helpful message when files don't have matching checksums)</span></div><div class="line" id="062635"><span class="nick" style="color:#8dd3c7"><a href="#062635" label="[06:26:35]">&lt;oriansj&gt;</a></span><span class="message">Now to get some sleep.</span></div><div class="line" id="092830"><span class="nick" style="color:#6d2462"><a href="#092830" label="[09:28:30]">&lt;stikonas[m]&gt;</a></span><span class="message">Hagfish: gnulib is not backwards/forward compatible</span></div><div class="line" id="135759"><span class="nick" style="color:#234e69"><a href="#135759" label="[13:57:59]">&lt;mihi&gt;</a></span><span class="message">oriansj, why is the output filename of your sha256sum utility &quot;sha3sum&quot;? SHA-3 is actually a different algorithm than sha256 (which is the 256-bit variant of SHA-2)</span></div><div class="line" id="135900"><span class="nick" style="color:#234e69"><a href="#135900" label="[13:59:00]">&lt;mihi&gt;</a></span><span class="message">and maybe you want to add test cases for some test vectors (e.g. <a rel="nofollow" href="https://web.archive.org/web/20170127133722/http://www.nsrl.nist.gov/testdata/">https://web.archive.org/web/20170127133722/http://www.nsrl.nist.gov/testdata/</a>) </span></div><div class="line" id="141643"><span class="nick" style="color:#6c3d55"><a href="#141643" label="[14:16:43]">&lt;fossy&gt;</a></span><span class="message">holy crap stikonas[m] that was fast</span></div><div class="line" id="141719"><span class="nick" style="color:#2e2a4a"><a href="#141719" label="[14:17:19]">&lt;stikonas&gt;</a></span><span class="message">fossy: well, I got an email :D</span></div><div class="line" id="141732"><span class="nick" style="color:#2e2a4a"><a href="#141732" label="[14:17:32]">&lt;stikonas&gt;</a></span><span class="message">but yes, our runs are getting larger and longer</span></div><div class="line" id="141755"><span class="nick" style="color:#2e2a4a"><a href="#141755" label="[14:17:55]">&lt;stikonas&gt;</a></span><span class="message">even if we switch to chroot/no tmpfs, this will only give us a bit of headroom</span></div><div class="line" id="141800"><span class="nick" style="color:#6c3d55"><a href="#141800" label="[14:18:00]">&lt;fossy&gt;</a></span><span class="message">yeah</span></div><div class="line" id="141810"><span class="nick" style="color:#6c3d55"><a href="#141810" label="[14:18:10]">&lt;fossy&gt;</a></span><span class="message">on my computer we are approaching 50 mins i think</span></div><div class="line" id="141815"><span class="nick" style="color:#2e2a4a"><a href="#141815" label="[14:18:15]">&lt;stikonas&gt;</a></span><span class="message">yeah...</span></div><div class="line" id="141816"><span class="nick" style="color:#6c3d55"><a href="#141816" label="[14:18:16]">&lt;fossy&gt;</a></span><span class="message">maybe even 1hr?</span></div><div class="line" id="141835"><span class="nick" style="color:#6c3d55"><a href="#141835" label="[14:18:35]">&lt;fossy&gt;</a></span><span class="message">i'm working on kexec at a later stage (just after gcc), so then we can do a sysb transfer and hopefully cache sysa</span></div><div class="line" id="141837"><span class="nick" style="color:#d9d9d9"><a href="#141837" label="[14:18:37]">&lt;siraben&gt;</a></span><span class="message">Do we have a Docker image that would allow people on macOS to run it as well?</span></div><div class="line" id="141839"><span class="nick" style="color:#6c3d55"><a href="#141839" label="[14:18:39]">&lt;fossy&gt;</a></span><span class="message">that should speed it up a bit</span></div><div class="line" id="141846"><span class="nick" style="color:#6c3d55"><a href="#141846" label="[14:18:46]">&lt;fossy&gt;</a></span><span class="message">docker image for live-bootstrap? no</span></div><div class="line" id="141848"><span class="nick" style="color:#d9d9d9"><a href="#141848" label="[14:18:48]">&lt;siraben&gt;</a></span><span class="message">Or I think the QEMU should work, I haven't tested the live-bootstrap yet</span></div><div class="line" id="141919"><span class="nick" style="color:#2e2a4a"><a href="#141919" label="[14:19:19]">&lt;stikonas&gt;</a></span><span class="message">siraben: no, but Docker image would be nice to have</span></div><div class="line" id="141939"><span class="nick" style="color:#2e2a4a"><a href="#141939" label="[14:19:39]">&lt;stikonas&gt;</a></span><span class="message">fossy: why docker image is bad?</span></div><div class="line" id="141956"><span class="nick" style="color:#2e2a4a"><a href="#141956" label="[14:19:56]">&lt;stikonas&gt;</a></span><span class="message">basically just chroot with some extra isolation</span></div><div class="line" id="141957"><span class="nick" style="color:#6c3d55"><a href="#141957" label="[14:19:57]">&lt;fossy&gt;</a></span><span class="message">I mean we don't currently have one. But, not sure in the long term a Docker image is something that should be entertained as a &quot;production&quot; type idea</span></div><div class="line" id="142012"><span class="nick" style="color:#6c3d55"><a href="#142012" label="[14:20:12]">&lt;fossy&gt;</a></span><span class="message">like i wouldn't recomment using chroot to someone who isn't a developer</span></div><div class="line" id="142015"><span class="nick" style="color:#2e2a4a"><a href="#142015" label="[14:20:15]">&lt;stikonas&gt;</a></span><span class="message">oh I misunderstud...</span></div><div class="line" id="142024"><span class="nick" style="color:#2e2a4a"><a href="#142024" label="[14:20:24]">&lt;stikonas&gt;</a></span><span class="message">well, yes, chroot is just nice to get files in/out</span></div><div class="line" id="142027"><span class="nick" style="color:#d9d9d9"><a href="#142027" label="[14:20:27]">&lt;siraben&gt;</a></span><span class="message">Oh I wasn't thinking of it like that, more like, getting it able to work in more environments</span></div><div class="line" id="142027"><span class="nick" style="color:#6c3d55"><a href="#142027" label="[14:20:27]">&lt;fossy&gt;</a></span><span class="message">yeah</span></div><div class="line" id="142037"><span class="nick" style="color:#d9d9d9"><a href="#142037" label="[14:20:37]">&lt;siraben&gt;</a></span><span class="message">Many devs use Docker already</span></div><div class="line" id="142040"><span class="nick" style="color:#2e2a4a"><a href="#142040" label="[14:20:40]">&lt;stikonas&gt;</a></span><span class="message">also, if it works, maybe rootless podman is better than docker</span></div><div class="line" id="142045"><span class="nick" style="color:#6c3d55"><a href="#142045" label="[14:20:45]">&lt;fossy&gt;</a></span><span class="message">&quot;getting it able to work in more environments&quot; is an anti-design feature</span></div><div class="line" id="142059"><span class="nick" style="color:#d9d9d9"><a href="#142059" label="[14:20:59]">&lt;siraben&gt;</a></span><span class="message">good for contributions</span></div><div class="line" id="142109"><span class="nick" style="color:#6c3d55"><a href="#142109" label="[14:21:09]">&lt;fossy&gt;</a></span><span class="message">live-bootstrap is made to run idealistically for one single set of software</span></div><div class="line" id="142112"><span class="nick" style="color:#2e2a4a"><a href="#142112" label="[14:21:12]">&lt;stikonas&gt;</a></span><span class="message">well, I was thinking it might be good for CI...</span></div><div class="line" id="142118"><span class="nick" style="color:#6c3d55"><a href="#142118" label="[14:21:18]">&lt;fossy&gt;</a></span><span class="message">the only current changing factor we really have is the kernel</span></div><div class="line" id="142121"><span class="nick" style="color:#2e2a4a"><a href="#142121" label="[14:21:21]">&lt;stikonas&gt;</a></span><span class="message">if we run in docker</span></div><div class="line" id="142126"><span class="nick" style="color:#6c3d55"><a href="#142126" label="[14:21:26]">&lt;fossy&gt;</a></span><span class="message">hm, yeah that's proabbly where docker could come in handy</span></div><div class="line" id="142132"><span class="nick" style="color:#d9d9d9"><a href="#142132" label="[14:21:32]">&lt;siraben&gt;</a></span><span class="message">like I'm running on macOS, I would have to use QEMU to get live-bootstrap to work right?</span></div><div class="line" id="142137"><span class="nick" style="color:#6c3d55"><a href="#142137" label="[14:21:37]">&lt;fossy&gt;</a></span><span class="message">yes</span></div><div class="line" id="142148"><span class="nick" style="color:#6c3d55"><a href="#142148" label="[14:21:48]">&lt;fossy&gt;</a></span><span class="message">how does one run docker on macos anyways</span></div><div class="line" id="142202"><span class="nick" style="color:#2e2a4a"><a href="#142202" label="[14:22:02]">&lt;stikonas&gt;</a></span><span class="message">not sure how docker works or doesn't on macos</span></div><div class="line" id="142202"><span class="nick" style="color:#d9d9d9"><a href="#142202" label="[14:22:02]">&lt;siraben&gt;</a></span><span class="message">It can be installed</span></div><div class="line" id="142205"><span class="nick" style="color:#d9d9d9"><a href="#142205" label="[14:22:05]">&lt;siraben&gt;</a></span><span class="message">for blynn-compiler what I did was forward the Nix build to a Docker container running NixOS</span></div><div class="line" id="142208"><span class="nick" style="color:#bc80bd"><a href="#142208" label="[14:22:08]">&lt;qyliss&gt;</a></span><span class="message">they have a proprietary program that runs a VM for you</span></div><div class="line" id="142212"><span class="nick" style="color:#6c3d55"><a href="#142212" label="[14:22:12]">&lt;fossy&gt;</a></span><span class="message">ah</span></div><div class="line" id="142219"><span class="nick" style="color:#2e2a4a"><a href="#142219" label="[14:22:19]">&lt;stikonas&gt;</a></span><span class="message">so it's not really a container...</span></div><div class="line" id="142222"><span class="nick" style="color:#d9d9d9"><a href="#142222" label="[14:22:22]">&lt;siraben&gt;</a></span><span class="message">Oh the Docker app is proprietary? aw</span></div><div class="line" id="142225"><span class="nick" style="color:#2e2a4a"><a href="#142225" label="[14:22:25]">&lt;stikonas&gt;</a></span><span class="message">it's just VM...</span></div><div class="line" id="142233"><span class="nick" style="color:#d9d9d9"><a href="#142233" label="[14:22:33]">&lt;siraben&gt;</a></span><span class="message">I thought it was virtualized, no?</span></div><div class="line" id="142241"><span class="nick" style="color:#6c3d55"><a href="#142241" label="[14:22:41]">&lt;fossy&gt;</a></span><span class="message">VM = virtualised?</span></div><div class="line" id="142252"><span class="nick" style="color:#bc80bd"><a href="#142252" label="[14:22:52]">&lt;qyliss&gt;</a></span><span class="message">so only features that can cross VM boundaries work -- you can't e.g. share a socket with a container</span></div><div class="line" id="142308"><span class="nick" style="color:#6c3d55"><a href="#142308" label="[14:23:08]">&lt;fossy&gt;</a></span><span class="message">not that that matters for live-bootstrap though</span></div><div class="line" id="142320"><span class="nick" style="color:#d9d9d9"><a href="#142320" label="[14:23:20]">&lt;siraben&gt;</a></span><span class="message">fossy: I guess, with Hyper V framework instead of emulation</span></div><div class="line" id="142326"><span class="nick" style="color:#6c3d55"><a href="#142326" label="[14:23:26]">&lt;fossy&gt;</a></span><span class="message">anyway the idealistic target platform for live-bootstrap is bare metal</span></div><div class="line" id="142335"><span class="nick" style="color:#d9d9d9"><a href="#142335" label="[14:23:35]">&lt;siraben&gt;</a></span><span class="message">yeah</span></div><div class="line" id="142356"><span class="nick" style="color:#6c3d55"><a href="#142356" label="[14:23:56]">&lt;fossy&gt;</a></span><span class="message">so apart from CI usecases which is a good enough point for implementation I don't see all that much usecase in docker/etc</span></div><div class="line" id="142404"><span class="nick" style="color:#6c3d55"><a href="#142404" label="[14:24:04]">&lt;fossy&gt;</a></span><span class="message">but i would still like it cause CI</span></div><div class="line" id="142415"><span class="nick" style="color:#6c3d55"><a href="#142415" label="[14:24:15]">&lt;fossy&gt;</a></span><span class="message">but CI is just getting longer and longer, stikonas is right</span></div><div class="line" id="142610"><span class="nick" style="color:#2e2a4a"><a href="#142610" label="[14:26:10]">&lt;stikonas&gt;</a></span><span class="message">and I think it might get much longer soon...</span></div><div class="line" id="142626"><span class="nick" style="color:#2e2a4a"><a href="#142626" label="[14:26:26]">&lt;stikonas&gt;</a></span><span class="message">we probably can do something like this next</span></div><div class="line" id="142700"><span class="nick" style="color:#2e2a4a"><a href="#142700" label="[14:27:00]">&lt;stikonas&gt;</a></span><span class="message">libunistring-&gt;guile-&gt;autogen-&gt;gcc (maybe newer binutils before that, possibly glibc)</span></div><div class="line" id="142728"><span class="nick" style="color:#2e2a4a"><a href="#142728" label="[14:27:28]">&lt;stikonas&gt;</a></span><span class="message">I think guile is probably slow to compile, gcc too...</span></div><div class="line" id="143120"><span class="nick" style="color:#8dd3c7"><a href="#143120" label="[14:31:20]">&lt;oriansj&gt;</a></span><span class="message">mihi: yes the output program name was wrong (it was a copy and paste from a sha-3 implementation for M2-Planet (that never quite worked right))</span></div><div class="line" id="144441"><span class="nick" style="color:#8dd3c7"><a href="#144441" label="[14:44:41]">&lt;oriansj&gt;</a></span><span class="message">isn't docker mostly just a wrapper around qemu?</span></div><div class="line" id="144538"><span class="nick" style="color:#8dd3c7"><a href="#144538" label="[14:45:38]">&lt;oriansj&gt;</a></span><span class="message">in which case docker support is just a few generate and spawn functions and that is it.</span></div><div class="line" id="144735"><span class="nick" style="color:#3c5b35"><a href="#144735" label="[14:47:35]">&lt;amirouche&gt;</a></span><span class="message">docker use its linux specific syscalls.</span></div><div class="line" id="144802"><span class="nick" style="color:#3c5b35"><a href="#144802" label="[14:48:02]">&lt;amirouche&gt;</a></span><span class="message">not specific to docker per se, but they were created to enable lightweight &quot;vm&quot; such as docker.</span></div><div class="line" id="144903"><span class="nick" style="color:#8dd3c7"><a href="#144903" label="[14:49:03]">&lt;oriansj&gt;</a></span><span class="message">and I probably should vote before the deadline: My vote <a rel="nofollow" href="https://paste.debian.net/1199287/">https://paste.debian.net/1199287/</a> </span></div><div class="line" id="144926"><span class="nick" style="color:#3c5b35"><a href="#144926" label="[14:49:26]">&lt;amirouche&gt;</a></span><span class="message">on macos, IIUC, it rely on qemu to emulate linux, then docker is run inside that full vm</span></div><div class="line" id="144934"><span class="nick" style="color:#3c5b35"><a href="#144934" label="[14:49:34]">&lt;amirouche&gt;</a></span><span class="message">it is slow.</span></div><div class="line" id="145125"><span class="nick" style="color:#8dd3c7"><a href="#145125" label="[14:51:25]">&lt;oriansj&gt;</a></span><span class="message">amirouche: So the only meaningful difference is on Linux where the kernel is that of the host system.</span></div><div class="line" id="145606"><span class="nick" style="color:#2e2a4a"><a href="#145606" label="[14:56:06]">&lt;stikonas&gt;</a></span><span class="message">yeah, on linux it's basically chroot + some namespaces (e.g. process namespace)</span></div><div class="line" id="145615"><span class="nick" style="color:#3c5b35"><a href="#145615" label="[14:56:15]">&lt;amirouche&gt;</a></span><span class="message">I am not sure I understand. And I forgot about the name of the syscalls used by docker, and lxc/lxd. lightweight vm such as docker, will not emulate anything, it is somekind of sandbox everything it has access to is given to it by the kernel.</span></div><div class="line" id="145615"><span class="nick" style="color:#2e2a4a"><a href="#145615" label="[14:56:15]">&lt;stikonas&gt;</a></span><span class="message">so it runs at near native performance</span></div><div class="line" id="145635"><span class="nick" style="color:#3c5b35"><a href="#145635" label="[14:56:35]">&lt;amirouche&gt;</a></span><span class="message">it is somekind of chroot.</span></div><div class="line" id="145645"><span class="nick" style="color:#3c5b35"><a href="#145645" label="[14:56:45]">&lt;amirouche&gt;</a></span><span class="message">and bsd jail.</span></div><div class="line" id="145915"><span class="nick" style="color:#2e2a4a"><a href="#145915" label="[14:59:15]">&lt;stikonas&gt;</a></span><span class="message">yes, so docker uses pid namespace (for process isolation), net namespace(managing network interfaces), ipc namepsace, mount namespace and some uts namespace which I'm not fully sure about</span></div><div class="line" id="145936"><span class="nick" style="color:#2e2a4a"><a href="#145936" label="[14:59:36]">&lt;stikonas&gt;</a></span><span class="message">I think podman on top that uses user namespaces that allows it to run without root unlike docker</span></div><div class="line" id="150031"><span class="nick" style="color:#3c5b35"><a href="#150031" label="[15:00:31]">&lt;amirouche&gt;</a></span><span class="message">podman runs without a daemon started by pid 1, unlike docker.</span></div><div class="line" id="150046"><span class="nick" style="color:#3c5b35"><a href="#150046" label="[15:00:46]">&lt;amirouche&gt;</a></span><span class="message">docker can be used by a user inside the correct group.</span></div><div class="line" id="150048"><span class="nick" style="color:#2e2a4a"><a href="#150048" label="[15:00:48]">&lt;stikonas&gt;</a></span><span class="message">well, yes, that's one difference</span></div><div class="line" id="150100"><span class="nick" style="color:#2e2a4a"><a href="#150100" label="[15:01:00]">&lt;stikonas&gt;</a></span><span class="message">but having no daemon also allows running without root</span></div><div class="line" id="150145"><span class="nick" style="color:#3c5b35"><a href="#150145" label="[15:01:45]">&lt;amirouche&gt;</a></span><span class="message">I believe docker runs with a daemon is an historical artifact, because before now, they were no way to access the syscalls as a regular user.</span></div><div class="line" id="150930"><span class="nick" style="color:#8dd3c7"><a href="#150930" label="[15:09:30]">&lt;oriansj&gt;</a></span><span class="message">so a docker image for live-bootstrap wouldn't be a freedom issue (even guix produces docker images) but rather one requiring someone to choose to put in the effort required.</span></div><div class="line" id="151138"><span class="nick" style="color:#2e2a4a"><a href="#151138" label="[15:11:38]">&lt;stikonas&gt;</a></span><span class="message">I would think docker image for live-bootstrap is just development aid, just like chroot</span></div><div class="line" id="151200"><span class="nick" style="color:#2e2a4a"><a href="#151200" label="[15:12:00]">&lt;stikonas&gt;</a></span><span class="message">as end-user if you want to do bootstrap, you run it on real hardware instead</span></div><div class="line" id="151215"><span class="nick" style="color:#2e2a4a"><a href="#151215" label="[15:12:15]">&lt;stikonas&gt;</a></span><span class="message">as developer, it might be easier to develop on chroot or inside container</span></div><div class="line" id="151244"><span class="nick" style="color:#2e2a4a"><a href="#151244" label="[15:12:44]">&lt;stikonas&gt;</a></span><span class="message">and distros also usually build either in chroot or inside container</span></div><div class="line" id="151305"><span class="nick" style="color:#2e2a4a"><a href="#151305" label="[15:13:05]">&lt;stikonas&gt;</a></span><span class="message">anyway, it's probably not too much of an effort to produce docker image</span></div><div class="line" id="151354"><span class="nick" style="color:#2e2a4a"><a href="#151354" label="[15:13:54]">&lt;stikonas&gt;</a></span><span class="message">basically we already have contents of what should be inside docker image (same thing as elsewhere, e.g. inside initramfs)</span></div><div class="line" id="151409"><span class="nick" style="color:#2e2a4a"><a href="#151409" label="[15:14:09]">&lt;stikonas&gt;</a></span><span class="message">just need to add a tiny bit of metadata to specify what process we want to start</span></div><div class="line" id="151420"><span class="nick" style="color:#2e2a4a"><a href="#151420" label="[15:14:20]">&lt;stikonas&gt;</a></span><span class="message">so I think it's a junior job</span></div><div class="line" id="151539"><span class="nick" style="color:#3c5b35"><a href="#151539" label="[15:15:39]">&lt;amirouche&gt;</a></span><span class="message">guix produce docker image and can use the linux syscall itself. but the problem (imo) of docker, is that it is fake sandbox, it is not meant to enable new features for the endusers, it was meant to do &quot;like chroot a little less broken&quot;..</span></div><div class="line" id="151619"><span class="nick" style="color:#3c5b35"><a href="#151619" label="[15:16:19]">&lt;amirouche&gt;</a></span><span class="message">being able to run docker images is somewhat a freedom issue imo.</span></div><div class="line" id="151630"><span class="nick" style="color:#3c5b35"><a href="#151630" label="[15:16:30]">&lt;amirouche&gt;</a></span><span class="message">guix can not run docker images without docker.</span></div><div class="line" id="151653"><span class="nick" style="color:#8dd3c7"><a href="#151653" label="[15:16:53]">&lt;oriansj&gt;</a></span><span class="message">Apache License 2.0 (Community Edition) <a rel="nofollow" href="https://en.wikipedia.org/wiki/Docker_">https://en.wikipedia.org/wiki/Docker_</a>(software) </span></div><div class="line" id="151737"><span class="nick" style="color:#8dd3c7"><a href="#151737" label="[15:17:37]">&lt;oriansj&gt;</a></span><span class="message">and from what I understand the Windows binaries are also proprietary.</span></div><div class="line" id="151748"><span class="nick" style="color:#3c5b35"><a href="#151748" label="[15:17:48]">&lt;amirouche&gt;</a></span><span class="message">i mean, you can but you need to re-implement docker. yes. that is my minimalist pov (sorry for the noise)</span></div><div class="line" id="151806"><span class="nick" style="color:#8dd3c7"><a href="#151806" label="[15:18:06]">&lt;oriansj&gt;</a></span><span class="message">So I don't disagree that there are freedome issues for Windows and MacOSX users of docker.</span></div><div class="line" id="152037"><span class="nick" style="color:#8dd3c7"><a href="#152037" label="[15:20:37]">&lt;oriansj&gt;</a></span><span class="message">Hence my suggestion that isn't something we should feel that we should do but it isn't also something we should reject if someone shows up and is willing to contribute that work.</span></div><div class="line" id="152157"><span class="nick" style="color:#d9d9d9"><a href="#152157" label="[15:21:57]">&lt;siraben&gt;</a></span><span class="message">oriansj: I agree.</span></div><div class="line" id="152221"><span class="nick" style="color:#d9d9d9"><a href="#152221" label="[15:22:21]">&lt;siraben&gt;</a></span><span class="message">I brought this up because I wanted to make it more accessible to more developers, even if we here choose not to use docker</span></div><div class="line" id="152255"><span class="nick" style="color:#d9d9d9"><a href="#152255" label="[15:22:55]">&lt;siraben&gt;</a></span><span class="message">Currently what are the dependencies to run live-bootstrap?</span></div><div class="line" id="152408"><span class="nick" style="color:#8dd3c7"><a href="#152408" label="[15:24:08]">&lt;oriansj&gt;</a></span><span class="message">siraben: literally nothing except a posix kernel</span></div><div class="line" id="152435"><span class="nick" style="color:#d9d9d9"><a href="#152435" label="[15:24:35]">&lt;siraben&gt;</a></span><span class="message">and qemu, right?</span></div><div class="line" id="152459"><span class="nick" style="color:#8dd3c7"><a href="#152459" label="[15:24:59]">&lt;oriansj&gt;</a></span><span class="message">siraben: only needed if you wish to virtualize the execution</span></div><div class="line" id="152507"><span class="nick" style="color:#8dd3c7"><a href="#152507" label="[15:25:07]">&lt;oriansj&gt;</a></span><span class="message">a chroot would be sufficient</span></div><div class="line" id="152609"><span class="nick" style="color:#8dd3c7"><a href="#152609" label="[15:26:09]">&lt;oriansj&gt;</a></span><span class="message">but the chroot isn't actually required either.</span></div><div class="line" id="152723"><span class="nick" style="color:#8dd3c7"><a href="#152723" label="[15:27:23]">&lt;oriansj&gt;</a></span><span class="message">as all the steps can be done outside of total isolation but they are done in isolation to prevent your development environment to contaminate the build results.</span></div><div class="line" id="152921"><span class="nick" style="color:#80b1d3"><a href="#152921" label="[15:29:21]">&lt;Hagfish&gt;</a></span><span class="message">stikonas: thanks for refreshing my memory about gnulib. am i right in thinking that patch and gettext are using 3 different versions of gnulib?</span></div><div class="line" id="152929"><span class="nick" style="color:#d9d9d9"><a href="#152929" label="[15:29:29]">&lt;siraben&gt;</a></span><span class="message">Where can I get the kernel that's requried? vmlinuz</span></div><div class="line" id="152951"><span class="nick" style="color:#80b1d3"><a href="#152951" label="[15:29:51]">&lt;Hagfish&gt;</a></span><span class="message">stikonas: err, actually, i think sysa.py is missing a comment on line 498?</span></div><div class="line" id="153029"><span class="nick" style="color:#8dd3c7"><a href="#153029" label="[15:30:29]">&lt;oriansj&gt;</a></span><span class="message">siraben: vmlinuz will work but so should any reasonable posix kernel.</span></div><div class="line" id="153050"><span class="nick" style="color:#d9d9d9"><a href="#153050" label="[15:30:50]">&lt;siraben&gt;</a></span><span class="message">oriansj: right, but I was wondering where to get it</span></div><div class="line" id="153116"><span class="nick" style="color:#8dd3c7"><a href="#153116" label="[15:31:16]">&lt;oriansj&gt;</a></span><span class="message">siraben: /boot/ ?</span></div><div class="line" id="153148"><span class="nick" style="color:#d9d9d9"><a href="#153148" label="[15:31:48]">&lt;siraben&gt;</a></span><span class="message">hm, I'll check for NixOS, /boot doesn't exist</span></div><div class="line" id="153313"><span class="nick" style="color:#8dd3c7"><a href="#153313" label="[15:33:13]">&lt;oriansj&gt;</a></span><span class="message">siraben: and here I was just going to point out: <a rel="nofollow" href="https://packages.debian.org/buster/linux-base">https://packages.debian.org/buster/linux-base</a> </span></div><div class="line" id="153406"><span class="nick" style="color:#d9d9d9"><a href="#153406" label="[15:34:06]">&lt;siraben&gt;</a></span><span class="message">pinging Melg8 as well, I think they would know how to get it to work on NixOS</span></div><div class="line" id="153600"><span class="nick" style="color:#af8d2f"><a href="#153600" label="[15:36:00]">&lt;Melg8&gt;</a></span><span class="message">that's example how i used qemu with 4.4 kernel &quot; nix-shell -I nixpkgs=channel:nixpkgs-unstable -p python3 python38Packages.requests qemu linuxPackages_4_4.kernel&quot; -just using nix shell -</span></div><div class="line" id="153634"><span class="nick" style="color:#af8d2f"><a href="#153634" label="[15:36:34]">&lt;Melg8&gt;</a></span><span class="message">&quot;sudo nix-shell -I nixpkgs=channel:nixpkgs-unstable -p python3 python38Packages.requests qemu linuxPackages_4_4.kernel --run 'python3 ./rootfs.py --kernel /nix/store/kg5wa8hww2g6zc03yas7llbzrbip4b5b-linux-4.4.267/bzImage --force_timestamps --tmpdir ./temp'&quot;</span></div><div class="line" id="153643"><span class="nick" style="color:#af8d2f"><a href="#153643" label="[15:36:43]">&lt;Melg8&gt;</a></span><span class="message">that with execution of command</span></div><div class="line" id="153807"><span class="nick" style="color:#af8d2f"><a href="#153807" label="[15:38:07]">&lt;Melg8&gt;</a></span><span class="message">siraben is it what you asked about?</span></div><div class="line" id="153827"><span class="nick" style="color:#d9d9d9"><a href="#153827" label="[15:38:27]">&lt;siraben&gt;</a></span><span class="message">Melg8: thanks, I'll try that</span></div><div class="line" id="153920"><span class="nick" style="color:#8dd3c7"><a href="#153920" label="[15:39:20]">&lt;oriansj&gt;</a></span><span class="message">hmm. looks like the sha256sum doesn't work quite right on 64bit targets. guess I need to fix that</span></div><div class="line" id="154307"><span class="nick" style="color:#2e2a4a"><a href="#154307" label="[15:43:07]">&lt;stikonas&gt;</a></span><span class="message">Hagfish: yes, everything uses its own version of gnulib</span></div><div class="line" id="154318"><span class="nick" style="color:#2e2a4a"><a href="#154318" label="[15:43:18]">&lt;stikonas&gt;</a></span><span class="message">the version that maintainers used when they made releases</span></div><div class="line" id="154352"><span class="nick" style="color:#2e2a4a"><a href="#154352" label="[15:43:52]">&lt;stikonas&gt;</a></span><span class="message">oh yes, comment is missing</span></div><div class="line" id="154357"><span class="nick" style="color:#2e2a4a"><a href="#154357" label="[15:43:57]">&lt;stikonas&gt;</a></span><span class="message">I think I can just push the comment</span></div><div class="line" id="154400"><span class="nick" style="color:#2e2a4a"><a href="#154400" label="[15:44:00]">&lt;stikonas&gt;</a></span><span class="message">without PR...</span></div><div class="line" id="154409"><span class="nick" style="color:#2e2a4a"><a href="#154409" label="[15:44:09]">&lt;stikonas&gt;</a></span><span class="message">fossy: didn't spot it in the review...</span></div><div class="line" id="154554"><span class="nick" style="color:#2e2a4a"><a href="#154554" label="[15:45:54]">&lt;stikonas&gt;</a></span><span class="message">Hagfish: thanks for spotting missing comment</span></div><div class="line" id="154721"><span class="nick" style="color:#2e2a4a"><a href="#154721" label="[15:47:21]">&lt;stikonas&gt;</a></span><span class="message">siraben: well, for preparing initial initramfs we use python as well</span></div><div class="line" id="154724"><span class="nick" style="color:#2e2a4a"><a href="#154724" label="[15:47:24]">&lt;stikonas&gt;</a></span><span class="message">that rootfs.py script</span></div><div class="line" id="154735"><span class="nick" style="color:#2e2a4a"><a href="#154735" label="[15:47:35]">&lt;stikonas&gt;</a></span><span class="message">but for running live-bootstrap, kernel is the only dependency</span></div><div class="line" id="154837"><span class="nick" style="color:#389600"><a href="#154837" label="[15:48:37]">&lt;nimaje&gt;</a></span><span class="message">why does rootfs.py use sudo to find the chroot binary? and why does it shell out to python for that instead of just run('which' 'chroot') or using that python code directly or just ignoring the absoulte path of chroot and simply calling it?</span></div><div class="line" id="155003"><span class="nick" style="color:#389600"><a href="#155003" label="[15:50:03]">&lt;nimaje&gt;</a></span><span class="message">(ok, it needs the absolute path because PATH gets set to just /bin)</span></div><div class="line" id="155440"><span class="nick" style="color:#d9d9d9"><a href="#155440" label="[15:54:40]">&lt;siraben&gt;</a></span><span class="message">`sudo: unable to stat /etc/sudoers: No such file or directory` hmm</span></div><div class="line" id="155525"><span class="nick" style="color:#d9d9d9"><a href="#155525" label="[15:55:25]">&lt;siraben&gt;</a></span><span class="message">I'm trying to run Melg8's commands in a docker image running NixOS</span></div><div class="line" id="155643"><span class="nick" style="color:#af8d2f"><a href="#155643" label="[15:56:43]">&lt;Melg8&gt;</a></span><span class="message">if you run there as root already maybe sudo is not needed?</span></div><div class="line" id="155659"><span class="nick" style="color:#d9d9d9"><a href="#155659" label="[15:56:59]">&lt;siraben&gt;</a></span><span class="message">Ok got past that by adding a sudoers and adding sudo to my shell</span></div><div class="line" id="155703"><span class="nick" style="color:#d9d9d9"><a href="#155703" label="[15:57:03]">&lt;siraben&gt;</a></span><span class="message">new error: `sudo: unable to initialize PAM: Critical error - immediate abort`</span></div><div class="line" id="155727"><span class="nick" style="color:#d9d9d9"><a href="#155727" label="[15:57:27]">&lt;siraben&gt;</a></span><span class="message">nimaje: yeah, it using sudo is a problem when sudo is not installed</span></div><div class="line" id="155859"><span class="nick" style="color:#3c5b35"><a href="#155859" label="[15:58:59]">&lt;amirouche&gt;</a></span><span class="message">robotux: forget about #lisp</span></div><div class="line" id="155917"><span class="nick" style="color:#3c5b35"><a href="#155917" label="[15:59:17]">&lt;amirouche&gt;</a></span><span class="message">I mean those you speak too are not interested in your project.</span></div><div class="line" id="160038"><span class="nick" style="color:#8dd3c7"><a href="#160038" label="[16:00:38]">&lt;Melg8[m]&gt;</a></span><span class="message">forget</span></div><div class="line" id="160039"><span class="nick" style="color:#389600"><a href="#160039" label="[16:00:39]">&lt;nimaje&gt;</a></span><span class="message">well, I complain about it using sudo where it don't need it</span></div><div class="line" id="160121"><span class="nick" style="color:#8dd3c7"><a href="#160121" label="[16:01:21]">&lt;Melg8[m]&gt;</a></span><span class="message">sorry xD i was trying to find original post with &quot;forget&quot; in it through element.io) and instead posted this word))</span></div><div class="line" id="161608"><span class="nick" style="color:#2e2a4a"><a href="#161608" label="[16:16:08]">&lt;stikonas&gt;</a></span><span class="message">nimaje: because some distros put chroot in sbin</span></div><div class="line" id="161620"><span class="nick" style="color:#2e2a4a"><a href="#161620" label="[16:16:20]">&lt;stikonas&gt;</a></span><span class="message">so if you don't use sudo to find chroot, it might not be in PATH</span></div><div class="line" id="161723"><span class="nick" style="color:#2e2a4a"><a href="#161723" label="[16:17:23]">&lt;stikonas&gt;</a></span><span class="message">if you are already root, just remove that sudo prefix form rootfs.py</span></div><div class="line" id="161741"><span class="nick" style="color:#2e2a4a"><a href="#161741" label="[16:17:41]">&lt;stikonas&gt;</a></span><span class="message">(probably also from the place where tmpfs is mounted)</span></div><div class="line" id="161857"><span class="nick" style="color:#2e2a4a"><a href="#161857" label="[16:18:57]">&lt;stikonas&gt;</a></span><span class="message">nimaje: or you can write a patch to only search with sudo if search without sudo does not find anything</span></div><div class="line" id="161908"><span class="nick" style="color:#2e2a4a"><a href="#161908" label="[16:19:08]">&lt;stikonas&gt;</a></span><span class="message">that should be fairly easy too</span></div><div class="line" id="162032"><span class="nick" style="color:#80b1d3"><a href="#162032" label="[16:20:32]">&lt;Hagfish&gt;</a></span><span class="message">stikonas: i'm glad my review was helpful.  i wish i could suggest more important fixes, but you keep writing such good code, it doesn't leave much room for improvement :)</span></div><div class="line" id="162100"><span class="nick" style="color:#80b1d3"><a href="#162100" label="[16:21:00]">&lt;Hagfish&gt;</a></span><span class="message">how did you discover what the correct versions of gnulib were for each step?</span></div><div class="line" id="162116"><span class="nick" style="color:#80b1d3"><a href="#162116" label="[16:21:16]">&lt;Hagfish&gt;</a></span><span class="message">they're not even sequentially ordered (at least in terms of filenames)</span></div><div class="line" id="162137"><span class="nick" style="color:#389600"><a href="#162137" label="[16:21:37]">&lt;nimaje&gt;</a></span><span class="message">ok, live-bootsrap chroot mode only works if the kernel can execute linux binaries</span></div><div class="line" id="163555"><span class="nick" style="color:#2e2a4a"><a href="#163555" label="[16:35:55]">&lt;stikonas&gt;</a></span><span class="message">Hagfish: usually its just going to git repo and checking what version gnulib git submodule is checked out</span></div><div class="line" id="163635"><span class="nick" style="color:#2e2a4a"><a href="#163635" label="[16:36:35]">&lt;stikonas&gt;</a></span><span class="message">in case of texinfo, there was no gnulib submodule, so I just found commit by date</span></div><div class="line" id="163651"><span class="nick" style="color:#2e2a4a"><a href="#163651" label="[16:36:51]">&lt;stikonas&gt;</a></span><span class="message">nimaje: not just chroot, also for qemu, kernel has to understand elf binaries</span></div><div class="line" id="163701"><span class="nick" style="color:#2e2a4a"><a href="#163701" label="[16:37:01]">&lt;stikonas&gt;</a></span><span class="message">hex0, etc are elf binaries</span></div><div class="line" id="163723"><span class="nick" style="color:#2e2a4a"><a href="#163723" label="[16:37:23]">&lt;stikonas&gt;</a></span><span class="message">for other kernels, you would have to replace elf header with approprate other header</span></div><div class="line" id="163952"><span class="nick" style="color:#80b1d3"><a href="#163952" label="[16:39:52]">&lt;Hagfish&gt;</a></span><span class="message">stikonas: i guess it wouldn't make sense to try to generate those version &quot;numbers&quot; programmatically?  it would make the numbers less magic, but be more indirect/fragile, right?</span></div><div class="line" id="163954"><span class="nick" style="color:#389600"><a href="#163954" label="[16:39:54]">&lt;nimaje&gt;</a></span><span class="message">I trought qemu runs some other kernel, so it doesn't matter what the host is as long as the kernel executed by qemu can execute linux binaries</span></div><div class="line" id="164111"><span class="nick" style="color:#2e2a4a"><a href="#164111" label="[16:41:11]">&lt;stikonas&gt;</a></span><span class="message">those version numbers are just commit hashes</span></div><div class="line" id="164117"><span class="nick" style="color:#2e2a4a"><a href="#164117" label="[16:41:17]">&lt;stikonas&gt;</a></span><span class="message">so I don't think we want to generate them</span></div><div class="line" id="164120"><span class="nick" style="color:#2e2a4a"><a href="#164120" label="[16:41:20]">&lt;stikonas&gt;</a></span><span class="message">it's just like any other version</span></div><div class="line" id="164140"><span class="nick" style="color:#2e2a4a"><a href="#164140" label="[16:41:40]">&lt;stikonas&gt;</a></span><span class="message">nimaje: yes, qemu runs some other kernel indeed, but I mean if you supply it with non-linux kernel</span></div><div class="line" id="164153"><span class="nick" style="color:#2e2a4a"><a href="#164153" label="[16:41:53]">&lt;stikonas&gt;</a></span><span class="message">it would be the same as chroot on non-linux kernel</span></div><div class="line" id="164310"><span class="nick" style="color:#80b1d3"><a href="#164310" label="[16:43:10]">&lt;Hagfish&gt;</a></span><span class="message">stikonas: i've never really been a fan of non-sequential version numbering systems, because it feels like it lacks critical information, but i guess all version numbers are arbitrary in some sense</span></div><div class="line" id="164607"><span class="nick" style="color:#80b1d3"><a href="#164607" label="[16:46:07]">&lt;Hagfish&gt;</a></span><span class="message">if i see a dependency on, say, gcc v7.x, where i'm expecting gcc v3.x, then i know something is wrong, but if i see gnulib a8b93e instead of 9b3d1a then that's not human readable</span></div><div class="line" id="164637"><span class="nick" style="color:#80b1d3"><a href="#164637" label="[16:46:37]">&lt;Hagfish&gt;</a></span><span class="message">that's not your fault, of course, it's just something that gnulib makes harder</span></div><div class="line" id="164700"><span class="nick" style="color:#389600"><a href="#164700" label="[16:47:00]">&lt;nimaje&gt;</a></span><span class="message">why didn't they use some release of gnulib? or does gnulib not do releases?</span></div><div class="line" id="164726"><span class="nick" style="color:#80b1d3"><a href="#164726" label="[16:47:26]">&lt;Hagfish&gt;</a></span><span class="message">hmm, good question</span></div><div class="line" id="165449"><span class="nick" style="color:#2e2a4a"><a href="#165449" label="[16:54:49]">&lt;stikonas&gt;</a></span><span class="message">well, nothing you can do, that's how git works. You can't assign stable version numbers to git</span></div><div class="line" id="165501"><span class="nick" style="color:#2e2a4a"><a href="#165501" label="[16:55:01]">&lt;stikonas&gt;</a></span><span class="message">nimaje: gnulib is not released</span></div><div class="line" id="165503"><span class="nick" style="color:#2e2a4a"><a href="#165503" label="[16:55:03]">&lt;stikonas&gt;</a></span><span class="message">it's not meant to</span></div><div class="line" id="165518"><span class="nick" style="color:#2e2a4a"><a href="#165518" label="[16:55:18]">&lt;stikonas&gt;</a></span><span class="message">you are meant to include some modules from gnulib in your tarball</span></div><div class="line" id="165524"><span class="nick" style="color:#389600"><a href="#165524" label="[16:55:24]">&lt;nimaje&gt;</a></span><span class="message">and how do you debug mes in live-bootsrap (chroot mode on freebsd with linuxemu stuff loaded)? only getting &quot;Subprocess error 139&quot; isn't really helpful (seems like it tries to compile tcc)</span></div><div class="line" id="165659"><span class="nick" style="color:#2e2a4a"><a href="#165659" label="[16:56:59]">&lt;stikonas&gt;</a></span><span class="message">hmm, is that when process exits with non-zero exit code?</span></div><div class="line" id="165715"><span class="nick" style="color:#2e2a4a"><a href="#165715" label="[16:57:15]">&lt;stikonas&gt;</a></span><span class="message">you can always try to use gdb for debugging</span></div><div class="line" id="165730"><span class="nick" style="color:#2e2a4a"><a href="#165730" label="[16:57:30]">&lt;stikonas&gt;</a></span><span class="message">although, by default compiled binaries have no debug symbols</span></div><div class="line" id="165830"><span class="nick" style="color:#389600"><a href="#165830" label="[16:58:30]">&lt;nimaje&gt;</a></span><span class="message">139 should be a segfault</span></div><div class="line" id="170420"><span class="nick" style="color:#2e2a4a"><a href="#170420" label="[17:04:20]">&lt;stikonas&gt;</a></span><span class="message">if it's segfault, then I guess try to add debug flags and use gdb</span></div><div class="line" id="170502"><span class="nick" style="color:#2e2a4a"><a href="#170502" label="[17:05:02]">&lt;stikonas&gt;</a></span><span class="message">I don't think anybody tried live-bootstrap on freebsd, maybe m2planet only</span></div><div class="line" id="171057"><span class="nick" style="color:#389600"><a href="#171057" label="[17:10:57]">&lt;nimaje&gt;</a></span><span class="message">(ah, yes lldb on freebsd can't really debug i386 linux binaries :(; trying to run the program step for step segfaults lldb), but I think the  normal run is okish, and that says signal SIGSEGV: invalid address (fault address: 0x4749464e)</span></div><div class="line" id="184748"><span class="nick" style="color:#8dd3c7"><a href="#184748" label="[18:47:48]">&lt;oriansj&gt;</a></span><span class="message">Hagfish: The reason why the ELF headers are all hand written and not generated is because different architectures interpret the ELF spec differently. For example PowerPC64LE instead of putting the e_entry address in the e_entry field, it puts the address where the e_entry address can be found in the binary (In complete and total violation of the ELF standard) because that is how AIX does it.</span></div><div class="line" id="184951"><span class="nick" style="color:#8dd3c7"><a href="#184951" label="[18:49:51]">&lt;oriansj&gt;</a></span><span class="message">The asme reason why binutils spends 800+ lines of code just dealing with ELF headers.</span></div><div class="line" id="185024"><span class="nick" style="color:#2e2a4a"><a href="#185024" label="[18:50:24]">&lt;xentrac&gt;</a></span><span class="message">shame on AIX</span></div><div class="line" id="185100"><span class="nick" style="color:#8dd3c7"><a href="#185100" label="[18:51:00]">&lt;oriansj&gt;</a></span><span class="message">and HP-UX and Digital Unix and Xenix.</span></div><div class="line" id="185116"><span class="nick" style="color:#2e2a4a"><a href="#185116" label="[18:51:16]">&lt;xentrac&gt;</a></span><span class="message">ugh</span></div><div class="line" id="185144"><span class="nick" style="color:#8dd3c7"><a href="#185144" label="[18:51:44]">&lt;oriansj&gt;</a></span><span class="message">fuckit let us just blame every Unix that was sold.</span></div><div class="line" id="185153"><span class="nick" style="color:#2e2a4a"><a href="#185153" label="[18:51:53]">&lt;xentrac&gt;</a></span><span class="message">or not sold</span></div><div class="line" id="185239"><span class="nick" style="color:#8dd3c7"><a href="#185239" label="[18:52:39]">&lt;oriansj&gt;</a></span><span class="message">The BSDs and Linux for allowing that stupidity infect them.</span></div><div class="line" id="191020"><span class="nick" style="color:#80b1d3"><a href="#191020" label="[19:10:20]">&lt;Hagfish&gt;</a></span><span class="message">oriansj: interesting, thank you, but i wasn't asking about ELF headers</span></div><div class="line" id="191133"><span class="nick" style="color:#80b1d3"><a href="#191133" label="[19:11:33]">&lt;Hagfish&gt;</a></span><span class="message">if you have thoughts about how to make version numbers less opaque (especially when they are just commit hashes), i'd be interested to hear about that too</span></div><div class="line" id="191227"><span class="nick" style="color:#80b1d3"><a href="#191227" label="[19:12:27]">&lt;Hagfish&gt;</a></span><span class="message">to some extent, the code is saying &quot;these are the versions we found, and they work&quot;, which is self-documenting</span></div><div class="line" id="191605"><span class="nick" style="color:#2e2a4a"><a href="#191605" label="[19:16:05]">&lt;stikonas&gt;</a></span><span class="message">well, you can always fork gnulib and add tags...</span></div><div class="line" id="191749"><span class="nick" style="color:#80b1d3"><a href="#191749" label="[19:17:49]">&lt;Hagfish&gt;</a></span><span class="message">hmm, that's an interesting alternative</span></div><div class="line" id="191925"><span class="nick" style="color:#80b1d3"><a href="#191925" label="[19:19:25]">&lt;Hagfish&gt;</a></span><span class="message">or have a script-generated file which fills out a lookup table of tags and commits?</span></div><div class="line" id="192008"><span class="nick" style="color:#80b1d3"><a href="#192008" label="[19:20:08]">&lt;Hagfish&gt;</a></span><span class="message">that's really over-engineered for something that isn't really a problem, but it's helpful for me to think about</span></div><div class="line" id="192254"><span class="nick" style="color:#80b1d3"><a href="#192254" label="[19:22:54]">&lt;Hagfish&gt;</a></span><span class="message">any process that tries to add back the missing semantic information is necessarily going to add some indirection, and i don't think there is a way to reduce the complexity of that misdirection sufficiently to justify the information gain</span></div><div class="line" id="195212"><span class="nick" style="color:#80b1d3"><a href="#195212" label="[19:52:12]">&lt;Hagfish&gt;</a></span><span class="message">actually, the gettext-0.21.tar.xz tarball contains a gnulib-local directory, whose most recently touched file is from 2020-07-26, which is the same date as commit 7daa86f of gnulib</span></div><div class="line" id="195319"><span class="nick" style="color:#80b1d3"><a href="#195319" label="[19:53:19]">&lt;Hagfish&gt;</a></span><span class="message">that's a bit of a fuzzy process, and probably wasn't how that version was found, but it's interesting that there is this trail in the artefacts themselves</span></div><div class="line" id="201629"><span class="nick" style="color:#2e2a4a"><a href="#201629" label="[20:16:29]">&lt;stikonas&gt;</a></span><span class="message">no, I just looked at git logs...</span></div><div class="line" id="205052"><span class="nick" style="color:#2e2a4a"><a href="#205052" label="[20:50:52]">&lt;xentrac&gt;</a></span><span class="message"> <a rel="nofollow" href="https://spectrum.ieee.org/geek-life/hands-on/build-a-riscv-cpu-from-scratch">https://spectrum.ieee.org/geek-life/hands-on/build-a-riscv-cpu-from-scratch</a>  is a pretty interesting project; the &quot;Pineapple One&quot; RISC-V CPU on nine circuit boards.  but he's only gotten it to 500kHz</span></div><div class="line" id="205128"><span class="nick" style="color:#2e2a4a"><a href="#205128" label="[20:51:28]">&lt;xentrac&gt;</a></span><span class="message">mostly 74HCT SSI chips</span></div><div class="line" id="205244"><span class="nick" style="color:#80b1d3"><a href="#205244" label="[20:52:44]">&lt;Hagfish&gt;</a></span><span class="message">stikonas: i probably trust your human judgement more than a script, but if you felt that the process you used was time consuming or error-prone, you could consider writing a script next time</span></div><div class="line" id="205309"><span class="nick" style="color:#80b1d3"><a href="#205309" label="[20:53:09]">&lt;Hagfish&gt;</a></span><span class="message">after all, why repeat a 3 minute task 5 times, when you could spend an hour writing a script to do it for you? :D</span></div><div class="line" id="214630"><span class="nick" style="color:#234e69"><a href="#214630" label="[21:46:30]">&lt;mihi&gt;</a></span><span class="message">oriansj, would you accept a PR for mescc-tools-extra with test cases for sha256sum and sha3sum that uses perl for generating one test case? <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-extra/compare/master...schierlm:hashes?expand=1#diff-3722d9ba8feb2d3feac8ce71a209a638d4b404e1c53f937188761181594023e2R28">https://github.com/oriansj/mescc-tools-extra/compare/master...schierlm:hashes?expand=1#diff-3722d9ba8feb2d3feac8ce71a209a638d4b404e1c53f937188761181594023e2R28</a> </span></div><div class="line" id="214654"><span class="nick" style="color:#234e69"><a href="#214654" label="[21:46:54]">&lt;mihi&gt;</a></span><span class="message">I can also use repeated use of cat if you prefer that (test vector is 1 million letter &quot;a&quot;)</span></div><div class="line" id="214751"><span class="nick" style="color:#234e69"><a href="#214751" label="[21:47:51]">&lt;mihi&gt;</a></span><span class="message">(that branch is WIP, will have to verify that I did not break M2-Planet build first, on a machine/VM where M2-Planet compiled binaries can run)</span></div><div class="line" id="215950"><span class="nick" style="color:#2e2a4a"><a href="#215950" label="[21:59:50]">&lt;stikonas&gt;</a></span><span class="message">well, there is nothing bad with perl in general</span></div><div class="line" id="220011"><span class="nick" style="color:#2e2a4a"><a href="#220011" label="[22:00:11]">&lt;stikonas&gt;</a></span><span class="message">although, I haven't learned it myself</span></div><div class="line" id="220138"><span class="nick" style="color:#234e69"><a href="#220138" label="[22:01:38]">&lt;mihi&gt;</a></span><span class="message">perl is infamous for being a write-only language. But for one-liners I think it is ok. e.g. &quot;perl -e 'print chr for 32..127'&quot; to get all printable ASCII chars.</span></div><div class="line" id="220158"><span class="nick" style="color:#2e2a4a"><a href="#220158" label="[22:01:58]">&lt;xentrac&gt;</a></span><span class="message">yeah, perl is great for that kind of thing</span></div><div class="line" id="220259"><span class="nick" style="color:#234e69"><a href="#220259" label="[22:02:59]">&lt;mihi&gt;</a></span><span class="message">I also like that you can redefine string delimiters. Useful for pasting some text and having no need to escape. But I understand that if you don't know that feature, it will make the code really unreadable...</span></div><div class="line" id="220405"><span class="nick" style="color:#2e2a4a"><a href="#220405" label="[22:04:05]">&lt;stikonas&gt;</a></span><span class="message">well, a few months ago without knowing any perl I still managed to rewrite one perl program in awk (for live-bootstrap). And I think it was shorter than perl version</span></div><div class="line" id="220712"><span class="nick" style="color:#2e2a4a"><a href="#220712" label="[22:07:12]">&lt;xentrac&gt;</a></span><span class="message">mihi: it's also a pain to parse ;)</span></div><div class="line" id="220750"><span class="nick" style="color:#234e69"><a href="#220750" label="[22:07:50]">&lt;mihi&gt;</a></span><span class="message">xentrac, true. Both for computers and for humans.</span></div><div class="line" id="220828"><span class="nick" style="color:#2e2a4a"><a href="#220828" label="[22:08:28]">&lt;xentrac&gt;</a></span><span class="message">hah</span></div><div class="line" id="220940"><span class="nick" style="color:#2e2a4a"><a href="#220940" label="[22:09:40]">&lt;xentrac&gt;</a></span><span class="message">dunno, I think s/&lt;(\w+).*?&gt;/[\1]/g is a lot more readable than the Python equivalent</span></div><div class="line" id="221217"><span class="nick">***</span><span class="message notice">Noisytoot is now known as [[</span></div><div class="line" id="221702"><span class="nick">***</span><span class="message notice">[[ is now known as Noisytoot</span></div><div class="line" id="222151"><span class="nick" style="color:#234e69"><a href="#222151" label="[22:21:51]">&lt;mihi&gt;</a></span><span class="message">xentrac, perl -pe 's{&lt;(\w+).*?&gt;}([\1])g' still?</span></div><div class="line" id="223840"><span class="nick" style="color:#234e69"><a href="#223840" label="[22:38:40]">&lt;mihi&gt;</a></span><span class="message">oriansj, <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-extra/pull/1">https://github.com/oriansj/mescc-tools-extra/pull/1</a> </span></div><div class="line" id="224659"><span class="nick" style="color:#2e2a4a"><a href="#224659" label="[22:46:59]">&lt;xentrac&gt;</a></span><span class="message">mihi: I didn't know that was legal but the intent is clear</span></div><div class="line" id="225006"><span class="nick" style="color:#234e69"><a href="#225006" label="[22:50:06]">&lt;mihi&gt;</a></span><span class="message">xentrac, one I wrote in 2003: <a rel="nofollow" href="https://paste.debian.net/hidden/e3396e90/">https://paste.debian.net/hidden/e3396e90/</a> </span></div><div class="line" id="225100"><span class="nick" style="color:#2e2a4a"><a href="#225100" label="[22:51:00]">&lt;xentrac&gt;</a></span><span class="message">hahaha</span></div><div class="line" id="225228"><span class="nick" style="color:#234e69"><a href="#225228" label="[22:52:28]">&lt;mihi&gt;</a></span><span class="message">perl -MO=Deparse will give it away, though</span></div><div class="line" id="225255"><span class="nick" style="color:#2e2a4a"><a href="#225255" label="[22:52:55]">&lt;xentrac&gt;</a></span><span class="message">well, it's clear enough how it works</span></div><div class="line" id="225310"><span class="nick" style="color:#2e2a4a"><a href="#225310" label="[22:53:10]">&lt;xentrac&gt;</a></span><span class="message">but I did run it to figure out what it actually output</span></div><div class="line" id="225333"><span class="nick" style="color:#234e69"><a href="#225333" label="[22:53:33]">&lt;mihi&gt;</a></span><span class="message">then your perl knowledge is better than most people. alias y/ for tr/ seems to be quite obscure in my experience.</span></div><div class="line" id="225345"><span class="nick" style="color:#2e2a4a"><a href="#225345" label="[22:53:45]">&lt;xentrac&gt;</a></span><span class="message">oh, I think I used that last week</span></div><div class="line" id="225404"><span class="nick" style="color:#2e2a4a"><a href="#225404" label="[22:54:04]">&lt;xentrac&gt;</a></span><span class="message">saves a keystroke</span></div><div class="line" id="225442"><span class="nick" style="color:#234e69"><a href="#225442" label="[22:54:42]">&lt;mihi&gt;</a></span><span class="message">also the q.a...q.z. confuses many (redefining quote character to . is evil)</span></div><div class="line" id="225446"><span class="nick" style="color:#2e2a4a"><a href="#225446" label="[22:54:46]">&lt;xentrac&gt;</a></span><span class="message">it is :)</span></div><div class="line" id="225455"><span class="nick" style="color:#2e2a4a"><a href="#225455" label="[22:54:55]">&lt;xentrac&gt;</a></span><span class="message">but in context it was pretty clear</span></div><div class="line" id="225614"><span class="nick" style="color:#2e2a4a"><a href="#225614" label="[22:56:14]">&lt;xentrac&gt;</a></span><span class="message">y/// is undesirable when you're writing code for readability, but for an interactive shell oneliner it's just a minor shortcut</span></div><div class="line" id="225824"><span class="nick" style="color:#234e69"><a href="#225824" label="[22:58:24]">&lt;mihi&gt;</a></span><span class="message">once I submitted a perl oneliner (perl -e '$_=$ARGV[0];1while s/\(\)//;print+(/./?&quot;Not &quot;:&quot;&quot;).&quot;OK&quot;.$/;') for a computer science exercise. I'm curious if you can spot what problem it solved.</span></div><div class="line" id="230237"><span class="nick" style="color:#6b8072"><a href="#230237" label="[23:02:37]">&lt;drakonis&gt;</a></span><span class="message">this looks like it checks for accidental colon placement?</span></div><div class="line" id="230350"><span class="nick" style="color:#2e2a4a"><a href="#230350" label="[23:03:50]">&lt;xentrac&gt;</a></span><span class="message">it's recognizing balanced parens</span></div><div class="line" id="230509"><span class="nick" style="color:#234e69"><a href="#230509" label="[23:05:09]">&lt;mihi&gt;</a></span><span class="message">xentrac wins :) more particular, check whether the input string consists only of correctly nested parentheses.</span></div><div class="line" id="230511"><span class="nick" style="color:#2e2a4a"><a href="#230511" label="[23:05:11]">&lt;xentrac&gt;</a></span><span class="message">though I think the string-replacement mechanism it's using is actually Turing-complete, so using it to recognize a context-free language is maybe overkill (though I don't know of a better option in Perl 5)</span></div><div class="line" id="230609"><span class="nick" style="color:#2e2a4a"><a href="#230609" label="[23:06:09]">&lt;xentrac&gt;</a></span><span class="message">I mean of course it is Turing-complete if you have multiple pattern strings and corresponding replacements</span></div><div class="line" id="230632"><span class="nick" style="color:#234e69"><a href="#230632" label="[23:06:32]">&lt;mihi&gt;</a></span><span class="message">in particular, it is not the most efficient way, but it was definitely the shortest submission</span></div><div class="line" id="231006"><span class="nick" style="color:#2e2a4a"><a href="#231006" label="[23:10:06]">&lt;xentrac&gt;</a></span><span class="message">correctly nested parentheses and newlines outside any parentheses, to be more exact</span></div><div class="line" id="231042"><span class="nick" style="color:#2e2a4a"><a href="#231042" label="[23:10:42]">&lt;xentrac&gt;</a></span><span class="message">if you rule out extraneous characters such as &quot;\n&quot; and &quot;0&quot; then you could save yourself a stroke with $_? instead of /./?</span></div><div class="line" id="231338"><span class="nick" style="color:#2e2a4a"><a href="#231338" label="[23:13:38]">&lt;xentrac&gt;</a></span><span class="message">I've been toying with a compact PEG syntax that would represent that language as &lt;s ;'('&lt;s&gt;')'&gt;</span></div><div class="line" id="231457"><span class="nick" style="color:#234e69"><a href="#231457" label="[23:14:57]">&lt;mihi&gt;</a></span><span class="message">does that include expressions like '(()(())())'?</span></div><div class="line" id="231500"><span class="nick" style="color:#2e2a4a"><a href="#231500" label="[23:15:00]">&lt;xentrac&gt;</a></span><span class="message">yes</span></div><div class="line" id="231506"><span class="nick" style="color:#2e2a4a"><a href="#231506" label="[23:15:06]">&lt;xentrac&gt;</a></span><span class="message">&lt;foo&gt; is the nonterminal foo, &lt;foo bar&gt; is the nonterminal foo which is defined as bar, and foo;bar is one or more foos separated by bars, so foo+ becomes foo; and foo* becomes ;foo</span></div><div class="line" id="231523"><span class="nick" style="color:#234e69"><a href="#231523" label="[23:15:23]">&lt;mihi&gt;</a></span><span class="message">ah ok :)</span></div><div class="line" id="231525"><span class="nick" style="color:#2e2a4a"><a href="#231525" label="[23:15:25]">&lt;xentrac&gt;</a></span><span class="message">and concatenation and quotes work as you'd expect</span></div><div class="line" id="231557"><span class="nick" style="color:#2e2a4a"><a href="#231557" label="[23:15:57]">&lt;xentrac&gt;</a></span><span class="message">so s is defined as zero or more parenthesis pairs each containing s</span></div><div class="line" id="231644"><span class="nick" style="color:#234e69"><a href="#231644" label="[23:16:44]">&lt;mihi&gt;</a></span><span class="message">even more cryptic than Perl :)</span></div><div class="line" id="231716"><span class="nick" style="color:#234e69"><a href="#231716" label="[23:17:16]">&lt;mihi&gt;</a></span><span class="message">but yes I've been guilty of having significant whitespace in some of my toy scripting languages too</span></div><div class="line" id="231804"><span class="nick" style="color:#234e69"><a href="#231804" label="[23:18:04]">&lt;mihi&gt;</a></span><span class="message">probably you could replace &lt;foo bar&gt; by &lt;foo=bar&gt; or &lt;foo:=bar&gt; to make it more clear</span></div><div class="line" id="232145"><span class="nick" style="color:#2e2a4a"><a href="#232145" label="[23:21:45]">&lt;xentrac&gt;</a></span><span class="message">yeah, it doesn't have significant whitespace except in quotes; &lt; s; '(' &lt; s &gt; ')' &gt; means the same thing</span></div><div class="line" id="232204"><span class="nick" style="color:#2e2a4a"><a href="#232204" label="[23:22:04]">&lt;xentrac&gt;</a></span><span class="message">I did think about the = thing but decide that raised the line noise level even more</span></div><div class="line" id="232305"><span class="nick" style="color:#2e2a4a"><a href="#232305" label="[23:23:05]">&lt;xentrac&gt;</a></span><span class="message">actually no I didn't, or at least I don't have notes of having done so</span></div><br /></div></body></html>