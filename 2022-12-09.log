<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-12-09.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="021055"><span class="nick" style="color:#389600"><a href="#021055" label="[02:10:55]">&lt;pabs3&gt;</a></span><span class="message">HN discussion: <a rel="nofollow" href="https://news.ycombinator.com/item?id=33913231">https://news.ycombinator.com/item?id=33913231</a> </span></div><div class="line" id="022008"><span class="nick" style="color:#8dd3c7"><a href="#022008" label="[02:20:08]">&lt;stikonas[m]&gt;</a></span><span class="message">And again people post stuff without fact checking... &quot;and every modern distro relies on some bootstrap binary for C compilers anyway&quot;</span></div><div class="line" id="030215"><span class="nick" style="color:#2e2a4a"><a href="#030215" label="[03:02:15]">&lt;oriansj&gt;</a></span><span class="message">&quot;which attempts to bootstrap from just a very small hex interpreter&quot; shakes fist at &lt;.&lt;</span></div><div class="line" id="030226"><span class="nick" style="color:#2e2a4a"><a href="#030226" label="[03:02:26]">&lt;oriansj&gt;</a></span><span class="message">1) assembler not interpreter</span></div><div class="line" id="030234"><span class="nick" style="color:#2e2a4a"><a href="#030234" label="[03:02:34]">&lt;oriansj&gt;</a></span><span class="message">2) successfully did so</span></div><div class="line" id="030253"><span class="nick" style="color:#2e2a4a"><a href="#030253" label="[03:02:53]">&lt;oriansj&gt;</a></span><span class="message">3) we freaking bootstrapped GCC from that very small hex assember</span></div><div class="line" id="030303"><span class="nick" style="color:#2e2a4a"><a href="#030303" label="[03:03:03]">&lt;oriansj&gt;</a></span><span class="message">4) dick</span></div><div class="line" id="030655"><span class="nick" style="color:#2e2a4a"><a href="#030655" label="[03:06:55]">&lt;oriansj&gt;</a></span><span class="message">scratch 4 as this is probably needlessly rude</span></div><div class="line" id="035718"><span class="nick" style="color:#6b8072"><a href="#035718" label="[03:57:18]">&lt;muurkha&gt;</a></span><span class="message">heh</span></div><div class="line" id="095707"><span class="nick" style="color:#80b1d3"><a href="#095707" label="[09:57:07]">&lt;xd1le&gt;</a></span><span class="message">yeah HN comments about bootstrappability is painful to read</span></div><div class="line" id="132233"><span class="nick" style="color:#6d2462"><a href="#132233" label="[13:22:33]">&lt;alethkit&gt;</a></span><span class="message">Greetings. With the new changes to Zig, what would an external dev need to do in order to restore O(1) bootstrapping? I'm trying to figure out if it's possible to purge C from the bootstrap chain</span></div><div class="line" id="132316"><span class="nick" style="color:#6d2462"><a href="#132316" label="[13:23:16]">&lt;alethkit&gt;</a></span><span class="message">I know camlboot and a 4K VM for gambit scheme exist, but not much else</span></div><div class="line" id="132346"><span class="nick" style="color:#6d2462"><a href="#132346" label="[13:23:46]">&lt;alethkit&gt;</a></span><span class="message">(For my purposes, bootstrapping from x86-64 UEFI is enough, since everything else is probably being cross-compiled for now, anyway)</span></div><div class="line" id="132436"><span class="nick" style="color:#234e69"><a href="#132436" label="[13:24:36]">&lt;drakonis&gt;</a></span><span class="message">that is a question for #zig as well</span></div><div class="line" id="132437"><span class="nick" style="color:#6d2462"><a href="#132437" label="[13:24:37]">&lt;alethkit&gt;</a></span><span class="message">(For the sake of clarity, I'm not counting M!_</span></div><div class="line" id="132451"><span class="nick" style="color:#6d2462"><a href="#132451" label="[13:24:51]">&lt;alethkit&gt;</a></span><span class="message">drakonis: So it's off to #zig I go?</span></div><div class="line" id="132504"><span class="nick" style="color:#234e69"><a href="#132504" label="[13:25:04]">&lt;drakonis&gt;</a></span><span class="message">you can go there as well for that</span></div><div class="line" id="132507"><span class="nick" style="color:#6d2462"><a href="#132507" label="[13:25:07]">&lt;alethkit&gt;</a></span><span class="message">Ah, right</span></div><div class="line" id="132509"><span class="nick" style="color:#2e2a4a"><a href="#132509" label="[13:25:09]">&lt;oriansj&gt;</a></span><span class="message">alethkit: well if you wanted O(1) bootstrapping for zig and didn't want to use any C family code (which would mean not using the existing c++ code base); then you'll effectively have to implement the Zig language in a higher level language such as haskell, ocaml, scheme, common lisp or something of that sort</span></div><div class="line" id="132520"><span class="nick" style="color:#6d2462"><a href="#132520" label="[13:25:20]">&lt;alethkit&gt;</a></span><span class="message">That's what I thought, yes</span></div><div class="line" id="132536"><span class="nick" style="color:#6d2462"><a href="#132536" label="[13:25:36]">&lt;alethkit&gt;</a></span><span class="message">Given that camlboot and scheme exist, those would be my two main options</span></div><div class="line" id="132604"><span class="nick" style="color:#6d2462"><a href="#132604" label="[13:26:04]">&lt;alethkit&gt;</a></span><span class="message">particularly OCaml, seeing as 5.0 is the first mainstream language that's pure without monads</span></div><div class="line" id="132623"><span class="nick" style="color:#2e2a4a"><a href="#132623" label="[13:26:23]">&lt;oriansj&gt;</a></span><span class="message">it'll be a chunk of work but you'll only have to implement the subset of the features that they actually use (and depend upon) in their compiler</span></div><div class="line" id="132648"><span class="nick" style="color:#2e2a4a"><a href="#132648" label="[13:26:48]">&lt;oriansj&gt;</a></span><span class="message">instead of the whole language</span></div><div class="line" id="132739"><span class="nick" style="color:#6d2462"><a href="#132739" label="[13:27:39]">&lt;alethkit&gt;</a></span><span class="message">Oh, that sounds good? I think</span></div><div class="line" id="132759"><span class="nick" style="color:#6d2462"><a href="#132759" label="[13:27:59]">&lt;alethkit&gt;</a></span><span class="message">where would it fit in with your stages? stage2?</span></div><div class="line" id="132823"><span class="nick" style="color:#234e69"><a href="#132823" label="[13:28:23]">&lt;drakonis&gt;</a></span><span class="message">with it being self hosted, odds are that it uses a large amount of language features</span></div><div class="line" id="132857"><span class="nick" style="color:#2e2a4a"><a href="#132857" label="[13:28:57]">&lt;oriansj&gt;</a></span><span class="message">drakonis: but we don't know the percentage until someone actually checks</span></div><div class="line" id="133014"><span class="nick" style="color:#2e2a4a"><a href="#133014" label="[13:30:14]">&lt;oriansj&gt;</a></span><span class="message">alethkit: odds are the zig bootstrap would probably fit right after the guix bootstrap</span></div><div class="line" id="133122"><span class="nick" style="color:#2e2a4a"><a href="#133122" label="[13:31:22]">&lt;oriansj&gt;</a></span><span class="message">which would give you a great deal of tooling, libraries and anything else that helps to speed up your work.</span></div><div class="line" id="133145"><span class="nick" style="color:#234e69"><a href="#133145" label="[13:31:45]">&lt;drakonis&gt;</a></span><span class="message">and zig can be used to compile any c/c++ code</span></div><div class="line" id="133158"><span class="nick" style="color:#234e69"><a href="#133158" label="[13:31:58]">&lt;drakonis&gt;</a></span><span class="message">last i checked, it could compile erlang and pass all tests</span></div><div class="line" id="133310"><span class="nick" style="color:#2e2a4a"><a href="#133310" label="[13:33:10]">&lt;oriansj&gt;</a></span><span class="message">drakonis: but no C compiler can compile any c/c++ code; the inline assembly bits alone would invalidate that statement</span></div><div class="line" id="133327"><span class="nick" style="color:#234e69"><a href="#133327" label="[13:33:27]">&lt;drakonis&gt;</a></span><span class="message">yes.</span></div><div class="line" id="133425"><span class="nick" style="color:#234e69"><a href="#133425" label="[13:34:25]">&lt;drakonis&gt;</a></span><span class="message">well</span></div><div class="line" id="133444"><span class="nick" style="color:#2e2a4a"><a href="#133444" label="[13:34:44]">&lt;oriansj&gt;</a></span><span class="message">perhaps the clang C/C++ code set</span></div><div class="line" id="133510"><span class="nick" style="color:#2e2a4a"><a href="#133510" label="[13:35:10]">&lt;oriansj&gt;</a></span><span class="message">which is a subset of *ANY* C and mostly overlaps with GCC</span></div><div class="line" id="133840"><span class="nick" style="color:#6d2462"><a href="#133840" label="[13:38:40]">&lt;alethkit&gt;</a></span><span class="message">Hmm</span></div><div class="line" id="133848"><span class="nick" style="color:#6d2462"><a href="#133848" label="[13:38:48]">&lt;alethkit&gt;</a></span><span class="message">I did forget about cosmopolitan libc</span></div><div class="line" id="133859"><span class="nick" style="color:#6d2462"><a href="#133859" label="[13:38:59]">&lt;alethkit&gt;</a></span><span class="message">Out of curiosity, what are the issues with using that for a bootstrap?</span></div><div class="line" id="133918"><span class="nick" style="color:#234e69"><a href="#133918" label="[13:39:18]">&lt;drakonis&gt;</a></span><span class="message">i'm not sure if the new compiler without llvm underneath it still has access to the c/c++ compiler built into it</span></div><div class="line" id="133933"><span class="nick" style="color:#234e69"><a href="#133933" label="[13:39:33]">&lt;drakonis&gt;</a></span><span class="message">it probably still has it given that the patch notes didnt mention anything removing it</span></div><div class="line" id="134142"><span class="nick" style="color:#6d2462"><a href="#134142" label="[13:41:42]">&lt;alethkit&gt;</a></span><span class="message">Franciman: I was also thinking of using Scheme (In particular, the 4K VM from Gambit Scheme), but OCaml 5.0 might also be an alternative</span></div><div class="line" id="134149"><span class="nick" style="color:#6d2462"><a href="#134149" label="[13:41:49]">&lt;alethkit&gt;</a></span><span class="message">It has a release candidate, and camlboot exists</span></div><div class="line" id="134156"><span class="nick" style="color:#6d2462"><a href="#134156" label="[13:41:56]">&lt;alethkit&gt;</a></span><span class="message">and more importantly, it has algebraic effects</span></div><div class="line" id="134202"><span class="nick" style="color:#6d2462"><a href="#134202" label="[13:42:02]">&lt;alethkit&gt;</a></span><span class="message">which allow for a lot more concision in code</span></div><div class="line" id="134208"><span class="nick" style="color:#6c3d55"><a href="#134208" label="[13:42:08]">&lt;Franciman&gt;</a></span><span class="message">i second the idea</span></div><div class="line" id="134212"><span class="nick" style="color:#6c3d55"><a href="#134212" label="[13:42:12]">&lt;Franciman&gt;</a></span><span class="message">i prefer ocaml to scheme too</span></div><div class="line" id="134300"><span class="nick" style="color:#6d2462"><a href="#134300" label="[13:43:00]">&lt;alethkit&gt;</a></span><span class="message">As a bonus bonus point, I think there's someone working on making an interactive theorem prover with 5.0, so you could (in theory) get a proof certified bootstrap chain</span></div><div class="line" id="134312"><span class="nick" style="color:#6d2462"><a href="#134312" label="[13:43:12]">&lt;alethkit&gt;</a></span><span class="message">I guess we need to actually find out what to implement</span></div><div class="line" id="134351"><span class="nick" style="color:#6d2462"><a href="#134351" label="[13:43:51]">&lt;alethkit&gt;</a></span><span class="message">drakonis: Do you know if zig supports tail call optimisation?</span></div><div class="line" id="134448"><span class="nick" style="color:#6d2462"><a href="#134448" label="[13:44:48]">&lt;alethkit&gt;</a></span><span class="message">I assume converting all control flow to that would make our lives easier</span></div><div class="line" id="134449"><span class="nick" style="color:#234e69"><a href="#134449" label="[13:44:49]">&lt;drakonis&gt;</a></span><span class="message">a cursory look into the documentation mentions tail call optimizations and the ability to prevent them</span></div><div class="line" id="134507"><span class="nick" style="color:#234e69"><a href="#134507" label="[13:45:07]">&lt;drakonis&gt;</a></span><span class="message"> <a rel="nofollow" href="https://ziglang.org/documentation/master/#call">https://ziglang.org/documentation/master/#call</a> </span></div><div class="line" id="134511"><span class="nick" style="color:#234e69"><a href="#134511" label="[13:45:11]">&lt;drakonis&gt;</a></span><span class="message">there's a call builtin</span></div><div class="line" id="134535"><span class="nick" style="color:#234e69"><a href="#134535" label="[13:45:35]">&lt;drakonis&gt;</a></span><span class="message">lets you control whether it is a tail call or not</span></div><div class="line" id="134540"><span class="nick" style="color:#234e69"><a href="#134540" label="[13:45:40]">&lt;drakonis&gt;</a></span><span class="message">among other things.</span></div><div class="line" id="134600"><span class="nick" style="color:#6d2462"><a href="#134600" label="[13:46:00]">&lt;alethkit&gt;</a></span><span class="message">Oh, we can just declare it a compile error</span></div><div class="line" id="134601"><span class="nick" style="color:#6d2462"><a href="#134601" label="[13:46:01]">&lt;alethkit&gt;</a></span><span class="message">very cool</span></div><div class="line" id="134647"><span class="nick" style="color:#6d2462"><a href="#134647" label="[13:46:47]">&lt;alethkit&gt;</a></span><span class="message">If one is allowed to &quot;cheat&quot; by commiting a WASM blob to source, one is also allowed to &quot;cheat&quot; by declaring anything they don't like to be a compiler error</span></div><div class="line" id="134720"><span class="nick" style="color:#234e69"><a href="#134720" label="[13:47:20]">&lt;drakonis&gt;</a></span><span class="message">they'll hang you dry though</span></div><div class="line" id="134739"><span class="nick" style="color:#234e69"><a href="#134739" label="[13:47:39]">&lt;drakonis&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/ziglang/zig/issues/694">https://github.com/ziglang/zig/issues/694</a> </span></div><div class="line" id="134856"><span class="nick" style="color:#234e69"><a href="#134856" label="[13:48:56]">&lt;drakonis&gt;</a></span><span class="message">the wasm blob will only go away once there's a reasonable replacement for it</span></div><div class="line" id="135101"><span class="nick" style="color:#234e69"><a href="#135101" label="[13:51:01]">&lt;drakonis&gt;</a></span><span class="message">but to be honest, you do you.</span></div><div class="line" id="135128"><span class="nick" style="color:#234e69"><a href="#135128" label="[13:51:28]">&lt;drakonis&gt;</a></span><span class="message">i'm looking forward to seeing zig's spec and what comes out of it</span></div><div class="line" id="135713"><span class="nick" style="color:#234e69"><a href="#135713" label="[13:57:13]">&lt;drakonis&gt;</a></span><span class="message">no async/await/suspend/resume in stage2</span></div><div class="line" id="135816"><span class="nick" style="color:#234e69"><a href="#135816" label="[13:58:16]">&lt;drakonis&gt;</a></span><span class="message">got removed since there's no support for it yet</span></div><div class="line" id="140007"><span class="nick" style="color:#234e69"><a href="#140007" label="[14:00:07]">&lt;drakonis&gt;</a></span><span class="message">it'll be back soon.</span></div><div class="line" id="142145"><span class="nick" style="color:#6d2462"><a href="#142145" label="[14:21:45]">&lt;alethkit&gt;</a></span><span class="message">drakonis: I mean, for now, it's only an experiment</span></div><div class="line" id="142202"><span class="nick" style="color:#6d2462"><a href="#142202" label="[14:22:02]">&lt;alethkit&gt;</a></span><span class="message">Having an alternate implementation for bootstrapping might also be directly helpful</span></div><div class="line" id="142226"><span class="nick" style="color:#6d2462"><a href="#142226" label="[14:22:26]">&lt;alethkit&gt;</a></span><span class="message">And more importantly, the specification allows for tail call failures to be declared compiler errors</span></div><div class="line" id="143016"><span class="nick" style="color:#234e69"><a href="#143016" label="[14:30:16]">&lt;drakonis&gt;</a></span><span class="message">that is not actually the spec</span></div><div class="line" id="143020"><span class="nick" style="color:#234e69"><a href="#143020" label="[14:30:20]">&lt;drakonis&gt;</a></span><span class="message">there is no spec yet.</span></div><div class="line" id="152422"><span class="nick" style="color:#6d2462"><a href="#152422" label="[15:24:22]">&lt;alethkit&gt;</a></span><span class="message">Sorry, yes</span></div><div class="line" id="152425"><span class="nick" style="color:#6d2462"><a href="#152425" label="[15:24:25]">&lt;alethkit&gt;</a></span><span class="message">the documentation</span></div><div class="line" id="155030"><span class="nick" style="color:#d9d9d9"><a href="#155030" label="[15:50:30]">&lt;stikonas&gt;</a></span><span class="message">camlboot only targets specific version of ocaml, doesn't it?</span></div><div class="line" id="155058"><span class="nick" style="color:#d9d9d9"><a href="#155058" label="[15:50:58]">&lt;stikonas&gt;</a></span><span class="message">and moving to new versions of ocaml might require building from unreleased git snapshots</span></div><div class="line" id="165836"><span class="nick" style="color:#6d2462"><a href="#165836" label="[16:58:36]">&lt;alethkit&gt;</a></span><span class="message">stikonas: I believe so, yes</span></div><div class="line" id="165842"><span class="nick" style="color:#6d2462"><a href="#165842" label="[16:58:42]">&lt;alethkit&gt;</a></span><span class="message">but it might be able to be adapted</span></div><div class="line" id="165849"><span class="nick" style="color:#6d2462"><a href="#165849" label="[16:58:49]">&lt;alethkit&gt;</a></span><span class="message">On another note, I stumbled upon <a rel="nofollow" href="https://docs.yzena.com/yc/master/yvm/design.html">https://docs.yzena.com/yc/master/yvm/design.html</a> </span></div><div class="line" id="170059"><span class="nick" style="color:#bc80bd"><a href="#170059" label="[17:00:59]">&lt;Irvise_&gt;</a></span><span class="message">stikonas: from their readme they point out they use OCaml 4.07.0 <a rel="nofollow" href="https://github.com/Ekdohibs/camlboot/tree/master/miniml/compiler">https://github.com/Ekdohibs/camlboot/tree/master/miniml/compiler</a> </span></div><div class="line" id="215238"><span class="nick" style="color:#6d2462"><a href="#215238" label="[21:52:38]">&lt;alethkit&gt;</a></span><span class="message">andrewrk: The logs will probably clear up what I meant</span></div><div class="line" id="215256"><span class="nick" style="color:#6d2462"><a href="#215256" label="[21:52:56]">&lt;alethkit&gt;</a></span><span class="message">I hope</span></div><div class="line" id="221432"><span class="nick" style="color:#6d2462"><a href="#221432" label="[22:14:32]">&lt;alethkit&gt;</a></span><span class="message">drakonis: I just checked, and it turns out Zig is only able to compile C/C++ code when Clang is present</span></div><div class="line" id="221441"><span class="nick" style="color:#234e69"><a href="#221441" label="[22:14:41]">&lt;drakonis&gt;</a></span><span class="message">hm, i see.</span></div><div class="line" id="221530"><span class="nick" style="color:#6d2462"><a href="#221530" label="[22:15:30]">&lt;alethkit&gt;</a></span><span class="message">However, if you can get away with rewriting the bootstrap in zig...</span></div><div class="line" id="221545"><span class="nick" style="color:#6d2462"><a href="#221545" label="[22:15:45]">&lt;alethkit&gt;</a></span><span class="message">or at least something like stage2</span></div><div class="line" id="224238"><span class="nick" style="color:#6d2462"><a href="#224238" label="[22:42:38]">&lt;alethkit&gt;</a></span><span class="message">Oooh, <a rel="nofollow" href="https://scheme.fail/">https://scheme.fail/</a>  exists!</span></div><div class="line" id="225307"><span class="nick" style="color:#bc80bd"><a href="#225307" label="[22:53:07]">&lt;Irvise_&gt;</a></span><span class="message">alethkit: yup, it is a very cool Scheme! Sadly, it seems that it needs a binary blob to compile itself :(</span></div><div class="line" id="225338"><span class="nick" style="color:#bc80bd"><a href="#225338" label="[22:53:38]">&lt;Irvise_&gt;</a></span><span class="message">However it is ver cool that i can compile itself in its own &quot;OS&quot; :D</span></div><div class="line" id="225553"><span class="nick" style="color:#6d2462"><a href="#225553" label="[22:55:53]">&lt;alethkit&gt;</a></span><span class="message">Irvise_: Considering that it's a Scheme, it might be possible to just write raw assembly to compile it?</span></div><div class="line" id="225648"><span class="nick" style="color:#bc80bd"><a href="#225648" label="[22:56:48]">&lt;Irvise_&gt;</a></span><span class="message">It is a fairly advance Scheme... It is a compiler too and it can write drivers/low level binaries...</span></div><div class="line" id="225701"><span class="nick" style="color:#bc80bd"><a href="#225701" label="[22:57:01]">&lt;Irvise_&gt;</a></span><span class="message">Theoretically everything can be, but...</span></div><div class="line" id="225856"><span class="nick" style="color:#6d2462"><a href="#225856" label="[22:58:56]">&lt;alethkit&gt;</a></span><span class="message">Hmmm</span></div><div class="line" id="225916"><span class="nick" style="color:#6d2462"><a href="#225916" label="[22:59:16]">&lt;alethkit&gt;</a></span><span class="message">SectorLISP -&gt; LokoScheme ?</span></div><div class="line" id="225936"><span class="nick" style="color:#6d2462"><a href="#225936" label="[22:59:36]">&lt;alethkit&gt;</a></span><span class="message">and hopefully one can jump to a custom version of camlboot</span></div><div class="line" id="225944"><span class="nick" style="color:#6d2462"><a href="#225944" label="[22:59:44]">&lt;alethkit&gt;</a></span><span class="message">Now I really want to try this</span></div><div class="line" id="231829"><span class="nick" style="color:#6d2462"><a href="#231829" label="[23:18:29]">&lt;alethkit&gt;</a></span><span class="message">It might be possible</span></div><div class="line" id="231836"><span class="nick" style="color:#6d2462"><a href="#231836" label="[23:18:36]">&lt;alethkit&gt;</a></span><span class="message">but you definitely need to do some trickery</span></div><div class="line" id="234430"><span class="nick" style="color:#d9d9d9"><a href="#234430" label="[23:44:30]">&lt;stikonas&gt;</a></span><span class="message">alethkit: you can't use SectorLISP for bootstrapping</span></div><div class="line" id="234458"><span class="nick" style="color:#d9d9d9"><a href="#234458" label="[23:44:58]">&lt;stikonas&gt;</a></span><span class="message">it's too limitted</span></div><div class="line" id="235246"><span class="nick" style="color:#3c5b35"><a href="#235246" label="[23:52:46]">&lt;theruran&gt;</a></span><span class="message">alethkit: I am also interested in cutting C out of the bootstrap path, toward a Scheme most likely</span></div><br /></div></body></html>