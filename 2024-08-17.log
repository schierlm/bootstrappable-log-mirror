<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2024-08-17.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="102409"><span class="nick" style="color:#389600"><a href="#102409" label="[10:24:09]">&lt;nimaje&gt;</a></span><span class="message">andydude: why are those delta* functions inside a class? why do you have that ScannerDFA class at all? why did you not combine those delta* functions into one? why use those next* functions instead of iterators/generators? (writing better python should at least half that code size)</span></div><div class="line" id="181657"><span class="nick" style="color:#8dd3c7"><a href="#181657" label="[18:16:57]">&lt;mid-kid&gt;</a></span><span class="message">Unrelated to live-bootstrap, but does anyone know how to specify the amount of threads that apache-ant may use?</span></div><div class="line" id="181712"><span class="nick" style="color:#8dd3c7"><a href="#181712" label="[18:17:12]">&lt;mid-kid&gt;</a></span><span class="message">I have a problem where ant works on my laptop but not on my new PC</span></div><div class="line" id="181725"><span class="nick" style="color:#8dd3c7"><a href="#181725" label="[18:17:25]">&lt;mid-kid&gt;</a></span><span class="message">And I fear that may be related to 8 vs 20 threads</span></div><div class="line" id="181730"><span class="nick" style="color:#8dd3c7"><a href="#181730" label="[18:17:30]">&lt;mid-kid&gt;</a></span><span class="message">(it runs out of memory)</span></div><div class="line" id="181743"><span class="nick" style="color:#8dd3c7"><a href="#181743" label="[18:17:43]">&lt;mid-kid&gt;</a></span><span class="message">maybe stikonas knows</span></div><div class="line" id="181759"><span class="nick" style="color:#8dd3c7"><a href="#181759" label="[18:17:59]">&lt;mid-kid&gt;</a></span><span class="message">(if he doesn't then this might be good information for his bootstrap too)</span></div><div class="line" id="182302"><span class="nick" style="color:#2e2a4a"><a href="#182302" label="[18:23:02]">&lt;stikonas&gt;</a></span><span class="message">no, I don't know how to specify ant threads...</span></div><div class="line" id="182337"><span class="nick" style="color:#8dd3c7"><a href="#182337" label="[18:23:37]">&lt;mid-kid&gt;</a></span><span class="message">stikonas: what kind of machine do you use to test gentoo-bootstrap?</span></div><div class="line" id="182347"><span class="nick" style="color:#2e2a4a"><a href="#182347" label="[18:23:47]">&lt;stikonas&gt;</a></span><span class="message">just my laptop...</span></div><div class="line" id="182348"><span class="nick" style="color:#8dd3c7"><a href="#182348" label="[18:23:48]">&lt;mid-kid&gt;</a></span><span class="message">CPU/threads and RAM</span></div><div class="line" id="182352"><span class="nick" style="color:#2e2a4a"><a href="#182352" label="[18:23:52]">&lt;stikonas&gt;</a></span><span class="message">current gentoo system</span></div><div class="line" id="182410"><span class="nick" style="color:#2e2a4a"><a href="#182410" label="[18:24:10]">&lt;stikonas&gt;</a></span><span class="message">oh, I have 16 threads and 64 GB</span></div><div class="line" id="182438"><span class="nick" style="color:#8dd3c7"><a href="#182438" label="[18:24:38]">&lt;mid-kid&gt;</a></span><span class="message">64GB is kinda insane but that rules out one theory</span></div><div class="line" id="182805"><span class="nick" style="color:#2e2a4a"><a href="#182805" label="[18:28:05]">&lt;stikonas&gt;</a></span><span class="message">well, RAM is fairly cheap now</span></div><div class="line" id="185835"><span class="nick" style="color:#8dd3c7"><a href="#185835" label="[18:58:35]">&lt;mid-kid&gt;</a></span><span class="message">giving up for now, I'll just copy an ant distribution from my laptop</span></div><div class="line" id="190117"><span class="nick" style="color:#6b8072"><a href="#190117" label="[19:01:17]">&lt;aggi&gt;</a></span><span class="message">mid-kid: not sure if this is what you're looking for <a rel="nofollow" href="https://ant.apache.org/manual/Tasks/parallel.html">https://ant.apache.org/manual/Tasks/parallel.html</a> </span></div><div class="line" id="190402"><span class="nick" style="color:#8dd3c7"><a href="#190402" label="[19:04:02]">&lt;mid-kid&gt;</a></span><span class="message">nah the problem doesn't seem to be parallelism - I don't think the ant bootstrap has any, or at least htop is only reporting one thread...</span></div><div class="line" id="201555"><span class="nick" style="color:#6b8072"><a href="#201555" label="[20:15:55]">&lt;aggi&gt;</a></span><span class="message">tcc -ar implementation is giving me headache; it is introducing further side-effects with static-linking</span></div><div class="line" id="202546"><span class="nick" style="color:#80b1d3"><a href="#202546" label="[20:25:46]">&lt;andydude&gt;</a></span><span class="message">aggi: can I help?</span></div><div class="line" id="203152"><span class="nick" style="color:#6b8072"><a href="#203152" label="[20:31:52]">&lt;aggi&gt;</a></span><span class="message">probably not andydude;</span></div><div class="line" id="203423"><span class="nick" style="color:#6b8072"><a href="#203423" label="[20:34:23]">&lt;aggi&gt;</a></span><span class="message">it is difficult to communicate, with git-diff of hundreds of uncommitted changes, against a portage overlay that already is somewhat degrading in quality</span></div><div class="line" id="203447"><span class="nick" style="color:#80b1d3"><a href="#203447" label="[20:34:47]">&lt;andydude&gt;</a></span><span class="message">That sounds like a nightmare</span></div><div class="line" id="204919"><span class="nick" style="color:#6b8072"><a href="#204919" label="[20:49:19]">&lt;aggi&gt;</a></span><span class="message">in recent days, i had to diff through almost 100 ebuilds, makefile.am and similar, another important lesson learned</span></div><div class="line" id="204946"><span class="nick" style="color:#6b8072"><a href="#204946" label="[20:49:46]">&lt;aggi&gt;</a></span><span class="message">the handling of static and dynamic linking is problematic with many, unncessarily</span></div><div class="line" id="205024"><span class="nick" style="color:#6b8072"><a href="#205024" label="[20:50:24]">&lt;aggi&gt;</a></span><span class="message">cyrus-sasl, just a random example</span></div><div class="line" id="205106"><span class="nick" style="color:#6b8072"><a href="#205106" label="[20:51:06]">&lt;aggi&gt;</a></span><span class="message">situation is, i want to retain a package set of important things, such as mutt mailer, within the stage of what tcc-toolchain is capable of</span></div><div class="line" id="205324"><span class="nick" style="color:#6b8072"><a href="#205324" label="[20:53:24]">&lt;aggi&gt;</a></span><span class="message">and then, cyrus-sasl ebuild/makefile is soaking hours of time, unexpectedly breaking various dependencies etc etc.</span></div><div class="line" id="205350"><span class="nick" style="color:#6b8072"><a href="#205350" label="[20:53:50]">&lt;aggi&gt;</a></span><span class="message">just because, tcc -ar behaved slightly different (which was another few hours wasted to spot this iregularity)</span></div><div class="line" id="205503"><span class="nick" style="color:#6b8072"><a href="#205503" label="[20:55:03]">&lt;aggi&gt;</a></span><span class="message">i think i covered all of those issues with sufficient testing, and, i can emit a complete userspace already with tcc-toolchain</span></div><div class="line" id="205731"><span class="nick" style="color:#6b8072"><a href="#205731" label="[20:57:31]">&lt;aggi&gt;</a></span><span class="message">the necessary testing and cleanup needs to be done</span></div><div class="line" id="205812"><span class="nick" style="color:#6b8072"><a href="#205812" label="[20:58:12]">&lt;aggi&gt;</a></span><span class="message">and i will have to decide soon, how to cope with the forced transition away from gentoo-tooling</span></div><div class="line" id="205833"><span class="nick" style="color:#6b8072"><a href="#205833" label="[20:58:33]">&lt;aggi&gt;</a></span><span class="message">because i see little to no chance to salvage python/portage</span></div><div class="line" id="205936"><span class="nick" style="color:#6b8072"><a href="#205936" label="[20:59:36]">&lt;aggi&gt;</a></span><span class="message">and since this is lost, i may not need to bother with perl/autotools anymore either, and re-write a few hundred makefiles from scratch</span></div><div class="line" id="210117"><span class="nick" style="color:#6b8072"><a href="#210117" label="[21:01:17]">&lt;aggi&gt;</a></span><span class="message">and i want to avoid an approach which is rather common, such as spawning a separate build/packaging system atop an existing system-integration procedure</span></div><div class="line" id="210147"><span class="nick" style="color:#6b8072"><a href="#210147" label="[21:01:47]">&lt;aggi&gt;</a></span><span class="message">(such as netbsd pkgsrc atop some lfs/slackware style base-system), because then this duplicates efforts necessary further</span></div><div class="line" id="211624"><span class="nick" style="color:#8dd3c7"><a href="#211624" label="[21:16:24]">&lt;mid-kid&gt;</a></span><span class="message">I think if you want tcc to work with a wider array of software you might need to consider further developing tcc</span></div><div class="line" id="212513"><span class="nick" style="color:#6b8072"><a href="#212513" label="[21:25:13]">&lt;aggi&gt;</a></span><span class="message">tcc already does work with such, it's rather capable already</span></div><div class="line" id="212632"><span class="nick" style="color:#6b8072"><a href="#212632" label="[21:26:32]">&lt;aggi&gt;</a></span><span class="message">it just reveals, what issues there are on the GNU/linux/gentoo side, which are wrapped into and hidden behind a dozen layers of complexity in the build/packaging-system</span></div><div class="line" id="212955"><span class="nick" style="color:#6d2462"><a href="#212955" label="[21:29:55]">&lt;lanodan&gt;</a></span><span class="message">which I think is one of the big reasons why oasis just works around that</span></div><div class="line" id="213723"><span class="nick" style="color:#6b8072"><a href="#213723" label="[21:37:23]">&lt;aggi&gt;</a></span><span class="message">which made me think, if simple makefiles didn't suffice for most of what oasis accomplished</span></div><div class="line" id="213924"><span class="nick" style="color:#6d2462"><a href="#213924" label="[21:39:24]">&lt;lanodan&gt;</a></span><span class="message">Probably could use BSD make if you want to go that route, at least bsd.mk sounds like a good way to keep static makefiles yet still have configuration.</span></div><div class="line" id="230511"><span class="nick" style="color:#8dd3c7"><a href="#230511" label="[23:05:11]">&lt;mid-kid&gt;</a></span><span class="message">the complexity is there for a reason most of the time imo</span></div><div class="line" id="230747"><span class="nick" style="color:#8dd3c7"><a href="#230747" label="[23:07:47]">&lt;mid-kid&gt;</a></span><span class="message">in particular, gentoo and portage have grown into the monsters they are today because hundreds of people have come and gone to scratch their itches and hopefully help other people as well in the process</span></div><div class="line" id="230856"><span class="nick" style="color:#8dd3c7"><a href="#230856" label="[23:08:56]">&lt;mid-kid&gt;</a></span><span class="message">can you strip away a ton? sure, but you will undoubtedly disappoint a lot of people as well</span></div><div class="line" id="231013"><span class="nick" style="color:#8dd3c7"><a href="#231013" label="[23:10:13]">&lt;mid-kid&gt;</a></span><span class="message">it can always be done better, of course, but reducing for the sake of reducing rarely works out in my experience</span></div><div class="line" id="231550"><span class="nick" style="color:#8dd3c7"><a href="#231550" label="[23:15:50]">&lt;mid-kid&gt;</a></span><span class="message">you tend to end up with something which can only serve one use case if any at all</span></div><div class="line" id="231615"><span class="nick" style="color:#8dd3c7"><a href="#231615" label="[23:16:15]">&lt;mid-kid&gt;</a></span><span class="message">which can be ok! after all, most of the tools in live-bootstrap only serve the case of building the next thing in the chain</span></div><div class="line" id="231643"><span class="nick" style="color:#2e2a4a"><a href="#231643" label="[23:16:43]">&lt;stikonas&gt;</a></span><span class="message">and most of the tools in live-bootstrap are added so that we can rebuild pregenerated files</span></div><div class="line" id="231703"><span class="nick" style="color:#8dd3c7"><a href="#231703" label="[23:17:03]">&lt;mid-kid&gt;</a></span><span class="message">but I'm really lost as to what you're aiming for with the tcc project</span></div><div class="line" id="231745"><span class="nick" style="color:#6b8072"><a href="#231745" label="[23:17:45]">&lt;aggi&gt;</a></span><span class="message">compile-time performance is superb, to name one</span></div><div class="line" id="231757"><span class="nick" style="color:#6b8072"><a href="#231757" label="[23:17:57]">&lt;aggi&gt;</a></span><span class="message">next, i got a complete system profile sanitized, to avoid c++</span></div><div class="line" id="231939"><span class="nick" style="color:#8dd3c7"><a href="#231939" label="[23:19:39]">&lt;mid-kid&gt;</a></span><span class="message">I see</span></div><div class="line" id="231942"><span class="nick" style="color:#80b1d3"><a href="#231942" label="[23:19:42]">&lt;andydude&gt;</a></span><span class="message">I can agree with you that c++ should be avoided, but might I also recommend adding perl5 to that list?</span></div><div class="line" id="231954"><span class="nick" style="color:#80b1d3"><a href="#231954" label="[23:19:54]">&lt;andydude&gt;</a></span><span class="message">lol</span></div><div class="line" id="232009"><span class="nick" style="color:#2e2a4a"><a href="#232009" label="[23:20:09]">&lt;stikonas&gt;</a></span><span class="message">restricting to just C doens't really make sense</span></div><div class="line" id="232029"><span class="nick" style="color:#80b1d3"><a href="#232029" label="[23:20:29]">&lt;andydude&gt;</a></span><span class="message">I never said that</span></div><div class="line" id="232041"><span class="nick" style="color:#2e2a4a"><a href="#232041" label="[23:20:41]">&lt;stikonas&gt;</a></span><span class="message">I'm not saying that you said that</span></div><div class="line" id="232100"><span class="nick" style="color:#6b8072"><a href="#232100" label="[23:21:00]">&lt;aggi&gt;</a></span><span class="message">me neither, and i do not refuse c++, i merely do not accept c++ where it doesn't belong</span></div><div class="line" id="232101"><span class="nick" style="color:#2e2a4a"><a href="#232101" label="[23:21:01]">&lt;stikonas&gt;</a></span><span class="message">just saying that's what happens if one only allows tcc</span></div><div class="line" id="232119"><span class="nick" style="color:#2e2a4a"><a href="#232119" label="[23:21:19]">&lt;stikonas&gt;</a></span><span class="message">but one needs some other c++ compiler then</span></div><div class="line" id="232119"><span class="nick" style="color:#8dd3c7"><a href="#232119" label="[23:21:19]">&lt;mid-kid&gt;</a></span><span class="message">making a build system for every single project, and/or patching them, is an angle which you can take if you don't care too much about tracking upstream releases (you'll be forking them in essence)</span></div><div class="line" id="232129"><span class="nick" style="color:#80b1d3"><a href="#232129" label="[23:21:29]">&lt;andydude&gt;</a></span><span class="message">maybe we should focus on t++ then</span></div><div class="line" id="232149"><span class="nick" style="color:#6b8072"><a href="#232149" label="[23:21:49]">&lt;aggi&gt;</a></span><span class="message">i do not refuse gcc/g++ neihter, but i try to move the necessity to have it into a later stage of bootstrapping</span></div><div class="line" id="232205"><span class="nick" style="color:#2e2a4a"><a href="#232205" label="[23:22:05]">&lt;stikonas&gt;</a></span><span class="message">anyway, good compiler performance is there because there are no optimizations</span></div><div class="line" id="232214"><span class="nick" style="color:#2e2a4a"><a href="#232214" label="[23:22:14]">&lt;stikonas&gt;</a></span><span class="message">that's not really that hard to achieve</span></div><div class="line" id="232223"><span class="nick" style="color:#8dd3c7"><a href="#232223" label="[23:22:23]">&lt;mid-kid&gt;</a></span><span class="message">tbh tcc is way faster than gcc -O0</span></div><div class="line" id="232229"><span class="nick" style="color:#2e2a4a"><a href="#232229" label="[23:22:29]">&lt;stikonas&gt;</a></span><span class="message">M2_planet might be even faster</span></div><div class="line" id="232237"><span class="nick" style="color:#2e2a4a"><a href="#232237" label="[23:22:37]">&lt;stikonas&gt;</a></span><span class="message">but produces rubbish binaries</span></div><div class="line" id="232249"><span class="nick" style="color:#8dd3c7"><a href="#232249" label="[23:22:49]">&lt;mid-kid&gt;</a></span><span class="message">actually I'm not too sure</span></div><div class="line" id="232302"><span class="nick" style="color:#8dd3c7"><a href="#232302" label="[23:23:02]">&lt;mid-kid&gt;</a></span><span class="message">seaking of</span></div><div class="line" id="232317"><span class="nick" style="color:#2e2a4a"><a href="#232317" label="[23:23:17]">&lt;stikonas&gt;</a></span><span class="message">well, self-hosted M2-Planet might be slower...</span></div><div class="line" id="232322"><span class="nick" style="color:#8dd3c7"><a href="#232322" label="[23:23:22]">&lt;mid-kid&gt;</a></span><span class="message">I know chibicc is a compiler similar to tcc which I've actually managed to compile some of my projects with</span></div><div class="line" id="232323"><span class="nick" style="color:#2e2a4a"><a href="#232323" label="[23:23:23]">&lt;stikonas&gt;</a></span><span class="message">due to it itself producing bad binaries</span></div><div class="line" id="232357"><span class="nick" style="color:#2e2a4a"><a href="#232357" label="[23:23:57]">&lt;stikonas&gt;</a></span><span class="message">well, partially tcc is also fast cause it outputs machine code</span></div><div class="line" id="232400"><span class="nick" style="color:#2e2a4a"><a href="#232400" label="[23:24:00]">&lt;stikonas&gt;</a></span><span class="message">and not assembly</span></div><div class="line" id="232407"><span class="nick" style="color:#2e2a4a"><a href="#232407" label="[23:24:07]">&lt;stikonas&gt;</a></span><span class="message">so there aren't further steps</span></div><div class="line" id="232422"><span class="nick" style="color:#2e2a4a"><a href="#232422" label="[23:24:22]">&lt;stikonas&gt;</a></span><span class="message">but that makes tcc source fairly unreadable</span></div><div class="line" id="232442"><span class="nick" style="color:#2e2a4a"><a href="#232442" label="[23:24:42]">&lt;stikonas&gt;</a></span><span class="message">and even without that, tcc is really hard to work with</span></div><div class="line" id="232450"><span class="nick" style="color:#2e2a4a"><a href="#232450" label="[23:24:50]">&lt;stikonas&gt;</a></span><span class="message">full of 1 or 2 letter variable names there</span></div><div class="line" id="232452"><span class="nick" style="color:#8dd3c7"><a href="#232452" label="[23:24:52]">&lt;mid-kid&gt;</a></span><span class="message">heh</span></div><div class="line" id="232508"><span class="nick" style="color:#8dd3c7"><a href="#232508" label="[23:25:08]">&lt;mid-kid&gt;</a></span><span class="message">yeah that's why I suggested chibicc</span></div><div class="line" id="232515"><span class="nick" style="color:#8dd3c7"><a href="#232515" label="[23:25:15]">&lt;mid-kid&gt;</a></span><span class="message">the output is garbage</span></div><div class="line" id="232518"><span class="nick" style="color:#8dd3c7"><a href="#232518" label="[23:25:18]">&lt;mid-kid&gt;</a></span><span class="message">but the source is readable</span></div><div class="line" id="232704"><span class="nick" style="color:#80b1d3"><a href="#232704" label="[23:27:04]">&lt;andydude&gt;</a></span><span class="message">what if there was a language that was like concatenative, so that each word in that language had a 1-to-1 correspondence with binary</span></div><div class="line" id="232718"><span class="nick" style="color:#6b8072"><a href="#232718" label="[23:27:18]">&lt;aggi&gt;</a></span><span class="message">&quot;15 packages have failed to build, install, or execute&quot;, of a total of ~500, that is with AR=tcc-ar</span></div><div class="line" id="232739"><span class="nick" style="color:#6b8072"><a href="#232739" label="[23:27:39]">&lt;aggi&gt;</a></span><span class="message">it isn't too bad, and it affects things like sasl/mutt-mailer</span></div><div class="line" id="232750"><span class="nick" style="color:#8dd3c7"><a href="#232750" label="[23:27:50]">&lt;mid-kid&gt;</a></span><span class="message">andydude: that's just assembly</span></div><div class="line" id="232806"><span class="nick" style="color:#80b1d3"><a href="#232806" label="[23:28:06]">&lt;andydude&gt;</a></span><span class="message">oh, I was thinking of forth, actually</span></div><div class="line" id="232834"><span class="nick" style="color:#8dd3c7"><a href="#232834" label="[23:28:34]">&lt;mid-kid&gt;</a></span><span class="message">I'm not old enough to have dabbled in forth</span></div><div class="line" id="232901"><span class="nick" style="color:#80b1d3"><a href="#232901" label="[23:29:01]">&lt;andydude&gt;</a></span><span class="message">I used to have a powerpc with openfirmware on it, tried to hack the bootloader with forth</span></div><div class="line" id="233026"><span class="nick" style="color:#8dd3c7"><a href="#233026" label="[23:30:26]">&lt;mid-kid&gt;</a></span><span class="message">heh</span></div><div class="line" id="233128"><span class="nick" style="color:#80b1d3"><a href="#233128" label="[23:31:28]">&lt;andydude&gt;</a></span><span class="message">most forths these days try to use ANS standard, except perhaps fact factor</span></div><div class="line" id="233149"><span class="nick" style="color:#80b1d3"><a href="#233149" label="[23:31:49]">&lt;andydude&gt;</a></span><span class="message"> <a rel="nofollow" href="https://factorcode.org/">https://factorcode.org/</a> </span></div><div class="line" id="233215"><span class="nick" style="color:#80b1d3"><a href="#233215" label="[23:32:15]">&lt;andydude&gt;</a></span><span class="message">I wonder if anyone has written a c compiler in factor</span></div><div class="line" id="233510"><span class="nick" style="color:#8dd3c7"><a href="#233510" label="[23:35:10]">&lt;mid-kid&gt;</a></span><span class="message">tbh I think mes does the &quot;bootstrapping from a minimalist language&quot; thing well enough</span></div><div class="line" id="233555"><span class="nick" style="color:#6b8072"><a href="#233555" label="[23:35:55]">&lt;aggi&gt;</a></span><span class="message">it's the only project that i am aware, that accomplished it</span></div><div class="line" id="233618"><span class="nick" style="color:#6b8072"><a href="#233618" label="[23:36:18]">&lt;aggi&gt;</a></span><span class="message">of</span></div><div class="line" id="233645"><span class="nick" style="color:#6b8072"><a href="#233645" label="[23:36:45]">&lt;aggi&gt;</a></span><span class="message">to arrive at any gnu/posix</span></div><div class="line" id="234447"><span class="nick" style="color:#234e69"><a href="#234447" label="[23:44:47]">&lt;Googulator&gt;</a></span><span class="message">mid-kid: I just wish mes's target language (currently Scheme) used brackets {} instead of parentheses () - not because one is better than the other, but because of the traditions built around them</span></div><div class="line" id="234522"><span class="nick" style="color:#234e69"><a href="#234522" label="[23:45:22]">&lt;Googulator&gt;</a></span><span class="message">aligning bracket pairs</span></div><div class="line" id="234523"><span class="nick" style="color:#234e69"><a href="#234523" label="[23:45:23]">&lt;Googulator&gt;</a></span><span class="message">if (a) {</span></div><div class="line" id="234523"><span class="nick" style="color:#234e69"><a href="#234523" label="[23:45:23]">&lt;Googulator&gt;</a></span><span class="message">  x;</span></div><div class="line" id="234524"><span class="nick" style="color:#234e69"><a href="#234524" label="[23:45:24]">&lt;Googulator&gt;</a></span><span class="message">} else {</span></div><div class="line" id="234524"><span class="nick" style="color:#234e69"><a href="#234524" label="[23:45:24]">&lt;Googulator&gt;</a></span><span class="message">  y;</span></div><div class="line" id="234525"><span class="nick" style="color:#234e69"><a href="#234525" label="[23:45:25]">&lt;Googulator&gt;</a></span><span class="message">}</span></div><div class="line" id="234536"><span class="nick" style="color:#234e69"><a href="#234536" label="[23:45:36]">&lt;Googulator&gt;</a></span><span class="message">vs bunching parens at the end of the line... aaaargh</span></div><div class="line" id="234630"><span class="nick" style="color:#234e69"><a href="#234630" label="[23:46:30]">&lt;Googulator&gt;</a></span><span class="message">&quot;But emacs handles balancing parens for you&quot; - yeah, f*** emacs, I don't have or want a Space Cadet keyboard</span></div><br /></div></body></html>