<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-04-30.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="005454"><span class="nick" style="color:#389600"><a href="#005454" label="[00:54:54]">&lt;stikonas&gt;</a></span><span class="message">fossy: I've pushed a couple of small mes build improvements to live-bootstrap but CI is hitting the same problem as in your PR...</span></div><div class="line" id="005524"><span class="nick" style="color:#389600"><a href="#005524" label="[00:55:24]">&lt;stikonas&gt;</a></span><span class="message">maybe we can cherry-pick that fix first?</span></div><div class="line" id="005741"><span class="nick" style="color:#389600"><a href="#005741" label="[00:57:41]">&lt;stikonas&gt;</a></span><span class="message">or should we just merge GCC 12?</span></div><div class="line" id="005747"><span class="nick" style="color:#389600"><a href="#005747" label="[00:57:47]">&lt;stikonas&gt;</a></span><span class="message">I've briefly looked and it seemd ok</span></div><div class="line" id="010601"><span class="nick" style="color:#389600"><a href="#010601" label="[01:06:01]">&lt;stikonas&gt;</a></span><span class="message">ok, reviewed again and merged</span></div><div class="line" id="010628"><span class="nick" style="color:#389600"><a href="#010628" label="[01:06:28]">&lt;stikonas&gt;</a></span><span class="message">though we are still hitting Python 3.4 build error there <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/issues/283">https://github.com/fosslinux/live-bootstrap/issues/283</a> </span></div><div class="line" id="021359"><span class="nick" style="color:#8dd3c7"><a href="#021359" label="[02:13:59]">&lt;fossy&gt;</a></span><span class="message">stikonas: yeah i'm looking at py3.4 build error now</span></div><div class="line" id="021402"><span class="nick" style="color:#8dd3c7"><a href="#021402" label="[02:14:02]">&lt;fossy&gt;</a></span><span class="message">i think its the same as py3.33</span></div><div class="line" id="021404"><span class="nick" style="color:#8dd3c7"><a href="#021404" label="[02:14:04]">&lt;fossy&gt;</a></span><span class="message">3.3*</span></div><div class="line" id="021418"><span class="nick" style="color:#8dd3c7"><a href="#021418" label="[02:14:18]">&lt;fossy&gt;</a></span><span class="message">which isn't fixed (if it is the same, i'll just -j1 it for now)</span></div><div class="line" id="021513"><span class="nick" style="color:#389600"><a href="#021513" label="[02:15:13]">&lt;stikonas&gt;</a></span><span class="message">yeah, I'm fine with forcing -j1 for some packages</span></div><div class="line" id="021539"><span class="nick" style="color:#389600"><a href="#021539" label="[02:15:39]">&lt;stikonas&gt;</a></span><span class="message">if it's broken build system, I'll probably not be bothered to patch it</span></div><div class="line" id="021541"><span class="nick" style="color:#389600"><a href="#021541" label="[02:15:41]">&lt;stikonas&gt;</a></span><span class="message">if -j1 works</span></div><div class="line" id="021559"><span class="nick" style="color:#8dd3c7"><a href="#021559" label="[02:15:59]">&lt;fossy&gt;</a></span><span class="message">yes, same, unless it's a very long package (guile was the only one i bothered to fix, but even that was a bit hacky)</span></div><div class="line" id="021622"><span class="nick" style="color:#389600"><a href="#021622" label="[02:16:22]">&lt;stikonas&gt;</a></span><span class="message">yeah, guile is indeed taking a long time</span></div><div class="line" id="021635"><span class="nick" style="color:#389600"><a href="#021635" label="[02:16:35]">&lt;stikonas&gt;</a></span><span class="message">though I guess GCC12 is long too?</span></div><div class="line" id="021637"><span class="nick" style="color:#389600"><a href="#021637" label="[02:16:37]">&lt;stikonas&gt;</a></span><span class="message">or is it not too bad?</span></div><div class="line" id="021644"><span class="nick" style="color:#8dd3c7"><a href="#021644" label="[02:16:44]">&lt;fossy&gt;</a></span><span class="message">yes, reasonably long</span></div><div class="line" id="021657"><span class="nick" style="color:#389600"><a href="#021657" label="[02:16:57]">&lt;stikonas&gt;</a></span><span class="message">well, it's doing self-bootstrap</span></div><div class="line" id="021701"><span class="nick" style="color:#8dd3c7"><a href="#021701" label="[02:17:01]">&lt;fossy&gt;</a></span><span class="message">but responds better to parallelism than guile</span></div><div class="line" id="021710"><span class="nick" style="color:#389600"><a href="#021710" label="[02:17:10]">&lt;stikonas&gt;</a></span><span class="message">you can make it much longer if you enabled LTO :D</span></div><div class="line" id="021723"><span class="nick" style="color:#389600"><a href="#021723" label="[02:17:23]">&lt;stikonas&gt;</a></span><span class="message">then gcc build takes ages...</span></div><div class="line" id="021732"><span class="nick" style="color:#8dd3c7"><a href="#021732" label="[02:17:32]">&lt;fossy&gt;</a></span><span class="message">yeah, it does haha</span></div><div class="line" id="021750"><span class="nick" style="color:#389600"><a href="#021750" label="[02:17:50]">&lt;stikonas&gt;</a></span><span class="message">anyway, back to PRs? is that qemu stuff ready to merge?</span></div><div class="line" id="021754"><span class="nick" style="color:#389600"><a href="#021754" label="[02:17:54]">&lt;stikonas&gt;</a></span><span class="message">or are you still experimenting with it</span></div><div class="line" id="021805"><span class="nick" style="color:#8dd3c7"><a href="#021805" label="[02:18:05]">&lt;fossy&gt;</a></span><span class="message">no, it's not ready yet</span></div><div class="line" id="021813"><span class="nick" style="color:#389600"><a href="#021813" label="[02:18:13]">&lt;stikonas&gt;</a></span><span class="message">ok, no problem</span></div><div class="line" id="021819"><span class="nick" style="color:#8dd3c7"><a href="#021819" label="[02:18:19]">&lt;fossy&gt;</a></span><span class="message">(it's also not very useful until kexec)</span></div><div class="line" id="021823"><span class="nick" style="color:#389600"><a href="#021823" label="[02:18:23]">&lt;stikonas&gt;</a></span><span class="message">I'll check once more after you push your changes</span></div><div class="line" id="021826"><span class="nick" style="color:#389600"><a href="#021826" label="[02:18:26]">&lt;stikonas&gt;</a></span><span class="message">well, that's true...</span></div><div class="line" id="021844"><span class="nick" style="color:#389600"><a href="#021844" label="[02:18:44]">&lt;stikonas&gt;</a></span><span class="message">and after looking at mes on amd64 I have another question</span></div><div class="line" id="021848"><span class="nick" style="color:#389600"><a href="#021848" label="[02:18:48]">&lt;stikonas&gt;</a></span><span class="message">what do we do with checksums?</span></div><div class="line" id="021902"><span class="nick" style="color:#389600"><a href="#021902" label="[02:19:02]">&lt;stikonas&gt;</a></span><span class="message">in particular I've hit the problem with checksum-transcriber.SHA256SUM</span></div><div class="line" id="021906"><span class="nick" style="color:#8dd3c7"><a href="#021906" label="[02:19:06]">&lt;fossy&gt;</a></span><span class="message">for multiarch?</span></div><div class="line" id="021915"><span class="nick" style="color:#389600"><a href="#021915" label="[02:19:15]">&lt;stikonas&gt;</a></span><span class="message">one option is to move it to checksum-transcriber.x86.SHA256SUM</span></div><div class="line" id="021917"><span class="nick" style="color:#389600"><a href="#021917" label="[02:19:17]">&lt;stikonas&gt;</a></span><span class="message">yeah...</span></div><div class="line" id="021937"><span class="nick" style="color:#8dd3c7"><a href="#021937" label="[02:19:37]">&lt;fossy&gt;</a></span><span class="message">yeah, there's a bit of infrastructure changes needed for multiarch</span></div><div class="line" id="021945"><span class="nick" style="color:#8dd3c7"><a href="#021945" label="[02:19:45]">&lt;fossy&gt;</a></span><span class="message">i think X.ARCH.SHA256SUM is probably the way to go</span></div><div class="line" id="021952"><span class="nick" style="color:#389600"><a href="#021952" label="[02:19:52]">&lt;stikonas&gt;</a></span><span class="message">well, we won't be able to go much further for now</span></div><div class="line" id="022002"><span class="nick" style="color:#389600"><a href="#022002" label="[02:20:02]">&lt;stikonas&gt;</a></span><span class="message">even mes-m2 on amd64 does not build</span></div><div class="line" id="022007"><span class="nick" style="color:#389600"><a href="#022007" label="[02:20:07]">&lt;stikonas&gt;</a></span><span class="message">and tcc will take even longer</span></div><div class="line" id="022018"><span class="nick" style="color:#389600"><a href="#022018" label="[02:20:18]">&lt;stikonas&gt;</a></span><span class="message">but hopefully we can get mes to build on amd64 in not too far future</span></div><div class="line" id="022028"><span class="nick" style="color:#8dd3c7"><a href="#022028" label="[02:20:28]">&lt;fossy&gt;</a></span><span class="message">hm, ok</span></div><div class="line" id="022032"><span class="nick" style="color:#8dd3c7"><a href="#022032" label="[02:20:32]">&lt;fossy&gt;</a></span><span class="message">is that worth including?</span></div><div class="line" id="022047"><span class="nick" style="color:#389600"><a href="#022047" label="[02:20:47]">&lt;stikonas&gt;</a></span><span class="message">well, we might not enable it</span></div><div class="line" id="022050"><span class="nick" style="color:#8dd3c7"><a href="#022050" label="[02:20:50]">&lt;fossy&gt;</a></span><span class="message">i guess it lays a bit of groundwork</span></div><div class="line" id="022051"><span class="nick" style="color:#389600"><a href="#022051" label="[02:20:51]">&lt;stikonas&gt;</a></span><span class="message">but useful for debugging</span></div><div class="line" id="022055"><span class="nick" style="color:#8dd3c7"><a href="#022055" label="[02:20:55]">&lt;fossy&gt;</a></span><span class="message">yeah, ok, that works for me</span></div><div class="line" id="022059"><span class="nick" style="color:#389600"><a href="#022059" label="[02:20:59]">&lt;stikonas&gt;</a></span><span class="message">we don't need much groundwork</span></div><div class="line" id="022107"><span class="nick" style="color:#389600"><a href="#022107" label="[02:21:07]">&lt;stikonas&gt;</a></span><span class="message">I've already pushed some of it before</span></div><div class="line" id="022113"><span class="nick" style="color:#389600"><a href="#022113" label="[02:21:13]">&lt;stikonas&gt;</a></span><span class="message">some of it today in two commits</span></div><div class="line" id="022126"><span class="nick" style="color:#389600"><a href="#022126" label="[02:21:26]">&lt;stikonas&gt;</a></span><span class="message">it cleans up x86 variables too...</span></div><div class="line" id="022134"><span class="nick" style="color:#8dd3c7"><a href="#022134" label="[02:21:34]">&lt;fossy&gt;</a></span><span class="message">where's that</span></div><div class="line" id="022139"><span class="nick" style="color:#389600"><a href="#022139" label="[02:21:39]">&lt;stikonas&gt;</a></span><span class="message">mes.kaem file</span></div><div class="line" id="022202"><span class="nick" style="color:#389600"><a href="#022202" label="[02:22:02]">&lt;stikonas&gt;</a></span><span class="message">one is <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/commit/3197781127ab12bb7a7c72ee37b693d70426054d">https://github.com/fosslinux/live-bootstrap/commit/3197781127ab12bb7a7c72ee37b693d70426054d</a> </span></div><div class="line" id="022212"><span class="nick" style="color:#8dd3c7"><a href="#022212" label="[02:22:12]">&lt;fossy&gt;</a></span><span class="message">ah, i saw that one, yes</span></div><div class="line" id="022239"><span class="nick" style="color:#389600"><a href="#022239" label="[02:22:39]">&lt;stikonas&gt;</a></span><span class="message">oh , I forgot to push the other</span></div><div class="line" id="022241"><span class="nick" style="color:#389600"><a href="#022241" label="[02:22:41]">&lt;stikonas&gt;</a></span><span class="message">let me do PR then...</span></div><div class="line" id="022244"><span class="nick" style="color:#389600"><a href="#022244" label="[02:22:44]">&lt;stikonas&gt;</a></span><span class="message">since you are here</span></div><div class="line" id="022252"><span class="nick" style="color:#8dd3c7"><a href="#022252" label="[02:22:52]">&lt;fossy&gt;</a></span><span class="message">haha :)</span></div><div class="line" id="022322"><span class="nick" style="color:#389600"><a href="#022322" label="[02:23:22]">&lt;stikonas&gt;</a></span><span class="message">anyway, that first commit is trivial</span></div><div class="line" id="022327"><span class="nick" style="color:#389600"><a href="#022327" label="[02:23:27]">&lt;stikonas&gt;</a></span><span class="message">we just missed in during review</span></div><div class="line" id="022328"><span class="nick" style="color:#8dd3c7"><a href="#022328" label="[02:23:28]">&lt;fossy&gt;</a></span><span class="message">yes, simple fix</span></div><div class="line" id="022427"><span class="nick" style="color:#389600"><a href="#022427" label="[02:24:27]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/285/">https://github.com/fosslinux/live-bootstrap/pull/285/</a> </span></div><div class="line" id="022432"><span class="nick" style="color:#389600"><a href="#022432" label="[02:24:32]">&lt;stikonas&gt;</a></span><span class="message">also simple enough</span></div><div class="line" id="022441"><span class="nick" style="color:#389600"><a href="#022441" label="[02:24:41]">&lt;stikonas&gt;</a></span><span class="message">just move all x86 hardcoding into variables</span></div><div class="line" id="022656"><span class="nick" style="color:#8dd3c7"><a href="#022656" label="[02:26:56]">&lt;fossy&gt;</a></span><span class="message">yeah, that's a simple one too</span></div><div class="line" id="022731"><span class="nick" style="color:#389600"><a href="#022731" label="[02:27:31]">&lt;stikonas&gt;</a></span><span class="message">there were a few more changes needed to test mes on amd64 but those are not upstreamable now</span></div><div class="line" id="022743"><span class="nick" style="color:#8dd3c7"><a href="#022743" label="[02:27:43]">&lt;fossy&gt;</a></span><span class="message">cool</span></div><div class="line" id="022750"><span class="nick" style="color:#389600"><a href="#022750" label="[02:27:50]">&lt;stikonas&gt;</a></span><span class="message">e.g. we need to wait for another mes release till we can replace kaem.run with kaem.${MES_ARCH}</span></div><div class="line" id="022933"><span class="nick" style="color:#389600"><a href="#022933" label="[02:29:33]">&lt;stikonas&gt;</a></span><span class="message">well, I can do checksum_transcriber.x86.SHA256SUM too...</span></div><div class="line" id="023001"><span class="nick" style="color:#389600"><a href="#023001" label="[02:30:01]">&lt;stikonas&gt;</a></span><span class="message">though getting checksums updated on multiarch will be more painful...</span></div><div class="line" id="023007"><span class="nick" style="color:#389600"><a href="#023007" label="[02:30:07]">&lt;stikonas&gt;</a></span><span class="message">you would have to do it on all supported arches</span></div><div class="line" id="023028"><span class="nick" style="color:#389600"><a href="#023028" label="[02:30:28]">&lt;stikonas&gt;</a></span><span class="message">but that's unavoidable</span></div><div class="line" id="023133"><span class="nick" style="color:#8dd3c7"><a href="#023133" label="[02:31:33]">&lt;fossy&gt;</a></span><span class="message">yes, i'm considering after 1.0 that only reproducibility would need to be tested rather than constant updates of checksums, and then update checksums on a semi-regular basis</span></div><div class="line" id="023138"><span class="nick" style="color:#8dd3c7"><a href="#023138" label="[02:31:38]">&lt;fossy&gt;</a></span><span class="message">(for each change)</span></div><div class="line" id="023319"><span class="nick" style="color:#389600"><a href="#023319" label="[02:33:19]">&lt;stikonas&gt;</a></span><span class="message">anyway, we won't have that many more packages</span></div><div class="line" id="023331"><span class="nick" style="color:#8dd3c7"><a href="#023331" label="[02:33:31]">&lt;fossy&gt;</a></span><span class="message">this is true</span></div><div class="line" id="023353"><span class="nick" style="color:#389600"><a href="#023353" label="[02:33:53]">&lt;stikonas&gt;</a></span><span class="message">though we should probably add ncurses and readline</span></div><div class="line" id="023445"><span class="nick" style="color:#389600"><a href="#023445" label="[02:34:45]">&lt;stikonas&gt;</a></span><span class="message">and sam_ mentioned that there is a better implementation of bc</span></div><div class="line" id="023457"><span class="nick" style="color:#2e2a4a"><a href="#023457" label="[02:34:57]">&lt;sam_&gt;</a></span><span class="message">yeah, gdh's</span></div><div class="line" id="023459"><span class="nick" style="color:#2e2a4a"><a href="#023459" label="[02:34:59]">&lt;sam_&gt;</a></span><span class="message">much smaller</span></div><div class="line" id="023506"><span class="nick" style="color:#389600"><a href="#023506" label="[02:35:06]">&lt;stikonas&gt;</a></span><span class="message">so I think we can replace current one which depends on ed</span></div><div class="line" id="023515"><span class="nick" style="color:#2e2a4a"><a href="#023515" label="[02:35:15]">&lt;sam_&gt;</a></span><span class="message">sci-calculators/bc-gh, <a rel="nofollow" href="https://git.gavinhoward.com/gavin/bc/">https://git.gavinhoward.com/gavin/bc/</a> </span></div><div class="line" id="023548"><span class="nick" style="color:#389600"><a href="#023548" label="[02:35:48]">&lt;stikonas&gt;</a></span><span class="message">at some point I should try to bootstrap gentoo from live-bootstrap</span></div><div class="line" id="023558"><span class="nick" style="color:#389600"><a href="#023558" label="[02:35:58]">&lt;stikonas&gt;</a></span><span class="message">now that we have python 3.11 and gcc 12 it shouldn't be too hard</span></div><div class="line" id="023602"><span class="nick" style="color:#2e2a4a"><a href="#023602" label="[02:36:02]">&lt;sam_&gt;</a></span><span class="message">:)</span></div><div class="line" id="023654"><span class="nick" style="color:#389600"><a href="#023654" label="[02:36:54]">&lt;stikonas&gt;</a></span><span class="message">install it from stage0 tarball :D</span></div><div class="line" id="041612"><span class="nick" style="color:#6b8072"><a href="#041612" label="[04:16:12]">&lt;oriansj&gt;</a></span><span class="message">nice</span></div><div class="line" id="062419"><span class="nick" style="color:#80b1d3"><a href="#062419" label="[06:24:19]">&lt;roconnor&gt;</a></span><span class="message">kaem's unset seems to unset a whole lot of things.</span></div><div class="line" id="064550"><span class="nick" style="color:#80b1d3"><a href="#064550" label="[06:45:50]">&lt;roconnor&gt;</a></span><span class="message">so what I believe is happening is that collect_command is always leaving a token whose value is NULL at the end of the token stream.</span></div><div class="line" id="064622"><span class="nick" style="color:#80b1d3"><a href="#064622" label="[06:46:22]">&lt;roconnor&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/Kaem/kaem.c#L813">https://github.com/oriansj/mescc-tools/blob/master/Kaem/kaem.c#L813</a> </span></div><div class="line" id="064651"><span class="nick" style="color:#80b1d3"><a href="#064651" label="[06:46:51]">&lt;roconnor&gt;</a></span><span class="message">and here, unset will unset an environement variable if the value of the token to be unset is NULL</span></div><div class="line" id="064714"><span class="nick" style="color:#80b1d3"><a href="#064714" label="[06:47:14]">&lt;roconnor&gt;</a></span><span class="message">thus the command &quot;unset prefix&quot; will unset the prefix environment variable, and then unset the first enviroment variable.</span></div><div class="line" id="064815"><span class="nick" style="color:#80b1d3"><a href="#064815" label="[06:48:15]">&lt;roconnor&gt;</a></span><span class="message">which explain why my &quot;LIBRARY_PATH&quot; is getting unset, and why it doesn't get unset if I add an &quot;A=whatever&quot; environment variable before the LIBRARY_PATH.</span></div><div class="line" id="064859"><span class="nick" style="color:#80b1d3"><a href="#064859" label="[06:48:59]">&lt;roconnor&gt;</a></span><span class="message">I'll see about PRing a patch to just ignore unsetting NULL values.</span></div><div class="line" id="065936"><span class="nick" style="color:#6d2462"><a href="#065936" label="[06:59:36]">&lt;muurkha&gt;</a></span><span class="message">I thing 0x8048000 derives somehow from Xenix or something ridiculous like that</span></div><div class="line" id="070019"><span class="nick" style="color:#6d2462"><a href="#070019" label="[07:00:19]">&lt;muurkha&gt;</a></span><span class="message">*think</span></div><div class="line" id="102427"><span class="nick" style="color:#234e69"><a href="#102427" label="[10:24:27]">&lt;stikonas[m]&gt;</a></span><span class="message">fossy: are we now over CI time limit?</span></div><div class="line" id="113246"><span class="nick" style="color:#6c3d55"><a href="#113246" label="[11:32:46]">&lt;janneke&gt;</a></span><span class="message">stikonas[m]: you were talking about m2-planet built mes on x86_64, right?  that hasn't worked yet, indeed</span></div><div class="line" id="114105"><span class="nick" style="color:#234e69"><a href="#114105" label="[11:41:05]">&lt;stikonas[m]&gt;</a></span><span class="message">janneke: no, I was using self-hosted M2-Planet from stage0-posix</span></div><div class="line" id="114136"><span class="nick" style="color:#234e69"><a href="#114136" label="[11:41:36]">&lt;stikonas[m]&gt;</a></span><span class="message">Oh but yes, I was trying to build mes-m2 with it</span></div><div class="line" id="114201"><span class="nick" style="color:#234e69"><a href="#114201" label="[11:42:01]">&lt;stikonas[m]&gt;</a></span><span class="message">(I misread your question initially)</span></div><div class="line" id="114242"><span class="nick" style="color:#234e69"><a href="#114242" label="[11:42:42]">&lt;stikonas[m]&gt;</a></span><span class="message">It shouldn't be too hard to get it working...</span></div><div class="line" id="114321"><span class="nick" style="color:#234e69"><a href="#114321" label="[11:43:21]">&lt;stikonas[m]&gt;</a></span><span class="message">But there are still quite a few missing things</span></div><div class="line" id="114553"><span class="nick" style="color:#234e69"><a href="#114553" label="[11:45:53]">&lt;stikonas[m]&gt;</a></span><span class="message">I did clean up some of the x86 scripting that I have though</span></div><div class="line" id="114605"><span class="nick" style="color:#234e69"><a href="#114605" label="[11:46:05]">&lt;stikonas[m]&gt;</a></span><span class="message">to make testing on amd64 easier...</span></div><div class="line" id="114726"><span class="nick" style="color:#6c3d55"><a href="#114726" label="[11:47:26]">&lt;janneke&gt;</a></span><span class="message">ACTION recovered the missing kaem.run --bootstrap patch and pushed wip to gitlab</span></div><div class="line" id="115334"><span class="nick" style="color:#6c3d55"><a href="#115334" label="[11:53:34]">&lt;janneke&gt;</a></span><span class="message">&quot;&lt;stikonas&gt; It shouldn't be too hard to get it working...&quot; why do you say that, do you have specific ideas?</span></div><div class="line" id="115453"><span class="nick" style="color:#6c3d55"><a href="#115453" label="[11:54:53]">&lt;janneke&gt;</a></span><span class="message">i guess we could build an x86_64 version via gcc using --with-bootstrap and diff / bisect M1 output, but that could be quite some work yet</span></div><div class="line" id="115546"><span class="nick" style="color:#234e69"><a href="#115546" label="[11:55:46]">&lt;stikonas[m]&gt;</a></span><span class="message">Hmm, I thought there isn't that much x86 specific bits in mes</span></div><div class="line" id="124105"><span class="nick" style="color:#389600"><a href="#124105" label="[12:41:05]">&lt;stikonas&gt;</a></span><span class="message">I guess I can try adding those patches that I had in mind, try to build it and perhaps there will indeed be more problems later on...</span></div><div class="line" id="131213"><span class="nick" style="color:#6c3d55"><a href="#131213" label="[13:12:13]">&lt;janneke&gt;</a></span><span class="message">stikonas: hmm added some debug printing</span></div><div class="line" id="131303"><span class="nick" style="color:#6c3d55"><a href="#131303" label="[13:13:03]">&lt;janneke&gt;</a></span><span class="message">it could be that mes-m2's malloc fails, but itoa also fails (works fine with mes-mescc on x86_64)</span></div><div class="line" id="131320"><span class="nick" style="color:#6c3d55"><a href="#131320" label="[13:13:20]">&lt;janneke&gt;</a></span><span class="message">ACTION goes on to look at itoa</span></div><div class="line" id="141043"><span class="nick" style="color:#6c3d55"><a href="#141043" label="[14:10:43]">&lt;janneke&gt;</a></span><span class="message">stikonas, oriansj: i pushed <a rel="nofollow" href="https://gitlab.com/janneke/mes/-/tree/wip-m2-planet-x86_64-bug">https://gitlab.com/janneke/mes/-/tree/wip-m2-planet-x86_64-bug</a> </span></div><div class="line" id="141317"><span class="nick" style="color:#6c3d55"><a href="#141317" label="[14:13:17]">&lt;janneke&gt;</a></span><span class="message">the top commit exposes two bugs in m2-planet 0.10.0 for x86_64</span></div><div class="line" id="141342"><span class="nick" style="color:#6c3d55"><a href="#141342" label="[14:13:42]">&lt;janneke&gt;</a></span><span class="message">(or it shows something that i'm doing wrong)</span></div><div class="line" id="141441"><span class="nick" style="color:#6c3d55"><a href="#141441" label="[14:14:41]">&lt;janneke&gt;</a></span><span class="message">the toplevel commit message explains what's going wrong</span></div><div class="line" id="141441"><span class="nick" style="color:#6c3d55"><a href="#141441" label="[14:14:41]">&lt;janneke&gt;</a></span><span class="message">fa88e282 REMOVEME x86_64 M2-Planet bug: scaffold/bug.c scaffold/bug.kaem</span></div><div class="line" id="141525"><span class="nick" style="color:#6c3d55"><a href="#141525" label="[14:15:25]">&lt;janneke&gt;</a></span><span class="message">something seems to be going wrong with accessing globals on x86_64 (works fine on x86(</span></div><div class="line" id="142231"><span class="nick" style="color:#234e69"><a href="#142231" label="[14:22:31]">&lt;stikonas[m]&gt;</a></span><span class="message">I'll check when I'm back home</span></div><div class="line" id="142823"><span class="nick" style="color:#6c3d55"><a href="#142823" label="[14:28:23]">&lt;janneke&gt;</a></span><span class="message">stikonas, thanks -- no hurry!</span></div><div class="line" id="142845"><span class="nick" style="color:#6c3d55"><a href="#142845" label="[14:28:45]">&lt;janneke&gt;</a></span><span class="message">ACTION inserts an extra patch with new m2-planet (0.11.0) defines</span></div><div class="line" id="153540"><span class="nick" style="color:#6c3d55"><a href="#153540" label="[15:35:40]">&lt;janneke&gt;</a></span><span class="message">stikonas: headsup, in the introduction of the kaem.x86_64 build</span></div><div class="line" id="153540"><span class="nick" style="color:#6c3d55"><a href="#153540" label="[15:35:40]">&lt;janneke&gt;</a></span><span class="message">c70f5191 XXX DRAFT x86_64: build: Cater for M2-Planet.</span></div><div class="line" id="153609"><span class="nick" style="color:#6c3d55"><a href="#153609" label="[15:36:09]">&lt;janneke&gt;</a></span><span class="message">(looking at the commit i just remembered)</span></div><div class="line" id="153801"><span class="nick" style="color:#6c3d55"><a href="#153801" label="[15:38:01]">&lt;janneke&gt;</a></span><span class="message">that i've been struggling with _start, first trying to use a copy from the mes lib c _start (like i did for x86), but then sort of settling for a _start copied from M2Libc as it just segfaulted -- no idea why</span></div><div class="line" id="153830"><span class="nick" style="color:#6c3d55"><a href="#153830" label="[15:38:30]">&lt;janneke&gt;</a></span><span class="message">it seems that there's a confusion of calling conventions on x86_64</span></div><div class="line" id="194141"><span class="nick" style="color:#389600"><a href="#194141" label="[19:41:41]">&lt;stikonas&gt;</a></span><span class="message">yes, M2libc might be using different calling convention...</span></div><div class="line" id="194153"><span class="nick" style="color:#389600"><a href="#194153" label="[19:41:53]">&lt;stikonas&gt;</a></span><span class="message">though I thought it just pushes things onto stack when calling function...</span></div><div class="line" id="203318"><span class="nick" style="color:#d9d9d9"><a href="#203318" label="[20:33:18]">&lt;stikonas_&gt;</a></span><span class="message">janneke: so I can at least build mes-m2</span></div><div class="line" id="203356"><span class="nick" style="color:#d9d9d9"><a href="#203356" label="[20:33:56]">&lt;stikonas_&gt;</a></span><span class="message">argh, no, I somehow built x86 version..</span></div><div class="line" id="203415"><span class="nick" style="color:#389600"><a href="#203415" label="[20:34:15]">&lt;stikonas&gt;</a></span><span class="message">must have used wrong kaem file...</span></div><div class="line" id="203635"><span class="nick" style="color:#389600"><a href="#203635" label="[20:36:35]">&lt;stikonas&gt;</a></span><span class="message">ok, I also get segfault now with mes-m2</span></div><div class="line" id="203642"><span class="nick" style="color:#389600"><a href="#203642" label="[20:36:42]">&lt;stikonas&gt;</a></span><span class="message">I'll see if I can figure something otu</span></div><div class="line" id="203643"><span class="nick" style="color:#389600"><a href="#203643" label="[20:36:43]">&lt;stikonas&gt;</a></span><span class="message">out</span></div><div class="line" id="204505"><span class="nick" style="color:#389600"><a href="#204505" label="[20:45:05]">&lt;stikonas&gt;</a></span><span class="message">hmm, for some reason gdb does now show any debug info...</span></div><div class="line" id="204515"><span class="nick" style="color:#389600"><a href="#204515" label="[20:45:15]">&lt;stikonas&gt;</a></span><span class="message">it should show function names</span></div><div class="line" id="204523"><span class="nick" style="color:#389600"><a href="#204523" label="[20:45:23]">&lt;stikonas&gt;</a></span><span class="message">let me see if I can figure this out first</span></div><div class="line" id="204527"><span class="nick" style="color:#389600"><a href="#204527" label="[20:45:27]">&lt;stikonas&gt;</a></span><span class="message">otherwise it's very hard to debug</span></div><div class="line" id="204610"><span class="nick" style="color:#389600"><a href="#204610" label="[20:46:10]">&lt;stikonas&gt;</a></span><span class="message">ok, I know what's going on with debug info</span></div><div class="line" id="204612"><span class="nick" style="color:#389600"><a href="#204612" label="[20:46:12]">&lt;stikonas&gt;</a></span><span class="message">will fix it...</span></div><div class="line" id="210337"><span class="nick" style="color:#389600"><a href="#210337" label="[21:03:37]">&lt;stikonas&gt;</a></span><span class="message">hmm, still no debug symbols... hmm...</span></div><div class="line" id="211017"><span class="nick" style="color:#389600"><a href="#211017" label="[21:10:17]">&lt;stikonas&gt;</a></span><span class="message">ok, there are two problems...</span></div><div class="line" id="211907"><span class="nick" style="color:#389600"><a href="#211907" label="[21:19:07]">&lt;stikonas&gt;</a></span><span class="message">janneke: I've fixed a couple of issues that prevented debug info from showing up</span></div><div class="line" id="211924"><span class="nick" style="color:#389600"><a href="#211924" label="[21:19:24]">&lt;stikonas&gt;</a></span><span class="message">could get my patches from <a rel="nofollow" href="https://git.stikonas.eu/andrius/mes/commits/branch/wip-m2-planet-x86_64-bug">https://git.stikonas.eu/andrius/mes/commits/branch/wip-m2-planet-x86_64-bug</a> </span></div><div class="line" id="212010"><span class="nick" style="color:#389600"><a href="#212010" label="[21:20:10]">&lt;stikonas&gt;</a></span><span class="message">on unrelated now, I'm a bit confused how blood_elf_flag=${blood_elf_flag:-} works in kaem but oh well, it seems to have the right value</span></div><div class="line" id="212020"><span class="nick" style="color:#389600"><a href="#212020" label="[21:20:20]">&lt;stikonas&gt;</a></span><span class="message">--64 is now passed</span></div><div class="line" id="212111"><span class="nick" style="color:#389600"><a href="#212111" label="[21:21:11]">&lt;stikonas&gt;</a></span><span class="message">and at least I can now see that segfault happens in gc_init() function</span></div><div class="line" id="212444"><span class="nick" style="color:#389600"><a href="#212444" label="[21:24:44]">&lt;stikonas&gt;</a></span><span class="message">yeah, it's probably either malloc or itoa in that gc_init</span></div><div class="line" id="213107"><span class="nick" style="color:#389600"><a href="#213107" label="[21:31:07]">&lt;stikonas&gt;</a></span><span class="message">hmm, atoi seems to be working fine...</span></div><div class="line" id="214056"><span class="nick" style="color:#389600"><a href="#214056" label="[21:40:56]">&lt;stikonas&gt;</a></span><span class="message">janneke: so I don't think it's either malloc or itoa...</span></div><div class="line" id="214107"><span class="nick" style="color:#389600"><a href="#214107" label="[21:41:07]">&lt;stikonas&gt;</a></span><span class="message">might be that M2-Planet chokes on some advanced stuff</span></div><div class="line" id="214114"><span class="nick" style="color:#389600"><a href="#214114" label="[21:41:14]">&lt;stikonas&gt;</a></span><span class="message">though strange how it works on x86...</span></div><div class="line" id="214215"><span class="nick" style="color:#389600"><a href="#214215" label="[21:42:15]">&lt;stikonas&gt;</a></span><span class="message">anyway, I've found out that in src/gc.c::gc_init() g_cells has nonsense value</span></div><div class="line" id="214235"><span class="nick" style="color:#389600"><a href="#214235" label="[21:42:35]">&lt;stikonas&gt;</a></span><span class="message">oh, maybe it is malloc</span></div><div class="line" id="214241"><span class="nick" style="color:#389600"><a href="#214241" label="[21:42:41]">&lt;stikonas&gt;</a></span><span class="message">malloc returned something strange there</span></div><div class="line" id="214301"><span class="nick" style="color:#bc80bd"><a href="#214301" label="[21:43:01]">&lt;[exa]&gt;</a></span><span class="message">good evening all</span></div><div class="line" id="214621"><span class="nick" style="color:#bc80bd"><a href="#214621" label="[21:46:21]">&lt;[exa]&gt;</a></span><span class="message">I just kindof discovered this whole thing so I'll hang around. As a basic question, is there any plan for a rv64 port?</span></div><div class="line" id="214622"><span class="nick" style="color:#389600"><a href="#214622" label="[21:46:22]">&lt;stikonas&gt;</a></span><span class="message">[exa]: good evening</span></div><div class="line" id="214632"><span class="nick" style="color:#389600"><a href="#214632" label="[21:46:32]">&lt;stikonas&gt;</a></span><span class="message">[exa]: we have riscv64 port of stage-posix</span></div><div class="line" id="214638"><span class="nick" style="color:#bc80bd"><a href="#214638" label="[21:46:38]">&lt;[exa]&gt;</a></span><span class="message">oh nice</span></div><div class="line" id="214645"><span class="nick" style="color:#389600"><a href="#214645" label="[21:46:45]">&lt;stikonas&gt;</a></span><span class="message">not the whole thing though, mes port is not complete</span></div><div class="line" id="214656"><span class="nick" style="color:#389600"><a href="#214656" label="[21:46:56]">&lt;stikonas&gt;</a></span><span class="message">janneke: so I think brk pointer already has nonsense value</span></div><div class="line" id="214727"><span class="nick" style="color:#389600"><a href="#214727" label="[21:47:27]">&lt;stikonas&gt;</a></span><span class="message">[exa]: so there is riscv64 submodule here <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/">https://github.com/oriansj/stage0-posix/</a> </span></div><div class="line" id="214741"><span class="nick" style="color:#389600"><a href="#214741" label="[21:47:41]">&lt;stikonas&gt;</a></span><span class="message">and if you run e.g. bootstrap-seeds/POSIX/riscv64/kaem-optional-seed</span></div><div class="line" id="214746"><span class="nick" style="color:#bc80bd"><a href="#214746" label="[21:47:46]">&lt;[exa]&gt;</a></span><span class="message">I was kinda wondering there, because the rv64 instruction set looks strictly more simpler than the knight instruction set, except for the ugly registers and ints torn into pieces, so how to approach that thing most easily...</span></div><div class="line" id="214749"><span class="nick" style="color:#389600"><a href="#214749" label="[21:47:49]">&lt;stikonas&gt;</a></span><span class="message">ir should build you some tools including M2-PLanet</span></div><div class="line" id="214805"><span class="nick" style="color:#389600"><a href="#214805" label="[21:48:05]">&lt;stikonas&gt;</a></span><span class="message">[exa]: riscv64 instructions were quite nasty...</span></div><div class="line" id="214808"><span class="nick" style="color:#389600"><a href="#214808" label="[21:48:08]">&lt;stikonas&gt;</a></span><span class="message">but we have done it</span></div><div class="line" id="214820"><span class="nick" style="color:#389600"><a href="#214820" label="[21:48:20]">&lt;stikonas&gt;</a></span><span class="message">the problem is that all the constants (immediates) are encoded in a horrible way</span></div><div class="line" id="214829"><span class="nick" style="color:#389600"><a href="#214829" label="[21:48:29]">&lt;stikonas&gt;</a></span><span class="message">so it's quite hard writing first few binaries</span></div><div class="line" id="214833"><span class="nick" style="color:#389600"><a href="#214833" label="[21:48:33]">&lt;stikonas&gt;</a></span><span class="message">until we have code to deal with that</span></div><div class="line" id="214835"><span class="nick" style="color:#bc80bd"><a href="#214835" label="[21:48:35]">&lt;[exa]&gt;</a></span><span class="message">yeah the lovely 10-12 splits</span></div><div class="line" id="214839"><span class="nick" style="color:#389600"><a href="#214839" label="[21:48:39]">&lt;stikonas&gt;</a></span><span class="message">yeah...</span></div><div class="line" id="214849"><span class="nick" style="color:#389600"><a href="#214849" label="[21:48:49]">&lt;stikonas&gt;</a></span><span class="message">once you are passed that, it becomes reasonably nice</span></div><div class="line" id="214935"><span class="nick" style="color:#389600"><a href="#214935" label="[21:49:35]">&lt;stikonas&gt;</a></span><span class="message">[exa]: anyway, you can try running that stage0-posix-riscv64 thing</span></div><div class="line" id="214956"><span class="nick" style="color:#389600"><a href="#214956" label="[21:49:56]">&lt;stikonas&gt;</a></span><span class="message">it will build a few simple tools in the end</span></div><div class="line" id="215411"><span class="nick" style="color:#bc80bd"><a href="#215411" label="[21:54:11]">&lt;[exa]&gt;</a></span><span class="message">oh cool</span></div><div class="line" id="215501"><span class="nick" style="color:#bc80bd"><a href="#215501" label="[21:55:01]">&lt;[exa]&gt;</a></span><span class="message">anyway this is really great, thanks all for contributing :D</span></div><div class="line" id="215611"><span class="nick" style="color:#bc80bd"><a href="#215611" label="[21:56:11]">&lt;[exa]&gt;</a></span><span class="message">stikonas: btw how do you deal with the instruction encodings in the end? (just finished reading the seeds, I expect the actual code will be in the M2-... stuff</span></div><div class="line" id="215617"><span class="nick" style="color:#bc80bd"><a href="#215617" label="[21:56:17]">&lt;[exa]&gt;</a></span><span class="message">)</span></div><div class="line" id="221028"><span class="nick" style="color:#6b8072"><a href="#221028" label="[22:10:28]">&lt;oriansj&gt;</a></span><span class="message">[exa]: we encode the logic in M1 and hex2 in mescc-tools and after that you don't need to generally think about instruction encoding.</span></div><div class="line" id="221131"><span class="nick" style="color:#389600"><a href="#221131" label="[22:11:31]">&lt;stikonas&gt;</a></span><span class="message">[exa]: these are the instructions that are encoded <a rel="nofollow" href="https://github.com/oriansj/M2libc/blob/main/riscv64/riscv64_defs.M1">https://github.com/oriansj/M2libc/blob/main/riscv64/riscv64_defs.M1</a> </span></div><div class="line" id="221157"><span class="nick" style="color:#bc80bd"><a href="#221157" label="[22:11:57]">&lt;[exa]&gt;</a></span><span class="message">ah it's in M2libc, I failed to click through all the way there</span></div><div class="line" id="221159"><span class="nick" style="color:#bc80bd"><a href="#221159" label="[22:11:59]">&lt;[exa]&gt;</a></span><span class="message">thanks a lot!</span></div><div class="line" id="221222"><span class="nick" style="color:#389600"><a href="#221222" label="[22:12:22]">&lt;stikonas&gt;</a></span><span class="message">there is also a copy in stage0-posix-riscv64</span></div><div class="line" id="221237"><span class="nick" style="color:#389600"><a href="#221237" label="[22:12:37]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/stage0-posix-riscv64/blob/bc7a08e9f54095df352de2404574f5ad283971ee/riscv64_defs.M1">https://github.com/oriansj/stage0-posix-riscv64/blob/bc7a08e9f54095df352de2404574f5ad283971ee/riscv64_defs.M1</a> </span></div><div class="line" id="221313"><span class="nick" style="color:#389600"><a href="#221313" label="[22:13:13]">&lt;stikonas&gt;</a></span><span class="message">and this is basically everything we need and more</span></div><div class="line" id="221320"><span class="nick" style="color:#389600"><a href="#221320" label="[22:13:20]">&lt;stikonas&gt;</a></span><span class="message">it's a bit uglier for x86</span></div><div class="line" id="221339"><span class="nick" style="color:#bc80bd"><a href="#221339" label="[22:13:39]">&lt;[exa]&gt;</a></span><span class="message">...I gave up on x86 opcodes :D</span></div><div class="line" id="221341"><span class="nick" style="color:#389600"><a href="#221341" label="[22:13:41]">&lt;stikonas&gt;</a></span><span class="message">e.g. compare to <a rel="nofollow" href="https://github.com/oriansj/M2libc/blob/main/x86/x86_defs.M1">https://github.com/oriansj/M2libc/blob/main/x86/x86_defs.M1</a> </span></div><div class="line" id="221351"><span class="nick" style="color:#389600"><a href="#221351" label="[22:13:51]">&lt;stikonas&gt;</a></span><span class="message">you have to encode the whole &quot;line&quot;</span></div><div class="line" id="221410"><span class="nick" style="color:#389600"><a href="#221410" label="[22:14:10]">&lt;stikonas&gt;</a></span><span class="message">muurkha said it's somewhat nicer in octal form but oh well...</span></div><div class="line" id="221431"><span class="nick" style="color:#389600"><a href="#221431" label="[22:14:31]">&lt;stikonas&gt;</a></span><span class="message">anyway, for risc-v those definitions are basically complete and don't need any changes</span></div><div class="line" id="221507"><span class="nick" style="color:#389600"><a href="#221507" label="[22:15:07]">&lt;stikonas&gt;</a></span><span class="message">(at the expense of more complicated early binaries)</span></div><div class="line" id="221517"><span class="nick" style="color:#6d2462"><a href="#221517" label="[22:15:17]">&lt;muurkha&gt;</a></span><span class="message">risc-v opcodes are annoying to read in any base</span></div><div class="line" id="221541"><span class="nick" style="color:#389600"><a href="#221541" label="[22:15:41]">&lt;stikonas&gt;</a></span><span class="message">yeah, risc-v might be easiest in binary...</span></div><div class="line" id="221553"><span class="nick" style="color:#389600"><a href="#221553" label="[22:15:53]">&lt;stikonas&gt;</a></span><span class="message">though binary is hard to read due to very long numbers</span></div><div class="line" id="221604"><span class="nick" style="color:#bc80bd"><a href="#221604" label="[22:16:04]">&lt;[exa]&gt;</a></span><span class="message">base-conditionalriscvpermutation helps</span></div><div class="line" id="221629"><span class="nick" style="color:#bc80bd"><a href="#221629" label="[22:16:29]">&lt;[exa]&gt;</a></span><span class="message">I understood they did it because of cable wiring but man, the price for a few gates...</span></div><div class="line" id="221716"><span class="nick" style="color:#389600"><a href="#221716" label="[22:17:16]">&lt;stikonas&gt;</a></span><span class="message">I was using this template that I created to help with encoding... <a rel="nofollow" href="https://github.com/oriansj/stage0-posix-riscv64/blob/bc7a08e9f54095df352de2404574f5ad283971ee/Development/immediate_transformations.txt">https://github.com/oriansj/stage0-posix-riscv64/blob/bc7a08e9f54095df352de2404574f5ad283971ee/Development/immediate_transformations.txt</a> </span></div><div class="line" id="221744"><span class="nick" style="color:#389600"><a href="#221744" label="[22:17:44]">&lt;stikonas&gt;</a></span><span class="message">(these are in binary)</span></div><div class="line" id="221759"><span class="nick" style="color:#6d2462"><a href="#221759" label="[22:17:59]">&lt;muurkha&gt;</a></span><span class="message">[exa]: it's not so much the money or area cost of the gates but the latency cost</span></div><div class="line" id="221814"><span class="nick" style="color:#389600"><a href="#221814" label="[22:18:14]">&lt;stikonas&gt;</a></span><span class="message">so I was basically converting hex to binary, applying those permutations from that txt file and converting back to hex</span></div><div class="line" id="221827"><span class="nick" style="color:#6d2462"><a href="#221827" label="[22:18:27]">&lt;muurkha&gt;</a></span><span class="message">adding more muxes to instruction decode slows down your achievable clock</span></div><div class="line" id="221846"><span class="nick" style="color:#bc80bd"><a href="#221846" label="[22:18:46]">&lt;[exa]&gt;</a></span><span class="message">aaaaaanyway, I'm here mostly because I was playing with tiny macrolanguages too, basically trying to offload a lot of overhead from tools to a simple thing that just preprocesses nice prolog-like syntax, and was thinking about bootstrapping the thing with lisp too oneday (perhaps with a bit of codegolfing, good macros are good)</span></div><div class="line" id="221929"><span class="nick" style="color:#bc80bd"><a href="#221929" label="[22:19:29]">&lt;[exa]&gt;</a></span><span class="message">and then yesterday I spot this project... well I'll see if it fits somewhere. :D</span></div><div class="line" id="222019"><span class="nick" style="color:#6d2462"><a href="#222019" label="[22:20:19]">&lt;muurkha&gt;</a></span><span class="message">tiny macro languages like GPT/m6?</span></div><div class="line" id="222024"><span class="nick" style="color:#6d2462"><a href="#222024" label="[22:20:24]">&lt;muurkha&gt;</a></span><span class="message">uh, GPM</span></div><div class="line" id="222105"><span class="nick" style="color:#6d2462"><a href="#222105" label="[22:21:05]">&lt;muurkha&gt;</a></span><span class="message">tiny macro languages can be pretty powerful, but they are tricksy</span></div><div class="line" id="222239"><span class="nick" style="color:#bc80bd"><a href="#222239" label="[22:22:39]">&lt;[exa]&gt;</a></span><span class="message">GPM?</span></div><div class="line" id="222327"><span class="nick" style="color:#bc80bd"><a href="#222327" label="[22:23:27]">&lt;[exa]&gt;</a></span><span class="message">ah finally search success</span></div><div class="line" id="222426"><span class="nick" style="color:#6d2462"><a href="#222426" label="[22:24:26]">&lt;muurkha&gt;</a></span><span class="message">sorry, the general-purpose macro language that M6 was a copy of</span></div><div class="line" id="222450"><span class="nick" style="color:#6d2462"><a href="#222450" label="[22:24:50]">&lt;muurkha&gt;</a></span><span class="message">by Christopher Strachey</span></div><div class="line" id="222504"><span class="nick" style="color:#bc80bd"><a href="#222504" label="[22:25:04]">&lt;[exa]&gt;</a></span><span class="message">uuuh cool</span></div><div class="line" id="222524"><span class="nick" style="color:#bc80bd"><a href="#222524" label="[22:25:24]">&lt;[exa]&gt;</a></span><span class="message">found it in gnu m4 history manual</span></div><div class="line" id="222638"><span class="nick" style="color:#bc80bd"><a href="#222638" label="[22:26:38]">&lt;[exa]&gt;</a></span><span class="message">no actually more towards making the syntax more humane than expanding a lot of stuff. The target was lisp which can expand much stuff itself anyway</span></div><div class="line" id="222643"><span class="nick" style="color:#6d2462"><a href="#222643" label="[22:26:43]">&lt;muurkha&gt;</a></span><span class="message">the m4 manual says GPM fit into 250 machine instructions, presumably on the Titan</span></div><div class="line" id="222654"><span class="nick" style="color:#bc80bd"><a href="#222654" label="[22:26:54]">&lt;[exa]&gt;</a></span><span class="message">yeah that's a nice feat</span></div><div class="line" id="222707"><span class="nick" style="color:#6d2462"><a href="#222707" label="[22:27:07]">&lt;muurkha&gt;</a></span><span class="message">which is 1536 bytes</span></div><div class="line" id="222737"><span class="nick" style="color:#6d2462"><a href="#222737" label="[22:27:37]">&lt;muurkha&gt;</a></span><span class="message">but I haven't found a reference for that claim in the contemporary literature</span></div><div class="line" id="222820"><span class="nick" style="color:#6d2462"><a href="#222820" label="[22:28:20]">&lt;muurkha&gt;</a></span><span class="message">you might be interested in qfitzah, which is an experiment I've been trying</span></div><div class="line" id="222923"><span class="nick" style="color:#bc80bd"><a href="#222923" label="[22:29:23]">&lt;[exa]&gt;</a></span><span class="message">I was writing a prolog the other day and realized the usual operator machinery can be extended there, e.g. by allowing juxtaposed literals (like with lisps and haskells) and more complex operators (aka definable parentheses) and there seems to be an ugly load of uses for that when writing transpilers</span></div><div class="line" id="222943"><span class="nick" style="color:#6d2462"><a href="#222943" label="[22:29:43]">&lt;muurkha&gt;</a></span><span class="message">it's a term-rewriting language, like Q, Aardappel, or Mathematica, using S-expression syntax</span></div><div class="line" id="223036"><span class="nick" style="color:#6d2462"><a href="#223036" label="[22:30:36]">&lt;muurkha&gt;</a></span><span class="message">definable parentheses is a pretty interesting idea!  is the idea that parens are just like data?</span></div><div class="line" id="223036"><span class="nick" style="color:#bc80bd"><a href="#223036" label="[22:30:36]">&lt;[exa]&gt;</a></span><span class="message">ha I stumbled upon that one sometime already, cool</span></div><div class="line" id="223048"><span class="nick" style="color:#6d2462"><a href="#223048" label="[22:30:48]">&lt;muurkha&gt;</a></span><span class="message">on what?</span></div><div class="line" id="223103"><span class="nick" style="color:#bc80bd"><a href="#223103" label="[22:31:03]">&lt;[exa]&gt;</a></span><span class="message">on qfitzah</span></div><div class="line" id="223116"><span class="nick" style="color:#6d2462"><a href="#223116" label="[22:31:16]">&lt;muurkha&gt;</a></span><span class="message">oh neat</span></div><div class="line" id="223124"><span class="nick" style="color:#bc80bd"><a href="#223124" label="[22:31:24]">&lt;[exa]&gt;</a></span><span class="message">browser tells me I've been on that link but it might have been quite a bit of time</span></div><div class="line" id="223146"><span class="nick" style="color:#6d2462"><a href="#223146" label="[22:31:46]">&lt;muurkha&gt;</a></span><span class="message">my original writeup is <a rel="nofollow" href="https://dernocua.github.io/notes/term-rewriting-micro-interpreter.html">https://dernocua.github.io/notes/term-rewriting-micro-interpreter.html</a> </span></div><div class="line" id="223147"><span class="nick" style="color:#bc80bd"><a href="#223147" label="[22:31:47]">&lt;[exa]&gt;</a></span><span class="message">probably because of googling stuff for that prolog</span></div><div class="line" id="223158"><span class="nick" style="color:#bc80bd"><a href="#223158" label="[22:31:58]">&lt;[exa]&gt;</a></span><span class="message">yap that one</span></div><div class="line" id="223224"><span class="nick" style="color:#6d2462"><a href="#223224" label="[22:32:24]">&lt;muurkha&gt;</a></span><span class="message">my prototype implementation in i386 assembly is <a rel="nofollow" href="http://canonical.org/~kragen/sw/dev3/qfitzah.s">http://canonical.org/~kragen/sw/dev3/qfitzah.s</a> </span></div><div class="line" id="223234"><span class="nick" style="color:#bc80bd"><a href="#223234" label="[22:32:34]">&lt;[exa]&gt;</a></span><span class="message">ha you might like some dirty trickery from lambda calculi implementation</span></div><div class="line" id="223244"><span class="nick" style="color:#6d2462"><a href="#223244" label="[22:32:44]">&lt;muurkha&gt;</a></span><span class="message">I bet I would</span></div><div class="line" id="223359"><span class="nick" style="color:#6d2462"><a href="#223359" label="[22:33:59]">&lt;muurkha&gt;</a></span><span class="message">example input for qfitzah: <a rel="nofollow" href="http://canonical.org/~kragen/sw/dev3/example.qf1">http://canonical.org/~kragen/sw/dev3/example.qf1</a> </span></div><div class="line" id="223441"><span class="nick" style="color:#6d2462"><a href="#223441" label="[22:34:41]">&lt;muurkha&gt;</a></span><span class="message">I need to fix a bug in the implementation that keeps you from just redirecting the input</span></div><div class="line" id="223512"><span class="nick" style="color:#6d2462"><a href="#223512" label="[22:35:12]">&lt;muurkha&gt;</a></span><span class="message">right now the implementation depends on each read() call returning exactly one line of input</span></div><div class="line" id="223543"><span class="nick" style="color:#6d2462"><a href="#223543" label="[22:35:43]">&lt;muurkha&gt;</a></span><span class="message">so <a rel="nofollow" href="http://canonical.org/~kragen/sw/dev3/Makefile">http://canonical.org/~kragen/sw/dev3/Makefile</a>  does while read line; do echo &quot;$$line&quot;; sleep 0; done &lt; example.qf1 | ./qfitzah</span></div><div class="line" id="223620"><span class="nick" style="color:#bc80bd"><a href="#223620" label="[22:36:20]">&lt;[exa]&gt;</a></span><span class="message">oh that's nicely declarative</span></div><div class="line" id="223637"><span class="nick" style="color:#6d2462"><a href="#223637" label="[22:36:37]">&lt;muurkha&gt;</a></span><span class="message">and the executable is 1K!</span></div><div class="line" id="223651"><span class="nick" style="color:#6d2462"><a href="#223651" label="[22:36:51]">&lt;muurkha&gt;</a></span><span class="message">smaller than GPM on the Titan :)</span></div><div class="line" id="223727"><span class="nick" style="color:#6d2462"><a href="#223727" label="[22:37:27]">&lt;muurkha&gt;</a></span><span class="message">but not nearly as small as stikonas's hex0_riscv64 that was inspiring me, sadly</span></div><div class="line" id="223757"><span class="nick" style="color:#6d2462"><a href="#223757" label="[22:37:57]">&lt;muurkha&gt;</a></span><span class="message">a drawback of the qfitzah S-expression design is that there's no reasonable way to write a list</span></div><div class="line" id="223913"><span class="nick" style="color:#6d2462"><a href="#223913" label="[22:39:13]">&lt;muurkha&gt;</a></span><span class="message">you'd like to be able to use input or output syntax something like [3, 1, 4, 1, 5, 9] that you can then iterate over, but as you can see, the closest I've gotten is</span></div><div class="line" id="223933"><span class="nick" style="color:#6d2462"><a href="#223933" label="[22:39:33]">&lt;muurkha&gt;</a></span><span class="message">(Cons 3 (Cons 1 (Cons 4 (Cons 1 ...))))</span></div><div class="line" id="224032"><span class="nick" style="color:#bc80bd"><a href="#224032" label="[22:40:32]">&lt;[exa]&gt;</a></span><span class="message">ok well that's the tool I'm writing</span></div><div class="line" id="224033"><span class="nick" style="color:#bc80bd"><a href="#224033" label="[22:40:33]">&lt;[exa]&gt;</a></span><span class="message">:D</span></div><div class="line" id="224121"><span class="nick" style="color:#bc80bd"><a href="#224121" label="[22:41:21]">&lt;[exa]&gt;</a></span><span class="message">and I originally wanted it to make minikanren a bit less eye-forking experience, this would be a valid usecase</span></div><div class="line" id="224127"><span class="nick" style="color:#6d2462"><a href="#224127" label="[22:41:27]">&lt;muurkha&gt;</a></span><span class="message">one way out is syntactic sugar, like in Prolog where that's equivalent to [3 | [1 | [4 | ...]]]</span></div><div class="line" id="224235"><span class="nick" style="color:#bc80bd"><a href="#224235" label="[22:42:35]">&lt;[exa]&gt;</a></span><span class="message">you need to parse it somehow, from the parser you get out as something like [](','(3, ','(1, ','(4, ...))))</span></div><div class="line" id="224241"><span class="nick" style="color:#389600"><a href="#224241" label="[22:42:41]">&lt;stikonas&gt;</a></span><span class="message">hex0_riscv64 was actually originally written by ekaitz</span></div><div class="line" id="224304"><span class="nick" style="color:#389600"><a href="#224304" label="[22:43:04]">&lt;stikonas&gt;</a></span><span class="message">though I've reworked it a bit later</span></div><div class="line" id="224308"><span class="nick" style="color:#6d2462"><a href="#224308" label="[22:43:08]">&lt;muurkha&gt;</a></span><span class="message">but that's kind of a special case, and adding special cases to the grammar bloats the interpreter</span></div><div class="line" id="224317"><span class="nick" style="color:#389600"><a href="#224317" label="[22:43:17]">&lt;stikonas&gt;</a></span><span class="message">but the other riscv64 binaries are by me...</span></div><div class="line" id="224328"><span class="nick" style="color:#bc80bd"><a href="#224328" label="[22:43:28]">&lt;[exa]&gt;</a></span><span class="message">muurkha: yeah decoupling it to another tool is the pint</span></div><div class="line" id="224330"><span class="nick" style="color:#bc80bd"><a href="#224330" label="[22:43:30]">&lt;[exa]&gt;</a></span><span class="message">*point</span></div><div class="line" id="224339"><span class="nick" style="color:#6d2462"><a href="#224339" label="[22:43:39]">&lt;muurkha&gt;</a></span><span class="message">stikonas: yes, but what inspired me was when you got it down to 392 bytes</span></div><div class="line" id="224437"><span class="nick" style="color:#6d2462"><a href="#224437" label="[22:44:37]">&lt;muurkha&gt;</a></span><span class="message">but it occurred to me that maybe I could take the approach taken in Haskell, the lambda-calculus, and SKI-combinators, where A B C D E is syntactic sugar for ((((A B) C) D) E)</span></div><div class="line" id="224446"><span class="nick" style="color:#bc80bd"><a href="#224446" label="[22:44:46]">&lt;[exa]&gt;</a></span><span class="message">muurkha: btw good parsers unfortunately aren't small, the logic you need to generate there is roughly equivalent to all cuts in the grammar, which grows a lot</span></div><div class="line" id="224650"><span class="nick" style="color:#6d2462"><a href="#224650" label="[22:46:50]">&lt;muurkha&gt;</a></span><span class="message">dunno, the S-expression parser in qfitzah is uh</span></div><div class="line" id="224819"><span class="nick" style="color:#bc80bd"><a href="#224819" label="[22:48:19]">&lt;[exa]&gt;</a></span><span class="message">muurkha: with the operators I simply had it as a special case that prevents errors, see here <a rel="nofollow" href="https://gitea.blesmrt.net/exa/prlg/src/branch/master/app/Parser.hs#L317">https://gitea.blesmrt.net/exa/prlg/src/branch/master/app/Parser.hs#L317</a> </span></div><div class="line" id="224909"><span class="nick" style="color:#6d2462"><a href="#224909" label="[22:49:09]">&lt;muurkha&gt;</a></span><span class="message">335 bytes currently?  including some stuff that isn't used about reading integers</span></div><div class="line" id="224935"><span class="nick" style="color:#bc80bd"><a href="#224935" label="[22:49:35]">&lt;[exa]&gt;</a></span><span class="message">(btw the above thing is not the one that should fit into &lt;1kB :D )</span></div><div class="line" id="225052"><span class="nick" style="color:#6d2462"><a href="#225052" label="[22:50:52]">&lt;muurkha&gt;</a></span><span class="message">interesting, you're writing the parser in the rewriting language itself?  are you going to compile it or interpret it?</span></div><div class="line" id="225104"><span class="nick" style="color:#6d2462"><a href="#225104" label="[22:51:04]">&lt;muurkha&gt;</a></span><span class="message">it's pretty</span></div><div class="line" id="225106"><span class="nick" style="color:#bc80bd"><a href="#225106" label="[22:51:06]">&lt;[exa]&gt;</a></span><span class="message">this is a playground project</span></div><div class="line" id="225206"><span class="nick" style="color:#6d2462"><a href="#225206" label="[22:52:06]">&lt;muurkha&gt;</a></span><span class="message">xs@(_:_) means &quot;xs, which should also be a pair of two things I don't care about&quot;?</span></div><div class="line" id="225241"><span class="nick" style="color:#bc80bd"><a href="#225241" label="[22:52:41]">&lt;[exa]&gt;</a></span><span class="message">basically the thing for bootstrapping was supposed to be a nice language input (like the one parsed here) + some simple backend for spewing out the output in some way, probably lisp</span></div><div class="line" id="225306"><span class="nick" style="color:#bc80bd"><a href="#225306" label="[22:53:06]">&lt;[exa]&gt;</a></span><span class="message">yeah xs@(_:_) means &quot;it's a cons but that's all we care about&quot;</span></div><div class="line" id="225311"><span class="nick" style="color:#6d2462"><a href="#225311" label="[22:53:11]">&lt;muurkha&gt;</a></span><span class="message">right</span></div><div class="line" id="225354"><span class="nick" style="color:#6d2462"><a href="#225354" label="[22:53:54]">&lt;muurkha&gt;</a></span><span class="message">I'm curious why you're doing a Prattish sort of thing rather than a PEG</span></div><div class="line" id="225428"><span class="nick" style="color:#bc80bd"><a href="#225428" label="[22:54:28]">&lt;[exa]&gt;</a></span><span class="message">basically if there's something in the queue that didn't trigger the previous operator handling, it's a literal-ish thing, so I just smuggle the empty &quot;operator&quot; there and let it handle the rest</span></div><div class="line" id="225429"><span class="nick" style="color:#6d2462"><a href="#225429" label="[22:54:29]">&lt;muurkha&gt;</a></span><span class="message">if I'm understanding the general idea</span></div><div class="line" id="225459"><span class="nick" style="color:#bc80bd"><a href="#225459" label="[22:54:59]">&lt;[exa]&gt;</a></span><span class="message">yeah well, for PEGs you'd need to make the rules and priority rules and everything everytime the user changes the parsing with a new operator definition</span></div><div class="line" id="225537"><span class="nick" style="color:#6d2462"><a href="#225537" label="[22:55:37]">&lt;muurkha&gt;</a></span><span class="message">oh, yeah, I didn't realize the operator precedence was run-time redefinable</span></div><div class="line" id="225542"><span class="nick" style="color:#bc80bd"><a href="#225542" label="[22:55:42]">&lt;[exa]&gt;</a></span><span class="message">you can do stuff like `:- op(500, xfy, +)`</span></div><div class="line" id="225551"><span class="nick" style="color:#6d2462"><a href="#225551" label="[22:55:51]">&lt;muurkha&gt;</a></span><span class="message">right, like Prolog</span></div><div class="line" id="225551"><span class="nick" style="color:#bc80bd"><a href="#225551" label="[22:55:51]">&lt;[exa]&gt;</a></span><span class="message">it's brutally powerful</span></div><div class="line" id="225634"><span class="nick" style="color:#6d2462"><a href="#225634" label="[22:56:34]">&lt;muurkha&gt;</a></span><span class="message">this syntax seems nicer than Prolog tho</span></div><div class="line" id="225640"><span class="nick" style="color:#bc80bd"><a href="#225640" label="[22:56:40]">&lt;[exa]&gt;</a></span><span class="message">btw the other thing in this one is that I cloned the vienna abstract machine, it has a nice methodology for compiling the patternmatches</span></div><div class="line" id="225718"><span class="nick" style="color:#bc80bd"><a href="#225718" label="[22:57:18]">&lt;[exa]&gt;</a></span><span class="message">in this one the only extra thing is that the 'a b c' parses</span></div><div class="line" id="225736"><span class="nick" style="color:#6d2462"><a href="#225736" label="[22:57:36]">&lt;muurkha&gt;</a></span><span class="message">you seem to have made the same decision as in Qfitzah about distinguishing constants from variables via caapitalization?  but then I'm puzzled why `ho` is lowercase</span></div><div class="line" id="225745"><span class="nick" style="color:#bc80bd"><a href="#225745" label="[22:57:45]">&lt;[exa]&gt;</a></span><span class="message">that's the prolog convention</span></div><div class="line" id="225808"><span class="nick" style="color:#bc80bd"><a href="#225808" label="[22:58:08]">&lt;[exa]&gt;</a></span><span class="message">X is variable, x is basically a lispy 'x symbol</span></div><div class="line" id="225808"><span class="nick" style="color:#6d2462"><a href="#225808" label="[22:58:08]">&lt;muurkha&gt;</a></span><span class="message">except in Qfitzah I did it backwards</span></div><div class="line" id="225823"><span class="nick" style="color:#bc80bd"><a href="#225823" label="[22:58:23]">&lt;[exa]&gt;</a></span><span class="message">yap kinda haskell way</span></div><div class="line" id="225853"><span class="nick" style="color:#6d2462"><a href="#225853" label="[22:58:53]">&lt;muurkha&gt;</a></span><span class="message">yes, but in ho ops vs xs@(_:_) I assume all of those are variables?</span></div><div class="line" id="225929"><span class="nick" style="color:#6d2462"><a href="#225929" label="[22:59:29]">&lt;muurkha&gt;</a></span><span class="message">is do-notation an indentation-sensitive monadic bind thing like in Haskell?</span></div><div class="line" id="225936"><span class="nick" style="color:#bc80bd"><a href="#225936" label="[22:59:36]">&lt;[exa]&gt;</a></span><span class="message">non-operators, there's no distinction yet between atom semantics at that point</span></div><div class="line" id="230009"><span class="nick" style="color:#bc80bd"><a href="#230009" label="[23:00:09]">&lt;[exa]&gt;</a></span><span class="message">re do-notation, that was one interesting thing I wanted to have done reasonably without the indentation tricks</span></div><div class="line" id="230022"><span class="nick" style="color:#bc80bd"><a href="#230022" label="[23:00:22]">&lt;[exa]&gt;</a></span><span class="message">btw this doesn't bootstrap itself! :D</span></div><div class="line" id="230038"><span class="nick" style="color:#bc80bd"><a href="#230038" label="[23:00:38]">&lt;[exa]&gt;</a></span><span class="message">(yet :D )</span></div><div class="line" id="230042"><span class="nick" style="color:#6d2462"><a href="#230042" label="[23:00:42]">&lt;muurkha&gt;</a></span><span class="message">I was wondering how that worked :)</span></div><div class="line" id="230113"><span class="nick" style="color:#bc80bd"><a href="#230113" label="[23:01:13]">&lt;[exa]&gt;</a></span><span class="message">no it's just a haskelly prolog to play with lowlevel prolog impls</span></div><div class="line" id="231122"><span class="nick" style="color:#6d2462"><a href="#231122" label="[23:11:22]">&lt;muurkha&gt;</a></span><span class="message">so are you doing the prologgy backtracking thing?</span></div><div class="line" id="231131"><span class="nick" style="color:#6d2462"><a href="#231131" label="[23:11:31]">&lt;muurkha&gt;</a></span><span class="message">that makes parsing super easy</span></div><div class="line" id="231216"><span class="nick" style="color:#bc80bd"><a href="#231216" label="[23:12:16]">&lt;[exa]&gt;</a></span><span class="message">yeah the prology parsers work with this, I don't have any them handy but it can be done in the prolog</span></div><div class="line" id="231243"><span class="nick" style="color:#bc80bd"><a href="#231243" label="[23:12:43]">&lt;[exa]&gt;</a></span><span class="message">this is the &quot;stdlib&quot; with the implementation of --&gt; <a rel="nofollow" href="https://gitea.blesmrt.net/exa/prlg/src/branch/master/inst/prelude.pl#L73">https://gitea.blesmrt.net/exa/prlg/src/branch/master/inst/prelude.pl#L73</a> </span></div><div class="line" id="231253"><span class="nick" style="color:#bc80bd"><a href="#231253" label="[23:12:53]">&lt;[exa]&gt;</a></span><span class="message">in that you can write normal prolog grammars (PEGs)</span></div><div class="line" id="231324"><span class="nick" style="color:#6d2462"><a href="#231324" label="[23:13:24]">&lt;muurkha&gt;</a></span><span class="message">PEGs are not normal prolog grammars</span></div><div class="line" id="231343"><span class="nick" style="color:#bc80bd"><a href="#231343" label="[23:13:43]">&lt;[exa]&gt;</a></span><span class="message">afaik the way they parse is pretty close</span></div><div class="line" id="231402"><span class="nick" style="color:#6d2462"><a href="#231402" label="[23:14:02]">&lt;muurkha&gt;</a></span><span class="message">PEGs have a worst-case linear-time parsing algorithm, Prolog DCGs are exponential-time</span></div><div class="line" id="231404"><span class="nick" style="color:#bc80bd"><a href="#231404" label="[23:14:04]">&lt;[exa]&gt;</a></span><span class="message">DCGs is the normal name, but the style is PEGs basically</span></div><div class="line" id="231414"><span class="nick" style="color:#bc80bd"><a href="#231414" label="[23:14:14]">&lt;[exa]&gt;</a></span><span class="message">wait really?</span></div><div class="line" id="231441"><span class="nick" style="color:#6d2462"><a href="#231441" label="[23:14:41]">&lt;muurkha&gt;</a></span><span class="message">not in the usual case, and you can manually insert cuts if it's becoming a problem</span></div><div class="line" id="231455"><span class="nick" style="color:#6d2462"><a href="#231455" label="[23:14:55]">&lt;muurkha&gt;</a></span><span class="message">but yeah they're pretty similar</span></div><div class="line" id="231500"><span class="nick" style="color:#bc80bd"><a href="#231500" label="[23:15:00]">&lt;[exa]&gt;</a></span><span class="message">what's the linear-time PEG algorithm?</span></div><div class="line" id="231503"><span class="nick" style="color:#bc80bd"><a href="#231503" label="[23:15:03]">&lt;[exa]&gt;</a></span><span class="message">that's new to me</span></div><div class="line" id="231505"><span class="nick" style="color:#6d2462"><a href="#231505" label="[23:15:05]">&lt;muurkha&gt;</a></span><span class="message">Packrat</span></div><div class="line" id="231523"><span class="nick" style="color:#bc80bd"><a href="#231523" label="[23:15:23]">&lt;[exa]&gt;</a></span><span class="message">packrat isn't linear time</span></div><div class="line" id="231536"><span class="nick" style="color:#bc80bd"><a href="#231536" label="[23:15:36]">&lt;[exa]&gt;</a></span><span class="message">(or is it?)</span></div><div class="line" id="231537"><span class="nick" style="color:#6d2462"><a href="#231537" label="[23:15:37]">&lt;muurkha&gt;</a></span><span class="message">it is, that's the whole point</span></div><div class="line" id="231604"><span class="nick" style="color:#6d2462"><a href="#231604" label="[23:16:04]">&lt;muurkha&gt;</a></span><span class="message">PEGs implicitly insert a cut at the end of each production, whichh is what allows Packrat to safely memoize the parse</span></div><div class="line" id="231627"><span class="nick" style="color:#bc80bd"><a href="#231627" label="[23:16:27]">&lt;[exa]&gt;</a></span><span class="message">doesn't it have like a yuge constant derived off the grammar size?</span></div><div class="line" id="231632"><span class="nick" style="color:#6d2462"><a href="#231632" label="[23:16:32]">&lt;muurkha&gt;</a></span><span class="message">yes</span></div><div class="line" id="231639"><span class="nick" style="color:#bc80bd"><a href="#231639" label="[23:16:39]">&lt;[exa]&gt;</a></span><span class="message">ah ok that would explain it</span></div><div class="line" id="231701"><span class="nick" style="color:#bc80bd"><a href="#231701" label="[23:17:01]">&lt;[exa]&gt;</a></span><span class="message">( btw I found this one nice <a rel="nofollow" href="https://github.com/lukehutch/pikaparser">https://github.com/lukehutch/pikaparser</a>  )</span></div><div class="line" id="231717"><span class="nick" style="color:#6d2462"><a href="#231717" label="[23:17:17]">&lt;muurkha&gt;</a></span><span class="message">although it's still good enough to be usable in practice</span></div><div class="line" id="231840"><span class="nick" style="color:#bc80bd"><a href="#231840" label="[23:18:40]">&lt;[exa]&gt;</a></span><span class="message">aaaaaaaanyway, the plan here was to have &quot;a nice language&quot; -&gt; lisp with kanren -&gt; this should be able to bootstrap self</span></div><div class="line" id="232010"><span class="nick" style="color:#bc80bd"><a href="#232010" label="[23:20:10]">&lt;[exa]&gt;</a></span><span class="message">btw if I read right the stage2 lisp should be able to support minikanren, right?</span></div><div class="line" id="232050"><span class="nick" style="color:#6d2462"><a href="#232050" label="[23:20:50]">&lt;muurkha&gt;</a></span><span class="message">to bootstrap itself?</span></div><div class="line" id="232127"><span class="nick" style="color:#6d2462"><a href="#232127" label="[23:21:27]">&lt;muurkha&gt;</a></span><span class="message">I think so, yeah, though I've only ever implemented microkanren</span></div><div class="line" id="232654"><span class="nick" style="color:#bc80bd"><a href="#232654" label="[23:26:54]">&lt;[exa]&gt;</a></span><span class="message">the step between micro and mini is a few more macros, nothing harsh tbh</span></div><div class="line" id="232702"><span class="nick" style="color:#bc80bd"><a href="#232702" label="[23:27:02]">&lt;[exa]&gt;</a></span><span class="message">good</span></div><div class="line" id="232705"><span class="nick" style="color:#bc80bd"><a href="#232705" label="[23:27:05]">&lt;[exa]&gt;</a></span><span class="message">very good</span></div><div class="line" id="232729"><span class="nick" style="color:#bc80bd"><a href="#232729" label="[23:27:29]">&lt;[exa]&gt;</a></span><span class="message">nvm I need to have some sleep, thanks a lot for discussions (and for working on this! certainly the most enlightening find in the last few months :] )</span></div><div class="line" id="233741"><span class="nick" style="color:#6d2462"><a href="#233741" label="[23:37:41]">&lt;muurkha&gt;</a></span><span class="message">for working on what?</span></div><div class="line" id="233747"><span class="nick" style="color:#6d2462"><a href="#233747" label="[23:37:47]">&lt;muurkha&gt;</a></span><span class="message">sleep well!</span></div><div class="line" id="233927"><span class="nick" style="color:#389600"><a href="#233927" label="[23:39:27]">&lt;stikonas&gt;</a></span><span class="message">janneke: I think I have some idea what is going wrong</span></div><div class="line" id="234006"><span class="nick" style="color:#389600"><a href="#234006" label="[23:40:06]">&lt;stikonas&gt;</a></span><span class="message">janneke: look at the global list in M1 file: <a rel="nofollow" href="https://paste.debian.net/1278960/">https://paste.debian.net/1278960/</a> </span></div><div class="line" id="234021"><span class="nick" style="color:#389600"><a href="#234021" label="[23:40:21]">&lt;stikonas&gt;</a></span><span class="message">that would work fine on 32-bits</span></div><div class="line" id="234027"><span class="nick" style="color:#389600"><a href="#234027" label="[23:40:27]">&lt;stikonas&gt;</a></span><span class="message">as %0 is 32-bit number</span></div><div class="line" id="234134"><span class="nick" style="color:#389600"><a href="#234134" label="[23:41:34]">&lt;stikonas&gt;</a></span><span class="message">now we need to figure out what causes this miscompilation</span></div><div class="line" id="234308"><span class="nick" style="color:#389600"><a href="#234308" label="[23:43:08]">&lt;stikonas&gt;</a></span><span class="message">oriansj: any idea?</span></div><div class="line" id="234315"><span class="nick" style="color:#389600"><a href="#234315" label="[23:43:15]">&lt;stikonas&gt;</a></span><span class="message">the line in mes is char *__brk = 0;</span></div><div class="line" id="234327"><span class="nick" style="color:#389600"><a href="#234327" label="[23:43:27]">&lt;stikonas&gt;</a></span><span class="message">I wonder if somehow assignment immediately tries to put value there</span></div><div class="line" id="234333"><span class="nick" style="color:#389600"><a href="#234333" label="[23:43:33]">&lt;stikonas&gt;</a></span><span class="message">but does not pad it</span></div><div class="line" id="234601"><span class="nick" style="color:#389600"><a href="#234601" label="[23:46:01]">&lt;stikonas&gt;</a></span><span class="message">oh, there are actually two labels called GLOBAL___brk...</span></div><div class="line" id="234803"><span class="nick" style="color:#389600"><a href="#234803" label="[23:48:03]">&lt;stikonas&gt;</a></span><span class="message">I guess one comes from include/mes/lib.h:extern char *__brk;</span></div><div class="line" id="234832"><span class="nick" style="color:#389600"><a href="#234832" label="[23:48:32]">&lt;stikonas&gt;</a></span><span class="message">still, that sounds like M2-Planet bug</span></div><div class="line" id="235443"><span class="nick" style="color:#389600"><a href="#235443" label="[23:54:43]">&lt;stikonas&gt;</a></span><span class="message">and that's where the bug is <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/blob/master/cc_core.c#L2741">https://github.com/oriansj/M2-Planet/blob/master/cc_core.c#L2741</a> </span></div><div class="line" id="000155"><span class="nick" style="color:#6b8072"><a href="#000155" label="[00:01:55]">&lt;oriansj&gt;</a></span><span class="message">yep, we would need just a little bit more logic to deal with sign extension.</span></div><div class="line" id="000316"><span class="nick" style="color:#6b8072"><a href="#000316" label="[00:03:16]">&lt;oriansj&gt;</a></span><span class="message">but only for 64bit architectures</span></div><div class="line" id="000341"><span class="nick" style="color:#234e69"><a href="#000341" label="[00:03:41]">&lt;stikonas[m]&gt;</a></span><span class="message">Yeah, I'm trying to print more %0</span></div><div class="line" id="000358"><span class="nick" style="color:#234e69"><a href="#000358" label="[00:03:58]">&lt;stikonas[m]&gt;</a></span><span class="message">Tried register_size / 32 - 1</span></div><div class="line" id="000407"><span class="nick" style="color:#234e69"><a href="#000407" label="[00:04:07]">&lt;stikonas[m]&gt;</a></span><span class="message">But that crashed my system</span></div><div class="line" id="000444"><span class="nick" style="color:#234e69"><a href="#000444" label="[00:04:44]">&lt;stikonas[m]&gt;</a></span><span class="message">I guess register size was in bytes</span></div><div class="line" id="000519"><span class="nick" style="color:#6b8072"><a href="#000519" label="[00:05:19]">&lt;oriansj&gt;</a></span><span class="message">or you could just do: if((AMD64 == Architecture) || (AARCH64 == Architecture) ||(RISCV64 == Architecture))</span></div><div class="line" id="000527"><span class="nick" style="color:#234e69"><a href="#000527" label="[00:05:27]">&lt;stikonas[m]&gt;</a></span><span class="message">Oh yeah and need to check sign...</span></div><div class="line" id="000545"><span class="nick" style="color:#6b8072"><a href="#000545" label="[00:05:45]">&lt;oriansj&gt;</a></span><span class="message">or just not allow any negative numbers</span></div><div class="line" id="000610"><span class="nick" style="color:#234e69"><a href="#000610" label="[00:06:10]">&lt;stikonas[m]&gt;</a></span><span class="message">well, I'll see once my laptop reboots...</span></div><div class="line" id="000727"><span class="nick" style="color:#234e69"><a href="#000727" label="[00:07:27]">&lt;stikonas[m]&gt;</a></span><span class="message">register_size is more universal...</span></div><div class="line" id="000736"><span class="nick" style="color:#234e69"><a href="#000736" label="[00:07:36]">&lt;stikonas[m]&gt;</a></span><span class="message">Rather than listing all arches</span></div><div class="line" id="000812"><span class="nick" style="color:#234e69"><a href="#000812" label="[00:08:12]">&lt;stikonas[m]&gt;</a></span><span class="message">Anyway, those are minor details, the main thing is that I figured out why malloc in mes crashed</span></div><div class="line" id="001204"><span class="nick" style="color:#389600"><a href="#001204" label="[00:12:04]">&lt;stikonas&gt;</a></span><span class="message">oriansj: negative numbers in global assignment are already causing an error...</span></div><div class="line" id="001206"><span class="nick" style="color:#389600"><a href="#001206" label="[00:12:06]">&lt;stikonas&gt;</a></span><span class="message">lib/linux/malloc.c:27:Received - in program</span></div><div class="line" id="001240"><span class="nick" style="color:#389600"><a href="#001240" label="[00:12:40]">&lt;stikonas&gt;</a></span><span class="message">yes, they are not handled in in global_assignment</span></div><div class="line" id="001248"><span class="nick" style="color:#389600"><a href="#001248" label="[00:12:48]">&lt;stikonas&gt;</a></span><span class="message">so I guess let's not add them at this point</span></div><div class="line" id="001335"><span class="nick" style="color:#389600"><a href="#001335" label="[00:13:35]">&lt;stikonas&gt;</a></span><span class="message">in fact no expressions are allowed there</span></div><div class="line" id="001340"><span class="nick" style="color:#389600"><a href="#001340" label="[00:13:40]">&lt;stikonas&gt;</a></span><span class="message">just non negative numbers</span></div><div class="line" id="001346"><span class="nick" style="color:#389600"><a href="#001346" label="[00:13:46]">&lt;stikonas&gt;</a></span><span class="message">good enough for now...</span></div><div class="line" id="002016"><span class="nick" style="color:#389600"><a href="#002016" label="[00:20:16]">&lt;stikonas&gt;</a></span><span class="message">oriansj: <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/pull/54">https://github.com/oriansj/M2-Planet/pull/54</a> </span></div><div class="line" id="002046"><span class="nick" style="color:#389600"><a href="#002046" label="[00:20:46]">&lt;stikonas&gt;</a></span><span class="message">(cc janneke ↑ )</span></div><div class="line" id="002115"><span class="nick" style="color:#389600"><a href="#002115" label="[00:21:15]">&lt;stikonas&gt;</a></span><span class="message">I suspect we'll have more issues...</span></div><div class="line" id="002121"><span class="nick" style="color:#389600"><a href="#002121" label="[00:21:21]">&lt;stikonas&gt;</a></span><span class="message">but let's fix this first</span></div><div class="line" id="003019"><span class="nick" style="color:#389600"><a href="#003019" label="[00:30:19]">&lt;stikonas&gt;</a></span><span class="message">argh, actually this padding thing I added is little endian...</span></div><div class="line" id="003027"><span class="nick" style="color:#389600"><a href="#003027" label="[00:30:27]">&lt;stikonas&gt;</a></span><span class="message">maybe I should do if arch instead...</span></div><div class="line" id="003233"><span class="nick" style="color:#6b8072"><a href="#003233" label="[00:32:33]">&lt;oriansj&gt;</a></span><span class="message">merged</span></div><div class="line" id="003250"><span class="nick" style="color:#389600"><a href="#003250" label="[00:32:50]">&lt;stikonas&gt;</a></span><span class="message">oh, I was thinking of reworking it...</span></div><div class="line" id="003301"><span class="nick" style="color:#389600"><a href="#003301" label="[00:33:01]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="003307"><span class="nick" style="color:#389600"><a href="#003307" label="[00:33:07]">&lt;stikonas&gt;</a></span><span class="message">or shall we leave it like this then?</span></div><div class="line" id="003319"><span class="nick" style="color:#389600"><a href="#003319" label="[00:33:19]">&lt;stikonas&gt;</a></span><span class="message">I realized that this will be buggy on 64-bit big endian arches</span></div><div class="line" id="003321"><span class="nick" style="color:#6b8072"><a href="#003321" label="[00:33:21]">&lt;oriansj&gt;</a></span><span class="message">we don't have big endian 64bit architectures yet</span></div><div class="line" id="003337"><span class="nick" style="color:#6b8072"><a href="#003337" label="[00:33:37]">&lt;oriansj&gt;</a></span><span class="message">we can fix it then</span></div><div class="line" id="003344"><span class="nick" style="color:#389600"><a href="#003344" label="[00:33:44]">&lt;stikonas&gt;</a></span><span class="message">could you at least add a comment?</span></div><div class="line" id="003347"><span class="nick" style="color:#389600"><a href="#003347" label="[00:33:47]">&lt;stikonas&gt;</a></span><span class="message">otherwise we'll forget</span></div><div class="line" id="003352"><span class="nick" style="color:#6b8072"><a href="#003352" label="[00:33:52]">&lt;oriansj&gt;</a></span><span class="message">sure</span></div><div class="line" id="003443"><span class="nick" style="color:#389600"><a href="#003443" label="[00:34:43]">&lt;stikonas&gt;</a></span><span class="message">actually in case of mes, this would have still worked</span></div><div class="line" id="003449"><span class="nick" style="color:#389600"><a href="#003449" label="[00:34:49]">&lt;stikonas&gt;</a></span><span class="message">as mes has global assignment = 0</span></div><div class="line" id="003459"><span class="nick" style="color:#3c5b35"><a href="#003459" label="[00:34:59]">&lt;fitzsim&gt;</a></span><span class="message">oriansj: were you able to try debootstrap'ing a ppc64be rootfs?</span></div><div class="line" id="003649"><span class="nick" style="color:#6b8072"><a href="#003649" label="[00:36:49]">&lt;oriansj&gt;</a></span><span class="message">fitzsim: I ran into a segfaults but I'm figuring it out (slowly)</span></div><div class="line" id="003729"><span class="nick" style="color:#389600"><a href="#003729" label="[00:37:29]">&lt;stikonas&gt;</a></span><span class="message">$ ./bin/mes-m2 -c &quot;(display 'Hello,M2-mes) (newline)&quot;</span></div><div class="line" id="003731"><span class="nick" style="color:#389600"><a href="#003731" label="[00:37:31]">&lt;stikonas&gt;</a></span><span class="message">Hello,M2-mes</span></div><div class="line" id="003738"><span class="nick" style="color:#389600"><a href="#003738" label="[00:37:38]">&lt;stikonas&gt;</a></span><span class="message">that's a good sign</span></div><div class="line" id="003749"><span class="nick" style="color:#6b8072"><a href="#003749" label="[00:37:49]">&lt;oriansj&gt;</a></span><span class="message">not merged</span></div><div class="line" id="003751"><span class="nick" style="color:#389600"><a href="#003751" label="[00:37:51]">&lt;stikonas&gt;</a></span><span class="message">doesn't guarantee that mescc will run</span></div><div class="line" id="003755"><span class="nick" style="color:#6b8072"><a href="#003755" label="[00:37:55]">&lt;oriansj&gt;</a></span><span class="message">^not^note^</span></div><div class="line" id="004023"><span class="nick" style="color:#234e69"><a href="#004023" label="[00:40:23]">&lt;stikonas[m]&gt;</a></span><span class="message">I'll merge it to stage0-posix and update changelog...</span></div><div class="line" id="010232"><span class="nick" style="color:#389600"><a href="#010232" label="[01:02:32]">&lt;stikonas&gt;</a></span><span class="message">ok, pushed updated stage0-posix and live-bootstrap</span></div><div class="line" id="010238"><span class="nick" style="color:#389600"><a href="#010238" label="[01:02:38]">&lt;stikonas&gt;</a></span><span class="message">retested mes-m2 on amd64</span></div><div class="line" id="010305"><span class="nick" style="color:#389600"><a href="#010305" label="[01:03:05]">&lt;stikonas&gt;</a></span><span class="message">Hello world indeed works now but mescc still causes segfault</span></div><div class="line" id="010850"><span class="nick" style="color:#389600"><a href="#010850" label="[01:08:50]">&lt;stikonas&gt;</a></span><span class="message">and I have no idea how to debug that...</span></div><div class="line" id="010902"><span class="nick" style="color:#389600"><a href="#010902" label="[01:09:02]">&lt;stikonas&gt;</a></span><span class="message">well, let's see if janeke has any new ideas tomorrow</span></div><div class="line" id="011022"><span class="nick" style="color:#389600"><a href="#011022" label="[01:10:22]">&lt;stikonas&gt;</a></span><span class="message">strace shows that crash happens after module/mescc/mescc.scm was read...</span></div><div class="line" id="012312"><span class="nick" style="color:#389600"><a href="#012312" label="[01:23:12]">&lt;stikonas&gt;</a></span><span class="message">oriansj: should <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/issues/18">https://github.com/oriansj/M2-Planet/issues/18</a>  be closed?</span></div><div class="line" id="012318"><span class="nick" style="color:#389600"><a href="#012318" label="[01:23:18]">&lt;stikonas&gt;</a></span><span class="message">it seems that you have pushed some fix</span></div><div class="line" id="015237"><span class="nick" style="color:#6b8072"><a href="#015237" label="[01:52:37]">&lt;oriansj&gt;</a></span><span class="message">yep and I asked melg8 to review and close if I fixed it to their statisfaction.</span></div><div class="line" id="015349"><span class="nick" style="color:#6b8072"><a href="#015349" label="[01:53:49]">&lt;oriansj&gt;</a></span><span class="message">but I guess I could close it as all of those cases are covered.</span></div><div class="line" id="084843"><span class="nick" style="color:#6c3d55"><a href="#084843" label="[08:48:43]">&lt;janneke&gt;</a></span><span class="message">stikonas[m]: that's great, thanks</span></div><div class="line" id="084920"><span class="nick" style="color:#6c3d55"><a href="#084920" label="[08:49:20]">&lt;janneke&gt;</a></span><span class="message">ACTION can reproduce the fix, for mes but is somewhat puzzled that scaffold/bug.c still crashes</span></div><div class="line" id="095623"><span class="nick" style="color:#234e69"><a href="#095623" label="[09:56:23]">&lt;stikonas[m]&gt;</a></span><span class="message">janneke : Maybe that's another bug?</span></div><div class="line" id="095642"><span class="nick" style="color:#234e69"><a href="#095642" label="[09:56:42]">&lt;stikonas[m]&gt;</a></span><span class="message">After all mescc still crashes for me</span></div><div class="line" id="100052"><span class="nick" style="color:#6d2462"><a href="#100052" label="[10:00:52]">&lt;muurkha&gt;</a></span><span class="message">aw</span></div><div class="line" id="101218"><span class="nick" style="color:#8dd3c7"><a href="#101218" label="[10:12:18]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: yes, we're over CI time limit - i'm working on that rn</span></div><div class="line" id="102736"><span class="nick" style="color:#6c3d55"><a href="#102736" label="[10:27:36]">&lt;janneke&gt;</a></span><span class="message">stikonas: mescc works for me, are you sure the segfault isn't because libc.a isn't found/built yet?</span></div><div class="line" id="102749"><span class="nick" style="color:#6c3d55"><a href="#102749" label="[10:27:49]">&lt;janneke&gt;</a></span><span class="message">stikonas[m]: you could try something like</span></div><div class="line" id="102758"><span class="nick" style="color:#6c3d55"><a href="#102758" label="[10:27:58]">&lt;janneke&gt;</a></span><span class="message">MES=bin/mes-m2 ./pre-inst-env mescc -S scaffold/hello.c</span></div><div class="line" id="102848"><span class="nick" style="color:#234e69"><a href="#102848" label="[10:28:48]">&lt;stikonas[m]&gt;</a></span><span class="message">janneke: I was trying to use mescc to build libc...</span></div><div class="line" id="103058"><span class="nick" style="color:#234e69"><a href="#103058" label="[10:30:58]">&lt;stikonas[m]&gt;</a></span><span class="message">janneke: still we need these patches too <a rel="nofollow" href="https://git.stikonas.eu/andrius/mes/commits/branch/wip-m2-planet-x86_64-bug">https://git.stikonas.eu/andrius/mes/commits/branch/wip-m2-planet-x86_64-bug</a> </span></div><div class="line" id="103058"><span class="nick" style="color:#234e69"><a href="#103058" label="[10:30:58]">&lt;stikonas[m]&gt;</a></span><span class="message">Otherwise debug sections don't work</span></div><div class="line" id="103211"><span class="nick" style="color:#234e69"><a href="#103211" label="[10:32:11]">&lt;stikonas[m]&gt;</a></span><span class="message">(I couldn't fork your repo on gitlab, it said I had no permissions for that)</span></div><div class="line" id="104233"><span class="nick" style="color:#6c3d55"><a href="#104233" label="[10:42:33]">&lt;janneke&gt;</a></span><span class="message">stikonas: right, thanks!</span></div><div class="line" id="112256"><span class="nick" style="color:#389600"><a href="#112256" label="[11:22:56]">&lt;stikonas&gt;</a></span><span class="message">janneke: ok, so I was running &quot;/usr/bin/mes-m2 -e main /usr/bin/mescc.scm -D HAVE_CONFIG_H=1 -I include -I include/linux/x86_64 -c lib/linux/x86_64-mes-mescc/crt1.c&quot;</span></div><div class="line" id="113106"><span class="nick" style="color:#389600"><a href="#113106" label="[11:31:06]">&lt;stikonas&gt;</a></span><span class="message">but I can confirm that ./pre-inst-env works...</span></div><div class="line" id="113115"><span class="nick" style="color:#389600"><a href="#113115" label="[11:31:15]">&lt;stikonas&gt;</a></span><span class="message">at least with scaffold/hello.c</span></div><div class="line" id="113149"><span class="nick" style="color:#6c3d55"><a href="#113149" label="[11:31:49]">&lt;janneke&gt;</a></span><span class="message">good, but weird -- something tricksy still going on then</span></div><div class="line" id="113250"><span class="nick" style="color:#6c3d55"><a href="#113250" label="[11:32:50]">&lt;janneke&gt;</a></span><span class="message">possibly the MES_ARENA/MES_STACK settings?</span></div><div class="line" id="113251"><span class="nick" style="color:#389600"><a href="#113251" label="[11:32:51]">&lt;stikonas&gt;</a></span><span class="message">anyway be back a bit later, going to eat breakfast...</span></div><div class="line" id="113312"><span class="nick" style="color:#389600"><a href="#113312" label="[11:33:12]">&lt;stikonas&gt;</a></span><span class="message">I had</span></div><div class="line" id="113313"><span class="nick" style="color:#389600"><a href="#113313" label="[11:33:13]">&lt;stikonas&gt;</a></span><span class="message"> +&gt; MES_ARENA=20000000</span></div><div class="line" id="113315"><span class="nick" style="color:#389600"><a href="#113315" label="[11:33:15]">&lt;stikonas&gt;</a></span><span class="message"> +&gt; MES_MAX_ARENA=20000000</span></div><div class="line" id="113317"><span class="nick" style="color:#389600"><a href="#113317" label="[11:33:17]">&lt;stikonas&gt;</a></span><span class="message"> +&gt; MES_STACK=6000000</span></div><div class="line" id="113352"><span class="nick" style="color:#6c3d55"><a href="#113352" label="[11:33:52]">&lt;janneke&gt;</a></span><span class="message">ah, well; enjoyf your breakfast</span></div><div class="line" id="113354"><span class="nick" style="color:#6c3d55"><a href="#113354" label="[11:33:54]">&lt;janneke&gt;</a></span><span class="message">(i found the #if __M2__ in src/gc.c suspicious, you'd think we might need something 64bit-specific)</span></div><div class="line" id="113409"><span class="nick" style="color:#6c3d55"><a href="#113409" label="[11:34:09]">&lt;janneke&gt;</a></span><span class="message">almost lunch time here!</span></div><div class="line" id="113801"><span class="nick" style="color:#234e69"><a href="#113801" label="[11:38:01]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, I got up a bit later today, it's bank holiday today, so no need to go to work and also I debugging that mes-m2 crash last night...</span></div><div class="line" id="113846"><span class="nick" style="color:#6c3d55"><a href="#113846" label="[11:38:46]">&lt;janneke&gt;</a></span><span class="message">ah, now that sounds nice and relaxed</span></div><div class="line" id="115328"><span class="nick" style="color:#389600"><a href="#115328" label="[11:53:28]">&lt;stikonas&gt;</a></span><span class="message">hmm, that ARENA_SIZE is multiplied by sizeof (scm) later...</span></div><div class="line" id="115331"><span class="nick" style="color:#389600"><a href="#115331" label="[11:53:31]">&lt;stikonas&gt;</a></span><span class="message">so maybe it's fine</span></div><div class="line" id="115556"><span class="nick" style="color:#6c3d55"><a href="#115556" label="[11:55:56]">&lt;janneke&gt;</a></span><span class="message">right</span></div><div class="line" id="121956"><span class="nick" style="color:#389600"><a href="#121956" label="[12:19:56]">&lt;stikonas&gt;</a></span><span class="message">ok, I think this one is the problem in my scripts, so not mes or M2-Planet issue</span></div><div class="line" id="122115"><span class="nick" style="color:#389600"><a href="#122115" label="[12:21:15]">&lt;stikonas&gt;</a></span><span class="message">I was using $ARCH in one place which is stage0-posix arch name instead of $MES_ARCH</span></div><div class="line" id="122128"><span class="nick" style="color:#389600"><a href="#122128" label="[12:21:28]">&lt;stikonas&gt;</a></span><span class="message">and it was passing amd64 instead of x86_64 to mescc</span></div><div class="line" id="122136"><span class="nick" style="color:#6c3d55"><a href="#122136" label="[12:21:36]">&lt;janneke&gt;</a></span><span class="message">do'h</span></div><div class="line" id="122150"><span class="nick" style="color:#6c3d55"><a href="#122150" label="[12:21:50]">&lt;janneke&gt;</a></span><span class="message">yeah, it's pretty brittle and delicate with all these variables</span></div><div class="line" id="122204"><span class="nick" style="color:#389600"><a href="#122204" label="[12:22:04]">&lt;stikonas&gt;</a></span><span class="message">anyway, I'll fix my scripts and retest</span></div><div class="line" id="122211"><span class="nick" style="color:#389600"><a href="#122211" label="[12:22:11]">&lt;stikonas&gt;</a></span><span class="message">but I think we'll be in the same position now</span></div><div class="line" id="122217"><span class="nick" style="color:#389600"><a href="#122217" label="[12:22:17]">&lt;stikonas&gt;</a></span><span class="message">scaffold.c would compile</span></div><div class="line" id="122218"><span class="nick" style="color:#6c3d55"><a href="#122218" label="[12:22:18]">&lt;janneke&gt;</a></span><span class="message">but mes-0.25 won't build with m2-planet-0.10.0 anyway</span></div><div class="line" id="122225"><span class="nick" style="color:#6c3d55"><a href="#122225" label="[12:22:25]">&lt;janneke&gt;</a></span><span class="message">\o/</span></div><div class="line" id="122233"><span class="nick" style="color:#6c3d55"><a href="#122233" label="[12:22:33]">&lt;janneke&gt;</a></span><span class="message">(for x86_64, that is)</span></div><div class="line" id="122243"><span class="nick" style="color:#389600"><a href="#122243" label="[12:22:43]">&lt;stikonas&gt;</a></span><span class="message">definitely</span></div><div class="line" id="122253"><span class="nick" style="color:#389600"><a href="#122253" label="[12:22:53]">&lt;stikonas&gt;</a></span><span class="message">we'll have to ask oriansj for a new release before mes-0.25</span></div><div class="line" id="122302"><span class="nick" style="color:#389600"><a href="#122302" label="[12:23:02]">&lt;stikonas&gt;</a></span><span class="message">do we have any ETA for mes-0.25?</span></div><div class="line" id="122315"><span class="nick" style="color:#6c3d55"><a href="#122315" label="[12:23:15]">&lt;janneke&gt;</a></span><span class="message">no, not really</span></div><div class="line" id="122333"><span class="nick" style="color:#389600"><a href="#122333" label="[12:23:33]">&lt;stikonas&gt;</a></span><span class="message">that's fine</span></div><div class="line" id="122333"><span class="nick" style="color:#6c3d55"><a href="#122333" label="[12:23:33]">&lt;janneke&gt;</a></span><span class="message">well, this x86_64 was one of the biggest blockers</span></div><div class="line" id="122340"><span class="nick" style="color:#6c3d55"><a href="#122340" label="[12:23:40]">&lt;janneke&gt;</a></span><span class="message">so yeah, no hurry</span></div><div class="line" id="122430"><span class="nick" style="color:#389600"><a href="#122430" label="[12:24:30]">&lt;stikonas&gt;</a></span><span class="message">well, I don't expect many stage0-posix changes, and it's probably reasonably ready for release</span></div><div class="line" id="122528"><span class="nick" style="color:#389600"><a href="#122528" label="[12:25:28]">&lt;stikonas&gt;</a></span><span class="message">janneke: some good news, mescc is working now and started building libc</span></div><div class="line" id="122539"><span class="nick" style="color:#6c3d55"><a href="#122539" label="[12:25:39]">&lt;janneke&gt;</a></span><span class="message">\o/</span></div><div class="line" id="122557"><span class="nick" style="color:#389600"><a href="#122557" label="[12:25:57]">&lt;stikonas&gt;</a></span><span class="message">ok, my libc kaem script will need adjustments</span></div><div class="line" id="122613"><span class="nick" style="color:#389600"><a href="#122613" label="[12:26:13]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1278975/">https://paste.debian.net/1278975/</a> </span></div><div class="line" id="122646"><span class="nick" style="color:#389600"><a href="#122646" label="[12:26:46]">&lt;stikonas&gt;</a></span><span class="message">but that's normal for each mes release...</span></div><div class="line" id="122650"><span class="nick" style="color:#8dd3c7"><a href="#122650" label="[12:26:50]">&lt;fossy&gt;</a></span><span class="message">go 23</span></div><div class="line" id="122653"><span class="nick" style="color:#8dd3c7"><a href="#122653" label="[12:26:53]">&lt;fossy&gt;</a></span><span class="message">haha</span></div><div class="line" id="123330"><span class="nick" style="color:#389600"><a href="#123330" label="[12:33:30]">&lt;stikonas&gt;</a></span><span class="message">seeing some build warnings or errors now, but somehow build continues</span></div><div class="line" id="123359"><span class="nick" style="color:#389600"><a href="#123359" label="[12:33:59]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1278976/">https://paste.debian.net/1278976/</a> </span></div><div class="line" id="123429"><span class="nick" style="color:#6c3d55"><a href="#123429" label="[12:34:29]">&lt;janneke&gt;</a></span><span class="message">stikonas, yeah, unfortunately that's &quot;expected&quot;</span></div><div class="line" id="123606"><span class="nick" style="color:#6c3d55"><a href="#123606" label="[12:36:06]">&lt;janneke&gt;</a></span><span class="message">someone should have a look at that sometime</span></div><div class="line" id="123619"><span class="nick" style="color:#389600"><a href="#123619" label="[12:36:19]">&lt;stikonas&gt;</a></span><span class="message">anyway, we are already in a much better position than 2 days ago</span></div><div class="line" id="123759"><span class="nick" style="color:#389600"><a href="#123759" label="[12:37:59]">&lt;stikonas&gt;</a></span><span class="message">janneke: another thing, if mes-0.25 will need m2-planet 0.11 on x86_64, then we don't need old defines for backwards compatibility</span></div><div class="line" id="123826"><span class="nick" style="color:#389600"><a href="#123826" label="[12:38:26]">&lt;stikonas&gt;</a></span><span class="message">(you might still want them for x86 though)</span></div><div class="line" id="123901"><span class="nick" style="color:#6c3d55"><a href="#123901" label="[12:39:01]">&lt;janneke&gt;</a></span><span class="message">yeah, i guess i'll want to remove them right after the release</span></div><div class="line" id="123918"><span class="nick" style="color:#6c3d55"><a href="#123918" label="[12:39:18]">&lt;janneke&gt;</a></span><span class="message">the mes-0.25 release</span></div><div class="line" id="125524"><span class="nick" style="color:#8dd3c7"><a href="#125524" label="[12:55:24]">&lt;fossy&gt;</a></span><span class="message">./go 14</span></div><div class="line" id="125528"><span class="nick" style="color:#8dd3c7"><a href="#125528" label="[12:55:28]">&lt;fossy&gt;</a></span><span class="message">again.. twice in one day</span></div><div class="line" id="132631"><span class="nick" style="color:#389600"><a href="#132631" label="[13:26:31]">&lt;stikonas&gt;</a></span><span class="message">ok, mes-m2 can build mes</span></div><div class="line" id="132652"><span class="nick" style="color:#af8d2f"><a href="#132652" label="[13:26:52]">&lt;emilytrau[m]&gt;</a></span><span class="message">fun working on another novel full bootstrap, you can find and fix things that fall through the cracks! ♥️ <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/287">https://github.com/fosslinux/live-bootstrap/pull/287</a> </span></div><div class="line" id="132739"><span class="nick" style="color:#8dd3c7"><a href="#132739" label="[13:27:39]">&lt;fossy&gt;</a></span><span class="message">:D</span></div><div class="line" id="132809"><span class="nick" style="color:#389600"><a href="#132809" label="[13:28:09]">&lt;stikonas&gt;</a></span><span class="message">emilytrau[m]: can you fix reuse linter please</span></div><div class="line" id="132817"><span class="nick" style="color:#8dd3c7"><a href="#132817" label="[13:28:17]">&lt;fossy&gt;</a></span><span class="message">erm</span></div><div class="line" id="132822"><span class="nick" style="color:#8dd3c7"><a href="#132822" label="[13:28:22]">&lt;fossy&gt;</a></span><span class="message">that's not the PR'</span></div><div class="line" id="132824"><span class="nick" style="color:#8dd3c7"><a href="#132824" label="[13:28:24]">&lt;fossy&gt;</a></span><span class="message">s fault</span></div><div class="line" id="132827"><span class="nick" style="color:#8dd3c7"><a href="#132827" label="[13:28:27]">&lt;fossy&gt;</a></span><span class="message">that's something else going on</span></div><div class="line" id="132840"><span class="nick" style="color:#389600"><a href="#132840" label="[13:28:40]">&lt;stikonas&gt;</a></span><span class="message">oh indeed</span></div><div class="line" id="132845"><span class="nick" style="color:#389600"><a href="#132845" label="[13:28:45]">&lt;stikonas&gt;</a></span><span class="message">I just looked at logs</span></div><div class="line" id="132850"><span class="nick" style="color:#389600"><a href="#132850" label="[13:28:50]">&lt;stikonas&gt;</a></span><span class="message">and installation fails</span></div><div class="line" id="132857"><span class="nick" style="color:#389600"><a href="#132857" label="[13:28:57]">&lt;stikonas&gt;</a></span><span class="message">and indeed PR doesn't add any new ifles</span></div><div class="line" id="132858"><span class="nick" style="color:#389600"><a href="#132858" label="[13:28:58]">&lt;stikonas&gt;</a></span><span class="message">files</span></div><div class="line" id="133032"><span class="nick" style="color:#8dd3c7"><a href="#133032" label="[13:30:32]">&lt;fossy&gt;</a></span><span class="message">regardless, emilytrau[m], could you please add a SPDX-FileCopyrightText header at the top of that file for your changes?</span></div><div class="line" id="133055"><span class="nick" style="color:#af8d2f"><a href="#133055" label="[13:30:55]">&lt;emilytrau[m]&gt;</a></span><span class="message">easy :)</span></div><div class="line" id="133108"><span class="nick" style="color:#6c3d55"><a href="#133108" label="[13:31:08]">&lt;janneke&gt;</a></span><span class="message">emilytrau[m]: hey, great to see you here!</span></div><div class="line" id="133223"><span class="nick" style="color:#8dd3c7"><a href="#133223" label="[13:32:23]">&lt;fossy&gt;</a></span><span class="message">not a clue in the world why it said reuse not found. rerun worked..</span></div><div class="line" id="133231"><span class="nick" style="color:#af8d2f"><a href="#133231" label="[13:32:31]">&lt;emilytrau[m]&gt;</a></span><span class="message">hihi! 👋 janneke</span></div><div class="line" id="133255"><span class="nick" style="color:#6c3d55"><a href="#133255" label="[13:32:55]">&lt;janneke&gt;</a></span><span class="message">o/</span></div><div class="line" id="134723"><span class="nick" style="color:#389600"><a href="#134723" label="[13:47:23]">&lt;stikonas&gt;</a></span><span class="message">emilytrau[m]: by the way, longer term I'm planning to drop that patch from yacc if we get gash working on mes</span></div><div class="line" id="134723"><span class="nick" style="color:#6c3d55"><a href="#134723" label="[13:47:23]">&lt;janneke&gt;</a></span><span class="message">emilytrau[m]: you're getting some thorough reviews, and also some help, so it seems?</span></div><div class="line" id="134736"><span class="nick" style="color:#af8d2f"><a href="#134736" label="[13:47:36]">&lt;emilytrau[m]&gt;</a></span><span class="message">found it because for the nix toolchain i want to go a more direct route without musl like guix, but to run ./configure scripts we need our own awk! y'all guix folks have a lot of fun with gash and gash-utils we can't use (yet!) 😆</span></div><div class="line" id="134757"><span class="nick" style="color:#389600"><a href="#134757" label="[13:47:57]">&lt;stikonas&gt;</a></span><span class="message">yacc is a  bit problematic with meslibc due to licensing (GPLv3+CDDL)</span></div><div class="line" id="134854"><span class="nick" style="color:#8dd3c7"><a href="#134854" label="[13:48:54]">&lt;fossy&gt;</a></span><span class="message">mm, gash on mes would allow a bunch of things to be short circuited</span></div><div class="line" id="134858"><span class="nick" style="color:#389600"><a href="#134858" label="[13:48:58]">&lt;stikonas&gt;</a></span><span class="message">so once we have gash working on mes, I'm thinking of using gash to run musl's configure script before we have bash and yacc, and then build yacc with musl (hence all those wide char removal patches won't be necessary)</span></div><div class="line" id="134908"><span class="nick" style="color:#389600"><a href="#134908" label="[13:49:08]">&lt;stikonas&gt;</a></span><span class="message">fossy: indeed...</span></div><div class="line" id="135100"><span class="nick" style="color:#af8d2f"><a href="#135100" label="[13:51:00]">&lt;emilytrau[m]&gt;</a></span><span class="message">fixing yacc just removed a musl -&gt; m4 -&gt; flex -&gt; bison -&gt; awk dependency chain for me ahahah</span></div><div class="line" id="135311"><span class="nick" style="color:#8dd3c7"><a href="#135311" label="[13:53:11]">&lt;fossy&gt;</a></span><span class="message">stikonas: btw, in the next ~week i'm going to chuck up a 1.0 roadmap on github - we can talk abt this a little bit more in detail later, but are there any blockers that come to mind for you?</span></div><div class="line" id="135332"><span class="nick" style="color:#389600"><a href="#135332" label="[13:53:32]">&lt;stikonas&gt;</a></span><span class="message">no real blockers...</span></div><div class="line" id="135343"><span class="nick" style="color:#389600"><a href="#135343" label="[13:53:43]">&lt;stikonas&gt;</a></span><span class="message">just some improvements that would be nice to have</span></div><div class="line" id="135444"><span class="nick" style="color:#8dd3c7"><a href="#135444" label="[13:54:44]">&lt;fossy&gt;</a></span><span class="message">we will have to decide whether to wait for kexec fiwix -&gt; linux or reboot for 1.0 (most of reboot is docs but either way, sysa-&gt;sysc isn't really in a releaseable state rn imo)</span></div><div class="line" id="135503"><span class="nick" style="color:#8dd3c7"><a href="#135503" label="[13:55:03]">&lt;fossy&gt;</a></span><span class="message">i guess in a few weeks we will know how much work fiwix -&gt; linux is though</span></div><div class="line" id="135526"><span class="nick" style="color:#af8d2f"><a href="#135526" label="[13:55:26]">&lt;emilytrau[m]&gt;</a></span><span class="message">janneke: lots of great changes! i'm super happy with the improvements and hopefully it can land soon. after that i &quot;may&quot; have a secret feature branch with much much more :D <a rel="nofollow" href="https://github.com/emilytrau/nixpkgs/tree/trusting-trust-next">https://github.com/emilytrau/nixpkgs/tree/trusting-trust-next</a> </span></div><div class="line" id="135812"><span class="nick" style="color:#8dd3c7"><a href="#135812" label="[13:58:12]">&lt;fossy&gt;</a></span><span class="message">i'm thinking roughly ~2 weeks =&gt; branch off for 1.0 (so big features can land in master but 1.0 can be stable); june =&gt; more extensive testing + RC; mid july =&gt; release</span></div><div class="line" id="135849"><span class="nick" style="color:#8dd3c7"><a href="#135849" label="[13:58:49]">&lt;fossy&gt;</a></span><span class="message">i am intentionally making the timeline a  bit longer than i think will be required. i would really like 1.0 to be in a place where someone whos never touched bootstrapping before can run live-bootstrap with minimal issues</span></div><div class="line" id="135858"><span class="nick" style="color:#389600"><a href="#135858" label="[13:58:58]">&lt;stikonas&gt;</a></span><span class="message">yeah, it does look a bit long</span></div><div class="line" id="135912"><span class="nick" style="color:#6c3d55"><a href="#135912" label="[13:59:12]">&lt;janneke&gt;</a></span><span class="message">ACTION looks an emilytrau's secret branch</span></div><div class="line" id="140034"><span class="nick" style="color:#6c3d55"><a href="#140034" label="[14:00:34]">&lt;janneke&gt;</a></span><span class="message">ah, because you don't have guile(-bootstrap), you're taking the live-bootstrap path, sorta</span></div><div class="line" id="140105"><span class="nick" style="color:#6c3d55"><a href="#140105" label="[14:01:05]">&lt;janneke&gt;</a></span><span class="message">that makes sense!  i would have thought you'd simply add/keep busybox to/in the binary seed, initially</span></div><div class="line" id="140124"><span class="nick" style="color:#af8d2f"><a href="#140124" label="[14:01:24]">&lt;emilytrau[m]&gt;</a></span><span class="message">where's the fun in that 😤</span></div><div class="line" id="140137"><span class="nick" style="color:#6c3d55"><a href="#140137" label="[14:01:37]">&lt;janneke&gt;</a></span><span class="message">hehe, true</span></div><div class="line" id="140213"><span class="nick" style="color:#af8d2f"><a href="#140213" label="[14:02:13]">&lt;emilytrau[m]&gt;</a></span><span class="message">that said i am very excited to take the hatchet to much of it all once gash supports mes</span></div><div class="line" id="140215"><span class="nick" style="color:#6c3d55"><a href="#140215" label="[14:02:15]">&lt;janneke&gt;</a></span><span class="message">hopefully some of this can be cleaned-up again, after we have gash-on-mes, as fossy mentioned, but that will take some time still</span></div><div class="line" id="140223"><span class="nick" style="color:#6c3d55"><a href="#140223" label="[14:02:23]">&lt;janneke&gt;</a></span><span class="message">hehe</span></div><div class="line" id="140426"><span class="nick" style="color:#389600"><a href="#140426" label="[14:04:26]">&lt;stikonas&gt;</a></span><span class="message">well, live-bootstrap tries to remove all pregenerated files, which makes bootstrap path quite a bit longer because we have to get to Autotools before we can run ./configure scripts</span></div><div class="line" id="140459"><span class="nick" style="color:#6c3d55"><a href="#140459" label="[14:04:59]">&lt;janneke&gt;</a></span><span class="message">stikonas, yes; we haven't looked at incorporating that in the guix bootstrap at all yet</span></div><div class="line" id="140513"><span class="nick" style="color:#6c3d55"><a href="#140513" label="[14:05:13]">&lt;janneke&gt;</a></span><span class="message">an amazing effort and contribution!</span></div><div class="line" id="140535"><span class="nick" style="color:#389600"><a href="#140535" label="[14:05:35]">&lt;stikonas&gt;</a></span><span class="message">one could also imagine something between guix and live-bootstrap paths where guile-bootstrap is not used but e.g. we bootstrap stuff like tar gzip using untar ungz...</span></div><div class="line" id="140556"><span class="nick" style="color:#6c3d55"><a href="#140556" label="[14:05:56]">&lt;janneke&gt;</a></span><span class="message">yes!</span></div><div class="line" id="140617"><span class="nick" style="color:#389600"><a href="#140617" label="[14:06:17]">&lt;stikonas&gt;</a></span><span class="message">anyway, in distros at some point you have to drop condition on no-pregenerated files...</span></div><div class="line" id="140624"><span class="nick" style="color:#af8d2f"><a href="#140624" label="[14:06:24]">&lt;emilytrau[m]&gt;</a></span><span class="message">janneke: some of the ugly nix-isms we have to deal with starting without a shell hehe <a rel="nofollow" href="https://github.com/emilytrau/nixpkgs/blob/cc8ee0925d9eb05a9a9197cbbe3b6b667b32bf02/pkgs/os-specific/linux/minimal-bootstrap/stage0-posix/stage0-posix-x86.nix#L4">https://github.com/emilytrau/nixpkgs/blob/cc8ee0925d9eb05a9a9197cbbe3b6b667b32bf02/pkgs/os-specific/linux/minimal-bootstrap/stage0-posix/stage0-posix-x86.nix#L4</a> </span></div><div class="line" id="140726"><span class="nick" style="color:#6c3d55"><a href="#140726" label="[14:07:26]">&lt;janneke&gt;</a></span><span class="message">ouch!  nice hack tho</span></div><div class="line" id="140906"><span class="nick" style="color:#af8d2f"><a href="#140906" label="[14:09:06]">&lt;emilytrau[m]&gt;</a></span><span class="message">stikonas: i've been avoiding using gnu-tar and gzip as much as possible and surprisingly untar and ungz can get you pretty far! one of the only places i need gzip is with bash-2.05b.tar.gz, ungz isn't able to handle it but haven't looked into why</span></div><div class="line" id="140910"><span class="nick" style="color:#389600"><a href="#140910" label="[14:09:10]">&lt;stikonas&gt;</a></span><span class="message">emilytrau[m]: oh you basically had to rewrite stage0-posix kaem files...</span></div><div class="line" id="140932"><span class="nick" style="color:#389600"><a href="#140932" label="[14:09:32]">&lt;stikonas&gt;</a></span><span class="message">yeah, those gnu-tar and gzip packages are very old</span></div><div class="line" id="140954"><span class="nick" style="color:#389600"><a href="#140954" label="[14:09:54]">&lt;stikonas&gt;</a></span><span class="message">I have briefly looked at updating tar, but meslibc needed extra functions for that</span></div><div class="line" id="141018"><span class="nick" style="color:#6c3d55"><a href="#141018" label="[14:10:18]">&lt;janneke&gt;</a></span><span class="message">stikonas: have you kept track of that?</span></div><div class="line" id="141035"><span class="nick" style="color:#389600"><a href="#141035" label="[14:10:35]">&lt;stikonas&gt;</a></span><span class="message">emilytrau[m]: can't you use kaem-optional-seed in that stage0-posix-x86 file?</span></div><div class="line" id="141040"><span class="nick" style="color:#389600"><a href="#141040" label="[14:10:40]">&lt;stikonas&gt;</a></span><span class="message">or were there some issues?</span></div><div class="line" id="141103"><span class="nick" style="color:#389600"><a href="#141103" label="[14:11:03]">&lt;stikonas&gt;</a></span><span class="message">it's probably somewhere on bootstrappable logs</span></div><div class="line" id="141107"><span class="nick" style="color:#389600"><a href="#141107" label="[14:11:07]">&lt;stikonas&gt;</a></span><span class="message">though those are hard to search</span></div><div class="line" id="141120"><span class="nick" style="color:#389600"><a href="#141120" label="[14:11:20]">&lt;stikonas&gt;</a></span><span class="message">janneke: let me see if I can find anything locally</span></div><div class="line" id="141120"><span class="nick" style="color:#6c3d55"><a href="#141120" label="[14:11:20]">&lt;janneke&gt;</a></span><span class="message">the (meanwhile gone stale again) wip-gcc4 branch adds quite some extra mes lib c functions, iwbn to make sure gnu-tar and gzip are also supported</span></div><div class="line" id="141126"><span class="nick" style="color:#af8d2f"><a href="#141126" label="[14:11:26]">&lt;emilytrau[m]&gt;</a></span><span class="message">no environment variable substitution until full-kaem. nix needs env-vars to pass in a path to the output folder of the derivation</span></div><div class="line" id="141146"><span class="nick" style="color:#389600"><a href="#141146" label="[14:11:46]">&lt;stikonas&gt;</a></span><span class="message">I see</span></div><div class="line" id="141158"><span class="nick" style="color:#389600"><a href="#141158" label="[14:11:58]">&lt;stikonas&gt;</a></span><span class="message">yes, original kaem has no environmental variables</span></div><div class="line" id="141227"><span class="nick" style="color:#af8d2f"><a href="#141227" label="[14:12:27]">&lt;emilytrau[m]&gt;</a></span><span class="message">just had to get creative :p</span></div><div class="line" id="141252"><span class="nick" style="color:#389600"><a href="#141252" label="[14:12:52]">&lt;stikonas&gt;</a></span><span class="message">well, we are not addign env variables to kaem-seed :)</span></div><div class="line" id="141301"><span class="nick" style="color:#389600"><a href="#141301" label="[14:13:01]">&lt;stikonas&gt;</a></span><span class="message">that would really blow its size</span></div><div class="line" id="141411"><span class="nick" style="color:#af8d2f"><a href="#141411" label="[14:14:11]">&lt;emilytrau[m]&gt;</a></span><span class="message">the other way to do it which i didn't think about till i saw roconnor implement it is to do stage0 all the way up to mescc-tools-extra in a single derivation/build step at which point you can copy files/read env vars and install the outputs!</span></div><div class="line" id="141629"><span class="nick" style="color:#389600"><a href="#141629" label="[14:16:29]">&lt;stikonas&gt;</a></span><span class="message">emilytrau[m]: oh and back to yacc, is there a way to exclude it from getting into nix substitutes?</span></div><div class="line" id="141800"><span class="nick" style="color:#af8d2f"><a href="#141800" label="[14:18:00]">&lt;emilytrau[m]&gt;</a></span><span class="message">is the resulting output binary /bin/yacc subject to unfree/unredistributable license restrictions? otherwise for the source code yes we can mark it as non-cacheable</span></div><div class="line" id="141842"><span class="nick" style="color:#234e69"><a href="#141842" label="[14:18:42]">&lt;stikonas[m]&gt;</a></span><span class="message">yes, is is non redistributable (until we get gash)</span></div><div class="line" id="141847"><span class="nick" style="color:#234e69"><a href="#141847" label="[14:18:47]">&lt;stikonas[m]&gt;</a></span><span class="message">yacc is CDDL licensed and mes is GPLv3</span></div><div class="line" id="141859"><span class="nick" style="color:#234e69"><a href="#141859" label="[14:18:59]">&lt;stikonas[m]&gt;</a></span><span class="message">so it's basically ZFS on Linux type of issue</span></div><div class="line" id="141932"><span class="nick" style="color:#234e69"><a href="#141932" label="[14:19:32]">&lt;stikonas[m]&gt;</a></span><span class="message">with gash I can build musl first (which is MIT if I remember correctly)</span></div><div class="line" id="142006"><span class="nick" style="color:#af8d2f"><a href="#142006" label="[14:20:06]">&lt;emilytrau[m]&gt;</a></span><span class="message">hmm 🤔 actually that should still be ok since yacc won't be in the end result runtime output where caching is important</span></div><div class="line" id="142040"><span class="nick" style="color:#af8d2f"><a href="#142040" label="[14:20:40]">&lt;emilytrau[m]&gt;</a></span><span class="message">and whenever you need to make a change that requires yacc at build time, that machine can then fetch and build yacc itself</span></div><div class="line" id="142101"><span class="nick" style="color:#389600"><a href="#142101" label="[14:21:01]">&lt;stikonas&gt;</a></span><span class="message">or you can add a step after musl to rebuild yacc (that 2nd build would be redistributable)</span></div><div class="line" id="142145"><span class="nick" style="color:#234e69"><a href="#142145" label="[14:21:45]">&lt;stikonas[m]&gt;</a></span><span class="message">anyway, hopefully this will resolve itself in the medium term with gash</span></div><div class="line" id="142217"><span class="nick" style="color:#af8d2f"><a href="#142217" label="[14:22:17]">&lt;emilytrau[m]&gt;</a></span><span class="message">at some point up in the chain we'd end up at busybox and distribute that i'm guessing</span></div><div class="line" id="142229"><span class="nick" style="color:#6c3d55"><a href="#142229" label="[14:22:29]">&lt;janneke&gt;</a></span><span class="message">love it how we try to chisel out a nicer bootstrap path all the time</span></div><div class="line" id="142329"><span class="nick" style="color:#389600"><a href="#142329" label="[14:23:29]">&lt;stikonas&gt;</a></span><span class="message">yeah... And recently we were able to get rid of binutils 2.14</span></div><div class="line" id="142343"><span class="nick" style="color:#389600"><a href="#142343" label="[14:23:43]">&lt;stikonas&gt;</a></span><span class="message">that will help us a lot with bootstrapping new arches (e.g. riscv)</span></div><div class="line" id="142411"><span class="nick" style="color:#6c3d55"><a href="#142411" label="[14:24:11]">&lt;janneke&gt;</a></span><span class="message">indeed</span></div><div class="line" id="142456"><span class="nick" style="color:#6c3d55"><a href="#142456" label="[14:24:56]">&lt;janneke&gt;</a></span><span class="message">it never ceases to amaze me how much more we can accomplish if just one more person joins the effort</span></div><div class="line" id="142512"><span class="nick" style="color:#af8d2f"><a href="#142512" label="[14:25:12]">&lt;emilytrau[m]&gt;</a></span><span class="message">Looking at the caldera license again I think it might be able to categorise as &quot;unfree redistributable&quot;? nix has a mechanism for that (designed for eg. nvidia drivers). would you agree?</span></div><div class="line" id="142727"><span class="nick" style="color:#af8d2f"><a href="#142727" label="[14:27:27]">&lt;emilytrau[m]&gt;</a></span><span class="message">oh sorry i might have mixed up CDDL and caldera. It seems that nixpkgs currently treats CDDL as a free/redistributable license</span></div><div class="line" id="143045"><span class="nick" style="color:#389600"><a href="#143045" label="[14:30:45]">&lt;stikonas&gt;</a></span><span class="message">CDDL is free but is not GPLv3 compatible</span></div><div class="line" id="143132"><span class="nick" style="color:#389600"><a href="#143132" label="[14:31:32]">&lt;stikonas&gt;</a></span><span class="message">it's explicitely mentioned here: <a rel="nofollow" href="https://gplv3.fsf.org/wiki/index.php/Compatible_licenses#Common_reasons_for_incompatibility">https://gplv3.fsf.org/wiki/index.php/Compatible_licenses#Common_reasons_for_incompatibility</a> </span></div><div class="line" id="143237"><span class="nick" style="color:#af8d2f"><a href="#143237" label="[14:32:37]">&lt;emilytrau[m]&gt;</a></span><span class="message">ah i see now thank you. i will look into marking yacc as such in nixpkgs</span></div><div class="line" id="143326"><span class="nick" style="color:#389600"><a href="#143326" label="[14:33:26]">&lt;stikonas&gt;</a></span><span class="message">though some people claim different things...</span></div><div class="line" id="143339"><span class="nick" style="color:#389600"><a href="#143339" label="[14:33:39]">&lt;stikonas&gt;</a></span><span class="message">hard to tell since I'm not a lawyer</span></div><div class="line" id="143552"><span class="nick" style="color:#389600"><a href="#143552" label="[14:35:52]">&lt;stikonas&gt;</a></span><span class="message">still, safer to assume that is is not redistributable for now</span></div><div class="line" id="145736"><span class="nick" style="color:#389600"><a href="#145736" label="[14:57:36]">&lt;mihi&gt;</a></span><span class="message">emilytrau[m], another bootstrap path from stage0-posix to gcc 4.6.4 without musl or guile/gash would be &lt;<a rel="nofollow" href="https://github.com/schierlm/FullSourceBootstrapFromGit">https://github.com/schierlm/FullSourceBootstrapFromGit</a>&gt;  - but it does not care about pregenerated files in tarballs.</span></div><div class="line" id="151528"><span class="nick" style="color:#af8d2f"><a href="#151528" label="[15:15:28]">&lt;emilytrau[m]&gt;</a></span><span class="message">my plan for nix, which is somewhat different to the guix/live-bootstrap path, is to take the most direct approach to bash4 + any gcc. from there we can hook into nixpkg's stdenv infrastructure and the rest of the package set with minimal extra maintenance. the path after that might be a bit longer but in my head the less packages to write/maintain should be worth it</span></div><div class="line" id="151729"><span class="nick" style="color:#6c3d55"><a href="#151729" label="[15:17:29]">&lt;janneke&gt;</a></span><span class="message">sounds fair</span></div><div class="line" id="151802"><span class="nick" style="color:#6c3d55"><a href="#151802" label="[15:18:02]">&lt;janneke&gt;</a></span><span class="message">for guix, i started out with the simplest path i could hope to get merged</span></div><div class="line" id="151824"><span class="nick" style="color:#6c3d55"><a href="#151824" label="[15:18:24]">&lt;janneke&gt;</a></span><span class="message">it's much easier to stepwise improve on it once it's in</span></div><div class="line" id="151934"><span class="nick" style="color:#af8d2f"><a href="#151934" label="[15:19:34]">&lt;emilytrau[m]&gt;</a></span><span class="message">for that reason i'm going for a bottom-up approach. can more easily get small additions merged in and do a big swap over at the end :D</span></div><div class="line" id="152000"><span class="nick" style="color:#80b1d3"><a href="#152000" label="[15:20:00]">&lt;roconnor&gt;</a></span><span class="message">bash</span></div><div class="line" id="152045"><span class="nick" style="color:#80b1d3"><a href="#152045" label="[15:20:45]">&lt;roconnor&gt;</a></span><span class="message">Sorry I mean to say that ungz works on bash-2.05b.  It's bzip2 where ungz seems to fail.</span></div><div class="line" id="152120"><span class="nick" style="color:#80b1d3"><a href="#152120" label="[15:21:20]">&lt;roconnor&gt;</a></span><span class="message">bzip2-1.0.8.tar.gz</span></div><div class="line" id="152223"><span class="nick" style="color:#389600"><a href="#152223" label="[15:22:23]">&lt;stikonas&gt;</a></span><span class="message">which can now be avoided with unbz2</span></div><div class="line" id="152306"><span class="nick" style="color:#af8d2f"><a href="#152306" label="[15:23:06]">&lt;emilytrau[m]&gt;</a></span><span class="message">huh that's odd. i'm using the main branch of stage0-posix/mescc-tools so maybe there was a change that caused my bash to not decompress 🤔</span></div><div class="line" id="152550"><span class="nick" style="color:#80b1d3"><a href="#152550" label="[15:25:50]">&lt;roconnor&gt;</a></span><span class="message">my mescc-tools-extra seems to be upto date: ec53af69d6d2119b47b369cd0ec37ac806e7ad60</span></div><div class="line" id="152906"><span class="nick" style="color:#af8d2f"><a href="#152906" label="[15:29:06]">&lt;emilytrau[m]&gt;</a></span><span class="message">ah it seems the stage0-posix sub module hasn't been updated in a while</span></div><div class="line" id="161315"><span class="nick" style="color:#234e69"><a href="#161315" label="[16:13:15]">&lt;stikonas[m]&gt;</a></span><span class="message">It's only missing m2libc updates</span></div><div class="line" id="163950"><span class="nick" style="color:#389600"><a href="#163950" label="[16:39:50]">&lt;stikonas&gt;</a></span><span class="message">oh, the one in stage0 repo indeed has not been updated in a while...</span></div><div class="line" id="183823"><span class="nick" style="color:#389600"><a href="#183823" label="[18:38:23]">&lt;stikonas&gt;</a></span><span class="message">janneke: which branch of tcc is 0.9.26 is the newest?</span></div><div class="line" id="184057"><span class="nick" style="color:#389600"><a href="#184057" label="[18:40:57]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://gitlab.com/janneke/tinycc/-/tree/mes-0.25?ref_type=heads">https://gitlab.com/janneke/tinycc/-/tree/mes-0.25?ref_type=heads</a>  ?</span></div><div class="line" id="184844"><span class="nick" style="color:#6c3d55"><a href="#184844" label="[18:48:44]">&lt;janneke&gt;</a></span><span class="message">stikonas: i've been using mes version numbering to keep track with tinycc</span></div><div class="line" id="184900"><span class="nick" style="color:#6c3d55"><a href="#184900" label="[18:49:00]">&lt;janneke&gt;</a></span><span class="message">but haven't upgraded beyond mes-0.23 in guix</span></div><div class="line" id="184939"><span class="nick" style="color:#6c3d55"><a href="#184939" label="[18:49:39]">&lt;janneke&gt;</a></span><span class="message">the newer branches dabbled in arm and risc-v support, without all too much success yet</span></div><br /></div></body></html>