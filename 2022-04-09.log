<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-04-09.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="002417"><span class="nick" style="color:#8dd3c7"><a href="#002417" label="[00:24:17]">&lt;oriansj&gt;</a></span><span class="message">bootstrapping: come for the technicals; stay for the great people you meet along the way</span></div><div class="line" id="105912"><span class="nick" style="color:#2e2a4a"><a href="#105912" label="[10:59:12]">&lt;mid-kid&gt;</a></span><span class="message">I haven't checked up on this project for a looong while. What are some projects that will help me bootstrap a new machine?</span></div><div class="line" id="105933"><span class="nick" style="color:#2e2a4a"><a href="#105933" label="[10:59:33]">&lt;mid-kid&gt;</a></span><span class="message">From the smallest set of binaries, possible.</span></div><div class="line" id="110137"><span class="nick" style="color:#6b8072"><a href="#110137" label="[11:01:37]">&lt;littlebobeep&gt;</a></span><span class="message">mid-kid: git clone <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap">https://github.com/fosslinux/live-bootstrap</a> </span></div><div class="line" id="110143"><span class="nick" style="color:#2e2a4a"><a href="#110143" label="[11:01:43]">&lt;mid-kid&gt;</a></span><span class="message">nice, thanks!</span></div><div class="line" id="110155"><span class="nick" style="color:#6b8072"><a href="#110155" label="[11:01:55]">&lt;littlebobeep&gt;</a></span><span class="message">mid-kid: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst">https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst</a> </span></div><div class="line" id="110233"><span class="nick" style="color:#6b8072"><a href="#110233" label="[11:02:33]">&lt;littlebobeep&gt;</a></span><span class="message">mid-kid: Yeah it's awesome but you need a Linux kernel binary too so ummmmm dunno how to safely compile that, best option might be trusting GNU Guix live environment or something</span></div><div class="line" id="110311"><span class="nick" style="color:#2e2a4a"><a href="#110311" label="[11:03:11]">&lt;mid-kid&gt;</a></span><span class="message">yeah I'll have to trust the compiler on that one</span></div><div class="line" id="110334"><span class="nick" style="color:#2e2a4a"><a href="#110334" label="[11:03:34]">&lt;mid-kid&gt;</a></span><span class="message">I've bootstrapped my current gentoo install manually from mes once, so that's the &quot;safest&quot; thing I have rn.</span></div><div class="line" id="111410"><span class="nick" style="color:#6b8072"><a href="#111410" label="[11:14:10]">&lt;littlebobeep&gt;</a></span><span class="message">mid-kid: That is cool but stage0 does not even start with a C compiler haha</span></div><div class="line" id="111431"><span class="nick" style="color:#6b8072"><a href="#111431" label="[11:14:31]">&lt;littlebobeep&gt;</a></span><span class="message">if just from Mes as I understand it you need a C compiler somehow</span></div><div class="line" id="112432"><span class="nick" style="color:#2e2a4a"><a href="#112432" label="[11:24:32]">&lt;mid-kid&gt;</a></span><span class="message">true, does live-bootstrap start from stage0 or something else?</span></div><div class="line" id="112502"><span class="nick" style="color:#2e2a4a"><a href="#112502" label="[11:25:02]">&lt;mid-kid&gt;</a></span><span class="message">I started from mes+small busybox last I did it.</span></div><div class="line" id="112514"><span class="nick" style="color:#2e2a4a"><a href="#112514" label="[11:25:14]">&lt;mid-kid&gt;</a></span><span class="message">not the best but I didn't feel like breaking my horns</span></div><div class="line" id="113230"><span class="nick" style="color:#80b1d3"><a href="#113230" label="[11:32:30]">&lt;stikonas&gt;</a></span><span class="message">mid-kid: yes, it starts from stage0-posix</span></div><div class="line" id="113249"><span class="nick" style="color:#80b1d3"><a href="#113249" label="[11:32:49]">&lt;stikonas&gt;</a></span><span class="message">basically there are 3 binaries: kernel, hex0 and kaem-minimal</span></div><div class="line" id="113314"><span class="nick" style="color:#80b1d3"><a href="#113314" label="[11:33:14]">&lt;stikonas&gt;</a></span><span class="message">right now only Linux kernel works,  though it can be fairly stripped down</span></div><div class="line" id="113319"><span class="nick" style="color:#80b1d3"><a href="#113319" label="[11:33:19]">&lt;stikonas&gt;</a></span><span class="message">oh and you need 32-bit kernel</span></div><div class="line" id="113345"><span class="nick" style="color:#80b1d3"><a href="#113345" label="[11:33:45]">&lt;stikonas&gt;</a></span><span class="message">at some point maybe more minimalistic kernel would work, oriansj is working on one</span></div><div class="line" id="113525"><span class="nick" style="color:#80b1d3"><a href="#113525" label="[11:35:25]">&lt;stikonas&gt;</a></span><span class="message">mid-kid: after live-bootstrap you'll endup with gcc 4.7.4 now</span></div><div class="line" id="113601"><span class="nick" style="color:#80b1d3"><a href="#113601" label="[11:36:01]">&lt;stikonas&gt;</a></span><span class="message">so you'll need some intermediate toolchain jump before you can get to latest GCC 11</span></div><div class="line" id="113628"><span class="nick" style="color:#80b1d3"><a href="#113628" label="[11:36:28]">&lt;stikonas&gt;</a></span><span class="message">mid-kid: in principle it would be nice to automate steps from live-bootstrap to Gentoo...</span></div><div class="line" id="113641"><span class="nick" style="color:#80b1d3"><a href="#113641" label="[11:36:41]">&lt;stikonas&gt;</a></span><span class="message">but at the moment we haven't built Python yet lin live-bootstrap</span></div><div class="line" id="113649"><span class="nick" style="color:#80b1d3"><a href="#113649" label="[11:36:49]">&lt;stikonas&gt;</a></span><span class="message">so you'll need to build it manually</span></div><div class="line" id="114127"><span class="nick" style="color:#80b1d3"><a href="#114127" label="[11:41:27]">&lt;stikonas&gt;</a></span><span class="message">mid-kid: also if you are going to run bootstrap on baremetal, you might need some bootloader</span></div><div class="line" id="114144"><span class="nick" style="color:#80b1d3"><a href="#114144" label="[11:41:44]">&lt;stikonas&gt;</a></span><span class="message">to load linux kernel + initramfs with live-bootstrap</span></div><div class="line" id="115227"><span class="nick" style="color:#2e2a4a"><a href="#115227" label="[11:52:27]">&lt;mid-kid&gt;</a></span><span class="message">right almost forgot about that, yeah</span></div><div class="line" id="115251"><span class="nick" style="color:#2e2a4a"><a href="#115251" label="[11:52:51]">&lt;mid-kid&gt;</a></span><span class="message">and yeah I know there's some intermediate steps and extran tools needed in bootstrapping gentoo</span></div><div class="line" id="115338"><span class="nick" style="color:#2e2a4a"><a href="#115338" label="[11:53:38]">&lt;mid-kid&gt;</a></span><span class="message">gentoo itself can't be bootstrapped even with the bootstrap.sh script without nudging it and forcing it to build certain packages to break dependency loops</span></div><div class="line" id="115427"><span class="nick" style="color:#2e2a4a"><a href="#115427" label="[11:54:27]">&lt;mid-kid&gt;</a></span><span class="message">it's a mess of a bootstrap but once there, a full rebuild and you have a clean system.</span></div><div class="line" id="115650"><span class="nick" style="color:#2e2a4a"><a href="#115650" label="[11:56:50]">&lt;mid-kid&gt;</a></span><span class="message">(I actually wanted to try bootstrapping slackware this time around, by just running make_world.sh in a loop until hopefully everything compiles except for rust probably)</span></div><div class="line" id="115718"><span class="nick" style="color:#2e2a4a"><a href="#115718" label="[11:57:18]">&lt;mid-kid&gt;</a></span><span class="message">(though I realized I don't have a big enough hard drive for that)</span></div><div class="line" id="115739"><span class="nick" style="color:#6d2462"><a href="#115739" label="[11:57:39]">&lt;bauen1&gt;</a></span><span class="message">mid-kid: it would also be interesting if you managed to rebuild the exact same binary as the prebuild stages</span></div><div class="line" id="115754"><span class="nick" style="color:#2e2a4a"><a href="#115754" label="[11:57:54]">&lt;mid-kid&gt;</a></span><span class="message">oh you mean the stage3?</span></div><div class="line" id="115800"><span class="nick" style="color:#2e2a4a"><a href="#115800" label="[11:58:00]">&lt;mid-kid&gt;</a></span><span class="message">yeah nah I doubt that's happening</span></div><div class="line" id="115807"><span class="nick" style="color:#6d2462"><a href="#115807" label="[11:58:07]">&lt;bauen1&gt;</a></span><span class="message">yes</span></div><div class="line" id="115810"><span class="nick" style="color:#2e2a4a"><a href="#115810" label="[11:58:10]">&lt;mid-kid&gt;</a></span><span class="message">the build bots keep a cache of binary packages around</span></div><div class="line" id="115824"><span class="nick" style="color:#2e2a4a"><a href="#115824" label="[11:58:24]">&lt;mid-kid&gt;</a></span><span class="message">so they only build what's &quot;new&quot;</span></div><div class="line" id="115850"><span class="nick" style="color:#2e2a4a"><a href="#115850" label="[11:58:50]">&lt;mid-kid&gt;</a></span><span class="message">This leads to inconsistencies where glibc is updated but nothing is rebuilt against the new glibc</span></div><div class="line" id="115903"><span class="nick" style="color:#2e2a4a"><a href="#115903" label="[11:59:03]">&lt;mid-kid&gt;</a></span><span class="message">And lol I'm not figuring out how to reproduce *that*</span></div><div class="line" id="115934"><span class="nick" style="color:#6d2462"><a href="#115934" label="[11:59:34]">&lt;bauen1&gt;</a></span><span class="message">mid-kid: maybe you can ask whoever manages that to kick of a &quot;clean&quot; build and then try to come very close to that ? but yes reproducing that would be ... a challenge</span></div><div class="line" id="115959"><span class="nick" style="color:#2e2a4a"><a href="#115959" label="[11:59:59]">&lt;mid-kid&gt;</a></span><span class="message">At that point I might as well run a stage3 build on my current machine.</span></div><div class="line" id="120013"><span class="nick" style="color:#2e2a4a"><a href="#120013" label="[12:00:13]">&lt;mid-kid&gt;</a></span><span class="message">I guess I could try that</span></div><div class="line" id="120027"><span class="nick" style="color:#2e2a4a"><a href="#120027" label="[12:00:27]">&lt;mid-kid&gt;</a></span><span class="message">But I still doubt it's reproducible due to timestamps everywhere at the last</span></div><div class="line" id="120030"><span class="nick" style="color:#2e2a4a"><a href="#120030" label="[12:00:30]">&lt;mid-kid&gt;</a></span><span class="message">*least*</span></div><div class="line" id="120053"><span class="nick" style="color:#6d2462"><a href="#120053" label="[12:00:53]">&lt;bauen1&gt;</a></span><span class="message">mid-kid: well that's basically the idea, but you want the stage3 you build to be the same as the stage3 gentoo currently offers so you can be reasonably sure that the gentoo stage3 is &quot;good&quot;</span></div><div class="line" id="120314"><span class="nick" style="color:#2e2a4a"><a href="#120314" label="[12:03:14]">&lt;mid-kid&gt;</a></span><span class="message">yeah... it might be worth proposing adding at least some reproducibility aware options to the upstream build system but... not today.</span></div><div class="line" id="122130"><span class="nick" style="color:#80b1d3"><a href="#122130" label="[12:21:30]">&lt;stikonas&gt;</a></span><span class="message">yeah, there is no way to reproduce official stage3</span></div><div class="line" id="122202"><span class="nick" style="color:#80b1d3"><a href="#122202" label="[12:22:02]">&lt;stikonas&gt;</a></span><span class="message">but there is less need to do that with gentoo</span></div><div class="line" id="122411"><span class="nick" style="color:#2e2a4a"><a href="#122411" label="[12:24:11]">&lt;mid-kid&gt;</a></span><span class="message">yeah I'd be perfectly content just bootstrapping with a reproducible bare minimum set of binaries</span></div><div class="line" id="131820"><span class="nick" style="color:#2e2a4a"><a href="#131820" label="[13:18:20]">&lt;mid-kid&gt;</a></span><span class="message">One comment I'd like to give to the live-bootstrap repo is that I'd like a bit more insight into what it's actually doing when generating the initramfs.</span></div><div class="line" id="131828"><span class="nick" style="color:#2e2a4a"><a href="#131828" label="[13:18:28]">&lt;mid-kid&gt;</a></span><span class="message">Even if it's just console output that'd be nice.</span></div><div class="line" id="131837"><span class="nick" style="color:#2e2a4a"><a href="#131837" label="[13:18:37]">&lt;mid-kid&gt;</a></span><span class="message">Having a hard time figuring out where the /init binary is coming from.</span></div><div class="line" id="131855"><span class="nick" style="color:#8dd3c7"><a href="#131855" label="[13:18:55]">&lt;oriansj&gt;</a></span><span class="message">well the kernel problem is going to have to be solved in several steps: modified-BootOS =&gt; minimal filesystem =&gt; filesystem-library =&gt; text editor =&gt; hex0 =&gt; hex1 =&gt; hex2 =&gt; M0 =&gt; custom POSIX written in assembly + stage0-posix =&gt; stage0-posix steps till M2-Planet =&gt; custom POSIX written in C =&gt; rest of live-bootstrap</span></div><div class="line" id="131857"><span class="nick" style="color:#2e2a4a"><a href="#131857" label="[13:18:57]">&lt;mid-kid&gt;</a></span><span class="message">Or why it's using a 4.9 kernel when chrooting int sysb</span></div><div class="line" id="131918"><span class="nick" style="color:#2e2a4a"><a href="#131918" label="[13:19:18]">&lt;mid-kid&gt;</a></span><span class="message">(do I have to configure this kernel? can I just tell it to keep running the previous kernel=</span></div><div class="line" id="131921"><span class="nick" style="color:#8dd3c7"><a href="#131921" label="[13:19:21]">&lt;oriansj&gt;</a></span><span class="message">mid-kid: the init binary is just kaem-optional-seed</span></div><div class="line" id="131957"><span class="nick" style="color:#8dd3c7"><a href="#131957" label="[13:19:57]">&lt;oriansj&gt;</a></span><span class="message">it reads kaem.$arch and just runs the script</span></div><div class="line" id="132005"><span class="nick" style="color:#2e2a4a"><a href="#132005" label="[13:20:05]">&lt;mid-kid&gt;</a></span><span class="message">oh</span></div><div class="line" id="132037"><span class="nick" style="color:#2e2a4a"><a href="#132037" label="[13:20:37]">&lt;mid-kid&gt;</a></span><span class="message">I saw it was running kaem.x86 but didn't know that was default behavior for kaem</span></div><div class="line" id="132114"><span class="nick" style="color:#8dd3c7"><a href="#132114" label="[13:21:14]">&lt;oriansj&gt;</a></span><span class="message">mid-kid: it is default behavior for kaem-optional-seed so that multiple architectures can be supported on the same filesystem</span></div><div class="line" id="132213"><span class="nick" style="color:#2e2a4a"><a href="#132213" label="[13:22:13]">&lt;mid-kid&gt;</a></span><span class="message">I see. kaem-minimal.hex0 is the canonical source code for it? It's not generated from somewhere and *then* commented?</span></div><div class="line" id="132233"><span class="nick" style="color:#8dd3c7"><a href="#132233" label="[13:22:33]">&lt;oriansj&gt;</a></span><span class="message">nope, always hand written</span></div><div class="line" id="132236"><span class="nick" style="color:#2e2a4a"><a href="#132236" label="[13:22:36]">&lt;mid-kid&gt;</a></span><span class="message">neat</span></div><div class="line" id="132259"><span class="nick" style="color:#8dd3c7"><a href="#132259" label="[13:22:59]">&lt;oriansj&gt;</a></span><span class="message">like doing art with colored grains of sand</span></div><div class="line" id="132406"><span class="nick" style="color:#8dd3c7"><a href="#132406" label="[13:24:06]">&lt;oriansj&gt;</a></span><span class="message">it is under 800bytes so only 1600 hex chars needed; only jumps are a pain but you learn the tricks of making good comments pretty quick</span></div><div class="line" id="132527"><span class="nick" style="color:#2e2a4a"><a href="#132527" label="[13:25:27]">&lt;mid-kid&gt;</a></span><span class="message">So I assume linux-4.9 is the most recent version that can be built with sysa</span></div><div class="line" id="132534"><span class="nick" style="color:#2e2a4a"><a href="#132534" label="[13:25:34]">&lt;mid-kid&gt;</a></span><span class="message">Can I cheat and provide my own kernel image.</span></div><div class="line" id="132643"><span class="nick" style="color:#2e2a4a"><a href="#132643" label="[13:26:43]">&lt;mid-kid&gt;</a></span><span class="message">I'm sure the machine I'm gonna run this on right now will do just fine with 4.9 but I have other machines that straight up won't lol.</span></div><div class="line" id="132656"><span class="nick" style="color:#8dd3c7"><a href="#132656" label="[13:26:56]">&lt;oriansj&gt;</a></span><span class="message">well aside from potential missing syscalls; you in theory could use any POSIX kernel you want</span></div><div class="line" id="132713"><span class="nick" style="color:#2e2a4a"><a href="#132713" label="[13:27:13]">&lt;mid-kid&gt;</a></span><span class="message">yeah but it's kexecing it</span></div><div class="line" id="132728"><span class="nick" style="color:#8dd3c7"><a href="#132728" label="[13:27:28]">&lt;oriansj&gt;</a></span><span class="message">which would be the potential missing syscalls bit</span></div><div class="line" id="132838"><span class="nick" style="color:#2e2a4a"><a href="#132838" label="[13:28:38]">&lt;mid-kid&gt;</a></span><span class="message">Oh I see I can just set CHROOT=true to skip the whole kernel shtick and keep running with the kernel I built for the machine.</span></div><div class="line" id="132846"><span class="nick" style="color:#8dd3c7"><a href="#132846" label="[13:28:46]">&lt;oriansj&gt;</a></span><span class="message">and the reason for the kexec if I remember correctly was to deal with the RAM disk running out of memory (stikonas/fossy correct me if I remembered that wrong)</span></div><div class="line" id="132901"><span class="nick" style="color:#2e2a4a"><a href="#132901" label="[13:29:01]">&lt;mid-kid&gt;</a></span><span class="message">oh</span></div><div class="line" id="132916"><span class="nick" style="color:#2e2a4a"><a href="#132916" label="[13:29:16]">&lt;mid-kid&gt;</a></span><span class="message">oh right I see sysb will mount a disk</span></div><div class="line" id="133013"><span class="nick" style="color:#2e2a4a"><a href="#133013" label="[13:30:13]">&lt;mid-kid&gt;</a></span><span class="message">Yeah that's exactly what I'm worried about, not having the disk drivers or other stuff</span></div><div class="line" id="133201"><span class="nick" style="color:#2e2a4a"><a href="#133201" label="[13:32:01]">&lt;mid-kid&gt;</a></span><span class="message">I'd rather be dropped off into a shell after sysa honestly...</span></div><div class="line" id="133325"><span class="nick" style="color:#8dd3c7"><a href="#133325" label="[13:33:25]">&lt;oriansj&gt;</a></span><span class="message">they do enjoy contributions and I don't think they would reject a patch adding a flag for turning that sort of behavior on/off</span></div><div class="line" id="133342"><span class="nick" style="color:#2e2a4a"><a href="#133342" label="[13:33:42]">&lt;mid-kid&gt;</a></span><span class="message">I'll see what I can do</span></div><div class="line" id="140003"><span class="nick" style="color:#234e69"><a href="#140003" label="[14:00:03]">&lt;stikonas[m]&gt;</a></span><span class="message">mid-kid: we don't have a shell in sysa</span></div><div class="line" id="140014"><span class="nick" style="color:#234e69"><a href="#140014" label="[14:00:14]">&lt;stikonas[m]&gt;</a></span><span class="message">You'll have to build it first</span></div><div class="line" id="140038"><span class="nick" style="color:#234e69"><a href="#140038" label="[14:00:38]">&lt;stikonas[m]&gt;</a></span><span class="message">And sysa indeed can't build newer Linux kernels</span></div><div class="line" id="140047"><span class="nick" style="color:#234e69"><a href="#140047" label="[14:00:47]">&lt;stikonas[m]&gt;</a></span><span class="message">Maybe make is too old</span></div><div class="line" id="140116"><span class="nick" style="color:#234e69"><a href="#140116" label="[14:01:16]">&lt;stikonas[m]&gt;</a></span><span class="message">And as for rootfs.py, we are now working on simplifying steps</span></div><div class="line" id="140131"><span class="nick" style="color:#8dd3c7"><a href="#140131" label="[14:01:31]">&lt;oriansj&gt;</a></span><span class="message">well you have kaem but it isn't an interactive shell (yet)</span></div><div class="line" id="140132"><span class="nick" style="color:#2e2a4a"><a href="#140132" label="[14:01:32]">&lt;mid-kid&gt;</a></span><span class="message">well yeah of course, I meant dropping me into a shell *after* sysa so I can mount the filesystem and mess with whatever</span></div><div class="line" id="140133"><span class="nick" style="color:#234e69"><a href="#140133" label="[14:01:33]">&lt;stikonas[m]&gt;</a></span><span class="message">And bash is not interactive either</span></div><div class="line" id="140148"><span class="nick" style="color:#234e69"><a href="#140148" label="[14:01:48]">&lt;stikonas[m]&gt;</a></span><span class="message">You need to rebuild bash</span></div><div class="line" id="140153"><span class="nick" style="color:#2e2a4a"><a href="#140153" label="[14:01:53]">&lt;mid-kid&gt;</a></span><span class="message">oh</span></div><div class="line" id="140225"><span class="nick" style="color:#234e69"><a href="#140225" label="[14:02:25]">&lt;stikonas[m]&gt;</a></span><span class="message">bash 2.05 is built without readline</span></div><div class="line" id="140231"><span class="nick" style="color:#2e2a4a"><a href="#140231" label="[14:02:31]">&lt;mid-kid&gt;</a></span><span class="message">I see</span></div><div class="line" id="142505"><span class="nick" style="color:#2e2a4a"><a href="#142505" label="[14:25:05]">&lt;mid-kid&gt;</a></span><span class="message">Yeah I think I'll end up just making a rootfs in chroot mode, copying that to the disk and booting it. Saves headaches in terms figuring out how to preserve the kernel.</span></div><div class="line" id="142543"><span class="nick" style="color:#80b1d3"><a href="#142543" label="[14:25:43]">&lt;stikonas&gt;</a></span><span class="message">oriansj: kexec was actually to avoid assumptions on device drivers in bootstrap kernel</span></div><div class="line" id="142639"><span class="nick" style="color:#80b1d3"><a href="#142639" label="[14:26:39]">&lt;stikonas&gt;</a></span><span class="message">so we boot into a new kernel (sysb)</span></div><div class="line" id="142647"><span class="nick" style="color:#80b1d3"><a href="#142647" label="[14:26:47]">&lt;stikonas&gt;</a></span><span class="message">that should have resonably good storage drivers</span></div><div class="line" id="142657"><span class="nick" style="color:#80b1d3"><a href="#142657" label="[14:26:57]">&lt;stikonas&gt;</a></span><span class="message">and should be able to mount storage for sysc</span></div><div class="line" id="142720"><span class="nick" style="color:#80b1d3"><a href="#142720" label="[14:27:20]">&lt;stikonas&gt;</a></span><span class="message">mid-kid: you bootstrap kernel is not provided by live-bootstrap at all</span></div><div class="line" id="142722"><span class="nick" style="color:#80b1d3"><a href="#142722" label="[14:27:22]">&lt;stikonas&gt;</a></span><span class="message">that's external inpyut</span></div><div class="line" id="142744"><span class="nick" style="color:#2e2a4a"><a href="#142744" label="[14:27:44]">&lt;mid-kid&gt;</a></span><span class="message">yeah I know, I'm just worried the kexec'd kernel won't support the machine properly</span></div><div class="line" id="142756"><span class="nick" style="color:#80b1d3"><a href="#142756" label="[14:27:56]">&lt;stikonas&gt;</a></span><span class="message">it does work fine for qemu</span></div><div class="line" id="142805"><span class="nick" style="color:#80b1d3"><a href="#142805" label="[14:28:05]">&lt;stikonas&gt;</a></span><span class="message">4.9.10 should be fine</span></div><div class="line" id="142806"><span class="nick" style="color:#2e2a4a"><a href="#142806" label="[14:28:06]">&lt;mid-kid&gt;</a></span><span class="message">oh sure</span></div><div class="line" id="142809"><span class="nick" style="color:#2e2a4a"><a href="#142809" label="[14:28:09]">&lt;mid-kid&gt;</a></span><span class="message">for qemu</span></div><div class="line" id="142827"><span class="nick" style="color:#80b1d3"><a href="#142827" label="[14:28:27]">&lt;stikonas&gt;</a></span><span class="message">unless you have some really new storage disk</span></div><div class="line" id="142850"><span class="nick" style="color:#80b1d3"><a href="#142850" label="[14:28:50]">&lt;stikonas&gt;</a></span><span class="message">but I think 4.9.10 supports everything modern (hard drives, ssds, nvme, etc)</span></div><div class="line" id="142858"><span class="nick" style="color:#2e2a4a"><a href="#142858" label="[14:28:58]">&lt;mid-kid&gt;</a></span><span class="message">does 4.9 support NVMe, just out of curiosity?</span></div><div class="line" id="142902"><span class="nick" style="color:#2e2a4a"><a href="#142902" label="[14:29:02]">&lt;mid-kid&gt;</a></span><span class="message">ah</span></div><div class="line" id="142905"><span class="nick" style="color:#2e2a4a"><a href="#142905" label="[14:29:05]">&lt;mid-kid&gt;</a></span><span class="message">neat</span></div><div class="line" id="142921"><span class="nick" style="color:#80b1d3"><a href="#142921" label="[14:29:21]">&lt;stikonas&gt;</a></span><span class="message">in any case, you can simply use usb stick for sysc</span></div><div class="line" id="142930"><span class="nick" style="color:#2e2a4a"><a href="#142930" label="[14:29:30]">&lt;mid-kid&gt;</a></span><span class="message">that's true I guess</span></div><div class="line" id="143001"><span class="nick" style="color:#80b1d3"><a href="#143001" label="[14:30:01]">&lt;stikonas&gt;</a></span><span class="message">right now rootfs.py does some not completely trivial copying of files when preparing sysa</span></div><div class="line" id="143012"><span class="nick" style="color:#80b1d3"><a href="#143012" label="[14:30:12]">&lt;stikonas&gt;</a></span><span class="message">I'm trying to move most of that into kaem/bash scripts in live-bootstrap</span></div><div class="line" id="143412"><span class="nick" style="color:#80b1d3"><a href="#143412" label="[14:34:12]">&lt;stikonas&gt;</a></span><span class="message">but now got some strange error that I can't reproduce interractively</span></div><div class="line" id="143414"><span class="nick" style="color:#80b1d3"><a href="#143414" label="[14:34:14]">&lt;stikonas&gt;</a></span><span class="message"> +&gt; patch -Np0 -i ../../patches/mes-libc.patch</span></div><div class="line" id="143416"><span class="nick" style="color:#80b1d3"><a href="#143416" label="[14:34:16]">&lt;stikonas&gt;</a></span><span class="message">patch: **** Can't create file ../x86/artifact/poiljpqaerror 02:</span></div><div class="line" id="143434"><span class="nick" style="color:#80b1d3"><a href="#143434" label="[14:34:34]">&lt;stikonas&gt;</a></span><span class="message">but if I login into busybox shell and run the same command, patch applies just fine</span></div><div class="line" id="143718"><span class="nick" style="color:#2e2a4a"><a href="#143718" label="[14:37:18]">&lt;mid-kid&gt;</a></span><span class="message">weird</span></div><div class="line" id="151855"><span class="nick" style="color:#6c3d55"><a href="#151855" label="[15:18:55]">&lt;unmatched-paren&gt;</a></span><span class="message">Hm, M2-Planet seems to fail on this simple typedef...</span></div><div class="line" id="151906"><span class="nick" style="color:#6c3d55"><a href="#151906" label="[15:19:06]">&lt;unmatched-paren&gt;</a></span><span class="message">typedef struct Foo Foo;</span></div><div class="line" id="151922"><span class="nick" style="color:#6c3d55"><a href="#151922" label="[15:19:22]">&lt;unmatched-paren&gt;</a></span><span class="message">foo.c:5:ERROR in create_struct</span></div><div class="line" id="151925"><span class="nick" style="color:#6c3d55"><a href="#151925" label="[15:19:25]">&lt;unmatched-paren&gt;</a></span><span class="message">Missing {</span></div><div class="line" id="151947"><span class="nick" style="color:#6c3d55"><a href="#151947" label="[15:19:47]">&lt;unmatched-paren&gt;</a></span><span class="message">oh, i think i know why</span></div><div class="line" id="152005"><span class="nick" style="color:#6c3d55"><a href="#152005" label="[15:20:05]">&lt;unmatched-paren&gt;</a></span><span class="message">does M2 assume that typedef'd types have already been defined?</span></div><div class="line" id="152020"><span class="nick" style="color:#6c3d55"><a href="#152020" label="[15:20:20]">&lt;unmatched-paren&gt;</a></span><span class="message">or are being defined in the typedef</span></div><div class="line" id="152500"><span class="nick" style="color:#6c3d55"><a href="#152500" label="[15:25:00]">&lt;unmatched-paren&gt;</a></span><span class="message">because this is one of these constructs: `typedef struct XXX XXX; struct XXX {...};`</span></div><div class="line" id="153420"><span class="nick" style="color:#6c3d55"><a href="#153420" label="[15:34:20]">&lt;unmatched-paren&gt;</a></span><span class="message">By the way... i've decided on a plan for implementing my Pascal compiler: write it in M2-Planet C, outputting QBE IL, then add an M1 backend once that's done to allow building it from M2.</span></div><div class="line" id="153448"><span class="nick" style="color:#6c3d55"><a href="#153448" label="[15:34:48]">&lt;unmatched-paren&gt;</a></span><span class="message">(QBE is a little too complex to be built with M2, sadly)</span></div><div class="line" id="153506"><span class="nick" style="color:#6c3d55"><a href="#153506" label="[15:35:06]">&lt;unmatched-paren&gt;</a></span><span class="message">But i'm not good enough at asm to do an M1 backend from the start.</span></div><div class="line" id="153715"><span class="nick" style="color:#80b1d3"><a href="#153715" label="[15:37:15]">&lt;stikonas&gt;</a></span><span class="message">unmatched-paren: but do you need Pascal so early in the boot chain?</span></div><div class="line" id="153735"><span class="nick" style="color:#80b1d3"><a href="#153735" label="[15:37:35]">&lt;stikonas&gt;</a></span><span class="message">unless you really need it, buildable by tcc or even gcc is usually good enough</span></div><div class="line" id="153813"><span class="nick" style="color:#80b1d3"><a href="#153813" label="[15:38:13]">&lt;stikonas&gt;</a></span><span class="message">we only really need M2 compatibility for early tools before tcc is built</span></div><div class="line" id="155833"><span class="nick" style="color:#8dd3c7"><a href="#155833" label="[15:58:33]">&lt;oriansj&gt;</a></span><span class="message"> unmatched-paren: M2 requires everything to be defined *BEFORE* use; (functions have to be prototyped($args); or implemented($args){$statements})</span></div><div class="line" id="155903"><span class="nick" style="color:#8dd3c7"><a href="#155903" label="[15:59:03]">&lt;oriansj&gt;</a></span><span class="message">Types have to be fully defined prior to use and typedef is a use</span></div><div class="line" id="155959"><span class="nick" style="color:#80b1d3"><a href="#155959" label="[15:59:59]">&lt;stikonas&gt;</a></span><span class="message">anyway, rather than trying to figure out why patch binary is failing, I have fixed make-3.80 build script not to need patching at all...</span></div><div class="line" id="160632"><span class="nick" style="color:#8dd3c7"><a href="#160632" label="[16:06:32]">&lt;oriansj&gt;</a></span><span class="message">stikonas: perhaps just a minor sanity test of is it the binary or the environment</span></div><div class="line" id="160723"><span class="nick" style="color:#8dd3c7"><a href="#160723" label="[16:07:23]">&lt;oriansj&gt;</a></span><span class="message">aka put a statically compiled binary from gcc in there and have it do the patch and see if it works or if it fails because something is missing from the environment</span></div><div class="line" id="161942"><span class="nick" style="color:#80b1d3"><a href="#161942" label="[16:19:42]">&lt;stikonas&gt;</a></span><span class="message">I can try that if patch binary fails later with other packages...</span></div><div class="line" id="162028"><span class="nick" style="color:#80b1d3"><a href="#162028" label="[16:20:28]">&lt;stikonas&gt;</a></span><span class="message">right now I  can build make without patching it al all. Just had to add a single extra -D define</span></div><div class="line" id="162535"><span class="nick" style="color:#80b1d3"><a href="#162535" label="[16:25:35]">&lt;stikonas&gt;</a></span><span class="message">oh, it might be environment</span></div><div class="line" id="162546"><span class="nick" style="color:#80b1d3"><a href="#162546" label="[16:25:46]">&lt;stikonas&gt;</a></span><span class="message">I think I removed TMPDIR=/tmp variable which is necessary</span></div><div class="line" id="162557"><span class="nick" style="color:#80b1d3"><a href="#162557" label="[16:25:57]">&lt;stikonas&gt;</a></span><span class="message">in any case, cleaning up make build script is good</span></div><div class="line" id="162613"><span class="nick" style="color:#80b1d3"><a href="#162613" label="[16:26:13]">&lt;stikonas&gt;</a></span><span class="message">and patch can now be moved later in bootstrap and built with makefile rather than kaem script</span></div><div class="line" id="170435"><span class="nick" style="color:#2e2a4a"><a href="#170435" label="[17:04:35]">&lt;mid-kid&gt;</a></span><span class="message">Quick question, but is there any specific reason musl was picked over glibc as is used in the guix bootstrap? Also why is tcc built against musl instead of just keeping using the mes-libc?</span></div><div class="line" id="172344"><span class="nick" style="color:#2e2a4a"><a href="#172344" label="[17:23:44]">&lt;mid-kid&gt;</a></span><span class="message">oh and what is perl used for in sysa?</span></div><div class="line" id="172630"><span class="nick" style="color:#2e2a4a"><a href="#172630" label="[17:26:30]">&lt;mid-kid&gt;</a></span><span class="message">oh is it for gnulib</span></div><div class="line" id="174634"><span class="nick" style="color:#2e2a4a"><a href="#174634" label="[17:46:34]">&lt;mid-kid&gt;</a></span><span class="message">oh wow the perl-5.32.1 build does the thing where it mistakenly places all man pages in /.</span></div><div class="line" id="174654"><span class="nick" style="color:#2e2a4a"><a href="#174654" label="[17:46:54]">&lt;mid-kid&gt;</a></span><span class="message">I forgot what causes that bug, but I guess it's fine if they're just deleted afterwards.</span></div><div class="line" id="175220"><span class="nick" style="color:#2e2a4a"><a href="#175220" label="[17:52:20]">&lt;mid-kid&gt;</a></span><span class="message">So uh. What is sysc's &quot;target&quot;? Why is it building all the packages it is? Are they all dependencies of xbps or is it just &quot;upgrade all recent toolchain components&quot;?</span></div><div class="line" id="175227"><span class="nick" style="color:#2e2a4a"><a href="#175227" label="[17:52:27]">&lt;mid-kid&gt;</a></span><span class="message">s/recent/major/</span></div><div class="line" id="175337"><span class="nick" style="color:#2e2a4a"><a href="#175337" label="[17:53:37]">&lt;mid-kid&gt;</a></span><span class="message">Or is guile the target?</span></div><div class="line" id="175902"><span class="nick" style="color:#2e2a4a"><a href="#175902" label="[17:59:02]">&lt;mid-kid&gt;</a></span><span class="message">Not entirely sure why xbps is used at all when the packages it ends up packaging into the format aren't enough to make a working rootfs out of</span></div><div class="line" id="182132"><span class="nick" style="color:#80b1d3"><a href="#182132" label="[18:21:32]">&lt;stikonas&gt;</a></span><span class="message">mid-kid: yes, musl has far simpler build system</span></div><div class="line" id="182136"><span class="nick" style="color:#80b1d3"><a href="#182136" label="[18:21:36]">&lt;stikonas&gt;</a></span><span class="message">no autotools, etc</span></div><div class="line" id="182147"><span class="nick" style="color:#80b1d3"><a href="#182147" label="[18:21:47]">&lt;stikonas&gt;</a></span><span class="message">and also mes libc is very limited</span></div><div class="line" id="182156"><span class="nick" style="color:#80b1d3"><a href="#182156" label="[18:21:56]">&lt;stikonas&gt;</a></span><span class="message">it's not enough to build most of the software</span></div><div class="line" id="182202"><span class="nick" style="color:#80b1d3"><a href="#182202" label="[18:22:02]">&lt;stikonas&gt;</a></span><span class="message">e.g. interactive bash</span></div><div class="line" id="182206"><span class="nick" style="color:#80b1d3"><a href="#182206" label="[18:22:06]">&lt;stikonas&gt;</a></span><span class="message">and lots of other stuff too</span></div><div class="line" id="182227"><span class="nick" style="color:#2e2a4a"><a href="#182227" label="[18:22:27]">&lt;mid-kid&gt;</a></span><span class="message">well yeah but interactive bash is built after gcc is bootstrapped anyway</span></div><div class="line" id="182236"><span class="nick" style="color:#80b1d3"><a href="#182236" label="[18:22:36]">&lt;stikonas&gt;</a></span><span class="message">mid-kid: and also, non GPL software is a bit tricky</span></div><div class="line" id="182237"><span class="nick" style="color:#80b1d3"><a href="#182237" label="[18:22:37]">&lt;stikonas&gt;</a></span><span class="message">mes is GPL</span></div><div class="line" id="182251"><span class="nick" style="color:#80b1d3"><a href="#182251" label="[18:22:51]">&lt;stikonas&gt;</a></span><span class="message">we already have this problem with heirloom-devtools</span></div><div class="line" id="182257"><span class="nick" style="color:#80b1d3"><a href="#182257" label="[18:22:57]">&lt;stikonas&gt;</a></span><span class="message">but that will go away once we can use gash with mes</span></div><div class="line" id="182314"><span class="nick" style="color:#2e2a4a"><a href="#182314" label="[18:23:14]">&lt;mid-kid&gt;</a></span><span class="message">I thought glibc was gpl?</span></div><div class="line" id="182402"><span class="nick" style="color:#2e2a4a"><a href="#182402" label="[18:24:02]">&lt;mid-kid&gt;</a></span><span class="message">wonder why heirloom-devtools is being built at all, I've never seen that in the guix bootstrap scripts</span></div><div class="line" id="182426"><span class="nick" style="color:#2e2a4a"><a href="#182426" label="[18:24:26]">&lt;mid-kid&gt;</a></span><span class="message">oh it's for flex/yacc</span></div><div class="line" id="182454"><span class="nick" style="color:#2e2a4a"><a href="#182454" label="[18:24:54]">&lt;mid-kid&gt;</a></span><span class="message">I guess that is necessary unless you use the pre-generated .y.c files</span></div><div class="line" id="182516"><span class="nick" style="color:#234e69"><a href="#182516" label="[18:25:16]">&lt;stikonas[m]&gt;</a></span><span class="message">Glibc is lgpl</span></div><div class="line" id="182520"><span class="nick" style="color:#234e69"><a href="#182520" label="[18:25:20]">&lt;stikonas[m]&gt;</a></span><span class="message">Mes is gpl</span></div><div class="line" id="182614"><span class="nick" style="color:#2e2a4a"><a href="#182614" label="[18:26:14]">&lt;mid-kid&gt;</a></span><span class="message">not sure why that'd be an issue, musl is mit, afaik none of those licenses are incompatible.</span></div><div class="line" id="182620"><span class="nick" style="color:#2e2a4a"><a href="#182620" label="[18:26:20]">&lt;mid-kid&gt;</a></span><span class="message">oooohh</span></div><div class="line" id="182644"><span class="nick" style="color:#2e2a4a"><a href="#182644" label="[18:26:44]">&lt;mid-kid&gt;</a></span><span class="message">right static linking</span></div><div class="line" id="182644"><span class="nick" style="color:#234e69"><a href="#182644" label="[18:26:44]">&lt;stikonas[m]&gt;</a></span><span class="message">So non GPL stuff linked against mes is non redistributable</span></div><div class="line" id="182651"><span class="nick" style="color:#2e2a4a"><a href="#182651" label="[18:26:51]">&lt;mid-kid&gt;</a></span><span class="message">I see</span></div><div class="line" id="182704"><span class="nick" style="color:#234e69"><a href="#182704" label="[18:27:04]">&lt;stikonas[m]&gt;</a></span><span class="message">Static linking is irrelevant</span></div><div class="line" id="182706"><span class="nick" style="color:#234e69"><a href="#182706" label="[18:27:06]">&lt;stikonas[m]&gt;</a></span><span class="message">GPL apples to dynamic too</span></div><div class="line" id="182825"><span class="nick" style="color:#2e2a4a"><a href="#182825" label="[18:28:25]">&lt;mid-kid&gt;</a></span><span class="message">yeah and LGPL is basically a GPL when statically linked</span></div><div class="line" id="182931"><span class="nick" style="color:#234e69"><a href="#182931" label="[18:29:31]">&lt;stikonas[m]&gt;</a></span><span class="message">It depends</span></div><div class="line" id="182947"><span class="nick" style="color:#2e2a4a"><a href="#182947" label="[18:29:47]">&lt;mid-kid&gt;</a></span><span class="message">which I guess would be an issue when using glibc as the (statically linked) libc</span></div><div class="line" id="182949"><span class="nick" style="color:#234e69"><a href="#182949" label="[18:29:49]">&lt;stikonas[m]&gt;</a></span><span class="message">If you provide object files for relinking then it's fine</span></div><div class="line" id="182956"><span class="nick" style="color:#2e2a4a"><a href="#182956" label="[18:29:56]">&lt;mid-kid&gt;</a></span><span class="message">right yeah</span></div><div class="line" id="183019"><span class="nick" style="color:#2e2a4a"><a href="#183019" label="[18:30:19]">&lt;mid-kid&gt;</a></span><span class="message">it's complicated™</span></div><div class="line" id="183019"><span class="nick" style="color:#234e69"><a href="#183019" label="[18:30:19]">&lt;stikonas[m]&gt;</a></span><span class="message">Anyway musl works</span></div><div class="line" id="183022"><span class="nick" style="color:#234e69"><a href="#183022" label="[18:30:22]">&lt;stikonas[m]&gt;</a></span><span class="message">And is easy to build</span></div><div class="line" id="183038"><span class="nick" style="color:#234e69"><a href="#183038" label="[18:30:38]">&lt;stikonas[m]&gt;</a></span><span class="message">Glibc might not be even buildable with tcc</span></div><div class="line" id="183053"><span class="nick" style="color:#2e2a4a"><a href="#183053" label="[18:30:53]">&lt;mid-kid&gt;</a></span><span class="message">it isn't, the guix bootstrap builds binutils/gcc first</span></div><div class="line" id="183102"><span class="nick" style="color:#2e2a4a"><a href="#183102" label="[18:31:02]">&lt;mid-kid&gt;</a></span><span class="message">(using the mes libc)</span></div><div class="line" id="183155"><span class="nick" style="color:#234e69"><a href="#183155" label="[18:31:55]">&lt;stikonas[m]&gt;</a></span><span class="message">Yes, and then goes for GCC 2.95.3</span></div><div class="line" id="183211"><span class="nick" style="color:#234e69"><a href="#183211" label="[18:32:11]">&lt;stikonas[m]&gt;</a></span><span class="message">Musl can build at least GCC 4.0.4</span></div><div class="line" id="183217"><span class="nick" style="color:#234e69"><a href="#183217" label="[18:32:17]">&lt;stikonas[m]&gt;</a></span><span class="message">With tcc</span></div><div class="line" id="183245"><span class="nick" style="color:#2e2a4a"><a href="#183245" label="[18:32:45]">&lt;mid-kid&gt;</a></span><span class="message">nice</span></div><div class="line" id="183315"><span class="nick" style="color:#2e2a4a"><a href="#183315" label="[18:33:15]">&lt;mid-kid&gt;</a></span><span class="message">I guess removing intermediate compiler versions would make it easier to introduce new architectures later down the line</span></div><div class="line" id="183409"><span class="nick" style="color:#234e69"><a href="#183409" label="[18:34:09]">&lt;stikonas[m]&gt;</a></span><span class="message">Exactly</span></div><div class="line" id="183432"><span class="nick" style="color:#234e69"><a href="#183432" label="[18:34:32]">&lt;stikonas[m]&gt;</a></span><span class="message">GCC and binutils are hardest to port to new arches</span></div><div class="line" id="183450"><span class="nick" style="color:#2e2a4a"><a href="#183450" label="[18:34:50]">&lt;mid-kid&gt;</a></span><span class="message">libc would be a contender for that as well</span></div><div class="line" id="183705"><span class="nick" style="color:#234e69"><a href="#183705" label="[18:37:05]">&lt;stikonas[m]&gt;</a></span><span class="message">musl has at least risc64 port</span></div><div class="line" id="183716"><span class="nick" style="color:#234e69"><a href="#183716" label="[18:37:16]">&lt;stikonas[m]&gt;</a></span><span class="message">So we are good for some time</span></div><div class="line" id="183730"><span class="nick" style="color:#234e69"><a href="#183730" label="[18:37:30]">&lt;stikonas[m]&gt;</a></span><span class="message">It doesn't have risc32 but oh well</span></div><div class="line" id="183848"><span class="nick" style="color:#234e69"><a href="#183848" label="[18:38:48]">&lt;stikonas[m]&gt;</a></span><span class="message">Riscv32 hardware probably won't be capable of running full Linux system</span></div><div class="line" id="183912"><span class="nick" style="color:#2e2a4a"><a href="#183912" label="[18:39:12]">&lt;mid-kid&gt;</a></span><span class="message">guix goes through mes, two different versions of tcc, gcc-2.95.3, gcc-4.6.4, and finally gcc-4.9. live-bootstrap uses both tcc versions, gcc-4.0.4, and ends up with gcc-4.7.4</span></div><div class="line" id="183931"><span class="nick" style="color:#2e2a4a"><a href="#183931" label="[18:39:31]">&lt;mid-kid&gt;</a></span><span class="message">I wonder what the oldest version of gcc that can build gcc-11 is</span></div><div class="line" id="183953"><span class="nick" style="color:#2e2a4a"><a href="#183953" label="[18:39:53]">&lt;mid-kid&gt;</a></span><span class="message">I know glibc requires a fairly recent version (I believe 5.4?)</span></div><div class="line" id="184008"><span class="nick" style="color:#2e2a4a"><a href="#184008" label="[18:40:08]">&lt;mid-kid&gt;</a></span><span class="message">not to mention a recent binutils</span></div><div class="line" id="184240"><span class="nick" style="color:#234e69"><a href="#184240" label="[18:42:40]">&lt;stikonas[m]&gt;</a></span><span class="message">you need 1 extra step between GCC 4.7.4 and 11</span></div><div class="line" id="184254"><span class="nick" style="color:#234e69"><a href="#184254" label="[18:42:54]">&lt;stikonas[m]&gt;</a></span><span class="message">Prob GCC 10 makes most sense</span></div><div class="line" id="184317"><span class="nick" style="color:#2e2a4a"><a href="#184317" label="[18:43:17]">&lt;mid-kid&gt;</a></span><span class="message">gcc 10 can be built with 4.7??</span></div><div class="line" id="184636"><span class="nick" style="color:#80b1d3"><a href="#184636" label="[18:46:36]">&lt;stikonas&gt;</a></span><span class="message">not 100% sure but it might work</span></div><div class="line" id="184647"><span class="nick" style="color:#80b1d3"><a href="#184647" label="[18:46:47]">&lt;stikonas&gt;</a></span><span class="message">GCC 11 increased C++ requirements</span></div><div class="line" id="184700"><span class="nick" style="color:#2e2a4a"><a href="#184700" label="[18:47:00]">&lt;mid-kid&gt;</a></span><span class="message">I guess I'll find out.</span></div><div class="line" id="184715"><span class="nick" style="color:#80b1d3"><a href="#184715" label="[18:47:15]">&lt;stikonas&gt;</a></span><span class="message">in any case there will be only 1 extra step between 4.7.4 and 11</span></div><div class="line" id="190357"><span class="nick" style="color:#6c3d55"><a href="#190357" label="[19:03:57]">&lt;unmatched-paren&gt;</a></span><span class="message">stikonas: re pascal at M2 stage, no reason why we'd need it i can think of, it just sounds like a fun challenge :)</span></div><div class="line" id="190529"><span class="nick" style="color:#6c3d55"><a href="#190529" label="[19:05:29]">&lt;unmatched-paren&gt;</a></span><span class="message">i'm going through an archive.org PDF of the dragon book</span></div><div class="line" id="195301"><span class="nick" style="color:#6c3d55"><a href="#195301" label="[19:53:01]">&lt;unmatched-paren&gt;</a></span><span class="message">btw, is there anything i should know that isn't in the dragon book (presumably because of its age some new techniques aren't in there?)</span></div><div class="line" id="195754"><span class="nick" style="color:#6c3d55"><a href="#195754" label="[19:57:54]">&lt;unmatched-paren&gt;</a></span><span class="message">i just realized that there's something else that's probably more important than Nim that's written in Pascal... ΤεΧ!</span></div><div class="line" id="200048"><span class="nick" style="color:#6c3d55"><a href="#200048" label="[20:00:48]">&lt;unmatched-paren&gt;</a></span><span class="message">but ΤεΧ is written in WEB, which is written in WEB... does the tangled output of a literate programming count as a blob?</span></div><div class="line" id="200109"><span class="nick" style="color:#6c3d55"><a href="#200109" label="[20:01:09]">&lt;unmatched-paren&gt;</a></span><span class="message">s/programming/programming system/</span></div><div class="line" id="201551"><span class="nick" style="color:#2e2a4a"><a href="#201551" label="[20:15:51]">&lt;mid-kid&gt;</a></span><span class="message">according to the DFSG, anything that's not manually written/created by a human is a blob</span></div><div class="line" id="201606"><span class="nick" style="color:#2e2a4a"><a href="#201606" label="[20:16:06]">&lt;mid-kid&gt;</a></span><span class="message">which is why configure scripts generated from autoconf count</span></div><div class="line" id="202556"><span class="nick" style="color:#6c3d55"><a href="#202556" label="[20:25:56]">&lt;unmatched-paren&gt;</a></span><span class="message">yeah, but the autoconf configure scripts are not exactly readable</span></div><div class="line" id="202621"><span class="nick" style="color:#6c3d55"><a href="#202621" label="[20:26:21]">&lt;unmatched-paren&gt;</a></span><span class="message">it's pretty obvious if code generated from literate programs deviates from the source</span></div><div class="line" id="202655"><span class="nick" style="color:#6c3d55"><a href="#202655" label="[20:26:55]">&lt;unmatched-paren&gt;</a></span><span class="message">there's no binary or bizarre bourne shell syntax to dig through :P</span></div><div class="line" id="202728"><span class="nick" style="color:#6c3d55"><a href="#202728" label="[20:27:28]">&lt;unmatched-paren&gt;</a></span><span class="message">the Pascal output from WEB shouldn't be too hard to check manually</span></div><div class="line" id="202750"><span class="nick" style="color:#6c3d55"><a href="#202750" label="[20:27:50]">&lt;unmatched-paren&gt;</a></span><span class="message">a WEB code extractor for bootstrapping purposes is overkill</span></div><div class="line" id="202808"><span class="nick" style="color:#2e2a4a"><a href="#202808" label="[20:28:08]">&lt;mid-kid&gt;</a></span><span class="message">I mean, I've read through plenty of generated configure scripts and even partially &quot;reversed&quot; one.</span></div><div class="line" id="202827"><span class="nick" style="color:#2e2a4a"><a href="#202827" label="[20:28:27]">&lt;mid-kid&gt;</a></span><span class="message">It gets fun when old projects use autoconf-1.12.2, good luck finding the source for that lol</span></div><div class="line" id="202850"><span class="nick" style="color:#2e2a4a"><a href="#202850" label="[20:28:50]">&lt;mid-kid&gt;</a></span><span class="message">But yeah I get what you're saying.</span></div><div class="line" id="202909"><span class="nick" style="color:#2e2a4a"><a href="#202909" label="[20:29:09]">&lt;mid-kid&gt;</a></span><span class="message">Still, better safe than sorry, if you can generate it, do that.</span></div><div class="line" id="202952"><span class="nick" style="color:#6c3d55"><a href="#202952" label="[20:29:52]">&lt;unmatched-paren&gt;</a></span><span class="message">WEB's source code for extracting Pascal is probably pretty trivial, let me see if i can find it</span></div><div class="line" id="203002"><span class="nick" style="color:#2e2a4a"><a href="#203002" label="[20:30:02]">&lt;mid-kid&gt;</a></span><span class="message">Damn, I missed my chance to make a &quot;garbage in garbage out&quot; joke with regards to autoconf :P</span></div><div class="line" id="203055"><span class="nick" style="color:#6c3d55"><a href="#203055" label="[20:30:55]">&lt;unmatched-paren&gt;</a></span><span class="message">ah, i've never used it or studied a .ac or .am extensively</span></div><div class="line" id="203120"><span class="nick" style="color:#6c3d55"><a href="#203120" label="[20:31:20]">&lt;unmatched-paren&gt;</a></span><span class="message">I looked at the Guix configure.ac and immediately typed `:q!&lt;RET&gt;` :P</span></div><div class="line" id="203152"><span class="nick" style="color:#2e2a4a"><a href="#203152" label="[20:31:52]">&lt;mid-kid&gt;</a></span><span class="message">heh</span></div><div class="line" id="203253"><span class="nick" style="color:#6c3d55"><a href="#203253" label="[20:32:53]">&lt;unmatched-paren&gt;</a></span><span class="message">this license might be... problematic <a rel="nofollow" href="https://www.ctan.org/license/knuth">https://www.ctan.org/license/knuth</a> </span></div><div class="line" id="203554"><span class="nick" style="color:#6c3d55"><a href="#203554" label="[20:35:54]">&lt;unmatched-paren&gt;</a></span><span class="message">apparently there are reasons it's fine for tex, but i'm not sure about WEB</span></div><div class="line" id="203636"><span class="nick" style="color:#6c3d55"><a href="#203636" label="[20:36:36]">&lt;unmatched-paren&gt;</a></span><span class="message">either way, we can just write a free WEB extractor and use it on tex without ever going through WEB (if it is really necessary)</span></div><div class="line" id="204458"><span class="nick" style="color:#80b1d3"><a href="#204458" label="[20:44:58]">&lt;stikonas&gt;</a></span><span class="message">I thought Web can be converted to C</span></div><div class="line" id="204509"><span class="nick" style="color:#80b1d3"><a href="#204509" label="[20:45:09]">&lt;stikonas&gt;</a></span><span class="message">so WEB-&gt;C-&gt;binary would be fine</span></div><div class="line" id="204512"><span class="nick" style="color:#80b1d3"><a href="#204512" label="[20:45:12]">&lt;stikonas&gt;</a></span><span class="message">or is that not the case</span></div><div class="line" id="204644"><span class="nick" style="color:#80b1d3"><a href="#204644" label="[20:46:44]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.tug.org/svn/texlive/trunk/Build/source/texk/web2c/web2c/">https://www.tug.org/svn/texlive/trunk/Build/source/texk/web2c/web2c/</a> </span></div><div class="line" id="221747"><span class="nick" style="color:#8dd3c7"><a href="#221747" label="[22:17:47]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: I don't think we deeply looked into the WEB bootstrap requirements yet (wasn't on the radar yet) but anything not written by a human is to be considered a blob and wouldn't be considered acceptable</span></div><div class="line" id="221805"><span class="nick" style="color:#8dd3c7"><a href="#221805" label="[22:18:05]">&lt;oriansj&gt;</a></span><span class="message">the readablity of a blob doesn't excuse its blob nature</span></div><div class="line" id="222229"><span class="nick" style="color:#8dd3c7"><a href="#222229" label="[22:22:29]">&lt;oriansj&gt;</a></span><span class="message">but feel free to add what notes you do have about it to the wiki and it'll be updated as someone thinks more about it and what is needed.</span></div><div class="line" id="222719"><span class="nick" style="color:#8dd3c7"><a href="#222719" label="[22:27:19]">&lt;oriansj&gt;</a></span><span class="message">and you are right licensing and build requirements might complicate things but worst case is someone spends time writing some code from scratch and solves it the hard way.</span></div><div class="line" id="222855"><span class="nick" style="color:#6c3d55"><a href="#222855" label="[22:28:55]">&lt;unmatched-paren&gt;</a></span><span class="message">stikonas: how does that work? does it convert WEB to Pascal and then Pascal to C?</span></div><div class="line" id="222858"><span class="nick" style="color:#8dd3c7"><a href="#222858" label="[22:28:58]">&lt;oriansj&gt;</a></span><span class="message">but the first step to bootstrapping any language is first get the facts about what is available, what is absolutely needed and where the gaps are</span></div><div class="line" id="223227"><span class="nick" style="color:#8dd3c7"><a href="#223227" label="[22:32:27]">&lt;oriansj&gt;</a></span><span class="message">a few hours looking around can save months of work if one is lucky</span></div><div class="line" id="223324"><span class="nick" style="color:#6c3d55"><a href="#223324" label="[22:33:24]">&lt;unmatched-paren&gt;</a></span><span class="message">well, so far i can't find any way of bootstrapping pascal other than writing a new compiler; FPC has LOADS of non-standard features</span></div><div class="line" id="223346"><span class="nick" style="color:#8dd3c7"><a href="#223346" label="[22:33:46]">&lt;oriansj&gt;</a></span><span class="message">but remember that sometimes reasonable assumptions like a language can be built by version-1 doesn't always hold and can catch one without warning</span></div><div class="line" id="223356"><span class="nick" style="color:#6c3d55"><a href="#223356" label="[22:33:56]">&lt;unmatched-paren&gt;</a></span><span class="message">the oldest versions I can find only work on *ancient* hardware</span></div><div class="line" id="223409"><span class="nick" style="color:#6c3d55"><a href="#223409" label="[22:34:09]">&lt;unmatched-paren&gt;</a></span><span class="message">and aren't even anywhere near the first release</span></div><div class="line" id="223436"><span class="nick" style="color:#8dd3c7"><a href="#223436" label="[22:34:36]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: and by ancient hardware would it mean SIMH or qemu or dosbox emulation?</span></div><div class="line" id="223443"><span class="nick" style="color:#6c3d55"><a href="#223443" label="[22:34:43]">&lt;unmatched-paren&gt;</a></span><span class="message">i suspect that it was never written in anything but Pascal, and was originally bootstrapped from one of the proprietary pascals</span></div><div class="line" id="223553"><span class="nick" style="color:#6c3d55"><a href="#223553" label="[22:35:53]">&lt;unmatched-paren&gt;</a></span><span class="message">oriansj: well, it was originally written for DOS (I think in response to Borland dropping support for it)</span></div><div class="line" id="223616"><span class="nick" style="color:#6c3d55"><a href="#223616" label="[22:36:16]">&lt;unmatched-paren&gt;</a></span><span class="message">the architectures were m88k and some really old 16(?)-bit Intel arch</span></div><div class="line" id="223708"><span class="nick" style="color:#6c3d55"><a href="#223708" label="[22:37:08]">&lt;unmatched-paren&gt;</a></span><span class="message">we could probably run it in dosbox, the problem is compiling it in the first place</span></div><div class="line" id="223744"><span class="nick" style="color:#6c3d55"><a href="#223744" label="[22:37:44]">&lt;unmatched-paren&gt;</a></span><span class="message">oh, i think it was just a really old ia32</span></div><div class="line" id="223754"><span class="nick" style="color:#6c3d55"><a href="#223754" label="[22:37:54]">&lt;unmatched-paren&gt;</a></span><span class="message">but as i said, it was always pascal</span></div><div class="line" id="223801"><span class="nick" style="color:#80b1d3"><a href="#223801" label="[22:38:01]">&lt;stikonas&gt;</a></span><span class="message">unmatched-paren: well, I don't know how it works, you can take a look. But I doubt that it goes via Pascal, why would it...</span></div><div class="line" id="223820"><span class="nick" style="color:#6c3d55"><a href="#223820" label="[22:38:20]">&lt;unmatched-paren&gt;</a></span><span class="message">anyway, building stuff in chains is tedious, especially with something THAT old</span></div><div class="line" id="223844"><span class="nick" style="color:#80b1d3"><a href="#223844" label="[22:38:44]">&lt;stikonas&gt;</a></span><span class="message">well, that's why we still haven't bootstrapped ghc...</span></div><div class="line" id="223851"><span class="nick" style="color:#80b1d3"><a href="#223851" label="[22:38:51]">&lt;stikonas&gt;</a></span><span class="message">it is really tedious with old software</span></div><div class="line" id="223918"><span class="nick" style="color:#6c3d55"><a href="#223918" label="[22:39:18]">&lt;unmatched-paren&gt;</a></span><span class="message">&quot;Originally, the compiler was a 16-bit DOS executable compiled by Turbo Pascal.&quot; &lt;- in which case it'll almost certainly have used Turbo Pascal extensions</span></div><div class="line" id="223925"><span class="nick" style="color:#80b1d3"><a href="#223925" label="[22:39:25]">&lt;stikonas&gt;</a></span><span class="message">rekado tried again recently but I think not successfully</span></div><div class="line" id="223955"><span class="nick" style="color:#6c3d55"><a href="#223955" label="[22:39:55]">&lt;unmatched-paren&gt;</a></span><span class="message">stikonas: when is the GHC we're trying to bootstrap from?</span></div><div class="line" id="224104"><span class="nick" style="color:#80b1d3"><a href="#224104" label="[22:41:04]">&lt;stikonas&gt;</a></span><span class="message">unmatched-paren: 2000</span></div><div class="line" id="224108"><span class="nick" style="color:#6c3d55"><a href="#224108" label="[22:41:08]">&lt;unmatched-paren&gt;</a></span><span class="message">hm</span></div><div class="line" id="224111"><span class="nick" style="color:#80b1d3"><a href="#224111" label="[22:41:11]">&lt;stikonas&gt;</a></span><span class="message">but written in quite nasty C</span></div><div class="line" id="224124"><span class="nick" style="color:#6c3d55"><a href="#224124" label="[22:41:24]">&lt;unmatched-paren&gt;</a></span><span class="message">the oldest FPC is apparently from 1997</span></div><div class="line" id="224127"><span class="nick" style="color:#80b1d3"><a href="#224127" label="[22:41:27]">&lt;stikonas&gt;</a></span><span class="message">which doesn't build on normal toolchains</span></div><div class="line" id="224137"><span class="nick" style="color:#6c3d55"><a href="#224137" label="[22:41:37]">&lt;unmatched-paren&gt;</a></span><span class="message">but written in a proprietary Pascal dialect :P</span></div><div class="line" id="224219"><span class="nick" style="color:#6c3d55"><a href="#224219" label="[22:42:19]">&lt;unmatched-paren&gt;</a></span><span class="message">ok, early history of FPC according to wikipedia:</span></div><div class="line" id="224310"><span class="nick" style="color:#6c3d55"><a href="#224310" label="[22:43:10]">&lt;unmatched-paren&gt;</a></span><span class="message">- 1997: guy gets angry at Borland for cutting support for DOS and decides to make his own compiler starting from Turbo Pascal</span></div><div class="line" id="224326"><span class="nick" style="color:#8dd3c7"><a href="#224326" label="[22:43:26]">&lt;oriansj&gt;</a></span><span class="message">well I found a version of pascal written in JavaScript: <a rel="nofollow" href="https://github.com/ghaiklor/pascal-interpreter">https://github.com/ghaiklor/pascal-interpreter</a> </span></div><div class="line" id="224343"><span class="nick" style="color:#6c3d55"><a href="#224343" label="[22:43:43]">&lt;unmatched-paren&gt;</a></span><span class="message">- circa 1999: the compiler can compile itself, but probably does so via loads of non-standard extensions</span></div><div class="line" id="224400"><span class="nick" style="color:#6c3d55"><a href="#224400" label="[22:44:00]">&lt;unmatched-paren&gt;</a></span><span class="message">- a bit later (wikipedia is vague here): linux port</span></div><div class="line" id="224407"><span class="nick" style="color:#6c3d55"><a href="#224407" label="[22:44:07]">&lt;unmatched-paren&gt;</a></span><span class="message">oriansj: i found many pascals</span></div><div class="line" id="224437"><span class="nick" style="color:#6c3d55"><a href="#224437" label="[22:44:37]">&lt;unmatched-paren&gt;</a></span><span class="message">the problem is, it seems like to make pascal useful, you need a lot of non-standard extensions</span></div><div class="line" id="224440"><span class="nick" style="color:#8dd3c7"><a href="#224440" label="[22:44:40]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: just not any good enough to bootstrap FPC?</span></div><div class="line" id="224444"><span class="nick" style="color:#6c3d55"><a href="#224444" label="[22:44:44]">&lt;unmatched-paren&gt;</a></span><span class="message">yep</span></div><div class="line" id="224523"><span class="nick" style="color:#6c3d55"><a href="#224523" label="[22:45:23]">&lt;unmatched-paren&gt;</a></span><span class="message">p2c, rascal, that thing, GNU Pascal (you mentioned that you could never get it working?), ...</span></div><div class="line" id="224535"><span class="nick" style="color:#6c3d55"><a href="#224535" label="[22:45:35]">&lt;unmatched-paren&gt;</a></span><span class="message">GNU Pascal follows a different standard, anyway</span></div><div class="line" id="224539"><span class="nick" style="color:#8dd3c7"><a href="#224539" label="[22:45:39]">&lt;oriansj&gt;</a></span><span class="message">so you would have to extend it: <a rel="nofollow" href="https://github.com/kevallakhani95/Pascal-Interpreter">https://github.com/kevallakhani95/Pascal-Interpreter</a>  say from the basic core to flush out all of the extra bits needed one at a time</span></div><div class="line" id="224553"><span class="nick" style="color:#80b1d3"><a href="#224553" label="[22:45:53]">&lt;stikonas&gt;</a></span><span class="message">or patch the sources out</span></div><div class="line" id="224600"><span class="nick" style="color:#80b1d3"><a href="#224600" label="[22:46:00]">&lt;stikonas&gt;</a></span><span class="message">to remove non-standard extensions</span></div><div class="line" id="224606"><span class="nick" style="color:#80b1d3"><a href="#224606" label="[22:46:06]">&lt;stikonas&gt;</a></span><span class="message">whichever is easier</span></div><div class="line" id="224608"><span class="nick" style="color:#6c3d55"><a href="#224608" label="[22:46:08]">&lt;unmatched-paren&gt;</a></span><span class="message">gpc was following some ANSI or ISO standard 'Extended Pascal' or something</span></div><div class="line" id="224621"><span class="nick" style="color:#6c3d55"><a href="#224621" label="[22:46:21]">&lt;unmatched-paren&gt;</a></span><span class="message">fpc follows Turbo and now Delphi</span></div><div class="line" id="224648"><span class="nick" style="color:#6c3d55"><a href="#224648" label="[22:46:48]">&lt;unmatched-paren&gt;</a></span><span class="message">stikonas: not possible, the Delphi OOP features are used in a lot of places</span></div><div class="line" id="224700"><span class="nick" style="color:#8dd3c7"><a href="#224700" label="[22:47:00]">&lt;oriansj&gt;</a></span><span class="message">which are incompatible pascal dialects</span></div><div class="line" id="224707"><span class="nick" style="color:#6c3d55"><a href="#224707" label="[22:47:07]">&lt;unmatched-paren&gt;</a></span><span class="message">yep</span></div><div class="line" id="224719"><span class="nick" style="color:#d9d9d9"><a href="#224719" label="[22:47:19]">*</a></span><span class="message">unmatched-paren afk, sorry</span></div><div class="line" id="224849"><span class="nick" style="color:#8dd3c7"><a href="#224849" label="[22:48:49]">&lt;oriansj&gt;</a></span><span class="message">well I am guessing not every feature it supports is needed for it to be built</span></div><div class="line" id="225608"><span class="nick" style="color:#8dd3c7"><a href="#225608" label="[22:56:08]">&lt;oriansj&gt;</a></span><span class="message">but as you like a good challenge; doing a compiler is scratch is good fun</span></div><div class="line" id="230000"><span class="nick" style="color:#8dd3c7"><a href="#230000" label="[23:00:00]">&lt;oriansj&gt;</a></span><span class="message">So that leaves a couple paths: easy mode (just pick your favorite high level language), normal mode (pick any language that can be built by in Guix without binary substitutes) or hard mode (pick any stage0-posix language for extra nerd cred)</span></div><div class="line" id="230053"><span class="nick" style="color:#d9d9d9"><a href="#230053" label="[23:00:53]">*</a></span><span class="message">unmatched-paren back</span></div><div class="line" id="230102"><span class="nick" style="color:#8dd3c7"><a href="#230102" label="[23:01:02]">&lt;oriansj&gt;</a></span><span class="message">allthough the thought of M2-Planet directly building QBE and cproc is very interesting</span></div><div class="line" id="230133"><span class="nick" style="color:#6c3d55"><a href="#230133" label="[23:01:33]">&lt;unmatched-paren&gt;</a></span><span class="message">oriansj: &quot;I am guessing not every feature&quot; a reasonable assumption, but unfortunately mostly incorrect</span></div><div class="line" id="230145"><span class="nick" style="color:#8dd3c7"><a href="#230145" label="[23:01:45]">&lt;oriansj&gt;</a></span><span class="message">as that combo can directly build GCC 4.7.4</span></div><div class="line" id="230213"><span class="nick" style="color:#8dd3c7"><a href="#230213" label="[23:02:13]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: double ouch, talk about a bad bootstrapping language combo</span></div><div class="line" id="230239"><span class="nick" style="color:#6c3d55"><a href="#230239" label="[23:02:39]">&lt;unmatched-paren&gt;</a></span><span class="message">oriansj: my query above about typedef was the result of a failed attempt to compile QBE with m2</span></div><div class="line" id="230247"><span class="nick" style="color:#6c3d55"><a href="#230247" label="[23:02:47]">&lt;unmatched-paren&gt;</a></span><span class="message">s/above/earlier/</span></div><div class="line" id="230324"><span class="nick" style="color:#6c3d55"><a href="#230324" label="[23:03:24]">&lt;unmatched-paren&gt;</a></span><span class="message">i noticed that it used bitfields in the same file, does m2 support them?</span></div><div class="line" id="230332"><span class="nick" style="color:#6c3d55"><a href="#230332" label="[23:03:32]">&lt;unmatched-paren&gt;</a></span><span class="message">it certainly is an intriguing idea</span></div><div class="line" id="230345"><span class="nick" style="color:#8dd3c7"><a href="#230345" label="[23:03:45]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: nope it wasn't a feature needed yet</span></div><div class="line" id="230356"><span class="nick" style="color:#6c3d55"><a href="#230356" label="[23:03:56]">&lt;unmatched-paren&gt;</a></span><span class="message">oriansj: to give you an idea of the pascal problem:</span></div><div class="line" id="230442"><span class="nick" style="color:#6c3d55"><a href="#230442" label="[23:04:42]">&lt;unmatched-paren&gt;</a></span><span class="message">almost every .pas file contains a `unit` declaration. this is pascal's module system.</span></div><div class="line" id="230449"><span class="nick" style="color:#6c3d55"><a href="#230449" label="[23:04:49]">&lt;unmatched-paren&gt;</a></span><span class="message">`unit` is a turbo pascal extension.</span></div><div class="line" id="230935"><span class="nick" style="color:#6c3d55"><a href="#230935" label="[23:09:35]">&lt;unmatched-paren&gt;</a></span><span class="message">oriansj: btw, QBE emits GAS asm</span></div><div class="line" id="230946"><span class="nick" style="color:#6c3d55"><a href="#230946" label="[23:09:46]">&lt;unmatched-paren&gt;</a></span><span class="message">so you'd need M2 to be able to compile GAS too</span></div><div class="line" id="231104"><span class="nick" style="color:#8dd3c7"><a href="#231104" label="[23:11:04]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: well support for GAS was in the M3 work that got put on hold</span></div><div class="line" id="231104"><span class="nick" style="color:#6c3d55"><a href="#231104" label="[23:11:04]">&lt;unmatched-paren&gt;</a></span><span class="message">at that point, M2 would basically be a complete cc and you wouldn't need cproc at all</span></div><div class="line" id="231134"><span class="nick" style="color:#6c3d55"><a href="#231134" label="[23:11:34]">&lt;unmatched-paren&gt;</a></span><span class="message">there's chibicc, which can apparently build cproc and qbe</span></div><div class="line" id="231156"><span class="nick" style="color:#6c3d55"><a href="#231156" label="[23:11:56]">&lt;unmatched-paren&gt;</a></span><span class="message">but it probably suffers from the same architecture support problem as mes</span></div><div class="line" id="231217"><span class="nick" style="color:#6c3d55"><a href="#231217" label="[23:12:17]">&lt;unmatched-paren&gt;</a></span><span class="message">fpc is about as non-standard as rustc.</span></div><div class="line" id="231302"><span class="nick" style="color:#6c3d55"><a href="#231302" label="[23:13:02]">&lt;unmatched-paren&gt;</a></span><span class="message">oh, yeah, fpc also has a non-standard preprocessor which is used *everywhere*</span></div><div class="line" id="231326"><span class="nick" style="color:#6c3d55"><a href="#231326" label="[23:13:26]">&lt;unmatched-paren&gt;</a></span><span class="message">heh, the first file I pull up contains `class` in the first type declaration</span></div><div class="line" id="231333"><span class="nick" style="color:#6c3d55"><a href="#231333" label="[23:13:33]">&lt;unmatched-paren&gt;</a></span><span class="message">which is a delphi thing</span></div><div class="line" id="231407"><span class="nick" style="color:#6c3d55"><a href="#231407" label="[23:14:07]">&lt;unmatched-paren&gt;</a></span><span class="message">i seem to remember that `unit` was used even in the really old fpc i found somewhere (can't remember where)</span></div><div class="line" id="231415"><span class="nick" style="color:#6c3d55"><a href="#231415" label="[23:14:15]">&lt;unmatched-paren&gt;</a></span><span class="message">and the preprocessor i think</span></div><div class="line" id="231453"><span class="nick" style="color:#6c3d55"><a href="#231453" label="[23:14:53]">&lt;unmatched-paren&gt;</a></span><span class="message">something slightly more trivial: // line comments are also non-standard</span></div><div class="line" id="231454"><span class="nick" style="color:#8dd3c7"><a href="#231454" label="[23:14:54]">&lt;oriansj&gt;</a></span><span class="message">chibicc also needs binutils to make binaries</span></div><div class="line" id="231502"><span class="nick" style="color:#6c3d55"><a href="#231502" label="[23:15:02]">&lt;unmatched-paren&gt;</a></span><span class="message">hm</span></div><div class="line" id="231524"><span class="nick" style="color:#6c3d55"><a href="#231524" label="[23:15:24]">&lt;unmatched-paren&gt;</a></span><span class="message">could we write a micro-binutils in m2?</span></div><div class="line" id="231536"><span class="nick" style="color:#6c3d55"><a href="#231536" label="[23:15:36]">&lt;unmatched-paren&gt;</a></span><span class="message">M2-ld, M2-as, etc</span></div><div class="line" id="231547"><span class="nick" style="color:#8dd3c7"><a href="#231547" label="[23:15:47]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: well yes, rather easily</span></div><div class="line" id="231632"><span class="nick" style="color:#8dd3c7"><a href="#231632" label="[23:16:32]">&lt;oriansj&gt;</a></span><span class="message">in fact I got a linker mostly done in M2 already: <a rel="nofollow" href="https://github.com/oriansj/M3-Meteoroid">https://github.com/oriansj/M3-Meteoroid</a> </span></div><div class="line" id="231711"><span class="nick" style="color:#6c3d55"><a href="#231711" label="[23:17:11]">&lt;unmatched-paren&gt;</a></span><span class="message">M2 doesn't seem to like the anonymous union in that QBE file either</span></div><div class="line" id="231718"><span class="nick" style="color:#6c3d55"><a href="#231718" label="[23:17:18]">&lt;unmatched-paren&gt;</a></span><span class="message">s/union/enum/</span></div><div class="line" id="231732"><span class="nick" style="color:#8dd3c7"><a href="#231732" label="[23:17:32]">&lt;oriansj&gt;</a></span><span class="message">well M2 doesn't even support enums</span></div><div class="line" id="231757"><span class="nick" style="color:#6c3d55"><a href="#231757" label="[23:17:57]">&lt;unmatched-paren&gt;</a></span><span class="message">oriansj: i tried replacing the enum with a bunch of #defines and an int</span></div><div class="line" id="231802"><span class="nick" style="color:#8dd3c7"><a href="#231802" label="[23:18:02]">&lt;oriansj&gt;</a></span><span class="message">didn't need them when we had #define (or CONSTANT support)</span></div><div class="line" id="231850"><span class="nick" style="color:#6c3d55"><a href="#231850" label="[23:18:50]">&lt;unmatched-paren&gt;</a></span><span class="message">after that, i got &quot;Token exceeded MAX_STRING char limit</span></div><div class="line" id="231905"><span class="nick" style="color:#6c3d55"><a href="#231905" label="[23:19:05]">&lt;unmatched-paren&gt;</a></span><span class="message">i tried incresing --max-string to 100, which didn't work</span></div><div class="line" id="231925"><span class="nick" style="color:#6c3d55"><a href="#231925" label="[23:19:25]">&lt;unmatched-paren&gt;</a></span><span class="message">i guess there's something in there which M2 is mistakenly... identifying... as an identifier?</span></div><div class="line" id="231938"><span class="nick" style="color:#8dd3c7"><a href="#231938" label="[23:19:38]">&lt;oriansj&gt;</a></span><span class="message">MAX_STRING is 4096chars long</span></div><div class="line" id="231942"><span class="nick" style="color:#6c3d55"><a href="#231942" label="[23:19:42]">&lt;unmatched-paren&gt;</a></span><span class="message">hm</span></div><div class="line" id="232000"><span class="nick" style="color:#8dd3c7"><a href="#232000" label="[23:20:00]">&lt;oriansj&gt;</a></span><span class="message">so there is probably a string more than 4KB in length (or block comment)</span></div><div class="line" id="232032"><span class="nick" style="color:#6c3d55"><a href="#232032" label="[23:20:32]">&lt;unmatched-paren&gt;</a></span><span class="message">here's the file: <a rel="nofollow" href="https://c9x.me/git/qbe.git/tree/load.c">https://c9x.me/git/qbe.git/tree/load.c</a> </span></div><div class="line" id="232033"><span class="nick" style="color:#8dd3c7"><a href="#232033" label="[23:20:33]">&lt;oriansj&gt;</a></span><span class="message">set to 1MB should be fine</span></div><div class="line" id="232047"><span class="nick" style="color:#6c3d55"><a href="#232047" label="[23:20:47]">&lt;unmatched-paren&gt;</a></span><span class="message">no large strings that I can see</span></div><div class="line" id="232059"><span class="nick" style="color:#6c3d55"><a href="#232059" label="[23:20:59]">&lt;unmatched-paren&gt;</a></span><span class="message">it's probably misinterpreting something as a string</span></div><div class="line" id="232118"><span class="nick" style="color:#6c3d55"><a href="#232118" label="[23:21:18]">&lt;unmatched-paren&gt;</a></span><span class="message">(I was just choosing random files, this was the first one i tried)</span></div><div class="line" id="232143"><span class="nick" style="color:#8dd3c7"><a href="#232143" label="[23:21:43]">&lt;oriansj&gt;</a></span><span class="message"> easy to figure out in cgdb</span></div><div class="line" id="232145"><span class="nick" style="color:#6c3d55"><a href="#232145" label="[23:21:45]">&lt;unmatched-paren&gt;</a></span><span class="message">next up...</span></div><div class="line" id="232145"><span class="nick" style="color:#6c3d55"><a href="#232145" label="[23:21:45]">&lt;unmatched-paren&gt;</a></span><span class="message">paren@guix-aspire ~/code/qbe [env]$ M2-Planet -f copy.c -o copy.M1</span></div><div class="line" id="232145"><span class="nick" style="color:#6c3d55"><a href="#232145" label="[23:21:45]">&lt;unmatched-paren&gt;</a></span><span class="message">Unknown type static</span></div><div class="line" id="232206"><span class="nick" style="color:#6c3d55"><a href="#232206" label="[23:22:06]">&lt;unmatched-paren&gt;</a></span><span class="message">i don't think this particular idea will be very successful</span></div><div class="line" id="232329"><span class="nick" style="color:#6c3d55"><a href="#232329" label="[23:23:29]">&lt;unmatched-paren&gt;</a></span><span class="message">M2 doesn't seem to support #include either?</span></div><div class="line" id="232338"><span class="nick" style="color:#6c3d55"><a href="#232338" label="[23:23:38]">&lt;unmatched-paren&gt;</a></span><span class="message">Unknown type BSet</span></div><div class="line" id="232344"><span class="nick" style="color:#6c3d55"><a href="#232344" label="[23:23:44]">&lt;unmatched-paren&gt;</a></span><span class="message">^ should be in a header</span></div><div class="line" id="232539"><span class="nick" style="color:#6c3d55"><a href="#232539" label="[23:25:39]">&lt;unmatched-paren&gt;</a></span><span class="message">ok, back to pascal</span></div><div class="line" id="232546"><span class="nick" style="color:#6c3d55"><a href="#232546" label="[23:25:46]">&lt;unmatched-paren&gt;</a></span><span class="message">since this isn't going very well</span></div><div class="line" id="232721"><span class="nick" style="color:#6c3d55"><a href="#232721" label="[23:27:21]">&lt;unmatched-paren&gt;</a></span><span class="message">oriansj: if you want to have a look at the fpc repo, it's at <a rel="nofollow" href="https://gitlab.com/freepascal.org/fpc/source">https://gitlab.com/freepascal.org/fpc/source</a> </span></div><div class="line" id="232825"><span class="nick" style="color:#6c3d55"><a href="#232825" label="[23:28:25]">&lt;unmatched-paren&gt;</a></span><span class="message">you can see object-oriented stuff pretty much everywhere</span></div><div class="line" id="233111"><span class="nick" style="color:#6c3d55"><a href="#233111" label="[23:31:11]">&lt;unmatched-paren&gt;</a></span><span class="message">btw, is there a clever acronym for M3-Meteoroid? ;) M2-Planet is 'PLAtform NEutral Transpiler', M2-Mesoplanet is 'Macro Expander Saving Our m2-PLANET', etc</span></div><div class="line" id="233602"><span class="nick" style="color:#8dd3c7"><a href="#233602" label="[23:36:02]">&lt;oriansj&gt;</a></span><span class="message">no unmatched-paren M2 doesn't support #include but M2-Mesoplanet does</span></div><div class="line" id="233648"><span class="nick" style="color:#8dd3c7"><a href="#233648" label="[23:36:48]">&lt;oriansj&gt;</a></span><span class="message">see M2-Planet is designed to run on bare metal where things like #include are meaningless and can't work</span></div><div class="line" id="233653"><span class="nick" style="color:#6c3d55"><a href="#233653" label="[23:36:53]">&lt;unmatched-paren&gt;</a></span><span class="message">ah</span></div><div class="line" id="233741"><span class="nick" style="color:#8dd3c7"><a href="#233741" label="[23:37:41]">&lt;oriansj&gt;</a></span><span class="message">yes but it doesn't get revealed until after a working version is out</span></div><div class="line" id="233757"><span class="nick" style="color:#6c3d55"><a href="#233757" label="[23:37:57]">&lt;unmatched-paren&gt;</a></span><span class="message">i see :)</span></div><div class="line" id="234022"><span class="nick" style="color:#6c3d55"><a href="#234022" label="[23:40:22]">&lt;unmatched-paren&gt;</a></span><span class="message">another thing you should note (but not a blocker) if you decide to pursue the cproc idea further: cproc doesn't have a preprocessor yet, you need to use `mcpp`, an external program</span></div><div class="line" id="234036"><span class="nick" style="color:#6c3d55"><a href="#234036" label="[23:40:36]">&lt;unmatched-paren&gt;</a></span><span class="message">(which is not developed by the same person)</span></div><div class="line" id="234208"><span class="nick" style="color:#8dd3c7"><a href="#234208" label="[23:42:08]">&lt;oriansj&gt;</a></span><span class="message">thanks for the tip</span></div><div class="line" id="234438"><span class="nick" style="color:#6c3d55"><a href="#234438" label="[23:44:38]">&lt;unmatched-paren&gt;</a></span><span class="message">or you could just use the mesoplanet preprocessor...</span></div><div class="line" id="234711"><span class="nick" style="color:#8dd3c7"><a href="#234711" label="[23:47:11]">&lt;oriansj&gt;</a></span><span class="message">assuming we expand it enough and turn off the bits for passing information to M2-Planet about original file names and line numbers</span></div><div class="line" id="234752"><span class="nick" style="color:#6c3d55"><a href="#234752" label="[23:47:52]">&lt;unmatched-paren&gt;</a></span><span class="message">oh, it's not a typical preprocessor, got it</span></div><div class="line" id="234800"><span class="nick" style="color:#80b1d3"><a href="#234800" label="[23:48:00]">&lt;stikonas&gt;</a></span><span class="message">we also need to add an option to turn off includes in Mesoplanet</span></div><div class="line" id="234824"><span class="nick" style="color:#80b1d3"><a href="#234824" label="[23:48:24]">&lt;stikonas&gt;</a></span><span class="message">it might be useful when building mes-m2</span></div><div class="line" id="234846"><span class="nick" style="color:#80b1d3"><a href="#234846" label="[23:48:46]">&lt;stikonas&gt;</a></span><span class="message">unmatched-paren: line numbers is just a comment</span></div><div class="line" id="234900"><span class="nick" style="color:#80b1d3"><a href="#234900" label="[23:49:00]">&lt;stikonas&gt;</a></span><span class="message">oriansj: needed a way to tell M2-Planet how to print meaningful error messages</span></div><div class="line" id="234901"><span class="nick" style="color:#8dd3c7"><a href="#234901" label="[23:49:01]">&lt;oriansj&gt;</a></span><span class="message">stikonas: oh, that is trivial</span></div><div class="line" id="234917"><span class="nick" style="color:#8dd3c7"><a href="#234917" label="[23:49:17]">&lt;oriansj&gt;</a></span><span class="message">like 8 lines total</span></div><div class="line" id="234929"><span class="nick" style="color:#80b1d3"><a href="#234929" label="[23:49:29]">&lt;stikonas&gt;</a></span><span class="message">yeah, I didn't expect it to be hard</span></div><div class="line" id="234935"><span class="nick" style="color:#80b1d3"><a href="#234935" label="[23:49:35]">&lt;stikonas&gt;</a></span><span class="message">but right now I was working on live-bootstrap</span></div><div class="line" id="234945"><span class="nick" style="color:#8dd3c7"><a href="#234945" label="[23:49:45]">&lt;oriansj&gt;</a></span><span class="message">it'll force you to specify all the C sources with -f</span></div><div class="line" id="234959"><span class="nick" style="color:#8dd3c7"><a href="#234959" label="[23:49:59]">&lt;oriansj&gt;</a></span><span class="message">but I can get that up in a couple minutes</span></div><div class="line" id="235102"><span class="nick" style="color:#80b1d3"><a href="#235102" label="[23:51:02]">&lt;stikonas&gt;</a></span><span class="message">recently we were getting a few complaints that it's not completely clear how to create live-bootstrap image (i.e. what rootfs.py does), so I'm trying to make it trivial</span></div><div class="line" id="235215"><span class="nick" style="color:#6c3d55"><a href="#235215" label="[23:52:15]">&lt;unmatched-paren&gt;</a></span><span class="message">fpc is kinda big <a rel="nofollow" href="https://paste.debian.net/1237421/">https://paste.debian.net/1237421/</a> </span></div><div class="line" id="235223"><span class="nick" style="color:#8dd3c7"><a href="#235223" label="[23:52:23]">&lt;oriansj&gt;</a></span><span class="message">and using stage0-posix-x86 instead of stage0-posix should simplify things a great deal</span></div><div class="line" id="235225"><span class="nick" style="color:#6c3d55"><a href="#235225" label="[23:52:25]">&lt;unmatched-paren&gt;</a></span><span class="message">that's just the compiler, too</span></div><div class="line" id="235249"><span class="nick" style="color:#6c3d55"><a href="#235249" label="[23:52:49]">&lt;unmatched-paren&gt;</a></span><span class="message">there's also the runtime, the stdlib, the tests, and the utilities</span></div><div class="line" id="235453"><span class="nick" style="color:#6c3d55"><a href="#235453" label="[23:54:53]">&lt;unmatched-paren&gt;</a></span><span class="message">the runtime <a rel="nofollow" href="https://paste.debian.net/1237422/">https://paste.debian.net/1237422/</a>,  the utilities <a rel="nofollow" href="https://paste.debian.net/1237423/">https://paste.debian.net/1237423/</a>,  and the tests <a rel="nofollow" href="https://paste.debian.net/1237424/">https://paste.debian.net/1237424/</a> </span></div><div class="line" id="235512"><span class="nick" style="color:#6c3d55"><a href="#235512" label="[23:55:12]">&lt;unmatched-paren&gt;</a></span><span class="message">(paste.debian.net didn't `ls -R` in the root, it was too big)</span></div><div class="line" id="235636"><span class="nick" style="color:#6c3d55"><a href="#235636" label="[23:56:36]">&lt;unmatched-paren&gt;</a></span><span class="message">it doesn't let me post the stdlib's `ls -R`, either</span></div><div class="line" id="235842"><span class="nick" style="color:#6c3d55"><a href="#235842" label="[23:58:42]">&lt;unmatched-paren&gt;</a></span><span class="message">wow. the standard library contains, among many other things: wasmtime bindigs, Boehm GC bindings, mySQL, SQLite, and Postgres bindings, gitlab api bindings, gtk1, gtk2, sdl, cairo... and many more things: <a rel="nofollow" href="https://paste.debian.net/1237425/">https://paste.debian.net/1237425/</a> </span></div><br /></div></body></html>