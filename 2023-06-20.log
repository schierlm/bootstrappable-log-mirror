<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-06-20.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="004452"><span class="nick" style="color:#389600"><a href="#004452" label="[00:44:52]">&lt;theruran&gt;</a></span><span class="message">1,500 bits of new old stock ferrite core memory for $8 <a rel="nofollow" href="https://www.ebay.com/itm/354016007799">https://www.ebay.com/itm/354016007799</a> </span></div><div class="line" id="013218"><span class="nick" style="color:#8dd3c7"><a href="#013218" label="[01:32:18]">&lt;fossy&gt;</a></span><span class="message">stikonas: oh that's pretty cool :D</span></div><div class="line" id="013252"><span class="nick" style="color:#2e2a4a"><a href="#013252" label="[01:32:52]">&lt;stikonas&gt;</a></span><span class="message">I wasn't able to produce fully static binaries with it yet, it dynamically links to glibc...</span></div><div class="line" id="013311"><span class="nick" style="color:#2e2a4a"><a href="#013311" label="[01:33:11]">&lt;stikonas&gt;</a></span><span class="message">probably it's possible to fix that with LDFLAGS=&quot;-static&quot; but then I need to build musl and static python...</span></div><div class="line" id="013345"><span class="nick" style="color:#2e2a4a"><a href="#013345" label="[01:33:45]">&lt;stikonas&gt;</a></span><span class="message">it's also noticably faster than cpython programs</span></div><div class="line" id="014606"><span class="nick" style="color:#8dd3c7"><a href="#014606" label="[01:46:06]">&lt;fossy&gt;</a></span><span class="message">that's not overly surprising, given that python is interpreted haha</span></div><div class="line" id="153649"><span class="nick" style="color:#6b8072"><a href="#153649" label="[15:36:49]">&lt;kerravon&gt;</a></span><span class="message">it just occurred to me. do you really need to start the bootstrapping process by entering code and writing it to disk? isn't it enough to simply enter enough code (via whatever method deemed safe) to simply VERIFY that the hex on the disk is correct before executing it?</span></div><div class="line" id="154750"><span class="nick" style="color:#6b8072"><a href="#154750" label="[15:47:50]">&lt;kerravon&gt;</a></span><span class="message">oriansj - with regards to 386 DOS - how do you intend to access the INT 21H DOS functions? will you be using a DOS extender in protected mode and using the DPMI interface?</span></div><div class="line" id="154835"><span class="nick" style="color:#6b8072"><a href="#154835" label="[15:48:35]">&lt;kerravon&gt;</a></span><span class="message">once you start adding a dos extender, you may as well add the HX dos extender</span></div><div class="line" id="154844"><span class="nick" style="color:#6b8072"><a href="#154844" label="[15:48:44]">&lt;kerravon&gt;</a></span><span class="message">and that gives you a win32 system</span></div><div class="line" id="155001"><span class="nick" style="color:#6b8072"><a href="#155001" label="[15:50:01]">&lt;kerravon&gt;</a></span><span class="message">(sufficient subset)</span></div><div class="line" id="164517"><span class="nick" style="color:#6b8072"><a href="#164517" label="[16:45:17]">&lt;kerravon&gt;</a></span><span class="message">and can the bootstrap be done from a pressed cdrom, using a microscope to verify the pits in the boot sector are the expected hex?</span></div><div class="line" id="164752"><span class="nick" style="color:#6b8072"><a href="#164752" label="[16:47:52]">&lt;kerravon&gt;</a></span><span class="message">i was wondering if it would be useful to have the firmware using a 68020 processor to read x86 code from the cdrom, but i don't think that buys anything</span></div><div class="line" id="165434"><span class="nick" style="color:#6b8072"><a href="#165434" label="[16:54:34]">&lt;kerravon&gt;</a></span><span class="message">i'm not sure how anything can be considered secure when the bios is a black box</span></div><div class="line" id="165554"><span class="nick" style="color:#6b8072"><a href="#165554" label="[16:55:54]">&lt;kerravon&gt;</a></span><span class="message">i guess seabios could be flashed from the cdrom at the beginning of the process</span></div><div class="line" id="165642"><span class="nick" style="color:#6b8072"><a href="#165642" label="[16:56:42]">&lt;kerravon&gt;</a></span><span class="message">and then at the end of the mostly-automated process, seabios is built and compared to the original that was flashed</span></div><div class="line" id="165702"><span class="nick" style="color:#6b8072"><a href="#165702" label="[16:57:02]">&lt;kerravon&gt;</a></span><span class="message">so long as you trust the flashing process</span></div><div class="line" id="170035"><span class="nick" style="color:#6b8072"><a href="#170035" label="[17:00:35]">&lt;kerravon&gt;</a></span><span class="message">i think after verifying the sector c binary is on the cdrom, you need to have it display a c program, and ask the operator to hit enter, and then i think the rest of the process can be automated if you are happy to rely on md5 signatures</span></div><div class="line" id="170152"><span class="nick" style="color:#6b8072"><a href="#170152" label="[17:01:52]">&lt;kerravon&gt;</a></span><span class="message">actually it's not just relying on the md5 signatures. you can verify that sector c has generated the executable that is already on the pressed cdrom</span></div><div class="line" id="170213"><span class="nick" style="color:#6b8072"><a href="#170213" label="[17:02:13]">&lt;kerravon&gt;</a></span><span class="message">ie your first sector c program can do that verification</span></div><div class="line" id="170230"><span class="nick" style="color:#6b8072"><a href="#170230" label="[17:02:30]">&lt;kerravon&gt;</a></span><span class="message">and if it passes, then run it</span></div><div class="line" id="170412"><span class="nick" style="color:#6b8072"><a href="#170412" label="[17:04:12]">&lt;kerravon&gt;</a></span><span class="message">hmmm. i think you still need to read each source file, as well as doing the md5 check of the source, before doing the generated binary comparison</span></div><div class="line" id="170725"><span class="nick" style="color:#80b1d3"><a href="#170725" label="[17:07:25]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, nobody here claims to have solved BIOS or hardware bootstrap process</span></div><div class="line" id="170836"><span class="nick" style="color:#80b1d3"><a href="#170836" label="[17:08:36]">&lt;stikonas[m]&gt;</a></span><span class="message">But those are the most common machines on the market</span></div><div class="line" id="170906"><span class="nick" style="color:#80b1d3"><a href="#170906" label="[17:09:06]">&lt;stikonas[m]&gt;</a></span><span class="message">You'll never be able to recreate Intel or AMD processor at home</span></div><div class="line" id="170937"><span class="nick" style="color:#80b1d3"><a href="#170937" label="[17:09:37]">&lt;stikonas[m]&gt;</a></span><span class="message">So for these machines assumption is that HW/FW is trusted</span></div><div class="line" id="171001"><span class="nick" style="color:#80b1d3"><a href="#171001" label="[17:10:01]">&lt;stikonas[m]&gt;</a></span><span class="message">If you don't trust them, you need a different hardware, I.e. maybe RISC-V...</span></div><div class="line" id="171033"><span class="nick" style="color:#80b1d3"><a href="#171033" label="[17:10:33]">&lt;stikonas[m]&gt;</a></span><span class="message">Though RISC-V dies not guarantee that hw is trusted either</span></div><div class="line" id="171135"><span class="nick" style="color:#6d2462"><a href="#171135" label="[17:11:35]">&lt;h01ger&gt;</a></span><span class="message">xkcd#505 to the rescue!</span></div><div class="line" id="171609"><span class="nick" style="color:#80b1d3"><a href="#171609" label="[17:16:09]">&lt;stikonas[m]&gt;</a></span><span class="message">But I guess even if you flash seabios binary, rebuilding the same binary does not rove anything</span></div><div class="line" id="171626"><span class="nick" style="color:#80b1d3"><a href="#171626" label="[17:16:26]">&lt;stikonas[m]&gt;</a></span><span class="message">It might compromise whatever was rebuilt</span></div><div class="line" id="171701"><span class="nick" style="color:#80b1d3"><a href="#171701" label="[17:17:01]">&lt;stikonas[m]&gt;</a></span><span class="message">And seabios is too big for machine code inspection</span></div><div class="line" id="171729"><span class="nick" style="color:#234e69"><a href="#171729" label="[17:17:29]">&lt;joeyh&gt;</a></span><span class="message">@search demon copperhead</span></div><div class="line" id="175506"><span class="nick" style="color:#6c3d55"><a href="#175506" label="[17:55:06]">&lt;[exa]&gt;</a></span><span class="message">kerravon: &quot;secure&quot; is always relative to the amount of paranoia you're willing to invest</span></div><div class="line" id="210834"><span class="nick" style="color:#d9d9d9"><a href="#210834" label="[21:08:34]">&lt;roconnor&gt;</a></span><span class="message">I'm assuming the firmware in my hard drive is just using DMA to overwrite my working memory with trojans all the time.</span></div><div class="line" id="224237"><span class="nick" style="color:#6b8072"><a href="#224237" label="[22:42:37]">&lt;kerravon&gt;</a></span><span class="message">stikonas - it's not perfect, but if I build the seabios binary on an unrelated machine (that doesn't even use seabios), and burn (or better - commercially press) a cdrom, and go to another machine and flash seabios, and the flashing process is at least trusted, and then rebuild seabios on the new machine, then it would be very difficult for a</span></div><div class="line" id="224237"><span class="nick" style="color:#6b8072"><a href="#224237" label="[22:42:37]">&lt;kerravon&gt;</a></span><span class="message">trojan on the non-seabios machine to make it across</span></div><div class="line" id="224339"><span class="nick" style="color:#2e2a4a"><a href="#224339" label="[22:43:39]">&lt;stikonas&gt;</a></span><span class="message">unrelated machine might have gcc with trojan</span></div><div class="line" id="224345"><span class="nick" style="color:#2e2a4a"><a href="#224345" label="[22:43:45]">&lt;stikonas&gt;</a></span><span class="message">that will insert itself into seabios</span></div><div class="line" id="224406"><span class="nick" style="color:#2e2a4a"><a href="#224406" label="[22:44:06]">&lt;stikonas&gt;</a></span><span class="message">is that really any more difficult than trojan propagating in e.g. kernel?</span></div><div class="line" id="224409"><span class="nick" style="color:#2e2a4a"><a href="#224409" label="[22:44:09]">&lt;stikonas&gt;</a></span><span class="message">or compiler</span></div><div class="line" id="224425"><span class="nick" style="color:#2e2a4a"><a href="#224425" label="[22:44:25]">&lt;stikonas&gt;</a></span><span class="message">I agree that it's difficult</span></div><div class="line" id="224439"><span class="nick" style="color:#2e2a4a"><a href="#224439" label="[22:44:39]">&lt;stikonas&gt;</a></span><span class="message">but it's difficult for backdoor to propagate via kernel too</span></div><div class="line" id="224701"><span class="nick" style="color:#6b8072"><a href="#224701" label="[22:47:01]">&lt;kerravon&gt;</a></span><span class="message">well on the new machine, the trojan in the bios needs to detect that gcc is running and reinsert itself into the new seabios binary</span></div><div class="line" id="224823"><span class="nick" style="color:#2e2a4a"><a href="#224823" label="[22:48:23]">&lt;stikonas&gt;</a></span><span class="message">indeed</span></div><div class="line" id="224854"><span class="nick" style="color:#2e2a4a"><a href="#224854" label="[22:48:54]">&lt;stikonas&gt;</a></span><span class="message">and I agree with you that it's hard in practice (as is any self-propagating attack)</span></div><div class="line" id="224908"><span class="nick" style="color:#2e2a4a"><a href="#224908" label="[22:49:08]">&lt;stikonas&gt;</a></span><span class="message">but I dont think it's much harder than propagating via kernel</span></div><div class="line" id="224950"><span class="nick" style="color:#6b8072"><a href="#224950" label="[22:49:50]">&lt;kerravon&gt;</a></span><span class="message">sorry - the kernel will be covered by building starting from hex, right?</span></div><div class="line" id="225100"><span class="nick" style="color:#6b8072"><a href="#225100" label="[22:51:00]">&lt;kerravon&gt;</a></span><span class="message">ie the bootstrap process</span></div><div class="line" id="225104"><span class="nick" style="color:#6b8072"><a href="#225104" label="[22:51:04]">&lt;kerravon&gt;</a></span><span class="message">that's what it's for</span></div><div class="line" id="225112"><span class="nick" style="color:#6b8072"><a href="#225112" label="[22:51:12]">&lt;kerravon&gt;</a></span><span class="message">to guarantee the kernel etc</span></div><div class="line" id="225142"><span class="nick" style="color:#2e2a4a"><a href="#225142" label="[22:51:42]">&lt;stikonas&gt;</a></span><span class="message">depends, we have both</span></div><div class="line" id="225210"><span class="nick" style="color:#6b8072"><a href="#225210" label="[22:52:10]">&lt;kerravon&gt;</a></span><span class="message">both what?</span></div><div class="line" id="225215"><span class="nick" style="color:#2e2a4a"><a href="#225215" label="[22:52:15]">&lt;stikonas&gt;</a></span><span class="message">there is userspace bootstrapping that starts with userspace hex0 builds hex1, hex2, M0, cc_x86 (or other arch) and M2-Planet</span></div><div class="line" id="225236"><span class="nick" style="color:#2e2a4a"><a href="#225236" label="[22:52:36]">&lt;stikonas&gt;</a></span><span class="message">and there is this new path that starts with builder-hex0-stage1</span></div><div class="line" id="225300"><span class="nick" style="color:#2e2a4a"><a href="#225300" label="[22:53:00]">&lt;stikonas&gt;</a></span><span class="message">which kind of includes similar functionality as hex0 but also knows some BIOS calls to act as a kernel</span></div><div class="line" id="225327"><span class="nick" style="color:#2e2a4a"><a href="#225327" label="[22:53:27]">&lt;stikonas&gt;</a></span><span class="message">and then it can bootstrap more complicated kernel</span></div><div class="line" id="225337"><span class="nick" style="color:#2e2a4a"><a href="#225337" label="[22:53:37]">&lt;stikonas&gt;</a></span><span class="message">that can run the rest of userspace bootstrap chain</span></div><div class="line" id="225358"><span class="nick" style="color:#2e2a4a"><a href="#225358" label="[22:53:58]">&lt;stikonas&gt;</a></span><span class="message">(but this kernel bootstrap so far is only done for x86)</span></div><div class="line" id="225531"><span class="nick" style="color:#2e2a4a"><a href="#225531" label="[22:55:31]">&lt;stikonas&gt;</a></span><span class="message">but let's say you are on non-x86 platform where we don't have kernel bootstrap chain</span></div><div class="line" id="225543"><span class="nick" style="color:#2e2a4a"><a href="#225543" label="[22:55:43]">&lt;stikonas&gt;</a></span><span class="message">then you need to start with some pre-compiled kernel</span></div><div class="line" id="225610"><span class="nick" style="color:#6b8072"><a href="#225610" label="[22:56:10]">&lt;kerravon&gt;</a></span><span class="message">just cross-compile it from the trusted x86?</span></div><div class="line" id="225626"><span class="nick" style="color:#2e2a4a"><a href="#225626" label="[22:56:26]">&lt;stikonas&gt;</a></span><span class="message">if you trust x86...</span></div><div class="line" id="225640"><span class="nick" style="color:#6b8072"><a href="#225640" label="[22:56:40]">&lt;kerravon&gt;</a></span><span class="message">which was the whole point of the above?</span></div><div class="line" id="225717"><span class="nick" style="color:#2e2a4a"><a href="#225717" label="[22:57:17]">&lt;stikonas&gt;</a></span><span class="message">above let's you trust kernel and userspace</span></div><div class="line" id="225728"><span class="nick" style="color:#2e2a4a"><a href="#225728" label="[22:57:28]">&lt;stikonas&gt;</a></span><span class="message">but maybe you don't trust hardware itself</span></div><div class="line" id="225735"><span class="nick" style="color:#2e2a4a"><a href="#225735" label="[22:57:35]">&lt;stikonas&gt;</a></span><span class="message">say Intel ME or AMD PSP</span></div><div class="line" id="225756"><span class="nick" style="color:#6b8072"><a href="#225756" label="[22:57:56]">&lt;kerravon&gt;</a></span><span class="message">ok</span></div><div class="line" id="225757"><span class="nick" style="color:#2e2a4a"><a href="#225757" label="[22:57:57]">&lt;stikonas&gt;</a></span><span class="message">(though ME and PSP I guess are FW, not HW)</span></div><div class="line" id="225819"><span class="nick" style="color:#6b8072"><a href="#225819" label="[22:58:19]">&lt;kerravon&gt;</a></span><span class="message">but maybe you trust them more than the new machine?</span></div><div class="line" id="225827"><span class="nick" style="color:#2e2a4a"><a href="#225827" label="[22:58:27]">&lt;stikonas&gt;</a></span><span class="message">yeah, maybe</span></div><div class="line" id="225835"><span class="nick" style="color:#2e2a4a"><a href="#225835" label="[22:58:35]">&lt;stikonas&gt;</a></span><span class="message">I guess it depends on specific case</span></div><div class="line" id="225848"><span class="nick" style="color:#2e2a4a"><a href="#225848" label="[22:58:48]">&lt;stikonas&gt;</a></span><span class="message">what is your attack / secucity / trust model</span></div><div class="line" id="225907"><span class="nick" style="color:#2e2a4a"><a href="#225907" label="[22:59:07]">&lt;stikonas&gt;</a></span><span class="message">which will be different for different people or situations</span></div><div class="line" id="225929"><span class="nick" style="color:#6b8072"><a href="#225929" label="[22:59:29]">&lt;kerravon&gt;</a></span><span class="message">i guess if the new machine is trojan-free, then building on the x86 may introduce a trojan from the firmware</span></div><div class="line" id="225938"><span class="nick" style="color:#2e2a4a"><a href="#225938" label="[22:59:38]">&lt;stikonas&gt;</a></span><span class="message">or even hardware</span></div><div class="line" id="225943"><span class="nick" style="color:#2e2a4a"><a href="#225943" label="[22:59:43]">&lt;stikonas&gt;</a></span><span class="message">though that is even less believable</span></div><div class="line" id="225949"><span class="nick" style="color:#6b8072"><a href="#225949" label="[22:59:49]">&lt;kerravon&gt;</a></span><span class="message">and if the new machine has a trojan, then bringing across something from the x86 won't help anyway</span></div><div class="line" id="225958"><span class="nick" style="color:#2e2a4a"><a href="#225958" label="[22:59:58]">&lt;stikonas&gt;</a></span><span class="message">but you could imaging that hardware itself has a self-propagating trojan</span></div><div class="line" id="225959"><span class="nick" style="color:#6b8072"><a href="#225959" label="[22:59:59]">&lt;kerravon&gt;</a></span><span class="message">fw trojan</span></div><div class="line" id="230029"><span class="nick" style="color:#2e2a4a"><a href="#230029" label="[23:00:29]">&lt;stikonas&gt;</a></span><span class="message">i.e. hardware infects software synthesis tools for HDL</span></div><div class="line" id="230109"><span class="nick" style="color:#bc80bd"><a href="#230109" label="[23:01:09]">&lt;vagrantc&gt;</a></span><span class="message">ACTION waits for the paper tape readers to get dusted off</span></div><div class="line" id="230132"><span class="nick" style="color:#6b8072"><a href="#230132" label="[23:01:32]">&lt;kerravon&gt;</a></span><span class="message">how will a paper tape reader bypass a firmware trojan?</span></div><div class="line" id="230233"><span class="nick" style="color:#bc80bd"><a href="#230233" label="[23:02:33]">&lt;vagrantc&gt;</a></span><span class="message">well, any respectible platform allows you to build the firmware from source ...</span></div><div class="line" id="230414"><span class="nick" style="color:#bc80bd"><a href="#230414" label="[23:04:14]">&lt;vagrantc&gt;</a></span><span class="message">if it's not hardware, it's software, so bootstrap it :P</span></div><div class="line" id="230429"><span class="nick" style="color:#bc80bd"><a href="#230429" label="[23:04:29]">&lt;vagrantc&gt;</a></span><span class="message">and then, of course, bootstrap your hardware is the next logical step</span></div><div class="line" id="230459"><span class="nick" style="color:#6b8072"><a href="#230459" label="[23:04:59]">&lt;kerravon&gt;</a></span><span class="message">but why is paper tape better than a cdrom?</span></div><div class="line" id="230526"><span class="nick" style="color:#bc80bd"><a href="#230526" label="[23:05:26]">&lt;vagrantc&gt;</a></span><span class="message">more feasible to implement from scratch?</span></div><div class="line" id="230607"><span class="nick" style="color:#bc80bd"><a href="#230607" label="[23:06:07]">&lt;vagrantc&gt;</a></span><span class="message">my eyes aren't good enough to read CDROM media</span></div><div class="line" id="230645"><span class="nick" style="color:#bc80bd"><a href="#230645" label="[23:06:45]">&lt;vagrantc&gt;</a></span><span class="message">and my hands are not precise enough to create a CDROM, really...</span></div><div class="line" id="230728"><span class="nick" style="color:#6b8072"><a href="#230728" label="[23:07:28]">&lt;kerravon&gt;</a></span><span class="message">you only need to use a microscope to read the boot sector of the cdrom, and then you can view the source code of the next thing to be compiled</span></div><div class="line" id="230738"><span class="nick" style="color:#bc80bd"><a href="#230738" label="[23:07:38]">&lt;vagrantc&gt;</a></span><span class="message">this is #endlessrabbitholes, right?</span></div><div class="line" id="230843"><span class="nick" style="color:#bc80bd"><a href="#230843" label="[23:08:43]">&lt;vagrantc&gt;</a></span><span class="message">not sure how long it would take you to review a 650MB CDROM with a microscope ... but i am guessing it would take a good long while.</span></div><div class="line" id="230857"><span class="nick" style="color:#6b8072"><a href="#230857" label="[23:08:57]">&lt;kerravon&gt;</a></span><span class="message">you only need to review the boot sector</span></div><div class="line" id="230910"><span class="nick" style="color:#6b8072"><a href="#230910" label="[23:09:10]">&lt;kerravon&gt;</a></span><span class="message">the rest can be done on the screen in hex or text</span></div><div class="line" id="230921"><span class="nick" style="color:#bc80bd"><a href="#230921" label="[23:09:21]">&lt;vagrantc&gt;</a></span><span class="message">this presumes, well, a lot.</span></div><div class="line" id="231013"><span class="nick" style="color:#6b8072"><a href="#231013" label="[23:10:13]">&lt;kerravon&gt;</a></span><span class="message">can you elaborate?</span></div><div class="line" id="231027"><span class="nick" style="color:#bc80bd"><a href="#231027" label="[23:10:27]">&lt;vagrantc&gt;</a></span><span class="message">infinitely, but i am not sure any of us have the time.</span></div><div class="line" id="231028"><span class="nick" style="color:#6b8072"><a href="#231028" label="[23:10:28]">&lt;kerravon&gt;</a></span><span class="message">compared to paper tape</span></div><div class="line" id="231111"><span class="nick" style="color:#3c5b35"><a href="#231111" label="[23:11:11]">&lt;oriansj&gt;</a></span><span class="message">well once one includes the problem space of the Nexus intruder class attackers, no hardware you didn't build yourself can be trusted and even then perhaps not even then if grey goo is included in the problem space</span></div><div class="line" id="231113"><span class="nick" style="color:#bc80bd"><a href="#231113" label="[23:11:13]">&lt;vagrantc&gt;</a></span><span class="message">i can write paper tape with a sharp implement and, well, paper. and read it with the naked eye.</span></div><div class="line" id="231201"><span class="nick" style="color:#3c5b35"><a href="#231201" label="[23:12:01]">&lt;oriansj&gt;</a></span><span class="message">once matter compilers are invoked, we enter a very hard to debug problem space</span></div><div class="line" id="231212"><span class="nick" style="color:#bc80bd"><a href="#231212" label="[23:12:12]">&lt;vagrantc&gt;</a></span><span class="message">the most complicated thing there (if you take the biological evolution of the eye and consciousness and whatnot) is probably paper</span></div><div class="line" id="231235"><span class="nick" style="color:#bc80bd"><a href="#231235" label="[23:12:35]">&lt;vagrantc&gt;</a></span><span class="message">and then, of course, the paper tape reader ...</span></div><div class="line" id="231247"><span class="nick" style="color:#6b8072"><a href="#231247" label="[23:12:47]">&lt;kerravon&gt;</a></span><span class="message">sorry - the paper tape reader - are you trusting the machine built by someone else, as well as the computer firmware?</span></div><div class="line" id="231327"><span class="nick" style="color:#3c5b35"><a href="#231327" label="[23:13:27]">&lt;oriansj&gt;</a></span><span class="message">kerravon: I am open to building my own</span></div><div class="line" id="231344"><span class="nick" style="color:#6b8072"><a href="#231344" label="[23:13:44]">&lt;kerravon&gt;</a></span><span class="message">but you can't build your own cdrom reader?</span></div><div class="line" id="231419"><span class="nick" style="color:#bc80bd"><a href="#231419" label="[23:14:19]">&lt;vagrantc&gt;</a></span><span class="message">sounds significantly more complicated?</span></div><div class="line" id="231435"><span class="nick" style="color:#3c5b35"><a href="#231435" label="[23:14:35]">&lt;oriansj&gt;</a></span><span class="message">kerravon: I can't build my own floppy drive yet; but that probably has to do with my ability to build physical objects at the needed tolerances</span></div><div class="line" id="231456"><span class="nick" style="color:#6b8072"><a href="#231456" label="[23:14:56]">&lt;kerravon&gt;</a></span><span class="message">a floppy drive can't be visually inspected</span></div><div class="line" id="231500"><span class="nick" style="color:#6b8072"><a href="#231500" label="[23:15:00]">&lt;kerravon&gt;</a></span><span class="message">a cdrom can</span></div><div class="line" id="231508"><span class="nick" style="color:#bc80bd"><a href="#231508" label="[23:15:08]">&lt;vagrantc&gt;</a></span><span class="message">not... really.</span></div><div class="line" id="231517"><span class="nick" style="color:#bc80bd"><a href="#231517" label="[23:15:17]">&lt;vagrantc&gt;</a></span><span class="message">without complicated industrial infrastructure</span></div><div class="line" id="231517"><span class="nick" style="color:#6b8072"><a href="#231517" label="[23:15:17]">&lt;kerravon&gt;</a></span><span class="message">if you only need to inspect the boot sector</span></div><div class="line" id="231523"><span class="nick" style="color:#3c5b35"><a href="#231523" label="[23:15:23]">&lt;oriansj&gt;</a></span><span class="message">kerravon: magnetic paper can be used to inspect magnetic media</span></div><div class="line" id="231528"><span class="nick" style="color:#6b8072"><a href="#231528" label="[23:15:28]">&lt;kerravon&gt;</a></span><span class="message">you only need a microscope</span></div><div class="line" id="231548"><span class="nick" style="color:#bc80bd"><a href="#231548" label="[23:15:48]">&lt;vagrantc&gt;</a></span><span class="message">kerravon: what is the highest magnification microscope you have ever built?</span></div><div class="line" id="231606"><span class="nick" style="color:#6b8072"><a href="#231606" label="[23:16:06]">&lt;kerravon&gt;</a></span><span class="message">oh - you don't even trust microscopes?</span></div><div class="line" id="231619"><span class="nick" style="color:#6b8072"><a href="#231619" label="[23:16:19]">&lt;kerravon&gt;</a></span><span class="message">commercially bought</span></div><div class="line" id="231628"><span class="nick" style="color:#bc80bd"><a href="#231628" label="[23:16:28]">&lt;vagrantc&gt;</a></span><span class="message">you have commerce?</span></div><div class="line" id="231636"><span class="nick" style="color:#bc80bd"><a href="#231636" label="[23:16:36]">&lt;vagrantc&gt;</a></span><span class="message">you trust commerce?</span></div><div class="line" id="231642"><span class="nick" style="color:#6b8072"><a href="#231642" label="[23:16:42]">&lt;kerravon&gt;</a></span><span class="message">i trust glass, yes</span></div><div class="line" id="231704"><span class="nick" style="color:#3c5b35"><a href="#231704" label="[23:17:04]">&lt;oriansj&gt;</a></span><span class="message">kerravon: well optical microscopes with no software or cameras involved are probably fine (as long as matter compilers are not invoked) but microscopes with cameras and running software are perhaps a different matter</span></div><div class="line" id="231707"><span class="nick" style="color:#bc80bd"><a href="#231707" label="[23:17:07]">&lt;vagrantc&gt;</a></span><span class="message">anyways ... you can always go another layer deep ... that is all i'm getting at</span></div><div class="line" id="231736"><span class="nick" style="color:#6b8072"><a href="#231736" label="[23:17:36]">&lt;kerravon&gt;</a></span><span class="message">yeah, i'm just talking about a good quality microscope</span></div><div class="line" id="231740"><span class="nick" style="color:#bc80bd"><a href="#231740" label="[23:17:40]">&lt;vagrantc&gt;</a></span><span class="message">but of course oriansj is taking it to the molecular and/or atomic level already :)</span></div><div class="line" id="231805"><span class="nick" style="color:#6b8072"><a href="#231805" label="[23:18:05]">&lt;kerravon&gt;</a></span><span class="message">no software</span></div><div class="line" id="231808"><span class="nick" style="color:#6b8072"><a href="#231808" label="[23:18:08]">&lt;kerravon&gt;</a></span><span class="message">just glass</span></div><div class="line" id="231819"><span class="nick" style="color:#6b8072"><a href="#231819" label="[23:18:19]">&lt;kerravon&gt;</a></span><span class="message">i believe cdroms can be read with that</span></div><div class="line" id="231849"><span class="nick" style="color:#6b8072"><a href="#231849" label="[23:18:49]">&lt;kerravon&gt;</a></span><span class="message">and you probably want to put a long run of 1s then 0s, then 1s, after the boot sector, so that you know where it is</span></div><div class="line" id="231910"><span class="nick" style="color:#6b8072"><a href="#231910" label="[23:19:10]">&lt;kerravon&gt;</a></span><span class="message">long run being say 5 tracks</span></div><div class="line" id="231911"><span class="nick" style="color:#bc80bd"><a href="#231911" label="[23:19:11]">&lt;vagrantc&gt;</a></span><span class="message">this takes off-by-one errors to a whole new level :)</span></div><div class="line" id="232020"><span class="nick" style="color:#6b8072"><a href="#232020" label="[23:20:20]">&lt;kerravon&gt;</a></span><span class="message">oriansj - did you see my question about DOS?</span></div><div class="line" id="232159"><span class="nick" style="color:#3c5b35"><a href="#232159" label="[23:21:59]">&lt;oriansj&gt;</a></span><span class="message">Each pit is approximately 100 nm deep by 500 nm wide, and varies from 850 nm to 3.5 µm in length so possible assuming the 3.5 µm long pits</span></div><div class="line" id="232330"><span class="nick" style="color:#6b8072"><a href="#232330" label="[23:23:30]">&lt;kerravon&gt;</a></span><span class="message">the microscope will just show a blank area for the 850 nm zeroes?</span></div><div class="line" id="232406"><span class="nick" style="color:#3c5b35"><a href="#232406" label="[23:24:06]">&lt;oriansj&gt;</a></span><span class="message">in regards to your DOS question, I had not expectations as I was exploring the possible task of starting the support of DOS in M2libc and am not familiar with DOS programming enough to have preferences yet.</span></div><div class="line" id="232431"><span class="nick" style="color:#6b8072"><a href="#232431" label="[23:24:31]">&lt;kerravon&gt;</a></span><span class="message">sure - but are you happy to use a dos extender?</span></div><div class="line" id="232500"><span class="nick" style="color:#6b8072"><a href="#232500" label="[23:25:00]">&lt;kerravon&gt;</a></span><span class="message">since you are happy to be 80386-specific</span></div><div class="line" id="232502"><span class="nick" style="color:#3c5b35"><a href="#232502" label="[23:25:02]">&lt;oriansj&gt;</a></span><span class="message">kerravon: and you'll have to guesstimate the length of zeros and hope you don't have off-by-one errors</span></div><div class="line" id="232601"><span class="nick" style="color:#3c5b35"><a href="#232601" label="[23:26:01]">&lt;oriansj&gt;</a></span><span class="message">kerravon: provided one exists under an FSF approved license or can be achieved in Free software DOS implementation.</span></div><div class="line" id="232640"><span class="nick" style="color:#6b8072"><a href="#232640" label="[23:26:40]">&lt;kerravon&gt;</a></span><span class="message">ok, HX is currently just advertised as &quot;freeware&quot;</span></div><div class="line" id="232654"><span class="nick" style="color:#6b8072"><a href="#232654" label="[23:26:54]">&lt;kerravon&gt;</a></span><span class="message">there is a github issue asking for that to be expanded</span></div><div class="line" id="232723"><span class="nick" style="color:#6b8072"><a href="#232723" label="[23:27:23]">&lt;kerravon&gt;</a></span><span class="message">assuming that is expanded to be FSF-compliant, you are apparently happy to use it - in which case, you can just use win32</span></div><div class="line" id="232754"><span class="nick" style="color:#6b8072"><a href="#232754" label="[23:27:54]">&lt;kerravon&gt;</a></span><span class="message">and if you just use win32, you can probably just use pdos/386</span></div><div class="line" id="232804"><span class="nick" style="color:#6b8072"><a href="#232804" label="[23:28:04]">&lt;kerravon&gt;</a></span><span class="message">depending on what you are trying to achieve by &quot;dos&quot;</span></div><div class="line" id="232814"><span class="nick" style="color:#3c5b35"><a href="#232814" label="[23:28:14]">&lt;oriansj&gt;</a></span><span class="message">well yes a Windows (ReactOS) port of stage0 is definitely a possibility in the future if we find someone who wants it enough to do that work.</span></div><div class="line" id="232941"><span class="nick" style="color:#6b8072"><a href="#232941" label="[23:29:41]">&lt;kerravon&gt;</a></span><span class="message">and you're happy to do that instead of whatever &quot;dos&quot; means?</span></div><div class="line" id="233001"><span class="nick" style="color:#6b8072"><a href="#233001" label="[23:30:01]">&lt;kerravon&gt;</a></span><span class="message">*have that</span></div><div class="line" id="233003"><span class="nick" style="color:#3c5b35"><a href="#233003" label="[23:30:03]">&lt;oriansj&gt;</a></span><span class="message">as stage0 will support any platform and/or architecture which someone has a desire to do the work required. As the more we have, the harder time any attacker will have; as they will have to compromise *ALL* of them in the same way to prevent detection.</span></div><div class="line" id="233038"><span class="nick" style="color:#6b8072"><a href="#233038" label="[23:30:38]">&lt;kerravon&gt;</a></span><span class="message">so you currently don't have windows support in m2libc?</span></div><div class="line" id="233104"><span class="nick" style="color:#3c5b35"><a href="#233104" label="[23:31:04]">&lt;oriansj&gt;</a></span><span class="message">kerravon: nope, too unimportant of a target and no one cared to put the effort in yet.</span></div><div class="line" id="233117"><span class="nick" style="color:#6b8072"><a href="#233117" label="[23:31:17]">&lt;kerravon&gt;</a></span><span class="message">but why the interest in dos?</span></div><div class="line" id="233150"><span class="nick" style="color:#6b8072"><a href="#233150" label="[23:31:50]">&lt;kerravon&gt;</a></span><span class="message">(but not windows)</span></div><div class="line" id="233200"><span class="nick" style="color:#3c5b35"><a href="#233200" label="[23:32:00]">&lt;oriansj&gt;</a></span><span class="message">a couple people have worked on DOS ports in the past but none of them felt comfortable sharing their work</span></div><div class="line" id="233248"><span class="nick" style="color:#3c5b35"><a href="#233248" label="[23:32:48]">&lt;oriansj&gt;</a></span><span class="message">getting a half complete start should inspire further progress</span></div><div class="line" id="233308"><span class="nick" style="color:#6b8072"><a href="#233308" label="[23:33:08]">&lt;kerravon&gt;</a></span><span class="message">i'm talking about your interest. you wanted help doing a dos port. but actually i don't really know what that means, unless you're talking 16-bit</span></div><div class="line" id="233410"><span class="nick" style="color:#6b8072"><a href="#233410" label="[23:34:10]">&lt;kerravon&gt;</a></span><span class="message">once you add a dos extender, you may as well call it HX or Win95</span></div><div class="line" id="233442"><span class="nick" style="color:#6b8072"><a href="#233442" label="[23:34:42]">&lt;kerravon&gt;</a></span><span class="message">there are a lot of dos extenders to choose from</span></div><div class="line" id="233443"><span class="nick" style="color:#3c5b35"><a href="#233443" label="[23:34:43]">&lt;oriansj&gt;</a></span><span class="message">kerravon: my interest is purely in helping others openly cooperate</span></div><div class="line" id="233541"><span class="nick" style="color:#6b8072"><a href="#233541" label="[23:35:41]">&lt;kerravon&gt;</a></span><span class="message">ok, well i can't help you (with pdpclib to be put into m2libc) if you aren't clear on requirements.</span></div><div class="line" id="233559"><span class="nick" style="color:#3c5b35"><a href="#233559" label="[23:35:59]">&lt;oriansj&gt;</a></span><span class="message">kerravon: fair enough</span></div><div class="line" id="233616"><span class="nick" style="color:#6b8072"><a href="#233616" label="[23:36:16]">&lt;kerravon&gt;</a></span><span class="message">so i guess that means no public domain cc_x86</span></div><div class="line" id="233705"><span class="nick" style="color:#6b8072"><a href="#233705" label="[23:37:05]">&lt;kerravon&gt;</a></span><span class="message">actually - if it isn't using cdecl anyway, it's probably not of any use to me</span></div><div class="line" id="233717"><span class="nick" style="color:#6b8072"><a href="#233717" label="[23:37:17]">&lt;kerravon&gt;</a></span><span class="message">don't bother with that</span></div><div class="line" id="233730"><span class="nick" style="color:#6b8072"><a href="#233730" label="[23:37:30]">&lt;kerravon&gt;</a></span><span class="message">i'll get back to you if i have a specific use for it</span></div><div class="line" id="233810"><span class="nick" style="color:#6b8072"><a href="#233810" label="[23:38:10]">&lt;kerravon&gt;</a></span><span class="message">we are expecting other compilers to get to c90, and we already have a subset of c90, and it uses cdecl</span></div><div class="line" id="234450"><span class="nick" style="color:#6b8072"><a href="#234450" label="[23:44:50]">&lt;kerravon&gt;</a></span><span class="message">how about a cdrom where the boot sector says &quot;press space to boot, ctrl-c for bootstrapping verification&quot;?</span></div><div class="line" id="234654"><span class="nick" style="color:#6b8072"><a href="#234654" label="[23:46:54]">&lt;kerravon&gt;</a></span><span class="message">or maybe hold down shift and it switches to bootstrap verification</span></div><div class="line" id="235124"><span class="nick" style="color:#6b8072"><a href="#235124" label="[23:51:24]">&lt;kerravon&gt;</a></span><span class="message">with regards to pits on the cdrom, maybe x'ff' can be added to the boot sector(s) to help with reading via microscope, for syncing</span></div><br /></div></body></html>