<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-01-28.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="010855"><span class="nick" style="color:#389600"><a href="#010855" label="[01:08:55]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I found a semi-usable way to disassemble stage0 binaries with objdump</span></div><div class="line" id="010953"><span class="nick" style="color:#389600"><a href="#010953" label="[01:09:53]">&lt;stikonas&gt;</a></span><span class="message">e.g. you can use &quot;objdump -b binary -m i386:x86-64  -M intel -D hex1&quot;</span></div><div class="line" id="011005"><span class="nick" style="color:#389600"><a href="#011005" label="[01:10:05]">&lt;stikonas&gt;</a></span><span class="message">it just disassembles everything including elf header</span></div><div class="line" id="011017"><span class="nick" style="color:#389600"><a href="#011017" label="[01:10:17]">&lt;stikonas&gt;</a></span><span class="message">but that's better than it not working at all</span></div><div class="line" id="012517"><span class="nick" style="color:#8dd3c7"><a href="#012517" label="[01:25:17]">&lt;fossy&gt;</a></span><span class="message">i've just made a PR to rework tmpdir because it was annoying me a lot</span></div><div class="line" id="012526"><span class="nick" style="color:#8dd3c7"><a href="#012526" label="[01:25:26]">&lt;fossy&gt;</a></span><span class="message">suprisingly an overall reduction in LOC</span></div><div class="line" id="012547"><span class="nick" style="color:#8dd3c7"><a href="#012547" label="[01:25:47]">&lt;fossy&gt;</a></span><span class="message">this does not change any checksums</span></div><div class="line" id="012607"><span class="nick" style="color:#8dd3c7"><a href="#012607" label="[01:26:07]">&lt;fossy&gt;</a></span><span class="message">note that the default is now not a tmpfs and that must be specified with --tmpfs</span></div><div class="line" id="012711"><span class="nick" style="color:#389600"><a href="#012711" label="[01:27:11]">&lt;stikonas&gt;</a></span><span class="message">yeah, already looking</span></div><div class="line" id="012717"><span class="nick" style="color:#8dd3c7"><a href="#012717" label="[01:27:17]">&lt;fossy&gt;</a></span><span class="message">thanks :)</span></div><div class="line" id="012728"><span class="nick" style="color:#389600"><a href="#012728" label="[01:27:28]">&lt;stikonas&gt;</a></span><span class="message">and presumably tested with various modes?</span></div><div class="line" id="012728"><span class="nick" style="color:#8dd3c7"><a href="#012728" label="[01:27:28]">&lt;fossy&gt;</a></span><span class="message">it needs more testing before merge though. i havent covered every combination</span></div><div class="line" id="012734"><span class="nick" style="color:#8dd3c7"><a href="#012734" label="[01:27:34]">&lt;fossy&gt;</a></span><span class="message">i've tested all modes</span></div><div class="line" id="012738"><span class="nick" style="color:#8dd3c7"><a href="#012738" label="[01:27:38]">&lt;fossy&gt;</a></span><span class="message">but not every combination of options</span></div><div class="line" id="012743"><span class="nick" style="color:#389600"><a href="#012743" label="[01:27:43]">&lt;stikonas&gt;</a></span><span class="message">well, you probably can just test that it starts</span></div><div class="line" id="012950"><span class="nick" style="color:#8dd3c7"><a href="#012950" label="[01:29:50]">&lt;fossy&gt;</a></span><span class="message">yeah, that's all it touches</span></div><div class="line" id="013111"><span class="nick" style="color:#389600"><a href="#013111" label="[01:31:11]">&lt;stikonas&gt;</a></span><span class="message">well, seems more readable</span></div><div class="line" id="013243"><span class="nick" style="color:#389600"><a href="#013243" label="[01:32:43]">&lt;stikonas&gt;</a></span><span class="message">perhaps we can make it a bit more readable with pathlib instead of os but it's up to you</span></div><div class="line" id="013316"><span class="nick" style="color:#389600"><a href="#013316" label="[01:33:16]">&lt;stikonas&gt;</a></span><span class="message">and probably best not to mix into this PR</span></div><div class="line" id="013342"><span class="nick" style="color:#389600"><a href="#013342" label="[01:33:42]">&lt;stikonas&gt;</a></span><span class="message">fossy: how is GCC going? Any significant problems?</span></div><div class="line" id="014357"><span class="nick" style="color:#8dd3c7"><a href="#014357" label="[01:43:57]">&lt;fossy&gt;</a></span><span class="message">stikonas: xgcc (stage2) was having trouble locating crt*.o because it didn't know about /usr/lib/musl. instead of fixing that i'm going to wait for the triplet PR because GCC expects crt* to be there anyway</span></div><div class="line" id="014438"><span class="nick" style="color:#8dd3c7"><a href="#014438" label="[01:44:38]">&lt;fossy&gt;</a></span><span class="message">oh, btw, doras, can you please change /usr/lib/i386-linux-musl in #201 to /usr/lib/i386-unknown-linux-musl (becaue that's the triplet we use everywhere else and have all our tools configured with)</span></div><div class="line" id="014439"><span class="nick" style="color:#389600"><a href="#014439" label="[01:44:39]">&lt;stikonas&gt;</a></span><span class="message">yes, I agree, let's wait for triplet PR</span></div><div class="line" id="014500"><span class="nick" style="color:#389600"><a href="#014500" label="[01:45:00]">&lt;stikonas&gt;</a></span><span class="message">though maybe it's also worth building just 1 stage of GCC 10?</span></div><div class="line" id="014502"><span class="nick" style="color:#8dd3c7"><a href="#014502" label="[01:45:02]">&lt;fossy&gt;</a></span><span class="message">i386-linux-musl is technically not correct for triplet anyway because its arch-vendor-system</span></div><div class="line" id="014509"><span class="nick" style="color:#8dd3c7"><a href="#014509" label="[01:45:09]">&lt;fossy&gt;</a></span><span class="message">stikonas: hm, quite possibly</span></div><div class="line" id="014519"><span class="nick" style="color:#389600"><a href="#014519" label="[01:45:19]">&lt;stikonas&gt;</a></span><span class="message">and then do full self-bootstrap build of GCC12</span></div><div class="line" id="014541"><span class="nick" style="color:#8dd3c7"><a href="#014541" label="[01:45:41]">&lt;fossy&gt;</a></span><span class="message">i'd prefer to run the sanity checks of gcc10 (full bootstrap) at least once in dev environment, but we can disable it before merge</span></div><div class="line" id="014543"><span class="nick" style="color:#389600"><a href="#014543" label="[01:45:43]">&lt;stikonas&gt;</a></span><span class="message">we are not going to benefit much from rebuilding GCC10 with itself if we only build GCC12</span></div><div class="line" id="014556"><span class="nick" style="color:#389600"><a href="#014556" label="[01:45:56]">&lt;stikonas&gt;</a></span><span class="message">yeah, that's fine</span></div><div class="line" id="014609"><span class="nick" style="color:#389600"><a href="#014609" label="[01:46:09]">&lt;stikonas&gt;</a></span><span class="message">we should get triplet merged first anyway</span></div><div class="line" id="014614"><span class="nick" style="color:#389600"><a href="#014614" label="[01:46:14]">&lt;stikonas&gt;</a></span><span class="message">even if we go with just one stage</span></div><div class="line" id="014641"><span class="nick" style="color:#389600"><a href="#014641" label="[01:46:41]">&lt;stikonas&gt;</a></span><span class="message">fossy: and unrelated question raised by python PR</span></div><div class="line" id="014652"><span class="nick" style="color:#389600"><a href="#014652" label="[01:46:52]">&lt;stikonas&gt;</a></span><span class="message">where do we want to put readline (and ncurses)?</span></div><div class="line" id="014654"><span class="nick" style="color:#389600"><a href="#014654" label="[01:46:54]">&lt;stikonas&gt;</a></span><span class="message">before guile?</span></div><div class="line" id="014716"><span class="nick" style="color:#389600"><a href="#014716" label="[01:47:16]">&lt;stikonas&gt;</a></span><span class="message">another option is before bash</span></div><div class="line" id="014728"><span class="nick" style="color:#389600"><a href="#014728" label="[01:47:28]">&lt;stikonas&gt;</a></span><span class="message">i.e. immediately after sysc boots</span></div><div class="line" id="014805"><span class="nick" style="color:#389600"><a href="#014805" label="[01:48:05]">&lt;stikonas&gt;</a></span><span class="message">I think bash might benefit from ncurses</span></div><div class="line" id="014809"><span class="nick" style="color:#8dd3c7"><a href="#014809" label="[01:48:09]">&lt;fossy&gt;</a></span><span class="message">stikonas: i don't mind putting readline early because then bash can use readline</span></div><div class="line" id="014821"><span class="nick" style="color:#389600"><a href="#014821" label="[01:48:21]">&lt;stikonas&gt;</a></span><span class="message">bash itself has readline integrated</span></div><div class="line" id="014829"><span class="nick" style="color:#389600"><a href="#014829" label="[01:48:29]">&lt;stikonas&gt;</a></span><span class="message">but I think they both can link to ncurses</span></div><div class="line" id="014829"><span class="nick" style="color:#8dd3c7"><a href="#014829" label="[01:48:29]">&lt;fossy&gt;</a></span><span class="message">oh really? never realised that</span></div><div class="line" id="014844"><span class="nick" style="color:#389600"><a href="#014844" label="[01:48:44]">&lt;stikonas&gt;</a></span><span class="message">yes, there is lib/readline directory in the tarball</span></div><div class="line" id="014903"><span class="nick" style="color:#389600"><a href="#014903" label="[01:49:03]">&lt;stikonas&gt;</a></span><span class="message">but we build it without ncurses and I suspect that might be causing somewhat weird command line behaviour in qemu mode</span></div><div class="line" id="014915"><span class="nick" style="color:#8dd3c7"><a href="#014915" label="[01:49:15]">&lt;fossy&gt;</a></span><span class="message">yes, let's put it early then</span></div><div class="line" id="014939"><span class="nick" style="color:#389600"><a href="#014939" label="[01:49:39]">&lt;stikonas&gt;</a></span><span class="message">in sysc the order is less critical anyway</span></div><div class="line" id="014951"><span class="nick" style="color:#8dd3c7"><a href="#014951" label="[01:49:51]">&lt;fossy&gt;</a></span><span class="message">yeah, apart from the major toolchain stuff</span></div><div class="line" id="015031"><span class="nick" style="color:#389600"><a href="#015031" label="[01:50:31]">&lt;stikonas&gt;</a></span><span class="message">anyway, readline and ncurses is for a bit later</span></div><div class="line" id="015041"><span class="nick" style="color:#389600"><a href="#015041" label="[01:50:41]">&lt;stikonas&gt;</a></span><span class="message">right now I was doing a bit more stage0-posix-amd64 work</span></div><div class="line" id="031836"><span class="nick" style="color:#2e2a4a"><a href="#031836" label="[03:18:36]">&lt;oriansj&gt;</a></span><span class="message">stikonas: I find ndisasm (usually packaged with nasm) quite handy for disassembly of stage0-posix binaries. It also gives you the option to skip the elf header, which is quite handy.</span></div><div class="line" id="031923"><span class="nick" style="color:#389600"><a href="#031923" label="[03:19:23]">&lt;stikonas&gt;</a></span><span class="message">oh yes, it seems to also do the job</span></div><div class="line" id="032041"><span class="nick" style="color:#389600"><a href="#032041" label="[03:20:41]">&lt;stikonas&gt;</a></span><span class="message">anyway, I'm now updating hex1_AMD64.hex0 to include new style defines</span></div><div class="line" id="032058"><span class="nick" style="color:#389600"><a href="#032058" label="[03:20:58]">&lt;stikonas&gt;</a></span><span class="message">and also making it a bit smaller (will cut 219 bytes)</span></div><div class="line" id="032132"><span class="nick" style="color:#389600"><a href="#032132" label="[03:21:32]">&lt;stikonas&gt;</a></span><span class="message">(just by using 8-bit jumps and cmp_al, instead of cmp_rax,)</span></div><div class="line" id="035632"><span class="nick" style="color:#2e2a4a"><a href="#035632" label="[03:56:32]">&lt;oriansj&gt;</a></span><span class="message">nice</span></div><div class="line" id="072751"><span class="nick" style="color:#6b8072"><a href="#072751" label="[07:27:51]">&lt;doras&gt;</a></span><span class="message">fossy: as far as I know the defacto standard for multiarch library paths is arch-kernel-system</span></div><div class="line" id="072846"><span class="nick" style="color:#80b1d3"><a href="#072846" label="[07:28:46]">&lt;sam_&gt;</a></span><span class="message">the location of it is dependent</span></div><div class="line" id="072852"><span class="nick" style="color:#80b1d3"><a href="#072852" label="[07:28:52]">&lt;sam_&gt;</a></span><span class="message">/usr/lib/${CHOST} is a debian thing i think</span></div><div class="line" id="072912"><span class="nick" style="color:#6b8072"><a href="#072912" label="[07:29:12]">&lt;doras&gt;</a></span><span class="message">So called &quot;normalized GNU triplets&quot; as mentioned in <a rel="nofollow" href="https://wiki.debian.org/Multiarch/Tuples">https://wiki.debian.org/Multiarch/Tuples</a> </span></div><div class="line" id="072928"><span class="nick" style="color:#80b1d3"><a href="#072928" label="[07:29:28]">&lt;sam_&gt;</a></span><span class="message">please don't look at what debian does for any of this</span></div><div class="line" id="072930"><span class="nick" style="color:#80b1d3"><a href="#072930" label="[07:29:30]">&lt;sam_&gt;</a></span><span class="message">they're the odd ones out</span></div><div class="line" id="073243"><span class="nick" style="color:#8dd3c7"><a href="#073243" label="[07:32:43]">&lt;fossy&gt;</a></span><span class="message">my thoughts are that the triplet everywhere else in the system is i386-unknown-linux-gnu - why would /usr/lib/triplet be something different</span></div><div class="line" id="073411"><span class="nick" style="color:#8dd3c7"><a href="#073411" label="[07:34:11]">&lt;fossy&gt;</a></span><span class="message">debian also appears to use whatever strange triplet that is all throughout the system not just /usr/lib so at least it's consistent</span></div><div class="line" id="073431"><span class="nick" style="color:#8dd3c7"><a href="#073431" label="[07:34:31]">&lt;fossy&gt;</a></span><span class="message">sam_: what does gentoo do? does gentoo use /usr/lib/triplet at all?</span></div><div class="line" id="073534"><span class="nick" style="color:#6b8072"><a href="#073534" label="[07:35:34]">&lt;doras&gt;</a></span><span class="message">fossy: there's reasoning in that Debian page under &quot;Why not use GNU triplets?&quot;</span></div><div class="line" id="073752"><span class="nick" style="color:#8dd3c7"><a href="#073752" label="[07:37:52]">&lt;fossy&gt;</a></span><span class="message">i don't understand either of those two points - especially not for our purposes</span></div><div class="line" id="073758"><span class="nick" style="color:#6b8072"><a href="#073758" label="[07:37:58]">&lt;doras&gt;</a></span><span class="message">freedesktop-sdk (and therefore Flatpak apps) also use arch-kernel-system.</span></div><div class="line" id="073829"><span class="nick" style="color:#8dd3c7"><a href="#073829" label="[07:38:29]">&lt;fossy&gt;</a></span><span class="message">the different iX86's are different instruction sets, and particularly for live-bootstrap, the bootstrap does explicitly target i386 at least in early stages</span></div><div class="line" id="073847"><span class="nick" style="color:#8dd3c7"><a href="#073847" label="[07:38:47]">&lt;fossy&gt;</a></span><span class="message">i'm aware it doesn't work on i386 at the moment fully</span></div><div class="line" id="073930"><span class="nick" style="color:#8dd3c7"><a href="#073930" label="[07:39:30]">&lt;fossy&gt;</a></span><span class="message">but either way, i'm not happy with having an inconsistent triplet in the system - either /usr/lib/triplet needs to change to the current triplet, or all uses of the triplet need to change</span></div><div class="line" id="073951"><span class="nick" style="color:#6b8072"><a href="#073951" label="[07:39:51]">&lt;doras&gt;</a></span><span class="message">fossy: I guess it's mostly philosophical.</span></div><div class="line" id="074053"><span class="nick" style="color:#8dd3c7"><a href="#074053" label="[07:40:53]">&lt;fossy&gt;</a></span><span class="message">doras: yeah, it is philisophical largely, whatever the actual triplet is doesn't bother me too much, but having inconsistent triplets does bother me from a functional standpoint - eg, GCC expects that either the libc is in /usr/lib or /usr/lib/&lt;triplet&gt; - where triplet is what it is configured with</span></div><div class="line" id="074059"><span class="nick" style="color:#6b8072"><a href="#074059" label="[07:40:59]">&lt;doras&gt;</a></span><span class="message">Which OS uses arch-vendor-kernel-system?</span></div><div class="line" id="074328"><span class="nick" style="color:#8dd3c7"><a href="#074328" label="[07:43:28]">&lt;fossy&gt;</a></span><span class="message">void linux &amp; alpine linux both appear to</span></div><div class="line" id="074331"><span class="nick" style="color:#6b8072"><a href="#074331" label="[07:43:31]">&lt;doras&gt;</a></span><span class="message">fossy: I don't mind using the GNU triplets as-is.</span></div><div class="line" id="074504"><span class="nick" style="color:#8dd3c7"><a href="#074504" label="[07:45:04]">&lt;fossy&gt;</a></span><span class="message">doras: Given that there's no real established standard in distributions (seems like there's only attempts to do so), let's just stick with the GNU triplet as is and make it /usr/lib/i386-unknown-linux-musl so we can get this PR shipped out. later we can revisit the triplet issue and make another atomic change</span></div><div class="line" id="074532"><span class="nick" style="color:#8dd3c7"><a href="#074532" label="[07:45:32]">&lt;fossy&gt;</a></span><span class="message">it's really easy to change these things in live-bootstrap, unlike most distributions</span></div><div class="line" id="075357"><span class="nick" style="color:#6b8072"><a href="#075357" label="[07:53:57]">&lt;doras&gt;</a></span><span class="message">Sure.</span></div><div class="line" id="075855"><span class="nick" style="color:#80b1d3"><a href="#075855" label="[07:58:55]">&lt;sam_&gt;</a></span><span class="message">fossy: we do /usr/triplet</span></div><div class="line" id="075927"><span class="nick" style="color:#80b1d3"><a href="#075927" label="[07:59:27]">&lt;sam_&gt;</a></span><span class="message">fossy: everything is under that for cross-compilation. for multilib, stuff is also under /usr/${CBUILD}/${CHOST}</span></div><div class="line" id="080552"><span class="nick" style="color:#8dd3c7"><a href="#080552" label="[08:05:52]">&lt;fossy&gt;</a></span><span class="message">sounds like everythings a bit of a mess and there's little standardization?</span></div><div class="line" id="080703"><span class="nick" style="color:#80b1d3"><a href="#080703" label="[08:07:03]">&lt;sam_&gt;</a></span><span class="message">yep</span></div><div class="line" id="130047"><span class="nick" style="color:#6d2462"><a href="#130047" label="[13:00:47]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, we don't do multilib in live-bootstrap</span></div><div class="line" id="132839"><span class="nick" style="color:#6d2462"><a href="#132839" label="[13:28:39]">&lt;stikonas[m]&gt;</a></span><span class="message">fossy: what do you think we should do with bwrap mode in <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/issues/230">https://github.com/fosslinux/live-bootstrap/issues/230</a>  ?</span></div><div class="line" id="133156"><span class="nick" style="color:#6d2462"><a href="#133156" label="[13:31:56]">&lt;stikonas[m]&gt;</a></span><span class="message">We definitely should keep chroot mode chained as otherwise it's not usable (sudo password expires unless you monitor your build). Maybe for bwrap mode it would be fine to split it and make rootfs.py call another bwrap command for sysc_image...</span></div><div class="line" id="155512"><span class="nick" style="color:#6b8072"><a href="#155512" label="[15:55:12]">&lt;doras&gt;</a></span><span class="message">stikonas: I suggest requiring rootfs.py itself to be called with sudo instead of individual commands within it.</span></div><div class="line" id="155740"><span class="nick" style="color:#6b8072"><a href="#155740" label="[15:57:40]">&lt;doras&gt;</a></span><span class="message">We're already calling sudo in 12 places in the code (and more in total for each bootstrap). We may as well just do it only once for the entire script.</span></div><div class="line" id="155912"><span class="nick" style="color:#6b8072"><a href="#155912" label="[15:59:12]">&lt;doras&gt;</a></span><span class="message">Only for the chroot mode, of coure.</span></div><div class="line" id="155937"><span class="nick" style="color:#6b8072"><a href="#155937" label="[15:59:37]">&lt;doras&gt;</a></span><span class="message">This would be similar to how package managers expect to be called with sudo for their operation.</span></div><div class="line" id="160558"><span class="nick" style="color:#6b8072"><a href="#160558" label="[16:05:58]">&lt;doras&gt;</a></span><span class="message">Those who worry about running random scripts with sudo should be using bwrap anyway.</span></div><div class="line" id="164008"><span class="nick" style="color:#6d2462"><a href="#164008" label="[16:40:08]">&lt;stikonas[m]&gt;</a></span><span class="message">That has some disadvantages, you'll end up with root owned files in your homedir</span></div><div class="line" id="164853"><span class="nick" style="color:#6d2462"><a href="#164853" label="[16:48:53]">&lt;stikonas[m]&gt;</a></span><span class="message">And in general I think people are moving away from running whole apps as root to use small polkit helpers</span></div><div class="line" id="171640"><span class="nick" style="color:#6b8072"><a href="#171640" label="[17:16:40]">&lt;doras&gt;</a></span><span class="message">Well, we end up with such files anyway at the moment.</span></div><div class="line" id="171745"><span class="nick" style="color:#6b8072"><a href="#171745" label="[17:17:45]">&lt;doras&gt;</a></span><span class="message">Another option would be to split the bootstrap preparation to one script and the part that actually starts it to another, with the second being run with sudo.</span></div><div class="line" id="172012"><span class="nick" style="color:#6b8072"><a href="#172012" label="[17:20:12]">&lt;doras&gt;</a></span><span class="message">i.e., create a small chroot-helper.py and use it to trigger the bootstrap.</span></div><div class="line" id="172307"><span class="nick" style="color:#6b8072"><a href="#172307" label="[17:23:07]">&lt;doras&gt;</a></span><span class="message">stikonas: this would be less disadvantageous, no?</span></div><div class="line" id="172814"><span class="nick" style="color:#6d2462"><a href="#172814" label="[17:28:14]">&lt;stikonas[m]&gt;</a></span><span class="message">We need one for qemu too...</span></div><div class="line" id="172824"><span class="nick" style="color:#6d2462"><a href="#172824" label="[17:28:24]">&lt;stikonas[m]&gt;</a></span><span class="message">To mount loop devices</span></div><div class="line" id="173119"><span class="nick" style="color:#6b8072"><a href="#173119" label="[17:31:19]">&lt;doras&gt;</a></span><span class="message">stikonas: no need, we could continue to use the existing logic for all preparation.</span></div><div class="line" id="173234"><span class="nick" style="color:#6b8072"><a href="#173234" label="[17:32:34]">&lt;doras&gt;</a></span><span class="message">stikonas: we basically only need to replace chroot's run() with a call to an external script that does the same: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/rootfs.py#L165">https://github.com/fosslinux/live-bootstrap/blob/master/rootfs.py#L165</a> </span></div><div class="line" id="173253"><span class="nick" style="color:#6b8072"><a href="#173253" label="[17:32:53]">&lt;doras&gt;</a></span><span class="message">While executing the external script with sudo of course.</span></div><div class="line" id="173351"><span class="nick" style="color:#6d2462"><a href="#173351" label="[17:33:51]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, let's see what fossy says...</span></div><div class="line" id="173415"><span class="nick" style="color:#6d2462"><a href="#173415" label="[17:34:15]">&lt;stikonas[m]&gt;</a></span><span class="message">I'm now away from home, so not easy to look at code</span></div><div class="line" id="173418"><span class="nick" style="color:#6b8072"><a href="#173418" label="[17:34:18]">&lt;doras&gt;</a></span><span class="message">Then that script can have a two step bootstrap (sysa, sysc) with chroot being called in-between at the Python level.</span></div><div class="line" id="174209"><span class="nick" style="color:#6b8072"><a href="#174209" label="[17:42:09]">&lt;doras&gt;</a></span><span class="message">fossy: I'm running a few bootstraps to test the /usr/lib/i386-unknown-linux-musl change. I will likely update the PR later today.</span></div><div class="line" id="190746"><span class="nick" style="color:#6b8072"><a href="#190746" label="[19:07:46]">&lt;doras&gt;</a></span><span class="message">fossy, stikonas: I think the tmpdir rework broke qemu without --external-sources.</span></div><div class="line" id="190821"><span class="nick" style="color:#6d2462"><a href="#190821" label="[19:08:21]">&lt;stikonas[m]&gt;</a></span><span class="message">Hmm, that needs fixing</span></div><div class="line" id="190842"><span class="nick" style="color:#6d2462"><a href="#190842" label="[19:08:42]">&lt;stikonas[m]&gt;</a></span><span class="message">I almost always run with --external-sources</span></div><div class="line" id="190924"><span class="nick" style="color:#6b8072"><a href="#190924" label="[19:09:24]">&lt;doras&gt;</a></span><span class="message">I don't see where this logic was moved: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/commit/51b0bf840516988d9c920449f9bbe5ba3ce09149#diff-4f5ea9e61e98e89475d5d81a4cf620a8beb8809f8668f6c8cffdcca6a5cb9bcdL64">https://github.com/fosslinux/live-bootstrap/commit/51b0bf840516988d9c920449f9bbe5ba3ce09149#diff-4f5ea9e61e98e89475d5d81a4cf620a8beb8809f8668f6c8cffdcca6a5cb9bcdL64</a> </span></div><div class="line" id="190940"><span class="nick" style="color:#6b8072"><a href="#190940" label="[19:09:40]">&lt;doras&gt;</a></span><span class="message">So maybe it's missing</span></div><div class="line" id="191316"><span class="nick" style="color:#6b8072"><a href="#191316" label="[19:13:16]">&lt;doras&gt;</a></span><span class="message">It seems that this mode requires a disk image without filesystem and we no longer create one?</span></div><div class="line" id="191741"><span class="nick" style="color:#6b8072"><a href="#191741" label="[19:17:41]">&lt;doras&gt;</a></span><span class="message">Or... something else. It's a bit hard to follow that code :s</span></div><div class="line" id="193207"><span class="nick" style="color:#6b8072"><a href="#193207" label="[19:32:07]">&lt;doras&gt;</a></span><span class="message">Created <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/issues/234">https://github.com/fosslinux/live-bootstrap/issues/234</a> </span></div><div class="line" id="232140"><span class="nick" style="color:#6b8072"><a href="#232140" label="[23:21:40]">&lt;doras&gt;</a></span><span class="message">fossy, stikonas: PR for /usr/lib/i386-unknown-linux-musl is ready: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/201">https://github.com/fosslinux/live-bootstrap/pull/201</a> </span></div><div class="line" id="232312"><span class="nick" style="color:#6b8072"><a href="#232312" label="[23:23:12]">&lt;doras&gt;</a></span><span class="message">The two first commits aren't actually related to the MR, but are small enough that it doesn't matter.</span></div><br /></div></body></html>