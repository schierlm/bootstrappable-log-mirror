<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-07-24.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="013125"><span class="nick" style="color:#8dd3c7"><a href="#013125" label="[01:31:25]">&lt;stikonas&gt;</a></span><span class="message">hmm, encoding riscv jumps does not actually take THAT long...</span></div><div class="line" id="013159"><span class="nick" style="color:#8dd3c7"><a href="#013159" label="[01:31:59]">&lt;stikonas&gt;</a></span><span class="message">probably 3-4 minutes per jump do do all calculations and even produce nice intermediate comments</span></div><div class="line" id="041803"><span class="nick" style="color:#2e2a4a"><a href="#041803" label="[04:18:03]">&lt;oriansj&gt;</a></span><span class="message">just a thought but figuring out the simplest RISC-V hex2 subset might be easier if you tried adding RISC-V support to M2-Planet (and M2libc) then you'll be able to see what subset could be most easily used. Rather than rigidly following the hex0-&gt;hex1-&gt;hex2 plan</span></div><div class="line" id="094823"><span class="nick" style="color:#6b8072"><a href="#094823" label="[09:48:23]">&lt;stikonas[m]&gt;</a></span><span class="message">Possibly... But writing hex1_x86 is a useful exercise to understand some things for somebody with no riscv experience. And basically  no non trivial assembly programming before</span></div><div class="line" id="152359"><span class="nick" style="color:#2e2a4a"><a href="#152359" label="[15:23:59]">&lt;oriansj&gt;</a></span><span class="message">stikonas: you are absolutely right.</span></div><div class="line" id="152526"><span class="nick" style="color:#8dd3c7"><a href="#152526" label="[15:25:26]">&lt;stikonas&gt;</a></span><span class="message">we'll see soon enough if it works</span></div><div class="line" id="152526"><span class="nick" style="color:#2e2a4a"><a href="#152526" label="[15:25:26]">&lt;oriansj&gt;</a></span><span class="message">hex0, hex1, hex2, M0 and cc_* are a wonderful progression for learning assembly language programming.</span></div><div class="line" id="152543"><span class="nick" style="color:#8dd3c7"><a href="#152543" label="[15:25:43]">&lt;stikonas&gt;</a></span><span class="message">I think I have ~10 instructions left to encode</span></div><div class="line" id="152606"><span class="nick" style="color:#8dd3c7"><a href="#152606" label="[15:26:06]">&lt;stikonas&gt;</a></span><span class="message">then we can put that file into RV64/Development/</span></div><div class="line" id="152613"><span class="nick" style="color:#2e2a4a"><a href="#152613" label="[15:26:13]">&lt;oriansj&gt;</a></span><span class="message">I've been considering a minor change in hex2 that might make AArch64 and RISC-V slightly more efficient</span></div><div class="line" id="152621"><span class="nick" style="color:#8dd3c7"><a href="#152621" label="[15:26:21]">&lt;stikonas&gt;</a></span><span class="message">?</span></div><div class="line" id="152648"><span class="nick" style="color:#8dd3c7"><a href="#152648" label="[15:26:48]">&lt;stikonas&gt;</a></span><span class="message">I've also adding more comments to .hex0 file in RISC-V since immediates are mangled</span></div><div class="line" id="152649"><span class="nick" style="color:#2e2a4a"><a href="#152649" label="[15:26:49]">&lt;oriansj&gt;</a></span><span class="message">2 classes of hex2: byte and word</span></div><div class="line" id="152749"><span class="nick" style="color:#2e2a4a"><a href="#152749" label="[15:27:49]">&lt;oriansj&gt;</a></span><span class="message">but I still am figuring out the correct way to do it</span></div><div class="line" id="152812"><span class="nick" style="color:#8dd3c7"><a href="#152812" label="[15:28:12]">&lt;stikonas&gt;</a></span><span class="message">WIP: <a rel="nofollow" href="https://stikonas.eu/files/bootstrap/hex1_x86.hex0.txt">https://stikonas.eu/files/bootstrap/hex1_x86.hex0.txt</a> </span></div><div class="line" id="152841"><span class="nick" style="color:#2e2a4a"><a href="#152841" label="[15:28:41]">&lt;oriansj&gt;</a></span><span class="message">stikonas: nice</span></div><div class="line" id="152841"><span class="nick" style="color:#8dd3c7"><a href="#152841" label="[15:28:41]">&lt;stikonas&gt;</a></span><span class="message">those comments should help with those J- and B- type instructions</span></div><div class="line" id="152909"><span class="nick" style="color:#8dd3c7"><a href="#152909" label="[15:29:09]">&lt;stikonas&gt;</a></span><span class="message">it's not too hard to encode them by hand if you have that bit template</span></div><div class="line" id="152929"><span class="nick" style="color:#8dd3c7"><a href="#152929" label="[15:29:29]">&lt;stikonas&gt;</a></span><span class="message">and since I had it, I though why not putting in the comments</span></div><div class="line" id="152958"><span class="nick" style="color:#8dd3c7"><a href="#152958" label="[15:29:58]">&lt;stikonas&gt;</a></span><span class="message">yeah, I saw Aarch64 also has some hex weirdness...</span></div><div class="line" id="153009"><span class="nick" style="color:#2e2a4a"><a href="#153009" label="[15:30:09]">&lt;oriansj&gt;</a></span><span class="message">also fossy you might want to cancel your mescc-tools draft pull request as we have created mescc-tools-extra</span></div><div class="line" id="153044"><span class="nick" style="color:#8dd3c7"><a href="#153044" label="[15:30:44]">&lt;stikonas&gt;</a></span><span class="message">can you not close it without fossy?</span></div><div class="line" id="153057"><span class="nick" style="color:#8dd3c7"><a href="#153057" label="[15:30:57]">&lt;stikonas&gt;</a></span><span class="message">I don't think fossy would mind given that we went slightly different direction</span></div><div class="line" id="153347"><span class="nick" style="color:#2e2a4a"><a href="#153347" label="[15:33:47]">&lt;oriansj&gt;</a></span><span class="message">I got the idea from: <a rel="nofollow" href="https://github.com/laanwj/guix-mescc-tools/commit/1634c35635836943a4164fedf575c6ffe38f72ee">https://github.com/laanwj/guix-mescc-tools/commit/1634c35635836943a4164fedf575c6ffe38f72ee</a> </span></div><div class="line" id="153553"><span class="nick" style="color:#2e2a4a"><a href="#153553" label="[15:35:53]">&lt;oriansj&gt;</a></span><span class="message">I don't like the syntax choices but it is looking more and more that RISC-V is very byte hostile.</span></div><div class="line" id="153925"><span class="nick" style="color:#2e2a4a"><a href="#153925" label="[15:39:25]">&lt;oriansj&gt;</a></span><span class="message">also I would want to restrict that behavior heavily to just the most byte hostile architectures.</span></div><div class="line" id="154208"><span class="nick" style="color:#2e2a4a"><a href="#154208" label="[15:42:08]">&lt;oriansj&gt;</a></span><span class="message">So when one does hex1 and hex2 for RISC-V in assembly they might end up having to do something with that word based syntax to make it work.</span></div><div class="line" id="154252"><span class="nick" style="color:#2e2a4a"><a href="#154252" label="[15:42:52]">&lt;oriansj&gt;</a></span><span class="message">which is going to probably make that hex1 and hex2 much more complex than any other architectures hex1 and hex2</span></div><div class="line" id="154412"><span class="nick" style="color:#8dd3c7"><a href="#154412" label="[15:44:12]">&lt;stikonas&gt;</a></span><span class="message">yeah, I also thought that we'll have to make hex1 and hex2 significantly more complex...</span></div><div class="line" id="154429"><span class="nick" style="color:#8dd3c7"><a href="#154429" label="[15:44:29]">&lt;stikonas&gt;</a></span><span class="message">although, need to think this through a bit to find lowest complexity...</span></div><div class="line" id="154450"><span class="nick" style="color:#8dd3c7"><a href="#154450" label="[15:44:50]">&lt;stikonas&gt;</a></span><span class="message">at least these kind of bit manipulations where immediates are swapped shouldn't be too hard  to implement</span></div><div class="line" id="154513"><span class="nick" style="color:#8dd3c7"><a href="#154513" label="[15:45:13]">&lt;stikonas&gt;</a></span><span class="message">but we also need to take into account 7 bit opcodes...</span></div><div class="line" id="154612"><span class="nick" style="color:#8dd3c7"><a href="#154612" label="[15:46:12]">&lt;stikonas&gt;</a></span><span class="message">is that link work in progess for riscv in mes?</span></div><div class="line" id="154630"><span class="nick" style="color:#8dd3c7"><a href="#154630" label="[15:46:30]">&lt;stikonas&gt;</a></span><span class="message">(well, not mes itself but tools with the intention of later mes port)</span></div><div class="line" id="155706"><span class="nick" style="color:#2e2a4a"><a href="#155706" label="[15:57:06]">&lt;oriansj&gt;</a></span><span class="message">stikonas: as far as I can tell yes</span></div><div class="line" id="155717"><span class="nick" style="color:#2e2a4a"><a href="#155717" label="[15:57:17]">&lt;oriansj&gt;</a></span><span class="message">but it brings a problem for M1</span></div><div class="line" id="155742"><span class="nick" style="color:#2e2a4a"><a href="#155742" label="[15:57:42]">&lt;oriansj&gt;</a></span><span class="message">as M1 deals with immediate encoding as well as the conversion from human names to hex2</span></div><div class="line" id="155907"><span class="nick" style="color:#2e2a4a"><a href="#155907" label="[15:59:07]">&lt;oriansj&gt;</a></span><span class="message">in x86 it is what converts add_eax %0x1234 into 05 3412</span></div><div class="line" id="155940"><span class="nick" style="color:#2e2a4a"><a href="#155940" label="[15:59:40]">&lt;oriansj&gt;</a></span><span class="message">in RISC-V it would need to output the syntax that hex2 uses for the immediate field encodings</span></div><div class="line" id="160156"><span class="nick" style="color:#2e2a4a"><a href="#160156" label="[16:01:56]">&lt;oriansj&gt;</a></span><span class="message">So if the syntax is .J 34120000 then it would have to output that for %0x1234 or require a custom syntax there too</span></div><div class="line" id="160228"><span class="nick" style="color:#8dd3c7"><a href="#160228" label="[16:02:28]">&lt;stikonas&gt;</a></span><span class="message">.J meaning jump type opcode?</span></div><div class="line" id="160324"><span class="nick" style="color:#2e2a4a"><a href="#160324" label="[16:03:24]">&lt;oriansj&gt;</a></span><span class="message">stikonas: honestly I was thinking of repurposing !@#$ for RISC-V instead of the example syntax linked</span></div><div class="line" id="160427"><span class="nick" style="color:#2e2a4a"><a href="#160427" label="[16:04:27]">&lt;oriansj&gt;</a></span><span class="message">as individual bytes and halfs don't mean anything in RISC-V</span></div><div class="line" id="160453"><span class="nick" style="color:#2e2a4a"><a href="#160453" label="[16:04:53]">&lt;oriansj&gt;</a></span><span class="message">and ~ is already defined as architecture specific</span></div><div class="line" id="160618"><span class="nick" style="color:#8dd3c7"><a href="#160618" label="[16:06:18]">&lt;stikonas&gt;</a></span><span class="message">hmm, alternatively, can we have some kind of preprocessor?</span></div><div class="line" id="160638"><span class="nick" style="color:#8dd3c7"><a href="#160638" label="[16:06:38]">&lt;stikonas&gt;</a></span><span class="message">so we reorder crazy risc instruction boundaries into something that M1 can easily output</span></div><div class="line" id="160654"><span class="nick" style="color:#8dd3c7"><a href="#160654" label="[16:06:54]">&lt;stikonas&gt;</a></span><span class="message">hmm, although, that will probably make address calculations too hard</span></div><div class="line" id="160730"><span class="nick" style="color:#2e2a4a"><a href="#160730" label="[16:07:30]">&lt;oriansj&gt;</a></span><span class="message">M1 doesn't have to care about addresses at all, it is just a macro string processor</span></div><div class="line" id="160824"><span class="nick" style="color:#8dd3c7"><a href="#160824" label="[16:08:24]">&lt;stikonas&gt;</a></span><span class="message">well, I'll have to take a better look at M1 first before I can give more qualified input to this problem</span></div><div class="line" id="160829"><span class="nick" style="color:#2e2a4a"><a href="#160829" label="[16:08:29]">&lt;oriansj&gt;</a></span><span class="message">with a few architecture specific flagged behaviors (little/big endian) etc</span></div><div class="line" id="160950"><span class="nick" style="color:#2e2a4a"><a href="#160950" label="[16:09:50]">&lt;oriansj&gt;</a></span><span class="message">also I've been sticking to single character prefix special behaviors to simplify implementation in assembly. (:label instead of the more common label:)</span></div><div class="line" id="161017"><span class="nick" style="color:#8dd3c7"><a href="#161017" label="[16:10:17]">&lt;stikonas&gt;</a></span><span class="message">well, yes, although we have enough spare characters</span></div><div class="line" id="161023"><span class="nick" style="color:#8dd3c7"><a href="#161023" label="[16:10:23]">&lt;stikonas&gt;</a></span><span class="message">or even letters...</span></div><div class="line" id="161103"><span class="nick" style="color:#8dd3c7"><a href="#161103" label="[16:11:03]">&lt;stikonas&gt;</a></span><span class="message">basically anything other than a-f A-F 0-9 : ; #</span></div><div class="line" id="161119"><span class="nick" style="color:#2e2a4a"><a href="#161119" label="[16:11:19]">&lt;oriansj&gt;</a></span><span class="message">I'd rather drop special immediate encodings than fill up the space if possible</span></div><div class="line" id="161332"><span class="nick" style="color:#2e2a4a"><a href="#161332" label="[16:13:32]">&lt;oriansj&gt;</a></span><span class="message">and !@$%~ 5 hex2 offset encodings and !@$%~ 5 M1 immediate encodings should be enough to do something useful</span></div><div class="line" id="161352"><span class="nick" style="color:#2e2a4a"><a href="#161352" label="[16:13:52]">&lt;oriansj&gt;</a></span><span class="message">if not, the architecture set would have to be absolute garbage</span></div><div class="line" id="161606"><span class="nick" style="color:#2e2a4a"><a href="#161606" label="[16:16:06]">&lt;oriansj&gt;</a></span><span class="message">we could even extend it to % and &amp; if we expected someting stupid like %0x12345678 '00000000'</span></div><div class="line" id="161635"><span class="nick" style="color:#2e2a4a"><a href="#161635" label="[16:16:35]">&lt;oriansj&gt;</a></span><span class="message">but I'd prefer something clean if possible.</span></div><div class="line" id="162044"><span class="nick" style="color:#2e2a4a"><a href="#162044" label="[16:20:44]">&lt;oriansj&gt;</a></span><span class="message">and something like !00FF0000 @1000450 $0200006 00000000 might be needed to encode fixed position registers as seperate defines if one wanted to clean up the M1 syntax for RISC-V instead of doing the DEFINE ADD_EAX 05 that we did in x86</span></div><div class="line" id="162203"><span class="nick" style="color:#2e2a4a"><a href="#162203" label="[16:22:03]">&lt;oriansj&gt;</a></span><span class="message">(with the first 3 just changing the contents of the shift register before being xor'd with the zeros to produce the one word of output)</span></div><div class="line" id="162401"><span class="nick" style="color:#8dd3c7"><a href="#162401" label="[16:24:01]">&lt;stikonas&gt;</a></span><span class="message">yeah, I think that x86 approach would be infeasible</span></div><div class="line" id="162429"><span class="nick" style="color:#8dd3c7"><a href="#162429" label="[16:24:29]">&lt;stikonas&gt;</a></span><span class="message">but yes, first appraoch will need more work in hex1/2</span></div><div class="line" id="162441"><span class="nick" style="color:#2e2a4a"><a href="#162441" label="[16:24:41]">&lt;oriansj&gt;</a></span><span class="message">and we probably could reserve . to mean just xor what follows into the shift register. So that the output of M1 for the various !6 @7 and $0x123 statments just become .06000000, .00012000 and .0070340</span></div><div class="line" id="162506"><span class="nick" style="color:#2e2a4a"><a href="#162506" label="[16:25:06]">&lt;oriansj&gt;</a></span><span class="message">(these are just arbitrary examples)</span></div><div class="line" id="162922"><span class="nick" style="color:#2e2a4a"><a href="#162922" label="[16:29:22]">&lt;oriansj&gt;</a></span><span class="message">hex2 would only need to know about SB-Format and UJ-Format</span></div><div class="line" id="163057"><span class="nick" style="color:#2e2a4a"><a href="#163057" label="[16:30:57]">&lt;oriansj&gt;</a></span><span class="message">which we could do as ~ and ^~</span></div><div class="line" id="163116"><span class="nick" style="color:#2e2a4a"><a href="#163116" label="[16:31:16]">&lt;oriansj&gt;</a></span><span class="message">unless there is something important I am missing</span></div><div class="line" id="163203"><span class="nick" style="color:#2e2a4a"><a href="#163203" label="[16:32:03]">&lt;oriansj&gt;</a></span><span class="message">M1 would need to support I-Format, S-Format and U-Format</span></div><div class="line" id="163358"><span class="nick" style="color:#8dd3c7"><a href="#163358" label="[16:33:58]">&lt;stikonas&gt;</a></span><span class="message">hmm, will we have any problem with pseudoinstructions?</span></div><div class="line" id="163407"><span class="nick" style="color:#8dd3c7"><a href="#163407" label="[16:34:07]">&lt;stikonas&gt;</a></span><span class="message">some of that seems non-trivial too</span></div><div class="line" id="163457"><span class="nick" style="color:#8dd3c7"><a href="#163457" label="[16:34:57]">&lt;stikonas&gt;</a></span><span class="message">yeah, the the formats are not too hard</span></div><div class="line" id="163500"><span class="nick" style="color:#2e2a4a"><a href="#163500" label="[16:35:00]">&lt;oriansj&gt;</a></span><span class="message">and R-Format would just be a standard DEFINE in M1 (unless we want to do something funky like DEFINE R1_12 .00001200 so that hex2 deals with putting register number 0x12 in register spot 1</span></div><div class="line" id="163941"><span class="nick" style="color:#2e2a4a"><a href="#163941" label="[16:39:41]">&lt;oriansj&gt;</a></span><span class="message">also we don't deal with pseudoinstructions because they are not really implemented and instead we will deal with the actual instructions that the processor will actually be using.</span></div><div class="line" id="164932"><span class="nick" style="color:#2e2a4a"><a href="#164932" label="[16:49:32]">&lt;oriansj&gt;</a></span><span class="message">So it would be 32x3 DEFINEs for all register encoding details needed for RISC-V but would look a little odd =&gt; R0_12 R1_0 R2_31 ADD but it would work</span></div><div class="line" id="165215"><span class="nick" style="color:#2e2a4a"><a href="#165215" label="[16:52:15]">&lt;oriansj&gt;</a></span><span class="message">and R type instructions would use R0_*, R1_* and R2_* but I would only use R1_* and R2_*;  S and SB would use R0_* and R1_* and U and UJ would use R2_*</span></div><div class="line" id="165247"><span class="nick" style="color:#2e2a4a"><a href="#165247" label="[16:52:47]">&lt;oriansj&gt;</a></span><span class="message">and hope to god the programmer can remember that</span></div><div class="line" id="165441"><span class="nick" style="color:#80b1d3"><a href="#165441" label="[16:54:41]">*</a></span><span class="message">stikonas is trying to calculate jumps for final 7 instructions (loading :table, etc...)</span></div><div class="line" id="165537"><span class="nick" style="color:#2e2a4a"><a href="#165537" label="[16:55:37]">&lt;oriansj&gt;</a></span><span class="message">it is easiest if you put the (0xaddress) as a comment next to the :label</span></div><div class="line" id="165613"><span class="nick" style="color:#2e2a4a"><a href="#165613" label="[16:56:13]">&lt;oriansj&gt;</a></span><span class="message">that way you would only need to count the number of bytes between labels</span></div><div class="line" id="165858"><span class="nick" style="color:#8dd3c7"><a href="#165858" label="[16:58:58]">&lt;stikonas&gt;</a></span><span class="message">well, I had a table with number of instructions</span></div><div class="line" id="165910"><span class="nick" style="color:#8dd3c7"><a href="#165910" label="[16:59:10]">&lt;stikonas&gt;</a></span><span class="message">but in this case I'm trying to understand alignment rules</span></div><div class="line" id="165926"><span class="nick" style="color:#8dd3c7"><a href="#165926" label="[16:59:26]">&lt;stikonas&gt;</a></span><span class="message">it's the :table symbol at the end of program</span></div><div class="line" id="165953"><span class="nick" style="color:#8dd3c7"><a href="#165953" label="[16:59:53]">&lt;stikonas&gt;</a></span><span class="message">maybe anything will work as long as I'm consistent in all 7 instructions and leave enough space for alignment</span></div><div class="line" id="170022"><span class="nick" style="color:#2e2a4a"><a href="#170022" label="[17:00:22]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well assuming RISC-V is stupidly forcing alignment on the assembler writer. Just assume align to 8bytes. (it'll probably work)</span></div><div class="line" id="170115"><span class="nick" style="color:#8dd3c7"><a href="#170115" label="[17:01:15]">&lt;stikonas&gt;</a></span><span class="message">well, I was thinking of 4 bytes but we'll see...</span></div><div class="line" id="170120"><span class="nick" style="color:#8dd3c7"><a href="#170120" label="[17:01:20]">&lt;stikonas&gt;</a></span><span class="message">if 4 don't work, I'll change to 8</span></div><div class="line" id="170237"><span class="nick" style="color:#2e2a4a"><a href="#170237" label="[17:02:37]">&lt;oriansj&gt;</a></span><span class="message">if they were reasonable, align to byte would be the only restriction (allows dense encoding in the future) but I guess their simplify hardware implementation goal continues to cause us frustation.</span></div><div class="line" id="181218"><span class="nick" style="color:#8dd3c7"><a href="#181218" label="[18:12:18]">&lt;stikonas&gt;</a></span><span class="message">hmm, segfault :(</span></div><div class="line" id="181248"><span class="nick" style="color:#8dd3c7"><a href="#181248" label="[18:12:48]">&lt;stikonas&gt;</a></span><span class="message">probably need to redo :table address calculations...</span></div><div class="line" id="181837"><span class="nick" style="color:#2e2a4a"><a href="#181837" label="[18:18:37]">&lt;oriansj&gt;</a></span><span class="message">gdb si will probably help a lot</span></div><div class="line" id="182743"><span class="nick" style="color:#8dd3c7"><a href="#182743" label="[18:27:43]">&lt;stikonas&gt;</a></span><span class="message">I did use gdb for assembly prototype, but now there is no debugging info...</span></div><div class="line" id="182802"><span class="nick" style="color:#8dd3c7"><a href="#182802" label="[18:28:02]">&lt;stikonas&gt;</a></span><span class="message">well, I'll first retry some things with those :table jumps</span></div><div class="line" id="201009"><span class="nick" style="color:#8dd3c7"><a href="#201009" label="[20:10:09]">&lt;stikonas&gt;</a></span><span class="message">oriansj: ok, I think I've got it working</span></div><div class="line" id="201045"><span class="nick" style="color:#8dd3c7"><a href="#201045" label="[20:10:45]">&lt;stikonas&gt;</a></span><span class="message">was adjusting that jump amount, then spotted that I typed one instruction in reverse</span></div><div class="line" id="201048"><span class="nick" style="color:#8dd3c7"><a href="#201048" label="[20:10:48]">&lt;stikonas&gt;</a></span><span class="message">so that fixed it</span></div><div class="line" id="201058"><span class="nick" style="color:#8dd3c7"><a href="#201058" label="[20:10:58]">&lt;stikonas&gt;</a></span><span class="message">not sure if adjusting the jump amount was necessary...</span></div><div class="line" id="201236"><span class="nick" style="color:#8dd3c7"><a href="#201236" label="[20:12:36]">&lt;stikonas&gt;</a></span><span class="message">hmm, or did I run something else...</span></div><div class="line" id="201238"><span class="nick" style="color:#8dd3c7"><a href="#201238" label="[20:12:38]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="201304"><span class="nick" style="color:#8dd3c7"><a href="#201304" label="[20:13:04]">&lt;stikonas&gt;</a></span><span class="message">argh, yes, it was the wrong binary, sorry for the noise, going back to investigation</span></div><div class="line" id="213922"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o janneke_</span></div><div class="line" id="221100"><span class="nick" style="color:#6d2462"><a href="#221100" label="[22:11:00]">&lt;mihi&gt;</a></span><span class="message">Some time ago I also had some thoughts how you could shoehorn RISC-V style encodings into hex2 (without actually hardcoding them in the hex2 binary). But as I won't do the actual work, it does not matter how I would have done it :)</span></div><div class="line" id="221221"><span class="nick" style="color:#6d2462"><a href="#221221" label="[22:12:21]">&lt;mihi&gt;</a></span><span class="message">I would have added not one but two shift registers, an output shift register (gets XORed against every byte output) and an input shift register. Have a prefix char that shifts the next output (byte or address) into the ISR.</span></div><div class="line" id="221338"><span class="nick" style="color:#6d2462"><a href="#221338" label="[22:13:38]">&lt;mihi&gt;</a></span><span class="message">Then you would need the operations ISR &amp;= const, ISR rotate_left const (0..63), OSR ^= ISR, and maybe OSR += ISR (two of them if both endiannesses).</span></div><div class="line" id="221421"><span class="nick" style="color:#6d2462"><a href="#221421" label="[22:14:21]">&lt;mihi&gt;</a></span><span class="message">In case M1 cannot easily emit variables multiple times, probably another accumulator register that can be copied to/from ISR</span></div><div class="line" id="222411"><span class="nick" style="color:#8dd3c7"><a href="#222411" label="[22:24:11]">&lt;stikonas&gt;</a></span><span class="message">hmm, debugging hex code is annoying... although I made some progress...</span></div><div class="line" id="222508"><span class="nick" style="color:#8dd3c7"><a href="#222508" label="[22:25:08]">&lt;stikonas&gt;</a></span><span class="message">from segfault after fixing some issues went to running but not doing anything, then after another fix segfault again :D, although, this time I can see it reading something successfully</span></div><div class="line" id="224535"><span class="nick" style="color:#234e69"><a href="#224535" label="[22:45:35]">&lt;ekaitz&gt;</a></span><span class="message">stikonas: I debugged hex0 using gdb and disassembling everything so I could check the address of the jumps instead of counting instructions by hand</span></div><div class="line" id="224546"><span class="nick" style="color:#234e69"><a href="#224546" label="[22:45:46]">&lt;ekaitz&gt;</a></span><span class="message">I'm an engineer so I don't know how to count more than 10</span></div><div class="line" id="224829"><span class="nick" style="color:#6c3d55"><a href="#224829" label="[22:48:29]">&lt;xentrac&gt;</a></span><span class="message">you might find radare2 useful for this kind of thing</span></div><div class="line" id="224932"><span class="nick" style="color:#6c3d55"><a href="#224932" label="[22:49:32]">&lt;xentrac&gt;</a></span><span class="message">I mean I haven't used it myself, but youtube demos make it look like it would be pretty convenient</span></div><div class="line" id="225016"><span class="nick" style="color:#234e69"><a href="#225016" label="[22:50:16]">&lt;ekaitz&gt;</a></span><span class="message">xentrac: isn't that more for reverse engineering?</span></div><div class="line" id="225244"><span class="nick" style="color:#8dd3c7"><a href="#225244" label="[22:52:44]">&lt;stikonas&gt;</a></span><span class="message">ekaitz: well, I'm thinking about running two gdb side by size</span></div><div class="line" id="225308"><span class="nick" style="color:#234e69"><a href="#225308" label="[22:53:08]">&lt;ekaitz&gt;</a></span><span class="message">why two?</span></div><div class="line" id="225311"><span class="nick" style="color:#8dd3c7"><a href="#225311" label="[22:53:11]">&lt;stikonas&gt;</a></span><span class="message">one running hex0, the other running stuff compiled by as, so I can get line numbers</span></div><div class="line" id="225315"><span class="nick" style="color:#8dd3c7"><a href="#225315" label="[22:53:15]">&lt;stikonas&gt;</a></span><span class="message">hex0 has no debug info</span></div><div class="line" id="225331"><span class="nick" style="color:#234e69"><a href="#225331" label="[22:53:31]">&lt;ekaitz&gt;</a></span><span class="message">and why do you need it?</span></div><div class="line" id="225341"><span class="nick" style="color:#8dd3c7"><a href="#225341" label="[22:53:41]">&lt;stikonas&gt;</a></span><span class="message">well, easier than address jumps...</span></div><div class="line" id="225353"><span class="nick" style="color:#8dd3c7"><a href="#225353" label="[22:53:53]">&lt;stikonas&gt;</a></span><span class="message">I want to find instruction that segfaults</span></div><div class="line" id="225400"><span class="nick" style="color:#8dd3c7"><a href="#225400" label="[22:54:00]">&lt;stikonas&gt;</a></span><span class="message">anyway, I'm making some progress</span></div><div class="line" id="225404"><span class="nick" style="color:#8dd3c7"><a href="#225404" label="[22:54:04]">&lt;stikonas&gt;</a></span><span class="message">fixed a few issues</span></div><div class="line" id="225409"><span class="nick" style="color:#234e69"><a href="#225409" label="[22:54:09]">&lt;ekaitz&gt;</a></span><span class="message">you can use breakpoints and so on, even if without the debug info</span></div><div class="line" id="225424"><span class="nick" style="color:#234e69"><a href="#225424" label="[22:54:24]">&lt;ekaitz&gt;</a></span><span class="message">in the end, you are in assembly, there's no need to point to a source file or anything, you are on it!</span></div><div class="line" id="225548"><span class="nick" style="color:#234e69"><a href="#225548" label="[22:55:48]">&lt;ekaitz&gt;</a></span><span class="message">layout asm is more than enough for this i'd say</span></div><div class="line" id="230721"><span class="nick" style="color:#6c3d55"><a href="#230721" label="[23:07:21]">&lt;xentrac&gt;</a></span><span class="message">ekaitz: if you're disassembling things and trying to figure out where jumps go and stepping through machine code in gdb, you're pretty close to reverse engineering</span></div><div class="line" id="233022"><span class="nick" style="color:#8dd3c7"><a href="#233022" label="[23:30:22]">&lt;stikonas&gt;</a></span><span class="message">well, the thing is I don't need to figure out how things have to work, I already have a working assembly code, I just needed to find where hex0 code deviates from it</span></div><div class="line" id="233104"><span class="nick" style="color:#8dd3c7"><a href="#233104" label="[23:31:04]">&lt;stikonas&gt;</a></span><span class="message">I could look at just hex0 code and think whether register values make sense, but it's a bit easier to compare with known good. Not saying the other way can't be done</span></div><div class="line" id="233941"><span class="nick" style="color:#8dd3c7"><a href="#233941" label="[23:39:41]">&lt;stikonas&gt;</a></span><span class="message">but ok, layout asm is useful...</span></div><br /></div></body></html>