<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-03-06.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000930"><span class="nick" style="color:#389600"><a href="#000930" label="[00:09:30]">&lt;dddddd&gt;</a></span><span class="message">fossy, about struct_to_array (which might need a better name, related to the linked-list instead of about struct). What's the meaning of that 4096 magic number and how this tell apart tokens from environment (what forces that rule/invariant)?  -- It seems to me that array[i] doesn't need any allocation as you are overwriting the pointer no matter what. -- The &quot;line too long&quot; error message seems incorrect, as the check is about the max</span></div><div class="line" id="000931"><span class="nick" style="color:#389600"><a href="#000931" label="[00:09:31]">&lt;dddddd&gt;</a></span><span class="message">_number_ of args IIUC the MAX_ARGS constant.</span></div><div class="line" id="001017"><span class="nick" style="color:#8dd3c7"><a href="#001017" label="[00:10:17]">&lt;fossy&gt;</a></span><span class="message">4096? is what oriansj had always used</span></div><div class="line" id="001039"><span class="nick" style="color:#8dd3c7"><a href="#001039" label="[00:10:39]">&lt;fossy&gt;</a></span><span class="message">MAX_ARGS also happened to be used for arrays</span></div><div class="line" id="001044"><span class="nick" style="color:#8dd3c7"><a href="#001044" label="[00:10:44]">&lt;fossy&gt;</a></span><span class="message">I will rename Max args</span></div><div class="line" id="001115"><span class="nick" style="color:#8dd3c7"><a href="#001115" label="[00:11:15]">&lt;fossy&gt;</a></span><span class="message">Yes the message is wrong</span></div><div class="line" id="001122"><span class="nick" style="color:#8dd3c7"><a href="#001122" label="[00:11:22]">&lt;fossy&gt;</a></span><span class="message">It should be Sscript too long</span></div><div class="line" id="001213"><span class="nick" style="color:#389600"><a href="#001213" label="[00:12:13]">&lt;dddddd&gt;</a></span><span class="message">The is_envar caller keeps checking for 1 instead of the TRUE constant.</span></div><div class="line" id="001239"><span class="nick" style="color:#389600"><a href="#001239" label="[00:12:39]">&lt;dddddd&gt;</a></span><span class="message">Has that 4096 any relation with MAX_STRING?</span></div><div class="line" id="001445"><span class="nick" style="color:#389600"><a href="#001445" label="[00:14:45]">&lt;dddddd&gt;</a></span><span class="message">--strict is not listed as possible option in the help. And I'm a bit confused about the expected behaviour when it's set, so maybe I'll ask about it later on.</span></div><div class="line" id="001659"><span class="nick" style="color:#389600"><a href="#001659" label="[00:16:59]">&lt;dddddd&gt;</a></span><span class="message">collect_variable is documented as &quot;to substitute variables&quot;, weird function name isn't it?</span></div><div class="line" id="001828"><span class="nick" style="color:#389600"><a href="#001828" label="[00:18:28]">&lt;dddddd&gt;</a></span><span class="message">prematch is not used.</span></div><div class="line" id="002107"><span class="nick" style="color:#8dd3c7"><a href="#002107" label="[00:21:07]">&lt;fossy&gt;</a></span><span class="message">4096 is what max string is defined as</span></div><div class="line" id="002132"><span class="nick" style="color:#8dd3c7"><a href="#002132" label="[00:21:32]">&lt;fossy&gt;</a></span><span class="message">--strict == set -e</span></div><div class="line" id="002247"><span class="nick" style="color:#389600"><a href="#002247" label="[00:22:47]">&lt;dddddd&gt;</a></span><span class="message">As for the escaping behaviour, what do you think about printing at least a warning (if not error) if a non-supported char is found (as it's only &quot;supporting&quot; newlines)?</span></div><div class="line" id="002313"><span class="nick" style="color:#389600"><a href="#002313" label="[00:23:13]">&lt;dddddd&gt;</a></span><span class="message">Yeah, MAX_STRING is 4096 but does have it any relation with the other 4096 or it's just coincidence?</span></div><div class="line" id="002328"><span class="nick" style="color:#8dd3c7"><a href="#002328" label="[00:23:28]">&lt;fossy&gt;</a></span><span class="message">I dont recall lemme look in a second</span></div><div class="line" id="002453"><span class="nick" style="color:#389600"><a href="#002453" label="[00:24:53]">&lt;dddddd&gt;</a></span><span class="message">No hurry for any answer, take your time whenever you're free.</span></div><div class="line" id="002459"><span class="nick" style="color:#8dd3c7"><a href="#002459" label="[00:24:59]">&lt;fossy&gt;</a></span><span class="message">The escaping behaviour - do you think that it warrants a warning?</span></div><div class="line" id="002525"><span class="nick" style="color:#389600"><a href="#002525" label="[00:25:25]">&lt;dddddd&gt;</a></span><span class="message">I do think so, because we're dropping input on the floor.</span></div><div class="line" id="002605"><span class="nick" style="color:#389600"><a href="#002605" label="[00:26:05]">&lt;dddddd&gt;</a></span><span class="message">An error wouldn't be crazy even, I think.</span></div><div class="line" id="002640"><span class="nick" style="color:#389600"><a href="#002640" label="[00:26:40]">&lt;dddddd&gt;</a></span><span class="message">We'll what others think about it...</span></div><div class="line" id="002648"><span class="nick" style="color:#389600"><a href="#002648" label="[00:26:48]">&lt;dddddd&gt;</a></span><span class="message">*see what</span></div><div class="line" id="003343"><span class="nick" style="color:#389600"><a href="#003343" label="[00:33:43]">&lt;dddddd&gt;</a></span><span class="message">So, set -e shouldn't cover builtins, right?</span></div><div class="line" id="003432"><span class="nick" style="color:#2e2a4a"><a href="#003432" label="[00:34:32]">&lt;OriansJ&gt;</a></span><span class="message">well the \ for EOL escape certainly merits a warning when people do say \n and see nothing</span></div><div class="line" id="003446"><span class="nick" style="color:#6b8072"><a href="#003446" label="[00:34:46]">&lt;xentrac&gt;</a></span><span class="message">if a builtin like [ -f $x ] fails, the script should bail out</span></div><div class="line" id="003510"><span class="nick" style="color:#6b8072"><a href="#003510" label="[00:35:10]">&lt;xentrac&gt;</a></span><span class="message">what prevents it from bailing out in if [ -f $x ]; then foo; else bar; fi is not that what's failing is a builtin</span></div><div class="line" id="003530"><span class="nick" style="color:#6b8072"><a href="#003530" label="[00:35:30]">&lt;xentrac&gt;</a></span><span class="message">what prevents it from bailing out is that it's in the condition of an if</span></div><div class="line" id="003708"><span class="nick" style="color:#389600"><a href="#003708" label="[00:37:08]">&lt;dddddd&gt;</a></span><span class="message">For reference... set, cd, pwd and echo are the supported builtins.</span></div><div class="line" id="003734"><span class="nick" style="color:#6b8072"><a href="#003734" label="[00:37:34]">&lt;xentrac&gt;</a></span><span class="message">usually if someone says set -e, it is essential for cd failing to abort the script</span></div><div class="line" id="003756"><span class="nick" style="color:#6b8072"><a href="#003756" label="[00:37:56]">&lt;xentrac&gt;</a></span><span class="message">early versions of sh actually would abort the script if cd failed even without -e being set, if memory serves</span></div><div class="line" id="004008"><span class="nick" style="color:#2e2a4a"><a href="#004008" label="[00:40:08]">&lt;OriansJ&gt;</a></span><span class="message">well it certainly would be easy for the builtins to get conditional error catching behavior</span></div><div class="line" id="012354"><span class="nick" style="color:#80b1d3"><a href="#012354" label="[01:23:54]">&lt;Hagfish&gt;</a></span><span class="message"> <a rel="nofollow" href="http://blog.ptsecurity.com/2020/03/intelx86-root-of-trust-loss-of-trust.html">http://blog.ptsecurity.com/2020/03/intelx86-root-of-trust-loss-of-trust.html</a> </span></div><div class="line" id="012632"><span class="nick" style="color:#80b1d3"><a href="#012632" label="[01:26:32]">&lt;Hagfish&gt;</a></span><span class="message">so giving one company control over millions of other people's computers didn't work out so well after all</span></div><div class="line" id="013535"><span class="nick" style="color:#389600"><a href="#013535" label="[01:35:35]">&lt;dddddd&gt;</a></span><span class="message">fossy, I think variables added in a line like &quot;FOO=bar cmd&quot; should not survive the execution of cmd but AFAIU they do in the current implementation. Is this by design, a bug or I'm missing something?</span></div><div class="line" id="013732"><span class="nick" style="color:#389600"><a href="#013732" label="[01:37:32]">&lt;dddddd&gt;</a></span><span class="message">Well, I guess we're not even executing cmd.</span></div><div class="line" id="014037"><span class="nick" style="color:#389600"><a href="#014037" label="[01:40:37]">&lt;dddddd&gt;</a></span><span class="message">hmm, maybe we're but as it were part of another line. I'm still not familiar enough with the codebase, so maybe I'm wrong.</span></div><div class="line" id="014549"><span class="nick" style="color:#389600"><a href="#014549" label="[01:45:49]">&lt;dddddd&gt;</a></span><span class="message">The so-called nightmare mode is not implemented.</span></div><div class="line" id="014557"><span class="nick" style="color:#389600"><a href="#014557" label="[01:45:57]">&lt;dddddd&gt;</a></span><span class="message">OriansJ, why is it called like that?</span></div><div class="line" id="015319"><span class="nick" style="color:#2e2a4a"><a href="#015319" label="[01:53:19]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: because it kills the environment and alot of applications freakout when envp is just a NULL</span></div><div class="line" id="015440"><span class="nick" style="color:#2e2a4a"><a href="#015440" label="[01:54:40]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: I think it is the best news of the month; libreboot will be able to be on ALL modern Intel systems</span></div><div class="line" id="015541"><span class="nick" style="color:#2e2a4a"><a href="#015541" label="[01:55:41]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: as I understand it variable support in kaem is quite minimal</span></div><div class="line" id="015552"><span class="nick" style="color:#389600"><a href="#015552" label="[01:55:52]">&lt;dddddd&gt;</a></span><span class="message">Kind of clever naming, but I guess we don't really need to be that fancy. What about --no-env or something like that, more semantic?</span></div><div class="line" id="015801"><span class="nick" style="color:#2e2a4a"><a href="#015801" label="[01:58:01]">&lt;OriansJ&gt;</a></span><span class="message">well dddddd I guess a more accurate name would be --init-mode</span></div><div class="line" id="015843"><span class="nick" style="color:#2e2a4a"><a href="#015843" label="[01:58:43]">&lt;OriansJ&gt;</a></span><span class="message">as no environment exists when spawned as init</span></div><div class="line" id="015929"><span class="nick" style="color:#389600"><a href="#015929" label="[01:59:29]">&lt;dddddd&gt;</a></span><span class="message">Do you think is worth renaming? Would it cause much breakage?</span></div><div class="line" id="020126"><span class="nick" style="color:#389600"><a href="#020126" label="[02:01:26]">&lt;dddddd&gt;</a></span><span class="message">fossy, also note that the short option for that mode lacks hyphen (I don't know it that's on purpose but it's not consistent with the rest of the options).</span></div><div class="line" id="020159"><span class="nick" style="color:#2e2a4a"><a href="#020159" label="[02:01:59]">&lt;OriansJ&gt;</a></span><span class="message">nothing is currently using --nightmare-mode as it is only useful should one wish to use it build a proper init on a posix without one but kaem-optional-seed could fill that role</span></div><div class="line" id="020318"><span class="nick" style="color:#2e2a4a"><a href="#020318" label="[02:03:18]">&lt;OriansJ&gt;</a></span><span class="message">which being only 737bytes would probably be a better bootstrap init</span></div><div class="line" id="021957"><span class="nick" style="color:#389600"><a href="#021957" label="[02:19:57]">&lt;dddddd&gt;</a></span><span class="message">Last question for today fossy. What's in Token-&gt;pos? The position of the last char in the line? Is it meaninful at all or is it just a temporal value instead? I guess that'd be interesting to document.</span></div><div class="line" id="022138"><span class="nick" style="color:#389600"><a href="#022138" label="[02:21:38]">&lt;dddddd&gt;</a></span><span class="message">*last char of the token</span></div><div class="line" id="022343"><span class="nick" style="color:#389600"><a href="#022343" label="[02:23:43]">&lt;dddddd&gt;</a></span><span class="message">Also explaning which part of the union is used for each kind of token. If we're going to reuse the struct, at least that the behaviour is clear.</span></div><div class="line" id="031745"><span class="nick" style="color:#8dd3c7"><a href="#031745" label="[03:17:45]">&lt;fossy&gt;</a></span><span class="message">&lt;dddddd&gt; fossy, I think variables added in a line like &quot;FOO=bar cmd&quot; should not survive the execution of cmd but AFAIU they do in the current implementation. Is this by design, a bug or I'm missing something?</span></div><div class="line" id="031751"><span class="nick" style="color:#8dd3c7"><a href="#031751" label="[03:17:51]">&lt;fossy&gt;</a></span><span class="message">Design</span></div><div class="line" id="031940"><span class="nick" style="color:#8dd3c7"><a href="#031940" label="[03:19:40]">&lt;fossy&gt;</a></span><span class="message">dddddd: token-&gt;pos is used for a variety of things</span></div><div class="line" id="031949"><span class="nick" style="color:#8dd3c7"><a href="#031949" label="[03:19:49]">&lt;fossy&gt;</a></span><span class="message">mostly tracking the posiiton between functions</span></div><div class="line" id="031957"><span class="nick" style="color:#8dd3c7"><a href="#031957" label="[03:19:57]">&lt;fossy&gt;</a></span><span class="message">it resets after each &quot;stage&quot;</span></div><div class="line" id="032102"><span class="nick" style="color:#8dd3c7"><a href="#032102" label="[03:21:02]">&lt;fossy&gt;</a></span><span class="message">so ie, token collection, variable and exec</span></div><div class="line" id="032153"><span class="nick" style="color:#8dd3c7"><a href="#032153" label="[03:21:53]">&lt;fossy&gt;</a></span><span class="message">thanks for all the comments ^-^</span></div><div class="line" id="040201"><span class="nick" style="color:#80b1d3"><a href="#040201" label="[04:02:01]">&lt;Hagfish&gt;</a></span><span class="message">the discussion on HN about the intel thing suggested that the lack of support for libreboot (or coreboot) is more to do with binary blobs than signing</span></div><div class="line" id="040323"><span class="nick" style="color:#80b1d3"><a href="#040323" label="[04:03:23]">&lt;Hagfish&gt;</a></span><span class="message">i didn't understand the details, but i'm sure that opening up the chip to modification must be useful for firmware projects</span></div><div class="line" id="040418"><span class="nick" style="color:#6b8072"><a href="#040418" label="[04:04:18]">&lt;xentrac&gt;</a></span><span class="message">seems likely, but there's probably a lot of work to do between here and there</span></div><div class="line" id="075551"><span class="nick" style="color:#8dd3c7"><a href="#075551" label="[07:55:51]">&lt;fossy&gt;</a></span><span class="message">OriansJ: how would n-&gt;var == NULL occur? Faulty code in other parts of the program.</span></div><div class="line" id="075558"><span class="nick" style="color:#8dd3c7"><a href="#075558" label="[07:55:58]">&lt;fossy&gt;</a></span><span class="message">unlikely, but possible</span></div><div class="line" id="075615"><span class="nick" style="color:#8dd3c7"><a href="#075615" label="[07:56:15]">&lt;fossy&gt;</a></span><span class="message">i agree that masking it is not a solution, but making sure end users do not encounter it is important imo</span></div><div class="line" id="081019"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado</span></div><div class="line" id="082811"><span class="nick" style="color:#8dd3c7"><a href="#082811" label="[08:28:11]">&lt;fossy&gt;</a></span><span class="message">deesix, OriansJ: <a rel="nofollow" href="https://ttm.sh/Ej3.txt">https://ttm.sh/Ej3.txt</a> </span></div><div class="line" id="082827"><span class="nick" style="color:#8dd3c7"><a href="#082827" label="[08:28:27]">&lt;fossy&gt;</a></span><span class="message">i will be around tomorrow morning, during when you guys are mostly active</span></div><div class="line" id="082844"><span class="nick" style="color:#8dd3c7"><a href="#082844" label="[08:28:44]">&lt;fossy&gt;</a></span><span class="message">i would really like to try to get this out the door this weekend</span></div><div class="line" id="121356"><span class="nick" style="color:#2e2a4a"><a href="#121356" label="[12:13:56]">&lt;OriansJ&gt;</a></span><span class="message">fossy: then put a require in and we can root out those faulty bits; doing the correct thing is the most important first step.</span></div><div class="line" id="130540"><span class="nick">***</span><span class="message notice">janneke_ is now known as janneke</span></div><div class="line" id="211309"><span class="nick" style="color:#389600"><a href="#211309" label="[21:13:09]">&lt;dddddd&gt;</a></span><span class="message">o/</span></div><div class="line" id="211727"><span class="nick" style="color:#8dd3c7"><a href="#211727" label="[21:17:27]">&lt;fossy&gt;</a></span><span class="message">OriansJ: I did fix the underlying bug</span></div><div class="line" id="211733"><span class="nick" style="color:#8dd3c7"><a href="#211733" label="[21:17:33]">&lt;fossy&gt;</a></span><span class="message">but I left the require there</span></div><div class="line" id="211755"><span class="nick" style="color:#8dd3c7"><a href="#211755" label="[21:17:55]">&lt;fossy&gt;</a></span><span class="message">would it be preferable for the require to be removed, now that the underlying bug is fixed?</span></div><div class="line" id="212445"><span class="nick" style="color:#389600"><a href="#212445" label="[21:24:45]">&lt;dddddd&gt;</a></span><span class="message">hi, fossy. I don't understand how using 4096 instead of the MAX_STRING constant is &quot;explicit&quot;. The point a tried to make is that... if that number is 4096 because the logic (I see the reasoning now in the new nice comment) is about the lenght of the strings, then using the constant is the right thing. That way, if the constant changes (an the strings might be longer) the logic is intact.</span></div><div class="line" id="212533"><span class="nick" style="color:#8dd3c7"><a href="#212533" label="[21:25:33]">&lt;fossy&gt;</a></span><span class="message">Fair nuff</span></div><div class="line" id="212714"><span class="nick" style="color:#389600"><a href="#212714" label="[21:27:14]">&lt;dddddd&gt;</a></span><span class="message">Do you keep a list of the unaddressed points from the last conversations?</span></div><div class="line" id="212744"><span class="nick" style="color:#8dd3c7"><a href="#212744" label="[21:27:44]">&lt;fossy&gt;</a></span><span class="message">No, I do not</span></div><div class="line" id="212800"><span class="nick" style="color:#8dd3c7"><a href="#212800" label="[21:28:00]">&lt;fossy&gt;</a></span><span class="message">Hm, it shouldn't be destructive...</span></div><div class="line" id="212803"><span class="nick" style="color:#389600"><a href="#212803" label="[21:28:03]">&lt;dddddd&gt;</a></span><span class="message">that might explaing why some things are unchanged.</span></div><div class="line" id="212803"><span class="nick" style="color:#8dd3c7"><a href="#212803" label="[21:28:03]">&lt;fossy&gt;</a></span><span class="message">I will fix that.</span></div><div class="line" id="213129"><span class="nick" style="color:#389600"><a href="#213129" label="[21:31:29]">&lt;dddddd&gt;</a></span><span class="message">I read you want to finish the current work in kaem this weekend. How far do you want to go? I'm glad to help if you want and time slots match.</span></div><div class="line" id="213233"><span class="nick" style="color:#8dd3c7"><a href="#213233" label="[21:32:33]">&lt;fossy&gt;</a></span><span class="message">dddddd: Not any new features or anything, just get reviews of the code ive been sending done and the new kaem repo pushed</span></div><div class="line" id="213459"><span class="nick" style="color:#389600"><a href="#213459" label="[21:34:59]">&lt;dddddd&gt;</a></span><span class="message">Do you consider extending &quot;set -e&quot; to the builtins?</span></div><div class="line" id="213915"><span class="nick" style="color:#8dd3c7"><a href="#213915" label="[21:39:15]">&lt;fossy&gt;</a></span><span class="message">set -e is valid....</span></div><div class="line" id="213917"><span class="nick" style="color:#8dd3c7"><a href="#213917" label="[21:39:17]">&lt;fossy&gt;</a></span><span class="message">how do you mean?</span></div><div class="line" id="214007"><span class="nick" style="color:#389600"><a href="#214007" label="[21:40:07]">&lt;dddddd&gt;</a></span><span class="message">see the logs, please</span></div><div class="line" id="214051"><span class="nick" style="color:#8dd3c7"><a href="#214051" label="[21:40:51]">&lt;fossy&gt;</a></span><span class="message">Oh, I get it</span></div><div class="line" id="214108"><span class="nick" style="color:#389600"><a href="#214108" label="[21:41:08]">&lt;dddddd&gt;</a></span><span class="message">We were talking about that builtins should catch errors to honor &quot;stop on error&quot;</span></div><div class="line" id="214109"><span class="nick" style="color:#8dd3c7"><a href="#214109" label="[21:41:09]">&lt;fossy&gt;</a></span><span class="message">That is probably a valid idea</span></div><div class="line" id="214117"><span class="nick" style="color:#8dd3c7"><a href="#214117" label="[21:41:17]">&lt;fossy&gt;</a></span><span class="message">I will implement that</span></div><div class="line" id="214212"><span class="nick" style="color:#389600"><a href="#214212" label="[21:42:12]">&lt;dddddd&gt;</a></span><span class="message">nice, another option is to put a TODO note. Ack the limitation but document it. Your choice...</span></div><div class="line" id="214253"><span class="nick" style="color:#389600"><a href="#214253" label="[21:42:53]">&lt;dddddd&gt;</a></span><span class="message">s/but/and/</span></div><div class="line" id="214921"><span class="nick" style="color:#8dd3c7"><a href="#214921" label="[21:49:21]">&lt;fossy&gt;</a></span><span class="message">dddddd: is there anything else in the code, that warrants attention?</span></div><div class="line" id="214947"><span class="nick" style="color:#8dd3c7"><a href="#214947" label="[21:49:47]">&lt;fossy&gt;</a></span><span class="message">if not, ill wait for oriansj, and then finish fixing the repository and push</span></div><div class="line" id="215152"><span class="nick" style="color:#389600"><a href="#215152" label="[21:51:52]">&lt;dddddd&gt;</a></span><span class="message">there're lots of thing, on a wide range of importance from my limited point of view</span></div><div class="line" id="215240"><span class="nick" style="color:#8dd3c7"><a href="#215240" label="[21:52:40]">&lt;fossy&gt;</a></span><span class="message">dddddd: do you think memory allocation errors in builtins should pass silent under set -e</span></div><div class="line" id="215253"><span class="nick" style="color:#8dd3c7"><a href="#215253" label="[21:52:53]">&lt;fossy&gt;</a></span><span class="message">dddddd: any of them that you think are important</span></div><div class="line" id="215325"><span class="nick" style="color:#8dd3c7"><a href="#215325" label="[21:53:25]">&lt;fossy&gt;</a></span><span class="message">I mean, without set -e</span></div><div class="line" id="215441"><span class="nick" style="color:#389600"><a href="#215441" label="[21:54:41]">&lt;dddddd&gt;</a></span><span class="message">No, allocation error means broken behaviour. The program should stop.</span></div><div class="line" id="215516"><span class="nick" style="color:#8dd3c7"><a href="#215516" label="[21:55:16]">&lt;fossy&gt;</a></span><span class="message">Could be as simple as OOM, not broken behaviour</span></div><div class="line" id="215621"><span class="nick" style="color:#389600"><a href="#215621" label="[21:56:21]">&lt;dddddd&gt;</a></span><span class="message">If you can't allocate memory for your data, you can store your data, you can't do the task at hand.</span></div><div class="line" id="215718"><span class="nick" style="color:#8dd3c7"><a href="#215718" label="[21:57:18]">&lt;fossy&gt;</a></span><span class="message">right</span></div><div class="line" id="215859"><span class="nick" style="color:#389600"><a href="#215859" label="[21:58:59]">&lt;dddddd&gt;</a></span><span class="message">About the really important changes, I'll defer to OriansJ which has more experience. From then on... we can clean as much as you want.</span></div><div class="line" id="220127"><span class="nick" style="color:#389600"><a href="#220127" label="[22:01:27]">&lt;dddddd&gt;</a></span><span class="message">Maybe starting with the user visible interface. The usage help is not right, for example.</span></div><div class="line" id="220544"><span class="nick" style="color:#8dd3c7"><a href="#220544" label="[22:05:44]">&lt;fossy&gt;</a></span><span class="message">Oh, I fixed that</span></div><div class="line" id="220601"><span class="nick" style="color:#389600"><a href="#220601" label="[22:06:01]">&lt;dddddd&gt;</a></span><span class="message">About the new warnings feature, is it off by default for compatibility reasons or anything else?</span></div><div class="line" id="220658"><span class="nick" style="color:#8dd3c7"><a href="#220658" label="[22:06:58]">&lt;fossy&gt;</a></span><span class="message">Any existing scripts that may &quot;use&quot; the bug will get warnings spewed out</span></div><div class="line" id="220733"><span class="nick" style="color:#8dd3c7"><a href="#220733" label="[22:07:33]">&lt;fossy&gt;</a></span><span class="message">My idea was scripts should be developed and tested with -w, but shouldn't be run with them</span></div><div class="line" id="220753"><span class="nick" style="color:#389600"><a href="#220753" label="[22:07:53]">&lt;dddddd&gt;</a></span><span class="message">Remember --init-mode instead of --no-env. And the bug about the without-hypen check.</span></div><div class="line" id="221014"><span class="nick" style="color:#389600"><a href="#221014" label="[22:10:14]">&lt;dddddd&gt;</a></span><span class="message">Next on a fast list would be not allocating memory if we're not going to use it.</span></div><div class="line" id="221040"><span class="nick" style="color:#8dd3c7"><a href="#221040" label="[22:10:40]">&lt;fossy&gt;</a></span><span class="message">I guess I would approach that by going through each calloc and optimising it</span></div><div class="line" id="221134"><span class="nick" style="color:#8dd3c7"><a href="#221134" label="[22:11:34]">&lt;fossy&gt;</a></span><span class="message">Usage: ./kaem [-h | --help] [-V | --version] [--file filename | -f filename] [--verbose] [--no-env] [--fuzz]</span></div><div class="line" id="221137"><span class="nick" style="color:#8dd3c7"><a href="#221137" label="[22:11:37]">&lt;fossy&gt;</a></span><span class="message">That is the new help</span></div><div class="line" id="221143"><span class="nick" style="color:#8dd3c7"><a href="#221143" label="[22:11:43]">&lt;fossy&gt;</a></span><span class="message">./kaem is replaced by $0</span></div><div class="line" id="221210"><span class="nick" style="color:#389600"><a href="#221210" label="[22:12:10]">&lt;dddddd&gt;</a></span><span class="message">Yeah, this thingss need systematic methods.</span></div><div class="line" id="221250"><span class="nick" style="color:#8dd3c7"><a href="#221250" label="[22:12:50]">&lt;fossy&gt;</a></span><span class="message">dddddd: Should -h include descriptions of options?</span></div><div class="line" id="221306"><span class="nick" style="color:#389600"><a href="#221306" label="[22:13:06]">&lt;dddddd&gt;</a></span><span class="message">What about --warn?</span></div><div class="line" id="221308"><span class="nick" style="color:#8dd3c7"><a href="#221308" label="[22:13:08]">&lt;fossy&gt;</a></span><span class="message">5</span></div><div class="line" id="221309"><span class="nick" style="color:#8dd3c7"><a href="#221309" label="[22:13:09]">&lt;fossy&gt;</a></span><span class="message">oops</span></div><div class="line" id="221311"><span class="nick" style="color:#8dd3c7"><a href="#221311" label="[22:13:11]">&lt;fossy&gt;</a></span><span class="message">oh yeah,</span></div><div class="line" id="221328"><span class="nick" style="color:#8dd3c7"><a href="#221328" label="[22:13:28]">&lt;fossy&gt;</a></span><span class="message">and --strict</span></div><div class="line" id="221339"><span class="nick" style="color:#389600"><a href="#221339" label="[22:13:39]">&lt;dddddd&gt;</a></span><span class="message">and the thing about --init-mode. Please, try to be methodic.</span></div><div class="line" id="221414"><span class="nick" style="color:#8dd3c7"><a href="#221414" label="[22:14:14]">&lt;fossy&gt;</a></span><span class="message">yeah</span></div><div class="line" id="221513"><span class="nick" style="color:#8dd3c7"><a href="#221513" label="[22:15:13]">&lt;fossy&gt;</a></span><span class="message">I try to be methodic... but I easily look over things</span></div><div class="line" id="221559"><span class="nick" style="color:#8dd3c7"><a href="#221559" label="[22:15:59]">&lt;fossy&gt;</a></span><span class="message">Hmm, I feel like I need to seperate some of these changes, like the --init-mode thing, into new commits -- they're not really part of a refactor</span></div><div class="line" id="221623"><span class="nick" style="color:#8dd3c7"><a href="#221623" label="[22:16:23]">&lt;fossy&gt;</a></span><span class="message">I guess that's what I want to get done this weekend, finish the refactor commit</span></div><div class="line" id="221713"><span class="nick" style="color:#389600"><a href="#221713" label="[22:17:13]">&lt;dddddd&gt;</a></span><span class="message">We can document the options in the manpage or README. More info from -h would be nice but not a high priority if we have the file. I guess; but yeah, might be out of scope.</span></div><div class="line" id="221858"><span class="nick" style="color:#8dd3c7"><a href="#221858" label="[22:18:58]">&lt;fossy&gt;</a></span><span class="message">dddddd: as a newcomer to the kaem codebase, how do you think it is looking in terms of readability, and are the comments helping?</span></div><div class="line" id="221932"><span class="nick" style="color:#389600"><a href="#221932" label="[22:19:32]">&lt;dddddd&gt;</a></span><span class="message">Comments are definitely helping a lot.</span></div><div class="line" id="222117"><span class="nick" style="color:#8dd3c7"><a href="#222117" label="[22:21:17]">&lt;fossy&gt;</a></span><span class="message">how about more generally?</span></div><div class="line" id="223110"><span class="nick" style="color:#8dd3c7"><a href="#223110" label="[22:31:10]">&lt;fossy&gt;</a></span><span class="message">OriansJ: do you feel kaem is up to scratch and of the appropriate quality to be pushed</span></div><div class="line" id="223258"><span class="nick" style="color:#389600"><a href="#223258" label="[22:32:58]">&lt;dddddd&gt;</a></span><span class="message">It's mostly straightforward, with some rough/convoluted edges here and there. The -&gt;pos life is not obvious and I'm a bit mystified due to the &quot;ifset&quot; term.</span></div><div class="line" id="223348"><span class="nick" style="color:#389600"><a href="#223348" label="[22:33:48]">&lt;dddddd&gt;</a></span><span class="message">On minor details, I don't quite like those shouting error messages, and the hard thing...</span></div><div class="line" id="223754"><span class="nick" style="color:#389600"><a href="#223754" label="[22:37:54]">&lt;dddddd&gt;</a></span><span class="message">The high-level overview comment is maybe misplaced, as it it's in a function instead of on top level (overview).</span></div><div class="line" id="223942"><span class="nick" style="color:#389600"><a href="#223942" label="[22:39:42]">&lt;dddddd&gt;</a></span><span class="message">How would you describe the refactor in a couple of lines? What motivated it, what's improved, etc...</span></div><div class="line" id="224422"><span class="nick" style="color:#389600"><a href="#224422" label="[22:44:22]">&lt;dddddd&gt;</a></span><span class="message">For next/last round of review, if you're planning on reducing the scope of changes (and center on the refactor) a version matching that would be required. There's no point in reviewing more than the planned commits.</span></div><div class="line" id="224544"><span class="nick" style="color:#389600"><a href="#224544" label="[22:45:44]">&lt;dddddd&gt;</a></span><span class="message">Do you have an stimation of how much time you can allocate during the weekend to finish the task?</span></div><div class="line" id="224633"><span class="nick" style="color:#389600"><a href="#224633" label="[22:46:33]">&lt;dddddd&gt;</a></span><span class="message">*estimate</span></div><div class="line" id="224818"><span class="nick" style="color:#389600"><a href="#224818" label="[22:48:18]">&lt;dddddd&gt;</a></span><span class="message">And, more importantly. Are you happy with the results?</span></div><div class="line" id="225321"><span class="nick" style="color:#389600"><a href="#225321" label="[22:53:21]">&lt;dddddd&gt;</a></span><span class="message">Oh, that note about &quot;Super strange stuff when referenceing envp&quot;, is a bit non-descriptive. What problem are you trying to workaround?</span></div><div class="line" id="230021"><span class="nick" style="color:#8dd3c7"><a href="#230021" label="[23:00:21]">&lt;fossy&gt;</a></span><span class="message">&lt;dddddd&gt; On minor details, I don't quite like those shouting error messages, and the hard thing...</span></div><div class="line" id="230026"><span class="nick" style="color:#8dd3c7"><a href="#230026" label="[23:00:26]">&lt;fossy&gt;</a></span><span class="message">neither do I much</span></div><div class="line" id="230035"><span class="nick" style="color:#8dd3c7"><a href="#230035" label="[23:00:35]">&lt;fossy&gt;</a></span><span class="message">but OriansJ has had them from the start.</span></div><div class="line" id="230217"><span class="nick" style="color:#8dd3c7"><a href="#230217" label="[23:02:17]">&lt;fossy&gt;</a></span><span class="message">description? The code was not very intuitive. The data structures being used were not extremely appropriate and in the end were going to make it very difficult to further extend kaem. Functions were too large and too many code paths in each function (ie too much depth)</span></div><div class="line" id="230226"><span class="nick" style="color:#8dd3c7"><a href="#230226" label="[23:02:26]">&lt;fossy&gt;</a></span><span class="message">I am happy with the code</span></div><div class="line" id="230253"><span class="nick" style="color:#8dd3c7"><a href="#230253" label="[23:02:53]">&lt;fossy&gt;</a></span><span class="message">dddddd: when referencing envp[i] the output seemed to be all jumbled</span></div><div class="line" id="231006"><span class="nick" style="color:#389600"><a href="#231006" label="[23:10:06]">&lt;dddddd&gt;</a></span><span class="message">Oh, now it's far from that description, nice!</span></div><div class="line" id="231935"><span class="nick" style="color:#8dd3c7"><a href="#231935" label="[23:19:35]">&lt;fossy&gt;</a></span><span class="message">dddddd: How would you feel about renaming the commit from refactor to refactor and improve</span></div><div class="line" id="231945"><span class="nick" style="color:#8dd3c7"><a href="#231945" label="[23:19:45]">&lt;fossy&gt;</a></span><span class="message">the changes are all rather linked</span></div><div class="line" id="231953"><span class="nick" style="color:#8dd3c7"><a href="#231953" label="[23:19:53]">&lt;fossy&gt;</a></span><span class="message">So splitting them is proving painful</span></div><div class="line" id="232009"><span class="nick" style="color:#8dd3c7"><a href="#232009" label="[23:20:09]">&lt;fossy&gt;</a></span><span class="message">All I can see is mess in doing it</span></div><div class="line" id="232150"><span class="nick" style="color:#8dd3c7"><a href="#232150" label="[23:21:50]">&lt;fossy&gt;</a></span><span class="message"> <a rel="nofollow" href="https://ttm.sh/EjN.txt">https://ttm.sh/EjN.txt</a> </span></div><div class="line" id="232156"><span class="nick" style="color:#8dd3c7"><a href="#232156" label="[23:21:56]">&lt;fossy&gt;</a></span><span class="message">here's the latest.</span></div><div class="line" id="232210"><span class="nick" style="color:#8dd3c7"><a href="#232210" label="[23:22:10]">&lt;fossy&gt;</a></span><span class="message">ifset is because I am substituting if the variable is set....</span></div><div class="line" id="232417"><span class="nick" style="color:#389600"><a href="#232417" label="[23:24:17]">&lt;dddddd&gt;</a></span><span class="message">So, &quot;performing an ifset&quot; is checking if the variable is set?</span></div><div class="line" id="232549"><span class="nick" style="color:#389600"><a href="#232549" label="[23:25:49]">&lt;dddddd&gt;</a></span><span class="message">Yeah, I guess we're late for incremental changes and a single commit is expected. Describe it as you feel better.</span></div><div class="line" id="232622"><span class="nick" style="color:#8dd3c7"><a href="#232622" label="[23:26:22]">&lt;fossy&gt;</a></span><span class="message">Yrp</span></div><div class="line" id="232624"><span class="nick" style="color:#8dd3c7"><a href="#232624" label="[23:26:24]">&lt;fossy&gt;</a></span><span class="message">yep</span></div><div class="line" id="232753"><span class="nick" style="color:#389600"><a href="#232753" label="[23:27:53]">&lt;dddddd&gt;</a></span><span class="message">What's the case for not checking it (not doing an &quot;ifset&quot;) in a function called *_ifset?</span></div><div class="line" id="233107"><span class="nick" style="color:#389600"><a href="#233107" label="[23:31:07]">&lt;dddddd&gt;</a></span><span class="message">prematch (unused) it's still there. Let me be honest. It doesn't give any confidence to see that past comments are skipped like that.</span></div><div class="line" id="233311"><span class="nick" style="color:#389600"><a href="#233311" label="[23:33:11]">&lt;dddddd&gt;</a></span><span class="message">--warn is not listed in the help message.</span></div><div class="line" id="233655"><span class="nick" style="color:#8dd3c7"><a href="#233655" label="[23:36:55]">&lt;fossy&gt;</a></span><span class="message">past comments?</span></div><div class="line" id="233708"><span class="nick" style="color:#389600"><a href="#233708" label="[23:37:08]">&lt;dddddd&gt;</a></span><span class="message">I'll wait OriansJ comments and consecuent fixes. Then we can try to polish some finicky details.</span></div><div class="line" id="233723"><span class="nick" style="color:#389600"><a href="#233723" label="[23:37:23]">&lt;dddddd&gt;</a></span><span class="message">Past review comments, I mean.</span></div><div class="line" id="233744"><span class="nick" style="color:#8dd3c7"><a href="#233744" label="[23:37:44]">&lt;fossy&gt;</a></span><span class="message">When was prematch addressed?</span></div><div class="line" id="233815"><span class="nick" style="color:#8dd3c7"><a href="#233815" label="[23:38:15]">&lt;fossy&gt;</a></span><span class="message">I try to address everything, but I guarantee ignoring a review comment would never be done on purpose</span></div><div class="line" id="233918"><span class="nick" style="color:#8dd3c7"><a href="#233918" label="[23:39:18]">&lt;fossy&gt;</a></span><span class="message">dddddd: OriansJ told me that he would prefer the check for ifset to occur inside the ifset function</span></div><div class="line" id="234018"><span class="nick" style="color:#389600"><a href="#234018" label="[23:40:18]">&lt;dddddd&gt;</a></span><span class="message">right before you explained me that --strict == set -e</span></div><div class="line" id="234106"><span class="nick" style="color:#2e2a4a"><a href="#234106" label="[23:41:06]">&lt;OriansJ&gt;</a></span><span class="message">fossy: The Super strange occured on 6470753cbd425569edbe13c07cb80566760ff5da in mescc-tools</span></div><div class="line" id="234125"><span class="nick" style="color:#389600"><a href="#234125" label="[23:41:25]">&lt;dddddd&gt;</a></span><span class="message">Sure I know it's not on purpose, don't get me wrong. But it happend more than once (again, method).</span></div><div class="line" id="234152"><span class="nick" style="color:#2e2a4a"><a href="#234152" label="[23:41:52]">&lt;OriansJ&gt;</a></span><span class="message">Ok high level architecture view</span></div><div class="line" id="234153"><span class="nick" style="color:#8dd3c7"><a href="#234153" label="[23:41:53]">&lt;fossy&gt;</a></span><span class="message">Oh, so you did</span></div><div class="line" id="234157"><span class="nick" style="color:#8dd3c7"><a href="#234157" label="[23:41:57]">&lt;fossy&gt;</a></span><span class="message">My apologies</span></div><div class="line" id="234205"><span class="nick" style="color:#8dd3c7"><a href="#234205" label="[23:42:05]">&lt;fossy&gt;</a></span><span class="message">OriansJ: Super strange what?</span></div><div class="line" id="234238"><span class="nick" style="color:#2e2a4a"><a href="#234238" label="[23:42:38]">&lt;OriansJ&gt;</a></span><span class="message">comment, referenced above</span></div><div class="line" id="234242"><span class="nick" style="color:#8dd3c7"><a href="#234242" label="[23:42:42]">&lt;fossy&gt;</a></span><span class="message">dddddd: This will become better over time as I refine my processes over time</span></div><div class="line" id="234245"><span class="nick" style="color:#8dd3c7"><a href="#234245" label="[23:42:45]">&lt;fossy&gt;</a></span><span class="message">Oh, right</span></div><div class="line" id="234406"><span class="nick" style="color:#389600"><a href="#234406" label="[23:44:06]">&lt;dddddd&gt;</a></span><span class="message">No need to sorry, fossy. Exactly, learning from mistakes.</span></div><div class="line" id="234411"><span class="nick" style="color:#2e2a4a"><a href="#234411" label="[23:44:11]">&lt;OriansJ&gt;</a></span><span class="message">The idea is envp becomes a list with 2 pointers to char* the variable and its value. The arguments just become a list which variable replacement occurs upon prior to execution.</span></div><div class="line" id="234436"><span class="nick" style="color:#2e2a4a"><a href="#234436" label="[23:44:36]">&lt;OriansJ&gt;</a></span><span class="message">with both lists becoming arrays just prior to execution</span></div><div class="line" id="234455"><span class="nick" style="color:#8dd3c7"><a href="#234455" label="[23:44:55]">&lt;fossy&gt;</a></span><span class="message">Which part of that does not currently occur?</span></div><div class="line" id="234534"><span class="nick" style="color:#2e2a4a"><a href="#234534" label="[23:45:34]">&lt;OriansJ&gt;</a></span><span class="message">fossy: well the variable replacement only occurs once instead of everytime</span></div><div class="line" id="234603"><span class="nick" style="color:#8dd3c7"><a href="#234603" label="[23:46:03]">&lt;fossy&gt;</a></span><span class="message">dddddd: I also am not very used to doing review by IRC, ive almost always done it via github/gitea, so it will take me some getting used to</span></div><div class="line" id="234638"><span class="nick" style="color:#8dd3c7"><a href="#234638" label="[23:46:38]">&lt;fossy&gt;</a></span><span class="message">OriansJ: Sorry, I still dont follow... when are you saying the variable replacement should occur?</span></div><div class="line" id="234644"><span class="nick" style="color:#8dd3c7"><a href="#234644" label="[23:46:44]">&lt;fossy&gt;</a></span><span class="message">Everytime what?</span></div><div class="line" id="234726"><span class="nick" style="color:#2e2a4a"><a href="#234726" label="[23:47:26]">&lt;OriansJ&gt;</a></span><span class="message">fossy: if a string has 4+ variables in it all 4+ should be replaced</span></div><div class="line" id="234732"><span class="nick" style="color:#2e2a4a"><a href="#234732" label="[23:47:32]">&lt;OriansJ&gt;</a></span><span class="message">not just the first</span></div><div class="line" id="234736"><span class="nick" style="color:#8dd3c7"><a href="#234736" label="[23:47:36]">&lt;fossy&gt;</a></span><span class="message">Ah</span></div><div class="line" id="234746"><span class="nick" style="color:#8dd3c7"><a href="#234746" label="[23:47:46]">&lt;fossy&gt;</a></span><span class="message">As I said earlier, that is not a goal in this refactor</span></div><div class="line" id="234750"><span class="nick" style="color:#8dd3c7"><a href="#234750" label="[23:47:50]">&lt;fossy&gt;</a></span><span class="message">I am very aware of that</span></div><div class="line" id="234821"><span class="nick" style="color:#8dd3c7"><a href="#234821" label="[23:48:21]">&lt;fossy&gt;</a></span><span class="message">But, variable support is currently minimal, and I would prefer to address that in the near future, but not right now</span></div><div class="line" id="234844"><span class="nick" style="color:#2e2a4a"><a href="#234844" label="[23:48:44]">&lt;OriansJ&gt;</a></span><span class="message">understandably</span></div><div class="line" id="234858"><span class="nick" style="color:#8dd3c7"><a href="#234858" label="[23:48:58]">&lt;fossy&gt;</a></span><span class="message">I will put that in a TODO comment, then</span></div><div class="line" id="234904"><span class="nick" style="color:#2e2a4a"><a href="#234904" label="[23:49:04]">&lt;OriansJ&gt;</a></span><span class="message">but it should be on your future TODO list as it will trip up people</span></div><div class="line" id="234910"><span class="nick" style="color:#8dd3c7"><a href="#234910" label="[23:49:10]">&lt;fossy&gt;</a></span><span class="message">So we do not forget</span></div><div class="line" id="234914"><span class="nick" style="color:#2e2a4a"><a href="#234914" label="[23:49:14]">&lt;OriansJ&gt;</a></span><span class="message">indeed</span></div><div class="line" id="234947"><span class="nick" style="color:#2e2a4a"><a href="#234947" label="[23:49:47]">&lt;OriansJ&gt;</a></span><span class="message">collect_token, shouldn't allocate a token until the end</span></div><div class="line" id="235001"><span class="nick" style="color:#8dd3c7"><a href="#235001" label="[23:50:01]">&lt;fossy&gt;</a></span><span class="message">Maybe, a CAVEATS file is in order?</span></div><div class="line" id="235035"><span class="nick" style="color:#2e2a4a"><a href="#235035" label="[23:50:35]">&lt;OriansJ&gt;</a></span><span class="message">fossy: no, correctness is always the first goal</span></div><div class="line" id="235129"><span class="nick" style="color:#8dd3c7"><a href="#235129" label="[23:51:29]">&lt;fossy&gt;</a></span><span class="message">It certinaly is.</span></div><div class="line" id="235134"><span class="nick" style="color:#2e2a4a"><a href="#235134" label="[23:51:34]">&lt;OriansJ&gt;</a></span><span class="message">postpend_char should never be in loops</span></div><div class="line" id="235134"><span class="nick" style="color:#8dd3c7"><a href="#235134" label="[23:51:34]">&lt;fossy&gt;</a></span><span class="message">But I mean for things like this</span></div><div class="line" id="235143"><span class="nick" style="color:#8dd3c7"><a href="#235143" label="[23:51:43]">&lt;fossy&gt;</a></span><span class="message">Where we only currently support one variable</span></div><div class="line" id="235153"><span class="nick" style="color:#8dd3c7"><a href="#235153" label="[23:51:53]">&lt;fossy&gt;</a></span><span class="message">oh sorry I was referencing variables not postpend char</span></div><div class="line" id="235203"><span class="nick" style="color:#2e2a4a"><a href="#235203" label="[23:52:03]">&lt;OriansJ&gt;</a></span><span class="message">I'd rather have no variable support than wrong variable support</span></div><div class="line" id="235212"><span class="nick" style="color:#8dd3c7"><a href="#235212" label="[23:52:12]">&lt;fossy&gt;</a></span><span class="message">I will do that before push, removing all postpend_char from loops</span></div><div class="line" id="235309"><span class="nick" style="color:#8dd3c7"><a href="#235309" label="[23:53:09]">&lt;fossy&gt;</a></span><span class="message">OriansJ: so you would prefer no variables substituted rather then one variable substituted?</span></div><div class="line" id="235345"><span class="nick" style="color:#2e2a4a"><a href="#235345" label="[23:53:45]">&lt;OriansJ&gt;</a></span><span class="message">fossy: I'd rather we did variable substitution correct</span></div><div class="line" id="235348"><span class="nick" style="color:#389600"><a href="#235348" label="[23:53:48]">&lt;dddddd&gt;</a></span><span class="message">+1 no broken features. Even more, if it's really a refactor there should be not changes in behavior at all (but I guess that's the &quot;improvements&quot; added part)</span></div><div class="line" id="235349"><span class="nick" style="color:#8dd3c7"><a href="#235349" label="[23:53:49]">&lt;fossy&gt;</a></span><span class="message">do you feel that multiple variables in a token is important enough to block the pushing of this until I implement that? If so thats fine</span></div><div class="line" id="235401"><span class="nick" style="color:#2e2a4a"><a href="#235401" label="[23:54:01]">&lt;OriansJ&gt;</a></span><span class="message">but pushing half-broken pieces just isn't a good idea</span></div><div class="line" id="235408"><span class="nick" style="color:#8dd3c7"><a href="#235408" label="[23:54:08]">&lt;fossy&gt;</a></span><span class="message">fair enough.</span></div><div class="line" id="235415"><span class="nick" style="color:#8dd3c7"><a href="#235415" label="[23:54:15]">&lt;fossy&gt;</a></span><span class="message">I will do that before push</span></div><div class="line" id="235419"><span class="nick" style="color:#8dd3c7"><a href="#235419" label="[23:54:19]">&lt;fossy&gt;</a></span><span class="message">So, two things</span></div><div class="line" id="235429"><span class="nick" style="color:#8dd3c7"><a href="#235429" label="[23:54:29]">&lt;fossy&gt;</a></span><span class="message">1. Remove postpend char from loops</span></div><div class="line" id="235449"><span class="nick" style="color:#8dd3c7"><a href="#235449" label="[23:54:49]">&lt;fossy&gt;</a></span><span class="message">2. Make variable substitution support multiple variables</span></div><div class="line" id="235455"><span class="nick" style="color:#8dd3c7"><a href="#235455" label="[23:54:55]">&lt;fossy&gt;</a></span><span class="message">anything else?</span></div><div class="line" id="235506"><span class="nick" style="color:#2e2a4a"><a href="#235506" label="[23:55:06]">&lt;OriansJ&gt;</a></span><span class="message">3. Remove any functions that are not used.</span></div><div class="line" id="235513"><span class="nick" style="color:#389600"><a href="#235513" label="[23:55:13]">&lt;dddddd&gt;</a></span><span class="message">Is postpend_char-in-loop a bug or just a question of speed?</span></div><div class="line" id="235517"><span class="nick" style="color:#8dd3c7"><a href="#235517" label="[23:55:17]">&lt;fossy&gt;</a></span><span class="message">+1</span></div><div class="line" id="235527"><span class="nick" style="color:#8dd3c7"><a href="#235527" label="[23:55:27]">&lt;fossy&gt;</a></span><span class="message">dddddd: I think its for memory allocation reasons</span></div><div class="line" id="235547"><span class="nick" style="color:#8dd3c7"><a href="#235547" label="[23:55:47]">&lt;fossy&gt;</a></span><span class="message">postpend_char makes a calloc each time, iirc</span></div><div class="line" id="235554"><span class="nick" style="color:#2e2a4a"><a href="#235554" label="[23:55:54]">&lt;OriansJ&gt;</a></span><span class="message">postpend_char allocates a max_string on every iteration and writes the whole string everytime</span></div><div class="line" id="235636"><span class="nick" style="color:#2e2a4a"><a href="#235636" label="[23:56:36]">&lt;OriansJ&gt;</a></span><span class="message">So the memory becomes O(M*n) and processing becomes O(n^2)</span></div><div class="line" id="235652"><span class="nick" style="color:#2e2a4a"><a href="#235652" label="[23:56:52]">&lt;OriansJ&gt;</a></span><span class="message">for a O(n) and O(n) operation</span></div><div class="line" id="235703"><span class="nick" style="color:#8dd3c7"><a href="#235703" label="[23:57:03]">&lt;fossy&gt;</a></span><span class="message">Right</span></div><div class="line" id="235721"><span class="nick" style="color:#8dd3c7"><a href="#235721" label="[23:57:21]">&lt;fossy&gt;</a></span><span class="message">how about prepend_string? same issue?</span></div><div class="line" id="235723"><span class="nick" style="color:#8dd3c7"><a href="#235723" label="[23:57:23]">&lt;fossy&gt;</a></span><span class="message">or not?</span></div><div class="line" id="235745"><span class="nick" style="color:#2e2a4a"><a href="#235745" label="[23:57:45]">&lt;OriansJ&gt;</a></span><span class="message">prepend_string does not appear to be in any of your loops fossy</span></div><div class="line" id="235809"><span class="nick" style="color:#8dd3c7"><a href="#235809" label="[23:58:09]">&lt;fossy&gt;</a></span><span class="message">No it isnt, just out of interest</span></div><div class="line" id="235851"><span class="nick" style="color:#2e2a4a"><a href="#235851" label="[23:58:51]">&lt;OriansJ&gt;</a></span><span class="message">but it should only be used to combine 2 completed strings and only in a loop if you are combining alot of completed strings together</span></div><div class="line" id="235933"><span class="nick" style="color:#8dd3c7"><a href="#235933" label="[23:59:33]">&lt;fossy&gt;</a></span><span class="message">Right</span></div><div class="line" id="235952"><span class="nick" style="color:#8dd3c7"><a href="#235952" label="[23:59:52]">&lt;fossy&gt;</a></span><span class="message">OK, got that noted down.</span></div><br /></div></body></html>