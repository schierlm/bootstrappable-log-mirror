<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-02-24.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="005016"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado</span></div><div class="line" id="013901"><span class="nick" style="color:#8dd3c7"><a href="#013901" label="[01:39:01]">&lt;stikonas&gt;</a></span><span class="message">pder: so I think we'll be stuck with autoconf 2.52 or lower for a while...</span></div><div class="line" id="013911"><span class="nick" style="color:#8dd3c7"><a href="#013911" label="[01:39:11]">&lt;stikonas&gt;</a></span><span class="message">hopefully you can get binutils working with it</span></div><div class="line" id="014112"><span class="nick" style="color:#8dd3c7"><a href="#014112" label="[01:41:12]">&lt;stikonas&gt;</a></span><span class="message">regarding perl, we might be able to build a sligtly better perl with modules manually...</span></div><div class="line" id="014117"><span class="nick" style="color:#8dd3c7"><a href="#014117" label="[01:41:17]">&lt;stikonas&gt;</a></span><span class="message">without using Configure script</span></div><div class="line" id="014132"><span class="nick" style="color:#8dd3c7"><a href="#014132" label="[01:41:32]">&lt;stikonas&gt;</a></span><span class="message">but that's a bit of extra work</span></div><div class="line" id="014147"><span class="nick" style="color:#8dd3c7"><a href="#014147" label="[01:41:47]">&lt;stikonas&gt;</a></span><span class="message">and Configure script will probably not work with tcc anyway</span></div><div class="line" id="024926"><span class="nick" style="color:#8dd3c7"><a href="#024926" label="[02:49:26]">&lt;stikonas&gt;</a></span><span class="message">fossy: so I opened PR for perl 5.6.2 (<a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/48">https://github.com/fosslinux/live-bootstrap/pull/48</a>).  It doesn't seem any worse than 5.5 even though I couldn't bootstrap 5.18 with it...</span></div><div class="line" id="031327"><span class="nick" style="color:#2e2a4a"><a href="#031327" label="[03:13:27]">&lt;OriansJ&gt;</a></span><span class="message">it might not be a small command but it certainly is nice to depend on a single libc: M2-Planet -f M2libc/sys/types.h -f M2libc/stddef.h -f M2libc/string.c -f M2libc/knight/Linux/fcntl.h -f M2libc/knight/Linux/unistd.h -f M2libc/stdlib.c -f M2libc/stdio.c -f M2libc/bootstrappable.c -f M1-macro.c --architecture knight-posix</span></div><div class="line" id="032607"><span class="nick" style="color:#6b8072"><a href="#032607" label="[03:26:07]">&lt;Hagfish&gt;</a></span><span class="message">so there's no nice way for it to find those files itself?</span></div><div class="line" id="032646"><span class="nick" style="color:#2e2a4a"><a href="#032646" label="[03:26:46]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: not without a kernel+file-system</span></div><div class="line" id="032705"><span class="nick" style="color:#2e2a4a"><a href="#032705" label="[03:27:05]">&lt;OriansJ&gt;</a></span><span class="message">And M2-Planet isn't allowed to assume a kernel nor file system</span></div><div class="line" id="032720"><span class="nick" style="color:#6b8072"><a href="#032720" label="[03:27:20]">&lt;Hagfish&gt;</a></span><span class="message">i'm struggling to imagine what sort of world exists without a kernel or file system</span></div><div class="line" id="032736"><span class="nick" style="color:#6b8072"><a href="#032736" label="[03:27:36]">&lt;Hagfish&gt;</a></span><span class="message">no syscalls, i guess?</span></div><div class="line" id="032737"><span class="nick" style="color:#2e2a4a"><a href="#032737" label="[03:27:37]">&lt;OriansJ&gt;</a></span><span class="message">As it is supposed to be able to function to enable the bootstrapping of the first trusted kernel</span></div><div class="line" id="032747"><span class="nick" style="color:#6b8072"><a href="#032747" label="[03:27:47]">&lt;Hagfish&gt;</a></span><span class="message">yeah, that's a cool design goal</span></div><div class="line" id="032845"><span class="nick" style="color:#6b8072"><a href="#032845" label="[03:28:45]">&lt;Hagfish&gt;</a></span><span class="message">what is the first step that requires a kernel (and how simple a kernel would be sufficient)?</span></div><div class="line" id="032946"><span class="nick" style="color:#2e2a4a"><a href="#032946" label="[03:29:46]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: it also makes for some really ugly code <a rel="nofollow" href="https://github.com/oriansj/M2libc/blob/main/knight/Native/unistd.h#L63">https://github.com/oriansj/M2libc/blob/main/knight/Native/unistd.h#L63</a> </span></div><div class="line" id="033051"><span class="nick" style="color:#2e2a4a"><a href="#033051" label="[03:30:51]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: well the first step that absolutely *MUST* have a kernel is MesCC</span></div><div class="line" id="033140"><span class="nick" style="color:#2e2a4a"><a href="#033140" label="[03:31:40]">&lt;OriansJ&gt;</a></span><span class="message">The requirement for Environment variables and a File system can't be done without a kernel (unless you want to convert mes.c into a unikernel)</span></div><div class="line" id="033314"><span class="nick" style="color:#6b8072"><a href="#033314" label="[03:33:14]">&lt;Hagfish&gt;</a></span><span class="message">there are people out there who write minimal kernels for fun</span></div><div class="line" id="033327"><span class="nick" style="color:#6b8072"><a href="#033327" label="[03:33:27]">&lt;Hagfish&gt;</a></span><span class="message">i would hope that at least one of them would see the value of this project</span></div><div class="line" id="033328"><span class="nick" style="color:#2e2a4a"><a href="#033328" label="[03:33:28]">&lt;OriansJ&gt;</a></span><span class="message">yeah like bauen1</span></div><div class="line" id="033349"><span class="nick" style="color:#6b8072"><a href="#033349" label="[03:33:49]">&lt;Hagfish&gt;</a></span><span class="message">i guess it's a question of what other interesting things they've got to work on</span></div><div class="line" id="033413"><span class="nick" style="color:#6b8072"><a href="#033413" label="[03:34:13]">&lt;Hagfish&gt;</a></span><span class="message">but it does feel inevitable that someone (either in this channel or new) will have a go at this sort of challenge eventually</span></div><div class="line" id="033455"><span class="nick" style="color:#2e2a4a"><a href="#033455" label="[03:34:55]">&lt;OriansJ&gt;</a></span><span class="message">Well getting a Minimal kernel that TCC could compile is a rather straight-forward task. Getting M2-Planet buildable kernel would require a deeper level of work</span></div><div class="line" id="033536"><span class="nick" style="color:#2e2a4a"><a href="#033536" label="[03:35:36]">&lt;OriansJ&gt;</a></span><span class="message">I could do it if needed</span></div><div class="line" id="033537"><span class="nick" style="color:#6b8072"><a href="#033537" label="[03:35:37]">&lt;Hagfish&gt;</a></span><span class="message">hmm, yeah, tcc-compileable seems a modest goal</span></div><div class="line" id="033601"><span class="nick" style="color:#2e2a4a"><a href="#033601" label="[03:36:01]">&lt;OriansJ&gt;</a></span><span class="message">but I am hoping that someone beats me to it first</span></div><div class="line" id="033619"><span class="nick" style="color:#2e2a4a"><a href="#033619" label="[03:36:19]">&lt;OriansJ&gt;</a></span><span class="message">So I can skip the 3-6months of work required.</span></div><div class="line" id="033655"><span class="nick" style="color:#6b8072"><a href="#033655" label="[03:36:55]">&lt;Hagfish&gt;</a></span><span class="message">yeah, i'm hoping there are enough breadcrumbs lying around that someone will start following them and pick off some of the remaining tasks</span></div><div class="line" id="033715"><span class="nick" style="color:#2e2a4a"><a href="#033715" label="[03:37:15]">&lt;OriansJ&gt;</a></span><span class="message">One only needs to support a small handful of syscalls and single tasking</span></div><div class="line" id="033729"><span class="nick" style="color:#6b8072"><a href="#033729" label="[03:37:29]">&lt;Hagfish&gt;</a></span><span class="message">right, good point</span></div><div class="line" id="033803"><span class="nick" style="color:#2e2a4a"><a href="#033803" label="[03:38:03]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: also there is a huge set of work to do with CPM/DOS porting, Hardware porting and Libre-Hardware work as well</span></div><div class="line" id="033804"><span class="nick" style="color:#6b8072"><a href="#033804" label="[03:38:04]">&lt;Hagfish&gt;</a></span><span class="message">we might be like the GNU project, waiting for our Linus to come along :)</span></div><div class="line" id="033837"><span class="nick" style="color:#6b8072"><a href="#033837" label="[03:38:37]">&lt;Hagfish&gt;</a></span><span class="message">yeah, hopefully some of the lower level stuff, and the porting work, parallelises well</span></div><div class="line" id="033854"><span class="nick" style="color:#2e2a4a"><a href="#033854" label="[03:38:54]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: it absolutely does.</span></div><div class="line" id="033958"><span class="nick" style="color:#2e2a4a"><a href="#033958" label="[03:39:58]">&lt;OriansJ&gt;</a></span><span class="message">Porting is getting M1/Hex2 working and then just adding the primitives required to M2-Planet. Full bootstrap port involves the writing of multiple independent pieces</span></div><div class="line" id="034007"><span class="nick" style="color:#6b8072"><a href="#034007" label="[03:40:07]">&lt;Hagfish&gt;</a></span><span class="message">the gravitational attraction to this work should increase with the amount of work that's already done</span></div><div class="line" id="034032"><span class="nick" style="color:#2e2a4a"><a href="#034032" label="[03:40:32]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: certainly much more people now than when we started in 2016</span></div><div class="line" id="034054"><span class="nick" style="color:#6b8072"><a href="#034054" label="[03:40:54]">&lt;Hagfish&gt;</a></span><span class="message">people shouldn't be too motivated by fame, but the more we have to show people, the more it will grab people's attention</span></div><div class="line" id="034110"><span class="nick" style="color:#2e2a4a"><a href="#034110" label="[03:41:10]">&lt;OriansJ&gt;</a></span><span class="message">Then it was just me and janneke (with rekado_ and rain1 sometimes)</span></div><div class="line" id="034129"><span class="nick" style="color:#6b8072"><a href="#034129" label="[03:41:29]">&lt;Hagfish&gt;</a></span><span class="message">each individual step is a marvel in itself, but seeing it fit together is more than the sum of its parts</span></div><div class="line" id="034303"><span class="nick" style="color:#2e2a4a"><a href="#034303" label="[03:43:03]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: with a plan which exceeds down to individual transistors and up to full Distros</span></div><div class="line" id="034316"><span class="nick" style="color:#2e2a4a"><a href="#034316" label="[03:43:16]">&lt;OriansJ&gt;</a></span><span class="message">^exceeds^extends^</span></div><div class="line" id="034330"><span class="nick" style="color:#6b8072"><a href="#034330" label="[03:43:30]">&lt;Hagfish&gt;</a></span><span class="message">oh, i was thinking the other day</span></div><div class="line" id="034350"><span class="nick" style="color:#6b8072"><a href="#034350" label="[03:43:50]">&lt;Hagfish&gt;</a></span><span class="message">there are sort of &quot;canonical&quot; pieces of software that you port to a new type of machine</span></div><div class="line" id="034357"><span class="nick" style="color:#6b8072"><a href="#034357" label="[03:43:57]">&lt;Hagfish&gt;</a></span><span class="message">like tetris, or doom</span></div><div class="line" id="034419"><span class="nick" style="color:#6b8072"><a href="#034419" label="[03:44:19]">&lt;Hagfish&gt;</a></span><span class="message">i wonder if some of the bootstrapping stages will come to be seen as &quot;canonical&quot;</span></div><div class="line" id="034443"><span class="nick" style="color:#6b8072"><a href="#034443" label="[03:44:43]">&lt;Hagfish&gt;</a></span><span class="message">like the first thing you do when hand-wiring your own CPU is see if it can generate the same hashes as other machines running the bootstrap process</span></div><div class="line" id="034528"><span class="nick" style="color:#6b8072"><a href="#034528" label="[03:45:28]">&lt;Hagfish&gt;</a></span><span class="message">people might start to share pictures of their 7-segment display outputs showing some &quot;famous&quot; hash that people end up memorising</span></div><div class="line" id="034708"><span class="nick" style="color:#2e2a4a"><a href="#034708" label="[03:47:08]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: well I would want hash mismatches to be a flag of something interesting on new bootstraps.</span></div><div class="line" id="034749"><span class="nick" style="color:#2e2a4a"><a href="#034749" label="[03:47:49]">&lt;OriansJ&gt;</a></span><span class="message">but sub-200 byte bootstrap binaries certainly would fit on business cards</span></div><div class="line" id="034757"><span class="nick" style="color:#6b8072"><a href="#034757" label="[03:47:57]">&lt;Hagfish&gt;</a></span><span class="message">ooh, merch!</span></div><div class="line" id="034804"><span class="nick" style="color:#2e2a4a"><a href="#034804" label="[03:48:04]">&lt;OriansJ&gt;</a></span><span class="message">or QR-codes or shirts</span></div><div class="line" id="034807"><span class="nick" style="color:#6b8072"><a href="#034807" label="[03:48:07]">&lt;Hagfish&gt;</a></span><span class="message">yeah</span></div><div class="line" id="034822"><span class="nick" style="color:#6b8072"><a href="#034822" label="[03:48:22]">&lt;Hagfish&gt;</a></span><span class="message">bootstrap binary on the front, hash of the outputs on the back</span></div><div class="line" id="034837"><span class="nick" style="color:#2e2a4a"><a href="#034837" label="[03:48:37]">&lt;OriansJ&gt;</a></span><span class="message">need a proper logo</span></div><div class="line" id="034841"><span class="nick" style="color:#6b8072"><a href="#034841" label="[03:48:41]">&lt;Hagfish&gt;</a></span><span class="message">at sub-200 bytes, people could memorise them</span></div><div class="line" id="034907"><span class="nick" style="color:#6b8072"><a href="#034907" label="[03:49:07]">&lt;Hagfish&gt;</a></span><span class="message">the logo would depict a bootstrap, right?</span></div><div class="line" id="034926"><span class="nick" style="color:#2e2a4a"><a href="#034926" label="[03:49:26]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: or something just cool</span></div><div class="line" id="034929"><span class="nick" style="color:#6b8072"><a href="#034929" label="[03:49:29]">&lt;Hagfish&gt;</a></span><span class="message">sure</span></div><div class="line" id="034944"><span class="nick" style="color:#6b8072"><a href="#034944" label="[03:49:44]">&lt;Hagfish&gt;</a></span><span class="message">a tower, or something</span></div><div class="line" id="034947"><span class="nick" style="color:#6b8072"><a href="#034947" label="[03:49:47]">&lt;Hagfish&gt;</a></span><span class="message">turtles?</span></div><div class="line" id="035019"><span class="nick" style="color:#2e2a4a"><a href="#035019" label="[03:50:19]">&lt;OriansJ&gt;</a></span><span class="message">I'd probably have to find an artist to help get a good idea.</span></div><div class="line" id="035102"><span class="nick" style="color:#6b8072"><a href="#035102" label="[03:51:02]">&lt;Hagfish&gt;</a></span><span class="message">yeah, i think often projects try to crowd-source good ideas, then maybe give a shortlist of ideas to designers (who can then produce a few different visual interpretations)</span></div><div class="line" id="035105"><span class="nick" style="color:#2e2a4a"><a href="#035105" label="[03:51:05]">&lt;OriansJ&gt;</a></span><span class="message">Personally I think of the lower levels like making a piece of art out of colored pieces of sand.</span></div><div class="line" id="035132"><span class="nick" style="color:#6b8072"><a href="#035132" label="[03:51:32]">&lt;Hagfish&gt;</a></span><span class="message">you make me think of the xkcd comic about the rocks in the desert</span></div><div class="line" id="035201"><span class="nick" style="color:#2e2a4a"><a href="#035201" label="[03:52:01]">&lt;OriansJ&gt;</a></span><span class="message">except the pieces get bigger and more impressive and easier to use</span></div><div class="line" id="035207"><span class="nick" style="color:#6b8072"><a href="#035207" label="[03:52:07]">&lt;Hagfish&gt;</a></span><span class="message">right</span></div><div class="line" id="035212"><span class="nick" style="color:#6b8072"><a href="#035212" label="[03:52:12]">&lt;Hagfish&gt;</a></span><span class="message">does the sand represent silicon?</span></div><div class="line" id="035257"><span class="nick" style="color:#2e2a4a"><a href="#035257" label="[03:52:57]">&lt;OriansJ&gt;</a></span><span class="message">individual nybbles to create bytes; which become instructions and data blocks to become the first hex programs</span></div><div class="line" id="035328"><span class="nick" style="color:#6b8072"><a href="#035328" label="[03:53:28]">&lt;Hagfish&gt;</a></span><span class="message">maybe a logo could be an hour glass, with sand at the top, and binary at the bottom, representing &quot;we'll get there eventually&quot; :)</span></div><div class="line" id="035352"><span class="nick" style="color:#6b8072"><a href="#035352" label="[03:53:52]">&lt;Hagfish&gt;</a></span><span class="message">but yeah, the incremental stepping up would be nice to capture</span></div><div class="line" id="035358"><span class="nick" style="color:#6b8072"><a href="#035358" label="[03:53:58]">&lt;Hagfish&gt;</a></span><span class="message">like an inverted pyramid?</span></div><div class="line" id="035405"><span class="nick" style="color:#6b8072"><a href="#035405" label="[03:54:05]">&lt;Hagfish&gt;</a></span><span class="message">that might be a bit too illuminati :)</span></div><div class="line" id="035430"><span class="nick" style="color:#2e2a4a"><a href="#035430" label="[03:54:30]">&lt;OriansJ&gt;</a></span><span class="message">but yes, one could do big clunky relays, then shrinking vacuum tubes and transistors, until sand and then a hex block and then assembly and then C code</span></div><div class="line" id="035535"><span class="nick" style="color:#6b8072"><a href="#035535" label="[03:55:35]">&lt;Hagfish&gt;</a></span><span class="message">i feel like a logo should be recognisable at, say, 8x8 pixels</span></div><div class="line" id="035707"><span class="nick" style="color:#2e2a4a"><a href="#035707" label="[03:57:07]">&lt;OriansJ&gt;</a></span><span class="message">not a detail I am even thinking about this minute but certainly a problem for someone wanting to make some money off bootstrapping</span></div><div class="line" id="035757"><span class="nick" style="color:#2e2a4a"><a href="#035757" label="[03:57:57]">&lt;OriansJ&gt;</a></span><span class="message">But one can get creative with bootstripping with an attractive person pretty easily</span></div><div class="line" id="035800"><span class="nick" style="color:#6b8072"><a href="#035800" label="[03:58:00]">&lt;Hagfish&gt;</a></span><span class="message">merch could be a way to support the project, if funding was a bottleneck (and an intermittent source of funding were a solution)</span></div><div class="line" id="035852"><span class="nick" style="color:#6b8072"><a href="#035852" label="[03:58:52]">&lt;Hagfish&gt;</a></span><span class="message">Only Fans And Liquid Cooling?</span></div><div class="line" id="035911"><span class="nick" style="color:#2e2a4a"><a href="#035911" label="[03:59:11]">&lt;OriansJ&gt;</a></span><span class="message">well right now janneke is funded by NLnet and I'm a Full time employee for the State of Michigan.</span></div><div class="line" id="035954"><span class="nick" style="color:#2e2a4a"><a href="#035954" label="[03:59:54]">&lt;OriansJ&gt;</a></span><span class="message">So any funding would be to encourage the addition of more developers or close the problems that are biggest for members of the community</span></div><div class="line" id="040030"><span class="nick" style="color:#6b8072"><a href="#040030" label="[04:00:30]">&lt;Hagfish&gt;</a></span><span class="message">if a pot of money were to be generated, it would probably be best applied as bounties for specific issues or tasks</span></div><div class="line" id="040156"><span class="nick" style="color:#6b8072"><a href="#040156" label="[04:01:56]">&lt;Hagfish&gt;</a></span><span class="message">that can be a dual edged sword, though, of discouraging non-paid work, and encouraging people to technically fully the requirement but produce something that isn't really suitable</span></div><div class="line" id="040210"><span class="nick" style="color:#6b8072"><a href="#040210" label="[04:02:10]">&lt;Hagfish&gt;</a></span><span class="message">*technically fulfil</span></div><div class="line" id="040400"><span class="nick" style="color:#2e2a4a"><a href="#040400" label="[04:04:00]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: hence why we haven't done it yet. It doesn't seem like it would be worth the effort nor its cost.</span></div><div class="line" id="040625"><span class="nick" style="color:#6b8072"><a href="#040625" label="[04:06:25]">&lt;Hagfish&gt;</a></span><span class="message">are there examples of financial grants given for important past work that was done for free?</span></div><div class="line" id="040639"><span class="nick" style="color:#6b8072"><a href="#040639" label="[04:06:39]">&lt;Hagfish&gt;</a></span><span class="message">i believe Linus and RMS shared one for GNU/Linux</span></div><div class="line" id="040657"><span class="nick" style="color:#2e2a4a"><a href="#040657" label="[04:06:57]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: probably</span></div><div class="line" id="040708"><span class="nick" style="color:#6b8072"><a href="#040708" label="[04:07:08]">&lt;Hagfish&gt;</a></span><span class="message">a Nobel Prize is sort of that</span></div><div class="line" id="042730"><span class="nick" style="color:#2e2a4a"><a href="#042730" label="[04:27:30]">&lt;OriansJ&gt;</a></span><span class="message">and here I am just thinking about wtf strstr is in string.h</span></div><div class="line" id="045557"><span class="nick" style="color:#2e2a4a"><a href="#045557" label="[04:55:57]">&lt;OriansJ&gt;</a></span><span class="message">and now kaem: M2-Planet -f M2libc/sys/types.h -f M2libc/stddef.h -f M2libc/string.c -f M2libc/knight/Linux/fcntl.h -f M2libc/knight/Linux/unistd.h -f M2libc/stdlib.c -f M2libc/stdio.c -f M2libc/bootstrappable.c -f Kaem/kaem.h -f Kaem/kaem_globals.c -f Kaem/kaem.c -f Kaem/variable.c --architecture knight-posix</span></div><div class="line" id="045844"><span class="nick" style="color:#2e2a4a"><a href="#045844" label="[04:58:44]">&lt;OriansJ&gt;</a></span><span class="message">mescc-tools is now M2libc C standard without any need for custom functions</span></div><div class="line" id="050200"><span class="nick" style="color:#2e2a4a"><a href="#050200" label="[05:02:00]">&lt;OriansJ&gt;</a></span><span class="message">up next is M2-Planet but I need to get some sleep.</span></div><div class="line" id="050608"><span class="nick" style="color:#80b1d3"><a href="#050608" label="[05:06:08]">&lt;pabs3&gt;</a></span><span class="message">is the admin of <a rel="nofollow" href="https://bootstrapping.miraheze.org/wiki/">https://bootstrapping.miraheze.org/wiki/</a>  here? I'd like to be able to clone it using git-mediawiki, but the API appears to be disabled</span></div><div class="line" id="131408"><span class="nick" style="color:#2e2a4a"><a href="#131408" label="[13:14:08]">&lt;OriansJ&gt;</a></span><span class="message">pabs3: that would be rain1 and they do sometimes show up here.</span></div><div class="line" id="132942"><span class="nick" style="color:#2e2a4a"><a href="#132942" label="[13:29:42]">&lt;OriansJ&gt;</a></span><span class="message">I just remember I forgot to tell siraben how to cheat build systems: <a rel="nofollow" href="https://bootstrapping.miraheze.org/wiki/Build_Systems">https://bootstrapping.miraheze.org/wiki/Build_Systems</a>  see fac</span></div><div class="line" id="133701"><span class="nick" style="color:#6d2462"><a href="#133701" label="[13:37:01]">&lt;siraben&gt;</a></span><span class="message">OriansJ: Very nice.</span></div><div class="line" id="133719"><span class="nick" style="color:#6d2462"><a href="#133719" label="[13:37:19]">&lt;siraben&gt;</a></span><span class="message">Well build systems are simple in comparison to compilers right? Like a glorified shell script with topological sorting.</span></div><div class="line" id="140711"><span class="nick" style="color:#8dd3c7"><a href="#140711" label="[14:07:11]">&lt;stikonas&gt;</a></span><span class="message">for GNU Make I also wrote kaem script... Make is so simple to build, that it's good to have it before shell</span></div><div class="line" id="140810"><span class="nick" style="color:#8dd3c7"><a href="#140810" label="[14:08:10]">&lt;stikonas&gt;</a></span><span class="message">but yeah, I also think that build systems are much simpler in comparison to compilers...</span></div><div class="line" id="140850"><span class="nick" style="color:#8dd3c7"><a href="#140850" label="[14:08:50]">&lt;stikonas&gt;</a></span><span class="message">even if it depends on itself. it is usually quite simple to rewrite it in another build system</span></div><div class="line" id="150124"><span class="nick" style="color:#234e69"><a href="#150124" label="[15:01:24]">&lt;pder&gt;</a></span><span class="message">stikonas: nice job on getting perl 5.6 working.  Does that mean a newer autoconf is possible?  BTW, I did have a /tmp directory when I got that awk error, so I am not sure whats going on with it.</span></div><div class="line" id="150250"><span class="nick" style="color:#8dd3c7"><a href="#150250" label="[15:02:50]">&lt;stikonas&gt;</a></span><span class="message">pder: not yet</span></div><div class="line" id="150302"><span class="nick" style="color:#8dd3c7"><a href="#150302" label="[15:03:02]">&lt;stikonas&gt;</a></span><span class="message">pder: newer autoconf needs perl with extentions</span></div><div class="line" id="150315"><span class="nick" style="color:#8dd3c7"><a href="#150315" label="[15:03:15]">&lt;stikonas&gt;</a></span><span class="message">although, I might be able to build that for perl 5.6 withouth Configure</span></div><div class="line" id="150332"><span class="nick" style="color:#8dd3c7"><a href="#150332" label="[15:03:32]">&lt;stikonas&gt;</a></span><span class="message">pder: one option is to try to rebuild gawk with autotools/configure</span></div><div class="line" id="150344"><span class="nick" style="color:#8dd3c7"><a href="#150344" label="[15:03:44]">&lt;stikonas&gt;</a></span><span class="message">autoconf 2.52 works on gawk if I recall correctly</span></div><div class="line" id="150446"><span class="nick" style="color:#8dd3c7"><a href="#150446" label="[15:04:46]">&lt;stikonas&gt;</a></span><span class="message">pder: do we actually need those -J -j -z specifiers for tar?</span></div><div class="line" id="150504"><span class="nick" style="color:#8dd3c7"><a href="#150504" label="[15:05:04]">&lt;stikonas&gt;</a></span><span class="message">pder: and gawk doesn't even need automake</span></div><div class="line" id="150518"><span class="nick" style="color:#8dd3c7"><a href="#150518" label="[15:05:18]">&lt;stikonas&gt;</a></span><span class="message">so if you want to rebuild it, feel free to grab my autoconf commit</span></div><div class="line" id="150552"><span class="nick" style="color:#234e69"><a href="#150552" label="[15:05:52]">&lt;pder&gt;</a></span><span class="message">we have an ancient version of tar that doesnt support -j or -J.  That pull request fixes an issue with bzip2 failing on reading from stdin by rebuilding it with tcc-musl without any patches</span></div><div class="line" id="150555"><span class="nick" style="color:#8dd3c7"><a href="#150555" label="[15:05:55]">&lt;stikonas&gt;</a></span><span class="message">pder: but I think I also sometimes saw that error...</span></div><div class="line" id="150605"><span class="nick" style="color:#8dd3c7"><a href="#150605" label="[15:06:05]">&lt;stikonas&gt;</a></span><span class="message">maybe build newer tar?</span></div><div class="line" id="150617"><span class="nick" style="color:#8dd3c7"><a href="#150617" label="[15:06:17]">&lt;stikonas&gt;</a></span><span class="message">we should probably rebuild other mes libc stuff too</span></div><div class="line" id="150623"><span class="nick" style="color:#8dd3c7"><a href="#150623" label="[15:06:23]">&lt;stikonas&gt;</a></span><span class="message">sed, gzip...</span></div><div class="line" id="150645"><span class="nick" style="color:#234e69"><a href="#150645" label="[15:06:45]">&lt;pder&gt;</a></span><span class="message">I agree, maybe also xz if its not too hard?</span></div><div class="line" id="150647"><span class="nick" style="color:#8dd3c7"><a href="#150647" label="[15:06:47]">&lt;stikonas&gt;</a></span><span class="message">ancient tar also slightly struggles with some metadata with newer tarballs although that's not critical</span></div><div class="line" id="150654"><span class="nick" style="color:#8dd3c7"><a href="#150654" label="[15:06:54]">&lt;stikonas&gt;</a></span><span class="message">pder: xz is probably too hard</span></div><div class="line" id="150656"><span class="nick" style="color:#8dd3c7"><a href="#150656" label="[15:06:56]">&lt;stikonas&gt;</a></span><span class="message">i looked at it</span></div><div class="line" id="150714"><span class="nick" style="color:#8dd3c7"><a href="#150714" label="[15:07:14]">&lt;stikonas&gt;</a></span><span class="message">don't remember what was the problem though</span></div><div class="line" id="151032"><span class="nick" style="color:#8dd3c7"><a href="#151032" label="[15:10:32]">&lt;stikonas&gt;</a></span><span class="message">pder: by the way, how are binutils going on? Or have you not tried any more?</span></div><div class="line" id="151046"><span class="nick" style="color:#8dd3c7"><a href="#151046" label="[15:10:46]">&lt;stikonas&gt;</a></span><span class="message">we might want a rebuild after binutils</span></div><div class="line" id="151208"><span class="nick" style="color:#234e69"><a href="#151208" label="[15:12:08]">&lt;pder&gt;</a></span><span class="message">I have a method to getting it fully built using the configure script and patching about 3 things.  I'd like to know how to get it working without hacking generated files</span></div><div class="line" id="151352"><span class="nick" style="color:#8dd3c7"><a href="#151352" label="[15:13:52]">&lt;stikonas&gt;</a></span><span class="message">that's without autoconf for now?</span></div><div class="line" id="151410"><span class="nick" style="color:#8dd3c7"><a href="#151410" label="[15:14:10]">&lt;stikonas&gt;</a></span><span class="message">well, maybe I can take a look at some point later...</span></div><div class="line" id="151419"><span class="nick" style="color:#234e69"><a href="#151419" label="[15:14:19]">&lt;pder&gt;</a></span><span class="message">Yeah.  Not much success running autoconf in many of the directories</span></div><div class="line" id="151427"><span class="nick" style="color:#8dd3c7"><a href="#151427" label="[15:14:27]">&lt;stikonas&gt;</a></span><span class="message">yeah, I had same experience</span></div><div class="line" id="151437"><span class="nick" style="color:#8dd3c7"><a href="#151437" label="[15:14:37]">&lt;stikonas&gt;</a></span><span class="message">we might need older autoconf</span></div><div class="line" id="151441"><span class="nick" style="color:#8dd3c7"><a href="#151441" label="[15:14:41]">&lt;stikonas&gt;</a></span><span class="message">for some directories</span></div><div class="line" id="151529"><span class="nick" style="color:#234e69"><a href="#151529" label="[15:15:29]">&lt;pder&gt;</a></span><span class="message">Not sure if you saw that link I posted to an old version of Linux From Scratch that had a list of compatible versions of binutils autoconf and perl</span></div><div class="line" id="151623"><span class="nick" style="color:#8dd3c7"><a href="#151623" label="[15:16:23]">&lt;stikonas&gt;</a></span><span class="message"> I saw but I don't think they are rebuilding binutil's configure files</span></div><div class="line" id="151625"><span class="nick" style="color:#8dd3c7"><a href="#151625" label="[15:16:25]">&lt;stikonas&gt;</a></span><span class="message">or are they?</span></div><div class="line" id="151634"><span class="nick" style="color:#234e69"><a href="#151634" label="[15:16:34]">&lt;pder&gt;</a></span><span class="message">I can try to put something together for binutils that uses the configure script and we can fill in the autoconf steps when it is ready</span></div><div class="line" id="151644"><span class="nick" style="color:#8dd3c7"><a href="#151644" label="[15:16:44]">&lt;stikonas&gt;</a></span><span class="message">yeah...</span></div><div class="line" id="151648"><span class="nick" style="color:#8dd3c7"><a href="#151648" label="[15:16:48]">&lt;stikonas&gt;</a></span><span class="message">well, keep it in branch for now</span></div><div class="line" id="151651"><span class="nick" style="color:#8dd3c7"><a href="#151651" label="[15:16:51]">&lt;stikonas&gt;</a></span><span class="message">until it's ready</span></div><div class="line" id="151658"><span class="nick" style="color:#8dd3c7"><a href="#151658" label="[15:16:58]">&lt;stikonas&gt;</a></span><span class="message">but it will be easier to iterate on top of something</span></div><div class="line" id="151658"><span class="nick" style="color:#234e69"><a href="#151658" label="[15:16:58]">&lt;pder&gt;</a></span><span class="message">yeah</span></div><div class="line" id="151814"><span class="nick" style="color:#234e69"><a href="#151814" label="[15:18:14]">&lt;pder&gt;</a></span><span class="message">Thats a good point.  I am not sure if they rebuild configure scripts- probably not</span></div><div class="line" id="171107"><span class="nick" style="color:#6d2462"><a href="#171107" label="[17:11:07]">&lt;siraben&gt;</a></span><span class="message">stikonas: re: build systems, that's good to hear.</span></div><div class="line" id="172311"><span class="nick" style="color:#234e69"><a href="#172311" label="[17:23:11]">&lt;pder&gt;</a></span><span class="message">stikonas: I pushed a branch named binutils-wip if you want to play around with it.</span></div><div class="line" id="172606"><span class="nick" style="color:#8dd3c7"><a href="#172606" label="[17:26:06]">&lt;stikonas&gt;</a></span><span class="message">pder: thanks, I'll take a look a bit later</span></div><div class="line" id="172637"><span class="nick" style="color:#8dd3c7"><a href="#172637" label="[17:26:37]">&lt;stikonas&gt;</a></span><span class="message">you should clean some old  merged branches :D</span></div><div class="line" id="172843"><span class="nick" style="color:#8dd3c7"><a href="#172843" label="[17:28:43]">&lt;stikonas&gt;</a></span><span class="message">pder: instead of true in bzip2 build script you can just use :</span></div><div class="line" id="172922"><span class="nick" style="color:#234e69"><a href="#172922" label="[17:29:22]">&lt;pder&gt;</a></span><span class="message">ok, I didn't know what people preferred.  I will change it</span></div><div class="line" id="172928"><span class="nick" style="color:#8dd3c7"><a href="#172928" label="[17:29:28]">&lt;stikonas&gt;</a></span><span class="message">pder: by the way, are you sure you were not using busybox tar?</span></div><div class="line" id="172941"><span class="nick" style="color:#8dd3c7"><a href="#172941" label="[17:29:41]">&lt;stikonas&gt;</a></span><span class="message">regarding -J and -j</span></div><div class="line" id="173008"><span class="nick" style="color:#8dd3c7"><a href="#173008" label="[17:30:08]">&lt;stikonas&gt;</a></span><span class="message">we were already unpacking coreutils</span></div><div class="line" id="173013"><span class="nick" style="color:#8dd3c7"><a href="#173013" label="[17:30:13]">&lt;stikonas&gt;</a></span><span class="message">which is bz2 archive</span></div><div class="line" id="173018"><span class="nick" style="color:#234e69"><a href="#173018" label="[17:30:18]">&lt;pder&gt;</a></span><span class="message">I think busybox tar supports -j and -J.  GNU tar 1.12 does not</span></div><div class="line" id="173038"><span class="nick" style="color:#8dd3c7"><a href="#173038" label="[17:30:38]">&lt;stikonas&gt;</a></span><span class="message">hmm, strange</span></div><div class="line" id="173039"><span class="nick" style="color:#234e69"><a href="#173039" label="[17:30:39]">&lt;pder&gt;</a></span><span class="message">But we were manually doing it in two steps.</span></div><div class="line" id="173046"><span class="nick" style="color:#8dd3c7"><a href="#173046" label="[17:30:46]">&lt;stikonas&gt;</a></span><span class="message">oh</span></div><div class="line" id="173047"><span class="nick" style="color:#234e69"><a href="#173047" label="[17:30:47]">&lt;pder&gt;</a></span><span class="message">bunzip followed by tar</span></div><div class="line" id="173129"><span class="nick" style="color:#8dd3c7"><a href="#173129" label="[17:31:29]">&lt;stikonas&gt;</a></span><span class="message">ok, could be</span></div><div class="line" id="173140"><span class="nick" style="color:#8dd3c7"><a href="#173140" label="[17:31:40]">&lt;stikonas&gt;</a></span><span class="message">oh, coreutils were already pre-unpacked by kaem</span></div><div class="line" id="173145"><span class="nick" style="color:#8dd3c7"><a href="#173145" label="[17:31:45]">&lt;stikonas&gt;</a></span><span class="message">yeah..</span></div><div class="line" id="173150"><span class="nick" style="color:#8dd3c7"><a href="#173150" label="[17:31:50]">&lt;stikonas&gt;</a></span><span class="message">it was just tar archive</span></div><div class="line" id="173219"><span class="nick" style="color:#234e69"><a href="#173219" label="[17:32:19]">&lt;pder&gt;</a></span><span class="message">Speaking of which, I kind of prefer passing -k to bunzip2 or gzip to keep the original file</span></div><div class="line" id="173231"><span class="nick" style="color:#8dd3c7"><a href="#173231" label="[17:32:31]">&lt;stikonas&gt;</a></span><span class="message">yes, I agree</span></div><div class="line" id="173238"><span class="nick" style="color:#8dd3c7"><a href="#173238" label="[17:32:38]">&lt;stikonas&gt;</a></span><span class="message">should be easy to fix</span></div><div class="line" id="173326"><span class="nick" style="color:#8dd3c7"><a href="#173326" label="[17:33:26]">&lt;stikonas&gt;</a></span><span class="message">only bzip2 has --keep</span></div><div class="line" id="173403"><span class="nick" style="color:#8dd3c7"><a href="#173403" label="[17:34:03]">&lt;stikonas&gt;</a></span><span class="message">our gzip is too old...</span></div><div class="line" id="173632"><span class="nick" style="color:#8dd3c7"><a href="#173632" label="[17:36:32]">&lt;stikonas&gt;</a></span><span class="message">well, can always make a copy first</span></div><div class="line" id="173648"><span class="nick" style="color:#234e69"><a href="#173648" label="[17:36:48]">&lt;pder&gt;</a></span><span class="message">Do we ever actually need to call bunzip?  Cant we just use tar xzf?</span></div><div class="line" id="173836"><span class="nick" style="color:#8dd3c7"><a href="#173836" label="[17:38:36]">&lt;stikonas&gt;</a></span><span class="message">well, early in bootstrap we might not have pipes</span></div><div class="line" id="173852"><span class="nick" style="color:#8dd3c7"><a href="#173852" label="[17:38:52]">&lt;stikonas&gt;</a></span><span class="message">that's why it was kept as two separate processes</span></div><div class="line" id="173900"><span class="nick" style="color:#8dd3c7"><a href="#173900" label="[17:39:00]">&lt;stikonas&gt;</a></span><span class="message">depends on when we build linux</span></div><div class="line" id="174345"><span class="nick" style="color:#8dd3c7"><a href="#174345" label="[17:43:45]">&lt;stikonas&gt;</a></span><span class="message">pder: although, back then I hoped that we wouldn't need to rebuild so much. I.e. will be able to build newer versions</span></div><div class="line" id="174606"><span class="nick" style="color:#234e69"><a href="#174606" label="[17:46:06]">&lt;pder&gt;</a></span><span class="message">With tcc and musl we should be able to handle newer packages.  bzip2 is actually quite new from 2019</span></div><div class="line" id="174910"><span class="nick" style="color:#234e69"><a href="#174910" label="[17:49:10]">&lt;pder&gt;</a></span><span class="message">One thing that would be really handy is a way to start the build using a snapshot of the rootfs after the first tcc is built.  The first part takes a good amount of time and isnt really changing much</span></div><div class="line" id="175602"><span class="nick" style="color:#8dd3c7"><a href="#175602" label="[17:56:02]">&lt;stikonas&gt;</a></span><span class="message">bzip2 is already new, that's fine...</span></div><div class="line" id="175620"><span class="nick" style="color:#8dd3c7"><a href="#175620" label="[17:56:20]">&lt;stikonas&gt;</a></span><span class="message">yeah, I know.... After tcc is fast</span></div><div class="line" id="175646"><span class="nick" style="color:#8dd3c7"><a href="#175646" label="[17:56:46]">&lt;stikonas&gt;</a></span><span class="message">that's why I'm suggesting to disable blynn-compiler, at least for now</span></div><div class="line" id="175655"><span class="nick" style="color:#8dd3c7"><a href="#175655" label="[17:56:55]">&lt;stikonas&gt;</a></span><span class="message">that would cut time by 30%...</span></div><div class="line" id="175729"><span class="nick" style="color:#234e69"><a href="#175729" label="[17:57:29]">&lt;pder&gt;</a></span><span class="message">I am all for that</span></div><div class="line" id="175824"><span class="nick" style="color:#6d2462"><a href="#175824" label="[17:58:24]">&lt;siraben&gt;</a></span><span class="message">stikonas: yes, go ahead</span></div><div class="line" id="175825"><span class="nick" style="color:#8dd3c7"><a href="#175825" label="[17:58:25]">&lt;stikonas&gt;</a></span><span class="message">rest is just mes being slow :(</span></div><div class="line" id="175828"><span class="nick" style="color:#6d2462"><a href="#175828" label="[17:58:28]">&lt;siraben&gt;</a></span><span class="message">it's non-critical for now</span></div><div class="line" id="180147"><span class="nick" style="color:#234e69"><a href="#180147" label="[18:01:47]">&lt;pder&gt;</a></span><span class="message">I wonder if there is some low hanging performance improvements for mes</span></div><div class="line" id="180649"><span class="nick" style="color:#8dd3c7"><a href="#180649" label="[18:06:49]">&lt;stikonas&gt;</a></span><span class="message">pder: wasn't it already much slower?</span></div><div class="line" id="180658"><span class="nick" style="color:#8dd3c7"><a href="#180658" label="[18:06:58]">&lt;stikonas&gt;</a></span><span class="message">like it took hours to build itself</span></div><div class="line" id="194700"><span class="nick" style="color:#234e69"><a href="#194700" label="[19:47:00]">&lt;pder&gt;</a></span><span class="message">stikonas: it might have been.  I haven't been around that long</span></div><div class="line" id="201303"><span class="nick" style="color:#6c3d55"><a href="#201303" label="[20:13:03]">&lt;stikonas[m]&gt;</a></span><span class="message">Me neither</span></div><div class="line" id="220052"><span class="nick" style="color:#d9d9d9"><a href="#220052" label="[22:00:52]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: pder I also think we should disable blynn until it provides value</span></div><div class="line" id="220101"><span class="nick" style="color:#d9d9d9"><a href="#220101" label="[22:01:01]">&lt;fossy&gt;</a></span><span class="message">Ill pr that tonight</span></div><div class="line" id="220235"><span class="nick" style="color:#8dd3c7"><a href="#220235" label="[22:02:35]">&lt;stikonas&gt;</a></span><span class="message">in principle we can keep readme entry to avoid renumbering everything</span></div><div class="line" id="230202"><span class="nick" style="color:#bc80bd"><a href="#230202" label="[23:02:02]">*</a></span><span class="message">fossy is also considering removing part numbers</span></div><div class="line" id="230554"><span class="nick" style="color:#8dd3c7"><a href="#230554" label="[23:05:54]">&lt;stikonas&gt;</a></span><span class="message">yeah, I think I suggested that too at some point</span></div><div class="line" id="230604"><span class="nick" style="color:#8dd3c7"><a href="#230604" label="[23:06:04]">&lt;stikonas&gt;</a></span><span class="message">it's getting annoying to change something in the middle</span></div><div class="line" id="230610"><span class="nick" style="color:#8dd3c7"><a href="#230610" label="[23:06:10]">&lt;stikonas&gt;</a></span><span class="message">it was not too bad when we had 10 parts</span></div><div class="line" id="230612"><span class="nick" style="color:#8dd3c7"><a href="#230612" label="[23:06:12]">&lt;stikonas&gt;</a></span><span class="message">but now...</span></div><div class="line" id="230635"><span class="nick" style="color:#8dd3c7"><a href="#230635" label="[23:06:35]">&lt;stikonas&gt;</a></span><span class="message">Unless we can get Markdown to number them automatically</span></div><div class="line" id="230645"><span class="nick" style="color:#8dd3c7"><a href="#230645" label="[23:06:45]">&lt;stikonas&gt;</a></span><span class="message">but that's probably not possible with headings</span></div><div class="line" id="233506"><span class="nick" style="color:#2e2a4a"><a href="#233506" label="[23:35:06]">&lt;OriansJ&gt;</a></span><span class="message">fossy: I recommend using an area numbering scheme. eg 1.0.0 and 2.0.0 for major pieces; 1.1.0 for middle pieces and 1.2.3 for small pieces; That way gaps are normal(ish)</span></div><div class="line" id="233639"><span class="nick" style="color:#2e2a4a"><a href="#233639" label="[23:36:39]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: the hardness of a program is entirely dependent on the programmer. For example writing a C compiler in Assembly I can do as a speed run and get multiple done in a few hours but it takes me forever to do graphical user interfaces.</span></div><div class="line" id="233741"><span class="nick" style="color:#2e2a4a"><a href="#233741" label="[23:37:41]">&lt;OriansJ&gt;</a></span><span class="message">For some people writing a 512byte hex program takes forever but they might churn out a boatload of GUI programs in a short while.</span></div><div class="line" id="233907"><span class="nick" style="color:#2e2a4a"><a href="#233907" label="[23:39:07]">&lt;OriansJ&gt;</a></span><span class="message">For example rain1 and janneke are both better at writing Scheme interpreters than I am.</span></div><div class="line" id="233929"><span class="nick" style="color:#2e2a4a"><a href="#233929" label="[23:39:29]">&lt;OriansJ&gt;</a></span><span class="message">I takes all kinds here to get the goals we seek.</span></div><div class="line" id="234803"><span class="nick" style="color:#6b8072"><a href="#234803" label="[23:48:03]">&lt;Hagfish&gt;</a></span><span class="message">i don't know if it justifies the downsides, but i do really like seeing the list of steps with numbers next to them</span></div><div class="line" id="234832"><span class="nick" style="color:#6b8072"><a href="#234832" label="[23:48:32]">&lt;Hagfish&gt;</a></span><span class="message">it's like going up an elevator in a really tall building and seeing the number increasing</span></div><div class="line" id="235349"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado_</span></div><div class="line" id="235352"><span class="nick">***</span><span class="message notice">rekado_ is now known as rekado</span></div><br /></div></body></html>