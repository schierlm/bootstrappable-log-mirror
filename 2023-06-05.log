<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-06-05.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="002447"><span class="nick" style="color:#389600"><a href="#002447" label="[00:24:47]">&lt;oriansj&gt;</a></span><span class="message">having to do 2 instructions to load 1 value, never seemed like a good idea to me; you might as well do a jump 4 (or 8) and loadr from the instruction cache and it'll be just as fast</span></div><div class="line" id="002509"><span class="nick" style="color:#389600"><a href="#002509" label="[00:25:09]">&lt;oriansj&gt;</a></span><span class="message">and save yourself the encoding bits in the process</span></div><div class="line" id="034619"><span class="nick" style="color:#8dd3c7"><a href="#034619" label="[03:46:19]">&lt;muurkha&gt;</a></span><span class="message">yeah, you need separate argument and return stacks to have a stack language with subroutines.  so every stack language has separate argument and return stacks: Forth, PostScript, HP FOCAL</span></div><div class="line" id="034815"><span class="nick" style="color:#8dd3c7"><a href="#034815" label="[03:48:15]">&lt;muurkha&gt;</a></span><span class="message">RISC-V is in theory relatively agnostic about your control flow but there are a couple of registers they recommend using as link registers in particular ways to help out the branch predictor</span></div><div class="line" id="035006"><span class="nick" style="color:#8dd3c7"><a href="#035006" label="[03:50:06]">&lt;muurkha&gt;</a></span><span class="message">using a link register rather than a hardware stack for calls sort of implicitly gives you more flexibility to separate the return stack</span></div><div class="line" id="035449"><span class="nick" style="color:#8dd3c7"><a href="#035449" label="[03:54:49]">&lt;muurkha&gt;</a></span><span class="message">it would indeed be nice to have postdecrement and preincrement addressing modes</span></div><div class="line" id="035619"><span class="nick" style="color:#8dd3c7"><a href="#035619" label="[03:56:19]">&lt;muurkha&gt;</a></span><span class="message">I think RISC-V got more uptake than the OpenRISC 1000 because its designers were more influential</span></div><div class="line" id="035650"><span class="nick" style="color:#8dd3c7"><a href="#035650" label="[03:56:50]">&lt;muurkha&gt;</a></span><span class="message">but maybe it's also actually better, especially in the microcontroller space where RISC-V has taken off so far</span></div><div class="line" id="040526"><span class="nick" style="color:#2e2a4a"><a href="#040526" label="[04:05:26]">&lt;pabs3&gt;</a></span><span class="message">didn't RISC-V go 64-bit earlier too?</span></div><div class="line" id="041920"><span class="nick" style="color:#8dd3c7"><a href="#041920" label="[04:19:20]">&lt;muurkha&gt;</a></span><span class="message">probably, but that's because people were using it, I think</span></div><div class="line" id="041943"><span class="nick" style="color:#8dd3c7"><a href="#041943" label="[04:19:43]">&lt;muurkha&gt;</a></span><span class="message">I was really excited the first time I saw Linux boot on an OpenRISC 1000</span></div><div class="line" id="042009"><span class="nick" style="color:#8dd3c7"><a href="#042009" label="[04:20:09]">&lt;muurkha&gt;</a></span><span class="message">probably about 02004?  at the Freedom Technology Center</span></div><div class="line" id="042035"><span class="nick" style="color:#8dd3c7"><a href="#042035" label="[04:20:35]">&lt;muurkha&gt;</a></span><span class="message">the future looked a lot brighter then</span></div><div class="line" id="042842"><span class="nick" style="color:#2e2a4a"><a href="#042842" label="[04:28:42]">&lt;pabs3&gt;</a></span><span class="message">ISTR there was also some blocker to getting the code into gcc mainline, copyright assignment perhaps</span></div><div class="line" id="045824"><span class="nick" style="color:#8dd3c7"><a href="#045824" label="[04:58:24]">&lt;muurkha&gt;</a></span><span class="message">for OR1000?</span></div><div class="line" id="045912"><span class="nick" style="color:#8dd3c7"><a href="#045912" label="[04:59:12]">&lt;muurkha&gt;</a></span><span class="message">I assumed it was that the GCC folks were reluctant to accept the maintenance burden of a hobby machine that nobody was using</span></div><div class="line" id="051104"><span class="nick" style="color:#6b8072"><a href="#051104" label="[05:11:04]">&lt;luke-jr&gt;</a></span><span class="message">that'd be a better reason than copyright assignment politics</span></div><div class="line" id="052058"><span class="nick" style="color:#2e2a4a"><a href="#052058" label="[05:20:58]">&lt;pabs3&gt;</a></span><span class="message">OpenRISC is in all Allwinner ARM SoCs <a rel="nofollow" href="https://linux-sunxi.org/AR100/">https://linux-sunxi.org/AR100/</a> </span></div><div class="line" id="052110"><span class="nick" style="color:#2e2a4a"><a href="#052110" label="[05:21:10]">&lt;pabs3&gt;</a></span><span class="message">so I'm not sure it counts as a hobby machine</span></div><div class="line" id="052153"><span class="nick" style="color:#2e2a4a"><a href="#052153" label="[05:21:53]">&lt;pabs3&gt;</a></span><span class="message">er <a rel="nofollow" href="https://linux-sunxi.org/AR100">https://linux-sunxi.org/AR100</a> </span></div><div class="line" id="052328"><span class="nick" style="color:#2e2a4a"><a href="#052328" label="[05:23:28]">&lt;pabs3&gt;</a></span><span class="message">copyright assignment was blocking the GCC RPi VC4 support for some time, now just because they can't be bothered <a rel="nofollow" href="https://github.com/itszor/vc4-toolchain/issues/7">https://github.com/itszor/vc4-toolchain/issues/7</a> </span></div><div class="line" id="052556"><span class="nick" style="color:#2e2a4a"><a href="#052556" label="[05:25:56]">&lt;pabs3&gt;</a></span><span class="message">some potentially useful links re or1k &amp; gcc upstream: <a rel="nofollow" href="https://paste.debian.net/hidden/b760f3ac/">https://paste.debian.net/hidden/b760f3ac/</a> </span></div><div class="line" id="053010"><span class="nick" style="color:#80b1d3"><a href="#053010" label="[05:30:10]">&lt;sam_&gt;</a></span><span class="message">you can use signed-off-by for gcc nowadays right</span></div><div class="line" id="060251"><span class="nick" style="color:#8dd3c7"><a href="#060251" label="[06:02:51]">&lt;muurkha&gt;</a></span><span class="message">pabs3: it did at the time I saw it</span></div><div class="line" id="060431"><span class="nick" style="color:#8dd3c7"><a href="#060431" label="[06:04:31]">&lt;muurkha&gt;</a></span><span class="message">there are a lot of questionable design choices in OpenRISC visible in that page</span></div><div class="line" id="060536"><span class="nick" style="color:#8dd3c7"><a href="#060536" label="[06:05:36]">&lt;muurkha&gt;</a></span><span class="message">a delay slot, a flags register, conditional move, etc.</span></div><div class="line" id="060546"><span class="nick" style="color:#8dd3c7"><a href="#060546" label="[06:05:46]">&lt;muurkha&gt;</a></span><span class="message">apparently GCC 9 does support it</span></div><div class="line" id="060619"><span class="nick" style="color:#8dd3c7"><a href="#060619" label="[06:06:19]">&lt;muurkha&gt;</a></span><span class="message">the copyright assignment stuff is mentioned there too</span></div><div class="line" id="060711"><span class="nick" style="color:#8dd3c7"><a href="#060711" label="[06:07:11]">&lt;muurkha&gt;</a></span><span class="message">I'm assuming olofk mentioned there is the author of the SeRV implementation of RISC-V</span></div><div class="line" id="060835"><span class="nick" style="color:#8dd3c7"><a href="#060835" label="[06:08:35]">&lt;muurkha&gt;</a></span><span class="message"> <a rel="nofollow" href="http://archive.tcltk.co.kr/files/misc/or32/crosschain/sites/www.meansoffreedom.com/index.html">http://archive.tcltk.co.kr/files/misc/or32/crosschain/sites/www.meansoffreedom.com/index.html</a>  is now 404 :(</span></div><div class="line" id="061003"><span class="nick" style="color:#8dd3c7"><a href="#061003" label="[06:10:03]">&lt;muurkha&gt;</a></span><span class="message"> <a rel="nofollow" href="https://lkml.org/lkml/2018/2/26/45">https://lkml.org/lkml/2018/2/26/45</a>  also talks about the copyright assignment thing</span></div><div class="line" id="061412"><span class="nick" style="color:#8dd3c7"><a href="#061412" label="[06:14:12]">&lt;muurkha&gt;</a></span><span class="message">there's a great-looking presentation comparing the architectures at <a rel="nofollow" href="https://iis-people.ee.ethz.ch/~gmichi/asocd/lecturenotes/Lecture6.pdf">https://iis-people.ee.ethz.ch/~gmichi/asocd/lecturenotes/Lecture6.pdf</a>  including a lovely plot of my very favorite figure of merit: picojoules per instruction</span></div><div class="line" id="061934"><span class="nick" style="color:#2e2a4a"><a href="#061934" label="[06:19:34]">&lt;pabs3&gt;</a></span><span class="message">there is <a rel="nofollow" href="https://web.archive.org/web/20150801222007/http://meansoffreedom.com/">https://web.archive.org/web/20150801222007/http://meansoffreedom.com/</a> </span></div><div class="line" id="062038"><span class="nick" style="color:#8dd3c7"><a href="#062038" label="[06:20:38]">&lt;muurkha&gt;</a></span><span class="message">for now</span></div><div class="line" id="062057"><span class="nick" style="color:#8dd3c7"><a href="#062057" label="[06:20:57]">&lt;muurkha&gt;</a></span><span class="message"> <a rel="nofollow" href="https://stackoverflow.com/a/54725021">https://stackoverflow.com/a/54725021</a>  explains why branch delay slots are considered a mistake</span></div><div class="line" id="062322"><span class="nick" style="color:#8dd3c7"><a href="#062322" label="[06:23:22]">&lt;muurkha&gt;</a></span><span class="message">oh, and interestingly, shap also responded to the question with notes about HAL sped up their SPARC: <a rel="nofollow" href="https://stackoverflow.com/a/60920481">https://stackoverflow.com/a/60920481</a> </span></div><div class="line" id="062603"><span class="nick" style="color:#8dd3c7"><a href="#062603" label="[06:26:03]">&lt;muurkha&gt;</a></span><span class="message">I didn't know he worked at HaL</span></div><div class="line" id="063042"><span class="nick" style="color:#8dd3c7"><a href="#063042" label="[06:30:42]">&lt;muurkha&gt;</a></span><span class="message"> <a rel="nofollow" href="https://riscv.org/blog/2014/10/why-not-build-on-openrisc/">https://riscv.org/blog/2014/10/why-not-build-on-openrisc/</a>  is Asanovic explaining why RISC-V didn't just use OpenRISC</span></div><div class="line" id="075403"><span class="nick" style="color:#6d2462"><a href="#075403" label="[07:54:03]">&lt;[exa]&gt;</a></span><span class="message">oriansj: yeah the separate return stack is a complete magic if used properly</span></div><div class="line" id="075428"><span class="nick" style="color:#6d2462"><a href="#075428" label="[07:54:28]">&lt;[exa]&gt;</a></span><span class="message">there's even some effort to have continuation stacks, that's just lovely</span></div><div class="line" id="080922"><span class="nick" style="color:#8dd3c7"><a href="#080922" label="[08:09:22]">&lt;muurkha&gt;</a></span><span class="message">what do you mean?</span></div><div class="line" id="081157"><span class="nick" style="color:#8dd3c7"><a href="#081157" label="[08:11:57]">&lt;muurkha&gt;</a></span><span class="message">normally a continuation is more or less the contents of the operand and return stacks</span></div><div class="line" id="082748"><span class="nick" style="color:#6d2462"><a href="#082748" label="[08:27:48]">&lt;[exa]&gt;</a></span><span class="message">muurkha: continuations tend to change size unpredictably and aren't very handy for being copied around...so an extra stack for these helps</span></div><div class="line" id="092144"><span class="nick" style="color:#8dd3c7"><a href="#092144" label="[09:21:44]">&lt;muurkha&gt;</a></span><span class="message">[exa]: but you might not access them in a stack-like fashion?</span></div><div class="line" id="092204"><span class="nick" style="color:#8dd3c7"><a href="#092204" label="[09:22:04]">&lt;muurkha&gt;</a></span><span class="message">I'm not understanding the concept</span></div><div class="line" id="120430"><span class="nick" style="color:#389600"><a href="#120430" label="[12:04:30]">&lt;oriansj&gt;</a></span><span class="message">muurkha: picojoules per instruction definitely sounds more implementation specific than anything based in the architecture. (See RISC-V in ECL vs VAX in 5nm CMOS)</span></div><div class="line" id="173035"><span class="nick" style="color:#234e69"><a href="#173035" label="[17:30:35]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: wondering if you have seen/have any thoughts on <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/issues/44">https://github.com/oriansj/mescc-tools/issues/44</a>  ?</span></div><div class="line" id="173142"><span class="nick" style="color:#234e69"><a href="#173142" label="[17:31:42]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: I am using a locally patched hex2 as a workaround for builder-hex0 development</span></div><div class="line" id="215212"><span class="nick" style="color:#389600"><a href="#215212" label="[21:52:12]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: thank you for identifying that problem; I think the solution is simpler. treat $labels as unsigned [as they are absolute addresses] and @labels as signed [as they are displacements]</span></div><div class="line" id="220145"><span class="nick" style="color:#389600"><a href="#220145" label="[22:01:45]">&lt;oriansj&gt;</a></span><span class="message">and I probably should fix that M1 bug as well</span></div><div class="line" id="220439"><span class="nick" style="color:#234e69"><a href="#220439" label="[22:04:39]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: I think that's what the attached PR does; it alters range_check to allow up to 65535 for $labels</span></div><div class="line" id="221043"><span class="nick" style="color:#389600"><a href="#221043" label="[22:10:43]">&lt;oriansj&gt;</a></span><span class="message">merged</span></div><div class="line" id="221200"><span class="nick" style="color:#234e69"><a href="#221200" label="[22:12:00]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: thank you</span></div><div class="line" id="221704"><span class="nick" style="color:#234e69"><a href="#221704" label="[22:17:04]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: looks like there are other copies of hex2 in stage0-posix, on savannah, checksums to be updated, a bunch of work. sorry :)</span></div><div class="line" id="221718"><span class="nick" style="color:#389600"><a href="#221718" label="[22:17:18]">&lt;oriansj&gt;</a></span><span class="message">and I'll do a matching change on M1 to fix that bug you reported</span></div><div class="line" id="221737"><span class="nick" style="color:#389600"><a href="#221737" label="[22:17:37]">&lt;oriansj&gt;</a></span><span class="message">no worries</span></div><div class="line" id="230750"><span class="nick" style="color:#389600"><a href="#230750" label="[23:07:50]">&lt;oriansj&gt;</a></span><span class="message">roconnor: I just noticed your pull request. thank you.</span></div><div class="line" id="230900"><span class="nick" style="color:#389600"><a href="#230900" label="[23:09:00]">&lt;oriansj&gt;</a></span><span class="message">merged</span></div><div class="line" id="235353"><span class="nick" style="color:#389600"><a href="#235353" label="[23:53:53]">&lt;oriansj&gt;</a></span><span class="message">hmmm making M1 support unsigned; might be a breaking change if one assumes @40000 works but $40000 would be the unsigned version</span></div><div class="line" id="235411"><span class="nick" style="color:#389600"><a href="#235411" label="[23:54:11]">&lt;oriansj&gt;</a></span><span class="message">anyone have an issue with that assuming it is part of the next mescc-tools release?</span></div><div class="line" id="235551"><span class="nick" style="color:#389600"><a href="#235551" label="[23:55:51]">&lt;oriansj&gt;</a></span><span class="message">(with $42 and &amp;42 being unsigned 16 and unsigned 32bits respectively)</span></div><br /></div></body></html>