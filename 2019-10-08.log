<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2019-10-08.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="011127"><span class="nick" style="color:#8dd3c7"><a href="#011127" label="[01:11:27]">&lt;dddddd&gt;</a></span><span class="message">xentrac, no</span></div><div class="line" id="011134"><span class="nick" style="color:#8dd3c7"><a href="#011134" label="[01:11:34]">&lt;dddddd&gt;</a></span><span class="message">rain2, nice!</span></div><div class="line" id="015718"><span class="nick" style="color:#2e2a4a"><a href="#015718" label="[01:57:18]">&lt;OriansJ&gt;</a></span><span class="message">janneke: I made a breakthrough in mes-m2</span></div><div class="line" id="015828"><span class="nick" style="color:#2e2a4a"><a href="#015828" label="[01:58:28]">&lt;OriansJ&gt;</a></span><span class="message">(I finally found how to eliminate temp.c) and soon I should be able to remove all of the compiling warnings</span></div><div class="line" id="020402"><span class="nick" style="color:#6b8072"><a href="#020402" label="[02:04:02]">&lt;xentrac&gt;</a></span><span class="message">OriansJ: congratulations!</span></div><div class="line" id="020730"><span class="nick" style="color:#2e2a4a"><a href="#020730" label="[02:07:30]">&lt;OriansJ&gt;</a></span><span class="message">Turns out the solution required converting a hundred constants into simple globals that needs only have limited reference</span></div><div class="line" id="020757"><span class="nick" style="color:#2e2a4a"><a href="#020757" label="[02:07:57]">&lt;OriansJ&gt;</a></span><span class="message">also I think I broke the garbage collection but I can fix that later</span></div><div class="line" id="021313"><span class="nick" style="color:#6b8072"><a href="#021313" label="[02:13:13]">&lt;xentrac&gt;</a></span><span class="message">rain2: collapseos looks like fun! &quot;10K transistors&quot; is exaggeration if we're talking about 56K of semiconductor RAM though</span></div><div class="line" id="023518"><span class="nick" style="color:#2e2a4a"><a href="#023518" label="[02:35:18]">&lt;OriansJ&gt;</a></span><span class="message">Historically RISC-I had 44,500 transistors and RISC-II had 39,000 transistors but even if you removed nearly all of the transistors used in the Registers; you would still exceed 10K transistors and honestly there isn't much you would want to remove from that instruction set core.</span></div><div class="line" id="024047"><span class="nick" style="color:#6b8072"><a href="#024047" label="[02:40:47]">&lt;xentrac&gt;</a></span><span class="message">collapseos runs on a Z80; the Z80 chip is a bit under 10K transistors</span></div><div class="line" id="024101"><span class="nick" style="color:#6b8072"><a href="#024101" label="[02:41:01]">&lt;xentrac&gt;</a></span><span class="message">The MuP21 was a bit under 5K or something</span></div><div class="line" id="024144"><span class="nick" style="color:#6b8072"><a href="#024144" label="[02:41:44]">&lt;xentrac&gt;</a></span><span class="message">I think the 6502 was 3500 transistors?  but you need at least 4K of RAM and ROM for a reasonable interactive programming environment</span></div><div class="line" id="024611"><span class="nick" style="color:#2e2a4a"><a href="#024611" label="[02:46:11]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: I honestly believe that any bootstrap on anything smaller than 16bit ends up being the wrong route as it requires alot more complexity to squeeze programs into that memory address space</span></div><div class="line" id="024652"><span class="nick" style="color:#2e2a4a"><a href="#024652" label="[02:46:52]">&lt;OriansJ&gt;</a></span><span class="message">one could do M2-Planet in 64KB but not 2^8</span></div><div class="line" id="024819"><span class="nick" style="color:#2e2a4a"><a href="#024819" label="[02:48:19]">&lt;OriansJ&gt;</a></span><span class="message">and yes I do that a longer PC + relative displacement or Memory banks can be used to leverage more memory but that comes at a cost of complexity and development time</span></div><div class="line" id="025505"><span class="nick" style="color:#2e2a4a"><a href="#025505" label="[02:55:05]">&lt;OriansJ&gt;</a></span><span class="message">DCPU-16 however is an interesting one (pity what happened to the 0x10^c community)</span></div><div class="line" id="031354"><span class="nick" style="color:#6b8072"><a href="#031354" label="[03:13:54]">&lt;xentrac&gt;</a></span><span class="message">what happened to them?</span></div><div class="line" id="031437"><span class="nick" style="color:#6b8072"><a href="#031437" label="[03:14:37]">&lt;xentrac&gt;</a></span><span class="message">yeah, I agree that any address space of less than 16-bit would be a mistake; even the PDP-8 with its 12 bits of 12-bit words was really limited</span></div><div class="line" id="031505"><span class="nick" style="color:#6b8072"><a href="#031505" label="[03:15:05]">&lt;xentrac&gt;</a></span><span class="message">but the Z80, the 8080, and the 6502 all had 16-bit address spaces, as did the DG Nova</span></div><div class="line" id="031525"><span class="nick" style="color:#6b8072"><a href="#031525" label="[03:15:25]">&lt;xentrac&gt;</a></span><span class="message">the MuP21 had a 20-bit address space of 20-bit words</span></div><div class="line" id="031854"><span class="nick" style="color:#2e2a4a"><a href="#031854" label="[03:18:54]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: well the game got cancelled and all of the people who wrote assembly programs for the DCPU-16; fractured into numerous groups all attempting to recreate the excitement the original promise provided. <a rel="nofollow" href="https://en.wikipedia.org/wiki/DCPU-16">https://en.wikipedia.org/wiki/DCPU-16</a> </span></div><div class="line" id="032028"><span class="nick" style="color:#6b8072"><a href="#032028" label="[03:20:28]">&lt;xentrac&gt;</a></span><span class="message">the LGP-30 had 31-bit registers; its drum only contained 4096 words, but I think it probably could have had a 15-bit address space, which would be enough with such large words</span></div><div class="line" id="032107"><span class="nick" style="color:#6b8072"><a href="#032107" label="[03:21:07]">&lt;xentrac&gt;</a></span><span class="message">huh, I wonder why they fragmented?</span></div><div class="line" id="032239"><span class="nick" style="color:#6b8072"><a href="#032239" label="[03:22:39]">&lt;xentrac&gt;</a></span><span class="message">heh, a friend of mine who first programmed on the PDP-8 points out that you could reduce the number of transistors in your computer by using core memory</span></div><div class="line" id="032327"><span class="nick" style="color:#2e2a4a"><a href="#032327" label="[03:23:27]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: true but core memory costs about $1 per bit right now</span></div><div class="line" id="032659"><span class="nick" style="color:#6b8072"><a href="#032659" label="[03:26:59]">&lt;xentrac&gt;</a></span><span class="message">interesting, at that price it might be worth manufacturing some new</span></div><div class="line" id="032729"><span class="nick" style="color:#6b8072"><a href="#032729" label="[03:27:29]">&lt;xentrac&gt;</a></span><span class="message">it didn't cost that much in the 1970s, adjusted for inflation</span></div><div class="line" id="032921"><span class="nick" style="color:#6b8072"><a href="#032921" label="[03:29:21]">&lt;xentrac&gt;</a></span><span class="message">I wonder why nobody is doing these self-hosted micro-OSes like CP/Mish, bootOS, and CollapseOS for ARM</span></div><div class="line" id="033032"><span class="nick" style="color:#6b8072"><a href="#033032" label="[03:30:32]">&lt;xentrac&gt;</a></span><span class="message">well, bootOS is only sort of trivially self-hosted, but it wouldn't be hard to get there</span></div><div class="line" id="033132"><span class="nick" style="color:#2e2a4a"><a href="#033132" label="[03:31:32]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: probably because they don't have a need for one nor a desire to create one for fun</span></div><div class="line" id="033430"><span class="nick" style="color:#6b8072"><a href="#033430" label="[03:34:30]">&lt;xentrac&gt;</a></span><span class="message">I guess people have different ideas of fun.  an STM32F4 seems a lot more fun than a Kaypro to me even if it only has 32K of RAM</span></div><div class="line" id="033653"><span class="nick" style="color:#2e2a4a"><a href="#033653" label="[03:36:53]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: absolutely. Personally, I am partial to a good old PDP-10</span></div><div class="line" id="034042"><span class="nick" style="color:#6b8072"><a href="#034042" label="[03:40:42]">&lt;xentrac&gt;</a></span><span class="message">haha</span></div><div class="line" id="034052"><span class="nick" style="color:#6b8072"><a href="#034052" label="[03:40:52]">&lt;xentrac&gt;</a></span><span class="message">can't say I've ever had the pleasure</span></div><div class="line" id="034117"><span class="nick" style="color:#6b8072"><a href="#034117" label="[03:41:17]">&lt;xentrac&gt;</a></span><span class="message">but any of the machines discussed above would be a great deal easier to build than a PDP-10</span></div><div class="line" id="034131"><span class="nick" style="color:#2e2a4a"><a href="#034131" label="[03:41:31]">&lt;OriansJ&gt;</a></span><span class="message"> <a rel="nofollow" href="http://simh.trailing-edge.com">http://simh.trailing-edge.com</a>  absolutely true</span></div><div class="line" id="034158"><span class="nick" style="color:#2e2a4a"><a href="#034158" label="[03:41:58]">&lt;OriansJ&gt;</a></span><span class="message">it was a bitch to make even back when they had all of the parts brand new</span></div><div class="line" id="034218"><span class="nick" style="color:#2e2a4a"><a href="#034218" label="[03:42:18]">&lt;OriansJ&gt;</a></span><span class="message">fortunately it can be implemented entirely on a single FPGA these days</span></div><div class="line" id="034239"><span class="nick" style="color:#6b8072"><a href="#034239" label="[03:42:39]">&lt;xentrac&gt;</a></span><span class="message">oh, sure</span></div><div class="line" id="035859"><span class="nick" style="color:#2e2a4a"><a href="#035859" label="[03:58:59]">&lt;OriansJ&gt;</a></span><span class="message">down to just 10 build warnings</span></div><div class="line" id="042054"><span class="nick" style="color:#6b8072"><a href="#042054" label="[04:20:54]">&lt;xentrac&gt;</a></span><span class="message">congratulations!</span></div><div class="line" id="042101"><span class="nick" style="color:#2e2a4a"><a href="#042101" label="[04:21:01]">&lt;OriansJ&gt;</a></span><span class="message">I think 1882 insertions(+) and 10671 deletions(-) is a big enough of a stopping point for tonight</span></div><div class="line" id="042142"><span class="nick" style="color:#2e2a4a"><a href="#042142" label="[04:21:42]">&lt;OriansJ&gt;</a></span><span class="message">I am stopping at 4 warnings and 4 notes from the compiler</span></div><div class="line" id="042200"><span class="nick" style="color:#2e2a4a"><a href="#042200" label="[04:22:00]">&lt;OriansJ&gt;</a></span><span class="message">(tonight, I'll probably try to clear these up tomorrow)</span></div><div class="line" id="042228"><span class="nick" style="color:#2e2a4a"><a href="#042228" label="[04:22:28]">&lt;OriansJ&gt;</a></span><span class="message">and temp.c is finally freaking gone</span></div><div class="line" id="042310"><span class="nick" style="color:#2e2a4a"><a href="#042310" label="[04:23:10]">&lt;OriansJ&gt;</a></span><span class="message">now at every point, one can load up gdb and inspect the structs being used and know exactly what they mean</span></div><div class="line" id="042349"><span class="nick" style="color:#6b8072"><a href="#042349" label="[04:23:49]">&lt;xentrac&gt;</a></span><span class="message">that's wonderful!</span></div><div class="line" id="042517"><span class="nick" style="color:#2e2a4a"><a href="#042517" label="[04:25:17]">&lt;OriansJ&gt;</a></span><span class="message">There are still a bunch of pieces that need clean up to make it look the way I prefer (and remove the work-alike functions like car(struct scm* a); when a-&gt;car means the same thing)</span></div><div class="line" id="042815"><span class="nick" style="color:#2e2a4a"><a href="#042815" label="[04:28:15]">&lt;OriansJ&gt;</a></span><span class="message">and it looks like most of the contents of mes_init.c can be dropped entirely</span></div><div class="line" id="043258"><span class="nick" style="color:#2e2a4a"><a href="#043258" label="[04:32:58]">&lt;OriansJ&gt;</a></span><span class="message">up next is figure out how to solve the struct scm** g_stack_array; in an M2-Planet fashion.</span></div><div class="line" id="053325"><span class="nick" style="color:#6b8072"><a href="#053325" label="[05:33:25]">&lt;xentrac&gt;</a></span><span class="message">that's fantastic!</span></div><div class="line" id="064317"><span class="nick" style="color:#6b8072"><a href="#064317" label="[06:43:17]">&lt;xentrac&gt;</a></span><span class="message">I've been reading through bootOS.  I've read and commented about 20% of it so far</span></div><div class="line" id="064332"><span class="nick" style="color:#6b8072"><a href="#064332" label="[06:43:32]">&lt;xentrac&gt;</a></span><span class="message">it's surprisingly non-transcendent so far</span></div><div class="line" id="064446"><span class="nick" style="color:#6b8072"><a href="#064446" label="[06:44:46]">&lt;xentrac&gt;</a></span><span class="message">I mean things are done in simple ways that seem reasonable but it seems like you could maybe bum it a bit further</span></div><div class="line" id="064501"><span class="nick" style="color:#6b8072"><a href="#064501" label="[06:45:01]">&lt;xentrac&gt;</a></span><span class="message">maybe I'll find out that the apparent optimization opportunities are not real</span></div><div class="line" id="064533"><span class="nick" style="color:#6b8072"><a href="#064533" label="[06:45:33]">&lt;xentrac&gt;</a></span><span class="message">mostly I mean it seems like code that a normal person could write</span></div><div class="line" id="120540"><span class="nick" style="color:#2e2a4a"><a href="#120540" label="[12:05:40]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: most of the impressive pieces of code have to look simple, otherwise they couldn't have grown to the level required. Human minds can only track so much complexity (or engage in so much creativity).</span></div><div class="line" id="131742"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado_</span></div><div class="line" id="132929"><span class="nick" style="color:#6b8072"><a href="#132929" label="[13:29:29]">&lt;xentrac&gt;</a></span><span class="message">yeah, that's not really what I'm talking about</span></div><div class="line" id="154130"><span class="nick" style="color:#80b1d3"><a href="#154130" label="[15:41:30]">&lt;janneke&gt;</a></span><span class="message"> <a rel="nofollow" href="http://guix.gnu.org/blog/2019/guix-reduces-bootstrap-seed-by-50/">http://guix.gnu.org/blog/2019/guix-reduces-bootstrap-seed-by-50/</a>  \o/</span></div><div class="line" id="154205"><span class="nick" style="color:#80b1d3"><a href="#154205" label="[15:42:05]">&lt;janneke&gt;</a></span><span class="message">finally, some of our work landed in guix ^</span></div><div class="line" id="181851"><span class="nick" style="color:#6b8072"><a href="#181851" label="[18:18:51]">&lt;xentrac&gt;</a></span><span class="message">janneke: congratulations!</span></div><div class="line" id="182435"><span class="nick" style="color:#80b1d3"><a href="#182435" label="[18:24:35]">&lt;janneke&gt;</a></span><span class="message">xentrac: thank you!</span></div><div class="line" id="182704"><span class="nick" style="color:#6b8072"><a href="#182704" label="[18:27:04]">&lt;xentrac&gt;</a></span><span class="message">:)</span></div><div class="line" id="214118"><span class="nick" style="color:#6d2462"><a href="#214118" label="[21:41:18]">&lt;true-grue&gt;</a></span><span class="message"> <a rel="nofollow" href="https://collapseos.org/why.html">https://collapseos.org/why.html</a> </span></div><div class="line" id="215053"><span class="nick" style="color:#6b8072"><a href="#215053" label="[21:50:53]">&lt;xentrac&gt;</a></span><span class="message">yes, that popped up here the other day :)</span></div><div class="line" id="215125"><span class="nick" style="color:#6b8072"><a href="#215125" label="[21:51:25]">&lt;xentrac&gt;</a></span><span class="message">not sure I agree with his rationale but it certainly seems like a fun project, and Z80 assembly certainly seems like a viable approach</span></div><div class="line" id="220011"><span class="nick" style="color:#6d2462"><a href="#220011" label="[22:00:11]">&lt;true-grue&gt;</a></span><span class="message">Yes, it's a fun project :) And I'm also interested in program synthesis techniques too here. It could be a useful approach to bootstrap some complex software.</span></div><div class="line" id="220220"><span class="nick" style="color:#6b8072"><a href="#220220" label="[22:02:20]">&lt;xentrac&gt;</a></span><span class="message">I agree!  To the extent that we can use search algorithms and solvers, we can simplify our source code, sometimes greatly, at the possible expense of compute time and memory space</span></div><div class="line" id="220250"><span class="nick" style="color:#6b8072"><a href="#220250" label="[22:02:50]">&lt;xentrac&gt;</a></span><span class="message">I mean compilers routinely do that kind of thing</span></div><div class="line" id="221443"><span class="nick" style="color:#6d2462"><a href="#221443" label="[22:14:43]">&lt;true-grue&gt;</a></span><span class="message">Sure, basically we have only two really powerful technologies here: DSLs and program synthesis.</span></div><div class="line" id="222223"><span class="nick" style="color:#6b8072"><a href="#222223" label="[22:22:23]">&lt;xentrac&gt;</a></span><span class="message">...constraint propagation, A* search, mathematical optimization, superoptimizers, recursive functions, functional programming, answer-set programming, branch-and-bound, generative testing, SAT solvers with DPLL and other algorithms,...</span></div><div class="line" id="222335"><span class="nick" style="color:#6b8072"><a href="#222335" label="[22:23:35]">&lt;xentrac&gt;</a></span><span class="message">...theorem provers, type checking, decidable sound type checking in particular, compile-time metaprogramming, reflection, ...</span></div><div class="line" id="223342"><span class="nick" style="color:#6d2462"><a href="#223342" label="[22:33:42]">&lt;true-grue&gt;</a></span><span class="message">Things from your former are program synthesis, just different ways to approach it.</span></div><div class="line" id="223427"><span class="nick" style="color:#6b8072"><a href="#223427" label="[22:34:27]">&lt;xentrac&gt;</a></span><span class="message">well, you can use them for that (except for, I guess, superoptimizers)</span></div><div class="line" id="223458"><span class="nick" style="color:#6d2462"><a href="#223458" label="[22:34:58]">&lt;true-grue&gt;</a></span><span class="message">Why not superoptimizers? I like them a lot :)</span></div><div class="line" id="223602"><span class="nick" style="color:#6b8072"><a href="#223602" label="[22:36:02]">&lt;xentrac&gt;</a></span><span class="message">Superoptimizers are awesome!  I just mean that you can use mathematical optimization or functioal programming or A* search when you're not doing program synthesis, but if you're using a superoptimizer, you're pretty much by definition doing program synthesis</span></div><div class="line" id="223736"><span class="nick" style="color:#6d2462"><a href="#223736" label="[22:37:36]">&lt;true-grue&gt;</a></span><span class="message">There are some super optimizers that use a lot of different techniques.</span></div><div class="line" id="223744"><span class="nick" style="color:#6d2462"><a href="#223744" label="[22:37:44]">&lt;true-grue&gt;</a></span><span class="message">For example: <a rel="nofollow" href="https://mangpo.net/papers/lens-asplos16.pdf">https://mangpo.net/papers/lens-asplos16.pdf</a> </span></div><div class="line" id="223846"><span class="nick" style="color:#6d2462"><a href="#223846" label="[22:38:46]">&lt;true-grue&gt;</a></span><span class="message">Basically you can use any methods to reduce search space in superoptimizer. And A*, branch-and-bound etc could help here too.</span></div><div class="line" id="224020"><span class="nick" style="color:#6d2462"><a href="#224020" label="[22:40:20]">&lt;true-grue&gt;</a></span><span class="message">I made a superoptimizer for stack machine code (Forth, Python or JVM). It is based on Z3 (which is SMT solver) and CEGIS.</span></div><div class="line" id="224247"><span class="nick" style="color:#6b8072"><a href="#224247" label="[22:42:47]">&lt;xentrac&gt;</a></span><span class="message">that's fantastic!  I don't know about CEGIS</span></div><div class="line" id="224533"><span class="nick" style="color:#6d2462"><a href="#224533" label="[22:45:33]">&lt;true-grue&gt;</a></span><span class="message">&quot;Counterexample Guided Inductive Synthesis&quot;. What is cool about CEGIS is that with the help of Z3 you can generate programs with arbitrary constants inside.</span></div><div class="line" id="224601"><span class="nick" style="color:#6b8072"><a href="#224601" label="[22:46:01]">&lt;xentrac&gt;</a></span><span class="message">how does that work?</span></div><div class="line" id="234616"><span class="nick" style="color:#6d2462"><a href="#234616" label="[23:46:16]">&lt;true-grue&gt;</a></span><span class="message">xentrac, Here is a good paper about it <a rel="nofollow" href="https://pp.ipd.kit.edu/uploads/publikationen/buchwald18cgo.pdf">https://pp.ipd.kit.edu/uploads/publikationen/buchwald18cgo.pdf</a> </span></div><div class="line" id="234828"><span class="nick" style="color:#6d2462"><a href="#234828" label="[23:48:28]">&lt;true-grue&gt;</a></span><span class="message">This one is even simpler to understand: <a rel="nofollow" href="https://www.microsoft.com/en-us/research/wp-content/uploads/2016/12/pldi11-loopfree-synthesis.pdf">https://www.microsoft.com/en-us/research/wp-content/uploads/2016/12/pldi11-loopfree-synthesis.pdf</a> </span></div><div class="line" id="235213"><span class="nick" style="color:#6b8072"><a href="#235213" label="[23:52:13]">&lt;xentrac&gt;</a></span><span class="message">ooh, thanks!</span></div><br /></div></body></html>