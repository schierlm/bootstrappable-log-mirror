<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-12-25.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000150"><span class="nick" style="color:#389600"><a href="#000150" label="[00:01:50]">&lt;doras&gt;</a></span><span class="message">I'm thinking about a plugin that fetches the live-bootstrap git repo, then parses a manifest which has a standard format and contains all the required files to be fetched and their checksums. Then those will be converted to metadata for BuildStream, which can then automatically do the caching and mirroring necessary to ensure this works reliably.</span></div><div class="line" id="000237"><span class="nick" style="color:#8dd3c7"><a href="#000237" label="[00:02:37]">&lt;stikonas&gt;</a></span><span class="message">yeah, mirroring would be good</span></div><div class="line" id="000245"><span class="nick" style="color:#8dd3c7"><a href="#000245" label="[00:02:45]">&lt;stikonas&gt;</a></span><span class="message">some of the files are fetched from obscure places</span></div><div class="line" id="000329"><span class="nick" style="color:#8dd3c7"><a href="#000329" label="[00:03:29]">&lt;stikonas&gt;</a></span><span class="message">most of the stuff is from standard gnu ftp server/mirrors but not everything</span></div><div class="line" id="000403"><span class="nick" style="color:#389600"><a href="#000403" label="[00:04:03]">&lt;doras&gt;</a></span><span class="message">BuildStream also supports parallel fetching to ensure it maximizes the available bandwidth.</span></div><div class="line" id="000506"><span class="nick" style="color:#8dd3c7"><a href="#000506" label="[00:05:06]">&lt;stikonas&gt;</a></span><span class="message">e.g. it was quite hard to find flex 2.5.11</span></div><div class="line" id="000518"><span class="nick" style="color:#8dd3c7"><a href="#000518" label="[00:05:18]">&lt;stikonas&gt;</a></span><span class="message">but I somehow found it on <a rel="nofollow" href="http://download.nust.na/">http://download.nust.na/</a> </span></div><div class="line" id="000923"><span class="nick" style="color:#389600"><a href="#000923" label="[00:09:23]">&lt;doras&gt;</a></span><span class="message">Oh, and maybe the destination directory too if different ones are needed.</span></div><div class="line" id="000940"><span class="nick" style="color:#389600"><a href="#000940" label="[00:09:40]">&lt;doras&gt;</a></span><span class="message">I wonder if we can use something more standard for all of this...</span></div><div class="line" id="001053"><span class="nick" style="color:#389600"><a href="#001053" label="[00:10:53]">&lt;doras&gt;</a></span><span class="message">One way which I've seen being used before is to host all of your dependencies in git repositories, and combine it with git submodules.</span></div><div class="line" id="001138"><span class="nick" style="color:#389600"><a href="#001138" label="[00:11:38]">&lt;doras&gt;</a></span><span class="message">Basically create a git mirror of sorts in GitHub or similar.</span></div><div class="line" id="001140"><span class="nick" style="color:#8dd3c7"><a href="#001140" label="[00:11:40]">&lt;stikonas&gt;</a></span><span class="message">well, live-bootstrap downloads everything into a single directory (sources/)</span></div><div class="line" id="001210"><span class="nick" style="color:#8dd3c7"><a href="#001210" label="[00:12:10]">&lt;stikonas&gt;</a></span><span class="message">doras: that makes cloning difficult...</span></div><div class="line" id="001226"><span class="nick" style="color:#8dd3c7"><a href="#001226" label="[00:12:26]">&lt;stikonas&gt;</a></span><span class="message">we download maybe 150MB of tarballs</span></div><div class="line" id="001233"><span class="nick" style="color:#8dd3c7"><a href="#001233" label="[00:12:33]">&lt;stikonas&gt;</a></span><span class="message">with history it would be even more</span></div><div class="line" id="001254"><span class="nick" style="color:#8dd3c7"><a href="#001254" label="[00:12:54]">&lt;stikonas&gt;</a></span><span class="message">and submodules are bad at having multiple versions</span></div><div class="line" id="001303"><span class="nick" style="color:#8dd3c7"><a href="#001303" label="[00:13:03]">&lt;stikonas&gt;</a></span><span class="message">so you have to get two copies of the same thing</span></div><div class="line" id="001345"><span class="nick" style="color:#8dd3c7"><a href="#001345" label="[00:13:45]">&lt;stikonas&gt;</a></span><span class="message">we did use submodules a bit more until oriansj added untar to stage0-posix</span></div><div class="line" id="001357"><span class="nick" style="color:#8dd3c7"><a href="#001357" label="[00:13:57]">&lt;stikonas&gt;</a></span><span class="message">but even then only until GNU tar was built</span></div><div class="line" id="001407"><span class="nick" style="color:#8dd3c7"><a href="#001407" label="[00:14:07]">&lt;stikonas&gt;</a></span><span class="message">and gnu tar is built very early in live-bootstrap</span></div><div class="line" id="001426"><span class="nick" style="color:#389600"><a href="#001426" label="[00:14:26]">&lt;doras&gt;</a></span><span class="message">I think `git submodule update --depth 1` would suffice, no?</span></div><div class="line" id="001704"><span class="nick" style="color:#389600"><a href="#001704" label="[00:17:04]">&lt;doras&gt;</a></span><span class="message">Also:</span></div><div class="line" id="001704"><span class="nick" style="color:#389600"><a href="#001704" label="[00:17:04]">&lt;doras&gt;</a></span><span class="message">$ du -sh sources</span></div><div class="line" id="001704"><span class="nick" style="color:#389600"><a href="#001704" label="[00:17:04]">&lt;doras&gt;</a></span><span class="message">652M	sources</span></div><div class="line" id="001931"><span class="nick" style="color:#8dd3c7"><a href="#001931" label="[00:19:31]">&lt;stikonas&gt;</a></span><span class="message">oh, I was proably thinking about some earlier times...</span></div><div class="line" id="001932"><span class="nick" style="color:#389600"><a href="#001932" label="[00:19:32]">&lt;doras&gt;</a></span><span class="message">Another option is to switch your repo to BuildStream, if you're interested.</span></div><div class="line" id="001939"><span class="nick" style="color:#8dd3c7"><a href="#001939" label="[00:19:39]">&lt;stikonas&gt;</a></span><span class="message">yes, new gcc and guile increased it a lot</span></div><div class="line" id="002002"><span class="nick" style="color:#8dd3c7"><a href="#002002" label="[00:20:02]">&lt;stikonas&gt;</a></span><span class="message">well, it's up to fossy, but I think we tried to keep depedencies minimal</span></div><div class="line" id="002006"><span class="nick" style="color:#8dd3c7"><a href="#002006" label="[00:20:06]">&lt;stikonas&gt;</a></span><span class="message">even for preparation tools</span></div><div class="line" id="002020"><span class="nick" style="color:#8dd3c7"><a href="#002020" label="[00:20:20]">&lt;stikonas&gt;</a></span><span class="message">right now it's just python-requests</span></div><div class="line" id="002147"><span class="nick" style="color:#389600"><a href="#002147" label="[00:21:47]">&lt;doras&gt;</a></span><span class="message">How do we know that everything we bootstrapped actually works fine? I guess it's not trivial to know this.</span></div><div class="line" id="002238"><span class="nick" style="color:#389600"><a href="#002238" label="[00:22:38]">&lt;doras&gt;</a></span><span class="message">I mean, I see the following for example during build:... (full message at <a rel="nofollow" href="https://libera.ems.host/_matrix/media/r0/download/libera.chat/a9583a62e7fbb9ccc0646edd286cb6639f558588">https://libera.ems.host/_matrix/media/r0/download/libera.chat/a9583a62e7fbb9ccc0646edd286cb6639f558588</a>) </span></div><div class="line" id="002301"><span class="nick" style="color:#389600"><a href="#002301" label="[00:23:01]">&lt;doras&gt;</a></span><span class="message">I think this is mes-m2 building... something.</span></div><div class="line" id="002317"><span class="nick" style="color:#8dd3c7"><a href="#002317" label="[00:23:17]">&lt;stikonas&gt;</a></span><span class="message">hmm, these are warnings from mescc, janneke might tell you more about those</span></div><div class="line" id="002342"><span class="nick" style="color:#389600"><a href="#002342" label="[00:23:42]">&lt;doras&gt;</a></span><span class="message">Is there any chance that we'd end up with some &quot;bad&quot; binaries that are broken in slightly and unexpected ways?</span></div><div class="line" id="002345"><span class="nick" style="color:#8dd3c7"><a href="#002345" label="[00:23:45]">&lt;stikonas&gt;</a></span><span class="message">this step builds tcc with mescc</span></div><div class="line" id="002400"><span class="nick" style="color:#8dd3c7"><a href="#002400" label="[00:24:00]">&lt;stikonas&gt;</a></span><span class="message">and then tcc is rebuilt 5 or 6 times with itself</span></div><div class="line" id="002402"><span class="nick" style="color:#389600"><a href="#002402" label="[00:24:02]">&lt;doras&gt;</a></span><span class="message">slight*</span></div><div class="line" id="002403"><span class="nick" style="color:#8dd3c7"><a href="#002403" label="[00:24:03]">&lt;stikonas&gt;</a></span><span class="message">doras: yes</span></div><div class="line" id="002411"><span class="nick" style="color:#8dd3c7"><a href="#002411" label="[00:24:11]">&lt;stikonas&gt;</a></span><span class="message">but mostly intermediate binaries</span></div><div class="line" id="002416"><span class="nick" style="color:#8dd3c7"><a href="#002416" label="[00:24:16]">&lt;stikonas&gt;</a></span><span class="message">final binaries should be good</span></div><div class="line" id="002449"><span class="nick" style="color:#8dd3c7"><a href="#002449" label="[00:24:49]">&lt;stikonas&gt;</a></span><span class="message">there are some issues with floats in early binaries that are built with tcc and mes C library</span></div><div class="line" id="002458"><span class="nick" style="color:#8dd3c7"><a href="#002458" label="[00:24:58]">&lt;stikonas&gt;</a></span><span class="message">those are gone after we rebuild tcc with musl twice</span></div><div class="line" id="002503"><span class="nick" style="color:#389600"><a href="#002503" label="[00:25:03]">&lt;doras&gt;</a></span><span class="message">Do we verify final binaries somehow?</span></div><div class="line" id="002527"><span class="nick" style="color:#8dd3c7"><a href="#002527" label="[00:25:27]">&lt;stikonas&gt;</a></span><span class="message">just by building stuff with them</span></div><div class="line" id="002530"><span class="nick" style="color:#8dd3c7"><a href="#002530" label="[00:25:30]">&lt;stikonas&gt;</a></span><span class="message">e.g. gcc with gcc</span></div><div class="line" id="002606"><span class="nick" style="color:#389600"><a href="#002606" label="[00:26:06]">&lt;doras&gt;</a></span><span class="message">Also, mknod is not allowed either.</span></div><div class="line" id="002617"><span class="nick" style="color:#8dd3c7"><a href="#002617" label="[00:26:17]">&lt;stikonas&gt;</a></span><span class="message">on CI?</span></div><div class="line" id="002714"><span class="nick" style="color:#8dd3c7"><a href="#002714" label="[00:27:14]">&lt;stikonas&gt;</a></span><span class="message">also there are a couple of intermediate non-redistributable binaries during bootstrap but they are not present in the final image</span></div><div class="line" id="002733"><span class="nick" style="color:#389600"><a href="#002733" label="[00:27:33]">&lt;doras&gt;</a></span><span class="message">I'm basically running a chroot bootstrap locally without root.</span></div><div class="line" id="002743"><span class="nick" style="color:#8dd3c7"><a href="#002743" label="[00:27:43]">&lt;stikonas&gt;</a></span><span class="message">oh I see</span></div><div class="line" id="002755"><span class="nick" style="color:#8dd3c7"><a href="#002755" label="[00:27:55]">&lt;stikonas&gt;</a></span><span class="message">heirloom-yacc and heirloom-lex are CDDL licensed and it is incompatible with GPLv3</span></div><div class="line" id="002758"><span class="nick" style="color:#389600"><a href="#002758" label="[00:27:58]">&lt;doras&gt;</a></span><span class="message">The first thing that failed was the tmpfs mount, the second one is the mknod.</span></div><div class="line" id="002824"><span class="nick" style="color:#8dd3c7"><a href="#002824" label="[00:28:24]">&lt;stikonas&gt;</a></span><span class="message">well, try commenting mknod out</span></div><div class="line" id="002830"><span class="nick" style="color:#8dd3c7"><a href="#002830" label="[00:28:30]">&lt;stikonas&gt;</a></span><span class="message">and see if things fail</span></div><div class="line" id="003124"><span class="nick" style="color:#389600"><a href="#003124" label="[00:31:24]">&lt;doras&gt;</a></span><span class="message">I can't really tell, but it seems to be part of bootstrap process itself (?)</span></div><div class="line" id="003207"><span class="nick" style="color:#389600"><a href="#003207" label="[00:32:07]">&lt;doras&gt;</a></span><span class="message">Hmmm, maybe not.</span></div><div class="line" id="003345"><span class="nick" style="color:#389600"><a href="#003345" label="[00:33:45]">&lt;doras&gt;</a></span><span class="message">I think it's from sysb/run.sh, but I can't say for certain.</span></div><div class="line" id="003442"><span class="nick" style="color:#8dd3c7"><a href="#003442" label="[00:34:42]">&lt;stikonas&gt;</a></span><span class="message">well, it's probably from pupulate_device_nodes function</span></div><div class="line" id="003445"><span class="nick" style="color:#8dd3c7"><a href="#003445" label="[00:34:45]">&lt;stikonas&gt;</a></span><span class="message">we call it a few times</span></div><div class="line" id="003451"><span class="nick" style="color:#389600"><a href="#003451" label="[00:34:51]">&lt;doras&gt;</a></span><span class="message">It happens right after perl finishes building.</span></div><div class="line" id="003535"><span class="nick" style="color:#8dd3c7"><a href="#003535" label="[00:35:35]">&lt;stikonas&gt;</a></span><span class="message">I guess here <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysa/run.sh#L183">https://github.com/fosslinux/live-bootstrap/blob/master/sysa/run.sh#L183</a> </span></div><div class="line" id="003536"><span class="nick" style="color:#389600"><a href="#003536" label="[00:35:36]">&lt;doras&gt;</a></span><span class="message">At least this is the last print I see before the error:... (full message at <a rel="nofollow" href="https://libera.ems.host/_matrix/media/r0/download/libera.chat/5a0524619387803924d540b46f1bfc99c406a776">https://libera.ems.host/_matrix/media/r0/download/libera.chat/5a0524619387803924d540b46f1bfc99c406a776</a>) </span></div><div class="line" id="003616"><span class="nick" style="color:#8dd3c7"><a href="#003616" label="[00:36:16]">&lt;stikonas&gt;</a></span><span class="message">well, try to comment it out</span></div><div class="line" id="003655"><span class="nick" style="color:#8dd3c7"><a href="#003655" label="[00:36:55]">&lt;stikonas&gt;</a></span><span class="message">sorry I meant here <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysa/run.sh#L161">https://github.com/fosslinux/live-bootstrap/blob/master/sysa/run.sh#L161</a> </span></div><div class="line" id="003703"><span class="nick" style="color:#8dd3c7"><a href="#003703" label="[00:37:03]">&lt;stikonas&gt;</a></span><span class="message">that L183 is the second time we call it</span></div><div class="line" id="003731"><span class="nick" style="color:#8dd3c7"><a href="#003731" label="[00:37:31]">&lt;stikonas&gt;</a></span><span class="message">there is some bug somewhere (bash?) and musl configure script creates an empty /dev/null file</span></div><div class="line" id="003739"><span class="nick" style="color:#8dd3c7"><a href="#003739" label="[00:37:39]">&lt;stikonas&gt;</a></span><span class="message">even if /dev/null was proper device node</span></div><div class="line" id="003744"><span class="nick" style="color:#8dd3c7"><a href="#003744" label="[00:37:44]">&lt;stikonas&gt;</a></span><span class="message">so we recreate it</span></div><div class="line" id="004332"><span class="nick" style="color:#6b8072"><a href="#004332" label="[00:43:32]">&lt;oriansj&gt;</a></span><span class="message">deblob-check is in the checksums but not downloaded</span></div><div class="line" id="004438"><span class="nick" style="color:#80b1d3"><a href="#004438" label="[00:44:38]">&lt;fossy&gt;</a></span><span class="message">thats a relic</span></div><div class="line" id="004443"><span class="nick" style="color:#80b1d3"><a href="#004443" label="[00:44:43]">&lt;fossy&gt;</a></span><span class="message">can be removed safely</span></div><div class="line" id="004450"><span class="nick" style="color:#8dd3c7"><a href="#004450" label="[00:44:50]">&lt;stikonas&gt;</a></span><span class="message">we don't used deblob-check anymore</span></div><div class="line" id="004506"><span class="nick" style="color:#8dd3c7"><a href="#004506" label="[00:45:06]">&lt;stikonas&gt;</a></span><span class="message">we used deblob mode where it completely removes files with blobs</span></div><div class="line" id="004514"><span class="nick" style="color:#8dd3c7"><a href="#004514" label="[00:45:14]">&lt;stikonas&gt;</a></span><span class="message">rather than surgically removing the blogs</span></div><div class="line" id="004522"><span class="nick" style="color:#8dd3c7"><a href="#004522" label="[00:45:22]">&lt;stikonas&gt;</a></span><span class="message">it's much faster</span></div><div class="line" id="004534"><span class="nick" style="color:#8dd3c7"><a href="#004534" label="[00:45:34]">&lt;stikonas&gt;</a></span><span class="message">and we don't need that much from the kernel anyway</span></div><div class="line" id="004545"><span class="nick" style="color:#8dd3c7"><a href="#004545" label="[00:45:45]">&lt;stikonas&gt;</a></span><span class="message">just some syscalls and storage driver</span></div><div class="line" id="004640"><span class="nick" style="color:#80b1d3"><a href="#004640" label="[00:46:40]">&lt;fossy&gt;</a></span><span class="message">I have no interest in switching to BuildStream</span></div><div class="line" id="004703"><span class="nick" style="color:#80b1d3"><a href="#004703" label="[00:47:03]">&lt;fossy&gt;</a></span><span class="message">since really the primary target is metal/qemu</span></div><div class="line" id="004742"><span class="nick" style="color:#80b1d3"><a href="#004742" label="[00:47:42]">&lt;fossy&gt;</a></span><span class="message">and ideally any preparation system can be trivially removed</span></div><div class="line" id="004913"><span class="nick" style="color:#80b1d3"><a href="#004913" label="[00:49:13]">&lt;fossy&gt;</a></span><span class="message">however, conversely, I have no problem with BuildStream being an option</span></div><div class="line" id="004925"><span class="nick" style="color:#80b1d3"><a href="#004925" label="[00:49:25]">&lt;fossy&gt;</a></span><span class="message">if people qanr to use that as a preparation system</span></div><div class="line" id="004954"><span class="nick" style="color:#80b1d3"><a href="#004954" label="[00:49:54]">&lt;fossy&gt;</a></span><span class="message">basically I dont want a preparation system to be completely nessecary, should always be able to be built by hand</span></div><div class="line" id="005013"><span class="nick" style="color:#6b8072"><a href="#005013" label="[00:50:13]">&lt;oriansj&gt;</a></span><span class="message">doras: just a question, if the tars to download was just a json or s-expression list with download location and checksums; would that be something BuildStream could handle?</span></div><div class="line" id="005047"><span class="nick" style="color:#80b1d3"><a href="#005047" label="[00:50:47]">&lt;fossy&gt;</a></span><span class="message">it should be trivial to externally download sources, however</span></div><div class="line" id="005118"><span class="nick" style="color:#80b1d3"><a href="#005118" label="[00:51:18]">&lt;fossy&gt;</a></span><span class="message">stikonas: thoughts on shaing sources within live bootstrap?</span></div><div class="line" id="005231"><span class="nick" style="color:#80b1d3"><a href="#005231" label="[00:52:31]">&lt;fossy&gt;</a></span><span class="message">oh, doras, those warnings are normal, they are just mescc compiler warnings (similar to GCC warnings)</span></div><div class="line" id="005233"><span class="nick" style="color:#8dd3c7"><a href="#005233" label="[00:52:33]">&lt;stikonas&gt;</a></span><span class="message">fossy: sharing?</span></div><div class="line" id="005251"><span class="nick" style="color:#80b1d3"><a href="#005251" label="[00:52:51]">&lt;fossy&gt;</a></span><span class="message">sha256summing</span></div><div class="line" id="005259"><span class="nick" style="color:#8dd3c7"><a href="#005259" label="[00:52:59]">&lt;stikonas&gt;</a></span><span class="message">oh, sha'ing</span></div><div class="line" id="005309"><span class="nick" style="color:#8dd3c7"><a href="#005309" label="[00:53:09]">&lt;stikonas&gt;</a></span><span class="message">fossy: in principle we can do that</span></div><div class="line" id="005312"><span class="nick" style="color:#8dd3c7"><a href="#005312" label="[00:53:12]">&lt;stikonas&gt;</a></span><span class="message">it's fairly trivial</span></div><div class="line" id="005328"><span class="nick" style="color:#8dd3c7"><a href="#005328" label="[00:53:28]">&lt;stikonas&gt;</a></span><span class="message">after sha256sum just run a single command</span></div><div class="line" id="005341"><span class="nick" style="color:#8dd3c7"><a href="#005341" label="[00:53:41]">&lt;stikonas&gt;</a></span><span class="message">oh, actually sources are put in individual subdirectories</span></div><div class="line" id="005351"><span class="nick" style="color:#8dd3c7"><a href="#005351" label="[00:53:51]">&lt;stikonas&gt;</a></span><span class="message">so can't easily reuse the same file</span></div><div class="line" id="005402"><span class="nick" style="color:#389600"><a href="#005402" label="[00:54:02]">&lt;doras&gt;</a></span><span class="message">oriansj: we'll need it to write code that handles it, but it should be possible.</span></div><div class="line" id="005421"><span class="nick" style="color:#8dd3c7"><a href="#005421" label="[00:54:21]">&lt;stikonas&gt;</a></span><span class="message">fossy: or do you think just shain'g internally?</span></div><div class="line" id="005428"><span class="nick" style="color:#8dd3c7"><a href="#005428" label="[00:54:28]">&lt;stikonas&gt;</a></span><span class="message">that's probably not ideal either</span></div><div class="line" id="005439"><span class="nick" style="color:#8dd3c7"><a href="#005439" label="[00:54:39]">&lt;stikonas&gt;</a></span><span class="message">if something is misdownloaded, you want to find asap</span></div><div class="line" id="005530"><span class="nick" style="color:#80b1d3"><a href="#005530" label="[00:55:30]">&lt;fossy&gt;</a></span><span class="message">no, both</span></div><div class="line" id="010302"><span class="nick" style="color:#8dd3c7"><a href="#010302" label="[01:03:02]">&lt;stikonas&gt;</a></span><span class="message">both is fine but it would be nice if we could share checksum file</span></div><div class="line" id="010305"><span class="nick" style="color:#8dd3c7"><a href="#010305" label="[01:03:05]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="010326"><span class="nick" style="color:#8dd3c7"><a href="#010326" label="[01:03:26]">&lt;stikonas&gt;</a></span><span class="message">maybe inside live-bootstrap we should just have /sources directory</span></div><div class="line" id="010339"><span class="nick" style="color:#8dd3c7"><a href="#010339" label="[01:03:39]">&lt;stikonas&gt;</a></span><span class="message">rather than putting all sources in subdirectories of each source package?</span></div><div class="line" id="011139"><span class="nick" style="color:#6b8072"><a href="#011139" label="[01:11:39]">&lt;oriansj&gt;</a></span><span class="message">fossy: my thought: a source.json file and the current SHA256SUMS.sources</span></div><div class="line" id="011241"><span class="nick" style="color:#6b8072"><a href="#011241" label="[01:12:41]">&lt;oriansj&gt;</a></span><span class="message">that way we have a standard file all build/setup tools could use and a single file making it trivial to verify that the sources have been downloaded separately in the after.kaem hook</span></div><div class="line" id="011320"><span class="nick" style="color:#8dd3c7"><a href="#011320" label="[01:13:20]">&lt;stikonas&gt;</a></span><span class="message">maybe then rootfs.py can read json (or maybe yml) file instead of it being hardcoded in .py files</span></div><div class="line" id="012053"><span class="nick" style="color:#6b8072"><a href="#012053" label="[01:20:53]">&lt;oriansj&gt;</a></span><span class="message">indeed</span></div><div class="line" id="023420"><span class="nick" style="color:#80b1d3"><a href="#023420" label="[02:34:20]">&lt;fossy&gt;</a></span><span class="message">yes, as long as the config file is human readable</span></div><div class="line" id="023426"><span class="nick" style="color:#80b1d3"><a href="#023426" label="[02:34:26]">&lt;fossy&gt;</a></span><span class="message">and writeable</span></div><div class="line" id="034031"><span class="nick" style="color:#6b8072"><a href="#034031" label="[03:40:31]">&lt;oriansj&gt;</a></span><span class="message">fossy: absolutely, without question.</span></div><div class="line" id="074843"><span class="nick" style="color:#389600"><a href="#074843" label="[07:48:43]">&lt;doras&gt;</a></span><span class="message">stikonas:  a `/dev/null` is required:... (full message at <a rel="nofollow" href="https://libera.ems.host/_matrix/media/r0/download/libera.chat/40dd47a8b3b480e6e045d3c736e412c5d342944b">https://libera.ems.host/_matrix/media/r0/download/libera.chat/40dd47a8b3b480e6e045d3c736e412c5d342944b</a>) </span></div><div class="line" id="075812"><span class="nick" style="color:#389600"><a href="#075812" label="[07:58:12]">&lt;doras&gt;</a></span><span class="message">Another thing to consider is that our repo should be fully buildable in any of the architectures we support. We also have aarch64 and ppc64le CI runners in addition to x86_64 that constantly build it, potentially from scratch if nothing is cached (which is rare, but must be possible). This means that as far as I can tell, we can't make live-bootstrap an element of the main repo, as it can only produce an x86 system at the moment. Once</span></div><div class="line" id="075813"><span class="nick" style="color:#389600"><a href="#075813" label="[07:58:13]">&lt;doras&gt;</a></span><span class="message">that system is produced, we are expected to use a x86 or x86_64 hardware to cross-compile the other architectures.</span></div><div class="line" id="080233"><span class="nick" style="color:#389600"><a href="#080233" label="[08:02:33]">&lt;doras&gt;</a></span><span class="message">So I think we'd have to put the entire live-bootstrap build process it in a separate repo which would eventually build a Docker/OSI/OSTree image (I'll need to see what would work best) for each architecture, that we could then use in the main repo as a binary base to continue the bootstrap process.</span></div><div class="line" id="081018"><span class="nick" style="color:#389600"><a href="#081018" label="[08:10:18]">&lt;doras&gt;</a></span><span class="message">That separate repo would be buildable only in x86 or x86_64 hardware.</span></div><div class="line" id="083701"><span class="nick" style="color:#389600"><a href="#083701" label="[08:37:01]">&lt;doras&gt;</a></span><span class="message">Also, regarding /dev/null and similar, it seems that BuildStream can create those in its sandbox without any special permissions.</span></div><div class="line" id="084215"><span class="nick" style="color:#389600"><a href="#084215" label="[08:42:15]">&lt;doras&gt;</a></span><span class="message">BuildStream's builds are basically always sandboxed, so it has similar requirements to yours when it comes to preparing the build environment. Its /dev seems to contain device nodes as you'd expect, but as far as I know BuildStream runs without any elevated permissions. This is from inside its sandbox:... (full message at <a rel="nofollow" href="https://libera.ems.host/_matrix/media/r0/download/libera.chat/b079434fdf86139848149daf786dd4c558d2a315">https://libera.ems.host/_matrix/media/r0/download/libera.chat/b079434fdf86139848149daf786dd4c558d2a315</a>) </span></div><div class="line" id="084926"><span class="nick" style="color:#389600"><a href="#084926" label="[08:49:26]">&lt;doras&gt;</a></span><span class="message">I suspect it uses bubblewrap to expose a few /dev nodes from the host so that it doesn't have to create them on its own. It's not a full chroot.</span></div><div class="line" id="085009"><span class="nick" style="color:#389600"><a href="#085009" label="[08:50:09]">&lt;doras&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/apache/buildstream/blob/a935429a8089b12e46a0257372efedd4fa13dbb7/src/buildstream/sandbox/sandbox.py#L116">https://github.com/apache/buildstream/blob/a935429a8089b12e46a0257372efedd4fa13dbb7/src/buildstream/sandbox/sandbox.py#L116</a> </span></div><div class="line" id="085128"><span class="nick" style="color:#389600"><a href="#085128" label="[08:51:28]">&lt;doras&gt;</a></span><span class="message">Actually, a better resource: <a rel="nofollow" href="https://github.com/apache/buildstream/blob/a935429a8089b12e46a0257372efedd4fa13dbb7/doc/source/arch_sandboxing.rst#what-elements-can-and-cant-do-in-the-sandbox">https://github.com/apache/buildstream/blob/a935429a8089b12e46a0257372efedd4fa13dbb7/doc/source/arch_sandboxing.rst#what-elements-can-and-cant-do-in-the-sandbox</a> </span></div><div class="line" id="104922"><span class="nick" style="color:#389600"><a href="#104922" label="[10:49:22]">&lt;doras&gt;</a></span><span class="message">I'm trying to add an option to use a `bwrap` sandbox instead of a chroot. Since it relies upon user namespaces (or a SUID binary) it can mount tmpfs, device nodes and probably everything live-bootstrap requires without having to get explicit root permissions.</span></div><div class="line" id="105112"><span class="nick" style="color:#389600"><a href="#105112" label="[10:51:12]">&lt;doras&gt;</a></span><span class="message">This will still prove problematic when built using BuildStream, since nested sandboxes aren't going to work.</span></div><div class="line" id="105129"><span class="nick" style="color:#389600"><a href="#105129" label="[10:51:29]">&lt;doras&gt;</a></span><span class="message">But... it's a step.</span></div><div class="line" id="111513"><span class="nick" style="color:#389600"><a href="#111513" label="[11:15:13]">&lt;doras&gt;</a></span><span class="message">So far it seems to build. I exposed the expected /dev nodes from the host's to the sandbox, so hopefully autotools won't complain.</span></div><div class="line" id="113401"><span class="nick" style="color:#389600"><a href="#113401" label="[11:34:01]">&lt;doras&gt;</a></span><span class="message">It doesn't.</span></div><div class="line" id="113420"><span class="nick" style="color:#389600"><a href="#113420" label="[11:34:20]">&lt;doras&gt;</a></span><span class="message">Also, &quot;as&quot; crashed during the build. It didn't stop the build though.</span></div><div class="line" id="113556"><span class="nick" style="color:#389600"><a href="#113556" label="[11:35:56]">&lt;doras&gt;</a></span><span class="message">It crashed with SIGSEGV when this command was executed: &quot;/usr/bin/as --fatal-warnings -o conftest.o conftest.s&quot;</span></div><div class="line" id="113739"><span class="nick" style="color:#389600"><a href="#113739" label="[11:37:39]">&lt;doras&gt;</a></span><span class="message">Got this now, much later than before:</span></div><div class="line" id="113739"><span class="nick" style="color:#389600"><a href="#113739" label="[11:37:39]">&lt;doras&gt;</a></span><span class="message">make-3.82: build successful</span></div><div class="line" id="113739"><span class="nick" style="color:#389600"><a href="#113739" label="[11:37:39]">&lt;doras&gt;</a></span><span class="message">mknod: `/dev/null': Operation not permitted</span></div><div class="line" id="114001"><span class="nick" style="color:#389600"><a href="#114001" label="[11:40:01]">&lt;doras&gt;</a></span><span class="message">Seems to be after the chroot to sysc, so at least sysa was successful.</span></div><div class="line" id="114343"><span class="nick" style="color:#6d2462"><a href="#114343" label="[11:43:43]">&lt;stikonas[m]&gt;</a></span><span class="message">ok, sounds like you are making good progress</span></div><div class="line" id="114457"><span class="nick" style="color:#389600"><a href="#114457" label="[11:44:57]">&lt;doras&gt;</a></span><span class="message">That nested chroot is a bit tricky. Why do we do it?</span></div><div class="line" id="121242"><span class="nick" style="color:#6d2462"><a href="#121242" label="[12:12:42]">&lt;stikonas[m]&gt;</a></span><span class="message">That was equivalent of rebooting into a new kernel</span></div><div class="line" id="121259"><span class="nick" style="color:#6d2462"><a href="#121259" label="[12:12:59]">&lt;stikonas[m]&gt;</a></span><span class="message">It's not really necessary for chroot mode</span></div><div class="line" id="121310"><span class="nick" style="color:#6d2462"><a href="#121310" label="[12:13:10]">&lt;stikonas[m]&gt;</a></span><span class="message">It's just implementation detail...</span></div><div class="line" id="121334"><span class="nick" style="color:#6d2462"><a href="#121334" label="[12:13:34]">&lt;stikonas[m]&gt;</a></span><span class="message">fossy: any thoughts?</span></div><div class="line" id="121616"><span class="nick" style="color:#6d2462"><a href="#121616" label="[12:16:16]">&lt;stikonas[m]&gt;</a></span><span class="message">Ideally file system state should be similar in qemu/chroot mode</span></div><div class="line" id="121635"><span class="nick" style="color:#389600"><a href="#121635" label="[12:16:35]">&lt;doras&gt;</a></span><span class="message">I tried creating the /dev nodes inside sysa/tmp/sysc/dev/* too.</span></div><div class="line" id="121635"><span class="nick" style="color:#6d2462"><a href="#121635" label="[12:16:35]">&lt;stikonas[m]&gt;</a></span><span class="message">chroot was just the easiest way to accomplish that</span></div><div class="line" id="121649"><span class="nick" style="color:#6d2462"><a href="#121649" label="[12:16:49]">&lt;stikonas[m]&gt;</a></span><span class="message">Hmm, would fakechroot be better?</span></div><div class="line" id="121705"><span class="nick" style="color:#6d2462"><a href="#121705" label="[12:17:05]">&lt;stikonas[m]&gt;</a></span><span class="message">If we can build it</span></div><div class="line" id="121731"><span class="nick" style="color:#389600"><a href="#121731" label="[12:17:31]">&lt;doras&gt;</a></span><span class="message">So now we have them in both sysa/tmp/dev/ and sysa/tmp/sysc/dev/</span></div><div class="line" id="121739"><span class="nick" style="color:#6d2462"><a href="#121739" label="[12:17:39]">&lt;stikonas[m]&gt;</a></span><span class="message">Ok</span></div><div class="line" id="121746"><span class="nick" style="color:#6d2462"><a href="#121746" label="[12:17:46]">&lt;stikonas[m]&gt;</a></span><span class="message">Does that help?</span></div><div class="line" id="121802"><span class="nick" style="color:#389600"><a href="#121802" label="[12:18:02]">&lt;doras&gt;</a></span><span class="message">I started the build again, but unfortunately as you know I have to go through the sysa build again.</span></div><div class="line" id="121823"><span class="nick" style="color:#6d2462"><a href="#121823" label="[12:18:23]">&lt;stikonas[m]&gt;</a></span><span class="message">Yeah, that's painful part of development</span></div><div class="line" id="121843"><span class="nick" style="color:#6d2462"><a href="#121843" label="[12:18:43]">&lt;stikonas[m]&gt;</a></span><span class="message">You saw fossy is working on some binary packages...</span></div><div class="line" id="121856"><span class="nick" style="color:#6d2462"><a href="#121856" label="[12:18:56]">&lt;stikonas[m]&gt;</a></span><span class="message">To be able to restart from the middle</span></div><div class="line" id="121921"><span class="nick" style="color:#389600"><a href="#121921" label="[12:19:21]">&lt;doras&gt;</a></span><span class="message">Yeah.</span></div><div class="line" id="122354"><span class="nick" style="color:#389600"><a href="#122354" label="[12:23:54]">&lt;doras&gt;</a></span><span class="message">I think the project may need some better structuring. There's a lot of copying, jumping around, execution of elevated commands at arbitrary places, and lack of clear sandbox-specific execution paths (QEMU, chroot, etc.)</span></div><div class="line" id="122425"><span class="nick" style="color:#389600"><a href="#122425" label="[12:24:25]">&lt;doras&gt;</a></span><span class="message">sysc has a tmp directory but it's actually build under sysa's tmp directory is also a bit strange.</span></div><div class="line" id="122431"><span class="nick" style="color:#389600"><a href="#122431" label="[12:24:31]">&lt;doras&gt;</a></span><span class="message">built*</span></div><div class="line" id="122442"><span class="nick" style="color:#6d2462"><a href="#122442" label="[12:24:42]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, we had no downstream users yet... It's hard to adjust when you don't know requirements</span></div><div class="line" id="122456"><span class="nick" style="color:#80b1d3"><a href="#122456" label="[12:24:56]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: remind me the original reason for why we did chroot_transition under sysa for chroot, was it just consistency?</span></div><div class="line" id="122459"><span class="nick" style="color:#80b1d3"><a href="#122459" label="[12:24:59]">&lt;fossy&gt;</a></span><span class="message">oh, nvm i remember now</span></div><div class="line" id="122503"><span class="nick" style="color:#80b1d3"><a href="#122503" label="[12:25:03]">&lt;fossy&gt;</a></span><span class="message">privileges</span></div><div class="line" id="122511"><span class="nick" style="color:#389600"><a href="#122511" label="[12:25:11]">&lt;doras&gt;</a></span><span class="message">Makes sense.</span></div><div class="line" id="122524"><span class="nick" style="color:#389600"><a href="#122524" label="[12:25:24]">&lt;doras&gt;</a></span><span class="message">You didn't want to user to enter a password again mid-build.</span></div><div class="line" id="122530"><span class="nick" style="color:#80b1d3"><a href="#122530" label="[12:25:30]">&lt;fossy&gt;</a></span><span class="message">^ precisely</span></div><div class="line" id="122538"><span class="nick" style="color:#6d2462"><a href="#122538" label="[12:25:38]">&lt;stikonas[m]&gt;</a></span><span class="message">Else you just need rootfs.py to copy things and start new chroot...</span></div><div class="line" id="122544"><span class="nick" style="color:#6d2462"><a href="#122544" label="[12:25:44]">&lt;stikonas[m]&gt;</a></span><span class="message">Yeah...</span></div><div class="line" id="122547"><span class="nick" style="color:#80b1d3"><a href="#122547" label="[12:25:47]">&lt;fossy&gt;</a></span><span class="message">w/r/t structuring, i generally agree</span></div><div class="line" id="122611"><span class="nick" style="color:#80b1d3"><a href="#122611" label="[12:26:11]">&lt;fossy&gt;</a></span><span class="message">but any restructing needs to keep in mind that the first-class platform is bare metal, possible without rootfs.py</span></div><div class="line" id="122618"><span class="nick" style="color:#6d2462"><a href="#122618" label="[12:26:18]">&lt;stikonas[m]&gt;</a></span><span class="message">Password mid-build means you can't leave it running unsupervised</span></div><div class="line" id="122630"><span class="nick" style="color:#6d2462"><a href="#122630" label="[12:26:30]">&lt;stikonas[m]&gt;</a></span><span class="message">Since sudo prompts time out</span></div><div class="line" id="122641"><span class="nick" style="color:#80b1d3"><a href="#122641" label="[12:26:41]">&lt;fossy&gt;</a></span><span class="message">because, at the end of the day, we are trying to eliminate seeds</span></div><div class="line" id="122652"><span class="nick" style="color:#389600"><a href="#122652" label="[12:26:52]">&lt;doras&gt;</a></span><span class="message">But it's only because sudo is used in the first place, and also for the build itself which is very bad in general.</span></div><div class="line" id="122709"><span class="nick" style="color:#80b1d3"><a href="#122709" label="[12:27:09]">&lt;fossy&gt;</a></span><span class="message">that is ~not possible to eliminate</span></div><div class="line" id="122724"><span class="nick" style="color:#80b1d3"><a href="#122724" label="[12:27:24]">&lt;fossy&gt;</a></span><span class="message">there is no concept of users or groups for quite some time in the build</span></div><div class="line" id="122724"><span class="nick" style="color:#6d2462"><a href="#122724" label="[12:27:24]">&lt;stikonas[m]&gt;</a></span><span class="message">sudo?</span></div><div class="line" id="122735"><span class="nick" style="color:#80b1d3"><a href="#122735" label="[12:27:35]">&lt;fossy&gt;</a></span><span class="message">yeah</span></div><div class="line" id="122752"><span class="nick" style="color:#80b1d3"><a href="#122752" label="[12:27:52]">&lt;fossy&gt;</a></span><span class="message">any tool eliminating root access would have to be external</span></div><div class="line" id="122800"><span class="nick" style="color:#6d2462"><a href="#122800" label="[12:28:00]">&lt;stikonas[m]&gt;</a></span><span class="message">But fakeroot could simulate door, can't it?</span></div><div class="line" id="122821"><span class="nick" style="color:#6d2462"><a href="#122821" label="[12:28:21]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, yes it has to be external</span></div><div class="line" id="122828"><span class="nick" style="color:#6d2462"><a href="#122828" label="[12:28:28]">&lt;stikonas[m]&gt;</a></span><span class="message">But it can be optional</span></div><div class="line" id="122834"><span class="nick" style="color:#389600"><a href="#122834" label="[12:28:34]">&lt;doras&gt;</a></span><span class="message">I'm using &quot;unshare ---map-root-user&quot; instead of fakeroot, since it's much more standard and simple.</span></div><div class="line" id="122846"><span class="nick" style="color:#389600"><a href="#122846" label="[12:28:46]">&lt;doras&gt;</a></span><span class="message">And yeah, I don't actually need root to build anything as far as I can tell.</span></div><div class="line" id="122851"><span class="nick" style="color:#80b1d3"><a href="#122851" label="[12:28:51]">&lt;fossy&gt;</a></span><span class="message">yeah, i wouldn't say fakeroot is the best for this application, but i see what you're saying</span></div><div class="line" id="122853"><span class="nick" style="color:#6d2462"><a href="#122853" label="[12:28:53]">&lt;stikonas[m]&gt;</a></span><span class="message">OK, but same idea</span></div><div class="line" id="122915"><span class="nick" style="color:#389600"><a href="#122915" label="[12:29:15]">&lt;doras&gt;</a></span><span class="message">sysa completed successfully without any root permissions, and I'm assuming sysc can too.</span></div><div class="line" id="122917"><span class="nick" style="color:#80b1d3"><a href="#122917" label="[12:29:17]">&lt;fossy&gt;</a></span><span class="message">doras: no build per se requires it but mknod, etc</span></div><div class="line" id="122933"><span class="nick" style="color:#6d2462"><a href="#122933" label="[12:29:33]">&lt;stikonas[m]&gt;</a></span><span class="message">And possibly mount</span></div><div class="line" id="122952"><span class="nick" style="color:#80b1d3"><a href="#122952" label="[12:29:52]">&lt;fossy&gt;</a></span><span class="message">well, i am assuming that if you aren't wanting to use root, you are not working with filesystems</span></div><div class="line" id="122957"><span class="nick" style="color:#6d2462"><a href="#122957" label="[12:29:57]">&lt;stikonas[m]&gt;</a></span><span class="message">Or maybe we don't use mount</span></div><div class="line" id="123001"><span class="nick" style="color:#389600"><a href="#123001" label="[12:30:01]">&lt;doras&gt;</a></span><span class="message">mknod and mount is not required either if you use user namespaces.</span></div><div class="line" id="123043"><span class="nick" style="color:#80b1d3"><a href="#123043" label="[12:30:43]">&lt;fossy&gt;</a></span><span class="message">so really all this requires is a bit of logic within live-bootstrap and a couple new options to rootfs.py</span></div><div class="line" id="123050"><span class="nick" style="color:#6d2462"><a href="#123050" label="[12:30:50]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, let's see if sysc builds, then maybe you can create a patch</span></div><div class="line" id="123104"><span class="nick" style="color:#80b1d3"><a href="#123104" label="[12:31:04]">&lt;fossy&gt;</a></span><span class="message">doras: can you elaborate on &quot;lack of clear sandbox-specific execution paths&quot;</span></div><div class="line" id="123256"><span class="nick" style="color:#389600"><a href="#123256" label="[12:32:56]">&lt;doras&gt;</a></span><span class="message">As I mentioned, I'm currently adding a bwrap (<a rel="nofollow" href="https://github.com/containers/bubblewrap">https://github.com/containers/bubblewrap</a>)  mode as an alternative to the existing chroot mode, since relies upon user namespaces (or SUID as fallback) behind the scenes for mounting /dev nodes, tmpfs the initial chroot, etc.</span></div><div class="line" id="123352"><span class="nick" style="color:#389600"><a href="#123352" label="[12:33:52]">&lt;doras&gt;</a></span><span class="message">So it allows me to build without root privileges at all, but it also reveals that we're not preparing things ahead of time enough for the sandbox-specific execution paths.</span></div><div class="line" id="123424"><span class="nick" style="color:#80b1d3"><a href="#123424" label="[12:34:24]">&lt;fossy&gt;</a></span><span class="message">what preparing is required?</span></div><div class="line" id="123510"><span class="nick" style="color:#80b1d3"><a href="#123510" label="[12:35:10]">&lt;fossy&gt;</a></span><span class="message">one of the design goals of live-bootstrap is that as little external preperation is completed as possible, so i like to avoid too much preparing things ahead of time</span></div><div class="line" id="123521"><span class="nick" style="color:#389600"><a href="#123521" label="[12:35:21]">&lt;doras&gt;</a></span><span class="message">For example, the /dev nodes. They are created on-the-fly during bootstrap at the moment.</span></div><div class="line" id="123542"><span class="nick" style="color:#389600"><a href="#123542" label="[12:35:42]">&lt;doras&gt;</a></span><span class="message">This is something we can prepare before entering bootstrap.</span></div><div class="line" id="123621"><span class="nick" style="color:#80b1d3"><a href="#123621" label="[12:36:21]">&lt;fossy&gt;</a></span><span class="message">we can but we shouldn't, as little as possible should be done outside of the bootstrap. if it's needed for a specific usecase we can add that, but it shouldn't be a default</span></div><div class="line" id="123631"><span class="nick" style="color:#6d2462"><a href="#123631" label="[12:36:31]">&lt;stikonas[m]&gt;</a></span><span class="message">Well on real hw you have to create them on the fly</span></div><div class="line" id="123640"><span class="nick" style="color:#389600"><a href="#123640" label="[12:36:40]">&lt;doras&gt;</a></span><span class="message">I'm guessing that I'll find the same about sysc's tmpfs, but I haven't gotten there yet.</span></div><div class="line" id="123704"><span class="nick" style="color:#6d2462"><a href="#123704" label="[12:37:04]">&lt;stikonas[m]&gt;</a></span><span class="message">We can add an option to create them before if you want to run rootless</span></div><div class="line" id="123708"><span class="nick" style="color:#80b1d3"><a href="#123708" label="[12:37:08]">&lt;fossy&gt;</a></span><span class="message">^ yeah</span></div><div class="line" id="123728"><span class="nick" style="color:#6d2462"><a href="#123728" label="[12:37:28]">&lt;stikonas[m]&gt;</a></span><span class="message">But creating them on the fly should be possible</span></div><div class="line" id="123745"><span class="nick" style="color:#6d2462"><a href="#123745" label="[12:37:45]">&lt;stikonas[m]&gt;</a></span><span class="message">Adding some optional paths is easy once we have bash</span></div><div class="line" id="123753"><span class="nick" style="color:#80b1d3"><a href="#123753" label="[12:37:53]">&lt;fossy&gt;</a></span><span class="message">it's odd that mknod requires root tbh though</span></div><div class="line" id="123811"><span class="nick" style="color:#6d2462"><a href="#123811" label="[12:38:11]">&lt;stikonas[m]&gt;</a></span><span class="message">Actually these days even before bash, kaem supports &quot;if&quot; too</span></div><div class="line" id="123841"><span class="nick" style="color:#389600"><a href="#123841" label="[12:38:41]">&lt;doras&gt;</a></span><span class="message">It requires the CAP_MKNOD capability, yeah.</span></div><div class="line" id="123848"><span class="nick" style="color:#389600"><a href="#123848" label="[12:38:48]">&lt;doras&gt;</a></span><span class="message">Which means it requires elevated permissions.</span></div><div class="line" id="123856"><span class="nick" style="color:#80b1d3"><a href="#123856" label="[12:38:56]">&lt;fossy&gt;</a></span><span class="message">right</span></div><div class="line" id="123925"><span class="nick" style="color:#6d2462"><a href="#123925" label="[12:39:25]">&lt;stikonas[m]&gt;</a></span><span class="message">Probably for other nodes...</span></div><div class="line" id="123952"><span class="nick" style="color:#389600"><a href="#123952" label="[12:39:52]">&lt;doras&gt;</a></span><span class="message">Gah, I got &quot;mount: permission denied&quot;</span></div><div class="line" id="123959"><span class="nick" style="color:#6d2462"><a href="#123959" label="[12:39:59]">&lt;stikonas[m]&gt;</a></span><span class="message"> /dev/null itself does nothing dangerous...</span></div><div class="line" id="124016"><span class="nick" style="color:#389600"><a href="#124016" label="[12:40:16]">&lt;doras&gt;</a></span><span class="message">I guess I got to the on-the-fly creation of sysc's tmpfs</span></div><div class="line" id="124028"><span class="nick" style="color:#6d2462"><a href="#124028" label="[12:40:28]">&lt;stikonas[m]&gt;</a></span><span class="message">Probably</span></div><div class="line" id="124038"><span class="nick" style="color:#80b1d3"><a href="#124038" label="[12:40:38]">&lt;fossy&gt;</a></span><span class="message">yes, probably</span></div><div class="line" id="124118"><span class="nick" style="color:#80b1d3"><a href="#124118" label="[12:41:18]">&lt;fossy&gt;</a></span><span class="message">(note that, on-the-fly creation is required, whether within or outside of isolation mechanism, as binaries from sysa need to be transferred to sysc)</span></div><div class="line" id="124121"><span class="nick" style="color:#6d2462"><a href="#124121" label="[12:41:21]">&lt;stikonas[m]&gt;</a></span><span class="message">Oh no</span></div><div class="line" id="124128"><span class="nick" style="color:#6d2462"><a href="#124128" label="[12:41:28]">&lt;stikonas[m]&gt;</a></span><span class="message">You are going into sysb</span></div><div class="line" id="124137"><span class="nick" style="color:#80b1d3"><a href="#124137" label="[12:41:37]">&lt;fossy&gt;</a></span><span class="message">no sysb for chroot?</span></div><div class="line" id="124139"><span class="nick" style="color:#6d2462"><a href="#124139" label="[12:41:39]">&lt;stikonas[m]&gt;</a></span><span class="message">Rather than sysc</span></div><div class="line" id="124151"><span class="nick" style="color:#6d2462"><a href="#124151" label="[12:41:51]">&lt;stikonas[m]&gt;</a></span><span class="message">But only sysb uses mount</span></div><div class="line" id="124203"><span class="nick" style="color:#80b1d3"><a href="#124203" label="[12:42:03]">&lt;fossy&gt;</a></span><span class="message">oh, crap</span></div><div class="line" id="124205"><span class="nick" style="color:#6d2462"><a href="#124205" label="[12:42:05]">&lt;stikonas[m]&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysa/run.sh">https://github.com/fosslinux/live-bootstrap/blob/master/sysa/run.sh</a> </span></div><div class="line" id="124234"><span class="nick" style="color:#80b1d3"><a href="#124234" label="[12:42:34]">&lt;fossy&gt;</a></span><span class="message">tl;dr is that chroot/bwrap/etc don't use sysb, as sysb prepares a *real disk*</span></div><div class="line" id="124240"><span class="nick" style="color:#80b1d3"><a href="#124240" label="[12:42:40]">&lt;fossy&gt;</a></span><span class="message">for use with kernel</span></div><div class="line" id="124248"><span class="nick" style="color:#389600"><a href="#124248" label="[12:42:48]">&lt;doras&gt;</a></span><span class="message">:)</span></div><div class="line" id="124316"><span class="nick" style="color:#6d2462"><a href="#124316" label="[12:43:16]">&lt;stikonas[m]&gt;</a></span><span class="message">Is ${CHROOT} True?</span></div><div class="line" id="124332"><span class="nick" style="color:#80b1d3"><a href="#124332" label="[12:43:32]">&lt;fossy&gt;</a></span><span class="message">you want to go with chroot as a starting point</span></div><div class="line" id="124403"><span class="nick" style="color:#389600"><a href="#124403" label="[12:44:03]">&lt;doras&gt;</a></span><span class="message">I did set CHROOT to True, yes.</span></div><div class="line" id="124413"><span class="nick" style="color:#80b1d3"><a href="#124413" label="[12:44:13]">&lt;fossy&gt;</a></span><span class="message">hmmmm</span></div><div class="line" id="124419"><span class="nick" style="color:#6d2462"><a href="#124419" label="[12:44:19]">&lt;stikonas[m]&gt;</a></span><span class="message">Well run.sh should choose the path based on CHROOT env variable</span></div><div class="line" id="124427"><span class="nick" style="color:#6d2462"><a href="#124427" label="[12:44:27]">&lt;stikonas[m]&gt;</a></span><span class="message">Why is mount used then...</span></div><div class="line" id="124450"><span class="nick" style="color:#80b1d3"><a href="#124450" label="[12:44:50]">&lt;fossy&gt;</a></span><span class="message">depends on how CHROOT was set to true</span></div><div class="line" id="124459"><span class="nick" style="color:#80b1d3"><a href="#124459" label="[12:44:59]">&lt;fossy&gt;</a></span><span class="message">doras: did you just set that in the host environment, or some other way</span></div><div class="line" id="124532"><span class="nick" style="color:#6d2462"><a href="#124532" label="[12:45:32]">&lt;stikonas[m]&gt;</a></span><span class="message">Oh sysc uses mount too</span></div><div class="line" id="124548"><span class="nick" style="color:#6d2462"><a href="#124548" label="[12:45:48]">&lt;stikonas[m]&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysc/run.sh">https://github.com/fosslinux/live-bootstrap/blob/master/sysc/run.sh</a> </span></div><div class="line" id="124556"><span class="nick" style="color:#389600"><a href="#124556" label="[12:45:56]">&lt;doras&gt;</a></span><span class="message">stikonas: I think this is why: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysc/run.sh#L24">https://github.com/fosslinux/live-bootstrap/blob/master/sysc/run.sh#L24</a> </span></div><div class="line" id="124558"><span class="nick" style="color:#6d2462"><a href="#124558" label="[12:45:58]">&lt;stikonas[m]&gt;</a></span><span class="message">In create_fhs</span></div><div class="line" id="124604"><span class="nick" style="color:#389600"><a href="#124604" label="[12:46:04]">&lt;doras&gt;</a></span><span class="message">Yeah, that.</span></div><div class="line" id="124610"><span class="nick" style="color:#80b1d3"><a href="#124610" label="[12:46:10]">&lt;fossy&gt;</a></span><span class="message">oh, so you got to sysc without problems?</span></div><div class="line" id="124625"><span class="nick" style="color:#389600"><a href="#124625" label="[12:46:25]">&lt;doras&gt;</a></span><span class="message">With many solved problems :)</span></div><div class="line" id="124643"><span class="nick" style="color:#80b1d3"><a href="#124643" label="[12:46:43]">&lt;fossy&gt;</a></span><span class="message">well, problems with the transition :P</span></div><div class="line" id="124650"><span class="nick" style="color:#6d2462"><a href="#124650" label="[12:46:50]">&lt;stikonas[m]&gt;</a></span><span class="message">Possibly some of those can be hidden under if</span></div><div class="line" id="124712"><span class="nick" style="color:#80b1d3"><a href="#124712" label="[12:47:12]">&lt;fossy&gt;</a></span><span class="message">they are required for something (don't remember what)</span></div><div class="line" id="124712"><span class="nick" style="color:#389600"><a href="#124712" label="[12:47:12]">&lt;doras&gt;</a></span><span class="message">chroot is allowed in the bwrap sandbox.</span></div><div class="line" id="124726"><span class="nick" style="color:#80b1d3"><a href="#124726" label="[12:47:26]">&lt;fossy&gt;</a></span><span class="message">but they can deffo be externally put in</span></div><div class="line" id="124740"><span class="nick" style="color:#389600"><a href="#124740" label="[12:47:40]">&lt;doras&gt;</a></span><span class="message">I just ensured that we had /dev nodes prepared for the eventual chroot ahead of time.</span></div><div class="line" id="124741"><span class="nick" style="color:#6d2462"><a href="#124741" label="[12:47:41]">&lt;stikonas[m]&gt;</a></span><span class="message">Maybe we need new env variable, e.g. ROOTLESS</span></div><div class="line" id="124757"><span class="nick" style="color:#80b1d3"><a href="#124757" label="[12:47:57]">&lt;fossy&gt;</a></span><span class="message">yeah, i agree stikonas</span></div><div class="line" id="124801"><span class="nick" style="color:#6d2462"><a href="#124801" label="[12:48:01]">&lt;stikonas[m]&gt;</a></span><span class="message">For bwrap mode</span></div><div class="line" id="124819"><span class="nick" style="color:#6d2462"><a href="#124819" label="[12:48:19]">&lt;stikonas[m]&gt;</a></span><span class="message">Rooted chroot can still create those</span></div><div class="line" id="124833"><span class="nick" style="color:#80b1d3"><a href="#124833" label="[12:48:33]">&lt;fossy&gt;</a></span><span class="message">yeah, chroot should be as close of a mirror to qemu as possible IMO</span></div><div class="line" id="124952"><span class="nick" style="color:#8dd3c7"><a href="#124952" label="[12:49:52]">&lt;stikonas&gt;</a></span><span class="message">hopefully the whole thing is not hard to adjust</span></div><div class="line" id="124958"><span class="nick" style="color:#8dd3c7"><a href="#124958" label="[12:49:58]">&lt;stikonas&gt;</a></span><span class="message">once we have bash, scripting is quite easy there</span></div><div class="line" id="125007"><span class="nick" style="color:#80b1d3"><a href="#125007" label="[12:50:07]">&lt;fossy&gt;</a></span><span class="message">shouldn't be, bootstrap.cfg makes this pretty simple</span></div><div class="line" id="125012"><span class="nick" style="color:#8dd3c7"><a href="#125012" label="[12:50:12]">&lt;stikonas&gt;</a></span><span class="message">and we get bash quite early</span></div><div class="line" id="125024"><span class="nick" style="color:#80b1d3"><a href="#125024" label="[12:50:24]">&lt;fossy&gt;</a></span><span class="message">well, nothing rooted is required pre-bash</span></div><div class="line" id="125306"><span class="nick" style="color:#8dd3c7"><a href="#125306" label="[12:53:06]">&lt;stikonas&gt;</a></span><span class="message">first time device nodes (/dev/null) is used is for musl's configure script</span></div><div class="line" id="125315"><span class="nick" style="color:#8dd3c7"><a href="#125315" label="[12:53:15]">&lt;stikonas&gt;</a></span><span class="message">although like I said before something is broken there</span></div><div class="line" id="125329"><span class="nick" style="color:#8dd3c7"><a href="#125329" label="[12:53:29]">&lt;stikonas&gt;</a></span><span class="message">and /dev/null node gets replaces by a file during configure run</span></div><div class="line" id="125340"><span class="nick" style="color:#80b1d3"><a href="#125340" label="[12:53:40]">&lt;fossy&gt;</a></span><span class="message">configure script has some incompatibility i think</span></div><div class="line" id="125354"><span class="nick" style="color:#8dd3c7"><a href="#125354" label="[12:53:54]">&lt;stikonas&gt;</a></span><span class="message">yeah, either bash or mes libc...</span></div><div class="line" id="125412"><span class="nick" style="color:#80b1d3"><a href="#125412" label="[12:54:12]">&lt;fossy&gt;</a></span><span class="message">hmm, no i think it is simpler</span></div><div class="line" id="125422"><span class="nick" style="color:#80b1d3"><a href="#125422" label="[12:54:22]">&lt;fossy&gt;</a></span><span class="message">we dont have /dev/null node afaict</span></div><div class="line" id="125541"><span class="nick" style="color:#8dd3c7"><a href="#125541" label="[12:55:41]">&lt;stikonas&gt;</a></span><span class="message">no, even if we have /dev/null it still does that</span></div><div class="line" id="125553"><span class="nick" style="color:#8dd3c7"><a href="#125553" label="[12:55:53]">&lt;stikonas&gt;</a></span><span class="message">(in subsequent musl rebuilds after we have /dev/null)</span></div><div class="line" id="125554"><span class="nick" style="color:#80b1d3"><a href="#125554" label="[12:55:54]">&lt;fossy&gt;</a></span><span class="message">oh</span></div><div class="line" id="125602"><span class="nick" style="color:#80b1d3"><a href="#125602" label="[12:56:02]">&lt;fossy&gt;</a></span><span class="message">odd</span></div><div class="line" id="125621"><span class="nick" style="color:#8dd3c7"><a href="#125621" label="[12:56:21]">&lt;stikonas&gt;</a></span><span class="message">but maybe we still used that old bash then</span></div><div class="line" id="125629"><span class="nick" style="color:#8dd3c7"><a href="#125629" label="[12:56:29]">&lt;stikonas&gt;</a></span><span class="message">hence I was blaming bash built with mes libc</span></div><div class="line" id="131138"><span class="nick" style="color:#389600"><a href="#131138" label="[13:11:38]">&lt;doras&gt;</a></span><span class="message">By the way, the current /dev we create is a normal directory, while it should usually be devtmpfs.</span></div><div class="line" id="131212"><span class="nick" style="color:#389600"><a href="#131212" label="[13:12:12]">&lt;doras&gt;</a></span><span class="message">I'm not sure what can affect, but just FYI.</span></div><div class="line" id="131234"><span class="nick" style="color:#389600"><a href="#131234" label="[13:12:34]">&lt;doras&gt;</a></span><span class="message">it can*</span></div><div class="line" id="131519"><span class="nick" style="color:#389600"><a href="#131519" label="[13:15:19]">&lt;doras&gt;</a></span><span class="message">Anyway, one way to make the entire preparation part more consistent is to always do it using bash.</span></div><div class="line" id="131623"><span class="nick" style="color:#389600"><a href="#131623" label="[13:16:23]">&lt;doras&gt;</a></span><span class="message">So both the sysa and sysc preparation is similar in syntax and reuses the same logic.</span></div><div class="line" id="132208"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o janneke</span></div><div class="line" id="132755"><span class="nick" style="color:#389600"><a href="#132755" label="[13:27:55]">&lt;doras&gt;</a></span><span class="message">Is there a trick I can do to start building sysc directly when I already have sysa built?</span></div><div class="line" id="132810"><span class="nick" style="color:#389600"><a href="#132810" label="[13:28:10]">&lt;doras&gt;</a></span><span class="message">I think I need a few iterations here and it's getting annoying rebuilding everything each time.</span></div><div class="line" id="132942"><span class="nick" style="color:#8dd3c7"><a href="#132942" label="[13:29:42]">&lt;stikonas&gt;</a></span><span class="message">doras: well, you can probably copy sysc somewhere else after preparations...</span></div><div class="line" id="132953"><span class="nick" style="color:#8dd3c7"><a href="#132953" label="[13:29:53]">&lt;stikonas&gt;</a></span><span class="message">but it's not easy to recreate rest of the environment...</span></div><div class="line" id="133014"><span class="nick" style="color:#8dd3c7"><a href="#133014" label="[13:30:14]">&lt;stikonas&gt;</a></span><span class="message">migth be easier to stop the build before it fails (comment out failing code and anything later)</span></div><div class="line" id="133034"><span class="nick" style="color:#8dd3c7"><a href="#133034" label="[13:30:34]">&lt;stikonas&gt;</a></span><span class="message">and then try command manually</span></div><div class="line" id="133047"><span class="nick" style="color:#8dd3c7"><a href="#133047" label="[13:30:47]">&lt;stikonas&gt;</a></span><span class="message">that's what I used to do for development</span></div><div class="line" id="133126"><span class="nick" style="color:#8dd3c7"><a href="#133126" label="[13:31:26]">&lt;stikonas&gt;</a></span><span class="message">although, you'll have to manually copy in static build of busybox</span></div><div class="line" id="133130"><span class="nick" style="color:#8dd3c7"><a href="#133130" label="[13:31:30]">&lt;stikonas&gt;</a></span><span class="message">(or some other shell)</span></div><div class="line" id="133137"><span class="nick" style="color:#8dd3c7"><a href="#133137" label="[13:31:37]">&lt;stikonas&gt;</a></span><span class="message">the first bash that we build is non-interactive</span></div><div class="line" id="133159"><span class="nick" style="color:#8dd3c7"><a href="#133159" label="[13:31:59]">&lt;stikonas&gt;</a></span><span class="message">only bash 5.1 (currently step 75) is built with readline</span></div><div class="line" id="133206"><span class="nick" style="color:#8dd3c7"><a href="#133206" label="[13:32:06]">&lt;stikonas&gt;</a></span><span class="message">and that is after sysc transition</span></div><div class="line" id="133533"><span class="nick" style="color:#389600"><a href="#133533" label="[13:35:33]">&lt;doras&gt;</a></span><span class="message">So the interactive one is built only as part of sysc?</span></div><div class="line" id="133555"><span class="nick" style="color:#389600"><a href="#133555" label="[13:35:55]">&lt;doras&gt;</a></span><span class="message">I'll try a trick, maybe it would work.</span></div><div class="line" id="134301"><span class="nick" style="color:#389600"><a href="#134301" label="[13:43:01]">&lt;doras&gt;</a></span><span class="message">Huh. The sysa &quot;ls&quot; seems very minimal.</span></div><div class="line" id="134412"><span class="nick" style="color:#389600"><a href="#134412" label="[13:44:12]">&lt;doras&gt;</a></span><span class="message">Or maybe I'm not doing something correctly.</span></div><div class="line" id="134744"><span class="nick" style="color:#389600"><a href="#134744" label="[13:47:44]">&lt;doras&gt;</a></span><span class="message">Or maybe I did something wrong.</span></div><div class="line" id="134803"><span class="nick" style="color:#389600"><a href="#134803" label="[13:48:03]">&lt;doras&gt;</a></span><span class="message">... because it's fine now</span></div><div class="line" id="135045"><span class="nick" style="color:#8dd3c7"><a href="#135045" label="[13:50:45]">&lt;stikonas&gt;</a></span><span class="message">yes, although we can build it earlier</span></div><div class="line" id="135054"><span class="nick" style="color:#8dd3c7"><a href="#135054" label="[13:50:54]">&lt;stikonas&gt;</a></span><span class="message">but the very first bash is built with mes libc</span></div><div class="line" id="135056"><span class="nick" style="color:#8dd3c7"><a href="#135056" label="[13:50:56]">&lt;stikonas&gt;</a></span><span class="message">so we can't build readline</span></div><div class="line" id="135106"><span class="nick" style="color:#8dd3c7"><a href="#135106" label="[13:51:06]">&lt;stikonas&gt;</a></span><span class="message">doras: ls is the same as normal</span></div><div class="line" id="135134"><span class="nick" style="color:#389600"><a href="#135134" label="[13:51:34]">&lt;doras&gt;</a></span><span class="message">Yes, so it seems</span></div><div class="line" id="135153"><span class="nick" style="color:#8dd3c7"><a href="#135153" label="[13:51:53]">&lt;stikonas&gt;</a></span><span class="message">might be just your environment...</span></div><div class="line" id="135203"><span class="nick" style="color:#8dd3c7"><a href="#135203" label="[13:52:03]">&lt;stikonas&gt;</a></span><span class="message">e.g. we don't have bashrc to setup --colour alias or something like that</span></div><div class="line" id="135225"><span class="nick" style="color:#8dd3c7"><a href="#135225" label="[13:52:25]">&lt;stikonas&gt;</a></span><span class="message">I'll be away from computer for some time but I'll read the logs later</span></div><div class="line" id="140801"><span class="nick" style="color:#389600"><a href="#140801" label="[14:08:01]">&lt;doras&gt;</a></span><span class="message">stikonas: it's actually surprisingly easy to run sysc's build once sysa finishes.</span></div><div class="line" id="140823"><span class="nick" style="color:#389600"><a href="#140823" label="[14:08:23]">&lt;doras&gt;</a></span><span class="message">This command seems to work for me: `unshare --map-root-user ./build_sysc.sh -- chroot /sysc /init`</span></div><div class="line" id="140917"><span class="nick" style="color:#389600"><a href="#140917" label="[14:09:17]">&lt;doras&gt;</a></span><span class="message">&quot;./build_sysc.sh&quot; is a confusing name, it actually only executes bwrap with the right things set up. Basically the exact same command I added to rootfs.py.</span></div><div class="line" id="141029"><span class="nick" style="color:#389600"><a href="#141029" label="[14:10:29]">&lt;doras&gt;</a></span><span class="message">Now it's called &quot;./bwrap-exec.sh&quot; :)</span></div><div class="line" id="141330"><span class="nick" style="color:#389600"><a href="#141330" label="[14:13:30]">&lt;doras&gt;</a></span><span class="message">And I tested bwrap inside BuildStream, and it seems to be allowed. At least my basic test was fine.</span></div><div class="line" id="141402"><span class="nick" style="color:#389600"><a href="#141402" label="[14:14:02]">&lt;doras&gt;</a></span><span class="message">So maybe we could use the bwrap-based mode in BuildStream after all.</span></div><div class="line" id="141526"><span class="nick" style="color:#389600"><a href="#141526" label="[14:15:26]">&lt;doras&gt;</a></span><span class="message">I'm part-way building sysc with the command above. Everything seems fine so far.</span></div><div class="line" id="142238"><span class="nick" style="color:#389600"><a href="#142238" label="[14:22:38]">&lt;doras&gt;</a></span><span class="message">Alright, so how do we get from gcc 4.7 to 11.*? :)</span></div><div class="line" id="144320"><span class="nick" style="color:#389600"><a href="#144320" label="[14:43:20]">&lt;doras&gt;</a></span><span class="message">Last one: guile</span></div><div class="line" id="150746"><span class="nick" style="color:#6b8072"><a href="#150746" label="[15:07:46]">&lt;oriansj&gt;</a></span><span class="message">basic #include functionality is now in M2-Mesoplanet</span></div><div class="line" id="150822"><span class="nick" style="color:#6b8072"><a href="#150822" label="[15:08:22]">&lt;oriansj&gt;</a></span><span class="message">there is a minor bug in cc_macro.c I haven't sorted out yet, stikonas could you take a look to see what I am missing</span></div><div class="line" id="150907"><span class="nick" style="color:#389600"><a href="#150907" label="[15:09:07]">&lt;doras&gt;</a></span><span class="message">&quot;Bootstrapping completed.&quot;</span></div><div class="line" id="151338"><span class="nick" style="color:#389600"><a href="#151338" label="[15:13:38]">&lt;doras&gt;</a></span><span class="message">So as far as I can tell, the bash I'm thrown at when bootstrapping completes is running in a sysroot that includes both the products of sysa and the products of sysc. Is this intentional?</span></div><div class="line" id="151542"><span class="nick" style="color:#389600"><a href="#151542" label="[15:15:42]">&lt;doras&gt;</a></span><span class="message">It also includes all the sources used by sysc under /usr/src.</span></div><div class="line" id="151646"><span class="nick" style="color:#389600"><a href="#151646" label="[15:16:46]">&lt;doras&gt;</a></span><span class="message">The entire sysroot is 707M</span></div><div class="line" id="151656"><span class="nick" style="color:#389600"><a href="#151656" label="[15:16:56]">&lt;doras&gt;</a></span><span class="message">Quite huge...</span></div><div class="line" id="151938"><span class="nick" style="color:#389600"><a href="#151938" label="[15:19:38]">&lt;doras&gt;</a></span><span class="message"># du -sh /usr/</span></div><div class="line" id="151938"><span class="nick" style="color:#389600"><a href="#151938" label="[15:19:38]">&lt;doras&gt;</a></span><span class="message">707M	/usr/</span></div><div class="line" id="152220"><span class="nick" style="color:#389600"><a href="#152220" label="[15:22:20]">&lt;doras&gt;</a></span><span class="message">This is the breakdown: <a rel="nofollow" href="https://paste.gnome.org/pucksxcon">https://paste.gnome.org/pucksxcon</a> </span></div><div class="line" id="153249"><span class="nick" style="color:#389600"><a href="#153249" label="[15:32:49]">&lt;doras&gt;</a></span><span class="message">A few more observations here: <a rel="nofollow" href="https://paste.gnome.org/pkfpnqaol">https://paste.gnome.org/pkfpnqaol</a> </span></div><div class="line" id="153312"><span class="nick" style="color:#389600"><a href="#153312" label="[15:33:12]">&lt;doras&gt;</a></span><span class="message">I think a good chunk of the size is basically not something we should be keeping around as it serves no purpose.</span></div><div class="line" id="153332"><span class="nick" style="color:#389600"><a href="#153332" label="[15:33:32]">&lt;doras&gt;</a></span><span class="message">things we shouldn't keep around*</span></div><div class="line" id="153549"><span class="nick" style="color:#389600"><a href="#153549" label="[15:35:49]">&lt;doras&gt;</a></span><span class="message">Also, it seems we may have some confusion around the library prefix. A few executables were installed under /usr/i386-unknown-linux-gnu.</span></div><div class="line" id="153727"><span class="nick" style="color:#389600"><a href="#153727" label="[15:37:27]">&lt;doras&gt;</a></span><span class="message">There's also a mysterious /usr/bin/bin/ symlink which points at the relative usr/bin which doesn't exist.</span></div><div class="line" id="154128"><span class="nick" style="color:#389600"><a href="#154128" label="[15:41:28]">&lt;doras&gt;</a></span><span class="message">Hmmm... and everything is statically linked?</span></div><div class="line" id="154537"><span class="nick" style="color:#389600"><a href="#154537" label="[15:45:37]">&lt;doras&gt;</a></span><span class="message">And there's no dynamic linker?</span></div><div class="line" id="164938"><span class="nick" style="color:#6b8072"><a href="#164938" label="[16:49:38]">&lt;oriansj&gt;</a></span><span class="message">doras: well if you define a subset list of outputs, it should be rather straight forward process to reduce the output to that set. (literally just a simple copy to the target locations)</span></div><div class="line" id="165751"><span class="nick" style="color:#389600"><a href="#165751" label="[16:57:51]">&lt;doras&gt;</a></span><span class="message">oriansj: admittedly I'm less familiar with musl-based systems, so I'm not entirely sure what should be kept.</span></div><div class="line" id="165832"><span class="nick" style="color:#389600"><a href="#165832" label="[16:58:32]">&lt;doras&gt;</a></span><span class="message">But I agree, it's fairly simple to filter out only the output one needs.</span></div><div class="line" id="170740"><span class="nick" style="color:#6b8072"><a href="#170740" label="[17:07:40]">&lt;oriansj&gt;</a></span><span class="message">doras: perhaps a better idea is to just build exactly you want as a base from those tools available</span></div><div class="line" id="170832"><span class="nick" style="color:#6b8072"><a href="#170832" label="[17:08:32]">&lt;oriansj&gt;</a></span><span class="message">as then you could use any libc you desire and have only exactly the tools you want in the final output</span></div><div class="line" id="171958"><span class="nick" style="color:#389600"><a href="#171958" label="[17:19:58]">&lt;doras&gt;</a></span><span class="message">oriansj: I think we would want to do that anyway, but we'll also need to keep sysc in image form (Docker/OCI/OSTree) because it doesn't support aarch64, ppc64le and risc-v bootstrap yet, so it can't be part of the main repo.</span></div><div class="line" id="172144"><span class="nick" style="color:#389600"><a href="#172144" label="[17:21:44]">&lt;doras&gt;</a></span><span class="message">So it would be best to have this image as small as possible.</span></div><div class="line" id="172230"><span class="nick" style="color:#6b8072"><a href="#172230" label="[17:22:30]">&lt;oriansj&gt;</a></span><span class="message">well the image doesn't have to be the fully built result if one is worried about size.</span></div><div class="line" id="172246"><span class="nick" style="color:#6b8072"><a href="#172246" label="[17:22:46]">&lt;oriansj&gt;</a></span><span class="message">rather just the sources and the seeds</span></div><div class="line" id="172512"><span class="nick" style="color:#6b8072"><a href="#172512" label="[17:25:12]">&lt;oriansj&gt;</a></span><span class="message">hmm actually we end up having to build a great deal of sources</span></div><div class="line" id="172643"><span class="nick" style="color:#6b8072"><a href="#172643" label="[17:26:43]">&lt;oriansj&gt;</a></span><span class="message">so a hook script to strip things down probably is what you want.</span></div><div class="line" id="173202"><span class="nick" style="color:#389600"><a href="#173202" label="[17:32:02]">&lt;doras&gt;</a></span><span class="message">oriansj: can you point me at an existing hook script?</span></div><div class="line" id="193459"><span class="nick" style="color:#389600"><a href="#193459" label="[19:34:59]">&lt;doras&gt;</a></span><span class="message">My bwrap WIP branch for those interested: <a rel="nofollow" href="https://github.com/doraskayo/live-bootstrap/tree/bwrap-bootstrap">https://github.com/doraskayo/live-bootstrap/tree/bwrap-bootstrap</a> </span></div><div class="line" id="193559"><span class="nick" style="color:#389600"><a href="#193559" label="[19:35:59]">&lt;doras&gt;</a></span><span class="message">With bubblewrap installed, `./rootfs.py --bwrap` is enough to bootstrap rootless and without elevated permissions.</span></div><div class="line" id="193850"><span class="nick" style="color:#389600"><a href="#193850" label="[19:38:50]">&lt;doras&gt;</a></span><span class="message">It still requires some documentation updates, better commit descriptions and a decision on how to handle the tmpfs mounts.</span></div><div class="line" id="194026"><span class="nick" style="color:#389600"><a href="#194026" label="[19:40:26]">&lt;doras&gt;</a></span><span class="message">I'm still not familiar enough with the project to tell what each temporary directory is meant to hold, so if anyone wants to work on the last part I would appreciate it.</span></div><div class="line" id="194249"><span class="nick" style="color:#389600"><a href="#194249" label="[19:42:49]">&lt;doras&gt;</a></span><span class="message">I think bwrap's own tmpfs mounts are automatically unmounted when the command it executes exit, so maybe in that case we never need unmounting too.</span></div><div class="line" id="194328"><span class="nick" style="color:#389600"><a href="#194328" label="[19:43:28]">&lt;doras&gt;</a></span><span class="message">exists*</span></div><div class="line" id="194357"><span class="nick" style="color:#389600"><a href="#194357" label="[19:43:57]">&lt;doras&gt;</a></span><span class="message">But yeah, definitely not familiar enough to be certain of any specific approach.</span></div><div class="line" id="194634"><span class="nick" style="color:#389600"><a href="#194634" label="[19:46:34]">&lt;doras&gt;</a></span><span class="message">exits**</span></div><div class="line" id="195120"><span class="nick" style="color:#389600"><a href="#195120" label="[19:51:20]">&lt;doras&gt;</a></span><span class="message">Actually, I may need one more change around environment variables to ensure it works on every system.</span></div><div class="line" id="200223"><span class="nick" style="color:#389600"><a href="#200223" label="[20:02:23]">&lt;doras&gt;</a></span><span class="message">sysa's /bin not being a symlink to /usr/bin is a bit strange, by the way. It's a normal directory that contains 3 symlinks for bash, pwd and sh.</span></div><div class="line" id="200238"><span class="nick" style="color:#389600"><a href="#200238" label="[20:02:38]">&lt;doras&gt;</a></span><span class="message">I'm not sure if it's intentional, but it's... unusual.</span></div><div class="line" id="214824"><span class="nick" style="color:#389600"><a href="#214824" label="[21:48:24]">&lt;doras&gt;</a></span><span class="message">So here's my bootstrapping challenge for you: I want to use live-bootstrap to create a base system, but live-bootstrap depends on a system with Python and bwrap (with my new mode). However, that would be bootstrapping using an existing system, which means I need a foreign image.</span></div><div class="line" id="214925"><span class="nick" style="color:#389600"><a href="#214925" label="[21:49:25]">&lt;doras&gt;</a></span><span class="message">This is true for every mode, even for bare metal, right?</span></div><div class="line" id="215039"><span class="nick" style="color:#389600"><a href="#215039" label="[21:50:39]">&lt;doras&gt;</a></span><span class="message">For bare metal we basically need live-bootstrap to produce an initramfs.</span></div><div class="line" id="215133"><span class="nick" style="color:#389600"><a href="#215133" label="[21:51:33]">&lt;doras&gt;</a></span><span class="message">So every build mode of live-bootstrap still requires a foreign system to act as an initial environment for running the Python logic.</span></div><div class="line" id="215307"><span class="nick" style="color:#389600"><a href="#215307" label="[21:53:07]">&lt;doras&gt;</a></span><span class="message">After the Python scripts do their thing, we try to sandbox stuff in a way that convinces us enough that no foreign image is involved in the bootstrap process, but evident ally it did at some point.</span></div><div class="line" id="215509"><span class="nick" style="color:#389600"><a href="#215509" label="[21:55:09]">&lt;doras&gt;</a></span><span class="message">All of this may sound obvious to you, but now my challenge remains that I need a system with Python, bwrap and a working shell to build live-bootstrap, which kind of defeats the purpose of having to pull no foreign systems at all to get sysc built.</span></div><div class="line" id="215659"><span class="nick" style="color:#389600"><a href="#215659" label="[21:56:59]">&lt;doras&gt;</a></span><span class="message">So my thoughts are as follows: the bootstrap part of live-bootstrap doesn't actually need Python, bwrap or a shell. All it needs is a kernel to execute the initial seed within a chroot.</span></div><div class="line" id="220102"><span class="nick" style="color:#389600"><a href="#220102" label="[22:01:02]">&lt;doras&gt;</a></span><span class="message">So if I got this right, if I create all of the directories, download all the sources and put everything where the seed and bootstrap steps expect things to be, and then chroot and execute the seed, it should, in theory, bootstrap successfully. In other words, if I skip all the Python stuff, my dependencies are reduced to a kernel and a chroot.</span></div><div class="line" id="220151"><span class="nick" style="color:#6b8072"><a href="#220151" label="[22:01:51]">&lt;oriansj&gt;</a></span><span class="message">doras: correct</span></div><div class="line" id="220207"><span class="nick" style="color:#6b8072"><a href="#220207" label="[22:02:07]">&lt;oriansj&gt;</a></span><span class="message">and the chroot isn't even technically needed</span></div><div class="line" id="220254"><span class="nick" style="color:#6b8072"><a href="#220254" label="[22:02:54]">&lt;oriansj&gt;</a></span><span class="message">as kaem-optional-seed is the init and the driver that starts the whole bootstrap process</span></div><div class="line" id="220523"><span class="nick" style="color:#389600"><a href="#220523" label="[22:05:23]">&lt;doras&gt;</a></span><span class="message">Well, I'm assuming we require an isolated environment at some point so build products can be put in directories and all the /dev and /proc expectations are met.</span></div><div class="line" id="220547"><span class="nick" style="color:#389600"><a href="#220547" label="[22:05:47]">&lt;doras&gt;</a></span><span class="message">So a chroot is one tool to provide that initial requirement.</span></div><div class="line" id="220632"><span class="nick" style="color:#6b8072"><a href="#220632" label="[22:06:32]">&lt;oriansj&gt;</a></span><span class="message">doras: we can just use a blank environment</span></div><div class="line" id="220632"><span class="nick" style="color:#389600"><a href="#220632" label="[22:06:32]">&lt;doras&gt;</a></span><span class="message">But anyway, a kernel is something I have regardless of where our repo would be built, and BuildStream should in theory provide me with a chroot without any external image dependency because it runs the chroot from using host tools.</span></div><div class="line" id="220710"><span class="nick" style="color:#389600"><a href="#220710" label="[22:07:10]">&lt;doras&gt;</a></span><span class="message">How do you achieve a blank environment without chroot on a running system?</span></div><div class="line" id="220753"><span class="nick" style="color:#6b8072"><a href="#220753" label="[22:07:53]">&lt;oriansj&gt;</a></span><span class="message">qemu or just do mkfs on a disk and boot that disk</span></div><div class="line" id="220838"><span class="nick" style="color:#389600"><a href="#220838" label="[22:08:38]">&lt;doras&gt;</a></span><span class="message">QEMU suggests a foreign image again because it's a non-trivial requirement.</span></div><div class="line" id="220850"><span class="nick" style="color:#389600"><a href="#220850" label="[22:08:50]">&lt;doras&gt;</a></span><span class="message">chroot requires only a kernel as far as I know.</span></div><div class="line" id="220910"><span class="nick" style="color:#389600"><a href="#220910" label="[22:09:10]">&lt;doras&gt;</a></span><span class="message">mkfs and boot means a reboot, which is a no-go for CI.</span></div><div class="line" id="220930"><span class="nick" style="color:#6b8072"><a href="#220930" label="[22:09:30]">&lt;oriansj&gt;</a></span><span class="message">QEMU isn't the requirement, just a way to approximate the formated disk booting in a blank physical system</span></div><div class="line" id="221005"><span class="nick" style="color:#389600"><a href="#221005" label="[22:10:05]">&lt;doras&gt;</a></span><span class="message">Right.</span></div><div class="line" id="221038"><span class="nick" style="color:#389600"><a href="#221038" label="[22:10:38]">&lt;doras&gt;</a></span><span class="message">But anyway, if a reboot is out of the question, the most minimal requirements we can reach is a kernel and a chroot.</span></div><div class="line" id="221108"><span class="nick" style="color:#389600"><a href="#221108" label="[22:11:08]">&lt;doras&gt;</a></span><span class="message">And those can in theory be provided by BuildStream without any external dependencies.</span></div><div class="line" id="221152"><span class="nick" style="color:#389600"><a href="#221152" label="[22:11:52]">&lt;doras&gt;</a></span><span class="message">But... it also means that I have to basically skip most of live-bootstrap.</span></div><div class="line" id="221259"><span class="nick" style="color:#389600"><a href="#221259" label="[22:12:59]">&lt;doras&gt;</a></span><span class="message">So my point is: I will try to do this, but if it works, it seems to me like the scope of live-bootstrap is a bit too wide for our use case.</span></div><div class="line" id="221453"><span class="nick" style="color:#6b8072"><a href="#221453" label="[22:14:53]">&lt;oriansj&gt;</a></span><span class="message">well a blank docker image shouldn't even need a chroot</span></div><div class="line" id="221520"><span class="nick" style="color:#389600"><a href="#221520" label="[22:15:20]">&lt;doras&gt;</a></span><span class="message">Docker uses a chroot too, I think.</span></div><div class="line" id="221529"><span class="nick" style="color:#6b8072"><a href="#221529" label="[22:15:29]">&lt;oriansj&gt;</a></span><span class="message">Docker is a chroot</span></div><div class="line" id="221535"><span class="nick" style="color:#389600"><a href="#221535" label="[22:15:35]">&lt;doras&gt;</a></span><span class="message">uses chroot*</span></div><div class="line" id="221546"><span class="nick" style="color:#6b8072"><a href="#221546" label="[22:15:46]">&lt;oriansj&gt;</a></span><span class="message">but it shouldn't also need one internally</span></div><div class="line" id="221602"><span class="nick" style="color:#389600"><a href="#221602" label="[22:16:02]">&lt;doras&gt;</a></span><span class="message">Internally, no. Of course.</span></div><div class="line" id="221632"><span class="nick" style="color:#389600"><a href="#221632" label="[22:16:32]">&lt;doras&gt;</a></span><span class="message">Well, currently sysa does use the chroot command explicitly to switch to sysc.</span></div><div class="line" id="221742"><span class="nick" style="color:#389600"><a href="#221742" label="[22:17:42]">&lt;doras&gt;</a></span><span class="message">But the initial requirements do not require it, correct. Any means by which you could get a chroot-like environment are good enough. It's just that chroot provides a chroot-like environment :)</span></div><div class="line" id="221854"><span class="nick" style="color:#389600"><a href="#221854" label="[22:18:54]">&lt;doras&gt;</a></span><span class="message">I will need to be able to avoid that second chroot through, I think.</span></div><div class="line" id="221946"><span class="nick" style="color:#389600"><a href="#221946" label="[22:19:46]">&lt;doras&gt;</a></span><span class="message">Because I can't provide /dev, /proc, etc. arbitrarily with BuildStream. They are only provided at the base of the chroot.</span></div><div class="line" id="224950"><span class="nick" style="color:#6b8072"><a href="#224950" label="[22:49:50]">&lt;oriansj&gt;</a></span><span class="message">at its core live-bootstrap is a chain started with kaem.x86 that builds up to the after.kaem which live-bootstrap replaces to start the chain until completion.</span></div><div class="line" id="225256"><span class="nick" style="color:#6b8072"><a href="#225256" label="[22:52:56]">&lt;oriansj&gt;</a></span><span class="message">The only binary dependencies are the kernel and those in bootstrap-seeds</span></div><br /></div></body></html>