<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-04-17.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="001301"><span class="nick" style="color:#389600"><a href="#001301" label="[00:13:01]">&lt;OriansJ`&gt;</a></span><span class="message">more passing tests but I yet haven't figured out what in the C code could be causing the segfault</span></div><div class="line" id="005809"><span class="nick">***</span><span class="message notice">mihi_ is now known as mihi</span></div><div class="line" id="010251"><span class="nick" style="color:#389600"><a href="#010251" label="[01:02:51]">&lt;OriansJ`&gt;</a></span><span class="message">ok, I need a sanity check here: <a rel="nofollow" href="https://paste.debian.net/1194055/">https://paste.debian.net/1194055/</a> </span></div><div class="line" id="010500"><span class="nick" style="color:#389600"><a href="#010500" label="[01:05:00]">&lt;OriansJ`&gt;</a></span><span class="message">in the case MES_FUZZING is set, the first argument is set as the environment variable MES_BOOT; and it verifies that it does so with the getenv; yet somehow open_boot gets getenv (&quot;MES_BOOT&quot;) != 0 to be false????</span></div><div class="line" id="010533"><span class="nick" style="color:#389600"><a href="#010533" label="[01:05:33]">&lt;OriansJ`&gt;</a></span><span class="message">WTF????</span></div><div class="line" id="010845"><span class="nick" style="color:#389600"><a href="#010845" label="[01:08:45]">&lt;OriansJ`&gt;</a></span><span class="message">it doesn't make any sense</span></div><div class="line" id="013002"><span class="nick" style="color:#389600"><a href="#013002" label="[01:30:02]">&lt;OriansJ`&gt;</a></span><span class="message">it is like seeing 1+1=fish</span></div><div class="line" id="013018"><span class="nick" style="color:#389600"><a href="#013018" label="[01:30:18]">&lt;OriansJ`&gt;</a></span><span class="message">it doesn't make any freaking sense</span></div><div class="line" id="013447"><span class="nick" style="color:#389600"><a href="#013447" label="[01:34:47]">&lt;OriansJ`&gt;</a></span><span class="message">fuck it, I'll just set a C variable. That shit is crazy</span></div><div class="line" id="013501"><span class="nick" style="color:#2e2a4a"><a href="#013501" label="[01:35:01]">&lt;Hagfish&gt;</a></span><span class="message">hmm, despite my nick, i don't know much about fish, but i'm tempted to have a look</span></div><div class="line" id="013505"><span class="nick" style="color:#2e2a4a"><a href="#013505" label="[01:35:05]">&lt;Hagfish&gt;</a></span><span class="message">i do like a good mystery :)</span></div><div class="line" id="013619"><span class="nick" style="color:#389600"><a href="#013619" label="[01:36:19]">&lt;OriansJ`&gt;</a></span><span class="message">literally setenv, the immediately following getenv returns the correct string but the getenv in a called function get NULL (because the environment magically changed between the two points????)</span></div><div class="line" id="013624"><span class="nick" style="color:#2e2a4a"><a href="#013624" label="[01:36:24]">&lt;Hagfish&gt;</a></span><span class="message">hmm, yeah, the code does look pretty reasonable</span></div><div class="line" id="013728"><span class="nick" style="color:#2e2a4a"><a href="#013728" label="[01:37:28]">&lt;Hagfish&gt;</a></span><span class="message">there isn't some weird scoping rule about calling getenv in a function, right?</span></div><div class="line" id="013749"><span class="nick" style="color:#389600"><a href="#013749" label="[01:37:49]">&lt;OriansJ`&gt;</a></span><span class="message">if you do export MES_FUZZING=1 and then ./bin/mes-m2 zero.scm it should echo back zero.scm and then exit with what exit code you set in zero.scm because fuzzing disables writing</span></div><div class="line" id="013751"><span class="nick" style="color:#2e2a4a"><a href="#013751" label="[01:37:51]">&lt;Hagfish&gt;</a></span><span class="message">and i guess you can't have two simultaneous copies of an environment</span></div><div class="line" id="013816"><span class="nick" style="color:#389600"><a href="#013816" label="[01:38:16]">&lt;OriansJ`&gt;</a></span><span class="message">Hagfish: it is called in main</span></div><div class="line" id="013932"><span class="nick" style="color:#2e2a4a"><a href="#013932" label="[01:39:32]">&lt;Hagfish&gt;</a></span><span class="message">hmm, yeah, that all sounds right</span></div><div class="line" id="013938"><span class="nick" style="color:#389600"><a href="#013938" label="[01:39:38]">&lt;OriansJ`&gt;</a></span><span class="message">so every called function would by definition have to be under its scope</span></div><div class="line" id="013955"><span class="nick" style="color:#389600"><a href="#013955" label="[01:39:55]">&lt;OriansJ`&gt;</a></span><span class="message">unless called functions get new environments????</span></div><div class="line" id="014019"><span class="nick" style="color:#2e2a4a"><a href="#014019" label="[01:40:19]">&lt;Hagfish&gt;</a></span><span class="message">that would be scary</span></div><div class="line" id="014029"><span class="nick" style="color:#2e2a4a"><a href="#014029" label="[01:40:29]">&lt;Hagfish&gt;</a></span><span class="message">it's the first crazy thing that comes to mind, though</span></div><div class="line" id="014056"><span class="nick" style="color:#389600"><a href="#014056" label="[01:40:56]">&lt;OriansJ`&gt;</a></span><span class="message">enviroment is just an array passed to main as envp</span></div><div class="line" id="014117"><span class="nick" style="color:#389600"><a href="#014117" label="[01:41:17]">&lt;OriansJ`&gt;</a></span><span class="message">that is copied when forking</span></div><div class="line" id="014145"><span class="nick" style="color:#2e2a4a"><a href="#014145" label="[01:41:45]">&lt;Hagfish&gt;</a></span><span class="message">and there's nothing over-riding the usual meanings of these functions, right?</span></div><div class="line" id="014152"><span class="nick" style="color:#2e2a4a"><a href="#014152" label="[01:41:52]">&lt;Hagfish&gt;</a></span><span class="message">does the fuzzer do some weird hooks?</span></div><div class="line" id="014224"><span class="nick" style="color:#389600"><a href="#014224" label="[01:42:24]">&lt;OriansJ`&gt;</a></span><span class="message">Hagfish: shouldn't as it is a GCC build with standard glibc functions for getenv and setenv</span></div><div class="line" id="014237"><span class="nick" style="color:#2e2a4a"><a href="#014237" label="[01:42:37]">&lt;Hagfish&gt;</a></span><span class="message">that should limit the craziness, yes</span></div><div class="line" id="014241"><span class="nick" style="color:#389600"><a href="#014241" label="[01:42:41]">&lt;OriansJ`&gt;</a></span><span class="message">and gdb confirms that</span></div><div class="line" id="014250"><span class="nick" style="color:#2e2a4a"><a href="#014250" label="[01:42:50]">&lt;Hagfish&gt;</a></span><span class="message">oh cool, you've got gdb on it too?</span></div><div class="line" id="014329"><span class="nick" style="color:#389600"><a href="#014329" label="[01:43:29]">&lt;OriansJ`&gt;</a></span><span class="message">it would be one thing if the first getenv returned a NULL but it didn't</span></div><div class="line" id="014335"><span class="nick" style="color:#2e2a4a"><a href="#014335" label="[01:43:35]">&lt;Hagfish&gt;</a></span><span class="message">right</span></div><div class="line" id="014349"><span class="nick" style="color:#2e2a4a"><a href="#014349" label="[01:43:49]">&lt;Hagfish&gt;</a></span><span class="message">yeah, i can't think of anywhere for unexpected stuff to be happening</span></div><div class="line" id="014404"><span class="nick" style="color:#2e2a4a"><a href="#014404" label="[01:44:04]">&lt;Hagfish&gt;</a></span><span class="message">and we're sure there isn't anything underhanded going on, right? :)</span></div><div class="line" id="014420"><span class="nick" style="color:#2e2a4a"><a href="#014420" label="[01:44:20]">&lt;Hagfish&gt;</a></span><span class="message">i haven't checked for unicode homoglyphs</span></div><div class="line" id="014502"><span class="nick" style="color:#389600"><a href="#014502" label="[01:45:02]">&lt;OriansJ`&gt;</a></span><span class="message">Hagfish: well there is always the possibility of understanding things going on since I am a bootstrapper</span></div><div class="line" id="014539"><span class="nick" style="color:#2e2a4a"><a href="#014539" label="[01:45:39]">&lt;Hagfish&gt;</a></span><span class="message">a bootstrap is the ultimate target for underhanded stuff, i suppose</span></div><div class="line" id="014545"><span class="nick" style="color:#389600"><a href="#014545" label="[01:45:45]">&lt;OriansJ`&gt;</a></span><span class="message">the fuck</span></div><div class="line" id="014553"><span class="nick" style="color:#389600"><a href="#014553" label="[01:45:53]">&lt;OriansJ`&gt;</a></span><span class="message">sin is segfaulting on mes.c</span></div><div class="line" id="014614"><span class="nick" style="color:#2e2a4a"><a href="#014614" label="[01:46:14]">&lt;Hagfish&gt;</a></span><span class="message">i can't believe it's really sinless :)</span></div><div class="line" id="014632"><span class="nick" style="color:#2e2a4a"><a href="#014632" label="[01:46:32]">&lt;Hagfish&gt;</a></span><span class="message">are you sure this is running in a clean/sane environment?</span></div><div class="line" id="014649"><span class="nick" style="color:#2e2a4a"><a href="#014649" label="[01:46:49]">&lt;Hagfish&gt;</a></span><span class="message">there aren't old copies of broken binaries or libs lying around?</span></div><div class="line" id="014752"><span class="nick" style="color:#389600"><a href="#014752" label="[01:47:52]">&lt;OriansJ`&gt;</a></span><span class="message">sin is a fresh build</span></div><div class="line" id="014806"><span class="nick" style="color:#2e2a4a"><a href="#014806" label="[01:48:06]">&lt;Hagfish&gt;</a></span><span class="message">can you run it under gdb?</span></div><div class="line" id="014830"><span class="nick" style="color:#389600"><a href="#014830" label="[01:48:30]">&lt;OriansJ`&gt;</a></span><span class="message">ok, I gave sin the wrong path</span></div><div class="line" id="014834"><span class="nick" style="color:#2e2a4a"><a href="#014834" label="[01:48:34]">&lt;Hagfish&gt;</a></span><span class="message">ah</span></div><div class="line" id="014843"><span class="nick" style="color:#389600"><a href="#014843" label="[01:48:43]">&lt;OriansJ`&gt;</a></span><span class="message">I did sin mes.c instead of sin src/mes.c</span></div><div class="line" id="014859"><span class="nick" style="color:#389600"><a href="#014859" label="[01:48:59]">&lt;OriansJ`&gt;</a></span><span class="message">I should incorporate a proper error message for that case</span></div><div class="line" id="014910"><span class="nick" style="color:#2e2a4a"><a href="#014910" label="[01:49:10]">&lt;Hagfish&gt;</a></span><span class="message">yeah, that would be nice</span></div><div class="line" id="014940"><span class="nick" style="color:#2e2a4a"><a href="#014940" label="[01:49:40]">&lt;Hagfish&gt;</a></span><span class="message">it feels like it's always worth assuming that some error message or tool is lying</span></div><div class="line" id="014948"><span class="nick" style="color:#2e2a4a"><a href="#014948" label="[01:49:48]">&lt;Hagfish&gt;</a></span><span class="message">especially with bootstraps</span></div><div class="line" id="015012"><span class="nick" style="color:#2e2a4a"><a href="#015012" label="[01:50:12]">&lt;Hagfish&gt;</a></span><span class="message">and i guess the person that's most able to fool someone is themselves</span></div><div class="line" id="015544"><span class="nick" style="color:#389600"><a href="#015544" label="[01:55:44]">&lt;OriansJ`&gt;</a></span><span class="message">ok so the only unicode is janneke's (c) line</span></div><div class="line" id="015554"><span class="nick" style="color:#389600"><a href="#015554" label="[01:55:54]">&lt;OriansJ`&gt;</a></span><span class="message">so everything else is pure ascii</span></div><div class="line" id="015713"><span class="nick" style="color:#2e2a4a"><a href="#015713" label="[01:57:13]">&lt;Hagfish&gt;</a></span><span class="message">that's reassuring at least</span></div><div class="line" id="015807"><span class="nick" style="color:#2e2a4a"><a href="#015807" label="[01:58:07]">&lt;Hagfish&gt;</a></span><span class="message">have you tried building it on a different machine, or making a minimal test case?</span></div><div class="line" id="021007"><span class="nick" style="color:#6b8072"><a href="#021007" label="[02:10:07]">&lt;stikonas&gt;</a></span><span class="message">fossy: up for some reviewing?</span></div><div class="line" id="021104"><span class="nick" style="color:#6b8072"><a href="#021104" label="[02:11:04]">&lt;stikonas&gt;</a></span><span class="message">my PR is almost ready now:  46 files changed, 302 insertions(+), 342 deletions(-)</span></div><div class="line" id="021149"><span class="nick" style="color:#6b8072"><a href="#021149" label="[02:11:49]">&lt;stikonas&gt;</a></span><span class="message">(a lot of it is checksum changes though, so not as scary as it might look from diffstat but still)</span></div><div class="line" id="022410"><span class="nick" style="color:#6b8072"><a href="#022410" label="[02:24:10]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/106">https://github.com/fosslinux/live-bootstrap/pull/106</a> </span></div><div class="line" id="031815"><span class="nick" style="color:#389600"><a href="#031815" label="[03:18:15]">&lt;OriansJ`&gt;</a></span><span class="message">Hagfish: the reason is ugly</span></div><div class="line" id="032012"><span class="nick" style="color:#389600"><a href="#032012" label="[03:20:12]">&lt;OriansJ`&gt;</a></span><span class="message">GCC wipes the local variable argv[1] as it is no longer referenced in main and thanks to undefined behavior optimizations; the global envp now is pointing to a null string.</span></div><div class="line" id="032141"><span class="nick" style="color:#389600"><a href="#032141" label="[03:21:41]">&lt;OriansJ`&gt;</a></span><span class="message">a local variable is almost invariably a bad choice to pass to setenv the exceptions are obscure to the point of almost not existing. ( you need to use malloc or calloc and do string copying)</span></div><div class="line" id="032456"><span class="nick" style="color:#389600"><a href="#032456" label="[03:24:56]">&lt;OriansJ`&gt;</a></span><span class="message">The riddle is now solved and it burned a bunch of time to figure it out.</span></div><div class="line" id="032558"><span class="nick" style="color:#389600"><a href="#032558" label="[03:25:58]">&lt;OriansJ`&gt;</a></span><span class="message">I'm just going to stick to global variables to pass info between functions and leave the environment manipulation to fossy's kaem.</span></div><div class="line" id="032910"><span class="nick" style="color:#389600"><a href="#032910" label="[03:29:10]">&lt;OriansJ`&gt;</a></span><span class="message">now to get back to doing mes.c fuzzing</span></div><div class="line" id="060819"><span class="nick" style="color:#80b1d3"><a href="#060819" label="[06:08:19]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: i am currently away from home but in around 24 hrs I will be able to revirw</span></div><div class="line" id="093857"><span class="nick" style="color:#6d2462"><a href="#093857" label="[09:38:57]">&lt;attila_lendvai_&gt;</a></span><span class="message">hi! i have just found your community, and i'm wondering how broad is your scope... i'm playing with a tiny lisp that can bootstrap itself on top of the Linux kernel in 2-4 kLoC, including everything (besides gnu make, gas, and ld to produce a static binary. but there's proof of concept to get rid of them all with little extra code) it's at <a rel="nofollow" href="https://github.com/attila-lendvai/maru">https://github.com/attila-lendvai/maru</a> </span></div><div class="line" id="094317"><span class="nick" style="color:#6d2462"><a href="#094317" label="[09:43:17]">&lt;attila_lendvai_&gt;</a></span><span class="message">for whatever reason i myself don't understand, i'm passionate about the problem of bootstrapping, and i'm working out a way to preserve each developmental stage of the language to be able to bootstrap it all the way from a simpler C implementation using the build system</span></div><div class="line" id="094339"><span class="nick">***</span><span class="message notice">attila_lendvai_ is now known as attila_lendvai</span></div><div class="line" id="094419"><span class="nick" style="color:#234e69"><a href="#094419" label="[09:44:19]">&lt;attila_lendvai&gt;</a></span><span class="message">there are various branches, some of them can be a &quot;stage 0&quot; to start the (reproducible) bootstrap process from.</span></div><div class="line" id="094454"><span class="nick" style="color:#234e69"><a href="#094454" label="[09:44:54]">&lt;attila_lendvai&gt;</a></span><span class="message">(but for now only one of them is finished/tested/exercised: maru.0.c99)</span></div><div class="line" id="094457"><span class="nick" style="color:#6c3d55"><a href="#094457" label="[09:44:57]">&lt;xentrac&gt;</a></span><span class="message">awesome!</span></div><div class="line" id="094524"><span class="nick" style="color:#6c3d55"><a href="#094524" label="[09:45:24]">&lt;xentrac&gt;</a></span><span class="message">yeah, I've been reading your work on maru; Kartik Agaram mentioned it to me</span></div><div class="line" id="094618"><span class="nick" style="color:#234e69"><a href="#094618" label="[09:46:18]">&lt;attila_lendvai&gt;</a></span><span class="message">xentrac, small world! :) it's so amazing how people interested in the same stuff can find each other! i didn't really expect an entire community around bootstrapping... and here we are! :)</span></div><div class="line" id="094733"><span class="nick" style="color:#d9d9d9"><a href="#094733" label="[09:47:33]">*</a></span><span class="message">attila_lendvai is reading the website</span></div><div class="line" id="094754"><span class="nick" style="color:#6c3d55"><a href="#094754" label="[09:47:54]">&lt;xentrac&gt;</a></span><span class="message">it's a little tricky to distinguish the stuff you merged from maru-2.4 from the stuff you added yourself, but am I right that you wrote the LLVM backend but not the i386 backend?</span></div><div class="line" id="095039"><span class="nick" style="color:#234e69"><a href="#095039" label="[09:50:39]">&lt;attila_lendvai&gt;</a></span><span class="message">xentrac, that's correct. i keep the old code untouched in the (divergent) 'piumarta' branch, and started my work from a simpler/smaller version of maru, then caught up feature-wise with piumarta's head be bootstrapping the necessary features</span></div><div class="line" id="095057"><span class="nick" style="color:#6c3d55"><a href="#095057" label="[09:50:57]">&lt;xentrac&gt;</a></span><span class="message">it's awesome work :)</span></div><div class="line" id="095119"><span class="nick" style="color:#234e69"><a href="#095119" label="[09:51:19]">&lt;attila_lendvai&gt;</a></span><span class="message">it's a lot of fun (and sometimes an enormous headache :)</span></div><div class="line" id="095414"><span class="nick" style="color:#6c3d55"><a href="#095414" label="[09:54:14]">&lt;xentrac&gt;</a></span><span class="message">I think mostly the channel focuses on live-bootstrap, including mes, stage0, mes-m2, m2-planet, hex0, hex1, ...</span></div><div class="line" id="095508"><span class="nick" style="color:#6c3d55"><a href="#095508" label="[09:55:08]">&lt;xentrac&gt;</a></span><span class="message">myself, I've been looking a lot at META II and GPM this week</span></div><div class="line" id="095616"><span class="nick" style="color:#234e69"><a href="#095616" label="[09:56:16]">&lt;attila_lendvai&gt;</a></span><span class="message">i should also learn about META II. it's only present on my radar, without any depth of understanding. it's an excellent candidate for a maru.0.meta2 branch... :)</span></div><div class="line" id="095620"><span class="nick" style="color:#6c3d55"><a href="#095620" label="[09:56:20]">&lt;xentrac&gt;</a></span><span class="message">I spent some time earlier tonight sketching out an amd64 assembly indirect-threaded-code interpreter for an abstract instruction set drived from META II's, which you can see at <a rel="nofollow" href="http://canonical.org/~kragen/sw/dev3/meta5ix.m5">http://canonical.org/~kragen/sw/dev3/meta5ix.m5</a>  if you're interested</span></div><div class="line" id="095639"><span class="nick" style="color:#d9d9d9"><a href="#095639" label="[09:56:39]">*</a></span><span class="message">attila_lendvai looks</span></div><div class="line" id="095729"><span class="nick" style="color:#6c3d55"><a href="#095729" label="[09:57:29]">&lt;xentrac&gt;</a></span><span class="message">well, I think PEGs are mostly superior to the LL(1) predictive parsers you can write in META II</span></div><div class="line" id="095818"><span class="nick" style="color:#6c3d55"><a href="#095818" label="[09:58:18]">&lt;xentrac&gt;</a></span><span class="message">so I think the main benefit of META-languages is that you can use them to write a PEG parser generator pretty easily</span></div><div class="line" id="095852"><span class="nick" style="color:#6c3d55"><a href="#095852" label="[09:58:52]">&lt;xentrac&gt;</a></span><span class="message">because getting them to run is pretty easy</span></div><div class="line" id="095952"><span class="nick" style="color:#6c3d55"><a href="#095952" label="[09:59:52]">&lt;xentrac&gt;</a></span><span class="message">Schorre's original paper claims that they're also easier to understand, and I guess in some sense that's true — I've found the error tracebacks from Meta5ix to be usually easier to debug than PEG parsing errors</span></div><div class="line" id="095959"><span class="nick" style="color:#234e69"><a href="#095959" label="[09:59:59]">&lt;attila_lendvai&gt;</a></span><span class="message">well, maru's sexp syntax is pretty trivial. i'm no parser expert, but it must be parsable by the simplest parsers.</span></div><div class="line" id="100136"><span class="nick" style="color:#6c3d55"><a href="#100136" label="[10:01:36]">&lt;xentrac&gt;</a></span><span class="message">yeah, S-expressions mostly avoid the problem of parsing.  I was looking at a Henry Baker paper about META from I think 01992 earlier tonight</span></div><div class="line" id="100217"><span class="nick" style="color:#6c3d55"><a href="#100217" label="[10:02:17]">&lt;xentrac&gt;</a></span><span class="message">he's pretty anti-enthusiastic about parsing algorithms :) and I think that to some extent that's a necessary reaction</span></div><div class="line" id="100255"><span class="nick" style="color:#234e69"><a href="#100255" label="[10:02:55]">&lt;attila_lendvai&gt;</a></span><span class="message">are those the cannonical sources? no git repo?</span></div><div class="line" id="100303"><span class="nick" style="color:#6c3d55"><a href="#100303" label="[10:03:03]">&lt;xentrac&gt;</a></span><span class="message">the git repo is in dev3/.git</span></div><div class="line" id="100511"><span class="nick" style="color:#6c3d55"><a href="#100511" label="[10:05:11]">&lt;xentrac&gt;</a></span><span class="message">but I think there really are cases where a DSL with concrete syntax designed for the task at hand is superior.  maybe it's too self-referential, but I think grammars themselves are a good example of this</span></div><div class="line" id="100602"><span class="nick" style="color:#6c3d55"><a href="#100602" label="[10:06:02]">&lt;xentrac&gt;</a></span><span class="message">it's certainly possible to represent this as an S-expression, for example:</span></div><div class="line" id="100606"><span class="nick" style="color:#6c3d55"><a href="#100606" label="[10:06:06]">&lt;xentrac&gt;</a></span><span class="message">- program: [&quot;-&quot; name @it &quot;:&quot; terms {return}, &quot;#&quot; [:notin &quot;&quot;]]</span></div><div class="line" id="100721"><span class="nick" style="color:#6c3d55"><a href="#100721" label="[10:07:21]">&lt;xentrac&gt;</a></span><span class="message">(rule program (many (alt (seq &quot;-&quot; name (label it) &quot;:&quot; terms (emit &quot;return&quot;)) (seq &quot;#&quot; (many (notin &quot;&quot;)))))</span></div><div class="line" id="100735"><span class="nick" style="color:#6c3d55"><a href="#100735" label="[10:07:35]">&lt;xentrac&gt;</a></span><span class="message">for example</span></div><div class="line" id="100749"><span class="nick" style="color:#6c3d55"><a href="#100749" label="[10:07:49]">&lt;xentrac&gt;</a></span><span class="message">oops, missing )</span></div><div class="line" id="100928"><span class="nick" style="color:#6c3d55"><a href="#100928" label="[10:09:28]">&lt;xentrac&gt;</a></span><span class="message">but I would argue that the non-S-expression form is easier to write and to understand, although harder to manipulate in software</span></div><div class="line" id="100931"><span class="nick" style="color:#d9d9d9"><a href="#100931" label="[10:09:31]">*</a></span><span class="message">attila_lendvai is editing maru's readme to publicly capture the exciting TODO opportunities... :)</span></div><div class="line" id="101131"><span class="nick" style="color:#6c3d55"><a href="#101131" label="[10:11:31]">&lt;xentrac&gt;</a></span><span class="message">and I think a variety of systems (OMeta, Prolog, Mathematica, Aardappel) have convincingly shown that general-purpose pattern-matching and -restructuring machinery can be applied to a lot of tasks</span></div><div class="line" id="101257"><span class="nick" style="color:#6c3d55"><a href="#101257" label="[10:12:57]">&lt;xentrac&gt;</a></span><span class="message">and of course there's a lot of information out there that's already in some obnoxious format that it's useful to be able to analyze: amd64 machine code, MediaWiki markup, C, R, PDF, or HTML, for example</span></div><div class="line" id="101654"><span class="nick" style="color:#6c3d55"><a href="#101654" label="[10:16:54]">&lt;xentrac&gt;</a></span><span class="message">so though Baker's &quot;Pragmatic Parsing&quot; article at <a rel="nofollow" href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.24.6433">http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.24.6433</a>  sort of dismisses parsing: &quot;parsing complex syntax is an inherently low-value activity&quot;</span></div><div class="line" id="101724"><span class="nick" style="color:#6c3d55"><a href="#101724" label="[10:17:24]">&lt;xentrac&gt;</a></span><span class="message">I think it's actually pretty useful.  especially for bootstrapping</span></div><div class="line" id="101805"><span class="nick" style="color:#6c3d55"><a href="#101805" label="[10:18:05]">&lt;xentrac&gt;</a></span><span class="message">I'm not yet decided on whether the META approach is useful as a stepping stone to Packrat</span></div><div class="line" id="102459"><span class="nick" style="color:#234e69"><a href="#102459" label="[10:24:59]">&lt;attila_lendvai&gt;</a></span><span class="message">xentrac, what does 'live-bootstrap' mean? i'm reading the mes project, and it's very interesting! it's baffling why i only got here just now.</span></div><div class="line" id="102606"><span class="nick" style="color:#234e69"><a href="#102606" label="[10:26:06]">&lt;attila_lendvai&gt;</a></span><span class="message">i think i agree with Baker. if it's that complex, then admit that it's not a static thing, and express it as a program to be evaluated</span></div><div class="line" id="102715"><span class="nick" style="color:#234e69"><a href="#102715" label="[10:27:15]">&lt;attila_lendvai&gt;</a></span><span class="message">and if you need a complex evaluation model, then express that in a simpler one -- which will be bootstrappable using a simple parser</span></div><div class="line" id="102718"><span class="nick" style="color:#bc80bd"><a href="#102718" label="[10:27:18]">&lt;gforce_d11977&gt;</a></span><span class="message">attila_lendvai: it means all the steps from nothing to a linux-system are done one after another in a fashion/ready so that you can &quot;just start it&quot;.</span></div><div class="line" id="102748"><span class="nick" style="color:#6c3d55"><a href="#102748" label="[10:27:48]">&lt;xentrac&gt;</a></span><span class="message">oh, of course you want to express it as a program to be evaluated — the question is what makes that program easy to write</span></div><div class="line" id="102821"><span class="nick" style="color:#6c3d55"><a href="#102821" label="[10:28:21]">&lt;xentrac&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/">https://github.com/fosslinux/live-bootstrap/</a>  talks about what 'live-bootstrap' means</span></div><div class="line" id="103027"><span class="nick" style="color:#234e69"><a href="#103027" label="[10:30:27]">&lt;attila_lendvai&gt;</a></span><span class="message">thanks! re syntax: i much prefer a simple tree of &quot;words&quot;, where complexity is more captured into the words, and less into the structure that is used to combine them. but then, i'm mostly a lisper, so that should be obvious... :) but i'm not sure which came first: my preference, or delving into lisp.</span></div><div class="line" id="103051"><span class="nick" style="color:#6c3d55"><a href="#103051" label="[10:30:51]">&lt;xentrac&gt;</a></span><span class="message">:)</span></div><div class="line" id="103145"><span class="nick" style="color:#6c3d55"><a href="#103145" label="[10:31:45]">&lt;xentrac&gt;</a></span><span class="message">right, and if you get to choose how to write the tree down, you can choose to write it in a way that's easy to parse</span></div><div class="line" id="103245"><span class="nick" style="color:#6c3d55"><a href="#103245" label="[10:32:45]">&lt;xentrac&gt;</a></span><span class="message">but if you want to, for example, render a TrueType font or scrape alloy melting points out of a Wikipedia dump, you can't</span></div><div class="line" id="103357"><span class="nick" style="color:#6c3d55"><a href="#103357" label="[10:33:57]">&lt;xentrac&gt;</a></span><span class="message">I've been spending a fair bit of time over the last few weeks comparing the Lisp and ML views of the world, and I'm increasingly drawn to the ML approach (though I guess that's not really new for me)</span></div><div class="line" id="103411"><span class="nick" style="color:#6c3d55"><a href="#103411" label="[10:34:11]">&lt;xentrac&gt;</a></span><span class="message">although I do wish ML had a Lispier syntax!</span></div><div class="line" id="103524"><span class="nick" style="color:#234e69"><a href="#103524" label="[10:35:24]">&lt;attila_lendvai&gt;</a></span><span class="message">i'm not completely hostile to more complex syntax, but i'm utterly dismayed when i encounter complex syntax in contexts where a much simpler one would suffice</span></div><div class="line" id="103534"><span class="nick" style="color:#6c3d55"><a href="#103534" label="[10:35:34]">&lt;xentrac&gt;</a></span><span class="message">yeah</span></div><div class="line" id="103536"><span class="nick" style="color:#6c3d55"><a href="#103536" label="[10:35:36]">&lt;xentrac&gt;</a></span><span class="message">but for example I spent a lot of last night doing mental type inference on some Python written in what I think of as a pretty obfuscated style (a friend's clone of GPM)</span></div><div class="line" id="103559"><span class="nick" style="color:#234e69"><a href="#103559" label="[10:35:59]">&lt;attila_lendvai&gt;</a></span><span class="message">complexity has a cost that is *very* rarely accounted for in the software world</span></div><div class="line" id="103620"><span class="nick" style="color:#6c3d55"><a href="#103620" label="[10:36:20]">&lt;xentrac&gt;</a></span><span class="message">and I was really wishing for a semantic model closer to ML's</span></div><div class="line" id="104018"><span class="nick" style="color:#6c3d55"><a href="#104018" label="[10:40:18]">&lt;xentrac&gt;</a></span><span class="message">with pattern matching and type inference of sum types, rather than accessor functions for dotted pairs</span></div><div class="line" id="104410"><span class="nick" style="color:#234e69"><a href="#104410" label="[10:44:10]">&lt;attila_lendvai&gt;</a></span><span class="message">reading mes, i wonder how maru compares to the scheme part of the mes core. maru's semantics is pretty close to scheme.</span></div><div class="line" id="104509"><span class="nick" style="color:#6c3d55"><a href="#104509" label="[10:45:09]">&lt;xentrac&gt;</a></span><span class="message">it's an interesting question!  when I wrote Ur-Scheme I encountered a lot of design decisions in Scheme that made it unnecessarily hard to get to a self-sustaining system</span></div><div class="line" id="104527"><span class="nick" style="color:#6c3d55"><a href="#104527" label="[10:45:27]">&lt;xentrac&gt;</a></span><span class="message">I think Maru has simplified a lot of those decisions</span></div><div class="line" id="104646"><span class="nick" style="color:#234e69"><a href="#104646" label="[10:46:46]">&lt;attila_lendvai&gt;</a></span><span class="message">without knowing anywhere near enough about mes... it would be an interesting project to try forking it and replacing the scheme part with something based on maru.</span></div><div class="line" id="105209"><span class="nick" style="color:#6c3d55"><a href="#105209" label="[10:52:09]">&lt;xentrac&gt;</a></span><span class="message">being able to compile C with Maru would be awesome</span></div><div class="line" id="105307"><span class="nick" style="color:#234e69"><a href="#105307" label="[10:53:07]">&lt;attila_lendvai&gt;</a></span><span class="message">i was wondering previously how much it would take to make maru scheme compatible... either by forking it, or my extending vanilla maru with a compatibility layer.</span></div><div class="line" id="105418"><span class="nick" style="color:#6c3d55"><a href="#105418" label="[10:54:18]">&lt;xentrac&gt;</a></span><span class="message">scheme is usually pretty easy to implement in lisps</span></div><div class="line" id="110427"><span class="nick" style="color:#d9d9d9"><a href="#110427" label="[11:04:27]">*</a></span><span class="message">attila_lendvai is getting lost in a forest of interesting projects</span></div><div class="line" id="111733"><span class="nick" style="color:#bc80bd"><a href="#111733" label="[11:17:33]">&lt;gforce_d11977&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.youtube.com/watch?v=HPBJEL43tqg">https://www.youtube.com/watch?v=HPBJEL43tqg</a>  | Louis Armstrong - So Little Time (So Much To Do)</span></div><div class="line" id="121824"><span class="nick" style="color:#234e69"><a href="#121824" label="[12:18:24]">&lt;attila_lendvai&gt;</a></span><span class="message">this experiment may also be interesting: something like maru, but for haskell: <a rel="nofollow" href="https://github.com/bkomuves/nanohs">https://github.com/bkomuves/nanohs</a> </span></div><div class="line" id="122445"><span class="nick" style="color:#6b8072"><a href="#122445" label="[12:24:45]">&lt;stikonas&gt;</a></span><span class="message">gforce_d11977: oh, I think I might now what causes that automake 1.13 issue <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/issues/93">https://github.com/fosslinux/live-bootstrap/issues/93</a> </span></div><div class="line" id="122501"><span class="nick" style="color:#6b8072"><a href="#122501" label="[12:25:01]">&lt;stikonas&gt;</a></span><span class="message">would you be able to test my fix?&gt;</span></div><div class="line" id="122514"><span class="nick" style="color:#bc80bd"><a href="#122514" label="[12:25:14]">&lt;gforce_d11977&gt;</a></span><span class="message">ofcourse i can test</span></div><div class="line" id="122524"><span class="nick" style="color:#bc80bd"><a href="#122524" label="[12:25:24]">&lt;gforce_d11977&gt;</a></span><span class="message">let me check</span></div><div class="line" id="122617"><span class="nick" style="color:#bc80bd"><a href="#122617" label="[12:26:17]">&lt;gforce_d11977&gt;</a></span><span class="message">ok, just show it to me / paste.bin or something, i will test</span></div><div class="line" id="122617"><span class="nick" style="color:#6b8072"><a href="#122617" label="[12:26:17]">&lt;stikonas&gt;</a></span><span class="message">the fix is here <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysa/automake-1.15.1/patches/bootstrap.patch">https://github.com/fosslinux/live-bootstrap/blob/master/sysa/automake-1.15.1/patches/bootstrap.patch</a> </span></div><div class="line" id="122625"><span class="nick" style="color:#6b8072"><a href="#122625" label="[12:26:25]">&lt;stikonas&gt;</a></span><span class="message">just need to apply this patch for 1.13.4</span></div><div class="line" id="122633"><span class="nick" style="color:#6b8072"><a href="#122633" label="[12:26:33]">&lt;stikonas&gt;</a></span><span class="message">it was already in the tree for some time</span></div><div class="line" id="122728"><span class="nick" style="color:#6b8072"><a href="#122728" label="[12:27:28]">&lt;stikonas&gt;</a></span><span class="message">gforce_d11977: that patch applies cleanly  to 1.13.4 too, so just copy it into patches dir</span></div><div class="line" id="122802"><span class="nick" style="color:#bc80bd"><a href="#122802" label="[12:28:02]">&lt;gforce_d11977&gt;</a></span><span class="message">ok, will do and report, give me time for first results till evening</span></div><div class="line" id="122932"><span class="nick" style="color:#6b8072"><a href="#122932" label="[12:29:32]">&lt;stikonas&gt;</a></span><span class="message">I think it should work</span></div><div class="line" id="122939"><span class="nick" style="color:#6b8072"><a href="#122939" label="[12:29:39]">&lt;stikonas&gt;</a></span><span class="message">it patches out those lines that raise error</span></div><div class="line" id="122958"><span class="nick" style="color:#6b8072"><a href="#122958" label="[12:29:58]">&lt;stikonas&gt;</a></span><span class="message">I think that bug was not intermittent in 1.15.1, so I had to find a fix</span></div><div class="line" id="123019"><span class="nick" style="color:#6b8072"><a href="#123019" label="[12:30:19]">&lt;stikonas&gt;</a></span><span class="message">(because we were bootstrapping 1.15.3 with ./bootstrap script instead of running autoreconf)</span></div><div class="line" id="123031"><span class="nick" style="color:#6b8072"><a href="#123031" label="[12:30:31]">&lt;stikonas&gt;</a></span><span class="message">anyway, that should fix at least those frequent errors</span></div><div class="line" id="123047"><span class="nick" style="color:#6b8072"><a href="#123047" label="[12:30:47]">&lt;stikonas&gt;</a></span><span class="message">everything else is fairly infrequent even on your kernel</span></div><div class="line" id="123130"><span class="nick" style="color:#6b8072"><a href="#123130" label="[12:31:30]">&lt;stikonas&gt;</a></span><span class="message">I'll prepare a PR then to fix this...</span></div><div class="line" id="123437"><span class="nick" style="color:#6b8072"><a href="#123437" label="[12:34:37]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/107">https://github.com/fosslinux/live-bootstrap/pull/107</a> </span></div><div class="line" id="135057"><span class="nick" style="color:#389600"><a href="#135057" label="[13:50:57]">&lt;OriansJ`&gt;</a></span><span class="message">attila_lendvai: You will find that we welcome all people and FLOSS projects; with a very much  who does decides attitude in regards to technical decisions. I have a repo onf notes on the pieces <a rel="nofollow" href="https://github.com/oriansj/talk-notes">https://github.com/oriansj/talk-notes</a>  and we have bootstrapped GCC 4.9.4 from hex starting here: <a rel="nofollow" href="https://github.com/oriansj/stage0-posix">https://github.com/oriansj/stage0-posix</a>  and working all the way through these steps</span></div><div class="line" id="135057"><span class="nick" style="color:#389600"><a href="#135057" label="[13:50:57]">&lt;OriansJ`&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/talk-notes/blob/master/live-bootstrap.pdf">https://github.com/oriansj/talk-notes/blob/master/live-bootstrap.pdf</a>  without using any pregenerated files.</span></div><div class="line" id="135350"><span class="nick" style="color:#389600"><a href="#135350" label="[13:53:50]">&lt;OriansJ`&gt;</a></span><span class="message">if you want the lowest level mes.c (and mescc) for running you can find it here: <a rel="nofollow" href="https://github.com/oriansj/mes-m2">https://github.com/oriansj/mes-m2</a>  (I am currently working to get it into form for long term maintaince)</span></div><div class="line" id="140400"><span class="nick" style="color:#234e69"><a href="#140400" label="[14:04:00]">&lt;attila_lendvai&gt;</a></span><span class="message">OriansJ`, great stuff, thank you!</span></div><div class="line" id="141020"><span class="nick" style="color:#6b8072"><a href="#141020" label="[14:10:20]">&lt;stikonas&gt;</a></span><span class="message">4.0.4 for now, not 4.9.4</span></div><div class="line" id="141034"><span class="nick" style="color:#6b8072"><a href="#141034" label="[14:10:34]">&lt;stikonas&gt;</a></span><span class="message">4.9.4 will need C++ compiler which live-bootstrap does not have</span></div><div class="line" id="141510"><span class="nick" style="color:#6b8072"><a href="#141510" label="[14:15:10]">&lt;stikonas&gt;</a></span><span class="message">guile should be good to get first before we build C++ compiler since gcc has soft dependency on guile</span></div><div class="line" id="141530"><span class="nick" style="color:#6b8072"><a href="#141530" label="[14:15:30]">&lt;stikonas&gt;</a></span><span class="message">(for build system)</span></div><div class="line" id="153427"><span class="nick" style="color:#6b8072"><a href="#153427" label="[15:34:27]">&lt;stikonas&gt;</a></span><span class="message">gforce_d11977: have you seen <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/issues/100">https://github.com/fosslinux/live-bootstrap/issues/100</a>  only in automake 1.13?</span></div><div class="line" id="153442"><span class="nick" style="color:#6b8072"><a href="#153442" label="[15:34:42]">&lt;stikonas&gt;</a></span><span class="message">if so, this will also be fixed together with that more frequent error</span></div><div class="line" id="153454"><span class="nick" style="color:#6b8072"><a href="#153454" label="[15:34:54]">&lt;stikonas&gt;</a></span><span class="message">I'm removing automake 1.12 and automake 1.13 entirely</span></div><div class="line" id="155502"><span class="nick" style="color:#3c5b35"><a href="#155502" label="[15:55:02]">&lt;pder&gt;</a></span><span class="message">exit</span></div><div class="line" id="163054"><span class="nick">***</span><span class="message notice">pgreco_ is now known as pgreco</span></div><div class="line" id="165655"><span class="nick" style="color:#6b8072"><a href="#165655" label="[16:56:55]">&lt;stikonas&gt;</a></span><span class="message">janneke: would you be interested in the following patch for mes <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysa/tcc-0.9.27/patches/mes-libc-crt1.patch">https://github.com/fosslinux/live-bootstrap/blob/master/sysa/tcc-0.9.27/patches/mes-libc-crt1.patch</a> </span></div><div class="line" id="170639"><span class="nick" style="color:#389600"><a href="#170639" label="[17:06:39]">&lt;OriansJ`&gt;</a></span><span class="message">stikonas: so what you are saying is we should start creating bug reports for TCC for the features needed to compile newer versions of GCC</span></div><div class="line" id="170744"><span class="nick" style="color:#6b8072"><a href="#170744" label="[17:07:44]">&lt;stikonas&gt;</a></span><span class="message">OriansJ`: not really, in live bootstrap tcc 0.9.27 can build gcc 4.0.4, I think tcc from mob branch (which maybe will be 0.9.28 at some point) can build gcc 4.7.4</span></div><div class="line" id="170809"><span class="nick" style="color:#6b8072"><a href="#170809" label="[17:08:09]">&lt;stikonas&gt;</a></span><span class="message">(not sure about any pre-gen stuff there etc...) 4.0.4 might still be much easier to build</span></div><div class="line" id="170822"><span class="nick" style="color:#6b8072"><a href="#170822" label="[17:08:22]">&lt;stikonas&gt;</a></span><span class="message">but anything later is not buildable with TCC no matter the patches</span></div><div class="line" id="170828"><span class="nick" style="color:#6b8072"><a href="#170828" label="[17:08:28]">&lt;stikonas&gt;</a></span><span class="message">since it needs C++</span></div><div class="line" id="170926"><span class="nick" style="color:#6b8072"><a href="#170926" label="[17:09:26]">&lt;stikonas&gt;</a></span><span class="message">anyway, tcc mob (future 0.9.28) will need either building with older TCC or improvements in initial libc</span></div><div class="line" id="170935"><span class="nick" style="color:#6b8072"><a href="#170935" label="[17:09:35]">&lt;stikonas&gt;</a></span><span class="message">current mes libc can't build tcc mob</span></div><div class="line" id="171239"><span class="nick" style="color:#389600"><a href="#171239" label="[17:12:39]">&lt;OriansJ`&gt;</a></span><span class="message">stikonas: well we can always do another TCC self-host step; with the best libc we can build at that stage</span></div><div class="line" id="171335"><span class="nick" style="color:#af8d2f"><a href="#171335" label="[17:13:35]">&lt;stikonas[m]&gt;</a></span><span class="message">Yes, but in any case GCC 4.7.4 is the last version written in C</span></div><div class="line" id="171416"><span class="nick" style="color:#389600"><a href="#171416" label="[17:14:16]">&lt;OriansJ`&gt;</a></span><span class="message">and we will probably have to backport new architectures into it and find someone to do long support on it</span></div><div class="line" id="171845"><span class="nick" style="color:#bc80bd"><a href="#171845" label="[17:18:45]">&lt;gforce_d11977&gt;</a></span><span class="message">stikonas: yes, <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/issues/100">https://github.com/fosslinux/live-bootstrap/issues/100</a>  only with 1.13 - lets wait for the result of mass test.</span></div><div class="line" id="171912"><span class="nick" style="color:#bc80bd"><a href="#171912" label="[17:19:12]">&lt;gforce_d11977&gt;</a></span><span class="message">if this is good, i will start another masstest with 1000 runs, so i get better numbers 8-)</span></div><div class="line" id="172834"><span class="nick" style="color:#bc80bd"><a href="#172834" label="[17:28:34]">&lt;gforce_d11977&gt;</a></span><span class="message">stikonas: sorry, but now are 33% of all builds failing during automake-1.13.4 (with patch applied like suggested): see <a rel="nofollow" href="http://intercity-vpn.de/bootstrap/bootstrap.log-multilog-6-1618666280.txt">http://intercity-vpn.de/bootstrap/bootstrap.log-multilog-6-1618666280.txt</a> </span></div><div class="line" id="173046"><span class="nick" style="color:#af8d2f"><a href="#173046" label="[17:30:46]">&lt;stikonas[m]&gt;</a></span><span class="message">gforce_d11977: check latest untar branch</span></div><div class="line" id="173054"><span class="nick" style="color:#af8d2f"><a href="#173054" label="[17:30:54]">&lt;stikonas[m]&gt;</a></span><span class="message">That will work 100%</span></div><div class="line" id="173124"><span class="nick" style="color:#af8d2f"><a href="#173124" label="[17:31:24]">&lt;stikonas[m]&gt;</a></span><span class="message">(automake 1.12 &amp; 1.13 removed completely)</span></div><div class="line" id="174512"><span class="nick" style="color:#bc80bd"><a href="#174512" label="[17:45:12]">&lt;gforce_d11977&gt;</a></span><span class="message">ok, will test</span></div><div class="line" id="174528"><span class="nick" style="color:#bc80bd"><a href="#174528" label="[17:45:28]">&lt;gforce_d11977&gt;</a></span><span class="message">(great work BTW!)</span></div><div class="line" id="205532"><span class="nick" style="color:#389600"><a href="#205532" label="[20:55:32]">&lt;janneke&gt;</a></span><span class="message">stikonas: looks like a bug, good catch</span></div><div class="line" id="210430"><span class="nick" style="color:#6b8072"><a href="#210430" label="[21:04:30]">&lt;stikonas&gt;</a></span><span class="message">janneke: well, pder fixed it</span></div><div class="line" id="210438"><span class="nick" style="color:#6b8072"><a href="#210438" label="[21:04:38]">&lt;stikonas&gt;</a></span><span class="message">so all credit to him</span></div><div class="line" id="210444"><span class="nick" style="color:#6b8072"><a href="#210444" label="[21:04:44]">&lt;stikonas&gt;</a></span><span class="message">although, I helped to diagnose it a bit</span></div><div class="line" id="210502"><span class="nick" style="color:#6b8072"><a href="#210502" label="[21:05:02]">&lt;stikonas&gt;</a></span><span class="message">basically, more than 255 command line arguments wrap</span></div><br /></div></body></html>