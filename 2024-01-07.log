<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2024-01-07.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="013725"><span class="nick" style="color:#389600"><a href="#013725" label="[01:37:25]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: do we still need that lb1 in fiwix version?</span></div><div class="line" id="013730"><span class="nick" style="color:#389600"><a href="#013730" label="[01:37:30]">&lt;stikonas&gt;</a></span><span class="message">I thought this signified your fork</span></div><div class="line" id="013753"><span class="nick" style="color:#389600"><a href="#013753" label="[01:37:53]">&lt;stikonas&gt;</a></span><span class="message">oh, that's upstream tag...</span></div><div class="line" id="014727"><span class="nick" style="color:#8dd3c7"><a href="#014727" label="[01:47:27]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: yes, it signifies an interim release to support live-bootstrap</span></div><div class="line" id="014919"><span class="nick" style="color:#389600"><a href="#014919" label="[01:49:19]">&lt;stikonas&gt;</a></span><span class="message">anyway, PR seems to be fine</span></div><div class="line" id="014922"><span class="nick" style="color:#8dd3c7"><a href="#014922" label="[01:49:22]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: if Mikaku wants to call it 1.5.1 instead that's fine with me but that might take more time / formality.</span></div><div class="line" id="015051"><span class="nick" style="color:#8dd3c7"><a href="#015051" label="[01:50:51]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: by using -lb1 it just signifies a source snapshot that live-bootstrap is free to use prior to the next formal release.</span></div><div class="line" id="015217"><span class="nick" style="color:#389600"><a href="#015217" label="[01:52:17]">&lt;stikonas&gt;</a></span><span class="message">CI is still running, so let's wait with merging...</span></div><div class="line" id="015304"><span class="nick" style="color:#389600"><a href="#015304" label="[01:53:04]">&lt;stikonas&gt;</a></span><span class="message">and possibly Googulator might want to try baremetal run...</span></div><div class="line" id="015512"><span class="nick" style="color:#8dd3c7"><a href="#015512" label="[01:55:12]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: yeah there are a lot of outstanding PRs which means there will probably be conflicts to resolve.</span></div><div class="line" id="015532"><span class="nick" style="color:#389600"><a href="#015532" label="[01:55:32]">&lt;stikonas&gt;</a></span><span class="message">I didn't do much today though but I merged posix-runner into stage0-uefi main branch and also made it build at the end of stage0-posix</span></div><div class="line" id="015601"><span class="nick" style="color:#389600"><a href="#015601" label="[01:56:01]">&lt;stikonas&gt;</a></span><span class="message">yeah, we have quite a few open issues and PRs now</span></div><div class="line" id="015705"><span class="nick" style="color:#8dd3c7"><a href="#015705" label="[01:57:05]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: I'm assuming I may have to rebase my PR but that's ok. I just decided to put it out there rather than wait indefinitely...</span></div><div class="line" id="015713"><span class="nick" style="color:#389600"><a href="#015713" label="[01:57:13]">&lt;stikonas&gt;</a></span><span class="message">we'll see</span></div><div class="line" id="015727"><span class="nick" style="color:#389600"><a href="#015727" label="[01:57:27]">&lt;stikonas&gt;</a></span><span class="message">maybe fossy will merge it first...</span></div><div class="line" id="015829"><span class="nick" style="color:#8dd3c7"><a href="#015829" label="[01:58:29]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: maybe. I'd like to help Googulator rather than make it more difficult. I think that's where my focus will go next.</span></div><div class="line" id="020001"><span class="nick" style="color:#389600"><a href="#020001" label="[02:00:01]">&lt;stikonas&gt;</a></span><span class="message">yeah, Googulator is making a lot of improvements too</span></div><div class="line" id="020025"><span class="nick" style="color:#389600"><a href="#020025" label="[02:00:25]">&lt;stikonas&gt;</a></span><span class="message">I do have some changes I want to make to live-bootstrap, but will probably wait a bit due to being busy...</span></div><div class="line" id="020052"><span class="nick" style="color:#389600"><a href="#020052" label="[02:00:52]">&lt;stikonas&gt;</a></span><span class="message">need to improve uefi bootstrap a bit. And there is also an unfinished riscv64 posix bootstrap...</span></div><div class="line" id="110938"><span class="nick" style="color:#2e2a4a"><a href="#110938" label="[11:09:38]">&lt;Googulator&gt;</a></span><span class="message">Thanks for the heads up about the Fiwix PR; will do a bare metal test of that on my boards soon.</span></div><div class="line" id="110957"><span class="nick" style="color:#2e2a4a"><a href="#110957" label="[11:09:57]">&lt;Googulator&gt;</a></span><span class="message">BTW, am I the only one at this point doing testing on bare metal?</span></div><div class="line" id="115412"><span class="nick" style="color:#389600"><a href="#115412" label="[11:54:12]">&lt;stikonas&gt;</a></span><span class="message">Googulator: for now I think you are the only one</span></div><div class="line" id="115758"><span class="nick" style="color:#389600"><a href="#115758" label="[11:57:58]">&lt;stikonas&gt;</a></span><span class="message">I only have 2 machines and the one that has BIOS compatibility mode is production right now...</span></div><div class="line" id="115804"><span class="nick" style="color:#389600"><a href="#115804" label="[11:58:04]">&lt;stikonas&gt;</a></span><span class="message">so hard to test baremetal</span></div><div class="line" id="125940"><span class="nick" style="color:#2e2a4a"><a href="#125940" label="[12:59:40]">&lt;Googulator&gt;</a></span><span class="message">Both boards booted into the new Fiwix fine</span></div><div class="line" id="135120"><span class="nick" style="color:#2e2a4a"><a href="#135120" label="[13:51:20]">&lt;Googulator&gt;</a></span><span class="message">I was also looking at the Haskell bootstrap situation - the recently found GHC 0.26 source code mentions that it was previously built using Chalmers HBC, but as of 0.26, that's no longer supported. Still, IMO HBC has the best chance of working - if we can get it compiled at all, that is.</span></div><div class="line" id="135207"><span class="nick" style="color:#2e2a4a"><a href="#135207" label="[13:52:07]">&lt;Googulator&gt;</a></span><span class="message">I did get Yale Haskell to run using clisp (on my regular system, not in a bootstrapped environment, but AFAIK clisp is written in C, and shouldn't be too hard to bootstrap)</span></div><div class="line" id="135240"><span class="nick" style="color:#2e2a4a"><a href="#135240" label="[13:52:40]">&lt;Googulator&gt;</a></span><span class="message">The issue with HBC, of course, is that it's written in LazyML, a language that's pretty much extinct</span></div><div class="line" id="135333"><span class="nick" style="color:#2e2a4a"><a href="#135333" label="[13:53:33]">&lt;Googulator&gt;</a></span><span class="message">&amp; the only LazyML compiler that ever existed is the one that eventually got extended to support Haskell, becoming HBC.</span></div><div class="line" id="135409"><span class="nick" style="color:#2e2a4a"><a href="#135409" label="[13:54:09]">&lt;Googulator&gt;</a></span><span class="message">But I was thinking: LazyML is one of the earliest lazy functional languages, and one of the inspirations for Haskell itself.</span></div><div class="line" id="135421"><span class="nick" style="color:#2e2a4a"><a href="#135421" label="[13:54:21]">&lt;Googulator&gt;</a></span><span class="message">And it seems a lot simpler than Haskell.</span></div><div class="line" id="135450"><span class="nick" style="color:#2e2a4a"><a href="#135450" label="[13:54:50]">&lt;Googulator&gt;</a></span><span class="message">...Maybe we can write a simple transpiler to read LazyML and output Yale-compatible Haskell?</span></div><div class="line" id="135623"><span class="nick" style="color:#2e2a4a"><a href="#135623" label="[13:56:23]">&lt;Googulator&gt;</a></span><span class="message">HBC's LazyML parser frontend is written in C (using lex &amp; yacc; it's easily fixed to be Bison-compatible), and it probably shouldn't be hard to wire it up to a simple Haskell code generation backend</span></div><div class="line" id="135849"><span class="nick" style="color:#2e2a4a"><a href="#135849" label="[13:58:49]">&lt;Googulator&gt;</a></span><span class="message">so the plan is: fix up the LazyML parser to build with modern Bison (done), write a Haskell generator backend in a language we already have bootstrapped, use that to transpile HBC into Yale-compatible Haskell</span></div><div class="line" id="135919"><span class="nick" style="color:#2e2a4a"><a href="#135919" label="[13:59:19]">&lt;Googulator&gt;</a></span><span class="message">Then use the transpiled HBC running under Yale Haskell's interpreter to hopefully compile GHC 0.26</span></div><div class="line" id="135952"><span class="nick" style="color:#2e2a4a"><a href="#135952" label="[13:59:52]">&lt;Googulator&gt;</a></span><span class="message">And then walk up the chain of GHC versions until we hit modern day</span></div><div class="line" id="140201"><span class="nick" style="color:#2e2a4a"><a href="#140201" label="[14:02:01]">&lt;Googulator&gt;</a></span><span class="message">One issue could be I/O</span></div><div class="line" id="140232"><span class="nick" style="color:#2e2a4a"><a href="#140232" label="[14:02:32]">&lt;Googulator&gt;</a></span><span class="message">Yale Haskell 2.05's docs state that one of the new features is &quot;Monadic I/O&quot;, but I'm not quite sure if this is the same monad system Haskell has today</span></div><div class="line" id="140911"><span class="nick" style="color:#2e2a4a"><a href="#140911" label="[14:09:11]">&lt;Googulator&gt;</a></span><span class="message">(Yale Haskell 2.2 apparently existed, but releases newer than 2.05 appear to be lost.)</span></div><div class="line" id="143411"><span class="nick" style="color:#389600"><a href="#143411" label="[14:34:11]">&lt;stikonas&gt;</a></span><span class="message">Googulator: have you talked to rekado?</span></div><div class="line" id="143419"><span class="nick" style="color:#389600"><a href="#143419" label="[14:34:19]">&lt;stikonas&gt;</a></span><span class="message">I think he was the last one to look at haskell</span></div><div class="line" id="144600"><span class="nick" style="color:#6b8072"><a href="#144600" label="[14:46:00]">&lt;oriansj&gt;</a></span><span class="message">muurkha: well one needs enough RAM to run a kernel capable of handling memory paging and process management. (Assuming one has Memory mapped storage devices, otherwise additional functionality may be required in the kernel as well)</span></div><div class="line" id="144907"><span class="nick" style="color:#6b8072"><a href="#144907" label="[14:49:07]">&lt;oriansj&gt;</a></span><span class="message">and atleast 2 pages of memory for user space processes.</span></div><div class="line" id="160146"><span class="nick" style="color:#2e2a4a"><a href="#160146" label="[16:01:46]">&lt;Googulator&gt;</a></span><span class="message">stikonas: I haven't talked to him yet, but I'm using his fork of Yale</span></div><div class="line" id="160300"><span class="nick" style="color:#389600"><a href="#160300" label="[16:03:00]">&lt;stikonas&gt;</a></span><span class="message">well, I haven't looked much into haskell... Maybe it would indeed be easier to write some transpiler/compiler for some stuff rather than just rely on historic code</span></div><div class="line" id="162546"><span class="nick" style="color:#80b1d3"><a href="#162546" label="[16:25:46]">&lt;nimaje&gt;</a></span><span class="message">hm, I throught I read here a while ago about some really limited subset of haskell, that can be used to compile a less limited subset, that can compile ghc, but that must have been months ago, so I could easily remember wrong</span></div><div class="line" id="162819"><span class="nick" style="color:#389600"><a href="#162819" label="[16:28:19]">&lt;stikonas&gt;</a></span><span class="message">at the very least there isn't complete chain</span></div><div class="line" id="162828"><span class="nick" style="color:#389600"><a href="#162828" label="[16:28:28]">&lt;stikonas&gt;</a></span><span class="message">you could compile haskell with an older haskell</span></div><div class="line" id="162847"><span class="nick" style="color:#389600"><a href="#162847" label="[16:28:47]">&lt;stikonas&gt;</a></span><span class="message">and then there are various options, like nh98, hugs, and those Googulator mentioned</span></div><div class="line" id="162849"><span class="nick" style="color:#389600"><a href="#162849" label="[16:28:49]">&lt;stikonas&gt;</a></span><span class="message">but nothing complete</span></div><div class="line" id="162959"><span class="nick" style="color:#2e2a4a"><a href="#162959" label="[16:29:59]">&lt;Googulator&gt;</a></span><span class="message">According to ghc's own documentation, the only thing besides itself that as ever used to compile it was hbc</span></div><div class="line" id="163021"><span class="nick" style="color:#2e2a4a"><a href="#163021" label="[16:30:21]">&lt;Googulator&gt;</a></span><span class="message">So I'm not too hopeful that nhc98 could work</span></div><div class="line" id="163107"><span class="nick" style="color:#2e2a4a"><a href="#163107" label="[16:31:07]">&lt;Googulator&gt;</a></span><span class="message">Even if the problems with getting nhc98 to produce usable binaries when interpreted by Hugs are solved, compiling ghc with nhc98 would amount to breaking new ground</span></div><div class="line" id="163143"><span class="nick" style="color:#2e2a4a"><a href="#163143" label="[16:31:43]">&lt;Googulator&gt;</a></span><span class="message">Which is why I'm focusing on hbc instead</span></div><div class="line" id="163200"><span class="nick" style="color:#80b1d3"><a href="#163200" label="[16:32:00]">&lt;nimaje&gt;</a></span><span class="message">ah, it was <a rel="nofollow" href="https://github.com/blynn/compiler">https://github.com/blynn/compiler</a> </span></div><div class="line" id="163217"><span class="nick" style="color:#389600"><a href="#163217" label="[16:32:17]">&lt;stikonas&gt;</a></span><span class="message">oh, that one is nowhere even close to building ghc</span></div><div class="line" id="163221"><span class="nick" style="color:#389600"><a href="#163221" label="[16:32:21]">&lt;stikonas&gt;</a></span><span class="message">or anything other haskell</span></div><div class="line" id="163337"><span class="nick" style="color:#389600"><a href="#163337" label="[16:33:37]">&lt;stikonas&gt;</a></span><span class="message">it's also as slow as mes...</span></div><div class="line" id="163340"><span class="nick" style="color:#389600"><a href="#163340" label="[16:33:40]">&lt;stikonas&gt;</a></span><span class="message">if not worse</span></div><div class="line" id="163450"><span class="nick" style="color:#2e2a4a"><a href="#163450" label="[16:34:50]">&lt;Googulator&gt;</a></span><span class="message">&lt;s&gt; Maybe it was just being lazy.</span></div><div class="line" id="163714"><span class="nick" style="color:#2e2a4a"><a href="#163714" label="[16:37:14]">&lt;Googulator&gt;</a></span><span class="message">Looking at hbc's source, it seems to be mostly good news: there are 2 separate parsers written in C/Yacc (one for Lazy ML, one for Haskell) which are apparently meant to produce a common representation</span></div><div class="line" id="163734"><span class="nick" style="color:#2e2a4a"><a href="#163734" label="[16:37:34]">&lt;Googulator&gt;</a></span><span class="message">&amp; then that representation is fed to a common backend, which is itself written in Lazy ML</span></div><div class="line" id="163805"><span class="nick" style="color:#2e2a4a"><a href="#163805" label="[16:38:05]">&lt;Googulator&gt;</a></span><span class="message">All of this is tied together by a driver program, also written in C</span></div><div class="line" id="163837"><span class="nick" style="color:#2e2a4a"><a href="#163837" label="[16:38:37]">&lt;Googulator&gt;</a></span><span class="message">Is there a built-in way to turn a Yacc/Bison parser into a generator?</span></div><div class="line" id="172226"><span class="nick" style="color:#6b8072"><a href="#172226" label="[17:22:26]">&lt;oriansj&gt;</a></span><span class="message">nimaje: blynn was just explored as the question of would it be easier to write a scheme in hasekell to run mescc; using a haskell compiler bootstrapped from C.</span></div><div class="line" id="172832"><span class="nick" style="color:#389600"><a href="#172832" label="[17:28:32]">&lt;stikonas&gt;</a></span><span class="message">but mes-m2 that was buildable with M2-Planet materialized first</span></div><div class="line" id="172911"><span class="nick" style="color:#389600"><a href="#172911" label="[17:29:11]">&lt;stikonas&gt;</a></span><span class="message">first it was non-upstream fork but later janneke made upstream mes buildable by M2-Planet too</span></div><div class="line" id="173051"><span class="nick" style="color:#6d2462"><a href="#173051" label="[17:30:51]">&lt;janneke&gt;</a></span><span class="message">yeah, that was another effective 1-2</span></div><div class="line" id="173122"><span class="nick" style="color:#6d2462"><a href="#173122" label="[17:31:22]">&lt;janneke&gt;</a></span><span class="message">oriansj initiated it and fixed all kinds of things in their fork that i backported and used</span></div><div class="line" id="180722"><span class="nick" style="color:#389600"><a href="#180722" label="[18:07:22]">&lt;stikonas&gt;</a></span><span class="message">I was just testing mes-m2/mescc on UEFI...</span></div><div class="line" id="180820"><span class="nick" style="color:#389600"><a href="#180820" label="[18:08:20]">&lt;stikonas&gt;</a></span><span class="message">it would probably run (it seems to be doing things...), but I think tehre are still some bugs in my implementation of fork/execve</span></div><div class="line" id="180928"><span class="nick" style="color:#389600"><a href="#180928" label="[18:09:28]">&lt;stikonas&gt;</a></span><span class="message">probably similar issues that I saw with kaem</span></div><div class="line" id="181048"><span class="nick" style="color:#389600"><a href="#181048" label="[18:10:48]">&lt;stikonas&gt;</a></span><span class="message">oh, it's trying to execve #f</span></div><div class="line" id="181102"><span class="nick" style="color:#389600"><a href="#181102" label="[18:11:02]">&lt;stikonas&gt;</a></span><span class="message">(after outputing correct M1 assembly for crt1.c)</span></div><div class="line" id="181245"><span class="nick" style="color:#389600"><a href="#181245" label="[18:12:45]">&lt;stikonas&gt;</a></span><span class="message">janneke: while you are here, how does mescc find M1?</span></div><div class="line" id="181251"><span class="nick" style="color:#389600"><a href="#181251" label="[18:12:51]">&lt;stikonas&gt;</a></span><span class="message">does it look in PATH?</span></div><div class="line" id="181436"><span class="nick" style="color:#6d2462"><a href="#181436" label="[18:14:36]">&lt;janneke&gt;</a></span><span class="message">stikonas: yes, see mescc.scm:</span></div><div class="line" id="181441"><span class="nick" style="color:#6d2462"><a href="#181441" label="[18:14:41]">&lt;janneke&gt;</a></span><span class="message">         (M1 (or (getenv &quot;M1&quot;) &quot;M1&quot;))</span></div><div class="line" id="181441"><span class="nick" style="color:#6d2462"><a href="#181441" label="[18:14:41]">&lt;janneke&gt;</a></span><span class="message">         (command `(,M1</span></div><div class="line" id="181441"><span class="nick" style="color:#6d2462"><a href="#181441" label="[18:14:41]">&lt;janneke&gt;</a></span><span class="message">                    &quot;--little-endian&quot;</span></div><div class="line" id="181511"><span class="nick" style="color:#6d2462"><a href="#181511" label="[18:15:11]">&lt;janneke&gt;</a></span><span class="message">so, you can also set environment variable M1 and that will take precedence</span></div><div class="line" id="181626"><span class="nick" style="color:#389600"><a href="#181626" label="[18:16:26]">&lt;stikonas&gt;</a></span><span class="message">argh, I was looking at the wrong mescc.scm first</span></div><div class="line" id="181630"><span class="nick" style="color:#389600"><a href="#181630" label="[18:16:30]">&lt;stikonas&gt;</a></span><span class="message">(the one in parent dir)</span></div><div class="line" id="181633"><span class="nick" style="color:#389600"><a href="#181633" label="[18:16:33]">&lt;stikonas&gt;</a></span><span class="message">thanks!</span></div><div class="line" id="181645"><span class="nick" style="color:#6d2462"><a href="#181645" label="[18:16:45]">&lt;janneke&gt;</a></span><span class="message">ah, yes; np</span></div><div class="line" id="181655"><span class="nick" style="color:#389600"><a href="#181655" label="[18:16:55]">&lt;stikonas&gt;</a></span><span class="message">let me try to set M1 env variable first</span></div><div class="line" id="181816"><span class="nick" style="color:#389600"><a href="#181816" label="[18:18:16]">&lt;stikonas&gt;</a></span><span class="message">hmm, that did work!</span></div><div class="line" id="181920"><span class="nick" style="color:#389600"><a href="#181920" label="[18:19:20]">&lt;stikonas&gt;</a></span><span class="message">well, at least to some extent...</span></div><div class="line" id="181942"><span class="nick" style="color:#389600"><a href="#181942" label="[18:19:42]">&lt;stikonas&gt;</a></span><span class="message">but it spit out a lot of DEFINE statements...</span></div><div class="line" id="182419"><span class="nick" style="color:#389600"><a href="#182419" label="[18:24:19]">&lt;stikonas&gt;</a></span><span class="message">and it actually created crt1.o with corrent sha256sum checksum</span></div><div class="line" id="182439"><span class="nick" style="color:#389600"><a href="#182439" label="[18:24:39]">&lt;stikonas&gt;</a></span><span class="message">just for some reason printed some unexptected arguments (8 instead of 0) in primitive-fork and got stuck</span></div><div class="line" id="183644"><span class="nick" style="color:#389600"><a href="#183644" label="[18:36:44]">&lt;stikonas&gt;</a></span><span class="message">janneke: sorry, one more question, so I'm getting the following error: <a rel="nofollow" href="https://stikonas.eu/files/bootstrap/2024-01-07-17-31-21-462.jpg">https://stikonas.eu/files/bootstrap/2024-01-07-17-31-21-462.jpg</a> </span></div><div class="line" id="183703"><span class="nick" style="color:#389600"><a href="#183703" label="[18:37:03]">&lt;stikonas&gt;</a></span><span class="message">I guess something is wrong with &quot;command&quot; variable in mescc.scm (and (zero? (apply assert-system* command))</span></div><div class="line" id="183718"><span class="nick" style="color:#389600"><a href="#183718" label="[18:37:18]">&lt;stikonas&gt;</a></span><span class="message">(at the end of hex2-&gt;elf function</span></div><div class="line" id="183833"><span class="nick" style="color:#389600"><a href="#183833" label="[18:38:33]">&lt;stikonas&gt;</a></span><span class="message">hmm, perhaps I need to print some debug info in mescc...</span></div><div class="line" id="183916"><span class="nick" style="color:#6d2462"><a href="#183916" label="[18:39:16]">&lt;janneke&gt;</a></span><span class="message">that's a weird error</span></div><div class="line" id="183927"><span class="nick" style="color:#389600"><a href="#183927" label="[18:39:27]">&lt;stikonas&gt;</a></span><span class="message">indeed, it's most likely kernel bug</span></div><div class="line" id="184004"><span class="nick" style="color:#6d2462"><a href="#184004" label="[18:40:04]">&lt;janneke&gt;</a></span><span class="message">there's only one primitive-fork, in posix.mes, afaics</span></div><div class="line" id="184006"><span class="nick" style="color:#6d2462"><a href="#184006" label="[18:40:06]">&lt;janneke&gt;</a></span><span class="message">(define (system* file-name . args)</span></div><div class="line" id="184006"><span class="nick" style="color:#6d2462"><a href="#184006" label="[18:40:06]">&lt;janneke&gt;</a></span><span class="message">  (let ((pid (primitive-fork)))</span></div><div class="line" id="184008"><span class="nick" style="color:#389600"><a href="#184008" label="[18:40:08]">&lt;stikonas&gt;</a></span><span class="message">still, it's looking very promising so far</span></div><div class="line" id="184011"><span class="nick" style="color:#6d2462"><a href="#184011" label="[18:40:11]">&lt;janneke&gt;</a></span><span class="message">yeah</span></div><div class="line" id="184028"><span class="nick" style="color:#6d2462"><a href="#184028" label="[18:40:28]">&lt;janneke&gt;</a></span><span class="message">so, really no arguments here</span></div><div class="line" id="184110"><span class="nick" style="color:#389600"><a href="#184110" label="[18:41:10]">&lt;stikonas&gt;</a></span><span class="message">but how did it even output correct crt1.o file...</span></div><div class="line" id="184125"><span class="nick" style="color:#389600"><a href="#184125" label="[18:41:25]">&lt;stikonas&gt;</a></span><span class="message">oh but that's M1 output...</span></div><div class="line" id="184127"><span class="nick" style="color:#389600"><a href="#184127" label="[18:41:27]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="185238"><span class="nick" style="color:#6d2462"><a href="#185238" label="[18:52:38]">&lt;janneke&gt;</a></span><span class="message">yeah crt1.s is mescc output, M1</span></div><div class="line" id="185349"><span class="nick" style="color:#6d2462"><a href="#185349" label="[18:53:49]">&lt;janneke&gt;</a></span><span class="message">that primitive-fork looks like it's caused by some sort of corruption</span></div><div class="line" id="185407"><span class="nick" style="color:#6d2462"><a href="#185407" label="[18:54:07]">&lt;janneke&gt;</a></span><span class="message">maybe a gc error / ARENA thing?</span></div><div class="line" id="190426"><span class="nick" style="color:#389600"><a href="#190426" label="[19:04:26]">&lt;stikonas&gt;</a></span><span class="message">more likely my fork  implementation doesn't do something correctly when suspending/restoring process</span></div><div class="line" id="191441"><span class="nick" style="color:#6d2462"><a href="#191441" label="[19:14:41]">&lt;janneke&gt;</a></span><span class="message">ah</span></div><div class="line" id="211114"><span class="nick" style="color:#234e69"><a href="#211114" label="[21:11:14]">&lt;muurkha&gt;</a></span><span class="message">oriansj: CP/M and PDP-7 Unix were self-bootstrapping without memory paging or, in the case of CP/M, process management</span></div><div class="line" id="211235"><span class="nick" style="color:#234e69"><a href="#211235" label="[21:12:35]">&lt;muurkha&gt;</a></span><span class="message">PDP-7 Unix had one user process in memory at a time, to which it allocated half of the 8192 18-bit words in the machine</span></div><div class="line" id="211325"><span class="nick" style="color:#234e69"><a href="#211325" label="[21:13:25]">&lt;muurkha&gt;</a></span><span class="message">I don't know how much RAM CP/M needed to be able to successfully assemble and link itself.  obviously it couldn't be more than 64KiB</span></div><div class="line" id="211340"><span class="nick" style="color:#234e69"><a href="#211340" label="[21:13:40]">&lt;muurkha&gt;</a></span><span class="message">but I suspect it was much lower, more like 16KiB</span></div><div class="line" id="211509"><span class="nick" style="color:#234e69"><a href="#211509" label="[21:15:09]">&lt;muurkha&gt;</a></span><span class="message">the reason I'm focusing so much on memory is that a 6502 is 3500 transistors, a PDP-8 is 4000, a Z80 or SeRV RISC-V is 8500, a MuP21 is 7500</span></div><div class="line" id="211554"><span class="nick" style="color:#234e69"><a href="#211554" label="[21:15:54]">&lt;muurkha&gt;</a></span><span class="message">but 4KiB of DRAM, the minimum you can really get by with for a high-level language, is 32768 transistors</span></div><div class="line" id="211752"><span class="nick" style="color:#234e69"><a href="#211752" label="[21:17:52]">&lt;muurkha&gt;</a></span><span class="message">so for the first 30 years of computers they didn't build RAM out of transistors but out of something cheaper: mercury delay lines, wire torsion delay lines, Williams tubes (1024 bits in one vacuum tube), magnetic drums, and finally magnetic cores</span></div><div class="line" id="212020"><span class="nick" style="color:#234e69"><a href="#212020" label="[21:20:20]">&lt;muurkha&gt;</a></span><span class="message">4KiB is what Apple Integer BASIC and Altair BASIC needed, and you can do an ITC Forth with a text interpreter in that space too</span></div><div class="line" id="225437"><span class="nick" style="color:#6c3d55"><a href="#225437" label="[22:54:37]">&lt;Piraty&gt;</a></span><span class="message">fossy: is that sarcasm?</span></div><br /></div></body></html>