<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-08-08.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="002159"><span class="nick" style="color:#389600"><a href="#002159" label="[00:21:59]">&lt;stikonas&gt;</a></span><span class="message">oriansj: hmm, I think in hex2 word version we don't yet have any way to process those pointers in .data?</span></div><div class="line" id="002213"><span class="nick" style="color:#389600"><a href="#002213" label="[00:22:13]">&lt;stikonas&gt;</a></span><span class="message">i.e. I had something like this in .M1</span></div><div class="line" id="002215"><span class="nick" style="color:#389600"><a href="#002215" label="[00:22:15]">&lt;stikonas&gt;</a></span><span class="message">:argv_hex0</span></div><div class="line" id="002217"><span class="nick" style="color:#389600"><a href="#002217" label="[00:22:17]">&lt;stikonas&gt;</a></span><span class="message">    &amp;hex0_seed %0</span></div><div class="line" id="002231"><span class="nick" style="color:#389600"><a href="#002231" label="[00:22:31]">&lt;stikonas&gt;</a></span><span class="message">well, &amp; is not there, I guess we have ! but that one does shifting</span></div><div class="line" id="002329"><span class="nick" style="color:#389600"><a href="#002329" label="[00:23:29]">&lt;stikonas&gt;</a></span><span class="message">oh actually maybe I'm not right</span></div><div class="line" id="002336"><span class="nick" style="color:#389600"><a href="#002336" label="[00:23:36]">&lt;stikonas&gt;</a></span><span class="message">I think there is code to process &amp;</span></div><div class="line" id="003523"><span class="nick" style="color:#8dd3c7"><a href="#003523" label="[00:35:23]">&lt;oriansj&gt;</a></span><span class="message">I guess I failed to ensure %label and &amp;label work for RISC-V</span></div><div class="line" id="003842"><span class="nick" style="color:#389600"><a href="#003842" label="[00:38:42]">&lt;stikonas&gt;</a></span><span class="message">yeah, I think WordStorePointer are still buggy</span></div><div class="line" id="003908"><span class="nick" style="color:#389600"><a href="#003908" label="[00:39:08]">&lt;stikonas&gt;</a></span><span class="message">possibly first consume_token in that function is extra...</span></div><div class="line" id="004221"><span class="nick" style="color:#8dd3c7"><a href="#004221" label="[00:42:21]">&lt;oriansj&gt;</a></span><span class="message">sounds about right</span></div><div class="line" id="004431"><span class="nick" style="color:#389600"><a href="#004431" label="[00:44:31]">&lt;stikonas&gt;</a></span><span class="message">ok, got hex2 to run without error, let see if I don't have any off by 1 errors</span></div><div class="line" id="004457"><span class="nick" style="color:#8dd3c7"><a href="#004457" label="[00:44:57]">&lt;oriansj&gt;</a></span><span class="message">and I have that patch up</span></div><div class="line" id="004611"><span class="nick" style="color:#389600"><a href="#004611" label="[00:46:11]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I have one extra line in my patch</span></div><div class="line" id="004625"><span class="nick" style="color:#389600"><a href="#004625" label="[00:46:25]">&lt;stikonas&gt;</a></span><span class="message">added Clear_Scratch(scratch); before next consume_token</span></div><div class="line" id="004828"><span class="nick" style="color:#8dd3c7"><a href="#004828" label="[00:48:28]">&lt;oriansj&gt;</a></span><span class="message">reasonable addition</span></div><div class="line" id="004913"><span class="nick" style="color:#389600"><a href="#004913" label="[00:49:13]">&lt;stikonas&gt;</a></span><span class="message">so with that it runs but resulting kaem-optional-seed does not to anything, possibly pointer values are still incorrect...</span></div><div class="line" id="004915"><span class="nick" style="color:#389600"><a href="#004915" label="[00:49:15]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="004930"><span class="nick" style="color:#389600"><a href="#004930" label="[00:49:30]">&lt;stikonas&gt;</a></span><span class="message">well, that needs more thourough debugging</span></div><div class="line" id="005116"><span class="nick" style="color:#8dd3c7"><a href="#005116" label="[00:51:16]">&lt;oriansj&gt;</a></span><span class="message">indeed.</span></div><div class="line" id="005457"><span class="nick" style="color:#389600"><a href="#005457" label="[00:54:57]">&lt;stikonas&gt;</a></span><span class="message">I should probably write .hex0 first</span></div><div class="line" id="005537"><span class="nick" style="color:#389600"><a href="#005537" label="[00:55:37]">&lt;stikonas&gt;</a></span><span class="message">oh, that might be because my data is not word-aligned</span></div><div class="line" id="005732"><span class="nick" style="color:#8dd3c7"><a href="#005732" label="[00:57:32]">&lt;oriansj&gt;</a></span><span class="message">stikonas: use &gt;</span></div><div class="line" id="005754"><span class="nick" style="color:#8dd3c7"><a href="#005754" label="[00:57:54]">&lt;oriansj&gt;</a></span><span class="message">sorry &lt;</span></div><div class="line" id="005808"><span class="nick" style="color:#8dd3c7"><a href="#005808" label="[00:58:08]">&lt;oriansj&gt;</a></span><span class="message">it does pad_to_align</span></div><div class="line" id="005936"><span class="nick" style="color:#8dd3c7"><a href="#005936" label="[00:59:36]">&lt;oriansj&gt;</a></span><span class="message">(one feature you might want to include in hex2 on such aligned architectures)</span></div><div class="line" id="010054"><span class="nick" style="color:#389600"><a href="#010054" label="[01:00:54]">&lt;stikonas&gt;</a></span><span class="message">yeah, I'm now looking where to use it...</span></div><div class="line" id="010116"><span class="nick" style="color:#389600"><a href="#010116" label="[01:01:16]">&lt;stikonas&gt;</a></span><span class="message">I guess before label</span></div><div class="line" id="010330"><span class="nick" style="color:#8dd3c7"><a href="#010330" label="[01:03:30]">&lt;oriansj&gt;</a></span><span class="message">or after strings</span></div><div class="line" id="011116"><span class="nick" style="color:#389600"><a href="#011116" label="[01:11:16]">&lt;stikonas&gt;</a></span><span class="message">hmm, just padding alone didn't help... I'll write .hex0 and then compare with hex2 output</span></div><div class="line" id="012145"><span class="nick" style="color:#8dd3c7"><a href="#012145" label="[01:21:45]">&lt;oriansj&gt;</a></span><span class="message">don't forget the single null at the end of the string</span></div><div class="line" id="012256"><span class="nick" style="color:#8dd3c7"><a href="#012256" label="[01:22:56]">&lt;oriansj&gt;</a></span><span class="message">(which M1 will do)</span></div><div class="line" id="013030"><span class="nick" style="color:#389600"><a href="#013030" label="[01:30:30]">&lt;stikonas&gt;</a></span><span class="message">yes, that was done...</span></div><div class="line" id="013633"><span class="nick" style="color:#389600"><a href="#013633" label="[01:36:33]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I think calculated addresses are way too high</span></div><div class="line" id="013643"><span class="nick" style="color:#389600"><a href="#013643" label="[01:36:43]">&lt;stikonas&gt;</a></span><span class="message">I'm looking at hexdump</span></div><div class="line" id="013704"><span class="nick" style="color:#389600"><a href="#013704" label="[01:37:04]">&lt;stikonas&gt;</a></span><span class="message">and first pointer is 2451 0001 0000 0000</span></div><div class="line" id="013743"><span class="nick" style="color:#389600"><a href="#013743" label="[01:37:43]">&lt;stikonas&gt;</a></span><span class="message">which should point to  line 0000110 6f6f 7374 7274 7061 732d 6565 7364 502f</span></div><div class="line" id="013823"><span class="nick" style="color:#389600"><a href="#013823" label="[01:38:23]">&lt;stikonas&gt;</a></span><span class="message">so I guess first pointer should be something like 010e 0001 0000 0000 or something similar</span></div><div class="line" id="013902"><span class="nick" style="color:#389600"><a href="#013902" label="[01:39:02]">&lt;stikonas&gt;</a></span><span class="message">oh, that's probably base poitner...</span></div><div class="line" id="021349"><span class="nick" style="color:#389600"><a href="#021349" label="[02:13:49]">&lt;stikonas&gt;</a></span><span class="message">oh, it was much more benign/silly issue</span></div><div class="line" id="021406"><span class="nick" style="color:#389600"><a href="#021406" label="[02:14:06]">&lt;stikonas&gt;</a></span><span class="message">copy pasted too much from kaem-minimal, so used the wrong register</span></div><div class="line" id="021417"><span class="nick" style="color:#389600"><a href="#021417" label="[02:14:17]">&lt;stikonas&gt;</a></span><span class="message">when doing gas-&gt;M1 conversion</span></div><div class="line" id="021426"><span class="nick" style="color:#389600"><a href="#021426" label="[02:14:26]">&lt;stikonas&gt;</a></span><span class="message">kaem-micro.hex2 works now</span></div><div class="line" id="021940"><span class="nick" style="color:#389600"><a href="#021940" label="[02:19:40]">&lt;stikonas&gt;</a></span><span class="message">so we'll have 485 byte hex0-seed and 361 byte kaem-optional-seed</span></div><div class="line" id="024549"><span class="nick" style="color:#8dd3c7"><a href="#024549" label="[02:45:49]">&lt;oriansj&gt;</a></span><span class="message">nice</span></div><div class="line" id="025221"><span class="nick" style="color:#6b8072"><a href="#025221" label="[02:52:21]">&lt;stikonas[m]&gt;</a></span><span class="message">It might be possible to cut some bytes from hex0-seed too</span></div><div class="line" id="025235"><span class="nick" style="color:#6b8072"><a href="#025235" label="[02:52:35]">&lt;stikonas[m]&gt;</a></span><span class="message">But probably not much</span></div><div class="line" id="025240"><span class="nick" style="color:#8dd3c7"><a href="#025240" label="[02:52:40]">&lt;oriansj&gt;</a></span><span class="message">and it appears my email has tempted yt. So perhaps a mescc-tools revolution?</span></div><div class="line" id="025734"><span class="nick" style="color:#6b8072"><a href="#025734" label="[02:57:34]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, somebody should first fix M1...</span></div><div class="line" id="025803"><span class="nick" style="color:#6b8072"><a href="#025803" label="[02:58:03]">&lt;stikonas[m]&gt;</a></span><span class="message">Or at least retest it</span></div><div class="line" id="025828"><span class="nick" style="color:#6b8072"><a href="#025828" label="[02:58:28]">&lt;stikonas[m]&gt;</a></span><span class="message">I think I has problems with immediates</span></div><div class="line" id="025836"><span class="nick" style="color:#6b8072"><a href="#025836" label="[02:58:36]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, I can try tomorrow</span></div><div class="line" id="061736"><span class="nick">***</span><span class="message notice">sm2n_ is now known as sm2n</span></div><div class="line" id="114856"><span class="nick">***</span><span class="message notice">dongcarl1 is now known as dongcarl</span></div><div class="line" id="120439"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o oriansj</span></div><div class="line" id="132941"><span class="nick" style="color:#389600"><a href="#132941" label="[13:29:41]">&lt;stikonas&gt;</a></span><span class="message">oriansj: kaem-micro is now ready <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/pull/32">https://github.com/oriansj/stage0-posix/pull/32</a> </span></div><div class="line" id="133026"><span class="nick" style="color:#389600"><a href="#133026" label="[13:30:26]">&lt;stikonas&gt;</a></span><span class="message">I moved that hardcoded string to the end of file, so that updating it is trivial even if it is hardcoded (since then it wouldn't affect anything else in the file)</span></div><div class="line" id="150922"><span class="nick" style="color:#8dd3c7"><a href="#150922" label="[15:09:22]">&lt;oriansj&gt;</a></span><span class="message">stikonas: merged</span></div><div class="line" id="150951"><span class="nick" style="color:#389600"><a href="#150951" label="[15:09:51]">&lt;stikonas&gt;</a></span><span class="message">thanks!</span></div><div class="line" id="151024"><span class="nick" style="color:#389600"><a href="#151024" label="[15:10:24]">&lt;stikonas&gt;</a></span><span class="message">and bootstrap-seeds?</span></div><div class="line" id="154658"><span class="nick" style="color:#8dd3c7"><a href="#154658" label="[15:46:58]">&lt;oriansj&gt;</a></span><span class="message">oh didn't know you made a pull request there too</span></div><div class="line" id="154849"><span class="nick" style="color:#8dd3c7"><a href="#154849" label="[15:48:49]">&lt;oriansj&gt;</a></span><span class="message">merged</span></div><div class="line" id="154923"><span class="nick" style="color:#389600"><a href="#154923" label="[15:49:23]">&lt;stikonas&gt;</a></span><span class="message">thanks!</span></div><div class="line" id="154938"><span class="nick" style="color:#389600"><a href="#154938" label="[15:49:38]">&lt;stikonas&gt;</a></span><span class="message">in principle it might be good idea to pull in newer bootstrap seeds into stage0-posix...</span></div><div class="line" id="155038"><span class="nick" style="color:#389600"><a href="#155038" label="[15:50:38]">&lt;stikonas&gt;</a></span><span class="message">I'll probably take a look at hex0 next, it might be possible to reduce it by a few bytes</span></div><div class="line" id="155039"><span class="nick" style="color:#8dd3c7"><a href="#155039" label="[15:50:39]">&lt;oriansj&gt;</a></span><span class="message">and probably update the mescc-tools to make sure I didn't break the build too hard as well</span></div><div class="line" id="155121"><span class="nick" style="color:#389600"><a href="#155121" label="[15:51:21]">&lt;stikonas&gt;</a></span><span class="message">also hex0 does not have .M1 and .hex2 prototypes... it might be a good idea to produce them...</span></div><div class="line" id="155158"><span class="nick" style="color:#389600"><a href="#155158" label="[15:51:58]">&lt;stikonas&gt;</a></span><span class="message">but we'll see, it's not critical...</span></div><div class="line" id="155430"><span class="nick" style="color:#8dd3c7"><a href="#155430" label="[15:54:30]">&lt;oriansj&gt;</a></span><span class="message">a hex2 prototype can always be skipped. M1 is more of a trivial audit</span></div><div class="line" id="161135"><span class="nick" style="color:#8dd3c7"><a href="#161135" label="[16:11:35]">&lt;oriansj&gt;</a></span><span class="message">as it should be 1:1 with the hex0 and one needs only check the defines and that it looks correct in terms of instruction flow.</span></div><div class="line" id="161416"><span class="nick" style="color:#389600"><a href="#161416" label="[16:14:16]">&lt;stikonas&gt;</a></span><span class="message">yeah, M1 is not much change from .S file</span></div><div class="line" id="161440"><span class="nick" style="color:#389600"><a href="#161440" label="[16:14:40]">&lt;stikonas&gt;</a></span><span class="message">but hex2 might be useful to check jumps, anyway, it's not a hard requirement to have them</span></div><div class="line" id="161719"><span class="nick" style="color:#8dd3c7"><a href="#161719" label="[16:17:19]">&lt;oriansj&gt;</a></span><span class="message">true but hex2 files are more work to make than M1 files. So I understand if someone doesn't want to deal with the extra work.</span></div><div class="line" id="161741"><span class="nick" style="color:#8dd3c7"><a href="#161741" label="[16:17:41]">&lt;oriansj&gt;</a></span><span class="message">(although it can be used to make hex0 in an incremental fashion.)</span></div><div class="line" id="161837"><span class="nick" style="color:#389600"><a href="#161837" label="[16:18:37]">&lt;stikonas&gt;</a></span><span class="message">yeah, I found M1-&gt; hex2 -&gt; hex0 to be somewhat simpler than .S -&gt; hex0</span></div><div class="line" id="161854"><span class="nick" style="color:#389600"><a href="#161854" label="[16:18:54]">&lt;stikonas&gt;</a></span><span class="message">not sure about total time, but more sytematic, less error prone</span></div><div class="line" id="161909"><span class="nick" style="color:#389600"><a href="#161909" label="[16:19:09]">&lt;stikonas&gt;</a></span><span class="message">and easier to edit</span></div><div class="line" id="162047"><span class="nick" style="color:#8dd3c7"><a href="#162047" label="[16:20:47]">&lt;oriansj&gt;</a></span><span class="message">indeed. hence hex2 tends to only exist for hex0, hex1 and hex2 source programs in stage0-posix</span></div><div class="line" id="162059"><span class="nick" style="color:#389600"><a href="#162059" label="[16:20:59]">&lt;stikonas&gt;</a></span><span class="message">well, yes, after that there is no need</span></div><div class="line" id="162116"><span class="nick" style="color:#389600"><a href="#162116" label="[16:21:16]">&lt;stikonas&gt;</a></span><span class="message">well, M1 is written in hex2 but that's in source, not prototypes</span></div><div class="line" id="182140"><span class="nick" style="color:#389600"><a href="#182140" label="[18:21:40]">&lt;stikonas&gt;</a></span><span class="message">oriansj:  can you merge <a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds/pull/5">https://github.com/oriansj/bootstrap-seeds/pull/5</a>  Then I'll update bootstrap seeds in stage0-posix...</span></div><div class="line" id="230557"><span class="nick" style="color:#8dd3c7"><a href="#230557" label="[23:05:57]">&lt;oriansj&gt;</a></span><span class="message">stikonas: merged.</span></div><div class="line" id="230639"><span class="nick" style="color:#6b8072"><a href="#230639" label="[23:06:39]">&lt;stikonas[m]&gt;</a></span><span class="message">OK, I'll prepare then or for s0-posix</span></div><div class="line" id="230643"><span class="nick" style="color:#8dd3c7"><a href="#230643" label="[23:06:43]">&lt;oriansj&gt;</a></span><span class="message">and I'm finishing the required testing for the bootstrap-seeds update in stage0-posix</span></div><div class="line" id="230700"><span class="nick" style="color:#6b8072"><a href="#230700" label="[23:07:00]">&lt;stikonas[m]&gt;</a></span><span class="message">Oh, OK, you can do update then...</span></div><div class="line" id="230754"><span class="nick" style="color:#6b8072"><a href="#230754" label="[23:07:54]">&lt;stikonas[m]&gt;</a></span><span class="message">I'll do some smaller pr then (update hex0 sources in posix0 to match bootstrap-seeds)</span></div><div class="line" id="231432"><span class="nick" style="color:#8dd3c7"><a href="#231432" label="[23:14:32]">&lt;oriansj&gt;</a></span><span class="message">stikonas: RISC-V is your baby, I trust your judgement and decisions in regards to it.</span></div><div class="line" id="231502"><span class="nick" style="color:#389600"><a href="#231502" label="[23:15:02]">&lt;stikonas&gt;</a></span><span class="message">well, it's not really mine, more like collaboration</span></div><div class="line" id="231516"><span class="nick" style="color:#389600"><a href="#231516" label="[23:15:16]">&lt;stikonas&gt;</a></span><span class="message">e.g. ekaitz: did hex0, you did C bits</span></div><div class="line" id="231912"><span class="nick" style="color:#8dd3c7"><a href="#231912" label="[23:19:12]">&lt;oriansj&gt;</a></span><span class="message">stikonas: everything here is a collaboration to a degree quite rare in the world of FLOSS. but you certainly are solving a great many of the hard problems while I deal with the easy things on the sides. ^_^</span></div><div class="line" id="231919"><span class="nick" style="color:#389600"><a href="#231919" label="[23:19:19]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/pull/33">https://github.com/oriansj/stage0-posix/pull/33</a> </span></div><div class="line" id="231924"><span class="nick" style="color:#389600"><a href="#231924" label="[23:19:24]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/M2libc/pulls">https://github.com/oriansj/M2libc/pulls</a> </span></div><div class="line" id="231944"><span class="nick" style="color:#389600"><a href="#231944" label="[23:19:44]">&lt;stikonas&gt;</a></span><span class="message">somehow we have 2 copies of M1 defs in two different repos...</span></div><div class="line" id="232116"><span class="nick" style="color:#8dd3c7"><a href="#232116" label="[23:21:16]">&lt;oriansj&gt;</a></span><span class="message">well the stage0-posix defs tend to be the minimal sets needed to get to cc_*</span></div><div class="line" id="232121"><span class="nick" style="color:#389600"><a href="#232121" label="[23:21:21]">&lt;stikonas&gt;</a></span><span class="message">oh I see...</span></div><div class="line" id="232125"><span class="nick" style="color:#8dd3c7"><a href="#232125" label="[23:21:25]">&lt;oriansj&gt;</a></span><span class="message">after that everything just uses M2libc</span></div><div class="line" id="232127"><span class="nick" style="color:#389600"><a href="#232127" label="[23:21:27]">&lt;stikonas&gt;</a></span><span class="message">hmm, I didn't minimize them...</span></div><div class="line" id="232152"><span class="nick" style="color:#8dd3c7"><a href="#232152" label="[23:21:52]">&lt;oriansj&gt;</a></span><span class="message">it'll be fine</span></div><div class="line" id="232152"><span class="nick" style="color:#389600"><a href="#232152" label="[23:21:52]">&lt;stikonas&gt;</a></span><span class="message">those are full sets that should be sufficient for everything</span></div><div class="line" id="232257"><span class="nick" style="color:#389600"><a href="#232257" label="[23:22:57]">&lt;stikonas&gt;</a></span><span class="message">at least just one more program left to write in .hex0 dialect</span></div><div class="line" id="232309"><span class="nick" style="color:#8dd3c7"><a href="#232309" label="[23:23:09]">&lt;oriansj&gt;</a></span><span class="message">both merged</span></div><div class="line" id="232511"><span class="nick" style="color:#8dd3c7"><a href="#232511" label="[23:25:11]">&lt;oriansj&gt;</a></span><span class="message">yep hex1 (or hex2 depending on how much work word support is in RISC-V)</span></div><div class="line" id="232611"><span class="nick" style="color:#8dd3c7"><a href="#232611" label="[23:26:11]">&lt;oriansj&gt;</a></span><span class="message">I probably should extract and make a single file hex2_word.c for High Level Prototypes so that you have a template to compare against</span></div><div class="line" id="232714"><span class="nick" style="color:#389600"><a href="#232714" label="[23:27:14]">&lt;stikonas&gt;</a></span><span class="message">well, you can do that, although, I'll be able to extract needed bits from hex2_word.c anyway</span></div><div class="line" id="232719"><span class="nick" style="color:#389600"><a href="#232719" label="[23:27:19]">&lt;stikonas&gt;</a></span><span class="message">but it might be good to have it as documentation</span></div><div class="line" id="232749"><span class="nick" style="color:#389600"><a href="#232749" label="[23:27:49]">&lt;stikonas&gt;</a></span><span class="message">I guess first thing is I need to word processing, so loop of 4 bytes...</span></div><div class="line" id="232826"><span class="nick" style="color:#389600"><a href="#232826" label="[23:28:26]">&lt;stikonas&gt;</a></span><span class="message">and then various address calculations</span></div><div class="line" id="232838"><span class="nick" style="color:#389600"><a href="#232838" label="[23:28:38]">&lt;stikonas&gt;</a></span><span class="message">so shouldn't be too hard to write .S prototype</span></div><div class="line" id="233103"><span class="nick" style="color:#8dd3c7"><a href="#233103" label="[23:31:03]">&lt;oriansj&gt;</a></span><span class="message">there are two calling conventions of which I suggest you follow the second. 1) caller saves registers before call and restores after call 2) callee saves registers on entry and restores before return.</span></div><div class="line" id="233206"><span class="nick" style="color:#8dd3c7"><a href="#233206" label="[23:32:06]">&lt;oriansj&gt;</a></span><span class="message">you don't need to save registers that you intend to return values in.</span></div><div class="line" id="233237"><span class="nick" style="color:#389600"><a href="#233237" label="[23:32:37]">&lt;stikonas&gt;</a></span><span class="message">well, yes, I already modified hex1 code that I had before to save return addresses on the stack</span></div><div class="line" id="233240"><span class="nick" style="color:#8dd3c7"><a href="#233240" label="[23:32:40]">&lt;oriansj&gt;</a></span><span class="message">and it makes the code easier to follow and you less likely to step on a variable you'll need.</span></div><div class="line" id="233314"><span class="nick" style="color:#389600"><a href="#233314" label="[23:33:14]">&lt;stikonas&gt;</a></span><span class="message">well, at least those a* registers are supposed to be saved by callee...</span></div><div class="line" id="233414"><span class="nick" style="color:#8dd3c7"><a href="#233414" label="[23:34:14]">&lt;oriansj&gt;</a></span><span class="message">stikonas: the hardware isn't going to save the registers, you need to explicitly push them onto the stack</span></div><div class="line" id="233434"><span class="nick" style="color:#389600"><a href="#233434" label="[23:34:34]">&lt;stikonas&gt;</a></span><span class="message">oriansj: yes, I understand, that's what I did in kaem</span></div><div class="line" id="233438"><span class="nick" style="color:#8dd3c7"><a href="#233438" label="[23:34:38]">&lt;oriansj&gt;</a></span><span class="message">like you will see heavily in: <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/blob/master/x86/cc_x86.M1#L541">https://github.com/oriansj/stage0-posix/blob/master/x86/cc_x86.M1#L541</a> </span></div><div class="line" id="233513"><span class="nick" style="color:#389600"><a href="#233513" label="[23:35:13]">&lt;stikonas&gt;</a></span><span class="message">I used it a lot in kaem too <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/blob/master/riscv64/GAS/kaem-minimal.S#L239">https://github.com/oriansj/stage0-posix/blob/master/riscv64/GAS/kaem-minimal.S#L239</a> </span></div><div class="line" id="233622"><span class="nick" style="color:#8dd3c7"><a href="#233622" label="[23:36:22]">&lt;oriansj&gt;</a></span><span class="message">good. It is one of the most important lesson in writing big assembly programs.</span></div><div class="line" id="233808"><span class="nick" style="color:#389600"><a href="#233808" label="[23:38:08]">&lt;stikonas&gt;</a></span><span class="message">I think I mostly try to use those temporaries t* as variables that are used within the next line or two and before jumps, so don't need to save those</span></div><div class="line" id="233938"><span class="nick" style="color:#8dd3c7"><a href="#233938" label="[23:39:38]">&lt;oriansj&gt;</a></span><span class="message">stikonas: I know it is very tempting to think just follow convention but it can catch you with a very hard to trace bug.</span></div><div class="line" id="234032"><span class="nick" style="color:#389600"><a href="#234032" label="[23:40:32]">&lt;stikonas&gt;</a></span><span class="message">that's true... And assembly programs are not that easy to debug</span></div><div class="line" id="234043"><span class="nick" style="color:#389600"><a href="#234043" label="[23:40:43]">&lt;stikonas&gt;</a></span><span class="message">especially when architecture is non-native</span></div><div class="line" id="234130"><span class="nick" style="color:#8dd3c7"><a href="#234130" label="[23:41:30]">&lt;oriansj&gt;</a></span><span class="message">standardize on 1-2 registers for returns and make sure all other registers are in the state they were when the function was called before you do the return.</span></div><div class="line" id="234244"><span class="nick" style="color:#8dd3c7"><a href="#234244" label="[23:42:44]">&lt;oriansj&gt;</a></span><span class="message">and there are times you'll see such clever tricks violating that rule but trust me in that you'll thank yourself later for avoiding them.</span></div><div class="line" id="235721"><span class="nick" style="color:#8dd3c7"><a href="#235721" label="[23:57:21]">&lt;oriansj&gt;</a></span><span class="message">simple and reliable beats small and clever in bootstrapping 99/100 times</span></div><br /></div></body></html>