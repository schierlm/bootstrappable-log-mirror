<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-09-27.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="024447"><span class="nick" style="color:#8dd3c7"><a href="#024447" label="[02:44:47]">&lt;oriansj&gt;</a></span><span class="message">stikonas: merged</span></div><div class="line" id="024543"><span class="nick" style="color:#2e2a4a"><a href="#024543" label="[02:45:43]">&lt;stikonas[m]&gt;</a></span><span class="message">Thanks</span></div><div class="line" id="074603"><span class="nick" style="color:#6b8072"><a href="#074603" label="[07:46:03]">&lt;janneke&gt;</a></span><span class="message">NieDzejkob: if the commit message does not live up to the standard, the review failed or was absent.  writing good commit messages is not something most people learn in school and are of little use for the author.</span></div><div class="line" id="074704"><span class="nick" style="color:#6b8072"><a href="#074704" label="[07:47:04]">&lt;janneke&gt;</a></span><span class="message">it often helps if you have to explain your commit that you realise some thngs can be done better, but the main advantage of a good commit message is to the reader/reviewer</span></div><div class="line" id="074859"><span class="nick" style="color:#80b1d3"><a href="#074859" label="[07:48:59]">*</a></span><span class="message">janneke remembers the cvs-&gt;(arch/darcs/xxx)-&gt;git transfer all too well, and is interested to see what useful information will remain from changelog-free projects after the next vcs transition</span></div><div class="line" id="132315"><span class="nick" style="color:#2e2a4a"><a href="#132315" label="[13:23:15]">&lt;stikonas[m]&gt;</a></span><span class="message">I suspect that when next VCS transition happens, new VCS tools will keep equivalent of git log --stat and similar commands.</span></div><div class="line" id="144321"><span class="nick" style="color:#6d2462"><a href="#144321" label="[14:43:21]">&lt;fossy&gt;</a></span><span class="message">apart from not seeing git going away any time soon, i think any to be replacement will have some kind of migration from git, probably retaining close to all history</span></div><div class="line" id="155401"><span class="nick" style="color:#234e69"><a href="#155401" label="[15:54:01]">&lt;stikonas&gt;</a></span><span class="message">yeah, I wouldn't be surprised if after 20 years everybody is still using git</span></div><div class="line" id="162933"><span class="nick" style="color:#6c3d55"><a href="#162933" label="[16:29:33]">&lt;Irvise&gt;</a></span><span class="message">IMO, fossil is better for projects that need more control and an all-in-one solution.</span></div><div class="line" id="163044"><span class="nick" style="color:#6c3d55"><a href="#163044" label="[16:30:44]">&lt;Irvise&gt;</a></span><span class="message">Also hello! I came here reommended by theruran. I am toying with the idea of an Ada compiler in Scheme. Ada, sadly, has no bootstrapping path :)</span></div><div class="line" id="163632"><span class="nick" style="color:#234e69"><a href="#163632" label="[16:36:32]">&lt;stikonas&gt;</a></span><span class="message">I wonder how complicated initial Ada compiler has to be to bootstrap proper Ada compiler</span></div><div class="line" id="163934"><span class="nick" style="color:#d9d9d9"><a href="#163934" label="[16:39:34]">&lt;Hagfish&gt;</a></span><span class="message">that's one of the great unsolved mysteries of software engineering which this project will celebrate the answer to, if someone finds it :)</span></div><div class="line" id="164149"><span class="nick" style="color:#6c3d55"><a href="#164149" label="[16:41:49]">&lt;Irvise&gt;</a></span><span class="message">Well... I suppose it will depend on what GNAT (gcc-ada) compiler version we target... It is not using very new constructs, but Ada 1983 was already massive for its time (hence why it really never took off).</span></div><div class="line" id="164328"><span class="nick" style="color:#6c3d55"><a href="#164328" label="[16:43:28]">&lt;Irvise&gt;</a></span><span class="message">There is also HAC, an Ada compiler written in Ada. But its goal is to be smaller and simpler, with the aim of being used for scripts. See: <a rel="nofollow" href="https://github.com/zertovitch/hac">https://github.com/zertovitch/hac</a> </span></div><div class="line" id="164354"><span class="nick" style="color:#234e69"><a href="#164354" label="[16:43:54]">&lt;stikonas&gt;</a></span><span class="message">yeah, if HAC can't build GNAT, then it's not too useful</span></div><div class="line" id="164400"><span class="nick" style="color:#6c3d55"><a href="#164400" label="[16:44:00]">&lt;Irvise&gt;</a></span><span class="message">I thought of maybe creating a small initial compiler that can compile HAC and then use it to jump into GNAT... we will see.</span></div><div class="line" id="164413"><span class="nick" style="color:#234e69"><a href="#164413" label="[16:44:13]">&lt;stikonas&gt;</a></span><span class="message">well, that's basically how C is bootstrapped here</span></div><div class="line" id="164417"><span class="nick" style="color:#6c3d55"><a href="#164417" label="[16:44:17]">&lt;Irvise&gt;</a></span><span class="message">It is still growing, we will see where it gets.</span></div><div class="line" id="164430"><span class="nick" style="color:#6c3d55"><a href="#164430" label="[16:44:30]">&lt;Irvise&gt;</a></span><span class="message">Yup.</span></div><div class="line" id="164458"><span class="nick" style="color:#234e69"><a href="#164458" label="[16:44:58]">&lt;stikonas&gt;</a></span><span class="message">simple C compiler is surprisingly small (about 5000 lines of assembly code)</span></div><div class="line" id="164556"><span class="nick" style="color:#234e69"><a href="#164556" label="[16:45:56]">&lt;stikonas&gt;</a></span><span class="message">and then we had to use a few more intermediate compilers to reach GCC</span></div><div class="line" id="164624"><span class="nick" style="color:#6c3d55"><a href="#164624" label="[16:46:24]">&lt;Irvise&gt;</a></span><span class="message">Btw, one question. I know that Guile was being used as the initial seed for the Guix/GNU project. However, I know that smaller seeds are being developed, and that TCC will be used as the &quot;first big&quot; compiler that is built from source.</span></div><div class="line" id="164703"><span class="nick" style="color:#6c3d55"><a href="#164703" label="[16:47:03]">&lt;Irvise&gt;</a></span><span class="message">So, my question is: what Scheme implementation would you recommend us to use? I thought about Chicken Scheme since it can be built with TCC.</span></div><div class="line" id="165000"><span class="nick" style="color:#6c3d55"><a href="#165000" label="[16:50:00]">&lt;Irvise&gt;</a></span><span class="message">stikonas: small C compiler == <a rel="nofollow" href="https://github.com/rui314/chibicc?">https://github.com/rui314/chibicc?</a> </span></div><div class="line" id="165201"><span class="nick" style="color:#234e69"><a href="#165201" label="[16:52:01]">&lt;stikonas&gt;</a></span><span class="message">probably doesn't matter which want you want to use. Guile is bootsrapped, so whether you use guile or something simpler, it doesn't matter for bootsrappability</span></div><div class="line" id="165212"><span class="nick" style="color:#234e69"><a href="#165212" label="[16:52:12]">&lt;stikonas&gt;</a></span><span class="message">we don't need ADA for anything critical</span></div><div class="line" id="165230"><span class="nick" style="color:#234e69"><a href="#165230" label="[16:52:30]">&lt;stikonas&gt;</a></span><span class="message">so targeting tcc does not gain you much</span></div><div class="line" id="165258"><span class="nick" style="color:#234e69"><a href="#165258" label="[16:52:58]">&lt;stikonas&gt;</a></span><span class="message">Irvise: well, this one is not multiplatform</span></div><div class="line" id="165310"><span class="nick" style="color:#234e69"><a href="#165310" label="[16:53:10]">&lt;stikonas&gt;</a></span><span class="message">M2-Planet is full cross-platform compiler</span></div><div class="line" id="165406"><span class="nick" style="color:#234e69"><a href="#165406" label="[16:54:06]">&lt;stikonas&gt;</a></span><span class="message">and bootstrappable from hex</span></div><div class="line" id="165419"><span class="nick" style="color:#234e69"><a href="#165419" label="[16:54:19]">&lt;stikonas&gt;</a></span><span class="message">Irvise: <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/">https://github.com/oriansj/M2-Planet/</a> </span></div><div class="line" id="165505"><span class="nick" style="color:#234e69"><a href="#165505" label="[16:55:05]">&lt;stikonas&gt;</a></span><span class="message">M2-planet actually supports fewer features than that chibicc</span></div><div class="line" id="165619"><span class="nick" style="color:#234e69"><a href="#165619" label="[16:56:19]">&lt;stikonas&gt;</a></span><span class="message">but enough to build quite a bit of software: basic system tools (cp, chmod, etc), untar, ungz and mes scheme interpreter</span></div><div class="line" id="165648"><span class="nick" style="color:#234e69"><a href="#165648" label="[16:56:48]">&lt;stikonas&gt;</a></span><span class="message">Irvise: oh and most importantly, M2-Planet supports inline assembly</span></div><div class="line" id="165653"><span class="nick" style="color:#234e69"><a href="#165653" label="[16:56:53]">&lt;stikonas&gt;</a></span><span class="message">you can't do much without inline assembly</span></div><div class="line" id="165658"><span class="nick" style="color:#6c3d55"><a href="#165658" label="[16:56:58]">&lt;Irvise&gt;</a></span><span class="message">I could try to see if it can compile Chicken 5 (probably not, since that is not a simple piece of software).</span></div><div class="line" id="165724"><span class="nick" style="color:#234e69"><a href="#165724" label="[16:57:24]">&lt;stikonas&gt;</a></span><span class="message">I would just say pick a language that's more comfortable to yo</span></div><div class="line" id="165726"><span class="nick" style="color:#234e69"><a href="#165726" label="[16:57:26]">&lt;stikonas&gt;</a></span><span class="message">to you</span></div><div class="line" id="165812"><span class="nick" style="color:#6c3d55"><a href="#165812" label="[16:58:12]">&lt;Irvise&gt;</a></span><span class="message">I would like to use the most capable Scheme that is closer to the root/seed. And one that has a linking exception similar to GCC's (I think libguile is LGPL...).</span></div><div class="line" id="165834"><span class="nick" style="color:#234e69"><a href="#165834" label="[16:58:34]">&lt;stikonas&gt;</a></span><span class="message">I wonder why chibicc does not support inline assembly. It's literally the easiest C feature to implement. You just print the same thing you read</span></div><div class="line" id="165916"><span class="nick" style="color:#6c3d55"><a href="#165916" label="[16:59:16]">&lt;Irvise&gt;</a></span><span class="message">Issue with Ada is that it is part of GCC, it is a language that is used in safety critical systems (and a bootstrapping compiler would be nice to have for reproducibility reasons) and the only open VHDL compiler, GHDL, is written in Ada...</span></div><div class="line" id="165934"><span class="nick" style="color:#234e69"><a href="#165934" label="[16:59:34]">&lt;stikonas&gt;</a></span><span class="message">actually, not the whole GCC bootstrap path is rediscributable. Some binaries have conflicting licenses</span></div><div class="line" id="170029"><span class="nick" style="color:#234e69"><a href="#170029" label="[17:00:29]">&lt;stikonas&gt;</a></span><span class="message">Irvise: well, Guile can be bootstrapped from seed in maybe 2h from hex0...</span></div><div class="line" id="170048"><span class="nick" style="color:#234e69"><a href="#170048" label="[17:00:48]">&lt;stikonas&gt;</a></span><span class="message">tcc is probably 15 minutes</span></div><div class="line" id="170103"><span class="nick" style="color:#234e69"><a href="#170103" label="[17:01:03]">&lt;stikonas&gt;</a></span><span class="message">(most of the time is spend in mes scheme interpreter)</span></div><div class="line" id="170117"><span class="nick" style="color:#234e69"><a href="#170117" label="[17:01:17]">&lt;stikonas&gt;</a></span><span class="message">scheme is slow...</span></div><div class="line" id="170138"><span class="nick" style="color:#6c3d55"><a href="#170138" label="[17:01:38]">&lt;Irvise&gt;</a></span><span class="message">I am proposing the usage of Scheme since I have heard that is one of the most competent language for compiler creation and that it is being used in the bootstrapping project. AFAIK, you only use assembly, C and Scheme.</span></div><div class="line" id="170220"><span class="nick" style="color:#6c3d55"><a href="#170220" label="[17:02:20]">&lt;Irvise&gt;</a></span><span class="message">Yes... The Scheme interpreter is either simple or fast, not both...</span></div><div class="line" id="170410"><span class="nick" style="color:#234e69"><a href="#170410" label="[17:04:10]">&lt;stikonas&gt;</a></span><span class="message">yes, I don't know that much scheme but yes, it's mostly assembly C and scheme...</span></div><div class="line" id="170448"><span class="nick" style="color:#234e69"><a href="#170448" label="[17:04:48]">&lt;stikonas&gt;</a></span><span class="message">although, scheme in live-bootstrap is only used to build 1 single binary (tcc), so I guess mostly C</span></div><div class="line" id="170605"><span class="nick" style="color:#234e69"><a href="#170605" label="[17:06:05]">&lt;stikonas&gt;</a></span><span class="message">although, if gash is eventually usable with gnu mes, that would help with making whole bootstrap output redistributable</span></div><div class="line" id="170628"><span class="nick" style="color:#6c3d55"><a href="#170628" label="[17:06:28]">&lt;Irvise&gt;</a></span><span class="message">Okay, thank you for the explanation :)</span></div><div class="line" id="170636"><span class="nick" style="color:#234e69"><a href="#170636" label="[17:06:36]">&lt;stikonas&gt;</a></span><span class="message">because now live-bootstrap combines GPL and CDDL software</span></div><div class="line" id="170641"><span class="nick" style="color:#6c3d55"><a href="#170641" label="[17:06:41]">&lt;Irvise&gt;</a></span><span class="message">Redistributable because of the license? Binary output?</span></div><div class="line" id="170649"><span class="nick" style="color:#234e69"><a href="#170649" label="[17:06:49]">&lt;stikonas&gt;</a></span><span class="message">binary output</span></div><div class="line" id="170732"><span class="nick" style="color:#234e69"><a href="#170732" label="[17:07:32]">&lt;stikonas&gt;</a></span><span class="message">in order to build bash, we had to build some simple parser generator (before bison is bootstrapped), so we had to use heirloom yacc (which is CDDL)</span></div><div class="line" id="170749"><span class="nick" style="color:#6c3d55"><a href="#170749" label="[17:07:49]">&lt;Irvise&gt;</a></span><span class="message">That is also one of my fears. I am not against GPL, but I would like to create a compiler that is not copy-left licensed.</span></div><div class="line" id="170759"><span class="nick" style="color:#bc80bd"><a href="#170759" label="[17:07:59]">&lt;civodul&gt;</a></span><span class="message">Irvise: janneke started work on GNU Mes specifically for bootstrapping purposes: to have a small Scheme</span></div><div class="line" id="170804"><span class="nick" style="color:#234e69"><a href="#170804" label="[17:08:04]">&lt;stikonas&gt;</a></span><span class="message">and CDDL is incompatible with mes libc license (GPL)</span></div><div class="line" id="170804"><span class="nick" style="color:#bc80bd"><a href="#170804" label="[17:08:04]">&lt;civodul&gt;</a></span><span class="message">that's what Guix uses</span></div><div class="line" id="170843"><span class="nick" style="color:#234e69"><a href="#170843" label="[17:08:43]">&lt;stikonas&gt;</a></span><span class="message">but once gash runs on mes, that should help us to avoid linking mes libc and yacc...</span></div><div class="line" id="170855"><span class="nick" style="color:#234e69"><a href="#170855" label="[17:08:55]">&lt;stikonas&gt;</a></span><span class="message">well, Guilx uses Guile...</span></div><div class="line" id="170909"><span class="nick" style="color:#234e69"><a href="#170909" label="[17:09:09]">&lt;stikonas&gt;</a></span><span class="message">I don't think it can run on mes yet</span></div><div class="line" id="170922"><span class="nick" style="color:#234e69"><a href="#170922" label="[17:09:22]">&lt;stikonas&gt;</a></span><span class="message">maybe in the future...</span></div><div class="line" id="170928"><span class="nick" style="color:#6c3d55"><a href="#170928" label="[17:09:28]">&lt;Irvise&gt;</a></span><span class="message">But doen't gash run on Guile? So the path would be ... -&gt; Guile -&gt; Gash -&gt; world?</span></div><div class="line" id="170955"><span class="nick" style="color:#234e69"><a href="#170955" label="[17:09:55]">&lt;stikonas&gt;</a></span><span class="message">Irvise: gash runs on guile but not on Mes</span></div><div class="line" id="171013"><span class="nick" style="color:#234e69"><a href="#171013" label="[17:10:13]">&lt;stikonas&gt;</a></span><span class="message">guile is build much much later</span></div><div class="line" id="171023"><span class="nick" style="color:#6c3d55"><a href="#171023" label="[17:10:23]">&lt;Irvise&gt;</a></span><span class="message">civodul: I thought that GNU Mes' goal was to be a simple C &lt;-&gt; Scheme compiler. That is all good, but maybe a bit too little for an Ada compiler?</span></div><div class="line" id="171053"><span class="nick" style="color:#234e69"><a href="#171053" label="[17:10:53]">&lt;stikonas&gt;</a></span><span class="message">that's why I said use what is more convenient for you</span></div><div class="line" id="171057"><span class="nick" style="color:#234e69"><a href="#171057" label="[17:10:57]">&lt;stikonas&gt;</a></span><span class="message">Guile might be better</span></div><div class="line" id="171102"><span class="nick" style="color:#234e69"><a href="#171102" label="[17:11:02]">&lt;stikonas&gt;</a></span><span class="message">you'll have more features</span></div><div class="line" id="171356"><span class="nick" style="color:#6c3d55"><a href="#171356" label="[17:13:56]">&lt;Irvise&gt;</a></span><span class="message">That is the proposal of theruran :) I thought about Chicken since it is also very capable, can be compiled with TCC and is BSD licensed :)</span></div><div class="line" id="171454"><span class="nick" style="color:#6c3d55"><a href="#171454" label="[17:14:54]">&lt;Irvise&gt;</a></span><span class="message">But then again... Chicken needs GNUMake, so we are back at square one...</span></div><div class="line" id="171601"><span class="nick" style="color:#234e69"><a href="#171601" label="[17:16:01]">&lt;stikonas&gt;</a></span><span class="message">Irvise: GNU make is easy to build</span></div><div class="line" id="171604"><span class="nick" style="color:#234e69"><a href="#171604" label="[17:16:04]">&lt;stikonas&gt;</a></span><span class="message">at least old make</span></div><div class="line" id="171616"><span class="nick" style="color:#234e69"><a href="#171616" label="[17:16:16]">&lt;stikonas&gt;</a></span><span class="message">here <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst">https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst</a>  make is step number 10</span></div><div class="line" id="171625"><span class="nick" style="color:#bc80bd"><a href="#171625" label="[17:16:25]">&lt;civodul&gt;</a></span><span class="message">Irvise: Mes includes MesCC, a simple C compiler written in Scheme</span></div><div class="line" id="171635"><span class="nick" style="color:#6c3d55"><a href="#171635" label="[17:16:35]">&lt;Irvise&gt;</a></span><span class="message">Old make? BSDMake?</span></div><div class="line" id="171650"><span class="nick" style="color:#234e69"><a href="#171650" label="[17:16:50]">&lt;stikonas&gt;</a></span><span class="message">Irvise: GNU make</span></div><div class="line" id="171658"><span class="nick" style="color:#234e69"><a href="#171658" label="[17:16:58]">&lt;stikonas&gt;</a></span><span class="message">3.80</span></div><div class="line" id="171716"><span class="nick" style="color:#234e69"><a href="#171716" label="[17:17:16]">&lt;stikonas&gt;</a></span><span class="message">that's from 2002</span></div><div class="line" id="171717"><span class="nick" style="color:#6c3d55"><a href="#171717" label="[17:17:17]">&lt;Irvise&gt;</a></span><span class="message">Thank you for that link, it lays down pretty much what I want to know :)</span></div><div class="line" id="171729"><span class="nick" style="color:#234e69"><a href="#171729" label="[17:17:29]">&lt;stikonas&gt;</a></span><span class="message">(this is full-no pregen files bootstrap)</span></div><div class="line" id="171743"><span class="nick" style="color:#234e69"><a href="#171743" label="[17:17:43]">&lt;stikonas&gt;</a></span><span class="message">there is a simpler one if you look at Guix graph which uses some pregen files</span></div><div class="line" id="171745"><span class="nick" style="color:#6c3d55"><a href="#171745" label="[17:17:45]">&lt;Irvise&gt;</a></span><span class="message">Mmmm... I could try building Chicken with GNU Make 3.80 and TCC... (or Mes).</span></div><div class="line" id="171856"><span class="nick" style="color:#234e69"><a href="#171856" label="[17:18:56]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://guix.gnu.org/en/blog/2020/guix-further-reduces-bootstrap-seed-to-25/">https://guix.gnu.org/en/blog/2020/guix-further-reduces-bootstrap-seed-to-25/</a> </span></div><div class="line" id="171918"><span class="nick" style="color:#6c3d55"><a href="#171918" label="[17:19:18]">&lt;Irvise&gt;</a></span><span class="message">stikonas: the bootstrap path I was aware was the Guix one. That is why I thought that Guile was being used as a binary seed. I could not patch together the differences between M2, Mess and the Guix path... So you are both doing the same way, but Guix jumps ahead with a binary seed?</span></div><div class="line" id="171945"><span class="nick" style="color:#234e69"><a href="#171945" label="[17:19:45]">&lt;stikonas&gt;</a></span><span class="message">yes</span></div><div class="line" id="172015"><span class="nick" style="color:#234e69"><a href="#172015" label="[17:20:15]">&lt;stikonas&gt;</a></span><span class="message">live-bootstrap starts from hex0 and uses kaem-optional-seed (while thing is about 1 KB) to script to bootstrap</span></div><div class="line" id="172127"><span class="nick" style="color:#234e69"><a href="#172127" label="[17:21:27]">&lt;stikonas&gt;</a></span><span class="message">Guile master starts with GNU mes as compiler seed and uses Guile to drive the whole process (also uses Guile for some stuff as gash before bash is available)</span></div><div class="line" id="172133"><span class="nick" style="color:#6c3d55"><a href="#172133" label="[17:21:33]">&lt;Irvise&gt;</a></span><span class="message">Okay, I have it a bit more clear. I need to become more familiar with the live-bootstrap documentation.</span></div><div class="line" id="172150"><span class="nick" style="color:#234e69"><a href="#172150" label="[17:21:50]">&lt;stikonas&gt;</a></span><span class="message">there is Guix branch that starts with hex0 but of course still uses Guile to drive the whole process</span></div><div class="line" id="172205"><span class="nick" style="color:#234e69"><a href="#172205" label="[17:22:05]">&lt;stikonas&gt;</a></span><span class="message">Irvise: that parts.rst file describes most of the things</span></div><div class="line" id="172341"><span class="nick" style="color:#6c3d55"><a href="#172341" label="[17:23:41]">&lt;Irvise&gt;</a></span><span class="message">Thank you for all the explanation stikonas and civodul I will keep on reading :)</span></div><div class="line" id="172611"><span class="nick" style="color:#bc80bd"><a href="#172611" label="[17:26:11]">&lt;civodul&gt;</a></span><span class="message">yw :-)</span></div><div class="line" id="190532"><span class="nick" style="color:#234e69"><a href="#190532" label="[19:05:32]">&lt;stikonas&gt;</a></span><span class="message">oriansj: so I've just started debugging M0</span></div><div class="line" id="190542"><span class="nick" style="color:#234e69"><a href="#190542" label="[19:05:42]">&lt;stikonas&gt;</a></span><span class="message">and it happens when brk syscall does not allocate anything</span></div><div class="line" id="190546"><span class="nick" style="color:#234e69"><a href="#190546" label="[19:05:46]">&lt;stikonas&gt;</a></span><span class="message">I don't know why that happens...</span></div><div class="line" id="190627"><span class="nick" style="color:#234e69"><a href="#190627" label="[19:06:27]">&lt;stikonas&gt;</a></span><span class="message">but I can see (in gdb) brk (new_value) returning old_value</span></div><div class="line" id="190705"><span class="nick" style="color:#234e69"><a href="#190705" label="[19:07:05]">&lt;stikonas&gt;</a></span><span class="message">and then list becomes messed up (NEXT points to brk boundary and hence is illegal read)</span></div><div class="line" id="190929"><span class="nick" style="color:#234e69"><a href="#190929" label="[19:09:29]">&lt;stikonas&gt;</a></span><span class="message">it might be qemu bug</span></div><div class="line" id="191126"><span class="nick" style="color:#234e69"><a href="#191126" label="[19:11:26]">&lt;stikonas&gt;</a></span><span class="message">or rather qemu-riscv bug</span></div><div class="line" id="191557"><span class="nick" style="color:#234e69"><a href="#191557" label="[19:15:57]">&lt;stikonas&gt;</a></span><span class="message">so qemu translates brk calls to mmap</span></div><div class="line" id="191650"><span class="nick" style="color:#234e69"><a href="#191650" label="[19:16:50]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1213454/">https://paste.debian.net/1213454/</a> </span></div><div class="line" id="191914"><span class="nick" style="color:#234e69"><a href="#191914" label="[19:19:14]">&lt;stikonas&gt;</a></span><span class="message">so I guess if qemu can't allocate memory in the desired place it just tells brk that failed go get memory...</span></div><div class="line" id="191915"><span class="nick" style="color:#234e69"><a href="#191915" label="[19:19:15]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="192842"><span class="nick" style="color:#234e69"><a href="#192842" label="[19:28:42]">&lt;stikonas&gt;</a></span><span class="message">maybe this is triggered on riscv64 because binaries are quite a bit bigger</span></div><div class="line" id="192847"><span class="nick" style="color:#234e69"><a href="#192847" label="[19:28:47]">&lt;stikonas&gt;</a></span><span class="message">so hitting 2 MB page limit</span></div><div class="line" id="200047"><span class="nick" style="color:#234e69"><a href="#200047" label="[20:00:47]">&lt;stikonas&gt;</a></span><span class="message">ok, it's not 2 MB page limit but qemu limitation</span></div><div class="line" id="200056"><span class="nick" style="color:#234e69"><a href="#200056" label="[20:00:56]">&lt;stikonas&gt;</a></span><span class="message">I've talked to qemu folks</span></div><div class="line" id="200132"><span class="nick" style="color:#234e69"><a href="#200132" label="[20:01:32]">&lt;stikonas&gt;</a></span><span class="message">they only guarantee 16 MB of memory for brk arena in qemu and expect a &quot;real&quot; malloc to use mmap</span></div><div class="line" id="200419"><span class="nick" style="color:#234e69"><a href="#200419" label="[20:04:19]">&lt;stikonas&gt;</a></span><span class="message">so wouldn't crash on real HW...</span></div><div class="line" id="200450"><span class="nick" style="color:#234e69"><a href="#200450" label="[20:04:50]">&lt;stikonas&gt;</a></span><span class="message">but for development purposes it's a bit annoying</span></div><div class="line" id="200539"><span class="nick" style="color:#234e69"><a href="#200539" label="[20:05:39]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://gitlab.com/qemu-project/qemu/-/blob/master/linux-user/elfload.c#L2314">https://gitlab.com/qemu-project/qemu/-/blob/master/linux-user/elfload.c#L2314</a> </span></div><div class="line" id="201315"><span class="nick" style="color:#d9d9d9"><a href="#201315" label="[20:13:15]">&lt;Hagfish&gt;</a></span><span class="message">wow, that's so good to get it confirmed by the qemu devs themselves (and somewhat reassuring that real HW would be fine)</span></div><div class="line" id="201437"><span class="nick" style="color:#d9d9d9"><a href="#201437" label="[20:14:37]">&lt;Hagfish&gt;</a></span><span class="message">the idea comes to mind that the simplest solution would be to use a custom version of qemu, but i don't know whether that is a good idea or not</span></div><div class="line" id="203909"><span class="nick" style="color:#234e69"><a href="#203909" label="[20:39:09]">&lt;stikonas&gt;</a></span><span class="message">well, it's my guess that real HW would be fine</span></div><div class="line" id="203949"><span class="nick" style="color:#234e69"><a href="#203949" label="[20:39:49]">&lt;stikonas&gt;</a></span><span class="message">well, I can test it by using qemu-system rather than qemu-user...</span></div><div class="line" id="203957"><span class="nick" style="color:#234e69"><a href="#203957" label="[20:39:57]">&lt;stikonas&gt;</a></span><span class="message">(i.e. run full distro inside qemu)</span></div><div class="line" id="204101"><span class="nick" style="color:#234e69"><a href="#204101" label="[20:41:01]">&lt;stikonas&gt;</a></span><span class="message">it might be possible to split M1 files into smaller units...</span></div><div class="line" id="204708"><span class="nick" style="color:#234e69"><a href="#204708" label="[20:47:08]">&lt;stikonas&gt;</a></span><span class="message">hmm, that is also somewhat tricky because cc_riscv64 does not always put the whole instructions into a single line</span></div><div class="line" id="211811"><span class="nick" style="color:#6c3d55"><a href="#211811" label="[21:18:11]">&lt;Irvise&gt;</a></span><span class="message">I have read the parts.rst document. Holly molly.</span></div><div class="line" id="211930"><span class="nick" style="color:#d9d9d9"><a href="#211930" label="[21:19:30]">&lt;Hagfish&gt;</a></span><span class="message">Irvise: it's a masterpiece, isn't it?</span></div><div class="line" id="212034"><span class="nick" style="color:#6c3d55"><a href="#212034" label="[21:20:34]">&lt;Irvise&gt;</a></span><span class="message">I am very impressed.</span></div><div class="line" id="212113"><span class="nick" style="color:#6c3d55"><a href="#212113" label="[21:21:13]">&lt;Irvise&gt;</a></span><span class="message">Very much indeed. I can just imagine the testing, trial and error, reproducibility nightmares...</span></div><div class="line" id="212115"><span class="nick" style="color:#d9d9d9"><a href="#212115" label="[21:21:15]">&lt;Hagfish&gt;</a></span><span class="message">obviously it's the result of a lot of great work, and probably lots of experimentation that isn't recorded there</span></div><div class="line" id="212119"><span class="nick" style="color:#d9d9d9"><a href="#212119" label="[21:21:19]">&lt;Hagfish&gt;</a></span><span class="message">exactly</span></div><div class="line" id="212216"><span class="nick" style="color:#6c3d55"><a href="#212216" label="[21:22:16]">&lt;Irvise&gt;</a></span><span class="message">Though I am very much intreaged whether Chicken scheme could be built after step 10, 12, or 13... Maybe 22...</span></div><div class="line" id="212217"><span class="nick" style="color:#d9d9d9"><a href="#212217" label="[21:22:17]">&lt;Hagfish&gt;</a></span><span class="message">it's like the first time someone created a map of the world.  it gives a whole new way to see and thinking about the software ecosystem</span></div><div class="line" id="212337"><span class="nick" style="color:#6c3d55"><a href="#212337" label="[21:23:37]">&lt;Irvise&gt;</a></span><span class="message">Is there a way in which I can run the script up to step 13 and try to build a program?</span></div><div class="line" id="212419"><span class="nick" style="color:#d9d9d9"><a href="#212419" label="[21:24:19]">&lt;Hagfish&gt;</a></span><span class="message">huh, i don't know, but that sounds like a reasonable feature</span></div><div class="line" id="212426"><span class="nick" style="color:#d9d9d9"><a href="#212426" label="[21:24:26]">&lt;Hagfish&gt;</a></span><span class="message">i mean, you could just hack the script, right?</span></div><div class="line" id="212503"><span class="nick" style="color:#6c3d55"><a href="#212503" label="[21:25:03]">&lt;Irvise&gt;</a></span><span class="message">Hagfish: I am taking a look into sysa/run.sh... It seems pretty clean... I could hack it..</span></div><div class="line" id="212650"><span class="nick" style="color:#6c3d55"><a href="#212650" label="[21:26:50]">&lt;Irvise&gt;</a></span><span class="message">I suppose that <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/7b8219214c65a60e55acab1b8ea53f7ab5170be9/sysa/run.sh#L59">https://github.com/fosslinux/live-bootstrap/blob/7b8219214c65a60e55acab1b8ea53f7ab5170be9/sysa/run.sh#L59</a>  is step 22. So adding my own stuff just right after may work.</span></div><div class="line" id="212729"><span class="nick" style="color:#3c5b35"><a href="#212729" label="[21:27:29]">&lt;xentrac&gt;</a></span><span class="message">Chicken is somewhat demanding of the C runtime; you need a working longjmp</span></div><div class="line" id="212803"><span class="nick" style="color:#3c5b35"><a href="#212803" label="[21:28:03]">&lt;xentrac&gt;</a></span><span class="message">otherwise, though, it's a much more portable way to write a fastish Scheme than the alternatives</span></div><div class="line" id="212906"><span class="nick" style="color:#3c5b35"><a href="#212906" label="[21:29:06]">&lt;xentrac&gt;</a></span><span class="message">however, I suspect Chicken's macro system is not compiled from source</span></div><div class="line" id="213103"><span class="nick" style="color:#3c5b35"><a href="#213103" label="[21:31:03]">&lt;xentrac&gt;</a></span><span class="message">getting Guile to bootstrap was a real bear</span></div><div class="line" id="213139"><span class="nick" style="color:#3c5b35"><a href="#213139" label="[21:31:39]">&lt;xentrac&gt;</a></span><span class="message">ugh, I didn't realize heirloom-yacc was CDDL. thanks for mentioning that, stikonas</span></div><div class="line" id="213213"><span class="nick" style="color:#234e69"><a href="#213213" label="[21:32:13]">&lt;stikonas&gt;</a></span><span class="message">well, if we can somehow run bash scripts before (e.g. gash) that wouldn't be the problem at all</span></div><div class="line" id="213223"><span class="nick" style="color:#3c5b35"><a href="#213223" label="[21:32:23]">&lt;xentrac&gt;</a></span><span class="message">yeah</span></div><div class="line" id="213242"><span class="nick" style="color:#234e69"><a href="#213242" label="[21:32:42]">&lt;stikonas&gt;</a></span><span class="message">i.e. then build gash-&gt;musl-&gt;yacc-&gt;bash rather than yacc-&gt;bash-&gt;musl</span></div><div class="line" id="213332"><span class="nick" style="color:#234e69"><a href="#213332" label="[21:33:32]">&lt;stikonas&gt;</a></span><span class="message">Irvise: you can edit kaem script files to interupt the build</span></div><div class="line" id="213449"><span class="nick" style="color:#6c3d55"><a href="#213449" label="[21:34:49]">&lt;Irvise&gt;</a></span><span class="message">xentrac: you are correct. Chicken, as it ships from the tarballs comes with some pregenerated code. If you clone from git, it is required that you already have chicken installed to generate the files...</span></div><div class="line" id="213506"><span class="nick" style="color:#3c5b35"><a href="#213506" label="[21:35:06]">&lt;xentrac&gt;</a></span><span class="message">right, Guile has a similar cycle</span></div><div class="line" id="213511"><span class="nick" style="color:#3c5b35"><a href="#213511" label="[21:35:11]">&lt;xentrac&gt;</a></span><span class="message">which took a lot of work to break</span></div><div class="line" id="213540"><span class="nick" style="color:#6c3d55"><a href="#213540" label="[21:35:40]">&lt;Irvise&gt;</a></span><span class="message">stikonas: I am taking a look into it right now :) I think I have found steps 11, 12...</span></div><div class="line" id="213558"><span class="nick" style="color:#234e69"><a href="#213558" label="[21:35:58]">&lt;stikonas&gt;</a></span><span class="message">oh, if chicken ships with pregenerated files</span></div><div class="line" id="213605"><span class="nick" style="color:#234e69"><a href="#213605" label="[21:36:05]">&lt;stikonas&gt;</a></span><span class="message">then you don't get much advantage over guile</span></div><div class="line" id="213610"><span class="nick" style="color:#6c3d55"><a href="#213610" label="[21:36:10]">&lt;Irvise&gt;</a></span><span class="message">xentrac: thanks for mentioning that dependency... I now realise that is will not be as easy peasy as I thought...</span></div><div class="line" id="213613"><span class="nick" style="color:#234e69"><a href="#213613" label="[21:36:13]">&lt;stikonas&gt;</a></span><span class="message">well, guile also ships with pregen files</span></div><div class="line" id="213617"><span class="nick" style="color:#234e69"><a href="#213617" label="[21:36:17]">&lt;stikonas&gt;</a></span><span class="message">hence we build it quite late</span></div><div class="line" id="213635"><span class="nick" style="color:#234e69"><a href="#213635" label="[21:36:35]">&lt;stikonas&gt;</a></span><span class="message">oh yes, guile xentrac just mentioned it</span></div><div class="line" id="213701"><span class="nick" style="color:#234e69"><a href="#213701" label="[21:37:01]">&lt;stikonas&gt;</a></span><span class="message">Irvise: and we couldn't even do everything</span></div><div class="line" id="213711"><span class="nick" style="color:#234e69"><a href="#213711" label="[21:37:11]">&lt;stikonas&gt;</a></span><span class="message">gcc ships with autogen pregenerated files</span></div><div class="line" id="213714"><span class="nick" style="color:#6c3d55"><a href="#213714" label="[21:37:14]">&lt;Irvise&gt;</a></span><span class="message">Aw... If Chicken could bootstrap that soon, it would be really cool.</span></div><div class="line" id="213716"><span class="nick" style="color:#3c5b35"><a href="#213716" label="[21:37:16]">&lt;xentrac&gt;</a></span><span class="message">heavy reliance on macros is kind of a disadvantage of Scheme</span></div><div class="line" id="213717"><span class="nick" style="color:#234e69"><a href="#213717" label="[21:37:17]">&lt;stikonas&gt;</a></span><span class="message">we didn't manage to solve that yet</span></div><div class="line" id="213735"><span class="nick" style="color:#234e69"><a href="#213735" label="[21:37:35]">&lt;stikonas&gt;</a></span><span class="message">but kinf of workaround it</span></div><div class="line" id="213754"><span class="nick" style="color:#3c5b35"><a href="#213754" label="[21:37:54]">&lt;xentrac&gt;</a></span><span class="message">there are some other disadvantages for compilers: no pattern-matching and no static type checking</span></div><div class="line" id="213822"><span class="nick" style="color:#3c5b35"><a href="#213822" label="[21:38:22]">&lt;xentrac&gt;</a></span><span class="message">(of Scheme)</span></div><div class="line" id="213839"><span class="nick" style="color:#234e69"><a href="#213839" label="[21:38:39]">&lt;stikonas&gt;</a></span><span class="message">for gcc and binutils we had to avoid using top-level configure/Makefile.in file because of that autogen dependency and manually ran many configure scripts in subdirectories</span></div><div class="line" id="213850"><span class="nick" style="color:#6c3d55"><a href="#213850" label="[21:38:50]">&lt;Irvise&gt;</a></span><span class="message">Yup. A bit of research is going on right now on typed scheme...</span></div><div class="line" id="213905"><span class="nick" style="color:#6c3d55"><a href="#213905" label="[21:39:05]">&lt;Irvise&gt;</a></span><span class="message">I have read those adventures...</span></div><div class="line" id="213925"><span class="nick" style="color:#6c3d55"><a href="#213925" label="[21:39:25]">&lt;Irvise&gt;</a></span><span class="message">I will ask #chicken about their pregenerated files... Lets see what they are exactly.</span></div><div class="line" id="213955"><span class="nick" style="color:#3c5b35"><a href="#213955" label="[21:39:55]">&lt;xentrac&gt;</a></span><span class="message">I actually kind of prefer OCaml over Scheme for writing interpretery things</span></div><div class="line" id="214012"><span class="nick" style="color:#3c5b35"><a href="#214012" label="[21:40:12]">&lt;xentrac&gt;</a></span><span class="message">but of course it also lacks a bootstrapping path</span></div><div class="line" id="214020"><span class="nick" style="color:#234e69"><a href="#214020" label="[21:40:20]">&lt;stikonas&gt;</a></span><span class="message">maybe chicken scheme can be bootstrapped with guile...</span></div><div class="line" id="214707"><span class="nick" style="color:#6c3d55"><a href="#214707" label="[21:47:07]">&lt;Irvise&gt;</a></span><span class="message">stikonas: most likely it can. I am asking #chicken to see how are those pregenerated files generated and if there is an alternative path.</span></div><div class="line" id="215443"><span class="nick" style="color:#3c5b35"><a href="#215443" label="[21:54:43]">&lt;xentrac&gt;</a></span><span class="message">yes, almost surely</span></div><div class="line" id="215544"><span class="nick" style="color:#3c5b35"><a href="#215544" label="[21:55:44]">&lt;xentrac&gt;</a></span><span class="message">a language like Smalltalk which did its conditionals and looping constructs with lightweight lambda syntax instead of Scheme's macro approach would be more amenable to bootstrapping</span></div><div class="line" id="215729"><span class="nick" style="color:#3c5b35"><a href="#215729" label="[21:57:29]">&lt;xentrac&gt;</a></span><span class="message">I mean the Scheme standard doesn't *require* you to implement loops, conditionals, and even sequencing in terms of macros.  it just carefully lays out the considerations you would need to take into account in order to do so and provides macro implementations of those constructs in case you want to use tem</span></div><div class="line" id="215734"><span class="nick" style="color:#3c5b35"><a href="#215734" label="[21:57:34]">&lt;xentrac&gt;</a></span><span class="message">*them</span></div><div class="line" id="215821"><span class="nick" style="color:#3c5b35"><a href="#215821" label="[21:58:21]">&lt;xentrac&gt;</a></span><span class="message">it's sort of unfortunate that we've chosen the term &quot;bootstrapping&quot; for what is conventionally called &quot;not bootstrapping&quot;</span></div><div class="line" id="220137"><span class="nick" style="color:#af8d2f"><a href="#220137" label="[22:01:37]">&lt;qyliss&gt;</a></span><span class="message">xentrac: I don't know anything about OCaml, but I recently saw a PR claiming to bootstrap it in Nixpkgs from <a rel="nofollow" href="https://github.com/Ekdohibs/camlboot">https://github.com/Ekdohibs/camlboot</a> </span></div><div class="line" id="220155"><span class="nick" style="color:#3c5b35"><a href="#220155" label="[22:01:55]">&lt;xentrac&gt;</a></span><span class="message">oh, that's wonderful!</span></div><div class="line" id="220252"><span class="nick" style="color:#3c5b35"><a href="#220252" label="[22:02:52]">&lt;xentrac&gt;</a></span><span class="message">MIT license</span></div><div class="line" id="220311"><span class="nick" style="color:#af8d2f"><a href="#220311" label="[22:03:11]">&lt;qyliss&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/NixOS/nixpkgs/pull/138519">https://github.com/NixOS/nixpkgs/pull/138519</a> </span></div><div class="line" id="230258"><span class="nick" style="color:#6c3d55"><a href="#230258" label="[23:02:58]">&lt;Irvise&gt;</a></span><span class="message">I am going to sleep now. I spoke with the Chicken people. The generated files are anything but trivial, they would have to be autogenerated in one way or another...</span></div><div class="line" id="233852"><span class="nick" style="color:#8dd3c7"><a href="#233852" label="[23:38:52]">&lt;oriansj&gt;</a></span><span class="message">Irvise: I remember previously discussing Ada being bootstrappable and we do have notes on it in our wiki: <a rel="nofollow" href="https://bootstrapping.miraheze.org/wiki/Boostrapping_Specific_Languages#Ada_and_SPARK">https://bootstrapping.miraheze.org/wiki/Boostrapping_Specific_Languages#Ada_and_SPARK</a> </span></div><div class="line" id="234236"><span class="nick" style="color:#6d2462"><a href="#234236" label="[23:42:36]">&lt;fossy&gt;</a></span><span class="message">Irvise: if you want to build chicken scheme as early as possible, it is just a matter of writing a kaem or bash script and inserting it into the middle of the appropriate live-bootstrap script (if you wish to use live-bootstrap)</span></div><div class="line" id="234242"><span class="nick" style="color:#8dd3c7"><a href="#234242" label="[23:42:42]">&lt;oriansj&gt;</a></span><span class="message">So there is likely already a path without having to program in anything other than guix scripts</span></div><div class="line" id="234255"><span class="nick" style="color:#6d2462"><a href="#234255" label="[23:42:55]">&lt;fossy&gt;</a></span><span class="message">i'm a little confused, though, why are you wanting chicken scheme?</span></div><div class="line" id="234426"><span class="nick" style="color:#234e69"><a href="#234426" label="[23:44:26]">&lt;stikonas&gt;</a></span><span class="message">fossy: was just looking at parts.rst, there is a reference error</span></div><div class="line" id="234437"><span class="nick" style="color:#6d2462"><a href="#234437" label="[23:44:37]">&lt;fossy&gt;</a></span><span class="message">oh, where</span></div><div class="line" id="234443"><span class="nick" style="color:#234e69"><a href="#234443" label="[23:44:43]">&lt;stikonas&gt;</a></span><span class="message">see part 21</span></div><div class="line" id="234501"><span class="nick" style="color:#6d2462"><a href="#234501" label="[23:45:01]">&lt;fossy&gt;</a></span><span class="message">oh yes</span></div><div class="line" id="234521"><span class="nick" style="color:#234e69"><a href="#234521" label="[23:45:21]">&lt;stikonas&gt;</a></span><span class="message">I guess just reword</span></div><div class="line" id="234539"><span class="nick" style="color:#234e69"><a href="#234539" label="[23:45:39]">&lt;stikonas&gt;</a></span><span class="message">with tcc-musl from the previous step</span></div><div class="line" id="234541"><span class="nick" style="color:#234e69"><a href="#234541" label="[23:45:41]">&lt;stikonas&gt;</a></span><span class="message">or something like that</span></div><div class="line" id="234551"><span class="nick" style="color:#6d2462"><a href="#234551" label="[23:45:51]">&lt;fossy&gt;</a></span><span class="message">yeps</span></div><div class="line" id="234603"><span class="nick" style="color:#234e69"><a href="#234603" label="[23:46:03]">&lt;stikonas&gt;</a></span><span class="message">oriansj: any thoughts on what to do with M0 issue?</span></div><div class="line" id="234610"><span class="nick" style="color:#234e69"><a href="#234610" label="[23:46:10]">&lt;stikonas&gt;</a></span><span class="message">I think we understand the crash much better now</span></div><div class="line" id="234611"><span class="nick" style="color:#6d2462"><a href="#234611" label="[23:46:11]">&lt;fossy&gt;</a></span><span class="message">also, it appears guile is not fully reproducible, one in about 5-6 times i get a different result, so i am investigating that now</span></div><div class="line" id="234619"><span class="nick" style="color:#234e69"><a href="#234619" label="[23:46:19]">&lt;stikonas&gt;</a></span><span class="message">oh, I see</span></div><div class="line" id="234625"><span class="nick" style="color:#234e69"><a href="#234625" label="[23:46:25]">&lt;stikonas&gt;</a></span><span class="message">I did build it a few times</span></div><div class="line" id="234634"><span class="nick" style="color:#234e69"><a href="#234634" label="[23:46:34]">&lt;stikonas&gt;</a></span><span class="message">but maybe not enough to observe this</span></div><div class="line" id="234653"><span class="nick" style="color:#234e69"><a href="#234653" label="[23:46:53]">&lt;stikonas&gt;</a></span><span class="message">or maybe my environment is less prone to that issue</span></div><div class="line" id="234730"><span class="nick" style="color:#3c5b35"><a href="#234730" label="[23:47:30]">&lt;xentrac&gt;</a></span><span class="message">fossy: Chicken is a lot more efficient than Guile and has an easier time calling C extensions</span></div><div class="line" id="234810"><span class="nick" style="color:#234e69"><a href="#234810" label="[23:48:10]">&lt;stikonas&gt;</a></span><span class="message">well, for now live-bootstrap has built guile for guix purposes</span></div><div class="line" id="234817"><span class="nick" style="color:#3c5b35"><a href="#234817" label="[23:48:17]">&lt;xentrac&gt;</a></span><span class="message">I don't think it has anything in the language semantics that makes it a better fit for writing compilers, which is what Irvise wants to do</span></div><div class="line" id="234822"><span class="nick" style="color:#234e69"><a href="#234822" label="[23:48:22]">&lt;stikonas&gt;</a></span><span class="message">live-bootstrap itself doesn't use guile at all</span></div><div class="line" id="234842"><span class="nick" style="color:#8dd3c7"><a href="#234842" label="[23:48:42]">&lt;oriansj&gt;</a></span><span class="message">but guix does</span></div><div class="line" id="234915"><span class="nick" style="color:#3c5b35"><a href="#234915" label="[23:49:15]">&lt;xentrac&gt;</a></span><span class="message">I think Scheme is a better language than C or probably Python for writing compilers in, but not as good as, in one direction, JS, and in another direction, anything in the ML family</span></div><div class="line" id="235009"><span class="nick" style="color:#3c5b35"><a href="#235009" label="[23:50:09]">&lt;xentrac&gt;</a></span><span class="message">but it might be mostly a matter of taste.  the other day I went back and looked at some things I'd written earlier to rebut &quot;No Silver Bullet&quot;</span></div><div class="line" id="235042"><span class="nick" style="color:#3c5b35"><a href="#235042" label="[23:50:42]">&lt;xentrac&gt;</a></span><span class="message">because I was sure that Python was an improvement of more than an order of magnitude over that fusty old Ada that Brooks was touting in 01987</span></div><div class="line" id="235133"><span class="nick" style="color:#234e69"><a href="#235133" label="[23:51:33]">&lt;stikonas&gt;</a></span><span class="message">and probably experience using some language means more than advantage gained by certain constructs of the language</span></div><div class="line" id="235136"><span class="nick" style="color:#3c5b35"><a href="#235136" label="[23:51:36]">&lt;xentrac&gt;</a></span><span class="message">but when I looked at how long it actually took me to write some things in Python, I realized that it wouldn't have taken me an order of magnitude longer to write them even in C, and I'd expect Ada to be a little better than C (if I knew Ada well)</span></div><div class="line" id="235237"><span class="nick" style="color:#3c5b35"><a href="#235237" label="[23:52:37]">&lt;xentrac&gt;</a></span><span class="message"> <a rel="nofollow" href="https://news.ycombinator.com/item?id=28660097">https://news.ycombinator.com/item?id=28660097</a>  was my account</span></div><div class="line" id="235333"><span class="nick" style="color:#3c5b35"><a href="#235333" label="[23:53:33]">&lt;xentrac&gt;</a></span><span class="message">so writing things in Python might be 2 or 5 times faster than writing them in C but not 10 times faster</span></div><div class="line" id="235357"><span class="nick" style="color:#3c5b35"><a href="#235357" label="[23:53:57]">&lt;xentrac&gt;</a></span><span class="message">I do think writing things in C is about 10 times faster than writing them in assembly</span></div><br /></div></body></html>