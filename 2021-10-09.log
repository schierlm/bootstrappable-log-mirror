<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-10-09.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="020830"><span class="nick" style="color:#8dd3c7"><a href="#020830" label="[02:08:30]">&lt;fossy&gt;</a></span><span class="message">janneke: does mes + tinycc work on amd64? i recall a while ago a couple of problems with it but i'm not sure what the current state is</span></div><div class="line" id="021405"><span class="nick" style="color:#2e2a4a"><a href="#021405" label="[02:14:05]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/136">https://github.com/fosslinux/live-bootstrap/pull/136</a> </span></div><div class="line" id="021408"><span class="nick" style="color:#2e2a4a"><a href="#021408" label="[02:14:08]">&lt;stikonas&gt;</a></span><span class="message">fossy: ^^</span></div><div class="line" id="021530"><span class="nick" style="color:#2e2a4a"><a href="#021530" label="[02:15:30]">&lt;stikonas&gt;</a></span><span class="message">(--disable-java is probably not required but it's clearer and harmless)</span></div><div class="line" id="022539"><span class="nick" style="color:#8dd3c7"><a href="#022539" label="[02:25:39]">&lt;fossy&gt;</a></span><span class="message">yeah</span></div><div class="line" id="060759"><span class="nick" style="color:#6b8072"><a href="#060759" label="[06:07:59]">&lt;oriansj&gt;</a></span><span class="message">well getting hex2 for AArch to use the stack for output was easy but Read_char breaks fast</span></div><div class="line" id="060945"><span class="nick" style="color:#6b8072"><a href="#060945" label="[06:09:45]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1214824/">https://paste.debian.net/1214824/</a> </span></div><div class="line" id="061052"><span class="nick" style="color:#6b8072"><a href="#061052" label="[06:10:52]">&lt;oriansj&gt;</a></span><span class="message">yet actually pushing onto the stack: <a rel="nofollow" href="https://paste.debian.net/1214825/">https://paste.debian.net/1214825/</a>  seems to produce a fast segfault</span></div><div class="line" id="061303"><span class="nick" style="color:#6b8072"><a href="#061303" label="[06:13:03]">&lt;oriansj&gt;</a></span><span class="message">the ! means to actually increment or decrement the register in question</span></div><div class="line" id="061332"><span class="nick" style="color:#6b8072"><a href="#061332" label="[06:13:32]">&lt;oriansj&gt;</a></span><span class="message">So I'm missing something and need to figure it out</span></div><div class="line" id="074315"><span class="nick" style="color:#8dd3c7"><a href="#074315" label="[07:43:15]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: i can repro your space error, i've made a small adjustment that might help, i will report back soon</span></div><div class="line" id="083458"><span class="nick" style="color:#80b1d3"><a href="#083458" label="[08:34:58]">&lt;janneke&gt;</a></span><span class="message">fossy: no, only x86 works atm</span></div><div class="line" id="083834"><span class="nick" style="color:#8dd3c7"><a href="#083834" label="[08:38:34]">&lt;fossy&gt;</a></span><span class="message">janneke: ok, thanks</span></div><div class="line" id="085656"><span class="nick" style="color:#8dd3c7"><a href="#085656" label="[08:56:56]">&lt;fossy&gt;</a></span><span class="message">stikonas[m], the fix gives enough space</span></div><div class="line" id="085704"><span class="nick" style="color:#8dd3c7"><a href="#085704" label="[08:57:04]">&lt;fossy&gt;</a></span><span class="message">i'll push it to a PR with a few other changes in a moment</span></div><div class="line" id="130515"><span class="nick" style="color:#2e2a4a"><a href="#130515" label="[13:05:15]">&lt;stikonas&gt;</a></span><span class="message">fossy: I've also noticed that in chroot mode umounting .../sysc/tmp often fails</span></div><div class="line" id="130531"><span class="nick" style="color:#2e2a4a"><a href="#130531" label="[13:05:31]">&lt;stikonas&gt;</a></span><span class="message">that's seems to be because of mount points inside sysc</span></div><div class="line" id="130540"><span class="nick" style="color:#2e2a4a"><a href="#130540" label="[13:05:40]">&lt;stikonas&gt;</a></span><span class="message">e.g. sysc/tmp/sys and others</span></div><div class="line" id="130625"><span class="nick" style="color:#2e2a4a"><a href="#130625" label="[13:06:25]">&lt;stikonas&gt;</a></span><span class="message">oriansj: maybe you should send <a rel="nofollow" href="https://github.com/oriansj/mes-m2/commit/7fa2f99bf9bba2d79bd9d15c579be8905520d960">https://github.com/oriansj/mes-m2/commit/7fa2f99bf9bba2d79bd9d15c579be8905520d960</a>  to upstream mes?</span></div><div class="line" id="130646"><span class="nick" style="color:#2e2a4a"><a href="#130646" label="[13:06:46]">&lt;stikonas&gt;</a></span><span class="message">and we also need similar commits for hex2 and I guess M1</span></div><div class="line" id="130659"><span class="nick" style="color:#2e2a4a"><a href="#130659" label="[13:06:59]">&lt;stikonas&gt;</a></span><span class="message">(those are less critical as it is just a warning for now)</span></div><div class="line" id="130737"><span class="nick" style="color:#2e2a4a"><a href="#130737" label="[13:07:37]">&lt;stikonas&gt;</a></span><span class="message">I've also spoke to laanwj and updated him on risc-v support in mescc-tools, hopefully he now would be able to make progress on porting mes to risc-v</span></div><div class="line" id="131712"><span class="nick" style="color:#8dd3c7"><a href="#131712" label="[13:17:12]">&lt;fossy&gt;</a></span><span class="message">yeah i have noticed that too, stikonas</span></div><div class="line" id="131722"><span class="nick" style="color:#8dd3c7"><a href="#131722" label="[13:17:22]">&lt;fossy&gt;</a></span><span class="message">I think we just need to unmount all those</span></div><div class="line" id="134353"><span class="nick" style="color:#6d2462"><a href="#134353" label="[13:43:53]">&lt;Hagfish&gt;</a></span><span class="message">i wonder if anyone has tried cross-compiling from risc-v to x86</span></div><div class="line" id="134452"><span class="nick" style="color:#6d2462"><a href="#134452" label="[13:44:52]">&lt;Hagfish&gt;</a></span><span class="message">if you could build gcc that way, and it matched the hash of gcc compiled on x86, then that would raise the complexity of a trusting trust attack</span></div><div class="line" id="134956"><span class="nick" style="color:#2e2a4a"><a href="#134956" label="[13:49:56]">&lt;stikonas&gt;</a></span><span class="message">Hagfish: yes,  cross-compiling works</span></div><div class="line" id="135001"><span class="nick" style="color:#2e2a4a"><a href="#135001" label="[13:50:01]">&lt;stikonas&gt;</a></span><span class="message">M2-Planet is cross-compiler</span></div><div class="line" id="135114"><span class="nick" style="color:#2e2a4a"><a href="#135114" label="[13:51:14]">&lt;stikonas&gt;</a></span><span class="message">but it would still be nice to have full risc-v bootstrap</span></div><div class="line" id="135121"><span class="nick" style="color:#2e2a4a"><a href="#135121" label="[13:51:21]">&lt;stikonas&gt;</a></span><span class="message">especially since it's an open ISA</span></div><div class="line" id="135810"><span class="nick" style="color:#6d2462"><a href="#135810" label="[13:58:10]">&lt;Hagfish&gt;</a></span><span class="message">right</span></div><div class="line" id="135856"><span class="nick" style="color:#6d2462"><a href="#135856" label="[13:58:56]">&lt;Hagfish&gt;</a></span><span class="message">building up from mes to a cross-compiling gcc environment will be a nice achievement</span></div><div class="line" id="140007"><span class="nick" style="color:#2e2a4a"><a href="#140007" label="[14:00:07]">&lt;stikonas&gt;</a></span><span class="message">well, but for now everything after mes has to run on x86</span></div><div class="line" id="140016"><span class="nick" style="color:#2e2a4a"><a href="#140016" label="[14:00:16]">&lt;stikonas&gt;</a></span><span class="message">that's basically live-bootstrap</span></div><div class="line" id="140025"><span class="nick" style="color:#2e2a4a"><a href="#140025" label="[14:00:25]">&lt;stikonas&gt;</a></span><span class="message">after that you can just ask gcc to compile for anything</span></div><div class="line" id="155527"><span class="nick" style="color:#6b8072"><a href="#155527" label="[15:55:27]">&lt;oriansj&gt;</a></span><span class="message">stikonas: while that might enable upstream to be built with the new mescc-tools, there are a couple lines of change needed in MesCC proper to exec blood-elf, M1 and hex2. specifically this patch: <a rel="nofollow" href="https://paste.debian.net/1214862/">https://paste.debian.net/1214862/</a> </span></div><div class="line" id="155627"><span class="nick" style="color:#2e2a4a"><a href="#155627" label="[15:56:27]">&lt;stikonas&gt;</a></span><span class="message">yes, I think it's actually these warnings that I was getting</span></div><div class="line" id="155630"><span class="nick" style="color:#2e2a4a"><a href="#155630" label="[15:56:30]">&lt;stikonas&gt;</a></span><span class="message">in live-bootstrap now</span></div><div class="line" id="155637"><span class="nick" style="color:#6b8072"><a href="#155637" label="[15:56:37]">&lt;oriansj&gt;</a></span><span class="message">which janneke should merge</span></div><div class="line" id="155655"><span class="nick" style="color:#2e2a4a"><a href="#155655" label="[15:56:55]">&lt;stikonas&gt;</a></span><span class="message"> +&gt; /usr/bin/mes-m2 --no-auto-compile -e main /usr/bin/mescc.scm -- -c -D HAVE_CONFIG_H=1 -I include -I include/linux/x86 lib/mes/eputc.c</span></div><div class="line" id="155657"><span class="nick" style="color:#2e2a4a"><a href="#155657" label="[15:56:57]">&lt;stikonas&gt;</a></span><span class="message">--LittleEndian is now depreciated and replaced by --little-endian</span></div><div class="line" id="155658"><span class="nick" style="color:#2e2a4a"><a href="#155658" label="[15:56:58]">&lt;stikonas&gt;</a></span><span class="message">And will stop working in a future releas</span></div><div class="line" id="155742"><span class="nick" style="color:#6b8072"><a href="#155742" label="[15:57:42]">&lt;oriansj&gt;</a></span><span class="message">yep, so that I can clean out the REALLY old flags.</span></div><div class="line" id="160654"><span class="nick" style="color:#6b8072"><a href="#160654" label="[16:06:54]">&lt;oriansj&gt;</a></span><span class="message">yeah it was the 0.6 release on 2019-04-14 when the new convention for flag names was official. So 2 years to fix (before seeing warnings) and another 6months before we pull out the flags entirely</span></div><div class="line" id="160726"><span class="nick" style="color:#6b8072"><a href="#160726" label="[16:07:26]">&lt;oriansj&gt;</a></span><span class="message">as a 2.5year warning should be sufficient for a 9 line delta</span></div><div class="line" id="162832"><span class="nick" style="color:#6b8072"><a href="#162832" label="[16:28:32]">&lt;oriansj&gt;</a></span><span class="message">well figured out what I was doing wrong with AArch64's hex2</span></div><div class="line" id="162934"><span class="nick" style="color:#6b8072"><a href="#162934" label="[16:29:34]">&lt;oriansj&gt;</a></span><span class="message">it needs to be: str x1, [sp, #-16]!  ldr x1, [sp], #16 to push x1 onto the stack and pop x1 off the stack</span></div><div class="line" id="163018"><span class="nick" style="color:#6b8072"><a href="#163018" label="[16:30:18]">&lt;oriansj&gt;</a></span><span class="message">but I guess it is what I get for rushing</span></div><div class="line" id="163608"><span class="nick" style="color:#6b8072"><a href="#163608" label="[16:36:08]">&lt;oriansj&gt;</a></span><span class="message">I kept trying to do str x1, [sp] #-16 to match ldr x1, [sp], #16 and ldr x1, [sp, #16]! to match str x1, [sp, #-16]!</span></div><div class="line" id="165912"><span class="nick" style="color:#2e2a4a"><a href="#165912" label="[16:59:12]">&lt;stikonas&gt;</a></span><span class="message">well, it's nice to eventually figure out the problem</span></div><div class="line" id="165917"><span class="nick" style="color:#2e2a4a"><a href="#165917" label="[16:59:17]">&lt;stikonas&gt;</a></span><span class="message">good that it works now</span></div><div class="line" id="165923"><span class="nick" style="color:#2e2a4a"><a href="#165923" label="[16:59:23]">&lt;stikonas&gt;</a></span><span class="message">hopefully it's now faster</span></div><div class="line" id="171303"><span class="nick" style="color:#6b8072"><a href="#171303" label="[17:13:03]">&lt;oriansj&gt;</a></span><span class="message">well I just updated the GAS prototype, now I have to translate that into M1, then hex2 and then update the hex1 but we will know for certain after all that</span></div><div class="line" id="171527"><span class="nick" style="color:#6b8072"><a href="#171527" label="[17:15:27]">&lt;oriansj&gt;</a></span><span class="message">here is the delta for anyone curious: <a rel="nofollow" href="https://paste.debian.net/1214863/">https://paste.debian.net/1214863/</a> </span></div><div class="line" id="172453"><span class="nick" style="color:#234e69"><a href="#172453" label="[17:24:53]">&lt;stikonas[m]&gt;</a></span><span class="message">Oh yeah, we can't check until later. GAS version is always fast</span></div><div class="line" id="172612"><span class="nick" style="color:#6b8072"><a href="#172612" label="[17:26:12]">&lt;oriansj&gt;</a></span><span class="message">also I am doing this development on an AArch64 bare metal setup. So even the slow hex2 is still quite quick</span></div><div class="line" id="173143"><span class="nick" style="color:#2e2a4a"><a href="#173143" label="[17:31:43]">&lt;stikonas&gt;</a></span><span class="message">oh yes, I think on bare metal there is actually no or almost no difference</span></div><div class="line" id="173206"><span class="nick" style="color:#2e2a4a"><a href="#173206" label="[17:32:06]">&lt;stikonas&gt;</a></span><span class="message">it's mostly qemu issue</span></div><div class="line" id="173408"><span class="nick" style="color:#6b8072"><a href="#173408" label="[17:34:08]">&lt;oriansj&gt;</a></span><span class="message">total runtime: 1:51.57 so 2 minutes right now on a raspberry PI3</span></div><div class="line" id="173757"><span class="nick" style="color:#2e2a4a"><a href="#173757" label="[17:37:57]">&lt;stikonas&gt;</a></span><span class="message">rockpro64 is slightly quicker... 1min 9s</span></div><div class="line" id="173837"><span class="nick" style="color:#2e2a4a"><a href="#173837" label="[17:38:37]">&lt;stikonas&gt;</a></span><span class="message">well, I don't expect this number to change much</span></div><div class="line" id="173844"><span class="nick" style="color:#2e2a4a"><a href="#173844" label="[17:38:44]">&lt;stikonas&gt;</a></span><span class="message">it's the qemu number that will probably go down by a lot</span></div><div class="line" id="182818"><span class="nick" style="color:#6b8072"><a href="#182818" label="[18:28:18]">&lt;oriansj&gt;</a></span><span class="message">and hex2.M1 updated for AArch64 <a rel="nofollow" href="https://paste.debian.net/1214865/">https://paste.debian.net/1214865/</a> </span></div><div class="line" id="185535"><span class="nick" style="color:#2e2a4a"><a href="#185535" label="[18:55:35]">&lt;stikonas&gt;</a></span><span class="message">oh, it needs new M1 definitions. riscv definitions do have an advantave that you only need to write them once</span></div><div class="line" id="190015"><span class="nick" style="color:#6b8072"><a href="#190015" label="[19:00:15]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well AArch64 would have mapped much better to the word form of hex2 but was reasonabl enough that we managed to shoe-horn it into the old byte form of hex2</span></div><div class="line" id="190231"><span class="nick" style="color:#6b8072"><a href="#190231" label="[19:02:31]">&lt;oriansj&gt;</a></span><span class="message">and converted to hex2: <a rel="nofollow" href="https://paste.debian.net/1214868/">https://paste.debian.net/1214868/</a> </span></div><div class="line" id="193633"><span class="nick" style="color:#6b8072"><a href="#193633" label="[19:36:33]">&lt;oriansj&gt;</a></span><span class="message">7:12.88 down to 2:03.27 So i would say yes it is a good improvement for AArch64</span></div><div class="line" id="193816"><span class="nick" style="color:#2e2a4a"><a href="#193816" label="[19:38:16]">&lt;stikonas&gt;</a></span><span class="message">on qemu?</span></div><div class="line" id="193828"><span class="nick" style="color:#2e2a4a"><a href="#193828" label="[19:38:28]">&lt;stikonas&gt;</a></span><span class="message">well, it's almost 4x</span></div><div class="line" id="193833"><span class="nick" style="color:#6b8072"><a href="#193833" label="[19:38:33]">&lt;oriansj&gt;</a></span><span class="message">yep</span></div><div class="line" id="193839"><span class="nick" style="color:#2e2a4a"><a href="#193839" label="[19:38:39]">&lt;stikonas&gt;</a></span><span class="message">and not all the time is spent in hex2</span></div><div class="line" id="193842"><span class="nick" style="color:#6b8072"><a href="#193842" label="[19:38:42]">&lt;oriansj&gt;</a></span><span class="message">patch is up if you wish to verify yourself</span></div><div class="line" id="193914"><span class="nick" style="color:#2e2a4a"><a href="#193914" label="[19:39:14]">&lt;stikonas&gt;</a></span><span class="message">well, I'm not running some live-bootstrap work, so measurements might be skewed</span></div><div class="line" id="193924"><span class="nick" style="color:#6b8072"><a href="#193924" label="[19:39:24]">&lt;oriansj&gt;</a></span><span class="message">native is up to 1:52.97 from 1:51.57 so within margin of error</span></div><div class="line" id="194005"><span class="nick" style="color:#2e2a4a"><a href="#194005" label="[19:40:05]">&lt;stikonas&gt;</a></span><span class="message">well, as expected</span></div><div class="line" id="194119"><span class="nick" style="color:#2e2a4a"><a href="#194119" label="[19:41:19]">&lt;stikonas&gt;</a></span><span class="message">there is still some slowness  due to scratch but it's slightly harder to fix and in general things are not super slow now</span></div><div class="line" id="194203"><span class="nick" style="color:#2e2a4a"><a href="#194203" label="[19:42:03]">&lt;stikonas&gt;</a></span><span class="message">but yes, I can visibly see it faster when I run make test-aarch64 on amd64 machine</span></div><div class="line" id="230144"><span class="nick" style="color:#8dd3c7"><a href="#230144" label="[23:01:44]">&lt;fossy&gt;</a></span><span class="message">&lt;stikonas&gt; well, but for now everything after mes has to run on x86</span></div><div class="line" id="230211"><span class="nick" style="color:#8dd3c7"><a href="#230211" label="[23:02:11]">&lt;fossy&gt;</a></span><span class="message">only tinycc though. After tcc you could cross compile using gcc to any arch gcc supports</span></div><div class="line" id="232148"><span class="nick" style="color:#2e2a4a"><a href="#232148" label="[23:21:48]">&lt;stikonas&gt;</a></span><span class="message">fossy: I'm now doing some tests with autoconf 2.71, will have PR soon</span></div><div class="line" id="232206"><span class="nick" style="color:#2e2a4a"><a href="#232206" label="[23:22:06]">&lt;stikonas&gt;</a></span><span class="message">turns out it's a bit harder than just replacing 2.69 with 2.71. 2.71 needs full perl</span></div><div class="line" id="232214"><span class="nick" style="color:#2e2a4a"><a href="#232214" label="[23:22:14]">&lt;stikonas&gt;</a></span><span class="message">or at least doesn't run with our miniperl</span></div><div class="line" id="232223"><span class="nick" style="color:#2e2a4a"><a href="#232223" label="[23:22:23]">&lt;stikonas&gt;</a></span><span class="message">so I moved it closer to the end</span></div><div class="line" id="234323"><span class="nick" style="color:#2e2a4a"><a href="#234323" label="[23:43:23]">&lt;stikonas&gt;</a></span><span class="message">fossy:  <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/137">https://github.com/fosslinux/live-bootstrap/pull/137</a> </span></div><br /></div></body></html>