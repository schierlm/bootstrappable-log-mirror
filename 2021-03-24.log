<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-03-24.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000040"><span class="nick" style="color:#389600"><a href="#000040" label="[00:00:40]">&lt;stikonas&gt;</a></span><span class="message">that said, I think we can still push that change</span></div><div class="line" id="000053"><span class="nick" style="color:#389600"><a href="#000053" label="[00:00:53]">&lt;stikonas&gt;</a></span><span class="message">Hagfish: fossy is slowly working on kernel</span></div><div class="line" id="001339"><span class="nick" style="color:#2e2a4a"><a href="#001339" label="[00:13:39]">&lt;Hagfish&gt;</a></span><span class="message">fossy: what are the requirements for the kernel, or at what point does it make sense to try building it and booting into it?</span></div><div class="line" id="002310"><span class="nick" style="color:#389600"><a href="#002310" label="[00:23:10]">&lt;stikonas&gt;</a></span><span class="message">Hagfish: tcc</span></div><div class="line" id="002328"><span class="nick" style="color:#389600"><a href="#002328" label="[00:23:28]">&lt;stikonas&gt;</a></span><span class="message">only old patched kernel can be built with it but you can do that</span></div><div class="line" id="002537"><span class="nick" style="color:#2e2a4a"><a href="#002537" label="[00:25:37]">&lt;Hagfish&gt;</a></span><span class="message">wow, nice</span></div><div class="line" id="002554"><span class="nick" style="color:#2e2a4a"><a href="#002554" label="[00:25:54]">&lt;Hagfish&gt;</a></span><span class="message">and i guess it uses the shell of the host system</span></div><div class="line" id="002602"><span class="nick" style="color:#2e2a4a"><a href="#002602" label="[00:26:02]">&lt;Hagfish&gt;</a></span><span class="message">to compile the kernel in</span></div><div class="line" id="002614"><span class="nick" style="color:#389600"><a href="#002614" label="[00:26:14]">&lt;stikonas&gt;</a></span><span class="message">you don't need shell to compile kernel</span></div><div class="line" id="002627"><span class="nick" style="color:#389600"><a href="#002627" label="[00:26:27]">&lt;stikonas&gt;</a></span><span class="message">I think just make and tcc</span></div><div class="line" id="002635"><span class="nick" style="color:#2e2a4a"><a href="#002635" label="[00:26:35]">&lt;Hagfish&gt;</a></span><span class="message">oh, cool</span></div><div class="line" id="002645"><span class="nick" style="color:#2e2a4a"><a href="#002645" label="[00:26:45]">&lt;Hagfish&gt;</a></span><span class="message">and that old patched kernel is enough to run the subsequent bootstrap steps?</span></div><div class="line" id="003111"><span class="nick" style="color:#389600"><a href="#003111" label="[00:31:11]">&lt;stikonas&gt;</a></span><span class="message">it should be possible, yes</span></div><div class="line" id="003118"><span class="nick" style="color:#389600"><a href="#003118" label="[00:31:18]">&lt;stikonas&gt;</a></span><span class="message">we are not using that much in terms of kernel</span></div><div class="line" id="003222"><span class="nick" style="color:#2e2a4a"><a href="#003222" label="[00:32:22]">&lt;Hagfish&gt;</a></span><span class="message">there's a nice sense of &quot;dogfooding&quot; if (some of) the bootstrapping process itself can run in a kernel that it compiled</span></div><div class="line" id="003305"><span class="nick" style="color:#2e2a4a"><a href="#003305" label="[00:33:05]">&lt;Hagfish&gt;</a></span><span class="message">it's like that expression that if you can escape earth's orbit, you are half way towards anywhere else in the universe</span></div><div class="line" id="003409"><span class="nick" style="color:#389600"><a href="#003409" label="[00:34:09]">&lt;stikonas&gt;</a></span><span class="message">well, we haven't solved the problem of bootstrap kernel...</span></div><div class="line" id="003421"><span class="nick" style="color:#389600"><a href="#003421" label="[00:34:21]">&lt;stikonas&gt;</a></span><span class="message">you can't do that from inside live-bootstrap</span></div><div class="line" id="003442"><span class="nick" style="color:#389600"><a href="#003442" label="[00:34:42]">&lt;stikonas&gt;</a></span><span class="message">you have to manually use M2-Planet on baremetal</span></div><div class="line" id="003527"><span class="nick" style="color:#389600"><a href="#003527" label="[00:35:27]">&lt;stikonas&gt;</a></span><span class="message">and then build some simple kernel that can support VFS and processes</span></div><div class="line" id="003551"><span class="nick" style="color:#2e2a4a"><a href="#003551" label="[00:35:51]">&lt;Hagfish&gt;</a></span><span class="message">yeah, starting the bootstrap is the &quot;cheating&quot; bit, like getting into orbit</span></div><div class="line" id="003626"><span class="nick" style="color:#2e2a4a"><a href="#003626" label="[00:36:26]">&lt;Hagfish&gt;</a></span><span class="message">m2-planet on baremetal is an incredible idea</span></div><div class="line" id="003639"><span class="nick" style="color:#2e2a4a"><a href="#003639" label="[00:36:39]">&lt;Hagfish&gt;</a></span><span class="message">is it possible to meaningfully test that in qemu?</span></div><div class="line" id="003803"><span class="nick" style="color:#389600"><a href="#003803" label="[00:38:03]">&lt;stikonas&gt;</a></span><span class="message">well, that wouldn't really be mroe trustworthy...</span></div><div class="line" id="003811"><span class="nick" style="color:#389600"><a href="#003811" label="[00:38:11]">&lt;stikonas&gt;</a></span><span class="message">than live-bootstrap</span></div><div class="line" id="003851"><span class="nick" style="color:#2e2a4a"><a href="#003851" label="[00:38:51]">&lt;Hagfish&gt;</a></span><span class="message">but it would prove that the steps work, which could be run on someone's actual bare metal</span></div><div class="line" id="004009"><span class="nick" style="color:#389600"><a href="#004009" label="[00:40:09]">&lt;stikonas&gt;</a></span><span class="message">maybe... But then again there is a question of hardware trust</span></div><div class="line" id="004045"><span class="nick" style="color:#2e2a4a"><a href="#004045" label="[00:40:45]">&lt;Hagfish&gt;</a></span><span class="message">yes, i don't think any CI process can really give confidence in that (especially not one hosted remotely)</span></div><div class="line" id="004107"><span class="nick" style="color:#389600"><a href="#004107" label="[00:41:07]">&lt;stikonas&gt;</a></span><span class="message">yeah, with CI you can't get more</span></div><div class="line" id="004127"><span class="nick" style="color:#2e2a4a"><a href="#004127" label="[00:41:27]">&lt;Hagfish&gt;</a></span><span class="message">the CI is still valuable though, of course</span></div><div class="line" id="004150"><span class="nick" style="color:#389600"><a href="#004150" label="[00:41:50]">&lt;stikonas&gt;</a></span><span class="message">you can have slightly different startings points, like asmg does...</span></div><div class="line" id="004306"><span class="nick" style="color:#389600"><a href="#004306" label="[00:43:06]">&lt;stikonas&gt;</a></span><span class="message"> s/asmg/asmc/</span></div><div class="line" id="004319"><span class="nick" style="color:#2e2a4a"><a href="#004319" label="[00:43:19]">&lt;Hagfish&gt;</a></span><span class="message">yeah, that's a cool project too</span></div><div class="line" id="004410"><span class="nick" style="color:#2e2a4a"><a href="#004410" label="[00:44:10]">&lt;Hagfish&gt;</a></span><span class="message">i suspect that there will be more &quot;false positives&quot; than &quot;true positives&quot; when people run the bootstrap process on their own machines/kernels</span></div><div class="line" id="004435"><span class="nick" style="color:#2e2a4a"><a href="#004435" label="[00:44:35]">&lt;Hagfish&gt;</a></span><span class="message">i.e. we're not going to uncover any actual trusting-trust attacks, but people are going to need to debug the process of porting the bootstrap steps</span></div><div class="line" id="004644"><span class="nick" style="color:#389600"><a href="#004644" label="[00:46:44]">&lt;stikonas&gt;</a></span><span class="message">yeah, there isn't that much place for trusting-trust attack now...</span></div><div class="line" id="004700"><span class="nick" style="color:#389600"><a href="#004700" label="[00:47:00]">&lt;stikonas&gt;</a></span><span class="message">they have to be really low level</span></div><div class="line" id="004710"><span class="nick" style="color:#389600"><a href="#004710" label="[00:47:10]">&lt;stikonas&gt;</a></span><span class="message">and extremely hard to implement</span></div><div class="line" id="004716"><span class="nick" style="color:#389600"><a href="#004716" label="[00:47:16]">&lt;stikonas&gt;</a></span><span class="message">but also extremely hard to defend against</span></div><div class="line" id="005147"><span class="nick" style="color:#389600"><a href="#005147" label="[00:51:47]">&lt;stikonas&gt;</a></span><span class="message">pder: what is very strange is that we didn't have problems with bash 3.2.57, but I don't see any differences in source of psize.c or psize.sh between bash 3.2.57 and 5.1</span></div><div class="line" id="020012"><span class="nick" style="color:#6b8072"><a href="#020012" label="[02:00:12]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: M2-Planet on baremetal is why cc-minimal.c exists; just set a few variables and it'll build for any target you want from any device to any other device.</span></div><div class="line" id="020225"><span class="nick" style="color:#6b8072"><a href="#020225" label="[02:02:25]">&lt;OriansJ&gt;</a></span><span class="message">Ultimately the only steps that require a kernel are after M2-Planet+mescc-tools and one could write a simple POSIX Kernel using the M2-Planet subset of C.</span></div><div class="line" id="022110"><span class="nick" style="color:#389600"><a href="#022110" label="[02:21:10]">&lt;stikonas&gt;</a></span><span class="message">it doesn't even have to be fill POSIX kernel...</span></div><div class="line" id="022116"><span class="nick" style="color:#389600"><a href="#022116" label="[02:21:16]">&lt;stikonas&gt;</a></span><span class="message">s/fill/full/</span></div><div class="line" id="022130"><span class="nick" style="color:#389600"><a href="#022130" label="[02:21:30]">&lt;stikonas&gt;</a></span><span class="message">just something enough to reach tcc</span></div><div class="line" id="022148"><span class="nick" style="color:#6b8072"><a href="#022148" label="[02:21:48]">&lt;OriansJ&gt;</a></span><span class="message">indeed</span></div><div class="line" id="034528"><span class="nick" style="color:#2e2a4a"><a href="#034528" label="[03:45:28]">&lt;Hagfish&gt;</a></span><span class="message">the work to build up to gcc has been fantastic, and it sounds like the work to extend the bootstrapping chain downwards is going to be just as impressive</span></div><div class="line" id="034623"><span class="nick" style="color:#2e2a4a"><a href="#034623" label="[03:46:23]">&lt;Hagfish&gt;</a></span><span class="message">i think it wouldn't be clickbait to say &quot;from bare metal&quot; if the first steps are run without requiring a traditional kernel</span></div><div class="line" id="034841"><span class="nick" style="color:#2e2a4a"><a href="#034841" label="[03:48:41]">&lt;Hagfish&gt;</a></span><span class="message">the astute will ask &quot;where did the first kernel come from?&quot;, and that's valid, but just reducing the size of that kernel gives some information about the costs to an attacker</span></div><div class="line" id="035001"><span class="nick" style="color:#2e2a4a"><a href="#035001" label="[03:50:01]">&lt;Hagfish&gt;</a></span><span class="message">they would have to include within that kernel a payload which can detect every possible kernel and compiler, in order to propagate itself into the compiled result of subsequent steps in the bootstrap</span></div><div class="line" id="043419"><span class="nick">***</span><span class="message notice">mephista is now known as spicy_icecream</span></div><div class="line" id="050040"><span class="nick" style="color:#80b1d3"><a href="#050040" label="[05:00:40]">&lt;fossy&gt;</a></span><span class="message">&lt;stikonas&gt; fossy:  did you mention before that newer libtool would automatically work with autoreconf?</span></div><div class="line" id="050042"><span class="nick" style="color:#80b1d3"><a href="#050042" label="[05:00:42]">&lt;fossy&gt;</a></span><span class="message">yes</span></div><div class="line" id="052356"><span class="nick" style="color:#80b1d3"><a href="#052356" label="[05:23:56]">&lt;fossy&gt;</a></span><span class="message">Hagfish: fwiw, qemu is untrusted</span></div><div class="line" id="052403"><span class="nick" style="color:#80b1d3"><a href="#052403" label="[05:24:03]">&lt;fossy&gt;</a></span><span class="message">It is for development primarily</span></div><div class="line" id="054545"><span class="nick" style="color:#2e2a4a"><a href="#054545" label="[05:45:45]">&lt;Hagfish&gt;</a></span><span class="message">yup, that makes sense, thanks</span></div><div class="line" id="054805"><span class="nick" style="color:#2e2a4a"><a href="#054805" label="[05:48:05]">&lt;Hagfish&gt;</a></span><span class="message">i guess what i was unsure about was whether qemu has a minimum level of complexity it requires of the kernel it boots, i.e. whether &quot;M2-planet on bare metal&quot; would be supported (for testing) on it</span></div><div class="line" id="073953"><span class="nick" style="color:#80b1d3"><a href="#073953" label="[07:39:53]">&lt;fossy&gt;</a></span><span class="message">yeah i see</span></div><div class="line" id="085846"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado_</span></div><div class="line" id="145633"><span class="nick" style="color:#6d2462"><a href="#145633" label="[14:56:33]">&lt;pder&gt;</a></span><span class="message">stikonas: for the bash checksum problem, should we just force PIPESIZE to 65536 in builtins/pipesize.h?</span></div><div class="line" id="145852"><span class="nick" style="color:#234e69"><a href="#145852" label="[14:58:52]">&lt;stikonas_&gt;</a></span><span class="message">pder: that might be one solution, I'm still thinking what might be the cause</span></div><div class="line" id="145909"><span class="nick" style="color:#234e69"><a href="#145909" label="[14:59:09]">&lt;stikonas_&gt;</a></span><span class="message">pder: so on the bad run, if I rerun psize.sh it returns correct PIPESIZE</span></div><div class="line" id="145911"><span class="nick">***</span><span class="message notice">stikonas_ is now known as stikonas</span></div><div class="line" id="145925"><span class="nick" style="color:#389600"><a href="#145925" label="[14:59:25]">&lt;stikonas&gt;</a></span><span class="message">could it somehow be because we run it with bash-mes</span></div><div class="line" id="145926"><span class="nick" style="color:#6d2462"><a href="#145926" label="[14:59:26]">&lt;pder&gt;</a></span><span class="message">maybe its the bash version in which psize.sh is running</span></div><div class="line" id="145930"><span class="nick" style="color:#389600"><a href="#145930" label="[14:59:30]">&lt;stikonas&gt;</a></span><span class="message">and it has broken traps</span></div><div class="line" id="145935"><span class="nick" style="color:#389600"><a href="#145935" label="[14:59:35]">&lt;stikonas&gt;</a></span><span class="message">exactly</span></div><div class="line" id="145944"><span class="nick" style="color:#389600"><a href="#145944" label="[14:59:44]">&lt;stikonas&gt;</a></span><span class="message">that's why I am thinking maybe it's worth building older bash first</span></div><div class="line" id="145952"><span class="nick" style="color:#389600"><a href="#145952" label="[14:59:52]">&lt;stikonas&gt;</a></span><span class="message">just before 5.1</span></div><div class="line" id="150022"><span class="nick" style="color:#6d2462"><a href="#150022" label="[15:00:22]">&lt;pder&gt;</a></span><span class="message">I didnt look closely at bash 3.2.57 and if it uses that same psize.sh script</span></div><div class="line" id="150026"><span class="nick" style="color:#389600"><a href="#150026" label="[15:00:26]">&lt;stikonas&gt;</a></span><span class="message">psize.sh uses traps, which I think were not working for me properly when I was writing helpers.sh</span></div><div class="line" id="150036"><span class="nick" style="color:#389600"><a href="#150036" label="[15:00:36]">&lt;stikonas&gt;</a></span><span class="message">I think it uses the same...</span></div><div class="line" id="150042"><span class="nick" style="color:#389600"><a href="#150042" label="[15:00:42]">&lt;stikonas&gt;</a></span><span class="message">but we never hard any problem with it</span></div><div class="line" id="150044"><span class="nick" style="color:#389600"><a href="#150044" label="[15:00:44]">&lt;stikonas&gt;</a></span><span class="message">not sure why...</span></div><div class="line" id="150137"><span class="nick" style="color:#389600"><a href="#150137" label="[15:01:37]">&lt;stikonas&gt;</a></span><span class="message">pder: I've also been thiniking a bit about removing stuff, we probably want to have a better &quot;package manager&quot; later than helpers.sh</span></div><div class="line" id="150223"><span class="nick" style="color:#389600"><a href="#150223" label="[15:02:23]">&lt;stikonas&gt;</a></span><span class="message">maybe with DESTDIR like most normal distros do, so that we install somewhere else, then can checksum files, and maybe keep some &quot;install manifest&quot;</span></div><div class="line" id="150259"><span class="nick" style="color:#389600"><a href="#150259" label="[15:02:59]">&lt;stikonas&gt;</a></span><span class="message">otherwise it's getting harder to keep track of what is installed by what</span></div><div class="line" id="150309"><span class="nick" style="color:#389600"><a href="#150309" label="[15:03:09]">&lt;stikonas&gt;</a></span><span class="message">it's not longer single binary</span></div><div class="line" id="150333"><span class="nick" style="color:#389600"><a href="#150333" label="[15:03:33]">&lt;stikonas&gt;</a></span><span class="message">maybe we can do that at the same time as glibc migration...</span></div><div class="line" id="153730"><span class="nick" style="color:#6d2462"><a href="#153730" label="[15:37:30]">&lt;pder&gt;</a></span><span class="message">stikonas: another idea for bash-5.1 build is to do normal build and then rerun psize.sh on the new bash followed by make.</span></div><div class="line" id="153828"><span class="nick" style="color:#389600"><a href="#153828" label="[15:38:28]">&lt;stikonas&gt;</a></span><span class="message">yeah, we can try that</span></div><div class="line" id="153837"><span class="nick" style="color:#389600"><a href="#153837" label="[15:38:37]">&lt;stikonas&gt;</a></span><span class="message">ideally before make install</span></div><div class="line" id="153842"><span class="nick" style="color:#389600"><a href="#153842" label="[15:38:42]">&lt;stikonas&gt;</a></span><span class="message">but I think that will work</span></div><div class="line" id="160416"><span class="nick" style="color:#6d2462"><a href="#160416" label="[16:04:16]">&lt;pder&gt;</a></span><span class="message">ok, I will try that out.  I plan to commit this on your gcc branch right before you disable bash-5.1 build</span></div><div class="line" id="161804"><span class="nick" style="color:#389600"><a href="#161804" label="[16:18:04]">&lt;stikonas&gt;</a></span><span class="message">yeah, that's fine, if you can fix it I can replace disable bash-5.1 with your commits</span></div><div class="line" id="170037"><span class="nick" style="color:#389600"><a href="#170037" label="[17:00:37]">&lt;stikonas&gt;</a></span><span class="message">pder: actually, I think the simplest solution might be to sed -i 's/sleep 3/sleep 3; sleep 3/' psize.sh</span></div><div class="line" id="170108"><span class="nick" style="color:#389600"><a href="#170108" label="[17:01:08]">&lt;stikonas&gt;</a></span><span class="message">and no need for rebuild</span></div><div class="line" id="170122"><span class="nick" style="color:#389600"><a href="#170122" label="[17:01:22]">&lt;stikonas&gt;</a></span><span class="message">pder: maybe you can test that?</span></div><div class="line" id="170334"><span class="nick">***</span><span class="message notice">civodul` is now known as civodul</span></div><div class="line" id="170602"><span class="nick" style="color:#6d2462"><a href="#170602" label="[17:06:02]">&lt;pder&gt;</a></span><span class="message">I can try that, but why two sleep 3 commands?  Wouldnt sleep 6 work?</span></div><div class="line" id="170743"><span class="nick" style="color:#6d2462"><a href="#170743" label="[17:07:43]">&lt;pder&gt;</a></span><span class="message">I pushed my change to gcc branch, if you'd like to see what I'm currently testing</span></div><div class="line" id="170805"><span class="nick" style="color:#6d2462"><a href="#170805" label="[17:08:05]">&lt;pder&gt;</a></span><span class="message">Note I also have my mktemp branch applied as well so we have mktemp</span></div><div class="line" id="170930"><span class="nick" style="color:#389600"><a href="#170930" label="[17:09:30]">&lt;stikonas&gt;</a></span><span class="message">pder: I'm not sure if that &quot;| sleep 3&quot; works properly</span></div><div class="line" id="170955"><span class="nick" style="color:#389600"><a href="#170955" label="[17:09:55]">&lt;stikonas&gt;</a></span><span class="message">it might be that an extra sleep 1 will work</span></div><div class="line" id="185739"><span class="nick" style="color:#6d2462"><a href="#185739" label="[18:57:39]">&lt;pder&gt;</a></span><span class="message">stikonas: I looked closer at psize.c and my understanding is that the code initializes buf with 128 spaces then creates a signal handler for SIGPIPE named sigpipe which is defined at the top.  Then in the for loop it tries to write 128 byte chunks of buf to stdout forever or until it gets a SIGPIPE signal.</span></div><div class="line" id="185828"><span class="nick" style="color:#6d2462"><a href="#185828" label="[18:58:28]">&lt;pder&gt;</a></span><span class="message">thats why the output of psize.aux is piped to sleep so it will eventually trigger the signal</span></div><div class="line" id="185840"><span class="nick" style="color:#6d2462"><a href="#185840" label="[18:58:40]">&lt;pder&gt;</a></span><span class="message">so I dont think adding an additional sleep will do anything</span></div><div class="line" id="185848"><span class="nick" style="color:#389600"><a href="#185848" label="[18:58:48]">&lt;stikonas&gt;</a></span><span class="message">pder: strangely it seems to help...</span></div><div class="line" id="185901"><span class="nick" style="color:#389600"><a href="#185901" label="[18:59:01]">&lt;stikonas&gt;</a></span><span class="message">I was testing with | sleep 2; sleep 1</span></div><div class="line" id="185907"><span class="nick" style="color:#389600"><a href="#185907" label="[18:59:07]">&lt;stikonas&gt;</a></span><span class="message">and I always get 65K</span></div><div class="line" id="185921"><span class="nick" style="color:#389600"><a href="#185921" label="[18:59:21]">&lt;stikonas&gt;</a></span><span class="message">| sleep 3 is random</span></div><div class="line" id="185922"><span class="nick" style="color:#6d2462"><a href="#185922" label="[18:59:22]">&lt;pder&gt;</a></span><span class="message">is that running psize.sh with bash-2.05b?</span></div><div class="line" id="185926"><span class="nick" style="color:#389600"><a href="#185926" label="[18:59:26]">&lt;stikonas&gt;</a></span><span class="message">indeed</span></div><div class="line" id="190007"><span class="nick" style="color:#389600"><a href="#190007" label="[19:00:07]">&lt;stikonas&gt;</a></span><span class="message">so when I have sleep 3</span></div><div class="line" id="190015"><span class="nick" style="color:#389600"><a href="#190015" label="[19:00:15]">&lt;stikonas&gt;</a></span><span class="message">if I get 512</span></div><div class="line" id="190036"><span class="nick" style="color:#389600"><a href="#190036" label="[19:00:36]">&lt;stikonas&gt;</a></span><span class="message">when I cat that temporary file I still see 65 K in</span></div><div class="line" id="190048"><span class="nick" style="color:#389600"><a href="#190048" label="[19:00:48]">&lt;stikonas&gt;</a></span><span class="message">so I think sleep 1 helps with some race condition</span></div><div class="line" id="190053"><span class="nick" style="color:#389600"><a href="#190053" label="[19:00:53]">&lt;stikonas&gt;</a></span><span class="message">although, I don't fully understand yet</span></div><div class="line" id="190055"><span class="nick" style="color:#389600"><a href="#190055" label="[19:00:55]">&lt;stikonas&gt;</a></span><span class="message">what is racy</span></div><div class="line" id="190125"><span class="nick" style="color:#6d2462"><a href="#190125" label="[19:01:25]">&lt;pder&gt;</a></span><span class="message">so the if [ -s &quot;$TMPFILE ] must be failing</span></div><div class="line" id="190133"><span class="nick" style="color:#389600"><a href="#190133" label="[19:01:33]">&lt;stikonas&gt;</a></span><span class="message">yes, that's where that if is</span></div><div class="line" id="190143"><span class="nick" style="color:#389600"><a href="#190143" label="[19:01:43]">&lt;stikonas&gt;</a></span><span class="message">it's probably 0 size file</span></div><div class="line" id="190146"><span class="nick" style="color:#389600"><a href="#190146" label="[19:01:46]">&lt;stikonas&gt;</a></span><span class="message">when if is running</span></div><div class="line" id="190150"><span class="nick" style="color:#389600"><a href="#190150" label="[19:01:50]">&lt;stikonas&gt;</a></span><span class="message">and sleep 1 helps</span></div><div class="line" id="190200"><span class="nick" style="color:#389600"><a href="#190200" label="[19:02:00]">&lt;stikonas&gt;</a></span><span class="message">but I'm not sure why it's still 0 size</span></div><div class="line" id="190215"><span class="nick" style="color:#389600"><a href="#190215" label="[19:02:15]">&lt;stikonas&gt;</a></span><span class="message">maybe another of mes libc issues...</span></div><div class="line" id="190433"><span class="nick" style="color:#6d2462"><a href="#190433" label="[19:04:33]">&lt;pder&gt;</a></span><span class="message">hmm so the tmp file is 0 size when the &quot;if -s&quot; test is done but after sleeping it contains 65536?</span></div><div class="line" id="190516"><span class="nick" style="color:#389600"><a href="#190516" label="[19:05:16]">&lt;stikonas&gt;</a></span><span class="message">exactly</span></div><div class="line" id="190538"><span class="nick" style="color:#389600"><a href="#190538" label="[19:05:38]">&lt;stikonas&gt;</a></span><span class="message">even without sleeping I think</span></div><div class="line" id="190545"><span class="nick" style="color:#389600"><a href="#190545" label="[19:05:45]">&lt;stikonas&gt;</a></span><span class="message">just a bit later if I do cat</span></div><div class="line" id="190549"><span class="nick" style="color:#389600"><a href="#190549" label="[19:05:49]">&lt;stikonas&gt;</a></span><span class="message">after that if block</span></div><div class="line" id="190555"><span class="nick" style="color:#389600"><a href="#190555" label="[19:05:55]">&lt;stikonas&gt;</a></span><span class="message">on failed run it still prints 65K</span></div><div class="line" id="190650"><span class="nick" style="color:#389600"><a href="#190650" label="[19:06:50]">&lt;stikonas&gt;</a></span><span class="message">I think I like, putting some workaround in psize.sh slightly more, because then we don't have intermediate non-deterministic binaries</span></div><div class="line" id="191055"><span class="nick" style="color:#6d2462"><a href="#191055" label="[19:10:55]">&lt;pder&gt;</a></span><span class="message">thats understandable.  just sleeping seems a little fragile- could we poll for the tmpfile to be greater than 0 size?</span></div><div class="line" id="191208"><span class="nick" style="color:#389600"><a href="#191208" label="[19:12:08]">&lt;stikonas&gt;</a></span><span class="message">hmm maybe we can</span></div><div class="line" id="191245"><span class="nick" style="color:#6d2462"><a href="#191245" label="[19:12:45]">&lt;pder&gt;</a></span><span class="message">or would sync fix the issue?</span></div><div class="line" id="191250"><span class="nick" style="color:#389600"><a href="#191250" label="[19:12:50]">&lt;stikonas&gt;</a></span><span class="message">oh, worth trying too</span></div><div class="line" id="191306"><span class="nick" style="color:#389600"><a href="#191306" label="[19:13:06]">&lt;stikonas&gt;</a></span><span class="message">otherwise polling would probably be a loop of sleeps anyway</span></div><div class="line" id="191615"><span class="nick" style="color:#389600"><a href="#191615" label="[19:16:15]">&lt;stikonas&gt;</a></span><span class="message">pder: oh, we don't have sync yet</span></div><div class="line" id="192004"><span class="nick" style="color:#389600"><a href="#192004" label="[19:20:04]">&lt;stikonas&gt;</a></span><span class="message">pder: but sync does seem to help</span></div><div class="line" id="192110"><span class="nick" style="color:#389600"><a href="#192110" label="[19:21:10]">&lt;stikonas&gt;</a></span><span class="message">although, even ls there helps</span></div><div class="line" id="192508"><span class="nick">***</span><span class="message notice">lukedashjr is now known as luke-jr</span></div><div class="line" id="192612"><span class="nick" style="color:#389600"><a href="#192612" label="[19:26:12]">&lt;stikonas&gt;</a></span><span class="message">even sleep 0 helps</span></div><div class="line" id="192801"><span class="nick" style="color:#389600"><a href="#192801" label="[19:28:01]">&lt;stikonas&gt;</a></span><span class="message">pder: so I think even inserting /after/bin/true makes it deterministic</span></div><div class="line" id="192808"><span class="nick" style="color:#389600"><a href="#192808" label="[19:28:08]">&lt;stikonas&gt;</a></span><span class="message">not sure why...</span></div><div class="line" id="192950"><span class="nick" style="color:#389600"><a href="#192950" label="[19:29:50]">&lt;stikonas&gt;</a></span><span class="message">hmm, no, true doesn't work</span></div><div class="line" id="193103"><span class="nick" style="color:#389600"><a href="#193103" label="[19:31:03]">&lt;stikonas&gt;</a></span><span class="message">oh, I see, bash builtin true doesn't work but calling /after/bin/true from coreutils is sufficient</span></div><div class="line" id="193250"><span class="nick" style="color:#389600"><a href="#193250" label="[19:32:50]">&lt;stikonas&gt;</a></span><span class="message">maybe that triggers closing stdout...</span></div><div class="line" id="194459"><span class="nick" style="color:#6d2462"><a href="#194459" label="[19:44:59]">&lt;pder&gt;</a></span><span class="message">interesting- maybe its easy to add sync from coreutils?</span></div><div class="line" id="195855"><span class="nick" style="color:#389600"><a href="#195855" label="[19:58:55]">&lt;stikonas&gt;</a></span><span class="message">we can...</span></div><div class="line" id="195904"><span class="nick" style="color:#389600"><a href="#195904" label="[19:59:04]">&lt;stikonas&gt;</a></span><span class="message">I just wrote a one liner C program</span></div><div class="line" id="195911"><span class="nick" style="color:#389600"><a href="#195911" label="[19:59:11]">&lt;stikonas&gt;</a></span><span class="message">that calls sync();</span></div><div class="line" id="195916"><span class="nick" style="color:#389600"><a href="#195916" label="[19:59:16]">&lt;stikonas&gt;</a></span><span class="message">but I'm not even sure if we need that</span></div><div class="line" id="195924"><span class="nick" style="color:#389600"><a href="#195924" label="[19:59:24]">&lt;stikonas&gt;</a></span><span class="message">since /after/bin/true helps as well</span></div><div class="line" id="195936"><span class="nick" style="color:#389600"><a href="#195936" label="[19:59:36]">&lt;stikonas&gt;</a></span><span class="message">so do we need to go for trouble of building sync?</span></div><div class="line" id="195959"><span class="nick" style="color:#389600"><a href="#195959" label="[19:59:59]">&lt;stikonas&gt;</a></span><span class="message">I think any process call helps here</span></div><div class="line" id="200017"><span class="nick" style="color:#389600"><a href="#200017" label="[20:00:17]">&lt;stikonas&gt;</a></span><span class="message">(except for bash builtins)</span></div><div class="line" id="201911"><span class="nick" style="color:#6d2462"><a href="#201911" label="[20:19:11]">&lt;pder&gt;</a></span><span class="message">stikonas: I just tried adding sync to coreutils-5.0 pass2 and it was a trivial change- I think Ill rename my mktemp branch to coreutils and it will be all about adding mktemp and sync</span></div><div class="line" id="202045"><span class="nick" style="color:#389600"><a href="#202045" label="[20:20:45]">&lt;stikonas&gt;</a></span><span class="message">ok, running sync probably makes more sense</span></div><div class="line" id="202050"><span class="nick" style="color:#389600"><a href="#202050" label="[20:20:50]">&lt;stikonas&gt;</a></span><span class="message">then /after/bin/true</span></div><div class="line" id="202106"><span class="nick" style="color:#389600"><a href="#202106" label="[20:21:06]">&lt;stikonas&gt;</a></span><span class="message">I can merge your branch into mine if you want</span></div><div class="line" id="202110"><span class="nick" style="color:#389600"><a href="#202110" label="[20:21:10]">&lt;stikonas&gt;</a></span><span class="message">and push to the same PR</span></div><div class="line" id="203236"><span class="nick" style="color:#6d2462"><a href="#203236" label="[20:32:36]">&lt;pder&gt;</a></span><span class="message">ok, I just pushed my changes to coreutils branch</span></div><div class="line" id="203736"><span class="nick" style="color:#389600"><a href="#203736" label="[20:37:36]">&lt;stikonas&gt;</a></span><span class="message">ok, testing merge</span></div><div class="line" id="210822"><span class="nick" style="color:#80b1d3"><a href="#210822" label="[21:08:22]">&lt;fossy&gt;</a></span><span class="message">&lt;stikonas&gt; pder: I've also been thiniking a bit about removing stuff, we probably want to have a better &quot;package manager&quot; later than helpers.sh</span></div><div class="line" id="210831"><span class="nick" style="color:#80b1d3"><a href="#210831" label="[21:08:31]">&lt;fossy&gt;</a></span><span class="message">hm, I am not so sure about thisn</span></div><div class="line" id="210911"><span class="nick" style="color:#80b1d3"><a href="#210911" label="[21:09:11]">&lt;fossy&gt;</a></span><span class="message">it could be useful though</span></div><div class="line" id="210941"><span class="nick" style="color:#80b1d3"><a href="#210941" label="[21:09:41]">&lt;fossy&gt;</a></span><span class="message">but we need to think about the architecture of it very carefully, as it is a pretty abnormal use case for a package manager</span></div><div class="line" id="211016"><span class="nick" style="color:#80b1d3"><a href="#211016" label="[21:10:16]">&lt;fossy&gt;</a></span><span class="message">&lt;stikonas&gt; ok, running sync probably makes more sense</span></div><div class="line" id="211028"><span class="nick" style="color:#80b1d3"><a href="#211028" label="[21:10:28]">&lt;fossy&gt;</a></span><span class="message">thats really odd given we are in an initramfs</span></div><div class="line" id="211036"><span class="nick" style="color:#80b1d3"><a href="#211036" label="[21:10:36]">&lt;fossy&gt;</a></span><span class="message">OH!</span></div><div class="line" id="211045"><span class="nick" style="color:#80b1d3"><a href="#211045" label="[21:10:45]">&lt;fossy&gt;</a></span><span class="message">thats why we are having issues in qemu!</span></div><div class="line" id="211056"><span class="nick" style="color:#80b1d3"><a href="#211056" label="[21:10:56]">&lt;fossy&gt;</a></span><span class="message">cause theres no need for sync in initramfs but there is on disk</span></div><div class="line" id="211103"><span class="nick" style="color:#80b1d3"><a href="#211103" label="[21:11:03]">&lt;fossy&gt;</a></span><span class="message">/tmpfs</span></div><div class="line" id="211107"><span class="nick" style="color:#80b1d3"><a href="#211107" label="[21:11:07]">&lt;fossy&gt;</a></span><span class="message">like in chroot</span></div><div class="line" id="211706"><span class="nick" style="color:#389600"><a href="#211706" label="[21:17:06]">&lt;stikonas&gt;</a></span><span class="message">fossy: this is vice versa</span></div><div class="line" id="211712"><span class="nick" style="color:#389600"><a href="#211712" label="[21:17:12]">&lt;stikonas&gt;</a></span><span class="message">we are having issues in initramfs</span></div><div class="line" id="211755"><span class="nick" style="color:#389600"><a href="#211755" label="[21:17:55]">&lt;stikonas&gt;</a></span><span class="message">well, by &quot;package manager&quot; I mean something that can install into DESTDIR instead of directly into system, so that then we can automatically checksum all files (it's getting harder to keep track of what is installed by make install), keep the list of files, and maybe have an option of easily removing all</span></div><div class="line" id="211812"><span class="nick" style="color:#389600"><a href="#211812" label="[21:18:12]">&lt;stikonas&gt;</a></span><span class="message">so it's not &quot;full package manager&quot;</span></div><div class="line" id="211945"><span class="nick" style="color:#389600"><a href="#211945" label="[21:19:45]">&lt;stikonas&gt;</a></span><span class="message">e.g. now we might be installing some files, let's say into /after/share/ then installing newer version of some updated version on top, which might have a slightly different set of files, some some files will be overwritten, but some old cruft might stay behind</span></div><div class="line" id="212302"><span class="nick" style="color:#6b8072"><a href="#212302" label="[21:23:02]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: if guile can be built by TCC+musl; you could just leverage guix</span></div><div class="line" id="212606"><span class="nick" style="color:#80b1d3"><a href="#212606" label="[21:26:06]">&lt;fossy&gt;</a></span><span class="message">OriansJ: but then we need to create a lot of guix packages</span></div><div class="line" id="212633"><span class="nick" style="color:#80b1d3"><a href="#212633" label="[21:26:33]">&lt;fossy&gt;</a></span><span class="message">and I dont think either of us know guix packaging very well</span></div><div class="line" id="212749"><span class="nick" style="color:#6c3d55"><a href="#212749" label="[21:27:49]">&lt;bauen1&gt;</a></span><span class="message">if you have perl, maybe gnu stow can do this job</span></div><div class="line" id="212821"><span class="nick" style="color:#6c3d55"><a href="#212821" label="[21:28:21]">&lt;bauen1&gt;</a></span><span class="message">it requires perl &gt;= 5.0006</span></div><div class="line" id="213834"><span class="nick" style="color:#389600"><a href="#213834" label="[21:38:34]">&lt;stikonas&gt;</a></span><span class="message">I was thinking of just extending bash a bit...</span></div><div class="line" id="213836"><span class="nick" style="color:#80b1d3"><a href="#213836" label="[21:38:36]">&lt;fossy&gt;</a></span><span class="message">I was just coming back here to say haha</span></div><div class="line" id="213843"><span class="nick" style="color:#389600"><a href="#213843" label="[21:38:43]">&lt;stikonas&gt;</a></span><span class="message">we already have our build files...</span></div><div class="line" id="213844"><span class="nick" style="color:#80b1d3"><a href="#213844" label="[21:38:44]">&lt;fossy&gt;</a></span><span class="message">I think stow is a very good option</span></div><div class="line" id="213856"><span class="nick" style="color:#389600"><a href="#213856" label="[21:38:56]">&lt;stikonas&gt;</a></span><span class="message">just need to adjust it a bit to install into DESTDIR, add a function or two</span></div><div class="line" id="213908"><span class="nick" style="color:#389600"><a href="#213908" label="[21:39:08]">&lt;stikonas&gt;</a></span><span class="message">hmm, never heard of gnu stow, maybe worth taking a look</span></div><div class="line" id="213914"><span class="nick" style="color:#80b1d3"><a href="#213914" label="[21:39:14]">&lt;fossy&gt;</a></span><span class="message">stikonas: but how do we manage the file list and the like</span></div><div class="line" id="213938"><span class="nick" style="color:#80b1d3"><a href="#213938" label="[21:39:38]">&lt;fossy&gt;</a></span><span class="message">stow is basically you install to a prefix and it symlinks things to a more normal directory structure</span></div><div class="line" id="213939"><span class="nick" style="color:#389600"><a href="#213939" label="[21:39:39]">&lt;stikonas&gt;</a></span><span class="message">oh, just automatically generated</span></div><div class="line" id="213946"><span class="nick" style="color:#389600"><a href="#213946" label="[21:39:46]">&lt;stikonas&gt;</a></span><span class="message">ok, so stow is like GUIX...</span></div><div class="line" id="214009"><span class="nick" style="color:#389600"><a href="#214009" label="[21:40:09]">&lt;stikonas&gt;</a></span><span class="message">well, DESTDIR is just <a rel="nofollow" href="https://www.gnu.org/prep/standards/html_node/DESTDIR.html">https://www.gnu.org/prep/standards/html_node/DESTDIR.html</a> </span></div><div class="line" id="214022"><span class="nick" style="color:#80b1d3"><a href="#214022" label="[21:40:22]">&lt;fossy&gt;</a></span><span class="message">kinda but without the guile</span></div><div class="line" id="214029"><span class="nick" style="color:#389600"><a href="#214029" label="[21:40:29]">&lt;stikonas&gt;</a></span><span class="message">you run make DESTDIR=/tmp/stage install, then checksum all files in stagedir</span></div><div class="line" id="214040"><span class="nick" style="color:#389600"><a href="#214040" label="[21:40:40]">&lt;stikonas&gt;</a></span><span class="message">and move the whole thing into your prefix</span></div><div class="line" id="214046"><span class="nick" style="color:#389600"><a href="#214046" label="[21:40:46]">&lt;stikonas&gt;</a></span><span class="message">if checksums are what we expect</span></div><div class="line" id="214101"><span class="nick" style="color:#389600"><a href="#214101" label="[21:41:01]">&lt;stikonas&gt;</a></span><span class="message">(now we are installing and then checksumming)</span></div><div class="line" id="214103"><span class="nick" style="color:#80b1d3"><a href="#214103" label="[21:41:03]">&lt;fossy&gt;</a></span><span class="message">the thing I like about stow is is that when we go to sysb sysc sysd etc, we can just copy over package directories that we want</span></div><div class="line" id="214113"><span class="nick" style="color:#80b1d3"><a href="#214113" label="[21:41:13]">&lt;fossy&gt;</a></span><span class="message">although that is also doable using destdir</span></div><div class="line" id="214122"><span class="nick" style="color:#389600"><a href="#214122" label="[21:41:22]">&lt;stikonas&gt;</a></span><span class="message">yeah, both are similar I guess</span></div><div class="line" id="214126"><span class="nick" style="color:#80b1d3"><a href="#214126" label="[21:41:26]">&lt;fossy&gt;</a></span><span class="message">using a couple of functuins</span></div><div class="line" id="214135"><span class="nick" style="color:#389600"><a href="#214135" label="[21:41:35]">&lt;stikonas&gt;</a></span><span class="message">yeah, if you have  a list of installed files</span></div><div class="line" id="214137"><span class="nick" style="color:#389600"><a href="#214137" label="[21:41:37]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="214139"><span class="nick" style="color:#80b1d3"><a href="#214139" label="[21:41:39]">&lt;fossy&gt;</a></span><span class="message">Ill see if I can get stow working</span></div><div class="line" id="214151"><span class="nick" style="color:#80b1d3"><a href="#214151" label="[21:41:51]">&lt;fossy&gt;</a></span><span class="message">if its not trivial destdir is probably the way to go</span></div><div class="line" id="214204"><span class="nick" style="color:#389600"><a href="#214204" label="[21:42:04]">&lt;stikonas&gt;</a></span><span class="message">destdir have a slight advantage that we can use it earlier</span></div><div class="line" id="214213"><span class="nick" style="color:#389600"><a href="#214213" label="[21:42:13]">&lt;stikonas&gt;</a></span><span class="message">probably as soon as we have sha256sum</span></div><div class="line" id="214221"><span class="nick" style="color:#389600"><a href="#214221" label="[21:42:21]">&lt;stikonas&gt;</a></span><span class="message">or maybe just first bash</span></div><div class="line" id="214254"><span class="nick" style="color:#80b1d3"><a href="#214254" label="[21:42:54]">&lt;fossy&gt;</a></span><span class="message">yeah, true</span></div><div class="line" id="214345"><span class="nick" style="color:#6c3d55"><a href="#214345" label="[21:43:45]">&lt;bauen1&gt;</a></span><span class="message">a bit of bash + sha256sum + tar + stow would probably make for a decent-ish package manager, just need to integrate all the things together</span></div><div class="line" id="214422"><span class="nick" style="color:#389600"><a href="#214422" label="[21:44:22]">&lt;stikonas&gt;</a></span><span class="message">well, we only need something basic</span></div><div class="line" id="214432"><span class="nick" style="color:#389600"><a href="#214432" label="[21:44:32]">&lt;stikonas&gt;</a></span><span class="message">basically something to keep track of what is installed</span></div><div class="line" id="214443"><span class="nick" style="color:#389600"><a href="#214443" label="[21:44:43]">&lt;stikonas&gt;</a></span><span class="message">no need to have dependency resolution</span></div><div class="line" id="214450"><span class="nick" style="color:#d9d9d9"><a href="#214450" label="[21:44:50]">*</a></span><span class="message">bauen1 wonders if it could be made to be compatble with .deb so bootstrapping becomes very easy once you have dpkg running</span></div><div class="line" id="214724"><span class="nick" style="color:#389600"><a href="#214724" label="[21:47:24]">&lt;stikonas&gt;</a></span><span class="message">dpkg probably needs newer perl than what we have</span></div><div class="line" id="214756"><span class="nick" style="color:#389600"><a href="#214756" label="[21:47:56]">&lt;stikonas&gt;</a></span><span class="message">unless we go for very old dpkg</span></div><div class="line" id="214805"><span class="nick" style="color:#389600"><a href="#214805" label="[21:48:05]">&lt;stikonas&gt;</a></span><span class="message">but they are more useful for dealing with binary packages...</span></div><div class="line" id="214805"><span class="nick" style="color:#6c3d55"><a href="#214805" label="[21:48:05]">&lt;bauen1&gt;</a></span><span class="message">stikonas: i mean you can make it as complicated as you want, you could have stow manaage the entire sysroot for you (and &quot;upgrade&quot; packages when they become available)</span></div><div class="line" id="215114"><span class="nick" style="color:#6c3d55"><a href="#215114" label="[21:51:14]">&lt;bauen1&gt;</a></span><span class="message">stikonas: i was thinking about when you want to compile the source packages for the first distribution, if you provide dpkg packages that can then be used as build requirements for other debian packages you could rework the entire debian dependency graph to remove any cycles, the only input would be the debs generated from a successful bootstrap</span></div><div class="line" id="215206"><span class="nick" style="color:#6c3d55"><a href="#215206" label="[21:52:06]">&lt;bauen1&gt;</a></span><span class="message">s/the first distribution/a distrbution/</span></div><div class="line" id="215229"><span class="nick" style="color:#389600"><a href="#215229" label="[21:52:29]">&lt;stikonas&gt;</a></span><span class="message">well, at some point it might be good to do that, but it would be nice to do that for various distros, not just debian</span></div><div class="line" id="215245"><span class="nick" style="color:#6c3d55"><a href="#215245" label="[21:52:45]">&lt;bauen1&gt;</a></span><span class="message">true, but you have to start somewhere</span></div><div class="line" id="215350"><span class="nick" style="color:#80b1d3"><a href="#215350" label="[21:53:50]">&lt;fossy&gt;</a></span><span class="message">I have too many issues with dpkg.</span></div><div class="line" id="215351"><span class="nick" style="color:#389600"><a href="#215351" label="[21:53:51]">&lt;stikonas&gt;</a></span><span class="message">well, if we have some list of files and packages even from bash, it should be trivial to create deps</span></div><div class="line" id="215353"><span class="nick" style="color:#389600"><a href="#215353" label="[21:53:53]">&lt;stikonas&gt;</a></span><span class="message">debs</span></div><div class="line" id="215417"><span class="nick" style="color:#389600"><a href="#215417" label="[21:54:17]">&lt;stikonas&gt;</a></span><span class="message">but I think it makes sense to do that much later</span></div><div class="line" id="215421"><span class="nick" style="color:#80b1d3"><a href="#215421" label="[21:54:21]">&lt;fossy&gt;</a></span><span class="message">it is not very useable, the packaging format is absolutely insanly complex</span></div><div class="line" id="215424"><span class="nick" style="color:#389600"><a href="#215424" label="[21:54:24]">&lt;stikonas&gt;</a></span><span class="message">as distro bootsrapping plugin</span></div><div class="line" id="215435"><span class="nick" style="color:#389600"><a href="#215435" label="[21:54:35]">&lt;stikonas&gt;</a></span><span class="message">yeah, debian packages are more complex ...</span></div><div class="line" id="215440"><span class="nick" style="color:#389600"><a href="#215440" label="[21:54:40]">&lt;stikonas&gt;</a></span><span class="message">e.g. gentoo packages are easier to read</span></div><div class="line" id="215443"><span class="nick" style="color:#80b1d3"><a href="#215443" label="[21:54:43]">&lt;fossy&gt;</a></span><span class="message">all we need is something that is able to track files, dpkg is so overkill</span></div><div class="line" id="215455"><span class="nick" style="color:#389600"><a href="#215455" label="[21:54:55]">&lt;stikonas&gt;</a></span><span class="message">but I think even &quot;ebuild&quot; program is overkill here</span></div><div class="line" id="215501"><span class="nick" style="color:#80b1d3"><a href="#215501" label="[21:55:01]">&lt;fossy&gt;</a></span><span class="message">yes it is</span></div><div class="line" id="215507"><span class="nick" style="color:#389600"><a href="#215507" label="[21:55:07]">&lt;stikonas&gt;</a></span><span class="message">and ebuild is mostly bash</span></div><div class="line" id="215527"><span class="nick" style="color:#80b1d3"><a href="#215527" label="[21:55:27]">&lt;fossy&gt;</a></span><span class="message">the thing that distinguishes us from distros is this process is empheral, we always start from 0</span></div><div class="line" id="215533"><span class="nick" style="color:#6c3d55"><a href="#215533" label="[21:55:33]">&lt;bauen1&gt;</a></span><span class="message">fossy: yes not for now, i was thinking at the end you could just tar up the most up to date packages in the stow directory, add a bit of metadata and then use that (after building a few debian tools) to bootstrap debian</span></div><div class="line" id="215535"><span class="nick" style="color:#389600"><a href="#215535" label="[21:55:35]">&lt;stikonas&gt;</a></span><span class="message">I gues any real distro package manager is too complex here</span></div><div class="line" id="215540"><span class="nick" style="color:#80b1d3"><a href="#215540" label="[21:55:40]">&lt;fossy&gt;</a></span><span class="message">therefore we dont need dependency resolution</span></div><div class="line" id="215544"><span class="nick" style="color:#389600"><a href="#215544" label="[21:55:44]">&lt;stikonas&gt;</a></span><span class="message">exactly</span></div><div class="line" id="215602"><span class="nick" style="color:#389600"><a href="#215602" label="[21:56:02]">&lt;stikonas&gt;</a></span><span class="message">I think we can just make binary deb packages for bootstrapping without source debs</span></div><div class="line" id="215615"><span class="nick" style="color:#389600"><a href="#215615" label="[21:56:15]">&lt;stikonas&gt;</a></span><span class="message">just archive e.g. gcc files using binutils ar into binary deb</span></div><div class="line" id="215713"><span class="nick" style="color:#389600"><a href="#215713" label="[21:57:13]">&lt;stikonas&gt;</a></span><span class="message">we don't even need dependencies for those bootstrap debs later...</span></div><div class="line" id="215730"><span class="nick" style="color:#389600"><a href="#215730" label="[21:57:30]">&lt;stikonas&gt;</a></span><span class="message">anyway, I think distro bootsrapping is for much later...</span></div><div class="line" id="220047"><span class="nick" style="color:#80b1d3"><a href="#220047" label="[22:00:47]">&lt;fossy&gt;</a></span><span class="message">yes it is</span></div><div class="line" id="221432"><span class="nick" style="color:#6d2462"><a href="#221432" label="[22:14:32]">&lt;pder&gt;</a></span><span class="message">stikonas: I just tested a qemu build of your latest gcc branch and it succeeded</span></div><div class="line" id="222425"><span class="nick" style="color:#389600"><a href="#222425" label="[22:24:25]">&lt;stikonas&gt;</a></span><span class="message">yeah, it also succeded for me...</span></div><div class="line" id="222459"><span class="nick" style="color:#389600"><a href="#222459" label="[22:24:59]">&lt;stikonas&gt;</a></span><span class="message">CI on PR is still running though</span></div><div class="line" id="222638"><span class="nick" style="color:#2e2a4a"><a href="#222638" label="[22:26:38]">&lt;Hagfish&gt;</a></span><span class="message">bauen1: should the goal be for a bootstrapped system to produce binary .deb files, or to produce a Debian base image (or does the latter require the former)?</span></div><div class="line" id="222924"><span class="nick" style="color:#6c3d55"><a href="#222924" label="[22:29:24]">&lt;bauen1&gt;</a></span><span class="message">you know what instead of sitting here doing nothing but waiting for something to happen and solving sudokus, i could be helping here, so let me try out live-bootstrap and see if i can get gnu stow to build</span></div><div class="line" id="222931"><span class="nick" style="color:#6c3d55"><a href="#222931" label="[22:29:31]">&lt;bauen1&gt;</a></span><span class="message">or find an alternative implementation that does build</span></div><div class="line" id="223107"><span class="nick" style="color:#2e2a4a"><a href="#223107" label="[22:31:07]">&lt;Hagfish&gt;</a></span><span class="message">if it helps, i think there are some pretty good sudoku solvers out there which could automate that task for you, although i don't know how reproducible their builds are ;)</span></div><div class="line" id="223125"><span class="nick" style="color:#6c3d55"><a href="#223125" label="[22:31:25]">&lt;bauen1&gt;</a></span><span class="message">if i run chroot with --userspec=1000:1000 (to not give live-bootstrap root access more than necessary) does that break sha256sums ?</span></div><div class="line" id="223222"><span class="nick" style="color:#6c3d55"><a href="#223222" label="[22:32:22]">&lt;bauen1&gt;</a></span><span class="message">Hagfish: ideally you can bootstrap multiple distributions from live-bootstrap ? i was just thinking about how a transition to a debian system might happen</span></div><div class="line" id="223311"><span class="nick" style="color:#389600"><a href="#223311" label="[22:33:11]">&lt;stikonas&gt;</a></span><span class="message">not sure if sudoku solvers can do package management... package managers on the other hand can solve sudoku</span></div><div class="line" id="223335"><span class="nick" style="color:#6c3d55"><a href="#223335" label="[22:33:35]">&lt;bauen1&gt;</a></span><span class="message">stikonas: i've read somewhere tthat apt basically does SAT solving against the package versions, so that is probably true ...</span></div><div class="line" id="223347"><span class="nick" style="color:#2e2a4a"><a href="#223347" label="[22:33:47]">&lt;Hagfish&gt;</a></span><span class="message">amazing</span></div><div class="line" id="223406"><span class="nick" style="color:#389600"><a href="#223406" label="[22:34:06]">&lt;stikonas&gt;</a></span><span class="message">anyway, dependency resolution is not needed here...</span></div><div class="line" id="223414"><span class="nick" style="color:#389600"><a href="#223414" label="[22:34:14]">&lt;stikonas&gt;</a></span><span class="message">although, it might be nice to produce dependency graph</span></div><div class="line" id="223422"><span class="nick" style="color:#389600"><a href="#223422" label="[22:34:22]">&lt;stikonas&gt;</a></span><span class="message">but that's just some &quot;dot&quot; work...</span></div><div class="line" id="223523"><span class="nick" style="color:#6c3d55"><a href="#223523" label="[22:35:23]">&lt;bauen1&gt;</a></span><span class="message">Hagfish: i think you'd eventually build *dpkg*, &quot;package&quot; all the existing bootstrap tools so you can use dpkgs dependency resolution, and start building all the tools that are part of build-essential</span></div><div class="line" id="223559"><span class="nick" style="color:#2e2a4a"><a href="#223559" label="[22:35:59]">&lt;Hagfish&gt;</a></span><span class="message">yeah, i guess you'd need the packages that are part of build-essential</span></div><div class="line" id="223615"><span class="nick" style="color:#6c3d55"><a href="#223615" label="[22:36:15]">&lt;bauen1&gt;</a></span><span class="message">Hagfish: then build the debian kernel using that, reboot, and start building the packages necessary for the debian installer and package management, once you have those you can hopefully produce a bit to bit identical installer as debian.org provides</span></div><div class="line" id="223642"><span class="nick" style="color:#2e2a4a"><a href="#223642" label="[22:36:42]">&lt;Hagfish&gt;</a></span><span class="message">presumably the debian buildd admins spin up a base system and then install build essential on top of it</span></div><div class="line" id="223728"><span class="nick" style="color:#6c3d55"><a href="#223728" label="[22:37:28]">&lt;bauen1&gt;</a></span><span class="message">you might need a few more other thigns to go with it, like gpg, nginx, ssh, to take care of your infrastructure needs</span></div><div class="line" id="223737"><span class="nick" style="color:#2e2a4a"><a href="#223737" label="[22:37:37]">&lt;Hagfish&gt;</a></span><span class="message">ah, good point</span></div><div class="line" id="223750"><span class="nick" style="color:#389600"><a href="#223750" label="[22:37:50]">&lt;stikonas&gt;</a></span><span class="message">these are simple to build...</span></div><div class="line" id="223810"><span class="nick" style="color:#6c3d55"><a href="#223810" label="[22:38:10]">&lt;bauen1&gt;</a></span><span class="message">stikonas: yes, once you have dpkg and build-essential it should be a smooth sailing ship</span></div><div class="line" id="223815"><span class="nick" style="color:#6c3d55"><a href="#223815" label="[22:38:15]">&lt;bauen1&gt;</a></span><span class="message">for the debian case at least</span></div><div class="line" id="223838"><span class="nick" style="color:#389600"><a href="#223838" label="[22:38:38]">&lt;stikonas&gt;</a></span><span class="message">well, smaller distros are even easier...</span></div><div class="line" id="230654"><span class="nick" style="color:#389600"><a href="#230654" label="[23:06:54]">&lt;stikonas&gt;</a></span><span class="message">fossy: pder: so CI for GCC+Bash 5.1 passed too <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/75">https://github.com/fosslinux/live-bootstrap/pull/75</a> </span></div><div class="line" id="230947"><span class="nick" style="color:#389600"><a href="#230947" label="[23:09:47]">&lt;stikonas&gt;</a></span><span class="message">I've added one more comment about that workaround...</span></div><div class="line" id="231125"><span class="nick" style="color:#6c3d55"><a href="#231125" label="[23:11:25]">&lt;bauen1&gt;</a></span><span class="message">by the way, how long does live-bootstrap currently take on a compuer that's not a potato ?</span></div><div class="line" id="231859"><span class="nick" style="color:#389600"><a href="#231859" label="[23:18:59]">&lt;stikonas&gt;</a></span><span class="message">maybe 30 minutes...</span></div><div class="line" id="231919"><span class="nick" style="color:#389600"><a href="#231919" label="[23:19:19]">&lt;stikonas&gt;</a></span><span class="message">bauen1: with GCC changes maybe slightly over</span></div><div class="line" id="231934"><span class="nick" style="color:#389600"><a href="#231934" label="[23:19:34]">&lt;stikonas&gt;</a></span><span class="message">bauen1: also depends on qemu vs chroot... chroot is faster, qemu is a bit slower</span></div><div class="line" id="232039"><span class="nick" style="color:#389600"><a href="#232039" label="[23:20:39]">&lt;stikonas&gt;</a></span><span class="message">bauen1: I expect it will start growing a bit faster now</span></div><div class="line" id="232041"><span class="nick" style="color:#6c3d55"><a href="#232041" label="[23:20:41]">&lt;bauen1&gt;</a></span><span class="message">nice that doesn't sound too bad, i suppose that will change once the next few gcc / binutils versions are added</span></div><div class="line" id="232051"><span class="nick" style="color:#389600"><a href="#232051" label="[23:20:51]">&lt;stikonas&gt;</a></span><span class="message">well, not just that, everything</span></div><div class="line" id="232057"><span class="nick" style="color:#389600"><a href="#232057" label="[23:20:57]">&lt;stikonas&gt;</a></span><span class="message">gcc is quite a bit slower than tcc</span></div><div class="line" id="232130"><span class="nick" style="color:#389600"><a href="#232130" label="[23:21:30]">&lt;stikonas&gt;</a></span><span class="message">that said, maybe we should build without too many optimizations...</span></div><div class="line" id="232131"><span class="nick" style="color:#389600"><a href="#232131" label="[23:21:31]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="232135"><span class="nick" style="color:#389600"><a href="#232135" label="[23:21:35]">&lt;stikonas&gt;</a></span><span class="message">that might speed gcc up</span></div><div class="line" id="232159"><span class="nick" style="color:#389600"><a href="#232159" label="[23:21:59]">&lt;stikonas&gt;</a></span><span class="message">but in any case, it's not too bad</span></div><div class="line" id="232211"><span class="nick" style="color:#389600"><a href="#232211" label="[23:22:11]">&lt;stikonas&gt;</a></span><span class="message">much faster to bootstrap gcc, then e.g. rust</span></div><div class="line" id="232216"><span class="nick" style="color:#389600"><a href="#232216" label="[23:22:16]">&lt;stikonas&gt;</a></span><span class="message">s/then/than/</span></div><br /></div></body></html>