<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-09-24.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="022428"><span class="nick" style="color:#8dd3c7"><a href="#022428" label="[02:24:28]">&lt;oriansj&gt;</a></span><span class="message">although a strange thought hit me. What would the psychological effect if we bootstrapped say Firefox from live-bootstrap. A literal, hex0 to a fully modern web browser.</span></div><div class="line" id="023531"><span class="nick" style="color:#2e2a4a"><a href="#023531" label="[02:35:31]">&lt;muurkha&gt;</a></span><span class="message">that's the main goal, isn't it?</span></div><div class="line" id="023603"><span class="nick" style="color:#6b8072"><a href="#023603" label="[02:36:03]">&lt;pabs3&gt;</a></span><span class="message">wouldn't you bootstrap to a distro and build ff from there?</span></div><div class="line" id="023628"><span class="nick" style="color:#2e2a4a"><a href="#023628" label="[02:36:28]">&lt;muurkha&gt;</a></span><span class="message">yeah</span></div><div class="line" id="023951"><span class="nick" style="color:#8dd3c7"><a href="#023951" label="[02:39:51]">&lt;oriansj&gt;</a></span><span class="message">muurkha: well the goal for me always was to have fun while bootstrapping software; I just ended up finding a lot of friends along the way and ended up seeing much more success than I ever expected. ^_^</span></div><div class="line" id="024058"><span class="nick" style="color:#2e2a4a"><a href="#024058" label="[02:40:58]">&lt;muurkha&gt;</a></span><span class="message">:)</span></div><div class="line" id="024122"><span class="nick" style="color:#8dd3c7"><a href="#024122" label="[02:41:22]">&lt;oriansj&gt;</a></span><span class="message">pabs3: well we are already in the Linux from Scratch territory; so everything after GCC 4.7.4 is just extra awesomeness</span></div><div class="line" id="024145"><span class="nick" style="color:#6b8072"><a href="#024145" label="[02:41:45]">&lt;pabs3&gt;</a></span><span class="message">interesting</span></div><div class="line" id="024327"><span class="nick" style="color:#8dd3c7"><a href="#024327" label="[02:43:27]">&lt;oriansj&gt;</a></span><span class="message">with Guile and autotools properly bootstrapped (for the first time EVER) and the builder-hex0 work; we are well within a new era of software bootstrapping.</span></div><div class="line" id="024542"><span class="nick" style="color:#8dd3c7"><a href="#024542" label="[02:45:42]">&lt;oriansj&gt;</a></span><span class="message">In the next year or so, we should have a bootstrap path between builder-hex0 and Linux.</span></div><div class="line" id="024735"><span class="nick" style="color:#2e2a4a"><a href="#024735" label="[02:47:35]">&lt;muurkha&gt;</a></span><span class="message">what's missing?</span></div><div class="line" id="024817"><span class="nick" style="color:#8dd3c7"><a href="#024817" label="[02:48:17]">&lt;oriansj&gt;</a></span><span class="message">then we can go after firmware bootstrapping, or custom bootstrapping hardware, sorting out the issues with various Linux Distros, making various pieces more robust or work on more platforms, not to mention the countless languages and &quot;special&quot; tools that need love to be properly bootstrapped.</span></div><div class="line" id="024839"><span class="nick" style="color:#80b1d3"><a href="#024839" label="[02:48:39]">&lt;stikonas[m]&gt;</a></span><span class="message">We need another more powerful kernel</span></div><div class="line" id="024839"><span class="nick" style="color:#6d2462"><a href="#024839" label="[02:48:39]">&lt;sam_&gt;</a></span><span class="message">&quot;love&quot;</span></div><div class="line" id="024840"><span class="nick" style="color:#6d2462"><a href="#024840" label="[02:48:40]">&lt;sam_&gt;</a></span><span class="message">:)</span></div><div class="line" id="024923"><span class="nick" style="color:#80b1d3"><a href="#024923" label="[02:49:23]">&lt;stikonas[m]&gt;</a></span><span class="message">Or maybe stage0-uefi would produce some results</span></div><div class="line" id="024950"><span class="nick" style="color:#8dd3c7"><a href="#024950" label="[02:49:50]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well that would definitely be awesome</span></div><div class="line" id="025040"><span class="nick" style="color:#8dd3c7"><a href="#025040" label="[02:50:40]">&lt;oriansj&gt;</a></span><span class="message">not to mention hobby kernels people do for fun to learn</span></div><div class="line" id="025145"><span class="nick" style="color:#8dd3c7"><a href="#025145" label="[02:51:45]">&lt;oriansj&gt;</a></span><span class="message">ports to the various *BSDs, DOS, CPM, etc</span></div><div class="line" id="025201"><span class="nick" style="color:#2e2a4a"><a href="#025201" label="[02:52:01]">&lt;muurkha&gt;</a></span><span class="message">oberon ;)</span></div><div class="line" id="025232"><span class="nick" style="color:#8dd3c7"><a href="#025232" label="[02:52:32]">&lt;oriansj&gt;</a></span><span class="message">muurkha: if someone wants, why not get that extra path.</span></div><div class="line" id="025246"><span class="nick" style="color:#2e2a4a"><a href="#025246" label="[02:52:46]">&lt;muurkha&gt;</a></span><span class="message">yeah!</span></div><div class="line" id="025315"><span class="nick" style="color:#8dd3c7"><a href="#025315" label="[02:53:15]">&lt;oriansj&gt;</a></span><span class="message">roll your own custom hardware and I might take time to port stage0 to it</span></div><div class="line" id="025419"><span class="nick" style="color:#8dd3c7"><a href="#025419" label="[02:54:19]">&lt;oriansj&gt;</a></span><span class="message">like the Pineapple ONE; a custom computer made out of 7400/5400 chips</span></div><div class="line" id="025442"><span class="nick" style="color:#2e2a4a"><a href="#025442" label="[02:54:42]">&lt;muurkha&gt;</a></span><span class="message">I think the Pineapple ONE is all CMOS, no 7400/5400 TTL</span></div><div class="line" id="025636"><span class="nick" style="color:#8dd3c7"><a href="#025636" label="[02:56:36]">&lt;oriansj&gt;</a></span><span class="message">but the idea of making one's own hardware, toggling in just a little bit of hex and bootstrapping the world.</span></div><div class="line" id="025709"><span class="nick" style="color:#2e2a4a"><a href="#025709" label="[02:57:09]">&lt;muurkha&gt;</a></span><span class="message"> <a rel="nofollow" href="https://hackaday.io/project/178826/components">https://hackaday.io/project/178826/components</a>  is the parts list</span></div><div class="line" id="025751"><span class="nick" style="color:#2e2a4a"><a href="#025751" label="[02:57:51]">&lt;muurkha&gt;</a></span><span class="message">as far as I can tell the only bipolar parts in it are the LEDs and 12 discrete NPN transistors :)</span></div><div class="line" id="025935"><span class="nick" style="color:#8dd3c7"><a href="#025935" label="[02:59:35]">&lt;oriansj&gt;</a></span><span class="message">hopefully one can remove the EEPROM and it'll still be functional</span></div><div class="line" id="030420"><span class="nick" style="color:#8dd3c7"><a href="#030420" label="[03:04:20]">&lt;oriansj&gt;</a></span><span class="message">nope, ALU EEPROM Logic</span></div><div class="line" id="030702"><span class="nick" style="color:#2e2a4a"><a href="#030702" label="[03:07:02]">&lt;muurkha&gt;</a></span><span class="message">that's pretty central, yeah</span></div><div class="line" id="030728"><span class="nick" style="color:#2e2a4a"><a href="#030728" label="[03:07:28]">&lt;muurkha&gt;</a></span><span class="message">you could use an old-fashioned EPROM if you prefer</span></div><div class="line" id="030934"><span class="nick" style="color:#8dd3c7"><a href="#030934" label="[03:09:34]">&lt;oriansj&gt;</a></span><span class="message">I heard of a SERV RISC-V design using 7400 in SERV - RISC-V for a Fistful of Gates - Olof Kindgren, Qamcom Research &amp; Technology-Nh-9xfK8Q1g that it could be done in 153 gates but no details</span></div><div class="line" id="030938"><span class="nick" style="color:#2e2a4a"><a href="#030938" label="[03:09:38]">&lt;muurkha&gt;</a></span><span class="message">actually the 71321 (7132L?) might be bipolar, the datasheet says it uses 5 mW in standby</span></div><div class="line" id="030952"><span class="nick" style="color:#6b8072"><a href="#030952" label="[03:09:52]">&lt;pabs3&gt;</a></span><span class="message">is there a place to see the current status of bootstrap from hex0 up?</span></div><div class="line" id="031015"><span class="nick" style="color:#2e2a4a"><a href="#031015" label="[03:10:15]">&lt;muurkha&gt;</a></span><span class="message">I'd like to see that too!</span></div><div class="line" id="032659"><span class="nick" style="color:#8dd3c7"><a href="#032659" label="[03:26:59]">&lt;oriansj&gt;</a></span><span class="message">pabs3: that would require someone to write up a full and proper bootstrapping tech tree</span></div><div class="line" id="033019"><span class="nick" style="color:#8dd3c7"><a href="#033019" label="[03:30:19]">&lt;oriansj&gt;</a></span><span class="message">and I don't think anyone knows a great many steps past what we have in live-bootstrap</span></div><div class="line" id="034240"><span class="nick" style="color:#8dd3c7"><a href="#034240" label="[03:42:40]">&lt;oriansj&gt;</a></span><span class="message">a great deal thus far has been running into bootstrapping problems we didn't even know existed and then finding a way to overcome them. (Like the Bison bootstrap gap)</span></div><div class="line" id="035411"><span class="nick" style="color:#2e2a4a"><a href="#035411" label="[03:54:11]">&lt;muurkha&gt;</a></span><span class="message">it would be good to have a full and proper tech tree of what we have so far</span></div><div class="line" id="035716"><span class="nick" style="color:#8dd3c7"><a href="#035716" label="[03:57:16]">&lt;oriansj&gt;</a></span><span class="message">muurkha: well we have a partial listing already (it just needs some updating) <a rel="nofollow" href="https://github.com/oriansj/talk-notes/blob/master/live-bootstrap.dot">https://github.com/oriansj/talk-notes/blob/master/live-bootstrap.dot</a>  [generated <a rel="nofollow" href="https://github.com/oriansj/talk-notes/blob/master/live-bootstrap.pdf">https://github.com/oriansj/talk-notes/blob/master/live-bootstrap.pdf</a>  ]</span></div><div class="line" id="045339"><span class="nick" style="color:#6b8072"><a href="#045339" label="[04:53:39]">&lt;pabs3&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/jzimmerman/langcc">https://github.com/jzimmerman/langcc</a>  <a rel="nofollow" href="https://news.ycombinator.com/item?id=32949019">https://news.ycombinator.com/item?id=32949019</a> </span></div><div class="line" id="045423"><span class="nick" style="color:#6b8072"><a href="#045423" label="[04:54:23]">&lt;pabs3&gt;</a></span><span class="message">&quot;langcc is a tool that takes the formal description of a language, in a standard BNF-style format, and automatically generates a compiler front-end, including data structure definitions for the language's abstract syntax trees (AST) and traversals, a lexer, a parser, and a pretty-printer.&quot;</span></div><div class="line" id="045610"><span class="nick" style="color:#2e2a4a"><a href="#045610" label="[04:56:10]">&lt;muurkha&gt;</a></span><span class="message">oriansj: yeah!  I refer to it often but I feel like it needs some detail</span></div><div class="line" id="045619"><span class="nick" style="color:#2e2a4a"><a href="#045619" label="[04:56:19]">&lt;muurkha&gt;</a></span><span class="message">pabs3: langcc looks pretty neat</span></div><div class="line" id="130522"><span class="nick" style="color:#8dd3c7"><a href="#130522" label="[13:05:22]">&lt;oriansj&gt;</a></span><span class="message">pabs3: someone please get a formal description of Haskell for this tool so that we can solve that bootstrapping path already.</span></div><div class="line" id="131038"><span class="nick" style="color:#234e69"><a href="#131038" label="[13:10:38]">&lt;stikonas&gt;</a></span><span class="message">another way is to tell mihi that haskell needs bootstrapping and wait a bit</span></div><div class="line" id="131238"><span class="nick" style="color:#6c3d55"><a href="#131238" label="[13:12:38]">&lt;aggi&gt;</a></span><span class="message">oriansj: quickly checking the dependency graph against bison... there isn't that many crucial packages depending on it</span></div><div class="line" id="131321"><span class="nick" style="color:#234e69"><a href="#131321" label="[13:13:21]">&lt;stikonas&gt;</a></span><span class="message">aggi: that's only because distros don't rebuild pregenerated bison files</span></div><div class="line" id="131327"><span class="nick" style="color:#6c3d55"><a href="#131327" label="[13:13:27]">&lt;aggi&gt;</a></span><span class="message">i keep some separated package-sets, of potential trouble makers, as candidates for removal or replacement</span></div><div class="line" id="131348"><span class="nick" style="color:#6c3d55"><a href="#131348" label="[13:13:48]">&lt;aggi&gt;</a></span><span class="message">stikonas: my reasoning is, to consider removal of builds which haven't got a clean bootstrapping path</span></div><div class="line" id="131422"><span class="nick" style="color:#234e69"><a href="#131422" label="[13:14:22]">&lt;stikonas&gt;</a></span><span class="message">a lot of packages have bison files inside them but when tarball is created, maintainers prebuild .y in .c/.h files and then distros don't add bison as dependency</span></div><div class="line" id="131512"><span class="nick" style="color:#6c3d55"><a href="#131512" label="[13:15:12]">&lt;aggi&gt;</a></span><span class="message">i will be tracking this with gentoo-portage, and blacklist bison (virtual/yacc), and then move all builds into a package set named GNU</span></div><div class="line" id="131533"><span class="nick" style="color:#234e69"><a href="#131533" label="[13:15:33]">&lt;stikonas&gt;</a></span><span class="message">e.g. even coreutils use bison</span></div><div class="line" id="131552"><span class="nick" style="color:#8dd3c7"><a href="#131552" label="[13:15:52]">&lt;oriansj&gt;</a></span><span class="message">stikonas: true but having mihi work on anything feels like cheating because mihi is so good at solving these bootstrapping mountains.</span></div><div class="line" id="131602"><span class="nick" style="color:#234e69"><a href="#131602" label="[13:16:02]">&lt;stikonas&gt;</a></span><span class="message">though you wouldn't see that in coreutils dependency graph in Gentoo</span></div><div class="line" id="131611"><span class="nick" style="color:#6c3d55"><a href="#131611" label="[13:16:11]">&lt;aggi&gt;</a></span><span class="message">yes... reminder, hence i prepare for a seccond system profile: tcc-toolchain-only/toybox-userspace/kernel-2.4 etc...</span></div><div class="line" id="131643"><span class="nick" style="color:#234e69"><a href="#131643" label="[13:16:43]">&lt;stikonas&gt;</a></span><span class="message">anyway, we'll hopefully have autogen in live-bootstrap soon</span></div><div class="line" id="131720"><span class="nick" style="color:#6c3d55"><a href="#131720" label="[13:17:20]">&lt;aggi&gt;</a></span><span class="message">hopefully i can fully remove autotools/automake etc soon, just noted bison (virtual/yacc) too on the hitlist</span></div><div class="line" id="131736"><span class="nick" style="color:#234e69"><a href="#131736" label="[13:17:36]">&lt;stikonas&gt;</a></span><span class="message">I've cleaned up some issues (musl, some scripting variables, etc) in mihi's gnu-autogen-bootstrap and got stage1 autogen built. Trying to rebuild stage2 now</span></div><div class="line" id="131924"><span class="nick" style="color:#6c3d55"><a href="#131924" label="[13:19:24]">&lt;aggi&gt;</a></span><span class="message">there's still some problems remaining, with lua and tcc-toolchain btw. (oasis linux package manager requires lua, and vis-editor integration with lua seems desireable too)</span></div><div class="line" id="132040"><span class="nick" style="color:#6c3d55"><a href="#132040" label="[13:20:40]">&lt;aggi&gt;</a></span><span class="message">and it will be interesting to see, what will be removed from the tcc-toolchain devdrop build, once i blacklisted bison/yacc</span></div><div class="line" id="132214"><span class="nick" style="color:#8dd3c7"><a href="#132214" label="[13:22:14]">&lt;oriansj&gt;</a></span><span class="message">aggi: not much unless you pull out the pregenerated files</span></div><div class="line" id="132310"><span class="nick" style="color:#234e69"><a href="#132310" label="[13:23:10]">&lt;stikonas&gt;</a></span><span class="message">you mean keep pregenerated files in?</span></div><div class="line" id="132404"><span class="nick" style="color:#6c3d55"><a href="#132404" label="[13:24:04]">&lt;aggi&gt;</a></span><span class="message">some direct dependencies against bison/yacc i see already: iproute2, gawk, some noteworthy wreckage surrounding net-libs/libpcap</span></div><div class="line" id="132415"><span class="nick" style="color:#6c3d55"><a href="#132415" label="[13:24:15]">&lt;aggi&gt;</a></span><span class="message">and the following indrect dependencies</span></div><div class="line" id="132421"><span class="nick" style="color:#234e69"><a href="#132421" label="[13:24:21]">&lt;stikonas&gt;</a></span><span class="message">it's a fairly narrow path if you want to avoid pre-generated files (as seen in live-bootstrap), right now we even had to combined GPL and CDDL which is not ideal...</span></div><div class="line" id="132436"><span class="nick" style="color:#8dd3c7"><a href="#132436" label="[13:24:36]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well gentoo doesn't currently strip pregenerated files from tarballs as far as I can tell.</span></div><div class="line" id="132447"><span class="nick" style="color:#234e69"><a href="#132447" label="[13:24:47]">&lt;stikonas&gt;</a></span><span class="message">oriansj: no, it doesn't, as far as I know nobody does</span></div><div class="line" id="132500"><span class="nick" style="color:#234e69"><a href="#132500" label="[13:25:00]">&lt;stikonas&gt;</a></span><span class="message">guix doesn't do that either</span></div><div class="line" id="132504"><span class="nick" style="color:#234e69"><a href="#132504" label="[13:25:04]">&lt;stikonas&gt;</a></span><span class="message">live-bootstrap was the first project to do that</span></div><div class="line" id="132514"><span class="nick" style="color:#8dd3c7"><a href="#132514" label="[13:25:14]">&lt;oriansj&gt;</a></span><span class="message">stikonas: you do as much as possible in live-bootstrap and that is amazing to see.</span></div><div class="line" id="132528"><span class="nick" style="color:#6c3d55"><a href="#132528" label="[13:25:28]">&lt;aggi&gt;</a></span><span class="message">i am aware of the fact, occasionally some BDEPS aren't completely tracked (noticed when fully removing gettext and libtool)</span></div><div class="line" id="132553"><span class="nick" style="color:#234e69"><a href="#132553" label="[13:25:53]">&lt;stikonas&gt;</a></span><span class="message">well, this is more about what is BDEP</span></div><div class="line" id="132628"><span class="nick" style="color:#234e69"><a href="#132628" label="[13:26:28]">&lt;stikonas&gt;</a></span><span class="message">you can define them weakly, i.e. minimal set of packages needed for build to complete which is what most distros use</span></div><div class="line" id="132639"><span class="nick" style="color:#6c3d55"><a href="#132639" label="[13:26:39]">&lt;aggi&gt;</a></span><span class="message">ok, there's much work to do, concerned with bison it seems; i'll not remove that from the gcc47 profile of cause</span></div><div class="line" id="132651"><span class="nick" style="color:#6c3d55"><a href="#132651" label="[13:26:51]">&lt;aggi&gt;</a></span><span class="message">however, i'll track bison for removal with the tcc-toolchain profile</span></div><div class="line" id="132704"><span class="nick" style="color:#234e69"><a href="#132704" label="[13:27:04]">&lt;stikonas&gt;</a></span><span class="message">or more strong definition: set of packages needed to rebuild everything from real source (i.e. don't use files that are not human-written)</span></div><div class="line" id="132747"><span class="nick" style="color:#6c3d55"><a href="#132747" label="[13:27:47]">&lt;aggi&gt;</a></span><span class="message">if you remember, the proposed strategy, to freeze/archive what i got with gcc47/c-only, and rebuild tcc-toolchain profile from scratch</span></div><div class="line" id="132823"><span class="nick" style="color:#6c3d55"><a href="#132823" label="[13:28:23]">&lt;aggi&gt;</a></span><span class="message">together with a roll-back strategy, including linux-2.4, mes-libc tcc-assembler issues etc.</span></div><div class="line" id="132831"><span class="nick" style="color:#6c3d55"><a href="#132831" label="[13:28:31]">&lt;aggi&gt;</a></span><span class="message">the linux-2.4 is another noteworthy problem</span></div><div class="line" id="132846"><span class="nick" style="color:#6c3d55"><a href="#132846" label="[13:28:46]">&lt;aggi&gt;</a></span><span class="message">ok, thanks for listening</span></div><div class="line" id="133017"><span class="nick" style="color:#234e69"><a href="#133017" label="[13:30:17]">&lt;stikonas&gt;</a></span><span class="message">yes, building linux-2.4 with tcc will be non-trivial</span></div><div class="line" id="133044"><span class="nick" style="color:#234e69"><a href="#133044" label="[13:30:44]">&lt;stikonas&gt;</a></span><span class="message">though perhaps using other kernel makes more sense</span></div><div class="line" id="133101"><span class="nick" style="color:#234e69"><a href="#133101" label="[13:31:01]">&lt;stikonas&gt;</a></span><span class="message">given how far builder-hex0 could take us...</span></div><div class="line" id="133121"><span class="nick" style="color:#6c3d55"><a href="#133121" label="[13:31:21]">&lt;aggi&gt;</a></span><span class="message">i am following this reasing with great interest, of cause</span></div><div class="line" id="133135"><span class="nick" style="color:#8dd3c7"><a href="#133135" label="[13:31:35]">&lt;oriansj&gt;</a></span><span class="message">well that depends if Linux built by TCC is easier than writing/finding a kernel that TCC can build that is good enough to run GCC to do the Linux build.</span></div><div class="line" id="133211"><span class="nick" style="color:#6c3d55"><a href="#133211" label="[13:32:11]">&lt;aggi&gt;</a></span><span class="message">and with this i propose another approach: GNU-toolchain removal</span></div><div class="line" id="133222"><span class="nick" style="color:#6c3d55"><a href="#133222" label="[13:32:22]">&lt;aggi&gt;</a></span><span class="message">together with GNU-buildsystem removal</span></div><div class="line" id="133421"><span class="nick" style="color:#6c3d55"><a href="#133421" label="[13:34:21]">&lt;aggi&gt;</a></span><span class="message">because, as soon as any of this is required, the entire dependency graph blows up, beyond good and evil, rather early during bootstrapping and toolchain-maintenance</span></div><div class="line" id="133521"><span class="nick" style="color:#6c3d55"><a href="#133521" label="[13:35:21]">&lt;aggi&gt;</a></span><span class="message">hence, instead of considering GNU mandatory, i consider it optional, and tcc-toolchain support with _everything_ being mandatory, including any kernel</span></div><div class="line" id="133522"><span class="nick" style="color:#6c3d55"><a href="#133522" label="[13:35:22]">&lt;aggi&gt;</a></span><span class="message">and libc</span></div><div class="line" id="133702"><span class="nick" style="color:#8dd3c7"><a href="#133702" label="[13:37:02]">&lt;oriansj&gt;</a></span><span class="message">aggi: well finding an alternate kernel that TCC can build that is capable or running GCC would certainly give you that option.</span></div><div class="line" id="133725"><span class="nick" style="color:#6c3d55"><a href="#133725" label="[13:37:25]">&lt;aggi&gt;</a></span><span class="message">oriansj: i think, with tcc and linux-2.4, we got that</span></div><div class="line" id="133735"><span class="nick" style="color:#6c3d55"><a href="#133735" label="[13:37:35]">&lt;aggi&gt;</a></span><span class="message">i hope</span></div><div class="line" id="133754"><span class="nick" style="color:#6c3d55"><a href="#133754" label="[13:37:54]">&lt;aggi&gt;</a></span><span class="message">for x86/64 at least</span></div><div class="line" id="133814"><span class="nick" style="color:#234e69"><a href="#133814" label="[13:38:14]">&lt;stikonas&gt;</a></span><span class="message">yes, but linux-2.4 is no-go for live-bootstrap because of blobs</span></div><div class="line" id="133829"><span class="nick" style="color:#234e69"><a href="#133829" label="[13:38:29]">&lt;stikonas&gt;</a></span><span class="message">we can't run deblob on it to get linux-libre</span></div><div class="line" id="133841"><span class="nick" style="color:#6c3d55"><a href="#133841" label="[13:38:41]">&lt;aggi&gt;</a></span><span class="message">ok, this is what i currently do with linux-5.10, deblob</span></div><div class="line" id="133900"><span class="nick" style="color:#6c3d55"><a href="#133900" label="[13:39:00]">&lt;aggi&gt;</a></span><span class="message">i don't know yet, how much dirt is hiding inside linux-2.4</span></div><div class="line" id="133905"><span class="nick" style="color:#234e69"><a href="#133905" label="[13:39:05]">&lt;stikonas&gt;</a></span><span class="message">probably more</span></div><div class="line" id="133908"><span class="nick" style="color:#8dd3c7"><a href="#133908" label="[13:39:08]">&lt;oriansj&gt;</a></span><span class="message">aggi: well we don't know until someone seriously looks into it and as stikonas pointed out, there are also known issues that need addressing.</span></div><div class="line" id="134035"><span class="nick" style="color:#8dd3c7"><a href="#134035" label="[13:40:35]">&lt;oriansj&gt;</a></span><span class="message">but with some experimenting, research and a little luck we might figure out what we need to go forward; otherwise we might just end up having to do a kernel too...</span></div><div class="line" id="134046"><span class="nick" style="color:#8dd3c7"><a href="#134046" label="[13:40:46]">&lt;oriansj&gt;</a></span><span class="message">In C this time, of course</span></div><div class="line" id="134126"><span class="nick" style="color:#6c3d55"><a href="#134126" label="[13:41:26]">&lt;aggi&gt;</a></span><span class="message">kernel is a huge task, sufficient hardware-support is, almost, impossible</span></div><div class="line" id="134207"><span class="nick" style="color:#6c3d55"><a href="#134207" label="[13:42:07]">&lt;aggi&gt;</a></span><span class="message">because, that's why, i hit a brickwall, whenever i see closed-source hardware _only_; ao486 is still there, as a proof-of-concept at least</span></div><div class="line" id="134241"><span class="nick" style="color:#8dd3c7"><a href="#134241" label="[13:42:41]">&lt;oriansj&gt;</a></span><span class="message">aggi: we also get to be selective in what hardware we need to support and do support which should reduce the problem space a good bit</span></div><div class="line" id="134332"><span class="nick" style="color:#8dd3c7"><a href="#134332" label="[13:43:32]">&lt;oriansj&gt;</a></span><span class="message">and with some help we can start making more hardware options.</span></div><div class="line" id="134410"><span class="nick" style="color:#8dd3c7"><a href="#134410" label="[13:44:10]">&lt;oriansj&gt;</a></span><span class="message">yes, things might be less than ideal now but I know we can forge a better path forward together.</span></div><div class="line" id="134433"><span class="nick" style="color:#6c3d55"><a href="#134433" label="[13:44:33]">&lt;aggi&gt;</a></span><span class="message">another one i considered, j-core.org, with this, tcc-toolchain is missing SH2, alot of development effort required, for hardware which is, practically, not available</span></div><div class="line" id="134509"><span class="nick" style="color:#6c3d55"><a href="#134509" label="[13:45:09]">&lt;aggi&gt;</a></span><span class="message">with ao486, it may not be the optimal choice, for FPGA deployment... nonetheless, currently it's probably the only practically useful option remaining</span></div><div class="line" id="134621"><span class="nick" style="color:#6c3d55"><a href="#134621" label="[13:46:21]">&lt;aggi&gt;</a></span><span class="message">and, x86, is relatively, cost-effective, if the FPGA realm is excluded from the reasoning</span></div><div class="line" id="134700"><span class="nick" style="color:#6c3d55"><a href="#134700" label="[13:47:00]">&lt;aggi&gt;</a></span><span class="message">thanks, for listening.</span></div><div class="line" id="135153"><span class="nick" style="color:#d9d9d9"><a href="#135153" label="[13:51:53]">&lt;mihi&gt;</a></span><span class="message">stikonas, to be fair that also works the other way around (I think I was the first person who mentioned here I'd love to see M2-Planet on UEFI shell)</span></div><div class="line" id="135257"><span class="nick" style="color:#d9d9d9"><a href="#135257" label="[13:52:57]">&lt;mihi&gt;</a></span><span class="message">but before I'd touch Haskell, I'd rather look at Ada / GNAT or at Oberon (as muurkha suggested), but for Oberon I would try to avoid C altogether (bootstrap a subset of the Oberon compiler directly from hex/assembly)</span></div><div class="line" id="135326"><span class="nick" style="color:#d9d9d9"><a href="#135326" label="[13:53:26]">&lt;mihi&gt;</a></span><span class="message">not that I'm planning to do any of these things soon.</span></div><div class="line" id="135409"><span class="nick" style="color:#8dd3c7"><a href="#135409" label="[13:54:09]">&lt;oriansj&gt;</a></span><span class="message">fair and thank you for being awesome ^_^</span></div><div class="line" id="135437"><span class="nick" style="color:#d9d9d9"><a href="#135437" label="[13:54:37]">&lt;mihi&gt;</a></span><span class="message">oriansj, not to forget which awesome person have us stage0 to get this all started</span></div><div class="line" id="135523"><span class="nick" style="color:#d9d9d9"><a href="#135523" label="[13:55:23]">&lt;mihi&gt;</a></span><span class="message">s/have/gave/</span></div><div class="line" id="135646"><span class="nick" style="color:#d9d9d9"><a href="#135646" label="[13:56:46]">&lt;mihi&gt;</a></span><span class="message">if you want to bootstrap Oberon from C, I believe it is possible to compile norebo (an Oberon compiler that runs on top of POSIX) with obnc, and then compile Wirth's single pass compiler with it.</span></div><div class="line" id="135803"><span class="nick" style="color:#8dd3c7"><a href="#135803" label="[13:58:03]">&lt;oriansj&gt;</a></span><span class="message">mihi: interesting, I would have started from the other direction. Getting hex0 to run on Oberon and bootstrapping up to M2-Planet and adding Oberon support to M2libc</span></div><div class="line" id="140242"><span class="nick" style="color:#8dd3c7"><a href="#140242" label="[14:02:42]">&lt;oriansj&gt;</a></span><span class="message">hmm Isn't Oberon both a Language and a Kernel</span></div><div class="line" id="140525"><span class="nick" style="color:#bc80bd"><a href="#140525" label="[14:05:25]">&lt;unmatched-paren&gt;</a></span><span class="message">oriansj: I think it's also hardware, not sure</span></div><div class="line" id="140552"><span class="nick" style="color:#8dd3c7"><a href="#140552" label="[14:05:52]">&lt;oriansj&gt;</a></span><span class="message">so what is ment by bootstrappping Oberon might need clarification. (is one bootstrapping the kernel, or the language or hardware)</span></div><div class="line" id="140555"><span class="nick" style="color:#bc80bd"><a href="#140555" label="[14:05:55]">&lt;unmatched-paren&gt;</a></span><span class="message">hmm, no</span></div><div class="line" id="140622"><span class="nick" style="color:#bc80bd"><a href="#140622" label="[14:06:22]">&lt;unmatched-paren&gt;</a></span><span class="message">there's no hardware, it seems. might be remembering something else</span></div><div class="line" id="140643"><span class="nick" style="color:#8dd3c7"><a href="#140643" label="[14:06:43]">&lt;oriansj&gt;</a></span><span class="message">probably the Ceres (workstation)</span></div><div class="line" id="140700"><span class="nick" style="color:#8dd3c7"><a href="#140700" label="[14:07:00]">&lt;oriansj&gt;</a></span><span class="message">or maybe the Lilith (computer)</span></div><div class="line" id="142349"><span class="nick" style="color:#8dd3c7"><a href="#142349" label="[14:23:49]">&lt;oriansj&gt;</a></span><span class="message">although recently I saw this: <a rel="nofollow" href="https://portal.mozz.us/gemini/gemini.ctrl-c.club/~stack/gemlog/2022-08-29.oberon.gmi">https://portal.mozz.us/gemini/gemini.ctrl-c.club/~stack/gemlog/2022-08-29.oberon.gmi</a> </span></div><div class="line" id="142921"><span class="nick" style="color:#8dd3c7"><a href="#142921" label="[14:29:21]">&lt;oriansj&gt;</a></span><span class="message">or for those of you who prefer gemini: gemini://gemini.ctrl-c.club/~stack/gemlog/2022-08-29.oberon.gmi</span></div><div class="line" id="143518"><span class="nick" style="color:#8dd3c7"><a href="#143518" label="[14:35:18]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: there is also the oberon station <a rel="nofollow" href="https://pcper.com/2015/12/meet-the-oberonstation-kid-friendly-and-powered-with-the-son-of-pascal/">https://pcper.com/2015/12/meet-the-oberonstation-kid-friendly-and-powered-with-the-son-of-pascal/</a> </span></div><div class="line" id="144744"><span class="nick" style="color:#234e69"><a href="#144744" label="[14:47:44]">&lt;stikonas&gt;</a></span><span class="message">yeah, I'll go back to working on M2-Planet on UEFI once I'm done with autogen and live-bootstrap (or actually still need to fix M0)</span></div><div class="line" id="145009"><span class="nick" style="color:#234e69"><a href="#145009" label="[14:50:09]">&lt;stikonas&gt;</a></span><span class="message">right now hitting some small issues rebuilding stage2 autogen (actually autogen itself, and colums have successfully rebuilt), probably due to change of prefix from build dir in gnu-autogen-bootstrap to /usr</span></div><div class="line" id="145121"><span class="nick" style="color:#d9d9d9"><a href="#145121" label="[14:51:21]">&lt;mihi&gt;</a></span><span class="message">oriansj, the Oberon system consists of the kernel, runtime system (garbage collector, backtrace decoder, ...), language, GUI, and compiler. Some also treat Wirth's RISC5 processor as part of it, but it has also been ported on other architectures.</span></div><div class="line" id="145224"><span class="nick" style="color:#d9d9d9"><a href="#145224" label="[14:52:24]">&lt;mihi&gt;</a></span><span class="message">So after having bootstrapped M2-Planet on the Oberon kernel, you'd have a subset of a C compiler and a Scheme interpreter, but not much to compile/interpret with, as the whole system is written in Oberon (including the Kernel for RISC5; kernels for other platforms are written in Oberon and assembly).</span></div><div class="line" id="145336"><span class="nick" style="color:#6c3d55"><a href="#145336" label="[14:53:36]">&lt;aggi&gt;</a></span><span class="message">stikonas: not sure, what autogen is required for and how it is relevant to bootstrapping, with the gcc47/GNU profile here, it isn't noted anywhere as BDEP nor RDEP</span></div><div class="line" id="145340"><span class="nick" style="color:#d9d9d9"><a href="#145340" label="[14:53:40]">&lt;mihi&gt;</a></span><span class="message">so you'd still have to port/rewrite the Oberon compiler in another language, or port obnc (the Oberon compiler written iN C) so that it can run on the Oberon system.</span></div><div class="line" id="145412"><span class="nick" style="color:#234e69"><a href="#145412" label="[14:54:12]">&lt;stikonas&gt;</a></span><span class="message">aggi: that's because again, distros don't rebuild pre-generated files</span></div><div class="line" id="145432"><span class="nick" style="color:#234e69"><a href="#145432" label="[14:54:32]">&lt;stikonas&gt;</a></span><span class="message">aggi: gcc's top-level Makefile.in is not human written</span></div><div class="line" id="145437"><span class="nick" style="color:#234e69"><a href="#145437" label="[14:54:37]">&lt;stikonas&gt;</a></span><span class="message">and it's not autotools</span></div><div class="line" id="145443"><span class="nick" style="color:#234e69"><a href="#145443" label="[14:54:43]">&lt;stikonas&gt;</a></span><span class="message">it's templated using autogen</span></div><div class="line" id="145456"><span class="nick" style="color:#6c3d55"><a href="#145456" label="[14:54:56]">&lt;aggi&gt;</a></span><span class="message">that's why i am asking, what is generated by autogen, and how much this would impact</span></div><div class="line" id="145508"><span class="nick" style="color:#d9d9d9"><a href="#145508" label="[14:55:08]">&lt;mihi&gt;</a></span><span class="message">aggi: <a rel="nofollow" href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=Makefile.in;h=1919dfee8294e8b9d7719548189788327438b87e;hb=HEAD#l2">https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=Makefile.in;h=1919dfee8294e8b9d7719548189788327438b87e;hb=HEAD#l2</a> </span></div><div class="line" id="145535"><span class="nick" style="color:#6c3d55"><a href="#145535" label="[14:55:35]">&lt;aggi&gt;</a></span><span class="message">stikonas: meaning then, if i remove GNU buildsystem entirely (autotols, automake), then chances are no direct or indirect dependency remains against autogen</span></div><div class="line" id="145543"><span class="nick" style="color:#234e69"><a href="#145543" label="[14:55:43]">&lt;stikonas&gt;</a></span><span class="message">(there are other places where it is used but gcc is the main thing)</span></div><div class="line" id="145550"><span class="nick" style="color:#234e69"><a href="#145550" label="[14:55:50]">&lt;stikonas&gt;</a></span><span class="message">gnutls too but I guess you removed it</span></div><div class="line" id="145559"><span class="nick" style="color:#6c3d55"><a href="#145559" label="[14:55:59]">&lt;aggi&gt;</a></span><span class="message">long time ago, yes</span></div><div class="line" id="145616"><span class="nick" style="color:#234e69"><a href="#145616" label="[14:56:16]">&lt;stikonas&gt;</a></span><span class="message">autogen is not used that much but we need it for rebuilding Makefile.in in gcc</span></div><div class="line" id="145742"><span class="nick" style="color:#234e69"><a href="#145742" label="[14:57:42]">&lt;stikonas&gt;</a></span><span class="message">mihi: you had no issues with build-aux/run-ag.sh?</span></div><div class="line" id="145847"><span class="nick" style="color:#234e69"><a href="#145847" label="[14:58:47]">&lt;stikonas&gt;</a></span><span class="message">somehow it's exiting for me with exit code 2</span></div><div class="line" id="145854"><span class="nick" style="color:#234e69"><a href="#145854" label="[14:58:54]">&lt;stikonas&gt;</a></span><span class="message">top_builddir=&quot;..&quot; top_srcdir=&quot;..&quot; VERBOSE=&quot;&quot; /bin/sh &quot;../build-aux/run-ag.sh&quot; -MF.deps/opts-dep.mk -MTstamp-opts -MP ./opts.def</span></div><div class="line" id="145854"><span class="nick" style="color:#234e69"><a href="#145854" label="[14:58:54]">&lt;stikonas&gt;</a></span><span class="message">in getdefs directory</span></div><div class="line" id="150107"><span class="nick" style="color:#d9d9d9"><a href="#150107" label="[15:01:07]">&lt;mihi&gt;</a></span><span class="message">I recall it does not like relative paths in any env variables, but I don't remember actually run-ag.sh. Does it help when you do top_builddir=&quot;$(PWD)/..&quot;  etc?</span></div><div class="line" id="150138"><span class="nick" style="color:#234e69"><a href="#150138" label="[15:01:38]">&lt;stikonas&gt;</a></span><span class="message">hmm, no...</span></div><div class="line" id="150147"><span class="nick" style="color:#234e69"><a href="#150147" label="[15:01:47]">&lt;stikonas&gt;</a></span><span class="message">well, I'll dig in</span></div><div class="line" id="150209"><span class="nick" style="color:#234e69"><a href="#150209" label="[15:02:09]">&lt;stikonas&gt;</a></span><span class="message">and if I can't figure it out, we can always add DESTDIR support to make install in bootstrapping scripts...</span></div><div class="line" id="150250"><span class="nick" style="color:#d9d9d9"><a href="#150250" label="[15:02:50]">&lt;mihi&gt;</a></span><span class="message">also, some of the autogen bootstrap scripts tend to drop logfiles in /tmp. So clear this out and look if anything got dropped there.</span></div><div class="line" id="150319"><span class="nick" style="color:#234e69"><a href="#150319" label="[15:03:19]">&lt;stikonas&gt;</a></span><span class="message">oh yes, I can see some error log</span></div><div class="line" id="150328"><span class="nick" style="color:#234e69"><a href="#150328" label="[15:03:28]">&lt;stikonas&gt;</a></span><span class="message">that might be useful</span></div><div class="line" id="150422"><span class="nick" style="color:#234e69"><a href="#150422" label="[15:04:22]">&lt;stikonas&gt;</a></span><span class="message">I can actually see the command that is failing</span></div><div class="line" id="150518"><span class="nick" style="color:#234e69"><a href="#150518" label="[15:05:18]">&lt;stikonas&gt;</a></span><span class="message">ok, the failing command was</span></div><div class="line" id="150521"><span class="nick" style="color:#234e69"><a href="#150521" label="[15:05:21]">&lt;stikonas&gt;</a></span><span class="message"> /usr/src/autogen-5.18.16/build/autogen-5.18.16/agen5/autogen -L/usr/src/autogen-5.18.16/build/autogen-5.18.16/getdefs/../autoopts/tpl -MF.deps/opts-dep.mk -MTstamp-opts -MP ./opts.def</span></div><div class="line" id="150525"><span class="nick" style="color:#234e69"><a href="#150525" label="[15:05:25]">&lt;stikonas&gt;</a></span><span class="message">and  to fix it I can do</span></div><div class="line" id="150537"><span class="nick" style="color:#234e69"><a href="#150537" label="[15:05:37]">&lt;stikonas&gt;</a></span><span class="message"> /usr/src/autogen-5.18.16/build/autogen-5.18.16/agen5/autogen -L/usr/src/autogen-5.18.16/build/autogen-5.18.16/getdefs/../autoopts/tpl -L/usr/lib/autogen -MF.deps/opts-dep.mk -MTstamp-opts -MP ./opts.def</span></div><div class="line" id="150547"><span class="nick" style="color:#234e69"><a href="#150547" label="[15:05:47]">&lt;stikonas&gt;</a></span><span class="message">sed should be able to solve that</span></div><div class="line" id="150733"><span class="nick" style="color:#d9d9d9"><a href="#150733" label="[15:07:33]">&lt;mihi&gt;</a></span><span class="message">hmm, not sure which file it is actually missing. the stamp-opts.tpl should be in .../autoopts/tpl?</span></div><div class="line" id="150912"><span class="nick" style="color:#d9d9d9"><a href="#150912" label="[15:09:12]">&lt;mihi&gt;</a></span><span class="message">stage1 autogen's searchpath is rather short. it looks in LIBDATADIR (value at compile time), and in the -L paths. It does not check runtime environment variables.</span></div><div class="line" id="150933"><span class="nick" style="color:#d9d9d9"><a href="#150933" label="[15:09:33]">&lt;mihi&gt;</a></span><span class="message">but I did not need this, either.</span></div><div class="line" id="151013"><span class="nick" style="color:#d9d9d9"><a href="#151013" label="[15:10:13]">&lt;mihi&gt;</a></span><span class="message">setting LIBDATADIR to /usr/lib/autogen when compiling stage1 might be worth trying.</span></div><div class="line" id="151026"><span class="nick" style="color:#234e69"><a href="#151026" label="[15:10:26]">&lt;stikonas&gt;</a></span><span class="message">ok, I can try that too</span></div><div class="line" id="151052"><span class="nick" style="color:#234e69"><a href="#151052" label="[15:10:52]">&lt;stikonas&gt;</a></span><span class="message">no, LIBDATADIR does not help...</span></div><div class="line" id="151055"><span class="nick" style="color:#d9d9d9"><a href="#151055" label="[15:10:55]">&lt;mihi&gt;</a></span><span class="message">or, where did you move the bootstrapped tpl-config.tlib?</span></div><div class="line" id="151058"><span class="nick" style="color:#234e69"><a href="#151058" label="[15:10:58]">&lt;stikonas&gt;</a></span><span class="message">stagen...</span></div><div class="line" id="151105"><span class="nick" style="color:#234e69"><a href="#151105" label="[15:11:05]">&lt;stikonas&gt;</a></span><span class="message">I moved it to /usr/lib/autogen</span></div><div class="line" id="151130"><span class="nick" style="color:#234e69"><a href="#151130" label="[15:11:30]">&lt;stikonas&gt;</a></span><span class="message">and before moving it I ran</span></div><div class="line" id="151131"><span class="nick" style="color:#234e69"><a href="#151131" label="[15:11:31]">&lt;stikonas&gt;</a></span><span class="message">sed 's#/usr/src/autogen-5.18.16/build/gnu-autogen-bootstrapping-autogen-5.18.16-v1.0/build/stage1#/usr#' build/stage1/lib/autogen/tpl-config.tli</span></div><div class="line" id="151138"><span class="nick" style="color:#d9d9d9"><a href="#151138" label="[15:11:38]">&lt;mihi&gt;</a></span><span class="message">and what value is LIBDATADIR in <a rel="nofollow" href="https://github.com/schierlm/gnu-autogen-bootstrapping/blob/main/bootstrap_tarball.sh#L155">https://github.com/schierlm/gnu-autogen-bootstrapping/blob/main/bootstrap_tarball.sh#L155</a> </span></div><div class="line" id="151218"><span class="nick" style="color:#234e69"><a href="#151218" label="[15:12:18]">&lt;stikonas&gt;</a></span><span class="message">well, it's pointing to that temp build directory/stage1/...</span></div><div class="line" id="151239"><span class="nick" style="color:#d9d9d9"><a href="#151239" label="[15:12:39]">&lt;mihi&gt;</a></span><span class="message">and tpl-config.lib is also there?</span></div><div class="line" id="151243"><span class="nick" style="color:#234e69"><a href="#151243" label="[15:12:43]">&lt;stikonas&gt;</a></span><span class="message">oh, so maybe I should adjust that one?</span></div><div class="line" id="151258"><span class="nick" style="color:#234e69"><a href="#151258" label="[15:12:58]">&lt;stikonas&gt;</a></span><span class="message">instead adding -L options...</span></div><div class="line" id="151304"><span class="nick" style="color:#d9d9d9"><a href="#151304" label="[15:13:04]">&lt;mihi&gt;</a></span><span class="message">the tlib needs to be in the LIBDATADIR, also the license header files.</span></div><div class="line" id="151329"><span class="nick" style="color:#234e69"><a href="#151329" label="[15:13:29]">&lt;stikonas&gt;</a></span><span class="message">ok, let me try that</span></div><div class="line" id="151337"><span class="nick" style="color:#234e69"><a href="#151337" label="[15:13:37]">&lt;stikonas&gt;</a></span><span class="message">though surprisingly I hit very few issues</span></div><div class="line" id="151344"><span class="nick" style="color:#234e69"><a href="#151344" label="[15:13:44]">&lt;stikonas&gt;</a></span><span class="message">one before this one</span></div><div class="line" id="151405"><span class="nick" style="color:#d9d9d9"><a href="#151405" label="[15:14:05]">&lt;mihi&gt;</a></span><span class="message">you did not check/compile the generated files yet :)</span></div><div class="line" id="151426"><span class="nick" style="color:#d9d9d9"><a href="#151426" label="[15:14:26]">&lt;mihi&gt;</a></span><span class="message">missing tlib sometimes just creates uncompilable c code.</span></div><div class="line" id="151439"><span class="nick" style="color:#234e69"><a href="#151439" label="[15:14:39]">&lt;stikonas&gt;</a></span><span class="message">well, as a workaround I moved old tlib back</span></div><div class="line" id="151445"><span class="nick" style="color:#234e69"><a href="#151445" label="[15:14:45]">&lt;stikonas&gt;</a></span><span class="message"> cp &quot;${PREFIX}/lib/autogen/tpl-config.tlib&quot; autoopts/tpl/tpl-config.tlib</span></div><div class="line" id="151449"><span class="nick" style="color:#234e69"><a href="#151449" label="[15:14:49]">&lt;stikonas&gt;</a></span><span class="message">before stage2</span></div><div class="line" id="151502"><span class="nick" style="color:#234e69"><a href="#151502" label="[15:15:02]">&lt;stikonas&gt;</a></span><span class="message">but I think setting LIBDATADIR to /usr/lib/autogen is better</span></div><div class="line" id="151526"><span class="nick" style="color:#3c5b35"><a href="#151526" label="[15:15:26]">*</a></span><span class="message">mihi is not sure if every autogen call that needs tlib includes -Lautoopts/tpl</span></div><div class="line" id="151549"><span class="nick" style="color:#d9d9d9"><a href="#151549" label="[15:15:49]">&lt;mihi&gt;</a></span><span class="message">but yeah, set LIBDATADIR to wherever you place tlib and lic files.</span></div><div class="line" id="151608"><span class="nick" style="color:#234e69"><a href="#151608" label="[15:16:08]">&lt;stikonas&gt;</a></span><span class="message">apparently most of them do, that's why I only hit a couple of issues</span></div><div class="line" id="151614"><span class="nick" style="color:#234e69"><a href="#151614" label="[15:16:14]">&lt;stikonas&gt;</a></span><span class="message">but it's a bit hacky</span></div><div class="line" id="151616"><span class="nick" style="color:#d9d9d9"><a href="#151616" label="[15:16:16]">&lt;mihi&gt;</a></span><span class="message">make install will overwrite them in FINALPREFIX anyway.</span></div><div class="line" id="151702"><span class="nick" style="color:#234e69"><a href="#151702" label="[15:17:02]">&lt;stikonas&gt;</a></span><span class="message">well, live-bootstrap first installs stuff into /tmp/destdir and then moves to /usr</span></div><div class="line" id="151729"><span class="nick" style="color:#234e69"><a href="#151729" label="[15:17:29]">&lt;stikonas&gt;</a></span><span class="message">so if make install does not respect that, FINALPREFIX wouldn't help</span></div><div class="line" id="151734"><span class="nick" style="color:#234e69"><a href="#151734" label="[15:17:34]">&lt;stikonas&gt;</a></span><span class="message">anyway, let me try with LIBDIR</span></div><div class="line" id="151740"><span class="nick" style="color:#234e69"><a href="#151740" label="[15:17:40]">&lt;stikonas&gt;</a></span><span class="message">it sounds like it might solve all issues</span></div><div class="line" id="151800"><span class="nick" style="color:#d9d9d9"><a href="#151800" label="[15:18:00]">&lt;mihi&gt;</a></span><span class="message">then make sure to move the final tlib to /usr, if you already placed the &quot;half-bootstrapped&quot; tlib there. I'd like it not to put temporary bootstrap files into final directories.</span></div><div class="line" id="151830"><span class="nick" style="color:#d9d9d9"><a href="#151830" label="[15:18:30]">&lt;mihi&gt;</a></span><span class="message">that's why I put the tlib in stage1 subdirectory, next to stage1 binaries.</span></div><div class="line" id="151847"><span class="nick" style="color:#d9d9d9"><a href="#151847" label="[15:18:47]">&lt;mihi&gt;</a></span><span class="message">and make LIBDATADIR for stage1 point there.</span></div><div class="line" id="151901"><span class="nick" style="color:#d9d9d9"><a href="#151901" label="[15:19:01]">&lt;mihi&gt;</a></span><span class="message">but ymmv :)</span></div><div class="line" id="151903"><span class="nick" style="color:#80b1d3"><a href="#151903" label="[15:19:03]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, I was planning to make 2 ackages</span></div><div class="line" id="151913"><span class="nick" style="color:#80b1d3"><a href="#151913" label="[15:19:13]">&lt;stikonas[m]&gt;</a></span><span class="message">First one is half bootstrapped</span></div><div class="line" id="151921"><span class="nick" style="color:#80b1d3"><a href="#151921" label="[15:19:21]">&lt;stikonas[m]&gt;</a></span><span class="message">Second is full bootstrapped</span></div><div class="line" id="151959"><span class="nick" style="color:#d9d9d9"><a href="#151959" label="[15:19:59]">&lt;mihi&gt;</a></span><span class="message">ok, then you should point LIBDATADIR to /usr, so that half bootstrapped package can find tlib and lic.</span></div><div class="line" id="152002"><span class="nick" style="color:#80b1d3"><a href="#152002" label="[15:20:02]">&lt;stikonas[m]&gt;</a></span><span class="message">I'll check file lists later, but we can always uninstall first package</span></div><br /></div></body></html>