<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-08-10.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="001727"><span class="nick" style="color:#389600"><a href="#001727" label="[00:17:27]">&lt;fossy&gt;</a></span><span class="message">samplet: if you do ever get a chance to have a look at that syntax-case issue from ppsyntax, that would be amazing :) (no rush though)</span></div><div class="line" id="001833"><span class="nick" style="color:#8dd3c7"><a href="#001833" label="[00:18:33]">&lt;stikonas&gt;</a></span><span class="message">fossy: have you had any thoughts of what are we going to do with live-bootstrap on non-x86 arches?</span></div><div class="line" id="001910"><span class="nick" style="color:#8dd3c7"><a href="#001910" label="[00:19:10]">&lt;stikonas&gt;</a></span><span class="message">I think one of the development problems would be checksums...</span></div><div class="line" id="001948"><span class="nick" style="color:#8dd3c7"><a href="#001948" label="[00:19:48]">&lt;stikonas&gt;</a></span><span class="message">and the other is either requiring appropriate hardware or you have to inject qemu-user binaryinto the bootstrap</span></div><div class="line" id="002300"><span class="nick" style="color:#389600"><a href="#002300" label="[00:23:00]">&lt;fossy&gt;</a></span><span class="message">i haven't thought extensively about checksums yet..</span></div><div class="line" id="002342"><span class="nick" style="color:#389600"><a href="#002342" label="[00:23:42]">&lt;fossy&gt;</a></span><span class="message">i think we probably need a slightly different long term solution to checksums</span></div><div class="line" id="002352"><span class="nick" style="color:#389600"><a href="#002352" label="[00:23:52]">&lt;fossy&gt;</a></span><span class="message">but what that is exactly i don't have a good solution for yet</span></div><div class="line" id="002429"><span class="nick" style="color:#8dd3c7"><a href="#002429" label="[00:24:29]">&lt;stikonas&gt;</a></span><span class="message">it might still be good to have them for releases</span></div><div class="line" id="002446"><span class="nick" style="color:#389600"><a href="#002446" label="[00:24:46]">&lt;fossy&gt;</a></span><span class="message">yeah, that was one option i was thinking - do a mass change at some interval</span></div><div class="line" id="002929"><span class="nick" style="color:#2e2a4a"><a href="#002929" label="[00:29:29]">&lt;oriansj&gt;</a></span><span class="message">fossy: have the architecture in the name of the checksum files?</span></div><div class="line" id="002954"><span class="nick" style="color:#389600"><a href="#002954" label="[00:29:54]">&lt;fossy&gt;</a></span><span class="message">oriansj: that is a simple solution for structuring it, but imo the larger problem is having to regenerate for every architecture</span></div><div class="line" id="003004"><span class="nick" style="color:#389600"><a href="#003004" label="[00:30:04]">&lt;fossy&gt;</a></span><span class="message">which often is not going to be very feasible for every PR</span></div><div class="line" id="003043"><span class="nick" style="color:#8dd3c7"><a href="#003043" label="[00:30:43]">&lt;stikonas&gt;</a></span><span class="message">oriansj: that is what I have been doing (archtecture in the checksum files)</span></div><div class="line" id="003055"><span class="nick" style="color:#2e2a4a"><a href="#003055" label="[00:30:55]">&lt;oriansj&gt;</a></span><span class="message">well ideally we would be only having to update the updated program and potentially the ones that use it</span></div><div class="line" id="003056"><span class="nick" style="color:#8dd3c7"><a href="#003056" label="[00:30:56]">&lt;stikonas&gt;</a></span><span class="message">but indeed, regenerating all arches will be tricky</span></div><div class="line" id="003105"><span class="nick" style="color:#8dd3c7"><a href="#003105" label="[00:31:05]">&lt;stikonas&gt;</a></span><span class="message">oriansj: and e.g. libc bump?</span></div><div class="line" id="003114"><span class="nick" style="color:#389600"><a href="#003114" label="[00:31:14]">&lt;fossy&gt;</a></span><span class="message">yes, you only have to update the update program and all the ones that link to it</span></div><div class="line" id="003115"><span class="nick" style="color:#8dd3c7"><a href="#003115" label="[00:31:15]">&lt;stikonas&gt;</a></span><span class="message">e.g. mes update...</span></div><div class="line" id="003120"><span class="nick" style="color:#389600"><a href="#003120" label="[00:31:20]">&lt;fossy&gt;</a></span><span class="message">which is often quite expansive in live-bootstrap</span></div><div class="line" id="003245"><span class="nick" style="color:#2e2a4a"><a href="#003245" label="[00:32:45]">&lt;oriansj&gt;</a></span><span class="message">yeah, M2-Planet doesn't produce optimal code and an interpreters just run slower than compiled code.</span></div><div class="line" id="003301"><span class="nick" style="color:#389600"><a href="#003301" label="[00:33:01]">&lt;fossy&gt;</a></span><span class="message">?</span></div><div class="line" id="003313"><span class="nick" style="color:#389600"><a href="#003313" label="[00:33:13]">&lt;fossy&gt;</a></span><span class="message">M2-Planet is not the slow part of the bootstrap, lol</span></div><div class="line" id="004957"><span class="nick" style="color:#6b8072"><a href="#004957" label="[00:49:57]">&lt;samplet&gt;</a></span><span class="message">fossy: Well, I quickly tested the ‘define-macro’ trick discussed yesterday.  On the modules branch, the script runs for quite a while (seems promising) and then crashes.  I bumped Mes’s memory and stack limits, and it ran a bit longer and then tried to close file -1.</span></div><div class="line" id="005058"><span class="nick" style="color:#8dd3c7"><a href="#005058" label="[00:50:58]">&lt;stikonas&gt;</a></span><span class="message">fossy: M2-Planet is not slow, but some code it generates is slow...</span></div><div class="line" id="005103"><span class="nick" style="color:#8dd3c7"><a href="#005103" label="[00:51:03]">&lt;stikonas&gt;</a></span><span class="message">so mes is extra slow</span></div><div class="line" id="005146"><span class="nick" style="color:#6b8072"><a href="#005146" label="[00:51:46]">&lt;samplet&gt;</a></span><span class="message">Also, Mes is slow because Mes is slow.  ;)</span></div><div class="line" id="005157"><span class="nick" style="color:#8dd3c7"><a href="#005157" label="[00:51:57]">&lt;stikonas&gt;</a></span><span class="message">and especially on riscv64</span></div><div class="line" id="005218"><span class="nick" style="color:#8dd3c7"><a href="#005218" label="[00:52:18]">&lt;stikonas&gt;</a></span><span class="message">if you feel that 20 minute build time on x86 is slow, try running it on riscv boards...</span></div><div class="line" id="005235"><span class="nick" style="color:#8dd3c7"><a href="#005235" label="[00:52:35]">&lt;stikonas&gt;</a></span><span class="message">I was running mescc for 4 days</span></div><div class="line" id="005249"><span class="nick" style="color:#6b8072"><a href="#005249" label="[00:52:49]">&lt;samplet&gt;</a></span><span class="message">The other day I found code where it updated a character in a string by converting the string to a linked list, traversing the list to the given index, updating the character there, and then converting the list back into a string!</span></div><div class="line" id="005250"><span class="nick" style="color:#8dd3c7"><a href="#005250" label="[00:52:50]">&lt;stikonas&gt;</a></span><span class="message">(though just using 1 core out of 4)</span></div><div class="line" id="005412"><span class="nick" style="color:#6b8072"><a href="#005412" label="[00:54:12]">&lt;samplet&gt;</a></span><span class="message">(I mean no disrespect, of course.  You have to get things off the ground somehow.  All I’m saying is that it’s never been optimized for perf.)</span></div><div class="line" id="005511"><span class="nick" style="color:#8dd3c7"><a href="#005511" label="[00:55:11]">&lt;stikonas&gt;</a></span><span class="message">and it was first written for x86 or something similar</span></div><div class="line" id="005523"><span class="nick" style="color:#8dd3c7"><a href="#005523" label="[00:55:23]">&lt;stikonas&gt;</a></span><span class="message">so other arches are often doing very suboptimal code</span></div><div class="line" id="005529"><span class="nick" style="color:#8dd3c7"><a href="#005529" label="[00:55:29]">&lt;stikonas&gt;</a></span><span class="message">e.g. riscv64 has 32 registers</span></div><div class="line" id="005538"><span class="nick" style="color:#8dd3c7"><a href="#005538" label="[00:55:38]">&lt;stikonas&gt;</a></span><span class="message">but we still use just a few (as in x86)</span></div><div class="line" id="005545"><span class="nick" style="color:#389600"><a href="#005545" label="[00:55:45]">&lt;fossy&gt;</a></span><span class="message">samplet: would you mind pastebinning that somewhere?</span></div><div class="line" id="005837"><span class="nick" style="color:#6b8072"><a href="#005837" label="[00:58:37]">&lt;samplet&gt;</a></span><span class="message">fossy: <a rel="nofollow" href="https://paste.debian.net/1288447/">https://paste.debian.net/1288447/</a> </span></div><div class="line" id="005844"><span class="nick" style="color:#389600"><a href="#005844" label="[00:58:44]">&lt;fossy&gt;</a></span><span class="message">thank you!</span></div><div class="line" id="010016"><span class="nick" style="color:#6b8072"><a href="#010016" label="[01:00:16]">&lt;samplet&gt;</a></span><span class="message">yw</span></div><div class="line" id="012224"><span class="nick" style="color:#6b8072"><a href="#012224" label="[01:22:24]">&lt;samplet&gt;</a></span><span class="message">I think it might work now.  The problem was no “mach.d” directory.  We’ll see when it finishes....</span></div><div class="line" id="012737"><span class="nick" style="color:#6b8072"><a href="#012737" label="[01:27:37]">&lt;samplet&gt;</a></span><span class="message">It wrote one action file and then crashed on the table file.  The file differs from what NYACC ships, but looks equivalent to me.</span></div><div class="line" id="012835"><span class="nick" style="color:#389600"><a href="#012835" label="[01:28:35]">&lt;fossy&gt;</a></span><span class="message">yes, that matches my expectations</span></div><div class="line" id="012912"><span class="nick" style="color:#6b8072"><a href="#012912" label="[01:29:12]">&lt;samplet&gt;</a></span><span class="message">How so?  The difference or crashing on table generation?</span></div><div class="line" id="013047"><span class="nick" style="color:#389600"><a href="#013047" label="[01:30:47]">&lt;fossy&gt;</a></span><span class="message">my bad, the file differing from shipped, but only being non-functional differences</span></div><div class="line" id="013238"><span class="nick" style="color:#6b8072"><a href="#013238" label="[01:32:38]">&lt;samplet&gt;</a></span><span class="message">Right.  I wonder what NYACC is doing to print these.  Is it using ‘pretty-print’?</span></div><div class="line" id="013304"><span class="nick" style="color:#6b8072"><a href="#013304" label="[01:33:04]">&lt;samplet&gt;</a></span><span class="message">Yes.</span></div><div class="line" id="013435"><span class="nick" style="color:#6b8072"><a href="#013435" label="[01:34:35]">&lt;samplet&gt;</a></span><span class="message">Mes puts line breaks before lambda bodies, like a programmer would, while Guile doesn’t bother.  Guile uses commas for unquoting, while Mes spells out ‘unquote’.</span></div><div class="line" id="013441"><span class="nick" style="color:#2e2a4a"><a href="#013441" label="[01:34:41]">&lt;oriansj&gt;</a></span><span class="message">stikonas: how does TCC take when built?</span></div><div class="line" id="013446"><span class="nick" style="color:#2e2a4a"><a href="#013446" label="[01:34:46]">&lt;oriansj&gt;</a></span><span class="message">on RISC-V</span></div><div class="line" id="013503"><span class="nick" style="color:#389600"><a href="#013503" label="[01:35:03]">&lt;fossy&gt;</a></span><span class="message">yep</span></div><div class="line" id="013539"><span class="nick" style="color:#2e2a4a"><a href="#013539" label="[01:35:39]">&lt;oriansj&gt;</a></span><span class="message">^does^long does^</span></div><div class="line" id="013558"><span class="nick" style="color:#6b8072"><a href="#013558" label="[01:35:58]">&lt;samplet&gt;</a></span><span class="message">I’ll try again with the missing ‘string-every’ it was complaining about.</span></div><div class="line" id="013643"><span class="nick" style="color:#6b8072"><a href="#013643" label="[01:36:43]">&lt;samplet&gt;</a></span><span class="message">This is much more fun than figuring out why MesCC is failing tests.  :)</span></div><div class="line" id="013827"><span class="nick" style="color:#2e2a4a"><a href="#013827" label="[01:38:27]">&lt;oriansj&gt;</a></span><span class="message">well, I am starting to wonder how much work it'll take to strip down TCC into something that M2-Planet can build</span></div><div class="line" id="014050"><span class="nick" style="color:#8dd3c7"><a href="#014050" label="[01:40:50]">&lt;stikonas&gt;</a></span><span class="message">oriansj:  building tcc with mescc on my riscv board takes maybe 2 days</span></div><div class="line" id="014106"><span class="nick" style="color:#8dd3c7"><a href="#014106" label="[01:41:06]">&lt;stikonas&gt;</a></span><span class="message">the other 2 days are for building meslibc and mes</span></div><div class="line" id="014114"><span class="nick" style="color:#8dd3c7"><a href="#014114" label="[01:41:14]">&lt;stikonas&gt;</a></span><span class="message">oriansj: stage0-posix takes about 30 minutes</span></div><div class="line" id="014141"><span class="nick" style="color:#8dd3c7"><a href="#014141" label="[01:41:41]">&lt;stikonas&gt;</a></span><span class="message">and I can confirm that even mescc-tools when built with gcc are much faster</span></div><div class="line" id="014359"><span class="nick" style="color:#389600"><a href="#014359" label="[01:43:59]">&lt;fossy&gt;</a></span><span class="message">stikonas: whats the clock speed of that?</span></div><div class="line" id="014706"><span class="nick" style="color:#8dd3c7"><a href="#014706" label="[01:47:06]">&lt;stikonas&gt;</a></span><span class="message">fossy: I think it says 1.5 Ghz</span></div><div class="line" id="014816"><span class="nick" style="color:#8dd3c7"><a href="#014816" label="[01:48:16]">&lt;stikonas&gt;</a></span><span class="message">but e.g. using modern gcc to build modern binutils on all 4 cores takes just over half an hour</span></div><div class="line" id="014837"><span class="nick" style="color:#8dd3c7"><a href="#014837" label="[01:48:37]">&lt;stikonas&gt;</a></span><span class="message">so not too bad</span></div><div class="line" id="014837"><span class="nick" style="color:#389600"><a href="#014837" label="[01:48:37]">&lt;fossy&gt;</a></span><span class="message">that's reasonable yea</span></div><div class="line" id="015147"><span class="nick" style="color:#2e2a4a"><a href="#015147" label="[01:51:47]">&lt;oriansj&gt;</a></span><span class="message">well M2-Planet binaries run at 80% the speed of Mescc binaries</span></div><div class="line" id="015306"><span class="nick" style="color:#8dd3c7"><a href="#015306" label="[01:53:06]">&lt;stikonas&gt;</a></span><span class="message">well, for x86...</span></div><div class="line" id="015310"><span class="nick" style="color:#2e2a4a"><a href="#015310" label="[01:53:10]">&lt;oriansj&gt;</a></span><span class="message">so if the tcc self-hosting step (when built by mescc) is reasonably fast; doing the work might be worth it in terms of total saved time but not if most of the time is spent there.</span></div><div class="line" id="015326"><span class="nick" style="color:#2e2a4a"><a href="#015326" label="[01:53:26]">&lt;oriansj&gt;</a></span><span class="message">stikonas: and how about on risc-v?</span></div><div class="line" id="015332"><span class="nick" style="color:#8dd3c7"><a href="#015332" label="[01:53:32]">&lt;stikonas&gt;</a></span><span class="message">and mes-m2 can't bootstrap tcc (even on x86)</span></div><div class="line" id="015338"><span class="nick" style="color:#8dd3c7"><a href="#015338" label="[01:53:38]">&lt;stikonas&gt;</a></span><span class="message">oriansj: not really sure</span></div><div class="line" id="015351"><span class="nick" style="color:#8dd3c7"><a href="#015351" label="[01:53:51]">&lt;stikonas&gt;</a></span><span class="message">haven't tried...</span></div><div class="line" id="015405"><span class="nick" style="color:#8dd3c7"><a href="#015405" label="[01:54:05]">&lt;stikonas&gt;</a></span><span class="message">perhaps I can try on qemu...</span></div><div class="line" id="015419"><span class="nick" style="color:#8dd3c7"><a href="#015419" label="[01:54:19]">&lt;stikonas&gt;</a></span><span class="message">hmm, though maybe some other time...</span></div><div class="line" id="015449"><span class="nick" style="color:#8dd3c7"><a href="#015449" label="[01:54:49]">&lt;stikonas&gt;</a></span><span class="message">anyway, both M2-Planet built binaries and mescc built binaries are way way slower than gcc built binaries</span></div><div class="line" id="015451"><span class="nick" style="color:#2e2a4a"><a href="#015451" label="[01:54:51]">&lt;oriansj&gt;</a></span><span class="message">stikonas: no, I am thinking of skipping the mes.c/mescc steps and doing a fork of tcc which is buildable by M2-Planet</span></div><div class="line" id="015511"><span class="nick" style="color:#8dd3c7"><a href="#015511" label="[01:55:11]">&lt;stikonas&gt;</a></span><span class="message">oriansj: did you see on #guix-risc-v somebody might be even looking at that</span></div><div class="line" id="015602"><span class="nick" style="color:#2e2a4a"><a href="#015602" label="[01:56:02]">&lt;oriansj&gt;</a></span><span class="message">looks like I missed that</span></div><div class="line" id="020326"><span class="nick" style="color:#2e2a4a"><a href="#020326" label="[02:03:26]">&lt;oriansj&gt;</a></span><span class="message">found it</span></div><div class="line" id="020701"><span class="nick" style="color:#8dd3c7"><a href="#020701" label="[02:07:01]">&lt;stikonas&gt;</a></span><span class="message">oriansj: but you'll find tcc code quite ugly...</span></div><div class="line" id="020711"><span class="nick" style="color:#8dd3c7"><a href="#020711" label="[02:07:11]">&lt;stikonas&gt;</a></span><span class="message">once letter variables all over the place</span></div><div class="line" id="020730"><span class="nick" style="color:#8dd3c7"><a href="#020730" label="[02:07:30]">&lt;stikonas&gt;</a></span><span class="message">compiler is directly outputing binary code (rather than assembling it)</span></div><div class="line" id="021017"><span class="nick" style="color:#80b1d3"><a href="#021017" label="[02:10:17]">&lt;notgull&gt;</a></span><span class="message">Fabian Bellard code just looks like that I think</span></div><div class="line" id="021051"><span class="nick" style="color:#8dd3c7"><a href="#021051" label="[02:10:51]">&lt;stikonas&gt;</a></span><span class="message">yes, but that's just not helpful to your readers...</span></div><div class="line" id="021211"><span class="nick" style="color:#6b8072"><a href="#021211" label="[02:12:11]">&lt;samplet&gt;</a></span><span class="message">fossy: Okay.  Mes on GCC can generate the C99 files.  I imagine Mes on M2 could do it, too.  I hit another snag with the CPP files.  It’s solvable, but I have to move on for now.  This is all on top of the future Mes 0.26, too.</span></div><div class="line" id="021323"><span class="nick" style="color:#6b8072"><a href="#021323" label="[02:13:23]">&lt;samplet&gt;</a></span><span class="message">Mes 0.26 has major changes that let me run the NYACC code directly, instead of futzing about with “.mes” files.</span></div><div class="line" id="021331"><span class="nick" style="color:#6b8072"><a href="#021331" label="[02:13:31]">&lt;samplet&gt;</a></span><span class="message">s/has/will have/</span></div><div class="line" id="021548"><span class="nick" style="color:#80b1d3"><a href="#021548" label="[02:15:48]">&lt;notgull&gt;</a></span><span class="message">People make fun of me for my 3 lines of comment per one line of code ratio, but bit is why I do that</span></div><div class="line" id="021830"><span class="nick" style="color:#2e2a4a"><a href="#021830" label="[02:18:30]">&lt;oriansj&gt;</a></span><span class="message">stikonas: I can deal with ugly; the hard problem is finding time to work on it</span></div><div class="line" id="022002"><span class="nick" style="color:#2e2a4a"><a href="#022002" label="[02:20:02]">&lt;oriansj&gt;</a></span><span class="message">least you forget mes.c used to be unbuildable by even gcc (due to snarfing)</span></div><div class="line" id="023545"><span class="nick" style="color:#2e2a4a"><a href="#023545" label="[02:35:45]">&lt;oriansj&gt;</a></span><span class="message">nothing kills focus faster than a 3 year old who wants your attention *NOW*</span></div><div class="line" id="023630"><span class="nick" style="color:#6d2462"><a href="#023630" label="[02:36:30]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Yeah, that's understandable...</span></div><div class="line" id="041450"><span class="nick" style="color:#234e69"><a href="#041450" label="[04:14:50]">&lt;muurkha&gt;</a></span><span class="message">*Fabrice</span></div><div class="line" id="041507"><span class="nick" style="color:#234e69"><a href="#041507" label="[04:15:07]">&lt;muurkha&gt;</a></span><span class="message">oriansj: yeah, I&quot;ve been dealing with kid interruptions in a pairing session this evening</span></div><div class="line" id="050156"><span class="nick" style="color:#6d2462"><a href="#050156" label="[05:01:56]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Christoph&gt; oriansj: What does 'snarfing' mean here?</span></div><div class="line" id="061654"><span class="nick" style="color:#389600"><a href="#061654" label="[06:16:54]">&lt;fossy&gt;</a></span><span class="message">samplet: glad to hear!</span></div><div class="line" id="234452"><span class="nick" style="color:#2e2a4a"><a href="#234452" label="[23:44:52]">&lt;oriansj&gt;</a></span><span class="message">Christoph: short version snarfing in this context refers to the fact that mes.c wasn't written in C but rather was code which after processing by a scheme program generated a C program.</span></div><div class="line" id="234626"><span class="nick" style="color:#2e2a4a"><a href="#234626" label="[23:46:26]">&lt;oriansj&gt;</a></span><span class="message">It initially allowed janneke to make rapid progress but ultimately turned into the biggest problem for closing the bootstrap gap between M2-Planet and mes.c that took more than a year to fix</span></div><br /></div></body></html>