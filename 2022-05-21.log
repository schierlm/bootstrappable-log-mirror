<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-05-21.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="002155"><span class="nick" style="color:#8dd3c7"><a href="#002155" label="[00:21:55]">&lt;doras&gt;</a></span><span class="message">freedesktop-sdk would still have the rust binary seeds unfortunately, but it would be a huge step towards becoming fully bootstrappable.</span></div><div class="line" id="002427"><span class="nick" style="color:#8dd3c7"><a href="#002427" label="[00:24:27]">&lt;doras&gt;</a></span><span class="message">We used to have a go binary seed until recently, but that was removed by building go using gcc.</span></div><div class="line" id="003655"><span class="nick" style="color:#8dd3c7"><a href="#003655" label="[00:36:55]">&lt;doras&gt;</a></span><span class="message">stikonas: do you have an example of the conditional block syntax in kaem?</span></div><div class="line" id="003753"><span class="nick" style="color:#2e2a4a"><a href="#003753" label="[00:37:53]">&lt;stikonas[m]&gt;</a></span><span class="message">doras: no, but same as bash</span></div><div class="line" id="003831"><span class="nick" style="color:#2e2a4a"><a href="#003831" label="[00:38:31]">&lt;stikonas[m]&gt;</a></span><span class="message">if cond; then</span></div><div class="line" id="003841"><span class="nick" style="color:#2e2a4a"><a href="#003841" label="[00:38:41]">&lt;stikonas[m]&gt;</a></span><span class="message">expr</span></div><div class="line" id="003842"><span class="nick" style="color:#2e2a4a"><a href="#003842" label="[00:38:42]">&lt;stikonas[m]&gt;</a></span><span class="message">fi</span></div><div class="line" id="003848"><span class="nick" style="color:#8dd3c7"><a href="#003848" label="[00:38:48]">&lt;doras&gt;</a></span><span class="message">Thanks. I'll try.</span></div><div class="line" id="004559"><span class="nick" style="color:#2e2a4a"><a href="#004559" label="[00:45:59]">&lt;stikonas[m]&gt;</a></span><span class="message">else and elif should be supported too</span></div><div class="line" id="005655"><span class="nick" style="color:#8dd3c7"><a href="#005655" label="[00:56:55]">&lt;doras&gt;</a></span><span class="message">I don't see &quot;elif&quot; here, but &quot;else&quot; should be enough: <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/Kaem/kaem.c">https://github.com/oriansj/mescc-tools/blob/master/Kaem/kaem.c</a> </span></div><div class="line" id="010538"><span class="nick" style="color:#2e2a4a"><a href="#010538" label="[01:05:38]">&lt;stikonas[m]&gt;</a></span><span class="message">Oh maybe not elif...</span></div><div class="line" id="010631"><span class="nick" style="color:#6b8072"><a href="#010631" label="[01:06:31]">&lt;stikonas&gt;</a></span><span class="message">but yes, if and else should be sufficient</span></div><div class="line" id="012327"><span class="nick" style="color:#8dd3c7"><a href="#012327" label="[01:23:27]">&lt;doras&gt;</a></span><span class="message">stikonas: it seems everything works now. I'll run a few bootstraps to make sure, including one where I update mes and expect checksums to change, and then open a PR.</span></div><div class="line" id="012435"><span class="nick" style="color:#8dd3c7"><a href="#012435" label="[01:24:35]">&lt;doras&gt;</a></span><span class="message">28 files changed, 311 insertions(+), 130 deletions(-)</span></div><div class="line" id="012759"><span class="nick" style="color:#80b1d3"><a href="#012759" label="[01:27:59]">&lt;Hagfish&gt;</a></span><span class="message">doras: do you know if bootstrapping rust from live-bootstrap is possible as a result of this: <a rel="nofollow" href="https://blog.antoyo.xyz/rustc_codegen_gcc-progress-report-10">https://blog.antoyo.xyz/rustc_codegen_gcc-progress-report-10</a>  ?</span></div><div class="line" id="013059"><span class="nick" style="color:#8dd3c7"><a href="#013059" label="[01:30:59]">&lt;doras&gt;</a></span><span class="message">Hagfish: good question. No idea :)</span></div><div class="line" id="013216"><span class="nick" style="color:#8dd3c7"><a href="#013216" label="[01:32:16]">&lt;doras&gt;</a></span><span class="message">But it sounds like GCC 12 (+ some patches) is needed, which live-bootstrap can't build at the moment.</span></div><div class="line" id="013217"><span class="nick" style="color:#80b1d3"><a href="#013217" label="[01:32:17]">&lt;Hagfish&gt;</a></span><span class="message">actually, i've found this helpful comment: <a rel="nofollow" href="https://lwn.net/Articles/889999/">https://lwn.net/Articles/889999/</a> </span></div><div class="line" id="013225"><span class="nick" style="color:#80b1d3"><a href="#013225" label="[01:32:25]">&lt;Hagfish&gt;</a></span><span class="message">ah, that's a good point, thank you</span></div><div class="line" id="013730"><span class="nick" style="color:#80b1d3"><a href="#013730" label="[01:37:30]">&lt;Hagfish&gt;</a></span><span class="message">hmm, mrustc &quot;Supports (and can bootstrap) rustc 1.19.0, 1.29.0, 1.39.0, and 1.54.0&quot;, and the most recent stable version of Rust is <a rel="nofollow" href="https://blog.rust-lang.org/2022/05/19/Rust-1.61.0.html">https://blog.rust-lang.org/2022/05/19/Rust-1.61.0.html</a> </span></div><div class="line" id="014522"><span class="nick" style="color:#6b8072"><a href="#014522" label="[01:45:22]">&lt;stikonas&gt;</a></span><span class="message">Hagfish: I don't think rustc_codegen can bootstrap rust</span></div><div class="line" id="014524"><span class="nick" style="color:#6b8072"><a href="#014524" label="[01:45:24]">&lt;stikonas&gt;</a></span><span class="message">you need mrustc</span></div><div class="line" id="014610"><span class="nick" style="color:#6b8072"><a href="#014610" label="[01:46:10]">&lt;stikonas&gt;</a></span><span class="message">I haven't looked in detail, but I would guess that rustc_codegen_gcc replaces llvm backend</span></div><div class="line" id="014702"><span class="nick" style="color:#6b8072"><a href="#014702" label="[01:47:02]">&lt;stikonas&gt;</a></span><span class="message">Hagfish: and mrustc does not work on x86</span></div><div class="line" id="015022"><span class="nick" style="color:#80b1d3"><a href="#015022" label="[01:50:22]">&lt;Hagfish&gt;</a></span><span class="message">oof, i didn't know that</span></div><div class="line" id="015050"><span class="nick" style="color:#80b1d3"><a href="#015050" label="[01:50:50]">&lt;Hagfish&gt;</a></span><span class="message">i did find this intriguing comment in a readme though:</span></div><div class="line" id="015053"><span class="nick" style="color:#80b1d3"><a href="#015053" label="[01:50:53]">&lt;Hagfish&gt;</a></span><span class="message">&quot;Note: llvm13 is needed until there is a release of gcc12.1. As soon as gcc12.1 is in the freedesktop sdk, gcc can be used instead of clang.&quot;</span></div><div class="line" id="015231"><span class="nick" style="color:#6b8072"><a href="#015231" label="[01:52:31]">&lt;stikonas&gt;</a></span><span class="message">so at the moment live-bootstrap can't bootstrap rust</span></div><div class="line" id="015238"><span class="nick" style="color:#6b8072"><a href="#015238" label="[01:52:38]">&lt;stikonas&gt;</a></span><span class="message">you need 64-bit platform for that</span></div><div class="line" id="015544"><span class="nick" style="color:#80b1d3"><a href="#015544" label="[01:55:44]">&lt;Hagfish&gt;</a></span><span class="message">yeah, that makes sense</span></div><div class="line" id="015544"><span class="nick" style="color:#80b1d3"><a href="#015544" label="[01:55:44]">&lt;Hagfish&gt;</a></span><span class="message">&quot;Fails to build under x86 (32bit): Excessive memory usage&quot;</span></div><div class="line" id="015556"><span class="nick" style="color:#80b1d3"><a href="#015556" label="[01:55:56]">&lt;Hagfish&gt;</a></span><span class="message">interesting that it's a memory issue</span></div><div class="line" id="015607"><span class="nick" style="color:#6b8072"><a href="#015607" label="[01:56:07]">&lt;stikonas&gt;</a></span><span class="message">indeed, 32-bit systems are limited to 3 GB</span></div><div class="line" id="015609"><span class="nick" style="color:#6b8072"><a href="#015609" label="[01:56:09]">&lt;stikonas&gt;</a></span><span class="message">well, gcc is quite memory hungry</span></div><div class="line" id="015620"><span class="nick" style="color:#6b8072"><a href="#015620" label="[01:56:20]">&lt;stikonas&gt;</a></span><span class="message">and mrustc produces large C files</span></div><div class="line" id="015622"><span class="nick" style="color:#6b8072"><a href="#015622" label="[01:56:22]">&lt;stikonas&gt;</a></span><span class="message">that it feeds to gcc</span></div><div class="line" id="015639"><span class="nick" style="color:#80b1d3"><a href="#015639" label="[01:56:39]">&lt;Hagfish&gt;</a></span><span class="message">hmm, i knew there was a limit, but i never would have guessed that gcc would be enough to hit it</span></div><div class="line" id="015717"><span class="nick" style="color:#6b8072"><a href="#015717" label="[01:57:17]">&lt;stikonas&gt;</a></span><span class="message">compilers are one of the most memory hungry programs</span></div><div class="line" id="015747"><span class="nick" style="color:#80b1d3"><a href="#015747" label="[01:57:47]">&lt;Hagfish&gt;</a></span><span class="message">that feels slightly ironic</span></div><div class="line" id="015806"><span class="nick" style="color:#80b1d3"><a href="#015806" label="[01:58:06]">&lt;Hagfish&gt;</a></span><span class="message">but yeah, putting the complexity at build time rather than runtime does make sense</span></div><div class="line" id="015813"><span class="nick" style="color:#6b8072"><a href="#015813" label="[01:58:13]">&lt;stikonas&gt;</a></span><span class="message">yes, it does</span></div><div class="line" id="015827"><span class="nick" style="color:#6b8072"><a href="#015827" label="[01:58:27]">&lt;stikonas&gt;</a></span><span class="message">it's those optimization passes that are complicated</span></div><div class="line" id="015850"><span class="nick" style="color:#80b1d3"><a href="#015850" label="[01:58:50]">&lt;Hagfish&gt;</a></span><span class="message">having to use gigabytes of memory just to compile &quot;hello world&quot; is hard to imagine, but presumably most of gcc isn't used for trivial code</span></div><div class="line" id="015857"><span class="nick" style="color:#6b8072"><a href="#015857" label="[01:58:57]">&lt;stikonas&gt;</a></span><span class="message">single-pass stuff (like what M2-Planet does) without optimizations is one thing</span></div><div class="line" id="015903"><span class="nick" style="color:#6b8072"><a href="#015903" label="[01:59:03]">&lt;stikonas&gt;</a></span><span class="message">it's not to compile hellow world...</span></div><div class="line" id="015915"><span class="nick" style="color:#6b8072"><a href="#015915" label="[01:59:15]">&lt;stikonas&gt;</a></span><span class="message">it's to compile C files whose size is e.g. 100MiB</span></div><div class="line" id="015920"><span class="nick" style="color:#80b1d3"><a href="#015920" label="[01:59:20]">&lt;Hagfish&gt;</a></span><span class="message">wow</span></div><div class="line" id="015937"><span class="nick" style="color:#80b1d3"><a href="#015937" label="[01:59:37]">&lt;Hagfish&gt;</a></span><span class="message">yeah, using gigabytes for that is way more reasonable</span></div><div class="line" id="020008"><span class="nick" style="color:#80b1d3"><a href="#020008" label="[02:00:08]">&lt;Hagfish&gt;</a></span><span class="message">are there nasty polynomial scaling problems that compilers encounter?</span></div><div class="line" id="020010"><span class="nick" style="color:#6b8072"><a href="#020010" label="[02:00:10]">&lt;stikonas&gt;</a></span><span class="message">but it's not just mrustc, try to compile e.g. any of that chromium/webengine stuff</span></div><div class="line" id="020017"><span class="nick" style="color:#80b1d3"><a href="#020017" label="[02:00:17]">&lt;Hagfish&gt;</a></span><span class="message">like if you double the source code, it quadruples the memory?</span></div><div class="line" id="020027"><span class="nick" style="color:#6b8072"><a href="#020027" label="[02:00:27]">&lt;stikonas&gt;</a></span><span class="message">it's probably linear</span></div><div class="line" id="020036"><span class="nick" style="color:#80b1d3"><a href="#020036" label="[02:00:36]">&lt;Hagfish&gt;</a></span><span class="message">yeah, chromium is another beast</span></div><div class="line" id="020203"><span class="nick" style="color:#80b1d3"><a href="#020203" label="[02:02:03]">&lt;Hagfish&gt;</a></span><span class="message">hmm, i guess there's a tradeoff of compile time and runtime optimisation that you can configure</span></div><div class="line" id="020221"><span class="nick" style="color:#80b1d3"><a href="#020221" label="[02:02:21]">&lt;Hagfish&gt;</a></span><span class="message">but there's no simple flag for splitting up a 100 MiB file into smaller ones, i'm guessing</span></div><div class="line" id="020332"><span class="nick" style="color:#80b1d3"><a href="#020332" label="[02:03:32]">&lt;Hagfish&gt;</a></span><span class="message">the only other tradeoff i can think of is RAM vs disk, but presumably that's not a way to work around the 32-bit limitation for gcc</span></div><div class="line" id="020403"><span class="nick" style="color:#80b1d3"><a href="#020403" label="[02:04:03]">&lt;Hagfish&gt;</a></span><span class="message">the problem is address space, not physical availability</span></div><div class="line" id="020633"><span class="nick" style="color:#6d2462"><a href="#020633" label="[02:06:33]">&lt;muurkha&gt;</a></span><span class="message">oriansj: yeah, Pascal has less primitive types than C, but its typing discipline is significantly stricter</span></div><div class="line" id="022144"><span class="nick" style="color:#80b1d3"><a href="#022144" label="[02:21:44]">&lt;Hagfish&gt;</a></span><span class="message">heh, here's a discussion from 2017 about how even rustc OOMs when compiling rustc: <a rel="nofollow" href="https://news.ycombinator.com/item?id=15844213">https://news.ycombinator.com/item?id=15844213</a> </span></div><div class="line" id="022234"><span class="nick" style="color:#80b1d3"><a href="#022234" label="[02:22:34]">&lt;Hagfish&gt;</a></span><span class="message">bootstrapping really does expose all the dirty secrets of big important projects</span></div><div class="line" id="022300"><span class="nick" style="color:#80b1d3"><a href="#022300" label="[02:23:00]">&lt;Hagfish&gt;</a></span><span class="message">(another commenter says &quot;Chrome stopped being able to compile on 32 bit systems years ago, as a C++ programs. I think Firefox is in the same situations.&quot;)</span></div><div class="line" id="022756"><span class="nick" style="color:#6d2462"><a href="#022756" label="[02:27:56]">&lt;muurkha&gt;</a></span><span class="message">jesus fuck</span></div><div class="line" id="023520"><span class="nick" style="color:#6b8072"><a href="#023520" label="[02:35:20]">&lt;stikonas&gt;</a></span><span class="message">not really a secret... Those big projects are well known to be memory hungry</span></div><div class="line" id="023542"><span class="nick" style="color:#6d2462"><a href="#023542" label="[02:35:42]">&lt;muurkha&gt;</a></span><span class="message">it's news to me</span></div><div class="line" id="023635"><span class="nick" style="color:#6d2462"><a href="#023635" label="[02:36:35]">&lt;muurkha&gt;</a></span><span class="message">I'm used to &quot;memory hungry&quot; meaning a process needs over 128 MiB by itself, and this is another 16 times worse</span></div><div class="line" id="023700"><span class="nick" style="color:#6b8072"><a href="#023700" label="[02:37:00]">&lt;stikonas&gt;</a></span><span class="message">muurkha: try running source based distro</span></div><div class="line" id="023707"><span class="nick" style="color:#6d2462"><a href="#023707" label="[02:37:07]">&lt;muurkha&gt;</a></span><span class="message">yeah, I should</span></div><div class="line" id="023735"><span class="nick" style="color:#6d2462"><a href="#023735" label="[02:37:35]">&lt;muurkha&gt;</a></span><span class="message">when Linux moved from a 2:2 virtual address space split to 3:1, it was motivated by supercomputer applications, weather forecasting and nuclear explosion simulations and things, which can suck up as much compute as you can throw at them</span></div><div class="line" id="023739"><span class="nick" style="color:#6d2462"><a href="#023739" label="[02:37:39]">&lt;muurkha&gt;</a></span><span class="message">not a measly C++ compiler</span></div><div class="line" id="023820"><span class="nick" style="color:#6d2462"><a href="#023820" label="[02:38:20]">&lt;muurkha&gt;</a></span><span class="message">but I guess unconstrained resource use grows unconstrainedly</span></div><div class="line" id="025637"><span class="nick" style="color:#234e69"><a href="#025637" label="[02:56:37]">&lt;pabs3&gt;</a></span><span class="message">OOM is one thing, worse is when the compiler needs more memory than the available virtual address space. IIRC Debian hits that a lot on 32-bit, especially on MIPS IIRC</span></div><div class="line" id="025727"><span class="nick" style="color:#234e69"><a href="#025727" label="[02:57:27]">&lt;pabs3&gt;</a></span><span class="message">I think I read an LWN article about getting rid of that artificial split btw</span></div><div class="line" id="030343"><span class="nick" style="color:#6d2462"><a href="#030343" label="[03:03:43]">&lt;muurkha&gt;</a></span><span class="message">wouldn't be surprising but most of the possible gains were obtained with the move from 2:2 to 3:1</span></div><div class="line" id="030429"><span class="nick" style="color:#6d2462"><a href="#030429" label="[03:04:29]">&lt;muurkha&gt;</a></span><span class="message">even if you can reserve the entire memory space for userspace (say by switching mappings on kernel entry) you can never get more than another 33% increase</span></div><div class="line" id="030444"><span class="nick" style="color:#6d2462"><a href="#030444" label="[03:04:44]">&lt;muurkha&gt;</a></span><span class="message">well.  &lt;34%</span></div><div class="line" id="034333"><span class="nick" style="color:#6c3d55"><a href="#034333" label="[03:43:33]">&lt;oriansj&gt;</a></span><span class="message">there are very *GOOD* reason why x86 is generally only supported these days with PAE</span></div><div class="line" id="034503"><span class="nick" style="color:#6c3d55"><a href="#034503" label="[03:45:03]">&lt;oriansj&gt;</a></span><span class="message">but yeah, in this day and age, 32bit is dead for the Desktop. You can build everything essential just fine on 32bit but once you go video or web browser, just forget it.</span></div><div class="line" id="034703"><span class="nick" style="color:#6c3d55"><a href="#034703" label="[03:47:03]">&lt;oriansj&gt;</a></span><span class="message">my x200 is maxed out at 8GB of RAM but if I don't give it another 16GB of swap, there is no way to build rust to the level required to build mpv</span></div><div class="line" id="035021"><span class="nick" style="color:#6c3d55"><a href="#035021" label="[03:50:21]">&lt;oriansj&gt;</a></span><span class="message">I just wish the 65% keyboard form factor was available for the x200</span></div><div class="line" id="035131"><span class="nick" style="color:#6c3d55"><a href="#035131" label="[03:51:31]">&lt;oriansj&gt;</a></span><span class="message">because lets just be honest: <a rel="nofollow" href="https://keyboardable.com/wp-content/uploads/2021/02/Drop-Alt.jpg">https://keyboardable.com/wp-content/uploads/2021/02/Drop-Alt.jpg</a>  it is all one needs</span></div><div class="line" id="035216"><span class="nick" style="color:#d9d9d9"><a href="#035216" label="[03:52:16]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: yeah i'm doing python after my disk/curl PR, which should be done this weekend assuming e2fsprogs cooperates</span></div><div class="line" id="065808"><span class="nick" style="color:#bc80bd"><a href="#065808" label="[06:58:08]">&lt;midgardian[m]&gt;</a></span><span class="message">&lt;janneke&gt; &quot;goes to try an aarch64/arm...&quot; &lt;- I am curious about this, do you have bare metal hardware for these arches?</span></div><div class="line" id="070002"><span class="nick" style="color:#6c3d55"><a href="#070002" label="[07:00:02]">&lt;oriansj&gt;</a></span><span class="message">midgardian[m]: well ARM chips are pretty cheap and available but most likely he is going to be doing the work ontop of Linux on said chips.</span></div><div class="line" id="070037"><span class="nick" style="color:#6c3d55"><a href="#070037" label="[07:00:37]">&lt;oriansj&gt;</a></span><span class="message">possibly GNU Hurd if they finally got that port working</span></div><div class="line" id="070134"><span class="nick" style="color:#6c3d55"><a href="#070134" label="[07:01:34]">&lt;oriansj&gt;</a></span><span class="message">and if for some reason real hardware isn't available QEMU usually does a pretty good job</span></div><div class="line" id="070258"><span class="nick" style="color:#6c3d55"><a href="#070258" label="[07:02:58]">&lt;oriansj&gt;</a></span><span class="message">although sometimes there are important differences between real machines and QEMU behavior (like real hardware doesn't zero registers on exec *stares at RISC-V* for stupid reasons)</span></div><div class="line" id="070312"><span class="nick" style="color:#bc80bd"><a href="#070312" label="[07:03:12]">&lt;midgardian[m]&gt;</a></span><span class="message">&lt;doras&gt; &quot;freedesktop-sdk would still have...&quot; &lt;- What exactly is bootstrapping freedesktop-sdk useful for, the toolchain used to build binaries on Flathub?</span></div><div class="line" id="070530"><span class="nick" style="color:#6c3d55"><a href="#070530" label="[07:05:30]">&lt;oriansj&gt;</a></span><span class="message">well bootstrapping Flatpack binaries seems the obvious answer</span></div><div class="line" id="070918"><span class="nick" style="color:#bc80bd"><a href="#070918" label="[07:09:18]">&lt;midgardian[m]&gt;</a></span><span class="message">&lt;muurkha&gt; &quot;when Linux moved from a 2:2...&quot; &lt;- Where can I read about this 2:2 vs. 3:1 virtual address space dichotomy, I am uninformed...</span></div><div class="line" id="071111"><span class="nick" style="color:#bc80bd"><a href="#071111" label="[07:11:11]">&lt;midgardian[m]&gt;</a></span><span class="message">&lt;oriansj&gt; &quot;I just wish the 65% keyboard...&quot; &lt;- What does it mean &quot;65% keyboard&quot;?</span></div><div class="line" id="071202"><span class="nick" style="color:#6c3d55"><a href="#071202" label="[07:12:02]">&lt;oriansj&gt;</a></span><span class="message">midgardian[m]: 65% keyboard is a keyboard with 67 or 68 keys</span></div><div class="line" id="071211"><span class="nick" style="color:#bc80bd"><a href="#071211" label="[07:12:11]">&lt;midgardian[m]&gt;</a></span><span class="message">&lt;oriansj&gt; &quot;possibly GNU Hurd if they...&quot; &lt;- I only ever heard of i686 Hurd, there is work on armhf/aarch64?</span></div><div class="line" id="071258"><span class="nick" style="color:#bc80bd"><a href="#071258" label="[07:12:58]">&lt;midgardian[m]&gt;</a></span><span class="message">oriansj: How many keys does your X200 have?</span></div><div class="line" id="071348"><span class="nick" style="color:#bc80bd"><a href="#071348" label="[07:13:48]">&lt;midgardian[m]&gt;</a></span><span class="message">&lt;oriansj&gt; &quot;well bootstrapping Flatpack...&quot; &lt;- Wouldn't using something like Guix to build them be potentially more secure?</span></div><div class="line" id="071359"><span class="nick" style="color:#bc80bd"><a href="#071359" label="[07:13:59]">&lt;midgardian[m]&gt;</a></span><span class="message">midgardian[m]: (after bootstrapping)</span></div><div class="line" id="071536"><span class="nick" style="color:#6c3d55"><a href="#071536" label="[07:15:36]">&lt;oriansj&gt;</a></span><span class="message">midgardian[m]: The kernel at the heart of GNU Hurd is GNU Mach which has multiple ports: <a rel="nofollow" href="https://www.gnu.org/software/hurd/microkernel/mach/gnumach/ports.html">https://www.gnu.org/software/hurd/microkernel/mach/gnumach/ports.html</a>  but it does look like they are lacking developers to get them into a good enough state. Hence my comment.</span></div><div class="line" id="071708"><span class="nick" style="color:#6c3d55"><a href="#071708" label="[07:17:08]">&lt;oriansj&gt;</a></span><span class="message">midgardian[m]: all x200 computers have 94 keys</span></div><div class="line" id="071818"><span class="nick" style="color:#6c3d55"><a href="#071818" label="[07:18:18]">&lt;oriansj&gt;</a></span><span class="message">midgardian[m]: yes and so? if someone wants to bootstrap something here that is fine; no judgement if they are doing the work.</span></div><div class="line" id="072000"><span class="nick" style="color:#6c3d55"><a href="#072000" label="[07:20:00]">&lt;oriansj&gt;</a></span><span class="message">to better explain the keyboard question: <a rel="nofollow" href="https://www.aptrio.com/what-is-a-65-keyboard/">https://www.aptrio.com/what-is-a-65-keyboard/</a> </span></div><div class="line" id="072502"><span class="nick" style="color:#6c3d55"><a href="#072502" label="[07:25:02]">&lt;oriansj&gt;</a></span><span class="message">people are encouraged to bootstrap anything they *feel* should be bootstrapped. That doesn't mean other people will agree with it, nor does it mean that other people will use your work. Only that we encourage progress on the shared goal of bootstrapping the world.</span></div><div class="line" id="072534"><span class="nick" style="color:#6d2462"><a href="#072534" label="[07:25:34]">&lt;muurkha&gt;</a></span><span class="message">oriansj: my girlfriend's 32-bit Raspberry Pi 400 seems to do okay with video and web browsers most of the time</span></div><div class="line" id="072744"><span class="nick" style="color:#6c3d55"><a href="#072744" label="[07:27:44]">&lt;oriansj&gt;</a></span><span class="message">muurkha: well given 4 CPU cores and the Broadcom VideoCore VI which supports native 4K; not surprising. But I was speaking more of the requirements for building said software rather than just compiling it.</span></div><div class="line" id="072911"><span class="nick" style="color:#6d2462"><a href="#072911" label="[07:29:11]">&lt;muurkha&gt;</a></span><span class="message">yeah, I don't think she can compile Chromium or Firefox on it :(</span></div><div class="line" id="073053"><span class="nick" style="color:#6c3d55"><a href="#073053" label="[07:30:53]">&lt;oriansj&gt;</a></span><span class="message">midgardian[m]: that being said, please note you are free to point out why doing X is superior to doing Y and argue your case but the ultimate decision is made by the people doing the work. Because &quot;Who does decides&quot; and the best way to make sure the things you want done are done in the way you want them done is to do the work.</span></div><div class="line" id="073145"><span class="nick" style="color:#6c3d55"><a href="#073145" label="[07:31:45]">&lt;oriansj&gt;</a></span><span class="message">muurkha: or RUST (which rules out things like MPV)</span></div><div class="line" id="073219"><span class="nick" style="color:#6d2462"><a href="#073219" label="[07:32:19]">&lt;muurkha&gt;</a></span><span class="message">ultimately if X and Y are means for doing the real objective Z then ultimately you don't know whether X or Y is better until you've done both</span></div><div class="line" id="073257"><span class="nick" style="color:#6c3d55"><a href="#073257" label="[07:32:57]">&lt;oriansj&gt;</a></span><span class="message">muurkha: or if the answer is obvious upon inspection.</span></div><div class="line" id="073317"><span class="nick" style="color:#6d2462"><a href="#073317" label="[07:33:17]">&lt;muurkha&gt;</a></span><span class="message">sometimes obvious things are wrong ;)</span></div><div class="line" id="073331"><span class="nick" style="color:#6d2462"><a href="#073331" label="[07:33:31]">&lt;muurkha&gt;</a></span><span class="message">midgardian[m]: might be hard to find info these days, it's been 20 years or so</span></div><div class="line" id="073356"><span class="nick" style="color:#6d2462"><a href="#073356" label="[07:33:56]">&lt;muurkha&gt;</a></span><span class="message">there's an overview of how things are now at <a rel="nofollow" href="https://www.kernel.org/doc/gorman/html/understand/understand007.html">https://www.kernel.org/doc/gorman/html/understand/understand007.html</a> </span></div><div class="line" id="073435"><span class="nick" style="color:#6c3d55"><a href="#073435" label="[07:34:35]">&lt;oriansj&gt;</a></span><span class="message">and sometimes obvious things are so obviously the right solution, the other solutions seem like a huge waste of time.</span></div><div class="line" id="073531"><span class="nick" style="color:#6d2462"><a href="#073531" label="[07:35:31]">&lt;muurkha&gt;</a></span><span class="message">yeah.  and often they actually are; you can find lots of examples in the literature of the 60s and 70s</span></div><div class="line" id="073610"><span class="nick" style="color:#6d2462"><a href="#073610" label="[07:36:10]">&lt;muurkha&gt;</a></span><span class="message">I think you can *run* rustc on a 32-bit machine?</span></div><div class="line" id="073622"><span class="nick" style="color:#6c3d55"><a href="#073622" label="[07:36:22]">&lt;oriansj&gt;</a></span><span class="message">run yes, build no</span></div><div class="line" id="073738"><span class="nick" style="color:#6d2462"><a href="#073738" label="[07:37:38]">&lt;muurkha&gt;</a></span><span class="message">midgardian[m]: <a rel="nofollow" href="https://lwn.net/Articles/75174/">https://lwn.net/Articles/75174/</a>  talks about Ingo Molnar's 4G/4G patch which does what I described</span></div><div class="line" id="075551"><span class="nick" style="color:#bc80bd"><a href="#075551" label="[07:55:51]">&lt;midgardian[m]&gt;</a></span><span class="message">&lt;oriansj&gt; &quot;midgardian: that being said...&quot; &lt;- Okay this is fine, I did not make a statement about superiority though, I asked a question.</span></div><div class="line" id="075626"><span class="nick" style="color:#6c3d55"><a href="#075626" label="[07:56:26]">&lt;oriansj&gt;</a></span><span class="message">midgardian[m]: thank you for clarifying</span></div><div class="line" id="075759"><span class="nick" style="color:#bc80bd"><a href="#075759" label="[07:57:59]">&lt;midgardian[m]&gt;</a></span><span class="message">&lt;oriansj&gt; &quot;muurkha: well given 4 CPU...&quot; &lt;- What is the difference between building the software and &quot;just compiling&quot; it?  This is worded as if they are different</span></div><div class="line" id="075948"><span class="nick" style="color:#6c3d55"><a href="#075948" label="[07:59:48]">&lt;oriansj&gt;</a></span><span class="message">midgardian[m]: not building and compiling; running and compiling</span></div><div class="line" id="080356"><span class="nick" style="color:#6d2462"><a href="#080356" label="[08:03:56]">&lt;muurkha&gt;</a></span><span class="message">midgardian[m]: I don't think rustc needs 3 GiB of address space to compile and link hello.rs</span></div><div class="line" id="080531"><span class="nick" style="color:#bc80bd"><a href="#080531" label="[08:05:31]">&lt;midgardian[m]&gt;</a></span><span class="message">oriansj This is what your message said : &quot;But I was speaking more of the requirements for building said software rather than just compiling it.&quot;</span></div><div class="line" id="080601"><span class="nick" style="color:#bc80bd"><a href="#080601" label="[08:06:01]">&lt;midgardian[m]&gt;</a></span><span class="message">Did you mean to s/compiling/running ?</span></div><div class="line" id="080830"><span class="nick" style="color:#6c3d55"><a href="#080830" label="[08:08:30]">&lt;oriansj&gt;</a></span><span class="message">midgardian[m]: as in to build the rust compiler vs running the rust compiler to build rust programs</span></div><div class="line" id="080906"><span class="nick" style="color:#6d2462"><a href="#080906" label="[08:09:06]">&lt;muurkha&gt;</a></span><span class="message">confusing wording</span></div><div class="line" id="080951"><span class="nick" style="color:#bc80bd"><a href="#080951" label="[08:09:51]">&lt;midgardian[m]&gt;</a></span><span class="message">Ohhh okay so &quot;But I was speaking more of the requirements for building the Rust compiler rather than just using it to compile Rust code.&quot;</span></div><div class="line" id="081001"><span class="nick" style="color:#bc80bd"><a href="#081001" label="[08:10:01]">&lt;midgardian[m]&gt;</a></span><span class="message">Is that right?</span></div><div class="line" id="081004"><span class="nick" style="color:#bc80bd"><a href="#081004" label="[08:10:04]">&lt;midgardian[m]&gt;</a></span><span class="message">Sorry I got confused.</span></div><div class="line" id="081104"><span class="nick" style="color:#6c3d55"><a href="#081104" label="[08:11:04]">&lt;oriansj&gt;</a></span><span class="message">midgardian[m]: yes that could be a way of better phrasing my statement</span></div><div class="line" id="081139"><span class="nick" style="color:#6d2462"><a href="#081139" label="[08:11:39]">&lt;muurkha&gt;</a></span><span class="message">communication: it's hard</span></div><div class="line" id="093942"><span class="nick" style="color:#8dd3c7"><a href="#093942" label="[09:39:42]">&lt;doras&gt;</a></span><span class="message">midgardian: among other things, yes. Beyond its use in Flatpak, it's also used as the base of GNOME OS, has Docker images publicly available and some additional use cases.</span></div><div class="line" id="094330"><span class="nick" style="color:#8dd3c7"><a href="#094330" label="[09:43:30]">&lt;doras&gt;</a></span><span class="message">freedesktop-sdk currently uses its previous stable version as the bootstrap seed of its current version. We've actually had cases where we lost the previous image due to hardware and software failures. We managed to salvage it using local backups that a maintainer happened to have had, but it's hardly a great backup plan for a project at this scale.</span></div><div class="line" id="094753"><span class="nick" style="color:#8dd3c7"><a href="#094753" label="[09:47:53]">&lt;doras&gt;</a></span><span class="message">In one case we had to rebuild a few versions until we reached the latest one, because each depends on the previous.</span></div><div class="line" id="094923"><span class="nick" style="color:#8dd3c7"><a href="#094923" label="[09:49:23]">&lt;doras&gt;</a></span><span class="message">Becoming bootstrappable would allow it to fully bootstrap every version even if we lose the image, as long as all the bootstrap seeds and sources are properly backed up.</span></div><div class="line" id="095521"><span class="nick" style="color:#8dd3c7"><a href="#095521" label="[09:55:21]">&lt;doras&gt;</a></span><span class="message">Aside from the practical reasons, it's also a fun challenge :)</span></div><div class="line" id="113256"><span class="nick" style="color:#bc80bd"><a href="#113256" label="[11:32:56]">&lt;midgardian[m]&gt;</a></span><span class="message"> <a rel="nofollow" href="https://associationsnow.com/2022/05/the-way-things-were-why-open-access-to-the-acm-digital-library-matters/">https://associationsnow.com/2022/05/the-way-things-were-why-open-access-to-the-acm-digital-library-matters/</a> </span></div><div class="line" id="113331"><span class="nick" style="color:#bc80bd"><a href="#113331" label="[11:33:31]">&lt;midgardian[m]&gt;</a></span><span class="message">midgardian[m]: Anyone know where to get the DB post-2000?</span></div><div class="line" id="113336"><span class="nick" style="color:#3c5b35"><a href="#113336" label="[11:33:36]">*</a></span><span class="message">midgardian[m] grins evilly</span></div><div class="line" id="113529"><span class="nick" style="color:#bc80bd"><a href="#113529" label="[11:35:29]">&lt;midgardian[m]&gt;</a></span><span class="message">Actually they don't even make a way to download an archive pre-2000 I can find....</span></div><div class="line" id="145732"><span class="nick" style="color:#6c3d55"><a href="#145732" label="[14:57:32]">&lt;oriansj&gt;</a></span><span class="message">midgardian[m]: they only enabled single downloads</span></div><div class="line" id="151559"><span class="nick" style="color:#6b8072"><a href="#151559" label="[15:15:59]">&lt;stikonas&gt;</a></span><span class="message">fossy, doras: new PR <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/170">https://github.com/fosslinux/live-bootstrap/pull/170</a>  for checksums</span></div><div class="line" id="155908"><span class="nick" style="color:#8dd3c7"><a href="#155908" label="[15:59:08]">&lt;doras&gt;</a></span><span class="message">stikonas: I'll have a few conflicts with this</span></div><div class="line" id="155918"><span class="nick" style="color:#6b8072"><a href="#155918" label="[15:59:18]">&lt;stikonas&gt;</a></span><span class="message">oh?</span></div><div class="line" id="155958"><span class="nick" style="color:#6b8072"><a href="#155958" label="[15:59:58]">&lt;stikonas&gt;</a></span><span class="message">I thought it's quite small and not likely to conflict :(</span></div><div class="line" id="160009"><span class="nick" style="color:#8dd3c7"><a href="#160009" label="[16:00:09]">&lt;doras&gt;</a></span><span class="message">Nothing significant though.</span></div><div class="line" id="160015"><span class="nick" style="color:#6b8072"><a href="#160015" label="[16:00:15]">&lt;stikonas&gt;</a></span><span class="message">oh ok</span></div><div class="line" id="160048"><span class="nick" style="color:#8dd3c7"><a href="#160048" label="[16:00:48]">&lt;doras&gt;</a></span><span class="message">I'm running a final bootstrap to verify everything works.</span></div><div class="line" id="160054"><span class="nick" style="color:#8dd3c7"><a href="#160054" label="[16:00:54]">&lt;doras&gt;</a></span><span class="message">I found a small issue.</span></div><div class="line" id="165110"><span class="nick" style="color:#8dd3c7"><a href="#165110" label="[16:51:10]">&lt;doras&gt;</a></span><span class="message">I feel that our mkdir calls, transfer between sysa/sysb/sysc and directory structure in general is done in a very freestyle way that makes it a bit hard to extend without creating more mess.</span></div><div class="line" id="165201"><span class="nick" style="color:#8dd3c7"><a href="#165201" label="[16:52:01]">&lt;doras&gt;</a></span><span class="message">It improved a bit with your last MR, stikonas @stikonas:libera.chat, but it's still not great.</span></div><div class="line" id="165427"><span class="nick" style="color:#8dd3c7"><a href="#165427" label="[16:54:27]">&lt;doras&gt;</a></span><span class="message">We also have many environment variables set all over that either don't have to be exported at all, or are simply being inherited from kaem that exports everything. Some are set but are actually unused.</span></div><div class="line" id="165840"><span class="nick" style="color:#8dd3c7"><a href="#165840" label="[16:58:40]">&lt;doras&gt;</a></span><span class="message">So while I tried to keep my changes to the minimum, I feel like I made more mess.</span></div><div class="line" id="171700"><span class="nick" style="color:#af8d2f"><a href="#171700" label="[17:17:00]">&lt;bauen1&gt;</a></span><span class="message">it's also a bit hard to reenter the sysc chroot with the correct variables exported because of that</span></div><div class="line" id="172254"><span class="nick" style="color:#6b8072"><a href="#172254" label="[17:22:54]">&lt;stikonas&gt;</a></span><span class="message">bauen1: last point can probably be fixed by writing out .bashrc</span></div><div class="line" id="172305"><span class="nick" style="color:#6b8072"><a href="#172305" label="[17:23:05]">&lt;stikonas&gt;</a></span><span class="message">but yes, with packaging stuff we have more env variables now</span></div><div class="line" id="172535"><span class="nick" style="color:#6b8072"><a href="#172535" label="[17:25:35]">&lt;stikonas&gt;</a></span><span class="message">doras: well, some things can definitely be simplified</span></div><div class="line" id="172613"><span class="nick" style="color:#6b8072"><a href="#172613" label="[17:26:13]">&lt;stikonas&gt;</a></span><span class="message">not much we can do about kaem exporting variables right now</span></div><div class="line" id="172623"><span class="nick" style="color:#6b8072"><a href="#172623" label="[17:26:23]">&lt;stikonas&gt;</a></span><span class="message">but that only lasts in sysa</span></div><div class="line" id="172645"><span class="nick" style="color:#6b8072"><a href="#172645" label="[17:26:45]">&lt;stikonas&gt;</a></span><span class="message">and if you want, you can create clean environment once you build coreutils and env</span></div><div class="line" id="172755"><span class="nick" style="color:#8dd3c7"><a href="#172755" label="[17:27:55]">&lt;doras&gt;</a></span><span class="message">stikonas: I was thinking of clearing out the environment variables at different stages.</span></div><div class="line" id="172834"><span class="nick" style="color:#8dd3c7"><a href="#172834" label="[17:28:34]">&lt;doras&gt;</a></span><span class="message">But haven't had a chance to experiment with this yet.</span></div><div class="line" id="172927"><span class="nick" style="color:#6b8072"><a href="#172927" label="[17:29:27]">&lt;stikonas&gt;</a></span><span class="message">well, sysc does clear them</span></div><div class="line" id="173009"><span class="nick" style="color:#6b8072"><a href="#173009" label="[17:30:09]">&lt;stikonas&gt;</a></span><span class="message">e.g. <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysc/run.sh#L34">https://github.com/fosslinux/live-bootstrap/blob/master/sysc/run.sh#L34</a> </span></div><div class="line" id="173115"><span class="nick" style="color:#8dd3c7"><a href="#173115" label="[17:31:15]">&lt;doras&gt;</a></span><span class="message">Interesting.</span></div><div class="line" id="173216"><span class="nick" style="color:#8dd3c7"><a href="#173216" label="[17:32:16]">&lt;doras&gt;</a></span><span class="message">So maybe we could do the same when running bash for the first time in sysa.</span></div><div class="line" id="173320"><span class="nick" style="color:#8dd3c7"><a href="#173320" label="[17:33:20]">&lt;doras&gt;</a></span><span class="message">I'm guessing kexec cleans the environment as well, considering a new kernel and initramfs are loaded.</span></div><div class="line" id="190129"><span class="nick" style="color:#2e2a4a"><a href="#190129" label="[19:01:29]">&lt;stikonas[m]&gt;</a></span><span class="message">doras: bash is built before env if I remember correctly</span></div><div class="line" id="190147"><span class="nick" style="color:#2e2a4a"><a href="#190147" label="[19:01:47]">&lt;stikonas[m]&gt;</a></span><span class="message">kexec obviously cleans env</span></div><div class="line" id="190233"><span class="nick" style="color:#2e2a4a"><a href="#190233" label="[19:02:33]">&lt;stikonas[m]&gt;</a></span><span class="message">But not chroot</span></div><div class="line" id="193029"><span class="nick" style="color:#6c3d55"><a href="#193029" label="[19:30:29]">&lt;oriansj&gt;</a></span><span class="message">well kaem with --init-mode will clear out any and all environmental variables if you need that fresh shell feeling in your bootstrap.</span></div><div class="line" id="194517"><span class="nick" style="color:#6b8072"><a href="#194517" label="[19:45:17]">&lt;stikonas&gt;</a></span><span class="message">we do want to transfer some of them...</span></div><div class="line" id="194605"><span class="nick" style="color:#6b8072"><a href="#194605" label="[19:46:05]">&lt;stikonas&gt;</a></span><span class="message">though one can do osme tricks to achieve that</span></div><div class="line" id="194723"><span class="nick" style="color:#6b8072"><a href="#194723" label="[19:47:23]">&lt;stikonas&gt;</a></span><span class="message">i.e. once bash is built, save wanted env variables to .bashrc, run kaem with --init-mode that runs another bash</span></div><div class="line" id="195231"><span class="nick" style="color:#8dd3c7"><a href="#195231" label="[19:52:31]">&lt;doras&gt;</a></span><span class="message">stikonas: I think it's ready for review: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/171">https://github.com/fosslinux/live-bootstrap/pull/171</a> </span></div><div class="line" id="195432"><span class="nick" style="color:#8dd3c7"><a href="#195432" label="[19:54:32]">&lt;doras&gt;</a></span><span class="message">I'll upload the MR updating mes once its bootstrap completes.</span></div><div class="line" id="200834"><span class="nick" style="color:#6b8072"><a href="#200834" label="[20:08:34]">&lt;stikonas&gt;</a></span><span class="message">doras: I spotted a couple of unrelated documentation issues. Do you want me to merge it and for me to fix them? Or can you fix them</span></div><div class="line" id="202057"><span class="nick" style="color:#8dd3c7"><a href="#202057" label="[20:20:57]">&lt;doras&gt;</a></span><span class="message">stikonas: however you prefer.</span></div><div class="line" id="202132"><span class="nick" style="color:#8dd3c7"><a href="#202132" label="[20:21:32]">&lt;doras&gt;</a></span><span class="message">I'm less likely to spot documentation issues being less familiar with the project :)</span></div><div class="line" id="202158"><span class="nick" style="color:#8dd3c7"><a href="#202158" label="[20:21:58]">&lt;doras&gt;</a></span><span class="message">I only updated the parts that changed with my PR.</span></div><div class="line" id="202332"><span class="nick" style="color:#6b8072"><a href="#202332" label="[20:23:32]">&lt;stikonas&gt;</a></span><span class="message">ok, I can merge it and update...</span></div><div class="line" id="203258"><span class="nick" style="color:#6b8072"><a href="#203258" label="[20:32:58]">&lt;stikonas&gt;</a></span><span class="message">doras: I updated it</span></div><div class="line" id="203302"><span class="nick" style="color:#8dd3c7"><a href="#203302" label="[20:33:02]">&lt;doras&gt;</a></span><span class="message">stikonas: I think we could improve upon my checksum changes in the future to reach a point that we can use &quot;cp -r&quot; from a single directory in sysc and into the git worktree to overwrite all checksums in live-bootstrap.</span></div><div class="line" id="203308"><span class="nick" style="color:#6b8072"><a href="#203308" label="[20:33:08]">&lt;stikonas&gt;</a></span><span class="message">and only very minor merge conflict in my other PR</span></div><div class="line" id="203320"><span class="nick" style="color:#6b8072"><a href="#203320" label="[20:33:20]">&lt;stikonas&gt;</a></span><span class="message">yeah, possibly</span></div><div class="line" id="203327"><span class="nick" style="color:#6b8072"><a href="#203327" label="[20:33:27]">&lt;stikonas&gt;</a></span><span class="message">anyway, I'm away for some time</span></div><div class="line" id="203329"><span class="nick" style="color:#8dd3c7"><a href="#203329" label="[20:33:29]">&lt;doras&gt;</a></span><span class="message">I think it would be nice to also split the large sha256 into smaller ones per-package at that point.</span></div><div class="line" id="203354"><span class="nick" style="color:#8dd3c7"><a href="#203354" label="[20:33:54]">&lt;doras&gt;</a></span><span class="message">Then we wouldn't need to grep it</span></div><div class="line" id="203414"><span class="nick" style="color:#8dd3c7"><a href="#203414" label="[20:34:14]">&lt;doras&gt;</a></span><span class="message">stikonas: thanks!</span></div><div class="line" id="204616"><span class="nick" style="color:#6c3d55"><a href="#204616" label="[20:46:16]">&lt;oriansj&gt;</a></span><span class="message">doras: actually you are more likely to spot documentation issues related to user performed steps because you are less familiar with the project.</span></div><div class="line" id="204729"><span class="nick" style="color:#8dd3c7"><a href="#204729" label="[20:47:29]">&lt;doras&gt;</a></span><span class="message">oriansj: in theory, this can be true. However, I'm not usually the type to read documentation when source code is available :)</span></div><div class="line" id="204738"><span class="nick" style="color:#6c3d55"><a href="#204738" label="[20:47:38]">&lt;oriansj&gt;</a></span><span class="message">aka the documents say do a b d but forgot to include step c and here is the error one would see because they missed that step in the documentation.</span></div><div class="line" id="204756"><span class="nick" style="color:#6c3d55"><a href="#204756" label="[20:47:56]">&lt;oriansj&gt;</a></span><span class="message">doras: completely fair</span></div><div class="line" id="204820"><span class="nick" style="color:#6c3d55"><a href="#204820" label="[20:48:20]">&lt;oriansj&gt;</a></span><span class="message">but anything that was a gotcha for you should be documented.</span></div><div class="line" id="205251"><span class="nick" style="color:#8dd3c7"><a href="#205251" label="[20:52:51]">&lt;doras&gt;</a></span><span class="message">Indeed.</span></div><div class="line" id="205323"><span class="nick" style="color:#8dd3c7"><a href="#205323" label="[20:53:23]">&lt;doras&gt;</a></span><span class="message">fossy, stikonas: I created a PR to update mes: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/172">https://github.com/fosslinux/live-bootstrap/pull/172</a> </span></div><div class="line" id="212224"><span class="nick" style="color:#6b8072"><a href="#212224" label="[21:22:24]">&lt;stikonas&gt;</a></span><span class="message">hmm, maybe I'll move checksums out of distfiles into sysc*/ directory</span></div><div class="line" id="233418"><span class="nick" style="color:#8dd3c7"><a href="#233418" label="[23:34:18]">&lt;doras&gt;</a></span><span class="message">stikonas: probably a good idea.</span></div><div class="line" id="233447"><span class="nick" style="color:#8dd3c7"><a href="#233447" label="[23:34:47]">&lt;doras&gt;</a></span><span class="message">By the way, I opened this PR for a tiny follow-up fix: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/173">https://github.com/fosslinux/live-bootstrap/pull/173</a> </span></div><div class="line" id="233607"><span class="nick" style="color:#8dd3c7"><a href="#233607" label="[23:36:07]">&lt;doras&gt;</a></span><span class="message">And with that, rootless bootstrap works again. At least for me, locally.</span></div><div class="line" id="234239"><span class="nick" style="color:#8dd3c7"><a href="#234239" label="[23:42:39]">&lt;doras&gt;</a></span><span class="message">The last open issue is to figure out what to do with the fact that we can't mount the tmp and sysc/tmp directories as tmpfs without root. Or actually can mount them as tmpfs using mount namespaces, but then the host can't access them.</span></div><div class="line" id="235103"><span class="nick" style="color:#6b8072"><a href="#235103" label="[23:51:03]">&lt;stikonas&gt;</a></span><span class="message">doras: can you not use normal directories without tmpfs for rootless?</span></div><div class="line" id="235126"><span class="nick" style="color:#8dd3c7"><a href="#235126" label="[23:51:26]">&lt;doras&gt;</a></span><span class="message">I could, and I'm doing it locally.</span></div><div class="line" id="235140"><span class="nick" style="color:#6b8072"><a href="#235140" label="[23:51:40]">&lt;stikonas&gt;</a></span><span class="message">doras: actually, why do we even have to set chmod there?</span></div><div class="line" id="235147"><span class="nick" style="color:#6b8072"><a href="#235147" label="[23:51:47]">&lt;stikonas&gt;</a></span><span class="message">does it not work without chmod at all?</span></div><div class="line" id="235206"><span class="nick" style="color:#6b8072"><a href="#235206" label="[23:52:06]">&lt;stikonas&gt;</a></span><span class="message">but yes, +x wouldn't work on chmod from stage0-posix</span></div><div class="line" id="235215"><span class="nick" style="color:#6b8072"><a href="#235215" label="[23:52:15]">&lt;stikonas&gt;</a></span><span class="message">that one only understands octal permissions</span></div><div class="line" id="235445"><span class="nick" style="color:#8dd3c7"><a href="#235445" label="[23:54:45]">&lt;doras&gt;</a></span><span class="message">stikonas: it may work, I can try it. Though it seems like a good practice to set proper permissions for scripts that we actually execute instead of relying on catm's default.</span></div><div class="line" id="235525"><span class="nick" style="color:#8dd3c7"><a href="#235525" label="[23:55:25]">&lt;doras&gt;</a></span><span class="message">Which I think is u+r only, or something like this.</span></div><div class="line" id="235623"><span class="nick" style="color:#6b8072"><a href="#235623" label="[23:56:23]">&lt;stikonas&gt;</a></span><span class="message">well, we can set it but executable permission is not necessary for scripts that are not run as ./</span></div><div class="line" id="235641"><span class="nick" style="color:#6b8072"><a href="#235641" label="[23:56:41]">&lt;stikonas&gt;</a></span><span class="message">but if you think it's better to set them, then ok...</span></div><div class="line" id="235900"><span class="nick" style="color:#8dd3c7"><a href="#235900" label="[23:59:00]">&lt;doras&gt;</a></span><span class="message">I sometimes chroot into the sysa's or sysc's sysroots for testing purposes, or to resume a build that failed. It may be useful to execute run2.kaem without having to change its permissions.</span></div><div class="line" id="235954"><span class="nick" style="color:#6b8072"><a href="#235954" label="[23:59:54]">&lt;stikonas&gt;</a></span><span class="message">yeah, ok</span></div><br /></div></body></html>