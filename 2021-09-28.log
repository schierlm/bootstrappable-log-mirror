<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-09-28.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000146"><span class="nick" style="color:#8dd3c7"><a href="#000146" label="[00:01:46]">&lt;oriansj&gt;</a></span><span class="message">xentrac: some problems map better to certain languages. However when it comes down to what language to learn, it depends entirely on the goal.</span></div><div class="line" id="000617"><span class="nick">***</span><span class="message notice">Server sets mode: +cnt </span></div><div class="line" id="000643"><span class="nick" style="color:#2e2a4a"><a href="#000643" label="[00:06:43]">&lt;stikonas&gt;</a></span><span class="message">oriansj: not sure if you saw my 3 messages above ^^ (since you disconnected)</span></div><div class="line" id="000752"><span class="nick" style="color:#2e2a4a"><a href="#000752" label="[00:07:52]">&lt;stikonas&gt;</a></span><span class="message">anyway M2-Planet would produce just the same issues...</span></div><div class="line" id="000830"><span class="nick" style="color:#8dd3c7"><a href="#000830" label="[00:08:30]">&lt;oriansj&gt;</a></span><span class="message">M2-Planet would produce far easier to debug issues.</span></div><div class="line" id="000835"><span class="nick" style="color:#6b8072"><a href="#000835" label="[00:08:35]">&lt;xentrac&gt;</a></span><span class="message">oriansj: yeah, that's true.  and some problems become much easier, sometimes going from intractable to tractable, with a particular mode of thinking — and sometimes that mode of thinking is best embodied as a language</span></div><div class="line" id="000853"><span class="nick" style="color:#2e2a4a"><a href="#000853" label="[00:08:53]">&lt;stikonas&gt;</a></span><span class="message">oriansj: yes, it might be easier to debug, but I already found the problem...</span></div><div class="line" id="000900"><span class="nick" style="color:#2e2a4a"><a href="#000900" label="[00:09:00]">&lt;stikonas&gt;</a></span><span class="message">it's just that the fix is not obvious</span></div><div class="line" id="001006"><span class="nick" style="color:#2e2a4a"><a href="#001006" label="[00:10:06]">&lt;stikonas&gt;</a></span><span class="message">I was actually using GAS version of M0 for debugging</span></div><div class="line" id="001015"><span class="nick" style="color:#2e2a4a"><a href="#001015" label="[00:10:15]">&lt;stikonas&gt;</a></span><span class="message">that one has proper debug symbols</span></div><div class="line" id="001147"><span class="nick" style="color:#2e2a4a"><a href="#001147" label="[00:11:47]">&lt;stikonas&gt;</a></span><span class="message">so was alright for debugging purposes</span></div><div class="line" id="002300"><span class="nick" style="color:#80b1d3"><a href="#002300" label="[00:23:00]">&lt;jackhill&gt;</a></span><span class="message">Irvise: oh, you're interested in Ada bootstapping too, neat!</span></div><div class="line" id="095548"><span class="nick" style="color:#6d2462"><a href="#095548" label="[09:55:48]">&lt;Irvise&gt;</a></span><span class="message">oriansj: I saw the Wiki link. I had forgotten about AdaEd. New versions may not work, but maybe GCC 4.9 could... Also, AdaCore is more or less killing GNAT GPLv3 and they are making the FSF builds the standard. How soon will they be done with the transition? I do not know, but I think they are aiming at next year.</span></div><div class="line" id="095756"><span class="nick" style="color:#6d2462"><a href="#095756" label="[09:57:56]">&lt;Irvise&gt;</a></span><span class="message">fossy: yup I got that far. Issue is that Chicken comes with some pregenerated files (generated by itself). So that is a clear no for a &quot;simple&quot; bootstrappable build. My goal was to see it being accepted as soon as possible. Just because I can build it, does not mean that it would be accepted as fully bootstrappable...</span></div><div class="line" id="100333"><span class="nick" style="color:#6d2462"><a href="#100333" label="[10:03:33]">&lt;Irvise&gt;</a></span><span class="message">And I wanted to try out Chicken because I belive (believed) that it could be bootstrapped much earlier. It just needs GNU Make, a C library and a C compiler. TCC is already know to work, also Musl C. That would mean that if it can be compiled with GNU Make 3.80, it could be bootstrapped incredibly early!</span></div><div class="line" id="100411"><span class="nick" style="color:#6d2462"><a href="#100411" label="[10:04:11]">&lt;Irvise&gt;</a></span><span class="message">It is not &quot;better&quot; than say Guile, but it is just as capable and much smaller. And it is a decently fast Scheme implementation.</span></div><div class="line" id="100420"><span class="nick" style="color:#6d2462"><a href="#100420" label="[10:04:20]">&lt;Irvise&gt;</a></span><span class="message">jackhill: yup :)</span></div><div class="line" id="100425"><span class="nick" style="color:#234e69"><a href="#100425" label="[10:04:25]">&lt;fossy&gt;</a></span><span class="message">i see</span></div><div class="line" id="100449"><span class="nick" style="color:#234e69"><a href="#100449" label="[10:04:49]">&lt;fossy&gt;</a></span><span class="message">that is good and all, however, what value does it add to the bootstrap that early? i think you may find it easier to bootstrap later</span></div><div class="line" id="102439"><span class="nick" style="color:#6d2462"><a href="#102439" label="[10:24:39]">&lt;Irvise&gt;</a></span><span class="message">Having a fully capable Scheme early on could allow for some bootstrapping toolchains to be closer to the seed. Also, some complexity in the chain could be solve by &quot;reprogramming&quot; some tools in scheme (see gash).</span></div><div class="line" id="114753"><span class="nick" style="color:#234e69"><a href="#114753" label="[11:47:53]">&lt;fossy&gt;</a></span><span class="message">gash would be useful tbh</span></div><div class="line" id="121733"><span class="nick" style="color:#6d2462"><a href="#121733" label="[12:17:33]">&lt;Irvise&gt;</a></span><span class="message">Also, Chicken is R5RS, but with an &quot;egg&quot; (chicken jargon for extention) it becomes R7RS (probably the most portable Scheme) and it can directly expose-consume C code.</span></div><div class="line" id="121806"><span class="nick" style="color:#6d2462"><a href="#121806" label="[12:18:06]">&lt;Irvise&gt;</a></span><span class="message">I recently did a POC of Ada - Scheme: <a rel="nofollow" href="https://github.com/Irvise/Ada_Scheme_Example">https://github.com/Irvise/Ada_Scheme_Example</a> </span></div><div class="line" id="121809"><span class="nick" style="color:#2e2a4a"><a href="#121809" label="[12:18:09]">&lt;stikonas&gt;</a></span><span class="message">fossy: well, it might let us use .helpers.sh easier but my main hope is to build musl before bash (and hence yacc)</span></div><div class="line" id="121819"><span class="nick" style="color:#2e2a4a"><a href="#121819" label="[12:18:19]">&lt;stikonas&gt;</a></span><span class="message">s/easier/earlier/</span></div><div class="line" id="121845"><span class="nick" style="color:#2e2a4a"><a href="#121845" label="[12:18:45]">&lt;stikonas&gt;</a></span><span class="message">that said, I should at some point try to move the first version of flex after musl</span></div><div class="line" id="121904"><span class="nick" style="color:#2e2a4a"><a href="#121904" label="[12:19:04]">&lt;stikonas&gt;</a></span><span class="message">that will reduce &quot;gap&quot; between yacc and musl</span></div><div class="line" id="122145"><span class="nick" style="color:#6c3d55"><a href="#122145" label="[12:21:45]">&lt;stikonas[m]&gt;</a></span><span class="message">but if Chicken scheme needs musl, then we can't use it to run gash...</span></div><div class="line" id="122223"><span class="nick" style="color:#6c3d55"><a href="#122223" label="[12:22:23]">&lt;stikonas[m]&gt;</a></span><span class="message">musl build system depends a bit on bash, then if gash depends on Chicken and Chicken depends on musl we are back in the loop</span></div><div class="line" id="122233"><span class="nick" style="color:#6d2462"><a href="#122233" label="[12:22:33]">&lt;Irvise&gt;</a></span><span class="message">Chicken needs a capable enough C lib.</span></div><div class="line" id="122240"><span class="nick" style="color:#2e2a4a"><a href="#122240" label="[12:22:40]">&lt;stikonas&gt;</a></span><span class="message">maybe mes libc can do...</span></div><div class="line" id="122246"><span class="nick" style="color:#2e2a4a"><a href="#122246" label="[12:22:46]">&lt;stikonas&gt;</a></span><span class="message">but mes libc is quite minimal</span></div><div class="line" id="122248"><span class="nick" style="color:#6d2462"><a href="#122248" label="[12:22:48]">&lt;Irvise&gt;</a></span><span class="message">I would like to try chicken after 13</span></div><div class="line" id="122318"><span class="nick" style="color:#2e2a4a"><a href="#122318" label="[12:23:18]">&lt;stikonas&gt;</a></span><span class="message">yes, that would be nice if you can get it there</span></div><div class="line" id="122349"><span class="nick" style="color:#2e2a4a"><a href="#122349" label="[12:23:49]">&lt;stikonas&gt;</a></span><span class="message">but like you said, pre-gen files might be a problem</span></div><div class="line" id="122418"><span class="nick" style="color:#6d2462"><a href="#122418" label="[12:24:18]">&lt;Irvise&gt;</a></span><span class="message">Yes... I honestly think that is the most difficult part...</span></div><div class="line" id="122610"><span class="nick" style="color:#2e2a4a"><a href="#122610" label="[12:26:10]">&lt;stikonas&gt;</a></span><span class="message">sometimes you can rewrite those scripts in some other language, but it might not be feasible in chicken</span></div><div class="line" id="122618"><span class="nick" style="color:#2e2a4a"><a href="#122618" label="[12:26:18]">&lt;stikonas&gt;</a></span><span class="message">I did that with e.g. perl 5.000</span></div><div class="line" id="122641"><span class="nick" style="color:#2e2a4a"><a href="#122641" label="[12:26:41]">&lt;stikonas&gt;</a></span><span class="message">it used perl to generate some .h include files</span></div><div class="line" id="122704"><span class="nick" style="color:#2e2a4a"><a href="#122704" label="[12:27:04]">&lt;stikonas&gt;</a></span><span class="message">but it was a small script, so I rewrote it in awk</span></div><div class="line" id="122724"><span class="nick" style="color:#6d2462"><a href="#122724" label="[12:27:24]">&lt;Irvise&gt;</a></span><span class="message">I read that.</span></div><div class="line" id="122736"><span class="nick" style="color:#6d2462"><a href="#122736" label="[12:27:36]">&lt;Irvise&gt;</a></span><span class="message">But chicken's are not simple ones...</span></div><div class="line" id="122902"><span class="nick" style="color:#2e2a4a"><a href="#122902" label="[12:29:02]">&lt;stikonas&gt;</a></span><span class="message">yeah, it might be more similar to guile...</span></div><div class="line" id="122915"><span class="nick" style="color:#2e2a4a"><a href="#122915" label="[12:29:15]">&lt;stikonas&gt;</a></span><span class="message">which is not trivial either</span></div><div class="line" id="122920"><span class="nick" style="color:#2e2a4a"><a href="#122920" label="[12:29:20]">&lt;stikonas&gt;</a></span><span class="message">but luckily it is now done</span></div><div class="line" id="132543"><span class="nick" style="color:#8dd3c7"><a href="#132543" label="[13:25:43]">&lt;oriansj&gt;</a></span><span class="message">Irvise: eliminating pre-gen files in schemes tends to be a serious project in its own right. So be warned it may take several months (to a couple years) of effort to eliminate pre-gen files from a scheme. We certainly greatly appreciate developers when they do that work for us but it certainly isn't something one can do quickly but it will certainly be an achievement worth remembering. As for the libc issue, we certainly can always</span></div><div class="line" id="132543"><span class="nick" style="color:#8dd3c7"><a href="#132543" label="[13:25:43]">&lt;oriansj&gt;</a></span><span class="message">create a custom libc if needed for any program. But I don't know if chicken actually has been shown to be able to run gash or guix correctly.</span></div><div class="line" id="133319"><span class="nick" style="color:#6d2462"><a href="#133319" label="[13:33:19]">&lt;Irvise&gt;</a></span><span class="message">If the pregen files are generated in another way, porting gash would (i suppose) be simple. Guix... not quite.</span></div><div class="line" id="133415"><span class="nick" style="color:#6d2462"><a href="#133415" label="[13:34:15]">&lt;Irvise&gt;</a></span><span class="message">I have already been warned about the tremendous task... I came here without being aware of the pregen issue however...</span></div><div class="line" id="133516"><span class="nick" style="color:#6d2462"><a href="#133516" label="[13:35:16]">&lt;Irvise&gt;</a></span><span class="message">I know that there is enough things that can be done, the isse now its workforce... I am now with another project however... :/ (updating GNAT on NetBSD)</span></div><div class="line" id="133517"><span class="nick" style="color:#8dd3c7"><a href="#133517" label="[13:35:17]">&lt;oriansj&gt;</a></span><span class="message">Irvise: there are only two valid solutions for pre-gen files: hand write replacements or use guile to generate them from their human written sources. But then it would have to go after guile in the bootstrap.</span></div><div class="line" id="133807"><span class="nick" style="color:#6d2462"><a href="#133807" label="[13:38:07]">&lt;Irvise&gt;</a></span><span class="message">Yeah... That is what feared...</span></div><div class="line" id="133814"><span class="nick" style="color:#6d2462"><a href="#133814" label="[13:38:14]">&lt;Irvise&gt;</a></span><span class="message">I*</span></div><div class="line" id="133948"><span class="nick" style="color:#8dd3c7"><a href="#133948" label="[13:39:48]">&lt;oriansj&gt;</a></span><span class="message">understandable but we do no want blobs that aren't human written and human auditable able to alter the resulting binaries in subtle ways.</span></div><div class="line" id="134131"><span class="nick" style="color:#8dd3c7"><a href="#134131" label="[13:41:31]">&lt;oriansj&gt;</a></span><span class="message">hence the efforts of hunting down and eliminating bootstrap loops, pre-gen files and pulling apart some extremely hairy bootstrap issues.</span></div><div class="line" id="134323"><span class="nick" style="color:#8dd3c7"><a href="#134323" label="[13:43:23]">&lt;oriansj&gt;</a></span><span class="message">that being said your goal of bootstrapping Ada properly is certainly quite achievable using AdaEd (which was used to bootstrap the first Gnu GCC Ada compiler) and a chain of Gnu GCC Ada compiler versions.</span></div><div class="line" id="134455"><span class="nick" style="color:#8dd3c7"><a href="#134455" label="[13:44:55]">&lt;oriansj&gt;</a></span><span class="message">now it may take some experiementation to find the fewest number of steps to full bootstrap but it should be something you could achieve in a couple days/weeks of effort depending on what issues you discover (like we did with Bison's missing bootstrap step)</span></div><div class="line" id="135200"><span class="nick" style="color:#6d2462"><a href="#135200" label="[13:52:00]">&lt;Irvise&gt;</a></span><span class="message">Yup, the no pregen requisite is very understandable :)</span></div><div class="line" id="135255"><span class="nick" style="color:#6d2462"><a href="#135255" label="[13:52:55]">&lt;Irvise&gt;</a></span><span class="message">I have been searching for Ada/Ed's license and the closest I have gotten was a mention of it using GPLv2, but no actual true file... :/</span></div><div class="line" id="140016"><span class="nick" style="color:#8dd3c7"><a href="#140016" label="[14:00:16]">&lt;oriansj&gt;</a></span><span class="message">well it was an United States Air Force awarded contract which required the use of the GNU GPL for all development, and assigned the copyright to the Free Software Foundation.</span></div><div class="line" id="140115"><span class="nick" style="color:#2e2a4a"><a href="#140115" label="[14:01:15]">&lt;stikonas&gt;</a></span><span class="message">oriansj: so yesterday I was able to fix M0 (GAS prototype).  In the evening I'll port the fix to M0 (hex2 source)</span></div><div class="line" id="140131"><span class="nick" style="color:#8dd3c7"><a href="#140131" label="[14:01:31]">&lt;oriansj&gt;</a></span><span class="message">stikonas: nice work</span></div><div class="line" id="140137"><span class="nick" style="color:#2e2a4a"><a href="#140137" label="[14:01:37]">&lt;stikonas&gt;</a></span><span class="message">it doesn't crash anymore on M2.M1 file</span></div><div class="line" id="140204"><span class="nick" style="color:#2e2a4a"><a href="#140204" label="[14:02:04]">&lt;stikonas&gt;</a></span><span class="message">just one short function and memory usage is drastically reduced</span></div><div class="line" id="140215"><span class="nick" style="color:#2e2a4a"><a href="#140215" label="[14:02:15]">&lt;stikonas&gt;</a></span><span class="message">well, two functions but one is stolen from hex2</span></div><div class="line" id="140315"><span class="nick" style="color:#234e69"><a href="#140315" label="[14:03:15]">&lt;fossy&gt;</a></span><span class="message">stikonas: well yes, that would be good, we can eliminate heirloom then right?</span></div><div class="line" id="140434"><span class="nick" style="color:#2e2a4a"><a href="#140434" label="[14:04:34]">&lt;stikonas&gt;</a></span><span class="message">fossy: not eliminate but build it against LGPLed libc</span></div><div class="line" id="140455"><span class="nick" style="color:#2e2a4a"><a href="#140455" label="[14:04:55]">&lt;stikonas&gt;</a></span><span class="message">so it becomes a non-issue</span></div><div class="line" id="140519"><span class="nick" style="color:#234e69"><a href="#140519" label="[14:05:19]">&lt;fossy&gt;</a></span><span class="message">oh yeah the first flex uses heirloom</span></div><div class="line" id="140535"><span class="nick" style="color:#234e69"><a href="#140535" label="[14:05:35]">&lt;fossy&gt;</a></span><span class="message">but yeah that does eliminate the licensing issue which is my main concern</span></div><div class="line" id="164353"><span class="nick" style="color:#80b1d3"><a href="#164353" label="[16:43:53]">&lt;jackhill&gt;</a></span><span class="message">reguarding bootstrapping chicken, it would be great to see more schemes properly buildt from source, but I think I'm missing why it is needed early in the bootstrap. What does it offer that mes scheme and guile do not?</span></div><div class="line" id="164912"><span class="nick" style="color:#6d2462"><a href="#164912" label="[16:49:12]">&lt;Irvise&gt;</a></span><span class="message">May be interesting to someone: <a rel="nofollow" href="https://www.phoronix.com/scan.php?page=news_item&amp;px=Picolibc-2021">https://www.phoronix.com/scan.php?page=news_item&amp;px=Picolibc-2021</a> </span></div><div class="line" id="165934"><span class="nick" style="color:#2e2a4a"><a href="#165934" label="[16:59:34]">&lt;stikonas&gt;</a></span><span class="message">not useful for bootstrap as it is...</span></div><div class="line" id="170004"><span class="nick" style="color:#2e2a4a"><a href="#170004" label="[17:00:04]">&lt;stikonas&gt;</a></span><span class="message">meson is non-trivial to build</span></div><div class="line" id="170037"><span class="nick" style="color:#2e2a4a"><a href="#170037" label="[17:00:37]">&lt;stikonas&gt;</a></span><span class="message">it might be useful for something else though...</span></div><div class="line" id="170112"><span class="nick" style="color:#2e2a4a"><a href="#170112" label="[17:01:12]">&lt;stikonas&gt;</a></span><span class="message">so far the only libc that I saw that is easy to build is musl</span></div><div class="line" id="182104"><span class="nick" style="color:#6d2462"><a href="#182104" label="[18:21:04]">&lt;Irvise&gt;</a></span><span class="message">jackhill: chicken needed for bootstrap? No. That it could theoretically be built after step 13 or 22? Yes. That would bring one of the more powerful schemes, ala Guile, about 100 steps earlier. But that was just me asking. I did not want to turn this into a full blown discussion. Unless of course, it is benefitial to all of you :)</span></div><div class="line" id="184005"><span class="nick" style="color:#2e2a4a"><a href="#184005" label="[18:40:05]">&lt;stikonas&gt;</a></span><span class="message">jackhill: well, right now gash is not usable in no-pregen file bootstrap (it does not run on mes)</span></div><div class="line" id="184023"><span class="nick" style="color:#2e2a4a"><a href="#184023" label="[18:40:23]">&lt;stikonas&gt;</a></span><span class="message">that said, it might be harder to bootstrap chicken than port gash to mes</span></div><div class="line" id="184042"><span class="nick" style="color:#2e2a4a"><a href="#184042" label="[18:40:42]">&lt;stikonas&gt;</a></span><span class="message">but Irvise is very welcome to investigate this</span></div><div class="line" id="193028"><span class="nick" style="color:#2e2a4a"><a href="#193028" label="[19:30:28]">&lt;stikonas&gt;</a></span><span class="message">oriansj: <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/pull/48">https://github.com/oriansj/stage0-posix/pull/48</a> </span></div><div class="line" id="193058"><span class="nick" style="color:#2e2a4a"><a href="#193058" label="[19:30:58]">&lt;stikonas&gt;</a></span><span class="message">M0 now produces good output, but I need to fix some bug in hex2 first (before M2 is ready)</span></div><div class="line" id="193149"><span class="nick" style="color:#2e2a4a"><a href="#193149" label="[19:31:49]">&lt;stikonas&gt;</a></span><span class="message">there is something wrong in I-type calculation</span></div><br /></div></body></html>