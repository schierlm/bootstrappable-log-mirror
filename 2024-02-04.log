<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2024-02-04.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="002623"><span class="nick" style="color:#389600"><a href="#002623" label="[00:26:23]">&lt;oriansj&gt;</a></span><span class="message">sam_: probably because if it something you haven't done before and few people have done before it must be hard. Or in my case, ignored it as it wasn't needed yet and didn't get into it until something simple (and less than 100KLoC was found)</span></div><div class="line" id="003228"><span class="nick" style="color:#389600"><a href="#003228" label="[00:32:28]">&lt;oriansj&gt;</a></span><span class="message">state -= state; ??? like why even ??</span></div><div class="line" id="003742"><span class="nick" style="color:#8dd3c7"><a href="#003742" label="[00:37:42]">&lt;sam_&gt;</a></span><span class="message">yeah, must be</span></div><div class="line" id="003749"><span class="nick" style="color:#8dd3c7"><a href="#003749" label="[00:37:49]">&lt;sam_&gt;</a></span><span class="message">it was just odd that people kept seeming to &quot;pass it around&quot; too</span></div><div class="line" id="024059"><span class="nick" style="color:#389600"><a href="#024059" label="[02:40:59]">&lt;oriansj&gt;</a></span><span class="message">sam_: well if they think my unxz.c is complicated, then there is no convincing them</span></div><div class="line" id="024707"><span class="nick" style="color:#389600"><a href="#024707" label="[02:47:07]">&lt;oriansj&gt;</a></span><span class="message">although about 1/8th of the code appears to just figuring out what state they are in and what state they need to transistion into.</span></div><div class="line" id="030816"><span class="nick" style="color:#2e2a4a"><a href="#030816" label="[03:08:16]">&lt;Googulator&gt;</a></span><span class="message">LZMA probably also has a reputation of being complex because its _compressor_ is indeed complex</span></div><div class="line" id="030828"><span class="nick" style="color:#2e2a4a"><a href="#030828" label="[03:08:28]">&lt;Googulator&gt;</a></span><span class="message">plus, 7-Zip is written in C++</span></div><div class="line" id="030902"><span class="nick" style="color:#2e2a4a"><a href="#030902" label="[03:09:02]">&lt;Googulator&gt;</a></span><span class="message">&amp; the existence of a C implementation in the LZMA SDK alongside the C++ one is possibly not well known</span></div><div class="line" id="030958"><span class="nick" style="color:#389600"><a href="#030958" label="[03:09:58]">&lt;oriansj&gt;</a></span><span class="message">ok, this one puzzles me; {statement;} and statement; behave differently?</span></div><div class="line" id="031614"><span class="nick" style="color:#389600"><a href="#031614" label="[03:16:14]">&lt;oriansj&gt;</a></span><span class="message">ok; uint8_t foo; {uint8_t foo = 1;} only sets the foo inside of the {} and unsets back to what foo was outside of the {}</span></div><div class="line" id="031646"><span class="nick" style="color:#2e2a4a"><a href="#031646" label="[03:16:46]">&lt;Googulator&gt;</a></span><span class="message">That sounds like correct(-ish) C scoping behavior.</span></div><div class="line" id="031814"><span class="nick" style="color:#389600"><a href="#031814" label="[03:18:14]">&lt;oriansj&gt;</a></span><span class="message">but to depend upon it in your code? like how hard is it to give something a different name?</span></div><div class="line" id="032108"><span class="nick" style="color:#2e2a4a"><a href="#032108" label="[03:21:08]">&lt;Googulator&gt;</a></span><span class="message">It's certainly a bad practice, and indeed many compilers warn about it.</span></div><div class="line" id="032134"><span class="nick" style="color:#389600"><a href="#032134" label="[03:21:34]">&lt;oriansj&gt;</a></span><span class="message">but not gcc or clange</span></div><div class="line" id="032138"><span class="nick" style="color:#389600"><a href="#032138" label="[03:21:38]">&lt;oriansj&gt;</a></span><span class="message">or tcc</span></div><div class="line" id="032204"><span class="nick" style="color:#2e2a4a"><a href="#032204" label="[03:22:04]">&lt;Googulator&gt;</a></span><span class="message">weird, I definitely remember gcc warning about that by default</span></div><div class="line" id="032247"><span class="nick" style="color:#2e2a4a"><a href="#032247" label="[03:22:47]">&lt;Googulator&gt;</a></span><span class="message">although maybe it needs -Wall</span></div><div class="line" id="032322"><span class="nick" style="color:#389600"><a href="#032322" label="[03:23:22]">&lt;oriansj&gt;</a></span><span class="message">not even with -Wextra</span></div><div class="line" id="032553"><span class="nick" style="color:#2e2a4a"><a href="#032553" label="[03:25:53]">&lt;Googulator&gt;</a></span><span class="message">oh, you are using just a plain {...} to set up a block</span></div><div class="line" id="032618"><span class="nick" style="color:#2e2a4a"><a href="#032618" label="[03:26:18]">&lt;Googulator&gt;</a></span><span class="message">as opposed to for (...) {...} or if (...) {...} or similar</span></div><div class="line" id="032756"><span class="nick" style="color:#2e2a4a"><a href="#032756" label="[03:27:56]">&lt;Googulator&gt;</a></span><span class="message">plain {...} in the middle of another block is pretty much exclusively used specifically for scoping purposes, so gcc treats this as deliberate shadowing of foo by a programmer who &quot;knows what he's doing&quot;</span></div><div class="line" id="032816"><span class="nick" style="color:#389600"><a href="#032816" label="[03:28:16]">&lt;oriansj&gt;</a></span><span class="message">well not me but the code I am refatoring into something M2-Planet can build</span></div><div class="line" id="032845"><span class="nick" style="color:#2e2a4a"><a href="#032845" label="[03:28:45]">&lt;Googulator&gt;</a></span><span class="message">IIRC you do get a warning if you shadow in a block that's &quot;required by the language&quot;, such as an if or a for</span></div><div class="line" id="033000"><span class="nick" style="color:#2e2a4a"><a href="#033000" label="[03:30:00]">&lt;Googulator&gt;</a></span><span class="message">but a plain block is treated as the equivalent of explicitly marking a fallthrough in a switch-case statement with /* fallthrough */</span></div><div class="line" id="033031"><span class="nick" style="color:#389600"><a href="#033031" label="[03:30:31]">&lt;oriansj&gt;</a></span><span class="message">well there is uint32_t distance;</span></div><div class="line" id="033056"><span class="nick" style="color:#389600"><a href="#033056" label="[03:30:56]">&lt;oriansj&gt;</a></span><span class="message">inside of an if block which the outer has a uint32_t distance;</span></div><div class="line" id="033111"><span class="nick" style="color:#389600"><a href="#033111" label="[03:31:11]">&lt;oriansj&gt;</a></span><span class="message">and still no warning either.</span></div><div class="line" id="033141"><span class="nick" style="color:#2e2a4a"><a href="#033141" label="[03:31:41]">&lt;Googulator&gt;</a></span><span class="message">That sounds like a bug.</span></div><div class="line" id="033251"><span class="nick" style="color:#389600"><a href="#033251" label="[03:32:51]">&lt;oriansj&gt;</a></span><span class="message">in both gcc and clang?</span></div><div class="line" id="033417"><span class="nick" style="color:#2e2a4a"><a href="#033417" label="[03:34:17]">&lt;Googulator&gt;</a></span><span class="message">The classical example is this:</span></div><div class="line" id="033417"><span class="nick" style="color:#2e2a4a"><a href="#033417" label="[03:34:17]">&lt;Googulator&gt;</a></span><span class="message">bool contains_zero(int *array, int len) {</span></div><div class="line" id="033418"><span class="nick" style="color:#2e2a4a"><a href="#033418" label="[03:34:18]">&lt;Googulator&gt;</a></span><span class="message">    bool result = false;</span></div><div class="line" id="033509"><span class="nick" style="color:#2e2a4a"><a href="#033509" label="[03:35:09]">&lt;Googulator&gt;</a></span><span class="message">    for (int i = 0; i &lt; len; i++) {</span></div><div class="line" id="033510"><span class="nick" style="color:#2e2a4a"><a href="#033510" label="[03:35:10]">&lt;Googulator&gt;</a></span><span class="message">        if (!array[i]) {</span></div><div class="line" id="033510"><span class="nick" style="color:#2e2a4a"><a href="#033510" label="[03:35:10]">&lt;Googulator&gt;</a></span><span class="message">            bool result = true;</span></div><div class="line" id="033511"><span class="nick" style="color:#2e2a4a"><a href="#033511" label="[03:35:11]">&lt;Googulator&gt;</a></span><span class="message">        }</span></div><div class="line" id="033511"><span class="nick" style="color:#2e2a4a"><a href="#033511" label="[03:35:11]">&lt;Googulator&gt;</a></span><span class="message">    }</span></div><div class="line" id="033512"><span class="nick" style="color:#2e2a4a"><a href="#033512" label="[03:35:12]">&lt;Googulator&gt;</a></span><span class="message">    return result;</span></div><div class="line" id="033512"><span class="nick" style="color:#2e2a4a"><a href="#033512" label="[03:35:12]">&lt;Googulator&gt;</a></span><span class="message">}</span></div><div class="line" id="033546"><span class="nick" style="color:#2e2a4a"><a href="#033546" label="[03:35:46]">&lt;Googulator&gt;</a></span><span class="message">If something like this doesn't warn, that's a bug.</span></div><div class="line" id="033602"><span class="nick" style="color:#389600"><a href="#033602" label="[03:36:02]">&lt;oriansj&gt;</a></span><span class="message">but the return bit isn't in the code in question</span></div><div class="line" id="033618"><span class="nick" style="color:#389600"><a href="#033618" label="[03:36:18]">&lt;oriansj&gt;</a></span><span class="message">only the setting of bool result = true;</span></div><div class="line" id="033645"><span class="nick" style="color:#389600"><a href="#033645" label="[03:36:45]">&lt;oriansj&gt;</a></span><span class="message">and as it is not being returned; it isn't triggering that case.</span></div><div class="line" id="033726"><span class="nick" style="color:#389600"><a href="#033726" label="[03:37:26]">&lt;oriansj&gt;</a></span><span class="message">replace return result with another if statement (say using if(result))</span></div><div class="line" id="033738"><span class="nick" style="color:#2e2a4a"><a href="#033738" label="[03:37:38]">&lt;Googulator&gt;</a></span><span class="message">This will always return false; but it should also generate a compiler warning, because the inner &quot;bool&quot; is clearly an error</span></div><div class="line" id="033820"><span class="nick" style="color:#389600"><a href="#033820" label="[03:38:20]">&lt;oriansj&gt;</a></span><span class="message">yet somehow zero warnings without the return;</span></div><div class="line" id="034125"><span class="nick" style="color:#2e2a4a"><a href="#034125" label="[03:41:25]">&lt;Googulator&gt;</a></span><span class="message">Whether the offending bool is returned, or used in some other way, shouldn't matter</span></div><div class="line" id="034206"><span class="nick" style="color:#2e2a4a"><a href="#034206" label="[03:42:06]">&lt;Googulator&gt;</a></span><span class="message">but it could well be that unit tests meant to catch this were written using return for both gcc and clang, and so failed to catch breakage when the usage isn't a return</span></div><div class="line" id="034530"><span class="nick" style="color:#2e2a4a"><a href="#034530" label="[03:45:30]">&lt;Googulator&gt;</a></span><span class="message">&amp; of course, we have <a rel="nofollow" href="https://github.com/llvm/llvm-project/issues/48943">https://github.com/llvm/llvm-project/issues/48943</a> </span></div><div class="line" id="034715"><span class="nick" style="color:#2e2a4a"><a href="#034715" label="[03:47:15]">&lt;Googulator&gt;</a></span><span class="message">&quot;relying on undefined behavior in any part of your code makes the behavior of the code as a whole, and that of any other part, undefined; one shouldn't assume undefined behavior can be contained in just part of the code&quot;</span></div><div class="line" id="034910"><span class="nick" style="color:#2e2a4a"><a href="#034910" label="[03:49:10]">&lt;Googulator&gt;</a></span><span class="message">(although I don't see any UB in case of shadowing a variable in a block)</span></div><div class="line" id="041605"><span class="nick" style="color:#389600"><a href="#041605" label="[04:16:05]">&lt;oriansj&gt;</a></span><span class="message">true; it is just a very bad practice but technically 100% legal in ANSI C</span></div><div class="line" id="042011"><span class="nick" style="color:#6b8072"><a href="#042011" label="[04:20:11]">&lt;fossy&gt;</a></span><span class="message">stikonas, my PRs are good now i thnk</span></div><div class="line" id="044432"><span class="nick" style="color:#389600"><a href="#044432" label="[04:44:32]">&lt;oriansj&gt;</a></span><span class="message">cleaned up to line 1129 <a rel="nofollow" href="https://paste.debian.net/1306240/">https://paste.debian.net/1306240/</a> </span></div><div class="line" id="044509"><span class="nick" style="color:#389600"><a href="#044509" label="[04:45:09]">&lt;oriansj&gt;</a></span><span class="message">hopefull will get done tomorrow</span></div><div class="line" id="130237"><span class="nick" style="color:#389600"><a href="#130237" label="[13:02:37]">&lt;oriansj&gt;</a></span><span class="message">the only thing I can think of is that lzma2 requires an unforgiving state machine that appears to use a 700+ line 4 level deep if statements. but it probably could be broken up if someone took time to reason it out.</span></div><div class="line" id="144955"><span class="nick" style="color:#389600"><a href="#144955" label="[14:49:55]">&lt;oriansj&gt;</a></span><span class="message">should I remove the lzma support if we don't need it or just leave it as it is only about 40 lines extra</span></div><div class="line" id="144958"><span class="nick" style="color:#389600"><a href="#144958" label="[14:49:58]">&lt;oriansj&gt;</a></span><span class="message">?</span></div><div class="line" id="162604"><span class="nick" style="color:#389600"><a href="#162604" label="[16:26:04]">&lt;oriansj&gt;</a></span><span class="message">weirdly none of the lzma logic block is actually used when a .tar.lzma file is unpacked.</span></div><div class="line" id="163158"><span class="nick" style="color:#389600"><a href="#163158" label="[16:31:58]">&lt;oriansj&gt;</a></span><span class="message">wait, nope logic for the test was wrong</span></div><div class="line" id="164326"><span class="nick" style="color:#2e2a4a"><a href="#164326" label="[16:43:26]">&lt;Googulator&gt;</a></span><span class="message">you mean lzma2?</span></div><div class="line" id="164356"><span class="nick" style="color:#2e2a4a"><a href="#164356" label="[16:43:56]">&lt;Googulator&gt;</a></span><span class="message">The problem is, you can't really know in advance whether or not a .xz will contain lzma2 blocks</span></div><div class="line" id="164632"><span class="nick" style="color:#2e2a4a"><a href="#164632" label="[16:46:32]">&lt;Googulator&gt;</a></span><span class="message">Plain lzma (as opposed to lzma2) is used in _all_ xz files, so removing that would just render the code useless</span></div><div class="line" id="165602"><span class="nick" style="color:#2e2a4a"><a href="#165602" label="[16:56:02]">&lt;Googulator&gt;</a></span><span class="message">fossy: updated <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/415">https://github.com/fosslinux/live-bootstrap/pull/415</a>  again; please let me know if there's anything left to do in it</span></div><div class="line" id="170053"><span class="nick" style="color:#80b1d3"><a href="#170053" label="[17:00:53]">&lt;stikonas&gt;</a></span><span class="message">also git live-bootstrap seems to have failed with checksum errror...</span></div><div class="line" id="170307"><span class="nick" style="color:#2e2a4a"><a href="#170307" label="[17:03:07]">&lt;Googulator&gt;</a></span><span class="message">yeah, I actually included the corrected checksum in my updated PR</span></div><div class="line" id="170633"><span class="nick" style="color:#80b1d3"><a href="#170633" label="[17:06:33]">&lt;stikonas&gt;</a></span><span class="message">maybe let me cherry-pick that diff change</span></div><div class="line" id="170713"><span class="nick" style="color:#2e2a4a"><a href="#170713" label="[17:07:13]">&lt;Googulator&gt;</a></span><span class="message">oh, unfortunately it got rolled into the main commit</span></div><div class="line" id="170722"><span class="nick" style="color:#80b1d3"><a href="#170722" label="[17:07:22]">&lt;stikonas&gt;</a></span><span class="message">well, I'll just manually copy it</span></div><div class="line" id="170730"><span class="nick" style="color:#80b1d3"><a href="#170730" label="[17:07:30]">&lt;stikonas&gt;</a></span><span class="message">I need to re-run it locally anyway before ppushing</span></div><div class="line" id="170831"><span class="nick" style="color:#80b1d3"><a href="#170831" label="[17:08:31]">&lt;stikonas&gt;</a></span><span class="message">and double check for some obvious issues, like non-reproducible documentation</span></div><div class="line" id="193623"><span class="nick" style="color:#389600"><a href="#193623" label="[19:36:23]">&lt;oriansj&gt;</a></span><span class="message">Googulator: no look at line 1952: <a rel="nofollow" href="https://paste.debian.net/1306287/">https://paste.debian.net/1306287/</a> </span></div><div class="line" id="193835"><span class="nick" style="color:#389600"><a href="#193835" label="[19:38:35]">&lt;oriansj&gt;</a></span><span class="message">(the code is currently in the state that doing unxz input output with xz and lzma files will work)</span></div><div class="line" id="193911"><span class="nick" style="color:#389600"><a href="#193911" label="[19:39:11]">&lt;oriansj&gt;</a></span><span class="message">(still not done cleaning it up and making it more mescc-tools-extra standard in terms of interface)</span></div><div class="line" id="193913"><span class="nick" style="color:#2e2a4a"><a href="#193913" label="[19:39:13]">&lt;Googulator&gt;</a></span><span class="message">oh, you mean raw LZMA files</span></div><div class="line" id="193922"><span class="nick" style="color:#389600"><a href="#193922" label="[19:39:22]">&lt;oriansj&gt;</a></span><span class="message">bingo</span></div><div class="line" id="194043"><span class="nick" style="color:#2e2a4a"><a href="#194043" label="[19:40:43]">&lt;Googulator&gt;</a></span><span class="message">I guess it's expendable if it turns out to be hard to port to m2-planet</span></div><div class="line" id="194112"><span class="nick" style="color:#2e2a4a"><a href="#194112" label="[19:41:12]">&lt;Googulator&gt;</a></span><span class="message">but I wouldn't drop it just to reduce code size; it's C code, so minimizing size isn't a goal in and of itself</span></div><div class="line" id="194113"><span class="nick" style="color:#389600"><a href="#194113" label="[19:41:13]">&lt;oriansj&gt;</a></span><span class="message">unlikely, it just is unneed extra functionality (which someone might want)</span></div><div class="line" id="194147"><span class="nick" style="color:#2e2a4a"><a href="#194147" label="[19:41:47]">&lt;Googulator&gt;</a></span><span class="message">if it were hex0, then yeah, making it as small as possible trumps everything else</span></div><div class="line" id="194153"><span class="nick" style="color:#2e2a4a"><a href="#194153" label="[19:41:53]">&lt;Googulator&gt;</a></span><span class="message">but it's C</span></div><div class="line" id="194219"><span class="nick" style="color:#80b1d3"><a href="#194219" label="[19:42:19]">&lt;stikonas&gt;</a></span><span class="message">yeah, I would keep it too...</span></div><div class="line" id="194227"><span class="nick" style="color:#2e2a4a"><a href="#194227" label="[19:42:27]">&lt;Googulator&gt;</a></span><span class="message">IMO it's better to keep working code around, even if it's unused at the moment</span></div><div class="line" id="194244"><span class="nick" style="color:#2e2a4a"><a href="#194244" label="[19:42:44]">&lt;Googulator&gt;</a></span><span class="message">BTW, there's more breakage in the recent PRs</span></div><div class="line" id="194306"><span class="nick" style="color:#2e2a4a"><a href="#194306" label="[19:43:06]">&lt;Googulator&gt;</a></span><span class="message">the one that added an early m4 in particular breaks kernel bootstrapping</span></div><div class="line" id="194328"><span class="nick" style="color:#2e2a4a"><a href="#194328" label="[19:43:28]">&lt;Googulator&gt;</a></span><span class="message">due to m4-1.4.10.tar.gz not being included in fiwix-file-list.txt</span></div><div class="line" id="194332"><span class="nick" style="color:#80b1d3"><a href="#194332" label="[19:43:32]">&lt;stikonas&gt;</a></span><span class="message">argh...</span></div><div class="line" id="194337"><span class="nick" style="color:#80b1d3"><a href="#194337" label="[19:43:37]">&lt;stikonas&gt;</a></span><span class="message">at least this is a simple fix...</span></div><div class="line" id="194353"><span class="nick" style="color:#2e2a4a"><a href="#194353" label="[19:43:53]">&lt;Googulator&gt;</a></span><span class="message">yeah, a short term fix is easy</span></div><div class="line" id="194401"><span class="nick" style="color:#2e2a4a"><a href="#194401" label="[19:44:01]">&lt;Googulator&gt;</a></span><span class="message">long term, I'd like to get rid of fiwix-file-list entirely</span></div><div class="line" id="194425"><span class="nick" style="color:#2e2a4a"><a href="#194425" label="[19:44:25]">&lt;Googulator&gt;</a></span><span class="message">and just have make-fiwix-initrd parse builder-hex0's in memory FS directly</span></div><div class="line" id="194437"><span class="nick" style="color:#80b1d3"><a href="#194437" label="[19:44:37]">&lt;stikonas&gt;</a></span><span class="message">yaeh, that thing is a bit annoying...</span></div><div class="line" id="194545"><span class="nick" style="color:#2e2a4a"><a href="#194545" label="[19:45:45]">&lt;Googulator&gt;</a></span><span class="message">we already have 1:1 FS transfer from Fiwix to Linux</span></div><div class="line" id="194631"><span class="nick" style="color:#2e2a4a"><a href="#194631" label="[19:46:31]">&lt;Googulator&gt;</a></span><span class="message">would be great to also have that from builder-hex0 to Fiwix</span></div><div class="line" id="194657"><span class="nick" style="color:#80b1d3"><a href="#194657" label="[19:46:57]">&lt;stikonas&gt;</a></span><span class="message">ok, pushed</span></div><div class="line" id="194702"><span class="nick" style="color:#80b1d3"><a href="#194702" label="[19:47:02]">&lt;stikonas&gt;</a></span><span class="message">though I'm still running bootstrap...</span></div><div class="line" id="194718"><span class="nick" style="color:#80b1d3"><a href="#194718" label="[19:47:18]">&lt;stikonas&gt;</a></span><span class="message">early transitions are harder though...</span></div><div class="line" id="194745"><span class="nick" style="color:#2e2a4a"><a href="#194745" label="[19:47:45]">&lt;Googulator&gt;</a></span><span class="message">yeah, we can't do a real &quot;ls&quot; or &quot;find&quot;</span></div><div class="line" id="194745"><span class="nick" style="color:#80b1d3"><a href="#194745" label="[19:47:45]">&lt;stikonas&gt;</a></span><span class="message">I haven't reached anywhere close to stage0-uefi -&gt; Fiwix transition, but it's probably just as tricky...</span></div><div class="line" id="194806"><span class="nick" style="color:#2e2a4a"><a href="#194806" label="[19:48:06]">&lt;Googulator&gt;</a></span><span class="message">but we do have a shortcut, since builder-hex0 doesn't protect memory</span></div><div class="line" id="194819"><span class="nick" style="color:#2e2a4a"><a href="#194819" label="[19:48:19]">&lt;Googulator&gt;</a></span><span class="message">so you can just read into kernelspace from userspace</span></div><div class="line" id="194839"><span class="nick" style="color:#80b1d3"><a href="#194839" label="[19:48:39]">&lt;stikonas&gt;</a></span><span class="message">that won't work on UEFI though...</span></div><div class="line" id="194853"><span class="nick" style="color:#80b1d3"><a href="#194853" label="[19:48:53]">&lt;stikonas&gt;</a></span><span class="message">at least not until exiting boot services</span></div><div class="line" id="194926"><span class="nick" style="color:#2e2a4a"><a href="#194926" label="[19:49:26]">&lt;Googulator&gt;</a></span><span class="message">but UEFI FS support is a lot more extensive than builder-hex0</span></div><div class="line" id="194933"><span class="nick" style="color:#80b1d3"><a href="#194933" label="[19:49:33]">&lt;stikonas&gt;</a></span><span class="message">yeah, that's true...</span></div><div class="line" id="194941"><span class="nick" style="color:#80b1d3"><a href="#194941" label="[19:49:41]">&lt;stikonas&gt;</a></span><span class="message">so a bit easier to deal with</span></div><div class="line" id="194943"><span class="nick" style="color:#2e2a4a"><a href="#194943" label="[19:49:43]">&lt;Googulator&gt;</a></span><span class="message">the UEFI shell even has an ls / dir command</span></div><div class="line" id="194953"><span class="nick" style="color:#80b1d3"><a href="#194953" label="[19:49:53]">&lt;stikonas&gt;</a></span><span class="message">yeah, if we a want to use it...</span></div><div class="line" id="195003"><span class="nick" style="color:#80b1d3"><a href="#195003" label="[19:50:03]">&lt;stikonas&gt;</a></span><span class="message">though ideally bootstrap should work without it</span></div><div class="line" id="195005"><span class="nick" style="color:#2e2a4a"><a href="#195005" label="[19:50:05]">&lt;Googulator&gt;</a></span><span class="message">probably not directly, but it shows that the APIs are there</span></div><div class="line" id="195013"><span class="nick" style="color:#80b1d3"><a href="#195013" label="[19:50:13]">&lt;stikonas&gt;</a></span><span class="message">but UEFI shell is very useful for debugging</span></div><div class="line" id="200444"><span class="nick" style="color:#8dd3c7"><a href="#200444" label="[20:04:44]">&lt;sam_&gt;</a></span><span class="message">[02:16:14]  &lt;@oriansj&gt; ok; uint8_t foo; {uint8_t foo = 1;} only sets the foo inside of the {} and unsets back to what foo was outside of the {}</span></div><div class="line" id="200446"><span class="nick" style="color:#8dd3c7"><a href="#200446" label="[20:04:46]">&lt;sam_&gt;</a></span><span class="message">yeah, this is a block</span></div><div class="line" id="201059"><span class="nick" style="color:#2e2a4a"><a href="#201059" label="[20:10:59]">&lt;Googulator&gt;</a></span><span class="message">it is, and that's indeed a documented feature of ANSI C</span></div><div class="line" id="201110"><span class="nick" style="color:#2e2a4a"><a href="#201110" label="[20:11:10]">&lt;Googulator&gt;</a></span><span class="message">doesn't mean it's not terribly bad practice that warrants a warning</span></div><div class="line" id="201127"><span class="nick" style="color:#2e2a4a"><a href="#201127" label="[20:11:27]">&lt;Googulator&gt;</a></span><span class="message">after all, compilers do warn on implicit return types</span></div><div class="line" id="201136"><span class="nick" style="color:#2e2a4a"><a href="#201136" label="[20:11:36]">&lt;Googulator&gt;</a></span><span class="message">also a feature required by ANSI C</span></div><div class="line" id="201232"><span class="nick" style="color:#2e2a4a"><a href="#201232" label="[20:12:32]">&lt;Googulator&gt;</a></span><span class="message">maybe not uint8_t foo; {uint8_t foo = 1;} since it's pretty clearly an intentional use of block scoping</span></div><div class="line" id="201247"><span class="nick" style="color:#2e2a4a"><a href="#201247" label="[20:12:47]">&lt;Googulator&gt;</a></span><span class="message">but certainly uint8_t foo; if (bar) {uint8_t foo = 1;}</span></div><div class="line" id="201337"><span class="nick" style="color:#2e2a4a"><a href="#201337" label="[20:13:37]">&lt;Googulator&gt;</a></span><span class="message">which is almost certainly an error for uint8_t foo; if (bar) {foo = 1;}</span></div><div class="line" id="205558"><span class="nick" style="color:#389600"><a href="#205558" label="[20:55:58]">&lt;oriansj&gt;</a></span><span class="message">well legal C includes a great deal of just bad ideas; like macros and poor default types</span></div><div class="line" id="205629"><span class="nick" style="color:#389600"><a href="#205629" label="[20:56:29]">&lt;oriansj&gt;</a></span><span class="message">*(ptr + index) being the same as ptr[index]</span></div><div class="line" id="205825"><span class="nick" style="color:#389600"><a href="#205825" label="[20:58:25]">&lt;oriansj&gt;</a></span><span class="message">foo = ptr[index(a&gt;b ? -- : ++)]++; being just fine to use is another</span></div><div class="line" id="205921"><span class="nick" style="color:#389600"><a href="#205921" label="[20:59:21]">&lt;oriansj&gt;</a></span><span class="message">or using = as assignment rather than := and using == for equality rather than =</span></div><div class="line" id="210731"><span class="nick" style="color:#2e2a4a"><a href="#210731" label="[21:07:31]">&lt;Googulator&gt;</a></span><span class="message">that's just syntax bikeshedding</span></div><div class="line" id="210751"><span class="nick" style="color:#2e2a4a"><a href="#210751" label="[21:07:51]">&lt;Googulator&gt;</a></span><span class="message">you could argue that not interpreting != as &quot;factorial equals&quot; is a bad idea in C</span></div><div class="line" id="210820"><span class="nick" style="color:#2e2a4a"><a href="#210820" label="[21:08:20]">&lt;Googulator&gt;</a></span><span class="message">but what I meant is programming practices that ANSI C explicitly enables, but which still need warnings</span></div><div class="line" id="210904"><span class="nick" style="color:#2e2a4a"><a href="#210904" label="[21:09:04]">&lt;Googulator&gt;</a></span><span class="message">e.g. if (size = 0) is perfectly valid C, but compilers generally warn about it</span></div><div class="line" id="212520"><span class="nick" style="color:#389600"><a href="#212520" label="[21:25:20]">&lt;oriansj&gt;</a></span><span class="message">then you realize one can make if(true == 1 &amp;&amp; true == 0) {puts(&quot;suprise&quot;)} work via macros;</span></div><div class="line" id="212711"><span class="nick" style="color:#389600"><a href="#212711" label="[21:27:11]">&lt;oriansj&gt;</a></span><span class="message">mixing of assignment and mutation at the same time is a code smell;</span></div><div class="line" id="212849"><span class="nick" style="color:#389600"><a href="#212849" label="[21:28:49]">&lt;oriansj&gt;</a></span><span class="message">and lack of bounds checking on arrays is responsible for a great many bugs.</span></div><div class="line" id="214333"><span class="nick" style="color:#389600"><a href="#214333" label="[21:43:33]">&lt;oriansj&gt;</a></span><span class="message">but yes I agree compilers and their writers have done a great job improving the situation which the programming language standards writers have created.</span></div><div class="line" id="214509"><span class="nick" style="color:#389600"><a href="#214509" label="[21:45:09]">&lt;oriansj&gt;</a></span><span class="message">and I wish a = b++ = c-- = a; would be a warning.</span></div><div class="line" id="221331"><span class="nick" style="color:#2e2a4a"><a href="#221331" label="[22:13:31]">&lt;Googulator&gt;</a></span><span class="message">meanwhile, almost successful transition to Fiwix with no filelist</span></div><div class="line" id="221428"><span class="nick" style="color:#2e2a4a"><a href="#221428" label="[22:14:28]">&lt;Googulator&gt;</a></span><span class="message">the only limitation is, the filelist-free make_fiwix_initrd can't pass through zero-length files</span></div><div class="line" id="221443"><span class="nick" style="color:#2e2a4a"><a href="#221443" label="[22:14:43]">&lt;Googulator&gt;</a></span><span class="message">because in builder-hex0, they are indistinguishable from directories</span></div><div class="line" id="221516"><span class="nick" style="color:#2e2a4a"><a href="#221516" label="[22:15:16]">&lt;Googulator&gt;</a></span><span class="message">so I need to recreate mes/config.h (which is empty) once Fiwix boots, but before trying to build anything</span></div><div class="line" id="221607"><span class="nick" style="color:#2e2a4a"><a href="#221607" label="[22:16:07]">&lt;Googulator&gt;</a></span><span class="message">empty directories are also not passed through, for the same reason</span></div><div class="line" id="223103"><span class="nick" style="color:#80b1d3"><a href="#223103" label="[22:31:03]">&lt;stikonas&gt;</a></span><span class="message">Googulator: I'm surprised mes/config.h is used after Fiwix is booted...</span></div><div class="line" id="224912"><span class="nick" style="color:#389600"><a href="#224912" label="[22:49:12]">&lt;oriansj&gt;</a></span><span class="message">agreed</span></div><div class="line" id="225629"><span class="nick" style="color:#80b1d3"><a href="#225629" label="[22:56:29]">&lt;stikonas&gt;</a></span><span class="message">Googulator: your diffutils checksum also failed...</span></div><div class="line" id="225639"><span class="nick" style="color:#80b1d3"><a href="#225639" label="[22:56:39]">&lt;stikonas&gt;</a></span><span class="message">perhaps the build is not yet reproducible...</span></div><div class="line" id="225927"><span class="nick" style="color:#2e2a4a"><a href="#225927" label="[22:59:27]">&lt;Googulator&gt;</a></span><span class="message">It's not really &quot;used&quot; as much as it needs to exist because another header includes it</span></div><div class="line" id="230925"><span class="nick" style="color:#389600"><a href="#230925" label="[23:09:25]">&lt;oriansj&gt;</a></span><span class="message">hmmm; sounds like we need to put a #ifdef in there to ignore that file if it isn't used.</span></div><div class="line" id="231150"><span class="nick" style="color:#80b1d3"><a href="#231150" label="[23:11:50]">&lt;stikonas&gt;</a></span><span class="message">potentially it is used in some configurations of meslibc...</span></div><div class="line" id="231206"><span class="nick" style="color:#80b1d3"><a href="#231206" label="[23:12:06]">&lt;stikonas&gt;</a></span><span class="message">I guess that's where configure stuff goes</span></div><div class="line" id="231358"><span class="nick" style="color:#2e2a4a"><a href="#231358" label="[23:13:58]">&lt;Googulator&gt;</a></span><span class="message">It is used during build of mes itself, but then replaced with an empty file</span></div><div class="line" id="231654"><span class="nick" style="color:#2e2a4a"><a href="#231654" label="[23:16:54]">&lt;Googulator&gt;</a></span><span class="message">Filelist-free Fiwix kexec will also need a small fix to builder-hex0</span></div><div class="line" id="231712"><span class="nick" style="color:#80b1d3"><a href="#231712" label="[23:17:12]">&lt;stikonas&gt;</a></span><span class="message">for zero length files?</span></div><div class="line" id="231737"><span class="nick" style="color:#2e2a4a"><a href="#231737" label="[23:17:37]">&lt;Googulator&gt;</a></span><span class="message">The file name table isn't zeroed at the beginning, so unused entries will have garbage data in them instead of zeros</span></div><div class="line" id="231751"><span class="nick" style="color:#2e2a4a"><a href="#231751" label="[23:17:51]">&lt;Googulator&gt;</a></span><span class="message">Which makes it impossible to find the last valid file</span></div><div class="line" id="231816"><span class="nick" style="color:#2e2a4a"><a href="#231816" label="[23:18:16]">&lt;Googulator&gt;</a></span><span class="message">The obvious fix is to zero the file table before beginning to parse the srcfs</span></div><div class="line" id="231857"><span class="nick" style="color:#2e2a4a"><a href="#231857" label="[23:18:57]">&lt;Googulator&gt;</a></span><span class="message">Which is a 14MiB &quot;rep stosb&quot;</span></div><div class="line" id="231918"><span class="nick" style="color:#2e2a4a"><a href="#231918" label="[23:19:18]">&lt;Googulator&gt;</a></span><span class="message">hopefully we don't need to run builder-hex0 on any system where that's too slow to be acceptable</span></div><div class="line" id="232045"><span class="nick" style="color:#2e2a4a"><a href="#232045" label="[23:20:45]">&lt;Googulator&gt;</a></span><span class="message">Zero length files are ignored for now - the only relevant one I found so far was mes/config.h, which I just recreate in an improve step after booting into Fiwix</span></div><div class="line" id="232058"><span class="nick" style="color:#80b1d3"><a href="#232058" label="[23:20:58]">&lt;stikonas&gt;</a></span><span class="message">yeah, I guess recreating is fine</span></div><div class="line" id="232138"><span class="nick" style="color:#80b1d3"><a href="#232138" label="[23:21:38]">&lt;stikonas&gt;</a></span><span class="message">still, builder-hex0 is quite amazing...</span></div><div class="line" id="232143"><span class="nick" style="color:#80b1d3"><a href="#232143" label="[23:21:43]">&lt;stikonas&gt;</a></span><span class="message">and rickmasters too</span></div><div class="line" id="232216"><span class="nick" style="color:#80b1d3"><a href="#232216" label="[23:22:16]">&lt;stikonas&gt;</a></span><span class="message">posix-builder still works much worse despite being written in C</span></div><div class="line" id="232225"><span class="nick" style="color:#80b1d3"><a href="#232225" label="[23:22:25]">&lt;stikonas&gt;</a></span><span class="message">and I didn't have much progress in the last 3 weeks :(</span></div><div class="line" id="232724"><span class="nick" style="color:#6d2462"><a href="#232724" label="[23:27:24]">&lt;euleritian&gt;</a></span><span class="message">stikonas: Did you see the FOSDEM talk by Ekaitz today? You apparently achieve much more than progress measurable in code!</span></div><div class="line" id="232808"><span class="nick" style="color:#80b1d3"><a href="#232808" label="[23:28:08]">&lt;stikonas&gt;</a></span><span class="message">euleritian: not yet, I missed it though I intend to view recording later</span></div><div class="line" id="232827"><span class="nick" style="color:#80b1d3"><a href="#232827" label="[23:28:27]">&lt;stikonas&gt;</a></span><span class="message">well, we did make quite a bit of progress on riscv bootstrapping</span></div><div class="line" id="232854"><span class="nick" style="color:#80b1d3"><a href="#232854" label="[23:28:54]">&lt;stikonas&gt;</a></span><span class="message">and as Ekaitz said, thing often go much faster when you can actively collaborate :)</span></div><div class="line" id="233014"><span class="nick" style="color:#80b1d3"><a href="#233014" label="[23:30:14]">&lt;stikonas&gt;</a></span><span class="message">if one person is stuck, often the other can help to get the process unstuck</span></div><div class="line" id="233221"><span class="nick" style="color:#80b1d3"><a href="#233221" label="[23:32:21]">&lt;stikonas&gt;</a></span><span class="message">euleritian: I did see the slides of the talk though</span></div><div class="line" id="235953"><span class="nick" style="color:#389600"><a href="#235953" label="[23:59:53]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://fosdem.org/2024/events/attachments/fosdem-2024-1755-risc-v-bootstrapping-in-guix-and-live-bootstrap/slides/21755/presentation_cjmPXBA.pdf">https://fosdem.org/2024/events/attachments/fosdem-2024-1755-risc-v-bootstrapping-in-guix-and-live-bootstrap/slides/21755/presentation_cjmPXBA.pdf</a> </span></div><br /></div></body></html>