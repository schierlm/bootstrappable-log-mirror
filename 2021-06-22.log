<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-06-22.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000545"><span class="nick" style="color:#389600"><a href="#000545" label="[00:05:45]">&lt;stikonas&gt;</a></span><span class="message">fossy: finished removing all submodules except for stage0-posix <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/126">https://github.com/fosslinux/live-bootstrap/pull/126</a> </span></div><div class="line" id="021209"><span class="nick" style="color:#2e2a4a"><a href="#021209" label="[02:12:09]">&lt;oriansj&gt;</a></span><span class="message">danderson: the distinction between stage0 and stage0-posix is that stage0 is bare metal only and stage0-posix is only depending on a POSIX kernel that supports the following syscalls: exit, execve, fork, waitpid, brk, open, close, read, write, lseek, chmod for up to M2-Planet+mescc-tools (excluding Kaem) but mescc-tools-extra+Kaem needs fchmod, access, chdir, fchdir, mkdir, mknod, getcwd, umask and uname. Mes also needs unlink, ioctl,</span></div><div class="line" id="021209"><span class="nick" style="color:#2e2a4a"><a href="#021209" label="[02:12:09]">&lt;oriansj&gt;</a></span><span class="message">stat and fsync (assuming I didn't miss anything janneke )</span></div><div class="line" id="021344"><span class="nick" style="color:#2e2a4a"><a href="#021344" label="[02:13:44]">&lt;oriansj&gt;</a></span><span class="message">So one should have everything one needs to build a more complete POSIX written in either M2-Planet's C subset or MesCC's C subset</span></div><div class="line" id="021438"><span class="nick" style="color:#389600"><a href="#021438" label="[02:14:38]">&lt;stikonas&gt;</a></span><span class="message">tcc probably wouldn't add any new syscalls...</span></div><div class="line" id="021444"><span class="nick" style="color:#389600"><a href="#021444" label="[02:14:44]">&lt;stikonas&gt;</a></span><span class="message">since tcc uses mes libc</span></div><div class="line" id="021458"><span class="nick" style="color:#389600"><a href="#021458" label="[02:14:58]">&lt;stikonas&gt;</a></span><span class="message">so maybe one can just go to tcc instead of mescc</span></div><div class="line" id="021506"><span class="nick" style="color:#2e2a4a"><a href="#021506" label="[02:15:06]">&lt;oriansj&gt;</a></span><span class="message">And the initial kernel could be written in Assembly or in the C subset that M2-Planet running on bare metal supports</span></div><div class="line" id="021545"><span class="nick" style="color:#2e2a4a"><a href="#021545" label="[02:15:45]">&lt;oriansj&gt;</a></span><span class="message">stikonas: mes-m2 doesn't use all of the syscalls in meslibc but TCC supposdedly does</span></div><div class="line" id="021733"><span class="nick" style="color:#6b8072"><a href="#021733" label="[02:17:33]">&lt;xentrac&gt;</a></span><span class="message">is that the list above?</span></div><div class="line" id="022658"><span class="nick" style="color:#389600"><a href="#022658" label="[02:26:58]">&lt;stikonas&gt;</a></span><span class="message">oh yes, that's most likely true, since mes-m2 can be built with just a few files from lib/*/*.c (as is shown by building it with m2-planet)</span></div><div class="line" id="023134"><span class="nick" style="color:#80b1d3"><a href="#023134" label="[02:31:34]">&lt;danderson&gt;</a></span><span class="message">oriansj: thanks for the rundown. That's a fairly wide API surface, but certainly less than a full production kernel.</span></div><div class="line" id="023330"><span class="nick" style="color:#6b8072"><a href="#023330" label="[02:33:30]">&lt;xentrac&gt;</a></span><span class="message">also last time we talked about this I think we established that it doesn't actually have to multitask</span></div><div class="line" id="023431"><span class="nick" style="color:#6b8072"><a href="#023431" label="[02:34:31]">&lt;xentrac&gt;</a></span><span class="message">what does &quot;ioctl&quot; mean here?  presumably not the entire ioctl interface</span></div><div class="line" id="024108"><span class="nick" style="color:#80b1d3"><a href="#024108" label="[02:41:08]">&lt;danderson&gt;</a></span><span class="message">once you get up to a shell, I'd think it'd be hard to avoid multitasking</span></div><div class="line" id="024126"><span class="nick" style="color:#80b1d3"><a href="#024126" label="[02:41:26]">&lt;danderson&gt;</a></span><span class="message">although I suppose a bespoke shell could execute pipelines serially, buffering output between them</span></div><div class="line" id="024217"><span class="nick" style="color:#389600"><a href="#024217" label="[02:42:17]">&lt;stikonas&gt;</a></span><span class="message">I don't see ioctl used in mes, it does implement it in libc though</span></div><div class="line" id="024243"><span class="nick" style="color:#389600"><a href="#024243" label="[02:42:43]">&lt;stikonas&gt;</a></span><span class="message">danderson: well, bash doesn't do that...</span></div><div class="line" id="024333"><span class="nick" style="color:#80b1d3"><a href="#024333" label="[02:43:33]">&lt;danderson&gt;</a></span><span class="message">right, so, could you replace bash with a posix shell that only executes sequentially until you build up to a full-featured kernel?</span></div><div class="line" id="024334"><span class="nick" style="color:#6b8072"><a href="#024334" label="[02:43:34]">&lt;xentrac&gt;</a></span><span class="message">danderson: yeah, MS-DOS executed pipelines that way</span></div><div class="line" id="024347"><span class="nick" style="color:#80b1d3"><a href="#024347" label="[02:43:47]">&lt;danderson&gt;</a></span><span class="message">Probably not easily, in the sense that no software assumes such a terrible environment these days</span></div><div class="line" id="024357"><span class="nick" style="color:#6b8072"><a href="#024357" label="[02:43:57]">&lt;xentrac&gt;</a></span><span class="message">it has trouble with cases like yes</span></div><div class="line" id="024402"><span class="nick" style="color:#6b8072"><a href="#024402" label="[02:44:02]">&lt;xentrac&gt;</a></span><span class="message">uh</span></div><div class="line" id="024404"><span class="nick" style="color:#6b8072"><a href="#024404" label="[02:44:04]">&lt;xentrac&gt;</a></span><span class="message">yes | head</span></div><div class="line" id="024508"><span class="nick" style="color:#80b1d3"><a href="#024508" label="[02:45:08]">&lt;danderson&gt;</a></span><span class="message">yup, tricky environment.</span></div><div class="line" id="024527"><span class="nick" style="color:#80b1d3"><a href="#024527" label="[02:45:27]">&lt;danderson&gt;</a></span><span class="message">But basic multitasking isn't *too* hard, if you don't need memory protection or performance or security or... :P</span></div><div class="line" id="024535"><span class="nick" style="color:#6b8072"><a href="#024535" label="[02:45:35]">&lt;xentrac&gt;</a></span><span class="message">right :)</span></div><div class="line" id="024545"><span class="nick" style="color:#6b8072"><a href="#024545" label="[02:45:45]">&lt;xentrac&gt;</a></span><span class="message">also though</span></div><div class="line" id="024612"><span class="nick" style="color:#6b8072"><a href="#024612" label="[02:46:12]">&lt;xentrac&gt;</a></span><span class="message">you can do multitasking that's robustly usable pretty easily</span></div><div class="line" id="024628"><span class="nick" style="color:#6b8072"><a href="#024628" label="[02:46:28]">&lt;xentrac&gt;</a></span><span class="message">it's just several times slower than more optimized implementations</span></div><div class="line" id="024722"><span class="nick" style="color:#6b8072"><a href="#024722" label="[02:47:22]">&lt;xentrac&gt;</a></span><span class="message">my experience with small machines in the past leads me to believe that memory protection, preemptive multitasking, and being able to kill infinite loops are extremely important for usability</span></div><div class="line" id="024737"><span class="nick" style="color:#6b8072"><a href="#024737" label="[02:47:37]">&lt;xentrac&gt;</a></span><span class="message">for interactive purposes</span></div><div class="line" id="024746"><span class="nick" style="color:#389600"><a href="#024746" label="[02:47:46]">&lt;stikonas&gt;</a></span><span class="message">one would think that there should be a lot of embedded developers in this project based on environment...</span></div><div class="line" id="025131"><span class="nick" style="color:#6b8072"><a href="#025131" label="[02:51:31]">&lt;xentrac&gt;</a></span><span class="message">also, though, tracing and program state inspection, which are commonly provided by a debugger</span></div><div class="line" id="031829"><span class="nick" style="color:#2e2a4a"><a href="#031829" label="[03:18:29]">&lt;oriansj&gt;</a></span><span class="message">danderson: well the Kaem shell does only execute serially but it doesn't support pipes (as they aren't needed until after TCC)</span></div><div class="line" id="032026"><span class="nick" style="color:#2e2a4a"><a href="#032026" label="[03:20:26]">&lt;oriansj&gt;</a></span><span class="message">And multitasking doesn't need to extend beyond process runs until it forks or exits. If forked, just sleep until forked process is done. (as it is just doing waitpid)</span></div><div class="line" id="032212"><span class="nick" style="color:#2e2a4a"><a href="#032212" label="[03:22:12]">&lt;oriansj&gt;</a></span><span class="message">but yes, such a kernel wouldn't be designed to be usable by humans but rather the bare subset of perfect programs that never have bugs or problems bootstrapping a more advanced kernel.</span></div><div class="line" id="032700"><span class="nick" style="color:#6d2462"><a href="#032700" label="[03:27:00]">&lt;fossy&gt;</a></span><span class="message">pipes are an intentional non feature</span></div><div class="line" id="032708"><span class="nick" style="color:#6d2462"><a href="#032708" label="[03:27:08]">&lt;fossy&gt;</a></span><span class="message">to reduce kernel requirements</span></div><div class="line" id="034009"><span class="nick" style="color:#2e2a4a"><a href="#034009" label="[03:40:09]">&lt;oriansj&gt;</a></span><span class="message">exec, exit, fork and waitpid are the minimal subset required for having processes spawned from a shell to do work. brk is needed if you want a non-fixed amount of memory. open, close, read, write, lseek are the minimal subset required for working with files. chmod is only needed on filesystems that require the executable bit to be set to execute binaries. chdir and getcwd are needed for the shell to change directories and not have</span></div><div class="line" id="034009"><span class="nick" style="color:#2e2a4a"><a href="#034009" label="[03:40:09]">&lt;oriansj&gt;</a></span><span class="message">everything be done in absolute addresses. uname is needed to have architecture/OS specific behaviors (get_machine not absolutely required) mkdir needed for mkdir and untar. The remainder could be removed with some effort should it come down to that.</span></div><div class="line" id="035011"><span class="nick" style="color:#80b1d3"><a href="#035011" label="[03:50:11]">&lt;danderson&gt;</a></span><span class="message">does stage0-posix require a specific syscall interface? Would this stub kernel have to emulate linux's calling convention?</span></div><div class="line" id="040458"><span class="nick" style="color:#2e2a4a"><a href="#040458" label="[04:04:58]">&lt;oriansj&gt;</a></span><span class="message">danderson: no. All of the pieces could be ported to CP/M just by changing out the read and write functions to use CP/M conventions.</span></div><div class="line" id="040705"><span class="nick" style="color:#2e2a4a"><a href="#040705" label="[04:07:05]">&lt;oriansj&gt;</a></span><span class="message">require -&gt; no; currently use -&gt; yes.</span></div><div class="line" id="040811"><span class="nick" style="color:#2e2a4a"><a href="#040811" label="[04:08:11]">&lt;oriansj&gt;</a></span><span class="message">The later pieces that use M2libc have simple path to supporting alternate calling conventions.</span></div><div class="line" id="041517"><span class="nick" style="color:#80b1d3"><a href="#041517" label="[04:15:17]">&lt;danderson&gt;</a></span><span class="message">Got it. And yes, I was asking about what it currently does. It's all software, so nothing's set in stone :)</span></div><div class="line" id="053430"><span class="nick">***</span><span class="message notice">terpri is now known as robin</span></div><div class="line" id="154104"><span class="nick" style="color:#6b8072"><a href="#154104" label="[15:41:04]">&lt;xentrac&gt;</a></span><span class="message">you can do without lseek if you're willing to work with files only sequentially, and without close if you're willing to close all your files by exiting (and don't support I/O redirection)</span></div><div class="line" id="154152"><span class="nick" style="color:#6b8072"><a href="#154152" label="[15:41:52]">&lt;xentrac&gt;</a></span><span class="message">also you could reasonably use the older wait instead of waitpid for processes spawned from a shell</span></div><div class="line" id="161017"><span class="nick" style="color:#389600"><a href="#161017" label="[16:10:17]">&lt;stikonas&gt;</a></span><span class="message">well, it's a tradeoff between convenience and fewer syscalls</span></div><div class="line" id="161214"><span class="nick" style="color:#389600"><a href="#161214" label="[16:12:14]">&lt;stikonas&gt;</a></span><span class="message">e.g. kaem-minimal does not support cd, which requires stage0-posix to be in / of live-bootstrap system (not in a subdirectory). In fact stage0-posix live-bootstrap has to significantly modify stage0-posix directory structure <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysa.py#L142">https://github.com/fosslinux/live-bootstrap/blob/master/sysa.py#L142</a> </span></div><div class="line" id="161512"><span class="nick" style="color:#6b8072"><a href="#161512" label="[16:15:12]">&lt;xentrac&gt;</a></span><span class="message">I think PDP-7 UNIX did have chdir() but didn't have pathnames, so you could only open files that were in your current directory</span></div><div class="line" id="161541"><span class="nick" style="color:#6b8072"><a href="#161541" label="[16:15:41]">&lt;xentrac&gt;</a></span><span class="message">which is another sort of axis of minimalism.  open() isn't just one thing</span></div><div class="line" id="161642"><span class="nick" style="color:#6b8072"><a href="#161642" label="[16:16:42]">&lt;xentrac&gt;</a></span><span class="message">speaking of which, oriansj, what were you saying about ioctl()?  ioctl() is like eight thousand different system calls, like i386-linux socketcall only worse</span></div><div class="line" id="161703"><span class="nick" style="color:#6b8072"><a href="#161703" label="[16:17:03]">&lt;xentrac&gt;</a></span><span class="message">well.  &quot;worse&quot; if you're trying to figure out what a minimal kernel needs</span></div><div class="line" id="161759"><span class="nick" style="color:#6b8072"><a href="#161759" label="[16:17:59]">&lt;xentrac&gt;</a></span><span class="message">also, happy Konrad Zuse Day!</span></div><div class="line" id="163548"><span class="nick" style="color:#389600"><a href="#163548" label="[16:35:48]">&lt;stikonas&gt;</a></span><span class="message">xentrac: where is ioctl used?</span></div><div class="line" id="163559"><span class="nick" style="color:#389600"><a href="#163559" label="[16:35:59]">&lt;stikonas&gt;</a></span><span class="message">I didn't find any usage of it</span></div><div class="line" id="163808"><span class="nick" style="color:#389600"><a href="#163808" label="[16:38:08]">&lt;stikonas&gt;</a></span><span class="message">oh, there is one call isatty</span></div><div class="line" id="163827"><span class="nick" style="color:#389600"><a href="#163827" label="[16:38:27]">&lt;stikonas&gt;</a></span><span class="message">that's probably not important...</span></div><div class="line" id="164240"><span class="nick" style="color:#389600"><a href="#164240" label="[16:42:40]">&lt;stikonas&gt;</a></span><span class="message">xentrac: I think it's only used to determine whether mes should start interactive hsell or not</span></div><div class="line" id="164355"><span class="nick" style="color:#389600"><a href="#164355" label="[16:43:55]">&lt;stikonas&gt;</a></span><span class="message">can easily stub it out</span></div><div class="line" id="164655"><span class="nick" style="color:#6b8072"><a href="#164655" label="[16:46:55]">&lt;xentrac&gt;</a></span><span class="message">oh cool</span></div><div class="line" id="164730"><span class="nick" style="color:#6b8072"><a href="#164730" label="[16:47:30]">&lt;xentrac&gt;</a></span><span class="message">oriansj had said &quot;Mes also needs unlink, ioctl, stat and fsync (assuming I didn't miss anything janneke )&quot;</span></div><div class="line" id="164937"><span class="nick" style="color:#6b8072"><a href="#164937" label="[16:49:37]">&lt;xentrac&gt;</a></span><span class="message">oh hey, I hadn't realized that the BASIC terminology of PEEK/POKE was also used in ptrace :)</span></div><div class="line" id="165144"><span class="nick" style="color:#389600"><a href="#165144" label="[16:51:44]">&lt;stikonas&gt;</a></span><span class="message">well, unlink is simple, it's just deleting files...</span></div><div class="line" id="165215"><span class="nick" style="color:#389600"><a href="#165215" label="[16:52:15]">&lt;stikonas&gt;</a></span><span class="message">probably just deleting temp files</span></div><div class="line" id="165257"><span class="nick" style="color:#6b8072"><a href="#165257" label="[16:52:57]">&lt;xentrac&gt;</a></span><span class="message">glibc isatty uses ioctl(fd, TCGETS, ...), which is actually considerably harder to implement than isatty itself</span></div><div class="line" id="165318"><span class="nick" style="color:#389600"><a href="#165318" label="[16:53:18]">&lt;stikonas&gt;</a></span><span class="message">well, meslibc uses ioctl too</span></div><div class="line" id="165334"><span class="nick" style="color:#389600"><a href="#165334" label="[16:53:34]">&lt;stikonas&gt;</a></span><span class="message">but I mean we don't even have to implement it</span></div><div class="line" id="165346"><span class="nick" style="color:#389600"><a href="#165346" label="[16:53:46]">&lt;stikonas&gt;</a></span><span class="message">just stup it out to return false and problem solved</span></div><div class="line" id="165356"><span class="nick" style="color:#389600"><a href="#165356" label="[16:53:56]">&lt;stikonas&gt;</a></span><span class="message">we don't need interactive mes shell</span></div><div class="line" id="165450"><span class="nick" style="color:#6b8072"><a href="#165450" label="[16:54:50]">&lt;xentrac&gt;</a></span><span class="message">close(), lseek(), and umask() are also pretty trivial</span></div><div class="line" id="165513"><span class="nick" style="color:#6b8072"><a href="#165513" label="[16:55:13]">&lt;xentrac&gt;</a></span><span class="message">I think there are things you can do with an interactive mes shell that are interesting from an assurance point of view</span></div><div class="line" id="165546"><span class="nick" style="color:#6b8072"><a href="#165546" label="[16:55:46]">&lt;xentrac&gt;</a></span><span class="message">you know how hardware Bitcoin wallets all have a little screen?</span></div><div class="line" id="165604"><span class="nick" style="color:#389600"><a href="#165604" label="[16:56:04]">&lt;stikonas&gt;</a></span><span class="message">well, yes...</span></div><div class="line" id="165705"><span class="nick" style="color:#389600"><a href="#165705" label="[16:57:05]">&lt;stikonas&gt;</a></span><span class="message">EMV card terminals also have little screen, although that one is useless since it's the seller that controls the terminal</span></div><div class="line" id="170120"><span class="nick" style="color:#6b8072"><a href="#170120" label="[17:01:20]">&lt;xentrac&gt;</a></span><span class="message">if your only way to look at the source code and binary seed that your high-assurance bootstrapping kernel is going to compile is a kernel potentially controlled by Mallet, she can show you uncorrupted source code on the screen while leaving corrupted source code on disk for the actual compile</span></div><div class="line" id="171728"><span class="nick" style="color:#234e69"><a href="#171728" label="[17:17:28]">&lt;Melg8[m]&gt;</a></span><span class="message">oriansj: Will it be useful if i fuzz M2-planet and will report bugs/leaks/crashes?</span></div><div class="line" id="173655"><span class="nick" style="color:#389600"><a href="#173655" label="[17:36:55]">&lt;stikonas&gt;</a></span><span class="message">the answer to the question &quot;should I report bugs&quot; is always yes</span></div><div class="line" id="173714"><span class="nick" style="color:#389600"><a href="#173714" label="[17:37:14]">&lt;stikonas&gt;</a></span><span class="message">for any project</span></div><div class="line" id="174010"><span class="nick" style="color:#234e69"><a href="#174010" label="[17:40:10]">&lt;Melg8[m]&gt;</a></span><span class="message">one thing is report bugs - other - actively do something to find them)</span></div><div class="line" id="183250"><span class="nick">***</span><span class="message notice">roptat is now known as roptat_</span></div><div class="line" id="183255"><span class="nick">***</span><span class="message notice">roptat_ is now known as tyreunom_</span></div><div class="line" id="183256"><span class="nick">***</span><span class="message notice">tyreunom_ is now known as tyreunom</span></div><div class="line" id="183259"><span class="nick">***</span><span class="message notice">tyreunom is now known as roptat</span></div><div class="line" id="221932"><span class="nick" style="color:#389600"><a href="#221932" label="[22:19:32]">&lt;stikonas&gt;</a></span><span class="message">fossy: one very small PR <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/127">https://github.com/fosslinux/live-bootstrap/pull/127</a> </span></div><div class="line" id="234931"><span class="nick" style="color:#6c3d55"><a href="#234931" label="[23:49:31]">&lt;Hagfish&gt;</a></span><span class="message">(LGTM)</span></div><br /></div></body></html>