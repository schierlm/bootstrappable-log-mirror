<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-10-01.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000332"><span class="nick" style="color:#389600"><a href="#000332" label="[00:03:32]">&lt;oriansj&gt;</a></span><span class="message">well the smaller the delta between stage0-posix and stage0-uefi cc_* the easier it would be to detect mistakes</span></div><div class="line" id="000748"><span class="nick" style="color:#2e2a4a"><a href="#000748" label="[00:07:48]">&lt;stikonas&gt;</a></span><span class="message">oriansj: delta is quite huge but mostly trivial things</span></div><div class="line" id="000800"><span class="nick" style="color:#2e2a4a"><a href="#000800" label="[00:08:00]">&lt;stikonas&gt;</a></span><span class="message">I think i had to change over a thousand lines</span></div><div class="line" id="000909"><span class="nick" style="color:#2e2a4a"><a href="#000909" label="[00:09:09]">&lt;stikonas&gt;</a></span><span class="message">mostly stuff like &quot;mov register, label&quot; -&gt; lea register, [rip+label] or &quot;mov register, [label]&quot; -&gt; mov register, [rip+label]. But also slightly more complicated changes in types struct</span></div><div class="line" id="001054"><span class="nick" style="color:#2e2a4a"><a href="#001054" label="[00:10:54]">&lt;stikonas&gt;</a></span><span class="message">ok, debug function crashes in the middle...</span></div><div class="line" id="001634"><span class="nick" style="color:#389600"><a href="#001634" label="[00:16:34]">&lt;oriansj&gt;</a></span><span class="message">that means the bit before it is called passed a something it didn't expect (possibly a null value or an address outside of memory it can read)</span></div><div class="line" id="001652"><span class="nick" style="color:#2e2a4a"><a href="#001652" label="[00:16:52]">&lt;stikonas&gt;</a></span><span class="message">ok, that was just another missed  &quot;mov register, label&quot; in debug function</span></div><div class="line" id="001706"><span class="nick" style="color:#2e2a4a"><a href="#001706" label="[00:17:06]">&lt;stikonas&gt;</a></span><span class="message">so another bug that I didn't spot before because code was commented out</span></div><div class="line" id="001955"><span class="nick" style="color:#389600"><a href="#001955" label="[00:19:55]">&lt;oriansj&gt;</a></span><span class="message">I'm honestly more surprised you didn't actively use it for testing while implementing the functions</span></div><div class="line" id="002248"><span class="nick" style="color:#389600"><a href="#002248" label="[00:22:48]">&lt;oriansj&gt;</a></span><span class="message">as I have always leaned heavily on it when doing cc_* work</span></div><div class="line" id="002603"><span class="nick" style="color:#2e2a4a"><a href="#002603" label="[00:26:03]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I didn't really implement them</span></div><div class="line" id="002615"><span class="nick" style="color:#2e2a4a"><a href="#002615" label="[00:26:15]">&lt;stikonas&gt;</a></span><span class="message">I took cc_amd64 file from stage0-posix</span></div><div class="line" id="002631"><span class="nick" style="color:#2e2a4a"><a href="#002631" label="[00:26:31]">&lt;stikonas&gt;</a></span><span class="message">and just went over it adjusting absolute addressing</span></div><div class="line" id="002643"><span class="nick" style="color:#2e2a4a"><a href="#002643" label="[00:26:43]">&lt;stikonas&gt;</a></span><span class="message">anyway, debug function is working now</span></div><div class="line" id="002708"><span class="nick" style="color:#2e2a4a"><a href="#002708" label="[00:27:08]">&lt;stikonas&gt;</a></span><span class="message">oriansj: it was probably very useful for you cause you had to write all those compilation functions, etc</span></div><div class="line" id="002718"><span class="nick" style="color:#389600"><a href="#002718" label="[00:27:18]">&lt;oriansj&gt;</a></span><span class="message">fair. the debug function was designed to be called from where ever you are and enable you to figure out what is going on if you don't have a debugger to use</span></div><div class="line" id="002811"><span class="nick" style="color:#389600"><a href="#002811" label="[00:28:11]">&lt;oriansj&gt;</a></span><span class="message">as the first cc_* written was for knight and the debug was very primitive</span></div><div class="line" id="002837"><span class="nick" style="color:#2e2a4a"><a href="#002837" label="[00:28:37]">&lt;stikonas&gt;</a></span><span class="message">well, now it might be useful for me, since I can't easily figure it out using gdb</span></div><div class="line" id="002852"><span class="nick" style="color:#2e2a4a"><a href="#002852" label="[00:28:52]">&lt;stikonas&gt;</a></span><span class="message">unless I go step by step over the whole thing</span></div><div class="line" id="002916"><span class="nick" style="color:#389600"><a href="#002916" label="[00:29:16]">&lt;oriansj&gt;</a></span><span class="message">yeah, that is an exercise in frustration</span></div><div class="line" id="011925"><span class="nick" style="color:#2e2a4a"><a href="#011925" label="[01:19:25]">&lt;stikonas&gt;</a></span><span class="message">hmm, still not sure what is broken, but it must be something where I made types structs relatively addressed</span></div><div class="line" id="012033"><span class="nick" style="color:#2e2a4a"><a href="#012033" label="[01:20:33]">&lt;stikonas&gt;</a></span><span class="message">and that diff is not that large...</span></div><div class="line" id="012613"><span class="nick" style="color:#2e2a4a"><a href="#012613" label="[01:26:13]">&lt;stikonas&gt;</a></span><span class="message">(diff is actually here: <a rel="nofollow" href="https://paste.debian.net/1255590/">https://paste.debian.net/1255590/</a>) </span></div><div class="line" id="012918"><span class="nick">***</span><span class="message notice">nckx is now known as nckhexen</span></div><div class="line" id="013014"><span class="nick" style="color:#2e2a4a"><a href="#013014" label="[01:30:14]">&lt;stikonas&gt;</a></span><span class="message">ok, I found the bug...</span></div><div class="line" id="013026"><span class="nick" style="color:#2e2a4a"><a href="#013026" label="[01:30:26]">&lt;stikonas&gt;</a></span><span class="message">fix_types did not iterate over indirect types...</span></div><div class="line" id="024929"><span class="nick" style="color:#6b8072"><a href="#024929" label="[02:49:29]">&lt;ilmu[m]&gt;</a></span><span class="message">&lt;oriansj&gt; &quot;one: it tends to lead to non-...&quot; &lt;- only if you get stuck debating the premise, if you can move on from picking a coordinate frame then you get a technical discussion.</span></div><div class="line" id="032358"><span class="nick" style="color:#389600"><a href="#032358" label="[03:23:58]">&lt;oriansj&gt;</a></span><span class="message">ilmu[m]: well let us assume the premise is valid, what technical problems remain to reaching the final goal state?</span></div><div class="line" id="044813"><span class="nick" style="color:#6b8072"><a href="#044813" label="[04:48:13]">&lt;ilmu[m]&gt;</a></span><span class="message">if the goal state is &quot;truth&quot; then I want to tell you that the icelandic word for truth is &quot;sannleikur&quot; which is a composition of the words for &quot;proving&quot; and &quot;game&quot; so when I say &quot;fix a premise&quot; I am saying &quot;pick some axioms&quot; and then the &quot;technical discussion&quot; can also be called &quot;mathematics&quot;</span></div><div class="line" id="044908"><span class="nick" style="color:#6b8072"><a href="#044908" label="[04:49:08]">&lt;ilmu[m]&gt;</a></span><span class="message">final goal state would be to know everything that is true given the axioms</span></div><div class="line" id="045026"><span class="nick" style="color:#6b8072"><a href="#045026" label="[04:50:26]">&lt;ilmu[m]&gt;</a></span><span class="message">barring that; you'd want to know what you can know given the axioms</span></div><div class="line" id="053243"><span class="nick" style="color:#6b8072"><a href="#053243" label="[05:32:43]">&lt;ilmu[m]&gt;</a></span><span class="message">people</span></div><div class="line" id="053306"><span class="nick" style="color:#6b8072"><a href="#053306" label="[05:33:06]">&lt;ilmu[m]&gt;</a></span><span class="message"> * [[[ wrote into wrong window ]]]</span></div><div class="line" id="063451"><span class="nick" style="color:#80b1d3"><a href="#063451" label="[06:34:51]">&lt;muurkha&gt;</a></span><span class="message">are you from Iceland?</span></div><div class="line" id="112832"><span class="nick" style="color:#6d2462"><a href="#112832" label="[11:28:32]">&lt;stikonas[m]&gt;</a></span><span class="message">ilmu: Knowing everything that is true given axioms is simply not possible</span></div><div class="line" id="112935"><span class="nick" style="color:#6d2462"><a href="#112935" label="[11:29:35]">&lt;stikonas[m]&gt;</a></span><span class="message">So you can immediately throw away your final goal</span></div><div class="line" id="113046"><span class="nick" style="color:#6d2462"><a href="#113046" label="[11:30:46]">&lt;stikonas[m]&gt;</a></span><span class="message">It's simply a theorem that there are always statements that can be neither proved nor disproved given the axioms</span></div><div class="line" id="135716"><span class="nick" style="color:#6b8072"><a href="#135716" label="[13:57:16]">&lt;ilmu[m]&gt;</a></span><span class="message">&lt;stikonas[m]&gt; &quot;ilmu: Knowing everything that is...&quot; &lt;- that's literally what datalog does (given it's restricted semantics)</span></div><div class="line" id="135719"><span class="nick" style="color:#6b8072"><a href="#135719" label="[13:57:19]">&lt;ilmu[m]&gt;</a></span><span class="message">&lt;muurkha&gt; &quot;are you from Iceland?&quot; &lt;- yep</span></div><div class="line" id="135802"><span class="nick" style="color:#6b8072"><a href="#135802" label="[13:58:02]">&lt;ilmu[m]&gt;</a></span><span class="message">the theorem you mention stikonas is exactly a result of people testing the limits of what holds given the axioms</span></div><div class="line" id="144105"><span class="nick">***</span><span class="message notice">Noisytoot_ is now known as Noisytoot</span></div><div class="line" id="152933"><span class="nick" style="color:#389600"><a href="#152933" label="[15:29:33]">&lt;oriansj&gt;</a></span><span class="message">ilmu[m]: the idea isn't for software to replace human thinking but to amplify what can be achieved.</span></div><div class="line" id="153008"><span class="nick" style="color:#6b8072"><a href="#153008" label="[15:30:08]">&lt;ilmu[m]&gt;</a></span><span class="message">yeah and also to help the human prioritize how to allocate attention</span></div><div class="line" id="153009"><span class="nick" style="color:#389600"><a href="#153009" label="[15:30:09]">&lt;oriansj&gt;</a></span><span class="message">and aid in encouraging human cooperation.</span></div><div class="line" id="153025"><span class="nick" style="color:#6b8072"><a href="#153025" label="[15:30:25]">&lt;ilmu[m]&gt;</a></span><span class="message">the issue is that right now you don't get control over the program that &quot;helps you prioritize&quot;</span></div><div class="line" id="153036"><span class="nick" style="color:#6b8072"><a href="#153036" label="[15:30:36]">&lt;ilmu[m]&gt;</a></span><span class="message">oriansj: yep exact</span></div><div class="line" id="153049"><span class="nick" style="color:#389600"><a href="#153049" label="[15:30:49]">&lt;oriansj&gt;</a></span><span class="message">ilmu[m]: well people have to be able to allocate their attention and resources on the wrong things</span></div><div class="line" id="153104"><span class="nick" style="color:#6b8072"><a href="#153104" label="[15:31:04]">&lt;ilmu[m]&gt;</a></span><span class="message">because who knows what is the &quot;wrong&quot; thing</span></div><div class="line" id="153113"><span class="nick" style="color:#389600"><a href="#153113" label="[15:31:13]">&lt;oriansj&gt;</a></span><span class="message">bingo</span></div><div class="line" id="153127"><span class="nick" style="color:#6b8072"><a href="#153127" label="[15:31:27]">&lt;ilmu[m]&gt;</a></span><span class="message">&quot;who is fit to assess?&quot; is the fundamental reoccuring question</span></div><div class="line" id="153142"><span class="nick" style="color:#6b8072"><a href="#153142" label="[15:31:42]">&lt;ilmu[m]&gt;</a></span><span class="message">we can provide tooling to assist humans in trying to answer it</span></div><div class="line" id="153457"><span class="nick" style="color:#389600"><a href="#153457" label="[15:34:57]">&lt;oriansj&gt;</a></span><span class="message">ilmu[m]: hence why &quot;who does decides&quot; matters.</span></div><div class="line" id="153619"><span class="nick" style="color:#389600"><a href="#153619" label="[15:36:19]">&lt;oriansj&gt;</a></span><span class="message">as long as those who are doing the work get to decide what gets done, then the tools will empower and not enslave the users.</span></div><div class="line" id="153654"><span class="nick" style="color:#6b8072"><a href="#153654" label="[15:36:54]">&lt;ilmu[m]&gt;</a></span><span class="message">oriansj: &quot;coupling responsibility and authority&quot; is how I put it somewhere, but yeah I agree.</span></div><div class="line" id="153830"><span class="nick" style="color:#389600"><a href="#153830" label="[15:38:30]">&lt;oriansj&gt;</a></span><span class="message">ilmu[m]: good. Now what are the technical problems that need solving?</span></div><div class="line" id="153919"><span class="nick" style="color:#6b8072"><a href="#153919" label="[15:39:19]">&lt;ilmu[m]&gt;</a></span><span class="message">I have a roadmap which is roughly to fill in this skeleton: <a rel="nofollow" href="https://sr.ht/~ilmu/tala.saman/sources">https://sr.ht/~ilmu/tala.saman/sources</a> </span></div><div class="line" id="154847"><span class="nick" style="color:#389600"><a href="#154847" label="[15:48:47]">&lt;oriansj&gt;</a></span><span class="message">ilmu[m]: have you ever read the Cory Doctorow book Walkaway?</span></div><div class="line" id="160016"><span class="nick" style="color:#2e2a4a"><a href="#160016" label="[16:00:16]">&lt;stikonas&gt;</a></span><span class="message">ok, found another bug in my position independent cc_amd64</span></div><div class="line" id="160112"><span class="nick" style="color:#2e2a4a"><a href="#160112" label="[16:01:12]">&lt;stikonas&gt;</a></span><span class="message">now there are no more crashes, though there is some corruption in output (but it seems to be limitted to comments)</span></div><div class="line" id="160127"><span class="nick" style="color:#2e2a4a"><a href="#160127" label="[16:01:27]">&lt;stikonas&gt;</a></span><span class="message">so probably 1 more bug left</span></div><div class="line" id="160727"><span class="nick" style="color:#389600"><a href="#160727" label="[16:07:27]">&lt;oriansj&gt;</a></span><span class="message">I believe the logic is that there are 10x more bugs for every bug we see.</span></div><div class="line" id="160901"><span class="nick" style="color:#2e2a4a"><a href="#160901" label="[16:09:01]">&lt;stikonas&gt;</a></span><span class="message">oriansj: well, the diff between good and bad output is now <a rel="nofollow" href="https://paste.debian.net/1255617/">https://paste.debian.net/1255617/</a> </span></div><div class="line" id="160940"><span class="nick" style="color:#2e2a4a"><a href="#160940" label="[16:09:40]">&lt;stikonas&gt;</a></span><span class="message">all if labels in the comments are broken</span></div><div class="line" id="160956"><span class="nick" style="color:#2e2a4a"><a href="#160956" label="[16:09:56]">&lt;stikonas&gt;</a></span><span class="message">(though this shouldn't affect the binary code)</span></div><div class="line" id="161041"><span class="nick" style="color:#2e2a4a"><a href="#161041" label="[16:10:41]">&lt;stikonas&gt;</a></span><span class="message">interestingly, only if is affected</span></div><div class="line" id="161055"><span class="nick" style="color:#2e2a4a"><a href="#161055" label="[16:10:55]">&lt;stikonas&gt;</a></span><span class="message">so that would suggest something missing in process_if:</span></div><div class="line" id="161103"><span class="nick" style="color:#2e2a4a"><a href="#161103" label="[16:11:03]">&lt;stikonas&gt;</a></span><span class="message">but so far I can't spot anythint there</span></div><div class="line" id="161153"><span class="nick" style="color:#389600"><a href="#161153" label="[16:11:53]">&lt;oriansj&gt;</a></span><span class="message">the pointer being passed to the string generating the labels is wrong</span></div><div class="line" id="161424"><span class="nick" style="color:#2e2a4a"><a href="#161424" label="[16:14:24]">&lt;stikonas&gt;</a></span><span class="message">ok, found it</span></div><div class="line" id="161437"><span class="nick" style="color:#2e2a4a"><a href="#161437" label="[16:14:37]">&lt;stikonas&gt;</a></span><span class="message">there was lea instead of mov</span></div><div class="line" id="161455"><span class="nick" style="color:#2e2a4a"><a href="#161455" label="[16:14:55]">&lt;stikonas&gt;</a></span><span class="message">so I think I now have a working position independent cc_amd64 GAS prototype (for posix)</span></div><div class="line" id="161520"><span class="nick" style="color:#2e2a4a"><a href="#161520" label="[16:15:20]">&lt;stikonas&gt;</a></span><span class="message">should we also add it to stage0-posix?</span></div><div class="line" id="161520"><span class="nick" style="color:#2e2a4a"><a href="#161520" label="[16:15:20]">&lt;stikonas&gt;</a></span><span class="message">though it's GAS, not NASM</span></div><div class="line" id="161728"><span class="nick" style="color:#2e2a4a"><a href="#161728" label="[16:17:28]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/amd64/Development/cc_amd64.S">https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/amd64/Development/cc_amd64.S</a> </span></div><div class="line" id="161749"><span class="nick" style="color:#389600"><a href="#161749" label="[16:17:49]">&lt;oriansj&gt;</a></span><span class="message">stikonas: we would be adding it to stage0 itself</span></div><div class="line" id="161817"><span class="nick" style="color:#2e2a4a"><a href="#161817" label="[16:18:17]">&lt;stikonas&gt;</a></span><span class="message">but it still uses POSIX syscalls...</span></div><div class="line" id="161832"><span class="nick" style="color:#2e2a4a"><a href="#161832" label="[16:18:32]">&lt;stikonas&gt;</a></span><span class="message">anyway, my next step is to replace POSIX syscalls with UEFI functions</span></div><div class="line" id="161931"><span class="nick" style="color:#2e2a4a"><a href="#161931" label="[16:19:31]">&lt;stikonas&gt;</a></span><span class="message">and then need to convert to M1</span></div><div class="line" id="161950"><span class="nick" style="color:#389600"><a href="#161950" label="[16:19:50]">&lt;oriansj&gt;</a></span><span class="message">oh, sorry I ment your stage0-uefi work would become a submodule of stage0 when you feel it was ready</span></div><div class="line" id="162005"><span class="nick" style="color:#2e2a4a"><a href="#162005" label="[16:20:05]">&lt;stikonas&gt;</a></span><span class="message">oh that might go to submodule of stage0</span></div><div class="line" id="162015"><span class="nick" style="color:#2e2a4a"><a href="#162015" label="[16:20:15]">&lt;stikonas&gt;</a></span><span class="message">but relocatable cc_amd64.S prototype</span></div><div class="line" id="162053"><span class="nick" style="color:#389600"><a href="#162053" label="[16:20:53]">&lt;oriansj&gt;</a></span><span class="message">can definitely go into stage0-posix-amd64</span></div><div class="line" id="162055"><span class="nick" style="color:#2e2a4a"><a href="#162055" label="[16:20:55]">&lt;stikonas&gt;</a></span><span class="message">it definitely shouldn't replace existing cc_amd64.S</span></div><div class="line" id="162108"><span class="nick" style="color:#2e2a4a"><a href="#162108" label="[16:21:08]">&lt;stikonas&gt;</a></span><span class="message">because that is what corresponds to cc_amd64.M1</span></div><div class="line" id="162117"><span class="nick" style="color:#2e2a4a"><a href="#162117" label="[16:21:17]">&lt;stikonas&gt;</a></span><span class="message">and it's not even NASM assembly</span></div><div class="line" id="162122"><span class="nick" style="color:#389600"><a href="#162122" label="[16:21:22]">&lt;oriansj&gt;</a></span><span class="message">we could create a GAS folder for it</span></div><div class="line" id="162131"><span class="nick" style="color:#2e2a4a"><a href="#162131" label="[16:21:31]">&lt;stikonas&gt;</a></span><span class="message">yeah, that could work</span></div><div class="line" id="162224"><span class="nick" style="color:#2e2a4a"><a href="#162224" label="[16:22:24]">&lt;stikonas&gt;</a></span><span class="message">maybe I should also migrate M2libc defines to those more readable ones...</span></div><div class="line" id="162355"><span class="nick" style="color:#2e2a4a"><a href="#162355" label="[16:23:55]">&lt;stikonas&gt;</a></span><span class="message">well, I should probably finish cc_amd64.efi and then can do defines...</span></div><div class="line" id="162530"><span class="nick" style="color:#389600"><a href="#162530" label="[16:25:30]">&lt;oriansj&gt;</a></span><span class="message">sounds like great idea</span></div><div class="line" id="162709"><span class="nick" style="color:#2e2a4a"><a href="#162709" label="[16:27:09]">&lt;stikonas&gt;</a></span><span class="message">ok, pushed into GAS directory</span></div><div class="line" id="162759"><span class="nick" style="color:#2e2a4a"><a href="#162759" label="[16:27:59]">&lt;stikonas&gt;</a></span><span class="message">there is one extra function to fixup type structures but other than that it follows existing cc_amd64</span></div><div class="line" id="162956"><span class="nick" style="color:#389600"><a href="#162956" label="[16:29:56]">&lt;oriansj&gt;</a></span><span class="message">neat</span></div><div class="line" id="164415"><span class="nick" style="color:#389600"><a href="#164415" label="[16:44:15]">&lt;oriansj&gt;</a></span><span class="message">stikonas: interesting solution in fix_types</span></div><div class="line" id="164615"><span class="nick" style="color:#2e2a4a"><a href="#164615" label="[16:46:15]">&lt;stikonas&gt;</a></span><span class="message">well, that seemed simplest to me</span></div><div class="line" id="164622"><span class="nick" style="color:#2e2a4a"><a href="#164622" label="[16:46:22]">&lt;stikonas&gt;</a></span><span class="message">and most isolated from othat parts of code</span></div><div class="line" id="164645"><span class="nick" style="color:#2e2a4a"><a href="#164645" label="[16:46:45]">&lt;stikonas&gt;</a></span><span class="message">initially I thought to do it relative to prim_types</span></div><div class="line" id="164657"><span class="nick" style="color:#2e2a4a"><a href="#164657" label="[16:46:57]">&lt;stikonas&gt;</a></span><span class="message">but it's simpler to do it relative to each individual type</span></div><div class="line" id="164724"><span class="nick" style="color:#389600"><a href="#164724" label="[16:47:24]">&lt;oriansj&gt;</a></span><span class="message">I like it ^_^</span></div><div class="line" id="171326"><span class="nick" style="color:#389600"><a href="#171326" label="[17:13:26]">&lt;oriansj&gt;</a></span><span class="message">although if we moved the strings after the structs, you could simplify things as they would just be an array</span></div><div class="line" id="173502"><span class="nick" style="color:#2e2a4a"><a href="#173502" label="[17:35:02]">&lt;stikonas&gt;</a></span><span class="message">type strings?</span></div><div class="line" id="173555"><span class="nick" style="color:#2e2a4a"><a href="#173555" label="[17:35:55]">&lt;stikonas&gt;</a></span><span class="message">not sure if I understand your idea yet...</span></div><div class="line" id="173706"><span class="nick" style="color:#2e2a4a"><a href="#173706" label="[17:37:06]">&lt;stikonas&gt;</a></span><span class="message">is each type an element of array, or each .quad an element?</span></div><div class="line" id="174218"><span class="nick" style="color:#389600"><a href="#174218" label="[17:42:18]">&lt;oriansj&gt;</a></span><span class="message">stikonas: if you look at the bottom of every type you see something like type_function_name: .asciz &quot;FUNCTION&quot;</span></div><div class="line" id="174244"><span class="nick" style="color:#389600"><a href="#174244" label="[17:42:44]">&lt;oriansj&gt;</a></span><span class="message">that is the string for the type's name</span></div><div class="line" id="174252"><span class="nick" style="color:#389600"><a href="#174252" label="[17:42:52]">&lt;oriansj&gt;</a></span><span class="message">which is variable in size</span></div><div class="line" id="174308"><span class="nick" style="color:#2e2a4a"><a href="#174308" label="[17:43:08]">&lt;stikonas&gt;</a></span><span class="message">yes, so if we move those out</span></div><div class="line" id="174311"><span class="nick" style="color:#2e2a4a"><a href="#174311" label="[17:43:11]">&lt;stikonas&gt;</a></span><span class="message">everything is constant in size</span></div><div class="line" id="174323"><span class="nick" style="color:#389600"><a href="#174323" label="[17:43:23]">&lt;oriansj&gt;</a></span><span class="message">but it can be moved because it is pointed to by the .quad type_function_name - type_function</span></div><div class="line" id="174328"><span class="nick" style="color:#389600"><a href="#174328" label="[17:43:28]">&lt;oriansj&gt;</a></span><span class="message">indeed</span></div><div class="line" id="174345"><span class="nick" style="color:#2e2a4a"><a href="#174345" label="[17:43:45]">&lt;stikonas&gt;</a></span><span class="message">but we still need to iterate over 4 sets of quads</span></div><div class="line" id="174418"><span class="nick" style="color:#2e2a4a"><a href="#174418" label="[17:44:18]">&lt;stikonas&gt;</a></span><span class="message">ok, but then it's easier to predict in advance</span></div><div class="line" id="174425"><span class="nick" style="color:#2e2a4a"><a href="#174425" label="[17:44:25]">&lt;stikonas&gt;</a></span><span class="message">where the next element is?</span></div><div class="line" id="174440"><span class="nick" style="color:#2e2a4a"><a href="#174440" label="[17:44:40]">&lt;stikonas&gt;</a></span><span class="message">so we don't need to bother with that INDIRECT vs NEXT?</span></div><div class="line" id="174449"><span class="nick" style="color:#389600"><a href="#174449" label="[17:44:49]">&lt;oriansj&gt;</a></span><span class="message">indeed</span></div><div class="line" id="174504"><span class="nick" style="color:#2e2a4a"><a href="#174504" label="[17:45:04]">&lt;stikonas&gt;</a></span><span class="message">ok, got it</span></div><div class="line" id="174532"><span class="nick" style="color:#2e2a4a"><a href="#174532" label="[17:45:32]">&lt;stikonas&gt;</a></span><span class="message">I think i'll do it</span></div><div class="line" id="174609"><span class="nick" style="color:#389600"><a href="#174609" label="[17:46:09]">&lt;oriansj&gt;</a></span><span class="message">and if we are willing to change the order of the elements in the struct itself, then we just have 16 sets of  pointer, int</span></div><div class="line" id="174841"><span class="nick" style="color:#389600"><a href="#174841" label="[17:48:41]">&lt;oriansj&gt;</a></span><span class="message">but that would take a good deal more work as it would impact all of the -&gt; bits in the above code</span></div><div class="line" id="174950"><span class="nick" style="color:#2e2a4a"><a href="#174950" label="[17:49:50]">&lt;stikonas&gt;</a></span><span class="message">hmm, that is indeed a bit more work...</span></div><div class="line" id="183016"><span class="nick" style="color:#2e2a4a"><a href="#183016" label="[18:30:16]">&lt;stikonas&gt;</a></span><span class="message">oriansj: hmm, it might be easier to iterate but it's trickier to do the last type</span></div><div class="line" id="183047"><span class="nick" style="color:#2e2a4a"><a href="#183047" label="[18:30:47]">&lt;stikonas&gt;</a></span><span class="message">as I need to stop at NEXT=0</span></div><div class="line" id="183127"><span class="nick" style="color:#2e2a4a"><a href="#183127" label="[18:31:27]">&lt;stikonas&gt;</a></span><span class="message">well, for now I've implemented the first suggestion</span></div><div class="line" id="183144"><span class="nick" style="color:#2e2a4a"><a href="#183144" label="[18:31:44]">&lt;stikonas&gt;</a></span><span class="message">as that is a fairly cheap fix that does not affect much</span></div><div class="line" id="183332"><span class="nick" style="color:#2e2a4a"><a href="#183332" label="[18:33:32]">&lt;stikonas&gt;</a></span><span class="message">still fixup_type is already much simpler</span></div><div class="line" id="211701"><span class="nick" style="color:#389600"><a href="#211701" label="[21:17:01]">&lt;oriansj&gt;</a></span><span class="message">stikonas: fair; that is probably enough simplification anyway.</span></div><div class="line" id="224337"><span class="nick" style="color:#2e2a4a"><a href="#224337" label="[22:43:37]">&lt;stikonas&gt;</a></span><span class="message">hmm, first attempt of porting cc_amd64.S to UEFI (which took maybe 5 minutes) manages to completely crash UEFI and cause a reboot...</span></div><div class="line" id="235038"><span class="nick" style="color:#389600"><a href="#235038" label="[23:50:38]">&lt;oriansj&gt;</a></span><span class="message">UEFI seems to be less stable than DOS and I must say that is a serious achievement</span></div><div class="line" id="235340"><span class="nick" style="color:#80b1d3"><a href="#235340" label="[23:53:40]">&lt;muurkha&gt;</a></span><span class="message">heh</span></div><br /></div></body></html>