<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-06-10.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="001602"><span class="nick" style="color:#8dd3c7"><a href="#001602" label="[00:16:02]">&lt;oriansj&gt;</a></span><span class="message">stikonas: thank you, merged</span></div><div class="line" id="001642"><span class="nick" style="color:#8dd3c7"><a href="#001642" label="[00:16:42]">&lt;oriansj&gt;</a></span><span class="message">I'll have it updated in stage0-posix before I do the release. (hopefully everything else is making you happy ^_^)</span></div><div class="line" id="001700"><span class="nick" style="color:#2e2a4a"><a href="#001700" label="[00:17:00]">&lt;stikonas&gt;</a></span><span class="message">ok, thanks</span></div><div class="line" id="001726"><span class="nick" style="color:#2e2a4a"><a href="#001726" label="[00:17:26]">&lt;stikonas&gt;</a></span><span class="message">yeah, everything else is fine</span></div><div class="line" id="001726"><span class="nick" style="color:#2e2a4a"><a href="#001726" label="[00:17:26]">&lt;stikonas&gt;</a></span><span class="message">that was the only change I needed</span></div><div class="line" id="001804"><span class="nick" style="color:#2e2a4a"><a href="#001804" label="[00:18:04]">&lt;stikonas&gt;</a></span><span class="message">I'm now at the stage where I fix checksums, just fixed sed, patch is next and after that I think it should build till the end</span></div><div class="line" id="001828"><span class="nick" style="color:#2e2a4a"><a href="#001828" label="[00:18:28]">&lt;stikonas&gt;</a></span><span class="message">(cause now we will be using sha256sum from the very beginning, no need to use fletcher)</span></div><div class="line" id="001909"><span class="nick" style="color:#2e2a4a"><a href="#001909" label="[00:19:09]">&lt;stikonas&gt;</a></span><span class="message">but I do need update in stage0-posix before I make PR...</span></div><div class="line" id="001913"><span class="nick" style="color:#2e2a4a"><a href="#001913" label="[00:19:13]">&lt;stikonas&gt;</a></span><span class="message">but this can wait a bit</span></div><div class="line" id="001938"><span class="nick" style="color:#2e2a4a"><a href="#001938" label="[00:19:38]">&lt;stikonas&gt;</a></span><span class="message">I still need to finish things and then tidy up bit (go over readme, etc...)</span></div><div class="line" id="002338"><span class="nick" style="color:#6b8072"><a href="#002338" label="[00:23:38]">*</a></span><span class="message">stikonas goes back to #nethack game while live-bootstrap runs</span></div><div class="line" id="003313"><span class="nick" style="color:#8dd3c7"><a href="#003313" label="[00:33:13]">&lt;oriansj&gt;</a></span><span class="message">stikonas: I'll get that release out once I finish testing aarch64 (it'll be a minute as it is enitrely qemu emulated)</span></div><div class="line" id="003343"><span class="nick" style="color:#2e2a4a"><a href="#003343" label="[00:33:43]">&lt;stikonas&gt;</a></span><span class="message">well, that's soon enough anyway</span></div><div class="line" id="003345"><span class="nick" style="color:#2e2a4a"><a href="#003345" label="[00:33:45]">&lt;stikonas&gt;</a></span><span class="message">I was just wondering whether release is e.g. days away or soon</span></div><div class="line" id="003557"><span class="nick" style="color:#8dd3c7"><a href="#003557" label="[00:35:57]">&lt;oriansj&gt;</a></span><span class="message">stikonas: in this case it'll be the time it takes for stage0-posix to run from start to finish twice on AArch64 (so an hour maybe)</span></div><div class="line" id="003655"><span class="nick" style="color:#2e2a4a"><a href="#003655" label="[00:36:55]">&lt;stikonas&gt;</a></span><span class="message">at some point it should be good to add aarch64 qemu option to live-bootstrap. Even if it doesn't run to completion</span></div><div class="line" id="003706"><span class="nick" style="color:#2e2a4a"><a href="#003706" label="[00:37:06]">&lt;stikonas&gt;</a></span><span class="message">just slowly start fixing x86'isms</span></div><div class="line" id="003758"><span class="nick" style="color:#8dd3c7"><a href="#003758" label="[00:37:58]">&lt;oriansj&gt;</a></span><span class="message">AMD64 would be a cheap and easy half-step</span></div><div class="line" id="003918"><span class="nick" style="color:#8dd3c7"><a href="#003918" label="[00:39:18]">&lt;oriansj&gt;</a></span><span class="message">and flush out all of the 32bit problems before you add the issues of a new architecture ontop of it</span></div><div class="line" id="003925"><span class="nick" style="color:#2e2a4a"><a href="#003925" label="[00:39:25]">&lt;stikonas&gt;</a></span><span class="message">indeed, and AMD64 can run natively..</span></div><div class="line" id="003933"><span class="nick" style="color:#2e2a4a"><a href="#003933" label="[00:39:33]">&lt;stikonas&gt;</a></span><span class="message">so wouldn't take a day to run</span></div><div class="line" id="003945"><span class="nick" style="color:#8dd3c7"><a href="#003945" label="[00:39:45]">&lt;oriansj&gt;</a></span><span class="message">and x86 legacy binaries too</span></div><div class="line" id="003955"><span class="nick" style="color:#2e2a4a"><a href="#003955" label="[00:39:55]">&lt;stikonas&gt;</a></span><span class="message">well, for now I'll leave it in case somebody else picks it up</span></div><div class="line" id="004001"><span class="nick" style="color:#8dd3c7"><a href="#004001" label="[00:40:01]">&lt;oriansj&gt;</a></span><span class="message">So you can do the conversion one program at a time</span></div><div class="line" id="004057"><span class="nick" style="color:#8dd3c7"><a href="#004057" label="[00:40:57]">&lt;oriansj&gt;</a></span><span class="message">although the first big blocker would be we don't have an AMD64 build of mes-m2 yet</span></div><div class="line" id="004202"><span class="nick" style="color:#2e2a4a"><a href="#004202" label="[00:42:02]">&lt;stikonas&gt;</a></span><span class="message">and also code branching has to solved. kaem doesn't have any way to do conditionals</span></div><div class="line" id="004306"><span class="nick" style="color:#2e2a4a"><a href="#004306" label="[00:43:06]">&lt;stikonas&gt;</a></span><span class="message">something can definitely be written, but I'm not sure what's the nicest way</span></div><div class="line" id="004323"><span class="nick" style="color:#2e2a4a"><a href="#004323" label="[00:43:23]">&lt;stikonas&gt;</a></span><span class="message">I guess hard to tell until somebody starts doing the work</span></div><div class="line" id="004346"><span class="nick" style="color:#2e2a4a"><a href="#004346" label="[00:43:46]">&lt;stikonas&gt;</a></span><span class="message">well, all checksums will definitely change, but also some builds/installation scripts</span></div><div class="line" id="004858"><span class="nick" style="color:#8dd3c7"><a href="#004858" label="[00:48:58]">&lt;oriansj&gt;</a></span><span class="message">stikonas: no problem just define a single variable ARCH and the checksum file becomes SHA256SUM.${ARCH}</span></div><div class="line" id="004939"><span class="nick" style="color:#8dd3c7"><a href="#004939" label="[00:49:39]">&lt;oriansj&gt;</a></span><span class="message">when the code needs to branch kaem -f thing.${ARCH}</span></div><div class="line" id="005211"><span class="nick" style="color:#8dd3c7"><a href="#005211" label="[00:52:11]">&lt;oriansj&gt;</a></span><span class="message">So not the most optimal solution but it does give a possiblity to do it without kaem changes. But what is wrong with enhancing kaem more? As long as M2-Planet+M2libc can build it go crazy</span></div><div class="line" id="005324"><span class="nick" style="color:#8dd3c7"><a href="#005324" label="[00:53:24]">&lt;oriansj&gt;</a></span><span class="message">which reminds me I need to add support for short and uint16_t to M2-Planet so that we can properly support STAT syscalls</span></div><div class="line" id="005454"><span class="nick" style="color:#2e2a4a"><a href="#005454" label="[00:54:54]">&lt;stikonas&gt;</a></span><span class="message">yeah, enhancing kaem more might be better</span></div><div class="line" id="005607"><span class="nick" style="color:#8dd3c7"><a href="#005607" label="[00:56:07]">&lt;oriansj&gt;</a></span><span class="message">or someone could implement a mini-make in the M2-Planet subset if that sounds like fun</span></div><div class="line" id="005847"><span class="nick" style="color:#2e2a4a"><a href="#005847" label="[00:58:47]">&lt;stikonas&gt;</a></span><span class="message">ok, so far live-bootstrap is running well, already reached gcc</span></div><div class="line" id="011316"><span class="nick" style="color:#80b1d3"><a href="#011316" label="[01:13:16]">&lt;Hagfish&gt;</a></span><span class="message">that's a good sign :)</span></div><div class="line" id="011756"><span class="nick" style="color:#8dd3c7"><a href="#011756" label="[01:17:56]">&lt;oriansj&gt;</a></span><span class="message">Now the problem set for attackers is to compromise a sha256sum build chain starting from a 357byte seed.</span></div><div class="line" id="011815"><span class="nick" style="color:#6d2462"><a href="#011815" label="[01:18:15]">&lt;vagrantc&gt;</a></span><span class="message">nice</span></div><div class="line" id="012003"><span class="nick" style="color:#8dd3c7"><a href="#012003" label="[01:20:03]">&lt;oriansj&gt;</a></span><span class="message">or sha3 depending on what we want thanks to mihi adding sha3 to messc-tools-extra</span></div><div class="line" id="012039"><span class="nick" style="color:#80b1d3"><a href="#012039" label="[01:20:39]">&lt;Hagfish&gt;</a></span><span class="message">it's getting close to the point where the most fruitful line of attack would be to find new discoveries in mathematics or physics</span></div><div class="line" id="012107"><span class="nick" style="color:#8dd3c7"><a href="#012107" label="[01:21:07]">&lt;oriansj&gt;</a></span><span class="message">So a multiple crypto cross checking build chain</span></div><div class="line" id="012139"><span class="nick" style="color:#80b1d3"><a href="#012139" label="[01:21:39]">&lt;Hagfish&gt;</a></span><span class="message">that would be easier as a defender than the attacker's job</span></div><div class="line" id="012142"><span class="nick" style="color:#2e2a4a"><a href="#012142" label="[01:21:42]">&lt;stikonas&gt;</a></span><span class="message">oriansj: do you remember if sha256sum from mescc-tools-extra works with large files (&gt; 2MiB)?</span></div><div class="line" id="012159"><span class="nick" style="color:#2e2a4a"><a href="#012159" label="[01:21:59]">&lt;stikonas&gt;</a></span><span class="message">I guess I can check once my live-bootstrap finishes</span></div><div class="line" id="012318"><span class="nick" style="color:#8dd3c7"><a href="#012318" label="[01:23:18]">&lt;oriansj&gt;</a></span><span class="message">stikonas: I believe so but I'll double check with a nice fat 400MB file</span></div><div class="line" id="012324"><span class="nick" style="color:#2e2a4a"><a href="#012324" label="[01:23:24]">&lt;stikonas&gt;</a></span><span class="message">Hagfish: well, mathematics itself is like that, you can't prove within your axiom system that your axiom system is consistent.</span></div><div class="line" id="012332"><span class="nick" style="color:#2e2a4a"><a href="#012332" label="[01:23:32]">&lt;stikonas&gt;</a></span><span class="message">oriansj: oh, maybe we don't need to bother then with coreutils-6...</span></div><div class="line" id="012419"><span class="nick" style="color:#2e2a4a"><a href="#012419" label="[01:24:19]">&lt;stikonas&gt;</a></span><span class="message">Hagfish: also there are things you can't prove in maths given those axioms</span></div><div class="line" id="012611"><span class="nick" style="color:#80b1d3"><a href="#012611" label="[01:26:11]">&lt;Hagfish&gt;</a></span><span class="message">yeah, and you can't prove that there aren't any quicker algorithms for breaking RSA or finding reverses of hashes</span></div><div class="line" id="012634"><span class="nick" style="color:#8dd3c7"><a href="#012634" label="[01:26:34]">&lt;oriansj&gt;</a></span><span class="message">well it does 13MB files fine (a bit slow but it works)</span></div><div class="line" id="012659"><span class="nick" style="color:#80b1d3"><a href="#012659" label="[01:26:59]">&lt;Hagfish&gt;</a></span><span class="message">or prove that a 2048 bit key is stronger than a 1024 bit key (and obviously not all 1024 bit numbers are equally good as keys)</span></div><div class="line" id="012700"><span class="nick" style="color:#8dd3c7"><a href="#012700" label="[01:27:00]">&lt;oriansj&gt;</a></span><span class="message">and completed a 400MB+ file correctly</span></div><div class="line" id="012744"><span class="nick" style="color:#8dd3c7"><a href="#012744" label="[01:27:44]">&lt;oriansj&gt;</a></span><span class="message">(Took about 5 minutes to do 400MB in M2-Planet+M2libc built sha256sum)</span></div><div class="line" id="012800"><span class="nick" style="color:#2e2a4a"><a href="#012800" label="[01:28:00]">&lt;stikonas&gt;</a></span><span class="message">well, we have up to 12 MB or so...</span></div><div class="line" id="012856"><span class="nick" style="color:#8dd3c7"><a href="#012856" label="[01:28:56]">&lt;oriansj&gt;</a></span><span class="message">(I used the void-live-ppc-20200411.iso from my PPC32 mescc-tools attempt, never could get it to give me something useful so I probably missed something obvious)</span></div><div class="line" id="013110"><span class="nick" style="color:#2e2a4a"><a href="#013110" label="[01:31:10]">&lt;stikonas&gt;</a></span><span class="message">oriansj: yes, it works quite well</span></div><div class="line" id="013124"><span class="nick" style="color:#2e2a4a"><a href="#013124" label="[01:31:24]">&lt;stikonas&gt;</a></span><span class="message">better than that sha-2-61555d thing</span></div><div class="line" id="013209"><span class="nick" style="color:#2e2a4a"><a href="#013209" label="[01:32:09]">&lt;stikonas&gt;</a></span><span class="message">maybe a bit slower when built with M2-Planet (that was built with tcc) but more correct</span></div><div class="line" id="013415"><span class="nick" style="color:#8dd3c7"><a href="#013415" label="[01:34:15]">&lt;oriansj&gt;</a></span><span class="message">stikonas: sha256sum.c is certainly buildable by tcc and GCC and will also work correctly</span></div><div class="line" id="013433"><span class="nick" style="color:#8dd3c7"><a href="#013433" label="[01:34:33]">&lt;oriansj&gt;</a></span><span class="message">So rebuilding it after tcc for speed improvements isn't a bad idea</span></div><div class="line" id="013459"><span class="nick" style="color:#2e2a4a"><a href="#013459" label="[01:34:59]">&lt;stikonas&gt;</a></span><span class="message">well, I'll leave that for later commits</span></div><div class="line" id="013544"><span class="nick" style="color:#2e2a4a"><a href="#013544" label="[01:35:44]">&lt;stikonas&gt;</a></span><span class="message">also using ungz, etc will be left for later commits</span></div><div class="line" id="013645"><span class="nick" style="color:#8dd3c7"><a href="#013645" label="[01:36:45]">&lt;oriansj&gt;</a></span><span class="message">it'll certainly allow the clean up of git submodules and significantly drop live-bootstrap's .git size</span></div><div class="line" id="022628"><span class="nick" style="color:#8dd3c7"><a href="#022628" label="[02:26:28]">&lt;oriansj&gt;</a></span><span class="message">and stage0-posix release v1.3 is now officially out</span></div><div class="line" id="023404"><span class="nick" style="color:#2e2a4a"><a href="#023404" label="[02:34:04]">&lt;stikonas&gt;</a></span><span class="message">oriansj: nice!</span></div><div class="line" id="023411"><span class="nick" style="color:#2e2a4a"><a href="#023411" label="[02:34:11]">&lt;stikonas&gt;</a></span><span class="message">I think it will work with live-bootstrap</span></div><div class="line" id="023426"><span class="nick" style="color:#2e2a4a"><a href="#023426" label="[02:34:26]">&lt;stikonas&gt;</a></span><span class="message">I'll have to fix one more thing, but I think that's inside live-bootstrap</span></div><div class="line" id="023426"><span class="nick" style="color:#2e2a4a"><a href="#023426" label="[02:34:26]">&lt;stikonas&gt;</a></span><span class="message">at the moment live-bootstrap runs twice</span></div><div class="line" id="023452"><span class="nick" style="color:#2e2a4a"><a href="#023452" label="[02:34:52]">&lt;stikonas&gt;</a></span><span class="message">because it automatically hooks up to your after.kaem hook</span></div><div class="line" id="023459"><span class="nick" style="color:#2e2a4a"><a href="#023459" label="[02:34:59]">&lt;stikonas&gt;</a></span><span class="message">in addition to old hacky way</span></div><div class="line" id="023607"><span class="nick" style="color:#2e2a4a"><a href="#023607" label="[02:36:07]">&lt;stikonas&gt;</a></span><span class="message">should be able to finish it tomorrow</span></div><div class="line" id="023617"><span class="nick" style="color:#8dd3c7"><a href="#023617" label="[02:36:17]">&lt;oriansj&gt;</a></span><span class="message">stikonas: nice</span></div><div class="line" id="023643"><span class="nick" style="color:#2e2a4a"><a href="#023643" label="[02:36:43]">&lt;stikonas&gt;</a></span><span class="message">yeah, automatic way just worked</span></div><div class="line" id="023651"><span class="nick" style="color:#2e2a4a"><a href="#023651" label="[02:36:51]">&lt;stikonas&gt;</a></span><span class="message">without me even trying to do anything</span></div><div class="line" id="023657"><span class="nick" style="color:#2e2a4a"><a href="#023657" label="[02:36:57]">&lt;stikonas&gt;</a></span><span class="message">I guess because you used the same file name</span></div><div class="line" id="023710"><span class="nick" style="color:#2e2a4a"><a href="#023710" label="[02:37:10]">&lt;stikonas&gt;</a></span><span class="message">anyway, going to bed, so will test more tomorrow</span></div><div class="line" id="023820"><span class="nick" style="color:#8dd3c7"><a href="#023820" label="[02:38:20]">&lt;oriansj&gt;</a></span><span class="message">sweet dreams stikonas and great work as always ^_^</span></div><div class="line" id="051931"><span class="nick">***</span><span class="message notice">jackhill_ is now known as jackhill</span></div><div class="line" id="061717"><span class="nick">***</span><span class="message notice">terpri is now known as robin</span></div><div class="line" id="064352"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o janneke</span></div><div class="line" id="071502"><span class="nick" style="color:#234e69"><a href="#071502" label="[07:15:02]">&lt;siraben&gt;</a></span><span class="message">I was sharing live-bootstrap to a CS friend and they brought up this question:</span></div><div class="line" id="071517"><span class="nick" style="color:#234e69"><a href="#071517" label="[07:15:17]">&lt;siraben&gt;</a></span><span class="message">&quot;but how do you trust the machine that runs the hex0 binary in the first place?&quot;</span></div><div class="line" id="072053"><span class="nick" style="color:#6c3d55"><a href="#072053" label="[07:20:53]">&lt;pabs3&gt;</a></span><span class="message">run it on multiple of them and check the results against each other?</span></div><div class="line" id="112453"><span class="nick" style="color:#d9d9d9"><a href="#112453" label="[11:24:53]">&lt;Melg8[m]&gt;</a></span><span class="message">siraben: i think oriansj have a plan for implementing it's own hardware running knight (that's one of arch targets in his repos), and now it runs on emulator</span></div><div class="line" id="115815"><span class="nick" style="color:#2e2a4a"><a href="#115815" label="[11:58:15]">&lt;stikonas&gt;</a></span><span class="message">in general bootstrapping will not help if your hardware is already malicious</span></div><div class="line" id="115833"><span class="nick" style="color:#2e2a4a"><a href="#115833" label="[11:58:33]">&lt;stikonas&gt;</a></span><span class="message">the only solution is to switch to non-malicious hardware</span></div><div class="line" id="124000"><span class="nick" style="color:#234e69"><a href="#124000" label="[12:40:00]">&lt;siraben&gt;</a></span><span class="message">Oh I see</span></div><div class="line" id="124006"><span class="nick" style="color:#234e69"><a href="#124006" label="[12:40:06]">&lt;siraben&gt;</a></span><span class="message">Thanks all</span></div><div class="line" id="131531"><span class="nick" style="color:#bc80bd"><a href="#131531" label="[13:15:31]">&lt;fossy&gt;</a></span><span class="message">yeah exactly what stikonas said</span></div><div class="line" id="131539"><span class="nick" style="color:#bc80bd"><a href="#131539" label="[13:15:39]">&lt;fossy&gt;</a></span><span class="message">hardware bootstrap is a completely unsolved problem :|</span></div><div class="line" id="131547"><span class="nick" style="color:#bc80bd"><a href="#131547" label="[13:15:47]">&lt;fossy&gt;</a></span><span class="message">i've been thinking about that problem</span></div><div class="line" id="131551"><span class="nick" style="color:#bc80bd"><a href="#131551" label="[13:15:51]">&lt;fossy&gt;</a></span><span class="message">i think riscv is the solution</span></div><div class="line" id="131617"><span class="nick" style="color:#2e2a4a"><a href="#131617" label="[13:16:17]">&lt;stikonas&gt;</a></span><span class="message">well, but reallistically you can only build simple riscv board</span></div><div class="line" id="131623"><span class="nick" style="color:#2e2a4a"><a href="#131623" label="[13:16:23]">&lt;stikonas&gt;</a></span><span class="message">(at home)</span></div><div class="line" id="131628"><span class="nick" style="color:#bc80bd"><a href="#131628" label="[13:16:28]">&lt;fossy&gt;</a></span><span class="message">cause you can start with something like ttl but then you need something that can viably run linux and cross-compile to other architectures while being provably verifiable</span></div><div class="line" id="131629"><span class="nick" style="color:#2e2a4a"><a href="#131629" label="[13:16:29]">&lt;stikonas&gt;</a></span><span class="message">probably not enough to run GCC</span></div><div class="line" id="131635"><span class="nick" style="color:#bc80bd"><a href="#131635" label="[13:16:35]">&lt;fossy&gt;</a></span><span class="message">yeah that's a problem</span></div><div class="line" id="131649"><span class="nick" style="color:#2e2a4a"><a href="#131649" label="[13:16:49]">&lt;stikonas&gt;</a></span><span class="message">even if you build good binary on your home-built riscv</span></div><div class="line" id="131651"><span class="nick" style="color:#bc80bd"><a href="#131651" label="[13:16:51]">&lt;fossy&gt;</a></span><span class="message">i think we can treat open hardware similarily to open software auditing though</span></div><div class="line" id="131706"><span class="nick" style="color:#2e2a4a"><a href="#131706" label="[13:17:06]">&lt;stikonas&gt;</a></span><span class="message">there is no guarantee that good binary would work correctly on other malicious hardware</span></div><div class="line" id="131715"><span class="nick" style="color:#bc80bd"><a href="#131715" label="[13:17:15]">&lt;fossy&gt;</a></span><span class="message">sure</span></div><div class="line" id="131722"><span class="nick" style="color:#bc80bd"><a href="#131722" label="[13:17:22]">&lt;fossy&gt;</a></span><span class="message">i don't think it should</span></div><div class="line" id="132141"><span class="nick" style="color:#3c5b35"><a href="#132141" label="[13:21:41]">&lt;ekaitz&gt;</a></span><span class="message">fpgas could help to solve this</span></div><div class="line" id="132213"><span class="nick" style="color:#bc80bd"><a href="#132213" label="[13:22:13]">&lt;fossy&gt;</a></span><span class="message">to an extent</span></div><div class="line" id="132222"><span class="nick" style="color:#bc80bd"><a href="#132222" label="[13:22:22]">&lt;fossy&gt;</a></span><span class="message">fpags are hard to verify but yea</span></div><div class="line" id="132245"><span class="nick" style="color:#3c5b35"><a href="#132245" label="[13:22:45]">&lt;ekaitz&gt;</a></span><span class="message">yes, the bitstream generation is... proprietary</span></div><div class="line" id="132256"><span class="nick" style="color:#3c5b35"><a href="#132256" label="[13:22:56]">&lt;ekaitz&gt;</a></span><span class="message">and we don't have any way to know what do we have inside of the FPGA</span></div><div class="line" id="133426"><span class="nick" style="color:#8dd3c7"><a href="#133426" label="[13:34:26]">&lt;oriansj&gt;</a></span><span class="message">siraben: doing DDC on hardware comes with a great many restrictions, the first of which being that a single unmodified run does not imply that the machine isn't compromised. So even though we have the ability to cross check all architecture bootstraps against each other (which will spot any malicious changes that occur); we would not be able to know for certain that there are not malicious circuits waiting to be triggered. (eg twiddle</span></div><div class="line" id="133426"><span class="nick" style="color:#8dd3c7"><a href="#133426" label="[13:34:26]">&lt;oriansj&gt;</a></span><span class="message">this register between these 8 values a few thousand times to unlock bad thing)</span></div><div class="line" id="133547"><span class="nick" style="color:#8dd3c7"><a href="#133547" label="[13:35:47]">&lt;oriansj&gt;</a></span><span class="message">So in my view only things like LibreSilicon and local foundries would enable one to obtain trusted hardware.</span></div><div class="line" id="133809"><span class="nick" style="color:#8dd3c7"><a href="#133809" label="[13:38:09]">&lt;oriansj&gt;</a></span><span class="message">Building out a computer out of individual logic gates would enable one to use untrusted foundries to build a computer capable of checking for the always on compromise behaviors but depending on how slow it is, it might not be able to detect the infrequent compromise behaviors.</span></div><div class="line" id="182517"><span class="nick" style="color:#af8d2f"><a href="#182517" label="[18:25:17]">&lt;xentrac&gt;</a></span><span class="message">oriansj: if you built a computer out of discrete logic, like the 500kHz Pineapple One, you could hypothetically imagine that someone had replaced one or more of your discrete-logic chips with a rebadged Padauk microcontroller or something</span></div><div class="line" id="182635"><span class="nick" style="color:#af8d2f"><a href="#182635" label="[18:26:35]">&lt;xentrac&gt;</a></span><span class="message">which could be programmed to act like a logic gate most of the time, but then do something like the twiddle-this-register trick to provide a backdoor or exfiltrate data</span></div><div class="line" id="185420"><span class="nick" style="color:#8dd3c7"><a href="#185420" label="[18:54:20]">&lt;oriansj&gt;</a></span><span class="message">ekaitz: The answer for FPGA programming is iCEstorm <a rel="nofollow" href="http://www.clifford.at/icestorm/">http://www.clifford.at/icestorm/</a>  (took me a minute to remember it)</span></div><div class="line" id="185452"><span class="nick" style="color:#3c5b35"><a href="#185452" label="[18:54:52]">&lt;ekaitz&gt;</a></span><span class="message">yeah I know it but still, the FPGA implementation is obscure</span></div><div class="line" id="185504"><span class="nick" style="color:#8dd3c7"><a href="#185504" label="[18:55:04]">&lt;oriansj&gt;</a></span><span class="message">xentrac: excellent point but I'm not sure how exactly that could work in isolated NAND, NOR, AND, OR, XOR gates</span></div><div class="line" id="185541"><span class="nick" style="color:#8dd3c7"><a href="#185541" label="[18:55:41]">&lt;oriansj&gt;</a></span><span class="message">ekaitz: we can only solve the problems we can put our hands around.</span></div><div class="line" id="185557"><span class="nick" style="color:#3c5b35"><a href="#185557" label="[18:55:57]">&lt;ekaitz&gt;</a></span><span class="message">that's the thing</span></div><div class="line" id="185603"><span class="nick" style="color:#8dd3c7"><a href="#185603" label="[18:56:03]">&lt;oriansj&gt;</a></span><span class="message">So it is best to look for something that needs to be solved and fun to do and attack that.</span></div><div class="line" id="185606"><span class="nick" style="color:#3c5b35"><a href="#185606" label="[18:56:06]">&lt;ekaitz&gt;</a></span><span class="message">that's why as you mentioned libresilicon is important!</span></div><div class="line" id="185627"><span class="nick" style="color:#8dd3c7"><a href="#185627" label="[18:56:27]">&lt;oriansj&gt;</a></span><span class="message">and so are designs for libresilicon</span></div><div class="line" id="185635"><span class="nick" style="color:#3c5b35"><a href="#185635" label="[18:56:35]">&lt;ekaitz&gt;</a></span><span class="message">but yeah atm FPGAs through Icestorm are good enough</span></div><div class="line" id="185646"><span class="nick" style="color:#2e2a4a"><a href="#185646" label="[18:56:46]">&lt;stikonas&gt;</a></span><span class="message">still you have to trust your manufacturer, even if silicon is libre</span></div><div class="line" id="185650"><span class="nick" style="color:#8dd3c7"><a href="#185650" label="[18:56:50]">&lt;oriansj&gt;</a></span><span class="message">ekaitz: indeed, some progress is always welcome</span></div><div class="line" id="185702"><span class="nick" style="color:#2e2a4a"><a href="#185702" label="[18:57:02]">&lt;stikonas&gt;</a></span><span class="message">you can only build so much yourself...</span></div><div class="line" id="185742"><span class="nick" style="color:#8dd3c7"><a href="#185742" label="[18:57:42]">&lt;oriansj&gt;</a></span><span class="message">stikonas: I don't plan on growing trees for lumber to produce charcoal anytime soon unless some serious shit goes down ^_^</span></div><div class="line" id="185748"><span class="nick" style="color:#2e2a4a"><a href="#185748" label="[18:57:48]">&lt;stikonas&gt;</a></span><span class="message">yet pulling off trusting trust attach in hardware would be even harder than in software</span></div><div class="line" id="185801"><span class="nick" style="color:#2e2a4a"><a href="#185801" label="[18:58:01]">&lt;stikonas&gt;</a></span><span class="message">and even in software there is no evidence of them</span></div><div class="line" id="191409"><span class="nick" style="color:#2e2a4a"><a href="#191409" label="[19:14:09]">&lt;stikonas&gt;</a></span><span class="message">fossy, oriansj: live-bootstrap with stage0-posix 1.3 <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/125">https://github.com/fosslinux/live-bootstrap/pull/125</a> </span></div><div class="line" id="191430"><span class="nick" style="color:#2e2a4a"><a href="#191430" label="[19:14:30]">&lt;stikonas&gt;</a></span><span class="message">(there is more that can be done, but probably best to leave it to later PRs)</span></div><div class="line" id="191439"><span class="nick" style="color:#2e2a4a"><a href="#191439" label="[19:14:39]">&lt;stikonas&gt;</a></span><span class="message">e.g. it still uses same old mes</span></div><div class="line" id="191514"><span class="nick" style="color:#2e2a4a"><a href="#191514" label="[19:15:14]">&lt;stikonas&gt;</a></span><span class="message">and ungz.c is not used yet</span></div><div class="line" id="191827"><span class="nick" style="color:#af8d2f"><a href="#191827" label="[19:18:27]">&lt;xentrac&gt;</a></span><span class="message">oriansj: if you have LibreSilicon and local foundries you can verify what what you think is an isolated NAND gate is really a NAND gate and not just a microcontroller programmed as an in-circuit emulator of a NAND gate :)</span></div><div class="line" id="191917"><span class="nick" style="color:#2e2a4a"><a href="#191917" label="[19:19:17]">&lt;stikonas&gt;</a></span><span class="message">how does local founry help with that?</span></div><div class="line" id="191934"><span class="nick" style="color:#2e2a4a"><a href="#191934" label="[19:19:34]">&lt;stikonas&gt;</a></span><span class="message">what would help are probably independent audits... That's what other fields do</span></div><div class="line" id="192010"><span class="nick" style="color:#2e2a4a"><a href="#192010" label="[19:20:10]">&lt;stikonas&gt;</a></span><span class="message">well, maybe it's easier to audit small local foundry</span></div><div class="line" id="192026"><span class="nick" style="color:#af8d2f"><a href="#192026" label="[19:20:26]">&lt;xentrac&gt;</a></span><span class="message">that was what I was thinking yeah</span></div><div class="line" id="192500"><span class="nick" style="color:#389600"><a href="#192500" label="[19:25:00]">&lt;siraben[m]&gt;</a></span><span class="message">testing</span></div><div class="line" id="192549"><span class="nick" style="color:#389600"><a href="#192549" label="[19:25:49]">&lt;siraben[m]&gt;</a></span><span class="message">matrix bridge had issues, last message I saw was &quot;&lt;xentrac&gt; which could be programmed to act like a logic gate most of the time, but then do something like the twiddle-this-register trick to provide a backdoor or exfiltrate data&quot;</span></div><div class="line" id="192556"><span class="nick" style="color:#389600"><a href="#192556" label="[19:25:56]">&lt;siraben[m]&gt;</a></span><span class="message">fortunately we have public logs</span></div><div class="line" id="193550"><span class="nick" style="color:#af8d2f"><a href="#193550" label="[19:35:50]">&lt;xentrac&gt;</a></span><span class="message">it's probably worth mentioning bunnie's arguments in favor of FPGA CPUs</span></div><div class="line" id="193554"><span class="nick" style="color:#af8d2f"><a href="#193554" label="[19:35:54]">&lt;xentrac&gt;</a></span><span class="message">consider them mentioned</span></div><div class="line" id="193658"><span class="nick" style="color:#af8d2f"><a href="#193658" label="[19:36:58]">&lt;xentrac&gt;</a></span><span class="message">the Pineapple One is RISC-V btw.  I think at 500kHz it's probably not a viable way to run GCC</span></div><div class="line" id="203912"><span class="nick" style="color:#234e69"><a href="#203912" label="[20:39:12]">&lt;siraben&gt;</a></span><span class="message">testing</span></div><div class="line" id="203938"><span class="nick" style="color:#234e69"><a href="#203938" label="[20:39:38]">&lt;siraben&gt;</a></span><span class="message">ok, the bridge is up</span></div><div class="line" id="215343"><span class="nick">***</span><span class="message notice">ericonr- is now known as ericonr</span></div><br /></div></body></html>