<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-10-15.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000328"><span class="nick" style="color:#389600"><a href="#000328" label="[00:03:28]">&lt;oriansj&gt;</a></span><span class="message">stikonas: minor correction M2libc is under the GPLv3 just like mes-m2 is</span></div><div class="line" id="000337"><span class="nick" style="color:#8dd3c7"><a href="#000337" label="[00:03:37]">&lt;stikonas&gt;</a></span><span class="message">oh ok, then no problem with license</span></div><div class="line" id="000408"><span class="nick" style="color:#389600"><a href="#000408" label="[00:04:08]">&lt;oriansj&gt;</a></span><span class="message">as per a previous discussion with janneke, it was thought that bootstrap support is too valuable to use a weaker license.</span></div><div class="line" id="000522"><span class="nick" style="color:#8dd3c7"><a href="#000522" label="[00:05:22]">&lt;stikonas&gt;</a></span><span class="message">yeah ok, although bootstrap support is usable even for proprietary compilers as they can bootstrap gcc/glibc and then build on top of that</span></div><div class="line" id="000540"><span class="nick" style="color:#8dd3c7"><a href="#000540" label="[00:05:40]">&lt;stikonas&gt;</a></span><span class="message">it's only those early binaries</span></div><div class="line" id="000552"><span class="nick" style="color:#389600"><a href="#000552" label="[00:05:52]">&lt;oriansj&gt;</a></span><span class="message">I was more for lgplv3 to solve the GPLv3/CDDL license issue for live-bootstrap but given it was possible to bootstrap musl early, that benefit seemed mutted.</span></div><div class="line" id="000553"><span class="nick" style="color:#8dd3c7"><a href="#000553" label="[00:05:53]">&lt;stikonas&gt;</a></span><span class="message">that have to be GPLv3</span></div><div class="line" id="000612"><span class="nick" style="color:#8dd3c7"><a href="#000612" label="[00:06:12]">&lt;stikonas&gt;</a></span><span class="message">that issue can be solved or workarounded later...</span></div><div class="line" id="000626"><span class="nick" style="color:#389600"><a href="#000626" label="[00:06:26]">&lt;oriansj&gt;</a></span><span class="message">indeed</span></div><div class="line" id="000630"><span class="nick" style="color:#8dd3c7"><a href="#000630" label="[00:06:30]">&lt;stikonas&gt;</a></span><span class="message">either somebody finishes gash port to mes</span></div><div class="line" id="000642"><span class="nick" style="color:#8dd3c7"><a href="#000642" label="[00:06:42]">&lt;stikonas&gt;</a></span><span class="message">and then it's basically automatically solved</span></div><div class="line" id="000702"><span class="nick" style="color:#8dd3c7"><a href="#000702" label="[00:07:02]">&lt;stikonas&gt;</a></span><span class="message">or we need to recreate musl's configure file without running configure.sh script</span></div><div class="line" id="000721"><span class="nick" style="color:#8dd3c7"><a href="#000721" label="[00:07:21]">&lt;stikonas&gt;</a></span><span class="message">it's a fairly simple script but still far beyond kaem's capability</span></div><div class="line" id="000750"><span class="nick" style="color:#8dd3c7"><a href="#000750" label="[00:07:50]">&lt;stikonas&gt;</a></span><span class="message">anyway, having same license as mes libc has a lot of benefit of code sharing</span></div><div class="line" id="000755"><span class="nick" style="color:#389600"><a href="#000755" label="[00:07:55]">&lt;oriansj&gt;</a></span><span class="message">or write a replacement in the mes.c scheme subset</span></div><div class="line" id="000816"><span class="nick" style="color:#8dd3c7"><a href="#000816" label="[00:08:16]">&lt;stikonas&gt;</a></span><span class="message">gash port hasn't seen updates since june... <a rel="nofollow" href="https://git.savannah.nongnu.org/cgit/gash.git/log/?h=wip-mes">https://git.savannah.nongnu.org/cgit/gash.git/log/?h=wip-mes</a> </span></div><div class="line" id="000918"><span class="nick" style="color:#8dd3c7"><a href="#000918" label="[00:09:18]">&lt;stikonas&gt;</a></span><span class="message">well, given that we have a fixed environment, replacement can be easily written in almost anything...</span></div><div class="line" id="121200"><span class="nick">***</span><span class="message notice">Hagfish_ is now known as Hagfish</span></div><div class="line" id="142355"><span class="nick" style="color:#6b8072"><a href="#142355" label="[14:23:55]">&lt;gbrlwck&gt;</a></span><span class="message">do i understand correctly that hex0 has an inverted syntax?</span></div><div class="line" id="144640"><span class="nick" style="color:#8dd3c7"><a href="#144640" label="[14:46:40]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: what do you mean by inverted?</span></div><div class="line" id="144701"><span class="nick" style="color:#8dd3c7"><a href="#144701" label="[14:47:01]">&lt;stikonas&gt;</a></span><span class="message">I guess what you mean is low endian</span></div><div class="line" id="144712"><span class="nick" style="color:#8dd3c7"><a href="#144712" label="[14:47:12]">&lt;stikonas&gt;</a></span><span class="message">it shows bytes in the opposite way from hexdump</span></div><div class="line" id="144719"><span class="nick" style="color:#6b8072"><a href="#144719" label="[14:47:19]">&lt;gbrlwck&gt;</a></span><span class="message">RD_A2 RS1_SP !16 LD would translate to `ld 16, sp, a2`</span></div><div class="line" id="144722"><span class="nick" style="color:#8dd3c7"><a href="#144722" label="[14:47:22]">&lt;stikonas&gt;</a></span><span class="message">although, in the same way as diffoscope</span></div><div class="line" id="144726"><span class="nick" style="color:#8dd3c7"><a href="#144726" label="[14:47:26]">&lt;stikonas&gt;</a></span><span class="message">oh you mean M1</span></div><div class="line" id="144732"><span class="nick" style="color:#8dd3c7"><a href="#144732" label="[14:47:32]">&lt;stikonas&gt;</a></span><span class="message">it's not exactly inverted</span></div><div class="line" id="144758"><span class="nick" style="color:#8dd3c7"><a href="#144758" label="[14:47:58]">&lt;stikonas&gt;</a></span><span class="message">it's what we invented to deal with &quot;fixed word&quot; architectures (as risc-v)</span></div><div class="line" id="144810"><span class="nick" style="color:#8dd3c7"><a href="#144810" label="[14:48:10]">&lt;stikonas&gt;</a></span><span class="message">rather than each macro representing some bytes</span></div><div class="line" id="144820"><span class="nick" style="color:#6b8072"><a href="#144820" label="[14:48:20]">&lt;gbrlwck&gt;</a></span><span class="message">ah, and i originally meant hex2 :)</span></div><div class="line" id="144840"><span class="nick" style="color:#8dd3c7"><a href="#144840" label="[14:48:40]">&lt;stikonas&gt;</a></span><span class="message">we decided to add (OR) a few macros into combined macro</span></div><div class="line" id="144847"><span class="nick" style="color:#6b8072"><a href="#144847" label="[14:48:47]">&lt;gbrlwck&gt;</a></span><span class="message">ahhh</span></div><div class="line" id="144849"><span class="nick" style="color:#8dd3c7"><a href="#144849" label="[14:48:49]">&lt;stikonas&gt;</a></span><span class="message">so that is done by . character</span></div><div class="line" id="144904"><span class="nick" style="color:#8dd3c7"><a href="#144904" label="[14:49:04]">&lt;stikonas&gt;</a></span><span class="message">and for implementation reasons (so that you won't need to backtrack)</span></div><div class="line" id="144950"><span class="nick" style="color:#6b8072"><a href="#144950" label="[14:49:50]">&lt;gbrlwck&gt;</a></span><span class="message">so the . in front of a number means: please OR me to the other values with a . in front?</span></div><div class="line" id="144956"><span class="nick" style="color:#8dd3c7"><a href="#144956" label="[14:49:56]">&lt;stikonas&gt;</a></span><span class="message">it adds 8 hex characters prefixed with . to the next (and not previous) hex string</span></div><div class="line" id="145013"><span class="nick" style="color:#8dd3c7"><a href="#145013" label="[14:50:13]">&lt;stikonas&gt;</a></span><span class="message">yes, but crucially it adds them to the next undotted string</span></div><div class="line" id="145023"><span class="nick" style="color:#8dd3c7"><a href="#145023" label="[14:50:23]">&lt;stikonas&gt;</a></span><span class="message">it's much easier to implement that in hex2</span></div><div class="line" id="145026"><span class="nick" style="color:#6b8072"><a href="#145026" label="[14:50:26]">&lt;gbrlwck&gt;</a></span><span class="message">.00A0 .0B00 C000 =&gt; CBA0 ?</span></div><div class="line" id="145031"><span class="nick" style="color:#8dd3c7"><a href="#145031" label="[14:50:31]">&lt;stikonas&gt;</a></span><span class="message">exactly</span></div><div class="line" id="145041"><span class="nick" style="color:#6b8072"><a href="#145041" label="[14:50:41]">&lt;gbrlwck&gt;</a></span><span class="message">nice, thanks for the clarification!</span></div><div class="line" id="145046"><span class="nick" style="color:#8dd3c7"><a href="#145046" label="[14:50:46]">&lt;stikonas&gt;</a></span><span class="message">and now the only common thing for all commands</span></div><div class="line" id="145055"><span class="nick" style="color:#8dd3c7"><a href="#145055" label="[14:50:55]">&lt;stikonas&gt;</a></span><span class="message">for all instructions is the presense of opcode</span></div><div class="line" id="145100"><span class="nick" style="color:#8dd3c7"><a href="#145100" label="[14:51:00]">&lt;stikonas&gt;</a></span><span class="message">e.g. LD or ECALL or ADDI</span></div><div class="line" id="145104"><span class="nick" style="color:#8dd3c7"><a href="#145104" label="[14:51:04]">&lt;stikonas&gt;</a></span><span class="message">hence it has to be the last one</span></div><div class="line" id="145115"><span class="nick" style="color:#8dd3c7"><a href="#145115" label="[14:51:15]">&lt;stikonas&gt;</a></span><span class="message">the order of everything else does not matter</span></div><div class="line" id="145117"><span class="nick" style="color:#6b8072"><a href="#145117" label="[14:51:17]">&lt;gbrlwck&gt;</a></span><span class="message">yes, now this makes sense :)</span></div><div class="line" id="145123"><span class="nick" style="color:#8dd3c7"><a href="#145123" label="[14:51:23]">&lt;stikonas&gt;</a></span><span class="message">we could have instead done something like</span></div><div class="line" id="145138"><span class="nick" style="color:#8dd3c7"><a href="#145138" label="[14:51:38]">&lt;stikonas&gt;</a></span><span class="message">LD !16 RD_A2 RS1_SP NULL</span></div><div class="line" id="145145"><span class="nick" style="color:#8dd3c7"><a href="#145145" label="[14:51:45]">&lt;stikonas&gt;</a></span><span class="message">where NULL is defined to be 00 00 00 00</span></div><div class="line" id="145149"><span class="nick" style="color:#8dd3c7"><a href="#145149" label="[14:51:49]">&lt;stikonas&gt;</a></span><span class="message">(without the dot)</span></div><div class="line" id="145211"><span class="nick" style="color:#8dd3c7"><a href="#145211" label="[14:52:11]">&lt;stikonas&gt;</a></span><span class="message">but then you have to end all instructions with NULL which is a bit wasteful</span></div><div class="line" id="145239"><span class="nick" style="color:#8dd3c7"><a href="#145239" label="[14:52:39]">&lt;stikonas&gt;</a></span><span class="message">so this syntax is only used for risc-v</span></div><div class="line" id="145240"><span class="nick" style="color:#6b8072"><a href="#145240" label="[14:52:40]">&lt;gbrlwck&gt;</a></span><span class="message">so RD_S4 MV (.000A0000 13000000) has the zero implied (because nothing gets OR'd to the first value)?</span></div><div class="line" id="145251"><span class="nick" style="color:#8dd3c7"><a href="#145251" label="[14:52:51]">&lt;stikonas&gt;</a></span><span class="message">yes</span></div><div class="line" id="145254"><span class="nick" style="color:#6b8072"><a href="#145254" label="[14:52:54]">&lt;gbrlwck&gt;</a></span><span class="message">cool</span></div><div class="line" id="145303"><span class="nick" style="color:#8dd3c7"><a href="#145303" label="[14:53:03]">&lt;stikonas&gt;</a></span><span class="message">you can skip zero tokens</span></div><div class="line" id="145316"><span class="nick" style="color:#8dd3c7"><a href="#145316" label="[14:53:16]">&lt;stikonas&gt;</a></span><span class="message">but on the other hand the position matters</span></div><div class="line" id="145332"><span class="nick" style="color:#8dd3c7"><a href="#145332" label="[14:53:32]">&lt;stikonas&gt;</a></span><span class="message">so you have to specify whether it's destination register or one of the source registers</span></div><div class="line" id="145347"><span class="nick" style="color:#8dd3c7"><a href="#145347" label="[14:53:47]">&lt;stikonas&gt;</a></span><span class="message">(and some commands, e.g. BEQ take only 2 source registers and not destination)</span></div><div class="line" id="145410"><span class="nick" style="color:#8dd3c7"><a href="#145410" label="[14:54:10]">&lt;stikonas&gt;</a></span><span class="message">but it's visible in risc-v spec document</span></div><div class="line" id="145451"><span class="nick" style="color:#8dd3c7"><a href="#145451" label="[14:54:51]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://riscv.org/wp-content/uploads/2019/12/riscv-spec-20191213.pdf">https://riscv.org/wp-content/uploads/2019/12/riscv-spec-20191213.pdf</a> </span></div><div class="line" id="145522"><span class="nick" style="color:#8dd3c7"><a href="#145522" label="[14:55:22]">&lt;stikonas&gt;</a></span><span class="message">(page 130)</span></div><div class="line" id="150016"><span class="nick" style="color:#8dd3c7"><a href="#150016" label="[15:00:16]">&lt;stikonas&gt;</a></span><span class="message">this dotted syntax is slightly harder to implement in early stages but has the advantage that M1 code looks really similar to GAS syntax</span></div><div class="line" id="150124"><span class="nick" style="color:#8dd3c7"><a href="#150124" label="[15:01:24]">&lt;stikonas&gt;</a></span><span class="message">if you look at e.g. AMD64 they use more complicated defines, e.g. DEFINE LOAD64_into_RBX_from_Address_RBX_Immediate8 488B5B</span></div><div class="line" id="150228"><span class="nick" style="color:#6b8072"><a href="#150228" label="[15:02:28]">&lt;gbrlwck&gt;</a></span><span class="message">so the RISC-V way to do the bootstrapping is also kinda more beautiful?</span></div><div class="line" id="150235"><span class="nick" style="color:#6b8072"><a href="#150235" label="[15:02:35]">&lt;gbrlwck&gt;</a></span><span class="message">(M0 works now btw)</span></div><div class="line" id="150842"><span class="nick" style="color:#6b8072"><a href="#150842" label="[15:08:42]">&lt;gbrlwck&gt;</a></span><span class="message">stikonas: what would be the easiest approach to debug the creation of cc_riscv64?</span></div><div class="line" id="150901"><span class="nick" style="color:#6b8072"><a href="#150901" label="[15:09:01]">&lt;gbrlwck&gt;</a></span><span class="message">kaem-0 now fails at `./riscv64/artifact/cc_riscv64 ./riscv64/artifact/M2-0.c ./riscv64/artifact/M2-0.M1`</span></div><div class="line" id="150910"><span class="nick" style="color:#8dd3c7"><a href="#150910" label="[15:09:10]">&lt;stikonas&gt;</a></span><span class="message">well, it's not more beautiful, just different, earlier stages (hex1 in particular) are harder to write</span></div><div class="line" id="150921"><span class="nick" style="color:#8dd3c7"><a href="#150921" label="[15:09:21]">&lt;stikonas&gt;</a></span><span class="message">hmm, let me see if I can spot anything</span></div><div class="line" id="150936"><span class="nick" style="color:#8dd3c7"><a href="#150936" label="[15:09:36]">&lt;stikonas&gt;</a></span><span class="message">at least it should be the last stage where things could go wrong</span></div><div class="line" id="151018"><span class="nick" style="color:#8dd3c7"><a href="#151018" label="[15:10:18]">&lt;stikonas&gt;</a></span><span class="message">btw for cc_riscv64 we just have cc_riscv64.M1 file, no more prototypes</span></div><div class="line" id="151110"><span class="nick" style="color:#8dd3c7"><a href="#151110" label="[15:11:10]">&lt;stikonas&gt;</a></span><span class="message">I'll just go over those global registers (s*) and see if any of them are used uninitialized</span></div><div class="line" id="151521"><span class="nick" style="color:#8dd3c7"><a href="#151521" label="[15:15:21]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: I think s7 might be uninitialized</span></div><div class="line" id="151538"><span class="nick" style="color:#6b8072"><a href="#151538" label="[15:15:38]">&lt;gbrlwck&gt;</a></span><span class="message">you're right!</span></div><div class="line" id="151603"><span class="nick" style="color:#8dd3c7"><a href="#151603" label="[15:16:03]">&lt;stikonas&gt;</a></span><span class="message">can you check if that's enough</span></div><div class="line" id="151806"><span class="nick" style="color:#6b8072"><a href="#151806" label="[15:18:06]">&lt;gbrlwck&gt;</a></span><span class="message">it's not</span></div><div class="line" id="151814"><span class="nick" style="color:#6b8072"><a href="#151814" label="[15:18:14]">&lt;gbrlwck&gt;</a></span><span class="message">:)</span></div><div class="line" id="151914"><span class="nick" style="color:#6b8072"><a href="#151914" label="[15:19:14]">&lt;gbrlwck&gt;</a></span><span class="message">is RS1_S9 also not initialized?</span></div><div class="line" id="151935"><span class="nick" style="color:#6b8072"><a href="#151935" label="[15:19:35]">&lt;gbrlwck&gt;</a></span><span class="message">and RS1_S6</span></div><div class="line" id="151949"><span class="nick" style="color:#8dd3c7"><a href="#151949" label="[15:19:49]">&lt;stikonas&gt;</a></span><span class="message">I think s8 too</span></div><div class="line" id="152017"><span class="nick" style="color:#6b8072"><a href="#152017" label="[15:20:17]">&lt;gbrlwck&gt;</a></span><span class="message">and RS1_S4 (again)</span></div><div class="line" id="152019"><span class="nick" style="color:#8dd3c7"><a href="#152019" label="[15:20:19]">&lt;stikonas&gt;</a></span><span class="message">s6 is done on line 95</span></div><div class="line" id="152030"><span class="nick" style="color:#8dd3c7"><a href="#152030" label="[15:20:30]">&lt;stikonas&gt;</a></span><span class="message">s4 in 93</span></div><div class="line" id="152103"><span class="nick" style="color:#6b8072"><a href="#152103" label="[15:21:03]">&lt;gbrlwck&gt;</a></span><span class="message">true</span></div><div class="line" id="152204"><span class="nick" style="color:#8dd3c7"><a href="#152204" label="[15:22:04]">&lt;stikonas&gt;</a></span><span class="message">so s7, s8 and s9</span></div><div class="line" id="152310"><span class="nick" style="color:#6b8072"><a href="#152310" label="[15:23:10]">&lt;gbrlwck&gt;</a></span><span class="message">is MV the preferred way to initialize or should i LUI or does it not matter at all?</span></div><div class="line" id="152327"><span class="nick" style="color:#8dd3c7"><a href="#152327" label="[15:23:27]">&lt;stikonas&gt;</a></span><span class="message">MV is good enough for small constants</span></div><div class="line" id="152334"><span class="nick" style="color:#8dd3c7"><a href="#152334" label="[15:23:34]">&lt;stikonas&gt;</a></span><span class="message">LUI is needed for large ones</span></div><div class="line" id="152339"><span class="nick" style="color:#8dd3c7"><a href="#152339" label="[15:23:39]">&lt;stikonas&gt;</a></span><span class="message">I think more than 2048</span></div><div class="line" id="152352"><span class="nick" style="color:#8dd3c7"><a href="#152352" label="[15:23:52]">&lt;stikonas&gt;</a></span><span class="message">LUI is good enough until 31-bit</span></div><div class="line" id="152358"><span class="nick" style="color:#8dd3c7"><a href="#152358" label="[15:23:58]">&lt;stikonas&gt;</a></span><span class="message">32-bits require even more work</span></div><div class="line" id="152414"><span class="nick" style="color:#8dd3c7"><a href="#152414" label="[15:24:14]">&lt;stikonas&gt;</a></span><span class="message">cc_riscv64 does not implement 32-bit constants, only up to 31</span></div><div class="line" id="152450"><span class="nick" style="color:#6b8072"><a href="#152450" label="[15:24:50]">&lt;gbrlwck&gt;</a></span><span class="message">cc_riscv64 seems to work now (at least it doesn't crash anymore)</span></div><div class="line" id="152457"><span class="nick" style="color:#8dd3c7"><a href="#152457" label="[15:24:57]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: this is what M2-Planet emits for constants <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/blob/master/cc_core.c#L648">https://github.com/oriansj/M2-Planet/blob/master/cc_core.c#L648</a> </span></div><div class="line" id="152555"><span class="nick" style="color:#8dd3c7"><a href="#152555" label="[15:25:55]">&lt;stikonas&gt;</a></span><span class="message">so does the whole stage0-posix chain work now?</span></div><div class="line" id="152633"><span class="nick" style="color:#6b8072"><a href="#152633" label="[15:26:33]">&lt;gbrlwck&gt;</a></span><span class="message">we're still bootstrapping, but it looks good</span></div><div class="line" id="152647"><span class="nick" style="color:#6b8072"><a href="#152647" label="[15:26:47]">&lt;gbrlwck&gt;</a></span><span class="message">we're strapping those boots away :)</span></div><div class="line" id="152714"><span class="nick" style="color:#8dd3c7"><a href="#152714" label="[15:27:14]">&lt;stikonas&gt;</a></span><span class="message">should be much quicker on real HW as opposed to qemu</span></div><div class="line" id="152721"><span class="nick" style="color:#6b8072"><a href="#152721" label="[15:27:21]">&lt;gbrlwck&gt;</a></span><span class="message">well</span></div><div class="line" id="152723"><span class="nick" style="color:#8dd3c7"><a href="#152723" label="[15:27:23]">&lt;stikonas&gt;</a></span><span class="message">although, I did some optimizations for qemu</span></div><div class="line" id="152733"><span class="nick" style="color:#8dd3c7"><a href="#152733" label="[15:27:33]">&lt;stikonas&gt;</a></span><span class="message">so it went down from 15 min to 2 min</span></div><div class="line" id="152741"><span class="nick" style="color:#6b8072"><a href="#152741" label="[15:27:41]">&lt;gbrlwck&gt;</a></span><span class="message">i read some things that RISC-V emulation is actually really quick?</span></div><div class="line" id="152801"><span class="nick" style="color:#6b8072"><a href="#152801" label="[15:28:01]">&lt;gbrlwck&gt;</a></span><span class="message">i'm running a `guix pull` now on the side</span></div><div class="line" id="152804"><span class="nick" style="color:#8dd3c7"><a href="#152804" label="[15:28:04]">&lt;stikonas&gt;</a></span><span class="message">well, qemu doesn't like early binaries (before blood-elf processes them(</span></div><div class="line" id="152817"><span class="nick" style="color:#6b8072"><a href="#152817" label="[15:28:17]">&lt;gbrlwck&gt;</a></span><span class="message">and i just upgraded performance by mounting / from the nvme (and not sdcard)</span></div><div class="line" id="152827"><span class="nick" style="color:#8dd3c7"><a href="#152827" label="[15:28:27]">&lt;stikonas&gt;</a></span><span class="message">so it inserts extra mprotect and similar syscalls</span></div><div class="line" id="152837"><span class="nick" style="color:#6b8072"><a href="#152837" label="[15:28:37]">&lt;gbrlwck&gt;</a></span><span class="message">aha</span></div><div class="line" id="152841"><span class="nick" style="color:#8dd3c7"><a href="#152841" label="[15:28:41]">&lt;stikonas&gt;</a></span><span class="message">hex2 was particularly affected</span></div><div class="line" id="152857"><span class="nick" style="color:#8dd3c7"><a href="#152857" label="[15:28:57]">&lt;stikonas&gt;</a></span><span class="message">so I improved it a bit by moving io buffer to stack</span></div><div class="line" id="152919"><span class="nick" style="color:#8dd3c7"><a href="#152919" label="[15:29:19]">&lt;stikonas&gt;</a></span><span class="message">(from &quot;global variable&quot;, i.e. label after binary instructions)</span></div><div class="line" id="152940"><span class="nick" style="color:#8dd3c7"><a href="#152940" label="[15:29:40]">&lt;stikonas&gt;</a></span><span class="message">and oriansj later ported same fix to other arches</span></div><div class="line" id="153732"><span class="nick" style="color:#6b8072"><a href="#153732" label="[15:37:32]">&lt;gbrlwck&gt;</a></span><span class="message"> <a rel="nofollow" href="https://termbin.com/vbv5">https://termbin.com/vbv5</a> </span></div><div class="line" id="153733"><span class="nick" style="color:#6b8072"><a href="#153733" label="[15:37:33]">&lt;gbrlwck&gt;</a></span><span class="message">sharing because it's so nice ;)</span></div><div class="line" id="154007"><span class="nick" style="color:#6b8072"><a href="#154007" label="[15:40:07]">&lt;gbrlwck&gt;</a></span><span class="message">oriansj: <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/pull/59">https://github.com/oriansj/stage0-posix/pull/59</a> </span></div><div class="line" id="154345"><span class="nick" style="color:#8dd3c7"><a href="#154345" label="[15:43:45]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: can you also fix M0 prototypes?</span></div><div class="line" id="154350"><span class="nick" style="color:#8dd3c7"><a href="#154350" label="[15:43:50]">&lt;stikonas&gt;</a></span><span class="message">there is M0.S and M0.M1</span></div><div class="line" id="154415"><span class="nick" style="color:#8dd3c7"><a href="#154415" label="[15:44:15]">&lt;stikonas&gt;</a></span><span class="message">best to keep them in sync</span></div><div class="line" id="160210"><span class="nick" style="color:#80b1d3"><a href="#160210" label="[16:02:10]">&lt;xentrac&gt;</a></span><span class="message">gbrlwck: RISC-V is significantly easier to write an emulator for than any popular architecture, and it has a few features that improve the performance of naïve emulators</span></div><div class="line" id="170502"><span class="nick" style="color:#6b8072"><a href="#170502" label="[17:05:02]">&lt;gbrlwck&gt;</a></span><span class="message">stikonas: sure thing!</span></div><div class="line" id="170722"><span class="nick" style="color:#6b8072"><a href="#170722" label="[17:07:22]">&lt;gbrlwck&gt;</a></span><span class="message">should compiled M0_riscv.S be identical to artifact/M0 ?</span></div><div class="line" id="170853"><span class="nick" style="color:#8dd3c7"><a href="#170853" label="[17:08:53]">&lt;stikonas&gt;</a></span><span class="message">no, S file will be different</span></div><div class="line" id="170906"><span class="nick" style="color:#8dd3c7"><a href="#170906" label="[17:09:06]">&lt;stikonas&gt;</a></span><span class="message">M0_riscv64.M1 should compile to the same thing</span></div><div class="line" id="170947"><span class="nick" style="color:#8dd3c7"><a href="#170947" label="[17:09:47]">&lt;stikonas&gt;</a></span><span class="message">.S file has some extra ELF metadata (section tables, possibly even more debug info)</span></div><div class="line" id="171012"><span class="nick" style="color:#8dd3c7"><a href="#171012" label="[17:10:12]">&lt;stikonas&gt;</a></span><span class="message">although, the actual program are (.text in ELF jargon) would be identical</span></div><div class="line" id="171218"><span class="nick" style="color:#8dd3c7"><a href="#171218" label="[17:12:18]">&lt;stikonas&gt;</a></span><span class="message">and they should be producing identical output when running on .M1 input</span></div><div class="line" id="171717"><span class="nick" style="color:#6b8072"><a href="#171717" label="[17:17:17]">&lt;gbrlwck&gt;</a></span><span class="message">what's the difference between hex2-0 and hex2-1?</span></div><div class="line" id="172139"><span class="nick" style="color:#8dd3c7"><a href="#172139" label="[17:21:39]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: hex2-0 is written in hex1 code (so fairly close to machine language but with support for calculating jumps)</span></div><div class="line" id="172151"><span class="nick" style="color:#8dd3c7"><a href="#172151" label="[17:21:51]">&lt;stikonas&gt;</a></span><span class="message">hex2-1 is built from C sources</span></div><div class="line" id="172207"><span class="nick" style="color:#8dd3c7"><a href="#172207" label="[17:22:07]">&lt;stikonas&gt;</a></span><span class="message">(and supports features needed for any architecture, not just risc-v)</span></div><div class="line" id="172241"><span class="nick" style="color:#8dd3c7"><a href="#172241" label="[17:22:41]">&lt;stikonas&gt;</a></span><span class="message">it's hex2*.{c,h} files in <a rel="nofollow" href="https://github.com/oriansj/mescc-tools">https://github.com/oriansj/mescc-tools</a> </span></div><div class="line" id="172342"><span class="nick" style="color:#8dd3c7"><a href="#172342" label="[17:23:42]">&lt;stikonas&gt;</a></span><span class="message">C version also has better error reporting, etc...</span></div><div class="line" id="172412"><span class="nick" style="color:#6b8072"><a href="#172412" label="[17:24:12]">&lt;gbrlwck&gt;</a></span><span class="message">so, i can compile the new M0 with hex2-0 (but this gives a different hash to the version in artifacts), but comiling it with hex2-1 looks like this:</span></div><div class="line" id="172432"><span class="nick" style="color:#6b8072"><a href="#172432" label="[17:24:32]">&lt;gbrlwck&gt;</a></span><span class="message">root@ubuntu:~/stage0-posix# ./riscv64/artifact/hex2-1 --architecture riscv64 --little-endian --base-address 0x00600000 -f ./M2libc/riscv64/ELF-riscv64-debug.hex2 -f M0.hex2 -o M0</span></div><div class="line" id="172433"><span class="nick" style="color:#6b8072"><a href="#172433" label="[17:24:33]">&lt;gbrlwck&gt;</a></span><span class="message">Target label ELF_section_headers is not valid</span></div><div class="line" id="172507"><span class="nick" style="color:#8dd3c7"><a href="#172507" label="[17:25:07]">&lt;stikonas&gt;</a></span><span class="message">that's because you used debug ELF header</span></div><div class="line" id="172519"><span class="nick" style="color:#8dd3c7"><a href="#172519" label="[17:25:19]">&lt;stikonas&gt;</a></span><span class="message">that one would need M1 file processed with blood-elf and appended</span></div><div class="line" id="172607"><span class="nick" style="color:#8dd3c7"><a href="#172607" label="[17:26:07]">&lt;stikonas&gt;</a></span><span class="message">ELF_section_header is a pointer to where debug info is stored</span></div><div class="line" id="172646"><span class="nick" style="color:#6b8072"><a href="#172646" label="[17:26:46]">&lt;gbrlwck&gt;</a></span><span class="message">i see</span></div><div class="line" id="173133"><span class="nick" style="color:#8dd3c7"><a href="#173133" label="[17:31:33]">&lt;stikonas&gt;</a></span><span class="message">and riscv32 would need even different headers if somebody does that port</span></div><div class="line" id="173143"><span class="nick" style="color:#8dd3c7"><a href="#173143" label="[17:31:43]">&lt;stikonas&gt;</a></span><span class="message">even though almost all instructions are identical to riscv64</span></div><div class="line" id="173547"><span class="nick" style="color:#8dd3c7"><a href="#173547" label="[17:35:47]">&lt;stikonas&gt;</a></span><span class="message">and of course we still haven't built mes for riscv64...</span></div><div class="line" id="173605"><span class="nick" style="color:#8dd3c7"><a href="#173605" label="[17:36:05]">&lt;stikonas&gt;</a></span><span class="message">so there are a lot of things to look at...</span></div><div class="line" id="173649"><span class="nick" style="color:#6b8072"><a href="#173649" label="[17:36:49]">&lt;gbrlwck&gt;</a></span><span class="message">so: M0 built iwth hex2-1 produces the same output as in artifact</span></div><div class="line" id="173700"><span class="nick" style="color:#6b8072"><a href="#173700" label="[17:37:00]">&lt;gbrlwck&gt;</a></span><span class="message">they differ though from M0 built with hex2-0</span></div><div class="line" id="173755"><span class="nick" style="color:#6b8072"><a href="#173755" label="[17:37:55]">&lt;gbrlwck&gt;</a></span><span class="message">(i compiled M0_riscv64.M1)</span></div><div class="line" id="173756"><span class="nick" style="color:#8dd3c7"><a href="#173756" label="[17:37:56]">&lt;stikonas&gt;</a></span><span class="message">hmm, not sure why...</span></div><div class="line" id="173802"><span class="nick" style="color:#8dd3c7"><a href="#173802" label="[17:38:02]">&lt;stikonas&gt;</a></span><span class="message">diffoscope might tell...</span></div><div class="line" id="173805"><span class="nick" style="color:#6b8072"><a href="#173805" label="[17:38:05]">&lt;gbrlwck&gt;</a></span><span class="message">they are nearly the same size</span></div><div class="line" id="173834"><span class="nick" style="color:#8dd3c7"><a href="#173834" label="[17:38:34]">&lt;stikonas&gt;</a></span><span class="message">maybe some zeroes at the end...</span></div><div class="line" id="173844"><span class="nick" style="color:#8dd3c7"><a href="#173844" label="[17:38:44]">&lt;stikonas&gt;</a></span><span class="message">probably doesn't matter</span></div><div class="line" id="173848"><span class="nick" style="color:#6b8072"><a href="#173848" label="[17:38:48]">&lt;gbrlwck&gt;</a></span><span class="message">i'll give diffoscope a try, since the machine is *much* faster now</span></div><div class="line" id="173849"><span class="nick" style="color:#8dd3c7"><a href="#173849" label="[17:38:49]">&lt;stikonas&gt;</a></span><span class="message">those are prototypes anyway</span></div><div class="line" id="173904"><span class="nick" style="color:#8dd3c7"><a href="#173904" label="[17:39:04]">&lt;stikonas&gt;</a></span><span class="message">although, diffoscope might not show too much if sizes are different</span></div><div class="line" id="173913"><span class="nick" style="color:#8dd3c7"><a href="#173913" label="[17:39:13]">&lt;stikonas&gt;</a></span><span class="message">it will just say binary files with diffrerent sizes</span></div><div class="line" id="173918"><span class="nick" style="color:#6b8072"><a href="#173918" label="[17:39:18]">&lt;gbrlwck&gt;</a></span><span class="message">i know; but should hex2-0 and hex2-1 produce identical output?</span></div><div class="line" id="173921"><span class="nick" style="color:#8dd3c7"><a href="#173921" label="[17:39:21]">&lt;stikonas&gt;</a></span><span class="message">might be hexdump is more helpful</span></div><div class="line" id="173935"><span class="nick" style="color:#8dd3c7"><a href="#173935" label="[17:39:35]">&lt;stikonas&gt;</a></span><span class="message">I think so</span></div><div class="line" id="174002"><span class="nick" style="color:#6b8072"><a href="#174002" label="[17:40:02]">&lt;gbrlwck&gt;</a></span><span class="message">so we have a bug :)</span></div><div class="line" id="174013"><span class="nick" style="color:#8dd3c7"><a href="#174013" label="[17:40:13]">&lt;stikonas&gt;</a></span><span class="message">well, first of all check that hex2-0 succeeded</span></div><div class="line" id="174016"><span class="nick" style="color:#8dd3c7"><a href="#174016" label="[17:40:16]">&lt;stikonas&gt;</a></span><span class="message">echo $?</span></div><div class="line" id="174018"><span class="nick" style="color:#8dd3c7"><a href="#174018" label="[17:40:18]">&lt;stikonas&gt;</a></span><span class="message">should show 0</span></div><div class="line" id="174109"><span class="nick" style="color:#8dd3c7"><a href="#174109" label="[17:41:09]">&lt;stikonas&gt;</a></span><span class="message">M0 and M1 don't produce the same output though</span></div><div class="line" id="174118"><span class="nick" style="color:#8dd3c7"><a href="#174118" label="[17:41:18]">&lt;stikonas&gt;</a></span><span class="message">but they would produce the same binaries after hex2 processing</span></div><div class="line" id="174201"><span class="nick" style="color:#8dd3c7"><a href="#174201" label="[17:42:01]">&lt;stikonas&gt;</a></span><span class="message">(M0 and M1 produce files with somewhat different newline structures)</span></div><div class="line" id="174207"><span class="nick" style="color:#6b8072"><a href="#174207" label="[17:42:07]">&lt;gbrlwck&gt;</a></span><span class="message">hex2-0 succeeded</span></div><div class="line" id="174613"><span class="nick" style="color:#6b8072"><a href="#174613" label="[17:46:13]">&lt;gbrlwck&gt;</a></span><span class="message"> <a rel="nofollow" href="https://termbin.com/405q">https://termbin.com/405q</a> </span></div><div class="line" id="174647"><span class="nick" style="color:#6b8072"><a href="#174647" label="[17:46:47]">&lt;gbrlwck&gt;</a></span><span class="message">ah, so the hex2-0 version doesn't even produce useful output</span></div><div class="line" id="175304"><span class="nick" style="color:#6b8072"><a href="#175304" label="[17:53:04]">&lt;gbrlwck&gt;</a></span><span class="message">stikonas: are RD_S4 LUI (in M1) and lui s4, 0 (in GAS) identical?</span></div><div class="line" id="175311"><span class="nick" style="color:#6b8072"><a href="#175311" label="[17:53:11]">&lt;gbrlwck&gt;</a></span><span class="message">nvm</span></div><div class="line" id="175331"><span class="nick" style="color:#6d2462"><a href="#175331" label="[17:53:31]">&lt;stikonas[m]&gt;</a></span><span class="message">Yes, they are</span></div><div class="line" id="175354"><span class="nick" style="color:#6d2462"><a href="#175354" label="[17:53:54]">&lt;stikonas[m]&gt;</a></span><span class="message">Although, both do nothing on its own</span></div><div class="line" id="175422"><span class="nick" style="color:#6d2462"><a href="#175422" label="[17:54:22]">&lt;stikonas[m]&gt;</a></span><span class="message">lui is mostly useful with non zero immediate constants</span></div><div class="line" id="180102"><span class="nick" style="color:#6d2462"><a href="#180102" label="[18:01:02]">&lt;stikonas[m]&gt;</a></span><span class="message">gbrlwck: any reason for lui?</span></div><div class="line" id="180113"><span class="nick" style="color:#6d2462"><a href="#180113" label="[18:01:13]">&lt;stikonas[m]&gt;</a></span><span class="message">And not addi/mv?</span></div><div class="line" id="180131"><span class="nick" style="color:#6b8072"><a href="#180131" label="[18:01:31]">&lt;gbrlwck&gt;</a></span><span class="message">nope</span></div><div class="line" id="180137"><span class="nick" style="color:#6d2462"><a href="#180137" label="[18:01:37]">&lt;stikonas[m]&gt;</a></span><span class="message">I think those are safer</span></div><div class="line" id="180151"><span class="nick" style="color:#6d2462"><a href="#180151" label="[18:01:51]">&lt;stikonas[m]&gt;</a></span><span class="message">Lui would only initialise high bits</span></div><div class="line" id="180214"><span class="nick" style="color:#6d2462"><a href="#180214" label="[18:02:14]">&lt;stikonas[m]&gt;</a></span><span class="message">Leaving bits 0-11 untouched</span></div><div class="line" id="180328"><span class="nick" style="color:#6d2462"><a href="#180328" label="[18:03:28]">&lt;stikonas[m]&gt;</a></span><span class="message">Hmm, or does it zero low bits...</span></div><div class="line" id="180334"><span class="nick" style="color:#6d2462"><a href="#180334" label="[18:03:34]">&lt;stikonas[m]&gt;</a></span><span class="message">Can't remember now</span></div><div class="line" id="180437"><span class="nick" style="color:#6b8072"><a href="#180437" label="[18:04:37]">&lt;gbrlwck&gt;</a></span><span class="message">yeah, you're right</span></div><div class="line" id="180748"><span class="nick" style="color:#6d2462"><a href="#180748" label="[18:07:48]">&lt;stikonas[m]&gt;</a></span><span class="message">BTW, you can force push into PRs</span></div><div class="line" id="180754"><span class="nick" style="color:#6b8072"><a href="#180754" label="[18:07:54]">&lt;gbrlwck&gt;</a></span><span class="message">:)</span></div><div class="line" id="180804"><span class="nick" style="color:#6d2462"><a href="#180804" label="[18:08:04]">&lt;stikonas[m]&gt;</a></span><span class="message">I saw you closed it</span></div><div class="line" id="181357"><span class="nick" style="color:#6b8072"><a href="#181357" label="[18:13:57]">&lt;gbrlwck&gt;</a></span><span class="message">addi sp4, zero, 0</span></div><div class="line" id="181406"><span class="nick" style="color:#6b8072"><a href="#181406" label="[18:14:06]">&lt;gbrlwck&gt;</a></span><span class="message">*s4</span></div><div class="line" id="181411"><span class="nick" style="color:#6b8072"><a href="#181411" label="[18:14:11]">&lt;gbrlwck&gt;</a></span><span class="message">sets s4 to zero, right?</span></div><div class="line" id="181420"><span class="nick" style="color:#6d2462"><a href="#181420" label="[18:14:20]">&lt;stikonas[m]&gt;</a></span><span class="message">Well,in gas you can use li</span></div><div class="line" id="181431"><span class="nick" style="color:#6d2462"><a href="#181431" label="[18:14:31]">&lt;stikonas[m]&gt;</a></span><span class="message">But that's the same thing</span></div><div class="line" id="181439"><span class="nick" style="color:#6d2462"><a href="#181439" label="[18:14:39]">&lt;stikonas[m]&gt;</a></span><span class="message">li is load immediate</span></div><div class="line" id="181500"><span class="nick" style="color:#6d2462"><a href="#181500" label="[18:15:00]">&lt;stikonas[m]&gt;</a></span><span class="message">It's a pseudoinstruction</span></div><div class="line" id="181549"><span class="nick" style="color:#6d2462"><a href="#181549" label="[18:15:49]">&lt;stikonas[m]&gt;</a></span><span class="message">Gas will correctly expand it into addi, lui/addi pair for larger numbers or even more instructions for 32-bit constants</span></div><div class="line" id="181601"><span class="nick" style="color:#80b1d3"><a href="#181601" label="[18:16:01]">&lt;xentrac&gt;</a></span><span class="message">you mean 64-bit?</span></div><div class="line" id="181618"><span class="nick" style="color:#80b1d3"><a href="#181618" label="[18:16:18]">&lt;xentrac&gt;</a></span><span class="message">lui/addi suffices for 32 bits I think</span></div><div class="line" id="181717"><span class="nick" style="color:#6d2462"><a href="#181717" label="[18:17:17]">&lt;stikonas[m]&gt;</a></span><span class="message">Lui/addi is only enough for 31 bit unsigned</span></div><div class="line" id="181724"><span class="nick" style="color:#6d2462"><a href="#181724" label="[18:17:24]">&lt;stikonas[m]&gt;</a></span><span class="message">Or 32 bit signed</span></div><div class="line" id="181829"><span class="nick" style="color:#6b8072"><a href="#181829" label="[18:18:29]">&lt;gbrlwck&gt;</a></span><span class="message">`RD_S4 ADDI` should do the trick in M1?</span></div><div class="line" id="181939"><span class="nick" style="color:#6d2462"><a href="#181939" label="[18:19:39]">&lt;stikonas[m]&gt;</a></span><span class="message">Yes</span></div><div class="line" id="182019"><span class="nick" style="color:#6d2462"><a href="#182019" label="[18:20:19]">&lt;stikonas[m]&gt;</a></span><span class="message">In M1 ADDI and MV are identical, I just added two defines for same hex</span></div><div class="line" id="182043"><span class="nick" style="color:#6d2462"><a href="#182043" label="[18:20:43]">&lt;stikonas[m]&gt;</a></span><span class="message">In Gas I think mv goes without immediate</span></div><div class="line" id="182056"><span class="nick" style="color:#6d2462"><a href="#182056" label="[18:20:56]">&lt;stikonas[m]&gt;</a></span><span class="message">E.g. mv a0, a1</span></div><div class="line" id="182117"><span class="nick" style="color:#6d2462"><a href="#182117" label="[18:21:17]">&lt;stikonas[m]&gt;</a></span><span class="message">Vs addi a0, a1, 0</span></div><div class="line" id="182221"><span class="nick" style="color:#6b8072"><a href="#182221" label="[18:22:21]">&lt;gbrlwck&gt;</a></span><span class="message">updated the PR</span></div><div class="line" id="182402"><span class="nick" style="color:#6b8072"><a href="#182402" label="[18:24:02]">&lt;gbrlwck&gt;</a></span><span class="message">wait</span></div><div class="line" id="182406"><span class="nick" style="color:#6b8072"><a href="#182406" label="[18:24:06]">&lt;gbrlwck&gt;</a></span><span class="message">doesn't work yet</span></div><div class="line" id="182537"><span class="nick" style="color:#8dd3c7"><a href="#182537" label="[18:25:37]">&lt;stikonas&gt;</a></span><span class="message">you'll need to create a new one after closing</span></div><div class="line" id="182939"><span class="nick" style="color:#6b8072"><a href="#182939" label="[18:29:39]">&lt;gbrlwck&gt;</a></span><span class="message">is this &quot;linux doesn't initialize registers to 0&quot; thing a linux bug?</span></div><div class="line" id="183025"><span class="nick" style="color:#80b1d3"><a href="#183025" label="[18:30:25]">&lt;xentrac&gt;</a></span><span class="message">I suspect so.  if they come from the pre-exec program, that's a potentially serious security leak</span></div><div class="line" id="183043"><span class="nick" style="color:#80b1d3"><a href="#183043" label="[18:30:43]">&lt;xentrac&gt;</a></span><span class="message">but maybe they come from somewhere else</span></div><div class="line" id="183054"><span class="nick" style="color:#6b8072"><a href="#183054" label="[18:30:54]">&lt;gbrlwck&gt;</a></span><span class="message">they?</span></div><div class="line" id="183059"><span class="nick" style="color:#80b1d3"><a href="#183059" label="[18:30:59]">&lt;xentrac&gt;</a></span><span class="message">the register contents</span></div><div class="line" id="183339"><span class="nick" style="color:#8dd3c7"><a href="#183339" label="[18:33:39]">&lt;stikonas&gt;</a></span><span class="message">I was told they don't come from pre-exec program</span></div><div class="line" id="183354"><span class="nick" style="color:#8dd3c7"><a href="#183354" label="[18:33:54]">&lt;stikonas&gt;</a></span><span class="message">only some old linux versions had a leak with fp register</span></div><div class="line" id="183448"><span class="nick" style="color:#6b8072"><a href="#183448" label="[18:34:48]">&lt;gbrlwck&gt;</a></span><span class="message">so register content after exec is undefined?</span></div><div class="line" id="183502"><span class="nick" style="color:#6b8072"><a href="#183502" label="[18:35:02]">&lt;gbrlwck&gt;</a></span><span class="message">(my machine runs Linux 5.11.0; so not too ancient)</span></div><div class="line" id="183656"><span class="nick" style="color:#8dd3c7"><a href="#183656" label="[18:36:56]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: well, that's what we found out yesterday</span></div><div class="line" id="183716"><span class="nick" style="color:#8dd3c7"><a href="#183716" label="[18:37:16]">&lt;stikonas&gt;</a></span><span class="message">in any case if somebody wants to port it to baremetal later, it's better to initialize them</span></div><div class="line" id="183722"><span class="nick" style="color:#6b8072"><a href="#183722" label="[18:37:22]">&lt;gbrlwck&gt;</a></span><span class="message">stikonas: i just saw that you asked in #riscv yesterday</span></div><div class="line" id="183752"><span class="nick" style="color:#6b8072"><a href="#183752" label="[18:37:52]">&lt;gbrlwck&gt;</a></span><span class="message">i don't see how one or three instructions more would hurt verifiability</span></div><div class="line" id="183757"><span class="nick" style="color:#8dd3c7"><a href="#183757" label="[18:37:57]">&lt;stikonas&gt;</a></span><span class="message">yeah, didn't get that much explanations or reasoning</span></div><div class="line" id="183818"><span class="nick" style="color:#8dd3c7"><a href="#183818" label="[18:38:18]">&lt;stikonas&gt;</a></span><span class="message">no, it wouldn't hurt</span></div><div class="line" id="183821"><span class="nick" style="color:#6b8072"><a href="#183821" label="[18:38:21]">&lt;gbrlwck&gt;</a></span><span class="message">should i post on some kernel mailing list?</span></div><div class="line" id="183846"><span class="nick" style="color:#8dd3c7"><a href="#183846" label="[18:38:46]">&lt;stikonas&gt;</a></span><span class="message">I don't know, there is probably some reason somewhere</span></div><div class="line" id="183853"><span class="nick" style="color:#8dd3c7"><a href="#183853" label="[18:38:53]">&lt;stikonas&gt;</a></span><span class="message">it's just that we don't know</span></div><div class="line" id="183900"><span class="nick" style="color:#8dd3c7"><a href="#183900" label="[18:39:00]">&lt;stikonas&gt;</a></span><span class="message">it might be somewhere in ABI specifications</span></div><div class="line" id="183904"><span class="nick" style="color:#6b8072"><a href="#183904" label="[18:39:04]">&lt;gbrlwck&gt;</a></span><span class="message">well, we might as well get an answer ;)</span></div><div class="line" id="183916"><span class="nick" style="color:#6b8072"><a href="#183916" label="[18:39:16]">&lt;gbrlwck&gt;</a></span><span class="message">ok, i'll look into it before posting anywhere</span></div><div class="line" id="184103"><span class="nick" style="color:#6b8072"><a href="#184103" label="[18:41:03]">&lt;gbrlwck&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/pull/60">https://github.com/oriansj/stage0-posix/pull/60</a> </span></div><div class="line" id="184154"><span class="nick" style="color:#6b8072"><a href="#184154" label="[18:41:54]">&lt;gbrlwck&gt;</a></span><span class="message">stikonas: could you check if i forgot anything?</span></div><div class="line" id="184248"><span class="nick" style="color:#8dd3c7"><a href="#184248" label="[18:42:48]">&lt;stikonas&gt;</a></span><span class="message">looks fine</span></div><div class="line" id="184252"><span class="nick" style="color:#6b8072"><a href="#184252" label="[18:42:52]">&lt;gbrlwck&gt;</a></span><span class="message">should i/may i include my name in the headers?</span></div><div class="line" id="184707"><span class="nick" style="color:#8dd3c7"><a href="#184707" label="[18:47:07]">&lt;stikonas&gt;</a></span><span class="message">I guess you can</span></div><div class="line" id="184848"><span class="nick" style="color:#6b8072"><a href="#184848" label="[18:48:48]">&lt;gbrlwck&gt;</a></span><span class="message">would that make me a copyright holder?</span></div><div class="line" id="184951"><span class="nick" style="color:#6d2462"><a href="#184951" label="[18:49:51]">&lt;stikonas[m]&gt;</a></span><span class="message">Copyright is automatic by law, it's not up to headers</span></div><div class="line" id="185003"><span class="nick" style="color:#6d2462"><a href="#185003" label="[18:50:03]">&lt;stikonas[m]&gt;</a></span><span class="message">Headers are more for information</span></div><div class="line" id="185057"><span class="nick" style="color:#6d2462"><a href="#185057" label="[18:50:57]">&lt;stikonas[m]&gt;</a></span><span class="message">In law, I guess it would mostly depend on whether contribution is trivial or not</span></div><div class="line" id="185109"><span class="nick" style="color:#6b8072"><a href="#185109" label="[18:51:09]">&lt;gbrlwck&gt;</a></span><span class="message">lol</span></div><div class="line" id="185134"><span class="nick" style="color:#6d2462"><a href="#185134" label="[18:51:34]">&lt;stikonas[m]&gt;</a></span><span class="message">Which I guess is a bit of grey area</span></div><div class="line" id="185221"><span class="nick" style="color:#6b8072"><a href="#185221" label="[18:52:21]">&lt;gbrlwck&gt;</a></span><span class="message">well, depending on judges ruling over whether initializing registers is a trivial thing to do or not</span></div><div class="line" id="185352"><span class="nick" style="color:#389600"><a href="#185352" label="[18:53:52]">&lt;oriansj&gt;</a></span><span class="message">gbrlwck: any code you contribute, you instantly become a copyright holder (over what you contributed).</span></div><div class="line" id="185507"><span class="nick" style="color:#389600"><a href="#185507" label="[18:55:07]">&lt;oriansj&gt;</a></span><span class="message">and your stage0-posix commits have been merged</span></div><div class="line" id="185516"><span class="nick" style="color:#6b8072"><a href="#185516" label="[18:55:16]">&lt;gbrlwck&gt;</a></span><span class="message">yay</span></div><div class="line" id="185539"><span class="nick" style="color:#6b8072"><a href="#185539" label="[18:55:39]">&lt;gbrlwck&gt;</a></span><span class="message">so i'll have to excuse myself for the weekend :)  have a nice one, all of you!</span></div><div class="line" id="185547"><span class="nick" style="color:#389600"><a href="#185547" label="[18:55:47]">&lt;oriansj&gt;</a></span><span class="message">and make clean test-riscv64 looks good on metal?</span></div><div class="line" id="185659"><span class="nick" style="color:#8dd3c7"><a href="#185659" label="[18:56:59]">&lt;stikonas&gt;</a></span><span class="message">well, checksums matched with bootstrapped sha256sum</span></div><div class="line" id="185833"><span class="nick" style="color:#6b8072"><a href="#185833" label="[18:58:33]">&lt;gbrlwck&gt;</a></span><span class="message">oriansj: i'm giving it a go</span></div><div class="line" id="190107"><span class="nick" style="color:#389600"><a href="#190107" label="[19:01:07]">&lt;oriansj&gt;</a></span><span class="message">it is the ultimate sanity test, short of a new git clone on a freshly imaged machine.</span></div><div class="line" id="190837"><span class="nick" style="color:#8dd3c7"><a href="#190837" label="[19:08:37]">&lt;stikonas&gt;</a></span><span class="message">and it also checks that sha256sum functions correctly</span></div><div class="line" id="190903"><span class="nick" style="color:#8dd3c7"><a href="#190903" label="[19:09:03]">&lt;stikonas&gt;</a></span><span class="message">since checksums are checked once with bootstrapped sha256sum and once with system sha256sum</span></div><div class="line" id="191056"><span class="nick" style="color:#6b8072"><a href="#191056" label="[19:10:56]">&lt;gbrlwck&gt;</a></span><span class="message"> <a rel="nofollow" href="https://termbin.com/lq2r">https://termbin.com/lq2r</a> </span></div><div class="line" id="191121"><span class="nick" style="color:#6b8072"><a href="#191121" label="[19:11:21]">&lt;gbrlwck&gt;</a></span><span class="message">i think we're good</span></div><div class="line" id="233302"><span class="nick" style="color:#389600"><a href="#233302" label="[23:33:02]">&lt;oriansj&gt;</a></span><span class="message">gbrlwck: thank you, looks great</span></div><br /></div></body></html>