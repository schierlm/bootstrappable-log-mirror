<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2024-01-28.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="010320"><span class="nick" style="color:#389600"><a href="#010320" label="[01:03:20]">&lt;Foxboron&gt;</a></span><span class="message">matrix_bridge: Wolfi is not really rooted in Alpine, but it has an alpine dev. It is though a separate thing.</span></div><div class="line" id="010325"><span class="nick" style="color:#389600"><a href="#010325" label="[01:03:25]">&lt;Foxboron&gt;</a></span><span class="message">cc lrvick</span></div><div class="line" id="010351"><span class="nick" style="color:#389600"><a href="#010351" label="[01:03:51]">&lt;Foxboron&gt;</a></span><span class="message">But conceptually, it's the same thing. Build packages in containers and offer composability</span></div><div class="line" id="010439"><span class="nick" style="color:#389600"><a href="#010439" label="[01:04:39]">&lt;Foxboron&gt;</a></span><span class="message">But like, &quot;without trusting any existing linux distribution&quot; isn't *really* correct as your are basing this off entierly with OCI containers, so something needs to build the runtimes.</span></div><div class="line" id="010510"><span class="nick" style="color:#389600"><a href="#010510" label="[01:05:10]">&lt;Foxboron&gt;</a></span><span class="message">And as you *are* using Linux namespaces there has to be a kernel *somewhere*. And several builds embed uname into the builds. So they won't be reproducible across different linux distros</span></div><div class="line" id="010519"><span class="nick" style="color:#389600"><a href="#010519" label="[01:05:19]">&lt;Foxboron&gt;</a></span><span class="message">They might not even be reproducible across different container runtimes</span></div><div class="line" id="010601"><span class="nick" style="color:#389600"><a href="#010601" label="[01:06:01]">&lt;Foxboron&gt;</a></span><span class="message">Doing a new linux distro from scratch introduces more problems then they effectively solve.</span></div><div class="line" id="010613"><span class="nick" style="color:#8dd3c7"><a href="#010613" label="[01:06:13]">&lt;lrvick&gt;</a></span><span class="message">Support for different container runtimes should be doable now that docker is finally standardizing on OCI</span></div><div class="line" id="010639"><span class="nick" style="color:#389600"><a href="#010639" label="[01:06:39]">&lt;Foxboron&gt;</a></span><span class="message">I wouldn't be too confident on that holding true, as it would still depend on how each runtime setup the namespaces. Even if they use OCI</span></div><div class="line" id="010650"><span class="nick" style="color:#8dd3c7"><a href="#010650" label="[01:06:50]">&lt;lrvick&gt;</a></span><span class="message">But also I have already confirmed peole getting identical hashes building from multiple distros (all using docker)</span></div><div class="line" id="010715"><span class="nick" style="color:#8dd3c7"><a href="#010715" label="[01:07:15]">&lt;lrvick&gt;</a></span><span class="message">because at the end of the day each build ends in a scratch container, with only the files I insert, with timestamps locked etc</span></div><div class="line" id="010717"><span class="nick" style="color:#389600"><a href="#010717" label="[01:07:17]">&lt;Foxboron&gt;</a></span><span class="message">As long as your supported set is small that will hold true. You are still going to encounter the uname embedding issue at some point</span></div><div class="line" id="010736"><span class="nick" style="color:#8dd3c7"><a href="#010736" label="[01:07:36]">&lt;lrvick&gt;</a></span><span class="message">I can fake that if needed</span></div><div class="line" id="010747"><span class="nick" style="color:#8dd3c7"><a href="#010747" label="[01:07:47]">&lt;lrvick&gt;</a></span><span class="message">just as in some edge cases I must use libfaketime</span></div><div class="line" id="010806"><span class="nick" style="color:#8dd3c7"><a href="#010806" label="[01:08:06]">&lt;lrvick&gt;</a></span><span class="message">but that is a rare exception now as most distros are pushing upstreams to include reproducibility features</span></div><div class="line" id="010810"><span class="nick" style="color:#389600"><a href="#010810" label="[01:08:10]">&lt;Foxboron&gt;</a></span><span class="message">You would end up having to insert a fake sysfs or procfs</span></div><div class="line" id="010815"><span class="nick" style="color:#389600"><a href="#010815" label="[01:08:15]">&lt;Foxboron&gt;</a></span><span class="message">It's not as easy as libfaketime</span></div><div class="line" id="010919"><span class="nick" style="color:#8dd3c7"><a href="#010919" label="[01:09:19]">&lt;lrvick&gt;</a></span><span class="message">I have not run into this issue yet with gcc, go, python, perl, zig, or node.</span></div><div class="line" id="010924"><span class="nick" style="color:#389600"><a href="#010924" label="[01:09:24]">&lt;Foxboron&gt;</a></span><span class="message">They are the easy ones</span></div><div class="line" id="010940"><span class="nick" style="color:#389600"><a href="#010940" label="[01:09:40]">&lt;Foxboron&gt;</a></span><span class="message">We've been working on all the base stuff for almost a decade now :)</span></div><div class="line" id="011036"><span class="nick" style="color:#8dd3c7"><a href="#011036" label="[01:10:36]">&lt;lrvick&gt;</a></span><span class="message">Those are also the ones that matter to me. Everything needed to build a deterministic enclave os, or an airgapped distro</span></div><div class="line" id="011043"><span class="nick" style="color:#8dd3c7"><a href="#011043" label="[01:10:43]">&lt;lrvick&gt;</a></span><span class="message">but if I have a package I really need that has a uname issue, I can patch it out</span></div><div class="line" id="011051"><span class="nick" style="color:#389600"><a href="#011051" label="[01:10:51]">&lt;Foxboron&gt;</a></span><span class="message">Yes, which is why I say &quot;as long as your support set is small&quot;</span></div><div class="line" id="011124"><span class="nick" style="color:#8dd3c7"><a href="#011124" label="[01:11:24]">&lt;lrvick&gt;</a></span><span class="message">stagex scope is really only meant to be compilers and toolchains so people have a baseline for producing reproducible releases of their own software</span></div><div class="line" id="011148"><span class="nick" style="color:#8dd3c7"><a href="#011148" label="[01:11:48]">&lt;lrvick&gt;</a></span><span class="message">I am not trying to support gnome</span></div><div class="line" id="011241"><span class="nick" style="color:#389600"><a href="#011241" label="[01:12:41]">&lt;Foxboron&gt;</a></span><span class="message">Generally the base stuff is not too hard to get reproducible. I've been playing with getting the thought of getting the Arch docker images 100% reproducible for fun with source builds.</span></div><div class="line" id="011251"><span class="nick" style="color:#389600"><a href="#011251" label="[01:12:51]">&lt;Foxboron&gt;</a></span><span class="message">s/getting//</span></div><div class="line" id="011322"><span class="nick" style="color:#2e2a4a"><a href="#011322" label="[01:13:22]">&lt;stikonas&gt;</a></span><span class="message">well, live-bootstrap stuff (so toolchains and many standard GNU tools) don't do any of that uname embedding nonsense</span></div><div class="line" id="011333"><span class="nick" style="color:#2e2a4a"><a href="#011333" label="[01:13:33]">&lt;stikonas&gt;</a></span><span class="message">so you can build it on any kernel with the same results</span></div><div class="line" id="011354"><span class="nick" style="color:#389600"><a href="#011354" label="[01:13:54]">&lt;Foxboron&gt;</a></span><span class="message">I have no clue why build systems do that, but here we are</span></div><div class="line" id="011411"><span class="nick" style="color:#8dd3c7"><a href="#011411" label="[01:14:11]">&lt;lrvick&gt;</a></span><span class="message">Yeah. Already my project has been built from 3 distros. Container isolation and deterministic seed process, timestamp locking etc, gets the job done</span></div><div class="line" id="011505"><span class="nick" style="color:#8dd3c7"><a href="#011505" label="[01:15:05]">&lt;lrvick&gt;</a></span><span class="message">I didn't really have an alternative. No existing distro meets my threat model.</span></div><div class="line" id="011539"><span class="nick" style="color:#8dd3c7"><a href="#011539" label="[01:15:39]">&lt;lrvick&gt;</a></span><span class="message">And it is much easier to start over than try to get a very large distro to bend to a threat model most people don't have</span></div><div class="line" id="011627"><span class="nick" style="color:#389600"><a href="#011627" label="[01:16:27]">&lt;Foxboron&gt;</a></span><span class="message">You end up with having to support the distor, and people underestimate that effort</span></div><div class="line" id="011650"><span class="nick" style="color:#389600"><a href="#011650" label="[01:16:50]">&lt;Foxboron&gt;</a></span><span class="message">The multisig stuff is not well thought out. You should depend on a transparency log to push signature towards. It would make them distributed and tamper evident.</span></div><div class="line" id="011658"><span class="nick" style="color:#389600"><a href="#011658" label="[01:16:58]">&lt;Foxboron&gt;</a></span><span class="message">See sigsum or sigstore</span></div><div class="line" id="011805"><span class="nick" style="color:#8dd3c7"><a href="#011805" label="[01:18:05]">&lt;lrvick&gt;</a></span><span class="message">If you and I both build a container image, and both get the same digest, and we both sign that digest, how is not tamper evident?</span></div><div class="line" id="011827"><span class="nick" style="color:#389600"><a href="#011827" label="[01:18:27]">&lt;Foxboron&gt;</a></span><span class="message">lrvick: How do you get my signature?</span></div><div class="line" id="011832"><span class="nick" style="color:#389600"><a href="#011832" label="[01:18:32]">&lt;Foxboron&gt;</a></span><span class="message">and how do I get yours?</span></div><div class="line" id="011846"><span class="nick" style="color:#8dd3c7"><a href="#011846" label="[01:18:46]">&lt;lrvick&gt;</a></span><span class="message">I am using the official containers-policy.json spec which supports multisig natively, with hardware signing.</span></div><div class="line" id="011856"><span class="nick" style="color:#8dd3c7"><a href="#011856" label="[01:18:56]">&lt;lrvick&gt;</a></span><span class="message">Everyone can just PR signatures to the repo, and they can sync to any CDN we want</span></div><div class="line" id="011905"><span class="nick" style="color:#389600"><a href="#011905" label="[01:19:05]">&lt;Foxboron&gt;</a></span><span class="message">So your repo is the SPOF?</span></div><div class="line" id="011934"><span class="nick" style="color:#389600"><a href="#011934" label="[01:19:34]">&lt;Foxboron&gt;</a></span><span class="message">How do I validate that nobody has tampered with the signature at some point in the history?</span></div><div class="line" id="011938"><span class="nick" style="color:#8dd3c7"><a href="#011938" label="[01:19:38]">&lt;lrvick&gt;</a></span><span class="message">Anyone is free to merge signatures from each others repos as they like as well.</span></div><div class="line" id="012011"><span class="nick" style="color:#8dd3c7"><a href="#012011" label="[01:20:11]">&lt;lrvick&gt;</a></span><span class="message">How could you tamper with a signature? It is cryptographic output from my private key</span></div><div class="line" id="012020"><span class="nick" style="color:#8dd3c7"><a href="#012020" label="[01:20:20]">&lt;lrvick&gt;</a></span><span class="message">with my well published public key</span></div><div class="line" id="012034"><span class="nick" style="color:#389600"><a href="#012034" label="[01:20:34]">&lt;Foxboron&gt;</a></span><span class="message">Why would I trust your key and not someone elses?</span></div><div class="line" id="012053"><span class="nick" style="color:#389600"><a href="#012053" label="[01:20:53]">&lt;Foxboron&gt;</a></span><span class="message">How would I know the file i'm looking at hasnt been substituted?</span></div><div class="line" id="012219"><span class="nick" style="color:#8dd3c7"><a href="#012219" label="[01:22:19]">&lt;lrvick&gt;</a></span><span class="message">Well, each maintainer publishes their public keys, ideally their long lived web of trust anchored public keys, and you have a snapshot of at least some of those locally you store over time.</span></div><div class="line" id="012301"><span class="nick" style="color:#8dd3c7"><a href="#012301" label="[01:23:01]">&lt;lrvick&gt;</a></span><span class="message">Because of multisig, you don't trust any one signature, but you trust that all these well known keys have all signed the same binary that they compiled from source, and that they are not all colluding</span></div><div class="line" id="012337"><span class="nick" style="color:#8dd3c7"><a href="#012337" label="[01:23:37]">&lt;lrvick&gt;</a></span><span class="message">Same way we know to trust a release of bitcoin core, because 12 people around the world with long lived well known keys all sign it</span></div><div class="line" id="012410"><span class="nick" style="color:#389600"><a href="#012410" label="[01:24:10]">&lt;Foxboron&gt;</a></span><span class="message">This depends on the availability of the signature. If the signature gets pulled, you don't have any way of knowing.</span></div><div class="line" id="012424"><span class="nick" style="color:#389600"><a href="#012424" label="[01:24:24]">&lt;Foxboron&gt;</a></span><span class="message">Or if the signature gets tampered with. IE you and I have to different views of the signature</span></div><div class="line" id="012450"><span class="nick" style="color:#389600"><a href="#012450" label="[01:24:50]">&lt;Foxboron&gt;</a></span><span class="message">This is what transparency logs solve, as you can confirm you have one canonical version of the history</span></div><div class="line" id="012503"><span class="nick" style="color:#8dd3c7"><a href="#012503" label="[01:25:03]">&lt;lrvick&gt;</a></span><span class="message">If you can tamper with a PGP signature, we have bigger problems</span></div><div class="line" id="012515"><span class="nick" style="color:#389600"><a href="#012515" label="[01:25:15]">&lt;Foxboron&gt;</a></span><span class="message">You don't need to tamper with the PGP signature if you just rm the file</span></div><div class="line" id="012609"><span class="nick" style="color:#8dd3c7"><a href="#012609" label="[01:26:09]">&lt;lrvick&gt;</a></span><span class="message">Okay. If the binary goes away you can't verify it either? linux distributions solve this with lots of mirrors</span></div><div class="line" id="012616"><span class="nick" style="color:#389600"><a href="#012616" label="[01:26:16]">&lt;Foxboron&gt;</a></span><span class="message">Correct</span></div><div class="line" id="012640"><span class="nick" style="color:#389600"><a href="#012640" label="[01:26:40]">&lt;Foxboron&gt;</a></span><span class="message">And if we published everything on a transparency log you would have a very good overview if the mirrors actually has pulled the binary or is hiding it from you</span></div><div class="line" id="012716"><span class="nick" style="color:#389600"><a href="#012716" label="[01:27:16]">&lt;Foxboron&gt;</a></span><span class="message">See <a rel="nofollow" href="https://github.com/kpcyrd/pacman-bintrans">https://github.com/kpcyrd/pacman-bintrans</a> </span></div><div class="line" id="012717"><span class="nick" style="color:#8dd3c7"><a href="#012717" label="[01:27:17]">&lt;lrvick&gt;</a></span><span class="message">The transparency log in my case is a signed git repo that contains all code and all expected outputs from that code</span></div><div class="line" id="012723"><span class="nick" style="color:#8dd3c7"><a href="#012723" label="[01:27:23]">&lt;lrvick&gt;</a></span><span class="message">and that repo should be mirrored as much as possible too</span></div><div class="line" id="012727"><span class="nick" style="color:#389600"><a href="#012727" label="[01:27:27]">&lt;Foxboron&gt;</a></span><span class="message">Simon Josefsson has this for apt</span></div><div class="line" id="012727"><span class="nick" style="color:#389600"><a href="#012727" label="[01:27:27]">&lt;Foxboron&gt;</a></span><span class="message"> <a rel="nofollow" href="https://blog.josefsson.org/2023/04/15/sigstore-protects-apt-archives-apt-verify-apt-sigstore/">https://blog.josefsson.org/2023/04/15/sigstore-protects-apt-archives-apt-verify-apt-sigstore/</a> </span></div><div class="line" id="012735"><span class="nick" style="color:#389600"><a href="#012735" label="[01:27:35]">&lt;Foxboron&gt;</a></span><span class="message">lrvick: a git repo is a veryvery poor transparency log.</span></div><div class="line" id="012747"><span class="nick" style="color:#389600"><a href="#012747" label="[01:27:47]">&lt;Foxboron&gt;</a></span><span class="message">(I also wrote this for my master thesis for apt originally, but it's a bad implementation)</span></div><div class="line" id="012813"><span class="nick" style="color:#389600"><a href="#012813" label="[01:28:13]">&lt;Foxboron&gt;</a></span><span class="message"> <a rel="nofollow" href="https://tlog.linderud.dev/">https://tlog.linderud.dev/</a>  &lt;- if you are curious on people using git repos for transparency logs. But for kernel.org git pushes</span></div><div class="line" id="012841"><span class="nick" style="color:#8dd3c7"><a href="#012841" label="[01:28:41]">&lt;lrvick&gt;</a></span><span class="message">A signed git repo with signed reviews shows all the code that went in, and who signed off on it, and who pushed reproduction signatures. Where is the fundamental flaw there?</span></div><div class="line" id="012858"><span class="nick" style="color:#8dd3c7"><a href="#012858" label="[01:28:58]">&lt;lrvick&gt;</a></span><span class="message">Trying to use simple easy to reason about tools people already have</span></div><div class="line" id="012903"><span class="nick" style="color:#389600"><a href="#012903" label="[01:29:03]">&lt;Foxboron&gt;</a></span><span class="message">You would reply the git history to validate the log. It's an expensive operation</span></div><div class="line" id="012923"><span class="nick" style="color:#389600"><a href="#012923" label="[01:29:23]">&lt;Foxboron&gt;</a></span><span class="message">While binary trees solve this veryvery effectively and gives you a proof consisting of 5 checksums on a 1 million entry tree</span></div><div class="line" id="013100"><span class="nick" style="color:#8dd3c7"><a href="#013100" label="[01:31:00]">&lt;lrvick&gt;</a></span><span class="message">Sure, I admit there are data structures that would be more effecient, but now you need everyone to sign the transparency log -and- the git repo, and getitng people to even just sign the git repo is hard enough</span></div><div class="line" id="013201"><span class="nick" style="color:#389600"><a href="#013201" label="[01:32:01]">&lt;Foxboron&gt;</a></span><span class="message">This depends on the transparency log and how you envision people to prove that rebuilds of the container/package is done.</span></div><div class="line" id="013341"><span class="nick" style="color:#389600"><a href="#013341" label="[01:33:41]">&lt;Foxboron&gt;</a></span><span class="message">Generally though, my point is that you *really* want the published log of signature to be tamper evident. And one single git repository is not going to be a good solution for that</span></div><div class="line" id="013453"><span class="nick" style="color:#8dd3c7"><a href="#013453" label="[01:34:53]">&lt;lrvick&gt;</a></span><span class="message">So instead then you recommend one single transparency log hosted where?</span></div><div class="line" id="013502"><span class="nick" style="color:#8dd3c7"><a href="#013502" label="[01:35:02]">&lt;lrvick&gt;</a></span><span class="message">A decentralized transparency log I could get behind</span></div><div class="line" id="013537"><span class="nick" style="color:#389600"><a href="#013537" label="[01:35:37]">&lt;Foxboron&gt;</a></span><span class="message">A proper transparency log has monitors that validate and replay the logs, so they are decentralised.</span></div><div class="line" id="013540"><span class="nick" style="color:#8dd3c7"><a href="#013540" label="[01:35:40]">&lt;lrvick&gt;</a></span><span class="message">But the sigstore process all looked very centalized to me. Non starter imo</span></div><div class="line" id="013603"><span class="nick" style="color:#389600"><a href="#013603" label="[01:36:03]">&lt;Foxboron&gt;</a></span><span class="message">sigstore is not great because of the lack of a proper monitor ecosystem. But it is an ecosystem instead of doing something from scratch</span></div><div class="line" id="013623"><span class="nick" style="color:#389600"><a href="#013623" label="[01:36:23]">&lt;Foxboron&gt;</a></span><span class="message">The binary transparency log from Mozilla piggybacked on existing certificate transparency logs, but people didn't like that</span></div><div class="line" id="013711"><span class="nick" style="color:#389600"><a href="#013711" label="[01:37:11]">&lt;Foxboron&gt;</a></span><span class="message">Google is working on standardizing on simple file system logs with a standardized omniwitness to distribute and cosign log trees. I think there is something in that. But it's less mature</span></div><div class="line" id="013731"><span class="nick" style="color:#389600"><a href="#013731" label="[01:37:31]">&lt;Foxboron&gt;</a></span><span class="message">This is something LVFS (fwupd.org) is looking at for firmware uploads</span></div><div class="line" id="013739"><span class="nick" style="color:#8dd3c7"><a href="#013739" label="[01:37:39]">&lt;lrvick&gt;</a></span><span class="message">It is funny you are going down this path, because I am working on something similar as the end goal</span></div><div class="line" id="013741"><span class="nick" style="color:#8dd3c7"><a href="#013741" label="[01:37:41]">&lt;lrvick&gt;</a></span><span class="message">only all the nodes replicating will be enclaves with remote attestations</span></div><div class="line" id="013752"><span class="nick" style="color:#8dd3c7"><a href="#013752" label="[01:37:52]">&lt;lrvick&gt;</a></span><span class="message">and then there does not need to be the git repo trust</span></div><div class="line" id="013805"><span class="nick" style="color:#8dd3c7"><a href="#013805" label="[01:38:05]">&lt;lrvick&gt;</a></span><span class="message">butI need to bootstrap with something that meets my threat model, even if crude</span></div><div class="line" id="013828"><span class="nick" style="color:#8dd3c7"><a href="#013828" label="[01:38:28]">&lt;lrvick&gt;</a></span><span class="message">sigstore is centralized and discourages use of smartcards and web of trust anchored keys, so nonstarter for me</span></div><div class="line" id="013852"><span class="nick" style="color:#8dd3c7"><a href="#013852" label="[01:38:52]">&lt;lrvick&gt;</a></span><span class="message">thoughI am using the &quot;sigstore&quot; containers spec</span></div><div class="line" id="013856"><span class="nick" style="color:#389600"><a href="#013856" label="[01:38:56]">&lt;Foxboron&gt;</a></span><span class="message">Well, not really</span></div><div class="line" id="013908"><span class="nick" style="color:#8dd3c7"><a href="#013908" label="[01:39:08]">&lt;lrvick&gt;</a></span><span class="message">if anyone wants to replicate those signatures to sigstore central repo too, I can't stop them</span></div><div class="line" id="013925"><span class="nick" style="color:#389600"><a href="#013925" label="[01:39:25]">&lt;Foxboron&gt;</a></span><span class="message">People focus on the OIDC aspect of sigstore. But sigstore accepts anything. You can very well have keys on smartcards or web of trust anchored keys</span></div><div class="line" id="013928"><span class="nick" style="color:#389600"><a href="#013928" label="[01:39:28]">&lt;Foxboron&gt;</a></span><span class="message">It doesn't really care</span></div><div class="line" id="013957"><span class="nick" style="color:#8dd3c7"><a href="#013957" label="[01:39:57]">&lt;lrvick&gt;</a></span><span class="message">did you see my sign.sh script (just a prototype)</span></div><div class="line" id="014009"><span class="nick" style="color:#389600"><a href="#014009" label="[01:40:09]">&lt;Foxboron&gt;</a></span><span class="message">I've been drinking, let me reread :p</span></div><div class="line" id="014025"><span class="nick" style="color:#8dd3c7"><a href="#014025" label="[01:40:25]">&lt;lrvick&gt;</a></span><span class="message">I am actually doing pgp sigstore signatures, but just local without requiring them to be pushed anywhere</span></div><div class="line" id="014041"><span class="nick" style="color:#8dd3c7"><a href="#014041" label="[01:40:41]">&lt;lrvick&gt;</a></span><span class="message">from there they can be mirrored anywhere, and thats fine</span></div><div class="line" id="014113"><span class="nick" style="color:#389600"><a href="#014113" label="[01:41:13]">&lt;Foxboron&gt;</a></span><span class="message">mm, the issue is that the pgp support in sigstore is limited because of their library usage. So you can't do ed25519 as an example</span></div><div class="line" id="014202"><span class="nick" style="color:#8dd3c7"><a href="#014202" label="[01:42:02]">&lt;lrvick&gt;</a></span><span class="message">I am creating signatures that meet my threat model, and are compatible with the spec. and my own verifier also compatible with the spec.</span></div><div class="line" id="014223"><span class="nick" style="color:#8dd3c7"><a href="#014223" label="[01:42:23]">&lt;lrvick&gt;</a></span><span class="message">the official sigstore tooling not being compatible with their own spec is amusing then</span></div><div class="line" id="014340"><span class="nick" style="color:#8dd3c7"><a href="#014340" label="[01:43:40]">&lt;lrvick&gt;</a></span><span class="message">The OIDC support does not interest me, but I will make signatures as close to compatible with what others are doing as I can</span></div><div class="line" id="014407"><span class="nick" style="color:#8dd3c7"><a href="#014407" label="[01:44:07]">&lt;lrvick&gt;</a></span><span class="message">But everyone in my world on the project has long lived pgp keys on smartcards with web of trust, and it would be sily to not use that trust just as almost every linux distro does</span></div><div class="line" id="014427"><span class="nick" style="color:#389600"><a href="#014427" label="[01:44:27]">&lt;Foxboron&gt;</a></span><span class="message">Well, WoT is dead though</span></div><div class="line" id="014436"><span class="nick" style="color:#389600"><a href="#014436" label="[01:44:36]">&lt;Foxboron&gt;</a></span><span class="message">Which is why each distro recreate their own WoT</span></div><div class="line" id="014516"><span class="nick" style="color:#8dd3c7"><a href="#014516" label="[01:45:16]">&lt;lrvick&gt;</a></span><span class="message">Most of my team uses WoT (with thousands of signatures in our network which includes a lot of distro maintainers) but also we use keyoxide for self certification</span></div><div class="line" id="014541"><span class="nick" style="color:#389600"><a href="#014541" label="[01:45:41]">&lt;Foxboron&gt;</a></span><span class="message">&gt;in our network</span></div><div class="line" id="014543"><span class="nick" style="color:#389600"><a href="#014543" label="[01:45:43]">&lt;Foxboron&gt;</a></span><span class="message">is the key here</span></div><div class="line" id="014614"><span class="nick" style="color:#8dd3c7"><a href="#014614" label="[01:46:14]">&lt;lrvick&gt;</a></span><span class="message">I don't care that most devs don't have trusted keys. I only care that the people that are responsible for building trust in the distro do</span></div><div class="line" id="014701"><span class="nick" style="color:#389600"><a href="#014701" label="[01:47:01]">&lt;Foxboron&gt;</a></span><span class="message">You can't validate that. I had 200 signatures at some point and was part of the strong set. I'm pretty sure you can't verify that any more</span></div><div class="line" id="014739"><span class="nick" style="color:#389600"><a href="#014739" label="[01:47:39]">&lt;Foxboron&gt;</a></span><span class="message">(this is probably getting a bit offtopic for the channel though)</span></div><div class="line" id="014916"><span class="nick" style="color:#8dd3c7"><a href="#014916" label="[01:49:16]">&lt;lrvick&gt;</a></span><span class="message">I am happy to take this offline with you since you clearly care about this topic and are coming at it from a different angle. I fully expected these arguments to come, and want to refine how I engage with them.</span></div><div class="line" id="014953"><span class="nick" style="color:#8dd3c7"><a href="#014953" label="[01:49:53]">&lt;lrvick&gt;</a></span><span class="message">the #! channel is probably a better fit, or dms</span></div><div class="line" id="014959"><span class="nick" style="color:#8dd3c7"><a href="#014959" label="[01:49:59]">&lt;lrvick&gt;</a></span><span class="message">though most of my team is in #!</span></div><div class="line" id="015047"><span class="nick" style="color:#8dd3c7"><a href="#015047" label="[01:50:47]">&lt;lrvick&gt;</a></span><span class="message">I am optimizing for maximum security first, then as much compatibility as I can with existing solutions second.</span></div><div class="line" id="015053"><span class="nick" style="color:#8dd3c7"><a href="#015053" label="[01:50:53]">&lt;lrvick&gt;</a></span><span class="message">but if I can have both, great</span></div><div class="line" id="015102"><span class="nick" style="color:#389600"><a href="#015102" label="[01:51:02]">&lt;Foxboron&gt;</a></span><span class="message">#! doesn't seem to be a channel on libera :p but that is a weird channel name</span></div><div class="line" id="015141"><span class="nick" style="color:#8dd3c7"><a href="#015141" label="[01:51:41]">&lt;lrvick&gt;</a></span><span class="message">oh sorry we don't bridge to librera anymore, though we do own that on libera</span></div><div class="line" id="015147"><span class="nick" style="color:#8dd3c7"><a href="#015147" label="[01:51:47]">&lt;lrvick&gt;</a></span><span class="message">#! on irc.hashbang.sh</span></div><div class="line" id="015150"><span class="nick" style="color:#389600"><a href="#015150" label="[01:51:50]">&lt;Foxboron&gt;</a></span><span class="message">ahh</span></div><div class="line" id="015203"><span class="nick" style="color:#8dd3c7"><a href="#015203" label="[01:52:03]">&lt;lrvick&gt;</a></span><span class="message">or #!:matrix.org</span></div><div class="line" id="015242"><span class="nick" style="color:#8dd3c7"><a href="#015242" label="[01:52:42]">&lt;lrvick&gt;</a></span><span class="message">(anyone else that cares about these topics please join in. I assume there is some overlap)</span></div><div class="line" id="015314"><span class="nick" style="color:#8dd3c7"><a href="#015314" label="[01:53:14]">&lt;lrvick&gt;</a></span><span class="message">bootstrapping and being able to form trust that a sufficent number of trusted parties did it for you, are tightly related imo</span></div><div class="line" id="015322"><span class="nick" style="color:#389600"><a href="#015322" label="[01:53:22]">&lt;Foxboron&gt;</a></span><span class="message">Well, and #reproduciblebuilds on oftc :)</span></div><div class="line" id="015329"><span class="nick" style="color:#389600"><a href="#015329" label="[01:53:29]">&lt;Foxboron&gt;</a></span><span class="message">#reproducible-builds</span></div><div class="line" id="015341"><span class="nick" style="color:#8dd3c7"><a href="#015341" label="[01:53:41]">&lt;lrvick&gt;</a></span><span class="message">yeah I am there too</span></div><div class="line" id="015343"><span class="nick" style="color:#8dd3c7"><a href="#015343" label="[01:53:43]">&lt;lrvick&gt;</a></span><span class="message">I whine when I have repo issues</span></div><div class="line" id="015351"><span class="nick" style="color:#8dd3c7"><a href="#015351" label="[01:53:51]">&lt;lrvick&gt;</a></span><span class="message">though most/all are resolved now</span></div><div class="line" id="015410"><span class="nick" style="color:#389600"><a href="#015410" label="[01:54:10]">&lt;Foxboron&gt;</a></span><span class="message">ahh, right</span></div><div class="line" id="015505"><span class="nick" style="color:#8dd3c7"><a href="#015505" label="[01:55:05]">&lt;lrvick&gt;</a></span><span class="message">Currently trying to get reproducible digests out of docker 25, which regressed &gt;.&gt;</span></div><div class="line" id="015704"><span class="nick" style="color:#389600"><a href="#015704" label="[01:57:04]">&lt;Foxboron&gt;</a></span><span class="message">Regressions at different parts of the stack is why working reprobuilds issue is not very fun :p</span></div><div class="line" id="015739"><span class="nick" style="color:#389600"><a href="#015739" label="[01:57:39]">&lt;Foxboron&gt;</a></span><span class="message">But I'll bounce and sleep. Nice discussing with you</span></div><div class="line" id="015749"><span class="nick" style="color:#8dd3c7"><a href="#015749" label="[01:57:49]">&lt;lrvick&gt;</a></span><span class="message">I collect puzzles. This is a very large one</span></div><div class="line" id="015809"><span class="nick" style="color:#8dd3c7"><a href="#015809" label="[01:58:09]">&lt;lrvick&gt;</a></span><span class="message">sure. Would love to pick your brain more on this another time. hit me up whenever.</span></div><div class="line" id="015816"><span class="nick" style="color:#389600"><a href="#015816" label="[01:58:16]">&lt;Foxboron&gt;</a></span><span class="message">Sure, no worries :)</span></div><div class="line" id="030450"><span class="nick" style="color:#6b8072"><a href="#030450" label="[03:04:50]">&lt;fossy&gt;</a></span><span class="message">lrvick: i feel like i should point this out to you, even if you have already figured it out; the output of &amp; process of live-bootstrap does use versions of packages known to include CVEs ;)</span></div><div class="line" id="044057"><span class="nick" style="color:#8dd3c7"><a href="#044057" label="[04:40:57]">&lt;lrvick&gt;</a></span><span class="message">CVEs are fine that far deep in the stack, since I am a cross compile and 3 versions of GCC away by the time I build my actual packages</span></div><div class="line" id="044201"><span class="nick" style="color:#8dd3c7"><a href="#044201" label="[04:42:01]">&lt;lrvick&gt;</a></span><span class="message">The only class of CVEs that would concern me in the live-bootstrap stack would be those that could somehow persist through a cross compile to a totally new clean filesystem</span></div><div class="line" id="044315"><span class="nick" style="color:#8dd3c7"><a href="#044315" label="[04:43:15]">&lt;lrvick&gt;</a></span><span class="message">Something that could do that would have to be an actual and very intentionally designed trusting trust attack in early versions of GCC that I would -hope- someone would have spotted by now</span></div><div class="line" id="044412"><span class="nick" style="color:#8dd3c7"><a href="#044412" label="[04:44:12]">&lt;lrvick&gt;</a></span><span class="message">But there is just as much risk of that in a modern version of GCC. More even, since it is a lot more code today</span></div><div class="line" id="044612"><span class="nick" style="color:#8dd3c7"><a href="#044612" label="[04:46:12]">&lt;lrvick&gt;</a></span><span class="message">If anyone feels there is a hole in this reasoning though, please do poke in it.</span></div><div class="line" id="044824"><span class="nick" style="color:#8dd3c7"><a href="#044824" label="[04:48:24]">&lt;lrvick&gt;</a></span><span class="message">I don't carry anything from live-bootstrap forward past &quot;stage2&quot; in my stack</span></div><div class="line" id="044918"><span class="nick" style="color:#8dd3c7"><a href="#044918" label="[04:49:18]">&lt;lrvick&gt;</a></span><span class="message">Even my stage3 should be able to be left to bit rot until it can no longer build modern versions of GCC that I actually use to build my final packages</span></div><div class="line" id="053332"><span class="nick" style="color:#6b8072"><a href="#053332" label="[05:33:32]">&lt;fossy&gt;</a></span><span class="message">that checks out to me</span></div><div class="line" id="053350"><span class="nick" style="color:#6b8072"><a href="#053350" label="[05:33:50]">&lt;fossy&gt;</a></span><span class="message">that's my opinion too, i don't see any reason why CVEs should affect it. just wanted to make sure you knew though :)</span></div><div class="line" id="055326"><span class="nick" style="color:#8dd3c7"><a href="#055326" label="[05:53:26]">&lt;lrvick&gt;</a></span><span class="message">It is a question taht will come up. I should add a faq</span></div><div class="line" id="122812"><span class="nick" style="color:#6b8072"><a href="#122812" label="[12:28:12]">&lt;fossy&gt;</a></span><span class="message">been playing for the last two days with what is actually possible with live-bootstrap at the moment.</span></div><div class="line" id="122829"><span class="nick" style="color:#6b8072"><a href="#122829" label="[12:28:29]">&lt;fossy&gt;</a></span><span class="message">answer is &quot;actually, a lot if you go via lfs&quot;</span></div><div class="line" id="122912"><span class="nick" style="color:#6b8072"><a href="#122912" label="[12:29:12]">&lt;fossy&gt;</a></span><span class="message">with an additional 12 small-medium sized packages, one can run jhalfs (automated Linux from Scratch &amp; Beyond LFS)</span></div><div class="line" id="122931"><span class="nick" style="color:#6b8072"><a href="#122931" label="[12:29:31]">&lt;fossy&gt;</a></span><span class="message">and now bootstrap-prefix.sh works in that LFS environment without modification</span></div><div class="line" id="122943"><span class="nick" style="color:#6b8072"><a href="#122943" label="[12:29:43]">&lt;fossy&gt;</a></span><span class="message">gonna try and make a stage3 now using catalyst</span></div><div class="line" id="122958"><span class="nick" style="color:#6b8072"><a href="#122958" label="[12:29:58]">&lt;fossy&gt;</a></span><span class="message">if that works first bootstrapped gentoo stage3 ^-^</span></div><div class="line" id="123353"><span class="nick" style="color:#8dd3c7"><a href="#123353" label="[12:33:53]">&lt;lrvick&gt;</a></span><span class="message">Nice. Given the path I already went down in stagex, I expect that should be no problem</span></div><div class="line" id="123437"><span class="nick" style="color:#8dd3c7"><a href="#123437" label="[12:34:37]">&lt;lrvick&gt;</a></span><span class="message">I have a couple buildroot projects I am going to want to bootstrap soon too.</span></div><div class="line" id="123603"><span class="nick" style="color:#8dd3c7"><a href="#123603" label="[12:36:03]">&lt;lrvick&gt;</a></span><span class="message">In other news: docker run -it stagex/stage0</span></div><div class="line" id="123638"><span class="nick" style="color:#8dd3c7"><a href="#123638" label="[12:36:38]">&lt;lrvick&gt;</a></span><span class="message">and you can reproduce the container and digest from <a rel="nofollow" href="https://git.distrust.co/public/stagex">https://git.distrust.co/public/stagex</a> </span></div><div class="line" id="123658"><span class="nick" style="color:#8dd3c7"><a href="#123658" label="[12:36:58]">&lt;lrvick&gt;</a></span><span class="message">rest should follow soon. Stage1 is next (live-bootstrap)</span></div><div class="line" id="125055"><span class="nick" style="color:#80b1d3"><a href="#125055" label="[12:50:55]">&lt;oriansj&gt;</a></span><span class="message">fossy: nice</span></div><div class="line" id="125405"><span class="nick" style="color:#80b1d3"><a href="#125405" label="[12:54:05]">&lt;oriansj&gt;</a></span><span class="message">lrvick: yeah, trust is a never ending game of trying to improve and knowing that failure is possible and knowing the best move is to make failure be as obvious and open as possible.  I am glad that you have been making progress on the problem you wanted to solve.</span></div><div class="line" id="125754"><span class="nick" style="color:#6d2462"><a href="#125754" label="[12:57:54]">&lt;muurkha&gt;</a></span><span class="message">fossy: that's exciting!</span></div><div class="line" id="125817"><span class="nick" style="color:#6d2462"><a href="#125817" label="[12:58:17]">&lt;muurkha&gt;</a></span><span class="message">lrvick: that's also exciting!  Docker is a huge increment of convenience</span></div><div class="line" id="130127"><span class="nick" style="color:#8dd3c7"><a href="#130127" label="[13:01:27]">&lt;lrvick&gt;</a></span><span class="message">Most production software today is built with containers. Normally &quot;from alpine&quot; or &quot;from go&quot; or &quot;from python&quot; (which are based on alpine) etc. Billions of dollars in value resting on the shoulders of a few people who push those non-reproducible containers that would never want that responsibility if they understood the risk.</span></div><div class="line" id="130234"><span class="nick" style="color:#8dd3c7"><a href="#130234" label="[13:02:34]">&lt;lrvick&gt;</a></span><span class="message">This stage0s/live-bootstrap anchored set at least takes the target off any single person, as this set is a drop in replacement for the alpine defaults.</span></div><div class="line" id="130323"><span class="nick" style="color:#6d2462"><a href="#130323" label="[13:03:23]">&lt;muurkha&gt;</a></span><span class="message">wow, I didn't realize it was that ambitious!</span></div><div class="line" id="130345"><span class="nick" style="color:#6d2462"><a href="#130345" label="[13:03:45]">&lt;muurkha&gt;</a></span><span class="message">I thought you were just using Docker to make it more convenient to get the existing stage0 flow working</span></div><div class="line" id="130402"><span class="nick" style="color:#6d2462"><a href="#130402" label="[13:04:02]">&lt;muurkha&gt;</a></span><span class="message">that's great news!</span></div><div class="line" id="130421"><span class="nick" style="color:#8dd3c7"><a href="#130421" label="[13:04:21]">&lt;lrvick&gt;</a></span><span class="message">No, I needed a deterministic distro with no trust in any single person, and that rabbit hole took me all the way -backwards- until I hit stage0</span></div><div class="line" id="130450"><span class="nick" style="color:#80b1d3"><a href="#130450" label="[13:04:50]">&lt;oriansj&gt;</a></span><span class="message">and builder-hex0</span></div><div class="line" id="130510"><span class="nick" style="color:#80b1d3"><a href="#130510" label="[13:05:10]">&lt;oriansj&gt;</a></span><span class="message">which takes the kernel out of the trusted root too</span></div><div class="line" id="130542"><span class="nick" style="color:#8dd3c7"><a href="#130542" label="[13:05:42]">&lt;lrvick&gt;</a></span><span class="message">I won't be able to do that step in a container, but I can hardcode the expected hash, and verify my 3 distro builds match it.</span></div><div class="line" id="130606"><span class="nick" style="color:#8dd3c7"><a href="#130606" label="[13:06:06]">&lt;lrvick&gt;</a></span><span class="message">and then in turn if you guys are publishing the same hash from live-booted kernelless setups</span></div><div class="line" id="130611"><span class="nick" style="color:#8dd3c7"><a href="#130611" label="[13:06:11]">&lt;lrvick&gt;</a></span><span class="message">then it all tracks</span></div><div class="line" id="130644"><span class="nick" style="color:#80b1d3"><a href="#130644" label="[13:06:44]">&lt;oriansj&gt;</a></span><span class="message">true, one would need a full vm or bare metal but the checksums always should be identicial regardless of the host with M2-Planet+M2libc</span></div><div class="line" id="130654"><span class="nick" style="color:#8dd3c7"><a href="#130654" label="[13:06:54]">&lt;lrvick&gt;</a></span><span class="message">Ideally a few people that are just building seeds can sign those, and I can import those signatures as yet another trust point in my stage0 dockerfile</span></div><div class="line" id="130706"><span class="nick" style="color:#6d2462"><a href="#130706" label="[13:07:06]">&lt;muurkha&gt;</a></span><span class="message">oriansj: except when there are bugs ;)</span></div><div class="line" id="130737"><span class="nick" style="color:#80b1d3"><a href="#130737" label="[13:07:37]">&lt;oriansj&gt;</a></span><span class="message">muurkha: fair enough, but I actively will fix those when I learn about them.</span></div><div class="line" id="130851"><span class="nick" style="color:#8dd3c7"><a href="#130851" label="[13:08:51]">&lt;lrvick&gt;</a></span><span class="message">Maybe one of my &quot;test builds&quot; in my stage0 setup can be running builds in qemu. As many tests as I  can reasonably do in place, why not.</span></div><div class="line" id="130904"><span class="nick" style="color:#80b1d3"><a href="#130904" label="[13:09:04]">&lt;oriansj&gt;</a></span><span class="message">lrvick: well the reason we broke out bootstrap-seeds into a separate git repo is to allow anyone to change out the root binaries easily but if they conform to the spec, then the resulting final binaries will always be identical</span></div><div class="line" id="130905"><span class="nick" style="color:#8dd3c7"><a href="#130905" label="[13:09:05]">&lt;lrvick&gt;</a></span><span class="message">makes it that much easier for an auditor to say &quot;this is overkill&quot;. goood</span></div><div class="line" id="131016"><span class="nick" style="color:#8dd3c7"><a href="#131016" label="[13:10:16]">&lt;lrvick&gt;</a></span><span class="message">Yeah and that is awesome. Ideally I later break out stage0 into stage0 and seed containers, and allow swapping in alternative seed implmentations</span></div><div class="line" id="131022"><span class="nick" style="color:#8dd3c7"><a href="#131022" label="[13:10:22]">&lt;lrvick&gt;</a></span><span class="message">(once they exist)</span></div><div class="line" id="131044"><span class="nick" style="color:#8dd3c7"><a href="#131044" label="[13:10:44]">&lt;lrvick&gt;</a></span><span class="message">That's a big reasons I chose OCI as well. No single software stack</span></div><div class="line" id="131113"><span class="nick" style="color:#8dd3c7"><a href="#131113" label="[13:11:13]">&lt;lrvick&gt;</a></span><span class="message">I am adding support for podman next, then buildah, kaniko etc</span></div><div class="line" id="131119"><span class="nick" style="color:#80b1d3"><a href="#131119" label="[13:11:19]">&lt;oriansj&gt;</a></span><span class="message">nice</span></div><div class="line" id="131148"><span class="nick" style="color:#8dd3c7"><a href="#131148" label="[13:11:48]">&lt;lrvick&gt;</a></span><span class="message">so people could use different seed implementations, and different oOCI implementations, and still get the same results from any combination</span></div><div class="line" id="131207"><span class="nick" style="color:#80b1d3"><a href="#131207" label="[13:12:07]">&lt;oriansj&gt;</a></span><span class="message">sounds like you are heading in the direction where declarative package composition will probably end up being helpful</span></div><div class="line" id="131243"><span class="nick" style="color:#8dd3c7"><a href="#131243" label="[13:12:43]">&lt;lrvick&gt;</a></span><span class="message">Dockerfiles are temporary. I will likely end up generating them from something templated</span></div><div class="line" id="131322"><span class="nick" style="color:#8dd3c7"><a href="#131322" label="[13:13:22]">&lt;lrvick&gt;</a></span><span class="message">gotta get my baseline first before I get fancy though</span></div><div class="line" id="131330"><span class="nick" style="color:#80b1d3"><a href="#131330" label="[13:13:30]">&lt;oriansj&gt;</a></span><span class="message">fair enough</span></div><div class="line" id="131417"><span class="nick" style="color:#8dd3c7"><a href="#131417" label="[13:14:17]">&lt;lrvick&gt;</a></span><span class="message">OCI builders can take bash scripts as input, json, all sorts of options</span></div><div class="line" id="131428"><span class="nick" style="color:#8dd3c7"><a href="#131428" label="[13:14:28]">&lt;lrvick&gt;</a></span><span class="message">just needs to follow the spec</span></div><div class="line" id="131503"><span class="nick" style="color:#8dd3c7"><a href="#131503" label="[13:15:03]">&lt;lrvick&gt;</a></span><span class="message">buildroot generates OCI archives with just a bash script</span></div><div class="line" id="131505"><span class="nick" style="color:#80b1d3"><a href="#131505" label="[13:15:05]">&lt;oriansj&gt;</a></span><span class="message">which should map relatively cleanly from a list of dependencies and basic build information.</span></div><div class="line" id="131547"><span class="nick" style="color:#8dd3c7"><a href="#131547" label="[13:15:47]">&lt;lrvick&gt;</a></span><span class="message">yeah atm dependency management is just make. I would love something better, but it has to run with tools most people already have installed</span></div><div class="line" id="131551"><span class="nick" style="color:#8dd3c7"><a href="#131551" label="[13:15:51]">&lt;lrvick&gt;</a></span><span class="message">python might be an option.</span></div><div class="line" id="131609"><span class="nick" style="color:#80b1d3"><a href="#131609" label="[13:16:09]">&lt;oriansj&gt;</a></span><span class="message">lrvick: have you played with guix or nix yet?</span></div><div class="line" id="131639"><span class="nick" style="color:#8dd3c7"><a href="#131639" label="[13:16:39]">&lt;lrvick&gt;</a></span><span class="message">Yes, but those toolchains are very large and hard to audit or reason about so i avoided them.</span></div><div class="line" id="131728"><span class="nick" style="color:#8dd3c7"><a href="#131728" label="[13:17:28]">&lt;lrvick&gt;</a></span><span class="message">Like I would have to compile all those tools on every endpoint, and then how do I compile those tools?</span></div><div class="line" id="131732"><span class="nick" style="color:#8dd3c7"><a href="#131732" label="[13:17:32]">&lt;lrvick&gt;</a></span><span class="message">more chicken/egg</span></div><div class="line" id="131747"><span class="nick" style="color:#80b1d3"><a href="#131747" label="[13:17:47]">&lt;oriansj&gt;</a></span><span class="message">fair perspective, I found I needed to fight the default heavy approach it usually opted for</span></div><div class="line" id="132000"><span class="nick" style="color:#8dd3c7"><a href="#132000" label="[13:20:00]">&lt;lrvick&gt;</a></span><span class="message">I did consider maybe I could use dockerfiles and make only for bootstrap, then from there I can build any tools that digest and dynamically genrate all the other OCI build inputs from some simple yaml files with variables or something.</span></div><div class="line" id="132116"><span class="nick" style="color:#8dd3c7"><a href="#132116" label="[13:21:16]">&lt;lrvick&gt;</a></span><span class="message">but that early all I have access to is gcc and perl, and I would rather write make than either c or perl</span></div><div class="line" id="132145"><span class="nick" style="color:#8dd3c7"><a href="#132145" label="[13:21:45]">&lt;lrvick&gt;</a></span><span class="message">though I suppose I could compile some basic go with gcc...</span></div><div class="line" id="132240"><span class="nick" style="color:#8dd3c7"><a href="#132240" label="[13:22:40]">&lt;lrvick&gt;</a></span><span class="message">Anyway. Maybe I get away with a python script. Big refactor that results in no hash changes but reduces the total LOC will be fine</span></div><div class="line" id="132245"><span class="nick" style="color:#80b1d3"><a href="#132245" label="[13:22:45]">&lt;oriansj&gt;</a></span><span class="message">well from live-bootstrap there is a path to rust if one wanted (via mrustc and gcc)</span></div><div class="line" id="132246"><span class="nick" style="color:#6b8072"><a href="#132246" label="[13:22:46]">&lt;fossy&gt;</a></span><span class="message">nix always has me super lost when i use it. for basic things it's incredibly nice and intuitive, but then i'll try to do something non-standard and run into a block. i'm also not a huge fan of the disparity between the community and the technical specifications; particularly, that flakes are still &quot;experimental&quot; but the community encourages people to use them in their main form, and it is</span></div><div class="line" id="132249"><span class="nick" style="color:#6b8072"><a href="#132249" label="[13:22:49]">&lt;fossy&gt;</a></span><span class="message">regularly stated that &quot;because they are used so widespread we shouldn't introduce breaking changes&quot;</span></div><div class="line" id="132319"><span class="nick" style="color:#6b8072"><a href="#132319" label="[13:23:19]">&lt;fossy&gt;</a></span><span class="message">&quot;On the other hand side, a lot of necessary changes can’t be done, as flake became a quasi standard with too much adoption. We are in a situation where breaking changes are a necessity, but impossible, as consumers treat flakes production ready&quot;</span></div><div class="line" id="132343"><span class="nick" style="color:#8dd3c7"><a href="#132343" label="[13:23:43]">&lt;lrvick&gt;</a></span><span class="message">I am the one that tried to get nix to adopt signing, and was loudly rejected. Signing would slow down drive by contributors... they saw that as a bad thing.</span></div><div class="line" id="132344"><span class="nick" style="color:#6b8072"><a href="#132344" label="[13:23:44]">&lt;fossy&gt;</a></span><span class="message">i saw this quote, that had me -so- lost, something has gone wrong process-wise for that to happen</span></div><div class="line" id="132352"><span class="nick" style="color:#8dd3c7"><a href="#132352" label="[13:23:52]">&lt;lrvick&gt;</a></span><span class="message">I kind of gave up on nix after taht</span></div><div class="line" id="132417"><span class="nick" style="color:#80b1d3"><a href="#132417" label="[13:24:17]">&lt;oriansj&gt;</a></span><span class="message">fossy: I have always felt that we needed an explicit  guix with lessons learned from gentoo</span></div><div class="line" id="132458"><span class="nick" style="color:#8dd3c7"><a href="#132458" label="[13:24:58]">&lt;lrvick&gt;</a></span><span class="message">guix is much better than nix in so many ways, most nosably of which they at least single-sign things.</span></div><div class="line" id="132511"><span class="nick" style="color:#8dd3c7"><a href="#132511" label="[13:25:11]">&lt;lrvick&gt;</a></span><span class="message">but scheme is even worse to write than dockerfiles</span></div><div class="line" id="132545"><span class="nick" style="color:#80b1d3"><a href="#132545" label="[13:25:45]">&lt;oriansj&gt;</a></span><span class="message">where adding something new can be as easy as just reading how you already add existing things and just copy with a few tweaks.</span></div><div class="line" id="132612"><span class="nick" style="color:#8dd3c7"><a href="#132612" label="[13:26:12]">&lt;lrvick&gt;</a></span><span class="message">I could just write bash scripts and inject them into a universal template dockerfile to do that..</span></div><div class="line" id="132636"><span class="nick" style="color:#8dd3c7"><a href="#132636" label="[13:26:36]">&lt;lrvick&gt;</a></span><span class="message">need to think on it. has to be something with the tools I already hae in stage3, that does not involve me trying to write c</span></div><div class="line" id="132655"><span class="nick" style="color:#8dd3c7"><a href="#132655" label="[13:26:55]">&lt;lrvick&gt;</a></span><span class="message">I am convinced humans should no longer write c</span></div><div class="line" id="132657"><span class="nick" style="color:#6b8072"><a href="#132657" label="[13:26:57]">&lt;fossy&gt;</a></span><span class="message">i've been using Void Linux for a long time because the build system is incredibly easy to understand and use, even though it is flawed, although i think I will be migrating to gentoo now that they have official binary repositories, because of a stronger governance system</span></div><div class="line" id="132710"><span class="nick" style="color:#80b1d3"><a href="#132710" label="[13:27:10]">&lt;oriansj&gt;</a></span><span class="message">lrvick: well python and a great many other languages are not that far from gcc</span></div><div class="line" id="132719"><span class="nick" style="color:#6b8072"><a href="#132719" label="[13:27:19]">&lt;fossy&gt;</a></span><span class="message">&amp; easier to make changes, and ebuilds are comprehensible enough, although not as good as alpine or void</span></div><div class="line" id="132800"><span class="nick" style="color:#6d2462"><a href="#132800" label="[13:28:00]">&lt;muurkha&gt;</a></span><span class="message">I like writing C, sorry</span></div><div class="line" id="132813"><span class="nick" style="color:#8dd3c7"><a href="#132813" label="[13:28:13]">&lt;lrvick&gt;</a></span><span class="message">oriansj: Yeah. I -could- add a bootstrap python to my stage3, then I could get a lot done with just the standard library. I don't want any deps people have to think about.</span></div><div class="line" id="132836"><span class="nick" style="color:#8dd3c7"><a href="#132836" label="[13:28:36]">&lt;lrvick&gt;</a></span><span class="message">I will only make changes to the setup if it means less LOC someone has to read in total.</span></div><div class="line" id="132847"><span class="nick" style="color:#6d2462"><a href="#132847" label="[13:28:47]">&lt;muurkha&gt;</a></span><span class="message">writing C is rarely a practical thing to do anymore</span></div><div class="line" id="132902"><span class="nick" style="color:#8dd3c7"><a href="#132902" label="[13:29:02]">&lt;lrvick&gt;</a></span><span class="message">I want to optimize for auditabiltiy over developer friendlyness, but if I an have both, great</span></div><div class="line" id="132903"><span class="nick" style="color:#6d2462"><a href="#132903" label="[13:29:03]">&lt;muurkha&gt;</a></span><span class="message">speaking of Python, you know what would be super useful?  a self-contained Python 2</span></div><div class="line" id="132927"><span class="nick" style="color:#80b1d3"><a href="#132927" label="[13:29:27]">&lt;oriansj&gt;</a></span><span class="message">muurkha: well C has one social advantage over scheme: the language is largely fixed and people can read and understand each other's code. The same can't be said about scheme when reader macros are introduced.</span></div><div class="line" id="133003"><span class="nick" style="color:#6d2462"><a href="#133003" label="[13:30:03]">&lt;muurkha&gt;</a></span><span class="message">because for example Debian has dropped its Python 2 packages, so on this new laptop I have to port my old Python programs to Python 3 every time I want to run one</span></div><div class="line" id="133014"><span class="nick" style="color:#8dd3c7"><a href="#133014" label="[13:30:14]">&lt;lrvick&gt;</a></span><span class="message">Yeah... No magic. I like rust but to audit anything I end up unwrapping all macros into real code</span></div><div class="line" id="133025"><span class="nick" style="color:#6d2462"><a href="#133025" label="[13:30:25]">&lt;muurkha&gt;</a></span><span class="message">Debian's PyPy source package actually includes a complete copy of CPython 2 now because they need it to bootstrap PyPy</span></div><div class="line" id="133043"><span class="nick" style="color:#8dd3c7"><a href="#133043" label="[13:30:43]">&lt;lrvick&gt;</a></span><span class="message">you could probably build a static python2 binary...</span></div><div class="line" id="133056"><span class="nick" style="color:#6d2462"><a href="#133056" label="[13:30:56]">&lt;muurkha&gt;</a></span><span class="message">yes, but I'd like to be able to *keep* building it</span></div><div class="line" id="133102"><span class="nick" style="color:#6d2462"><a href="#133102" label="[13:31:02]">&lt;muurkha&gt;</a></span><span class="message">and I bet I'm not the only ne</span></div><div class="line" id="133103"><span class="nick" style="color:#6d2462"><a href="#133103" label="[13:31:03]">&lt;muurkha&gt;</a></span><span class="message">*one</span></div><div class="line" id="133144"><span class="nick" style="color:#8dd3c7"><a href="#133144" label="[13:31:44]">&lt;lrvick&gt;</a></span><span class="message">to be able to keep building it make a Dockerfile that spits out a python2 static binary</span></div><div class="line" id="133152"><span class="nick" style="color:#8dd3c7"><a href="#133152" label="[13:31:52]">&lt;lrvick&gt;</a></span><span class="message">add it to tools in stagex ^_^</span></div><div class="line" id="133159"><span class="nick" style="color:#6d2462"><a href="#133159" label="[13:31:59]">&lt;muurkha&gt;</a></span><span class="message">oriansj: C has a lot of advantages over Scheme, but I don't think I would have ever mentioned a more statically tractable syntax among them.  Scheme doesn't even *have* reader macros in any of the standard versions up to R⁵RS, does it?  did they get added in R⁶RS?</span></div><div class="line" id="133317"><span class="nick" style="color:#6d2462"><a href="#133317" label="[13:33:17]">&lt;muurkha&gt;</a></span><span class="message">as of <a rel="nofollow" href="https://stackoverflow.com/questions/19994651/read-macros-in-scheme">https://stackoverflow.com/questions/19994651/read-macros-in-scheme</a>  apparently Racket and Chicken had two incompatible reader macro systems, and SRFI-10 has anotehr one</span></div><div class="line" id="133331"><span class="nick" style="color:#80b1d3"><a href="#133331" label="[13:33:31]">&lt;oriansj&gt;</a></span><span class="message">don't know when exactly has been added but I know I have seen them in scheme code for years now.</span></div><div class="line" id="133442"><span class="nick" style="color:#80b1d3"><a href="#133442" label="[13:34:42]">&lt;oriansj&gt;</a></span><span class="message">but honestly; I don't like macros in languages higher than assembly.</span></div><div class="line" id="133530"><span class="nick" style="color:#80b1d3"><a href="#133530" label="[13:35:30]">&lt;oriansj&gt;</a></span><span class="message">like just add a CONSTANT keyword and write proper functions if you need to do something;</span></div><div class="line" id="133546"><span class="nick" style="color:#6d2462"><a href="#133546" label="[13:35:46]">&lt;muurkha&gt;</a></span><span class="message"> <a rel="nofollow" href="http://scheme-reports.org/mail/scheme-reports/msg00826.html">http://scheme-reports.org/mail/scheme-reports/msg00826.html</a>  strongly implies that read macros didn't exist in R⁶RS, and they surely aren't in R⁷RS-small, and R⁷RS-large hasn't been finished and probably never will be</span></div><div class="line" id="133603"><span class="nick" style="color:#6d2462"><a href="#133603" label="[13:36:03]">&lt;muurkha&gt;</a></span><span class="message">so I think your implication that Scheme has read macros is mistaken; Scheme does not and never will have read macros</span></div><div class="line" id="133622"><span class="nick" style="color:#6d2462"><a href="#133622" label="[13:36:22]">&lt;muurkha&gt;</a></span><span class="message">(i.e. macros that run in the reader)</span></div><div class="line" id="133745"><span class="nick" style="color:#6b8072"><a href="#133745" label="[13:37:45]">&lt;fossy&gt;</a></span><span class="message">lrvick: when you say auditability, what is that the auditability of? the entire source code of the whole system?</span></div><div class="line" id="133746"><span class="nick" style="color:#80b1d3"><a href="#133746" label="[13:37:46]">&lt;oriansj&gt;</a></span><span class="message">yet wisp is a thing that runs on schemes</span></div><div class="line" id="134131"><span class="nick" style="color:#80b1d3"><a href="#134131" label="[13:41:31]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.draketo.de/software/wisp">https://www.draketo.de/software/wisp</a> </span></div><div class="line" id="134217"><span class="nick" style="color:#6d2462"><a href="#134217" label="[13:42:17]">&lt;muurkha&gt;</a></span><span class="message">it appears that wisp runs on Guile and (somewhat) Racket, not Schemes in general</span></div><div class="line" id="134450"><span class="nick" style="color:#80b1d3"><a href="#134450" label="[13:44:50]">&lt;oriansj&gt;</a></span><span class="message">completely fair point</span></div><div class="line" id="134454"><span class="nick" style="color:#234e69"><a href="#134454" label="[13:44:54]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; fossy: Yeah. Like right now my entire repo for the whole distro, is under 5k lines</span></div><div class="line" id="134505"><span class="nick" style="color:#234e69"><a href="#134505" label="[13:45:05]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; so it is easy for someone to verify I didn't slip anything nasty in there</span></div><div class="line" id="134521"><span class="nick" style="color:#234e69"><a href="#134521" label="[13:45:21]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; the upstream author may have, but it is easy for someone to assert I did not in a short time</span></div><div class="line" id="134623"><span class="nick" style="color:#234e69"><a href="#134623" label="[13:46:23]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; As soon as I introduce a fancy tool that costs thousands of lines to make the developer experience better, the auditor now has to review those extra thousands of lines, and any changes to them, forever</span></div><div class="line" id="134657"><span class="nick" style="color:#6d2462"><a href="#134657" label="[13:46:57]">&lt;muurkha&gt;</a></span><span class="message">yeah, seems reasonable</span></div><div class="line" id="134729"><span class="nick" style="color:#234e69"><a href="#134729" label="[13:47:29]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; anything for which multiple implementations exist of that get the same results, like docker|kaniko|podman|buildah</span></div><div class="line" id="134741"><span class="nick" style="color:#234e69"><a href="#134741" label="[13:47:41]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; then I don't have to audit those individually, so long as they all agree</span></div><div class="line" id="134747"><span class="nick" style="color:#234e69"><a href="#134747" label="[13:47:47]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; I trust that they don't trust each other</span></div><div class="line" id="134829"><span class="nick" style="color:#80b1d3"><a href="#134829" label="[13:48:29]">&lt;oriansj&gt;</a></span><span class="message">well what if one leverages a very standard library (like sqlite) and you shove most of the complexity in database tables. Then they need only see: build tool@version and check a few hundred lines</span></div><div class="line" id="134853"><span class="nick" style="color:#234e69"><a href="#134853" label="[13:48:53]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; bringing in libraries is something that must be constantly audited, but if I can add a few functions that make the repo more DRY and reduce the total LOC that need to be in it, great</span></div><div class="line" id="134901"><span class="nick" style="color:#6d2462"><a href="#134901" label="[13:49:01]">&lt;muurkha&gt;</a></span><span class="message">the advantages I'd cite for C over Scheme are that its object types and object lifetimes are statically known, which can help with comprehension; that it's much easier to compile to efficient code; and that it's much easier to call as a library.  there are also a lot of disadvantages</span></div><div class="line" id="134907"><span class="nick" style="color:#234e69"><a href="#134907" label="[13:49:07]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; as a security engineer, my default is to remove more lines of code than I add.</span></div><div class="line" id="135029"><span class="nick" style="color:#80b1d3"><a href="#135029" label="[13:50:29]">&lt;oriansj&gt;</a></span><span class="message">as a security engineer for the State of Michigan (and technical lead of the CMS audit) I opt for ease of comprehension over any other metric.</span></div><div class="line" id="135100"><span class="nick" style="color:#80b1d3"><a href="#135100" label="[13:51:00]">&lt;oriansj&gt;</a></span><span class="message">a refactor that adds a dozen lines can make things much easier to reason about</span></div><div class="line" id="135114"><span class="nick" style="color:#234e69"><a href="#135114" label="[13:51:14]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; 100% in favor of that</span></div><div class="line" id="135130"><span class="nick" style="color:#234e69"><a href="#135130" label="[13:51:30]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; but if those dozen lines are adding 12 libraries, those are now in scope for auditing</span></div><div class="line" id="135137"><span class="nick" style="color:#234e69"><a href="#135137" label="[13:51:37]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; that is the balance I have to strike</span></div><div class="line" id="135203"><span class="nick" style="color:#234e69"><a href="#135203" label="[13:52:03]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; but I am sure the repo can be made much more DRY with a few template functions on the standard library of python or something.</span></div><div class="line" id="135225"><span class="nick" style="color:#80b1d3"><a href="#135225" label="[13:52:25]">&lt;oriansj&gt;</a></span><span class="message">well one doesn't need multiple versions of database libraries; a single standard version for each database backend usually works out nicely</span></div><div class="line" id="135226"><span class="nick" style="color:#234e69"><a href="#135226" label="[13:52:26]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; Dockerfiles may be verbose to write, but they are pretty easy to comprehend.</span></div><div class="line" id="135229"><span class="nick" style="color:#6d2462"><a href="#135229" label="[13:52:29]">&lt;muurkha&gt;</a></span><span class="message">yeah, I think in particular that adding static typing information is usually a good tradeoff which improves comprehensibility by more than it increases volume</span></div><div class="line" id="135335"><span class="nick" style="color:#234e69"><a href="#135335" label="[13:53:35]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; oriansj: to have every major language covered in stagex, I only need 30 packages in total, and the dependency chain is pretty light. What are you suggesting sqlite would buy me here?</span></div><div class="line" id="135338"><span class="nick" style="color:#234e69"><a href="#135338" label="[13:53:38]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; maybe I missed something</span></div><div class="line" id="135423"><span class="nick" style="color:#234e69"><a href="#135423" label="[13:54:23]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; the hardest thing to comprehend in the repo, IMO, is the main makefiles. Make is awful to reason about dependency tracking.</span></div><div class="line" id="135432"><span class="nick" style="color:#234e69"><a href="#135432" label="[13:54:32]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; I would like that to mostly go away first</span></div><div class="line" id="135455"><span class="nick" style="color:#234e69"><a href="#135455" label="[13:54:55]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; I do have &quot;make graph&quot; which generates a flowchart of the deps, which helps, but yeah</span></div><div class="line" id="135733"><span class="nick" style="color:#234e69"><a href="#135733" label="[13:57:33]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; Also as far as the dockerfiles themselves: <a rel="nofollow" href="https://git.distrust.co/public/stagex/src/branch/main/src/core/sed/Dockerfile">https://git.distrust.co/public/stagex/src/branch/main/src/core/sed/Dockerfile</a> </span></div><div class="line" id="135735"><span class="nick" style="color:#234e69"><a href="#135735" label="[13:57:35]">&lt;matrix_bridge&gt;</a></span><span class="message">I write dockerfiles every day so to me that is easy to read, but with some templating it could for sure be a lot leaner. like the wget/sha256sum could just be a bash function I inherit.</span></div><div class="line" id="135822"><span class="nick" style="color:#234e69"><a href="#135822" label="[13:58:22]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; Dockerfiles are also getting HEREDOC syntax in a few months so all the \ line terminations will go away</span></div><div class="line" id="140006"><span class="nick" style="color:#80b1d3"><a href="#140006" label="[14:00:06]">&lt;oriansj&gt;</a></span><span class="message">I am expressing a rather odd idea; builds should just be information trackable in a database and thus a trivial build tool could exist that just walks the dependencies in the database back to build anything.</span></div><div class="line" id="140053"><span class="nick" style="color:#234e69"><a href="#140053" label="[14:00:53]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; I think I got hung up on the sqlite bit, but in spirit I don't disagree</span></div><div class="line" id="140111"><span class="nick" style="color:#234e69"><a href="#140111" label="[14:01:11]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; the &quot;database&quot; in my mind would be single yaml file or something, read only</span></div><div class="line" id="140123"><span class="nick" style="color:#80b1d3"><a href="#140123" label="[14:01:23]">&lt;oriansj&gt;</a></span><span class="message">fair enough, sqlite is just a nice stand in for a simple database library in a pinch</span></div><div class="line" id="140127"><span class="nick" style="color:#234e69"><a href="#140127" label="[14:01:27]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; then I define what depends on what, what hashes, and what versions all there</span></div><div class="line" id="140149"><span class="nick" style="color:#80b1d3"><a href="#140149" label="[14:01:49]">&lt;oriansj&gt;</a></span><span class="message">indeed</span></div><div class="line" id="140151"><span class="nick" style="color:#234e69"><a href="#140151" label="[14:01:51]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; then a few functiions could parse that, and spit out a build order, and shove values into some dockerfile templates</span></div><div class="line" id="140152"><span class="nick" style="color:#6d2462"><a href="#140152" label="[14:01:52]">&lt;muurkha&gt;</a></span><span class="message">sqlite isn't really that simple though</span></div><div class="line" id="140201"><span class="nick" style="color:#234e69"><a href="#140201" label="[14:02:01]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; then in general no one will need to touch the dockerrfles</span></div><div class="line" id="140220"><span class="nick" style="color:#234e69"><a href="#140220" label="[14:02:20]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; I could just have one global template with a bunch of variables the python script shoves into it</span></div><div class="line" id="140254"><span class="nick" style="color:#234e69"><a href="#140254" label="[14:02:54]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; then someone that wants to bump versions of a few things opens one file, updates some hashes, commits, and runs &quot;make&quot;</span></div><div class="line" id="140302"><span class="nick" style="color:#6d2462"><a href="#140302" label="[14:03:02]">&lt;muurkha&gt;</a></span><span class="message">cloc reports that sqlite3-3.40.1 as shipped by Debian contains 698254 source lines of code</span></div><div class="line" id="140305"><span class="nick" style="color:#234e69"><a href="#140305" label="[14:03:05]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; might be a middle ground with only a small amount of code</span></div><div class="line" id="140411"><span class="nick" style="color:#234e69"><a href="#140411" label="[14:04:11]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; Yeah, -actually- bringing in sqlite for figuring out dependencies of &lt; 100 packages seems like a lot. Some dump loops over a textfile could get the job done.</span></div><div class="line" id="140419"><span class="nick" style="color:#234e69"><a href="#140419" label="[14:04:19]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; now, if I had 10k packages... that is a very different story</span></div><div class="line" id="140546"><span class="nick" style="color:#234e69"><a href="#140546" label="[14:05:46]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; it is a good thought excercise to say &quot;what common tools would make the best developer experience, and can we provide that same experience with fewer lines of code but worse (but acceptable) performance&quot;</span></div><div class="line" id="140549"><span class="nick" style="color:#80b1d3"><a href="#140549" label="[14:05:49]">&lt;oriansj&gt;</a></span><span class="message">entirely fair points</span></div><div class="line" id="140717"><span class="nick" style="color:#234e69"><a href="#140717" label="[14:07:17]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; <a rel="nofollow" href="https://stackoverflow.com/questions/11557241/python-sorting-a-dependency-list">https://stackoverflow.com/questions/11557241/python-sorting-a-dependency-list</a> </span></div><div class="line" id="140730"><span class="nick" style="color:#234e69"><a href="#140730" label="[14:07:30]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; I was thinking something like this. Just a topological sort using the standard library</span></div><div class="line" id="140745"><span class="nick" style="color:#234e69"><a href="#140745" label="[14:07:45]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; then the &quot;database&quot; is just a dumb text file</span></div><div class="line" id="140806"><span class="nick" style="color:#234e69"><a href="#140806" label="[14:08:06]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; and in doing so I can probably delete all the dockerfiles and cut the total code in the repo down, while also improving comprehension</span></div><div class="line" id="140808"><span class="nick" style="color:#234e69"><a href="#140808" label="[14:08:08]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; maybe</span></div><div class="line" id="140838"><span class="nick" style="color:#6d2462"><a href="#140838" label="[14:08:38]">&lt;muurkha&gt;</a></span><span class="message">Dockerfile familiarity may help with comprehension</span></div><div class="line" id="140915"><span class="nick" style="color:#234e69"><a href="#140915" label="[14:09:15]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; muurkha: but it sucks to write. So my thinking was, still have dockerfiles as the actual thing that is committed to the repo</span></div><div class="line" id="140925"><span class="nick" style="color:#234e69"><a href="#140925" label="[14:09:25]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; but have tools used only by developers, to generate those files</span></div><div class="line" id="140929"><span class="nick" style="color:#234e69"><a href="#140929" label="[14:09:29]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; and update them as needed</span></div><div class="line" id="141027"><span class="nick" style="color:#234e69"><a href="#141027" label="[14:10:27]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; like a function to bump all hashes/versions across the repo to latest would be nice. If the hashes and versions have a single file source of truth that could also be nice. I dunno. Will do some experiments</span></div><div class="line" id="141205"><span class="nick" style="color:#234e69"><a href="#141205" label="[14:12:05]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; I would like to believe my Dockerfiles are at least easier to read than the official upstream counterparts they are intended to replace... lol: <a rel="nofollow" href="https://github.com/nodejs/docker-node/blob/5ce4dae24d8af4283baa45226b4de1827f128de3/21/alpine3.18/Dockerfile">https://github.com/nodejs/docker-node/blob/5ce4dae24d8af4283baa45226b4de1827f128de3/21/alpine3.18/Dockerfile</a> </span></div><div class="line" id="141233"><span class="nick" style="color:#234e69"><a href="#141233" label="[14:12:33]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; at that point just write a bash script and ADD it</span></div><div class="line" id="141313"><span class="nick" style="color:#80b1d3"><a href="#141313" label="[14:13:13]">&lt;oriansj&gt;</a></span><span class="message">that is a very low bar to beat</span></div><div class="line" id="141339"><span class="nick" style="color:#80b1d3"><a href="#141339" label="[14:13:39]">&lt;oriansj&gt;</a></span><span class="message">and probably generated by a tool without a human looking at it</span></div><div class="line" id="141427"><span class="nick" style="color:#234e69"><a href="#141427" label="[14:14:27]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; Likely. Which is an argument for being very careful about getting too smart with generation. Have to make sure the final output files are still easy for humans to comprehend, to your point.</span></div><div class="line" id="141501"><span class="nick" style="color:#80b1d3"><a href="#141501" label="[14:15:01]">&lt;oriansj&gt;</a></span><span class="message">so I am guite sure you can do great things in improving that situation ^_^</span></div><div class="line" id="141617"><span class="nick" style="color:#234e69"><a href="#141617" label="[14:16:17]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; like that whole file is full of signature checking, and yet, &quot;from alpine&quot; which does not use signatures at all and is not reproducible. Most of the internet is running on these official containers. It has been this way for 10 years</span></div><div class="line" id="141623"><span class="nick" style="color:#234e69"><a href="#141623" label="[14:16:23]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; I thought surely someone else will do something about it eventually</span></div><div class="line" id="141629"><span class="nick" style="color:#234e69"><a href="#141629" label="[14:16:29]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; no one did, and adoption only grew</span></div><div class="line" id="141707"><span class="nick" style="color:#234e69"><a href="#141707" label="[14:17:07]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; at some point you convince yourself the situation will never get better if you don't do it yourself</span></div><div class="line" id="141714"><span class="nick" style="color:#234e69"><a href="#141714" label="[14:17:14]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; as with bootstrapping</span></div><div class="line" id="141715"><span class="nick" style="color:#234e69"><a href="#141715" label="[14:17:15]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; heh</span></div><div class="line" id="141828"><span class="nick" style="color:#234e69"><a href="#141828" label="[14:18:28]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; I specialize in supply chain attacks and have pulled them off in the wild many times in audits... easily. But I have had not good alternatives to recommend in the reports I give, so they are kind of pointless.</span></div><div class="line" id="141849"><span class="nick" style="color:#234e69"><a href="#141849" label="[14:18:49]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; now I can at least say &quot;this exists, but if you can find something even better, great. This just checks the boxes&quot;</span></div><div class="line" id="141909"><span class="nick" style="color:#234e69"><a href="#141909" label="[14:19:09]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; with most things I do, someone comes behind me and does it better in a year. Great. Then I can move on to something else! 😄</span></div><div class="line" id="142104"><span class="nick" style="color:#234e69"><a href="#142104" label="[14:21:04]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; make things modular so others can (like the seeds)</span></div><div class="line" id="142115"><span class="nick" style="color:#234e69"><a href="#142115" label="[14:21:15]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; I aspire to understand the seeds well enough to write my own implementation some day</span></div><div class="line" id="142324"><span class="nick" style="color:#234e69"><a href="#142324" label="[14:23:24]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; oh, it is 5 am again. I should sleep.</span></div><div class="line" id="142739"><span class="nick" style="color:#2e2a4a"><a href="#142739" label="[14:27:39]">&lt;stikonas&gt;</a></span><span class="message">fossy: probably some of the extra packages needed to bootstrap gentoo stage should go live-bootstrap anyway. We do need to get ncurses and readline working...</span></div><div class="line" id="143439"><span class="nick" style="color:#80b1d3"><a href="#143439" label="[14:34:39]">&lt;oriansj&gt;</a></span><span class="message">well fixing a bad situation is usually harder than pointing out that there is a problem.</span></div><div class="line" id="143622"><span class="nick" style="color:#80b1d3"><a href="#143622" label="[14:36:22]">&lt;oriansj&gt;</a></span><span class="message">and why it took years to get the bootstrap situation to where we are today.</span></div><div class="line" id="143817"><span class="nick" style="color:#80b1d3"><a href="#143817" label="[14:38:17]">&lt;oriansj&gt;</a></span><span class="message">and why I am glad that you are working on improving the situation ^_^</span></div><div class="line" id="144637"><span class="nick" style="color:#80b1d3"><a href="#144637" label="[14:46:37]">&lt;oriansj&gt;</a></span><span class="message">muurkha: what I got with sloccount is: ansic=139034,yacc=1448</span></div><div class="line" id="151444"><span class="nick" style="color:#6d2462"><a href="#151444" label="[15:14:44]">&lt;muurkha&gt;</a></span><span class="message">sloccount is probably more accurate!  cloc was counting HTML.  also though it counted 273k lines of C rather than 139k, which is almost exactly 2×; I wonder if it's counting a generated file or something?</span></div><div class="line" id="151532"><span class="nick" style="color:#6d2462"><a href="#151532" label="[15:15:32]">&lt;muurkha&gt;</a></span><span class="message">or 283kloc if you include the headers</span></div><div class="line" id="151619"><span class="nick" style="color:#6d2462"><a href="#151619" label="[15:16:19]">&lt;muurkha&gt;</a></span><span class="message">also it counts 21kloc of shell, 20kloc of Tcl, 14kloc of m4, and 9kloc of JS, which are all probably legit (but mostly don't end up in the actual compiled library)</span></div><div class="line" id="151644"><span class="nick" style="color:#6d2462"><a href="#151644" label="[15:16:44]">&lt;muurkha&gt;</a></span><span class="message">lrvick: yes, agreed that dockerfiles suck to write</span></div><div class="line" id="151702"><span class="nick" style="color:#6d2462"><a href="#151702" label="[15:17:02]">&lt;muurkha&gt;</a></span><span class="message">especially if you take the time to make them easier to read!</span></div><div class="line" id="164621"><span class="nick" style="color:#6c3d55"><a href="#164621" label="[16:46:21]">&lt;Googulator&gt;</a></span><span class="message">lrvick: as I understand it, your 64-bit bootstrap depends on the underlying kernel (behind Docker) being already 64-bit</span></div><div class="line" id="164652"><span class="nick" style="color:#6c3d55"><a href="#164652" label="[16:46:52]">&lt;Googulator&gt;</a></span><span class="message">is that right?</span></div><div class="line" id="164715"><span class="nick" style="color:#6d2462"><a href="#164715" label="[16:47:15]">&lt;muurkha&gt;</a></span><span class="message">Docker doesn't really hide the kernel</span></div><div class="line" id="164723"><span class="nick" style="color:#6d2462"><a href="#164723" label="[16:47:23]">&lt;muurkha&gt;</a></span><span class="message">I mean processes inside the Docker container don't have their own kernel</span></div><div class="line" id="164730"><span class="nick" style="color:#6d2462"><a href="#164730" label="[16:47:30]">&lt;muurkha&gt;</a></span><span class="message">they use the same kernel as the rest of the system</span></div><div class="line" id="164820"><span class="nick" style="color:#6c3d55"><a href="#164820" label="[16:48:20]">&lt;Googulator&gt;</a></span><span class="message">I know that</span></div><div class="line" id="164904"><span class="nick" style="color:#6d2462"><a href="#164904" label="[16:49:04]">&lt;muurkha&gt;</a></span><span class="message">sorry</span></div><div class="line" id="164913"><span class="nick" style="color:#6d2462"><a href="#164913" label="[16:49:13]">&lt;muurkha&gt;</a></span><span class="message">I think I didn't understand what you were asking</span></div><div class="line" id="164916"><span class="nick" style="color:#6c3d55"><a href="#164916" label="[16:49:16]">&lt;Googulator&gt;</a></span><span class="message">my point is, is there any point in lrvick's bootstrap where we can plug in a build step to compile &amp; kexec to a 64-bit kernel from a 32-bit one on bare metal</span></div><div class="line" id="164948"><span class="nick" style="color:#6c3d55"><a href="#164948" label="[16:49:48]">&lt;Googulator&gt;</a></span><span class="message">or is it dependent on the running kernel being able to natively execute 64-bit binaries</span></div><div class="line" id="165054"><span class="nick" style="color:#6c3d55"><a href="#165054" label="[16:50:54]">&lt;Googulator&gt;</a></span><span class="message">if I'm not wrong, at some point in the chain, an x86-32 -&gt; x86-64 cross compiler needs to be built</span></div><div class="line" id="165226"><span class="nick" style="color:#6c3d55"><a href="#165226" label="[16:52:26]">&lt;Googulator&gt;</a></span><span class="message">what I'm not sure if that is already sufficient to then cross-compile a 64-bit Linux kernel (with 32-bit userspace support)</span></div><div class="line" id="170553"><span class="nick" style="color:#2e2a4a"><a href="#170553" label="[17:05:53]">&lt;stikonas&gt;</a></span><span class="message">Googulator: well, that whole docker thing is close to bwrap mode than qemu mode</span></div><div class="line" id="170613"><span class="nick" style="color:#2e2a4a"><a href="#170613" label="[17:06:13]">&lt;stikonas&gt;</a></span><span class="message">it's just different frontend to linux namespaces</span></div><div class="line" id="170633"><span class="nick" style="color:#6c3d55"><a href="#170633" label="[17:06:33]">&lt;Googulator&gt;</a></span><span class="message">right</span></div><div class="line" id="170725"><span class="nick" style="color:#6c3d55"><a href="#170725" label="[17:07:25]">&lt;Googulator&gt;</a></span><span class="message">but if the cross-GCC is sufficient for building a 64-bit kernel, then it's relatively easy to add a kernel build &amp; kexec immediately after cross-GCC is ready</span></div><div class="line" id="170757"><span class="nick" style="color:#6c3d55"><a href="#170757" label="[17:07:57]">&lt;Googulator&gt;</a></span><span class="message">OTOH if e.g. some other tool is needed, which is currently built and executed natively in 64-bit mode - that's an obstacle</span></div><div class="line" id="170832"><span class="nick" style="color:#6c3d55"><a href="#170832" label="[17:08:32]">&lt;Googulator&gt;</a></span><span class="message">e.g. can our existing binutils (which is natively 32-bit) make a working 64-bit bzImage?</span></div><div class="line" id="170848"><span class="nick" style="color:#6c3d55"><a href="#170848" label="[17:08:48]">&lt;Googulator&gt;</a></span><span class="message">(from object code compiled by cross-GCC)</span></div><div class="line" id="172732"><span class="nick" style="color:#2e2a4a"><a href="#172732" label="[17:27:32]">&lt;stikonas&gt;</a></span><span class="message">yeah, cross-compiler is always sufficient for building kernel</span></div><div class="line" id="173333"><span class="nick" style="color:#6c3d55"><a href="#173333" label="[17:33:33]">&lt;Googulator&gt;</a></span><span class="message">no need for other things like 64-bit libc?</span></div><div class="line" id="173349"><span class="nick" style="color:#6c3d55"><a href="#173349" label="[17:33:49]">&lt;Googulator&gt;</a></span><span class="message">or a &quot;cross-binutils&quot;</span></div><div class="line" id="173413"><span class="nick" style="color:#6c3d55"><a href="#173413" label="[17:34:13]">&lt;Googulator&gt;</a></span><span class="message">(never cross-compiled a kernel &quot;by hand&quot;, so no idea exactly what's needed)</span></div><div class="line" id="175532"><span class="nick" style="color:#2e2a4a"><a href="#175532" label="[17:55:32]">&lt;stikonas&gt;</a></span><span class="message">Googulator: libc is not available for kernel builds anyway</span></div><div class="line" id="175540"><span class="nick" style="color:#2e2a4a"><a href="#175540" label="[17:55:40]">&lt;stikonas&gt;</a></span><span class="message">you only have pure C</span></div><div class="line" id="175557"><span class="nick" style="color:#2e2a4a"><a href="#175557" label="[17:55:57]">&lt;stikonas&gt;</a></span><span class="message">(since it's libc's job to talk to kernel and do syscalls)</span></div><div class="line" id="175610"><span class="nick" style="color:#2e2a4a"><a href="#175610" label="[17:56:10]">&lt;stikonas&gt;</a></span><span class="message">as for binutils, yes, you do need them</span></div><div class="line" id="175620"><span class="nick" style="color:#2e2a4a"><a href="#175620" label="[17:56:20]">&lt;stikonas&gt;</a></span><span class="message">but you can also build cross-binutils</span></div><div class="line" id="180410"><span class="nick" style="color:#2e2a4a"><a href="#180410" label="[18:04:10]">&lt;stikonas&gt;</a></span><span class="message">Googulator: cross-kernel build is what we'll also have to do with UEFI bootstrap (at least for now)</span></div><div class="line" id="180424"><span class="nick" style="color:#2e2a4a"><a href="#180424" label="[18:04:24]">&lt;stikonas&gt;</a></span><span class="message">since Fiwix is x86 only</span></div><div class="line" id="180443"><span class="nick" style="color:#2e2a4a"><a href="#180443" label="[18:04:43]">&lt;stikonas&gt;</a></span><span class="message">one needs to build tcc with x86 backend that runs on x86_64 system</span></div><div class="line" id="180509"><span class="nick" style="color:#2e2a4a"><a href="#180509" label="[18:05:09]">&lt;stikonas&gt;</a></span><span class="message">and binutils is not needed there because tcc emits binary code rather than assembly</span></div><div class="line" id="180800"><span class="nick" style="color:#d9d9d9"><a href="#180800" label="[18:08:00]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: I was thinking the path would be to do a 64-bit Fiwix (even though that's super difficult)</span></div><div class="line" id="180812"><span class="nick" style="color:#2e2a4a"><a href="#180812" label="[18:08:12]">&lt;stikonas&gt;</a></span><span class="message">yeah, longer term true</span></div><div class="line" id="180829"><span class="nick" style="color:#2e2a4a"><a href="#180829" label="[18:08:29]">&lt;stikonas&gt;</a></span><span class="message">but short term it's much easier to switch to x86...</span></div><div class="line" id="180855"><span class="nick" style="color:#2e2a4a"><a href="#180855" label="[18:08:55]">&lt;stikonas&gt;</a></span><span class="message">once we are ready to ditch UEFI boot services</span></div><div class="line" id="180936"><span class="nick" style="color:#2e2a4a"><a href="#180936" label="[18:09:36]">&lt;stikonas&gt;</a></span><span class="message">we'll see how mes x86_64 port goes...</span></div><div class="line" id="181001"><span class="nick" style="color:#2e2a4a"><a href="#181001" label="[18:10:01]">&lt;stikonas&gt;</a></span><span class="message">if it doesn't go well, maybe we need to figure out graphics framebuffer and ditch UEFI earlier</span></div><div class="line" id="181016"><span class="nick" style="color:#d9d9d9"><a href="#181016" label="[18:10:16]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: there could be a lot of effort into cross-compiling in the short term though</span></div><div class="line" id="181026"><span class="nick" style="color:#2e2a4a"><a href="#181026" label="[18:10:26]">&lt;stikonas&gt;</a></span><span class="message">shouldn't be fairly easy</span></div><div class="line" id="181035"><span class="nick" style="color:#2e2a4a"><a href="#181035" label="[18:10:35]">&lt;stikonas&gt;</a></span><span class="message">just need to build  tcc with -DTCC_TARGET_X86_64</span></div><div class="line" id="181045"><span class="nick" style="color:#d9d9d9"><a href="#181045" label="[18:10:45]">&lt;rickmasters&gt;</a></span><span class="message">should ?</span></div><div class="line" id="181107"><span class="nick" style="color:#2e2a4a"><a href="#181107" label="[18:11:07]">&lt;stikonas&gt;</a></span><span class="message">well, I used x86_64 -&gt; riscv64 crosscompiler of tcc quite a bit</span></div><div class="line" id="181145"><span class="nick" style="color:#d9d9d9"><a href="#181145" label="[18:11:45]">&lt;rickmasters&gt;</a></span><span class="message">you said 'shouldn't' so just asking if that was a typo</span></div><div class="line" id="181246"><span class="nick" style="color:#2e2a4a"><a href="#181246" label="[18:12:46]">&lt;stikonas&gt;</a></span><span class="message">oh yeah, that's a typo</span></div><div class="line" id="181301"><span class="nick" style="color:#2e2a4a"><a href="#181301" label="[18:13:01]">&lt;stikonas&gt;</a></span><span class="message">probably wanted to write shouldn't be too hard...</span></div><div class="line" id="181535"><span class="nick" style="color:#d9d9d9"><a href="#181535" label="[18:15:35]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: I think I was confused. You're right that it's just cross-compiling Fiwix, continuing a 32-bit prior to Linux,</span></div><div class="line" id="181617"><span class="nick" style="color:#d9d9d9"><a href="#181617" label="[18:16:17]">&lt;rickmasters&gt;</a></span><span class="message">stionas: then cross-compiling the Linux and any dependencies to 64-bit</span></div><div class="line" id="181654"><span class="nick" style="color:#2e2a4a"><a href="#181654" label="[18:16:54]">&lt;stikonas&gt;</a></span><span class="message">yeah...</span></div><div class="line" id="181729"><span class="nick" style="color:#2e2a4a"><a href="#181729" label="[18:17:29]">&lt;stikonas&gt;</a></span><span class="message">or for the first step just let x86 bootstrap to finish</span></div><div class="line" id="181739"><span class="nick" style="color:#2e2a4a"><a href="#181739" label="[18:17:39]">&lt;stikonas&gt;</a></span><span class="message">and then try to build x86_64 kernel</span></div><div class="line" id="181910"><span class="nick" style="color:#d9d9d9"><a href="#181910" label="[18:19:10]">&lt;rickmasters&gt;</a></span><span class="message">yeah, that could be staged now optionally at end of x86 ARCH build</span></div><div class="line" id="182140"><span class="nick" style="color:#2e2a4a"><a href="#182140" label="[18:21:40]">&lt;stikonas&gt;</a></span><span class="message">and I still need to fix some bug in posix-runner...</span></div><div class="line" id="182436"><span class="nick" style="color:#d9d9d9"><a href="#182436" label="[18:24:36]">&lt;rickmasters&gt;</a></span><span class="message">I could probably help with that at some point. First I need to fix a bug that cosinusoidally reported in builder-hex0's execve.</span></div><div class="line" id="182504"><span class="nick" style="color:#d9d9d9"><a href="#182504" label="[18:25:04]">&lt;rickmasters&gt;</a></span><span class="message">Then that whole mechanism will probably be fresh in my mind. I'd like to document it better as well.</span></div><div class="line" id="182717"><span class="nick" style="color:#2e2a4a"><a href="#182717" label="[18:27:17]">&lt;stikonas&gt;</a></span><span class="message">oh yeah, execve is another thing I need to finish</span></div><div class="line" id="182733"><span class="nick" style="color:#2e2a4a"><a href="#182733" label="[18:27:33]">&lt;stikonas&gt;</a></span><span class="message">right now fork / execve works but probably not pure execve</span></div><div class="line" id="182755"><span class="nick" style="color:#2e2a4a"><a href="#182755" label="[18:27:55]">&lt;stikonas&gt;</a></span><span class="message">(and that bug where mes starts failing after about 30 invocations by kaem script)</span></div><div class="line" id="182834"><span class="nick" style="color:#d9d9d9"><a href="#182834" label="[18:28:34]">&lt;rickmasters&gt;</a></span><span class="message">If posix-runner is anything like builder-hex0's fork/execve/waitpid pattern then maybe I can help but I haven't looked at your code recently</span></div><div class="line" id="182856"><span class="nick" style="color:#2e2a4a"><a href="#182856" label="[18:28:56]">&lt;stikonas&gt;</a></span><span class="message">yeah, it is that pattern</span></div><div class="line" id="182923"><span class="nick" style="color:#2e2a4a"><a href="#182923" label="[18:29:23]">&lt;stikonas&gt;</a></span><span class="message">anyway, no pressure, finish your other project first :)</span></div><div class="line" id="183031"><span class="nick" style="color:#d9d9d9"><a href="#183031" label="[18:30:31]">&lt;rickmasters&gt;</a></span><span class="message">Yeah, reported bug takes priority.</span></div><div class="line" id="183038"><span class="nick" style="color:#bc80bd"><a href="#183038" label="[18:30:38]">&lt;Mikaku&gt;</a></span><span class="message">I hope by the time you finish x86 live-bootstrap I'll be able to start adding 64bit support to Fiwix</span></div><div class="line" id="183059"><span class="nick" style="color:#bc80bd"><a href="#183059" label="[18:30:59]">&lt;Mikaku&gt;</a></span><span class="message">do you have an estimated time when you plan to finish x86 bootstrap?</span></div><div class="line" id="183159"><span class="nick" style="color:#2e2a4a"><a href="#183159" label="[18:31:59]">&lt;stikonas&gt;</a></span><span class="message">well it is finished in some sense</span></div><div class="line" id="183209"><span class="nick" style="color:#d9d9d9"><a href="#183209" label="[18:32:09]">&lt;rickmasters&gt;</a></span><span class="message">heh, it's never truly &quot;finished&quot; but I'm thinking it &quot;works&quot; right now.</span></div><div class="line" id="183211"><span class="nick" style="color:#2e2a4a"><a href="#183211" label="[18:32:11]">&lt;stikonas&gt;</a></span><span class="message">now it's just some improvements</span></div><div class="line" id="183622"><span class="nick" style="color:#bc80bd"><a href="#183622" label="[18:36:22]">&lt;Mikaku&gt;</a></span><span class="message">I see, well, I just wanted to know if I can have enough time to finish a feature am working now before you guys finish the x86 build completely</span></div><div class="line" id="183651"><span class="nick" style="color:#2e2a4a"><a href="#183651" label="[18:36:51]">&lt;stikonas&gt;</a></span><span class="message">well, for 64-bit bootstrap we need to sort out userspace first</span></div><div class="line" id="183659"><span class="nick" style="color:#2e2a4a"><a href="#183659" label="[18:36:59]">&lt;stikonas&gt;</a></span><span class="message">and kernel stuff can temporarily go via cross-build route</span></div><div class="line" id="183719"><span class="nick" style="color:#bc80bd"><a href="#183719" label="[18:37:19]">&lt;Mikaku&gt;</a></span><span class="message">aha</span></div><div class="line" id="184025"><span class="nick" style="color:#d9d9d9"><a href="#184025" label="[18:40:25]">&lt;rickmasters&gt;</a></span><span class="message">Mikaku: Don't feel like you have a deadline. I'd finish your feature. Don't worry about it.</span></div><div class="line" id="184032"><span class="nick" style="color:#2e2a4a"><a href="#184032" label="[18:40:32]">&lt;stikonas&gt;</a></span><span class="message">exactly...</span></div><div class="line" id="184040"><span class="nick" style="color:#bc80bd"><a href="#184040" label="[18:40:40]">&lt;Mikaku&gt;</a></span><span class="message">so the live-bootstrap project is now in the 1.0 version? I check the issue #292 from time to time but it don't seems updated lately</span></div><div class="line" id="184049"><span class="nick" style="color:#2e2a4a"><a href="#184049" label="[18:40:49]">&lt;stikonas&gt;</a></span><span class="message">it's not 1.0 yet..</span></div><div class="line" id="184054"><span class="nick" style="color:#bc80bd"><a href="#184054" label="[18:40:54]">&lt;Mikaku&gt;</a></span><span class="message">rickmasters: ok, thanks</span></div><div class="line" id="184055"><span class="nick" style="color:#d9d9d9"><a href="#184055" label="[18:40:55]">&lt;rickmasters&gt;</a></span><span class="message">Mikaku: There is a lot to be done before a Fiwix 64-bit could even be utilized.</span></div><div class="line" id="184104"><span class="nick" style="color:#2e2a4a"><a href="#184104" label="[18:41:04]">&lt;stikonas&gt;</a></span><span class="message">I think fossy wants to include all Googulator's baremetal fixes</span></div><div class="line" id="184121"><span class="nick" style="color:#bc80bd"><a href="#184121" label="[18:41:21]">&lt;Mikaku&gt;</a></span><span class="message">rickmasters: perfect, that's what I wanted to know :-)</span></div><div class="line" id="184143"><span class="nick" style="color:#bc80bd"><a href="#184143" label="[18:41:43]">&lt;Mikaku&gt;</a></span><span class="message">stikonas: ok, thanks</span></div><div class="line" id="184147"><span class="nick" style="color:#2e2a4a"><a href="#184147" label="[18:41:47]">&lt;stikonas&gt;</a></span><span class="message">and also we'll see how well posix-runner works</span></div><div class="line" id="184201"><span class="nick" style="color:#2e2a4a"><a href="#184201" label="[18:42:01]">&lt;stikonas&gt;</a></span><span class="message">as it's easier to extend (since it's written in M2 C) than builder-hex0</span></div><div class="line" id="185752"><span class="nick" style="color:#80b1d3"><a href="#185752" label="[18:57:52]">&lt;oriansj&gt;</a></span><span class="message">and should be relatively easy to port to new architectures (which have UEFI)</span></div><div class="line" id="185900"><span class="nick" style="color:#2e2a4a"><a href="#185900" label="[18:59:00]">&lt;stikonas&gt;</a></span><span class="message">yeah, I think so</span></div><div class="line" id="185931"><span class="nick" style="color:#2e2a4a"><a href="#185931" label="[18:59:31]">&lt;stikonas&gt;</a></span><span class="message">one needs to port thigns like enabling syscalls (if necessary), syscall numbers and jumping returning from syscalls</span></div><div class="line" id="190445"><span class="nick" style="color:#80b1d3"><a href="#190445" label="[19:04:45]">&lt;oriansj&gt;</a></span><span class="message">would it be complete and utter overkill in an explicit package manager to expect one to specify what programming language the source code files are?</span></div><div class="line" id="190754"><span class="nick" style="color:#80b1d3"><a href="#190754" label="[19:07:54]">&lt;oriansj&gt;</a></span><span class="message">or should it be optional metadata?</span></div><div class="line" id="190800"><span class="nick" style="color:#d9d9d9"><a href="#190800" label="[19:08:00]">&lt;rickmasters&gt;</a></span><span class="message">metadata</span></div><div class="line" id="190828"><span class="nick" style="color:#80b1d3"><a href="#190828" label="[19:08:28]">&lt;oriansj&gt;</a></span><span class="message">ok</span></div><div class="line" id="190932"><span class="nick" style="color:#80b1d3"><a href="#190932" label="[19:09:32]">&lt;oriansj&gt;</a></span><span class="message">probably could make the license(s) on individual files metadata too and make the missing info a warning but not an error</span></div><div class="line" id="191353"><span class="nick" style="color:#6c3d55"><a href="#191353" label="[19:13:53]">&lt;Googulator&gt;</a></span><span class="message">meanwhile, updated my remaining PRs</span></div><div class="line" id="191406"><span class="nick" style="color:#6c3d55"><a href="#191406" label="[19:14:06]">&lt;Googulator&gt;</a></span><span class="message">(plus a new one to pull in builder-hex0 changes)</span></div><div class="line" id="192428"><span class="nick" style="color:#6c3d55"><a href="#192428" label="[19:24:28]">&lt;Googulator&gt;</a></span><span class="message">This includes the last changes required for quality of life on bare metal; the only thing I'm thinking of adding for bare metal is in-band logging (i.e. a logfile in the bootstrap FS itself, that can be viewed via the alternate virtual consoles, since on bare metal, you can't just pipe the VGA or HDMI output into a file like you can with the</span></div><div class="line" id="192429"><span class="nick" style="color:#6c3d55"><a href="#192429" label="[19:24:29]">&lt;Googulator&gt;</a></span><span class="message">virtual serial output or straight stdio in other modes)</span></div><div class="line" id="195556"><span class="nick" style="color:#3c5b35"><a href="#195556" label="[19:55:56]">&lt;janneke&gt;</a></span><span class="message">hmm, latest M2-Planet produces instruction `LOADS8' for arm, but there's no macro for LOADS8</span></div><div class="line" id="195605"><span class="nick" style="color:#3c5b35"><a href="#195605" label="[19:56:05]">&lt;janneke&gt;</a></span><span class="message">on mes, do:</span></div><div class="line" id="195611"><span class="nick" style="color:#3c5b35"><a href="#195611" label="[19:56:11]">&lt;janneke&gt;</a></span><span class="message">M2-Planet --architecture armv7l -f include/mes/lib-mini.h -f lib/string/strlen.c</span></div><div class="line" id="195622"><span class="nick" style="color:#3c5b35"><a href="#195622" label="[19:56:22]">&lt;janneke&gt;</a></span><span class="message">=&gt;</span></div><div class="line" id="195630"><span class="nick" style="color:#3c5b35"><a href="#195630" label="[19:56:30]">&lt;janneke&gt;</a></span><span class="message">[..] LOADS8 R0 LOAD R0 HALF_MEMORY [..]</span></div><div class="line" id="195727"><span class="nick" style="color:#2e2a4a"><a href="#195727" label="[19:57:27]">&lt;stikonas&gt;</a></span><span class="message">it is there</span></div><div class="line" id="195728"><span class="nick" style="color:#2e2a4a"><a href="#195728" label="[19:57:28]">&lt;stikonas&gt;</a></span><span class="message">armv7l_defs.M1:DEFINE LOADS8 D0</span></div><div class="line" id="195747"><span class="nick" style="color:#2e2a4a"><a href="#195747" label="[19:57:47]">&lt;stikonas&gt;</a></span><span class="message">I guess you need to sync defs from M2libc</span></div><div class="line" id="195907"><span class="nick" style="color:#3c5b35"><a href="#195907" label="[19:59:07]">&lt;janneke&gt;</a></span><span class="message">stikonas: ah, my bad</span></div><div class="line" id="200319"><span class="nick" style="color:#3c5b35"><a href="#200319" label="[20:03:19]">&lt;janneke&gt;</a></span><span class="message">ah, those puny submodules got me again</span></div><div class="line" id="200342"><span class="nick" style="color:#3c5b35"><a href="#200342" label="[20:03:42]">&lt;janneke&gt;</a></span><span class="message">yep, works beautifully</span></div><div class="line" id="214919"><span class="nick" style="color:#80b1d3"><a href="#214919" label="[21:49:19]">&lt;oriansj&gt;</a></span><span class="message">janneke: yeah, unfortunately I haven't found a better alternative to git submodules yet</span></div><div class="line" id="215000"><span class="nick" style="color:#80b1d3"><a href="#215000" label="[21:50:00]">&lt;oriansj&gt;</a></span><span class="message">maybe if I upgrade to a format that enables true libraries perhaps?</span></div><div class="line" id="215253"><span class="nick" style="color:#80b1d3"><a href="#215253" label="[21:52:53]">&lt;oriansj&gt;</a></span><span class="message">but at that point, I would be building a binutils replacement that could be built by M2-Planet</span></div><div class="line" id="215622"><span class="nick" style="color:#3c5b35"><a href="#215622" label="[21:56:22]">&lt;janneke&gt;</a></span><span class="message">yeah, for now it's a nice hack</span></div><div class="line" id="215817"><span class="nick" style="color:#2e2a4a"><a href="#215817" label="[21:58:17]">&lt;stikonas&gt;</a></span><span class="message">oriansj: we can have non-true libraries with M2libc</span></div><div class="line" id="215824"><span class="nick" style="color:#2e2a4a"><a href="#215824" label="[21:58:24]">&lt;stikonas&gt;</a></span><span class="message">janneke did that for mescc after all</span></div><div class="line" id="215843"><span class="nick" style="color:#2e2a4a"><a href="#215843" label="[21:58:43]">&lt;stikonas&gt;</a></span><span class="message">well with meslibc...\</span></div><div class="line" id="215904"><span class="nick" style="color:#2e2a4a"><a href="#215904" label="[21:59:04]">&lt;stikonas&gt;</a></span><span class="message">but we just need to compile all M1 files into libc.s and hex2 files into libc.a</span></div><div class="line" id="220322"><span class="nick" style="color:#80b1d3"><a href="#220322" label="[22:03:22]">&lt;oriansj&gt;</a></span><span class="message">but that wouldn't remove the M2libc submodule problem</span></div><div class="line" id="220404"><span class="nick" style="color:#80b1d3"><a href="#220404" label="[22:04:04]">&lt;oriansj&gt;</a></span><span class="message">in M2-Planet</span></div><div class="line" id="220711"><span class="nick" style="color:#6b8072"><a href="#220711" label="[22:07:11]">&lt;fossy&gt;</a></span><span class="message">stikonas: i'm actually finding the main problem with a lot of things is static libraries...</span></div><div class="line" id="220829"><span class="nick" style="color:#2e2a4a"><a href="#220829" label="[22:08:29]">&lt;stikonas&gt;</a></span><span class="message">oh yes, I guess at higher distro level everybody expects dynamic libraries</span></div><div class="line" id="220837"><span class="nick" style="color:#2e2a4a"><a href="#220837" label="[22:08:37]">&lt;stikonas&gt;</a></span><span class="message">especially all that python stuff</span></div><div class="line" id="220859"><span class="nick" style="color:#2e2a4a"><a href="#220859" label="[22:08:59]">&lt;stikonas&gt;</a></span><span class="message">our python is not very usable for normal pythonic workloads</span></div><div class="line" id="220916"><span class="nick" style="color:#2e2a4a"><a href="#220916" label="[22:09:16]">&lt;stikonas&gt;</a></span><span class="message">well, the static build...</span></div><div class="line" id="221004"><span class="nick" style="color:#6b8072"><a href="#221004" label="[22:10:04]">&lt;fossy&gt;</a></span><span class="message">yeah</span></div><div class="line" id="221018"><span class="nick" style="color:#6b8072"><a href="#221018" label="[22:10:18]">&lt;fossy&gt;</a></span><span class="message">well, it can load dynamic modules (.so in lib-dynload) fine</span></div><div class="line" id="221027"><span class="nick" style="color:#6b8072"><a href="#221027" label="[22:10:27]">&lt;fossy&gt;</a></span><span class="message">but it does have a few limitations</span></div><div class="line" id="222039"><span class="nick" style="color:#80b1d3"><a href="#222039" label="[22:20:39]">&lt;oriansj&gt;</a></span><span class="message">well basically every program seems to want a little custom perfect work in which to be built and run</span></div><div class="line" id="222051"><span class="nick" style="color:#80b1d3"><a href="#222051" label="[22:20:51]">&lt;oriansj&gt;</a></span><span class="message">^work^world^</span></div><div class="line" id="222151"><span class="nick" style="color:#80b1d3"><a href="#222151" label="[22:21:51]">&lt;oriansj&gt;</a></span><span class="message">and we can only hide from that fact so much</span></div><div class="line" id="222219"><span class="nick" style="color:#2e2a4a"><a href="#222219" label="[22:22:19]">&lt;stikonas&gt;</a></span><span class="message">well, it's mostly that people don't test static builds that much</span></div><div class="line" id="222233"><span class="nick" style="color:#2e2a4a"><a href="#222233" label="[22:22:33]">&lt;stikonas&gt;</a></span><span class="message">and if it's not tested, assume that stuff is kind of broken</span></div><div class="line" id="222343"><span class="nick" style="color:#80b1d3"><a href="#222343" label="[22:23:43]">&lt;oriansj&gt;</a></span><span class="message">well people don't think about static vs dynamic builds, they think: I want to use that functionality which library x has, which hoops do I need to jump through to get it with as little work as possible.</span></div><div class="line" id="222650"><span class="nick" style="color:#80b1d3"><a href="#222650" label="[22:26:50]">&lt;oriansj&gt;</a></span><span class="message">library maintainer says: I prefer $(static or dynamic) libraries for $(self-justification reason(s)) and then everyone just deals with that.</span></div><div class="line" id="230824"><span class="nick" style="color:#6b8072"><a href="#230824" label="[23:08:24]">&lt;fossy&gt;</a></span><span class="message">don't know that i've ever seen a library that works with static but NOT dynamic</span></div><div class="line" id="230909"><span class="nick" style="color:#6b8072"><a href="#230909" label="[23:09:09]">&lt;fossy&gt;</a></span><span class="message">most distros use dynamic linking so that is usually much more well supported</span></div><div class="line" id="230928"><span class="nick" style="color:#6b8072"><a href="#230928" label="[23:09:28]">&lt;fossy&gt;</a></span><span class="message">and the issues usually come with build systems not supporting statically linked binaries rather than building static libraries</span></div><div class="line" id="231047"><span class="nick" style="color:#2e2a4a"><a href="#231047" label="[23:10:47]">&lt;stikonas&gt;</a></span><span class="message">fossy: meslibc :)</span></div><div class="line" id="233727"><span class="nick" style="color:#6b8072"><a href="#233727" label="[23:37:27]">&lt;fossy&gt;</a></span><span class="message">lol</span></div><div class="line" id="233755"><span class="nick" style="color:#6b8072"><a href="#233755" label="[23:37:55]">&lt;fossy&gt;</a></span><span class="message">intended-for-general-use library</span></div><br /></div></body></html>