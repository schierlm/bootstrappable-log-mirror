<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-09-26.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000309"><span class="nick" style="color:#389600"><a href="#000309" label="[00:03:09]">&lt;stikonas&gt;</a></span><span class="message">ok, M0.efi just pushed <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi">https://git.stikonas.eu/andrius/stage0-uefi</a> </span></div><div class="line" id="001759"><span class="nick" style="color:#8dd3c7"><a href="#001759" label="[00:17:59]">&lt;oriansj&gt;</a></span><span class="message">stikonas: awesome</span></div><div class="line" id="001834"><span class="nick" style="color:#389600"><a href="#001834" label="[00:18:34]">&lt;stikonas&gt;</a></span><span class="message">one more step (cc_amd64) and I guess after that it will be a lot of M2libc work...</span></div><div class="line" id="001915"><span class="nick" style="color:#8dd3c7"><a href="#001915" label="[00:19:15]">&lt;oriansj&gt;</a></span><span class="message">well we will finally have a solid reason to make a proper malloc and free</span></div><div class="line" id="002325"><span class="nick" style="color:#389600"><a href="#002325" label="[00:23:25]">&lt;stikonas&gt;</a></span><span class="message">wouldn't malloc in UEFI be just calling allocate_pool?</span></div><div class="line" id="002347"><span class="nick" style="color:#389600"><a href="#002347" label="[00:23:47]">&lt;stikonas&gt;</a></span><span class="message">and request some memory from UEFI</span></div><div class="line" id="004116"><span class="nick" style="color:#8dd3c7"><a href="#004116" label="[00:41:16]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well yes but don't we have to track the allocated memory to free it on exit?</span></div><div class="line" id="004131"><span class="nick" style="color:#389600"><a href="#004131" label="[00:41:31]">&lt;stikonas&gt;</a></span><span class="message">can we not leave it up to the programmer?</span></div><div class="line" id="004143"><span class="nick" style="color:#389600"><a href="#004143" label="[00:41:43]">&lt;stikonas&gt;</a></span><span class="message">free everything that you malloced?</span></div><div class="line" id="004145"><span class="nick" style="color:#389600"><a href="#004145" label="[00:41:45]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="004208"><span class="nick" style="color:#389600"><a href="#004208" label="[00:42:08]">&lt;stikonas&gt;</a></span><span class="message">but maybe that's not what is done in stage0-posix... I don't remember now</span></div><div class="line" id="004228"><span class="nick" style="color:#389600"><a href="#004228" label="[00:42:28]">&lt;stikonas&gt;</a></span><span class="message">in that case maybe we do need to reserve bigger blocks and have proper malloc and free</span></div><div class="line" id="004322"><span class="nick" style="color:#389600"><a href="#004322" label="[00:43:22]">&lt;stikonas&gt;</a></span><span class="message">hmm, yes, even M2-Planet does not run free()...</span></div><div class="line" id="004346"><span class="nick" style="color:#8dd3c7"><a href="#004346" label="[00:43:46]">&lt;oriansj&gt;</a></span><span class="message">stikonas: M2libc doesn't clean up after itself at all; so we would have to add it there</span></div><div class="line" id="004437"><span class="nick" style="color:#389600"><a href="#004437" label="[00:44:37]">&lt;stikonas&gt;</a></span><span class="message">well, at the time of writing nobody expected that we would need clean up</span></div><div class="line" id="004441"><span class="nick" style="color:#389600"><a href="#004441" label="[00:44:41]">&lt;stikonas&gt;</a></span><span class="message">after all Linux does that itself</span></div><div class="line" id="004445"><span class="nick" style="color:#8dd3c7"><a href="#004445" label="[00:44:45]">&lt;oriansj&gt;</a></span><span class="message">and free(void*) is just a stub that does nothing</span></div><div class="line" id="004455"><span class="nick" style="color:#389600"><a href="#004455" label="[00:44:55]">&lt;stikonas&gt;</a></span><span class="message">and I don't think we thought about other platforms (i.e. UEFI)</span></div><div class="line" id="004456"><span class="nick" style="color:#8dd3c7"><a href="#004456" label="[00:44:56]">&lt;oriansj&gt;</a></span><span class="message">indeed</span></div><div class="line" id="004538"><span class="nick" style="color:#8dd3c7"><a href="#004538" label="[00:45:38]">&lt;oriansj&gt;</a></span><span class="message">Oh I did, but I also wanted to move forward to prevent the spread of copies of files and make a standard library for M2-Planet before things have gone too far</span></div><div class="line" id="004621"><span class="nick" style="color:#8dd3c7"><a href="#004621" label="[00:46:21]">&lt;oriansj&gt;</a></span><span class="message">So it was punted to a future when we had M2libc as the standard M2-Planet Library</span></div><div class="line" id="004647"><span class="nick" style="color:#8dd3c7"><a href="#004647" label="[00:46:47]">&lt;oriansj&gt;</a></span><span class="message">which minus the Mes.c bit which we haven't absorbed yet; we did achieve</span></div><div class="line" id="004758"><span class="nick" style="color:#8dd3c7"><a href="#004758" label="[00:47:58]">&lt;oriansj&gt;</a></span><span class="message">So now it is just going to be time to add that missing functionality and if janneke takes some time to make mes.c to be something easy for GCC to compile, we should be able to finish the transistion to M2libc</span></div><div class="line" id="004841"><span class="nick" style="color:#389600"><a href="#004841" label="[00:48:41]">&lt;stikonas&gt;</a></span><span class="message">(or if we get that M3 compiler you were taling about... But that's probably longer term)</span></div><div class="line" id="004921"><span class="nick" style="color:#8dd3c7"><a href="#004921" label="[00:49:21]">&lt;oriansj&gt;</a></span><span class="message">well it is a huge task, so it is hard for me to get started.</span></div><div class="line" id="004929"><span class="nick" style="color:#389600"><a href="#004929" label="[00:49:29]">&lt;stikonas&gt;</a></span><span class="message">yes, I know...</span></div><div class="line" id="004944"><span class="nick" style="color:#389600"><a href="#004944" label="[00:49:44]">&lt;stikonas&gt;</a></span><span class="message">well, best to split it into smaller subtasks</span></div><div class="line" id="005031"><span class="nick" style="color:#8dd3c7"><a href="#005031" label="[00:50:31]">&lt;oriansj&gt;</a></span><span class="message">which should make it easier to support going forward.</span></div><div class="line" id="015732"><span class="nick" style="color:#2e2a4a"><a href="#015732" label="[01:57:32]">&lt;vagrantc&gt;</a></span><span class="message">hrm. my proposed talk fo bsidespdx didn't make the cut, but i might get a slot if anyone cancels</span></div><div class="line" id="020234"><span class="nick" style="color:#8dd3c7"><a href="#020234" label="[02:02:34]">&lt;oriansj&gt;</a></span><span class="message">vagrantc: well if it makes you feel any better, I would have loved to see it ^_^</span></div><div class="line" id="020439"><span class="nick" style="color:#8dd3c7"><a href="#020439" label="[02:04:39]">&lt;oriansj&gt;</a></span><span class="message">In related news my proposed talk to the Michigan Cyber Security conference on stage0 was rejected as according to them it was &quot;Not related to Cyber Security&quot;</span></div><div class="line" id="020637"><span class="nick" style="color:#8dd3c7"><a href="#020637" label="[02:06:37]">&lt;oriansj&gt;</a></span><span class="message">So I enjoyed a good laugh after reading that; cracked a root beer and now I am just going to work on a simple preprocessor with virtually no expectations on it</span></div><div class="line" id="020712"><span class="nick" style="color:#389600"><a href="#020712" label="[02:07:12]">&lt;stikonas&gt;</a></span><span class="message">C preprocessor?</span></div><div class="line" id="020718"><span class="nick" style="color:#389600"><a href="#020718" label="[02:07:18]">&lt;stikonas&gt;</a></span><span class="message">or more generic?</span></div><div class="line" id="020834"><span class="nick" style="color:#6b8072"><a href="#020834" label="[02:08:34]">&lt;sam_&gt;</a></span><span class="message">oriansj: lol</span></div><div class="line" id="020836"><span class="nick" style="color:#6b8072"><a href="#020836" label="[02:08:36]">&lt;sam_&gt;</a></span><span class="message">oriansj: they have no idea</span></div><div class="line" id="022829"><span class="nick" style="color:#2e2a4a"><a href="#022829" label="[02:28:29]">&lt;vagrantc&gt;</a></span><span class="message">oriansj: if i don't manage to present, maybe i'll make a video of it or something</span></div><div class="line" id="023131"><span class="nick" style="color:#2e2a4a"><a href="#023131" label="[02:31:31]">&lt;vagrantc&gt;</a></span><span class="message">solving fundamental decades old security problems of nearly all computing platforms is just not cyber enough</span></div><div class="line" id="025500"><span class="nick" style="color:#8dd3c7"><a href="#025500" label="[02:55:00]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well at this point it is more of an experiment of how simple preprocessing can be made</span></div><div class="line" id="025659"><span class="nick" style="color:#8dd3c7"><a href="#025659" label="[02:56:59]">&lt;oriansj&gt;</a></span><span class="message">sam_: but then again I shouldn't be surprised as they have been rejecting my talks for the last 5 years.</span></div><div class="line" id="030001"><span class="nick" style="color:#8dd3c7"><a href="#030001" label="[03:00:01]">&lt;oriansj&gt;</a></span><span class="message">vagrantc: I'll be sure to link it in my list of bootstrapping talks</span></div><div class="line" id="030554"><span class="nick" style="color:#8dd3c7"><a href="#030554" label="[03:05:54]">&lt;oriansj&gt;</a></span><span class="message">stikonas: the current state is reducing the tokenization down to about 70 lines then doing token fusion to produce the desired token stream. Then implementing language specific preprocessing should be simpler and solve the current M2-Mesoplanet bug of reading all files</span></div><div class="line" id="035511"><span class="nick" style="color:#8dd3c7"><a href="#035511" label="[03:55:11]">&lt;oriansj&gt;</a></span><span class="message">I think we might have a fully compliant C tokenizer soonish</span></div><div class="line" id="040707"><span class="nick" style="color:#8dd3c7"><a href="#040707" label="[04:07:07]">&lt;oriansj&gt;</a></span><span class="message">although I need to figure out a solution to label: vs ternary ? operator : alt</span></div><div class="line" id="045339"><span class="nick" style="color:#8dd3c7"><a href="#045339" label="[04:53:39]">&lt;oriansj&gt;</a></span><span class="message">right now it is in a very basic state: <a rel="nofollow" href="https://git.sr.ht/~oriansj/M3-Preprocess/tree">https://git.sr.ht/~oriansj/M3-Preprocess/tree</a> </span></div><div class="line" id="045519"><span class="nick" style="color:#8dd3c7"><a href="#045519" label="[04:55:19]">&lt;oriansj&gt;</a></span><span class="message">basically I am sorting out the token fusion stage right now: <a rel="nofollow" href="https://git.sr.ht/~oriansj/M3-Preprocess/tree/main/item/c_stage1.c">https://git.sr.ht/~oriansj/M3-Preprocess/tree/main/item/c_stage1.c</a> </span></div><div class="line" id="045801"><span class="nick" style="color:#8dd3c7"><a href="#045801" label="[04:58:01]">&lt;oriansj&gt;</a></span><span class="message">although if I was aiming for C compatibility with GCC I'd be doing # 0 &quot;foo.c&quot; instead of #FILENAME foo.c 1</span></div><div class="line" id="061332"><span class="nick" style="color:#8dd3c7"><a href="#061332" label="[06:13:32]">&lt;oriansj&gt;</a></span><span class="message">well that heuristic works kinda (until someone figures out a better one)</span></div><div class="line" id="061518"><span class="nick" style="color:#8dd3c7"><a href="#061518" label="[06:15:18]">&lt;oriansj&gt;</a></span><span class="message">and that is uploaded, with all of its hackiness</span></div><div class="line" id="061633"><span class="nick" style="color:#8dd3c7"><a href="#061633" label="[06:16:33]">&lt;oriansj&gt;</a></span><span class="message">if there is something in the C standard that I missed and tokenized completely wrong, please let me know</span></div><div class="line" id="131828"><span class="nick">***</span><span class="message notice">attila_lendvai_ is now known as attila_lendvai</span></div><div class="line" id="150857"><span class="nick" style="color:#8dd3c7"><a href="#150857" label="[15:08:57]">&lt;oriansj&gt;</a></span><span class="message">and should I do Trigraph sequence replacements in the preprocessor?</span></div><div class="line" id="151704"><span class="nick" style="color:#8dd3c7"><a href="#151704" label="[15:17:04]">&lt;oriansj&gt;</a></span><span class="message">and it turns out c labels: can have an arbitrary amount of whitespace between the label and the :</span></div><div class="line" id="151745"><span class="nick" style="color:#8dd3c7"><a href="#151745" label="[15:17:45]">&lt;oriansj&gt;</a></span><span class="message">they can literally be on different lines</span></div><div class="line" id="152257"><span class="nick" style="color:#6d2462"><a href="#152257" label="[15:22:57]">&lt;stikonas[m]&gt;</a></span><span class="message">I think trigraphs are not widely used</span></div><div class="line" id="152316"><span class="nick" style="color:#6d2462"><a href="#152316" label="[15:23:16]">&lt;stikonas[m]&gt;</a></span><span class="message">And are getting removed in newer standards</span></div><div class="line" id="152349"><span class="nick" style="color:#6d2462"><a href="#152349" label="[15:23:49]">&lt;stikonas[m]&gt;</a></span><span class="message">Probably safe to ignore those</span></div><div class="line" id="153514"><span class="nick" style="color:#8dd3c7"><a href="#153514" label="[15:35:14]">&lt;oriansj&gt;</a></span><span class="message">well it is more of a question of are they used in GCC and thus would have to be supported.</span></div><div class="line" id="153548"><span class="nick" style="color:#8dd3c7"><a href="#153548" label="[15:35:48]">&lt;oriansj&gt;</a></span><span class="message">and if so, should we just deal with it in the preprocessor or would I have to deal with it in the compiler itself for technical reasons.</span></div><div class="line" id="153729"><span class="nick" style="color:#6d2462"><a href="#153729" label="[15:37:29]">&lt;stikonas[m]&gt;</a></span><span class="message">GCC seems to disable them by decal</span></div><div class="line" id="153732"><span class="nick" style="color:#6d2462"><a href="#153732" label="[15:37:32]">&lt;stikonas[m]&gt;</a></span><span class="message">Default</span></div><div class="line" id="153751"><span class="nick" style="color:#6d2462"><a href="#153751" label="[15:37:51]">&lt;stikonas[m]&gt;</a></span><span class="message">So unlikely to use them either</span></div><div class="line" id="154051"><span class="nick" style="color:#8dd3c7"><a href="#154051" label="[15:40:51]">&lt;oriansj&gt;</a></span><span class="message">well that is good to hear; they didn't look hard to convert  with a single else if(pattern_compress(i, trigraphbracketopen)) i-&gt;s = &quot;[&quot;; line but I was just more worried about when they can't be preprocessed away.</span></div><div class="line" id="163520"><span class="nick">***</span><span class="message notice">attila_lendvai_ is now known as attila_lendvai</span></div><div class="line" id="164742"><span class="nick" style="color:#8dd3c7"><a href="#164742" label="[16:47:42]">&lt;oriansj&gt;</a></span><span class="message">in fact, I'll do that and we will support trigraphs provided there is no technical special extra details needed in the compiler to deal with them. (aka if the preprocessor can just replace them, then we will be fine)</span></div><div class="line" id="172145"><span class="nick" style="color:#8dd3c7"><a href="#172145" label="[17:21:45]">&lt;oriansj&gt;</a></span><span class="message">and with a few more tweaks I can probably make inspecting macro expansion quite simple (so we wouldn't have to break out gdb to figure out what we created)</span></div><div class="line" id="172935"><span class="nick" style="color:#6d2462"><a href="#172935" label="[17:29:35]">&lt;stikonas[m]&gt;</a></span><span class="message">Maybe make it optional?</span></div><div class="line" id="172953"><span class="nick" style="color:#6d2462"><a href="#172953" label="[17:29:53]">&lt;stikonas[m]&gt;</a></span><span class="message">Trigraphs can accidentally break things</span></div><div class="line" id="173051"><span class="nick" style="color:#6d2462"><a href="#173051" label="[17:30:51]">&lt;stikonas[m]&gt;</a></span><span class="message">If some code accidentally uses sequence if chars that ends up being trigraph but is always compiled without trigraphs</span></div><div class="line" id="173537"><span class="nick" style="color:#8dd3c7"><a href="#173537" label="[17:35:37]">&lt;oriansj&gt;</a></span><span class="message">well it would be trivial to disable as it is isolated to a single function</span></div><div class="line" id="173649"><span class="nick" style="color:#8dd3c7"><a href="#173649" label="[17:36:49]">&lt;oriansj&gt;</a></span><span class="message">which is called exactly once in a single function, so create a global, add a flag and put an IF(!flag) replace_trigraphs(token);</span></div><div class="line" id="173720"><span class="nick" style="color:#8dd3c7"><a href="#173720" label="[17:37:20]">&lt;oriansj&gt;</a></span><span class="message">and the second we hit that bug, I'll add it</span></div><div class="line" id="175500"><span class="nick" style="color:#6d2462"><a href="#175500" label="[17:55:00]">&lt;stikonas[m]&gt;</a></span><span class="message">Yeah, we can do it only if we hit that bug...</span></div><div class="line" id="180131"><span class="nick" style="color:#8dd3c7"><a href="#180131" label="[18:01:31]">&lt;oriansj&gt;</a></span><span class="message">less global state reduces the number of things I need to test when fuzzing</span></div><div class="line" id="184528"><span class="nick" style="color:#8dd3c7"><a href="#184528" label="[18:45:28]">&lt;oriansj&gt;</a></span><span class="message">hmmm M2-Planet supports -D and M2-Mesoplanet didn't I probably should fix that</span></div><div class="line" id="185625"><span class="nick" style="color:#8dd3c7"><a href="#185625" label="[18:56:25]">&lt;oriansj&gt;</a></span><span class="message">and in case anyone missed it: <a rel="nofollow" href="https://paste.debian.net/1255074/">https://paste.debian.net/1255074/</a>  a spinning donut buildable by M2-Mesoplanet (not that it would be essential for anyone's bootstrap)</span></div><div class="line" id="185653"><span class="nick" style="color:#8dd3c7"><a href="#185653" label="[18:56:53]">&lt;oriansj&gt;</a></span><span class="message">although it would make a funny post: from hex to spinning donuts</span></div><div class="line" id="195315"><span class="nick" style="color:#8dd3c7"><a href="#195315" label="[19:53:15]">&lt;oriansj&gt;</a></span><span class="message">wow, appearently arbitrary whitespace can exist between # and define according to the standard (that seems like a bad idea)</span></div><div class="line" id="195357"><span class="nick" style="color:#8dd3c7"><a href="#195357" label="[19:53:57]">&lt;oriansj&gt;</a></span><span class="message">well, as I am fixing up trigraphs, I might as well fix that garbage input as well</span></div><div class="line" id="195458"><span class="nick" style="color:#8dd3c7"><a href="#195458" label="[19:54:58]">&lt;oriansj&gt;</a></span><span class="message">because you know #\n\t   define seems sooo reasonable</span></div><div class="line" id="195521"><span class="nick" style="color:#8dd3c7"><a href="#195521" label="[19:55:21]">&lt;oriansj&gt;</a></span><span class="message">even emacs and vim don't syntax highlight that correctly</span></div><div class="line" id="200139"><span class="nick" style="color:#8dd3c7"><a href="#200139" label="[20:01:39]">&lt;oriansj&gt;</a></span><span class="message">with the extra fun of sorting out the behavior of the # and ## operators</span></div><div class="line" id="200328"><span class="nick" style="color:#8dd3c7"><a href="#200328" label="[20:03:28]">&lt;oriansj&gt;</a></span><span class="message">as there seems to be a conflict in the standard in regards to maximal munch of tokens and # ## #</span></div><div class="line" id="200741"><span class="nick" style="color:#8dd3c7"><a href="#200741" label="[20:07:41]">&lt;oriansj&gt;</a></span><span class="message">fortunately it doesn't occur in GCC's code at all and ## and # never appear to show up on the same line</span></div><div class="line" id="200810"><span class="nick" style="color:#8dd3c7"><a href="#200810" label="[20:08:10]">&lt;oriansj&gt;</a></span><span class="message">So I'll be sticking with GCC's maximal munch behavior</span></div><div class="line" id="202216"><span class="nick" style="color:#389600"><a href="#202216" label="[20:22:16]">&lt;stikonas&gt;</a></span><span class="message">well, editors are definitely not as good as compilers at interpreting C syntax</span></div><div class="line" id="202908"><span class="nick" style="color:#8dd3c7"><a href="#202908" label="[20:29:08]">&lt;oriansj&gt;</a></span><span class="message">fair C has a good few strange rules</span></div><div class="line" id="203447"><span class="nick" style="color:#8dd3c7"><a href="#203447" label="[20:34:47]">&lt;oriansj&gt;</a></span><span class="message">although I think I need to unify the token_list and macro_list types to save myself some pain</span></div><div class="line" id="203714"><span class="nick" style="color:#8dd3c7"><a href="#203714" label="[20:37:14]">&lt;oriansj&gt;</a></span><span class="message">but first lets hack thing into a useful state</span></div><div class="line" id="212453"><span class="nick" style="color:#8dd3c7"><a href="#212453" label="[21:24:53]">&lt;oriansj&gt;</a></span><span class="message">so close, just need to wire up the #include logic to eat the line and inject the newly processed list</span></div><div class="line" id="213155"><span class="nick" style="color:#8dd3c7"><a href="#213155" label="[21:31:55]">&lt;oriansj&gt;</a></span><span class="message">and with a minor tweak you can identify each file being expanded and walk through them using --display-token-stage</span></div><div class="line" id="220418"><span class="nick" style="color:#8dd3c7"><a href="#220418" label="[22:04:18]">&lt;oriansj&gt;</a></span><span class="message">does anyone know what the long form of -D is?</span></div><div class="line" id="220716"><span class="nick" style="color:#389600"><a href="#220716" label="[22:07:16]">&lt;stikonas&gt;</a></span><span class="message">does gcc even have long form -f -D?</span></div><div class="line" id="221041"><span class="nick" style="color:#8dd3c7"><a href="#221041" label="[22:10:41]">&lt;oriansj&gt;</a></span><span class="message">it doesn't look like it from the man page but it does look like it stands for define macro</span></div><div class="line" id="221059"><span class="nick" style="color:#8dd3c7"><a href="#221059" label="[22:10:59]">&lt;oriansj&gt;</a></span><span class="message">so I was thinking of doing --define-macro being equal to -D</span></div><div class="line" id="221202"><span class="nick" style="color:#389600"><a href="#221202" label="[22:12:02]">&lt;stikonas&gt;</a></span><span class="message">yeah, it probably does stand for define</span></div><div class="line" id="221221"><span class="nick" style="color:#389600"><a href="#221221" label="[22:12:21]">&lt;stikonas&gt;</a></span><span class="message">because -U undefines macro, so probably stands for #undefine</span></div><div class="line" id="221406"><span class="nick" style="color:#8dd3c7"><a href="#221406" label="[22:14:06]">&lt;oriansj&gt;</a></span><span class="message">should we add -U to M3-Preprocess ?</span></div><div class="line" id="221503"><span class="nick" style="color:#389600"><a href="#221503" label="[22:15:03]">&lt;stikonas&gt;</a></span><span class="message">hmm, not sure if we need it</span></div><div class="line" id="221503"><span class="nick" style="color:#389600"><a href="#221503" label="[22:15:03]">&lt;stikonas&gt;</a></span><span class="message">would be be hard to add?</span></div><div class="line" id="221504"><span class="nick" style="color:#389600"><a href="#221504" label="[22:15:04]">&lt;stikonas&gt;</a></span><span class="message">I would imagine it shouldn't be too hard</span></div><div class="line" id="221528"><span class="nick" style="color:#8dd3c7"><a href="#221528" label="[22:15:28]">&lt;oriansj&gt;</a></span><span class="message">probably not</span></div><div class="line" id="221533"><span class="nick" style="color:#389600"><a href="#221533" label="[22:15:33]">&lt;stikonas&gt;</a></span><span class="message">though there are some corner cases</span></div><div class="line" id="221545"><span class="nick" style="color:#389600"><a href="#221545" label="[22:15:45]">&lt;stikonas&gt;</a></span><span class="message">what happens if one writes -Ddef -Udef</span></div><div class="line" id="221621"><span class="nick" style="color:#8dd3c7"><a href="#221621" label="[22:16:21]">&lt;oriansj&gt;</a></span><span class="message">or does -Udef apply to all defines inside #includes?</span></div><div class="line" id="221658"><span class="nick" style="color:#389600"><a href="#221658" label="[22:16:58]">&lt;stikonas&gt;</a></span><span class="message">probably...</span></div><div class="line" id="221703"><span class="nick" style="color:#389600"><a href="#221703" label="[22:17:03]">&lt;stikonas&gt;</a></span><span class="message">same as -D</span></div><div class="line" id="221736"><span class="nick" style="color:#389600"><a href="#221736" label="[22:17:36]">&lt;stikonas&gt;</a></span><span class="message">I don't see any explicit use of -U in live-bootstrap until close to the end (perl 5.32) where we have gcc anyway</span></div><div class="line" id="221807"><span class="nick" style="color:#389600"><a href="#221807" label="[22:18:07]">&lt;stikonas&gt;</a></span><span class="message">and it was used for -U__DATE__ -U__TIME__</span></div><div class="line" id="221815"><span class="nick" style="color:#8dd3c7"><a href="#221815" label="[22:18:15]">&lt;oriansj&gt;</a></span><span class="message">which is needed to make them reproducible</span></div><div class="line" id="221827"><span class="nick" style="color:#389600"><a href="#221827" label="[22:18:27]">&lt;stikonas&gt;</a></span><span class="message">yes, but that's well past the time we start using gcc</span></div><div class="line" id="221831"><span class="nick" style="color:#389600"><a href="#221831" label="[22:18:31]">&lt;stikonas&gt;</a></span><span class="message">so I suspect we won't need -U</span></div><div class="line" id="221846"><span class="nick" style="color:#8dd3c7"><a href="#221846" label="[22:18:46]">&lt;oriansj&gt;</a></span><span class="message">so good point and we can skip it until we have to fix it later</span></div><div class="line" id="221846"><span class="nick" style="color:#389600"><a href="#221846" label="[22:18:46]">&lt;stikonas&gt;</a></span><span class="message">you can always revisit it if we need it</span></div><div class="line" id="221855"><span class="nick" style="color:#8dd3c7"><a href="#221855" label="[22:18:55]">&lt;oriansj&gt;</a></span><span class="message">indeed</span></div><div class="line" id="221855"><span class="nick" style="color:#389600"><a href="#221855" label="[22:18:55]">&lt;stikonas&gt;</a></span><span class="message">indeed...</span></div><div class="line" id="221900"><span class="nick" style="color:#8dd3c7"><a href="#221900" label="[22:19:00]">&lt;oriansj&gt;</a></span><span class="message">^_^</span></div><div class="line" id="221942"><span class="nick" style="color:#389600"><a href="#221942" label="[22:19:42]">&lt;stikonas&gt;</a></span><span class="message">at some point later, perhaps you can try running your preprocessor on some real software and then try to feed output to gcc</span></div><div class="line" id="221944"><span class="nick" style="color:#389600"><a href="#221944" label="[22:19:44]">&lt;stikonas&gt;</a></span><span class="message">?</span></div><div class="line" id="222023"><span class="nick" style="color:#389600"><a href="#222023" label="[22:20:23]">&lt;stikonas&gt;</a></span><span class="message">that might help you notice any missing features that we need</span></div><div class="line" id="222431"><span class="nick" style="color:#8dd3c7"><a href="#222431" label="[22:24:31]">&lt;oriansj&gt;</a></span><span class="message">good idea</span></div><div class="line" id="225401"><span class="nick" style="color:#8dd3c7"><a href="#225401" label="[22:54:01]">&lt;oriansj&gt;</a></span><span class="message">finally got #include to work correctly</span></div><div class="line" id="225453"><span class="nick" style="color:#8dd3c7"><a href="#225453" label="[22:54:53]">&lt;oriansj&gt;</a></span><span class="message">now to figure out why the # 0 file lines disappeared</span></div><div class="line" id="232753"><span class="nick" style="color:#8dd3c7"><a href="#232753" label="[23:27:53]">&lt;oriansj&gt;</a></span><span class="message">now one should be able to do: ./bin/M3-Preprocess -D __M2__  --architecture x86 --c-preprocess --include-library-directory M2libc -f foo.c and get meaningful output</span></div><div class="line" id="233313"><span class="nick" style="color:#8dd3c7"><a href="#233313" label="[23:33:13]">&lt;oriansj&gt;</a></span><span class="message">now to start filling in the C preprocessor features needed to build musl libc</span></div><div class="line" id="233526"><span class="nick" style="color:#8dd3c7"><a href="#233526" label="[23:35:26]">&lt;oriansj&gt;</a></span><span class="message">looks like we have a long way to go: <a rel="nofollow" href="https://paste.debian.net/1255098/">https://paste.debian.net/1255098/</a> </span></div><div class="line" id="234834"><span class="nick" style="color:#8dd3c7"><a href="#234834" label="[23:48:34]">&lt;oriansj&gt;</a></span><span class="message">hmmm musl seems to reference alltypes.h which appears to be 100% generated from autools</span></div><div class="line" id="235045"><span class="nick" style="color:#389600"><a href="#235045" label="[23:50:45]">&lt;stikonas&gt;</a></span><span class="message">hmm, let's check...</span></div><div class="line" id="235050"><span class="nick" style="color:#8dd3c7"><a href="#235050" label="[23:50:50]">&lt;oriansj&gt;</a></span><span class="message">and might have to add logic for searching down multiple library paths to find the source code as some is in obj/include/ and others is in include/</span></div><div class="line" id="235127"><span class="nick" style="color:#8dd3c7"><a href="#235127" label="[23:51:27]">&lt;oriansj&gt;</a></span><span class="message">easy to check with: ./bin/M3-Preprocess  --architecture x86 --c-preprocess --include-library-directory ../musl/include/ -f foo.c</span></div><div class="line" id="235301"><span class="nick" style="color:#389600"><a href="#235301" label="[23:53:01]">&lt;stikonas&gt;</a></span><span class="message">ok, but it's generated, at least it's not pre-generated</span></div><br /></div></body></html>