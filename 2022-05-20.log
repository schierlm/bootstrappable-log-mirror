<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-05-20.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="001505"><span class="nick" style="color:#8dd3c7"><a href="#001505" label="[00:15:05]">&lt;oriansj&gt;</a></span><span class="message">for example if the types out of box were: uint32_t, int32_t, uint16_t, int16_t, uint8_t, int8_t, float64_t, float32_t, float16_t with REGISTER_INTEGER/REGISTER_FLOAT available but hidden so that it is only used in the very special case performance libraries and kernels which need it.</span></div><div class="line" id="002034"><span class="nick" style="color:#2e2a4a"><a href="#002034" label="[00:20:34]">&lt;Hagfish&gt;</a></span><span class="message">oriansj: yeah, the constraints of making the instructions printable basically force all programs to be obfuscated</span></div><div class="line" id="002118"><span class="nick" style="color:#2e2a4a"><a href="#002118" label="[00:21:18]">&lt;Hagfish&gt;</a></span><span class="message">in fact, in a sense, it forces programs to be underhanded too, because it deliberately blurs the boundary be code/data/comments/strings</span></div><div class="line" id="002126"><span class="nick" style="color:#2e2a4a"><a href="#002126" label="[00:21:26]">&lt;Hagfish&gt;</a></span><span class="message">*between</span></div><div class="line" id="002905"><span class="nick" style="color:#8dd3c7"><a href="#002905" label="[00:29:05]">&lt;oriansj&gt;</a></span><span class="message">also int 0x80 is: CD80 and syscall is: 0F05 so not possible to do anything on POSIX without non-ascii printable chars</span></div><div class="line" id="004100"><span class="nick" style="color:#2e2a4a"><a href="#004100" label="[00:41:00]">&lt;Hagfish&gt;</a></span><span class="message">unless you remove the &quot;hard mode&quot; constraint right?  self-modifying code means you can (eventually) run whatever you want, i'm guessing</span></div><div class="line" id="004509"><span class="nick" style="color:#8dd3c7"><a href="#004509" label="[00:45:09]">&lt;oriansj&gt;</a></span><span class="message">Hagfish: well, yeah once you go self-modifying code throw everything you can assume about the code straight into the garbage.</span></div><div class="line" id="004639"><span class="nick" style="color:#8dd3c7"><a href="#004639" label="[00:46:39]">&lt;oriansj&gt;</a></span><span class="message">never trust self-modifying even if you wrote it yourself.</span></div><div class="line" id="011306"><span class="nick" style="color:#2e2a4a"><a href="#011306" label="[01:13:06]">&lt;Hagfish&gt;</a></span><span class="message">in fact, i'd say that anyone who can write self-modifying code is extremely sus (but that may be because i've never tried)</span></div><div class="line" id="014536"><span class="nick" style="color:#8dd3c7"><a href="#014536" label="[01:45:36]">&lt;oriansj&gt;</a></span><span class="message">well it was a skill required for fitting major programs in 1Kw of RAM</span></div><div class="line" id="103232"><span class="nick" style="color:#6b8072"><a href="#103232" label="[10:32:32]">&lt;midgardian[m]&gt;</a></span><span class="message">Greetings oh noble bootstrappers!!</span></div><div class="line" id="103749"><span class="nick" style="color:#80b1d3"><a href="#103749" label="[10:37:49]">&lt;stikonas&gt;</a></span><span class="message">midgardian[m]: welcome</span></div><div class="line" id="122111"><span class="nick" style="color:#6d2462"><a href="#122111" label="[12:21:11]">&lt;doras&gt;</a></span><span class="message">stikonas: how do you suggest I approach updating mes? I want to test your MR that puts symlinks inside the tar archives to confirm it doesn't introduce any issues with the bwrap bootstrap, but the SUID issue keeps me from updating to the tip of master.</span></div><div class="line" id="122301"><span class="nick" style="color:#6d2462"><a href="#122301" label="[12:23:01]">&lt;doras&gt;</a></span><span class="message">mes doesn't have an official tarball for this commit, and we can't apply patches this early in the bootstrap (if I'm not mistaken).</span></div><div class="line" id="122316"><span class="nick" style="color:#80b1d3"><a href="#122316" label="[12:23:16]">&lt;stikonas&gt;</a></span><span class="message">doras: so I think you need to 1. switch to new download url in sysa.py (git snapshot of required commit), 2. Update value of MES_PKG in sysa/after.kaem</span></div><div class="line" id="122351"><span class="nick" style="color:#80b1d3"><a href="#122351" label="[12:23:51]">&lt;stikonas&gt;</a></span><span class="message">and then run a few times until you get passed initial kaem stages (each time updating checksums)</span></div><div class="line" id="122520"><span class="nick" style="color:#6d2462"><a href="#122520" label="[12:25:20]">&lt;doras&gt;</a></span><span class="message">It seems there's this. so that should cover it: <a rel="nofollow" href="http://git.savannah.gnu.org/cgit/mes.git/snapshot/mes-aa5f1533e1736a89e60d2c34c2a0ab3b01f8d037.tar.gz">http://git.savannah.gnu.org/cgit/mes.git/snapshot/mes-aa5f1533e1736a89e60d2c34c2a0ab3b01f8d037.tar.gz</a> </span></div><div class="line" id="122616"><span class="nick" style="color:#6d2462"><a href="#122616" label="[12:26:16]">&lt;doras&gt;</a></span><span class="message">stikonas: why does it require multiple bootstraps? Can't I disable the early checksum checks and update them manually later?</span></div><div class="line" id="122632"><span class="nick" style="color:#80b1d3"><a href="#122632" label="[12:26:32]">&lt;stikonas&gt;</a></span><span class="message">doras: no, you can't disable early checksums right now</span></div><div class="line" id="122635"><span class="nick" style="color:#80b1d3"><a href="#122635" label="[12:26:35]">&lt;stikonas&gt;</a></span><span class="message">you can try to implement it</span></div><div class="line" id="122640"><span class="nick" style="color:#80b1d3"><a href="#122640" label="[12:26:40]">&lt;stikonas&gt;</a></span><span class="message">but it's not easy in kaem</span></div><div class="line" id="122656"><span class="nick" style="color:#80b1d3"><a href="#122656" label="[12:26:56]">&lt;stikonas&gt;</a></span><span class="message">kaem does have conditionals now (if, elif, fi)</span></div><div class="line" id="122702"><span class="nick" style="color:#80b1d3"><a href="#122702" label="[12:27:02]">&lt;stikonas&gt;</a></span><span class="message">but there is no test command</span></div><div class="line" id="122738"><span class="nick" style="color:#80b1d3"><a href="#122738" label="[12:27:38]">&lt;stikonas&gt;</a></span><span class="message">(at least not until you build coreutils)</span></div><div class="line" id="122758"><span class="nick" style="color:#80b1d3"><a href="#122758" label="[12:27:58]">&lt;stikonas&gt;</a></span><span class="message">we do have match command in stage0-posix to compare to strings</span></div><div class="line" id="122802"><span class="nick" style="color:#80b1d3"><a href="#122802" label="[12:28:02]">&lt;stikonas&gt;</a></span><span class="message">so that might be used</span></div><div class="line" id="122827"><span class="nick" style="color:#80b1d3"><a href="#122827" label="[12:28:27]">&lt;stikonas&gt;</a></span><span class="message">but then you need to get them into kaem script</span></div><div class="line" id="122835"><span class="nick" style="color:#80b1d3"><a href="#122835" label="[12:28:35]">&lt;stikonas&gt;</a></span><span class="message">and right now kaem does not support sourcing</span></div><div class="line" id="123147"><span class="nick" style="color:#80b1d3"><a href="#123147" label="[12:31:47]">&lt;stikonas&gt;</a></span><span class="message">doras: you can try to &quot;emulate sourcing with catm&quot;</span></div><div class="line" id="123210"><span class="nick" style="color:#80b1d3"><a href="#123210" label="[12:32:10]">&lt;stikonas&gt;</a></span><span class="message">catm new_script.kaem bootstrap.cfg old_script.kaem</span></div><div class="line" id="123946"><span class="nick" style="color:#6d2462"><a href="#123946" label="[12:39:46]">&lt;doras&gt;</a></span><span class="message">stikonas: can the early sha256sum create checksum files, or only compare?</span></div><div class="line" id="124051"><span class="nick" style="color:#6d2462"><a href="#124051" label="[12:40:51]">&lt;doras&gt;</a></span><span class="message">Sounds like maybe we need this commit first: <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/commit/c2f72f4e9e8c1ae260e13cbe48d7b8eb5fb171a2">https://github.com/oriansj/stage0-posix/commit/c2f72f4e9e8c1ae260e13cbe48d7b8eb5fb171a2</a> </span></div><div class="line" id="124249"><span class="nick" style="color:#6d2462"><a href="#124249" label="[12:42:49]">&lt;doras&gt;</a></span><span class="message">Or maybe it's only relevant to stage0-posix internally.</span></div><div class="line" id="124319"><span class="nick" style="color:#6d2462"><a href="#124319" label="[12:43:19]">&lt;doras&gt;</a></span><span class="message">Yeah, it seems so.</span></div><div class="line" id="124601"><span class="nick" style="color:#6d2462"><a href="#124601" label="[12:46:01]">&lt;doras&gt;</a></span><span class="message">I think I'll just comment out the checksum command for now so the bootstrap doesn't fail, and then create the new hashes when the bootstrap is done.</span></div><div class="line" id="124618"><span class="nick" style="color:#80b1d3"><a href="#124618" label="[12:46:18]">&lt;stikonas&gt;</a></span><span class="message">doras: it can do both</span></div><div class="line" id="124637"><span class="nick" style="color:#80b1d3"><a href="#124637" label="[12:46:37]">&lt;stikonas&gt;</a></span><span class="message">doras: you won't be able to create new hashes later</span></div><div class="line" id="124646"><span class="nick" style="color:#80b1d3"><a href="#124646" label="[12:46:46]">&lt;stikonas&gt;</a></span><span class="message">almost all of the early binaries are overwritten</span></div><div class="line" id="124655"><span class="nick" style="color:#80b1d3"><a href="#124655" label="[12:46:55]">&lt;stikonas&gt;</a></span><span class="message">with new versions or compiled against musl</span></div><div class="line" id="124659"><span class="nick" style="color:#6d2462"><a href="#124659" label="[12:46:59]">&lt;doras&gt;</a></span><span class="message">I see.</span></div><div class="line" id="124739"><span class="nick" style="color:#6d2462"><a href="#124739" label="[12:47:39]">&lt;doras&gt;</a></span><span class="message">So I'll try to hardcode the checksum creation instead of the checksum compare, and maybe make it a conditional afterwards.</span></div><div class="line" id="125054"><span class="nick" style="color:#6d2462"><a href="#125054" label="[12:50:54]">&lt;doras&gt;</a></span><span class="message">stikonas: do you think we need to list all files individually like the commit above did?</span></div><div class="line" id="125126"><span class="nick" style="color:#6d2462"><a href="#125126" label="[12:51:26]">&lt;doras&gt;</a></span><span class="message">Sounds like using * may not be deterministic.</span></div><div class="line" id="125136"><span class="nick" style="color:#80b1d3"><a href="#125136" label="[12:51:36]">&lt;stikonas&gt;</a></span><span class="message">there is no * in keam</span></div><div class="line" id="125145"><span class="nick" style="color:#80b1d3"><a href="#125145" label="[12:51:45]">&lt;stikonas&gt;</a></span><span class="message">that * from stage0-posix is from outside bash</span></div><div class="line" id="125203"><span class="nick" style="color:#6d2462"><a href="#125203" label="[12:52:03]">&lt;doras&gt;</a></span><span class="message">Oh, right.</span></div><div class="line" id="125211"><span class="nick" style="color:#80b1d3"><a href="#125211" label="[12:52:11]">&lt;stikonas&gt;</a></span><span class="message">but most early stuff only has 1 binary</span></div><div class="line" id="125212"><span class="nick" style="color:#6d2462"><a href="#125212" label="[12:52:12]">&lt;doras&gt;</a></span><span class="message">So I'll list all them.</span></div><div class="line" id="125214"><span class="nick" style="color:#80b1d3"><a href="#125214" label="[12:52:14]">&lt;stikonas&gt;</a></span><span class="message">except for coreutils</span></div><div class="line" id="125253"><span class="nick" style="color:#80b1d3"><a href="#125253" label="[12:52:53]">&lt;stikonas&gt;</a></span><span class="message">* would need extra syscalls in kaem</span></div><div class="line" id="125332"><span class="nick" style="color:#80b1d3"><a href="#125332" label="[12:53:32]">&lt;stikonas&gt;</a></span><span class="message">also redirects and command capture requires more syscalls</span></div><div class="line" id="125414"><span class="nick" style="color:#80b1d3"><a href="#125414" label="[12:54:14]">&lt;stikonas&gt;</a></span><span class="message">doras: but it's still not completely clear what to do</span></div><div class="line" id="125440"><span class="nick" style="color:#80b1d3"><a href="#125440" label="[12:54:40]">&lt;stikonas&gt;</a></span><span class="message">you don't have access to redirects in kaem</span></div><div class="line" id="125440"><span class="nick" style="color:#80b1d3"><a href="#125440" label="[12:54:40]">&lt;stikonas&gt;</a></span><span class="message">so can't do sha256sum file &gt; file.checksum</span></div><div class="line" id="125454"><span class="nick" style="color:#6d2462"><a href="#125454" label="[12:54:54]">&lt;doras&gt;</a></span><span class="message">Oh</span></div><div class="line" id="125458"><span class="nick" style="color:#80b1d3"><a href="#125458" label="[12:54:58]">&lt;stikonas&gt;</a></span><span class="message">you can extend sha256sum to have an argument to write to file</span></div><div class="line" id="125500"><span class="nick" style="color:#80b1d3"><a href="#125500" label="[12:55:00]">&lt;stikonas&gt;</a></span><span class="message">like -o file</span></div><div class="line" id="125600"><span class="nick" style="color:#6d2462"><a href="#125600" label="[12:56:00]">&lt;doras&gt;</a></span><span class="message">What good is there in calculating a hash without being able to write it to a file? :)</span></div><div class="line" id="125839"><span class="nick" style="color:#6d2462"><a href="#125839" label="[12:58:39]">&lt;doras&gt;</a></span><span class="message">stikonas: it looks like it does support -o: <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-extra/blob/adc619ef8f596e3b9c40782540ec8678c6243d0d/sha256sum.c#L505">https://github.com/oriansj/mescc-tools-extra/blob/adc619ef8f596e3b9c40782540ec8678c6243d0d/sha256sum.c#L505</a> </span></div><div class="line" id="125857"><span class="nick" style="color:#6d2462"><a href="#125857" label="[12:58:57]">&lt;doras&gt;</a></span><span class="message">Unless I'm not looking in the right place.</span></div><div class="line" id="133547"><span class="nick">***</span><span class="message notice">stikonas_ is now known as stikonas</span></div><div class="line" id="133603"><span class="nick" style="color:#80b1d3"><a href="#133603" label="[13:36:03]">&lt;stikonas&gt;</a></span><span class="message">yes, looks like it although ti was not documented in sha256sum --help</span></div><div class="line" id="133932"><span class="nick" style="color:#6d2462"><a href="#133932" label="[13:39:32]">&lt;doras&gt;</a></span><span class="message">Indeed.</span></div><div class="line" id="142629"><span class="nick" style="color:#6d2462"><a href="#142629" label="[14:26:29]">&lt;doras&gt;</a></span><span class="message">stikonas: in the qemu-based bootstrap, are all the files created during the sysa kaem scripts stage kept only in RAM? Are they accessible in any way from the host?</span></div><div class="line" id="142648"><span class="nick" style="color:#80b1d3"><a href="#142648" label="[14:26:48]">&lt;stikonas&gt;</a></span><span class="message">doras: no, they are all in RAM</span></div><div class="line" id="142655"><span class="nick" style="color:#80b1d3"><a href="#142655" label="[14:26:55]">&lt;stikonas&gt;</a></span><span class="message">only sysc is accessible from host</span></div><div class="line" id="144752"><span class="nick" style="color:#234e69"><a href="#144752" label="[14:47:52]">&lt;fossy&gt;</a></span><span class="message">doras: looking good, thx for PR</span></div><div class="line" id="144815"><span class="nick" style="color:#234e69"><a href="#144815" label="[14:48:15]">&lt;fossy&gt;</a></span><span class="message">stikonas: good find with the symlinks</span></div><div class="line" id="144846"><span class="nick" style="color:#80b1d3"><a href="#144846" label="[14:48:46]">&lt;stikonas&gt;</a></span><span class="message">yes, everything is much simpler now without .links packages</span></div><div class="line" id="144858"><span class="nick" style="color:#80b1d3"><a href="#144858" label="[14:48:58]">&lt;stikonas&gt;</a></span><span class="message">there was a lot of hacky scripting around it</span></div><div class="line" id="145056"><span class="nick" style="color:#234e69"><a href="#145056" label="[14:50:56]">&lt;fossy&gt;</a></span><span class="message">rickmasters, oriansj: IMO, we can keep builder-hex0 with a pretty small disk size (504MB more than sufficient), and worry about large disk size in 2nd-gen kernel in M2/tcc</span></div><div class="line" id="145137"><span class="nick" style="color:#234e69"><a href="#145137" label="[14:51:37]">&lt;fossy&gt;</a></span><span class="message">unfortunately tcc cannot build linux kernel, due to assembly</span></div><div class="line" id="145154"><span class="nick" style="color:#80b1d3"><a href="#145154" label="[14:51:54]">&lt;stikonas&gt;</a></span><span class="message">fossy: actually, what about tcc + binutils?</span></div><div class="line" id="145155"><span class="nick" style="color:#80b1d3"><a href="#145155" label="[14:51:55]">&lt;stikonas&gt;</a></span><span class="message">still can't?</span></div><div class="line" id="145234"><span class="nick" style="color:#80b1d3"><a href="#145234" label="[14:52:34]">&lt;stikonas&gt;</a></span><span class="message">in any case we need some kernel in M2</span></div><div class="line" id="145255"><span class="nick" style="color:#80b1d3"><a href="#145255" label="[14:52:55]">&lt;stikonas&gt;</a></span><span class="message">mes is a bit too heavy to run on builder-hex0</span></div><div class="line" id="145329"><span class="nick" style="color:#234e69"><a href="#145329" label="[14:53:29]">&lt;fossy&gt;</a></span><span class="message">yeah, builder-hex0 is not sustainable past M2, really</span></div><div class="line" id="145347"><span class="nick" style="color:#234e69"><a href="#145347" label="[14:53:47]">&lt;fossy&gt;</a></span><span class="message">(this is not a bad thing, we want to keep the hard-to-read hex0 code simple)</span></div><div class="line" id="145359"><span class="nick" style="color:#234e69"><a href="#145359" label="[14:53:59]">&lt;fossy&gt;</a></span><span class="message">im actually uncertain about tcc + binutils, that may work</span></div><div class="line" id="145415"><span class="nick" style="color:#6c3d55"><a href="#145415" label="[14:54:15]">&lt;rickmasters&gt;</a></span><span class="message">fossy, oriansj: at 504MB I think I can rearrange the kernel memory to support 1GB of memory files, .5G for source and executables, plus .5G for a memory disk image</span></div><div class="line" id="145434"><span class="nick" style="color:#234e69"><a href="#145434" label="[14:54:34]">&lt;fossy&gt;</a></span><span class="message">but if we can get binutils we can probably run gcc.. gcc isn't very &quot;syscall-intensive&quot;</span></div><div class="line" id="145449"><span class="nick" style="color:#80b1d3"><a href="#145449" label="[14:54:49]">&lt;stikonas&gt;</a></span><span class="message">that's true</span></div><div class="line" id="145451"><span class="nick" style="color:#6c3d55"><a href="#145451" label="[14:54:51]">&lt;rickmasters&gt;</a></span><span class="message">a memory disk image has the advantage of already supporting lseek</span></div><div class="line" id="145510"><span class="nick" style="color:#234e69"><a href="#145510" label="[14:55:10]">&lt;fossy&gt;</a></span><span class="message">thats an absolute ton of space, rickmasters, i can't see that much being used under builder-hex0</span></div><div class="line" id="145529"><span class="nick" style="color:#80b1d3"><a href="#145529" label="[14:55:29]">&lt;stikonas&gt;</a></span><span class="message">fossy: why do we have two different linux tarballs? Do we need newer linux-headers?</span></div><div class="line" id="145604"><span class="nick" style="color:#234e69"><a href="#145604" label="[14:56:04]">&lt;fossy&gt;</a></span><span class="message">not strictly required -- we can lock the versions together</span></div><div class="line" id="145624"><span class="nick" style="color:#6c3d55"><a href="#145624" label="[14:56:24]">&lt;rickmasters&gt;</a></span><span class="message">fossy: i agree is very likely overkill, and the tradeoff being more hardware requirements, but just saying it would be easy</span></div><div class="line" id="145625"><span class="nick" style="color:#234e69"><a href="#145625" label="[14:56:25]">&lt;fossy&gt;</a></span><span class="message">i think</span></div><div class="line" id="145630"><span class="nick" style="color:#80b1d3"><a href="#145630" label="[14:56:30]">&lt;stikonas&gt;</a></span><span class="message">that could reduce sysa download requirements by a lot</span></div><div class="line" id="145639"><span class="nick" style="color:#234e69"><a href="#145639" label="[14:56:39]">&lt;fossy&gt;</a></span><span class="message">true that</span></div><div class="line" id="154823"><span class="nick" style="color:#6d2462"><a href="#154823" label="[15:48:23]">&lt;doras&gt;</a></span><span class="message">stikonas: then I think I'll move the new checksums to sysc. Otherwise they can't be extracted.</span></div><div class="line" id="155030"><span class="nick" style="color:#80b1d3"><a href="#155030" label="[15:50:30]">&lt;stikonas&gt;</a></span><span class="message">doras: if you want, but they can be extracted in chroot mode</span></div><div class="line" id="155043"><span class="nick" style="color:#80b1d3"><a href="#155043" label="[15:50:43]">&lt;stikonas&gt;</a></span><span class="message">though other checksums are not available in chroot mode</span></div><div class="line" id="155054"><span class="nick" style="color:#80b1d3"><a href="#155054" label="[15:50:54]">&lt;stikonas&gt;</a></span><span class="message">(linux and kexec-tools)</span></div><div class="line" id="160041"><span class="nick" style="color:#6d2462"><a href="#160041" label="[16:00:41]">&lt;doras&gt;</a></span><span class="message">Running only two bootstraps is still better. I'll stop thebootstrap after the kaem stage completes, update the hashes, then continue with a qemu bootstrap.</span></div><div class="line" id="160102"><span class="nick" style="color:#6d2462"><a href="#160102" label="[16:01:02]">&lt;doras&gt;</a></span><span class="message">But yeah, I can also just move the checksum files to sysc.</span></div><div class="line" id="160123"><span class="nick" style="color:#6d2462"><a href="#160123" label="[16:01:23]">&lt;doras&gt;</a></span><span class="message">Though they all use the same name at the moment, so they can't be put in the same directory.</span></div><div class="line" id="161723"><span class="nick" style="color:#6d2462"><a href="#161723" label="[16:17:23]">&lt;doras&gt;</a></span><span class="message">A test run shows that the checksums are calculated and can be written to files correctly.</span></div><div class="line" id="161940"><span class="nick" style="color:#6d2462"><a href="#161940" label="[16:19:40]">&lt;doras&gt;</a></span><span class="message">fossy, stikonas, do you mind if I rename the checksum files to ${pkg}.checksum or anything along these lines?</span></div><div class="line" id="162343"><span class="nick" style="color:#6d2462"><a href="#162343" label="[16:23:43]">&lt;doras&gt;</a></span><span class="message">I'm not sure if I'll have any PR of any of this in the end, but I'm wondering about the general concept. Basically use the ${pkg}.checksum name for the checksum files, and when --update-checksums is used, we create and write the checksum files to /usr/src. This would allow them to end up in sysc's /usr/src and be extracted easily.</span></div><div class="line" id="162458"><span class="nick" style="color:#80b1d3"><a href="#162458" label="[16:24:58]">&lt;stikonas&gt;</a></span><span class="message">doras: I'm fine with ${pkg} checksum, especially if they are auto-updated</span></div><div class="line" id="162528"><span class="nick" style="color:#80b1d3"><a href="#162528" label="[16:25:28]">&lt;stikonas&gt;</a></span><span class="message">hopefully we don't need revisions so early in the bootstrap</span></div><div class="line" id="162558"><span class="nick" style="color:#80b1d3"><a href="#162558" label="[16:25:58]">&lt;stikonas&gt;</a></span><span class="message">bash thingy uses ${pkg}_${rev} but we can't do this with kaem</span></div><div class="line" id="162702"><span class="nick" style="color:#6d2462"><a href="#162702" label="[16:27:02]">&lt;doras&gt;</a></span><span class="message">Having a unified file containing all checksums would definitely be better though, but we'll probably need additional functionality from stage0-posix to accomplish this.</span></div><div class="line" id="162717"><span class="nick" style="color:#6d2462"><a href="#162717" label="[16:27:17]">&lt;doras&gt;</a></span><span class="message">Maybe an --ignore-missing option for sha256sum.</span></div><div class="line" id="173450"><span class="nick" style="color:#6d2462"><a href="#173450" label="[17:34:50]">&lt;doras&gt;</a></span><span class="message">stikonas: so is catm our only viable option? It conflicts with the *.kaem script hashbang.</span></div><div class="line" id="173519"><span class="nick" style="color:#6d2462"><a href="#173519" label="[17:35:19]">&lt;doras&gt;</a></span><span class="message">Also sometimes called shebang :)</span></div><div class="line" id="173542"><span class="nick" style="color:#80b1d3"><a href="#173542" label="[17:35:42]">&lt;stikonas&gt;</a></span><span class="message">doras: why does it conflict?</span></div><div class="line" id="173604"><span class="nick" style="color:#80b1d3"><a href="#173604" label="[17:36:04]">&lt;stikonas&gt;</a></span><span class="message">you run catm in the previous kaem script...</span></div><div class="line" id="173735"><span class="nick" style="color:#6d2462"><a href="#173735" label="[17:37:35]">&lt;doras&gt;</a></span><span class="message">I mean, each ${pkg}.kaem file starts with #!/bin/sh. If we cat it with the bootstrap.cfg, the shebang would not be at the top of the file.</span></div><div class="line" id="173816"><span class="nick" style="color:#80b1d3"><a href="#173816" label="[17:38:16]">&lt;stikonas&gt;</a></span><span class="message">you can do that with some higher level kaem file</span></div><div class="line" id="173833"><span class="nick" style="color:#6d2462"><a href="#173833" label="[17:38:33]">&lt;doras&gt;</a></span><span class="message">Maybe I don't understand what catm does. Is it not simply &quot;cat&quot;?</span></div><div class="line" id="173838"><span class="nick" style="color:#80b1d3"><a href="#173838" label="[17:38:38]">&lt;stikonas&gt;</a></span><span class="message">it is</span></div><div class="line" id="173856"><span class="nick" style="color:#80b1d3"><a href="#173856" label="[17:38:56]">&lt;stikonas&gt;</a></span><span class="message">it's catm output file input file1 [input  file2...]</span></div><div class="line" id="173908"><span class="nick" style="color:#80b1d3"><a href="#173908" label="[17:39:08]">&lt;stikonas&gt;</a></span><span class="message">but shebang is just a comment</span></div><div class="line" id="173923"><span class="nick" style="color:#80b1d3"><a href="#173923" label="[17:39:23]">&lt;stikonas&gt;</a></span><span class="message">it's ignored by shell</span></div><div class="line" id="173937"><span class="nick" style="color:#80b1d3"><a href="#173937" label="[17:39:37]">&lt;stikonas&gt;</a></span><span class="message">shebang only matters if we invoke it via program loader</span></div><div class="line" id="173945"><span class="nick" style="color:#6d2462"><a href="#173945" label="[17:39:45]">&lt;doras&gt;</a></span><span class="message">So you're saying I can safely remove it?</span></div><div class="line" id="174001"><span class="nick" style="color:#80b1d3"><a href="#174001" label="[17:40:01]">&lt;stikonas&gt;</a></span><span class="message">well, we have it at the top of the files for other reasons</span></div><div class="line" id="174003"><span class="nick" style="color:#6d2462"><a href="#174003" label="[17:40:03]">&lt;doras&gt;</a></span><span class="message">Or ignore its existence in the middle of the file?</span></div><div class="line" id="174017"><span class="nick" style="color:#80b1d3"><a href="#174017" label="[17:40:17]">&lt;stikonas&gt;</a></span><span class="message">e.g. for text editor highlighting</span></div><div class="line" id="174032"><span class="nick" style="color:#80b1d3"><a href="#174032" label="[17:40:32]">&lt;stikonas&gt;</a></span><span class="message">you'll only have its existance in the middle of the file at run-time</span></div><div class="line" id="174034"><span class="nick" style="color:#80b1d3"><a href="#174034" label="[17:40:34]">&lt;stikonas&gt;</a></span><span class="message">not in the repo</span></div><div class="line" id="174115"><span class="nick" style="color:#6d2462"><a href="#174115" label="[17:41:15]">&lt;doras&gt;</a></span><span class="message">I see.</span></div><div class="line" id="174127"><span class="nick" style="color:#6d2462"><a href="#174127" label="[17:41:27]">&lt;doras&gt;</a></span><span class="message">So I'll ignore this fact.</span></div><div class="line" id="174127"><span class="nick" style="color:#80b1d3"><a href="#174127" label="[17:41:27]">&lt;stikonas&gt;</a></span><span class="message">yes</span></div><div class="line" id="174138"><span class="nick" style="color:#6d2462"><a href="#174138" label="[17:41:38]">&lt;doras&gt;</a></span><span class="message">But in general, catm is our only viable option, right?</span></div><div class="line" id="174147"><span class="nick" style="color:#6d2462"><a href="#174147" label="[17:41:47]">&lt;doras&gt;</a></span><span class="message">It feels a bit hacky.</span></div><div class="line" id="174201"><span class="nick" style="color:#80b1d3"><a href="#174201" label="[17:42:01]">&lt;stikonas&gt;</a></span><span class="message">well, without much coding I think that's the only option</span></div><div class="line" id="174208"><span class="nick" style="color:#6d2462"><a href="#174208" label="[17:42:08]">&lt;doras&gt;</a></span><span class="message">But if it's the only way, I'll go with it.</span></div><div class="line" id="174211"><span class="nick" style="color:#80b1d3"><a href="#174211" label="[17:42:11]">&lt;stikonas&gt;</a></span><span class="message">otherwise you'll have to implement source'ing</span></div><div class="line" id="174215"><span class="nick" style="color:#80b1d3"><a href="#174215" label="[17:42:15]">&lt;stikonas&gt;</a></span><span class="message">well, just do it once</span></div><div class="line" id="174237"><span class="nick" style="color:#80b1d3"><a href="#174237" label="[17:42:37]">&lt;stikonas&gt;</a></span><span class="message">e.g. move most of the stuff in after.kaem to run.kaem</span></div><div class="line" id="174303"><span class="nick" style="color:#80b1d3"><a href="#174303" label="[17:43:03]">&lt;stikonas&gt;</a></span><span class="message">and in after.kaem do</span></div><div class="line" id="174304"><span class="nick" style="color:#80b1d3"><a href="#174304" label="[17:43:04]">&lt;stikonas&gt;</a></span><span class="message">catm run2.kaem bootstrap.cfg run.kaem</span></div><div class="line" id="174317"><span class="nick" style="color:#80b1d3"><a href="#174317" label="[17:43:17]">&lt;stikonas&gt;</a></span><span class="message">kaem --file run2.kaem</span></div><div class="line" id="174321"><span class="nick" style="color:#80b1d3"><a href="#174321" label="[17:43:21]">&lt;stikonas&gt;</a></span><span class="message">and I think that should work</span></div><div class="line" id="174847"><span class="nick" style="color:#6d2462"><a href="#174847" label="[17:48:47]">&lt;doras&gt;</a></span><span class="message">Ah, that's indeed a better idea.</span></div><div class="line" id="175350"><span class="nick" style="color:#6d2462"><a href="#175350" label="[17:53:50]">&lt;doras&gt;</a></span><span class="message">stikonas: do all &quot;normal&quot; variables considered environment variables by kaem?</span></div><div class="line" id="175402"><span class="nick" style="color:#80b1d3"><a href="#175402" label="[17:54:02]">&lt;stikonas&gt;</a></span><span class="message">yes</span></div><div class="line" id="175413"><span class="nick" style="color:#80b1d3"><a href="#175413" label="[17:54:13]">&lt;stikonas&gt;</a></span><span class="message">everything is exported</span></div><div class="line" id="183740"><span class="nick" style="color:#6d2462"><a href="#183740" label="[18:37:40]">&lt;doras&gt;</a></span><span class="message">It looks like kaem is fine with executing scripts that don't have the executable bit set.</span></div><div class="line" id="183847"><span class="nick" style="color:#6d2462"><a href="#183847" label="[18:38:47]">&lt;doras&gt;</a></span><span class="message">I'll set it anyway in case this ever changes.</span></div><div class="line" id="183955"><span class="nick" style="color:#6d2462"><a href="#183955" label="[18:39:55]">&lt;doras&gt;</a></span><span class="message">I'm ~80% done, but I'll need to continue later.</span></div><div class="line" id="184032"><span class="nick" style="color:#6d2462"><a href="#184032" label="[18:40:32]">&lt;doras&gt;</a></span><span class="message">It ended up being a nice improvement</span></div><div class="line" id="184136"><span class="nick" style="color:#80b1d3"><a href="#184136" label="[18:41:36]">&lt;stikonas&gt;</a></span><span class="message">doras: it's not just kaem</span></div><div class="line" id="184146"><span class="nick" style="color:#80b1d3"><a href="#184146" label="[18:41:46]">&lt;stikonas&gt;</a></span><span class="message">bash is also fine</span></div><div class="line" id="184203"><span class="nick" style="color:#6d2462"><a href="#184203" label="[18:42:03]">&lt;doras&gt;</a></span><span class="message">Really? Interesting.</span></div><div class="line" id="184206"><span class="nick" style="color:#80b1d3"><a href="#184206" label="[18:42:06]">&lt;stikonas&gt;</a></span><span class="message">executable bit matters only if you run something via ./script</span></div><div class="line" id="184211"><span class="nick" style="color:#80b1d3"><a href="#184211" label="[18:42:11]">&lt;stikonas&gt;</a></span><span class="message">but not via interpreter script</span></div><div class="line" id="184242"><span class="nick" style="color:#80b1d3"><a href="#184242" label="[18:42:42]">&lt;stikonas&gt;</a></span><span class="message">when you run it via ./script then it goes to kernel and kernel checks executable bit</span></div><div class="line" id="184257"><span class="nick" style="color:#80b1d3"><a href="#184257" label="[18:42:57]">&lt;stikonas&gt;</a></span><span class="message">in all other cases you run executable interpreter and it simply opens the file</span></div><div class="line" id="184646"><span class="nick" style="color:#d9d9d9"><a href="#184646" label="[18:46:46]">&lt;janneke&gt;</a></span><span class="message">oh my, there is no bootstrap-seed for arm yet!</span></div><div class="line" id="185400"><span class="nick" style="color:#80b1d3"><a href="#185400" label="[18:54:00]">&lt;stikonas&gt;</a></span><span class="message">janneke: no, we only have higher level prototypes for arm in stage0-posix</span></div><div class="line" id="185437"><span class="nick" style="color:#80b1d3"><a href="#185437" label="[18:54:37]">&lt;stikonas&gt;</a></span><span class="message">only GAS .S files <a rel="nofollow" href="https://github.com/oriansj/stage0-posix-armv7l/tree/a45daabc870825f86f2c6af795eb4df8a31ac5c2/GAS">https://github.com/oriansj/stage0-posix-armv7l/tree/a45daabc870825f86f2c6af795eb4df8a31ac5c2/GAS</a> </span></div><div class="line" id="185459"><span class="nick" style="color:#d9d9d9"><a href="#185459" label="[18:54:59]">&lt;janneke&gt;</a></span><span class="message">stikonas: right</span></div><div class="line" id="185535"><span class="nick" style="color:#80b1d3"><a href="#185535" label="[18:55:35]">&lt;stikonas&gt;</a></span><span class="message">there is aarch64 in stage0-posix but we don't have aarch64 in mes...</span></div><div class="line" id="185541"><span class="nick" style="color:#bc80bd"><a href="#185541" label="[18:55:41]">*</a></span><span class="message">janneke goes to try an aarch64/arm melange for now</span></div><div class="line" id="213356"><span class="nick">***</span><span class="message notice">lukedashjr is now known as luke-jr</span></div><div class="line" id="215351"><span class="nick" style="color:#6d2462"><a href="#215351" label="[21:53:51]">&lt;doras&gt;</a></span><span class="message">stikonas: when is the first time we have &quot;install&quot; available? Only after coreutils?</span></div><div class="line" id="215359"><span class="nick" style="color:#80b1d3"><a href="#215359" label="[21:53:59]">&lt;stikonas&gt;</a></span><span class="message">doras: yes</span></div><div class="line" id="231051"><span class="nick" style="color:#6d2462"><a href="#231051" label="[23:10:51]">&lt;doras&gt;</a></span><span class="message">Do we want to get a newer GCC and other useful packages in live-bootstrap?</span></div><div class="line" id="231113"><span class="nick" style="color:#3c5b35"><a href="#231113" label="[23:11:13]">&lt;stikonas[m]&gt;</a></span><span class="message">Newer GCC and binutils and prob python</span></div><div class="line" id="231146"><span class="nick" style="color:#3c5b35"><a href="#231146" label="[23:11:46]">&lt;stikonas[m]&gt;</a></span><span class="message">Maybe also curl and ip.tools</span></div><div class="line" id="231320"><span class="nick" style="color:#6d2462"><a href="#231320" label="[23:13:20]">&lt;doras&gt;</a></span><span class="message">We'll need to close the gap between live-bootstrap and freedesktop-sdk somewhere. The delta shouldn't be very large if I recall correctly.</span></div><div class="line" id="231404"><span class="nick" style="color:#6d2462"><a href="#231404" label="[23:14:04]">&lt;doras&gt;</a></span><span class="message">I think it would be nice to do it in the scope of live-bootstrap, so its final product ends up being generally useful for bootstrapping a full OS.</span></div><div class="line" id="231501"><span class="nick" style="color:#6d2462"><a href="#231501" label="[23:15:01]">&lt;doras&gt;</a></span><span class="message">There are a few full OS images built from freedesktop-sdk already.</span></div><div class="line" id="231514"><span class="nick" style="color:#3c5b35"><a href="#231514" label="[23:15:14]">&lt;stikonas[m]&gt;</a></span><span class="message">Yes, we should add the packages that are useful for most distros</span></div><div class="line" id="231545"><span class="nick" style="color:#3c5b35"><a href="#231545" label="[23:15:45]">&lt;stikonas[m]&gt;</a></span><span class="message">well, newer GCC/binutils and python will bring us much closer</span></div><div class="line" id="231608"><span class="nick" style="color:#3c5b35"><a href="#231608" label="[23:16:08]">&lt;stikonas[m]&gt;</a></span><span class="message">Not sure what should we do with glibc...</span></div><div class="line" id="232730"><span class="nick" style="color:#6d2462"><a href="#232730" label="[23:27:30]">&lt;doras&gt;</a></span><span class="message">I'm not even sure yet which packages we actually need.</span></div><div class="line" id="233146"><span class="nick" style="color:#80b1d3"><a href="#233146" label="[23:31:46]">&lt;stikonas&gt;</a></span><span class="message">probably not too many</span></div><div class="line" id="233157"><span class="nick" style="color:#80b1d3"><a href="#233157" label="[23:31:57]">&lt;stikonas&gt;</a></span><span class="message">we have most of the stuff that linux from scratch begins with</span></div><div class="line" id="233417"><span class="nick" style="color:#6d2462"><a href="#233417" label="[23:34:17]">&lt;doras&gt;</a></span><span class="message">I think it's basically these packages:</span></div><div class="line" id="233418"><span class="nick" style="color:#6d2462"><a href="#233418" label="[23:34:18]">&lt;doras&gt;</a></span><span class="message"> <a rel="nofollow" href="https://gitlab.com/freedesktop-sdk/freedesktop-sdk/-/blob/master/elements/pre-bootstrap.bst">https://gitlab.com/freedesktop-sdk/freedesktop-sdk/-/blob/master/elements/pre-bootstrap.bst</a> </span></div><div class="line" id="233418"><span class="nick" style="color:#6d2462"><a href="#233418" label="[23:34:18]">&lt;doras&gt;</a></span><span class="message">Plus these packages:</span></div><div class="line" id="233418"><span class="nick" style="color:#6d2462"><a href="#233418" label="[23:34:18]">&lt;doras&gt;</a></span><span class="message"> <a rel="nofollow" href="https://gitlab.com/freedesktop-sdk/freedesktop-sdk/-/blob/master/elements/bootstrap/bootstrap.bst">https://gitlab.com/freedesktop-sdk/freedesktop-sdk/-/blob/master/elements/bootstrap/bootstrap.bst</a> </span></div><div class="line" id="233628"><span class="nick" style="color:#6d2462"><a href="#233628" label="[23:36:28]">&lt;doras&gt;</a></span><span class="message">Though it's hard to tell the exact minimum version we need of each package. Some of freedesktop-sdk's current seed packages may be newer than they have to be.</span></div><div class="line" id="233816"><span class="nick" style="color:#6d2462"><a href="#233816" label="[23:38:16]">&lt;doras&gt;</a></span><span class="message">One can find the package version that freedesktop-sdk's master branch currently uses for its bootstrap here:</span></div><div class="line" id="233816"><span class="nick" style="color:#6d2462"><a href="#233816" label="[23:38:16]">&lt;doras&gt;</a></span><span class="message"> <a rel="nofollow" href="https://gitlab.com/freedesktop-sdk/freedesktop-sdk/-/tree/release/21.08/elements/bootstrap">https://gitlab.com/freedesktop-sdk/freedesktop-sdk/-/tree/release/21.08/elements/bootstrap</a> </span></div><div class="line" id="233817"><span class="nick" style="color:#6d2462"><a href="#233817" label="[23:38:17]">&lt;doras&gt;</a></span><span class="message">And here:</span></div><div class="line" id="233817"><span class="nick" style="color:#6d2462"><a href="#233817" label="[23:38:17]">&lt;doras&gt;</a></span><span class="message"> <a rel="nofollow" href="https://gitlab.com/freedesktop-sdk/freedesktop-sdk/-/tree/release/21.08/elements/components">https://gitlab.com/freedesktop-sdk/freedesktop-sdk/-/tree/release/21.08/elements/components</a> </span></div><div class="line" id="233824"><span class="nick" style="color:#6d2462"><a href="#233824" label="[23:38:24]">&lt;doras&gt;</a></span><span class="message">versions*</span></div><div class="line" id="233921"><span class="nick" style="color:#6d2462"><a href="#233921" label="[23:39:21]">&lt;doras&gt;</a></span><span class="message">Basically packages from the current stable release (release/21.08) are used as the seed for bootstrapping the master branch.</span></div><div class="line" id="233942"><span class="nick" style="color:#80b1d3"><a href="#233942" label="[23:39:42]">&lt;stikonas&gt;</a></span><span class="message">well, pre-bootstrap seems to be fully covered</span></div><div class="line" id="234513"><span class="nick" style="color:#6d2462"><a href="#234513" label="[23:45:13]">&lt;doras&gt;</a></span><span class="message">stikonas: &quot;pre-bootstrap&quot; is basically the last version's &quot;bootstrap&quot; + additional packages. So are you saying the additional packages (listed under `components`) are fully covered, or that also &quot;bootstrap&quot; packages (listed under bootstrap) are covered?</span></div><div class="line" id="234605"><span class="nick" style="color:#80b1d3"><a href="#234605" label="[23:46:05]">&lt;stikonas&gt;</a></span><span class="message">well, I meant whatever is listed here <a rel="nofollow" href="https://gitlab.com/freedesktop-sdk/freedesktop-sdk/-/blob/master/elements/pre-bootstrap.bst">https://gitlab.com/freedesktop-sdk/freedesktop-sdk/-/blob/master/elements/pre-bootstrap.bst</a>  (m4, autoconf, etc) are in live-bootstrap</span></div><div class="line" id="234642"><span class="nick" style="color:#2e2a4a"><a href="#234642" label="[23:46:42]">&lt;Hagfish&gt;</a></span><span class="message">nice</span></div><div class="line" id="234715"><span class="nick" style="color:#80b1d3"><a href="#234715" label="[23:47:15]">&lt;stikonas&gt;</a></span><span class="message">the packages from bootstrap.bst are only partially covered</span></div><div class="line" id="234719"><span class="nick" style="color:#6d2462"><a href="#234719" label="[23:47:19]">&lt;doras&gt;</a></span><span class="message">stikonas: I see. The second link I mentioned (bootstrap.bst) is what stands behind the &quot;bootstrap-import.bst&quot; row.</span></div><div class="line" id="234724"><span class="nick" style="color:#80b1d3"><a href="#234724" label="[23:47:24]">&lt;stikonas&gt;</a></span><span class="message">ok...</span></div><div class="line" id="234802"><span class="nick" style="color:#80b1d3"><a href="#234802" label="[23:48:02]">&lt;stikonas&gt;</a></span><span class="message">well, we don't have everything there but some of the stuff should be easy to build when you have gcc/binutils/bison/flex and autotools</span></div><div class="line" id="234811"><span class="nick" style="color:#6d2462"><a href="#234811" label="[23:48:11]">&lt;doras&gt;</a></span><span class="message">stikonas: have you checked versions as well, or only packages in general?</span></div><div class="line" id="234817"><span class="nick" style="color:#80b1d3"><a href="#234817" label="[23:48:17]">&lt;stikonas&gt;</a></span><span class="message">no, just packages</span></div><div class="line" id="234826"><span class="nick" style="color:#80b1d3"><a href="#234826" label="[23:48:26]">&lt;stikonas&gt;</a></span><span class="message">but in general newer versions should be fairly easy to build</span></div><div class="line" id="234925"><span class="nick" style="color:#80b1d3"><a href="#234925" label="[23:49:25]">&lt;stikonas&gt;</a></span><span class="message">even live-bootstrap have some new  stuff, e.g. bzip, musl, coreutils, autotools, perl are all fairly new</span></div><div class="line" id="235035"><span class="nick" style="color:#6d2462"><a href="#235035" label="[23:50:35]">&lt;doras&gt;</a></span><span class="message">I think we need newer a version of GCC and probably other packages, but it's not clear exactly which version is the minimum we need.</span></div><div class="line" id="235056"><span class="nick" style="color:#80b1d3"><a href="#235056" label="[23:50:56]">&lt;stikonas&gt;</a></span><span class="message">well, gcc and binutils would be good to update</span></div><div class="line" id="235252"><span class="nick" style="color:#6d2462"><a href="#235252" label="[23:52:52]">&lt;doras&gt;</a></span><span class="message">I think it would be fine for live-bootstrap to remain musl-based if this is the project's preference, as long as it can provide all the dependencies for building glibc in freedesktop-sdk.</span></div><div class="line" id="235434"><span class="nick" style="color:#80b1d3"><a href="#235434" label="[23:54:34]">&lt;stikonas&gt;</a></span><span class="message">doras: it was not a preference but just happened because of simpler build system</span></div><div class="line" id="235441"><span class="nick" style="color:#80b1d3"><a href="#235441" label="[23:54:41]">&lt;stikonas&gt;</a></span><span class="message">so musl was built really early</span></div><div class="line" id="235457"><span class="nick" style="color:#80b1d3"><a href="#235457" label="[23:54:57]">&lt;stikonas&gt;</a></span><span class="message">and then building old glibc sounded a bit of downgrade...</span></div><div class="line" id="235534"><span class="nick" style="color:#80b1d3"><a href="#235534" label="[23:55:34]">&lt;stikonas&gt;</a></span><span class="message">but yes, we should provide all dependencies for building glibc</span></div><div class="line" id="235544"><span class="nick" style="color:#80b1d3"><a href="#235544" label="[23:55:44]">&lt;stikonas&gt;</a></span><span class="message">hence I mentioned that we should build python</span></div><div class="line" id="235637"><span class="nick" style="color:#6d2462"><a href="#235637" label="[23:56:37]">&lt;doras&gt;</a></span><span class="message">Yeah...</span></div><div class="line" id="235740"><span class="nick" style="color:#80b1d3"><a href="#235740" label="[23:57:40]">&lt;stikonas&gt;</a></span><span class="message">but if possible I would leave python to fossy as he already looked a bit at it</span></div><div class="line" id="235805"><span class="nick" style="color:#6d2462"><a href="#235805" label="[23:58:05]">&lt;doras&gt;</a></span><span class="message">Ideally live-bootstrap would become the new `pre-bootstrap.bst`, and then freedesktop-sdk can use it as the seed for building the latest versions of everything listed in `bootstrap.bst`</span></div><div class="line" id="235858"><span class="nick" style="color:#2e2a4a"><a href="#235858" label="[23:58:58]">&lt;Hagfish&gt;</a></span><span class="message">that would be such a vote of confidence, and it makes perfect sense</span></div><br /></div></body></html>