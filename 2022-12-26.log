<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-12-26.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000933"><span class="nick" style="color:#389600"><a href="#000933" label="[00:09:33]">&lt;stikonas&gt;</a></span><span class="message">oriansj: when you have some time, could you merge <a rel="nofollow" href="https://github.com/oriansj/M2libc/pull/33">https://github.com/oriansj/M2libc/pull/33</a> </span></div><div class="line" id="001048"><span class="nick" style="color:#389600"><a href="#001048" label="[00:10:48]">&lt;stikonas&gt;</a></span><span class="message">this should prevent environmental variables from propagating backwards from child to parent</span></div><div class="line" id="001107"><span class="nick" style="color:#389600"><a href="#001107" label="[00:11:07]">&lt;stikonas&gt;</a></span><span class="message">and I think environmental variables in M2libc/UEFI are now fully functional</span></div><div class="line" id="002550"><span class="nick" style="color:#8dd3c7"><a href="#002550" label="[00:25:50]">&lt;Hagfish_&gt;</a></span><span class="message">unsigned data_size = strlen(data) * 2 + 2;</span></div><div class="line" id="002558"><span class="nick" style="color:#8dd3c7"><a href="#002558" label="[00:25:58]">&lt;Hagfish_&gt;</a></span><span class="message">an off-by-two error?Â  nasty</span></div><div class="line" id="002607"><span class="nick" style="color:#8dd3c7"><a href="#002607" label="[00:26:07]">&lt;Hagfish_&gt;</a></span><span class="message">great find, though, and legendary work, as always</span></div><div class="line" id="002613"><span class="nick" style="color:#8dd3c7"><a href="#002613" label="[00:26:13]">&lt;Hagfish_&gt;</a></span><span class="message">a Christmas miracle, even :)</span></div><div class="line" id="003306"><span class="nick" style="color:#389600"><a href="#003306" label="[00:33:06]">&lt;stikonas&gt;</a></span><span class="message">Hagfish_: not exactly off by two error, it's just not necessary to count null terminator there</span></div><div class="line" id="003322"><span class="nick" style="color:#389600"><a href="#003322" label="[00:33:22]">&lt;stikonas&gt;</a></span><span class="message">I mean +2 was not harmful before</span></div><div class="line" id="003331"><span class="nick" style="color:#389600"><a href="#003331" label="[00:33:31]">&lt;stikonas&gt;</a></span><span class="message">though in this new change I actually need it to be 0 for empty string</span></div><div class="line" id="003332"><span class="nick" style="color:#8dd3c7"><a href="#003332" label="[00:33:32]">&lt;Hagfish_&gt;</a></span><span class="message">and the null terminator is two bytes?</span></div><div class="line" id="003340"><span class="nick" style="color:#389600"><a href="#003340" label="[00:33:40]">&lt;stikonas&gt;</a></span><span class="message">Hagfish_: yes, UEFI is UTF16</span></div><div class="line" id="003349"><span class="nick" style="color:#8dd3c7"><a href="#003349" label="[00:33:49]">&lt;Hagfish_&gt;</a></span><span class="message">ah, makes sense</span></div><div class="line" id="003410"><span class="nick" style="color:#389600"><a href="#003410" label="[00:34:10]">&lt;stikonas&gt;</a></span><span class="message">I should probably make it more obvious by using uint16_t* rather than char*</span></div><div class="line" id="003450"><span class="nick" style="color:#8dd3c7"><a href="#003450" label="[00:34:50]">&lt;Hagfish_&gt;</a></span><span class="message">err, that's not more obvious to me, but yeah, anything that makes it more obvious sounds like a good idea</span></div><div class="line" id="003518"><span class="nick" style="color:#8dd3c7"><a href="#003518" label="[00:35:18]">&lt;Hagfish_&gt;</a></span><span class="message">i like that you documented your assumption for _wipe_environment too</span></div><div class="line" id="003522"><span class="nick" style="color:#389600"><a href="#003522" label="[00:35:22]">&lt;stikonas&gt;</a></span><span class="message">anyway, next thing I'll have to implement is change directory functionality</span></div><div class="line" id="003529"><span class="nick" style="color:#8dd3c7"><a href="#003529" label="[00:35:29]">&lt;Hagfish_&gt;</a></span><span class="message">oh, cool!</span></div><div class="line" id="003542"><span class="nick" style="color:#389600"><a href="#003542" label="[00:35:42]">&lt;stikonas&gt;</a></span><span class="message">but that relies on having environmental variables working</span></div><div class="line" id="003601"><span class="nick" style="color:#389600"><a href="#003601" label="[00:36:01]">&lt;stikonas&gt;</a></span><span class="message">cause I need to pass current working directory to child processes</span></div><div class="line" id="003611"><span class="nick" style="color:#8dd3c7"><a href="#003611" label="[00:36:11]">&lt;Hagfish_&gt;</a></span><span class="message">oh, i see</span></div><div class="line" id="003705"><span class="nick" style="color:#8dd3c7"><a href="#003705" label="[00:37:05]">&lt;Hagfish_&gt;</a></span><span class="message">it's unintuitive to think of subdirectories not being the same &quot;environment&quot;, so that never would have occurred to me as being a problem, or something that needed implementing</span></div><div class="line" id="003838"><span class="nick" style="color:#389600"><a href="#003838" label="[00:38:38]">&lt;stikonas&gt;</a></span><span class="message">well, you need to somehow make relative paths absolute</span></div><div class="line" id="003854"><span class="nick" style="color:#389600"><a href="#003854" label="[00:38:54]">&lt;stikonas&gt;</a></span><span class="message">if you are at root level, you call e.g. program subdir/file</span></div><div class="line" id="003905"><span class="nick" style="color:#389600"><a href="#003905" label="[00:39:05]">&lt;stikonas&gt;</a></span><span class="message">or maybe let's say program /subdir/file</span></div><div class="line" id="003914"><span class="nick" style="color:#8dd3c7"><a href="#003914" label="[00:39:14]">&lt;Hagfish_&gt;</a></span><span class="message">yeah, i guess something has to be keeping track of what directory you are in / what a relative path means</span></div><div class="line" id="003918"><span class="nick" style="color:#389600"><a href="#003918" label="[00:39:18]">&lt;stikonas&gt;</a></span><span class="message">but once you do &quot;cd subdir&quot;, you can call program file</span></div><div class="line" id="003923"><span class="nick" style="color:#389600"><a href="#003923" label="[00:39:23]">&lt;stikonas&gt;</a></span><span class="message">so something needs ot readd that subdir</span></div><div class="line" id="003927"><span class="nick" style="color:#389600"><a href="#003927" label="[00:39:27]">&lt;stikonas&gt;</a></span><span class="message">to the path</span></div><div class="line" id="003932"><span class="nick" style="color:#8dd3c7"><a href="#003932" label="[00:39:32]">&lt;Hagfish_&gt;</a></span><span class="message">ah, okay</span></div><div class="line" id="004001"><span class="nick" style="color:#8dd3c7"><a href="#004001" label="[00:40:01]">&lt;Hagfish_&gt;</a></span><span class="message">yeah, i guess the PATH is part of the environment, so i can see there is a link there</span></div><div class="line" id="004856"><span class="nick" style="color:#2e2a4a"><a href="#004856" label="[00:48:56]">&lt;oriansj&gt;</a></span><span class="message">stikonas: merged</span></div><div class="line" id="004906"><span class="nick" style="color:#389600"><a href="#004906" label="[00:49:06]">&lt;stikonas&gt;</a></span><span class="message">thanks</span></div><div class="line" id="004927"><span class="nick" style="color:#2e2a4a"><a href="#004927" label="[00:49:27]">&lt;oriansj&gt;</a></span><span class="message">thank you for a nice M2libc Christmas present ^_^</span></div><div class="line" id="004955"><span class="nick" style="color:#389600"><a href="#004955" label="[00:49:55]">&lt;stikonas&gt;</a></span><span class="message">this was probably more complicated than some other methods of implementing uefi variables, but now we are compatible with UEFI shell</span></div><div class="line" id="005002"><span class="nick" style="color:#389600"><a href="#005002" label="[00:50:02]">&lt;stikonas&gt;</a></span><span class="message">which can make e.g. debugging easier</span></div><div class="line" id="062413"><span class="nick" style="color:#6b8072"><a href="#062413" label="[06:24:13]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: patch looks good, thanks</span></div><div class="line" id="062444"><span class="nick" style="color:#6b8072"><a href="#062444" label="[06:24:44]">&lt;fossy&gt;</a></span><span class="message">i'm going to push a few smalelr fixes in the next few days before i pr python, just small adjustments that are needed</span></div><div class="line" id="081924"><span class="nick" style="color:#6b8072"><a href="#081924" label="[08:19:24]">&lt;fossy&gt;</a></span><span class="message">btw, i'm planning to remove xbps from live-bootstrap. the benefits that appeared to exist didn't really work out in the end, and the multiversioned nature of live-bootstrap means xbps isn't really an appropriate fit. the tarball fakeroot system we are using is completely fine for everything we do (and now that the finish line is very clear) i don't think its required</span></div><div class="line" id="105250"><span class="nick" style="color:#80b1d3"><a href="#105250" label="[10:52:50]">&lt;stikonas[m]&gt;</a></span><span class="message">Yeah, once I fixed symlinks, xbps has few benefits</span></div><div class="line" id="105301"><span class="nick" style="color:#80b1d3"><a href="#105301" label="[10:53:01]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, it can uninstall</span></div><div class="line" id="105329"><span class="nick" style="color:#80b1d3"><a href="#105329" label="[10:53:29]">&lt;stikonas[m]&gt;</a></span><span class="message">Which we can't do with tarball</span></div><div class="line" id="105503"><span class="nick" style="color:#80b1d3"><a href="#105503" label="[10:55:03]">&lt;stikonas[m]&gt;</a></span><span class="message">fossy: yeah, do some smaller pushes first, that should make big python PR a bit smaller</span></div><div class="line" id="122533"><span class="nick" style="color:#6b8072"><a href="#122533" label="[12:25:33]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: even still, with tarball, unless a file has been overwritten, tar tf | xargs rm</span></div><div class="line" id="122559"><span class="nick" style="color:#389600"><a href="#122559" label="[12:25:59]">&lt;stikonas&gt;</a></span><span class="message">well, yeah, we could do that... anyway, I think I'm fine with removing xbps</span></div><div class="line" id="122611"><span class="nick" style="color:#389600"><a href="#122611" label="[12:26:11]">&lt;stikonas&gt;</a></span><span class="message">it adds more complexity that what we really need</span></div><div class="line" id="122622"><span class="nick" style="color:#389600"><a href="#122622" label="[12:26:22]">&lt;stikonas&gt;</a></span><span class="message">but I guess we still need openssl?</span></div><div class="line" id="122628"><span class="nick" style="color:#389600"><a href="#122628" label="[12:26:28]">&lt;stikonas&gt;</a></span><span class="message">for curl stuff</span></div><div class="line" id="123933"><span class="nick" style="color:#6b8072"><a href="#123933" label="[12:39:33]">&lt;fossy&gt;</a></span><span class="message">yes, we use openssl for other things now, no reason not to keep it around</span></div><div class="line" id="123942"><span class="nick" style="color:#6b8072"><a href="#123942" label="[12:39:42]">&lt;fossy&gt;</a></span><span class="message">it becomes a prereq for python at some point too</span></div><div class="line" id="123950"><span class="nick" style="color:#6b8072"><a href="#123950" label="[12:39:50]">&lt;fossy&gt;</a></span><span class="message">for cryptography</span></div><div class="line" id="142158"><span class="nick" style="color:#2e2a4a"><a href="#142158" label="[14:21:58]">&lt;oriansj&gt;</a></span><span class="message">that would put atleast 2 distros in immediate bootstrap range (void and gentoo) correct?</span></div><div class="line" id="142813"><span class="nick" style="color:#80b1d3"><a href="#142813" label="[14:28:13]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, maybe we need one newer version of GCC first</span></div><div class="line" id="142900"><span class="nick" style="color:#80b1d3"><a href="#142900" label="[14:29:00]">&lt;stikonas[m]&gt;</a></span><span class="message">Of course once you start using distro packages, they would be using pregenerated files...</span></div><div class="line" id="142940"><span class="nick" style="color:#80b1d3"><a href="#142940" label="[14:29:40]">&lt;stikonas[m]&gt;</a></span><span class="message">But that's unavoidable in distro bootstrap</span></div><div class="line" id="143102"><span class="nick" style="color:#80b1d3"><a href="#143102" label="[14:31:02]">&lt;stikonas[m]&gt;</a></span><span class="message">But at least we are giving them all the tools to rebuild those if they want</span></div><div class="line" id="143129"><span class="nick" style="color:#80b1d3"><a href="#143129" label="[14:31:29]">&lt;stikonas[m]&gt;</a></span><span class="message">There shouldn't bee any more circular dependencies</span></div><div class="line" id="143500"><span class="nick" style="color:#389600"><a href="#143500" label="[14:35:00]">&lt;stikonas&gt;</a></span><span class="message">I suspect other distros should also be close one we have newer GCC and python</span></div><div class="line" id="151210"><span class="nick" style="color:#389600"><a href="#151210" label="[15:12:10]">&lt;stikonas&gt;</a></span><span class="message">hmm, perhaps storing env lines in M2libc was not the best idea...</span></div><div class="line" id="151220"><span class="nick" style="color:#389600"><a href="#151220" label="[15:12:20]">&lt;stikonas&gt;</a></span><span class="message">I have to do quite a bit of conversion back and forwards</span></div><div class="line" id="151226"><span class="nick" style="color:#389600"><a href="#151226" label="[15:12:26]">&lt;stikonas&gt;</a></span><span class="message">maybe linked list would have been better</span></div><div class="line" id="151327"><span class="nick" style="color:#389600"><a href="#151327" label="[15:13:27]">&lt;stikonas&gt;</a></span><span class="message">now I always have to parse strings like var=value</span></div><div class="line" id="151827"><span class="nick" style="color:#2e2a4a"><a href="#151827" label="[15:18:27]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well bad ideas, allow us to understand the problem better</span></div><div class="line" id="152202"><span class="nick" style="color:#389600"><a href="#152202" label="[15:22:02]">&lt;stikonas&gt;</a></span><span class="message">well, in terms of code it's might be alright if I refactor it into function...</span></div><div class="line" id="152208"><span class="nick" style="color:#389600"><a href="#152208" label="[15:22:08]">&lt;stikonas&gt;</a></span><span class="message">just maybe a bit slower</span></div><div class="line" id="152228"><span class="nick" style="color:#389600"><a href="#152228" label="[15:22:28]">&lt;stikonas&gt;</a></span><span class="message">though speed is not the first priority in bootstrap</span></div><div class="line" id="152337"><span class="nick" style="color:#2e2a4a"><a href="#152337" label="[15:23:37]">&lt;oriansj&gt;</a></span><span class="message">well it is down on the list but if a test takes 40minutes, then you probably are going to have brutally slow development process.</span></div><div class="line" id="152601"><span class="nick" style="color:#389600"><a href="#152601" label="[15:26:01]">&lt;stikonas&gt;</a></span><span class="message">oh no, nowhere that slow... environment list in stage0-uefi would be 20 or so variables</span></div><div class="line" id="152615"><span class="nick" style="color:#389600"><a href="#152615" label="[15:26:15]">&lt;stikonas&gt;</a></span><span class="message">so perhaps it's not worth optimizing too much</span></div><div class="line" id="152925"><span class="nick" style="color:#2e2a4a"><a href="#152925" label="[15:29:25]">&lt;oriansj&gt;</a></span><span class="message">if it takes under 10 seconds, then it is faster than the start time of a C# static binary</span></div><div class="line" id="171432"><span class="nick" style="color:#6d2462"><a href="#171432" label="[17:14:32]">&lt;Christoph[m]&gt;</a></span><span class="message">It sounds as if you fix the order in which programs get bootstrapped by hand. Could this be automated? Like similar to guix, where each package specifies all its dependencies and guix figures out a path through the emerging directed acyclic graph.</span></div><div class="line" id="171705"><span class="nick" style="color:#2e2a4a"><a href="#171705" label="[17:17:05]">&lt;oriansj&gt;</a></span><span class="message">Christoph[m]: well yes, using guix in the step after guile gets bootstrapped</span></div><div class="line" id="171804"><span class="nick" style="color:#2e2a4a"><a href="#171804" label="[17:18:04]">&lt;oriansj&gt;</a></span><span class="message">prior to that step however, we do have to manually craft the order of things getting built because it is a shell script running the show (kaem-optional-seed)</span></div><div class="line" id="171842"><span class="nick" style="color:#2e2a4a"><a href="#171842" label="[17:18:42]">&lt;oriansj&gt;</a></span><span class="message">(then kaem, then bash)</span></div><div class="line" id="172113"><span class="nick" style="color:#6d2462"><a href="#172113" label="[17:21:13]">&lt;Christoph[m]&gt;</a></span><span class="message">Ah, I see. You don't want to reimplement this feature of guile in the shell script. That makes sense, thank you!</span></div><div class="line" id="172117"><span class="nick" style="color:#389600"><a href="#172117" label="[17:21:17]">&lt;stikonas&gt;</a></span><span class="message">oriansj, Christoph[m] it is possible to use dependencies after coreutils is built, but I'm not sure if it's woth the effort</span></div><div class="line" id="172130"><span class="nick" style="color:#389600"><a href="#172130" label="[17:21:30]">&lt;stikonas&gt;</a></span><span class="message">s/woth/worth/</span></div><div class="line" id="172207"><span class="nick" style="color:#389600"><a href="#172207" label="[17:22:07]">&lt;stikonas&gt;</a></span><span class="message">if you want, you can implement a dependency resolver using tsort</span></div><div class="line" id="172237"><span class="nick" style="color:#2e2a4a"><a href="#172237" label="[17:22:37]">&lt;oriansj&gt;</a></span><span class="message">or in raw C code if you like pain</span></div><div class="line" id="172300"><span class="nick" style="color:#389600"><a href="#172300" label="[17:23:00]">&lt;stikonas&gt;</a></span><span class="message">but it's also nice to have some flexibility that manual ordering let's us</span></div><div class="line" id="172331"><span class="nick" style="color:#389600"><a href="#172331" label="[17:23:31]">&lt;stikonas&gt;</a></span><span class="message">e.g. rickmasters said that make is hard to run under builder-hex0 but he wants to have tcc 0.9.27, so I've swapped the order</span></div><div class="line" id="172346"><span class="nick" style="color:#389600"><a href="#172346" label="[17:23:46]">&lt;stikonas&gt;</a></span><span class="message">and one is not really a dependency of the other in that sense</span></div><div class="line" id="172427"><span class="nick" style="color:#389600"><a href="#172427" label="[17:24:27]">&lt;stikonas&gt;</a></span><span class="message">well, I guess we could add a dependency of make on tcc 0.9.27...</span></div><div class="line" id="172443"><span class="nick" style="color:#389600"><a href="#172443" label="[17:24:43]">&lt;stikonas&gt;</a></span><span class="message">so we could still use dependency resolver</span></div><div class="line" id="172457"><span class="nick" style="color:#2e2a4a"><a href="#172457" label="[17:24:57]">&lt;oriansj&gt;</a></span><span class="message">stikonas: good point on soft vs hard dependencies.</span></div><div class="line" id="172526"><span class="nick" style="color:#389600"><a href="#172526" label="[17:25:26]">&lt;stikonas&gt;</a></span><span class="message">well, those can still be encoded</span></div><div class="line" id="172534"><span class="nick" style="color:#389600"><a href="#172534" label="[17:25:34]">&lt;stikonas&gt;</a></span><span class="message">just like guix does..</span></div><div class="line" id="172538"><span class="nick" style="color:#2e2a4a"><a href="#172538" label="[17:25:38]">&lt;oriansj&gt;</a></span><span class="message">it is easier to build with make but we can just as easily create a build script</span></div><div class="line" id="172600"><span class="nick" style="color:#389600"><a href="#172600" label="[17:26:00]">&lt;stikonas&gt;</a></span><span class="message">oh yes, make can also do dependency resolution</span></div><div class="line" id="172647"><span class="nick" style="color:#389600"><a href="#172647" label="[17:26:47]">&lt;stikonas&gt;</a></span><span class="message">but again, it might not be worth it</span></div><div class="line" id="172707"><span class="nick" style="color:#6d2462"><a href="#172707" label="[17:27:07]">&lt;Christoph[m]&gt;</a></span><span class="message">That sounds like an anti-dependency: make cannot run under builder-hex0.</span></div><div class="line" id="172726"><span class="nick" style="color:#389600"><a href="#172726" label="[17:27:26]">&lt;stikonas&gt;</a></span><span class="message">well, at least not in the current form...</span></div><div class="line" id="172742"><span class="nick" style="color:#389600"><a href="#172742" label="[17:27:42]">&lt;stikonas&gt;</a></span><span class="message">well, if you can come up with something nice, I'm sure we can take a look</span></div><div class="line" id="172853"><span class="nick" style="color:#234e69"><a href="#172853" label="[17:28:53]">&lt;duplexsystem_&gt;</a></span><span class="message">as anyone looked into xz-embedded? I'm trying to set it up in live-bootstrap but curious if anyone has tried it before</span></div><div class="line" id="172901"><span class="nick" style="color:#389600"><a href="#172901" label="[17:29:01]">&lt;stikonas&gt;</a></span><span class="message">though you would still have to keep a manual list in parts.rst</span></div><div class="line" id="172917"><span class="nick" style="color:#389600"><a href="#172917" label="[17:29:17]">&lt;stikonas&gt;</a></span><span class="message">duplexsystem_: no, nobody looked at it</span></div><div class="line" id="172936"><span class="nick" style="color:#6d2462"><a href="#172936" label="[17:29:36]">&lt;Christoph[m]&gt;</a></span><span class="message">Are all the bootstrap steps also available as guix packages? Guix has tools to study the dependency graph, for example a visualization.</span></div><div class="line" id="173022"><span class="nick" style="color:#389600"><a href="#173022" label="[17:30:22]">&lt;stikonas&gt;</a></span><span class="message">Christoph[m]: no</span></div><div class="line" id="173037"><span class="nick" style="color:#389600"><a href="#173037" label="[17:30:37]">&lt;stikonas&gt;</a></span><span class="message">duplexsystem_: it might work, looks like something that could be built with tcc</span></div><div class="line" id="173108"><span class="nick" style="color:#389600"><a href="#173108" label="[17:31:08]">&lt;stikonas&gt;</a></span><span class="message">Christoph[m]: guix only implements shorterned bootstrap where it does not care about pregenerated files</span></div><div class="line" id="173128"><span class="nick" style="color:#389600"><a href="#173128" label="[17:31:28]">&lt;stikonas&gt;</a></span><span class="message">Christoph[m]: oriansj and I once created a partial dependency graph of live-bootstrap but it got a bit out of date</span></div><div class="line" id="173232"><span class="nick" style="color:#389600"><a href="#173232" label="[17:32:32]">&lt;stikonas&gt;</a></span><span class="message">Christoph[m]: <a rel="nofollow" href="https://stikonas.eu/files/bootstrap/live-bootstrap.svg">https://stikonas.eu/files/bootstrap/live-bootstrap.svg</a> </span></div><div class="line" id="173441"><span class="nick" style="color:#389600"><a href="#173441" label="[17:34:41]">&lt;stikonas&gt;</a></span><span class="message">Christoph[m]: the thing is that it's hard to tell exactly what the dependencies are</span></div><div class="line" id="173446"><span class="nick" style="color:#389600"><a href="#173446" label="[17:34:46]">&lt;stikonas&gt;</a></span><span class="message">especially once you start using autotools</span></div><div class="line" id="173514"><span class="nick" style="color:#389600"><a href="#173514" label="[17:35:14]">&lt;stikonas&gt;</a></span><span class="message">./configure scripts run quite a few tools that are not immediately visible from package build script</span></div><div class="line" id="173854"><span class="nick" style="color:#234e69"><a href="#173854" label="[17:38:54]">&lt;duplexsystem_&gt;</a></span><span class="message">ok cool!</span></div><div class="line" id="173946"><span class="nick" style="color:#389600"><a href="#173946" label="[17:39:46]">&lt;stikonas&gt;</a></span><span class="message">duplexsystem_: if you are willing to do a bit of extra work, you could try to port it to mescc-tools-extra</span></div><div class="line" id="173953"><span class="nick" style="color:#389600"><a href="#173953" label="[17:39:53]">&lt;stikonas&gt;</a></span><span class="message">we already have ungz and unbz2 there</span></div><div class="line" id="175116"><span class="nick" style="color:#6d2462"><a href="#175116" label="[17:51:16]">&lt;Christoph[m]&gt;</a></span><span class="message">Yes, pregenerated files, I think, ghc ships those with its tar balls. When compiling from the repository, one has to generate them, and that brings in more dependencies. Do you mean stuff like that?</span></div><div class="line" id="175334"><span class="nick" style="color:#389600"><a href="#175334" label="[17:53:34]">&lt;stikonas&gt;</a></span><span class="message">Christoph[m]: yes, that's one of the things we rebuild</span></div><div class="line" id="175339"><span class="nick" style="color:#389600"><a href="#175339" label="[17:53:39]">&lt;stikonas&gt;</a></span><span class="message">even if we build from tarballs</span></div><div class="line" id="180256"><span class="nick" style="color:#389600"><a href="#180256" label="[18:02:56]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I now have a basic cd implementation: <a rel="nofollow" href="https://github.com/oriansj/M2libc/pull/34">https://github.com/oriansj/M2libc/pull/34</a> </span></div><div class="line" id="180307"><span class="nick" style="color:#389600"><a href="#180307" label="[18:03:07]">&lt;stikonas&gt;</a></span><span class="message">so far it's quite simple and doesn't do any error checking</span></div><div class="line" id="180343"><span class="nick" style="color:#389600"><a href="#180343" label="[18:03:43]">&lt;stikonas&gt;</a></span><span class="message">but should be good enough to get something running</span></div><div class="line" id="180622"><span class="nick" style="color:#389600"><a href="#180622" label="[18:06:22]">&lt;stikonas&gt;</a></span><span class="message">and we need this to build M2-Mesoplanet <a rel="nofollow" href="https://github.com/oriansj/M2-Mesoplanet/pull/4/files">https://github.com/oriansj/M2-Mesoplanet/pull/4/files</a> </span></div><div class="line" id="180901"><span class="nick" style="color:#389600"><a href="#180901" label="[18:09:01]">&lt;stikonas&gt;</a></span><span class="message">(oh, so far I've only added support for cd'ing into absolute paths, let me see if I can quickly fix that)</span></div><div class="line" id="182151"><span class="nick" style="color:#8dd3c7"><a href="#182151" label="[18:21:51]">&lt;Hagfish_&gt;</a></span><span class="message">i like how you replace asm(&quot;lea_rdi,[rsp+DWORD] %8&quot;...Â  with a simple strcpy.Â  does that make it more portable?</span></div><div class="line" id="182355"><span class="nick" style="color:#234e69"><a href="#182355" label="[18:23:55]">&lt;duplexsystem_&gt;</a></span><span class="message">stikonas: I'll try that. What subset of C does mescc-tools-extra support</span></div><div class="line" id="182413"><span class="nick" style="color:#234e69"><a href="#182413" label="[18:24:13]">&lt;duplexsystem_&gt;</a></span><span class="message">or does it support C at all</span></div><div class="line" id="183044"><span class="nick" style="color:#389600"><a href="#183044" label="[18:30:44]">&lt;stikonas&gt;</a></span><span class="message">duplexsystem_: it's basically M2 subset (which is somewhat evolving...). So we don't have e.g. switch, there is no &quot;++&quot; or &quot;--&quot;. For more complicated statements parenthesis are recommended to set the order or operations, i.e. 2 + 2 * 2 should be 2 + (2 * 2)</span></div><div class="line" id="183118"><span class="nick" style="color:#389600"><a href="#183118" label="[18:31:18]">&lt;stikonas&gt;</a></span><span class="message">and poitner arithmetic is not working so it you need ptr + sizeof(type) rather than ptr + 1</span></div><div class="line" id="183130"><span class="nick" style="color:#234e69"><a href="#183130" label="[18:31:30]">&lt;duplexsystem_&gt;</a></span><span class="message">hmm ok that should be useable</span></div><div class="line" id="183148"><span class="nick" style="color:#389600"><a href="#183148" label="[18:31:48]">&lt;stikonas&gt;</a></span><span class="message">duplexsystem_: all other programs are examples of what you can use</span></div><div class="line" id="183204"><span class="nick" style="color:#389600"><a href="#183204" label="[18:32:04]">&lt;stikonas&gt;</a></span><span class="message">also M2libc code</span></div><div class="line" id="183211"><span class="nick" style="color:#234e69"><a href="#183211" label="[18:32:11]">&lt;duplexsystem_&gt;</a></span><span class="message">ðï¸</span></div><div class="line" id="183211"><span class="nick" style="color:#389600"><a href="#183211" label="[18:32:11]">&lt;stikonas&gt;</a></span><span class="message">M2-Planet itself is written in smaller subset</span></div><div class="line" id="183233"><span class="nick" style="color:#389600"><a href="#183233" label="[18:32:33]">&lt;stikonas&gt;</a></span><span class="message">Hagfish_: no, the previous code is just copy paste of linux code</span></div><div class="line" id="183241"><span class="nick" style="color:#8dd3c7"><a href="#183241" label="[18:32:41]">&lt;Hagfish_&gt;</a></span><span class="message">oh, interesting</span></div><div class="line" id="183255"><span class="nick" style="color:#389600"><a href="#183255" label="[18:32:55]">&lt;stikonas&gt;</a></span><span class="message">on linux you call kernel syscall to set directory</span></div><div class="line" id="183316"><span class="nick" style="color:#389600"><a href="#183316" label="[18:33:16]">&lt;stikonas&gt;</a></span><span class="message">uefi itself has no concept of current directory</span></div><div class="line" id="183329"><span class="nick" style="color:#389600"><a href="#183329" label="[18:33:29]">&lt;stikonas&gt;</a></span><span class="message">so as I've said earlier, we just store it in environmental variable</span></div><div class="line" id="183346"><span class="nick" style="color:#8dd3c7"><a href="#183346" label="[18:33:46]">&lt;Hagfish_&gt;</a></span><span class="message">yup.Â  so it's really like you're implementing a kernel on top of uefi?</span></div><div class="line" id="183659"><span class="nick" style="color:#389600"><a href="#183659" label="[18:36:59]">&lt;stikonas&gt;</a></span><span class="message">kind of</span></div><div class="line" id="183716"><span class="nick" style="color:#389600"><a href="#183716" label="[18:37:16]">&lt;stikonas&gt;</a></span><span class="message">though everything runs in the same privelege level</span></div><div class="line" id="183728"><span class="nick" style="color:#389600"><a href="#183728" label="[18:37:28]">&lt;stikonas&gt;</a></span><span class="message">and UEFI still manages some stuff</span></div><div class="line" id="183746"><span class="nick" style="color:#8dd3c7"><a href="#183746" label="[18:37:46]">&lt;Hagfish_&gt;</a></span><span class="message">okay, nice</span></div><div class="line" id="183746"><span class="nick" style="color:#389600"><a href="#183746" label="[18:37:46]">&lt;stikonas&gt;</a></span><span class="message">maybe it's more like we implement POSIX compatibility layer on top of UEFI</span></div><div class="line" id="183752"><span class="nick" style="color:#8dd3c7"><a href="#183752" label="[18:37:52]">&lt;Hagfish_&gt;</a></span><span class="message">yeah</span></div><div class="line" id="183804"><span class="nick" style="color:#389600"><a href="#183804" label="[18:38:04]">&lt;stikonas&gt;</a></span><span class="message">since every application carries the same code</span></div><div class="line" id="183814"><span class="nick" style="color:#389600"><a href="#183814" label="[18:38:14]">&lt;stikonas&gt;</a></span><span class="message">there isn't just one &quot;program&quot; that manages others</span></div><div class="line" id="183914"><span class="nick" style="color:#8dd3c7"><a href="#183914" label="[18:39:14]">&lt;Hagfish_&gt;</a></span><span class="message">that feels a bit alien, but presumably that's simpler than trying to make a user-space(?) kernel</span></div><div class="line" id="184025"><span class="nick" style="color:#389600"><a href="#184025" label="[18:40:25]">&lt;stikonas&gt;</a></span><span class="message">well, there is fiwix kernel that we could try to build...</span></div><div class="line" id="184031"><span class="nick" style="color:#389600"><a href="#184031" label="[18:40:31]">&lt;stikonas&gt;</a></span><span class="message">but it's quite far away</span></div><div class="line" id="184036"><span class="nick" style="color:#8dd3c7"><a href="#184036" label="[18:40:36]">&lt;Hagfish_&gt;</a></span><span class="message">uh huh</span></div><div class="line" id="184106"><span class="nick" style="color:#389600"><a href="#184106" label="[18:41:06]">&lt;stikonas&gt;</a></span><span class="message">but yes, it is simpler in the sense that I don't need to deal with device drivers</span></div><div class="line" id="184141"><span class="nick" style="color:#8dd3c7"><a href="#184141" label="[18:41:41]">&lt;Hagfish_&gt;</a></span><span class="message">is that most of what a modern kernel does?Â  by line count?</span></div><div class="line" id="184309"><span class="nick" style="color:#389600"><a href="#184309" label="[18:43:09]">&lt;stikonas&gt;</a></span><span class="message">I think so</span></div><div class="line" id="184318"><span class="nick" style="color:#389600"><a href="#184318" label="[18:43:18]">&lt;stikonas&gt;</a></span><span class="message">also networking stack is fairly big too</span></div><div class="line" id="184331"><span class="nick" style="color:#8dd3c7"><a href="#184331" label="[18:43:31]">&lt;Hagfish_&gt;</a></span><span class="message">oh, good point.Â  i guess uefi gives you that for free too</span></div><div class="line" id="185038"><span class="nick" style="color:#389600"><a href="#185038" label="[18:50:38]">&lt;stikonas&gt;</a></span><span class="message">hmm, I think it does have something</span></div><div class="line" id="185042"><span class="nick" style="color:#389600"><a href="#185042" label="[18:50:42]">&lt;stikonas&gt;</a></span><span class="message">at least I can see in UEFI spec</span></div><div class="line" id="185047"><span class="nick" style="color:#389600"><a href="#185047" label="[18:50:47]">&lt;stikonas&gt;</a></span><span class="message">but we don't need it anyway</span></div><div class="line" id="185055"><span class="nick" style="color:#389600"><a href="#185055" label="[18:50:55]">&lt;stikonas&gt;</a></span><span class="message">we are using a very limitted subset of UEFI API</span></div><div class="line" id="185342"><span class="nick" style="color:#8dd3c7"><a href="#185342" label="[18:53:42]">&lt;Hagfish_&gt;</a></span><span class="message">the smaller the subset needed, the easier it is for competing open source UEFI firmwares to support what we need :)</span></div><div class="line" id="191508"><span class="nick" style="color:#2e2a4a"><a href="#191508" label="[19:15:08]">&lt;oriansj&gt;</a></span><span class="message">stikonas: you can replace narrow_string[0] != '/' &amp;&amp; narrow_string[0] != '\\' with !in_set(&quot;/\\&quot;, narrow_string[0]) and it'll run a little faster</span></div><div class="line" id="191621"><span class="nick" style="color:#2e2a4a"><a href="#191621" label="[19:16:21]">&lt;oriansj&gt;</a></span><span class="message">merged</span></div><div class="line" id="192336"><span class="nick" style="color:#389600"><a href="#192336" label="[19:23:36]">&lt;stikonas&gt;</a></span><span class="message">oriansj: ok, I'll do that in the next patch</span></div><div class="line" id="192400"><span class="nick" style="color:#389600"><a href="#192400" label="[19:24:00]">&lt;stikonas&gt;</a></span><span class="message">I need to fix chdir function to itself add cwd if it's relative</span></div><div class="line" id="192436"><span class="nick" style="color:#2e2a4a"><a href="#192436" label="[19:24:36]">&lt;oriansj&gt;</a></span><span class="message">well that'll get complicated when the local path points to a different device</span></div><div class="line" id="192441"><span class="nick" style="color:#389600"><a href="#192441" label="[19:24:41]">&lt;stikonas&gt;</a></span><span class="message">oriansj: hmm, but that adds a dependency on bootstrappable.c</span></div><div class="line" id="192457"><span class="nick" style="color:#2e2a4a"><a href="#192457" label="[19:24:57]">&lt;oriansj&gt;</a></span><span class="message">stikonas: which you don't need to use if you don't want</span></div><div class="line" id="192459"><span class="nick" style="color:#389600"><a href="#192459" label="[19:24:59]">&lt;stikonas&gt;</a></span><span class="message">oriansj: hmm, I was thinking of not letting to use any other decvice...</span></div><div class="line" id="192522"><span class="nick" style="color:#389600"><a href="#192522" label="[19:25:22]">&lt;stikonas&gt;</a></span><span class="message">we just use the same device that we booted from</span></div><div class="line" id="192533"><span class="nick" style="color:#389600"><a href="#192533" label="[19:25:33]">&lt;stikonas&gt;</a></span><span class="message">should be enough to build bootstrap kernel</span></div><div class="line" id="192538"><span class="nick" style="color:#2e2a4a"><a href="#192538" label="[19:25:38]">&lt;oriansj&gt;</a></span><span class="message">reasonable choice</span></div><div class="line" id="192553"><span class="nick" style="color:#389600"><a href="#192553" label="[19:25:53]">&lt;stikonas&gt;</a></span><span class="message">anyway, this can be changed later if somebody has a requirement</span></div><div class="line" id="192623"><span class="nick" style="color:#389600"><a href="#192623" label="[19:26:23]">&lt;stikonas&gt;</a></span><span class="message">but even now I was already stripping stuff before : in cwd</span></div><div class="line" id="192630"><span class="nick" style="color:#2e2a4a"><a href="#192630" label="[19:26:30]">&lt;oriansj&gt;</a></span><span class="message">(we can even make them responsible for that work if they have that requirement)</span></div><div class="line" id="192635"><span class="nick" style="color:#389600"><a href="#192635" label="[19:26:35]">&lt;stikonas&gt;</a></span><span class="message">e.g. uefi shell defines it as fs0:/dir</span></div><div class="line" id="192707"><span class="nick" style="color:#389600"><a href="#192707" label="[19:27:07]">&lt;stikonas&gt;</a></span><span class="message">which wouldn't work with open, as open is based relative to root dir</span></div><div class="line" id="192716"><span class="nick" style="color:#389600"><a href="#192716" label="[19:27:16]">&lt;stikonas&gt;</a></span><span class="message">basically everything is more complicated</span></div><div class="line" id="192722"><span class="nick" style="color:#389600"><a href="#192722" label="[19:27:22]">&lt;stikonas&gt;</a></span><span class="message">if we want to support multiple devices</span></div><div class="line" id="193104"><span class="nick" style="color:#389600"><a href="#193104" label="[19:31:04]">&lt;stikonas&gt;</a></span><span class="message">it might be a bit safer to use fixed size string functions... i.e. strncmp...</span></div><div class="line" id="193109"><span class="nick" style="color:#389600"><a href="#193109" label="[19:31:09]">&lt;stikonas&gt;</a></span><span class="message">but we can change it later</span></div><div class="line" id="193754"><span class="nick" style="color:#2e2a4a"><a href="#193754" label="[19:37:54]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well yes, it would be a better choice long term as match is just as simple as possible true/false string compare needed in bootstrapping.</span></div><div class="line" id="210745"><span class="nick" style="color:#389600"><a href="#210745" label="[21:07:45]">&lt;stikonas&gt;</a></span><span class="message">oriansj: <a rel="nofollow" href="https://github.com/oriansj/M2libc/pull/35/files">https://github.com/oriansj/M2libc/pull/35/files</a> </span></div><div class="line" id="210758"><span class="nick" style="color:#389600"><a href="#210758" label="[21:07:58]">&lt;stikonas&gt;</a></span><span class="message">this should be enough to add some simple relative paths to cd</span></div><div class="line" id="210908"><span class="nick" style="color:#389600"><a href="#210908" label="[21:09:08]">&lt;stikonas&gt;</a></span><span class="message">I haven't yet looked at .. but it probably partially works (except that paths keep growing as you do .., so they become dir1/../dir2/..)</span></div><div class="line" id="211620"><span class="nick" style="color:#2e2a4a"><a href="#211620" label="[21:16:20]">&lt;oriansj&gt;</a></span><span class="message">stikonas: merged</span></div><div class="line" id="211626"><span class="nick" style="color:#389600"><a href="#211626" label="[21:16:26]">&lt;stikonas&gt;</a></span><span class="message">thanks</span></div><div class="line" id="214342"><span class="nick" style="color:#389600"><a href="#214342" label="[21:43:42]">&lt;stikonas&gt;</a></span><span class="message">oriansj: oh, M2-Mesoplanet seems to crash here when run without any arguments...</span></div><div class="line" id="214349"><span class="nick" style="color:#389600"><a href="#214349" label="[21:43:49]">&lt;stikonas&gt;</a></span><span class="message">even in stage0-posix</span></div><div class="line" id="214443"><span class="nick" style="color:#389600"><a href="#214443" label="[21:44:43]">&lt;stikonas&gt;</a></span><span class="message">I guess it needs some env variables</span></div><div class="line" id="214627"><span class="nick" style="color:#2e2a4a"><a href="#214627" label="[21:46:27]">&lt;oriansj&gt;</a></span><span class="message">and even built with gcc, it has issues</span></div><div class="line" id="214631"><span class="nick" style="color:#2e2a4a"><a href="#214631" label="[21:46:31]">&lt;oriansj&gt;</a></span><span class="message">should fix that</span></div><div class="line" id="214944"><span class="nick" style="color:#2e2a4a"><a href="#214944" label="[21:49:44]">&lt;oriansj&gt;</a></span><span class="message">well when run without any arguments, it reads from /dev/stdin for input</span></div><div class="line" id="215326"><span class="nick" style="color:#389600"><a href="#215326" label="[21:53:26]">&lt;stikonas&gt;</a></span><span class="message">oh yes, though neither --version nor --help work either</span></div><div class="line" id="215331"><span class="nick" style="color:#389600"><a href="#215331" label="[21:53:31]">&lt;stikonas&gt;</a></span><span class="message">maybe it has no such arguments, let me see</span></div><div class="line" id="215411"><span class="nick" style="color:#389600"><a href="#215411" label="[21:54:11]">&lt;stikonas&gt;</a></span><span class="message">hmm, it does have them</span></div><div class="line" id="215447"><span class="nick" style="color:#389600"><a href="#215447" label="[21:54:47]">&lt;stikonas&gt;</a></span><span class="message">ok, those do work in gcc version</span></div><div class="line" id="215606"><span class="nick" style="color:#389600"><a href="#215606" label="[21:56:06]">&lt;stikonas&gt;</a></span><span class="message">hmm, and they also work on M2-Planet/x86</span></div><div class="line" id="215658"><span class="nick" style="color:#389600"><a href="#215658" label="[21:56:58]">&lt;stikonas&gt;</a></span><span class="message">but M2-Planet/AMD64 compiled version segfaults</span></div><div class="line" id="215659"><span class="nick" style="color:#389600"><a href="#215659" label="[21:56:59]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="215754"><span class="nick" style="color:#2e2a4a"><a href="#215754" label="[21:57:54]">&lt;oriansj&gt;</a></span><span class="message">perhaps a regression in M2-Planet?</span></div><div class="line" id="215806"><span class="nick" style="color:#389600"><a href="#215806" label="[21:58:06]">&lt;stikonas&gt;</a></span><span class="message">it could be</span></div><div class="line" id="215814"><span class="nick" style="color:#389600"><a href="#215814" label="[21:58:14]">&lt;stikonas&gt;</a></span><span class="message">I was chaning quite a bit of stuff recently</span></div><div class="line" id="215827"><span class="nick" style="color:#389600"><a href="#215827" label="[21:58:27]">&lt;stikonas&gt;</a></span><span class="message">including arch specific emits</span></div><div class="line" id="215834"><span class="nick" style="color:#389600"><a href="#215834" label="[21:58:34]">&lt;stikonas&gt;</a></span><span class="message">but let me check which other arches work/fail</span></div><div class="line" id="215909"><span class="nick" style="color:#389600"><a href="#215909" label="[21:59:09]">&lt;stikonas&gt;</a></span><span class="message">aarch64 fails</span></div><div class="line" id="220322"><span class="nick" style="color:#389600"><a href="#220322" label="[22:03:22]">&lt;stikonas&gt;</a></span><span class="message">riscv32 and riscv64 also fail</span></div><div class="line" id="220329"><span class="nick" style="color:#389600"><a href="#220329" label="[22:03:29]">&lt;stikonas&gt;</a></span><span class="message">so only x86 work...</span></div><div class="line" id="220421"><span class="nick" style="color:#389600"><a href="#220421" label="[22:04:21]">&lt;stikonas&gt;</a></span><span class="message">oriansj: ok, gdb shows crash in _malloc_free_list</span></div><div class="line" id="221028"><span class="nick" style="color:#2e2a4a"><a href="#221028" label="[22:10:28]">&lt;oriansj&gt;</a></span><span class="message">so M2libc related fun</span></div><div class="line" id="223209"><span class="nick" style="color:#389600"><a href="#223209" label="[22:32:09]">&lt;stikonas&gt;</a></span><span class="message">indeed..</span></div><div class="line" id="223220"><span class="nick" style="color:#389600"><a href="#223220" label="[22:32:20]">&lt;stikonas&gt;</a></span><span class="message">or possibly M2-Planet miscompiles it</span></div><div class="line" id="223647"><span class="nick" style="color:#2e2a4a"><a href="#223647" label="[22:36:47]">&lt;oriansj&gt;</a></span><span class="message">entirely possible too</span></div><div class="line" id="223921"><span class="nick" style="color:#389600"><a href="#223921" label="[22:39:21]">&lt;stikonas&gt;</a></span><span class="message">and it's just M2-Mesoplanet that crashes on --help...</span></div><div class="line" id="223925"><span class="nick" style="color:#389600"><a href="#223925" label="[22:39:25]">&lt;stikonas&gt;</a></span><span class="message">M2-Planet is fine</span></div><div class="line" id="224936"><span class="nick" style="color:#2e2a4a"><a href="#224936" label="[22:49:36]">&lt;oriansj&gt;</a></span><span class="message">well just hitting --help shouldn't hit malloc/calloc and definitely not hit free</span></div><div class="line" id="225157"><span class="nick" style="color:#389600"><a href="#225157" label="[22:51:57]">&lt;stikonas&gt;</a></span><span class="message">it might be wrong jump somewhere</span></div><div class="line" id="225228"><span class="nick" style="color:#389600"><a href="#225228" label="[22:52:28]">&lt;stikonas&gt;</a></span><span class="message">and stack frames are corrupted</span></div><div class="line" id="225523"><span class="nick" style="color:#389600"><a href="#225523" label="[22:55:23]">&lt;stikonas&gt;</a></span><span class="message">I'll do some step-by step debugging...</span></div><div class="line" id="225631"><span class="nick" style="color:#389600"><a href="#225631" label="[22:56:31]">&lt;stikonas&gt;</a></span><span class="message">oriansj: ok, it's setup_env() where crash happens</span></div><div class="line" id="230249"><span class="nick" style="color:#389600"><a href="#230249" label="[23:02:49]">&lt;stikonas&gt;</a></span><span class="message">and then in init_macro_env()</span></div><div class="line" id="230857"><span class="nick" style="color:#389600"><a href="#230857" label="[23:08:57]">&lt;stikonas&gt;</a></span><span class="message">hmm, and then the first calloc fails there...</span></div><div class="line" id="230916"><span class="nick" style="color:#389600"><a href="#230916" label="[23:09:16]">&lt;stikonas&gt;</a></span><span class="message">even though that's not he first calloc overall</span></div><div class="line" id="230927"><span class="nick" style="color:#389600"><a href="#230927" label="[23:09:27]">&lt;stikonas&gt;</a></span><span class="message">sigh, that will be hard to debug :(</span></div><div class="line" id="231049"><span class="nick" style="color:#2e2a4a"><a href="#231049" label="[23:10:49]">&lt;oriansj&gt;</a></span><span class="message">well turning free into a no-op would probably the quick and dirty fix</span></div><div class="line" id="231334"><span class="nick" style="color:#389600"><a href="#231334" label="[23:13:34]">&lt;stikonas&gt;</a></span><span class="message">well, we can check...</span></div><div class="line" id="231441"><span class="nick" style="color:#389600"><a href="#231441" label="[23:14:41]">&lt;stikonas&gt;</a></span><span class="message">no, just returning in free () does not help</span></div><div class="line" id="231615"><span class="nick" style="color:#6b8072"><a href="#231615" label="[23:16:15]">&lt;fossy&gt;</a></span><span class="message">from earlier, i'm not a particular fan of explicit dependencies in live-bootstrap (apart from simple documentation); they add a lot of complexity. the process is by-and-large simple and reasonably linear, and so by the time a proper dependency resolver can be used, it's of reasonably limited utility</span></div><br /></div></body></html>