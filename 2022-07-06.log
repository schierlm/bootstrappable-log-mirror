<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-07-06.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="104219"><span class="nick">***</span><span class="message notice">attila_lendvai_ is now known as attila_lendvai</span></div><div class="line" id="155455"><span class="nick" style="color:#8dd3c7"><a href="#155455" label="[15:54:55]">&lt;rickmasters&gt;</a></span><span class="message">It may have seemed like I disappeared but I've been slowly working away on kernel development.</span></div><div class="line" id="155503"><span class="nick" style="color:#8dd3c7"><a href="#155503" label="[15:55:03]">&lt;rickmasters&gt;</a></span><span class="message">I've been trying to answer the question:</span></div><div class="line" id="155511"><span class="nick" style="color:#8dd3c7"><a href="#155511" label="[15:55:11]">&lt;rickmasters&gt;</a></span><span class="message">What are the exact requirements for the kernel for each stage of bootstrapping?</span></div><div class="line" id="155522"><span class="nick" style="color:#8dd3c7"><a href="#155522" label="[15:55:22]">&lt;rickmasters&gt;</a></span><span class="message">I think it makes sense to understand this in order to answer the next question:</span></div><div class="line" id="155529"><span class="nick" style="color:#8dd3c7"><a href="#155529" label="[15:55:29]">&lt;rickmasters&gt;</a></span><span class="message">How should kernel development proceed?</span></div><div class="line" id="155549"><span class="nick" style="color:#8dd3c7"><a href="#155549" label="[15:55:49]">&lt;rickmasters&gt;</a></span><span class="message">As last reported, the current builder-hex0 kernel can build mes-m2 and run Hello World.</span></div><div class="line" id="155559"><span class="nick" style="color:#8dd3c7"><a href="#155559" label="[15:55:59]">&lt;rickmasters&gt;</a></span><span class="message">However, it was a bit of fools gold - it could not run mescc to compile C code.</span></div><div class="line" id="155610"><span class="nick" style="color:#8dd3c7"><a href="#155610" label="[15:56:10]">&lt;rickmasters&gt;</a></span><span class="message">So, I took on the task of figuring out what it would take to build mes using mes-m2</span></div><div class="line" id="155618"><span class="nick" style="color:#8dd3c7"><a href="#155618" label="[15:56:18]">&lt;rickmasters&gt;</a></span><span class="message">via the live-bootstrap kaem scripts.</span></div><div class="line" id="155625"><span class="nick" style="color:#8dd3c7"><a href="#155625" label="[15:56:25]">&lt;rickmasters&gt;</a></span><span class="message">Unfortunately I was detoured when stage0-posix stopped building due to a existing</span></div><div class="line" id="155632"><span class="nick" style="color:#8dd3c7"><a href="#155632" label="[15:56:32]">&lt;rickmasters&gt;</a></span><span class="message">builder-hex0 bug that surfaced somewhat randomly.</span></div><div class="line" id="155652"><span class="nick" style="color:#8dd3c7"><a href="#155652" label="[15:56:52]">&lt;rickmasters&gt;</a></span><span class="message">Debugging the kernel and then mes-m2 was an arduous task because the problems surfaced as memory corruption.</span></div><div class="line" id="155701"><span class="nick" style="color:#8dd3c7"><a href="#155701" label="[15:57:01]">&lt;rickmasters&gt;</a></span><span class="message">But after many weeks, I've resolved the issues and functionality necessary to build mes!</span></div><div class="line" id="155712"><span class="nick" style="color:#8dd3c7"><a href="#155712" label="[15:57:12]">&lt;rickmasters&gt;</a></span><span class="message">I haven't tried to run mes yet. It just finished building after around 36 hours!</span></div><div class="line" id="155727"><span class="nick" style="color:#8dd3c7"><a href="#155727" label="[15:57:27]">&lt;rickmasters&gt;</a></span><span class="message">I have been using builder-hex0 for this investigation but I am not determined to commit those enhancements.</span></div><div class="line" id="155745"><span class="nick" style="color:#8dd3c7"><a href="#155745" label="[15:57:45]">&lt;rickmasters&gt;</a></span><span class="message">I know oriansj favors moving to a higher language immediately for further kernel development.</span></div><div class="line" id="155758"><span class="nick" style="color:#8dd3c7"><a href="#155758" label="[15:57:58]">&lt;rickmasters&gt;</a></span><span class="message">One could argue that builder-hex0 should have stopped development after building M1 or M2.</span></div><div class="line" id="155805"><span class="nick" style="color:#8dd3c7"><a href="#155805" label="[15:58:05]">&lt;rickmasters&gt;</a></span><span class="message">However, enhancing builder-hex0 might mean the difference between developing next in</span></div><div class="line" id="155817"><span class="nick" style="color:#8dd3c7"><a href="#155817" label="[15:58:17]">&lt;rickmasters&gt;</a></span><span class="message">C99 versus M2 and I may have a different opinion on that.</span></div><div class="line" id="155823"><span class="nick" style="color:#8dd3c7"><a href="#155823" label="[15:58:23]">&lt;rickmasters&gt;</a></span><span class="message">That remains to be seen.</span></div><div class="line" id="155832"><span class="nick" style="color:#8dd3c7"><a href="#155832" label="[15:58:32]">&lt;rickmasters&gt;</a></span><span class="message">Anyway, since I'm still having fun I think I'm going to see what it takes to build tcc.</span></div><div class="line" id="155841"><span class="nick" style="color:#8dd3c7"><a href="#155841" label="[15:58:41]">&lt;rickmasters&gt;</a></span><span class="message">I may disappear again for a while but I'll be back.</span></div><div class="line" id="155858"><span class="nick" style="color:#8dd3c7"><a href="#155858" label="[15:58:58]">&lt;rickmasters&gt;</a></span><span class="message">I'm hoping for better luck than I had with mes but we'll see...</span></div><div class="line" id="161602"><span class="nick" style="color:#2e2a4a"><a href="#161602" label="[16:16:02]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: so that's mes built with mescc.scm? Impressive. Although 36 hours is a long time :(. But it is what it is</span></div><div class="line" id="161854"><span class="nick" style="color:#8dd3c7"><a href="#161854" label="[16:18:54]">&lt;rickmasters&gt;</a></span><span class="message">yes, mes build with mescc.scm using live-boostrap sysa/mes-0.24/mes-0.24.kaem which compiles over 150 C files</span></div><div class="line" id="162125"><span class="nick" style="color:#2e2a4a"><a href="#162125" label="[16:21:25]">&lt;stikonas&gt;</a></span><span class="message">hopefully it runs, it should be fairly similar to mes-m2 though it might be using more syscalls...</span></div><div class="line" id="162226"><span class="nick" style="color:#8dd3c7"><a href="#162226" label="[16:22:26]">&lt;rickmasters&gt;</a></span><span class="message">I'm hoping so, it's essentially the same program as mes-m2</span></div><div class="line" id="162509"><span class="nick" style="color:#8dd3c7"><a href="#162509" label="[16:25:09]">&lt;rickmasters&gt;</a></span><span class="message">i also spent a long time reworking boot2now to support multiple stages, sort of cacheing the previous stage in my primitive script/file system</span></div><div class="line" id="162545"><span class="nick" style="color:#8dd3c7"><a href="#162545" label="[16:25:45]">&lt;rickmasters&gt;</a></span><span class="message">this will mitigate the 36 hour build time</span></div><div class="line" id="162740"><span class="nick" style="color:#8dd3c7"><a href="#162740" label="[16:27:40]">&lt;rickmasters&gt;</a></span><span class="message">I've also been reading here the interest in bootstrapping on UEFI - it does seem more modern and I'm also interested...</span></div><div class="line" id="162748"><span class="nick" style="color:#8dd3c7"><a href="#162748" label="[16:27:48]">&lt;rickmasters&gt;</a></span><span class="message">I'm wondering if there are open implementations of UEFI?</span></div><div class="line" id="162824"><span class="nick" style="color:#2e2a4a"><a href="#162824" label="[16:28:24]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: yes, I think there are</span></div><div class="line" id="162848"><span class="nick" style="color:#2e2a4a"><a href="#162848" label="[16:28:48]">&lt;stikonas&gt;</a></span><span class="message">I did start reading up a bit on UEFI api, so fell free to join me</span></div><div class="line" id="162912"><span class="nick" style="color:#2e2a4a"><a href="#162912" label="[16:29:12]">&lt;stikonas&gt;</a></span><span class="message">I think UEFI binaries would run at close to POSIX speed</span></div><div class="line" id="163135"><span class="nick" style="color:#8dd3c7"><a href="#163135" label="[16:31:35]">&lt;rickmasters&gt;</a></span><span class="message">i'd like to join you on UEFI but not sure how much time i'll have right away</span></div><div class="line" id="163313"><span class="nick" style="color:#2e2a4a"><a href="#163313" label="[16:33:13]">&lt;stikonas&gt;</a></span><span class="message">in the evening I can publish what I have, right now it's just hex0.c high level prototype and build/run scripts to kick off qemu with it</span></div><div class="line" id="163619"><span class="nick" style="color:#8dd3c7"><a href="#163619" label="[16:36:19]">&lt;rickmasters&gt;</a></span><span class="message">i'm really not sure why mes-m2 on builder-hex0 is so frickin slow. I can't see how the kernel can slow it down so much since mes-m2 is doing the heavy lifting</span></div><div class="line" id="163845"><span class="nick" style="color:#8dd3c7"><a href="#163845" label="[16:38:45]">&lt;rickmasters&gt;</a></span><span class="message">with UEFI fork/exec might be the wall to climb</span></div><div class="line" id="163925"><span class="nick" style="color:#2e2a4a"><a href="#163925" label="[16:39:25]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: UEFI supports calling another image and blocks until return</span></div><div class="line" id="164020"><span class="nick" style="color:#8dd3c7"><a href="#164020" label="[16:40:20]">&lt;rickmasters&gt;</a></span><span class="message">via posix fork/exec or UEFI specific semantics?</span></div><div class="line" id="164028"><span class="nick" style="color:#2e2a4a"><a href="#164028" label="[16:40:28]">&lt;stikonas&gt;</a></span><span class="message">UEFI semantics</span></div><div class="line" id="164036"><span class="nick" style="color:#2e2a4a"><a href="#164036" label="[16:40:36]">&lt;stikonas&gt;</a></span><span class="message">see 7.4 in <a rel="nofollow" href="https://uefi.org/sites/default/files/resources/UEFI_Spec_2_8_C_Jan_2021.pdf">https://uefi.org/sites/default/files/resources/UEFI_Spec_2_8_C_Jan_2021.pdf</a> </span></div><div class="line" id="164052"><span class="nick" style="color:#2e2a4a"><a href="#164052" label="[16:40:52]">&lt;stikonas&gt;</a></span><span class="message">input/output and argument parsing are also different from POSIX</span></div><div class="line" id="164110"><span class="nick" style="color:#2e2a4a"><a href="#164110" label="[16:41:10]">&lt;stikonas&gt;</a></span><span class="message">and that's basically it (at least until much later)</span></div><div class="line" id="164140"><span class="nick" style="color:#2e2a4a"><a href="#164140" label="[16:41:40]">&lt;stikonas&gt;</a></span><span class="message">well, at binary level ELF is not used but at C level these 3 differences are the only ones</span></div><div class="line" id="164154"><span class="nick" style="color:#8dd3c7"><a href="#164154" label="[16:41:54]">&lt;rickmasters&gt;</a></span><span class="message">yeah, builder-hex0 would have been a lot easier if I could have hacked up stage0-posix to change the OS interface...</span></div><div class="line" id="164157"><span class="nick" style="color:#2e2a4a"><a href="#164157" label="[16:41:57]">&lt;stikonas&gt;</a></span><span class="message">and they'll mostly be the same between all apps</span></div><div class="line" id="164319"><span class="nick" style="color:#2e2a4a"><a href="#164319" label="[16:43:19]">&lt;stikonas&gt;</a></span><span class="message">well, basically with UEFI I think we can skip kernel and let UEFI act as a kernel</span></div><div class="line" id="164332"><span class="nick" style="color:#2e2a4a"><a href="#164332" label="[16:43:32]">&lt;stikonas&gt;</a></span><span class="message">and then just right kaem, hex0, hex1, hex2, etc..</span></div><div class="line" id="164829"><span class="nick" style="color:#8dd3c7"><a href="#164829" label="[16:48:29]">&lt;rickmasters&gt;</a></span><span class="message">that could probably be made to work up until make-based builds</span></div><div class="line" id="164931"><span class="nick" style="color:#8dd3c7"><a href="#164931" label="[16:49:31]">&lt;rickmasters&gt;</a></span><span class="message">for UEFI calling another image - is it LoadImage() you are referring to?</span></div><div class="line" id="165009"><span class="nick" style="color:#2e2a4a"><a href="#165009" label="[16:50:09]">&lt;stikonas&gt;</a></span><span class="message">yes, I think so</span></div><div class="line" id="165055"><span class="nick" style="color:#2e2a4a"><a href="#165055" label="[16:50:55]">&lt;stikonas&gt;</a></span><span class="message">but I haven't used it yet</span></div><div class="line" id="165058"><span class="nick" style="color:#2e2a4a"><a href="#165058" label="[16:50:58]">&lt;stikonas&gt;</a></span><span class="message">just saw in spec</span></div><div class="line" id="165118"><span class="nick" style="color:#2e2a4a"><a href="#165118" label="[16:51:18]">&lt;stikonas&gt;</a></span><span class="message">I guess it's LoadImage() followed by StartImage()</span></div><div class="line" id="165132"><span class="nick" style="color:#8dd3c7"><a href="#165132" label="[16:51:32]">&lt;rickmasters&gt;</a></span><span class="message">the stage0-posix executable are all fixed to the same base-address (and not relocatable) so I'm wondering if UEFI images need to be relocatable...</span></div><div class="line" id="165236"><span class="nick" style="color:#8dd3c7"><a href="#165236" label="[16:52:36]">&lt;rickmasters&gt;</a></span><span class="message">if so that would require extensive changes to stage0-posix</span></div><div class="line" id="165534"><span class="nick" style="color:#8dd3c7"><a href="#165534" label="[16:55:34]">&lt;rickmasters&gt;</a></span><span class="message">I initially tried to put stage0-posix executables at different addresses to simplify the kernel but when I realized that kaem launches kaem I gave up on that</span></div><div class="line" id="165729"><span class="nick" style="color:#2e2a4a"><a href="#165729" label="[16:57:29]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: it will have to be a fork of stage0-posix,  I guess stage0-uefi</span></div><div class="line" id="165758"><span class="nick" style="color:#2e2a4a"><a href="#165758" label="[16:57:58]">&lt;stikonas&gt;</a></span><span class="message">since at binary level format is different. It uses PE binaries rather than ELF</span></div><div class="line" id="165924"><span class="nick" style="color:#8dd3c7"><a href="#165924" label="[16:59:24]">&lt;rickmasters&gt;</a></span><span class="message"> <a rel="nofollow" href="https://wiki.osdev.org/UEFI">https://wiki.osdev.org/UEFI</a>  says an image is a &quot;relocatable PE executable file&quot;</span></div><div class="line" id="170218"><span class="nick" style="color:#8dd3c7"><a href="#170218" label="[17:02:18]">&lt;rickmasters&gt;</a></span><span class="message">i'm not sure how much work it would be but probably not trivial. I'm pretty sure it can be done though</span></div><div class="line" id="170221"><span class="nick" style="color:#2e2a4a"><a href="#170221" label="[17:02:21]">&lt;stikonas&gt;</a></span><span class="message">ok. I haven't look at asm or binary level yet</span></div><div class="line" id="170238"><span class="nick" style="color:#2e2a4a"><a href="#170238" label="[17:02:38]">&lt;stikonas&gt;</a></span><span class="message">well, C prototype for hex0 was not too hard</span></div><div class="line" id="170248"><span class="nick" style="color:#2e2a4a"><a href="#170248" label="[17:02:48]">&lt;stikonas&gt;</a></span><span class="message">took me a bit to get familiarized with UEFI api</span></div><div class="line" id="170302"><span class="nick" style="color:#2e2a4a"><a href="#170302" label="[17:03:02]">&lt;stikonas&gt;</a></span><span class="message">it's all function calls there</span></div><div class="line" id="170325"><span class="nick" style="color:#2e2a4a"><a href="#170325" label="[17:03:25]">&lt;stikonas&gt;</a></span><span class="message">but we'll have to do C-&gt;hex0 reencoding</span></div><div class="line" id="170337"><span class="nick" style="color:#2e2a4a"><a href="#170337" label="[17:03:37]">&lt;stikonas&gt;</a></span><span class="message">quite a bit can be taken from stage0-posix</span></div><div class="line" id="170348"><span class="nick" style="color:#2e2a4a"><a href="#170348" label="[17:03:48]">&lt;stikonas&gt;</a></span><span class="message">but headers will be very different</span></div><div class="line" id="170430"><span class="nick" style="color:#2e2a4a"><a href="#170430" label="[17:04:30]">&lt;stikonas&gt;</a></span><span class="message">and linkages will be different, I guess in hex0.hex2 prototype we can take quite a bit from stage0-posix</span></div><div class="line" id="170437"><span class="nick" style="color:#2e2a4a"><a href="#170437" label="[17:04:37]">&lt;stikonas&gt;</a></span><span class="message">but then need to recalculate jumps</span></div><div class="line" id="172228"><span class="nick" style="color:#8dd3c7"><a href="#172228" label="[17:22:28]">&lt;rickmasters&gt;</a></span><span class="message">you know, I might explore porting builder-hex0 to UEFI, not forking stage0-posix, as an alternative but I don't know if that makes sense yet without more research</span></div><div class="line" id="172513"><span class="nick" style="color:#2e2a4a"><a href="#172513" label="[17:25:13]">&lt;stikonas&gt;</a></span><span class="message">yeah, that might be another approach</span></div><div class="line" id="172536"><span class="nick" style="color:#2e2a4a"><a href="#172536" label="[17:25:36]">&lt;stikonas&gt;</a></span><span class="message">though it might be harder than porting hex0/kaem to UEFI</span></div><div class="line" id="172651"><span class="nick" style="color:#8dd3c7"><a href="#172651" label="[17:26:51]">&lt;rickmasters&gt;</a></span><span class="message">yeah, I have no idea at this point</span></div><div class="line" id="173051"><span class="nick" style="color:#8dd3c7"><a href="#173051" label="[17:30:51]">&lt;rickmasters&gt;</a></span><span class="message">ok, just skimming the link you sent, it seems there is a EFI Byte Code Virtual Machine, is that in your radar?</span></div><div class="line" id="173215"><span class="nick" style="color:#2e2a4a"><a href="#173215" label="[17:32:15]">&lt;stikonas&gt;</a></span><span class="message">no, I haven't seen it yet</span></div><div class="line" id="173247"><span class="nick" style="color:#2e2a4a"><a href="#173247" label="[17:32:47]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: I'll properly commit it later, but so far I've written something like <a rel="nofollow" href="https://paste.debian.net/1246377/">https://paste.debian.net/1246377/</a> </span></div><div class="line" id="173333"><span class="nick" style="color:#8dd3c7"><a href="#173333" label="[17:33:33]">&lt;rickmasters&gt;</a></span><span class="message">did the hex0 prototype you wrote in C get compiled to x86 or the EFI byte code?</span></div><div class="line" id="173401"><span class="nick" style="color:#2e2a4a"><a href="#173401" label="[17:34:01]">&lt;stikonas&gt;</a></span><span class="message">it's compiled into UEFI</span></div><div class="line" id="173411"><span class="nick" style="color:#2e2a4a"><a href="#173411" label="[17:34:11]">&lt;stikonas&gt;</a></span><span class="message">oh, but it's x86 assembly</span></div><div class="line" id="173414"><span class="nick" style="color:#2e2a4a"><a href="#173414" label="[17:34:14]">&lt;stikonas&gt;</a></span><span class="message">not byte code</span></div><div class="line" id="173535"><span class="nick" style="color:#2e2a4a"><a href="#173535" label="[17:35:35]">&lt;stikonas&gt;</a></span><span class="message">but if we can write UEFI byte code and have it cross-platform, maybe that's an option too</span></div><div class="line" id="173847"><span class="nick" style="color:#2e2a4a"><a href="#173847" label="[17:38:47]">&lt;stikonas&gt;</a></span><span class="message">UEFI also includes a virtual machine specification based on a byte code format called EFI Byte Code (EBC), which can be used to write platform-independent device drivers, but not UEFI applications. As of 2015 there has been limited use of EBC.</span></div><div class="line" id="173904"><span class="nick" style="color:#2e2a4a"><a href="#173904" label="[17:39:04]">&lt;stikonas&gt;</a></span><span class="message">sounds like we can't use it for applications</span></div><div class="line" id="174003"><span class="nick" style="color:#8dd3c7"><a href="#174003" label="[17:40:03]">&lt;rickmasters&gt;</a></span><span class="message">ok, I see. I found <a rel="nofollow" href="https://wiki.osdev.org/UEFI#UEFI_applications_in_detail">https://wiki.osdev.org/UEFI#UEFI_applications_in_detail</a>  which lists various supported architecures</span></div><div class="line" id="175100"><span class="nick" style="color:#8dd3c7"><a href="#175100" label="[17:51:00]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: stupid question: how do you pass options to your hex0 UEFI application? is that a machine &quot;BIOS&quot; setting?</span></div><div class="line" id="175139"><span class="nick" style="color:#2e2a4a"><a href="#175139" label="[17:51:39]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: right now I use UEFI shell but that can be replaced with kaem-minimal once it exists</span></div><div class="line" id="175149"><span class="nick" style="color:#2e2a4a"><a href="#175149" label="[17:51:49]">&lt;stikonas&gt;</a></span><span class="message">and kaem-minimal does not need any options</span></div><div class="line" id="175153"><span class="nick" style="color:#2e2a4a"><a href="#175153" label="[17:51:53]">&lt;stikonas&gt;</a></span><span class="message">it just runs kaem.run</span></div><div class="line" id="175218"><span class="nick" style="color:#2e2a4a"><a href="#175218" label="[17:52:18]">&lt;stikonas&gt;</a></span><span class="message">UEFI shell can be accessed from boot menu</span></div><div class="line" id="175231"><span class="nick" style="color:#8dd3c7"><a href="#175231" label="[17:52:31]">&lt;rickmasters&gt;</a></span><span class="message">oh, UEFI has a shell. how convenient! lol (PC BIOS sucks)</span></div><div class="line" id="175232"><span class="nick" style="color:#2e2a4a"><a href="#175232" label="[17:52:32]">&lt;stikonas&gt;</a></span><span class="message">I'll push my changes in an hour or so</span></div><div class="line" id="175251"><span class="nick" style="color:#2e2a4a"><a href="#175251" label="[17:52:51]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: well, I think uefi shell is just an application written on top of UEFI</span></div><div class="line" id="175304"><span class="nick" style="color:#2e2a4a"><a href="#175304" label="[17:53:04]">&lt;stikonas&gt;</a></span><span class="message">but standard spec</span></div><div class="line" id="175330"><span class="nick" style="color:#2e2a4a"><a href="#175330" label="[17:53:30]">&lt;stikonas&gt;</a></span><span class="message">well, UEFI is much closer to full OS than BIOS</span></div><div class="line" id="175415"><span class="nick" style="color:#2e2a4a"><a href="#175415" label="[17:54:15]">&lt;stikonas&gt;</a></span><span class="message">anyway, I think kaem-optional-seed will do the job later, but for now UEFI shell is good for development</span></div><div class="line" id="175541"><span class="nick" style="color:#8dd3c7"><a href="#175541" label="[17:55:41]">&lt;rickmasters&gt;</a></span><span class="message">my 4K trs-80 color computer had a better standard interface (a BASIC prompt) than BIOS (none)</span></div><div class="line" id="175651"><span class="nick" style="color:#8dd3c7"><a href="#175651" label="[17:56:51]">&lt;rickmasters&gt;</a></span><span class="message">anyway, BIOS days may be numbered (<a rel="nofollow" href="https://www.theregister.com/2022/05/06/fedora_backs_down_on_removing/">https://www.theregister.com/2022/05/06/fedora_backs_down_on_removing/</a>)  so UEFI is important</span></div><div class="line" id="175749"><span class="nick" style="color:#2e2a4a"><a href="#175749" label="[17:57:49]">&lt;stikonas&gt;</a></span><span class="message">but UEFI is 64-bit (at least most systems ship  with that)</span></div><div class="line" id="175804"><span class="nick" style="color:#2e2a4a"><a href="#175804" label="[17:58:04]">&lt;stikonas&gt;</a></span><span class="message">and later stages of x86_64 bootstrap is still a bit lacking</span></div><div class="line" id="175901"><span class="nick" style="color:#8dd3c7"><a href="#175901" label="[17:59:01]">&lt;rickmasters&gt;</a></span><span class="message">so some UEFI implementations do not support 32-bit? most?</span></div><div class="line" id="175947"><span class="nick" style="color:#8dd3c7"><a href="#175947" label="[17:59:47]">&lt;rickmasters&gt;</a></span><span class="message">it appears to be an option, but modern systems skipped it?</span></div><div class="line" id="180234"><span class="nick" style="color:#2e2a4a"><a href="#180234" label="[18:02:34]">&lt;stikonas&gt;</a></span><span class="message">hmm, I'm not sure... I thought 64-bit UEFI can run 64 bit apps and 32-bit UEFI can run 32-bit UEFI apps</span></div><div class="line" id="180248"><span class="nick" style="color:#2e2a4a"><a href="#180248" label="[18:02:48]">&lt;stikonas&gt;</a></span><span class="message">but outside VM I think you'll struggle to find 32-bit UEFI</span></div><div class="line" id="180346"><span class="nick" style="color:#8dd3c7"><a href="#180346" label="[18:03:46]">&lt;rickmasters&gt;</a></span><span class="message">i wonder if there are 64-bit UEFI boot loader applications which can boot 32-bit kernels</span></div><div class="line" id="180447"><span class="nick" style="color:#2e2a4a"><a href="#180447" label="[18:04:47]">&lt;stikonas&gt;</a></span><span class="message">that might work</span></div><div class="line" id="180449"><span class="nick" style="color:#8dd3c7"><a href="#180449" label="[18:04:49]">&lt;rickmasters&gt;</a></span><span class="message">in which case a 32bit UEFI app would be outdated</span></div><div class="line" id="180510"><span class="nick" style="color:#2e2a4a"><a href="#180510" label="[18:05:10]">&lt;stikonas&gt;</a></span><span class="message">well, if kernel is not UEFI app...</span></div><div class="line" id="180555"><span class="nick" style="color:#2e2a4a"><a href="#180555" label="[18:05:55]">&lt;stikonas&gt;</a></span><span class="message">I guess that might be fairly simple UEFI application, it should load kernel something in the memory, possibly shut down UEFI services and jump to kernel address</span></div><div class="line" id="180839"><span class="nick" style="color:#8dd3c7"><a href="#180839" label="[18:08:39]">&lt;rickmasters&gt;</a></span><span class="message">well, searching around it appears to be possible with some shims but its unnatural and there are issues with it</span></div><div class="line" id="180944"><span class="nick" style="color:#8dd3c7"><a href="#180944" label="[18:09:44]">&lt;rickmasters&gt;</a></span><span class="message">... i mean for running 32-bit linux <a rel="nofollow" href="https://unix.stackexchange.com/questions/581415/how-to-boot-32-bit-linux-kernel-on-64-bit-uefi-system-without-csm">https://unix.stackexchange.com/questions/581415/how-to-boot-32-bit-linux-kernel-on-64-bit-uefi-system-without-csm</a> </span></div><div class="line" id="181137"><span class="nick" style="color:#8dd3c7"><a href="#181137" label="[18:11:37]">&lt;rickmasters&gt;</a></span><span class="message">anyway it looks like 64-bit UEFI is the appropriate target</span></div><div class="line" id="181157"><span class="nick" style="color:#2e2a4a"><a href="#181157" label="[18:11:57]">&lt;stikonas&gt;</a></span><span class="message">well, maybe somebody will be more inspired to fix mes/tcc for 64-bits</span></div><div class="line" id="181210"><span class="nick" style="color:#2e2a4a"><a href="#181210" label="[18:12:10]">&lt;stikonas&gt;</a></span><span class="message">if we get early steps working</span></div><div class="line" id="181244"><span class="nick" style="color:#2e2a4a"><a href="#181244" label="[18:12:44]">&lt;stikonas&gt;</a></span><span class="message">right now motivation was lower since 64-bit linux kernel can run 32-bit apps</span></div><div class="line" id="181335"><span class="nick" style="color:#8dd3c7"><a href="#181335" label="[18:13:35]">&lt;rickmasters&gt;</a></span><span class="message">right, bootstrapping was not the motivation</span></div><div class="line" id="181346"><span class="nick" style="color:#2e2a4a"><a href="#181346" label="[18:13:46]">&lt;stikonas&gt;</a></span><span class="message">though not without some problems, live-bootstrap has Y2K38 problem</span></div><div class="line" id="181553"><span class="nick" style="color:#8dd3c7"><a href="#181553" label="[18:15:53]">&lt;rickmasters&gt;</a></span><span class="message">it does make me question the long term relevancy of 32-bit bootstrapping in general, and that includes builder-hex0 :(</span></div><div class="line" id="181719"><span class="nick" style="color:#8dd3c7"><a href="#181719" label="[18:17:19]">&lt;rickmasters&gt;</a></span><span class="message">similar to BIOS, it's like historical more than practical</span></div><div class="line" id="183841"><span class="nick" style="color:#2e2a4a"><a href="#183841" label="[18:38:41]">&lt;stikonas&gt;</a></span><span class="message">it will still be there for some time</span></div><div class="line" id="183851"><span class="nick" style="color:#2e2a4a"><a href="#183851" label="[18:38:51]">&lt;stikonas&gt;</a></span><span class="message">and it's nice to have something lower level than UEFI</span></div><div class="line" id="183915"><span class="nick" style="color:#2e2a4a"><a href="#183915" label="[18:39:15]">&lt;stikonas&gt;</a></span><span class="message">it might be good example if somebody really needs to implement full baremetal bootstrap</span></div><div class="line" id="183922"><span class="nick" style="color:#2e2a4a"><a href="#183922" label="[18:39:22]">&lt;stikonas&gt;</a></span><span class="message">with no UEFI or BIOS</span></div><div class="line" id="184007"><span class="nick" style="color:#2e2a4a"><a href="#184007" label="[18:40:07]">&lt;stikonas&gt;</a></span><span class="message">you baasically need to take builder-hex0 and replace bios calls with something that interacts with hardware, i.e. some small driver, say SPI</span></div><div class="line" id="184047"><span class="nick" style="color:#2e2a4a"><a href="#184047" label="[18:40:47]">&lt;stikonas&gt;</a></span><span class="message">it will probably be a few times bigger than builder-hex0</span></div><div class="line" id="184055"><span class="nick" style="color:#2e2a4a"><a href="#184055" label="[18:40:55]">&lt;stikonas&gt;</a></span><span class="message">but way smaller than any UEFI or BIOS implementation</span></div><div class="line" id="184819"><span class="nick" style="color:#6b8072"><a href="#184819" label="[18:48:19]">&lt;oriansj&gt;</a></span><span class="message">well we have until 2038 to sort all of that out</span></div><div class="line" id="184859"><span class="nick" style="color:#6b8072"><a href="#184859" label="[18:48:59]">&lt;oriansj&gt;</a></span><span class="message">and UEFI bootstrapping looks like it might be fun once I figure out how we are going to enable relocation with hex2/hex1/hex0 generated files</span></div><div class="line" id="185016"><span class="nick" style="color:#6b8072"><a href="#185016" label="[18:50:16]">&lt;oriansj&gt;</a></span><span class="message">and a stage0-UEFI port sounds cool (along with UEFI enhancements for M2libc)</span></div><div class="line" id="185102"><span class="nick" style="color:#6b8072"><a href="#185102" label="[18:51:02]">&lt;oriansj&gt;</a></span><span class="message">and rickmasters you are probably right getting a better C99 compiler before we start doing a kernel in C might end up saving us a good bit of time.</span></div><div class="line" id="185130"><span class="nick" style="color:#6b8072"><a href="#185130" label="[18:51:30]">&lt;oriansj&gt;</a></span><span class="message">especially in light that xv6 would become a buildable base for our work</span></div><div class="line" id="185415"><span class="nick" style="color:#2e2a4a"><a href="#185415" label="[18:54:15]">&lt;stikonas&gt;</a></span><span class="message">hmm, not sure where to publish my repo...</span></div><div class="line" id="185428"><span class="nick" style="color:#2e2a4a"><a href="#185428" label="[18:54:28]">&lt;stikonas&gt;</a></span><span class="message">github is where most people push... But <a rel="nofollow" href="https://techcrunch.com/2022/07/01/open-source-developers-urged-to-ditch-github-following-copilot-launch/">https://techcrunch.com/2022/07/01/open-source-developers-urged-to-ditch-github-following-copilot-launch/</a>  ...</span></div><div class="line" id="185450"><span class="nick" style="color:#2e2a4a"><a href="#185450" label="[18:54:50]">&lt;stikonas&gt;</a></span><span class="message">maybe I'll push to my server for now, it has github oauth2 login enabled...</span></div><div class="line" id="185636"><span class="nick" style="color:#2e2a4a"><a href="#185636" label="[18:56:36]">&lt;stikonas&gt;</a></span><span class="message">rickmasters,  oriansj:  <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi">https://git.stikonas.eu/andrius/stage0-uefi</a> </span></div><div class="line" id="185807"><span class="nick" style="color:#2e2a4a"><a href="#185807" label="[18:58:07]">&lt;stikonas&gt;</a></span><span class="message">for qemu it needs edk2-ovmf image but that can be found in many distros <a rel="nofollow" href="https://repology.org/project/edk2/badges">https://repology.org/project/edk2/badges</a> </span></div><div class="line" id="185920"><span class="nick" style="color:#2e2a4a"><a href="#185920" label="[18:59:20]">&lt;stikonas&gt;</a></span><span class="message">to test run make in Development dir, click F2 and select UEFI shell</span></div><div class="line" id="185943"><span class="nick" style="color:#2e2a4a"><a href="#185943" label="[18:59:43]">&lt;stikonas&gt;</a></span><span class="message">oh you might need to also install mtools</span></div><div class="line" id="190023"><span class="nick" style="color:#8dd3c7"><a href="#190023" label="[19:00:23]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: thanks. not sure i've seen xv6, i'll have to take a look</span></div><div class="line" id="190125"><span class="nick" style="color:#8dd3c7"><a href="#190125" label="[19:01:25]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: thanks. that'll be a real time saver to start playing around with UEFI</span></div><div class="line" id="190138"><span class="nick" style="color:#2e2a4a"><a href="#190138" label="[19:01:38]">&lt;stikonas&gt;</a></span><span class="message">let me know if it runs</span></div><div class="line" id="190149"><span class="nick" style="color:#8dd3c7"><a href="#190149" label="[19:01:49]">&lt;rickmasters&gt;</a></span><span class="message">i need to step away for a bit, back in hour or so</span></div><div class="line" id="190151"><span class="nick" style="color:#2e2a4a"><a href="#190151" label="[19:01:51]">&lt;stikonas&gt;</a></span><span class="message">I haven't added any README yet, but merge requests are welcome</span></div><div class="line" id="190340"><span class="nick" style="color:#2e2a4a"><a href="#190340" label="[19:03:40]">&lt;stikonas&gt;</a></span><span class="message">hex0.c is fairly low level, it includes efi.h but that is struct and typedef only includes</span></div><div class="line" id="190402"><span class="nick" style="color:#2e2a4a"><a href="#190402" label="[19:04:02]">&lt;stikonas&gt;</a></span><span class="message">so in assembly it will be just some offset</span></div><div class="line" id="190828"><span class="nick" style="color:#2e2a4a"><a href="#190828" label="[19:08:28]">&lt;stikonas&gt;</a></span><span class="message">oriansj: hmm, yes, relocation might be a problem...</span></div><div class="line" id="190942"><span class="nick" style="color:#2e2a4a"><a href="#190942" label="[19:09:42]">&lt;stikonas&gt;</a></span><span class="message">I guess for hex0 it's not a problem since it's just hex code anyway</span></div><div class="line" id="192047"><span class="nick" style="color:#6b8072"><a href="#192047" label="[19:20:47]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well absolute addresses can be resolved at runtime for the mallocs but the addresses for globals remain a problem unless they are malloc'd too</span></div><div class="line" id="192214"><span class="nick" style="color:#6b8072"><a href="#192214" label="[19:22:14]">&lt;oriansj&gt;</a></span><span class="message">So there is some complexity needed but not anything actually *hard* if anything the lack of absolute addresses for the lower steps forces us to avoid a few earlier and worse design ideas</span></div><div class="line" id="192312"><span class="nick" style="color:#6b8072"><a href="#192312" label="[19:23:12]">&lt;oriansj&gt;</a></span><span class="message">To the github problem, well if I am setting up a server with a wiki and a domain we control, why not go the distance and add something to host git repos and email too</span></div><div class="line" id="192429"><span class="nick" style="color:#80b1d3"><a href="#192429" label="[19:24:29]">&lt;Hagfish&gt;</a></span><span class="message">&quot;NOTE: we have stopped maintaining the x86 version of xv6, and switched our efforts to the RISC-V version&quot;.  hmm, that's a bit unfortunate, especially as there are open PRs against the repo</span></div><div class="line" id="192529"><span class="nick" style="color:#6b8072"><a href="#192529" label="[19:25:29]">&lt;oriansj&gt;</a></span><span class="message">Hagfish: actually that means it is ripe for someone else to take over the lead for xv6-x86</span></div><div class="line" id="192622"><span class="nick" style="color:#80b1d3"><a href="#192622" label="[19:26:22]">&lt;Hagfish&gt;</a></span><span class="message">good point</span></div><div class="line" id="192639"><span class="nick" style="color:#6b8072"><a href="#192639" label="[19:26:39]">&lt;oriansj&gt;</a></span><span class="message">just maintain feature parity with risc-v xv6 and focus on clarity and you are golden</span></div><div class="line" id="192718"><span class="nick" style="color:#80b1d3"><a href="#192718" label="[19:27:18]">&lt;Hagfish&gt;</a></span><span class="message">yeah, it would be a pity to depart from the original goals of being an OS to teach students concepts</span></div><div class="line" id="192745"><span class="nick" style="color:#80b1d3"><a href="#192745" label="[19:27:45]">&lt;Hagfish&gt;</a></span><span class="message">a teachable OS is an auditable OS, and teaching isn't complete if it doesn't include bootstrapping :)</span></div><div class="line" id="192822"><span class="nick" style="color:#6b8072"><a href="#192822" label="[19:28:22]">&lt;oriansj&gt;</a></span><span class="message">exactly</span></div><div class="line" id="192851"><span class="nick" style="color:#6b8072"><a href="#192851" label="[19:28:51]">&lt;oriansj&gt;</a></span><span class="message">learn everything you ever wanted to know about compilers, libraries and operating systems (and probably hardware later too ^_^)</span></div><div class="line" id="192937"><span class="nick" style="color:#80b1d3"><a href="#192937" label="[19:29:37]">&lt;Hagfish&gt;</a></span><span class="message">that might take more than a year for someone who is completely new to those concepts, but it would be a year well spent</span></div><div class="line" id="193002"><span class="nick" style="color:#80b1d3"><a href="#193002" label="[19:30:02]">&lt;Hagfish&gt;</a></span><span class="message">and a good teacher could probably trim down the course to just focus on the highlights, and to inspire the student to go away and learn more on their own</span></div><div class="line" id="193025"><span class="nick" style="color:#2e2a4a"><a href="#193025" label="[19:30:25]">&lt;stikonas&gt;</a></span><span class="message">oriansj: mallocs are not an issue I think</span></div><div class="line" id="193033"><span class="nick" style="color:#2e2a4a"><a href="#193033" label="[19:30:33]">&lt;stikonas&gt;</a></span><span class="message">oriansj: we just reserve memory_pool from UEFI</span></div><div class="line" id="193113"><span class="nick" style="color:#2e2a4a"><a href="#193113" label="[19:31:13]">&lt;stikonas&gt;</a></span><span class="message">or maybe the functions is called allocate_pool</span></div><div class="line" id="193117"><span class="nick" style="color:#6b8072"><a href="#193117" label="[19:31:17]">&lt;oriansj&gt;</a></span><span class="message">stikonas: we can still an idea from knight and just use a register as a malloc pointer</span></div><div class="line" id="193129"><span class="nick" style="color:#6b8072"><a href="#193129" label="[19:31:29]">&lt;oriansj&gt;</a></span><span class="message">^still^steal^</span></div><div class="line" id="195713"><span class="nick" style="color:#6b8072"><a href="#195713" label="[19:57:13]">&lt;oriansj&gt;</a></span><span class="message">ok and I bought a domain and paid for it to be registered for the next 10 years: bootstrapping.world</span></div><div class="line" id="200115"><span class="nick" style="color:#6b8072"><a href="#200115" label="[20:01:15]">&lt;oriansj&gt;</a></span><span class="message">next up is I am going to setup a server with sshd and doku-wiki and then something to provide a public git service</span></div><div class="line" id="200326"><span class="nick" style="color:#6b8072"><a href="#200326" label="[20:03:26]">&lt;oriansj&gt;</a></span><span class="message">Then probably getting accounts setup for the people here</span></div><div class="line" id="200446"><span class="nick" style="color:#6b8072"><a href="#200446" label="[20:04:46]">&lt;oriansj&gt;</a></span><span class="message">so if anyone has a good suggestion for a self-host web-git service let me know</span></div><div class="line" id="200936"><span class="nick" style="color:#6b8072"><a href="#200936" label="[20:09:36]">&lt;oriansj&gt;</a></span><span class="message">say wiki.bootstrapping.world for the wiki and git.bootstrapping.world for the public git repos and files.bootstrapping.world for the tarballs/videos</span></div><div class="line" id="201020"><span class="nick" style="color:#6b8072"><a href="#201020" label="[20:10:20]">&lt;oriansj&gt;</a></span><span class="message">unless someone thinks we need something more complicated than just a folder with files</span></div><div class="line" id="201643"><span class="nick" style="color:#80b1d3"><a href="#201643" label="[20:16:43]">&lt;Hagfish&gt;</a></span><span class="message">that sounds like a nice logical setup</span></div><div class="line" id="201800"><span class="nick" style="color:#80b1d3"><a href="#201800" label="[20:18:00]">&lt;Hagfish&gt;</a></span><span class="message">it's worth checking what the best practices are if you're hosting an sshd server on the public internet</span></div><div class="line" id="201811"><span class="nick" style="color:#80b1d3"><a href="#201811" label="[20:18:11]">&lt;Hagfish&gt;</a></span><span class="message">presumably only allowing keys, not passwords</span></div><div class="line" id="201927"><span class="nick" style="color:#2e2a4a"><a href="#201927" label="[20:19:27]">&lt;stikonas&gt;</a></span><span class="message">that's standard these days...</span></div><div class="line" id="202000"><span class="nick" style="color:#2e2a4a"><a href="#202000" label="[20:20:00]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I've only tried gitea and gitlab, but gitlab is pain to install</span></div><div class="line" id="202022"><span class="nick" style="color:#2e2a4a"><a href="#202022" label="[20:20:22]">&lt;stikonas&gt;</a></span><span class="message">even if it has tiny bit more features</span></div><div class="line" id="202120"><span class="nick" style="color:#80b1d3"><a href="#202120" label="[20:21:20]">&lt;Hagfish&gt;</a></span><span class="message">i got the impression that sshds are a big target, but maybe the real threat is just that you get swamped by bot connections</span></div><div class="line" id="202145"><span class="nick" style="color:#2e2a4a"><a href="#202145" label="[20:21:45]">&lt;stikonas&gt;</a></span><span class="message">with password authentication disabled, they are harmless</span></div><div class="line" id="202153"><span class="nick" style="color:#2e2a4a"><a href="#202153" label="[20:21:53]">&lt;stikonas&gt;</a></span><span class="message">more annoying thing are spam accounts</span></div><div class="line" id="202221"><span class="nick" style="color:#2e2a4a"><a href="#202221" label="[20:22:21]">&lt;stikonas&gt;</a></span><span class="message">I had to disable new user  registration on my gitea instance (though they can still login via github)</span></div><div class="line" id="202251"><span class="nick" style="color:#2e2a4a"><a href="#202251" label="[20:22:51]">&lt;stikonas&gt;</a></span><span class="message">but my server is at home on residential connection...</span></div><div class="line" id="202310"><span class="nick" style="color:#2e2a4a"><a href="#202310" label="[20:23:10]">&lt;stikonas&gt;</a></span><span class="message">so now that oriansj has non-residential server, it's probably a better place</span></div><div class="line" id="202312"><span class="nick" style="color:#6b8072"><a href="#202312" label="[20:23:12]">&lt;oriansj&gt;</a></span><span class="message">Hagfish: port knocking solves that pretty quick</span></div><div class="line" id="202337"><span class="nick" style="color:#6b8072"><a href="#202337" label="[20:23:37]">&lt;oriansj&gt;</a></span><span class="message">basically if you don't knock the server correctly, no sshd for you</span></div><div class="line" id="202510"><span class="nick" style="color:#80b1d3"><a href="#202510" label="[20:25:10]">&lt;Hagfish&gt;</a></span><span class="message">yeah, i used to think that knocking was security by obscurity, but i guess it does counter a real threat in an efficient way</span></div><div class="line" id="202528"><span class="nick" style="color:#6b8072"><a href="#202528" label="[20:25:28]">&lt;oriansj&gt;</a></span><span class="message">easiest way to set that up is randomly generate the sequence and email those who need access the sequence</span></div><div class="line" id="202611"><span class="nick" style="color:#80b1d3"><a href="#202611" label="[20:26:11]">&lt;Hagfish&gt;</a></span><span class="message">yeah, that doesn't sound like too much overhead (although in theory you'd want to regular rotate that &quot;key&quot;)</span></div><div class="line" id="203248"><span class="nick" style="color:#2e2a4a"><a href="#203248" label="[20:32:48]">&lt;stikonas&gt;</a></span><span class="message">well, port knocking is in principle extra password</span></div><div class="line" id="203258"><span class="nick" style="color:#2e2a4a"><a href="#203258" label="[20:32:58]">&lt;stikonas&gt;</a></span><span class="message">so it's some kind of 2 factor authentication</span></div><div class="line" id="203631"><span class="nick" style="color:#6b8072"><a href="#203631" label="[20:36:31]">&lt;oriansj&gt;</a></span><span class="message">Hagfish: if you can guess a 5 number sequence (in the port range we use for knocking  which is a couple thousand) and get it right in 3 guesses, then yeah rotation will be needed frequently. However if not, we can just black list any IP that hits the first port number more than 3 times but fails to hit the second port with its next packet.</span></div><div class="line" id="203728"><span class="nick" style="color:#6b8072"><a href="#203728" label="[20:37:28]">&lt;oriansj&gt;</a></span><span class="message">and do a yearly rotation as part of a scheduled maintance task</span></div><div class="line" id="204041"><span class="nick" style="color:#6b8072"><a href="#204041" label="[20:40:41]">&lt;oriansj&gt;</a></span><span class="message">also one needs to remember obscurity is a tool of security but you are absolutely right that it shouldn't be the only tool. As passwords and certificates and passphrases are just obscurity and if the bad guy gets infinite guesses, they will get in. So rate limiting and lock-outs after repeated failures and just straight dropping of traffic from all non-approved IP addresses limit the odds of someone guessing right.</span></div><div class="line" id="204237"><span class="nick" style="color:#6b8072"><a href="#204237" label="[20:42:37]">&lt;oriansj&gt;</a></span><span class="message">if someone has a zero day against some service you use (and there are lots of those out there), your only safe play is to drop all traffic from parties you don't trust</span></div><div class="line" id="204728"><span class="nick" style="color:#6b8072"><a href="#204728" label="[20:47:28]">&lt;oriansj&gt;</a></span><span class="message">right now, I have enough remotely executable &quot;zero day&quot; (but honestly like day 1000+ but Oracle still hasn't patched yet) vulnerabilities to say if you have an Oracle database hardened to STIG levels that I can connect to over the network, I am able to own that box in 3 minutes but add a simple firewall rule that just drops all traffic from IP addresses that aren't trusted and boom that risk drops down to zero (until I get a zero day</span></div><div class="line" id="204728"><span class="nick" style="color:#6b8072"><a href="#204728" label="[20:47:28]">&lt;oriansj&gt;</a></span><span class="message">against your firewall software)</span></div><div class="line" id="204944"><span class="nick" style="color:#6b8072"><a href="#204944" label="[20:49:44]">&lt;oriansj&gt;</a></span><span class="message">ideally public facing systems are nothing but a simple proxy but as I do have to budget within the limits of my wife, less than optimal security might have to occur.</span></div><div class="line" id="205102"><span class="nick" style="color:#6b8072"><a href="#205102" label="[20:51:02]">&lt;oriansj&gt;</a></span><span class="message">(proxy/load balancer)</span></div><div class="line" id="205151"><span class="nick" style="color:#6b8072"><a href="#205151" label="[20:51:51]">&lt;oriansj&gt;</a></span><span class="message">and that system should get wiped/reset daily</span></div><div class="line" id="205434"><span class="nick" style="color:#6b8072"><a href="#205434" label="[20:54:34]">&lt;oriansj&gt;</a></span><span class="message">as that system just has the proxy setup and just the ability to directly access to the actual servers on the same ports it proxies</span></div><div class="line" id="205826"><span class="nick" style="color:#6b8072"><a href="#205826" label="[20:58:26]">&lt;oriansj&gt;</a></span><span class="message">no credentials or even extra access but services which flag if new files or processes are created or if checksums of the process memory changes; those flags result in the systems being instantly wiped clean, notifications being sent out and a dump to investigate.</span></div><div class="line" id="210548"><span class="nick" style="color:#6b8072"><a href="#210548" label="[21:05:48]">&lt;oriansj&gt;</a></span><span class="message">and for extra fun, because user passwords and port sequences are generated at setup (and sent out); we don't need git-secrets for the configuration of the servers. Anyone would be able to build identical services with the same users if they so wanted.</span></div><div class="line" id="210641"><span class="nick" style="color:#6b8072"><a href="#210641" label="[21:06:41]">&lt;oriansj&gt;</a></span><span class="message">we need only add public keys for the people which we use to encrypt the emails with the credentials which are generated.</span></div><div class="line" id="210855"><span class="nick" style="color:#6b8072"><a href="#210855" label="[21:08:55]">&lt;oriansj&gt;</a></span><span class="message">(adding usenet/mailing-list and other extras might be an option if anyone wants to do that)</span></div><div class="line" id="212701"><span class="nick" style="color:#6b8072"><a href="#212701" label="[21:27:01]">&lt;oriansj&gt;</a></span><span class="message">and as I don't think I can convince her to let me buy multiple servers nor do the $50/month per 1U hosting cost for dozens of servers; we might have to just setup a backup.bootstrapping.world that anyone can mirror the data and everyone can know what needs to be restored if things go sideways</span></div><div class="line" id="223739"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o janneke</span></div><div class="line" id="225217"><span class="nick" style="color:#2e2a4a"><a href="#225217" label="[22:52:17]">&lt;stikonas&gt;</a></span><span class="message">hmm, I can't see why EFI byte code wouldn't work for applications...</span></div><div class="line" id="225228"><span class="nick" style="color:#2e2a4a"><a href="#225228" label="[22:52:28]">&lt;stikonas&gt;</a></span><span class="message">though I don't know how widespread it is...</span></div><div class="line" id="225232"><span class="nick" style="color:#2e2a4a"><a href="#225232" label="[22:52:32]">&lt;stikonas&gt;</a></span><span class="message">I don't think U-Boot implements it</span></div><div class="line" id="231423"><span class="nick" style="color:#2e2a4a"><a href="#231423" label="[23:14:23]">&lt;stikonas&gt;</a></span><span class="message">although it looks like EBC might be going away... So probably best not to target it</span></div><div class="line" id="231448"><span class="nick" style="color:#2e2a4a"><a href="#231448" label="[23:14:48]">&lt;stikonas&gt;</a></span><span class="message">well, AMD64 then...</span></div><div class="line" id="231707"><span class="nick" style="color:#6b8072"><a href="#231707" label="[23:17:07]">&lt;oriansj&gt;</a></span><span class="message">or maybe someone will figure out a trivial VM which fits in 2KB and runs on bare metal providing the most minimal functionality we need in a portable way and it'll enable stage0 porting to new hardware</span></div><div class="line" id="231828"><span class="nick" style="color:#6b8072"><a href="#231828" label="[23:18:28]">&lt;oriansj&gt;</a></span><span class="message">getting a subset of knight is quite possible in 16KB</span></div><div class="line" id="231947"><span class="nick" style="color:#6b8072"><a href="#231947" label="[23:19:47]">&lt;oriansj&gt;</a></span><span class="message">I'll need more practice with kernel writing first before I'd probably do that</span></div><div class="line" id="232021"><span class="nick" style="color:#6b8072"><a href="#232021" label="[23:20:21]">&lt;oriansj&gt;</a></span><span class="message">but first, I think I'll just make our wiki a series of static pages with a git repo behind it until I come up with a better idea</span></div><div class="line" id="233715"><span class="nick" style="color:#2e2a4a"><a href="#233715" label="[23:37:15]">&lt;stikonas&gt;</a></span><span class="message">well, there are brainfuck VMs that fit even in smaller amount and probably one can modify them to support file operations necessary for bootstrapping. But the problem is that then machine code is probably easier to read than BF code</span></div><br /></div></body></html>