<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-12-09.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000017"><span class="nick" style="color:#389600"><a href="#000017" label="[00:00:17]">&lt;mihi&gt;</a></span><span class="message">(the coincidence being me running into that exact same issue this week)</span></div><div class="line" id="000024"><span class="nick" style="color:#8dd3c7"><a href="#000024" label="[00:00:24]">&lt;stikonas&gt;</a></span><span class="message">but at least linux kernel does not crash if you do syscall with non-aligned stack</span></div><div class="line" id="000058"><span class="nick" style="color:#389600"><a href="#000058" label="[00:00:58]">&lt;mihi&gt;</a></span><span class="message">I guess kernel does not have that much use for XMM vector maths (which require 16-bit aligned addresses)</span></div><div class="line" id="000111"><span class="nick" style="color:#389600"><a href="#000111" label="[00:01:11]">&lt;mihi&gt;</a></span><span class="message">s/bit/byte/</span></div><div class="line" id="000208"><span class="nick" style="color:#389600"><a href="#000208" label="[00:02:08]">&lt;mihi&gt;</a></span><span class="message">in higher code (M2libc) you can probably dynamically fix alignment, and make sure the last value you push is the original stack pointer so you can go back on return.</span></div><div class="line" id="001402"><span class="nick" style="color:#8dd3c7"><a href="#001402" label="[00:14:02]">&lt;stikonas&gt;</a></span><span class="message">yeah, we'll have to somehow dynamically fix allignment</span></div><div class="line" id="001409"><span class="nick" style="color:#8dd3c7"><a href="#001409" label="[00:14:09]">&lt;stikonas&gt;</a></span><span class="message">not sure if that will need changes to M2-Planet</span></div><div class="line" id="001416"><span class="nick" style="color:#8dd3c7"><a href="#001416" label="[00:14:16]">&lt;stikonas&gt;</a></span><span class="message">but lower levels are annoying...</span></div><div class="line" id="001427"><span class="nick" style="color:#8dd3c7"><a href="#001427" label="[00:14:27]">&lt;stikonas&gt;</a></span><span class="message">and especially testing...</span></div><div class="line" id="001433"><span class="nick" style="color:#8dd3c7"><a href="#001433" label="[00:14:33]">&lt;stikonas&gt;</a></span><span class="message">since I can only reproduce it on real HW...</span></div><div class="line" id="012435"><span class="nick" style="color:#2e2a4a"><a href="#012435" label="[01:24:35]">&lt;oriansj&gt;</a></span><span class="message">well the easiest way in M2-Planet is add some logic to function calls to add some push nulls befor pushing actual values</span></div><div class="line" id="022326"><span class="nick" style="color:#8dd3c7"><a href="#022326" label="[02:23:26]">&lt;stikonas&gt;</a></span><span class="message">well, we either need to add push 0 or nothing</span></div><div class="line" id="022335"><span class="nick" style="color:#8dd3c7"><a href="#022335" label="[02:23:35]">&lt;stikonas&gt;</a></span><span class="message">but it's not completely trivial</span></div><div class="line" id="022343"><span class="nick" style="color:#8dd3c7"><a href="#022343" label="[02:23:43]">&lt;stikonas&gt;</a></span><span class="message">you need to keep track of stack pointer...</span></div><div class="line" id="022404"><span class="nick" style="color:#8dd3c7"><a href="#022404" label="[02:24:04]">&lt;stikonas&gt;</a></span><span class="message">(also call instructions move it by 8 as well...)</span></div><div class="line" id="022430"><span class="nick" style="color:#8dd3c7"><a href="#022430" label="[02:24:30]">&lt;stikonas&gt;</a></span><span class="message">anyway, I think that was the issue for stage0-uefi not working on my machine</span></div><div class="line" id="022443"><span class="nick" style="color:#8dd3c7"><a href="#022443" label="[02:24:43]">&lt;stikonas&gt;</a></span><span class="message">with a few pushes and pops I've now got it to output first byte...</span></div><div class="line" id="022746"><span class="nick" style="color:#8dd3c7"><a href="#022746" label="[02:27:46]">&lt;stikonas&gt;</a></span><span class="message">anyway, need to do it in a bit more systematic way...</span></div><div class="line" id="022754"><span class="nick" style="color:#8dd3c7"><a href="#022754" label="[02:27:54]">&lt;stikonas&gt;</a></span><span class="message">using pushes and pops is a bit annoying</span></div><div class="line" id="023031"><span class="nick" style="color:#8dd3c7"><a href="#023031" label="[02:30:31]">&lt;stikonas&gt;</a></span><span class="message">SO has suggestions to use  and esp, -16</span></div><div class="line" id="023505"><span class="nick" style="color:#8dd3c7"><a href="#023505" label="[02:35:05]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I think this should also work in M2libc...</span></div><div class="line" id="023515"><span class="nick" style="color:#8dd3c7"><a href="#023515" label="[02:35:15]">&lt;stikonas&gt;</a></span><span class="message">perhaps no changes are needed in M2-Planet then</span></div><div class="line" id="024627"><span class="nick" style="color:#2e2a4a"><a href="#024627" label="[02:46:27]">&lt;oriansj&gt;</a></span><span class="message">well M2-Planet does know the exact number of arguments it needs to push onto the stack for every function call but if that stack behavior only matters for UEFI calls; then yeah we could do it easier in M2libc</span></div><div class="line" id="031205"><span class="nick" style="color:#8dd3c7"><a href="#031205" label="[03:12:05]">&lt;stikonas&gt;</a></span><span class="message">well, but compiler might not know whether stack is currently 16-byte aligned</span></div><div class="line" id="031223"><span class="nick" style="color:#8dd3c7"><a href="#031223" label="[03:12:23]">&lt;stikonas&gt;</a></span><span class="message">e.g. it might be recursion and function can have different depths</span></div><div class="line" id="031231"><span class="nick" style="color:#8dd3c7"><a href="#031231" label="[03:12:31]">&lt;stikonas&gt;</a></span><span class="message">so I think M2libc is far easier</span></div><div class="line" id="031256"><span class="nick" style="color:#8dd3c7"><a href="#031256" label="[03:12:56]">&lt;stikonas&gt;</a></span><span class="message">anyway, that scheme seems to work</span></div><div class="line" id="031316"><span class="nick" style="color:#8dd3c7"><a href="#031316" label="[03:13:16]">&lt;stikonas&gt;</a></span><span class="message">before each UEFI call we need to place and rsp, -16</span></div><div class="line" id="031324"><span class="nick" style="color:#8dd3c7"><a href="#031324" label="[03:13:24]">&lt;stikonas&gt;</a></span><span class="message">and possibly another push rax</span></div><div class="line" id="031358"><span class="nick" style="color:#8dd3c7"><a href="#031358" label="[03:13:58]">&lt;stikonas&gt;</a></span><span class="message">(depending on whether we have even or odd number of stack pushes between &quot;and rsp, -16&quot; and call</span></div><div class="line" id="044933"><span class="nick" style="color:#6b8072"><a href="#044933" label="[04:49:33]">&lt;npcomp&gt;</a></span><span class="message">Hi! New here.</span></div><div class="line" id="045353"><span class="nick" style="color:#6b8072"><a href="#045353" label="[04:53:53]">&lt;npcomp&gt;</a></span><span class="message">Is there a preferred minimal VM image that is used to execute the bootstrap seeds?</span></div><div class="line" id="045934"><span class="nick" style="color:#2e2a4a"><a href="#045934" label="[04:59:34]">&lt;oriansj&gt;</a></span><span class="message">npcomp: nope, it is very much bootstrap as you like.</span></div><div class="line" id="051033"><span class="nick" style="color:#6b8072"><a href="#051033" label="[05:10:33]">&lt;npcomp&gt;</a></span><span class="message">Ok, so oriansj , I executed the bootstrap seed and ended up with my binaries, I suppose my goal is to end up with a bootable guix image? Is fosslinux/live-bootstrap the intervening step I need?</span></div><div class="line" id="115850"><span class="nick" style="color:#80b1d3"><a href="#115850" label="[11:58:50]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; npcomp: live-bootstrap should give you a good headstart</span></div><div class="line" id="115907"><span class="nick" style="color:#80b1d3"><a href="#115907" label="[11:59:07]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Especially if you run inside VM</span></div><div class="line" id="115947"><span class="nick" style="color:#80b1d3"><a href="#115947" label="[11:59:47]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; But after it you'll have to bootstrap guix manually</span></div><div class="line" id="120013"><span class="nick" style="color:#80b1d3"><a href="#120013" label="[12:00:13]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; (Though you'll already have GCC/Guile and other stuff)</span></div><div class="line" id="123443"><span class="nick" style="color:#8dd3c7"><a href="#123443" label="[12:34:43]">&lt;stikonas&gt;</a></span><span class="message">fossy: which PRs should I look at?</span></div><div class="line" id="133946"><span class="nick" style="color:#8dd3c7"><a href="#133946" label="[13:39:46]">&lt;stikonas&gt;</a></span><span class="message">ok, I think I fixed hex0.S in stage0-uefi...</span></div><div class="line" id="134051"><span class="nick" style="color:#8dd3c7"><a href="#134051" label="[13:40:51]">&lt;stikonas&gt;</a></span><span class="message">somthing like this seems to work: <a rel="nofollow" href="https://paste.debian.net/1300621/">https://paste.debian.net/1300621/</a> </span></div><div class="line" id="134119"><span class="nick" style="color:#8dd3c7"><a href="#134119" label="[13:41:19]">&lt;stikonas&gt;</a></span><span class="message">well, my implementation of UEFI only needs rbp restored, but probably safer to save/restore all non-volatile registers as the spec requires</span></div><div class="line" id="140811"><span class="nick" style="color:#8dd3c7"><a href="#140811" label="[14:08:11]">&lt;stikonas&gt;</a></span><span class="message">hmm, that's extra 57 byte increase from 832 to 889 for hex0.efi</span></div><div class="line" id="140827"><span class="nick" style="color:#8dd3c7"><a href="#140827" label="[14:08:27]">&lt;stikonas&gt;</a></span><span class="message">but oh well, we must be spec compatible for it to work anyway</span></div><div class="line" id="161248"><span class="nick" style="color:#80b1d3"><a href="#161248" label="[16:12:48]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;cosinusoidally&gt; My code is very rough and fragile, but I'm now able to build a statically linked executable version of tcc 0.9.27 using my tcc bootstrap <a rel="nofollow" href="https://github.com/cosinusoidally/tcc_bootstrap_alt/blob/dev/tcc_27/run_27_static.kaem">https://github.com/cosinusoidally/tcc_bootstrap_alt/blob/dev/tcc_27/run_27_static.kaem</a> </span></div><div class="line" id="161301"><span class="nick" style="color:#80b1d3"><a href="#161301" label="[16:13:01]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;cosinusoidally&gt; It can't yet mark itself as executable so you need a chmod +x ../artifacts/tcc_27_boot_static.exe . It can rebuild itself (see run_27_static.sh).</span></div><div class="line" id="161659"><span class="nick" style="color:#80b1d3"><a href="#161659" label="[16:16:59]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;cosinusoidally&gt; fragile to the extent that I tried moving around some lines in my libc_static.c to make it less messy, but then it broke and I had to revert it.</span></div><div class="line" id="171242"><span class="nick" style="color:#8dd3c7"><a href="#171242" label="[17:12:42]">&lt;stikonas&gt;</a></span><span class="message">oriansj: what's the correct way of dealing with A displacement of 38242 does not fit in 2 bytes</span></div><div class="line" id="171314"><span class="nick" style="color:#8dd3c7"><a href="#171314" label="[17:13:14]">&lt;stikonas&gt;</a></span><span class="message">I've now got this complaint in M1 when it saw immediate @0x9562</span></div><div class="line" id="171457"><span class="nick" style="color:#8dd3c7"><a href="#171457" label="[17:14:57]">&lt;stikonas&gt;</a></span><span class="message">I guess this is one of the new range checks...</span></div><div class="line" id="172051"><span class="nick" style="color:#8dd3c7"><a href="#172051" label="[17:20:51]">&lt;stikonas&gt;</a></span><span class="message">hmm, this probably breaks all later UEFI apps...</span></div><div class="line" id="172115"><span class="nick" style="color:#8dd3c7"><a href="#172115" label="[17:21:15]">&lt;stikonas&gt;</a></span><span class="message">(though is not an immediate blocker for me)</span></div><div class="line" id="172147"><span class="nick" style="color:#8dd3c7"><a href="#172147" label="[17:21:47]">&lt;stikonas&gt;</a></span><span class="message">but once I reach fixing cc_amd64.efi it will be...</span></div><div class="line" id="184300"><span class="nick" style="color:#2e2a4a"><a href="#184300" label="[18:43:00]">&lt;oriansj&gt;</a></span><span class="message">stikonas: use  a 4byte or 8byte pointer</span></div><div class="line" id="184337"><span class="nick" style="color:#8dd3c7"><a href="#184337" label="[18:43:37]">&lt;stikonas&gt;</a></span><span class="message">hmm, so I should merge those 2 contants into one?</span></div><div class="line" id="184340"><span class="nick" style="color:#8dd3c7"><a href="#184340" label="[18:43:40]">&lt;stikonas&gt;</a></span><span class="message">let me show your the code</span></div><div class="line" id="184408"><span class="nick" style="color:#8dd3c7"><a href="#184408" label="[18:44:08]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/amd64/Development/hex0.M1#L394">https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/amd64/Development/hex0.M1#L394</a> </span></div><div class="line" id="184436"><span class="nick" style="color:#8dd3c7"><a href="#184436" label="[18:44:36]">&lt;stikonas&gt;</a></span><span class="message">so @0x9562     @0x11d2 -&gt; %0x11d29562 ?</span></div><div class="line" id="184504"><span class="nick" style="color:#8dd3c7"><a href="#184504" label="[18:45:04]">&lt;stikonas&gt;</a></span><span class="message">oriansj: by the way, I've now fixed hex0 for UEFI, we'll have to update bootstrap seed</span></div><div class="line" id="184505"><span class="nick" style="color:#2e2a4a"><a href="#184505" label="[18:45:05]">&lt;oriansj&gt;</a></span><span class="message">oh you want an unsigned</span></div><div class="line" id="184514"><span class="nick" style="color:#8dd3c7"><a href="#184514" label="[18:45:14]">&lt;stikonas&gt;</a></span><span class="message">oriansj: yeah, it's just a struct with data</span></div><div class="line" id="184517"><span class="nick" style="color:#2e2a4a"><a href="#184517" label="[18:45:17]">&lt;oriansj&gt;</a></span><span class="message">do $0x9562</span></div><div class="line" id="184532"><span class="nick" style="color:#2e2a4a"><a href="#184532" label="[18:45:32]">&lt;oriansj&gt;</a></span><span class="message">@ is signed $ is unsigned 16bit</span></div><div class="line" id="184536"><span class="nick" style="color:#8dd3c7"><a href="#184536" label="[18:45:36]">&lt;stikonas&gt;</a></span><span class="message">oh right</span></div><div class="line" id="184601"><span class="nick" style="color:#2e2a4a"><a href="#184601" label="[18:46:01]">&lt;oriansj&gt;</a></span><span class="message">just like % is signed 32bit and &amp; is unsigned 32bit</span></div><div class="line" id="184624"><span class="nick" style="color:#8dd3c7"><a href="#184624" label="[18:46:24]">&lt;stikonas&gt;</a></span><span class="message">oh indeed...</span></div><div class="line" id="184631"><span class="nick" style="color:#8dd3c7"><a href="#184631" label="[18:46:31]">&lt;stikonas&gt;</a></span><span class="message">I forgot that we have more of those labels</span></div><div class="line" id="184713"><span class="nick" style="color:#2e2a4a"><a href="#184713" label="[18:47:13]">&lt;oriansj&gt;</a></span><span class="message">only ! is used for both because # was already assigned for comments</span></div><div class="line" id="184737"><span class="nick" style="color:#2e2a4a"><a href="#184737" label="[18:47:37]">&lt;oriansj&gt;</a></span><span class="message">and I was doing a shift by 2 on the keyboard pattern</span></div><div class="line" id="184801"><span class="nick" style="color:#8dd3c7"><a href="#184801" label="[18:48:01]">&lt;stikonas&gt;</a></span><span class="message">oh, I didn't realize that</span></div><div class="line" id="184811"><span class="nick" style="color:#8dd3c7"><a href="#184811" label="[18:48:11]">&lt;stikonas&gt;</a></span><span class="message">yes, that helps remembering it</span></div><div class="line" id="184824"><span class="nick" style="color:#2e2a4a"><a href="#184824" label="[18:48:24]">&lt;oriansj&gt;</a></span><span class="message">1-&gt; ! ; 2-&gt;@ $; 4 -&gt; % &amp;</span></div><div class="line" id="184855"><span class="nick" style="color:#8dd3c7"><a href="#184855" label="[18:48:55]">&lt;stikonas&gt;</a></span><span class="message">anyway, I fixed it for hex0.M1. Other files will need fixing too but I'll just do it at the same time as I fix stack alignment and saving non-volatile registers</span></div><div class="line" id="184929"><span class="nick" style="color:#8dd3c7"><a href="#184929" label="[18:49:29]">&lt;stikonas&gt;</a></span><span class="message">(this is the new hex0 <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/amd64/hex0.hex0">https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/amd64/hex0.hex0</a>) </span></div><div class="line" id="185009"><span class="nick" style="color:#8dd3c7"><a href="#185009" label="[18:50:09]">&lt;stikonas&gt;</a></span><span class="message">oriansj: so I think we can do all alighnment in M2libc later using the same  technique...</span></div><div class="line" id="185119"><span class="nick" style="color:#8dd3c7"><a href="#185119" label="[18:51:19]">&lt;stikonas&gt;</a></span><span class="message">basically push rsp; push [rsp]; and rsp, -16; {possibly another push} ... call; mov rsp, [rsp+XX]</span></div><div class="line" id="185220"><span class="nick" style="color:#8dd3c7"><a href="#185220" label="[18:52:20]">&lt;stikonas&gt;</a></span><span class="message">and will align stack to 16 bytes and then last mov will restore stack pointer from one of the first 2 pushes (depending on whether and rsp, -16 moved rsp or not)</span></div><div class="line" id="192903"><span class="nick" style="color:#2e2a4a"><a href="#192903" label="[19:29:03]">&lt;oriansj&gt;</a></span><span class="message">or skip the pushes entirely; make a stack frame using add rsp, $framesize and remove the stack frame using sub rsp $framesize</span></div><div class="line" id="192959"><span class="nick" style="color:#2e2a4a"><a href="#192959" label="[19:29:59]">&lt;oriansj&gt;</a></span><span class="message">wasteful and inefficient but ensures the stack frame is always aligned.</span></div><div class="line" id="193805"><span class="nick" style="color:#8dd3c7"><a href="#193805" label="[19:38:05]">&lt;stikonas&gt;</a></span><span class="message">well, yeah, that's another option...</span></div><div class="line" id="200248"><span class="nick" style="color:#2e2a4a"><a href="#200248" label="[20:02:48]">&lt;oriansj&gt;</a></span><span class="message">sometimes I wonder if the poorly written bios are the side effect of bad programmers or an intensional design to make it trivial to write a replacement because it is so buggy</span></div><div class="line" id="200348"><span class="nick" style="color:#8dd3c7"><a href="#200348" label="[20:03:48]">&lt;stikonas&gt;</a></span><span class="message">oriansj: well, in this particular case it's actually foss edk2 version...</span></div><div class="line" id="200710"><span class="nick" style="color:#2e2a4a"><a href="#200710" label="[20:07:10]">&lt;oriansj&gt;</a></span><span class="message">foss software doesn't ensure well made software by people who know what they are doing, just that others can build upon that work</span></div><div class="line" id="201040"><span class="nick" style="color:#2e2a4a"><a href="#201040" label="[20:10:40]">&lt;oriansj&gt;</a></span><span class="message">and that is ok. Smart capable people are rare and take a great deal of community effort to develop</span></div><div class="line" id="201159"><span class="nick" style="color:#8dd3c7"><a href="#201159" label="[20:11:59]">&lt;stikonas&gt;</a></span><span class="message">yeah, though I wonder how much is edk2 developed by community people...</span></div><div class="line" id="201211"><span class="nick" style="color:#8dd3c7"><a href="#201211" label="[20:12:11]">&lt;stikonas&gt;</a></span><span class="message">it might be mostly corporation driven...</span></div><div class="line" id="201222"><span class="nick" style="color:#2e2a4a"><a href="#201222" label="[20:12:22]">&lt;oriansj&gt;</a></span><span class="message">have you ever seen the talk open source success?</span></div><div class="line" id="201303"><span class="nick" style="color:#8dd3c7"><a href="#201303" label="[20:13:03]">&lt;stikonas&gt;</a></span><span class="message">no, I don't think so</span></div><div class="line" id="201624"><span class="nick" style="color:#2e2a4a"><a href="#201624" label="[20:16:24]">&lt;oriansj&gt;</a></span><span class="message">I might have gotten the name wrong: <a rel="nofollow" href="https://media.libreplanet.org/u/libby/m/mako/">https://media.libreplanet.org/u/libby/m/mako/</a> </span></div><div class="line" id="201640"><span class="nick" style="color:#8dd3c7"><a href="#201640" label="[20:16:40]">&lt;stikonas&gt;</a></span><span class="message">hmm, while working on kaem, I think  I should be able to make some optizations to hex0  alignment and get a few bytes back...</span></div><div class="line" id="201738"><span class="nick" style="color:#2e2a4a"><a href="#201738" label="[20:17:38]">&lt;oriansj&gt;</a></span><span class="message">nice</span></div><div class="line" id="202013"><span class="nick" style="color:#8dd3c7"><a href="#202013" label="[20:20:13]">&lt;stikonas&gt;</a></span><span class="message">the not nice thing is that I might need to reencode hex0 code...</span></div><div class="line" id="202022"><span class="nick" style="color:#8dd3c7"><a href="#202022" label="[20:20:22]">&lt;stikonas&gt;</a></span><span class="message">but usually those very minor tweaks are not too bad</span></div><div class="line" id="202137"><span class="nick" style="color:#2e2a4a"><a href="#202137" label="[20:21:37]">&lt;oriansj&gt;</a></span><span class="message">well hex0 is the worst bootstrapping language</span></div><div class="line" id="202255"><span class="nick" style="color:#2e2a4a"><a href="#202255" label="[20:22:55]">&lt;oriansj&gt;</a></span><span class="message">but it works in the make art one grain of sand at a time sort of thinng</span></div><div class="line" id="202411"><span class="nick" style="color:#8dd3c7"><a href="#202411" label="[20:24:11]">&lt;stikonas&gt;</a></span><span class="message">and hex0 for amd64 is still much easier to edit than riscv64...</span></div><div class="line" id="202431"><span class="nick" style="color:#8dd3c7"><a href="#202431" label="[20:24:31]">&lt;stikonas&gt;</a></span><span class="message">those are really really slow</span></div><div class="line" id="202439"><span class="nick" style="color:#8dd3c7"><a href="#202439" label="[20:24:39]">&lt;stikonas&gt;</a></span><span class="message">though probably a bit more lower level</span></div><div class="line" id="202506"><span class="nick" style="color:#8dd3c7"><a href="#202506" label="[20:25:06]">&lt;stikonas&gt;</a></span><span class="message">you could easily write M0 defines there by just looking at a few pages of riscv specs</span></div><div class="line" id="202525"><span class="nick" style="color:#2e2a4a"><a href="#202525" label="[20:25:25]">&lt;oriansj&gt;</a></span><span class="message">yeah, risc-v might be very efficient of a hardware design but its low level layout leaves much to be desired.</span></div><div class="line" id="202739"><span class="nick" style="color:#2e2a4a"><a href="#202739" label="[20:27:39]">&lt;oriansj&gt;</a></span><span class="message">and in retrospect x86 should have been done in octal then it would have had beautiful M0 defines</span></div><div class="line" id="202822"><span class="nick" style="color:#2e2a4a"><a href="#202822" label="[20:28:22]">&lt;oriansj&gt;</a></span><span class="message">and thanks to muurkha we know the octal hex0 would be much smaller</span></div><div class="line" id="202835"><span class="nick" style="color:#8dd3c7"><a href="#202835" label="[20:28:35]">&lt;stikonas&gt;</a></span><span class="message">hmm, I think I can save 3 bytes so instead of increase of 57, it would be 54</span></div><div class="line" id="202851"><span class="nick" style="color:#8dd3c7"><a href="#202851" label="[20:28:51]">&lt;stikonas&gt;</a></span><span class="message">still good I guess</span></div><div class="line" id="203023"><span class="nick" style="color:#2e2a4a"><a href="#203023" label="[20:30:23]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1300647/">https://paste.debian.net/1300647/</a> </span></div><div class="line" id="203335"><span class="nick" style="color:#2e2a4a"><a href="#203335" label="[20:33:35]">&lt;oriansj&gt;</a></span><span class="message">just need to add some logic for line comments and it'll be a significant size reduction for x86's bootstrap starting binary.</span></div><div class="line" id="203457"><span class="nick" style="color:#2e2a4a"><a href="#203457" label="[20:34:57]">&lt;oriansj&gt;</a></span><span class="message">then x86's bootstrap path could be octal0, octal1, octal2, M0, cc_x86 and the result would be a good bit cleaner.</span></div><div class="line" id="203555"><span class="nick" style="color:#8dd3c7"><a href="#203555" label="[20:35:55]">&lt;stikonas&gt;</a></span><span class="message">hmm, interesting</span></div><div class="line" id="203613"><span class="nick" style="color:#8dd3c7"><a href="#203613" label="[20:36:13]">&lt;stikonas&gt;</a></span><span class="message">well, in principle just one set of comments would be sufficient...</span></div><div class="line" id="203705"><span class="nick" style="color:#8dd3c7"><a href="#203705" label="[20:37:05]">&lt;stikonas&gt;</a></span><span class="message">you could always distinguish them by doing something like 6A 01  ;  push !1     ;; push to stack</span></div><div class="line" id="203713"><span class="nick" style="color:#8dd3c7"><a href="#203713" label="[20:37:13]">&lt;stikonas&gt;</a></span><span class="message">(or some other character other than ;)</span></div><div class="line" id="203815"><span class="nick" style="color:#2e2a4a"><a href="#203815" label="[20:38:15]">&lt;oriansj&gt;</a></span><span class="message">true for the initial seed, one doesn't need to support all of the extra features or sanity checking</span></div><div class="line" id="204005"><span class="nick" style="color:#8dd3c7"><a href="#204005" label="[20:40:05]">&lt;stikonas&gt;</a></span><span class="message">oriansj: you can slash some bytes with pushes instead of assinments</span></div><div class="line" id="204033"><span class="nick" style="color:#8dd3c7"><a href="#204033" label="[20:40:33]">&lt;stikonas&gt;</a></span><span class="message">mov esi, -4   is longer than push !-4; pop esi</span></div><div class="line" id="234130"><span class="nick" style="color:#2e2a4a"><a href="#234130" label="[23:41:30]">&lt;oriansj&gt;</a></span><span class="message">well I finally found a usecase for usleep in M2libc</span></div><div class="line" id="234226"><span class="nick" style="color:#6d2462"><a href="#234226" label="[23:42:26]">&lt;muurkha&gt;</a></span><span class="message">oh?</span></div><div class="line" id="234459"><span class="nick" style="color:#2e2a4a"><a href="#234459" label="[23:44:59]">&lt;oriansj&gt;</a></span><span class="message">be able to play star wars in ascii</span></div><div class="line" id="234606"><span class="nick" style="color:#2e2a4a"><a href="#234606" label="[23:46:06]">&lt;oriansj&gt;</a></span><span class="message">using a C program buildable by M2-Planet</span></div><div class="line" id="234621"><span class="nick" style="color:#2e2a4a"><a href="#234621" label="[23:46:21]">&lt;oriansj&gt;</a></span><span class="message">currently it runs way too fast</span></div><div class="line" id="234812"><span class="nick" style="color:#6d2462"><a href="#234812" label="[23:48:12]">&lt;muurkha&gt;</a></span><span class="message">aha, that makes sense</span></div><div class="line" id="234835"><span class="nick" style="color:#2e2a4a"><a href="#234835" label="[23:48:35]">&lt;oriansj&gt;</a></span><span class="message">certainly would be more entertaining way to pass the time while the bootstrap progresses on fiwix than donut.c (which M2-Planet can also build)</span></div><div class="line" id="234844"><span class="nick" style="color:#6d2462"><a href="#234844" label="[23:48:44]">&lt;muurkha&gt;</a></span><span class="message">I did something similar to that the day before yesterday for an algorithm visualization: <a rel="nofollow" href="https://asciinema.org/a/625754">https://asciinema.org/a/625754</a> </span></div><div class="line" id="234930"><span class="nick" style="color:#6d2462"><a href="#234930" label="[23:49:30]">&lt;muurkha&gt;</a></span><span class="message">I had explained the algorithm to a friend of mine and shown him the code, but he couldn't understand what I was talking about</span></div><div class="line" id="235025"><span class="nick" style="color:#6d2462"><a href="#235025" label="[23:50:25]">&lt;muurkha&gt;</a></span><span class="message">so I figured the visualization would help</span></div><div class="line" id="235113"><span class="nick" style="color:#2e2a4a"><a href="#235113" label="[23:51:13]">&lt;oriansj&gt;</a></span><span class="message">sometimes it does, but depends upon the person.</span></div><div class="line" id="235153"><span class="nick" style="color:#2e2a4a"><a href="#235153" label="[23:51:53]">&lt;oriansj&gt;</a></span><span class="message">and the people who don't care to learn, tend to be quite impossible to explain the why and how to.</span></div><div class="line" id="235222"><span class="nick" style="color:#6d2462"><a href="#235222" label="[23:52:22]">&lt;muurkha&gt;</a></span><span class="message">you could maybe make donut.c interactive in some way.  have you seen the recent stuff about &quot;Gaussian splatting&quot;?</span></div><div class="line" id="235406"><span class="nick" style="color:#2e2a4a"><a href="#235406" label="[23:54:06]">&lt;oriansj&gt;</a></span><span class="message">well then I would also have to add mouse support or something</span></div><div class="line" id="235512"><span class="nick" style="color:#2e2a4a"><a href="#235512" label="[23:55:12]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1300664/">https://paste.debian.net/1300664/</a> </span></div><div class="line" id="235622"><span class="nick" style="color:#6d2462"><a href="#235622" label="[23:56:22]">&lt;muurkha&gt;</a></span><span class="message">is this a deobfuscated version of donut.c?</span></div><div class="line" id="235636"><span class="nick" style="color:#2e2a4a"><a href="#235636" label="[23:56:36]">&lt;oriansj&gt;</a></span><span class="message">to a degree</span></div><div class="line" id="235708"><span class="nick" style="color:#2e2a4a"><a href="#235708" label="[23:57:08]">&lt;oriansj&gt;</a></span><span class="message">and changes to make it buildable via M2-Planet</span></div><div class="line" id="235823"><span class="nick" style="color:#6d2462"><a href="#235823" label="[23:58:23]">&lt;muurkha&gt;</a></span><span class="message">mice can be nice for navigating 3-D worlds and building models</span></div><div class="line" id="235847"><span class="nick" style="color:#6d2462"><a href="#235847" label="[23:58:47]">&lt;muurkha&gt;</a></span><span class="message">but they aren't essential</span></div><br /></div></body></html>