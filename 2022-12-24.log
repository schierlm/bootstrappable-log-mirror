<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-12-24.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000012"><span class="nick" style="color:#389600"><a href="#000012" label="[00:00:12]">&lt;pabs3&gt;</a></span><span class="message">re hardware stuff, I found this recent post interesting: <a rel="nofollow" href="https://www.bunniestudios.com/blog/?p=6606">https://www.bunniestudios.com/blog/?p=6606</a> </span></div><div class="line" id="000041"><span class="nick" style="color:#389600"><a href="#000041" label="[00:00:41]">&lt;pabs3&gt;</a></span><span class="message">bunnie would be *the* person to link up with around hardware stuff</span></div><div class="line" id="000544"><span class="nick" style="color:#8dd3c7"><a href="#000544" label="[00:05:44]">&lt;oriansj&gt;</a></span><span class="message">well bunnie is more about shifting the industry in the correct direction and using products that everyone has access to. Which is a step in the right direction.</span></div><div class="line" id="001201"><span class="nick" style="color:#2e2a4a"><a href="#001201" label="[00:12:01]">&lt;stikonas&gt;</a></span><span class="message">hmm, so mes-m2 contains some structs on the stack <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/mes.git/tree/lib/m2/time.c#n29">https://git.savannah.gnu.org/cgit/mes.git/tree/lib/m2/time.c#n29</a> </span></div><div class="line" id="001208"><span class="nick" style="color:#2e2a4a"><a href="#001208" label="[00:12:08]">&lt;stikonas&gt;</a></span><span class="message">which previously were not supported</span></div><div class="line" id="001223"><span class="nick" style="color:#2e2a4a"><a href="#001223" label="[00:12:23]">&lt;stikonas&gt;</a></span><span class="message">and probably compiled by accident...</span></div><div class="line" id="001250"><span class="nick" style="color:#2e2a4a"><a href="#001250" label="[00:12:50]">&lt;stikonas&gt;</a></span><span class="message">but now we have support for structs on stack and M2-Planet notices that we are passing 64-bit value on x86 as function argument</span></div><div class="line" id="001504"><span class="nick" style="color:#2e2a4a"><a href="#001504" label="[00:15:04]">&lt;stikonas&gt;</a></span><span class="message">ok, I think that's a bug in mes, we need to define pointers there</span></div><div class="line" id="001516"><span class="nick" style="color:#2e2a4a"><a href="#001516" label="[00:15:16]">&lt;stikonas&gt;</a></span><span class="message">I'll create a patch, but update will be blocked on new mes...</span></div><div class="line" id="002309"><span class="nick" style="color:#6b8072"><a href="#002309" label="[00:23:09]">&lt;Hagfish_&gt;</a></span><span class="message">wow stikonas, you're finding all these intricate details (well... bugs), but that's actually reassuring that the code is staying understood (and understandable) as it grows, rather than taking on too much technical debt</span></div><div class="line" id="002352"><span class="nick" style="color:#2e2a4a"><a href="#002352" label="[00:23:52]">&lt;stikonas&gt;</a></span><span class="message">Hagfish_: it's not me that found those but M2-Planet...</span></div><div class="line" id="002407"><span class="nick" style="color:#2e2a4a"><a href="#002407" label="[00:24:07]">&lt;stikonas&gt;</a></span><span class="message">well, I added that additional check to it...</span></div><div class="line" id="002414"><span class="nick" style="color:#6b8072"><a href="#002414" label="[00:24:14]">&lt;Hagfish_&gt;</a></span><span class="message">right, see :)</span></div><div class="line" id="002624"><span class="nick" style="color:#8dd3c7"><a href="#002624" label="[00:26:24]">&lt;oriansj&gt;</a></span><span class="message">best to put sanity checking in code and let the software do the hard work for us</span></div><div class="line" id="002657"><span class="nick" style="color:#6b8072"><a href="#002657" label="[00:26:57]">&lt;Hagfish_&gt;</a></span><span class="message">yeah, that has a nice multiplicative effect.  the more software, the more checks :)</span></div><div class="line" id="002710"><span class="nick" style="color:#8dd3c7"><a href="#002710" label="[00:27:10]">&lt;oriansj&gt;</a></span><span class="message">hence the obsessive amount of require statements in everything I do</span></div><div class="line" id="002723"><span class="nick" style="color:#6b8072"><a href="#002723" label="[00:27:23]">&lt;Hagfish_&gt;</a></span><span class="message">oh?</span></div><div class="line" id="002731"><span class="nick" style="color:#2e2a4a"><a href="#002731" label="[00:27:31]">&lt;stikonas&gt;</a></span><span class="message">janneke: I've sent the patch to bug-mes but it might have to go through moderation, it's also here: <a rel="nofollow" href="https://paste.debian.net/1265111/">https://paste.debian.net/1265111/</a> </span></div><div class="line" id="002808"><span class="nick" style="color:#2e2a4a"><a href="#002808" label="[00:28:08]">&lt;stikonas&gt;</a></span><span class="message">I was scared that I messed something up in M2-Planet...</span></div><div class="line" id="002859"><span class="nick" style="color:#8dd3c7"><a href="#002859" label="[00:28:59]">&lt;oriansj&gt;</a></span><span class="message">stikonas: messing things up is a great way to learn and make things better ^_^</span></div><div class="line" id="002956"><span class="nick" style="color:#8dd3c7"><a href="#002956" label="[00:29:56]">&lt;oriansj&gt;</a></span><span class="message">also if worried about breaking functionality, add tests that cover the functionality you need to keep working</span></div><div class="line" id="003047"><span class="nick" style="color:#6b8072"><a href="#003047" label="[00:30:47]">&lt;Hagfish_&gt;</a></span><span class="message">that reminds me</span></div><div class="line" id="003059"><span class="nick" style="color:#6b8072"><a href="#003059" label="[00:30:59]">&lt;Hagfish_&gt;</a></span><span class="message">pder: i love the unbz2.c, but it does make me wonder if there should be a unit test for it (and maybe a check of code coverage).  forgive me if that's a cheeky question, because i don't want to look a gift horse in the mouth, and i'm really impressed by your contribution!</span></div><div class="line" id="003131"><span class="nick" style="color:#8dd3c7"><a href="#003131" label="[00:31:31]">&lt;oriansj&gt;</a></span><span class="message">well, I am going to start fuzzing it and will probably be reporting segfaults for pder to fix</span></div><div class="line" id="003140"><span class="nick" style="color:#6b8072"><a href="#003140" label="[00:31:40]">&lt;Hagfish_&gt;</a></span><span class="message">that'll be amazing.  thanks oriansj!</span></div><div class="line" id="003447"><span class="nick" style="color:#8dd3c7"><a href="#003447" label="[00:34:47]">&lt;oriansj&gt;</a></span><span class="message">(everything after (and including)  M2-Planet gets fuzzed to reduce the number of user facing bugs)</span></div><div class="line" id="003605"><span class="nick" style="color:#6b8072"><a href="#003605" label="[00:36:05]">&lt;Hagfish_&gt;</a></span><span class="message">does fuzzing also give you a coverage report?</span></div><div class="line" id="003714"><span class="nick" style="color:#6b8072"><a href="#003714" label="[00:37:14]">&lt;Hagfish_&gt;</a></span><span class="message">i think there's just something in the back of my mind which bugs me about unreachable code, even though that's the least likely code to be a problem :D</span></div><div class="line" id="003802"><span class="nick" style="color:#6b8072"><a href="#003802" label="[00:38:02]">&lt;Hagfish_&gt;</a></span><span class="message">maybe i'm more worried about code that only gets exercised under weird edge cases.  that's probably more likely to cause real problems</span></div><div class="line" id="003929"><span class="nick" style="color:#2e2a4a"><a href="#003929" label="[00:39:29]">&lt;stikonas&gt;</a></span><span class="message">Hagfish_: no, I think fuzzing can't do that</span></div><div class="line" id="003934"><span class="nick" style="color:#2e2a4a"><a href="#003934" label="[00:39:34]">&lt;stikonas&gt;</a></span><span class="message">it just generates random input</span></div><div class="line" id="003957"><span class="nick" style="color:#8dd3c7"><a href="#003957" label="[00:39:57]">&lt;oriansj&gt;</a></span><span class="message">Hagfish_: or uses the source code to speed up hitting code paths</span></div><div class="line" id="004006"><span class="nick" style="color:#6b8072"><a href="#004006" label="[00:40:06]">&lt;Hagfish_&gt;</a></span><span class="message">hmm, yeah, that makes sense</span></div><div class="line" id="004007"><span class="nick" style="color:#2e2a4a"><a href="#004007" label="[00:40:07]">&lt;stikonas&gt;</a></span><span class="message">and if you get segfault, it will be in accessible sections</span></div><div class="line" id="004025"><span class="nick" style="color:#6b8072"><a href="#004025" label="[00:40:25]">&lt;Hagfish_&gt;</a></span><span class="message">i guess that adding coverage checking to a fuzzer is as easy/hard as adding it to a test suite</span></div><div class="line" id="004031"><span class="nick" style="color:#6b8072"><a href="#004031" label="[00:40:31]">&lt;Hagfish_&gt;</a></span><span class="message">kind of orthogonal, maybe</span></div><div class="line" id="004046"><span class="nick" style="color:#8dd3c7"><a href="#004046" label="[00:40:46]">&lt;oriansj&gt;</a></span><span class="message">I'm use AFL to fuzz right now</span></div><div class="line" id="004123"><span class="nick" style="color:#8dd3c7"><a href="#004123" label="[00:41:23]">&lt;oriansj&gt;</a></span><span class="message">and segfaults found within 3 seconds</span></div><div class="line" id="004128"><span class="nick" style="color:#6b8072"><a href="#004128" label="[00:41:28]">&lt;Hagfish_&gt;</a></span><span class="message">wow</span></div><div class="line" id="004520"><span class="nick" style="color:#8dd3c7"><a href="#004520" label="[00:45:20]">&lt;oriansj&gt;</a></span><span class="message">here are the segfaults base64 encoded and .tar.xz'd <a rel="nofollow" href="https://paste.debian.net/1265112/">https://paste.debian.net/1265112/</a> </span></div><div class="line" id="004914"><span class="nick" style="color:#8dd3c7"><a href="#004914" label="[00:49:14]">&lt;oriansj&gt;</a></span><span class="message">shouldn't take too long for pder to find the root and fix</span></div><div class="line" id="011210"><span class="nick" style="color:#80b1d3"><a href="#011210" label="[01:12:10]">&lt;fossy&gt;</a></span><span class="message">rickmasters: that's great (re: fiwix changes)!</span></div><div class="line" id="025034"><span class="nick" style="color:#6d2462"><a href="#025034" label="[02:50:34]">&lt;rickmasters&gt;</a></span><span class="message">fossy: It's going to take more than a day to get the commits in but I'm working on it.</span></div><div class="line" id="025249"><span class="nick" style="color:#80b1d3"><a href="#025249" label="[02:52:49]">&lt;fossy&gt;</a></span><span class="message">rickmasters: no rush, i would just love to see it at some point :)</span></div><div class="line" id="025302"><span class="nick" style="color:#8dd3c7"><a href="#025302" label="[02:53:02]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: thank you for doing just such a great job ^_^ and we love seeing your progress</span></div><div class="line" id="025816"><span class="nick" style="color:#2e2a4a"><a href="#025816" label="[02:58:16]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: yes, no rush, it will take some time to integrate unbz2... We need janneke to merge my fix. And then we need to wait till the next mes is released... Well, maybe we can patch it manually with &quot;replace&quot; program</span></div><div class="line" id="030359"><span class="nick" style="color:#6b8072"><a href="#030359" label="[03:03:59]">&lt;Hagfish_&gt;</a></span><span class="message">i don't think anyone put those commits on their Christmas list to Santa, and anyway, i trust rickmasters to produce them more than i'd trust Santa's elves, so i'm sure the commits are worth waiting for :)</span></div><div class="line" id="030529"><span class="nick" style="color:#2e2a4a"><a href="#030529" label="[03:05:29]">&lt;stikonas&gt;</a></span><span class="message">argh, another issue will be that M2-Planet now outputs new style defines...</span></div><div class="line" id="030543"><span class="nick" style="color:#2e2a4a"><a href="#030543" label="[03:05:43]">&lt;stikonas&gt;</a></span><span class="message">and mes needs to be updated for that too</span></div><div class="line" id="030629"><span class="nick" style="color:#6b8072"><a href="#030629" label="[03:06:29]">&lt;Hagfish_&gt;</a></span><span class="message">i hope the problem isn't looking fractal, where each change triggers at least one more change somewhere else</span></div><div class="line" id="030747"><span class="nick" style="color:#6d2462"><a href="#030747" label="[03:07:47]">&lt;rickmasters&gt;</a></span><span class="message">I've been in discussions with the Jordi, the author of Fiwix to push directly upstream.</span></div><div class="line" id="030749"><span class="nick" style="color:#2e2a4a"><a href="#030749" label="[03:07:49]">&lt;stikonas&gt;</a></span><span class="message">no, this one shouldn't be hard to fix</span></div><div class="line" id="030802"><span class="nick" style="color:#6b8072"><a href="#030802" label="[03:08:02]">&lt;Hagfish_&gt;</a></span><span class="message">that's great</span></div><div class="line" id="030802"><span class="nick" style="color:#2e2a4a"><a href="#030802" label="[03:08:02]">&lt;stikonas&gt;</a></span><span class="message">we just need to add both sets of defines to mes for transition</span></div><div class="line" id="030818"><span class="nick" style="color:#2e2a4a"><a href="#030818" label="[03:08:18]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: oh, that might speed things up</span></div><div class="line" id="030844"><span class="nick" style="color:#6b8072"><a href="#030844" label="[03:08:44]">&lt;Hagfish_&gt;</a></span><span class="message">is there a policy/precedent for how long those transitions last?</span></div><div class="line" id="030909"><span class="nick" style="color:#6b8072"><a href="#030909" label="[03:09:09]">&lt;Hagfish_&gt;</a></span><span class="message">i think i remember an example before of keeping backwards compatibility for one version, or something, but i might be misremembering</span></div><div class="line" id="030914"><span class="nick" style="color:#6d2462"><a href="#030914" label="[03:09:14]">&lt;rickmasters&gt;</a></span><span class="message">Well, the discussions take time. Examples: <a rel="nofollow" href="https://github.com/mikaku/Fiwix/issues/10">https://github.com/mikaku/Fiwix/issues/10</a>  and <a rel="nofollow" href="https://github.com/mikaku/Fiwix/issues/12">https://github.com/mikaku/Fiwix/issues/12</a> </span></div><div class="line" id="030924"><span class="nick" style="color:#80b1d3"><a href="#030924" label="[03:09:24]">&lt;fossy&gt;</a></span><span class="message">eh, mes is in 0.x</span></div><div class="line" id="030930"><span class="nick" style="color:#6b8072"><a href="#030930" label="[03:09:30]">&lt;Hagfish_&gt;</a></span><span class="message">thanks for the links! i love reading those</span></div><div class="line" id="030941"><span class="nick" style="color:#6b8072"><a href="#030941" label="[03:09:41]">&lt;Hagfish_&gt;</a></span><span class="message">good point, fossy</span></div><div class="line" id="030949"><span class="nick" style="color:#80b1d3"><a href="#030949" label="[03:09:49]">&lt;fossy&gt;</a></span><span class="message">precedent/policy can be rewritten as best fits the situation</span></div><div class="line" id="031006"><span class="nick" style="color:#2e2a4a"><a href="#031006" label="[03:10:06]">&lt;stikonas&gt;</a></span><span class="message">fossy: what do you mean mes is in 0.x?</span></div><div class="line" id="031108"><span class="nick" style="color:#2e2a4a"><a href="#031108" label="[03:11:08]">&lt;stikonas&gt;</a></span><span class="message">just it's version?</span></div><div class="line" id="031114"><span class="nick" style="color:#2e2a4a"><a href="#031114" label="[03:11:14]">&lt;stikonas&gt;</a></span><span class="message">s/it's/its/</span></div><div class="line" id="031336"><span class="nick" style="color:#80b1d3"><a href="#031336" label="[03:13:36]">&lt;fossy&gt;</a></span><span class="message">yes, typically 0.xx versions do not need to be backwards compatible at all (breaking changes can be introduced at any time) (with semantic versioning)</span></div><div class="line" id="031705"><span class="nick" style="color:#2e2a4a"><a href="#031705" label="[03:17:05]">&lt;stikonas&gt;</a></span><span class="message">anyway, I think I have managed to patch mes to work with new M2-Planet</span></div><div class="line" id="031718"><span class="nick" style="color:#2e2a4a"><a href="#031718" label="[03:17:18]">&lt;stikonas&gt;</a></span><span class="message">so new release is not that urgent</span></div><div class="line" id="031759"><span class="nick" style="color:#6b8072"><a href="#031759" label="[03:17:59]">&lt;Hagfish_&gt;</a></span><span class="message">nice</span></div><div class="line" id="031800"><span class="nick" style="color:#2e2a4a"><a href="#031800" label="[03:18:00]">&lt;stikonas&gt;</a></span><span class="message">fossy: I'll add this to kaem file <a rel="nofollow" href="https://paste.debian.net/1265116/">https://paste.debian.net/1265116/</a> </span></div><div class="line" id="031809"><span class="nick" style="color:#2e2a4a"><a href="#031809" label="[03:18:09]">&lt;stikonas&gt;</a></span><span class="message">looks alright?</span></div><div class="line" id="031815"><span class="nick" style="color:#8dd3c7"><a href="#031815" label="[03:18:15]">&lt;oriansj&gt;</a></span><span class="message">and having hundreds of different copies of M1 DEFINEs isn't a problem at all</span></div><div class="line" id="031822"><span class="nick" style="color:#2e2a4a"><a href="#031822" label="[03:18:22]">&lt;stikonas&gt;</a></span><span class="message">I'll probably do it tomorrow as I'll go to sleep and no time to check checksums</span></div><div class="line" id="031831"><span class="nick" style="color:#8dd3c7"><a href="#031831" label="[03:18:31]">&lt;oriansj&gt;</a></span><span class="message">(assuming you don't define something more than once)</span></div><div class="line" id="031838"><span class="nick" style="color:#8dd3c7"><a href="#031838" label="[03:18:38]">&lt;oriansj&gt;</a></span><span class="message">stikonas: good plan</span></div><div class="line" id="031848"><span class="nick" style="color:#2e2a4a"><a href="#031848" label="[03:18:48]">&lt;stikonas&gt;</a></span><span class="message">well, that's a quick fix</span></div><div class="line" id="031900"><span class="nick" style="color:#2e2a4a"><a href="#031900" label="[03:19:00]">&lt;stikonas&gt;</a></span><span class="message">medium term we should add new defines and fix mes</span></div><div class="line" id="031908"><span class="nick" style="color:#2e2a4a"><a href="#031908" label="[03:19:08]">&lt;stikonas&gt;</a></span><span class="message">longer term we can remove old defines from mes</span></div><div class="line" id="031934"><span class="nick" style="color:#6b8072"><a href="#031934" label="[03:19:34]">&lt;Hagfish_&gt;</a></span><span class="message">oriansj: there's an interesting mention of Newlib C in <a rel="nofollow" href="https://github.com/mikaku/Fiwix/issues/12">https://github.com/mikaku/Fiwix/issues/12</a>  is that something you are familiar with?</span></div><div class="line" id="031943"><span class="nick" style="color:#80b1d3"><a href="#031943" label="[03:19:43]">&lt;fossy&gt;</a></span><span class="message">stikonas: yes</span></div><div class="line" id="031945"><span class="nick" style="color:#80b1d3"><a href="#031945" label="[03:19:45]">&lt;fossy&gt;</a></span><span class="message">looks fine</span></div><div class="line" id="031954"><span class="nick" style="color:#80b1d3"><a href="#031954" label="[03:19:54]">&lt;fossy&gt;</a></span><span class="message">Hagfish_: i just saw that too.</span></div><div class="line" id="032241"><span class="nick" style="color:#80b1d3"><a href="#032241" label="[03:22:41]">&lt;fossy&gt;</a></span><span class="message">&quot;Newlib is a C library intended for use on embedded systems&quot; - for live-bootstrap i -seriously- doubt that it would be viable. since ultimately we are building up a full linux system, even using an alternative to glibc such as musl has a wide variety of patches required, i have a feeling the level of patching would be quite large for next to no gain - quite possibly it wouldn't have many</span></div><div class="line" id="032243"><span class="nick" style="color:#80b1d3"><a href="#032243" label="[03:22:43]">&lt;fossy&gt;</a></span><span class="message">functions/headers since it appears to be targeted to embedded systems</span></div><div class="line" id="032259"><span class="nick" style="color:#2e2a4a"><a href="#032259" label="[03:22:59]">&lt;stikonas&gt;</a></span><span class="message">and also musl has very simple build system</span></div><div class="line" id="032309"><span class="nick" style="color:#2e2a4a"><a href="#032309" label="[03:23:09]">&lt;stikonas&gt;</a></span><span class="message">fossy: maybe you can reply there why we are using musl</span></div><div class="line" id="032316"><span class="nick" style="color:#80b1d3"><a href="#032316" label="[03:23:16]">&lt;fossy&gt;</a></span><span class="message">^ that too</span></div><div class="line" id="032335"><span class="nick" style="color:#80b1d3"><a href="#032335" label="[03:23:35]">&lt;fossy&gt;</a></span><span class="message">i was just about to do that, stikonas :P</span></div><div class="line" id="032403"><span class="nick" style="color:#8dd3c7"><a href="#032403" label="[03:24:03]">&lt;oriansj&gt;</a></span><span class="message">Hagfish: I've looked at the Newlib C but ultimately it is fossy and stikonas who get to decide what libc live-bootstrap; and I trust their judgement on this matter is sound.</span></div><div class="line" id="032432"><span class="nick" style="color:#8dd3c7"><a href="#032432" label="[03:24:32]">&lt;oriansj&gt;</a></span><span class="message">^;^ uses;^</span></div><div class="line" id="032508"><span class="nick" style="color:#234e69"><a href="#032508" label="[03:25:08]">&lt;stikonas[m]&gt;</a></span><span class="message">I looked at a few C libraries and musl just seemed easiest</span></div><div class="line" id="032511"><span class="nick" style="color:#6d2462"><a href="#032511" label="[03:25:11]">&lt;rickmasters&gt;</a></span><span class="message">I was hoping Jordi would join this chat for a discussion but I think he it might be 3 in the morning where he is...</span></div><div class="line" id="032555"><span class="nick" style="color:#80b1d3"><a href="#032555" label="[03:25:55]">&lt;fossy&gt;</a></span><span class="message">for better or worse, there are reasons 99% of distros use either musl or glibc</span></div><div class="line" id="032612"><span class="nick" style="color:#6d2462"><a href="#032612" label="[03:26:12]">&lt;rickmasters&gt;</a></span><span class="message">His profile lists Catalonia</span></div><div class="line" id="032613"><span class="nick" style="color:#80b1d3"><a href="#032613" label="[03:26:13]">&lt;fossy&gt;</a></span><span class="message">(everything else just doesn't have the spread of features applications use, and developers don't care about alt-libcs)</span></div><div class="line" id="032736"><span class="nick" style="color:#8dd3c7"><a href="#032736" label="[03:27:36]">&lt;oriansj&gt;</a></span><span class="message">that being said, anyone is free to check to see if any libc they like is a better option and provide patches</span></div><div class="line" id="032836"><span class="nick" style="color:#8dd3c7"><a href="#032836" label="[03:28:36]">&lt;oriansj&gt;</a></span><span class="message">but I'd bet money that fossy and stikonas choose based on what we could build and would work for the tools we need to build.</span></div><div class="line" id="032901"><span class="nick" style="color:#234e69"><a href="#032901" label="[03:29:01]">&lt;stikonas[m]&gt;</a></span><span class="message">rickmasters: that's actually further west than me... Though I'm in a later timezone, it's 2 an here rather than 3</span></div><div class="line" id="033026"><span class="nick" style="color:#234e69"><a href="#033026" label="[03:30:26]">&lt;stikonas[m]&gt;</a></span><span class="message">Yeah, newlibc is autotools based</span></div><div class="line" id="033057"><span class="nick" style="color:#234e69"><a href="#033057" label="[03:30:57]">&lt;stikonas[m]&gt;</a></span><span class="message">So if we ban pregen files, we need to write our own makefile</span></div><div class="line" id="033111"><span class="nick" style="color:#234e69"><a href="#033111" label="[03:31:11]">&lt;stikonas[m]&gt;</a></span><span class="message">Which I would rather not for libc</span></div><div class="line" id="033121"><span class="nick" style="color:#234e69"><a href="#033121" label="[03:31:21]">&lt;stikonas[m]&gt;</a></span><span class="message">Mes is already bad enough...</span></div><div class="line" id="033246"><span class="nick" style="color:#6b8072"><a href="#033246" label="[03:32:46]">&lt;Hagfish_&gt;</a></span><span class="message">yeah, that makes sense</span></div><div class="line" id="033338"><span class="nick" style="color:#234e69"><a href="#033338" label="[03:33:38]">&lt;stikonas[m]&gt;</a></span><span class="message">And newlibc actually uses same autogen template stuff as gcc</span></div><div class="line" id="033417"><span class="nick" style="color:#234e69"><a href="#033417" label="[03:34:17]">&lt;stikonas[m]&gt;</a></span><span class="message">Though that can be worked around</span></div><div class="line" id="035430"><span class="nick" style="color:#8dd3c7"><a href="#035430" label="[03:54:30]">&lt;oriansj&gt;</a></span><span class="message">as all problems can be</span></div><div class="line" id="035450"><span class="nick" style="color:#8dd3c7"><a href="#035450" label="[03:54:50]">&lt;oriansj&gt;</a></span><span class="message">but ultimately it is a question is it worth the effort and who is willing to do that work</span></div><div class="line" id="114730"><span class="nick" style="color:#2e2a4a"><a href="#114730" label="[11:47:30]">&lt;stikonas&gt;</a></span><span class="message">janneke: I've just sent you another mes/m2 patch to add new defines.</span></div><div class="line" id="120646"><span class="nick" style="color:#389600"><a href="#120646" label="[12:06:46]">&lt;pabs3&gt;</a></span><span class="message">meson reimplementation in C: <a rel="nofollow" href="https://sr.ht/~lattis/muon/">https://sr.ht/~lattis/muon/</a>  (mentioned in <a rel="nofollow" href="https://news.ycombinator.com/item?id=34110457">https://news.ycombinator.com/item?id=34110457</a>) </span></div><div class="line" id="120748"><span class="nick" style="color:#2e2a4a"><a href="#120748" label="[12:07:48]">&lt;stikonas&gt;</a></span><span class="message">pder: I've now pushed live-bootstrap change with unbz2 (but still need to make changes to take advantage of it)</span></div><div class="line" id="121130"><span class="nick" style="color:#2e2a4a"><a href="#121130" label="[12:11:30]">&lt;stikonas&gt;</a></span><span class="message">pabs3: that muon is interesting. At the moment we didn't really need to use anything with meson (and fossy is almost done with python, so presumably full meson could be build too), but still good to have an option</span></div><div class="line" id="121304"><span class="nick" style="color:#2e2a4a"><a href="#121304" label="[12:13:04]">&lt;stikonas&gt;</a></span><span class="message">and neither we used cmake...</span></div><div class="line" id="121348"><span class="nick" style="color:#2e2a4a"><a href="#121348" label="[12:13:48]">&lt;stikonas&gt;</a></span><span class="message">(or muon might become very useful if meson decides to require meson to build itself)</span></div><div class="line" id="121530"><span class="nick" style="color:#6c3d55"><a href="#121530" label="[12:15:30]">&lt;sam_&gt;</a></span><span class="message">meson is quite sensitive to those issues fwiw</span></div><div class="line" id="121536"><span class="nick" style="color:#6c3d55"><a href="#121536" label="[12:15:36]">&lt;sam_&gt;</a></span><span class="message">i doubt cmake will ever have another impl</span></div><div class="line" id="121752"><span class="nick" style="color:#2e2a4a"><a href="#121752" label="[12:17:52]">&lt;stikonas&gt;</a></span><span class="message">yes, but hopefully cmake won't remove its bootstrap.sh script either</span></div><div class="line" id="121815"><span class="nick" style="color:#2e2a4a"><a href="#121815" label="[12:18:15]">&lt;stikonas&gt;</a></span><span class="message">but I think they understand that they should keep it too</span></div><div class="line" id="125704"><span class="nick" style="color:#8dd3c7"><a href="#125704" label="[12:57:04]">&lt;oriansj&gt;</a></span><span class="message">well it would be quite embarrassing for a build system to become unbuildable.</span></div><div class="line" id="125803"><span class="nick" style="color:#8dd3c7"><a href="#125803" label="[12:58:03]">&lt;oriansj&gt;</a></span><span class="message">let us hope shame keeps them preserving that build script; otherwise we will once again have to create another build chain in guix to keep it working.</span></div><div class="line" id="134027"><span class="nick" style="color:#d9d9d9"><a href="#134027" label="[13:40:27]">&lt;janneke&gt;</a></span><span class="message">stikonas: does this works with m2-planet 1.9 and 1.10 too?</span></div><div class="line" id="135403"><span class="nick" style="color:#2e2a4a"><a href="#135403" label="[13:54:03]">&lt;stikonas&gt;</a></span><span class="message">janneke: defines definitely should work, they'll be just unused</span></div><div class="line" id="135413"><span class="nick" style="color:#2e2a4a"><a href="#135413" label="[13:54:13]">&lt;stikonas&gt;</a></span><span class="message">and I can't see why the other change wouldn't work</span></div><div class="line" id="135422"><span class="nick" style="color:#2e2a4a"><a href="#135422" label="[13:54:22]">&lt;stikonas&gt;</a></span><span class="message">let me test it though</span></div><div class="line" id="140237"><span class="nick" style="color:#2e2a4a"><a href="#140237" label="[14:02:37]">&lt;stikonas&gt;</a></span><span class="message">janneke: seems to work</span></div><div class="line" id="140519"><span class="nick" style="color:#2e2a4a"><a href="#140519" label="[14:05:19]">&lt;stikonas&gt;</a></span><span class="message">and I don't see any more compatibility issues with newer M2-Planet. These two patches on top of 0.24.1 are sufficient</span></div><div class="line" id="142945"><span class="nick" style="color:#d9d9d9"><a href="#142945" label="[14:29:45]">&lt;janneke&gt;</a></span><span class="message">stikonas: nice, thanks</span></div><div class="line" id="144052"><span class="nick" style="color:#2e2a4a"><a href="#144052" label="[14:40:52]">&lt;stikonas&gt;</a></span><span class="message">janneke: this is basically caused by M2-Planet (from git) now supporting structs on stack and global structs (rather than just struct pointers that you can calloc)</span></div><div class="line" id="144135"><span class="nick" style="color:#2e2a4a"><a href="#144135" label="[14:41:35]">&lt;stikonas&gt;</a></span><span class="message">(oh and also M2-Planet had learned a bit about (u)int*_t types, so it's a bit more careful with type sizes in assignments</span></div><div class="line" id="161944"><span class="nick" style="color:#2e2a4a"><a href="#161944" label="[16:19:44]">&lt;stikonas&gt;</a></span><span class="message">fossy: there is a crash in checksum-transcriber if file does not enf with newline</span></div><div class="line" id="162243"><span class="nick" style="color:#2e2a4a"><a href="#162243" label="[16:22:43]">&lt;stikonas&gt;</a></span><span class="message">s/enf/end/</span></div><div class="line" id="163131"><span class="nick" style="color:#bc80bd"><a href="#163131" label="[16:31:31]">&lt;pder&gt;</a></span><span class="message">stikonas: great, thank you.</span></div><div class="line" id="163238"><span class="nick" style="color:#bc80bd"><a href="#163238" label="[16:32:38]">&lt;pder&gt;</a></span><span class="message">oriansj: I got that fuzzing out.tar.xz but I don't know what do to with it.  Do I need the examples folder as well?</span></div><div class="line" id="163415"><span class="nick" style="color:#bc80bd"><a href="#163415" label="[16:34:15]">&lt;pder&gt;</a></span><span class="message">I also tried ~/mescc-tools-seed/x86/bin/unbz2 -f id\:000000\,sig\:11\,src\:000000\,time\:5027\,op\:flip1\,pos\:36 -o output.txt</span></div><div class="line" id="163421"><span class="nick" style="color:#bc80bd"><a href="#163421" label="[16:34:21]">&lt;pder&gt;</a></span><span class="message">but no segfault</span></div><div class="line" id="163722"><span class="nick" style="color:#2e2a4a"><a href="#163722" label="[16:37:22]">&lt;stikonas&gt;</a></span><span class="message">pder (cc rickmasters): it will take some time to finish as I need to run live-bootstrap many times but I have now moved tcc 0.9.27 immediately after tcc 0.9.26 and fixing up further things (so far just fixed make)</span></div><div class="line" id="164258"><span class="nick" style="color:#2e2a4a"><a href="#164258" label="[16:42:58]">&lt;stikonas&gt;</a></span><span class="message">pder: have you tried using those options from that readme file?</span></div><div class="line" id="165820"><span class="nick" style="color:#bc80bd"><a href="#165820" label="[16:58:20]">&lt;pder&gt;</a></span><span class="message">no, only because I dont have afl-fuzz installed</span></div><div class="line" id="165904"><span class="nick" style="color:#bc80bd"><a href="#165904" label="[16:59:04]">&lt;pder&gt;</a></span><span class="message">And I dont know where the examples directory comes from in that command line</span></div><div class="line" id="174853"><span class="nick" style="color:#8dd3c7"><a href="#174853" label="[17:48:53]">&lt;oriansj&gt;</a></span><span class="message">pder: the examples directory is just a bzip2 compressed copy of the unbz2.c source file</span></div><div class="line" id="174951"><span class="nick" style="color:#8dd3c7"><a href="#174951" label="[17:49:51]">&lt;oriansj&gt;</a></span><span class="message">The segfaults will be noticed if you use a GCC build (as M2libc + M2-Planet don't do any sanity checking at runtime)</span></div><div class="line" id="203704"><span class="nick" style="color:#3c5b35"><a href="#203704" label="[20:37:04]">&lt;duplexsystem_&gt;</a></span><span class="message">what would need to be changed in boot2now to make a disk image that goes through each previous stage when booted instead of using a binary of the previous stage. I'm struggling to fiqure out how such piping would work</span></div><div class="line" id="203911"><span class="nick" style="color:#2e2a4a"><a href="#203911" label="[20:39:11]">&lt;stikonas&gt;</a></span><span class="message">duplexsystem_: there was a discussion here a few days ago</span></div><div class="line" id="203927"><span class="nick" style="color:#2e2a4a"><a href="#203927" label="[20:39:27]">&lt;stikonas&gt;</a></span><span class="message">if you look at IRC logs, you'll see rickmasters describing it</span></div><div class="line" id="204013"><span class="nick" style="color:#2e2a4a"><a href="#204013" label="[20:40:13]">&lt;stikonas&gt;</a></span><span class="message">basically we need to create ext2 image of next rootfs (so we need to build some program that understands ext2) and then we can launch fiwix kernel</span></div><div class="line" id="204045"><span class="nick" style="color:#2e2a4a"><a href="#204045" label="[20:40:45]">&lt;stikonas&gt;</a></span><span class="message">fiwix to linux probably needs something like  kexec</span></div><div class="line" id="204046"><span class="nick" style="color:#6d2462"><a href="#204046" label="[20:40:46]">&lt;rickmasters&gt;</a></span><span class="message">duplexsystem_: honestly, it wouldn't be easy with the state of boot2now right now</span></div><div class="line" id="204119"><span class="nick" style="color:#2e2a4a"><a href="#204119" label="[20:41:19]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: by the way, with this live-bootstrap rework that I'm doing now, I don't see the need for using sed to patch &quot;patch&quot; anymore...</span></div><div class="line" id="204134"><span class="nick" style="color:#2e2a4a"><a href="#204134" label="[20:41:34]">&lt;stikonas&gt;</a></span><span class="message">not sure when it was fixed but patch seems to build and run</span></div><div class="line" id="204150"><span class="nick" style="color:#6d2462"><a href="#204150" label="[20:41:50]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: ok, sounds good</span></div><div class="line" id="204221"><span class="nick" style="color:#2e2a4a"><a href="#204221" label="[20:42:21]">&lt;stikonas&gt;</a></span><span class="message">well, if it stops working on some more complicated patch, I would rather build unpatched patch and then rebuild it. But hopefully it won't be necessary</span></div><div class="line" id="204223"><span class="nick" style="color:#6d2462"><a href="#204223" label="[20:42:23]">&lt;rickmasters&gt;</a></span><span class="message">duplexsystem_: basically you'd need to merge all the scripts that gather the source and you'd need to merge all the compiler steps</span></div><div class="line" id="204247"><span class="nick" style="color:#3c5b35"><a href="#204247" label="[20:42:47]">&lt;duplexsystem_&gt;</a></span><span class="message">I see</span></div><div class="line" id="204248"><span class="nick" style="color:#2e2a4a"><a href="#204248" label="[20:42:48]">&lt;stikonas&gt;</a></span><span class="message">(right now I have already reached actual bzip2 stage, so should be fairly close now</span></div><div class="line" id="204318"><span class="nick" style="color:#6d2462"><a href="#204318" label="[20:43:18]">&lt;rickmasters&gt;</a></span><span class="message">duplexsystem_: I'm planning on creating an all-in-one build so I'm not sure it would be worth your time</span></div><div class="line" id="204325"><span class="nick" style="color:#3c5b35"><a href="#204325" label="[20:43:25]">&lt;duplexsystem_&gt;</a></span><span class="message">well if your merging boot2now into live-bootstrap I can wait</span></div><div class="line" id="204327"><span class="nick" style="color:#3c5b35"><a href="#204327" label="[20:43:27]">&lt;duplexsystem_&gt;</a></span><span class="message">yeah</span></div><div class="line" id="204357"><span class="nick" style="color:#2e2a4a"><a href="#204357" label="[20:43:57]">&lt;stikonas&gt;</a></span><span class="message">yes, ideally  live-bootstrap should have this option of building without seed kernel (or rather boot2now)</span></div><div class="line" id="204407"><span class="nick" style="color:#2e2a4a"><a href="#204407" label="[20:44:07]">&lt;stikonas&gt;</a></span><span class="message">well, at first we can start by adding fiwix as an option</span></div><div class="line" id="204420"><span class="nick" style="color:#6d2462"><a href="#204420" label="[20:44:20]">&lt;rickmasters&gt;</a></span><span class="message">duplexsystem_: merging stages in boot2now and integrating into live-bootstrap are separate work items but yeah, both are planned</span></div><div class="line" id="204558"><span class="nick" style="color:#2e2a4a"><a href="#204558" label="[20:45:58]">&lt;stikonas&gt;</a></span><span class="message">well, those transitions are not easy, took as a while to even sort out linux-&gt;linux transition</span></div><div class="line" id="204558"><span class="nick" style="color:#6d2462"><a href="#204558" label="[20:45:58]">&lt;rickmasters&gt;</a></span><span class="message">duplexsystem_: one thing to note is that I don't have a plan to merge builder-hex0-mini and builder-hex0</span></div><div class="line" id="204616"><span class="nick" style="color:#3c5b35"><a href="#204616" label="[20:46:16]">&lt;duplexsystem_&gt;</a></span><span class="message">my current issue with live-bootstrap is it's use of gcc and friends. nothing against gcc but my resulting system uses clang and I'd like to not include gcc tarballs on disk. I've found a way to get to clang without gcc. I like boot2live because it drops off right where I diverge with live-bootstrap.</span></div><div class="line" id="204628"><span class="nick" style="color:#2e2a4a"><a href="#204628" label="[20:46:28]">&lt;stikonas&gt;</a></span><span class="message">so one would have to use builder-hex0-mini and then reboot with the new &quot;disk&quot;?</span></div><div class="line" id="204659"><span class="nick" style="color:#6d2462"><a href="#204659" label="[20:46:59]">&lt;rickmasters&gt;</a></span><span class="message">duplexsystem: builder-hex0-mini can only produce a boot image, so yes</span></div><div class="line" id="204704"><span class="nick" style="color:#2e2a4a"><a href="#204704" label="[20:47:04]">&lt;stikonas&gt;</a></span><span class="message">boot2live?</span></div><div class="line" id="204709"><span class="nick" style="color:#3c5b35"><a href="#204709" label="[20:47:09]">&lt;duplexsystem_&gt;</a></span><span class="message">sorry</span></div><div class="line" id="204712"><span class="nick" style="color:#3c5b35"><a href="#204712" label="[20:47:12]">&lt;duplexsystem_&gt;</a></span><span class="message">boot2now</span></div><div class="line" id="204738"><span class="nick" style="color:#3c5b35"><a href="#204738" label="[20:47:38]">&lt;duplexsystem_&gt;</a></span><span class="message">too many names :p</span></div><div class="line" id="204738"><span class="nick" style="color:#2e2a4a"><a href="#204738" label="[20:47:38]">&lt;stikonas&gt;</a></span><span class="message">well, yes, right now boot2now stops at tcc</span></div><div class="line" id="204749"><span class="nick" style="color:#2e2a4a"><a href="#204749" label="[20:47:49]">&lt;stikonas&gt;</a></span><span class="message">but how will you build clang? what are the main steps?</span></div><div class="line" id="204817"><span class="nick" style="color:#2e2a4a"><a href="#204817" label="[20:48:17]">&lt;stikonas&gt;</a></span><span class="message">I suspect you'll need some c++ compiler</span></div><div class="line" id="204818"><span class="nick" style="color:#6d2462"><a href="#204818" label="[20:48:18]">&lt;rickmasters&gt;</a></span><span class="message">duplexsystem_: boot2now has a kernel bootstrap - that's the main distinction, not where it stops in my opinion</span></div><div class="line" id="204859"><span class="nick" style="color:#2e2a4a"><a href="#204859" label="[20:48:59]">&lt;stikonas&gt;</a></span><span class="message">often where it stops is determined by the amount of free time that we have...</span></div><div class="line" id="204918"><span class="nick" style="color:#6d2462"><a href="#204918" label="[20:49:18]">&lt;rickmasters&gt;</a></span><span class="message">you can stop live-bootstrap by just editing sysa/run.sh sysa/run.kaem</span></div><div class="line" id="205119"><span class="nick" style="color:#6d2462"><a href="#205119" label="[20:51:19]">&lt;rickmasters&gt;</a></span><span class="message">or diverge into a new path by just changing the steps in sysa/run.kaem or sysa/run.sh</span></div><div class="line" id="205200"><span class="nick" style="color:#3c5b35"><a href="#205200" label="[20:52:00]">&lt;duplexsystem_&gt;</a></span><span class="message">stikonas: from tcc the process is this: tcc -&gt; tendra (ironically also abrevated tcc) -&gt; clang 3.3 -&gt; clang XYZ</span></div><div class="line" id="205239"><span class="nick" style="color:#6d2462"><a href="#205239" label="[20:52:39]">&lt;rickmasters&gt;</a></span><span class="message">boot2now is just running the same code from stage0-posix and live-bootstrap but packaged differently for a different kernel.</span></div><div class="line" id="205254"><span class="nick" style="color:#3c5b35"><a href="#205254" label="[20:52:54]">&lt;duplexsystem_&gt;</a></span><span class="message">obviously need to sprinkle in some other tools here and there but that's the general idea</span></div><div class="line" id="205307"><span class="nick" style="color:#2e2a4a"><a href="#205307" label="[20:53:07]">&lt;stikonas&gt;</a></span><span class="message">never head of tendra, but looking at it, it might work, even has a simple makefile for build system</span></div><div class="line" id="205443"><span class="nick" style="color:#af8d2f"><a href="#205443" label="[20:54:43]">&lt;muurkha&gt;</a></span><span class="message">I haven't heard of TenDRA in a long time</span></div><div class="line" id="205515"><span class="nick" style="color:#2e2a4a"><a href="#205515" label="[20:55:15]">&lt;stikonas&gt;</a></span><span class="message">yeah, you'll need to do some of the same stuff anyway, i.e. bootstrapping bison, build bash, etc...</span></div><div class="line" id="205527"><span class="nick" style="color:#3c5b35"><a href="#205527" label="[20:55:27]">&lt;duplexsystem_&gt;</a></span><span class="message">it's the only oss c++ compier I could find that seems simple enough for tcc to compile</span></div><div class="line" id="205542"><span class="nick" style="color:#3c5b35"><a href="#205542" label="[20:55:42]">&lt;duplexsystem_&gt;</a></span><span class="message">besides gcc</span></div><div class="line" id="205557"><span class="nick" style="color:#6d2462"><a href="#205557" label="[20:55:57]">&lt;rickmasters&gt;</a></span><span class="message">duplexsystem_: just to reiterate, unless you really need the kernel bootstrap live-bootstrap probably makes more sense</span></div><div class="line" id="205607"><span class="nick" style="color:#2e2a4a"><a href="#205607" label="[20:56:07]">&lt;stikonas&gt;</a></span><span class="message">duplexsystem_: well, try to write a build chain with it, it migth very well work</span></div><div class="line" id="205618"><span class="nick" style="color:#2e2a4a"><a href="#205618" label="[20:56:18]">&lt;stikonas&gt;</a></span><span class="message">yeah, just fork live-bootstrap and start building alternative chain...</span></div><div class="line" id="205622"><span class="nick" style="color:#6d2462"><a href="#205622" label="[20:56:22]">&lt;rickmasters&gt;</a></span><span class="message">you'll get a lot further with a real kernel, like make and musl</span></div><div class="line" id="205637"><span class="nick" style="color:#2e2a4a"><a href="#205637" label="[20:56:37]">&lt;stikonas&gt;</a></span><span class="message">yes, tendra might still need musl</span></div><div class="line" id="205731"><span class="nick" style="color:#3c5b35"><a href="#205731" label="[20:57:31]">&lt;duplexsystem_&gt;</a></span><span class="message">rickmasters: cool cool. my end goal is to have kernel boot straping but yeah I'll start from the top down. maybe by the time I finish more kernel bootstraping stuff will be finished</span></div><div class="line" id="205750"><span class="nick" style="color:#2e2a4a"><a href="#205750" label="[20:57:50]">&lt;stikonas&gt;</a></span><span class="message">well, a lot of kernel bootstrapping stuff is somewhat orthogonal</span></div><div class="line" id="205806"><span class="nick" style="color:#2e2a4a"><a href="#205806" label="[20:58:06]">&lt;stikonas&gt;</a></span><span class="message">live-bootstrap does try to use fewer syscalls at the beginning</span></div><div class="line" id="205815"><span class="nick" style="color:#2e2a4a"><a href="#205815" label="[20:58:15]">&lt;stikonas&gt;</a></span><span class="message">(to ease writing bootstrap kernel)</span></div><div class="line" id="205846"><span class="nick" style="color:#3c5b35"><a href="#205846" label="[20:58:46]">&lt;duplexsystem_&gt;</a></span><span class="message">stikonas: <a rel="nofollow" href="https://volokh.com/2010/01/11/orthogonal-ooh/">https://volokh.com/2010/01/11/orthogonal-ooh/</a>  (every time i head orthogonal I have to bring this up)</span></div><div class="line" id="210039"><span class="nick" style="color:#3c5b35"><a href="#210039" label="[21:00:39]">&lt;duplexsystem_&gt;</a></span><span class="message">also once kernel bootstraping is &quot;done&quot; someone needs to voulenteer for BIOS bootstraping. I vote we use punchcards for this :P</span></div><div class="line" id="210101"><span class="nick" style="color:#2e2a4a"><a href="#210101" label="[21:01:01]">&lt;stikonas&gt;</a></span><span class="message">hmm, I'm surprised that some judges didn't know what orthogonal is... At least in non-technical way. I probably wouldn't expect judges to be able to define it using scalar product</span></div><div class="line" id="210142"><span class="nick" style="color:#2e2a4a"><a href="#210142" label="[21:01:42]">&lt;stikonas&gt;</a></span><span class="message">duplexsystem_: well, oriansj's stage0 uses tapes, soe somewhat similar</span></div><div class="line" id="210246"><span class="nick" style="color:#2e2a4a"><a href="#210246" label="[21:02:46]">&lt;stikonas&gt;</a></span><span class="message">and especially on BIOS, we don't use that many of its features, we need input and output and a few other things, but it should be possible to replace those functions with hardware drivers</span></div><div class="line" id="210312"><span class="nick" style="color:#2e2a4a"><a href="#210312" label="[21:03:12]">&lt;stikonas&gt;</a></span><span class="message">though that will be hardware specific, it won't work on all systems of that instruction set</span></div><div class="line" id="210336"><span class="nick" style="color:#2e2a4a"><a href="#210336" label="[21:03:36]">&lt;stikonas&gt;</a></span><span class="message">stage0-uefi relies a bit more on UEFI though (in particular on FAT file system stuff)</span></div><div class="line" id="211844"><span class="nick" style="color:#8dd3c7"><a href="#211844" label="[21:18:44]">&lt;oriansj&gt;</a></span><span class="message">duplexsystem_: well BIOS/Firmware bootstrapping is certainly an area that is still very early and looking for people interested in the work.</span></div><div class="line" id="211859"><span class="nick" style="color:#8dd3c7"><a href="#211859" label="[21:18:59]">&lt;oriansj&gt;</a></span><span class="message">And it'll be the least portable work we will ever do</span></div><div class="line" id="211956"><span class="nick" style="color:#3c5b35"><a href="#211956" label="[21:19:56]">&lt;duplexsystem_&gt;</a></span><span class="message">oh I was mostly joking but that does sound very intresting. I have a decent understanding of x86 firmware but I'm not that confident.</span></div><div class="line" id="212047"><span class="nick" style="color:#3c5b35"><a href="#212047" label="[21:20:47]">&lt;duplexsystem_&gt;</a></span><span class="message">but if there is work being done on that I'd be intresting in helping :)</span></div><div class="line" id="213113"><span class="nick" style="color:#389600"><a href="#213113" label="[21:31:13]">&lt;duplexsystem&gt;</a></span><span class="message">I just lost internet for a bit. Anyone say anything of importance since my last message? I'd check the logs but they seem to be down/not working for me</span></div><div class="line" id="213233"><span class="nick" style="color:#6d2462"><a href="#213233" label="[21:32:33]">&lt;rickmasters&gt;</a></span><span class="message">nothing said. the logs look right: <a rel="nofollow" href="https://logs.guix.gnu.org/bootstrappable/2022-12-24.log">https://logs.guix.gnu.org/bootstrappable/2022-12-24.log</a> </span></div><div class="line" id="214508"><span class="nick" style="color:#389600"><a href="#214508" label="[21:45:08]">&lt;duplexsystem&gt;</a></span><span class="message">Huh I was getting an error saying to couldn't find the resource when I tried</span></div><div class="line" id="215630"><span class="nick" style="color:#8dd3c7"><a href="#215630" label="[21:56:30]">&lt;oriansj&gt;</a></span><span class="message"> duplexsystem: well, we don't need perfection but a reasonable approximation good enough to get the ball moving forward.</span></div><div class="line" id="215703"><span class="nick" style="color:#8dd3c7"><a href="#215703" label="[21:57:03]">&lt;oriansj&gt;</a></span><span class="message">you also get to pick the hardware you want to work on or with</span></div><div class="line" id="222141"><span class="nick" style="color:#389600"><a href="#222141" label="[22:21:41]">&lt;duplexsystem&gt;</a></span><span class="message">How would you even begin to bootstrap BIOS other than manually flashing it. Or is the plan to manually flash it?</span></div><div class="line" id="222253"><span class="nick" style="color:#8dd3c7"><a href="#222253" label="[22:22:53]">&lt;oriansj&gt;</a></span><span class="message">duplexsystem: well depends heavily on the hardware you select.</span></div><div class="line" id="222326"><span class="nick" style="color:#8dd3c7"><a href="#222326" label="[22:23:26]">&lt;oriansj&gt;</a></span><span class="message">punched paper tape reader to EEPROM writer sounds like fun honestly</span></div><div class="line" id="222359"><span class="nick" style="color:#389600"><a href="#222359" label="[22:23:59]">&lt;duplexsystem&gt;</a></span><span class="message">Is there any x86 system that supports flashing &quot;untrusted&quot; firmware that isn't a after market firmware mod like coreboot</span></div><div class="line" id="222419"><span class="nick" style="color:#8dd3c7"><a href="#222419" label="[22:24:19]">&lt;oriansj&gt;</a></span><span class="message">duplexsystem: you don't have to use x86 systems to make firmware for x86 systems</span></div><div class="line" id="222421"><span class="nick" style="color:#389600"><a href="#222421" label="[22:24:21]">&lt;duplexsystem&gt;</a></span><span class="message">oriansj: That does actually sound really fun</span></div><div class="line" id="222453"><span class="nick" style="color:#389600"><a href="#222453" label="[22:24:53]">&lt;duplexsystem&gt;</a></span><span class="message">How so? Would you need to flash the firmware on the device your going to use?</span></div><div class="line" id="222454"><span class="nick" style="color:#8dd3c7"><a href="#222454" label="[22:24:54]">&lt;oriansj&gt;</a></span><span class="message">I was planning on making knight in hardware and use that to create punched paper tapes for other hardware platforms</span></div><div class="line" id="222518"><span class="nick" style="color:#389600"><a href="#222518" label="[22:25:18]">&lt;duplexsystem&gt;</a></span><span class="message">Oh that's interesting</span></div><div class="line" id="222616"><span class="nick" style="color:#8dd3c7"><a href="#222616" label="[22:26:16]">&lt;oriansj&gt;</a></span><span class="message">it on power on reads from tape drive 0 until end of tape, writing contents into memory from address zero up</span></div><div class="line" id="222639"><span class="nick" style="color:#8dd3c7"><a href="#222639" label="[22:26:39]">&lt;oriansj&gt;</a></span><span class="message">^tape^paper tape^</span></div><div class="line" id="222715"><span class="nick" style="color:#8dd3c7"><a href="#222715" label="[22:27:15]">&lt;oriansj&gt;</a></span><span class="message">it is read only and I just need to punch the most minimal hex0 editor by hand</span></div><div class="line" id="222826"><span class="nick" style="color:#8dd3c7"><a href="#222826" label="[22:28:26]">&lt;oriansj&gt;</a></span><span class="message">so the pieces I need figured out include firmware for x86, AArch64, armv7l, riscv-32, riscv-64, etc and a paper tape to EEPROM programmer schematic</span></div><div class="line" id="223016"><span class="nick" style="color:#8dd3c7"><a href="#223016" label="[22:30:16]">&lt;oriansj&gt;</a></span><span class="message">so, assume a text editor and write in standard assembly (we can convert to M1 and hex0 later)</span></div><div class="line" id="223355"><span class="nick" style="color:#8dd3c7"><a href="#223355" label="[22:33:55]">&lt;oriansj&gt;</a></span><span class="message">and I have already written the hex0 needed for knight</span></div><div class="line" id="235542"><span class="nick" style="color:#8dd3c7"><a href="#235542" label="[23:55:42]">&lt;rillian&gt;</a></span><span class="message">oriansj: nice. I wasn't sure if the paper tape references in the repo were metaphorical or not. :)</span></div><div class="line" id="235611"><span class="nick" style="color:#8dd3c7"><a href="#235611" label="[23:56:11]">&lt;rillian&gt;</a></span><span class="message">I've seen paper tape reader projects. Are there are any punch designs available?</span></div><div class="line" id="235826"><span class="nick" style="color:#8dd3c7"><a href="#235826" label="[23:58:26]">&lt;oriansj&gt;</a></span><span class="message">rillian: only Cthulhu was a metaphorical; the read is deadpan serious.</span></div><div class="line" id="235900"><span class="nick" style="color:#2e2a4a"><a href="#235900" label="[23:59:00]">&lt;stikonas&gt;</a></span><span class="message">ok, so I've manged to get rid of the first tcc patch that enables static linking (by addign LDFLAGS=-static). the second tcc patch is actually needed to build musl, so I guess I'll have to rebuild patch tcc 0.9.27 before musl</span></div><br /></div></body></html>