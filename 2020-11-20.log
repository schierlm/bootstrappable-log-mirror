<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-11-20.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="004816"><span class="nick" style="color:#8dd3c7"><a href="#004816" label="[00:48:16]">&lt;OriansJ&gt;</a></span><span class="message">fossy: not yet but we should be reasonably close</span></div><div class="line" id="010249"><span class="nick" style="color:#8dd3c7"><a href="#010249" label="[01:02:49]">&lt;OriansJ&gt;</a></span><span class="message">eeeww: *(sp = spTop) = app(app(app(root, app('0', '?')), '.'), app('T', '1'));</span></div><div class="line" id="011345"><span class="nick" style="color:#8dd3c7"><a href="#011345" label="[01:13:45]">&lt;OriansJ&gt;</a></span><span class="message">now everything up to line 345 is M2-Planet compatible</span></div><div class="line" id="012654"><span class="nick" style="color:#8dd3c7"><a href="#012654" label="[01:26:54]">&lt;OriansJ&gt;</a></span><span class="message">assuming the current changes pass; all the way up to line 524</span></div><div class="line" id="014717"><span class="nick" style="color:#8dd3c7"><a href="#014717" label="[01:47:17]">&lt;OriansJ&gt;</a></span><span class="message">I just realized I might have missed a couple steps in the makefile but should be simple to fix</span></div><div class="line" id="014904"><span class="nick" style="color:#8dd3c7"><a href="#014904" label="[01:49:04]">&lt;OriansJ&gt;</a></span><span class="message">oh well, I can deal with that after I get vm.c M2-Planet buildable tonight</span></div><div class="line" id="015527"><span class="nick" style="color:#8dd3c7"><a href="#015527" label="[01:55:27]">&lt;OriansJ&gt;</a></span><span class="message">all the way to line thus far 632</span></div><div class="line" id="015627"><span class="nick" style="color:#2e2a4a"><a href="#015627" label="[01:56:27]">&lt;fossy&gt;</a></span><span class="message">how long does it take m2 planet to compile it</span></div><div class="line" id="015804"><span class="nick" style="color:#2e2a4a"><a href="#015804" label="[01:58:04]">&lt;fossy&gt;</a></span><span class="message">oh its in ur repo right</span></div><div class="line" id="021413"><span class="nick" style="color:#8dd3c7"><a href="#021413" label="[02:14:13]">&lt;OriansJ&gt;</a></span><span class="message">fossy: M2-Planet can compile 100Kloc/second</span></div><div class="line" id="021436"><span class="nick" style="color:#2e2a4a"><a href="#021436" label="[02:14:36]">&lt;fossy&gt;</a></span><span class="message">that is not slow</span></div><div class="line" id="021454"><span class="nick" style="color:#8dd3c7"><a href="#021454" label="[02:14:54]">&lt;OriansJ&gt;</a></span><span class="message">at 1081 lines of code for vm.c; we are looking at about 1/100th of a second</span></div><div class="line" id="021512"><span class="nick" style="color:#8dd3c7"><a href="#021512" label="[02:15:12]">&lt;OriansJ&gt;</a></span><span class="message">but the resulting binary will be 10times slower than what GCC would produce</span></div><div class="line" id="021532"><span class="nick" style="color:#2e2a4a"><a href="#021532" label="[02:15:32]">&lt;fossy&gt;</a></span><span class="message">oh well</span></div><div class="line" id="021556"><span class="nick" style="color:#2e2a4a"><a href="#021556" label="[02:15:56]">&lt;fossy&gt;</a></span><span class="message">as long as it isnt a day like the original mes tinycc bootstrap was</span></div><div class="line" id="021632"><span class="nick" style="color:#8dd3c7"><a href="#021632" label="[02:16:32]">&lt;OriansJ&gt;</a></span><span class="message">assuming it doesn't abuse the C standard too hard and depend upon undefined behavior; once M2-Planet can compile it. We will be off and to the races.</span></div><div class="line" id="021726"><span class="nick" style="color:#8dd3c7"><a href="#021726" label="[02:17:26]">&lt;OriansJ&gt;</a></span><span class="message">well I can give you an approximate compile time to bootstrap to precisely in just 1 minute</span></div><div class="line" id="021733"><span class="nick" style="color:#2e2a4a"><a href="#021733" label="[02:17:33]">&lt;fossy&gt;</a></span><span class="message">well, how much more work is there to do after that to bridge the gap to mes?</span></div><div class="line" id="021811"><span class="nick" style="color:#6b8072"><a href="#021811" label="[02:18:11]">*</a></span><span class="message">Hagfish grabs popcorn</span></div><div class="line" id="021813"><span class="nick" style="color:#8dd3c7"><a href="#021813" label="[02:18:13]">&lt;OriansJ&gt;</a></span><span class="message">fossy: don't know that is siraben's plan</span></div><div class="line" id="021821"><span class="nick" style="color:#2e2a4a"><a href="#021821" label="[02:18:21]">&lt;fossy&gt;</a></span><span class="message">mhm</span></div><div class="line" id="021838"><span class="nick" style="color:#2e2a4a"><a href="#021838" label="[02:18:38]">&lt;fossy&gt;</a></span><span class="message">i believe there was a replacement for like finally and virtually with lispy and schemey or something??</span></div><div class="line" id="021847"><span class="nick" style="color:#8dd3c7"><a href="#021847" label="[02:18:47]">&lt;OriansJ&gt;</a></span><span class="message">I am just doing the M2-Planet work required to make it possible</span></div><div class="line" id="021851"><span class="nick" style="color:#80b1d3"><a href="#021851" label="[02:18:51]">&lt;siraben&gt;</a></span><span class="message">fossy: yes there was, but I decided it would be a lot of work that way</span></div><div class="line" id="021902"><span class="nick" style="color:#80b1d3"><a href="#021902" label="[02:19:02]">&lt;siraben&gt;</a></span><span class="message">see the README of ðŸ¥²ðŸ¥²ðŸ¥²</span></div><div class="line" id="021906"><span class="nick" style="color:#80b1d3"><a href="#021906" label="[02:19:06]">&lt;siraben&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/siraben/compiler">https://github.com/siraben/compiler</a> </span></div><div class="line" id="021912"><span class="nick" style="color:#80b1d3"><a href="#021912" label="[02:19:12]">&lt;siraben&gt;</a></span><span class="message">oops pasted bytestring</span></div><div class="line" id="021915"><span class="nick" style="color:#2e2a4a"><a href="#021915" label="[02:19:15]">&lt;fossy&gt;</a></span><span class="message">ok new version?</span></div><div class="line" id="021933"><span class="nick" style="color:#2e2a4a"><a href="#021933" label="[02:19:33]">&lt;fossy&gt;</a></span><span class="message">which of the proposed ones is more likely</span></div><div class="line" id="021943"><span class="nick" style="color:#80b1d3"><a href="#021943" label="[02:19:43]">&lt;siraben&gt;</a></span><span class="message">It's the same as a few days ago but I compare two different approaches</span></div><div class="line" id="021952"><span class="nick" style="color:#80b1d3"><a href="#021952" label="[02:19:52]">&lt;siraben&gt;</a></span><span class="message">The Scheme interpreter in Haskell</span></div><div class="line" id="021955"><span class="nick" style="color:#80b1d3"><a href="#021955" label="[02:19:55]">&lt;siraben&gt;</a></span><span class="message">is more likely</span></div><div class="line" id="021956"><span class="nick" style="color:#2e2a4a"><a href="#021956" label="[02:19:56]">&lt;fossy&gt;</a></span><span class="message">ok</span></div><div class="line" id="022027"><span class="nick" style="color:#8dd3c7"><a href="#022027" label="[02:20:27]">&lt;OriansJ&gt;</a></span><span class="message">also there are some questions about vm.c that might become an issue (nearly binary blobs and all)</span></div><div class="line" id="022048"><span class="nick" style="color:#80b1d3"><a href="#022048" label="[02:20:48]">&lt;siraben&gt;</a></span><span class="message">Which part of vm.c? The first four compilers?</span></div><div class="line" id="022128"><span class="nick" style="color:#8dd3c7"><a href="#022128" label="[02:21:28]">&lt;OriansJ&gt;</a></span><span class="message">ok from make clean ALL to precisely is 204.82 seconds wall time; so say 2048.2 seconds for M2-Planet instead of gcc doing the bootstrap</span></div><div class="line" id="022146"><span class="nick" style="color:#8dd3c7"><a href="#022146" label="[02:21:46]">&lt;OriansJ&gt;</a></span><span class="message">siraben: lines like 633</span></div><div class="line" id="022220"><span class="nick" style="color:#80b1d3"><a href="#022220" label="[02:22:20]">&lt;siraben&gt;</a></span><span class="message">OriansJ: Ah, it's not that opaque once you know the translation</span></div><div class="line" id="022234"><span class="nick" style="color:#80b1d3"><a href="#022234" label="[02:22:34]">&lt;siraben&gt;</a></span><span class="message">Also, it can be inspected that no IO is performed</span></div><div class="line" id="022254"><span class="nick" style="color:#8dd3c7"><a href="#022254" label="[02:22:54]">&lt;OriansJ&gt;</a></span><span class="message">the char *parenthetically, char *exponentially, char *practically, and char *singularity</span></div><div class="line" id="022313"><span class="nick" style="color:#80b1d3"><a href="#022313" label="[02:23:13]">&lt;siraben&gt;</a></span><span class="message">How many bytes do they total in all?</span></div><div class="line" id="022351"><span class="nick" style="color:#80b1d3"><a href="#022351" label="[02:23:51]">&lt;siraben&gt;</a></span><span class="message">We could potentially rewrite what they do in C instead</span></div><div class="line" id="022404"><span class="nick" style="color:#2e2a4a"><a href="#022404" label="[02:24:04]">&lt;fossy&gt;</a></span><span class="message">but then what about lonely and those afterwards?</span></div><div class="line" id="022415"><span class="nick" style="color:#8dd3c7"><a href="#022415" label="[02:24:15]">&lt;OriansJ&gt;</a></span><span class="message">siraben: 6885</span></div><div class="line" id="022447"><span class="nick" style="color:#8dd3c7"><a href="#022447" label="[02:24:47]">&lt;OriansJ&gt;</a></span><span class="message">siraben: I want the translation if we are to use them inline for trivial inspection</span></div><div class="line" id="022456"><span class="nick" style="color:#80b1d3"><a href="#022456" label="[02:24:56]">&lt;siraben&gt;</a></span><span class="message">Hm yeah, trusting trust of sorts. exponentially and practically have a small diff of two lines by the way</span></div><div class="line" id="022502"><span class="nick" style="color:#80b1d3"><a href="#022502" label="[02:25:02]">&lt;siraben&gt;</a></span><span class="message">Right</span></div><div class="line" id="022548"><span class="nick" style="color:#8dd3c7"><a href="#022548" label="[02:25:48]">&lt;OriansJ&gt;</a></span><span class="message">it is big enough to hide a compiler in</span></div><div class="line" id="022612"><span class="nick" style="color:#2e2a4a"><a href="#022612" label="[02:26:12]">&lt;fossy&gt;</a></span><span class="message">OriansJ: won't we need to make sure that bin/vm run creates M2-Planet compatible C</span></div><div class="line" id="022619"><span class="nick" style="color:#2e2a4a"><a href="#022619" label="[02:26:19]">&lt;fossy&gt;</a></span><span class="message">and convert rts.c to M2-Planet</span></div><div class="line" id="022625"><span class="nick" style="color:#8dd3c7"><a href="#022625" label="[02:26:25]">&lt;OriansJ&gt;</a></span><span class="message">so; we are going to have to figure out something workable</span></div><div class="line" id="022640"><span class="nick" style="color:#8dd3c7"><a href="#022640" label="[02:26:40]">&lt;OriansJ&gt;</a></span><span class="message">fossy: that is the next step after we get bin/vm happy</span></div><div class="line" id="022647"><span class="nick" style="color:#2e2a4a"><a href="#022647" label="[02:26:47]">&lt;fossy&gt;</a></span><span class="message">right</span></div><div class="line" id="022718"><span class="nick" style="color:#8dd3c7"><a href="#022718" label="[02:27:18]">&lt;OriansJ&gt;</a></span><span class="message">there is no point working on those if there is a trusting trust attack in vm.c</span></div><div class="line" id="022719"><span class="nick" style="color:#80b1d3"><a href="#022719" label="[02:27:19]">&lt;siraben&gt;</a></span><span class="message">OriansJ: Is it more important to get the bootstrap working in the first place, then we can go back and rewrite the earlier stages in C?</span></div><div class="line" id="022727"><span class="nick" style="color:#80b1d3"><a href="#022727" label="[02:27:27]">&lt;siraben&gt;</a></span><span class="message">Or other way around</span></div><div class="line" id="022804"><span class="nick" style="color:#8dd3c7"><a href="#022804" label="[02:28:04]">&lt;OriansJ&gt;</a></span><span class="message">siraben: personally I believe in getting the foundation correct first</span></div><div class="line" id="022822"><span class="nick" style="color:#2e2a4a"><a href="#022822" label="[02:28:22]">&lt;fossy&gt;</a></span><span class="message">how would we make char *singularity and friends into C, siraben ?</span></div><div class="line" id="022848"><span class="nick" style="color:#80b1d3"><a href="#022848" label="[02:28:48]">&lt;siraben&gt;</a></span><span class="message">fossy:  <a rel="nofollow" href="https://crypto.stanford.edu/~blynn/compiler/quest.html">https://crypto.stanford.edu/~blynn/compiler/quest.html</a> </span></div><div class="line" id="022853"><span class="nick" style="color:#80b1d3"><a href="#022853" label="[02:28:53]">&lt;siraben&gt;</a></span><span class="message">They're just syntactic transformations initially</span></div><div class="line" id="022922"><span class="nick" style="color:#80b1d3"><a href="#022922" label="[02:29:22]">&lt;siraben&gt;</a></span><span class="message">parenthetically wouldn't be hard to rewrite</span></div><div class="line" id="022935"><span class="nick" style="color:#2e2a4a"><a href="#022935" label="[02:29:35]">&lt;fossy&gt;</a></span><span class="message">i don't think this is going to be easy to implement in C</span></div><div class="line" id="022944"><span class="nick" style="color:#80b1d3"><a href="#022944" label="[02:29:44]">&lt;siraben&gt;</a></span><span class="message">Exponentially would be harder</span></div><div class="line" id="023001"><span class="nick" style="color:#80b1d3"><a href="#023001" label="[02:30:01]">&lt;siraben&gt;</a></span><span class="message">They all use higher-order functions and parser combinators already</span></div><div class="line" id="023020"><span class="nick" style="color:#80b1d3"><a href="#023020" label="[02:30:20]">&lt;siraben&gt;</a></span><span class="message">Hmm</span></div><div class="line" id="023025"><span class="nick" style="color:#8dd3c7"><a href="#023025" label="[02:30:25]">&lt;OriansJ&gt;</a></span><span class="message">hence why I say, I don't know the correct solution yet</span></div><div class="line" id="023105"><span class="nick" style="color:#80b1d3"><a href="#023105" label="[02:31:05]">&lt;siraben&gt;</a></span><span class="message">OriansJ: so to clarify, it's ok proceeding without rewriting all of vm.c in C for now?</span></div><div class="line" id="023129"><span class="nick" style="color:#8dd3c7"><a href="#023129" label="[02:31:29]">&lt;OriansJ&gt;</a></span><span class="message">siraben: right now; I am doing minimal changes to vm.c</span></div><div class="line" id="023143"><span class="nick" style="color:#8dd3c7"><a href="#023143" label="[02:31:43]">&lt;OriansJ&gt;</a></span><span class="message">with the goal of enabling it to be built via M2-Planet</span></div><div class="line" id="023224"><span class="nick" style="color:#8dd3c7"><a href="#023224" label="[02:32:24]">&lt;OriansJ&gt;</a></span><span class="message">after that; we can start figuring out how to make it something people can trust.</span></div><div class="line" id="023236"><span class="nick" style="color:#80b1d3"><a href="#023236" label="[02:32:36]">&lt;siraben&gt;</a></span><span class="message">Ok.</span></div><div class="line" id="023236"><span class="nick" style="color:#8dd3c7"><a href="#023236" label="[02:32:36]">&lt;OriansJ&gt;</a></span><span class="message">no jumping to solutions.</span></div><div class="line" id="023312"><span class="nick" style="color:#8dd3c7"><a href="#023312" label="[02:33:12]">&lt;OriansJ&gt;</a></span><span class="message">just take some time to think would be less work for us but also would be something trivial to trust.</span></div><div class="line" id="023312"><span class="nick" style="color:#80b1d3"><a href="#023312" label="[02:33:12]">&lt;siraben&gt;</a></span><span class="message">Do you have string routines in mes-m2? We could use that to bootstrap blynn-compiler</span></div><div class="line" id="023355"><span class="nick" style="color:#80b1d3"><a href="#023355" label="[02:33:55]">&lt;siraben&gt;</a></span><span class="message">i.e. rewrite the first four stages in Scheme</span></div><div class="line" id="023408"><span class="nick" style="color:#2e2a4a"><a href="#023408" label="[02:34:08]">&lt;fossy&gt;</a></span><span class="message">hm, better idea</span></div><div class="line" id="023416"><span class="nick" style="color:#2e2a4a"><a href="#023416" label="[02:34:16]">&lt;fossy&gt;</a></span><span class="message">it would be much easier to rewrite that in a functional language</span></div><div class="line" id="023420"><span class="nick" style="color:#8dd3c7"><a href="#023420" label="[02:34:20]">&lt;OriansJ&gt;</a></span><span class="message">if you look at mes-m2/s mes_init.c you'll see the full list of primitives</span></div><div class="line" id="023430"><span class="nick" style="color:#2e2a4a"><a href="#023430" label="[02:34:30]">&lt;fossy&gt;</a></span><span class="message">although i think all of us would be leaning on you, siraben quite a bit</span></div><div class="line" id="023500"><span class="nick" style="color:#8dd3c7"><a href="#023500" label="[02:35:00]">&lt;OriansJ&gt;</a></span><span class="message">fossy: no rushing to solutions yet</span></div><div class="line" id="023521"><span class="nick" style="color:#80b1d3"><a href="#023521" label="[02:35:21]">&lt;siraben&gt;</a></span><span class="message">Ok, so enough string primitives</span></div><div class="line" id="023538"><span class="nick" style="color:#8dd3c7"><a href="#023538" label="[02:35:38]">&lt;OriansJ&gt;</a></span><span class="message">and trivial to add more</span></div><div class="line" id="023551"><span class="nick" style="color:#2e2a4a"><a href="#023551" label="[02:35:51]">&lt;fossy&gt;</a></span><span class="message">OriansJ: on a slightly different topic. I know that gash exists, but before that, especially if we go the route we are talking about now, we would need something like cp i reckon to make the code cleaner</span></div><div class="line" id="023553"><span class="nick" style="color:#80b1d3"><a href="#023553" label="[02:35:53]">&lt;siraben&gt;</a></span><span class="message">I could adapt my parser combinators <a rel="nofollow" href="https://github.com/siraben/monadic-parsing/blob/master/parsing.scm">https://github.com/siraben/monadic-parsing/blob/master/parsing.scm</a> </span></div><div class="line" id="023603"><span class="nick" style="color:#2e2a4a"><a href="#023603" label="[02:36:03]">&lt;fossy&gt;</a></span><span class="message">a simple cp command would be easy to write in M2-Planet</span></div><div class="line" id="023618"><span class="nick" style="color:#8dd3c7"><a href="#023618" label="[02:36:18]">&lt;OriansJ&gt;</a></span><span class="message">fossy: no need we have catm</span></div><div class="line" id="023624"><span class="nick" style="color:#2e2a4a"><a href="#023624" label="[02:36:24]">&lt;fossy&gt;</a></span><span class="message">Oh yeah!</span></div><div class="line" id="023626"><span class="nick" style="color:#2e2a4a"><a href="#023626" label="[02:36:26]">&lt;fossy&gt;</a></span><span class="message">forgot about catm</span></div><div class="line" id="023631"><span class="nick" style="color:#2e2a4a"><a href="#023631" label="[02:36:31]">&lt;fossy&gt;</a></span><span class="message">what's the catm syntax again</span></div><div class="line" id="023654"><span class="nick" style="color:#8dd3c7"><a href="#023654" label="[02:36:54]">&lt;OriansJ&gt;</a></span><span class="message">catm output input1 input2 ... inputN</span></div><div class="line" id="023701"><span class="nick" style="color:#2e2a4a"><a href="#023701" label="[02:37:01]">&lt;fossy&gt;</a></span><span class="message">ahha</span></div><div class="line" id="023739"><span class="nick" style="color:#8dd3c7"><a href="#023739" label="[02:37:39]">&lt;OriansJ&gt;</a></span><span class="message">as  if you look at the C code in mescc-tools for catm</span></div><div class="line" id="023753"><span class="nick" style="color:#80b1d3"><a href="#023753" label="[02:37:53]">&lt;siraben&gt;</a></span><span class="message">OriansJ: could you look at parsing.scm i sent above, would it be possible to translate to mes-m2?</span></div><div class="line" id="023758"><span class="nick" style="color:#8dd3c7"><a href="#023758" label="[02:37:58]">&lt;OriansJ&gt;</a></span><span class="message">it is so that I can be lazy when writing it in assembly.</span></div><div class="line" id="023801"><span class="nick" style="color:#80b1d3"><a href="#023801" label="[02:38:01]">&lt;siraben&gt;</a></span><span class="message">We can do without the use of hygienic macros</span></div><div class="line" id="023851"><span class="nick" style="color:#8dd3c7"><a href="#023851" label="[02:38:51]">&lt;OriansJ&gt;</a></span><span class="message">siraben: sure; give me a moment to parse</span></div><div class="line" id="024310"><span class="nick" style="color:#8dd3c7"><a href="#024310" label="[02:43:10]">&lt;OriansJ&gt;</a></span><span class="message">well we don't have object-&gt;string yet but it could be an easy add. string-concatenate/shared we could do in scheme, so not a problem. syntax-rules nope; the rest of it seems fine (assuming we expand to eliminate the need for syntax-rules)</span></div><div class="line" id="024350"><span class="nick" style="color:#80b1d3"><a href="#024350" label="[02:43:50]">&lt;siraben&gt;</a></span><span class="message">Mutual recursion is alright?</span></div><div class="line" id="024426"><span class="nick" style="color:#80b1d3"><a href="#024426" label="[02:44:26]">&lt;siraben&gt;</a></span><span class="message">string-concatenate/shared could just be string-concat</span></div><div class="line" id="024635"><span class="nick" style="color:#8dd3c7"><a href="#024635" label="[02:46:35]">&lt;OriansJ&gt;</a></span><span class="message">siraben: yes</span></div><div class="line" id="024846"><span class="nick" style="color:#80b1d3"><a href="#024846" label="[02:48:46]">&lt;siraben&gt;</a></span><span class="message">I see. Haha, bootstrapping Scheme via Haskell via Scheme</span></div><div class="line" id="024908"><span class="nick" style="color:#8dd3c7"><a href="#024908" label="[02:49:08]">&lt;OriansJ&gt;</a></span><span class="message">a simple test: (define (foo a) (+ (bar (- a 1)) (bar (- a 2)))) (define (bar a) (if (&gt; 0 a) 1 (+ (foo (- a 1)) (foo (- a 2))))) (foo 3)</span></div><div class="line" id="025027"><span class="nick" style="color:#8dd3c7"><a href="#025027" label="[02:50:27]">&lt;OriansJ&gt;</a></span><span class="message">mes-m2 is as proper of a scheme as I could do (minus syntax-case and more advanced macros and modules)</span></div><div class="line" id="025415"><span class="nick" style="color:#8dd3c7"><a href="#025415" label="[02:54:15]">&lt;OriansJ&gt;</a></span><span class="message">and (define (fib a) (cond ((= a 0) 1) ((= a 1) 1) (else (+ (fib (- a 1)) (fib (- a 2)))))) self recursion as well</span></div><div class="line" id="025422"><span class="nick" style="color:#2e2a4a"><a href="#025422" label="[02:54:22]">&lt;fossy&gt;</a></span><span class="message">lol, M2-Planet -&gt; mes-m2 -&gt; blynn -&gt; blah blah blah -&gt; mes -&gt; blah blah -&gt; gcc</span></div><div class="line" id="025551"><span class="nick" style="color:#8dd3c7"><a href="#025551" label="[02:55:51]">&lt;OriansJ&gt;</a></span><span class="message">fossy: well more like M2-Planet -&gt;mes-m2; M2-Planet -&gt; vm.c; mes-m2-&gt; blynn -&gt; scheme in haskell -&gt; mescc -&gt; blah -&gt; gcc</span></div><div class="line" id="025552"><span class="nick" style="color:#80b1d3"><a href="#025552" label="[02:55:52]">&lt;siraben&gt;</a></span><span class="message">Indeed hygienic macros is one thing I want to get right, because it significantly reduces the special forms needed</span></div><div class="line" id="025603"><span class="nick" style="color:#2e2a4a"><a href="#025603" label="[02:56:03]">&lt;fossy&gt;</a></span><span class="message">well yes</span></div><div class="line" id="025615"><span class="nick" style="color:#80b1d3"><a href="#025615" label="[02:56:15]">&lt;siraben&gt;</a></span><span class="message">mescc â†’ &lt;very long chain&gt; â†’ gcc</span></div><div class="line" id="025620"><span class="nick" style="color:#80b1d3"><a href="#025620" label="[02:56:20]">&lt;siraben&gt;</a></span><span class="message">this is simple in comparison</span></div><div class="line" id="025624"><span class="nick" style="color:#2e2a4a"><a href="#025624" label="[02:56:24]">&lt;fossy&gt;</a></span><span class="message">haha</span></div><div class="line" id="025934"><span class="nick" style="color:#8dd3c7"><a href="#025934" label="[02:59:34]">&lt;OriansJ&gt;</a></span><span class="message">well technically no because of the number of steps in blynn but it will be interesting regardless</span></div><div class="line" id="030300"><span class="nick" style="color:#80b1d3"><a href="#030300" label="[03:03:00]">&lt;siraben&gt;</a></span><span class="message">Right. A better measure might be code size as you go along</span></div><div class="line" id="030303"><span class="nick" style="color:#8dd3c7"><a href="#030303" label="[03:03:03]">&lt;OriansJ&gt;</a></span><span class="message">22 steps to precisely but 10 to gcc 4.7.4 (7 to gcc 2.95.3)</span></div><div class="line" id="030344"><span class="nick" style="color:#2e2a4a"><a href="#030344" label="[03:03:44]">&lt;fossy&gt;</a></span><span class="message">did any kernel work come to frutition</span></div><div class="line" id="030402"><span class="nick" style="color:#8dd3c7"><a href="#030402" label="[03:04:02]">&lt;OriansJ&gt;</a></span><span class="message">siraben: no need for comparison; just which ever is more fun</span></div><div class="line" id="030433"><span class="nick" style="color:#8dd3c7"><a href="#030433" label="[03:04:33]">&lt;OriansJ&gt;</a></span><span class="message">fossy: are you talking of bauen1's work?</span></div><div class="line" id="030433"><span class="nick" style="color:#80b1d3"><a href="#030433" label="[03:04:33]">&lt;siraben&gt;</a></span><span class="message">OriansJ: of course!</span></div><div class="line" id="030501"><span class="nick" style="color:#8dd3c7"><a href="#030501" label="[03:05:01]">&lt;OriansJ&gt;</a></span><span class="message">made it to line 869</span></div><div class="line" id="032328"><span class="nick" style="color:#8dd3c7"><a href="#032328" label="[03:23:28]">&lt;OriansJ&gt;</a></span><span class="message">ok; assuming all tests pass. I'll have a version of vm.c that M2-Planet can compile with the command: M2-Planet --architecture amd64 -f ../M2-Planet/test/common_amd64/functions/exit.c -f ../M2-Planet/test/common_amd64/functions/file.c -f ../M2-Planet/test/common_amd64/functions/malloc.c -f ../M2-Planet/functions/calloc.c -f functions/file_print.c -f functions/match.c -f vm.c</span></div><div class="line" id="033353"><span class="nick" style="color:#8dd3c7"><a href="#033353" label="[03:33:53]">&lt;OriansJ&gt;</a></span><span class="message">well it compiles but doesn't yet run</span></div><div class="line" id="033545"><span class="nick" style="color:#8dd3c7"><a href="#033545" label="[03:35:45]">&lt;OriansJ&gt;</a></span><span class="message">here are the commands to build: <a rel="nofollow" href="https://paste.debian.net/1173547/">https://paste.debian.net/1173547/</a> </span></div><div class="line" id="033602"><span class="nick" style="color:#8dd3c7"><a href="#033602" label="[03:36:02]">&lt;OriansJ&gt;</a></span><span class="message">the version of vm.c that can be built by M2-Planet is up</span></div><div class="line" id="033624"><span class="nick" style="color:#8dd3c7"><a href="#033624" label="[03:36:24]">&lt;OriansJ&gt;</a></span><span class="message">but it doesn't run successfully. I look deeper into that tomorrow.</span></div><div class="line" id="041502"><span class="nick" style="color:#2e2a4a"><a href="#041502" label="[04:15:02]">&lt;fossy&gt;</a></span><span class="message">OriansJ: yes i am</span></div><div class="line" id="064828"><span class="nick">***</span><span class="message notice">dongcarl4 is now known as dongcarl</span></div><div class="line" id="091243"><span class="nick" style="color:#6d2462"><a href="#091243" label="[09:12:43]">&lt;bauen1&gt;</a></span><span class="message">fossy: i currently don't quite have the time to work on it</span></div><div class="line" id="091318"><span class="nick" style="color:#6d2462"><a href="#091318" label="[09:13:18]">&lt;bauen1&gt;</a></span><span class="message">fossy: essentially all that is needed now is to write a syscall layer and implement some form of processes (threads and really simple scheduling should already work)</span></div><div class="line" id="091437"><span class="nick" style="color:#6d2462"><a href="#091437" label="[09:14:37]">&lt;bauen1&gt;</a></span><span class="message">just how much closer has mes come to run mescc ?</span></div><div class="line" id="091444"><span class="nick" style="color:#6d2462"><a href="#091444" label="[09:14:44]">&lt;bauen1&gt;</a></span><span class="message">*mes-m2</span></div><div class="line" id="092431"><span class="nick" style="color:#2e2a4a"><a href="#092431" label="[09:24:31]">&lt;fossy&gt;</a></span><span class="message">bauen1: fair.</span></div><div class="line" id="092436"><span class="nick" style="color:#2e2a4a"><a href="#092436" label="[09:24:36]">&lt;fossy&gt;</a></span><span class="message">it has not</span></div><div class="line" id="092444"><span class="nick" style="color:#2e2a4a"><a href="#092444" label="[09:24:44]">&lt;fossy&gt;</a></span><span class="message">We are exploring a diff path</span></div><div class="line" id="094110"><span class="nick" style="color:#6d2462"><a href="#094110" label="[09:41:10]">&lt;bauen1&gt;</a></span><span class="message">modifying musl is actually the annoying part, since now i need to look into multiple repos and what not</span></div><div class="line" id="094130"><span class="nick" style="color:#6d2462"><a href="#094130" label="[09:41:30]">&lt;bauen1&gt;</a></span><span class="message">without a libc testing any form of processes (the clone and mmap syscall) becomes a lot more annoying</span></div><div class="line" id="104302"><span class="nick" style="color:#8dd3c7"><a href="#104302" label="[10:43:02]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: proper scheme macro support in C is *HARD* enough that we are taking a little bit of time to see if bootstrapping Haskell would be easier.</span></div><div class="line" id="104351"><span class="nick" style="color:#8dd3c7"><a href="#104351" label="[10:43:51]">&lt;OriansJ&gt;</a></span><span class="message">siraben: looks like it is a game of hunting down pointer arithmetic in vm.c</span></div><div class="line" id="104501"><span class="nick" style="color:#80b1d3"><a href="#104501" label="[10:45:01]">&lt;siraben&gt;</a></span><span class="message">OriansJ:  IIRC he indexes into mem and sp all the time</span></div><div class="line" id="104515"><span class="nick" style="color:#8dd3c7"><a href="#104515" label="[10:45:15]">&lt;OriansJ&gt;</a></span><span class="message">as in M2-Planet when you do a = a + 1; a is actually incremented by 1 but in C proper a = a + 1; could mean a is incremented by 1 or sizeof(type_of_a); depending on what type a is</span></div><div class="line" id="104522"><span class="nick" style="color:#80b1d3"><a href="#104522" label="[10:45:22]">&lt;siraben&gt;</a></span><span class="message">Yes</span></div><div class="line" id="104626"><span class="nick" style="color:#80b1d3"><a href="#104626" label="[10:46:26]">&lt;siraben&gt;</a></span><span class="message">you could have a `mem(unsigned x)` function that converts this `x` into the right size and indexes into the memory, so `mem(n+1)` would mean the `n+1`th cell</span></div><div class="line" id="104633"><span class="nick" style="color:#80b1d3"><a href="#104633" label="[10:46:33]">&lt;siraben&gt;</a></span><span class="message">seems like the easiest change</span></div><div class="line" id="104636"><span class="nick" style="color:#8dd3c7"><a href="#104636" label="[10:46:36]">&lt;OriansJ&gt;</a></span><span class="message">well a[1] means the same thing in M2-Planet and C; address of a + sizeof(type_of_a)</span></div><div class="line" id="104709"><span class="nick" style="color:#8dd3c7"><a href="#104709" label="[10:47:09]">&lt;OriansJ&gt;</a></span><span class="message">or simply //CONSTANT CELL_SIZE sizeof(unsigned) #define CELL_SIZE 1</span></div><div class="line" id="104716"><span class="nick" style="color:#80b1d3"><a href="#104716" label="[10:47:16]">&lt;siraben&gt;</a></span><span class="message">I see</span></div><div class="line" id="104734"><span class="nick" style="color:#8dd3c7"><a href="#104734" label="[10:47:34]">&lt;OriansJ&gt;</a></span><span class="message">so it becomes a = a + CELL_SIZE;</span></div><div class="line" id="104743"><span class="nick" style="color:#8dd3c7"><a href="#104743" label="[10:47:43]">&lt;OriansJ&gt;</a></span><span class="message">and it then does the exact same thing</span></div><div class="line" id="104759"><span class="nick" style="color:#8dd3c7"><a href="#104759" label="[10:47:59]">&lt;OriansJ&gt;</a></span><span class="message">and people can tell at a glance what is expected behavior</span></div><div class="line" id="104819"><span class="nick" style="color:#80b1d3"><a href="#104819" label="[10:48:19]">&lt;siraben&gt;</a></span><span class="message">ah and you can still compile with GCC and override the define</span></div><div class="line" id="104850"><span class="nick" style="color:#8dd3c7"><a href="#104850" label="[10:48:50]">&lt;OriansJ&gt;</a></span><span class="message">I like simple and easy to understand code; when possible.</span></div><div class="line" id="105015"><span class="nick" style="color:#8dd3c7"><a href="#105015" label="[10:50:15]">&lt;OriansJ&gt;</a></span><span class="message">code is for humans to read and understand and for computers to incidentially execute.</span></div><div class="line" id="105046"><span class="nick" style="color:#80b1d3"><a href="#105046" label="[10:50:46]">&lt;siraben&gt;</a></span><span class="message">Knuth quote?</span></div><div class="line" id="105100"><span class="nick" style="color:#8dd3c7"><a href="#105100" label="[10:51:00]">&lt;OriansJ&gt;</a></span><span class="message">siraben: indeed</span></div><div class="line" id="105102"><span class="nick" style="color:#80b1d3"><a href="#105102" label="[10:51:02]">&lt;siraben&gt;</a></span><span class="message">Ah, SICP</span></div><div class="line" id="105132"><span class="nick" style="color:#8dd3c7"><a href="#105132" label="[10:51:32]">&lt;OriansJ&gt;</a></span><span class="message">I think it is a very old thought too.</span></div><div class="line" id="105210"><span class="nick" style="color:#8dd3c7"><a href="#105210" label="[10:52:10]">&lt;OriansJ&gt;</a></span><span class="message">At the end of the day, it is about having things that humans can reason about and fix</span></div><div class="line" id="105234"><span class="nick" style="color:#8dd3c7"><a href="#105234" label="[10:52:34]">&lt;OriansJ&gt;</a></span><span class="message">otherwise, we get stuck in hell with no way to escape.</span></div><div class="line" id="105342"><span class="nick" style="color:#8dd3c7"><a href="#105342" label="[10:53:42]">&lt;OriansJ&gt;</a></span><span class="message">it is one of the reasons why source code *MATTERS*; without it, there is no hope of understanding some of the bugs that occur.</span></div><div class="line" id="105358"><span class="nick" style="color:#80b1d3"><a href="#105358" label="[10:53:58]">&lt;siraben&gt;</a></span><span class="message">OriansJ: would it be possible to run m2-planet on x86-64?</span></div><div class="line" id="105427"><span class="nick" style="color:#8dd3c7"><a href="#105427" label="[10:54:27]">&lt;OriansJ&gt;</a></span><span class="message">siraben: x86-64 is just Intel marketing for the AMD64 instruction set</span></div><div class="line" id="105517"><span class="nick" style="color:#8dd3c7"><a href="#105517" label="[10:55:17]">&lt;OriansJ&gt;</a></span><span class="message">AMD designed it and shipped it and named it; Intel copied it and renamed it so they wouldn't have to give credit to AMD</span></div><div class="line" id="105542"><span class="nick" style="color:#80b1d3"><a href="#105542" label="[10:55:42]">&lt;siraben&gt;</a></span><span class="message">I see</span></div><div class="line" id="105603"><span class="nick" style="color:#8dd3c7"><a href="#105603" label="[10:56:03]">&lt;OriansJ&gt;</a></span><span class="message">Intel processors run the AMD64 port just fine</span></div><div class="line" id="105617"><span class="nick" style="color:#80b1d3"><a href="#105617" label="[10:56:17]">&lt;siraben&gt;</a></span><span class="message">Also what about on non-linux OSes?</span></div><div class="line" id="105654"><span class="nick" style="color:#8dd3c7"><a href="#105654" label="[10:56:54]">&lt;OriansJ&gt;</a></span><span class="message">well it works just fine on FreeBSD and NetBSD (even when bootstrapped in mescc-tools-seed)</span></div><div class="line" id="105719"><span class="nick" style="color:#8dd3c7"><a href="#105719" label="[10:57:19]">&lt;OriansJ&gt;</a></span><span class="message">It could also rather easily be ported; on needs only replace the syscalls</span></div><div class="line" id="105734"><span class="nick" style="color:#8dd3c7"><a href="#105734" label="[10:57:34]">&lt;OriansJ&gt;</a></span><span class="message">^on^one^</span></div><div class="line" id="105741"><span class="nick" style="color:#80b1d3"><a href="#105741" label="[10:57:41]">&lt;siraben&gt;</a></span><span class="message">I see. I could give that a go on macOS</span></div><div class="line" id="105752"><span class="nick" style="color:#80b1d3"><a href="#105752" label="[10:57:52]">&lt;siraben&gt;</a></span><span class="message">Not sure about the BSD &lt;â†’ macOS compatibility</span></div><div class="line" id="105828"><span class="nick" style="color:#8dd3c7"><a href="#105828" label="[10:58:28]">&lt;OriansJ&gt;</a></span><span class="message">siraben: well the only thing that needs changing is the syscalls, everything else is bare metal behavior.</span></div><div class="line" id="105844"><span class="nick" style="color:#8dd3c7"><a href="#105844" label="[10:58:44]">&lt;OriansJ&gt;</a></span><span class="message">but if you use GCC or clang to Compile it; it should run just fine too</span></div><div class="line" id="105908"><span class="nick" style="color:#8dd3c7"><a href="#105908" label="[10:59:08]">&lt;OriansJ&gt;</a></span><span class="message">as there are no embedded syscalls in the source code that GCC or Clang would compile</span></div><div class="line" id="105955"><span class="nick" style="color:#8dd3c7"><a href="#105955" label="[10:59:55]">&lt;OriansJ&gt;</a></span><span class="message">The tests might fail as they currently don't check for host OS type only host CPU architecture</span></div><div class="line" id="110019"><span class="nick" style="color:#8dd3c7"><a href="#110019" label="[11:00:19]">&lt;OriansJ&gt;</a></span><span class="message">but the checksums should still match (and if they do, effectively the tests passed)</span></div><div class="line" id="110143"><span class="nick" style="color:#80b1d3"><a href="#110143" label="[11:01:43]">&lt;siraben&gt;</a></span><span class="message">ok</span></div><div class="line" id="110224"><span class="nick" style="color:#8dd3c7"><a href="#110224" label="[11:02:24]">&lt;OriansJ&gt;</a></span><span class="message">essentially you should be able to do: make M2-Planet and it should work regardless of the host OS</span></div><div class="line" id="110344"><span class="nick" style="color:#8dd3c7"><a href="#110344" label="[11:03:44]">&lt;OriansJ&gt;</a></span><span class="message">then you can just do ./bin/M2-Planet and type in a little C code and then ctrl-d to finish and it should dump the assembly it should generate</span></div><div class="line" id="110401"><span class="nick" style="color:#8dd3c7"><a href="#110401" label="[11:04:01]">&lt;OriansJ&gt;</a></span><span class="message">think of it as a half-repl for C</span></div><div class="line" id="110459"><span class="nick" style="color:#8dd3c7"><a href="#110459" label="[11:04:59]">&lt;OriansJ&gt;</a></span><span class="message">void foo() { return 42; }</span></div><div class="line" id="110549"><span class="nick" style="color:#80b1d3"><a href="#110549" label="[11:05:49]">&lt;siraben&gt;</a></span><span class="message">clang-11: error: cannot specify -o when generating multiple output files</span></div><div class="line" id="110612"><span class="nick" style="color:#80b1d3"><a href="#110612" label="[11:06:12]">&lt;siraben&gt;</a></span><span class="message">I'll try GCC</span></div><div class="line" id="110620"><span class="nick" style="color:#8dd3c7"><a href="#110620" label="[11:06:20]">&lt;OriansJ&gt;</a></span><span class="message">its output should look like: <a rel="nofollow" href="https://paste.debian.net/1173576/">https://paste.debian.net/1173576/</a> </span></div><div class="line" id="110653"><span class="nick" style="color:#80b1d3"><a href="#110653" label="[11:06:53]">&lt;siraben&gt;</a></span><span class="message">Nice, I got that as well.</span></div><div class="line" id="110719"><span class="nick" style="color:#80b1d3"><a href="#110719" label="[11:07:19]">&lt;siraben&gt;</a></span><span class="message">And to how assemble that?</span></div><div class="line" id="110805"><span class="nick" style="color:#8dd3c7"><a href="#110805" label="[11:08:05]">&lt;OriansJ&gt;</a></span><span class="message">siraben: blood-elf, M1 and hex2</span></div><div class="line" id="110814"><span class="nick" style="color:#80b1d3"><a href="#110814" label="[11:08:14]">&lt;siraben&gt;</a></span><span class="message">Looks like readme needs some updating, there's no bootstrap directory</span></div><div class="line" id="110857"><span class="nick" style="color:#8dd3c7"><a href="#110857" label="[11:08:57]">&lt;OriansJ&gt;</a></span><span class="message">siraben: well I do need to get better about the documentation</span></div><div class="line" id="110933"><span class="nick" style="color:#8dd3c7"><a href="#110933" label="[11:09:33]">&lt;OriansJ&gt;</a></span><span class="message">siraben: the exact same steps for compiling vm.c <a rel="nofollow" href="https://paste.debian.net/1173547/">https://paste.debian.net/1173547/</a>  are used for compiling everything</span></div><div class="line" id="111011"><span class="nick" style="color:#8dd3c7"><a href="#111011" label="[11:10:11]">&lt;OriansJ&gt;</a></span><span class="message">all of the source code is given to M2-Planet, it produces a big M1 file as output</span></div><div class="line" id="111027"><span class="nick" style="color:#8dd3c7"><a href="#111027" label="[11:10:27]">&lt;OriansJ&gt;</a></span><span class="message">blood-elf generates the dwarf stubs</span></div><div class="line" id="111036"><span class="nick" style="color:#8dd3c7"><a href="#111036" label="[11:10:36]">&lt;OriansJ&gt;</a></span><span class="message">(from the labels in the M1 file)</span></div><div class="line" id="111053"><span class="nick" style="color:#8dd3c7"><a href="#111053" label="[11:10:53]">&lt;OriansJ&gt;</a></span><span class="message">M1 converts it all down to hex2</span></div><div class="line" id="111116"><span class="nick" style="color:#8dd3c7"><a href="#111116" label="[11:11:16]">&lt;OriansJ&gt;</a></span><span class="message">and hex2 converts it all into one statically compiled binary</span></div><div class="line" id="111203"><span class="nick" style="color:#8dd3c7"><a href="#111203" label="[11:12:03]">&lt;OriansJ&gt;</a></span><span class="message">(M1 one using a definition file of course and hex2 with an elf header file written in hex2)</span></div><div class="line" id="111251"><span class="nick" style="color:#8dd3c7"><a href="#111251" label="[11:12:51]">&lt;OriansJ&gt;</a></span><span class="message">as it makes it trivial to find bugs in the compilation process</span></div><div class="line" id="111411"><span class="nick" style="color:#8dd3c7"><a href="#111411" label="[11:14:11]">&lt;OriansJ&gt;</a></span><span class="message">M2-Planet doesn't care what the host is at all; it always produces identicial output given the same input (and same options)</span></div><div class="line" id="111518"><span class="nick" style="color:#8dd3c7"><a href="#111518" label="[11:15:18]">&lt;OriansJ&gt;</a></span><span class="message">So if you don't specify --architecture amd64 or --architecture x86 or --architecture armv7l or --architecture AArch64; it'll default to Knight assembly output</span></div><div class="line" id="111610"><span class="nick" style="color:#8dd3c7"><a href="#111610" label="[11:16:10]">&lt;OriansJ&gt;</a></span><span class="message">blood-elf only cares if you want elf32 or elf64 (--64) formatted output</span></div><div class="line" id="111804"><span class="nick" style="color:#8dd3c7"><a href="#111804" label="[11:18:04]">&lt;OriansJ&gt;</a></span><span class="message">M1 requires you to specify --little-endian (to generate correct output for little endian architectures) and again to specify the output --architecture; otherwise it'll be big endian and Knight</span></div><div class="line" id="111906"><span class="nick" style="color:#80b1d3"><a href="#111906" label="[11:19:06]">&lt;siraben&gt;</a></span><span class="message">I'll look into this later. Thanks.</span></div><div class="line" id="111932"><span class="nick" style="color:#8dd3c7"><a href="#111932" label="[11:19:32]">&lt;OriansJ&gt;</a></span><span class="message">hex2 requires you to specify --little-endian (to generate correct output for little endian architectures) and again to specify the output --architecture; otherwise it'll be big endian and Knight. (formerly you had to specify if you wanted the output file to executable but we have since switched that behavior to be executable by default)</span></div><div class="line" id="113602"><span class="nick" style="color:#8dd3c7"><a href="#113602" label="[11:36:02]">&lt;OriansJ&gt;</a></span><span class="message">I just don't get why C programmers love pointer arithmetic so much</span></div><div class="line" id="113653"><span class="nick" style="color:#8dd3c7"><a href="#113653" label="[11:36:53]">&lt;OriansJ&gt;</a></span><span class="message">just having a proper struct or array is all that it takes to have easy to reason about behavior. But no that would be too obvious.</span></div><div class="line" id="113714"><span class="nick" style="color:#234e69"><a href="#113714" label="[11:37:14]">&lt;xentrac&gt;</a></span><span class="message">Pike had a really interesting rebuttal to that</span></div><div class="line" id="113732"><span class="nick" style="color:#2e2a4a"><a href="#113732" label="[11:37:32]">&lt;fossy&gt;</a></span><span class="message">I am a C programmer and I have a &quot;meh&quot; approach to pointer arithmatic</span></div><div class="line" id="113738"><span class="nick" style="color:#2e2a4a"><a href="#113738" label="[11:37:38]">&lt;fossy&gt;</a></span><span class="message">it is useful in come cases</span></div><div class="line" id="113743"><span class="nick" style="color:#8dd3c7"><a href="#113743" label="[11:37:43]">&lt;OriansJ&gt;</a></span><span class="message">let someone else deal with what (*--(*p++)**) means</span></div><div class="line" id="113746"><span class="nick" style="color:#2e2a4a"><a href="#113746" label="[11:37:46]">&lt;fossy&gt;</a></span><span class="message">but imo is overused</span></div><div class="line" id="113755"><span class="nick" style="color:#234e69"><a href="#113755" label="[11:37:55]">&lt;xentrac&gt;</a></span><span class="message">that's UB</span></div><div class="line" id="113812"><span class="nick" style="color:#234e69"><a href="#113812" label="[11:38:12]">&lt;xentrac&gt;</a></span><span class="message">well, the ** on the end is a syntax error</span></div><div class="line" id="113816"><span class="nick" style="color:#234e69"><a href="#113816" label="[11:38:16]">&lt;xentrac&gt;</a></span><span class="message">he pointed out that if you call a function and pass in a pointer to an array and an index</span></div><div class="line" id="113826"><span class="nick" style="color:#234e69"><a href="#113826" label="[11:38:26]">&lt;xentrac&gt;</a></span><span class="message">there's no typing</span></div><div class="line" id="113826"><span class="nick" style="color:#2e2a4a"><a href="#113826" label="[11:38:26]">&lt;fossy&gt;</a></span><span class="message">Ub?</span></div><div class="line" id="113831"><span class="nick" style="color:#8dd3c7"><a href="#113831" label="[11:38:31]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: not in that case</span></div><div class="line" id="113833"><span class="nick" style="color:#234e69"><a href="#113833" label="[11:38:33]">&lt;xentrac&gt;</a></span><span class="message">undefined behavior</span></div><div class="line" id="113921"><span class="nick" style="color:#8dd3c7"><a href="#113921" label="[11:39:21]">&lt;OriansJ&gt;</a></span><span class="message">fossy: the great sin of C; all of the really useful things in C are in the world of undefined behavior.</span></div><div class="line" id="113932"><span class="nick" style="color:#234e69"><a href="#113932" label="[11:39:32]">&lt;xentrac&gt;</a></span><span class="message">a pointer conveniently packs together the array and the index into it in such a way that you can't accidentally use the pointer on the wrong array</span></div><div class="line" id="114010"><span class="nick" style="color:#234e69"><a href="#114010" label="[11:40:10]">&lt;xentrac&gt;</a></span><span class="message">hmm, I guess you're right that *--(*p++) is not UB</span></div><div class="line" id="114023"><span class="nick" style="color:#234e69"><a href="#114023" label="[11:40:23]">&lt;xentrac&gt;</a></span><span class="message">I mean, unless p points to itself</span></div><div class="line" id="114104"><span class="nick" style="color:#8dd3c7"><a href="#114104" label="[11:41:04]">&lt;OriansJ&gt;</a></span><span class="message">still defined then, but just pointless</span></div><div class="line" id="114140"><span class="nick" style="color:#234e69"><a href="#114140" label="[11:41:40]">&lt;xentrac&gt;</a></span><span class="message">well, you might want to do what that code does, but that code is a gratuitously unreadable way of doing it</span></div><div class="line" id="114219"><span class="nick" style="color:#8dd3c7"><a href="#114219" label="[11:42:19]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: welcome to the world of &quot;Enterprise Grade Programming tm&quot;</span></div><div class="line" id="114232"><span class="nick" style="color:#234e69"><a href="#114232" label="[11:42:32]">&lt;xentrac&gt;</a></span><span class="message">you might, for example, be iterating over an array of stacks and popping an item from each stack</span></div><div class="line" id="114401"><span class="nick" style="color:#8dd3c7"><a href="#114401" label="[11:44:01]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: a proper struct type for the stack would be a better idea</span></div><div class="line" id="114433"><span class="nick" style="color:#234e69"><a href="#114433" label="[11:44:33]">&lt;xentrac&gt;</a></span><span class="message">the other thing that's nice about pointer arithmetic is that it means that any function that is written to operate on an array that's passed in can also automatically operate on any subrange of such an array</span></div><div class="line" id="114437"><span class="nick" style="color:#8dd3c7"><a href="#114437" label="[11:44:37]">&lt;OriansJ&gt;</a></span><span class="message">a = stack-&gt;contents[stack-&gt;index]; sort of thing</span></div><div class="line" id="114506"><span class="nick" style="color:#234e69"><a href="#114506" label="[11:45:06]">&lt;xentrac&gt;</a></span><span class="message">so I think Pike is correct that there are significant correctness and generality benefits to C's pointer arithmetic</span></div><div class="line" id="114521"><span class="nick" style="color:#234e69"><a href="#114521" label="[11:45:21]">&lt;xentrac&gt;</a></span><span class="message">unsurprisingly Golang has an improved version of all this with its &quot;slices&quot;</span></div><div class="line" id="114547"><span class="nick" style="color:#8dd3c7"><a href="#114547" label="[11:45:47]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: I am not saying it *CAN'T* be useful; I am saying more often than not people are not using it properly</span></div><div class="line" id="114636"><span class="nick" style="color:#234e69"><a href="#114636" label="[11:46:36]">&lt;xentrac&gt;</a></span><span class="message">yeah, that's true, and the struct type is probably better in most contexts too</span></div><div class="line" id="114637"><span class="nick" style="color:#8dd3c7"><a href="#114637" label="[11:46:37]">&lt;OriansJ&gt;</a></span><span class="message">in mes-m2 there is only a single place where there is pointer arithmetic</span></div><div class="line" id="114723"><span class="nick" style="color:#234e69"><a href="#114723" label="[11:47:23]">&lt;xentrac&gt;</a></span><span class="message">it's always optional; Pike's point was just that there are ways that it's a less bug-prone alternative</span></div><div class="line" id="114734"><span class="nick" style="color:#234e69"><a href="#114734" label="[11:47:34]">&lt;xentrac&gt;</a></span><span class="message">well, and more general</span></div><div class="line" id="114820"><span class="nick" style="color:#8dd3c7"><a href="#114820" label="[11:48:20]">&lt;OriansJ&gt;</a></span><span class="message">in mes_cell.c: i = i - CELL_SIZE; (because we are garbage collecting a massive array of everything)</span></div><div class="line" id="114851"><span class="nick" style="color:#234e69"><a href="#114851" label="[11:48:51]">&lt;xentrac&gt;</a></span><span class="message">you called a pointer &quot;i&quot;?</span></div><div class="line" id="114858"><span class="nick" style="color:#8dd3c7"><a href="#114858" label="[11:48:58]">&lt;OriansJ&gt;</a></span><span class="message">yep</span></div><div class="line" id="114932"><span class="nick" style="color:#234e69"><a href="#114932" label="[11:49:32]">&lt;xentrac&gt;</a></span><span class="message">haha</span></div><div class="line" id="114939"><span class="nick" style="color:#8dd3c7"><a href="#114939" label="[11:49:39]">&lt;OriansJ&gt;</a></span><span class="message">I'm a monster ;-p</span></div><div class="line" id="115101"><span class="nick" style="color:#234e69"><a href="#115101" label="[11:51:01]">&lt;xentrac&gt;</a></span><span class="message">certainly you are correct that most C code is not very good, and pointer arithmetic is an attractive nuisance</span></div><div class="line" id="115120"><span class="nick" style="color:#234e69"><a href="#115120" label="[11:51:20]">&lt;xentrac&gt;</a></span><span class="message">especially with the astonishing number of things that are UB</span></div><div class="line" id="115307"><span class="nick" style="color:#8dd3c7"><a href="#115307" label="[11:53:07]">&lt;OriansJ&gt;</a></span><span class="message">pointer arithmetic is where I find treasures like **********************************p+++++++++++++++++++++++++++++++++++++++++</span></div><div class="line" id="115316"><span class="nick" style="color:#8dd3c7"><a href="#115316" label="[11:53:16]">&lt;OriansJ&gt;</a></span><span class="message">in production code</span></div><div class="line" id="115627"><span class="nick" style="color:#234e69"><a href="#115627" label="[11:56:27]">&lt;xentrac&gt;</a></span><span class="message">that's not legal; p++ isn't an lvalue</span></div><div class="line" id="115650"><span class="nick" style="color:#234e69"><a href="#115650" label="[11:56:50]">&lt;xentrac&gt;</a></span><span class="message">neither GCC nor Visual C++ will compile that</span></div><div class="line" id="115702"><span class="nick" style="color:#234e69"><a href="#115702" label="[11:57:02]">&lt;xentrac&gt;</a></span><span class="message">so what is this productioncode built with?</span></div><div class="line" id="115733"><span class="nick" style="color:#8dd3c7"><a href="#115733" label="[11:57:33]">&lt;OriansJ&gt;</a></span><span class="message">that would be HP's C compiler for HP-UX</span></div><div class="line" id="115936"><span class="nick" style="color:#8dd3c7"><a href="#115936" label="[11:59:36]">&lt;OriansJ&gt;</a></span><span class="message">siraben: the clang error is because it doesn't like .h files</span></div><div class="line" id="115954"><span class="nick" style="color:#8dd3c7"><a href="#115954" label="[11:59:54]">&lt;OriansJ&gt;</a></span><span class="message">GCC just ignores them</span></div><div class="line" id="120007"><span class="nick" style="color:#8dd3c7"><a href="#120007" label="[12:00:07]">&lt;OriansJ&gt;</a></span><span class="message">so to build M2-Planet with clang: clang -D_GNU_SOURCE -O0 -std=c99 -ggdb functions/match.c functions/in_set.c functions/numerate_number.c functions/file_print.c functions/number_pack.c functions/string.c functions/require.c functions/fixup.c cc_reader.c cc_strings.c cc_types.c cc_core.c cc.c cc_globals.c -o bin/M2-Planet</span></div><div class="line" id="120023"><span class="nick" style="color:#234e69"><a href="#120023" label="[12:00:23]">&lt;xentrac&gt;</a></span><span class="message">I'm skeptical that HP-UX's C compiler will compile that either, but I admit I haven't actually tried it</span></div><div class="line" id="120104"><span class="nick" style="color:#8dd3c7"><a href="#120104" label="[12:01:04]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: its tokenizer is SOOO borked, one has to do funky things to keep names working</span></div><div class="line" id="120142"><span class="nick" style="color:#8dd3c7"><a href="#120142" label="[12:01:42]">&lt;OriansJ&gt;</a></span><span class="message">like not start your variable name with O (not 0 but upper case o)</span></div><div class="line" id="120213"><span class="nick" style="color:#234e69"><a href="#120213" label="[12:02:13]">&lt;xentrac&gt;</a></span><span class="message">heh, that's cool</span></div><div class="line" id="120227"><span class="nick" style="color:#8dd3c7"><a href="#120227" label="[12:02:27]">&lt;OriansJ&gt;</a></span><span class="message">porting that piece of shit to GCC compatible was a *BITCH*</span></div><div class="line" id="120305"><span class="nick" style="color:#234e69"><a href="#120305" label="[12:03:05]">&lt;xentrac&gt;</a></span><span class="message">in colorforth chuck moore used a character code that used the same codepoints for 0 and O, and l and 1</span></div><div class="line" id="120312"><span class="nick" style="color:#234e69"><a href="#120312" label="[12:03:12]">&lt;xentrac&gt;</a></span><span class="message">like a budget typewriter</span></div><div class="line" id="120334"><span class="nick" style="color:#234e69"><a href="#120334" label="[12:03:34]">&lt;xentrac&gt;</a></span><span class="message">I thought that was a cute idea</span></div><div class="line" id="120446"><span class="nick" style="color:#8dd3c7"><a href="#120446" label="[12:04:46]">&lt;OriansJ&gt;</a></span><span class="message">and get a compile error because you renamed onPoweron to On_power_on</span></div><div class="line" id="120529"><span class="nick" style="color:#8dd3c7"><a href="#120529" label="[12:05:29]">&lt;OriansJ&gt;</a></span><span class="message">fuck that noise; numbers are numbers and letters should just be letters</span></div><div class="line" id="120631"><span class="nick" style="color:#234e69"><a href="#120631" label="[12:06:31]">&lt;xentrac&gt;</a></span><span class="message">heh</span></div><div class="line" id="120649"><span class="nick" style="color:#8dd3c7"><a href="#120649" label="[12:06:49]">&lt;OriansJ&gt;</a></span><span class="message">I don't want to worry about a function named Oxload being treated like the numeric constant 0x10AD</span></div><div class="line" id="120725"><span class="nick" style="color:#234e69"><a href="#120725" label="[12:07:25]">&lt;xentrac&gt;</a></span><span class="message">colorforth uses a different way to distinguish numeric constants from function names</span></div><div class="line" id="120732"><span class="nick" style="color:#234e69"><a href="#120732" label="[12:07:32]">&lt;xentrac&gt;</a></span><span class="message">they are different colors</span></div><div class="line" id="120811"><span class="nick" style="color:#8dd3c7"><a href="#120811" label="[12:08:11]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: braille terminals give not shits about that</span></div><div class="line" id="120824"><span class="nick" style="color:#234e69"><a href="#120824" label="[12:08:24]">&lt;xentrac&gt;</a></span><span class="message">chuck moore wasn't using a braille terminal</span></div><div class="line" id="120841"><span class="nick" style="color:#8dd3c7"><a href="#120841" label="[12:08:41]">&lt;OriansJ&gt;</a></span><span class="message">indeed</span></div><div class="line" id="120844"><span class="nick" style="color:#234e69"><a href="#120844" label="[12:08:44]">&lt;xentrac&gt;</a></span><span class="message">although he was getting a bit blind in his old age so he was using a pretty huge font</span></div><div class="line" id="120856"><span class="nick" style="color:#234e69"><a href="#120856" label="[12:08:56]">&lt;xentrac&gt;</a></span><span class="message">actually function names can be either of two different colors</span></div><div class="line" id="120912"><span class="nick" style="color:#8dd3c7"><a href="#120912" label="[12:09:12]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: guess he should have invested in braille support earlier on.</span></div><div class="line" id="120943"><span class="nick" style="color:#234e69"><a href="#120943" label="[12:09:43]">&lt;xentrac&gt;</a></span><span class="message">investing in anything earlier on is the antithesis of everything he believes in</span></div><div class="line" id="121008"><span class="nick" style="color:#8dd3c7"><a href="#121008" label="[12:10:08]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: so no retirement saving either? how sad</span></div><div class="line" id="121047"><span class="nick" style="color:#8dd3c7"><a href="#121047" label="[12:10:47]">&lt;OriansJ&gt;</a></span><span class="message">50+ years of interest can really make a difference to someone's retirement.</span></div><div class="line" id="121048"><span class="nick" style="color:#234e69"><a href="#121048" label="[12:10:48]">&lt;xentrac&gt;</a></span><span class="message">the patent royalties from intel and amd have enabled him to start up a chip company in his retirement</span></div><div class="line" id="121123"><span class="nick" style="color:#8dd3c7"><a href="#121123" label="[12:11:23]">&lt;OriansJ&gt;</a></span><span class="message">good for him</span></div><div class="line" id="121200"><span class="nick" style="color:#8dd3c7"><a href="#121200" label="[12:12:00]">&lt;OriansJ&gt;</a></span><span class="message">but I am serious on the investing early bit; retirement is surprising something that people usually never plan on.</span></div><div class="line" id="121428"><span class="nick" style="color:#8dd3c7"><a href="#121428" label="[12:14:28]">&lt;OriansJ&gt;</a></span><span class="message">but then again Social Security benefits were created because of that very common behavior.</span></div><div class="line" id="121446"><span class="nick" style="color:#8dd3c7"><a href="#121446" label="[12:14:46]">&lt;OriansJ&gt;</a></span><span class="message">Too many old people dying in the streets from starvation.</span></div><div class="line" id="121502"><span class="nick" style="color:#234e69"><a href="#121502" label="[12:15:02]">&lt;xentrac&gt;</a></span><span class="message">well, as you also experienced, betrayal can also strip you of your savings</span></div><div class="line" id="121529"><span class="nick" style="color:#8dd3c7"><a href="#121529" label="[12:15:29]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: better to learn it young than old</span></div><div class="line" id="121537"><span class="nick" style="color:#234e69"><a href="#121537" label="[12:15:37]">&lt;xentrac&gt;</a></span><span class="message">like you, Chuck was betrayed by his business associates, in his case a man named Leckrone.  and, yes, old</span></div><div class="line" id="121606"><span class="nick" style="color:#234e69"><a href="#121606" label="[12:16:06]">&lt;xentrac&gt;</a></span><span class="message">interest is not a good bet</span></div><div class="line" id="121637"><span class="nick" style="color:#8dd3c7"><a href="#121637" label="[12:16:37]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: interest is only a good bet if you can average better than inflation</span></div><div class="line" id="121644"><span class="nick" style="color:#234e69"><a href="#121644" label="[12:16:44]">&lt;xentrac&gt;</a></span><span class="message">right.  it's difficult to get interest rates that keep up with inflation</span></div><div class="line" id="121708"><span class="nick" style="color:#234e69"><a href="#121708" label="[12:17:08]">&lt;xentrac&gt;</a></span><span class="message">that is improbable with a fiat currency</span></div><div class="line" id="121719"><span class="nick" style="color:#8dd3c7"><a href="#121719" label="[12:17:19]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: well no plan for the future can predict all possible outcomes</span></div><div class="line" id="121824"><span class="nick" style="color:#8dd3c7"><a href="#121824" label="[12:18:24]">&lt;OriansJ&gt;</a></span><span class="message">I could die at any minute because a block of iron the size of a chevy block falls from the sky and lands on my head. Either as a meteor or as a jumbo jet</span></div><div class="line" id="122430"><span class="nick" style="color:#234e69"><a href="#122430" label="[12:24:30]">&lt;xentrac&gt;</a></span><span class="message">I think Chuck probably thought of using a Braille terminal as meriting a similar degree of consideration</span></div><div class="line" id="122616"><span class="nick" style="color:#8dd3c7"><a href="#122616" label="[12:26:16]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: fair</span></div><div class="line" id="122716"><span class="nick" style="color:#8dd3c7"><a href="#122716" label="[12:27:16]">&lt;OriansJ&gt;</a></span><span class="message">I like to think: plan for people with disabilities who might use your software; because it might end up being you.</span></div><div class="line" id="122801"><span class="nick" style="color:#234e69"><a href="#122801" label="[12:28:01]">&lt;xentrac&gt;</a></span><span class="message">hopefully, yeah</span></div><div class="line" id="123028"><span class="nick" style="color:#8dd3c7"><a href="#123028" label="[12:30:28]">&lt;OriansJ&gt;</a></span><span class="message">the problem is some people only care about *PRETTY* and *LATEST* and *COOL* and don't bother to even write man pages</span></div><div class="line" id="123123"><span class="nick" style="color:#234e69"><a href="#123123" label="[12:31:23]">&lt;xentrac&gt;</a></span><span class="message">the kids these days, what's got into them?</span></div><div class="line" id="123143"><span class="nick" style="color:#8dd3c7"><a href="#123143" label="[12:31:43]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: our bad behavior; they learned by watching us.</span></div><div class="line" id="123153"><span class="nick" style="color:#234e69"><a href="#123153" label="[12:31:53]">&lt;xentrac&gt;</a></span><span class="message">haha</span></div><div class="line" id="123224"><span class="nick" style="color:#234e69"><a href="#123224" label="[12:32:24]">&lt;xentrac&gt;</a></span><span class="message">I think you're trying to universalize a standard of behavior that shouldn't be universalized</span></div><div class="line" id="123239"><span class="nick" style="color:#8dd3c7"><a href="#123239" label="[12:32:39]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: always a possiblity</span></div><div class="line" id="123257"><span class="nick" style="color:#8dd3c7"><a href="#123257" label="[12:32:57]">&lt;OriansJ&gt;</a></span><span class="message">I hope to be wrong no more than 90% of the time.</span></div><div class="line" id="123300"><span class="nick" style="color:#234e69"><a href="#123300" label="[12:33:00]">&lt;xentrac&gt;</a></span><span class="message">if you're writing a novel, it's likely a good idea to write an outline and multiple drafts</span></div><div class="line" id="123312"><span class="nick" style="color:#234e69"><a href="#123312" label="[12:33:12]">&lt;xentrac&gt;</a></span><span class="message">probably not if you're writing a shopping list</span></div><div class="line" id="123329"><span class="nick" style="color:#8dd3c7"><a href="#123329" label="[12:33:29]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: I am a huge fan of emacs org-mode</span></div><div class="line" id="123344"><span class="nick" style="color:#8dd3c7"><a href="#123344" label="[12:33:44]">&lt;OriansJ&gt;</a></span><span class="message">works great for both of those</span></div><div class="line" id="123356"><span class="nick" style="color:#8dd3c7"><a href="#123356" label="[12:33:56]">&lt;OriansJ&gt;</a></span><span class="message">toss in magit for your novel</span></div><div class="line" id="123407"><span class="nick" style="color:#234e69"><a href="#123407" label="[12:34:07]">&lt;xentrac&gt;</a></span><span class="message">I don't have a machine that lets me take emacs to the supermarket</span></div><div class="line" id="123455"><span class="nick" style="color:#8dd3c7"><a href="#123455" label="[12:34:55]">&lt;OriansJ&gt;</a></span><span class="message">print the list first before going to the store</span></div><div class="line" id="123502"><span class="nick" style="color:#234e69"><a href="#123502" label="[12:35:02]">&lt;xentrac&gt;</a></span><span class="message">I don't have a printer either</span></div><div class="line" id="123520"><span class="nick" style="color:#234e69"><a href="#123520" label="[12:35:20]">&lt;xentrac&gt;</a></span><span class="message">if you're writing an entry to the IOCCC you probably don't need to write man pages for it</span></div><div class="line" id="123525"><span class="nick" style="color:#8dd3c7"><a href="#123525" label="[12:35:25]">&lt;OriansJ&gt;</a></span><span class="message">fair, printers are the devil</span></div><div class="line" id="123550"><span class="nick" style="color:#8dd3c7"><a href="#123550" label="[12:35:50]">&lt;OriansJ&gt;</a></span><span class="message">heck they caused RMS to start the FSF</span></div><div class="line" id="123554"><span class="nick" style="color:#234e69"><a href="#123554" label="[12:35:54]">&lt;xentrac&gt;</a></span><span class="message">haha</span></div><div class="line" id="123600"><span class="nick" style="color:#6c3d55"><a href="#123600" label="[12:36:00]">&lt;rain1&gt;</a></span><span class="message">lol</span></div><div class="line" id="123630"><span class="nick" style="color:#234e69"><a href="#123630" label="[12:36:30]">&lt;xentrac&gt;</a></span><span class="message">I wrote this program yesterday: <a rel="nofollow" href="http://canonical.org/~kragen/sw/dev3/keratines.sendat">http://canonical.org/~kragen/sw/dev3/keratines.sendat</a> </span></div><div class="line" id="123643"><span class="nick" style="color:#234e69"><a href="#123643" label="[12:36:43]">&lt;xentrac&gt;</a></span><span class="message">the interpreter is <a rel="nofollow" href="http://canonical.org/~kragen/sw/dev3/sendat.py">http://canonical.org/~kragen/sw/dev3/sendat.py</a> </span></div><div class="line" id="123652"><span class="nick" style="color:#234e69"><a href="#123652" label="[12:36:52]">&lt;xentrac&gt;</a></span><span class="message">I uh</span></div><div class="line" id="123703"><span class="nick" style="color:#234e69"><a href="#123703" label="[12:37:03]">&lt;xentrac&gt;</a></span><span class="message">I don't think keratines.sendat would be improved by having a man page</span></div><div class="line" id="123744"><span class="nick" style="color:#234e69"><a href="#123744" label="[12:37:44]">&lt;xentrac&gt;</a></span><span class="message">ugh, mojibake</span></div><div class="line" id="123818"><span class="nick" style="color:#8dd3c7"><a href="#123818" label="[12:38:18]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: nice</span></div><div class="line" id="123851"><span class="nick" style="color:#8dd3c7"><a href="#123851" label="[12:38:51]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: fair but the point was more about the software you release for others to use</span></div><div class="line" id="123901"><span class="nick" style="color:#234e69"><a href="#123901" label="[12:39:01]">&lt;xentrac&gt;</a></span><span class="message">I think I just did that by posting the link here</span></div><div class="line" id="124000"><span class="nick" style="color:#234e69"><a href="#124000" label="[12:40:00]">&lt;xentrac&gt;</a></span><span class="message">anyway, so I think in a more general sense there are only a small number of things that are inherently good or evil</span></div><div class="line" id="124016"><span class="nick" style="color:#234e69"><a href="#124016" label="[12:40:16]">&lt;xentrac&gt;</a></span><span class="message">everything else may be good or evil in an instrumental sense</span></div><div class="line" id="124024"><span class="nick" style="color:#234e69"><a href="#124024" label="[12:40:24]">&lt;xentrac&gt;</a></span><span class="message">man pages belong to the latter category</span></div><div class="line" id="124035"><span class="nick" style="color:#8dd3c7"><a href="#124035" label="[12:40:35]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: or perhaps nothing in inherently good or evil but the context that makes it so.</span></div><div class="line" id="124041"><span class="nick" style="color:#234e69"><a href="#124041" label="[12:40:41]">&lt;xentrac&gt;</a></span><span class="message">as does writing multiple drafts</span></div><div class="line" id="130159"><span class="nick" style="color:#8dd3c7"><a href="#130159" label="[13:01:59]">&lt;OriansJ&gt;</a></span><span class="message">fail2ban + ssh/sftp having different behavior in regards to -l 120 = annoying</span></div><div class="line" id="130512"><span class="nick" style="color:#8dd3c7"><a href="#130512" label="[13:05:12]">&lt;OriansJ&gt;</a></span><span class="message">(sftp it means rate limit, ssh it means login name)</span></div><div class="line" id="130614"><span class="nick" style="color:#8dd3c7"><a href="#130614" label="[13:06:14]">&lt;OriansJ&gt;</a></span><span class="message">thank god for terminal servers but that is annoying.</span></div><div class="line" id="133636"><span class="nick" style="color:#234e69"><a href="#133636" label="[13:36:36]">&lt;xentrac&gt;</a></span><span class="message">yeah, Unix command-line flags are pretty inconsistent, but it's less forgivable when it's ssh vs. sftp ;)</span></div><div class="line" id="144341"><span class="nick" style="color:#80b1d3"><a href="#144341" label="[14:43:41]">&lt;siraben&gt;</a></span><span class="message">OriansJ: are you an emacs user?</span></div><div class="line" id="144355"><span class="nick" style="color:#80b1d3"><a href="#144355" label="[14:43:55]">&lt;siraben&gt;</a></span><span class="message">I too use Emacs, magit is OP</span></div><div class="line" id="225310"><span class="nick" style="color:#2e2a4a"><a href="#225310" label="[22:53:10]">&lt;fossy&gt;</a></span><span class="message">OriansJ: which commit should i be looking to revert relating to kaem</span></div><div class="line" id="225315"><span class="nick" style="color:#2e2a4a"><a href="#225315" label="[22:53:15]">&lt;fossy&gt;</a></span><span class="message">is it this <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/commit/8296db068336040ee5887e3870635e5b3f6553ea">https://github.com/oriansj/mescc-tools/commit/8296db068336040ee5887e3870635e5b3f6553ea</a> </span></div><div class="line" id="225323"><span class="nick" style="color:#2e2a4a"><a href="#225323" label="[22:53:23]">&lt;fossy&gt;</a></span><span class="message">and if so then would you want me to drop the kaem branch</span></div><div class="line" id="225333"><span class="nick" style="color:#2e2a4a"><a href="#225333" label="[22:53:33]">&lt;fossy&gt;</a></span><span class="message">i can't remember exactly why that commit was made.</span></div><div class="line" id="225643"><span class="nick" style="color:#2e2a4a"><a href="#225643" label="[22:56:43]">&lt;fossy&gt;</a></span><span class="message">huh cc_x86 just segfaulted</span></div><div class="line" id="230104"><span class="nick" style="color:#2e2a4a"><a href="#230104" label="[23:01:04]">&lt;fossy&gt;</a></span><span class="message">so i hadn't init'd the submodules</span></div><div class="line" id="230204"><span class="nick" style="color:#2e2a4a"><a href="#230204" label="[23:02:04]">&lt;fossy&gt;</a></span><span class="message">which caused  +&gt; ./catm hold ../M2-Planet/test/common_x86/functions/file.c ../M2-Planet/test/common_x86/functions/malloc.c ../M2-Planet/functions/calloc.c ../M2-Planet/test/common_x86/functions/exit.c ../M2-Planet/functions/match.c ../M2-Planet/functions/in_set.c ../M2-Planet/functions/numerate_number.c ../M2-Planet/functions/file_print.c ../M2-Planet/functions/number_pack.c</span></div><div class="line" id="230206"><span class="nick" style="color:#2e2a4a"><a href="#230206" label="[23:02:06]">&lt;fossy&gt;</a></span><span class="message">../M2-Planet/functions/string.c ../M2-Planet/functions/require.c ../M2-Planet/functions/fixup.c ../M2-Planet/cc.h ../M2-Planet/cc_globals.c ../M2-Planet/cc_reader.c ../M2-Planet/cc_strings.c ../M2-Planet/cc_types.c ../M2-Planet/cc_core.c ../M2-Planet/cc.c to produce a fed up hold file which cc_x86 segfaulted on?</span></div><div class="line" id="231753"><span class="nick" style="color:#8dd3c7"><a href="#231753" label="[23:17:53]">&lt;OriansJ&gt;</a></span><span class="message">siraben: yes and a guix user too</span></div><div class="line" id="232054"><span class="nick" style="color:#8dd3c7"><a href="#232054" label="[23:20:54]">&lt;OriansJ&gt;</a></span><span class="message">fossy: the reason why the commit was done; was because I wanted to get a working mescc-tools-seed release and kaem kept segfaulting for reasons I could not figure out at the time. So I reverted to the older known good kaem and used that.</span></div><div class="line" id="232147"><span class="nick" style="color:#8dd3c7"><a href="#232147" label="[23:21:47]">&lt;OriansJ&gt;</a></span><span class="message">make sure to run your new kaem through M2-Planet to catch the most common reason for those segfaults (declaring variables inside of loops)</span></div><div class="line" id="232324"><span class="nick" style="color:#8dd3c7"><a href="#232324" label="[23:23:24]">&lt;OriansJ&gt;</a></span><span class="message">or if it makes it easier for you; just do the revert in mescc-tools and I can handle the mescc-tools-seed upgrade</span></div><div class="line" id="232455"><span class="nick" style="color:#2e2a4a"><a href="#232455" label="[23:24:55]">&lt;fossy&gt;</a></span><span class="message">OriansJ: ah ok, so i will attempt to make it work properly in mescc-tools-seed, and if that is successful, subsequently push to mescc-tools master and PR to mescc-tools-seed, i guess?</span></div><div class="line" id="232630"><span class="nick" style="color:#8dd3c7"><a href="#232630" label="[23:26:30]">&lt;OriansJ&gt;</a></span><span class="message">if you want to do all of that work, go for it.</span></div><div class="line" id="232715"><span class="nick" style="color:#8dd3c7"><a href="#232715" label="[23:27:15]">&lt;OriansJ&gt;</a></span><span class="message">but it'll probably be easier just to get mescc-tools master back to having the more advanced kaem; then we can hammer out the mescc-tools-seed problems together.</span></div><br /></div></body></html>