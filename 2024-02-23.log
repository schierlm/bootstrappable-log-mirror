<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2024-02-23.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="004934"><span class="nick" style="color:#389600"><a href="#004934" label="[00:49:34]">&lt;oriansj&gt;</a></span><span class="message">one can build all of Rust on an x200 with 8GB of RAM (and about 10GB of swap); it just takes about a week</span></div><div class="line" id="032541"><span class="nick" style="color:#8dd3c7"><a href="#032541" label="[03:25:41]">&lt;GoogulatorMobile&gt;</a></span><span class="message">oriansj: was this you posting a long time ago? <a rel="nofollow" href="https://forums.wz2100.net/viewtopic.php?t=9652">https://forums.wz2100.net/viewtopic.php?t=9652</a> </span></div><div class="line" id="034355"><span class="nick" style="color:#389600"><a href="#034355" label="[03:43:55]">&lt;oriansj&gt;</a></span><span class="message">Googulator: nope</span></div><div class="line" id="034458"><span class="nick" style="color:#389600"><a href="#034458" label="[03:44:58]">&lt;oriansj&gt;</a></span><span class="message">and I added support for return 1_000_000; to be valid in M2libc's parsing of integer strings and M2-Planet gains it for free.</span></div><div class="line" id="035048"><span class="nick" style="color:#389600"><a href="#035048" label="[03:50:48]">&lt;oriansj&gt;</a></span><span class="message">and updated M2-Planet's tests to fix the breakage of the M2libc/sys/utsname.h change</span></div><div class="line" id="035401"><span class="nick" style="color:#389600"><a href="#035401" label="[03:54:01]">&lt;oriansj&gt;</a></span><span class="message">but I do wish they posted a copy of their work online for audit and verification.</span></div><div class="line" id="035725"><span class="nick" style="color:#389600"><a href="#035725" label="[03:57:25]">&lt;oriansj&gt;</a></span><span class="message">or constructions such as 0xCD_FA_AA_B7 or 0b11110000_00001111_11001100_00110011</span></div><div class="line" id="035834"><span class="nick" style="color:#389600"><a href="#035834" label="[03:58:34]">&lt;oriansj&gt;</a></span><span class="message">(I got the idea for how to do it from the crowbar programming language)</span></div><div class="line" id="042417"><span class="nick" style="color:#389600"><a href="#042417" label="[04:24:17]">&lt;oriansj&gt;</a></span><span class="message">we can't use it in M2-Planet or mescc-tools (due to it not existing in the hand written hex2, M0 or cc_*) but it can be used in anything after that if one wants to break out the bytes for clarity or make things look nicer.</span></div><div class="line" id="110945"><span class="nick" style="color:#2e2a4a"><a href="#110945" label="[11:09:45]">&lt;Googulator&gt;</a></span><span class="message">oriansj: &quot;one can build all of Rust on an x200 with 8GB of RAM (and about 10GB of swap); it just takes about a week&quot; - ouch, that sounds scary</span></div><div class="line" id="111033"><span class="nick" style="color:#2e2a4a"><a href="#111033" label="[11:10:33]">&lt;Googulator&gt;</a></span><span class="message">I wonder what systems can even do more than 8GB without using components newer than 15 years, if any</span></div><div class="line" id="112212"><span class="nick" style="color:#2e2a4a"><a href="#112212" label="[11:22:12]">&lt;Googulator&gt;</a></span><span class="message">LGA-1366 apparently can go up to 24GB (thanks to its 3-channel memory controller), and it just barely squeaks under the age limit</span></div><div class="line" id="125726"><span class="nick" style="color:#2e2a4a"><a href="#125726" label="[12:57:26]">&lt;Googulator&gt;</a></span><span class="message">Mikaku: I'll check out your patch, but I still think my solution is better, since it actually clears up confusion related to whether the end address is exclusive or inclusive.</span></div><div class="line" id="125827"><span class="nick" style="color:#2e2a4a"><a href="#125827" label="[12:58:27]">&lt;Googulator&gt;</a></span><span class="message">Also, my PR fixes the extra reservation which, as I understand, is only necessary within Fiwix, while the kexec guest (Linux in this case) should be free to use it.</span></div><div class="line" id="130351"><span class="nick" style="color:#6b8072"><a href="#130351" label="[13:03:51]">&lt;Mikaku&gt;</a></span><span class="message">Googulator: what do you mean by exclusive or inclusive end address?</span></div><div class="line" id="130431"><span class="nick" style="color:#6b8072"><a href="#130431" label="[13:04:31]">&lt;Mikaku&gt;</a></span><span class="message">regarding the extra reservation address range, you're right, it shouldn't be passed to the kexec guest</span></div><div class="line" id="130451"><span class="nick" style="color:#2e2a4a"><a href="#130451" label="[13:04:51]">&lt;Googulator&gt;</a></span><span class="message">There are 3 conventions for representing memory ranges:</span></div><div class="line" id="130458"><span class="nick" style="color:#2e2a4a"><a href="#130458" label="[13:04:58]">&lt;Googulator&gt;</a></span><span class="message">- start address, length</span></div><div class="line" id="130515"><span class="nick" style="color:#2e2a4a"><a href="#130515" label="[13:05:15]">&lt;Googulator&gt;</a></span><span class="message">- start address, address of last byte in the range (aka &quot;inclusive end address&quot;)</span></div><div class="line" id="130538"><span class="nick" style="color:#2e2a4a"><a href="#130538" label="[13:05:38]">&lt;Googulator&gt;</a></span><span class="message">- start address, address of first byte outside the range (aka &quot;exclusive end address&quot;)</span></div><div class="line" id="130741"><span class="nick" style="color:#2e2a4a"><a href="#130741" label="[13:07:41]">&lt;Googulator&gt;</a></span><span class="message">E.g. 1 gibibyte of memory starting at 0x100000 is [0x100000, 0x10000000] using the start-length convention, [0x100000, 0x10100000] using the exclusive end address convention, and [0x100000, 0x100fffff] using the inclusive end address convention</span></div><div class="line" id="130813"><span class="nick" style="color:#2e2a4a"><a href="#130813" label="[13:08:13]">&lt;Googulator&gt;</a></span><span class="message">The BIOS E820 interface uses start-length, while both Fiwix and Linux log the memory map using the inclusive address scheme</span></div><div class="line" id="130846"><span class="nick" style="color:#2e2a4a"><a href="#130846" label="[13:08:46]">&lt;Googulator&gt;</a></span><span class="message">However, actual uses of the memory map in Fiwix seem to use a mixture of inclusive and exclusive convention</span></div><div class="line" id="130854"><span class="nick" style="color:#2e2a4a"><a href="#130854" label="[13:08:54]">&lt;Googulator&gt;</a></span><span class="message">risking off-by-1 errors</span></div><div class="line" id="130918"><span class="nick" style="color:#2e2a4a"><a href="#130918" label="[13:09:18]">&lt;Googulator&gt;</a></span><span class="message">My PR makes everything consistently use inclusive end addresses</span></div><div class="line" id="131115"><span class="nick" style="color:#2e2a4a"><a href="#131115" label="[13:11:15]">&lt;Googulator&gt;</a></span><span class="message">is_addr_in_bios_map (the only function in Fiwix that reads the memory map for any purpose other than Fiwix) uses theÂ  &lt; operator to compare an address to the upper limit, which is correct if the upper limit is an exclusive end address</span></div><div class="line" id="131421"><span class="nick" style="color:#6b8072"><a href="#131421" label="[13:14:21]">&lt;Mikaku&gt;</a></span><span class="message">I see, well, with my patch the original address aren't touched and the inclusive addresses are only for printk(), internally they are exclusive address, so the use of the &lt; operator in comparison should be correct</span></div><div class="line" id="131504"><span class="nick" style="color:#6b8072"><a href="#131504" label="[13:15:04]">&lt;Mikaku&gt;</a></span><span class="message">this is the same line as mmap() does, except that the file /proc/self/maps uses the exclusive convention to be aligned with Linux</span></div><div class="line" id="131911"><span class="nick" style="color:#2e2a4a"><a href="#131911" label="[13:19:11]">&lt;Googulator&gt;</a></span><span class="message">Using exclusive everywhere (except for printing, to align with Linux) is also a good solution, just make sure it's indeed consistent</span></div><div class="line" id="132107"><span class="nick" style="color:#6b8072"><a href="#132107" label="[13:21:07]">&lt;Mikaku&gt;</a></span><span class="message">it wasn't as you discovered in the bios_mem_map[], but I believe my patch solves it without having to duplicate the same array</span></div><div class="line" id="132216"><span class="nick" style="color:#6b8072"><a href="#132216" label="[13:22:16]">&lt;Mikaku&gt;</a></span><span class="message">what my patch doesn't solves is to avoid to pass the extra reservation to the kexec guest</span></div><div class="line" id="132826"><span class="nick" style="color:#2e2a4a"><a href="#132826" label="[13:28:26]">&lt;Googulator&gt;</a></span><span class="message">yeah, it does look like it makes the scheme consistently exclusive</span></div><div class="line" id="132852"><span class="nick" style="color:#2e2a4a"><a href="#132852" label="[13:28:52]">&lt;Googulator&gt;</a></span><span class="message">As for the duplication, I think it is probably needed, although I chose some unfortunate names</span></div><div class="line" id="132925"><span class="nick" style="color:#2e2a4a"><a href="#132925" label="[13:29:25]">&lt;Googulator&gt;</a></span><span class="message">orig_bios_mem_map (the new one) should just be bios_mem_map, while bios_mem_map (the existing one) should be kernel_mem_map</span></div><div class="line" id="133054"><span class="nick" style="color:#2e2a4a"><a href="#133054" label="[13:30:54]">&lt;Googulator&gt;</a></span><span class="message">this is better in the future, because the kernel is free to additionally modify kernel_mem_map for its own needs (e.g. removing 4GiB+ addresses, reclaiming ACPI reservations, etc.), while bios_mem_map continues to accurately represent the BIOS's view of the memory map</span></div><div class="line" id="134109"><span class="nick" style="color:#6b8072"><a href="#134109" label="[13:41:09]">&lt;Mikaku&gt;</a></span><span class="message">Googulator: yes, bios_mem_map for the original and kernel_mem_map for the current one are much better names</span></div><div class="line" id="134127"><span class="nick" style="color:#389600"><a href="#134127" label="[13:41:27]">&lt;oriansj&gt;</a></span><span class="message">Googulator: well there are PAE server systems which had 64GB of RAM but those old Xeons were (and still are) massive power hogs</span></div><div class="line" id="134237"><span class="nick" style="color:#2e2a4a"><a href="#134237" label="[13:42:37]">&lt;Googulator&gt;</a></span><span class="message">PAE doesn't really matter, because by the time all that RAM is needed, we have a 64-bit kernel anyway</span></div><div class="line" id="134326"><span class="nick" style="color:#2e2a4a"><a href="#134326" label="[13:43:26]">&lt;Googulator&gt;</a></span><span class="message">LGA775 appears to max out at 16GB, although only 8GB is consistently supported on all mobos</span></div><div class="line" id="134352"><span class="nick" style="color:#2e2a4a"><a href="#134352" label="[13:43:52]">&lt;Googulator&gt;</a></span><span class="message">LGA1366 has been shown to max out at 48GB for both consumer and server parts</span></div><div class="line" id="134431"><span class="nick" style="color:#2e2a4a"><a href="#134431" label="[13:44:31]">&lt;Googulator&gt;</a></span><span class="message">now the question is, can we find memory modules manufactured before February 2009 in that size</span></div><div class="line" id="134502"><span class="nick" style="color:#2e2a4a"><a href="#134502" label="[13:45:02]">&lt;Googulator&gt;</a></span><span class="message">(although I guess newer memory isn't as dangerous as a too new motherboard would be)</span></div><div class="line" id="135618"><span class="nick" style="color:#389600"><a href="#135618" label="[13:56:18]">&lt;oriansj&gt;</a></span><span class="message">Googulator: you want PPGA604</span></div><div class="line" id="135644"><span class="nick" style="color:#389600"><a href="#135644" label="[13:56:44]">&lt;oriansj&gt;</a></span><span class="message">as it supported 4 Memory channels</span></div><div class="line" id="135937"><span class="nick" style="color:#389600"><a href="#135937" label="[13:59:37]">&lt;oriansj&gt;</a></span><span class="message">it supported registered buffered DIMMs (which mean much higher capacity was possible)</span></div><div class="line" id="143723"><span class="nick" style="color:#389600"><a href="#143723" label="[14:37:23]">&lt;oriansj&gt;</a></span><span class="message">the only difference between bootstrapping rust with 1GB of RAM w/15GB of swap and 16GB of RAM w/o swap is just the speed; not the resulting checksums or if it can be done.</span></div><div class="line" id="144011"><span class="nick" style="color:#389600"><a href="#144011" label="[14:40:11]">&lt;oriansj&gt;</a></span><span class="message">and even if you have a 64GB RAM system, it'll still take 1-2 days to do the full rust toolchain with a E5-1620 0 @ 3.60GHz</span></div><div class="line" id="144326"><span class="nick" style="color:#389600"><a href="#144326" label="[14:43:26]">&lt;oriansj&gt;</a></span><span class="message">There are a boatload of rust bootstrap steps to get to the current version</span></div><div class="line" id="144333"><span class="nick" style="color:#2e2a4a"><a href="#144333" label="[14:43:33]">&lt;Googulator&gt;</a></span><span class="message">1-2 days is a lot more acceptable than multiple weeks</span></div><div class="line" id="144353"><span class="nick" style="color:#2e2a4a"><a href="#144353" label="[14:43:53]">&lt;Googulator&gt;</a></span><span class="message">does Gentoo Catalyst offer a way to override MAKEOPTS for a single package?</span></div><div class="line" id="144409"><span class="nick" style="color:#2e2a4a"><a href="#144409" label="[14:44:09]">&lt;Googulator&gt;</a></span><span class="message">(e.g. build the first Rust on 1 thread, everything else on 4)</span></div><div class="line" id="144416"><span class="nick" style="color:#389600"><a href="#144416" label="[14:44:16]">&lt;oriansj&gt;</a></span><span class="message">well a 10x performance difference between swapping and its all in RAM is actually surprisingly good.</span></div><div class="line" id="150001"><span class="nick" style="color:#80b1d3"><a href="#150001" label="[15:00:01]">&lt;sam_&gt;</a></span><span class="message">Googulator: yes, that can be done via package.env + env</span></div><div class="line" id="150041"><span class="nick" style="color:#2e2a4a"><a href="#150041" label="[15:00:41]">&lt;Googulator&gt;</a></span><span class="message">what's that?</span></div><div class="line" id="150054"><span class="nick" style="color:#80b1d3"><a href="#150054" label="[15:00:54]">&lt;sam_&gt;</a></span><span class="message">the way you do what you asked? :)</span></div><div class="line" id="150101"><span class="nick" style="color:#80b1d3"><a href="#150101" label="[15:01:01]">&lt;sam_&gt;</a></span><span class="message"> <a rel="nofollow" href="https://wiki.gentoo.org/wiki//etc/portage/package.env">https://wiki.gentoo.org/wiki//etc/portage/package.env</a> </span></div><div class="line" id="150122"><span class="nick" style="color:#2e2a4a"><a href="#150122" label="[15:01:22]">&lt;Googulator&gt;</a></span><span class="message">Google proved unhelpful</span></div><div class="line" id="150155"><span class="nick" style="color:#2e2a4a"><a href="#150155" label="[15:01:55]">&lt;Googulator&gt;</a></span><span class="message">also, how do I pass this into Catalyst?</span></div><div class="line" id="150245"><span class="nick" style="color:#80b1d3"><a href="#150245" label="[15:02:45]">&lt;sam_&gt;</a></span><span class="message">I guess copy what the existing stuff in releng.git does</span></div><div class="line" id="150249"><span class="nick" style="color:#80b1d3"><a href="#150249" label="[15:02:49]">&lt;sam_&gt;</a></span><span class="message">$ cat ./releases/portage/livegui/env/international</span></div><div class="line" id="150249"><span class="nick" style="color:#80b1d3"><a href="#150249" label="[15:02:49]">&lt;sam_&gt;</a></span><span class="message"># <a rel="nofollow" href="https://en.wikipedia.org/wiki/List_of_languages_by_total_number_of_speakers">https://en.wikipedia.org/wiki/List_of_languages_by_total_number_of_speakers</a> </span></div><div class="line" id="150249"><span class="nick" style="color:#80b1d3"><a href="#150249" label="[15:02:49]">&lt;sam_&gt;</a></span><span class="message">LINGUAS=&quot;en en-GB en-US&quot;</span></div><div class="line" id="150250"><span class="nick" style="color:#80b1d3"><a href="#150250" label="[15:02:50]">&lt;sam_&gt;</a></span><span class="message">[...]</span></div><div class="line" id="180607"><span class="nick" style="color:#8dd3c7"><a href="#180607" label="[18:06:07]">&lt;GoogulatorMobile&gt;</a></span><span class="message">TIL:</span></div><div class="line" id="180608"><span class="nick" style="color:#8dd3c7"><a href="#180608" label="[18:06:08]">&lt;GoogulatorMobile&gt;</a></span><span class="message">$ echo cat | sed statement</span></div><div class="line" id="180608"><span class="nick" style="color:#8dd3c7"><a href="#180608" label="[18:06:08]">&lt;GoogulatorMobile&gt;</a></span><span class="message">cement</span></div><div class="line" id="184820"><span class="nick" style="color:#6d2462"><a href="#184820" label="[18:48:20]">&lt;mid-kid&gt;</a></span><span class="message">yeah the `s` command supports any delimiter</span></div><div class="line" id="185651"><span class="nick" style="color:#234e69"><a href="#185651" label="[18:56:51]">&lt;janus&gt;</a></span><span class="message">it has to be a single-byte character</span></div><div class="line" id="190740"><span class="nick" style="color:#6d2462"><a href="#190740" label="[19:07:40]">&lt;mid-kid&gt;</a></span><span class="message">huh you're right</span></div><div class="line" id="190742"><span class="nick" style="color:#6d2462"><a href="#190742" label="[19:07:42]">&lt;mid-kid&gt;</a></span><span class="message">lame</span></div><div class="line" id="191237"><span class="nick" style="color:#389600"><a href="#191237" label="[19:12:37]">&lt;oriansj&gt;</a></span><span class="message">mid-kid: well sed is turing complete: <a rel="nofollow" href="https://catonmat.net/proof-that-sed-is-turing-complete">https://catonmat.net/proof-that-sed-is-turing-complete</a> </span></div><br /></div></body></html>