<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-01-01.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000025"><span class="nick" style="color:#389600"><a href="#000025" label="[00:00:25]">&lt;OriansJ&gt;</a></span><span class="message">and release is up</span></div><div class="line" id="000235"><span class="nick" style="color:#389600"><a href="#000235" label="[00:02:35]">&lt;OriansJ&gt;</a></span><span class="message">personally I look forward to guix having a scheme-only bootstrap</span></div><div class="line" id="011730"><span class="nick" style="color:#2e2a4a"><a href="#011730" label="[01:17:30]">&lt;Hagfish&gt;</a></span><span class="message">1.44 meg to 512 BYTES?  that's fantastic!</span></div><div class="line" id="011753"><span class="nick" style="color:#2e2a4a"><a href="#011753" label="[01:17:53]">&lt;Hagfish&gt;</a></span><span class="message">i'm starting to wonder whether it's possible to have fractional or negative numbers of bytes :)</span></div><div class="line" id="014616"><span class="nick" style="color:#2e2a4a"><a href="#014616" label="[01:46:16]">&lt;Hagfish&gt;</a></span><span class="message">apparently it's possible to fit 385 arbitrary bytes into a tweet using base2048 encoding</span></div><div class="line" id="014618"><span class="nick" style="color:#2e2a4a"><a href="#014618" label="[01:46:18]">&lt;Hagfish&gt;</a></span><span class="message"> <a rel="nofollow" href="https://qntm.org/twitcodings">https://qntm.org/twitcodings</a> </span></div><div class="line" id="014956"><span class="nick" style="color:#6b8072"><a href="#014956" label="[01:49:56]">&lt;xentrac&gt;</a></span><span class="message">you can easily have fractional numbers of *bytes*</span></div><div class="line" id="015043"><span class="nick" style="color:#6b8072"><a href="#015043" label="[01:50:43]">&lt;xentrac&gt;</a></span><span class="message">fractional numbers of *bits* usually requires something like arithmetic encoding, though that depends on context</span></div><div class="line" id="023527"><span class="nick" style="color:#2e2a4a"><a href="#023527" label="[02:35:27]">&lt;Hagfish&gt;</a></span><span class="message">xentrac: good point, thank you!</span></div><div class="line" id="040219"><span class="nick" style="color:#389600"><a href="#040219" label="[04:02:19]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: yes hex0 will fit in a tweet. kaem-minimal 2 tweets min</span></div><div class="line" id="045753"><span class="nick" style="color:#2e2a4a"><a href="#045753" label="[04:57:53]">&lt;Hagfish&gt;</a></span><span class="message">it could be an interesting type of publicity, but there wouldn't be space in the tweet to provide the context for why those particular bytes were useful</span></div><div class="line" id="050052"><span class="nick" style="color:#2e2a4a"><a href="#050052" label="[05:00:52]">&lt;Hagfish&gt;</a></span><span class="message">perhaps, once there is something to announce, there could be an official news/blog post explaining what's been achieved,</span></div><div class="line" id="050054"><span class="nick" style="color:#2e2a4a"><a href="#050054" label="[05:00:54]">&lt;Hagfish&gt;</a></span><span class="message">and a separate post that's more fun, pointing to the first post and saying &quot;here's what hex0 would look like as a tweet&quot;</span></div><div class="line" id="050144"><span class="nick" style="color:#2e2a4a"><a href="#050144" label="[05:01:44]">&lt;Hagfish&gt;</a></span><span class="message">give the post a clickbaity title like &quot;bootstrapping all of Linux from a single Tweet&quot;, or something :)</span></div><div class="line" id="075123"><span class="nick" style="color:#6b8072"><a href="#075123" label="[07:51:23]">&lt;xentrac&gt;</a></span><span class="message">oooh</span></div><div class="line" id="075125"><span class="nick" style="color:#6b8072"><a href="#075125" label="[07:51:25]">&lt;xentrac&gt;</a></span><span class="message">nice</span></div><div class="line" id="143122"><span class="nick" style="color:#80b1d3"><a href="#143122" label="[14:31:22]">&lt;deesix&gt;</a></span><span class="message">Hagfish, the 1.44M -&gt; 512b is just a [mostly empty] floppy image truncation, nothing changed really.</span></div><div class="line" id="144928"><span class="nick" style="color:#389600"><a href="#144928" label="[14:49:28]">&lt;OriansJ&gt;</a></span><span class="message">deesix: indeed. a more impressive feat in bootstrap-seeds was when fossy got the C code version of kaem-optional-seed from 16,246bytes down to 7,228bytes. I had to resort to Assembly programming to make any improvements on that. Fortunately M2-Planet doesn't generate optimal code and some creative choices got it down to 737bytes after I incorporated fossy's reductions.</span></div><div class="line" id="145236"><span class="nick" style="color:#6d2462"><a href="#145236" label="[14:52:36]">&lt;janneke&gt;</a></span><span class="message">OriansJ: finally found the m2-planet floating point bug; just sent a mail; or see my gitlab</span></div><div class="line" id="145919"><span class="nick" style="color:#389600"><a href="#145919" label="[14:59:19]">&lt;OriansJ&gt;</a></span><span class="message">janneke: all M2-Planet binaries can be gdb debugged.</span></div><div class="line" id="150142"><span class="nick" style="color:#6d2462"><a href="#150142" label="[15:01:42]">&lt;janneke&gt;</a></span><span class="message">OriansJ: yeah, what happened?  something fubar on my side?</span></div><div class="line" id="151719"><span class="nick" style="color:#389600"><a href="#151719" label="[15:17:19]">&lt;OriansJ&gt;</a></span><span class="message">well the change was to sign extend an integer into EDI/RDI if it was signed or just put 0 in EDI/RDI if unsigned.</span></div><div class="line" id="151854"><span class="nick" style="color:#389600"><a href="#151854" label="[15:18:54]">&lt;OriansJ&gt;</a></span><span class="message">which is what GCC does when doing idiv</span></div><div class="line" id="152419"><span class="nick" style="color:#6d2462"><a href="#152419" label="[15:24:19]">&lt;janneke&gt;</a></span><span class="message">sure, i understand that</span></div><div class="line" id="152508"><span class="nick" style="color:#6d2462"><a href="#152508" label="[15:25:08]">&lt;janneke&gt;</a></span><span class="message">but something must be different, because gcc (and mescc ftm) do not create a mes binary that hits a fpe</span></div><div class="line" id="152614"><span class="nick" style="color:#389600"><a href="#152614" label="[15:26:14]">&lt;OriansJ&gt;</a></span><span class="message">oh my god</span></div><div class="line" id="152634"><span class="nick" style="color:#389600"><a href="#152634" label="[15:26:34]">&lt;OriansJ&gt;</a></span><span class="message">it is an x86 bug</span></div><div class="line" id="152650"><span class="nick" style="color:#6d2462"><a href="#152650" label="[15:26:50]">&lt;janneke&gt;</a></span><span class="message">really?</span></div><div class="line" id="152652"><span class="nick" style="color:#389600"><a href="#152652" label="[15:26:52]">&lt;OriansJ&gt;</a></span><span class="message">do b* 0x10000a9</span></div><div class="line" id="152701"><span class="nick" style="color:#389600"><a href="#152701" label="[15:27:01]">&lt;OriansJ&gt;</a></span><span class="message">then set $ebx=2</span></div><div class="line" id="152703"><span class="nick" style="color:#389600"><a href="#152703" label="[15:27:03]">&lt;OriansJ&gt;</a></span><span class="message">si</span></div><div class="line" id="152723"><span class="nick" style="color:#389600"><a href="#152723" label="[15:27:23]">&lt;OriansJ&gt;</a></span><span class="message">it can't do divide by 1</span></div><div class="line" id="152900"><span class="nick" style="color:#389600"><a href="#152900" label="[15:29:00]">&lt;OriansJ&gt;</a></span><span class="message">GCC literally just drops the divide entirely</span></div><div class="line" id="153149"><span class="nick" style="color:#6d2462"><a href="#153149" label="[15:31:49]">&lt;janneke&gt;</a></span><span class="message">are you able to see the disassembly?</span></div><div class="line" id="153211"><span class="nick" style="color:#6d2462"><a href="#153211" label="[15:32:11]">&lt;janneke&gt;</a></span><span class="message">i see your segfault, but i'm blind here</span></div><div class="line" id="153219"><span class="nick" style="color:#6d2462"><a href="#153219" label="[15:32:19]">&lt;janneke&gt;</a></span><span class="message">(other than set disassemble-next-line on)</span></div><div class="line" id="153419"><span class="nick" style="color:#389600"><a href="#153419" label="[15:34:19]">&lt;OriansJ&gt;</a></span><span class="message">yeah just fine, you did test/common_x86/ELF-i386.hex2 instead of test/common_x86/ELF-i386-debug.hex2</span></div><div class="line" id="153443"><span class="nick" style="color:#389600"><a href="#153443" label="[15:34:43]">&lt;OriansJ&gt;</a></span><span class="message">objdump -d shows everything fine after as does gdb</span></div><div class="line" id="153607"><span class="nick" style="color:#6d2462"><a href="#153607" label="[15:36:07]">&lt;janneke&gt;</a></span><span class="message">ah!</span></div><div class="line" id="153619"><span class="nick" style="color:#6d2462"><a href="#153619" label="[15:36:19]">&lt;janneke&gt;</a></span><span class="message">thanks</span></div><div class="line" id="153707"><span class="nick" style="color:#6d2462"><a href="#153707" label="[15:37:07]">&lt;janneke&gt;</a></span><span class="message">that's probably my problem with mes too</span></div><div class="line" id="153812"><span class="nick" style="color:#389600"><a href="#153812" label="[15:38:12]">&lt;OriansJ&gt;</a></span><span class="message">easy mistake to make honestly</span></div><div class="line" id="154013"><span class="nick" style="color:#6d2462"><a href="#154013" label="[15:40:13]">&lt;janneke&gt;</a></span><span class="message">ah, wait: i'ts using DIV with CLTD, isn't that wrong?</span></div><div class="line" id="154108"><span class="nick" style="color:#6d2462"><a href="#154108" label="[15:41:08]">&lt;janneke&gt;</a></span><span class="message">i think the result must always be &lt; 32bit for DIV and &lt; 31bit (signed) for IDIV</span></div><div class="line" id="154129"><span class="nick" style="color:#6d2462"><a href="#154129" label="[15:41:29]">&lt;janneke&gt;</a></span><span class="message">so, it's interpreting dx:ax as an unsigned number (very large)</span></div><div class="line" id="154249"><span class="nick" style="color:#6d2462"><a href="#154249" label="[15:42:49]">&lt;janneke&gt;</a></span><span class="message">and after div with 1 or 2, that's &gt; 32bit</span></div><div class="line" id="154303"><span class="nick" style="color:#389600"><a href="#154303" label="[15:43:03]">&lt;OriansJ&gt;</a></span><span class="message">janneke: well if you div by 2 it works</span></div><div class="line" id="154400"><span class="nick" style="color:#389600"><a href="#154400" label="[15:44:00]">&lt;OriansJ&gt;</a></span><span class="message">and I think I just found the smallest input possible to segfault gdb: <a rel="nofollow" href="https://paste.debian.net/1179266/">https://paste.debian.net/1179266/</a> </span></div><div class="line" id="154549"><span class="nick" style="color:#389600"><a href="#154549" label="[15:45:49]">&lt;OriansJ&gt;</a></span><span class="message">oops I forgot the .section before the .text</span></div><div class="line" id="154600"><span class="nick" style="color:#234e69"><a href="#154600" label="[15:46:00]">&lt;nimaje&gt;</a></span><span class="message">why   mov 0, %eax   and then   xor %eax, %eax    ? shouldn't both of them set %eax to 0?</span></div><div class="line" id="154604"><span class="nick" style="color:#389600"><a href="#154604" label="[15:46:04]">&lt;OriansJ&gt;</a></span><span class="message">switching between gas and nasm assembly throws me like that</span></div><div class="line" id="155203"><span class="nick" style="color:#6d2462"><a href="#155203" label="[15:52:03]">&lt;janneke&gt;</a></span><span class="message">yeah, the windows convention is terrible for us unix beards</span></div><div class="line" id="155358"><span class="nick" style="color:#389600"><a href="#155358" label="[15:53:58]">&lt;OriansJ&gt;</a></span><span class="message">technically it is Intel vs AT&amp;T conventions but oh well</span></div><div class="line" id="155508"><span class="nick" style="color:#6d2462"><a href="#155508" label="[15:55:08]">&lt;janneke&gt;</a></span><span class="message">ah, always blamed the windows folks on stackoverflow :-)</span></div><div class="line" id="162019"><span class="nick" style="color:#389600"><a href="#162019" label="[16:20:19]">&lt;OriansJ&gt;</a></span><span class="message">honestly, I just blamed AT&amp;T for being lazy and not using the assembly syntax that wasn't standard for the hardware platform they were building binaries for. It would have been a couple weeks of work but then the hardware companies could be responsible for extending the assemblers when new instructions were added.</span></div><div class="line" id="162726"><span class="nick" style="color:#389600"><a href="#162726" label="[16:27:26]">&lt;OriansJ&gt;</a></span><span class="message">wait a second</span></div><div class="line" id="162806"><span class="nick" style="color:#6c3d55"><a href="#162806" label="[16:28:06]">*</a></span><span class="message">janneke waits, jokingly</span></div><div class="line" id="162848"><span class="nick" style="color:#389600"><a href="#162848" label="[16:28:48]">&lt;OriansJ&gt;</a></span><span class="message">f7 fb vs f7 f3</span></div><div class="line" id="162942"><span class="nick" style="color:#389600"><a href="#162942" label="[16:29:42]">&lt;OriansJ&gt;</a></span><span class="message">idiv ebx vs div ebx</span></div><div class="line" id="163020"><span class="nick" style="color:#389600"><a href="#163020" label="[16:30:20]">&lt;OriansJ&gt;</a></span><span class="message">idiv ebx =&gt; divide by 1 no problem; div eb =&gt; floating point exception</span></div><div class="line" id="163122"><span class="nick" style="color:#6d2462"><a href="#163122" label="[16:31:22]">&lt;janneke&gt;</a></span><span class="message">yep, i tried to suggest something like that</span></div><div class="line" id="163214"><span class="nick" style="color:#6d2462"><a href="#163214" label="[16:32:14]">&lt;janneke&gt;</a></span><span class="message">for DIV you need to xor edx, for idiv ctcl may be used (but can still overflow)</span></div><div class="line" id="163252"><span class="nick" style="color:#6d2462"><a href="#163252" label="[16:32:52]">&lt;janneke&gt;</a></span><span class="message">for idiv by 1 on INT_MIN, i think</span></div><div class="line" id="163349"><span class="nick" style="color:#389600"><a href="#163349" label="[16:33:49]">&lt;OriansJ&gt;</a></span><span class="message">So I got signed and unsigned division on x86 backwards?</span></div><div class="line" id="163952"><span class="nick" style="color:#389600"><a href="#163952" label="[16:39:52]">&lt;OriansJ&gt;</a></span><span class="message">oops; easy to fix just need to fix the DEFINEs as I had DIVIDE_eax_by_ebx_into_eax F7FB  and DIVIDES_eax_by_ebx_into_eax F7F3</span></div><div class="line" id="164058"><span class="nick" style="color:#389600"><a href="#164058" label="[16:40:58]">&lt;OriansJ&gt;</a></span><span class="message">as sign extensions is correct for signed and 0 is correct for unsigned</span></div><div class="line" id="164110"><span class="nick" style="color:#389600"><a href="#164110" label="[16:41:10]">&lt;OriansJ&gt;</a></span><span class="message">now to check AMD64 to see if I made the same mistake there</span></div><div class="line" id="164244"><span class="nick" style="color:#389600"><a href="#164244" label="[16:42:44]">&lt;OriansJ&gt;</a></span><span class="message">yep</span></div><div class="line" id="164344"><span class="nick" style="color:#389600"><a href="#164344" label="[16:43:44]">&lt;OriansJ&gt;</a></span><span class="message">I guess that just goes to show how rarely I have division in my programs.</span></div><div class="line" id="164401"><span class="nick" style="color:#80b1d3"><a href="#164401" label="[16:44:01]">&lt;deesix&gt;</a></span><span class="message">Maybe you also want to check if AMS64 needs this fix too, I think it does, OriansJ. 608fba306f46128fe901302f813d139c635e996a</span></div><div class="line" id="164504"><span class="nick" style="color:#389600"><a href="#164504" label="[16:45:04]">&lt;OriansJ&gt;</a></span><span class="message">deesix: yep atleast I am consistient when it comes to making mistakes</span></div><div class="line" id="164516"><span class="nick" style="color:#389600"><a href="#164516" label="[16:45:16]">&lt;OriansJ&gt;</a></span><span class="message">I keep making the same typos over and over again</span></div><div class="line" id="165326"><span class="nick" style="color:#389600"><a href="#165326" label="[16:53:26]">&lt;OriansJ&gt;</a></span><span class="message">janneke: I pushed a fix, please verify it works for you</span></div><div class="line" id="170633"><span class="nick" style="color:#6d2462"><a href="#170633" label="[17:06:33]">&lt;janneke&gt;</a></span><span class="message">OriansJ: thanks, will do right away</span></div><div class="line" id="171655"><span class="nick" style="color:#6d2462"><a href="#171655" label="[17:16:55]">&lt;janneke&gt;</a></span><span class="message">looking good so far...</span></div><div class="line" id="171706"><span class="nick" style="color:#6d2462"><a href="#171706" label="[17:17:06]">&lt;janneke&gt;</a></span><span class="message">hmm, /me should prolly not say that...</span></div><div class="line" id="171724"><span class="nick" style="color:#6d2462"><a href="#171724" label="[17:17:24]">&lt;janneke&gt;</a></span><span class="message">anyway, most often it failed sooner</span></div><div class="line" id="172135"><span class="nick" style="color:#6d2462"><a href="#172135" label="[17:21:35]">&lt;janneke&gt;</a></span><span class="message">well, one full build succeeded, just to be sure i'm running another one</span></div><div class="line" id="174441"><span class="nick" style="color:#6d2462"><a href="#174441" label="[17:44:41]">&lt;janneke&gt;</a></span><span class="message">OriansJ: oops, another fpe near the end of the 2nd build</span></div><div class="line" id="174507"><span class="nick" style="color:#6d2462"><a href="#174507" label="[17:45:07]">&lt;janneke&gt;</a></span><span class="message">so it's &quot;a lot better&quot;, but seems more problematic than my revert patch</span></div><div class="line" id="174518"><span class="nick" style="color:#6d2462"><a href="#174518" label="[17:45:18]">&lt;janneke&gt;</a></span><span class="message">i'll have a better test with the revert one</span></div><div class="line" id="174551"><span class="nick" style="color:#6d2462"><a href="#174551" label="[17:45:51]">&lt;janneke&gt;</a></span><span class="message">it's terrible that it's nondeterministic; how to catch the problem in gdb??</span></div><div class="line" id="181121"><span class="nick" style="color:#6d2462"><a href="#181121" label="[18:11:21]">&lt;janneke&gt;</a></span><span class="message">yup, inconclusive but another good build with the revert, and another failure with the idiv/div swap</span></div><div class="line" id="181128"><span class="nick" style="color:#6d2462"><a href="#181128" label="[18:11:28]">&lt;janneke&gt;</a></span><span class="message">but again, near the end of the build</span></div><div class="line" id="181211"><span class="nick" style="color:#6d2462"><a href="#181211" label="[18:12:11]">&lt;janneke&gt;</a></span><span class="message">the nondeterminism is really weird</span></div><div class="line" id="181335"><span class="nick" style="color:#389600"><a href="#181335" label="[18:13:35]">&lt;OriansJ&gt;</a></span><span class="message">janneke: you know you can diff the M1 outputs right?</span></div><div class="line" id="181642"><span class="nick" style="color:#6d2462"><a href="#181642" label="[18:16:42]">&lt;janneke&gt;</a></span><span class="message">ah, i didn't think of that</span></div><div class="line" id="181704"><span class="nick" style="color:#6d2462"><a href="#181704" label="[18:17:04]">&lt;janneke&gt;</a></span><span class="message">i'm assuming the diff would be what we expect...but it's worth a look</span></div><div class="line" id="182218"><span class="nick" style="color:#389600"><a href="#182218" label="[18:22:18]">&lt;OriansJ&gt;</a></span><span class="message">janneke: you know you can use tools like meld or emacs to manually patch the broken M1 output with the working M1 output to find exactly the one where it isn't function right?</span></div><div class="line" id="182933"><span class="nick" style="color:#6d2462"><a href="#182933" label="[18:29:33]">&lt;janneke&gt;</a></span><span class="message">OriansJ: right -- there are 16 instances of CDTQ instead of zeroing %edx:<a rel="nofollow" href="https://paste.debian.net/1179283/">https://paste.debian.net/1179283/</a> </span></div><div class="line" id="182947"><span class="nick" style="color:#6d2462"><a href="#182947" label="[18:29:47]">&lt;janneke&gt;</a></span><span class="message">but no difference in div/idiv</span></div><div class="line" id="183038"><span class="nick" style="color:#6d2462"><a href="#183038" label="[18:30:38]">&lt;janneke&gt;</a></span><span class="message">without grep [+-] =&gt; <a rel="nofollow" href="https://paste.debian.net/1179284/">https://paste.debian.net/1179284/</a> </span></div><div class="line" id="183259"><span class="nick" style="color:#6d2462"><a href="#183259" label="[18:32:59]">&lt;janneke&gt;</a></span><span class="message">OriansJ: shall try to bisect these differences?  it's going to take quite some time, esp. as the swap fix not always fails after a ~10min build</span></div><div class="line" id="184059"><span class="nick" style="color:#389600"><a href="#184059" label="[18:40:59]">&lt;OriansJ&gt;</a></span><span class="message">janneke</span></div><div class="line" id="184119"><span class="nick" style="color:#389600"><a href="#184119" label="[18:41:19]">&lt;OriansJ&gt;</a></span><span class="message">your patch doesn't swap div and idiv definitions</span></div><div class="line" id="184213"><span class="nick" style="color:#389600"><a href="#184213" label="[18:42:13]">&lt;OriansJ&gt;</a></span><span class="message">So it is still doing div after CDTQ</span></div><div class="line" id="184340"><span class="nick" style="color:#6d2462"><a href="#184340" label="[18:43:40]">&lt;janneke&gt;</a></span><span class="message">right</span></div><div class="line" id="184353"><span class="nick" style="color:#6d2462"><a href="#184353" label="[18:43:53]">&lt;janneke&gt;</a></span><span class="message">ah no, it never does CDTQ</span></div><div class="line" id="184406"><span class="nick" style="color:#6d2462"><a href="#184406" label="[18:44:06]">&lt;janneke&gt;</a></span><span class="message">it always zeros $edx</span></div><div class="line" id="184428"><span class="nick" style="color:#6d2462"><a href="#184428" label="[18:44:28]">&lt;janneke&gt;</a></span><span class="message">just like before, hence revert ;-)</span></div><div class="line" id="184729"><span class="nick" style="color:#389600"><a href="#184729" label="[18:47:29]">&lt;OriansJ&gt;</a></span><span class="message">janneke: except then -1/-1 != 1</span></div><div class="line" id="184853"><span class="nick" style="color:#6d2462"><a href="#184853" label="[18:48:53]">&lt;janneke&gt;</a></span><span class="message">yeah...but apparently mes' code base isn't doing stuff like that ;-)</span></div><div class="line" id="184901"><span class="nick" style="color:#6d2462"><a href="#184901" label="[18:49:01]">&lt;janneke&gt;</a></span><span class="message">at least, not when compiling mes</span></div><div class="line" id="184906"><span class="nick" style="color:#6d2462"><a href="#184906" label="[18:49:06]">&lt;janneke&gt;</a></span><span class="message">man...</span></div><div class="line" id="185122"><span class="nick" style="color:#389600"><a href="#185122" label="[18:51:22]">&lt;OriansJ&gt;</a></span><span class="message">well for all 32bit numbers without a top 1 bit CDTQ simply converts EDX to 0</span></div><div class="line" id="185414"><span class="nick" style="color:#389600"><a href="#185414" label="[18:54:14]">&lt;OriansJ&gt;</a></span><span class="message">for example 0x7FFFFFFF just sets EDX to zero</span></div><div class="line" id="185845"><span class="nick" style="color:#6d2462"><a href="#185845" label="[18:58:45]">&lt;janneke&gt;</a></span><span class="message">sure</span></div><div class="line" id="185918"><span class="nick" style="color:#6d2462"><a href="#185918" label="[18:59:18]">&lt;janneke&gt;</a></span><span class="message">as we're note dividing by 0, the exception must be an overflow</span></div><div class="line" id="190411"><span class="nick" style="color:#6d2462"><a href="#190411" label="[19:04:11]">&lt;janneke&gt;</a></span><span class="message">i'm working to resurrect/finish the full-source-bootstrap in guix based on the revert patch; meanwhile i'm trying to bisect the mes.M1 differences</span></div><div class="line" id="190432"><span class="nick" style="color:#389600"><a href="#190432" label="[19:04:32]">&lt;OriansJ&gt;</a></span><span class="message">except if your DEFINE is still the idiv</span></div><div class="line" id="190450"><span class="nick" style="color:#6d2462"><a href="#190450" label="[19:04:50]">&lt;janneke&gt;</a></span><span class="message">OriansJ: crap!</span></div><div class="line" id="190503"><span class="nick" style="color:#6d2462"><a href="#190503" label="[19:05:03]">&lt;janneke&gt;</a></span><span class="message">brilliant</span></div><div class="line" id="190509"><span class="nick" style="color:#6d2462"><a href="#190509" label="[19:05:09]">&lt;janneke&gt;</a></span><span class="message">doh'</span></div><div class="line" id="190538"><span class="nick" style="color:#6d2462"><a href="#190538" label="[19:05:38]">&lt;janneke&gt;</a></span><span class="message">these ascii M1's (and hex2's) are a real life saver at times</span></div><div class="line" id="190937"><span class="nick" style="color:#6d2462"><a href="#190937" label="[19:09:37]">&lt;janneke&gt;</a></span><span class="message">OriansJ: looking to see if that's any better...</span></div><div class="line" id="191027"><span class="nick" style="color:#6c3d55"><a href="#191027" label="[19:10:27]">*</a></span><span class="message">janneke goes to make some supper</span></div><div class="line" id="191723"><span class="nick" style="color:#389600"><a href="#191723" label="[19:17:23]">&lt;OriansJ&gt;</a></span><span class="message">These wait 10 minutes to see if the fix works cycles have to be frustrating.</span></div><div class="line" id="192731"><span class="nick" style="color:#6d2462"><a href="#192731" label="[19:27:31]">&lt;janneke&gt;</a></span><span class="message">yes..it's OK to do it as a side job but having all your attiention on that is terrible</span></div><div class="line" id="195412"><span class="nick" style="color:#6d2462"><a href="#195412" label="[19:54:12]">&lt;janneke&gt;</a></span><span class="message">OriansJ: 3 consecutive correct builds, so i guess your fix is great!  sorry for the noise...</span></div><div class="line" id="195915"><span class="nick" style="color:#6d2462"><a href="#195915" label="[19:59:15]">&lt;janneke&gt;</a></span><span class="message">oh crap, now the m2-planet-boot fails to build; that worked with vanilla 1.7.0</span></div><div class="line" id="200007"><span class="nick" style="color:#6d2462"><a href="#200007" label="[20:00:07]">&lt;janneke&gt;</a></span><span class="message">=&gt; <a rel="nofollow" href="https://paste.debian.net/1179296/">https://paste.debian.net/1179296/</a> </span></div><div class="line" id="200108"><span class="nick" style="color:#6d2462"><a href="#200108" label="[20:01:08]">&lt;janneke&gt;</a></span><span class="message">how could i be so optimistic and update both bootstrap-seeds and m2-planet at the same time?</span></div><div class="line" id="200139"><span class="nick" style="color:#6d2462"><a href="#200139" label="[20:01:39]">&lt;janneke&gt;</a></span><span class="message">well, i guess bootstrap-seeds can't be the problem</span></div><div class="line" id="200633"><span class="nick" style="color:#6d2462"><a href="#200633" label="[20:06:33]">&lt;janneke&gt;</a></span><span class="message">yup, 1.7.0 + b7c14a2 Looks like I got x86/AMD64 signed and unsigned division backwards works</span></div><div class="line" id="200659"><span class="nick" style="color:#6d2462"><a href="#200659" label="[20:06:59]">&lt;janneke&gt;</a></span><span class="message">so, there's a problem somewhere in 1.7.0 wrt bootstrapping</span></div><div class="line" id="200924"><span class="nick" style="color:#6d2462"><a href="#200924" label="[20:09:24]">&lt;janneke&gt;</a></span><span class="message">i mean, somewhere between Release_1.7.0 and HEAD</span></div><div class="line" id="205545"><span class="nick" style="color:#389600"><a href="#205545" label="[20:55:45]">&lt;OriansJ&gt;</a></span><span class="message">janneke: you know you can replace bootstrap hex2 with mescc-tools hex2 and it'll give you a verbose error message</span></div><div class="line" id="205850"><span class="nick" style="color:#6d2462"><a href="#205850" label="[20:58:50]">&lt;janneke&gt;</a></span><span class="message">yeah, but this is in a guix build</span></div><div class="line" id="205905"><span class="nick" style="color:#6d2462"><a href="#205905" label="[20:59:05]">&lt;janneke&gt;</a></span><span class="message">so i have to setup a non-guix development environment for that...</span></div><div class="line" id="205939"><span class="nick" style="color:#389600"><a href="#205939" label="[20:59:39]">&lt;OriansJ&gt;</a></span><span class="message">janneke: it only needs a git clone --recursive and nothing else</span></div><div class="line" id="210051"><span class="nick" style="color:#389600"><a href="#210051" label="[21:00:51]">&lt;OriansJ&gt;</a></span><span class="message">it appears to not have a FUNCTION_main</span></div><div class="line" id="210137"><span class="nick" style="color:#6d2462"><a href="#210137" label="[21:01:37]">&lt;janneke&gt;</a></span><span class="message">ah</span></div><div class="line" id="210222"><span class="nick" style="color:#6d2462"><a href="#210222" label="[21:02:22]">&lt;janneke&gt;</a></span><span class="message">meanwhile, i found why my m2-planet mes had an elf problem; previously m2-planet produced mes-compatible M1</span></div><div class="line" id="210240"><span class="nick" style="color:#6d2462"><a href="#210240" label="[21:02:40]">&lt;janneke&gt;</a></span><span class="message">and i used lib/x86-mes/elf32-header.hex2</span></div><div class="line" id="210242"><span class="nick" style="color:#6d2462"><a href="#210242" label="[21:02:42]">&lt;janneke&gt;</a></span><span class="message">oh well...</span></div><div class="line" id="210622"><span class="nick" style="color:#389600"><a href="#210622" label="[21:06:22]">&lt;OriansJ&gt;</a></span><span class="message">looks like cc_x86 can't compile the new file.c</span></div><div class="line" id="210956"><span class="nick" style="color:#6d2462"><a href="#210956" label="[21:09:56]">&lt;janneke&gt;</a></span><span class="message">hmm, gcc-compiled m2-planet now bootstraps mes correctly, but the bootstrapped m2-planet fails</span></div><div class="line" id="211147"><span class="nick" style="color:#389600"><a href="#211147" label="[21:11:47]">&lt;OriansJ&gt;</a></span><span class="message">looks like the file buffering for x86 is not cc_* compatible at all.</span></div><div class="line" id="211226"><span class="nick" style="color:#389600"><a href="#211226" label="[21:12:26]">&lt;OriansJ&gt;</a></span><span class="message">I really should include a --bootstrap option to M2-Planet and flag on the use of primitives that cc_* don't support to catch these errors sooner</span></div><div class="line" id="212624"><span class="nick" style="color:#389600"><a href="#212624" label="[21:26:24]">&lt;OriansJ&gt;</a></span><span class="message">janneke: I'll have M2-Planet in a buildable shape for you shortly</span></div><div class="line" id="212928"><span class="nick" style="color:#6d2462"><a href="#212928" label="[21:29:28]">&lt;janneke&gt;</a></span><span class="message">OriansJ: beautiful</span></div><div class="line" id="213005"><span class="nick" style="color:#6d2462"><a href="#213005" label="[21:30:05]">&lt;janneke&gt;</a></span><span class="message">does M2-Planet come with a kaem script that builds it using M2-Planet?</span></div><div class="line" id="213043"><span class="nick" style="color:#6d2462"><a href="#213043" label="[21:30:43]">&lt;janneke&gt;</a></span><span class="message">i'll first inject the gcc-built M2-Planet binary into the bootstrap, to find where the problem really is</span></div><div class="line" id="213111"><span class="nick" style="color:#389600"><a href="#213111" label="[21:31:11]">&lt;OriansJ&gt;</a></span><span class="message">janneke: test1000 builts M2-Planet and then has its output build itself for x86</span></div><div class="line" id="213204"><span class="nick" style="color:#389600"><a href="#213204" label="[21:32:04]">&lt;OriansJ&gt;</a></span><span class="message">and I'll have an updated mescc-tools-seed up for you shortly</span></div><div class="line" id="213403"><span class="nick" style="color:#6d2462"><a href="#213403" label="[21:34:03]">&lt;janneke&gt;</a></span><span class="message">OriansJ: yes, test1000 is very nice</span></div><div class="line" id="213952"><span class="nick" style="color:#6d2462"><a href="#213952" label="[21:39:52]">&lt;janneke&gt;</a></span><span class="message">trying the gcc-m2-planet injection first, if that works i'll add an extra test1000 package (or stage ...hmmm)</span></div><div class="line" id="215720"><span class="nick" style="color:#389600"><a href="#215720" label="[21:57:20]">&lt;OriansJ&gt;</a></span><span class="message">janneke: M2-Planet built M2-Planet should behave identically to GCC built M2-Planet</span></div><div class="line" id="215933"><span class="nick" style="color:#6d2462"><a href="#215933" label="[21:59:33]">&lt;janneke&gt;</a></span><span class="message">of course :-)</span></div><div class="line" id="220004"><span class="nick" style="color:#6d2462"><a href="#220004" label="[22:00:04]">&lt;janneke&gt;</a></span><span class="message">and i'm sure it does or it will</span></div><div class="line" id="220059"><span class="nick" style="color:#6d2462"><a href="#220059" label="[22:00:59]">&lt;janneke&gt;</a></span><span class="message">i'm now building guix' mes-boot with an injected gcc-built M2-Planet, looking pretty good</span></div><div class="line" id="220124"><span class="nick" style="color:#6d2462"><a href="#220124" label="[22:01:24]">&lt;janneke&gt;</a></span><span class="message">the bootstrapped M2-Planet (without the test1000 self-build) certainly does not behave as well yet</span></div><div class="line" id="220142"><span class="nick" style="color:#6d2462"><a href="#220142" label="[22:01:42]">&lt;janneke&gt;</a></span><span class="message">we're getting real close</span></div><div class="line" id="220222"><span class="nick" style="color:#6d2462"><a href="#220222" label="[22:02:22]">&lt;janneke&gt;</a></span><span class="message">i must have missed this step last time and stopped after i got a bootstrapped M2-Planet, and a gcc-M2-Planet built mes :-(</span></div><div class="line" id="220235"><span class="nick" style="color:#6d2462"><a href="#220235" label="[22:02:35]">&lt;janneke&gt;</a></span><span class="message">very unexpected, anyways</span></div><div class="line" id="220342"><span class="nick" style="color:#6d2462"><a href="#220342" label="[22:03:42]">&lt;janneke&gt;</a></span><span class="message">OriansJ: the gcc-built M2-Planet does not use M2-Planet's libc, right?</span></div><div class="line" id="220403"><span class="nick" style="color:#6d2462"><a href="#220403" label="[22:04:03]">&lt;janneke&gt;</a></span><span class="message">i mean, an honest bug could be anywhere...</span></div><div class="line" id="220620"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado_</span></div><div class="line" id="220624"><span class="nick">***</span><span class="message notice">rekado_ is now known as rekado</span></div><div class="line" id="221132"><span class="nick" style="color:#389600"><a href="#221132" label="[22:11:32]">&lt;OriansJ&gt;</a></span><span class="message">janneke: M2-Planet doesn't technically have a libc. As all the libraries are just standard source files read during compilation</span></div><div class="line" id="221234"><span class="nick" style="color:#389600"><a href="#221234" label="[22:12:34]">&lt;OriansJ&gt;</a></span><span class="message">as the libc-core.M1 just sets up the stack and calls FUNCTION_main and syscalling exit if it returns</span></div><div class="line" id="221408"><span class="nick" style="color:#6b8072"><a href="#221408" label="[22:14:08]">&lt;xentrac&gt;</a></span><span class="message">a library of source code is still a library ;)</span></div><div class="line" id="222217"><span class="nick" style="color:#389600"><a href="#222217" label="[22:22:17]">&lt;OriansJ&gt;</a></span><span class="message">ooops looks like I forgot to update modulus too</span></div><div class="line" id="222732"><span class="nick" style="color:#6d2462"><a href="#222732" label="[22:27:32]">&lt;janneke&gt;</a></span><span class="message">ah, that's &quot;great&quot;</span></div><div class="line" id="222755"><span class="nick" style="color:#6d2462"><a href="#222755" label="[22:27:55]">&lt;janneke&gt;</a></span><span class="message">i just had another unexpected failure ... not sure if fpe or something else</span></div><div class="line" id="222845"><span class="nick" style="color:#6d2462"><a href="#222845" label="[22:28:45]">&lt;janneke&gt;</a></span><span class="message">i could even have been testing 64bit M2-Planet, unintentionally...</span></div><div class="line" id="222900"><span class="nick" style="color:#6d2462"><a href="#222900" label="[22:29:00]">&lt;janneke&gt;</a></span><span class="message">very difficult to be 100% correct in a development environment</span></div><div class="line" id="223018"><span class="nick" style="color:#6d2462"><a href="#223018" label="[22:30:18]">&lt;janneke&gt;</a></span><span class="message">anyway, i'm very happy that we're close enough for telling a good story, even if we're not 100% done</span></div><div class="line" id="223151"><span class="nick" style="color:#389600"><a href="#223151" label="[22:31:51]">&lt;OriansJ&gt;</a></span><span class="message">janneke: if you find something where M2-Planet built M2-Planet doesn't produce bit for bit identicial output as the GCC version of M2-Planet. Raise a major flag as that is something I absolutely have to fix</span></div><div class="line" id="223508"><span class="nick" style="color:#6d2462"><a href="#223508" label="[22:35:08]">&lt;janneke&gt;</a></span><span class="message">OriansJ: hmm, yes, installing the m2/mes.M1 source is a good idea</span></div><div class="line" id="223534"><span class="nick" style="color:#6d2462"><a href="#223534" label="[22:35:34]">&lt;janneke&gt;</a></span><span class="message">i'm doing that for the mes-built output, should do that for m2-planet built output too</span></div><div class="line" id="223613"><span class="nick" style="color:#389600"><a href="#223613" label="[22:36:13]">&lt;OriansJ&gt;</a></span><span class="message">janneke: mescc-tools-seed builds M2-Planet and has it self-host itself</span></div><div class="line" id="223653"><span class="nick" style="color:#6d2462"><a href="#223653" label="[22:36:53]">&lt;janneke&gt;</a></span><span class="message">OK, so no need for an extra package -- hmm</span></div><div class="line" id="223755"><span class="nick" style="color:#389600"><a href="#223755" label="[22:37:55]">&lt;OriansJ&gt;</a></span><span class="message">just git clone --recursive <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-seed.git">https://github.com/oriansj/mescc-tools-seed.git</a>  and cd x86 &amp;&amp; ../bootstrap-seeds/POSIX/x86/kaem-optional-seed then you are done</span></div><div class="line" id="223814"><span class="nick" style="color:#389600"><a href="#223814" label="[22:38:14]">&lt;OriansJ&gt;</a></span><span class="message">everything else I have taken care of for you</span></div><div class="line" id="223842"><span class="nick" style="color:#389600"><a href="#223842" label="[22:38:42]">&lt;OriansJ&gt;</a></span><span class="message">I'd even incorporate mes in it too if I knew an exact commit which would work</span></div><div class="line" id="223914"><span class="nick" style="color:#6d2462"><a href="#223914" label="[22:39:14]">&lt;janneke&gt;</a></span><span class="message">ah no, i'm keeping mes a separate package</span></div><div class="line" id="223922"><span class="nick" style="color:#6d2462"><a href="#223922" label="[22:39:22]">&lt;janneke&gt;</a></span><span class="message">also, we cannot use git in a bootstrap build</span></div><div class="line" id="223940"><span class="nick" style="color:#6d2462"><a href="#223940" label="[22:39:40]">&lt;janneke&gt;</a></span><span class="message">so, the guix m2-planet-boot package needs to have multiple tarball sources</span></div><div class="line" id="223955"><span class="nick" style="color:#6d2462"><a href="#223955" label="[22:39:55]">&lt;janneke&gt;</a></span><span class="message">but that works pretty neatly indeed</span></div><div class="line" id="224025"><span class="nick" style="color:#389600"><a href="#224025" label="[22:40:25]">&lt;OriansJ&gt;</a></span><span class="message">or just one tar</span></div><div class="line" id="224042"><span class="nick" style="color:#389600"><a href="#224042" label="[22:40:42]">&lt;OriansJ&gt;</a></span><span class="message">as it is the bootstrap of guix</span></div><div class="line" id="224046"><span class="nick" style="color:#6d2462"><a href="#224046" label="[22:40:46]">&lt;janneke&gt;</a></span><span class="message">i guess for porting to new systems, e.g. for fossy, this is real convenient -- first to understand and possibly adaapt</span></div><div class="line" id="224109"><span class="nick" style="color:#6d2462"><a href="#224109" label="[22:41:09]">&lt;janneke&gt;</a></span><span class="message">meh, i'd like separate tarballs better, preferrably released tarballs</span></div><div class="line" id="224111"><span class="nick" style="color:#389600"><a href="#224111" label="[22:41:11]">&lt;OriansJ&gt;</a></span><span class="message">janneke: mescc-tools-seed has a pattern for new systems too</span></div><div class="line" id="224120"><span class="nick" style="color:#6d2462"><a href="#224120" label="[22:41:20]">&lt;janneke&gt;</a></span><span class="message">=&gt; /gnu/store/mq9nw4jp0qngq3jhhyq4krjdxldqw0zv-mes-boot-0.22-303-g54e1ebad9</span></div><div class="line" id="224124"><span class="nick" style="color:#6d2462"><a href="#224124" label="[22:41:24]">&lt;janneke&gt;</a></span><span class="message">\o/</span></div><div class="line" id="224134"><span class="nick" style="color:#6d2462"><a href="#224134" label="[22:41:34]">&lt;janneke&gt;</a></span><span class="message">(but with the gcc-built m2-planet hack)</span></div><div class="line" id="224151"><span class="nick" style="color:#6d2462"><a href="#224151" label="[22:41:51]">&lt;janneke&gt;</a></span><span class="message">now for a mes.M1 comparison</span></div><div class="line" id="224218"><span class="nick" style="color:#389600"><a href="#224218" label="[22:42:18]">&lt;OriansJ&gt;</a></span><span class="message">simple sha256sum should show matching results</span></div><div class="line" id="224312"><span class="nick" style="color:#389600"><a href="#224312" label="[22:43:12]">&lt;OriansJ&gt;</a></span><span class="message">yt: I am going to need your help with updating the aarch64 checksums of mescc-tools-seed in a little bit</span></div><div class="line" id="224348"><span class="nick" style="color:#389600"><a href="#224348" label="[22:43:48]">&lt;OriansJ&gt;</a></span><span class="message">janneke: also note they are just git submodules</span></div><div class="line" id="224502"><span class="nick" style="color:#389600"><a href="#224502" label="[22:45:02]">&lt;OriansJ&gt;</a></span><span class="message">speaking of which, I really probably should try to get bootstrap-seeds into savannah</span></div><div class="line" id="224515"><span class="nick" style="color:#389600"><a href="#224515" label="[22:45:15]">&lt;OriansJ&gt;</a></span><span class="message">and the rest of the pieces too</span></div><div class="line" id="225122"><span class="nick" style="color:#6d2462"><a href="#225122" label="[22:51:22]">&lt;janneke&gt;</a></span><span class="message">we should probably rename mescc-tools-seed, it's become a misnomer i guess</span></div><div class="line" id="225139"><span class="nick" style="color:#6d2462"><a href="#225139" label="[22:51:39]">&lt;janneke&gt;</a></span><span class="message">i'm quite happy with that, real small separate seeds</span></div><div class="line" id="225158"><span class="nick" style="color:#6d2462"><a href="#225158" label="[22:51:58]">&lt;janneke&gt;</a></span><span class="message">mescc-tools-seed is now a source-only package, right?</span></div><div class="line" id="225234"><span class="nick" style="color:#389600"><a href="#225234" label="[22:52:34]">&lt;OriansJ&gt;</a></span><span class="message">janneke: that is correctly the only binaries are in the bootstrap-sseds submodule</span></div><div class="line" id="225401"><span class="nick" style="color:#6d2462"><a href="#225401" label="[22:54:01]">&lt;janneke&gt;</a></span><span class="message">yes, that's beautiful</span></div><div class="line" id="231000"><span class="nick" style="color:#6d2462"><a href="#231000" label="[23:10:00]">&lt;janneke&gt;</a></span><span class="message"> <a rel="nofollow" href="https://gitlab.com/janneke/guix/-/tree/wip-full-source-bootstrap">https://gitlab.com/janneke/guix/-/tree/wip-full-source-bootstrap</a> </span></div><div class="line" id="231006"><span class="nick" style="color:#6d2462"><a href="#231006" label="[23:10:06]">&lt;janneke&gt;</a></span><span class="message">=&gt; /gnu/store/21dbdsc0v7ivm141xf50pd6fb8n7zhsi-mes-boot-0.22-303-g54e1ebad9</span></div><div class="line" id="231047"><span class="nick" style="color:#6d2462"><a href="#231047" label="[23:10:47]">&lt;janneke&gt;</a></span><span class="message">(this is with the gcc cheat, but we can compare lib/cache/mes.M1)</span></div><div class="line" id="233602"><span class="nick" style="color:#389600"><a href="#233602" label="[23:36:02]">&lt;OriansJ&gt;</a></span><span class="message">yt: could you please update the AArch64 mescc-tools-seed</span></div><div class="line" id="235456"><span class="nick" style="color:#d9d9d9"><a href="#235456" label="[23:54:56]">&lt;yt_&gt;</a></span><span class="message">OriansJ: sure thing</span></div><br /></div></body></html>