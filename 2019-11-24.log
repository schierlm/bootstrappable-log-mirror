<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2019-11-24.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000050"><span class="nick" style="color:#389600"><a href="#000050" label="[00:00:50]">&lt;vagrantc&gt;</a></span><span class="message">janneke: i apparently forgot about the file collisions with mes and libc6-dev and such in /usr/lib/&lt;triplet&gt;/</span></div><div class="line" id="000113"><span class="nick" style="color:#389600"><a href="#000113" label="[00:01:13]">&lt;vagrantc&gt;</a></span><span class="message"> <a rel="nofollow" href="https://bugs.debian.org/945196">https://bugs.debian.org/945196</a> </span></div><div class="line" id="000206"><span class="nick" style="color:#389600"><a href="#000206" label="[00:02:06]">&lt;vagrantc&gt;</a></span><span class="message">it occurred to me at some point ... not sure if those can be moved elsewhere meaningfully</span></div><div class="line" id="000615"><span class="nick" style="color:#389600"><a href="#000615" label="[00:06:15]">&lt;vagrantc&gt;</a></span><span class="message">i can obviously move them around in the package itself</span></div><div class="line" id="000624"><span class="nick" style="color:#389600"><a href="#000624" label="[00:06:24]">&lt;vagrantc&gt;</a></span><span class="message">but maybe that will break it?</span></div><div class="line" id="000722"><span class="nick" style="color:#2e2a4a"><a href="#000722" label="[00:07:22]">&lt;oriansj&gt;</a></span><span class="message">vagrantc: actually no</span></div><div class="line" id="000818"><span class="nick" style="color:#2e2a4a"><a href="#000818" label="[00:08:18]">&lt;oriansj&gt;</a></span><span class="message">all M1 based binaries are location independent and include their own library can can be treated as standalone static binaries</span></div><div class="line" id="000943"><span class="nick" style="color:#2e2a4a"><a href="#000943" label="[00:09:43]">&lt;oriansj&gt;</a></span><span class="message">the contents of crt1.o if I remember correctly are hex2</span></div><div class="line" id="001049"><span class="nick" style="color:#389600"><a href="#001049" label="[00:10:49]">&lt;vagrantc&gt;</a></span><span class="message">ok, then i can just move the files around or pass a different --libdir= argument</span></div><div class="line" id="002216"><span class="nick" style="color:#2e2a4a"><a href="#002216" label="[00:22:16]">&lt;oriansj&gt;</a></span><span class="message">greetings smithras</span></div><div class="line" id="002242"><span class="nick" style="color:#6b8072"><a href="#002242" label="[00:22:42]">*</a></span><span class="message">vagrantc waves</span></div><div class="line" id="002304"><span class="nick" style="color:#389600"><a href="#002304" label="[00:23:04]">&lt;vagrantc&gt;</a></span><span class="message">notable overlap with #guix here :)</span></div><div class="line" id="002332"><span class="nick" style="color:#80b1d3"><a href="#002332" label="[00:23:32]">&lt;smithras&gt;</a></span><span class="message">hello!</span></div><div class="line" id="002429"><span class="nick" style="color:#2e2a4a"><a href="#002429" label="[00:24:29]">&lt;oriansj&gt;</a></span><span class="message">one could say this was spawned from me spamming #guix about the bootstrap seeds and civodul getting annoyed</span></div><div class="line" id="011846"><span class="nick" style="color:#2e2a4a"><a href="#011846" label="[01:18:46]">&lt;oriansj&gt;</a></span><span class="message">I honestly think janneke was the first person on #guix who actually took my plan seriously.</span></div><div class="line" id="011927"><span class="nick" style="color:#389600"><a href="#011927" label="[01:19:27]">&lt;vagrantc&gt;</a></span><span class="message">oriansj: what timeframe was that?</span></div><div class="line" id="012008"><span class="nick" style="color:#389600"><a href="#012008" label="[01:20:08]">&lt;vagrantc&gt;</a></span><span class="message">i remember civodul and janneke talking about &quot;bootstrappable.org&quot; at the reproducible builds summit in 2016</span></div><div class="line" id="012121"><span class="nick" style="color:#389600"><a href="#012121" label="[01:21:21]">&lt;vagrantc&gt;</a></span><span class="message">looks like the initial mes commit was may 2016</span></div><div class="line" id="012230"><span class="nick" style="color:#2e2a4a"><a href="#012230" label="[01:22:30]">&lt;oriansj&gt;</a></span><span class="message">vagrantc: about 1 year before janneke's FOSDEM talk that got me to reach out to janneke for the first time</span></div><div class="line" id="012537"><span class="nick" style="color:#2e2a4a"><a href="#012537" label="[01:25:37]">&lt;oriansj&gt;</a></span><span class="message">one could find it in the #guix logs</span></div><div class="line" id="013105"><span class="nick" style="color:#2e2a4a"><a href="#013105" label="[01:31:05]">&lt;oriansj&gt;</a></span><span class="message">stage0's first commit was may 1st 2016 and that was about ~1 Month after I showed my initial hex0 in #guix and got into a big argument with civodul</span></div><div class="line" id="013139"><span class="nick" style="color:#389600"><a href="#013139" label="[01:31:39]">&lt;vagrantc&gt;</a></span><span class="message">civodul seems to have come around on the idea since :)</span></div><div class="line" id="013309"><span class="nick" style="color:#2e2a4a"><a href="#013309" label="[01:33:09]">&lt;oriansj&gt;</a></span><span class="message">honestly, it kind of surprised me when I first saw that because he seemed to believe this was impossible and would never work and the best we could do involved building gcc until the checksum stopped changing</span></div><div class="line" id="013344"><span class="nick" style="color:#2e2a4a"><a href="#013344" label="[01:33:44]">&lt;oriansj&gt;</a></span><span class="message">FOSDEM 2017 was when I first discovered janneke's work</span></div><div class="line" id="013527"><span class="nick" style="color:#2e2a4a"><a href="#013527" label="[01:35:27]">&lt;oriansj&gt;</a></span><span class="message">and I sent him an email on March 30th and he replied back on March 31st and we have been working together ever since</span></div><div class="line" id="013824"><span class="nick" style="color:#2e2a4a"><a href="#013824" label="[01:38:24]">&lt;oriansj&gt;</a></span><span class="message">at which point I already bootstrapped all the way up to hex2+M0+FORTH+Slow_lisp</span></div><div class="line" id="013924"><span class="nick" style="color:#6d2462"><a href="#013924" label="[01:39:24]">&lt;fosslinux&gt;</a></span><span class="message">is slow_lisp the stage0 lisp interpreter?</span></div><div class="line" id="013958"><span class="nick" style="color:#2e2a4a"><a href="#013958" label="[01:39:58]">&lt;oriansj&gt;</a></span><span class="message">fosslinux: the first stage0 lisp interpreter; now radically reengineered in C</span></div><div class="line" id="014021"><span class="nick" style="color:#6d2462"><a href="#014021" label="[01:40:21]">&lt;fosslinux&gt;</a></span><span class="message">m2-planet C or ANSI C?</span></div><div class="line" id="014023"><span class="nick" style="color:#2e2a4a"><a href="#014023" label="[01:40:23]">&lt;oriansj&gt;</a></span><span class="message">I literally wasted about 1 year trying to get a sufficient Lisp in Assembly</span></div><div class="line" id="014039"><span class="nick" style="color:#2e2a4a"><a href="#014039" label="[01:40:39]">&lt;oriansj&gt;</a></span><span class="message">fosslinux: M2-Planet C is a subset of ANSI C</span></div><div class="line" id="014100"><span class="nick" style="color:#2e2a4a"><a href="#014100" label="[01:41:00]">&lt;oriansj&gt;</a></span><span class="message">but yes it is written in the subset provided by M2-Planet</span></div><div class="line" id="014105"><span class="nick" style="color:#6d2462"><a href="#014105" label="[01:41:05]">&lt;fosslinux&gt;</a></span><span class="message">right</span></div><div class="line" id="014116"><span class="nick" style="color:#2e2a4a"><a href="#014116" label="[01:41:16]">&lt;oriansj&gt;</a></span><span class="message">that way people can work on it with GCC</span></div><div class="line" id="014140"><span class="nick" style="color:#2e2a4a"><a href="#014140" label="[01:41:40]">&lt;oriansj&gt;</a></span><span class="message">and I can still bootstrap it from M2-Planet when we need to finish the bootstrap entirely</span></div><div class="line" id="014232"><span class="nick" style="color:#6d2462"><a href="#014232" label="[01:42:32]">&lt;fosslinux&gt;</a></span><span class="message">so I'm slowly coming to understand the bootstrap chain</span></div><div class="line" id="014250"><span class="nick" style="color:#2e2a4a"><a href="#014250" label="[01:42:50]">&lt;oriansj&gt;</a></span><span class="message">basically I learned the really really hard way, that scheme is easier to make in C than in Assembly</span></div><div class="line" id="014258"><span class="nick" style="color:#6d2462"><a href="#014258" label="[01:42:58]">&lt;fosslinux&gt;</a></span><span class="message">my question is what is still missing</span></div><div class="line" id="014322"><span class="nick" style="color:#2e2a4a"><a href="#014322" label="[01:43:22]">&lt;oriansj&gt;</a></span><span class="message">fosslinux: just making slow_lisp good enough to run MesCC and Guix</span></div><div class="line" id="014339"><span class="nick" style="color:#2e2a4a"><a href="#014339" label="[01:43:39]">&lt;oriansj&gt;</a></span><span class="message">which is entirely work to be done in C (M2-Planet's subset of course)</span></div><div class="line" id="014348"><span class="nick" style="color:#6d2462"><a href="#014348" label="[01:43:48]">&lt;fosslinux&gt;</a></span><span class="message">oriansj: is slow_lisp as part of mes-m2</span></div><div class="line" id="014354"><span class="nick" style="color:#6d2462"><a href="#014354" label="[01:43:54]">&lt;fosslinux&gt;</a></span><span class="message">a part*</span></div><div class="line" id="014410"><span class="nick" style="color:#2e2a4a"><a href="#014410" label="[01:44:10]">&lt;oriansj&gt;</a></span><span class="message">fosslinux: it is the replacement for mes-m2</span></div><div class="line" id="014416"><span class="nick" style="color:#6d2462"><a href="#014416" label="[01:44:16]">&lt;fosslinux&gt;</a></span><span class="message">ahhh</span></div><div class="line" id="014432"><span class="nick" style="color:#2e2a4a"><a href="#014432" label="[01:44:32]">&lt;oriansj&gt;</a></span><span class="message">because getting Mes.c buildable by M2-Planet broke alot</span></div><div class="line" id="014450"><span class="nick" style="color:#2e2a4a"><a href="#014450" label="[01:44:50]">&lt;oriansj&gt;</a></span><span class="message">but slow_lisp was always buildable by M2-Planet</span></div><div class="line" id="014501"><span class="nick" style="color:#2e2a4a"><a href="#014501" label="[01:45:01]">&lt;oriansj&gt;</a></span><span class="message">and much simpler to understand and debug</span></div><div class="line" id="014517"><span class="nick" style="color:#6d2462"><a href="#014517" label="[01:45:17]">&lt;fosslinux&gt;</a></span><span class="message">oriansj: and slow_lisp is written in the m2-planet subset?</span></div><div class="line" id="014527"><span class="nick" style="color:#2e2a4a"><a href="#014527" label="[01:45:27]">&lt;oriansj&gt;</a></span><span class="message">yes</span></div><div class="line" id="014604"><span class="nick" style="color:#2e2a4a"><a href="#014604" label="[01:46:04]">&lt;oriansj&gt;</a></span><span class="message">So all I need is people to write good scheme tests and I'll build the functionality required to get the results identical to guile's output</span></div><div class="line" id="014613"><span class="nick" style="color:#6d2462"><a href="#014613" label="[01:46:13]">&lt;fosslinux&gt;</a></span><span class="message">are there any particular gotchas for working in m2-planet?</span></div><div class="line" id="014712"><span class="nick" style="color:#2e2a4a"><a href="#014712" label="[01:47:12]">&lt;oriansj&gt;</a></span><span class="message">fosslinux: No C macros of any kind # is a line comment and // is ignored to allow M2-Planet CONSTANT to be in the same file with #define constants 1 sort of things</span></div><div class="line" id="014740"><span class="nick" style="color:#2e2a4a"><a href="#014740" label="[01:47:40]">&lt;oriansj&gt;</a></span><span class="message">hence why you see // CONSTANT foo 1 and #define foo 1 together</span></div><div class="line" id="014746"><span class="nick" style="color:#6d2462"><a href="#014746" label="[01:47:46]">&lt;fosslinux&gt;</a></span><span class="message">I guess after the bootstrap chain is finished we still need things like bootloader, kernel and shell</span></div><div class="line" id="014800"><span class="nick" style="color:#6d2462"><a href="#014800" label="[01:48:00]">&lt;fosslinux&gt;</a></span><span class="message">right</span></div><div class="line" id="014803"><span class="nick" style="color:#2e2a4a"><a href="#014803" label="[01:48:03]">&lt;oriansj&gt;</a></span><span class="message">#define is needed for gcc and CONSTANT is the M2-Planet equivelent</span></div><div class="line" id="014837"><span class="nick" style="color:#6d2462"><a href="#014837" label="[01:48:37]">&lt;fosslinux&gt;</a></span><span class="message">ah so it's compatible with both m2-planet and gcc</span></div><div class="line" id="014840"><span class="nick" style="color:#2e2a4a"><a href="#014840" label="[01:48:40]">&lt;oriansj&gt;</a></span><span class="message">actually we have scheme replacements for the shell which will be running on slow_lisp by the time we are done</span></div><div class="line" id="014848"><span class="nick" style="color:#6d2462"><a href="#014848" label="[01:48:48]">&lt;fosslinux&gt;</a></span><span class="message">oh nice!</span></div><div class="line" id="014925"><span class="nick" style="color:#2e2a4a"><a href="#014925" label="[01:49:25]">&lt;oriansj&gt;</a></span><span class="message">basically the only bit of M2-Planet that isn't compatible with gcc is the inline assembly</span></div><div class="line" id="014946"><span class="nick" style="color:#2e2a4a"><a href="#014946" label="[01:49:46]">&lt;oriansj&gt;</a></span><span class="message">but that is only needed for implementing syscalls like write or execve</span></div><div class="line" id="014955"><span class="nick" style="color:#6d2462"><a href="#014955" label="[01:49:55]">&lt;fosslinux&gt;</a></span><span class="message">haha &quot;kaem is the world's worst build tool.&quot;</span></div><div class="line" id="015044"><span class="nick" style="color:#2e2a4a"><a href="#015044" label="[01:50:44]">&lt;oriansj&gt;</a></span><span class="message">well no variables, only comments and commands to do real work</span></div><div class="line" id="015140"><span class="nick" style="color:#6d2462"><a href="#015140" label="[01:51:40]">&lt;fosslinux&gt;</a></span><span class="message">I guess kaem is also m2-planet subset</span></div><div class="line" id="015221"><span class="nick" style="color:#2e2a4a"><a href="#015221" label="[01:52:21]">&lt;oriansj&gt;</a></span><span class="message">fosslinux: all of the C code I have written in stage0, mescc-tools, M2-Planet and Mes-m2 are that subset</span></div><div class="line" id="015242"><span class="nick" style="color:#6d2462"><a href="#015242" label="[01:52:42]">&lt;fosslinux&gt;</a></span><span class="message">m2-planet is great</span></div><div class="line" id="015243"><span class="nick" style="color:#2e2a4a"><a href="#015243" label="[01:52:43]">&lt;oriansj&gt;</a></span><span class="message">it honestly is not hard to restrict ones self to that subset</span></div><div class="line" id="015250"><span class="nick" style="color:#6d2462"><a href="#015250" label="[01:52:50]">&lt;fosslinux&gt;</a></span><span class="message">it makes bootstrapping so much easier</span></div><div class="line" id="015254"><span class="nick" style="color:#2e2a4a"><a href="#015254" label="[01:52:54]">&lt;oriansj&gt;</a></span><span class="message">fosslinux: thank you</span></div><div class="line" id="015318"><span class="nick" style="color:#6d2462"><a href="#015318" label="[01:53:18]">&lt;fosslinux&gt;</a></span><span class="message">Looking at the bootstrap chain writing all these things in assembly would be hell</span></div><div class="line" id="015318"><span class="nick" style="color:#2e2a4a"><a href="#015318" label="[01:53:18]">&lt;oriansj&gt;</a></span><span class="message">implementing it in assembly was fun (the cc_* family)</span></div><div class="line" id="015340"><span class="nick" style="color:#6d2462"><a href="#015340" label="[01:53:40]">&lt;fosslinux&gt;</a></span><span class="message">hehe</span></div><div class="line" id="015408"><span class="nick" style="color:#2e2a4a"><a href="#015408" label="[01:54:08]">&lt;oriansj&gt;</a></span><span class="message">well I kinda did that too if you take a look in mescc-tools-seed</span></div><div class="line" id="015500"><span class="nick" style="color:#2e2a4a"><a href="#015500" label="[01:55:00]">&lt;oriansj&gt;</a></span><span class="message">hex2's minimal x86 core to build M1's minimal x86 core (M0) and then build cc_x86 and everything else is C code from there</span></div><div class="line" id="015659"><span class="nick" style="color:#6d2462"><a href="#015659" label="[01:56:59]">&lt;fosslinux&gt;</a></span><span class="message">yep</span></div><div class="line" id="015734"><span class="nick" style="color:#2e2a4a"><a href="#015734" label="[01:57:34]">&lt;oriansj&gt;</a></span><span class="message">I took alot of time and effort to try to make it as trivial as possible for anyone to know how it all works</span></div><div class="line" id="015804"><span class="nick" style="color:#6d2462"><a href="#015804" label="[01:58:04]">&lt;fosslinux&gt;</a></span><span class="message">Well it worked because I could understand it relatively easily</span></div><div class="line" id="015813"><span class="nick" style="color:#2e2a4a"><a href="#015813" label="[01:58:13]">&lt;oriansj&gt;</a></span><span class="message">Lack of clarity about any detail is a major bug that needs to be fixed</span></div><div class="line" id="015818"><span class="nick" style="color:#80b1d3"><a href="#015818" label="[01:58:18]">&lt;smithras&gt;</a></span><span class="message">It's a little incredible that it can be made simple enough for one person to meaningfully go through and check it all</span></div><div class="line" id="015828"><span class="nick" style="color:#6d2462"><a href="#015828" label="[01:58:28]">&lt;fosslinux&gt;</a></span><span class="message">^^</span></div><div class="line" id="015851"><span class="nick" style="color:#2e2a4a"><a href="#015851" label="[01:58:51]">&lt;oriansj&gt;</a></span><span class="message">well the most important part of bootstrapping is I want absolutely no one to trust me</span></div><div class="line" id="015925"><span class="nick" style="color:#2e2a4a"><a href="#015925" label="[01:59:25]">&lt;oriansj&gt;</a></span><span class="message">Assume I am an evil genius inserting bad things;</span></div><div class="line" id="015957"><span class="nick" style="color:#6d2462"><a href="#015957" label="[01:59:57]">&lt;fosslinux&gt;</a></span><span class="message">oriansj: is blood-elf the magic that changes what all the hex stuff into elf binaries</span></div><div class="line" id="020008"><span class="nick" style="color:#2e2a4a"><a href="#020008" label="[02:00:08]">&lt;oriansj&gt;</a></span><span class="message">fosslinux: no</span></div><div class="line" id="020011"><span class="nick" style="color:#6d2462"><a href="#020011" label="[02:00:11]">&lt;fosslinux&gt;</a></span><span class="message">ou</span></div><div class="line" id="020018"><span class="nick" style="color:#6d2462"><a href="#020018" label="[02:00:18]">&lt;fosslinux&gt;</a></span><span class="message">oh</span></div><div class="line" id="020024"><span class="nick" style="color:#2e2a4a"><a href="#020024" label="[02:00:24]">&lt;oriansj&gt;</a></span><span class="message">blood-elf just generates dwarf stubs</span></div><div class="line" id="020030"><span class="nick" style="color:#6d2462"><a href="#020030" label="[02:00:30]">&lt;fosslinux&gt;</a></span><span class="message">right</span></div><div class="line" id="020054"><span class="nick" style="color:#6d2462"><a href="#020054" label="[02:00:54]">&lt;fosslinux&gt;</a></span><span class="message">how do those tapes from stage0 get changed into elfs</span></div><div class="line" id="020100"><span class="nick" style="color:#2e2a4a"><a href="#020100" label="[02:01:00]">&lt;oriansj&gt;</a></span><span class="message">that way when you do objdump -d binary, it has useful names and instruction decoding to show you</span></div><div class="line" id="020116"><span class="nick" style="color:#80b1d3"><a href="#020116" label="[02:01:16]">&lt;smithras&gt;</a></span><span class="message">I'm looking forward to eventually playing with this project, unfortunately exams have stolen all of my hacking/exploration time at the moment :(</span></div><div class="line" id="020126"><span class="nick" style="color:#2e2a4a"><a href="#020126" label="[02:01:26]">&lt;oriansj&gt;</a></span><span class="message">fosslinux:  the tapes in stage0 are for the bare metal and the elfs are for the linux bootstrap</span></div><div class="line" id="020157"><span class="nick" style="color:#6d2462"><a href="#020157" label="[02:01:57]">&lt;fosslinux&gt;</a></span><span class="message">so for Linux bootstrap mescc-tools-seed is what I should look at right</span></div><div class="line" id="020204"><span class="nick" style="color:#2e2a4a"><a href="#020204" label="[02:02:04]">&lt;oriansj&gt;</a></span><span class="message">basically the Linux bootstrap pieces are for those who feel safe starting on a linux blob with nothing else</span></div><div class="line" id="020221"><span class="nick" style="color:#2e2a4a"><a href="#020221" label="[02:02:21]">&lt;oriansj&gt;</a></span><span class="message">the stage0 pieces are all bare metal</span></div><div class="line" id="020247"><span class="nick" style="color:#2e2a4a"><a href="#020247" label="[02:02:47]">&lt;oriansj&gt;</a></span><span class="message">hence the next stage0 piece is a posix kernel that cc_* can build</span></div><div class="line" id="020307"><span class="nick" style="color:#2e2a4a"><a href="#020307" label="[02:03:07]">&lt;oriansj&gt;</a></span><span class="message">then one doesn't have to trust Linux at all</span></div><div class="line" id="020310"><span class="nick" style="color:#6d2462"><a href="#020310" label="[02:03:10]">&lt;fosslinux&gt;</a></span><span class="message">the next one to be built?</span></div><div class="line" id="020342"><span class="nick" style="color:#2e2a4a"><a href="#020342" label="[02:03:42]">&lt;oriansj&gt;</a></span><span class="message">fosslinux: this is a long term project routing out places where attacks could hide</span></div><div class="line" id="020410"><span class="nick" style="color:#6d2462"><a href="#020410" label="[02:04:10]">&lt;fosslinux&gt;</a></span><span class="message">yeah I get that, but this POSIX kernel dosent exist yet right</span></div><div class="line" id="020413"><span class="nick" style="color:#2e2a4a"><a href="#020413" label="[02:04:13]">&lt;oriansj&gt;</a></span><span class="message">the mescc-tools-seed is just to give guix their 257byte bootstrap seed</span></div><div class="line" id="020431"><span class="nick" style="color:#2e2a4a"><a href="#020431" label="[02:04:31]">&lt;oriansj&gt;</a></span><span class="message">fosslinux: because I nor anyone else has started writing it</span></div><div class="line" id="020456"><span class="nick" style="color:#2e2a4a"><a href="#020456" label="[02:04:56]">&lt;oriansj&gt;</a></span><span class="message">now in theory one could find a Posix kernel written in C and convert it to M2-Planet</span></div><div class="line" id="020506"><span class="nick" style="color:#2e2a4a"><a href="#020506" label="[02:05:06]">&lt;oriansj&gt;</a></span><span class="message">but I haven't found any simple enough</span></div><div class="line" id="020516"><span class="nick" style="color:#2e2a4a"><a href="#020516" label="[02:05:16]">&lt;oriansj&gt;</a></span><span class="message">yet</span></div><div class="line" id="020624"><span class="nick" style="color:#6d2462"><a href="#020624" label="[02:06:24]">&lt;fosslinux&gt;</a></span><span class="message">I see</span></div><div class="line" id="020726"><span class="nick" style="color:#2e2a4a"><a href="#020726" label="[02:07:26]">&lt;oriansj&gt;</a></span><span class="message">just like how the knight hardware in stage0 isn't in TTL yet (it is delayed so we can get the guix win done)</span></div><div class="line" id="020857"><span class="nick" style="color:#80b1d3"><a href="#020857" label="[02:08:57]">&lt;smithras&gt;</a></span><span class="message">oriansj: even though the posix kernel is still TBD, I imagine we could still semi-verify the stage0 bootstrap by running it on linux,bsd, etc and comparing results?</span></div><div class="line" id="020937"><span class="nick" style="color:#6d2462"><a href="#020937" label="[02:09:37]">&lt;fosslinux&gt;</a></span><span class="message">is it possible to run stage0 from the initial hex0 on x86 today? I guess this is kind of out of scope in a way but how would someone bootstrap up to cc_x86, seeing as we no longer use punch cards and tapes?</span></div><div class="line" id="020946"><span class="nick" style="color:#2e2a4a"><a href="#020946" label="[02:09:46]">&lt;oriansj&gt;</a></span><span class="message">smithras: yes that is true and the results are the same on BSDs</span></div><div class="line" id="021035"><span class="nick" style="color:#2e2a4a"><a href="#021035" label="[02:10:35]">&lt;oriansj&gt;</a></span><span class="message">fosslinux: just git clone <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-seed">https://github.com/oriansj/mescc-tools-seed</a> </span></div><div class="line" id="021045"><span class="nick" style="color:#2e2a4a"><a href="#021045" label="[02:10:45]">&lt;oriansj&gt;</a></span><span class="message">cd in x86 or AMD64</span></div><div class="line" id="021108"><span class="nick" style="color:#2e2a4a"><a href="#021108" label="[02:11:08]">&lt;oriansj&gt;</a></span><span class="message">../kaem-optional-seed --strict --verbose and you are done</span></div><div class="line" id="021140"><span class="nick" style="color:#2e2a4a"><a href="#021140" label="[02:11:40]">&lt;oriansj&gt;</a></span><span class="message">everything from hex0 to M2-Planet on x86 and AMD64 is done</span></div><div class="line" id="021157"><span class="nick" style="color:#2e2a4a"><a href="#021157" label="[02:11:57]">&lt;oriansj&gt;</a></span><span class="message">M2-Planet to a broken Mes.c is done</span></div><div class="line" id="021207"><span class="nick" style="color:#2e2a4a"><a href="#021207" label="[02:12:07]">&lt;oriansj&gt;</a></span><span class="message">M2-Planet to slow_lisp is done</span></div><div class="line" id="021209"><span class="nick" style="color:#6d2462"><a href="#021209" label="[02:12:09]">&lt;fosslinux&gt;</a></span><span class="message">yeah but then isn't the kernel and shell trusted? I guess this is the same problem we were talking earlier</span></div><div class="line" id="021301"><span class="nick" style="color:#2e2a4a"><a href="#021301" label="[02:13:01]">&lt;oriansj&gt;</a></span><span class="message">fosslinux: only the kernel is trusted (as the kaem-optional-seed doesn't use the shell)</span></div><div class="line" id="021416"><span class="nick" style="color:#2e2a4a"><a href="#021416" label="[02:14:16]">&lt;oriansj&gt;</a></span><span class="message">that being said the stage0 bare metal cc_x86 build of x86 M2-Planet is identical to the mescc-tools-seed generated x86 M2-Planet</span></div><div class="line" id="021444"><span class="nick" style="color:#2e2a4a"><a href="#021444" label="[02:14:44]">&lt;oriansj&gt;</a></span><span class="message">(because M2-Planet is cross-platform reproducible)</span></div><div class="line" id="021512"><span class="nick" style="color:#80b1d3"><a href="#021512" label="[02:15:12]">&lt;smithras&gt;</a></span><span class="message">So would the end goal be a custom minimalist x86 board specifically for running the hex0 editor off of a tape without a running kernel?</span></div><div class="line" id="021533"><span class="nick" style="color:#2e2a4a"><a href="#021533" label="[02:15:33]">&lt;oriansj&gt;</a></span><span class="message">smithras: no; knight in TTL</span></div><div class="line" id="021559"><span class="nick" style="color:#2e2a4a"><a href="#021559" label="[02:15:59]">&lt;oriansj&gt;</a></span><span class="message">hand toggle in the hex0-monitor</span></div><div class="line" id="021628"><span class="nick" style="color:#2e2a4a"><a href="#021628" label="[02:16:28]">&lt;oriansj&gt;</a></span><span class="message">and the steps are rather simple to build everything else</span></div><div class="line" id="021709"><span class="nick" style="color:#80b1d3"><a href="#021709" label="[02:17:09]">&lt;smithras&gt;</a></span><span class="message">oriansj: sorry, what does TTL stand for?</span></div><div class="line" id="021725"><span class="nick" style="color:#2e2a4a"><a href="#021725" label="[02:17:25]">&lt;oriansj&gt;</a></span><span class="message">Transistor Transistor Logic</span></div><div class="line" id="021745"><span class="nick" style="color:#2e2a4a"><a href="#021745" label="[02:17:45]">&lt;oriansj&gt;</a></span><span class="message">think building directly in NAND, AND, OR and XOR gates</span></div><div class="line" id="021802"><span class="nick" style="color:#80b1d3"><a href="#021802" label="[02:18:02]">&lt;smithras&gt;</a></span><span class="message">oriansj: oh okay that makes sense</span></div><div class="line" id="021830"><span class="nick" style="color:#80b1d3"><a href="#021830" label="[02:18:30]">&lt;smithras&gt;</a></span><span class="message">wow that would be quite the project</span></div><div class="line" id="021842"><span class="nick" style="color:#2e2a4a"><a href="#021842" label="[02:18:42]">&lt;oriansj&gt;</a></span><span class="message">is</span></div><div class="line" id="021920"><span class="nick" style="color:#80b1d3"><a href="#021920" label="[02:19:20]">&lt;smithras&gt;</a></span><span class="message">right, sorry :)</span></div><div class="line" id="022013"><span class="nick" style="color:#2e2a4a"><a href="#022013" label="[02:20:13]">&lt;oriansj&gt;</a></span><span class="message">The original plan was always assume nothing</span></div><div class="line" id="022056"><span class="nick" style="color:#2e2a4a"><a href="#022056" label="[02:20:56]">&lt;oriansj&gt;</a></span><span class="message">No kernel, no firmware, no bios and no microcode</span></div><div class="line" id="022116"><span class="nick" style="color:#2e2a4a"><a href="#022116" label="[02:21:16]">&lt;oriansj&gt;</a></span><span class="message">Nothing that can't be inspected by hand</span></div><div class="line" id="022209"><span class="nick" style="color:#234e69"><a href="#022209" label="[02:22:09]">&lt;xentrac&gt;</a></span><span class="message">oriansj: oh, really? I didn't think they'd written anything more complicated than dc in B</span></div><div class="line" id="022308"><span class="nick" style="color:#234e69"><a href="#022308" label="[02:23:08]">&lt;xentrac&gt;</a></span><span class="message">fwiw Jonathan Rees, who wrote &quot;A Security Kernel&quot;, was one of the authors of Macros That Work too</span></div><div class="line" id="022314"><span class="nick" style="color:#80b1d3"><a href="#022314" label="[02:23:14]">&lt;smithras&gt;</a></span><span class="message">There would be something really special about building that and then watching it build the foundation of the entire software ecosystem</span></div><div class="line" id="022355"><span class="nick" style="color:#234e69"><a href="#022355" label="[02:23:55]">&lt;xentrac&gt;</a></span><span class="message">but now I see that the B compiler was eventually rewritten in B</span></div><div class="line" id="022359"><span class="nick" style="color:#2e2a4a"><a href="#022359" label="[02:23:59]">&lt;oriansj&gt;</a></span><span class="message">xentrac: <a rel="nofollow" href="https://www.bell-labs.com/usr/dmr/www/chist.html">https://www.bell-labs.com/usr/dmr/www/chist.html</a> </span></div><div class="line" id="022429"><span class="nick" style="color:#2e2a4a"><a href="#022429" label="[02:24:29]">&lt;oriansj&gt;</a></span><span class="message">by Thompson no less</span></div><div class="line" id="022458"><span class="nick" style="color:#2e2a4a"><a href="#022458" label="[02:24:58]">&lt;oriansj&gt;</a></span><span class="message">smithras: well that is what everyone is going to get from guix &quot;real soon&quot;</span></div><div class="line" id="022613"><span class="nick" style="color:#2e2a4a"><a href="#022613" label="[02:26:13]">&lt;oriansj&gt;</a></span><span class="message">xentrac: basically B was used to build New B which instantly was used to build Embryonic C</span></div><div class="line" id="022623"><span class="nick" style="color:#2e2a4a"><a href="#022623" label="[02:26:23]">&lt;oriansj&gt;</a></span><span class="message">and everything was C from that point on</span></div><div class="line" id="022657"><span class="nick" style="color:#2e2a4a"><a href="#022657" label="[02:26:57]">&lt;oriansj&gt;</a></span><span class="message">So yeah, technically I might actually be the first dumbass to ever write a C compiler in assembly</span></div><div class="line" id="022758"><span class="nick" style="color:#2e2a4a"><a href="#022758" label="[02:27:58]">&lt;oriansj&gt;</a></span><span class="message">smithras: have you played with slow_lisp yet?</span></div><div class="line" id="022856"><span class="nick" style="color:#234e69"><a href="#022856" label="[02:28:56]">&lt;xentrac&gt;</a></span><span class="message">yeah, I see that you'reright!</span></div><div class="line" id="022905"><span class="nick" style="color:#234e69"><a href="#022905" label="[02:29:05]">&lt;xentrac&gt;</a></span><span class="message">I'm sure you're not the first</span></div><div class="line" id="022913"><span class="nick" style="color:#234e69"><a href="#022913" label="[02:29:13]">&lt;xentrac&gt;</a></span><span class="message">surely Turbo C was written in assembly, for example</span></div><div class="line" id="022916"><span class="nick" style="color:#80b1d3"><a href="#022916" label="[02:29:16]">&lt;smithras&gt;</a></span><span class="message">oriansj: not yet, I'm a bit late to the bootstrapping party :)</span></div><div class="line" id="022932"><span class="nick" style="color:#2e2a4a"><a href="#022932" label="[02:29:32]">&lt;oriansj&gt;</a></span><span class="message">smithras: <a rel="nofollow" href="https://github.com/oriansj/mes-m2">https://github.com/oriansj/mes-m2</a>  (checkout the slow_lisp branch)</span></div><div class="line" id="022949"><span class="nick" style="color:#234e69"><a href="#022949" label="[02:29:49]">&lt;xentrac&gt;</a></span><span class="message">hmm, maybe not, that was 1987</span></div><div class="line" id="023014"><span class="nick" style="color:#234e69"><a href="#023014" label="[02:30:14]">&lt;xentrac&gt;</a></span><span class="message">certainly there were plenty of Tiny C compilers for CP/M that were written in assembly, but maybe those don't count</span></div><div class="line" id="023050"><span class="nick" style="color:#80b1d3"><a href="#023050" label="[02:30:50]">&lt;smithras&gt;</a></span><span class="message">oriansj: thanks, will do!</span></div><div class="line" id="023054"><span class="nick" style="color:#2e2a4a"><a href="#023054" label="[02:30:54]">&lt;oriansj&gt;</a></span><span class="message">xentrac: The Tiny C compilers are all based on Cain C</span></div><div class="line" id="023100"><span class="nick" style="color:#80b1d3"><a href="#023100" label="[02:31:00]">&lt;smithras&gt;</a></span><span class="message">I need to get some sleep, so goodnight!</span></div><div class="line" id="023107"><span class="nick" style="color:#234e69"><a href="#023107" label="[02:31:07]">&lt;xentrac&gt;</a></span><span class="message">I don't know about Cain C</span></div><div class="line" id="023113"><span class="nick" style="color:#2e2a4a"><a href="#023113" label="[02:31:13]">&lt;oriansj&gt;</a></span><span class="message">which was built using an AT&amp;T C compiler</span></div><div class="line" id="023154"><span class="nick" style="color:#234e69"><a href="#023154" label="[02:31:54]">&lt;xentrac&gt;</a></span><span class="message">oh, Small C</span></div><div class="line" id="023311"><span class="nick" style="color:#2e2a4a"><a href="#023311" label="[02:33:11]">&lt;oriansj&gt;</a></span><span class="message">written by Ron Cain</span></div><div class="line" id="023316"><span class="nick" style="color:#2e2a4a"><a href="#023316" label="[02:33:16]">&lt;oriansj&gt;</a></span><span class="message">hence Cain C</span></div><div class="line" id="023317"><span class="nick" style="color:#234e69"><a href="#023317" label="[02:33:17]">&lt;xentrac&gt;</a></span><span class="message">right</span></div><div class="line" id="023322"><span class="nick" style="color:#234e69"><a href="#023322" label="[02:33:22]">&lt;xentrac&gt;</a></span><span class="message">well, it wasn't really C</span></div><div class="line" id="023404"><span class="nick" style="color:#2e2a4a"><a href="#023404" label="[02:34:04]">&lt;oriansj&gt;</a></span><span class="message">and it sure as shit wasn't written in assembly</span></div><div class="line" id="023438"><span class="nick" style="color:#234e69"><a href="#023438" label="[02:34:38]">&lt;xentrac&gt;</a></span><span class="message">it wasn't, that's true</span></div><div class="line" id="023512"><span class="nick" style="color:#234e69"><a href="#023512" label="[02:35:12]">&lt;xentrac&gt;</a></span><span class="message">but a lot of the people who worked on Tiny C compilers didn't have a C compiler or a machine that could run AT&amp;T C</span></div><div class="line" id="023530"><span class="nick" style="color:#2e2a4a"><a href="#023530" label="[02:35:30]">&lt;oriansj&gt;</a></span><span class="message">And I can not find nor anyone else I have talked to could find a C compiler written in Assembly</span></div><div class="line" id="023540"><span class="nick" style="color:#234e69"><a href="#023540" label="[02:35:40]">&lt;xentrac&gt;</a></span><span class="message">yeah, I'm less sure than I was :)</span></div><div class="line" id="023544"><span class="nick" style="color:#2e2a4a"><a href="#023544" label="[02:35:44]">&lt;oriansj&gt;</a></span><span class="message">but Pascal was readily availbe and so was basic</span></div><div class="line" id="023601"><span class="nick" style="color:#234e69"><a href="#023601" label="[02:36:01]">&lt;xentrac&gt;</a></span><span class="message">right, but it wasn't practical to write a C compiler in them on a CPM machine</span></div><div class="line" id="023629"><span class="nick" style="color:#234e69"><a href="#023629" label="[02:36:29]">&lt;xentrac&gt;</a></span><span class="message">Turbo Pascal compiled super fast but the code it emitted wasn't tight</span></div><div class="line" id="023653"><span class="nick" style="color:#2e2a4a"><a href="#023653" label="[02:36:53]">&lt;oriansj&gt;</a></span><span class="message">xentrac: Turbo Pascal was written in Assebmly</span></div><div class="line" id="023703"><span class="nick" style="color:#234e69"><a href="#023703" label="[02:37:03]">&lt;xentrac&gt;</a></span><span class="message">in general it's hard to get decent code out of a C or Pascal compiler on an 8-bit machine</span></div><div class="line" id="023706"><span class="nick" style="color:#234e69"><a href="#023706" label="[02:37:06]">&lt;xentrac&gt;</a></span><span class="message">yeah, I know</span></div><div class="line" id="023715"><span class="nick" style="color:#2e2a4a"><a href="#023715" label="[02:37:15]">&lt;oriansj&gt;</a></span><span class="message">but Turbo C was written in Turbo Pascal</span></div><div class="line" id="023716"><span class="nick" style="color:#234e69"><a href="#023716" label="[02:37:16]">&lt;xentrac&gt;</a></span><span class="message">that's why i was so sure Turbo C was written in assembly</span></div><div class="line" id="023719"><span class="nick" style="color:#234e69"><a href="#023719" label="[02:37:19]">&lt;xentrac&gt;</a></span><span class="message">was it?</span></div><div class="line" id="023723"><span class="nick" style="color:#2e2a4a"><a href="#023723" label="[02:37:23]">&lt;oriansj&gt;</a></span><span class="message">yeah</span></div><div class="line" id="023731"><span class="nick" style="color:#234e69"><a href="#023731" label="[02:37:31]">&lt;xentrac&gt;</a></span><span class="message">it was originally Wizard C</span></div><div class="line" id="023747"><span class="nick" style="color:#2e2a4a"><a href="#023747" label="[02:37:47]">&lt;oriansj&gt;</a></span><span class="message">that it was dog slow relative to Turbo pascal</span></div><div class="line" id="023809"><span class="nick" style="color:#234e69"><a href="#023809" label="[02:38:09]">&lt;xentrac&gt;</a></span><span class="message">not so Turbo :)</span></div><div class="line" id="023907"><span class="nick" style="color:#2e2a4a"><a href="#023907" label="[02:39:07]">&lt;oriansj&gt;</a></span><span class="message"> It ran in 384 kB of memory</span></div><div class="line" id="023925"><span class="nick" style="color:#234e69"><a href="#023925" label="[02:39:25]">&lt;xentrac&gt;</a></span><span class="message"> <a rel="nofollow" href="https://shape-of-code.coding-guidelines.com/2017/03/02/c-compilers-of-the-20th-century-running-on-microsoft-operating-systems/">https://shape-of-code.coding-guidelines.com/2017/03/02/c-compilers-of-the-20th-century-running-on-microsoft-operating-systems/</a>  is blogspam of an article that lists a bit over a dozen C compilers for machines in that epoch</span></div><div class="line" id="023930"><span class="nick" style="color:#2e2a4a"><a href="#023930" label="[02:39:30]">&lt;oriansj&gt;</a></span><span class="message">cc_x86 runs in 48KB</span></div><div class="line" id="024028"><span class="nick" style="color:#234e69"><a href="#024028" label="[02:40:28]">&lt;xentrac&gt;</a></span><span class="message">how much of C does it support?</span></div><div class="line" id="024045"><span class="nick" style="color:#2e2a4a"><a href="#024045" label="[02:40:45]">&lt;oriansj&gt;</a></span><span class="message">More than Turbo C did</span></div><div class="line" id="024113"><span class="nick" style="color:#234e69"><a href="#024113" label="[02:41:13]">&lt;xentrac&gt;</a></span><span class="message">really?</span></div><div class="line" id="024127"><span class="nick" style="color:#2e2a4a"><a href="#024127" label="[02:41:27]">&lt;oriansj&gt;</a></span><span class="message">yeah</span></div><div class="line" id="024155"><span class="nick" style="color:#2e2a4a"><a href="#024155" label="[02:41:55]">&lt;oriansj&gt;</a></span><span class="message">cc_x86 supports structs, unions, inline assembly, gotos</span></div><div class="line" id="024219"><span class="nick" style="color:#234e69"><a href="#024219" label="[02:42:19]">&lt;xentrac&gt;</a></span><span class="message">floating point?</span></div><div class="line" id="024245"><span class="nick" style="color:#234e69"><a href="#024245" label="[02:42:45]">&lt;xentrac&gt;</a></span><span class="message">Small-C was integer only</span></div><div class="line" id="024300"><span class="nick" style="color:#2e2a4a"><a href="#024300" label="[02:43:00]">&lt;oriansj&gt;</a></span><span class="message">no floating point in cc_*</span></div><div class="line" id="024320"><span class="nick" style="color:#2e2a4a"><a href="#024320" label="[02:43:20]">&lt;oriansj&gt;</a></span><span class="message">and Turbo C did have alot of optimizations</span></div><div class="line" id="024330"><span class="nick" style="color:#2e2a4a"><a href="#024330" label="[02:43:30]">&lt;oriansj&gt;</a></span><span class="message">and cc_x86 is optimization free</span></div><div class="line" id="024344"><span class="nick" style="color:#234e69"><a href="#024344" label="[02:43:44]">&lt;xentrac&gt;</a></span><span class="message">still counts</span></div><div class="line" id="024405"><span class="nick" style="color:#234e69"><a href="#024405" label="[02:44:05]">&lt;xentrac&gt;</a></span><span class="message">but strongly suggests that cc_x86 wasn't compiled with itself</span></div><div class="line" id="024431"><span class="nick" style="color:#2e2a4a"><a href="#024431" label="[02:44:31]">&lt;oriansj&gt;</a></span><span class="message">cc_x86 is a C compiler written in Assembly; so yeah</span></div><div class="line" id="024523"><span class="nick" style="color:#234e69"><a href="#024523" label="[02:45:23]">&lt;xentrac&gt;</a></span><span class="message">that's what I was suspecting from the 48KiB number</span></div><div class="line" id="024541"><span class="nick" style="color:#2e2a4a"><a href="#024541" label="[02:45:41]">&lt;oriansj&gt;</a></span><span class="message">That is what is required to build M2-Planet</span></div><div class="line" id="024547"><span class="nick" style="color:#234e69"><a href="#024547" label="[02:45:47]">&lt;xentrac&gt;</a></span><span class="message">:D</span></div><div class="line" id="024549"><span class="nick" style="color:#234e69"><a href="#024549" label="[02:45:49]">&lt;xentrac&gt;</a></span><span class="message">nice</span></div><div class="line" id="024704"><span class="nick" style="color:#234e69"><a href="#024704" label="[02:47:04]">&lt;xentrac&gt;</a></span><span class="message">someone pointed out on StackOverflow that the early version of the Ritchie/Thompson C compiler on GitHub is 17% assembly: <a rel="nofollow" href="https://stackoverflow.com/questions/18125490/how-was-the-first-c-compiler-written">https://stackoverflow.com/questions/18125490/how-was-the-first-c-compiler-written</a> </span></div><div class="line" id="024712"><span class="nick" style="color:#234e69"><a href="#024712" label="[02:47:12]">&lt;xentrac&gt;</a></span><span class="message">but that's pretty far from cc_x86</span></div><div class="line" id="024748"><span class="nick" style="color:#2e2a4a"><a href="#024748" label="[02:47:48]">&lt;oriansj&gt;</a></span><span class="message">indeed</span></div><div class="line" id="024817"><span class="nick" style="color:#2e2a4a"><a href="#024817" label="[02:48:17]">&lt;oriansj&gt;</a></span><span class="message">hence why I say I might be the first dumbass to actually write a C compiler in assembly</span></div><div class="line" id="024904"><span class="nick" style="color:#234e69"><a href="#024904" label="[02:49:04]">&lt;xentrac&gt;</a></span><span class="message">it's possible!</span></div><div class="line" id="024905"><span class="nick" style="color:#2e2a4a"><a href="#024905" label="[02:49:05]">&lt;oriansj&gt;</a></span><span class="message">now there was a poster on Hacker news who claimed to have done it first but when pressured, they were unable to provide proof</span></div><div class="line" id="024916"><span class="nick" style="color:#234e69"><a href="#024916" label="[02:49:16]">&lt;xentrac&gt;</a></span><span class="message">when, in 1982?</span></div><div class="line" id="025017"><span class="nick" style="color:#2e2a4a"><a href="#025017" label="[02:50:17]">&lt;oriansj&gt;</a></span><span class="message">I'll have to findthe hacker news post about cc_x86 built in knight assembly</span></div><div class="line" id="025123"><span class="nick" style="color:#234e69"><a href="#025123" label="[02:51:23]">&lt;xentrac&gt;</a></span><span class="message">there sure were a lot of C compilers in 1983, some of which ran on CP/M machines</span></div><div class="line" id="025154"><span class="nick" style="color:#2e2a4a"><a href="#025154" label="[02:51:54]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://news.ycombinator.com/item?id=17851311">https://news.ycombinator.com/item?id=17851311</a> </span></div><div class="line" id="025208"><span class="nick" style="color:#234e69"><a href="#025208" label="[02:52:08]">&lt;xentrac&gt;</a></span><span class="message">it wouldn't be terribly surprising if someone who had actually written a C compiler in assembly in 1984 had lost all of the copies of it</span></div><div class="line" id="025303"><span class="nick" style="color:#2e2a4a"><a href="#025303" label="[02:53:03]">&lt;oriansj&gt;</a></span><span class="message">xentrac: true</span></div><div class="line" id="025316"><span class="nick" style="color:#234e69"><a href="#025316" label="[02:53:16]">&lt;xentrac&gt;</a></span><span class="message">also people could be lying of course</span></div><div class="line" id="025336"><span class="nick" style="color:#2e2a4a"><a href="#025336" label="[02:53:36]">&lt;oriansj&gt;</a></span><span class="message">and I'll happily give anyone who wants the first dumbass crown to anyone who wants it</span></div><div class="line" id="025449"><span class="nick" style="color:#2e2a4a"><a href="#025449" label="[02:54:49]">&lt;oriansj&gt;</a></span><span class="message">just show me the source for any C compiler you wrote for CPM/DOS and I'll be happy to say nope they beat me to it</span></div><div class="line" id="025515"><span class="nick" style="color:#2e2a4a"><a href="#025515" label="[02:55:15]">&lt;oriansj&gt;</a></span><span class="message">I just never managed to find 1 in 20 years of looking</span></div><div class="line" id="025547"><span class="nick" style="color:#2e2a4a"><a href="#025547" label="[02:55:47]">&lt;oriansj&gt;</a></span><span class="message">C500 I can easily find</span></div><div class="line" id="025559"><span class="nick" style="color:#2e2a4a"><a href="#025559" label="[02:55:59]">&lt;oriansj&gt;</a></span><span class="message">The B Compiler work</span></div><div class="line" id="025618"><span class="nick" style="color:#2e2a4a"><a href="#025618" label="[02:56:18]">&lt;oriansj&gt;</a></span><span class="message">a whole raft of C compilers written in C</span></div><div class="line" id="025656"><span class="nick" style="color:#2e2a4a"><a href="#025656" label="[02:56:56]">&lt;oriansj&gt;</a></span><span class="message">but the number of compilers written in Assembly which is actually publicly available</span></div><div class="line" id="025713"><span class="nick" style="color:#2e2a4a"><a href="#025713" label="[02:57:13]">&lt;oriansj&gt;</a></span><span class="message">(minus mine) Zero</span></div><div class="line" id="025737"><span class="nick" style="color:#2e2a4a"><a href="#025737" label="[02:57:37]">&lt;oriansj&gt;</a></span><span class="message">Yeah Turbo Pascal was written in Assembly (I can't find the source anywhere)</span></div><div class="line" id="025820"><span class="nick" style="color:#2e2a4a"><a href="#025820" label="[02:58:20]">&lt;oriansj&gt;</a></span><span class="message">DEC Bliss Compiler was written in Assembly (no Sources anywhere)</span></div><div class="line" id="025914"><span class="nick" style="color:#2e2a4a"><a href="#025914" label="[02:59:14]">&lt;oriansj&gt;</a></span><span class="message">I could find interpreters written in Assembly</span></div><div class="line" id="025941"><span class="nick" style="color:#2e2a4a"><a href="#025941" label="[02:59:41]">&lt;oriansj&gt;</a></span><span class="message">Basic and Lisp (Neither of which buildable)</span></div><div class="line" id="030016"><span class="nick" style="color:#2e2a4a"><a href="#030016" label="[03:00:16]">&lt;oriansj&gt;</a></span><span class="message">I found a RAFT of FORTHs written in Assembly</span></div><div class="line" id="030039"><span class="nick" style="color:#2e2a4a"><a href="#030039" label="[03:00:39]">&lt;oriansj&gt;</a></span><span class="message">(Most reading like line noise)</span></div><div class="line" id="030348"><span class="nick" style="color:#2e2a4a"><a href="#030348" label="[03:03:48]">&lt;oriansj&gt;</a></span><span class="message">xentrac: at the same time; C compilers written in Assembly would have sold like hot cakes back in the 1980s</span></div><div class="line" id="030429"><span class="nick" style="color:#2e2a4a"><a href="#030429" label="[03:04:29]">&lt;oriansj&gt;</a></span><span class="message">so anyone who did it in the 1980s could have made alot of money, just selling copies for $40 a pop</span></div><div class="line" id="030534"><span class="nick" style="color:#2e2a4a"><a href="#030534" label="[03:05:34]">&lt;oriansj&gt;</a></span><span class="message">Think about it a 10Kloc/s C compiler in the 1980s</span></div><div class="line" id="030635"><span class="nick" style="color:#2e2a4a"><a href="#030635" label="[03:06:35]">&lt;oriansj&gt;</a></span><span class="message"> Turbo pascal was a 1Kloc/s compiler</span></div><div class="line" id="030727"><span class="nick" style="color:#2e2a4a"><a href="#030727" label="[03:07:27]">&lt;oriansj&gt;</a></span><span class="message">cc_x86 on a 8086, would top 12Kloc</span></div><div class="line" id="030813"><span class="nick" style="color:#2e2a4a"><a href="#030813" label="[03:08:13]">&lt;oriansj&gt;</a></span><span class="message">who cares if the binaries are slow; it would have been a revolution for C developers</span></div><div class="line" id="031251"><span class="nick" style="color:#2e2a4a"><a href="#031251" label="[03:12:51]">&lt;oriansj&gt;</a></span><span class="message">So we have to imagine someone smart enough to write a C compiler in Assembly but dumb enough not to think hey sell a few copies for $10+</span></div><div class="line" id="031416"><span class="nick" style="color:#2e2a4a"><a href="#031416" label="[03:14:16]">&lt;oriansj&gt;</a></span><span class="message">now in the 1990s maybe that speed wouldn't have been so huge but would someone not share it on usenet or IRC? I can't imagine that not spreading</span></div><div class="line" id="031531"><span class="nick" style="color:#2e2a4a"><a href="#031531" label="[03:15:31]">&lt;oriansj&gt;</a></span><span class="message">by the 2000s; it is probably slower than C compilers written in C (thanks to modern optimizations) but again it would still make slashdot</span></div><div class="line" id="031623"><span class="nick" style="color:#2e2a4a"><a href="#031623" label="[03:16:23]">&lt;oriansj&gt;</a></span><span class="message">by the 2010s it would be a front page article on Hacker News (it was for 3 days straight when I did it)</span></div><div class="line" id="031654"><span class="nick" style="color:#2e2a4a"><a href="#031654" label="[03:16:54]">&lt;oriansj&gt;</a></span><span class="message">and something that big for that long, everyone was seen it atleast once</span></div><div class="line" id="031820"><span class="nick" style="color:#2e2a4a"><a href="#031820" label="[03:18:20]">&lt;oriansj&gt;</a></span><span class="message">so I ask, is it actually reasonable that anyone ever wrote a C compiler in assembly before me? because the more I look at it; the less likely it seems</span></div><div class="line" id="031903"><span class="nick" style="color:#6d2462"><a href="#031903" label="[03:19:03]">&lt;fosslinux&gt;</a></span><span class="message">yeah it seems pretty unlikely</span></div><div class="line" id="031945"><span class="nick" style="color:#2e2a4a"><a href="#031945" label="[03:19:45]">&lt;oriansj&gt;</a></span><span class="message">please someone prove me wrong because it feels weird  being the first person to do something so freaking trivial</span></div><div class="line" id="032059"><span class="nick" style="color:#2e2a4a"><a href="#032059" label="[03:20:59]">&lt;oriansj&gt;</a></span><span class="message">literally something that could have been done in a single day trivial</span></div><div class="line" id="032116"><span class="nick" style="color:#2e2a4a"><a href="#032116" label="[03:21:16]">&lt;oriansj&gt;</a></span><span class="message">which everyone kind of thinks of like landing on the moon hard</span></div><div class="line" id="042059"><span class="nick" style="color:#6d2462"><a href="#042059" label="[04:20:59]">&lt;fosslinux&gt;</a></span><span class="message">people are scared of assembly -_-</span></div><div class="line" id="042107"><span class="nick" style="color:#6d2462"><a href="#042107" label="[04:21:07]">&lt;fosslinux&gt;</a></span><span class="message">I was until very recentlu</span></div><div class="line" id="042112"><span class="nick" style="color:#6d2462"><a href="#042112" label="[04:21:12]">&lt;fosslinux&gt;</a></span><span class="message">recently*</span></div><div class="line" id="043755"><span class="nick" style="color:#2e2a4a"><a href="#043755" label="[04:37:55]">&lt;oriansj&gt;</a></span><span class="message">fosslinux: hopefully my stage0 work helped you get past that</span></div><div class="line" id="043816"><span class="nick" style="color:#6d2462"><a href="#043816" label="[04:38:16]">&lt;fosslinux&gt;</a></span><span class="message">yes it dis</span></div><div class="line" id="043818"><span class="nick" style="color:#6d2462"><a href="#043818" label="[04:38:18]">&lt;fosslinux&gt;</a></span><span class="message">did*</span></div><div class="line" id="043822"><span class="nick" style="color:#6d2462"><a href="#043822" label="[04:38:22]">&lt;fosslinux&gt;</a></span><span class="message">it's really nice and clean</span></div><div class="line" id="043830"><span class="nick" style="color:#6d2462"><a href="#043830" label="[04:38:30]">&lt;fosslinux&gt;</a></span><span class="message">helped me understand assembly quite a bit</span></div><div class="line" id="043840"><span class="nick" style="color:#2e2a4a"><a href="#043840" label="[04:38:40]">&lt;oriansj&gt;</a></span><span class="message">good</span></div><div class="line" id="045659"><span class="nick" style="color:#2e2a4a"><a href="#045659" label="[04:56:59]">&lt;oriansj&gt;</a></span><span class="message">fosslinux: well that is the thing about assembly, it is the reflection of what the programmer cares about</span></div><div class="line" id="045735"><span class="nick" style="color:#6d2462"><a href="#045735" label="[04:57:35]">&lt;fosslinux&gt;</a></span><span class="message">how so?</span></div><div class="line" id="050119"><span class="nick" style="color:#2e2a4a"><a href="#050119" label="[05:01:19]">&lt;oriansj&gt;</a></span><span class="message">if you want clean code, you can have it. If you want speed above all you can have it. If you want to just slam something simple out fast you can</span></div><div class="line" id="050413"><span class="nick" style="color:#2e2a4a"><a href="#050413" label="[05:04:13]">&lt;oriansj&gt;</a></span><span class="message">The only thing you can't do in assembly is portablity or rapid prototype</span></div><div class="line" id="050538"><span class="nick" style="color:#2e2a4a"><a href="#050538" label="[05:05:38]">&lt;oriansj&gt;</a></span><span class="message">If you want total control of memory to make it impossible for an attacker to do any injection attacks of any kind, you can.</span></div><div class="line" id="050559"><span class="nick" style="color:#2e2a4a"><a href="#050559" label="[05:05:59]">&lt;oriansj&gt;</a></span><span class="message">If you want to build the stack up or down, you can in assembly</span></div><div class="line" id="050751"><span class="nick" style="color:#2e2a4a"><a href="#050751" label="[05:07:51]">&lt;oriansj&gt;</a></span><span class="message">If you want to efficiently go from an Int32 to a  string of hex values you can</span></div><div class="line" id="052533"><span class="nick" style="color:#2e2a4a"><a href="#052533" label="[05:25:33]">&lt;oriansj&gt;</a></span><span class="message">only 79 clocks (in  M0) and 80bytes</span></div><div class="line" id="052739"><span class="nick" style="color:#2e2a4a"><a href="#052739" label="[05:27:39]">&lt;oriansj&gt;</a></span><span class="message">(or 51 bytes in x86)</span></div><div class="line" id="052813"><span class="nick" style="color:#6d2462"><a href="#052813" label="[05:28:13]">&lt;fosslinux&gt;</a></span><span class="message">,</span></div><div class="line" id="052818"><span class="nick" style="color:#6d2462"><a href="#052818" label="[05:28:18]">&lt;fosslinux&gt;</a></span><span class="message">right</span></div><div class="line" id="052832"><span class="nick" style="color:#2e2a4a"><a href="#052832" label="[05:28:32]">&lt;oriansj&gt;</a></span><span class="message">and only requiring 10 more bytes to support 64</span></div><div class="line" id="052921"><span class="nick" style="color:#2e2a4a"><a href="#052921" label="[05:29:21]">&lt;oriansj&gt;</a></span><span class="message">(:hex32l and :hex64l in M0 if you are curious)</span></div><div class="line" id="053206"><span class="nick" style="color:#6d2462"><a href="#053206" label="[05:32:06]">&lt;fosslinux&gt;</a></span><span class="message">Ive mainly been looking at NASM assembly so far</span></div><div class="line" id="053218"><span class="nick" style="color:#6d2462"><a href="#053218" label="[05:32:18]">&lt;fosslinux&gt;</a></span><span class="message">Is M2 assembly cross platform?</span></div><div class="line" id="053255"><span class="nick" style="color:#2e2a4a"><a href="#053255" label="[05:32:55]">&lt;oriansj&gt;</a></span><span class="message">M2 is C code; so technically I guess you could call C portable assembly</span></div><div class="line" id="053314"><span class="nick" style="color:#2e2a4a"><a href="#053314" label="[05:33:14]">&lt;oriansj&gt;</a></span><span class="message">M1 is architecture neutral</span></div><div class="line" id="053328"><span class="nick" style="color:#6d2462"><a href="#053328" label="[05:33:28]">&lt;fosslinux&gt;</a></span><span class="message">oh of course</span></div><div class="line" id="053353"><span class="nick" style="color:#2e2a4a"><a href="#053353" label="[05:33:53]">&lt;oriansj&gt;</a></span><span class="message">you actually have to define the Instructions you plan on using in M1</span></div><div class="line" id="053354"><span class="nick" style="color:#6d2462"><a href="#053354" label="[05:33:54]">&lt;fosslinux&gt;</a></span><span class="message">what about M0 then, how does it differ from M1? Is M0 not architecture neutral?</span></div><div class="line" id="053417"><span class="nick" style="color:#2e2a4a"><a href="#053417" label="[05:34:17]">&lt;oriansj&gt;</a></span><span class="message">M0 is a single architecture port of M1</span></div><div class="line" id="053426"><span class="nick" style="color:#6d2462"><a href="#053426" label="[05:34:26]">&lt;fosslinux&gt;</a></span><span class="message">I see</span></div><div class="line" id="053457"><span class="nick" style="color:#2e2a4a"><a href="#053457" label="[05:34:57]">&lt;oriansj&gt;</a></span><span class="message">aka M1 --architecture x86 is the same as x86's M0</span></div><div class="line" id="053523"><span class="nick" style="color:#2e2a4a"><a href="#053523" label="[05:35:23]">&lt;oriansj&gt;</a></span><span class="message">M1 --architecture aarch64 is the same as aarch64's M0</span></div><div class="line" id="053634"><span class="nick" style="color:#2e2a4a"><a href="#053634" label="[05:36:34]">&lt;oriansj&gt;</a></span><span class="message">One can make a set of instructions that are architecture neatural and seperate definition files, such that the code writtin in M1 works on all of the architectures</span></div><div class="line" id="054107"><span class="nick" style="color:#2e2a4a"><a href="#054107" label="[05:41:07]">&lt;oriansj&gt;</a></span><span class="message">The instructions in the nasm version of M0 include that little trick too</span></div><div class="line" id="054827"><span class="nick" style="color:#6d2462"><a href="#054827" label="[05:48:27]">&lt;fosslinux&gt;</a></span><span class="message">right</span></div><div class="line" id="061238"><span class="nick" style="color:#234e69"><a href="#061238" label="[06:12:38]">&lt;xentrac&gt;</a></span><span class="message">oriansj: BDS C for CP/M was written in assembly language, according to Byte</span></div><div class="line" id="061413"><span class="nick" style="color:#234e69"><a href="#061413" label="[06:14:13]">&lt;xentrac&gt;</a></span><span class="message">the August 1983 issue</span></div><div class="line" id="061443"><span class="nick" style="color:#234e69"><a href="#061443" label="[06:14:43]">&lt;xentrac&gt;</a></span><span class="message">page 264</span></div><div class="line" id="061556"><span class="nick" style="color:#234e69"><a href="#061556" label="[06:15:56]">&lt;xentrac&gt;</a></span><span class="message">&quot;On the positive side, the BDS C compiler is exceptionally well suited to the CP/M environment.  Its library is equipped with the special functions you really need to use the machine: inp() and outp() for doing port I/O, bdos() and bios() for communicating with the operating system, and convenience functions like kbhit() for testing console status.</span></div><div class="line" id="061639"><span class="nick" style="color:#234e69"><a href="#061639" label="[06:16:39]">&lt;xentrac&gt;</a></span><span class="message">&quot;More important, the compiler is written in assembly language and optimized to give acceptable performance even on a relatively slow 8080-based microcomputer. (I've never seen another</span></div><div class="line" id="061709"><span class="nick" style="color:#234e69"><a href="#061709" label="[06:17:09]">&lt;xentrac&gt;</a></span><span class="message">compiler under CP/M-80 that could match its speed of compiling and linking; debugging sessions can be quite lively, which is normally only true with interpreted languages.&quot;</span></div><div class="line" id="061813"><span class="nick" style="color:#234e69"><a href="#061813" label="[06:18:13]">&lt;xentrac&gt;</a></span><span class="message">BDS didn't support longs, doubles, floats, static variables, or initializers</span></div><div class="line" id="061844"><span class="nick" style="color:#234e69"><a href="#061844" label="[06:18:44]">&lt;xentrac&gt;</a></span><span class="message">but small-C didn't support pointers to pointers, structs, or multidimensional arrays, so BDS C is pretty much real C</span></div><div class="line" id="061949"><span class="nick" style="color:#234e69"><a href="#061949" label="[06:19:49]">&lt;xentrac&gt;</a></span><span class="message">however, small-C was written in small-C, so it could compile itself; it didn't need AT&amp;T C once it was ported.  So I was pretty wrong about that</span></div><div class="line" id="062331"><span class="nick" style="color:#234e69"><a href="#062331" label="[06:23:31]">&lt;xentrac&gt;</a></span><span class="message">BDS C is now open source and public domain: <a rel="nofollow" href="https://www.bdsoft.com/resources/bdsc.html">https://www.bdsoft.com/resources/bdsc.html</a> </span></div><div class="line" id="065538"><span class="nick" style="color:#234e69"><a href="#065538" label="[06:55:38]">&lt;xentrac&gt;</a></span><span class="message">it compiles about 20 lines a second</span></div><div class="line" id="075103"><span class="nick" style="color:#234e69"><a href="#075103" label="[07:51:03]">&lt;xentrac&gt;</a></span><span class="message">according to the manual</span></div><div class="line" id="075841"><span class="nick" style="color:#6d2462"><a href="#075841" label="[07:58:41]">&lt;fosslinux&gt;</a></span><span class="message">oriansj: is slow_lisp branch of mes-m2 essentailly where you are doing work now?</span></div><div class="line" id="093554"><span class="nick" style="color:#6d2462"><a href="#093554" label="[09:35:54]">&lt;fosslinux&gt;</a></span><span class="message">oriansj: also, does M2-Planet not support array declerations?</span></div><div class="line" id="100515"><span class="nick" style="color:#6d2462"><a href="#100515" label="[10:05:15]">&lt;fosslinux&gt;</a></span><span class="message">well at least</span></div><div class="line" id="100532"><span class="nick" style="color:#6d2462"><a href="#100532" label="[10:05:32]">&lt;fosslinux&gt;</a></span><span class="message">int array[4]; does not work</span></div><div class="line" id="100553"><span class="nick" style="color:#6d2462"><a href="#100553" label="[10:05:53]">&lt;fosslinux&gt;</a></span><span class="message">maybe I should try allocating some memory on the heap instead as a workaround instead of the stack</span></div><div class="line" id="100922"><span class="nick" style="color:#6c3d55"><a href="#100922" label="[10:09:22]">&lt;janneke&gt;</a></span><span class="message">fosslinux: yes, you need malloc</span></div><div class="line" id="101331"><span class="nick" style="color:#6c3d55"><a href="#101331" label="[10:13:31]">&lt;janneke&gt;</a></span><span class="message">xentrac: the whole macro thing is interesting.  mes integrates a very early psyntax but it's too slow to use and not compatible enough with guile.</span></div><div class="line" id="101400"><span class="nick" style="color:#6c3d55"><a href="#101400" label="[10:14:00]">&lt;janneke&gt;</a></span><span class="message">currently, mes has define-macro in C and creates syntax-rules from that</span></div><div class="line" id="101441"><span class="nick" style="color:#6c3d55"><a href="#101441" label="[10:14:41]">&lt;janneke&gt;</a></span><span class="message">that code is two years old (very old for mes :-) and i'm not happy with it, but currently it gets the job done</span></div><div class="line" id="101552"><span class="nick" style="color:#6c3d55"><a href="#101552" label="[10:15:52]">&lt;janneke&gt;</a></span><span class="message">i have looked into Andre van Tonder's syntax-case, which might be bootstrappable, but i didn't get it to work afte putting in some serious effort</span></div><div class="line" id="101721"><span class="nick" style="color:#6c3d55"><a href="#101721" label="[10:17:21]">&lt;janneke&gt;</a></span><span class="message">that still might be one of our best bets at reaching full guile compatibility while being bootstrappable</span></div><div class="line" id="101750"><span class="nick" style="color:#6c3d55"><a href="#101750" label="[10:17:50]">&lt;janneke&gt;</a></span><span class="message">currently, i am slowly working towards booting guile-1.8's psyntax to reach full guile compatibility</span></div><div class="line" id="103959"><span class="nick" style="color:#6d2462"><a href="#103959" label="[10:39:59]">&lt;fosslinux&gt;</a></span><span class="message">janneke: thank you</span></div><div class="line" id="104523"><span class="nick" style="color:#6c3d55"><a href="#104523" label="[10:45:23]">&lt;janneke&gt;</a></span><span class="message">fosslinux: yw, i am working on the scheme-only bootstrap integration first</span></div><div class="line" id="104630"><span class="nick" style="color:#6c3d55"><a href="#104630" label="[10:46:30]">&lt;janneke&gt;</a></span><span class="message">after that i will focus on finishing the intermediate mes-m2 -&gt; mes merge</span></div><div class="line" id="123333"><span class="nick" style="color:#2e2a4a"><a href="#123333" label="[12:33:33]">&lt;oriansj&gt;</a></span><span class="message">xentrac: thank you, I feel much better now</span></div><div class="line" id="123552"><span class="nick" style="color:#2e2a4a"><a href="#123552" label="[12:35:52]">&lt;oriansj&gt;</a></span><span class="message">fosslinux: well supporting of int foo[4] wasn't required as int* foo = calloc(4, sizeof(int)); works fine and allows foo to be passed to other functions and I haven't added that complexity to the stack yet</span></div><div class="line" id="123846"><span class="nick" style="color:#2e2a4a"><a href="#123846" label="[12:38:46]">&lt;oriansj&gt;</a></span><span class="message">fosslinux: and yes slow_lisp is my current work, with the hope that it becomes the next mes-m2 and thus saves janneke from further work on the Mes.c side of the bootstrap</span></div><div class="line" id="133209"><span class="nick" style="color:#2e2a4a"><a href="#133209" label="[13:32:09]">&lt;oriansj&gt;</a></span><span class="message">xentrac: so assuming  BDS-C retailed for just $9.95, he made about $1M; if it was $49.95-&gt; $5M but I can't find the retail price yet</span></div><div class="line" id="133710"><span class="nick" style="color:#2e2a4a"><a href="#133710" label="[13:37:10]">&lt;oriansj&gt;</a></span><span class="message">if he priced it as a complete development suite (say $200); one could say $20M from a 1 year project in 1988</span></div><div class="line" id="133808"><span class="nick" style="color:#2e2a4a"><a href="#133808" label="[13:38:08]">&lt;oriansj&gt;</a></span><span class="message">and the fact; he personally provided phone support 24/7 the retail price might have been even higher</span></div><div class="line" id="133846"><span class="nick" style="color:#2e2a4a"><a href="#133846" label="[13:38:46]">&lt;oriansj&gt;</a></span><span class="message">(for free to his customers)</span></div><div class="line" id="135525"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado</span></div><div class="line" id="141052"><span class="nick" style="color:#2e2a4a"><a href="#141052" label="[14:10:52]">&lt;oriansj&gt;</a></span><span class="message">odd that guile doesn't support list=? and vector=?</span></div><div class="line" id="143223"><span class="nick" style="color:#2e2a4a"><a href="#143223" label="[14:32:23]">&lt;oriansj&gt;</a></span><span class="message">and it looks like I crossed the definitions of pair? and list?; easy to fix</span></div><div class="line" id="143754"><span class="nick" style="color:#80b1d3"><a href="#143754" label="[14:37:54]">&lt;smithras&gt;</a></span><span class="message">oriansj: is vector=? shorthand for (vector= eq? ...) ?</span></div><div class="line" id="143950"><span class="nick" style="color:#2e2a4a"><a href="#143950" label="[14:39:50]">&lt;oriansj&gt;</a></span><span class="message">smithras: in scheme there is char=?, string=? and I am pointing out there should be a vector=? which has similiar behavior (compare objects of that type together)</span></div><div class="line" id="144031"><span class="nick" style="color:#2e2a4a"><a href="#144031" label="[14:40:31]">&lt;oriansj&gt;</a></span><span class="message">eq? is the short hand of first matching types and then using the type specific comparison to determine the result</span></div><div class="line" id="144352"><span class="nick" style="color:#80b1d3"><a href="#144352" label="[14:43:52]">&lt;smithras&gt;</a></span><span class="message">oriansj: oh okay. I agree it's odd that there isn't a builtin for it</span></div><div class="line" id="144642"><span class="nick" style="color:#80b1d3"><a href="#144642" label="[14:46:42]">&lt;smithras&gt;</a></span><span class="message">although I suppose that's just scheme being minimal again</span></div><div class="line" id="145230"><span class="nick" style="color:#2e2a4a"><a href="#145230" label="[14:52:30]">&lt;oriansj&gt;</a></span><span class="message">smithras: well if one were to think only in terms of counting symbols you would be absolutely right but in terms of cognative expectations, no</span></div><div class="line" id="145302"><span class="nick" style="color:#d9d9d9"><a href="#145302" label="[14:53:02]">&lt;zig&gt;</a></span><span class="message">eq? is pointer equivalence</span></div><div class="line" id="145327"><span class="nick" style="color:#2e2a4a"><a href="#145327" label="[14:53:27]">&lt;oriansj&gt;</a></span><span class="message">aka if you know type=? then not having vector=? and list=? is overhead</span></div><div class="line" id="145333"><span class="nick" style="color:#d9d9d9"><a href="#145333" label="[14:53:33]">&lt;zig&gt;</a></span><span class="message">outside scheme world, eq? is pointer equality. equal? is what oriansj describe.</span></div><div class="line" id="145349"><span class="nick" style="color:#2e2a4a"><a href="#145349" label="[14:53:49]">&lt;oriansj&gt;</a></span><span class="message">zig: you are right,</span></div><div class="line" id="145421"><span class="nick" style="color:#d9d9d9"><a href="#145421" label="[14:54:21]">&lt;zig&gt;</a></span><span class="message">yes, if you know the type use the precise predicate for a faster comparison.</span></div><div class="line" id="145422"><span class="nick" style="color:#2e2a4a"><a href="#145422" label="[14:54:22]">&lt;oriansj&gt;</a></span><span class="message">and there is also eqv? which is minimal how?</span></div><div class="line" id="145442"><span class="nick" style="color:#d9d9d9"><a href="#145442" label="[14:54:42]">&lt;zig&gt;</a></span><span class="message">I never use eqv? because I do not remember the definition.</span></div><div class="line" id="145536"><span class="nick" style="color:#2e2a4a"><a href="#145536" label="[14:55:36]">&lt;oriansj&gt;</a></span><span class="message">hence the cognative load is higher; despite having fewer keywords</span></div><div class="line" id="145539"><span class="nick" style="color:#d9d9d9"><a href="#145539" label="[14:55:39]">&lt;zig&gt;</a></span><span class="message">eqv? is between eq? and equal? it is precisely defined in R7RS pdf but it dubbed a historical procedure, that kept for backward compatibility.</span></div><div class="line" id="145719"><span class="nick" style="color:#2e2a4a"><a href="#145719" label="[14:57:19]">&lt;oriansj&gt;</a></span><span class="message">why the half-steps between speed of knowing the exact types and a proper universal comparision?</span></div><div class="line" id="145732"><span class="nick" style="color:#d9d9d9"><a href="#145732" label="[14:57:32]">&lt;zig&gt;</a></span><span class="message">like say python, if you forget a few things (like the order of the application of arguments is not defined) it is simpler ;)</span></div><div class="line" id="145816"><span class="nick" style="color:#2e2a4a"><a href="#145816" label="[14:58:16]">&lt;oriansj&gt;</a></span><span class="message">zig: to implement that is true but that is shifting the problem to the users</span></div><div class="line" id="145857"><span class="nick" style="color:#d9d9d9"><a href="#145857" label="[14:58:57]">&lt;zig&gt;</a></span><span class="message">eqv? john cowan wrote that eqv? is in r7rs for historical reasons.</span></div><div class="line" id="145920"><span class="nick" style="color:#d9d9d9"><a href="#145920" label="[14:59:20]">&lt;zig&gt;</a></span><span class="message">oriansj: definitly.</span></div><div class="line" id="145945"><span class="nick" style="color:#d9d9d9"><a href="#145945" label="[14:59:45]">&lt;zig&gt;</a></span><span class="message">john cowan is the R7RS editor.</span></div><div class="line" id="150049"><span class="nick" style="color:#2e2a4a"><a href="#150049" label="[15:00:49]">&lt;oriansj&gt;</a></span><span class="message">zig: I never got the historical reasons argument; when one can trivially add (define eqv? equal?)</span></div><div class="line" id="150255"><span class="nick" style="color:#2e2a4a"><a href="#150255" label="[15:02:55]">&lt;oriansj&gt;</a></span><span class="message">just like writing (define foo +)</span></div><div class="line" id="150331"><span class="nick" style="color:#d9d9d9"><a href="#150331" label="[15:03:31]">&lt;zig&gt;</a></span><span class="message">eqv? definition is several paragraph long at page 30 of <a rel="nofollow" href="https://bitbucket.org/cowan/r7rs/src/draft-10/rnrs/r7rs.pdf">https://bitbucket.org/cowan/r7rs/src/draft-10/rnrs/r7rs.pdf</a> </span></div><div class="line" id="150614"><span class="nick" style="color:#d9d9d9"><a href="#150614" label="[15:06:14]">&lt;zig&gt;</a></span><span class="message">yeah, one could do (define eqv? equal?). The summary, it is safe to do equal? all the time, if you need performance use eq?, =, char=?, bytevector=? etc... in particular comparison between numbers is =</span></div><div class="line" id="150709"><span class="nick" style="color:#d9d9d9"><a href="#150709" label="[15:07:09]">&lt;zig&gt;</a></span><span class="message">(where a number can be a signed integer, float, double and in guile bigint)</span></div><div class="line" id="150721"><span class="nick" style="color:#d9d9d9"><a href="#150721" label="[15:07:21]">&lt;zig&gt;</a></span><span class="message">(it can also be a complex...)</span></div><div class="line" id="150722"><span class="nick" style="color:#2e2a4a"><a href="#150722" label="[15:07:22]">&lt;oriansj&gt;</a></span><span class="message">zig: correct, hence why eqv? is kept for historical reasons if simply adding (define eqv? equal?) to any file that needs it will work?</span></div><div class="line" id="151209"><span class="nick" style="color:#d9d9d9"><a href="#151209" label="[15:12:09]">&lt;zig&gt;</a></span><span class="message">I am too lazy to ask... and reading r7rs page 30, it is written: &quot;obj1 and obj2 are pairs, vectors, bytevectors, records, or strings that denote the same location in the store&quot;. That is, when obj1 and obj2 are compound object (objects made of other object) in that case eqv? returns the result of eq?</span></div><div class="line" id="151251"><span class="nick" style="color:#d9d9d9"><a href="#151251" label="[15:12:51]">&lt;zig&gt;</a></span><span class="message">so one can not replace eqv? with equal? for backward compatibility. I agree that is very odd.</span></div><div class="line" id="151344"><span class="nick" style="color:#d9d9d9"><a href="#151344" label="[15:13:44]">&lt;zig&gt;</a></span><span class="message">if for some reason, someone relied on one of the numerous behavior of eqv? that sometime behave like eq? sometime like equal?</span></div><div class="line" id="151447"><span class="nick" style="color:#2e2a4a"><a href="#151447" label="[15:14:47]">&lt;oriansj&gt;</a></span><span class="message">zig: well I guess one could write (define (eqv? a . rest) (cond ... to implement identical functionality. if one required exact compatibility...</span></div><div class="line" id="151728"><span class="nick" style="color:#d9d9d9"><a href="#151728" label="[15:17:28]">&lt;zig&gt;</a></span><span class="message">yeah, I agree, also I never faced the backward compatibility hell of any sort. When I upgrade a software, I don't except to get everything for free.</span></div><div class="line" id="151750"><span class="nick" style="color:#d9d9d9"><a href="#151750" label="[15:17:50]">&lt;zig&gt;</a></span><span class="message">minimalism in the sense of scheme is not &quot;only the required primitives to make it turing complete&quot;</span></div><div class="line" id="151756"><span class="nick" style="color:#2e2a4a"><a href="#151756" label="[15:17:56]">&lt;oriansj&gt;</a></span><span class="message">also I find it freaky that (eq? 2 2) is not specified</span></div><div class="line" id="151824"><span class="nick" style="color:#2e2a4a"><a href="#151824" label="[15:18:24]">&lt;oriansj&gt;</a></span><span class="message">zig: I always viewed minimalism in terms of cognative load rather the number of items</span></div><div class="line" id="151928"><span class="nick" style="color:#d9d9d9"><a href="#151928" label="[15:19:28]">&lt;zig&gt;</a></span><span class="message">yes, minimalism is not the number of items. I also agree that cognitive load of scheme could be improved e.g. removing eqv? or making string of chars immutable.</span></div><div class="line" id="152017"><span class="nick" style="color:#d9d9d9"><a href="#152017" label="[15:20:17]">&lt;zig&gt;</a></span><span class="message">There is different forces at play in the standard, one can not please everyone.</span></div><div class="line" id="152108"><span class="nick" style="color:#d9d9d9"><a href="#152108" label="[15:21:08]">&lt;zig&gt;</a></span><span class="message">in the above: forces is people with different interests.</span></div><div class="line" id="152158"><span class="nick" style="color:#2e2a4a"><a href="#152158" label="[15:21:58]">&lt;oriansj&gt;</a></span><span class="message">zig: I guess that is one advantage of C; a single mind choosing what should be in the minimal core</span></div><div class="line" id="152201"><span class="nick" style="color:#d9d9d9"><a href="#152201" label="[15:22:01]">&lt;zig&gt;</a></span><span class="message">I already noted the undefined order of arguments evaluation. There is similarly, let, letrec, letrec* and let* that exists because of the same reason.</span></div><div class="line" id="152331"><span class="nick" style="color:#d9d9d9"><a href="#152331" label="[15:23:31]">&lt;zig&gt;</a></span><span class="message">The one that works in most situations is letrec*</span></div><div class="line" id="152343"><span class="nick" style="color:#2e2a4a"><a href="#152343" label="[15:23:43]">&lt;oriansj&gt;</a></span><span class="message">I'm sure M2-Planet's current lack of switch statement support probably bugs someone</span></div><div class="line" id="152415"><span class="nick" style="color:#2e2a4a"><a href="#152415" label="[15:24:15]">&lt;oriansj&gt;</a></span><span class="message">(and I wouldn't reject a patch that added support for it if it were in a form cc_x86 could build)</span></div><div class="line" id="152613"><span class="nick" style="color:#2e2a4a"><a href="#152613" label="[15:26:13]">&lt;oriansj&gt;</a></span><span class="message">I'll probably just have =, char=?, string=?, list=?, vector=? and equal? as eq? and eqv? can be implemented in scheme from those</span></div><div class="line" id="152702"><span class="nick" style="color:#d9d9d9"><a href="#152702" label="[15:27:02]">&lt;zig&gt;</a></span><span class="message">there is no vector=? in guile, there is bytevector=?</span></div><div class="line" id="152751"><span class="nick" style="color:#d9d9d9"><a href="#152751" label="[15:27:51]">&lt;zig&gt;</a></span><span class="message">and vector=</span></div><div class="line" id="152836"><span class="nick" style="color:#2e2a4a"><a href="#152836" label="[15:28:36]">&lt;oriansj&gt;</a></span><span class="message">vannila guile doesn't include bytevector=? nor vector=</span></div><div class="line" id="152923"><span class="nick" style="color:#2e2a4a"><a href="#152923" label="[15:29:23]">&lt;oriansj&gt;</a></span><span class="message">one gets ;;; &lt;stdin&gt;:1:0: warning: possibly unbound variable `bytevector=?'</span></div><div class="line" id="152937"><span class="nick" style="color:#2e2a4a"><a href="#152937" label="[15:29:37]">&lt;oriansj&gt;</a></span><span class="message">and ;;; &lt;stdin&gt;:2:0: warning: possibly unbound variable `vector='</span></div><div class="line" id="153009"><span class="nick" style="color:#2e2a4a"><a href="#153009" label="[15:30:09]">&lt;oriansj&gt;</a></span><span class="message">now, yes those are loadable via modules if I remember correctly</span></div><div class="line" id="153155"><span class="nick" style="color:#2e2a4a"><a href="#153155" label="[15:31:55]">&lt;oriansj&gt;</a></span><span class="message">I could also do symbol=? if I wanted to be cheeky</span></div><div class="line" id="160015"><span class="nick" style="color:#2e2a4a"><a href="#160015" label="[16:00:15]">&lt;oriansj&gt;</a></span><span class="message">janneke: now slow_lisp handles (make-vector 0) and (make-vector 42 (cons 1 2)) perfectly</span></div><div class="line" id="160905"><span class="nick" style="color:#2e2a4a"><a href="#160905" label="[16:09:05]">&lt;oriansj&gt;</a></span><span class="message">janneke: since mes.c doesn't support circular references [a la (let ((x (list 'a 'b 'c))) (set-cdr! (cddr x) x) x)] would it be fair to say slow_lisp doesn't have to support it?</span></div><div class="line" id="161156"><span class="nick" style="color:#6c3d55"><a href="#161156" label="[16:11:56]">&lt;janneke&gt;</a></span><span class="message">oriansj: i am not sure how useful it is, but i am pretty sure mes supports it</span></div><div class="line" id="161318"><span class="nick" style="color:#6c3d55"><a href="#161318" label="[16:13:18]">&lt;janneke&gt;</a></span><span class="message">$ src/mes -c &quot;(display (let ((x (list 'a 'b 'c))) (set-cdr! (cddr x) x) (list-head x 20)))&quot;</span></div><div class="line" id="161319"><span class="nick" style="color:#6c3d55"><a href="#161319" label="[16:13:19]">&lt;janneke&gt;</a></span><span class="message">(a b c a b c a b c a b c a b c a b c a b)</span></div><div class="line" id="161402"><span class="nick" style="color:#6c3d55"><a href="#161402" label="[16:14:02]">&lt;janneke&gt;</a></span><span class="message">oriansj: like so many other choices...</span></div><div class="line" id="161454"><span class="nick" style="color:#6c3d55"><a href="#161454" label="[16:14:54]">&lt;janneke&gt;</a></span><span class="message">if we can get away with not supporting them for now, why not drop it?</span></div><div class="line" id="161536"><span class="nick" style="color:#6c3d55"><a href="#161536" label="[16:15:36]">&lt;janneke&gt;</a></span><span class="message">i am sure that circular lists are essential to a mathematician, not sure if they are used in the bootstrap process</span></div><div class="line" id="161605"><span class="nick" style="color:#2e2a4a"><a href="#161605" label="[16:16:05]">&lt;oriansj&gt;</a></span><span class="message">well, I am mostly focused on making slow_lisp optimal for bootstrapping</span></div><div class="line" id="161716"><span class="nick" style="color:#2e2a4a"><a href="#161716" label="[16:17:16]">&lt;oriansj&gt;</a></span><span class="message">thus anything that wouldn't be useful for someone doing real bootstrapping work will be tossed</span></div><div class="line" id="161751"><span class="nick" style="color:#2e2a4a"><a href="#161751" label="[16:17:51]">&lt;oriansj&gt;</a></span><span class="message">I have no need to be r7rs compliant</span></div><div class="line" id="161811"><span class="nick" style="color:#2e2a4a"><a href="#161811" label="[16:18:11]">&lt;oriansj&gt;</a></span><span class="message">just close enough to run guix and MesCC without code changes</span></div><div class="line" id="162240"><span class="nick" style="color:#2e2a4a"><a href="#162240" label="[16:22:40]">&lt;oriansj&gt;</a></span><span class="message">aka no difference is code paths between guile and slow_lisp</span></div><div class="line" id="162345"><span class="nick" style="color:#6c3d55"><a href="#162345" label="[16:23:45]">&lt;janneke&gt;</a></span><span class="message">right</span></div><div class="line" id="162422"><span class="nick" style="color:#6c3d55"><a href="#162422" label="[16:24:22]">&lt;janneke&gt;</a></span><span class="message">my first step in that direction is booting the guile module system</span></div><div class="line" id="162438"><span class="nick" style="color:#6c3d55"><a href="#162438" label="[16:24:38]">&lt;janneke&gt;</a></span><span class="message">i am almost there</span></div><div class="line" id="162539"><span class="nick" style="color:#2e2a4a"><a href="#162539" label="[16:25:39]">&lt;oriansj&gt;</a></span><span class="message">janneke: I could help if you had some trivial tests available</span></div><div class="line" id="162540"><span class="nick" style="color:#6c3d55"><a href="#162540" label="[16:25:40]">&lt;janneke&gt;</a></span><span class="message">this needs only some changes to hash.c and module.c, so in the builtins area</span></div><div class="line" id="163737"><span class="nick" style="color:#2e2a4a"><a href="#163737" label="[16:37:37]">&lt;oriansj&gt;</a></span><span class="message">janneke: you remember I am still merging mes.c with slow_lisp right?</span></div><div class="line" id="164559"><span class="nick" style="color:#6c3d55"><a href="#164559" label="[16:45:59]">&lt;janneke&gt;</a></span><span class="message">oriansj: yes!  crazy, exciting and scary :-)</span></div><div class="line" id="164650"><span class="nick" style="color:#6c3d55"><a href="#164650" label="[16:46:50]">&lt;janneke&gt;</a></span><span class="message">oriansj: i am still working on the mes-m2 -&gt; mes @wip-m2 merge just when you got pointer cells to run; just before the new boot sequnce, test revamp, builtins rewrite etc</span></div><div class="line" id="164742"><span class="nick" style="color:#2e2a4a"><a href="#164742" label="[16:47:42]">&lt;oriansj&gt;</a></span><span class="message">janneke: it might go faster if we just rip the bandaid off and just switch to the slow_lisp branch entirely</span></div><div class="line" id="164745"><span class="nick" style="color:#6c3d55"><a href="#164745" label="[16:47:45]">&lt;janneke&gt;</a></span><span class="message">the guile module thing is after the full source bootstrap release</span></div><div class="line" id="165139"><span class="nick" style="color:#6c3d55"><a href="#165139" label="[16:51:39]">&lt;janneke&gt;</a></span><span class="message">hmm, we are going more than fast enough right now for me :-)</span></div><div class="line" id="165200"><span class="nick" style="color:#2e2a4a"><a href="#165200" label="[16:52:00]">&lt;oriansj&gt;</a></span><span class="message">janneke: if that is what you wish</span></div><div class="line" id="165213"><span class="nick" style="color:#6c3d55"><a href="#165213" label="[16:52:13]">&lt;janneke&gt;</a></span><span class="message">i just pushed wip-bootstrap to guix for a first review round of the scheme-only bootstrap with mes-0.21</span></div><div class="line" id="165301"><span class="nick" style="color:#2e2a4a"><a href="#165301" label="[16:53:01]">&lt;oriansj&gt;</a></span><span class="message">janneke: very nice</span></div><div class="line" id="165335"><span class="nick" style="color:#6c3d55"><a href="#165335" label="[16:53:35]">&lt;janneke&gt;</a></span><span class="message">one of the things we need most i think, is simpler, easier, more &quot;boring&quot; code</span></div><div class="line" id="165500"><span class="nick" style="color:#6c3d55"><a href="#165500" label="[16:55:00]">&lt;janneke&gt;</a></span><span class="message">you are doing great things there for mes; we also need that for mescc</span></div><div class="line" id="165610"><span class="nick" style="color:#6c3d55"><a href="#165610" label="[16:56:10]">&lt;janneke&gt;</a></span><span class="message">but first, after merging the scheme-only bootstrap, releasing mes-0.22 and merging wip-full-source-bootstrap</span></div><div class="line" id="165928"><span class="nick" style="color:#2e2a4a"><a href="#165928" label="[16:59:28]">&lt;oriansj&gt;</a></span><span class="message">blog post and rubbing it in other distros faces... International tech headlines for your great work of course</span></div><div class="line" id="170114"><span class="nick" style="color:#6c3d55"><a href="#170114" label="[17:01:14]">&lt;janneke&gt;</a></span><span class="message">yes!  getting people informed and on board</span></div><div class="line" id="170213"><span class="nick" style="color:#6c3d55"><a href="#170213" label="[17:02:13]">&lt;janneke&gt;</a></span><span class="message">althogh the full source bootstrap is prototyped, i first really want to make the most of scheme-only bootstrap</span></div><div class="line" id="170254"><span class="nick" style="color:#2e2a4a"><a href="#170254" label="[17:02:54]">&lt;oriansj&gt;</a></span><span class="message">janneke: that is why I argued for keeping stage0 out of the guix root and stopping at mes.c at the bottom</span></div><div class="line" id="170327"><span class="nick" style="color:#2e2a4a"><a href="#170327" label="[17:03:27]">&lt;oriansj&gt;</a></span><span class="message">aka let other people use stage0 to build mes.c and guix bootstraps only from scheme and nothing else</span></div><div class="line" id="170409"><span class="nick" style="color:#2e2a4a"><a href="#170409" label="[17:04:09]">&lt;oriansj&gt;</a></span><span class="message">thus you still get the we bootstrapped from 257bytes and our base is lisp</span></div><div class="line" id="170453"><span class="nick" style="color:#2e2a4a"><a href="#170453" label="[17:04:53]">&lt;oriansj&gt;</a></span><span class="message">With only a single kaem script outside of guix itself leveraged in the bootstrap</span></div><div class="line" id="170549"><span class="nick" style="color:#2e2a4a"><a href="#170549" label="[17:05:49]">&lt;oriansj&gt;</a></span><span class="message">also I have an idea to simplify MesCC further in its next major release</span></div><div class="line" id="170645"><span class="nick" style="color:#6c3d55"><a href="#170645" label="[17:06:45]">&lt;janneke&gt;</a></span><span class="message">hmm, it may just be cool to keep stage0/m2-planet-boot0 in guix -- but bootstrapping from scheme only (staying with that theme) could be nice too</span></div><div class="line" id="170703"><span class="nick" style="color:#6c3d55"><a href="#170703" label="[17:07:03]">&lt;janneke&gt;</a></span><span class="message">oh, great, yes mescc needs love!</span></div><div class="line" id="170740"><span class="nick" style="color:#6c3d55"><a href="#170740" label="[17:07:40]">&lt;janneke&gt;</a></span><span class="message">it's always good to have several options</span></div><div class="line" id="170846"><span class="nick" style="color:#2e2a4a"><a href="#170846" label="[17:08:46]">&lt;oriansj&gt;</a></span><span class="message">once we get Mescc able to build binutils directly, the next major version of Mescc can output pure gas assembly and get alot simpler</span></div><div class="line" id="171034"><span class="nick" style="color:#6c3d55"><a href="#171034" label="[17:10:34]">&lt;janneke&gt;</a></span><span class="message">very good</span></div><div class="line" id="171242"><span class="nick" style="color:#2e2a4a"><a href="#171242" label="[17:12:42]">&lt;oriansj&gt;</a></span><span class="message">but that requires us to get MesCC good enough to build GCC directly and that would make MesCC on par with Clang and GCC in terms of importance</span></div><div class="line" id="172615"><span class="nick" style="color:#2e2a4a"><a href="#172615" label="[17:26:15]">&lt;oriansj&gt;</a></span><span class="message">a very long term important project indeed</span></div><div class="line" id="175941"><span class="nick" style="color:#2e2a4a"><a href="#175941" label="[17:59:41]">&lt;oriansj&gt;</a></span><span class="message">janneke: this might just be an insanely stupid question but I noticed Mes.c's apply is of the form: (SCM fn, SCM x)</span></div><div class="line" id="180026"><span class="nick" style="color:#2e2a4a"><a href="#180026" label="[18:00:26]">&lt;oriansj&gt;</a></span><span class="message">but does anything in MesCC actually leverage tail calls?</span></div><div class="line" id="180859"><span class="nick" style="color:#6c3d55"><a href="#180859" label="[18:08:59]">&lt;janneke&gt;</a></span><span class="message">oriansj: no, mes.c does not do tail call elimination</span></div><div class="line" id="180948"><span class="nick" style="color:#6c3d55"><a href="#180948" label="[18:09:48]">&lt;janneke&gt;</a></span><span class="message">*optimization / call-ret elimination</span></div><div class="line" id="181124"><span class="nick" style="color:#2e2a4a"><a href="#181124" label="[18:11:24]">&lt;oriansj&gt;</a></span><span class="message">no as it the returning to something other than the caller part</span></div><div class="line" id="181317"><span class="nick" style="color:#6c3d55"><a href="#181317" label="[18:13:17]">&lt;janneke&gt;</a></span><span class="message">well, as the continuation is R3, it might be pretty cheap/easy to add something like that</span></div><div class="line" id="181437"><span class="nick" style="color:#2e2a4a"><a href="#181437" label="[18:14:37]">&lt;oriansj&gt;</a></span><span class="message">janneke: I know it would be cheap to add; I am wondering how much farther I can strip down the eval for simplicity and keep running MesCC</span></div><div class="line" id="182102"><span class="nick" style="color:#234e69"><a href="#182102" label="[18:21:02]">&lt;xentrac&gt;</a></span><span class="message">oriansj: eq? can't be implemented in terms of the things you suggest</span></div><div class="line" id="182301"><span class="nick" style="color:#2e2a4a"><a href="#182301" label="[18:23:01]">&lt;oriansj&gt;</a></span><span class="message">xentrac: because (eq? 2 2) is unspecified?</span></div><div class="line" id="182421"><span class="nick" style="color:#2e2a4a"><a href="#182421" label="[18:24:21]">&lt;oriansj&gt;</a></span><span class="message">or because (eq? (list 'a) (list 'a)) must be false?</span></div><div class="line" id="182429"><span class="nick" style="color:#234e69"><a href="#182429" label="[18:24:29]">&lt;xentrac&gt;</a></span><span class="message">no, because (begin (define a '(a)) (define b '(a)) (list (eq? a a) (eq? a b)))</span></div><div class="line" id="182453"><span class="nick" style="color:#234e69"><a href="#182453" label="[18:24:53]">&lt;xentrac&gt;</a></span><span class="message">hmm, that's not quite right</span></div><div class="line" id="182539"><span class="nick" style="color:#234e69"><a href="#182539" label="[18:25:39]">&lt;xentrac&gt;</a></span><span class="message">(begin (define a (cons 'a '())) (define b (cons 'a '())) (list (eq? a a) (eq? a b)))</span></div><div class="line" id="182551"><span class="nick" style="color:#234e69"><a href="#182551" label="[18:25:51]">&lt;xentrac&gt;</a></span><span class="message">that gives you #t #f</span></div><div class="line" id="182741"><span class="nick" style="color:#234e69"><a href="#182741" label="[18:27:41]">&lt;xentrac&gt;</a></span><span class="message">but presumably list=? would give you #t #t</span></div><div class="line" id="182903"><span class="nick" style="color:#234e69"><a href="#182903" label="[18:29:03]">&lt;xentrac&gt;</a></span><span class="message">BDS C sold for US$150 in 1983; I don't know if that price was higher or lower than before</span></div><div class="line" id="182929"><span class="nick" style="color:#234e69"><a href="#182929" label="[18:29:29]">&lt;xentrac&gt;</a></span><span class="message">so yeah that suggests several million dollars in revenoo</span></div><div class="line" id="183819"><span class="nick" style="color:#2e2a4a"><a href="#183819" label="[18:38:19]">&lt;oriansj&gt;</a></span><span class="message">xentrac: list=? would just give #t in that case</span></div><div class="line" id="183919"><span class="nick" style="color:#2e2a4a"><a href="#183919" label="[18:39:19]">&lt;oriansj&gt;</a></span><span class="message">also (eq? '(a) '(a)) is also unspecified</span></div><div class="line" id="184036"><span class="nick" style="color:#2e2a4a"><a href="#184036" label="[18:40:36]">&lt;oriansj&gt;</a></span><span class="message">but (eq? '() '()) is specified to be #t</span></div><div class="line" id="184354"><span class="nick" style="color:#234e69"><a href="#184354" label="[18:43:54]">&lt;xentrac&gt;</a></span><span class="message">#t in both cases?</span></div><div class="line" id="184407"><span class="nick" style="color:#234e69"><a href="#184407" label="[18:44:07]">&lt;xentrac&gt;</a></span><span class="message">because my point is that eq? can reliably distinguish between them</span></div><div class="line" id="184507"><span class="nick" style="color:#2e2a4a"><a href="#184507" label="[18:45:07]">&lt;oriansj&gt;</a></span><span class="message">well that is why I need a good test set for eq? to ensure slow_lisp does it perfectly</span></div><div class="line" id="184523"><span class="nick" style="color:#234e69"><a href="#184523" label="[18:45:23]">&lt;xentrac&gt;</a></span><span class="message">(eq? '(a) '(a)) is indeed unspecified because the compiler can implement it as either of those two cases</span></div><div class="line" id="184543"><span class="nick" style="color:#2e2a4a"><a href="#184543" label="[18:45:43]">&lt;oriansj&gt;</a></span><span class="message">xentrac: but what about eqv? can it be implemented using eq? and equal?</span></div><div class="line" id="184557"><span class="nick" style="color:#234e69"><a href="#184557" label="[18:45:57]">&lt;xentrac&gt;</a></span><span class="message">I think so yes</span></div><div class="line" id="184615"><span class="nick" style="color:#234e69"><a href="#184615" label="[18:46:15]">&lt;xentrac&gt;</a></span><span class="message">and the appropriate type tests of course</span></div><div class="line" id="184653"><span class="nick" style="color:#2e2a4a"><a href="#184653" label="[18:46:53]">&lt;oriansj&gt;</a></span><span class="message">of course</span></div><div class="line" id="185614"><span class="nick" style="color:#d9d9d9"><a href="#185614" label="[18:56:14]">&lt;zig&gt;</a></span><span class="message">&quot;full source bootstrap&quot; reads like a magic spell.</span></div><div class="line" id="185727"><span class="nick" style="color:#2e2a4a"><a href="#185727" label="[18:57:27]">&lt;oriansj&gt;</a></span><span class="message">janneke: I think I solved the need for  space between #;()#t</span></div><div class="line" id="185828"><span class="nick" style="color:#2e2a4a"><a href="#185828" label="[18:58:28]">&lt;oriansj&gt;</a></span><span class="message">zig: but the source code reads like I need to learn to spell</span></div><div class="line" id="190419"><span class="nick" style="color:#2e2a4a"><a href="#190419" label="[19:04:19]">&lt;oriansj&gt;</a></span><span class="message">take a look janneke</span></div><div class="line" id="191401"><span class="nick" style="color:#6b8072"><a href="#191401" label="[19:14:01]">*</a></span><span class="message">janneke fetches</span></div><div class="line" id="191553"><span class="nick" style="color:#6c3d55"><a href="#191553" label="[19:15:53]">&lt;janneke&gt;</a></span><span class="message">nice</span></div><div class="line" id="191632"><span class="nick" style="color:#6c3d55"><a href="#191632" label="[19:16:32]">&lt;janneke&gt;</a></span><span class="message">it's amazing how well it work to just let something rest and not worry</span></div><div class="line" id="191642"><span class="nick" style="color:#6c3d55"><a href="#191642" label="[19:16:42]">&lt;janneke&gt;</a></span><span class="message">*works</span></div><div class="line" id="213316"><span class="nick" style="color:#6d2462"><a href="#213316" label="[21:33:16]">&lt;fosslinux&gt;</a></span><span class="message">&lt;oriansj&gt; fosslinux: well supporting of int foo[4] wasn't required as int* foo = calloc(4, sizeof(int)); works fine and allows foo to be passed to other functions and I haven't added that complexity to the stack yet</span></div><div class="line" id="213321"><span class="nick" style="color:#6d2462"><a href="#213321" label="[21:33:21]">&lt;fosslinux&gt;</a></span><span class="message">yeah that's fair enough</span></div><div class="line" id="213330"><span class="nick" style="color:#6d2462"><a href="#213330" label="[21:33:30]">&lt;fosslinux&gt;</a></span><span class="message">that's what I figured the best way to do it was</span></div><div class="line" id="225921"><span class="nick" style="color:#bc80bd"><a href="#225921" label="[22:59:21]">&lt;theruran&gt;</a></span><span class="message">so uh, is mes-m2 supposed to segfault when run without any options or with a non-existent file? I traced it down to line 52 of mes_read.c where it calls fgetc(source_file) when source_file is 0x0.</span></div><div class="line" id="230504"><span class="nick" style="color:#6c3d55"><a href="#230504" label="[23:05:04]">&lt;janneke&gt;</a></span><span class="message">ah, that's prolly straight from mes; pretty silly not to give a proper warning</span></div><div class="line" id="232313"><span class="nick" style="color:#6c3d55"><a href="#232313" label="[23:23:13]">&lt;janneke&gt;</a></span><span class="message">theruran: something like this would be better: <a rel="nofollow" href="https://gitlab.com/janneke/mes/commit/34cfd9b850097d6a2241053e3e6faf99756d3702">https://gitlab.com/janneke/mes/commit/34cfd9b850097d6a2241053e3e6faf99756d3702</a> </span></div><div class="line" id="232541"><span class="nick" style="color:#3c5b35"><a href="#232541" label="[23:25:41]">&lt;dddddd&gt;</a></span><span class="message">janneke, do you mind a guix question? I drop it on #guix but maybe is so silly (I'm not familiar with the distro yet) that everyone ignore it.</span></div><div class="line" id="232621"><span class="nick" style="color:#3c5b35"><a href="#232621" label="[23:26:21]">&lt;dddddd&gt;</a></span><span class="message">Let's say I want to always download from guix servers, not any random upstream server.</span></div><div class="line" id="232706"><span class="nick" style="color:#3c5b35"><a href="#232706" label="[23:27:06]">&lt;dddddd&gt;</a></span><span class="message">Is that supported? Much like in debian one downloads always from debian mirrors.</span></div><div class="line" id="232718"><span class="nick" style="color:#6c3d55"><a href="#232718" label="[23:27:18]">&lt;janneke&gt;</a></span><span class="message">dddddd: oh, you prolly just picked a bad moment ;)</span></div><div class="line" id="232749"><span class="nick" style="color:#3c5b35"><a href="#232749" label="[23:27:49]">&lt;dddddd&gt;</a></span><span class="message">someone was asking something somehow related, and I tried (:</span></div><div class="line" id="233337"><span class="nick" style="color:#6c3d55"><a href="#233337" label="[23:33:37]">&lt;janneke&gt;</a></span><span class="message">dddddd: i tried to answer my best on #guix</span></div><div class="line" id="233723"><span class="nick" style="color:#3c5b35"><a href="#233723" label="[23:37:23]">&lt;dddddd&gt;</a></span><span class="message">I guess they don't like my nick xD</span></div><div class="line" id="233733"><span class="nick" style="color:#3c5b35"><a href="#233733" label="[23:37:33]">&lt;dddddd&gt;</a></span><span class="message">thanks anyway</span></div><div class="line" id="234153"><span class="nick" style="color:#bc80bd"><a href="#234153" label="[23:41:53]">&lt;theruran&gt;</a></span><span class="message">janneke: I'm sorry, I don't understand. I am running bin/mes-m2 from oriansj's mes-m2 repo on the slow_lisp branch. I don't see where your patch would apply.</span></div><div class="line" id="234231"><span class="nick" style="color:#6c3d55"><a href="#234231" label="[23:42:31]">&lt;janneke&gt;</a></span><span class="message">theruran: ah sorry -- i think mes-m2 has a mes_posix.c file?</span></div><div class="line" id="234236"><span class="nick" style="color:#6b8072"><a href="#234236" label="[23:42:36]">*</a></span><span class="message">janneke should check :)</span></div><div class="line" id="234255"><span class="nick" style="color:#bc80bd"><a href="#234255" label="[23:42:55]">&lt;theruran&gt;</a></span><span class="message">nope</span></div><div class="line" id="234408"><span class="nick" style="color:#6c3d55"><a href="#234408" label="[23:44:08]">&lt;janneke&gt;</a></span><span class="message">oh, and even open_input_file is gone :)</span></div><div class="line" id="234444"><span class="nick" style="color:#6c3d55"><a href="#234444" label="[23:44:44]">&lt;janneke&gt;</a></span><span class="message">a good thing i started the merge early</span></div><div class="line" id="234503"><span class="nick" style="color:#bc80bd"><a href="#234503" label="[23:45:03]">&lt;theruran&gt;</a></span><span class="message">this one is compiled with GCC c99 + glibc</span></div><div class="line" id="234625"><span class="nick" style="color:#6c3d55"><a href="#234625" label="[23:46:25]">&lt;janneke&gt;</a></span><span class="message">yes, i don't think mes-m2 can be compiled in all weird configurations that plain mes can :-)</span></div><div class="line" id="234656"><span class="nick" style="color:#6c3d55"><a href="#234656" label="[23:46:56]">&lt;janneke&gt;</a></span><span class="message">mes_builtins.c:	spinup(make_sym(&quot;open-input-file&quot;), make_prim(builtin_open_read));</span></div><div class="line" id="234743"><span class="nick" style="color:#6c3d55"><a href="#234743" label="[23:47:43]">&lt;janneke&gt;</a></span><span class="message">so there would the patch go; if mes-m2 still has error and throw, etc.</span></div><div class="line" id="234847"><span class="nick" style="color:#2e2a4a"><a href="#234847" label="[23:48:47]">&lt;oriansj&gt;</a></span><span class="message">theruran: export MES_CORE=0</span></div><div class="line" id="234848"><span class="nick" style="color:#6c3d55"><a href="#234848" label="[23:48:48]">&lt;janneke&gt;</a></span><span class="message">theruran: i very much like remarks such as yours; this open-file segfault has been bothering me but never enough to look a it and it can be addressed very easily</span></div><div class="line" id="234952"><span class="nick" style="color:#bc80bd"><a href="#234952" label="[23:49:52]">&lt;theruran&gt;</a></span><span class="message">janneke: glad to assist</span></div><div class="line" id="234956"><span class="nick" style="color:#bc80bd"><a href="#234956" label="[23:49:56]">&lt;theruran&gt;</a></span><span class="message">oriansj: but why?</span></div><div class="line" id="235010"><span class="nick" style="color:#3c5b35"><a href="#235010" label="[23:50:10]">&lt;dddddd&gt;</a></span><span class="message">heh, ironic that so much conversation about bootstrapping in #guix eclipses the guix questions :P I'll try again in another moment.</span></div><div class="line" id="235038"><span class="nick" style="color:#2e2a4a"><a href="#235038" label="[23:50:38]">&lt;oriansj&gt;</a></span><span class="message">essentially because the default code path attempts to be compatible with mes.c but a few things are not done yet</span></div><div class="line" id="235106"><span class="nick" style="color:#2e2a4a"><a href="#235106" label="[23:51:06]">&lt;oriansj&gt;</a></span><span class="message">and MES_CORE simply skips the loading of the file and goes straight the REPL by default</span></div><div class="line" id="235426"><span class="nick" style="color:#bc80bd"><a href="#235426" label="[23:54:26]">&lt;theruran&gt;</a></span><span class="message">I see, so it will be fixed when the rest of the system is implemented. It's a bit confusing to use, and I don't know if that's because it is meant for bootstrapping and not other real-world use. I am still trying to understand what's missing.</span></div><div class="line" id="235456"><span class="nick" style="color:#6c3d55"><a href="#235456" label="[23:54:56]">&lt;janneke&gt;</a></span><span class="message">i think what's missing is person-power</span></div><div class="line" id="235543"><span class="nick" style="color:#6c3d55"><a href="#235543" label="[23:55:43]">&lt;janneke&gt;</a></span><span class="message">i am in the process of releasing mes-0.21 and just found yesterday that on x86_64, starting mes as a repl was broken</span></div><div class="line" id="235544"><span class="nick" style="color:#bc80bd"><a href="#235544" label="[23:55:44]">&lt;theruran&gt;</a></span><span class="message">documentation :/</span></div><div class="line" id="235604"><span class="nick" style="color:#bc80bd"><a href="#235604" label="[23:56:04]">&lt;theruran&gt;</a></span><span class="message">oops!</span></div><div class="line" id="235622"><span class="nick" style="color:#6c3d55"><a href="#235622" label="[23:56:22]">&lt;janneke&gt;</a></span><span class="message">turned out it has been broken for many releases</span></div><div class="line" id="235642"><span class="nick" style="color:#6c3d55"><a href="#235642" label="[23:56:42]">&lt;janneke&gt;</a></span><span class="message">the bootstrap in guix uses x86 exclusively, so i almost never build 64 bits</span></div><div class="line" id="235653"><span class="nick" style="color:#6c3d55"><a href="#235653" label="[23:56:53]">&lt;janneke&gt;</a></span><span class="message">also, the bootstrap does not use the repl</span></div><div class="line" id="235700"><span class="nick" style="color:#bc80bd"><a href="#235700" label="[23:57:00]">&lt;theruran&gt;</a></span><span class="message">I was just expecting it to give me a REPL with a &gt; PS or give a help message, or spit out an error. But segfaulting is kinda rude :P</span></div><div class="line" id="235729"><span class="nick" style="color:#6c3d55"><a href="#235729" label="[23:57:29]">&lt;janneke&gt;</a></span><span class="message">hehe, yeah we are like that</span></div><div class="line" id="235759"><span class="nick" style="color:#6c3d55"><a href="#235759" label="[23:57:59]">&lt;janneke&gt;</a></span><span class="message">instead of rude, you could say: implemented with a rigourous focus on bootstrapping :P</span></div><div class="line" id="235810"><span class="nick" style="color:#bc80bd"><a href="#235810" label="[23:58:10]">&lt;theruran&gt;</a></span><span class="message">oh, that's right!</span></div><div class="line" id="235828"><span class="nick" style="color:#2e2a4a"><a href="#235828" label="[23:58:28]">&lt;oriansj&gt;</a></span><span class="message">theruran: are you on commit 68ba63f3e82861b243deb55bee92dc4292027961 ?</span></div><div class="line" id="235910"><span class="nick" style="color:#bc80bd"><a href="#235910" label="[23:59:10]">&lt;theruran&gt;</a></span><span class="message">I have been getting segfaults in other software like GNUcash on startup so I figured this might have been because I have a lot of compiler and kernel hardening features enabled.</span></div><div class="line" id="235950"><span class="nick" style="color:#bc80bd"><a href="#235950" label="[23:59:50]">&lt;theruran&gt;</a></span><span class="message">oriansj: I am now</span></div><div class="line" id="235956"><span class="nick" style="color:#2e2a4a"><a href="#235956" label="[23:59:56]">&lt;oriansj&gt;</a></span><span class="message">make clean test</span></div><br /></div></body></html>