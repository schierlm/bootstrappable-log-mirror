<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-12-18.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000010"><span class="nick" style="color:#389600"><a href="#000010" label="[00:00:10]">&lt;stikonas&gt;</a></span><span class="message">sam_: I don't know whether it's better to put gentoo integration into its own repo or somehow integrate as an optional part of live-bootstrap</span></div><div class="line" id="000604"><span class="nick" style="color:#8dd3c7"><a href="#000604" label="[00:06:04]">&lt;fossy&gt;</a></span><span class="message">i feel like LFS wouldn't mind a reference to live-bootstrap somewhere in the book</span></div><div class="line" id="000612"><span class="nick" style="color:#8dd3c7"><a href="#000612" label="[00:06:12]">&lt;fossy&gt;</a></span><span class="message">oh, oriansj talked to them lol</span></div><div class="line" id="000705"><span class="nick" style="color:#8dd3c7"><a href="#000705" label="[00:07:05]">&lt;fossy&gt;</a></span><span class="message">i strongly doubt they would want anything much more than that, since they are reasonably fixed on their one process</span></div><div class="line" id="000845"><span class="nick" style="color:#8dd3c7"><a href="#000845" label="[00:08:45]">&lt;fossy&gt;</a></span><span class="message">stikonas: my thoughts for integration was having live-bootstrap finish on a hook, and then people can chuck a variety of things onto the end, so imo integration fits better into its own rep</span></div><div class="line" id="000937"><span class="nick" style="color:#389600"><a href="#000937" label="[00:09:37]">&lt;stikonas&gt;</a></span><span class="message">well, hook is already there <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysc/after.sh">https://github.com/fosslinux/live-bootstrap/blob/master/sysc/after.sh</a> </span></div><div class="line" id="001134"><span class="nick" style="color:#8dd3c7"><a href="#001134" label="[00:11:34]">&lt;fossy&gt;</a></span><span class="message">well, yes, but i was thinking something a little bit more sophisticated, possibly reading from a different disk/tarball/etc, so it exists in a little more isolation from live-bootstrap (and you don't have to wrangle the initramfs/disk)</span></div><div class="line" id="001201"><span class="nick" style="color:#2e2a4a"><a href="#001201" label="[00:12:01]">&lt;sam_&gt;</a></span><span class="message">this is where I need to learn more about how live-bootstrap works to answer properly</span></div><div class="line" id="001226"><span class="nick" style="color:#2e2a4a"><a href="#001226" label="[00:12:26]">&lt;sam_&gt;</a></span><span class="message">I don't get how the integration/incorporation could work yet, but I want to know &amp; am interested in it</span></div><div class="line" id="001312"><span class="nick" style="color:#389600"><a href="#001312" label="[00:13:12]">&lt;stikonas&gt;</a></span><span class="message">that's a bit of chicken and egg problem</span></div><div class="line" id="001321"><span class="nick" style="color:#389600"><a href="#001321" label="[00:13:21]">&lt;stikonas&gt;</a></span><span class="message">hard to tell what to do until somebody starts integrating</span></div><div class="line" id="001448"><span class="nick" style="color:#8dd3c7"><a href="#001448" label="[00:14:48]">&lt;fossy&gt;</a></span><span class="message">effectively live-bootstrap is IN: binary seed + kernel (currently hex0, kaem, linux, in the hopefully near future builder-hex0) and source code. OUT: a modern C/C++ toolchain with an accompanying linux system that can be used to build packages.</span></div><div class="line" id="001647"><span class="nick" style="color:#8dd3c7"><a href="#001647" label="[00:16:47]">&lt;fossy&gt;</a></span><span class="message">to be fair, that is true, that it is reasonably hard to tell, but at the most basic level; (taking the example of gentoo), live-bootstrap's linux system would be used to build up a stage3</span></div><div class="line" id="001719"><span class="nick" style="color:#8dd3c7"><a href="#001719" label="[00:17:19]">&lt;fossy&gt;</a></span><span class="message">how that works more precisely i'm not really sure</span></div><div class="line" id="001733"><span class="nick" style="color:#389600"><a href="#001733" label="[00:17:33]">&lt;stikonas&gt;</a></span><span class="message">yes, stage3 is a sensible point (not necesserily in tarball form, can be running system) but the question is indeed how to transition from live-bootstrap to gentoo steps</span></div><div class="line" id="001803"><span class="nick" style="color:#389600"><a href="#001803" label="[00:18:03]">&lt;stikonas&gt;</a></span><span class="message">and also some people asked for nicer format of OUT (rather than just a running shell)</span></div><div class="line" id="001830"><span class="nick" style="color:#2e2a4a"><a href="#001830" label="[00:18:30]">&lt;sam_&gt;</a></span><span class="message">stikonas: we also have bootstrap-prefix.sh which kind of has an interesting intersection with this</span></div><div class="line" id="001839"><span class="nick" style="color:#2e2a4a"><a href="#001839" label="[00:18:39]">&lt;sam_&gt;</a></span><span class="message">it goes from a system with some basic utilities -&gt; stage3</span></div><div class="line" id="001844"><span class="nick" style="color:#2e2a4a"><a href="#001844" label="[00:18:44]">&lt;sam_&gt;</a></span><span class="message">(but it's for gentoo prefix)</span></div><div class="line" id="001903"><span class="nick" style="color:#389600"><a href="#001903" label="[00:19:03]">&lt;stikonas&gt;</a></span><span class="message">well, gentoo prefix is something you can chroot into</span></div><div class="line" id="001938"><span class="nick" style="color:#389600"><a href="#001938" label="[00:19:38]">&lt;stikonas&gt;</a></span><span class="message">I did hear about bootstrap-prefix.sh but haven't used it...</span></div><div class="line" id="002022"><span class="nick" style="color:#389600"><a href="#002022" label="[00:20:22]">&lt;stikonas&gt;</a></span><span class="message">I once bootstrapped prefix with emerge itself without scripts, but that was somewhat tricky (build failures, etc...)</span></div><div class="line" id="002131"><span class="nick" style="color:#2e2a4a"><a href="#002131" label="[00:21:31]">&lt;sam_&gt;</a></span><span class="message">yeah, we need to document how to do that a lot better</span></div><div class="line" id="002134"><span class="nick" style="color:#2e2a4a"><a href="#002134" label="[00:21:34]">&lt;sam_&gt;</a></span><span class="message">someone was interested in doing it reently</span></div><div class="line" id="002148"><span class="nick" style="color:#2e2a4a"><a href="#002148" label="[00:21:48]">&lt;sam_&gt;</a></span><span class="message">bootstrap-prefix.sh is neat but I would prefer to be able to do it raw from an existing system with emerge</span></div><div class="line" id="002153"><span class="nick" style="color:#2e2a4a"><a href="#002153" label="[00:21:53]">&lt;sam_&gt;</a></span><span class="message">to not rely on trusting newly downloaded sources</span></div><div class="line" id="002611"><span class="nick" style="color:#389600"><a href="#002611" label="[00:26:11]">&lt;stikonas&gt;</a></span><span class="message">I think I had to try to build everything with minimal flags but then I had to do something manual to be able to chroot (possibly adjust some links not to point to host system)</span></div><div class="line" id="002620"><span class="nick" style="color:#389600"><a href="#002620" label="[00:26:20]">&lt;stikonas&gt;</a></span><span class="message">after that I was able to chroot in</span></div><div class="line" id="002708"><span class="nick" style="color:#389600"><a href="#002708" label="[00:27:08]">&lt;stikonas&gt;</a></span><span class="message">anyway, that's still some time away</span></div><div class="line" id="002719"><span class="nick" style="color:#389600"><a href="#002719" label="[00:27:19]">&lt;stikonas&gt;</a></span><span class="message">until we can do gentoo integration</span></div><div class="line" id="002741"><span class="nick" style="color:#389600"><a href="#002741" label="[00:27:41]">&lt;stikonas&gt;</a></span><span class="message">I wouldn't be surprised if we first get fiwix bootstrap working</span></div><div class="line" id="003318"><span class="nick" style="color:#8dd3c7"><a href="#003318" label="[00:33:18]">&lt;fossy&gt;</a></span><span class="message">prefix does seem like the most sensible path</span></div><div class="line" id="003326"><span class="nick" style="color:#8dd3c7"><a href="#003326" label="[00:33:26]">&lt;fossy&gt;</a></span><span class="message">sam_: how do you build the usual stage3s?</span></div><div class="line" id="003442"><span class="nick" style="color:#389600"><a href="#003442" label="[00:34:42]">&lt;stikonas&gt;</a></span><span class="message">i think there a tool to build them on the existing Gentoo</span></div><div class="line" id="003507"><span class="nick" style="color:#8dd3c7"><a href="#003507" label="[00:35:07]">&lt;fossy&gt;</a></span><span class="message">i see</span></div><div class="line" id="003510"><span class="nick" style="color:#389600"><a href="#003510" label="[00:35:10]">&lt;stikonas&gt;</a></span><span class="message">(catalyst)</span></div><div class="line" id="010523"><span class="nick" style="color:#6b8072"><a href="#010523" label="[01:05:23]">&lt;oriansj&gt;</a></span><span class="message">sam_: interesting material on top of your channel</span></div><div class="line" id="221321"><span class="nick" style="color:#80b1d3"><a href="#221321" label="[22:13:21]">&lt;rickmasters&gt;</a></span><span class="message">War story ahead...</span></div><div class="line" id="221334"><span class="nick" style="color:#80b1d3"><a href="#221334" label="[22:13:34]">&lt;rickmasters&gt;</a></span><span class="message">I finally tracked down the root cause for autoconf-2.64 failing on Fiwix.</span></div><div class="line" id="221353"><span class="nick" style="color:#80b1d3"><a href="#221353" label="[22:13:53]">&lt;rickmasters&gt;</a></span><span class="message">(An autoconf macro was failing so I had temporarily hard-coded the right value.)</span></div><div class="line" id="221409"><span class="nick" style="color:#80b1d3"><a href="#221409" label="[22:14:09]">&lt;rickmasters&gt;</a></span><span class="message">Turns out autoconf-2.64 failed because autoreconf-2.61 failed on configure.ac</span></div><div class="line" id="221420"><span class="nick" style="color:#80b1d3"><a href="#221420" label="[22:14:20]">&lt;rickmasters&gt;</a></span><span class="message">while running aclocal-1.10 which launched autom4te-2.61 which failed running m4-1.4.7</span></div><div class="line" id="221442"><span class="nick" style="color:#80b1d3"><a href="#221442" label="[22:14:42]">&lt;rickmasters&gt;</a></span><span class="message">to expand the AM_INIT_AUTOMAKE macro because AC_INIT had previously failed to set</span></div><div class="line" id="221455"><span class="nick" style="color:#80b1d3"><a href="#221455" label="[22:14:55]">&lt;rickmasters&gt;</a></span><span class="message">the package version because the AC_INIT macro used the m4_esyscmd macro to</span></div><div class="line" id="221509"><span class="nick" style="color:#80b1d3"><a href="#221509" label="[22:15:09]">&lt;rickmasters&gt;</a></span><span class="message">launch a script to parse the version, but m4_esyscmd was a built-in function in m4</span></div><div class="line" id="221519"><span class="nick" style="color:#80b1d3"><a href="#221519" label="[22:15:19]">&lt;rickmasters&gt;</a></span><span class="message">which used popen to read from the script but the file descriptor popen returned</span></div><div class="line" id="221530"><span class="nick" style="color:#80b1d3"><a href="#221530" label="[22:15:30]">&lt;rickmasters&gt;</a></span><span class="message">couldn't be read from because musl implemented popen with posix_spawn which</span></div><div class="line" id="221541"><span class="nick" style="color:#80b1d3"><a href="#221541" label="[22:15:41]">&lt;rickmasters&gt;</a></span><span class="message">created a pipe with O_CLOEXEC but there was a bug in Fiwix with that pipe option</span></div><div class="line" id="221553"><span class="nick" style="color:#80b1d3"><a href="#221553" label="[22:15:53]">&lt;rickmasters&gt;</a></span><span class="message">that incorrectly altered the flag on the underlying pipe instead of the file descriptor,</span></div><div class="line" id="221603"><span class="nick" style="color:#80b1d3"><a href="#221603" label="[22:16:03]">&lt;rickmasters&gt;</a></span><span class="message">causing the read end of the pipe to be write-only (because FD_CLOEXEC == O_WRONLY).</span></div><div class="line" id="221621"><span class="nick" style="color:#80b1d3"><a href="#221621" label="[22:16:21]">&lt;rickmasters&gt;</a></span><span class="message">That was probably the most layers I've had to work through so far but at least the fix was easy!</span></div><div class="line" id="223251"><span class="nick" style="color:#6d2462"><a href="#223251" label="[22:32:51]">&lt;muurkha&gt;</a></span><span class="message">haha holy shit</span></div><div class="line" id="223321"><span class="nick" style="color:#6d2462"><a href="#223321" label="[22:33:21]">&lt;muurkha&gt;</a></span><span class="message">congratulations!</span></div><div class="line" id="223407"><span class="nick" style="color:#80b1d3"><a href="#223407" label="[22:34:07]">&lt;rickmasters&gt;</a></span><span class="message">thanks muurkha</span></div><div class="line" id="225028"><span class="nick" style="color:#6b8072"><a href="#225028" label="[22:50:28]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: good work</span></div><div class="line" id="225045"><span class="nick" style="color:#6b8072"><a href="#225045" label="[22:50:45]">&lt;oriansj&gt;</a></span><span class="message">another reminder of how hard kernel work can be</span></div><div class="line" id="225224"><span class="nick" style="color:#234e69"><a href="#225224" label="[22:52:24]">&lt;Christoph[m]&gt;</a></span><span class="message">Wow! WOW!</span></div><div class="line" id="225315"><span class="nick" style="color:#6d2462"><a href="#225315" label="[22:53:15]">&lt;muurkha&gt;</a></span><span class="message">I think that wasn't kernel work that was the problem mostly</span></div><div class="line" id="225334"><span class="nick" style="color:#6d2462"><a href="#225334" label="[22:53:34]">&lt;muurkha&gt;</a></span><span class="message">even though the final bug was in the Fiwix kernel</span></div><div class="line" id="225719"><span class="nick" style="color:#6b8072"><a href="#225719" label="[22:57:19]">&lt;oriansj&gt;</a></span><span class="message">well indirect kernel work, as things have to work well enough to figure out what went wrong with the kernel code.</span></div><div class="line" id="225751"><span class="nick" style="color:#80b1d3"><a href="#225751" label="[22:57:51]">&lt;rickmasters&gt;</a></span><span class="message">It's nice to have the source code of all layers. Ultimately I diagnosed the read error in m4 by instrumenting the read syscall rather than the application.</span></div><div class="line" id="225912"><span class="nick" style="color:#80b1d3"><a href="#225912" label="[22:59:12]">&lt;rickmasters&gt;</a></span><span class="message">I modify execve to look for the program in question and set a variable debug_pid and then I can catch syscalls from that pid</span></div><div class="line" id="225957"><span class="nick" style="color:#80b1d3"><a href="#225957" label="[22:59:57]">&lt;rickmasters&gt;</a></span><span class="message">(I mean I modified sys_execve in the kernel)</span></div><div class="line" id="230012"><span class="nick" style="color:#6b8072"><a href="#230012" label="[23:00:12]">&lt;oriansj&gt;</a></span><span class="message">so i am guess no instrumentation for debugging out of the box</span></div><div class="line" id="230126"><span class="nick" style="color:#80b1d3"><a href="#230126" label="[23:01:26]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: i'm not using a debugger if thats what you're referring to</span></div><div class="line" id="230425"><span class="nick" style="color:#6b8072"><a href="#230425" label="[23:04:25]">&lt;oriansj&gt;</a></span><span class="message">I was thinking more auditd logging with additional debug info</span></div><div class="line" id="230526"><span class="nick" style="color:#6b8072"><a href="#230526" label="[23:05:26]">&lt;oriansj&gt;</a></span><span class="message">ah la dtrace</span></div><div class="line" id="230637"><span class="nick" style="color:#80b1d3"><a href="#230637" label="[23:06:37]">&lt;rickmasters&gt;</a></span><span class="message">autoconf had a debug log but it didn't help much because the failure was too low level</span></div><div class="line" id="230900"><span class="nick" style="color:#6b8072"><a href="#230900" label="[23:09:00]">&lt;oriansj&gt;</a></span><span class="message">yes, that I gathered. I was just asking if Fiwix did not have kernel hooks available at runtime to collect that information and it resulted in you having to do a custom build to get that information</span></div><div class="line" id="231048"><span class="nick" style="color:#80b1d3"><a href="#231048" label="[23:10:48]">&lt;rickmasters&gt;</a></span><span class="message">Oh, I see. Fiwix has a __DEBUG__ macro that operates system wide but it's way too verbose and extends run time like 10X</span></div><div class="line" id="231155"><span class="nick" style="color:#80b1d3"><a href="#231155" label="[23:11:55]">&lt;rickmasters&gt;</a></span><span class="message">So, I'll define it per syscall, but even that is too much - so yeah writing code to filter output was needed</span></div><div class="line" id="231250"><span class="nick" style="color:#80b1d3"><a href="#231250" label="[23:12:50]">&lt;rickmasters&gt;</a></span><span class="message">By the way, Fiwix compiles in two seconds (with parallel make) so that's nice</span></div><div class="line" id="231341"><span class="nick" style="color:#80b1d3"><a href="#231341" label="[23:13:41]">&lt;rickmasters&gt;</a></span><span class="message">And its a fraction of a second if its just a file or two.</span></div><div class="line" id="231416"><span class="nick" style="color:#389600"><a href="#231416" label="[23:14:16]">&lt;stikonas&gt;</a></span><span class="message">oh good, another fiwix pitfall solved</span></div><div class="line" id="232115"><span class="nick" style="color:#80b1d3"><a href="#232115" label="[23:21:15]">&lt;rickmasters&gt;</a></span><span class="message">to clarify, __DEBUG__ is a preprocessor variable used with #ifdef __DEBUG__ around code with printk</span></div><div class="line" id="233610"><span class="nick" style="color:#80b1d3"><a href="#233610" label="[23:36:10]">&lt;rickmasters&gt;</a></span><span class="message">Thought I'd follow up a loose end: m4 uses getc to read from popen and stops on EOF but does not check ferror/feof to see whether EOF was caused by an error.</span></div><div class="line" id="233704"><span class="nick" style="color:#80b1d3"><a href="#233704" label="[23:37:04]">&lt;rickmasters&gt;</a></span><span class="message">when getc returns EOF, that's not necessarily end-of-file. TIL</span></div><div class="line" id="233813"><span class="nick" style="color:#80b1d3"><a href="#233813" label="[23:38:13]">&lt;rickmasters&gt;</a></span><span class="message">If m4 had reported an error - EBADF in my case, that probably would have saved me a lot of time.</span></div><div class="line" id="233915"><span class="nick" style="color:#80b1d3"><a href="#233915" label="[23:39:15]">&lt;rickmasters&gt;</a></span><span class="message">It just silently returned an empty string to the next layer up.</span></div><div class="line" id="234025"><span class="nick" style="color:#389600"><a href="#234025" label="[23:40:25]">&lt;stikonas&gt;</a></span><span class="message">it might very well be due to us using old versions</span></div><div class="line" id="234054"><span class="nick" style="color:#389600"><a href="#234054" label="[23:40:54]">&lt;stikonas&gt;</a></span><span class="message">some of these bugs might be fixed in new m4</span></div><div class="line" id="234406"><span class="nick" style="color:#389600"><a href="#234406" label="[23:44:06]">&lt;stikonas&gt;</a></span><span class="message">hmm, hitting many of my bugs in m2libc on uefi :(</span></div><div class="line" id="234627"><span class="nick" style="color:#389600"><a href="#234627" label="[23:46:27]">&lt;stikonas&gt;</a></span><span class="message">after I've added reading of current environmental variables, started hitting lock up (I guess either infinite loop, or something deeper in UEFI) somewhere inside _free_allocated_memory() that I call on program exit</span></div><div class="line" id="234710"><span class="nick" style="color:#80b1d3"><a href="#234710" label="[23:47:10]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: yes, just checked. m4_esyscmd is much more thorough in m4-1.4.19 and checks ferror and would report &quot;cannot read pipe&quot;</span></div><div class="line" id="234753"><span class="nick" style="color:#389600"><a href="#234753" label="[23:47:53]">&lt;stikonas&gt;</a></span><span class="message">but it's also much harder to build on minimal system that we have at the beginning</span></div><div class="line" id="234753"><span class="nick" style="color:#80b1d3"><a href="#234753" label="[23:47:53]">&lt;rickmasters&gt;</a></span><span class="message">Not surprised. I find that most errors I track down for days are fixed in the latest version. :)</span></div><div class="line" id="234828"><span class="nick" style="color:#389600"><a href="#234828" label="[23:48:28]">&lt;stikonas&gt;</a></span><span class="message">which shows that software quality has improved a lot over the years but bootstrappability got much harder</span></div><div class="line" id="235019"><span class="nick" style="color:#80b1d3"><a href="#235019" label="[23:50:19]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: have you setup building UEFI so you can debug in that code if necessary? Probably not easy, but may pay off...</span></div><div class="line" id="235050"><span class="nick" style="color:#389600"><a href="#235050" label="[23:50:50]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: no, I haven't...</span></div><div class="line" id="235115"><span class="nick" style="color:#389600"><a href="#235115" label="[23:51:15]">&lt;stikonas&gt;</a></span><span class="message">I've been mostly debugging with printing things, early exit, commenting things out, etc...</span></div><div class="line" id="235126"><span class="nick" style="color:#389600"><a href="#235126" label="[23:51:26]">&lt;stikonas&gt;</a></span><span class="message">so even with this I have already learned a bit about current issue</span></div><div class="line" id="235208"><span class="nick" style="color:#389600"><a href="#235208" label="[23:52:08]">&lt;stikonas&gt;</a></span><span class="message">commenting out _free_pages() call in _free_allocated_memory() function does not help. Which means something is going wrong in my while loop</span></div><div class="line" id="235223"><span class="nick" style="color:#389600"><a href="#235223" label="[23:52:23]">&lt;stikonas&gt;</a></span><span class="message">it never finishes</span></div><div class="line" id="235311"><span class="nick" style="color:#389600"><a href="#235311" label="[23:53:11]">&lt;stikonas&gt;</a></span><span class="message">possibly caused by some corruption somewhere (out of bands write...) that overwrote memory tracking pointers</span></div><div class="line" id="235321"><span class="nick" style="color:#389600"><a href="#235321" label="[23:53:21]">&lt;stikonas&gt;</a></span><span class="message">yes, gdb would be nice to have for debugging</span></div><div class="line" id="235425"><span class="nick" style="color:#389600"><a href="#235425" label="[23:54:25]">&lt;stikonas&gt;</a></span><span class="message">although M2 compiled applications are not easy to debug in gdb either</span></div><div class="line" id="235453"><span class="nick" style="color:#389600"><a href="#235453" label="[23:54:53]">&lt;stikonas&gt;</a></span><span class="message">as debug symbols are only written up for function names</span></div><div class="line" id="235548"><span class="nick" style="color:#80b1d3"><a href="#235548" label="[23:55:48]">&lt;rickmasters&gt;</a></span><span class="message">I ended up building my own qemu to help figure out some problems which took many hours of futzing with build dependencies, but frankly it didn't help as much as I'd hoped...</span></div><div class="line" id="235705"><span class="nick" style="color:#80b1d3"><a href="#235705" label="[23:57:05]">&lt;rickmasters&gt;</a></span><span class="message">But it did help.</span></div><div class="line" id="235735"><span class="nick" style="color:#389600"><a href="#235735" label="[23:57:35]">&lt;stikonas&gt;</a></span><span class="message">well, we'll see how long I spend on this issue</span></div><div class="line" id="235747"><span class="nick" style="color:#389600"><a href="#235747" label="[23:57:47]">&lt;stikonas&gt;</a></span><span class="message">(as I just started encountering it)</span></div><div class="line" id="235855"><span class="nick" style="color:#80b1d3"><a href="#235855" label="[23:58:55]">&lt;rickmasters&gt;</a></span><span class="message">&quot;random&quot; memory corruption is one of the more difficult kinds of problems.</span></div><div class="line" id="235911"><span class="nick" style="color:#389600"><a href="#235911" label="[23:59:11]">&lt;stikonas&gt;</a></span><span class="message">yeah, though I have some leads</span></div><div class="line" id="235929"><span class="nick" style="color:#389600"><a href="#235929" label="[23:59:29]">&lt;stikonas&gt;</a></span><span class="message">printed size of what I'm calloc'ing and it's not always what I would expect</span></div><br /></div></body></html>