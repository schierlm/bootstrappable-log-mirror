<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-11-27.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000431"><span class="nick" style="color:#389600"><a href="#000431" label="[00:04:31]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well I was thinking of making that part of test1000; as the M2-Planet bootstrapped M2-Mesoplanet should be  identicial to the M2-Mesoplanet self-hosted version.</span></div><div class="line" id="000736"><span class="nick" style="color:#8dd3c7"><a href="#000736" label="[00:07:36]">&lt;stikonas&gt;</a></span><span class="message">hmm, yes, but that uses make, not kaem, doesn't it?</span></div><div class="line" id="000749"><span class="nick" style="color:#8dd3c7"><a href="#000749" label="[00:07:49]">&lt;stikonas&gt;</a></span><span class="message">or were you thinking of using kaem for that</span></div><div class="line" id="001259"><span class="nick" style="color:#389600"><a href="#001259" label="[00:12:59]">&lt;oriansj&gt;</a></span><span class="message">stikonas: it is a make test yes</span></div><div class="line" id="002532"><span class="nick" style="color:#389600"><a href="#002532" label="[00:25:32]">&lt;oriansj&gt;</a></span><span class="message">#include might work best outside of cc_macro.c with some changes to cc_reader.c and #include being found in  the token stream should probably become a major error</span></div><div class="line" id="012413"><span class="nick" style="color:#6b8072"><a href="#012413" label="[01:24:13]">&lt;fossy&gt;</a></span><span class="message">stikonas: plantman tcc cannot link linux kernel</span></div><div class="line" id="012415"><span class="nick" style="color:#6b8072"><a href="#012415" label="[01:24:15]">&lt;fossy&gt;</a></span><span class="message">or compile parts</span></div><div class="line" id="013637"><span class="nick" style="color:#80b1d3"><a href="#013637" label="[01:36:37]">&lt;plantman&gt;</a></span><span class="message">hi fossy.  What's that?</span></div><div class="line" id="013931"><span class="nick" style="color:#8dd3c7"><a href="#013931" label="[01:39:31]">&lt;stikonas&gt;</a></span><span class="message">oriansj: yeah, cc_reader.c might be best. Although there should be some guard against infinite recursion...</span></div><div class="line" id="013940"><span class="nick" style="color:#8dd3c7"><a href="#013940" label="[01:39:40]">&lt;stikonas&gt;</a></span><span class="message">maybe max include depth</span></div><div class="line" id="014003"><span class="nick" style="color:#6b8072"><a href="#014003" label="[01:40:03]">&lt;fossy&gt;</a></span><span class="message">tinycc is unable to link the linux kernel binary</span></div><div class="line" id="014010"><span class="nick" style="color:#6b8072"><a href="#014010" label="[01:40:10]">&lt;fossy&gt;</a></span><span class="message">it is also unable to compile some parts of it</span></div><div class="line" id="014018"><span class="nick" style="color:#8dd3c7"><a href="#014018" label="[01:40:18]">&lt;stikonas&gt;</a></span><span class="message">and we compile very minimal kernel binary</span></div><div class="line" id="014034"><span class="nick" style="color:#8dd3c7"><a href="#014034" label="[01:40:34]">&lt;stikonas&gt;</a></span><span class="message">if I remember correctly...</span></div><div class="line" id="015251"><span class="nick" style="color:#6b8072"><a href="#015251" label="[01:52:51]">&lt;fossy&gt;</a></span><span class="message">yeajH YOU DO</span></div><div class="line" id="015254"><span class="nick" style="color:#6b8072"><a href="#015254" label="[01:52:54]">&lt;fossy&gt;</a></span><span class="message">caps oops</span></div><div class="line" id="015301"><span class="nick" style="color:#6b8072"><a href="#015301" label="[01:53:01]">&lt;fossy&gt;</a></span><span class="message">yeah you do*</span></div><div class="line" id="135616"><span class="nick">***</span><span class="message notice">bandali is now known as mab</span></div><div class="line" id="145150"><span class="nick" style="color:#6d2462"><a href="#145150" label="[14:51:50]">&lt;t184256&gt;</a></span><span class="message">Hi, folks! This might be not hardcore enough for you, but maybe you'll still be interested. I've recently bootstrapped latest clang from a TinyCC binary: <a rel="nofollow" href="https://github.com/t184256/bootstrap-from-tcc">https://github.com/t184256/bootstrap-from-tcc</a> </span></div><div class="line" id="145339"><span class="nick" style="color:#6d2462"><a href="#145339" label="[14:53:39]">&lt;t184256&gt;</a></span><span class="message">The part where I had no libc yet was... an interesting learning experience =)</span></div><div class="line" id="151933"><span class="nick" style="color:#234e69"><a href="#151933" label="[15:19:33]">&lt;riv&gt;</a></span><span class="message">wow</span></div><div class="line" id="151947"><span class="nick" style="color:#234e69"><a href="#151947" label="[15:19:47]">&lt;riv&gt;</a></span><span class="message">that's brilliant!</span></div><div class="line" id="152026"><span class="nick" style="color:#6c3d55"><a href="#152026" label="[15:20:26]">&lt;janneke&gt;</a></span><span class="message">t184256: any bootstrapping effort is interesting, and what you did looks great</span></div><div class="line" id="152047"><span class="nick">***</span><span class="message notice">ChanServ sets mode: -o janneke</span></div><div class="line" id="152927"><span class="nick" style="color:#389600"><a href="#152927" label="[15:29:27]">&lt;oriansj&gt;</a></span><span class="message">t184256: no such thing as not hardcore enough here, every step in the right direction deserves praise.</span></div><div class="line" id="152933"><span class="nick" style="color:#389600"><a href="#152933" label="[15:29:33]">&lt;oriansj&gt;</a></span><span class="message">Good job t184256</span></div><div class="line" id="153826"><span class="nick" style="color:#6d2462"><a href="#153826" label="[15:38:26]">&lt;t184256&gt;</a></span><span class="message">Thanks. I'll move on to making a toy distro on top of it, but I'll be rooting for stage0 project to solve the question of &quot;where to get the initial trusted tcc binary from&quot; =)</span></div><div class="line" id="154116"><span class="nick" style="color:#389600"><a href="#154116" label="[15:41:16]">&lt;oriansj&gt;</a></span><span class="message">t184256: we already solved that</span></div><div class="line" id="154236"><span class="nick" style="color:#234e69"><a href="#154236" label="[15:42:36]">&lt;riv&gt;</a></span><span class="message">very exciting</span></div><div class="line" id="154247"><span class="nick" style="color:#389600"><a href="#154247" label="[15:42:47]">&lt;oriansj&gt;</a></span><span class="message">see <a rel="nofollow" href="https://github.com/oriansj/stage0-posix">https://github.com/oriansj/stage0-posix</a>  can be used to bootstrap mes-m2 (which can run MesCC) as has been done here: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap">https://github.com/fosslinux/live-bootstrap</a> </span></div><div class="line" id="154320"><span class="nick" style="color:#6d2462"><a href="#154320" label="[15:43:20]">&lt;t184256&gt;</a></span><span class="message">oriansj: wait, so there's some magic thing I run already? that wasn't obvious from the pages I was reading</span></div><div class="line" id="154346"><span class="nick" style="color:#389600"><a href="#154346" label="[15:43:46]">&lt;oriansj&gt;</a></span><span class="message">t184256: there is no need for magic here</span></div><div class="line" id="154505"><span class="nick" style="color:#389600"><a href="#154505" label="[15:45:05]">&lt;oriansj&gt;</a></span><span class="message">but yes, you can go from the tiny bootstrap hex0 all the way to GCC without anyting except a POSIX kernel to run the kaem-optional-seed</span></div><div class="line" id="154641"><span class="nick" style="color:#6d2462"><a href="#154641" label="[15:46:41]">&lt;t184256&gt;</a></span><span class="message">oriansj: I haven't come across that stage0-posix repo before, I'll sure take a look</span></div><div class="line" id="154659"><span class="nick" style="color:#389600"><a href="#154659" label="[15:46:59]">&lt;oriansj&gt;</a></span><span class="message">just be sure to do git clone --recursive</span></div><div class="line" id="154735"><span class="nick" style="color:#389600"><a href="#154735" label="[15:47:35]">&lt;oriansj&gt;</a></span><span class="message">as M2-Planet, mescc-tools, mescc-tools-extra, bootstrap-seeds and M2libc are also separate repos</span></div><div class="line" id="154743"><span class="nick" style="color:#6d2462"><a href="#154743" label="[15:47:43]">&lt;t184256&gt;</a></span><span class="message">and yeah, preface your all wiki pages and readmes with &quot;this thing works already, just run this and that&quot;</span></div><div class="line" id="154819"><span class="nick" style="color:#389600"><a href="#154819" label="[15:48:19]">&lt;oriansj&gt;</a></span><span class="message">fair, we have been a bit bad at marketing to say the least</span></div><div class="line" id="154844"><span class="nick" style="color:#6d2462"><a href="#154844" label="[15:48:44]">&lt;t184256&gt;</a></span><span class="message">from the two hours I spend looking at stage0 docs when I was starting that I got an impression that it's almost there, but not quite</span></div><div class="line" id="154917"><span class="nick" style="color:#389600"><a href="#154917" label="[15:49:17]">&lt;oriansj&gt;</a></span><span class="message">t184256: well yes, the bare metal bootstrap without any kernel still needs work</span></div><div class="line" id="154944"><span class="nick" style="color:#389600"><a href="#154944" label="[15:49:44]">&lt;oriansj&gt;</a></span><span class="message">but mescc-tools and M2-Planet are the universal sync point for the bare-metal, DOS and POSIX roots</span></div><div class="line" id="155105"><span class="nick" style="color:#389600"><a href="#155105" label="[15:51:05]">&lt;oriansj&gt;</a></span><span class="message">we just need a POSIX M2-Planet can bootstrap for the bare metal to go the rest of the way</span></div><div class="line" id="155305"><span class="nick" style="color:#389600"><a href="#155305" label="[15:53:05]">&lt;oriansj&gt;</a></span><span class="message">one can even verify the M2-Planet bare-metal output identicially matches the M2-Planet POSIX output.</span></div><div class="line" id="155420"><span class="nick" style="color:#389600"><a href="#155420" label="[15:54:20]">&lt;oriansj&gt;</a></span><span class="message">everything in stage0 and stage0-posix is designed for cross verification; so every port on every architecture and on every platform (baremetal, POSIX, DOS, etc) will produce identical output</span></div><div class="line" id="155527"><span class="nick" style="color:#389600"><a href="#155527" label="[15:55:27]">&lt;oriansj&gt;</a></span><span class="message">So completing stage0-posix is all that was really needed for someone wanting to do a trusted bootstrap</span></div><div class="line" id="155657"><span class="nick" style="color:#8dd3c7"><a href="#155657" label="[15:56:57]">&lt;stikonas&gt;</a></span><span class="message">t184256: and definitely take a look at live-bootstrap, it does similar things as your bootstrap but goes even a bit further: bootstraps all autogenerated files like configure, bison files, etc...</span></div><div class="line" id="155727"><span class="nick" style="color:#8dd3c7"><a href="#155727" label="[15:57:27]">&lt;stikonas&gt;</a></span><span class="message">also perl bootstrap...</span></div><div class="line" id="155735"><span class="nick" style="color:#8dd3c7"><a href="#155735" label="[15:57:35]">&lt;stikonas&gt;</a></span><span class="message">we haven't done python yet (fossy is working on that)</span></div><div class="line" id="155743"><span class="nick" style="color:#6d2462"><a href="#155743" label="[15:57:43]">&lt;t184256&gt;</a></span><span class="message">wow, yeah, invest in marketing</span></div><div class="line" id="155820"><span class="nick" style="color:#8dd3c7"><a href="#155820" label="[15:58:20]">&lt;stikonas&gt;</a></span><span class="message">we did a bit of marketing, there have been some links on hackernews</span></div><div class="line" id="155824"><span class="nick" style="color:#8dd3c7"><a href="#155824" label="[15:58:24]">&lt;stikonas&gt;</a></span><span class="message">I posted on reddit</span></div><div class="line" id="160100"><span class="nick" style="color:#8dd3c7"><a href="#160100" label="[16:01:00]">&lt;stikonas&gt;</a></span><span class="message">t184256: although, right now full bootstrap is only x86...</span></div><div class="line" id="160108"><span class="nick" style="color:#389600"><a href="#160108" label="[16:01:08]">&lt;oriansj&gt;</a></span><span class="message">t184256: yeah our announcement of bootstrapping GCC from hex got a grand total of 2 on hacker news</span></div><div class="line" id="160127"><span class="nick" style="color:#8dd3c7"><a href="#160127" label="[16:01:27]">&lt;stikonas&gt;</a></span><span class="message">in particular going from mes-m2 to tcc does not work on anything else except x86, not even amd64</span></div><div class="line" id="160158"><span class="nick" style="color:#8dd3c7"><a href="#160158" label="[16:01:58]">&lt;stikonas&gt;</a></span><span class="message">and ideally we would get rid of mes-m2 altogether and be able to build upstream mes</span></div><div class="line" id="160238"><span class="nick" style="color:#389600"><a href="#160238" label="[16:02:38]">&lt;oriansj&gt;</a></span><span class="message">which is what the current C preprocessor work is about</span></div><div class="line" id="160308"><span class="nick" style="color:#389600"><a href="#160308" label="[16:03:08]">&lt;oriansj&gt;</a></span><span class="message">expanding the possible paths to a shared root of trust</span></div><div class="line" id="160509"><span class="nick" style="color:#8dd3c7"><a href="#160509" label="[16:05:09]">&lt;stikonas&gt;</a></span><span class="message">well, current C preprocessor work would not be enough...</span></div><div class="line" id="160519"><span class="nick" style="color:#8dd3c7"><a href="#160519" label="[16:05:19]">&lt;stikonas&gt;</a></span><span class="message">it's more than that</span></div><div class="line" id="160537"><span class="nick" style="color:#8dd3c7"><a href="#160537" label="[16:05:37]">&lt;stikonas&gt;</a></span><span class="message">but the more we can do here, the less patches mes would need</span></div><div class="line" id="160543"><span class="nick" style="color:#8dd3c7"><a href="#160543" label="[16:05:43]">&lt;stikonas&gt;</a></span><span class="message">and hopefully easier to upstream</span></div><div class="line" id="160545"><span class="nick" style="color:#389600"><a href="#160545" label="[16:05:45]">&lt;oriansj&gt;</a></span><span class="message">such as adding more architectures into MesCC</span></div><div class="line" id="160651"><span class="nick" style="color:#389600"><a href="#160651" label="[16:06:51]">&lt;oriansj&gt;</a></span><span class="message">porting mescc-tools and M2-Planet to more architectures</span></div><div class="line" id="160710"><span class="nick" style="color:#389600"><a href="#160710" label="[16:07:10]">&lt;oriansj&gt;</a></span><span class="message">new stage0-posix seed paths to M2-Planet</span></div><div class="line" id="160715"><span class="nick" style="color:#8dd3c7"><a href="#160715" label="[16:07:15]">&lt;stikonas&gt;</a></span><span class="message">also might be good if M2libc can build mes directly</span></div><div class="line" id="160715"><span class="nick" style="color:#6d2462"><a href="#160715" label="[16:07:15]">&lt;t184256&gt;</a></span><span class="message">Is there some high-level map of what project takes what as an input, does what and outputs what?</span></div><div class="line" id="160729"><span class="nick" style="color:#8dd3c7"><a href="#160729" label="[16:07:29]">&lt;stikonas&gt;</a></span><span class="message">t184256: we have some a bit outdated graph</span></div><div class="line" id="160804"><span class="nick" style="color:#389600"><a href="#160804" label="[16:08:04]">&lt;oriansj&gt;</a></span><span class="message">in dot format: <a rel="nofollow" href="https://github.com/oriansj/talk-notes/blob/master/live-bootstrap.dot">https://github.com/oriansj/talk-notes/blob/master/live-bootstrap.dot</a>  and in pdf <a rel="nofollow" href="https://github.com/oriansj/talk-notes/blob/master/live-bootstrap.pdf">https://github.com/oriansj/talk-notes/blob/master/live-bootstrap.pdf</a> </span></div><div class="line" id="160821"><span class="nick" style="color:#d9d9d9"><a href="#160821" label="[16:08:21]">&lt;stikonas[m]&gt;</a></span><span class="message">btw, this is an incomplete and a bit outdated but still useful graph for live-bootstrap <a rel="nofollow" href="https://stikonas.eu/files/bootstrap/live-bootstrap.svg">https://stikonas.eu/files/bootstrap/live-bootstrap.svg</a> </span></div><div class="line" id="160850"><span class="nick" style="color:#d9d9d9"><a href="#160850" label="[16:08:50]">&lt;stikonas[m]&gt;</a></span><span class="message">Also see parts.rst in live-bootstrap</span></div><div class="line" id="160938"><span class="nick" style="color:#6d2462"><a href="#160938" label="[16:09:38]">&lt;t184256&gt;</a></span><span class="message">got one at repository granularity? =)</span></div><div class="line" id="161022"><span class="nick" style="color:#8dd3c7"><a href="#161022" label="[16:10:22]">&lt;stikonas&gt;</a></span><span class="message">not really...</span></div><div class="line" id="161037"><span class="nick" style="color:#8dd3c7"><a href="#161037" label="[16:10:37]">&lt;stikonas&gt;</a></span><span class="message">stage0-posix pulls in dependencies as submodules</span></div><div class="line" id="161057"><span class="nick" style="color:#8dd3c7"><a href="#161057" label="[16:10:57]">&lt;stikonas&gt;</a></span><span class="message">so stuff like mescc-tools, mescc-tools-extra, M2-Planet, M2libc, bootstrap-seeds</span></div><div class="line" id="161110"><span class="nick" style="color:#8dd3c7"><a href="#161110" label="[16:11:10]">&lt;stikonas&gt;</a></span><span class="message">so at repository level it depends on those</span></div><div class="line" id="161129"><span class="nick" style="color:#8dd3c7"><a href="#161129" label="[16:11:29]">&lt;stikonas&gt;</a></span><span class="message">after that we have untar and ungz, so can switch to using tarballs</span></div><div class="line" id="161135"><span class="nick" style="color:#6d2462"><a href="#161135" label="[16:11:35]">&lt;t184256&gt;</a></span><span class="message">I think I need a day to map it</span></div><div class="line" id="161154"><span class="nick" style="color:#8dd3c7"><a href="#161154" label="[16:11:54]">&lt;stikonas&gt;</a></span><span class="message">but basically there is mes-m2 fork of mes that we can build with M2-Planet</span></div><div class="line" id="161226"><span class="nick" style="color:#8dd3c7"><a href="#161226" label="[16:12:26]">&lt;stikonas&gt;</a></span><span class="message">then you can either build upstream mes or go directly to old and patched tcc  0.9.26</span></div><div class="line" id="161301"><span class="nick" style="color:#6d2462"><a href="#161301" label="[16:13:01]">&lt;t184256&gt;</a></span><span class="message">stage0-posix goes from hex0 to mescc&amp;m2-planet, live-bootstrap takes it from there and goes to familiar userspace?</span></div><div class="line" id="161311"><span class="nick" style="color:#389600"><a href="#161311" label="[16:13:11]">&lt;oriansj&gt;</a></span><span class="message">short version is only one repo is needed: stage0-posix; everything after that can be just tarballs because untar and ungz are included in the output; just leverage the after.kaem hook</span></div><div class="line" id="161334"><span class="nick" style="color:#8dd3c7"><a href="#161334" label="[16:13:34]">&lt;stikonas&gt;</a></span><span class="message">live-bootstrap pulls in stage0-posix as submodule if you use it</span></div><div class="line" id="161442"><span class="nick" style="color:#d9d9d9"><a href="#161442" label="[16:14:42]">&lt;stikonas[m]&gt;</a></span><span class="message">tcc is here: <a rel="nofollow" href="https://gitlab.com/janneke/tinycc/-/tree/mes-0.23.24">https://gitlab.com/janneke/tinycc/-/tree/mes-0.23.24</a> </span></div><div class="line" id="161537"><span class="nick" style="color:#8dd3c7"><a href="#161537" label="[16:15:37]">&lt;stikonas&gt;</a></span><span class="message">and yes, live-bootstrap leverages after.kaem hook in stage0-posix</span></div><div class="line" id="161725"><span class="nick" style="color:#6d2462"><a href="#161725" label="[16:17:25]">&lt;t184256&gt;</a></span><span class="message">OK, so, what I hear: read stage0-posix, then it shouldn't be far to tcc 0.9.26</span></div><div class="line" id="162023"><span class="nick" style="color:#d9d9d9"><a href="#162023" label="[16:20:23]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, mes or mes-m2 before that</span></div><div class="line" id="162032"><span class="nick" style="color:#389600"><a href="#162032" label="[16:20:32]">&lt;oriansj&gt;</a></span><span class="message">t184256: the steps after stage0-posix are mes-m2, which runs MesCC, which can be used to build tcc</span></div><div class="line" id="162216"><span class="nick" style="color:#389600"><a href="#162216" label="[16:22:16]">&lt;oriansj&gt;</a></span><span class="message">as you could see at the absolute bottom of the build graph posted earlier.</span></div><div class="line" id="222635"><span class="nick" style="color:#8dd3c7"><a href="#222635" label="[22:26:35]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I might have gotten macro functions to work now</span></div><div class="line" id="223311"><span class="nick" style="color:#8dd3c7"><a href="#223311" label="[22:33:11]">&lt;stikonas&gt;</a></span><span class="message">oriansj: github seems do  be down for me, I've pushed it here for now: <a rel="nofollow" href="https://git.stikonas.eu/andrius/M2-Mesoplanet/commits/branch/macro_functions">https://git.stikonas.eu/andrius/M2-Mesoplanet/commits/branch/macro_functions</a> </span></div><div class="line" id="223325"><span class="nick" style="color:#8dd3c7"><a href="#223325" label="[22:33:25]">&lt;stikonas&gt;</a></span><span class="message">(or <a rel="nofollow" href="https://git.stikonas.eu/andrius/M2-Mesoplanet.git">https://git.stikonas.eu/andrius/M2-Mesoplanet.git</a>  for clone url)</span></div><div class="line" id="223545"><span class="nick" style="color:#8dd3c7"><a href="#223545" label="[22:35:45]">&lt;stikonas&gt;</a></span><span class="message">so macros like <a rel="nofollow" href="https://paste.debian.net/1221045/">https://paste.debian.net/1221045/</a>  now work</span></div><div class="line" id="232201"><span class="nick" style="color:#8dd3c7"><a href="#232201" label="[23:22:01]">&lt;stikonas&gt;</a></span><span class="message">also we should deal better with // comments in M2-Mesoplanet...</span></div><div class="line" id="232211"><span class="nick" style="color:#8dd3c7"><a href="#232211" label="[23:22:11]">&lt;stikonas&gt;</a></span><span class="message">i.e. strip them in cc_reader...</span></div><div class="line" id="232242"><span class="nick" style="color:#8dd3c7"><a href="#232242" label="[23:22:42]">&lt;stikonas&gt;</a></span><span class="message">since we no longer require bootstrap mode once we have Mesoplanet</span></div><br /></div></body></html>