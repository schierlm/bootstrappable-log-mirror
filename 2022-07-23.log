<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-07-23.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="025403"><span class="nick" style="color:#8dd3c7"><a href="#025403" label="[02:54:03]">&lt;vagrantc&gt;</a></span><span class="message">janneke: lost track of this, but apparently some of mes's tests fail with gcc-12 <a rel="nofollow" href="https://bugs.debian.org/1012996">https://bugs.debian.org/1012996</a> </span></div><div class="line" id="025458"><span class="nick" style="color:#2e2a4a"><a href="#025458" label="[02:54:58]">*</a></span><span class="message">vagrantc will also ping bug-mes</span></div><div class="line" id="034453"><span class="nick" style="color:#6b8072"><a href="#034453" label="[03:44:53]">&lt;stikonas&gt;</a></span><span class="message">oriansj: there is a tool that might be able to generate TE image from PE32 images...</span></div><div class="line" id="034530"><span class="nick" style="color:#6b8072"><a href="#034530" label="[03:45:30]">&lt;stikonas&gt;</a></span><span class="message">we might be able to use it to create TE and see if it boots</span></div><div class="line" id="034537"><span class="nick" style="color:#6b8072"><a href="#034537" label="[03:45:37]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/tianocore/edk2/blob/master/BaseTools/Source/C/GenFw/GenFw.c">https://github.com/tianocore/edk2/blob/master/BaseTools/Source/C/GenFw/GenFw.c</a> </span></div><div class="line" id="035242"><span class="nick" style="color:#6b8072"><a href="#035242" label="[03:52:42]">&lt;stikonas&gt;</a></span><span class="message">and TE image does not run in UEFI shell after processing with this tool...</span></div><div class="line" id="035304"><span class="nick" style="color:#6b8072"><a href="#035304" label="[03:53:04]">&lt;stikonas&gt;</a></span><span class="message">so I guess we should forget about it and just deal with full PE header...</span></div><div class="line" id="042846"><span class="nick" style="color:#80b1d3"><a href="#042846" label="[04:28:46]">&lt;oriansj&gt;</a></span><span class="message">stikonas: it is ok, just consider a cost of doing business like the bloated ELF header</span></div><div class="line" id="045729"><span class="nick" style="color:#80b1d3"><a href="#045729" label="[04:57:29]">&lt;oriansj&gt;</a></span><span class="message">progress is made one painful step at a time</span></div><div class="line" id="054503"><span class="nick" style="color:#80b1d3"><a href="#054503" label="[05:45:03]">&lt;oriansj&gt;</a></span><span class="message">I am only this far: <a rel="nofollow" href="https://paste.debian.net/1248116/">https://paste.debian.net/1248116/</a>  it is very slow going</span></div><div class="line" id="055356"><span class="nick" style="color:#80b1d3"><a href="#055356" label="[05:53:56]">&lt;oriansj&gt;</a></span><span class="message">a full reboot cycle to test a single 4byte change</span></div><div class="line" id="055454"><span class="nick" style="color:#80b1d3"><a href="#055454" label="[05:54:54]">&lt;oriansj&gt;</a></span><span class="message">The Timestamp supposedly seems to prefer: 50 45 00 00                     # Timestamp supposedly (But seems to have to be a duplicate signature???)</span></div><div class="line" id="060203"><span class="nick" style="color:#80b1d3"><a href="#060203" label="[06:02:03]">&lt;oriansj&gt;</a></span><span class="message">nope looks like duplication bug in standard tooling</span></div><div class="line" id="060721"><span class="nick" style="color:#80b1d3"><a href="#060721" label="[06:07:21]">&lt;oriansj&gt;</a></span><span class="message">so moderate correction: <a rel="nofollow" href="https://paste.debian.net/1248119/">https://paste.debian.net/1248119/</a> </span></div><div class="line" id="060816"><span class="nick" style="color:#80b1d3"><a href="#060816" label="[06:08:16]">&lt;oriansj&gt;</a></span><span class="message">and if you want to see the full file I am slowly figuring out: <a rel="nofollow" href="https://paste.debian.net/1248120/">https://paste.debian.net/1248120/</a> </span></div><div class="line" id="060909"><span class="nick" style="color:#80b1d3"><a href="#060909" label="[06:09:09]">&lt;oriansj&gt;</a></span><span class="message">it is hex0 in hex0 just no comments as it was a dump in attempt to decode the PE bits and it does self-host on UEFI</span></div><div class="line" id="122839"><span class="nick" style="color:#6d2462"><a href="#122839" label="[12:28:39]">&lt;stikonas[m]&gt;</a></span><span class="message">I thought DOS stub can be zeroed...</span></div><div class="line" id="122840"><span class="nick" style="color:#6d2462"><a href="#122840" label="[12:28:40]">&lt;stikonas[m]&gt;</a></span><span class="message">hmm</span></div><div class="line" id="122845"><span class="nick" style="color:#6d2462"><a href="#122845" label="[12:28:45]">&lt;stikonas[m]&gt;</a></span><span class="message">maybe not...</span></div><div class="line" id="140917"><span class="nick" style="color:#80b1d3"><a href="#140917" label="[14:09:17]">&lt;oriansj&gt;</a></span><span class="message">well this is a very VERY rough stage</span></div><div class="line" id="141129"><span class="nick" style="color:#80b1d3"><a href="#141129" label="[14:11:29]">&lt;oriansj&gt;</a></span><span class="message">just trying to figure out the ugly details and be roughly correct enough to run</span></div><div class="line" id="142255"><span class="nick" style="color:#6b8072"><a href="#142255" label="[14:22:55]">&lt;stikonas&gt;</a></span><span class="message">well, I have started converting hex0.S to hex0.M1</span></div><div class="line" id="142318"><span class="nick" style="color:#6b8072"><a href="#142318" label="[14:23:18]">&lt;stikonas&gt;</a></span><span class="message">but yes, we can make header smaller later if possible</span></div><div class="line" id="142913"><span class="nick" style="color:#80b1d3"><a href="#142913" label="[14:29:13]">&lt;oriansj&gt;</a></span><span class="message">well, once it gets to a stable state, we can more effectively make tests</span></div><div class="line" id="153306"><span class="nick" style="color:#80b1d3"><a href="#153306" label="[15:33:06]">&lt;oriansj&gt;</a></span><span class="message">and I am making good progress today on converting your hex0.s to hex2</span></div><div class="line" id="153819"><span class="nick" style="color:#6b8072"><a href="#153819" label="[15:38:19]">&lt;stikonas&gt;</a></span><span class="message">oh you are working directly...</span></div><div class="line" id="153833"><span class="nick" style="color:#6b8072"><a href="#153833" label="[15:38:33]">&lt;stikonas&gt;</a></span><span class="message">well, my .M1 prototype would still be useful later</span></div><div class="line" id="153841"><span class="nick" style="color:#6b8072"><a href="#153841" label="[15:38:41]">&lt;stikonas&gt;</a></span><span class="message">we can move comments to hex2 file</span></div><div class="line" id="153904"><span class="nick" style="color:#6b8072"><a href="#153904" label="[15:39:04]">&lt;stikonas&gt;</a></span><span class="message">and right now I have no means of testing that M1 file</span></div><div class="line" id="154948"><span class="nick" style="color:#80b1d3"><a href="#154948" label="[15:49:48]">&lt;oriansj&gt;</a></span><span class="message">yeah, unfortunately I have a bad habit of working backwards</span></div><div class="line" id="155001"><span class="nick" style="color:#80b1d3"><a href="#155001" label="[15:50:01]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1248139/">https://paste.debian.net/1248139/</a>  but this is self-hosting</span></div><div class="line" id="155253"><span class="nick" style="color:#80b1d3"><a href="#155253" label="[15:52:53]">&lt;oriansj&gt;</a></span><span class="message">and I haven't yet figured out all of the non-null bits yet</span></div><div class="line" id="155315"><span class="nick" style="color:#80b1d3"><a href="#155315" label="[15:53:15]">&lt;oriansj&gt;</a></span><span class="message">but I am slowly converting them to null if possible</span></div><div class="line" id="155345"><span class="nick" style="color:#6b8072"><a href="#155345" label="[15:53:45]">&lt;stikonas&gt;</a></span><span class="message">well, it's fine, we'll converge on something...</span></div><div class="line" id="155354"><span class="nick" style="color:#6b8072"><a href="#155354" label="[15:53:54]">&lt;stikonas&gt;</a></span><span class="message">I'll later port my changes to your hex2 file</span></div><div class="line" id="155425"><span class="nick" style="color:#6b8072"><a href="#155425" label="[15:54:25]">&lt;stikonas&gt;</a></span><span class="message">I'm also looking in some places at some mini optimizations. I think in command line argument processing loop I'll swap rax and rbx registers</span></div><div class="line" id="155445"><span class="nick" style="color:#6b8072"><a href="#155445" label="[15:54:45]">&lt;stikonas&gt;</a></span><span class="message">cmp  bl, 0x20 is one byte longer than cmp  al, 0x20</span></div><div class="line" id="155548"><span class="nick" style="color:#80b1d3"><a href="#155548" label="[15:55:48]">&lt;oriansj&gt;</a></span><span class="message">probably a good plan</span></div><div class="line" id="155635"><span class="nick" style="color:#6b8072"><a href="#155635" label="[15:56:35]">&lt;stikonas&gt;</a></span><span class="message">now I have slightly better idea which code is shorter than when I was writing hex0.S</span></div><div class="line" id="155654"><span class="nick" style="color:#6b8072"><a href="#155654" label="[15:56:54]">&lt;stikonas&gt;</a></span><span class="message">in risc-v it's somewhat simpler, everything is 32-bit long</span></div><div class="line" id="155941"><span class="nick" style="color:#80b1d3"><a href="#155941" label="[15:59:41]">&lt;oriansj&gt;</a></span><span class="message">well that is a micro-optimization they did to make programs smaller if you use the accumulator</span></div><div class="line" id="160004"><span class="nick" style="color:#80b1d3"><a href="#160004" label="[16:00:04]">&lt;oriansj&gt;</a></span><span class="message">which for many code paths was the most frequently used register by default</span></div><div class="line" id="161636"><span class="nick" style="color:#6b8072"><a href="#161636" label="[16:16:36]">&lt;stikonas&gt;</a></span><span class="message">ok, pushed <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi/commit/93c8c5372cefb1d34e6ef4f7c0f9c7e127bf709c">https://git.stikonas.eu/andrius/stage0-uefi/commit/93c8c5372cefb1d34e6ef4f7c0f9c7e127bf709c</a> </span></div><div class="line" id="162211"><span class="nick" style="color:#6b8072"><a href="#162211" label="[16:22:11]">&lt;stikonas&gt;</a></span><span class="message">hmm, another thing we can optimize in hex0 is add JNE8 instead of JNE32...</span></div><div class="line" id="162253"><span class="nick" style="color:#6b8072"><a href="#162253" label="[16:22:53]">&lt;stikonas&gt;</a></span><span class="message">since hex0 is about 256 bytes, we shouldn't ever need 32-bit jumps</span></div><div class="line" id="162351"><span class="nick" style="color:#6b8072"><a href="#162351" label="[16:23:51]">&lt;stikonas&gt;</a></span><span class="message">ok it's actually already used in stage0-posix...</span></div><div class="line" id="162611"><span class="nick" style="color:#6b8072"><a href="#162611" label="[16:26:11]">&lt;stikonas&gt;</a></span><span class="message">oriansj: are you working on older hex0.S?</span></div><div class="line" id="162632"><span class="nick" style="color:#6b8072"><a href="#162632" label="[16:26:32]">&lt;stikonas&gt;</a></span><span class="message">although I guess it's fine...</span></div><div class="line" id="162637"><span class="nick" style="color:#6b8072"><a href="#162637" label="[16:26:37]">&lt;stikonas&gt;</a></span><span class="message">as long as we can figure out header stuff</span></div><div class="line" id="163610"><span class="nick" style="color:#80b1d3"><a href="#163610" label="[16:36:10]">&lt;oriansj&gt;</a></span><span class="message">stikonas: I am working on the output of the clang build of your hex0.S</span></div><div class="line" id="163707"><span class="nick" style="color:#80b1d3"><a href="#163707" label="[16:37:07]">&lt;oriansj&gt;</a></span><span class="message">So not optimized at all and mostly just to figure out the PE details</span></div><div class="line" id="164232"><span class="nick" style="color:#6b8072"><a href="#164232" label="[16:42:32]">&lt;stikonas&gt;</a></span><span class="message">yeah, but I meant it's older build of hex0.S before I optimized some asm source stuff</span></div><div class="line" id="164235"><span class="nick" style="color:#6b8072"><a href="#164235" label="[16:42:35]">&lt;stikonas&gt;</a></span><span class="message">but it's fine...</span></div><div class="line" id="164537"><span class="nick" style="color:#80b1d3"><a href="#164537" label="[16:45:37]">&lt;oriansj&gt;</a></span><span class="message">well yeah, it isn't going to be used for anything  more than learning</span></div><div class="line" id="175647"><span class="nick" style="color:#80b1d3"><a href="#175647" label="[17:56:47]">&lt;oriansj&gt;</a></span><span class="message">so much for completely removing the dos stub</span></div><div class="line" id="175859"><span class="nick" style="color:#80b1d3"><a href="#175859" label="[17:58:59]">&lt;oriansj&gt;</a></span><span class="message">but we can completely zero it out</span></div><div class="line" id="180605"><span class="nick" style="color:#80b1d3"><a href="#180605" label="[18:06:05]">&lt;oriansj&gt;</a></span><span class="message">doesn't look like UEFI supports even shrinking it</span></div><div class="line" id="180624"><span class="nick" style="color:#80b1d3"><a href="#180624" label="[18:06:24]">&lt;oriansj&gt;</a></span><span class="message">so we are gonna have 64bytes of just nulls</span></div><div class="line" id="180641"><span class="nick" style="color:#80b1d3"><a href="#180641" label="[18:06:41]">&lt;oriansj&gt;</a></span><span class="message">unless I wish to be pithy and put some text</span></div><div class="line" id="180657"><span class="nick" style="color:#80b1d3"><a href="#180657" label="[18:06:57]">&lt;oriansj&gt;</a></span><span class="message">64 ascii chars of how much this is dumb</span></div><div class="line" id="181647"><span class="nick" style="color:#6b8072"><a href="#181647" label="[18:16:47]">&lt;stikonas&gt;</a></span><span class="message">hmm, yes, I think I tried only zeroing it, not removing</span></div><div class="line" id="181655"><span class="nick" style="color:#6b8072"><a href="#181655" label="[18:16:55]">&lt;stikonas&gt;</a></span><span class="message">I think zeroing is fine</span></div><div class="line" id="183538"><span class="nick" style="color:#80b1d3"><a href="#183538" label="[18:35:38]">&lt;oriansj&gt;</a></span><span class="message">and figured out the coff section: <a rel="nofollow" href="https://paste.debian.net/1248154/">https://paste.debian.net/1248154/</a> </span></div><div class="line" id="185249"><span class="nick" style="color:#80b1d3"><a href="#185249" label="[18:52:49]">&lt;oriansj&gt;</a></span><span class="message">up next is data directories and section table</span></div><div class="line" id="191034"><span class="nick" style="color:#6b8072"><a href="#191034" label="[19:10:34]">&lt;stikonas&gt;</a></span><span class="message">oriansj: any idea what File and Section alignment is?</span></div><div class="line" id="191123"><span class="nick" style="color:#6b8072"><a href="#191123" label="[19:11:23]">&lt;stikonas&gt;</a></span><span class="message">yesterday when I was trying to convert PE file to TE it was complaining that File and Section alighnments are not equal</span></div><div class="line" id="191245"><span class="nick" style="color:#80b1d3"><a href="#191245" label="[19:12:45]">&lt;oriansj&gt;</a></span><span class="message">I've got a few guesses</span></div><div class="line" id="191343"><span class="nick" style="color:#80b1d3"><a href="#191343" label="[19:13:43]">&lt;oriansj&gt;</a></span><span class="message">but the mChecksum bit is the big puzzle I am trying to figure out</span></div><div class="line" id="192616"><span class="nick" style="color:#80b1d3"><a href="#192616" label="[19:26:16]">&lt;oriansj&gt;</a></span><span class="message">lol, the checksum field isn't even looked at</span></div><div class="line" id="192621"><span class="nick" style="color:#80b1d3"><a href="#192621" label="[19:26:21]">&lt;oriansj&gt;</a></span><span class="message">zero the sucker</span></div><div class="line" id="192947"><span class="nick" style="color:#80b1d3"><a href="#192947" label="[19:29:47]">&lt;oriansj&gt;</a></span><span class="message">FileAlignment seems to be the byte offset in the file which is the program itself</span></div><div class="line" id="194202"><span class="nick" style="color:#6b8072"><a href="#194202" label="[19:42:02]">&lt;stikonas&gt;</a></span><span class="message">and hex0.M1 is now ready <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/amd64/Development/hex0.M1">https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/amd64/Development/hex0.M1</a> </span></div><div class="line" id="194307"><span class="nick" style="color:#80b1d3"><a href="#194307" label="[19:43:07]">&lt;oriansj&gt;</a></span><span class="message">neat</span></div><div class="line" id="194500"><span class="nick" style="color:#6b8072"><a href="#194500" label="[19:45:00]">&lt;stikonas&gt;</a></span><span class="message">once we have header ready, conversion to hex0 shouldn't be too hard</span></div><div class="line" id="194507"><span class="nick" style="color:#6b8072"><a href="#194507" label="[19:45:07]">&lt;stikonas&gt;</a></span><span class="message">it's definitely easier than on risc-v</span></div><div class="line" id="194624"><span class="nick" style="color:#80b1d3"><a href="#194624" label="[19:46:24]">&lt;oriansj&gt;</a></span><span class="message">also you just helped me figure out something</span></div><div class="line" id="194700"><span class="nick" style="color:#6b8072"><a href="#194700" label="[19:47:00]">&lt;stikonas&gt;</a></span><span class="message">?</span></div><div class="line" id="194850"><span class="nick" style="color:#80b1d3"><a href="#194850" label="[19:48:50]">&lt;oriansj&gt;</a></span><span class="message">LOADED_IMAGE_PROTOCOL</span></div><div class="line" id="195100"><span class="nick" style="color:#80b1d3"><a href="#195100" label="[19:51:00]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1248156/">https://paste.debian.net/1248156/</a> </span></div><div class="line" id="195111"><span class="nick" style="color:#80b1d3"><a href="#195111" label="[19:51:11]">&lt;oriansj&gt;</a></span><span class="message">it is a ways down but now I have a proper label for it</span></div><div class="line" id="195655"><span class="nick" style="color:#6b8072"><a href="#195655" label="[19:56:55]">&lt;stikonas&gt;</a></span><span class="message">I suspect we can get rid of all this padding at the bottom</span></div><div class="line" id="195816"><span class="nick" style="color:#80b1d3"><a href="#195816" label="[19:58:16]">&lt;oriansj&gt;</a></span><span class="message">I thought so too but there are non-null bits that appear to be function and haven't figured out moving them yet</span></div><div class="line" id="200423"><span class="nick" style="color:#80b1d3"><a href="#200423" label="[20:04:23]">&lt;oriansj&gt;</a></span><span class="message">and trimming off the null bytes at the end current makes it unsupported for some reason</span></div><div class="line" id="200432"><span class="nick" style="color:#6b8072"><a href="#200432" label="[20:04:32]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="200437"><span class="nick" style="color:#6b8072"><a href="#200437" label="[20:04:37]">&lt;stikonas&gt;</a></span><span class="message">maybe there is file size somewhere...</span></div><div class="line" id="200446"><span class="nick" style="color:#6b8072"><a href="#200446" label="[20:04:46]">&lt;stikonas&gt;</a></span><span class="message">or maybe alignment is wrong...</span></div><div class="line" id="200513"><span class="nick" style="color:#80b1d3"><a href="#200513" label="[20:05:13]">&lt;oriansj&gt;</a></span><span class="message">well lets see what happens if I shrink the alignment</span></div><div class="line" id="200540"><span class="nick" style="color:#80b1d3"><a href="#200540" label="[20:05:40]">&lt;oriansj&gt;</a></span><span class="message">to say 1 byte</span></div><div class="line" id="200548"><span class="nick" style="color:#80b1d3"><a href="#200548" label="[20:05:48]">&lt;oriansj&gt;</a></span><span class="message">with no other changes</span></div><div class="line" id="200635"><span class="nick" style="color:#80b1d3"><a href="#200635" label="[20:06:35]">&lt;oriansj&gt;</a></span><span class="message">ok that didn't break anything</span></div><div class="line" id="200647"><span class="nick" style="color:#80b1d3"><a href="#200647" label="[20:06:47]">&lt;oriansj&gt;</a></span><span class="message">and lets see if it enables us to delete some nulls</span></div><div class="line" id="200742"><span class="nick" style="color:#80b1d3"><a href="#200742" label="[20:07:42]">&lt;oriansj&gt;</a></span><span class="message">nope</span></div><div class="line" id="200828"><span class="nick" style="color:#80b1d3"><a href="#200828" label="[20:08:28]">&lt;oriansj&gt;</a></span><span class="message">maybe file alignment?</span></div><div class="line" id="200904"><span class="nick" style="color:#80b1d3"><a href="#200904" label="[20:09:04]">&lt;oriansj&gt;</a></span><span class="message">well setting file alignment to 1 didn't seem to break anything</span></div><div class="line" id="201033"><span class="nick" style="color:#80b1d3"><a href="#201033" label="[20:10:33]">&lt;oriansj&gt;</a></span><span class="message">nope still stuck with those nulls</span></div><div class="line" id="201522"><span class="nick" style="color:#80b1d3"><a href="#201522" label="[20:15:22]">&lt;oriansj&gt;</a></span><span class="message">stikonas: to your previous question: SectionAlignment and FileAlignment: Both members indicate the alignment of the sections of PE in the memory and in the file, respectively. When an executable is mapped into the memory, each section of that executable starts at a virtual address which is actually the multiple of this value.</span></div><div class="line" id="201912"><span class="nick" style="color:#6b8072"><a href="#201912" label="[20:19:12]">&lt;stikonas&gt;</a></span><span class="message">hmm, for us I guess it doesn't matter too much where it is mapped in the memory</span></div><div class="line" id="202004"><span class="nick" style="color:#6b8072"><a href="#202004" label="[20:20:04]">&lt;stikonas&gt;</a></span><span class="message">oriansj: minor issue but your LOADED_IMAGE_PROTOCOL_8 label is off by 2 bytes</span></div><div class="line" id="202025"><span class="nick" style="color:#6b8072"><a href="#202025" label="[20:20:25]">&lt;stikonas&gt;</a></span><span class="message">although that whole string is just single 128-bit UUID...</span></div><div class="line" id="202042"><span class="nick" style="color:#6b8072"><a href="#202042" label="[20:20:42]">&lt;stikonas&gt;</a></span><span class="message">it's just that we have to load it in two operations</span></div><div class="line" id="202228"><span class="nick" style="color:#80b1d3"><a href="#202228" label="[20:22:28]">&lt;oriansj&gt;</a></span><span class="message">stikonas: really?</span></div><div class="line" id="202253"><span class="nick" style="color:#6b8072"><a href="#202253" label="[20:22:53]">&lt;stikonas&gt;</a></span><span class="message">well, you have 6 bytes in the first part</span></div><div class="line" id="202257"><span class="nick" style="color:#6b8072"><a href="#202257" label="[20:22:57]">&lt;stikonas&gt;</a></span><span class="message">and 10 bytes in the second</span></div><div class="line" id="202328"><span class="nick" style="color:#6b8072"><a href="#202328" label="[20:23:28]">&lt;stikonas&gt;</a></span><span class="message">should be 8 and 8</span></div><div class="line" id="202349"><span class="nick" style="color:#80b1d3"><a href="#202349" label="[20:23:49]">&lt;oriansj&gt;</a></span><span class="message">I was just matching what you had</span></div><div class="line" id="202416"><span class="nick" style="color:#80b1d3"><a href="#202416" label="[20:24:16]">&lt;oriansj&gt;</a></span><span class="message">but easy to fix</span></div><div class="line" id="202529"><span class="nick" style="color:#80b1d3"><a href="#202529" label="[20:25:29]">&lt;oriansj&gt;</a></span><span class="message">thank you for helping me spot that mistake of mine</span></div><div class="line" id="202629"><span class="nick" style="color:#6b8072"><a href="#202629" label="[20:26:29]">&lt;stikonas&gt;</a></span><span class="message">well, it's not a bit deal</span></div><div class="line" id="202636"><span class="nick" style="color:#6b8072"><a href="#202636" label="[20:26:36]">&lt;stikonas&gt;</a></span><span class="message">since in hex0 we don't need labels...</span></div><div class="line" id="202645"><span class="nick" style="color:#6b8072"><a href="#202645" label="[20:26:45]">&lt;stikonas&gt;</a></span><span class="message">they'll only be important in hex2 code</span></div><div class="line" id="202704"><span class="nick" style="color:#6b8072"><a href="#202704" label="[20:27:04]">&lt;stikonas&gt;</a></span><span class="message">well, I should probably start converting hex0.M1 to hex0.hex2 (without header)</span></div><div class="line" id="202809"><span class="nick" style="color:#80b1d3"><a href="#202809" label="[20:28:09]">&lt;oriansj&gt;</a></span><span class="message">well sorting out the header is going slowly, sorry</span></div><div class="line" id="203054"><span class="nick" style="color:#6d2462"><a href="#203054" label="[20:30:54]">&lt;stikonas[m]&gt;</a></span><span class="message">No problem, that's expected</span></div><div class="line" id="203110"><span class="nick" style="color:#6d2462"><a href="#203110" label="[20:31:10]">&lt;stikonas[m]&gt;</a></span><span class="message">It's harder than what I'm doing now</span></div><div class="line" id="203225"><span class="nick" style="color:#80b1d3"><a href="#203225" label="[20:32:25]">&lt;oriansj&gt;</a></span><span class="message">good news, I can rearrange the section headers without anything breaking</span></div><div class="line" id="203257"><span class="nick" style="color:#80b1d3"><a href="#203257" label="[20:32:57]">&lt;oriansj&gt;</a></span><span class="message">lets see if I can figure out how to remove one</span></div><div class="line" id="210828"><span class="nick" style="color:#80b1d3"><a href="#210828" label="[21:08:28]">&lt;oriansj&gt;</a></span><span class="message">it is looking like a hard no</span></div><div class="line" id="211307"><span class="nick" style="color:#6b8072"><a href="#211307" label="[21:13:07]">&lt;stikonas&gt;</a></span><span class="message">oriansj: have updated num sections field?</span></div><div class="line" id="211315"><span class="nick" style="color:#6b8072"><a href="#211315" label="[21:13:15]">&lt;stikonas&gt;</a></span><span class="message">still it might be that we need all of them...</span></div><div class="line" id="211541"><span class="nick" style="color:#80b1d3"><a href="#211541" label="[21:15:41]">&lt;oriansj&gt;</a></span><span class="message">well if I turn off .reloc it'll refuse to load; if I turn off .text it'll just hang forever as there are no executable bytes and if I turn off .data it'll hang after a few instructions</span></div><div class="line" id="211727"><span class="nick" style="color:#6b8072"><a href="#211727" label="[21:17:27]">&lt;stikonas&gt;</a></span><span class="message">well, we had protocol GUIDs stored in .data</span></div><div class="line" id="211753"><span class="nick" style="color:#6b8072"><a href="#211753" label="[21:17:53]">&lt;stikonas&gt;</a></span><span class="message">although there shouldn't be any read restrictions...</span></div><div class="line" id="211757"><span class="nick" style="color:#6b8072"><a href="#211757" label="[21:17:57]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="211810"><span class="nick" style="color:#80b1d3"><a href="#211810" label="[21:18:10]">&lt;oriansj&gt;</a></span><span class="message">well we could move those into .text if I knew how to make it writable</span></div><div class="line" id="212503"><span class="nick" style="color:#6b8072"><a href="#212503" label="[21:25:03]">&lt;stikonas&gt;</a></span><span class="message">oh, I think that's the issue</span></div><div class="line" id="212511"><span class="nick" style="color:#6b8072"><a href="#212511" label="[21:25:11]">&lt;stikonas&gt;</a></span><span class="message">your older version needs them writable</span></div><div class="line" id="212525"><span class="nick" style="color:#6b8072"><a href="#212525" label="[21:25:25]">&lt;stikonas&gt;</a></span><span class="message">but in my latest version it's only used read only</span></div><div class="line" id="212528"><span class="nick" style="color:#6b8072"><a href="#212528" label="[21:25:28]">&lt;stikonas&gt;</a></span><span class="message">to read GUIs</span></div><div class="line" id="212533"><span class="nick" style="color:#6b8072"><a href="#212533" label="[21:25:33]">&lt;stikonas&gt;</a></span><span class="message">rootdir, fin, fout are moved into registers</span></div><div class="line" id="212616"><span class="nick" style="color:#6b8072"><a href="#212616" label="[21:26:16]">&lt;stikonas&gt;</a></span><span class="message">see <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/amd64/Development/hex0.M1#L330">https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/amd64/Development/hex0.M1#L330</a> </span></div><div class="line" id="212632"><span class="nick" style="color:#6b8072"><a href="#212632" label="[21:26:32]">&lt;stikonas&gt;</a></span><span class="message">so maybe for hex0 we don't need .data</span></div><div class="line" id="212708"><span class="nick" style="color:#80b1d3"><a href="#212708" label="[21:27:08]">&lt;oriansj&gt;</a></span><span class="message">well if we make .text writable, we will not need .data at all</span></div><div class="line" id="212716"><span class="nick" style="color:#6b8072"><a href="#212716" label="[21:27:16]">&lt;stikonas&gt;</a></span><span class="message">that's also true...</span></div><div class="line" id="212728"><span class="nick" style="color:#6b8072"><a href="#212728" label="[21:27:28]">&lt;stikonas&gt;</a></span><span class="message">but even if we can't, we can get rid of it at least in hex0</span></div><div class="line" id="212818"><span class="nick" style="color:#80b1d3"><a href="#212818" label="[21:28:18]">&lt;oriansj&gt;</a></span><span class="message">indeed</span></div><div class="line" id="214111"><span class="nick" style="color:#234e69"><a href="#214111" label="[21:41:11]">&lt;muurkha&gt;</a></span><span class="message">usually you can't make .text writable</span></div><div class="line" id="214125"><span class="nick" style="color:#234e69"><a href="#214125" label="[21:41:25]">&lt;muurkha&gt;</a></span><span class="message">I mean I assume youre talking about UEFI and not Linux</span></div><div class="line" id="214129"><span class="nick" style="color:#234e69"><a href="#214129" label="[21:41:29]">&lt;muurkha&gt;</a></span><span class="message">*you're</span></div><div class="line" id="214132"><span class="nick" style="color:#234e69"><a href="#214132" label="[21:41:32]">&lt;muurkha&gt;</a></span><span class="message">so I don't really know</span></div><div class="line" id="214228"><span class="nick" style="color:#80b1d3"><a href="#214228" label="[21:42:28]">&lt;oriansj&gt;</a></span><span class="message">you are not supposed to as it enables polymorphic code and a boatload of security issues</span></div><div class="line" id="214317"><span class="nick" style="color:#80b1d3"><a href="#214317" label="[21:43:17]">&lt;oriansj&gt;</a></span><span class="message">but if the executable format has read, write and execute bits you can always force it into bad idea mode</span></div><div class="line" id="215036"><span class="nick" style="color:#234e69"><a href="#215036" label="[21:50:36]">&lt;muurkha&gt;</a></span><span class="message">I guess I haven't actually tried this but I would sort of expect Linux to override your bits in that case</span></div><div class="line" id="215137"><span class="nick" style="color:#234e69"><a href="#215137" label="[21:51:37]">&lt;muurkha&gt;</a></span><span class="message">Linux doesn't strictly enforce W^X in general.  GCC nested functions building their trampolines on an executable stack still work</span></div><div class="line" id="215146"><span class="nick" style="color:#234e69"><a href="#215146" label="[21:51:46]">&lt;muurkha&gt;</a></span><span class="message">by default, anyway</span></div><div class="line" id="215221"><span class="nick" style="color:#234e69"><a href="#215221" label="[21:52:21]">&lt;muurkha&gt;</a></span><span class="message">I spent some of last weekend disassembling the trampoline building code GCC emits for RISC-V</span></div><div class="line" id="215356"><span class="nick" style="color:#234e69"><a href="#215356" label="[21:53:56]">&lt;muurkha&gt;</a></span><span class="message">JIT compilers like V8 and HotSpot are really common these days, and they can still work with W^X, they just have to issue a system call to set a page executable after they emit code and before trying to run it</span></div><div class="line" id="215428"><span class="nick" style="color:#234e69"><a href="#215428" label="[21:54:28]">&lt;muurkha&gt;</a></span><span class="message">which they have to do anyway on RISC-V in order to ensure that all the CPU cores that can see the memory have flushed it from their instruction caches</span></div><div class="line" id="215550"><span class="nick" style="color:#234e69"><a href="#215550" label="[21:55:50]">&lt;muurkha&gt;</a></span><span class="message">(this is a change in recent versions of RISC-V; previously you just had to run a FENCE.I instruction but apparently that wasn't implemented to flush instruction caches on other cores)</span></div><div class="line" id="221113"><span class="nick" style="color:#80b1d3"><a href="#221113" label="[22:11:13]">&lt;oriansj&gt;</a></span><span class="message">muurkha: if you have run stage0-posix you have tried it</span></div><div class="line" id="221137"><span class="nick" style="color:#80b1d3"><a href="#221137" label="[22:11:37]">&lt;oriansj&gt;</a></span><span class="message">we only have a single segment where we have code and data</span></div><div class="line" id="221154"><span class="nick" style="color:#80b1d3"><a href="#221154" label="[22:11:54]">&lt;oriansj&gt;</a></span><span class="message">we read, write and execute in it too</span></div><div class="line" id="221320"><span class="nick" style="color:#234e69"><a href="#221320" label="[22:13:20]">&lt;muurkha&gt;</a></span><span class="message">oh, I hadn't noticed</span></div><div class="line" id="221326"><span class="nick" style="color:#80b1d3"><a href="#221326" label="[22:13:26]">&lt;oriansj&gt;</a></span><span class="message">it is why GRSEC kernels can't run stage0-posix binaries</span></div><div class="line" id="221346"><span class="nick" style="color:#234e69"><a href="#221346" label="[22:13:46]">&lt;muurkha&gt;</a></span><span class="message">right</span></div><div class="line" id="221700"><span class="nick" style="color:#80b1d3"><a href="#221700" label="[22:17:00]">&lt;oriansj&gt;</a></span><span class="message">basically instant segfault the second we write anything with a :label</span></div><div class="line" id="221840"><span class="nick" style="color:#80b1d3"><a href="#221840" label="[22:18:40]">&lt;oriansj&gt;</a></span><span class="message">with some cleverness we could leverage malloc and a computed label mechanism to work around that but as of right now there is no way in hex2 to break an input file into separate memory segments</span></div><div class="line" id="222931"><span class="nick" style="color:#6b8072"><a href="#222931" label="[22:29:31]">&lt;stikonas&gt;</a></span><span class="message">oriansj: fixed that label position and also pushed hex0.hex2 <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/amd64/Development/hex0.hex2">https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/amd64/Development/hex0.hex2</a> </span></div><div class="line" id="223058"><span class="nick" style="color:#6b8072"><a href="#223058" label="[22:30:58]">&lt;stikonas&gt;</a></span><span class="message">410 bytes right now</span></div><div class="line" id="223114"><span class="nick" style="color:#6b8072"><a href="#223114" label="[22:31:14]">&lt;stikonas&gt;</a></span><span class="message">but obviously this will grow once we add headers</span></div><div class="line" id="223137"><span class="nick" style="color:#6b8072"><a href="#223137" label="[22:31:37]">&lt;stikonas&gt;</a></span><span class="message">quite a bit bigger than in POSIX but not too bad...</span></div><div class="line" id="223154"><span class="nick" style="color:#6b8072"><a href="#223154" label="[22:31:54]">&lt;stikonas&gt;</a></span><span class="message">hopefully will be under 1 KiB in total with headers</span></div><div class="line" id="223815"><span class="nick" style="color:#80b1d3"><a href="#223815" label="[22:38:15]">&lt;oriansj&gt;</a></span><span class="message">well I found a mystery</span></div><div class="line" id="224022"><span class="nick" style="color:#80b1d3"><a href="#224022" label="[22:40:22]">&lt;oriansj&gt;</a></span><span class="message">took the working hex0.hex0</span></div><div class="line" id="224059"><span class="nick" style="color:#80b1d3"><a href="#224059" label="[22:40:59]">&lt;oriansj&gt;</a></span><span class="message">zero'd out the hex0 code and changed the first few bytes to setting rax to 42 and returning</span></div><div class="line" id="224110"><span class="nick" style="color:#80b1d3"><a href="#224110" label="[22:41:10]">&lt;oriansj&gt;</a></span><span class="message">it just hangs now</span></div><div class="line" id="224139"><span class="nick" style="color:#80b1d3"><a href="#224139" label="[22:41:39]">&lt;oriansj&gt;</a></span><span class="message">the .text block is still the exact same size and in the same part of the file</span></div><div class="line" id="224338"><span class="nick" style="color:#80b1d3"><a href="#224338" label="[22:43:38]">&lt;oriansj&gt;</a></span><span class="message">if you don't believe me: here is the hex0.hex0 that works <a rel="nofollow" href="https://paste.debian.net/1248165/">https://paste.debian.net/1248165/</a>  and the return 42 that doesn't <a rel="nofollow" href="https://paste.debian.net/1248166/">https://paste.debian.net/1248166/</a> </span></div><div class="line" id="224351"><span class="nick" style="color:#80b1d3"><a href="#224351" label="[22:43:51]">&lt;oriansj&gt;</a></span><span class="message">do a diff and you'll see is just a bunch of zeroing</span></div><div class="line" id="224838"><span class="nick" style="color:#6b8072"><a href="#224838" label="[22:48:38]">&lt;stikonas&gt;</a></span><span class="message">yeah, I'm doing diff...</span></div><div class="line" id="224840"><span class="nick" style="color:#6b8072"><a href="#224840" label="[22:48:40]">&lt;stikonas&gt;</a></span><span class="message">strange</span></div><div class="line" id="224855"><span class="nick" style="color:#6b8072"><a href="#224855" label="[22:48:55]">&lt;stikonas&gt;</a></span><span class="message">oh, that's probably</span></div><div class="line" id="224901"><span class="nick" style="color:#6b8072"><a href="#224901" label="[22:49:01]">&lt;stikonas&gt;</a></span><span class="message">because file size is different?</span></div><div class="line" id="224905"><span class="nick" style="color:#80b1d3"><a href="#224905" label="[22:49:05]">&lt;oriansj&gt;</a></span><span class="message">nope</span></div><div class="line" id="224916"><span class="nick" style="color:#6b8072"><a href="#224916" label="[22:49:16]">&lt;stikonas&gt;</a></span><span class="message">hmm...</span></div><div class="line" id="224929"><span class="nick" style="color:#80b1d3"><a href="#224929" label="[22:49:29]">&lt;oriansj&gt;</a></span><span class="message">wc -c will show the exact same number of bytes if you build them with hex0/1/2</span></div><div class="line" id="224937"><span class="nick" style="color:#6b8072"><a href="#224937" label="[22:49:37]">&lt;stikonas&gt;</a></span><span class="message">ok...</span></div><div class="line" id="225012"><span class="nick" style="color:#6b8072"><a href="#225012" label="[22:50:12]">&lt;stikonas&gt;</a></span><span class="message">hmm, hanging is often code jumping to somewhere unexpected... but I don't see yet why it happens here</span></div><div class="line" id="225015"><span class="nick" style="color:#80b1d3"><a href="#225015" label="[22:50:15]">&lt;oriansj&gt;</a></span><span class="message">and we know mov rax, 42; ret works in assembly</span></div><div class="line" id="225032"><span class="nick" style="color:#80b1d3"><a href="#225032" label="[22:50:32]">&lt;oriansj&gt;</a></span><span class="message">right?</span></div><div class="line" id="225210"><span class="nick" style="color:#6b8072"><a href="#225210" label="[22:52:10]">&lt;stikonas&gt;</a></span><span class="message">yes, ret should work as long as you have deallocated all previously allocated stack</span></div><div class="line" id="225410"><span class="nick" style="color:#80b1d3"><a href="#225410" label="[22:54:10]">&lt;oriansj&gt;</a></span><span class="message">and we just set RAX, so nothing was allocated</span></div><div class="line" id="225844"><span class="nick" style="color:#6b8072"><a href="#225844" label="[22:58:44]">&lt;stikonas&gt;</a></span><span class="message">hmm, yes, it is hanging, I can reproduce</span></div><div class="line" id="230314"><span class="nick" style="color:#80b1d3"><a href="#230314" label="[23:03:14]">&lt;oriansj&gt;</a></span><span class="message">and I built <a rel="nofollow" href="https://paste.debian.net/1248170/">https://paste.debian.net/1248170/</a>  to prove that the code should work</span></div><div class="line" id="230635"><span class="nick" style="color:#80b1d3"><a href="#230635" label="[23:06:35]">&lt;oriansj&gt;</a></span><span class="message">although looking at that build there is a boatload of int 3 after the return</span></div><div class="line" id="230803"><span class="nick" style="color:#80b1d3"><a href="#230803" label="[23:08:03]">&lt;oriansj&gt;</a></span><span class="message">which makes even less sense</span></div><div class="line" id="230950"><span class="nick" style="color:#6b8072"><a href="#230950" label="[23:09:50]">&lt;stikonas&gt;</a></span><span class="message">hmm, I can make it stuck by zeroing only a few bytes</span></div><div class="line" id="231047"><span class="nick" style="color:#6b8072"><a href="#231047" label="[23:10:47]">&lt;stikonas&gt;</a></span><span class="message">oriansj: this already gets stuck <a rel="nofollow" href="https://paste.debian.net/1248173/">https://paste.debian.net/1248173/</a> </span></div><div class="line" id="231221"><span class="nick" style="color:#6c3d55"><a href="#231221" label="[23:12:21]">&lt;mihi&gt;</a></span><span class="message">stikonas, oriansj: I bet your problem is the blob starting at line 626 in your pastes</span></div><div class="line" id="231303"><span class="nick" style="color:#6b8072"><a href="#231303" label="[23:13:03]">&lt;stikonas&gt;</a></span><span class="message">mihi: I think even zeroing one byte after C3 makes it stuck</span></div><div class="line" id="231403"><span class="nick" style="color:#6b8072"><a href="#231403" label="[23:14:03]">&lt;stikonas&gt;</a></span><span class="message">this is enough to make it stuck <a rel="nofollow" href="https://paste.debian.net/1248174/">https://paste.debian.net/1248174/</a> </span></div><div class="line" id="231527"><span class="nick" style="color:#6c3d55"><a href="#231527" label="[23:15:27]">&lt;mihi&gt;</a></span><span class="message">stikonas, you did not get my comment.</span></div><div class="line" id="231530"><span class="nick" style="color:#6c3d55"><a href="#231530" label="[23:15:30]">&lt;mihi&gt;</a></span><span class="message">:D</span></div><div class="line" id="231638"><span class="nick" style="color:#80b1d3"><a href="#231638" label="[23:16:38]">&lt;oriansj&gt;</a></span><span class="message">the '3C 00 00 00' ?</span></div><div class="line" id="231704"><span class="nick" style="color:#80b1d3"><a href="#231704" label="[23:17:04]">&lt;oriansj&gt;</a></span><span class="message">I don't even know what that blob is yet</span></div><div class="line" id="231751"><span class="nick" style="color:#6c3d55"><a href="#231751" label="[23:17:51]">&lt;mihi&gt;</a></span><span class="message">oriansj, I would suggest that you find out. Then it would make a lot more sense why changing some random bytes in the .text section will magically break loading the binary.</span></div><div class="line" id="231802"><span class="nick" style="color:#6c3d55"><a href="#231802" label="[23:18:02]">&lt;mihi&gt;</a></span><span class="message">hint: try to find the name of the section it is lying in.</span></div><div class="line" id="231855"><span class="nick" style="color:#6c3d55"><a href="#231855" label="[23:18:55]">&lt;mihi&gt;</a></span><span class="message">(of course I could just point you to the relevant part of the PE file specification, but I am having the impression it to be more fun for you to find out yourself)</span></div><div class="line" id="231916"><span class="nick" style="color:#6d2462"><a href="#231916" label="[23:19:16]">&lt;stikonas[m]&gt;</a></span><span class="message">Checksum?</span></div><div class="line" id="231926"><span class="nick" style="color:#80b1d3"><a href="#231926" label="[23:19:26]">&lt;oriansj&gt;</a></span><span class="message">or realloc</span></div><div class="line" id="231931"><span class="nick" style="color:#6c3d55"><a href="#231931" label="[23:19:31]">&lt;mihi&gt;</a></span><span class="message">.reloc</span></div><div class="line" id="231934"><span class="nick" style="color:#6c3d55"><a href="#231934" label="[23:19:34]">&lt;mihi&gt;</a></span><span class="message">(ations)</span></div><div class="line" id="231941"><span class="nick" style="color:#80b1d3"><a href="#231941" label="[23:19:41]">&lt;oriansj&gt;</a></span><span class="message">thank you mihi for that correction</span></div><div class="line" id="231957"><span class="nick" style="color:#6c3d55"><a href="#231957" label="[23:19:57]">&lt;mihi&gt;</a></span><span class="message"> <a rel="nofollow" href="https://0xrick.github.io/win-internals/pe7/">https://0xrick.github.io/win-internals/pe7/</a> </span></div><div class="line" id="232110"><span class="nick" style="color:#80b1d3"><a href="#232110" label="[23:21:10]">&lt;oriansj&gt;</a></span><span class="message">that would do it</span></div><div class="line" id="232125"><span class="nick" style="color:#80b1d3"><a href="#232125" label="[23:21:25]">&lt;oriansj&gt;</a></span><span class="message">as it would be altering our instructions thinking it was data</span></div><div class="line" id="232135"><span class="nick" style="color:#6c3d55"><a href="#232135" label="[23:21:35]">&lt;mihi&gt;</a></span><span class="message">so I suggest you find out how an empty relocations table look like, then your eax example should work.</span></div><div class="line" id="232209"><span class="nick" style="color:#80b1d3"><a href="#232209" label="[23:22:09]">&lt;oriansj&gt;</a></span><span class="message">good thing my sanity.S program should have no .reloc at all</span></div><div class="line" id="232233"><span class="nick" style="color:#6c3d55"><a href="#232233" label="[23:22:33]">&lt;mihi&gt;</a></span><span class="message">about the R^X: EFI's AllocatePages has options to allocate code, or allocate data, but no option to have both. And reallocating the page will break when currently executing :)</span></div><div class="line" id="232313"><span class="nick" style="color:#6c3d55"><a href="#232313" label="[23:23:13]">&lt;mihi&gt;</a></span><span class="message">probably there are undocumented lower-level functions, but I would not expect them to be available on every implementation.</span></div><div class="line" id="232345"><span class="nick" style="color:#234e69"><a href="#232345" label="[23:23:45]">&lt;muurkha&gt;</a></span><span class="message">interesting, thanks!  you mean W^X, right?</span></div><div class="line" id="232352"><span class="nick" style="color:#6c3d55"><a href="#232352" label="[23:23:52]">&lt;mihi&gt;</a></span><span class="message">yep, sorry :)</span></div><div class="line" id="232430"><span class="nick" style="color:#234e69"><a href="#232430" label="[23:24:30]">&lt;muurkha&gt;</a></span><span class="message">stupid, sexy UEFI</span></div><div class="line" id="232459"><span class="nick" style="color:#80b1d3"><a href="#232459" label="[23:24:59]">&lt;oriansj&gt;</a></span><span class="message">lol</span></div><div class="line" id="232815"><span class="nick" style="color:#6c3d55"><a href="#232815" label="[23:28:15]">&lt;mihi&gt;</a></span><span class="message">Also, I believe the DOS stub size may be any nonzero amount of 8 bytes (so 8 bytes minimum), but when you shrink it, you have to change many of the section offsets.</span></div><br /></div></body></html>