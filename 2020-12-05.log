<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-12-05.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="004841"><span class="nick" style="color:#389600"><a href="#004841" label="[00:48:41]">&lt;yt&gt;</a></span><span class="message">OriansJ: changes to the hex2/M1 versions of hex0 are up; they all translate to byte-identical versions of hex0 :-)</span></div><div class="line" id="004907"><span class="nick" style="color:#389600"><a href="#004907" label="[00:49:07]">&lt;yt&gt;</a></span><span class="message">I've added a little makefile to do that checking too, so it's easier to test that</span></div><div class="line" id="024459"><span class="nick" style="color:#2e2a4a"><a href="#024459" label="[02:44:59]">&lt;OriansJ&gt;</a></span><span class="message">QuickBootstrapQu: the answer to your question is nothing; as guile (running shepard) is the init and (running gash) is the shell and (running gash-utils) is the core utils needed and (running guix) as the package manager able to bootstrap GCC from source (running MesCC) as the compiler as well.</span></div><div class="line" id="024633"><span class="nick" style="color:#2e2a4a"><a href="#024633" label="[02:46:33]">&lt;OriansJ&gt;</a></span><span class="message">So only the bootstrap binary tarball is required (assuming guix fixed the gnutls-3.6.12 regression already); which we are in the process of significantly reducing further.</span></div><div class="line" id="024930"><span class="nick" style="color:#2e2a4a"><a href="#024930" label="[02:49:30]">&lt;OriansJ&gt;</a></span><span class="message">As once the guile compatible is bootstrapped from M2-Planet. One would only require to have a 737byte shell (kaem) and a 257byte hex assembler (hex0) and as kaem can run as an init and automatically do all of the build steps from source. Any minimal POSIX compatible kernel (with a handful of syscalls) will also work.</span></div><div class="line" id="025019"><span class="nick" style="color:#2e2a4a"><a href="#025019" label="[02:50:19]">&lt;OriansJ&gt;</a></span><span class="message">That is why the stage0 pieces are being done in a fashion which would allow bare hardware to be used for all of the bootstrap steps (until a proper kernel could be built from source of course)</span></div><div class="line" id="025300"><span class="nick" style="color:#2e2a4a"><a href="#025300" label="[02:53:00]">&lt;OriansJ&gt;</a></span><span class="message">yt: quick question you changed the base address form 0x400000 to 0x600000? I thought 0x400000 was the AArch64 standard address??</span></div><div class="line" id="025712"><span class="nick" style="color:#2e2a4a"><a href="#025712" label="[02:57:12]">&lt;OriansJ&gt;</a></span><span class="message">Darius: don't worry I never take anything here personally. Although I apologize if I seemed agressive. I was entirely curious on what exactly your preference was and the reasoning behind it. As conflicting perspectives are essential to a greater understanding of possible solution spaces.</span></div><div class="line" id="030152"><span class="nick" style="color:#2e2a4a"><a href="#030152" label="[03:01:52]">&lt;OriansJ&gt;</a></span><span class="message">yt: reading through your AArch64/Development/makefile I guess you didn't realize that both M1 and hex2 support arbitrary number of input files. Top to bottom it is left to right. eg hex2 -f elf_header.hex2 -f hex2_program.hex2 -f anything_else_youwant</span></div><div class="line" id="032028"><span class="nick" style="color:#2e2a4a"><a href="#032028" label="[03:20:28]">&lt;OriansJ&gt;</a></span><span class="message">yt: the 3 versions do not match each other. I updated your makefile to prove it: <a rel="nofollow" href="https://paste.debian.net/1175679/">https://paste.debian.net/1175679/</a> </span></div><div class="line" id="032250"><span class="nick" style="color:#2e2a4a"><a href="#032250" label="[03:22:50]">&lt;OriansJ&gt;</a></span><span class="message">But your M1 code looks about correct and once you get that harmonized; I'll merge it</span></div><div class="line" id="033243"><span class="nick" style="color:#2e2a4a"><a href="#033243" label="[03:32:43]">&lt;OriansJ&gt;</a></span><span class="message">yt: your M2-Planet patch has been merged.</span></div><div class="line" id="033952"><span class="nick" style="color:#6b8072"><a href="#033952" label="[03:39:52]">&lt;fossy&gt;</a></span><span class="message">OriansJ: does M1 support 16 bit x86 mode (i.e. real mode)</span></div><div class="line" id="034003"><span class="nick" style="color:#6b8072"><a href="#034003" label="[03:40:03]">&lt;fossy&gt;</a></span><span class="message">i don't think it does but checking</span></div><div class="line" id="034140"><span class="nick" style="color:#2e2a4a"><a href="#034140" label="[03:41:40]">&lt;OriansJ&gt;</a></span><span class="message">fossy: M1 supports 16bit x86 mode</span></div><div class="line" id="034159"><span class="nick" style="color:#2e2a4a"><a href="#034159" label="[03:41:59]">&lt;OriansJ&gt;</a></span><span class="message">it also supports the arbitrary mixing of modes too</span></div><div class="line" id="034606"><span class="nick" style="color:#2e2a4a"><a href="#034606" label="[03:46:06]">&lt;OriansJ&gt;</a></span><span class="message">if an instruction set or mode can be expressed in binary, octal or hex; M1 and hex2 support it. (Or are a minimal patch for new architectures)</span></div><div class="line" id="034843"><span class="nick" style="color:#2e2a4a"><a href="#034843" label="[03:48:43]">&lt;OriansJ&gt;</a></span><span class="message">The only thing that could trip M1 or hex2 is if your immediates or offsets required a weird encoding that needed to be added to M1 or hex2. (eg offset 0x4 needs be to b encoded as 0x696969^(0x4 &lt;&lt; 3) or something odd like that)</span></div><div class="line" id="034924"><span class="nick" style="color:#2e2a4a"><a href="#034924" label="[03:49:24]">&lt;OriansJ&gt;</a></span><span class="message">The worst cases we have seen are Armv7l and AArch64 but they were 5 lines of support needed total</span></div><div class="line" id="035410"><span class="nick" style="color:#80b1d3"><a href="#035410" label="[03:54:10]">&lt;xentrac&gt;</a></span><span class="message">wow, awesome</span></div><div class="line" id="035413"><span class="nick" style="color:#80b1d3"><a href="#035413" label="[03:54:13]">&lt;xentrac&gt;</a></span><span class="message">:)</span></div><div class="line" id="035713"><span class="nick" style="color:#6b8072"><a href="#035713" label="[03:57:13]">&lt;fossy&gt;</a></span><span class="message">OriansJ: oooh, ok</span></div><div class="line" id="035740"><span class="nick" style="color:#6b8072"><a href="#035740" label="[03:57:40]">&lt;fossy&gt;</a></span><span class="message">lets see if i can get this in M1 then</span></div><div class="line" id="040302"><span class="nick" style="color:#6b8072"><a href="#040302" label="[04:03:02]">&lt;fossy&gt;</a></span><span class="message">OriansJ: sorry, i think i am going to have some dumb questions, what does DEFINE XXX SOMEHEX do?</span></div><div class="line" id="040309"><span class="nick" style="color:#6b8072"><a href="#040309" label="[04:03:09]">&lt;fossy&gt;</a></span><span class="message">is the SOMEHEX a hex2 instruction?</span></div><div class="line" id="040646"><span class="nick" style="color:#2e2a4a"><a href="#040646" label="[04:06:46]">&lt;OriansJ&gt;</a></span><span class="message">fossy: DEFINE statements are line macros</span></div><div class="line" id="040651"><span class="nick" style="color:#6b8072"><a href="#040651" label="[04:06:51]">&lt;fossy&gt;</a></span><span class="message">ok</span></div><div class="line" id="040719"><span class="nick" style="color:#2e2a4a"><a href="#040719" label="[04:07:19]">&lt;OriansJ&gt;</a></span><span class="message">so when you type DEFINE foo 12345; all instances of foo will be replaced by 12345</span></div><div class="line" id="040814"><span class="nick" style="color:#2e2a4a"><a href="#040814" label="[04:08:14]">&lt;OriansJ&gt;</a></span><span class="message">So if add was 123; you write DEFINE add 123</span></div><div class="line" id="040902"><span class="nick" style="color:#2e2a4a"><a href="#040902" label="[04:09:02]">&lt;OriansJ&gt;</a></span><span class="message">if register 15 is F; you write DEFINE R15 F</span></div><div class="line" id="040934"><span class="nick" style="color:#2e2a4a"><a href="#040934" label="[04:09:34]">&lt;OriansJ&gt;</a></span><span class="message">so that when you write add R14 R15; it'll convert into 123 E F</span></div><div class="line" id="040945"><span class="nick" style="color:#2e2a4a"><a href="#040945" label="[04:09:45]">&lt;OriansJ&gt;</a></span><span class="message">does that make sense?</span></div><div class="line" id="041121"><span class="nick" style="color:#2e2a4a"><a href="#041121" label="[04:11:21]">&lt;OriansJ&gt;</a></span><span class="message">there is an example set of instructions for x86 in mescc-tools-seed in the file x86/x86_defs.M1</span></div><div class="line" id="041123"><span class="nick" style="color:#6b8072"><a href="#041123" label="[04:11:23]">&lt;fossy&gt;</a></span><span class="message">yes, i think so</span></div><div class="line" id="041143"><span class="nick" style="color:#6b8072"><a href="#041143" label="[04:11:43]">&lt;fossy&gt;</a></span><span class="message">thanks</span></div><div class="line" id="041202"><span class="nick" style="color:#2e2a4a"><a href="#041202" label="[04:12:02]">&lt;OriansJ&gt;</a></span><span class="message">(it couldn have been much nicer but I kinda rushed it)</span></div><div class="line" id="041348"><span class="nick" style="color:#2e2a4a"><a href="#041348" label="[04:13:48]">&lt;OriansJ&gt;</a></span><span class="message">now a more common thing is like: DEFINE LOAD_IMMEDIATE_ecx B9</span></div><div class="line" id="041433"><span class="nick" style="color:#2e2a4a"><a href="#041433" label="[04:14:33]">&lt;OriansJ&gt;</a></span><span class="message">where you then want to do !42 or @42 or %42 depending on the size of immediate required by the instruction</span></div><div class="line" id="041459"><span class="nick" style="color:#2e2a4a"><a href="#041459" label="[04:14:59]">&lt;OriansJ&gt;</a></span><span class="message">(or $label or &amp;label if what you really want is an address)</span></div><div class="line" id="041646"><span class="nick" style="color:#2e2a4a"><a href="#041646" label="[04:16:46]">&lt;OriansJ&gt;</a></span><span class="message">in which case you would write LOAD_IMMEDIATE_ecx %42 and it would convert into B9 2A000000</span></div><div class="line" id="041719"><span class="nick" style="color:#2e2a4a"><a href="#041719" label="[04:17:19]">&lt;OriansJ&gt;</a></span><span class="message">which will exactly match the objdump of mov ecx, 42</span></div><div class="line" id="041735"><span class="nick" style="color:#2e2a4a"><a href="#041735" label="[04:17:35]">&lt;OriansJ&gt;</a></span><span class="message">The names are anything you want them to be</span></div><div class="line" id="041819"><span class="nick" style="color:#2e2a4a"><a href="#041819" label="[04:18:19]">&lt;OriansJ&gt;</a></span><span class="message">but clarity and explicitness in naming usually will make life easier for you</span></div><div class="line" id="042002"><span class="nick" style="color:#6d2462"><a href="#042002" label="[04:20:02]">&lt;pder&gt;</a></span><span class="message">OriansJ: I wanted to try out your latest changes on blynn-compiler.  Are you thinking that rts.c might not be necessary?</span></div><div class="line" id="042028"><span class="nick" style="color:#6b8072"><a href="#042028" label="[04:20:28]">&lt;fossy&gt;</a></span><span class="message">OriansJ: ok, what's the ! or @ or %?</span></div><div class="line" id="042522"><span class="nick" style="color:#6b8072"><a href="#042522" label="[04:25:22]">&lt;fossy&gt;</a></span><span class="message">oh is that the sizes</span></div><div class="line" id="054523"><span class="nick" style="color:#6b8072"><a href="#054523" label="[05:45:23]">&lt;fossy&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/void-linux/void-packages/pull/26953">https://github.com/void-linux/void-packages/pull/26953</a> </span></div><div class="line" id="054531"><span class="nick" style="color:#6b8072"><a href="#054531" label="[05:45:31]">&lt;fossy&gt;</a></span><span class="message">um, any ideas for convincing</span></div><div class="line" id="055308"><span class="nick" style="color:#234e69"><a href="#055308" label="[05:53:08]">&lt;ericonr&gt;</a></span><span class="message">fossy: I'm not sure you'll manage it... the argument I can think of is that binaries can vanish, but it isn't that great either, since the source can vanish just as well :/</span></div><div class="line" id="061011"><span class="nick" style="color:#6b8072"><a href="#061011" label="[06:10:11]">&lt;fossy&gt;</a></span><span class="message">ericonr: i doubt it as well, and i kinda understand why they are saying no</span></div><div class="line" id="105828"><span class="nick">***</span><span class="message notice">clever_ is now known as clever</span></div><div class="line" id="112206"><span class="nick">***</span><span class="message notice">clever_ is now known as clever</span></div><div class="line" id="120335"><span class="nick" style="color:#2e2a4a"><a href="#120335" label="[12:03:35]">&lt;OriansJ&gt;</a></span><span class="message">pder: I am thinking the compiling and rts.c might not even be required at all. Just unpacking it however is going to take a bit of work but should be managable. As it looks essentially larger and larger ROMs run on the virtual machine. with rts.c just being slightly different than vm.c</span></div><div class="line" id="120636"><span class="nick" style="color:#2e2a4a"><a href="#120636" label="[12:06:36]">&lt;OriansJ&gt;</a></span><span class="message">fossy: you can't convince them. They don't appear actually interested in bootstrappabilty of their binaries. As that would require them to worry about a potential future where someone might compromise their build machine.</span></div><div class="line" id="120852"><span class="nick" style="color:#2e2a4a"><a href="#120852" label="[12:08:52]">&lt;OriansJ&gt;</a></span><span class="message">even guix has a hard time unwinding a binary history because source tarballs can stright up disappear or change (resulting in different checksums) on third party suppliers. But I do hope guix and nix come together to solve that</span></div><div class="line" id="121831"><span class="nick" style="color:#6b8072"><a href="#121831" label="[12:18:31]">&lt;fossy&gt;</a></span><span class="message">OriansJ: yeah, i think you're right</span></div><div class="line" id="121845"><span class="nick" style="color:#6b8072"><a href="#121845" label="[12:18:45]">&lt;fossy&gt;</a></span><span class="message">OriansJ: do you think we can run everything in vm.c</span></div><div class="line" id="125830"><span class="nick" style="color:#6c3d55"><a href="#125830" label="[12:58:30]">&lt;deesix&gt;</a></span><span class="message">OriansJ: Do you think that the RSHIFT_X0_X1_X0 change is the way to go? I'd think we want both kinds of shift defined and use arithmetic_recursion() to select between them at additive_expr_stub(), do we?</span></div><div class="line" id="125905"><span class="nick" style="color:#6c3d55"><a href="#125905" label="[12:59:05]">&lt;deesix&gt;</a></span><span class="message">*don't we?</span></div><div class="line" id="130537"><span class="nick" style="color:#2e2a4a"><a href="#130537" label="[13:05:37]">&lt;OriansJ&gt;</a></span><span class="message">deesix: honestly you know more about aarch64 than I do and it appears that yt believes it would fix hex2's behavior (when built by M2-Planet). But yes the generally correct behavior in C is to have both.</span></div><div class="line" id="130824"><span class="nick" style="color:#2e2a4a"><a href="#130824" label="[13:08:24]">&lt;OriansJ&gt;</a></span><span class="message">So the question is hex2 built by M2-Planet needing that change?</span></div><div class="line" id="130956"><span class="nick" style="color:#2e2a4a"><a href="#130956" label="[13:09:56]">&lt;OriansJ&gt;</a></span><span class="message">as we do want yt's mescc-tools-seed work to get matching behavior in hex2, M1, blood-elf and M2-Planet on AArch64 as all of the other ports.</span></div><div class="line" id="131150"><span class="nick" style="color:#2e2a4a"><a href="#131150" label="[13:11:50]">&lt;OriansJ&gt;</a></span><span class="message">fossy: not everything but probably all of the stages that use rts.c (with possibly more extensions to vm.c still have to unpack all of that)</span></div><div class="line" id="131225"><span class="nick" style="color:#d9d9d9"><a href="#131225" label="[13:12:25]">&lt;siraben&gt;</a></span><span class="message">OriansJ: wrt. to the binary blobs in the beginning, I will be able to get rid of them later</span></div><div class="line" id="131248"><span class="nick" style="color:#d9d9d9"><a href="#131248" label="[13:12:48]">&lt;siraben&gt;</a></span><span class="message">of blynn-compiler, that is</span></div><div class="line" id="131313"><span class="nick" style="color:#2e2a4a"><a href="#131313" label="[13:13:13]">&lt;OriansJ&gt;</a></span><span class="message">but first I have to figure out how to unpack the generation of raw into discrete smaller steps; to make vm.c much more similiar to rts.c and thus allow a smoother transistion.</span></div><div class="line" id="131317"><span class="nick" style="color:#d9d9d9"><a href="#131317" label="[13:13:17]">&lt;siraben&gt;</a></span><span class="message">rts.c is code that is mean to be appended to the Haskell-generated C code to make a standalone file right?</span></div><div class="line" id="131358"><span class="nick" style="color:#2e2a4a"><a href="#131358" label="[13:13:58]">&lt;OriansJ&gt;</a></span><span class="message">siraben: prefixed to the Haskell generated output yes but most of it appears to be the same contents as raw</span></div><div class="line" id="131453"><span class="nick" style="color:#2e2a4a"><a href="#131453" label="[13:14:53]">&lt;OriansJ&gt;</a></span><span class="message">virtually all of it is in the prog blob</span></div><div class="line" id="131528"><span class="nick" style="color:#d9d9d9"><a href="#131528" label="[13:15:28]">&lt;siraben&gt;</a></span><span class="message">prog is the IOCCC entry I would not recommend using it</span></div><div class="line" id="131543"><span class="nick" style="color:#d9d9d9"><a href="#131543" label="[13:15:43]">&lt;siraben&gt;</a></span><span class="message">anything related to IOCCC should be removed no problem</span></div><div class="line" id="131552"><span class="nick" style="color:#d9d9d9"><a href="#131552" label="[13:15:52]">&lt;siraben&gt;</a></span><span class="message">it's deliberately obfuscated</span></div><div class="line" id="131659"><span class="nick" style="color:#2e2a4a"><a href="#131659" label="[13:16:59]">&lt;OriansJ&gt;</a></span><span class="message">siraben: I pulled all of the IOCCC out of vm.c</span></div><div class="line" id="131756"><span class="nick" style="color:#2e2a4a"><a href="#131756" label="[13:17:56]">&lt;OriansJ&gt;</a></span><span class="message">and there is no IOCCC in rts.c; only a prog blob which appears to match the contents of raw (in style but not content)</span></div><div class="line" id="131821"><span class="nick" style="color:#2e2a4a"><a href="#131821" label="[13:18:21]">&lt;OriansJ&gt;</a></span><span class="message">So I am guessing it just vm byte-code</span></div><div class="line" id="131903"><span class="nick" style="color:#2e2a4a"><a href="#131903" label="[13:19:03]">&lt;OriansJ&gt;</a></span><span class="message">which is why getting rid of rts.c is more reasonable</span></div><div class="line" id="131941"><span class="nick" style="color:#d9d9d9"><a href="#131941" label="[13:19:41]">&lt;siraben&gt;</a></span><span class="message">Yeah prog.c is unreadable to me</span></div><div class="line" id="131949"><span class="nick" style="color:#2e2a4a"><a href="#131949" label="[13:19:49]">&lt;OriansJ&gt;</a></span><span class="message">vm.c just becomes an interpreter of the byte-code that expands in complexity with each step.</span></div><div class="line" id="131950"><span class="nick" style="color:#d9d9d9"><a href="#131950" label="[13:19:50]">&lt;siraben&gt;</a></span><span class="message">I believe it's some weird base encoding too</span></div><div class="line" id="132004"><span class="nick" style="color:#d9d9d9"><a href="#132004" label="[13:20:04]">&lt;siraben&gt;</a></span><span class="message">Ah, so you want to keep it compiled all the time? That would be a good idea</span></div><div class="line" id="132104"><span class="nick" style="color:#2e2a4a"><a href="#132104" label="[13:21:04]">&lt;OriansJ&gt;</a></span><span class="message">siraben: we don't use prog.c</span></div><div class="line" id="132123"><span class="nick" style="color:#d9d9d9"><a href="#132123" label="[13:21:23]">&lt;siraben&gt;</a></span><span class="message">Right</span></div><div class="line" id="132246"><span class="nick" style="color:#d9d9d9"><a href="#132246" label="[13:22:46]">&lt;siraben&gt;</a></span><span class="message">Looks like all precisely.hs does is add bignums</span></div><div class="line" id="132420"><span class="nick" style="color:#6c3d55"><a href="#132420" label="[13:24:20]">&lt;deesix&gt;</a></span><span class="message">OriansJ, I didn't look at the hex2 problem, and I think the question is more about M2-Planet than AArch64.</span></div><div class="line" id="132726"><span class="nick" style="color:#6c3d55"><a href="#132726" label="[13:27:26]">&lt;deesix&gt;</a></span><span class="message">OriansJ, AFAIU the commit is trading a shift with the other, not supporting both.</span></div><div class="line" id="140550"><span class="nick" style="color:#2e2a4a"><a href="#140550" label="[14:05:50]">&lt;OriansJ&gt;</a></span><span class="message">deesix: I agree with that assessment; but the question does hex2 not behave correctly on AArch64 without that change, determines if we revert it or keep it. As the goal is consistent behavior on ALL architectures. So that a program made by M2-Planet doesn't behave differently on x86 or AArch64.</span></div><div class="line" id="140649"><span class="nick" style="color:#2e2a4a"><a href="#140649" label="[14:06:49]">&lt;OriansJ&gt;</a></span><span class="message">if one build mes-m2 on AArch64 and runs a scheme program, the output should be identical on x86 running mes-m2 built by M2-Planet</span></div><div class="line" id="140733"><span class="nick" style="color:#2e2a4a"><a href="#140733" label="[14:07:33]">&lt;OriansJ&gt;</a></span><span class="message">if the hardware instruction is doing the wrong thing there; we need to work around it.</span></div><div class="line" id="140821"><span class="nick" style="color:#2e2a4a"><a href="#140821" label="[14:08:21]">&lt;OriansJ&gt;</a></span><span class="message">if the hardware instruction is doing the right thing; the question is about why the behavior change or if it was just a mistake that needs to be reverted.</span></div><div class="line" id="140833"><span class="nick" style="color:#6c3d55"><a href="#140833" label="[14:08:33]">&lt;deesix&gt;</a></span><span class="message">OriansJ, I don't think the hardware is doing anything wrong. Just M2-Planet not supporting both right shifts for AArch64.</span></div><div class="line" id="141337"><span class="nick" style="color:#6c3d55"><a href="#141337" label="[14:13:37]">&lt;deesix&gt;</a></span><span class="message">I'll talk with yt about it, as I can't test my idea right now (no setup at hand).</span></div><div class="line" id="141832"><span class="nick" style="color:#6c3d55"><a href="#141832" label="[14:18:32]">&lt;deesix&gt;</a></span><span class="message">OriansJ, about M1.scm of slow-utils... I'm pretty sure I have the lost file is you still want it.</span></div><div class="line" id="141858"><span class="nick" style="color:#d9d9d9"><a href="#141858" label="[14:18:58]">&lt;siraben&gt;</a></span><span class="message">OriansJ: M2-Planet not found, is the right command M2?</span></div><div class="line" id="141906"><span class="nick" style="color:#6c3d55"><a href="#141906" label="[14:19:06]">&lt;deesix&gt;</a></span><span class="message">s/is you/if you/</span></div><div class="line" id="142034"><span class="nick" style="color:#d9d9d9"><a href="#142034" label="[14:20:34]">&lt;siraben&gt;</a></span><span class="message">Ah I built mescc-tools, not mes-m2</span></div><div class="line" id="142221"><span class="nick" style="color:#2e2a4a"><a href="#142221" label="[14:22:21]">&lt;OriansJ&gt;</a></span><span class="message">deesix: sounds like a good idea and of course I'd love to get a copy of your M1.scm work ^_^</span></div><div class="line" id="142330"><span class="nick" style="color:#2e2a4a"><a href="#142330" label="[14:23:30]">&lt;OriansJ&gt;</a></span><span class="message">siraben: assuming you are trying go.sh; you need to build M2-Planet and install it into your path.</span></div><div class="line" id="142344"><span class="nick" style="color:#2e2a4a"><a href="#142344" label="[14:23:44]">&lt;OriansJ&gt;</a></span><span class="message">along with mescc-tools</span></div><div class="line" id="142401"><span class="nick" style="color:#d9d9d9"><a href="#142401" label="[14:24:01]">&lt;siraben&gt;</a></span><span class="message">Ok, I'm making Nix expressions for them now</span></div><div class="line" id="142429"><span class="nick" style="color:#2e2a4a"><a href="#142429" label="[14:24:29]">&lt;OriansJ&gt;</a></span><span class="message">you can of course get them from mescc-tools-seed as they are all generated there</span></div><div class="line" id="142514"><span class="nick" style="color:#d9d9d9"><a href="#142514" label="[14:25:14]">&lt;siraben&gt;</a></span><span class="message">Where's the M2-Planet command from?</span></div><div class="line" id="142519"><span class="nick" style="color:#2e2a4a"><a href="#142519" label="[14:25:19]">&lt;OriansJ&gt;</a></span><span class="message">and if you want I will accept Nix and guix build scripts into mescc-tools and M2-Planet (and mes-m2 as well)</span></div><div class="line" id="142537"><span class="nick" style="color:#d9d9d9"><a href="#142537" label="[14:25:37]">&lt;siraben&gt;</a></span><span class="message">That'd be great, yeah.</span></div><div class="line" id="142616"><span class="nick" style="color:#2e2a4a"><a href="#142616" label="[14:26:16]">&lt;OriansJ&gt;</a></span><span class="message">siraben: M2-Planet was just the named picked as the C compiler bootstrapped from M1</span></div><div class="line" id="142637"><span class="nick" style="color:#2e2a4a"><a href="#142637" label="[14:26:37]">&lt;OriansJ&gt;</a></span><span class="message">as it is a PLAtform NEutral Transpiler</span></div><div class="line" id="142706"><span class="nick" style="color:#2e2a4a"><a href="#142706" label="[14:27:06]">&lt;OriansJ&gt;</a></span><span class="message">converting C code into M1 assembly</span></div><div class="line" id="142839"><span class="nick" style="color:#2e2a4a"><a href="#142839" label="[14:28:39]">&lt;OriansJ&gt;</a></span><span class="message">it was a logical step after I wrote the C compiler cc_x86.M1</span></div><div class="line" id="142853"><span class="nick" style="color:#d9d9d9"><a href="#142853" label="[14:28:53]">&lt;siraben&gt;</a></span><span class="message">After building mes-m2 I only have mes-m2 in my bin folder</span></div><div class="line" id="142934"><span class="nick" style="color:#2e2a4a"><a href="#142934" label="[14:29:34]">&lt;OriansJ&gt;</a></span><span class="message">yes and</span></div><div class="line" id="143019"><span class="nick" style="color:#d9d9d9"><a href="#143019" label="[14:30:19]">&lt;siraben&gt;</a></span><span class="message">Ah, need to get M2-Planet</span></div><div class="line" id="143025"><span class="nick" style="color:#d9d9d9"><a href="#143025" label="[14:30:25]">&lt;siraben&gt;</a></span><span class="message">Ok, I was just confused where the binaries were coming from</span></div><div class="line" id="143104"><span class="nick" style="color:#2e2a4a"><a href="#143104" label="[14:31:04]">&lt;OriansJ&gt;</a></span><span class="message">don't forget mescc-tools for M1, hex2 and blood-elf</span></div><div class="line" id="143113"><span class="nick" style="color:#d9d9d9"><a href="#143113" label="[14:31:13]">&lt;siraben&gt;</a></span><span class="message">Yep got those</span></div><div class="line" id="143342"><span class="nick" style="color:#d9d9d9"><a href="#143342" label="[14:33:42]">&lt;siraben&gt;</a></span><span class="message">Yay, it's working now.</span></div><div class="line" id="143349"><span class="nick" style="color:#d9d9d9"><a href="#143349" label="[14:33:49]">&lt;siraben&gt;</a></span><span class="message">Heh, the blynnc-ompiler part is taking a while</span></div><div class="line" id="143354"><span class="nick" style="color:#d9d9d9"><a href="#143354" label="[14:33:54]">&lt;siraben&gt;</a></span><span class="message">blynn-compiler</span></div><div class="line" id="143534"><span class="nick" style="color:#d9d9d9"><a href="#143534" label="[14:35:34]">&lt;siraben&gt;</a></span><span class="message">OriansJ: what should I do for the install phase of blynn-compiler? At the moment there are none</span></div><div class="line" id="143539"><span class="nick" style="color:#d9d9d9"><a href="#143539" label="[14:35:39]">&lt;siraben&gt;</a></span><span class="message">I guess I could cp /bin/vm into out</span></div><div class="line" id="144246"><span class="nick" style="color:#d9d9d9"><a href="#144246" label="[14:42:46]">&lt;siraben&gt;</a></span><span class="message">OriansJ: I get 5f229bf7ec16c465e0c8267206348ff8cf69bb694572a036da78ba4d088d4fe8 as the sha256 for vm, is that right?</span></div><div class="line" id="145907"><span class="nick" style="color:#389600"><a href="#145907" label="[14:59:07]">&lt;yt&gt;</a></span><span class="message">deesix: happy to talk about the right shift/hex2 thing when you have some time</span></div><div class="line" id="145931"><span class="nick" style="color:#2e2a4a"><a href="#145931" label="[14:59:31]">&lt;OriansJ&gt;</a></span><span class="message">siraben: we are not yet at the level of install blynn-compiler yet and M2-Planet generated binaries can be up to 10 times slower than GCC binaries.</span></div><div class="line" id="150001"><span class="nick" style="color:#d9d9d9"><a href="#150001" label="[15:00:01]">&lt;siraben&gt;</a></span><span class="message">I see.</span></div><div class="line" id="150002"><span class="nick" style="color:#389600"><a href="#150002" label="[15:00:02]">&lt;yt&gt;</a></span><span class="message">OriansJ: I ended up changing to a 0x600000 offset because that's what I was doing in the bootstrap script, which I think came from amd64 originally</span></div><div class="line" id="150005"><span class="nick" style="color:#d9d9d9"><a href="#150005" label="[15:00:05]">&lt;siraben&gt;</a></span><span class="message">Let me know if the hash matches</span></div><div class="line" id="150019"><span class="nick" style="color:#2e2a4a"><a href="#150019" label="[15:00:19]">&lt;OriansJ&gt;</a></span><span class="message">siraben: on blynn-compiler commit 7b52a3ec0f46333cb70bddd4fbbb7a7e3b8efbb9; I get 2c311678f1a2a516ee8a0177cbb4031091777c1f0bb3e776edcb0b1deb6d271c</span></div><div class="line" id="150038"><span class="nick" style="color:#d9d9d9"><a href="#150038" label="[15:00:38]">&lt;siraben&gt;</a></span><span class="message">Oh, hm.</span></div><div class="line" id="150043"><span class="nick" style="color:#389600"><a href="#150043" label="[15:00:43]">&lt;yt&gt;</a></span><span class="message">not wedded to any of them though, and I'm not sure if there is a &quot;standard&quot; as such on aarch64. surely it's just a linker implementation detail?</span></div><div class="line" id="150101"><span class="nick" style="color:#d9d9d9"><a href="#150101" label="[15:01:01]">&lt;siraben&gt;</a></span><span class="message">OriansJ: this was made by running `go.sh`. right?</span></div><div class="line" id="150114"><span class="nick" style="color:#389600"><a href="#150114" label="[15:01:14]">&lt;yt&gt;</a></span><span class="message">I'll have a look at your patched makefile and see whatever is going on with hex0 not being identical between versions...</span></div><div class="line" id="150132"><span class="nick" style="color:#2e2a4a"><a href="#150132" label="[15:01:32]">&lt;OriansJ&gt;</a></span><span class="message">siraben: correct</span></div><div class="line" id="150142"><span class="nick" style="color:#d9d9d9"><a href="#150142" label="[15:01:42]">&lt;siraben&gt;</a></span><span class="message">Hm.</span></div><div class="line" id="150205"><span class="nick" style="color:#d9d9d9"><a href="#150205" label="[15:02:05]">&lt;siraben&gt;</a></span><span class="message">What's the contents of vm look like?</span></div><div class="line" id="150229"><span class="nick" style="color:#2e2a4a"><a href="#150229" label="[15:02:29]">&lt;OriansJ&gt;</a></span><span class="message">but I'll double check, we can also compare bin/vm.M1 files to quickly find any differences</span></div><div class="line" id="150422"><span class="nick" style="color:#2e2a4a"><a href="#150422" label="[15:04:22]">&lt;OriansJ&gt;</a></span><span class="message">yt: yes it absolutely is a linker implementation detail but if you notice hex2 is our linker here.</span></div><div class="line" id="150432"><span class="nick" style="color:#d9d9d9"><a href="#150432" label="[15:04:32]">&lt;siraben&gt;</a></span><span class="message">bin/vm looks like nonsense to me</span></div><div class="line" id="150435"><span class="nick" style="color:#d9d9d9"><a href="#150435" label="[15:04:35]">&lt;siraben&gt;</a></span><span class="message">perhaps some core dump</span></div><div class="line" id="150447"><span class="nick" style="color:#2e2a4a"><a href="#150447" label="[15:04:47]">&lt;OriansJ&gt;</a></span><span class="message">and thank you yt for taking a look at that for me</span></div><div class="line" id="150507"><span class="nick" style="color:#2e2a4a"><a href="#150507" label="[15:05:07]">&lt;OriansJ&gt;</a></span><span class="message">siraben: does objdump -d bin/vm look more reasonable</span></div><div class="line" id="150555"><span class="nick" style="color:#2e2a4a"><a href="#150555" label="[15:05:55]">&lt;OriansJ&gt;</a></span><span class="message">nope still getting 2c311678f1a2a516ee8a0177cbb4031091777c1f0bb3e776edcb0b1deb6d271c</span></div><div class="line" id="150647"><span class="nick" style="color:#2e2a4a"><a href="#150647" label="[15:06:47]">&lt;OriansJ&gt;</a></span><span class="message">siraben: do you get f7abe737ad6415024575fe979bc353b858c16119bce8e07e9b2b36ee1ec36cf3  bin/vm.M1 ??</span></div><div class="line" id="150725"><span class="nick" style="color:#d9d9d9"><a href="#150725" label="[15:07:25]">&lt;siraben&gt;</a></span><span class="message">I just cleared my bin folder, retrying</span></div><div class="line" id="150800"><span class="nick" style="color:#2e2a4a"><a href="#150800" label="[15:08:00]">&lt;OriansJ&gt;</a></span><span class="message">git checkout 7b52a3ec0f46333cb70bddd4fbbb7a7e3b8efbb9 &amp;&amp; git clean -xdf &amp;&amp; ./go.sh will always do the trick</span></div><div class="line" id="150847"><span class="nick" style="color:#6c3d55"><a href="#150847" label="[15:08:47]">&lt;deesix&gt;</a></span><span class="message">yt, hello. If you look at the use of RSHIFT_X0_X1_X0 at cc_core.c, I think we can use arithmetic_recursion() like in signed/unsigned div, provided two different definitions for arith/logical right shift, sounds about right?</span></div><div class="line" id="151133"><span class="nick" style="color:#389600"><a href="#151133" label="[15:11:33]">&lt;yt&gt;</a></span><span class="message">deesix: if that's how M2-Planet is supposed to pick the correct type of right shift, then yeah, that sounds good.</span></div><div class="line" id="151214"><span class="nick" style="color:#389600"><a href="#151214" label="[15:12:14]">&lt;yt&gt;</a></span><span class="message">always using logical right shift is clearly wrong imo, as it just won't do the right thing on negative signed numbers</span></div><div class="line" id="151232"><span class="nick" style="color:#d9d9d9"><a href="#151232" label="[15:12:32]">&lt;siraben&gt;</a></span><span class="message">OriansJ:  interesting, whatever I pass to vm it prints it to stdout</span></div><div class="line" id="151250"><span class="nick" style="color:#389600"><a href="#151250" label="[15:12:50]">&lt;yt&gt;</a></span><span class="message">which is what I hit in hex2, in a test calculating armv7l relative offsets (which need to be shifted right)</span></div><div class="line" id="151252"><span class="nick" style="color:#d9d9d9"><a href="#151252" label="[15:12:52]">&lt;siraben&gt;</a></span><span class="message">$ ./result/bin/vm &quot;main s = s;&quot;</span></div><div class="line" id="151252"><span class="nick" style="color:#d9d9d9"><a href="#151252" label="[15:12:52]">&lt;siraben&gt;</a></span><span class="message">main s = s%</span></div><div class="line" id="151256"><span class="nick" style="color:#d9d9d9"><a href="#151256" label="[15:12:56]">&lt;siraben&gt;</a></span><span class="message">(no newline)</span></div><div class="line" id="151331"><span class="nick" style="color:#d9d9d9"><a href="#151331" label="[15:13:31]">&lt;siraben&gt;</a></span><span class="message">f7abe737ad6415024575fe979bc353b858c16119bce8e07e9b2b36ee1ec36cf3  bin/vm.M1</span></div><div class="line" id="151334"><span class="nick" style="color:#d9d9d9"><a href="#151334" label="[15:13:34]">&lt;siraben&gt;</a></span><span class="message">OriansJ: matches with you</span></div><div class="line" id="151922"><span class="nick" style="color:#389600"><a href="#151922" label="[15:19:22]">&lt;yt&gt;</a></span><span class="message">OriansJ: ho hum, I get identical checksums on all the versions of hex0, but a different checksum than you had</span></div><div class="line" id="152124"><span class="nick" style="color:#389600"><a href="#152124" label="[15:21:24]">&lt;yt&gt;</a></span><span class="message">are you using the most recent version of hex2? with the rel24bit offsets for aarch64?</span></div><div class="line" id="152350"><span class="nick" style="color:#6c3d55"><a href="#152350" label="[15:23:50]">&lt;deesix&gt;</a></span><span class="message">yt, looking at other targets... they pick using that function (based on signed/unsigned of the type).</span></div><div class="line" id="152425"><span class="nick" style="color:#389600"><a href="#152425" label="[15:24:25]">&lt;yt&gt;</a></span><span class="message">deesix: that makes sense then. I can make that change instead</span></div><div class="line" id="152728"><span class="nick" style="color:#bc80bd"><a href="#152728" label="[15:27:28]">&lt;Hagfish&gt;</a></span><span class="message">(should there be a script which is run before committing which rebuilds everything and stores the hashes in a config/log file, so that people who clone the repo can check the compilation on their machine?)</span></div><div class="line" id="152932"><span class="nick" style="color:#d9d9d9"><a href="#152932" label="[15:29:32]">&lt;siraben&gt;</a></span><span class="message">We should set up a CI</span></div><div class="line" id="154201"><span class="nick" style="color:#6c3d55"><a href="#154201" label="[15:42:01]">&lt;deesix&gt;</a></span><span class="message">yt, thanks. That was my fault.</span></div><div class="line" id="154513"><span class="nick" style="color:#2e2a4a"><a href="#154513" label="[15:45:13]">&lt;OriansJ&gt;</a></span><span class="message">yt: oh I was using the version of hex2 from mescc-tools-seed; my bad.</span></div><div class="line" id="154627"><span class="nick" style="color:#d9d9d9"><a href="#154627" label="[15:46:27]">&lt;siraben&gt;</a></span><span class="message">Alright, I made the bootstrappable packages an overlay</span></div><div class="line" id="154640"><span class="nick" style="color:#d9d9d9"><a href="#154640" label="[15:46:40]">&lt;siraben&gt;</a></span><span class="message">blynn-compiler depends on mescc-tools, mes-m2, m2-planet</span></div><div class="line" id="154651"><span class="nick" style="color:#d9d9d9"><a href="#154651" label="[15:46:51]">&lt;siraben&gt;</a></span><span class="message">Only thing is, bin/vm seems incorrect</span></div><div class="line" id="154753"><span class="nick" style="color:#d9d9d9"><a href="#154753" label="[15:47:53]">&lt;siraben&gt;</a></span><span class="message">OriansJ: please merge <a rel="nofollow" href="https://github.com/oriansj/blynn-compiler/pull/2">https://github.com/oriansj/blynn-compiler/pull/2</a> </span></div><div class="line" id="154917"><span class="nick" style="color:#2e2a4a"><a href="#154917" label="[15:49:17]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: well we could steal the idea from M2-Planet of SHA256SUM files and make Generate-test-answers</span></div><div class="line" id="154950"><span class="nick" style="color:#2e2a4a"><a href="#154950" label="[15:49:50]">&lt;OriansJ&gt;</a></span><span class="message">yt: double checked and they are all identical. Your hex0 will be merged shortly</span></div><div class="line" id="155227"><span class="nick" style="color:#2e2a4a"><a href="#155227" label="[15:52:27]">&lt;OriansJ&gt;</a></span><span class="message">siraben: your blynn-compiler pull has been merged in</span></div><div class="line" id="155346"><span class="nick" style="color:#d9d9d9"><a href="#155346" label="[15:53:46]">&lt;siraben&gt;</a></span><span class="message">OriansJ: thanks</span></div><div class="line" id="155454"><span class="nick" style="color:#2e2a4a"><a href="#155454" label="[15:54:54]">&lt;OriansJ&gt;</a></span><span class="message">yt: your hex0 work has been merged</span></div><div class="line" id="155532"><span class="nick" style="color:#d9d9d9"><a href="#155532" label="[15:55:32]">&lt;siraben&gt;</a></span><span class="message">OriansJ: Thanks.</span></div><div class="line" id="155810"><span class="nick" style="color:#389600"><a href="#155810" label="[15:58:10]">&lt;yt&gt;</a></span><span class="message">OriansJ: awesome!</span></div><div class="line" id="155854"><span class="nick" style="color:#389600"><a href="#155854" label="[15:58:54]">&lt;yt&gt;</a></span><span class="message">OriansJ: did you see <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/pull/12">https://github.com/oriansj/mescc-tools/pull/12</a>  ? a little catm bug I ran into :)</span></div><div class="line" id="160101"><span class="nick" style="color:#2e2a4a"><a href="#160101" label="[16:01:01]">&lt;OriansJ&gt;</a></span><span class="message">yt: not yet but I'll look at it promptly</span></div><div class="line" id="160206"><span class="nick" style="color:#2e2a4a"><a href="#160206" label="[16:02:06]">&lt;OriansJ&gt;</a></span><span class="message">oops; looks like I made another off-by-one error. Thank you yt; that will be merged promptly</span></div><div class="line" id="160421"><span class="nick" style="color:#d9d9d9"><a href="#160421" label="[16:04:21]">&lt;siraben&gt;</a></span><span class="message">OriansJ: do you want to check the hashes again?</span></div><div class="line" id="160435"><span class="nick" style="color:#389600"><a href="#160435" label="[16:04:35]">&lt;yt&gt;</a></span><span class="message">OriansJ: no worries! one of the most common errors in software, I'd bet.  at least all it does is cause a null pointer dereference, not some horrid memory corruption (been there, done that!)</span></div><div class="line" id="160502"><span class="nick" style="color:#389600"><a href="#160502" label="[16:05:02]">&lt;yt&gt;</a></span><span class="message">deesix: OriansJ: the proper fix for signed right shift on AArch64 is up now too: <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/pull/7">https://github.com/oriansj/M2-Planet/pull/7</a> </span></div><div class="line" id="160511"><span class="nick" style="color:#2e2a4a"><a href="#160511" label="[16:05:11]">&lt;OriansJ&gt;</a></span><span class="message">siraben: M2-Planet doesn't encode path information with the binaries it generates</span></div><div class="line" id="160549"><span class="nick" style="color:#2e2a4a"><a href="#160549" label="[16:05:49]">&lt;OriansJ&gt;</a></span><span class="message">so unless you changed the source code in vm.c or one of the input files; the checksums will never change.</span></div><div class="line" id="160602"><span class="nick" style="color:#d9d9d9"><a href="#160602" label="[16:06:02]">&lt;siraben&gt;</a></span><span class="message">What other input files are there?</span></div><div class="line" id="160613"><span class="nick" style="color:#d9d9d9"><a href="#160613" label="[16:06:13]">&lt;siraben&gt;</a></span><span class="message">Is bin/vm executable for you?</span></div><div class="line" id="160632"><span class="nick" style="color:#d9d9d9"><a href="#160632" label="[16:06:32]">&lt;siraben&gt;</a></span><span class="message">Oh</span></div><div class="line" id="160633"><span class="nick" style="color:#d9d9d9"><a href="#160633" label="[16:06:33]">&lt;siraben&gt;</a></span><span class="message">2c311678f1a2a516ee8a0177cbb4031091777c1f0bb3e776edcb0b1deb6d271c  ./bin/vm</span></div><div class="line" id="160638"><span class="nick" style="color:#d9d9d9"><a href="#160638" label="[16:06:38]">&lt;siraben&gt;</a></span><span class="message">It's now the same as yours</span></div><div class="line" id="160643"><span class="nick" style="color:#2e2a4a"><a href="#160643" label="[16:06:43]">&lt;OriansJ&gt;</a></span><span class="message">siraben: algebraically and all of the *.hs for example</span></div><div class="line" id="160743"><span class="nick" style="color:#2e2a4a"><a href="#160743" label="[16:07:43]">&lt;OriansJ&gt;</a></span><span class="message">siraben: of course it is</span></div><div class="line" id="160808"><span class="nick" style="color:#2e2a4a"><a href="#160808" label="[16:08:08]">&lt;OriansJ&gt;</a></span><span class="message">M2-Planet will always produce identical output given identical input with matching options regardless of host</span></div><div class="line" id="160830"><span class="nick" style="color:#d9d9d9"><a href="#160830" label="[16:08:30]">&lt;siraben&gt;</a></span><span class="message">Great.</span></div><div class="line" id="160841"><span class="nick" style="color:#2e2a4a"><a href="#160841" label="[16:08:41]">&lt;OriansJ&gt;</a></span><span class="message">yt: reviewing now</span></div><div class="line" id="160914"><span class="nick" style="color:#d9d9d9"><a href="#160914" label="[16:09:14]">&lt;siraben&gt;</a></span><span class="message">Yay, so not only can we build blynn but also have the other parts all captured in Nix</span></div><div class="line" id="160927"><span class="nick" style="color:#d9d9d9"><a href="#160927" label="[16:09:27]">&lt;siraben&gt;</a></span><span class="message">I should enable the tests as well, ping me again when you're done reviewing</span></div><div class="line" id="161002"><span class="nick" style="color:#2e2a4a"><a href="#161002" label="[16:10:02]">&lt;OriansJ&gt;</a></span><span class="message">yt: looks great; merged</span></div><div class="line" id="161155"><span class="nick" style="color:#2e2a4a"><a href="#161155" label="[16:11:55]">&lt;OriansJ&gt;</a></span><span class="message">siraben: I was thinking of pulling the tests in vm.c out into a proper test folder structure to enable easier expansion and incremental testing without having to recompile vm.c</span></div><div class="line" id="161258"><span class="nick" style="color:#d9d9d9"><a href="#161258" label="[16:12:58]">&lt;siraben&gt;</a></span><span class="message">OriansJ: which of mescc-tools m2-planet mes-m2 have tests?</span></div><div class="line" id="161302"><span class="nick" style="color:#d9d9d9"><a href="#161302" label="[16:13:02]">&lt;siraben&gt;</a></span><span class="message">Looks like m2-planet now</span></div><div class="line" id="161307"><span class="nick" style="color:#d9d9d9"><a href="#161307" label="[16:13:07]">&lt;siraben&gt;</a></span><span class="message">Yeah, that would be good, for vm.c</span></div><div class="line" id="161352"><span class="nick" style="color:#2e2a4a"><a href="#161352" label="[16:13:52]">&lt;OriansJ&gt;</a></span><span class="message">siraben: all of them have tests (in the test folder following the hello.sh standard (except for kaem because it is a shell))</span></div><div class="line" id="161531"><span class="nick" style="color:#389600"><a href="#161531" label="[16:15:31]">&lt;yt&gt;</a></span><span class="message">OriansJ: thanks; I'll pull out and clean up hex1 next</span></div><div class="line" id="161605"><span class="nick" style="color:#2e2a4a"><a href="#161605" label="[16:16:05]">&lt;OriansJ&gt;</a></span><span class="message">yt: sounds great look forward to reviewing it</span></div><div class="line" id="161606"><span class="nick" style="color:#d9d9d9"><a href="#161606" label="[16:16:06]">&lt;siraben&gt;</a></span><span class="message">Hehe, m2-planet test failed because of no `which`, Nix makes dependencies quite explicit.</span></div><div class="line" id="161650"><span class="nick" style="color:#389600"><a href="#161650" label="[16:16:50]">&lt;yt&gt;</a></span><span class="message">OriansJ: ah, would you be able to add a hex0-seed for AArch64 to bootstrap-seeds?  I think I forgot to include that repository in my contribution request at work (and someone somewhere might panic about committing binary code...)</span></div><div class="line" id="161721"><span class="nick" style="color:#389600"><a href="#161721" label="[16:17:21]">&lt;yt&gt;</a></span><span class="message">then I can add the first two steps of the bootstrapping script as well :)</span></div><div class="line" id="161755"><span class="nick" style="color:#2e2a4a"><a href="#161755" label="[16:17:55]">&lt;OriansJ&gt;</a></span><span class="message">yt: bootstrap-seeds needs two binaries for an architecture</span></div><div class="line" id="161834"><span class="nick" style="color:#2e2a4a"><a href="#161834" label="[16:18:34]">&lt;OriansJ&gt;</a></span><span class="message">a kaem-optional-seed and a hex0</span></div><div class="line" id="161913"><span class="nick" style="color:#2e2a4a"><a href="#161913" label="[16:19:13]">&lt;OriansJ&gt;</a></span><span class="message">as I doubt a x86 binary shell will work on AArch64</span></div><div class="line" id="161952"><span class="nick" style="color:#2e2a4a"><a href="#161952" label="[16:19:52]">&lt;OriansJ&gt;</a></span><span class="message">but if you wish to do it as 2 seperate commits that is fine and I'll just merge the hex0 binary for you</span></div><div class="line" id="162031"><span class="nick" style="color:#d9d9d9"><a href="#162031" label="[16:20:31]">&lt;siraben&gt;</a></span><span class="message">OriansJ: not sure why, but when I enable tests in m2-planet the install fails</span></div><div class="line" id="162053"><span class="nick" style="color:#d9d9d9"><a href="#162053" label="[16:20:53]">&lt;siraben&gt;</a></span><span class="message">It tries to move M2-Planet to the out directory but M2-Planet is in bin/</span></div><div class="line" id="162054"><span class="nick" style="color:#2e2a4a"><a href="#162054" label="[16:20:54]">&lt;OriansJ&gt;</a></span><span class="message">siraben: the tests don't need to be run</span></div><div class="line" id="162136"><span class="nick" style="color:#d9d9d9"><a href="#162136" label="[16:21:36]">&lt;siraben&gt;</a></span><span class="message">I guess I could make this a job for the CI, yeah.</span></div><div class="line" id="162225"><span class="nick" style="color:#bc80bd"><a href="#162225" label="[16:22:25]">&lt;Hagfish&gt;</a></span><span class="message">siraben: good point about a CI pipeline.  does anyone have experience with <a rel="nofollow" href="https://github.blog/2019-08-08-github-actions-now-supports-ci-cd/">https://github.blog/2019-08-08-github-actions-now-supports-ci-cd/</a>  ?</span></div><div class="line" id="162239"><span class="nick" style="color:#d9d9d9"><a href="#162239" label="[16:22:39]">&lt;siraben&gt;</a></span><span class="message">I have experience with GitHub Actions.</span></div><div class="line" id="162252"><span class="nick" style="color:#d9d9d9"><a href="#162252" label="[16:22:52]">&lt;siraben&gt;</a></span><span class="message">It'll be very easy to add it once Nix build support is merged</span></div><div class="line" id="162300"><span class="nick" style="color:#bc80bd"><a href="#162300" label="[16:23:00]">&lt;Hagfish&gt;</a></span><span class="message">that will be amazing</span></div><div class="line" id="162315"><span class="nick" style="color:#d9d9d9"><a href="#162315" label="[16:23:15]">&lt;siraben&gt;</a></span><span class="message">That's one thing I noticed across these repos, no CI</span></div><div class="line" id="162353"><span class="nick" style="color:#bc80bd"><a href="#162353" label="[16:23:53]">&lt;Hagfish&gt;</a></span><span class="message">i think it will really show potential contributors (and other people curious to learn more) how &quot;alive&quot; this project is</span></div><div class="line" id="162421"><span class="nick" style="color:#d9d9d9"><a href="#162421" label="[16:24:21]">&lt;siraben&gt;</a></span><span class="message">Before joining the IRC channel I thought it was stalled, actually</span></div><div class="line" id="162429"><span class="nick" style="color:#d9d9d9"><a href="#162429" label="[16:24:29]">&lt;siraben&gt;</a></span><span class="message">Didn't hear about m2-planet or mes at all, just stage0</span></div><div class="line" id="162450"><span class="nick" style="color:#bc80bd"><a href="#162450" label="[16:24:50]">&lt;Hagfish&gt;</a></span><span class="message">hmm, yeah, the publicity side of things has been hit and miss</span></div><div class="line" id="162511"><span class="nick" style="color:#d9d9d9"><a href="#162511" label="[16:25:11]">&lt;siraben&gt;</a></span><span class="message"> <a rel="nofollow" href="https://news.ycombinator.com/item?id=20264848">https://news.ycombinator.com/item?id=20264848</a> </span></div><div class="line" id="162533"><span class="nick" style="color:#bc80bd"><a href="#162533" label="[16:25:33]">&lt;Hagfish&gt;</a></span><span class="message">200 points</span></div><div class="line" id="162533"><span class="nick" style="color:#d9d9d9"><a href="#162533" label="[16:25:33]">&lt;siraben&gt;</a></span><span class="message">And <a rel="nofollow" href="https://news.ycombinator.com/item?id=17851311">https://news.ycombinator.com/item?id=17851311</a> </span></div><div class="line" id="162537"><span class="nick" style="color:#bc80bd"><a href="#162537" label="[16:25:37]">&lt;Hagfish&gt;</a></span><span class="message">that was one of the hits :)</span></div><div class="line" id="162735"><span class="nick" style="color:#d9d9d9"><a href="#162735" label="[16:27:35]">&lt;siraben&gt;</a></span><span class="message">Not only that we can use GitHub actions to produce binaries so people can download them and verify them</span></div><div class="line" id="163041"><span class="nick" style="color:#2e2a4a"><a href="#163041" label="[16:30:41]">&lt;OriansJ&gt;</a></span><span class="message">siraben: well I really didn't have much time to get CI included and honestly I was hoping someone who cared about it would be willing to help add it.</span></div><div class="line" id="163227"><span class="nick" style="color:#bc80bd"><a href="#163227" label="[16:32:27]">&lt;Hagfish&gt;</a></span><span class="message">yeah, it's not been a priority so far, but if it's easy now it's maybe worth investing a little time in</span></div><div class="line" id="163333"><span class="nick" style="color:#2e2a4a"><a href="#163333" label="[16:33:33]">&lt;OriansJ&gt;</a></span><span class="message">as for publicity, the last 20 hacker news posts were buried within 5 minutes or less with less than 1 upvote. they mistook the armv7l cc_x86.s work as a repost: <a rel="nofollow" href="https://news.ycombinator.com/item?id=22223044">https://news.ycombinator.com/item?id=22223044</a> </span></div><div class="line" id="163357"><span class="nick" style="color:#2e2a4a"><a href="#163357" label="[16:33:57]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: I encourage you to lead that effort.</span></div><div class="line" id="163412"><span class="nick" style="color:#2e2a4a"><a href="#163412" label="[16:34:12]">&lt;OriansJ&gt;</a></span><span class="message">as bylnn-compiler is my current priority.</span></div><div class="line" id="163504"><span class="nick" style="color:#2e2a4a"><a href="#163504" label="[16:35:04]">&lt;OriansJ&gt;</a></span><span class="message">^blynn-compiler^</span></div><div class="line" id="163623"><span class="nick" style="color:#2e2a4a"><a href="#163623" label="[16:36:23]">&lt;OriansJ&gt;</a></span><span class="message">I guess writing 5+ compilers in assembly is less interesting than just writing 1 compiler in assembly.</span></div><div class="line" id="163632"><span class="nick" style="color:#d9d9d9"><a href="#163632" label="[16:36:32]">&lt;siraben&gt;</a></span><span class="message">Hagfish: IIRC dang (the HN moderator) can do this <a rel="nofollow" href="https://github.com/minimaxir/hacker-news-undocumented#second-chance-pool">https://github.com/minimaxir/hacker-news-undocumented#second-chance-pool</a> </span></div><div class="line" id="163644"><span class="nick" style="color:#d9d9d9"><a href="#163644" label="[16:36:44]">&lt;siraben&gt;</a></span><span class="message">Yay, blynn-compiler passed CI on my fork! <a rel="nofollow" href="https://github.com/siraben/compiler/runs/1503814290">https://github.com/siraben/compiler/runs/1503814290</a> </span></div><div class="line" id="163650"><span class="nick" style="color:#d9d9d9"><a href="#163650" label="[16:36:50]">&lt;siraben&gt;</a></span><span class="message">OriansJ: created a PR</span></div><div class="line" id="163731"><span class="nick" style="color:#d9d9d9"><a href="#163731" label="[16:37:31]">&lt;siraben&gt;</a></span><span class="message">So future commits and PRs will be run with the CI</span></div><div class="line" id="163837"><span class="nick" style="color:#d9d9d9"><a href="#163837" label="[16:38:37]">&lt;siraben&gt;</a></span><span class="message">I could add a separate workflow to check the hash of bin/vm and see if it's as expected</span></div><div class="line" id="164007"><span class="nick" style="color:#d9d9d9"><a href="#164007" label="[16:40:07]">&lt;siraben&gt;</a></span><span class="message">I think the README would be better updated to reflect this fork of blynn-compiler</span></div><div class="line" id="164015"><span class="nick" style="color:#d9d9d9"><a href="#164015" label="[16:40:15]">&lt;siraben&gt;</a></span><span class="message">Add build instructions etc.</span></div><div class="line" id="164213"><span class="nick" style="color:#2e2a4a"><a href="#164213" label="[16:42:13]">&lt;OriansJ&gt;</a></span><span class="message">siraben: merged</span></div><div class="line" id="164227"><span class="nick" style="color:#d9d9d9"><a href="#164227" label="[16:42:27]">&lt;siraben&gt;</a></span><span class="message">Thanks!</span></div><div class="line" id="164341"><span class="nick" style="color:#d9d9d9"><a href="#164341" label="[16:43:41]">&lt;siraben&gt;</a></span><span class="message">It would be good to regularly bump versions of the dependencies as well</span></div><div class="line" id="164420"><span class="nick" style="color:#d9d9d9"><a href="#164420" label="[16:44:20]">&lt;siraben&gt;</a></span><span class="message">OriansJ: does mescc-tools development happen on savannah or github now?</span></div><div class="line" id="164436"><span class="nick" style="color:#2e2a4a"><a href="#164436" label="[16:44:36]">&lt;OriansJ&gt;</a></span><span class="message">siraben: both, I keep them in sync</span></div><div class="line" id="164511"><span class="nick" style="color:#2e2a4a"><a href="#164511" label="[16:45:11]">&lt;OriansJ&gt;</a></span><span class="message">but officially savannah is always the master</span></div><div class="line" id="164657"><span class="nick" style="color:#2e2a4a"><a href="#164657" label="[16:46:57]">&lt;OriansJ&gt;</a></span><span class="message">as savannah is an FSF approved source repository and this all is going to be part of Guix</span></div><div class="line" id="164705"><span class="nick" style="color:#d9d9d9"><a href="#164705" label="[16:47:05]">&lt;siraben&gt;</a></span><span class="message">Right.</span></div><div class="line" id="164903"><span class="nick" style="color:#2e2a4a"><a href="#164903" label="[16:49:03]">&lt;OriansJ&gt;</a></span><span class="message">siraben: so do you think yt should message dang (the HN moderator) when we merge AArch64's cc_aarch.M1 work? So that stage0 might remind people that it is very alive and active.</span></div><div class="line" id="165138"><span class="nick" style="color:#bc80bd"><a href="#165138" label="[16:51:38]">&lt;Hagfish&gt;</a></span><span class="message">i don't like creating accounts on places, but HN is the one site i've made an exception for</span></div><div class="line" id="165218"><span class="nick" style="color:#bc80bd"><a href="#165218" label="[16:52:18]">&lt;Hagfish&gt;</a></span><span class="message">anyway, if you want to get publicity from HN, the trick is to write a new blog post with a clickbaity/clear title, and post the link to that</span></div><div class="line" id="165424"><span class="nick" style="color:#2e2a4a"><a href="#165424" label="[16:54:24]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: I don't do PR, only code</span></div><div class="line" id="165445"><span class="nick" style="color:#d9d9d9"><a href="#165445" label="[16:54:45]">&lt;siraben&gt;</a></span><span class="message">OriansJ: I'm not sure. I haven't done it myself</span></div><div class="line" id="165503"><span class="nick" style="color:#d9d9d9"><a href="#165503" label="[16:55:03]">&lt;siraben&gt;</a></span><span class="message">I think beyond posting on HN and whatnot, &quot;modernizing&quot; the project would help</span></div><div class="line" id="165510"><span class="nick" style="color:#2e2a4a"><a href="#165510" label="[16:55:10]">&lt;OriansJ&gt;</a></span><span class="message">the funniest part is the cc_x86, cc_amd64 and cc_armv7l were all considered reposts of the knight cc_x86</span></div><div class="line" id="165512"><span class="nick" style="color:#d9d9d9"><a href="#165512" label="[16:55:12]">&lt;siraben&gt;</a></span><span class="message">CI, badges, other flashy things, heh</span></div><div class="line" id="165529"><span class="nick" style="color:#d9d9d9"><a href="#165529" label="[16:55:29]">&lt;siraben&gt;</a></span><span class="message">Yeah, if it was considered a repost mentioning that would help</span></div><div class="line" id="165544"><span class="nick" style="color:#d9d9d9"><a href="#165544" label="[16:55:44]">&lt;siraben&gt;</a></span><span class="message">I could do the email perhaps, I'm pretty active on HN</span></div><div class="line" id="165612"><span class="nick" style="color:#389600"><a href="#165612" label="[16:56:12]">&lt;yt&gt;</a></span><span class="message">OriansJ: I still need to port kaem; I'm just using bash to run the script now, so yeah, two separate commits to bootstrap-seeds would be great</span></div><div class="line" id="165754"><span class="nick" style="color:#389600"><a href="#165754" label="[16:57:54]">&lt;yt&gt;</a></span><span class="message">maybe when the blynn-compiler is part of the bootstrap, we could do a blogpost for HN for a full source bootstrap on AArch64 ;-)</span></div><div class="line" id="170211"><span class="nick" style="color:#2e2a4a"><a href="#170211" label="[17:02:11]">&lt;OriansJ&gt;</a></span><span class="message">siraben: &quot;modernizing&quot; isn't exactly compatible with bootstrap everything from a 257byte hex0 binary but I get the desire to attract attention but I don't want to attract those programmers who do complexity for its own sake but rather those interested in the bootstrap problem itself.</span></div><div class="line" id="170258"><span class="nick" style="color:#d9d9d9"><a href="#170258" label="[17:02:58]">&lt;siraben&gt;</a></span><span class="message">That's a valid concern. I think people will self-select, however, once they see the goals of the project</span></div><div class="line" id="170346"><span class="nick" style="color:#2e2a4a"><a href="#170346" label="[17:03:46]">&lt;OriansJ&gt;</a></span><span class="message">yt: I'll have those up in a bit</span></div><div class="line" id="170753"><span class="nick" style="color:#d9d9d9"><a href="#170753" label="[17:07:53]">&lt;siraben&gt;</a></span><span class="message">OriansJ: it appears mes-m2 hasn't had a release tagged in a while, since Jul 16, 2019</span></div><div class="line" id="170943"><span class="nick" style="color:#2e2a4a"><a href="#170943" label="[17:09:43]">&lt;OriansJ&gt;</a></span><span class="message">siraben: well life has been a bit crazy since my wife got pregnant and we had our son.</span></div><div class="line" id="171004"><span class="nick" style="color:#d9d9d9"><a href="#171004" label="[17:10:04]">&lt;siraben&gt;</a></span><span class="message">Of course, no worries. I'm just considering whether to track the latest master commit or tagged release</span></div><div class="line" id="171047"><span class="nick" style="color:#2e2a4a"><a href="#171047" label="[17:10:47]">&lt;OriansJ&gt;</a></span><span class="message">always latest master commit</span></div><div class="line" id="171103"><span class="nick" style="color:#2e2a4a"><a href="#171103" label="[17:11:03]">&lt;OriansJ&gt;</a></span><span class="message">as no commit should ever break the build or the tests</span></div><div class="line" id="173306"><span class="nick" style="color:#2e2a4a"><a href="#173306" label="[17:33:06]">&lt;OriansJ&gt;</a></span><span class="message">and I am about to break mescc-tools-seeds by updating bootstrap-seeds; so everyone in 15 minutes update your copy of bootstrap-seeds and then mescc-tools-seeds as I have to chance both.</span></div><div class="line" id="173434"><span class="nick" style="color:#d9d9d9"><a href="#173434" label="[17:34:34]">&lt;siraben&gt;</a></span><span class="message">In which packages are the seeds used?</span></div><div class="line" id="173447"><span class="nick" style="color:#2e2a4a"><a href="#173447" label="[17:34:47]">&lt;OriansJ&gt;</a></span><span class="message">(and I am making boostrap-seeds a submodule in mescc-tools-seed to reduce future issues)</span></div><div class="line" id="173511"><span class="nick" style="color:#2e2a4a"><a href="#173511" label="[17:35:11]">&lt;OriansJ&gt;</a></span><span class="message">siraben: all major bootstrap work</span></div><div class="line" id="173610"><span class="nick" style="color:#2e2a4a"><a href="#173610" label="[17:36:10]">&lt;OriansJ&gt;</a></span><span class="message">including janneke's guix bootstrap work</span></div><div class="line" id="173649"><span class="nick" style="color:#2e2a4a"><a href="#173649" label="[17:36:49]">&lt;OriansJ&gt;</a></span><span class="message">but this will be fixed in 5 minutes and there will be no external changes</span></div><div class="line" id="174239"><span class="nick" style="color:#2e2a4a"><a href="#174239" label="[17:42:39]">&lt;OriansJ&gt;</a></span><span class="message">now mescc-tools-seed will be entirely self-contained. a one and done repo of bootstrappablity</span></div><div class="line" id="174444"><span class="nick" style="color:#2e2a4a"><a href="#174444" label="[17:44:44]">&lt;OriansJ&gt;</a></span><span class="message">and the fix is up</span></div><div class="line" id="174515"><span class="nick" style="color:#2e2a4a"><a href="#174515" label="[17:45:15]">&lt;OriansJ&gt;</a></span><span class="message">bootstrap-seeds is now a submodule of mescc-tools-seed</span></div><div class="line" id="174935"><span class="nick" style="color:#d9d9d9"><a href="#174935" label="[17:49:35]">&lt;siraben&gt;</a></span><span class="message">OriansJ: using the seeds is it possible to bootstrap blynn-compiler?</span></div><div class="line" id="182141"><span class="nick" style="color:#80b1d3"><a href="#182141" label="[18:21:41]">&lt;xentrac&gt;</a></span><span class="message">CI would be pretty worthwhile, even without badges :)</span></div><div class="line" id="182230"><span class="nick" style="color:#80b1d3"><a href="#182230" label="[18:22:30]">&lt;xentrac&gt;</a></span><span class="message">just in the sense of publishing continuous feedback on status</span></div><div class="line" id="182901"><span class="nick" style="color:#2e2a4a"><a href="#182901" label="[18:29:01]">&lt;OriansJ&gt;</a></span><span class="message">siraben: yes to the generated/lonely.c stage</span></div><div class="line" id="182923"><span class="nick" style="color:#d9d9d9"><a href="#182923" label="[18:29:23]">&lt;siraben&gt;</a></span><span class="message">OriansJ: ooh, how?</span></div><div class="line" id="182939"><span class="nick" style="color:#d9d9d9"><a href="#182939" label="[18:29:39]">&lt;siraben&gt;</a></span><span class="message">Via stage0?</span></div><div class="line" id="183029"><span class="nick" style="color:#2e2a4a"><a href="#183029" label="[18:30:29]">&lt;OriansJ&gt;</a></span><span class="message">siraben: once we fixup vm.c to remove the need for rts.c we will be all the way until generated/uniquely.c</span></div><div class="line" id="183058"><span class="nick" style="color:#2e2a4a"><a href="#183058" label="[18:30:58]">&lt;OriansJ&gt;</a></span><span class="message">siraben: mescc-tools-seed builds M2-planet and mescc-tools and mes-m2</span></div><div class="line" id="183112"><span class="nick" style="color:#2e2a4a"><a href="#183112" label="[18:31:12]">&lt;OriansJ&gt;</a></span><span class="message">so we can simply make it a submodule and build it</span></div><div class="line" id="183128"><span class="nick" style="color:#2e2a4a"><a href="#183128" label="[18:31:28]">&lt;OriansJ&gt;</a></span><span class="message">using the contents of go.sh</span></div><div class="line" id="183139"><span class="nick" style="color:#2e2a4a"><a href="#183139" label="[18:31:39]">&lt;OriansJ&gt;</a></span><span class="message">as kaem can run its contents</span></div><div class="line" id="183204"><span class="nick" style="color:#2e2a4a"><a href="#183204" label="[18:32:04]">&lt;OriansJ&gt;</a></span><span class="message">(although we would probably write architecture specific versions for AMD644, armv7lo and AArch64</span></div><div class="line" id="183646"><span class="nick" style="color:#d9d9d9"><a href="#183646" label="[18:36:46]">&lt;siraben&gt;</a></span><span class="message">I see. I'll try to build mescc-tools-seed then make mes-m2 use it as a dependency</span></div><div class="line" id="184836"><span class="nick" style="color:#d9d9d9"><a href="#184836" label="[18:48:36]">&lt;siraben&gt;</a></span><span class="message">OriansJ: using the seed then gcc won't be a dependency anymore for mescc-tools, m2-planet?</span></div><div class="line" id="185307"><span class="nick" style="color:#d9d9d9"><a href="#185307" label="[18:53:07]">&lt;siraben&gt;</a></span><span class="message">Heh, at this point it's probably putting too much into blynn-compiler, I'll maintain this as a separate overlay.</span></div><div class="line" id="185308"><span class="nick" style="color:#2e2a4a"><a href="#185308" label="[18:53:08]">&lt;OriansJ&gt;</a></span><span class="message">siraben: using the seed there is no dependency on anything</span></div><div class="line" id="185322"><span class="nick" style="color:#d9d9d9"><a href="#185322" label="[18:53:22]">&lt;siraben&gt;</a></span><span class="message">I'll keep the Nix-related changes to only be able to build blynn-compiler</span></div><div class="line" id="185359"><span class="nick" style="color:#2e2a4a"><a href="#185359" label="[18:53:59]">&lt;OriansJ&gt;</a></span><span class="message">siraben: using standard compilers is fine as the CI would only be checking for common development work flows</span></div><div class="line" id="185443"><span class="nick" style="color:#2e2a4a"><a href="#185443" label="[18:54:43]">&lt;OriansJ&gt;</a></span><span class="message">as it is much easier to debug gcc binaries than M2-Planet binaries</span></div><div class="line" id="185503"><span class="nick" style="color:#2e2a4a"><a href="#185503" label="[18:55:03]">&lt;OriansJ&gt;</a></span><span class="message">not to mention 10 times faster</span></div><div class="line" id="185511"><span class="nick" style="color:#d9d9d9"><a href="#185511" label="[18:55:11]">&lt;siraben&gt;</a></span><span class="message">Yeah.</span></div><div class="line" id="191510"><span class="nick" style="color:#d9d9d9"><a href="#191510" label="[19:15:10]">&lt;siraben&gt;</a></span><span class="message">OriansJ: mescc-tools-seed tails during install: `fatal: not a git repository (or any of the parent directories): .git`</span></div><div class="line" id="191519"><span class="nick" style="color:#d9d9d9"><a href="#191519" label="[19:15:19]">&lt;siraben&gt;</a></span><span class="message">Not sure what's going on there</span></div><div class="line" id="191651"><span class="nick" style="color:#d9d9d9"><a href="#191651" label="[19:16:51]">&lt;siraben&gt;</a></span><span class="message">I could override it with a `cp` to $out/bin</span></div><div class="line" id="191751"><span class="nick" style="color:#2e2a4a"><a href="#191751" label="[19:17:51]">&lt;OriansJ&gt;</a></span><span class="message">siraben: and merged your latest pull request</span></div><div class="line" id="191756"><span class="nick" style="color:#d9d9d9"><a href="#191756" label="[19:17:56]">&lt;siraben&gt;</a></span><span class="message">Thanks</span></div><div class="line" id="191821"><span class="nick" style="color:#d9d9d9"><a href="#191821" label="[19:18:21]">&lt;siraben&gt;</a></span><span class="message">I just tried to build m2-planet using the mes-m2 binary from mescc-tools-seed, and got a segfault</span></div><div class="line" id="191840"><span class="nick" style="color:#d9d9d9"><a href="#191840" label="[19:18:40]">&lt;siraben&gt;</a></span><span class="message"> <a rel="nofollow" href="http://ix.io/2GKP">http://ix.io/2GKP</a> </span></div><div class="line" id="191854"><span class="nick" style="color:#2e2a4a"><a href="#191854" label="[19:18:54]">&lt;OriansJ&gt;</a></span><span class="message">siraben: mescc-tools-seed builds M2-Planet too; so no need</span></div><div class="line" id="191927"><span class="nick" style="color:#d9d9d9"><a href="#191927" label="[19:19:27]">&lt;siraben&gt;</a></span><span class="message">Oh, so what the seed be able to do?</span></div><div class="line" id="191930"><span class="nick" style="color:#d9d9d9"><a href="#191930" label="[19:19:30]">&lt;siraben&gt;</a></span><span class="message">will the*</span></div><div class="line" id="192241"><span class="nick" style="color:#d9d9d9"><a href="#192241" label="[19:22:41]">&lt;siraben&gt;</a></span><span class="message">I'll read <a rel="nofollow" href="https://github.com/oriansj/talk-notes/blob/master/bootstrappable.org">https://github.com/oriansj/talk-notes/blob/master/bootstrappable.org</a> </span></div><div class="line" id="200705"><span class="nick" style="color:#389600"><a href="#200705" label="[20:07:05]">&lt;yt&gt;</a></span><span class="message">OriansJ: hex1 is up! <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-seed/pull/13">https://github.com/oriansj/mescc-tools-seed/pull/13</a> </span></div><div class="line" id="201623"><span class="nick" style="color:#2e2a4a"><a href="#201623" label="[20:16:23]">&lt;OriansJ&gt;</a></span><span class="message">yt: will begin reviewing</span></div><div class="line" id="202149"><span class="nick" style="color:#389600"><a href="#202149" label="[20:21:49]">&lt;yt&gt;</a></span><span class="message">OriansJ: Thanks!</span></div><div class="line" id="203023"><span class="nick" style="color:#2e2a4a"><a href="#203023" label="[20:30:23]">&lt;OriansJ&gt;</a></span><span class="message">wow yt you went overkill in hex1; with support for absolute addresses but I am guessing it was needed in AArch64</span></div><div class="line" id="203129"><span class="nick" style="color:#389600"><a href="#203129" label="[20:31:29]">&lt;yt&gt;</a></span><span class="message">I originally only had 16bit absolute addresses, but after your suggestion earlier to use 32-bit addressing I had to add those as well!</span></div><div class="line" id="203209"><span class="nick" style="color:#389600"><a href="#203209" label="[20:32:09]">&lt;yt&gt;</a></span><span class="message">OriansJ: and the relative addressing help massively with b and bl addressing so that went in too</span></div><div class="line" id="203314"><span class="nick" style="color:#389600"><a href="#203314" label="[20:33:14]">&lt;yt&gt;</a></span><span class="message">I was really happy when I was doing hex2 to have those addressing modes; finally no more hand-editing address offsets :D</span></div><div class="line" id="203321"><span class="nick" style="color:#2e2a4a"><a href="#203321" label="[20:33:21]">&lt;OriansJ&gt;</a></span><span class="message">yt: well the relative addressing was the major pain point of basic hex0 programming and hex1 was just designed to be the minimal number of manually calculated branches required to add support for relative addressing.</span></div><div class="line" id="203428"><span class="nick" style="color:#389600"><a href="#203428" label="[20:34:28]">&lt;yt&gt;</a></span><span class="message">OriansJ: fair, I guess the absolute addresses only need to be calculated once and can be filled in everywhere</span></div><div class="line" id="203440"><span class="nick" style="color:#389600"><a href="#203440" label="[20:34:40]">&lt;yt&gt;</a></span><span class="message">but they're also easy to add to hex1 so here we are :)</span></div><div class="line" id="203518"><span class="nick" style="color:#2e2a4a"><a href="#203518" label="[20:35:18]">&lt;OriansJ&gt;</a></span><span class="message">yep, AArch64's hex1 is the most advanced of the bunch of hex1</span></div><div class="line" id="203919"><span class="nick" style="color:#2e2a4a"><a href="#203919" label="[20:39:19]">&lt;OriansJ&gt;</a></span><span class="message">and biggest (x86 =&gt; 689; AMD64 =&gt; 861; knight =&gt; 472)</span></div><div class="line" id="204145"><span class="nick" style="color:#389600"><a href="#204145" label="[20:41:45]">&lt;yt&gt;</a></span><span class="message">OriansJ: I'm sure there is a lot that can be done to bring the size down for the AArch64 tools, at the expense of more different instructions and perhaps reduced readability</span></div><div class="line" id="204228"><span class="nick" style="color:#389600"><a href="#204228" label="[20:42:28]">&lt;yt&gt;</a></span><span class="message">The lack of a useable load immediate, or load address is really hurting on AArch64</span></div><div class="line" id="204553"><span class="nick" style="color:#389600"><a href="#204553" label="[20:45:53]">&lt;yt&gt;</a></span><span class="message">At least the instructions themselves are 32 bits, or it would be *really* big</span></div><div class="line" id="210114"><span class="nick" style="color:#2e2a4a"><a href="#210114" label="[21:01:14]">&lt;OriansJ&gt;</a></span><span class="message">yt: I would not compromise readability for size reductions.</span></div><div class="line" id="210559"><span class="nick" style="color:#2e2a4a"><a href="#210559" label="[21:05:59]">&lt;OriansJ&gt;</a></span><span class="message">but I should be done auditing hex1 by tonight.</span></div><div class="line" id="213626"><span class="nick" style="color:#389600"><a href="#213626" label="[21:36:26]">&lt;yt&gt;</a></span><span class="message">OriansJ: great! I should have catm ready to go up when that goes in; no rest for the wicked ;-)</span></div><div class="line" id="214454"><span class="nick" style="color:#6b8072"><a href="#214454" label="[21:44:54]">&lt;fossy&gt;</a></span><span class="message">OriansJ: thank you for writing the generate_m0_definitions.org file it is v useful</span></div><div class="line" id="220145"><span class="nick" style="color:#2e2a4a"><a href="#220145" label="[22:01:45]">&lt;OriansJ&gt;</a></span><span class="message">yt: well one could say the first path to bootstrapping is &quot;Math hard&quot; but the second is just &quot;Exercise hard&quot;</span></div><div class="line" id="230246"><span class="nick" style="color:#6b8072"><a href="#230246" label="[23:02:46]">&lt;fossy&gt;</a></span><span class="message">^.^</span></div><div class="line" id="230248"><span class="nick" style="color:#6b8072"><a href="#230248" label="[23:02:48]">&lt;fossy&gt;</a></span><span class="message">i like that</span></div><div class="line" id="230307"><span class="nick" style="color:#6b8072"><a href="#230307" label="[23:03:07]">&lt;fossy&gt;</a></span><span class="message">i got a bootloader that boots and then halts the cpu!</span></div><div class="line" id="230316"><span class="nick" style="color:#6b8072"><a href="#230316" label="[23:03:16]">&lt;fossy&gt;</a></span><span class="message">(yes i know it is very basic and useless)</span></div><div class="line" id="230323"><span class="nick" style="color:#6b8072"><a href="#230323" label="[23:03:23]">&lt;fossy&gt;</a></span><span class="message">now time to try and get it to write hello world</span></div><div class="line" id="230550"><span class="nick" style="color:#389600"><a href="#230550" label="[23:05:50]">&lt;yt&gt;</a></span><span class="message">fossy: what system is that on?</span></div><div class="line" id="231944"><span class="nick" style="color:#2e2a4a"><a href="#231944" label="[23:19:44]">&lt;OriansJ&gt;</a></span><span class="message">fossy: you might enjoy <a rel="nofollow" href="https://github.com/oriansj/stage0/blob/master/x86/stage0/stage0_monitor.hex">https://github.com/oriansj/stage0/blob/master/x86/stage0/stage0_monitor.hex</a> </span></div><br /></div></body></html>