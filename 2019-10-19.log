<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2019-10-19.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="003737"><span class="nick" style="color:#8dd3c7"><a href="#003737" label="[00:37:37]">&lt;stikonas&gt;</a></span><span class="message">how do I build mes? When I run ./configure, I get platform not supported: x86_64-unknown-mes</span></div><div class="line" id="003933"><span class="nick" style="color:#8dd3c7"><a href="#003933" label="[00:39:33]">&lt;stikonas&gt;</a></span><span class="message">full configure output: <a rel="nofollow" href="https://stikonas.eu/files/configure.txt">https://stikonas.eu/files/configure.txt</a> </span></div><div class="line" id="005245"><span class="nick" style="color:#8dd3c7"><a href="#005245" label="[00:52:45]">&lt;stikonas&gt;</a></span><span class="message">ok, more luck with wip-0.21</span></div><div class="line" id="005714"><span class="nick" style="color:#2e2a4a"><a href="#005714" label="[00:57:14]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: one can build mes-m2 if you would like</span></div><div class="line" id="005802"><span class="nick" style="color:#8dd3c7"><a href="#005802" label="[00:58:02]">&lt;stikonas&gt;</a></span><span class="message">yeah, I can try, but I did not find any build scripts yet</span></div><div class="line" id="005805"><span class="nick" style="color:#8dd3c7"><a href="#005805" label="[00:58:05]">&lt;stikonas&gt;</a></span><span class="message">is it master branch?</span></div><div class="line" id="005828"><span class="nick" style="color:#8dd3c7"><a href="#005828" label="[00:58:28]">&lt;stikonas&gt;</a></span><span class="message">oh  ok, makefile works with gcc</span></div><div class="line" id="005834"><span class="nick" style="color:#8dd3c7"><a href="#005834" label="[00:58:34]">&lt;stikonas&gt;</a></span><span class="message">I guess it's not yet ready for M2-Planet</span></div><div class="line" id="005851"><span class="nick" style="color:#2e2a4a"><a href="#005851" label="[00:58:51]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: you can use gcc</span></div><div class="line" id="005928"><span class="nick" style="color:#2e2a4a"><a href="#005928" label="[00:59:28]">&lt;OriansJ&gt;</a></span><span class="message">just checkout gcc_build</span></div><div class="line" id="010000"><span class="nick" style="color:#8dd3c7"><a href="#010000" label="[01:00:00]">&lt;stikonas&gt;</a></span><span class="message">ok, this worked</span></div><div class="line" id="010006"><span class="nick" style="color:#8dd3c7"><a href="#010006" label="[01:00:06]">&lt;stikonas&gt;</a></span><span class="message">mes-m2 does not hang anymore</span></div><div class="line" id="010101"><span class="nick" style="color:#2e2a4a"><a href="#010101" label="[01:01:01]">&lt;OriansJ&gt;</a></span><span class="message">good</span></div><div class="line" id="010133"><span class="nick" style="color:#8dd3c7"><a href="#010133" label="[01:01:33]">&lt;stikonas&gt;</a></span><span class="message">thanks!</span></div><div class="line" id="131235"><span class="nick" style="color:#6b8072"><a href="#131235" label="[13:12:35]">&lt;janneke&gt;</a></span><span class="message">OriansJ: just to give you a heads-up</span></div><div class="line" id="131305"><span class="nick" style="color:#6b8072"><a href="#131305" label="[13:13:05]">&lt;janneke&gt;</a></span><span class="message">i have pushed a wip-merge-struct branch to my mes-m2 gitlab</span></div><div class="line" id="131725"><span class="nick" style="color:#6b8072"><a href="#131725" label="[13:17:25]">&lt;janneke&gt;</a></span><span class="message">in which i have removed the new major change in boot behaviour</span></div><div class="line" id="131812"><span class="nick" style="color:#6b8072"><a href="#131812" label="[13:18:12]">&lt;janneke&gt;</a></span><span class="message">i have tagged that with `start-merge-struct'</span></div><div class="line" id="131823"><span class="nick" style="color:#6b8072"><a href="#131823" label="[13:18:23]">&lt;janneke&gt;</a></span><span class="message">i also pushed a rewritten master, in which the new boot behaviour change floats on top of this new branch point</span></div><div class="line" id="131946"><span class="nick" style="color:#6b8072"><a href="#131946" label="[13:19:46]">&lt;janneke&gt;</a></span><span class="message">i would like to see if with reasonable effort this can be nicely merged back into Mes</span></div><div class="line" id="132036"><span class="nick" style="color:#6b8072"><a href="#132036" label="[13:20:36]">&lt;janneke&gt;</a></span><span class="message">a macro-free, m2-planet ready, struct cell based mes is a major feature that i would like to release at some point</span></div><div class="line" id="132055"><span class="nick" style="color:#6b8072"><a href="#132055" label="[13:20:55]">&lt;janneke&gt;</a></span><span class="message">possibly that's too much work, i'll just have a go at it</span></div><div class="line" id="152006"><span class="nick" style="color:#2e2a4a"><a href="#152006" label="[15:20:06]">&lt;OriansJ&gt;</a></span><span class="message">janneke: sounds good</span></div><div class="line" id="155044"><span class="nick" style="color:#2e2a4a"><a href="#155044" label="[15:50:44]">&lt;OriansJ&gt;</a></span><span class="message">although #include &lt;assert.h&gt; might be a problem for M2-Planet</span></div><div class="line" id="155424"><span class="nick" style="color:#2e2a4a"><a href="#155424" label="[15:54:24]">&lt;OriansJ&gt;</a></span><span class="message">So I'll probably have to create an approximate alternate (something like void require(int bool, char* error); which will display the error message and exit(EXIT_FAILURE) if false</span></div><div class="line" id="155616"><span class="nick" style="color:#2e2a4a"><a href="#155616" label="[15:56:16]">&lt;OriansJ&gt;</a></span><span class="message">or maybe require(int bool, char* error, struct scm* cell); thus one could inspect the cell that isn't conforming</span></div><div class="line" id="155646"><span class="nick" style="color:#2e2a4a"><a href="#155646" label="[15:56:46]">&lt;OriansJ&gt;</a></span><span class="message">well I'll play with that and release something</span></div><div class="line" id="160202"><span class="nick" style="color:#6b8072"><a href="#160202" label="[16:02:02]">&lt;janneke&gt;</a></span><span class="message">OriansJ: hah, trying to resurrect the M2-Planet build, i just arrived at an assert ()</span></div><div class="line" id="160259"><span class="nick" style="color:#2e2a4a"><a href="#160259" label="[16:02:59]">&lt;OriansJ&gt;</a></span><span class="message">janneke: I'm going to rewrite all of those today</span></div><div class="line" id="160334"><span class="nick" style="color:#6b8072"><a href="#160334" label="[16:03:34]">&lt;janneke&gt;</a></span><span class="message">OriansJ: great, I'll refocus on the -&gt; Mes integration</span></div><div class="line" id="160351"><span class="nick" style="color:#2e2a4a"><a href="#160351" label="[16:03:51]">&lt;OriansJ&gt;</a></span><span class="message">sounds good</span></div><div class="line" id="160412"><span class="nick" style="color:#2e2a4a"><a href="#160412" label="[16:04:12]">&lt;OriansJ&gt;</a></span><span class="message">feel free to change up anything to make that easier for you</span></div><div class="line" id="160416"><span class="nick" style="color:#6b8072"><a href="#160416" label="[16:04:16]">&lt;janneke&gt;</a></span><span class="message">going to push what i have to my master, but that needs some work still</span></div><div class="line" id="160436"><span class="nick" style="color:#2e2a4a"><a href="#160436" label="[16:04:36]">&lt;OriansJ&gt;</a></span><span class="message">and I'll be picking off the M2-Planet compatibility issues</span></div><div class="line" id="160509"><span class="nick" style="color:#2e2a4a"><a href="#160509" label="[16:05:09]">&lt;OriansJ&gt;</a></span><span class="message">mes_builtins.c also has the FUNCTION0/1/2/3 problem</span></div><div class="line" id="160537"><span class="nick" style="color:#2e2a4a"><a href="#160537" label="[16:05:37]">&lt;OriansJ&gt;</a></span><span class="message">as M2-Planet supports FUNCTION and it is more powerful than GCC's function pointers</span></div><div class="line" id="160556"><span class="nick" style="color:#2e2a4a"><a href="#160556" label="[16:05:56]">&lt;OriansJ&gt;</a></span><span class="message">but GCC can't handle a universal function pointer type</span></div><div class="line" id="160637"><span class="nick" style="color:#2e2a4a"><a href="#160637" label="[16:06:37]">&lt;OriansJ&gt;</a></span><span class="message">So; I'll have to simplify it out when we get proper tests for the primitives in</span></div><div class="line" id="161311"><span class="nick" style="color:#2e2a4a"><a href="#161311" label="[16:13:11]">&lt;OriansJ&gt;</a></span><span class="message">and char* getenv(char*) doesn't appear either; I guess I have a replacement for that in kaem</span></div><div class="line" id="161558"><span class="nick" style="color:#2e2a4a"><a href="#161558" label="[16:15:58]">&lt;OriansJ&gt;</a></span><span class="message">yep: char* env_lookup(char* token, char** envp)</span></div><div class="line" id="162419"><span class="nick" style="color:#2e2a4a"><a href="#162419" label="[16:24:19]">&lt;OriansJ&gt;</a></span><span class="message">and with only a few minor tweaks the first of the Mes.c source files is now M2-Planet compatible</span></div><div class="line" id="162725"><span class="nick" style="color:#2e2a4a"><a href="#162725" label="[16:27:25]">&lt;OriansJ&gt;</a></span><span class="message">M2-Planet --architecture amd64 -f mes.h -f mes_constants.h -f ../M2-Planet/test/common_amd64/functions/exit.c -f ../M2-Planet/test/common_amd64/functions/malloc.c -f ../M2-Planet/functions/calloc.c -f mes.c</span></div><div class="line" id="162809"><span class="nick" style="color:#6b8072"><a href="#162809" label="[16:28:09]">&lt;janneke&gt;</a></span><span class="message">OriansJ: what settings do you use for `indent'?  i made my changes on the GNU branch and moving them proves much harder than i hoped; i think i'll just retype them</span></div><div class="line" id="162903"><span class="nick" style="color:#2e2a4a"><a href="#162903" label="[16:29:03]">&lt;OriansJ&gt;</a></span><span class="message">janneke: tab (it is instantly visable if you use whitespace-mode)</span></div><div class="line" id="162946"><span class="nick" style="color:#2e2a4a"><a href="#162946" label="[16:29:46]">&lt;OriansJ&gt;</a></span><span class="message">spaces for alignment only</span></div><div class="line" id="162949"><span class="nick" style="color:#6b8072"><a href="#162949" label="[16:29:49]">&lt;janneke&gt;</a></span><span class="message">OriansJ: sure, no i mean the program</span></div><div class="line" id="163047"><span class="nick" style="color:#2e2a4a"><a href="#163047" label="[16:30:47]">&lt;OriansJ&gt;</a></span><span class="message">oh, I use astyle when importing code</span></div><div class="line" id="163056"><span class="nick" style="color:#6b8072"><a href="#163056" label="[16:30:56]">&lt;janneke&gt;</a></span><span class="message">indent -linux moves the { and * in the wrong spots; possibly -kr -tab or -orig</span></div><div class="line" id="163105"><span class="nick" style="color:#6b8072"><a href="#163105" label="[16:31:05]">&lt;janneke&gt;</a></span><span class="message">ah, okay</span></div><div class="line" id="163111"><span class="nick" style="color:#2e2a4a"><a href="#163111" label="[16:31:11]">&lt;OriansJ&gt;</a></span><span class="message">astyle -A1tSxejz2fpUxV</span></div><div class="line" id="164421"><span class="nick" style="color:#2e2a4a"><a href="#164421" label="[16:44:21]">&lt;OriansJ&gt;</a></span><span class="message">janneke:  and this should make you excited: M2-Planet --architecture amd64 -f mes.h -f mes_constants.h -f ../M2-Planet/test/common_amd64/functions/exit.c -f ../M2-Planet/test/common_amd64/functions/malloc.c -f ../M2-Planet/functions/calloc.c -f mes_eval.c</span></div><div class="line" id="170300"><span class="nick" style="color:#6b8072"><a href="#170300" label="[17:03:00]">&lt;janneke&gt;</a></span><span class="message">OriansJ: Ah, that's great!</span></div><div class="line" id="170332"><span class="nick" style="color:#6b8072"><a href="#170332" label="[17:03:32]">&lt;janneke&gt;</a></span><span class="message">OriansJ: changes are up on my `wip-merge-struct' branch, please just rewrite as convenient</span></div><div class="line" id="170437"><span class="nick" style="color:#6b8072"><a href="#170437" label="[17:04:37]">&lt;janneke&gt;</a></span><span class="message">i started by removing any libc stuff from src/*.c; before doing a real merge with mes</span></div><div class="line" id="170611"><span class="nick" style="color:#2e2a4a"><a href="#170611" label="[17:06:11]">&lt;OriansJ&gt;</a></span><span class="message">janneke: I'll try to get that in once I finish mes_gc.c's M2-Planet makeover</span></div><div class="line" id="170639"><span class="nick" style="color:#6b8072"><a href="#170639" label="[17:06:39]">&lt;janneke&gt;</a></span><span class="message">now the libc solution starts making more sense; parts come from M2-Planet, parts are M2-Planet specific and come with Mes/Mes-m2, parts are shared between mes and tcc and so on</span></div><div class="line" id="170942"><span class="nick" style="color:#2e2a4a"><a href="#170942" label="[17:09:42]">&lt;OriansJ&gt;</a></span><span class="message">well if we are careful the only M2-Planet specific parts are // CONSTANT lines; which work on all C compilers without issues</span></div><div class="line" id="171251"><span class="nick" style="color:#2e2a4a"><a href="#171251" label="[17:12:51]">&lt;OriansJ&gt;</a></span><span class="message">and janneke checkout M2-Planet --architecture amd64 -f mes.h -f mes_constants.h -f ../M2-Planet/test/common_amd64/functions/exit.c -f ../M2-Planet/test/common_amd64/functions/malloc.c -f ../M2-Planet/functions/calloc.c -f mes_gc.c</span></div><div class="line" id="172426"><span class="nick" style="color:#6b8072"><a href="#172426" label="[17:24:26]">&lt;janneke&gt;</a></span><span class="message">OriansJ: yes, but being careful can be hard, think #if __arm__ ...</span></div><div class="line" id="172448"><span class="nick" style="color:#6b8072"><a href="#172448" label="[17:24:48]">&lt;janneke&gt;</a></span><span class="message">we have those in ntoab.c, so i chose to keep a m2-planet specific implementation...</span></div><div class="line" id="172453"><span class="nick" style="color:#6b8072"><a href="#172453" label="[17:24:53]">&lt;janneke&gt;</a></span><span class="message">at least for now</span></div><div class="line" id="172620"><span class="nick" style="color:#6b8072"><a href="#172620" label="[17:26:20]">&lt;janneke&gt;</a></span><span class="message">OriansJ: i don't think i can manage keeping your `Starting major change in behavior...Adding arith tests' floating on top of the M2-Planet rewrite :-(</span></div><div class="line" id="172832"><span class="nick" style="color:#80b1d3"><a href="#172832" label="[17:28:32]">*</a></span><span class="message">janneke sees what can be done</span></div><div class="line" id="173120"><span class="nick" style="color:#2e2a4a"><a href="#173120" label="[17:31:20]">&lt;OriansJ&gt;</a></span><span class="message">janneke: I am going to rewrite your read_boot to work with M2-Planet</span></div><div class="line" id="173532"><span class="nick" style="color:#2e2a4a"><a href="#173532" label="[17:35:32]">&lt;OriansJ&gt;</a></span><span class="message">I however don't think the makefile is ready for the M2-Planet build yet (don't worry I will be adding it later)</span></div><div class="line" id="174400"><span class="nick" style="color:#6b8072"><a href="#174400" label="[17:44:00]">&lt;janneke&gt;</a></span><span class="message">okay...fwiw i re-floated the major change again on top of both our m2-planet work</span></div><div class="line" id="174846"><span class="nick" style="color:#2e2a4a"><a href="#174846" label="[17:48:46]">&lt;OriansJ&gt;</a></span><span class="message">janneke: you know you can do mes-m2 --boot $file to work around the setting of the environment variables and the read_boot bit right?</span></div><div class="line" id="175519"><span class="nick" style="color:#6b8072"><a href="#175519" label="[17:55:19]">&lt;janneke&gt;</a></span><span class="message">OriansJ: yes; i tried to get mes/module/mes/boot-00.scm to boot that way but it looked like primitive-load was broken</span></div><div class="line" id="175607"><span class="nick" style="color:#6b8072"><a href="#175607" label="[17:56:07]">&lt;janneke&gt;</a></span><span class="message">OriansJ: i think the toplevel boot rewrite makes *a lot* of sense</span></div><div class="line" id="175702"><span class="nick" style="color:#2e2a4a"><a href="#175702" label="[17:57:02]">&lt;OriansJ&gt;</a></span><span class="message">that is because I broke primitive-load trying to get it to behave like a proper repl (I commented out the read bit in eval_apply())</span></div><div class="line" id="175704"><span class="nick" style="color:#6b8072"><a href="#175704" label="[17:57:04]">&lt;janneke&gt;</a></span><span class="message">however, before that rewrite i have a chance of running all regular mes and mescc tests from mes-0.20</span></div><div class="line" id="175748"><span class="nick" style="color:#2e2a4a"><a href="#175748" label="[17:57:48]">&lt;OriansJ&gt;</a></span><span class="message">simply uncomment /* X = read_input_file_env(); */</span></div><div class="line" id="180125"><span class="nick" style="color:#2e2a4a"><a href="#180125" label="[18:01:25]">&lt;OriansJ&gt;</a></span><span class="message">then instead of implicit reading of the bootfile: ./bin/mes-m2 -f test/boot-01.scm -f test/test100/boot.test; sort of thing</span></div><div class="line" id="180133"><span class="nick" style="color:#2e2a4a"><a href="#180133" label="[18:01:33]">&lt;OriansJ&gt;</a></span><span class="message">(Yeah I know it is ugly)</span></div><div class="line" id="180210"><span class="nick" style="color:#2e2a4a"><a href="#180210" label="[18:02:10]">&lt;OriansJ&gt;</a></span><span class="message">but I was trying to eliminate everything but the C source when trying to understand mes-m2's behavior</span></div><div class="line" id="180254"><span class="nick" style="color:#6b8072"><a href="#180254" label="[18:02:54]">&lt;janneke&gt;</a></span><span class="message">OriansJ: hmm, yes, that's where i started, then i resurrected mes_symbols () and mes_builtins () to populate the environment, ... etc -- then i decided to hold this rewrite off for a bit :-)</span></div><div class="line" id="180501"><span class="nick" style="color:#2e2a4a"><a href="#180501" label="[18:05:01]">&lt;OriansJ&gt;</a></span><span class="message">remember get the primitives right (with guile compatible tests) and I'll get the build working with M2-Planet</span></div><div class="line" id="180501"><span class="nick" style="color:#6b8072"><a href="#180501" label="[18:05:01]">&lt;janneke&gt;</a></span><span class="message">OriansJ: yes, we will go this path, making the mes.c command-line parser compatible with guile instead of this boot-* thing</span></div><div class="line" id="180519"><span class="nick" style="color:#6b8072"><a href="#180519" label="[18:05:19]">&lt;janneke&gt;</a></span><span class="message">yes...</span></div><div class="line" id="180528"><span class="nick" style="color:#6b8072"><a href="#180528" label="[18:05:28]">&lt;janneke&gt;</a></span><span class="message">i was just hoping to get an intermediate release out</span></div><div class="line" id="180645"><span class="nick" style="color:#6b8072"><a href="#180645" label="[18:06:45]">&lt;janneke&gt;</a></span><span class="message">the fork is about a year old, and it only gets more painful if i wait longer</span></div><div class="line" id="180728"><span class="nick" style="color:#6b8072"><a href="#180728" label="[18:07:28]">&lt;janneke&gt;</a></span><span class="message">until now, mes has seen only minor changes, most work has gone into mescc and mes lib c; so we should be OK</span></div><div class="line" id="180828"><span class="nick" style="color:#6b8072"><a href="#180828" label="[18:08:28]">&lt;janneke&gt;</a></span><span class="message">i see libc-related work coming in mes-m2 now, so i want to prevent creating a headache</span></div><div class="line" id="180904"><span class="nick" style="color:#2e2a4a"><a href="#180904" label="[18:09:04]">&lt;OriansJ&gt;</a></span><span class="message">janneke: hmmmm</span></div><div class="line" id="181105"><span class="nick" style="color:#2e2a4a"><a href="#181105" label="[18:11:05]">&lt;OriansJ&gt;</a></span><span class="message">how does this sound: we make a branch in mes-m2 called MesCC and it'll be eternally in the state that works with MesCC at all times</span></div><div class="line" id="181129"><span class="nick" style="color:#2e2a4a"><a href="#181129" label="[18:11:29]">&lt;OriansJ&gt;</a></span><span class="message">we can cherry-pick and pull only the changes that don't break MesCC</span></div><div class="line" id="181156"><span class="nick" style="color:#2e2a4a"><a href="#181156" label="[18:11:56]">&lt;OriansJ&gt;</a></span><span class="message">then when mes-m2 is fully done, we can do a squashing merge</span></div><div class="line" id="181214"><span class="nick" style="color:#2e2a4a"><a href="#181214" label="[18:12:14]">&lt;OriansJ&gt;</a></span><span class="message">we will lose some history but it makes the transistion and maintance easier</span></div><div class="line" id="181247"><span class="nick" style="color:#6b8072"><a href="#181247" label="[18:12:47]">&lt;janneke&gt;</a></span><span class="message">hmmm</span></div><div class="line" id="182722"><span class="nick" style="color:#2e2a4a"><a href="#182722" label="[18:27:22]">&lt;OriansJ&gt;</a></span><span class="message">and mes_hash.c is now M2-Planet compatible</span></div><div class="line" id="182737"><span class="nick" style="color:#2e2a4a"><a href="#182737" label="[18:27:37]">&lt;OriansJ&gt;</a></span><span class="message">M2-Planet --architecture amd64 -f mes.h -f mes_constants.h -f ../M2-Planet/test/common_amd64/functions/exit.c -f ../M2-Planet/test/common_amd64/functions/malloc.c -f ../M2-Planet/functions/calloc.c -f mes_hash.c</span></div><div class="line" id="182931"><span class="nick" style="color:#6b8072"><a href="#182931" label="[18:29:31]">&lt;janneke&gt;</a></span><span class="message">\o/</span></div><div class="line" id="183405"><span class="nick" style="color:#2e2a4a"><a href="#183405" label="[18:34:05]">&lt;OriansJ&gt;</a></span><span class="message">and mes_lib.c is now M2-Planet compatible</span></div><div class="line" id="183413"><span class="nick" style="color:#2e2a4a"><a href="#183413" label="[18:34:13]">&lt;OriansJ&gt;</a></span><span class="message">M2-Planet --architecture amd64 -f mes.h -f mes_constants.h -f ../M2-Planet/test/common_amd64/functions/exit.c -f ../M2-Planet/test/common_amd64/functions/malloc.c -f ../M2-Planet/functions/calloc.c -f mes_lib.c</span></div><div class="line" id="183755"><span class="nick" style="color:#2e2a4a"><a href="#183755" label="[18:37:55]">&lt;OriansJ&gt;</a></span><span class="message">and mes_math.c is now M2-Planet compatible</span></div><div class="line" id="183806"><span class="nick" style="color:#2e2a4a"><a href="#183806" label="[18:38:06]">&lt;OriansJ&gt;</a></span><span class="message">M2-Planet --architecture amd64 -f mes.h -f mes_constants.h -f ../M2-Planet/test/common_amd64/functions/exit.c -f ../M2-Planet/test/common_amd64/functions/malloc.c -f ../M2-Planet/functions/calloc.c -f mes_math.c</span></div><div class="line" id="184209"><span class="nick" style="color:#2e2a4a"><a href="#184209" label="[18:42:09]">&lt;OriansJ&gt;</a></span><span class="message">and mes_module.c is now M2-Planet compatible</span></div><div class="line" id="184219"><span class="nick" style="color:#2e2a4a"><a href="#184219" label="[18:42:19]">&lt;OriansJ&gt;</a></span><span class="message">M2-Planet --architecture amd64 -f mes.h -f mes_constants.h -f ../M2-Planet/test/common_amd64/functions/exit.c -f ../M2-Planet/test/common_amd64/functions/malloc.c -f ../M2-Planet/functions/calloc.c -f mes_module.c</span></div><div class="line" id="184614"><span class="nick" style="color:#2e2a4a"><a href="#184614" label="[18:46:14]">&lt;OriansJ&gt;</a></span><span class="message">while(y != cell_nil &amp;&amp; i++ &lt; 10)</span></div><div class="line" id="184618"><span class="nick" style="color:#2e2a4a"><a href="#184618" label="[18:46:18]">&lt;OriansJ&gt;</a></span><span class="message">...</span></div><div class="line" id="184627"><span class="nick" style="color:#2e2a4a"><a href="#184627" label="[18:46:27]">&lt;OriansJ&gt;</a></span><span class="message">ummm</span></div><div class="line" id="184630"><span class="nick" style="color:#2e2a4a"><a href="#184630" label="[18:46:30]">&lt;OriansJ&gt;</a></span><span class="message">yeah</span></div><div class="line" id="192600"><span class="nick" style="color:#2e2a4a"><a href="#192600" label="[19:26:00]">&lt;OriansJ&gt;</a></span><span class="message">now comes the ugly bit; dealing with mes-m2's string writes</span></div><div class="line" id="193548"><span class="nick" style="color:#2e2a4a"><a href="#193548" label="[19:35:48]">&lt;OriansJ&gt;</a></span><span class="message">and mes_printer.c is now M2-Planet compatible</span></div><div class="line" id="193558"><span class="nick" style="color:#2e2a4a"><a href="#193558" label="[19:35:58]">&lt;OriansJ&gt;</a></span><span class="message">M2-Planet --architecture amd64 -f mes.h -f mes_constants.h -f ../M2-Planet/test/common_amd64/functions/exit.c -f ../M2-Planet/test/common_amd64/functions/malloc.c -f ../M2-Planet/functions/calloc.c -f mes_printer.c</span></div><div class="line" id="195608"><span class="nick" style="color:#2e2a4a"><a href="#195608" label="[19:56:08]">&lt;OriansJ&gt;</a></span><span class="message">looks like I need to add support for \a in M2-Planet</span></div><div class="line" id="201356"><span class="nick" style="color:#2e2a4a"><a href="#201356" label="[20:13:56]">&lt;OriansJ&gt;</a></span><span class="message">trivial to do and this patch is looking trivial</span></div><div class="line" id="202700"><span class="nick" style="color:#2e2a4a"><a href="#202700" label="[20:27:00]">&lt;OriansJ&gt;</a></span><span class="message">and patches for M2-Planet supporting \a and \b are now up</span></div><div class="line" id="203113"><span class="nick" style="color:#2e2a4a"><a href="#203113" label="[20:31:13]">&lt;OriansJ&gt;</a></span><span class="message">hmmm how the heck is isspace working in mes-m2?</span></div><div class="line" id="204125"><span class="nick" style="color:#6b8072"><a href="#204125" label="[20:41:25]">&lt;janneke&gt;</a></span><span class="message">OriansJ: looking at my wip-m2 branch in Mes, i don't think i ported isspace yet</span></div><div class="line" id="204217"><span class="nick" style="color:#2e2a4a"><a href="#204217" label="[20:42:17]">&lt;OriansJ&gt;</a></span><span class="message">no worries in_set solves that easily</span></div><div class="line" id="204219"><span class="nick" style="color:#6b8072"><a href="#204219" label="[20:42:19]">&lt;janneke&gt;</a></span><span class="message">that means mes libc only provides isspace for gcc/mescc</span></div><div class="line" id="204234"><span class="nick" style="color:#2e2a4a"><a href="#204234" label="[20:42:34]">&lt;OriansJ&gt;</a></span><span class="message">in_set(c, &quot; \t\n&quot;)</span></div><div class="line" id="205851"><span class="nick" style="color:#2e2a4a"><a href="#205851" label="[20:58:51]">&lt;OriansJ&gt;</a></span><span class="message">and mes_reader.c is now M2-Planet compatible</span></div><div class="line" id="205901"><span class="nick" style="color:#2e2a4a"><a href="#205901" label="[20:59:01]">&lt;OriansJ&gt;</a></span><span class="message">M2-Planet --architecture amd64 -f mes.h -f mes_constants.h -f ../M2-Planet/test/common_amd64/functions/exit.c -f ../M2-Planet/test/common_amd64/functions/malloc.c -f ../M2-Planet/functions/calloc.c -f functions/fdputc.c -f functions/file_print.c -f mes_reader.c</span></div><div class="line" id="205956"><span class="nick" style="color:#2e2a4a"><a href="#205956" label="[20:59:56]">&lt;OriansJ&gt;</a></span><span class="message">that only leaves mes_struct.c, mes_vector.c, mes_strings.c and mes_posix.c</span></div><div class="line" id="210025"><span class="nick" style="color:#2e2a4a"><a href="#210025" label="[21:00:25]">&lt;OriansJ&gt;</a></span><span class="message">but I'm going to take a break for a bit and when I come back, I'll knock those out</span></div><div class="line" id="212455"><span class="nick" style="color:#2e2a4a"><a href="#212455" label="[21:24:55]">&lt;OriansJ&gt;</a></span><span class="message">greetings stikonas</span></div><div class="line" id="212500"><span class="nick" style="color:#8dd3c7"><a href="#212500" label="[21:25:00]">&lt;stikonas&gt;</a></span><span class="message">OriansJ: hi</span></div><div class="line" id="212845"><span class="nick" style="color:#2e2a4a"><a href="#212845" label="[21:28:45]">&lt;OriansJ&gt;</a></span><span class="message">janneke: I think list_to_cstring ends up more problems than good; so I am going to reengineer it's usage to be simpler</span></div><div class="line" id="213317"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado</span></div><div class="line" id="213709"><span class="nick" style="color:#2e2a4a"><a href="#213709" label="[21:37:09]">&lt;OriansJ&gt;</a></span><span class="message">and mes_strings.c is now M2-Planet compatible</span></div><div class="line" id="213725"><span class="nick" style="color:#2e2a4a"><a href="#213725" label="[21:37:25]">&lt;OriansJ&gt;</a></span><span class="message">M2-Planet --architecture amd64 -f mes.h -f mes_constants.h -f ../M2-Planet/test/common_amd64/functions/exit.c -f ../M2-Planet/test/common_amd64/functions/malloc.c -f ../M2-Planet/functions/calloc.c -f mes_strings.c</span></div><div class="line" id="214333"><span class="nick" style="color:#2e2a4a"><a href="#214333" label="[21:43:33]">&lt;OriansJ&gt;</a></span><span class="message">and mes_struct.c is now M2-Planet compatible</span></div><div class="line" id="214339"><span class="nick" style="color:#2e2a4a"><a href="#214339" label="[21:43:39]">&lt;OriansJ&gt;</a></span><span class="message">M2-Planet --architecture amd64 -f mes.h -f mes_constants.h -f ../M2-Planet/test/common_amd64/functions/exit.c -f ../M2-Planet/test/common_amd64/functions/malloc.c -f ../M2-Planet/functions/calloc.c -f mes_struct.c</span></div><div class="line" id="215048"><span class="nick" style="color:#2e2a4a"><a href="#215048" label="[21:50:48]">&lt;OriansJ&gt;</a></span><span class="message">and mes_vector.c is now M2-Planet compatible</span></div><div class="line" id="215054"><span class="nick" style="color:#2e2a4a"><a href="#215054" label="[21:50:54]">&lt;OriansJ&gt;</a></span><span class="message">M2-Planet --architecture amd64 -f mes.h -f mes_constants.h -f ../M2-Planet/test/common_amd64/functions/exit.c -f ../M2-Planet/test/common_amd64/functions/malloc.c -f ../M2-Planet/functions/calloc.c -f mes_vector.c</span></div><div class="line" id="215111"><span class="nick" style="color:#2e2a4a"><a href="#215111" label="[21:51:11]">&lt;OriansJ&gt;</a></span><span class="message">and that just leaves mes_posix.c</span></div><div class="line" id="215218"><span class="nick" style="color:#2e2a4a"><a href="#215218" label="[21:52:18]">&lt;OriansJ&gt;</a></span><span class="message">but I'll hit that later.</span></div><div class="line" id="215510"><span class="nick" style="color:#8dd3c7"><a href="#215510" label="[21:55:10]">&lt;stikonas&gt;</a></span><span class="message">quite a lot of progress today!</span></div><br /></div></body></html>