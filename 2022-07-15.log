<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-07-15.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="185247"><span class="nick">***</span><span class="message notice">onebitboi is now known as onebitboy</span></div><div class="line" id="233818"><span class="nick" style="color:#8dd3c7"><a href="#233818" label="[23:38:18]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I now have hex0.S for uefi/amd64, it works though still needs some optimizations</span></div><div class="line" id="234037"><span class="nick" style="color:#8dd3c7"><a href="#234037" label="[23:40:37]">&lt;stikonas&gt;</a></span><span class="message">quite a lot of uefi overhead at the begining/end of the file <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/amd64/Development/hex0.S">https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/amd64/Development/hex0.S</a> </span></div><div class="line" id="234051"><span class="nick" style="color:#8dd3c7"><a href="#234051" label="[23:40:51]">&lt;stikonas&gt;</a></span><span class="message">but middle of the file is basically direct copy/paste from stage0-posix</span></div><div class="line" id="234113"><span class="nick" style="color:#8dd3c7"><a href="#234113" label="[23:41:13]">&lt;stikonas&gt;</a></span><span class="message">and those uefi bits will mostly be the same in more complicated programs, i.e. in cc_amd64</span></div><div class="line" id="234419"><span class="nick" style="color:#2e2a4a"><a href="#234419" label="[23:44:19]">&lt;oriansj&gt;</a></span><span class="message">We could simplify the read/write and remove the size and input/output labels with a minor tweak</span></div><div class="line" id="234701"><span class="nick" style="color:#8dd3c7"><a href="#234701" label="[23:47:01]">&lt;stikonas&gt;</a></span><span class="message">and there are some stack optimizations that can be done</span></div><div class="line" id="234714"><span class="nick" style="color:#2e2a4a"><a href="#234714" label="[23:47:14]">&lt;oriansj&gt;</a></span><span class="message">copy the stack pointer into rdx, push 1 onto the stack, copy the stack pointer into r8 and do a push. then we pop to get the byte and pop again to see how many are read</span></div><div class="line" id="234819"><span class="nick" style="color:#8dd3c7"><a href="#234819" label="[23:48:19]">&lt;stikonas&gt;</a></span><span class="message">I first wanted to get something working and then do optimizations as it's much easier to debug</span></div><div class="line" id="234845"><span class="nick" style="color:#2e2a4a"><a href="#234845" label="[23:48:45]">&lt;oriansj&gt;</a></span><span class="message">any reason why you do: sub  rsp, 32 and add  rsp, 32 ?? is it because the uefi expects a certain stack allocated?</span></div><div class="line" id="234907"><span class="nick" style="color:#8dd3c7"><a href="#234907" label="[23:49:07]">&lt;stikonas&gt;</a></span><span class="message">it does although I'm not sure how much if there are fewer than 4 arguments</span></div><div class="line" id="234951"><span class="nick" style="color:#8dd3c7"><a href="#234951" label="[23:49:51]">&lt;stikonas&gt;</a></span><span class="message">calling convention states that you push first 4 arguments to rcx, rdx, r8, r9 but you also need to allocated shadow stack space that uefi function can use</span></div><div class="line" id="235017"><span class="nick" style="color:#8dd3c7"><a href="#235017" label="[23:50:17]">&lt;stikonas&gt;</a></span><span class="message">maybe we can allocate fewer than 32  when there are fewer arguments, but I'm not sure</span></div><div class="line" id="235112"><span class="nick" style="color:#8dd3c7"><a href="#235112" label="[23:51:12]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://docs.microsoft.com/en-us/cpp/build/x64-calling-convention?view=msvc-170">https://docs.microsoft.com/en-us/cpp/build/x64-calling-convention?view=msvc-170</a> </span></div><div class="line" id="235121"><span class="nick" style="color:#8dd3c7"><a href="#235121" label="[23:51:21]">&lt;stikonas&gt;</a></span><span class="message">hmm, I think we can allocate just 24 if we have 3 arguments</span></div><div class="line" id="235129"><span class="nick" style="color:#2e2a4a"><a href="#235129" label="[23:51:29]">&lt;oriansj&gt;</a></span><span class="message">well we can do a test where we see if uefi overwrites anything on the stack; by pushing 0,1,2,3,4,5 and then on the return popping and comparing the values</span></div><div class="line" id="235211"><span class="nick" style="color:#8dd3c7"><a href="#235211" label="[23:52:11]">&lt;stikonas&gt;</a></span><span class="message">well, it might be implementation specific...</span></div><div class="line" id="235224"><span class="nick" style="color:#2e2a4a"><a href="#235224" label="[23:52:24]">&lt;oriansj&gt;</a></span><span class="message">good point</span></div><div class="line" id="235227"><span class="nick" style="color:#8dd3c7"><a href="#235227" label="[23:52:27]">&lt;stikonas&gt;</a></span><span class="message">but now I think if we have 1 argument, then allocating 8 should be enough</span></div><div class="line" id="235248"><span class="nick" style="color:#8dd3c7"><a href="#235248" label="[23:52:48]">&lt;stikonas&gt;</a></span><span class="message">it seems that space is for uefi function to save argument variables if it wants</span></div><div class="line" id="235304"><span class="nick" style="color:#2e2a4a"><a href="#235304" label="[23:53:04]">&lt;oriansj&gt;</a></span><span class="message">well 8 arguments for a 64bit register size would be 64bytes not 32</span></div><div class="line" id="235438"><span class="nick" style="color:#8dd3c7"><a href="#235438" label="[23:54:38]">&lt;stikonas&gt;</a></span><span class="message">well, 32 is for 4 arguments...</span></div><div class="line" id="235457"><span class="nick" style="color:#2e2a4a"><a href="#235457" label="[23:54:57]">&lt;oriansj&gt;</a></span><span class="message">true</span></div><div class="line" id="235509"><span class="nick" style="color:#8dd3c7"><a href="#235509" label="[23:55:09]">&lt;stikonas&gt;</a></span><span class="message">I think I can also remove stack deallocation after calling system-&gt;boot-&gt;exit()</span></div><div class="line" id="235514"><span class="nick" style="color:#8dd3c7"><a href="#235514" label="[23:55:14]">&lt;stikonas&gt;</a></span><span class="message">I don't think it's ever reached</span></div><div class="line" id="235615"><span class="nick" style="color:#2e2a4a"><a href="#235615" label="[23:56:15]">&lt;oriansj&gt;</a></span><span class="message">how could it be reached? unless something crazy is done for termination</span></div><div class="line" id="235637"><span class="nick" style="color:#8dd3c7"><a href="#235637" label="[23:56:37]">&lt;stikonas&gt;</a></span><span class="message">yeah, I removed it here...</span></div><div class="line" id="235644"><span class="nick" style="color:#8dd3c7"><a href="#235644" label="[23:56:44]">&lt;stikonas&gt;</a></span><span class="message">it's copy paste  from earlier</span></div><div class="line" id="235655"><span class="nick" style="color:#8dd3c7"><a href="#235655" label="[23:56:55]">&lt;stikonas&gt;</a></span><span class="message">initially I had just ret in the main function</span></div><div class="line" id="235727"><span class="nick" style="color:#8dd3c7"><a href="#235727" label="[23:57:27]">&lt;stikonas&gt;</a></span><span class="message">but then I had to switch to exit() since I moved terminate into a separate function</span></div><div class="line" id="235808"><span class="nick" style="color:#8dd3c7"><a href="#235808" label="[23:58:08]">&lt;stikonas&gt;</a></span><span class="message">or rather read_byte was moved to a separate function and it jumps to terminate</span></div><div class="line" id="235809"><span class="nick" style="color:#2e2a4a"><a href="#235809" label="[23:58:09]">&lt;oriansj&gt;</a></span><span class="message">well if a return from main works, doing a pop then return would work too</span></div><div class="line" id="235825"><span class="nick" style="color:#8dd3c7"><a href="#235825" label="[23:58:25]">&lt;stikonas&gt;</a></span><span class="message">yeah, I can try that</span></div><div class="line" id="235913"><span class="nick" style="color:#2e2a4a"><a href="#235913" label="[23:59:13]">&lt;oriansj&gt;</a></span><span class="message">as call just pushes the previous address onto the stack and jumps to the target address. So popping will clear it off the stack and the return will use whatever is on the top of the stack</span></div><br /></div></body></html>