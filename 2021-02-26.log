<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-02-26.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="001506"><span class="nick" style="color:#8dd3c7"><a href="#001506" label="[00:15:06]">&lt;bauen1&gt;</a></span><span class="message">fossy: ironic as in: you guys are the first to start complaining once something achieves &quot;self hosting&quot;</span></div><div class="line" id="001556"><span class="nick" style="color:#8dd3c7"><a href="#001556" label="[00:15:56]">&lt;bauen1&gt;</a></span><span class="message">as long as the documentation is readable without processing it really shouldn't be an issue, just when you can't read documentation without additional tools does it become an issue</span></div><div class="line" id="001632"><span class="nick" style="color:#2e2a4a"><a href="#001632" label="[00:16:32]">&lt;fossy&gt;</a></span><span class="message">bauen1: yeah, lol</span></div><div class="line" id="002045"><span class="nick" style="color:#6b8072"><a href="#002045" label="[00:20:45]">&lt;OriansJ`&gt;</a></span><span class="message">bauen1: well we are probably the only people actually truly self-hosting anything.</span></div><div class="line" id="002059"><span class="nick" style="color:#6b8072"><a href="#002059" label="[00:20:59]">&lt;OriansJ`&gt;</a></span><span class="message">everyone else is larping with binaries</span></div><div class="line" id="002100"><span class="nick" style="color:#2e2a4a"><a href="#002100" label="[00:21:00]">&lt;fossy&gt;</a></span><span class="message">stikonas: opinions on splitting out the parts to a seperate file</span></div><div class="line" id="002122"><span class="nick" style="color:#2e2a4a"><a href="#002122" label="[00:21:22]">&lt;fossy&gt;</a></span><span class="message">i honestly think that the &quot;part&quot; descriptions probably dont belong in the readme anyway</span></div><div class="line" id="002549"><span class="nick" style="color:#80b1d3"><a href="#002549" label="[00:25:49]">&lt;stikonas&gt;</a></span><span class="message">yeah, we can split them into a separate file</span></div><div class="line" id="002556"><span class="nick" style="color:#80b1d3"><a href="#002556" label="[00:25:56]">&lt;stikonas&gt;</a></span><span class="message">I think with restructured text you can do that</span></div><div class="line" id="002617"><span class="nick" style="color:#80b1d3"><a href="#002617" label="[00:26:17]">&lt;stikonas&gt;</a></span><span class="message">or at least with sphinx (that uses rst) you can do that</span></div><div class="line" id="002704"><span class="nick" style="color:#80b1d3"><a href="#002704" label="[00:27:04]">&lt;stikonas&gt;</a></span><span class="message">fossy: so interactive bash seems to work when chrooting...</span></div><div class="line" id="002711"><span class="nick" style="color:#80b1d3"><a href="#002711" label="[00:27:11]">&lt;stikonas&gt;</a></span><span class="message">no need for busybox anymore</span></div><div class="line" id="002720"><span class="nick" style="color:#80b1d3"><a href="#002720" label="[00:27:20]">&lt;stikonas&gt;</a></span><span class="message">(that's with pder's commit)</span></div><div class="line" id="002737"><span class="nick" style="color:#80b1d3"><a href="#002737" label="[00:27:37]">&lt;stikonas&gt;</a></span><span class="message">although, I still need to try it on qemu</span></div><div class="line" id="003346"><span class="nick" style="color:#6b8072"><a href="#003346" label="[00:33:46]">&lt;OriansJ`&gt;</a></span><span class="message">I find org-mode allows for fast and easy restructuring.</span></div><div class="line" id="003424"><span class="nick" style="color:#6b8072"><a href="#003424" label="[00:34:24]">&lt;OriansJ`&gt;</a></span><span class="message">alt-up, alt-down, alt-left and alt-right</span></div><div class="line" id="004556"><span class="nick" style="color:#80b1d3"><a href="#004556" label="[00:45:56]">&lt;stikonas&gt;</a></span><span class="message">yeah, github also supports org-mode too...</span></div><div class="line" id="004647"><span class="nick" style="color:#80b1d3"><a href="#004647" label="[00:46:47]">&lt;stikonas&gt;</a></span><span class="message">although, what github can render maybe shouldn't be deciding factor...</span></div><div class="line" id="004918"><span class="nick" style="color:#80b1d3"><a href="#004918" label="[00:49:18]">&lt;stikonas&gt;</a></span><span class="message">by the way, I also have a copy of live-bootstrap here <a rel="nofollow" href="https://git.stikonas.eu/andrius/live-bootstrap">https://git.stikonas.eu/andrius/live-bootstrap</a>  :D</span></div><div class="line" id="005727"><span class="nick">***</span><span class="message notice">remexre_ is now known as remexre</span></div><div class="line" id="005742"><span class="nick" style="color:#80b1d3"><a href="#005742" label="[00:57:42]">&lt;stikonas&gt;</a></span><span class="message">oh we already have /dev/console in qemu live-bootstrap</span></div><div class="line" id="010024"><span class="nick" style="color:#80b1d3"><a href="#010024" label="[01:00:24]">&lt;stikonas&gt;</a></span><span class="message">maybe I should conditionally create device nodes</span></div><div class="line" id="010026"><span class="nick" style="color:#80b1d3"><a href="#010026" label="[01:00:26]">&lt;stikonas&gt;</a></span><span class="message">if they don't exist</span></div><div class="line" id="013606"><span class="nick" style="color:#80b1d3"><a href="#013606" label="[01:36:06]">&lt;stikonas&gt;</a></span><span class="message">fossy: ok, so I've got shell in qemu now</span></div><div class="line" id="014256"><span class="nick" style="color:#80b1d3"><a href="#014256" label="[01:42:56]">&lt;stikonas&gt;</a></span><span class="message">fossy: pder: so I've opened autoconf PR <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/52">https://github.com/fosslinux/live-bootstrap/pull/52</a> </span></div><div class="line" id="015426"><span class="nick" style="color:#6d2462"><a href="#015426" label="[01:54:26]">&lt;Hagfish&gt;</a></span><span class="message">getting to the stage of having an interactive shell, and versions of perl, really feels like civilisation hitting the industrial revolution</span></div><div class="line" id="015533"><span class="nick" style="color:#6d2462"><a href="#015533" label="[01:55:33]">&lt;Hagfish&gt;</a></span><span class="message">there are some exciting things still to be built, but it will hopefully require less sweat :)</span></div><div class="line" id="015607"><span class="nick" style="color:#80b1d3"><a href="#015607" label="[01:56:07]">&lt;stikonas&gt;</a></span><span class="message">and don't forget that we have a modern C library</span></div><div class="line" id="015613"><span class="nick" style="color:#6d2462"><a href="#015613" label="[01:56:13]">&lt;Hagfish&gt;</a></span><span class="message">yeah, nice</span></div><div class="line" id="015621"><span class="nick" style="color:#80b1d3"><a href="#015621" label="[01:56:21]">&lt;stikonas&gt;</a></span><span class="message">hopefully binutils too</span></div><div class="line" id="015628"><span class="nick" style="color:#80b1d3"><a href="#015628" label="[01:56:28]">&lt;stikonas&gt;</a></span><span class="message">that is really lacking right now</span></div><div class="line" id="015642"><span class="nick" style="color:#6d2462"><a href="#015642" label="[01:56:42]">&lt;Hagfish&gt;</a></span><span class="message">(i don't know enough about C to understand all the implications of that, but it does feel essential)</span></div><div class="line" id="015658"><span class="nick" style="color:#80b1d3"><a href="#015658" label="[01:56:58]">&lt;stikonas&gt;</a></span><span class="message">well, C library is all those C functions that you take for granted...</span></div><div class="line" id="015720"><span class="nick" style="color:#80b1d3"><a href="#015720" label="[01:57:20]">&lt;stikonas&gt;</a></span><span class="message">string manipulation, maths, file operations, etc...</span></div><div class="line" id="015737"><span class="nick" style="color:#6d2462"><a href="#015737" label="[01:57:37]">&lt;Hagfish&gt;</a></span><span class="message">doesn't every C program rely on those?</span></div><div class="line" id="015747"><span class="nick" style="color:#80b1d3"><a href="#015747" label="[01:57:47]">&lt;stikonas&gt;</a></span><span class="message">well, almost</span></div><div class="line" id="015818"><span class="nick" style="color:#80b1d3"><a href="#015818" label="[01:58:18]">&lt;stikonas&gt;</a></span><span class="message">baremetal ones don't, or something that directly calls kernel syscalls does not have to use those</span></div><div class="line" id="015839"><span class="nick" style="color:#6d2462"><a href="#015839" label="[01:58:39]">&lt;Hagfish&gt;</a></span><span class="message">so what were previous steps using?</span></div><div class="line" id="015848"><span class="nick" style="color:#6d2462"><a href="#015848" label="[01:58:48]">&lt;Hagfish&gt;</a></span><span class="message">a pre-modern C library, or directly calling stuff?</span></div><div class="line" id="015911"><span class="nick" style="color:#80b1d3"><a href="#015911" label="[01:59:11]">&lt;stikonas&gt;</a></span><span class="message">well, early enough direct syscalls, M2-Planet has very minimal C library, OriansJ` is expanding it</span></div><div class="line" id="015920"><span class="nick" style="color:#80b1d3"><a href="#015920" label="[01:59:20]">&lt;stikonas&gt;</a></span><span class="message">later for quite some time we use much bigger mes libc</span></div><div class="line" id="015939"><span class="nick" style="color:#80b1d3"><a href="#015939" label="[01:59:39]">&lt;stikonas&gt;</a></span><span class="message">it's still much smaller than glibc or musl</span></div><div class="line" id="015952"><span class="nick" style="color:#6d2462"><a href="#015952" label="[01:59:52]">&lt;Hagfish&gt;</a></span><span class="message">so how does musl make things easier?</span></div><div class="line" id="020002"><span class="nick" style="color:#80b1d3"><a href="#020002" label="[02:00:02]">&lt;stikonas&gt;</a></span><span class="message">it has more functions that some programs use</span></div><div class="line" id="020019"><span class="nick" style="color:#80b1d3"><a href="#020019" label="[02:00:19]">&lt;stikonas&gt;</a></span><span class="message">e.g. interactive bash needs termios.h</span></div><div class="line" id="020028"><span class="nick" style="color:#80b1d3"><a href="#020028" label="[02:00:28]">&lt;stikonas&gt;</a></span><span class="message">which musl ships</span></div><div class="line" id="020031"><span class="nick" style="color:#6d2462"><a href="#020031" label="[02:00:31]">&lt;Hagfish&gt;</a></span><span class="message">okay, i'm starting to get it</span></div><div class="line" id="020035"><span class="nick" style="color:#80b1d3"><a href="#020035" label="[02:00:35]">&lt;stikonas&gt;</a></span><span class="message">and implements functions defined there</span></div><div class="line" id="020043"><span class="nick" style="color:#80b1d3"><a href="#020043" label="[02:00:43]">&lt;stikonas&gt;</a></span><span class="message">mes libc doesn't have that part</span></div><div class="line" id="020107"><span class="nick" style="color:#80b1d3"><a href="#020107" label="[02:01:07]">&lt;stikonas&gt;</a></span><span class="message">so C library is the next most important thing after compiler</span></div><div class="line" id="020152"><span class="nick" style="color:#6b8072"><a href="#020152" label="[02:01:52]">&lt;OriansJ`&gt;</a></span><span class="message">Hagfish: direct syscalls or in the NATIVE ports, directly talking to hardware devices</span></div><div class="line" id="020153"><span class="nick" style="color:#6d2462"><a href="#020153" label="[02:01:53]">&lt;Hagfish&gt;</a></span><span class="message">yeah, i guess it's like saying that to compile a piece of source code you also need to compile all its dependent libraries, except this library is a bit more special because it is used by so much</span></div><div class="line" id="020212"><span class="nick" style="color:#80b1d3"><a href="#020212" label="[02:02:12]">&lt;stikonas&gt;</a></span><span class="message">but I guess direct syscalls or directly talking to hardware devices is less portable</span></div><div class="line" id="020218"><span class="nick" style="color:#80b1d3"><a href="#020218" label="[02:02:18]">&lt;stikonas&gt;</a></span><span class="message">libc abstracs it all out</span></div><div class="line" id="020221"><span class="nick" style="color:#6d2462"><a href="#020221" label="[02:02:21]">&lt;Hagfish&gt;</a></span><span class="message">nice</span></div><div class="line" id="020256"><span class="nick" style="color:#80b1d3"><a href="#020256" label="[02:02:56]">&lt;stikonas&gt;</a></span><span class="message">well, it's more like to compile a piece of source code you need to compile c library first</span></div><div class="line" id="020304"><span class="nick" style="color:#80b1d3"><a href="#020304" label="[02:03:04]">&lt;stikonas&gt;</a></span><span class="message">since almost everything uses it</span></div><div class="line" id="020305"><span class="nick" style="color:#6b8072"><a href="#020305" label="[02:03:05]">&lt;OriansJ`&gt;</a></span><span class="message">stikonas: indeed, the C standard libraries (and syscalls) hide a boatload of details and make porting fast and efficient</span></div><div class="line" id="020334"><span class="nick" style="color:#80b1d3"><a href="#020334" label="[02:03:34]">&lt;stikonas&gt;</a></span><span class="message">yeah, so you only have to do porting once..</span></div><div class="line" id="020342"><span class="nick" style="color:#80b1d3"><a href="#020342" label="[02:03:42]">&lt;stikonas&gt;</a></span><span class="message">or at least once per C library</span></div><div class="line" id="020352"><span class="nick" style="color:#80b1d3"><a href="#020352" label="[02:03:52]">&lt;stikonas&gt;</a></span><span class="message">we might need to build a few of them</span></div><div class="line" id="020352"><span class="nick" style="color:#6d2462"><a href="#020352" label="[02:03:52]">&lt;Hagfish&gt;</a></span><span class="message">is it meaningful to ask about the relative complexity of compiling, say, musl versus something like bash?</span></div><div class="line" id="020359"><span class="nick" style="color:#6b8072"><a href="#020359" label="[02:03:59]">&lt;OriansJ`&gt;</a></span><span class="message">well M2-Planet doesn't need precompiled libraries and neither does MesCC due to the nature of M1+hex2</span></div><div class="line" id="020422"><span class="nick" style="color:#80b1d3"><a href="#020422" label="[02:04:22]">&lt;stikonas&gt;</a></span><span class="message">Hagfish: depends on the stage. fossy wrote our own makefiles for bash</span></div><div class="line" id="020434"><span class="nick" style="color:#80b1d3"><a href="#020434" label="[02:04:34]">&lt;stikonas&gt;</a></span><span class="message">it was quite a bit of work I guess</span></div><div class="line" id="020440"><span class="nick" style="color:#6b8072"><a href="#020440" label="[02:04:40]">&lt;OriansJ`&gt;</a></span><span class="message">Hagfish: yes entirely if one is thinking of C compiler features required.</span></div><div class="line" id="020501"><span class="nick" style="color:#80b1d3"><a href="#020501" label="[02:05:01]">&lt;stikonas&gt;</a></span><span class="message">Hagfish:  for musl, we could already use their build system, but had to patch musl a bit to build</span></div><div class="line" id="020518"><span class="nick" style="color:#6d2462"><a href="#020518" label="[02:05:18]">&lt;Hagfish&gt;</a></span><span class="message">hmm, interesting, thank you</span></div><div class="line" id="020519"><span class="nick" style="color:#80b1d3"><a href="#020519" label="[02:05:19]">&lt;stikonas&gt;</a></span><span class="message">so musl was more tricky in terms of things we had to change</span></div><div class="line" id="020529"><span class="nick" style="color:#80b1d3"><a href="#020529" label="[02:05:29]">&lt;stikonas&gt;</a></span><span class="message">but I'm not sure about work hours spend...</span></div><div class="line" id="020531"><span class="nick" style="color:#80b1d3"><a href="#020531" label="[02:05:31]">&lt;stikonas&gt;</a></span><span class="message">spent</span></div><div class="line" id="020540"><span class="nick" style="color:#80b1d3"><a href="#020540" label="[02:05:40]">&lt;stikonas&gt;</a></span><span class="message">rebuilding bash is now quite easy though</span></div><div class="line" id="020549"><span class="nick" style="color:#6d2462"><a href="#020549" label="[02:05:49]">&lt;Hagfish&gt;</a></span><span class="message">sounds like slightly different approaches to each piece of software</span></div><div class="line" id="020604"><span class="nick" style="color:#6d2462"><a href="#020604" label="[02:06:04]">&lt;Hagfish&gt;</a></span><span class="message">at such a low level, i guess everything is a special case in some way</span></div><div class="line" id="020613"><span class="nick" style="color:#80b1d3"><a href="#020613" label="[02:06:13]">&lt;stikonas&gt;</a></span><span class="message">now it's basically just <a rel="nofollow" href="https://github.com/pder/live-bootstrap/commit/7feaf49d69ae09f28b913d9613ac840fad83f838#diff-5209393455fa29a4a1082fbaeeab3be01cef862d67180e3c0a22d7af930b2461">https://github.com/pder/live-bootstrap/commit/7feaf49d69ae09f28b913d9613ac840fad83f838#diff-5209393455fa29a4a1082fbaeeab3be01cef862d67180e3c0a22d7af930b2461</a> </span></div><div class="line" id="020643"><span class="nick" style="color:#6d2462"><a href="#020643" label="[02:06:43]">&lt;Hagfish&gt;</a></span><span class="message">that looks very auditable :)</span></div><div class="line" id="020755"><span class="nick" style="color:#80b1d3"><a href="#020755" label="[02:07:55]">&lt;stikonas&gt;</a></span><span class="message">let me find first bash build script</span></div><div class="line" id="020800"><span class="nick" style="color:#6d2462"><a href="#020800" label="[02:08:00]">&lt;Hagfish&gt;</a></span><span class="message">(assuming the .tar file itself has been audited, and the checksum checked)</span></div><div class="line" id="020839"><span class="nick" style="color:#80b1d3"><a href="#020839" label="[02:08:39]">&lt;stikonas&gt;</a></span><span class="message">we check checksums...</span></div><div class="line" id="020849"><span class="nick" style="color:#80b1d3"><a href="#020849" label="[02:08:49]">&lt;stikonas&gt;</a></span><span class="message">although we don't check whole tar source code...</span></div><div class="line" id="020902"><span class="nick" style="color:#80b1d3"><a href="#020902" label="[02:09:02]">&lt;stikonas&gt;</a></span><span class="message">it's just historic tarball release...</span></div><div class="line" id="020903"><span class="nick" style="color:#80b1d3"><a href="#020903" label="[02:09:03]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://git.stikonas.eu/andrius/live-bootstrap/src/branch/master/sysa/bash-2.05b/bash-2.05b.kaem">https://git.stikonas.eu/andrius/live-bootstrap/src/branch/master/sysa/bash-2.05b/bash-2.05b.kaem</a> </span></div><div class="line" id="020913"><span class="nick" style="color:#6b8072"><a href="#020913" label="[02:09:13]">&lt;OriansJ`&gt;</a></span><span class="message">bootstrapping is a very different game when you have a C compiler able to build GCC (TCC) and a reasonably well tested libc (musl) to work with.</span></div><div class="line" id="020921"><span class="nick" style="color:#80b1d3"><a href="#020921" label="[02:09:21]">&lt;stikonas&gt;</a></span><span class="message">and three make files for bash <a rel="nofollow" href="https://git.stikonas.eu/andrius/live-bootstrap/src/branch/master/sysa/bash-2.05b/mk">https://git.stikonas.eu/andrius/live-bootstrap/src/branch/master/sysa/bash-2.05b/mk</a> </span></div><div class="line" id="020940"><span class="nick" style="color:#80b1d3"><a href="#020940" label="[02:09:40]">&lt;stikonas&gt;</a></span><span class="message">yeah, it's now much easier than early stages</span></div><div class="line" id="021001"><span class="nick" style="color:#80b1d3"><a href="#021001" label="[02:10:01]">&lt;stikonas&gt;</a></span><span class="message">much closer to distro packaging at this point</span></div><div class="line" id="021018"><span class="nick" style="color:#6b8072"><a href="#021018" label="[02:10:18]">&lt;OriansJ`&gt;</a></span><span class="message">plus more people to help address problems (TCC and msul developers)</span></div><div class="line" id="021040"><span class="nick" style="color:#80b1d3"><a href="#021040" label="[02:10:40]">&lt;stikonas&gt;</a></span><span class="message">yeah, I guess so.</span></div><div class="line" id="021048"><span class="nick" style="color:#80b1d3"><a href="#021048" label="[02:10:48]">&lt;stikonas&gt;</a></span><span class="message">At least easier to find stuff online if you hit some problem</span></div><div class="line" id="021057"><span class="nick" style="color:#80b1d3"><a href="#021057" label="[02:10:57]">&lt;stikonas&gt;</a></span><span class="message">somebody migth have hit it before</span></div><div class="line" id="021108"><span class="nick" style="color:#80b1d3"><a href="#021108" label="[02:11:08]">&lt;stikonas&gt;</a></span><span class="message">even if we don't directly contact their developers</span></div><div class="line" id="021121"><span class="nick" style="color:#6b8072"><a href="#021121" label="[02:11:21]">&lt;OriansJ`&gt;</a></span><span class="message">indeed</span></div><div class="line" id="021133"><span class="nick" style="color:#6d2462"><a href="#021133" label="[02:11:33]">&lt;Hagfish&gt;</a></span><span class="message">i hadn't even thought about how &quot;googleable&quot; these problems are</span></div><div class="line" id="021209"><span class="nick" style="color:#6b8072"><a href="#021209" label="[02:12:09]">&lt;OriansJ`&gt;</a></span><span class="message">Hagfish: It is kind of this is water sort of perspective shift</span></div><div class="line" id="021210"><span class="nick" style="color:#6d2462"><a href="#021210" label="[02:12:10]">&lt;Hagfish&gt;</a></span><span class="message">are you hitting issues that came up 20 years ago, with solutions from back then?</span></div><div class="line" id="021311"><span class="nick" style="color:#6b8072"><a href="#021311" label="[02:13:11]">&lt;OriansJ`&gt;</a></span><span class="message">Low level stuff -&gt; No help anywhere and you have to figure it out all by yourself. Current stages -&gt; bet there is a solution on stackoverflow</span></div><div class="line" id="021321"><span class="nick" style="color:#6d2462"><a href="#021321" label="[02:13:21]">&lt;Hagfish&gt;</a></span><span class="message">wow, nice</span></div><div class="line" id="021404"><span class="nick" style="color:#6b8072"><a href="#021404" label="[02:14:04]">&lt;OriansJ`&gt;</a></span><span class="message">So once M2libc reaches feature parity with Mes libc; it'll stop growing</span></div><div class="line" id="021431"><span class="nick" style="color:#6d2462"><a href="#021431" label="[02:14:31]">&lt;Hagfish&gt;</a></span><span class="message">yeah, i was having a hard time visualising how all these libs telescope into each other</span></div><div class="line" id="021433"><span class="nick" style="color:#80b1d3"><a href="#021433" label="[02:14:33]">&lt;stikonas&gt;</a></span><span class="message">is there any chance M2-Planet can build tcc at some point?</span></div><div class="line" id="021444"><span class="nick" style="color:#80b1d3"><a href="#021444" label="[02:14:44]">&lt;stikonas&gt;</a></span><span class="message">or is mes/mescc way easier</span></div><div class="line" id="021502"><span class="nick" style="color:#80b1d3"><a href="#021502" label="[02:15:02]">&lt;stikonas&gt;</a></span><span class="message">(questions since mes seems to be hard to build from m2-planet)</span></div><div class="line" id="021513"><span class="nick" style="color:#6b8072"><a href="#021513" label="[02:15:13]">&lt;OriansJ`&gt;</a></span><span class="message">stikonas: Well M3 was a plan to turn TCC into something M2-Planet could compile directly</span></div><div class="line" id="021546"><span class="nick" style="color:#6b8072"><a href="#021546" label="[02:15:46]">&lt;OriansJ`&gt;</a></span><span class="message">breaking the C preprocessor and Assembly and Linking into seperate programs to help MesCC.</span></div><div class="line" id="021609"><span class="nick" style="color:#80b1d3"><a href="#021609" label="[02:16:09]">&lt;stikonas&gt;</a></span><span class="message">Hagfish: although, I don't think I found many problems I hit on SO or google or ddg...</span></div><div class="line" id="021636"><span class="nick" style="color:#6b8072"><a href="#021636" label="[02:16:36]">&lt;OriansJ`&gt;</a></span><span class="message">That way MesCC could leverage binutils for development and standard operations but M3-* pieces for bootstrapping</span></div><div class="line" id="021650"><span class="nick" style="color:#80b1d3"><a href="#021650" label="[02:16:50]">&lt;stikonas&gt;</a></span><span class="message">I found exact problem on mailing list a few years ago (building musl with tcc was failing) but not answers. But I managed to solve it myself</span></div><div class="line" id="021700"><span class="nick" style="color:#80b1d3"><a href="#021700" label="[02:17:00]">&lt;stikonas&gt;</a></span><span class="message">s/not/no/</span></div><div class="line" id="021821"><span class="nick" style="color:#6b8072"><a href="#021821" label="[02:18:21]">&lt;OriansJ`&gt;</a></span><span class="message">Hagfish: short version is up until M2-Planet, there is no Libc. Then M2-Planet bootstraps M2libc to become faster. and then M2libc is supposed to become the libc for everything until musl libc is bootstrapped.</span></div><div class="line" id="022000"><span class="nick" style="color:#6b8072"><a href="#022000" label="[02:20:00]">&lt;OriansJ`&gt;</a></span><span class="message">which reminds me, we probably need to add testing to M2libc (GCC+M2-Planet)</span></div><div class="line" id="022019"><span class="nick" style="color:#80b1d3"><a href="#022019" label="[02:20:19]">&lt;stikonas&gt;</a></span><span class="message">well, tests are always good. Not the most fun thing to write though</span></div><div class="line" id="022043"><span class="nick" style="color:#6b8072"><a href="#022043" label="[02:20:43]">&lt;OriansJ`&gt;</a></span><span class="message">stikonas: yeah is it kinda a problem in bootstrapping.</span></div><div class="line" id="022116"><span class="nick" style="color:#6b8072"><a href="#022116" label="[02:21:16]">&lt;OriansJ`&gt;</a></span><span class="message">tests keep things functional while features are grown or architectural changes are done.</span></div><div class="line" id="022343"><span class="nick" style="color:#6b8072"><a href="#022343" label="[02:23:43]">&lt;OriansJ`&gt;</a></span><span class="message">but it is just work and hard to inspire people to do it.</span></div><div class="line" id="022636"><span class="nick" style="color:#80b1d3"><a href="#022636" label="[02:26:36]">&lt;stikonas&gt;</a></span><span class="message">in this sense scripting work (live-bootstrap) is much easier to test. It basically is its own test... On the other hand if you tweak compiler to fix a problem, something else might break without being noticed</span></div><div class="line" id="022639"><span class="nick" style="color:#6b8072"><a href="#022639" label="[02:26:39]">&lt;OriansJ`&gt;</a></span><span class="message">We honestly got lucky with Matt enjoying nyacc and janneke wanting to do a C compiler in scheme. Otherwise we would have been stuck with M2-Planet (mescc-tools missing blood-elf and janneke's %hex2&gt;enhancement)</span></div><div class="line" id="023142"><span class="nick" style="color:#6b8072"><a href="#023142" label="[02:31:42]">&lt;OriansJ`&gt;</a></span><span class="message">but yes testing needs to become a more continuous activity as we grow into a more mature group. In all of our pieces.</span></div><div class="line" id="023217"><span class="nick" style="color:#6b8072"><a href="#023217" label="[02:32:17]">&lt;OriansJ`&gt;</a></span><span class="message">perhaps siraben can help with CI like they did with blynn-compiler for live-bootstrap</span></div><div class="line" id="023317"><span class="nick" style="color:#6d2462"><a href="#023317" label="[02:33:17]">&lt;Hagfish&gt;</a></span><span class="message">are there existing test suites out there that can be reused?  (either standalone projects, or tests in other projects that could be run against the code from this project)</span></div><div class="line" id="023514"><span class="nick" style="color:#6b8072"><a href="#023514" label="[02:35:14]">&lt;OriansJ`&gt;</a></span><span class="message">Hagfish: well the various pieces should be 100% reproducible so in theory one needs only to test and record the SHA256SUM (or any checksum really) of the functional binaries</span></div><div class="line" id="023557"><span class="nick" style="color:#6b8072"><a href="#023557" label="[02:35:57]">&lt;OriansJ`&gt;</a></span><span class="message">So if the binary checksum changes, it just needs to be tested (probably against its own test suite)</span></div><div class="line" id="023611"><span class="nick" style="color:#80b1d3"><a href="#023611" label="[02:36:11]">&lt;stikonas&gt;</a></span><span class="message">well, that's what we do in live-bootstrap now</span></div><div class="line" id="023629"><span class="nick" style="color:#6d2462"><a href="#023629" label="[02:36:29]">&lt;Hagfish&gt;</a></span><span class="message">yeah, good point, each stage that is built should already have its own tests</span></div><div class="line" id="023633"><span class="nick" style="color:#80b1d3"><a href="#023633" label="[02:36:33]">&lt;stikonas&gt;</a></span><span class="message">stuff that is built is hashed and compared</span></div><div class="line" id="023712"><span class="nick" style="color:#80b1d3"><a href="#023712" label="[02:37:12]">&lt;stikonas&gt;</a></span><span class="message">so far I only had to tweak perl a bit to restore reproducibility, everything else was reproducible out of box</span></div><div class="line" id="023721"><span class="nick" style="color:#80b1d3"><a href="#023721" label="[02:37:21]">&lt;stikonas&gt;</a></span><span class="message">in perl I had to undefine __DATE__</span></div><div class="line" id="023824"><span class="nick" style="color:#80b1d3"><a href="#023824" label="[02:38:24]">&lt;stikonas&gt;</a></span><span class="message">although, the hashing is more manual in live-bootstrap... Guix basically hashes everything</span></div><div class="line" id="023835"><span class="nick" style="color:#6b8072"><a href="#023835" label="[02:38:35]">&lt;OriansJ`&gt;</a></span><span class="message">stikonas: perhaps reach out to the reproducible side to perhaps find other possible reproducible issues with it?</span></div><div class="line" id="023917"><span class="nick" style="color:#80b1d3"><a href="#023917" label="[02:39:17]">&lt;stikonas&gt;</a></span><span class="message">hmm, what else can go wrong with reproducibility?</span></div><div class="line" id="024132"><span class="nick" style="color:#6b8072"><a href="#024132" label="[02:41:32]">&lt;OriansJ`&gt;</a></span><span class="message">well the short list is usually: time stamps, locales, floating point, build paths, optimizations (Usually build machine architecture related), user IDs, system names and probably more that I am forgetting at this moment.</span></div><div class="line" id="024138"><span class="nick" style="color:#80b1d3"><a href="#024138" label="[02:41:38]">&lt;stikonas&gt;</a></span><span class="message">if binary hash matches from time to time we should be good...</span></div><div class="line" id="024206"><span class="nick" style="color:#80b1d3"><a href="#024206" label="[02:42:06]">&lt;stikonas&gt;</a></span><span class="message">hmm, locales might matter on normal system, but I guess in bootstrap we don't even have them</span></div><div class="line" id="024219"><span class="nick" style="color:#80b1d3"><a href="#024219" label="[02:42:19]">&lt;stikonas&gt;</a></span><span class="message">at least not at this stage</span></div><div class="line" id="024250"><span class="nick" style="color:#6b8072"><a href="#024250" label="[02:42:50]">&lt;OriansJ`&gt;</a></span><span class="message">stikonas: well yes you have the advantage of absolute control of exactly the state of the system building the program.</span></div><div class="line" id="031718"><span class="nick" style="color:#2e2a4a"><a href="#031718" label="[03:17:18]">&lt;fossy&gt;</a></span><span class="message">ok i think we need to make the seed linux support kexec for now</span></div><div class="line" id="031724"><span class="nick" style="color:#2e2a4a"><a href="#031724" label="[03:17:24]">&lt;fossy&gt;</a></span><span class="message">i have not found any viable replacement</span></div><div class="line" id="032032"><span class="nick" style="color:#2e2a4a"><a href="#032032" label="[03:20:32]">&lt;fossy&gt;</a></span><span class="message">right, i have a new plan for kernels</span></div><div class="line" id="032034"><span class="nick" style="color:#2e2a4a"><a href="#032034" label="[03:20:34]">&lt;fossy&gt;</a></span><span class="message">we can kexec tccboot</span></div><div class="line" id="032042"><span class="nick" style="color:#2e2a4a"><a href="#032042" label="[03:20:42]">&lt;fossy&gt;</a></span><span class="message">so we compile tccboot with linux 2.4.26</span></div><div class="line" id="032045"><span class="nick" style="color:#2e2a4a"><a href="#032045" label="[03:20:45]">&lt;fossy&gt;</a></span><span class="message">kexec that</span></div><div class="line" id="032058"><span class="nick" style="color:#2e2a4a"><a href="#032058" label="[03:20:58]">&lt;fossy&gt;</a></span><span class="message">wait crap</span></div><div class="line" id="032127"><span class="nick" style="color:#2e2a4a"><a href="#032127" label="[03:21:27]">&lt;fossy&gt;</a></span><span class="message">0. port kexec to 2.4.256</span></div><div class="line" id="032130"><span class="nick" style="color:#2e2a4a"><a href="#032130" label="[03:21:30]">&lt;fossy&gt;</a></span><span class="message">0. port kexec to 2.4.26*</span></div><div class="line" id="032450"><span class="nick" style="color:#234e69"><a href="#032450" label="[03:24:50]">&lt;stikonas[m]&gt;</a></span><span class="message">Yeah, makes sense</span></div><div class="line" id="032457"><span class="nick" style="color:#2e2a4a"><a href="#032457" label="[03:24:57]">&lt;fossy&gt;</a></span><span class="message">lol i thought you were asleep</span></div><div class="line" id="032636"><span class="nick" style="color:#234e69"><a href="#032636" label="[03:26:36]">&lt;stikonas[m]&gt;</a></span><span class="message">Going soon</span></div><div class="line" id="062933"><span class="nick" style="color:#6c3d55"><a href="#062933" label="[06:29:33]">&lt;pder&gt;</a></span><span class="message">I think there is a problem with the sha256 implementation in live-linux.  I get a different result for /after/bin/bash compared to my system sha256sum</span></div><div class="line" id="063344"><span class="nick" style="color:#6c3d55"><a href="#063344" label="[06:33:44]">&lt;pder&gt;</a></span><span class="message">hmm MAX_FILE_SIZE is 2*1024*1024?  so only files up to 2MB work properly</span></div><div class="line" id="063748"><span class="nick">***</span><span class="message notice">janneke_ is now known as janneke</span></div><div class="line" id="065602"><span class="nick" style="color:#2e2a4a"><a href="#065602" label="[06:56:02]">&lt;fossy&gt;</a></span><span class="message">pder: hm, you are correct; that nerds fixing</span></div><div class="line" id="072644"><span class="nick" style="color:#d9d9d9"><a href="#072644" label="[07:26:44]">&lt;siraben&gt;</a></span><span class="message">OriansJ`: yeah, when this semester is over I hope to update myself with the progress on this project and replicate it in Nix, with CI as well</span></div><div class="line" id="072714"><span class="nick" style="color:#d9d9d9"><a href="#072714" label="[07:27:14]">&lt;siraben&gt;</a></span><span class="message">I'm glad to see everything coming together! very exciting.</span></div><div class="line" id="072828"><span class="nick" style="color:#d9d9d9"><a href="#072828" label="[07:28:28]">&lt;siraben&gt;</a></span><span class="message">heh especially with the new Apple laptops with an M1 chip, bootstrap discussion has become widely discussed about (at least in Homebrew/Nix/Mac Ports)</span></div><div class="line" id="072837"><span class="nick" style="color:#d9d9d9"><a href="#072837" label="[07:28:37]">&lt;siraben&gt;</a></span><span class="message">M1 = aarch64 IIRC</span></div><div class="line" id="075115"><span class="nick" style="color:#2e2a4a"><a href="#075115" label="[07:51:15]">&lt;fossy&gt;</a></span><span class="message">Yeah irs</span></div><div class="line" id="075126"><span class="nick" style="color:#2e2a4a"><a href="#075126" label="[07:51:26]">&lt;fossy&gt;</a></span><span class="message">its aarch64</span></div><div class="line" id="075302"><span class="nick" style="color:#bc80bd"><a href="#075302" label="[07:53:02]">&lt;gforce_de1977&gt;</a></span><span class="message">pder: which files are larger than 2mb now?</span></div><div class="line" id="075343"><span class="nick" style="color:#bc80bd"><a href="#075343" label="[07:53:43]">&lt;gforce_de1977&gt;</a></span><span class="message">(sorry, that MAX_FILE_SIZE is my fault and was just a guessing that &quot;it will never happen&quot;)</span></div><div class="line" id="100313"><span class="nick">***</span><span class="message notice">coldtom_ is now known as coldtom</span></div><div class="line" id="100438"><span class="nick" style="color:#2e2a4a"><a href="#100438" label="[10:04:38]">&lt;fossy&gt;</a></span><span class="message">gforce_de1977: only bash binary</span></div><div class="line" id="100455"><span class="nick" style="color:#2e2a4a"><a href="#100455" label="[10:04:55]">&lt;fossy&gt;</a></span><span class="message">Its fine, i thought none of our binaries were over 2 megs too</span></div><div class="line" id="134916"><span class="nick" style="color:#6b8072"><a href="#134916" label="[13:49:16]">&lt;OriansJ`&gt;</a></span><span class="message">gforce_de1977: use size = lseek(f, 0, SEEK_END); to get the file size and lseek(f, 0, SEEK_SET) to reset the pointer to the start of the file.</span></div><div class="line" id="135032"><span class="nick" style="color:#6b8072"><a href="#135032" label="[13:50:32]">&lt;OriansJ`&gt;</a></span><span class="message">There is probably a C function that does it faster that I probably forgot about.</span></div><div class="line" id="135211"><span class="nick" style="color:#6b8072"><a href="#135211" label="[13:52:11]">&lt;OriansJ`&gt;</a></span><span class="message">for example in M2libc f-&gt;buflen would give you the size of the file being read. There is probably a matching feature in the FILE struct for the libc you are using. (or there is a standard C function for providing that value)</span></div><div class="line" id="135327"><span class="nick" style="color:#6b8072"><a href="#135327" label="[13:53:27]">&lt;OriansJ`&gt;</a></span><span class="message">Many of the C function names are terrible to guess but seem reasonable in reflection.</span></div><div class="line" id="150112"><span class="nick" style="color:#6c3d55"><a href="#150112" label="[15:01:12]">&lt;pder&gt;</a></span><span class="message">gforce_de1977: bash is the only executable currently over 2MB which was making me very confused why all of the other hashes were ok</span></div><div class="line" id="162855"><span class="nick" style="color:#80b1d3"><a href="#162855" label="[16:28:55]">&lt;stikonas&gt;</a></span><span class="message">pder: probably the only executable over 2 MB that we'll have...</span></div><div class="line" id="162920"><span class="nick" style="color:#6c3d55"><a href="#162920" label="[16:29:20]">&lt;pder&gt;</a></span><span class="message">I think the static binutils utilities might have been larger</span></div><div class="line" id="162929"><span class="nick" style="color:#80b1d3"><a href="#162929" label="[16:29:29]">&lt;stikonas&gt;</a></span><span class="message">oh, so big?</span></div><div class="line" id="162948"><span class="nick" style="color:#80b1d3"><a href="#162948" label="[16:29:48]">&lt;stikonas&gt;</a></span><span class="message">ok, then bash and binutils...</span></div><div class="line" id="162948"><span class="nick" style="color:#80b1d3"><a href="#162948" label="[16:29:48]">&lt;stikonas&gt;</a></span><span class="message">after that I think we can build shared musl</span></div><div class="line" id="163601"><span class="nick" style="color:#bc80bd"><a href="#163601" label="[16:36:01]">&lt;gforce_de1977&gt;</a></span><span class="message">OriansJ: thanks for the hint, will do: fossy: can i send a PR?</span></div><div class="line" id="163937"><span class="nick" style="color:#6c3d55"><a href="#163937" label="[16:39:37]">&lt;pder&gt;</a></span><span class="message">gforce_de1977: I was looking at the patch for sha256sum and thought there might be an issue in hash_to_string.  the line with hash_string[65] = '\0' seems both unnecessary and potentially dangerous.  the hash_string pointer was incremented in that function so you would effectively be writing a null character 65 bytes after the end of the string.</span></div><div class="line" id="164248"><span class="nick" style="color:#6c3d55"><a href="#164248" label="[16:42:48]">&lt;pder&gt;</a></span><span class="message">Wont sprintf do the null termination for you?</span></div><div class="line" id="165732"><span class="nick" style="color:#bc80bd"><a href="#165732" label="[16:57:32]">&lt;gforce_de1977&gt;</a></span><span class="message">pder: interesting, if sprintf will do that, but it does not hurt, the hash is *always* 64 bytes long, is'nt it? so the root cause was the static buffer with 2mb. i will read into sprintf, i'am not good at C, sorry 8-)</span></div><div class="line" id="170016"><span class="nick" style="color:#bc80bd"><a href="#170016" label="[17:00:16]">&lt;gforce_de1977&gt;</a></span><span class="message">pder: you are right. in my initial approach, i had not done this: <a rel="nofollow" href="http://intercity-vpn.de/sha256sum.c">http://intercity-vpn.de/sha256sum.c</a>  (CTRL+F -&gt; static void hash_to_string)</span></div><div class="line" id="170419"><span class="nick" style="color:#6c3d55"><a href="#170419" label="[17:04:19]">&lt;pder&gt;</a></span><span class="message">The issue I pointed out in hash_to_string is unrelated to the 2MB file limitation.  Just something I noticed and thought that you don't need (or want) that hash_string[65] = '\0' line</span></div><div class="line" id="171209"><span class="nick" style="color:#bc80bd"><a href="#171209" label="[17:12:09]">&lt;gforce_de1977&gt;</a></span><span class="message">pder: you are right, this is maybe not a problem, but at least unneeded and should be fixed, i will to that together with the 'read-the-real-filesize-and-reserve-a-buffer-for-that-patch'</span></div><div class="line" id="171559"><span class="nick" style="color:#6c3d55"><a href="#171559" label="[17:15:59]">&lt;pder&gt;</a></span><span class="message">great, thanks for fixing that!</span></div><div class="line" id="172504"><span class="nick" style="color:#80b1d3"><a href="#172504" label="[17:25:04]">&lt;stikonas&gt;</a></span><span class="message">pder: by the way, for your bash rebuild, I think we should also rebuild bison file</span></div><div class="line" id="172524"><span class="nick" style="color:#6c3d55"><a href="#172524" label="[17:25:24]">&lt;pder&gt;</a></span><span class="message">stikonas: I agree, I added that last night</span></div><div class="line" id="172527"><span class="nick" style="color:#80b1d3"><a href="#172527" label="[17:25:27]">&lt;stikonas&gt;</a></span><span class="message">ok...</span></div><div class="line" id="172530"><span class="nick" style="color:#80b1d3"><a href="#172530" label="[17:25:30]">&lt;stikonas&gt;</a></span><span class="message">thanks</span></div><div class="line" id="172531"><span class="nick" style="color:#6c3d55"><a href="#172531" label="[17:25:31]">&lt;pder&gt;</a></span><span class="message">And it worked nicely</span></div><div class="line" id="172538"><span class="nick" style="color:#6c3d55"><a href="#172538" label="[17:25:38]">&lt;pder&gt;</a></span><span class="message">Before didnt we use yacc?</span></div><div class="line" id="172539"><span class="nick" style="color:#80b1d3"><a href="#172539" label="[17:25:39]">&lt;stikonas&gt;</a></span><span class="message">and should we build with ./configure --prefix=/after?</span></div><div class="line" id="172547"><span class="nick" style="color:#80b1d3"><a href="#172547" label="[17:25:47]">&lt;stikonas&gt;</a></span><span class="message">yes, we used yacc</span></div><div class="line" id="172552"><span class="nick" style="color:#80b1d3"><a href="#172552" label="[17:25:52]">&lt;stikonas&gt;</a></span><span class="message">luckily it worked</span></div><div class="line" id="172601"><span class="nick" style="color:#6c3d55"><a href="#172601" label="[17:26:01]">&lt;pder&gt;</a></span><span class="message">Oh yeah, I tried make install and it wanted to install man pages</span></div><div class="line" id="172606"><span class="nick" style="color:#80b1d3"><a href="#172606" label="[17:26:06]">&lt;stikonas&gt;</a></span><span class="message">otherwise, thigns would have been so much more annoying</span></div><div class="line" id="172617"><span class="nick" style="color:#80b1d3"><a href="#172617" label="[17:26:17]">&lt;stikonas&gt;</a></span><span class="message">we used bash quite a bit before we were able to build bison</span></div><div class="line" id="172618"><span class="nick" style="color:#6c3d55"><a href="#172618" label="[17:26:18]">&lt;pder&gt;</a></span><span class="message">Should I just install the binary to /after/bin</span></div><div class="line" id="172620"><span class="nick" style="color:#6c3d55"><a href="#172620" label="[17:26:20]">&lt;pder&gt;</a></span><span class="message">?</span></div><div class="line" id="172638"><span class="nick" style="color:#80b1d3"><a href="#172638" label="[17:26:38]">&lt;stikonas&gt;</a></span><span class="message">well, I'm fine with installing man pages...</span></div><div class="line" id="172643"><span class="nick" style="color:#80b1d3"><a href="#172643" label="[17:26:43]">&lt;stikonas&gt;</a></span><span class="message">although, maybe there is configure flag to disable that</span></div><div class="line" id="172718"><span class="nick" style="color:#80b1d3"><a href="#172718" label="[17:27:18]">&lt;stikonas&gt;</a></span><span class="message">hmm, probably no</span></div><div class="line" id="172735"><span class="nick" style="color:#80b1d3"><a href="#172735" label="[17:27:35]">&lt;stikonas&gt;</a></span><span class="message">anyway, installing manpages should be fine</span></div><div class="line" id="172742"><span class="nick" style="color:#80b1d3"><a href="#172742" label="[17:27:42]">&lt;stikonas&gt;</a></span><span class="message">they are just copied...</span></div><div class="line" id="172743"><span class="nick" style="color:#80b1d3"><a href="#172743" label="[17:27:43]">&lt;stikonas&gt;</a></span><span class="message">from tarbal</span></div><div class="line" id="172918"><span class="nick" style="color:#6c3d55"><a href="#172918" label="[17:29:18]">&lt;pder&gt;</a></span><span class="message">I was confused about the sha256sum for bash failing last night but that problem is now understood</span></div><div class="line" id="172940"><span class="nick" style="color:#80b1d3"><a href="#172940" label="[17:29:40]">&lt;stikonas&gt;</a></span><span class="message">well, maybe we can get newer coreutils soon...</span></div><div class="line" id="172950"><span class="nick" style="color:#80b1d3"><a href="#172950" label="[17:29:50]">&lt;stikonas&gt;</a></span><span class="message">although, I think we might need to beef up autotools before that...</span></div><div class="line" id="173038"><span class="nick" style="color:#6c3d55"><a href="#173038" label="[17:30:38]">&lt;pder&gt;</a></span><span class="message">So one approach would be to rebuild musl without the patches, but we might also be able to jump to a gcc toolchain as well</span></div><div class="line" id="173059"><span class="nick" style="color:#80b1d3"><a href="#173059" label="[17:30:59]">&lt;stikonas&gt;</a></span><span class="message">well, yeah...</span></div><div class="line" id="173110"><span class="nick" style="color:#80b1d3"><a href="#173110" label="[17:31:10]">&lt;stikonas&gt;</a></span><span class="message">although, I'm hoping we can jump to newer gcc...</span></div><div class="line" id="173123"><span class="nick" style="color:#80b1d3"><a href="#173123" label="[17:31:23]">&lt;stikonas&gt;</a></span><span class="message">that might be helpful with porting to new architectures...</span></div><div class="line" id="173141"><span class="nick" style="color:#80b1d3"><a href="#173141" label="[17:31:41]">&lt;stikonas&gt;</a></span><span class="message">most of the trouble is probaby in compiler...</span></div><div class="line" id="173201"><span class="nick" style="color:#80b1d3"><a href="#173201" label="[17:32:01]">&lt;stikonas&gt;</a></span><span class="message">pder: some patches to musl will still be necessary</span></div><div class="line" id="173205"><span class="nick" style="color:#80b1d3"><a href="#173205" label="[17:32:05]">&lt;stikonas&gt;</a></span><span class="message">I think we can only skip those weak symbols</span></div><div class="line" id="173316"><span class="nick" style="color:#80b1d3"><a href="#173316" label="[17:33:16]">&lt;stikonas&gt;</a></span><span class="message">well, and &quot;AR&quot; makefile patch and tcc static patch...</span></div><div class="line" id="173525"><span class="nick" style="color:#6c3d55"><a href="#173525" label="[17:35:25]">&lt;pder&gt;</a></span><span class="message">Do you know if tcc 0.9.27 can build newer versions of gcc, or do you think we will need to build tcc from the mob branch?</span></div><div class="line" id="173545"><span class="nick" style="color:#80b1d3"><a href="#173545" label="[17:35:45]">&lt;stikonas&gt;</a></span><span class="message">pder: no idea...</span></div><div class="line" id="173554"><span class="nick" style="color:#80b1d3"><a href="#173554" label="[17:35:54]">&lt;stikonas&gt;</a></span><span class="message">probably nobody tried</span></div><div class="line" id="173611"><span class="nick" style="color:#80b1d3"><a href="#173611" label="[17:36:11]">&lt;stikonas&gt;</a></span><span class="message">guix has much simpler C library, so they can't try</span></div><div class="line" id="173708"><span class="nick" style="color:#80b1d3"><a href="#173708" label="[17:37:08]">&lt;stikonas&gt;</a></span><span class="message">but in my experience, tcc is quite good</span></div><div class="line" id="173722"><span class="nick" style="color:#80b1d3"><a href="#173722" label="[17:37:22]">&lt;stikonas&gt;</a></span><span class="message">(at least when paired with musl, not mes libc)</span></div><div class="line" id="173734"><span class="nick" style="color:#80b1d3"><a href="#173734" label="[17:37:34]">&lt;stikonas&gt;</a></span><span class="message">and having some binutils should help us a lot too</span></div><div class="line" id="173739"><span class="nick" style="color:#6c3d55"><a href="#173739" label="[17:37:39]">&lt;pder&gt;</a></span><span class="message">In any case we will need be careful about using compatible versions of binutils, gcc, and glibc</span></div><div class="line" id="173752"><span class="nick" style="color:#80b1d3"><a href="#173752" label="[17:37:52]">&lt;stikonas&gt;</a></span><span class="message">that's true...</span></div><div class="line" id="173801"><span class="nick" style="color:#80b1d3"><a href="#173801" label="[17:38:01]">&lt;stikonas&gt;</a></span><span class="message">but how incompatible are they?</span></div><div class="line" id="173848"><span class="nick" style="color:#80b1d3"><a href="#173848" label="[17:38:48]">&lt;stikonas&gt;</a></span><span class="message">at least I hope binutils shoulnd't matter too much</span></div><div class="line" id="173858"><span class="nick" style="color:#80b1d3"><a href="#173858" label="[17:38:58]">&lt;stikonas&gt;</a></span><span class="message">maybe gcc and glibc should match more...</span></div><div class="line" id="173931"><span class="nick" style="color:#6c3d55"><a href="#173931" label="[17:39:31]">&lt;pder&gt;</a></span><span class="message">Probably need to at least be fairly close on the time period they were released</span></div><div class="line" id="174009"><span class="nick" style="color:#80b1d3"><a href="#174009" label="[17:40:09]">&lt;stikonas&gt;</a></span><span class="message">binutils -2.14a is much newer though</span></div><div class="line" id="174018"><span class="nick" style="color:#80b1d3"><a href="#174018" label="[17:40:18]">&lt;stikonas&gt;</a></span><span class="message">so I think we'll be fine</span></div><div class="line" id="174027"><span class="nick" style="color:#80b1d3"><a href="#174027" label="[17:40:27]">&lt;stikonas&gt;</a></span><span class="message">it's from 2011 (2.14 is from 2003)</span></div><div class="line" id="174047"><span class="nick" style="color:#80b1d3"><a href="#174047" label="[17:40:47]">&lt;stikonas&gt;</a></span><span class="message">hmm gcc 2.95.3 is from 2001</span></div><div class="line" id="174101"><span class="nick" style="color:#80b1d3"><a href="#174101" label="[17:41:01]">&lt;stikonas&gt;</a></span><span class="message">so I think fairly close allows at least a few years...</span></div><div class="line" id="174437"><span class="nick" style="color:#80b1d3"><a href="#174437" label="[17:44:37]">&lt;stikonas&gt;</a></span><span class="message">pder: also for bash keep in mind that hash depends on arch...</span></div><div class="line" id="174454"><span class="nick" style="color:#80b1d3"><a href="#174454" label="[17:44:54]">&lt;stikonas&gt;</a></span><span class="message">it will not match in i386 qemu</span></div><div class="line" id="174500"><span class="nick" style="color:#80b1d3"><a href="#174500" label="[17:45:00]">&lt;stikonas&gt;</a></span><span class="message">bash --version prints</span></div><div class="line" id="174503"><span class="nick" style="color:#80b1d3"><a href="#174503" label="[17:45:03]">&lt;stikonas&gt;</a></span><span class="message">GNU bash, version 2.05b.0(1)-release (x86_64-unknown-linux-gnu)</span></div><div class="line" id="174519"><span class="nick" style="color:#80b1d3"><a href="#174519" label="[17:45:19]">&lt;stikonas&gt;</a></span><span class="message">--target --host --build options might help....</span></div><div class="line" id="174654"><span class="nick" style="color:#6c3d55"><a href="#174654" label="[17:46:54]">&lt;pder&gt;</a></span><span class="message">ah yes, thats a good point</span></div><div class="line" id="174751"><span class="nick" style="color:#80b1d3"><a href="#174751" label="[17:47:51]">&lt;stikonas&gt;</a></span><span class="message">at some point I guess we'll have to build x86_64 compiler if we are on x86_64...</span></div><div class="line" id="174800"><span class="nick" style="color:#80b1d3"><a href="#174800" label="[17:48:00]">&lt;stikonas&gt;</a></span><span class="message">but early bootstrap should work on both</span></div><div class="line" id="174815"><span class="nick" style="color:#80b1d3"><a href="#174815" label="[17:48:15]">&lt;stikonas&gt;</a></span><span class="message">or maybe I should say middle of bootstrap...</span></div><div class="line" id="174823"><span class="nick" style="color:#80b1d3"><a href="#174823" label="[17:48:23]">&lt;stikonas&gt;</a></span><span class="message">we are not really in early stages anymore</span></div><div class="line" id="175140"><span class="nick" style="color:#6c3d55"><a href="#175140" label="[17:51:40]">&lt;pder&gt;</a></span><span class="message">Any thoughts on what you think the end goal of live-bootstrap should be?  My thought was possibly having a system that included all of the prerequesites for a host system for Linux from scratch</span></div><div class="line" id="175337"><span class="nick" style="color:#6c3d55"><a href="#175337" label="[17:53:37]">&lt;pder&gt;</a></span><span class="message">possibly something like this: <a rel="nofollow" href="http://www.linuxfromscratch.org/lfs/view/stable/chapter02/hostreqs.html">http://www.linuxfromscratch.org/lfs/view/stable/chapter02/hostreqs.html</a> </span></div><div class="line" id="175603"><span class="nick" style="color:#6c3d55"><a href="#175603" label="[17:56:03]">&lt;pder&gt;</a></span><span class="message">Maybe a bit more since our requirements are to use autotools instead of generated configure scripts</span></div><div class="line" id="180520"><span class="nick" style="color:#80b1d3"><a href="#180520" label="[18:05:20]">&lt;stikonas&gt;</a></span><span class="message">pder: I thought maybe even something further...</span></div><div class="line" id="180546"><span class="nick" style="color:#80b1d3"><a href="#180546" label="[18:05:46]">&lt;stikonas&gt;</a></span><span class="message">i was hoping we can even bootstrap one or two simpler distros...</span></div><div class="line" id="180606"><span class="nick" style="color:#80b1d3"><a href="#180606" label="[18:06:06]">&lt;stikonas&gt;</a></span><span class="message">at some point we might have to give user a choice which path to take...</span></div><div class="line" id="180616"><span class="nick" style="color:#80b1d3"><a href="#180616" label="[18:06:16]">&lt;stikonas&gt;</a></span><span class="message">e.g. one option might be to install portage...</span></div><div class="line" id="180634"><span class="nick" style="color:#80b1d3"><a href="#180634" label="[18:06:34]">&lt;stikonas&gt;</a></span><span class="message">(for Gentoo)</span></div><div class="line" id="180647"><span class="nick" style="color:#80b1d3"><a href="#180647" label="[18:06:47]">&lt;stikonas&gt;</a></span><span class="message">another would be to just leave in standard state for LFS like install</span></div><div class="line" id="180659"><span class="nick" style="color:#80b1d3"><a href="#180659" label="[18:06:59]">&lt;stikonas&gt;</a></span><span class="message">btu like you said with a bit of extra</span></div><div class="line" id="180758"><span class="nick" style="color:#80b1d3"><a href="#180758" label="[18:07:58]">&lt;stikonas&gt;</a></span><span class="message">(we already have most of that list from LFS)</span></div><div class="line" id="180902"><span class="nick" style="color:#80b1d3"><a href="#180902" label="[18:09:02]">&lt;stikonas&gt;</a></span><span class="message">only gcc/glibc/findutils/kernel/xz/texinfo and python are missing</span></div><div class="line" id="180913"><span class="nick" style="color:#80b1d3"><a href="#180913" label="[18:09:13]">&lt;stikonas&gt;</a></span><span class="message">findutils is probably not too hard to build even now</span></div><div class="line" id="181159"><span class="nick" style="color:#80b1d3"><a href="#181159" label="[18:11:59]">&lt;stikonas&gt;</a></span><span class="message">hmm, how come that LFS list does not include anything to download stuff with (wget/curl/rsync)...</span></div><div class="line" id="181246"><span class="nick" style="color:#80b1d3"><a href="#181246" label="[18:12:46]">&lt;stikonas&gt;</a></span><span class="message">it doesn't include mount either</span></div><div class="line" id="181254"><span class="nick" style="color:#80b1d3"><a href="#181254" label="[18:12:54]">&lt;stikonas&gt;</a></span><span class="message">even though mount is immediately used</span></div><div class="line" id="181302"><span class="nick" style="color:#80b1d3"><a href="#181302" label="[18:13:02]">&lt;stikonas&gt;</a></span><span class="message">well, I guess it's a bit incomplete</span></div><div class="line" id="201007"><span class="nick" style="color:#bc80bd"><a href="#201007" label="[20:10:07]">&lt;gforce_de1977&gt;</a></span><span class="message">stikonas: pder: my ultimate goal would be to bootstrap from a mini-OS (singletasking, minimal support for files in ramdisk, minimal syscall support) and bootstrap till we can kexec a linux kernel and after that build an automated-linux-from-scratch (ALFS) till desktop</span></div><div class="line" id="201036"><span class="nick" style="color:#bc80bd"><a href="#201036" label="[20:10:36]">&lt;gforce_de1977&gt;</a></span><span class="message">the early parts are hard work, the other things is just playing with scripts</span></div><div class="line" id="201115"><span class="nick" style="color:#bc80bd"><a href="#201115" label="[20:11:15]">&lt;gforce_de1977&gt;</a></span><span class="message">and yes: in the end every distro must be bootsrappable</span></div><div class="line" id="204418"><span class="nick" style="color:#80b1d3"><a href="#204418" label="[20:44:18]">&lt;stikonas&gt;</a></span><span class="message">pder: minor tweaks to bzip2 <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/53">https://github.com/fosslinux/live-bootstrap/pull/53</a> </span></div><div class="line" id="205741"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado_</span></div><div class="line" id="205744"><span class="nick">***</span><span class="message notice">rekado_ is now known as rekado</span></div><div class="line" id="215330"><span class="nick" style="color:#6c3d55"><a href="#215330" label="[21:53:30]">&lt;pder&gt;</a></span><span class="message">stikonas: looks good</span></div><div class="line" id="221620"><span class="nick" style="color:#80b1d3"><a href="#221620" label="[22:16:20]">&lt;stikonas&gt;</a></span><span class="message">pder: by the way, should we still build ls in the first pass of coreutils?</span></div><div class="line" id="221639"><span class="nick" style="color:#80b1d3"><a href="#221639" label="[22:16:39]">&lt;stikonas&gt;</a></span><span class="message">in principle we can build ls later and drop the patch</span></div><div class="line" id="221700"><span class="nick" style="color:#80b1d3"><a href="#221700" label="[22:17:00]">&lt;stikonas&gt;</a></span><span class="message">but if you think it's worth keeping it, I'm find with it too</span></div><div class="line" id="222001"><span class="nick" style="color:#6c3d55"><a href="#222001" label="[22:20:01]">&lt;pder&gt;</a></span><span class="message">Are you talking about the patch to mes-libc involving qsort?</span></div><div class="line" id="222218"><span class="nick" style="color:#6c3d55"><a href="#222218" label="[22:22:18]">&lt;pder&gt;</a></span><span class="message">Oh, there is also the strcmp patch</span></div><div class="line" id="222502"><span class="nick" style="color:#6c3d55"><a href="#222502" label="[22:25:02]">&lt;pder&gt;</a></span><span class="message">I think keeping the qsort patch is useful, since it fixes a potential segfault, but as long as ls is not needed, I can see skipping it until coreutils pass 2</span></div><div class="line" id="222554"><span class="nick" style="color:#6c3d55"><a href="#222554" label="[22:25:54]">&lt;pder&gt;</a></span><span class="message">So the ls-strcmp.patch could be removed</span></div><div class="line" id="222754"><span class="nick" style="color:#6c3d55"><a href="#222754" label="[22:27:54]">&lt;pder&gt;</a></span><span class="message">It might make sense to keep the first pass of coreutils to the absolute minimum needed to get through the next stages</span></div><div class="line" id="223447"><span class="nick" style="color:#2e2a4a"><a href="#223447" label="[22:34:47]">&lt;fossy&gt;</a></span><span class="message">gforce_de1977: go right ahead for the pr</span></div><div class="line" id="224030"><span class="nick" style="color:#80b1d3"><a href="#224030" label="[22:40:30]">&lt;stikonas&gt;</a></span><span class="message">pder: yeah, I was talking about ls-strcmp...</span></div><div class="line" id="234932"><span class="nick" style="color:#80b1d3"><a href="#234932" label="[23:49:32]">&lt;stikonas&gt;</a></span><span class="message">fossy, pder: do you think we should deal with autoconf/automake stuff in src_prepare or src_configure?</span></div><div class="line" id="234955"><span class="nick" style="color:#80b1d3"><a href="#234955" label="[23:49:55]">&lt;stikonas&gt;</a></span><span class="message">because e.g. before we dealt with bison stuff in src_prepare</span></div><div class="line" id="235021"><span class="nick" style="color:#80b1d3"><a href="#235021" label="[23:50:21]">&lt;stikonas&gt;</a></span><span class="message">(just minor style question but better to deal with it before we have too much)</span></div><br /></div></body></html>