<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-12-02.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="003432"><span class="nick" style="color:#8dd3c7"><a href="#003432" label="[00:34:32]">&lt;pder&gt;</a></span><span class="message">Oriansj: I pushed one more change that I believe fixes the lonely.c differences</span></div><div class="line" id="004033"><span class="nick" style="color:#8dd3c7"><a href="#004033" label="[00:40:33]">&lt;pder&gt;</a></span><span class="message">Yes b4143cf4a4c982 should fix the lonely.c differences.  Its also an example of a workaround for the FUNCTION problem.</span></div><div class="line" id="010312"><span class="nick" style="color:#2e2a4a"><a href="#010312" label="[01:03:12]">&lt;OriansJ&gt;</a></span><span class="message">pder: I'll look deeper to see if I can figure out the reason</span></div><div class="line" id="010653"><span class="nick" style="color:#2e2a4a"><a href="#010653" label="[01:06:53]">&lt;OriansJ&gt;</a></span><span class="message">as the differences are minimal <a rel="nofollow" href="https://paste.debian.net/1175178/">https://paste.debian.net/1175178/</a> </span></div><div class="line" id="010931"><span class="nick" style="color:#2e2a4a"><a href="#010931" label="[01:09:31]">&lt;OriansJ&gt;</a></span><span class="message">(the full diff is barely larger <a rel="nofollow" href="https://paste.debian.net/1175179/">https://paste.debian.net/1175179/</a>) </span></div><div class="line" id="012807"><span class="nick" style="color:#2e2a4a"><a href="#012807" label="[01:28:07]">&lt;OriansJ&gt;</a></span><span class="message">Either locals in M2-Planet are broken in some deep fundational way or we are missing something</span></div><div class="line" id="021231"><span class="nick" style="color:#2e2a4a"><a href="#021231" label="[02:12:31]">&lt;OriansJ&gt;</a></span><span class="message">but as I logically think about it: <a rel="nofollow" href="https://paste.debian.net/1175190/">https://paste.debian.net/1175190/</a> </span></div><div class="line" id="021239"><span class="nick" style="color:#2e2a4a"><a href="#021239" label="[02:12:39]">&lt;OriansJ&gt;</a></span><span class="message">that wouldn't make sense</span></div><div class="line" id="022857"><span class="nick" style="color:#2e2a4a"><a href="#022857" label="[02:28:57]">&lt;OriansJ&gt;</a></span><span class="message">also pder there is no FUNCTION pointers in your commit; so it isn't a problem with that. Nor by looking at the assembly that it has to do with the function call at all; unless fgetc is screwing up the stack somehow but I am looking into that too.</span></div><div class="line" id="024631"><span class="nick" style="color:#2e2a4a"><a href="#024631" label="[02:46:31]">&lt;OriansJ&gt;</a></span><span class="message">but yet somehow it looks like locals are off by 4</span></div><div class="line" id="024855"><span class="nick" style="color:#2e2a4a"><a href="#024855" label="[02:48:55]">&lt;OriansJ&gt;</a></span><span class="message">That is alot of passing tests</span></div><div class="line" id="030206"><span class="nick" style="color:#2e2a4a"><a href="#030206" label="[03:02:06]">&lt;OriansJ&gt;</a></span><span class="message">WTF; <a rel="nofollow" href="https://paste.debian.net/1175199/">https://paste.debian.net/1175199/</a>  is the difference between a segfault and a wrong result?</span></div><div class="line" id="030508"><span class="nick" style="color:#2e2a4a"><a href="#030508" label="[03:05:08]">&lt;OriansJ&gt;</a></span><span class="message">except when I try to debug then they both segfault</span></div><div class="line" id="040814"><span class="nick" style="color:#8dd3c7"><a href="#040814" label="[04:08:14]">&lt;pder&gt;</a></span><span class="message">oriansj: in that commit the function io_get is passed to run(FUNCTION get, FUNCTION put) so I thought it might be related to that</span></div><div class="line" id="041656"><span class="nick" style="color:#6b8072"><a href="#041656" label="[04:16:56]">&lt;siraben&gt;</a></span><span class="message">pder: thanks a lot for your work! I guess the pressure's on me now to write that Scheme, heh</span></div><div class="line" id="042105"><span class="nick" style="color:#2e2a4a"><a href="#042105" label="[04:21:05]">&lt;OriansJ&gt;</a></span><span class="message">pder: I think it still has to do with locals in M2-Planet but I haven't been able to work out a good solution to it yet</span></div><div class="line" id="042351"><span class="nick" style="color:#2e2a4a"><a href="#042351" label="[04:23:51]">&lt;OriansJ&gt;</a></span><span class="message">maybe I just need to byte the bullet and eliminate the push/pop entirely for locals</span></div><div class="line" id="042557"><span class="nick" style="color:#2e2a4a"><a href="#042557" label="[04:25:57]">&lt;OriansJ&gt;</a></span><span class="message">but I'll look more at that tomorrow. Good night.</span></div><div class="line" id="042616"><span class="nick" style="color:#6b8072"><a href="#042616" label="[04:26:16]">&lt;siraben&gt;</a></span><span class="message">night!</span></div><div class="line" id="103336"><span class="nick" style="color:#2e2a4a"><a href="#103336" label="[10:33:36]">&lt;OriansJ&gt;</a></span><span class="message">ok when a function call is made in M2-Planet to a function which takes no arguments; esp and ebp should be exactly 4 different (The size of the return address for RET)</span></div><div class="line" id="103424"><span class="nick" style="color:#2e2a4a"><a href="#103424" label="[10:34:24]">&lt;OriansJ&gt;</a></span><span class="message">yet <a rel="nofollow" href="https://paste.debian.net/1175231/">https://paste.debian.net/1175231/</a> </span></div><div class="line" id="103452"><span class="nick" style="color:#2e2a4a"><a href="#103452" label="[10:34:52]">&lt;OriansJ&gt;</a></span><span class="message">FUNCTION_ioget starts with the wrong ebp</span></div><div class="line" id="103648"><span class="nick" style="color:#2e2a4a"><a href="#103648" label="[10:36:48]">&lt;OriansJ&gt;</a></span><span class="message">why because the function run is doing get(0);</span></div><div class="line" id="104100"><span class="nick" style="color:#2e2a4a"><a href="#104100" label="[10:41:00]">&lt;OriansJ&gt;</a></span><span class="message">So M2-Planet is generating the correct local behavior but the code is passing an argument to a function that doesn't accept an argument and throwing things off.</span></div><div class="line" id="104257"><span class="nick" style="color:#2e2a4a"><a href="#104257" label="[10:42:57]">&lt;OriansJ&gt;</a></span><span class="message">The problem is we should be throwing a big fat error when calling a function that doesn't accept arguments and trying to pass it arguments.</span></div><div class="line" id="104740"><span class="nick" style="color:#2e2a4a"><a href="#104740" label="[10:47:40]">&lt;OriansJ&gt;</a></span><span class="message">so if we just inform the function that it is going to get an argument: <a rel="nofollow" href="https://paste.debian.net/1175232/">https://paste.debian.net/1175232/</a> </span></div><div class="line" id="104747"><span class="nick" style="color:#2e2a4a"><a href="#104747" label="[10:47:47]">&lt;OriansJ&gt;</a></span><span class="message">boom it is working again.</span></div><div class="line" id="105124"><span class="nick" style="color:#6b8072"><a href="#105124" label="[10:51:24]">&lt;siraben&gt;</a></span><span class="message">Nice!</span></div><div class="line" id="105413"><span class="nick" style="color:#2e2a4a"><a href="#105413" label="[10:54:13]">&lt;OriansJ&gt;</a></span><span class="message">and it applies to the other cases as well</span></div><div class="line" id="105819"><span class="nick" style="color:#2e2a4a"><a href="#105819" label="[10:58:19]">&lt;OriansJ&gt;</a></span><span class="message">and it found another place where there is a problem ioccc_get</span></div><div class="line" id="110139"><span class="nick" style="color:#2e2a4a"><a href="#110139" label="[11:01:39]">&lt;OriansJ&gt;</a></span><span class="message">why GCC/Clang doesn't atleast show a warning for this sort of thing is beyound me (possibly to improve compile benchmark times?)</span></div><div class="line" id="110448"><span class="nick" style="color:#2e2a4a"><a href="#110448" label="[11:04:48]">&lt;OriansJ&gt;</a></span><span class="message">I'll have the patch up once I finish triple checking that it is doing what is expected.</span></div><div class="line" id="111449"><span class="nick" style="color:#2e2a4a"><a href="#111449" label="[11:14:49]">&lt;OriansJ&gt;</a></span><span class="message">although I really don't like the while((c = str_get(0))) and will probably have to figure out a better solution for that.</span></div><div class="line" id="112851"><span class="nick" style="color:#80b1d3"><a href="#112851" label="[11:28:51]">&lt;fossy&gt;</a></span><span class="message">good morning OriansJ!</span></div><div class="line" id="112913"><span class="nick" style="color:#2e2a4a"><a href="#112913" label="[11:29:13]">&lt;OriansJ&gt;</a></span><span class="message">and as we go, I'll probably have to make some bigger changes so that vm.c becomes something we can properly fuzz</span></div><div class="line" id="112918"><span class="nick" style="color:#2e2a4a"><a href="#112918" label="[11:29:18]">&lt;OriansJ&gt;</a></span><span class="message">morning fossy</span></div><div class="line" id="112928"><span class="nick" style="color:#80b1d3"><a href="#112928" label="[11:29:28]">&lt;fossy&gt;</a></span><span class="message">pder: i can confirm that ./vm run &gt; raw worked for me as well when compiled by M2-Planet</span></div><div class="line" id="112942"><span class="nick" style="color:#80b1d3"><a href="#112942" label="[11:29:42]">&lt;fossy&gt;</a></span><span class="message">however ./vm run dosen't work at all, even for the most simple haskell program given in the README</span></div><div class="line" id="113029"><span class="nick" style="color:#2e2a4a"><a href="#113029" label="[11:30:29]">&lt;OriansJ&gt;</a></span><span class="message">fossy: checkout out my latest commit; it properly generates generated/lonely.c</span></div><div class="line" id="113040"><span class="nick" style="color:#80b1d3"><a href="#113040" label="[11:30:40]">&lt;fossy&gt;</a></span><span class="message">ooooooh</span></div><div class="line" id="113056"><span class="nick" style="color:#2e2a4a"><a href="#113056" label="[11:30:56]">&lt;OriansJ&gt;</a></span><span class="message">just do ./go.sh it'll do the rest</span></div><div class="line" id="113135"><span class="nick" style="color:#80b1d3"><a href="#113135" label="[11:31:35]">&lt;fossy&gt;</a></span><span class="message">rts.c would need to be converted to M2-Planet tho to fix the TODO right</span></div><div class="line" id="113213"><span class="nick" style="color:#2e2a4a"><a href="#113213" label="[11:32:13]">&lt;OriansJ&gt;</a></span><span class="message">fossy: yep and we have the question of how to deal with the big fat static const u prog[]={81,37,81,...</span></div><div class="line" id="113236"><span class="nick" style="color:#80b1d3"><a href="#113236" label="[11:32:36]">&lt;fossy&gt;</a></span><span class="message">in vm.c?</span></div><div class="line" id="113313"><span class="nick" style="color:#2e2a4a"><a href="#113313" label="[11:33:13]">&lt;OriansJ&gt;</a></span><span class="message">no, it is generated</span></div><div class="line" id="113319"><span class="nick" style="color:#80b1d3"><a href="#113319" label="[11:33:19]">&lt;fossy&gt;</a></span><span class="message">oh</span></div><div class="line" id="113322"><span class="nick" style="color:#80b1d3"><a href="#113322" label="[11:33:22]">&lt;fossy&gt;</a></span><span class="message">why is that a problem?</span></div><div class="line" id="113411"><span class="nick" style="color:#2e2a4a"><a href="#113411" label="[11:34:11]">&lt;OriansJ&gt;</a></span><span class="message">fossy: M2-Planet doesn't yet support the ability to do char c[]= {1,2,3...}; yet</span></div><div class="line" id="113419"><span class="nick" style="color:#80b1d3"><a href="#113419" label="[11:34:19]">&lt;fossy&gt;</a></span><span class="message">ah</span></div><div class="line" id="113434"><span class="nick" style="color:#80b1d3"><a href="#113434" label="[11:34:34]">&lt;fossy&gt;</a></span><span class="message">should be possible to do a translation layer, no?</span></div><div class="line" id="113444"><span class="nick" style="color:#80b1d3"><a href="#113444" label="[11:34:44]">&lt;fossy&gt;</a></span><span class="message">or add support, lol</span></div><div class="line" id="113501"><span class="nick" style="color:#2e2a4a"><a href="#113501" label="[11:35:01]">&lt;OriansJ&gt;</a></span><span class="message">fossy: just haven't figured out the correct answer yet</span></div><div class="line" id="113509"><span class="nick" style="color:#80b1d3"><a href="#113509" label="[11:35:09]">&lt;fossy&gt;</a></span><span class="message">yeah</span></div><div class="line" id="113525"><span class="nick" style="color:#80b1d3"><a href="#113525" label="[11:35:25]">&lt;fossy&gt;</a></span><span class="message">those number code programs get super long, iirc</span></div><div class="line" id="113537"><span class="nick" style="color:#2e2a4a"><a href="#113537" label="[11:35:37]">&lt;OriansJ&gt;</a></span><span class="message">but fixing rts.c should give us a better idea of a proper solution</span></div><div class="line" id="113540"><span class="nick" style="color:#80b1d3"><a href="#113540" label="[11:35:40]">&lt;fossy&gt;</a></span><span class="message">i think for precisely it was close to 1m characters in the struct</span></div><div class="line" id="113544"><span class="nick" style="color:#80b1d3"><a href="#113544" label="[11:35:44]">&lt;fossy&gt;</a></span><span class="message">s/struct/array</span></div><div class="line" id="113620"><span class="nick" style="color:#2e2a4a"><a href="#113620" label="[11:36:20]">&lt;OriansJ&gt;</a></span><span class="message">I'm not exactly a fan of magic numbers</span></div><div class="line" id="113646"><span class="nick" style="color:#80b1d3"><a href="#113646" label="[11:36:46]">&lt;fossy&gt;</a></span><span class="message">its pretty much what this whole project rests on, no?</span></div><div class="line" id="113654"><span class="nick" style="color:#80b1d3"><a href="#113654" label="[11:36:54]">&lt;fossy&gt;</a></span><span class="message">(blynn-compiler, that is)</span></div><div class="line" id="113708"><span class="nick" style="color:#2e2a4a"><a href="#113708" label="[11:37:08]">&lt;OriansJ&gt;</a></span><span class="message">until I find a better way to express it</span></div><div class="line" id="113810"><span class="nick" style="color:#2e2a4a"><a href="#113810" label="[11:38:10]">&lt;OriansJ&gt;</a></span><span class="message">unpacking the magic will ultimately have to happen</span></div><div class="line" id="114120"><span class="nick" style="color:#2e2a4a"><a href="#114120" label="[11:41:20]">&lt;OriansJ&gt;</a></span><span class="message">and I get the sneaking feeling that rts.c is just a slightly extended version of vm.c's state machine and the blob is just there to play the role of the blobs in vm.c</span></div><div class="line" id="114311"><span class="nick" style="color:#2e2a4a"><a href="#114311" label="[11:43:11]">&lt;OriansJ&gt;</a></span><span class="message">in which case, me exploding vm.c to a simpler form will eliminate the need for rts.c entirely and cut the number of compile steps considerably.</span></div><div class="line" id="131534"><span class="nick" style="color:#6d2462"><a href="#131534" label="[13:15:34]">&lt;Hagfish&gt;</a></span><span class="message">exciting stuff, and great work everyone :)</span></div><div class="line" id="151000"><span class="nick" style="color:#234e69"><a href="#151000" label="[15:10:00]">&lt;dorion&gt;</a></span><span class="message">hello, which distros do people here recommend ? ever hear of [<a rel="nofollow" href="http://fixpoint.welshcomputing.com/2019/introducing-gales-linux-a-cross-bootstrapped-do-it-yourself-fully-static-discriminatory-distribution/">http://fixpoint.welshcomputing.com/2019/introducing-gales-linux-a-cross-bootstrapped-do-it-yourself-fully-static-discriminatory-distribution/</a>][Gales  Linux] ?</span></div><div class="line" id="152114"><span class="nick" style="color:#8dd3c7"><a href="#152114" label="[15:21:14]">&lt;pder&gt;</a></span><span class="message">orianj: great find.  thanks for looking into that.  I am wondering if functions like io_get could still be declared with no parameters and then simply call them with get() instead of get(0)?</span></div><div class="line" id="183843"><span class="nick" style="color:#6b8072"><a href="#183843" label="[18:38:43]">&lt;siraben&gt;</a></span><span class="message">dorion: I use NixOS</span></div><div class="line" id="183910"><span class="nick" style="color:#6b8072"><a href="#183910" label="[18:39:10]">&lt;siraben&gt;</a></span><span class="message">OriansJ: i can adjust the Haskell output</span></div><div class="line" id="200554"><span class="nick" style="color:#6c3d55"><a href="#200554" label="[20:05:54]">&lt;janneke&gt;</a></span><span class="message">dorion: that's interesting; the GNU Mes bootstrap is being developed on Guix, a port to NixOS is underway</span></div><div class="line" id="200821"><span class="nick" style="color:#6b8072"><a href="#200821" label="[20:08:21]">&lt;siraben&gt;</a></span><span class="message">Yeah, I hope NixOS can benefit from this as well</span></div><div class="line" id="200834"><span class="nick" style="color:#6b8072"><a href="#200834" label="[20:08:34]">&lt;siraben&gt;</a></span><span class="message">The Nix bootstrap must be large</span></div><div class="line" id="201440"><span class="nick" style="color:#d9d9d9"><a href="#201440" label="[20:14:40]">&lt;V&gt;</a></span><span class="message">Nixpkgs contains a lot of binary packages...</span></div><div class="line" id="203813"><span class="nick" style="color:#bc80bd"><a href="#203813" label="[20:38:13]">&lt;xentrac&gt;</a></span><span class="message">I see I failed to wish everyone happy AIM-349 day yesterday</span></div><div class="line" id="203843"><span class="nick" style="color:#bc80bd"><a href="#203843" label="[20:38:43]">&lt;xentrac&gt;</a></span><span class="message">so today Scheme is 45 years and one day ld</span></div><div class="line" id="203847"><span class="nick" style="color:#bc80bd"><a href="#203847" label="[20:38:47]">&lt;xentrac&gt;</a></span><span class="message">*old</span></div><div class="line" id="204314"><span class="nick" style="color:#2e2a4a"><a href="#204314" label="[20:43:14]">&lt;OriansJ&gt;</a></span><span class="message">pder: yes we could do that easily in M2-Planet; the problem is GCC doesn't support universal function pointers and instead is limited to the forms like: typedef unsigned (*FUNCTION) (unsigned); which does include more type information than just naked function pointers</span></div><div class="line" id="204407"><span class="nick" style="color:#2e2a4a"><a href="#204407" label="[20:44:07]">&lt;OriansJ&gt;</a></span><span class="message">I'm also going to probably make some changes in run which would remove the need for the GET function pointer being passed.</span></div><div class="line" id="204652"><span class="nick" style="color:#2e2a4a"><a href="#204652" label="[20:46:52]">&lt;OriansJ&gt;</a></span><span class="message">dorion: I personally use Debian and Guix but if I wanted a minimal bootstrap distro; I'd just use guile as the init; add in gash, gash-utils, MesCC and slow-utils and you have a single binary system; able to build and bootstrap anything else you want. (although slow-utils kind of got left in the dust and could use someone else to take over its responsibility)</span></div><div class="line" id="204729"><span class="nick" style="color:#2e2a4a"><a href="#204729" label="[20:47:29]">&lt;OriansJ&gt;</a></span><span class="message">[as it is mescc-tools written in scheme]</span></div><div class="line" id="205002"><span class="nick" style="color:#2e2a4a"><a href="#205002" label="[20:50:02]">&lt;OriansJ&gt;</a></span><span class="message">deesix did alot of good work for it (That I seem to have lost ;_; )</span></div><div class="line" id="205123"><span class="nick" style="color:#80b1d3"><a href="#205123" label="[20:51:23]">&lt;fossy&gt;</a></span><span class="message">guile is too large for my liking, my (new) plan for such a thing is basically a kernel in m2-planet and a kaem init</span></div><div class="line" id="205326"><span class="nick" style="color:#2e2a4a"><a href="#205326" label="[20:53:26]">&lt;OriansJ&gt;</a></span><span class="message">fossy: fair; mes-m2 might only be 233,839bytes in size when built via M2-Planet but it still needs alot more love before it could even be considered fit for purpose. and guile statically built with GCC is big</span></div><div class="line" id="205423"><span class="nick" style="color:#80b1d3"><a href="#205423" label="[20:54:23]">&lt;fossy&gt;</a></span><span class="message">And then there is the precompiled modules</span></div><div class="line" id="210641"><span class="nick" style="color:#6b8072"><a href="#210641" label="[21:06:41]">&lt;siraben&gt;</a></span><span class="message">V: it does?</span></div><div class="line" id="210649"><span class="nick" style="color:#6b8072"><a href="#210649" label="[21:06:49]">&lt;siraben&gt;</a></span><span class="message">oh yeah, especially the unfree stuff</span></div><div class="line" id="210654"><span class="nick" style="color:#d9d9d9"><a href="#210654" label="[21:06:54]">&lt;V&gt;</a></span><span class="message">siraben: not just the unfree stuff</span></div><div class="line" id="210712"><span class="nick" style="color:#6b8072"><a href="#210712" label="[21:07:12]">&lt;siraben&gt;</a></span><span class="message">You could disable the cache and build everything from source</span></div><div class="line" id="210715"><span class="nick" style="color:#d9d9d9"><a href="#210715" label="[21:07:15]">&lt;V&gt;</a></span><span class="message">bunch of packages I recall there not being a bootstrap path for, just using vendor-provided binaries</span></div><div class="line" id="210720"><span class="nick" style="color:#6b8072"><a href="#210720" label="[21:07:20]">&lt;siraben&gt;</a></span><span class="message">Ah</span></div><div class="line" id="210723"><span class="nick" style="color:#d9d9d9"><a href="#210723" label="[21:07:23]">&lt;V&gt;</a></span><span class="message">I'm not even talking about the cache here</span></div><div class="line" id="210817"><span class="nick" style="color:#6b8072"><a href="#210817" label="[21:08:17]">&lt;siraben&gt;</a></span><span class="message">Does Guix build everything from source?</span></div><div class="line" id="210829"><span class="nick" style="color:#3c5b35"><a href="#210829" label="[21:08:29]">&lt;vagrantc&gt;</a></span><span class="message">all but ~60MB of bootstrap binaries</span></div><div class="line" id="210901"><span class="nick" style="color:#3c5b35"><a href="#210901" label="[21:09:01]">&lt;vagrantc&gt;</a></span><span class="message">oh, and there are a few other bootstrap binaries for... haskell maybe?</span></div><div class="line" id="211104"><span class="nick" style="color:#6b8072"><a href="#211104" label="[21:11:04]">&lt;siraben&gt;</a></span><span class="message">Establishing a clear bootstrap path for packages would be good for Nix</span></div><div class="line" id="211522"><span class="nick" style="color:#6c3d55"><a href="#211522" label="[21:15:22]">&lt;janneke&gt;</a></span><span class="message">siraben: the core nix bootstrap isn't too bad</span></div><div class="line" id="211737"><span class="nick" style="color:#6b8072"><a href="#211737" label="[21:17:37]">&lt;siraben&gt;</a></span><span class="message">janneke: how could I check that?</span></div><div class="line" id="211744"><span class="nick" style="color:#6b8072"><a href="#211744" label="[21:17:44]">&lt;siraben&gt;</a></span><span class="message">I've cross-compiled Nix itself for a different target</span></div><div class="line" id="211804"><span class="nick" style="color:#6b8072"><a href="#211804" label="[21:18:04]">&lt;siraben&gt;</a></span><span class="message">and it seems to work well</span></div><div class="line" id="212317"><span class="nick" style="color:#af8d2f"><a href="#212317" label="[21:23:17]">&lt;Darius&gt;</a></span><span class="message">belated happy scheme day, i didn't know</span></div><div class="line" id="212409"><span class="nick" style="color:#af8d2f"><a href="#212409" label="[21:24:09]">&lt;Darius&gt;</a></span><span class="message">we really must plan something special for the half-century mark</span></div><div class="line" id="214154"><span class="nick" style="color:#6b8072"><a href="#214154" label="[21:41:54]">&lt;siraben&gt;</a></span><span class="message">OriansJ: please merge <a rel="nofollow" href="https://github.com/oriansj/stage0/pull/35">https://github.com/oriansj/stage0/pull/35</a> </span></div><div class="line" id="214215"><span class="nick" style="color:#6b8072"><a href="#214215" label="[21:42:15]">&lt;siraben&gt;</a></span><span class="message">preserves the license headers but makes it more readable on GitHub</span></div><div class="line" id="214943"><span class="nick" style="color:#6c3d55"><a href="#214943" label="[21:49:43]">&lt;janneke&gt;</a></span><span class="message">siraben: i'm not familiar myself with the nix bootstrap, but i'm told it has no cycles</span></div><div class="line" id="214956"><span class="nick" style="color:#6c3d55"><a href="#214956" label="[21:49:56]">&lt;janneke&gt;</a></span><span class="message">ignoring all other (non core-c) binary roots</span></div><div class="line" id="215129"><span class="nick" style="color:#80b1d3"><a href="#215129" label="[21:51:29]">&lt;fossy&gt;</a></span><span class="message">Im trying to bring non binary bootstrapps to void for a whole ton of languages</span></div><div class="line" id="215137"><span class="nick" style="color:#80b1d3"><a href="#215137" label="[21:51:37]">&lt;fossy&gt;</a></span><span class="message">particularly rust</span></div><div class="line" id="215235"><span class="nick" style="color:#389600"><a href="#215235" label="[21:52:35]">&lt;rain1&gt;</a></span><span class="message">cool! how is it going?</span></div><div class="line" id="215717"><span class="nick" style="color:#80b1d3"><a href="#215717" label="[21:57:17]">&lt;fossy&gt;</a></span><span class="message">uh, opositionally</span></div><div class="line" id="215732"><span class="nick" style="color:#80b1d3"><a href="#215732" label="[21:57:32]">&lt;fossy&gt;</a></span><span class="message">if they dont accept it, I think ill just fork to an extent</span></div><div class="line" id="215852"><span class="nick" style="color:#80b1d3"><a href="#215852" label="[21:58:52]">&lt;fossy&gt;</a></span><span class="message">OriansJ: in M1, how would you create 16 bit code? (I.e. for x86 16 bit mode)</span></div><div class="line" id="222646"><span class="nick" style="color:#8dd3c7"><a href="#222646" label="[22:26:46]">&lt;pabs3&gt;</a></span><span class="message">which other languages are you working on?</span></div><br /></div></body></html>