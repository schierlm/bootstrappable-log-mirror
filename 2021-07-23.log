<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-07-23.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="001200"><span class="nick" style="color:#389600"><a href="#001200" label="[00:12:00]">&lt;oriansj&gt;</a></span><span class="message">stikonas: thank you for the fixes. Merged</span></div><div class="line" id="001448"><span class="nick" style="color:#389600"><a href="#001448" label="[00:14:48]">&lt;oriansj&gt;</a></span><span class="message">but yes hex0, hex1, hex2 and M0 are the 3 most tedious programs in the entire bootstrap. but yeah hex1 is the most annoying because of all the relative offsets and jumps.</span></div><div class="line" id="002113"><span class="nick" style="color:#2e2a4a"><a href="#002113" label="[00:21:13]">&lt;stikonas&gt;</a></span><span class="message">and kaem-minimal I guess</span></div><div class="line" id="002126"><span class="nick" style="color:#2e2a4a"><a href="#002126" label="[00:21:26]">&lt;stikonas&gt;</a></span><span class="message">that one is also written in hex0</span></div><div class="line" id="014344"><span class="nick" style="color:#6b8072"><a href="#014344" label="[01:43:44]">&lt;xentrac&gt;</a></span><span class="message">stikonas: what do you think of risc-v?</span></div><div class="line" id="014558"><span class="nick" style="color:#2e2a4a"><a href="#014558" label="[01:45:58]">&lt;stikonas&gt;</a></span><span class="message">well, assembly is easy to learn...</span></div><div class="line" id="014608"><span class="nick" style="color:#2e2a4a"><a href="#014608" label="[01:46:08]">&lt;stikonas&gt;</a></span><span class="message">not qualified to answer more</span></div><div class="line" id="030944"><span class="nick" style="color:#389600"><a href="#030944" label="[03:09:44]">&lt;oriansj&gt;</a></span><span class="message">well yeah 737 (of which 70bytes are just strings) vs 689bytes (just 8bytes of nulls at the end). So I guess hex1 just slightly is harder than kaem-minimal</span></div><div class="line" id="185040"><span class="nick" style="color:#2e2a4a"><a href="#185040" label="[18:50:40]">&lt;stikonas&gt;</a></span><span class="message">xentrac: so after looking a bit more at risc-v it seems that I'll have to do quite a bit more work... Some opcodes (jumps in particular) have a fairly complicated encodings (possibly to make hardware implementations simpler)</span></div><div class="line" id="185141"><span class="nick" style="color:#2e2a4a"><a href="#185141" label="[18:51:41]">&lt;stikonas&gt;</a></span><span class="message">so what I have now would work on *.hex1 code written for  e.g. x86 or x86_64 but risc-v .hex1 would need some extentions to deal with it (and hence need to write some more &quot;functions&quot;)</span></div><div class="line" id="185252"><span class="nick" style="color:#2e2a4a"><a href="#185252" label="[18:52:52]">&lt;stikonas&gt;</a></span><span class="message">e.g. jumps encode addess into bit 20, bits 10 to 1, bit 11, bits 19 to 12</span></div><div class="line" id="185322"><span class="nick" style="color:#2e2a4a"><a href="#185322" label="[18:53:22]">&lt;stikonas&gt;</a></span><span class="message">and there are a couple of other different schemes for some other opcodes (e.g. branching ones)</span></div><div class="line" id="192436"><span class="nick" style="color:#80b1d3"><a href="#192436" label="[19:24:36]">&lt;Hagfish&gt;</a></span><span class="message">that seems like pretty solid research</span></div><div class="line" id="200239"><span class="nick" style="color:#2e2a4a"><a href="#200239" label="[20:02:39]">&lt;stikonas&gt;</a></span><span class="message">Hagfish: that's just reading risc-v specs...</span></div><div class="line" id="200336"><span class="nick" style="color:#2e2a4a"><a href="#200336" label="[20:03:36]">&lt;stikonas&gt;</a></span><span class="message">you can't write *.hex0 code without that (or even later ones e.g. .hex2)</span></div><div class="line" id="201215"><span class="nick" style="color:#6d2462"><a href="#201215" label="[20:12:15]">&lt;ekaitz&gt;</a></span><span class="message">stikonas: Yeah the encoding is wild sometimes</span></div><div class="line" id="201237"><span class="nick" style="color:#6d2462"><a href="#201237" label="[20:12:37]">&lt;ekaitz&gt;</a></span><span class="message">are you going to make the hex1 step?</span></div><div class="line" id="201253"><span class="nick" style="color:#6d2462"><a href="#201253" label="[20:12:53]">&lt;ekaitz&gt;</a></span><span class="message">i have some experience on risc-v (i made the hex0) so I can help</span></div><div class="line" id="201526"><span class="nick" style="color:#2e2a4a"><a href="#201526" label="[20:15:26]">&lt;stikonas&gt;</a></span><span class="message">ekaitz: I'm almost there with hex1-x86.hex0 for risc-v</span></div><div class="line" id="201536"><span class="nick" style="color:#2e2a4a"><a href="#201536" label="[20:15:36]">&lt;stikonas&gt;</a></span><span class="message">ekaitz: if you want, you can review my low-level prototype</span></div><div class="line" id="201542"><span class="nick" style="color:#6d2462"><a href="#201542" label="[20:15:42]">&lt;ekaitz&gt;</a></span><span class="message">sure</span></div><div class="line" id="201545"><span class="nick" style="color:#6d2462"><a href="#201545" label="[20:15:45]">&lt;ekaitz&gt;</a></span><span class="message">link me!</span></div><div class="line" id="201615"><span class="nick" style="color:#2e2a4a"><a href="#201615" label="[20:16:15]">&lt;stikonas&gt;</a></span><span class="message">it does not yet handle risc-v encoding but deals just fine with x86.hex1 files</span></div><div class="line" id="201646"><span class="nick" style="color:#2e2a4a"><a href="#201646" label="[20:16:46]">&lt;stikonas&gt;</a></span><span class="message">let me make a commit...</span></div><div class="line" id="201656"><span class="nick" style="color:#2e2a4a"><a href="#201656" label="[20:16:56]">&lt;stikonas&gt;</a></span><span class="message">it will be easier to push it somewhere than just pastebin</span></div><div class="line" id="201715"><span class="nick" style="color:#6d2462"><a href="#201715" label="[20:17:15]">&lt;ekaitz&gt;</a></span><span class="message">great</span></div><div class="line" id="201738"><span class="nick" style="color:#6d2462"><a href="#201738" label="[20:17:38]">&lt;ekaitz&gt;</a></span><span class="message">is x86 encoding simpler than risc-v or are we using a subset of x86 there?</span></div><div class="line" id="201747"><span class="nick" style="color:#6d2462"><a href="#201747" label="[20:17:47]">&lt;ekaitz&gt;</a></span><span class="message">afaik x86 can get complicated too</span></div><div class="line" id="201936"><span class="nick" style="color:#2e2a4a"><a href="#201936" label="[20:19:36]">&lt;stikonas&gt;</a></span><span class="message">well, I mean immediates are in one location</span></div><div class="line" id="202013"><span class="nick" style="color:#2e2a4a"><a href="#202013" label="[20:20:13]">&lt;stikonas&gt;</a></span><span class="message">ekaitz: <a rel="nofollow" href="https://github.com/stikonas/stage0-posix/commit/acf54e30ab927a4d02ad6afe62ed1e3d3f544ea4">https://github.com/stikonas/stage0-posix/commit/acf54e30ab927a4d02ad6afe62ed1e3d3f544ea4</a> </span></div><div class="line" id="202128"><span class="nick" style="color:#6d2462"><a href="#202128" label="[20:21:28]">&lt;ekaitz&gt;</a></span><span class="message">thanks! I'll take a look to it right now</span></div><div class="line" id="202138"><span class="nick" style="color:#6d2462"><a href="#202138" label="[20:21:38]">&lt;ekaitz&gt;</a></span><span class="message">lol you added me in the license header :D</span></div><div class="line" id="202258"><span class="nick" style="color:#2e2a4a"><a href="#202258" label="[20:22:58]">&lt;stikonas&gt;</a></span><span class="message">well, I did &quot;steal&quot; some of the code</span></div><div class="line" id="202310"><span class="nick" style="color:#2e2a4a"><a href="#202310" label="[20:23:10]">&lt;stikonas&gt;</a></span><span class="message">actually I started from hex0 code and modified it</span></div><div class="line" id="202321"><span class="nick" style="color:#2e2a4a"><a href="#202321" label="[20:23:21]">&lt;stikonas&gt;</a></span><span class="message">my WIP hex0'fying: <a rel="nofollow" href="https://stikonas.eu/files/bootstrap/hex1_x86.hex0.txt">https://stikonas.eu/files/bootstrap/hex1_x86.hex0.txt</a> </span></div><div class="line" id="202445"><span class="nick" style="color:#2e2a4a"><a href="#202445" label="[20:24:45]">&lt;stikonas&gt;</a></span><span class="message">ekaitz: would be worth looking at that .table stuff (at the very end), I was not completely sure what to do there</span></div><div class="line" id="202541"><span class="nick" style="color:#6d2462"><a href="#202541" label="[20:25:41]">&lt;ekaitz&gt;</a></span><span class="message">ok i'll take a look right now, but I'll take a deeper look tomorrow</span></div><div class="line" id="202552"><span class="nick" style="color:#6d2462"><a href="#202552" label="[20:25:52]">&lt;ekaitz&gt;</a></span><span class="message">did you decide how to assemble this?</span></div><div class="line" id="202603"><span class="nick" style="color:#2e2a4a"><a href="#202603" label="[20:26:03]">&lt;stikonas&gt;</a></span><span class="message">well, eventually with hex0</span></div><div class="line" id="202614"><span class="nick" style="color:#2e2a4a"><a href="#202614" label="[20:26:14]">&lt;stikonas&gt;</a></span><span class="message">oh, you mean into .hex0 file</span></div><div class="line" id="202631"><span class="nick" style="color:#2e2a4a"><a href="#202631" label="[20:26:31]">&lt;stikonas&gt;</a></span><span class="message">I'm doing it now in <a rel="nofollow" href="https://stikonas.eu/files/bootstrap/hex1_x86.hex0.txt">https://stikonas.eu/files/bootstrap/hex1_x86.hex0.txt</a> </span></div><div class="line" id="202646"><span class="nick" style="color:#2e2a4a"><a href="#202646" label="[20:26:46]">&lt;stikonas&gt;</a></span><span class="message">first pass is almost done (non branching/jumping) instructoins</span></div><div class="line" id="202708"><span class="nick" style="color:#2e2a4a"><a href="#202708" label="[20:27:08]">&lt;stikonas&gt;</a></span><span class="message">I'm doing it manually...</span></div><div class="line" id="202716"><span class="nick" style="color:#6d2462"><a href="#202716" label="[20:27:16]">&lt;ekaitz&gt;</a></span><span class="message">let me give you a pointer</span></div><div class="line" id="202733"><span class="nick" style="color:#6d2462"><a href="#202733" label="[20:27:33]">&lt;ekaitz&gt;</a></span><span class="message"> <a rel="nofollow" href="http://git.elenq.tech/pysc-v/">http://git.elenq.tech/pysc-v/</a> </span></div><div class="line" id="202735"><span class="nick" style="color:#2e2a4a"><a href="#202735" label="[20:27:35]">&lt;stikonas&gt;</a></span><span class="message">I printed out opcode table  from risc-v manual...</span></div><div class="line" id="202756"><span class="nick" style="color:#6d2462"><a href="#202756" label="[20:27:56]">&lt;ekaitz&gt;</a></span><span class="message">let me give you a small extra file</span></div><div class="line" id="202802"><span class="nick" style="color:#6d2462"><a href="#202802" label="[20:28:02]">&lt;ekaitz&gt;</a></span><span class="message">with that you can assemble things better</span></div><div class="line" id="202837"><span class="nick" style="color:#2e2a4a"><a href="#202837" label="[20:28:37]">&lt;stikonas&gt;</a></span><span class="message">hmm, but is it &quot;legal&quot;</span></div><div class="line" id="202848"><span class="nick" style="color:#2e2a4a"><a href="#202848" label="[20:28:48]">&lt;stikonas&gt;</a></span><span class="message">I mean I can obtain the same things from gnu as...</span></div><div class="line" id="202858"><span class="nick" style="color:#6d2462"><a href="#202858" label="[20:28:58]">&lt;ekaitz&gt;</a></span><span class="message">alright I pushed the baseassembler file</span></div><div class="line" id="203011"><span class="nick" style="color:#6d2462"><a href="#203011" label="[20:30:11]">&lt;ekaitz&gt;</a></span><span class="message">the pyscv/baseassembler.py file is able to assemble instructions and give you the hex0 value</span></div><div class="line" id="203035"><span class="nick" style="color:#6d2462"><a href="#203035" label="[20:30:35]">&lt;ekaitz&gt;</a></span><span class="message">you write add(x('a0'), x('a1'))</span></div><div class="line" id="203039"><span class="nick" style="color:#6d2462"><a href="#203039" label="[20:30:39]">&lt;ekaitz&gt;</a></span><span class="message">and it returns the value</span></div><div class="line" id="203044"><span class="nick" style="color:#6d2462"><a href="#203044" label="[20:30:44]">&lt;ekaitz&gt;</a></span><span class="message">something like that more or less</span></div><div class="line" id="203123"><span class="nick" style="color:#6d2462"><a href="#203123" label="[20:31:23]">&lt;ekaitz&gt;</a></span><span class="message">that's going to save you a lot of time</span></div><div class="line" id="203133"><span class="nick" style="color:#6d2462"><a href="#203133" label="[20:31:33]">&lt;ekaitz&gt;</a></span><span class="message">it's nothing you can't do by hand, but it's easier</span></div><div class="line" id="203155"><span class="nick" style="color:#6d2462"><a href="#203155" label="[20:31:55]">&lt;ekaitz&gt;</a></span><span class="message">i wrote about the process here: <a rel="nofollow" href="https://ekaitz.elenq.tech/hex0.html">https://ekaitz.elenq.tech/hex0.html</a> </span></div><div class="line" id="203230"><span class="nick" style="color:#2e2a4a"><a href="#203230" label="[20:32:30]">&lt;stikonas&gt;</a></span><span class="message">well, we'll see...</span></div><div class="line" id="203238"><span class="nick" style="color:#2e2a4a"><a href="#203238" label="[20:32:38]">&lt;stikonas&gt;</a></span><span class="message">it's not too hard with opcode table...</span></div><div class="line" id="203249"><span class="nick" style="color:#2e2a4a"><a href="#203249" label="[20:32:49]">&lt;stikonas&gt;</a></span><span class="message">and I could do quite a bit of copy-paste</span></div><div class="line" id="203258"><span class="nick" style="color:#2e2a4a"><a href="#203258" label="[20:32:58]">&lt;stikonas&gt;</a></span><span class="message">since there are a lot of identical instructions...</span></div><div class="line" id="203310"><span class="nick" style="color:#6d2462"><a href="#203310" label="[20:33:10]">&lt;ekaitz&gt;</a></span><span class="message">when you assemble branches it gets messy</span></div><div class="line" id="203318"><span class="nick" style="color:#2e2a4a"><a href="#203318" label="[20:33:18]">&lt;stikonas&gt;</a></span><span class="message">yeah, that's true...</span></div><div class="line" id="203322"><span class="nick" style="color:#6d2462"><a href="#203322" label="[20:33:22]">&lt;ekaitz&gt;</a></span><span class="message">because you have to split bit values and convert and all that</span></div><div class="line" id="203335"><span class="nick" style="color:#2e2a4a"><a href="#203335" label="[20:33:35]">&lt;stikonas&gt;</a></span><span class="message">well, that's what I still have to teach to hex1</span></div><div class="line" id="203349"><span class="nick" style="color:#6d2462"><a href="#203349" label="[20:33:49]">&lt;ekaitz&gt;</a></span><span class="message">that code is an unfinished assembler I'm writting and I decided to reuse part of it for this :)</span></div><div class="line" id="203409"><span class="nick" style="color:#6d2462"><a href="#203409" label="[20:34:09]">&lt;ekaitz&gt;</a></span><span class="message">and it saved me A LOT of time</span></div><div class="line" id="203432"><span class="nick" style="color:#6d2462"><a href="#203432" label="[20:34:32]">&lt;ekaitz&gt;</a></span><span class="message">and saved me from chances of making it wrong...</span></div><div class="line" id="203504"><span class="nick" style="color:#2e2a4a"><a href="#203504" label="[20:35:04]">&lt;stikonas&gt;</a></span><span class="message">at least when writing hex2, this won't be a problem, hex1 will already know how to do these calculations</span></div><div class="line" id="203611"><span class="nick" style="color:#6d2462"><a href="#203611" label="[20:36:11]">&lt;ekaitz&gt;</a></span><span class="message">yeah that's true</span></div><div class="line" id="203625"><span class="nick" style="color:#6d2462"><a href="#203625" label="[20:36:25]">&lt;ekaitz&gt;</a></span><span class="message">hex1 is going to be critical here</span></div><div class="line" id="203718"><span class="nick" style="color:#6d2462"><a href="#203718" label="[20:37:18]">&lt;ekaitz&gt;</a></span><span class="message">i'm not very focused today but feel free to ping me with this, because I want to get a little bit more involved on the process</span></div><div class="line" id="203835"><span class="nick" style="color:#2e2a4a"><a href="#203835" label="[20:38:35]">&lt;stikonas&gt;</a></span><span class="message">yeah, I'll think over the weekend how to handle immediates</span></div><div class="line" id="203918"><span class="nick" style="color:#2e2a4a"><a href="#203918" label="[20:39:18]">&lt;stikonas&gt;</a></span><span class="message">probably not too much today either</span></div><div class="line" id="204059"><span class="nick" style="color:#2e2a4a"><a href="#204059" label="[20:40:59]">&lt;stikonas&gt;</a></span><span class="message">ekaitz: by the way, do we need that stdout stuff in hex0?</span></div><div class="line" id="204119"><span class="nick" style="color:#2e2a4a"><a href="#204119" label="[20:41:19]">&lt;stikonas&gt;</a></span><span class="message">getting rid of it would reduce bootstrap binary a bit</span></div><div class="line" id="204130"><span class="nick" style="color:#2e2a4a"><a href="#204130" label="[20:41:30]">&lt;stikonas&gt;</a></span><span class="message">I don't mind in in later hex1 and hex2 though</span></div><div class="line" id="204252"><span class="nick" style="color:#6b8072"><a href="#204252" label="[20:42:52]">&lt;xentrac&gt;</a></span><span class="message">stikonas: yeah, the RISC-V encodings are definitely a PITA.  x86 encoding is a lot simpler for software</span></div><div class="line" id="204306"><span class="nick" style="color:#6b8072"><a href="#204306" label="[20:43:06]">&lt;xentrac&gt;</a></span><span class="message">there's only like 6 instruction formats in RISC-V (without the C extension) though</span></div><div class="line" id="204324"><span class="nick" style="color:#6d2462"><a href="#204324" label="[20:43:24]">&lt;ekaitz&gt;</a></span><span class="message">stikonas: I just copied what it was done in others i think, feel free to remove what is not needed</span></div><div class="line" id="204458"><span class="nick" style="color:#6b8072"><a href="#204458" label="[20:44:58]">&lt;xentrac&gt;</a></span><span class="message">in hardware switching around the order of bits is easy (it's just routing wires) while having the bit field locations be conditional is hard (you have to add more layers of muxes, which slows down the whole computer)</span></div><div class="line" id="204508"><span class="nick" style="color:#6b8072"><a href="#204508" label="[20:45:08]">&lt;xentrac&gt;</a></span><span class="message">in software it's exactly the opposite</span></div><div class="line" id="204540"><span class="nick" style="color:#2e2a4a"><a href="#204540" label="[20:45:40]">&lt;stikonas&gt;</a></span><span class="message">well, hardware is harder in general than software</span></div><div class="line" id="204553"><span class="nick" style="color:#2e2a4a"><a href="#204553" label="[20:45:53]">&lt;stikonas&gt;</a></span><span class="message">so there is some sense in making hardware implementation easier</span></div><div class="line" id="204611"><span class="nick" style="color:#6b8072"><a href="#204611" label="[20:46:11]">&lt;xentrac&gt;</a></span><span class="message">I don't know if that's true</span></div><div class="line" id="204618"><span class="nick" style="color:#6d2462"><a href="#204618" label="[20:46:18]">&lt;ekaitz&gt;</a></span><span class="message">xentrac: it is true :)</span></div><div class="line" id="204641"><span class="nick" style="color:#6d2462"><a href="#204641" label="[20:46:41]">&lt;ekaitz&gt;</a></span><span class="message">routing is not for free, changing the order of some cables has HUGE impact in the silicon layout</span></div><div class="line" id="204651"><span class="nick" style="color:#6b8072"><a href="#204651" label="[20:46:51]">&lt;xentrac&gt;</a></span><span class="message">but when you're talking about moving work between the compiler and the hardware, you'll tend to get better performance if the compiler does it</span></div><div class="line" id="204712"><span class="nick" style="color:#6b8072"><a href="#204712" label="[20:47:12]">&lt;xentrac&gt;</a></span><span class="message">ekaitz: yeah, but not so much on the propagation delay</span></div><div class="line" id="204759"><span class="nick" style="color:#6b8072"><a href="#204759" label="[20:47:59]">&lt;xentrac&gt;</a></span><span class="message">that is, if you can choose between doing something like moving the sign bit to a weird location at the time you compile an instruction, or at the time you execute it, you should probably do it when you compile it</span></div><div class="line" id="204831"><span class="nick" style="color:#6b8072"><a href="#204831" label="[20:48:31]">&lt;xentrac&gt;</a></span><span class="message">because typically you run instructions more than once after you compile them, often trillions of times</span></div><div class="line" id="205007"><span class="nick" style="color:#6b8072"><a href="#205007" label="[20:50:07]">&lt;xentrac&gt;</a></span><span class="message">that rule can mislead you (Itanic sank, in part, because of hoping that compilers would be better at instruction scheduling than OoO hardware, which turned out to be wrong) but it's pretty often valid</span></div><div class="line" id="205056"><span class="nick" style="color:#6d2462"><a href="#205056" label="[20:50:56]">&lt;ekaitz&gt;</a></span><span class="message">sure</span></div><br /></div></body></html>