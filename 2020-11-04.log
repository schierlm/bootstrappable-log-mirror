<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-11-04.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="132704"><span class="nick" style="color:#8dd3c7"><a href="#132704" label="[13:27:04]">&lt;siraben&gt;</a></span><span class="message">Hello, any Nix users here?</span></div><div class="line" id="132712"><span class="nick" style="color:#2e2a4a"><a href="#132712" label="[13:27:12]">&lt;xentrac&gt;</a></span><span class="message">haha</span></div><div class="line" id="132727"><span class="nick" style="color:#6b8072"><a href="#132727" label="[13:27:27]">&lt;rain1&gt;</a></span><span class="message">not atm but i tried nix in the past</span></div><div class="line" id="132809"><span class="nick" style="color:#2e2a4a"><a href="#132809" label="[13:28:09]">&lt;xentrac&gt;</a></span><span class="message">certainly many of us have been strongly influenced by nix</span></div><div class="line" id="133608"><span class="nick" style="color:#80b1d3"><a href="#133608" label="[13:36:08]">&lt;OriansJ&gt;</a></span><span class="message">siraben: how can we help?</span></div><div class="line" id="133714"><span class="nick" style="color:#8dd3c7"><a href="#133714" label="[13:37:14]">&lt;siraben&gt;</a></span><span class="message">OriansJ:  I was wondering if it was possible to build Guix's small bootstrap using Nix</span></div><div class="line" id="133736"><span class="nick" style="color:#8dd3c7"><a href="#133736" label="[13:37:36]">&lt;siraben&gt;</a></span><span class="message">Or bootstrapping TCC/GCC from stage0, if that is done.</span></div><div class="line" id="133801"><span class="nick" style="color:#80b1d3"><a href="#133801" label="[13:38:01]">&lt;OriansJ&gt;</a></span><span class="message">siraben: that would be a yes (as of the last time I checked) but stage0 to MesCC isn't complete yet</span></div><div class="line" id="133831"><span class="nick" style="color:#8dd3c7"><a href="#133831" label="[13:38:31]">&lt;siraben&gt;</a></span><span class="message">OriansJ: Do you know where I can find that Nix derivation?</span></div><div class="line" id="133846"><span class="nick" style="color:#8dd3c7"><a href="#133846" label="[13:38:46]">&lt;siraben&gt;</a></span><span class="message">What's the status of the stage0 project, is it still active?</span></div><div class="line" id="133847"><span class="nick" style="color:#80b1d3"><a href="#133847" label="[13:38:47]">&lt;OriansJ&gt;</a></span><span class="message">it is quite easy to build Guix's bootstrap binaries (it is mostly just building guile)</span></div><div class="line" id="133902"><span class="nick" style="color:#80b1d3"><a href="#133902" label="[13:39:02]">&lt;OriansJ&gt;</a></span><span class="message">statically of course</span></div><div class="line" id="133937"><span class="nick" style="color:#6b8072"><a href="#133937" label="[13:39:37]">&lt;rain1&gt;</a></span><span class="message">afaict there is no nix derivation, but it would be a nice thing to have</span></div><div class="line" id="134009"><span class="nick" style="color:#80b1d3"><a href="#134009" label="[13:40:09]">&lt;OriansJ&gt;</a></span><span class="message">the status of the stage0 project is I am slowly making progress. The jump from getting a working C compiler to a suitable scheme turned out larger than expected.</span></div><div class="line" id="134043"><span class="nick" style="color:#8dd3c7"><a href="#134043" label="[13:40:43]">&lt;siraben&gt;</a></span><span class="message">Oh looks like there's a mention of TinyCC bootstrap via guile and mescc <a rel="nofollow" href="https://reproducible-builds.org/files/ReproducibleSummit4EventDocumentation.pdf">https://reproducible-builds.org/files/ReproducibleSummit4EventDocumentation.pdf</a>  on page 69</span></div><div class="line" id="134058"><span class="nick" style="color:#8dd3c7"><a href="#134058" label="[13:40:58]">&lt;siraben&gt;</a></span><span class="message">Requires i686-linux</span></div><div class="line" id="134132"><span class="nick" style="color:#8dd3c7"><a href="#134132" label="[13:41:32]">&lt;siraben&gt;</a></span><span class="message">OriansJ: I see. So is the goal to write a Scheme interpreter to run the mescc bootstrap?</span></div><div class="line" id="134142"><span class="nick" style="color:#80b1d3"><a href="#134142" label="[13:41:42]">&lt;OriansJ&gt;</a></span><span class="message">siraben: MesCC can run on guile and be used to build TCC and do the full bootstrap; there are bash shell replacements with gash and core-utils replacements with gash-utils</span></div><div class="line" id="134206"><span class="nick" style="color:#8dd3c7"><a href="#134206" label="[13:42:06]">&lt;siraben&gt;</a></span><span class="message">I see. And how small does the initial Scheme have to be? R5RS conforming?</span></div><div class="line" id="134301"><span class="nick" style="color:#80b1d3"><a href="#134301" label="[13:43:01]">&lt;OriansJ&gt;</a></span><span class="message">siraben: well that is the hard part; to run guix, one has to be very compatible with guile but most of the guix devels do not restrict themselves to a subset of guile primitives while programming.</span></div><div class="line" id="134330"><span class="nick" style="color:#8dd3c7"><a href="#134330" label="[13:43:30]">&lt;siraben&gt;</a></span><span class="message">OriansJ: do you need help with the scheme part?</span></div><div class="line" id="134346"><span class="nick" style="color:#8dd3c7"><a href="#134346" label="[13:43:46]">&lt;siraben&gt;</a></span><span class="message">Where is development taking place?</span></div><div class="line" id="134355"><span class="nick" style="color:#80b1d3"><a href="#134355" label="[13:43:55]">&lt;OriansJ&gt;</a></span><span class="message">siraben: I never reject help</span></div><div class="line" id="134434"><span class="nick" style="color:#80b1d3"><a href="#134434" label="[13:44:34]">&lt;OriansJ&gt;</a></span><span class="message"> <a rel="nofollow" href="http://github.com/oriansj/mes-m2">http://github.com/oriansj/mes-m2</a> </span></div><div class="line" id="134609"><span class="nick" style="color:#80b1d3"><a href="#134609" label="[13:46:09]">&lt;OriansJ&gt;</a></span><span class="message">it contains a snapshot of MesCC which can be run using the example guile command</span></div><div class="line" id="134609"><span class="nick" style="color:#8dd3c7"><a href="#134609" label="[13:46:09]">&lt;siraben&gt;</a></span><span class="message">Nice. Which parts are still remaining to be implemented?</span></div><div class="line" id="134657"><span class="nick" style="color:#80b1d3"><a href="#134657" label="[13:46:57]">&lt;OriansJ&gt;</a></span><span class="message">siraben: Well right now fixing macro support is the big problem (<a rel="nofollow" href="https://github.com/oriansj/mes-m2/blob/master/mes_macro.c">https://github.com/oriansj/mes-m2/blob/master/mes_macro.c</a>) </span></div><div class="line" id="134704"><span class="nick" style="color:#8dd3c7"><a href="#134704" label="[13:47:04]">&lt;siraben&gt;</a></span><span class="message">Also, this might be interesting, <a rel="nofollow" href="https://github.com/blynn/compiler">https://github.com/blynn/compiler</a>  (bootstrapping from Haskell)</span></div><div class="line" id="134716"><span class="nick" style="color:#8dd3c7"><a href="#134716" label="[13:47:16]">&lt;siraben&gt;</a></span><span class="message">From ANSI C to a mini Haskell</span></div><div class="line" id="134749"><span class="nick" style="color:#8dd3c7"><a href="#134749" label="[13:47:49]">&lt;siraben&gt;</a></span><span class="message">Ah hygienic macro expansion.</span></div><div class="line" id="134834"><span class="nick" style="color:#8dd3c7"><a href="#134834" label="[13:48:34]">&lt;siraben&gt;</a></span><span class="message">Why do that part in C instead of Scheme?</span></div><div class="line" id="135019"><span class="nick" style="color:#80b1d3"><a href="#135019" label="[13:50:19]">&lt;OriansJ&gt;</a></span><span class="message">siraben: so that evaluation of exit or display do not occur doing the macro expasion.</span></div><div class="line" id="135059"><span class="nick" style="color:#8dd3c7"><a href="#135059" label="[13:50:59]">&lt;siraben&gt;</a></span><span class="message">OriansJ:  what do you mean by that?</span></div><div class="line" id="135235"><span class="nick" style="color:#80b1d3"><a href="#135235" label="[13:52:35]">&lt;OriansJ&gt;</a></span><span class="message">so when (define-macro (backwards . body) is used; and (backwards (display 1) (display 2) (display 3)) it shows 3 2 1 and not 1 2 3</span></div><div class="line" id="135301"><span class="nick" style="color:#8dd3c7"><a href="#135301" label="[13:53:01]">&lt;siraben&gt;</a></span><span class="message">I see.</span></div><div class="line" id="135404"><span class="nick" style="color:#80b1d3"><a href="#135404" label="[13:54:04]">&lt;OriansJ&gt;</a></span><span class="message">minor truncation: (define-macro (backwards . body) (cons 'begin (reverse body)))</span></div><div class="line" id="135439"><span class="nick" style="color:#80b1d3"><a href="#135439" label="[13:54:39]">&lt;OriansJ&gt;</a></span><span class="message">now mes-m2 does that correctly</span></div><div class="line" id="135454"><span class="nick" style="color:#8dd3c7"><a href="#135454" label="[13:54:54]">&lt;siraben&gt;</a></span><span class="message">Are you going to implement syntax objects like in R5RS?</span></div><div class="line" id="135530"><span class="nick" style="color:#80b1d3"><a href="#135530" label="[13:55:30]">&lt;OriansJ&gt;</a></span><span class="message">siraben: I am avoiding syntax-case for as long as possible</span></div><div class="line" id="135539"><span class="nick" style="color:#8dd3c7"><a href="#135539" label="[13:55:39]">&lt;siraben&gt;</a></span><span class="message">Oh, how come?</span></div><div class="line" id="135552"><span class="nick" style="color:#8dd3c7"><a href="#135552" label="[13:55:52]">&lt;siraben&gt;</a></span><span class="message">I'd imagine implementing that would let you go so much higher up</span></div><div class="line" id="135608"><span class="nick" style="color:#80b1d3"><a href="#135608" label="[13:56:08]">&lt;OriansJ&gt;</a></span><span class="message">siraben: well if you wish to write it in C code; I will accept it</span></div><div class="line" id="135637"><span class="nick" style="color:#80b1d3"><a href="#135637" label="[13:56:37]">&lt;OriansJ&gt;</a></span><span class="message">as no one has ever implmemented it in C</span></div><div class="line" id="135650"><span class="nick" style="color:#8dd3c7"><a href="#135650" label="[13:56:50]">&lt;siraben&gt;</a></span><span class="message">I've seen it done in Scheme 9 From Empty Space</span></div><div class="line" id="135740"><span class="nick" style="color:#8dd3c7"><a href="#135740" label="[13:57:40]">&lt;siraben&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/reflectionalist/S9fES/blob/0ade11593cf35f112e197026886fc819042058dd/s9.c#L1850">https://github.com/reflectionalist/S9fES/blob/0ade11593cf35f112e197026886fc819042058dd/s9.c#L1850</a> </span></div><div class="line" id="135753"><span class="nick" style="color:#80b1d3"><a href="#135753" label="[13:57:53]">&lt;OriansJ&gt;</a></span><span class="message">ok; then it would be mechanicial work to reduce it to the C subset used in M2-Planet</span></div><div class="line" id="135815"><span class="nick" style="color:#8dd3c7"><a href="#135815" label="[13:58:15]">&lt;siraben&gt;</a></span><span class="message">Ah, interesting.</span></div><div class="line" id="135922"><span class="nick" style="color:#80b1d3"><a href="#135922" label="[13:59:22]">&lt;OriansJ&gt;</a></span><span class="message">but I must be going to work; I'll check back over lunch</span></div><div class="line" id="135928"><span class="nick" style="color:#8dd3c7"><a href="#135928" label="[13:59:28]">&lt;siraben&gt;</a></span><span class="message">Looks like the entire implementation is a single file, tool.</span></div><div class="line" id="135931"><span class="nick" style="color:#8dd3c7"><a href="#135931" label="[13:59:31]">&lt;siraben&gt;</a></span><span class="message">Ok, talk later.</span></div><div class="line" id="140021"><span class="nick" style="color:#6b8072"><a href="#140021" label="[14:00:21]">&lt;rain1&gt;</a></span><span class="message">thanks for the blynn link siraben</span></div><div class="line" id="140040"><span class="nick" style="color:#8dd3c7"><a href="#140040" label="[14:00:40]">&lt;siraben&gt;</a></span><span class="message">rain1: no problem! do you find it interesting?</span></div><div class="line" id="140048"><span class="nick" style="color:#6b8072"><a href="#140048" label="[14:00:48]">&lt;rain1&gt;</a></span><span class="message">yeah</span></div><div class="line" id="140056"><span class="nick" style="color:#8dd3c7"><a href="#140056" label="[14:00:56]">&lt;siraben&gt;</a></span><span class="message">It's the most complete toy implementation of Haskell I've seen</span></div><div class="line" id="140206"><span class="nick" style="color:#8dd3c7"><a href="#140206" label="[14:02:06]">&lt;siraben&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/blynn/compiler/blob/master/vm.c">https://github.com/blynn/compiler/blob/master/vm.c</a> </span></div><div class="line" id="140237"><span class="nick" style="color:#8dd3c7"><a href="#140237" label="[14:02:37]">&lt;siraben&gt;</a></span><span class="message">Oh I should also link his blog posts where he explains it all</span></div><div class="line" id="140239"><span class="nick" style="color:#6b8072"><a href="#140239" label="[14:02:39]">&lt;rain1&gt;</a></span><span class="message"> <a rel="nofollow" href="https://bootstrapping.miraheze.org/wiki/Main_Page">https://bootstrapping.miraheze.org/wiki/Main_Page</a>  added it to my page</span></div><div class="line" id="140312"><span class="nick" style="color:#8dd3c7"><a href="#140312" label="[14:03:12]">&lt;siraben&gt;</a></span><span class="message"> <a rel="nofollow" href="https://crypto.stanford.edu/~blynn/compiler/quest.html">https://crypto.stanford.edu/~blynn/compiler/quest.html</a> </span></div><div class="line" id="140338"><span class="nick" style="color:#8dd3c7"><a href="#140338" label="[14:03:38]">&lt;siraben&gt;</a></span><span class="message">To summarize, the core language is SKI combinators (with extra combinators for brevity)</span></div><div class="line" id="140431"><span class="nick" style="color:#8dd3c7"><a href="#140431" label="[14:04:31]">&lt;siraben&gt;</a></span><span class="message">Then each successive compiler can parse more and more, such as lambda calculus, then adding ADTs, typechecking, typeclasses</span></div><div class="line" id="140529"><span class="nick" style="color:#8dd3c7"><a href="#140529" label="[14:05:29]">&lt;siraben&gt;</a></span><span class="message">I don't have time ATM but writing a Scheme in Haskell to bootstrap mes-m2 would be possible</span></div><div class="line" id="140632"><span class="nick" style="color:#6b8072"><a href="#140632" label="[14:06:32]">&lt;rain1&gt;</a></span><span class="message">One thing I think would be good is to formalize the sets of packages we need at every stage to build the next thing</span></div><div class="line" id="141110"><span class="nick" style="color:#8dd3c7"><a href="#141110" label="[14:11:10]">&lt;siraben&gt;</a></span><span class="message">What does it look like right now?</span></div><div class="line" id="141439"><span class="nick" style="color:#8dd3c7"><a href="#141439" label="[14:14:39]">&lt;siraben&gt;</a></span><span class="message">Here's one I have in mind now; ASM → SKI → Lambda calculus → mini Haskell → R5RS Scheme</span></div><div class="line" id="141506"><span class="nick" style="color:#8dd3c7"><a href="#141506" label="[14:15:06]">&lt;siraben&gt;</a></span><span class="message">Or, ASM → SKI → Lambda calculus → R5RS Scheme</span></div><div class="line" id="141525"><span class="nick" style="color:#8dd3c7"><a href="#141525" label="[14:15:25]">&lt;siraben&gt;</a></span><span class="message">as an alternate to the current mes-m2 path</span></div><div class="line" id="141557"><span class="nick" style="color:#6b8072"><a href="#141557" label="[14:15:57]">&lt;rain1&gt;</a></span><span class="message">the thing about thath is that SKI code is hard to read, isn't it? it's almost a binary blob</span></div><div class="line" id="141735"><span class="nick" style="color:#8dd3c7"><a href="#141735" label="[14:17:35]">&lt;siraben&gt;</a></span><span class="message">Yeah, but it can be verified very easily. Does that help with trusting trust?</span></div><div class="line" id="141758"><span class="nick" style="color:#8dd3c7"><a href="#141758" label="[14:17:58]">&lt;siraben&gt;</a></span><span class="message">The bootstrapping programs would be completely pure too (simple inspection revealing no IO combinators)</span></div><div class="line" id="141844"><span class="nick" style="color:#8dd3c7"><a href="#141844" label="[14:18:44]">&lt;siraben&gt;</a></span><span class="message">Ben Lynn mentions trusting trust here <a rel="nofollow" href="https://crypto.stanford.edu/~blynn/compiler/sing.html">https://crypto.stanford.edu/~blynn/compiler/sing.html</a> </span></div><div class="line" id="141852"><span class="nick" style="color:#8dd3c7"><a href="#141852" label="[14:18:52]">&lt;siraben&gt;</a></span><span class="message">&quot;Nonetheless, each of the our terms seem short enough that a sufficiently motivated human could verify them.&quot;</span></div><div class="line" id="180220"><span class="nick" style="color:#80b1d3"><a href="#180220" label="[18:02:20]">&lt;OriansJ&gt;</a></span><span class="message">now siraben that is an idea I never considered. Bootstrap GHC to bootstrap scheme.</span></div><div class="line" id="180243"><span class="nick" style="color:#8dd3c7"><a href="#180243" label="[18:02:43]">&lt;siraben&gt;</a></span><span class="message">OriansJ: Not bootstrap GHC, but Ben Lynn's Haskell compiler say.</span></div><div class="line" id="180258"><span class="nick" style="color:#8dd3c7"><a href="#180258" label="[18:02:58]">&lt;siraben&gt;</a></span><span class="message">Which is super minimal and has a clear bootstrapping path itself</span></div><div class="line" id="180308"><span class="nick" style="color:#80b1d3"><a href="#180308" label="[18:03:08]">&lt;OriansJ&gt;</a></span><span class="message">The license terms I could not find</span></div><div class="line" id="180323"><span class="nick" style="color:#8dd3c7"><a href="#180323" label="[18:03:23]">&lt;siraben&gt;</a></span><span class="message">I'll open an issue</span></div><div class="line" id="180326"><span class="nick" style="color:#8dd3c7"><a href="#180326" label="[18:03:26]">&lt;siraben&gt;</a></span><span class="message">What should it be under, MIT?</span></div><div class="line" id="180341"><span class="nick" style="color:#80b1d3"><a href="#180341" label="[18:03:41]">&lt;OriansJ&gt;</a></span><span class="message">siraben: any FSF approved license will be fine</span></div><div class="line" id="180352"><span class="nick" style="color:#8dd3c7"><a href="#180352" label="[18:03:52]">&lt;siraben&gt;</a></span><span class="message">Does that include MIT?</span></div><div class="line" id="180402"><span class="nick" style="color:#80b1d3"><a href="#180402" label="[18:04:02]">&lt;OriansJ&gt;</a></span><span class="message">yes and the ISC</span></div><div class="line" id="180405"><span class="nick" style="color:#8dd3c7"><a href="#180405" label="[18:04:05]">&lt;siraben&gt;</a></span><span class="message">Ok.</span></div><div class="line" id="180453"><span class="nick" style="color:#80b1d3"><a href="#180453" label="[18:04:53]">&lt;OriansJ&gt;</a></span><span class="message">also I can imagine extending Ben Lynn's Haskell compiler to build GHC</span></div><div class="line" id="180521"><span class="nick" style="color:#80b1d3"><a href="#180521" label="[18:05:21]">&lt;OriansJ&gt;</a></span><span class="message">It'll be alot of work but not something impossible</span></div><div class="line" id="180633"><span class="nick" style="color:#6b8072"><a href="#180633" label="[18:06:33]">&lt;rain1&gt;</a></span><span class="message">that's an awesome idea</span></div><div class="line" id="180659"><span class="nick" style="color:#80b1d3"><a href="#180659" label="[18:06:59]">&lt;OriansJ&gt;</a></span><span class="message">the problem is getting someone to put the man hours in to make it happen.</span></div><div class="line" id="180724"><span class="nick" style="color:#80b1d3"><a href="#180724" label="[18:07:24]">&lt;OriansJ&gt;</a></span><span class="message">but it would ultimately solve the GHC bootstrapping problem</span></div><div class="line" id="180741"><span class="nick" style="color:#80b1d3"><a href="#180741" label="[18:07:41]">&lt;OriansJ&gt;</a></span><span class="message">(even guix and nix just use a binary GHC)</span></div><div class="line" id="180824"><span class="nick" style="color:#8dd3c7"><a href="#180824" label="[18:08:24]">&lt;siraben&gt;</a></span><span class="message">But Ben Lynn → Scheme → GCC → GHC would be easier, no?</span></div><div class="line" id="180836"><span class="nick" style="color:#8dd3c7"><a href="#180836" label="[18:08:36]">&lt;siraben&gt;</a></span><span class="message">Since Scheme → GCC → GHC has been done</span></div><div class="line" id="180843"><span class="nick" style="color:#80b1d3"><a href="#180843" label="[18:08:43]">&lt;OriansJ&gt;</a></span><span class="message">siraben: even with GCC, one can not bootstrap GHC</span></div><div class="line" id="180852"><span class="nick" style="color:#8dd3c7"><a href="#180852" label="[18:08:52]">&lt;siraben&gt;</a></span><span class="message">Oh? I didn't know that.</span></div><div class="line" id="180908"><span class="nick" style="color:#80b1d3"><a href="#180908" label="[18:09:08]">&lt;OriansJ&gt;</a></span><span class="message">One needs GHC to build GHC</span></div><div class="line" id="180915"><span class="nick" style="color:#6b8072"><a href="#180915" label="[18:09:15]">&lt;rain1&gt;</a></span><span class="message">at the very very low level we have: Hex -&gt; Hex with labels -&gt; Hex with labels and macros -&gt; Assembly</span></div><div class="line" id="180941"><span class="nick" style="color:#80b1d3"><a href="#180941" label="[18:09:41]">&lt;OriansJ&gt;</a></span><span class="message">-&gt; Minimal C -&gt; cross-platform C -&gt; what we are working on now</span></div><div class="line" id="181230"><span class="nick" style="color:#80b1d3"><a href="#181230" label="[18:12:30]">&lt;OriansJ&gt;</a></span><span class="message">but yes if we can do M2-Planet -&gt; Ben Lynn -&gt; Scheme -&gt; GCC; I will be very happy</span></div><div class="line" id="181328"><span class="nick" style="color:#80b1d3"><a href="#181328" label="[18:13:28]">&lt;OriansJ&gt;</a></span><span class="message">but there are the two problems of getting a guile compatible scheme in that haskell subset and getting Ben Lynn's working into M2-Planet's Subset of C.</span></div><div class="line" id="181410"><span class="nick" style="color:#6b8072"><a href="#181410" label="[18:14:10]">&lt;rain1&gt;</a></span><span class="message">one thing I think is worth taking advantage of is the fact that guile itself is already bootstrappable</span></div><div class="line" id="181425"><span class="nick" style="color:#6b8072"><a href="#181425" label="[18:14:25]">&lt;rain1&gt;</a></span><span class="message">this should mean we don't need to implement a new implementation of guile</span></div><div class="line" id="181443"><span class="nick" style="color:#80b1d3"><a href="#181443" label="[18:14:43]">&lt;OriansJ&gt;</a></span><span class="message">rain1: psyntax.pp is still a bootstrap issue but it is being worked on as I understand by the guile time.</span></div><div class="line" id="181514"><span class="nick" style="color:#6b8072"><a href="#181514" label="[18:15:14]">&lt;rain1&gt;</a></span><span class="message">ah thats good</span></div><div class="line" id="182203"><span class="nick" style="color:#8dd3c7"><a href="#182203" label="[18:22:03]">&lt;siraben&gt;</a></span><span class="message">OriansJ:  what's even possible is if we have Assembly → Ben Lynn</span></div><div class="line" id="182211"><span class="nick" style="color:#8dd3c7"><a href="#182211" label="[18:22:11]">&lt;siraben&gt;</a></span><span class="message">since it's a single file C program that can be hand-translated</span></div><div class="line" id="182216"><span class="nick" style="color:#8dd3c7"><a href="#182216" label="[18:22:16]">&lt;siraben&gt;</a></span><span class="message">Or even written in Forth</span></div><div class="line" id="182250"><span class="nick" style="color:#2e2a4a"><a href="#182250" label="[18:22:50]">&lt;xentrac&gt;</a></span><span class="message">uhoh, now you're about to find out that OriansJ is allergic to Forth :)</span></div><div class="line" id="182306"><span class="nick" style="color:#8dd3c7"><a href="#182306" label="[18:23:06]">&lt;siraben&gt;</a></span><span class="message">Yeah I read his comments on Forth in the forth file</span></div><div class="line" id="182315"><span class="nick" style="color:#8dd3c7"><a href="#182315" label="[18:23:15]">&lt;siraben&gt;</a></span><span class="message">That it was harder to implement than Lisp, heh</span></div><div class="line" id="182327"><span class="nick" style="color:#8dd3c7"><a href="#182327" label="[18:23:27]">&lt;siraben&gt;</a></span><span class="message">xentrac: github.com/siraben/zkeme80</span></div><div class="line" id="182414"><span class="nick" style="color:#80b1d3"><a href="#182414" label="[18:24:14]">&lt;OriansJ&gt;</a></span><span class="message">siraben: there is no magic in bootstrapping, just hard work...</span></div><div class="line" id="182425"><span class="nick" style="color:#8dd3c7"><a href="#182425" label="[18:24:25]">&lt;siraben&gt;</a></span><span class="message">I'm aware</span></div><div class="line" id="182437"><span class="nick" style="color:#8dd3c7"><a href="#182437" label="[18:24:37]">&lt;siraben&gt;</a></span><span class="message">Though I'd like a path of least resistance, so to speak</span></div><div class="line" id="182445"><span class="nick" style="color:#8dd3c7"><a href="#182445" label="[18:24:45]">&lt;siraben&gt;</a></span><span class="message">And Haskell → Scheme seems pretty trivial</span></div><div class="line" id="182539"><span class="nick" style="color:#80b1d3"><a href="#182539" label="[18:25:39]">&lt;OriansJ&gt;</a></span><span class="message">ok but getting from M2-Planet to haskell still needs to be considered carefully</span></div><div class="line" id="182615"><span class="nick" style="color:#8dd3c7"><a href="#182615" label="[18:26:15]">&lt;siraben&gt;</a></span><span class="message">Ben Lynn* so not full Haskell</span></div><div class="line" id="182643"><span class="nick" style="color:#80b1d3"><a href="#182643" label="[18:26:43]">&lt;OriansJ&gt;</a></span><span class="message">yes I admit it is promising</span></div><div class="line" id="182730"><span class="nick" style="color:#6d2462"><a href="#182730" label="[18:27:30]">&lt;civodul&gt;</a></span><span class="message">rekado_ wrote about an attempt to bootstrap Haskell at <a rel="nofollow" href="https://elephly.net/posts/2017-01-09-bootstrapping-haskell-part-1.html">https://elephly.net/posts/2017-01-09-bootstrapping-haskell-part-1.html</a> </span></div><div class="line" id="182744"><span class="nick" style="color:#6d2462"><a href="#182744" label="[18:27:44]">&lt;civodul&gt;</a></span><span class="message">(expired certificate)</span></div><div class="line" id="182745"><span class="nick" style="color:#80b1d3"><a href="#182745" label="[18:27:45]">&lt;OriansJ&gt;</a></span><span class="message">but the license has to be addressed before we can use any of it</span></div><div class="line" id="182756"><span class="nick" style="color:#8dd3c7"><a href="#182756" label="[18:27:56]">&lt;siraben&gt;</a></span><span class="message">Ok</span></div><div class="line" id="182839"><span class="nick" style="color:#80b1d3"><a href="#182839" label="[18:28:39]">&lt;OriansJ&gt;</a></span><span class="message">Then we can convert the root into M2-Planet form and go from there</span></div><div class="line" id="182941"><span class="nick" style="color:#80b1d3"><a href="#182941" label="[18:29:41]">&lt;OriansJ&gt;</a></span><span class="message">We never reject ideas, only ignore those which no one wishes to do the work for.</span></div><div class="line" id="183010"><span class="nick" style="color:#8dd3c7"><a href="#183010" label="[18:30:10]">&lt;siraben&gt;</a></span><span class="message">Right</span></div><div class="line" id="183232"><span class="nick" style="color:#8dd3c7"><a href="#183232" label="[18:32:32]">&lt;siraben&gt;</a></span><span class="message">Ok PR opened</span></div><div class="line" id="183310"><span class="nick" style="color:#8dd3c7"><a href="#183310" label="[18:33:10]">&lt;siraben&gt;</a></span><span class="message">OriansJ:  alternatively it could bootstrap from SKI combinators to a minimal Scheme, there's nothing haskell specific about ben lynn's compiler except that it uses lazy graph reduction</span></div><div class="line" id="183331"><span class="nick" style="color:#80b1d3"><a href="#183331" label="[18:33:31]">&lt;OriansJ&gt;</a></span><span class="message">So if we get past the license problem, I'll help with converting the root into M2-Planet and then the rest will just be a kaem script</span></div><div class="line" id="183527"><span class="nick" style="color:#80b1d3"><a href="#183527" label="[18:35:27]">&lt;OriansJ&gt;</a></span><span class="message">then we need people to choose to do the scheme work in the haskell subset allowed by Ben Lynn's work</span></div><div class="line" id="184903"><span class="nick" style="color:#2e2a4a"><a href="#184903" label="[18:49:03]">&lt;xentrac&gt;</a></span><span class="message">siraben: haha, awesome!</span></div><div class="line" id="195921"><span class="nick" style="color:#234e69"><a href="#195921" label="[19:59:21]">&lt;emorrp1&gt;</a></span><span class="message">Hi there, I'm fascinated by guix's plan to bootstrap all the compilers from scratch, down to 60MB is cooln</span></div><div class="line" id="200107"><span class="nick" style="color:#234e69"><a href="#200107" label="[20:01:07]">&lt;emorrp1&gt;</a></span><span class="message">We're currently working on introducing kotlin to Debian by rewriting the build steps in groovy: <a rel="nofollow" href="https://salsa.debian.org/android-tools-team/admin/-/issues/27">https://salsa.debian.org/android-tools-team/admin/-/issues/27</a> </span></div><div class="line" id="200420"><span class="nick" style="color:#6c3d55"><a href="#200420" label="[20:04:20]">&lt;Hagfish&gt;</a></span><span class="message">emorrp1: that's great to hear</span></div><div class="line" id="200655"><span class="nick" style="color:#234e69"><a href="#200655" label="[20:06:55]">&lt;emorrp1&gt;</a></span><span class="message">disclaimer: the second build step doesn't quite work yet, and we are still initially relying on upstream provided jar</span></div><div class="line" id="200738"><span class="nick" style="color:#6c3d55"><a href="#200738" label="[20:07:38]">&lt;Hagfish&gt;</a></span><span class="message">there are lots of languages and ecosystems out there that don't seem to value bootstrapping, but there has been some good work done within Debian towards these efforts</span></div><div class="line" id="200838"><span class="nick" style="color:#6c3d55"><a href="#200838" label="[20:08:38]">&lt;Hagfish&gt;</a></span><span class="message">thanks to the great work of OriansJ and others in this channel, it should be possible to get the guix bootstrap down well below 60MB of binary</span></div><div class="line" id="201403"><span class="nick" style="color:#234e69"><a href="#201403" label="[20:14:03]">&lt;emorrp1&gt;</a></span><span class="message">Yes, I saw references to a stage0 written entirely in 1M of assembler or some such</span></div><div class="line" id="201438"><span class="nick" style="color:#234e69"><a href="#201438" label="[20:14:38]">&lt;emorrp1&gt;</a></span><span class="message">As I said, fascinating idea and glad to see core projects are receptive to it with e.g. the XZ situation</span></div><div class="line" id="214444"><span class="nick" style="color:#6d2462"><a href="#214444" label="[21:44:44]">&lt;civodul&gt;</a></span><span class="message">ericonr: nice! IIRC roptat has been looking at kotlin and other Java things</span></div><div class="line" id="214512"><span class="nick" style="color:#6d2462"><a href="#214512" label="[21:45:12]">&lt;civodul&gt;</a></span><span class="message">so there might be ways to share the work!</span></div><div class="line" id="214548"><span class="nick" style="color:#d9d9d9"><a href="#214548" label="[21:45:48]">&lt;ericonr&gt;</a></span><span class="message">civodul: I think you meant to mention emorrp1 :)</span></div><div class="line" id="214601"><span class="nick" style="color:#6d2462"><a href="#214601" label="[21:46:01]">&lt;civodul&gt;</a></span><span class="message">oops, right :-)</span></div><div class="line" id="214606"><span class="nick" style="color:#d9d9d9"><a href="#214606" label="[21:46:06]">&lt;ericonr&gt;</a></span><span class="message">fwiw, void linux bootstraps java with gcc6</span></div><div class="line" id="214608"><span class="nick" style="color:#6d2462"><a href="#214608" label="[21:46:08]">&lt;civodul&gt;</a></span><span class="message">apologies! tab completion and all</span></div><div class="line" id="214637"><span class="nick" style="color:#6d2462"><a href="#214637" label="[21:46:37]">&lt;civodul&gt;</a></span><span class="message">nice, i didn't know there were other distros doing that</span></div><div class="line" id="214701"><span class="nick" style="color:#6d2462"><a href="#214701" label="[21:47:01]">&lt;civodul&gt;</a></span><span class="message">IIRC we use to use GCJ as well, but rekado_ managed to get rid of that step (?)</span></div><div class="line" id="214702"><span class="nick" style="color:#d9d9d9"><a href="#214702" label="[21:47:02]">&lt;ericonr&gt;</a></span><span class="message">well we don't start from a tiny seed, but it's kinda reasonably self contained</span></div><div class="line" id="214718"><span class="nick" style="color:#6d2462"><a href="#214718" label="[21:47:18]">&lt;civodul&gt;</a></span><span class="message">yeah, it's not black and white anyway</span></div><div class="line" id="214733"><span class="nick" style="color:#d9d9d9"><a href="#214733" label="[21:47:33]">&lt;ericonr&gt;</a></span><span class="message">fossy understands better about this stuff, I'm mostly a lurker here</span></div><div class="line" id="214736"><span class="nick" style="color:#6d2462"><a href="#214736" label="[21:47:36]">&lt;civodul&gt;</a></span><span class="message">having Java bootstrapped is already nice and an improvement over what many distros do</span></div><div class="line" id="214752"><span class="nick" style="color:#6d2462"><a href="#214752" label="[21:47:52]">&lt;civodul&gt;</a></span><span class="message">i'm also a lurker :-)</span></div><div class="line" id="214801"><span class="nick" style="color:#bc80bd"><a href="#214801" label="[21:48:01]">&lt;fossy&gt;</a></span><span class="message">yes we use gcj</span></div><div class="line" id="214838"><span class="nick" style="color:#bc80bd"><a href="#214838" label="[21:48:38]">&lt;fossy&gt;</a></span><span class="message">but bootstrappable isnt really a void priority from whenever I've tried to bring it up</span></div><div class="line" id="214854"><span class="nick" style="color:#bc80bd"><a href="#214854" label="[21:48:54]">&lt;fossy&gt;</a></span><span class="message">well, bootstrapping the package building system is</span></div><div class="line" id="214906"><span class="nick" style="color:#bc80bd"><a href="#214906" label="[21:49:06]">&lt;fossy&gt;</a></span><span class="message">but not like a rust bootstrap or that</span></div><div class="line" id="214933"><span class="nick" style="color:#d9d9d9"><a href="#214933" label="[21:49:33]">&lt;ericonr&gt;</a></span><span class="message">I think no one wants to maintain all the old LLVM versions and consecutive rust versions necessary for that :P</span></div><div class="line" id="214944"><span class="nick" style="color:#bc80bd"><a href="#214944" label="[21:49:44]">&lt;fossy&gt;</a></span><span class="message">fair</span></div><div class="line" id="215049"><span class="nick" style="color:#6d2462"><a href="#215049" label="[21:50:49]">&lt;civodul&gt;</a></span><span class="message">&quot;no one&quot;? :-)</span></div><div class="line" id="215102"><span class="nick" style="color:#234e69"><a href="#215102" label="[21:51:02]">&lt;emorrp1&gt;</a></span><span class="message">Happy to hear from roptat  if they have any ideas</span></div><div class="line" id="215148"><span class="nick" style="color:#d9d9d9"><a href="#215148" label="[21:51:48]">&lt;ericonr&gt;</a></span><span class="message">civodul: on void, I meant :)</span></div><div class="line" id="215207"><span class="nick" style="color:#d9d9d9"><a href="#215207" label="[21:52:07]">&lt;ericonr&gt;</a></span><span class="message">fossy: but we also moved off of the go bootstrap package, for example</span></div><div class="line" id="215226"><span class="nick" style="color:#234e69"><a href="#215226" label="[21:52:26]">&lt;emorrp1&gt;</a></span><span class="message">Debian has a weaker bootstrap requirement in that the initial upload can be a binary package, but it makes porters efforts easier</span></div><div class="line" id="215232"><span class="nick" style="color:#d9d9d9"><a href="#215232" label="[21:52:32]">&lt;ericonr&gt;</a></span><span class="message">so yes, bootstrappable as in this channel isn't a priority</span></div><div class="line" id="215834"><span class="nick" style="color:#6d2462"><a href="#215834" label="[21:58:34]">&lt;civodul&gt;</a></span><span class="message">as for reproducible builds, i guess it takes time to raise awareness</span></div><div class="line" id="215912"><span class="nick" style="color:#6d2462"><a href="#215912" label="[21:59:12]">&lt;civodul&gt;</a></span><span class="message">but that's ok, y'all can be the visionaries ;-)</span></div><div class="line" id="220018"><span class="nick" style="color:#234e69"><a href="#220018" label="[22:00:18]">&lt;emorrp1&gt;</a></span><span class="message">IIRC there's a plan to mass re-upload all the old Debian packages that haven't been recompiled for reproducibility</span></div><div class="line" id="223617"><span class="nick" style="color:#3c5b35"><a href="#223617" label="[22:36:17]">&lt;lfam&gt;</a></span><span class="message">It's interesting to ditch the Go bootstrap, because it's so easy to use</span></div><div class="line" id="223651"><span class="nick" style="color:#3c5b35"><a href="#223651" label="[22:36:51]">&lt;lfam&gt;</a></span><span class="message">I mean, it's easy compared to what other languages might do</span></div><div class="line" id="224745"><span class="nick" style="color:#bc80bd"><a href="#224745" label="[22:47:45]">&lt;fossy&gt;</a></span><span class="message">well it was due to architecture support</span></div><div class="line" id="224812"><span class="nick" style="color:#bc80bd"><a href="#224812" label="[22:48:12]">&lt;fossy&gt;</a></span><span class="message">I'm going to PR readding it for archs supporting it</span></div><div class="line" id="225401"><span class="nick" style="color:#3c5b35"><a href="#225401" label="[22:54:01]">&lt;lfam&gt;</a></span><span class="message">I see, that makes sense</span></div><div class="line" id="230401"><span class="nick" style="color:#80b1d3"><a href="#230401" label="[23:04:01]">&lt;OriansJ&gt;</a></span><span class="message">emorrp1: stage0 is 250byte bootstrap binary not 1MB; that is Mes.c built via MesCC into M1 macro assembly</span></div><div class="line" id="230801"><span class="nick" style="color:#80b1d3"><a href="#230801" label="[23:08:01]">&lt;OriansJ&gt;</a></span><span class="message">it would be quite unreasonable for any distro that doesn't have a functional package manager to maintain the long string of compilers required for most complex languages. Fortunately guix and nix can provide the binaries for all other distros. Debian and void should just build exporters for guix; so that they can just use guix for their build farms and save alot of trouble.</span></div><div class="line" id="231158"><span class="nick" style="color:#3c5b35"><a href="#231158" label="[23:11:58]">&lt;lfam&gt;</a></span><span class="message">I've had a similar thought :)</span></div><div class="line" id="231406"><span class="nick" style="color:#80b1d3"><a href="#231406" label="[23:14:06]">&lt;OriansJ&gt;</a></span><span class="message">if only someone familiar with guix and debian build processes; put in the required functionality. Then it would be just a cultural debate inside debian, rather than another pie in the sky dream.</span></div><div class="line" id="231457"><span class="nick" style="color:#80b1d3"><a href="#231457" label="[23:14:57]">&lt;OriansJ&gt;</a></span><span class="message">*_*</span></div><div class="line" id="231505"><span class="nick" style="color:#80b1d3"><a href="#231505" label="[23:15:05]">&lt;OriansJ&gt;</a></span><span class="message">^_^</span></div><div class="line" id="231520"><span class="nick" style="color:#80b1d3"><a href="#231520" label="[23:15:20]">&lt;OriansJ&gt;</a></span><span class="message">-_-</span></div><div class="line" id="231524"><span class="nick" style="color:#80b1d3"><a href="#231524" label="[23:15:24]">&lt;OriansJ&gt;</a></span><span class="message">^_^</span></div><div class="line" id="231705"><span class="nick" style="color:#234e69"><a href="#231705" label="[23:17:05]">&lt;emorrp1&gt;</a></span><span class="message">The idea of being able to compile everything in debian like it's gentoo starting from 250 bytes is enticing, but you'd need a lot more languages to reach that.</span></div><div class="line" id="231946"><span class="nick" style="color:#af8d2f"><a href="#231946" label="[23:19:46]">&lt;vagrantc&gt;</a></span><span class="message">emorrp1: i would love to see Debian get rebuilt; some packages are nearly a decade since they've last been built ...</span></div><div class="line" id="232037"><span class="nick" style="color:#af8d2f"><a href="#232037" label="[23:20:37]">&lt;vagrantc&gt;</a></span><span class="message">cultural debates in debian usually take at least 5-10 years :)</span></div><div class="line" id="232103"><span class="nick" style="color:#389600"><a href="#232103" label="[23:21:03]">*</a></span><span class="message">vagrantc might be a person familiar enough with both guix and debian</span></div><div class="line" id="232131"><span class="nick" style="color:#af8d2f"><a href="#232131" label="[23:21:31]">&lt;vagrantc&gt;</a></span><span class="message">i've at least tricked both distros into letting me upload packages</span></div><div class="line" id="232154"><span class="nick" style="color:#af8d2f"><a href="#232154" label="[23:21:54]">&lt;vagrantc&gt;</a></span><span class="message">er, update packages ... upload doesn't quite make sense for guix (and kind of not for debian anymore either, thankfully)</span></div><div class="line" id="232324"><span class="nick" style="color:#234e69"><a href="#232324" label="[23:23:24]">&lt;emorrp1&gt;</a></span><span class="message">vagrantc: didn't holger essentially get the support for mass NMU at this year's debconf?</span></div><div class="line" id="232524"><span class="nick" style="color:#af8d2f"><a href="#232524" label="[23:25:24]">&lt;vagrantc&gt;</a></span><span class="message">emorrp1: debconf is never the right place to get decisions, though sometimes is a good starting point for a discussion</span></div><div class="line" id="233434"><span class="nick" style="color:#234e69"><a href="#233434" label="[23:34:34]">&lt;emorrp1&gt;</a></span><span class="message">well I could write up a summary for debian-devel, just searched and found no recent comments</span></div><div class="line" id="233508"><span class="nick" style="color:#234e69"><a href="#233508" label="[23:35:08]">&lt;emorrp1&gt;</a></span><span class="message">vagrantc: but I am a) pretty unknown and b) not a DD so can't actually action any resulting uploads</span></div><div class="line" id="233605"><span class="nick" style="color:#234e69"><a href="#233605" label="[23:36:05]">&lt;emorrp1&gt;</a></span><span class="message">sorry everyone else for the somewhat off-topic conversation</span></div><br /></div></body></html>