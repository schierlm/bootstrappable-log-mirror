<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-02-13.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="002324"><span class="nick" style="color:#8dd3c7"><a href="#002324" label="[00:23:24]">&lt;fossy&gt;</a></span><span class="message">stikonas: pder how important do you think it is to checksum interim binaries</span></div><div class="line" id="002354"><span class="nick" style="color:#8dd3c7"><a href="#002354" label="[00:23:54]">&lt;fossy&gt;</a></span><span class="message">for example m2-mes in mes.kaem, flex-tmp in flex-2.5.11, boot*-tcc for tcc, etc</span></div><div class="line" id="003049"><span class="nick" style="color:#2e2a4a"><a href="#003049" label="[00:30:49]">&lt;stikonas&gt;</a></span><span class="message">fossy: probably not too important...</span></div><div class="line" id="003117"><span class="nick" style="color:#2e2a4a"><a href="#003117" label="[00:31:17]">&lt;stikonas&gt;</a></span><span class="message">I would skip it...</span></div><div class="line" id="003123"><span class="nick" style="color:#8dd3c7"><a href="#003123" label="[00:31:23]">&lt;fossy&gt;</a></span><span class="message">yeah ok</span></div><div class="line" id="003128"><span class="nick" style="color:#8dd3c7"><a href="#003128" label="[00:31:28]">&lt;fossy&gt;</a></span><span class="message">that's what i've been doing so far</span></div><div class="line" id="003201"><span class="nick" style="color:#8dd3c7"><a href="#003201" label="[00:32:01]">&lt;fossy&gt;</a></span><span class="message">so, it's currently fletcher16 until coreutils, then sha256sum from then on</span></div><div class="line" id="003203"><span class="nick" style="color:#2e2a4a"><a href="#003203" label="[00:32:03]">&lt;stikonas&gt;</a></span><span class="message">I tried calculating hashes for all binaries in /after/bin though</span></div><div class="line" id="003214"><span class="nick" style="color:#8dd3c7"><a href="#003214" label="[00:32:14]">&lt;fossy&gt;</a></span><span class="message">fletcher16 will be replaced by crc32 once we migrate to m2libc</span></div><div class="line" id="003221"><span class="nick" style="color:#2e2a4a"><a href="#003221" label="[00:32:21]">&lt;stikonas&gt;</a></span><span class="message">(not all temp binaries are installed there)</span></div><div class="line" id="003225"><span class="nick" style="color:#8dd3c7"><a href="#003225" label="[00:32:25]">&lt;fossy&gt;</a></span><span class="message">yeah</span></div><div class="line" id="003228"><span class="nick" style="color:#8dd3c7"><a href="#003228" label="[00:32:28]">&lt;fossy&gt;</a></span><span class="message">well currently</span></div><div class="line" id="003232"><span class="nick" style="color:#2e2a4a"><a href="#003232" label="[00:32:32]">&lt;stikonas&gt;</a></span><span class="message">and it seemed reproducible anyway</span></div><div class="line" id="003249"><span class="nick" style="color:#2e2a4a"><a href="#003249" label="[00:32:49]">&lt;stikonas&gt;</a></span><span class="message">if I remember correctly, we might have more problems after binutils</span></div><div class="line" id="003254"><span class="nick" style="color:#8dd3c7"><a href="#003254" label="[00:32:54]">&lt;fossy&gt;</a></span><span class="message">it checks everything installed into /after/* after each &quot;Part&quot;</span></div><div class="line" id="003257"><span class="nick" style="color:#2e2a4a"><a href="#003257" label="[00:32:57]">&lt;stikonas&gt;</a></span><span class="message">they might inject timestamps</span></div><div class="line" id="003302"><span class="nick" style="color:#8dd3c7"><a href="#003302" label="[00:33:02]">&lt;fossy&gt;</a></span><span class="message">yeah :|</span></div><div class="line" id="003320"><span class="nick" style="color:#2e2a4a"><a href="#003320" label="[00:33:20]">&lt;stikonas&gt;</a></span><span class="message">I think guix has similar issue</span></div><div class="line" id="003325"><span class="nick" style="color:#2e2a4a"><a href="#003325" label="[00:33:25]">&lt;stikonas&gt;</a></span><span class="message">it was recently noticed</span></div><div class="line" id="003416"><span class="nick" style="color:#8dd3c7"><a href="#003416" label="[00:34:16]">&lt;fossy&gt;</a></span><span class="message">i kinda want to add a reproducibility check to ci</span></div><div class="line" id="003420"><span class="nick" style="color:#8dd3c7"><a href="#003420" label="[00:34:20]">&lt;fossy&gt;</a></span><span class="message">but that would double the length</span></div><div class="line" id="003422"><span class="nick" style="color:#8dd3c7"><a href="#003422" label="[00:34:22]">&lt;fossy&gt;</a></span><span class="message">so no</span></div><div class="line" id="003443"><span class="nick" style="color:#2e2a4a"><a href="#003443" label="[00:34:43]">&lt;stikonas&gt;</a></span><span class="message">can do that easier...</span></div><div class="line" id="003447"><span class="nick" style="color:#8dd3c7"><a href="#003447" label="[00:34:47]">&lt;fossy&gt;</a></span><span class="message">?</span></div><div class="line" id="003451"><span class="nick" style="color:#2e2a4a"><a href="#003451" label="[00:34:51]">&lt;stikonas&gt;</a></span><span class="message">add a file with expected checksums</span></div><div class="line" id="003458"><span class="nick" style="color:#8dd3c7"><a href="#003458" label="[00:34:58]">&lt;fossy&gt;</a></span><span class="message">yeah, well that's what i'm doing, lol</span></div><div class="line" id="004750"><span class="nick" style="color:#8dd3c7"><a href="#004750" label="[00:47:50]">&lt;fossy&gt;</a></span><span class="message">also stikonas i don't think checking /usr/include files is required, particularly for mes, do you agree</span></div><div class="line" id="004757"><span class="nick" style="color:#8dd3c7"><a href="#004757" label="[00:47:57]">&lt;fossy&gt;</a></span><span class="message">i mean /after/include</span></div><div class="line" id="005845"><span class="nick" style="color:#2e2a4a"><a href="#005845" label="[00:58:45]">&lt;stikonas&gt;</a></span><span class="message">fossy: yeah, those are usually just installed or coppied</span></div><div class="line" id="012824"><span class="nick" style="color:#6b8072"><a href="#012824" label="[01:28:24]">&lt;OriansJ&gt;</a></span><span class="message">oh my god</span></div><div class="line" id="012833"><span class="nick" style="color:#6b8072"><a href="#012833" label="[01:28:33]">&lt;OriansJ&gt;</a></span><span class="message">I think i cracked it</span></div><div class="line" id="013009"><span class="nick" style="color:#6b8072"><a href="#013009" label="[01:30:09]">&lt;OriansJ&gt;</a></span><span class="message">YESSSSSSSSSSSSS</span></div><div class="line" id="013042"><span class="nick" style="color:#2e2a4a"><a href="#013042" label="[01:30:42]">&lt;stikonas&gt;</a></span><span class="message">fossy: by the way, these are the hashes of all binaries that I'm getting <a rel="nofollow" href="https://paste.debian.net/1185281/">https://paste.debian.net/1185281/</a> </span></div><div class="line" id="013049"><span class="nick" style="color:#2e2a4a"><a href="#013049" label="[01:30:49]">&lt;stikonas&gt;</a></span><span class="message">OriansJ: congratulations, thta's PPC stuff?</span></div><div class="line" id="013101"><span class="nick" style="color:#8dd3c7"><a href="#013101" label="[01:31:01]">&lt;fossy&gt;</a></span><span class="message">stikonas: ok, ty</span></div><div class="line" id="013140"><span class="nick" style="color:#6b8072"><a href="#013140" label="[01:31:40]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: yes the key to PowerPC64le that was driving me insane</span></div><div class="line" id="013154"><span class="nick" style="color:#8dd3c7"><a href="#013154" label="[01:31:54]">&lt;fossy&gt;</a></span><span class="message">what's the key</span></div><div class="line" id="013203"><span class="nick" style="color:#2e2a4a"><a href="#013203" label="[01:32:03]">&lt;stikonas&gt;</a></span><span class="message">what, I had the key?</span></div><div class="line" id="013226"><span class="nick" style="color:#2e2a4a"><a href="#013226" label="[01:32:26]">&lt;stikonas&gt;</a></span><span class="message">I thought that paste is public</span></div><div class="line" id="013251"><span class="nick" style="color:#2e2a4a"><a href="#013251" label="[01:32:51]">&lt;stikonas&gt;</a></span><span class="message">oh, that's for OriansJ...</span></div><div class="line" id="013258"><span class="nick" style="color:#6b8072"><a href="#013258" label="[01:32:58]">&lt;OriansJ&gt;</a></span><span class="message">## e_entry isn't the Address of the entry point for PowerPC64 but where the entry address is stored!!!!!!!</span></div><div class="line" id="013339"><span class="nick" style="color:#6b8072"><a href="#013339" label="[01:33:39]">&lt;OriansJ&gt;</a></span><span class="message">and it explains the weird as shit behavior in gdb</span></div><div class="line" id="013427"><span class="nick" style="color:#2e2a4a"><a href="#013427" label="[01:34:27]">&lt;stikonas&gt;</a></span><span class="message">well, after you spend some time on it, you appreciate it more once you solve it</span></div><div class="line" id="013544"><span class="nick" style="color:#8dd3c7"><a href="#013544" label="[01:35:44]">&lt;fossy&gt;</a></span><span class="message">OriansJ: OH</span></div><div class="line" id="013548"><span class="nick" style="color:#8dd3c7"><a href="#013548" label="[01:35:48]">&lt;fossy&gt;</a></span><span class="message">that's so oddd</span></div><div class="line" id="013555"><span class="nick" style="color:#6b8072"><a href="#013555" label="[01:35:55]">&lt;OriansJ&gt;</a></span><span class="message">I spent 2 hours commenting a hex dump of an assembled program to finally figure it out</span></div><div class="line" id="013612"><span class="nick" style="color:#6b8072"><a href="#013612" label="[01:36:12]">&lt;OriansJ&gt;</a></span><span class="message">I'll share the working code shortly</span></div><div class="line" id="013622"><span class="nick" style="color:#6b8072"><a href="#013622" label="[01:36:22]">&lt;OriansJ&gt;</a></span><span class="message">to remove alot of fucks</span></div><div class="line" id="013839"><span class="nick" style="color:#6b8072"><a href="#013839" label="[01:38:39]">&lt;OriansJ&gt;</a></span><span class="message">ouch and it can't be in the elf header????</span></div><div class="line" id="014025"><span class="nick" style="color:#2e2a4a"><a href="#014025" label="[01:40:25]">&lt;stikonas&gt;</a></span><span class="message">hmm, it took like 3 weeks to implement bison bootstrap in live-bootstrap. Any guesses how long perl will take...</span></div><div class="line" id="014038"><span class="nick" style="color:#6b8072"><a href="#014038" label="[01:40:38]">&lt;OriansJ&gt;</a></span><span class="message">it has to be after the segment?????</span></div><div class="line" id="014219"><span class="nick" style="color:#6b8072"><a href="#014219" label="[01:42:19]">&lt;OriansJ&gt;</a></span><span class="message">and here everyone goes: <a rel="nofollow" href="https://paste.debian.net/1185282/">https://paste.debian.net/1185282/</a> </span></div><div class="line" id="014302"><span class="nick" style="color:#6b8072"><a href="#014302" label="[01:43:02]">&lt;OriansJ&gt;</a></span><span class="message">build with: hex2 --little-endian -f foo.hex2 --base-address 0x10000000 -o foo</span></div><div class="line" id="014341"><span class="nick" style="color:#6b8072"><a href="#014341" label="[01:43:41]">&lt;OriansJ&gt;</a></span><span class="message">(I'll add the --architecture PPC64le after I get the test pretty)</span></div><div class="line" id="014417"><span class="nick" style="color:#6b8072"><a href="#014417" label="[01:44:17]">&lt;OriansJ&gt;</a></span><span class="message">but this might cause some trouble with blood-elf</span></div><div class="line" id="014547"><span class="nick" style="color:#6b8072"><a href="#014547" label="[01:45:47]">&lt;OriansJ&gt;</a></span><span class="message">dftxbs3e: can you please bare metal test that it does infact work on actual PowerPC64le hardware</span></div><div class="line" id="014609"><span class="nick" style="color:#6b8072"><a href="#014609" label="[01:46:09]">&lt;OriansJ&gt;</a></span><span class="message">It should display hello world and return 42</span></div><div class="line" id="014809"><span class="nick" style="color:#6b8072"><a href="#014809" label="[01:48:09]">&lt;OriansJ&gt;</a></span><span class="message">readelf -h will say: Entry point address:               0x100001e8 but the actual truth is: 0x10000080</span></div><div class="line" id="015552"><span class="nick" style="color:#80b1d3"><a href="#015552" label="[01:55:52]">&lt;dftxbs3e&gt;</a></span><span class="message">OriansJ, hello!</span></div><div class="line" id="015657"><span class="nick" style="color:#6b8072"><a href="#015657" label="[01:56:57]">&lt;OriansJ&gt;</a></span><span class="message">dftxbs3e: we finally have a working hex2 test for PowerPC64le</span></div><div class="line" id="015727"><span class="nick" style="color:#6b8072"><a href="#015727" label="[01:57:27]">&lt;OriansJ&gt;</a></span><span class="message">please build and run to verify it works on real hardware as well</span></div><div class="line" id="015826"><span class="nick" style="color:#80b1d3"><a href="#015826" label="[01:58:26]">&lt;dftxbs3e&gt;</a></span><span class="message">OriansJ, yes doing so now! Thanks a lot!</span></div><div class="line" id="015915"><span class="nick" style="color:#80b1d3"><a href="#015915" label="[01:59:15]">&lt;dftxbs3e&gt;</a></span><span class="message">OriansJ, what version of hex2 minimum required?</span></div><div class="line" id="015921"><span class="nick" style="color:#80b1d3"><a href="#015921" label="[01:59:21]">&lt;dftxbs3e&gt;</a></span><span class="message">Or mescc-tools version</span></div><div class="line" id="020059"><span class="nick" style="color:#6b8072"><a href="#020059" label="[02:00:59]">&lt;OriansJ&gt;</a></span><span class="message">dftxbs3e: just grab latest but honestly every version after Release_0.1 supports little-endian output and base-address (if I remember correctly)</span></div><div class="line" id="020131"><span class="nick" style="color:#6b8072"><a href="#020131" label="[02:01:31]">&lt;OriansJ&gt;</a></span><span class="message">(older versions use old style flags but that wouldn't change the output anyway)</span></div><div class="line" id="020134"><span class="nick" style="color:#80b1d3"><a href="#020134" label="[02:01:34]">&lt;dftxbs3e&gt;</a></span><span class="message">OriansJ, I say that because I have some older version of GNU Guix working on ppc64le</span></div><div class="line" id="020156"><span class="nick" style="color:#80b1d3"><a href="#020156" label="[02:01:56]">&lt;dftxbs3e&gt;</a></span><span class="message">hex2 0.6.0 I have now</span></div><div class="line" id="020258"><span class="nick" style="color:#6b8072"><a href="#020258" label="[02:02:58]">&lt;OriansJ&gt;</a></span><span class="message">it should build just fine; if it complains about unknown arguments I'll put it in old form for you</span></div><div class="line" id="020433"><span class="nick" style="color:#6b8072"><a href="#020433" label="[02:04:33]">&lt;OriansJ&gt;</a></span><span class="message">and if you want the latest version in guix, you can just git clone and guix build -f guix.scm</span></div><div class="line" id="020459"><span class="nick" style="color:#80b1d3"><a href="#020459" label="[02:04:59]">&lt;dftxbs3e&gt;</a></span><span class="message">OriansJ, <a rel="nofollow" href="https://paste.debian.net/plain/1185283">https://paste.debian.net/plain/1185283</a> </span></div><div class="line" id="020527"><span class="nick" style="color:#6b8072"><a href="#020527" label="[02:05:27]">&lt;OriansJ&gt;</a></span><span class="message">PERFECT!</span></div><div class="line" id="020550"><span class="nick" style="color:#80b1d3"><a href="#020550" label="[02:05:50]">&lt;dftxbs3e&gt;</a></span><span class="message">Well I have some unmerged stuff required for latest version of GNU Guix (WIP)</span></div><div class="line" id="020609"><span class="nick" style="color:#6b8072"><a href="#020609" label="[02:06:09]">&lt;OriansJ&gt;</a></span><span class="message">(old version needed --exec_enable if you wanted to skip the chmod)</span></div><div class="line" id="020615"><span class="nick" style="color:#80b1d3"><a href="#020615" label="[02:06:15]">&lt;dftxbs3e&gt;</a></span><span class="message">I see</span></div><div class="line" id="020645"><span class="nick" style="color:#80b1d3"><a href="#020645" label="[02:06:45]">&lt;dftxbs3e&gt;</a></span><span class="message">OriansJ, here's my baremetal CPU information: <a rel="nofollow" href="https://paste.debian.net/plain/1185285">https://paste.debian.net/plain/1185285</a> </span></div><div class="line" id="020736"><span class="nick" style="color:#6b8072"><a href="#020736" label="[02:07:36]">&lt;OriansJ&gt;</a></span><span class="message">then we realized I did it backwords and added --non-executable</span></div><div class="line" id="020849"><span class="nick" style="color:#6b8072"><a href="#020849" label="[02:08:49]">&lt;OriansJ&gt;</a></span><span class="message">Ok, we officially have a working hex2 program for PowerPC64le that works on baremetal.</span></div><div class="line" id="021008"><span class="nick" style="color:#6b8072"><a href="#021008" label="[02:10:08]">&lt;OriansJ&gt;</a></span><span class="message">next to figure out jumps (it looks like it might be off by one) and branching</span></div><div class="line" id="021232"><span class="nick" style="color:#6b8072"><a href="#021232" label="[02:12:32]">&lt;OriansJ&gt;</a></span><span class="message">then figuring out blood-elf integration; then begins the long ugly trail of getting M2-Planet working. After which janneke will have what he needs to port MesCC to PowerPC64le (it the proper short form ppc64le ???)</span></div><div class="line" id="021304"><span class="nick" style="color:#80b1d3"><a href="#021304" label="[02:13:04]">&lt;dftxbs3e&gt;</a></span><span class="message">Linux uses ppc64le as uname -m</span></div><div class="line" id="021312"><span class="nick" style="color:#80b1d3"><a href="#021312" label="[02:13:12]">&lt;dftxbs3e&gt;</a></span><span class="message">I would prefer if it was called ppc64le everywhere</span></div><div class="line" id="021320"><span class="nick" style="color:#6b8072"><a href="#021320" label="[02:13:20]">&lt;OriansJ&gt;</a></span><span class="message">for the branching and jumping testing you'll be doing dftxbs3e you'll be pulling from master</span></div><div class="line" id="021325"><span class="nick" style="color:#6b8072"><a href="#021325" label="[02:13:25]">&lt;OriansJ&gt;</a></span><span class="message">works for me</span></div><div class="line" id="021354"><span class="nick" style="color:#80b1d3"><a href="#021354" label="[02:13:54]">&lt;dftxbs3e&gt;</a></span><span class="message">Debian uses ppc64el, Fedora uses ppc64le, GCC and LLVM use powerpc64le, so go figure</span></div><div class="line" id="021424"><span class="nick" style="color:#6b8072"><a href="#021424" label="[02:14:24]">&lt;OriansJ&gt;</a></span><span class="message">what does IBM officially use?</span></div><div class="line" id="021503"><span class="nick" style="color:#80b1d3"><a href="#021503" label="[02:15:03]">&lt;dftxbs3e&gt;</a></span><span class="message">their marketing is POWER</span></div><div class="line" id="021508"><span class="nick" style="color:#80b1d3"><a href="#021508" label="[02:15:08]">&lt;dftxbs3e&gt;</a></span><span class="message">POWER8, POWER9</span></div><div class="line" id="021512"><span class="nick" style="color:#80b1d3"><a href="#021512" label="[02:15:12]">&lt;dftxbs3e&gt;</a></span><span class="message">POWER is a trademark of IBM</span></div><div class="line" id="021556"><span class="nick" style="color:#80b1d3"><a href="#021556" label="[02:15:56]">&lt;dftxbs3e&gt;</a></span><span class="message">Otherwise the ISA is called &quot;PowerISA 3.1&quot; for example</span></div><div class="line" id="021606"><span class="nick" style="color:#80b1d3"><a href="#021606" label="[02:16:06]">&lt;dftxbs3e&gt;</a></span><span class="message">lots of inconsistency</span></div><div class="line" id="024141"><span class="nick" style="color:#6b8072"><a href="#024141" label="[02:41:41]">&lt;OriansJ&gt;</a></span><span class="message">ppc64le it is</span></div><div class="line" id="024232"><span class="nick" style="color:#6b8072"><a href="#024232" label="[02:42:32]">&lt;OriansJ&gt;</a></span><span class="message">mostly because you like it and are willing to help and that is good enough for me</span></div><div class="line" id="030920"><span class="nick" style="color:#6b8072"><a href="#030920" label="[03:09:20]">&lt;OriansJ&gt;</a></span><span class="message">ok looks like branches have a +3 going for @label</span></div><div class="line" id="030949"><span class="nick" style="color:#6b8072"><a href="#030949" label="[03:09:49]">&lt;OriansJ&gt;</a></span><span class="message">for relative offsets</span></div><div class="line" id="031032"><span class="nick" style="color:#80b1d3"><a href="#031032" label="[03:10:32]">&lt;dftxbs3e&gt;</a></span><span class="message">OriansJ, note: in GNU Guix Ludo called it powerpc64le so we may want to stay consistent at least on the GNU Guix-related things side</span></div><div class="line" id="031607"><span class="nick" style="color:#6b8072"><a href="#031607" label="[03:16:07]">&lt;OriansJ&gt;</a></span><span class="message">I'll give them until the next mescc-tools release to complain otherwise eh</span></div><div class="line" id="033733"><span class="nick" style="color:#80b1d3"><a href="#033733" label="[03:37:33]">&lt;dftxbs3e&gt;</a></span><span class="message">OriansJ, they wont complain, it's just me wanting to keep it consistent in GNU Guix :-)</span></div><div class="line" id="034206"><span class="nick" style="color:#6b8072"><a href="#034206" label="[03:42:06]">&lt;OriansJ&gt;</a></span><span class="message">dftxbs3e: well on guix if one does get_machine one gets: ppc64le</span></div><div class="line" id="034231"><span class="nick" style="color:#8dd3c7"><a href="#034231" label="[03:42:31]">&lt;fossy&gt;</a></span><span class="message">ppc64le is more common afaic</span></div><div class="line" id="034233"><span class="nick" style="color:#8dd3c7"><a href="#034233" label="[03:42:33]">&lt;fossy&gt;</a></span><span class="message">afaik</span></div><div class="line" id="034238"><span class="nick" style="color:#80b1d3"><a href="#034238" label="[03:42:38]">&lt;dftxbs3e&gt;</a></span><span class="message">OriansJ, what is get_machine?</span></div><div class="line" id="034253"><span class="nick" style="color:#80b1d3"><a href="#034253" label="[03:42:53]">&lt;dftxbs3e&gt;</a></span><span class="message">If get_machine is Linux's uname -m, then yes</span></div><div class="line" id="034306"><span class="nick" style="color:#6b8072"><a href="#034306" label="[03:43:06]">&lt;OriansJ&gt;</a></span><span class="message">dftxbs3e: think of it as the low-level version of uname</span></div><div class="line" id="034323"><span class="nick" style="color:#6b8072"><a href="#034323" label="[03:43:23]">&lt;OriansJ&gt;</a></span><span class="message">it is part of mescc-tools</span></div><div class="line" id="034357"><span class="nick" style="color:#80b1d3"><a href="#034357" label="[03:43:57]">&lt;dftxbs3e&gt;</a></span><span class="message">It's fine, but if it needs to be passed down somehow it means we will need even more conditionals</span></div><div class="line" id="034549"><span class="nick" style="color:#6b8072"><a href="#034549" label="[03:45:49]">&lt;OriansJ&gt;</a></span><span class="message">???</span></div><div class="line" id="034648"><span class="nick" style="color:#6b8072"><a href="#034648" label="[03:46:48]">&lt;OriansJ&gt;</a></span><span class="message">get_machine with no arguments returns what hex2 and M1 would expect for --architecture</span></div><div class="line" id="034855"><span class="nick" style="color:#80b1d3"><a href="#034855" label="[03:48:55]">&lt;dftxbs3e&gt;</a></span><span class="message">OriansJ, I don't know the specifics of your tools, I just meant it from a packaging perspective</span></div><div class="line" id="034933"><span class="nick" style="color:#80b1d3"><a href="#034933" label="[03:49:33]">&lt;dftxbs3e&gt;</a></span><span class="message">due to this inconsistency, I some times have to give aliases for the different names to particular programs in packages</span></div><div class="line" id="035041"><span class="nick" style="color:#6b8072"><a href="#035041" label="[03:50:41]">&lt;OriansJ&gt;</a></span><span class="message">dftxbs3e: these tools are only used to bootstrap GCC</span></div><div class="line" id="035110"><span class="nick" style="color:#6b8072"><a href="#035110" label="[03:51:10]">&lt;OriansJ&gt;</a></span><span class="message">So only people here have to deal with them (or people who love working in hex)</span></div><div class="line" id="035319"><span class="nick" style="color:#80b1d3"><a href="#035319" label="[03:53:19]">&lt;dftxbs3e&gt;</a></span><span class="message">well even then, the simpler it is, the better, right? But since it auto-detects, that's a non-issue.</span></div><div class="line" id="041823"><span class="nick" style="color:#6b8072"><a href="#041823" label="[04:18:23]">&lt;OriansJ&gt;</a></span><span class="message">dftxbs3e: ok for this next test; you are going to need to get the latest mescc-tools commit</span></div><div class="line" id="041841"><span class="nick" style="color:#6b8072"><a href="#041841" label="[04:18:41]">&lt;OriansJ&gt;</a></span><span class="message">( 722a555d1813087a8f826ab8737d1d80d9723cdc to be precise)</span></div><div class="line" id="042004"><span class="nick" style="color:#6b8072"><a href="#042004" label="[04:20:04]">&lt;OriansJ&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1185290/">https://paste.debian.net/1185290/</a> </span></div><div class="line" id="042041"><span class="nick" style="color:#80b1d3"><a href="#042041" label="[04:20:41]">&lt;dftxbs3e&gt;</a></span><span class="message">OriansJ, alright, what do I test here?</span></div><div class="line" id="042044"><span class="nick" style="color:#6b8072"><a href="#042044" label="[04:20:44]">&lt;OriansJ&gt;</a></span><span class="message">hex2 --architecture ppc64le --little-endian -f elf64-PowerPC.hex2 -f foo.hex2 -f retard.hex2 --base-address 0x10000000 -o foo &amp;&amp; ./foo || echo $?</span></div><div class="line" id="042142"><span class="nick" style="color:#6b8072"><a href="#042142" label="[04:21:42]">&lt;OriansJ&gt;</a></span><span class="message">This is making sure the relative and absolute addressing matches with the virtual machine</span></div><div class="line" id="042241"><span class="nick" style="color:#80b1d3"><a href="#042241" label="[04:22:41]">&lt;dftxbs3e&gt;</a></span><span class="message">OriansJ, okay doing so now. By the way, if I give you access to an lxc container running on baremetal, is that baremetal enough for you?</span></div><div class="line" id="042408"><span class="nick" style="color:#6b8072"><a href="#042408" label="[04:24:08]">&lt;OriansJ&gt;</a></span><span class="message">dftxbs3e: This is the last test needed for a while</span></div><div class="line" id="042426"><span class="nick" style="color:#6b8072"><a href="#042426" label="[04:24:26]">&lt;OriansJ&gt;</a></span><span class="message">as the next steps will be more work</span></div><div class="line" id="042514"><span class="nick" style="color:#80b1d3"><a href="#042514" label="[04:25:14]">&lt;dftxbs3e&gt;</a></span><span class="message">my email is: lle-bout@zaclys.net in case you want to send more tests and I'm not here</span></div><div class="line" id="042705"><span class="nick" style="color:#6b8072"><a href="#042705" label="[04:27:05]">&lt;OriansJ&gt;</a></span><span class="message">It'll only be fore the blood-elf spot check, M2-Planet spot check and final M2-Planet pass. as I can do alot with these basics</span></div><div class="line" id="042912"><span class="nick" style="color:#80b1d3"><a href="#042912" label="[04:29:12]">&lt;dftxbs3e&gt;</a></span><span class="message">OriansJ, where do I get the 3 .hex2 files from? Do I just use the single file from the paste or..?</span></div><div class="line" id="043022"><span class="nick" style="color:#6b8072"><a href="#043022" label="[04:30:22]">&lt;OriansJ&gt;</a></span><span class="message">dftxbs3e: the  single file from the paste is the cat of the 3 files</span></div><div class="line" id="043110"><span class="nick" style="color:#80b1d3"><a href="#043110" label="[04:31:10]">&lt;dftxbs3e&gt;</a></span><span class="message">Okay!</span></div><div class="line" id="043759"><span class="nick" style="color:#80b1d3"><a href="#043759" label="[04:37:59]">&lt;dftxbs3e&gt;</a></span><span class="message">&quot;guix environment: error: Git failure while fetching <a rel="nofollow" href="https://git.savannah.nongnu.org/r/mescc-tools.git:">https://git.savannah.nongnu.org/r/mescc-tools.git:</a>  invalid content-type: 'application/octet-stream'&quot; ugh</span></div><div class="line" id="043837"><span class="nick" style="color:#80b1d3"><a href="#043837" label="[04:38:37]">&lt;dftxbs3e&gt;</a></span><span class="message">Running: ./pre-inst-env guix environment --with-commit=mescc-tools=722a555d1813087a8f826ab8737d1d80d9723cdc --ad-hoc mescc-tools -- hex2 --architecture ppc64le --little-endian -f /tmp/1185290 --base-address 0x10000000 -o foo &amp;&amp; ./foo || echo $?</span></div><div class="line" id="043848"><span class="nick" style="color:#80b1d3"><a href="#043848" label="[04:38:48]">&lt;dftxbs3e&gt;</a></span><span class="message">Investigating</span></div><div class="line" id="043917"><span class="nick" style="color:#6b8072"><a href="#043917" label="[04:39:17]">&lt;OriansJ&gt;</a></span><span class="message">dftxbs3e: building mescc-tools is just make</span></div><div class="line" id="044055"><span class="nick" style="color:#6b8072"><a href="#044055" label="[04:40:55]">&lt;OriansJ&gt;</a></span><span class="message">or if you wish to keep it even simpler: gcc  -D_GNU_SOURCE -std=c99 -ggdb -fno-common hex2_linker.c functions/file_print.c functions/match.c functions/numerate_number.c functions/require.c functions/in_set.c -o bin/hex2</span></div><div class="line" id="044127"><span class="nick" style="color:#80b1d3"><a href="#044127" label="[04:41:27]">&lt;dftxbs3e&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/plain/1185291">https://paste.debian.net/plain/1185291</a> </span></div><div class="line" id="044131"><span class="nick" style="color:#6b8072"><a href="#044131" label="[04:41:31]">&lt;OriansJ&gt;</a></span><span class="message">(feel free to replace GCC with any C compiler)</span></div><div class="line" id="044208"><span class="nick" style="color:#6b8072"><a href="#044208" label="[04:42:08]">&lt;OriansJ&gt;</a></span><span class="message">excellent</span></div><div class="line" id="044828"><span class="nick" style="color:#6b8072"><a href="#044828" label="[04:48:28]">&lt;OriansJ&gt;</a></span><span class="message">looks like I-Form instructions in ~label 48 (forward bl) and ~label 4b (backward bl) work without issue</span></div><div class="line" id="052537"><span class="nick" style="color:#6b8072"><a href="#052537" label="[05:25:37]">&lt;OriansJ&gt;</a></span><span class="message">I should have the M1 work for PPC64LE done tomorrow.</span></div><div class="line" id="054633"><span class="nick" style="color:#80b1d3"><a href="#054633" label="[05:46:33]">&lt;dftxbs3e&gt;</a></span><span class="message">awesome :-D</span></div><div class="line" id="070101"><span class="nick" style="color:#6d2462"><a href="#070101" label="[07:01:01]">&lt;Hagfish&gt;</a></span><span class="message"> <a rel="nofollow" href="https://transparency.dev/application/add-tamper-checking-to-a-package-manager/">https://transparency.dev/application/add-tamper-checking-to-a-package-manager/</a> </span></div><div class="line" id="070142"><span class="nick" style="color:#6d2462"><a href="#070142" label="[07:01:42]">&lt;Hagfish&gt;</a></span><span class="message">they're really suggesting that every time you download a piece of software, you check whether a public append-only log has seen that software (with that hash) before</span></div><div class="line" id="070219"><span class="nick" style="color:#6d2462"><a href="#070219" label="[07:02:19]">&lt;Hagfish&gt;</a></span><span class="message">you'd really want to do those checks over Tor or something, to not reveal to a log that your company is running old versions or adopting some interesting new technology</span></div><div class="line" id="070331"><span class="nick" style="color:#6d2462"><a href="#070331" label="[07:03:31]">&lt;Hagfish&gt;</a></span><span class="message">but yeah, that should make it harder for companies to insert backdoors in their updates</span></div><div class="line" id="070428"><span class="nick" style="color:#6d2462"><a href="#070428" label="[07:04:28]">&lt;Hagfish&gt;</a></span><span class="message">i guess there could be some clever timing attack where they release a malicious version just before you check for updates, and then immediately release a non-malicious version afterwards</span></div><div class="line" id="070503"><span class="nick" style="color:#6d2462"><a href="#070503" label="[07:05:03]">&lt;Hagfish&gt;</a></span><span class="message">really you'd want a cooling off period on all updates, to give auditors a chance to check for backdoors</span></div><div class="line" id="070729"><span class="nick" style="color:#6d2462"><a href="#070729" label="[07:07:29]">&lt;Hagfish&gt;</a></span><span class="message">if there is an emergency update rushed out for a security vulnerability, probably the right thing for the app to do is to exit after doing the update check</span></div><div class="line" id="070809"><span class="nick" style="color:#6d2462"><a href="#070809" label="[07:08:09]">&lt;Hagfish&gt;</a></span><span class="message">that means that an attacker who gains control of the signing key could at worst cause a DoS</span></div><div class="line" id="084646"><span class="nick" style="color:#234e69"><a href="#084646" label="[08:46:46]">&lt;bauen1&gt;</a></span><span class="message">Hagfish: couldn't you just download the entire log ? or would that grow too big after some time ?</span></div><div class="line" id="110141"><span class="nick" style="color:#6c3d55"><a href="#110141" label="[11:01:41]">&lt;janneke&gt;</a></span><span class="message">wip-arm-bootstrap status update =&gt; <a rel="nofollow" href="https://lists.gnu.org/archive/html/bug-mes/2021-02/msg00000.html">https://lists.gnu.org/archive/html/bug-mes/2021-02/msg00000.html</a> </span></div><div class="line" id="124432"><span class="nick" style="color:#d9d9d9"><a href="#124432" label="[12:44:32]">&lt;gforce_d11977&gt;</a></span><span class="message">stikonas: fossy: i have the same hashes:</span></div><div class="line" id="124434"><span class="nick" style="color:#d9d9d9"><a href="#124434" label="[12:44:34]">&lt;gforce_d11977&gt;</a></span><span class="message">busybox wget -O 1.txt <a rel="nofollow" href="https://paste.debian.net/plain/1185281">https://paste.debian.net/plain/1185281</a> </span></div><div class="line" id="124500"><span class="nick" style="color:#d9d9d9"><a href="#124500" label="[12:45:00]">&lt;gforce_d11977&gt;</a></span><span class="message">for F in $(busybox cut -d' ' -f3 1.txt); do ( cd /after/bin &amp;&amp; busybox sha256sum $F ); done &gt;2.txt</span></div><div class="line" id="124522"><span class="nick" style="color:#d9d9d9"><a href="#124522" label="[12:45:22]">&lt;gforce_d11977&gt;</a></span><span class="message">busybox cmp 1.txt 2.txt &amp;&amp; echo OK</span></div><div class="line" id="124554"><span class="nick" style="color:#d9d9d9"><a href="#124554" label="[12:45:54]">&lt;gforce_d11977&gt;</a></span><span class="message">(this is inside an i386 qemu)</span></div><div class="line" id="124620"><span class="nick" style="color:#2e2a4a"><a href="#124620" label="[12:46:20]">&lt;stikonas&gt;</a></span><span class="message">well, I was using chroot and /after/bin/sha256sum</span></div><div class="line" id="124645"><span class="nick" style="color:#2e2a4a"><a href="#124645" label="[12:46:45]">&lt;stikonas&gt;</a></span><span class="message">just sha256sum *, no need for the loop</span></div><div class="line" id="124717"><span class="nick" style="color:#d9d9d9"><a href="#124717" label="[12:47:17]">&lt;gforce_d11977&gt;</a></span><span class="message">i think we should check from externally (CI-script), if the hashes are good, but NOT abort the build if something changes</span></div><div class="line" id="124728"><span class="nick" style="color:#d9d9d9"><a href="#124728" label="[12:47:28]">&lt;gforce_d11977&gt;</a></span><span class="message">stikonas: yeah, sorry for the loop</span></div><div class="line" id="124857"><span class="nick" style="color:#d9d9d9"><a href="#124857" label="[12:48:57]">&lt;gforce_d11977&gt;</a></span><span class="message">stikonas: i *hate* perl!</span></div><div class="line" id="124916"><span class="nick" style="color:#d9d9d9"><a href="#124916" label="[12:49:16]">&lt;gforce_d11977&gt;</a></span><span class="message">stikonas: but its a nice language....</span></div><div class="line" id="125522"><span class="nick" style="color:#2e2a4a"><a href="#125522" label="[12:55:22]">&lt;stikonas&gt;</a></span><span class="message">does it really matter whether it's internal or external...</span></div><div class="line" id="125610"><span class="nick" style="color:#d9d9d9"><a href="#125610" label="[12:56:10]">&lt;gforce_d11977&gt;</a></span><span class="message">stikonas: internal or external? what?</span></div><div class="line" id="125626"><span class="nick" style="color:#d9d9d9"><a href="#125626" label="[12:56:26]">&lt;gforce_d11977&gt;</a></span><span class="message">stikonas: sorry, the checker</span></div><div class="line" id="125717"><span class="nick" style="color:#d9d9d9"><a href="#125717" label="[12:57:17]">&lt;gforce_d11977&gt;</a></span><span class="message">stikonas: no, i does not matter, but for now we *do not have* sha256sum build</span></div><div class="line" id="125913"><span class="nick" style="color:#d9d9d9"><a href="#125913" label="[12:59:13]">&lt;gforce_d11977&gt;</a></span><span class="message">what about suck in &quot;<a rel="nofollow" href="https://codereview.stackexchange.com/questions/182812/self-contained-sha-256-implementation-in-c">https://codereview.stackexchange.com/questions/182812/self-contained-sha-256-implementation-in-c</a>&quot; </span></div><div class="line" id="130448"><span class="nick" style="color:#d9d9d9"><a href="#130448" label="[13:04:48]">&lt;gforce_d11977&gt;</a></span><span class="message">(awk for some hours)</span></div><div class="line" id="132807"><span class="nick" style="color:#2e2a4a"><a href="#132807" label="[13:28:07]">&lt;stikonas&gt;</a></span><span class="message">gforce_d11977: we do have sha256sum</span></div><div class="line" id="132829"><span class="nick" style="color:#2e2a4a"><a href="#132829" label="[13:28:29]">&lt;stikonas&gt;</a></span><span class="message">I've built it some time ago in live-bootstrap</span></div><div class="line" id="132840"><span class="nick" style="color:#2e2a4a"><a href="#132840" label="[13:28:40]">&lt;stikonas&gt;</a></span><span class="message">probably close to a month now</span></div><div class="line" id="133815"><span class="nick" style="color:#2e2a4a"><a href="#133815" label="[13:38:15]">&lt;stikonas&gt;</a></span><span class="message">oh, maybe it is sha1sum, my bad...</span></div><div class="line" id="133858"><span class="nick" style="color:#2e2a4a"><a href="#133858" label="[13:38:58]">&lt;stikonas&gt;</a></span><span class="message">but in any case, any hash is fine...</span></div><div class="line" id="133929"><span class="nick" style="color:#2e2a4a"><a href="#133929" label="[13:39:29]">&lt;stikonas&gt;</a></span><span class="message">we only need to check reproducibility</span></div><div class="line" id="133940"><span class="nick" style="color:#2e2a4a"><a href="#133940" label="[13:39:40]">&lt;stikonas&gt;</a></span><span class="message">and that doesn't require cryptographically safe hash</span></div><div class="line" id="143334"><span class="nick" style="color:#6b8072"><a href="#143334" label="[14:33:34]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: so basically guix</span></div><div class="line" id="143342"><span class="nick" style="color:#6b8072"><a href="#143342" label="[14:33:42]">&lt;OriansJ&gt;</a></span><span class="message">but also for the binaries</span></div><div class="line" id="143631"><span class="nick" style="color:#6b8072"><a href="#143631" label="[14:36:31]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: there is no point in downloading a full history when you only need a subset, think git shallow clone with the option to download more if needed</span></div><div class="line" id="145331"><span class="nick" style="color:#6d2462"><a href="#145331" label="[14:53:31]">&lt;Hagfish&gt;</a></span><span class="message">good points.  i think the technical side has mostly been solved now.  what's needed is the social side, i.e. setting up useful trust relationships between entities</span></div><div class="line" id="145449"><span class="nick" style="color:#6d2462"><a href="#145449" label="[14:54:49]">&lt;Hagfish&gt;</a></span><span class="message">maybe Let's Encrypt or the Internet Archive could run a server that's dedicated to downloading open source projects and reproducibly building them, then serving their hashes (and inclusion proofs) as an API</span></div><div class="line" id="152414"><span class="nick" style="color:#234e69"><a href="#152414" label="[15:24:14]">&lt;bauen1&gt;</a></span><span class="message">OriansJ: that's what i was thinking, makes sense</span></div><div class="line" id="160025"><span class="nick" style="color:#6b8072"><a href="#160025" label="[16:00:25]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: the social side doesn't need to be solved. Society function best when there is a small group of crazies (that anyone can join) shoulder the burden of keeping things working.</span></div><div class="line" id="160114"><span class="nick" style="color:#6b8072"><a href="#160114" label="[16:01:14]">&lt;OriansJ&gt;</a></span><span class="message">There are 7billion people and what 5-11 developers here? Bootstrapping progress is going just fine.</span></div><div class="line" id="160236"><span class="nick" style="color:#6b8072"><a href="#160236" label="[16:02:36]">&lt;OriansJ&gt;</a></span><span class="message">They need only 1-4ish people to work actively on maintaining that chain forever and they could easily hook into guix challenge to do most of the work.</span></div><div class="line" id="160428"><span class="nick" style="color:#6b8072"><a href="#160428" label="[16:04:28]">&lt;OriansJ&gt;</a></span><span class="message">get a checker that can get built by M2-Planet, a public mailing list and a few random  anonymous crazies (So they can't be targeted) to catch if the maintainers are being targeted.</span></div><div class="line" id="160620"><span class="nick" style="color:#6b8072"><a href="#160620" label="[16:06:20]">&lt;OriansJ&gt;</a></span><span class="message">It also looks like hex mapping to ppc64le might not work the way I wanted. Now to try binary mapping to see if that fixes the problem.</span></div><div class="line" id="160843"><span class="nick" style="color:#6d2462"><a href="#160843" label="[16:08:43]">&lt;Hagfish&gt;</a></span><span class="message">it's true that a lot can be done without massive social structures (indeed, many of the best innovations and advances have come without that), but it's generally not good to concentrate such important work in the hands of so few, long term</span></div><div class="line" id="161158"><span class="nick" style="color:#6d2462"><a href="#161158" label="[16:11:58]">&lt;Hagfish&gt;</a></span><span class="message">i guess bootstrapping is different from other software projects in that the aim is not to keep adding features, but produce a permanent, well-studied set of artefacts</span></div><div class="line" id="164838"><span class="nick" style="color:#6b8072"><a href="#164838" label="[16:48:38]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: bootstrapping isn't different; there will be refinements *FOREVER* and new ports to new architectures and new bootstraps to new languages.</span></div><div class="line" id="164905"><span class="nick" style="color:#6b8072"><a href="#164905" label="[16:49:05]">&lt;OriansJ&gt;</a></span><span class="message">It is a never ending trend where we keep running forever and never getting closer to the end.</span></div><div class="line" id="165054"><span class="nick" style="color:#6b8072"><a href="#165054" label="[16:50:54]">&lt;OriansJ&gt;</a></span><span class="message">Nothing here is magically different than any other software development project.</span></div><div class="line" id="165728"><span class="nick" style="color:#6b8072"><a href="#165728" label="[16:57:28]">&lt;OriansJ&gt;</a></span><span class="message">The only real unique thing about this bootstrapping project in comparision to all the others is we got more than 1 active programmer at a time. All the other failed bootstrapping projects were solo works that died when the programmer gave up or got stuck before producing anything interesting.</span></div><div class="line" id="165805"><span class="nick" style="color:#6b8072"><a href="#165805" label="[16:58:05]">&lt;OriansJ&gt;</a></span><span class="message">Here we support each other and help each other get past problems that the other couldn't/wouldn't solve.</span></div><div class="line" id="170150"><span class="nick" style="color:#6b8072"><a href="#170150" label="[17:01:50]">&lt;OriansJ&gt;</a></span><span class="message">Those lines of documentation, the presentations, the spell checking, the distro specific testing and personal feature additions that look wasteful are actually a reflection of the huge amount of energy invested in this project by everyone here. Without the sheer numbers here, such impressive results simply are not possible.</span></div><div class="line" id="170314"><span class="nick" style="color:#6b8072"><a href="#170314" label="[17:03:14]">&lt;OriansJ&gt;</a></span><span class="message">That is why the first job of everyone here is to make the job of the next person easier whenever possible. (because that person might just be you)</span></div><div class="line" id="170420"><span class="nick" style="color:#6b8072"><a href="#170420" label="[17:04:20]">&lt;OriansJ&gt;</a></span><span class="message">we are approaching the 5 year anniversary of #bootstrappable</span></div><div class="line" id="174658"><span class="nick" style="color:#6d2462"><a href="#174658" label="[17:46:58]">&lt;Hagfish&gt;</a></span><span class="message">this project seems to have found an &quot;attractor&quot;, in the mathematical sense, or a &quot;critical mass&quot; in the physical sense</span></div><div class="line" id="174709"><span class="nick" style="color:#6d2462"><a href="#174709" label="[17:47:09]">&lt;Hagfish&gt;</a></span><span class="message">5 years is quite the milestone</span></div><div class="line" id="175955"><span class="nick" style="color:#6c3d55"><a href="#175955" label="[17:59:55]">&lt;janneke&gt;</a></span><span class="message"> /names</span></div><div class="line" id="180018"><span class="nick" style="color:#bc80bd"><a href="#180018" label="[18:00:18]">*</a></span><span class="message">janneke being curious if something exceptional happened</span></div><div class="line" id="180034"><span class="nick" style="color:#6c3d55"><a href="#180034" label="[18:00:34]">&lt;janneke&gt;</a></span><span class="message">nice and steady growth, so it seems</span></div><div class="line" id="202300"><span class="nick" style="color:#6b8072"><a href="#202300" label="[20:23:00]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: the reason for reaching &quot;critical mass&quot; is a surprisingly simple one: <a rel="nofollow" href="https://media.libreplanet.org/u/libby/m/mako/">https://media.libreplanet.org/u/libby/m/mako/</a> </span></div><div class="line" id="202429"><span class="nick" style="color:#6b8072"><a href="#202429" label="[20:24:29]">&lt;OriansJ&gt;</a></span><span class="message">once two or more developers actively work together for greater than a year, the odds of attracting additional developers goes up.</span></div><div class="line" id="202517"><span class="nick" style="color:#6b8072"><a href="#202517" label="[20:25:17]">&lt;OriansJ&gt;</a></span><span class="message">Guix as a community for people finding a common goal and spawning work together basically gave us a big push.</span></div><div class="line" id="203456"><span class="nick" style="color:#3c5b35"><a href="#203456" label="[20:34:56]">&lt;vagrantc&gt;</a></span><span class="message">/18/18</span></div><div class="line" id="212527"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado</span></div><div class="line" id="213708"><span class="nick" style="color:#2e2a4a"><a href="#213708" label="[21:37:08]">&lt;stikonas&gt;</a></span><span class="message">fossy, pder: I'm trying to build miniperl from perl 5.8.5. I have about 10 errors left (and for now I'm ignoring bison parser generation) but I think half of them are the same problem.  Maybe a second pair of eyes would help...</span></div><div class="line" id="213746"><span class="nick" style="color:#2e2a4a"><a href="#213746" label="[21:37:46]">&lt;stikonas&gt;</a></span><span class="message">I'm getting build errors like gv.c:1946: error: 'copy' undeclared or regexec.c:1187: error: 'PL_utf8_' undeclared and a few others and they all seem to use CAT2 define</span></div><div class="line" id="213820"><span class="nick" style="color:#2e2a4a"><a href="#213820" label="[21:38:20]">&lt;stikonas&gt;</a></span><span class="message">it looks like CAT2 should be in config.h, grep found #define CAT2(a,b)       a/**/b</span></div><div class="line" id="213832"><span class="nick" style="color:#2e2a4a"><a href="#213832" label="[21:38:32]">&lt;stikonas&gt;</a></span><span class="message">that should work in tcc, shouldn't it?</span></div><div class="line" id="213918"><span class="nick" style="color:#2e2a4a"><a href="#213918" label="[21:39:18]">&lt;stikonas&gt;</a></span><span class="message">argh, I think I've got it</span></div><div class="line" id="213922"><span class="nick" style="color:#2e2a4a"><a href="#213922" label="[21:39:22]">&lt;stikonas&gt;</a></span><span class="message">a##b seems to work</span></div><div class="line" id="214544"><span class="nick" style="color:#8dd3c7"><a href="#214544" label="[21:45:44]">&lt;fossy&gt;</a></span><span class="message">stikonas: thats odd</span></div><div class="line" id="214604"><span class="nick" style="color:#8dd3c7"><a href="#214604" label="[21:46:04]">&lt;fossy&gt;</a></span><span class="message">I had to patch out fastcall for linux kernel, this is probably a similar problem</span></div><div class="line" id="214610"><span class="nick" style="color:#8dd3c7"><a href="#214610" label="[21:46:10]">&lt;fossy&gt;</a></span><span class="message">what dies a##b do</span></div><div class="line" id="214737"><span class="nick" style="color:#8dd3c7"><a href="#214737" label="[21:47:37]">&lt;fossy&gt;</a></span><span class="message">stikonas: gforce_d11977 it *does* matter, and quite a lot too, whether it is internal or external</span></div><div class="line" id="214810"><span class="nick" style="color:#8dd3c7"><a href="#214810" label="[21:48:10]">&lt;fossy&gt;</a></span><span class="message">if it is external we can count the hashing as null and void for the most part, as it has not been bootstrapped and is hence untrusted</span></div><div class="line" id="214856"><span class="nick" style="color:#8dd3c7"><a href="#214856" label="[21:48:56]">&lt;fossy&gt;</a></span><span class="message">and we certinaly need to fail if the checksums are incorrect, that means it is probably not reproducible which is very bad</span></div><div class="line" id="215424"><span class="nick" style="color:#2e2a4a"><a href="#215424" label="[21:54:24]">&lt;stikonas&gt;</a></span><span class="message">ok, I think for miniperl I've now have config.h that can build all .c files (with a couple of TODOs for later). Now I get maybe 70 linking errors... That's way more than with earlier programs</span></div><div class="line" id="220330"><span class="nick" style="color:#2e2a4a"><a href="#220330" label="[22:03:30]">&lt;stikonas&gt;</a></span><span class="message">oh, much better after clean rebuild, only 18 left</span></div><div class="line" id="220343"><span class="nick" style="color:#2e2a4a"><a href="#220343" label="[22:03:43]">&lt;stikonas&gt;</a></span><span class="message">that should be doable</span></div><div class="line" id="220646"><span class="nick" style="color:#2e2a4a"><a href="#220646" label="[22:06:46]">&lt;stikonas&gt;</a></span><span class="message">fossy: oh a##b I think concatenates two strings</span></div><div class="line" id="222051"><span class="nick" style="color:#8dd3c7"><a href="#222051" label="[22:20:51]">&lt;fossy&gt;</a></span><span class="message">stikonas: oh, duh</span></div><div class="line" id="230548"><span class="nick" style="color:#8dd3c7"><a href="#230548" label="[23:05:48]">&lt;fossy&gt;</a></span><span class="message">stikonas: pder how are we even making tinycc link against must</span></div><div class="line" id="230551"><span class="nick" style="color:#8dd3c7"><a href="#230551" label="[23:05:51]">&lt;fossy&gt;</a></span><span class="message">musl</span></div><div class="line" id="230555"><span class="nick" style="color:#8dd3c7"><a href="#230555" label="[23:05:55]">&lt;fossy&gt;</a></span><span class="message">musl installs to /after/lib/musl</span></div><div class="line" id="230604"><span class="nick" style="color:#8dd3c7"><a href="#230604" label="[23:06:04]">&lt;fossy&gt;</a></span><span class="message">oh wait</span></div><div class="line" id="230608"><span class="nick" style="color:#8dd3c7"><a href="#230608" label="[23:06:08]">&lt;fossy&gt;</a></span><span class="message">i'm just blind</span></div><div class="line" id="230615"><span class="nick" style="color:#8dd3c7"><a href="#230615" label="[23:06:15]">&lt;fossy&gt;</a></span><span class="message">i see libdir is reset to /after/lib/musl</span></div><div class="line" id="230618"><span class="nick" style="color:#2e2a4a"><a href="#230618" label="[23:06:18]">&lt;stikonas&gt;</a></span><span class="message">yes...</span></div><div class="line" id="230619"><span class="nick" style="color:#8dd3c7"><a href="#230619" label="[23:06:19]">&lt;fossy&gt;</a></span><span class="message">don't mind me</span></div><div class="line" id="230631"><span class="nick" style="color:#2e2a4a"><a href="#230631" label="[23:06:31]">&lt;stikonas&gt;</a></span><span class="message">we rebuild tcc with the right flags</span></div><div class="line" id="230659"><span class="nick" style="color:#2e2a4a"><a href="#230659" label="[23:06:59]">&lt;stikonas&gt;</a></span><span class="message">is that for checksuming work?</span></div><div class="line" id="232226"><span class="nick" style="color:#2e2a4a"><a href="#232226" label="[23:22:26]">&lt;stikonas&gt;</a></span><span class="message">fossy: argh, I have more serious problems with perl...</span></div><div class="line" id="232238"><span class="nick" style="color:#2e2a4a"><a href="#232238" label="[23:22:38]">&lt;stikonas&gt;</a></span><span class="message">even more cyclic dependencies...</span></div><div class="line" id="232416"><span class="nick" style="color:#8dd3c7"><a href="#232416" label="[23:24:16]">&lt;fossy&gt;</a></span><span class="message">stikonas: yes for checksumming</span></div><div class="line" id="232422"><span class="nick" style="color:#8dd3c7"><a href="#232422" label="[23:24:22]">&lt;fossy&gt;</a></span><span class="message">stikonas: what kind of cyclic deps</span></div><div class="line" id="232428"><span class="nick" style="color:#2e2a4a"><a href="#232428" label="[23:24:28]">&lt;stikonas&gt;</a></span><span class="message">e.g. <a rel="nofollow" href="https://github.com/Perl/perl5/blob/perl-5.8.9/embed.h">https://github.com/Perl/perl5/blob/perl-5.8.9/embed.h</a> </span></div><div class="line" id="232441"><span class="nick" style="color:#2e2a4a"><a href="#232441" label="[23:24:41]">&lt;stikonas&gt;</a></span><span class="message">built by embed.pl</span></div><div class="line" id="232632"><span class="nick" style="color:#2e2a4a"><a href="#232632" label="[23:26:32]">&lt;stikonas&gt;</a></span><span class="message">ignoring this file (and perly.y for now, which might be doable since we have bison) I get 3 linking errors when building miniperl...</span></div><div class="line" id="232701"><span class="nick" style="color:#2e2a4a"><a href="#232701" label="[23:27:01]">&lt;stikonas&gt;</a></span><span class="message">this embed.h is needed even by miniperl</span></div><div class="line" id="232813"><span class="nick" style="color:#2e2a4a"><a href="#232813" label="[23:28:13]">&lt;stikonas&gt;</a></span><span class="message">and embed.h is present even in <a rel="nofollow" href="https://www.cpan.org/src/5.0/perl5.004_05.tar.gz">https://www.cpan.org/src/5.0/perl5.004_05.tar.gz</a> </span></div><div class="line" id="232914"><span class="nick" style="color:#2e2a4a"><a href="#232914" label="[23:29:14]">&lt;stikonas&gt;</a></span><span class="message">and embed.pl is not particularly simple script</span></div><div class="line" id="232940"><span class="nick" style="color:#2e2a4a"><a href="#232940" label="[23:29:40]">&lt;stikonas&gt;</a></span><span class="message">let's see even older perl's</span></div><div class="line" id="232952"><span class="nick" style="color:#8dd3c7"><a href="#232952" label="[23:29:52]">&lt;fossy&gt;</a></span><span class="message">what about perl 4</span></div><div class="line" id="233105"><span class="nick" style="color:#8dd3c7"><a href="#233105" label="[23:31:05]">&lt;fossy&gt;</a></span><span class="message">stikonas: first maybe look at Perl 5.0?</span></div><div class="line" id="233111"><span class="nick" style="color:#8dd3c7"><a href="#233111" label="[23:31:11]">&lt;fossy&gt;</a></span><span class="message">or is 5.004 the earllierst</span></div><div class="line" id="233235"><span class="nick" style="color:#2e2a4a"><a href="#233235" label="[23:32:35]">&lt;stikonas&gt;</a></span><span class="message">hmm, I just looked in git</span></div><div class="line" id="233240"><span class="nick" style="color:#2e2a4a"><a href="#233240" label="[23:32:40]">&lt;stikonas&gt;</a></span><span class="message">couldn't find tarballs</span></div><div class="line" id="233247"><span class="nick" style="color:#2e2a4a"><a href="#233247" label="[23:32:47]">&lt;stikonas&gt;</a></span><span class="message">but something is different there</span></div><div class="line" id="233314"><span class="nick" style="color:#2e2a4a"><a href="#233314" label="[23:33:14]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/Perl/perl5/tree/perl-5.000">https://github.com/Perl/perl5/tree/perl-5.000</a> </span></div><div class="line" id="233319"><span class="nick" style="color:#2e2a4a"><a href="#233319" label="[23:33:19]">&lt;stikonas&gt;</a></span><span class="message">we might be able to do with shell</span></div><div class="line" id="233434"><span class="nick" style="color:#8dd3c7"><a href="#233434" label="[23:34:34]">&lt;fossy&gt;</a></span><span class="message">what reimpl it in shell?</span></div><div class="line" id="233515"><span class="nick" style="color:#2e2a4a"><a href="#233515" label="[23:35:15]">&lt;stikonas&gt;</a></span><span class="message">no, there is a scriped called embed_h.SH  instead of embed.pl</span></div><div class="line" id="233523"><span class="nick" style="color:#2e2a4a"><a href="#233523" label="[23:35:23]">&lt;stikonas&gt;</a></span><span class="message">I think these are pre-releases...</span></div><div class="line" id="233935"><span class="nick" style="color:#2e2a4a"><a href="#233935" label="[23:39:35]">&lt;stikonas&gt;</a></span><span class="message">perl will definitely need very careful review once something is done...</span></div><br /></div></body></html>