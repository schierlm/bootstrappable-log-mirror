<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-05-14.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="001037"><span class="nick" style="color:#389600"><a href="#001037" label="[00:10:37]">&lt;janneke&gt;</a></span><span class="message">oriansj: we just found out that it's actually unused</span></div><div class="line" id="015346"><span class="nick" style="color:#2e2a4a"><a href="#015346" label="[01:53:46]">&lt;stikonas&gt;</a></span><span class="message">fossy: some cleanup for live-bootstrap <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/160">https://github.com/fosslinux/live-bootstrap/pull/160</a>,  swapped sed and make, so we can eliminate another package built with custom kaem scripts (custom makefiles are arguably better)</span></div><div class="line" id="015433"><span class="nick" style="color:#2e2a4a"><a href="#015433" label="[01:54:33]">&lt;stikonas&gt;</a></span><span class="message">I'll later do that for tar and gz as well</span></div><div class="line" id="092820"><span class="nick">***</span><span class="message notice">nimaje1 is now known as nimaje</span></div><div class="line" id="123615"><span class="nick" style="color:#6b8072"><a href="#123615" label="[12:36:15]">&lt;doras&gt;</a></span><span class="message">I found the issue that was causing the object files to be ordered differently.</span></div><div class="line" id="123646"><span class="nick" style="color:#6b8072"><a href="#123646" label="[12:36:46]">&lt;doras&gt;</a></span><span class="message">It's an issue in libtool's m4 scripts.</span></div><div class="line" id="123709"><span class="nick" style="color:#6b8072"><a href="#123709" label="[12:37:09]">&lt;doras&gt;</a></span><span class="message">Already fixed upstream, too.</span></div><div class="line" id="123854"><span class="nick" style="color:#6b8072"><a href="#123854" label="[12:38:54]">&lt;doras&gt;</a></span><span class="message">I'll dig up the original commit fixing it and backport it.</span></div><div class="line" id="124204"><span class="nick" style="color:#6b8072"><a href="#124204" label="[12:42:04]">&lt;doras&gt;</a></span><span class="message">Fixed originally by a Google employee in 2010. Interesting.</span></div><div class="line" id="124457"><span class="nick" style="color:#6b8072"><a href="#124457" label="[12:44:57]">&lt;doras&gt;</a></span><span class="message">Same guy that wrote the other patch we backported.</span></div><div class="line" id="125244"><span class="nick" style="color:#2e2a4a"><a href="#125244" label="[12:52:44]">&lt;stikonas&gt;</a></span><span class="message">doras: alternatively we rebuild m4...</span></div><div class="line" id="125254"><span class="nick" style="color:#2e2a4a"><a href="#125254" label="[12:52:54]">&lt;stikonas&gt;</a></span><span class="message">if it's affecting only util-linux</span></div><div class="line" id="125439"><span class="nick" style="color:#2e2a4a"><a href="#125439" label="[12:54:39]">&lt;stikonas&gt;</a></span><span class="message">although that depends when it was fixed</span></div><div class="line" id="125455"><span class="nick" style="color:#2e2a4a"><a href="#125455" label="[12:54:55]">&lt;stikonas&gt;</a></span><span class="message">m4-1.4.16 needs newer automake</span></div><div class="line" id="125611"><span class="nick" style="color:#2e2a4a"><a href="#125611" label="[12:56:11]">&lt;stikonas&gt;</a></span><span class="message">(perhaps we can move automake 1.11 to sysa then)</span></div><div class="line" id="125744"><span class="nick" style="color:#6b8072"><a href="#125744" label="[12:57:44]">&lt;doras&gt;</a></span><span class="message">stikonas: the fix is in libtool itself. As far as I can tell, it should affect any case where archives are &quot;merged&quot; (use of the automake &quot;_LIBADD=&quot; option). It introduces dependency on the readdir iteration order of a filesystem (through &quot;find&quot;), which isn't guaranteed to be the same. In fact, in my case, it's not.</span></div><div class="line" id="125825"><span class="nick" style="color:#6b8072"><a href="#125825" label="[12:58:25]">&lt;doras&gt;</a></span><span class="message">It's potentially related to the ordering issue with guile, but I haven't checked yet.</span></div><div class="line" id="125920"><span class="nick" style="color:#6b8072"><a href="#125920" label="[12:59:20]">&lt;doras&gt;</a></span><span class="message"> <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/libtool.git/commit/?id=74c8993c178a1386ea5e2363a01d919738402f30">https://git.savannah.gnu.org/cgit/libtool.git/commit/?id=74c8993c178a1386ea5e2363a01d919738402f30</a> </span></div><div class="line" id="125950"><span class="nick" style="color:#6b8072"><a href="#125950" label="[12:59:50]">&lt;doras&gt;</a></span><span class="message">The second change in &quot;func_extract_archives&quot; solves our issue.</span></div><div class="line" id="130008"><span class="nick" style="color:#2e2a4a"><a href="#130008" label="[13:00:08]">&lt;stikonas&gt;</a></span><span class="message">I see...</span></div><div class="line" id="130023"><span class="nick" style="color:#2e2a4a"><a href="#130023" label="[13:00:23]">&lt;stikonas&gt;</a></span><span class="message">well, there is an option to upgrade libtool too</span></div><div class="line" id="130053"><span class="nick" style="color:#2e2a4a"><a href="#130053" label="[13:00:53]">&lt;stikonas&gt;</a></span><span class="message">(after sysc we end up with the latest autoconf and automake but somewhat oldish libtool)</span></div><div class="line" id="130144"><span class="nick" style="color:#2e2a4a"><a href="#130144" label="[13:01:44]">&lt;stikonas&gt;</a></span><span class="message">if not, then patch should work</span></div><div class="line" id="130415"><span class="nick" style="color:#6b8072"><a href="#130415" label="[13:04:15]">&lt;doras&gt;</a></span><span class="message">It can hurt us in other cases if we ever introduce something which is affected by it. Probably worth avoiding the reproducibility issue in the first place. Upgrading to a newer libtool can be done anyway though.</span></div><div class="line" id="132728"><span class="nick">***</span><span class="message notice">littlebo1eep is now known as littlebobeep</span></div><div class="line" id="140823"><span class="nick" style="color:#6b8072"><a href="#140823" label="[14:08:23]">&lt;doras&gt;</a></span><span class="message">stikonas: are you familiar with other cases where the order of objects in archives wasn't persistent, in addition to guile?</span></div><div class="line" id="141037"><span class="nick" style="color:#6b8072"><a href="#141037" label="[14:10:37]">&lt;doras&gt;</a></span><span class="message">I see that guile also uses LIBADD with libguile.a, so my change will potentially fix it as well.</span></div><div class="line" id="141057"><span class="nick" style="color:#6b8072"><a href="#141057" label="[14:10:57]">&lt;doras&gt;</a></span><span class="message">So just wondering if there are other cases that I should look at.</span></div><div class="line" id="141327"><span class="nick" style="color:#6b8072"><a href="#141327" label="[14:13:27]">&lt;doras&gt;</a></span><span class="message">Found that we also have a similar workaround for libstdc++.a in gcc-4.7.4.</span></div><div class="line" id="141858"><span class="nick" style="color:#6b8072"><a href="#141858" label="[14:18:58]">&lt;doras&gt;</a></span><span class="message">I see LIBADD is used for libstdc++.a too, so potentially the same issue there.</span></div><div class="line" id="151744"><span class="nick" style="color:#80b1d3"><a href="#151744" label="[15:17:44]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: i put a debug put_hex on every mes syscall. it does a link syscall fairly early, which is not implemented</span></div><div class="line" id="151828"><span class="nick" style="color:#80b1d3"><a href="#151828" label="[15:18:28]">&lt;rickmasters&gt;</a></span><span class="message">i tried to find that call but i am not familiar with the code base</span></div><div class="line" id="152517"><span class="nick" style="color:#6d2462"><a href="#152517" label="[15:25:17]">&lt;stikonas[m]&gt;</a></span><span class="message">doras: those are probably all</span></div><div class="line" id="152717"><span class="nick" style="color:#6d2462"><a href="#152717" label="[15:27:17]">&lt;stikonas[m]&gt;</a></span><span class="message">rickmasters: I can try yo check when I'm back home</span></div><div class="line" id="152813"><span class="nick" style="color:#80b1d3"><a href="#152813" label="[15:28:13]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: ok, i'll keep looking and i can try to output the filenames in the mean time</span></div><div class="line" id="154629"><span class="nick" style="color:#234e69"><a href="#154629" label="[15:46:29]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: that would create a soft link to another file; so you would just find that filename and point to it</span></div><div class="line" id="154909"><span class="nick" style="color:#80b1d3"><a href="#154909" label="[15:49:09]">&lt;rickmasters&gt;</a></span><span class="message">orianjs: right, so you are saying get the filenames a create the link manually to see if that helps?</span></div><div class="line" id="154943"><span class="nick" style="color:#80b1d3"><a href="#154943" label="[15:49:43]">&lt;rickmasters&gt;</a></span><span class="message">s/a/and</span></div><div class="line" id="155120"><span class="nick" style="color:#80b1d3"><a href="#155120" label="[15:51:20]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: oops typo'd your username</span></div><div class="line" id="155148"><span class="nick" style="color:#6c3d55"><a href="#155148" label="[15:51:48]">&lt;unmatched-paren&gt;</a></span><span class="message">OrianJS(TM): A javascript engine in hex0! :P</span></div><div class="line" id="155228"><span class="nick" style="color:#234e69"><a href="#155228" label="[15:52:28]">&lt;oriansj&gt;</a></span><span class="message">no worries, also you probably should be able to just return 0 as I don't see how mescc would need it given that it leverages mescc-tools for building the final binaries</span></div><div class="line" id="155424"><span class="nick" style="color:#234e69"><a href="#155424" label="[15:54:24]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: now that would be a cruel parody. I love it</span></div><div class="line" id="155604"><span class="nick" style="color:#234e69"><a href="#155604" label="[15:56:04]">&lt;oriansj&gt;</a></span><span class="message">janneke: mescc just builds a tempfile M1 and links with the libc files using M1 (or hex2) right? so it doesn't actually use link itself but mesc.c supports it for any scheme program running on mes.c that needs it right?</span></div><div class="line" id="155626"><span class="nick" style="color:#80b1d3"><a href="#155626" label="[15:56:26]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: hmm, it may be something else, first stab shows null file names. also builder-hex0 already returns 0 for unimplemented syscalls</span></div><div class="line" id="155747"><span class="nick" style="color:#234e69"><a href="#155747" label="[15:57:47]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: sounds like a userspace bug passing invalid strings with the syscall</span></div><div class="line" id="155909"><span class="nick" style="color:#80b1d3"><a href="#155909" label="[15:59:09]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: looks like it, but likely caused by prior bad kernel behavior</span></div><div class="line" id="155916"><span class="nick" style="color:#80b1d3"><a href="#155916" label="[15:59:16]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: i'll keep looking</span></div><div class="line" id="160149"><span class="nick" style="color:#80b1d3"><a href="#160149" label="[16:01:49]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: so this is mes-m2, not sure if that matters, honestly not sure of the distinction, i'm running blind but it'll clear up</span></div><div class="line" id="160226"><span class="nick" style="color:#6d2462"><a href="#160226" label="[16:02:26]">&lt;stikonas[m]&gt;</a></span><span class="message">mes-m2 is mes built with M2-Planet</span></div><div class="line" id="160312"><span class="nick" style="color:#6d2462"><a href="#160312" label="[16:03:12]">&lt;stikonas[m]&gt;</a></span><span class="message">So it has somewhat simpler code</span></div><div class="line" id="160323"><span class="nick" style="color:#6d2462"><a href="#160323" label="[16:03:23]">&lt;stikonas[m]&gt;</a></span><span class="message">For some library functions</span></div><div class="line" id="160330"><span class="nick" style="color:#234e69"><a href="#160330" label="[16:03:30]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: well the difference between mes-m2 and mes.c is that mes-m2 was a fork of mes.c in a rush to finish the bootstrap of mescc and thus complete the chain. So there are several minor differences and ultimately will be dropped with mes.c being properly bootstrapped by M2-Mesoplanet</span></div><div class="line" id="160510"><span class="nick" style="color:#6d2462"><a href="#160510" label="[16:05:10]">&lt;stikonas[m]&gt;</a></span><span class="message">oriansj: mes upstream also has mes-m2 binary</span></div><div class="line" id="160544"><span class="nick" style="color:#6d2462"><a href="#160544" label="[16:05:44]">&lt;stikonas[m]&gt;</a></span><span class="message">Which can run mescc and built slightly faster and more stable mes</span></div><div class="line" id="160640"><span class="nick" style="color:#234e69"><a href="#160640" label="[16:06:40]">&lt;oriansj&gt;</a></span><span class="message">that reminds me, I need to setup mes.c for fuzzing</span></div><div class="line" id="160847"><span class="nick" style="color:#80b1d3"><a href="#160847" label="[16:08:47]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: ok. i see, so can mes-m2 run mescc?</span></div><div class="line" id="161018"><span class="nick" style="color:#80b1d3"><a href="#161018" label="[16:10:18]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: looks like you said mes-m2 can run mescc</span></div><div class="line" id="161550"><span class="nick" style="color:#389600"><a href="#161550" label="[16:15:50]">&lt;janneke&gt;</a></span><span class="message">oriansj: can't completely follow, but yes, mescc writes .M1 and linking is done using hex2</span></div><div class="line" id="161602"><span class="nick" style="color:#389600"><a href="#161602" label="[16:16:02]">&lt;janneke&gt;</a></span><span class="message">possibly with a blood-elf phase when using -g</span></div><div class="line" id="161939"><span class="nick" style="color:#234e69"><a href="#161939" label="[16:19:39]">&lt;oriansj&gt;</a></span><span class="message">janneke: why would you need the link syscall in the blood-elf phase?</span></div><div class="line" id="162057"><span class="nick" style="color:#234e69"><a href="#162057" label="[16:20:57]">&lt;oriansj&gt;</a></span><span class="message">or are we mistaking each other slightly and you were clarifying that you also leverage blood-elf when the -g option is passed.</span></div><div class="line" id="162124"><span class="nick" style="color:#234e69"><a href="#162124" label="[16:21:24]">&lt;oriansj&gt;</a></span><span class="message">and that the link syscall isn't needed for mescc to successfully compile C code</span></div><div class="line" id="162521"><span class="nick" style="color:#80b1d3"><a href="#162521" label="[16:25:21]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: i don't think he was talking about file links (i.e the link syscall) but the call binding that hex2 does</span></div><div class="line" id="163551"><span class="nick" style="color:#234e69"><a href="#163551" label="[16:35:51]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: I  believe you are right</span></div><div class="line" id="164431"><span class="nick" style="color:#80b1d3"><a href="#164431" label="[16:44:31]">&lt;rickmasters&gt;</a></span><span class="message">sorry for the confusion everyone, its not calling syscall link</span></div><div class="line" id="164515"><span class="nick" style="color:#80b1d3"><a href="#164515" label="[16:45:15]">&lt;rickmasters&gt;</a></span><span class="message">i only printed the lower byte, its calling 0x109 which is clock_gettime</span></div><div class="line" id="164619"><span class="nick" style="color:#6c3d55"><a href="#164619" label="[16:46:19]">&lt;unmatched-paren&gt;</a></span><span class="message">i suppose that's for one of those __???__ macros that expands to the date/time/etc?</span></div><div class="line" id="164718"><span class="nick" style="color:#80b1d3"><a href="#164718" label="[16:47:18]">&lt;rickmasters&gt;</a></span><span class="message">main -&gt; init_time -&gt; clock_gettime</span></div><div class="line" id="164959"><span class="nick" style="color:#80b1d3"><a href="#164959" label="[16:49:59]">&lt;rickmasters&gt;</a></span><span class="message">the kernel does not implement that, but not sure if that is the root cause of &quot;assert fail: eval/apply unknown continuation&quot;</span></div><div class="line" id="165142"><span class="nick" style="color:#80b1d3"><a href="#165142" label="[16:51:42]">&lt;rickmasters&gt;</a></span><span class="message">i'll keep digging</span></div><div class="line" id="165242"><span class="nick" style="color:#d9d9d9"><a href="#165242" label="[16:52:42]">&lt;Hagfish&gt;</a></span><span class="message">it's an intriguing mystery all right</span></div><div class="line" id="165623"><span class="nick" style="color:#80b1d3"><a href="#165623" label="[16:56:23]">&lt;rickmasters&gt;</a></span><span class="message">Hagfish: yeah, besides that unimplemented call its just allocating memory, opening, reading a file before failing, simple stuff</span></div><div class="line" id="170514"><span class="nick" style="color:#2e2a4a"><a href="#170514" label="[17:05:14]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: yes, mes-m2 can run mescc</span></div><div class="line" id="170544"><span class="nick" style="color:#2e2a4a"><a href="#170544" label="[17:05:44]">&lt;stikonas&gt;</a></span><span class="message">and yes, clock_gettime shouldn't be in bootstrap kernel, we should keep it as small as possible</span></div><div class="line" id="170604"><span class="nick" style="color:#2e2a4a"><a href="#170604" label="[17:06:04]">&lt;stikonas&gt;</a></span><span class="message">(hence stage0-posix does not even have rm/unlink)</span></div><div class="line" id="170621"><span class="nick" style="color:#2e2a4a"><a href="#170621" label="[17:06:21]">&lt;stikonas&gt;</a></span><span class="message">possibly it can be replaced with a stup in meslibc</span></div><div class="line" id="170846"><span class="nick" style="color:#2e2a4a"><a href="#170846" label="[17:08:46]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: i.e. replace this line <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/mes.git/tree/kaem.run#n92">https://git.savannah.gnu.org/cgit/mes.git/tree/kaem.run#n92</a>  with this file <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/mes.git/tree/lib/stub/clock_gettime.c">https://git.savannah.gnu.org/cgit/mes.git/tree/lib/stub/clock_gettime.c</a> </span></div><div class="line" id="170928"><span class="nick" style="color:#2e2a4a"><a href="#170928" label="[17:09:28]">&lt;stikonas&gt;</a></span><span class="message">janneke: just spotted a typo: <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/mes.git/tree/lib/stub/clock_gettime.c#n30">https://git.savannah.gnu.org/cgit/mes.git/tree/lib/stub/clock_gettime.c#n30</a> </span></div><div class="line" id="170943"><span class="nick" style="color:#2e2a4a"><a href="#170943" label="[17:09:43]">&lt;stikonas&gt;</a></span><span class="message">&quot;umask stub&quot; -&gt; &quot;clock_gettime stub&quot;</span></div><div class="line" id="171228"><span class="nick" style="color:#80b1d3"><a href="#171228" label="[17:12:28]">&lt;rickmasters&gt;</a></span><span class="message">sitkonas: i can try that, right now i'm on the hunch that mes-m2 reads from stdin even though it has code on the command line, stdin is funky in builder-hex0</span></div><div class="line" id="172123"><span class="nick" style="color:#2e2a4a"><a href="#172123" label="[17:21:23]">&lt;stikonas&gt;</a></span><span class="message">not sure, I'm not that familiar with how mes-m2 works</span></div><div class="line" id="184913"><span class="nick" style="color:#234e69"><a href="#184913" label="[18:49:13]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: ok for clock_gettime; you should be able to just increment by 1 on each call</span></div><div class="line" id="185112"><span class="nick" style="color:#80b1d3"><a href="#185112" label="[18:51:12]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: ok</span></div><div class="line" id="185638"><span class="nick" style="color:#6b8072"><a href="#185638" label="[18:56:38]">&lt;doras&gt;</a></span><span class="message">stikonas: it worked. I got identical hashes in all modes.</span></div><div class="line" id="185729"><span class="nick" style="color:#6b8072"><a href="#185729" label="[18:57:29]">&lt;doras&gt;</a></span><span class="message">This includes the removal of the workarounds for gcc-4.7.4 and guile-3.0.7.</span></div><div class="line" id="185751"><span class="nick" style="color:#6b8072"><a href="#185751" label="[18:57:51]">&lt;doras&gt;</a></span><span class="message">So it also means we don't have to build guile twice.</span></div><div class="line" id="185814"><span class="nick" style="color:#2e2a4a"><a href="#185814" label="[18:58:14]">&lt;stikonas&gt;</a></span><span class="message">oriansj, rickmasters: do we really want to add more syscalls to bootstrap kernel?</span></div><div class="line" id="185821"><span class="nick" style="color:#2e2a4a"><a href="#185821" label="[18:58:21]">&lt;stikonas&gt;</a></span><span class="message">I would say keep hex0 kernel as small as possible</span></div><div class="line" id="185835"><span class="nick" style="color:#2e2a4a"><a href="#185835" label="[18:58:35]">&lt;stikonas&gt;</a></span><span class="message">doras: ok, good, was it that patch?</span></div><div class="line" id="185844"><span class="nick" style="color:#234e69"><a href="#185844" label="[18:58:44]">&lt;oriansj&gt;</a></span><span class="message">stikonas: I agree but it is ultimately rickmasters' decision</span></div><div class="line" id="185929"><span class="nick" style="color:#80b1d3"><a href="#185929" label="[18:59:29]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: it's not my preference until i know what will fix mes, currently pursuing memory issues</span></div><div class="line" id="190103"><span class="nick" style="color:#6b8072"><a href="#190103" label="[19:01:03]">&lt;doras&gt;</a></span><span class="message">stikonas: yes. I backported it to both of our libtool versions.</span></div><div class="line" id="190114"><span class="nick" style="color:#234e69"><a href="#190114" label="[19:01:14]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: well mes is not the sort of program you'll want to support with a clever hack</span></div><div class="line" id="190135"><span class="nick" style="color:#6b8072"><a href="#190135" label="[19:01:35]">&lt;doras&gt;</a></span><span class="message">But my local branch is still based om mes-m2 because of the SUID issue in mes upstream, which is annoying.</span></div><div class="line" id="190139"><span class="nick" style="color:#6b8072"><a href="#190139" label="[19:01:39]">&lt;doras&gt;</a></span><span class="message">on*</span></div><div class="line" id="190238"><span class="nick" style="color:#234e69"><a href="#190238" label="[19:02:38]">&lt;oriansj&gt;</a></span><span class="message">as mescc and mes.c are very clever hacks in themselves; so you'll want what runs and builds it to be as obvious and robust as possible</span></div><div class="line" id="190244"><span class="nick" style="color:#6b8072"><a href="#190244" label="[19:02:44]">&lt;doras&gt;</a></span><span class="message">Do you think we could use base our mes in live-bootstrap on the mes commit where this is solved?</span></div><div class="line" id="190314"><span class="nick" style="color:#80b1d3"><a href="#190314" label="[19:03:14]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: i'm hoping its a bug fix, i already found that the hex2 command uses a bad base-address, but that didn't fix it, hoping for something like that</span></div><div class="line" id="190412"><span class="nick" style="color:#2e2a4a"><a href="#190412" label="[19:04:12]">&lt;stikonas&gt;</a></span><span class="message">doras: well, I guess we can update, but let me see if I can first do a couple of patches for mes</span></div><div class="line" id="190510"><span class="nick" style="color:#234e69"><a href="#190510" label="[19:05:10]">&lt;oriansj&gt;</a></span><span class="message">rickmasters: oh no; mes.c is hard enough to build with GCC and Linux; the M2-Planet build was months of work. it isn't an easy fix sort of program</span></div><div class="line" id="190619"><span class="nick" style="color:#6b8072"><a href="#190619" label="[19:06:19]">&lt;doras&gt;</a></span><span class="message">stikonas: alright. In the meantime, I'll run another QEMU bootstrap on the tip of live-bootstrap + my fixes and submit a PR or two.</span></div><div class="line" id="190700"><span class="nick" style="color:#234e69"><a href="#190700" label="[19:07:00]">&lt;oriansj&gt;</a></span><span class="message">you'll want proper paging, filesystem support and fault tolerant multiprocessing to support mescc</span></div><div class="line" id="190711"><span class="nick" style="color:#6b8072"><a href="#190711" label="[19:07:11]">&lt;doras&gt;</a></span><span class="message">We could then update mes, and then I'll finally be able to attend to the final changes needed for the bwrap-based bootstrap mode.</span></div><div class="line" id="190721"><span class="nick" style="color:#80b1d3"><a href="#190721" label="[19:07:21]">&lt;rickmasters&gt;</a></span><span class="message">oriansj: yeah, this is mostly just an exploration out of curiosity, i know we need a better kernel to get much farther</span></div><div class="line" id="190856"><span class="nick" style="color:#234e69"><a href="#190856" label="[19:08:56]">&lt;oriansj&gt;</a></span><span class="message">I know work was done on <a rel="nofollow" href="https://gitlab.com/myunix/myunix/">https://gitlab.com/myunix/myunix/</a>  to run mescc and tcc (bauen1 correct me if I am wrong)</span></div><div class="line" id="191042"><span class="nick" style="color:#6b8072"><a href="#191042" label="[19:10:42]">&lt;doras&gt;</a></span><span class="message">Apparently my patch backport changes every single SHA256 hash we have. Oops? :)</span></div><div class="line" id="191225"><span class="nick" style="color:#6b8072"><a href="#191225" label="[19:12:25]">&lt;doras&gt;</a></span><span class="message">Wait, perhaps not...</span></div><div class="line" id="191339"><span class="nick" style="color:#6b8072"><a href="#191339" label="[19:13:39]">&lt;doras&gt;</a></span><span class="message">False alarm, it only changes the packages that we expect it to change. I was doing a diff with something else. Everything is fine :)</span></div><div class="line" id="191538"><span class="nick" style="color:#234e69"><a href="#191538" label="[19:15:38]">&lt;oriansj&gt;</a></span><span class="message">doras: good to hear</span></div><div class="line" id="193526"><span class="nick" style="color:#2e2a4a"><a href="#193526" label="[19:35:26]">&lt;stikonas&gt;</a></span><span class="message">well, now with --update-checksums mode it's easier to deal with changes that change all checksums</span></div><div class="line" id="200252"><span class="nick" style="color:#234e69"><a href="#200252" label="[20:02:52]">&lt;oriansj&gt;</a></span><span class="message">janneke: running ./configure for mes I am getting the following missing dependency: guild but it isn't referenced in the mes reference manual so you might want to fix that (either remove from the configure requirements or update the manual)</span></div><div class="line" id="200350"><span class="nick" style="color:#2e2a4a"><a href="#200350" label="[20:03:50]">&lt;stikonas&gt;</a></span><span class="message">oriansj: by the way, which guile are you using 2 or 3 for mes?</span></div><div class="line" id="200425"><span class="nick" style="color:#2e2a4a"><a href="#200425" label="[20:04:25]">&lt;stikonas&gt;</a></span><span class="message">I think guile 2 doesn't work for me</span></div><div class="line" id="200447"><span class="nick" style="color:#2e2a4a"><a href="#200447" label="[20:04:47]">&lt;stikonas&gt;</a></span><span class="message">I can only build mes with configure if I source guix environment</span></div><div class="line" id="200456"><span class="nick" style="color:#234e69"><a href="#200456" label="[20:04:56]">&lt;oriansj&gt;</a></span><span class="message">stikonas: I am currently trying to build and test with guile 3.0</span></div><div class="line" id="200514"><span class="nick" style="color:#234e69"><a href="#200514" label="[20:05:14]">&lt;oriansj&gt;</a></span><span class="message">yeah, that is an issue</span></div><div class="line" id="200811"><span class="nick" style="color:#2e2a4a"><a href="#200811" label="[20:08:11]">&lt;stikonas&gt;</a></span><span class="message">my configure crashes... <a rel="nofollow" href="https://paste.debian.net/1240891/">https://paste.debian.net/1240891/</a> </span></div><div class="line" id="203135"><span class="nick" style="color:#234e69"><a href="#203135" label="[20:31:35]">&lt;oriansj&gt;</a></span><span class="message">stikonas: looks like it was expecting M2-Planet to be installed</span></div><div class="line" id="203150"><span class="nick" style="color:#234e69"><a href="#203150" label="[20:31:50]">&lt;oriansj&gt;</a></span><span class="message">here is mine: <a rel="nofollow" href="https://paste.debian.net/1240897/">https://paste.debian.net/1240897/</a> </span></div><div class="line" id="203553"><span class="nick" style="color:#2e2a4a"><a href="#203553" label="[20:35:53]">&lt;stikonas&gt;</a></span><span class="message">I did add M2-Planet to PATH...</span></div><div class="line" id="203702"><span class="nick" style="color:#2e2a4a"><a href="#203702" label="[20:37:02]">&lt;stikonas&gt;</a></span><span class="message">maybe I should install older one from guix</span></div><div class="line" id="203750"><span class="nick" style="color:#2e2a4a"><a href="#203750" label="[20:37:50]">&lt;stikonas&gt;</a></span><span class="message">no, same crash...</span></div><div class="line" id="204704"><span class="nick" style="color:#d9d9d9"><a href="#204704" label="[20:47:04]">&lt;Hagfish&gt;</a></span><span class="message">was bauen1 around to hear the question about <a rel="nofollow" href="https://gitlab.com/myunix/myunix/">https://gitlab.com/myunix/myunix/</a>  ?</span></div><div class="line" id="204716"><span class="nick" style="color:#bc80bd"><a href="#204716" label="[20:47:16]">&lt;bauen1&gt;</a></span><span class="message">what question ?</span></div><div class="line" id="204730"><span class="nick" style="color:#d9d9d9"><a href="#204730" label="[20:47:30]">&lt;Hagfish&gt;</a></span><span class="message">oriansj said &quot;I know work was done on <a rel="nofollow" href="https://gitlab.com/myunix/myunix/">https://gitlab.com/myunix/myunix/</a>  to run mescc and tcc (bauen1 correct me if I am wrong)&quot;</span></div><div class="line" id="204759"><span class="nick" style="color:#d9d9d9"><a href="#204759" label="[20:47:59]">&lt;Hagfish&gt;</a></span><span class="message">that's maybe not technically a question :)</span></div><div class="line" id="204857"><span class="nick" style="color:#bc80bd"><a href="#204857" label="[20:48:57]">&lt;bauen1&gt;</a></span><span class="message">oriansj: i only ensured the kernel can be compiled using tcc, iirc it's still missing processes and has a semi-finished vfs implementation</span></div><div class="line" id="204920"><span class="nick" style="color:#bc80bd"><a href="#204920" label="[20:49:20]">&lt;bauen1&gt;</a></span><span class="message">so quite a bit from anything that can run posix</span></div><div class="line" id="205028"><span class="nick" style="color:#d9d9d9"><a href="#205028" label="[20:50:28]">&lt;Hagfish&gt;</a></span><span class="message">that's still impressive.  i wonder if it's a good stepping stone to follow on from rickmasters's work</span></div><div class="line" id="205031"><span class="nick" style="color:#bc80bd"><a href="#205031" label="[20:50:31]">&lt;bauen1&gt;</a></span><span class="message">and the pmm is still a bitmap, so perhaps you want to start from scratch if you want a kernel compilable by tinycc, but it's not very hard to reach something that can load ELF, handle syscalls, has a vfs and supports a tmpfs ; the things that come after that are a bit harder</span></div><div class="line" id="205037"><span class="nick" style="color:#2e2a4a"><a href="#205037" label="[20:50:37]">&lt;stikonas&gt;</a></span><span class="message">well, there is no way tcc can run on builder-hex0</span></div><div class="line" id="205046"><span class="nick" style="color:#2e2a4a"><a href="#205046" label="[20:50:46]">&lt;stikonas&gt;</a></span><span class="message">we might not even get mescc working</span></div><div class="line" id="205052"><span class="nick" style="color:#d9d9d9"><a href="#205052" label="[20:50:52]">&lt;Hagfish&gt;</a></span><span class="message">hmm, good point</span></div><div class="line" id="205104"><span class="nick" style="color:#d9d9d9"><a href="#205104" label="[20:51:04]">&lt;Hagfish&gt;</a></span><span class="message">does there need to be some middle stepping stone?</span></div><div class="line" id="205126"><span class="nick" style="color:#6c3d55"><a href="#205126" label="[20:51:26]">&lt;unmatched-paren&gt;</a></span><span class="message">i wonder if you could compile openbsd or something with mescc or tcc</span></div><div class="line" id="205136"><span class="nick" style="color:#6c3d55"><a href="#205136" label="[20:51:36]">&lt;unmatched-paren&gt;</a></span><span class="message">and whether you could compile linux on openbsd?</span></div><div class="line" id="205146"><span class="nick" style="color:#2e2a4a"><a href="#205146" label="[20:51:46]">&lt;stikonas&gt;</a></span><span class="message">well latter definitely yes</span></div><div class="line" id="205150"><span class="nick" style="color:#2e2a4a"><a href="#205150" label="[20:51:50]">&lt;stikonas&gt;</a></span><span class="message">not sure about the former</span></div><div class="line" id="205155"><span class="nick" style="color:#bc80bd"><a href="#205155" label="[20:51:55]">&lt;bauen1&gt;</a></span><span class="message">Hagfish: if you want to start solving the &quot;linux kernel problem&quot;, i would suggest you to write a simple C kernel (i.e. myunix) that is compilable by tinycc, it can even use all features of C as long as it works with a recent tinycc (and take a look at osdev.org and other hobby kernels like toaruos)</span></div><div class="line" id="205201"><span class="nick" style="color:#389600"><a href="#205201" label="[20:52:01]">&lt;janneke&gt;</a></span><span class="message">oriansj: guile is a requirement and guild comes with guile</span></div><div class="line" id="205226"><span class="nick" style="color:#2e2a4a"><a href="#205226" label="[20:52:26]">&lt;stikonas&gt;</a></span><span class="message">janneke: any idea about configure issue with m2-planet ?</span></div><div class="line" id="205240"><span class="nick" style="color:#389600"><a href="#205240" label="[20:52:40]">&lt;janneke&gt;</a></span><span class="message">(when listing gcc as a requirement, you don't mention cpp separately either)</span></div><div class="line" id="205241"><span class="nick" style="color:#bc80bd"><a href="#205241" label="[20:52:41]">&lt;bauen1&gt;</a></span><span class="message">Hagfish: once you have that done, the problem becomes: how do I get tinycc to run without a kernel, or how do I compile the kernel using something that doesn't require a kernel that is this complex</span></div><div class="line" id="205247"><span class="nick" style="color:#2e2a4a"><a href="#205247" label="[20:52:47]">&lt;stikonas&gt;</a></span><span class="message">I wanted to do a bit of stuff in meslibc but struggling to configure mes</span></div><div class="line" id="205342"><span class="nick" style="color:#d9d9d9"><a href="#205342" label="[20:53:42]">&lt;Hagfish&gt;</a></span><span class="message">bauen1: yeah, that clarifies the problem, thank you</span></div><div class="line" id="205344"><span class="nick" style="color:#389600"><a href="#205344" label="[20:53:44]">&lt;janneke&gt;</a></span><span class="message">oriansj: possibly guild is put in a separate &quot;development&quot; package?</span></div><div class="line" id="205404"><span class="nick" style="color:#bc80bd"><a href="#205404" label="[20:54:04]">&lt;bauen1&gt;</a></span><span class="message">Hagfish: i suspect that for a true hardware bootstrap you will end up with a micro kernel / library kernel that supplies you with memory management, threads, very basic IO where you then add modules as you compile them (including VFS, device drivers, ...) until you can compile a better kernel (e.g. by using tinycc and a POSIX kernel, or you get far enough for linux)</span></div><div class="line" id="205424"><span class="nick" style="color:#3c5b35"><a href="#205424" label="[20:54:24]">*</a></span><span class="message">unmatched-paren cloning openbsd</span></div><div class="line" id="205436"><span class="nick" style="color:#d9d9d9"><a href="#205436" label="[20:54:36]">&lt;Hagfish&gt;</a></span><span class="message">oh nice.  i like the idea of a kernel extending itself</span></div><div class="line" id="205453"><span class="nick" style="color:#3c5b35"><a href="#205453" label="[20:54:53]">*</a></span><span class="message">janneke looks</span></div><div class="line" id="205502"><span class="nick" style="color:#389600"><a href="#205502" label="[20:55:02]">&lt;janneke&gt;</a></span><span class="message">&quot;&lt;stikonas&gt; &quot;umask stub&quot; -&gt; &quot;clock_gettime stub&quot;&quot; -- thanks, duh</span></div><div class="line" id="205511"><span class="nick" style="color:#2e2a4a"><a href="#205511" label="[20:55:11]">&lt;stikonas&gt;</a></span><span class="message">fossy didn't use kernel modules for his kernel build</span></div><div class="line" id="205516"><span class="nick" style="color:#389600"><a href="#205516" label="[20:55:16]">&lt;janneke&gt;</a></span><span class="message">but that's not your question/problem, right ;)</span></div><div class="line" id="205532"><span class="nick" style="color:#2e2a4a"><a href="#205532" label="[20:55:32]">&lt;stikonas&gt;</a></span><span class="message">janneke: no, I wanted to do more serious stuff...</span></div><div class="line" id="205540"><span class="nick" style="color:#2e2a4a"><a href="#205540" label="[20:55:40]">&lt;stikonas&gt;</a></span><span class="message">possibly add a couple of string functions to libc</span></div><div class="line" id="205553"><span class="nick" style="color:#2e2a4a"><a href="#205553" label="[20:55:53]">&lt;stikonas&gt;</a></span><span class="message">my problem right now is <a rel="nofollow" href="https://paste.debian.net/1240891/">https://paste.debian.net/1240891/</a> </span></div><div class="line" id="205624"><span class="nick" style="color:#bc80bd"><a href="#205624" label="[20:56:24]">&lt;bauen1&gt;</a></span><span class="message">Hagfish: there is an earlier version of myunix that could actually run process, had syscalls and a tmpfs + vfs, even a network stack supporting ARP ; but it was written when I was still a few years from 18 iirc, so the code quality is what you expect and it's even more buggy</span></div><div class="line" id="205631"><span class="nick" style="color:#2e2a4a"><a href="#205631" label="[20:56:31]">&lt;stikonas&gt;</a></span><span class="message">janneke: possibly guix is too old?</span></div><div class="line" id="205643"><span class="nick" style="color:#389600"><a href="#205643" label="[20:56:43]">&lt;janneke&gt;</a></span><span class="message">hmm, a backtrace</span></div><div class="line" id="205709"><span class="nick" style="color:#2e2a4a"><a href="#205709" label="[20:57:09]">&lt;stikonas&gt;</a></span><span class="message">if I do it outside guix, configure succeeds, but my guile is too old</span></div><div class="line" id="205713"><span class="nick" style="color:#bc80bd"><a href="#205713" label="[20:57:13]">&lt;bauen1&gt;</a></span><span class="message">Hagfish: I don't really have the time to work on a kernel myself, but if you start with something I'd love to hear about it (and maybe contribute a thing or 2) :)</span></div><div class="line" id="205718"><span class="nick" style="color:#2e2a4a"><a href="#205718" label="[20:57:18]">&lt;stikonas&gt;</a></span><span class="message">maybe the easiest solution would be to install newer guile...</span></div><div class="line" id="205742"><span class="nick" style="color:#d9d9d9"><a href="#205742" label="[20:57:42]">&lt;Hagfish&gt;</a></span><span class="message">bauen1: i feel like i at least need to read up on <a rel="nofollow" href="https://wiki.osdev.org/Modular_Kernel">https://wiki.osdev.org/Modular_Kernel</a> </span></div><div class="line" id="205750"><span class="nick" style="color:#6c3d55"><a href="#205750" label="[20:57:50]">&lt;unmatched-paren&gt;</a></span><span class="message">huh, openbsd seems to support wayland now, til</span></div><div class="line" id="205757"><span class="nick" style="color:#6c3d55"><a href="#205757" label="[20:57:57]">&lt;unmatched-paren&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/openbsd/ports/tree/master/wayland">https://github.com/openbsd/ports/tree/master/wayland</a> </span></div><div class="line" id="205942"><span class="nick" style="color:#389600"><a href="#205942" label="[20:59:42]">&lt;janneke&gt;</a></span><span class="message">stikonas: could be that your guix is too old, but why not update guix?</span></div><div class="line" id="205958"><span class="nick" style="color:#389600"><a href="#205958" label="[20:59:58]">&lt;janneke&gt;</a></span><span class="message">you can always use guix time-machine to use the commit you're on right now?</span></div><div class="line" id="210037"><span class="nick" style="color:#389600"><a href="#210037" label="[21:00:37]">&lt;janneke&gt;</a></span><span class="message">anyway, the bug (thanks!) occurs when there is no gcc installed</span></div><div class="line" id="210125"><span class="nick" style="color:#6c3d55"><a href="#210125" label="[21:01:25]">&lt;unmatched-paren&gt;</a></span><span class="message">the openbsd repo is huge</span></div><div class="line" id="210130"><span class="nick" style="color:#bc80bd"><a href="#210130" label="[21:01:30]">&lt;bauen1&gt;</a></span><span class="message">Hagfish: and i really recommend to give <a rel="nofollow" href="https://github.com/klange/toaruos/">https://github.com/klange/toaruos/</a>  a look, i think it should be enough to run live-bootstrap</span></div><div class="line" id="210139"><span class="nick" style="color:#6c3d55"><a href="#210139" label="[21:01:39]">&lt;unmatched-paren&gt;</a></span><span class="message">it contains the full source code of the entire system...</span></div><div class="line" id="210206"><span class="nick" style="color:#389600"><a href="#210206" label="[21:02:06]">&lt;janneke&gt;</a></span><span class="message">stikonas: so your guix shell / guix environment -l guix.scm must have failed?</span></div><div class="line" id="210221"><span class="nick" style="color:#6d2462"><a href="#210221" label="[21:02:21]">&lt;stikonas[m]&gt;</a></span><span class="message">janneke: yeah, I need to update it...</span></div><div class="line" id="210652"><span class="nick" style="color:#3c5b35"><a href="#210652" label="[21:06:52]">*</a></span><span class="message">unmatched-paren gives up with openbsd</span></div><div class="line" id="210802"><span class="nick" style="color:#389600"><a href="#210802" label="[21:08:02]">&lt;janneke&gt;</a></span><span class="message">stikonas: how did you create the environment in which you run ./configure?</span></div><div class="line" id="210829"><span class="nick" style="color:#6c3d55"><a href="#210829" label="[21:08:29]">&lt;unmatched-paren&gt;</a></span><span class="message">ok, apparently they DON'T support wayland, those packages don't work <a rel="nofollow" href="https://old.reddit.com/r/openbsd/comments/r3h8vw/wayland_in_future/">https://old.reddit.com/r/openbsd/comments/r3h8vw/wayland_in_future/</a> </span></div><div class="line" id="210845"><span class="nick" style="color:#6c3d55"><a href="#210845" label="[21:08:45]">&lt;unmatched-paren&gt;</a></span><span class="message">they seem to have a very condescending attitude towards it</span></div><div class="line" id="210845"><span class="nick" style="color:#389600"><a href="#210845" label="[21:08:45]">&lt;janneke&gt;</a></span><span class="message">(it is improbable your problem was caused by an too-old guix)</span></div><div class="line" id="211207"><span class="nick" style="color:#6d2462"><a href="#211207" label="[21:12:07]">&lt;stikonas[m]&gt;</a></span><span class="message">janneke: just sourced my guix profile</span></div><div class="line" id="211220"><span class="nick" style="color:#6d2462"><a href="#211220" label="[21:12:20]">&lt;stikonas[m]&gt;</a></span><span class="message">Anyway you gave me some ideas to try</span></div><div class="line" id="211333"><span class="nick" style="color:#d9d9d9"><a href="#211333" label="[21:13:33]">&lt;Hagfish&gt;</a></span><span class="message">bauen1: interesting, thank you.  it says a current goal is &quot;get the OS to a state where it is self-hosting with just the addition of a C compiler.&quot;</span></div><div class="line" id="211558"><span class="nick" style="color:#389600"><a href="#211558" label="[21:15:58]">&lt;janneke&gt;</a></span><span class="message">stikonas: anyway, fix for the backtrace pushed to master; thanks!</span></div><div class="line" id="211830"><span class="nick" style="color:#bc80bd"><a href="#211830" label="[21:18:30]">&lt;bauen1&gt;</a></span><span class="message">Hagfish: the author klange also hangs around #osdev</span></div><div class="line" id="213722"><span class="nick" style="color:#234e69"><a href="#213722" label="[21:37:22]">&lt;oriansj&gt;</a></span><span class="message">bauen1: doesn't sound like they are in a state which can support running a Compiler powerful enough to self-host</span></div><div class="line" id="213838"><span class="nick" style="color:#234e69"><a href="#213838" label="[21:38:38]">&lt;oriansj&gt;</a></span><span class="message">hmmm, looks like I am still on the hook for getting gfk off the ground</span></div><div class="line" id="215025"><span class="nick" style="color:#bc80bd"><a href="#215025" label="[21:50:25]">&lt;bauen1&gt;</a></span><span class="message">oriansj: they are</span></div><div class="line" id="215026"><span class="nick" style="color:#bc80bd"><a href="#215026" label="[21:50:26]">&lt;bauen1&gt;</a></span><span class="message">&quot;Previously, with a capable compiler toolchain, ToaruOS 1.x was able to build its own kernel, userspace, libraries, and bootloader, and turn these into a working ISO CD image through a Python script that performed a similar function to the Makefile.&quot;</span></div><div class="line" id="215052"><span class="nick" style="color:#bc80bd"><a href="#215052" label="[21:50:52]">&lt;bauen1&gt;</a></span><span class="message">you might have to patch tinycc a bit though</span></div><div class="line" id="215120"><span class="nick" style="color:#234e69"><a href="#215120" label="[21:51:20]">&lt;oriansj&gt;</a></span><span class="message">bauen1: well patching compilers and tools chains we are quite good at</span></div><div class="line" id="215239"><span class="nick" style="color:#d9d9d9"><a href="#215239" label="[21:52:39]">&lt;Hagfish&gt;</a></span><span class="message">world experts, i'd say :)</span></div><div class="line" id="215341"><span class="nick" style="color:#bc80bd"><a href="#215341" label="[21:53:41]">&lt;bauen1&gt;</a></span><span class="message">in particular take a look at <a rel="nofollow" href="https://github.com/toaruos/gcc/commits/66860610d488c9501b3f0013d599df902fb31bf5">https://github.com/toaruos/gcc/commits/66860610d488c9501b3f0013d599df902fb31bf5</a>  and <a rel="nofollow" href="https://github.com/toaruos/binutils-gdb/commits/facad00e10bb66e7647be3540a33c978721803cb">https://github.com/toaruos/binutils-gdb/commits/facad00e10bb66e7647be3540a33c978721803cb</a>  so only minor adjustments to add new targets</span></div><div class="line" id="215449"><span class="nick" style="color:#bc80bd"><a href="#215449" label="[21:54:49]">&lt;bauen1&gt;</a></span><span class="message">there's also <a rel="nofollow" href="https://github.com/kuroko-lang/kuroko">https://github.com/kuroko-lang/kuroko</a>  by the same author, a dialect of python 3.x which could be intersting to someone</span></div><div class="line" id="215725"><span class="nick" style="color:#234e69"><a href="#215725" label="[21:57:25]">&lt;oriansj&gt;</a></span><span class="message">janneke: yeah, no. Guile on debian doesn't include guild and it doesn't look they have it packaged either</span></div><div class="line" id="215854"><span class="nick" style="color:#234e69"><a href="#215854" label="[21:58:54]">&lt;oriansj&gt;</a></span><span class="message">yet somehow they do have mescc packaged... hmm</span></div><div class="line" id="221257"><span class="nick" style="color:#2e2a4a"><a href="#221257" label="[22:12:57]">&lt;stikonas&gt;</a></span><span class="message">hmm, kuroko might be potentially interesting if it can run python3 bootstrap scripts...</span></div><div class="line" id="221319"><span class="nick" style="color:#2e2a4a"><a href="#221319" label="[22:13:19]">&lt;stikonas&gt;</a></span><span class="message">but it's likely that it can't</span></div><div class="line" id="222559"><span class="nick" style="color:#bc80bd"><a href="#222559" label="[22:25:59]">&lt;bauen1&gt;</a></span><span class="message">also keep in mind that that thing has its own (multiboot2) bootloader, so it doesn't depend on grub</span></div><div class="line" id="222623"><span class="nick" style="color:#bc80bd"><a href="#222623" label="[22:26:23]">&lt;bauen1&gt;</a></span><span class="message">or might be multiboot1</span></div><div class="line" id="223632"><span class="nick" style="color:#6b8072"><a href="#223632" label="[22:36:32]">&lt;doras&gt;</a></span><span class="message">stikonas: would it make sense to increase the number of cores that QEMU emulates? It can save a lot of time at least later in the bootstrap where builds can make use of multiple threads.</span></div><div class="line" id="223648"><span class="nick" style="color:#2e2a4a"><a href="#223648" label="[22:36:48]">&lt;stikonas&gt;</a></span><span class="message">doras: none of the builds use multiple threads</span></div><div class="line" id="223652"><span class="nick" style="color:#2e2a4a"><a href="#223652" label="[22:36:52]">&lt;stikonas&gt;</a></span><span class="message">everything is single threaded</span></div><div class="line" id="223726"><span class="nick" style="color:#2e2a4a"><a href="#223726" label="[22:37:26]">&lt;stikonas&gt;</a></span><span class="message">you can try to play with that and enable it as long as everything is still reproducible</span></div><div class="line" id="223747"><span class="nick" style="color:#6b8072"><a href="#223747" label="[22:37:47]">&lt;doras&gt;</a></span><span class="message">Really? I could have sworn I've seen multiple cores being utilized when using chroot/bwrap.</span></div><div class="line" id="223754"><span class="nick" style="color:#af8d2f"><a href="#223754" label="[22:37:54]">&lt;muurkha&gt;</a></span><span class="message">multithreading is an easy way for nondeterminism to enter</span></div><div class="line" id="223924"><span class="nick" style="color:#6b8072"><a href="#223924" label="[22:39:24]">&lt;doras&gt;</a></span><span class="message">muurkha: a bit more challenge, that's all :)</span></div><div class="line" id="224031"><span class="nick" style="color:#6b8072"><a href="#224031" label="[22:40:31]">&lt;doras&gt;</a></span><span class="message">stikonas: do we force gcc to use only a single thread or similar?</span></div><div class="line" id="224054"><span class="nick" style="color:#2e2a4a"><a href="#224054" label="[22:40:54]">&lt;stikonas&gt;</a></span><span class="message">doras: there is no forcing</span></div><div class="line" id="224104"><span class="nick" style="color:#2e2a4a"><a href="#224104" label="[22:41:04]">&lt;stikonas&gt;</a></span><span class="message">all compilers are single threaded</span></div><div class="line" id="224110"><span class="nick" style="color:#2e2a4a"><a href="#224110" label="[22:41:10]">&lt;stikonas&gt;</a></span><span class="message">including gcc</span></div><div class="line" id="224220"><span class="nick" style="color:#af8d2f"><a href="#224220" label="[22:42:20]">&lt;muurkha&gt;</a></span><span class="message">doras:</span></div><div class="line" id="224343"><span class="nick" style="color:#6b8072"><a href="#224343" label="[22:43:43]">&lt;doras&gt;</a></span><span class="message">Well, I guess I meant the build system (make or otherwise), not the compiler itself.</span></div><div class="line" id="224402"><span class="nick" style="color:#6b8072"><a href="#224402" label="[22:44:02]">&lt;doras&gt;</a></span><span class="message">But maybe they default to a single thread.</span></div><div class="line" id="224614"><span class="nick" style="color:#af8d2f"><a href="#224614" label="[22:46:14]">&lt;muurkha&gt;</a></span><span class="message">oops</span></div><div class="line" id="224629"><span class="nick" style="color:#af8d2f"><a href="#224629" label="[22:46:29]">&lt;muurkha&gt;</a></span><span class="message">I meant doras: or a bit less challenge for the hypothetical adversary</span></div><div class="line" id="224643"><span class="nick" style="color:#2e2a4a"><a href="#224643" label="[22:46:43]">&lt;stikonas&gt;</a></span><span class="message">doras: yes, they all default to a single thread</span></div><div class="line" id="231654"><span class="nick" style="color:#6b8072"><a href="#231654" label="[23:16:54]">&lt;doras&gt;</a></span><span class="message">Well, this means that we should optimize our workflow by working on a few things in parallel :)</span></div><div class="line" id="231718"><span class="nick" style="color:#6b8072"><a href="#231718" label="[23:17:18]">&lt;doras&gt;</a></span><span class="message">The more cores at one's disposal, the more tasks on they should take up.</span></div><div class="line" id="232434"><span class="nick" style="color:#6d2462"><a href="#232434" label="[23:24:34]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, as long as reproducibility is not sacrifused</span></div><div class="line" id="232508"><span class="nick" style="color:#6b8072"><a href="#232508" label="[23:25:08]">&lt;doras&gt;</a></span><span class="message">I highly recommend using git worktrees, by the way. For those not familiar with the feature, it allows checking out separate branches into separate directories that are still linked to the same git database. It allows you to work on multiple local branches as usual, but with complete parallelism. For example, you can run a length bootstraps on one local branch while performing git operations or code changes on another local branch.</span></div><div class="line" id="232605"><span class="nick" style="color:#6b8072"><a href="#232605" label="[23:26:05]">&lt;doras&gt;</a></span><span class="message">I have two live-boostrap builds running in parallel at the moment, and I'm working on preparing a third branch in parallel.</span></div><div class="line" id="232619"><span class="nick" style="color:#389600"><a href="#232619" label="[23:26:19]">&lt;vagrantc&gt;</a></span><span class="message">yeah, worktrees are pretty awesome</span></div><div class="line" id="233009"><span class="nick" style="color:#af8d2f"><a href="#233009" label="[23:30:09]">&lt;muurkha&gt;</a></span><span class="message">you don't need a special git feature for that, you can just make two clones of a bare checkout</span></div><div class="line" id="233042"><span class="nick" style="color:#389600"><a href="#233042" label="[23:30:42]">&lt;vagrantc&gt;</a></span><span class="message">it wastes diskspace for no particularly good reason and you get less accurate disk caching</span></div><div class="line" id="233112"><span class="nick" style="color:#af8d2f"><a href="#233112" label="[23:31:12]">&lt;muurkha&gt;</a></span><span class="message">it uses the same amount of disk space</span></div><div class="line" id="233120"><span class="nick" style="color:#af8d2f"><a href="#233120" label="[23:31:20]">&lt;muurkha&gt;</a></span><span class="message">to within epsilon</span></div><div class="line" id="233120"><span class="nick" style="color:#af8d2f"><a href="#233120" label="[23:31:20]">&lt;muurkha&gt;</a></span><span class="message">try it</span></div><div class="line" id="233144"><span class="nick" style="color:#af8d2f"><a href="#233144" label="[23:31:44]">&lt;muurkha&gt;</a></span><span class="message">at least as long as they're on the same Unix filesystem</span></div><div class="line" id="233529"><span class="nick" style="color:#389600"><a href="#233529" label="[23:35:29]">&lt;vagrantc&gt;</a></span><span class="message">git clone foo.git 1 is ~400MB, git clone foo.git 2 is ~100MB ... git worktree 3-worktree is ~100MB and git worktree 4-worktree is ~100MB</span></div><div class="line" id="233606"><span class="nick" style="color:#389600"><a href="#233606" label="[23:36:06]">&lt;vagrantc&gt;</a></span><span class="message">hardlinks?</span></div><div class="line" id="233629"><span class="nick" style="color:#389600"><a href="#233629" label="[23:36:29]">&lt;vagrantc&gt;</a></span><span class="message">looks like</span></div><div class="line" id="233642"><span class="nick" style="color:#3c5b35"><a href="#233642" label="[23:36:42]">*</a></span><span class="message">vagrantc still finds worktrees easier to work with...</span></div><div class="line" id="233734"><span class="nick" style="color:#389600"><a href="#233734" label="[23:37:34]">&lt;vagrantc&gt;</a></span><span class="message">yeah, deleting 1 then du -smc 2 3* 4* ... shows 2 as having 400MB</span></div><div class="line" id="233826"><span class="nick" style="color:#6b8072"><a href="#233826" label="[23:38:26]">&lt;doras&gt;</a></span><span class="message">stikonas: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/162">https://github.com/fosslinux/live-bootstrap/pull/162</a> </span></div><div class="line" id="233851"><span class="nick" style="color:#af8d2f"><a href="#233851" label="[23:38:51]">&lt;muurkha&gt;</a></span><span class="message">yeah, you can see the link count go up on files inside .git/objects/*</span></div><div class="line" id="233921"><span class="nick" style="color:#af8d2f"><a href="#233921" label="[23:39:21]">&lt;muurkha&gt;</a></span><span class="message">but you do have an extra push/pull step that I think worktrees avoid</span></div><div class="line" id="233941"><span class="nick" style="color:#6d2462"><a href="#233941" label="[23:39:41]">&lt;stikonas[m]&gt;</a></span><span class="message">You don't need work trees to run 2 bootstraps. rootfs.py takes tmpdir argument</span></div><div class="line" id="234727"><span class="nick" style="color:#af8d2f"><a href="#234727" label="[23:47:27]">&lt;muurkha&gt;</a></span><span class="message">oh thanks stikonas[m]</span></div><div class="line" id="234948"><span class="nick" style="color:#6b8072"><a href="#234948" label="[23:49:48]">&lt;doras&gt;</a></span><span class="message">stikonas: I always feel bad changing things while a build runs. For live-bootstrap it should be fairly safe because everything is copied, but it's not the same for every project.</span></div><div class="line" id="235046"><span class="nick" style="color:#af8d2f"><a href="#235046" label="[23:50:46]">&lt;muurkha&gt;</a></span><span class="message">yeah, you might make the build work by changing just the right thing at just the right time</span></div><div class="line" id="235054"><span class="nick" style="color:#af8d2f"><a href="#235054" label="[23:50:54]">&lt;muurkha&gt;</a></span><span class="message">and then never be able to figure out what you did</span></div><div class="line" id="235102"><span class="nick" style="color:#6b8072"><a href="#235102" label="[23:51:02]">&lt;doras&gt;</a></span><span class="message">Or fail :)</span></div><div class="line" id="235132"><span class="nick" style="color:#af8d2f"><a href="#235132" label="[23:51:32]">&lt;muurkha&gt;</a></span><span class="message">yeah, but that's less scary</span></div><div class="line" id="235150"><span class="nick" style="color:#af8d2f"><a href="#235150" label="[23:51:50]">&lt;muurkha&gt;</a></span><span class="message">just annoying</span></div><br /></div></body></html>