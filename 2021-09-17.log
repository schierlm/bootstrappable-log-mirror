<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-09-17.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000346"><span class="nick" style="color:#389600"><a href="#000346" label="[00:03:46]">&lt;stikonas&gt;</a></span><span class="message">just compiled my first C program with cc_riscv64, although cc_riscv64 is still very much WIP</span></div><div class="line" id="000403"><span class="nick" style="color:#389600"><a href="#000403" label="[00:04:03]">&lt;stikonas&gt;</a></span><span class="message">it was just compiling int main() {}</span></div><div class="line" id="000952"><span class="nick" style="color:#8dd3c7"><a href="#000952" label="[00:09:52]">&lt;Jeremy_Rand&gt;</a></span><span class="message">civodul: I could paste the desired HTTP header text here if you're able to convert that into the Scheme format used; would that be suitable?</span></div><div class="line" id="001052"><span class="nick" style="color:#2e2a4a"><a href="#001052" label="[00:10:52]">&lt;civodul&gt;</a></span><span class="message">Jeremy_Rand: yes, let's do that</span></div><div class="line" id="002205"><span class="nick" style="color:#8dd3c7"><a href="#002205" label="[00:22:05]">&lt;Jeremy_Rand&gt;</a></span><span class="message">civodul: is enabling inclusion in the HSTS preload list okay?  Advantage is that web browsers will know to use HTTPS even before the first visit (so you get better security against sslstrip attacks), disadvantage is that if you decide to disable HTTPS in the future, you'd have to wait for browser updates to remove you from the preload list.</span></div><div class="line" id="002229"><span class="nick" style="color:#8dd3c7"><a href="#002229" label="[00:22:29]">&lt;Jeremy_Rand&gt;</a></span><span class="message">(Asking because that affects which header text I paste)</span></div><div class="line" id="004129"><span class="nick" style="color:#389600"><a href="#004129" label="[00:41:29]">&lt;stikonas&gt;</a></span><span class="message">I would say it should be fine</span></div><div class="line" id="004156"><span class="nick" style="color:#389600"><a href="#004156" label="[00:41:56]">&lt;stikonas&gt;</a></span><span class="message">unless something happens to let's encrypt, there shouldn't be any reason to disable it</span></div><div class="line" id="004717"><span class="nick" style="color:#8dd3c7"><a href="#004717" label="[00:47:17]">&lt;Jeremy_Rand&gt;</a></span><span class="message">stikonas: yeah, that's my thinking too.  Looks like civodul disconnected; guess I'll wait for them to return before proceeding</span></div><div class="line" id="011630"><span class="nick" style="color:#80b1d3"><a href="#011630" label="[01:16:30]">&lt;oriansj&gt;</a></span><span class="message">Jeremy_Rand: no need. this channel is logged; civodul or rekado will see the logs and we can incorporate your fix</span></div><div class="line" id="011951"><span class="nick" style="color:#80b1d3"><a href="#011951" label="[01:19:51]">&lt;oriansj&gt;</a></span><span class="message">so just post your suggested fix when you think it is ok for others to see</span></div><div class="line" id="012040"><span class="nick" style="color:#80b1d3"><a href="#012040" label="[01:20:40]">&lt;oriansj&gt;</a></span><span class="message">stikonas: I'll be doing the AMD64 hex2 fix later today and hopefully the AArch64 this weekend.</span></div><div class="line" id="012144"><span class="nick" style="color:#389600"><a href="#012144" label="[01:21:44]">&lt;stikonas&gt;</a></span><span class="message">yeah, AArch64 especially needs it</span></div><div class="line" id="012155"><span class="nick" style="color:#389600"><a href="#012155" label="[01:21:55]">&lt;stikonas&gt;</a></span><span class="message">it takes 15 minutes on my AMD64 laptop on qemu</span></div><div class="line" id="012205"><span class="nick" style="color:#389600"><a href="#012205" label="[01:22:05]">&lt;stikonas&gt;</a></span><span class="message">I think after the fix it will be down to maybe 2 minutes</span></div><div class="line" id="012228"><span class="nick" style="color:#389600"><a href="#012228" label="[01:22:28]">&lt;stikonas&gt;</a></span><span class="message">not sure if it can be called a &quot;fix&quot;, it's more of a workaround</span></div><div class="line" id="012251"><span class="nick" style="color:#80b1d3"><a href="#012251" label="[01:22:51]">&lt;oriansj&gt;</a></span><span class="message">performance enhancement as it isn't actually fixing anything?</span></div><div class="line" id="012306"><span class="nick" style="color:#389600"><a href="#012306" label="[01:23:06]">&lt;stikonas&gt;</a></span><span class="message">what I mean it's qemu issue...</span></div><div class="line" id="012326"><span class="nick" style="color:#389600"><a href="#012326" label="[01:23:26]">&lt;stikonas&gt;</a></span><span class="message">I don't think it matters for non-emulated systems</span></div><div class="line" id="012339"><span class="nick" style="color:#389600"><a href="#012339" label="[01:23:39]">&lt;stikonas&gt;</a></span><span class="message">but ok, it fixes performance in qemu</span></div><div class="line" id="012406"><span class="nick" style="color:#389600"><a href="#012406" label="[01:24:06]">&lt;stikonas&gt;</a></span><span class="message">on risc-v I've also fixed hex1, but it might be harder on other arches</span></div><div class="line" id="012427"><span class="nick" style="color:#389600"><a href="#012427" label="[01:24:27]">&lt;stikonas&gt;</a></span><span class="message">I didn't want to recalculate jumps, but it just happened that I only had to insert 1 noop instruction</span></div><div class="line" id="012437"><span class="nick" style="color:#80b1d3"><a href="#012437" label="[01:24:37]">&lt;oriansj&gt;</a></span><span class="message">well it doesn't really save much time on other architectures to fix hex0 and hex1</span></div><div class="line" id="012443"><span class="nick" style="color:#389600"><a href="#012443" label="[01:24:43]">&lt;stikonas&gt;</a></span><span class="message">exactly</span></div><div class="line" id="012512"><span class="nick" style="color:#389600"><a href="#012512" label="[01:25:12]">&lt;stikonas&gt;</a></span><span class="message">it's spending 95% of time in hex2</span></div><div class="line" id="012724"><span class="nick" style="color:#80b1d3"><a href="#012724" label="[01:27:24]">&lt;oriansj&gt;</a></span><span class="message">oh and the raspberryPI memory mapped performance improvement still is only in the 12% range; So something else might be in play there but I'll look into that later.</span></div><div class="line" id="012752"><span class="nick" style="color:#389600"><a href="#012752" label="[01:27:52]">&lt;stikonas&gt;</a></span><span class="message">well, try running it in strace</span></div><div class="line" id="012800"><span class="nick" style="color:#389600"><a href="#012800" label="[01:28:00]">&lt;stikonas&gt;</a></span><span class="message">to see if you can spot where time is spent</span></div><div class="line" id="012819"><span class="nick" style="color:#389600"><a href="#012819" label="[01:28:19]">&lt;stikonas&gt;</a></span><span class="message">maybe i/o is slower there</span></div><div class="line" id="012832"><span class="nick" style="color:#389600"><a href="#012832" label="[01:28:32]">&lt;stikonas&gt;</a></span><span class="message">but it's really dramatic on more powerful machines</span></div><div class="line" id="013530"><span class="nick" style="color:#80b1d3"><a href="#013530" label="[01:35:30]">&lt;oriansj&gt;</a></span><span class="message">well ramdisk should eliminate i/o as the bottleneck but I guess I might as well byte the bullet and just strace it (it'll take about an hour)</span></div><div class="line" id="013724"><span class="nick" style="color:#389600"><a href="#013724" label="[01:37:24]">&lt;stikonas&gt;</a></span><span class="message">bottleneck might be visible quite quickly</span></div><div class="line" id="013730"><span class="nick" style="color:#389600"><a href="#013730" label="[01:37:30]">&lt;stikonas&gt;</a></span><span class="message">without running to the end</span></div><div class="line" id="014545"><span class="nick" style="color:#6d2462"><a href="#014545" label="[01:45:45]">&lt;xentrac&gt;</a></span><span class="message">so, I'm noticing some things in Qfitzah I hadn't noticed before.</span></div><div class="line" id="014618"><span class="nick" style="color:#6d2462"><a href="#014618" label="[01:46:18]">&lt;xentrac&gt;</a></span><span class="message">the context is that I'm trying to make the executable as small as I can; I'm down below 900 bytes at this point</span></div><div class="line" id="014658"><span class="nick" style="color:#6d2462"><a href="#014658" label="[01:46:58]">&lt;xentrac&gt;</a></span><span class="message">for i386</span></div><div class="line" id="014755"><span class="nick" style="color:#6d2462"><a href="#014755" label="[01:47:55]">&lt;xentrac&gt;</a></span><span class="message">if I put a value in a callee-saved register, that saves me from having to save and restore it across calls to other subroutines (2 bytes of code per call)</span></div><div class="line" id="014902"><span class="nick" style="color:#6d2462"><a href="#014902" label="[01:49:02]">&lt;xentrac&gt;</a></span><span class="message">but I have to save and restore the register on entry and exit; this is 2 bytes, plus an extra byte per early return, because I have to put push %ebp or whatever at the top and pop %ebp before every ret</span></div><div class="line" id="014953"><span class="nick" style="color:#6d2462"><a href="#014953" label="[01:49:53]">&lt;xentrac&gt;</a></span><span class="message">up to a maximum of 1 extra byte per early return, because I can replace pop %ebx; pop %ebp; ret with a simple jump to a shared procedure epilogue that pops each thing</span></div><div class="line" id="015247"><span class="nick" style="color:#6d2462"><a href="#015247" label="[01:52:47]">&lt;xentrac&gt;</a></span><span class="message">you'd think this would sometimes be a win for space, but it basically never is because I never have enough child function calls with live temporary values.  instead what wins is putting all my values in call-clobbered (caller-saved) registers and pushing them and popping them around the calls</span></div><div class="line" id="015350"><span class="nick" style="color:#6d2462"><a href="#015350" label="[01:53:50]">&lt;xentrac&gt;</a></span><span class="message">which as an extra bonus allows me to move the values from one register to another for free when there's a call in between</span></div><div class="line" id="015356"><span class="nick" style="color:#80b1d3"><a href="#015356" label="[01:53:56]">&lt;oriansj&gt;</a></span><span class="message">a bunch of cacheflush(0x611be900, 0x611be968, 0)   = 0</span></div><div class="line" id="015447"><span class="nick" style="color:#6d2462"><a href="#015447" label="[01:54:47]">&lt;xentrac&gt;</a></span><span class="message">sometimes I'm also doing things like mov 4(%esp), %ecx even though that's 4 bytes; I think that's probably an error</span></div><div class="line" id="015519"><span class="nick" style="color:#6d2462"><a href="#015519" label="[01:55:19]">&lt;xentrac&gt;</a></span><span class="message">this is sort of going to the opposite extreme from hex0 though: compromising comprehensibility and bug-proneness in pursuit of bumming the code down by a few bytes</span></div><div class="line" id="015735"><span class="nick" style="color:#6d2462"><a href="#015735" label="[01:57:35]">&lt;xentrac&gt;</a></span><span class="message">I'm thinking I might reassign %ebx, %ebp, and maybe even %esi and %edi, to be call-clobbered (caller-saved) in Qfitzah to take advantage of the more compact instruction encodings that come from the 8086</span></div><div class="line" id="020001"><span class="nick" style="color:#6d2462"><a href="#020001" label="[02:00:01]">&lt;xentrac&gt;</a></span><span class="message">I'm curious to hear about other people's experiences</span></div><div class="line" id="020134"><span class="nick" style="color:#389600"><a href="#020134" label="[02:01:34]">&lt;stikonas&gt;</a></span><span class="message">ok, shoul be enough work on cc_riscv64 for now, got easy stuff working (labels, goto, return and asm statements)</span></div><div class="line" id="020209"><span class="nick" style="color:#389600"><a href="#020209" label="[02:02:09]">&lt;stikonas&gt;</a></span><span class="message">and the binary is 6.4 KB now, so I guess I'm about 1/3 done</span></div><div class="line" id="020232"><span class="nick" style="color:#6d2462"><a href="#020232" label="[02:02:32]">&lt;xentrac&gt;</a></span><span class="message">congratulations!</span></div><div class="line" id="020326"><span class="nick" style="color:#389600"><a href="#020326" label="[02:03:26]">&lt;stikonas&gt;</a></span><span class="message">well, these are really easy, basically directly translates to assembly instruction</span></div><div class="line" id="020551"><span class="nick" style="color:#389600"><a href="#020551" label="[02:05:51]">&lt;stikonas&gt;</a></span><span class="message">I guess parsing expressions will be where most of the remaining complexity is</span></div><div class="line" id="021035"><span class="nick" style="color:#6d2462"><a href="#021035" label="[02:10:35]">&lt;xentrac&gt;</a></span><span class="message">expressions are not so bad</span></div><div class="line" id="021157"><span class="nick" style="color:#6d2462"><a href="#021157" label="[02:11:57]">&lt;xentrac&gt;</a></span><span class="message">I mean if you're doing recursive descent you just refactor things like &lt;sum&gt; &quot;+&quot; &lt;term&gt; | &lt;sum&gt; &quot;-&quot; &lt;term&gt; into things like &lt;term&gt; (&quot;+&quot; &lt;term&gt; | &quot;-&quot; &lt;term&gt;)*</span></div><div class="line" id="021237"><span class="nick" style="color:#6d2462"><a href="#021237" label="[02:12:37]">&lt;xentrac&gt;</a></span><span class="message">although C has a lot of precedence levels and implicit coercions and so it ends up still being a huge pain</span></div><div class="line" id="021414"><span class="nick" style="color:#6d2462"><a href="#021414" label="[02:14:14]">&lt;xentrac&gt;</a></span><span class="message">I've actually done an LR-style parser by hand in the past, which might be easier, dunno.  using repeated attempted pattern matches on the stack instead of a constant-time table</span></div><div class="line" id="021629"><span class="nick" style="color:#389600"><a href="#021629" label="[02:16:29]">&lt;stikonas&gt;</a></span><span class="message">I don't think cc_* M2_Planet  look at precedence levels (but I still need to look at that code</span></div><div class="line" id="021639"><span class="nick" style="color:#389600"><a href="#021639" label="[02:16:39]">&lt;stikonas&gt;</a></span><span class="message">I think it requires explicit brackets</span></div><div class="line" id="021649"><span class="nick" style="color:#6d2462"><a href="#021649" label="[02:16:49]">&lt;xentrac&gt;</a></span><span class="message">that's simpler!</span></div><div class="line" id="021707"><span class="nick" style="color:#6d2462"><a href="#021707" label="[02:17:07]">&lt;xentrac&gt;</a></span><span class="message">in <a rel="nofollow" href="http://canonical.org/~kragen/sw/sk">http://canonical.org/~kragen/sw/sk</a>  if you want to look at it.  <a rel="nofollow" href="http://canonical.org/~kragen/sw/sk.js">http://canonical.org/~kragen/sw/sk.js</a>  is the code that compiles λ-calculus expressions to SK-combinators and then evaluates them with combinator graph reduction</span></div><div class="line" id="021727"><span class="nick" style="color:#6d2462"><a href="#021727" label="[02:17:27]">&lt;xentrac&gt;</a></span><span class="message">holy shit, I wrote that 15 years ago</span></div><div class="line" id="021757"><span class="nick" style="color:#6d2462"><a href="#021757" label="[02:17:57]">&lt;xentrac&gt;</a></span><span class="message">did my grammar-factoring example make sense?</span></div><div class="line" id="021929"><span class="nick" style="color:#389600"><a href="#021929" label="[02:19:29]">&lt;stikonas&gt;</a></span><span class="message">well, I guess. But in any case I'm just following what we already have for C code (M2-Planet/cc_* prototype) and cc_amd64.M1</span></div><div class="line" id="023216"><span class="nick" style="color:#389600"><a href="#023216" label="[02:32:16]">&lt;stikonas&gt;</a></span><span class="message">oh, continue statement is basically no-op in cc_*</span></div><div class="line" id="023337"><span class="nick" style="color:#389600"><a href="#023337" label="[02:33:37]">&lt;stikonas&gt;</a></span><span class="message">M2-Planet has only 1 continue statement but it looks like in a code that M2-Planet won't hit when building itself</span></div><div class="line" id="025655"><span class="nick" style="color:#80b1d3"><a href="#025655" label="[02:56:55]">&lt;oriansj&gt;</a></span><span class="message">yes it does have precedence levels. The hardest part is the tokenization which is why we have the debug_list being the most important function you write</span></div><div class="line" id="025726"><span class="nick" style="color:#389600"><a href="#025726" label="[02:57:26]">&lt;stikonas&gt;</a></span><span class="message">well, that one is done some time ago</span></div><div class="line" id="025738"><span class="nick" style="color:#389600"><a href="#025738" label="[02:57:38]">&lt;stikonas&gt;</a></span><span class="message">I wrote debug_list too...</span></div><div class="line" id="025750"><span class="nick" style="color:#389600"><a href="#025750" label="[02:57:50]">&lt;stikonas&gt;</a></span><span class="message">didn't use it much though...</span></div><div class="line" id="025756"><span class="nick" style="color:#80b1d3"><a href="#025756" label="[02:57:56]">&lt;oriansj&gt;</a></span><span class="message">and the tokenization looks good? then you only have a couple hours of work before you are done.</span></div><div class="line" id="025816"><span class="nick" style="color:#389600"><a href="#025816" label="[02:58:16]">&lt;stikonas&gt;</a></span><span class="message">a bit more than 2 hours...</span></div><div class="line" id="025823"><span class="nick" style="color:#389600"><a href="#025823" label="[02:58:23]">&lt;stikonas&gt;</a></span><span class="message">yeah, tokenization is good</span></div><div class="line" id="025855"><span class="nick" style="color:#389600"><a href="#025855" label="[02:58:55]">&lt;stikonas&gt;</a></span><span class="message">well, I need to do flow control / local variables and expressions</span></div><div class="line" id="025906"><span class="nick" style="color:#389600"><a href="#025906" label="[02:59:06]">&lt;stikonas&gt;</a></span><span class="message">but hopefully will be done over weekend</span></div><div class="line" id="025935"><span class="nick" style="color:#389600"><a href="#025935" label="[02:59:35]">&lt;stikonas&gt;</a></span><span class="message">cc_reader.c is only 200 lines in size...</span></div><div class="line" id="025950"><span class="nick" style="color:#80b1d3"><a href="#025950" label="[02:59:50]">&lt;oriansj&gt;</a></span><span class="message">but the hardest to debug and do correctly</span></div><div class="line" id="030008"><span class="nick" style="color:#389600"><a href="#030008" label="[03:00:08]">&lt;stikonas&gt;</a></span><span class="message">yeah, I guess so</span></div><div class="line" id="030010"><span class="nick" style="color:#80b1d3"><a href="#030010" label="[03:00:10]">&lt;oriansj&gt;</a></span><span class="message">hence why debug_list is absolutely essential until it is done</span></div><div class="line" id="030019"><span class="nick" style="color:#389600"><a href="#030019" label="[03:00:19]">&lt;stikonas&gt;</a></span><span class="message">I did debug it a bit... but it was not too bad</span></div><div class="line" id="030059"><span class="nick" style="color:#80b1d3"><a href="#030059" label="[03:00:59]">&lt;oriansj&gt;</a></span><span class="message">you'll need to debug it until debug_list's output matches what the C code would produce</span></div><div class="line" id="030124"><span class="nick" style="color:#80b1d3"><a href="#030124" label="[03:01:24]">&lt;oriansj&gt;</a></span><span class="message">hence take the C code and have it just dump the list so easier inspection.</span></div><div class="line" id="030146"><span class="nick" style="color:#389600"><a href="#030146" label="[03:01:46]">&lt;stikonas&gt;</a></span><span class="message">well, I didn't try it yet on big programs...</span></div><div class="line" id="030152"><span class="nick" style="color:#80b1d3"><a href="#030152" label="[03:01:52]">&lt;oriansj&gt;</a></span><span class="message">the pointer addresses might be different but the tokens should be identical</span></div><div class="line" id="030158"><span class="nick" style="color:#389600"><a href="#030158" label="[03:01:58]">&lt;stikonas&gt;</a></span><span class="message">but on smaller programs it was working just fine</span></div><div class="line" id="030241"><span class="nick" style="color:#389600"><a href="#030241" label="[03:02:41]">&lt;stikonas&gt;</a></span><span class="message">well, I can compile something like that at the moment: <a rel="nofollow" href="https://paste.debian.net/1212061/">https://paste.debian.net/1212061/</a> </span></div><div class="line" id="030246"><span class="nick" style="color:#80b1d3"><a href="#030246" label="[03:02:46]">&lt;oriansj&gt;</a></span><span class="message">the real question is M2-Planet building just fine</span></div><div class="line" id="030321"><span class="nick" style="color:#389600"><a href="#030321" label="[03:03:21]">&lt;stikonas&gt;</a></span><span class="message">yeah, we'll see once I'm done</span></div><div class="line" id="030336"><span class="nick" style="color:#389600"><a href="#030336" label="[03:03:36]">&lt;stikonas&gt;</a></span><span class="message">right now I'm just trying to do one small feature at a time</span></div><div class="line" id="030345"><span class="nick" style="color:#80b1d3"><a href="#030345" label="[03:03:45]">&lt;oriansj&gt;</a></span><span class="message">fair</span></div><div class="line" id="030346"><span class="nick" style="color:#389600"><a href="#030346" label="[03:03:46]">&lt;stikonas&gt;</a></span><span class="message">and then retest...</span></div><div class="line" id="030352"><span class="nick" style="color:#389600"><a href="#030352" label="[03:03:52]">&lt;stikonas&gt;</a></span><span class="message">easiet to catch any errors</span></div><div class="line" id="030454"><span class="nick" style="color:#389600"><a href="#030454" label="[03:04:54]">&lt;stikonas&gt;</a></span><span class="message">I suppose tokenization is much harder to get working right when you do it for the first time in assembly</span></div><div class="line" id="030506"><span class="nick" style="color:#389600"><a href="#030506" label="[03:05:06]">&lt;stikonas&gt;</a></span><span class="message">anyway, bed time here</span></div><div class="line" id="030627"><span class="nick" style="color:#80b1d3"><a href="#030627" label="[03:06:27]">&lt;oriansj&gt;</a></span><span class="message">here is the full strace of hex0 building hex0: <a rel="nofollow" href="https://paste.debian.net/1212062/">https://paste.debian.net/1212062/</a> </span></div><div class="line" id="032115"><span class="nick" style="color:#8dd3c7"><a href="#032115" label="[03:21:15]">&lt;Jeremy_Rand&gt;</a></span><span class="message">Good point oriansj.  Okay, so, if you are confident that HTTPS is supported for all subdomains where HTTP exists, the raw HTTP response header that should be sent on TLS port 443 is:</span></div><div class="line" id="032119"><span class="nick" style="color:#8dd3c7"><a href="#032119" label="[03:21:19]">&lt;Jeremy_Rand&gt;</a></span><span class="message">Strict-Transport-Security: max-age=63072000; includeSubDomains; preload</span></div><div class="line" id="032251"><span class="nick" style="color:#8dd3c7"><a href="#032251" label="[03:22:51]">&lt;Jeremy_Rand&gt;</a></span><span class="message">TCP port 80 should also be changed to do an HTTP redirect to HTTPS, instead of serving the same content that TLS port 443 has; let me know if you need help with that change</span></div><div class="line" id="032431"><span class="nick" style="color:#8dd3c7"><a href="#032431" label="[03:24:31]">&lt;Jeremy_Rand&gt;</a></span><span class="message">If you are concerned that there may be unnoticed subdomains where HTTP exists but HTTPS does not, you may wish to temporarily decrease the max-age number at first while you monitor server logs for issues</span></div><div class="line" id="032810"><span class="nick" style="color:#8dd3c7"><a href="#032810" label="[03:28:10]">&lt;Jeremy_Rand&gt;</a></span><span class="message">Hope this helps, ping me if you have any issues/questions.  Or if I've disconnected accidentally, you can email me at jeremyrand at danwin1210.me to get my attention</span></div><div class="line" id="042720"><span class="nick" style="color:#234e69"><a href="#042720" label="[04:27:20]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: got almost all your guile PR rebased, just testing rn</span></div><div class="line" id="103953"><span class="nick" style="color:#389600"><a href="#103953" label="[10:39:53]">&lt;stikonas&gt;</a></span><span class="message">fossy: good to hear that</span></div><div class="line" id="104004"><span class="nick" style="color:#389600"><a href="#104004" label="[10:40:04]">&lt;stikonas&gt;</a></span><span class="message">oriansj: hmm, that strace looks like it's still getting stuck in mprotect</span></div><br /></div></body></html>