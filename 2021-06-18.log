<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-06-18.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="021425"><span class="nick" style="color:#8dd3c7"><a href="#021425" label="[02:14:25]">&lt;xentrac&gt;</a></span><span class="message">akkartik's mu is super awesome, yes</span></div><div class="line" id="021434"><span class="nick" style="color:#8dd3c7"><a href="#021434" label="[02:14:34]">&lt;xentrac&gt;</a></span><span class="message">what's incremental accountability</span></div><div class="line" id="021435"><span class="nick" style="color:#8dd3c7"><a href="#021435" label="[02:14:35]">&lt;xentrac&gt;</a></span><span class="message">'?</span></div><div class="line" id="034352"><span class="nick" style="color:#2e2a4a"><a href="#034352" label="[03:43:52]">&lt;siraben&gt;</a></span><span class="message">oriansj: Ah, I see.</span></div><div class="line" id="034422"><span class="nick" style="color:#2e2a4a"><a href="#034422" label="[03:44:22]">&lt;siraben&gt;</a></span><span class="message">I feel like memory safety can be achieved after the fact. No. 1 goal is having the bootstrap in the first place, then one refines it</span></div><div class="line" id="040618"><span class="nick" style="color:#6b8072"><a href="#040618" label="[04:06:18]">&lt;Hagfish&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.cnet.com/news/google-backed-linux-project-could-make-android-chrome-os-harder-to-hack/">https://www.cnet.com/news/google-backed-linux-project-could-make-android-chrome-os-harder-to-hack/</a> </span></div><div class="line" id="040627"><span class="nick" style="color:#6b8072"><a href="#040627" label="[04:06:27]">&lt;Hagfish&gt;</a></span><span class="message">spoiler alert: Rust</span></div><div class="line" id="053207"><span class="nick">***</span><span class="message notice">terpri is now known as robin</span></div><div class="line" id="152225"><span class="nick" style="color:#80b1d3"><a href="#152225" label="[15:22:25]">&lt;stikonas&gt;</a></span><span class="message">fossy: that's for merging. And in the next stage0-posix version we'll also have mkdir, so we can remove all advance prepared empty mkdir calls</span></div><div class="line" id="152240"><span class="nick" style="color:#6d2462"><a href="#152240" label="[15:22:40]">&lt;fossy&gt;</a></span><span class="message">alright</span></div><div class="line" id="152248"><span class="nick" style="color:#6d2462"><a href="#152248" label="[15:22:48]">&lt;fossy&gt;</a></span><span class="message">i'll attempt to push my kernel work this weekend.</span></div><div class="line" id="152314"><span class="nick" style="color:#6d2462"><a href="#152314" label="[15:23:14]">&lt;fossy&gt;</a></span><span class="message">now that 2nd busy session of the last two months is over, i should have more bootstrappable free time</span></div><div class="line" id="152723"><span class="nick" style="color:#80b1d3"><a href="#152723" label="[15:27:23]">&lt;stikonas&gt;</a></span><span class="message">in the early bootstrap I still want to get rid of mes and tcc submodules</span></div><div class="line" id="152734"><span class="nick" style="color:#80b1d3"><a href="#152734" label="[15:27:34]">&lt;stikonas&gt;</a></span><span class="message">running into some problems with mes though</span></div><div class="line" id="152739"><span class="nick" style="color:#80b1d3"><a href="#152739" label="[15:27:39]">&lt;stikonas&gt;</a></span><span class="message">so maybe should do tcc first</span></div><div class="line" id="191137"><span class="nick" style="color:#234e69"><a href="#191137" label="[19:11:37]">&lt;clemens3&gt;</a></span><span class="message">both links in the topic don't mention operating systems explicitly (if I am correct), is that because it is implicitly included, or some kind of omission? and if implicitly clearly included, what OS are you working towards.. guix or something smaller, or just way out in the future (sorry if there is already something out there that can be compiled from scratch)..</span></div><div class="line" id="192636"><span class="nick" style="color:#6c3d55"><a href="#192636" label="[19:26:36]">&lt;NieDzejkob&gt;</a></span><span class="message">the goal is generally the typical open-source stack, i.e. GNU/Linux.</span></div><div class="line" id="192718"><span class="nick" style="color:#6c3d55"><a href="#192718" label="[19:27:18]">&lt;NieDzejkob&gt;</a></span><span class="message">most people seem to be deferring dealing with the kernel itself as part of the bootstrap seed, if that's what you're asking</span></div><div class="line" id="192815"><span class="nick" style="color:#6c3d55"><a href="#192815" label="[19:28:15]">&lt;NieDzejkob&gt;</a></span><span class="message">the exceptions I'm aware of are gio's <a rel="nofollow" href="https://gitlab.com/giomasce/asmc">https://gitlab.com/giomasce/asmc</a>  and my recent efforts based on forth: <a rel="nofollow" href="https://niedzejkob.p4.team/bootstrap/miniforth/">https://niedzejkob.p4.team/bootstrap/miniforth/</a> </span></div><div class="line" id="193303"><span class="nick" style="color:#234e69"><a href="#193303" label="[19:33:03]">&lt;clemens3&gt;</a></span><span class="message">NieDzejkob: oki.. expected so..</span></div><div class="line" id="195810"><span class="nick" style="color:#80b1d3"><a href="#195810" label="[19:58:10]">&lt;stikonas&gt;</a></span><span class="message">in some sense it doesn't matter what OS, once you have GCC on one OS, you can basically build any OS</span></div><div class="line" id="195816"><span class="nick" style="color:#80b1d3"><a href="#195816" label="[19:58:16]">&lt;stikonas&gt;</a></span><span class="message">at least if you have source</span></div><div class="line" id="201253"><span class="nick" style="color:#234e69"><a href="#201253" label="[20:12:53]">&lt;clemens3&gt;</a></span><span class="message">yes, just wanted to make sure that is the end goal..</span></div><div class="line" id="201311"><span class="nick" style="color:#234e69"><a href="#201311" label="[20:13:11]">&lt;clemens3&gt;</a></span><span class="message">working myself on LFS and trying to go from the latest to older versions..</span></div><div class="line" id="201332"><span class="nick" style="color:#234e69"><a href="#201332" label="[20:13:32]">&lt;clemens3&gt;</a></span><span class="message">of course, way to go:)</span></div><div class="line" id="201357"><span class="nick" style="color:#6c3d55"><a href="#201357" label="[20:13:57]">&lt;NieDzejkob&gt;</a></span><span class="message">LFS has quite a big bootstrap seed though, doesn't it ;)</span></div><div class="line" id="201409"><span class="nick" style="color:#234e69"><a href="#201409" label="[20:14:09]">&lt;clemens3&gt;</a></span><span class="message">yes, the whole kaboka</span></div><div class="line" id="201606"><span class="nick" style="color:#234e69"><a href="#201606" label="[20:16:06]">&lt;clemens3&gt;</a></span><span class="message">but atleast it follows the first rule, not to rely on itself.. and it is source all the way</span></div><div class="line" id="201705"><span class="nick" style="color:#234e69"><a href="#201705" label="[20:17:05]">&lt;clemens3&gt;</a></span><span class="message">except java, rust, maybe go-lang (not officially part of LFS).. but atleast the java part you guys/girls seemed to have solved already..</span></div><div class="line" id="203338"><span class="nick" style="color:#80b1d3"><a href="#203338" label="[20:33:38]">&lt;stikonas&gt;</a></span><span class="message">clemens3: well, we can basicall bootstrap what is roughly LFS from kernel+357 byte hex assembler</span></div><div class="line" id="203425"><span class="nick" style="color:#80b1d3"><a href="#203425" label="[20:34:25]">&lt;stikonas&gt;</a></span><span class="message">(with some minor gaps, e.g. g++ is missing for now)</span></div><div class="line" id="203650"><span class="nick" style="color:#234e69"><a href="#203650" label="[20:36:50]">&lt;clemens3&gt;</a></span><span class="message">really, wow, didn't know you  guys have come this far..</span></div><div class="line" id="203717"><span class="nick" style="color:#234e69"><a href="#203717" label="[20:37:17]">&lt;clemens3&gt;</a></span><span class="message">but well, the kernel still is big..</span></div><div class="line" id="203759"><span class="nick" style="color:#234e69"><a href="#203759" label="[20:37:59]">&lt;clemens3&gt;</a></span><span class="message">but well, on the way..</span></div><div class="line" id="204401"><span class="nick" style="color:#80b1d3"><a href="#204401" label="[20:44:01]">&lt;stikonas&gt;</a></span><span class="message">clemens3: kernel is big, but it might not be as big as you think</span></div><div class="line" id="204417"><span class="nick" style="color:#80b1d3"><a href="#204417" label="[20:44:17]">&lt;stikonas&gt;</a></span><span class="message">probably something like 400kb might be enough</span></div><div class="line" id="204428"><span class="nick" style="color:#80b1d3"><a href="#204428" label="[20:44:28]">&lt;stikonas&gt;</a></span><span class="message">(even with linux)</span></div><div class="line" id="204522"><span class="nick" style="color:#80b1d3"><a href="#204522" label="[20:45:22]">&lt;stikonas&gt;</a></span><span class="message">basically we need process and VFS in RAM</span></div><div class="line" id="204726"><span class="nick" style="color:#234e69"><a href="#204726" label="[20:47:26]">&lt;clemens3&gt;</a></span><span class="message">ok, you mean your own mini kernel to get to some minimal linux kernel..?</span></div><div class="line" id="204942"><span class="nick" style="color:#80b1d3"><a href="#204942" label="[20:49:42]">&lt;stikonas&gt;</a></span><span class="message">well, either some mini kernel can be used (but somebody has to write it</span></div><div class="line" id="204948"><span class="nick" style="color:#80b1d3"><a href="#204948" label="[20:49:48]">&lt;stikonas&gt;</a></span><span class="message">or you can strip down linux</span></div><div class="line" id="205001"><span class="nick" style="color:#80b1d3"><a href="#205001" label="[20:50:01]">&lt;stikonas&gt;</a></span><span class="message">we only need a few things on top of linux'es allnoconfig</span></div><div class="line" id="205054"><span class="nick" style="color:#8dd3c7"><a href="#205054" label="[20:50:54]">&lt;xentrac&gt;</a></span><span class="message">stikonas: the problem isn't so much how many bytes of binary data is in the kernel, more how many pages of source code</span></div><div class="line" id="205222"><span class="nick" style="color:#80b1d3"><a href="#205222" label="[20:52:22]">&lt;stikonas&gt;</a></span><span class="message">well, that depends on which kernel you use...</span></div><div class="line" id="205235"><span class="nick" style="color:#80b1d3"><a href="#205235" label="[20:52:35]">&lt;stikonas&gt;</a></span><span class="message">but bootstrap process should not depend on kernel</span></div><div class="line" id="205249"><span class="nick" style="color:#80b1d3"><a href="#205249" label="[20:52:49]">&lt;stikonas&gt;</a></span><span class="message">i.e. no checksums should be affected</span></div><div class="line" id="205308"><span class="nick" style="color:#8dd3c7"><a href="#205308" label="[20:53:08]">&lt;xentrac&gt;</a></span><span class="message">the kernel is certainly in a position to affect all your checksums</span></div><div class="line" id="205353"><span class="nick" style="color:#8dd3c7"><a href="#205353" label="[20:53:53]">&lt;xentrac&gt;</a></span><span class="message">I mean, there's a well-defined correct behavior for the kernel to have</span></div><div class="line" id="205353"><span class="nick" style="color:#80b1d3"><a href="#205353" label="[20:53:53]">&lt;stikonas&gt;</a></span><span class="message">oh I agree with that</span></div><div class="line" id="205406"><span class="nick" style="color:#80b1d3"><a href="#205406" label="[20:54:06]">&lt;stikonas&gt;</a></span><span class="message">even in live-bootstrap we saw some differences</span></div><div class="line" id="205424"><span class="nick" style="color:#8dd3c7"><a href="#205424" label="[20:54:24]">&lt;xentrac&gt;</a></span><span class="message">but we don't have a way to verify that it has that behavior</span></div><div class="line" id="205458"><span class="nick" style="color:#80b1d3"><a href="#205458" label="[20:54:58]">&lt;stikonas&gt;</a></span><span class="message">well, only using diverse independent kernels for now</span></div><div class="line" id="205506"><span class="nick" style="color:#80b1d3"><a href="#205506" label="[20:55:06]">&lt;stikonas&gt;</a></span><span class="message">most would result in the same checksum</span></div><div class="line" id="205510"><span class="nick" style="color:#80b1d3"><a href="#205510" label="[20:55:10]">&lt;stikonas&gt;</a></span><span class="message">some would not</span></div><div class="line" id="205520"><span class="nick" style="color:#80b1d3"><a href="#205520" label="[20:55:20]">&lt;stikonas&gt;</a></span><span class="message">either due to some misconfiguration</span></div><div class="line" id="205526"><span class="nick" style="color:#80b1d3"><a href="#205526" label="[20:55:26]">&lt;stikonas&gt;</a></span><span class="message">or due to malicious behaviour</span></div><div class="line" id="205601"><span class="nick" style="color:#8dd3c7"><a href="#205601" label="[20:56:01]">&lt;xentrac&gt;</a></span><span class="message">what kinds of misconfiguration have we seen?</span></div><div class="line" id="205654"><span class="nick" style="color:#80b1d3"><a href="#205654" label="[20:56:54]">&lt;stikonas&gt;</a></span><span class="message">hmm, I think some differences in pipesize</span></div><div class="line" id="205735"><span class="nick" style="color:#80b1d3"><a href="#205735" label="[20:57:35]">&lt;stikonas&gt;</a></span><span class="message">bash build system tries to determine pipesize using some small program that tries to fill the pipe</span></div><div class="line" id="205807"><span class="nick" style="color:#80b1d3"><a href="#205807" label="[20:58:07]">&lt;stikonas&gt;</a></span><span class="message">so in live-bootstrpap we replaced that program with static #define PIPESIZE 65536</span></div><div class="line" id="205817"><span class="nick" style="color:#80b1d3"><a href="#205817" label="[20:58:17]">&lt;stikonas&gt;</a></span><span class="message">rather than dynamically determining it</span></div><div class="line" id="210249"><span class="nick" style="color:#8dd3c7"><a href="#210249" label="[21:02:49]">&lt;xentrac&gt;</a></span><span class="message">this is probably a stupid question I should grep the source for, but what's PIPESIZE?  I guess not PIPE_BUF, which is normally 8192?</span></div><div class="line" id="211630"><span class="nick" style="color:#80b1d3"><a href="#211630" label="[21:16:30]">&lt;stikonas&gt;</a></span><span class="message">hmm, not too sure, I thought it's how much buffer is allocated to pipes</span></div><div class="line" id="211637"><span class="nick" style="color:#80b1d3"><a href="#211637" label="[21:16:37]">&lt;stikonas&gt;</a></span><span class="message">but is that normally 8192?</span></div><div class="line" id="211802"><span class="nick" style="color:#80b1d3"><a href="#211802" label="[21:18:02]">&lt;stikonas&gt;</a></span><span class="message">xentrac: it is 65536 since linux 2.6.11</span></div><div class="line" id="211812"><span class="nick" style="color:#80b1d3"><a href="#211812" label="[21:18:12]">&lt;stikonas&gt;</a></span><span class="message">(see man 7 pipe)</span></div><div class="line" id="213532"><span class="nick" style="color:#234e69"><a href="#213532" label="[21:35:32]">&lt;clemens3&gt;</a></span><span class="message">yes, and again, starting with an old kernel, and then stripping down..</span></div><div class="line" id="213646"><span class="nick" style="color:#234e69"><a href="#213646" label="[21:36:46]">&lt;clemens3&gt;</a></span><span class="message">should ask linus for some 0.93 versions or back to minux, once owned the real paper book..</span></div><div class="line" id="213657"><span class="nick" style="color:#234e69"><a href="#213657" label="[21:36:57]">&lt;clemens3&gt;</a></span><span class="message">minux</span></div><div class="line" id="213702"><span class="nick" style="color:#234e69"><a href="#213702" label="[21:37:02]">&lt;clemens3&gt;</a></span><span class="message">minix?</span></div><div class="line" id="215204"><span class="nick" style="color:#8dd3c7"><a href="#215204" label="[21:52:04]">&lt;xentrac&gt;</a></span><span class="message">why does the size of the buffer matter for the results of the build though?</span></div><div class="line" id="220727"><span class="nick" style="color:#6c3d55"><a href="#220727" label="[22:07:27]">&lt;NieDzejkob&gt;</a></span><span class="message">well bash embeds it as a constant in the binary, no?</span></div><div class="line" id="221650"><span class="nick" style="color:#8dd3c7"><a href="#221650" label="[22:16:50]">&lt;xentrac&gt;</a></span><span class="message">oh, that makes sense :)</span></div><div class="line" id="230605"><span class="nick" style="color:#80b1d3"><a href="#230605" label="[23:06:05]">&lt;stikonas&gt;</a></span><span class="message">well, it doesn't matter for bootstrappable purposes but matters for reproducibility</span></div><div class="line" id="231123"><span class="nick" style="color:#8dd3c7"><a href="#231123" label="[23:11:23]">&lt;xentrac&gt;</a></span><span class="message">reproducibility is important for bootstrappability I think</span></div><div class="line" id="231134"><span class="nick" style="color:#8dd3c7"><a href="#231134" label="[23:11:34]">&lt;xentrac&gt;</a></span><span class="message">they're not inseparable but it sure helps a lot</span></div><div class="line" id="231554"><span class="nick" style="color:#80b1d3"><a href="#231554" label="[23:15:54]">&lt;stikonas&gt;</a></span><span class="message">well, that's why live-bootstrap does both</span></div><div class="line" id="231615"><span class="nick" style="color:#80b1d3"><a href="#231615" label="[23:16:15]">&lt;stikonas&gt;</a></span><span class="message">at least to some extent</span></div><div class="line" id="231630"><span class="nick" style="color:#80b1d3"><a href="#231630" label="[23:16:30]">&lt;stikonas&gt;</a></span><span class="message">it does not checksum all the files at the moment but it does checksum binaries</span></div><div class="line" id="231651"><span class="nick" style="color:#80b1d3"><a href="#231651" label="[23:16:51]">&lt;stikonas&gt;</a></span><span class="message">text and data files are not done right now</span></div><div class="line" id="232120"><span class="nick" style="color:#8dd3c7"><a href="#232120" label="[23:21:20]">&lt;xentrac&gt;</a></span><span class="message">I've been thinking about what corners can be cut in a bootstrap-building kernel</span></div><div class="line" id="232337"><span class="nick" style="color:#8dd3c7"><a href="#232337" label="[23:23:37]">&lt;xentrac&gt;</a></span><span class="message">like, obviously we don't need epoll, 3c503 support, and NFS, right?</span></div><div class="line" id="232432"><span class="nick" style="color:#8dd3c7"><a href="#232432" label="[23:24:32]">&lt;xentrac&gt;</a></span><span class="message">I suspect that (as NieDzejkob's experience suggests) memory protection and some kind of interrupt support would probably save more work than they cost</span></div><div class="line" id="232440"><span class="nick" style="color:#8dd3c7"><a href="#232440" label="[23:24:40]">&lt;xentrac&gt;</a></span><span class="message">and some other similar debugging features</span></div><div class="line" id="232553"><span class="nick" style="color:#8dd3c7"><a href="#232553" label="[23:25:53]">&lt;xentrac&gt;</a></span><span class="message">but for example it might be adequate to keep the whole filesystem in RAM, at which point filesystem multithreading stops being very important</span></div><div class="line" id="232640"><span class="nick" style="color:#80b1d3"><a href="#232640" label="[23:26:40]">&lt;stikonas&gt;</a></span><span class="message">xentrac: yeah, the whole filesystem in RAM should be fine</span></div><div class="line" id="232658"><span class="nick" style="color:#8dd3c7"><a href="#232658" label="[23:26:58]">&lt;xentrac&gt;</a></span><span class="message">(and it might not even be necessary to do real multitasking)</span></div><div class="line" id="232659"><span class="nick" style="color:#8dd3c7"><a href="#232659" label="[23:26:59]">&lt;xentrac&gt;</a></span><span class="message">on RISC-V a simple kernel should be a quite reasonable hobby project; if not an afternoon or weekend project, surely no more than a month</span></div><div class="line" id="232711"><span class="nick" style="color:#80b1d3"><a href="#232711" label="[23:27:11]">&lt;stikonas&gt;</a></span><span class="message">live-bootstrap goes all the way till GCC inside RAM</span></div><div class="line" id="232727"><span class="nick" style="color:#80b1d3"><a href="#232727" label="[23:27:27]">&lt;stikonas&gt;</a></span><span class="message">and at the moment build directories are not even deleted, so there are potential RAM savings for future</span></div><br /></div></body></html>