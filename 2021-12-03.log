<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-12-03.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="001003"><span class="nick" style="color:#8dd3c7"><a href="#001003" label="[00:10:03]">&lt;oriansj&gt;</a></span><span class="message">which riscv32 doesn't actually have nor wait4</span></div><div class="line" id="001603"><span class="nick" style="color:#2e2a4a"><a href="#001603" label="[00:16:03]">&lt;stikonas&gt;</a></span><span class="message">well, yes, so it has to be implemented using waitid</span></div><div class="line" id="002233"><span class="nick" style="color:#2e2a4a"><a href="#002233" label="[00:22:33]">&lt;stikonas&gt;</a></span><span class="message">and it's (minimal) implementation in kaem-minimal might also be wrong</span></div><div class="line" id="002244"><span class="nick" style="color:#2e2a4a"><a href="#002244" label="[00:22:44]">&lt;stikonas&gt;</a></span><span class="message">somehow now riscv32 bootstrap fails for me with</span></div><div class="line" id="002248"><span class="nick" style="color:#2e2a4a"><a href="#002248" label="[00:22:48]">&lt;stikonas&gt;</a></span><span class="message">./riscv32/bin/M1 --architecture riscv32 --little-endian -f ./M2libc/riscv32/riscv32_defs.M1 -f ./M2libc/riscv32/libc-full.M1 -f ./riscv32/artifact/hex2_linker-1.M1 -f ./riscv32/artifact/hex2_linker-1-footer.M1 -o ./riscv32/artifact/hex2_linker-1.hex2</span></div><div class="line" id="002259"><span class="nick" style="color:#2e2a4a"><a href="#002259" label="[00:22:59]">&lt;stikonas&gt;</a></span><span class="message">but if I run it manually, process successfully completes and exits with 0</span></div><div class="line" id="002722"><span class="nick" style="color:#2e2a4a"><a href="#002722" label="[00:27:22]">&lt;stikonas&gt;</a></span><span class="message">oh, something is actually wrong with ./bin/M1...</span></div><div class="line" id="002734"><span class="nick" style="color:#2e2a4a"><a href="#002734" label="[00:27:34]">&lt;stikonas&gt;</a></span><span class="message">so probably M2libc problem</span></div><div class="line" id="005742"><span class="nick" style="color:#8dd3c7"><a href="#005742" label="[00:57:42]">&lt;oriansj&gt;</a></span><span class="message">no I think it might be a waitid problem in the kaem-optional-seed</span></div><div class="line" id="005821"><span class="nick" style="color:#8dd3c7"><a href="#005821" label="[00:58:21]">&lt;oriansj&gt;</a></span><span class="message">because if manual running works fine, it isn't the binaries but the bit running the binaries</span></div><div class="line" id="010714"><span class="nick" style="color:#2e2a4a"><a href="#010714" label="[01:07:14]">&lt;stikonas&gt;</a></span><span class="message">well, manual exits fine with exit code 0 but does not output any file</span></div><div class="line" id="010720"><span class="nick" style="color:#2e2a4a"><a href="#010720" label="[01:07:20]">&lt;stikonas&gt;</a></span><span class="message">and without -o its output is empty</span></div><div class="line" id="010724"><span class="nick" style="color:#2e2a4a"><a href="#010724" label="[01:07:24]">&lt;stikonas&gt;</a></span><span class="message">so perhaps two problems</span></div><div class="line" id="010851"><span class="nick" style="color:#2e2a4a"><a href="#010851" label="[01:08:51]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/stikonas/M2libc/commit/08be85b83bc7f261b0ddd7b8a2fea54641d746be">https://github.com/stikonas/M2libc/commit/08be85b83bc7f261b0ddd7b8a2fea54641d746be</a> </span></div><div class="line" id="010858"><span class="nick" style="color:#2e2a4a"><a href="#010858" label="[01:08:58]">&lt;stikonas&gt;</a></span><span class="message">(this is what I'm testing)</span></div><div class="line" id="010959"><span class="nick" style="color:#2e2a4a"><a href="#010959" label="[01:09:59]">&lt;stikonas&gt;</a></span><span class="message">this should fail once full kaem is build (due to missing waitpid) but fails earlier</span></div><div class="line" id="011257"><span class="nick" style="color:#2e2a4a"><a href="#011257" label="[01:12:57]">&lt;stikonas&gt;</a></span><span class="message">oh, it's actually riscv32/bin/M1 is empty</span></div><div class="line" id="011300"><span class="nick" style="color:#2e2a4a"><a href="#011300" label="[01:13:00]">&lt;stikonas&gt;</a></span><span class="message">so the error is earlier</span></div><div class="line" id="011326"><span class="nick" style="color:#2e2a4a"><a href="#011326" label="[01:13:26]">&lt;stikonas&gt;</a></span><span class="message">but at least it makes more sense...</span></div><div class="line" id="011341"><span class="nick" style="color:#2e2a4a"><a href="#011341" label="[01:13:41]">&lt;stikonas&gt;</a></span><span class="message">empty file is just executed in bash</span></div><div class="line" id="011610"><span class="nick" style="color:#2e2a4a"><a href="#011610" label="[01:16:10]">&lt;stikonas&gt;</a></span><span class="message">ok, that's  because lseek is not there on riscv32...</span></div><div class="line" id="011708"><span class="nick" style="color:#2e2a4a"><a href="#011708" label="[01:17:08]">&lt;stikonas&gt;</a></span><span class="message">how come we didn't see any breakage in hex2_riscv32.hex1</span></div><div class="line" id="011712"><span class="nick" style="color:#2e2a4a"><a href="#011712" label="[01:17:12]">&lt;stikonas&gt;</a></span><span class="message">that one uses lseek</span></div><div class="line" id="011954"><span class="nick" style="color:#8dd3c7"><a href="#011954" label="[01:19:54]">&lt;oriansj&gt;</a></span><span class="message">but it doesn't use M2libc either</span></div><div class="line" id="013308"><span class="nick" style="color:#2e2a4a"><a href="#013308" label="[01:33:08]">&lt;stikonas&gt;</a></span><span class="message">oriansj: no, it probably works by accident...</span></div><div class="line" id="013311"><span class="nick" style="color:#2e2a4a"><a href="#013311" label="[01:33:11]">&lt;stikonas&gt;</a></span><span class="message">I'm still investigating</span></div><div class="line" id="013317"><span class="nick" style="color:#2e2a4a"><a href="#013317" label="[01:33:17]">&lt;stikonas&gt;</a></span><span class="message">but it looks like I have to use llseek</span></div><div class="line" id="013357"><span class="nick" style="color:#2e2a4a"><a href="#013357" label="[01:33:57]">&lt;stikonas&gt;</a></span><span class="message">and maybe lseek(0) just happened to work with wrong call</span></div><div class="line" id="015057"><span class="nick" style="color:#8dd3c7"><a href="#015057" label="[01:50:57]">&lt;oriansj&gt;</a></span><span class="message">quite possibly</span></div><div class="line" id="015217"><span class="nick" style="color:#8dd3c7"><a href="#015217" label="[01:52:17]">&lt;oriansj&gt;</a></span><span class="message">I probably should get a proper RISC-V 32bit syscall table</span></div><div class="line" id="015616"><span class="nick" style="color:#2e2a4a"><a href="#015616" label="[01:56:16]">&lt;stikonas&gt;</a></span><span class="message">yes, llseek helped...</span></div><div class="line" id="015623"><span class="nick" style="color:#2e2a4a"><a href="#015623" label="[01:56:23]">&lt;stikonas&gt;</a></span><span class="message">I've now managed to build up to kaem</span></div><div class="line" id="015635"><span class="nick" style="color:#2e2a4a"><a href="#015635" label="[01:56:35]">&lt;stikonas&gt;</a></span><span class="message">which fails due to missing waitpid implementation...</span></div><div class="line" id="015643"><span class="nick" style="color:#2e2a4a"><a href="#015643" label="[01:56:43]">&lt;stikonas&gt;</a></span><span class="message">but hex1 and hex2 work only by accident...</span></div><div class="line" id="015726"><span class="nick" style="color:#2e2a4a"><a href="#015726" label="[01:57:26]">&lt;stikonas&gt;</a></span><span class="message">we are setting whence to 0 which sets required register for offset to be 0</span></div><div class="line" id="015735"><span class="nick" style="color:#2e2a4a"><a href="#015735" label="[01:57:35]">&lt;stikonas&gt;</a></span><span class="message">so lseek(0) worked...</span></div><div class="line" id="015834"><span class="nick" style="color:#8dd3c7"><a href="#015834" label="[01:58:34]">&lt;oriansj&gt;</a></span><span class="message">so a functional hack; guess we need to add some comments to explain what actually is happening</span></div><div class="line" id="015939"><span class="nick" style="color:#2e2a4a"><a href="#015939" label="[01:59:39]">&lt;stikonas&gt;</a></span><span class="message">fixed wip commit <a rel="nofollow" href="https://github.com/stikonas/M2libc/commit/c51b5b1e07480482f4c8a7a208709c7db56fb858">https://github.com/stikonas/M2libc/commit/c51b5b1e07480482f4c8a7a208709c7db56fb858</a> </span></div><div class="line" id="020036"><span class="nick" style="color:#2e2a4a"><a href="#020036" label="[02:00:36]">&lt;stikonas&gt;</a></span><span class="message">oriansj: or maybe set the registers to what we need and reencode</span></div><div class="line" id="020045"><span class="nick" style="color:#2e2a4a"><a href="#020045" label="[02:00:45]">&lt;stikonas&gt;</a></span><span class="message">I'm not sure if on baremetal we'll have them at 0</span></div><div class="line" id="020125"><span class="nick" style="color:#2e2a4a"><a href="#020125" label="[02:01:25]">&lt;stikonas&gt;</a></span><span class="message">s/baremetal/real hw</span></div><div class="line" id="020129"><span class="nick" style="color:#2e2a4a"><a href="#020129" label="[02:01:29]">&lt;stikonas&gt;</a></span><span class="message">anyway, bed time</span></div><div class="line" id="021134"><span class="nick" style="color:#8dd3c7"><a href="#021134" label="[02:11:34]">&lt;oriansj&gt;</a></span><span class="message">you are right, risc-v does not zero the registers on exec</span></div><div class="line" id="022741"><span class="nick" style="color:#6b8072"><a href="#022741" label="[02:27:41]">&lt;muurkha&gt;</a></span><span class="message">what does it put in them?</span></div><div class="line" id="022831"><span class="nick" style="color:#6b8072"><a href="#022831" label="[02:28:31]">&lt;muurkha&gt;</a></span><span class="message">hopefully not just whatever the previous program left there, that's a potentially major security hole</span></div><div class="line" id="023205"><span class="nick" style="color:#80b1d3"><a href="#023205" label="[02:32:05]">&lt;stikonas[m]&gt;</a></span><span class="message">Prob whatever kernel left</span></div><div class="line" id="023216"><span class="nick" style="color:#80b1d3"><a href="#023216" label="[02:32:16]">&lt;stikonas[m]&gt;</a></span><span class="message">Not previous program</span></div><div class="line" id="023320"><span class="nick" style="color:#8dd3c7"><a href="#023320" label="[02:33:20]">&lt;oriansj&gt;</a></span><span class="message">muurkha: kernel space register values</span></div><div class="line" id="023339"><span class="nick" style="color:#8dd3c7"><a href="#023339" label="[02:33:39]">&lt;oriansj&gt;</a></span><span class="message">which is actually a major security hole</span></div><div class="line" id="023353"><span class="nick" style="color:#8dd3c7"><a href="#023353" label="[02:33:53]">&lt;oriansj&gt;</a></span><span class="message">but one that has already been reported by us</span></div><div class="line" id="023418"><span class="nick" style="color:#8dd3c7"><a href="#023418" label="[02:34:18]">&lt;oriansj&gt;</a></span><span class="message">if they don't address it, we will probably have to get a CVE for it</span></div><div class="line" id="023428"><span class="nick" style="color:#80b1d3"><a href="#023428" label="[02:34:28]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, maybe most of them are unimportant temp stuff while preparing for process launch</span></div><div class="line" id="023540"><span class="nick" style="color:#6b8072"><a href="#023540" label="[02:35:40]">&lt;muurkha&gt;</a></span><span class="message">a problem is that changing that unimportant temp stuff will break userland programs</span></div><div class="line" id="023606"><span class="nick" style="color:#6b8072"><a href="#023606" label="[02:36:06]">&lt;muurkha&gt;</a></span><span class="message">well. can.</span></div><div class="line" id="023632"><span class="nick" style="color:#6b8072"><a href="#023632" label="[02:36:32]">&lt;muurkha&gt;</a></span><span class="message">and the compiler might do that without asking you when you recompile the kernel</span></div><div class="line" id="023703"><span class="nick" style="color:#6b8072"><a href="#023703" label="[02:37:03]">&lt;muurkha&gt;</a></span><span class="message">so even if it's unimportant now, it may not be unimportant next week</span></div><div class="line" id="023731"><span class="nick" style="color:#80b1d3"><a href="#023731" label="[02:37:31]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, compiler should initialize variables...</span></div><div class="line" id="023753"><span class="nick" style="color:#6b8072"><a href="#023753" label="[02:37:53]">&lt;muurkha&gt;</a></span><span class="message">probably</span></div><div class="line" id="023811"><span class="nick" style="color:#6b8072"><a href="#023811" label="[02:38:11]">&lt;muurkha&gt;</a></span><span class="message">but ld.so might not be written with a compiler</span></div><div class="line" id="023817"><span class="nick" style="color:#6b8072"><a href="#023817" label="[02:38:17]">&lt;muurkha&gt;</a></span><span class="message">similarly crt0</span></div><div class="line" id="033023"><span class="nick" style="color:#8dd3c7"><a href="#033023" label="[03:30:23]">&lt;oriansj&gt;</a></span><span class="message">muurkha: what breakage could occur for a well written program in a high level language?</span></div><div class="line" id="033105"><span class="nick" style="color:#8dd3c7"><a href="#033105" label="[03:31:05]">&lt;oriansj&gt;</a></span><span class="message">assembly programs that uses it for random data source might break (they shouldn't be using that as a source anyway)</span></div><div class="line" id="033113"><span class="nick" style="color:#6b8072"><a href="#033113" label="[03:31:13]">&lt;muurkha&gt;</a></span><span class="message">I don't think it matters how well the program is written; it matters how the program's startup code is written</span></div><div class="line" id="033128"><span class="nick" style="color:#8dd3c7"><a href="#033128" label="[03:31:28]">&lt;oriansj&gt;</a></span><span class="message">or they are already zeroing the register or setting it to a known value before use.</span></div><div class="line" id="033148"><span class="nick" style="color:#6b8072"><a href="#033148" label="[03:31:48]">&lt;muurkha&gt;</a></span><span class="message">I was thinking that if one of those random registers happens to be set to 0 at present, the startup assembly code might assume that will always be the case</span></div><div class="line" id="033209"><span class="nick" style="color:#6b8072"><a href="#033209" label="[03:32:09]">&lt;muurkha&gt;</a></span><span class="message">or that its value would always be, for example, positive, or have the high 24 bits set to 0</span></div><div class="line" id="033241"><span class="nick" style="color:#6b8072"><a href="#033241" label="[03:32:41]">&lt;muurkha&gt;</a></span><span class="message">and if they aren't clearing the registers they probably aren't clearing the flags either, so DF might happen to be set</span></div><div class="line" id="033300"><span class="nick" style="color:#6b8072"><a href="#033300" label="[03:33:00]">&lt;muurkha&gt;</a></span><span class="message">which would affect the behavior of lods, stos, cmps, movs</span></div><div class="line" id="033331"><span class="nick" style="color:#8dd3c7"><a href="#033331" label="[03:33:31]">&lt;oriansj&gt;</a></span><span class="message">yes, however zeroing of those registers is what all other ports do already</span></div><div class="line" id="033436"><span class="nick" style="color:#6b8072"><a href="#033436" label="[03:34:36]">&lt;muurkha&gt;</a></span><span class="message">all other ports of the crt0 and ld.so in glibc, dietlibc, tinycc, and musl?</span></div><div class="line" id="033603"><span class="nick" style="color:#6b8072"><a href="#033603" label="[03:36:03]">&lt;muurkha&gt;</a></span><span class="message">anyway if your high-level-language implementation's startup code accidentally depends on DF or one of those register values, recompiling the kernel might break it.  but maybe not for a few years</span></div><div class="line" id="033743"><span class="nick" style="color:#8dd3c7"><a href="#033743" label="[03:37:43]">&lt;oriansj&gt;</a></span><span class="message">muurkha: depending on random register values is just stupid</span></div><div class="line" id="033753"><span class="nick" style="color:#6b8072"><a href="#033753" label="[03:37:53]">&lt;muurkha&gt;</a></span><span class="message">presumably you wouldn't do it on purpose!</span></div><div class="line" id="033818"><span class="nick" style="color:#8dd3c7"><a href="#033818" label="[03:38:18]">&lt;oriansj&gt;</a></span><span class="message">set to zero isn't random and something reasonable to depend upon</span></div><div class="line" id="033823"><span class="nick" style="color:#6b8072"><a href="#033823" label="[03:38:23]">&lt;muurkha&gt;</a></span><span class="message">agreed</span></div><div class="line" id="033849"><span class="nick" style="color:#8dd3c7"><a href="#033849" label="[03:38:49]">&lt;oriansj&gt;</a></span><span class="message">so random (not true random as it is leaked kernel state)</span></div><div class="line" id="033858"><span class="nick" style="color:#6b8072"><a href="#033858" label="[03:38:58]">&lt;muurkha&gt;</a></span><span class="message">right</span></div><div class="line" id="033859"><span class="nick" style="color:#6b8072"><a href="#033859" label="[03:38:59]">&lt;muurkha&gt;</a></span><span class="message">I'm saying you'd include an assumption like the ones I mentioned above in your startup code by accident, and then only find out when you upgraded the kernel and none of your programs worked</span></div><div class="line" id="033928"><span class="nick" style="color:#6b8072"><a href="#033928" label="[03:39:28]">&lt;muurkha&gt;</a></span><span class="message">the ones compiled with Free Pascal or statically linked with musl or whatever</span></div><div class="line" id="033939"><span class="nick" style="color:#8dd3c7"><a href="#033939" label="[03:39:39]">&lt;oriansj&gt;</a></span><span class="message">isn't something anyone should depend upon; we only discovered this issue because the zero we were expecting turned out to be non-zero</span></div><div class="line" id="033955"><span class="nick" style="color:#6b8072"><a href="#033955" label="[03:39:55]">&lt;muurkha&gt;</a></span><span class="message">oh, maybe you meant all other ports of Linux, not all other ports of crt0 and ld.so.  that makes more sense</span></div><div class="line" id="034035"><span class="nick" style="color:#8dd3c7"><a href="#034035" label="[03:40:35]">&lt;oriansj&gt;</a></span><span class="message">muurkha: well we were talking about what the kernel does on exec</span></div><div class="line" id="034038"><span class="nick" style="color:#6b8072"><a href="#034038" label="[03:40:38]">&lt;muurkha&gt;</a></span><span class="message">right</span></div><div class="line" id="034054"><span class="nick" style="color:#6b8072"><a href="#034054" label="[03:40:54]">&lt;muurkha&gt;</a></span><span class="message">I agree, and as we've found in the past, Linux has been willing to break such dubious programs in the past, even if technically that &quot;breaks userland&quot;</span></div><div class="line" id="034104"><span class="nick" style="color:#8dd3c7"><a href="#034104" label="[03:41:04]">&lt;oriansj&gt;</a></span><span class="message">so what one's libc isn't our problem as we don't use that until after stage0-posix</span></div><div class="line" id="034134"><span class="nick" style="color:#6b8072"><a href="#034134" label="[03:41:34]">&lt;muurkha&gt;</a></span><span class="message">no, I'm saying it's potentially Linux's problem</span></div><div class="line" id="034150"><span class="nick" style="color:#8dd3c7"><a href="#034150" label="[03:41:50]">&lt;oriansj&gt;</a></span><span class="message">muurkha: yes we know and reported it to them as such</span></div><div class="line" id="034159"><span class="nick" style="color:#6b8072"><a href="#034159" label="[03:41:59]">&lt;muurkha&gt;</a></span><span class="message">like, what are the considerations the kernel developers might think about in deciding whether or not to apply your kernel patch?</span></div><div class="line" id="034209"><span class="nick" style="color:#8dd3c7"><a href="#034209" label="[03:42:09]">&lt;oriansj&gt;</a></span><span class="message">as it is leaking kernel state to processes</span></div><div class="line" id="034252"><span class="nick" style="color:#8dd3c7"><a href="#034252" label="[03:42:52]">&lt;oriansj&gt;</a></span><span class="message">well it will slow down the creation of new processes (the time it takes to zero the registers) and that would be it</span></div><div class="line" id="034314"><span class="nick" style="color:#6b8072"><a href="#034314" label="[03:43:14]">&lt;muurkha&gt;</a></span><span class="message">right, and it changes the interface in a non-backward-compatible way</span></div><div class="line" id="034328"><span class="nick" style="color:#6b8072"><a href="#034328" label="[03:43:28]">&lt;muurkha&gt;</a></span><span class="message">but it's a non-backward-compatible way that it's very unlikely anyone is depending on</span></div><div class="line" id="034359"><span class="nick" style="color:#6b8072"><a href="#034359" label="[03:43:59]">&lt;muurkha&gt;</a></span><span class="message">and not fixing the problem will probably make similar non-backward-compatible changes happen from time to time when compilers upgrade, or when compiler options change</span></div><div class="line" id="034628"><span class="nick" style="color:#8dd3c7"><a href="#034628" label="[03:46:28]">&lt;oriansj&gt;</a></span><span class="message">no libc or any runtime library honestly would start with hey lets trust random crap to be zero and they will just zero the registers again for all sane architectures as well as risc-v</span></div><div class="line" id="035303"><span class="nick" style="color:#6b8072"><a href="#035303" label="[03:53:03]">&lt;muurkha&gt;</a></span><span class="message">sure, that's what they *should* do</span></div><div class="line" id="035313"><span class="nick" style="color:#6b8072"><a href="#035313" label="[03:53:13]">&lt;muurkha&gt;</a></span><span class="message">but if they don't do it, you might not notice for a while</span></div><div class="line" id="125024"><span class="nick" style="color:#8dd3c7"><a href="#125024" label="[12:50:24]">&lt;oriansj&gt;</a></span><span class="message">muurkha: ummm if random garbage is what you are getting and you are a libc writer, you'll have bugs that randomly appear if you don't properly set registers before use. So I can't imagine any case where depending on random values (which change from exec to exec) even makes sense for any libc or runtime</span></div><div class="line" id="151521"><span class="nick" style="color:#6d2462"><a href="#151521" label="[15:15:21]">&lt;gbrlwck&gt;</a></span><span class="message">muurkha: WDYM with &quot;DF&quot;?</span></div><div class="line" id="151700"><span class="nick" style="color:#6d2462"><a href="#151700" label="[15:17:00]">&lt;gbrlwck&gt;</a></span><span class="message">oriansj: +1 for the FOSDEM proposal!  having heard your 2' rap i figure you're more than ready to say the same but maybe a little more verbose and maybe a tiny bit slower ;)</span></div><div class="line" id="152133"><span class="nick" style="color:#6d2462"><a href="#152133" label="[15:21:33]">&lt;gbrlwck&gt;</a></span><span class="message">oriansj: did we report the non-zeroing registers issue on lkml?  do you have a link handy (or a date or something i can maybe find the report)?</span></div><div class="line" id="155530"><span class="nick" style="color:#2e2a4a"><a href="#155530" label="[15:55:30]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: I asked a bit about it on IRC</span></div><div class="line" id="155550"><span class="nick" style="color:#2e2a4a"><a href="#155550" label="[15:55:50]">&lt;stikonas&gt;</a></span><span class="message">but I was told that there shouldn't be any information leak form old program</span></div><div class="line" id="155602"><span class="nick" style="color:#2e2a4a"><a href="#155602" label="[15:56:02]">&lt;stikonas&gt;</a></span><span class="message">at some point there was but it was fixed</span></div><div class="line" id="155707"><span class="nick" style="color:#2e2a4a"><a href="#155707" label="[15:57:07]">&lt;stikonas&gt;</a></span><span class="message">in any case, we should zero any registers ourselves too and not rely on them being zeroed</span></div><div class="line" id="162743"><span class="nick" style="color:#6d2462"><a href="#162743" label="[16:27:43]">&lt;gbrlwck&gt;</a></span><span class="message">stikonas: yes, that's also what i took from that issue :)  if there was like an official report i'd have that included in my thesis....</span></div><div class="line" id="162845"><span class="nick" style="color:#6d2462"><a href="#162845" label="[16:28:45]">&lt;gbrlwck&gt;</a></span><span class="message">janneke: what does arch:test-r do in MEScc?  does it test for equality?  but on twice the same register (which would always be true)?</span></div><div class="line" id="163659"><span class="nick" style="color:#234e69"><a href="#163659" label="[16:36:59]">&lt;janneke&gt;</a></span><span class="message">gbrlwck: ah, i guess here mescc shows its x86 roots</span></div><div class="line" id="163726"><span class="nick" style="color:#234e69"><a href="#163726" label="[16:37:26]">&lt;janneke&gt;</a></span><span class="message">test %eax,%eax === cmp %eax,0</span></div><div class="line" id="163834"><span class="nick" style="color:#234e69"><a href="#163834" label="[16:38:34]">&lt;janneke&gt;</a></span><span class="message">(iow, it's only true if register r is zero)</span></div><div class="line" id="163940"><span class="nick" style="color:#6d2462"><a href="#163940" label="[16:39:40]">&lt;gbrlwck&gt;</a></span><span class="message">so MEScc only uses it to test a value for 0?</span></div><div class="line" id="164220"><span class="nick" style="color:#234e69"><a href="#164220" label="[16:42:20]">&lt;janneke&gt;</a></span><span class="message">gbrlwck: yes, and then possibly jump accordingly</span></div><div class="line" id="164414"><span class="nick" style="color:#2e2a4a"><a href="#164414" label="[16:44:14]">&lt;stikonas&gt;</a></span><span class="message">something similar to beqz in risc-v</span></div><div class="line" id="164517"><span class="nick" style="color:#6d2462"><a href="#164517" label="[16:45:17]">&lt;gbrlwck&gt;</a></span><span class="message">stikonas: true, but test-r also happens in not, gt, ne, etc (where the jump does not immediately follow the comparison)</span></div><div class="line" id="164551"><span class="nick" style="color:#2e2a4a"><a href="#164551" label="[16:45:51]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: there is also set if equal instructions in risc-v</span></div><div class="line" id="164629"><span class="nick" style="color:#2e2a4a"><a href="#164629" label="[16:46:29]">&lt;stikonas&gt;</a></span><span class="message">slt/sltu/sltiu</span></div><div class="line" id="164646"><span class="nick" style="color:#2e2a4a"><a href="#164646" label="[16:46:46]">&lt;stikonas&gt;</a></span><span class="message">M2-Planet also uses them to implement &quot;&lt;&quot;</span></div><div class="line" id="164732"><span class="nick" style="color:#6d2462"><a href="#164732" label="[16:47:32]">&lt;gbrlwck&gt;</a></span><span class="message">i see!</span></div><div class="line" id="165318"><span class="nick" style="color:#234e69"><a href="#165318" label="[16:53:18]">&lt;janneke&gt;</a></span><span class="message">gbrlwck: it could be that a cleaup is in order; i.e. rename arch:test-r to arch:cpm-r-0, and just implement that using test on x86</span></div><div class="line" id="165332"><span class="nick" style="color:#234e69"><a href="#165332" label="[16:53:32]">&lt;janneke&gt;</a></span><span class="message">*cmp-r-0</span></div><div class="line" id="170852"><span class="nick" style="color:#6b8072"><a href="#170852" label="[17:08:52]">&lt;muurkha&gt;</a></span><span class="message">gbrlwck: uh, an i386 thing, totally inapplicable on RISC-V</span></div><div class="line" id="170908"><span class="nick" style="color:#6d2462"><a href="#170908" label="[17:09:08]">&lt;gbrlwck&gt;</a></span><span class="message">that might make sense!  though that dash (&quot;-&quot;) notation is ambiguous, it's also used to mean subtract...</span></div><div class="line" id="170918"><span class="nick" style="color:#6b8072"><a href="#170918" label="[17:09:18]">&lt;muurkha&gt;</a></span><span class="message">actually the high-24-bits thing is also I think totally irrelevant on RISC-V</span></div><div class="line" id="171114"><span class="nick" style="color:#6d2462"><a href="#171114" label="[17:11:14]">&lt;gbrlwck&gt;</a></span><span class="message">and i've been stumbling on a couple of other things that might need some cleanup.. e.g. the function-locals allocating (* 4 1025) bytes while the comment says it's space for 4*1024 variables, some code duplication, .. i guess i'll make some PR as soon as my changes work :)</span></div><div class="line" id="171120"><span class="nick" style="color:#234e69"><a href="#171120" label="[17:11:20]">&lt;janneke&gt;</a></span><span class="message">right, like r-cmp-value =&gt; r-cmp-0 would be better</span></div><div class="line" id="172923"><span class="nick" style="color:#6d2462"><a href="#172923" label="[17:29:23]">&lt;gbrlwck&gt;</a></span><span class="message">stikonas: not 100% sure this would actually work here... slt writes 1 to the destination register; so we'd have to either write into the register we want to test (which would overwrite the value we're testing) or we'd use another register which either is uniquely used for (only) that purpose or we'd have to return the register we used ...</span></div><div class="line" id="173120"><span class="nick" style="color:#2e2a4a"><a href="#173120" label="[17:31:20]">&lt;stikonas&gt;</a></span><span class="message">well, you can use some temp register like t1</span></div><div class="line" id="173128"><span class="nick" style="color:#2e2a4a"><a href="#173128" label="[17:31:28]">&lt;stikonas&gt;</a></span><span class="message">but I haven't looked at the code</span></div><div class="line" id="173131"><span class="nick" style="color:#2e2a4a"><a href="#173131" label="[17:31:31]">&lt;stikonas&gt;</a></span><span class="message">so not sure what's the best</span></div><div class="line" id="174223"><span class="nick" style="color:#6d2462"><a href="#174223" label="[17:42:23]">&lt;gbrlwck&gt;</a></span><span class="message">i'll have to think about it... mescc seems to heavily depend on that zero-flag; maybe it's best to dedicate one register (x31/t6) to be used for that purpose?</span></div><div class="line" id="174705"><span class="nick" style="color:#2e2a4a"><a href="#174705" label="[17:47:05]">&lt;stikonas&gt;</a></span><span class="message">maybe. riscv has a lot of registers and it's not easy to use them all in simple compilers as M2-Planet and mescc</span></div><div class="line" id="174724"><span class="nick" style="color:#2e2a4a"><a href="#174724" label="[17:47:24]">&lt;stikonas&gt;</a></span><span class="message">since they are designed with x86 in mind which has very few registers</span></div><div class="line" id="195717"><span class="nick">***</span><span class="message notice">pgreco_ is now known as pgreco</span></div><div class="line" id="215533"><span class="nick" style="color:#2e2a4a"><a href="#215533" label="[21:55:33]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I think I've got waitpid working in M2libc/riscv32. There are other issues that prevent full run from succeeding but I guess we can merge what we have...</span></div><div class="line" id="215555"><span class="nick" style="color:#2e2a4a"><a href="#215555" label="[21:55:55]">&lt;stikonas&gt;</a></span><span class="message">one of the issues might be in kaem-minimal as it fails to start full kaem</span></div><div class="line" id="215628"><span class="nick" style="color:#2e2a4a"><a href="#215628" label="[21:56:28]">&lt;stikonas&gt;</a></span><span class="message">and also env variables seem to be broken...</span></div><div class="line" id="215946"><span class="nick" style="color:#2e2a4a"><a href="#215946" label="[21:59:46]">&lt;stikonas&gt;</a></span><span class="message">oriansj: <a rel="nofollow" href="https://github.com/oriansj/M2libc/pull/10">https://github.com/oriansj/M2libc/pull/10</a> </span></div><div class="line" id="220009"><span class="nick" style="color:#2e2a4a"><a href="#220009" label="[22:00:09]">&lt;stikonas&gt;</a></span><span class="message">hopefully this is also good enough to enable riscv32 tests in M2-Planet</span></div><div class="line" id="220235"><span class="nick" style="color:#2e2a4a"><a href="#220235" label="[22:02:35]">&lt;stikonas&gt;</a></span><span class="message">(if I run kaem.riscv32 with full kaem it proceeds a bit further than with kaem-optional-seed, so there must be a problem in the seed)</span></div><div class="line" id="221438"><span class="nick" style="color:#8dd3c7"><a href="#221438" label="[22:14:38]">&lt;oriansj&gt;</a></span><span class="message">stikonas: your M2libc work has been merged</span></div><div class="line" id="221528"><span class="nick" style="color:#80b1d3"><a href="#221528" label="[22:15:28]">&lt;stikonas[m]&gt;</a></span><span class="message">thanks</span></div><div class="line" id="221840"><span class="nick" style="color:#8dd3c7"><a href="#221840" label="[22:18:40]">&lt;oriansj&gt;</a></span><span class="message">gbrlwck: DF in this context I believe means Dirty flag; the way the kernel knows what register values have been changed since last allocating CPU runtime to speed up the saving of register values when context switching between processes.</span></div><div class="line" id="223733"><span class="nick" style="color:#2e2a4a"><a href="#223733" label="[22:37:33]">&lt;stikonas&gt;</a></span><span class="message">ok, I've enabled riscv32 tests for M2-Planet now <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/pull/38">https://github.com/oriansj/M2-Planet/pull/38</a> </span></div><div class="line" id="223740"><span class="nick" style="color:#2e2a4a"><a href="#223740" label="[22:37:40]">&lt;stikonas&gt;</a></span><span class="message">all passing</span></div><div class="line" id="224140"><span class="nick" style="color:#2e2a4a"><a href="#224140" label="[22:41:40]">&lt;stikonas&gt;</a></span><span class="message">oh and I think I found env variable bug...</span></div><div class="line" id="224155"><span class="nick" style="color:#2e2a4a"><a href="#224155" label="[22:41:55]">&lt;stikonas&gt;</a></span><span class="message">that means another PR to M2libc...</span></div><div class="line" id="224441"><span class="nick" style="color:#2e2a4a"><a href="#224441" label="[22:44:41]">&lt;stikonas&gt;</a></span><span class="message">oh, and actually it fixed all other problems and everything runs to completion...</span></div><div class="line" id="224444"><span class="nick" style="color:#2e2a4a"><a href="#224444" label="[22:44:44]">&lt;stikonas&gt;</a></span><span class="message">at least on qemu</span></div><div class="line" id="224623"><span class="nick" style="color:#2e2a4a"><a href="#224623" label="[22:46:23]">&lt;stikonas&gt;</a></span><span class="message">which is here : <a rel="nofollow" href="https://github.com/oriansj/M2libc/pull/11">https://github.com/oriansj/M2libc/pull/11</a> </span></div><div class="line" id="224718"><span class="nick" style="color:#2e2a4a"><a href="#224718" label="[22:47:18]">&lt;stikonas&gt;</a></span><span class="message">hmm, ok it's not yet running to completion... kaem probably fails to detect non-zero error status</span></div><div class="line" id="231049"><span class="nick" style="color:#8dd3c7"><a href="#231049" label="[23:10:49]">&lt;oriansj&gt;</a></span><span class="message">and M2-Planet work merged</span></div><div class="line" id="231346"><span class="nick" style="color:#8dd3c7"><a href="#231346" label="[23:13:46]">&lt;oriansj&gt;</a></span><span class="message">greetings wnklmnn</span></div><div class="line" id="231426"><span class="nick" style="color:#2e2a4a"><a href="#231426" label="[23:14:26]">&lt;stikonas&gt;</a></span><span class="message">oriansj: thanks. Once you merge M2libc PR/11 I think I can get riscv32 run to completion myself (I have push access to mescc-tools-extra and stage0-posix)</span></div><div class="line" id="231451"><span class="nick" style="color:#2e2a4a"><a href="#231451" label="[23:14:51]">&lt;stikonas&gt;</a></span><span class="message">there will still be some small bugs but those can be fixed one everything runs</span></div><div class="line" id="232436"><span class="nick" style="color:#8dd3c7"><a href="#232436" label="[23:24:36]">&lt;oriansj&gt;</a></span><span class="message">stikonas: it has been merged</span></div><div class="line" id="232442"><span class="nick" style="color:#2e2a4a"><a href="#232442" label="[23:24:42]">&lt;stikonas&gt;</a></span><span class="message">thanks</span></div><div class="line" id="232500"><span class="nick" style="color:#2e2a4a"><a href="#232500" label="[23:25:00]">&lt;stikonas&gt;</a></span><span class="message">so I'll try to get make test-riscv32 working and will sort kaem issues later</span></div><div class="line" id="232517"><span class="nick" style="color:#2e2a4a"><a href="#232517" label="[23:25:17]">&lt;stikonas&gt;</a></span><span class="message">in any case I think we are getting quite close</span></div><div class="line" id="235746"><span class="nick" style="color:#2e2a4a"><a href="#235746" label="[23:57:46]">&lt;stikonas&gt;</a></span><span class="message">and stage0-posix update pushed</span></div><br /></div></body></html>