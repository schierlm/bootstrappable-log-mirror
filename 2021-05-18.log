<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-05-18.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="001552"><span class="nick" style="color:#389600"><a href="#001552" label="[00:15:52]">&lt;OriansJ&gt;</a></span><span class="message">melg8: I'd much rather have 200MB of sources than 1MB of binary to audit.</span></div><div class="line" id="002709"><span class="nick" style="color:#2e2a4a"><a href="#002709" label="[00:27:09]">&lt;Hagfish&gt;</a></span><span class="message">when people write research papers about this project, perhaps that quote will become known (incorrectly) as Orian's Law</span></div><div class="line" id="002814"><span class="nick" style="color:#2e2a4a"><a href="#002814" label="[00:28:14]">&lt;Hagfish&gt;</a></span><span class="message">i'm sure other people have made similar observations, but this might be the first project that takes that idea to its furthest extremes</span></div><div class="line" id="002837"><span class="nick" style="color:#6b8072"><a href="#002837" label="[00:28:37]">&lt;stikonas&gt;</a></span><span class="message">other  people tried bootstrapping before</span></div><div class="line" id="002852"><span class="nick" style="color:#6b8072"><a href="#002852" label="[00:28:52]">&lt;stikonas&gt;</a></span><span class="message">although, I don't think any other project is as advanced</span></div><div class="line" id="002910"><span class="nick" style="color:#6b8072"><a href="#002910" label="[00:29:10]">&lt;stikonas&gt;</a></span><span class="message">fossy: just as a precaution, let's remove some gperf pregenerated but unused files <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/118">https://github.com/fosslinux/live-bootstrap/pull/118</a> </span></div><div class="line" id="002942"><span class="nick" style="color:#6b8072"><a href="#002942" label="[00:29:42]">&lt;stikonas&gt;</a></span><span class="message">we can avoid them in coreutils-6 because we only build (sha256sum, mktemp and date)</span></div><div class="line" id="003037"><span class="nick" style="color:#6b8072"><a href="#003037" label="[00:30:37]">&lt;stikonas&gt;</a></span><span class="message">getting rid of it in autotools build (coreutils 8.32) seems quite hard, probably worth to delay it until gperf (which is after g++)</span></div><div class="line" id="021831"><span class="nick" style="color:#389600"><a href="#021831" label="[02:18:31]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: I like to think of it as &quot;extreme&quot; libre software development. No binaries or pregen files, only human written source code as far as the eye can see.</span></div><div class="line" id="021945"><span class="nick" style="color:#389600"><a href="#021945" label="[02:19:45]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: we are only further advanced then the rest because instead of one lone developer trying to do everything (and failing because it is too hard to do alone); we have a rather large collection of capable people working together and having fun while doing it.</span></div><div class="line" id="022047"><span class="nick" style="color:#6b8072"><a href="#022047" label="[02:20:47]">&lt;stikonas&gt;</a></span><span class="message">yes, I agree...</span></div><div class="line" id="022123"><span class="nick" style="color:#6b8072"><a href="#022123" label="[02:21:23]">&lt;stikonas&gt;</a></span><span class="message">with more people progress might be much faster</span></div><div class="line" id="022222"><span class="nick" style="color:#80b1d3"><a href="#022222" label="[02:22:22]">&lt;melg8&gt;</a></span><span class="message">OriansJ if i add mkdir to kaemÂ  - can it be merged to main repo? that would be really nice for nix by removing custom patched version from it</span></div><div class="line" id="022406"><span class="nick" style="color:#6b8072"><a href="#022406" label="[02:24:06]">&lt;stikonas&gt;</a></span><span class="message">I guess mkdir in kaem might be useful</span></div><div class="line" id="022411"><span class="nick" style="color:#6b8072"><a href="#022411" label="[02:24:11]">&lt;stikonas&gt;</a></span><span class="message">even for live-bootstrap</span></div><div class="line" id="022507"><span class="nick" style="color:#6b8072"><a href="#022507" label="[02:25:07]">&lt;stikonas&gt;</a></span><span class="message">we won't need to pre-mkdir so a few empty directories in initial initrd image</span></div><div class="line" id="022704"><span class="nick" style="color:#80b1d3"><a href="#022704" label="[02:27:04]">&lt;melg8&gt;</a></span><span class="message">yea, because of that abuse of empty directories i was forced to replicate them by hand + add to kaem mkdir - thing is - until newer version of nix i can't checkout repos submodules, and if cant do that - i can't just build from &quot;inside&quot; of loaded sources - they are in /nix/store/blabla and build is in /build )</span></div><div class="line" id="022912"><span class="nick" style="color:#80b1d3"><a href="#022912" label="[02:29:12]">&lt;melg8&gt;</a></span><span class="message">and all this because i don't want to trust to bash and use kaem instead)</span></div><div class="line" id="023643"><span class="nick" style="color:#389600"><a href="#023643" label="[02:36:43]">&lt;OriansJ&gt;</a></span><span class="message">melg8: generally patches are quite welcome (I tend to only reject them when they are breaking things or touch way more than is required to implement the desired functionality)</span></div><div class="line" id="023716"><span class="nick" style="color:#389600"><a href="#023716" label="[02:37:16]">&lt;OriansJ&gt;</a></span><span class="message">althought mkdir tends to be a seperate program outside of the shell</span></div><div class="line" id="023729"><span class="nick" style="color:#389600"><a href="#023729" label="[02:37:29]">&lt;OriansJ&gt;</a></span><span class="message">but it can quite easily be a builtin for kaem</span></div><div class="line" id="023748"><span class="nick" style="color:#389600"><a href="#023748" label="[02:37:48]">&lt;OriansJ&gt;</a></span><span class="message">one could also make chmod a builtin in kaem too without too much effort</span></div><div class="line" id="023829"><span class="nick" style="color:#6b8072"><a href="#023829" label="[02:38:29]">&lt;stikonas&gt;</a></span><span class="message">but I guess kaem.c only, not kaem-optional-seed</span></div><div class="line" id="023836"><span class="nick" style="color:#6b8072"><a href="#023836" label="[02:38:36]">&lt;stikonas&gt;</a></span><span class="message">keep hex kaem small</span></div><div class="line" id="023913"><span class="nick" style="color:#6b8072"><a href="#023913" label="[02:39:13]">&lt;stikonas&gt;</a></span><span class="message">well, the alternative is like OriansJ says, write a small mkdir binary</span></div><div class="line" id="023924"><span class="nick" style="color:#6b8072"><a href="#023924" label="[02:39:24]">&lt;stikonas&gt;</a></span><span class="message">that can go into mescc-extra-tools</span></div><div class="line" id="023939"><span class="nick" style="color:#389600"><a href="#023939" label="[02:39:39]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: correct. kaem-optional-seed is shrink only, never add.</span></div><div class="line" id="024136"><span class="nick" style="color:#80b1d3"><a href="#024136" label="[02:41:36]">&lt;melg8&gt;</a></span><span class="message">can instead of kaem seed be hex seed, which builds kaem seed and than runs it? will it be smaller?</span></div><div class="line" id="024155"><span class="nick" style="color:#80b1d3"><a href="#024155" label="[02:41:55]">&lt;melg8&gt;</a></span><span class="message">which builds kaem from source*</span></div><div class="line" id="024221"><span class="nick" style="color:#6b8072"><a href="#024221" label="[02:42:21]">&lt;stikonas&gt;</a></span><span class="message">yes, I discussed it a couple of times here</span></div><div class="line" id="024228"><span class="nick" style="color:#389600"><a href="#024228" label="[02:42:28]">&lt;OriansJ&gt;</a></span><span class="message">melg8: kaem-optional-seed is a 1:1 to the kaem-optional-seed.hex0</span></div><div class="line" id="024229"><span class="nick" style="color:#6b8072"><a href="#024229" label="[02:42:29]">&lt;stikonas&gt;</a></span><span class="message">you can basically hardcode 3 commands</span></div><div class="line" id="024303"><span class="nick" style="color:#6b8072"><a href="#024303" label="[02:43:03]">&lt;stikonas&gt;</a></span><span class="message">that build hex0 and kaem-optional-seed</span></div><div class="line" id="024307"><span class="nick" style="color:#80b1d3"><a href="#024307" label="[02:43:07]">&lt;melg8&gt;</a></span><span class="message">i think that would be cool even though initial source become larger i guess</span></div><div class="line" id="024310"><span class="nick" style="color:#6b8072"><a href="#024310" label="[02:43:10]">&lt;stikonas&gt;</a></span><span class="message">bytewise it will be simpler</span></div><div class="line" id="024311"><span class="nick" style="color:#389600"><a href="#024311" label="[02:43:11]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: yep and eliminate the need for tokenization and other features.</span></div><div class="line" id="024330"><span class="nick" style="color:#6b8072"><a href="#024330" label="[02:43:30]">&lt;stikonas&gt;</a></span><span class="message">melg8: initial binary will be smaller</span></div><div class="line" id="024340"><span class="nick" style="color:#6b8072"><a href="#024340" label="[02:43:40]">&lt;stikonas&gt;</a></span><span class="message">although total amount of hex0 code will go up</span></div><div class="line" id="024412"><span class="nick" style="color:#6b8072"><a href="#024412" label="[02:44:12]">&lt;stikonas&gt;</a></span><span class="message">and hex0 is not that much easier to read/write than machine code</span></div><div class="line" id="024417"><span class="nick" style="color:#6b8072"><a href="#024417" label="[02:44:17]">&lt;stikonas&gt;</a></span><span class="message">but that can be done I guess</span></div><div class="line" id="024435"><span class="nick" style="color:#6b8072"><a href="#024435" label="[02:44:35]">&lt;stikonas&gt;</a></span><span class="message">tokenization takes quite a few bytes in kaem</span></div><div class="line" id="024446"><span class="nick" style="color:#389600"><a href="#024446" label="[02:44:46]">&lt;OriansJ&gt;</a></span><span class="message">it'll just be move a string into eax, call execve; waitpid loop and then next string, call execve; waitpid loop and then move last string into eax, execve; waitpid loop. Exit</span></div><div class="line" id="024540"><span class="nick" style="color:#389600"><a href="#024540" label="[02:45:40]">&lt;OriansJ&gt;</a></span><span class="message">(also pushing stack for argv but you get the idea)</span></div><div class="line" id="025432"><span class="nick" style="color:#80b1d3"><a href="#025432" label="[02:54:32]">&lt;melg8&gt;</a></span><span class="message">it would be nice... for marketing ))</span></div><div class="line" id="025506"><span class="nick" style="color:#389600"><a href="#025506" label="[02:55:06]">&lt;OriansJ&gt;</a></span><span class="message">melg8: and a good exercise for anyone who would want to learn hex0 programming.</span></div><div class="line" id="025543"><span class="nick" style="color:#80b1d3"><a href="#025543" label="[02:55:43]">&lt;melg8&gt;</a></span><span class="message">not me, at least not for now) already 3 different directions of self improvement ))</span></div><div class="line" id="025728"><span class="nick" style="color:#389600"><a href="#025728" label="[02:57:28]">&lt;OriansJ&gt;</a></span><span class="message">melg8: ^_^ no worries, we all have more things to do then time to do it in.</span></div><div class="line" id="030848"><span class="nick" style="color:#80b1d3"><a href="#030848" label="[03:08:48]">&lt;melg8&gt;</a></span><span class="message">btw, any news about live-bootstraps ci max run time?</span></div><div class="line" id="034521"><span class="nick" style="color:#80b1d3"><a href="#034521" label="[03:45:21]">&lt;melg8&gt;</a></span><span class="message">i've managed to build it, tomorrow will cleanup patches, and rebase, so it will be reviewable</span></div><div class="line" id="041309"><span class="nick" style="color:#2e2a4a"><a href="#041309" label="[04:13:09]">&lt;Hagfish&gt;</a></span><span class="message">&quot;we are only further advanced ... because ... we have a rather large collection of capable people working together and having fun while doing it.&quot;</span></div><div class="line" id="041318"><span class="nick" style="color:#2e2a4a"><a href="#041318" label="[04:13:18]">&lt;Hagfish&gt;</a></span><span class="message">it sounds like there's a meta-bootstrapping problem here</span></div><div class="line" id="041344"><span class="nick" style="color:#2e2a4a"><a href="#041344" label="[04:13:44]">&lt;Hagfish&gt;</a></span><span class="message">&quot;the best way to find a talented person to do amazing work, is to first have some talented people doing amazing work&quot;</span></div><div class="line" id="041411"><span class="nick" style="color:#2e2a4a"><a href="#041411" label="[04:14:11]">&lt;Hagfish&gt;</a></span><span class="message">perhaps i could say that OriansJ solved that problem first</span></div><div class="line" id="053530"><span class="nick">***</span><span class="message notice">mephista is now known as spicy_icecream</span></div><div class="line" id="103834"><span class="nick" style="color:#6d2462"><a href="#103834" label="[10:38:34]">&lt;fossy&gt;</a></span><span class="message">melg8: live-bootstrap CI time is next on my list</span></div><div class="line" id="113241"><span class="nick" style="color:#234e69"><a href="#113241" label="[11:32:41]">&lt;ekaitz&gt;</a></span><span class="message">hi, I'd like to contribute to the project towards a RISC-V port, could you point me to some basic work that have to be done so I can dig a little bit on it?</span></div><div class="line" id="113617"><span class="nick" style="color:#6c3d55"><a href="#113617" label="[11:36:17]">&lt;bauen1&gt;</a></span><span class="message">ekaitz: hi and welcome, i'm not sure how familiar you are with live-bootstrap, but iirc the major hurdles with risc-v are that hex0 and friends don't yet support risc-v, the patched tcc version we're currently using is too old so it's missing the risc-v support from tccs mob branch, and we later build gcc 4.0.4 that is also missing risc-v support</span></div><div class="line" id="113645"><span class="nick" style="color:#234e69"><a href="#113645" label="[11:36:45]">&lt;ekaitz&gt;</a></span><span class="message">wow! what a party then!</span></div><div class="line" id="113702"><span class="nick" style="color:#6c3d55"><a href="#113702" label="[11:37:02]">&lt;bauen1&gt;</a></span><span class="message">gcc 4.0.4 is quite a bit of an issue in that regard, as you'd have to add risc-v support to it basically from scratch (gcc 4.0.4 is very old)</span></div><div class="line" id="113727"><span class="nick" style="color:#234e69"><a href="#113727" label="[11:37:27]">&lt;ekaitz&gt;</a></span><span class="message">i'd take a look to the hex0 and friends in the first place, since it is the most accessible for me</span></div><div class="line" id="113743"><span class="nick" style="color:#234e69"><a href="#113743" label="[11:37:43]">&lt;ekaitz&gt;</a></span><span class="message">but the gcc thingie looks terrifying atm</span></div><div class="line" id="113745"><span class="nick" style="color:#234e69"><a href="#113745" label="[11:37:45]">&lt;ekaitz&gt;</a></span><span class="message">:)</span></div><div class="line" id="113815"><span class="nick" style="color:#6c3d55"><a href="#113815" label="[11:38:15]">&lt;bauen1&gt;</a></span><span class="message">OriansJ: also iirc you had some choice words about how risc-v could / should be handled with hex0/m1/m2/mescc ?</span></div><div class="line" id="114029"><span class="nick" style="color:#6c3d55"><a href="#114029" label="[11:40:29]">&lt;bauen1&gt;</a></span><span class="message">ekaitz: yes, maybe there are ways around using gcc, but eventually you'll need a c++ compiler for newer versions of gcc</span></div><div class="line" id="114645"><span class="nick" style="color:#234e69"><a href="#114645" label="[11:46:45]">&lt;ekaitz&gt;</a></span><span class="message">well, i'm not sure there are ways around, we'll probably need to port it too</span></div><div class="line" id="114745"><span class="nick" style="color:#234e69"><a href="#114745" label="[11:47:45]">&lt;ekaitz&gt;</a></span><span class="message">we'll see, maybe it doesn't look that terrifying in the near future</span></div><div class="line" id="124942"><span class="nick" style="color:#d9d9d9"><a href="#124942" label="[12:49:42]">&lt;smartineng&gt;</a></span><span class="message">ekaitz: check this <a rel="nofollow" href="https://github.com/laanwj/guix-mes">https://github.com/laanwj/guix-mes</a>  and <a rel="nofollow" href="https://github.com/laanwj/guix-mescc-tools">https://github.com/laanwj/guix-mescc-tools</a> </span></div><div class="line" id="125017"><span class="nick" style="color:#234e69"><a href="#125017" label="[12:50:17]">&lt;ekaitz&gt;</a></span><span class="message">thanks! I will</span></div><div class="line" id="132507"><span class="nick" style="color:#bc80bd"><a href="#132507" label="[13:25:07]">&lt;gforce_d11977&gt;</a></span><span class="message">&quot;wow! what a party then!&quot; - ekaitz: you made my day 8-)</span></div><div class="line" id="132555"><span class="nick" style="color:#bc80bd"><a href="#132555" label="[13:25:55]">&lt;gforce_d11977&gt;</a></span><span class="message">ekaitz: getting the first step with hex0 done would be coooooool</span></div><div class="line" id="132628"><span class="nick" style="color:#bc80bd"><a href="#132628" label="[13:26:28]">&lt;gforce_d11977&gt;</a></span><span class="message">(reminds me to test qemu risc-v)</span></div><div class="line" id="133522"><span class="nick" style="color:#234e69"><a href="#133522" label="[13:35:22]">&lt;ekaitz&gt;</a></span><span class="message">gforce_d11977: I'm playing around with qemu these days and it works pretty well with riscv and gdb</span></div><div class="line" id="133630"><span class="nick" style="color:#234e69"><a href="#133630" label="[13:36:30]">&lt;ekaitz&gt;</a></span><span class="message">I'm migrating *lightening* (wingo's fork of GNU Lightning) to riscv and I'm debuggin the process with that</span></div><div class="line" id="140156"><span class="nick" style="color:#234e69"><a href="#140156" label="[14:01:56]">&lt;ekaitz&gt;</a></span><span class="message">smartineng: is there any conversation thread to catch up with those changes and see what is needed next?</span></div><div class="line" id="141606"><span class="nick" style="color:#bc80bd"><a href="#141606" label="[14:16:06]">&lt;gforce_d11977&gt;</a></span><span class="message">ekaitz: try to work on the very first: hex0-seed.x86.hex0 and try to implement it for risc-v to get a feeling</span></div><div class="line" id="141615"><span class="nick" style="color:#bc80bd"><a href="#141615" label="[14:16:15]">&lt;gforce_d11977&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/bittorf/GNU-mes-documentation-attempt/blob/main/step01/doc.md">https://github.com/bittorf/GNU-mes-documentation-attempt/blob/main/step01/doc.md</a> </span></div><div class="line" id="141652"><span class="nick" style="color:#bc80bd"><a href="#141652" label="[14:16:52]">&lt;gforce_d11977&gt;</a></span><span class="message">ekaitz: was this your question?</span></div><div class="line" id="141733"><span class="nick" style="color:#bc80bd"><a href="#141733" label="[14:17:33]">&lt;gforce_d11977&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds/blob/master/POSIX/x86/hex0_x86.hex0">https://github.com/oriansj/bootstrap-seeds/blob/master/POSIX/x86/hex0_x86.hex0</a> </span></div><div class="line" id="143759"><span class="nick" style="color:#3c5b35"><a href="#143759" label="[14:37:59]">&lt;janneke&gt;</a></span><span class="message">ekaitz: see the bug-mes archives for recent discussions: <a rel="nofollow" href="https://lists.gnu.org/archive/html/bug-mes">https://lists.gnu.org/archive/html/bug-mes</a> </span></div><div class="line" id="144317"><span class="nick" style="color:#234e69"><a href="#144317" label="[14:43:17]">&lt;ekaitz&gt;</a></span><span class="message">good thanks gforce_d11977 and janneke !</span></div><div class="line" id="155230"><span class="nick" style="color:#234e69"><a href="#155230" label="[15:52:30]">&lt;ekaitz&gt;</a></span><span class="message">gforce_d11977: this may sound stupid but I'm a little bit confused by the amount of sub-projects we have here</span></div><div class="line" id="155329"><span class="nick" style="color:#234e69"><a href="#155329" label="[15:53:29]">&lt;ekaitz&gt;</a></span><span class="message">ho wis bootstrap-seeds related to mes? when is it loaded</span></div><div class="line" id="155330"><span class="nick" style="color:#234e69"><a href="#155330" label="[15:53:30]">&lt;ekaitz&gt;</a></span><span class="message">?</span></div><div class="line" id="155333"><span class="nick" style="color:#234e69"><a href="#155333" label="[15:53:33]">&lt;ekaitz&gt;</a></span><span class="message">how*</span></div><div class="line" id="160131"><span class="nick">***</span><span class="message notice">dongcarl7 is now known as dongcarl</span></div><div class="line" id="162933"><span class="nick" style="color:#6c3d55"><a href="#162933" label="[16:29:33]">&lt;bauen1&gt;</a></span><span class="message">ekaitz: bootstrap-seeds should be the only binary seed necessary for running live-bootstrap, it consist of a hand-assembled hex0 and kaem</span></div><div class="line" id="163042"><span class="nick" style="color:#234e69"><a href="#163042" label="[16:30:42]">&lt;ekaitz&gt;</a></span><span class="message">okay, what does kaem mean?</span></div><div class="line" id="163559"><span class="nick" style="color:#6c3d55"><a href="#163559" label="[16:35:59]">&lt;bauen1&gt;</a></span><span class="message">ekaitz: kaem is shell, the early build scripts are written in it</span></div><div class="line" id="163606"><span class="nick" style="color:#80b1d3"><a href="#163606" label="[16:36:06]">&lt;melg8&gt;</a></span><span class="message">kaem is like minimal bash which can run .kaem scripts</span></div><div class="line" id="163620"><span class="nick" style="color:#234e69"><a href="#163620" label="[16:36:20]">&lt;ekaitz&gt;</a></span><span class="message">oooh</span></div><div class="line" id="163628"><span class="nick" style="color:#234e69"><a href="#163628" label="[16:36:28]">&lt;ekaitz&gt;</a></span><span class="message">now I understand</span></div><div class="line" id="163634"><span class="nick" style="color:#6c3d55"><a href="#163634" label="[16:36:34]">&lt;bauen1&gt;</a></span><span class="message">^ it exists in a few versions afaik, each being a bit more complex with a few more features until we reach bash in live-bootstrap</span></div><div class="line" id="163650"><span class="nick" style="color:#234e69"><a href="#163650" label="[16:36:50]">&lt;ekaitz&gt;</a></span><span class="message">so the hex0 is the assembler and kaem a shell</span></div><div class="line" id="163755"><span class="nick" style="color:#6c3d55"><a href="#163755" label="[16:37:55]">&lt;bauen1&gt;</a></span><span class="message">yes</span></div><div class="line" id="163759"><span class="nick" style="color:#234e69"><a href="#163759" label="[16:37:59]">&lt;ekaitz&gt;</a></span><span class="message">i'll try to implement both, let's see :)</span></div><div class="line" id="163806"><span class="nick" style="color:#6c3d55"><a href="#163806" label="[16:38:06]">&lt;bauen1&gt;</a></span><span class="message">well hex0 (the language) is basically a glorified binary</span></div><div class="line" id="163818"><span class="nick" style="color:#6c3d55"><a href="#163818" label="[16:38:18]">&lt;bauen1&gt;</a></span><span class="message">iirc hex1 is hex0 but with comments</span></div><div class="line" id="163824"><span class="nick" style="color:#6c3d55"><a href="#163824" label="[16:38:24]">&lt;bauen1&gt;</a></span><span class="message">it's been a while since i touched those parts</span></div><div class="line" id="163836"><span class="nick" style="color:#6c3d55"><a href="#163836" label="[16:38:36]">&lt;bauen1&gt;</a></span><span class="message">but they should be fairly straight forward to implement</span></div><div class="line" id="163911"><span class="nick" style="color:#234e69"><a href="#163911" label="[16:39:11]">&lt;ekaitz&gt;</a></span><span class="message">how do you create the hex0? directly by hand or you use a simple assembler to do most of the hard job?</span></div><div class="line" id="164645"><span class="nick" style="color:#6c3d55"><a href="#164645" label="[16:46:45]">&lt;bauen1&gt;</a></span><span class="message">ekaitz: i believe <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/">https://github.com/oriansj/stage0-posix/</a>  is the place where you want to start, there are high level prototypes in <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/tree/master/High%20Level%20Prototypes">https://github.com/oriansj/stage0-posix/tree/master/High%20Level%20Prototypes</a>  but the low level versions (the hex0 seed binary and the things written in hex0 langauge etc..) have been written by hand</span></div><div class="line" id="164650"><span class="nick" style="color:#6c3d55"><a href="#164650" label="[16:46:50]">&lt;bauen1&gt;</a></span><span class="message">or rather assembled by hand</span></div><div class="line" id="164709"><span class="nick" style="color:#234e69"><a href="#164709" label="[16:47:09]">&lt;ekaitz&gt;</a></span><span class="message">okay! thank you very much</span></div><div class="line" id="164733"><span class="nick" style="color:#6c3d55"><a href="#164733" label="[16:47:33]">&lt;bauen1&gt;</a></span><span class="message">ekaitz: the idea being that you never use the output of a compiler in the bootstrap, so hex0 is hand assembled, as is kaem (the seed version), which are then used to compile the next etc...</span></div><div class="line" id="164845"><span class="nick" style="color:#234e69"><a href="#164845" label="[16:48:45]">&lt;ekaitz&gt;</a></span><span class="message">great, yeah, that makes perfect sense</span></div><div class="line" id="174017"><span class="nick" style="color:#bc80bd"><a href="#174017" label="[17:40:17]">&lt;gforce_d11977&gt;</a></span><span class="message">ekaitz: 'kaem' is a puzzled 'make' (spelled in another order)</span></div><div class="line" id="174049"><span class="nick" style="color:#234e69"><a href="#174049" label="[17:40:49]">&lt;ekaitz&gt;</a></span><span class="message">ha! good naming!</span></div><div class="line" id="174057"><span class="nick" style="color:#80b1d3"><a href="#174057" label="[17:40:57]">&lt;melg8&gt;</a></span><span class="message">that's a news even for me))</span></div><div class="line" id="174156"><span class="nick" style="color:#6b8072"><a href="#174156" label="[17:41:56]">&lt;stikonas&gt;</a></span><span class="message">bauen1: ekaitz hex1 is hex0 + 1 character labels</span></div><div class="line" id="174201"><span class="nick" style="color:#6b8072"><a href="#174201" label="[17:42:01]">&lt;stikonas&gt;</a></span><span class="message">(and maybe offset calculation)</span></div><div class="line" id="174211"><span class="nick" style="color:#6b8072"><a href="#174211" label="[17:42:11]">&lt;stikonas&gt;</a></span><span class="message">hex2 has multi character labels</span></div><div class="line" id="174218"><span class="nick" style="color:#6b8072"><a href="#174218" label="[17:42:18]">&lt;stikonas&gt;</a></span><span class="message">and then M0 is proper macro assembler</span></div><div class="line" id="175038"><span class="nick" style="color:#bc80bd"><a href="#175038" label="[17:50:38]">&lt;gforce_d11977&gt;</a></span><span class="message">ekaitz: and 'catm' is maybe 'cat-for-mes' 8-)</span></div><div class="line" id="182008"><span class="nick" style="color:#234e69"><a href="#182008" label="[18:20:08]">&lt;ekaitz&gt;</a></span><span class="message">hah good to know thanks!</span></div><br /></div></body></html>