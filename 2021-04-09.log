<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-04-09.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="003042"><span class="nick" style="color:#8dd3c7"><a href="#003042" label="[00:30:42]">&lt;OriansJ`&gt;</a></span><span class="message">well there is no way to bootstrap 1+MB binaries without having a boatload of source too....</span></div><div class="line" id="004155"><span class="nick" style="color:#2e2a4a"><a href="#004155" label="[00:41:55]">&lt;stikonas&gt;</a></span><span class="message">cc1 is 15MB...</span></div><div class="line" id="004206"><span class="nick" style="color:#2e2a4a"><a href="#004206" label="[00:42:06]">&lt;stikonas&gt;</a></span><span class="message">although, these binaries are probably not stripped</span></div><div class="line" id="004242"><span class="nick" style="color:#2e2a4a"><a href="#004242" label="[00:42:42]">&lt;stikonas&gt;</a></span><span class="message">yeah, goes to 5 MB after that... still not a small binary</span></div><div class="line" id="110558"><span class="nick" style="color:#6b8072"><a href="#110558" label="[11:05:58]">&lt;janneke&gt;</a></span><span class="message">OriansJ`: see <a rel="nofollow" href="https://gitlab.com/janneke/mes-m2">https://gitlab.com/janneke/mes-m2</a> </span></div><div class="line" id="110613"><span class="nick" style="color:#6b8072"><a href="#110613" label="[11:06:13]">&lt;janneke&gt;</a></span><span class="message">OriansJ`: i have resurrected make, mescc and added guile support</span></div><div class="line" id="115335"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado_</span></div><div class="line" id="115340"><span class="nick">***</span><span class="message notice">rekado_ is now known as rekado</span></div><div class="line" id="140502"><span class="nick" style="color:#80b1d3"><a href="#140502" label="[14:05:02]">&lt;bauen1&gt;</a></span><span class="message">and i've managed to misspell &quot;autoconf&quot; as &quot;uaotconf&quot; ._.</span></div><div class="line" id="140527"><span class="nick" style="color:#80b1d3"><a href="#140527" label="[14:05:27]">&lt;bauen1&gt;</a></span><span class="message">or rather i misspelled auto, and didn't leave a single letter in the right place ...</span></div><div class="line" id="142150"><span class="nick" style="color:#6d2462"><a href="#142150" label="[14:21:50]">&lt;fossy&gt;</a></span><span class="message">grr</span></div><div class="line" id="142155"><span class="nick" style="color:#6d2462"><a href="#142155" label="[14:21:55]">&lt;fossy&gt;</a></span><span class="message">perl 5.12 compiles but has some broken number support</span></div><div class="line" id="142302"><span class="nick" style="color:#6d2462"><a href="#142302" label="[14:23:02]">&lt;fossy&gt;</a></span><span class="message">it seems to be amissing define</span></div><div class="line" id="142305"><span class="nick" style="color:#6d2462"><a href="#142305" label="[14:23:05]">&lt;fossy&gt;</a></span><span class="message">i will track that down tomorrow</span></div><div class="line" id="152600"><span class="nick" style="color:#234e69"><a href="#152600" label="[15:26:00]">&lt;gforce_de1977&gt;</a></span><span class="message">here are the numbers from tonight: 70% out of 224 valid runs are OK, 30% ABORTed&quot;: <a rel="nofollow" href="https://paste.debian.net/1192939/">https://paste.debian.net/1192939/</a> </span></div><div class="line" id="174742"><span class="nick" style="color:#2e2a4a"><a href="#174742" label="[17:47:42]">&lt;stikonas&gt;</a></span><span class="message">gforce_de1977: ok, so it's mostly that automake 2.13 (?) ssue</span></div><div class="line" id="174855"><span class="nick" style="color:#2e2a4a"><a href="#174855" label="[17:48:55]">&lt;stikonas&gt;</a></span><span class="message">although, P2 is best understood...</span></div><div class="line" id="175618"><span class="nick" style="color:#80b1d3"><a href="#175618" label="[17:56:18]">&lt;bauen1&gt;</a></span><span class="message">why do we need ~10-20 different versions of autohell tools, are they that incompatible ?</span></div><div class="line" id="175734"><span class="nick" style="color:#80b1d3"><a href="#175734" label="[17:57:34]">&lt;bauen1&gt;</a></span><span class="message">currently hunting down calls to autoreconf-2.57 (and similar) to add AUTOMAKE= and ACLOCAL= so it doesn't need the unversioned symlinks</span></div><div class="line" id="181753"><span class="nick" style="color:#2e2a4a"><a href="#181753" label="[18:17:53]">&lt;stikonas&gt;</a></span><span class="message">bauen1: they are somewhat incompatible</span></div><div class="line" id="181806"><span class="nick" style="color:#2e2a4a"><a href="#181806" label="[18:18:06]">&lt;stikonas&gt;</a></span><span class="message">bauen1: but it's easier to build newer autotools if you have older</span></div><div class="line" id="181833"><span class="nick" style="color:#2e2a4a"><a href="#181833" label="[18:18:33]">&lt;stikonas&gt;</a></span><span class="message">bauen1: (that's true if you are not  willing to use pre-generated configure scripts)</span></div><div class="line" id="182016"><span class="nick" style="color:#2e2a4a"><a href="#182016" label="[18:20:16]">&lt;stikonas&gt;</a></span><span class="message">bauen1: I suspect in the end we really need (for other software, not counting autotools themselves) autoconf 2.12 2.13 2.52, possibly 2.61 ( I think gcc), 2.65(for xz) and 2.69 (everything new should work with this one)</span></div><div class="line" id="182045"><span class="nick" style="color:#2e2a4a"><a href="#182045" label="[18:20:45]">&lt;stikonas&gt;</a></span><span class="message">not sure about automake... but probably most reasonably new stuff will work with latest automake</span></div><div class="line" id="193723"><span class="nick" style="color:#6c3d55"><a href="#193723" label="[19:37:23]">&lt;Hagfish&gt;</a></span><span class="message">in the future, some code historian should do a case study on autotools, based on the bootstrap path it ends up needing, and then uni students can be taught about it as part of the software engineering syllabus (assuming they don't take the full &quot;bootstrapping&quot; lecture series)</span></div><div class="line" id="193820"><span class="nick" style="color:#2e2a4a"><a href="#193820" label="[19:38:20]">&lt;stikonas&gt;</a></span><span class="message">it's not really needed bootstrap path... It's probably the one that I found easiest...</span></div><div class="line" id="193829"><span class="nick" style="color:#6c3d55"><a href="#193829" label="[19:38:29]">&lt;Hagfish&gt;</a></span><span class="message">oh?</span></div><div class="line" id="193858"><span class="nick" style="color:#2e2a4a"><a href="#193858" label="[19:38:58]">&lt;stikonas&gt;</a></span><span class="message">well, autotools are not compiled programs, they are just perl or bash scripts</span></div><div class="line" id="193911"><span class="nick" style="color:#2e2a4a"><a href="#193911" label="[19:39:11]">&lt;stikonas&gt;</a></span><span class="message">but in source form when they are distributeed they need a bit of templating</span></div><div class="line" id="193914"><span class="nick" style="color:#6c3d55"><a href="#193914" label="[19:39:14]">&lt;Hagfish&gt;</a></span><span class="message">good point</span></div><div class="line" id="194029"><span class="nick" style="color:#2e2a4a"><a href="#194029" label="[19:40:29]">&lt;stikonas&gt;</a></span><span class="message">although in general gnu packages ship huge amount of pregenerated stuff</span></div><div class="line" id="194031"><span class="nick" style="color:#6c3d55"><a href="#194031" label="[19:40:31]">&lt;Hagfish&gt;</a></span><span class="message">do you think that templating leads to more messy versioning/dependencies, or is it just the nature of what the programs are trying to do?</span></div><div class="line" id="194105"><span class="nick" style="color:#6c3d55"><a href="#194105" label="[19:41:05]">&lt;Hagfish&gt;</a></span><span class="message">i guess i'm imagining that they didn't manage to provide stable interfaces, or something</span></div><div class="line" id="194114"><span class="nick" style="color:#2e2a4a"><a href="#194114" label="[19:41:14]">&lt;stikonas&gt;</a></span><span class="message">well, it's installation paths, etc...</span></div><div class="line" id="194121"><span class="nick" style="color:#6c3d55"><a href="#194121" label="[19:41:21]">&lt;Hagfish&gt;</a></span><span class="message">hmm, tricky</span></div><div class="line" id="194205"><span class="nick" style="color:#2e2a4a"><a href="#194205" label="[19:42:05]">&lt;stikonas&gt;</a></span><span class="message">well, I found it easiest to start with autoconf 2.52 which basically needed</span></div><div class="line" id="194208"><span class="nick" style="color:#2e2a4a"><a href="#194208" label="[19:42:08]">&lt;stikonas&gt;</a></span><span class="message">    sed -i -e &quot;s# @SHELL@#/bin/sh#&quot; -e 's/@M4@/m4/' -e 's/@AWK@/awk/' \</span></div><div class="line" id="194210"><span class="nick" style="color:#2e2a4a"><a href="#194210" label="[19:42:10]">&lt;stikonas&gt;</a></span><span class="message">        -e  's/@PACKAGE_NAME@/Autoconf/' -e 's/@VERSION@/2.52/' \</span></div><div class="line" id="194211"><span class="nick" style="color:#2e2a4a"><a href="#194211" label="[19:42:11]">&lt;stikonas&gt;</a></span><span class="message">        -e &quot;s#@datadir@#${PREFIX}/share/autoconf-2.52#&quot; autoconf</span></div><div class="line" id="194239"><span class="nick" style="color:#2e2a4a"><a href="#194239" label="[19:42:39]">&lt;stikonas&gt;</a></span><span class="message">these variables are normally filled in by configure script</span></div><div class="line" id="194309"><span class="nick" style="color:#2e2a4a"><a href="#194309" label="[19:43:09]">&lt;stikonas&gt;</a></span><span class="message">but live-bootstrap tries to avoid using configure until we can recreate them</span></div><div class="line" id="194335"><span class="nick" style="color:#6c3d55"><a href="#194335" label="[19:43:35]">&lt;Hagfish&gt;</a></span><span class="message">recreate them how?</span></div><div class="line" id="194343"><span class="nick" style="color:#2e2a4a"><a href="#194343" label="[19:43:43]">&lt;stikonas&gt;</a></span><span class="message">using autoconf</span></div><div class="line" id="194348"><span class="nick" style="color:#6c3d55"><a href="#194348" label="[19:43:48]">&lt;Hagfish&gt;</a></span><span class="message">ah, okay</span></div><div class="line" id="194350"><span class="nick" style="color:#2e2a4a"><a href="#194350" label="[19:43:50]">&lt;stikonas&gt;</a></span><span class="message">autoconf creates ./configure scripts</span></div><div class="line" id="194405"><span class="nick" style="color:#6c3d55"><a href="#194405" label="[19:44:05]">&lt;Hagfish&gt;</a></span><span class="message">that sounds vaguely familiar</span></div><div class="line" id="194459"><span class="nick" style="color:#2e2a4a"><a href="#194459" label="[19:44:59]">&lt;stikonas&gt;</a></span><span class="message">it's basically this graph <a rel="nofollow" href="https://en.wikipedia.org/wiki/GNU_Autotools#/media/File:Autoconf-automake-process.svg">https://en.wikipedia.org/wiki/GNU_Autotools#/media/File:Autoconf-automake-process.svg</a> </span></div><div class="line" id="194515"><span class="nick" style="color:#2e2a4a"><a href="#194515" label="[19:45:15]">&lt;stikonas&gt;</a></span><span class="message">well, we don't run autoscan...</span></div><div class="line" id="194524"><span class="nick" style="color:#6c3d55"><a href="#194524" label="[19:45:24]">&lt;Hagfish&gt;</a></span><span class="message">wow, i've not seen that graph before</span></div><div class="line" id="194535"><span class="nick" style="color:#6c3d55"><a href="#194535" label="[19:45:35]">&lt;Hagfish&gt;</a></span><span class="message">it almost seems reasonable :)</span></div><div class="line" id="194608"><span class="nick" style="color:#2e2a4a"><a href="#194608" label="[19:46:08]">&lt;stikonas&gt;</a></span><span class="message">although, not all packages follow this exactly</span></div><div class="line" id="194618"><span class="nick" style="color:#2e2a4a"><a href="#194618" label="[19:46:18]">&lt;stikonas&gt;</a></span><span class="message">sometimes Makefile.in is handwritten</span></div><div class="line" id="194621"><span class="nick" style="color:#2e2a4a"><a href="#194621" label="[19:46:21]">&lt;stikonas&gt;</a></span><span class="message">so automake is not used</span></div><div class="line" id="194703"><span class="nick" style="color:#6c3d55"><a href="#194703" label="[19:47:03]">&lt;Hagfish&gt;</a></span><span class="message">the key/legend doesn't explain what the configure/config.status shapes mean</span></div><div class="line" id="194748"><span class="nick" style="color:#2e2a4a"><a href="#194748" label="[19:47:48]">&lt;stikonas&gt;</a></span><span class="message">it's both I guess</span></div><div class="line" id="194751"><span class="nick" style="color:#2e2a4a"><a href="#194751" label="[19:47:51]">&lt;stikonas&gt;</a></span><span class="message">both file and process</span></div><div class="line" id="194757"><span class="nick" style="color:#2e2a4a"><a href="#194757" label="[19:47:57]">&lt;stikonas&gt;</a></span><span class="message">configure itself is s a script</span></div><div class="line" id="194808"><span class="nick" style="color:#2e2a4a"><a href="#194808" label="[19:48:08]">&lt;stikonas&gt;</a></span><span class="message">but is also output file</span></div><div class="line" id="194813"><span class="nick" style="color:#6c3d55"><a href="#194813" label="[19:48:13]">&lt;Hagfish&gt;</a></span><span class="message">oh, so it's a generated script</span></div><div class="line" id="194816"><span class="nick" style="color:#6c3d55"><a href="#194816" label="[19:48:16]">&lt;Hagfish&gt;</a></span><span class="message">yeah, i guess that makes sense</span></div><div class="line" id="194912"><span class="nick" style="color:#2e2a4a"><a href="#194912" label="[19:49:12]">&lt;stikonas&gt;</a></span><span class="message">yaeh, same with config.status</span></div><div class="line" id="194927"><span class="nick" style="color:#2e2a4a"><a href="#194927" label="[19:49:27]">&lt;stikonas&gt;</a></span><span class="message">although, you don't need to manually run config.status</span></div><div class="line" id="195101"><span class="nick" style="color:#2e2a4a"><a href="#195101" label="[19:51:01]">&lt;stikonas&gt;</a></span><span class="message">in terms of bootsrapping, the biggest problem was that it uses perl which is a bit annoying to build... But we wrote manual Makefile's for perl</span></div><div class="line" id="195142"><span class="nick" style="color:#6c3d55"><a href="#195142" label="[19:51:42]">&lt;Hagfish&gt;</a></span><span class="message">is it the most complicated thing perl is needed for?</span></div><div class="line" id="195146"><span class="nick" style="color:#6c3d55"><a href="#195146" label="[19:51:46]">&lt;Hagfish&gt;</a></span><span class="message">is perl needed for gcc?</span></div><div class="line" id="195210"><span class="nick" style="color:#2e2a4a"><a href="#195210" label="[19:52:10]">&lt;stikonas&gt;</a></span><span class="message">Hagfish: well, autotools are mostly perls scripts</span></div><div class="line" id="195221"><span class="nick" style="color:#2e2a4a"><a href="#195221" label="[19:52:21]">&lt;stikonas&gt;</a></span><span class="message">so if you want to build gcc using autotools then it is needed</span></div><div class="line" id="195236"><span class="nick" style="color:#2e2a4a"><a href="#195236" label="[19:52:36]">&lt;stikonas&gt;</a></span><span class="message">although, in principle one does not strictly need autotools to build gcc</span></div><div class="line" id="195249"><span class="nick" style="color:#6c3d55"><a href="#195249" label="[19:52:49]">&lt;Hagfish&gt;</a></span><span class="message">oh, i didn't realise that</span></div><div class="line" id="195301"><span class="nick" style="color:#6c3d55"><a href="#195301" label="[19:53:01]">&lt;Hagfish&gt;</a></span><span class="message">you could just manually generate a set of make commands or something?</span></div><div class="line" id="195313"><span class="nick" style="color:#2e2a4a"><a href="#195313" label="[19:53:13]">&lt;stikonas&gt;</a></span><span class="message">well, you can always write a build system for anything in make</span></div><div class="line" id="195334"><span class="nick" style="color:#6c3d55"><a href="#195334" label="[19:53:34]">&lt;Hagfish&gt;</a></span><span class="message">that doesn't sound much harder than some of the other things this project is trying :)</span></div><div class="line" id="195358"><span class="nick" style="color:#2e2a4a"><a href="#195358" label="[19:53:58]">&lt;stikonas&gt;</a></span><span class="message">no, it's not too hard, especially now</span></div><div class="line" id="195413"><span class="nick" style="color:#2e2a4a"><a href="#195413" label="[19:54:13]">&lt;stikonas&gt;</a></span><span class="message">well, writing manual makefiles was a bit annoying before</span></div><div class="line" id="195424"><span class="nick" style="color:#234e69"><a href="#195424" label="[19:54:24]">&lt;gforce_de1977&gt;</a></span><span class="message">stikonas: bauen1: i just uploaded all the logs (44mb) from the 224 builds tonight here: <a rel="nofollow" href="http://intercity-vpn.de/bootstrap/logs-2021apr8.tar.xz">http://intercity-vpn.de/bootstrap/logs-2021apr8.tar.xz</a> </span></div><div class="line" id="195424"><span class="nick" style="color:#2e2a4a"><a href="#195424" label="[19:54:24]">&lt;stikonas&gt;</a></span><span class="message">but we haven't done that for some time now</span></div><div class="line" id="195438"><span class="nick" style="color:#6c3d55"><a href="#195438" label="[19:54:38]">&lt;Hagfish&gt;</a></span><span class="message">i guess the more software that is bootstrapped, the more feasible it is to build something new on that base, but i guess the things you'd want to replace are also more complex</span></div><div class="line" id="195502"><span class="nick" style="color:#2e2a4a"><a href="#195502" label="[19:55:02]">&lt;stikonas&gt;</a></span><span class="message">but it still gets easier...</span></div><div class="line" id="195505"><span class="nick" style="color:#6c3d55"><a href="#195505" label="[19:55:05]">&lt;Hagfish&gt;</a></span><span class="message">nice</span></div><div class="line" id="195723"><span class="nick" style="color:#6c3d55"><a href="#195723" label="[19:57:23]">&lt;Hagfish&gt;</a></span><span class="message">i'm imagining people 50 years from now trying to bootstrap some popular new language, that runs on a virtual machine in a virtual machine on top of webasm in a browser, and the original bootstrappers will be saying &quot;in my day, we used to bootstrap code that ran on actual hardware&quot;</span></div><div class="line" id="195945"><span class="nick" style="color:#234e69"><a href="#195945" label="[19:59:45]">&lt;gforce_de1977&gt;</a></span><span class="message">*and silence in the room for some seconds, then everybody is laughing*</span></div><div class="line" id="200251"><span class="nick" style="color:#6c3d55"><a href="#200251" label="[20:02:51]">&lt;Hagfish&gt;</a></span><span class="message">the kids will be like &quot;what, you had a cloud in your home?  that's not possible&quot;</span></div><div class="line" id="200755"><span class="nick" style="color:#80b1d3"><a href="#200755" label="[20:07:55]">&lt;bauen1&gt;</a></span><span class="message">Hagfish: once you have live-bootstrap up to e.g. debian, you can start making very big breaking changes more easily, since backwards compatibility / bootstrapping is not an issue any more</span></div><div class="line" id="200807"><span class="nick" style="color:#80b1d3"><a href="#200807" label="[20:08:07]">&lt;bauen1&gt;</a></span><span class="message">*for your hobby systems / reasearch at least</span></div><div class="line" id="200941"><span class="nick" style="color:#6c3d55"><a href="#200941" label="[20:09:41]">&lt;Hagfish&gt;</a></span><span class="message">yeah, good point</span></div><div class="line" id="201004"><span class="nick" style="color:#80b1d3"><a href="#201004" label="[20:10:04]">&lt;bauen1&gt;</a></span><span class="message">or simplify the autohell bootstrap, eventually leading to better implementations</span></div><div class="line" id="214415"><span class="nick" style="color:#6c3d55"><a href="#214415" label="[21:44:15]">&lt;Hagfish&gt;</a></span><span class="message"> <a rel="nofollow" href="https://news.ycombinator.com/item?id=26754884">https://news.ycombinator.com/item?id=26754884</a>  an excellent summary of the issues with digital ID projects, including this line:</span></div><div class="line" id="214423"><span class="nick" style="color:#6c3d55"><a href="#214423" label="[21:44:23]">&lt;Hagfish&gt;</a></span><span class="message">&quot;Card personalization is the bootstrapping problem&quot;</span></div><div class="line" id="214439"><span class="nick" style="color:#6c3d55"><a href="#214439" label="[21:44:39]">&lt;Hagfish&gt;</a></span><span class="message">the tl;dr at the end is even better:</span></div><div class="line" id="214445"><span class="nick" style="color:#6c3d55"><a href="#214445" label="[21:44:45]">&lt;Hagfish&gt;</a></span><span class="message">&quot;My impression of identity is it's not a technology problem, but there are lots of people who will take your money to let you say that it is.&quot;</span></div><div class="line" id="215048"><span class="nick" style="color:#80b1d3"><a href="#215048" label="[21:50:48]">&lt;bauen1&gt;</a></span><span class="message">perfect proof of identity is such an unsolved problem</span></div><div class="line" id="215133"><span class="nick" style="color:#80b1d3"><a href="#215133" label="[21:51:33]">&lt;bauen1&gt;</a></span><span class="message">probably even unsolvable</span></div><div class="line" id="215159"><span class="nick" style="color:#80b1d3"><a href="#215159" label="[21:51:59]">&lt;bauen1&gt;</a></span><span class="message">i mean all i'm asking for is a way to proof to a computer that **i** authorize a certain action, and that nobody with a 5$ wrench is convincing me it's a good idea</span></div><div class="line" id="215338"><span class="nick" style="color:#80b1d3"><a href="#215338" label="[21:53:38]">&lt;bauen1&gt;</a></span><span class="message">so many modern problems that certain tech startups try to solve fall into the &quot;not really a technology problem&quot; section</span></div><div class="line" id="221529"><span class="nick" style="color:#d9d9d9"><a href="#221529" label="[22:15:29]">&lt;vagrantc&gt;</a></span><span class="message">janneke: is mes-mescc still expected to only work on i386? (as opposed to gcc-mescc)</span></div><div class="line" id="223012"><span class="nick" style="color:#6b8072"><a href="#223012" label="[22:30:12]">&lt;janneke&gt;</a></span><span class="message">vagrantc: no, mes-0.23 runs on armhf-linux too</span></div><div class="line" id="223106"><span class="nick" style="color:#6b8072"><a href="#223106" label="[22:31:06]">&lt;janneke&gt;</a></span><span class="message">we've built the bootstrap until glibc-2.2.5, even</span></div><div class="line" id="223827"><span class="nick" style="color:#d9d9d9"><a href="#223827" label="[22:38:27]">&lt;vagrantc&gt;</a></span><span class="message">janneke: on the debian packages i think it still only builds gcc-mescc on everything other than i386</span></div><div class="line" id="223839"><span class="nick" style="color:#d9d9d9"><a href="#223839" label="[22:38:39]">&lt;vagrantc&gt;</a></span><span class="message">janneke: how about x86_64 mes-mescc ?</span></div><div class="line" id="224010"><span class="nick" style="color:#d9d9d9"><a href="#224010" label="[22:40:10]">&lt;vagrantc&gt;</a></span><span class="message">janneke: but that's great news</span></div><div class="line" id="224033"><span class="nick" style="color:#6b8072"><a href="#224033" label="[22:40:33]">&lt;janneke&gt;</a></span><span class="message">vagrantc: i'm not sure about the stages below mes, wrt x86_64-mes-mescc</span></div><div class="line" id="224040"><span class="nick" style="color:#d9d9d9"><a href="#224040" label="[22:40:40]">&lt;vagrantc&gt;</a></span><span class="message">janneke: i'll just try enabling it everywhere and seeing if it works :)</span></div><div class="line" id="224116"><span class="nick" style="color:#6b8072"><a href="#224116" label="[22:41:16]">&lt;janneke&gt;</a></span><span class="message">but last i checked, we failed to produce a good-enough working tinycc on x86_64</span></div><div class="line" id="224116"><span class="nick" style="color:#d9d9d9"><a href="#224116" label="[22:41:16]">&lt;vagrantc&gt;</a></span><span class="message">janneke: also wondering how we can reliably communicate the new hashes :)</span></div><div class="line" id="224137"><span class="nick" style="color:#6b8072"><a href="#224137" label="[22:41:37]">&lt;janneke&gt;</a></span><span class="message">vagrantc: yeah, that would be nice</span></div><div class="line" id="224224"><span class="nick" style="color:#6b8072"><a href="#224224" label="[22:42:24]">&lt;janneke&gt;</a></span><span class="message">an as i386 works fine for x86_64, no-one seems to have any priority on fixing x86_64, even if it would be nice if it worked...</span></div><div class="line" id="224240"><span class="nick" style="color:#d9d9d9"><a href="#224240" label="[22:42:40]">&lt;vagrantc&gt;</a></span><span class="message">reasonable</span></div><br /></div></body></html>