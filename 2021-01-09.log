<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-01-09.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="004941"><span class="nick" style="color:#8dd3c7"><a href="#004941" label="[00:49:41]">&lt;OriansJ&gt;</a></span><span class="message">fossy: if you were planning on doing it, go for it; I'll find a different thing to work on tonight.</span></div><div class="line" id="005421"><span class="nick" style="color:#8dd3c7"><a href="#005421" label="[00:54:21]">&lt;OriansJ&gt;</a></span><span class="message">rain1: you can always check if S can be built by M2-Planet using the new M2libc</span></div><div class="line" id="005540"><span class="nick" style="color:#8dd3c7"><a href="#005540" label="[00:55:40]">&lt;OriansJ&gt;</a></span><span class="message">yt_: nice; merged</span></div><div class="line" id="005622"><span class="nick" style="color:#2e2a4a"><a href="#005622" label="[00:56:22]">&lt;yt_&gt;</a></span><span class="message"> OriansJ: awesome, thanks!</span></div><div class="line" id="005638"><span class="nick" style="color:#2e2a4a"><a href="#005638" label="[00:56:38]">&lt;yt_&gt;</a></span><span class="message">OriansJ: I've just got the first bit of macro expansion working XD</span></div><div class="line" id="010100"><span class="nick" style="color:#8dd3c7"><a href="#010100" label="[01:01:00]">&lt;OriansJ&gt;</a></span><span class="message">yt_: well you got enough working to do a proper C stdio.h ^_^</span></div><div class="line" id="010218"><span class="nick" style="color:#8dd3c7"><a href="#010218" label="[01:02:18]">&lt;OriansJ&gt;</a></span><span class="message">now just to export the architecture flag as a variable and you can do architecture specific behavior</span></div><div class="line" id="010301"><span class="nick" style="color:#2e2a4a"><a href="#010301" label="[01:03:01]">&lt;yt_&gt;</a></span><span class="message">OriansJ: hmm, not sure what one needs for a stdio.h?  but sure, nearly there :p</span></div><div class="line" id="010447"><span class="nick" style="color:#8dd3c7"><a href="#010447" label="[01:04:47]">&lt;OriansJ&gt;</a></span><span class="message">wel I got most of the non-wide char primitives already done: <a rel="nofollow" href="https://github.com/oriansj/M2libc/blob/main/stdio.c">https://github.com/oriansj/M2libc/blob/main/stdio.c</a> </span></div><div class="line" id="010526"><span class="nick" style="color:#8dd3c7"><a href="#010526" label="[01:05:26]">&lt;OriansJ&gt;</a></span><span class="message">and Working with M2-Planet</span></div><div class="line" id="010545"><span class="nick" style="color:#2e2a4a"><a href="#010545" label="[01:05:45]">&lt;yt_&gt;</a></span><span class="message">fantastic!</span></div><div class="line" id="010703"><span class="nick" style="color:#2e2a4a"><a href="#010703" label="[01:07:03]">&lt;yt_&gt;</a></span><span class="message">as long as you don't do #define BAR 1 #define FOO BAR it should mostly work.  I haven't figured out how I'm going to do the rescanning</span></div><div class="line" id="010806"><span class="nick" style="color:#8dd3c7"><a href="#010806" label="[01:08:06]">&lt;OriansJ&gt;</a></span><span class="message">Just need to get the AArch64, armv7l and AMD64 to get to matching levels in unistd.h and fcntl.h as x86 but that just requires a block of effort</span></div><div class="line" id="010847"><span class="nick" style="color:#2e2a4a"><a href="#010847" label="[01:08:47]">&lt;yt_&gt;</a></span><span class="message">heh, I'm going to have to skip CONSTANT lines now. this doesn't parse for some reason: CONSTANT 1 1 XD</span></div><div class="line" id="010848"><span class="nick" style="color:#8dd3c7"><a href="#010848" label="[01:08:48]">&lt;OriansJ&gt;</a></span><span class="message">yt_: we only need to support the features we want to use</span></div><div class="line" id="010932"><span class="nick" style="color:#8dd3c7"><a href="#010932" label="[01:09:32]">&lt;OriansJ&gt;</a></span><span class="message">neither does #define EOF -1</span></div><div class="line" id="010956"><span class="nick" style="color:#2e2a4a"><a href="#010956" label="[01:09:56]">&lt;yt_&gt;</a></span><span class="message">#define EOF -1 doesn't work?</span></div><div class="line" id="011014"><span class="nick" style="color:#8dd3c7"><a href="#011014" label="[01:10:14]">&lt;OriansJ&gt;</a></span><span class="message">give it a try if you don't believe me</span></div><div class="line" id="011040"><span class="nick" style="color:#2e2a4a"><a href="#011040" label="[01:10:40]">&lt;yt_&gt;</a></span><span class="message">on it, on it :) just checking if that's what you were saying</span></div><div class="line" id="011103"><span class="nick" style="color:#8dd3c7"><a href="#011103" label="[01:11:03]">&lt;OriansJ&gt;</a></span><span class="message">you get: Unknown type 1</span></div><div class="line" id="011123"><span class="nick" style="color:#8dd3c7"><a href="#011123" label="[01:11:23]">&lt;OriansJ&gt;</a></span><span class="message">but that is just because CONSTANT never was taught how to handle it</span></div><div class="line" id="011221"><span class="nick" style="color:#8dd3c7"><a href="#011221" label="[01:12:21]">&lt;OriansJ&gt;</a></span><span class="message">so I always punted with 0xFFFFFFFF</span></div><div class="line" id="011303"><span class="nick" style="color:#8dd3c7"><a href="#011303" label="[01:13:03]">&lt;OriansJ&gt;</a></span><span class="message">I could have used 0xDEADBEEF for EOF and it would have worked</span></div><div class="line" id="011344"><span class="nick" style="color:#2e2a4a"><a href="#011344" label="[01:13:44]">&lt;yt_&gt;</a></span><span class="message">ah, I see now, that should be solved with my next patch :-)</span></div><div class="line" id="011346"><span class="nick" style="color:#8dd3c7"><a href="#011346" label="[01:13:46]">&lt;OriansJ&gt;</a></span><span class="message">(as long as the READ and EOF agreed on what EOF was)</span></div><div class="line" id="011612"><span class="nick" style="color:#8dd3c7"><a href="#011612" label="[01:16:12]">&lt;OriansJ&gt;</a></span><span class="message">at this rate, I'll just need to add bitslices to M2-Planet to be able to compile TCC ( or just rip them out of janneke's TCC fork )</span></div><div class="line" id="011646"><span class="nick" style="color:#2e2a4a"><a href="#011646" label="[01:16:46]">&lt;yt_&gt;</a></span><span class="message">OriansJ: #define FOO -1 uncovered a little bug where I was only adding the last token into the expansion; fixed now: <a rel="nofollow" href="https://paste.debian.net/1180279/">https://paste.debian.net/1180279/</a> </span></div><div class="line" id="011841"><span class="nick" style="color:#8dd3c7"><a href="#011841" label="[01:18:41]">&lt;OriansJ&gt;</a></span><span class="message">nice</span></div><div class="line" id="011853"><span class="nick" style="color:#2e2a4a"><a href="#011853" label="[01:18:53]">&lt;yt_&gt;</a></span><span class="message">OriansJ: won't we need #include to build TCC?</span></div><div class="line" id="011903"><span class="nick" style="color:#8dd3c7"><a href="#011903" label="[01:19:03]">&lt;OriansJ&gt;</a></span><span class="message">yt_: not at all</span></div><div class="line" id="011923"><span class="nick" style="color:#8dd3c7"><a href="#011923" label="[01:19:23]">&lt;OriansJ&gt;</a></span><span class="message">in fact it'll only get in the way long term</span></div><div class="line" id="011957"><span class="nick" style="color:#8dd3c7"><a href="#011957" label="[01:19:57]">&lt;OriansJ&gt;</a></span><span class="message">#include &quot;foo.h&quot; vs -f foo.h</span></div><div class="line" id="012105"><span class="nick" style="color:#8dd3c7"><a href="#012105" label="[01:21:05]">&lt;OriansJ&gt;</a></span><span class="message">I can concat a list of files into a single file and compile it the same on bare metal as I can on an OS</span></div><div class="line" id="012111"><span class="nick" style="color:#2e2a4a"><a href="#012111" label="[01:21:11]">&lt;yt_&gt;</a></span><span class="message">ah of course, just needs carefully written M2-Planet invocations</span></div><div class="line" id="012202"><span class="nick" style="color:#8dd3c7"><a href="#012202" label="[01:22:02]">&lt;OriansJ&gt;</a></span><span class="message">with an eye towards the future, where we are going to have to build TCC on bare metal to bootstrap a proper Kernel</span></div><div class="line" id="012251"><span class="nick" style="color:#2e2a4a"><a href="#012251" label="[01:22:51]">&lt;yt_&gt;</a></span><span class="message">now that'll be fun</span></div><div class="line" id="012334"><span class="nick" style="color:#2e2a4a"><a href="#012334" label="[01:23:34]">&lt;yt_&gt;</a></span><span class="message">getting M2-Planet to the point that we can jump straight to tcc would simplify the bootstrap graph a lot</span></div><div class="line" id="012404"><span class="nick" style="color:#6b8072"><a href="#012404" label="[01:24:04]">&lt;stikonas&gt;</a></span><span class="message">well, skips one step (mes/mescc)</span></div><div class="line" id="012503"><span class="nick" style="color:#2e2a4a"><a href="#012503" label="[01:25:03]">&lt;yt_&gt;</a></span><span class="message">stikonas: we're not there yet!</span></div><div class="line" id="012512"><span class="nick" style="color:#6b8072"><a href="#012512" label="[01:25:12]">&lt;stikonas&gt;</a></span><span class="message">yeah, I know...</span></div><div class="line" id="012520"><span class="nick" style="color:#2e2a4a"><a href="#012520" label="[01:25:20]">&lt;yt_&gt;</a></span><span class="message">ah sorry, misread what you said</span></div><div class="line" id="012544"><span class="nick" style="color:#6b8072"><a href="#012544" label="[01:25:44]">&lt;stikonas&gt;</a></span><span class="message">I probably wasn't very clear above... Anyway, no worries</span></div><div class="line" id="013655"><span class="nick" style="color:#2e2a4a"><a href="#013655" label="[01:36:55]">&lt;yt_&gt;</a></span><span class="message">ho hum, some of my pointer mangling is still a little bit off; but that'll do for tonight. should be able to make some more progress over the weekend</span></div><div class="line" id="020238"><span class="nick" style="color:#80b1d3"><a href="#020238" label="[02:02:38]">&lt;Hagfish&gt;</a></span><span class="message">building TCC on bare metal will be so epic</span></div><div class="line" id="020551"><span class="nick" style="color:#6b8072"><a href="#020551" label="[02:05:51]">&lt;stikonas&gt;</a></span><span class="message">yeah, after that it's clear, tccboot linux and you are done...</span></div><div class="line" id="020650"><span class="nick" style="color:#8dd3c7"><a href="#020650" label="[02:06:50]">&lt;OriansJ&gt;</a></span><span class="message">It would be much easier if we went the M3 route to bootstrapping GCC and a POSIX directly</span></div><div class="line" id="020709"><span class="nick" style="color:#8dd3c7"><a href="#020709" label="[02:07:09]">&lt;OriansJ&gt;</a></span><span class="message">probably Linux</span></div><div class="line" id="020923"><span class="nick" style="color:#8dd3c7"><a href="#020923" label="[02:09:23]">&lt;OriansJ&gt;</a></span><span class="message">but that requires me to build an Assembler with matching syntax to GAS that outputs ELF files that need to be linked by a linker before it becomes a working binary.</span></div><div class="line" id="021111"><span class="nick" style="color:#8dd3c7"><a href="#021111" label="[02:11:11]">&lt;OriansJ&gt;</a></span><span class="message">So much work to do, never enough time</span></div><div class="line" id="021256"><span class="nick" style="color:#8dd3c7"><a href="#021256" label="[02:12:56]">&lt;OriansJ&gt;</a></span><span class="message">perhaps, I am just making things too hard for myself by going for the gold but what is one more &quot;impossible&quot; project after so many?</span></div><div class="line" id="021539"><span class="nick" style="color:#80b1d3"><a href="#021539" label="[02:15:39]">&lt;Hagfish&gt;</a></span><span class="message">heh, indeed</span></div><div class="line" id="022144"><span class="nick" style="color:#80b1d3"><a href="#022144" label="[02:21:44]">&lt;Hagfish&gt;</a></span><span class="message">all things being equal, i think it would be best to optimise the project for &quot;contributability&quot; (or a word which means something similar)</span></div><div class="line" id="022207"><span class="nick" style="color:#80b1d3"><a href="#022207" label="[02:22:07]">&lt;Hagfish&gt;</a></span><span class="message">you know the old saying about &quot;if you want the correct answer to a question on the internet, then give the wrong answer and wait for someone to correct you&quot; :)</span></div><div class="line" id="022350"><span class="nick" style="color:#80b1d3"><a href="#022350" label="[02:23:50]">&lt;Hagfish&gt;</a></span><span class="message">(obviously security / auditability should be one of the highest goals, but making the steps easy to understand will of course making it easier for new contributors to get up to speed)</span></div><div class="line" id="022456"><span class="nick" style="color:#80b1d3"><a href="#022456" label="[02:24:56]">&lt;Hagfish&gt;</a></span><span class="message">so i think it's better to put something out there and have it catch people's interest, and then when they look at it make them think &quot;huh, i could do better than that!&quot;, and then accept their patches :)</span></div><div class="line" id="022528"><span class="nick" style="color:#8dd3c7"><a href="#022528" label="[02:25:28]">&lt;OriansJ&gt;</a></span><span class="message">sounds familiar ^_^</span></div><div class="line" id="022540"><span class="nick" style="color:#80b1d3"><a href="#022540" label="[02:25:40]">&lt;Hagfish&gt;</a></span><span class="message">but of course the other thing to optimise for is the enjoyment of the people already doing the hard work, so i wouldn't dare suggest that should be compromised on</span></div><div class="line" id="024049"><span class="nick" style="color:#6d2462"><a href="#024049" label="[02:40:49]">*</a></span><span class="message">deesix wonders about #include &quot;foo.h&quot; vs -f foo.h</span></div><div class="line" id="024200"><span class="nick" style="color:#234e69"><a href="#024200" label="[02:42:00]">&lt;deesix&gt;</a></span><span class="message">static objects are local to the translation unit, I think</span></div><div class="line" id="024406"><span class="nick" style="color:#234e69"><a href="#024406" label="[02:44:06]">&lt;deesix&gt;</a></span><span class="message">So if a file is included several times, just one -f is not the same, isn't it?</span></div><div class="line" id="024506"><span class="nick" style="color:#6d2462"><a href="#024506" label="[02:45:06]">*</a></span><span class="message">deesix wait for someone to correct this :P</span></div><div class="line" id="024654"><span class="nick" style="color:#234e69"><a href="#024654" label="[02:46:54]">&lt;deesix&gt;</a></span><span class="message">*waits</span></div><div class="line" id="024855"><span class="nick" style="color:#234e69"><a href="#024855" label="[02:48:55]">&lt;deesix&gt;</a></span><span class="message">In other words, I think concatenating or -f'ing is not a general solution.</span></div><div class="line" id="025520"><span class="nick" style="color:#234e69"><a href="#025520" label="[02:55:20]">&lt;deesix&gt;</a></span><span class="message">Well, we're only doing one TU right now, so that would be the real problem in those cases.</span></div><div class="line" id="030034"><span class="nick" style="color:#234e69"><a href="#030034" label="[03:00:34]">&lt;deesix&gt;</a></span><span class="message">Cases like both a and b including c, and me thinking on just -f a -f b -f c.</span></div><div class="line" id="030044"><span class="nick" style="color:#6c3d55"><a href="#030044" label="[03:00:44]">&lt;malina&gt;</a></span><span class="message">&lt;OriansJ&gt; So much work to do, never enough time &lt;-- Amen</span></div><div class="line" id="030133"><span class="nick" style="color:#234e69"><a href="#030133" label="[03:01:33]">&lt;deesix&gt;</a></span><span class="message">... where c has some static object.</span></div><div class="line" id="052941"><span class="nick" style="color:#80b1d3"><a href="#052941" label="[05:29:41]">&lt;Hagfish&gt;</a></span><span class="message">&quot;Google Pulls Parler as Apple Threatens the Same in Wake of Capitol Riot&quot;</span></div><div class="line" id="053021"><span class="nick" style="color:#80b1d3"><a href="#053021" label="[05:30:21]">&lt;Hagfish&gt;</a></span><span class="message">well, as long as the Duopoly only use their powers to ban apps that have speech i dislike, then this is fine and doesn't set any dangerous precedents</span></div><div class="line" id="054810"><span class="nick" style="color:#d9d9d9"><a href="#054810" label="[05:48:10]">&lt;lfam&gt;</a></span><span class="message">It’s a little surreal to see the traditional anti-censorship discourse newly applied to the most powerful man in the world right after he incited a mob that attacked a rival branch of government to overturn a free and fair election.</span></div><div class="line" id="054814"><span class="nick" style="color:#d9d9d9"><a href="#054814" label="[05:48:14]">&lt;lfam&gt;</a></span><span class="message">-quote</span></div><div class="line" id="065400"><span class="nick" style="color:#bc80bd"><a href="#065400" label="[06:54:00]">&lt;xentrac&gt;</a></span><span class="message">it's surreal that some people have ethical principles they apply consistently?  whoever wrote that needs to get out more :)</span></div><div class="line" id="074341"><span class="nick" style="color:#3c5b35"><a href="#074341" label="[07:43:41]">&lt;fossy&gt;</a></span><span class="message">fixed escaping in kaem, stikonas[m]</span></div><div class="line" id="092429"><span class="nick" style="color:#3c5b35"><a href="#092429" label="[09:24:29]">&lt;fossy&gt;</a></span><span class="message">janneke: is there a change that at some point we might be able to get an updated tinycc that allows REBUILD_LIBC to happen against master mes?</span></div><div class="line" id="093452"><span class="nick" style="color:#af8d2f"><a href="#093452" label="[09:34:52]">&lt;janneke&gt;</a></span><span class="message">fossy: maybe we should remove the REBUILD_LIBC flag, it should always be true, be rebuilt</span></div><div class="line" id="100942"><span class="nick" style="color:#af8d2f"><a href="#100942" label="[10:09:42]">&lt;janneke&gt;</a></span><span class="message">mes' wip branch will be merged when wip-arm-bootstrap is ready</span></div><div class="line" id="101009"><span class="nick" style="color:#af8d2f"><a href="#101009" label="[10:10:09]">&lt;janneke&gt;</a></span><span class="message">mes' wip-m2 branch will be merged after that, when wip-full-source-bootstrap is ready</span></div><div class="line" id="102045"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado</span></div><div class="line" id="111624"><span class="nick" style="color:#3c5b35"><a href="#111624" label="[11:16:24]">&lt;fossy&gt;</a></span><span class="message">cool</span></div><div class="line" id="112229"><span class="nick" style="color:#af8d2f"><a href="#112229" label="[11:22:29]">&lt;janneke&gt;</a></span><span class="message">i'm hoping m2-planet gains global, local char foo[3]; static char foo[3]; support in the meantime</span></div><div class="line" id="112238"><span class="nick" style="color:#af8d2f"><a href="#112238" label="[11:22:38]">&lt;janneke&gt;</a></span><span class="message">esp. seeing what yt_ is all doing</span></div><div class="line" id="112303"><span class="nick" style="color:#af8d2f"><a href="#112303" label="[11:23:03]">&lt;janneke&gt;</a></span><span class="message">that would allow us to remove some of the ugliest m2-planet adaptions to wip-m2</span></div><div class="line" id="114029"><span class="nick" style="color:#2e2a4a"><a href="#114029" label="[11:40:29]">&lt;yt_&gt;</a></span><span class="message">janneke: if you don't mind writing a few small test cases, I can see what I can do</span></div><div class="line" id="114740"><span class="nick" style="color:#389600"><a href="#114740" label="[11:47:40]">&lt;stikonas[m]&gt;</a></span><span class="message">fossy: thanks I'll take a look</span></div><div class="line" id="121833"><span class="nick" style="color:#3c5b35"><a href="#121833" label="[12:18:33]">&lt;fossy&gt;</a></span><span class="message">stikonas don't worry too much if you can't get it working, but escaping most certinaly should work now</span></div><div class="line" id="121957"><span class="nick" style="color:#8dd3c7"><a href="#121957" label="[12:19:57]">&lt;stikonas_&gt;</a></span><span class="message">well, I just need to update submodule... to test</span></div><div class="line" id="122117"><span class="nick" style="color:#8dd3c7"><a href="#122117" label="[12:21:17]">&lt;stikonas_&gt;</a></span><span class="message">fossy: how is tcc :) ?</span></div><div class="line" id="122133"><span class="nick" style="color:#8dd3c7"><a href="#122133" label="[12:21:33]">&lt;stikonas_&gt;</a></span><span class="message">I guess it will be simplified too once you can use this escaping</span></div><div class="line" id="122207"><span class="nick" style="color:#3c5b35"><a href="#122207" label="[12:22:07]">&lt;fossy&gt;</a></span><span class="message">stikonas_: tcc is coming along -- finished the rebuilding libc bit now (was a bit of a pain as bootstrap.sh's instructions didn't workk ootc)</span></div><div class="line" id="122209"><span class="nick" style="color:#3c5b35"><a href="#122209" label="[12:22:09]">&lt;fossy&gt;</a></span><span class="message">ootb</span></div><div class="line" id="122217"><span class="nick" style="color:#3c5b35"><a href="#122217" label="[12:22:17]">&lt;fossy&gt;</a></span><span class="message">now i just need to reach the fixed point</span></div><div class="line" id="122221"><span class="nick" style="color:#3c5b35"><a href="#122221" label="[12:22:21]">&lt;fossy&gt;</a></span><span class="message">then tcc is done</span></div><div class="line" id="122223"><span class="nick" style="color:#3c5b35"><a href="#122223" label="[12:22:23]">&lt;fossy&gt;</a></span><span class="message">oh</span></div><div class="line" id="122225"><span class="nick" style="color:#3c5b35"><a href="#122225" label="[12:22:25]">&lt;fossy&gt;</a></span><span class="message">but then 0.9.27</span></div><div class="line" id="122236"><span class="nick" style="color:#3c5b35"><a href="#122236" label="[12:22:36]">&lt;fossy&gt;</a></span><span class="message">well the 0.9.26 is done, then just compile 0.9.27, done</span></div><div class="line" id="122335"><span class="nick" style="color:#3c5b35"><a href="#122335" label="[12:23:35]">&lt;fossy&gt;</a></span><span class="message">stikonas_: if you are looking for something to do (no pressure at all), you could update blynn-compiler bc pder has kindly removed the need for shell redirection</span></div><div class="line" id="122356"><span class="nick" style="color:#3c5b35"><a href="#122356" label="[12:23:56]">&lt;fossy&gt;</a></span><span class="message">(only if you are bored, i will do it after tcc if you dont)</span></div><div class="line" id="122420"><span class="nick">***</span><span class="message notice">stikonas_ is now known as stikonas</span></div><div class="line" id="122431"><span class="nick" style="color:#6b8072"><a href="#122431" label="[12:24:31]">&lt;stikonas&gt;</a></span><span class="message">fossy: ok, just tested kaem escaping, seems to work :)</span></div><div class="line" id="122506"><span class="nick" style="color:#6b8072"><a href="#122506" label="[12:25:06]">&lt;stikonas&gt;</a></span><span class="message">yeah, I can check that out... Breakfast first though</span></div><div class="line" id="122517"><span class="nick" style="color:#6b8072"><a href="#122517" label="[12:25:17]">&lt;stikonas&gt;</a></span><span class="message">it's already a bit late for breakfast here...</span></div><div class="line" id="123925"><span class="nick" style="color:#6d2462"><a href="#123925" label="[12:39:25]">*</a></span><span class="message">janneke pushes scaffold/{global,local,static-local}-array.{c,kaem} to wip-m2, for yt_</span></div><div class="line" id="123955"><span class="nick" style="color:#af8d2f"><a href="#123955" label="[12:39:55]">&lt;janneke&gt;</a></span><span class="message">hmm, it appears that they're gone?</span></div><div class="line" id="125813"><span class="nick" style="color:#6b8072"><a href="#125813" label="[12:58:13]">&lt;stikonas&gt;</a></span><span class="message">fossy: ok, done with precisely</span></div><div class="line" id="125853"><span class="nick" style="color:#6b8072"><a href="#125853" label="[12:58:53]">&lt;stikonas&gt;</a></span><span class="message">well, it's not used for anything yet...</span></div><div class="line" id="140037"><span class="nick" style="color:#6b8072"><a href="#140037" label="[14:00:37]">&lt;stikonas&gt;</a></span><span class="message">OriansJ: maybe worth updating mescc-tools in mescc-tools-seed to latest revision?</span></div><div class="line" id="140101"><span class="nick" style="color:#6b8072"><a href="#140101" label="[14:01:01]">&lt;stikonas&gt;</a></span><span class="message">kaem escaping seems to work much better now</span></div><div class="line" id="140211"><span class="nick" style="color:#8dd3c7"><a href="#140211" label="[14:02:11]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: well the one case where #include would be different than -f is if the #include is in the middle of code. Which is just a really bad code smell.</span></div><div class="line" id="140243"><span class="nick" style="color:#8dd3c7"><a href="#140243" label="[14:02:43]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: I probably should update both M2-Planet and mescc-tools in mescc-tools-seed</span></div><div class="line" id="140310"><span class="nick" style="color:#6b8072"><a href="#140310" label="[14:03:10]">&lt;stikonas&gt;</a></span><span class="message">yeah, M2-Planet also had some updates...</span></div><div class="line" id="140315"><span class="nick" style="color:#8dd3c7"><a href="#140315" label="[14:03:15]">&lt;OriansJ&gt;</a></span><span class="message">Then try to find some time to get M2libc ready for integration</span></div><div class="line" id="140412"><span class="nick" style="color:#2e2a4a"><a href="#140412" label="[14:04:12]">&lt;yt_&gt;</a></span><span class="message">janneke: thanks! those help a lot to know exactly what you need.  I might take a little break from the preprocessor and get some of that in.  The global array doesn't look too complicated, so might start there.</span></div><div class="line" id="140458"><span class="nick" style="color:#af8d2f"><a href="#140458" label="[14:04:58]">&lt;janneke&gt;</a></span><span class="message">yt_: lovely, thanks</span></div><div class="line" id="143009"><span class="nick" style="color:#8dd3c7"><a href="#143009" label="[14:30:09]">&lt;OriansJ&gt;</a></span><span class="message">janneke: thank you for reminding me I need to really start adding the catches for --bootstrap-mode</span></div><div class="line" id="143551"><span class="nick" style="color:#2e2a4a"><a href="#143551" label="[14:35:51]">&lt;yt_&gt;</a></span><span class="message">OriansJ: I'm just having a look at how to handle CONSTANT when the preprocessor is enabled; they end up conflicting badly if the #define is before the // CONSTANT</span></div><div class="line" id="143630"><span class="nick" style="color:#2e2a4a"><a href="#143630" label="[14:36:30]">&lt;yt_&gt;</a></span><span class="message">my current thinking is that it's probably cleanest to just ignore the whole CONSTANT line if bootstrap mode isn't enabled</span></div><div class="line" id="143738"><span class="nick" style="color:#2e2a4a"><a href="#143738" label="[14:37:38]">&lt;yt_&gt;</a></span><span class="message">I *think* it's then still possible to write code that compiles in M2-Planet with and without bootstrap mode, as well as GCC</span></div><div class="line" id="143939"><span class="nick" style="color:#2e2a4a"><a href="#143939" label="[14:39:39]">&lt;yt_&gt;</a></span><span class="message">ah no I can't just ignore the line, because the parser doesn't see newline tokens, bah</span></div><div class="line" id="144010"><span class="nick" style="color:#2e2a4a"><a href="#144010" label="[14:40:10]">&lt;yt_&gt;</a></span><span class="message">new plan. ignore // lines in the lexer when not in bootstrap mode</span></div><div class="line" id="144050"><span class="nick" style="color:#8dd3c7"><a href="#144050" label="[14:40:50]">&lt;OriansJ&gt;</a></span><span class="message">yt_: you'll instantly run into the pointer arithmetic problem if you do</span></div><div class="line" id="144148"><span class="nick" style="color:#2e2a4a"><a href="#144148" label="[14:41:48]">&lt;yt_&gt;</a></span><span class="message">OriansJ: yep, but I have #if to deal with it :-)</span></div><div class="line" id="144155"><span class="nick" style="color:#8dd3c7"><a href="#144155" label="[14:41:55]">&lt;OriansJ&gt;</a></span><span class="message">and the resolution for CONSTANT EOF 0xFFFFFFFF \n CONSTANT EOF 0xDEADBEEF is alway choose the last defined value</span></div><div class="line" id="144248"><span class="nick" style="color:#2e2a4a"><a href="#144248" label="[14:42:48]">&lt;yt_&gt;</a></span><span class="message">OriansJ: that resolution is the same for #define at the moment</span></div><div class="line" id="144431"><span class="nick" style="color:#2e2a4a"><a href="#144431" label="[14:44:31]">&lt;yt_&gt;</a></span><span class="message">but yeah, I do worry that this will end up being too painful</span></div><div class="line" id="144457"><span class="nick" style="color:#8dd3c7"><a href="#144457" label="[14:44:57]">&lt;OriansJ&gt;</a></span><span class="message">let us take a step back for a second.</span></div><div class="line" id="144516"><span class="nick" style="color:#8dd3c7"><a href="#144516" label="[14:45:16]">&lt;OriansJ&gt;</a></span><span class="message">first M2-Planet doesn't use *ANY* pointer arithmetic</span></div><div class="line" id="144541"><span class="nick" style="color:#8dd3c7"><a href="#144541" label="[14:45:41]">&lt;OriansJ&gt;</a></span><span class="message">So dropping of // CONSTANT lines will not be a problem for it</span></div><div class="line" id="144654"><span class="nick" style="color:#8dd3c7"><a href="#144654" label="[14:46:54]">&lt;OriansJ&gt;</a></span><span class="message">--bootstrap-mode will preserve the old behavior for working programs until we fix pointer arithmetic and they can drop the // CONSTANT lines</span></div><div class="line" id="144841"><span class="nick" style="color:#8dd3c7"><a href="#144841" label="[14:48:41]">&lt;OriansJ&gt;</a></span><span class="message">it would make M2-Planet more C compliant and people wouldn't be tripped up by their line comments becoming working code</span></div><div class="line" id="144946"><span class="nick" style="color:#8dd3c7"><a href="#144946" label="[14:49:46]">&lt;OriansJ&gt;</a></span><span class="message">So it is a very good idea going forward</span></div><div class="line" id="145021"><span class="nick" style="color:#2e2a4a"><a href="#145021" label="[14:50:21]">&lt;yt_&gt;</a></span><span class="message">Okay that makes sense</span></div><div class="line" id="145030"><span class="nick" style="color:#8dd3c7"><a href="#145030" label="[14:50:30]">&lt;OriansJ&gt;</a></span><span class="message">and if we ensure --bootstrap-mode behavior is preserved; it will be a net step in the right direction.</span></div><div class="line" id="145043"><span class="nick" style="color:#2e2a4a"><a href="#145043" label="[14:50:43]">&lt;yt_&gt;</a></span><span class="message">and you make a good point that if --bootstrap-mode actually disables the preprocessor, existing code (including the tests) will just keep working</span></div><div class="line" id="145349"><span class="nick" style="color:#8dd3c7"><a href="#145349" label="[14:53:49]">&lt;OriansJ&gt;</a></span><span class="message">it'll make cc_reader.c a little uglier in regards to // but it is a small price to pay</span></div><div class="line" id="150017"><span class="nick" style="color:#2e2a4a"><a href="#150017" label="[15:00:17]">&lt;yt_&gt;</a></span><span class="message">OriansJ: I'll include a properly working --bootstrap-mode (for # and // lines) with my next PR.</span></div><div class="line" id="150221"><span class="nick" style="color:#2e2a4a"><a href="#150221" label="[15:02:21]">&lt;yt_&gt;</a></span><span class="message">OriansJ: should all the tests run with --bootstrap-mode? Or should tests run both with --bootstrap-mode and without --bootstrap-mode (when that makes sense)?</span></div><div class="line" id="152908"><span class="nick" style="color:#8dd3c7"><a href="#152908" label="[15:29:08]">&lt;OriansJ&gt;</a></span><span class="message">yt_: well let us keep things simple for a minute and leave what has --bootstrap-mode as is and as new tests get added, they can opt for with or without depending on what they are testing.</span></div><div class="line" id="153426"><span class="nick" style="color:#8dd3c7"><a href="#153426" label="[15:34:26]">&lt;OriansJ&gt;</a></span><span class="message">yt_: oh and thanks to your recent work we can pull the // /* hack out of mes-m2</span></div><div class="line" id="163519"><span class="nick" style="color:#8dd3c7"><a href="#163519" label="[16:35:19]">&lt;OriansJ&gt;</a></span><span class="message">looks like there is a regression in mes_macro.c; guess I got some hunting to do</span></div><div class="line" id="164404"><span class="nick" style="color:#2e2a4a"><a href="#164404" label="[16:44:04]">&lt;yt_&gt;</a></span><span class="message">OriansJ: uh oh! let me know if I can help hunt it down</span></div><div class="line" id="164437"><span class="nick" style="color:#8dd3c7"><a href="#164437" label="[16:44:37]">&lt;OriansJ&gt;</a></span><span class="message">yt_: I don't think it is caused by M2-Planet</span></div><div class="line" id="164520"><span class="nick" style="color:#8dd3c7"><a href="#164520" label="[16:45:20]">&lt;OriansJ&gt;</a></span><span class="message">as by checking out an earlier commit or just commenting out the macro expand phase in the REPL gets it back to operational status</span></div><div class="line" id="164638"><span class="nick" style="color:#2e2a4a"><a href="#164638" label="[16:46:38]">&lt;yt_&gt;</a></span><span class="message">OriansJ: ah! I misread that as cc_macro.c :-)</span></div><div class="line" id="164729"><span class="nick" style="color:#8dd3c7"><a href="#164729" label="[16:47:29]">&lt;OriansJ&gt;</a></span><span class="message">too much macro these days :-p</span></div><div class="line" id="165853"><span class="nick" style="color:#2e2a4a"><a href="#165853" label="[16:58:53]">&lt;yt_&gt;</a></span><span class="message">hmm if --bootstrap-mode affects the lexer (for // and # handling) the --bootstrap-mode argument needs to come before any -f arguments</span></div><div class="line" id="165920"><span class="nick" style="color:#2e2a4a"><a href="#165920" label="[16:59:20]">&lt;yt_&gt;</a></span><span class="message">OriansJ: this doesn't feel great to me</span></div><div class="line" id="170030"><span class="nick" style="color:#8dd3c7"><a href="#170030" label="[17:00:30]">&lt;OriansJ&gt;</a></span><span class="message">well we could have a function that does the // handling before preprocessing</span></div><div class="line" id="170040"><span class="nick" style="color:#8dd3c7"><a href="#170040" label="[17:00:40]">&lt;OriansJ&gt;</a></span><span class="message">and just tokenize like usual</span></div><div class="line" id="170108"><span class="nick" style="color:#2e2a4a"><a href="#170108" label="[17:01:08]">&lt;yt_&gt;</a></span><span class="message">sure, needs // adding as a token though, currently it just gets eaten</span></div><div class="line" id="170158"><span class="nick" style="color:#8dd3c7"><a href="#170158" label="[17:01:58]">&lt;OriansJ&gt;</a></span><span class="message">sigh. why not</span></div><div class="line" id="170302"><span class="nick" style="color:#2e2a4a"><a href="#170302" label="[17:03:02]">&lt;yt_&gt;</a></span><span class="message">ok, I'll do that rather than fixing up a bunch of tests</span></div><div class="line" id="170526"><span class="nick" style="color:#8dd3c7"><a href="#170526" label="[17:05:26]">&lt;OriansJ&gt;</a></span><span class="message">Nothing like previous design decisions to bite me in the ass again...</span></div><div class="line" id="170613"><span class="nick" style="color:#2e2a4a"><a href="#170613" label="[17:06:13]">&lt;yt_&gt;</a></span><span class="message">OriansJ: requirements change, it's the only constant. hence designs must evolve</span></div><div class="line" id="170707"><span class="nick" style="color:#8dd3c7"><a href="#170707" label="[17:07:07]">&lt;OriansJ&gt;</a></span><span class="message">until they include a mail client/server... yeah I know.</span></div><div class="line" id="170747"><span class="nick" style="color:#2e2a4a"><a href="#170747" label="[17:07:47]">&lt;yt_&gt;</a></span><span class="message">or until they become a lisp interpreter</span></div><div class="line" id="171115"><span class="nick" style="color:#8dd3c7"><a href="#171115" label="[17:11:15]">&lt;OriansJ&gt;</a></span><span class="message">nope an ad-hoc implementation of common lisp</span></div><div class="line" id="181501"><span class="nick" style="color:#8dd3c7"><a href="#181501" label="[18:15:01]">&lt;OriansJ&gt;</a></span><span class="message">what the fuck, fresh hell</span></div><div class="line" id="181548"><span class="nick" style="color:#8dd3c7"><a href="#181548" label="[18:15:48]">&lt;OriansJ&gt;</a></span><span class="message">ok so if I apply this patch <a rel="nofollow" href="https://paste.debian.net/1180355/">https://paste.debian.net/1180355/</a>  mes-m2 works just fine</span></div><div class="line" id="181614"><span class="nick" style="color:#8dd3c7"><a href="#181614" label="[18:16:14]">&lt;OriansJ&gt;</a></span><span class="message">but delete the # to enable push and pop and magically mes-m2 is broken</span></div><div class="line" id="181705"><span class="nick" style="color:#8dd3c7"><a href="#181705" label="[18:17:05]">&lt;OriansJ&gt;</a></span><span class="message">I just don't even</span></div><div class="line" id="181754"><span class="nick" style="color:#8dd3c7"><a href="#181754" label="[18:17:54]">&lt;OriansJ&gt;</a></span><span class="message">I need a break</span></div><div class="line" id="181845"><span class="nick" style="color:#234e69"><a href="#181845" label="[18:18:45]">&lt;deesix&gt;</a></span><span class="message">Go for it!</span></div><div class="line" id="182440"><span class="nick" style="color:#2e2a4a"><a href="#182440" label="[18:24:40]">&lt;yt_&gt;</a></span><span class="message">OriansJ: is that with preprocessor changes in M2-Planet?</span></div><div class="line" id="185606"><span class="nick" style="color:#2e2a4a"><a href="#185606" label="[18:56:06]">&lt;yt_&gt;</a></span><span class="message">OriansJ: next bit of the preprocessor is up: <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/pull/12">https://github.com/oriansj/M2-Planet/pull/12</a> </span></div><div class="line" id="185647"><span class="nick" style="color:#2e2a4a"><a href="#185647" label="[18:56:47]">&lt;yt_&gt;</a></span><span class="message">also does --bootstrap-mode properly now, which might help with your mes-m2 problem</span></div><div class="line" id="185830"><span class="nick" style="color:#2e2a4a"><a href="#185830" label="[18:58:30]">&lt;yt_&gt;</a></span><span class="message">I'm leaving the preprocessor alone for a bit now and look at janneke's feature requests</span></div><div class="line" id="214022"><span class="nick" style="color:#2e2a4a"><a href="#214022" label="[21:40:22]">&lt;ullbeking&gt;</a></span><span class="message">good evening all, i'm new to the bootstrappable project...</span></div><div class="line" id="214035"><span class="nick" style="color:#2e2a4a"><a href="#214035" label="[21:40:35]">&lt;yt_&gt;</a></span><span class="message">ullbeking: welcome!</span></div><div class="line" id="214100"><span class="nick" style="color:#2e2a4a"><a href="#214100" label="[21:41:00]">&lt;ullbeking&gt;</a></span><span class="message">i am still learning about it, but i understand, for example, ken thompson's famous lecture and the meaning of this</span></div><div class="line" id="214103"><span class="nick" style="color:#6b8072"><a href="#214103" label="[21:41:03]">&lt;stikonas&gt;</a></span><span class="message">ullbeking: hi</span></div><div class="line" id="214108"><span class="nick" style="color:#2e2a4a"><a href="#214108" label="[21:41:08]">&lt;ullbeking&gt;</a></span><span class="message">hello yt_ !</span></div><div class="line" id="214114"><span class="nick" style="color:#2e2a4a"><a href="#214114" label="[21:41:14]">&lt;ullbeking&gt;</a></span><span class="message">good evening stikonas !</span></div><div class="line" id="214146"><span class="nick" style="color:#2e2a4a"><a href="#214146" label="[21:41:46]">&lt;ullbeking&gt;</a></span><span class="message">i'm particularly keen on learning more about the &quot;Maintaining GCC version 4.7&quot; project</span></div><div class="line" id="214221"><span class="nick" style="color:#6b8072"><a href="#214221" label="[21:42:21]">&lt;stikonas&gt;</a></span><span class="message">I guess that means adding new architctures, etc when necessary. I don't think much is going on right now regarding gcc 4.7</span></div><div class="line" id="214225"><span class="nick" style="color:#2e2a4a"><a href="#214225" label="[21:42:25]">&lt;ullbeking&gt;</a></span><span class="message">one reason is that I'm very keen to really sink my teeth into C++ (and C)</span></div><div class="line" id="214242"><span class="nick" style="color:#2e2a4a"><a href="#214242" label="[21:42:42]">&lt;ullbeking&gt;</a></span><span class="message">stikonas: lemme check...</span></div><div class="line" id="214334"><span class="nick" style="color:#6b8072"><a href="#214334" label="[21:43:34]">&lt;stikonas&gt;</a></span><span class="message">well, feel free to work on in. It's just right now most of the focus was still on bootstrapping gcc</span></div><div class="line" id="214358"><span class="nick" style="color:#2e2a4a"><a href="#214358" label="[21:43:58]">&lt;ullbeking&gt;</a></span><span class="message">stikonas: i'm working very closely with the power9 architecture these days.</span></div><div class="line" id="214419"><span class="nick" style="color:#2e2a4a"><a href="#214419" label="[21:44:19]">&lt;ullbeking&gt;</a></span><span class="message">i wonder if gcc 4.7 needs updating in this respect..?</span></div><div class="line" id="214435"><span class="nick" style="color:#6b8072"><a href="#214435" label="[21:44:35]">&lt;stikonas&gt;</a></span><span class="message">not sure about gcc 4.7 but earlier bootstrap chain definitely doesn't support power9</span></div><div class="line" id="214447"><span class="nick" style="color:#6b8072"><a href="#214447" label="[21:44:47]">&lt;stikonas&gt;</a></span><span class="message">even tcc doesn't</span></div><div class="line" id="214510"><span class="nick" style="color:#2e2a4a"><a href="#214510" label="[21:45:10]">&lt;ullbeking&gt;</a></span><span class="message">so would it be useful to bring gcc 4.7 up to power9?</span></div><div class="line" id="214524"><span class="nick" style="color:#6b8072"><a href="#214524" label="[21:45:24]">&lt;stikonas&gt;</a></span><span class="message">I think so</span></div><div class="line" id="214552"><span class="nick" style="color:#6b8072"><a href="#214552" label="[21:45:52]">&lt;stikonas&gt;</a></span><span class="message">and it's up to you whether you want to work from the botton (hex0) or from the top (gcc)</span></div><div class="line" id="214554"><span class="nick" style="color:#2e2a4a"><a href="#214554" label="[21:45:54]">&lt;ullbeking&gt;</a></span><span class="message">i'm very interested in returning to this work and getting deeply involved with something so interesting</span></div><div class="line" id="214610"><span class="nick" style="color:#6b8072"><a href="#214610" label="[21:46:10]">&lt;stikonas&gt;</a></span><span class="message">bootstrapping chain is now very roughly like this:</span></div><div class="line" id="214621"><span class="nick" style="color:#2e2a4a"><a href="#214621" label="[21:46:21]">&lt;ullbeking&gt;</a></span><span class="message">by &quot;returning&quot; i mean returning to computer science</span></div><div class="line" id="214644"><span class="nick" style="color:#6b8072"><a href="#214644" label="[21:46:44]">&lt;stikonas&gt;</a></span><span class="message">hex0-&gt;hex1-&gt;hex2-&gt;M1-&gt;M2-Planet-&gt;mes/mescc-&gt;tcc-&gt;gcc (that's ignoring all the additional tools)</span></div><div class="line" id="214719"><span class="nick" style="color:#2e2a4a"><a href="#214719" label="[21:47:19]">&lt;ullbeking&gt;</a></span><span class="message">OK.  I'll have to learn what these terms mean and do some research.</span></div><div class="line" id="214740"><span class="nick" style="color:#2e2a4a"><a href="#214740" label="[21:47:40]">&lt;ullbeking&gt;</a></span><span class="message">up to tcc i've not had any hands on work</span></div><div class="line" id="214741"><span class="nick" style="color:#6b8072"><a href="#214741" label="[21:47:41]">&lt;stikonas&gt;</a></span><span class="message">yeah, feel free to ask each component</span></div><div class="line" id="214753"><span class="nick" style="color:#6b8072"><a href="#214753" label="[21:47:53]">&lt;stikonas&gt;</a></span><span class="message">hex0 is ~357 byte hex assembler</span></div><div class="line" id="214800"><span class="nick" style="color:#2e2a4a"><a href="#214800" label="[21:48:00]">&lt;ullbeking&gt;</a></span><span class="message">and the gcc internals manual is the best place to start?</span></div><div class="line" id="214843"><span class="nick" style="color:#2e2a4a"><a href="#214843" label="[21:48:43]">&lt;ullbeking&gt;</a></span><span class="message">wow!!! 357 byte assembler!</span></div><div class="line" id="214901"><span class="nick" style="color:#2e2a4a"><a href="#214901" label="[21:49:01]">&lt;yt_&gt;</a></span><span class="message">ullbeking: what is the relationship between POWER9 and PowerPC? Do they share an ISA?</span></div><div class="line" id="214942"><span class="nick" style="color:#2e2a4a"><a href="#214942" label="[21:49:42]">&lt;ullbeking&gt;</a></span><span class="message">POWER is an evolution of PowerPC</span></div><div class="line" id="215001"><span class="nick" style="color:#2e2a4a"><a href="#215001" label="[21:50:01]">&lt;ullbeking&gt;</a></span><span class="message">i am not an expert in POWER or GCC...</span></div><div class="line" id="215031"><span class="nick" style="color:#2e2a4a"><a href="#215031" label="[21:50:31]">&lt;ullbeking&gt;</a></span><span class="message">but this is literally /just/ the kind of project I have been looking to work on, when I accidentally bumped into it</span></div><div class="line" id="215107"><span class="nick" style="color:#2e2a4a"><a href="#215107" label="[21:51:07]">&lt;ullbeking&gt;</a></span><span class="message">i use a POWER9 workstation as my daily computer</span></div><div class="line" id="215120"><span class="nick" style="color:#2e2a4a"><a href="#215120" label="[21:51:20]">&lt;ullbeking&gt;</a></span><span class="message">and I am currently setting up a POWER8 server too</span></div><div class="line" id="215149"><span class="nick" style="color:#2e2a4a"><a href="#215149" label="[21:51:49]">&lt;yt_&gt;</a></span><span class="message">ullbeking: I know the feeling XD it's how I got sucked into doing the AArch64 port of the first stages of the bootstrap</span></div><div class="line" id="215209"><span class="nick" style="color:#2e2a4a"><a href="#215209" label="[21:52:09]">&lt;ullbeking&gt;</a></span><span class="message">yt_: are you also working on this project?!</span></div><div class="line" id="215318"><span class="nick" style="color:#2e2a4a"><a href="#215318" label="[21:53:18]">&lt;ullbeking&gt;</a></span><span class="message">(by &quot;project&quot; I mean the &quot;gcc 4.7&quot; project)</span></div><div class="line" id="215511"><span class="nick" style="color:#2e2a4a"><a href="#215511" label="[21:55:11]">&lt;yt_&gt;</a></span><span class="message">ullbeking: not GCC no, just the tools further down in the bootstrap</span></div><div class="line" id="215518"><span class="nick" style="color:#6b8072"><a href="#215518" label="[21:55:18]">&lt;rain1&gt;</a></span><span class="message"> </span></div><div class="line" id="215619"><span class="nick" style="color:#2e2a4a"><a href="#215619" label="[21:56:19]">&lt;ullbeking&gt;</a></span><span class="message">yt_: what do you recommend i do to get started?</span></div><div class="line" id="215743"><span class="nick" style="color:#8dd3c7"><a href="#215743" label="[21:57:43]">&lt;OriansJ&gt;</a></span><span class="message">ullbeking: perhaps the question what seems like the most fun to you?</span></div><div class="line" id="215830"><span class="nick" style="color:#2e2a4a"><a href="#215830" label="[21:58:30]">&lt;ullbeking&gt;</a></span><span class="message">OriansJ: the this that seems most fun is updating the bootstrap chain (where needed) for POWER9</span></div><div class="line" id="215840"><span class="nick" style="color:#2e2a4a"><a href="#215840" label="[21:58:40]">&lt;ullbeking&gt;</a></span><span class="message">s/this/thing/</span></div><div class="line" id="215918"><span class="nick" style="color:#2e2a4a"><a href="#215918" label="[21:59:18]">&lt;ullbeking&gt;</a></span><span class="message">i would first try to build the current thing and see what happens with that, and go from there</span></div><div class="line" id="215933"><span class="nick" style="color:#2e2a4a"><a href="#215933" label="[21:59:33]">&lt;ullbeking&gt;</a></span><span class="message">maybe the changes required are minimal, I don't know</span></div><div class="line" id="220010"><span class="nick" style="color:#389600"><a href="#220010" label="[22:00:10]">&lt;stikonas[m]&gt;</a></span><span class="message">There are also a few different ways to do that...</span></div><div class="line" id="220018"><span class="nick" style="color:#2e2a4a"><a href="#220018" label="[22:00:18]">&lt;ullbeking&gt;</a></span><span class="message">yes?</span></div><div class="line" id="220049"><span class="nick" style="color:#8dd3c7"><a href="#220049" label="[22:00:49]">&lt;OriansJ&gt;</a></span><span class="message">ullbeking: well we have a couple places where you can do C compiler work if you are interested (M2-Planet, MesCC, TCC and GCC of course)</span></div><div class="line" id="220057"><span class="nick" style="color:#389600"><a href="#220057" label="[22:00:57]">&lt;stikonas[m]&gt;</a></span><span class="message">I think rain1 has script that builds tcc on top of your system...</span></div><div class="line" id="220118"><span class="nick" style="color:#2e2a4a"><a href="#220118" label="[22:01:18]">&lt;ullbeking&gt;</a></span><span class="message">OriansJ: I am very interested in C compiler work, and also C++</span></div><div class="line" id="220133"><span class="nick" style="color:#389600"><a href="#220133" label="[22:01:33]">&lt;stikonas[m]&gt;</a></span><span class="message">Or you can check out fossy’s live bootstrap (builds inside initramfs)</span></div><div class="line" id="220158"><span class="nick" style="color:#2e2a4a"><a href="#220158" label="[22:01:58]">&lt;ullbeking&gt;</a></span><span class="message">wow, this is getting magically fascinating already ;-)</span></div><div class="line" id="220201"><span class="nick" style="color:#8dd3c7"><a href="#220201" label="[22:02:01]">&lt;OriansJ&gt;</a></span><span class="message">with M2-Planet being the simplest to port to your architecture, MesCC is in Scheme</span></div><div class="line" id="220211"><span class="nick" style="color:#2e2a4a"><a href="#220211" label="[22:02:11]">&lt;ullbeking&gt;</a></span><span class="message">i love Scheme :-)</span></div><div class="line" id="220227"><span class="nick" style="color:#8dd3c7"><a href="#220227" label="[22:02:27]">&lt;OriansJ&gt;</a></span><span class="message">good them MesCC would be very fun for you.</span></div><div class="line" id="220242"><span class="nick" style="color:#8dd3c7"><a href="#220242" label="[22:02:42]">&lt;OriansJ&gt;</a></span><span class="message">it is a C compiler written entirely in Scheme</span></div><div class="line" id="220311"><span class="nick" style="color:#8dd3c7"><a href="#220311" label="[22:03:11]">&lt;OriansJ&gt;</a></span><span class="message">janneke is the primary author of MesCC</span></div><div class="line" id="220316"><span class="nick" style="color:#2e2a4a"><a href="#220316" label="[22:03:16]">&lt;ullbeking&gt;</a></span><span class="message">OK</span></div><div class="line" id="220409"><span class="nick" style="color:#8dd3c7"><a href="#220409" label="[22:04:09]">&lt;OriansJ&gt;</a></span><span class="message">There are a few minor things you might want to know about when generating binaries with MesCC. The C code gets converted to M1-macro assembly and then linked with hex2</span></div><div class="line" id="220431"><span class="nick" style="color:#2e2a4a"><a href="#220431" label="[22:04:31]">&lt;ullbeking&gt;</a></span><span class="message">ok</span></div><div class="line" id="220501"><span class="nick" style="color:#6d2462"><a href="#220501" label="[22:05:01]">*</a></span><span class="message">ullbeking is referring back up to the bootstrapping chain diagram</span></div><div class="line" id="220524"><span class="nick" style="color:#389600"><a href="#220524" label="[22:05:24]">&lt;stikonas[m]&gt;</a></span><span class="message">hex2 is more advanced assembler with e.g. labels</span></div><div class="line" id="220609"><span class="nick" style="color:#8dd3c7"><a href="#220609" label="[22:06:09]">&lt;OriansJ&gt;</a></span><span class="message">you can get M1 and hex2 here: <a rel="nofollow" href="https://savannah.nongnu.org/projects/mescc-tools">https://savannah.nongnu.org/projects/mescc-tools</a> </span></div><div class="line" id="220626"><span class="nick" style="color:#8dd3c7"><a href="#220626" label="[22:06:26]">&lt;OriansJ&gt;</a></span><span class="message">or here <a rel="nofollow" href="https://github.com/oriansj/mescc-tools">https://github.com/oriansj/mescc-tools</a> </span></div><div class="line" id="220629"><span class="nick" style="color:#6d2462"><a href="#220629" label="[22:06:29]">*</a></span><span class="message">ullbeking looking briefly</span></div><div class="line" id="220756"><span class="nick" style="color:#8dd3c7"><a href="#220756" label="[22:07:56]">&lt;OriansJ&gt;</a></span><span class="message">yt_: your pull request has been merged</span></div><div class="line" id="220759"><span class="nick" style="color:#80b1d3"><a href="#220759" label="[22:07:59]">&lt;Hagfish&gt;</a></span><span class="message">ullbeking: one thing that might help the project is if you keep notes of the things you learn, which we could share to help onboard new people who join the project later on</span></div><div class="line" id="220826"><span class="nick" style="color:#2e2a4a"><a href="#220826" label="[22:08:26]">&lt;yt_&gt;</a></span><span class="message">OriansJ: thank you!</span></div><div class="line" id="220917"><span class="nick" style="color:#2e2a4a"><a href="#220917" label="[22:09:17]">&lt;ullbeking&gt;</a></span><span class="message">Hagfish: ofc.  i'm a big note-keeper kinda person.</span></div><div class="line" id="220926"><span class="nick" style="color:#389600"><a href="#220926" label="[22:09:26]">&lt;stikonas[m]&gt;</a></span><span class="message">mescc-tools-seed is also worth looking at</span></div><div class="line" id="220927"><span class="nick" style="color:#80b1d3"><a href="#220927" label="[22:09:27]">&lt;Hagfish&gt;</a></span><span class="message">me too :)  a sign of a great mind</span></div><div class="line" id="220941"><span class="nick" style="color:#2e2a4a"><a href="#220941" label="[22:09:41]">&lt;ullbeking&gt;</a></span><span class="message">what documentation tools do you use, Hagfish ?</span></div><div class="line" id="220946"><span class="nick" style="color:#389600"><a href="#220946" label="[22:09:46]">&lt;stikonas[m]&gt;</a></span><span class="message">It can quickly bootstrap m2-planet</span></div><div class="line" id="220959"><span class="nick" style="color:#80b1d3"><a href="#220959" label="[22:09:59]">&lt;Hagfish&gt;</a></span><span class="message">ullbeking: heh, just a load of text files, and a paper lab book</span></div><div class="line" id="221006"><span class="nick" style="color:#389600"><a href="#221006" label="[22:10:06]">&lt;stikonas[m]&gt;</a></span><span class="message">Readme files?</span></div><div class="line" id="221023"><span class="nick" style="color:#80b1d3"><a href="#221023" label="[22:10:23]">&lt;Hagfish&gt;</a></span><span class="message">nothing very structured</span></div><div class="line" id="221031"><span class="nick" style="color:#389600"><a href="#221031" label="[22:10:31]">&lt;stikonas[m]&gt;</a></span><span class="message">Also some scripts are self documenting</span></div><div class="line" id="221054"><span class="nick" style="color:#8dd3c7"><a href="#221054" label="[22:10:54]">&lt;OriansJ&gt;</a></span><span class="message">ullbeking: one thing you'll probably have to do is make some DEFINEs for architecture <a rel="nofollow" href="https://github.com/oriansj/M2libc/blob/main/AArch64/aarch64_defs.M1">https://github.com/oriansj/M2libc/blob/main/AArch64/aarch64_defs.M1</a>  and an ELF header <a rel="nofollow" href="https://github.com/oriansj/M2libc/blob/main/AArch64/ELF-aarch64.hex2">https://github.com/oriansj/M2libc/blob/main/AArch64/ELF-aarch64.hex2</a> </span></div><div class="line" id="221101"><span class="nick" style="color:#389600"><a href="#221101" label="[22:11:01]">&lt;stikonas[m]&gt;</a></span><span class="message">We have about 700 byte shell kaem</span></div><div class="line" id="221127"><span class="nick" style="color:#8dd3c7"><a href="#221127" label="[22:11:27]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: 737bytes exactly for x86</span></div><div class="line" id="221202"><span class="nick" style="color:#389600"><a href="#221202" label="[22:12:02]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, it's not used for long, there is more advanced version in C, that one is larger</span></div><div class="line" id="221246"><span class="nick" style="color:#8dd3c7"><a href="#221246" label="[22:12:46]">&lt;OriansJ&gt;</a></span><span class="message">This may be helpful ullbeking <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/Generating_M0_Definitions.org">https://github.com/oriansj/mescc-tools/blob/master/Generating_M0_Definitions.org</a> </span></div><div class="line" id="221256"><span class="nick" style="color:#2e2a4a"><a href="#221256" label="[22:12:56]">&lt;ullbeking&gt;</a></span><span class="message">stikonas[m]: what is m-t-seed?</span></div><div class="line" id="221334"><span class="nick" style="color:#8dd3c7"><a href="#221334" label="[22:13:34]">&lt;OriansJ&gt;</a></span><span class="message">ullbeking: that is just a name we are using for the POSIX port of stage0</span></div><div class="line" id="221340"><span class="nick" style="color:#8dd3c7"><a href="#221340" label="[22:13:40]">&lt;OriansJ&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-seed">https://github.com/oriansj/mescc-tools-seed</a> </span></div><div class="line" id="221351"><span class="nick" style="color:#389600"><a href="#221351" label="[22:13:51]">&lt;stikonas[m]&gt;</a></span><span class="message">Just got repo with some build recipes for POSIX bootstrap</span></div><div class="line" id="221357"><span class="nick" style="color:#2e2a4a"><a href="#221357" label="[22:13:57]">&lt;ullbeking&gt;</a></span><span class="message">ok</span></div><div class="line" id="221400"><span class="nick" style="color:#8dd3c7"><a href="#221400" label="[22:14:00]">&lt;OriansJ&gt;</a></span><span class="message">it is a single git clone and done bootstrap to C compiler</span></div><div class="line" id="221413"><span class="nick" style="color:#389600"><a href="#221413" label="[22:14:13]">&lt;stikonas[m]&gt;</a></span><span class="message">It includes binary seeds and some other repos as got submodules</span></div><div class="line" id="221530"><span class="nick" style="color:#2e2a4a"><a href="#221530" label="[22:15:30]">&lt;ullbeking&gt;</a></span><span class="message">bootstrapping has always fascinated me, i'm so happy to finally be hands on with it :-)</span></div><div class="line" id="221534"><span class="nick" style="color:#8dd3c7"><a href="#221534" label="[22:15:34]">&lt;OriansJ&gt;</a></span><span class="message">generally the first thing you would want to do to port MesCC to a new architecture is see if you can get M1+hex2 to do hello world <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/test/test12/hello.M1">https://github.com/oriansj/mescc-tools/blob/master/test/test12/hello.M1</a> </span></div><div class="line" id="221555"><span class="nick" style="color:#8dd3c7"><a href="#221555" label="[22:15:55]">&lt;OriansJ&gt;</a></span><span class="message">ullbeking: we happily provide education and training if required.  ^_^</span></div><div class="line" id="221607"><span class="nick" style="color:#2e2a4a"><a href="#221607" label="[22:16:07]">&lt;ullbeking&gt;</a></span><span class="message">but would POWER9 be considered new architecture?</span></div><div class="line" id="221645"><span class="nick" style="color:#6b8072"><a href="#221645" label="[22:16:45]">&lt;stikonas&gt;</a></span><span class="message">yes</span></div><div class="line" id="221717"><span class="nick" style="color:#8dd3c7"><a href="#221717" label="[22:17:17]">&lt;OriansJ&gt;</a></span><span class="message">ullbeking: well I don't have a POWER9 (Or any POWER system honestly) and thus I haven't ensured POWER9 instructions would encode properly or address properly</span></div><div class="line" id="221743"><span class="nick" style="color:#2e2a4a"><a href="#221743" label="[22:17:43]">&lt;ullbeking&gt;</a></span><span class="message">ok, so it's worth doing then.  great.  thx stikonas and OriansJ .</span></div><div class="line" id="221753"><span class="nick" style="color:#8dd3c7"><a href="#221753" label="[22:17:53]">&lt;OriansJ&gt;</a></span><span class="message">for example when we ported to AArch64 we had to deal with pointer calculations and alignment rules</span></div><div class="line" id="221832"><span class="nick" style="color:#2e2a4a"><a href="#221832" label="[22:18:32]">&lt;ullbeking&gt;</a></span><span class="message">for P9 it operates in either BE or LE mode, so there's that too, which will probably be fun ;-)</span></div><div class="line" id="221833"><span class="nick" style="color:#8dd3c7"><a href="#221833" label="[22:18:33]">&lt;OriansJ&gt;</a></span><span class="message">if you are curious what M1 and hex2 support you can ask or look at the code since they are very simple programs</span></div><div class="line" id="221853"><span class="nick" style="color:#8dd3c7"><a href="#221853" label="[22:18:53]">&lt;OriansJ&gt;</a></span><span class="message">ullbeking: we support both Big and Little Endian instructions and Data</span></div><div class="line" id="221942"><span class="nick" style="color:#2e2a4a"><a href="#221942" label="[22:19:42]">&lt;ullbeking&gt;</a></span><span class="message">reading this now, not sure if it's the best starting point: <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-seed">https://github.com/oriansj/mescc-tools-seed</a> </span></div><div class="line" id="221947"><span class="nick" style="color:#8dd3c7"><a href="#221947" label="[22:19:47]">&lt;OriansJ&gt;</a></span><span class="message">we have basic support for octal and binary encoding schemes too but they haven't really been tested too well</span></div><div class="line" id="222013"><span class="nick" style="color:#8dd3c7"><a href="#222013" label="[22:20:13]">&lt;OriansJ&gt;</a></span><span class="message">ullbeking: well it is how to bootstrap a C compiler from Nothing</span></div><div class="line" id="222034"><span class="nick" style="color:#2e2a4a"><a href="#222034" label="[22:20:34]">&lt;ullbeking&gt;</a></span><span class="message">i am happy to have an excuse to dust off my old copy of the dragon book</span></div><div class="line" id="222038"><span class="nick" style="color:#8dd3c7"><a href="#222038" label="[22:20:38]">&lt;OriansJ&gt;</a></span><span class="message">for x86, AMD64 and AArch64 (with a half done armv7l port too)</span></div><div class="line" id="222048"><span class="nick" style="color:#2e2a4a"><a href="#222048" label="[22:20:48]">&lt;ullbeking&gt;</a></span><span class="message">also, any recommendations for other compiler books are highly welcome</span></div><div class="line" id="222104"><span class="nick" style="color:#8dd3c7"><a href="#222104" label="[22:21:04]">&lt;OriansJ&gt;</a></span><span class="message">ullbeking: the C compiler we wrote in assembly is far simpler than you would imagine</span></div><div class="line" id="222114"><span class="nick" style="color:#8dd3c7"><a href="#222114" label="[22:21:14]">&lt;OriansJ&gt;</a></span><span class="message">(I wrote it in 20 hours flat)</span></div><div class="line" id="222138"><span class="nick" style="color:#bc80bd"><a href="#222138" label="[22:21:38]">&lt;xentrac&gt;</a></span><span class="message">I feel like a lot of compiler theory is counterproductive because it makes the problem seem harder than it is</span></div><div class="line" id="222243"><span class="nick" style="color:#bc80bd"><a href="#222243" label="[22:22:43]">&lt;xentrac&gt;</a></span><span class="message">Jack Crenshaw's &quot;Let's Build a Compiler&quot; is one that doesn't, but I haven't actually read it</span></div><div class="line" id="222250"><span class="nick" style="color:#2e2a4a"><a href="#222250" label="[22:22:50]">&lt;yt_&gt;</a></span><span class="message">OriansJ: for janneke's global arrays, I'm just going to stick a require(!BOOTSTRAP_MODE) in there. I think that kind of pattern is probably the simplest way to keep bootstrap mode correct</span></div><div class="line" id="222258"><span class="nick" style="color:#8dd3c7"><a href="#222258" label="[22:22:58]">&lt;OriansJ&gt;</a></span><span class="message">Here is the C code version of cc_x86: <a rel="nofollow" href="https://github.com/oriansj/stage0/tree/master/stage2/High_level_prototypes/cc_x86">https://github.com/oriansj/stage0/tree/master/stage2/High_level_prototypes/cc_x86</a>  and here is it in NASM assembly <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-seed/blob/master/x86/NASM/cc_x86.S">https://github.com/oriansj/mescc-tools-seed/blob/master/x86/NASM/cc_x86.S</a> </span></div><div class="line" id="222259"><span class="nick" style="color:#6d2462"><a href="#222259" label="[22:22:59]">*</a></span><span class="message">ullbeking is looking to see an overall picture of the hex1 stage</span></div><div class="line" id="222305"><span class="nick" style="color:#bc80bd"><a href="#222305" label="[22:23:05]">&lt;xentrac&gt;</a></span><span class="message">reading it is probably better than what I did actually do though</span></div><div class="line" id="222327"><span class="nick" style="color:#2e2a4a"><a href="#222327" label="[22:23:27]">&lt;ullbeking&gt;</a></span><span class="message">21:22 &lt;xentrac&gt; Jack Crenshaw's &quot;Let's Build a Compiler&quot; is one that doesn't, but I haven't actually read it</span></div><div class="line" id="222327"><span class="nick" style="color:#2e2a4a"><a href="#222327" label="[22:23:27]">&lt;ullbeking&gt;</a></span><span class="message">this was the first book on compilers i read, in about 1994 :D</span></div><div class="line" id="222358"><span class="nick" style="color:#8dd3c7"><a href="#222358" label="[22:23:58]">&lt;OriansJ&gt;</a></span><span class="message">yt_: that or create a function called bootstrap_error with calls line error and the rest to make it easier to fix</span></div><div class="line" id="222521"><span class="nick" style="color:#8dd3c7"><a href="#222521" label="[22:25:21]">&lt;OriansJ&gt;</a></span><span class="message">ullbeking: hex1 is just hex0 with single character labels ;a and one size relative pointers %a to save the work of having to manually calculate jump offsets</span></div><div class="line" id="222526"><span class="nick" style="color:#2e2a4a"><a href="#222526" label="[22:25:26]">&lt;yt_&gt;</a></span><span class="message">OriansJ: good shout</span></div><div class="line" id="222653"><span class="nick" style="color:#2e2a4a"><a href="#222653" label="[22:26:53]">&lt;ullbeking&gt;</a></span><span class="message">OK, I'm going to spend a bit of time reading and absorbing this information</span></div><div class="line" id="222706"><span class="nick" style="color:#8dd3c7"><a href="#222706" label="[22:27:06]">&lt;OriansJ&gt;</a></span><span class="message">hex2 extends hex1 with long label names, multiple relative (!8bit, @16bit ~architecture specific and %32bit) and absolute ($16bit and &amp;32bit) pointer sizes</span></div><div class="line" id="222708"><span class="nick" style="color:#2e2a4a"><a href="#222708" label="[22:27:08]">&lt;ullbeking&gt;</a></span><span class="message">I need to get deep into the OpenPOWER specs too</span></div><div class="line" id="222725"><span class="nick" style="color:#8dd3c7"><a href="#222725" label="[22:27:25]">&lt;OriansJ&gt;</a></span><span class="message">ullbeking: especially instruction encoding</span></div><div class="line" id="222732"><span class="nick" style="color:#2e2a4a"><a href="#222732" label="[22:27:32]">&lt;ullbeking&gt;</a></span><span class="message">ok</span></div><div class="line" id="222748"><span class="nick" style="color:#8dd3c7"><a href="#222748" label="[22:27:48]">&lt;OriansJ&gt;</a></span><span class="message">for example we discovered the armv7l documentation actually was backwards</span></div><div class="line" id="222749"><span class="nick" style="color:#6b8072"><a href="#222749" label="[22:27:49]">&lt;stikonas&gt;</a></span><span class="message">ullbeking: you can also try running <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/">https://github.com/fosslinux/live-bootstrap/</a>,  it bootstraps a bit further than mescc-tools-seed but it is inside VM, so for now you can just observe compilation until it finishes and kernel panicks</span></div><div class="line" id="222803"><span class="nick" style="color:#2e2a4a"><a href="#222803" label="[22:28:03]">&lt;yt_&gt;</a></span><span class="message">ullbeking: if you're mostly new to Power9/OpenPOWER, writing hex0 is a good way of getting your hands dirty :)</span></div><div class="line" id="222841"><span class="nick" style="color:#2e2a4a"><a href="#222841" label="[22:28:41]">&lt;ullbeking&gt;</a></span><span class="message">yt_: using POWER9 means my hands are constantly very dirty :-)</span></div><div class="line" id="222906"><span class="nick" style="color:#6b8072"><a href="#222906" label="[22:29:06]">&lt;stikonas&gt;</a></span><span class="message">yaeh, hex0 is very nice... It's basically a self reproducing program (binary code is basically equivalent to source code)</span></div><div class="line" id="223024"><span class="nick" style="color:#8dd3c7"><a href="#223024" label="[22:30:24]">&lt;OriansJ&gt;</a></span><span class="message">ullbeking: think of hex0 as the test: (can your instruction set be encoded in bytes)</span></div><div class="line" id="223057"><span class="nick" style="color:#8dd3c7"><a href="#223057" label="[22:30:57]">&lt;OriansJ&gt;</a></span><span class="message">and if so what details do you absolutely need to know</span></div><div class="line" id="223123"><span class="nick" style="color:#2e2a4a"><a href="#223123" label="[22:31:23]">&lt;ullbeking&gt;</a></span><span class="message">getting my daughter ready for bed, brb</span></div><div class="line" id="223254"><span class="nick" style="color:#2e2a4a"><a href="#223254" label="[22:32:54]">&lt;yt_&gt;</a></span><span class="message">OriansJ: what awful instruction set cannot be encoded in bytes?  I know AArch64 is painful due to both endianness and non-nybble aligned fields, but at least the instructions are byte (word even) aligned</span></div><div class="line" id="223444"><span class="nick" style="color:#bc80bd"><a href="#223444" label="[22:34:44]">&lt;xentrac&gt;</a></span><span class="message">the BASIC Stamp?</span></div><div class="line" id="223456"><span class="nick" style="color:#8dd3c7"><a href="#223456" label="[22:34:56]">&lt;OriansJ&gt;</a></span><span class="message">yt_: pdp-1 (18bit instructions), pdp-8 (12bit instructions); pdp-10 (36bit instructions), etc</span></div><div class="line" id="223504"><span class="nick" style="color:#bc80bd"><a href="#223504" label="[22:35:04]">&lt;xentrac&gt;</a></span><span class="message">the PDP-10 instruction set sort of</span></div><div class="line" id="223520"><span class="nick" style="color:#bc80bd"><a href="#223520" label="[22:35:20]">&lt;xentrac&gt;</a></span><span class="message">but there are conventional ways to represent TENEX files on Unix, e.g.</span></div><div class="line" id="223521"><span class="nick" style="color:#2e2a4a"><a href="#223521" label="[22:35:21]">&lt;yt_&gt;</a></span><span class="message">all before my time, thankfully :p</span></div><div class="line" id="223605"><span class="nick" style="color:#8dd3c7"><a href="#223605" label="[22:36:05]">&lt;OriansJ&gt;</a></span><span class="message">There are a bunch of FORTH designs that have weird instruction encodings (13bit bits really?????)</span></div><div class="line" id="223644"><span class="nick" style="color:#2e2a4a"><a href="#223644" label="[22:36:44]">&lt;yt_&gt;</a></span><span class="message">madness</span></div><div class="line" id="223700"><span class="nick" style="color:#8dd3c7"><a href="#223700" label="[22:37:00]">&lt;OriansJ&gt;</a></span><span class="message">hence I am only dealing with sane instruction sets that can be encoded in 8bit bytes</span></div><div class="line" id="223732"><span class="nick" style="color:#2e2a4a"><a href="#223732" label="[22:37:32]">&lt;yt_&gt;</a></span><span class="message">very sensible, keeps you sane&quot;</span></div><div class="line" id="223745"><span class="nick" style="color:#2e2a4a"><a href="#223745" label="[22:37:45]">&lt;yt_&gt;</a></span><span class="message">where did that &quot; come from. who knows?&quot;</span></div><div class="line" id="223749"><span class="nick" style="color:#2e2a4a"><a href="#223749" label="[22:37:49]">&lt;yt_&gt;</a></span><span class="message">oh again</span></div><div class="line" id="223753"><span class="nick" style="color:#2e2a4a"><a href="#223753" label="[22:37:53]">&lt;yt_&gt;</a></span><span class="message">fun</span></div><div class="line" id="223810"><span class="nick" style="color:#8dd3c7"><a href="#223810" label="[22:38:10]">&lt;OriansJ&gt;</a></span><span class="message">and partially why I am not dealing with RISC-V's immediate split the immediate into 3 pieces acros 4 bytes with a billion rules</span></div><div class="line" id="223841"><span class="nick" style="color:#8dd3c7"><a href="#223841" label="[22:38:41]">&lt;OriansJ&gt;</a></span><span class="message">yt_: 8bit bytes was IBM stretch then IBM 360</span></div><div class="line" id="223850"><span class="nick" style="color:#234e69"><a href="#223850" label="[22:38:50]">&lt;deesix&gt;</a></span><span class="message">&quot;&quot;&quot;especially instruction encoding for example we discovered the armv7l documentation actually was backwards&quot;&quot;&quot; I was always curious about this, OriansJ. Would you elaborate a bit? Maybe _yt can confirm...</span></div><div class="line" id="223858"><span class="nick" style="color:#bc80bd"><a href="#223858" label="[22:38:58]">&lt;xentrac&gt;</a></span><span class="message">haven't seen any 13-bit bits</span></div><div class="line" id="223910"><span class="nick" style="color:#bc80bd"><a href="#223910" label="[22:39:10]">&lt;xentrac&gt;</a></span><span class="message">but yes 12, 18, 20, and 21</span></div><div class="line" id="223911"><span class="nick" style="color:#2e2a4a"><a href="#223911" label="[22:39:11]">&lt;yt_&gt;</a></span><span class="message">we can do the AArch64 trick of just loading an immediate from a pc-relative offset</span></div><div class="line" id="224008"><span class="nick" style="color:#234e69"><a href="#224008" label="[22:40:08]">&lt;deesix&gt;</a></span><span class="message">*yt_ (sorry)</span></div><div class="line" id="224052"><span class="nick" style="color:#8dd3c7"><a href="#224052" label="[22:40:52]">&lt;OriansJ&gt;</a></span><span class="message">deesix: if you look at armv7l's instruction reference, the first byte is condition code and the first 4bits of the instruction. (Something that should work really well with M1+hex2)</span></div><div class="line" id="224054"><span class="nick" style="color:#2e2a4a"><a href="#224054" label="[22:40:54]">&lt;yt_&gt;</a></span><span class="message">deesix: no worries. turns out yt was already taken, but I liked the handle enough to keep it, but it is a bit confusing, my apologies</span></div><div class="line" id="224113"><span class="nick" style="color:#8dd3c7"><a href="#224113" label="[22:41:13]">&lt;OriansJ&gt;</a></span><span class="message">but in reality it is the last byte of the 4 byte instruction</span></div><div class="line" id="224125"><span class="nick" style="color:#2e2a4a"><a href="#224125" label="[22:41:25]">&lt;ullbeking&gt;</a></span><span class="message">back in about 30 minutes or thereabouts</span></div><div class="line" id="224139"><span class="nick" style="color:#8dd3c7"><a href="#224139" label="[22:41:39]">&lt;OriansJ&gt;</a></span><span class="message">ullbeking: take your time, we will be here</span></div><div class="line" id="224240"><span class="nick" style="color:#2e2a4a"><a href="#224240" label="[22:42:40]">&lt;yt_&gt;</a></span><span class="message">OriansJ: is that due to endianness?</span></div><div class="line" id="224316"><span class="nick" style="color:#8dd3c7"><a href="#224316" label="[22:43:16]">&lt;OriansJ&gt;</a></span><span class="message">yt_: sorta word endianness but not byte endianness</span></div><div class="line" id="224339"><span class="nick" style="color:#8dd3c7"><a href="#224339" label="[22:43:39]">&lt;OriansJ&gt;</a></span><span class="message">See the armv7l instructions are little endian words but big endian bytes</span></div><div class="line" id="224432"><span class="nick" style="color:#6c3d55"><a href="#224432" label="[22:44:32]">&lt;malina&gt;</a></span><span class="message">ugh</span></div><div class="line" id="224507"><span class="nick" style="color:#2e2a4a"><a href="#224507" label="[22:45:07]">&lt;yt_&gt;</a></span><span class="message">OriansJ: enough to give you a headache</span></div><div class="line" id="224522"><span class="nick" style="color:#8dd3c7"><a href="#224522" label="[22:45:22]">&lt;OriansJ&gt;</a></span><span class="message">no but it threw me for a couple hours</span></div><div class="line" id="224610"><span class="nick" style="color:#8dd3c7"><a href="#224610" label="[22:46:10]">&lt;OriansJ&gt;</a></span><span class="message">I was so looking forward to arm assembly after dealing with x86 being everything octal aligned and AMD64 not having consistent octal or hex instruction alignment</span></div><div class="line" id="224705"><span class="nick" style="color:#8dd3c7"><a href="#224705" label="[22:47:05]">&lt;OriansJ&gt;</a></span><span class="message">then reality hit. then got hit with that armv7l immediates are instruction dependent too</span></div><div class="line" id="224750"><span class="nick" style="color:#8dd3c7"><a href="#224750" label="[22:47:50]">&lt;OriansJ&gt;</a></span><span class="message">as branch ~label and load @6 had different coding rules</span></div><div class="line" id="224813"><span class="nick" style="color:#8dd3c7"><a href="#224813" label="[22:48:13]">&lt;OriansJ&gt;</a></span><span class="message">so we had to do ^~label and @5 to make it sorta work</span></div><div class="line" id="225046"><span class="nick" style="color:#2e2a4a"><a href="#225046" label="[22:50:46]">&lt;yt_&gt;</a></span><span class="message"> ^~label turned out to be useful for AArch64 too, except someone decided we needed 2 more bits for the relative offsets, so negative offsets needed fudging XD</span></div><div class="line" id="225140"><span class="nick" style="color:#234e69"><a href="#225140" label="[22:51:40]">&lt;deesix&gt;</a></span><span class="message">I really like how you solved that, yt_ :)</span></div><div class="line" id="225214"><span class="nick" style="color:#80b1d3"><a href="#225214" label="[22:52:14]">&lt;mihi&gt;</a></span><span class="message">ullbeking, as you said you love Scheme, you may also have a look at the psyntax.pp bootstrap problem in the Guile Scheme interpreter. That's not low-level, but rather high-level bootstrapping. The current implementation requires to have a pre-expanded version of it to compile the new version. I guess it might be possible with the already available Guile syntax primitives to write a psyntax implementation that only uses macros and use</span></div><div class="line" id="225215"><span class="nick" style="color:#80b1d3"><a href="#225215" label="[22:52:15]">&lt;mihi&gt;</a></span><span class="message">that implementation to bootstrap the real thing, but so far (trying for ~10 days) I've not been successful due to my Scheme being too rusty.</span></div><div class="line" id="225253"><span class="nick" style="color:#80b1d3"><a href="#225253" label="[22:52:53]">&lt;mihi&gt;</a></span><span class="message">that 10 days is wall clock, the actual effort was only a few hours so far.</span></div><div class="line" id="225328"><span class="nick" style="color:#2e2a4a"><a href="#225328" label="[22:53:28]">&lt;yt_&gt;</a></span><span class="message">deesix: thanks :)</span></div><div class="line" id="225352"><span class="nick" style="color:#3c5b35"><a href="#225352" label="[22:53:52]">&lt;fossy&gt;</a></span><span class="message">stikonas: omg i am so dumb</span></div><div class="line" id="225410"><span class="nick" style="color:#80b1d3"><a href="#225410" label="[22:54:10]">&lt;mihi&gt;</a></span><span class="message">OriansJ believes the easiest way to solve psyntax.pp is write a syntax-case expander in C. Long term will tell who is right :D</span></div><div class="line" id="225411"><span class="nick" style="color:#3c5b35"><a href="#225411" label="[22:54:11]">&lt;fossy&gt;</a></span><span class="message">this whole time the issue i have been running into with the first part of the bootstrap was that i wasn't escape quoting the flags to tcc</span></div><div class="line" id="225414"><span class="nick" style="color:#3c5b35"><a href="#225414" label="[22:54:14]">&lt;fossy&gt;</a></span><span class="message">&gt;:(</span></div><div class="line" id="225429"><span class="nick" style="color:#3c5b35"><a href="#225429" label="[22:54:29]">&lt;fossy&gt;</a></span><span class="message">it def didn't seem like that tho</span></div><div class="line" id="225500"><span class="nick" style="color:#8dd3c7"><a href="#225500" label="[22:55:00]">&lt;OriansJ&gt;</a></span><span class="message">fossy: not dumb, just human like the rest of us</span></div><div class="line" id="225509"><span class="nick" style="color:#3c5b35"><a href="#225509" label="[22:55:09]">&lt;fossy&gt;</a></span><span class="message">yeah</span></div><div class="line" id="225517"><span class="nick" style="color:#389600"><a href="#225517" label="[22:55:17]">&lt;stikonas[m]&gt;</a></span><span class="message">fossy I hit this with mes too</span></div><div class="line" id="225530"><span class="nick" style="color:#8dd3c7"><a href="#225530" label="[22:55:30]">&lt;OriansJ&gt;</a></span><span class="message">making mistakes is part of the job</span></div><div class="line" id="225534"><span class="nick" style="color:#389600"><a href="#225534" label="[22:55:34]">&lt;stikonas[m]&gt;</a></span><span class="message">Did I not mention that?</span></div><div class="line" id="225603"><span class="nick" style="color:#3c5b35"><a href="#225603" label="[22:56:03]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: yeah you did mention about how you needed config.h n stuff but for some reason even with config.h tcc still didn't work, but -D XYZ=\&quot;abc\&quot; does</span></div><div class="line" id="225611"><span class="nick" style="color:#389600"><a href="#225611" label="[22:56:11]">&lt;stikonas[m]&gt;</a></span><span class="message">Anyway, at least it works now :)</span></div><div class="line" id="225611"><span class="nick" style="color:#3c5b35"><a href="#225611" label="[22:56:11]">&lt;fossy&gt;</a></span><span class="message">before i was doing -D XYZ=abc</span></div><div class="line" id="225624"><span class="nick" style="color:#3c5b35"><a href="#225624" label="[22:56:24]">&lt;fossy&gt;</a></span><span class="message">which didn't work</span></div><div class="line" id="225640"><span class="nick" style="color:#389600"><a href="#225640" label="[22:56:40]">&lt;stikonas[m]&gt;</a></span><span class="message">-D should be good enough</span></div><div class="line" id="225642"><span class="nick" style="color:#3c5b35"><a href="#225642" label="[22:56:42]">&lt;fossy&gt;</a></span><span class="message">tcc 0.9.26 is done, i'll push when this build finishes and then do 0.9.27, then we're off to the races</span></div><div class="line" id="225711"><span class="nick" style="color:#389600"><a href="#225711" label="[22:57:11]">&lt;stikonas[m]&gt;</a></span><span class="message">We might switch mes to -D too instead of shipping config.h</span></div><div class="line" id="225721"><span class="nick" style="color:#3c5b35"><a href="#225721" label="[22:57:21]">&lt;fossy&gt;</a></span><span class="message">yes, now that kaem escaping works</span></div><div class="line" id="225742"><span class="nick" style="color:#389600"><a href="#225742" label="[22:57:42]">&lt;stikonas[m]&gt;</a></span><span class="message">OK, one you push tcc, I'll try to do gzip</span></div><div class="line" id="225827"><span class="nick" style="color:#389600"><a href="#225827" label="[22:58:27]">&lt;stikonas[m]&gt;</a></span><span class="message">Once we have gzip, tar we can just preget tarballs instead of git submoduling everything</span></div><div class="line" id="225901"><span class="nick" style="color:#3c5b35"><a href="#225901" label="[22:59:01]">&lt;fossy&gt;</a></span><span class="message">yeah</span></div><div class="line" id="225913"><span class="nick" style="color:#8dd3c7"><a href="#225913" label="[22:59:13]">&lt;OriansJ&gt;</a></span><span class="message">I am just going to punt on the mes-m2 macro expansion problem for a minute in mescc-tools-seed</span></div><div class="line" id="225938"><span class="nick" style="color:#389600"><a href="#225938" label="[22:59:38]">&lt;stikonas[m]&gt;</a></span><span class="message">I briefly tried to get qemu on aarch64 working but couldn't get any output :(</span></div><div class="line" id="230014"><span class="nick" style="color:#3c5b35"><a href="#230014" label="[23:00:14]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: please do get started one i push but the final version will need to go against 0.9.27, hich is for the most part a drop in replacement but less buggy (read: required for gcc).</span></div><div class="line" id="230022"><span class="nick" style="color:#3c5b35"><a href="#230022" label="[23:00:22]">&lt;fossy&gt;</a></span><span class="message">drop in replacement for 0.9.26</span></div><div class="line" id="230047"><span class="nick" style="color:#389600"><a href="#230047" label="[23:00:47]">&lt;stikonas[m]&gt;</a></span><span class="message">Yeah, it's fine... It will be in the same path anyway</span></div><div class="line" id="230202"><span class="nick" style="color:#6c3d55"><a href="#230202" label="[23:02:02]">&lt;malina&gt;</a></span><span class="message">fossy, where is that tcc  repo if you have it somewhere?</span></div><div class="line" id="230239"><span class="nick" style="color:#3c5b35"><a href="#230239" label="[23:02:39]">&lt;fossy&gt;</a></span><span class="message"> <a rel="nofollow" href="https://gitlab.com/janneke/tinycc">https://gitlab.com/janneke/tinycc</a>  is the 0.9.26 mes version</span></div><div class="line" id="230249"><span class="nick" style="color:#3c5b35"><a href="#230249" label="[23:02:49]">&lt;fossy&gt;</a></span><span class="message">this is the upstream 0.9.27 <a rel="nofollow" href="https://repo.or.cz/tinycc.git">https://repo.or.cz/tinycc.git</a> </span></div><div class="line" id="230321"><span class="nick" style="color:#6c3d55"><a href="#230321" label="[23:03:21]">&lt;malina&gt;</a></span><span class="message">ye, I am sitting now and kinda trying to figure out this mes stuff :) as I say, the guile,scm,mes, all that is alien to me, but trying to ake ends of it. Gave otcc a go with M2-Planet, but that didn't go well ,p</span></div><div class="line" id="230328"><span class="nick" style="color:#6c3d55"><a href="#230328" label="[23:03:28]">&lt;malina&gt;</a></span><span class="message">thanks.. and thanks</span></div><div class="line" id="230400"><span class="nick" style="color:#2e2a4a"><a href="#230400" label="[23:04:00]">&lt;yt_&gt;</a></span><span class="message">malina: trying to compile tcc with M2-Planet is very brave</span></div><div class="line" id="230406"><span class="nick" style="color:#2e2a4a"><a href="#230406" label="[23:04:06]">&lt;yt_&gt;</a></span><span class="message">maybe one day we'll get there</span></div><div class="line" id="230421"><span class="nick" style="color:#6c3d55"><a href="#230421" label="[23:04:21]">&lt;malina&gt;</a></span><span class="message">no was otcc :D</span></div><div class="line" id="230449"><span class="nick" style="color:#6c3d55"><a href="#230449" label="[23:04:49]">&lt;malina&gt;</a></span><span class="message">a precursor but ye it didn't go well, I also saw it relied on some of the stdlib, stdarg etc, it had comments which I see from above, (not sure if they haveit done but saw some work on it yest?)</span></div><div class="line" id="230452"><span class="nick" style="color:#2e2a4a"><a href="#230452" label="[23:04:52]">&lt;yt_&gt;</a></span><span class="message">oh, gotcha, this thing: <a rel="nofollow" href="https://bellard.org/otcc/">https://bellard.org/otcc/</a> </span></div><div class="line" id="230453"><span class="nick" style="color:#6c3d55"><a href="#230453" label="[23:04:53]">&lt;malina&gt;</a></span><span class="message">but ya :)</span></div><div class="line" id="230455"><span class="nick" style="color:#6c3d55"><a href="#230455" label="[23:04:55]">&lt;malina&gt;</a></span><span class="message">I kind</span></div><div class="line" id="230455"><span class="nick" style="color:#6c3d55"><a href="#230455" label="[23:04:55]">&lt;malina&gt;</a></span><span class="message">yes</span></div><div class="line" id="230458"><span class="nick" style="color:#6c3d55"><a href="#230458" label="[23:04:58]">&lt;malina&gt;</a></span><span class="message">that thing :)</span></div><div class="line" id="230502"><span class="nick" style="color:#3c5b35"><a href="#230502" label="[23:05:02]">&lt;fossy&gt;</a></span><span class="message">sorry that it has taken a while, stikonas[m]</span></div><div class="line" id="230519"><span class="nick" style="color:#389600"><a href="#230519" label="[23:05:19]">&lt;stikonas[m]&gt;</a></span><span class="message">No problem</span></div><div class="line" id="230545"><span class="nick" style="color:#2e2a4a"><a href="#230545" label="[23:05:45]">&lt;yt_&gt;</a></span><span class="message">malina: I'm slowly adding features to M2-Planet to make life easier, mostly for janneke's wip-m2 branch of mes</span></div><div class="line" id="230550"><span class="nick" style="color:#389600"><a href="#230550" label="[23:05:50]">&lt;stikonas[m]&gt;</a></span><span class="message">I did that Haskell stuff although it was just copy paste</span></div><div class="line" id="230600"><span class="nick" style="color:#6c3d55"><a href="#230600" label="[23:06:00]">&lt;malina&gt;</a></span><span class="message">got ya</span></div><div class="line" id="230612"><span class="nick" style="color:#389600"><a href="#230612" label="[23:06:12]">&lt;stikonas[m]&gt;</a></span><span class="message">Diff between go.sh and blynn-compiler.kaem is very small</span></div><div class="line" id="230748"><span class="nick" style="color:#6d2462"><a href="#230748" label="[23:07:48]">&lt;gforce_de1977&gt;</a></span><span class="message">fossy: malina: IMHO only the patched version of tcc will work: <a rel="nofollow" href="https://joyofsource.com/projects/bootstrappable-tcc.html">https://joyofsource.com/projects/bootstrappable-tcc.html</a> </span></div><div class="line" id="230826"><span class="nick" style="color:#3c5b35"><a href="#230826" label="[23:08:26]">&lt;fossy&gt;</a></span><span class="message">gforce_de1977: yes, that is the one i linked to</span></div><div class="line" id="230833"><span class="nick" style="color:#6c3d55"><a href="#230833" label="[23:08:33]">&lt;malina&gt;</a></span><span class="message">is it with that patch which #ifdefs bootstrap then static compile = 1 kinda thing?</span></div><div class="line" id="230838"><span class="nick" style="color:#3c5b35"><a href="#230838" label="[23:08:38]">&lt;fossy&gt;</a></span><span class="message">bya</span></div><div class="line" id="230841"><span class="nick" style="color:#3c5b35"><a href="#230841" label="[23:08:41]">&lt;fossy&gt;</a></span><span class="message">ya</span></div><div class="line" id="230845"><span class="nick" style="color:#3c5b35"><a href="#230845" label="[23:08:45]">&lt;fossy&gt;</a></span><span class="message">then we use that to compile the real tinycc</span></div><div class="line" id="230847"><span class="nick" style="color:#6c3d55"><a href="#230847" label="[23:08:47]">&lt;malina&gt;</a></span><span class="message">oki  thanks.</span></div><div class="line" id="231112"><span class="nick" style="color:#6c3d55"><a href="#231112" label="[23:11:12]">&lt;malina&gt;</a></span><span class="message">just realised I have guile installed a long time,  I was thinking, right.. better create a static package for this then :D</span></div><div class="line" id="231135"><span class="nick" style="color:#3c5b35"><a href="#231135" label="[23:11:35]">&lt;fossy&gt;</a></span><span class="message">static guile is very hard to make</span></div><div class="line" id="231212"><span class="nick" style="color:#6c3d55"><a href="#231212" label="[23:12:12]">&lt;malina&gt;</a></span><span class="message">relly? how come?</span></div><div class="line" id="231217"><span class="nick" style="color:#6c3d55"><a href="#231217" label="[23:12:17]">&lt;malina&gt;</a></span><span class="message">really*</span></div><div class="line" id="231228"><span class="nick" style="color:#3c5b35"><a href="#231228" label="[23:12:28]">&lt;fossy&gt;</a></span><span class="message">idk, i had to fiddle with makefiles and stuff to make a static guile</span></div><div class="line" id="231245"><span class="nick" style="color:#6c3d55"><a href="#231245" label="[23:12:45]">&lt;malina&gt;</a></span><span class="message">do you recall what size it clocked in at?</span></div><div class="line" id="231433"><span class="nick" style="color:#3c5b35"><a href="#231433" label="[23:14:33]">&lt;fossy&gt;</a></span><span class="message">including or excluding the precompiled modules</span></div><div class="line" id="231437"><span class="nick" style="color:#6c3d55"><a href="#231437" label="[23:14:37]">&lt;malina&gt;</a></span><span class="message">(I mean only if you happened ot have it lying around) nevermind now.</span></div><div class="line" id="231448"><span class="nick" style="color:#6c3d55"><a href="#231448" label="[23:14:48]">&lt;malina&gt;</a></span><span class="message">I onestly have no idea, but anything which would be partof the 'full package'</span></div><div class="line" id="231452"><span class="nick" style="color:#6c3d55"><a href="#231452" label="[23:14:52]">&lt;malina&gt;</a></span><span class="message">so probably including.</span></div><div class="line" id="231500"><span class="nick" style="color:#6c3d55"><a href="#231500" label="[23:15:00]">&lt;malina&gt;</a></span><span class="message">154M?</span></div><div class="line" id="231504"><span class="nick" style="color:#6c3d55"><a href="#231504" label="[23:15:04]">&lt;malina&gt;</a></span><span class="message">75?</span></div><div class="line" id="231510"><span class="nick" style="color:#3c5b35"><a href="#231510" label="[23:15:10]">&lt;fossy&gt;</a></span><span class="message">20 ish</span></div><div class="line" id="231520"><span class="nick" style="color:#3c5b35"><a href="#231520" label="[23:15:20]">&lt;fossy&gt;</a></span><span class="message">when i did it statically linked against musl on i686</span></div><div class="line" id="231523"><span class="nick" style="color:#6c3d55"><a href="#231523" label="[23:15:23]">&lt;malina&gt;</a></span><span class="message">ok, that is great</span></div><div class="line" id="231532"><span class="nick" style="color:#389600"><a href="#231532" label="[23:15:32]">&lt;stikonas[m]&gt;</a></span><span class="message">Guile is 50mb isn't it?</span></div><div class="line" id="231545"><span class="nick" style="color:#389600"><a href="#231545" label="[23:15:45]">&lt;stikonas[m]&gt;</a></span><span class="message">Oh,maybe less with musl</span></div><div class="line" id="231551"><span class="nick" style="color:#6c3d55"><a href="#231551" label="[23:15:51]">&lt;malina&gt;</a></span><span class="message">I mean, my system package, which is dynamic and I don't know what is in it to be honest, is 45m</span></div><div class="line" id="231558"><span class="nick" style="color:#6c3d55"><a href="#231558" label="[23:15:58]">&lt;malina&gt;</a></span><span class="message">but anyway 20-50 is within reasonable for me</span></div><div class="line" id="231601"><span class="nick" style="color:#3c5b35"><a href="#231601" label="[23:16:01]">&lt;fossy&gt;</a></span><span class="message">tthis was a very minimal install too</span></div><div class="line" id="231616"><span class="nick" style="color:#389600"><a href="#231616" label="[23:16:16]">&lt;stikonas[m]&gt;</a></span><span class="message">Guile static is in guix bootstrap seeds</span></div><div class="line" id="231635"><span class="nick" style="color:#6c3d55"><a href="#231635" label="[23:16:35]">&lt;malina&gt;</a></span><span class="message">20 definitely is nice, musl is leaner ye. actually my init here (superman) is a dietlibc static binary if I set it to static</span></div><div class="line" id="231640"><span class="nick" style="color:#6c3d55"><a href="#231640" label="[23:16:40]">&lt;malina&gt;</a></span><span class="message">init-env -stc</span></div><div class="line" id="231656"><span class="nick" style="color:#6c3d55"><a href="#231656" label="[23:16:56]">&lt;malina&gt;</a></span><span class="message">init-env -dyn and is back on my (glibc) system</span></div><div class="line" id="231749"><span class="nick" style="color:#6c3d55"><a href="#231749" label="[23:17:49]">&lt;malina&gt;</a></span><span class="message">been running the static a lonnnng time though as it just is , I mean, I always compile and install right into my only box, for half a decade, so it MUST survive. static one just seems probabnly a little bit more 'resolute' :)</span></div><div class="line" id="231838"><span class="nick" style="color:#6c3d55"><a href="#231838" label="[23:18:38]">&lt;malina&gt;</a></span><span class="message">root         1  0.0  0.0    512   404 ?        Ss   18:03   0:17 init /init</span></div><div class="line" id="231914"><span class="nick" style="color:#2e2a4a"><a href="#231914" label="[23:19:14]">&lt;yt_&gt;</a></span><span class="message">OriansJ: silly question but what is the proper way to define FILE in non bootstrap mode?  A typedef I guess, but to what?</span></div><div class="line" id="232049"><span class="nick" style="color:#80b1d3"><a href="#232049" label="[23:20:49]">&lt;mihi&gt;</a></span><span class="message">yt_, probably what he did in M2libc: <a rel="nofollow" href="https://github.com/oriansj/M2libc/blob/main/stdio.c#L44">https://github.com/oriansj/M2libc/blob/main/stdio.c#L44</a> </span></div><div class="line" id="232055"><span class="nick" style="color:#2e2a4a"><a href="#232055" label="[23:20:55]">&lt;ullbeking&gt;</a></span><span class="message">ok, back now...</span></div><div class="line" id="232114"><span class="nick" style="color:#2e2a4a"><a href="#232114" label="[23:21:14]">&lt;ullbeking&gt;</a></span><span class="message">mihi: thank you for suggestion re: scheme :-)</span></div><div class="line" id="232124"><span class="nick" style="color:#2e2a4a"><a href="#232124" label="[23:21:24]">&lt;yt_&gt;</a></span><span class="message">mihi: thanks! I was looking for that but couldn't find it</span></div><div class="line" id="232143"><span class="nick" style="color:#2e2a4a"><a href="#232143" label="[23:21:43]">&lt;ullbeking&gt;</a></span><span class="message">i'm going to read up, around, sideways, all over the place, and orient myself to all of this... it's fascinating!!</span></div><div class="line" id="233235"><span class="nick" style="color:#6c3d55"><a href="#233235" label="[23:32:35]">&lt;malina&gt;</a></span><span class="message">configure: error: 'mescc' failed to compile conftest.c. in tinycc.  gforce_de1977 , I used something rain1 pasted a day or 2 ago , which patched volatile out of conftest.c but then this happens.</span></div><div class="line" id="233414"><span class="nick" style="color:#6b8072"><a href="#233414" label="[23:34:14]">&lt;stikonas&gt;</a></span><span class="message">well, fossy will soon push his build recipe</span></div><div class="line" id="233425"><span class="nick" style="color:#6d2462"><a href="#233425" label="[23:34:25]">&lt;gforce_de1977&gt;</a></span><span class="message">malina: i remember: (substitute* &quot;conftest.c&quot; ((&quot;volatile&quot;) &quot;&quot;))</span></div><div class="line" id="233505"><span class="nick" style="color:#6d2462"><a href="#233505" label="[23:35:05]">&lt;gforce_de1977&gt;</a></span><span class="message">malina: can not help for now, must leave - sorry</span></div><div class="line" id="233509"><span class="nick" style="color:#6c3d55"><a href="#233509" label="[23:35:09]">&lt;malina&gt;</a></span><span class="message">np, thanks</span></div><div class="line" id="234116"><span class="nick" style="color:#8dd3c7"><a href="#234116" label="[23:41:16]">&lt;OriansJ&gt;</a></span><span class="message">ullbeking: always ask questions if anything isn't clear in the bootstrap because all of it must be beyound question.</span></div><div class="line" id="234140"><span class="nick" style="color:#2e2a4a"><a href="#234140" label="[23:41:40]">&lt;ullbeking&gt;</a></span><span class="message">thank you for being so supportive, OriansJ :-)</span></div><div class="line" id="234212"><span class="nick" style="color:#2e2a4a"><a href="#234212" label="[23:42:12]">&lt;ullbeking&gt;</a></span><span class="message">right now what I'm doing is trying to get a view of the forest, and...</span></div><div class="line" id="234216"><span class="nick" style="color:#8dd3c7"><a href="#234216" label="[23:42:16]">&lt;OriansJ&gt;</a></span><span class="message">ullbeking: we love developers here ^_^ and we want to help them as much as possible</span></div><div class="line" id="234227"><span class="nick" style="color:#2e2a4a"><a href="#234227" label="[23:42:27]">&lt;ullbeking&gt;</a></span><span class="message">to look at build tools, build chain, and setting up qemi</span></div><div class="line" id="234232"><span class="nick" style="color:#2e2a4a"><a href="#234232" label="[23:42:32]">&lt;ullbeking&gt;</a></span><span class="message">qemu*</span></div><div class="line" id="234244"><span class="nick" style="color:#2e2a4a"><a href="#234244" label="[23:42:44]">&lt;ullbeking&gt;</a></span><span class="message">22:42 &lt;OriansJ&gt; ullbeking: we love developers here ^_^ and we want to help them as much as possible</span></div><div class="line" id="234244"><span class="nick" style="color:#2e2a4a"><a href="#234244" label="[23:42:44]">&lt;ullbeking&gt;</a></span><span class="message">you are &lt;3</span></div><div class="line" id="234324"><span class="nick" style="color:#6c3d55"><a href="#234324" label="[23:43:24]">&lt;malina&gt;</a></span><span class="message">clearly using the right perfume there OriansJ ! ,)</span></div><div class="line" id="234424"><span class="nick" style="color:#6c3d55"><a href="#234424" label="[23:44:24]">&lt;malina&gt;</a></span><span class="message">no, I can confirm ullbeking , he does , along with janneke  and the lot in general, to be fairly positive peeps :)</span></div><div class="line" id="234432"><span class="nick" style="color:#6c3d55"><a href="#234432" label="[23:44:32]">&lt;malina&gt;</a></span><span class="message">on a side note, is od always big-endian?</span></div><div class="line" id="234511"><span class="nick" style="color:#6c3d55"><a href="#234511" label="[23:45:11]">&lt;malina&gt;</a></span><span class="message">ah .. no.</span></div><div class="line" id="234516"><span class="nick" style="color:#2e2a4a"><a href="#234516" label="[23:45:16]">&lt;ullbeking&gt;</a></span><span class="message">i am getting a very positive vibe from this channel, i love it here already :-)</span></div><div class="line" id="234533"><span class="nick" style="color:#2e2a4a"><a href="#234533" label="[23:45:33]">&lt;ullbeking&gt;</a></span><span class="message">ty malina</span></div><div class="line" id="234609"><span class="nick" style="color:#2e2a4a"><a href="#234609" label="[23:46:09]">&lt;ullbeking&gt;</a></span><span class="message">one thing i confess is that i don't know qemu as well as I should, so I should probably go and learn some of qemu now :-)</span></div><div class="line" id="234713"><span class="nick" style="color:#2e2a4a"><a href="#234713" label="[23:47:13]">&lt;ullbeking&gt;</a></span><span class="message">is qemu an important part of your toolchains and build environments, folks?  i mean, for people who work on bootrappanble projects?</span></div><div class="line" id="234717"><span class="nick" style="color:#6b8072"><a href="#234717" label="[23:47:17]">&lt;stikonas&gt;</a></span><span class="message">qemu is only used in live-bootstrap, and only so that we don't need to reboot</span></div><div class="line" id="234731"><span class="nick" style="color:#6b8072"><a href="#234731" label="[23:47:31]">&lt;stikonas&gt;</a></span><span class="message">otherwise you would have to reboot into it there</span></div><div class="line" id="234736"><span class="nick" style="color:#6b8072"><a href="#234736" label="[23:47:36]">&lt;stikonas&gt;</a></span><span class="message">other than that qemu is not used</span></div><div class="line" id="234751"><span class="nick" style="color:#6b8072"><a href="#234751" label="[23:47:51]">&lt;stikonas&gt;</a></span><span class="message">so you don't really need to learn qemu. You can if you want but not required here</span></div><div class="line" id="234811"><span class="nick" style="color:#2e2a4a"><a href="#234811" label="[23:48:11]">&lt;ullbeking&gt;</a></span><span class="message">ok, cool</span></div><div class="line" id="234819"><span class="nick" style="color:#80b1d3"><a href="#234819" label="[23:48:19]">&lt;mihi&gt;</a></span><span class="message">ullbeking, you probably want to use some kind of virtualization software when testing bootstrap scenarios, but it does not have to be qemu (I use VirtualBox)</span></div><div class="line" id="234831"><span class="nick" style="color:#8dd3c7"><a href="#234831" label="[23:48:31]">&lt;OriansJ&gt;</a></span><span class="message">very little is required.</span></div><div class="line" id="234854"><span class="nick" style="color:#80b1d3"><a href="#234854" label="[23:48:54]">&lt;mihi&gt;</a></span><span class="message">(yes I know, not part of Guix due to bootstrapping issues for its virtual BIOS)</span></div><div class="line" id="234855"><span class="nick" style="color:#2e2a4a"><a href="#234855" label="[23:48:55]">&lt;ullbeking&gt;</a></span><span class="message">my power9 workstation needs a bit of maintenance becaiuse i've bricked the BMC (ouch!), so i'll work on other isas first</span></div><div class="line" id="234855"><span class="nick" style="color:#8dd3c7"><a href="#234855" label="[23:48:55]">&lt;OriansJ&gt;</a></span><span class="message">you can do everything in Scheme, C or you can get down to the metal</span></div><div class="line" id="234904"><span class="nick" style="color:#2e2a4a"><a href="#234904" label="[23:49:04]">&lt;ullbeking&gt;</a></span><span class="message">how about C++?</span></div><div class="line" id="234917"><span class="nick" style="color:#6b8072"><a href="#234917" label="[23:49:17]">&lt;stikonas&gt;</a></span><span class="message">not for low level bootstrap...</span></div><div class="line" id="234930"><span class="nick" style="color:#8dd3c7"><a href="#234930" label="[23:49:30]">&lt;OriansJ&gt;</a></span><span class="message">ullbeking: well that is a much bigger problem than a C compiler</span></div><div class="line" id="234935"><span class="nick" style="color:#80b1d3"><a href="#234935" label="[23:49:35]">&lt;mihi&gt;</a></span><span class="message">ullbeking, once you have a C++ compiler, the bootstrap is probably done :D</span></div><div class="line" id="234943"><span class="nick" style="color:#6b8072"><a href="#234943" label="[23:49:43]">&lt;stikonas&gt;</a></span><span class="message">simplest way to bootstrap C++ compiler is to use gcc 4.7</span></div><div class="line" id="234950"><span class="nick" style="color:#2e2a4a"><a href="#234950" label="[23:49:50]">&lt;ullbeking&gt;</a></span><span class="message">this is a little side topic.... but i have a belief that lisp programmers and c++ developers converge totally in some very near universe</span></div><div class="line" id="235034"><span class="nick" style="color:#8dd3c7"><a href="#235034" label="[23:50:34]">&lt;OriansJ&gt;</a></span><span class="message">ullbeking: only if C++ gains proper garbage collection and Scheme finally gives up the parens</span></div><div class="line" id="235054"><span class="nick" style="color:#2e2a4a"><a href="#235054" label="[23:50:54]">&lt;ullbeking&gt;</a></span><span class="message">OriansJ: peel the onion...</span></div><div class="line" id="235057"><span class="nick" style="color:#2e2a4a"><a href="#235057" label="[23:50:57]">&lt;ullbeking&gt;</a></span><span class="message">;-)</span></div><div class="line" id="235211"><span class="nick" style="color:#8dd3c7"><a href="#235211" label="[23:52:11]">&lt;OriansJ&gt;</a></span><span class="message">but all languages converge on the problem of getting humans to write code together without making a huge mess or die hoping to survive on the brilliance of a few minds.</span></div><div class="line" id="235332"><span class="nick" style="color:#2e2a4a"><a href="#235332" label="[23:53:32]">&lt;ullbeking&gt;</a></span><span class="message">this is why i hate snobbery in software and i have so much respect for software that works resiliently  or even _at all_</span></div><div class="line" id="235404"><span class="nick" style="color:#2e2a4a"><a href="#235404" label="[23:54:04]">&lt;ullbeking&gt;</a></span><span class="message">ofc a professional strives to improve but....</span></div><div class="line" id="235448"><span class="nick" style="color:#2e2a4a"><a href="#235448" label="[23:54:48]">&lt;ullbeking&gt;</a></span><span class="message">i don't like it how so many devs have this syndrome where they prefix every introduction to some presentation of their code with...</span></div><div class="line" id="235452"><span class="nick" style="color:#8dd3c7"><a href="#235452" label="[23:54:52]">&lt;OriansJ&gt;</a></span><span class="message">ullbeking: well people who feel that they have to justify the tools they use, usually do so because they fear people will discover they are bad programmers. But the truth is all humans are bad programmers but it is ok, approximation towards solution usually works.</span></div><div class="line" id="235505"><span class="nick" style="color:#2e2a4a"><a href="#235505" label="[23:55:05]">&lt;ullbeking&gt;</a></span><span class="message">&quot;this is really crappy code and it should be better, but here it is.&quot;</span></div><div class="line" id="235550"><span class="nick" style="color:#2e2a4a"><a href="#235550" label="[23:55:50]">&lt;ullbeking&gt;</a></span><span class="message">the fact that you put yourself out there and make a serious effort is enough to gain respect from me</span></div><div class="line" id="235635"><span class="nick" style="color:#2e2a4a"><a href="#235635" label="[23:56:35]">&lt;ullbeking&gt;</a></span><span class="message">i'm trying to think of what my first task should be</span></div><div class="line" id="235637"><span class="nick" style="color:#8dd3c7"><a href="#235637" label="[23:56:37]">&lt;OriansJ&gt;</a></span><span class="message">ullbeking: well even Knuth's perfect code still has bugs</span></div><div class="line" id="235650"><span class="nick" style="color:#3c5b35"><a href="#235650" label="[23:56:50]">&lt;fossy&gt;</a></span><span class="message">seL4 &lt;3</span></div><div class="line" id="235653"><span class="nick" style="color:#8dd3c7"><a href="#235653" label="[23:56:53]">&lt;OriansJ&gt;</a></span><span class="message">ullbeking: your first task is to have fun</span></div><div class="line" id="235702"><span class="nick" style="color:#2e2a4a"><a href="#235702" label="[23:57:02]">&lt;ullbeking&gt;</a></span><span class="message">OriansJ: i think literate programming was one of his greatest contributions ever</span></div><div class="line" id="235710"><span class="nick" style="color:#2e2a4a"><a href="#235710" label="[23:57:10]">&lt;ullbeking&gt;</a></span><span class="message">OriansJ: you rock &lt;3</span></div><div class="line" id="235722"><span class="nick" style="color:#8dd3c7"><a href="#235722" label="[23:57:22]">&lt;OriansJ&gt;</a></span><span class="message">fossy: seL4 the proof had a flaw and a buffer overflow vulnerabity because of it</span></div><div class="line" id="235731"><span class="nick" style="color:#3c5b35"><a href="#235731" label="[23:57:31]">&lt;fossy&gt;</a></span><span class="message">OriansJ: oof</span></div><div class="line" id="235744"><span class="nick" style="color:#8dd3c7"><a href="#235744" label="[23:57:44]">&lt;OriansJ&gt;</a></span><span class="message">fossy: humans make mistakes</span></div><div class="line" id="235754"><span class="nick" style="color:#3c5b35"><a href="#235754" label="[23:57:54]">&lt;fossy&gt;</a></span><span class="message">proving the proofs time :P /s</span></div><div class="line" id="235800"><span class="nick" style="color:#3c5b35"><a href="#235800" label="[23:58:00]">&lt;fossy&gt;</a></span><span class="message">yea</span></div><div class="line" id="235800"><span class="nick" style="color:#8dd3c7"><a href="#235800" label="[23:58:00]">&lt;OriansJ&gt;</a></span><span class="message">even Millions of dollars and 10 years doesn't mean all bugs are gone</span></div><div class="line" id="235809"><span class="nick" style="color:#3c5b35"><a href="#235809" label="[23:58:09]">&lt;fossy&gt;</a></span><span class="message">ullbeking: which power9 workstation do you have?</span></div><div class="line" id="235811"><span class="nick" style="color:#2e2a4a"><a href="#235811" label="[23:58:11]">&lt;ullbeking&gt;</a></span><span class="message">in practical terms, i need to flash the BMC chip on my workstation, maybe even tomorrow</span></div><div class="line" id="235819"><span class="nick" style="color:#2e2a4a"><a href="#235819" label="[23:58:19]">&lt;ullbeking&gt;</a></span><span class="message">fossy: Talos II</span></div><div class="line" id="235834"><span class="nick" style="color:#8dd3c7"><a href="#235834" label="[23:58:34]">&lt;OriansJ&gt;</a></span><span class="message">nice</span></div><div class="line" id="235852"><span class="nick" style="color:#8dd3c7"><a href="#235852" label="[23:58:52]">&lt;OriansJ&gt;</a></span><span class="message">my wife would kill me if I bought one before I paid off the house</span></div><div class="line" id="235854"><span class="nick" style="color:#234e69"><a href="#235854" label="[23:58:54]">&lt;deesix&gt;</a></span><span class="message">ullbeking, I used a bit of qemu user mode emulation during development, but for low level stuff you really want to test on the actual hardware (the emulation sometimes isn't perfect due to bugs or optimizations).</span></div><div class="line" id="235904"><span class="nick" style="color:#2e2a4a"><a href="#235904" label="[23:59:04]">&lt;ullbeking&gt;</a></span><span class="message">i realized that there is some low hanging fruit for updating the gcc 4.7 bootstrapping chain for power9</span></div><div class="line" id="235932"><span class="nick" style="color:#2e2a4a"><a href="#235932" label="[23:59:32]">&lt;ullbeking&gt;</a></span><span class="message">deesix: yes, i agree 100%, always have.  especially with the kind of work i do (audio dsp)</span></div><br /></div></body></html>