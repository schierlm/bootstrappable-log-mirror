<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2024-06-08.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000359"><span class="nick" style="color:#389600"><a href="#000359" label="[00:03:59]">&lt;oriansj&gt;</a></span><span class="message">nice</span></div><div class="line" id="011716"><span class="nick" style="color:#8dd3c7"><a href="#011716" label="[01:17:16]">&lt;aggi&gt;</a></span><span class="message">getting closer, tccboot initially linked against an even older tcc-0.9.21...</span></div><div class="line" id="011738"><span class="nick" style="color:#8dd3c7"><a href="#011738" label="[01:17:38]">&lt;aggi&gt;</a></span><span class="message">hence didn't need various symbols</span></div><div class="line" id="011833"><span class="nick" style="color:#8dd3c7"><a href="#011833" label="[01:18:33]">&lt;aggi&gt;</a></span><span class="message">that's for JIT compilation of linux-2.4</span></div><div class="line" id="011911"><span class="nick" style="color:#8dd3c7"><a href="#011911" label="[01:19:11]">&lt;aggi&gt;</a></span><span class="message">yet for AoT compilation, a test-case was reported somewhere on github, that referred to a tcc-0.9.26..27</span></div><div class="line" id="011958"><span class="nick" style="color:#8dd3c7"><a href="#011958" label="[01:19:58]">&lt;aggi&gt;</a></span><span class="message">last time i tried, the kernel aot-compiled with tcc-0.9.27 loaded, booted and crashed</span></div><div class="line" id="012039"><span class="nick" style="color:#8dd3c7"><a href="#012039" label="[01:20:39]">&lt;aggi&gt;</a></span><span class="message">and i recompiled/linked a tccboot-loader against that version too... in this case tccboot spawned, and got stuck/crashed</span></div><div class="line" id="012151"><span class="nick" style="color:#8dd3c7"><a href="#012151" label="[01:21:51]">&lt;aggi&gt;</a></span><span class="message">tccboot-loader introduced a circular dependency, but i want a confirmation a linux-2.x can be compiled/linked/loaded with tcc, and does not crash</span></div><div class="line" id="012214"><span class="nick" style="color:#8dd3c7"><a href="#012214" label="[01:22:14]">&lt;aggi&gt;</a></span><span class="message">because, tccboot.iso does work as it should</span></div><div class="line" id="012222"><span class="nick" style="color:#8dd3c7"><a href="#012222" label="[01:22:22]">&lt;aggi&gt;</a></span><span class="message">and isn't reproducible yet</span></div><div class="line" id="012247"><span class="nick" style="color:#8dd3c7"><a href="#012247" label="[01:22:47]">&lt;aggi&gt;</a></span><span class="message">nor was the AoT compilation of linux-2.x reproducible, without a kernel-crash</span></div><div class="line" id="012306"><span class="nick" style="color:#2e2a4a"><a href="#012306" label="[01:23:06]">&lt;pabs3&gt;</a></span><span class="message">Googulator: just sent a request for SWH to auto-save ghc.git <a rel="nofollow" href="https://archive.softwareheritage.org/save/">https://archive.softwareheritage.org/save/</a>  <a rel="nofollow" href="https://archive.softwareheritage.org/save/list/">https://archive.softwareheritage.org/save/list/</a> </span></div><div class="line" id="012330"><span class="nick" style="color:#8dd3c7"><a href="#012330" label="[01:23:30]">&lt;aggi&gt;</a></span><span class="message">yet, if i can identify the correct tcc-version for tccboot, then i may bisect/hack AoT compilation of it too... bingo.</span></div><div class="line" id="012501"><span class="nick" style="color:#8dd3c7"><a href="#012501" label="[01:25:01]">&lt;aggi&gt;</a></span><span class="message">that's why, i may want to carefully review tccboot, to see exactly which tcc-version was desirable</span></div><div class="line" id="012530"><span class="nick" style="color:#8dd3c7"><a href="#012530" label="[01:25:30]">&lt;aggi&gt;</a></span><span class="message">according to my memories, #bootstrappable used tcc-0.9.27, and had some patch for fiwix kernel too</span></div><div class="line" id="012548"><span class="nick" style="color:#8dd3c7"><a href="#012548" label="[01:25:48]">&lt;aggi&gt;</a></span><span class="message">yet this recent tcc seems a slightly different beast than the old one from year-2004</span></div><div class="line" id="012717"><span class="nick" style="color:#8dd3c7"><a href="#012717" label="[01:27:17]">&lt;aggi&gt;</a></span><span class="message">and i cannot conclude yet, which was the best tcc-version to pick, to support whatever: bootstrapping gcc/binutils, JIT compile/link kernel, AoT compile/link kernel</span></div><div class="line" id="012816"><span class="nick" style="color:#8dd3c7"><a href="#012816" label="[01:28:16]">&lt;aggi&gt;</a></span><span class="message">how had #bootstrappable avoided a potential circular dependency for any bootloader to compile with whatever?</span></div><div class="line" id="012958"><span class="nick" style="color:#8dd3c7"><a href="#012958" label="[01:29:58]">&lt;aggi&gt;</a></span><span class="message">probably stupid question... nonetheless</span></div><div class="line" id="013139"><span class="nick" style="color:#6b8072"><a href="#013139" label="[01:31:39]">&lt;stikonas&gt;</a></span><span class="message">aggi: what do you mean by bootloader?</span></div><div class="line" id="013151"><span class="nick" style="color:#6b8072"><a href="#013151" label="[01:31:51]">&lt;stikonas&gt;</a></span><span class="message">we don't use any bootloader in #bootstrappable</span></div><div class="line" id="013204"><span class="nick" style="color:#6b8072"><a href="#013204" label="[01:32:04]">&lt;stikonas&gt;</a></span><span class="message">at least not until your final system is ready for disk</span></div><div class="line" id="013226"><span class="nick" style="color:#6b8072"><a href="#013226" label="[01:32:26]">&lt;stikonas&gt;</a></span><span class="message">but yes, tcc 0.9.27 could build fiwix</span></div><div class="line" id="013229"><span class="nick" style="color:#6b8072"><a href="#013229" label="[01:32:29]">&lt;stikonas&gt;</a></span><span class="message">and then kexec into it</span></div><div class="line" id="013241"><span class="nick" style="color:#6b8072"><a href="#013241" label="[01:32:41]">&lt;stikonas&gt;</a></span><span class="message">we'll probably switch to tcc 0.9.28 soonish for riscv64 support</span></div><div class="line" id="013427"><span class="nick" style="color:#8dd3c7"><a href="#013427" label="[01:34:27]">&lt;aggi&gt;</a></span><span class="message">stikonas: imagine if there was any computer (real-hardware), which starts, and knew how to read some bootsector, and jump to anything written in ASM for example, calling bios routines</span></div><div class="line" id="013503"><span class="nick" style="color:#8dd3c7"><a href="#013503" label="[01:35:03]">&lt;aggi&gt;</a></span><span class="message">a system does need to load something, even if it was some tinybasic punched paper strip</span></div><div class="line" id="013526"><span class="nick" style="color:#8dd3c7"><a href="#013526" label="[01:35:26]">&lt;aggi&gt;</a></span><span class="message">or, in case of tccboot, it's first syslinux, then tccboot (with related circular dependencies)</span></div><div class="line" id="013536"><span class="nick" style="color:#6b8072"><a href="#013536" label="[01:35:36]">&lt;stikonas&gt;</a></span><span class="message">well, yeah, ideally you would have something  that can read some simple machine code from paper tape or something like that</span></div><div class="line" id="013554"><span class="nick" style="color:#6b8072"><a href="#013554" label="[01:35:54]">&lt;stikonas&gt;</a></span><span class="message">in the absence of that, we just use prepared disks / USB devices or something like that</span></div><div class="line" id="013605"><span class="nick" style="color:#6b8072"><a href="#013605" label="[01:36:05]">&lt;stikonas&gt;</a></span><span class="message">which of course introduces some dependency on another machine</span></div><div class="line" id="013638"><span class="nick" style="color:#8dd3c7"><a href="#013638" label="[01:36:38]">&lt;aggi&gt;</a></span><span class="message">this answers the question, insofar there is potential circular dependencies for the official bootstrapable itself too</span></div><div class="line" id="013948"><span class="nick" style="color:#8dd3c7"><a href="#013948" label="[01:39:48]">&lt;aggi&gt;</a></span><span class="message">such as, an assembler is needed, the assembler has to be compiled with gcc, and then the assembler can process some early-stage bootstrapping code to arrive at some gcc again later</span></div><div class="line" id="014018"><span class="nick" style="color:#8dd3c7"><a href="#014018" label="[01:40:18]">&lt;aggi&gt;</a></span><span class="message">although you did implement various miniature assembler, compiler, libc etc.</span></div><div class="line" id="014046"><span class="nick" style="color:#8dd3c7"><a href="#014046" label="[01:40:46]">&lt;aggi&gt;</a></span><span class="message">don't know how that's loaded by a x86 BIOS (16bit real-mode) to proceed anywhere</span></div><div class="line" id="014601"><span class="nick" style="color:#8dd3c7"><a href="#014601" label="[01:46:01]">&lt;aggi&gt;</a></span><span class="message">besides, tcc hasn't got support for x86 16bit real-mode</span></div><div class="line" id="015143"><span class="nick" style="color:#6b8072"><a href="#015143" label="[01:51:43]">&lt;stikonas&gt;</a></span><span class="message">no, assembler is not needed</span></div><div class="line" id="015149"><span class="nick" style="color:#6b8072"><a href="#015149" label="[01:51:49]">&lt;stikonas&gt;</a></span><span class="message">assembler we can build with hexers</span></div><div class="line" id="015152"><span class="nick" style="color:#6b8072"><a href="#015152" label="[01:51:52]">&lt;stikonas&gt;</a></span><span class="message">e.g. hex2</span></div><div class="line" id="015205"><span class="nick" style="color:#6b8072"><a href="#015205" label="[01:52:05]">&lt;stikonas&gt;</a></span><span class="message">it can go down to as little as 200 bytes of code</span></div><div class="line" id="015212"><span class="nick" style="color:#6b8072"><a href="#015212" label="[01:52:12]">&lt;stikonas&gt;</a></span><span class="message">(see builder-hex0-mini)</span></div><div class="line" id="015230"><span class="nick" style="color:#6b8072"><a href="#015230" label="[01:52:30]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/ironmeld/builder-hex0/blob/main/builder-hex0-x86-stage1.hex0">https://github.com/ironmeld/builder-hex0/blob/main/builder-hex0-x86-stage1.hex0</a> </span></div><div class="line" id="015245"><span class="nick" style="color:#6b8072"><a href="#015245" label="[01:52:45]">&lt;stikonas&gt;</a></span><span class="message">well, this builds to 512 byte MBR sector</span></div><div class="line" id="015249"><span class="nick" style="color:#6b8072"><a href="#015249" label="[01:52:49]">&lt;stikonas&gt;</a></span><span class="message">but large part of it is padding</span></div><div class="line" id="015307"><span class="nick" style="color:#80b1d3"><a href="#015307" label="[01:53:07]">&lt;Googulator&gt;</a></span><span class="message">yeah, 192 bytes of actual code &amp; initialized data, plus some boilerplate to convince stubborn BIOSes that it's a valid MBR</span></div><div class="line" id="015437"><span class="nick" style="color:#6b8072"><a href="#015437" label="[01:54:37]">&lt;stikonas&gt;</a></span><span class="message">can probably be compressed a bit further</span></div><div class="line" id="015439"><span class="nick" style="color:#6b8072"><a href="#015439" label="[01:54:39]">&lt;stikonas&gt;</a></span><span class="message">e.g.</span></div><div class="line" id="015440"><span class="nick" style="color:#6b8072"><a href="#015440" label="[01:54:40]">&lt;stikonas&gt;</a></span><span class="message">EA 11 7C 00 00</span></div><div class="line" id="015451"><span class="nick" style="color:#6b8072"><a href="#015451" label="[01:54:51]">&lt;stikonas&gt;</a></span><span class="message">this is jump to 0x00007C11  address</span></div><div class="line" id="015508"><span class="nick" style="color:#6b8072"><a href="#015508" label="[01:55:08]">&lt;stikonas&gt;</a></span><span class="message">I guess one can use short 8 bit relative jumps</span></div><div class="line" id="015520"><span class="nick" style="color:#6b8072"><a href="#015520" label="[01:55:20]">&lt;stikonas&gt;</a></span><span class="message">that's 1 byte for opcode and 1 byte for relative jump</span></div><div class="line" id="015542"><span class="nick" style="color:#6b8072"><a href="#015542" label="[01:55:42]">&lt;stikonas&gt;</a></span><span class="message">there is also something similar for UEFI, though quite a bit larger</span></div><div class="line" id="015551"><span class="nick" style="color:#80b1d3"><a href="#015551" label="[01:55:51]">&lt;Googulator&gt;</a></span><span class="message">no, that's actually there for a reason</span></div><div class="line" id="015552"><span class="nick" style="color:#6b8072"><a href="#015552" label="[01:55:52]">&lt;stikonas&gt;</a></span><span class="message">UEFI hex0 is maybe 800 bytes</span></div><div class="line" id="015600"><span class="nick" style="color:#8dd3c7"><a href="#015600" label="[01:56:00]">&lt;aggi&gt;</a></span><span class="message">MBR layout and asm hasn't been my strenght (although i did dig a little into this more than 20years ago), i was curious nonetheless</span></div><div class="line" id="015602"><span class="nick" style="color:#80b1d3"><a href="#015602" label="[01:56:02]">&lt;Googulator&gt;</a></span><span class="message">sets CS to a known value</span></div><div class="line" id="015607"><span class="nick" style="color:#6b8072"><a href="#015607" label="[01:56:07]">&lt;stikonas&gt;</a></span><span class="message">though large part of it is PE32+ header</span></div><div class="line" id="015617"><span class="nick" style="color:#6b8072"><a href="#015617" label="[01:56:17]">&lt;stikonas&gt;</a></span><span class="message">Googulator: oh I see</span></div><div class="line" id="015622"><span class="nick" style="color:#80b1d3"><a href="#015622" label="[01:56:22]">&lt;Googulator&gt;</a></span><span class="message">a healthy BIOS doesn't need it, but some buggy ones do</span></div><div class="line" id="015629"><span class="nick" style="color:#8dd3c7"><a href="#015629" label="[01:56:29]">&lt;aggi&gt;</a></span><span class="message">meaning, #bootstrappable beginning with stage1.hex0 can run on real x86 hardware, and utilize bios-calls?</span></div><div class="line" id="015656"><span class="nick" style="color:#6b8072"><a href="#015656" label="[01:56:56]">&lt;stikonas&gt;</a></span><span class="message">yes, it can</span></div><div class="line" id="015658"><span class="nick" style="color:#80b1d3"><a href="#015658" label="[01:56:58]">&lt;Googulator&gt;</a></span><span class="message">basically yes, stage1.hex0 is converted to binary, and written to the MBR</span></div><div class="line" id="015709"><span class="nick" style="color:#80b1d3"><a href="#015709" label="[01:57:09]">&lt;Googulator&gt;</a></span><span class="message">by rootfs.py</span></div><div class="line" id="015722"><span class="nick" style="color:#6b8072"><a href="#015722" label="[01:57:22]">&lt;stikonas&gt;</a></span><span class="message">though you can convert it yourself into binary</span></div><div class="line" id="015727"><span class="nick" style="color:#6b8072"><a href="#015727" label="[01:57:27]">&lt;stikonas&gt;</a></span><span class="message">that's not a problem</span></div><div class="line" id="015735"><span class="nick" style="color:#6b8072"><a href="#015735" label="[01:57:35]">&lt;stikonas&gt;</a></span><span class="message">the problem is only getting it onto actual machine</span></div><div class="line" id="015735"><span class="nick" style="color:#80b1d3"><a href="#015735" label="[01:57:35]">&lt;Googulator&gt;</a></span><span class="message">that's literally the only binary machine code that's on the bootstrap disk</span></div><div class="line" id="015741"><span class="nick" style="color:#80b1d3"><a href="#015741" label="[01:57:41]">&lt;Googulator&gt;</a></span><span class="message">everything else is source</span></div><div class="line" id="015809"><span class="nick" style="color:#80b1d3"><a href="#015809" label="[01:58:09]">&lt;Googulator&gt;</a></span><span class="message">stikonas: more speciflcally, the problem is getting only that onto the machine, and nothing else, guaranteed</span></div><div class="line" id="015823"><span class="nick" style="color:#8dd3c7"><a href="#015823" label="[01:58:23]">&lt;aggi&gt;</a></span><span class="message">interesting...</span></div><div class="line" id="015914"><span class="nick" style="color:#6b8072"><a href="#015914" label="[01:59:14]">&lt;stikonas&gt;</a></span><span class="message">well, that too</span></div><div class="line" id="015930"><span class="nick" style="color:#80b1d3"><a href="#015930" label="[01:59:30]">&lt;Googulator&gt;</a></span><span class="message">a malicious actor infecting the host system could pretend to write just those 512 bytes, but actually put more binary code there in secret, thus propagating to the bootstrap system</span></div><div class="line" id="015937"><span class="nick" style="color:#80b1d3"><a href="#015937" label="[01:59:37]">&lt;Googulator&gt;</a></span><span class="message">and compromising the bootstrap</span></div><div class="line" id="020000"><span class="nick" style="color:#6b8072"><a href="#020000" label="[02:00:00]">&lt;stikonas&gt;</a></span><span class="message">you needfront panel with PDP-8 switches :)</span></div><div class="line" id="020018"><span class="nick" style="color:#80b1d3"><a href="#020018" label="[02:00:18]">&lt;Googulator&gt;</a></span><span class="message">which is why I devised the &quot;trusted Flash drive&quot; with swappable SPI flash</span></div><div class="line" id="020050"><span class="nick" style="color:#80b1d3"><a href="#020050" label="[02:00:50]">&lt;Googulator&gt;</a></span><span class="message">smallest SPI flash on the market is 256 bytes, largest is 256 MiB, and their basic read commands are compatible</span></div><div class="line" id="020308"><span class="nick" style="color:#8dd3c7"><a href="#020308" label="[02:03:08]">&lt;aggi&gt;</a></span><span class="message">it's not a PDP-8, and i was born too late to be raised with such a device:</span></div><div class="line" id="020310"><span class="nick" style="color:#8dd3c7"><a href="#020310" label="[02:03:10]">&lt;aggi&gt;</a></span><span class="message"> <a rel="nofollow" href="https://en.wikipedia.org/wiki/LC80">https://en.wikipedia.org/wiki/LC80</a> </span></div><div class="line" id="020454"><span class="nick" style="color:#6b8072"><a href="#020454" label="[02:04:54]">&lt;stikonas&gt;</a></span><span class="message">well, I'm too young for PDP-8 too</span></div><div class="line" id="020458"><span class="nick" style="color:#6b8072"><a href="#020458" label="[02:04:58]">&lt;stikonas&gt;</a></span><span class="message">just heard about it</span></div><div class="line" id="020516"><span class="nick" style="color:#6b8072"><a href="#020516" label="[02:05:16]">&lt;stikonas&gt;</a></span><span class="message">haven't actually seen one in real life</span></div><div class="line" id="040550"><span class="nick" style="color:#80b1d3"><a href="#040550" label="[04:05:50]">&lt;Googulator&gt;</a></span><span class="message">rekado: having a go at reproducing your Haskell results with a sufficiently old gcc (<a rel="nofollow" href="https://elephly.net/posts/2017-01-09-bootstrapping-haskell-part-1.html#org360295f">https://elephly.net/posts/2017-01-09-bootstrapping-haskell-part-1.html#org360295f</a>),  do you remember ever having to call greencard manually?</span></div><div class="line" id="040621"><span class="nick" style="color:#80b1d3"><a href="#040621" label="[04:06:21]">&lt;Googulator&gt;</a></span><span class="message">I'm running into an issue where building the prelude fails early because it can't find the module NhcFloats</span></div><div class="line" id="063407"><span class="nick" style="color:#6d2462"><a href="#063407" label="[06:34:07]">&lt;lanodan&gt;</a></span><span class="message">I'd say host infection is countered by reproducibility, after all the BIOS (or whatever other boot firmware) can be infected. And I guess if live-bootstrap would have a smaller payload it would be more reasonable to emulate from another architecture.</span></div><div class="line" id="080031"><span class="nick" style="color:#234e69"><a href="#080031" label="[08:00:31]">&lt;janus&gt;</a></span><span class="message">GoogulatorMobile: what i did is just use RedHat 6.2, then you don't need all this patching, NHC98 works almost out of the box</span></div><div class="line" id="080102"><span class="nick" style="color:#234e69"><a href="#080102" label="[08:01:02]">&lt;janus&gt;</a></span><span class="message">i don't understand why you'd want to try to port compilers to platforms they didn't run on back then, it's unnecessary work... just take the old system</span></div><div class="line" id="080129"><span class="nick" style="color:#234e69"><a href="#080129" label="[08:01:29]">&lt;janus&gt;</a></span><span class="message">i talked to Simon Marlow and he mentioned that GHC was most likely bootstrapped on SPARC... i haven't started going down that route yet</span></div><div class="line" id="080134"><span class="nick" style="color:#234e69"><a href="#080134" label="[08:01:34]">&lt;janus&gt;</a></span><span class="message">GoogulatorMobile: are you at zurihac?</span></div><div class="line" id="101545"><span class="nick" style="color:#6b8072"><a href="#101545" label="[10:15:45]">&lt;stikonas&gt;</a></span><span class="message">fossy, Googulator: so should we bump to 0.26.1 in master or also in the branch?</span></div><div class="line" id="101622"><span class="nick" style="color:#6b8072"><a href="#101622" label="[10:16:22]">&lt;stikonas&gt;</a></span><span class="message">at the moment branches are still equal</span></div><div class="line" id="101639"><span class="nick" style="color:#6b8072"><a href="#101639" label="[10:16:39]">&lt;stikonas&gt;</a></span><span class="message">so I would lean for 0.26.1 in both</span></div><div class="line" id="141635"><span class="nick" style="color:#8dd3c7"><a href="#141635" label="[14:16:35]">&lt;aggi&gt;</a></span><span class="message">i see now what happened to tcc... it supported linux-kernel compilation with a rather early version in conjunction with tccboot</span></div><div class="line" id="141718"><span class="nick" style="color:#8dd3c7"><a href="#141718" label="[14:17:18]">&lt;aggi&gt;</a></span><span class="message">then a notable amount of important patches were added, _and_ then it was re-structured internally splitting .c/.h files</span></div><div class="line" id="141746"><span class="nick" style="color:#8dd3c7"><a href="#141746" label="[14:17:46]">&lt;aggi&gt;</a></span><span class="message">thise broke compiling/linking of tccboot, and a few more important patches were added too</span></div><div class="line" id="141841"><span class="nick" style="color:#8dd3c7"><a href="#141841" label="[14:18:41]">&lt;aggi&gt;</a></span><span class="message">since then, there was no more confirmation of kernel-compilation with tcc either JIT (tccboot) or AoT (custom scripting)</span></div><div class="line" id="142024"><span class="nick" style="color:#8dd3c7"><a href="#142024" label="[14:20:24]">&lt;aggi&gt;</a></span><span class="message">which is problematic, because i may have to bisect my way through 15years of changes, including the fact tcc was re-structured internally breaking a relevant test-case: JIT-compile of kernel</span></div><div class="line" id="142319"><span class="nick" style="color:#8dd3c7"><a href="#142319" label="[14:23:19]">&lt;aggi&gt;</a></span><span class="message">bootstrappable's interest is a chain of trust for tcc itself, and bootstrapping gcc/binutils then with it</span></div><div class="line" id="142512"><span class="nick" style="color:#8dd3c7"><a href="#142512" label="[14:25:12]">&lt;aggi&gt;</a></span><span class="message">while i consider linux-2.4 (and/or fiwix) an at least equally important criteria for tcc/tccboot</span></div><div class="line" id="142611"><span class="nick" style="color:#8dd3c7"><a href="#142611" label="[14:26:11]">&lt;aggi&gt;</a></span><span class="message">inside git-log of tcc, i spotted a few developers which i noticed elsewhere before, such as susematz who tried to bring tcc-support to a recent linux-4.4 (and couldn't finish/failed)</span></div><div class="line" id="142645"><span class="nick" style="color:#8dd3c7"><a href="#142645" label="[14:26:45]">&lt;aggi&gt;</a></span><span class="message">in the process of this, support for linux-2.4 was broken too, unnecessarily i think</span></div><div class="line" id="142720"><span class="nick" style="color:#8dd3c7"><a href="#142720" label="[14:27:20]">&lt;aggi&gt;</a></span><span class="message">at least i couldn't confirm/re-produce some test-cases</span></div><div class="line" id="142828"><span class="nick" style="color:#8dd3c7"><a href="#142828" label="[14:28:28]">&lt;aggi&gt;</a></span><span class="message">and there was rumors in another channel elsewhere, tcc may not be appropriate as system-compiler... of cause, if relevant test-cases were broken</span></div><div class="line" id="142908"><span class="nick" style="color:#8dd3c7"><a href="#142908" label="[14:29:08]">&lt;aggi&gt;</a></span><span class="message">and priorities set elsewhere, for gcc and/or llvm/clang... which was OK, if a good known-working state for linux-2.x support had not been abandoned/broken</span></div><div class="line" id="142954"><span class="nick" style="color:#8dd3c7"><a href="#142954" label="[14:29:54]">&lt;aggi&gt;</a></span><span class="message">so, i had aggressively forked against #gentoo already, to bring back a c-only/no-c++ system profile</span></div><div class="line" id="143008"><span class="nick" style="color:#8dd3c7"><a href="#143008" label="[14:30:08]">&lt;aggi&gt;</a></span><span class="message">i had forked against linux-kernel already, to roll-back to linux-2.X</span></div><div class="line" id="143032"><span class="nick" style="color:#8dd3c7"><a href="#143032" label="[14:30:32]">&lt;aggi&gt;</a></span><span class="message">and now it seems, i have to fork against tcc-toolchain too to bring back what was broken!</span></div><div class="line" id="143432"><span class="nick" style="color:#6b8072"><a href="#143432" label="[14:34:32]">&lt;stikonas&gt;</a></span><span class="message">the problem with tcc is though that tcc is hard to read</span></div><div class="line" id="143449"><span class="nick" style="color:#6b8072"><a href="#143449" label="[14:34:49]">&lt;stikonas&gt;</a></span><span class="message">especially considering that it is non-optimizing compiler</span></div><div class="line" id="143457"><span class="nick" style="color:#6b8072"><a href="#143457" label="[14:34:57]">&lt;stikonas&gt;</a></span><span class="message">so shouldn't be too complicated</span></div><div class="line" id="143515"><span class="nick" style="color:#6b8072"><a href="#143515" label="[14:35:15]">&lt;stikonas&gt;</a></span><span class="message">it's full of 1 or 2 letter variables...</span></div><div class="line" id="143624"><span class="nick" style="color:#8dd3c7"><a href="#143624" label="[14:36:24]">&lt;aggi&gt;</a></span><span class="message">ACTION fears for the worst</span></div><div class="line" id="143810"><span class="nick" style="color:#8dd3c7"><a href="#143810" label="[14:38:10]">&lt;aggi&gt;</a></span><span class="message">and even when i re-produced/re-compiled tccboot for linux-2.x, i am not convinced of the whole approach anymore</span></div><div class="line" id="143932"><span class="nick" style="color:#8dd3c7"><a href="#143932" label="[14:39:32]">&lt;aggi&gt;</a></span><span class="message">another consideration was, to stay at gcc-4.7 (no-c++), yet i had a little too much &quot;fun&quot; inside it's autotools/automake scripts already</span></div><div class="line" id="144102"><span class="nick" style="color:#8dd3c7"><a href="#144102" label="[14:41:02]">&lt;aggi&gt;</a></span><span class="message">and this is one corner-stone, where i am worried about #bootstrapple approach, to focus on bootstrapping GNU-toolchain exclusively (if i may say so)</span></div><div class="line" id="144237"><span class="nick" style="color:#8dd3c7"><a href="#144237" label="[14:42:37]">&lt;aggi&gt;</a></span><span class="message">for example, if i chose an earlier version of tcc to fork against, and wanted to rely upon #bootstrappable procedure, i may have to fork against some bootstrappable stuff too</span></div><div class="line" id="144446"><span class="nick" style="color:#8dd3c7"><a href="#144446" label="[14:44:46]">&lt;aggi&gt;</a></span><span class="message">because this was an overwhelming argument for tcc, that it's supported by #bootstrappable, yet this applies to a recent version which failed against mentioned test-cases for linux-2.x</span></div><div class="line" id="144614"><span class="nick" style="color:#6b8072"><a href="#144614" label="[14:46:14]">&lt;stikonas&gt;</a></span><span class="message">aggi: it's not like we focus on bootstrapping gnu toolchain exclusively...</span></div><div class="line" id="144620"><span class="nick" style="color:#8dd3c7"><a href="#144620" label="[14:46:20]">&lt;aggi&gt;</a></span><span class="message">stikonas: had any version of tcc up until tcc-0.9.24 ever been tested for bootstrapping?</span></div><div class="line" id="144622"><span class="nick" style="color:#6b8072"><a href="#144622" label="[14:46:22]">&lt;stikonas&gt;</a></span><span class="message">other paths are welcome too</span></div><div class="line" id="144626"><span class="nick" style="color:#6b8072"><a href="#144626" label="[14:46:26]">&lt;stikonas&gt;</a></span><span class="message">aggi: yes</span></div><div class="line" id="144641"><span class="nick" style="color:#6b8072"><a href="#144641" label="[14:46:41]">&lt;stikonas&gt;</a></span><span class="message">cosinusoidally has a bootstrap path that skips mes/mescc</span></div><div class="line" id="144706"><span class="nick" style="color:#8dd3c7"><a href="#144706" label="[14:47:06]">&lt;aggi&gt;</a></span><span class="message">stikonas: i don't intend to skip mes/mescc</span></div><div class="line" id="144712"><span class="nick" style="color:#6b8072"><a href="#144712" label="[14:47:12]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/407">https://github.com/fosslinux/live-bootstrap/pull/407</a> </span></div><div class="line" id="144716"><span class="nick" style="color:#6b8072"><a href="#144716" label="[14:47:16]">&lt;stikonas&gt;</a></span><span class="message">it's x86 only</span></div><div class="line" id="144719"><span class="nick" style="color:#6b8072"><a href="#144719" label="[14:47:19]">&lt;stikonas&gt;</a></span><span class="message">though much faster</span></div><div class="line" id="144742"><span class="nick" style="color:#8dd3c7"><a href="#144742" label="[14:47:42]">&lt;aggi&gt;</a></span><span class="message">i am worried i chose a tcc-versions which wasn't tested for bootstrapping;</span></div><div class="line" id="144756"><span class="nick" style="color:#6b8072"><a href="#144756" label="[14:47:56]">&lt;stikonas&gt;</a></span><span class="message">as for building other versions of tcc, no, we can only build some patched versions of tcc with mescc</span></div><div class="line" id="144803"><span class="nick" style="color:#6b8072"><a href="#144803" label="[14:48:03]">&lt;stikonas&gt;</a></span><span class="message">none of them are buildable directly</span></div><div class="line" id="144836"><span class="nick" style="color:#6b8072"><a href="#144836" label="[14:48:36]">&lt;stikonas&gt;</a></span><span class="message">we need to #ifdef away floats, and on 32-bit arches long long's and possibly a few other things</span></div><div class="line" id="144850"><span class="nick" style="color:#6b8072"><a href="#144850" label="[14:48:50]">&lt;stikonas&gt;</a></span><span class="message">that are not supported by mescc</span></div><div class="line" id="145150"><span class="nick" style="color:#8dd3c7"><a href="#145150" label="[14:51:50]">&lt;aggi&gt;</a></span><span class="message">well, may not be as problematic, because a tcc-0.9.27 patched for mesc probably will be capable to compile a tcc-0.9.24 later anyway</span></div><div class="line" id="145255"><span class="nick" style="color:#8dd3c7"><a href="#145255" label="[14:52:55]">&lt;aggi&gt;</a></span><span class="message">this wouldn't break the bootstrapping itself, because i won't move to tcc-toolchain if the bootstrapping path was broken</span></div><div class="line" id="145307"><span class="nick" style="color:#8dd3c7"><a href="#145307" label="[14:53:07]">&lt;aggi&gt;</a></span><span class="message">which it isn't and was a most important criteria</span></div><div class="line" id="145457"><span class="nick" style="color:#8dd3c7"><a href="#145457" label="[14:54:57]">&lt;aggi&gt;</a></span><span class="message">it's not the first time, compilers were forked/split (at the time of gcc-2.96, EGCS fork), such as a kcc-version (for kernel), and some other cc-version for anything else</span></div><div class="line" id="145522"><span class="nick" style="color:#6c3d55"><a href="#145522" label="[14:55:22]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Yeah, you should be able to compile older versions</span></div><div class="line" id="145527"><span class="nick" style="color:#6c3d55"><a href="#145527" label="[14:55:27]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; At least on x86</span></div><div class="line" id="145544"><span class="nick" style="color:#6c3d55"><a href="#145544" label="[14:55:44]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Definitely not on more open arches like riscv64...</span></div><div class="line" id="145708"><span class="nick" style="color:#8dd3c7"><a href="#145708" label="[14:57:08]">&lt;aggi&gt;</a></span><span class="message">that's the reason why i abstain from riscv completely, because it requires most recent compilers/kernel with all the problems those have nowadays</span></div><div class="line" id="145759"><span class="nick" style="color:#8dd3c7"><a href="#145759" label="[14:57:59]">&lt;aggi&gt;</a></span><span class="message">i'll get another coffee, and will try to cleanup some bisecting-chaos</span></div><div class="line" id="175045"><span class="nick" style="color:#8dd3c7"><a href="#175045" label="[17:50:45]">&lt;aggi&gt;</a></span><span class="message">what's biting me with tcc is another fact, i am on BUILDHOST=aarch32 and this seems to leak into tcc build-system for various versions of it</span></div><div class="line" id="175456"><span class="nick" style="color:#8dd3c7"><a href="#175456" label="[17:54:56]">&lt;aggi&gt;</a></span><span class="message">i rather keep that, as another sanity check, for what's leaking into tccboot for example (since unresolved arm symbols showed up all of the sudden with it, even with -nostdlib and -nostdinc precautions taken)</span></div><div class="line" id="235206"><span class="nick" style="color:#6c3d55"><a href="#235206" label="[23:52:06]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;cosinusoidally&gt; I've not tried to build tccboot myself, but a long while ago I did once try to run stage0-posix-x86 under tccboot. iirc there was some weird crash early in the bootstrap process. I didn't get to the bottom of that (and tbh I didn't try too hard).</span></div><br /></div></body></html>