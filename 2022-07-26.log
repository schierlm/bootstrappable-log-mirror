<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-07-26.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="131355"><span class="nick" style="color:#8dd3c7"><a href="#131355" label="[13:13:55]">&lt;mid-kid&gt;</a></span><span class="message">I'm sure the requirement of python3 for building glibc is well understood here but</span></div><div class="line" id="131438"><span class="nick" style="color:#8dd3c7"><a href="#131438" label="[13:14:38]">&lt;mid-kid&gt;</a></span><span class="message">I'm wondering whether it's a better idea to build musl+gcc with dynamic linking support first</span></div><div class="line" id="131450"><span class="nick" style="color:#8dd3c7"><a href="#131450" label="[13:14:50]">&lt;mid-kid&gt;</a></span><span class="message">Or wrestle with python to get it to work in a static environment</span></div><div class="line" id="131509"><span class="nick" style="color:#8dd3c7"><a href="#131509" label="[13:15:09]">&lt;mid-kid&gt;</a></span><span class="message">I'm sure somebody here has already bootstrapped glibc on the live-bootstrap environment, right?</span></div><div class="line" id="133139"><span class="nick" style="color:#2e2a4a"><a href="#133139" label="[13:31:39]">&lt;stikonas[m]&gt;</a></span><span class="message">mid-kid: python might be good for other things too</span></div><div class="line" id="133212"><span class="nick" style="color:#2e2a4a"><a href="#133212" label="[13:32:12]">&lt;stikonas[m]&gt;</a></span><span class="message">In particular if we want to replace autogen templating...</span></div><div class="line" id="133235"><span class="nick" style="color:#2e2a4a"><a href="#133235" label="[13:32:35]">&lt;stikonas[m]&gt;</a></span><span class="message">Musl dynamic linking might be good to get too...</span></div><div class="line" id="133259"><span class="nick" style="color:#2e2a4a"><a href="#133259" label="[13:32:59]">&lt;stikonas[m]&gt;</a></span><span class="message">But right now I don't know how to do it</span></div><div class="line" id="134631"><span class="nick" style="color:#8dd3c7"><a href="#134631" label="[13:46:31]">&lt;mid-kid&gt;</a></span><span class="message">wouldn't it just be building musl with --enable-shared?</span></div><div class="line" id="134639"><span class="nick" style="color:#8dd3c7"><a href="#134639" label="[13:46:39]">&lt;mid-kid&gt;</a></span><span class="message">and dropping --disable-shared on gcc</span></div><div class="line" id="134645"><span class="nick" style="color:#6b8072"><a href="#134645" label="[13:46:45]">&lt;fossy&gt;</a></span><span class="message">so far, it isn't appearing to be very difficult to build python staticially</span></div><div class="line" id="134705"><span class="nick" style="color:#8dd3c7"><a href="#134705" label="[13:47:05]">&lt;mid-kid&gt;</a></span><span class="message">yeah I ended up managing it's just the module system that's less than ideal</span></div><div class="line" id="134710"><span class="nick" style="color:#6b8072"><a href="#134710" label="[13:47:10]">&lt;fossy&gt;</a></span><span class="message">i haven't got to 3.x versions in live-bootstrap yet, but <a rel="nofollow" href="https://wiki.python.org/moin/BuildStatically">https://wiki.python.org/moin/BuildStatically</a>  this worked</span></div><div class="line" id="134759"><span class="nick" style="color:#6b8072"><a href="#134759" label="[13:47:59]">&lt;fossy&gt;</a></span><span class="message">i'm working on bootstrapping python now for live-bootstrap btw</span></div><div class="line" id="135113"><span class="nick" style="color:#80b1d3"><a href="#135113" label="[13:51:13]">&lt;oriansj&gt;</a></span><span class="message">mid-kid: to your question of which would be better, I don't know but which looks more like fun is probably the best course</span></div><div class="line" id="135214"><span class="nick" style="color:#6b8072"><a href="#135214" label="[13:52:14]">&lt;fossy&gt;</a></span><span class="message">one reason why i am a fan of static linking particularly for live-bootstrap is because we have many versions of everything which sometimes doesn't play well with dynamic linking</span></div><div class="line" id="135237"><span class="nick" style="color:#8dd3c7"><a href="#135237" label="[13:52:37]">&lt;mid-kid&gt;</a></span><span class="message">Yeah but for the later/final stages it's less of a concern</span></div><div class="line" id="135257"><span class="nick" style="color:#6b8072"><a href="#135257" label="[13:52:57]">&lt;fossy&gt;</a></span><span class="message">yep, when we jump to final gcc/binutils/glibc triplet we can probably change over to dynamic</span></div><div class="line" id="135616"><span class="nick" style="color:#6d2462"><a href="#135616" label="[13:56:16]">&lt;Hagfish&gt;</a></span><span class="message">python for live-bootstrap is a great project.  i look forward to following that</span></div><div class="line" id="135637"><span class="nick" style="color:#8dd3c7"><a href="#135637" label="[13:56:37]">&lt;mid-kid&gt;</a></span><span class="message">for now building gcc with --disable-lto and building python with some builtin modules seems to bypass the need for dynamic linking for the purposes of building glibc so far.</span></div><div class="line" id="141933"><span class="nick" style="color:#2e2a4a"><a href="#141933" label="[14:19:33]">&lt;stikonas[m]&gt;</a></span><span class="message">mid-kid: I think that ended with crashes</span></div><div class="line" id="141958"><span class="nick" style="color:#2e2a4a"><a href="#141958" label="[14:19:58]">&lt;stikonas[m]&gt;</a></span><span class="message">There are some more issues to fix before dynamic linking works</span></div><div class="line" id="145018"><span class="nick" style="color:#8dd3c7"><a href="#145018" label="[14:50:18]">&lt;mid-kid&gt;</a></span><span class="message">I see</span></div><div class="line" id="175059"><span class="nick">***</span><span class="message notice">samplet` is now known as samplet</span></div><div class="line" id="185617"><span class="nick">***</span><span class="message notice">HaxCPU is now known as WaxCPU</span></div><div class="line" id="192109"><span class="nick">***</span><span class="message notice">unmatched-paren_ is now known as unmatched-paren</span></div><div class="line" id="194722"><span class="nick" style="color:#234e69"><a href="#194722" label="[19:47:22]">&lt;lanodan&gt;</a></span><span class="message">Anyone here managed to bootstrap Erlang without having the BEAM binaries?</span></div><div class="line" id="195846"><span class="nick" style="color:#6c3d55"><a href="#195846" label="[19:58:46]">&lt;stikonas&gt;</a></span><span class="message">lanodan: what are BEAM binaries? I'm personally not very familair with erlang</span></div><div class="line" id="195959"><span class="nick" style="color:#6c3d55"><a href="#195959" label="[19:59:59]">&lt;stikonas&gt;</a></span><span class="message">oh, it's erlang's bytecode..</span></div><div class="line" id="200044"><span class="nick" style="color:#6c3d55"><a href="#200044" label="[20:00:44]">&lt;stikonas&gt;</a></span><span class="message">lanodan: maybe see if guix has done it</span></div><div class="line" id="200140"><span class="nick" style="color:#6c3d55"><a href="#200140" label="[20:01:40]">&lt;stikonas&gt;</a></span><span class="message">if they haven't done it then the answer would most likely be no</span></div><div class="line" id="204443"><span class="nick" style="color:#234e69"><a href="#204443" label="[20:44:43]">&lt;lanodan&gt;</a></span><span class="message">I look in both NixOS and Guix, looks like they are both fine with beeping the beam files</span></div><div class="line" id="204822"><span class="nick" style="color:#d9d9d9"><a href="#204822" label="[20:48:22]">&lt;muurkha&gt;</a></span><span class="message">beeping?</span></div><div class="line" id="205002"><span class="nick" style="color:#2e2a4a"><a href="#205002" label="[20:50:02]">&lt;stikonas[m]&gt;</a></span><span class="message">I guess keeping</span></div><div class="line" id="205144"><span class="nick" style="color:#2e2a4a"><a href="#205144" label="[20:51:44]">&lt;stikonas[m]&gt;</a></span><span class="message">Well both of them are not super strict about pregenerated files</span></div><div class="line" id="205209"><span class="nick" style="color:#2e2a4a"><a href="#205209" label="[20:52:09]">&lt;stikonas[m]&gt;</a></span><span class="message">Though I think usually byte code is removed if somebody does tgr job</span></div><div class="line" id="205242"><span class="nick" style="color:#2e2a4a"><a href="#205242" label="[20:52:42]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, I guess no Erlang in live-bootstrap any time soon :D</span></div><div class="line" id="205740"><span class="nick" style="color:#d9d9d9"><a href="#205740" label="[20:57:40]">&lt;muurkha&gt;</a></span><span class="message">Debian usually is super strict about &quot;fails to build from source&quot;, but they're okay with the &quot;source&quot; being human-readable pregenerated files</span></div><div class="line" id="210321"><span class="nick" style="color:#234e69"><a href="#210321" label="[21:03:21]">&lt;lanodan&gt;</a></span><span class="message">Yeah, BEAM are bytecode files, they're like ELF files or in Java world class/jar files. See files in <a rel="nofollow" href="https://github.com/erlang/otp/tree/master/bootstrap/lib">https://github.com/erlang/otp/tree/master/bootstrap/lib</a>  for example.</span></div><div class="line" id="210344"><span class="nick" style="color:#d9d9d9"><a href="#210344" label="[21:03:44]">&lt;muurkha&gt;</a></span><span class="message">I know.  That's why I mentioned that :)</span></div><div class="line" id="211810"><span class="nick" style="color:#bc80bd"><a href="#211810" label="[21:18:10]">&lt;theruran&gt;</a></span><span class="message">I updated the notes on Forth and Ada here: <a rel="nofollow" href="https://bootstrapping.miraheze.org/wiki/Bootstrapping_Specific_Languages">https://bootstrapping.miraheze.org/wiki/Bootstrapping_Specific_Languages</a> </span></div><div class="line" id="212216"><span class="nick" style="color:#6c3d55"><a href="#212216" label="[21:22:16]">&lt;stikonas&gt;</a></span><span class="message">and I converted catm.hex1 to catm.hex2 on riscv32 and riscv64, will be easier to maintain it in higher level hex</span></div><div class="line" id="212244"><span class="nick" style="color:#6c3d55"><a href="#212244" label="[21:22:44]">&lt;stikonas&gt;</a></span><span class="message">especially on riscv there is quite a bit of difference between hex1 and hex2</span></div><div class="line" id="220944"><span class="nick" style="color:#2e2a4a"><a href="#220944" label="[22:09:44]">&lt;stikonas[m]&gt;</a></span><span class="message">Just tried hex0.efi on my laptop. I think it runs fine</span></div><div class="line" id="221152"><span class="nick" style="color:#6c3d55"><a href="#221152" label="[22:11:52]">&lt;stikonas&gt;</a></span><span class="message">now we need to port kaem-optional (though it would be called bootx64.efi)...</span></div><div class="line" id="221658"><span class="nick" style="color:#6c3d55"><a href="#221658" label="[22:16:58]">&lt;stikonas&gt;</a></span><span class="message">oriansj: when you have some time, can you merge <a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds/pull/23">https://github.com/oriansj/bootstrap-seeds/pull/23</a> </span></div><div class="line" id="221715"><span class="nick" style="color:#6c3d55"><a href="#221715" label="[22:17:15]">&lt;stikonas&gt;</a></span><span class="message">I've zeroed more fields in UEFI header</span></div><div class="line" id="222007"><span class="nick" style="color:#6c3d55"><a href="#222007" label="[22:20:07]">&lt;stikonas&gt;</a></span><span class="message">also <a rel="nofollow" href="https://github.com/oriansj/stage0-posix-amd64/pull/4">https://github.com/oriansj/stage0-posix-amd64/pull/4</a> </span></div><div class="line" id="222103"><span class="nick" style="color:#6c3d55"><a href="#222103" label="[22:21:03]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/stage0-posix-aarch64/pull/2">https://github.com/oriansj/stage0-posix-aarch64/pull/2</a> </span></div><div class="line" id="222503"><span class="nick" style="color:#6c3d55"><a href="#222503" label="[22:25:03]">&lt;stikonas&gt;</a></span><span class="message">well, first I guess I need to reduce the size of kaem-optional on x86 and amd64 before porting it to uefi...</span></div><br /></div></body></html>