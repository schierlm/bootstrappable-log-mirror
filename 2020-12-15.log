<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-12-15.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="010111"><span class="nick" style="color:#8dd3c7"><a href="#010111" label="[01:01:11]">&lt;Hagfish&gt;</a></span><span class="message"> <a rel="nofollow" href="https://news.ycombinator.com/item?id=25424703">https://news.ycombinator.com/item?id=25424703</a>   &quot;Build an 8-bit CPU from scratch&quot;</span></div><div class="line" id="010128"><span class="nick" style="color:#8dd3c7"><a href="#010128" label="[01:01:28]">&lt;Hagfish&gt;</a></span><span class="message">the article itself requires javascript, so i don't know if it's worth visiting :)</span></div><div class="line" id="024222"><span class="nick" style="color:#2e2a4a"><a href="#024222" label="[02:42:22]">&lt;OriansJ&gt;</a></span><span class="message">pder: very impressive work; looks like just some minor clean up and everything else can be done in Haskell (and possibly in M2-Planet)</span></div><div class="line" id="024449"><span class="nick" style="color:#2e2a4a"><a href="#024449" label="[02:44:49]">&lt;OriansJ&gt;</a></span><span class="message">siraben: once you strip out the C code bit from the earlier stages; it'll all be M2-Planet code generated by Haskell code and we can just delete rts.c</span></div><div class="line" id="031523"><span class="nick" style="color:#6b8072"><a href="#031523" label="[03:15:23]">&lt;pder&gt;</a></span><span class="message">Thanks.  I think that the last three or four stages the Haskell will need to just need to be modified to generate M2-Planet compatible code, which means removing the enums and replacing them with CONSTANTS, turning the switch statements into if-else and I think siraben already wrote some code to populate the prog array one element at a time.</span></div><div class="line" id="031817"><span class="nick" style="color:#6b8072"><a href="#031817" label="[03:18:17]">&lt;pder&gt;</a></span><span class="message">Yeah, so far, go.sh is not using rts.c at all</span></div><div class="line" id="032617"><span class="nick" style="color:#2e2a4a"><a href="#032617" label="[03:26:17]">&lt;OriansJ&gt;</a></span><span class="message">pder: so we probably should eliminate it entirely</span></div><div class="line" id="032812"><span class="nick" style="color:#2e2a4a"><a href="#032812" label="[03:28:12]">&lt;OriansJ&gt;</a></span><span class="message">and once I finish updating M2-Planet; you'll be able to eliminate the -1 special case as M2-Planet should do proper compares.</span></div><div class="line" id="032925"><span class="nick" style="color:#2e2a4a"><a href="#032925" label="[03:29:25]">&lt;OriansJ&gt;</a></span><span class="message">although looking at generated/marginally.c it looks kinda familiar to the rts.c case</span></div><div class="line" id="120132"><span class="nick" style="color:#2e2a4a"><a href="#120132" label="[12:01:32]">&lt;OriansJ&gt;</a></span><span class="message">I've decided that a fixed heap offset for knight-posix in libc-core.M1 is probably a bad idea long term; so I've tweaked the stage0 vm to allow the user to specify a desired stack stize and put the HEAP after that. but will default to a 64KB stack</span></div><div class="line" id="120146"><span class="nick" style="color:#2e2a4a"><a href="#120146" label="[12:01:46]">&lt;OriansJ&gt;</a></span><span class="message">patches are up for those who care</span></div><div class="line" id="120158"><span class="nick" style="color:#2e2a4a"><a href="#120158" label="[12:01:58]">&lt;OriansJ&gt;</a></span><span class="message">matching changes in M2-Planet to shortly follow</span></div><div class="line" id="120724"><span class="nick" style="color:#2e2a4a"><a href="#120724" label="[12:07:24]">&lt;OriansJ&gt;</a></span><span class="message">and with this change we now have a new order of density <a rel="nofollow" href="https://paste.debian.net/1176969/">https://paste.debian.net/1176969/</a> </span></div><div class="line" id="120751"><span class="nick" style="color:#2e2a4a"><a href="#120751" label="[12:07:51]">&lt;OriansJ&gt;</a></span><span class="message">but back to fixing if(-1 &gt; i)</span></div><div class="line" id="171339"><span class="nick" style="color:#80b1d3"><a href="#171339" label="[17:13:39]">&lt;siraben&gt;</a></span><span class="message">pder: I adjusted assembly.hs and the output hash matches</span></div><div class="line" id="171612"><span class="nick" style="color:#6b8072"><a href="#171612" label="[17:16:12]">&lt;pder&gt;</a></span><span class="message">siraben: would you be able to share your changes?  What did you change with assembly.hs?</span></div><div class="line" id="171627"><span class="nick" style="color:#80b1d3"><a href="#171627" label="[17:16:27]">&lt;siraben&gt;</a></span><span class="message">pder: Yes, I'm testing it and will PR</span></div><div class="line" id="171955"><span class="nick" style="color:#80b1d3"><a href="#171955" label="[17:19:55]">&lt;siraben&gt;</a></span><span class="message">pder: <a rel="nofollow" href="https://github.com/pder/blynn-compiler/pull/1">https://github.com/pder/blynn-compiler/pull/1</a> </span></div><div class="line" id="172442"><span class="nick" style="color:#6b8072"><a href="#172442" label="[17:24:42]">&lt;pder&gt;</a></span><span class="message">Thats great, thank you.  I think we should be able to follow the same pattern up to marginally with each of the .hs files.</span></div><div class="line" id="172554"><span class="nick" style="color:#80b1d3"><a href="#172554" label="[17:25:54]">&lt;siraben&gt;</a></span><span class="message">wait a bit before merging, I'm fixing the CI for that branch</span></div><div class="line" id="172611"><span class="nick" style="color:#6b8072"><a href="#172611" label="[17:26:11]">&lt;pder&gt;</a></span><span class="message">I will also adjust the Makefile so the gcc build works</span></div><div class="line" id="172720"><span class="nick" style="color:#6b8072"><a href="#172720" label="[17:27:20]">&lt;pder&gt;</a></span><span class="message">Since we are no longer outputing C code in these stages, we could just do -o lonely_raw.txt</span></div><div class="line" id="173420"><span class="nick" style="color:#80b1d3"><a href="#173420" label="[17:34:20]">&lt;siraben&gt;</a></span><span class="message">Ok patching guardedly and patty fail, I'll be pushing to this PR until it works</span></div><div class="line" id="173840"><span class="nick" style="color:#80b1d3"><a href="#173840" label="[17:38:40]">&lt;siraben&gt;</a></span><span class="message">pder: which branch did you patch patty.hs?</span></div><div class="line" id="173842"><span class="nick" style="color:#80b1d3"><a href="#173842" label="[17:38:42]">&lt;siraben&gt;</a></span><span class="message">to make it compile with GHC</span></div><div class="line" id="174001"><span class="nick" style="color:#6b8072"><a href="#174001" label="[17:40:01]">&lt;pder&gt;</a></span><span class="message">I dont think I ever touched patty.hs, only lonely.hs.  Commit ed88f0a84cce9e487</span></div><div class="line" id="174048"><span class="nick" style="color:#80b1d3"><a href="#174048" label="[17:40:48]">&lt;siraben&gt;</a></span><span class="message">Oh I found it, wrap2.hs</span></div><div class="line" id="174136"><span class="nick" style="color:#6b8072"><a href="#174136" label="[17:41:36]">&lt;pder&gt;</a></span><span class="message">I'm going through each hs up to marginally and applying your output changes, then altering go.sh and the Makefile</span></div><div class="line" id="174327"><span class="nick" style="color:#80b1d3"><a href="#174327" label="[17:43:27]">&lt;siraben&gt;</a></span><span class="message">Oh dang, the way the wrap files are written, they can be used to patch the other haskell files without touching them</span></div><div class="line" id="181045"><span class="nick" style="color:#80b1d3"><a href="#181045" label="[18:10:45]">&lt;siraben&gt;</a></span><span class="message">pder: ok, I'm pretty sure the issue I'm running into with patty is the unsigned comparison</span></div><div class="line" id="184031"><span class="nick" style="color:#80b1d3"><a href="#184031" label="[18:40:31]">&lt;siraben&gt;</a></span><span class="message">I'll debug and compare</span></div><div class="line" id="185948"><span class="nick" style="color:#6d2462"><a href="#185948" label="[18:59:48]">&lt;rekado_&gt;</a></span><span class="message">hello there!â€œ</span></div><div class="line" id="190001"><span class="nick" style="color:#6d2462"><a href="#190001" label="[19:00:01]">&lt;rekado_&gt;</a></span><span class="message">I see thereâ€™s new Haskell activity since last time I stopped by</span></div><div class="line" id="190034"><span class="nick" style="color:#6d2462"><a href="#190034" label="[19:00:34]">&lt;rekado_&gt;</a></span><span class="message">could someone perhaps write a summary of the planned route to bootstrapping GHC so that we can put it on bootstrappable.org?</span></div><div class="line" id="190620"><span class="nick" style="color:#80b1d3"><a href="#190620" label="[19:06:20]">&lt;siraben&gt;</a></span><span class="message">rekado_: see <a rel="nofollow" href="https://github.com/siraben/compiler/">https://github.com/siraben/compiler/</a> </span></div><div class="line" id="190635"><span class="nick" style="color:#80b1d3"><a href="#190635" label="[19:06:35]">&lt;siraben&gt;</a></span><span class="message">I've asked GHC people about bootstrapping GHC and it's not looking likely, GCC has to be bootstrapped anyway</span></div><div class="line" id="190703"><span class="nick" style="color:#80b1d3"><a href="#190703" label="[19:07:03]">&lt;siraben&gt;</a></span><span class="message">We're taking this Haskell route to complete the C -&gt; Scheme step</span></div><div class="line" id="192440"><span class="nick" style="color:#6b8072"><a href="#192440" label="[19:24:40]">&lt;pder&gt;</a></span><span class="message">siraben, have you fetched from oriansj or myself?  If so you shouldn't have an issue with patty hanging</span></div><div class="line" id="192526"><span class="nick" style="color:#6b8072"><a href="#192526" label="[19:25:26]">&lt;pder&gt;</a></span><span class="message">with commit 807cc371741b46e7 you should be able to run go.sh and build up to marginally.c</span></div><div class="line" id="193131"><span class="nick" style="color:#80b1d3"><a href="#193131" label="[19:31:31]">&lt;siraben&gt;</a></span><span class="message">Very strange, it looks deleting parts of patty.hs changes the value of d in rts_reduce(d)</span></div><div class="line" id="193450"><span class="nick" style="color:#80b1d3"><a href="#193450" label="[19:34:50]">&lt;siraben&gt;</a></span><span class="message">pder: could you explain what the structure of this means? ./bin/vm -f guardedly.hs --rts_c generated/patty_raw.txt -o generated/guardedly.c</span></div><div class="line" id="193516"><span class="nick" style="color:#80b1d3"><a href="#193516" label="[19:35:16]">&lt;siraben&gt;</a></span><span class="message">we are running guardedly.hs using patty_raw's bytecode and putting the output into generated/guardedly.c?</span></div><div class="line" id="193614"><span class="nick" style="color:#6b8072"><a href="#193614" label="[19:36:14]">&lt;pder&gt;</a></span><span class="message">siraben, it means using guardedly.hs as an input file run the patty bytecode and output guardedly.c</span></div><div class="line" id="193645"><span class="nick" style="color:#6b8072"><a href="#193645" label="[19:36:45]">&lt;pder&gt;</a></span><span class="message">equivalent to ./patty &lt; guardedly.hs &gt; guardedly.c</span></div><div class="line" id="193750"><span class="nick" style="color:#80b1d3"><a href="#193750" label="[19:37:50]">&lt;siraben&gt;</a></span><span class="message">pder: I see</span></div><div class="line" id="193805"><span class="nick" style="color:#80b1d3"><a href="#193805" label="[19:38:05]">&lt;siraben&gt;</a></span><span class="message">OriansJ: it appears that the latest commit changed the hash of share/vm, so I opened <a rel="nofollow" href="https://github.com/oriansj/blynn-compiler/pull/7">https://github.com/oriansj/blynn-compiler/pull/7</a> </span></div><div class="line" id="193901"><span class="nick" style="color:#80b1d3"><a href="#193901" label="[19:39:01]">&lt;siraben&gt;</a></span><span class="message">I'm stuck trying to make patty not need filter_haskell_output, I'll try again tomorrow.</span></div><div class="line" id="195514"><span class="nick" style="color:#6b8072"><a href="#195514" label="[19:55:14]">&lt;pder&gt;</a></span><span class="message">siraben, yes, I actually noticed the modification to effectively.hs outputs a different parameter for rts_reduce, and the prog array does not match</span></div><div class="line" id="201908"><span class="nick" style="color:#6b8072"><a href="#201908" label="[20:19:08]">&lt;pder&gt;</a></span><span class="message">now that I think about it, if you modify the Haskell, the bytecode should change, so maybe it is not a problem</span></div><div class="line" id="221534"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado_</span></div><div class="line" id="221536"><span class="nick">***</span><span class="message notice">rekado_ is now known as rekado</span></div><div class="line" id="221835"><span class="nick" style="color:#234e69"><a href="#221835" label="[22:18:35]">&lt;rekado&gt;</a></span><span class="message">siraben: oh.  A Haskell detour to get to Scheme?  Huh.</span></div><div class="line" id="221911"><span class="nick" style="color:#234e69"><a href="#221911" label="[22:19:11]">&lt;rekado&gt;</a></span><span class="message">so GHC bootstrapping is still an unsolved issue, basically where I left it a few years ago</span></div><div class="line" id="221935"><span class="nick" style="color:#6c3d55"><a href="#221935" label="[22:19:35]">&lt;fossy&gt;</a></span><span class="message">yes</span></div><div class="line" id="221941"><span class="nick" style="color:#6c3d55"><a href="#221941" label="[22:19:41]">&lt;fossy&gt;</a></span><span class="message">although this may help</span></div><div class="line" id="221956"><span class="nick" style="color:#6c3d55"><a href="#221956" label="[22:19:56]">&lt;fossy&gt;</a></span><span class="message">an odd detour, I agree, or I used to think so at least</span></div><div class="line" id="222021"><span class="nick" style="color:#234e69"><a href="#222021" label="[22:20:21]">&lt;rekado&gt;</a></span><span class="message">back then we didnâ€™t have a need for GCC 2 in Guix, so I didnâ€™t consider using it to build the GHC 4 rts</span></div><div class="line" id="222022"><span class="nick" style="color:#6c3d55"><a href="#222022" label="[22:20:22]">&lt;fossy&gt;</a></span><span class="message">but it is quite ingenious</span></div><div class="line" id="222046"><span class="nick" style="color:#234e69"><a href="#222046" label="[22:20:46]">&lt;rekado&gt;</a></span><span class="message">but now we have GCC 2 for the early bootstrap anyway, so I guess I should revisit this</span></div><div class="line" id="222051"><span class="nick" style="color:#6c3d55"><a href="#222051" label="[22:20:51]">&lt;fossy&gt;</a></span><span class="message">didnt you think using an older gcc might help with the nhc95 thing?</span></div><div class="line" id="222146"><span class="nick" style="color:#234e69"><a href="#222146" label="[22:21:46]">&lt;rekado&gt;</a></span><span class="message">I think the nhc route is a dead-end</span></div><div class="line" id="222236"><span class="nick" style="color:#234e69"><a href="#222236" label="[22:22:36]">&lt;rekado&gt;</a></span><span class="message">I got as far as I had to for the blog post, but there were no good clues from there on</span></div><div class="line" id="222308"><span class="nick" style="color:#234e69"><a href="#222308" label="[22:23:08]">&lt;rekado&gt;</a></span><span class="message">the general approach might still work: GHC partially interpreted by Hugs, used to build itself.</span></div><div class="line" id="222331"><span class="nick" style="color:#234e69"><a href="#222331" label="[22:23:31]">&lt;rekado&gt;</a></span><span class="message">but for that to work I need to build the GHC 4 rts libs first and tell Hugs to use them.</span></div><div class="line" id="222359"><span class="nick" style="color:#234e69"><a href="#222359" label="[22:23:59]">&lt;rekado&gt;</a></span><span class="message">my memory on this is spotty, but I made some notes when it was all fresh</span></div><div class="line" id="233544"><span class="nick" style="color:#2e2a4a"><a href="#233544" label="[23:35:44]">&lt;OriansJ&gt;</a></span><span class="message">pder: working on the unsigned compare in M2-Planet right now; I should have x86 and AMD64 done tonight and armv7l tomorrow (I'll need deesix or yt's help with AArch64) but it should be a pretty simple patch for them to do.</span></div><div class="line" id="233716"><span class="nick" style="color:#2e2a4a"><a href="#233716" label="[23:37:16]">&lt;OriansJ&gt;</a></span><span class="message">siraben: thank you for the patch. it is merged</span></div><div class="line" id="233848"><span class="nick" style="color:#2e2a4a"><a href="#233848" label="[23:38:48]">&lt;OriansJ&gt;</a></span><span class="message">rekado: honestly Haskell is looking like a smaller problem then syntax-case in C as we made major progress in just 1 month.</span></div><div class="line" id="234209"><span class="nick" style="color:#2e2a4a"><a href="#234209" label="[23:42:09]">&lt;OriansJ&gt;</a></span><span class="message">we already are up to a rather impressive subset of haskell supported;</span></div><div class="line" id="234255"><span class="nick" style="color:#2e2a4a"><a href="#234255" label="[23:42:55]">&lt;OriansJ&gt;</a></span><span class="message">only a handful of blob like pieces to address and once it becomes self-hosting; then we are in another class of possible solutions.</span></div><div class="line" id="234743"><span class="nick" style="color:#2e2a4a"><a href="#234743" label="[23:47:43]">&lt;OriansJ&gt;</a></span><span class="message">pder: the M2-Planet update for unsigned behavior in x86 is up</span></div><div class="line" id="234823"><span class="nick" style="color:#2e2a4a"><a href="#234823" label="[23:48:23]">&lt;OriansJ&gt;</a></span><span class="message">just make sure to copy the updated test/common_x86/x86_defs.M1 as I am using seta setae setb and setbe</span></div><div class="line" id="234921"><span class="nick" style="color:#2e2a4a"><a href="#234921" label="[23:49:21]">&lt;OriansJ&gt;</a></span><span class="message">please make sure that it solves the unsigned comparison problem for you and if not let me know and I'll try something different.</span></div><div class="line" id="235438"><span class="nick" style="color:#2e2a4a"><a href="#235438" label="[23:54:38]">&lt;OriansJ&gt;</a></span><span class="message">hmmm that isn't good</span></div><br /></div></body></html>