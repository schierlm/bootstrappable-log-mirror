<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-07-08.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000058"><span class="nick" style="color:#389600"><a href="#000058" label="[00:00:58]">&lt;oriansj&gt;</a></span><span class="message">Hagfish: technically, I'm open to *ALL* bootstrapping paths.</span></div><div class="line" id="000247"><span class="nick" style="color:#389600"><a href="#000247" label="[00:02:47]">&lt;oriansj&gt;</a></span><span class="message">If you want to make a haskell compiler in assembly and use it to build a scheme interpreter to run a C compiler; I am here to encourage you to do so. (Hint blynn-compiler can be built by M2-Planet)</span></div><div class="line" id="000351"><span class="nick" style="color:#389600"><a href="#000351" label="[00:03:51]">&lt;oriansj&gt;</a></span><span class="message">If you want to bootstrap upon the ether blockchain spending your own cash on boatloads of gas: go for it</span></div><div class="line" id="000519"><span class="nick" style="color:#389600"><a href="#000519" label="[00:05:19]">&lt;oriansj&gt;</a></span><span class="message">If using the microprocessor you found in a sex machine is what you want as your basis of trust and added that architecture as a bootstrap chain of trust to check all the others: cool look forward to seeing that.</span></div><div class="line" id="000605"><span class="nick" style="color:#389600"><a href="#000605" label="[00:06:05]">&lt;oriansj&gt;</a></span><span class="message">If you want to build a computer out of individual transistors: awesome, can I have the schematics?</span></div><div class="line" id="000606"><span class="nick" style="color:#8dd3c7"><a href="#000606" label="[00:06:06]">&lt;stikonas&gt;</a></span><span class="message">mid-kid: you can't run autoconf scripts using meslibc</span></div><div class="line" id="000612"><span class="nick" style="color:#8dd3c7"><a href="#000612" label="[00:06:12]">&lt;stikonas&gt;</a></span><span class="message">you need perl for autoconf</span></div><div class="line" id="000618"><span class="nick" style="color:#8dd3c7"><a href="#000618" label="[00:06:18]">&lt;stikonas&gt;</a></span><span class="message">and that needs musl</span></div><div class="line" id="000648"><span class="nick" style="color:#8dd3c7"><a href="#000648" label="[00:06:48]">&lt;stikonas&gt;</a></span><span class="message">you can at best run configure scripts that were already prepared using autoconf</span></div><div class="line" id="000809"><span class="nick" style="color:#389600"><a href="#000809" label="[00:08:09]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: and if a conflict arises inside our community, I'll be here reminding everyone that  we don't have to agree on how to do anything and forking is actively encouraged. The easier it is to fork the better</span></div><div class="line" id="000918"><span class="nick" style="color:#8dd3c7"><a href="#000918" label="[00:09:18]">&lt;stikonas&gt;</a></span><span class="message">I don't think forking happens that often</span></div><div class="line" id="000941"><span class="nick" style="color:#8dd3c7"><a href="#000941" label="[00:09:41]">&lt;stikonas&gt;</a></span><span class="message">like it was said here, wayland is not a fork, it was written by xorg developers, they just didn't want to use X12 name</span></div><div class="line" id="001010"><span class="nick" style="color:#389600"><a href="#001010" label="[00:10:10]">&lt;oriansj&gt;</a></span><span class="message">Only by empowering others can we truly empower ourselves</span></div><div class="line" id="001320"><span class="nick" style="color:#389600"><a href="#001320" label="[00:13:20]">&lt;oriansj&gt;</a></span><span class="message">stikonas: forks happen all the time, the key is to just merge them often to make the deltas easier for resolving of merge conflicts</span></div><div class="line" id="001333"><span class="nick" style="color:#6b8072"><a href="#001333" label="[00:13:33]">&lt;mihi&gt;</a></span><span class="message">stikonas, thanks. I know I cannot regenerate the autoconf scripts (config{ure,.*}) without autoconf, but I thought running should work. Now I found out that sed panics while building the Makefile, only that meslibc's panic does not print a useful error message, nor make the build fail. So tomorrow I will try to patch sed to at least tell me the errno inside the panic &quot;couldn't flush...&quot; line.</span></div><div class="line" id="001358"><span class="nick" style="color:#8dd3c7"><a href="#001358" label="[00:13:58]">&lt;stikonas&gt;</a></span><span class="message">well, I meant real forks (e.g. libreoffice vs openoffice or ffmpeg vs libav), not standard development.</span></div><div class="line" id="001628"><span class="nick" style="color:#389600"><a href="#001628" label="[00:16:28]">&lt;oriansj&gt;</a></span><span class="message">stikonas: I feel those are a reflection of the success of a community. Enough people exist to enable two different visions of solving the same problem at the same time.</span></div><div class="line" id="002137"><span class="nick" style="color:#389600"><a href="#002137" label="[00:21:37]">&lt;oriansj&gt;</a></span><span class="message">much like there being hundreds (if not thousands) of desktop enviroments that failed, those that found success made our world a better place</span></div><div class="line" id="002329"><span class="nick" style="color:#389600"><a href="#002329" label="[00:23:29]">&lt;oriansj&gt;</a></span><span class="message">for some i3 is best, others kde is best, others gnome3 is best, others mate is best....</span></div><div class="line" id="002518"><span class="nick" style="color:#389600"><a href="#002518" label="[00:25:18]">&lt;oriansj&gt;</a></span><span class="message">the forking, creating a competitor and all the rest are good</span></div><div class="line" id="020032"><span class="nick" style="color:#8dd3c7"><a href="#020032" label="[02:00:32]">&lt;stikonas&gt;</a></span><span class="message">fossy: I have removed most unversioned autotools symlinks here <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/187">https://github.com/fosslinux/live-bootstrap/pull/187</a> </span></div><div class="line" id="020056"><span class="nick" style="color:#8dd3c7"><a href="#020056" label="[02:00:56]">&lt;stikonas&gt;</a></span><span class="message">it makes calling autoreconf a bit more explicit but I think it's better to be more precise</span></div><div class="line" id="020317"><span class="nick" style="color:#8dd3c7"><a href="#020317" label="[02:03:17]">&lt;stikonas&gt;</a></span><span class="message">I'm trying baremetal bootstrapping next, so probably no other live-bootstrap requests in the near future</span></div><div class="line" id="021926"><span class="nick" style="color:#8dd3c7"><a href="#021926" label="[02:19:26]">&lt;stikonas&gt;</a></span><span class="message">hmm, stage0-uefi kaem would either need to get UTF-16 input or we need to write a function to convert chars to wide chars...</span></div><div class="line" id="021941"><span class="nick" style="color:#8dd3c7"><a href="#021941" label="[02:19:41]">&lt;stikonas&gt;</a></span><span class="message">not sure what's better...</span></div><div class="line" id="022047"><span class="nick" style="color:#8dd3c7"><a href="#022047" label="[02:20:47]">&lt;stikonas&gt;</a></span><span class="message">former is a bit inconsistent with the rest of sources and stage0-posix but latter would add extra bytes to the kaem-optional-seed binary</span></div><div class="line" id="022159"><span class="nick" style="color:#8dd3c7"><a href="#022159" label="[02:21:59]">&lt;stikonas&gt;</a></span><span class="message">oriansj: what do you think is beter?</span></div><div class="line" id="022200"><span class="nick" style="color:#8dd3c7"><a href="#022200" label="[02:22:00]">&lt;stikonas&gt;</a></span><span class="message">the latter?</span></div><div class="line" id="022258"><span class="nick" style="color:#8dd3c7"><a href="#022258" label="[02:22:58]">&lt;stikonas&gt;</a></span><span class="message">hmm, I guess it's not super complicated, just insert a zero byte every read</span></div><div class="line" id="022812"><span class="nick" style="color:#8dd3c7"><a href="#022812" label="[02:28:12]">&lt;stikonas&gt;</a></span><span class="message">hmm, if we are doing that it's probably not too much work to also keep uefi shell compatibility</span></div><div class="line" id="030313"><span class="nick" style="color:#389600"><a href="#030313" label="[03:03:13]">&lt;oriansj&gt;</a></span><span class="message">stikonas: I'd just say 2 conversion functions should be simple enough</span></div><div class="line" id="030421"><span class="nick" style="color:#389600"><a href="#030421" label="[03:04:21]">&lt;oriansj&gt;</a></span><span class="message">or really just one to strip out the null bytes on the read</span></div><div class="line" id="033020"><span class="nick" style="color:#389600"><a href="#033020" label="[03:30:20]">&lt;oriansj&gt;</a></span><span class="message">or we might not even need to do that at all as hex0,hex1 and hex2 should be ignoring null bytes entirely</span></div><div class="line" id="033239"><span class="nick" style="color:#389600"><a href="#033239" label="[03:32:39]">&lt;oriansj&gt;</a></span><span class="message">actually none of the programs until M2-Planet actually look at the char** argv so in theory no changes would be needed as they are just passed straight to the syscalls</span></div><div class="line" id="091028"><span class="nick" style="color:#80b1d3"><a href="#091028" label="[09:10:28]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: cool, i will look at it in an hour or so</span></div><div class="line" id="091055"><span class="nick" style="color:#80b1d3"><a href="#091055" label="[09:10:55]">&lt;fossy&gt;</a></span><span class="message">i'm slowly getting python together, (outside live-bootstrap for now) - just to see what the path is</span></div><div class="line" id="091542"><span class="nick" style="color:#80b1d3"><a href="#091542" label="[09:15:42]">&lt;fossy&gt;</a></span><span class="message">this UEFI stuff sounds really good, gets us closer to metal</span></div><div class="line" id="095453"><span class="nick" style="color:#6d2462"><a href="#095453" label="[09:54:53]">&lt;stikonas[m]&gt;</a></span><span class="message">oriansj: reads just read what is in the file but we need to add zeroes before passing to syscalls</span></div><div class="line" id="095545"><span class="nick" style="color:#6d2462"><a href="#095545" label="[09:55:45]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, at C level, I think I can do it with uint8_t and uint16_t arrays</span></div><div class="line" id="233238"><span class="nick" style="color:#6b8072"><a href="#233238" label="[23:32:38]">&lt;mihi&gt;</a></span><span class="message">janneke, stikonas: I was able to pin down my meslibc issue: When compiling sed-4.0.9 against meslibc, and running &quot;sed s/x/y/ /dev/null&quot;, instead of outputting nothing, sed fails to fflush /dev/null and the code in gcc's makefile does not continue with the rest of the command which would write the rest of the gcc Makefile. Guix probably got around this by using sed from gash-utils at that stage.</span></div><div class="line" id="233325"><span class="nick" style="color:#6b8072"><a href="#233325" label="[23:33:25]">&lt;mihi&gt;</a></span><span class="message">Not sure which place this is easiest to patch (meslibc, sed, configure script)</span></div><div class="line" id="233654"><span class="nick" style="color:#234e69"><a href="#233654" label="[23:36:54]">&lt;janneke&gt;</a></span><span class="message">mihi: that sounds terrible</span></div><div class="line" id="233710"><span class="nick">***</span><span class="message notice">ChanServ sets mode: -o janneke</span></div><div class="line" id="233752"><span class="nick" style="color:#8dd3c7"><a href="#233752" label="[23:37:52]">&lt;stikonas&gt;</a></span><span class="message">well, it's a bug in meslibc that other components trigger, so ideally it should be fixed in meslibc</span></div><div class="line" id="233904"><span class="nick" style="color:#6b8072"><a href="#233904" label="[23:39:04]">&lt;mihi&gt;</a></span><span class="message">janneke, would love if you could confirm that it also happens in your environment. For reference, my binaries are available at <a rel="nofollow" href="https://github.com/schierlm/FullSourceBootstrapFromGit/releases/download/part02-artifacts/part02-output.tar.xz">https://github.com/schierlm/FullSourceBootstrapFromGit/releases/download/part02-artifacts/part02-output.tar.xz</a>  (sed is at /opt/part02/sed/bin/sed). Scripts that built that archive are also available in the same repo.</span></div><div class="line" id="234119"><span class="nick" style="color:#6b8072"><a href="#234119" label="[23:41:19]">&lt;mihi&gt;</a></span><span class="message">stikonas, yes, ideally. But it seems to me that meslibc uses the file descriptors directly as file pointers, and therefore cannot even detect whether the stream was opened for reading or writing.</span></div><div class="line" id="234131"><span class="nick" style="color:#6b8072"><a href="#234131" label="[23:41:31]">&lt;mihi&gt;</a></span><span class="message">-&gt; <a rel="nofollow" href="https://gitlab.com/janneke/mes/-/blob/master/lib/stdio/fflush.c">https://gitlab.com/janneke/mes/-/blob/master/lib/stdio/fflush.c</a> </span></div><div class="line" id="234450"><span class="nick" style="color:#8dd3c7"><a href="#234450" label="[23:44:50]">&lt;stikonas&gt;</a></span><span class="message">mihi: hmm, can't it implement something like M2libc?</span></div><div class="line" id="234452"><span class="nick" style="color:#8dd3c7"><a href="#234452" label="[23:44:52]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/M2libc/blob/main/stdio.c#L297">https://github.com/oriansj/M2libc/blob/main/stdio.c#L297</a> </span></div><div class="line" id="234523"><span class="nick" style="color:#8dd3c7"><a href="#234523" label="[23:45:23]">&lt;stikonas&gt;</a></span><span class="message">it seems that in this case M2libc is more robust</span></div><div class="line" id="234529"><span class="nick" style="color:#8dd3c7"><a href="#234529" label="[23:45:29]">&lt;stikonas&gt;</a></span><span class="message">hmm...</span></div><div class="line" id="234552"><span class="nick" style="color:#6b8072"><a href="#234552" label="[23:45:52]">&lt;mihi&gt;</a></span><span class="message">in M2libc, FILE is a struct, and in meslibc, FILE is a raw file descriptor. So yes, with structs it would be easy :)</span></div><div class="line" id="234627"><span class="nick" style="color:#8dd3c7"><a href="#234627" label="[23:46:27]">&lt;stikonas&gt;</a></span><span class="message">well, I'm just asking can't we port meslibc to struct file descriptor?</span></div><div class="line" id="234647"><span class="nick" style="color:#8dd3c7"><a href="#234647" label="[23:46:47]">&lt;stikonas&gt;</a></span><span class="message">there is a simple example (m2libc) how to do it, so can't be that hard...</span></div><div class="line" id="234735"><span class="nick" style="color:#6b8072"><a href="#234735" label="[23:47:35]">&lt;mihi&gt;</a></span><span class="message">I don't think it is hard either, it is just changing a lot of functions, so no quick&amp;dirty bugfix.</span></div><div class="line" id="234759"><span class="nick" style="color:#6b8072"><a href="#234759" label="[23:47:59]">&lt;mihi&gt;</a></span><span class="message">OTOH, M2libc's &quot;buffer everything on opening file&quot; behaviour will probably get us into other issues, e.g. with coreutil's &quot;head&quot; command. But we could use a struct and still use less aggressive buffering like e.g. musl does.</span></div><div class="line" id="234858"><span class="nick" style="color:#8dd3c7"><a href="#234858" label="[23:48:58]">&lt;stikonas&gt;</a></span><span class="message">anyway, it depends on how much you want to use meslibc</span></div><div class="line" id="234909"><span class="nick" style="color:#8dd3c7"><a href="#234909" label="[23:49:09]">&lt;stikonas&gt;</a></span><span class="message">I've got an impression that you want to use it quite a bit</span></div><div class="line" id="234920"><span class="nick" style="color:#6b8072"><a href="#234920" label="[23:49:20]">&lt;mihi&gt;</a></span><span class="message">in fact, gcc/glibc are the last two things I want to build with it.</span></div><div class="line" id="234951"><span class="nick" style="color:#6b8072"><a href="#234951" label="[23:49:51]">&lt;mihi&gt;</a></span><span class="message">I would even go a glibc+tcc route, which some people claim they have done, but I was unable to (after patching out the checks for real gcc in configure script)</span></div><div class="line" id="235013"><span class="nick" style="color:#8dd3c7"><a href="#235013" label="[23:50:13]">&lt;stikonas&gt;</a></span><span class="message">you might need to rebuild gcc a few times...</span></div><div class="line" id="235053"><span class="nick" style="color:#6b8072"><a href="#235053" label="[23:50:53]">&lt;mihi&gt;</a></span><span class="message">yeah, I know, gcc rebuilds itself I believe 6 times in total, if you do the usual gcc-&gt;glibc-&gt;gcc without --disable-bootstrap.</span></div><div class="line" id="235059"><span class="nick" style="color:#8dd3c7"><a href="#235059" label="[23:50:59]">&lt;stikonas&gt;</a></span><span class="message">I remember in live-bootstrap we had to rebuild tcc with musl twice before it was not buggy... I.e. tcc-meslibc-&gt;musl-&gt;tcc-musl-&gt;musl2-&gt;tcc-musl2</span></div><div class="line" id="235126"><span class="nick" style="color:#8dd3c7"><a href="#235126" label="[23:51:26]">&lt;stikonas&gt;</a></span><span class="message">--disable bootstrap might be fine...</span></div><div class="line" id="235204"><span class="nick" style="color:#6b8072"><a href="#235204" label="[23:52:04]">&lt;mihi&gt;</a></span><span class="message">gcc-2.95 builds fast (compared to recent ones) anyway.</span></div><div class="line" id="235445"><span class="nick" style="color:#6b8072"><a href="#235445" label="[23:54:45]">&lt;mihi&gt;</a></span><span class="message">When starting this, I was assuming that at the point when I first build gcc, my build stack is 100% the same as guix uses. But I underestimated the impact of gash-utils, so I already needed to patch coreutils expr and dirname to work with meslibc.</span></div><div class="line" id="235446"><span class="nick" style="color:#8dd3c7"><a href="#235446" label="[23:54:46]">&lt;stikonas&gt;</a></span><span class="message">well, it also depends on compile flags...</span></div><div class="line" id="235455"><span class="nick" style="color:#8dd3c7"><a href="#235455" label="[23:54:55]">&lt;stikonas&gt;</a></span><span class="message">-O0 speeds up compilation significantly</span></div><div class="line" id="235537"><span class="nick" style="color:#8dd3c7"><a href="#235537" label="[23:55:37]">&lt;stikonas&gt;</a></span><span class="message">mihi: so what are you bootstrapping assumptions and goals?</span></div><div class="line" id="235539"><span class="nick" style="color:#6b8072"><a href="#235539" label="[23:55:39]">&lt;mihi&gt;</a></span><span class="message">I've heard of cases where gcc -O0 built with gcc -O0 caused the build to fail, but not sure whether they have been fixed</span></div><div class="line" id="235547"><span class="nick" style="color:#8dd3c7"><a href="#235547" label="[23:55:47]">&lt;stikonas&gt;</a></span><span class="message">you are trying not to use gash, and gash utils?</span></div><div class="line" id="235632"><span class="nick" style="color:#6b8072"><a href="#235632" label="[23:56:32]">&lt;mihi&gt;</a></span><span class="message">if you don't mind, I'm lazy and just point you to the introduction on <a rel="nofollow" href="https://github.com/schierlm/FullSourceBootstrapFromGit#introduction">https://github.com/schierlm/FullSourceBootstrapFromGit#introduction</a>  :)</span></div><div class="line" id="235705"><span class="nick" style="color:#6b8072"><a href="#235705" label="[23:57:05]">&lt;mihi&gt;</a></span><span class="message">no guile, no gash, no gash-utils, and in general all source packages stripped down to reduce the number of &quot;exotic&quot; source that needs to be reviewed.</span></div><br /></div></body></html>