<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-02-11.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="014728"><span class="nick" style="color:#389600"><a href="#014728" label="[01:47:28]">&lt;fossy&gt;</a></span><span class="message">doras: #242</span></div><div class="line" id="014742"><span class="nick" style="color:#389600"><a href="#014742" label="[01:47:42]">&lt;fossy&gt;</a></span><span class="message">note that the checksums are not correct, so don't worry about that</span></div><div class="line" id="015020"><span class="nick" style="color:#8dd3c7"><a href="#015020" label="[01:50:20]">&lt;stikonas&gt;</a></span><span class="message">clang can finish infinite loops in a few miliseconds :D <a rel="nofollow" href="https://paste.debian.net/1270331/">https://paste.debian.net/1270331/</a> </span></div><div class="line" id="015051"><span class="nick" style="color:#389600"><a href="#015051" label="[01:50:51]">&lt;fossy&gt;</a></span><span class="message">.....</span></div><div class="line" id="015053"><span class="nick" style="color:#389600"><a href="#015053" label="[01:50:53]">&lt;fossy&gt;</a></span><span class="message">uhhh</span></div><div class="line" id="015118"><span class="nick" style="color:#8dd3c7"><a href="#015118" label="[01:51:18]">&lt;stikonas&gt;</a></span><span class="message">ok, I guess I can start reviewing</span></div><div class="line" id="015130"><span class="nick" style="color:#389600"><a href="#015130" label="[01:51:30]">&lt;fossy&gt;</a></span><span class="message">stikonas: how did you come across that? i assume its a compiler bug</span></div><div class="line" id="015144"><span class="nick" style="color:#8dd3c7"><a href="#015144" label="[01:51:44]">&lt;stikonas&gt;</a></span><span class="message">fossy: saw it on mastodon...</span></div><div class="line" id="015155"><span class="nick" style="color:#8dd3c7"><a href="#015155" label="[01:51:55]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/llvm/llvm-project/issues/60622">https://github.com/llvm/llvm-project/issues/60622</a> </span></div><div class="line" id="015158"><span class="nick" style="color:#389600"><a href="#015158" label="[01:51:58]">&lt;fossy&gt;</a></span><span class="message">haha, thats really cursed</span></div><div class="line" id="015253"><span class="nick" style="color:#8dd3c7"><a href="#015253" label="[01:52:53]">&lt;stikonas&gt;</a></span><span class="message">apparently C++ spec says you can assume that loop that does not call library  i/o or accesses variables terminates</span></div><div class="line" id="015601"><span class="nick" style="color:#389600"><a href="#015601" label="[01:56:01]">&lt;fossy&gt;</a></span><span class="message">and no return, so it falls through to next symbol?</span></div><div class="line" id="015831"><span class="nick" style="color:#8dd3c7"><a href="#015831" label="[01:58:31]">&lt;stikonas&gt;</a></span><span class="message">no, that's probably special casing</span></div><div class="line" id="015844"><span class="nick" style="color:#8dd3c7"><a href="#015844" label="[01:58:44]">&lt;stikonas&gt;</a></span><span class="message">that &quot;unreachable&quot; is probably the only name that works</span></div><div class="line" id="015858"><span class="nick" style="color:#8dd3c7"><a href="#015858" label="[01:58:58]">&lt;stikonas&gt;</a></span><span class="message">possibly internally there is unreachable: label added to function</span></div><div class="line" id="015908"><span class="nick" style="color:#8dd3c7"><a href="#015908" label="[01:59:08]">&lt;stikonas&gt;</a></span><span class="message">and then jump to it? (but I'm guessing here, I didn't check)</span></div><div class="line" id="020549"><span class="nick" style="color:#8dd3c7"><a href="#020549" label="[02:05:49]">&lt;stikonas&gt;</a></span><span class="message">fossy: can we move python-3.11 after GCC?</span></div><div class="line" id="020610"><span class="nick" style="color:#8dd3c7"><a href="#020610" label="[02:06:10]">&lt;stikonas&gt;</a></span><span class="message">I guess file needs python, but should run fine with older pythons</span></div><div class="line" id="021339"><span class="nick" style="color:#8dd3c7"><a href="#021339" label="[02:13:39]">&lt;stikonas&gt;</a></span><span class="message">looks good in general</span></div><div class="line" id="021401"><span class="nick" style="color:#8dd3c7"><a href="#021401" label="[02:14:01]">&lt;stikonas&gt;</a></span><span class="message">I guess we need to backport your crc32 table rebuild to gcc 4.7.4</span></div><div class="line" id="021457"><span class="nick" style="color:#8dd3c7"><a href="#021457" label="[02:14:57]">&lt;stikonas&gt;</a></span><span class="message">oh file is needed for that stripping...</span></div><div class="line" id="022731"><span class="nick" style="color:#2e2a4a"><a href="#022731" label="[02:27:31]">&lt;sam_&gt;</a></span><span class="message">the issue is C++ requires forward-progress</span></div><div class="line" id="022815"><span class="nick" style="color:#2e2a4a"><a href="#022815" label="[02:28:15]">&lt;sam_&gt;</a></span><span class="message">I don't really get the complaint in that bug tbh</span></div><div class="line" id="035243"><span class="nick" style="color:#6b8072"><a href="#035243" label="[03:52:43]">&lt;oriansj&gt;</a></span><span class="message">stikonas: it doesn't just complete an infinite loop but also calls an uncalled function.</span></div><div class="line" id="090853"><span class="nick" style="color:#80b1d3"><a href="#090853" label="[09:08:53]">&lt;doras&gt;</a></span><span class="message">Thanks!</span></div><div class="line" id="132243"><span class="nick" style="color:#6d2462"><a href="#132243" label="[13:22:43]">&lt;mihi&gt;</a></span><span class="message">sam_, stikonas: A C++ compiler is free to (1) remove unreachable statements (like the RET after an infinite loop), (2) remove any (possibly infinite) loops that show no observable behaviour. The (for me) surprising/unintuitive result is that Clang performs (1) before (2) although (2) falsifies the prerequisites of (1)</span></div><div class="line" id="132508"><span class="nick" style="color:#6d2462"><a href="#132508" label="[13:25:08]">&lt;mihi&gt;</a></span><span class="message">But you can see similar behaviour with some gcc versions in -O2 too. Consider a struct s { int a[10]; int b[10] }. Now when running »for(int i=0; i&lt;20; i++) { sum += s.a[i] }«, the compiler reasons that since i is used to access an array of size 10, it can never be 20 or higher, therefore the loop never terminates and it removes all statements after the loop (including the RET)</span></div><div class="line" id="132624"><span class="nick" style="color:#6d2462"><a href="#132624" label="[13:26:24]">&lt;mihi&gt;</a></span><span class="message">yes, the snippet shows undefined behaviour, but in most cases the array access will not yet segfault (as there is another array in the struct), but the program will probably afterwards if it falls through to the next function without having cleaned up the stack.</span></div><div class="line" id="132819"><span class="nick" style="color:#6d2462"><a href="#132819" label="[13:28:19]">&lt;mihi&gt;</a></span><span class="message">still, these are not compiler bugs (they are better than nasal deamons), yet a warning would be nice in cases like this.</span></div><div class="line" id="154349"><span class="nick" style="color:#234e69"><a href="#154349" label="[15:43:49]">&lt;muurkha&gt;</a></span><span class="message">these are awfully close to nasal demons</span></div><div class="line" id="232042"><span class="nick" style="color:#8dd3c7"><a href="#232042" label="[23:20:42]">&lt;stikonas&gt;</a></span><span class="message">fossy: ready to merge? or is there still anything left (your PR is still in draft mode)</span></div><div class="line" id="232321"><span class="nick" style="color:#389600"><a href="#232321" label="[23:23:21]">&lt;fossy&gt;</a></span><span class="message">stikonas: i think we're good now, i'll merge</span></div><div class="line" id="232330"><span class="nick" style="color:#8dd3c7"><a href="#232330" label="[23:23:30]">&lt;stikonas&gt;</a></span><span class="message">ok</span></div><div class="line" id="232332"><span class="nick" style="color:#8dd3c7"><a href="#232332" label="[23:23:32]">&lt;stikonas&gt;</a></span><span class="message">let's merge</span></div><div class="line" id="232350"><span class="nick" style="color:#8dd3c7"><a href="#232350" label="[23:23:50]">&lt;stikonas&gt;</a></span><span class="message">I'm now testing readline, but it's not ready for PR yet...</span></div><div class="line" id="232355"><span class="nick" style="color:#389600"><a href="#232355" label="[23:23:55]">&lt;fossy&gt;</a></span><span class="message">neat</span></div><div class="line" id="232413"><span class="nick" style="color:#8dd3c7"><a href="#232413" label="[23:24:13]">&lt;stikonas&gt;</a></span><span class="message">I think I'll go for 8.0 (and not 8.2) as that can be built earlier</span></div><div class="line" id="232422"><span class="nick" style="color:#8dd3c7"><a href="#232422" label="[23:24:22]">&lt;stikonas&gt;</a></span><span class="message">so we can build bash with it</span></div><div class="line" id="232428"><span class="nick" style="color:#389600"><a href="#232428" label="[23:24:28]">&lt;fossy&gt;</a></span><span class="message">yeah, good idea</span></div><div class="line" id="232428"><span class="nick" style="color:#8dd3c7"><a href="#232428" label="[23:24:28]">&lt;stikonas&gt;</a></span><span class="message">8.2 needs newer autoconf</span></div><div class="line" id="232452"><span class="nick" style="color:#389600"><a href="#232452" label="[23:24:52]">&lt;fossy&gt;</a></span><span class="message">i was pleasantly surprised i could use the newest 'file'</span></div><div class="line" id="232506"><span class="nick" style="color:#8dd3c7"><a href="#232506" label="[23:25:06]">&lt;stikonas&gt;</a></span><span class="message">fossy: could you also update GCC 4.7 to regen crc?</span></div><div class="line" id="232511"><span class="nick" style="color:#389600"><a href="#232511" label="[23:25:11]">&lt;fossy&gt;</a></span><span class="message">stikonas: yep</span></div><div class="line" id="232512"><span class="nick" style="color:#8dd3c7"><a href="#232512" label="[23:25:12]">&lt;stikonas&gt;</a></span><span class="message">I think 4.0.4 does not have it</span></div><div class="line" id="232521"><span class="nick" style="color:#8dd3c7"><a href="#232521" label="[23:25:21]">&lt;stikonas&gt;</a></span><span class="message">or at least I didn't notice it with 30s check</span></div><div class="line" id="232902"><span class="nick" style="color:#8dd3c7"><a href="#232902" label="[23:29:02]">&lt;stikonas&gt;</a></span><span class="message">I guess anything we add at the end of sysc can be basically the latest now</span></div><div class="line" id="232916"><span class="nick" style="color:#389600"><a href="#232916" label="[23:29:16]">&lt;fossy&gt;</a></span><span class="message">yeah, it should be, which is very nice :D</span></div><div class="line" id="232920"><span class="nick" style="color:#8dd3c7"><a href="#232920" label="[23:29:20]">&lt;stikonas&gt;</a></span><span class="message">(at least normal stuff that doesn't need extra bootstrapping)</span></div><div class="line" id="235214"><span class="nick" style="color:#8dd3c7"><a href="#235214" label="[23:52:14]">&lt;stikonas&gt;</a></span><span class="message">though I guess we won't actually need to add much more stuff to the end of live-bootstrap...</span></div><br /></div></body></html>