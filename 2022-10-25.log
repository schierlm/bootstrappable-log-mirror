<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-10-25.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000003"><span class="nick" style="color:#389600"><a href="#000003" label="[00:00:03]">&lt;stikonas&gt;</a></span><span class="message">oriansj: <a rel="nofollow" href="https://paste.debian.net/1258158/">https://paste.debian.net/1258158/</a> </span></div><div class="line" id="000030"><span class="nick" style="color:#389600"><a href="#000030" label="[00:00:30]">&lt;stikonas&gt;</a></span><span class="message">oriansj: fputc on line 166 handles \r</span></div><div class="line" id="000059"><span class="nick" style="color:#389600"><a href="#000059" label="[00:00:59]">&lt;stikonas&gt;</a></span><span class="message">(I meant branches are easier than pastebin if you want to reproduce issue)</span></div><div class="line" id="000220"><span class="nick" style="color:#389600"><a href="#000220" label="[00:02:20]">&lt;stikonas&gt;</a></span><span class="message">pushed it here too (<a rel="nofollow" href="https://github.com/stikonas/M2libc/tree/wip">https://github.com/stikonas/M2libc/tree/wip</a>) </span></div><div class="line" id="000623"><span class="nick" style="color:#8dd3c7"><a href="#000623" label="[00:06:23]">&lt;rekado_&gt;</a></span><span class="message">this DEBUG_LoadSymbols stuff is useless.  The segfault in hsc happens much too early for any of this debug stuff to contain useful info.</span></div><div class="line" id="000652"><span class="nick" style="color:#8dd3c7"><a href="#000652" label="[00:06:52]">&lt;rekado_&gt;</a></span><span class="message">I’ll try building binutils &lt; 2.22</span></div><div class="line" id="000705"><span class="nick" style="color:#8dd3c7"><a href="#000705" label="[00:07:05]">&lt;rekado_&gt;</a></span><span class="message">got a build of 2.11 but “as” segfaults :-/</span></div><div class="line" id="000724"><span class="nick" style="color:#389600"><a href="#000724" label="[00:07:24]">&lt;stikonas&gt;</a></span><span class="message">rekado_: but about 2.14, would that work?</span></div><div class="line" id="000818"><span class="nick" style="color:#8dd3c7"><a href="#000818" label="[00:08:18]">&lt;rekado_&gt;</a></span><span class="message">I tried 2.14a, but I also get a segfault in “as’</span></div><div class="line" id="000832"><span class="nick" style="color:#8dd3c7"><a href="#000832" label="[00:08:32]">&lt;rekado_&gt;</a></span><span class="message">2.11 is from around the same time as GHC 4, so I tried it first</span></div><div class="line" id="000847"><span class="nick" style="color:#389600"><a href="#000847" label="[00:08:47]">&lt;stikonas&gt;</a></span><span class="message">as itself segfaults?</span></div><div class="line" id="000856"><span class="nick" style="color:#389600"><a href="#000856" label="[00:08:56]">&lt;stikonas&gt;</a></span><span class="message">when compiling GHC sources?</span></div><div class="line" id="001017"><span class="nick" style="color:#8dd3c7"><a href="#001017" label="[00:10:17]">&lt;rekado_&gt;</a></span><span class="message">just by itself</span></div><div class="line" id="001030"><span class="nick" style="color:#8dd3c7"><a href="#001030" label="[00:10:30]">&lt;rekado_&gt;</a></span><span class="message">gdb doesn’t tell me anything</span></div><div class="line" id="001037"><span class="nick" style="color:#8dd3c7"><a href="#001037" label="[00:10:37]">&lt;rekado_&gt;</a></span><span class="message">0x00000000 in ?? ()</span></div><div class="line" id="001048"><span class="nick" style="color:#8dd3c7"><a href="#001048" label="[00:10:48]">&lt;rekado_&gt;</a></span><span class="message">‘as’ is not stripped</span></div><div class="line" id="001123"><span class="nick" style="color:#389600"><a href="#001123" label="[00:11:23]">&lt;stikonas&gt;</a></span><span class="message">hmm, if you are up for it, you can try static musl build from live-bootstrap (I even have a it saved here <a rel="nofollow" href="https://stikonas.eu/files/bootstrap/binutils-2.14_0.tar.bz2">https://stikonas.eu/files/bootstrap/binutils-2.14_0.tar.bz2</a>) </span></div><div class="line" id="001219"><span class="nick" style="color:#8dd3c7"><a href="#001219" label="[00:12:19]">&lt;rekado_&gt;</a></span><span class="message">I probably have something too modern in my build environment</span></div><div class="line" id="001242"><span class="nick" style="color:#389600"><a href="#001242" label="[00:12:42]">&lt;stikonas&gt;</a></span><span class="message">possibly, hence my suggestion to try some other build</span></div><div class="line" id="001822"><span class="nick" style="color:#2e2a4a"><a href="#001822" label="[00:18:22]">&lt;oriansj&gt;</a></span><span class="message">my bet is an off-by-one stack error in one of the asm blocks</span></div><div class="line" id="001835"><span class="nick" style="color:#389600"><a href="#001835" label="[00:18:35]">&lt;stikonas&gt;</a></span><span class="message">oriansj: could very well be</span></div><div class="line" id="001845"><span class="nick" style="color:#389600"><a href="#001845" label="[00:18:45]">&lt;stikonas&gt;</a></span><span class="message">my bet is on some kind of memory error too...</span></div><div class="line" id="002013"><span class="nick" style="color:#2e2a4a"><a href="#002013" label="[00:20:13]">&lt;oriansj&gt;</a></span><span class="message">is it supposed to be &quot;sub_rsp, %16&quot; or &quot;sub_rsp, %24&quot;?</span></div><div class="line" id="002030"><span class="nick" style="color:#389600"><a href="#002030" label="[00:20:30]">&lt;stikonas&gt;</a></span><span class="message">oriansj: depends on the number of arguments</span></div><div class="line" id="002049"><span class="nick" style="color:#389600"><a href="#002049" label="[00:20:49]">&lt;stikonas&gt;</a></span><span class="message">if UEFI function has one argument, then we need to allocate 8</span></div><div class="line" id="002054"><span class="nick" style="color:#389600"><a href="#002054" label="[00:20:54]">&lt;stikonas&gt;</a></span><span class="message">4 arguments is 32</span></div><div class="line" id="002123"><span class="nick" style="color:#389600"><a href="#002123" label="[00:21:23]">&lt;stikonas&gt;</a></span><span class="message">after that arguments are only pushed onto stack by value and not written to registers</span></div><div class="line" id="002220"><span class="nick" style="color:#389600"><a href="#002220" label="[00:22:20]">&lt;stikonas&gt;</a></span><span class="message">so arguments 1 to 4 is rcx, rdx, r8, r9 but you need to reserve 8, 16, 24, 32 bytes of stack space, anything further is just pushed onto stack</span></div><div class="line" id="002431"><span class="nick" style="color:#389600"><a href="#002431" label="[00:24:31]">&lt;stikonas&gt;</a></span><span class="message">which complicates things a bit, because when we push stuff onto stack, those stack offsets change...</span></div><div class="line" id="002738"><span class="nick" style="color:#2e2a4a"><a href="#002738" label="[00:27:38]">&lt;oriansj&gt;</a></span><span class="message">just more proof of your brillance in  working around all the UEFI damage.</span></div><div class="line" id="002907"><span class="nick" style="color:#389600"><a href="#002907" label="[00:29:07]">&lt;stikonas&gt;</a></span><span class="message">some of &quot;damage&quot; is just us being not used to windows calling convention</span></div><div class="line" id="002919"><span class="nick" style="color:#389600"><a href="#002919" label="[00:29:19]">&lt;stikonas&gt;</a></span><span class="message">though linux seems more sensible to me</span></div><div class="line" id="003007"><span class="nick" style="color:#389600"><a href="#003007" label="[00:30:07]">&lt;stikonas&gt;</a></span><span class="message">and hopefully, once M2.efi works, full M2libc can be a bit neater, we'll have access to &amp;variable, etc...</span></div><div class="line" id="003100"><span class="nick" style="color:#6b8072"><a href="#003100" label="[00:31:00]">&lt;muurkha&gt;</a></span><span class="message">the libc calling convention on i386 is kind of shitty.  the Linux system call interface seems fairly sane, as is the amd64 ABI</span></div><div class="line" id="003135"><span class="nick" style="color:#6b8072"><a href="#003135" label="[00:31:35]">&lt;muurkha&gt;</a></span><span class="message">I mean if you're going to have caller-saved registers you might as well use them for arguments, the occasional variadic function can suck it up</span></div><div class="line" id="003240"><span class="nick" style="color:#2e2a4a"><a href="#003240" label="[00:32:40]">&lt;oriansj&gt;</a></span><span class="message">the only issue I have with the Linux calling convention is that more than the register with the return value is being altered.</span></div><div class="line" id="003412"><span class="nick" style="color:#389600"><a href="#003412" label="[00:34:12]">&lt;stikonas&gt;</a></span><span class="message">it might be that offsets in _open are wrong</span></div><div class="line" id="003417"><span class="nick" style="color:#2e2a4a"><a href="#003417" label="[00:34:17]">&lt;oriansj&gt;</a></span><span class="message">and a minor disagreement with the choice the ARM syscall changed from doing SYSCALL WRITE to setting the syscall number in a register then calling a syscall zero</span></div><div class="line" id="003422"><span class="nick" style="color:#389600"><a href="#003422" label="[00:34:22]">&lt;stikonas&gt;</a></span><span class="message">let me double check, but I thing 40 is too much there</span></div><div class="line" id="003427"><span class="nick" style="color:#389600"><a href="#003427" label="[00:34:27]">&lt;stikonas&gt;</a></span><span class="message">should be 32</span></div><div class="line" id="003612"><span class="nick" style="color:#389600"><a href="#003612" label="[00:36:12]">&lt;stikonas&gt;</a></span><span class="message">let me try to fix it and we'll see if it helps</span></div><div class="line" id="004149"><span class="nick" style="color:#389600"><a href="#004149" label="[00:41:49]">&lt;stikonas&gt;</a></span><span class="message">strange, it makes it even worse (always gets stuck  on first run) but maybe there is another similar bug somewhere</span></div><div class="line" id="004449"><span class="nick" style="color:#389600"><a href="#004449" label="[00:44:49]">&lt;stikonas&gt;</a></span><span class="message">oh I had 5 arguments in _open calls but only 4 in function definition</span></div><div class="line" id="004509"><span class="nick" style="color:#389600"><a href="#004509" label="[00:45:09]">&lt;stikonas&gt;</a></span><span class="message">a stupid mistake, but probably explains stack offset confusion</span></div><div class="line" id="005528"><span class="nick" style="color:#389600"><a href="#005528" label="[00:55:28]">&lt;stikonas&gt;</a></span><span class="message">hmm, back to original behaviour, so there must be another bug</span></div><div class="line" id="010126"><span class="nick" style="color:#389600"><a href="#010126" label="[01:01:26]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I found the bug</span></div><div class="line" id="010142"><span class="nick" style="color:#389600"><a href="#010142" label="[01:01:42]">&lt;stikonas&gt;</a></span><span class="message">it's a memory handling error but in C code and not in assembly blocks</span></div><div class="line" id="010254"><span class="nick" style="color:#389600"><a href="#010254" label="[01:02:54]">&lt;stikonas&gt;</a></span><span class="message">-       char* wide_filename = string2wide(filename, strlen(filename));</span></div><div class="line" id="010256"><span class="nick" style="color:#389600"><a href="#010256" label="[01:02:56]">&lt;stikonas&gt;</a></span><span class="message">+       char* wide_filename = string2wide(filename, strlen(filename) + 1);</span></div><div class="line" id="010319"><span class="nick" style="color:#389600"><a href="#010319" label="[01:03:19]">&lt;stikonas&gt;</a></span><span class="message">strlen returns length of the string without terminating 0</span></div><div class="line" id="010402"><span class="nick" style="color:#389600"><a href="#010402" label="[01:04:02]">&lt;stikonas&gt;</a></span><span class="message">and I guess sometimes that memory area had other garbage</span></div><div class="line" id="010631"><span class="nick" style="color:#2e2a4a"><a href="#010631" label="[01:06:31]">&lt;oriansj&gt;</a></span><span class="message">that would do it</span></div><div class="line" id="010705"><span class="nick" style="color:#2e2a4a"><a href="#010705" label="[01:07:05]">&lt;oriansj&gt;</a></span><span class="message">and because UEFI lacks proper memory initialization, random garbage certainly can appear</span></div><div class="line" id="010713"><span class="nick" style="color:#389600"><a href="#010713" label="[01:07:13]">&lt;stikonas&gt;</a></span><span class="message">indeed</span></div><div class="line" id="010732"><span class="nick" style="color:#389600"><a href="#010732" label="[01:07:32]">&lt;stikonas&gt;</a></span><span class="message">and probably I was opening not my file but some non existent file due to lack of wide 0</span></div><div class="line" id="010753"><span class="nick" style="color:#389600"><a href="#010753" label="[01:07:53]">&lt;stikonas&gt;</a></span><span class="message">which resulted in that function returning 0 for file descriptor</span></div><div class="line" id="010808"><span class="nick" style="color:#389600"><a href="#010808" label="[01:08:08]">&lt;stikonas&gt;</a></span><span class="message">so now it makes sense...</span></div><div class="line" id="010841"><span class="nick" style="color:#389600"><a href="#010841" label="[01:08:41]">&lt;stikonas&gt;</a></span><span class="message">still M2.efi is not working yet :(. That one is still getting stuck on anything more than &quot;M2.efi --help&quot; or &quot;M2.efi --version&quot;</span></div><div class="line" id="011102"><span class="nick" style="color:#389600"><a href="#011102" label="[01:11:02]">&lt;stikonas&gt;</a></span><span class="message">still, it's getting closer... One bug at a time</span></div><div class="line" id="011307"><span class="nick" style="color:#389600"><a href="#011307" label="[01:13:07]">&lt;stikonas&gt;</a></span><span class="message">hmm, this last bug reminds me a bit of a similar issue I saw earlier (I think in M0) which was buggy until I zeroed the whole allocated memory area at the beginning of the program</span></div><div class="line" id="012304"><span class="nick" style="color:#6b8072"><a href="#012304" label="[01:23:04]">&lt;muurkha&gt;</a></span><span class="message">oriansj: I know you prefer all registers to be callee-saved, but I'm not really comfortable working that way</span></div><div class="line" id="013644"><span class="nick" style="color:#2e2a4a"><a href="#013644" label="[01:36:44]">&lt;oriansj&gt;</a></span><span class="message">muurkha: is it because the architecture doesn't change out the stack pointer on syscalls to the kernel stack and it could be used to do some serious damage?</span></div><div class="line" id="013901"><span class="nick" style="color:#2e2a4a"><a href="#013901" label="[01:39:01]">&lt;oriansj&gt;</a></span><span class="message">or because of some performance based reason?</span></div><div class="line" id="013949"><span class="nick" style="color:#6b8072"><a href="#013949" label="[01:39:49]">&lt;muurkha&gt;</a></span><span class="message">it's a combination of performance and convenience (talking about regular function calls here rather than system calls)</span></div><div class="line" id="014140"><span class="nick" style="color:#6b8072"><a href="#014140" label="[01:41:40]">&lt;muurkha&gt;</a></span><span class="message">in the standard RISC-V ABI, ignoring floating point, you have 15 call-clobbered (&quot;caller-saved&quot;) registers, 8 of which are argument registers</span></div><div class="line" id="014204"><span class="nick" style="color:#2e2a4a"><a href="#014204" label="[01:42:04]">&lt;oriansj&gt;</a></span><span class="message">muurkha: I find just doing a couple push instructions at the start and a couple matching pop instructions at the end of a function quite convenient when writing assembly</span></div><div class="line" id="014209"><span class="nick" style="color:#6b8072"><a href="#014209" label="[01:42:09]">&lt;muurkha&gt;</a></span><span class="message">if you're writing a leaf function, you can just use those registers for anything you want, without having to pray to the stack frame gods before and after dinner</span></div><div class="line" id="014311"><span class="nick" style="color:#6b8072"><a href="#014311" label="[01:43:11]">&lt;muurkha&gt;</a></span><span class="message">and even if you're writing a non-leaf function, you can use them for anything you want with no worries in between calls to other functions, though you'll certainly want a stack frame in that case</span></div><div class="line" id="014325"><span class="nick" style="color:#2e2a4a"><a href="#014325" label="[01:43:25]">&lt;oriansj&gt;</a></span><span class="message">muurkha: granted when you have 26+ spare registers to work with.</span></div><div class="line" id="014344"><span class="nick" style="color:#6b8072"><a href="#014344" label="[01:43:44]">&lt;muurkha&gt;</a></span><span class="message">RISC-V is maybe more of a pain on this point than ARM because there's no LDM/STM</span></div><div class="line" id="014352"><span class="nick" style="color:#389600"><a href="#014352" label="[01:43:52]">&lt;stikonas&gt;</a></span><span class="message">well, even on risc-v M2-Planet does not use RISC-V ABI, we use own calling convention</span></div><div class="line" id="014359"><span class="nick" style="color:#6b8072"><a href="#014359" label="[01:43:59]">&lt;muurkha&gt;</a></span><span class="message">oh, of course</span></div><div class="line" id="014413"><span class="nick" style="color:#389600"><a href="#014413" label="[01:44:13]">&lt;stikonas&gt;</a></span><span class="message">and same on UEFI, we only use that window calling convention to call UEFI functions</span></div><div class="line" id="014427"><span class="nick" style="color:#6b8072"><a href="#014427" label="[01:44:27]">&lt;muurkha&gt;</a></span><span class="message">I'm just talking about designing calling conventions in the abstract, with reference to things that I've found good or bad</span></div><div class="line" id="014435"><span class="nick" style="color:#6b8072"><a href="#014435" label="[01:44:35]">&lt;muurkha&gt;</a></span><span class="message">not attempting to assert anything about M2-Planet</span></div><div class="line" id="014454"><span class="nick" style="color:#389600"><a href="#014454" label="[01:44:54]">&lt;stikonas&gt;</a></span><span class="message">yeah, it's a bit different for more powerful compilers</span></div><div class="line" id="014507"><span class="nick" style="color:#389600"><a href="#014507" label="[01:45:07]">&lt;stikonas&gt;</a></span><span class="message">M2-Planet is just what was simplest for oriansj</span></div><div class="line" id="014509"><span class="nick" style="color:#6b8072"><a href="#014509" label="[01:45:09]">&lt;muurkha&gt;</a></span><span class="message">I was just thinking for writing code by hand</span></div><div class="line" id="014523"><span class="nick" style="color:#389600"><a href="#014523" label="[01:45:23]">&lt;stikonas&gt;</a></span><span class="message">indeed</span></div><div class="line" id="014534"><span class="nick" style="color:#2e2a4a"><a href="#014534" label="[01:45:34]">&lt;oriansj&gt;</a></span><span class="message">muurkha: which we most certainly did</span></div><div class="line" id="014538"><span class="nick" style="color:#389600"><a href="#014538" label="[01:45:38]">&lt;stikonas&gt;</a></span><span class="message">oriansj: typo fix <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/pull/42">https://github.com/oriansj/M2-Planet/pull/42</a> </span></div><div class="line" id="014555"><span class="nick" style="color:#6b8072"><a href="#014555" label="[01:45:55]">&lt;muurkha&gt;</a></span><span class="message">oriansj's preference is clearly for not having to remember which registers are call-clobbered, and I'm not saying his preference is wrong</span></div><div class="line" id="014558"><span class="nick" style="color:#6b8072"><a href="#014558" label="[01:45:58]">&lt;muurkha&gt;</a></span><span class="message">just that I have a different one</span></div><div class="line" id="014636"><span class="nick" style="color:#2e2a4a"><a href="#014636" label="[01:46:36]">&lt;oriansj&gt;</a></span><span class="message">stikonas: thank you, merged</span></div><div class="line" id="014729"><span class="nick" style="color:#6b8072"><a href="#014729" label="[01:47:29]">&lt;muurkha&gt;</a></span><span class="message">non-leaf functions always need stack frames but I still find it convenient to have a little &quot;slack space&quot; or &quot;headroom&quot; I know I can use for temp values that won't survive a call</span></div><div class="line" id="014747"><span class="nick" style="color:#2e2a4a"><a href="#014747" label="[01:47:47]">&lt;oriansj&gt;</a></span><span class="message">muurkha: well mine was formed from the pain of trying to debug hex2 when I was trying to be &quot;clever&quot; with register usage to reduce the total number of instructions.</span></div><div class="line" id="014849"><span class="nick" style="color:#6b8072"><a href="#014849" label="[01:48:49]">&lt;muurkha&gt;</a></span><span class="message">yeah, and I respect that ;)</span></div><div class="line" id="014913"><span class="nick" style="color:#2e2a4a"><a href="#014913" label="[01:49:13]">&lt;oriansj&gt;</a></span><span class="message">when you don't know where the mistake is or even if it is an encoding bug; you learn to value simplicity and easy to reason about assembly.</span></div><div class="line" id="014927"><span class="nick" style="color:#6b8072"><a href="#014927" label="[01:49:27]">&lt;muurkha&gt;</a></span><span class="message">yeah</span></div><div class="line" id="014939"><span class="nick" style="color:#6b8072"><a href="#014939" label="[01:49:39]">&lt;muurkha&gt;</a></span><span class="message">but I don't prefer to go to such an extreme</span></div><div class="line" id="015104"><span class="nick" style="color:#2e2a4a"><a href="#015104" label="[01:51:04]">&lt;oriansj&gt;</a></span><span class="message">as certainly is your choice muurkha</span></div><div class="line" id="015406"><span class="nick" style="color:#2e2a4a"><a href="#015406" label="[01:54:06]">&lt;oriansj&gt;</a></span><span class="message">but not having to learn the hardway that the register you were using to store something important was wiped because of a calling convention detail you didn't expect; is a worthwhile thing.</span></div><div class="line" id="015514"><span class="nick" style="color:#2e2a4a"><a href="#015514" label="[01:55:14]">&lt;oriansj&gt;</a></span><span class="message">If the documentation says pass arguments in eax, ebx, ecx, edx and returns result in eax; it is hard to know that edi was going to get wiped out too</span></div><div class="line" id="015553"><span class="nick" style="color:#6b8072"><a href="#015553" label="[01:55:53]">&lt;muurkha&gt;</a></span><span class="message">yep</span></div><div class="line" id="015613"><span class="nick" style="color:#6b8072"><a href="#015613" label="[01:56:13]">&lt;muurkha&gt;</a></span><span class="message">been there, cried the bitter tears</span></div><div class="line" id="015637"><span class="nick" style="color:#2e2a4a"><a href="#015637" label="[01:56:37]">&lt;oriansj&gt;</a></span><span class="message">vs on knight, the syscall spec says arguments in r0, r1, r2 and result is written in r0. well you can take it to the bank that r4 isn't going to be altered along the way.</span></div><div class="line" id="015729"><span class="nick" style="color:#6b8072"><a href="#015729" label="[01:57:29]">&lt;muurkha&gt;</a></span><span class="message">:)</span></div><div class="line" id="015736"><span class="nick" style="color:#2e2a4a"><a href="#015736" label="[01:57:36]">&lt;oriansj&gt;</a></span><span class="message">heck r1 and r2 are going to be in the exact same state, so you don't have to worry about having to reload that string pointer the second time around the loop</span></div><div class="line" id="015942"><span class="nick" style="color:#2e2a4a"><a href="#015942" label="[01:59:42]">&lt;oriansj&gt;</a></span><span class="message">match(&quot;+&quot;, mystring); =&gt; r0 is the pointer to &quot;+&quot; and r1 is the pointer to mystring. If it is false we can just load &quot;-&quot; and do that match next and so on.</span></div><div class="line" id="020058"><span class="nick" style="color:#2e2a4a"><a href="#020058" label="[02:00:58]">&lt;oriansj&gt;</a></span><span class="message">which is just the sort of logic you expect to see in an Assembler or Compiler</span></div><div class="line" id="114235"><span class="nick" style="color:#8dd3c7"><a href="#114235" label="[11:42:35]">&lt;rekado_&gt;</a></span><span class="message">I’ve built binutils 2.14, glibc 2.2.5, and used those with gcc 2.95.3 to build ghc 4.  Unfortunately, I still see the exact same segfault in hsc.</span></div><div class="line" id="155955"><span class="nick" style="color:#6d2462"><a href="#155955" label="[15:59:55]">&lt;janus&gt;</a></span><span class="message">are all those libraries a lot newer than what the ghc devs used at the time? i see the 4.06 version page mentions glibc 2.1</span></div><div class="line" id="160116"><span class="nick" style="color:#6d2462"><a href="#160116" label="[16:01:16]">&lt;janus&gt;</a></span><span class="message">looks like there are 3 years of development between glibc 2.2.5 (2002-01-20) and glibc 2.1 (1999-02-03)</span></div><div class="line" id="184002"><span class="nick">***</span><span class="message notice">dongcarl is now known as Guest1624</span></div><div class="line" id="184003"><span class="nick">***</span><span class="message notice">dongcarl8 is now known as dongcarl</span></div><div class="line" id="184144"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o oriansj</span></div><div class="line" id="203923"><span class="nick" style="color:#234e69"><a href="#203923" label="[20:39:23]">&lt;efraim&gt;</a></span><span class="message">when was the glibc ABI change from 5 to 6? could that have something to do with it?</span></div><div class="line" id="210718"><span class="nick" style="color:#389600"><a href="#210718" label="[21:07:18]">&lt;stikonas&gt;</a></span><span class="message">efraim: never</span></div><div class="line" id="210726"><span class="nick" style="color:#389600"><a href="#210726" label="[21:07:26]">&lt;stikonas&gt;</a></span><span class="message">there was glibc 1 with ABI 1</span></div><div class="line" id="210735"><span class="nick" style="color:#389600"><a href="#210735" label="[21:07:35]">&lt;stikonas&gt;</a></span><span class="message">then glibc 2 with ABI 6</span></div><div class="line" id="210754"><span class="nick" style="color:#389600"><a href="#210754" label="[21:07:54]">&lt;stikonas&gt;</a></span><span class="message">there was another fork that used ABI 2 to 5 but it was not upstream glibc</span></div><div class="line" id="210815"><span class="nick" style="color:#234e69"><a href="#210815" label="[21:08:15]">&lt;efraim&gt;</a></span><span class="message">oh</span></div><div class="line" id="214758"><span class="nick" style="color:#389600"><a href="#214758" label="[21:47:58]">&lt;stikonas&gt;</a></span><span class="message">good progress on stage0-uefi, now I've got M2-Planet working</span></div><div class="line" id="214810"><span class="nick" style="color:#389600"><a href="#214810" label="[21:48:10]">&lt;stikonas&gt;</a></span><span class="message">used it to build M1-0.efi</span></div><div class="line" id="214907"><span class="nick" style="color:#389600"><a href="#214907" label="[21:49:07]">&lt;stikonas&gt;</a></span><span class="message">I guess I still need to do a bit of cleanup in bootstrap M2libc but should be easier now</span></div><div class="line" id="215237"><span class="nick" style="color:#389600"><a href="#215237" label="[21:52:37]">&lt;stikonas&gt;</a></span><span class="message">oriansj: should I add new UEFI defines to amd64/amd64_defs.M1 ?</span></div><div class="line" id="215658"><span class="nick" style="color:#8dd3c7"><a href="#215658" label="[21:56:58]">&lt;rekado_&gt;</a></span><span class="message">no more segfault</span></div><div class="line" id="215758"><span class="nick" style="color:#8dd3c7"><a href="#215758" label="[21:57:58]">&lt;rekado_&gt;</a></span><span class="message">turns out there’s even more evidence that I’m prone to looking in all the wrong places for errors</span></div><div class="line" id="215813"><span class="nick" style="color:#8dd3c7"><a href="#215813" label="[21:58:13]">&lt;rekado_&gt;</a></span><span class="message">I used the wrong C ‘source’ tarball.</span></div><div class="line" id="215837"><span class="nick" style="color:#8dd3c7"><a href="#215837" label="[21:58:37]">&lt;rekado_&gt;</a></span><span class="message">used the ‘unreg’ tarball instead of the x86 variant</span></div><div class="line" id="215901"><span class="nick" style="color:#8dd3c7"><a href="#215901" label="[21:59:01]">&lt;rekado_&gt;</a></span><span class="message">since I actually linked for x86 and not the ‘unregisterized’ variant *of course* there was a segfault</span></div><div class="line" id="221701"><span class="nick" style="color:#389600"><a href="#221701" label="[22:17:01]">&lt;stikonas&gt;</a></span><span class="message">sounds like you are making good progress too</span></div><div class="line" id="224320"><span class="nick" style="color:#389600"><a href="#224320" label="[22:43:20]">&lt;stikonas&gt;</a></span><span class="message">hmm, I think one simplification I can do in M2libc embedded asm blocks is to use rbp rather than rsp, that should make argument offset easier to read</span></div><div class="line" id="233001"><span class="nick" style="color:#2e2a4a"><a href="#233001" label="[23:30:01]">&lt;oriansj&gt;</a></span><span class="message">stikonas: sure, probably makes the transistion to making your new DEFINEs the new AMD64 default easier.</span></div><br /></div></body></html>