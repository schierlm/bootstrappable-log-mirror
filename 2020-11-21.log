<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-11-21.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="010335"><span class="nick" style="color:#8dd3c7"><a href="#010335" label="[01:03:35]">&lt;fossy&gt;</a></span><span class="message">Sure</span></div><div class="line" id="010620"><span class="nick" style="color:#8dd3c7"><a href="#010620" label="[01:06:20]">&lt;fossy&gt;</a></span><span class="message">OriansJ: looking at the test structure of mescc tools again</span></div><div class="line" id="010627"><span class="nick" style="color:#8dd3c7"><a href="#010627" label="[01:06:27]">&lt;fossy&gt;</a></span><span class="message">what is the point of check.sh</span></div><div class="line" id="010636"><span class="nick" style="color:#8dd3c7"><a href="#010636" label="[01:06:36]">&lt;fossy&gt;</a></span><span class="message">shouldn't people just be running make test</span></div><div class="line" id="010704"><span class="nick" style="color:#8dd3c7"><a href="#010704" label="[01:07:04]">&lt;fossy&gt;</a></span><span class="message">and do you have a problem with kaem not using hello.sh? Because essentially all of them would have the same hello.sh</span></div><div class="line" id="022542"><span class="nick" style="color:#2e2a4a"><a href="#022542" label="[02:25:42]">&lt;OriansJ&gt;</a></span><span class="message">fossy: check.sh was a legacy hold over that I haven't gotten to purge yet.</span></div><div class="line" id="022649"><span class="nick" style="color:#2e2a4a"><a href="#022649" label="[02:26:49]">&lt;OriansJ&gt;</a></span><span class="message">fossy: it is fine if they don't have hello.sh but the tests need to be numbered.</span></div><div class="line" id="024848"><span class="nick" style="color:#2e2a4a"><a href="#024848" label="[02:48:48]">&lt;OriansJ&gt;</a></span><span class="message">as it would be odd to use bash to run a script to test kaem.</span></div><div class="line" id="032908"><span class="nick" style="color:#8dd3c7"><a href="#032908" label="[03:29:08]">&lt;fossy&gt;</a></span><span class="message">OriansJ: yeah of course</span></div><div class="line" id="034631"><span class="nick" style="color:#8dd3c7"><a href="#034631" label="[03:46:31]">&lt;fossy&gt;</a></span><span class="message">siraben: vm run compiles stuff to ION assembly, right?</span></div><div class="line" id="034640"><span class="nick" style="color:#6b8072"><a href="#034640" label="[03:46:40]">&lt;siraben&gt;</a></span><span class="message">fossy: yes</span></div><div class="line" id="034646"><span class="nick" style="color:#8dd3c7"><a href="#034646" label="[03:46:46]">&lt;fossy&gt;</a></span><span class="message">which isn't a problem for trusting trust because it's haskell -&gt; ION assembly and haskell is readable. right?</span></div><div class="line" id="034659"><span class="nick" style="color:#6b8072"><a href="#034659" label="[03:46:59]">&lt;siraben&gt;</a></span><span class="message">yes</span></div><div class="line" id="034712"><span class="nick" style="color:#8dd3c7"><a href="#034712" label="[03:47:12]">&lt;fossy&gt;</a></span><span class="message">but it is a problem for singularity and co because its... just raw ion assembly which is unreadable</span></div><div class="line" id="034714"><span class="nick" style="color:#8dd3c7"><a href="#034714" label="[03:47:14]">&lt;fossy&gt;</a></span><span class="message">i think i get it now</span></div><div class="line" id="034759"><span class="nick" style="color:#6b8072"><a href="#034759" label="[03:47:59]">&lt;siraben&gt;</a></span><span class="message">fossy: <a rel="nofollow" href="https://crypto.stanford.edu/~blynn/compiler/asm.html">https://crypto.stanford.edu/~blynn/compiler/asm.html</a> </span></div><div class="line" id="034802"><span class="nick" style="color:#6b8072"><a href="#034802" label="[03:48:02]">&lt;siraben&gt;</a></span><span class="message">The grammar is quite small also</span></div><div class="line" id="034834"><span class="nick" style="color:#6b8072"><a href="#034834" label="[03:48:34]">&lt;siraben&gt;</a></span><span class="message">&gt; The backquote is a prefix binary operator denoting application. For example, we represent the program BS(BB) with: ``BS`BB;</span></div><div class="line" id="043458"><span class="nick" style="color:#80b1d3"><a href="#043458" label="[04:34:58]">&lt;xentrac&gt;</a></span><span class="message">not sure I'd be able to spot an intentional backdoor in a program written in the form ``BS`BB</span></div><div class="line" id="044215"><span class="nick" style="color:#8dd3c7"><a href="#044215" label="[04:42:15]">&lt;fossy&gt;</a></span><span class="message">same lol</span></div><div class="line" id="044333"><span class="nick" style="color:#8dd3c7"><a href="#044333" label="[04:43:33]">&lt;fossy&gt;</a></span><span class="message">but arent we reimplemnting the asm thing in scheme or c</span></div><div class="line" id="060647"><span class="nick" style="color:#6b8072"><a href="#060647" label="[06:06:47]">&lt;siraben&gt;</a></span><span class="message">If someone could hide a compiler backdoor in that, props to them lol</span></div><div class="line" id="060712"><span class="nick" style="color:#6b8072"><a href="#060712" label="[06:07:12]">&lt;siraben&gt;</a></span><span class="message">The only way to produce characters to output is through combinators like #, so #a represents the character a</span></div><div class="line" id="060744"><span class="nick" style="color:#6b8072"><a href="#060744" label="[06:07:44]">&lt;siraben&gt;</a></span><span class="message">you could obfuscate it by adding characters together, presumably. but it would blow up the size</span></div><div class="line" id="060843"><span class="nick" style="color:#6b8072"><a href="#060843" label="[06:08:43]">&lt;siraben&gt;</a></span><span class="message">I agree with trusting trust, and we should make it as readable as possible. So, I could rewrite the earlier stages in Scheme at a later point</span></div><div class="line" id="061218"><span class="nick" style="color:#8dd3c7"><a href="#061218" label="[06:12:18]">&lt;fossy&gt;</a></span><span class="message">didn't OriansJ want to do that before we continued</span></div><div class="line" id="061423"><span class="nick" style="color:#6b8072"><a href="#061423" label="[06:14:23]">&lt;siraben&gt;</a></span><span class="message">fossy: Actually I think this is it, <a rel="nofollow" href="https://github.com/siraben/compiler/blob/staging/binary.lisp">https://github.com/siraben/compiler/blob/staging/binary.lisp</a> </span></div><div class="line" id="061436"><span class="nick" style="color:#6b8072"><a href="#061436" label="[06:14:36]">&lt;siraben&gt;</a></span><span class="message">Skip the first few stages and go to binary written in lisp</span></div><div class="line" id="061747"><span class="nick" style="color:#6b8072"><a href="#061747" label="[06:17:47]">&lt;siraben&gt;</a></span><span class="message">Few caveats: requires a lazy (call by name) lisp to evaluate</span></div><div class="line" id="061800"><span class="nick" style="color:#6b8072"><a href="#061800" label="[06:18:00]">&lt;siraben&gt;</a></span><span class="message">identifies like @a may or may not be parsed by mes-m2</span></div><div class="line" id="061804"><span class="nick" style="color:#6b8072"><a href="#061804" label="[06:18:04]">&lt;siraben&gt;</a></span><span class="message">indentifiers*</span></div><div class="line" id="062332"><span class="nick" style="color:#8dd3c7"><a href="#062332" label="[06:23:32]">&lt;fossy&gt;</a></span><span class="message">siraben: ooh</span></div><div class="line" id="062355"><span class="nick" style="color:#8dd3c7"><a href="#062355" label="[06:23:55]">&lt;fossy&gt;</a></span><span class="message">what is binary</span></div><div class="line" id="062423"><span class="nick" style="color:#6d2462"><a href="#062423" label="[06:24:23]">&lt;V&gt;</a></span><span class="message">baby don't byte me no more</span></div><div class="line" id="062519"><span class="nick" style="color:#6b8072"><a href="#062519" label="[06:25:19]">&lt;siraben&gt;</a></span><span class="message">fossy: it's one of the stages of blynn compiler</span></div><div class="line" id="062541"><span class="nick" style="color:#8dd3c7"><a href="#062541" label="[06:25:41]">&lt;fossy&gt;</a></span><span class="message">oh</span></div><div class="line" id="062549"><span class="nick" style="color:#8dd3c7"><a href="#062549" label="[06:25:49]">&lt;fossy&gt;</a></span><span class="message">OH!</span></div><div class="line" id="062551"><span class="nick" style="color:#6b8072"><a href="#062551" label="[06:25:51]">&lt;siraben&gt;</a></span><span class="message">his website should have a description</span></div><div class="line" id="062613"><span class="nick" style="color:#8dd3c7"><a href="#062613" label="[06:26:13]">&lt;fossy&gt;</a></span><span class="message">wait so why isnt binary in <a rel="nofollow" href="https://github.com/oriansj/blynn-compiler/blob/master/Makefile">https://github.com/oriansj/blynn-compiler/blob/master/Makefile</a> </span></div><div class="line" id="062626"><span class="nick" style="color:#6b8072"><a href="#062626" label="[06:26:26]">&lt;siraben&gt;</a></span><span class="message"> <a rel="nofollow" href="https://crypto.stanford.edu/~blynn/compiler/grind.html">https://crypto.stanford.edu/~blynn/compiler/grind.html</a> </span></div><div class="line" id="062645"><span class="nick" style="color:#6b8072"><a href="#062645" label="[06:26:45]">&lt;siraben&gt;</a></span><span class="message">fossy: probably because it's in vm.c</span></div><div class="line" id="062652"><span class="nick" style="color:#6b8072"><a href="#062652" label="[06:26:52]">&lt;siraben&gt;</a></span><span class="message">s/probably//</span></div><div class="line" id="062709"><span class="nick" style="color:#8dd3c7"><a href="#062709" label="[06:27:09]">&lt;fossy&gt;</a></span><span class="message">um</span></div><div class="line" id="062715"><span class="nick" style="color:#6b8072"><a href="#062715" label="[06:27:15]">&lt;siraben&gt;</a></span><span class="message">lvlup_file(&quot;binary&quot;)</span></div><div class="line" id="062716"><span class="nick" style="color:#8dd3c7"><a href="#062716" label="[06:27:16]">&lt;fossy&gt;</a></span><span class="message">ah</span></div><div class="line" id="062718"><span class="nick" style="color:#8dd3c7"><a href="#062718" label="[06:27:18]">&lt;fossy&gt;</a></span><span class="message">yeah just found it</span></div><div class="line" id="062732"><span class="nick" style="color:#8dd3c7"><a href="#062732" label="[06:27:32]">&lt;fossy&gt;</a></span><span class="message">so what can we do with this</span></div><div class="line" id="062748"><span class="nick" style="color:#6b8072"><a href="#062748" label="[06:27:48]">&lt;siraben&gt;</a></span><span class="message">see <a rel="nofollow" href="https://crypto.stanford.edu/~blynn/compiler/grind.html">https://crypto.stanford.edu/~blynn/compiler/grind.html</a> </span></div><div class="line" id="062755"><span class="nick" style="color:#8dd3c7"><a href="#062755" label="[06:27:55]">&lt;fossy&gt;</a></span><span class="message">make it work under mes-m2 or make mes-m2 work with it, then what</span></div><div class="line" id="062808"><span class="nick" style="color:#8dd3c7"><a href="#062808" label="[06:28:08]">&lt;fossy&gt;</a></span><span class="message">no i know what binary does but how do we slot it into this</span></div><div class="line" id="063009"><span class="nick" style="color:#6b8072"><a href="#063009" label="[06:30:09]">&lt;siraben&gt;</a></span><span class="message">it generates ION assembly, right?</span></div><div class="line" id="063020"><span class="nick" style="color:#8dd3c7"><a href="#063020" label="[06:30:20]">&lt;fossy&gt;</a></span><span class="message">oh duh</span></div><div class="line" id="063027"><span class="nick" style="color:#6b8072"><a href="#063027" label="[06:30:27]">&lt;siraben&gt;</a></span><span class="message">so let's go from mes-m2 → binary → rest of haskell → scheme</span></div><div class="line" id="063039"><span class="nick" style="color:#8dd3c7"><a href="#063039" label="[06:30:39]">&lt;fossy&gt;</a></span><span class="message">looks like we are getting somewhere :DDD</span></div><div class="line" id="063042"><span class="nick" style="color:#6b8072"><a href="#063042" label="[06:30:42]">&lt;siraben&gt;</a></span><span class="message">yay this looks even more viable!</span></div><div class="line" id="063054"><span class="nick" style="color:#6b8072"><a href="#063054" label="[06:30:54]">&lt;siraben&gt;</a></span><span class="message">so my effort to rewrite binary in lisp was not in vain</span></div><div class="line" id="063109"><span class="nick" style="color:#8dd3c7"><a href="#063109" label="[06:31:09]">&lt;fossy&gt;</a></span><span class="message">lol yes</span></div><div class="line" id="063131"><span class="nick" style="color:#6b8072"><a href="#063131" label="[06:31:31]">&lt;siraben&gt;</a></span><span class="message">specifically we need an interpreter for lazy lisp in mes-m2 to run binary.lisp</span></div><div class="line" id="063315"><span class="nick" style="color:#8dd3c7"><a href="#063315" label="[06:33:15]">&lt;fossy&gt;</a></span><span class="message">could binary.lisp not need lazy lisp</span></div><div class="line" id="063323"><span class="nick" style="color:#8dd3c7"><a href="#063323" label="[06:33:23]">&lt;fossy&gt;</a></span><span class="message">or is that not viable</span></div><div class="line" id="063550"><span class="nick" style="color:#6b8072"><a href="#063550" label="[06:35:50]">&lt;siraben&gt;</a></span><span class="message">yeah I could make that happen</span></div><div class="line" id="063614"><span class="nick" style="color:#6b8072"><a href="#063614" label="[06:36:14]">&lt;siraben&gt;</a></span><span class="message">actually, that'd be would probably be the easiest approach</span></div><div class="line" id="063739"><span class="nick" style="color:#8dd3c7"><a href="#063739" label="[06:37:39]">&lt;fossy&gt;</a></span><span class="message">siraben: which lisp did you use to test this</span></div><div class="line" id="063745"><span class="nick" style="color:#8dd3c7"><a href="#063745" label="[06:37:45]">&lt;fossy&gt;</a></span><span class="message">i am having trouble getting it to run under guile</span></div><div class="line" id="064018"><span class="nick" style="color:#6b8072"><a href="#064018" label="[06:40:18]">&lt;siraben&gt;</a></span><span class="message">fossy: <a rel="nofollow" href="https://github.com/siraben/compiler/blob/staging/lispy">https://github.com/siraben/compiler/blob/staging/lispy</a> </span></div><div class="line" id="064043"><span class="nick" style="color:#6b8072"><a href="#064043" label="[06:40:43]">&lt;siraben&gt;</a></span><span class="message">i adapted the previous stage to accept lisp syntax</span></div><div class="line" id="064059"><span class="nick" style="color:#6b8072"><a href="#064059" label="[06:40:59]">&lt;siraben&gt;</a></span><span class="message">so it will not work under guile without rewriting everything</span></div><div class="line" id="064404"><span class="nick" style="color:#8dd3c7"><a href="#064404" label="[06:44:04]">&lt;fossy&gt;</a></span><span class="message">oh, right , i see</span></div><div class="line" id="064428"><span class="nick" style="color:#8dd3c7"><a href="#064428" label="[06:44:28]">&lt;fossy&gt;</a></span><span class="message">so, how do we run binary.lisp under mes-m2</span></div><div class="line" id="132157"><span class="nick">***</span><span class="message notice">pgreco_ is now known as pgreco</span></div><div class="line" id="132633"><span class="nick" style="color:#2e2a4a"><a href="#132633" label="[13:26:33]">&lt;OriansJ&gt;</a></span><span class="message">siraben: guile supports lazy evaluation; so I am curious what exactly we need to get the lisp version of binary working in a general way</span></div><div class="line" id="133005"><span class="nick" style="color:#6b8072"><a href="#133005" label="[13:30:05]">&lt;siraben&gt;</a></span><span class="message">OriansJ: the laziness would have to be pervasive, see `binary.lisp`</span></div><div class="line" id="133339"><span class="nick" style="color:#2e2a4a"><a href="#133339" label="[13:33:39]">&lt;OriansJ&gt;</a></span><span class="message">and there is no way to write it in a non-lazy lisp?</span></div><div class="line" id="133524"><span class="nick" style="color:#2e2a4a"><a href="#133524" label="[13:35:24]">&lt;OriansJ&gt;</a></span><span class="message">look, guile is good enough to run MesCC and guix and gash and do the full bootstrap. Requiring more than guile doesn't exactly help the bootstrap.</span></div><div class="line" id="133634"><span class="nick" style="color:#2e2a4a"><a href="#133634" label="[13:36:34]">&lt;OriansJ&gt;</a></span><span class="message">as mes-m2 is just a small subset of guile's primitives</span></div><div class="line" id="133649"><span class="nick" style="color:#2e2a4a"><a href="#133649" label="[13:36:49]">&lt;OriansJ&gt;</a></span><span class="message">(with matching behaviors)</span></div><div class="line" id="141810"><span class="nick" style="color:#2e2a4a"><a href="#141810" label="[14:18:10]">&lt;OriansJ&gt;</a></span><span class="message">So what alternate solutions could we explore?</span></div><div class="line" id="141905"><span class="nick" style="color:#2e2a4a"><a href="#141905" label="[14:19:05]">&lt;OriansJ&gt;</a></span><span class="message">for example could we rewrite one of the earlier stages in lisp (something that guile can run) and use that to remove the blobs?</span></div><div class="line" id="141944"><span class="nick" style="color:#2e2a4a"><a href="#141944" label="[14:19:44]">&lt;OriansJ&gt;</a></span><span class="message">then say rewrite binary in the haskell subset that it would provide?</span></div><div class="line" id="142127"><span class="nick" style="color:#2e2a4a"><a href="#142127" label="[14:21:27]">&lt;OriansJ&gt;</a></span><span class="message">I could rewrite binary.lisp in C</span></div><div class="line" id="142308"><span class="nick" style="color:#2e2a4a"><a href="#142308" label="[14:23:08]">&lt;OriansJ&gt;</a></span><span class="message">There are an infinite number of possible solutions. What feels like the least work and frustration for us?</span></div><div class="line" id="143231"><span class="nick" style="color:#234e69"><a href="#143231" label="[14:32:31]">&lt;rain1&gt;</a></span><span class="message">mes-m2 → binary → rest of haskell → scheme   are these interpreters or compilers</span></div><div class="line" id="143549"><span class="nick" style="color:#6b8072"><a href="#143549" label="[14:35:49]">&lt;siraben&gt;</a></span><span class="message">rain1: mes-m2 → binary is done via interpreter</span></div><div class="line" id="143553"><span class="nick" style="color:#6b8072"><a href="#143553" label="[14:35:53]">&lt;siraben&gt;</a></span><span class="message">everything else is compiler</span></div><div class="line" id="143603"><span class="nick" style="color:#6b8072"><a href="#143603" label="[14:36:03]">&lt;siraben&gt;</a></span><span class="message">OriansJ: ^ this would be easiest</span></div><div class="line" id="143632"><span class="nick" style="color:#6b8072"><a href="#143632" label="[14:36:32]">&lt;siraben&gt;</a></span><span class="message">i'll rewrite binary.lisp completely to make it work on a non-lazy lisp</span></div><div class="line" id="143826"><span class="nick" style="color:#234e69"><a href="#143826" label="[14:38:26]">&lt;rain1&gt;</a></span><span class="message">so you wont have everthing fall over due to interpreter tower slowdown, thats good</span></div><div class="line" id="144038"><span class="nick" style="color:#2e2a4a"><a href="#144038" label="[14:40:38]">&lt;OriansJ&gt;</a></span><span class="message">siraben: if that is what you think is best; I look forward to your results</span></div><div class="line" id="144236"><span class="nick" style="color:#2e2a4a"><a href="#144236" label="[14:42:36]">&lt;OriansJ&gt;</a></span><span class="message">rain1: right now the build time for everything (if we use GCC) is 204.82 seconds</span></div><div class="line" id="144341"><span class="nick" style="color:#2e2a4a"><a href="#144341" label="[14:43:41]">&lt;OriansJ&gt;</a></span><span class="message">assuming things are 10 times slower because of M2-Planet (and its slower binaries); 2048.2 seconds time to the haskell</span></div><div class="line" id="144604"><span class="nick" style="color:#234e69"><a href="#144604" label="[14:46:04]">&lt;rain1&gt;</a></span><span class="message">that is a brilliant build time!</span></div><div class="line" id="145847"><span class="nick" style="color:#2e2a4a"><a href="#145847" label="[14:58:47]">&lt;OriansJ&gt;</a></span><span class="message">rain1: could be better but we are still at the early stages of exploring this option and checking our assumptions might find us even better solutions.</span></div><div class="line" id="150240"><span class="nick" style="color:#234e69"><a href="#150240" label="[15:02:40]">&lt;rain1&gt;</a></span><span class="message">I would like to know which thing are able to execute tinycc?</span></div><div class="line" id="150244"><span class="nick" style="color:#234e69"><a href="#150244" label="[15:02:44]">&lt;rain1&gt;</a></span><span class="message">things</span></div><div class="line" id="150918"><span class="nick" style="color:#234e69"><a href="#150918" label="[15:09:18]">&lt;rain1&gt;</a></span><span class="message">i think it is mescc and gios asmc, are those both true, anything else?</span></div><div class="line" id="161933"><span class="nick" style="color:#2e2a4a"><a href="#161933" label="[16:19:33]">&lt;OriansJ&gt;</a></span><span class="message">rain1: well that would be posix kernels that actually execute tinycc but if you mean compile that would be MesCC in our current understanding of the bootstrapping path</span></div><div class="line" id="162102"><span class="nick" style="color:#2e2a4a"><a href="#162102" label="[16:21:02]">&lt;OriansJ&gt;</a></span><span class="message">there was also the plan to rewrite TCC in the M2-Planet subset and call it M3-Star</span></div><div class="line" id="162116"><span class="nick" style="color:#234e69"><a href="#162116" label="[16:21:16]">&lt;rain1&gt;</a></span><span class="message">I see</span></div><div class="line" id="162148"><span class="nick" style="color:#2e2a4a"><a href="#162148" label="[16:21:48]">&lt;OriansJ&gt;</a></span><span class="message">but I wanted to break the linker and assembler out of TCC and provide a binutils compatible set that MesCC could use to help its porting to new architectures</span></div><div class="line" id="162245"><span class="nick" style="color:#2e2a4a"><a href="#162245" label="[16:22:45]">&lt;OriansJ&gt;</a></span><span class="message">The linker is at 90% <a rel="nofollow" href="https://github.com/oriansj/M3-Meteoroid">https://github.com/oriansj/M3-Meteoroid</a> </span></div><div class="line" id="162317"><span class="nick" style="color:#2e2a4a"><a href="#162317" label="[16:23:17]">&lt;OriansJ&gt;</a></span><span class="message">just need to write the function that dumps the generated ELF file onto disk</span></div><div class="line" id="162341"><span class="nick" style="color:#2e2a4a"><a href="#162341" label="[16:23:41]">&lt;OriansJ&gt;</a></span><span class="message">(Then do the port to AMD64, armv7l and AArch64)</span></div><div class="line" id="162458"><span class="nick" style="color:#2e2a4a"><a href="#162458" label="[16:24:58]">&lt;OriansJ&gt;</a></span><span class="message">Then I would do the assembler which generates standard relocatable ELF files; thus allowing us to use standard linkers with it too</span></div><div class="line" id="162635"><span class="nick" style="color:#2e2a4a"><a href="#162635" label="[16:26:35]">&lt;OriansJ&gt;</a></span><span class="message">we will be limited to dealing with binaries greater than 2GB but that shouldn't be an issue</span></div><div class="line" id="162711"><span class="nick" style="color:#2e2a4a"><a href="#162711" label="[16:27:11]">&lt;OriansJ&gt;</a></span><span class="message">correction: limited to working with binaries that are less than 2GB in size</span></div><br /></div></body></html>