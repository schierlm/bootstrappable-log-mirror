<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2024-02-06.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000240"><span class="nick" style="color:#389600"><a href="#000240" label="[00:02:40]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; Here is the diff. Looks like a number of things beyond just the symlinks that I get no errors/warnings for. <a rel="nofollow" href="https://dpaste.org/vpwre/raw">https://dpaste.org/vpwre/raw</a> </span></div><div class="line" id="000249"><span class="nick" style="color:#389600"><a href="#000249" label="[00:02:49]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; will fiddle and see if I can force them to match</span></div><div class="line" id="000510"><span class="nick" style="color:#8dd3c7"><a href="#000510" label="[00:05:10]">&lt;stikonas&gt;</a></span><span class="message">hmm, this looks like different commits...</span></div><div class="line" id="000551"><span class="nick" style="color:#389600"><a href="#000551" label="[00:05:51]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; and yet, its the exact same tar file. one extracted with kaem and one with debian tar</span></div><div class="line" id="000555"><span class="nick" style="color:#389600"><a href="#000555" label="[00:05:55]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; which is bizarre</span></div><div class="line" id="000606"><span class="nick" style="color:#8dd3c7"><a href="#000606" label="[00:06:06]">&lt;stikonas&gt;</a></span><span class="message">hmm, maybe not</span></div><div class="line" id="000610"><span class="nick" style="color:#8dd3c7"><a href="#000610" label="[00:06:10]">&lt;stikonas&gt;</a></span><span class="message">though some files are missing in one</span></div><div class="line" id="000613"><span class="nick" style="color:#8dd3c7"><a href="#000613" label="[00:06:13]">&lt;stikonas&gt;</a></span><span class="message">e.g. checksum-transcriber-1.0.riscv64.checksums</span></div><div class="line" id="000621"><span class="nick" style="color:#8dd3c7"><a href="#000621" label="[00:06:21]">&lt;stikonas&gt;</a></span><span class="message">which wouldn't break your build but still bizarre</span></div><div class="line" id="000713"><span class="nick" style="color:#389600"><a href="#000713" label="[00:07:13]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; for some reason the stage0 tar just silently decides to ignore some things it seems</span></div><div class="line" id="000752"><span class="nick" style="color:#8dd3c7"><a href="#000752" label="[00:07:52]">&lt;stikonas&gt;</a></span><span class="message">well, it was only tested on a few tarballs only</span></div><div class="line" id="000756"><span class="nick" style="color:#8dd3c7"><a href="#000756" label="[00:07:56]">&lt;stikonas&gt;</a></span><span class="message">to get to GNU tar</span></div><div class="line" id="000825"><span class="nick" style="color:#8dd3c7"><a href="#000825" label="[00:08:25]">&lt;stikonas&gt;</a></span><span class="message">oh, and it might very well be that your tarball is too new</span></div><div class="line" id="000835"><span class="nick" style="color:#8dd3c7"><a href="#000835" label="[00:08:35]">&lt;stikonas&gt;</a></span><span class="message">tar has different formats....</span></div><div class="line" id="000852"><span class="nick" style="color:#8dd3c7"><a href="#000852" label="[00:08:52]">&lt;stikonas&gt;</a></span><span class="message">and most of the tarballs  that untar has to deal with is for old GNU software</span></div><div class="line" id="000854"><span class="nick" style="color:#8dd3c7"><a href="#000854" label="[00:08:54]">&lt;stikonas&gt;</a></span><span class="message">so it works well</span></div><div class="line" id="000907"><span class="nick" style="color:#8dd3c7"><a href="#000907" label="[00:09:07]">&lt;stikonas&gt;</a></span><span class="message">but your live-bootstrap tarball is probably produced by something much newer</span></div><div class="line" id="000918"><span class="nick" style="color:#389600"><a href="#000918" label="[00:09:18]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; Yeah I am getting it via &quot;wget <a rel="nofollow" href="https://codeload.github.com/lrvick/live-bootstrap/legacy.tar.gz/fc6eeb6bd75ea0d0025a79ea9fe45614bd60ba14">https://codeload.github.com/lrvick/live-bootstrap/legacy.tar.gz/fc6eeb6bd75ea0d0025a79ea9fe45614bd60ba14</a>  -O live-bootstrap.tgz&quot;</span></div><div class="line" id="000930"><span class="nick" style="color:#389600"><a href="#000930" label="[00:09:30]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; * &quot;ADD <a rel="nofollow" href="https://codeload.github.com/lrvick/live-bootstrap/legacy.tar.gz/fc6eeb6bd75ea0d0025a79ea9fe45614bd60ba14">https://codeload.github.com/lrvick/live-bootstrap/legacy.tar.gz/fc6eeb6bd75ea0d0025a79ea9fe45614bd60ba14</a> </span></div><div class="line" id="001422"><span class="nick" style="color:#389600"><a href="#001422" label="[00:14:22]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; Will see if I can abuse the OCI ADD built in git or untar functionality then, as it seems stage0 tar is currently a non starter for extracting githubs tar exports.</span></div><div class="line" id="001446"><span class="nick" style="color:#389600"><a href="#001446" label="[00:14:46]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; you can even create tar files that extract different things depending on implementation</span></div><div class="line" id="001534"><span class="nick" style="color:#389600"><a href="#001534" label="[00:15:34]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; Which has some scary security implications. Two implementations get the same hash, and different extracted directories.</span></div><div class="line" id="001559"><span class="nick" style="color:#389600"><a href="#001559" label="[00:15:59]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; TIL</span></div><div class="line" id="001630"><span class="nick" style="color:#389600"><a href="#001630" label="[00:16:30]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; yeah, it was mentioned here a couple of years ago</span></div><div class="line" id="001637"><span class="nick" style="color:#389600"><a href="#001637" label="[00:16:37]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; but it was published somewhere else</span></div><div class="line" id="002102"><span class="nick" style="color:#389600"><a href="#002102" label="[00:21:02]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; my hypothesis is that the files that are dropped seem to be &gt; 16 char filenames</span></div><div class="line" id="002156"><span class="nick" style="color:#389600"><a href="#002156" label="[00:21:56]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; If we want github tar exports of live-bootstrap to be compatible with stage0 tar, will probably have to shorten a few filenames</span></div><div class="line" id="002216"><span class="nick" style="color:#389600"><a href="#002216" label="[00:22:16]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; and drop symlinks</span></div><div class="line" id="002323"><span class="nick" style="color:#389600"><a href="#002323" label="[00:23:23]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; or better fix stage0 tar</span></div><div class="line" id="003934"><span class="nick" style="color:#389600"><a href="#003934" label="[00:39:34]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Lance R. Vick: oh here I finally found it <a rel="nofollow" href="https://www.openwall.com/lists/oss-security/2021/10/03/1">https://www.openwall.com/lists/oss-security/2021/10/03/1</a> </span></div><div class="line" id="004101"><span class="nick" style="color:#8dd3c7"><a href="#004101" label="[00:41:01]">&lt;stikonas&gt;</a></span><span class="message">as for long names</span></div><div class="line" id="004115"><span class="nick" style="color:#8dd3c7"><a href="#004115" label="[00:41:15]">&lt;stikonas&gt;</a></span><span class="message">I thought only length of full path matters...</span></div><div class="line" id="011127"><span class="nick" style="color:#8dd3c7"><a href="#011127" label="[01:11:27]">&lt;stikonas&gt;</a></span><span class="message">oriansj: so using my own trivial memory allocator to store memory of forked programs seems to work</span></div><div class="line" id="011140"><span class="nick" style="color:#8dd3c7"><a href="#011140" label="[01:11:40]">&lt;stikonas&gt;</a></span><span class="message">I suspect that what was happening with M2libc imeplementation was</span></div><div class="line" id="011235"><span class="nick" style="color:#8dd3c7"><a href="#011235" label="[01:12:35]">&lt;stikonas&gt;</a></span><span class="message">we are allocating some big chung of memory, then freeing it, then some small malloc asks for memory, so it is given the big chunk, so when the next big chunk is allocated, we again need to grab more form the system</span></div><div class="line" id="011242"><span class="nick" style="color:#8dd3c7"><a href="#011242" label="[01:12:42]">&lt;stikonas&gt;</a></span><span class="message">and eventually we run out of memory</span></div><div class="line" id="013126"><span class="nick" style="color:#2e2a4a"><a href="#013126" label="[01:31:26]">&lt;oriansj&gt;</a></span><span class="message">yeah, we definitely should add some improvements to untar</span></div><div class="line" id="013207"><span class="nick" style="color:#2e2a4a"><a href="#013207" label="[01:32:07]">&lt;oriansj&gt;</a></span><span class="message">stikonas: I am glad to hear that you have a working solution.</span></div><div class="line" id="013225"><span class="nick" style="color:#8dd3c7"><a href="#013225" label="[01:32:25]">&lt;stikonas&gt;</a></span><span class="message">well, need to improve my commit a bit before pushing</span></div><div class="line" id="013305"><span class="nick" style="color:#8dd3c7"><a href="#013305" label="[01:33:05]">&lt;stikonas&gt;</a></span><span class="message">I converted saved memory for now but it makes sense to also do the same for saved stack and saved program (binary itself)</span></div><div class="line" id="013530"><span class="nick" style="color:#8dd3c7"><a href="#013530" label="[01:35:30]">&lt;stikonas&gt;</a></span><span class="message">this was a bug that took a while to figure out...</span></div><div class="line" id="013559"><span class="nick" style="color:#8dd3c7"><a href="#013559" label="[01:35:59]">&lt;stikonas&gt;</a></span><span class="message">mostly due to stupid copy/paste error that masked the real reason for the failure</span></div><div class="line" id="014559"><span class="nick" style="color:#389600"><a href="#014559" label="[01:45:59]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; Current debian hack, and commented out kaem script that I expect -should- be able to work once we figure out the bugs with stage0 tar. At that point the stagex live-bootstrap setup will -only- use stage0 as a base image and no binaries from existing distros.</span></div><div class="line" id="014603"><span class="nick" style="color:#389600"><a href="#014603" label="[01:46:03]">&lt;matrix_bridge&gt;</a></span><span class="message"> <a rel="nofollow" href="https://git.distrust.co/public/stagex/src/branch/kernel/src/bootstrap/stage1/Containerfile#L273-L292">https://git.distrust.co/public/stagex/src/branch/kernel/src/bootstrap/stage1/Containerfile#L273-L292</a> </span></div><div class="line" id="014644"><span class="nick" style="color:#389600"><a href="#014644" label="[01:46:44]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; The download-distfiles was proving to be pretty unreliable with people reproducing, and using a bunch of ADDs not only avoids me having to borrow curl from a debian contanier etc, but they also pull in paralell with graceful resume and caching.</span></div><div class="line" id="014707"><span class="nick" style="color:#389600"><a href="#014707" label="[01:47:07]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; though it us ugly. I may autogenerate that as a separate build context file in a follow up</span></div><div class="line" id="031337"><span class="nick" style="color:#2e2a4a"><a href="#031337" label="[03:13:37]">&lt;oriansj&gt;</a></span><span class="message">Googulator:  the fixes to the various stage0-posix builds for the sys/utsname.h change are incoming (it just requires adding -f ./M2libc/sys/utsname.h \ right before unistd.c in the M2-Planet build commands)</span></div><div class="line" id="031708"><span class="nick" style="color:#2e2a4a"><a href="#031708" label="[03:17:08]">&lt;oriansj&gt;</a></span><span class="message">but it does appear that there is a regression for wrap.c with x86/linux/sys/stat.c</span></div><div class="line" id="032724"><span class="nick" style="color:#2e2a4a"><a href="#032724" label="[03:27:24]">&lt;oriansj&gt;</a></span><span class="message">which doesn't make any sense</span></div><div class="line" id="032751"><span class="nick" style="color:#2e2a4a"><a href="#032751" label="[03:27:51]">&lt;oriansj&gt;</a></span><span class="message">as it should load #include &lt;sys/types.h&gt; prior to #include &lt;sys/stat.h&gt;</span></div><div class="line" id="033117"><span class="nick" style="color:#2e2a4a"><a href="#033117" label="[03:31:17]">&lt;oriansj&gt;</a></span><span class="message">(god I hate debugging C preprocessor behavior)</span></div><div class="line" id="065605"><span class="nick" style="color:#6b8072"><a href="#065605" label="[06:56:05]">&lt;fossy&gt;</a></span><span class="message">stikonas, oh, i hate those manpages</span></div><div class="line" id="065631"><span class="nick" style="color:#6b8072"><a href="#065631" label="[06:56:31]">&lt;fossy&gt;</a></span><span class="message">oh</span></div><div class="line" id="065635"><span class="nick" style="color:#6b8072"><a href="#065635" label="[06:56:35]">&lt;fossy&gt;</a></span><span class="message">that's why checksum changed then</span></div><div class="line" id="065708"><span class="nick" style="color:#6b8072"><a href="#065708" label="[06:57:08]">&lt;fossy&gt;</a></span><span class="message">conveniently i did the rebase Feb 1 so i presumed that checksum had changed due to that :-\</span></div><div class="line" id="070609"><span class="nick" style="color:#80b1d3"><a href="#070609" label="[07:06:09]">&lt;Googulator&gt;</a></span><span class="message">fossy: working on eliminating fiwix-file-list.txt, it seems a bug has slipped through the simplify refactor: the Linux initramfs is no longer compressed</span></div><div class="line" id="070714"><span class="nick" style="color:#80b1d3"><a href="#070714" label="[07:07:14]">&lt;Googulator&gt;</a></span><span class="message">(also, gen_init_cpio cannot handle file names with spaces, but luckily the only file with this problem is /High Level Prototypes, easily renamed)</span></div><div class="line" id="070920"><span class="nick" style="color:#6b8072"><a href="#070920" label="[07:09:20]">&lt;fossy&gt;</a></span><span class="message">Googulator: i guess, does it matter if it's compressed?</span></div><div class="line" id="074758"><span class="nick" style="color:#6b8072"><a href="#074758" label="[07:47:58]">&lt;fossy&gt;</a></span><span class="message">Googulator: thanks for doing that work too by the way. fiwix-file-list.txt irked me as to its existance</span></div><div class="line" id="101618"><span class="nick" style="color:#80b1d3"><a href="#101618" label="[10:16:18]">&lt;Googulator&gt;</a></span><span class="message">fossy: due to the lack of compression, I'm now hitting the 256MiB kexec limit</span></div><div class="line" id="101627"><span class="nick" style="color:#80b1d3"><a href="#101627" label="[10:16:27]">&lt;Googulator&gt;</a></span><span class="message">after removing fiwix-file-list</span></div><div class="line" id="101634"><span class="nick" style="color:#80b1d3"><a href="#101634" label="[10:16:34]">&lt;Googulator&gt;</a></span><span class="message">restoring compression solves that</span></div><div class="line" id="102438"><span class="nick" style="color:#389600"><a href="#102438" label="[10:24:38]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; Is there any method in kaem/stage0 land to 0 out timestamps in files? Other than the tar issue, it looks like I am going to need to import debian just for &quot;touch&quot; which is sad.</span></div><div class="line" id="103058"><span class="nick" style="color:#389600"><a href="#103058" label="[10:30:58]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; oh! Turns out OCI exporters recently support &quot;rewrite-timestamp=true&quot; so I can drop my &quot;touch&quot;es everywhere.</span></div><div class="line" id="103358"><span class="nick" style="color:#6d2462"><a href="#103358" label="[10:33:58]">&lt;Foxboron&gt;</a></span><span class="message">Yes, there is a guy that has been working on better supporting reproducible builds in the OCI/container space</span></div><div class="line" id="103807"><span class="nick" style="color:#389600"><a href="#103807" label="[10:38:07]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; it all actually works now. Doing a big refactor to drop all my wgets, sha256sums, touches, line continuations etc. Can get away with heredocs and &quot;from scratch&quot; most of the time now thanks to OCI built-ins</span></div><div class="line" id="111931"><span class="nick" style="color:#6b8072"><a href="#111931" label="[11:19:31]">&lt;fossy&gt;</a></span><span class="message">Googulator: ah, of course, alright</span></div><div class="line" id="112012"><span class="nick" style="color:#80b1d3"><a href="#112012" label="[11:20:12]">&lt;Googulator&gt;</a></span><span class="message">it's kind of a miracle we didn't hit that limit earlier</span></div><div class="line" id="112013"><span class="nick" style="color:#6b8072"><a href="#112013" label="[11:20:13]">&lt;fossy&gt;</a></span><span class="message">would be trivial to write a touch i think anyways for stage0</span></div><div class="line" id="112036"><span class="nick" style="color:#80b1d3"><a href="#112036" label="[11:20:36]">&lt;Googulator&gt;</a></span><span class="message">I since solved the 0-length file issue</span></div><div class="line" id="112101"><span class="nick" style="color:#8dd3c7"><a href="#112101" label="[11:21:01]">&lt;stikonas&gt;</a></span><span class="message">well, catm already does 50% of what people use touch for</span></div><div class="line" id="112356"><span class="nick" style="color:#6b8072"><a href="#112356" label="[11:23:56]">&lt;fossy&gt;</a></span><span class="message">yeah, not zeroing timestamps</span></div><div class="line" id="112410"><span class="nick" style="color:#6b8072"><a href="#112410" label="[11:24:10]">&lt;fossy&gt;</a></span><span class="message">sorry, didnt ping lrvick</span></div><div class="line" id="114654"><span class="nick" style="color:#2e2a4a"><a href="#114654" label="[11:46:54]">&lt;oriansj&gt;</a></span><span class="message">well zeroing timestamps would require an additional system call</span></div><div class="line" id="114710"><span class="nick" style="color:#2e2a4a"><a href="#114710" label="[11:47:10]">&lt;oriansj&gt;</a></span><span class="message">and we didn't want to add an extra issue for builder-hex0</span></div><div class="line" id="115045"><span class="nick" style="color:#8dd3c7"><a href="#115045" label="[11:50:45]">&lt;stikonas&gt;</a></span><span class="message">yeah, though I think in this case it might as well be optional</span></div><div class="line" id="115055"><span class="nick" style="color:#8dd3c7"><a href="#115055" label="[11:50:55]">&lt;stikonas&gt;</a></span><span class="message">builder-hex0 will just return success on unknown system call</span></div><div class="line" id="120113"><span class="nick" style="color:#2e2a4a"><a href="#120113" label="[12:01:13]">&lt;oriansj&gt;</a></span><span class="message">well I guess we could make a touch for mescc-tools-extra; the biggest lift would be defining the syscall in M2libc</span></div><div class="line" id="120135"><span class="nick" style="color:#8dd3c7"><a href="#120135" label="[12:01:35]">&lt;stikonas&gt;</a></span><span class="message">well, but do we still need it?</span></div><div class="line" id="120157"><span class="nick" style="color:#8dd3c7"><a href="#120157" label="[12:01:57]">&lt;stikonas&gt;</a></span><span class="message">Lance R. Vick managed to use OCI builtins for that</span></div><div class="line" id="120246"><span class="nick" style="color:#2e2a4a"><a href="#120246" label="[12:02:46]">&lt;oriansj&gt;</a></span><span class="message">need is probably a no; want or nice to have is maybe; will any effort be spent on it? Only if someone feels like it.</span></div><div class="line" id="121301"><span class="nick" style="color:#389600"><a href="#121301" label="[12:13:01]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Lance R. Vick&gt; Unrelated: Noticed I have been chattering about stagex stuff in like 5 places. It is now at #stagex:matrix.org (<a rel="nofollow" href="https://matrix.to/#/#stagex:matrix.org">https://matrix.to/#/#stagex:matrix.org</a>)  for anyone in matrix land. May try bridging to libera or oftc at some point.</span></div><div class="line" id="121759"><span class="nick" style="color:#2e2a4a"><a href="#121759" label="[12:17:59]">&lt;oriansj&gt;</a></span><span class="message">stikonas: I figured out the issue with the M2libc headers and I think we have a problem.</span></div><div class="line" id="121817"><span class="nick" style="color:#8dd3c7"><a href="#121817" label="[12:18:17]">&lt;stikonas&gt;</a></span><span class="message">?</span></div><div class="line" id="121856"><span class="nick" style="color:#2e2a4a"><a href="#121856" label="[12:18:56]">&lt;oriansj&gt;</a></span><span class="message">basically if a UEFI library includes a base library and it is loaded prior to the base library, and if the resulting binary is not UEFI; the base library is dropped with it</span></div><div class="line" id="122014"><span class="nick" style="color:#2e2a4a"><a href="#122014" label="[12:20:14]">&lt;oriansj&gt;</a></span><span class="message">so perhaps  it is finally time to make M2-Mesoplanet smarter about libraries and not load files it doesn't plan on using.</span></div><div class="line" id="122145"><span class="nick" style="color:#8dd3c7"><a href="#122145" label="[12:21:45]">&lt;stikonas&gt;</a></span><span class="message">hmm, perhaps</span></div><div class="line" id="122224"><span class="nick" style="color:#2e2a4a"><a href="#122224" label="[12:22:24]">&lt;oriansj&gt;</a></span><span class="message">and doing so will likely be a breaking change</span></div><div class="line" id="122352"><span class="nick" style="color:#2e2a4a"><a href="#122352" label="[12:23:52]">&lt;oriansj&gt;</a></span><span class="message">so, definitely worth a tag or two</span></div><div class="line" id="122424"><span class="nick" style="color:#8dd3c7"><a href="#122424" label="[12:24:24]">&lt;stikonas&gt;</a></span><span class="message">would #include logic from mescc be helpful?</span></div><div class="line" id="122442"><span class="nick" style="color:#8dd3c7"><a href="#122442" label="[12:24:42]">&lt;stikonas&gt;</a></span><span class="message">might be worth looking at what is done there</span></div><div class="line" id="122651"><span class="nick" style="color:#2e2a4a"><a href="#122651" label="[12:26:51]">&lt;oriansj&gt;</a></span><span class="message">well no harm in reading how someone else solved the #include problem</span></div><div class="line" id="122747"><span class="nick" style="color:#8dd3c7"><a href="#122747" label="[12:27:47]">&lt;stikonas&gt;</a></span><span class="message">probably in this file <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/mes.git/tree/module/mescc/preprocess.scm">https://git.savannah.gnu.org/cgit/mes.git/tree/module/mescc/preprocess.scm</a> </span></div><div class="line" id="122823"><span class="nick" style="color:#8dd3c7"><a href="#122823" label="[12:28:23]">&lt;stikonas&gt;</a></span><span class="message">hmm, but it's nyacc based...</span></div><div class="line" id="122927"><span class="nick" style="color:#2e2a4a"><a href="#122927" label="[12:29:27]">&lt;oriansj&gt;</a></span><span class="message">yep</span></div><div class="line" id="122952"><span class="nick" style="color:#2e2a4a"><a href="#122952" label="[12:29:52]">&lt;oriansj&gt;</a></span><span class="message">and nyacc is a big beast</span></div><div class="line" id="123013"><span class="nick" style="color:#2e2a4a"><a href="#123013" label="[12:30:13]">&lt;oriansj&gt;</a></span><span class="message">that returns a proper AST</span></div><div class="line" id="123039"><span class="nick" style="color:#2e2a4a"><a href="#123039" label="[12:30:39]">&lt;oriansj&gt;</a></span><span class="message">(unlike M2-Planet/M2-Mesoplanet's simple token list)</span></div><div class="line" id="123235"><span class="nick" style="color:#2e2a4a"><a href="#123235" label="[12:32:35]">&lt;oriansj&gt;</a></span><span class="message">if one had a proper AST, the answer is trivial: just prune the tree on the #if/#ifdef/#ifndef statements</span></div><div class="line" id="123247"><span class="nick" style="color:#2e2a4a"><a href="#123247" label="[12:32:47]">&lt;oriansj&gt;</a></span><span class="message">no more complexity needed</span></div><div class="line" id="123342"><span class="nick" style="color:#2e2a4a"><a href="#123342" label="[12:33:42]">&lt;oriansj&gt;</a></span><span class="message">but we have things like #ifndef _FCNTL_H #define _FCNTL_H which need to be evaluated</span></div><div class="line" id="123400"><span class="nick" style="color:#2e2a4a"><a href="#123400" label="[12:34:00]">&lt;oriansj&gt;</a></span><span class="message">which close off those libraries after a single load</span></div><div class="line" id="123410"><span class="nick" style="color:#2e2a4a"><a href="#123410" label="[12:34:10]">&lt;oriansj&gt;</a></span><span class="message">so that we don't get duplicates</span></div><div class="line" id="134607"><span class="nick" style="color:#2e2a4a"><a href="#134607" label="[13:46:07]">&lt;oriansj&gt;</a></span><span class="message">ok, I think I found an ugly but working solution</span></div><div class="line" id="134629"><span class="nick" style="color:#2e2a4a"><a href="#134629" label="[13:46:29]">&lt;oriansj&gt;</a></span><span class="message">but it means we will need to add strstr to M2libc</span></div><div class="line" id="134822"><span class="nick" style="color:#2e2a4a"><a href="#134822" label="[13:48:22]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1306473/">https://paste.debian.net/1306473/</a> </span></div><div class="line" id="140454"><span class="nick" style="color:#2e2a4a"><a href="#140454" label="[14:04:54]">&lt;oriansj&gt;</a></span><span class="message">and both fixes are up</span></div><div class="line" id="143412"><span class="nick" style="color:#2e2a4a"><a href="#143412" label="[14:34:12]">&lt;oriansj&gt;</a></span><span class="message">stikonas: hopefully I got the uefi side behavior correct (if not please let me know)</span></div><div class="line" id="143645"><span class="nick" style="color:#8dd3c7"><a href="#143645" label="[14:36:45]">&lt;stikonas&gt;</a></span><span class="message">hmm, probably not</span></div><div class="line" id="143724"><span class="nick" style="color:#8dd3c7"><a href="#143724" label="[14:37:24]">&lt;stikonas&gt;</a></span><span class="message">there is build error in M2libc/uefi/unistd.c:322 ERROR in create struct</span></div><div class="line" id="143726"><span class="nick" style="color:#8dd3c7"><a href="#143726" label="[14:37:26]">&lt;stikonas&gt;</a></span><span class="message">strange...</span></div><div class="line" id="143741"><span class="nick" style="color:#8dd3c7"><a href="#143741" label="[14:37:41]">&lt;stikonas&gt;</a></span><span class="message">but it was an update to all submodules</span></div><div class="line" id="143747"><span class="nick" style="color:#8dd3c7"><a href="#143747" label="[14:37:47]">&lt;stikonas&gt;</a></span><span class="message">could have been some other update too</span></div><div class="line" id="144152"><span class="nick" style="color:#8dd3c7"><a href="#144152" label="[14:41:52]">&lt;stikonas&gt;</a></span><span class="message">oh, probably need to add more stuff to manual build scripts</span></div><div class="line" id="144156"><span class="nick" style="color:#8dd3c7"><a href="#144156" label="[14:41:56]">&lt;stikonas&gt;</a></span><span class="message">anyway, I'll check in the evening</span></div><div class="line" id="151852"><span class="nick" style="color:#80b1d3"><a href="#151852" label="[15:18:52]">&lt;Googulator&gt;</a></span><span class="message">stikonas: possibly it's <a rel="nofollow" href="https://github.com/oriansj/M2libc/commit/fb6701a73189afca152ea1154650c315df4e6a93#r138302605">https://github.com/oriansj/M2libc/commit/fb6701a73189afca152ea1154650c315df4e6a93#r138302605</a> </span></div><div class="line" id="152000"><span class="nick" style="color:#8dd3c7"><a href="#152000" label="[15:20:00]">&lt;stikonas&gt;</a></span><span class="message">probably</span></div><div class="line" id="152001"><span class="nick" style="color:#2e2a4a"><a href="#152001" label="[15:20:01]">&lt;oriansj&gt;</a></span><span class="message">probably just need to #include &lt;sys/utsname.h&gt; in the unistd.h prior to the unistd.c</span></div><div class="line" id="152114"><span class="nick" style="color:#80b1d3"><a href="#152114" label="[15:21:14]">&lt;Googulator&gt;</a></span><span class="message">assuming this is in something built via mesoplanet</span></div><div class="line" id="152128"><span class="nick" style="color:#8dd3c7"><a href="#152128" label="[15:21:28]">&lt;stikonas&gt;</a></span><span class="message">no, this will need fixes to kaem script</span></div><div class="line" id="152137"><span class="nick" style="color:#8dd3c7"><a href="#152137" label="[15:21:37]">&lt;stikonas&gt;</a></span><span class="message">this is way before mesoplanet</span></div><div class="line" id="152142"><span class="nick" style="color:#8dd3c7"><a href="#152142" label="[15:21:42]">&lt;stikonas&gt;</a></span><span class="message">first build of hex2.c</span></div><div class="line" id="175939"><span class="nick" style="color:#2e2a4a"><a href="#175939" label="[17:59:39]">&lt;oriansj&gt;</a></span><span class="message">then yes, it would be the -f ./M2libc/sys/utsname.h \ right before unistd.c</span></div><div class="line" id="182634"><span class="nick" style="color:#2e2a4a"><a href="#182634" label="[18:26:34]">&lt;oriansj&gt;</a></span><span class="message">stage0-posix-x86 has been fixed</span></div><div class="line" id="182643"><span class="nick" style="color:#2e2a4a"><a href="#182643" label="[18:26:43]">&lt;oriansj&gt;</a></span><span class="message">now just to fix the rest</span></div><div class="line" id="183813"><span class="nick" style="color:#2e2a4a"><a href="#183813" label="[18:38:13]">&lt;oriansj&gt;</a></span><span class="message">well it appears fuzzing unxz.c is a *very* slow process</span></div><div class="line" id="183903"><span class="nick" style="color:#2e2a4a"><a href="#183903" label="[18:39:03]">&lt;oriansj&gt;</a></span><span class="message">so, guess fixing the segfaults in the code is going to take a while and I will just have to figure out the M2-Planet builds issue</span></div><div class="line" id="183914"><span class="nick" style="color:#2e2a4a"><a href="#183914" label="[18:39:14]">&lt;oriansj&gt;</a></span><span class="message">another route.</span></div><div class="line" id="184118"><span class="nick" style="color:#2e2a4a"><a href="#184118" label="[18:41:18]">&lt;oriansj&gt;</a></span><span class="message">but I'll probably get that done over the next 2 weeks. (assuming I don't get stuck again)</span></div><div class="line" id="184933"><span class="nick" style="color:#2e2a4a"><a href="#184933" label="[18:49:33]">&lt;oriansj&gt;</a></span><span class="message">stage0-posix-amd64 has been fixed</span></div><div class="line" id="190007"><span class="nick" style="color:#2e2a4a"><a href="#190007" label="[19:00:07]">&lt;oriansj&gt;</a></span><span class="message">and riscv32, riscv64 and aarch64 fixes are up</span></div><div class="line" id="192551"><span class="nick" style="color:#80b1d3"><a href="#192551" label="[19:25:51]">&lt;Googulator&gt;</a></span><span class="message">Does unxz.c work when compiled by something more capable than M2-(Meso)planet?</span></div><div class="line" id="192608"><span class="nick" style="color:#80b1d3"><a href="#192608" label="[19:26:08]">&lt;Googulator&gt;</a></span><span class="message">e.g. by tcc</span></div><div class="line" id="194403"><span class="nick" style="color:#8dd3c7"><a href="#194403" label="[19:44:03]">&lt;stikonas&gt;</a></span><span class="message">oriansj: by the way, what do you think of renaming AMD64 dir and file names to amd64 in stage0-posix</span></div><div class="line" id="194419"><span class="nick" style="color:#8dd3c7"><a href="#194419" label="[19:44:19]">&lt;stikonas&gt;</a></span><span class="message">I think janneke was complaining that it complicates packaging right now</span></div><div class="line" id="194427"><span class="nick" style="color:#8dd3c7"><a href="#194427" label="[19:44:27]">&lt;stikonas&gt;</a></span><span class="message">some of our things have amd64 and some AMD64</span></div><div class="line" id="194451"><span class="nick" style="color:#2e2a4a"><a href="#194451" label="[19:44:51]">&lt;oriansj&gt;</a></span><span class="message">Googulator: yes, it builds just fine with clang and gcc (have not tested tcc yet)</span></div><div class="line" id="194518"><span class="nick" style="color:#234e69"><a href="#194518" label="[19:45:18]">&lt;janneke&gt;</a></span><span class="message">stikonas: was i?  could be, i'm all for uniformity but that's not always easy?</span></div><div class="line" id="194525"><span class="nick" style="color:#2e2a4a"><a href="#194525" label="[19:45:25]">&lt;oriansj&gt;</a></span><span class="message">stikonas: I don't have a problem with standardizing things</span></div><div class="line" id="194535"><span class="nick" style="color:#8dd3c7"><a href="#194535" label="[19:45:35]">&lt;stikonas&gt;</a></span><span class="message">hmm, maybe somebody else then</span></div><div class="line" id="194540"><span class="nick" style="color:#8dd3c7"><a href="#194540" label="[19:45:40]">&lt;stikonas&gt;</a></span><span class="message">but I remember somebody from guix...</span></div><div class="line" id="194601"><span class="nick" style="color:#2e2a4a"><a href="#194601" label="[19:46:01]">&lt;oriansj&gt;</a></span><span class="message">as long as there is a single standard to follow; not a problem at all</span></div><div class="line" id="194619"><span class="nick" style="color:#234e69"><a href="#194619" label="[19:46:19]">&lt;janneke&gt;</a></span><span class="message">mes even has mostly x86, but also uses i386.scm; when it doesn't immediately hurts it takes some effort to standardize things</span></div><div class="line" id="194650"><span class="nick" style="color:#2e2a4a"><a href="#194650" label="[19:46:50]">&lt;oriansj&gt;</a></span><span class="message">but I refuse to accept Intel's name for AMD's instruction set.</span></div><div class="line" id="194657"><span class="nick" style="color:#8dd3c7"><a href="#194657" label="[19:46:57]">&lt;stikonas&gt;</a></span><span class="message">well, that's fine when it is internal stuff</span></div><div class="line" id="194709"><span class="nick" style="color:#8dd3c7"><a href="#194709" label="[19:47:09]">&lt;stikonas&gt;</a></span><span class="message">but with stage0-posix as a user you might need both</span></div><div class="line" id="194731"><span class="nick" style="color:#8dd3c7"><a href="#194731" label="[19:47:31]">&lt;stikonas&gt;</a></span><span class="message">e.g. M1 would need &quot;amd64&quot; in --architecture but file output is in AMD64/bin/</span></div><div class="line" id="194740"><span class="nick" style="color:#2e2a4a"><a href="#194740" label="[19:47:40]">&lt;oriansj&gt;</a></span><span class="message">and x86 uses i386 in a few files too</span></div><div class="line" id="194759"><span class="nick" style="color:#2e2a4a"><a href="#194759" label="[19:47:59]">&lt;oriansj&gt;</a></span><span class="message">but that is because none of the bits needed floating point or more advanced features of x86</span></div><div class="line" id="194839"><span class="nick" style="color:#2e2a4a"><a href="#194839" label="[19:48:39]">&lt;oriansj&gt;</a></span><span class="message">we could string insensitive matching and then AM64D/amd64/Amd64 would all work</span></div><div class="line" id="200118"><span class="nick" style="color:#389600"><a href="#200118" label="[20:01:18]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Christoph&gt; s/string/case/</span></div><div class="line" id="200226"><span class="nick" style="color:#389600"><a href="#200226" label="[20:02:26]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Christoph&gt; * s/string/use case/</span></div><div class="line" id="200444"><span class="nick" style="color:#80b1d3"><a href="#200444" label="[20:04:44]">&lt;Googulator&gt;</a></span><span class="message">I don't get why &quot;AMD64&quot; is a better name than &quot;x86-64&quot;... why use a vendor-specific brand name instead of a generic one?</span></div><div class="line" id="200505"><span class="nick" style="color:#80b1d3"><a href="#200505" label="[20:05:05]">&lt;Googulator&gt;</a></span><span class="message">(I agree not &quot;x64&quot; since that's a Microsoftism)</span></div><div class="line" id="201144"><span class="nick" style="color:#80b1d3"><a href="#201144" label="[20:11:44]">&lt;Googulator&gt;</a></span><span class="message">btw, I already see one issue with unxz</span></div><div class="line" id="201158"><span class="nick" style="color:#80b1d3"><a href="#201158" label="[20:11:58]">&lt;Googulator&gt;</a></span><span class="message">in main, we null-check the variable &quot;name&quot;</span></div><div class="line" id="201203"><span class="nick" style="color:#80b1d3"><a href="#201203" label="[20:12:03]">&lt;Googulator&gt;</a></span><span class="message">but it's never initialized</span></div><div class="line" id="201236"><span class="nick" style="color:#80b1d3"><a href="#201236" label="[20:12:36]">&lt;Googulator&gt;</a></span><span class="message">same problem for &quot;dest&quot;</span></div><div class="line" id="202109"><span class="nick" style="color:#2e2a4a"><a href="#202109" label="[20:21:09]">&lt;oriansj&gt;</a></span><span class="message">Googulator: it is the rule of who creates a thing gets to name it.</span></div><div class="line" id="202139"><span class="nick" style="color:#2e2a4a"><a href="#202139" label="[20:21:39]">&lt;oriansj&gt;</a></span><span class="message">AMD created the 64bit standard used on x86 processors and called that standard amd64</span></div><div class="line" id="202201"><span class="nick" style="color:#80b1d3"><a href="#202201" label="[20:22:01]">&lt;Googulator&gt;</a></span><span class="message">didn't AMD call the standard x86_64 and its own implementation of it AMD64(R)?</span></div><div class="line" id="202226"><span class="nick" style="color:#80b1d3"><a href="#202226" label="[20:22:26]">&lt;Googulator&gt;</a></span><span class="message">to me, it's like &quot;paracetamol&quot; vs &quot;Tylenol&quot;</span></div><div class="line" id="202445"><span class="nick" style="color:#2e2a4a"><a href="#202445" label="[20:24:45]">&lt;oriansj&gt;</a></span><span class="message">fair enough</span></div><div class="line" id="202508"><span class="nick" style="color:#2e2a4a"><a href="#202508" label="[20:25:08]">&lt;oriansj&gt;</a></span><span class="message">well not exactly but close enough: <a rel="nofollow" href="https://web.archive.org/web/20120308030806/http://www.amd.com/us/press-releases/Pages/Press_Release_751.aspx">https://web.archive.org/web/20120308030806/http://www.amd.com/us/press-releases/Pages/Press_Release_751.aspx</a> </span></div><div class="line" id="202607"><span class="nick" style="color:#80b1d3"><a href="#202607" label="[20:26:07]">&lt;Googulator&gt;</a></span><span class="message">I remember Microsoft themselves struggled with the naming, but for a different reason</span></div><div class="line" id="202646"><span class="nick" style="color:#80b1d3"><a href="#202646" label="[20:26:46]">&lt;Googulator&gt;</a></span><span class="message">contract with Intel stipulating that &quot;64-bit&quot; must be synonymous with &quot;Itanium&quot; in all communications</span></div><div class="line" id="202712"><span class="nick" style="color:#2e2a4a"><a href="#202712" label="[20:27:12]">&lt;oriansj&gt;</a></span><span class="message">well Intel called their Itanium IA64 and their 32bit x86 IA32 and when AMD's K8 was winning they released an x86_64 which was not compatible with AMD64</span></div><div class="line" id="202737"><span class="nick" style="color:#80b1d3"><a href="#202737" label="[20:27:37]">&lt;Googulator&gt;</a></span><span class="message">how was it not compatible?</span></div><div class="line" id="202818"><span class="nick" style="color:#2e2a4a"><a href="#202818" label="[20:28:18]">&lt;oriansj&gt;</a></span><span class="message">the sysenter and sysexit calls were different</span></div><div class="line" id="202847"><span class="nick" style="color:#2e2a4a"><a href="#202847" label="[20:28:47]">&lt;oriansj&gt;</a></span><span class="message">it is why gentoo still calls it amd64</span></div><div class="line" id="202931"><span class="nick" style="color:#8dd3c7"><a href="#202931" label="[20:29:31]">&lt;stikonas&gt;</a></span><span class="message">not just gentoo</span></div><div class="line" id="202935"><span class="nick" style="color:#8dd3c7"><a href="#202935" label="[20:29:35]">&lt;stikonas&gt;</a></span><span class="message">Debian also calls it amd64</span></div><div class="line" id="202950"><span class="nick" style="color:#8dd3c7"><a href="#202950" label="[20:29:50]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://packages.debian.org/sid/amd64/bash/download">https://packages.debian.org/sid/amd64/bash/download</a> </span></div><div class="line" id="203004"><span class="nick" style="color:#2e2a4a"><a href="#203004" label="[20:30:04]">&lt;oriansj&gt;</a></span><span class="message">another missing feature was the no-execute bit</span></div><div class="line" id="203100"><span class="nick" style="color:#2e2a4a"><a href="#203100" label="[20:31:00]">&lt;oriansj&gt;</a></span><span class="message">and until the core2duo they were not compatible 64bit cpus</span></div><div class="line" id="203102"><span class="nick" style="color:#8dd3c7"><a href="#203102" label="[20:31:02]">&lt;stikonas&gt;</a></span><span class="message">what happened later to sysexit and sysenter?</span></div><div class="line" id="203108"><span class="nick" style="color:#8dd3c7"><a href="#203108" label="[20:31:08]">&lt;stikonas&gt;</a></span><span class="message">I think now everybody uses syscall and sysreturn</span></div><div class="line" id="203121"><span class="nick" style="color:#8dd3c7"><a href="#203121" label="[20:31:21]">&lt;stikonas&gt;</a></span><span class="message">was it just abandoned?</span></div><div class="line" id="203137"><span class="nick" style="color:#2e2a4a"><a href="#203137" label="[20:31:37]">&lt;oriansj&gt;</a></span><span class="message">Well effectively, yeah</span></div><div class="line" id="203157"><span class="nick" style="color:#8dd3c7"><a href="#203157" label="[20:31:57]">&lt;stikonas&gt;</a></span><span class="message">oriansj: so I'm now retrying stage0-uefi with your submodule updates</span></div><div class="line" id="203209"><span class="nick" style="color:#8dd3c7"><a href="#203209" label="[20:32:09]">&lt;stikonas&gt;</a></span><span class="message">now it goes much further but M2-Mesoplanet fails building sha256sum.efi</span></div><div class="line" id="203222"><span class="nick" style="color:#8dd3c7"><a href="#203222" label="[20:32:22]">&lt;stikonas&gt;</a></span><span class="message">the error is &quot;unknown host&quot;</span></div><div class="line" id="203222"><span class="nick" style="color:#2e2a4a"><a href="#203222" label="[20:32:22]">&lt;oriansj&gt;</a></span><span class="message">bastically only the Pentium 4 family had those 64bit instructions and none of the 64bit Linux distros really supported it</span></div><div class="line" id="203222"><span class="nick" style="color:#80b1d3"><a href="#203222" label="[20:32:22]">&lt;Googulator&gt;</a></span><span class="message">precursor to the AVX512 mess I guess</span></div><div class="line" id="203304"><span class="nick" style="color:#2e2a4a"><a href="#203304" label="[20:33:04]">&lt;oriansj&gt;</a></span><span class="message">Googulator: AMD and Intel have broken each other's standards multiple times at this point.</span></div><div class="line" id="203323"><span class="nick" style="color:#80b1d3"><a href="#203323" label="[20:33:23]">&lt;Googulator&gt;</a></span><span class="message">AVX512 wasn't even AMD vs Intel</span></div><div class="line" id="203324"><span class="nick" style="color:#2e2a4a"><a href="#203324" label="[20:33:24]">&lt;oriansj&gt;</a></span><span class="message">Like 3DNow and Intel using that opcode for something else</span></div><div class="line" id="203326"><span class="nick" style="color:#80b1d3"><a href="#203326" label="[20:33:26]">&lt;Googulator&gt;</a></span><span class="message">it was Intel vs Intel</span></div><div class="line" id="203333"><span class="nick" style="color:#8dd3c7"><a href="#203333" label="[20:33:33]">&lt;stikonas&gt;</a></span><span class="message">oh I guess i need to set some extra command line flags now</span></div><div class="line" id="203413"><span class="nick" style="color:#8dd3c7"><a href="#203413" label="[20:34:13]">&lt;stikonas&gt;</a></span><span class="message">oriansj: oh, that's because I was passing --operating-system UEFI</span></div><div class="line" id="203417"><span class="nick" style="color:#8dd3c7"><a href="#203417" label="[20:34:17]">&lt;stikonas&gt;</a></span><span class="message">and your check is lowercase...</span></div><div class="line" id="203425"><span class="nick" style="color:#2e2a4a"><a href="#203425" label="[20:34:25]">&lt;oriansj&gt;</a></span><span class="message">&gt;.&lt; sorry</span></div><div class="line" id="203436"><span class="nick" style="color:#2e2a4a"><a href="#203436" label="[20:34:36]">&lt;oriansj&gt;</a></span><span class="message">I shall fix that</span></div><div class="line" id="203453"><span class="nick" style="color:#8dd3c7"><a href="#203453" label="[20:34:53]">&lt;stikonas&gt;</a></span><span class="message">yeah, I think in other places it's uppercase</span></div><div class="line" id="203459"><span class="nick" style="color:#8dd3c7"><a href="#203459" label="[20:34:59]">&lt;stikonas&gt;</a></span><span class="message">including in cc_spawn.c...</span></div><div class="line" id="203607"><span class="nick" style="color:#2e2a4a"><a href="#203607" label="[20:36:07]">&lt;oriansj&gt;</a></span><span class="message">fixed and pushed</span></div><div class="line" id="203648"><span class="nick" style="color:#2e2a4a"><a href="#203648" label="[20:36:48]">&lt;oriansj&gt;</a></span><span class="message">I really should make those places case insensitive</span></div><div class="line" id="203652"><span class="nick" style="color:#80b1d3"><a href="#203652" label="[20:36:52]">&lt;Googulator&gt;</a></span><span class="message">blood-elf's debug data confuses the hell out of Ghidra</span></div><div class="line" id="203709"><span class="nick" style="color:#80b1d3"><a href="#203709" label="[20:37:09]">&lt;Googulator&gt;</a></span><span class="message">every jump target gets labeled as a function</span></div><div class="line" id="203716"><span class="nick" style="color:#2e2a4a"><a href="#203716" label="[20:37:16]">&lt;oriansj&gt;</a></span><span class="message">probably would make a good bug for them to figure out</span></div><div class="line" id="203748"><span class="nick" style="color:#2e2a4a"><a href="#203748" label="[20:37:48]">&lt;oriansj&gt;</a></span><span class="message">Googulator: well guess they need to improve that ;-p</span></div><div class="line" id="203821"><span class="nick" style="color:#80b1d3"><a href="#203821" label="[20:38:21]">&lt;Googulator&gt;</a></span><span class="message">After manually deleting the fake functions, it reconstructs the control flow just fine</span></div><div class="line" id="204316"><span class="nick" style="color:#80b1d3"><a href="#204316" label="[20:43:16]">&lt;Googulator&gt;</a></span><span class="message">The segfault when running &quot;unxz&quot; without any parameters is caused by the uninitialized variables in main()</span></div><div class="line" id="204336"><span class="nick" style="color:#80b1d3"><a href="#204336" label="[20:43:36]">&lt;Googulator&gt;</a></span><span class="message">If I do specify --file and --output, interestingly I don't get a segfault, but rather a silent quit</span></div><div class="line" id="204520"><span class="nick" style="color:#8dd3c7"><a href="#204520" label="[20:45:20]">&lt;stikonas&gt;</a></span><span class="message">oriansj: ok, it's working now, just need to update checksums</span></div><div class="line" id="210212"><span class="nick" style="color:#2e2a4a"><a href="#210212" label="[21:02:12]">&lt;oriansj&gt;</a></span><span class="message">stikonas: thank you</span></div><div class="line" id="210304"><span class="nick" style="color:#2e2a4a"><a href="#210304" label="[21:03:04]">&lt;oriansj&gt;</a></span><span class="message">Googulator: probably something wrong with the pointer math as +1 in M2-Planet means just that but +1 in C means different things depending upon the type</span></div><div class="line" id="210737"><span class="nick" style="color:#2e2a4a"><a href="#210737" label="[21:07:37]">&lt;oriansj&gt;</a></span><span class="message">and anyone else heard of Haskell's Eveil Mangler perl script?</span></div><div class="line" id="210750"><span class="nick" style="color:#2e2a4a"><a href="#210750" label="[21:07:50]">&lt;oriansj&gt;</a></span><span class="message">^Eveil^Evil^</span></div><div class="line" id="212121"><span class="nick" style="color:#80b1d3"><a href="#212121" label="[21:21:21]">&lt;Googulator&gt;</a></span><span class="message">    switch(global-&gt;readCur[7])</span></div><div class="line" id="212122"><span class="nick" style="color:#80b1d3"><a href="#212122" label="[21:21:22]">&lt;Googulator&gt;</a></span><span class="message">    {</span></div><div class="line" id="212122"><span class="nick" style="color:#80b1d3"><a href="#212122" label="[21:21:22]">&lt;Googulator&gt;</a></span><span class="message">        /* None */</span></div><div class="line" id="212123"><span class="nick" style="color:#80b1d3"><a href="#212123" label="[21:21:23]">&lt;Googulator&gt;</a></span><span class="message">        case 0: checksumSize = 1;</span></div><div class="line" id="212123"><span class="nick" style="color:#80b1d3"><a href="#212123" label="[21:21:23]">&lt;Googulator&gt;</a></span><span class="message">                break;</span></div><div class="line" id="212124"><span class="nick" style="color:#80b1d3"><a href="#212124" label="[21:21:24]">&lt;Googulator&gt;</a></span><span class="message">        /* CRC32 */</span></div><div class="line" id="212124"><span class="nick" style="color:#80b1d3"><a href="#212124" label="[21:21:24]">&lt;Googulator&gt;</a></span><span class="message">        case 1: checksumSize = 4;</span></div><div class="line" id="212125"><span class="nick" style="color:#80b1d3"><a href="#212125" label="[21:21:25]">&lt;Googulator&gt;</a></span><span class="message">                break;</span></div><div class="line" id="212125"><span class="nick" style="color:#80b1d3"><a href="#212125" label="[21:21:25]">&lt;Googulator&gt;</a></span><span class="message">        /* CRC64, typical xz output. */</span></div><div class="line" id="212126"><span class="nick" style="color:#80b1d3"><a href="#212126" label="[21:21:26]">&lt;Googulator&gt;</a></span><span class="message">        case 4: checksumSize = 8;</span></div><div class="line" id="212126"><span class="nick" style="color:#80b1d3"><a href="#212126" label="[21:21:26]">&lt;Googulator&gt;</a></span><span class="message">                break;</span></div><div class="line" id="212127"><span class="nick" style="color:#80b1d3"><a href="#212127" label="[21:21:27]">&lt;Googulator&gt;</a></span><span class="message">        default: return SZ_ERROR_BAD_CHECKSUM_TYPE;</span></div><div class="line" id="212127"><span class="nick" style="color:#80b1d3"><a href="#212127" label="[21:21:27]">&lt;Googulator&gt;</a></span><span class="message">    }</span></div><div class="line" id="212128"><span class="nick" style="color:#80b1d3"><a href="#212128" label="[21:21:28]">&lt;Googulator&gt;</a></span><span class="message">this is where we break</span></div><div class="line" id="212157"><span class="nick" style="color:#80b1d3"><a href="#212157" label="[21:21:57]">&lt;Googulator&gt;</a></span><span class="message">global-&gt;readCur[7] reads from the right location, but with the wrong size</span></div><div class="line" id="212222"><span class="nick" style="color:#80b1d3"><a href="#212222" label="[21:22:22]">&lt;Googulator&gt;</a></span><span class="message">32 bits starting at address readCur + 7</span></div><div class="line" id="212227"><span class="nick" style="color:#80b1d3"><a href="#212227" label="[21:22:27]">&lt;Googulator&gt;</a></span><span class="message">instead of just 8</span></div><div class="line" id="212326"><span class="nick" style="color:#80b1d3"><a href="#212326" label="[21:23:26]">&lt;Googulator&gt;</a></span><span class="message">&amp; then it checks the whole 32-bit value read into ebx against the constants in the switch statement</span></div><div class="line" id="212328"><span class="nick" style="color:#80b1d3"><a href="#212328" label="[21:23:28]">&lt;Googulator&gt;</a></span><span class="message">which won't match</span></div><div class="line" id="212630"><span class="nick" style="color:#80b1d3"><a href="#212630" label="[21:26:30]">&lt;Googulator&gt;</a></span><span class="message">I have a fealing every time we use readCur[...] directly without assigning it to a variable, this is gonna bite us</span></div><div class="line" id="212634"><span class="nick" style="color:#80b1d3"><a href="#212634" label="[21:26:34]">&lt;Googulator&gt;</a></span><span class="message">*feeling</span></div><div class="line" id="214247"><span class="nick" style="color:#80b1d3"><a href="#214247" label="[21:42:47]">&lt;Googulator&gt;</a></span><span class="message">oriansj: would switch((uint8_t) global-&gt;readCur[7]) be sufficient to fix this, or will that still result in 32-bit reads?</span></div><div class="line" id="214325"><span class="nick" style="color:#80b1d3"><a href="#214325" label="[21:43:25]">&lt;Googulator&gt;</a></span><span class="message">also, this line is most certainly wrong: global-&gt;readEnd[0] = hold;</span></div><div class="line" id="214351"><span class="nick" style="color:#80b1d3"><a href="#214351" label="[21:43:51]">&lt;Googulator&gt;</a></span><span class="message">hold is an int32_t, while readEnd is an array of uint8_ts</span></div><div class="line" id="214428"><span class="nick" style="color:#80b1d3"><a href="#214428" label="[21:44:28]">&lt;Googulator&gt;</a></span><span class="message">the value of hold comes from an fgetc, so presumably hold was ment to be an uint8_t</span></div><div class="line" id="221259"><span class="nick" style="color:#80b1d3"><a href="#221259" label="[22:12:59]">&lt;Googulator&gt;</a></span><span class="message">oriansj: possibly fixed unxz: <a rel="nofollow" href="https://paste.debian.net/1306537/">https://paste.debian.net/1306537/</a> </span></div><div class="line" id="221313"><span class="nick" style="color:#80b1d3"><a href="#221313" label="[22:13:13]">&lt;Googulator&gt;</a></span><span class="message">can't test it right now in M2-Mesoplanet</span></div><div class="line" id="221415"><span class="nick" style="color:#80b1d3"><a href="#221415" label="[22:14:15]">&lt;Googulator&gt;</a></span><span class="message">(perhaps it would be better to fix M2-Planet instead, so global-&gt;readCur[7] reads the correct size)</span></div><div class="line" id="223600"><span class="nick" style="color:#2e2a4a"><a href="#223600" label="[22:36:00]">&lt;oriansj&gt;</a></span><span class="message">well doing (type) thing is not valid in M2-Planet but I can just do &amp; 0xFF and get effectively the exact same thing</span></div><div class="line" id="223655"><span class="nick" style="color:#2e2a4a"><a href="#223655" label="[22:36:55]">&lt;oriansj&gt;</a></span><span class="message">but great work</span></div><div class="line" id="223708"><span class="nick" style="color:#2e2a4a"><a href="#223708" label="[22:37:08]">&lt;oriansj&gt;</a></span><span class="message">don't forget to add your name to the copyright header ^_^</span></div><div class="line" id="225559"><span class="nick" style="color:#80b1d3"><a href="#225559" label="[22:55:59]">&lt;Googulator&gt;</a></span><span class="message">What's the best way to test compilation of programs using M2-(Meso)planet?</span></div><div class="line" id="225609"><span class="nick" style="color:#80b1d3"><a href="#225609" label="[22:56:09]">&lt;Googulator&gt;</a></span><span class="message">Something a bit more lightweight than live-bootstrap</span></div><div class="line" id="230043"><span class="nick" style="color:#2e2a4a"><a href="#230043" label="[23:00:43]">&lt;oriansj&gt;</a></span><span class="message">Googulator: git clone --recursive  <a rel="nofollow" href="https://github.com/oriansj/M2-Mesoplanet.git;">https://github.com/oriansj/M2-Mesoplanet.git;</a>  make then git clone --recursive mescc-tools and git clone --recursive M2-Planet. Put M2-Planet, M1, hex2 and blood-elf in your ~/bin folder and ensure ~/bin is in your path will work</span></div><div class="line" id="230104"><span class="nick" style="color:#2e2a4a"><a href="#230104" label="[23:01:04]">&lt;oriansj&gt;</a></span><span class="message">you can use GCC/clang/gcc to compile them</span></div><div class="line" id="230114"><span class="nick" style="color:#2e2a4a"><a href="#230114" label="[23:01:14]">&lt;oriansj&gt;</a></span><span class="message">^gcc^tcc^</span></div><div class="line" id="230155"><span class="nick" style="color:#2e2a4a"><a href="#230155" label="[23:01:55]">&lt;oriansj&gt;</a></span><span class="message">then you should be able to just do: M2-Mesoplanet -I M2libc/ -f unxz.c -o unxz</span></div><div class="line" id="230806"><span class="nick" style="color:#80b1d3"><a href="#230806" label="[23:08:06]">&lt;Googulator&gt;</a></span><span class="message">managed to get it done with the stage0-posix repo</span></div><br /></div></body></html>