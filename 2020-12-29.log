<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-12-29.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="002627"><span class="nick" style="color:#8dd3c7"><a href="#002627" label="[00:26:27]">&lt;OriansJ&gt;</a></span><span class="message">janneke: My understanding of that branch was that it couldn't run MesCC well enough to self-host and I spent alot of time trying to figure out why.</span></div><div class="line" id="002827"><span class="nick" style="color:#8dd3c7"><a href="#002827" label="[00:28:27]">&lt;OriansJ&gt;</a></span><span class="message">Also; anything that previously built from M2-Planet still builds with minor tweaks (moving the initialization of variables outside of loops is the only thing that really changed)</span></div><div class="line" id="003123"><span class="nick" style="color:#8dd3c7"><a href="#003123" label="[00:31:23]">&lt;OriansJ&gt;</a></span><span class="message">mihi: segfaults in mes-m2 are serious issues if you can provide examples I will address them immediately.</span></div><div class="line" id="003350"><span class="nick" style="color:#8dd3c7"><a href="#003350" label="[00:33:50]">&lt;OriansJ&gt;</a></span><span class="message">As I understand it most of the known bugs are in the macro expansion stage of the Read-expand-eval-print loop</span></div><div class="line" id="003522"><span class="nick" style="color:#8dd3c7"><a href="#003522" label="[00:35:22]">&lt;OriansJ&gt;</a></span><span class="message">if you do export MES_CORE=0; you'll skip loading all scheme code and be interacting directly with the C code of the Lisp interpreter; thus able to use cgdb to single step to exactly the root cause of any bug.</span></div><div class="line" id="004437"><span class="nick" style="color:#8dd3c7"><a href="#004437" label="[00:44:37]">&lt;OriansJ&gt;</a></span><span class="message">now mes-m2 will certainly halt with an error message if it recieves something wrong enough to create hard to debug problems. But as I routinely fuzz my programs (C and above); segfaults occuring are an issue of major interest to me.</span></div><div class="line" id="010301"><span class="nick" style="color:#8dd3c7"><a href="#010301" label="[01:03:01]">&lt;OriansJ&gt;</a></span><span class="message">Also my understanding is janneke has been clearing out all of the binaries from the Guix bootstrap save for mescc-tools (we bootstrap those all the time), mes.c and guile (these 2 are supposed to be replaced by mes-m2). So ultimately we will need an r7rs lisp interpreter to finish the bootstrap in a single step. As guile needs us to solve the psyntax.pp bootstrap problem and janneke solved the scheme to GCC bootstrap path for us a long</span></div><div class="line" id="010301"><span class="nick" style="color:#8dd3c7"><a href="#010301" label="[01:03:01]">&lt;OriansJ&gt;</a></span><span class="message">time ago.</span></div><div class="line" id="010825"><span class="nick" style="color:#8dd3c7"><a href="#010825" label="[01:08:25]">&lt;OriansJ&gt;</a></span><span class="message">Then we have the GHC bootstrap problem to solve and the node.js bootstrap problem and etc. Then I have to build trusted hardware and all of the hard problems that comes with it.</span></div><div class="line" id="010851"><span class="nick" style="color:#8dd3c7"><a href="#010851" label="[01:08:51]">&lt;OriansJ&gt;</a></span><span class="message">In short; it'll be decade(s) before all of the pieces are finally done.</span></div><div class="line" id="010907"><span class="nick" style="color:#8dd3c7"><a href="#010907" label="[01:09:07]">&lt;OriansJ&gt;</a></span><span class="message">(or atleast done enough for me to be happy)</span></div><div class="line" id="010924"><span class="nick" style="color:#8dd3c7"><a href="#010924" label="[01:09:24]">&lt;OriansJ&gt;</a></span><span class="message">But this work is alot of fun and we all get to learn from it.</span></div><div class="line" id="021833"><span class="nick" style="color:#2e2a4a"><a href="#021833" label="[02:18:33]">&lt;stikonas&gt;</a></span><span class="message">oh, node.js also has circular dependencies?</span></div><div class="line" id="021938"><span class="nick" style="color:#2e2a4a"><a href="#021938" label="[02:19:38]">&lt;stikonas&gt;</a></span><span class="message">I thought gcc can build it...</span></div><div class="line" id="022841"><span class="nick" style="color:#8dd3c7"><a href="#022841" label="[02:28:41]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: I might be remembering wrong but I thought guix had problems packaging it due to the inability to bootstrap it</span></div><div class="line" id="022912"><span class="nick" style="color:#2e2a4a"><a href="#022912" label="[02:29:12]">&lt;stikonas&gt;</a></span><span class="message">hmm, it seems to be in guix...</span></div><div class="line" id="022931"><span class="nick" style="color:#2e2a4a"><a href="#022931" label="[02:29:31]">&lt;stikonas&gt;</a></span><span class="message">(called &quot;node&quot;)</span></div><div class="line" id="023019"><span class="nick" style="color:#8dd3c7"><a href="#023019" label="[02:30:19]">&lt;OriansJ&gt;</a></span><span class="message">well I guess I was wrong again. Oh well.</span></div><div class="line" id="023038"><span class="nick" style="color:#2e2a4a"><a href="#023038" label="[02:30:38]">&lt;stikonas&gt;</a></span><span class="message">well, it might very well be that there were some problems...</span></div><div class="line" id="023105"><span class="nick" style="color:#2e2a4a"><a href="#023105" label="[02:31:05]">&lt;stikonas&gt;</a></span><span class="message">e.g. how to express npm dependencies in guix or something like that (I'm not node expert, just guessing)</span></div><div class="line" id="023118"><span class="nick" style="color:#8dd3c7"><a href="#023118" label="[02:31:18]">&lt;OriansJ&gt;</a></span><span class="message">I've been unable to use guix since the 1.2.0 release as they still have not fixed the gnutls bug</span></div><div class="line" id="023123"><span class="nick" style="color:#2e2a4a"><a href="#023123" label="[02:31:23]">&lt;stikonas&gt;</a></span><span class="message">anyway, there are still plenty of non bootstrappable languages...</span></div><div class="line" id="023354"><span class="nick" style="color:#8dd3c7"><a href="#023354" label="[02:33:54]">&lt;OriansJ&gt;</a></span><span class="message">as the last step in my setup procedure fails do to the inability for guix pull to work: <a rel="nofollow" href="https://paste.debian.net/1178673/">https://paste.debian.net/1178673/</a> </span></div><div class="line" id="023536"><span class="nick" style="color:#8dd3c7"><a href="#023536" label="[02:35:36]">&lt;OriansJ&gt;</a></span><span class="message">If I enable substitues, it just downloads a blob and moves on but it is a release breaking bug that is 35 days old now</span></div><div class="line" id="023907"><span class="nick" style="color:#8dd3c7"><a href="#023907" label="[02:39:07]">&lt;OriansJ&gt;</a></span><span class="message">gnutls-3.6.12 if you wish to be precise</span></div><div class="line" id="023941"><span class="nick" style="color:#8dd3c7"><a href="#023941" label="[02:39:41]">&lt;OriansJ&gt;</a></span><span class="message"> <a rel="nofollow" href="https://issues.guix.info/44559">https://issues.guix.info/44559</a> </span></div><div class="line" id="024127"><span class="nick" style="color:#6b8072"><a href="#024127" label="[02:41:27]">&lt;fossy&gt;</a></span><span class="message">welll, why isnt gnutls updated to .14 then</span></div><div class="line" id="024225"><span class="nick" style="color:#80b1d3"><a href="#024225" label="[02:42:25]">&lt;xentrac&gt;</a></span><span class="message">20:49 &lt; fossy&gt; so we actually do have a full path from 357 bytes to gcc, abliet a mildly complex one</span></div><div class="line" id="024244"><span class="nick" style="color:#80b1d3"><a href="#024244" label="[02:42:44]">&lt;xentrac&gt;</a></span><span class="message">congratulations!  I didn't realize we'd made it this far already!</span></div><div class="line" id="024646"><span class="nick" style="color:#8dd3c7"><a href="#024646" label="[02:46:46]">&lt;OriansJ&gt;</a></span><span class="message">fossy: probably because it would force all packages down the tree to have to be rebuilt.</span></div><div class="line" id="025143"><span class="nick" style="color:#2e2a4a"><a href="#025143" label="[02:51:43]">&lt;stikonas&gt;</a></span><span class="message">what about using 1.1.0 and guix pulling to get new version?</span></div><div class="line" id="025715"><span class="nick" style="color:#8dd3c7"><a href="#025715" label="[02:57:15]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: doesn't work either as gnutls-3.6.12 is needed by guix pull to successfully complete.</span></div><div class="line" id="025757"><span class="nick" style="color:#8dd3c7"><a href="#025757" label="[02:57:57]">&lt;OriansJ&gt;</a></span><span class="message">right now the only work around is enable substitutes</span></div><div class="line" id="025855"><span class="nick" style="color:#8dd3c7"><a href="#025855" label="[02:58:55]">&lt;OriansJ&gt;</a></span><span class="message">or change the system clock back a couple months</span></div><div class="line" id="030329"><span class="nick" style="color:#2e2a4a"><a href="#030329" label="[03:03:29]">&lt;stikonas&gt;</a></span><span class="message">yeah, I think something similar happened before for me (download was failing)</span></div><div class="line" id="030401"><span class="nick" style="color:#2e2a4a"><a href="#030401" label="[03:04:01]">&lt;stikonas&gt;</a></span><span class="message">(I workarounded that by editing /etc/hosts and putting that file locally</span></div><div class="line" id="030442"><span class="nick" style="color:#8dd3c7"><a href="#030442" label="[03:04:42]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: guix download works on local files as well.</span></div><div class="line" id="031658"><span class="nick" style="color:#6b8072"><a href="#031658" label="[03:16:58]">&lt;fossy&gt;</a></span><span class="message">OriansJ: ah</span></div><div class="line" id="033445"><span class="nick" style="color:#8dd3c7"><a href="#033445" label="[03:34:45]">&lt;OriansJ&gt;</a></span><span class="message">what is even weirder is if I do: guix build gnutls@3.6.12; I get: successfully built /gnu/store/91qxmwz9wm9w6jwxqmkalrlfxnkd3c0c-gnutls-3.6.14.drv</span></div><div class="line" id="034348"><span class="nick" style="color:#6d2462"><a href="#034348" label="[03:43:48]">&lt;lfam&gt;</a></span><span class="message">I just joined so I missed the earlier part of the discussion, but if the weird thing is the version mismatch, it's likely a consequence of the grafting mechanism. Specifically, a case where GnuTLS 3.6.12 was replaced, using grafting, with 3.6.14</span></div><div class="line" id="034418"><span class="nick" style="color:#6d2462"><a href="#034418" label="[03:44:18]">&lt;lfam&gt;</a></span><span class="message">The filename of the grafted replacement must have an equal length, so it seems that, in this case, we chose to leave the version number &quot;unchanged&quot;</span></div><div class="line" id="034425"><span class="nick" style="color:#6d2462"><a href="#034425" label="[03:44:25]">&lt;lfam&gt;</a></span><span class="message">It's definitely not ideal from the UI perspective</span></div><div class="line" id="034507"><span class="nick" style="color:#6d2462"><a href="#034507" label="[03:45:07]">&lt;lfam&gt;</a></span><span class="message">It probably would have been better to do what we sometimes do, which is to set the replacement version as &quot;3.6.-A&quot;</span></div><div class="line" id="034516"><span class="nick" style="color:#6d2462"><a href="#034516" label="[03:45:16]">&lt;lfam&gt;</a></span><span class="message">Or something equally meaningless but equal length</span></div><div class="line" id="035310"><span class="nick" style="color:#6d2462"><a href="#035310" label="[03:53:10]">&lt;lfam&gt;</a></span><span class="message">Well, sorry for adding to the confusion. Of course in this case the replacement's version is the same length.</span></div><div class="line" id="035333"><span class="nick" style="color:#6d2462"><a href="#035333" label="[03:53:33]">&lt;lfam&gt;</a></span><span class="message">It's definitely one several UI bugs regarding grafts</span></div><div class="line" id="035359"><span class="nick" style="color:#234e69"><a href="#035359" label="[03:53:59]">&lt;siraben&gt;</a></span><span class="message">OriansJ: I'm curious what the .drv files in Guix look like compated to Nix's .drv</span></div><div class="line" id="035742"><span class="nick" style="color:#8dd3c7"><a href="#035742" label="[03:57:42]">&lt;OriansJ&gt;</a></span><span class="message">lfam: thank you for the insight. I am attempting to figuring out a work around procudure for enabling guix pull to work when one installs guix v1.2.0 (stable) via following this procudure: <a rel="nofollow" href="https://paste.debian.net/1178673/">https://paste.debian.net/1178673/</a> </span></div><div class="line" id="035901"><span class="nick" style="color:#8dd3c7"><a href="#035901" label="[03:59:01]">&lt;OriansJ&gt;</a></span><span class="message">currently I am trying this procedure: <a rel="nofollow" href="https://paste.debian.net/1178687/">https://paste.debian.net/1178687/</a>  in attempt to provide a work around that will consistently work for those wishing to actually install guix and not depend upon substitutes</span></div><div class="line" id="040002"><span class="nick" style="color:#8dd3c7"><a href="#040002" label="[04:00:02]">&lt;OriansJ&gt;</a></span><span class="message">just waiting for it to finish and then run guix pull (hopefully it'll keep going this time)</span></div><div class="line" id="040003"><span class="nick" style="color:#6d2462"><a href="#040003" label="[04:00:03]">&lt;lfam&gt;</a></span><span class="message">Is it a problem with the GnuTLS test suite having a test certificate that has expired? Or similar?</span></div><div class="line" id="040031"><span class="nick" style="color:#8dd3c7"><a href="#040031" label="[04:00:31]">&lt;OriansJ&gt;</a></span><span class="message">lfam: this issue if you wish to be precise <a rel="nofollow" href="https://issues.guix.info/44559">https://issues.guix.info/44559</a> </span></div><div class="line" id="040045"><span class="nick" style="color:#8dd3c7"><a href="#040045" label="[04:00:45]">&lt;OriansJ&gt;</a></span><span class="message">but yes</span></div><div class="line" id="040057"><span class="nick" style="color:#6d2462"><a href="#040057" label="[04:00:57]">&lt;lfam&gt;</a></span><span class="message">Yeah</span></div><div class="line" id="040107"><span class="nick" style="color:#6d2462"><a href="#040107" label="[04:01:07]">&lt;lfam&gt;</a></span><span class="message">We have basically always &quot;punted&quot; on those</span></div><div class="line" id="040127"><span class="nick" style="color:#6d2462"><a href="#040127" label="[04:01:27]">&lt;lfam&gt;</a></span><span class="message">It's not really clear what to do except for reset the clock, as you suggest</span></div><div class="line" id="040159"><span class="nick" style="color:#8dd3c7"><a href="#040159" label="[04:01:59]">&lt;OriansJ&gt;</a></span><span class="message">lfam: or shove into a qemu vm with an arbitrary timeclock set</span></div><div class="line" id="040206"><span class="nick" style="color:#6d2462"><a href="#040206" label="[04:02:06]">&lt;lfam&gt;</a></span><span class="message">Yeah, somehow change the time</span></div><div class="line" id="040234"><span class="nick" style="color:#6d2462"><a href="#040234" label="[04:02:34]">&lt;lfam&gt;</a></span><span class="message">There are several bugs like this in our history from GnuTLS :/</span></div><div class="line" id="040248"><span class="nick" style="color:#6d2462"><a href="#040248" label="[04:02:48]">&lt;lfam&gt;</a></span><span class="message">Unfortunately the software expires</span></div><div class="line" id="040308"><span class="nick" style="color:#6d2462"><a href="#040308" label="[04:03:08]">&lt;lfam&gt;</a></span><span class="message">I think it's happened with some other packages, too, but GnuTLS is really important for Guix</span></div><div class="line" id="040317"><span class="nick" style="color:#8dd3c7"><a href="#040317" label="[04:03:17]">&lt;OriansJ&gt;</a></span><span class="message">-startdate &quot;1999-12-13&quot; ...?</span></div><div class="line" id="040357"><span class="nick" style="color:#8dd3c7"><a href="#040357" label="[04:03:57]">&lt;OriansJ&gt;</a></span><span class="message">or maybe -rtc base=&quot;YYYY-MM-DD&quot;,clock=vm</span></div><div class="line" id="040414"><span class="nick" style="color:#6d2462"><a href="#040414" label="[04:04:14]">&lt;lfam&gt;</a></span><span class="message">The tricky thing is that it's part of the general class of bugs summarized as &quot;things fall apart&quot;. When trying to use old versions of Guix without substitutes, it's basically impossible because upstream sources disappear. That is what the Software Heritage aims to address</span></div><div class="line" id="040440"><span class="nick" style="color:#6d2462"><a href="#040440" label="[04:04:40]">&lt;lfam&gt;</a></span><span class="message">There is not really any effective way to build a distro from source after a few years</span></div><div class="line" id="040449"><span class="nick" style="color:#6d2462"><a href="#040449" label="[04:04:49]">&lt;lfam&gt;</a></span><span class="message">Unless you have cached all the source code</span></div><div class="line" id="040511"><span class="nick" style="color:#8dd3c7"><a href="#040511" label="[04:05:11]">&lt;OriansJ&gt;</a></span><span class="message">lfam: extremely fair</span></div><div class="line" id="040534"><span class="nick" style="color:#8dd3c7"><a href="#040534" label="[04:05:34]">&lt;OriansJ&gt;</a></span><span class="message">Personally I am all for guix caching files as they become part of the build tree</span></div><div class="line" id="040634"><span class="nick" style="color:#6d2462"><a href="#040634" label="[04:06:34]">&lt;lfam&gt;</a></span><span class="message">The Software Heritage is like a cousin of Guix, also starting from people at Inria. So that's basically our solution to the &quot;disappeared sources&quot; problem. But it's a long-term project and doesn't cover all use cases yet</span></div><div class="line" id="040705"><span class="nick" style="color:#6d2462"><a href="#040705" label="[04:07:05]">&lt;lfam&gt;</a></span><span class="message">We cache sources at our build farm but it's not treated in an archival way</span></div><div class="line" id="040734"><span class="nick" style="color:#6d2462"><a href="#040734" label="[04:07:34]">&lt;lfam&gt;</a></span><span class="message">If there is something concrete we can do to improve the situation with this &quot;expired GnuTLS&quot;, we want to do it. Suggestions welcome!</span></div><div class="line" id="040813"><span class="nick" style="color:#8dd3c7"><a href="#040813" label="[04:08:13]">&lt;OriansJ&gt;</a></span><span class="message">lfam: well my solution would be just to have a written procedure that people can use to work around it.</span></div><div class="line" id="040830"><span class="nick" style="color:#80b1d3"><a href="#040830" label="[04:08:30]">&lt;xentrac&gt;</a></span><span class="message">Yes, Debian saves all the sources in the Debian source archive; it seems like a sine qua non for reproducibility</span></div><div class="line" id="040900"><span class="nick" style="color:#6d2462"><a href="#040900" label="[04:09:00]">&lt;lfam&gt;</a></span><span class="message">OriansJ: If you come up with a procedure that works, please let us know and we will include / distribute / implement it accordingly</span></div><div class="line" id="040910"><span class="nick" style="color:#8dd3c7"><a href="#040910" label="[04:09:10]">&lt;OriansJ&gt;</a></span><span class="message">even if it is go to this FTPS site to lookup and download the source tar; or do these funky steps to work around the system clock problem.</span></div><div class="line" id="040951"><span class="nick" style="color:#8dd3c7"><a href="#040951" label="[04:09:51]">&lt;OriansJ&gt;</a></span><span class="message">lfam: well I linked to my current plan that I am testing but I'm still waiting on the build to complete to know for certain.</span></div><div class="line" id="041019"><span class="nick" style="color:#6d2462"><a href="#041019" label="[04:10:19]">&lt;lfam&gt;</a></span><span class="message">I think it will work, assuming the chosen &quot;fake time&quot; is within the constraints of the certificate</span></div><div class="line" id="041033"><span class="nick" style="color:#8dd3c7"><a href="#041033" label="[04:10:33]">&lt;OriansJ&gt;</a></span><span class="message">when I figure out the solution I will certainly email the answer to 44559@debbugs.gnu.org so that everyone will have it</span></div><div class="line" id="041058"><span class="nick" style="color:#6d2462"><a href="#041058" label="[04:10:58]">&lt;lfam&gt;</a></span><span class="message">A tangential but oft-considered idea is to somehow separate &quot;building&quot; from &quot;testing&quot; of packages, but it's rather pie in the sky at this point</span></div><div class="line" id="041108"><span class="nick" style="color:#6d2462"><a href="#041108" label="[04:11:08]">&lt;lfam&gt;</a></span><span class="message">Usually this type of failure is in a test suite</span></div><div class="line" id="041138"><span class="nick" style="color:#8dd3c7"><a href="#041138" label="[04:11:38]">&lt;OriansJ&gt;</a></span><span class="message">well make and make test are 2 different things for a reason.</span></div><div class="line" id="041343"><span class="nick" style="color:#6d2462"><a href="#041343" label="[04:13:43]">&lt;lfam&gt;</a></span><span class="message">The thing is, if the tests fail, we want the build to fail. But maybe we could define packages with &quot;test suite is expected to fail&quot; or something</span></div><div class="line" id="041401"><span class="nick" style="color:#6d2462"><a href="#041401" label="[04:14:01]">&lt;lfam&gt;</a></span><span class="message">It's not a simple change in the context of functional package building</span></div><div class="line" id="041506"><span class="nick" style="color:#8dd3c7"><a href="#041506" label="[04:15:06]">&lt;OriansJ&gt;</a></span><span class="message">lfam: or we could address it more proactively.</span></div><div class="line" id="041523"><span class="nick" style="color:#6d2462"><a href="#041523" label="[04:15:23]">&lt;lfam&gt;</a></span><span class="message">One really appreciates the advantages of the flexibility offered by a Debian-type distro in situations like this</span></div><div class="line" id="041524"><span class="nick" style="color:#8dd3c7"><a href="#041524" label="[04:15:24]">&lt;OriansJ&gt;</a></span><span class="message">use qemu to set the time to say the year 2800</span></div><div class="line" id="041547"><span class="nick" style="color:#8dd3c7"><a href="#041547" label="[04:15:47]">&lt;OriansJ&gt;</a></span><span class="message">then time based failures will always occur</span></div><div class="line" id="041600"><span class="nick" style="color:#6d2462"><a href="#041600" label="[04:16:00]">&lt;lfam&gt;</a></span><span class="message">Not to mention the filesystems ;)</span></div><div class="line" id="041639"><span class="nick" style="color:#6d2462"><a href="#041639" label="[04:16:39]">&lt;lfam&gt;</a></span><span class="message">We work around a huge number of bugs in upstream packages, but a solution to this one is elusive</span></div><div class="line" id="041648"><span class="nick" style="color:#8dd3c7"><a href="#041648" label="[04:16:48]">&lt;OriansJ&gt;</a></span><span class="message">lfam: we can also dictate everything inside qemu so that all builds become 100% reproducible</span></div><div class="line" id="041800"><span class="nick" style="color:#8dd3c7"><a href="#041800" label="[04:18:00]">&lt;OriansJ&gt;</a></span><span class="message">eg have guix build ext4 files, boot them with a known linux kernel to build the program in question. shutdown the vm, and copy off the built binary</span></div><div class="line" id="041825"><span class="nick" style="color:#8dd3c7"><a href="#041825" label="[04:18:25]">&lt;OriansJ&gt;</a></span><span class="message">set the memory and CPU and system too</span></div><div class="line" id="041838"><span class="nick" style="color:#8dd3c7"><a href="#041838" label="[04:18:38]">&lt;OriansJ&gt;</a></span><span class="message">now everything is identical</span></div><div class="line" id="041849"><span class="nick" style="color:#6d2462"><a href="#041849" label="[04:18:49]">&lt;lfam&gt;</a></span><span class="message">Yes... except for the users' systems :)</span></div><div class="line" id="041852"><span class="nick" style="color:#8dd3c7"><a href="#041852" label="[04:18:52]">&lt;OriansJ&gt;</a></span><span class="message">with nothing possible to change the outcomes of the binaries</span></div><div class="line" id="041907"><span class="nick" style="color:#8dd3c7"><a href="#041907" label="[04:19:07]">&lt;OriansJ&gt;</a></span><span class="message">users' systems no longer impact the build</span></div><div class="line" id="041931"><span class="nick" style="color:#8dd3c7"><a href="#041931" label="[04:19:31]">&lt;OriansJ&gt;</a></span><span class="message">because the build is done inside of a strictly defined qemu vm</span></div><div class="line" id="042007"><span class="nick" style="color:#6d2462"><a href="#042007" label="[04:20:07]">&lt;lfam&gt;</a></span><span class="message">It's nice to build on a variety of hardware. It does help uncover some bugs before sending them to users</span></div><div class="line" id="042037"><span class="nick" style="color:#8dd3c7"><a href="#042037" label="[04:20:37]">&lt;OriansJ&gt;</a></span><span class="message">fair</span></div><div class="line" id="042038"><span class="nick" style="color:#6d2462"><a href="#042038" label="[04:20:38]">&lt;lfam&gt;</a></span><span class="message">We could do this. In fact, large parts of the build farm have been virtualized at one time or another</span></div><div class="line" id="042106"><span class="nick" style="color:#6d2462"><a href="#042106" label="[04:21:06]">&lt;lfam&gt;</a></span><span class="message">Like I said, if your workaround recipe is effective, please let us know on the bug tracker or in #guix</span></div><div class="line" id="042107"><span class="nick" style="color:#8dd3c7"><a href="#042107" label="[04:21:07]">&lt;OriansJ&gt;</a></span><span class="message">or perhaps provide it as an option to address the sort of problems you would have previously punted</span></div><div class="line" id="042201"><span class="nick" style="color:#8dd3c7"><a href="#042201" label="[04:22:01]">&lt;OriansJ&gt;</a></span><span class="message">lfam: you know me; I always share solutions when I have them.</span></div><div class="line" id="042351"><span class="nick" style="color:#6d2462"><a href="#042351" label="[04:23:51]">&lt;lfam&gt;</a></span><span class="message">It would probably not be too hard to add an option to the guix-daemon that would do what you suggest. We already have QEMU integrations in some other areas</span></div><div class="line" id="042502"><span class="nick" style="color:#8dd3c7"><a href="#042502" label="[04:25:02]">&lt;OriansJ&gt;</a></span><span class="message">lfam: what can I say novelty first search once again proves useful</span></div><div class="line" id="042803"><span class="nick" style="color:#6c3d55"><a href="#042803" label="[04:28:03]">&lt;pabs3&gt;</a></span><span class="message">btw Debian also has a Software-Heritage-esq archive site: <a rel="nofollow" href="https://snapshot.debian.org/">https://snapshot.debian.org/</a> </span></div><div class="line" id="042839"><span class="nick" style="color:#6c3d55"><a href="#042839" label="[04:28:39]">&lt;pabs3&gt;</a></span><span class="message">(stores both binaries and sources, for everything going back to something like 2005, plus releases before that)</span></div><div class="line" id="043325"><span class="nick" style="color:#8dd3c7"><a href="#043325" label="[04:33:25]">&lt;OriansJ&gt;</a></span><span class="message">pabs3: thanks for the link</span></div><div class="line" id="043502"><span class="nick" style="color:#80b1d3"><a href="#043502" label="[04:35:02]">&lt;xentrac&gt;</a></span><span class="message">yeah, but even the regular Debian archive stores all the sources, and they've been working hard these last few years on reproducible builds</span></div><div class="line" id="043715"><span class="nick" style="color:#6c3d55"><a href="#043715" label="[04:37:15]">&lt;pabs3&gt;</a></span><span class="message">btw, has it been considered to expand the scope of bootstrappable to all FLOSS distros (Linux/BSD/Haiku/ReactOS/etc)? similar to how reproducible builds folks have. I note vagrantc uploaded some bits to Debian (mes, mescc-tools at least)</span></div><div class="line" id="043733"><span class="nick" style="color:#80b1d3"><a href="#043733" label="[04:37:33]">&lt;xentrac&gt;</a></span><span class="message"> <a rel="nofollow" href="http://archive.debian.org/">http://archive.debian.org/</a> </span></div><div class="line" id="043812"><span class="nick" style="color:#80b1d3"><a href="#043812" label="[04:38:12]">&lt;xentrac&gt;</a></span><span class="message">see for example <a rel="nofollow" href="http://archive.debian.org/debian/dists/bo/main/source/games/">http://archive.debian.org/debian/dists/bo/main/source/games/</a> </span></div><div class="line" id="043815"><span class="nick" style="color:#6c3d55"><a href="#043815" label="[04:38:15]">&lt;pabs3&gt;</a></span><span class="message">that one contains the no-longer-supported releases (but no intermediate states)</span></div><div class="line" id="043900"><span class="nick" style="color:#80b1d3"><a href="#043900" label="[04:39:00]">&lt;xentrac&gt;</a></span><span class="message">ah, right, thanks for clarifying</span></div><div class="line" id="044004"><span class="nick" style="color:#6c3d55"><a href="#044004" label="[04:40:04]">&lt;pabs3&gt;</a></span><span class="message">(snapshot.d.o is where all intermediate+final states live)</span></div><div class="line" id="044043"><span class="nick" style="color:#80b1d3"><a href="#044043" label="[04:40:43]">&lt;xentrac&gt;</a></span><span class="message">so for example <a rel="nofollow" href="http://archive.debian.org/debian/dists/bo/main/source/devel/">http://archive.debian.org/debian/dists/bo/main/source/devel/</a>  contains <a rel="nofollow" href="http://archive.debian.org/debian/dists/bo/main/source/devel/gcc_2.7.2.1-9.diff.gz">http://archive.debian.org/debian/dists/bo/main/source/devel/gcc_2.7.2.1-9.diff.gz</a>  from 1997-10-09, but there were presumably 2.7.2.1-8.diff.gz, 2.7.2.1-7.diff.gz, etc.?</span></div><div class="line" id="045037"><span class="nick" style="color:#6c3d55"><a href="#045037" label="[04:50:37]">&lt;pabs3&gt;</a></span><span class="message">right</span></div><div class="line" id="045101"><span class="nick" style="color:#6c3d55"><a href="#045101" label="[04:51:01]">&lt;pabs3&gt;</a></span><span class="message">the diff should have a debian/changelog file that lists all the prior versions</span></div><div class="line" id="045348"><span class="nick" style="color:#80b1d3"><a href="#045348" label="[04:53:48]">&lt;xentrac&gt;</a></span><span class="message">so it does</span></div><div class="line" id="045401"><span class="nick" style="color:#80b1d3"><a href="#045401" label="[04:54:01]">&lt;xentrac&gt;</a></span><span class="message">well, not all.  most</span></div><div class="line" id="045442"><span class="nick" style="color:#80b1d3"><a href="#045442" label="[04:54:42]">&lt;xentrac&gt;</a></span><span class="message">it starts at 2.7.2.1-3; the previous two (or three?) patch levels were summarized in a &quot;Previous changes:&quot; section</span></div><div class="line" id="050402"><span class="nick" style="color:#8dd3c7"><a href="#050402" label="[05:04:02]">&lt;OriansJ&gt;</a></span><span class="message">pabs3: well I am more than happy to expand all of the pieces in mescc-tools-seed, mescc-tools and M2-Planet to be ported to any operating system/distro that has a dev willing to help in the process.</span></div><div class="line" id="050531"><span class="nick" style="color:#8dd3c7"><a href="#050531" label="[05:05:31]">&lt;OriansJ&gt;</a></span><span class="message">I can not however make matching claims about the higher stages of the bootstrap process as I haven't become responsible for them yet.</span></div><div class="line" id="050709"><span class="nick" style="color:#8dd3c7"><a href="#050709" label="[05:07:09]">&lt;OriansJ&gt;</a></span><span class="message">similiarly for arbitrary hardware architectures.</span></div><div class="line" id="092852"><span class="nick" style="color:#6b8072"><a href="#092852" label="[09:28:52]">&lt;fossy&gt;</a></span><span class="message">janneke: i will be integrating wip-m2 into live-bootstrap shortly until there is a more sutible replacement or it matures. is wip-m2 currently selfhostable?</span></div><div class="line" id="092935"><span class="nick" style="color:#d9d9d9"><a href="#092935" label="[09:29:35]">&lt;janneke&gt;</a></span><span class="message">good; yes, i believe so</span></div><div class="line" id="093014"><span class="nick" style="color:#6b8072"><a href="#093014" label="[09:30:14]">&lt;fossy&gt;</a></span><span class="message">ok, cool</span></div><div class="line" id="093019"><span class="nick" style="color:#6b8072"><a href="#093019" label="[09:30:19]">&lt;fossy&gt;</a></span><span class="message">woohoo, one less sed</span></div><div class="line" id="093022"><span class="nick" style="color:#6b8072"><a href="#093022" label="[09:30:22]">&lt;fossy&gt;</a></span><span class="message">seed*</span></div><div class="line" id="125832"><span class="nick" style="color:#d9d9d9"><a href="#125832" label="[12:58:32]">&lt;janneke&gt;</a></span><span class="message">hmm, upgrading from m2-planet 1.4.x to 1.7 gives</span></div><div class="line" id="125837"><span class="nick" style="color:#d9d9d9"><a href="#125837" label="[12:58:37]">&lt;janneke&gt;</a></span><span class="message">&quot;Struct only supports [num] form&quot;</span></div><div class="line" id="125843"><span class="nick" style="color:#d9d9d9"><a href="#125843" label="[12:58:43]">&lt;janneke&gt;</a></span><span class="message">what could that mean?</span></div><div class="line" id="130201"><span class="nick" style="color:#d9d9d9"><a href="#130201" label="[13:02:01]">&lt;janneke&gt;</a></span><span class="message">ah, i see; no arrays in struct</span></div><div class="line" id="130210"><span class="nick" style="color:#bc80bd"><a href="#130210" label="[13:02:10]">*</a></span><span class="message">janneke was editing the wrong file</span></div><div class="line" id="130300"><span class="nick" style="color:#d9d9d9"><a href="#130300" label="[13:03:00]">&lt;janneke&gt;</a></span><span class="message">hmm...</span></div><div class="line" id="130719"><span class="nick" style="color:#8dd3c7"><a href="#130719" label="[13:07:19]">&lt;OriansJ&gt;</a></span><span class="message">janneke: you can do arrays in struct but only if they are fixed size or you could just do type* and set them using malloc/calloc at runtime</span></div><div class="line" id="130827"><span class="nick" style="color:#8dd3c7"><a href="#130827" label="[13:08:27]">&lt;OriansJ&gt;</a></span><span class="message">eg struct foo { char sysname[65]; char* bar; }; is perfectly acceptable</span></div><div class="line" id="130858"><span class="nick" style="color:#234e69"><a href="#130858" label="[13:08:58]">&lt;siraben&gt;</a></span><span class="message">I might have missed earlier discussion but is it possible to extend m2-planet to compile mescc?</span></div><div class="line" id="130905"><span class="nick" style="color:#234e69"><a href="#130905" label="[13:09:05]">&lt;siraben&gt;</a></span><span class="message">or it requires a Scheme interpreter</span></div><div class="line" id="130940"><span class="nick" style="color:#8dd3c7"><a href="#130940" label="[13:09:40]">&lt;OriansJ&gt;</a></span><span class="message">siraben: M2-Planet is a C compiler (of sorts) and MesCC is an interpreted scheme program.</span></div><div class="line" id="131005"><span class="nick" style="color:#234e69"><a href="#131005" label="[13:10:05]">&lt;siraben&gt;</a></span><span class="message">Doesn't mescc have a Scheme interpreter in C?</span></div><div class="line" id="131112"><span class="nick" style="color:#d9d9d9"><a href="#131112" label="[13:11:12]">&lt;janneke&gt;</a></span><span class="message">OriansJ: ah, great -- i can hardcode the size for m2-planet</span></div><div class="line" id="131200"><span class="nick" style="color:#d9d9d9"><a href="#131200" label="[13:12:00]">&lt;janneke&gt;</a></span><span class="message">OriansJ: it seems that all variables must now be defined at top level</span></div><div class="line" id="131245"><span class="nick" style="color:#d9d9d9"><a href="#131245" label="[13:12:45]">&lt;janneke&gt;</a></span><span class="message">(i'm not complaining, i like the strictness and new error messages)</span></div><div class="line" id="131427"><span class="nick" style="color:#8dd3c7"><a href="#131427" label="[13:14:27]">&lt;OriansJ&gt;</a></span><span class="message">siraben: yes that is mes.c</span></div><div class="line" id="131439"><span class="nick" style="color:#234e69"><a href="#131439" label="[13:14:39]">&lt;siraben&gt;</a></span><span class="message">Right, but M2-planet cannot compile htat?</span></div><div class="line" id="131443"><span class="nick" style="color:#234e69"><a href="#131443" label="[13:14:43]">&lt;siraben&gt;</a></span><span class="message">thta*</span></div><div class="line" id="131445"><span class="nick" style="color:#234e69"><a href="#131445" label="[13:14:45]">&lt;siraben&gt;</a></span><span class="message">ugh, that*</span></div><div class="line" id="131453"><span class="nick" style="color:#8dd3c7"><a href="#131453" label="[13:14:53]">&lt;OriansJ&gt;</a></span><span class="message">janneke: it is taking variable initialization out of loops that where a hard to track down bug</span></div><div class="line" id="131604"><span class="nick" style="color:#8dd3c7"><a href="#131604" label="[13:16:04]">&lt;OriansJ&gt;</a></span><span class="message">siraben: it heavily depended upon C macros and pointer arithmetic. Something that M2-Planet doesn't have and something that M2-Planet needs a work around for.</span></div><div class="line" id="131635"><span class="nick" style="color:#234e69"><a href="#131635" label="[13:16:35]">&lt;siraben&gt;</a></span><span class="message">Ah, so it was more worthwhile to write a new interpreter from scratch?</span></div><div class="line" id="131814"><span class="nick" style="color:#8dd3c7"><a href="#131814" label="[13:18:14]">&lt;OriansJ&gt;</a></span><span class="message">siraben: it is more like I spent 6 months trying to get it to work; had a hard time debugging it and gave up; wrote an easy to debug scheme from scratch and got stuck on how to get macros and modules to work correctly.</span></div><div class="line" id="131831"><span class="nick" style="color:#234e69"><a href="#131831" label="[13:18:31]">&lt;siraben&gt;</a></span><span class="message">Right, that makes sense</span></div><div class="line" id="131858"><span class="nick" style="color:#d9d9d9"><a href="#131858" label="[13:18:58]">&lt;janneke&gt;</a></span><span class="message">OriansJ: that makes sense too</span></div><div class="line" id="131949"><span class="nick" style="color:#d9d9d9"><a href="#131949" label="[13:19:49]">&lt;janneke&gt;</a></span><span class="message">meanwhile, i continued on yet another route, stepwise refactoring of mes</span></div><div class="line" id="132019"><span class="nick" style="color:#d9d9d9"><a href="#132019" label="[13:20:19]">&lt;janneke&gt;</a></span><span class="message">hoping that our efforts would somehow help eachother</span></div><div class="line" id="132053"><span class="nick" style="color:#8dd3c7"><a href="#132053" label="[13:20:53]">&lt;OriansJ&gt;</a></span><span class="message">indeed</span></div><div class="line" id="133048"><span class="nick" style="color:#8dd3c7"><a href="#133048" label="[13:30:48]">&lt;OriansJ&gt;</a></span><span class="message">well they say only 1 scheme ever was a long term group collaborative effort (guile)</span></div><div class="line" id="133128"><span class="nick" style="color:#8dd3c7"><a href="#133128" label="[13:31:28]">&lt;OriansJ&gt;</a></span><span class="message">perhaps with effort from all parties involved we can finally create a second.</span></div><div class="line" id="135247"><span class="nick" style="color:#234e69"><a href="#135247" label="[13:52:47]">&lt;siraben&gt;</a></span><span class="message">What about other schemes like Chez, CHICKEN, etc.?</span></div><div class="line" id="140115"><span class="nick" style="color:#3c5b35"><a href="#140115" label="[14:01:15]">&lt;mihi&gt;</a></span><span class="message">OriansJ: as I fixed the bugs in symbol-&gt;string and string-&gt;symbol logic, all bugs I know of (including the segfaults) are in mes-macro.c.</span></div><div class="line" id="140126"><span class="nick" style="color:#3c5b35"><a href="#140126" label="[14:01:26]">&lt;mihi&gt;</a></span><span class="message">One example of a segfault is in the commit message of <a rel="nofollow" href="https://github.com/schierlm/mes-m2/commit/d57f2a16538e856c29dad39863106f5a4fbae8b9">https://github.com/schierlm/mes-m2/commit/d57f2a16538e856c29dad39863106f5a4fbae8b9</a>,  but I believe that when the invalid argument invocations are fixed, they probably go away by themselves.</span></div><div class="line" id="140132"><span class="nick" style="color:#3c5b35"><a href="#140132" label="[14:01:32]">&lt;mihi&gt;</a></span><span class="message">Even without MES_CORE=0, setting some strategic breakpoints in gdb helped to pinpoint bugs once you had a minimal example that triggered them. As long as the bug happens during loading of e.g. srfi-13 and you already have 50000+ cons cells in memory, the hard part is reducing the bug to a smaller example (in my experience).</span></div><div class="line" id="140140"><span class="nick" style="color:#3c5b35"><a href="#140140" label="[14:01:40]">&lt;mihi&gt;</a></span><span class="message">So the goal of mes-m2 is actually not (only) to make mescc run on M2-Planet, but to reinvent the wh^Wguile well enough so that it can run guix's bootstrap machinery? I believe one CollabNet guy once said that the most important factor for open source projects to attract and retain contributors is to clearly state what the goal of the program is and what is not. And if the goal is more complex,</span></div><div class="line" id="140148"><span class="nick" style="color:#3c5b35"><a href="#140148" label="[14:01:48]">&lt;mihi&gt;</a></span><span class="message">provide some agreement of what steps to pursue next and what defines them to be finished. I now can see that this was probably a non negligible reason why mes-m2 landed in the situation where it is today.</span></div><div class="line" id="140150"><span class="nick" style="color:#3c5b35"><a href="#140150" label="[14:01:50]">&lt;mihi&gt;</a></span><span class="message">I believe it is easier to get guile bootstrapped from gcc without relying on guil as early as possible and then restart the guix bootstrap with guile and the previous seed. But probably I'll have to try first where the real obstacles are in compiling guile from Debian's build-essential and nothing else :-)</span></div><div class="line" id="140156"><span class="nick" style="color:#3c5b35"><a href="#140156" label="[14:01:56]">&lt;mihi&gt;</a></span><span class="message">In my opinion, the other bootstrap problems (node.js, scala, Kotlin, dart, etc.) can be solved indenpendently from M2-Planet by basing themselves on other already bootstrapped tools (e.g. scala bootstrap compiler could be written in Java, as the Java bootstrap is (mostly) solved)</span></div><div class="line" id="140206"><span class="nick" style="color:#3c5b35"><a href="#140206" label="[14:02:06]">&lt;mihi&gt;</a></span><span class="message">Trusted hardware is indeed another problem to solve. And verifying the individual TTL components of that trusted hardware yet another one.</span></div><div class="line" id="140215"><span class="nick" style="color:#3c5b35"><a href="#140215" label="[14:02:15]">&lt;mihi&gt;</a></span><span class="message">I'll put feedback to <a rel="nofollow" href="https://github.com/oriansj/mes-m2/commit/480e6c4ffc7cf843f89d433b7356bda8d60d460a#commitcomment-45485125">https://github.com/oriansj/mes-m2/commit/480e6c4ffc7cf843f89d433b7356bda8d60d460a#commitcomment-45485125</a>  here in the chat now as well:</span></div><div class="line" id="140220"><span class="nick" style="color:#3c5b35"><a href="#140220" label="[14:02:20]">&lt;mihi&gt;</a></span><span class="message">I'm not that interested in fuzzing, as long as it is easy to spot bugs by just loading modules that are already available (now that mes-load-module works). Especially since the bugs found that way are actually relevant, not potential bugs like fuzzing would find.</span></div><div class="line" id="140226"><span class="nick" style="color:#3c5b35"><a href="#140226" label="[14:02:26]">&lt;mihi&gt;</a></span><span class="message">About the macro expansion code: I'd love to really fix that, but my problem is that I don't really see why some special forms ('if, 'let, 'case etc.) are handled differently in macro_eval from normal eval. While others like 'when are not. Having my previous scheme experience from Tinyscheme, there macro evaluation works like that: (1) Collect/bind parameters as if they were quoted (2) evaluate the</span></div><div class="line" id="140231"><span class="nick" style="color:#3c5b35"><a href="#140231" label="[14:02:31]">&lt;mihi&gt;</a></span><span class="message">macro body as if it was a function body (3) evaluate the result of the last evaluation again. But probably Guile is different here and I just do not know about it.</span></div><div class="line" id="140234"><span class="nick" style="color:#3c5b35"><a href="#140234" label="[14:02:34]">&lt;mihi&gt;</a></span><span class="message">About primitives: append does not match what guile does as it only handles 2 parameters, so I believe calling it append2 is more appropriate (like done in mes).</span></div><div class="line" id="140247"><span class="nick" style="color:#3c5b35"><a href="#140247" label="[14:02:47]">&lt;mihi&gt;</a></span><span class="message">So, my current roadmap for mes-m2 is: (1) improve the README to make clear what the goals of the project are (2) fix the obvious blunders like mismatched arguments in mes-macro.c, without really understanding why it is as it is (3) wrap up everything and get rid of mes-m2 on all my hard disks (4) look at wip-m2 instead.</span></div><div class="line" id="140449"><span class="nick" style="color:#3c5b35"><a href="#140449" label="[14:04:49]">&lt;mihi&gt;</a></span><span class="message">OriansJ: Interesting approach, when not being able to debug a program to try replicating it from scratch. THis is certainly a good learning experience. The only thing I do not like about it that it was not made clear to me (and as I interpret some other reactions on the channel recently, also others)</span></div><div class="line" id="140509"><span class="nick" style="color:#234e69"><a href="#140509" label="[14:05:09]">&lt;siraben&gt;</a></span><span class="message">mihi: Did Tinyscheme have hygienic macros?</span></div><div class="line" id="140529"><span class="nick" style="color:#234e69"><a href="#140529" label="[14:05:29]">&lt;siraben&gt;</a></span><span class="message">I agree with making the READMEs more clearly state what the goals of the project are</span></div><div class="line" id="140536"><span class="nick" style="color:#3c5b35"><a href="#140536" label="[14:05:36]">&lt;mihi&gt;</a></span><span class="message">and it is no guarantee that when you have replicated the code from scratch, you won't hit the same roadblocks again</span></div><div class="line" id="140619"><span class="nick" style="color:#3c5b35"><a href="#140619" label="[14:06:19]">&lt;mihi&gt;</a></span><span class="message">siraben, I don't think so. They have (make-uninterned-symbol) so you have to emulate it like you do it in Lisp. But my last experience with TinyScheme was ~10 years ago so perhaps they have it now.</span></div><div class="line" id="140702"><span class="nick" style="color:#234e69"><a href="#140702" label="[14:07:02]">&lt;siraben&gt;</a></span><span class="message">Yeah, one of the issues with our current macro expansion is properly doing syntax-case and friends</span></div><div class="line" id="140729"><span class="nick" style="color:#234e69"><a href="#140729" label="[14:07:29]">&lt;siraben&gt;</a></span><span class="message">How does wip-m2 compare to mes-m2?</span></div><div class="line" id="140744"><span class="nick" style="color:#bc80bd"><a href="#140744" label="[14:07:44]">*</a></span><span class="message">janneke pushes a fresh wip-m2</span></div><div class="line" id="140755"><span class="nick" style="color:#3c5b35"><a href="#140755" label="[14:07:55]">&lt;mihi&gt;</a></span><span class="message">so mes-m2's define-macro is supposed to be hygienic macros? I don't really see that from the code, but perhaps that is the reason that it tries to hardcode some thinsg differently. But not sure why 'if and not 'when.</span></div><div class="line" id="140756"><span class="nick" style="color:#d9d9d9"><a href="#140756" label="[14:07:56]">&lt;janneke&gt;</a></span><span class="message">with support for m2-planet 1.7.0</span></div><div class="line" id="140818"><span class="nick" style="color:#d9d9d9"><a href="#140818" label="[14:08:18]">&lt;janneke&gt;</a></span><span class="message">note: this is still sketchy</span></div><div class="line" id="140831"><span class="nick" style="color:#234e69"><a href="#140831" label="[14:08:31]">&lt;siraben&gt;</a></span><span class="message">janneke: could you link to that?</span></div><div class="line" id="140845"><span class="nick" style="color:#3c5b35"><a href="#140845" label="[14:08:45]">&lt;mihi&gt;</a></span><span class="message">janneke, I'm confident without lookig at it that it is less sketchy than current mes-m2 :P</span></div><div class="line" id="140913"><span class="nick" style="color:#d9d9d9"><a href="#140913" label="[14:09:13]">&lt;janneke&gt;</a></span><span class="message">i'll be working on cleaning up the m2-planet forked bits of the mes c lib</span></div><div class="line" id="141010"><span class="nick" style="color:#3c5b35"><a href="#141010" label="[14:10:10]">&lt;mihi&gt;</a></span><span class="message">siraben, Google suggests there is a pure TinyScheme for hygienic macros based on the non-hygienic ones they support.</span></div><div class="line" id="141026"><span class="nick" style="color:#d9d9d9"><a href="#141026" label="[14:10:26]">&lt;janneke&gt;</a></span><span class="message">siraben: <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/mes.git/log/?h=wip-m2">https://git.savannah.gnu.org/cgit/mes.git/log/?h=wip-m2</a> </span></div><div class="line" id="141108"><span class="nick" style="color:#d9d9d9"><a href="#141108" label="[14:11:08]">&lt;janneke&gt;</a></span><span class="message">note that this branch will be rewritten, as it's called wip-*</span></div><div class="line" id="141150"><span class="nick" style="color:#234e69"><a href="#141150" label="[14:11:50]">&lt;siraben&gt;</a></span><span class="message">So wip-m2 is another Scheme interpreter written in C?</span></div><div class="line" id="141201"><span class="nick" style="color:#234e69"><a href="#141201" label="[14:12:01]">&lt;siraben&gt;</a></span><span class="message">that should fix the issues of mes-m2?</span></div><div class="line" id="141308"><span class="nick" style="color:#3c5b35"><a href="#141308" label="[14:13:08]">&lt;mihi&gt;</a></span><span class="message">siraben, wip-m2 is trying to be a 100% mes compatible Scheme interpreter written in C compilable with M2-Planet.</span></div><div class="line" id="141328"><span class="nick" style="color:#234e69"><a href="#141328" label="[14:13:28]">&lt;siraben&gt;</a></span><span class="message">mihi: I see</span></div><div class="line" id="141342"><span class="nick" style="color:#d9d9d9"><a href="#141342" label="[14:13:42]">&lt;janneke&gt;</a></span><span class="message">gnu mes was written with the intention of being bootstrapped in assembly</span></div><div class="line" id="141348"><span class="nick" style="color:#d9d9d9"><a href="#141348" label="[14:13:48]">&lt;janneke&gt;</a></span><span class="message">so it used very simple c</span></div><div class="line" id="141351"><span class="nick" style="color:#3c5b35"><a href="#141351" label="[14:13:51]">&lt;mihi&gt;</a></span><span class="message">while mes-m2 is trying to also include the kitchen sink, but so far is not even crawling</span></div><div class="line" id="141428"><span class="nick" style="color:#d9d9d9"><a href="#141428" label="[14:14:28]">&lt;janneke&gt;</a></span><span class="message">m2-planet was a thing that i hadn't dare to dream of</span></div><div class="line" id="141443"><span class="nick" style="color:#d9d9d9"><a href="#141443" label="[14:14:43]">&lt;janneke&gt;</a></span><span class="message">but it took still quite some work to rewrite simple c to m2</span></div><div class="line" id="141528"><span class="nick" style="color:#d9d9d9"><a href="#141528" label="[14:15:28]">&lt;janneke&gt;</a></span><span class="message">mihi: mes-m2 has the potential of being fast and fully guile compatible, right?</span></div><div class="line" id="141757"><span class="nick" style="color:#3c5b35"><a href="#141757" label="[14:17:57]">&lt;mihi&gt;</a></span><span class="message">yeah, I have made some experiences with M2-Planet as well, trying to optimize hex2_linker. I would not call it c, (not even a subset of c), but it is a nice platform-independent low-level language that resembles C enough to leverage the knowledge and tooling available for C.</span></div><div class="line" id="141837"><span class="nick" style="color:#3c5b35"><a href="#141837" label="[14:18:37]">&lt;mihi&gt;</a></span><span class="message">and especially it is bootstrapped from stage0 :)</span></div><div class="line" id="142030"><span class="nick" style="color:#3c5b35"><a href="#142030" label="[14:20:30]">&lt;mihi&gt;</a></span><span class="message">janneke, I don't know guile enough to make a qualified statement about that. From my gut feeling, the current implementation is simplifying many things (e.g. no seperate namespaces for modules), so to be both fast and fully compatible it probably needs a few larger refactorings.</span></div><div class="line" id="142128"><span class="nick" style="color:#3c5b35"><a href="#142128" label="[14:21:28]">&lt;mihi&gt;</a></span><span class="message">but the &quot;potential&quot; is there in any case, like there is potential to make mescc fully gcc compliant :P</span></div><div class="line" id="142157"><span class="nick" style="color:#3c5b35"><a href="#142157" label="[14:21:57]">&lt;mihi&gt;</a></span><span class="message">(if you put enough person-years of effort into it)</span></div><div class="line" id="142236"><span class="nick" style="color:#3c5b35"><a href="#142236" label="[14:22:36]">&lt;mihi&gt;</a></span><span class="message">be back later</span></div><div class="line" id="192215"><span class="nick" style="color:#8dd3c7"><a href="#192215" label="[19:22:15]">&lt;OriansJ&gt;</a></span><span class="message">mihi: if you fix something. Send a pull request and/or alert me on this channel to the commits you want me to merge. I am not a mind reader and I rarely use github.</span></div><div class="line" id="192300"><span class="nick" style="color:#8dd3c7"><a href="#192300" label="[19:23:00]">&lt;OriansJ&gt;</a></span><span class="message">Also if there is anything about mes-m2 you don't like or don't understand you can either change or ask for clarification. I am more than happy to answer any questions.</span></div><div class="line" id="192450"><span class="nick" style="color:#8dd3c7"><a href="#192450" label="[19:24:50]">&lt;OriansJ&gt;</a></span><span class="message">and the reason for the guile compatibility is to solve guile's psyntax.pp bootstrap problem and yes I certainly have done many things wrong in my mes-m2 design.</span></div><div class="line" id="192553"><span class="nick" style="color:#8dd3c7"><a href="#192553" label="[19:25:53]">&lt;OriansJ&gt;</a></span><span class="message">But I am more than happy to work with you in fixing those issues.</span></div><div class="line" id="192640"><span class="nick" style="color:#8dd3c7"><a href="#192640" label="[19:26:40]">&lt;OriansJ&gt;</a></span><span class="message">also there was a plan on expanding MesCC to the point where it will be able to directly bootstrap GCC, so we can skip the TCC steps entirely.</span></div><div class="line" id="192737"><span class="nick" style="color:#8dd3c7"><a href="#192737" label="[19:27:37]">&lt;OriansJ&gt;</a></span><span class="message">As these projects are those done out of love and not always practical reasons; So how people feel about the work matters more than the technical details involved.</span></div><div class="line" id="193214"><span class="nick" style="color:#af8d2f"><a href="#193214" label="[19:32:14]">&lt;bauen1&gt;</a></span><span class="message">so do we finally have a complete bootstrap chain from kaem / hex0 to gcc (or tinycc) ?</span></div><div class="line" id="193250"><span class="nick" style="color:#af8d2f"><a href="#193250" label="[19:32:50]">&lt;bauen1&gt;</a></span><span class="message">i should really get a move on with my kernel in any case</span></div><div class="line" id="200523"><span class="nick" style="color:#d9d9d9"><a href="#200523" label="[20:05:23]">&lt;janneke&gt;</a></span><span class="message">OriansJ: i have updated wip-m2 to work with m2-planet 1.7.0 and mescc-tools 1.1.0</span></div><div class="line" id="200625"><span class="nick" style="color:#d9d9d9"><a href="#200625" label="[20:06:25]">&lt;janneke&gt;</a></span><span class="message">there are now only 10 out of ~80 libc files that need a special m2-planet file</span></div><div class="line" id="200910"><span class="nick" style="color:#d9d9d9"><a href="#200910" label="[20:09:10]">&lt;janneke&gt;</a></span><span class="message">causes are: standard prototype with an array parameter, prototype with special type name (mode_t, clockid_t, ..), prototype with an ellipsis, code that must be excluded #if SYS_gettime ...</span></div><div class="line" id="200918"><span class="nick" style="color:#d9d9d9"><a href="#200918" label="[20:09:18]">&lt;janneke&gt;</a></span><span class="message">so that's looking pretty good</span></div><div class="line" id="201003"><span class="nick" style="color:#d9d9d9"><a href="#201003" label="[20:10:03]">&lt;janneke&gt;</a></span><span class="message">OriansJ: i'm hitting a Floating point exception though, when using INT_MIN</span></div><div class="line" id="201041"><span class="nick" style="color:#d9d9d9"><a href="#201041" label="[20:10:41]">&lt;janneke&gt;</a></span><span class="message">it was all fine with m2-planet 1.4.x and my non-rebased wip-m2</span></div><div class="line" id="201109"><span class="nick" style="color:#d9d9d9"><a href="#201109" label="[20:11:09]">&lt;janneke&gt;</a></span><span class="message">it's most probably on the mes side, i haven't investigated yet, but ring any bells?</span></div><div class="line" id="204514"><span class="nick" style="color:#3c5b35"><a href="#204514" label="[20:45:14]">&lt;mihi&gt;</a></span><span class="message">OriansJ: pull request with code changes (module loading works and it does not obviously segfault any more): <a rel="nofollow" href="https://github.com/oriansj/mes-m2/pull/9">https://github.com/oriansj/mes-m2/pull/9</a> </span></div><div class="line" id="204729"><span class="nick" style="color:#3c5b35"><a href="#204729" label="[20:47:29]">&lt;mihi&gt;</a></span><span class="message">OriansJ: Another pull request with the README update (comments from others are welcome here, too): <a rel="nofollow" href="https://github.com/oriansj/mes-m2/pull/10">https://github.com/oriansj/mes-m2/pull/10</a> </span></div><div class="line" id="205522"><span class="nick" style="color:#8dd3c7"><a href="#205522" label="[20:55:22]">&lt;OriansJ&gt;</a></span><span class="message">janneke: as  M2-Planet doesn't support floating point at all but x86 does create floating point exceptions for divide by zero. I'd look at modulus and divide operations</span></div><div class="line" id="205716"><span class="nick" style="color:#8dd3c7"><a href="#205716" label="[20:57:16]">&lt;OriansJ&gt;</a></span><span class="message">mihi: merged</span></div><div class="line" id="205811"><span class="nick" style="color:#389600"><a href="#205811" label="[20:58:11]">&lt;nimaje&gt;</a></span><span class="message">line 63 in the readme update seems to miss a space after $</span></div><div class="line" id="205951"><span class="nick" style="color:#389600"><a href="#205951" label="[20:59:51]">&lt;nimaje&gt;</a></span><span class="message">iirc only lines starting with one or more # are section headers in markdown, and doing a underline with some symbol doesn't create a section header</span></div><div class="line" id="210011"><span class="nick" style="color:#d9d9d9"><a href="#210011" label="[21:00:11]">&lt;janneke&gt;</a></span><span class="message">OriansJ: thanks, i'll narrow this bug down first then</span></div><div class="line" id="210027"><span class="nick" style="color:#3c5b35"><a href="#210027" label="[21:00:27]">&lt;mihi&gt;</a></span><span class="message">nimaje, thanks, OriansJ was faster with merging :)</span></div><div class="line" id="210042"><span class="nick" style="color:#d9d9d9"><a href="#210042" label="[21:00:42]">&lt;janneke&gt;</a></span><span class="message">OriansJ: a propos collective scheme, i feel we already contributed a lot to eachother's work</span></div><div class="line" id="210121"><span class="nick" style="color:#d9d9d9"><a href="#210121" label="[21:01:21]">&lt;janneke&gt;</a></span><span class="message">eg, i used gnu indent a couple of times to backport work you did in your fork</span></div><div class="line" id="210143"><span class="nick" style="color:#d9d9d9"><a href="#210143" label="[21:01:43]">&lt;janneke&gt;</a></span><span class="message">notably for the untangling of src/*.c</span></div><div class="line" id="210222"><span class="nick" style="color:#3c5b35"><a href="#210222" label="[21:02:22]">&lt;mihi&gt;</a></span><span class="message">nimaje, you can look at the rich diff <a rel="nofollow" href="https://github.com/oriansj/mes-m2/pull/10/commits/2650b6434a366e2cf21b90c5dc0a6cead24b5646?short_path=b335630#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5">https://github.com/oriansj/mes-m2/pull/10/commits/2650b6434a366e2cf21b90c5dc0a6cead24b5646?short_path=b335630#diff-b335630551682c19a781afebcf4d07bf978fb1f8ac04c6bf87428ed5106870f5</a> </span></div><div class="line" id="210231"><span class="nick" style="color:#3c5b35"><a href="#210231" label="[21:02:31]">&lt;mihi&gt;</a></span><span class="message">and both ==== and ---- if alone on a line will create headings in Markdown</span></div><div class="line" id="210251"><span class="nick" style="color:#3c5b35"><a href="#210251" label="[21:02:51]">&lt;mihi&gt;</a></span><span class="message">and in my experience they stand out better when reading the same file in a text editor</span></div><div class="line" id="210256"><span class="nick" style="color:#d9d9d9"><a href="#210256" label="[21:02:56]">&lt;janneke&gt;</a></span><span class="message">also, i really liked your ideas/work on mes-m2, epecially using a single, simple signature for SCM procedures</span></div><div class="line" id="210337"><span class="nick" style="color:#bc80bd"><a href="#210337" label="[21:03:37]">*</a></span><span class="message">mihi got disconnected again. Seems the new wifi repeater that Santa brought is faster, but sometimes flaky...</span></div><div class="line" id="210338"><span class="nick" style="color:#d9d9d9"><a href="#210338" label="[21:03:38]">&lt;janneke&gt;</a></span><span class="message">i think we mustn't be discouraged or get impatient</span></div><div class="line" id="210528"><span class="nick" style="color:#3c5b35"><a href="#210528" label="[21:05:28]">&lt;mihi&gt;</a></span><span class="message">nimaje, <a rel="nofollow" href="https://spec.commonmark.org/0.29/#setext-headings">https://spec.commonmark.org/0.29/#setext-headings</a> </span></div><div class="line" id="210548"><span class="nick" style="color:#3c5b35"><a href="#210548" label="[21:05:48]">&lt;mihi&gt;</a></span><span class="message">(I know CommonMark is not Markdown, just like Wireshark is not Ethereal)</span></div><div class="line" id="211230"><span class="nick" style="color:#d9d9d9"><a href="#211230" label="[21:12:30]">&lt;janneke&gt;</a></span><span class="message">OriansJ: being guile-compatible from the c level, etc.</span></div><div class="line" id="211857"><span class="nick" style="color:#389600"><a href="#211857" label="[21:18:57]">&lt;nimaje&gt;</a></span><span class="message">yes, it reads better, I just didn't know that that was added (rst also allows other symbols like ~ to be used, allowing more levels)</span></div><div class="line" id="225055"><span class="nick" style="color:#8dd3c7"><a href="#225055" label="[22:50:55]">&lt;senzilla&gt;</a></span><span class="message">What is the &quot;knight&quot; architecture referring to in the context of M2? Haven't seen that before...</span></div><div class="line" id="225225"><span class="nick" style="color:#2e2a4a"><a href="#225225" label="[22:52:25]">&lt;stikonas&gt;</a></span><span class="message">well, instruction set is described here <a rel="nofollow" href="https://github.com/oriansj/stage0/blob/master/Knight%20Reference/ISA_HEX_Map.org">https://github.com/oriansj/stage0/blob/master/Knight%20Reference/ISA_HEX_Map.org</a> </span></div><div class="line" id="225413"><span class="nick" style="color:#2e2a4a"><a href="#225413" label="[22:54:13]">&lt;stikonas&gt;</a></span><span class="message">I'm not sure where it's taken from</span></div><div class="line" id="225526"><span class="nick" style="color:#2e2a4a"><a href="#225526" label="[22:55:26]">&lt;stikonas&gt;</a></span><span class="message">is it related to <a rel="nofollow" href="https://en.wikipedia.org/wiki/Tom_Knight_">https://en.wikipedia.org/wiki/Tom_Knight_</a>(scientist)? </span></div><div class="line" id="231602"><span class="nick" style="color:#8dd3c7"><a href="#231602" label="[23:16:02]">&lt;senzilla&gt;</a></span><span class="message">I see, thanks!</span></div><div class="line" id="235613"><span class="nick" style="color:#80b1d3"><a href="#235613" label="[23:56:13]">&lt;xentrac&gt;</a></span><span class="message">if I understood OriansJ correctly, the Knight CPU was a product of a company (also called Knight) that went out of business in the 1970s</span></div><div class="line" id="235622"><span class="nick" style="color:#80b1d3"><a href="#235622" label="[23:56:22]">&lt;xentrac&gt;</a></span><span class="message">unrelated to Tom Knight</span></div><div class="line" id="235634"><span class="nick" style="color:#80b1d3"><a href="#235634" label="[23:56:34]">&lt;xentrac&gt;</a></span><span class="message">also, unrelated to Drew DeVault</span></div><br /></div></body></html>