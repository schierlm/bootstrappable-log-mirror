<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-12-07.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000314"><span class="nick" style="color:#389600"><a href="#000314" label="[00:03:14]">&lt;muurkha&gt;</a></span><span class="message">there are various ways you can screw that up, and as I understand it, Niagara did actually deliver on that expected performance</span></div><div class="line" id="000329"><span class="nick" style="color:#8dd3c7"><a href="#000329" label="[00:03:29]">&lt;oriansj&gt;</a></span><span class="message">muurkha: thank you for clarifying but I was speaking of single thread performance</span></div><div class="line" id="000532"><span class="nick" style="color:#8dd3c7"><a href="#000532" label="[00:05:32]">&lt;oriansj&gt;</a></span><span class="message">and it is definitely true in multi-threaded applications (which were integer heavy) saw significant performance relative to dual core OoO progessors</span></div><div class="line" id="000554"><span class="nick" style="color:#389600"><a href="#000554" label="[00:05:54]">&lt;muurkha&gt;</a></span><span class="message">significant performance relative?</span></div><div class="line" id="000653"><span class="nick" style="color:#8dd3c7"><a href="#000653" label="[00:06:53]">&lt;oriansj&gt;</a></span><span class="message">UltraSPARC T1 server ran 13.5 times faster than on an AMD Opteron server for MySQL benchmarks</span></div><div class="line" id="000712"><span class="nick" style="color:#389600"><a href="#000712" label="[00:07:12]">&lt;muurkha&gt;</a></span><span class="message">significant performance gains relative?</span></div><div class="line" id="000729"><span class="nick" style="color:#8dd3c7"><a href="#000729" label="[00:07:29]">&lt;oriansj&gt;</a></span><span class="message">yes</span></div><div class="line" id="000735"><span class="nick" style="color:#389600"><a href="#000735" label="[00:07:35]">&lt;muurkha&gt;</a></span><span class="message">aha</span></div><div class="line" id="000821"><span class="nick" style="color:#389600"><a href="#000821" label="[00:08:21]">&lt;muurkha&gt;</a></span><span class="message">anyway in 02006 single-threaded performance was significantly more critical than it is now</span></div><div class="line" id="000932"><span class="nick" style="color:#8dd3c7"><a href="#000932" label="[00:09:32]">&lt;oriansj&gt;</a></span><span class="message">which reminds me, the Verilog source code of the UltraSPARC T1 design is available under the GPL</span></div><div class="line" id="000937"><span class="nick" style="color:#389600"><a href="#000937" label="[00:09:37]">&lt;muurkha&gt;</a></span><span class="message">yes</span></div><div class="line" id="000953"><span class="nick" style="color:#389600"><a href="#000953" label="[00:09:53]">&lt;muurkha&gt;</a></span><span class="message">that is not very useful</span></div><div class="line" id="001000"><span class="nick" style="color:#8dd3c7"><a href="#001000" label="[00:10:00]">&lt;oriansj&gt;</a></span><span class="message">so certainly something we could use if we had fabs</span></div><div class="line" id="001047"><span class="nick" style="color:#8dd3c7"><a href="#001047" label="[00:10:47]">&lt;oriansj&gt;</a></span><span class="message">although register windows were in retrospect a  bad idea.</span></div><div class="line" id="002740"><span class="nick" style="color:#389600"><a href="#002740" label="[00:27:40]">&lt;muurkha&gt;</a></span><span class="message">especially with a barrel processor!</span></div><div class="line" id="003058"><span class="nick" style="color:#8dd3c7"><a href="#003058" label="[00:30:58]">&lt;oriansj&gt;</a></span><span class="message">nothing like having 1024*${pipeline stages} registers</span></div><div class="line" id="013550"><span class="nick" style="color:#389600"><a href="#013550" label="[01:35:50]">&lt;muurkha&gt;</a></span><span class="message">yeah, exactly</span></div><div class="line" id="013615"><span class="nick" style="color:#389600"><a href="#013615" label="[01:36:15]">&lt;muurkha&gt;</a></span><span class="message">I wonder if a 6502-like design might make more sense in that context</span></div><div class="line" id="015223"><span class="nick" style="color:#8dd3c7"><a href="#015223" label="[01:52:23]">&lt;oriansj&gt;</a></span><span class="message">well assuming a relatively short pipeline (14 or less stages) and less than 24 registers; you can get register sets of equal size to modern OoO processors.</span></div><div class="line" id="015317"><span class="nick" style="color:#8dd3c7"><a href="#015317" label="[01:53:17]">&lt;oriansj&gt;</a></span><span class="message">but 14*9KB of L1 isn't ideal</span></div><div class="line" id="015404"><span class="nick" style="color:#389600"><a href="#015404" label="[01:54:04]">&lt;muurkha&gt;</a></span><span class="message">the Tera MTA didn't have any L1 or indeed any cache at all because it was a 128-thread barrel processor</span></div><div class="line" id="015604"><span class="nick" style="color:#389600"><a href="#015604" label="[01:56:04]">&lt;muurkha&gt;</a></span><span class="message">suppose you're running at 4 GHz with 64 banks of SDRAM each of which can send you an arbitrary memory word in a latency of 80ns, plus another 80ns for the crossbar mesh that connects the processor to the RAM</span></div><div class="line" id="015822"><span class="nick" style="color:#389600"><a href="#015822" label="[01:58:22]">&lt;muurkha&gt;</a></span><span class="message">if you have 1024 threads active, each thread only runs one instruction every 256 nanoseconds.  That means it can issue a memory read in one instruction and always get the result in the very next instruction.</span></div><div class="line" id="015953"><span class="nick" style="color:#389600"><a href="#015953" label="[01:59:53]">&lt;muurkha&gt;</a></span><span class="message">in that situation, what's the advantage of reading from a register instead of reading from memory?</span></div><div class="line" id="020113"><span class="nick" style="color:#389600"><a href="#020113" label="[02:01:13]">&lt;muurkha&gt;</a></span><span class="message">just that it reduces the bandwidth required from the memory subsystem and the number of instruction bits.  It doesn't make your program run any faster.</span></div><div class="line" id="020451"><span class="nick" style="color:#389600"><a href="#020451" label="[02:04:51]">&lt;muurkha&gt;</a></span><span class="message">the bandwidth is important, though.  If you're running four instructions per nanosecond, and each instruction fetches an instruction word and two operands, you're fetching 12 memory words per nanosecond, 12000 per microsecond.  that ends up being a word from each memory bank every 5.3 ns in the 64-bank scenario I set up here, which I think is implausible</span></div><div class="line" id="023945"><span class="nick" style="color:#8dd3c7"><a href="#023945" label="[02:39:45]">&lt;oriansj&gt;</a></span><span class="message">muurkha: well if you feel that way; Texas Instruments TMS9900 only had 2 registers per core but used 16 words of address space pointed at by the Work Space pointer of RAM; which effectively makes for infinite register windows and no spill logic needed</span></div><div class="line" id="024046"><span class="nick" style="color:#389600"><a href="#024046" label="[02:40:46]">&lt;muurkha&gt;</a></span><span class="message">right, I was thinking of the 9900 a bit.  of course it was slow as hell because its RAM wasn't multibanked or crossbarred and its processor wasn't multithreaded</span></div><div class="line" id="024418"><span class="nick" style="color:#389600"><a href="#024418" label="[02:44:18]">&lt;muurkha&gt;</a></span><span class="message">the 6502 got a lot better performance than the 9900 with half the transistors with five registers, totaling 48 bits, or 56 if you count the flags, which is barely more than the 9900's 32 bits of on-chi pregisters</span></div><div class="line" id="030605"><span class="nick" style="color:#389600"><a href="#030605" label="[03:06:05]">&lt;muurkha&gt;</a></span><span class="message">actually the 9900 had an 11-bit status register with flags and an interrupt mask too, so 43 bits in all</span></div><div class="line" id="040050"><span class="nick" style="color:#8dd3c7"><a href="#040050" label="[04:00:50]">&lt;oriansj&gt;</a></span><span class="message">well the 6502 was also pipelined which is why a 1Mhz 6502 could hold its own against a 4Mhz z80</span></div><div class="line" id="040359"><span class="nick" style="color:#8dd3c7"><a href="#040359" label="[04:03:59]">&lt;oriansj&gt;</a></span><span class="message">but a barrel 9900 definitely would have been one hell of a 16bit processor but lack of a MMU would have resulted in a very buggy system (beyound the process problems that plagued that chip its entire life)</span></div><div class="line" id="040954"><span class="nick" style="color:#2e2a4a"><a href="#040954" label="[04:09:54]">&lt;Googulator&gt;</a></span><span class="message">Successful bootstrap on bare metal from USB flash drive using fossy's simplify branch confirmed.</span></div><div class="line" id="041204"><span class="nick" style="color:#389600"><a href="#041204" label="[04:12:04]">&lt;muurkha&gt;</a></span><span class="message">congratulations!</span></div><div class="line" id="041300"><span class="nick" style="color:#8dd3c7"><a href="#041300" label="[04:13:00]">&lt;oriansj&gt;</a></span><span class="message">Googulator: great work</span></div><div class="line" id="041327"><span class="nick" style="color:#389600"><a href="#041327" label="[04:13:27]">&lt;muurkha&gt;</a></span><span class="message">the 6502 was not pipelined; it just generated a faster internal clock and had better-designed internal control logic.  also a 1MHz 6502 is closer to a 2MHz Z80 than a 4MHz Z80</span></div><div class="line" id="041609"><span class="nick" style="color:#8dd3c7"><a href="#041609" label="[04:16:09]">&lt;oriansj&gt;</a></span><span class="message">the chip does some limited overlapping of fetching and execution; so you are correct that it is not fully pipelined</span></div><div class="line" id="041731"><span class="nick" style="color:#389600"><a href="#041731" label="[04:17:31]">&lt;muurkha&gt;</a></span><span class="message">I don't think it even overlaps fetching one instruction with executing the previous one; details on the state machine are at, for example, <a rel="nofollow" href="https://www.nesdev.org/wiki/Visual6502wiki/6502_Timing_States">https://www.nesdev.org/wiki/Visual6502wiki/6502_Timing_States</a> </span></div><div class="line" id="041905"><span class="nick" style="color:#389600"><a href="#041905" label="[04:19:05]">&lt;muurkha&gt;</a></span><span class="message">hmm, I guess it does, a little bit: &quot;The opcode remains undisturbed inside the IR all the way to the end of the next [T1] clock state ([T1] phase 2). This allows an instruction to do its last signal origination even during the fetching of its successor instruction by other circuits on the chip. These propagated last signals can perform the final operations of an instruction even one cycle later</span></div><div class="line" id="041911"><span class="nick" style="color:#389600"><a href="#041911" label="[04:19:11]">&lt;muurkha&gt;</a></span><span class="message">(T2 again) when the next instruction is in the IR.&quot;</span></div><div class="line" id="042046"><span class="nick" style="color:#389600"><a href="#042046" label="[04:20:46]">&lt;muurkha&gt;</a></span><span class="message">that seems like in fact a crucial aspect of being able to run some instructions in only two cycles instead of three or more.  thank you!  I was wrong about that</span></div><div class="line" id="042247"><span class="nick" style="color:#8dd3c7"><a href="#042247" label="[04:22:47]">&lt;oriansj&gt;</a></span><span class="message">thank you for the link, it is helpful</span></div><div class="line" id="042704"><span class="nick" style="color:#389600"><a href="#042704" label="[04:27:04]">&lt;muurkha&gt;</a></span><span class="message">the Z80 did have instructions that ran in four cycles, though, which I think is equivalent to the 6502's two, given the difference in how their clocks were generated</span></div><div class="line" id="042755"><span class="nick" style="color:#389600"><a href="#042755" label="[04:27:55]">&lt;muurkha&gt;</a></span><span class="message">perhaps fewer of them</span></div><div class="line" id="043050"><span class="nick" style="color:#8dd3c7"><a href="#043050" label="[04:30:50]">&lt;oriansj&gt;</a></span><span class="message">well; the z80 certainly did better on object assembly than the 6502 which worked better on array assembly</span></div><div class="line" id="043248"><span class="nick" style="color:#389600"><a href="#043248" label="[04:32:48]">&lt;muurkha&gt;</a></span><span class="message">hmm?</span></div><div class="line" id="043300"><span class="nick" style="color:#389600"><a href="#043300" label="[04:33:00]">&lt;muurkha&gt;</a></span><span class="message">what are those?</span></div><div class="line" id="043424"><span class="nick" style="color:#8dd3c7"><a href="#043424" label="[04:34:24]">&lt;oriansj&gt;</a></span><span class="message">if you wanted to represent a set of objects in assembly; in z80 you would be doing standard objects but in 6502 you would create a set of arrays.</span></div><div class="line" id="043503"><span class="nick" style="color:#389600"><a href="#043503" label="[04:35:03]">&lt;muurkha&gt;</a></span><span class="message">oh, you mean like structs?</span></div><div class="line" id="043515"><span class="nick" style="color:#8dd3c7"><a href="#043515" label="[04:35:15]">&lt;oriansj&gt;</a></span><span class="message">which makes direct assembly performance hard to compare as you would be writing quite different code if you wanted good performance on the chips</span></div><div class="line" id="043524"><span class="nick" style="color:#8dd3c7"><a href="#043524" label="[04:35:24]">&lt;oriansj&gt;</a></span><span class="message">bingo</span></div><div class="line" id="043548"><span class="nick" style="color:#389600"><a href="#043548" label="[04:35:48]">&lt;muurkha&gt;</a></span><span class="message">why would it matter?</span></div><div class="line" id="043635"><span class="nick" style="color:#389600"><a href="#043635" label="[04:36:35]">&lt;muurkha&gt;</a></span><span class="message">oh, because on the Z80 you had the HL register, which worked as a 16-bit pointer?</span></div><div class="line" id="043846"><span class="nick" style="color:#8dd3c7"><a href="#043846" label="[04:38:46]">&lt;oriansj&gt;</a></span><span class="message">and you wouldn't need to try to reload your pointer to your object list when getting values out of the object</span></div><div class="line" id="044146"><span class="nick" style="color:#389600"><a href="#044146" label="[04:41:46]">&lt;muurkha&gt;</a></span><span class="message">I've never actually written any Z80 or 6502 code</span></div><div class="line" id="044215"><span class="nick" style="color:#389600"><a href="#044215" label="[04:42:15]">&lt;muurkha&gt;</a></span><span class="message">although a Z80 was the first computer I programmed, I programmed it only in BASIC</span></div><div class="line" id="044246"><span class="nick" style="color:#8dd3c7"><a href="#044246" label="[04:42:46]">&lt;oriansj&gt;</a></span><span class="message">fair enough, you can get the feel for it on x86 assembly if you limit yourself to only 2-3 registers</span></div><div class="line" id="044821"><span class="nick" style="color:#8dd3c7"><a href="#044821" label="[04:48:21]">&lt;oriansj&gt;</a></span><span class="message">and the 6502 stack was only 256bytes in size; so you needed to play games to work  around that.</span></div><div class="line" id="044943"><span class="nick" style="color:#389600"><a href="#044943" label="[04:49:43]">&lt;muurkha&gt;</a></span><span class="message">yeah</span></div><div class="line" id="044954"><span class="nick" style="color:#389600"><a href="#044954" label="[04:49:54]">&lt;muurkha&gt;</a></span><span class="message">I've read about it, I just haven't done it ;)</span></div><div class="line" id="045145"><span class="nick" style="color:#8dd3c7"><a href="#045145" label="[04:51:45]">&lt;oriansj&gt;</a></span><span class="message">there are still a great deal of tricks on shaving bytes off binaries; that I need to learn but atleast I feel I mastered clean object assembly</span></div><div class="line" id="045256"><span class="nick" style="color:#389600"><a href="#045256" label="[04:52:56]">&lt;muurkha&gt;</a></span><span class="message">the ARM assembler had some facilities for making struct-based assembly (I refuse to call it &quot;object assembly&quot;) easier to read and write</span></div><div class="line" id="045331"><span class="nick" style="color:#389600"><a href="#045331" label="[04:53:31]">&lt;muurkha&gt;</a></span><span class="message">you could define symbols for offsets, and in particular you could define a block of them so the assembler would assign the offsets</span></div><div class="line" id="045459"><span class="nick" style="color:#389600"><a href="#045459" label="[04:54:59]">&lt;muurkha&gt;</a></span><span class="message">when you defined them you had the option of also specifying a base register, so you could load field Foo of whatever register r3 was currently pointing at just by saying ldr r2, Foo</span></div><div class="line" id="045519"><span class="nick" style="color:#389600"><a href="#045519" label="[04:55:19]">&lt;muurkha&gt;</a></span><span class="message">which would get translated to something like ldr r2, [r3, #12]</span></div><div class="line" id="045637"><span class="nick" style="color:#8dd3c7"><a href="#045637" label="[04:56:37]">&lt;oriansj&gt;</a></span><span class="message">fair enough; <a rel="nofollow" href="https://sourceware.org/binutils/docs/as/Struct.html">https://sourceware.org/binutils/docs/as/Struct.html</a> </span></div><div class="line" id="045728"><span class="nick" style="color:#389600"><a href="#045728" label="[04:57:28]">&lt;muurkha&gt;</a></span><span class="message">yeah, the old ARM assembler was a little more convenient and less error-prone than that</span></div><div class="line" id="045836"><span class="nick" style="color:#8dd3c7"><a href="#045836" label="[04:58:36]">&lt;oriansj&gt;</a></span><span class="message">even M0 has something like that using creative DEFINEs</span></div><div class="line" id="045839"><span class="nick" style="color:#389600"><a href="#045839" label="[04:58:39]">&lt;muurkha&gt;</a></span><span class="message">it turns out gas macros are powerful enough to implement the ARM assembler facility though: <a rel="nofollow" href="http://canonical.org/~kragen/sw/dev3/mapfield.S">http://canonical.org/~kragen/sw/dev3/mapfield.S</a> </span></div><div class="line" id="045933"><span class="nick" style="color:#389600"><a href="#045933" label="[04:59:33]">&lt;muurkha&gt;</a></span><span class="message">except for the bit about including the register in the definition, which apparently you can't do</span></div><div class="line" id="045958"><span class="nick" style="color:#8dd3c7"><a href="#045958" label="[04:59:58]">&lt;oriansj&gt;</a></span><span class="message">that suprises me</span></div><div class="line" id="050015"><span class="nick" style="color:#8dd3c7"><a href="#050015" label="[05:00:15]">&lt;oriansj&gt;</a></span><span class="message">as gas macros are pretty powerful stuff</span></div><div class="line" id="050038"><span class="nick" style="color:#389600"><a href="#050038" label="[05:00:38]">&lt;muurkha&gt;</a></span><span class="message">maybe you could do it with the explicit CPS transformation</span></div><div class="line" id="050056"><span class="nick" style="color:#389600"><a href="#050056" label="[05:00:56]">&lt;muurkha&gt;</a></span><span class="message">basically the problem is that you can define two kinds of things in gas: labels and macros</span></div><div class="line" id="050139"><span class="nick" style="color:#389600"><a href="#050139" label="[05:01:39]">&lt;muurkha&gt;</a></span><span class="message">labels can only be defined as numbers, addresses, or other labels (which eventually bottom out in numbers or addresses)</span></div><div class="line" id="050200"><span class="nick" style="color:#389600"><a href="#050200" label="[05:02:00]">&lt;muurkha&gt;</a></span><span class="message">if you write, as in the example at the top there:</span></div><div class="line" id="050207"><span class="nick" style="color:#389600"><a href="#050207" label="[05:02:07]">&lt;muurkha&gt;</a></span><span class="message">LDR r0, Lab</span></div><div class="line" id="050302"><span class="nick" style="color:#389600"><a href="#050302" label="[05:03:02]">&lt;muurkha&gt;</a></span><span class="message">the only thing you can define Lab as is as a label.  but you want the instruction to expand out to LDR r0, [r9, #4], not LDR r0, somenumber, because that isn't valid assembly</span></div><div class="line" id="050345"><span class="nick" style="color:#389600"><a href="#050345" label="[05:03:45]">&lt;muurkha&gt;</a></span><span class="message">you could define a macro called something like LDF, for &quot;load field&quot;</span></div><div class="line" id="050348"><span class="nick" style="color:#389600"><a href="#050348" label="[05:03:48]">&lt;muurkha&gt;</a></span><span class="message">and invoke it as</span></div><div class="line" id="050356"><span class="nick" style="color:#389600"><a href="#050356" label="[05:03:56]">&lt;muurkha&gt;</a></span><span class="message">LDF r0, Lab</span></div><div class="line" id="050428"><span class="nick" style="color:#389600"><a href="#050428" label="[05:04:28]">&lt;muurkha&gt;</a></span><span class="message">or even WF, &quot;with field&quot;</span></div><div class="line" id="050438"><span class="nick" style="color:#389600"><a href="#050438" label="[05:04:38]">&lt;muurkha&gt;</a></span><span class="message">WF Lab LDR R0</span></div><div class="line" id="050441"><span class="nick" style="color:#389600"><a href="#050441" label="[05:04:41]">&lt;muurkha&gt;</a></span><span class="message">that's what I mean about the explicit CPS transformation</span></div><div class="line" id="050449"><span class="nick" style="color:#8dd3c7"><a href="#050449" label="[05:04:49]">&lt;oriansj&gt;</a></span><span class="message">indeed</span></div><div class="line" id="050516"><span class="nick" style="color:#389600"><a href="#050516" label="[05:05:16]">&lt;muurkha&gt;</a></span><span class="message">but there's no way to get the more understandable LDR r0, Lab to work, as far as I can tell</span></div><div class="line" id="050737"><span class="nick" style="color:#8dd3c7"><a href="#050737" label="[05:07:37]">&lt;oriansj&gt;</a></span><span class="message">well LDR isn't by default understandable despite being a standard</span></div><div class="line" id="050810"><span class="nick" style="color:#389600"><a href="#050810" label="[05:08:10]">&lt;muurkha&gt;</a></span><span class="message">I mean, if you already know what LDR means, it's helpful to be able to see that the instruction is an LDR</span></div><div class="line" id="053214"><span class="nick" style="color:#8dd3c7"><a href="#053214" label="[05:32:14]">&lt;oriansj&gt;</a></span><span class="message">well once you invoke gas macros; you can't be sure LDR is an LDR or a macro named LDR</span></div><div class="line" id="053457"><span class="nick" style="color:#389600"><a href="#053457" label="[05:34:57]">&lt;muurkha&gt;</a></span><span class="message">I'm not sure how to make that work</span></div><div class="line" id="053515"><span class="nick" style="color:#389600"><a href="#053515" label="[05:35:15]">&lt;muurkha&gt;</a></span><span class="message">because ultimately it does have to emit the instruction named LDR, right?</span></div><div class="line" id="072622"><span class="nick" style="color:#2e2a4a"><a href="#072622" label="[07:26:22]">&lt;Googulator&gt;</a></span><span class="message">currently testing another patch to builder-hex0 for USB boot on a stubborn motherboard</span></div><div class="line" id="072655"><span class="nick" style="color:#2e2a4a"><a href="#072655" label="[07:26:55]">&lt;Googulator&gt;</a></span><span class="message">on this board, int 13h needs pushad/popad around it, and only LBA is supported</span></div><div class="line" id="073101"><span class="nick" style="color:#2e2a4a"><a href="#073101" label="[07:31:01]">&lt;Googulator&gt;</a></span><span class="message">oriansj: do we need to support any board with a CHS-only BIOS (one with no int 13h extensions)?</span></div><div class="line" id="073109"><span class="nick" style="color:#2e2a4a"><a href="#073109" label="[07:31:09]">&lt;Googulator&gt;</a></span><span class="message">AFAIK that would be pre-1997</span></div><div class="line" id="140002"><span class="nick" style="color:#8dd3c7"><a href="#140002" label="[14:00:02]">&lt;oriansj&gt;</a></span><span class="message">muurkha: nope, you can get it to mean any instruction you want; the problem ultimately means subversive assembly</span></div><div class="line" id="140114"><span class="nick" style="color:#8dd3c7"><a href="#140114" label="[14:01:14]">&lt;oriansj&gt;</a></span><span class="message">Googulator: need =&gt; no; nice to have =&gt; yes; but right now the bootstrap uses a good bit more resources than older computers can provide.</span></div><div class="line" id="140250"><span class="nick" style="color:#8dd3c7"><a href="#140250" label="[14:02:50]">&lt;oriansj&gt;</a></span><span class="message">nothing more horrid than realizing mov eax, ebx in your assembly file does not actually result in a mov instruction nor touch the eax or ebx registers</span></div><div class="line" id="162626"><span class="nick" style="color:#2e2a4a"><a href="#162626" label="[16:26:26]">&lt;Googulator&gt;</a></span><span class="message">Looks like my last USB-boot-on-stubborn-board test came to a conclusion: don't bootstrap on random Kingston USB drives you got for free :(</span></div><div class="line" id="162631"><span class="nick" style="color:#2e2a4a"><a href="#162631" label="[16:26:31]">&lt;Googulator&gt;</a></span><span class="message">at least not with swap enabled</span></div><div class="line" id="162645"><span class="nick" style="color:#2e2a4a"><a href="#162645" label="[16:26:45]">&lt;Googulator&gt;</a></span><span class="message">looks like it killed the flash</span></div><div class="line" id="162741"><span class="nick" style="color:#2e2a4a"><a href="#162741" label="[16:27:41]">&lt;Googulator&gt;</a></span><span class="message">tbh, I was a bit worried about this, since this drive has always had terrible write performance, and especially low write IOPS</span></div><div class="line" id="162752"><span class="nick" style="color:#2e2a4a"><a href="#162752" label="[16:27:52]">&lt;Googulator&gt;</a></span><span class="message">suggesting high write amplification or just general crappy flash</span></div><div class="line" id="162834"><span class="nick" style="color:#2e2a4a"><a href="#162834" label="[16:28:34]">&lt;Googulator&gt;</a></span><span class="message">moral of the story: check write IOPS on any Flash-based drive you plan to bootstrap on</span></div><div class="line" id="164334"><span class="nick" style="color:#389600"><a href="#164334" label="[16:43:34]">&lt;muurkha&gt;</a></span><span class="message">yeah, swap is hard on flash</span></div><div class="line" id="164425"><span class="nick" style="color:#389600"><a href="#164425" label="[16:44:25]">&lt;muurkha&gt;</a></span><span class="message">sounds like you had an annoying day</span></div><div class="line" id="164511"><span class="nick" style="color:#2e2a4a"><a href="#164511" label="[16:45:11]">&lt;Googulator&gt;</a></span><span class="message">Well, the test did get far enough to show that my next round of builder-hex0 fixes does work</span></div><div class="line" id="165001"><span class="nick" style="color:#2e2a4a"><a href="#165001" label="[16:50:01]">&lt;Googulator&gt;</a></span><span class="message">I had to switch to LBA also in stage1, and wrap the int 13h call into pushad/popad in both stages</span></div><div class="line" id="165021"><span class="nick" style="color:#2e2a4a"><a href="#165021" label="[16:50:21]">&lt;Googulator&gt;</a></span><span class="message">(Award BIOS really doesn't like CHS access on USB drives)</span></div><div class="line" id="165122"><span class="nick" style="color:#2e2a4a"><a href="#165122" label="[16:51:22]">&lt;Googulator&gt;</a></span><span class="message">&quot;To use LBA addressing with INT 0x13, you need to use a command in the &quot;INT13h Extensions&quot;. *Every BIOS since the mid-90's supports the extensions,* but you may want to verify that they are supported anyway.&quot;</span></div><div class="line" id="165148"><span class="nick" style="color:#2e2a4a"><a href="#165148" label="[16:51:48]">&lt;Googulator&gt;</a></span><span class="message">IMO that's about as far as it's worth going back in time to support.</span></div><div class="line" id="165245"><span class="nick" style="color:#2e2a4a"><a href="#165245" label="[16:52:45]">&lt;Googulator&gt;</a></span><span class="message">Anything pre-&quot;mid-90s&quot; will be a) too slow to reasonably bootstrap on, b) not able to address enough memory, and c) too easy to maliciously emulate using modern hardware</span></div><div class="line" id="165518"><span class="nick" style="color:#389600"><a href="#165518" label="[16:55:18]">&lt;muurkha&gt;</a></span><span class="message">not sure if bluepilling is easier or harder for older hardware; we aren't doing much that would stress a VM in particular</span></div><div class="line" id="165531"><span class="nick" style="color:#389600"><a href="#165531" label="[16:55:31]">&lt;muurkha&gt;</a></span><span class="message">it makes sense that you'd want to use LBA</span></div><div class="line" id="165600"><span class="nick" style="color:#389600"><a href="#165600" label="[16:56:00]">&lt;muurkha&gt;</a></span><span class="message">I mean <a rel="nofollow" href="https://en.wikipedia.org/wiki/Blue_Pill_">https://en.wikipedia.org/wiki/Blue_Pill_</a>(software) </span></div><div class="line" id="165617"><span class="nick" style="color:#2e2a4a"><a href="#165617" label="[16:56:17]">&lt;Googulator&gt;</a></span><span class="message">My concern isn't bluepilling</span></div><div class="line" id="165618"><span class="nick" style="color:#389600"><a href="#165618" label="[16:56:18]">&lt;muurkha&gt;</a></span><span class="message">I'd forgotten it was by Joanna Rootkowska</span></div><div class="line" id="165627"><span class="nick" style="color:#389600"><a href="#165627" label="[16:56:27]">&lt;muurkha&gt;</a></span><span class="message">what kind of malicious emulation do you mean?</span></div><div class="line" id="165933"><span class="nick" style="color:#2e2a4a"><a href="#165933" label="[16:59:33]">&lt;Googulator&gt;</a></span><span class="message">Some modern SoC or microcontroller design (not sure if e.g. the RP2040 would be powerful enough, but RK3568 surely is) faithfully emulating a Pentium MMX CPU until it hits some code it wants to backdoor, all packaged up to look convincingly like an actual Pentium MMX, and pin-compatible with it</span></div><div class="line" id="170003"><span class="nick" style="color:#2e2a4a"><a href="#170003" label="[17:00:03]">&lt;Googulator&gt;</a></span><span class="message">This is why I don't want to go back _too much_ in time</span></div><div class="line" id="170101"><span class="nick" style="color:#2e2a4a"><a href="#170101" label="[17:01:01]">&lt;Googulator&gt;</a></span><span class="message">(Pentium MMX appears to be the last platform where there's a risk of no LBA support in the BIOS)</span></div><div class="line" id="170356"><span class="nick" style="color:#2e2a4a"><a href="#170356" label="[17:03:56]">&lt;Googulator&gt;</a></span><span class="message">As I understand it, the &quot;knight&quot; ISA is based on Tom Knight's LISP machine design</span></div><div class="line" id="170447"><span class="nick" style="color:#2e2a4a"><a href="#170447" label="[17:04:47]">&lt;Googulator&gt;</a></span><span class="message">Which is an example of what I'd consider old enough to be vulnerable to such an &quot;evil clone&quot; attack</span></div><div class="line" id="185732"><span class="nick" style="color:#6b8072"><a href="#185732" label="[18:57:32]">&lt;Irvise_&gt;</a></span><span class="message">Hi all, long time no see :)</span></div><div class="line" id="185801"><span class="nick" style="color:#6b8072"><a href="#185801" label="[18:58:01]">&lt;Irvise_&gt;</a></span><span class="message">I would love to bring good news about the Ada bootstrap compiler, but pretty much nothing has happened...</span></div><div class="line" id="185822"><span class="nick" style="color:#6b8072"><a href="#185822" label="[18:58:22]">&lt;Irvise_&gt;</a></span><span class="message">Though I do come with a question that may easily be answered by someone here.</span></div><div class="line" id="185906"><span class="nick" style="color:#6b8072"><a href="#185906" label="[18:59:06]">&lt;Irvise_&gt;</a></span><span class="message">Has Erlang been bootstrapped? Afaik, it has not. The VM is in C, but the compiler is in Erlang and has been in Erlang even before V1.</span></div><div class="line" id="205438"><span class="nick" style="color:#80b1d3"><a href="#205438" label="[20:54:38]">&lt;Inline&gt;</a></span><span class="message">why are the bootstraps only 32bit ?</span></div><div class="line" id="205748"><span class="nick" style="color:#6b8072"><a href="#205748" label="[20:57:48]">&lt;Irvise_&gt;</a></span><span class="message">Inline: afaik, FiwixOS is 32-bit only. I do not know how that works for other arches that are not i386.</span></div><div class="line" id="210429"><span class="nick" style="color:#80b1d3"><a href="#210429" label="[21:04:29]">&lt;Inline&gt;</a></span><span class="message">i just got the git sources and hold on to the instructions, and it built me a gcc now and it is 32bit only, and i started it with --qemu option</span></div><div class="line" id="210450"><span class="nick" style="color:#80b1d3"><a href="#210450" label="[21:04:50]">&lt;Inline&gt;</a></span><span class="message">but i don't see anything mounted, dunno where the env is</span></div><div class="line" id="210539"><span class="nick" style="color:#80b1d3"><a href="#210539" label="[21:05:39]">&lt;Inline&gt;</a></span><span class="message">i mean it has /sys /proc/ etc. mounted but i don't see where the root of that shall be</span></div><div class="line" id="211447"><span class="nick" style="color:#6d2462"><a href="#211447" label="[21:14:47]">&lt;stikonas_&gt;</a></span><span class="message">Inline: a few reasons for 32-bits but none are really fundamental, just need work</span></div><div class="line" id="211534"><span class="nick" style="color:#234e69"><a href="#211534" label="[21:15:34]">&lt;stikonas&gt;</a></span><span class="message">in particular, mes was originally written only for x86 and since that just runs fine on current x86_64 machines, nobody ported it</span></div><div class="line" id="211607"><span class="nick" style="color:#80b1d3"><a href="#211607" label="[21:16:07]">&lt;Inline&gt;</a></span><span class="message">ok</span></div><div class="line" id="211610"><span class="nick" style="color:#234e69"><a href="#211610" label="[21:16:10]">&lt;stikonas&gt;</a></span><span class="message">we now have riscv64 port of mes that goes to bootstrappable tcc, so quite a few 64 bit bugs are solved</span></div><div class="line" id="211617"><span class="nick" style="color:#234e69"><a href="#211617" label="[21:16:17]">&lt;stikonas&gt;</a></span><span class="message">but probably not all</span></div><div class="line" id="211620"><span class="nick" style="color:#80b1d3"><a href="#211620" label="[21:16:20]">&lt;Inline&gt;</a></span><span class="message">i found the tmp/sysa/sysa.img</span></div><div class="line" id="211638"><span class="nick" style="color:#80b1d3"><a href="#211638" label="[21:16:38]">&lt;Inline&gt;</a></span><span class="message">that one is used for booting it seems, tho it only contains the DOS/MBR</span></div><div class="line" id="211642"><span class="nick" style="color:#234e69"><a href="#211642" label="[21:16:42]">&lt;stikonas&gt;</a></span><span class="message">I've tried running 64 bit amd64 bootstrap and it goes all the way to tcc-mes but that binary crashes</span></div><div class="line" id="211658"><span class="nick" style="color:#234e69"><a href="#211658" label="[21:16:58]">&lt;stikonas&gt;</a></span><span class="message">so probably once that step is resolved, things can progress much further on x86_64</span></div><div class="line" id="211706"><span class="nick" style="color:#80b1d3"><a href="#211706" label="[21:17:06]">&lt;Inline&gt;</a></span><span class="message">ok thank you</span></div><div class="line" id="211729"><span class="nick" style="color:#234e69"><a href="#211729" label="[21:17:29]">&lt;stikonas&gt;</a></span><span class="message">Inline: what do you mean only DOS/MBR?</span></div><div class="line" id="211735"><span class="nick" style="color:#234e69"><a href="#211735" label="[21:17:35]">&lt;stikonas&gt;</a></span><span class="message">no other data (like sources)?</span></div><div class="line" id="211822"><span class="nick" style="color:#80b1d3"><a href="#211822" label="[21:18:22]">&lt;Inline&gt;</a></span><span class="message">no no it has loads of sectors 33543719</span></div><div class="line" id="211838"><span class="nick" style="color:#234e69"><a href="#211838" label="[21:18:38]">&lt;stikonas&gt;</a></span><span class="message">yeah, that's good</span></div><div class="line" id="211839"><span class="nick" style="color:#80b1d3"><a href="#211839" label="[21:18:39]">&lt;Inline&gt;</a></span><span class="message">it's just what file sysa.img shows</span></div><div class="line" id="211856"><span class="nick" style="color:#80b1d3"><a href="#211856" label="[21:18:56]">&lt;Inline&gt;</a></span><span class="message">that's something around 4G not ?</span></div><div class="line" id="211931"><span class="nick" style="color:#80b1d3"><a href="#211931" label="[21:19:31]">&lt;Inline&gt;</a></span><span class="message">right</span></div><div class="line" id="211947"><span class="nick" style="color:#234e69"><a href="#211947" label="[21:19:47]">&lt;stikonas&gt;</a></span><span class="message">hmm, for me it shows 16 GB</span></div><div class="line" id="212007"><span class="nick" style="color:#234e69"><a href="#212007" label="[21:20:07]">&lt;stikonas&gt;</a></span><span class="message">and file indeed only says sysa.img: DOS/MBR boot sector</span></div><div class="line" id="212042"><span class="nick" style="color:#80b1d3"><a href="#212042" label="[21:20:42]">&lt;Inline&gt;</a></span><span class="message">right 16G my bad</span></div><div class="line" id="212105"><span class="nick" style="color:#80b1d3"><a href="#212105" label="[21:21:05]">&lt;Inline&gt;</a></span><span class="message">ok</span></div><div class="line" id="212211"><span class="nick" style="color:#234e69"><a href="#212211" label="[21:22:11]">&lt;stikonas&gt;</a></span><span class="message">well, it's mostly zeroes...</span></div><div class="line" id="212241"><span class="nick" style="color:#80b1d3"><a href="#212241" label="[21:22:41]">&lt;Inline&gt;</a></span><span class="message">df -h used: 2.3G avail 13G</span></div><div class="line" id="212246"><span class="nick" style="color:#80b1d3"><a href="#212246" label="[21:22:46]">&lt;Inline&gt;</a></span><span class="message">right</span></div><div class="line" id="212334"><span class="nick" style="color:#80b1d3"><a href="#212334" label="[21:23:34]">&lt;Inline&gt;</a></span><span class="message">it's gcc 13.1 version</span></div><div class="line" id="212348"><span class="nick" style="color:#80b1d3"><a href="#212348" label="[21:23:48]">&lt;Inline&gt;</a></span><span class="message">is there a reason why it stops there ?</span></div><div class="line" id="212403"><span class="nick" style="color:#234e69"><a href="#212403" label="[21:24:03]">&lt;stikonas&gt;</a></span><span class="message">well, that's where we got to</span></div><div class="line" id="212413"><span class="nick" style="color:#234e69"><a href="#212413" label="[21:24:13]">&lt;stikonas&gt;</a></span><span class="message">you can extend it...</span></div><div class="line" id="212416"><span class="nick" style="color:#80b1d3"><a href="#212416" label="[21:24:16]">&lt;Inline&gt;</a></span><span class="message">ok</span></div><div class="line" id="212421"><span class="nick" style="color:#234e69"><a href="#212421" label="[21:24:21]">&lt;stikonas&gt;</a></span><span class="message">e.g. FreedesktopSDK builds on top of that</span></div><div class="line" id="212438"><span class="nick" style="color:#234e69"><a href="#212438" label="[21:24:38]">&lt;stikonas&gt;</a></span><span class="message">but gcc 13 is not a bad place to get to</span></div><div class="line" id="212439"><span class="nick" style="color:#80b1d3"><a href="#212439" label="[21:24:39]">&lt;Inline&gt;</a></span><span class="message">where is FreedesktopSDK to be found ?</span></div><div class="line" id="212518"><span class="nick" style="color:#234e69"><a href="#212518" label="[21:25:18]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://gitlab.com/freedesktop-sdk/freedesktop-sdk/-/merge_requests/11557">https://gitlab.com/freedesktop-sdk/freedesktop-sdk/-/merge_requests/11557</a> </span></div><div class="line" id="212534"><span class="nick" style="color:#80b1d3"><a href="#212534" label="[21:25:34]">&lt;Inline&gt;</a></span><span class="message">thank you</span></div><div class="line" id="212630"><span class="nick" style="color:#234e69"><a href="#212630" label="[21:26:30]">&lt;stikonas&gt;</a></span><span class="message">that's what is used for most flatpaks</span></div><div class="line" id="212642"><span class="nick" style="color:#234e69"><a href="#212642" label="[21:26:42]">&lt;stikonas&gt;</a></span><span class="message">though they have some binary stuff, e.g. rust on top of it</span></div><div class="line" id="213003"><span class="nick" style="color:#234e69"><a href="#213003" label="[21:30:03]">&lt;stikonas&gt;</a></span><span class="message">hmm, I now think that my stage0-uefi issues are not due to header... something is probably wrong in the code...</span></div><div class="line" id="222749"><span class="nick" style="color:#234e69"><a href="#222749" label="[22:27:49]">&lt;stikonas&gt;</a></span><span class="message">Inline: by the way, did you have anything else in mind after GCC?</span></div><div class="line" id="222802"><span class="nick" style="color:#234e69"><a href="#222802" label="[22:28:02]">&lt;stikonas&gt;</a></span><span class="message">in principle it might be nice to build some distros</span></div><div class="line" id="222816"><span class="nick" style="color:#234e69"><a href="#222816" label="[22:28:16]">&lt;stikonas&gt;</a></span><span class="message">probably source based distros like Gentoo would be the easiest target</span></div><div class="line" id="223000"><span class="nick" style="color:#80b1d3"><a href="#223000" label="[22:30:00]">&lt;Inline&gt;</a></span><span class="message">no idea how to proceed on from here stikonas</span></div><div class="line" id="223011"><span class="nick" style="color:#234e69"><a href="#223011" label="[22:30:11]">&lt;stikonas&gt;</a></span><span class="message">depends on what you goal is</span></div><div class="line" id="223026"><span class="nick" style="color:#80b1d3"><a href="#223026" label="[22:30:26]">&lt;Inline&gt;</a></span><span class="message">so how would i for example install a distro like Gentoo ?</span></div><div class="line" id="223032"><span class="nick" style="color:#80b1d3"><a href="#223032" label="[22:30:32]">&lt;Inline&gt;</a></span><span class="message">or say Guix</span></div><div class="line" id="223044"><span class="nick" style="color:#234e69"><a href="#223044" label="[22:30:44]">&lt;stikonas&gt;</a></span><span class="message">well, Guix is much harder...</span></div><div class="line" id="223052"><span class="nick" style="color:#234e69"><a href="#223052" label="[22:30:52]">&lt;stikonas&gt;</a></span><span class="message">but Gentoo probably has some prefix setup script</span></div><div class="line" id="223101"><span class="nick" style="color:#234e69"><a href="#223101" label="[22:31:01]">&lt;stikonas&gt;</a></span><span class="message">I think sam_ knows this better</span></div><div class="line" id="223116"><span class="nick" style="color:#80b1d3"><a href="#223116" label="[22:31:16]">&lt;Inline&gt;</a></span><span class="message">hmmm</span></div><div class="line" id="223140"><span class="nick" style="color:#234e69"><a href="#223140" label="[22:31:40]">&lt;stikonas&gt;</a></span><span class="message">possibly <a rel="nofollow" href="https://gitweb.gentoo.org/repo/proj/prefix.git/plain/scripts/bootstrap-prefix.sh">https://gitweb.gentoo.org/repo/proj/prefix.git/plain/scripts/bootstrap-prefix.sh</a> </span></div><div class="line" id="223208"><span class="nick" style="color:#234e69"><a href="#223208" label="[22:32:08]">&lt;stikonas&gt;</a></span><span class="message">the problem with Guix is that even if you get upstream guix source, you'll still have to hack around it to try to avoid using its bootstrap seeds</span></div><div class="line" id="223221"><span class="nick" style="color:#80b1d3"><a href="#223221" label="[22:32:21]">&lt;Inline&gt;</a></span><span class="message">ok thank you</span></div><div class="line" id="223242"><span class="nick" style="color:#80b1d3"><a href="#223242" label="[22:32:42]">&lt;Inline&gt;</a></span><span class="message">so is that script above needed to be invoked from within the image ? or just outside of it ?</span></div><div class="line" id="223303"><span class="nick" style="color:#234e69"><a href="#223303" label="[22:33:03]">&lt;stikonas&gt;</a></span><span class="message">well, within the image</span></div><div class="line" id="223308"><span class="nick" style="color:#234e69"><a href="#223308" label="[22:33:08]">&lt;stikonas&gt;</a></span><span class="message">or in the after.sh hook</span></div><div class="line" id="223317"><span class="nick" style="color:#234e69"><a href="#223317" label="[22:33:17]">&lt;stikonas&gt;</a></span><span class="message">but I haven't tried it myself yet</span></div><div class="line" id="223339"><span class="nick" style="color:#80b1d3"><a href="#223339" label="[22:33:39]">&lt;Inline&gt;</a></span><span class="message">ok thank you</span></div><div class="line" id="233926"><span class="nick" style="color:#6c3d55"><a href="#233926" label="[23:39:26]">&lt;fossy&gt;</a></span><span class="message">Inline: the work with building distros on top of live-bootstrap is not yet really done</span></div><div class="line" id="234008"><span class="nick" style="color:#6c3d55"><a href="#234008" label="[23:40:08]">&lt;fossy&gt;</a></span><span class="message">core live-bootstrap has a goal of a modern toolchain, which is achieved, at some point you'll be able to plug things in on top of that, but .. not quite yet, as those things don't really exist :D</span></div><div class="line" id="234522"><span class="nick" style="color:#80b1d3"><a href="#234522" label="[23:45:22]">&lt;Inline&gt;</a></span><span class="message">thank you</span></div><br /></div></body></html>