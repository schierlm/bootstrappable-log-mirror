<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-07-10.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="003640"><span class="nick" style="color:#389600"><a href="#003640" label="[00:36:40]">&lt;oriansj&gt;</a></span><span class="message">hmmm uefi include hexedit;</span></div><div class="line" id="004018"><span class="nick" style="color:#389600"><a href="#004018" label="[00:40:18]">&lt;oriansj&gt;</a></span><span class="message">muurkha: well in Accelerando, it was the robot cat that did the bootstrapping so It wouldn't be our sort of bootstrap</span></div><div class="line" id="004037"><span class="nick" style="color:#389600"><a href="#004037" label="[00:40:37]">&lt;oriansj&gt;</a></span><span class="message">also if we really wanted to rule out hardware attacks, we could just make CPUs like the Monster6502</span></div><div class="line" id="004100"><span class="nick" style="color:#389600"><a href="#004100" label="[00:41:00]">&lt;oriansj&gt;</a></span><span class="message">10khz is fast enough to validate up to M2-Planet</span></div><div class="line" id="004440"><span class="nick" style="color:#8dd3c7"><a href="#004440" label="[00:44:40]">&lt;muurkha&gt;</a></span><span class="message">oriansj: the objective was specifically to defeat Kargerâ€“Thompson attacks though</span></div><div class="line" id="004640"><span class="nick" style="color:#389600"><a href="#004640" label="[00:46:40]">&lt;oriansj&gt;</a></span><span class="message">muurkha: Oh I am going way past that ^_^</span></div><div class="line" id="004714"><span class="nick" style="color:#8dd3c7"><a href="#004714" label="[00:47:14]">&lt;muurkha&gt;</a></span><span class="message">it's a start :)</span></div><div class="line" id="004714"><span class="nick" style="color:#389600"><a href="#004714" label="[00:47:14]">&lt;oriansj&gt;</a></span><span class="message">I plan on knowing how to grow silicon crystals and make my own lithography fab</span></div><div class="line" id="004740"><span class="nick" style="color:#8dd3c7"><a href="#004740" label="[00:47:40]">&lt;muurkha&gt;</a></span><span class="message">there may be other semiconductors that are more accessible to hydrothermal methods</span></div><div class="line" id="005027"><span class="nick" style="color:#8dd3c7"><a href="#005027" label="[00:50:27]">&lt;muurkha&gt;</a></span><span class="message">also, though Zeloof has shown that photolithography is a viable approach, there may be other approaches that are easier when mass production isn't part of the objective</span></div><div class="line" id="005051"><span class="nick" style="color:#8dd3c7"><a href="#005051" label="[00:50:51]">&lt;muurkha&gt;</a></span><span class="message">(maybe when it is, too, but especially when it isn't)</span></div><div class="line" id="005217"><span class="nick" style="color:#389600"><a href="#005217" label="[00:52:17]">&lt;oriansj&gt;</a></span><span class="message">got push *ALL* the bootstrapping limits</span></div><div class="line" id="010714"><span class="nick" style="color:#389600"><a href="#010714" label="[01:07:14]">&lt;oriansj&gt;</a></span><span class="message">^got^gotta^</span></div><div class="line" id="011058"><span class="nick" style="color:#8dd3c7"><a href="#011058" label="[01:10:58]">&lt;muurkha&gt;</a></span><span class="message">it'd be nice to not have to push materials fabrication limits, sigh</span></div><div class="line" id="034640"><span class="nick" style="color:#389600"><a href="#034640" label="[03:46:40]">&lt;oriansj&gt;</a></span><span class="message">muurkha: you'll never get matter compilers with that attitude ;-p</span></div><div class="line" id="035432"><span class="nick" style="color:#8dd3c7"><a href="#035432" label="[03:54:32]">&lt;muurkha&gt;</a></span><span class="message">on the contrary, I want to find the easiest, lowest-risk way to get matter compilers</span></div><div class="line" id="035553"><span class="nick" style="color:#8dd3c7"><a href="#035553" label="[03:55:53]">&lt;muurkha&gt;</a></span><span class="message">every materials fabrication limit I have to push is a risk of having to fail, abandon an approach completely, and find a different way</span></div><div class="line" id="042731"><span class="nick" style="color:#389600"><a href="#042731" label="[04:27:31]">&lt;oriansj&gt;</a></span><span class="message">muurkha: I think pushing of the cutting edge in technology is much like pushing the cutting edge in body shaping. Those who would be satisfied by having 6pack abs never will have them because they usually stop after abs start to become visible. Those who would be satisfied to no longer be obese might never see their toes again...</span></div><div class="line" id="042803"><span class="nick" style="color:#389600"><a href="#042803" label="[04:28:03]">&lt;oriansj&gt;</a></span><span class="message">If your goal isn't far past your goal, you'll never hit it</span></div><div class="line" id="133740"><span class="nick" style="color:#6b8072"><a href="#133740" label="[13:37:40]">&lt;mihi&gt;</a></span><span class="message">muurkha, re offlineos: I appreciate links about data preservation and archival projects, but I prefer projects who also track licensing information and let me e.g. only download publications that are licensed to be freely reproduced (unlike libgen which also contains lots of copyrighted works, without explicitly tagging them, and considering this a feature rather than a defect)</span></div><div class="line" id="154834"><span class="nick" style="color:#8dd3c7"><a href="#154834" label="[15:48:34]">&lt;muurkha&gt;</a></span><span class="message">oriansj: it's an interesting perspective</span></div><div class="line" id="154857"><span class="nick" style="color:#8dd3c7"><a href="#154857" label="[15:48:57]">&lt;muurkha&gt;</a></span><span class="message">mihi: yes, clearly legal data preservation projects have important advantages over illegal ones</span></div><div class="line" id="160023"><span class="nick" style="color:#389600"><a href="#160023" label="[16:00:23]">&lt;oriansj&gt;</a></span><span class="message">muurkha: well it has to do with psychological bias people have when expressing satisfaction when progressing on the satisfaction curve which has a geometricly increasing curve climbing cost.</span></div><div class="line" id="160403"><span class="nick" style="color:#389600"><a href="#160403" label="[16:04:03]">&lt;oriansj&gt;</a></span><span class="message">in financial terms, those who would be happy retiring in 60 years are those least likely to actually save up enough to actually retire after 60 years.</span></div><div class="line" id="161430"><span class="nick" style="color:#8dd3c7"><a href="#161430" label="[16:14:30]">&lt;muurkha&gt;</a></span><span class="message">yeah.  also though if your plan for retiring in 60 years involves five things nobody has ever been able to do, you're less likely to be able to carry out those plans than if it only involves one thing nobody has ever been able to do</span></div><div class="line" id="161447"><span class="nick" style="color:#8dd3c7"><a href="#161447" label="[16:14:47]">&lt;muurkha&gt;</a></span><span class="message">it's more likely still if it only involves things that are already known to be possible :)</span></div><div class="line" id="161602"><span class="nick" style="color:#389600"><a href="#161602" label="[16:16:02]">&lt;oriansj&gt;</a></span><span class="message">as we tend to future discount when we should to add interested to the future cost instead. So if you set the goal of $100K/year when you should be setting the goal of 328.1K/year to compensate for a 2% rate of inflation; you would be off the mark by a factor of 3</span></div><div class="line" id="161637"><span class="nick" style="color:#8dd3c7"><a href="#161637" label="[16:16:37]">&lt;muurkha&gt;</a></span><span class="message">that's an excellent point</span></div><div class="line" id="161806"><span class="nick" style="color:#8dd3c7"><a href="#161806" label="[16:18:06]">&lt;muurkha&gt;</a></span><span class="message">more generally, though, because plans are uncertain, you won't achieve everything you attempt</span></div><div class="line" id="161841"><span class="nick" style="color:#8dd3c7"><a href="#161841" label="[16:18:41]">&lt;muurkha&gt;</a></span><span class="message">of the things you plan, you will achieve less than you attempt to achieve, because some of your attempts will fail</span></div><div class="line" id="161857"><span class="nick" style="color:#8dd3c7"><a href="#161857" label="[16:18:57]">&lt;muurkha&gt;</a></span><span class="message">and we are exploring two consequences of that fact</span></div><div class="line" id="161940"><span class="nick" style="color:#389600"><a href="#161940" label="[16:19:40]">&lt;oriansj&gt;</a></span><span class="message">well I've noted 2/3rds of all potential paths explored in bootstrapping resulted in failure (it could even potentially be much higher than that)</span></div><div class="line" id="162018"><span class="nick" style="color:#8dd3c7"><a href="#162018" label="[16:20:18]">&lt;muurkha&gt;</a></span><span class="message">first, that if a single plan relies on the conjunction of achieving a number of difficult things, then that plan is extremely likely to fail, so it is better to reduce the number of difficult things on the path to success</span></div><div class="line" id="162055"><span class="nick" style="color:#8dd3c7"><a href="#162055" label="[16:20:55]">&lt;muurkha&gt;</a></span><span class="message">second, that if a single plan relies on the *disjunction* of achieving a number of difficult things, then that plan is more likely to succeed, so it is better to attempt a wide variety of difficult things so that some of them will succeed</span></div><div class="line" id="162056"><span class="nick" style="color:#389600"><a href="#162056" label="[16:20:56]">&lt;oriansj&gt;</a></span><span class="message">well I can't reduce the number of difficult problems on the path; I can only encourage more paths to be created</span></div><div class="line" id="162134"><span class="nick" style="color:#8dd3c7"><a href="#162134" label="[16:21:34]">&lt;muurkha&gt;</a></span><span class="message">when you're making a plan you are choosing which problems to attempt to tackle, aren't you?</span></div><div class="line" id="162215"><span class="nick" style="color:#389600"><a href="#162215" label="[16:22:15]">&lt;oriansj&gt;</a></span><span class="message">for bootstrapping: nope</span></div><div class="line" id="162319"><span class="nick" style="color:#389600"><a href="#162319" label="[16:23:19]">&lt;oriansj&gt;</a></span><span class="message">no grand plan, just a willingness to let other people present options to explore and move the needle in as many directions as possible</span></div><div class="line" id="162345"><span class="nick" style="color:#8dd3c7"><a href="#162345" label="[16:23:45]">&lt;muurkha&gt;</a></span><span class="message">well, when you're not making a plan, sometimes you aren't :)</span></div><div class="line" id="162410"><span class="nick" style="color:#8dd3c7"><a href="#162410" label="[16:24:10]">&lt;muurkha&gt;</a></span><span class="message">there's a whole interesting continuum between exploration and planning</span></div><div class="line" id="162437"><span class="nick" style="color:#389600"><a href="#162437" label="[16:24:37]">&lt;oriansj&gt;</a></span><span class="message">every grand plan in bootstrapping thus far has failed badly but the paths that looked fun always tended to produce more useful results</span></div><div class="line" id="162444"><span class="nick" style="color:#8dd3c7"><a href="#162444" label="[16:24:44]">&lt;muurkha&gt;</a></span><span class="message">yeah</span></div><div class="line" id="162501"><span class="nick" style="color:#8dd3c7"><a href="#162501" label="[16:25:01]">&lt;muurkha&gt;</a></span><span class="message">there are a number of problems on the way to matter compilers that seems straightforwardly solvable</span></div><div class="line" id="162507"><span class="nick" style="color:#8dd3c7"><a href="#162507" label="[16:25:07]">&lt;muurkha&gt;</a></span><span class="message">but haven't been solved</span></div><div class="line" id="162538"><span class="nick" style="color:#8dd3c7"><a href="#162538" label="[16:25:38]">&lt;muurkha&gt;</a></span><span class="message">but there are a number of other problems that seem potentially very tricky to solve</span></div><div class="line" id="162607"><span class="nick" style="color:#389600"><a href="#162607" label="[16:26:07]">&lt;oriansj&gt;</a></span><span class="message">and sometimes the solution to a hard to solve problem is just not solve it at all</span></div><div class="line" id="162615"><span class="nick" style="color:#8dd3c7"><a href="#162615" label="[16:26:15]">&lt;muurkha&gt;</a></span><span class="message">right</span></div><div class="line" id="162641"><span class="nick" style="color:#8dd3c7"><a href="#162641" label="[16:26:41]">&lt;muurkha&gt;</a></span><span class="message">which of those other problems turns out to be solvable has a strong effect on which of the straightforward ones is useful to solve</span></div><div class="line" id="162703"><span class="nick" style="color:#389600"><a href="#162703" label="[16:27:03]">&lt;oriansj&gt;</a></span><span class="message">making a robust and optimizing Compiler in assembly is a nearly impossible task, so we don't do that at all.</span></div><div class="line" id="162718"><span class="nick" style="color:#8dd3c7"><a href="#162718" label="[16:27:18]">&lt;muurkha&gt;</a></span><span class="message">it's been done, the first Fortran compiler was an example</span></div><div class="line" id="162727"><span class="nick" style="color:#8dd3c7"><a href="#162727" label="[16:27:27]">&lt;muurkha&gt;</a></span><span class="message">but that was five people working for two years</span></div><div class="line" id="162743"><span class="nick" style="color:#389600"><a href="#162743" label="[16:27:43]">&lt;oriansj&gt;</a></span><span class="message">vs cc_x86 being done in 24 hours</span></div><div class="line" id="162746"><span class="nick" style="color:#8dd3c7"><a href="#162746" label="[16:27:46]">&lt;muurkha&gt;</a></span><span class="message">right</span></div><div class="line" id="162806"><span class="nick" style="color:#8dd3c7"><a href="#162806" label="[16:28:06]">&lt;muurkha&gt;</a></span><span class="message">for a long time a number of people have been working on the &quot;diamondoid nanomachine&quot; approach to matter compilers, for exapmle</span></div><div class="line" id="162843"><span class="nick" style="color:#8dd3c7"><a href="#162843" label="[16:28:43]">&lt;muurkha&gt;</a></span><span class="message">but I think we can avoid solving that problem</span></div><div class="line" id="163018"><span class="nick" style="color:#389600"><a href="#163018" label="[16:30:18]">&lt;oriansj&gt;</a></span><span class="message">I hope so but I don't know what unavoidable problem solving must be addressed.</span></div><div class="line" id="163051"><span class="nick" style="color:#8dd3c7"><a href="#163051" label="[16:30:51]">&lt;muurkha&gt;</a></span><span class="message">yeah, I don't know if, for example, zone refining of silicon is on the shortest path</span></div><div class="line" id="163105"><span class="nick" style="color:#8dd3c7"><a href="#163105" label="[16:31:05]">&lt;muurkha&gt;</a></span><span class="message">but at least we know zone refining of silicon is a thing that can be done</span></div><div class="line" id="163143"><span class="nick" style="color:#8dd3c7"><a href="#163143" label="[16:31:43]">&lt;muurkha&gt;</a></span><span class="message">to the extent that you can do things at a small scale you will have a proportionally better result</span></div><div class="line" id="163321"><span class="nick" style="color:#8dd3c7"><a href="#163321" label="[16:33:21]">&lt;muurkha&gt;</a></span><span class="message">a matter compiler that can compile a copy of itself in six months would be a curiosity, rapidly crippled by laws to prevent its use for &quot;ghost guns&quot;, counterfeit money, etc.</span></div><div class="line" id="163353"><span class="nick" style="color:#8dd3c7"><a href="#163353" label="[16:33:53]">&lt;muurkha&gt;</a></span><span class="message">by contrast, a matter compiler that can compile a copy of itself in six minutes would end material poverty</span></div><div class="line" id="163402"><span class="nick" style="color:#389600"><a href="#163402" label="[16:34:02]">&lt;oriansj&gt;</a></span><span class="message">well a matter compiler that can compile a copy of itself in 4 years might flight low enough below the radar</span></div><div class="line" id="163418"><span class="nick" style="color:#8dd3c7"><a href="#163418" label="[16:34:18]">&lt;muurkha&gt;</a></span><span class="message">no, because after 40 years you still only have 1024 of them</span></div><div class="line" id="163426"><span class="nick" style="color:#389600"><a href="#163426" label="[16:34:26]">&lt;oriansj&gt;</a></span><span class="message">so?</span></div><div class="line" id="163438"><span class="nick" style="color:#8dd3c7"><a href="#163438" label="[16:34:38]">&lt;muurkha&gt;</a></span><span class="message">or 32 if you used them to create other things half the time</span></div><div class="line" id="163522"><span class="nick" style="color:#8dd3c7"><a href="#163522" label="[16:35:22]">&lt;muurkha&gt;</a></span><span class="message">in 40 years someone else will have delivered a better design</span></div><div class="line" id="163523"><span class="nick" style="color:#389600"><a href="#163523" label="[16:35:23]">&lt;oriansj&gt;</a></span><span class="message">I'd rather just invest for the future generations</span></div><div class="line" id="163550"><span class="nick" style="color:#389600"><a href="#163550" label="[16:35:50]">&lt;oriansj&gt;</a></span><span class="message">and use the 1024 to just build the better design</span></div><div class="line" id="163621"><span class="nick" style="color:#8dd3c7"><a href="#163621" label="[16:36:21]">&lt;muurkha&gt;</a></span><span class="message">the future generations will be using matter compilers that allow them to have one per household or one per family member rather than one per international consortium</span></div><div class="line" id="163627"><span class="nick" style="color:#389600"><a href="#163627" label="[16:36:27]">&lt;oriansj&gt;</a></span><span class="message">or more accurately ensure that 1024 of my friends have one too</span></div><div class="line" id="163708"><span class="nick" style="color:#8dd3c7"><a href="#163708" label="[16:37:08]">&lt;muurkha&gt;</a></span><span class="message">there's another advantage of speed of replication other than exponentially higher productivity</span></div><div class="line" id="163727"><span class="nick" style="color:#389600"><a href="#163727" label="[16:37:27]">&lt;oriansj&gt;</a></span><span class="message">of that I am quite certain</span></div><div class="line" id="163748"><span class="nick" style="color:#8dd3c7"><a href="#163748" label="[16:37:48]">&lt;muurkha&gt;</a></span><span class="message">which is that it allows quadratically higher learning</span></div><div class="line" id="163846"><span class="nick" style="color:#8dd3c7"><a href="#163846" label="[16:38:46]">&lt;muurkha&gt;</a></span><span class="message">if you find out about a bug in your design in a week rather than a month, you can try three more new buggy designs during the month, and you'll remember more of what you were doing when you wrote the bug at the time that you discover it</span></div><div class="line" id="163905"><span class="nick" style="color:#389600"><a href="#163905" label="[16:39:05]">&lt;oriansj&gt;</a></span><span class="message">if learning is in proportion to the number of matter compilers you have</span></div><div class="line" id="163908"><span class="nick" style="color:#8dd3c7"><a href="#163908" label="[16:39:08]">&lt;muurkha&gt;</a></span><span class="message">shortening feedback time is absolutely essential</span></div><div class="line" id="163931"><span class="nick" style="color:#8dd3c7"><a href="#163931" label="[16:39:31]">&lt;muurkha&gt;</a></span><span class="message">you mean, because more people can have one?</span></div><div class="line" id="163945"><span class="nick" style="color:#389600"><a href="#163945" label="[16:39:45]">&lt;oriansj&gt;</a></span><span class="message">indeed, more human minds working together</span></div><div class="line" id="163952"><span class="nick" style="color:#8dd3c7"><a href="#163952" label="[16:39:52]">&lt;muurkha&gt;</a></span><span class="message">I don't think it's closely proportionalâ€‰â€”â€‰MIT in the 01970s had a lot less computers than IBM did</span></div><div class="line" id="164021"><span class="nick" style="color:#8dd3c7"><a href="#164021" label="[16:40:21]">&lt;muurkha&gt;</a></span><span class="message">it's easy to waste enormous learning opportunities</span></div><div class="line" id="164037"><span class="nick" style="color:#389600"><a href="#164037" label="[16:40:37]">&lt;oriansj&gt;</a></span><span class="message">but a great deal more progress as more of the mind capacity was dedicated to learning</span></div><div class="line" id="164043"><span class="nick" style="color:#8dd3c7"><a href="#164043" label="[16:40:43]">&lt;muurkha&gt;</a></span><span class="message">right</span></div><div class="line" id="164049"><span class="nick" style="color:#8dd3c7"><a href="#164049" label="[16:40:49]">&lt;muurkha&gt;</a></span><span class="message">and certainly having more machines in the hands of more people creates the possibility of more learning</span></div><div class="line" id="164140"><span class="nick" style="color:#389600"><a href="#164140" label="[16:41:40]">&lt;oriansj&gt;</a></span><span class="message">and I'd rather have 10 matter compilers in the hands of 10 friends than 100K matter compilers in my own</span></div><div class="line" id="164144"><span class="nick" style="color:#8dd3c7"><a href="#164144" label="[16:41:44]">&lt;muurkha&gt;</a></span><span class="message">a shorter replication time means exponentially more matter compilers in people's hands at any given date</span></div><div class="line" id="164209"><span class="nick" style="color:#389600"><a href="#164209" label="[16:42:09]">&lt;oriansj&gt;</a></span><span class="message">but the number of minds willing to work together is a much harder problem</span></div><div class="line" id="164300"><span class="nick" style="color:#8dd3c7"><a href="#164300" label="[16:43:00]">&lt;muurkha&gt;</a></span><span class="message">for example, if you can shorten the replication time from 4 years to 3 years, then after 40 years you have 10321 matter compilers instead of 1024</span></div><div class="line" id="164318"><span class="nick" style="color:#8dd3c7"><a href="#164318" label="[16:43:18]">&lt;muurkha&gt;</a></span><span class="message">yeah, it's hard for the humans to work together</span></div><div class="line" id="164409"><span class="nick" style="color:#389600"><a href="#164409" label="[16:44:09]">&lt;oriansj&gt;</a></span><span class="message">and the odds of the idea needed to generate that improvement increases with the number of minds with access to matter compilers</span></div><div class="line" id="164437"><span class="nick" style="color:#8dd3c7"><a href="#164437" label="[16:44:37]">&lt;muurkha&gt;</a></span><span class="message">more realistically, if you can shorten the replication time from 7 days to 6, then after a year you have 2 quintillion matter compilers rather than 5 quadrillion</span></div><div class="line" id="164537"><span class="nick" style="color:#8dd3c7"><a href="#164537" label="[16:45:37]">&lt;muurkha&gt;</a></span><span class="message">yeah, it's important for the people involved to be using the matter compilers to work together rather than against one another</span></div><div class="line" id="164645"><span class="nick" style="color:#8dd3c7"><a href="#164645" label="[16:46:45]">&lt;muurkha&gt;</a></span><span class="message">I think that was a big part of IBM's problem: their customers were not very good at sharing information</span></div><div class="line" id="164757"><span class="nick" style="color:#389600"><a href="#164757" label="[16:47:57]">&lt;oriansj&gt;</a></span><span class="message">well, one of their customers was the State of Michigan; which is aggressive with training up partners</span></div><div class="line" id="164821"><span class="nick" style="color:#389600"><a href="#164821" label="[16:48:21]">&lt;oriansj&gt;</a></span><span class="message">If we know better, we tell the vendors we are paying.</span></div><div class="line" id="164826"><span class="nick" style="color:#8dd3c7"><a href="#164826" label="[16:48:26]">&lt;muurkha&gt;</a></span><span class="message">yeah, but Michigan wasn't competing against GM; Ford was</span></div><div class="line" id="164843"><span class="nick" style="color:#8dd3c7"><a href="#164843" label="[16:48:43]">&lt;muurkha&gt;</a></span><span class="message">most of IBM's customers were businesses</span></div><div class="line" id="164940"><span class="nick" style="color:#8dd3c7"><a href="#164940" label="[16:49:40]">&lt;muurkha&gt;</a></span><span class="message">and businesses maybe tend to err too far on the side of not attempting things that are not known to be possible</span></div><div class="line" id="164956"><span class="nick" style="color:#389600"><a href="#164956" label="[16:49:56]">&lt;oriansj&gt;</a></span><span class="message">and they didn't yet have the good idea of open sourcing their complement</span></div><div class="line" id="165002"><span class="nick" style="color:#8dd3c7"><a href="#165002" label="[16:50:02]">&lt;muurkha&gt;</a></span><span class="message">right</span></div><div class="line" id="165038"><span class="nick" style="color:#389600"><a href="#165038" label="[16:50:38]">&lt;oriansj&gt;</a></span><span class="message">So a million incompatible inventory tracking programs were developed and debugged instead of a single standard one which would have worked so much better</span></div><div class="line" id="165102"><span class="nick" style="color:#8dd3c7"><a href="#165102" label="[16:51:02]">&lt;muurkha&gt;</a></span><span class="message">I mean SHARE did do a fair bit!</span></div><div class="line" id="165257"><span class="nick" style="color:#389600"><a href="#165257" label="[16:52:57]">&lt;oriansj&gt;</a></span><span class="message">well the copyleft trick hadn't been developed yet</span></div><div class="line" id="165338"><span class="nick" style="color:#389600"><a href="#165338" label="[16:53:38]">&lt;oriansj&gt;</a></span><span class="message">and SHARE didn't exactly support the idea of portability to suit the needs of business</span></div><div class="line" id="165449"><span class="nick" style="color:#8dd3c7"><a href="#165449" label="[16:54:49]">&lt;muurkha&gt;</a></span><span class="message">didn't they?</span></div><div class="line" id="165527"><span class="nick" style="color:#389600"><a href="#165527" label="[16:55:27]">&lt;oriansj&gt;</a></span><span class="message">They appear to be very IBM centric</span></div><div class="line" id="165551"><span class="nick" style="color:#8dd3c7"><a href="#165551" label="[16:55:51]">&lt;muurkha&gt;</a></span><span class="message">well sure</span></div><div class="line" id="165602"><span class="nick" style="color:#389600"><a href="#165602" label="[16:56:02]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.share.org/">https://www.share.org/</a> </span></div><div class="line" id="165610"><span class="nick" style="color:#8dd3c7"><a href="#165610" label="[16:56:10]">&lt;muurkha&gt;</a></span><span class="message">but that still made them major pioneers of portability</span></div><div class="line" id="165629"><span class="nick" style="color:#389600"><a href="#165629" label="[16:56:29]">&lt;oriansj&gt;</a></span><span class="message">tell that to the DEC user groups</span></div><div class="line" id="165655"><span class="nick" style="color:#8dd3c7"><a href="#165655" label="[16:56:55]">&lt;muurkha&gt;</a></span><span class="message">remember that they predated the 360 by 10 years</span></div><div class="line" id="165818"><span class="nick" style="color:#8dd3c7"><a href="#165818" label="[16:58:18]">&lt;muurkha&gt;</a></span><span class="message">so even IBM itself had lots of incompatible lines of computers at the time</span></div><div class="line" id="165830"><span class="nick" style="color:#389600"><a href="#165830" label="[16:58:30]">&lt;oriansj&gt;</a></span><span class="message">well I guess you could consider being able to run on different products made by the same company as portability; then yeah, I guess I'd have to give you that</span></div><div class="line" id="165852"><span class="nick" style="color:#8dd3c7"><a href="#165852" label="[16:58:52]">&lt;muurkha&gt;</a></span><span class="message">also they pushed the development of high-level languages like PL/1</span></div><div class="line" id="165934"><span class="nick" style="color:#8dd3c7"><a href="#165934" label="[16:59:34]">&lt;muurkha&gt;</a></span><span class="message">because writing portable assembly between unrelated architectures is pretty difficult</span></div><div class="line" id="165941"><span class="nick" style="color:#8dd3c7"><a href="#165941" label="[16:59:41]">&lt;muurkha&gt;</a></span><span class="message">though SNOBOL was written that way</span></div><div class="line" id="165946"><span class="nick" style="color:#389600"><a href="#165946" label="[16:59:46]">&lt;oriansj&gt;</a></span><span class="message">PL/1 isn't a high-level language so much as an abortion bundled up and sold as is</span></div><div class="line" id="165955"><span class="nick" style="color:#8dd3c7"><a href="#165955" label="[16:59:55]">&lt;muurkha&gt;</a></span><span class="message">it's a lot more portable than 709 assembly</span></div><div class="line" id="170010"><span class="nick" style="color:#8dd3c7"><a href="#170010" label="[17:00:10]">&lt;muurkha&gt;</a></span><span class="message">even if the fetus meat isn't to your taste</span></div><div class="line" id="170104"><span class="nick" style="color:#8dd3c7"><a href="#170104" label="[17:01:04]">&lt;muurkha&gt;</a></span><span class="message">back to matter compilers, I think the closest existing human analogue is maybe bread starter cultures or houseplants</span></div><div class="line" id="170146"><span class="nick" style="color:#389600"><a href="#170146" label="[17:01:46]">&lt;oriansj&gt;</a></span><span class="message">granted but by then Lisp, COBOL, Fortran and  ALGOL 60 were all valid (and honestly better options)</span></div><div class="line" id="170217"><span class="nick" style="color:#8dd3c7"><a href="#170217" label="[17:02:17]">&lt;muurkha&gt;</a></span><span class="message">there were a lot of things you could do in PL/1 that you couldn't do in each of those languages</span></div><div class="line" id="170240"><span class="nick" style="color:#8dd3c7"><a href="#170240" label="[17:02:40]">&lt;muurkha&gt;</a></span><span class="message">for example, you could do COBOL things in PL/1 but not in Fortran, and you could do Fortran things in PL/1 but not in COBOL</span></div><div class="line" id="170303"><span class="nick" style="color:#8dd3c7"><a href="#170303" label="[17:03:03]">&lt;muurkha&gt;</a></span><span class="message">and LISP was hopeless for any kind of systems thing (it got better!)</span></div><div class="line" id="170336"><span class="nick" style="color:#389600"><a href="#170336" label="[17:03:36]">&lt;oriansj&gt;</a></span><span class="message">and people back then were smart enough to compile COBOL into an object file and Fortran into an object file and then just link them together.</span></div><div class="line" id="170352"><span class="nick" style="color:#8dd3c7"><a href="#170352" label="[17:03:52]">&lt;muurkha&gt;</a></span><span class="message">you generally couldn't do that, no</span></div><div class="line" id="170408"><span class="nick" style="color:#389600"><a href="#170408" label="[17:04:08]">&lt;oriansj&gt;</a></span><span class="message">really?</span></div><div class="line" id="170427"><span class="nick" style="color:#389600"><a href="#170427" label="[17:04:27]">&lt;oriansj&gt;</a></span><span class="message">compile to assembly and use the same assembler wasn't an option?</span></div><div class="line" id="170433"><span class="nick" style="color:#8dd3c7"><a href="#170433" label="[17:04:33]">&lt;muurkha&gt;</a></span><span class="message">I mean they used the same linker, yes, but different calling conventions and incompatible data types</span></div><div class="line" id="170443"><span class="nick" style="color:#8dd3c7"><a href="#170443" label="[17:04:43]">&lt;muurkha&gt;</a></span><span class="message">at least when they ran on the same machine, which they often didn't</span></div><div class="line" id="170455"><span class="nick" style="color:#8dd3c7"><a href="#170455" label="[17:04:55]">&lt;muurkha&gt;</a></span><span class="message">I like ALGOL 60 better than PL/1 but the other three are not really in the same league</span></div><div class="line" id="170508"><span class="nick" style="color:#8dd3c7"><a href="#170508" label="[17:05:08]">&lt;muurkha&gt;</a></span><span class="message">and ALGOL 60 left a lot of things outside the scope of the standard</span></div><div class="line" id="170515"><span class="nick" style="color:#389600"><a href="#170515" label="[17:05:15]">&lt;oriansj&gt;</a></span><span class="message">well the different calling conventions can be worked around with translator functions in assembly</span></div><div class="line" id="170534"><span class="nick" style="color:#8dd3c7"><a href="#170534" label="[17:05:34]">&lt;muurkha&gt;</a></span><span class="message">yeah, but at that point you might as well just use PL/1</span></div><div class="line" id="170538"><span class="nick" style="color:#389600"><a href="#170538" label="[17:05:38]">&lt;oriansj&gt;</a></span><span class="message">the incompatible data types requires a bit more work but is workable</span></div><div class="line" id="170552"><span class="nick" style="color:#80b1d3"><a href="#170552" label="[17:05:52]">&lt;unmatched-paren&gt;</a></span><span class="message">the fortran code would fight back :P &quot;ew you're trying to link me with cobol code?! gross!&quot;</span></div><div class="line" id="170556"><span class="nick" style="color:#8dd3c7"><a href="#170556" label="[17:05:56]">&lt;muurkha&gt;</a></span><span class="message">haha</span></div><div class="line" id="170631"><span class="nick" style="color:#8dd3c7"><a href="#170631" label="[17:06:31]">&lt;muurkha&gt;</a></span><span class="message">so the thing about houseplants and bread starter cultures is that they're not scarce</span></div><div class="line" id="170636"><span class="nick" style="color:#8dd3c7"><a href="#170636" label="[17:06:36]">&lt;muurkha&gt;</a></span><span class="message">because they self-replicate</span></div><div class="line" id="170640"><span class="nick" style="color:#389600"><a href="#170640" label="[17:06:40]">&lt;oriansj&gt;</a></span><span class="message">NEVER, pl/m is the only member of the PL/family that shouldn't have been shot and burned with fire</span></div><div class="line" id="170712"><span class="nick" style="color:#8dd3c7"><a href="#170712" label="[17:07:12]">&lt;muurkha&gt;</a></span><span class="message">also true of GCC, Linux, etc.</span></div><div class="line" id="170715"><span class="nick" style="color:#6d2462"><a href="#170715" label="[17:07:15]">&lt;stikonas&gt;</a></span><span class="message">bread started is not scarce because it's easy to create even without starter</span></div><div class="line" id="170737"><span class="nick" style="color:#8dd3c7"><a href="#170737" label="[17:07:37]">&lt;muurkha&gt;</a></span><span class="message">wild yeast doesn't taste the same as Herman</span></div><div class="line" id="170800"><span class="nick" style="color:#389600"><a href="#170800" label="[17:08:00]">&lt;oriansj&gt;</a></span><span class="message">Just grow tomatoes and put your dough next to the plants for 24 hours to get the yeasts you want</span></div><div class="line" id="170904"><span class="nick" style="color:#8dd3c7"><a href="#170904" label="[17:09:04]">&lt;muurkha&gt;</a></span><span class="message">but yeah yeast self-replicates so much that you can even use wild-caught yeast.  this is probably a situation we rather want to avoid with matter compilers</span></div><div class="line" id="170905"><span class="nick" style="color:#389600"><a href="#170905" label="[17:09:05]">&lt;oriansj&gt;</a></span><span class="message">Then split into batches with isolated culture groups; within 10 generations you should have a solid starter</span></div><div class="line" id="170933"><span class="nick" style="color:#8dd3c7"><a href="#170933" label="[17:09:33]">&lt;muurkha&gt;</a></span><span class="message">hadn't heard that about tomatoes</span></div><div class="line" id="170935"><span class="nick" style="color:#389600"><a href="#170935" label="[17:09:35]">&lt;oriansj&gt;</a></span><span class="message">well yeah, wild-caugh matter compilers are so hard to contain</span></div><div class="line" id="171008"><span class="nick" style="color:#80b1d3"><a href="#171008" label="[17:10:08]">&lt;unmatched-paren&gt;</a></span><span class="message">why do we need matter compilers?</span></div><div class="line" id="171037"><span class="nick" style="color:#8dd3c7"><a href="#171037" label="[17:10:37]">&lt;muurkha&gt;</a></span><span class="message">because material scarcity still causes enormous human misery, unmatched-paren</span></div><div class="line" id="171039"><span class="nick" style="color:#80b1d3"><a href="#171039" label="[17:10:39]">&lt;unmatched-paren&gt;</a></span><span class="message">Surely matter itself can't be compromised :)</span></div><div class="line" id="171045"><span class="nick" style="color:#389600"><a href="#171045" label="[17:10:45]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: we don't but it'll help with building what we need later</span></div><div class="line" id="171146"><span class="nick" style="color:#389600"><a href="#171146" label="[17:11:46]">&lt;oriansj&gt;</a></span><span class="message">as I know I'm not that great on a lathe and probably shouldn't be building a car engine by hand</span></div><div class="line" id="171318"><span class="nick" style="color:#80b1d3"><a href="#171318" label="[17:13:18]">&lt;unmatched-paren&gt;</a></span><span class="message">I see. I suppose you're not hoping to just conjure matter up from nothing, right?</span></div><div class="line" id="171340"><span class="nick" style="color:#389600"><a href="#171340" label="[17:13:40]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: not until we get something like zero-point energy working</span></div><div class="line" id="171408"><span class="nick" style="color:#389600"><a href="#171408" label="[17:14:08]">&lt;oriansj&gt;</a></span><span class="message">then we would have more energy than exists in this universe</span></div><div class="line" id="171424"><span class="nick" style="color:#6d2462"><a href="#171424" label="[17:14:24]">&lt;stikonas&gt;</a></span><span class="message">it might not be possible to harness zero-point energy</span></div><div class="line" id="171434"><span class="nick" style="color:#389600"><a href="#171434" label="[17:14:34]">&lt;oriansj&gt;</a></span><span class="message">probably</span></div><div class="line" id="171442"><span class="nick" style="color:#389600"><a href="#171442" label="[17:14:42]">&lt;oriansj&gt;</a></span><span class="message">or even create it</span></div><div class="line" id="171449"><span class="nick" style="color:#6d2462"><a href="#171449" label="[17:14:49]">&lt;stikonas&gt;</a></span><span class="message">well, it gets created all the time</span></div><div class="line" id="171453"><span class="nick" style="color:#6d2462"><a href="#171453" label="[17:14:53]">&lt;stikonas&gt;</a></span><span class="message">just not in very usable form</span></div><div class="line" id="171456"><span class="nick" style="color:#6d2462"><a href="#171456" label="[17:14:56]">&lt;stikonas&gt;</a></span><span class="message">as universe expands</span></div><div class="line" id="171501"><span class="nick" style="color:#6d2462"><a href="#171501" label="[17:15:01]">&lt;stikonas&gt;</a></span><span class="message">more and more space is created</span></div><div class="line" id="171502"><span class="nick" style="color:#8dd3c7"><a href="#171502" label="[17:15:02]">&lt;muurkha&gt;</a></span><span class="message">unmatched-paren: no, a matter compiler just rearranges existing matter, in the same way that a software compiler just changes the state of bits that were already part of your hard drive</span></div><div class="line" id="171523"><span class="nick" style="color:#6d2462"><a href="#171523" label="[17:15:23]">&lt;stikonas&gt;</a></span><span class="message">hence there is more of this dark energy (which we think might be zero-point energy)</span></div><div class="line" id="171610"><span class="nick" style="color:#8dd3c7"><a href="#171610" label="[17:16:10]">&lt;muurkha&gt;</a></span><span class="message">it doesn't create new matter</span></div><div class="line" id="171617"><span class="nick" style="color:#8dd3c7"><a href="#171617" label="[17:16:17]">&lt;muurkha&gt;</a></span><span class="message">it's just a 3-D printer</span></div><div class="line" id="171640"><span class="nick" style="color:#389600"><a href="#171640" label="[17:16:40]">&lt;oriansj&gt;</a></span><span class="message">that can 3-D print itself</span></div><div class="line" id="171643"><span class="nick" style="color:#8dd3c7"><a href="#171643" label="[17:16:43]">&lt;muurkha&gt;</a></span><span class="message">right</span></div><div class="line" id="171658"><span class="nick" style="color:#389600"><a href="#171658" label="[17:16:58]">&lt;oriansj&gt;</a></span><span class="message">(and ideally assembly the printed parts into a working copy of itself)</span></div><div class="line" id="171715"><span class="nick" style="color:#6d2462"><a href="#171715" label="[17:17:15]">&lt;stikonas&gt;</a></span><span class="message">anyway, back to current bootstrapping topics. oriansj: did you manage to figure out anything about PE header?</span></div><div class="line" id="171717"><span class="nick" style="color:#8dd3c7"><a href="#171717" label="[17:17:17]">&lt;muurkha&gt;</a></span><span class="message">yeah, hand assembly is not acceptable</span></div><div class="line" id="171807"><span class="nick" style="color:#6d2462"><a href="#171807" label="[17:18:07]">&lt;stikonas&gt;</a></span><span class="message">but first I'll probably start writing hex0.S for UEFI</span></div><div class="line" id="171939"><span class="nick" style="color:#389600"><a href="#171939" label="[17:19:39]">&lt;oriansj&gt;</a></span><span class="message">stikonas: not as much progress as I would have hoped but yeah, I should really get a proper hex2 PE header ready for you</span></div><div class="line" id="172037"><span class="nick" style="color:#6d2462"><a href="#172037" label="[17:20:37]">&lt;stikonas&gt;</a></span><span class="message">for building assembly, I guess I'll just use same C compiler (clang) that I used for building C prototype, since it natively supports UEFI target</span></div><div class="line" id="172340"><span class="nick" style="color:#389600"><a href="#172340" label="[17:23:40]">&lt;oriansj&gt;</a></span><span class="message">I guess I really need to crack the whip on getting you better starting bits</span></div><div class="line" id="172639"><span class="nick" style="color:#6d2462"><a href="#172639" label="[17:26:39]">&lt;stikonas&gt;</a></span><span class="message">well, next step would be .M0 file which I guess will need those header bits</span></div><div class="line" id="173121"><span class="nick" style="color:#8dd3c7"><a href="#173121" label="[17:31:21]">&lt;muurkha&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.homebrewcpuring.org/ringhome.html">https://www.homebrewcpuring.org/ringhome.html</a>  &quot;This is the homepage for the home-built computers web-ring.&quot;</span></div><div class="line" id="173150"><span class="nick" style="color:#389600"><a href="#173150" label="[17:31:50]">&lt;oriansj&gt;</a></span><span class="message">yep, and you'll need it for when we have M2-Planet + cc_* building C code</span></div><div class="line" id="173225"><span class="nick" style="color:#8dd3c7"><a href="#173225" label="[17:32:25]">&lt;muurkha&gt;</a></span><span class="message">it's missing the Pineapple ONE unfortunately</span></div><div class="line" id="173541"><span class="nick" style="color:#6d2462"><a href="#173541" label="[17:35:41]">&lt;stikonas&gt;</a></span><span class="message">oriansj: yes, but that's quite a bit later... We'll have to do a lot of form on M2libc...</span></div><div class="line" id="173653"><span class="nick" style="color:#6d2462"><a href="#173653" label="[17:36:53]">&lt;stikonas&gt;</a></span><span class="message">still with C prototypes for kaem and hex0 we basically have most of the information that we need on how UEFI works</span></div><div class="line" id="180128"><span class="nick" style="color:#389600"><a href="#180128" label="[18:01:28]">&lt;oriansj&gt;</a></span><span class="message">good</span></div><div class="line" id="214736"><span class="nick" style="color:#6d2462"><a href="#214736" label="[21:47:36]">&lt;stikonas&gt;</a></span><span class="message">oriansj: do you know if there is a nicer assembler directive for something like hello: .asciz &quot;H\0e\0l\0l\0o\0 \0w\0o\0r\0l\0d\0!\0\n\0\r\0\0&quot;</span></div><div class="line" id="215420"><span class="nick" style="color:#389600"><a href="#215420" label="[21:54:20]">&lt;oriansj&gt;</a></span><span class="message">well du 'Hello World',13,10 in fasm would be the cleaner one I saw</span></div><div class="line" id="215539"><span class="nick" style="color:#6d2462"><a href="#215539" label="[21:55:39]">&lt;stikonas&gt;</a></span><span class="message">yeah, that one I saw...</span></div><div class="line" id="215540"><span class="nick" style="color:#6d2462"><a href="#215540" label="[21:55:40]">&lt;stikonas&gt;</a></span><span class="message">hmm...</span></div><div class="line" id="215551"><span class="nick" style="color:#6d2462"><a href="#215551" label="[21:55:51]">&lt;stikonas&gt;</a></span><span class="message">anyway, we don't have many strings...</span></div><div class="line" id="215646"><span class="nick" style="color:#389600"><a href="#215646" label="[21:56:46]">&lt;oriansj&gt;</a></span><span class="message">few that actually have to be seen by the shell</span></div><br /></div></body></html>