<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2019-11-01.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="013324"><span class="nick" style="color:#8dd3c7"><a href="#013324" label="[01:33:24]">&lt;oriansj&gt;</a></span><span class="message">I finally figured it out!!!</span></div><div class="line" id="013516"><span class="nick" style="color:#8dd3c7"><a href="#013516" label="[01:35:16]">&lt;oriansj&gt;</a></span><span class="message">turns out rasm2 was wrong: rasm2 -a x86 -b 64 'xchg rax, rbx' is not 93 but rather 4893</span></div><div class="line" id="013541"><span class="nick" style="color:#8dd3c7"><a href="#013541" label="[01:35:41]">&lt;oriansj&gt;</a></span><span class="message">and the fixup.c in M2-Planet was not ever actually needed when that behavior is fixed</span></div><div class="line" id="013719"><span class="nick" style="color:#8dd3c7"><a href="#013719" label="[01:37:19]">&lt;oriansj&gt;</a></span><span class="message">also a minor note janneke !foo is only valid in M2-Planet if foo is a boolean (TRUE or FALSE)</span></div><div class="line" id="013830"><span class="nick" style="color:#8dd3c7"><a href="#013830" label="[01:38:30]">&lt;oriansj&gt;</a></span><span class="message">if you mean 0 == foo or NULL == foo; it is the M2-Planet way of expressing it as TRUE and FALSE may have alternate meanings than 0 or 1</span></div><div class="line" id="014030"><span class="nick" style="color:#8dd3c7"><a href="#014030" label="[01:40:30]">&lt;oriansj&gt;</a></span><span class="message">and with that I present mes-m2; passing the tests without issue</span></div><div class="line" id="015456"><span class="nick" style="color:#2e2a4a"><a href="#015456" label="[01:54:56]">&lt;xentrac&gt;</a></span><span class="message">doh</span></div><div class="line" id="015501"><span class="nick" style="color:#2e2a4a"><a href="#015501" label="[01:55:01]">&lt;xentrac&gt;</a></span><span class="message">congratulations!</span></div><div class="line" id="015906"><span class="nick" style="color:#8dd3c7"><a href="#015906" label="[01:59:06]">&lt;oriansj&gt;</a></span><span class="message">it is such a subtle detail that only showed up in division and I guess I never made the connection</span></div><div class="line" id="020029"><span class="nick" style="color:#8dd3c7"><a href="#020029" label="[02:00:29]">&lt;oriansj&gt;</a></span><span class="message">but once I saw rax having -3 and then rbx having 0xFFFFFFFD; I kinda had to stop and think because it seemed too obvious</span></div><div class="line" id="020113"><span class="nick" style="color:#2e2a4a"><a href="#020113" label="[02:01:13]">&lt;xentrac&gt;</a></span><span class="message">what kind of testing or verification strategy would have made bugs like that trivial to find?</span></div><div class="line" id="020127"><span class="nick" style="color:#8dd3c7"><a href="#020127" label="[02:01:27]">&lt;oriansj&gt;</a></span><span class="message">but there it was and objdump -d confirmed it; the wrong instruction encoding (the only objdump thought included EAX)</span></div><div class="line" id="020230"><span class="nick" style="color:#8dd3c7"><a href="#020230" label="[02:02:30]">&lt;oriansj&gt;</a></span><span class="message">probably a good fuzzer or random code generator</span></div><div class="line" id="020321"><span class="nick" style="color:#8dd3c7"><a href="#020321" label="[02:03:21]">&lt;oriansj&gt;</a></span><span class="message">basically alot of tests with known answers that forces one to look closer at individual assumptions in the C language.</span></div><div class="line" id="020555"><span class="nick" style="color:#8dd3c7"><a href="#020555" label="[02:05:55]">&lt;oriansj&gt;</a></span><span class="message">at the end of the day C compilers don't lend themselves to easy to find bugs; especially in regards to inline assembly or other abuse routes</span></div><div class="line" id="020638"><span class="nick" style="color:#2e2a4a"><a href="#020638" label="[02:06:38]">&lt;xentrac&gt;</a></span><span class="message">to use a random code generator you need to have some way to see that the result is wrong</span></div><div class="line" id="020659"><span class="nick" style="color:#2e2a4a"><a href="#020659" label="[02:06:59]">&lt;xentrac&gt;</a></span><span class="message">maybe you could assemble the same code with rasm2 and with a different assembler (sed | gas?)</span></div><div class="line" id="020728"><span class="nick" style="color:#2e2a4a"><a href="#020728" label="[02:07:28]">&lt;xentrac&gt;</a></span><span class="message">or assemble it with rasm2 and then disassemble it (with objdump or something) to verify round-tripping</span></div><div class="line" id="020800"><span class="nick" style="color:#8dd3c7"><a href="#020800" label="[02:08:00]">&lt;oriansj&gt;</a></span><span class="message">well one could use objdump -d to check if the assembled binary has the instruction encoding that rasm2 told you that was the case but there are instructions which both of them get wrong</span></div><div class="line" id="020845"><span class="nick" style="color:#8dd3c7"><a href="#020845" label="[02:08:45]">&lt;oriansj&gt;</a></span><span class="message">for example in Intel's own documentation there are 3 different answers for the exact same instruction</span></div><div class="line" id="020935"><span class="nick" style="color:#2e2a4a"><a href="#020935" label="[02:09:35]">&lt;xentrac&gt;</a></span><span class="message">yeah</span></div><div class="line" id="021023"><span class="nick" style="color:#8dd3c7"><a href="#021023" label="[02:10:23]">&lt;oriansj&gt;</a></span><span class="message">so perhaps designing with the assumption that we will get things wrong and plan in doing approximately the correct thing along the way</span></div><div class="line" id="021054"><span class="nick" style="color:#2e2a4a"><a href="#021054" label="[02:10:54]">&lt;xentrac&gt;</a></span><span class="message">I've found Hypothesis to be pretty amazing when I've used it</span></div><div class="line" id="021110"><span class="nick" style="color:#2e2a4a"><a href="#021110" label="[02:11:10]">&lt;xentrac&gt;</a></span><span class="message">but I still haven't adopted it for every project</span></div><div class="line" id="021210"><span class="nick" style="color:#8dd3c7"><a href="#021210" label="[02:12:10]">&lt;oriansj&gt;</a></span><span class="message">nice</span></div><div class="line" id="023640"><span class="nick" style="color:#2e2a4a"><a href="#023640" label="[02:36:40]">&lt;xentrac&gt;</a></span><span class="message"> <a rel="nofollow" href="https://blog.trailofbits.com/2019/10/31/destroying-x86_64-instruction-decoders-with-differential-fuzzing/">https://blog.trailofbits.com/2019/10/31/destroying-x86_64-instruction-decoders-with-differential-fuzzing/</a>  is potentially relevant</span></div><div class="line" id="075350"><span class="nick" style="color:#6b8072"><a href="#075350" label="[07:53:50]">&lt;janneke&gt;</a></span><span class="message">oriansj: ah, i did !know what was going on there :)</span></div><div class="line" id="075404"><span class="nick" style="color:#6b8072"><a href="#075404" label="[07:54:04]">&lt;janneke&gt;</a></span><span class="message">oriansj: this is fantastic news, many congrats!</span></div><div class="line" id="075447"><span class="nick" style="color:#6b8072"><a href="#075447" label="[07:54:47]">&lt;janneke&gt;</a></span><span class="message">i have been making some nice progress towards a future merge</span></div><div class="line" id="075546"><span class="nick" style="color:#6b8072"><a href="#075546" label="[07:55:46]">&lt;janneke&gt;</a></span><span class="message">pointer-based plain mes now passes all tests and starts to run with m2-planet</span></div><div class="line" id="075654"><span class="nick" style="color:#6b8072"><a href="#075654" label="[07:56:54]">&lt;janneke&gt;</a></span><span class="message">there is one last (yeah right, haha!) gc bug that i am struggling with that requires me to use a doubly sized arena for pointer-based cells</span></div><div class="line" id="151117"><span class="nick">***</span><span class="message notice">ng0_ is now known as ng0</span></div><div class="line" id="224252"><span class="nick">***</span><span class="message notice">edef is now known as edef2</span></div><div class="line" id="224540"><span class="nick">***</span><span class="message notice">edef2 is now known as edef</span></div><div class="line" id="231003"><span class="nick" style="color:#80b1d3"><a href="#231003" label="[23:10:03]">&lt;stikonas&gt;</a></span><span class="message">congratulations on passing all tests in mes-m2 :)</span></div><div class="line" id="231154"><span class="nick" style="color:#80b1d3"><a href="#231154" label="[23:11:54]">&lt;stikonas&gt;</a></span><span class="message">I guess there is still some work needed to run mescc.scm</span></div><div class="line" id="231717"><span class="nick" style="color:#8dd3c7"><a href="#231717" label="[23:17:17]">&lt;oriansj&gt;</a></span><span class="message">xentrac: thank you looks quite interesting</span></div><div class="line" id="231931"><span class="nick" style="color:#8dd3c7"><a href="#231931" label="[23:19:31]">&lt;oriansj&gt;</a></span><span class="message">janneke: well I was planning on replacing your scheme stack with something that should perform better and reduce your memory usage</span></div><div class="line" id="232033"><span class="nick" style="color:#8dd3c7"><a href="#232033" label="[23:20:33]">&lt;oriansj&gt;</a></span><span class="message">stikonas: absolutely and a boatload of more tests to be written and bugs before completion but I hope we can be done by Christmas if luck is on our side.</span></div><br /></div></body></html>