<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-07-07.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="002507"><span class="nick" style="color:#389600"><a href="#002507" label="[00:25:07]">&lt;oriansj&gt;</a></span><span class="message">well the hyper majority of the complexity in GCC and Clang is just dedicated to taking advantage of everything in an architecture that would result in better performance; I don't think as much effort was made to enhance -Os to produce optimally tiny binaries.</span></div><div class="line" id="003650"><span class="nick" style="color:#8dd3c7"><a href="#003650" label="[00:36:50]">&lt;muurkha&gt;</a></span><span class="message">yeah, one of the disappointments in the VAX was that some of the more complex instructions were actually slower than just generating the code to do it step-by-step</span></div><div class="line" id="003702"><span class="nick" style="color:#8dd3c7"><a href="#003702" label="[00:37:02]">&lt;muurkha&gt;</a></span><span class="message">even if it was VAX code and not ARM code</span></div><div class="line" id="003758"><span class="nick" style="color:#8dd3c7"><a href="#003758" label="[00:37:58]">&lt;muurkha&gt;</a></span><span class="message">if your code is fluffy it hurts both your cache hit rate on big machines and your ability to have functionality on small ones</span></div><div class="line" id="004029"><span class="nick" style="color:#8dd3c7"><a href="#004029" label="[00:40:29]">&lt;muurkha&gt;</a></span><span class="message">so there has been a distinctly nonzero amount of effort devoted to code density</span></div><div class="line" id="004716"><span class="nick" style="color:#8dd3c7"><a href="#004716" label="[00:47:16]">&lt;muurkha&gt;</a></span><span class="message">I spent a lot of last night studying the Cortex-M0 instruction set</span></div><div class="line" id="004737"><span class="nick" style="color:#8dd3c7"><a href="#004737" label="[00:47:37]">&lt;muurkha&gt;</a></span><span class="message">which only implements [most of] Thumb plus a little of Thumb2</span></div><div class="line" id="004753"><span class="nick" style="color:#8dd3c7"><a href="#004753" label="[00:47:53]">&lt;muurkha&gt;</a></span><span class="message">it's a lot denser than regular ARM code but also pretty limited</span></div><div class="line" id="045241"><span class="nick" style="color:#389600"><a href="#045241" label="[04:52:41]">&lt;oriansj&gt;</a></span><span class="message">muurkha: I don't need any of thumb or thumb2; just a 28 instructions (it would be less if they had divide and modulus instructions)</span></div><div class="line" id="053954"><span class="nick" style="color:#8dd3c7"><a href="#053954" label="[05:39:54]">&lt;muurkha&gt;</a></span><span class="message">28 instructions?</span></div><div class="line" id="055251"><span class="nick" style="color:#389600"><a href="#055251" label="[05:52:51]">&lt;oriansj&gt;</a></span><span class="message">yes, the processor would only need to support 28 instructions to run the stage0 steps</span></div><div class="line" id="055521"><span class="nick" style="color:#389600"><a href="#055521" label="[05:55:21]">&lt;oriansj&gt;</a></span><span class="message">such as bl label; push {r14}; ldr r0, [r8]; etc</span></div><div class="line" id="055924"><span class="nick" style="color:#8dd3c7"><a href="#055924" label="[05:59:24]">&lt;muurkha&gt;</a></span><span class="message">oh, I see</span></div><div class="line" id="060004"><span class="nick" style="color:#8dd3c7"><a href="#060004" label="[06:00:04]">&lt;muurkha&gt;</a></span><span class="message">it doesn't support any ARM instructions</span></div><div class="line" id="060017"><span class="nick" style="color:#8dd3c7"><a href="#060017" label="[06:00:17]">&lt;muurkha&gt;</a></span><span class="message">only thumb</span></div><div class="line" id="060316"><span class="nick" style="color:#389600"><a href="#060316" label="[06:03:16]">&lt;oriansj&gt;</a></span><span class="message">oh, then I guess I would need to a thumb only port to support it</span></div><div class="line" id="062351"><span class="nick" style="color:#8dd3c7"><a href="#062351" label="[06:23:51]">&lt;muurkha&gt;</a></span><span class="message">yeah</span></div><div class="line" id="062513"><span class="nick" style="color:#8dd3c7"><a href="#062513" label="[06:25:13]">&lt;muurkha&gt;</a></span><span class="message">heh, I wanted to see how GCC implements division on ARM, so I wrote a decimal print function called decout and compiled it.  it implemented division by 10 with multiplication by 0x66666667 and a bit of cleanup</span></div><div class="line" id="062558"><span class="nick" style="color:#8dd3c7"><a href="#062558" label="[06:25:58]">&lt;muurkha&gt;</a></span><span class="message">fine, so I'll rename it to basebout and pass a base parameter b, so it has to be variable at run time so it can't do that</span></div><div class="line" id="062628"><span class="nick" style="color:#8dd3c7"><a href="#062628" label="[06:26:28]">&lt;muurkha&gt;</a></span><span class="message">the assembly has a call to basebout.constprop.0 with the same code as before</span></div><div class="line" id="062713"><span class="nick" style="color:#8dd3c7"><a href="#062713" label="[06:27:13]">&lt;muurkha&gt;</a></span><span class="message">GCC produced a version of the function specialized for that constant parameter so it wouldn't have to divide at runtime</span></div><div class="line" id="062850"><span class="nick" style="color:#8dd3c7"><a href="#062850" label="[06:28:50]">&lt;muurkha&gt;</a></span><span class="message">there we go, bl __aeabi_idivmod</span></div><div class="line" id="105519"><span class="nick" style="color:#2e2a4a"><a href="#105519" label="[10:55:19]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://matrix.org/blog/2023/07/deportalling-libera-chat/">https://matrix.org/blog/2023/07/deportalling-libera-chat/</a> </span></div><div class="line" id="125202"><span class="nick" style="color:#389600"><a href="#125202" label="[12:52:02]">&lt;oriansj&gt;</a></span><span class="message">muurkha: to be fair M2libc has a function for division for armv7l (making use of a couple conditional instructions along the way for performance reasons) <a rel="nofollow" href="https://git.sr.ht/~oriansj/M2libc/tree/main/item/armv7l/libc-full.M1">https://git.sr.ht/~oriansj/M2libc/tree/main/item/armv7l/libc-full.M1</a>  and it probably isn't as optimal as what GCC has</span></div><div class="line" id="125241"><span class="nick" style="color:#389600"><a href="#125241" label="[12:52:41]">&lt;oriansj&gt;</a></span><span class="message">stikonas: so we need to plumb bootstrappable? ok, how does one do that?</span></div><div class="line" id="132105"><span class="nick" style="color:#2e2a4a"><a href="#132105" label="[13:21:05]">&lt;stikonas&gt;</a></span><span class="message">no idea...</span></div><div class="line" id="132120"><span class="nick" style="color:#2e2a4a"><a href="#132120" label="[13:21:20]">&lt;stikonas&gt;</a></span><span class="message">but we do have quite a lot of people connecting from matrix here</span></div><div class="line" id="132200"><span class="nick" style="color:#2e2a4a"><a href="#132200" label="[13:22:00]">&lt;stikonas&gt;</a></span><span class="message">looks like there will be a more detailed guide in the future</span></div><div class="line" id="132331"><span class="nick" style="color:#2e2a4a"><a href="#132331" label="[13:23:31]">&lt;stikonas&gt;</a></span><span class="message">(if we even decide to convert)</span></div><div class="line" id="150139"><span class="nick" style="color:#6b8072"><a href="#150139" label="[15:01:39]">&lt;jcmdln&gt;</a></span><span class="message">that will make it much harder to lurk here and pretend I understand everything</span></div><div class="line" id="150156"><span class="nick" style="color:#6b8072"><a href="#150156" label="[15:01:56]">&lt;jcmdln&gt;</a></span><span class="message">s/everything/anything</span></div><div class="line" id="161408"><span class="nick" style="color:#8dd3c7"><a href="#161408" label="[16:14:08]">&lt;muurkha&gt;</a></span><span class="message">GCC's is bulky</span></div><div class="line" id="161443"><span class="nick" style="color:#8dd3c7"><a href="#161443" label="[16:14:43]">&lt;muurkha&gt;</a></span><span class="message">but yeah probably several times faster</span></div><div class="line" id="235902"><span class="nick" style="color:#389600"><a href="#235902" label="[23:59:02]">&lt;oriansj&gt;</a></span><span class="message">jcmdln: no one here understands everything but by working together; collectively everything can be understood and achieved. (we are about where I expected it would take me about 30 years of work to do)</span></div><br /></div></body></html>