<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-02-29.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000502"><span class="nick" style="color:#389600"><a href="#000502" label="[00:05:02]">&lt;OriansJ`&gt;</a></span><span class="message">dddddd: The short circuit in M2-Planet will not be a small change but yes it is entirely valid for M2-Planet v2.x</span></div><div class="line" id="000643"><span class="nick" style="color:#389600"><a href="#000643" label="[00:06:43]">&lt;OriansJ`&gt;</a></span><span class="message">dddddd: as for the redundent begins; I was thinking of the current behavior of mes-m2; which might change depending upon if I find a good reason to do so</span></div><div class="line" id="001439"><span class="nick" style="color:#389600"><a href="#001439" label="[00:14:39]">&lt;OriansJ`&gt;</a></span><span class="message">fossy: I believe you deserve to be listed in the copyright header for kaem.c</span></div><div class="line" id="001447"><span class="nick" style="color:#8dd3c7"><a href="#001447" label="[00:14:47]">&lt;dddddd&gt;</a></span><span class="message">Well, that kind of surprise me. Maybe I read too much in your answer about the library available for M1.scm, as in everything available in guile 2 is OK for M1.scm, but I see your point OriansJ`</span></div><div class="line" id="001609"><span class="nick" style="color:#389600"><a href="#001609" label="[00:16:09]">&lt;OriansJ`&gt;</a></span><span class="message">dddddd: well remember I started M1.scm while I was writing mes-m2; So it is kind of hard to forget about mes-m2's restrictions while programming</span></div><div class="line" id="001652"><span class="nick" style="color:#8dd3c7"><a href="#001652" label="[00:16:52]">&lt;dddddd&gt;</a></span><span class="message">So, is it unintended and we can remove those begin?</span></div><div class="line" id="001652"><span class="nick" style="color:#389600"><a href="#001652" label="[00:16:52]">&lt;OriansJ`&gt;</a></span><span class="message">oh and a minor reorganization in M2-Planet's tests are being done to seperate the &quot;real&quot; programs from the minimal feature tests programs</span></div><div class="line" id="001700"><span class="nick" style="color:#389600"><a href="#001700" label="[00:17:00]">&lt;OriansJ`&gt;</a></span><span class="message">dddddd: probably</span></div><div class="line" id="001708"><span class="nick" style="color:#8dd3c7"><a href="#001708" label="[00:17:08]">&lt;dddddd&gt;</a></span><span class="message">nice</span></div><div class="line" id="001738"><span class="nick" style="color:#2e2a4a"><a href="#001738" label="[00:17:38]">&lt;xentrac&gt;</a></span><span class="message">normally I think of x || y as being syntactic sugar for x ? 1 : y in C</span></div><div class="line" id="001807"><span class="nick" style="color:#389600"><a href="#001807" label="[00:18:07]">&lt;OriansJ`&gt;</a></span><span class="message">also I solved continue fossy and the patch will up in a little bit</span></div><div class="line" id="001859"><span class="nick" style="color:#389600"><a href="#001859" label="[00:18:59]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: another feature M2-Planet v1.x lacks</span></div><div class="line" id="001859"><span class="nick" style="color:#6b8072"><a href="#001859" label="[00:18:59]">&lt;fossy&gt;</a></span><span class="message">thanks so much</span></div><div class="line" id="001919"><span class="nick" style="color:#2e2a4a"><a href="#001919" label="[00:19:19]">&lt;xentrac&gt;</a></span><span class="message">I think the GPL has a specific requirement to mark files you modify with your name, while copyright doesn't</span></div><div class="line" id="001941"><span class="nick" style="color:#2e2a4a"><a href="#001941" label="[00:19:41]">&lt;xentrac&gt;</a></span><span class="message">OriansJ`: heh, I guess that doesn't help much</span></div><div class="line" id="002203"><span class="nick" style="color:#8dd3c7"><a href="#002203" label="[00:22:03]">&lt;dddddd&gt;</a></span><span class="message">I stand corrected fossy. Thanks xentrac. Too strong wording in that message from me, indeed.</span></div><div class="line" id="002359"><span class="nick" style="color:#8dd3c7"><a href="#002359" label="[00:23:59]">&lt;dddddd&gt;</a></span><span class="message">But I think the base point stands, as in copyright allows you to license the code.</span></div><div class="line" id="002554"><span class="nick" style="color:#389600"><a href="#002554" label="[00:25:54]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: but I can imagine how when we add proper C macro support, it would occur quite naturally</span></div><div class="line" id="002702"><span class="nick" style="color:#2e2a4a"><a href="#002702" label="[00:27:02]">&lt;xentrac&gt;</a></span><span class="message">dddddd: I think that's sort of true but sort of backwards</span></div><div class="line" id="002753"><span class="nick" style="color:#2e2a4a"><a href="#002753" label="[00:27:53]">&lt;xentrac&gt;</a></span><span class="message">if I say, &quot;Come on over, we're having a party at 3202 Market Street, apartment 8&quot;, I'm granting you a license under US law to enter the apartment</span></div><div class="line" id="002827"><span class="nick" style="color:#2e2a4a"><a href="#002827" label="[00:28:27]">&lt;xentrac&gt;</a></span><span class="message">but it might turn out that it's actually someone else's apartment, in which case I can't grant you that license</span></div><div class="line" id="002836"><span class="nick" style="color:#389600"><a href="#002836" label="[00:28:36]">&lt;OriansJ`&gt;</a></span><span class="message">dddddd: this current patch for M2-Planet might look scary but it is just moving the folders around and fixing the getwd test</span></div><div class="line" id="002859"><span class="nick" style="color:#2e2a4a"><a href="#002859" label="[00:28:59]">&lt;xentrac&gt;</a></span><span class="message">or, on the contrary, it might be that it's public property where anyone can go (although this is more likely with an example that isn't an apartment!) and no license is needed</span></div><div class="line" id="002930"><span class="nick" style="color:#2e2a4a"><a href="#002930" label="[00:29:30]">&lt;xentrac&gt;</a></span><span class="message">but in that last case, you can still legally go to the party</span></div><div class="line" id="003007"><span class="nick" style="color:#2e2a4a"><a href="#003007" label="[00:30:07]">&lt;xentrac&gt;</a></span><span class="message">so were property rights needed to grant you the license?  only in a sort of negative sense</span></div><div class="line" id="003049"><span class="nick" style="color:#8dd3c7"><a href="#003049" label="[00:30:49]">&lt;dddddd&gt;</a></span><span class="message">I guess I was thinking along this lines: &quot;This requirement is known as copyleft. It earns its legal power from the use of copyright on software programs. Because a GPL work is copyrighted, a licensee has no right to redistribute it, not even in modified form (barring fair use), except under the terms of the license.&quot; (wikipedia)</span></div><div class="line" id="003058"><span class="nick" style="color:#2e2a4a"><a href="#003058" label="[00:30:58]">&lt;xentrac&gt;</a></span><span class="message">right</span></div><div class="line" id="003154"><span class="nick" style="color:#2e2a4a"><a href="#003154" label="[00:31:54]">&lt;xentrac&gt;</a></span><span class="message">in the same sense, perhaps a cancer patient has no ability to go on living, not even in a sick form, except if their chemotherapy is effective</span></div><div class="line" id="003211"><span class="nick" style="color:#2e2a4a"><a href="#003211" label="[00:32:11]">&lt;xentrac&gt;</a></span><span class="message">so we could say that cancer allows you to give them chemotherapy</span></div><div class="line" id="003253"><span class="nick" style="color:#2e2a4a"><a href="#003253" label="[00:32:53]">&lt;xentrac&gt;</a></span><span class="message">which is, strictly speaking, true, but it's a terribly odd way to think about chemotherapy</span></div><div class="line" id="003341"><span class="nick" style="color:#389600"><a href="#003341" label="[00:33:41]">&lt;OriansJ`&gt;</a></span><span class="message">dddddd: I think xentrac is expressing the idea of copyright as a right of exclusion that the GPL judo throws to create the effective enforcement of the freedom  it provides within the current rules of law</span></div><div class="line" id="003355"><span class="nick" style="color:#8dd3c7"><a href="#003355" label="[00:33:55]">&lt;dddddd&gt;</a></span><span class="message">OriansJ`, thanks for the warning about the patch (:</span></div><div class="line" id="003422"><span class="nick" style="color:#2e2a4a"><a href="#003422" label="[00:34:22]">&lt;xentrac&gt;</a></span><span class="message">indeed</span></div><div class="line" id="003636"><span class="nick" style="color:#389600"><a href="#003636" label="[00:36:36]">&lt;OriansJ`&gt;</a></span><span class="message">The fix for continue; adds one additional label for do while statements; which results in additional entire(s) in the dwarf footer generated by blood-elf. Which is slightly annoying.</span></div><div class="line" id="003650"><span class="nick" style="color:#2e2a4a"><a href="#003650" label="[00:36:50]">&lt;xentrac&gt;</a></span><span class="message">just as I would not respond to the news that they have cancer that will kill me quickly without chemotherapy by celebrating my opportunity to enjoy chemotherapy, I am not delighted when I find that something I want to use is copyrighted</span></div><div class="line" id="003653"><span class="nick" style="color:#8dd3c7"><a href="#003653" label="[00:36:53]">&lt;dddddd&gt;</a></span><span class="message">Yeah, I know about the judo trick. That's what lead me to thinking there's no license without copyright (in current &quot;main&quot; laws).</span></div><div class="line" id="003656"><span class="nick" style="color:#2e2a4a"><a href="#003656" label="[00:36:56]">&lt;xentrac&gt;</a></span><span class="message">additional entrie(s)?</span></div><div class="line" id="003657"><span class="nick" style="color:#389600"><a href="#003657" label="[00:36:57]">&lt;OriansJ`&gt;</a></span><span class="message">Fortunately while and for statements already have a label for where a continue would need to jump</span></div><div class="line" id="003736"><span class="nick" style="color:#2e2a4a"><a href="#003736" label="[00:37:36]">&lt;xentrac&gt;</a></span><span class="message">sure, there's no license without copyright, just as normally there's no chemotherapy without cancer.  But there's also no need for a license, because the legal risks the license protects you from (of being sued by a copyright holder) do not exist</span></div><div class="line" id="003757"><span class="nick" style="color:#389600"><a href="#003757" label="[00:37:57]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: if you have multiple do while statements, they all get unique :labels</span></div><div class="line" id="003807"><span class="nick" style="color:#2e2a4a"><a href="#003807" label="[00:38:07]">&lt;xentrac&gt;</a></span><span class="message">makes sense</span></div><div class="line" id="003817"><span class="nick" style="color:#8dd3c7"><a href="#003817" label="[00:38:17]">&lt;dddddd&gt;</a></span><span class="message">Agree, xentrac.</span></div><div class="line" id="003950"><span class="nick" style="color:#2e2a4a"><a href="#003950" label="[00:39:50]">&lt;xentrac&gt;</a></span><span class="message">OriansJ`: is it important to minimize the size of the DWRF footer?</span></div><div class="line" id="003953"><span class="nick" style="color:#2e2a4a"><a href="#003953" label="[00:39:53]">&lt;xentrac&gt;</a></span><span class="message">DWARF</span></div><div class="line" id="004234"><span class="nick" style="color:#389600"><a href="#004234" label="[00:42:34]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: no; as they are only added after blood-elf is bootstrapped</span></div><div class="line" id="004321"><span class="nick" style="color:#389600"><a href="#004321" label="[00:43:21]">&lt;OriansJ`&gt;</a></span><span class="message">I also have a rule inside of blood-elf to ignore all :_labels that start with _</span></div><div class="line" id="004337"><span class="nick" style="color:#389600"><a href="#004337" label="[00:43:37]">&lt;OriansJ`&gt;</a></span><span class="message">So trimming it would be quite trivial</span></div><div class="line" id="004424"><span class="nick" style="color:#2e2a4a"><a href="#004424" label="[00:44:24]">&lt;xentrac&gt;</a></span><span class="message">s/they have/I have/</span></div><div class="line" id="004554"><span class="nick" style="color:#389600"><a href="#004554" label="[00:45:54]">&lt;OriansJ`&gt;</a></span><span class="message">The only labels that might be worth ignoring are those for if, for, while, do and else</span></div><div class="line" id="004659"><span class="nick" style="color:#389600"><a href="#004659" label="[00:46:59]">&lt;OriansJ`&gt;</a></span><span class="message">But that would result in larger blocks of just instructions when one objdump -d's a generated M2-Planet file</span></div><div class="line" id="004832"><span class="nick" style="color:#389600"><a href="#004832" label="[00:48:32]">&lt;OriansJ`&gt;</a></span><span class="message">as the dwarf section is not required for working M2-Planet binaries but something optionally enabled with --debug and the use of blood-elf</span></div><div class="line" id="004950"><span class="nick" style="color:#389600"><a href="#004950" label="[00:49:50]">&lt;OriansJ`&gt;</a></span><span class="message">fossy, dddddd: patch for continue is now up</span></div><div class="line" id="005003"><span class="nick" style="color:#6b8072"><a href="#005003" label="[00:50:03]">&lt;fossy&gt;</a></span><span class="message">:) danke</span></div><div class="line" id="005016"><span class="nick" style="color:#389600"><a href="#005016" label="[00:50:16]">&lt;OriansJ`&gt;</a></span><span class="message">fossy: please verify it behaves the way you hope</span></div><div class="line" id="005101"><span class="nick" style="color:#389600"><a href="#005101" label="[00:51:01]">&lt;OriansJ`&gt;</a></span><span class="message">dddddd: could you please double check the aarch64 behavior for me please (a simple make clean test will do)</span></div><div class="line" id="005218"><span class="nick" style="color:#6b8072"><a href="#005218" label="[00:52:18]">&lt;fossy&gt;</a></span><span class="message">OriansJ`: I shall</span></div><div class="line" id="005225"><span class="nick" style="color:#389600"><a href="#005225" label="[00:52:25]">&lt;OriansJ`&gt;</a></span><span class="message">fossy: thank you</span></div><div class="line" id="005905"><span class="nick" style="color:#8dd3c7"><a href="#005905" label="[00:59:05]">&lt;dddddd&gt;</a></span><span class="message">Sure, I'll do in a moment (just a bit of setup)</span></div><div class="line" id="010856"><span class="nick" style="color:#389600"><a href="#010856" label="[01:08:56]">&lt;OriansJ`&gt;</a></span><span class="message">dddddd: thank you</span></div><div class="line" id="012223"><span class="nick" style="color:#8dd3c7"><a href="#012223" label="[01:22:23]">&lt;dddddd&gt;</a></span><span class="message">OriansJ`, perfect! All OK for &quot;make clean test&quot; on the metal (at 09783ac089de41f6c48af0cd79ba31dc302857c6).</span></div><div class="line" id="012259"><span class="nick" style="color:#389600"><a href="#012259" label="[01:22:59]">&lt;OriansJ`&gt;</a></span><span class="message">dddddd: excellent!</span></div><div class="line" id="014741"><span class="nick" style="color:#389600"><a href="#014741" label="[01:47:41]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: I am guessing tailcall.scm was designed to only work if the scheme is in Continuation-passing style form</span></div><div class="line" id="030339"><span class="nick" style="color:#6d2462"><a href="#030339" label="[03:03:39]">&lt;markjenkinsznc&gt;</a></span><span class="message">OriansJ, Ive opened a PR <a rel="nofollow" href="https://github.com/oriansj/stage0/pull/28">https://github.com/oriansj/stage0/pull/28</a>  for testing re-assembling ALL-ROMS with M0 (vm32), prototype_M0-compact, M0-compact (vm16, vm, vm64)</span></div><div class="line" id="030406"><span class="nick" style="color:#6d2462"><a href="#030406" label="[03:04:06]">&lt;markjenkinsznc&gt;</a></span><span class="message">was previously in shell scripts and I said I'd get it all in makefile</span></div><div class="line" id="030424"><span class="nick" style="color:#6d2462"><a href="#030424" label="[03:04:24]">&lt;markjenkinsznc&gt;</a></span><span class="message">Was a lesson in why not to put this much shell at a time in a makefile</span></div><div class="line" id="030427"><span class="nick" style="color:#6d2462"><a href="#030427" label="[03:04:27]">&lt;markjenkinsznc&gt;</a></span><span class="message">night</span></div><div class="line" id="041910"><span class="nick" style="color:#6b8072"><a href="#041910" label="[04:19:10]">&lt;fossy&gt;</a></span><span class="message">OriansJ`: it does behave the correct way :) the bug is fixed</span></div><div class="line" id="044654"><span class="nick" style="color:#6b8072"><a href="#044654" label="[04:46:54]">&lt;fossy&gt;</a></span><span class="message">please, re-review, OriansJ`, dddddd</span></div><div class="line" id="044705"><span class="nick" style="color:#2e2a4a"><a href="#044705" label="[04:47:05]">&lt;xentrac&gt;</a></span><span class="message">OriansJ`: sort of.  test.tailcall.scm from Ur-Scheme was the test to verify that Ur-Scheme did tail-call elimination properly.  It doesn't require that Ur-Scheme be implemented using CPS, and in fact Ur-Scheme is not implemented using CPS in any way</span></div><div class="line" id="044728"><span class="nick" style="color:#2e2a4a"><a href="#044728" label="[04:47:28]">&lt;xentrac&gt;</a></span><span class="message">well, I guess maybe its implementation of begin might be a CPS implementation of begin</span></div><div class="line" id="045105"><span class="nick" style="color:#2e2a4a"><a href="#045105" label="[04:51:05]">&lt;xentrac&gt;</a></span><span class="message">oh, no, it has a special case for compiling begin, which is amusingly defined in terms of begin</span></div><div class="line" id="045253"><span class="nick" style="color:#2e2a4a"><a href="#045253" label="[04:52:53]">&lt;xentrac&gt;</a></span><span class="message">anyway I didn't use CPS in Ur-Scheme because I thought that would probably make my life a lot more difficult, and I think there's a credible case that it would have, given that it produced code that was way faster than any other Scheme compiler I compared it with except of course Stalin</span></div><div class="line" id="045346"><span class="nick" style="color:#2e2a4a"><a href="#045346" label="[04:53:46]">&lt;xentrac&gt;</a></span><span class="message">although, to be fair, adding call/cc would have required a serious overhaul</span></div><div class="line" id="141340"><span class="nick" style="color:#389600"><a href="#141340" label="[14:13:40]">&lt;OriansJ`&gt;</a></span><span class="message">markjenkinsznc: I'll begin reviewing shortly</span></div><div class="line" id="141410"><span class="nick" style="color:#389600"><a href="#141410" label="[14:14:10]">&lt;OriansJ`&gt;</a></span><span class="message">fossy: I'll be reviewing your patch shortly after</span></div><div class="line" id="141511"><span class="nick" style="color:#389600"><a href="#141511" label="[14:15:11]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: thank you for that detail as adding call/cc probably is something that might end up required later down the road.</span></div><div class="line" id="143156"><span class="nick" style="color:#389600"><a href="#143156" label="[14:31:56]">&lt;OriansJ`&gt;</a></span><span class="message">markjenkinsznc: it is merged</span></div><div class="line" id="150352"><span class="nick" style="color:#389600"><a href="#150352" label="[15:03:52]">&lt;OriansJ`&gt;</a></span><span class="message">fossy: would you please add proper copyright headers to your tests and the standard in mescc-tools isn't to commit the answers but have a test.answers file which a sha256sum -c can use to verify all of the answers are correct</span></div><div class="line" id="150728"><span class="nick" style="color:#389600"><a href="#150728" label="[15:07:28]">&lt;OriansJ`&gt;</a></span><span class="message">also use the version of the functions that are internal to mescc-tools; if you wish to import a function from M2-Planet into mescc-tools, simply copy it over and commit (as we don't want to demand people have M2-Planet to build and use mescc-tools [a la debian or arch])</span></div><div class="line" id="150924"><span class="nick" style="color:#8dd3c7"><a href="#150924" label="[15:09:24]">&lt;dddddd&gt;</a></span><span class="message">OriansJ`, what's the convention for the &quot;This file is part of&quot; and similar lines in the headers? I see some changes in fossy's branch (stage0 -&gt; M2-Planet)</span></div><div class="line" id="151100"><span class="nick" style="color:#389600"><a href="#151100" label="[15:11:00]">&lt;OriansJ`&gt;</a></span><span class="message">dddddd: I have been standardizing that the &quot;This file is part of&quot; should match the name of the project it is in</span></div><div class="line" id="151126"><span class="nick" style="color:#389600"><a href="#151126" label="[15:11:26]">&lt;OriansJ`&gt;</a></span><span class="message">So if the file is in mescc-tools, it should say mescc-tools</span></div><div class="line" id="151145"><span class="nick" style="color:#389600"><a href="#151145" label="[15:11:45]">&lt;OriansJ`&gt;</a></span><span class="message">the only exception is mescc-tools-seed</span></div><div class="line" id="151211"><span class="nick" style="color:#8dd3c7"><a href="#151211" label="[15:12:11]">&lt;dddddd&gt;</a></span><span class="message">fossy, there's another instance of the optimization v. short-circuit. Also, still there the error message for &quot;cd&quot; talking about &quot;set&quot;.</span></div><div class="line" id="151219"><span class="nick" style="color:#389600"><a href="#151219" label="[15:12:19]">&lt;OriansJ`&gt;</a></span><span class="message">which should say stage0</span></div><div class="line" id="151315"><span class="nick" style="color:#389600"><a href="#151315" label="[15:13:15]">&lt;OriansJ`&gt;</a></span><span class="message">In those cases where fossy is talking about the short circuit, two require statements would probably look nicer</span></div><div class="line" id="151426"><span class="nick" style="color:#8dd3c7"><a href="#151426" label="[15:14:26]">&lt;dddddd&gt;</a></span><span class="message">fossy, check the headers wrt the name of the project, as OriansJ` said.</span></div><div class="line" id="151519"><span class="nick" style="color:#8dd3c7"><a href="#151519" label="[15:15:19]">&lt;dddddd&gt;</a></span><span class="message">(5 files it seems)</span></div><div class="line" id="151853"><span class="nick" style="color:#8dd3c7"><a href="#151853" label="[15:18:53]">&lt;dddddd&gt;</a></span><span class="message">You can see it easily in a diff from f94fd62663f4 to the tip of your branch. I use gitk for this (and for a lot more things, I learned a lot of git using it). In this case... select one commit, right-click on the other and ask for a diff in the right &quot;direction&quot;)</span></div><div class="line" id="152107"><span class="nick" style="color:#8dd3c7"><a href="#152107" label="[15:21:07]">&lt;dddddd&gt;</a></span><span class="message">I use this little script all the time, for my main [non-shell] git interactions:</span></div><div class="line" id="152112"><span class="nick" style="color:#8dd3c7"><a href="#152112" label="[15:21:12]">&lt;dddddd&gt;</a></span><span class="message">gitk --all &amp;</span></div><div class="line" id="152112"><span class="nick" style="color:#8dd3c7"><a href="#152112" label="[15:21:12]">&lt;dddddd&gt;</a></span><span class="message">git gui &amp;</span></div><div class="line" id="152717"><span class="nick" style="color:#389600"><a href="#152717" label="[15:27:17]">&lt;OriansJ`&gt;</a></span><span class="message">dddddd: you might enjoy emac's magit mode</span></div><div class="line" id="152856"><span class="nick" style="color:#8dd3c7"><a href="#152856" label="[15:28:56]">&lt;dddddd&gt;</a></span><span class="message">I also use it a bit, but I don't have reflexes for it yet.</span></div><div class="line" id="153229"><span class="nick" style="color:#389600"><a href="#153229" label="[15:32:29]">&lt;OriansJ`&gt;</a></span><span class="message">dddddd: fair, it is pretty big when one looks closely</span></div><div class="line" id="154017"><span class="nick" style="color:#8dd3c7"><a href="#154017" label="[15:40:17]">&lt;dddddd&gt;</a></span><span class="message">tig is also nice</span></div><div class="line" id="192120"><span class="nick" style="color:#6d2462"><a href="#192120" label="[19:21:20]">&lt;markjenkinsznc&gt;</a></span><span class="message">I have a work in progress on a knight dissembler <a rel="nofollow" href="https://github.com/markjenkins/stage0/tree/disasm_py-wip">https://github.com/markjenkins/stage0/tree/disasm_py-wip</a> </span></div><div class="line" id="192508"><span class="nick" style="color:#6d2462"><a href="#192508" label="[19:25:08]">&lt;markjenkinsznc&gt;</a></span><span class="message">Will drop the -wip suffix and rebase to a squashed history once I reach a minimal viable product which produces valid .s files compatible with M0 and stage1_assembler-2 and back to the same binary and is also dissaembles successfully which bytes instructions are found on</span></div><div class="line" id="192608"><span class="nick" style="color:#6d2462"><a href="#192608" label="[19:26:08]">&lt;markjenkinsznc&gt;</a></span><span class="message">after that I'll keep adding features that don't break the build until I've had enough and then will then PR</span></div><div class="line" id="192642"><span class="nick" style="color:#6d2462"><a href="#192642" label="[19:26:42]">&lt;markjenkinsznc&gt;</a></span><span class="message">open to feature suggestions which I'll keep in mind as a I develop minimal viable product and my features</span></div><div class="line" id="192815"><span class="nick" style="color:#6d2462"><a href="#192815" label="[19:28:15]">&lt;markjenkinsznc&gt;</a></span><span class="message">my feature ideas: 1) work with both binaries and .hex0/1/2 files, in the later case options to preserve labels and memory references</span></div><div class="line" id="193019"><span class="nick" style="color:#6d2462"><a href="#193019" label="[19:30:19]">&lt;markjenkinsznc&gt;</a></span><span class="message">2) inferences based on instruction immediates and choice of instructions as to which memory addresses should have labels like :jump_hexblah :func_call_hexblah :data_label_hexblah</span></div><div class="line" id="193120"><span class="nick" style="color:#6d2462"><a href="#193120" label="[19:31:20]">&lt;markjenkinsznc&gt;</a></span><span class="message">3) option to use such inferences to replace immediates in hex with $ and @, or just put such inferences in comments</span></div><div class="line" id="193134"><span class="nick" style="color:#6d2462"><a href="#193134" label="[19:31:34]">&lt;markjenkinsznc&gt;</a></span><span class="message">4) option to have addresses in comments</span></div><div class="line" id="193223"><span class="nick" style="color:#6d2462"><a href="#193223" label="[19:32:23]">&lt;markjenkinsznc&gt;</a></span><span class="message">5) detection of data that is likely string due to typical character set plus trailing null, put string in comment</span></div><div class="line" id="193455"><span class="nick" style="color:#6d2462"><a href="#193455" label="[19:34:55]">&lt;markjenkinsznc&gt;</a></span><span class="message">6) user can specify address ranges that are definitely not containing instructions to avoid attempts to decode, ensure runs of 00000000 aren't called NOP and FFFFFFFF not called HALT, possibly also some inferences when such runs are clearly no longer code, especially if not jumped to</span></div><div class="line" id="193732"><span class="nick" style="color:#6d2462"><a href="#193732" label="[19:37:32]">&lt;markjenkinsznc&gt;</a></span><span class="message">that's about all I can think of for bonus features for disasm.py beyond the minimal viable version</span></div><div class="line" id="194255"><span class="nick" style="color:#6d2462"><a href="#194255" label="[19:42:55]">&lt;markjenkinsznc&gt;</a></span><span class="message">OriansJ, as for <a rel="nofollow" href="https://github.com/markjenkins/stage0/tree/M0-compact-hex2-redo3">https://github.com/markjenkins/stage0/tree/M0-compact-hex2-redo3</a>  I'm going to do a squash rebase to reduce my work there down to 1 commit and PR. GitHub reports this branch still cleanly merges despite the testing work added to makefile. ;)</span></div><div class="line" id="194640"><span class="nick" style="color:#6d2462"><a href="#194640" label="[19:46:40]">&lt;markjenkinsznc&gt;</a></span><span class="message">I'm also going to make available some text dump URLS with the auto generated shell script I had which invokes sed to do crude dissassembly of M0-macro-compact.hex2 instructions (and not operands) back to assembly and I'll also post the resulting file, on top of a hard core by hand audit this provides a second audit path which can be supplemental to doing things the hard way (e.g. may help catch something missed while doing it the hard way)</span></div><div class="line" id="194826"><span class="nick" style="color:#6d2462"><a href="#194826" label="[19:48:26]">&lt;markjenkinsznc&gt;</a></span><span class="message">I'm going to abandon M0-compact-operand-align-wip branch if there's no interest in the operand whitespace formatting I started there</span></div><div class="line" id="194848"><span class="nick" style="color:#6d2462"><a href="#194848" label="[19:48:48]">&lt;markjenkinsznc&gt;</a></span><span class="message">it doesn't really scratch any of my own itches</span></div><div class="line" id="200141"><span class="nick" style="color:#6d2462"><a href="#200141" label="[20:01:41]">&lt;markjenkinsznc&gt;</a></span><span class="message">If I were hand auditing M0-macro-compact.hex2, I would print it, and I would audit and confirm this auto generated list of 51 instructions (in hex and assembler) that are in use <a rel="nofollow" href="https://gist.github.com/markjenkins/202d7e0c5328ccfd567f16b2d405e9bf">https://gist.github.com/markjenkins/202d7e0c5328ccfd567f16b2d405e9bf</a> </span></div><div class="line" id="200339"><span class="nick" style="color:#6d2462"><a href="#200339" label="[20:03:39]">&lt;markjenkinsznc&gt;</a></span><span class="message">then I would go through that list of instructions one by one as per that list and cross out with a red pen the instruction hex on any line on M0-macro-compact.hex2 where the comments say that instruction is used if hex matches</span></div><div class="line" id="200400"><span class="nick" style="color:#6d2462"><a href="#200400" label="[20:04:00]">&lt;markjenkinsznc&gt;</a></span><span class="message">at the end of that, every line with an instruction should have been matched</span></div><div class="line" id="200407"><span class="nick" style="color:#6d2462"><a href="#200407" label="[20:04:07]">&lt;markjenkinsznc&gt;</a></span><span class="message">then second pass checks operands</span></div><div class="line" id="202754"><span class="nick" style="color:#6d2462"><a href="#202754" label="[20:27:54]">&lt;markjenkinsznc&gt;</a></span><span class="message">M0-macro-compact.hex2 audit gist updated to show whole process, <a rel="nofollow" href="https://gist.github.com/markjenkins/202d7e0c5328ccfd567f16b2d405e9bf">https://gist.github.com/markjenkins/202d7e0c5328ccfd567f16b2d405e9bf</a>  , very similar to how I would audit on paper if I didn't trust my kernel, shell, sed and text file viewers like more</span></div><div class="line" id="202813"><span class="nick" style="color:#6d2462"><a href="#202813" label="[20:28:13]">&lt;markjenkinsznc&gt;</a></span><span class="message">files in the gist are out of order, process documented in a comment</span></div><div class="line" id="212953"><span class="nick" style="color:#6b8072"><a href="#212953" label="[21:29:53]">&lt;fossy&gt;</a></span><span class="message">OriansJ`: addressed</span></div><br /></div></body></html>