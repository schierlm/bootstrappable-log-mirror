<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-02-03.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="002322"><span class="nick" style="color:#8dd3c7"><a href="#002322" label="[00:23:22]">&lt;stikonas&gt;</a></span><span class="message">fossy: I might have another hacky solution...</span></div><div class="line" id="002334"><span class="nick" style="color:#8dd3c7"><a href="#002334" label="[00:23:34]">&lt;stikonas&gt;</a></span><span class="message">replace all weak symbols with strong symbols</span></div><div class="line" id="002400"><span class="nick" style="color:#8dd3c7"><a href="#002400" label="[00:24:00]">&lt;stikonas&gt;</a></span><span class="message">and patch tcc to patch duplicate symbols instead of erroring out</span></div><div class="line" id="002406"><span class="nick" style="color:#8dd3c7"><a href="#002406" label="[00:24:06]">&lt;stikonas&gt;</a></span><span class="message">that seems to work...</span></div><div class="line" id="002420"><span class="nick" style="color:#8dd3c7"><a href="#002420" label="[00:24:20]">&lt;stikonas&gt;</a></span><span class="message">at least tcc compiles and is self-hosting</span></div><div class="line" id="002448"><span class="nick" style="color:#8dd3c7"><a href="#002448" label="[00:24:48]">&lt;stikonas&gt;</a></span><span class="message">flex also compiles...</span></div><div class="line" id="002606"><span class="nick" style="color:#8dd3c7"><a href="#002606" label="[00:26:06]">&lt;stikonas&gt;</a></span><span class="message">I think we are good with it...</span></div><div class="line" id="002910"><span class="nick" style="color:#8dd3c7"><a href="#002910" label="[00:29:10]">&lt;stikonas&gt;</a></span><span class="message">fossy: pder: <a rel="nofollow" href="https://stikonas.eu/files/musl/tcc_symbols.patch.txt">https://stikonas.eu/files/musl/tcc_symbols.patch.txt</a>  and <a rel="nofollow" href="https://stikonas.eu/files/musl/musl_features.patch.txt">https://stikonas.eu/files/musl/musl_features.patch.txt</a> </span></div><div class="line" id="002937"><span class="nick" style="color:#8dd3c7"><a href="#002937" label="[00:29:37]">&lt;stikonas&gt;</a></span><span class="message">it's at least less hacky than appending .o files</span></div><div class="line" id="003451"><span class="nick" style="color:#2e2a4a"><a href="#003451" label="[00:34:51]">&lt;pder&gt;</a></span><span class="message">stikonas: very nice!</span></div><div class="line" id="003831"><span class="nick" style="color:#8dd3c7"><a href="#003831" label="[00:38:31]">&lt;stikonas&gt;</a></span><span class="message">I'll probabably finish tcc before I make PR...</span></div><div class="line" id="015727"><span class="nick" style="color:#8dd3c7"><a href="#015727" label="[01:57:27]">&lt;stikonas&gt;</a></span><span class="message">pder: fossy: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/26">https://github.com/fosslinux/live-bootstrap/pull/26</a> </span></div><div class="line" id="015733"><span class="nick" style="color:#8dd3c7"><a href="#015733" label="[01:57:33]">&lt;stikonas&gt;</a></span><span class="message">although, I think sourceforge is down now</span></div><div class="line" id="015738"><span class="nick" style="color:#8dd3c7"><a href="#015738" label="[01:57:38]">&lt;stikonas&gt;</a></span><span class="message">so heirloom tools might fail to download</span></div><div class="line" id="015743"><span class="nick" style="color:#8dd3c7"><a href="#015743" label="[01:57:43]">&lt;stikonas&gt;</a></span><span class="message">(I do have a local copy though)</span></div><div class="line" id="020002"><span class="nick" style="color:#6b8072"><a href="#020002" label="[02:00:02]">&lt;stikonas[m]&gt;</a></span><span class="message">Maybe I can host those tarballs and get_file can use it as mirror</span></div><div class="line" id="031246"><span class="nick" style="color:#80b1d3"><a href="#031246" label="[03:12:46]">&lt;OriansJ&gt;</a></span><span class="message">well anyone have a better solution than this for removing the need for fixup in M2-Planet?</span></div><div class="line" id="031357"><span class="nick" style="color:#80b1d3"><a href="#031357" label="[03:13:57]">&lt;OriansJ&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1183798/">https://paste.debian.net/1183798/</a> </span></div><div class="line" id="032032"><span class="nick" style="color:#80b1d3"><a href="#032032" label="[03:20:32]">&lt;OriansJ&gt;</a></span><span class="message">There is probably a more clever solution here: <a rel="nofollow" href="https://graphics.stanford.edu/~seander/bithacks.html#FixedSignExtend">https://graphics.stanford.edu/~seander/bithacks.html#FixedSignExtend</a>  but oh well.</span></div><div class="line" id="042617"><span class="nick" style="color:#6d2462"><a href="#042617" label="[04:26:17]">&lt;Hagfish&gt;</a></span><span class="message"> <a rel="nofollow" href="https://r13y.com/">https://r13y.com/</a>  &quot;Is NixOS Reproducible?&quot;</span></div><div class="line" id="042624"><span class="nick" style="color:#6d2462"><a href="#042624" label="[04:26:24]">&lt;Hagfish&gt;</a></span><span class="message">i think that has improved recently</span></div><div class="line" id="042633"><span class="nick" style="color:#6d2462"><a href="#042633" label="[04:26:33]">&lt;Hagfish&gt;</a></span><span class="message">&quot;1698 out of 1701 (99.82%) paths in the minimal installation image are reproducible!&quot;</span></div><div class="line" id="042644"><span class="nick" style="color:#6d2462"><a href="#042644" label="[04:26:44]">&lt;Hagfish&gt;</a></span><span class="message">i don't think it was that good last time i looked, a week or so ago</span></div><div class="line" id="042705"><span class="nick" style="color:#6d2462"><a href="#042705" label="[04:27:05]">&lt;Hagfish&gt;</a></span><span class="message">asciidoc, python 3.8, gcc 10</span></div><div class="line" id="042713"><span class="nick" style="color:#6d2462"><a href="#042713" label="[04:27:13]">&lt;Hagfish&gt;</a></span><span class="message">those are the non-reproducible packages</span></div><div class="line" id="042747"><span class="nick" style="color:#6d2462"><a href="#042747" label="[04:27:47]">&lt;Hagfish&gt;</a></span><span class="message">i know gcc has been one of the packages the debian repro builds team has been stuck on for a while</span></div><div class="line" id="043105"><span class="nick" style="color:#6d2462"><a href="#043105" label="[04:31:05]">&lt;Hagfish&gt;</a></span><span class="message">asciidoc hasn't been a problem for debian</span></div><div class="line" id="043106"><span class="nick" style="color:#6d2462"><a href="#043106" label="[04:31:06]">&lt;Hagfish&gt;</a></span><span class="message"> <a rel="nofollow" href="https://tests.reproducible-builds.org/debian/rb-pkg/unstable/amd64/asciidoc.html">https://tests.reproducible-builds.org/debian/rb-pkg/unstable/amd64/asciidoc.html</a> </span></div><div class="line" id="043224"><span class="nick" style="color:#6d2462"><a href="#043224" label="[04:32:24]">&lt;Hagfish&gt;</a></span><span class="message">oh, maybe Debian are packaging a slightly older version (seems to be release candidates)</span></div><div class="line" id="044010"><span class="nick" style="color:#80b1d3"><a href="#044010" label="[04:40:10]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: Ironic that the programs easiest to make reproducible are those they are having the hardest time doing so.</span></div><div class="line" id="044256"><span class="nick" style="color:#234e69"><a href="#044256" label="[04:42:56]">&lt;theruran&gt;</a></span><span class="message">so is Guile 3.0 now the most trustworthy Scheme because it is bootstrapped from a small hex seed? making it more preferred as a compiler implementation language?</span></div><div class="line" id="050217"><span class="nick" style="color:#80b1d3"><a href="#050217" label="[05:02:17]">&lt;OriansJ&gt;</a></span><span class="message">theruran: not entirely bootstrapped until we solve psyntax.pp</span></div><div class="line" id="050303"><span class="nick" style="color:#234e69"><a href="#050303" label="[05:03:03]">&lt;theruran&gt;</a></span><span class="message">OriansJ: but once that's finished? btw, what is up with psyntax.pp?</span></div><div class="line" id="051226"><span class="nick" style="color:#80b1d3"><a href="#051226" label="[05:12:26]">&lt;OriansJ&gt;</a></span><span class="message">theruran: it is guile's implementation of syntax-case written using syntax-case; so you need guile to bootstrap guile.</span></div><div class="line" id="051313"><span class="nick" style="color:#80b1d3"><a href="#051313" label="[05:13:13]">&lt;OriansJ&gt;</a></span><span class="message">I thinkn this might be more M2-Planet friendly in the end if(0 != (0x80000000 &amp; result)) result = (0xFFFFFFFF &lt;&lt; 31) | result;</span></div><div class="line" id="051445"><span class="nick" style="color:#234e69"><a href="#051445" label="[05:14:45]">&lt;theruran&gt;</a></span><span class="message">I guess the nanopass framework has migrated to Racket stewardship. Is Racket CS more or less bootstrappable than Guile 3? I would assume less..</span></div><div class="line" id="051653"><span class="nick" style="color:#80b1d3"><a href="#051653" label="[05:16:53]">&lt;OriansJ&gt;</a></span><span class="message">theruran: every scheme we have looked at that supports syntax-case depends on a implementation specific version of syntax-case written in syntax-case.</span></div><div class="line" id="051710"><span class="nick" style="color:#80b1d3"><a href="#051710" label="[05:17:10]">&lt;OriansJ&gt;</a></span><span class="message">In effect no scheme is bootstrappable without considerable work</span></div><div class="line" id="051745"><span class="nick" style="color:#80b1d3"><a href="#051745" label="[05:17:45]">&lt;OriansJ&gt;</a></span><span class="message">as syntax-case is a freaking monster of functionality and always 100% interpreter specific to hell</span></div><div class="line" id="051754"><span class="nick" style="color:#234e69"><a href="#051754" label="[05:17:54]">&lt;theruran&gt;</a></span><span class="message">that's much worse than I assumed! D: what direction now are you all thinking of how to solve that problem?</span></div><div class="line" id="051922"><span class="nick" style="color:#80b1d3"><a href="#051922" label="[05:19:22]">&lt;OriansJ&gt;</a></span><span class="message">theruran: well mihi is currently attempting to solve that by writing it in guile primitives but it looks like it is going to be a long project.</span></div><div class="line" id="051954"><span class="nick" style="color:#234e69"><a href="#051954" label="[05:19:54]">&lt;theruran&gt;</a></span><span class="message">wow!!</span></div><div class="line" id="052118"><span class="nick" style="color:#234e69"><a href="#052118" label="[05:21:18]">&lt;theruran&gt;</a></span><span class="message">I assumed mes had implemented macros already</span></div><div class="line" id="052147"><span class="nick" style="color:#80b1d3"><a href="#052147" label="[05:21:47]">&lt;OriansJ&gt;</a></span><span class="message">theruran: there is a massive difference between &quot;macros&quot; 'macros' and syntax-case</span></div><div class="line" id="052224"><span class="nick" style="color:#80b1d3"><a href="#052224" label="[05:22:24]">&lt;OriansJ&gt;</a></span><span class="message">mes has implemented &quot;macros&quot; but not 'macros' or syntax-case</span></div><div class="line" id="052446"><span class="nick" style="color:#234e69"><a href="#052446" label="[05:24:46]">&lt;theruran&gt;</a></span><span class="message">oh man.. so can syntax-case be implemented with a less powerful macro system? syntax-rules?</span></div><div class="line" id="052600"><span class="nick" style="color:#80b1d3"><a href="#052600" label="[05:26:00]">&lt;OriansJ&gt;</a></span><span class="message">theruran: we hope; if not we might have to figure out how to do syntax-case in the Haskell subset we bootstrapped in blynn-compiler</span></div><div class="line" id="052633"><span class="nick" style="color:#234e69"><a href="#052633" label="[05:26:33]">&lt;theruran&gt;</a></span><span class="message">good idea!</span></div><div class="line" id="052938"><span class="nick" style="color:#80b1d3"><a href="#052938" label="[05:29:38]">&lt;OriansJ&gt;</a></span><span class="message">in short, we are working the problem and if we hit a wall, we will try another route.</span></div><div class="line" id="053023"><span class="nick" style="color:#80b1d3"><a href="#053023" label="[05:30:23]">&lt;OriansJ&gt;</a></span><span class="message">and another and another until we finally bootstrapped *EVERYTHING* from source.</span></div><div class="line" id="053049"><span class="nick" style="color:#234e69"><a href="#053049" label="[05:30:49]">&lt;theruran&gt;</a></span><span class="message">I am looking at the R6RS standard about syntax-case</span></div><div class="line" id="053113"><span class="nick" style="color:#80b1d3"><a href="#053113" label="[05:31:13]">&lt;OriansJ&gt;</a></span><span class="message">R7RS-small might be easier</span></div><div class="line" id="053239"><span class="nick" style="color:#6c3d55"><a href="#053239" label="[05:32:39]">&lt;fossy&gt;</a></span><span class="message">OriansJ: one thing done, another small come</span></div><div class="line" id="053322"><span class="nick" style="color:#6c3d55"><a href="#053322" label="[05:33:22]">&lt;fossy&gt;</a></span><span class="message">shall*</span></div><div class="line" id="053348"><span class="nick" style="color:#234e69"><a href="#053348" label="[05:33:48]">&lt;theruran&gt;</a></span><span class="message">OriansJ: I can't find syntax-case in R7RS-small</span></div><div class="line" id="053415"><span class="nick" style="color:#80b1d3"><a href="#053415" label="[05:34:15]">&lt;OriansJ&gt;</a></span><span class="message">fossy: always progress here even if I am just barely scrapping together time to program these days.</span></div><div class="line" id="053504"><span class="nick" style="color:#80b1d3"><a href="#053504" label="[05:35:04]">&lt;OriansJ&gt;</a></span><span class="message">theruran: &gt;.&lt; yet its required to run the standard libraries.</span></div><div class="line" id="053718"><span class="nick" style="color:#234e69"><a href="#053718" label="[05:37:18]">&lt;theruran&gt;</a></span><span class="message">I thought I would find syntax-case written in something else, but I'd have to read R6RS more carefully. Someone wrote it like that originally.. :/</span></div><div class="line" id="053841"><span class="nick" style="color:#80b1d3"><a href="#053841" label="[05:38:41]">&lt;OriansJ&gt;</a></span><span class="message">theruran: syntax-case is the sort of &quot;uber feature&quot; that on one hand is considered required but on the other hand so insanely complex to do correctly that no one wants to look or touch it if at all possible.</span></div><div class="line" id="054015"><span class="nick" style="color:#234e69"><a href="#054015" label="[05:40:15]">&lt;theruran&gt;</a></span><span class="message">incredible!</span></div><div class="line" id="054052"><span class="nick" style="color:#234e69"><a href="#054052" label="[05:40:52]">&lt;theruran&gt;</a></span><span class="message">cannot find (define-syntax syntax-case ...) 😆</span></div><div class="line" id="054145"><span class="nick" style="color:#80b1d3"><a href="#054145" label="[05:41:45]">&lt;OriansJ&gt;</a></span><span class="message">It was literally a PhD project if I remember correctly. Hygenic macros for scheme</span></div><div class="line" id="054221"><span class="nick" style="color:#234e69"><a href="#054221" label="[05:42:21]">&lt;theruran&gt;</a></span><span class="message">I found the technical report from 1992..</span></div><div class="line" id="054704"><span class="nick" style="color:#234e69"><a href="#054704" label="[05:47:04]">&lt;theruran&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.irccloud.com/pastebin/YYbYozTp/">https://www.irccloud.com/pastebin/YYbYozTp/</a> </span></div><div class="line" id="055015"><span class="nick" style="color:#234e69"><a href="#055015" label="[05:50:15]">&lt;theruran&gt;</a></span><span class="message">sorry it pasted that way. says there's a syntax.pp expanded form that is used to bootstrap syntax.ss</span></div><div class="line" id="055352"><span class="nick" style="color:#234e69"><a href="#055352" label="[05:53:52]">&lt;theruran&gt;</a></span><span class="message">Chez Scheme has a note about bootstrapping: <a rel="nofollow" href="https://github.com/cisco/ChezScheme/blob/master/s/syntax.ss#L316">https://github.com/cisco/ChezScheme/blob/master/s/syntax.ss#L316</a> </span></div><div class="line" id="055505"><span class="nick" style="color:#234e69"><a href="#055505" label="[05:55:05]">&lt;theruran&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/scheme-requests-for-implementation/srfi-93/blob/master/implementation/syntax.pp">https://github.com/scheme-requests-for-implementation/srfi-93/blob/master/implementation/syntax.pp</a> </span></div><div class="line" id="055514"><span class="nick" style="color:#234e69"><a href="#055514" label="[05:55:14]">&lt;theruran&gt;</a></span><span class="message">oh hecc that's almost 10,000 lines!</span></div><div class="line" id="060252"><span class="nick" style="color:#80b1d3"><a href="#060252" label="[06:02:52]">&lt;OriansJ&gt;</a></span><span class="message">of very dense Scheme</span></div><div class="line" id="060931"><span class="nick" style="color:#234e69"><a href="#060931" label="[06:09:31]">&lt;theruran&gt;</a></span><span class="message">yes, hard to audit.</span></div><div class="line" id="060940"><span class="nick" style="color:#234e69"><a href="#060940" label="[06:09:40]">&lt;theruran&gt;</a></span><span class="message">why was SRFI 93 withdrawn?</span></div><div class="line" id="061703"><span class="nick" style="color:#80b1d3"><a href="#061703" label="[06:17:03]">&lt;OriansJ&gt;</a></span><span class="message">theruran: honestly don't know</span></div><div class="line" id="061723"><span class="nick" style="color:#234e69"><a href="#061723" label="[06:17:23]">&lt;theruran&gt;</a></span><span class="message">ah. the last message on the mailing list gives no reason</span></div><div class="line" id="062011"><span class="nick" style="color:#80b1d3"><a href="#062011" label="[06:20:11]">&lt;OriansJ&gt;</a></span><span class="message">possibly because syntax-case can't be portable (unless there was a way to get lazy evaluation from an eager evaluator that I don't know about)</span></div><div class="line" id="063010"><span class="nick" style="color:#6c3d55"><a href="#063010" label="[06:30:10]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: :DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD</span></div><div class="line" id="063337"><span class="nick" style="color:#80b1d3"><a href="#063337" label="[06:33:37]">&lt;OriansJ&gt;</a></span><span class="message">deesix: I'll have the first M2-Planet test1000 conversion to M2libc in a little bit. The rest should be done tomorrow.</span></div><div class="line" id="072244"><span class="nick" style="color:#d9d9d9"><a href="#072244" label="[07:22:44]">&lt;gforce_de1977&gt;</a></span><span class="message"> OriansJ: <a rel="nofollow" href="https://paste.debian.net/1183798/">https://paste.debian.net/1183798/</a>  -&gt; in the NULL case, you canjust &quot;return result;&quot; and in line 29 is a space missing 8-)</span></div><div class="line" id="072353"><span class="nick" style="color:#d9d9d9"><a href="#072353" label="[07:23:53]">&lt;gforce_de1977&gt;</a></span><span class="message">gforce_de1977: sorry, micro-optimizations are bad, ignore my comment</span></div><div class="line" id="131319"><span class="nick" style="color:#80b1d3"><a href="#131319" label="[13:13:19]">&lt;OriansJ&gt;</a></span><span class="message">gforce_de1977: fortunately M2-Planet/cc_* handles if( and if ( the same but stylewise I could be more consistent.</span></div><div class="line" id="131407"><span class="nick" style="color:#80b1d3"><a href="#131407" label="[13:14:07]">&lt;OriansJ&gt;</a></span><span class="message">but micro-optimizations are fine if they don't increase complexity or ability to be understood.</span></div><div class="line" id="132934"><span class="nick" style="color:#80b1d3"><a href="#132934" label="[13:29:34]">&lt;OriansJ&gt;</a></span><span class="message">yt: could you check that I didn't screw up M2libc/aarch64/Linux/bootstrap.c for test1000 in M2-Planet please?</span></div><div class="line" id="133245"><span class="nick" style="color:#80b1d3"><a href="#133245" label="[13:32:45]">&lt;OriansJ&gt;</a></span><span class="message">and armv7l switched to M2libc and test/common_armv7l finally pulled from M2-Planet</span></div><div class="line" id="133718"><span class="nick" style="color:#8dd3c7"><a href="#133718" label="[13:37:18]">&lt;stikonas&gt;</a></span><span class="message">pder: one fossy's comment here is for your commit <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/26">https://github.com/fosslinux/live-bootstrap/pull/26</a> </span></div><div class="line" id="134025"><span class="nick" style="color:#8dd3c7"><a href="#134025" label="[13:40:25]">&lt;stikonas&gt;</a></span><span class="message">pder: or do you want me to fix it later...</span></div><div class="line" id="143412"><span class="nick" style="color:#bc80bd"><a href="#143412" label="[14:34:12]">&lt;rjek&gt;</a></span><span class="message">Am I right in thinking that stage0 isn't quite to the state where it can build Mes yet, in order to complete the &quot;stage0 -&gt; Mes -&gt; tinycc -&gt; tinycc -&gt; gcc 2.95 -&gt; gcc 2.95 -&gt; gcc 4.7 -&gt; gcc4.7 -&gt; modern gcc -&gt; modern gcc&quot; chain?  I'm struggling to find documentation that suggests this has been achieved (yet)</span></div><div class="line" id="143639"><span class="nick" style="color:#8dd3c7"><a href="#143639" label="[14:36:39]">&lt;stikonas&gt;</a></span><span class="message">rjek: we can build mes</span></div><div class="line" id="143657"><span class="nick" style="color:#8dd3c7"><a href="#143657" label="[14:36:57]">&lt;stikonas&gt;</a></span><span class="message">and tinycc, but not gcc yet</span></div><div class="line" id="143713"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado</span></div><div class="line" id="143716"><span class="nick" style="color:#bc80bd"><a href="#143716" label="[14:37:16]">&lt;rjek&gt;</a></span><span class="message">Ah, so the tinycc that's built can't yet build gcc 2.95?</span></div><div class="line" id="143716"><span class="nick" style="color:#8dd3c7"><a href="#143716" label="[14:37:16]">&lt;stikonas&gt;</a></span><span class="message">unless you make some assumptions</span></div><div class="line" id="143730"><span class="nick" style="color:#8dd3c7"><a href="#143730" label="[14:37:30]">&lt;stikonas&gt;</a></span><span class="message">rjek: tcc can build it, but we need to bootstrap autotools</span></div><div class="line" id="143745"><span class="nick" style="color:#8dd3c7"><a href="#143745" label="[14:37:45]">&lt;stikonas&gt;</a></span><span class="message">well, if you accept that &quot;configure&quot; is source than you might be fine</span></div><div class="line" id="143749"><span class="nick" style="color:#bc80bd"><a href="#143749" label="[14:37:49]">&lt;rjek&gt;</a></span><span class="message">Ah, autotools.  Even now it comes back to haunt us.</span></div><div class="line" id="143820"><span class="nick" style="color:#8dd3c7"><a href="#143820" label="[14:38:20]">&lt;stikonas&gt;</a></span><span class="message">rjek: this is bootstrap from stage0 <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/">https://github.com/fosslinux/live-bootstrap/</a> </span></div><div class="line" id="143843"><span class="nick" style="color:#8dd3c7"><a href="#143843" label="[14:38:43]">&lt;stikonas&gt;</a></span><span class="message">yesterday we just built musl with tinycc (not merged yet), which would allow us to proceed further</span></div><div class="line" id="143904"><span class="nick" style="color:#bc80bd"><a href="#143904" label="[14:39:04]">&lt;rjek&gt;</a></span><span class="message">OK.  I assume one day you'll also need to build Linux and qemu for the steps described there?</span></div><div class="line" id="143918"><span class="nick" style="color:#8dd3c7"><a href="#143918" label="[14:39:18]">&lt;stikonas&gt;</a></span><span class="message">I just use qemu and Linux from my distro</span></div><div class="line" id="143923"><span class="nick" style="color:#8dd3c7"><a href="#143923" label="[14:39:23]">&lt;stikonas&gt;</a></span><span class="message">you can use baremetal if you want...</span></div><div class="line" id="143934"><span class="nick" style="color:#8dd3c7"><a href="#143934" label="[14:39:34]">&lt;stikonas&gt;</a></span><span class="message">but for now you'll need some kernel, that's true</span></div><div class="line" id="143940"><span class="nick" style="color:#bc80bd"><a href="#143940" label="[14:39:40]">&lt;rjek&gt;</a></span><span class="message">Well.  Using qemu and Linux from your distro isn't really much better than using the gcc from your distro, is what I mean :)</span></div><div class="line" id="143941"><span class="nick" style="color:#8dd3c7"><a href="#143941" label="[14:39:41]">&lt;stikonas&gt;</a></span><span class="message">for now kernel is out of scope for stage0</span></div><div class="line" id="143951"><span class="nick" style="color:#8dd3c7"><a href="#143951" label="[14:39:51]">&lt;stikonas&gt;</a></span><span class="message">qemu is for development</span></div><div class="line" id="144002"><span class="nick" style="color:#8dd3c7"><a href="#144002" label="[14:40:02]">&lt;stikonas&gt;</a></span><span class="message">you can run it on hardware without qemu</span></div><div class="line" id="144011"><span class="nick" style="color:#8dd3c7"><a href="#144011" label="[14:40:11]">&lt;stikonas&gt;</a></span><span class="message">you still need some kernel though</span></div><div class="line" id="144014"><span class="nick" style="color:#8dd3c7"><a href="#144014" label="[14:40:14]">&lt;stikonas&gt;</a></span><span class="message">but any kernel works</span></div><div class="line" id="144039"><span class="nick" style="color:#bc80bd"><a href="#144039" label="[14:40:39]">&lt;rjek&gt;</a></span><span class="message">OK</span></div><div class="line" id="144041"><span class="nick" style="color:#8dd3c7"><a href="#144041" label="[14:40:41]">&lt;stikonas&gt;</a></span><span class="message">there will be more work on kernel in live-bootstrap later...</span></div><div class="line" id="144105"><span class="nick" style="color:#8dd3c7"><a href="#144105" label="[14:41:05]">&lt;stikonas&gt;</a></span><span class="message">and qemu is really for development</span></div><div class="line" id="144111"><span class="nick" style="color:#8dd3c7"><a href="#144111" label="[14:41:11]">&lt;stikonas&gt;</a></span><span class="message">although, we use chroot more in practive</span></div><div class="line" id="144116"><span class="nick" style="color:#8dd3c7"><a href="#144116" label="[14:41:16]">&lt;stikonas&gt;</a></span><span class="message">because qemu is impossible to debug</span></div><div class="line" id="144124"><span class="nick" style="color:#8dd3c7"><a href="#144124" label="[14:41:24]">&lt;stikonas&gt;</a></span><span class="message">(we don't have interactive shell yet)</span></div><div class="line" id="144133"><span class="nick" style="color:#8dd3c7"><a href="#144133" label="[14:41:33]">&lt;stikonas&gt;</a></span><span class="message">although, we managed to build non-interactive bash</span></div><div class="line" id="144148"><span class="nick" style="color:#bc80bd"><a href="#144148" label="[14:41:48]">&lt;rjek&gt;</a></span><span class="message">Is there a &quot;CI&quot; tarball of the artefacts the state-of-the-art Mes can produce that we can directly use, rather than running the chain itself?</span></div><div class="line" id="144150"><span class="nick" style="color:#8dd3c7"><a href="#144150" label="[14:41:50]">&lt;stikonas&gt;</a></span><span class="message">and interactive bash might be possible now</span></div><div class="line" id="144157"><span class="nick" style="color:#8dd3c7"><a href="#144157" label="[14:41:57]">&lt;stikonas&gt;</a></span><span class="message">no</span></div><div class="line" id="144201"><span class="nick" style="color:#8dd3c7"><a href="#144201" label="[14:42:01]">&lt;stikonas&gt;</a></span><span class="message">but chain is automated...</span></div><div class="line" id="144311"><span class="nick" style="color:#3c5b35"><a href="#144311" label="[14:43:11]">*</a></span><span class="message">rjek 's interest at the moment, selfishly, is to use the outputs rather than improve the inputs or machinery.</span></div><div class="line" id="144338"><span class="nick" style="color:#8dd3c7"><a href="#144338" label="[14:43:38]">&lt;stikonas&gt;</a></span><span class="message">well, if you don't run outputs yourself, there is no reason to trust them more than your distros gcc...</span></div><div class="line" id="144358"><span class="nick" style="color:#bc80bd"><a href="#144358" label="[14:43:58]">&lt;rjek&gt;</a></span><span class="message">I can sha256sum them against the results of somebody I trust who has more patience.</span></div><div class="line" id="144420"><span class="nick" style="color:#8dd3c7"><a href="#144420" label="[14:44:20]">&lt;stikonas&gt;</a></span><span class="message">well, there will be guix outputs later...</span></div><div class="line" id="144428"><span class="nick" style="color:#8dd3c7"><a href="#144428" label="[14:44:28]">&lt;stikonas&gt;</a></span><span class="message">but they take some shortcuts...</span></div><div class="line" id="144441"><span class="nick" style="color:#8dd3c7"><a href="#144441" label="[14:44:41]">&lt;stikonas&gt;</a></span><span class="message">i.e. they trust configure, they use pre-generated C files (bison/flex)</span></div><div class="line" id="144535"><span class="nick" style="color:#8dd3c7"><a href="#144535" label="[14:45:35]">&lt;stikonas&gt;</a></span><span class="message">which simpliefied things a lot</span></div><div class="line" id="144551"><span class="nick" style="color:#bc80bd"><a href="#144551" label="[14:45:51]">&lt;rjek&gt;</a></span><span class="message">Hmm, doesn't sound like using their outputs yet gains anything but a bit more inconvenience :/</span></div><div class="line" id="144611"><span class="nick" style="color:#8dd3c7"><a href="#144611" label="[14:46:11]">&lt;stikonas&gt;</a></span><span class="message">on the other hand we might be able to jump from tcc to gcc 4 and skip gcc 2.95...</span></div><div class="line" id="144613"><span class="nick" style="color:#8dd3c7"><a href="#144613" label="[14:46:13]">&lt;stikonas&gt;</a></span><span class="message">but we'll see..</span></div><div class="line" id="144630"><span class="nick" style="color:#8dd3c7"><a href="#144630" label="[14:46:30]">&lt;stikonas&gt;</a></span><span class="message">because we managed to bootstrap modern C library</span></div><div class="line" id="144933"><span class="nick" style="color:#af8d2f"><a href="#144933" label="[14:49:33]">&lt;civodul&gt;</a></span><span class="message">stikonas: i don't think &quot;they&quot; vs &quot;we&quot; is warranted</span></div><div class="line" id="145103"><span class="nick" style="color:#8dd3c7"><a href="#145103" label="[14:51:03]">&lt;stikonas&gt;</a></span><span class="message">civodul: yeah, sorry, I do have guix here too</span></div><div class="line" id="145110"><span class="nick" style="color:#8dd3c7"><a href="#145110" label="[14:51:10]">&lt;stikonas&gt;</a></span><span class="message">so I agree it's not warranted...</span></div><div class="line" id="145136"><span class="nick" style="color:#8dd3c7"><a href="#145136" label="[14:51:36]">&lt;stikonas&gt;</a></span><span class="message">and I also sent some patches to guix before</span></div><div class="line" id="145216"><span class="nick" style="color:#8dd3c7"><a href="#145216" label="[14:52:16]">&lt;stikonas&gt;</a></span><span class="message">anyway, just different strands of work going on...</span></div><div class="line" id="145250"><span class="nick" style="color:#af8d2f"><a href="#145250" label="[14:52:50]">&lt;civodul&gt;</a></span><span class="message">right, and clearly improvements in live-bootstrap are usually beneficial to Guix, and vice versa</span></div><div class="line" id="145251"><span class="nick" style="color:#8dd3c7"><a href="#145251" label="[14:52:51]">&lt;stikonas&gt;</a></span><span class="message">one takes a bit more technical debt but is already usable</span></div><div class="line" id="145255"><span class="nick" style="color:#8dd3c7"><a href="#145255" label="[14:52:55]">&lt;stikonas&gt;</a></span><span class="message">yeah, indeed</span></div><div class="line" id="145305"><span class="nick" style="color:#8dd3c7"><a href="#145305" label="[14:53:05]">&lt;stikonas&gt;</a></span><span class="message">live-bootstrap ideas can go into Guix</span></div><div class="line" id="145324"><span class="nick" style="color:#8dd3c7"><a href="#145324" label="[14:53:24]">&lt;stikonas&gt;</a></span><span class="message">and we already follow general direction of Guix when bootstrapping</span></div><div class="line" id="145326"><span class="nick" style="color:#3c5b35"><a href="#145326" label="[14:53:26]">*</a></span><span class="message">rjek is sadly not really interested in Guix itself, just the bootstrapping of a toolchain with which to build something else.</span></div><div class="line" id="145338"><span class="nick" style="color:#8dd3c7"><a href="#145338" label="[14:53:38]">&lt;stikonas&gt;</a></span><span class="message">well, live-bootstrap's goal is that</span></div><div class="line" id="145349"><span class="nick" style="color:#8dd3c7"><a href="#145349" label="[14:53:49]">&lt;stikonas&gt;</a></span><span class="message">but it's not done yet</span></div><div class="line" id="145408"><span class="nick" style="color:#8dd3c7"><a href="#145408" label="[14:54:08]">&lt;stikonas&gt;</a></span><span class="message">it's fairly new, we really started ramping live-bootstrap a month or so ago</span></div><div class="line" id="145426"><span class="nick" style="color:#bc80bd"><a href="#145426" label="[14:54:26]">&lt;rjek&gt;</a></span><span class="message">Our current build and integration tooling basically requires a rootfs containing a basic system + gcc from which it builds everything else.</span></div><div class="line" id="145505"><span class="nick" style="color:#8dd3c7"><a href="#145505" label="[14:55:05]">&lt;stikonas&gt;</a></span><span class="message">well, live-bootstrap only needs two tiny binaries and lots of source code</span></div><div class="line" id="145517"><span class="nick" style="color:#8dd3c7"><a href="#145517" label="[14:55:17]">&lt;stikonas&gt;</a></span><span class="message">and we'll build gcc and other essential utilities</span></div><div class="line" id="145531"><span class="nick" style="color:#8dd3c7"><a href="#145531" label="[14:55:31]">&lt;stikonas&gt;</a></span><span class="message">it's getting close</span></div><div class="line" id="145544"><span class="nick" style="color:#8dd3c7"><a href="#145544" label="[14:55:44]">&lt;stikonas&gt;</a></span><span class="message">but biggest issue is autotools</span></div><div class="line" id="145550"><span class="nick" style="color:#8dd3c7"><a href="#145550" label="[14:55:50]">&lt;stikonas&gt;</a></span><span class="message">and hence perl</span></div><div class="line" id="145744"><span class="nick" style="color:#bc80bd"><a href="#145744" label="[14:57:44]">&lt;rjek&gt;</a></span><span class="message">Indeed.</span></div><div class="line" id="152207"><span class="nick" style="color:#8dd3c7"><a href="#152207" label="[15:22:07]">&lt;stikonas&gt;</a></span><span class="message">rjek: and actually, there won't ever by place to download all artifacts</span></div><div class="line" id="152219"><span class="nick" style="color:#8dd3c7"><a href="#152219" label="[15:22:19]">&lt;stikonas&gt;</a></span><span class="message">some artifacts are non-redistributable</span></div><div class="line" id="152234"><span class="nick" style="color:#8dd3c7"><a href="#152234" label="[15:22:34]">&lt;stikonas&gt;</a></span><span class="message">so we can't publish them</span></div><div class="line" id="152351"><span class="nick" style="color:#bc80bd"><a href="#152351" label="[15:23:51]">&lt;rjek&gt;</a></span><span class="message">Oh?  Which aren't redistributable as binaries?</span></div><div class="line" id="152358"><span class="nick" style="color:#8dd3c7"><a href="#152358" label="[15:23:58]">&lt;stikonas&gt;</a></span><span class="message">yes</span></div><div class="line" id="152413"><span class="nick" style="color:#8dd3c7"><a href="#152413" label="[15:24:13]">&lt;stikonas&gt;</a></span><span class="message">we need to compile some very early software licensed under CDDL</span></div><div class="line" id="152435"><span class="nick" style="color:#8dd3c7"><a href="#152435" label="[15:24:35]">&lt;stikonas&gt;</a></span><span class="message">CDDL and GPLv3 are incompatible</span></div><div class="line" id="152449"><span class="nick" style="color:#8dd3c7"><a href="#152449" label="[15:24:49]">&lt;stikonas&gt;</a></span><span class="message">in particular that's heirloom yacc and lex</span></div><div class="line" id="152456"><span class="nick" style="color:#bc80bd"><a href="#152456" label="[15:24:56]">&lt;rjek&gt;</a></span><span class="message">:(</span></div><div class="line" id="152508"><span class="nick" style="color:#bc80bd"><a href="#152508" label="[15:25:08]">&lt;rjek&gt;</a></span><span class="message">is there a plan to replace those CDDL components?</span></div><div class="line" id="152516"><span class="nick" style="color:#8dd3c7"><a href="#152516" label="[15:25:16]">&lt;stikonas&gt;</a></span><span class="message">lex gets removed fairly quickly and replaced with flex</span></div><div class="line" id="152519"><span class="nick" style="color:#8dd3c7"><a href="#152519" label="[15:25:19]">&lt;stikonas&gt;</a></span><span class="message">there isn't any replacement</span></div><div class="line" id="152534"><span class="nick" style="color:#8dd3c7"><a href="#152534" label="[15:25:34]">&lt;stikonas&gt;</a></span><span class="message">but we compile newer tool that is redistributable</span></div><div class="line" id="152604"><span class="nick" style="color:#8dd3c7"><a href="#152604" label="[15:26:04]">&lt;stikonas&gt;</a></span><span class="message">and yacc will be replaced with bison later in the chain</span></div><div class="line" id="152618"><span class="nick" style="color:#8dd3c7"><a href="#152618" label="[15:26:18]">&lt;stikonas&gt;</a></span><span class="message">but early parts of chain will have transient non-redistributable binaries</span></div><div class="line" id="152639"><span class="nick" style="color:#8dd3c7"><a href="#152639" label="[15:26:39]">&lt;stikonas&gt;</a></span><span class="message">our early libc is GPLv3</span></div><div class="line" id="152649"><span class="nick" style="color:#8dd3c7"><a href="#152649" label="[15:26:49]">&lt;stikonas&gt;</a></span><span class="message">in principle we can recompile them now with musl</span></div><div class="line" id="152658"><span class="nick" style="color:#8dd3c7"><a href="#152658" label="[15:26:58]">&lt;stikonas&gt;</a></span><span class="message">and same program will be redistributable...</span></div><div class="line" id="152706"><span class="nick" style="color:#8dd3c7"><a href="#152706" label="[15:27:06]">&lt;stikonas&gt;</a></span><span class="message">but we can just go for bison next</span></div><div class="line" id="152804"><span class="nick" style="color:#8dd3c7"><a href="#152804" label="[15:28:04]">&lt;stikonas&gt;</a></span><span class="message">rjek: <a rel="nofollow" href="http://heirloom.sourceforge.net/devtools.html">http://heirloom.sourceforge.net/devtools.html</a> </span></div><div class="line" id="152813"><span class="nick" style="color:#8dd3c7"><a href="#152813" label="[15:28:13]">&lt;stikonas&gt;</a></span><span class="message">gnu bison/flex depend on themselves</span></div><div class="line" id="152825"><span class="nick" style="color:#8dd3c7"><a href="#152825" label="[15:28:25]">&lt;stikonas&gt;</a></span><span class="message">so we need those to break cyclic dependency</span></div><div class="line" id="152958"><span class="nick" style="color:#bc80bd"><a href="#152958" label="[15:29:58]">&lt;rjek&gt;</a></span><span class="message">Are these CDDL tools not intermediaries?  I mean, they don't end up in what you ship if you're shipping lex/yacc?</span></div><div class="line" id="153051"><span class="nick" style="color:#8dd3c7"><a href="#153051" label="[15:30:51]">&lt;stikonas&gt;</a></span><span class="message">yes, they are intermediaries</span></div><div class="line" id="153104"><span class="nick" style="color:#8dd3c7"><a href="#153104" label="[15:31:04]">&lt;stikonas&gt;</a></span><span class="message">that's why they are not big deal but we can only publish final result</span></div><div class="line" id="153121"><span class="nick" style="color:#8dd3c7"><a href="#153121" label="[15:31:21]">&lt;stikonas&gt;</a></span><span class="message">but at the moment only one intermediary is replaced</span></div><div class="line" id="153124"><span class="nick" style="color:#8dd3c7"><a href="#153124" label="[15:31:24]">&lt;stikonas&gt;</a></span><span class="message">the other is still there</span></div><div class="line" id="153302"><span class="nick" style="color:#3c5b35"><a href="#153302" label="[15:33:02]">*</a></span><span class="message">rjek nods</span></div><div class="line" id="153307"><span class="nick" style="color:#bc80bd"><a href="#153307" label="[15:33:07]">&lt;rjek&gt;</a></span><span class="message">I'm interested in the final result :)</span></div><div class="line" id="153324"><span class="nick" style="color:#bc80bd"><a href="#153324" label="[15:33:24]">&lt;rjek&gt;</a></span><span class="message">I mean if I can reproduce that final result then great, but I don't feel the need to</span></div><div class="line" id="162817"><span class="nick" style="color:#2e2a4a"><a href="#162817" label="[16:28:17]">&lt;pder&gt;</a></span><span class="message">stikonas: regarding the pull request was this the issue with reordering patched tcc and patched mes-libc?</span></div><div class="line" id="162832"><span class="nick" style="color:#8dd3c7"><a href="#162832" label="[16:28:32]">&lt;stikonas&gt;</a></span><span class="message">yeah...</span></div><div class="line" id="162852"><span class="nick" style="color:#8dd3c7"><a href="#162852" label="[16:28:52]">&lt;stikonas&gt;</a></span><span class="message">pder: by the way, regarding your comment, I'll replace that shell script with sourced script invoked by build function</span></div><div class="line" id="162911"><span class="nick" style="color:#8dd3c7"><a href="#162911" label="[16:29:11]">&lt;stikonas&gt;</a></span><span class="message">like other new builds are done</span></div><div class="line" id="162933"><span class="nick" style="color:#8dd3c7"><a href="#162933" label="[16:29:33]">&lt;stikonas&gt;</a></span><span class="message">so there won't be anything to set</span></div><div class="line" id="162942"><span class="nick" style="color:#2e2a4a"><a href="#162942" label="[16:29:42]">&lt;pder&gt;</a></span><span class="message">Ah ok</span></div><div class="line" id="163019"><span class="nick" style="color:#8dd3c7"><a href="#163019" label="[16:30:19]">&lt;stikonas&gt;</a></span><span class="message">well, I probably need to first create some basic /dev and /proc folders in another commit too</span></div><div class="line" id="163022"><span class="nick" style="color:#2e2a4a"><a href="#163022" label="[16:30:22]">&lt;pder&gt;</a></span><span class="message">So if we built patched mes-libc before patching tcc to use static linking, would the end result be the same?</span></div><div class="line" id="163032"><span class="nick" style="color:#389600"><a href="#163032" label="[16:30:32]">&lt;bauen1&gt;</a></span><span class="message">rjek: if you're interested, the feature set of the kernel necesarry for bootstrapping is probably quite minimal, so currently i'm building up myunix up to a point where it should be self-hosting, which means can run stage0 up to tinycc+musl (well, very slowly due to lack of time)</span></div><div class="line" id="163058"><span class="nick" style="color:#8dd3c7"><a href="#163058" label="[16:30:58]">&lt;stikonas&gt;</a></span><span class="message">pder: I think so</span></div><div class="line" id="163059"><span class="nick" style="color:#389600"><a href="#163059" label="[16:30:59]">&lt;bauen1&gt;</a></span><span class="message">rjek: this kernel could be written by any college student with enough motivation after completing ~3. semester</span></div><div class="line" id="163124"><span class="nick" style="color:#389600"><a href="#163124" label="[16:31:24]">&lt;bauen1&gt;</a></span><span class="message">rjek: and after that you're scratching on the issue of trusted hardware</span></div><div class="line" id="163144"><span class="nick" style="color:#8dd3c7"><a href="#163144" label="[16:31:44]">&lt;stikonas&gt;</a></span><span class="message">pder: libc is the lowest library, it has no other libraries to link to</span></div><div class="line" id="163158"><span class="nick" style="color:#8dd3c7"><a href="#163158" label="[16:31:58]">&lt;stikonas&gt;</a></span><span class="message">so I think because of that it's fine</span></div><div class="line" id="163215"><span class="nick" style="color:#8dd3c7"><a href="#163215" label="[16:32:15]">&lt;stikonas&gt;</a></span><span class="message">actually because it's a library</span></div><div class="line" id="163219"><span class="nick" style="color:#8dd3c7"><a href="#163219" label="[16:32:19]">&lt;stikonas&gt;</a></span><span class="message">not becuase it's C library</span></div><div class="line" id="163238"><span class="nick" style="color:#8dd3c7"><a href="#163238" label="[16:32:38]">&lt;stikonas&gt;</a></span><span class="message">pder: that patch only affects behaviour of tcc linker</span></div><div class="line" id="163248"><span class="nick" style="color:#8dd3c7"><a href="#163248" label="[16:32:48]">&lt;stikonas&gt;</a></span><span class="message">and linker is not used when building libraries</span></div><div class="line" id="163253"><span class="nick" style="color:#8dd3c7"><a href="#163253" label="[16:32:53]">&lt;stikonas&gt;</a></span><span class="message">only for binaries</span></div><div class="line" id="163300"><span class="nick" style="color:#2e2a4a"><a href="#163300" label="[16:33:00]">&lt;pder&gt;</a></span><span class="message">ok, I will clean that up</span></div><div class="line" id="163321"><span class="nick" style="color:#389600"><a href="#163321" label="[16:33:21]">&lt;bauen1&gt;</a></span><span class="message">which reminds me that live-bootstrap should probably get gcc+bintuils to run and then cross compile all parts of the final toolchain, this way they should be identical and could even be run on another system, e.g. build a toolchain to run on / build for x86 from a live-bootstrap ran on RISC-V</span></div><div class="line" id="163323"><span class="nick" style="color:#8dd3c7"><a href="#163323" label="[16:33:23]">&lt;stikonas&gt;</a></span><span class="message">probably just simple reordering (although reorder readme too)</span></div><div class="line" id="163353"><span class="nick" style="color:#2e2a4a"><a href="#163353" label="[16:33:53]">&lt;pder&gt;</a></span><span class="message">I split the building of tcc out into a separate script because I called it twice.  I can probably revert that</span></div><div class="line" id="163359"><span class="nick" style="color:#8dd3c7"><a href="#163359" label="[16:33:59]">&lt;stikonas&gt;</a></span><span class="message">bauen1: yes, there will be a few rebuildings</span></div><div class="line" id="163408"><span class="nick" style="color:#8dd3c7"><a href="#163408" label="[16:34:08]">&lt;stikonas&gt;</a></span><span class="message">pder: hmm, yes, that's right</span></div><div class="line" id="163419"><span class="nick" style="color:#8dd3c7"><a href="#163419" label="[16:34:19]">&lt;stikonas&gt;</a></span><span class="message">and next time I call compile tcc it will be from bash...</span></div><div class="line" id="163434"><span class="nick" style="color:#8dd3c7"><a href="#163434" label="[16:34:34]">&lt;stikonas&gt;</a></span><span class="message">I tried using tcc's configure, but I think we are still missing some coreutils</span></div><div class="line" id="163439"><span class="nick" style="color:#8dd3c7"><a href="#163439" label="[16:34:39]">&lt;stikonas&gt;</a></span><span class="message">probably uname</span></div><div class="line" id="163447"><span class="nick" style="color:#8dd3c7"><a href="#163447" label="[16:34:47]">&lt;stikonas&gt;</a></span><span class="message">should be possible to build later with musl</span></div><div class="line" id="163525"><span class="nick" style="color:#389600"><a href="#163525" label="[16:35:25]">&lt;bauen1&gt;</a></span><span class="message">stikonas: tinyccs configure script is short enough that hand creating the resulting config / config.mk files is easy and maybe even faster if you know what you need</span></div><div class="line" id="163540"><span class="nick" style="color:#8dd3c7"><a href="#163540" label="[16:35:40]">&lt;stikonas&gt;</a></span><span class="message">bauen1: well, compiling tcc is just one command anyway</span></div><div class="line" id="163553"><span class="nick" style="color:#8dd3c7"><a href="#163553" label="[16:35:53]">&lt;stikonas&gt;</a></span><span class="message">we were just supplying those values as command line arguments...</span></div><div class="line" id="173403"><span class="nick" style="color:#2e2a4a"><a href="#173403" label="[17:34:03]">&lt;pder&gt;</a></span><span class="message">I notice now that the rootfs.sh script is downloading source every time it runs</span></div><div class="line" id="173610"><span class="nick" style="color:#2e2a4a"><a href="#173610" label="[17:36:10]">&lt;pder&gt;</a></span><span class="message">It would be preferable to have the script use a local copy already downloaded if available</span></div><div class="line" id="174110"><span class="nick" style="color:#8dd3c7"><a href="#174110" label="[17:41:10]">&lt;stikonas&gt;</a></span><span class="message">pder: yeah, I mentioned this to fossy</span></div><div class="line" id="174112"><span class="nick" style="color:#8dd3c7"><a href="#174112" label="[17:41:12]">&lt;stikonas&gt;</a></span><span class="message">I don't like that either</span></div><div class="line" id="174123"><span class="nick" style="color:#8dd3c7"><a href="#174123" label="[17:41:23]">&lt;stikonas&gt;</a></span><span class="message">first of all it causes extra strain on mirrors</span></div><div class="line" id="174148"><span class="nick" style="color:#8dd3c7"><a href="#174148" label="[17:41:48]">&lt;stikonas&gt;</a></span><span class="message">I think we should put download to sysa/*/src and not sysa/tmp/*/src</span></div><div class="line" id="174202"><span class="nick" style="color:#8dd3c7"><a href="#174202" label="[17:42:02]">&lt;stikonas&gt;</a></span><span class="message">pder: although, CI will still download every time...</span></div><div class="line" id="174301"><span class="nick" style="color:#8dd3c7"><a href="#174301" label="[17:43:01]">&lt;stikonas&gt;</a></span><span class="message">pder: I've saved tarballs here too <a rel="nofollow" href="https://stikonas.eu/files/bootstrap/">https://stikonas.eu/files/bootstrap/</a> </span></div><div class="line" id="174310"><span class="nick" style="color:#8dd3c7"><a href="#174310" label="[17:43:10]">&lt;stikonas&gt;</a></span><span class="message">because of that...</span></div><div class="line" id="174327"><span class="nick" style="color:#8dd3c7"><a href="#174327" label="[17:43:27]">&lt;stikonas&gt;</a></span><span class="message">actually I just saw failure yesterday because sf was down...</span></div><div class="line" id="194849"><span class="nick" style="color:#8dd3c7"><a href="#194849" label="[19:48:49]">&lt;siraben&gt;</a></span><span class="message">OriansJ: <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-seed/pull/25">https://github.com/oriansj/mescc-tools-seed/pull/25</a> </span></div><div class="line" id="195916"><span class="nick" style="color:#389600"><a href="#195916" label="[19:59:16]">&lt;bauen1&gt;</a></span><span class="message">by the way, what exactly does musl use weak symbols for ?</span></div><div class="line" id="200003"><span class="nick" style="color:#389600"><a href="#200003" label="[20:00:03]">&lt;bauen1&gt;</a></span><span class="message">if you build all objects, can't you just remove weak symbols, or are they to work around limitations of archive files and how linkers lookup the symbols ?</span></div><div class="line" id="200304"><span class="nick" style="color:#8dd3c7"><a href="#200304" label="[20:03:04]">&lt;stikonas&gt;</a></span><span class="message">bauen1: we don't remove weak symbols, we replaced weak with strong</span></div><div class="line" id="200324"><span class="nick" style="color:#8dd3c7"><a href="#200324" label="[20:03:24]">&lt;stikonas&gt;</a></span><span class="message">well, it uses for a lot of functions that I guess you can override</span></div><div class="line" id="200338"><span class="nick" style="color:#8dd3c7"><a href="#200338" label="[20:03:38]">&lt;stikonas&gt;</a></span><span class="message">even stuff like memory allocation (calloc)</span></div><div class="line" id="200746"><span class="nick" style="color:#389600"><a href="#200746" label="[20:07:46]">&lt;bauen1&gt;</a></span><span class="message">stikonas: i meant removing the weak_alias calls if there the real symbol is somewhere in musl</span></div><div class="line" id="200844"><span class="nick" style="color:#8dd3c7"><a href="#200844" label="[20:08:44]">&lt;stikonas&gt;</a></span><span class="message">bauen1: oh, that's what I did basically</span></div><div class="line" id="200849"><span class="nick" style="color:#8dd3c7"><a href="#200849" label="[20:08:49]">&lt;stikonas&gt;</a></span><span class="message">in the patch</span></div><div class="line" id="200901"><span class="nick" style="color:#8dd3c7"><a href="#200901" label="[20:09:01]">&lt;stikonas&gt;</a></span><span class="message">but then there were duplicate symbols</span></div><div class="line" id="200913"><span class="nick" style="color:#8dd3c7"><a href="#200913" label="[20:09:13]">&lt;stikonas&gt;</a></span><span class="message">musl provides more than one implementation for a few things</span></div><div class="line" id="200927"><span class="nick" style="color:#389600"><a href="#200927" label="[20:09:27]">&lt;bauen1&gt;</a></span><span class="message">ah</span></div><div class="line" id="200930"><span class="nick" style="color:#8dd3c7"><a href="#200930" label="[20:09:30]">&lt;stikonas&gt;</a></span><span class="message">so I disabled duplicate symbol check</span></div><div class="line" id="200936"><span class="nick" style="color:#8dd3c7"><a href="#200936" label="[20:09:36]">&lt;stikonas&gt;</a></span><span class="message">(in tcc)</span></div><div class="line" id="200944"><span class="nick" style="color:#8dd3c7"><a href="#200944" label="[20:09:44]">&lt;stikonas&gt;</a></span><span class="message">that seemed to work</span></div><div class="line" id="200952"><span class="nick" style="color:#389600"><a href="#200952" label="[20:09:52]">&lt;bauen1&gt;</a></span><span class="message">i never had such problems (granted i haven't made much use of musl yet) with tcc, is that because some fix is already in mob ?</span></div><div class="line" id="200953"><span class="nick" style="color:#8dd3c7"><a href="#200953" label="[20:09:53]">&lt;stikonas&gt;</a></span><span class="message">well, once we have binutils, this hack can be removed</span></div><div class="line" id="201007"><span class="nick" style="color:#8dd3c7"><a href="#201007" label="[20:10:07]">&lt;stikonas&gt;</a></span><span class="message">bauen1: not sure</span></div><div class="line" id="201019"><span class="nick" style="color:#8dd3c7"><a href="#201019" label="[20:10:19]">&lt;stikonas&gt;</a></span><span class="message">I tried newest revision of mob that we can use (maybe from 2019)</span></div><div class="line" id="201023"><span class="nick" style="color:#8dd3c7"><a href="#201023" label="[20:10:23]">&lt;stikonas&gt;</a></span><span class="message">and that had problems</span></div><div class="line" id="201032"><span class="nick" style="color:#8dd3c7"><a href="#201032" label="[20:10:32]">&lt;stikonas&gt;</a></span><span class="message">anything newer does not build on mes libc</span></div><div class="line" id="201051"><span class="nick" style="color:#389600"><a href="#201051" label="[20:10:51]">&lt;bauen1&gt;</a></span><span class="message">stikonas: can a modern binutils be compiled with tinycc ?</span></div><div class="line" id="201106"><span class="nick" style="color:#8dd3c7"><a href="#201106" label="[20:11:06]">&lt;stikonas&gt;</a></span><span class="message">modern not sure, older ones definitely</span></div><div class="line" id="201110"><span class="nick" style="color:#8dd3c7"><a href="#201110" label="[20:11:10]">&lt;stikonas&gt;</a></span><span class="message">guix compiles them</span></div><div class="line" id="201130"><span class="nick" style="color:#8dd3c7"><a href="#201130" label="[20:11:30]">&lt;stikonas&gt;</a></span><span class="message">guix uses 2.14</span></div><div class="line" id="201149"><span class="nick" style="color:#8dd3c7"><a href="#201149" label="[20:11:49]">&lt;stikonas&gt;</a></span><span class="message">that's from 2003</span></div><div class="line" id="201205"><span class="nick" style="color:#8dd3c7"><a href="#201205" label="[20:12:05]">&lt;stikonas&gt;</a></span><span class="message">but with musl we might be able to go with something newer</span></div><div class="line" id="201232"><span class="nick" style="color:#8dd3c7"><a href="#201232" label="[20:12:32]">&lt;stikonas&gt;</a></span><span class="message">I think biggest limitting factor was not tcc but mes libc</span></div><div class="line" id="201251"><span class="nick" style="color:#8dd3c7"><a href="#201251" label="[20:12:51]">&lt;stikonas&gt;</a></span><span class="message">and now with modern musl, I think we can build much more</span></div><div class="line" id="201308"><span class="nick" style="color:#8dd3c7"><a href="#201308" label="[20:13:08]">&lt;stikonas&gt;</a></span><span class="message">in fact I don't even know if we need to try to build glibc any time soon...</span></div><div class="line" id="201335"><span class="nick" style="color:#8dd3c7"><a href="#201335" label="[20:13:35]">&lt;stikonas&gt;</a></span><span class="message">(musl that we have is from October 2019</span></div><div class="line" id="202742"><span class="nick" style="color:#2e2a4a"><a href="#202742" label="[20:27:42]">&lt;pder&gt;</a></span><span class="message">stikonas: I pushed my update mes-crt-fix branch that reorders the mes-libc-patched and tcc-patched steps and adds a header to my patch</span></div><div class="line" id="202806"><span class="nick" style="color:#8dd3c7"><a href="#202806" label="[20:28:06]">&lt;stikonas&gt;</a></span><span class="message">thanks, I'll rebase on top of that</span></div><div class="line" id="202809"><span class="nick" style="color:#2e2a4a"><a href="#202809" label="[20:28:09]">&lt;pder&gt;</a></span><span class="message">You will want to rebase your musl branch on top of that</span></div><div class="line" id="202812"><span class="nick" style="color:#8dd3c7"><a href="#202812" label="[20:28:12]">&lt;stikonas&gt;</a></span><span class="message">yeah..</span></div><div class="line" id="202822"><span class="nick" style="color:#8dd3c7"><a href="#202822" label="[20:28:22]">&lt;stikonas&gt;</a></span><span class="message">need to do a few more fixes...</span></div><div class="line" id="210307"><span class="nick" style="color:#6c3d55"><a href="#210307" label="[21:03:07]">&lt;fossy&gt;</a></span><span class="message">&lt;rjek&gt; Well.  Using qemu and Linux from your distro isn't really much better than using the gcc from your distro, is what I mean :)</span></div><div class="line" id="210311"><span class="nick" style="color:#6c3d55"><a href="#210311" label="[21:03:11]">&lt;fossy&gt;</a></span><span class="message">Fully correct</span></div><div class="line" id="210327"><span class="nick" style="color:#6c3d55"><a href="#210327" label="[21:03:27]">&lt;fossy&gt;</a></span><span class="message">live bootstrap will manage kernels once it is complete</span></div><div class="line" id="210335"><span class="nick" style="color:#6c3d55"><a href="#210335" label="[21:03:35]">&lt;fossy&gt;</a></span><span class="message">so there will be a kernel bootstrap</span></div><div class="line" id="210543"><span class="nick" style="color:#8dd3c7"><a href="#210543" label="[21:05:43]">&lt;stikonas&gt;</a></span><span class="message">pder: ok, rebased on top of you patch</span></div><div class="line" id="210553"><span class="nick" style="color:#8dd3c7"><a href="#210553" label="[21:05:53]">&lt;stikonas&gt;</a></span><span class="message">now testing my own changes</span></div><div class="line" id="210647"><span class="nick" style="color:#8dd3c7"><a href="#210647" label="[21:06:47]">&lt;stikonas&gt;</a></span><span class="message">fossy: I've just converted tcc-musl into bash type sourced script. But since it's two pass script, at lot of installation is done from configure... Hopefully it's fine...</span></div><div class="line" id="212155"><span class="nick" style="color:#6c3d55"><a href="#212155" label="[21:21:55]">&lt;fossy&gt;</a></span><span class="message">yeah, that is fine, proabbyl ill have a look</span></div><div class="line" id="212352"><span class="nick" style="color:#8dd3c7"><a href="#212352" label="[21:23:52]">&lt;stikonas&gt;</a></span><span class="message">well, running the first test (might need more if something is broken)</span></div><div class="line" id="212606"><span class="nick" style="color:#8dd3c7"><a href="#212606" label="[21:26:06]">&lt;stikonas&gt;</a></span><span class="message">after musl I'll replace flex 2.4.14 with newer... (completely removing 2.4.14)</span></div><div class="line" id="212615"><span class="nick" style="color:#8dd3c7"><a href="#212615" label="[21:26:15]">&lt;stikonas&gt;</a></span><span class="message">since 2.4.11 should be able to build latest</span></div><div class="line" id="212702"><span class="nick" style="color:#8dd3c7"><a href="#212702" label="[21:27:02]">&lt;stikonas&gt;</a></span><span class="message">and maybe move m4 after musl...</span></div><div class="line" id="212717"><span class="nick" style="color:#8dd3c7"><a href="#212717" label="[21:27:17]">&lt;stikonas&gt;</a></span><span class="message">we need it before flex 2.6.4 though</span></div><div class="line" id="221246"><span class="nick" style="color:#8dd3c7"><a href="#221246" label="[22:12:46]">&lt;stikonas&gt;</a></span><span class="message">argh, cp is a bit broken...</span></div><div class="line" id="230139"><span class="nick" style="color:#8dd3c7"><a href="#230139" label="[23:01:39]">&lt;stikonas&gt;</a></span><span class="message">fossy: argh, slight problem with scripting</span></div><div class="line" id="230208"><span class="nick" style="color:#8dd3c7"><a href="#230208" label="[23:02:08]">&lt;stikonas&gt;</a></span><span class="message">need to fix that first</span></div><div class="line" id="230230"><span class="nick" style="color:#8dd3c7"><a href="#230230" label="[23:02:30]">&lt;stikonas&gt;</a></span><span class="message">overridden stages are remembered from previous packages...</span></div><div class="line" id="230327"><span class="nick" style="color:#8dd3c7"><a href="#230327" label="[23:03:27]">&lt;stikonas&gt;</a></span><span class="message">and I removed subshell because it interfered with -e...</span></div><div class="line" id="230354"><span class="nick" style="color:#8dd3c7"><a href="#230354" label="[23:03:54]">&lt;stikonas&gt;</a></span><span class="message">I guess I can unset all functions at the end of build</span></div><div class="line" id="231354"><span class="nick" style="color:#8dd3c7"><a href="#231354" label="[23:13:54]">&lt;stikonas&gt;</a></span><span class="message">fossy: ok, pushed fix to <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/26">https://github.com/fosslinux/live-bootstrap/pull/26</a> </span></div><br /></div></body></html>