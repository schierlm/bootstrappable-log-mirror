<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2024-01-03.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="013139"><span class="nick" style="color:#389600"><a href="#013139" label="[01:31:39]">&lt;pder&gt;</a></span><span class="message">QEMU emulator version 8.2.0 (Debian 1:8.2.0+ds-1)</span></div><div class="line" id="013225"><span class="nick" style="color:#389600"><a href="#013225" label="[01:32:25]">&lt;pder&gt;</a></span><span class="message">Oddly on the same version of QEMU on the same distro- Debian unstable on a different machine I don't get the hang</span></div><div class="line" id="014239"><span class="nick" style="color:#8dd3c7"><a href="#014239" label="[01:42:39]">&lt;stikonas&gt;</a></span><span class="message">haven't made any progress with fixing stag0-posix issues in posix-runner, but at least I understood why mes fails to open any files</span></div><div class="line" id="014308"><span class="nick" style="color:#8dd3c7"><a href="#014308" label="[01:43:08]">&lt;stikonas&gt;</a></span><span class="message">turns out mes checks file descriptors against __FILEDES_MAX which is 4096...</span></div><div class="line" id="014332"><span class="nick" style="color:#8dd3c7"><a href="#014332" label="[01:43:32]">&lt;stikonas&gt;</a></span><span class="message">so there is no way it will be happy with pure UEFI file descriptors...</span></div><div class="line" id="014521"><span class="nick" style="color:#8dd3c7"><a href="#014521" label="[01:45:21]">&lt;stikonas&gt;</a></span><span class="message">perhaps I should look at abstracting descriptors to fix mes rather than stage0-posix issues</span></div><div class="line" id="014531"><span class="nick" style="color:#8dd3c7"><a href="#014531" label="[01:45:31]">&lt;stikonas&gt;</a></span><span class="message">since I'm getting confused with those...</span></div><div class="line" id="014537"><span class="nick" style="color:#2e2a4a"><a href="#014537" label="[01:45:37]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: darn, I was going to mention that to you when you talked about whether you needed per-process file descriptors.</span></div><div class="line" id="014623"><span class="nick" style="color:#2e2a4a"><a href="#014623" label="[01:46:23]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: sorry, it took me a long time to debug mes. it corrupts memory when you exceed __FILEDES_MAX... as you probably figured out</span></div><div class="line" id="014733"><span class="nick" style="color:#2e2a4a"><a href="#014733" label="[01:47:33]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: I remembered I increased that but ran into another problem later and decided there was no option but to implement per-process fds</span></div><div class="line" id="014816"><span class="nick" style="color:#2e2a4a"><a href="#014816" label="[01:48:16]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: I can't remember the issue off hand though, sorry</span></div><div class="line" id="015021"><span class="nick" style="color:#8dd3c7"><a href="#015021" label="[01:50:21]">&lt;stikonas&gt;</a></span><span class="message">yeah, no problem</span></div><div class="line" id="015029"><span class="nick" style="color:#8dd3c7"><a href="#015029" label="[01:50:29]">&lt;stikonas&gt;</a></span><span class="message">I&quot;ll keep it at 4096</span></div><div class="line" id="015203"><span class="nick" style="color:#8dd3c7"><a href="#015203" label="[01:52:03]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: it's impressive though how you managed to debug it all</span></div><div class="line" id="015327"><span class="nick" style="color:#2e2a4a"><a href="#015327" label="[01:53:27]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: I'm curious how you figured it out. I had to run detailed comparisons of linux vs builder-hex0 with detailed debug output.</span></div><div class="line" id="015346"><span class="nick" style="color:#8dd3c7"><a href="#015346" label="[01:53:46]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: well, I was just stepping in gdb dissassembly</span></div><div class="line" id="015409"><span class="nick" style="color:#8dd3c7"><a href="#015409" label="[01:54:09]">&lt;stikonas&gt;</a></span><span class="message">and gdb was returning larget file descriptor as is normal for UEFI</span></div><div class="line" id="015417"><span class="nick" style="color:#2e2a4a"><a href="#015417" label="[01:54:17]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: I think it took me like a week or two to find it manually - no debugger in builder-hex0 :(</span></div><div class="line" id="015423"><span class="nick" style="color:#8dd3c7"><a href="#015423" label="[01:54:23]">&lt;stikonas&gt;</a></span><span class="message">something like 0xBF53278</span></div><div class="line" id="015439"><span class="nick" style="color:#8dd3c7"><a href="#015439" label="[01:54:39]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: there is no debugger in posix-uefi either</span></div><div class="line" id="015442"><span class="nick" style="color:#8dd3c7"><a href="#015442" label="[01:54:42]">&lt;stikonas&gt;</a></span><span class="message">I just ran it in qemu</span></div><div class="line" id="015458"><span class="nick" style="color:#8dd3c7"><a href="#015458" label="[01:54:58]">&lt;stikonas&gt;</a></span><span class="message">so with something like qemu-system-x86_64 -cpu qemu64 -net none -m 4G -enable-kvm -drive if=pflash,format=raw,unit=0,file=/usr/share/edk2-ovmf/OVMF_CODE.fd,readonly=on -drive if=ide,format=raw,file=build/disk.img -monitor stdio -s</span></div><div class="line" id="015520"><span class="nick" style="color:#8dd3c7"><a href="#015520" label="[01:55:20]">&lt;stikonas&gt;</a></span><span class="message">then I inserted the following two lines in sys_call_3 function</span></div><div class="line" id="015532"><span class="nick" style="color:#8dd3c7"><a href="#015532" label="[01:55:32]">&lt;stikonas&gt;</a></span><span class="message">asm (&quot;:forever&quot;);</span></div><div class="line" id="015540"><span class="nick" style="color:#8dd3c7"><a href="#015540" label="[01:55:40]">&lt;stikonas&gt;</a></span><span class="message">asm (&quot;jmp32 %forever&quot;);</span></div><div class="line" id="015558"><span class="nick" style="color:#8dd3c7"><a href="#015558" label="[01:55:58]">&lt;stikonas&gt;</a></span><span class="message">so qemu ran it until it got stuck in syscall</span></div><div class="line" id="015608"><span class="nick" style="color:#8dd3c7"><a href="#015608" label="[01:56:08]">&lt;stikonas&gt;</a></span><span class="message">then I started gdb, typed &quot;target :1234&quot;</span></div><div class="line" id="015625"><span class="nick" style="color:#8dd3c7"><a href="#015625" label="[01:56:25]">&lt;stikonas&gt;</a></span><span class="message">layout asm followed by layout regs</span></div><div class="line" id="015658"><span class="nick" style="color:#8dd3c7"><a href="#015658" label="[01:56:58]">&lt;stikonas&gt;</a></span><span class="message">and jump out of the forever loop with break *address_of_next_line and jump *address_of_next_line</span></div><div class="line" id="020252"><span class="nick" style="color:#2e2a4a"><a href="#020252" label="[02:02:52]">&lt;rickmasters&gt;</a></span><span class="message">hmm, well tracking it back to memory corruption is what took me so long...</span></div><div class="line" id="020455"><span class="nick" style="color:#2e2a4a"><a href="#020455" label="[02:04:55]">&lt;rickmasters&gt;</a></span><span class="message">anyway, I think maybe what led me to per-process file descriptors was that a process was reading the same file multiple times concurrently</span></div><div class="line" id="020509"><span class="nick" style="color:#8dd3c7"><a href="#020509" label="[02:05:09]">&lt;stikonas&gt;</a></span><span class="message">yaeh, I might hit that too</span></div><div class="line" id="020527"><span class="nick" style="color:#2e2a4a"><a href="#020527" label="[02:05:27]">&lt;rickmasters&gt;</a></span><span class="message">and there were two read offsets that needed to be maintained separately</span></div><div class="line" id="020550"><span class="nick" style="color:#8dd3c7"><a href="#020550" label="[02:05:50]">&lt;stikonas&gt;</a></span><span class="message">hmm, that might be tricky</span></div><div class="line" id="020609"><span class="nick" style="color:#8dd3c7"><a href="#020609" label="[02:06:09]">&lt;stikonas&gt;</a></span><span class="message">cause right now I'm just offloading it to UEFI...</span></div><div class="line" id="020617"><span class="nick" style="color:#2e2a4a"><a href="#020617" label="[02:06:17]">&lt;rickmasters&gt;</a></span><span class="message">but I was using a global table and returning an index to that table and the table only had one current offset being maintained</span></div><div class="line" id="020657"><span class="nick" style="color:#8dd3c7"><a href="#020657" label="[02:06:57]">&lt;stikonas&gt;</a></span><span class="message">well, I'll see if I hit this</span></div><div class="line" id="020704"><span class="nick" style="color:#8dd3c7"><a href="#020704" label="[02:07:04]">&lt;stikonas&gt;</a></span><span class="message">was it in mes?</span></div><div class="line" id="020745"><span class="nick" style="color:#8dd3c7"><a href="#020745" label="[02:07:45]">&lt;stikonas&gt;</a></span><span class="message">I don't think stage0-posix opens multiple files at the same time</span></div><div class="line" id="020812"><span class="nick" style="color:#2e2a4a"><a href="#020812" label="[02:08:12]">&lt;rickmasters&gt;</a></span><span class="message">no, it was definitely mes or tcc</span></div><div class="line" id="020835"><span class="nick" style="color:#8dd3c7"><a href="#020835" label="[02:08:35]">&lt;stikonas&gt;</a></span><span class="message">well, those are a must to run...</span></div><div class="line" id="020842"><span class="nick" style="color:#8dd3c7"><a href="#020842" label="[02:08:42]">&lt;stikonas&gt;</a></span><span class="message">I can skip stage0-posix with my kernel...</span></div><div class="line" id="020915"><span class="nick" style="color:#2e2a4a"><a href="#020915" label="[02:09:15]">&lt;rickmasters&gt;</a></span><span class="message">it was an issue with reading headers that read other headers</span></div><div class="line" id="020959"><span class="nick" style="color:#2e2a4a"><a href="#020959" label="[02:09:59]">&lt;rickmasters&gt;</a></span><span class="message">it would circle back to the same header and screw up the previous offset</span></div><div class="line" id="021008"><span class="nick" style="color:#8dd3c7"><a href="#021008" label="[02:10:08]">&lt;stikonas&gt;</a></span><span class="message">argh, ugly...</span></div><div class="line" id="021024"><span class="nick" style="color:#8dd3c7"><a href="#021024" label="[02:10:24]">&lt;stikonas&gt;</a></span><span class="message">hmm perhaps I'll have to keep track all offsets</span></div><div class="line" id="021032"><span class="nick" style="color:#8dd3c7"><a href="#021032" label="[02:10:32]">&lt;stikonas&gt;</a></span><span class="message">and save them when forking</span></div><div class="line" id="021051"><span class="nick" style="color:#8dd3c7"><a href="#021051" label="[02:10:51]">&lt;stikonas&gt;</a></span><span class="message">and then reset then when restoring process...</span></div><div class="line" id="021117"><span class="nick" style="color:#2e2a4a"><a href="#021117" label="[02:11:17]">&lt;rickmasters&gt;</a></span><span class="message">does uefi allow opening the same file twice and maintaining different read offsets separately?</span></div><div class="line" id="021139"><span class="nick" style="color:#8dd3c7"><a href="#021139" label="[02:11:39]">&lt;stikonas&gt;</a></span><span class="message">hmm, no idea</span></div><div class="line" id="021148"><span class="nick" style="color:#8dd3c7"><a href="#021148" label="[02:11:48]">&lt;stikonas&gt;</a></span><span class="message">need to check specs...</span></div><div class="line" id="021222"><span class="nick" style="color:#2e2a4a"><a href="#021222" label="[02:12:22]">&lt;rickmasters&gt;</a></span><span class="message">well, I'm assuming that's what you'd do - every open gets its own independent file descriptor from UEFI</span></div><div class="line" id="021258"><span class="nick" style="color:#8dd3c7"><a href="#021258" label="[02:12:58]">&lt;stikonas&gt;</a></span><span class="message">doesn't say anything about that... <a rel="nofollow" href="https://uefi.org/specs/UEFI/2.10/13_Protocols_Media_Access.html#efi-file-protocol-open">https://uefi.org/specs/UEFI/2.10/13_Protocols_Media_Access.html#efi-file-protocol-open</a> </span></div><div class="line" id="021309"><span class="nick" style="color:#8dd3c7"><a href="#021309" label="[02:13:09]">&lt;stikonas&gt;</a></span><span class="message">but hopefully you are right</span></div><div class="line" id="021335"><span class="nick" style="color:#8dd3c7"><a href="#021335" label="[02:13:35]">&lt;stikonas&gt;</a></span><span class="message">if so then it might make job simpler</span></div><div class="line" id="021905"><span class="nick" style="color:#2e2a4a"><a href="#021905" label="[02:19:05]">&lt;rickmasters&gt;</a></span><span class="message">so builder-hex0 has all the file descriptor abstraction/indirection you'd probably need if you want to use that for reference...</span></div><div class="line" id="022051"><span class="nick" style="color:#2e2a4a"><a href="#022051" label="[02:20:51]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: you just need a table with the UEFI handle and current_offset</span></div><div class="line" id="022124"><span class="nick" style="color:#2e2a4a"><a href="#022124" label="[02:21:24]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: but you've got to maintain the current offset on all I/O</span></div><div class="line" id="022303"><span class="nick" style="color:#8dd3c7"><a href="#022303" label="[02:23:03]">&lt;stikonas&gt;</a></span><span class="message">yeah, I'll take a look, though it might take some time</span></div><div class="line" id="022355"><span class="nick" style="color:#8dd3c7"><a href="#022355" label="[02:23:55]">&lt;stikonas&gt;</a></span><span class="message">probably makes sense to build it step by step</span></div><div class="line" id="022418"><span class="nick" style="color:#8dd3c7"><a href="#022418" label="[02:24:18]">&lt;stikonas&gt;</a></span><span class="message">first I'll start with per-process map of UEFI fds to small fds that are smaller than FILEDES_MAX</span></div><div class="line" id="022446"><span class="nick" style="color:#2e2a4a"><a href="#022446" label="[02:24:46]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: maybe you can leverage UEFI to handle offsets. it has SetPosition, GetPosition apparently</span></div><div class="line" id="022457"><span class="nick" style="color:#8dd3c7"><a href="#022457" label="[02:24:57]">&lt;stikonas&gt;</a></span><span class="message">well, that's what I was doing up till now</span></div><div class="line" id="022509"><span class="nick" style="color:#8dd3c7"><a href="#022509" label="[02:25:09]">&lt;stikonas&gt;</a></span><span class="message">which is why I was saying it might make my job much easier</span></div><div class="line" id="022516"><span class="nick" style="color:#8dd3c7"><a href="#022516" label="[02:25:16]">&lt;stikonas&gt;</a></span><span class="message">if UEFI can open same file multiple times</span></div><div class="line" id="022636"><span class="nick" style="color:#8dd3c7"><a href="#022636" label="[02:26:36]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: yeah, we are already using these two functions: <a rel="nofollow" href="https://github.com/oriansj/M2libc/blob/80d32745dcab5b21683ed3e79e943b158397c224/uefi/unistd.c#L237">https://github.com/oriansj/M2libc/blob/80d32745dcab5b21683ed3e79e943b158397c224/uefi/unistd.c#L237</a> </span></div><div class="line" id="022711"><span class="nick" style="color:#8dd3c7"><a href="#022711" label="[02:27:11]">&lt;stikonas&gt;</a></span><span class="message">posix-runner has a lot of complexity hidden in M2libc...</span></div><div class="line" id="022749"><span class="nick" style="color:#8dd3c7"><a href="#022749" label="[02:27:49]">&lt;stikonas&gt;</a></span><span class="message">half of the syscalls are just one-line wrappers, e.g. <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi/src/branch/posix-runner/posix-runner/posix-runner.c#L134">https://git.stikonas.eu/andrius/stage0-uefi/src/branch/posix-runner/posix-runner/posix-runner.c#L134</a> </span></div><div class="line" id="023159"><span class="nick" style="color:#2e2a4a"><a href="#023159" label="[02:31:59]">&lt;rickmasters&gt;</a></span><span class="message">I see you've got a good start on fork/exec/waitpid. That's black magic.</span></div><div class="line" id="023228"><span class="nick" style="color:#8dd3c7"><a href="#023228" label="[02:32:28]">&lt;stikonas&gt;</a></span><span class="message">it's a good start but I think it's still buggy...</span></div><div class="line" id="023236"><span class="nick" style="color:#8dd3c7"><a href="#023236" label="[02:32:36]">&lt;stikonas&gt;</a></span><span class="message">and I spend a few hours staring at it</span></div><div class="line" id="023239"><span class="nick" style="color:#8dd3c7"><a href="#023239" label="[02:32:39]">&lt;stikonas&gt;</a></span><span class="message">and trying various things</span></div><div class="line" id="023244"><span class="nick" style="color:#8dd3c7"><a href="#023244" label="[02:32:44]">&lt;stikonas&gt;</a></span><span class="message">but couldn't find the bug</span></div><div class="line" id="023305"><span class="nick" style="color:#8dd3c7"><a href="#023305" label="[02:33:05]">&lt;stikonas&gt;</a></span><span class="message">well, you probably spent weeks debugging those things...</span></div><div class="line" id="023321"><span class="nick" style="color:#8dd3c7"><a href="#023321" label="[02:33:21]">&lt;stikonas&gt;</a></span><span class="message">and your had assembly code...</span></div><div class="line" id="023346"><span class="nick" style="color:#8dd3c7"><a href="#023346" label="[02:33:46]">&lt;stikonas&gt;</a></span><span class="message">though C makes some lower level stuff a bit more complex...</span></div><div class="line" id="023354"><span class="nick" style="color:#8dd3c7"><a href="#023354" label="[02:33:54]">&lt;stikonas&gt;</a></span><span class="message">especially when you need to deal with things like stack</span></div><div class="line" id="023453"><span class="nick" style="color:#8dd3c7"><a href="#023453" label="[02:34:53]">&lt;stikonas&gt;</a></span><span class="message">anyway, right now I am able to run way more stuff directly than via kaem</span></div><div class="line" id="023456"><span class="nick" style="color:#2e2a4a"><a href="#023456" label="[02:34:56]">&lt;rickmasters&gt;</a></span><span class="message">yeah it was extremely difficult and I ran into a lot of problems getting it working.</span></div><div class="line" id="023516"><span class="nick" style="color:#8dd3c7"><a href="#023516" label="[02:35:16]">&lt;stikonas&gt;</a></span><span class="message">so there must be something still wrong in fork/execve/waitpid...</span></div><div class="line" id="023530"><span class="nick" style="color:#8dd3c7"><a href="#023530" label="[02:35:30]">&lt;stikonas&gt;</a></span><span class="message">I've tried zeroing brk memory</span></div><div class="line" id="023535"><span class="nick" style="color:#8dd3c7"><a href="#023535" label="[02:35:35]">&lt;stikonas&gt;</a></span><span class="message">btu that causes me even more problems</span></div><div class="line" id="023540"><span class="nick" style="color:#8dd3c7"><a href="#023540" label="[02:35:40]">&lt;stikonas&gt;</a></span><span class="message">no idea why...</span></div><div class="line" id="023546"><span class="nick" style="color:#8dd3c7"><a href="#023546" label="[02:35:46]">&lt;stikonas&gt;</a></span><span class="message">perhaps some other bug is triggered</span></div><div class="line" id="023624"><span class="nick" style="color:#8dd3c7"><a href="#023624" label="[02:36:24]">&lt;stikonas&gt;</a></span><span class="message">(well, right now it is zeroied for the first process but not on execve or brk syscalls....)</span></div><div class="line" id="023726"><span class="nick" style="color:#2e2a4a"><a href="#023726" label="[02:37:26]">&lt;rickmasters&gt;</a></span><span class="message">there are some dark corners around copying and restoring chunks of the stck. it was somewhat miraculous that it works as well as it does.</span></div><div class="line" id="023735"><span class="nick" style="color:#2e2a4a"><a href="#023735" label="[02:37:35]">&lt;rickmasters&gt;</a></span><span class="message">*stack</span></div><div class="line" id="023755"><span class="nick" style="color:#2e2a4a"><a href="#023755" label="[02:37:55]">&lt;rickmasters&gt;</a></span><span class="message">maybe it doesn't work as well with UEFI</span></div><div class="line" id="023801"><span class="nick" style="color:#8dd3c7"><a href="#023801" label="[02:38:01]">&lt;stikonas&gt;</a></span><span class="message">it should...</span></div><div class="line" id="023812"><span class="nick" style="color:#8dd3c7"><a href="#023812" label="[02:38:12]">&lt;stikonas&gt;</a></span><span class="message">we are not using UEFI stack actually at all</span></div><div class="line" id="023823"><span class="nick" style="color:#8dd3c7"><a href="#023823" label="[02:38:23]">&lt;stikonas&gt;</a></span><span class="message">so UEFI stack is quite small, I think only 128 KiB</span></div><div class="line" id="023845"><span class="nick" style="color:#8dd3c7"><a href="#023845" label="[02:38:45]">&lt;stikonas&gt;</a></span><span class="message">so even in stage0-uefi I had to request another memory area that I'm using as stack</span></div><div class="line" id="023850"><span class="nick" style="color:#8dd3c7"><a href="#023850" label="[02:38:50]">&lt;stikonas&gt;</a></span><span class="message">and UEFI was happy with that</span></div><div class="line" id="024032"><span class="nick" style="color:#8dd3c7"><a href="#024032" label="[02:40:32]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: at the very least after all this I'll better understand how builder-hex0 works...</span></div><div class="line" id="024056"><span class="nick" style="color:#8dd3c7"><a href="#024056" label="[02:40:56]">&lt;stikonas&gt;</a></span><span class="message">before that I didn't have enough time to dive into its internals</span></div><div class="line" id="024105"><span class="nick" style="color:#2e2a4a"><a href="#024105" label="[02:41:05]">&lt;rickmasters&gt;</a></span><span class="message">So, the one thing I'm not clear on... the memory models of processes in builder-hex0 assumes a specific memory range, but</span></div><div class="line" id="024129"><span class="nick" style="color:#2e2a4a"><a href="#024129" label="[02:41:29]">&lt;rickmasters&gt;</a></span><span class="message">how do you make the same assurances with UEFI and how do you know UEFI is not using the memory?</span></div><div class="line" id="024229"><span class="nick" style="color:#8dd3c7"><a href="#024229" label="[02:42:29]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: I have to request memory from UEFI using allocatepages</span></div><div class="line" id="024238"><span class="nick" style="color:#8dd3c7"><a href="#024238" label="[02:42:38]">&lt;stikonas&gt;</a></span><span class="message">(which is abstracted into malloc in M2libc)</span></div><div class="line" id="024301"><span class="nick" style="color:#8dd3c7"><a href="#024301" label="[02:43:01]">&lt;stikonas&gt;</a></span><span class="message">so all the calls to malloc/calloc in posix-runner.c actually request memory from UEFI</span></div><div class="line" id="024310"><span class="nick" style="color:#8dd3c7"><a href="#024310" label="[02:43:10]">&lt;stikonas&gt;</a></span><span class="message">but we have no control of where it is</span></div><div class="line" id="024325"><span class="nick" style="color:#8dd3c7"><a href="#024325" label="[02:43:25]">&lt;stikonas&gt;</a></span><span class="message">luckily  though on AMD64 it is much easier to have position independent binaries</span></div><div class="line" id="024340"><span class="nick" style="color:#2e2a4a"><a href="#024340" label="[02:43:40]">&lt;rickmasters&gt;</a></span><span class="message">oh that was my next question. PIE, yay</span></div><div class="line" id="024349"><span class="nick" style="color:#8dd3c7"><a href="#024349" label="[02:43:49]">&lt;stikonas&gt;</a></span><span class="message">i.e. M2-Planet uses stuff like lea rax, [rip+label]</span></div><div class="line" id="024402"><span class="nick" style="color:#8dd3c7"><a href="#024402" label="[02:44:02]">&lt;stikonas&gt;</a></span><span class="message">rather than loading absolute address of label</span></div><div class="line" id="024412"><span class="nick" style="color:#8dd3c7"><a href="#024412" label="[02:44:12]">&lt;stikonas&gt;</a></span><span class="message">I'm not sure if mescc supports PIE</span></div><div class="line" id="024415"><span class="nick" style="color:#8dd3c7"><a href="#024415" label="[02:44:15]">&lt;stikonas&gt;</a></span><span class="message">we might need ot fix that</span></div><div class="line" id="024434"><span class="nick" style="color:#8dd3c7"><a href="#024434" label="[02:44:34]">&lt;stikonas&gt;</a></span><span class="message">so basically binaries are loaded into whereever UEFI allows</span></div><div class="line" id="024448"><span class="nick" style="color:#8dd3c7"><a href="#024448" label="[02:44:48]">&lt;stikonas&gt;</a></span><span class="message">and I just jump into that code</span></div><div class="line" id="024512"><span class="nick" style="color:#8dd3c7"><a href="#024512" label="[02:45:12]">&lt;stikonas&gt;</a></span><span class="message">(before that I also have to set model specific registers with the address of syscall handler)</span></div><div class="line" id="024724"><span class="nick" style="color:#8dd3c7"><a href="#024724" label="[02:47:24]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: there were some annoying hangs on UEFI after returning from syscall (due to syscall chaning SS and CS registers)</span></div><div class="line" id="024731"><span class="nick" style="color:#8dd3c7"><a href="#024731" label="[02:47:31]">&lt;stikonas&gt;</a></span><span class="message">but luckily I was able to adjust it <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi/src/commit/6bf7bafb504ad3ec4b51b27275fdb3cd66352a50/posix-runner/posix-runner.c#L348">https://git.stikonas.eu/andrius/stage0-uefi/src/commit/6bf7bafb504ad3ec4b51b27275fdb3cd66352a50/posix-runner/posix-runner.c#L348</a> </span></div><div class="line" id="024819"><span class="nick" style="color:#8dd3c7"><a href="#024819" label="[02:48:19]">&lt;stikonas&gt;</a></span><span class="message">I guess this syscall stuff is a bit different on x86_64...</span></div><div class="line" id="024839"><span class="nick" style="color:#8dd3c7"><a href="#024839" label="[02:48:39]">&lt;stikonas&gt;</a></span><span class="message">you had to use int 0x80...</span></div><div class="line" id="025340"><span class="nick" style="color:#2e2a4a"><a href="#025340" label="[02:53:40]">&lt;rickmasters&gt;</a></span><span class="message">well, I wish I had circled back to clean up or document that code better. I bet its been a challenge to decipher.</span></div><div class="line" id="025354"><span class="nick" style="color:#8dd3c7"><a href="#025354" label="[02:53:54]">&lt;stikonas&gt;</a></span><span class="message">well, I haven't looked at the whole thing</span></div><div class="line" id="025426"><span class="nick" style="color:#8dd3c7"><a href="#025426" label="[02:54:26]">&lt;stikonas&gt;</a></span><span class="message">but the things I looked at where alright</span></div><div class="line" id="025511"><span class="nick" style="color:#8dd3c7"><a href="#025511" label="[02:55:11]">&lt;stikonas&gt;</a></span><span class="message">anyway, posix-runner.c would at least act as some kind of high level prototype to builder-hex0 if somebody wants to first understand it at higher level before diving in</span></div><div class="line" id="025531"><span class="nick" style="color:#8dd3c7"><a href="#025531" label="[02:55:31]">&lt;stikonas&gt;</a></span><span class="message">it's the wrong order chronologically but oh well</span></div><div class="line" id="030026"><span class="nick" style="color:#2e2a4a"><a href="#030026" label="[03:00:26]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: so the way I was thinking of doing the UEFI posix OS was to read all files into memory, exit UEFI entirely, then take over interrupts, etc</span></div><div class="line" id="030037"><span class="nick" style="color:#2e2a4a"><a href="#030037" label="[03:00:37]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: to mimic builder-hex0 more directly</span></div><div class="line" id="030055"><span class="nick" style="color:#8dd3c7"><a href="#030055" label="[03:00:55]">&lt;stikonas&gt;</a></span><span class="message">well, that's another option</span></div><div class="line" id="030105"><span class="nick" style="color:#8dd3c7"><a href="#030105" label="[03:01:05]">&lt;stikonas&gt;</a></span><span class="message">but Googulator suggested the current approach</span></div><div class="line" id="030116"><span class="nick" style="color:#8dd3c7"><a href="#030116" label="[03:01:16]">&lt;stikonas&gt;</a></span><span class="message">otherwise we need to implement more drivers</span></div><div class="line" id="030154"><span class="nick" style="color:#8dd3c7"><a href="#030154" label="[03:01:54]">&lt;stikonas&gt;</a></span><span class="message">such as output to screen</span></div><div class="line" id="030154"><span class="nick" style="color:#8dd3c7"><a href="#030154" label="[03:01:54]">&lt;stikonas&gt;</a></span><span class="message">though a lot of code would be common</span></div><div class="line" id="030154"><span class="nick" style="color:#8dd3c7"><a href="#030154" label="[03:01:54]">&lt;stikonas&gt;</a></span><span class="message">if somebody wants to do the other way</span></div><div class="line" id="030228"><span class="nick" style="color:#2e2a4a"><a href="#030228" label="[03:02:28]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: I don't know enough about UEFI to know which makes the most sense; just thinking out loud</span></div><div class="line" id="030248"><span class="nick" style="color:#8dd3c7"><a href="#030248" label="[03:02:48]">&lt;stikonas&gt;</a></span><span class="message">anyway, it's getting late here</span></div><div class="line" id="030314"><span class="nick" style="color:#8dd3c7"><a href="#030314" label="[03:03:14]">&lt;stikonas&gt;</a></span><span class="message">we can discuss more some other time</span></div><div class="line" id="030314"><span class="nick" style="color:#2e2a4a"><a href="#030314" label="[03:03:14]">&lt;rickmasters&gt;</a></span><span class="message">ok</span></div><div class="line" id="032905"><span class="nick" style="color:#6b8072"><a href="#032905" label="[03:29:05]">&lt;Googulator&gt;</a></span><span class="message">an important caveat is that ExitBootServices also kills access to GOP beyond a simple framebuffer</span></div><div class="line" id="032949"><span class="nick" style="color:#6b8072"><a href="#032949" label="[03:29:49]">&lt;Googulator&gt;</a></span><span class="message">&amp; I'm not sure if you can set up a text-mode &quot;frame&quot;-buffer using GOP that can be used afterwards</span></div><div class="line" id="033117"><span class="nick" style="color:#6b8072"><a href="#033117" label="[03:31:17]">&lt;Googulator&gt;</a></span><span class="message">so if we go for early ExitBootServices, that might require implementing an fbconsole in the kernel</span></div><div class="line" id="033128"><span class="nick" style="color:#6b8072"><a href="#033128" label="[03:31:28]">&lt;Googulator&gt;</a></span><span class="message">which means, *fonts*</span></div><div class="line" id="033201"><span class="nick" style="color:#6b8072"><a href="#033201" label="[03:32:01]">&lt;Googulator&gt;</a></span><span class="message">which is not easy to do in hex0</span></div><div class="line" id="033401"><span class="nick" style="color:#6b8072"><a href="#033401" label="[03:34:01]">&lt;Googulator&gt;</a></span><span class="message">pder: try setting qemu machine type to &quot;pc-i440fx-6.2&quot;</span></div><div class="line" id="033444"><span class="nick" style="color:#6b8072"><a href="#033444" label="[03:34:44]">&lt;Googulator&gt;</a></span><span class="message">that's the default in 6.2</span></div><div class="line" id="033458"><span class="nick" style="color:#6b8072"><a href="#033458" label="[03:34:58]">&lt;Googulator&gt;</a></span><span class="message">8.2 might have changed the default to pc-q35 instead</span></div><div class="line" id="033757"><span class="nick" style="color:#80b1d3"><a href="#033757" label="[03:37:57]">&lt;oriansj&gt;</a></span><span class="message">I agree with rickmasters; you'll probably have an easier time with your POSIX skipping UEFI as much as possible. Use UEFI only to load the files you need into memory and ExitBootServices. VGA direct access isn't complicated (I even already have code for that) just use address 0xB8000 and Entries in the VGA buffer take the binary form CCCCCCCCBBBBFFFF (B is the background color, F is the foreground color and C is the ASCII character)</span></div><div class="line" id="033905"><span class="nick" style="color:#80b1d3"><a href="#033905" label="[03:39:05]">&lt;oriansj&gt;</a></span><span class="message">just remember 80 rows and 25 columns by default</span></div><div class="line" id="034106"><span class="nick" style="color:#80b1d3"><a href="#034106" label="[03:41:06]">&lt;oriansj&gt;</a></span><span class="message">then int index = ((VGA_COLS * row) + col) &lt;&lt; 1; buffer[index + 1] = color; buffer[index] = character_you_wish_to_write;</span></div><div class="line" id="034133"><span class="nick" style="color:#6b8072"><a href="#034133" label="[03:41:33]">&lt;Googulator&gt;</a></span><span class="message">oriansj: that will only work if the GOP driver leaves the GPU in a VGA emulation mode</span></div><div class="line" id="034146"><span class="nick" style="color:#80b1d3"><a href="#034146" label="[03:41:46]">&lt;oriansj&gt;</a></span><span class="message">(I susggest 0x0C for the color of errors and 0x0A for regular messages)</span></div><div class="line" id="034148"><span class="nick" style="color:#6b8072"><a href="#034148" label="[03:41:48]">&lt;Googulator&gt;</a></span><span class="message">most modern GOPs don't</span></div><div class="line" id="034202"><span class="nick" style="color:#80b1d3"><a href="#034202" label="[03:42:02]">&lt;oriansj&gt;</a></span><span class="message">Googulator: seriously?</span></div><div class="line" id="034207"><span class="nick" style="color:#6b8072"><a href="#034207" label="[03:42:07]">&lt;Googulator&gt;</a></span><span class="message">they switch to a VESA graphical mode</span></div><div class="line" id="034215"><span class="nick" style="color:#6b8072"><a href="#034215" label="[03:42:15]">&lt;Googulator&gt;</a></span><span class="message">since that's what most bootloaders expect</span></div><div class="line" id="034227"><span class="nick" style="color:#80b1d3"><a href="#034227" label="[03:42:27]">&lt;oriansj&gt;</a></span><span class="message">well that isn't much more complicated</span></div><div class="line" id="034301"><span class="nick" style="color:#6b8072"><a href="#034301" label="[03:43:01]">&lt;Googulator&gt;</a></span><span class="message">&amp; of course you can't just call VBIOS to set up a text mode again... because *there's no VBIOS*</span></div><div class="line" id="034347"><span class="nick" style="color:#6b8072"><a href="#034347" label="[03:43:47]">&lt;Googulator&gt;</a></span><span class="message">so to render text, you need code to convert that text into pixels</span></div><div class="line" id="034423"><span class="nick" style="color:#80b1d3"><a href="#034423" label="[03:44:23]">&lt;oriansj&gt;</a></span><span class="message">thank god it is easy to do in C</span></div><div class="line" id="034429"><span class="nick" style="color:#6b8072"><a href="#034429" label="[03:44:29]">&lt;Googulator&gt;</a></span><span class="message">UEFI itself has code for doing that - but it's part of boot services, not runtime</span></div><div class="line" id="034453"><span class="nick" style="color:#2e2a4a"><a href="#034453" label="[03:44:53]">&lt;rickmasters&gt;</a></span><span class="message">orianjs: well stikonas has done a lot so far so I'd probably see how the UEFI path plays out at this point.</span></div><div class="line" id="034524"><span class="nick" style="color:#80b1d3"><a href="#034524" label="[03:45:24]">&lt;oriansj&gt;</a></span><span class="message">of course, who does decides.</span></div><div class="line" id="034529"><span class="nick" style="color:#6b8072"><a href="#034529" label="[03:45:29]">&lt;Googulator&gt;</a></span><span class="message">I wonder if Fiwix even supports an FB console</span></div><div class="line" id="034624"><span class="nick" style="color:#6b8072"><a href="#034624" label="[03:46:24]">&lt;Googulator&gt;</a></span><span class="message">right now, it writes text data into VGA RAM using the previously set up text mode</span></div><div class="line" id="034723"><span class="nick" style="color:#6b8072"><a href="#034723" label="[03:47:23]">&lt;Googulator&gt;</a></span><span class="message">on top of that, on modern systems, there's no guarantee that the display output IP even supports a native text mode in hardware</span></div><div class="line" id="034731"><span class="nick" style="color:#2e2a4a"><a href="#034731" label="[03:47:31]">&lt;rickmasters&gt;</a></span><span class="message">I don't know but he's got this: <a rel="nofollow" href="https://github.com/mikaku/Fiwix/blob/master/drivers/video/fbcon.c">https://github.com/mikaku/Fiwix/blob/master/drivers/video/fbcon.c</a> </span></div><div class="line" id="034734"><span class="nick" style="color:#6b8072"><a href="#034734" label="[03:47:34]">&lt;Googulator&gt;</a></span><span class="message">(RK3588's VOP certainly doesn't)</span></div><div class="line" id="034808"><span class="nick" style="color:#6b8072"><a href="#034808" label="[03:48:08]">&lt;Googulator&gt;</a></span><span class="message">&quot;draw_glyph&quot;</span></div><div class="line" id="034811"><span class="nick" style="color:#6b8072"><a href="#034811" label="[03:48:11]">&lt;Googulator&gt;</a></span><span class="message">that sounds promising</span></div><div class="line" id="034924"><span class="nick" style="color:#6b8072"><a href="#034924" label="[03:49:24]">&lt;Googulator&gt;</a></span><span class="message">yesterday, I was running bare metal builds on 2 separate boards connected to the same display, switching between inputs to see both - I kept forgetting which board I was seeing...</span></div><div class="line" id="034925"><span class="nick" style="color:#2e2a4a"><a href="#034925" label="[03:49:25]">&lt;rickmasters&gt;</a></span><span class="message">Well, I assume we've got to move to a real kernel at some point, I can't imaging Fiwix being just be a UEFI proxy</span></div><div class="line" id="034953"><span class="nick" style="color:#6b8072"><a href="#034953" label="[03:49:53]">&lt;Googulator&gt;</a></span><span class="message">until I realized I can tell because one board (Intel GPU) used an angular font, the other (Nvidia) a lot more rounded</span></div><div class="line" id="035027"><span class="nick" style="color:#6b8072"><a href="#035027" label="[03:50:27]">&lt;Googulator&gt;</a></span><span class="message">because Fiwix was relying on the GPU's VGA compatibility hardware &amp; VBIOS to render glyphs</span></div><div class="line" id="035037"><span class="nick" style="color:#6b8072"><a href="#035037" label="[03:50:37]">&lt;Googulator&gt;</a></span><span class="message">you can't do that on UEFI</span></div><div class="line" id="035209"><span class="nick" style="color:#6b8072"><a href="#035209" label="[03:52:09]">&lt;Googulator&gt;</a></span><span class="message">but it's good news that if you set up a graphics mode &amp; tell Fiwix to use it, it can render glyphs on its own</span></div><div class="line" id="035238"><span class="nick" style="color:#6b8072"><a href="#035238" label="[03:52:38]">&lt;Googulator&gt;</a></span><span class="message">doing that pre-Fiwix without UEFI boot services is the challenge</span></div><div class="line" id="035300"><span class="nick" style="color:#6b8072"><a href="#035300" label="[03:53:00]">&lt;Googulator&gt;</a></span><span class="message">especially if &quot;pre-Fiwix&quot; means &quot;in hex0/hex2&quot;</span></div><div class="line" id="035328"><span class="nick" style="color:#6b8072"><a href="#035328" label="[03:53:28]">&lt;Googulator&gt;</a></span><span class="message">you have to encode a font in hex0/hex2 somehow, without blowing up file sizes too much</span></div><div class="line" id="035428"><span class="nick" style="color:#6b8072"><a href="#035428" label="[03:54:28]">&lt;Googulator&gt;</a></span><span class="message">implementing blt is the easy part probably</span></div><div class="line" id="035447"><span class="nick" style="color:#2e2a4a"><a href="#035447" label="[03:54:47]">&lt;rickmasters&gt;</a></span><span class="message">well, we've already got UEFI way past hex0/hex2, so any transition could leverage the highest compiler.</span></div><div class="line" id="035603"><span class="nick" style="color:#6b8072"><a href="#035603" label="[03:56:03]">&lt;Googulator&gt;</a></span><span class="message">are we at the point where we can directly load binary data from a file (i.e. a font)?</span></div><div class="line" id="035629"><span class="nick" style="color:#6b8072"><a href="#035629" label="[03:56:29]">&lt;Googulator&gt;</a></span><span class="message">because just having C doesn't help that much, it would just mean encoding fonts in C rather than hex2</span></div><div class="line" id="035655"><span class="nick" style="color:#6b8072"><a href="#035655" label="[03:56:55]">&lt;Googulator&gt;</a></span><span class="message">unless you can split font data out of source files</span></div><div class="line" id="035845"><span class="nick" style="color:#6b8072"><a href="#035845" label="[03:58:45]">&lt;Googulator&gt;</a></span><span class="message">once fonts are solved, I agree it's fairly easy to implement an fbconsole using blt</span></div><div class="line" id="035901"><span class="nick" style="color:#6b8072"><a href="#035901" label="[03:59:01]">&lt;Googulator&gt;</a></span><span class="message">blt can take care of scrolling, as well as drawing new glyphs</span></div><div class="line" id="035917"><span class="nick" style="color:#80b1d3"><a href="#035917" label="[03:59:17]">&lt;oriansj&gt;</a></span><span class="message">Googulator: we could build a font source to C data like convert cat.png -define h:format=bgra -depth 8 cat.h does</span></div><div class="line" id="035956"><span class="nick" style="color:#80b1d3"><a href="#035956" label="[03:59:56]">&lt;oriansj&gt;</a></span><span class="message">or add the ability to embed binary files in M2-Planet output</span></div><div class="line" id="040011"><span class="nick" style="color:#80b1d3"><a href="#040011" label="[04:00:11]">&lt;oriansj&gt;</a></span><span class="message">(which strangely would be quite simple to do)</span></div><div class="line" id="040042"><span class="nick" style="color:#6b8072"><a href="#040042" label="[04:00:42]">&lt;Googulator&gt;</a></span><span class="message">&quot;#binclude&quot;</span></div><div class="line" id="040117"><span class="nick" style="color:#2e2a4a"><a href="#040117" label="[04:01:17]">&lt;rickmasters&gt;</a></span><span class="message">well, Fiwix puts the fonts in C: <a rel="nofollow" href="https://github.com/mikaku/Fiwix/blob/master/drivers/video/font-lat9-8x8.c">https://github.com/mikaku/Fiwix/blob/master/drivers/video/font-lat9-8x8.c</a> </span></div><div class="line" id="040147"><span class="nick" style="color:#80b1d3"><a href="#040147" label="[04:01:47]">&lt;oriansj&gt;</a></span><span class="message">I believe it would be the new #embed keyword in C</span></div><div class="line" id="040332"><span class="nick" style="color:#2e2a4a"><a href="#040332" label="[04:03:32]">&lt;rickmasters&gt;</a></span><span class="message">I think trying to use UEFI up to compiling an launching Fiwix seems like the straightforward plan...</span></div><div class="line" id="040617"><span class="nick" style="color:#2e2a4a"><a href="#040617" label="[04:06:17]">&lt;rickmasters&gt;</a></span><span class="message">I was skeptical that would be possible but what stikonas has looks promising and avoids reimplementing video services before Fiwix.</span></div><div class="line" id="041641"><span class="nick" style="color:#6b8072"><a href="#041641" label="[04:16:41]">&lt;Googulator&gt;</a></span><span class="message">Fiwix itself will need changes to support scaling fonts, as you can't assume 8x8 fonts will be readable on a modern machine with UEFI</span></div><div class="line" id="041832"><span class="nick" style="color:#6b8072"><a href="#041832" label="[04:18:32]">&lt;Googulator&gt;</a></span><span class="message">UEFI might hand off with a 4K framebuffer</span></div><div class="line" id="043401"><span class="nick" style="color:#389600"><a href="#043401" label="[04:34:01]">&lt;pder&gt;</a></span><span class="message">Googulator: I am trying your suggestion of -machine pc-i440fx-6.2 now</span></div><div class="line" id="043438"><span class="nick" style="color:#389600"><a href="#043438" label="[04:34:38]">&lt;pder&gt;</a></span><span class="message">Is it ok to have machine kernel-irqchip=split -machine pc-i440fx-6.2</span></div><div class="line" id="043531"><span class="nick" style="color:#6b8072"><a href="#043531" label="[04:35:31]">&lt;Googulator&gt;</a></span><span class="message">IIRC it's -machine pc-i440fx-6.2,kernel-irqchip=split</span></div><div class="line" id="043843"><span class="nick" style="color:#389600"><a href="#043843" label="[04:38:43]">&lt;pder&gt;</a></span><span class="message">thanks, trying that now</span></div><div class="line" id="044045"><span class="nick" style="color:#6b8072"><a href="#044045" label="[04:40:45]">&lt;Googulator&gt;</a></span><span class="message">BTW, this is the difference between my Fiwix and rickmasters': <a rel="nofollow" href="https://github.com/rick-masters/Fiwix/compare/fiwix-1.4.0-lb3...Googulator:Fiwix:fiwix-1.4.0-lb3">https://github.com/rick-masters/Fiwix/compare/fiwix-1.4.0-lb3...Googulator:Fiwix:fiwix-1.4.0-lb3</a> </span></div><div class="line" id="044133"><span class="nick" style="color:#6b8072"><a href="#044133" label="[04:41:33]">&lt;Googulator&gt;</a></span><span class="message">we ignore the same memory blocks in Fiwix as before, they're just ignored later</span></div><div class="line" id="044213"><span class="nick" style="color:#6b8072"><a href="#044213" label="[04:42:13]">&lt;Googulator&gt;</a></span><span class="message">&amp; none of that comes into play unless kexec-fiwix is also modified to pass additional high memory blocks to Fiwix</span></div><div class="line" id="044350"><span class="nick" style="color:#6b8072"><a href="#044350" label="[04:43:50]">&lt;Googulator&gt;</a></span><span class="message">(because right now, the e820 map provided by the BIOS is ignored, and the one hardcoded in kexec-fiwix is used instead)</span></div><div class="line" id="044433"><span class="nick" style="color:#389600"><a href="#044433" label="[04:44:33]">&lt;pder&gt;</a></span><span class="message">Interesting, it doesnt make sense to me why that would cause fiwix to hang.  I'll let you know what the last text I see printed from Fiwix</span></div><div class="line" id="044516"><span class="nick" style="color:#389600"><a href="#044516" label="[04:45:16]">&lt;pder&gt;</a></span><span class="message">Would the amount of ram in the host machine have anything to do with this?</span></div><div class="line" id="044528"><span class="nick" style="color:#6b8072"><a href="#044528" label="[04:45:28]">&lt;Googulator&gt;</a></span><span class="message">Probably not, unless you have bad RAM</span></div><div class="line" id="044642"><span class="nick" style="color:#6b8072"><a href="#044642" label="[04:46:42]">&lt;Googulator&gt;</a></span><span class="message">one more thing you could try if this doesn't help is disabling KVM - if that fixes it, then it's probably your host kernel</span></div><div class="line" id="044812"><span class="nick" style="color:#389600"><a href="#044812" label="[04:48:12]">&lt;pder&gt;</a></span><span class="message">I actually have two machines both running Debian unstable and I only get the Fiwix hang on one machine.  They should be identical kernels and qemu version, but I'll double check</span></div><div class="line" id="045002"><span class="nick" style="color:#389600"><a href="#045002" label="[04:50:02]">&lt;pder&gt;</a></span><span class="message">Maybe Fiwix can print more debug info</span></div><div class="line" id="045114"><span class="nick" style="color:#389600"><a href="#045114" label="[04:51:14]">&lt;pder&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1302865/">https://paste.debian.net/1302865/</a> </span></div><div class="line" id="045129"><span class="nick" style="color:#389600"><a href="#045129" label="[04:51:29]">&lt;pder&gt;</a></span><span class="message">This is the last thing fiwix prints</span></div><div class="line" id="045248"><span class="nick" style="color:#6b8072"><a href="#045248" label="[04:52:48]">&lt;Googulator&gt;</a></span><span class="message">memory: total=1048576KB, user=705304KB, kernel=342752KB, reserved=520KB</span></div><div class="line" id="045248"><span class="nick" style="color:#6b8072"><a href="#045248" label="[04:52:48]">&lt;Googulator&gt;</a></span><span class="message">kernel: text=325KB, data=67KB, bss=165KB, i/o buffers=262144, inodes=72537</span></div><div class="line" id="045249"><span class="nick" style="color:#6b8072"><a href="#045249" label="[04:52:49]">&lt;Googulator&gt;</a></span><span class="message">mounted root device (ext2 filesystem).</span></div><div class="line" id="045249"><span class="nick" style="color:#6b8072"><a href="#045249" label="[04:52:49]">&lt;Googulator&gt;</a></span><span class="message">(and then output from kaem)</span></div><div class="line" id="045251"><span class="nick" style="color:#6b8072"><a href="#045251" label="[04:52:51]">&lt;Googulator&gt;</a></span><span class="message">this is what's missing then</span></div><div class="line" id="045846"><span class="nick" style="color:#6b8072"><a href="#045846" label="[04:58:46]">&lt;Googulator&gt;</a></span><span class="message">Does this PR help? <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/391">https://github.com/fosslinux/live-bootstrap/pull/391</a> </span></div><div class="line" id="045907"><span class="nick" style="color:#6b8072"><a href="#045907" label="[04:59:07]">&lt;Googulator&gt;</a></span><span class="message">it's mostly bare-metal related, but it also makes Fiwix's memory map a bit more conservative</span></div><div class="line" id="050102"><span class="nick" style="color:#389600"><a href="#050102" label="[05:01:02]">&lt;pder&gt;</a></span><span class="message">I am giving it a try</span></div><div class="line" id="051515"><span class="nick" style="color:#389600"><a href="#051515" label="[05:15:15]">&lt;pder&gt;</a></span><span class="message">Unfortunately, the bare-metal-linux hung in the same spot</span></div><div class="line" id="053020"><span class="nick" style="color:#2e2a4a"><a href="#053020" label="[05:30:20]">&lt;rickmasters&gt;</a></span><span class="message">pder: you said bare-metal but you mentioned qemu before ?</span></div><div class="line" id="053043"><span class="nick" style="color:#6b8072"><a href="#053043" label="[05:30:43]">&lt;Googulator&gt;</a></span><span class="message">bare-metal-linux is the branch name</span></div><div class="line" id="053255"><span class="nick" style="color:#6b8072"><a href="#053255" label="[05:32:55]">&lt;Googulator&gt;</a></span><span class="message">pder: it looks as if it's hanging when trying to init the secondary IDE slave device (which doesn't exist)</span></div><div class="line" id="053453"><span class="nick" style="color:#389600"><a href="#053453" label="[05:34:53]">&lt;pder&gt;</a></span><span class="message">hmm I would like to compare the output when Fiwix hangs and when it boots properly.  BTW I just tried checking out master and cherry picking the PAE passthrough support commit and Fiwix booted and carried on</span></div><div class="line" id="054429"><span class="nick" style="color:#6b8072"><a href="#054429" label="[05:44:29]">&lt;Googulator&gt;</a></span><span class="message">Is there a CPU difference between the machine where it works, and where it doesn't?</span></div><div class="line" id="054435"><span class="nick" style="color:#6b8072"><a href="#054435" label="[05:44:35]">&lt;Googulator&gt;</a></span><span class="message">(physical CPU on the host)</span></div><div class="line" id="054543"><span class="nick" style="color:#389600"><a href="#054543" label="[05:45:43]">&lt;pder&gt;</a></span><span class="message">working cpu: Intel(R) Core(TM) i7-3630QM CPU @ 2.40GHz. non working: Intel(R) Core(TM) i7-14700K</span></div><div class="line" id="054650"><span class="nick" style="color:#6b8072"><a href="#054650" label="[05:46:50]">&lt;Googulator&gt;</a></span><span class="message">hmm... removal of some legacy MMU behavior in Raptor Lake?</span></div><div class="line" id="055038"><span class="nick" style="color:#389600"><a href="#055038" label="[05:50:38]">&lt;pder&gt;</a></span><span class="message">here is Fiwix output with PAE passthrough Fiwix: <a rel="nofollow" href="https://paste.debian.net/1302872/">https://paste.debian.net/1302872/</a> </span></div><div class="line" id="055206"><span class="nick" style="color:#389600"><a href="#055206" label="[05:52:06]">&lt;pder&gt;</a></span><span class="message">I thought I read someone had else had trouble with live-bootstrap on a machine with 64GB of RAM, and thats what this one has</span></div><div class="line" id="055302"><span class="nick" style="color:#6b8072"><a href="#055302" label="[05:53:02]">&lt;Googulator&gt;</a></span><span class="message">64GB is the limit of PAE, right?</span></div><div class="line" id="055322"><span class="nick" style="color:#6b8072"><a href="#055322" label="[05:53:22]">&lt;Googulator&gt;</a></span><span class="message">and of course, MMIO is gonna intrude into that</span></div><div class="line" id="055358"><span class="nick" style="color:#389600"><a href="#055358" label="[05:53:58]">&lt;pder&gt;</a></span><span class="message">it doesnt make sense though that qemu would be affected</span></div><div class="line" id="055420"><span class="nick" style="color:#6b8072"><a href="#055420" label="[05:54:20]">&lt;Googulator&gt;</a></span><span class="message">so BIOS (or rather, UEFI) will remap some physical RAM above 2^36</span></div><div class="line" id="055503"><span class="nick" style="color:#6b8072"><a href="#055503" label="[05:55:03]">&lt;Googulator&gt;</a></span><span class="message">I'm pretty sure I did successfully bootstrap on a machine with 192GB RAM though</span></div><div class="line" id="055513"><span class="nick" style="color:#6b8072"><a href="#055513" label="[05:55:13]">&lt;Googulator&gt;</a></span><span class="message">maybe it was with my modified Fiwix though</span></div><div class="line" id="055516"><span class="nick" style="color:#6b8072"><a href="#055516" label="[05:55:16]">&lt;Googulator&gt;</a></span><span class="message">also, that was an AMD</span></div><div class="line" id="055550"><span class="nick" style="color:#6b8072"><a href="#055550" label="[05:55:50]">&lt;Googulator&gt;</a></span><span class="message">yes, that was with my Fiwix</span></div><div class="line" id="055731"><span class="nick" style="color:#389600"><a href="#055731" label="[05:57:31]">&lt;pder&gt;</a></span><span class="message">are you talking about running on bare metal or through qemu?</span></div><div class="line" id="055951"><span class="nick" style="color:#6b8072"><a href="#055951" label="[05:59:51]">&lt;Googulator&gt;</a></span><span class="message">qemu</span></div><div class="line" id="060020"><span class="nick" style="color:#6b8072"><a href="#060020" label="[06:00:20]">&lt;Googulator&gt;</a></span><span class="message">but qemu still uses your CPU's MMU</span></div><div class="line" id="060050"><span class="nick" style="color:#6b8072"><a href="#060050" label="[06:00:50]">&lt;Googulator&gt;</a></span><span class="message">running a test now with the original Fiwix on the 192GB machine</span></div><div class="line" id="060100"><span class="nick" style="color:#389600"><a href="#060100" label="[06:01:00]">&lt;pder&gt;</a></span><span class="message">I did not try disabling kvm, will probably not have results until the morning</span></div><div class="line" id="061015"><span class="nick" style="color:#6b8072"><a href="#061015" label="[06:10:15]">&lt;Googulator&gt;</a></span><span class="message">seems to work on AMD with 192GB RAM</span></div><div class="line" id="061231"><span class="nick" style="color:#6b8072"><a href="#061231" label="[06:12:31]">&lt;Googulator&gt;</a></span><span class="message">testing the exact same Git commit now</span></div><div class="line" id="062016"><span class="nick" style="color:#389600"><a href="#062016" label="[06:20:16]">&lt;pder&gt;</a></span><span class="message">interesting, well I am glad there is at least a workaround for me right now even if it doesnt seem like it should fix this issue</span></div><div class="line" id="062256"><span class="nick" style="color:#6b8072"><a href="#062256" label="[06:22:56]">&lt;Googulator&gt;</a></span><span class="message">I was also looking through the memory init code of our patched Fiwix - there are quite a few places where things could be going wrong</span></div><div class="line" id="062335"><span class="nick" style="color:#6b8072"><a href="#062335" label="[06:23:35]">&lt;Googulator&gt;</a></span><span class="message">e.g. where it's not clear whether an address is meant to be interpreted as physical or virtual</span></div><div class="line" id="062425"><span class="nick" style="color:#6b8072"><a href="#062425" label="[06:24:25]">&lt;Googulator&gt;</a></span><span class="message">but it's not clear why storing and ignoring (as opposed to discarding) e820 blocks above 2^32 would make a difference</span></div><div class="line" id="062507"><span class="nick" style="color:#6b8072"><a href="#062507" label="[06:25:07]">&lt;Googulator&gt;</a></span><span class="message">booted the exact same commit on the Zen 4 machine - no issue with Fiwix</span></div><div class="line" id="062529"><span class="nick" style="color:#389600"><a href="#062529" label="[06:25:29]">&lt;pder&gt;</a></span><span class="message">I should maybe try testing my RAM</span></div><div class="line" id="062543"><span class="nick" style="color:#6b8072"><a href="#062543" label="[06:25:43]">&lt;Googulator&gt;</a></span><span class="message">yeah, it could just be bad RAM</span></div><div class="line" id="062612"><span class="nick" style="color:#6b8072"><a href="#062612" label="[06:26:12]">&lt;Googulator&gt;</a></span><span class="message">or maybe Intel dropped some legacy hack from their recent MMU implementations, which AMD still kept in Zen 4</span></div><div class="line" id="083135"><span class="nick" style="color:#6d2462"><a href="#083135" label="[08:31:35]">&lt;Mikaku&gt;</a></span><span class="message">Googulator: Fiwix supports the QEMU/Bochs Graphics Adapter as a framebuffer console</span></div><div class="line" id="083213"><span class="nick" style="color:#6d2462"><a href="#083213" label="[08:32:13]">&lt;Mikaku&gt;</a></span><span class="message">Googulator: just use the kernel parameter 'bga=' (&lt;<a rel="nofollow" href="https://github.com/mikaku/Fiwix/blob/master/docs/kernel-parameters.txt">https://github.com/mikaku/Fiwix/blob/master/docs/kernel-parameters.txt</a>&gt;) </span></div><div class="line" id="083544"><span class="nick" style="color:#6d2462"><a href="#083544" label="[08:35:44]">&lt;Mikaku&gt;</a></span><span class="message">regarding the pder's pastebin on the Fiwix hang, you need to know that the current serial console driver is buggy because it might not show the last kernel messages if it hangs</span></div><div class="line" id="083647"><span class="nick" style="color:#6d2462"><a href="#083647" label="[08:36:47]">&lt;Mikaku&gt;</a></span><span class="message">I plan to fix this bug in the serial console during the 1.5.0 version</span></div><div class="line" id="100937"><span class="nick" style="color:#6b8072"><a href="#100937" label="[10:09:37]">&lt;Googulator&gt;</a></span><span class="message">Mikaku: so fbconsole is currently for BGA only?</span></div><div class="line" id="101022"><span class="nick" style="color:#6b8072"><a href="#101022" label="[10:10:22]">&lt;Googulator&gt;</a></span><span class="message">that will need to change for UEFI support, where all we get is a straight preconfigured linear framebuffer</span></div><div class="line" id="101144"><span class="nick" style="color:#6d2462"><a href="#101144" label="[10:11:44]">&lt;Mikaku&gt;</a></span><span class="message">Googulator: no, the kernel also supports VESA VBE 2.0+ compliant graphic cards</span></div><div class="line" id="101220"><span class="nick" style="color:#6b8072"><a href="#101220" label="[10:12:20]">&lt;Googulator&gt;</a></span><span class="message">as long as the bootloader configures a graphical mode first, right?</span></div><div class="line" id="101224"><span class="nick" style="color:#6d2462"><a href="#101224" label="[10:12:24]">&lt;Mikaku&gt;</a></span><span class="message">in the VESA VBE case though, the kernel expects the framebuffer address and setup in the Multiboot1 structure from the bootloader</span></div><div class="line" id="101235"><span class="nick" style="color:#6d2462"><a href="#101235" label="[10:12:35]">&lt;Mikaku&gt;</a></span><span class="message">Googulator: yes</span></div><div class="line" id="101308"><span class="nick" style="color:#6b8072"><a href="#101308" label="[10:13:08]">&lt;Googulator&gt;</a></span><span class="message">That's great news then</span></div><div class="line" id="101347"><span class="nick" style="color:#6b8072"><a href="#101347" label="[10:13:47]">&lt;Googulator&gt;</a></span><span class="message">My main concern was that modern GPUs might not offer any native text mode at all</span></div><div class="line" id="101804"><span class="nick" style="color:#6b8072"><a href="#101804" label="[10:18:04]">&lt;Googulator&gt;</a></span><span class="message">With the current setup of BIOS -&gt; builder-hex0 -&gt; kexec-fiwix -&gt; Fiwix, we're guaranteed to be in text mode when Fiwix starts</span></div><div class="line" id="101911"><span class="nick" style="color:#6b8072"><a href="#101911" label="[10:19:11]">&lt;Googulator&gt;</a></span><span class="message">And in stikonas' UEFI approach, posix-runner can get away with not dealing with a graphical framebuffer by retaining UEFI boot services until posix-runner hands off to a real kernel, and using boot services to render text</span></div><div class="line" id="101948"><span class="nick" style="color:#6b8072"><a href="#101948" label="[10:19:48]">&lt;Googulator&gt;</a></span><span class="message">But once that real kernel starts, it has nothing to rely on for drawing text</span></div><div class="line" id="102116"><span class="nick" style="color:#6b8072"><a href="#102116" label="[10:21:16]">&lt;Googulator&gt;</a></span><span class="message">GPUs on x86 possibly still have text mode &amp; VGA emulation support in hardware, but on ARM or RISCV, it's common to have a pure graphical output block with no notion of text mode</span></div><div class="line" id="103922"><span class="nick" style="color:#6d2462"><a href="#103922" label="[10:39:22]">&lt;Mikaku&gt;</a></span><span class="message">for the hardware that only supports fb, we'll need a new kernel parameter to pass the fb memory address, resolution, bpp, font size, etc. more or less the same parameters that kernel expects from the bootloader when using VESA</span></div><div class="line" id="104310"><span class="nick" style="color:#6b8072"><a href="#104310" label="[10:43:10]">&lt;Googulator&gt;</a></span><span class="message">Can Fiwix currently do font scaling? (FB-only hardware often comes with high-DPI displays.)</span></div><div class="line" id="104434"><span class="nick" style="color:#6d2462"><a href="#104434" label="[10:44:34]">&lt;Mikaku&gt;</a></span><span class="message">Googulator: Fiwix only supports 8x8, 8x14 and 8x16 fonts which are the most common sizes with normal resolutions (800x600, 1024x768, 1280x748)</span></div><div class="line" id="104507"><span class="nick" style="color:#6b8072"><a href="#104507" label="[10:45:07]">&lt;Googulator&gt;</a></span><span class="message">so no support for e.g. rendering 8x8 as 16x16</span></div><div class="line" id="104508"><span class="nick" style="color:#6d2462"><a href="#104508" label="[10:45:08]">&lt;Mikaku&gt;</a></span><span class="message">s/748/1024/</span></div><div class="line" id="104515"><span class="nick" style="color:#6d2462"><a href="#104515" label="[10:45:15]">&lt;Mikaku&gt;</a></span><span class="message">no</span></div><div class="line" id="104654"><span class="nick" style="color:#6b8072"><a href="#104654" label="[10:46:54]">&lt;Googulator&gt;</a></span><span class="message">8x14 is also what one would use for HD-style resolutions, right?</span></div><div class="line" id="104700"><span class="nick" style="color:#6b8072"><a href="#104700" label="[10:47:00]">&lt;Googulator&gt;</a></span><span class="message">e.g. 1920x1080</span></div><div class="line" id="105214"><span class="nick" style="color:#6d2462"><a href="#105214" label="[10:52:14]">&lt;Mikaku&gt;</a></span><span class="message">Googulator: hmm, I don't remember exactly why I included that font size, but for sure was not for such big resolutions because all my testing PCs are really old :-)</span></div><div class="line" id="105616"><span class="nick" style="color:#6d2462"><a href="#105616" label="[10:56:16]">&lt;Mikaku&gt;</a></span><span class="message">checking the console resolution in my Linux workstation at 1920x1080, it says 'frame buffer device 240x67' which looks like it uses a 8x16 font</span></div><div class="line" id="113715"><span class="nick" style="color:#234e69"><a href="#113715" label="[11:37:15]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Well, small font on 4k system is better than nothing</span></div><div class="line" id="152203"><span class="nick" style="color:#389600"><a href="#152203" label="[15:22:03]">&lt;pder&gt;</a></span><span class="message">Googulator: I tried a bootstrap from the master branch but removing the -enable-kvm option and that worked all the way through gcc 13</span></div><div class="line" id="174000"><span class="nick" style="color:#6c3d55"><a href="#174000" label="[17:40:00]">&lt;janneke&gt;</a></span><span class="message">Googulator: I've built the old guix binaries for v0.5, adding some patches to get it to build -- <a rel="nofollow" href="https://gitlab.com/janneke/guix/-/tree/version-0.5">https://gitlab.com/janneke/guix/-/tree/version-0.5</a> </span></div><div class="line" id="174302"><span class="nick" style="color:#6c3d55"><a href="#174302" label="[17:43:02]">&lt;janneke&gt;</a></span><span class="message">...but at least guile didn't build reproducibly back then, and quite possible none of those binaries did?</span></div><div class="line" id="174636"><span class="nick" style="color:#6c3d55"><a href="#174636" label="[17:46:36]">&lt;janneke&gt;</a></span><span class="message">it could also be that the static-binaries weren't upgraded since 20130105; i haven't looked into that</span></div><div class="line" id="211801"><span class="nick" style="color:#389600"><a href="#211801" label="[21:18:01]">&lt;pder&gt;</a></span><span class="message">Another update to my Fiwix hang issue.  I tried adding some printk debugging to Fiwix so I added a couple of printk calls to ata_init().  Strangely when I ran the bootstrap it did not hang</span></div><div class="line" id="212020"><span class="nick" style="color:#389600"><a href="#212020" label="[21:20:20]">&lt;pder&gt;</a></span><span class="message">Something appears to hang between ata_init() and mem_stats()- it is also possible it is locking up somewhere else and I just never see the output from mem_stats()</span></div><div class="line" id="212430"><span class="nick" style="color:#2e2a4a"><a href="#212430" label="[21:24:30]">&lt;rickmasters&gt;</a></span><span class="message">pder: I've gathered from Mikaku (Fiwix author) that he uses this option for hard drive:</span></div><div class="line" id="212435"><span class="nick" style="color:#2e2a4a"><a href="#212435" label="[21:24:35]">&lt;rickmasters&gt;</a></span><span class="message">-drive file=${IMG},format=raw,if=ide,cache=writeback,index=0</span></div><div class="line" id="212502"><span class="nick" style="color:#2e2a4a"><a href="#212502" label="[21:25:02]">&lt;rickmasters&gt;</a></span><span class="message">pder: perhaps you could modify rootfs.py to use the same and see if that helps</span></div><div class="line" id="212521"><span class="nick" style="color:#389600"><a href="#212521" label="[21:25:21]">&lt;pder&gt;</a></span><span class="message">rickmasters: I will try that.  Those options are probably in kexec-fiwix somewhere?</span></div><div class="line" id="212538"><span class="nick" style="color:#389600"><a href="#212538" label="[21:25:38]">&lt;pder&gt;</a></span><span class="message">or are these qemu options?</span></div><div class="line" id="212545"><span class="nick" style="color:#2e2a4a"><a href="#212545" label="[21:25:45]">&lt;rickmasters&gt;</a></span><span class="message">qemu options</span></div><div class="line" id="212702"><span class="nick" style="color:#2e2a4a"><a href="#212702" label="[21:27:02]">&lt;rickmasters&gt;</a></span><span class="message">its near the bottom of rootfs.py</span></div><div class="line" id="212745"><span class="nick" style="color:#389600"><a href="#212745" label="[21:27:45]">&lt;pder&gt;</a></span><span class="message">got it, thanks.  have you encountered this issue before where Fiwix hangs somewhere after detecting drives?</span></div><div class="line" id="212828"><span class="nick" style="color:#2e2a4a"><a href="#212828" label="[21:28:28]">&lt;rickmasters&gt;</a></span><span class="message">I'm not sure about that index=0 - rootfs.py can use two drives so that might need to be adapted...</span></div><div class="line" id="213111"><span class="nick" style="color:#2e2a4a"><a href="#213111" label="[21:31:11]">&lt;rickmasters&gt;</a></span><span class="message">pder: yes, but never got stuck on that excepting the case where I found I needed -machine kernel-irqchip=split to make it work</span></div><div class="line" id="213152"><span class="nick" style="color:#389600"><a href="#213152" label="[21:31:52]">&lt;pder&gt;</a></span><span class="message">ok, i am definitely using kernel-irqchip=split</span></div><div class="line" id="213237"><span class="nick" style="color:#2e2a4a"><a href="#213237" label="[21:32:37]">&lt;rickmasters&gt;</a></span><span class="message">I wasn't able to get to the root cause of why that was needed. I just chalked it up to a likely obscure kernel bug but I'm not sure about that.</span></div><div class="line" id="213438"><span class="nick" style="color:#2e2a4a"><a href="#213438" label="[21:34:38]">&lt;rickmasters&gt;</a></span><span class="message">BTW, the problem was serial port not working - irqs not firing</span></div><div class="line" id="213445"><span class="nick" style="color:#389600"><a href="#213445" label="[21:34:45]">&lt;pder&gt;</a></span><span class="message">so I think that PAE passthrough patch is not the fix for my hang- I just have to add a printk call and its fixed :)</span></div><div class="line" id="213925"><span class="nick" style="color:#2e2a4a"><a href="#213925" label="[21:39:25]">&lt;rickmasters&gt;</a></span><span class="message">pder: when it hangs, does your qemu peg the CPU?</span></div><div class="line" id="214000"><span class="nick" style="color:#389600"><a href="#214000" label="[21:40:00]">&lt;pder&gt;</a></span><span class="message">I will check- should know in a couple minutes</span></div><div class="line" id="214007"><span class="nick" style="color:#234e69"><a href="#214007" label="[21:40:07]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Also gdb might give clues where it hangs</span></div><div class="line" id="214025"><span class="nick" style="color:#2e2a4a"><a href="#214025" label="[21:40:25]">&lt;rickmasters&gt;</a></span><span class="message">pder: if not, you can stick an infinite loop into the code, and if it hits the loop you know it got that far.</span></div><div class="line" id="214127"><span class="nick" style="color:#2e2a4a"><a href="#214127" label="[21:41:27]">&lt;rickmasters&gt;</a></span><span class="message">pder: you can do that all the way into assembly by sticking in a .here jmp here infinite loop</span></div><div class="line" id="214206"><span class="nick" style="color:#2e2a4a"><a href="#214206" label="[21:42:06]">&lt;rickmasters&gt;</a></span><span class="message">pder: ... because an infinite loop WILL peg qemu and that's a signal you can use</span></div><div class="line" id="214324"><span class="nick" style="color:#389600"><a href="#214324" label="[21:43:24]">&lt;pder&gt;</a></span><span class="message">I just tried with those qemu drive options and got a KVM internal error during the mes build</span></div><div class="line" id="214359"><span class="nick" style="color:#389600"><a href="#214359" label="[21:43:59]">&lt;pder&gt;</a></span><span class="message">I havent ruled out possibly a RAM problem in this machine</span></div><div class="line" id="215501"><span class="nick" style="color:#389600"><a href="#215501" label="[21:55:01]">&lt;pder&gt;</a></span><span class="message">I went back to the master branch, ran a bootstrap until Fiwix hung and my cpu utilization for qemu is around 1-2%</span></div><div class="line" id="215652"><span class="nick" style="color:#389600"><a href="#215652" label="[21:56:52]">&lt;pder&gt;</a></span><span class="message">is a race condition possible at this point in the boot process?</span></div><div class="line" id="220430"><span class="nick" style="color:#2e2a4a"><a href="#220430" label="[22:04:30]">&lt;rickmasters&gt;</a></span><span class="message">pder: i'm not sure exactly where you are hanging but Fiwix runs linear on startup until it starts the first context switch</span></div><div class="line" id="220647"><span class="nick" style="color:#389600"><a href="#220647" label="[22:06:47]">&lt;pder&gt;</a></span><span class="message">Based on the output I see I never see the output of mem_stats()</span></div><div class="line" id="220919"><span class="nick" style="color:#389600"><a href="#220919" label="[22:09:19]">&lt;pder&gt;</a></span><span class="message">mem_stats is called from mm/swapper.c</span></div><div class="line" id="221043"><span class="nick" style="color:#389600"><a href="#221043" label="[22:10:43]">&lt;pder&gt;</a></span><span class="message">I believe Mikaku suggested that I might not be seeing all output if there is a hang</span></div><div class="line" id="221052"><span class="nick" style="color:#2e2a4a"><a href="#221052" label="[22:10:52]">&lt;rickmasters&gt;</a></span><span class="message">add this line of code to peg qemu: __asm(&quot;.byte 0xEB, 0xFE&quot;);</span></div><div class="line" id="221124"><span class="nick" style="color:#2e2a4a"><a href="#221124" label="[22:11:24]">&lt;rickmasters&gt;</a></span><span class="message">it's an endcoding of a jmp which jmps to itself</span></div><div class="line" id="221210"><span class="nick" style="color:#2e2a4a"><a href="#221210" label="[22:12:10]">&lt;rickmasters&gt;</a></span><span class="message">it can narrow down exactly how far you are getting in the code - or you can use gdb as stikonas suggested</span></div><div class="line" id="221306"><span class="nick" style="color:#389600"><a href="#221306" label="[22:13:06]">&lt;pder&gt;</a></span><span class="message">I'm not familiar with the technique of using gdb with qemu, but I shall look into it</span></div><div class="line" id="221336"><span class="nick" style="color:#389600"><a href="#221336" label="[22:13:36]">&lt;pder&gt;</a></span><span class="message">I will try first your suggestion to see if I can narrow down where the hang is occuring</span></div><div class="line" id="221812"><span class="nick" style="color:#6d2462"><a href="#221812" label="[22:18:12]">&lt;Mikaku&gt;</a></span><span class="message">pder: if you are using serial console and you cannot see all messages on a hang, try incrementing the value NR_CB_QUEUE in include/tty.h</span></div><div class="line" id="221940"><span class="nick" style="color:#389600"><a href="#221940" label="[22:19:40]">&lt;pder&gt;</a></span><span class="message">Mikaku: thanks, I will try that</span></div><div class="line" id="222053"><span class="nick" style="color:#389600"><a href="#222053" label="[22:20:53]">&lt;pder&gt;</a></span><span class="message">Mikaku: Basically the last output I see is from ata_init().  I don't see output from mem_stats(0</span></div><div class="line" id="222101"><span class="nick" style="color:#389600"><a href="#222101" label="[22:21:01]">&lt;pder&gt;</a></span><span class="message">mem_stats()</span></div><div class="line" id="222151"><span class="nick" style="color:#389600"><a href="#222151" label="[22:21:51]">&lt;pder&gt;</a></span><span class="message">I'm adding __asm(&quot;.byte 0xEB, 0xFE&quot;); after mem_stats() and running again to see if mem_stats() completes</span></div><div class="line" id="222411"><span class="nick" style="color:#234e69"><a href="#222411" label="[22:24:11]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; pder: basically if you run qemu with -s, you can attach to process inside qemu using target localhost:1234 from inside gdb</span></div><div class="line" id="222456"><span class="nick" style="color:#389600"><a href="#222456" label="[22:24:56]">&lt;pder&gt;</a></span><span class="message">got it, will definitely try</span></div><div class="line" id="222543"><span class="nick" style="color:#234e69"><a href="#222543" label="[22:25:43]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; And forever jmp loop is good way to jump to specific location</span></div><div class="line" id="222551"><span class="nick" style="color:#234e69"><a href="#222551" label="[22:25:51]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; I.e. it acts like breakpoint</span></div><div class="line" id="222732"><span class="nick" style="color:#6d2462"><a href="#222732" label="[22:27:32]">&lt;Mikaku&gt;</a></span><span class="message">back later</span></div><div class="line" id="235344"><span class="nick" style="color:#8dd3c7"><a href="#235344" label="[23:53:44]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: so far adding file descriptor map seems easy. That's all it is for now: <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi/commit/0660f25086e1e93d51689e8a68efbb89b1c724ce">https://git.stikonas.eu/andrius/stage0-uefi/commit/0660f25086e1e93d51689e8a68efbb89b1c724ce</a> </span></div><div class="line" id="235352"><span class="nick" style="color:#8dd3c7"><a href="#235352" label="[23:53:52]">&lt;stikonas&gt;</a></span><span class="message">and mes now fails with a different error</span></div><div class="line" id="235429"><span class="nick" style="color:#8dd3c7"><a href="#235429" label="[23:54:29]">&lt;stikonas&gt;</a></span><span class="message">so probably hitting some next issue...</span></div><div class="line" id="235607"><span class="nick" style="color:#2e2a4a"><a href="#235607" label="[23:56:07]">&lt;rickmasters&gt;</a></span><span class="message">nice</span></div><div class="line" id="235806"><span class="nick" style="color:#8dd3c7"><a href="#235806" label="[23:58:06]">&lt;stikonas&gt;</a></span><span class="message">the not nice thing is that even simple stuff like mes --version doesn't yet work...</span></div><br /></div></body></html>