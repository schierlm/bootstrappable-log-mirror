<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-04-01.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="013248"><span class="nick" style="color:#8dd3c7"><a href="#013248" label="[01:32:48]">&lt;muurkha&gt;</a></span><span class="message">re &quot;raku is very amenable to building these&quot;, contrary to what you might think from a compiler class syllabus, except for C++, the hard part of writing a compiler is not parsing, even a minimal bootstrap compiler that with no optimizations and really stupid code generation (code generation being where the bulk of the code is for a normal production compiler)</span></div><div class="line" id="013341"><span class="nick" style="color:#2e2a4a"><a href="#013341" label="[01:33:41]">&lt;drakonis&gt;</a></span><span class="message">i see</span></div><div class="line" id="013417"><span class="nick" style="color:#8dd3c7"><a href="#013417" label="[01:34:17]">&lt;muurkha&gt;</a></span><span class="message">of the 2000 or so lines of Ur-Scheme, including blank lines and comments and unit tests, about 170 lines are the parser</span></div><div class="line" id="013424"><span class="nick" style="color:#2e2a4a"><a href="#013424" label="[01:34:24]">&lt;drakonis&gt;</a></span><span class="message">right right</span></div><div class="line" id="013853"><span class="nick" style="color:#8dd3c7"><a href="#013853" label="[01:38:53]">&lt;muurkha&gt;</a></span><span class="message">parsing C takes more code than that of course, but compiling C also takes more code than compiling Scheme</span></div><div class="line" id="014242"><span class="nick" style="color:#8dd3c7"><a href="#014242" label="[01:42:42]">&lt;muurkha&gt;</a></span><span class="message">I feel like something like OCaml with algebraic data types and pattern matching helps a lot with the kind of structural case analysis you run into a lot in compilers, although I'm far from an expert on writing compilers, I'm just a muurkha</span></div><div class="line" id="014303"><span class="nick" style="color:#8dd3c7"><a href="#014303" label="[01:43:03]">&lt;muurkha&gt;</a></span><span class="message">but I've written a couple of toy compilers so I feel like I might have learned *something* ;)</span></div><div class="line" id="015932"><span class="nick" style="color:#2e2a4a"><a href="#015932" label="[01:59:32]">&lt;drakonis&gt;</a></span><span class="message">ha, i see.</span></div><div class="line" id="015948"><span class="nick" style="color:#2e2a4a"><a href="#015948" label="[01:59:48]">&lt;drakonis&gt;</a></span><span class="message">raku does have that</span></div><div class="line" id="015959"><span class="nick" style="color:#2e2a4a"><a href="#015959" label="[01:59:59]">&lt;drakonis&gt;</a></span><span class="message">but neither am i an expert in writing compilers or raku</span></div><div class="line" id="020007"><span class="nick" style="color:#2e2a4a"><a href="#020007" label="[02:00:07]">&lt;drakonis&gt;</a></span><span class="message">(for the latter, yet.)</span></div><div class="line" id="020356"><span class="nick" style="color:#2e2a4a"><a href="#020356" label="[02:03:56]">&lt;drakonis&gt;</a></span><span class="message">it is a lot of fun thouguh</span></div><div class="line" id="020903"><span class="nick" style="color:#8dd3c7"><a href="#020903" label="[02:09:03]">&lt;muurkha&gt;</a></span><span class="message">(also I find OCaml's type checking helpful)</span></div><div class="line" id="021023"><span class="nick" style="color:#2e2a4a"><a href="#021023" label="[02:10:23]">&lt;drakonis&gt;</a></span><span class="message">yes, that's nice.</span></div><div class="line" id="030642"><span class="nick" style="color:#6b8072"><a href="#030642" label="[03:06:42]">&lt;littlebobeep&gt;</a></span><span class="message">muurkha: What &quot;toy&quot; compilers have you written?</span></div><div class="line" id="030930"><span class="nick" style="color:#8dd3c7"><a href="#030930" label="[03:09:30]">&lt;muurkha&gt;</a></span><span class="message">well, there's Ur-Scheme and peg-bootstrap, which I linked above, and meta5ix (<a rel="nofollow" href="http://canonical.org/~kragen/sw/dev3/meta5ix.m5">http://canonical.org/~kragen/sw/dev3/meta5ix.m5</a>  <a rel="nofollow" href="http://canonical.org/~kragen/sw/dev3/meta5ix2c.m5">http://canonical.org/~kragen/sw/dev3/meta5ix2c.m5</a>  <a rel="nofollow" href="http://canonical.org/~kragen/sw/dev3/meta5ixrun.py">http://canonical.org/~kragen/sw/dev3/meta5ixrun.py</a>) </span></div><div class="line" id="031009"><span class="nick" style="color:#8dd3c7"><a href="#031009" label="[03:10:09]">&lt;muurkha&gt;</a></span><span class="message">and StoneKnifeForth: <a rel="nofollow" href="https://github.com/kragen/stoneknifeforth">https://github.com/kragen/stoneknifeforth</a> </span></div><div class="line" id="031118"><span class="nick" style="color:#8dd3c7"><a href="#031118" label="[03:11:18]">&lt;muurkha&gt;</a></span><span class="message">and I guess <a rel="nofollow" href="http://canonical.org/~kragen/sw/dev3/sweetdreams-js.js">http://canonical.org/~kragen/sw/dev3/sweetdreams-js.js</a>  compiles audio synthesizer signal flow graphs into JS, but they aren't Turing-complete</span></div><div class="line" id="031219"><span class="nick" style="color:#8dd3c7"><a href="#031219" label="[03:12:19]">&lt;muurkha&gt;</a></span><span class="message">and a few others, I did one that compiles lambda calculus into SK-combinators I can't find</span></div><div class="line" id="033419"><span class="nick" style="color:#6b8072"><a href="#033419" label="[03:34:19]">&lt;littlebobeep&gt;</a></span><span class="message">muurkha: Hmm I saw you mention Ur-Scheme but I saw no link...</span></div><div class="line" id="052521"><span class="nick" style="color:#8dd3c7"><a href="#052521" label="[05:25:21]">&lt;muurkha&gt;</a></span><span class="message">oh sorry, <a rel="nofollow" href="http://canonical.org/~kragen/urscheme">http://canonical.org/~kragen/urscheme</a> </span></div><div class="line" id="052552"><span class="nick" style="color:#8dd3c7"><a href="#052552" label="[05:25:52]">&lt;muurkha&gt;</a></span><span class="message">also linked from <a rel="nofollow" href="https://bootstrapping.miraheze.org/wiki/Main_Page#Past_Research_/_intray">https://bootstrapping.miraheze.org/wiki/Main_Page#Past_Research_/_intray</a> </span></div><div class="line" id="161324"><span class="nick" style="color:#80b1d3"><a href="#161324" label="[16:13:24]">&lt;siraben&gt;</a></span><span class="message"> <a rel="nofollow" href="https://blog.antoyo.xyz/rustc_codegen_gcc-progress-report-10">https://blog.antoyo.xyz/rustc_codegen_gcc-progress-report-10</a> </span></div><div class="line" id="222706"><span class="nick">***</span><span class="message notice">alMalsamo is now known as littlebobeep</span></div><br /></div></body></html>