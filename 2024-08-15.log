<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2024-08-15.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="114132"><span class="nick" style="color:#389600"><a href="#114132" label="[11:41:32]">&lt;mid-kid&gt;</a></span><span class="message"> <a rel="nofollow" href="https://mid-kid.root.sx/git/mid-kid/bootstrap/src/branch/master/gentoo-2024.8/gentoo.txt">https://mid-kid.root.sx/git/mid-kid/bootstrap/src/branch/master/gentoo-2024.8/gentoo.txt</a> </span></div><div class="line" id="114140"><span class="nick" style="color:#389600"><a href="#114140" label="[11:41:40]">&lt;mid-kid&gt;</a></span><span class="message">Alright, I consider this document complete now</span></div><div class="line" id="114313"><span class="nick" style="color:#389600"><a href="#114313" label="[11:43:13]">&lt;mid-kid&gt;</a></span><span class="message">At some point I might want to fix some things in live-bootstrap and gentoo individually to remove some unnecessary steps</span></div><div class="line" id="114331"><span class="nick" style="color:#389600"><a href="#114331" label="[11:43:31]">&lt;mid-kid&gt;</a></span><span class="message">Stuff like figuring out why `make -j` isn't working within the emerge environment without rebuilding &quot;make&quot;</span></div><div class="line" id="114408"><span class="nick" style="color:#389600"><a href="#114408" label="[11:44:08]">&lt;mid-kid&gt;</a></span><span class="message">I'd also want the bzip2 package in live-bootstrap to install the libbz2 library</span></div><div class="line" id="114444"><span class="nick" style="color:#389600"><a href="#114444" label="[11:44:44]">&lt;mid-kid&gt;</a></span><span class="message">And figure out what's up with live-bootstrap's version of `find` lacking a bunch of command-line siwtches</span></div><div class="line" id="114523"><span class="nick" style="color:#389600"><a href="#114523" label="[11:45:23]">&lt;mid-kid&gt;</a></span><span class="message">And I think live-bootstrap would be better off using pkgconf rather than pkg-config, would avoid having to rebuild it here too.</span></div><div class="line" id="114634"><span class="nick" style="color:#389600"><a href="#114634" label="[11:46:34]">&lt;mid-kid&gt;</a></span><span class="message">I also think it'd be a good idea to install `meson` and `ninja` in live-bootstrap. More and more programs are starting to require it.</span></div><div class="line" id="114750"><span class="nick" style="color:#389600"><a href="#114750" label="[11:47:50]">&lt;mid-kid&gt;</a></span><span class="message">As for the gentoo side of things, I've reported two bugs I encountered during the bootstrap: <a rel="nofollow" href="https://bugs.gentoo.org/937637">https://bugs.gentoo.org/937637</a>  and <a rel="nofollow" href="https://bugs.gentoo.org/937918">https://bugs.gentoo.org/937918</a> </span></div><div class="line" id="114758"><span class="nick" style="color:#389600"><a href="#114758" label="[11:47:58]">&lt;mid-kid&gt;</a></span><span class="message">fixing those would help remove a few lines but nothing big</span></div><div class="line" id="115110"><span class="nick" style="color:#389600"><a href="#115110" label="[11:51:10]">&lt;mid-kid&gt;</a></span><span class="message">And I also want to figure out how to checksum and make sure everything's reproducible.</span></div><div class="line" id="115227"><span class="nick" style="color:#389600"><a href="#115227" label="[11:52:27]">&lt;mid-kid&gt;</a></span><span class="message">It'd be great to end up being able to just create a bunch of reproducible stage0 tarballs for different architectures that people can build new gentoo installs from.</span></div><div class="line" id="120153"><span class="nick" style="color:#8dd3c7"><a href="#120153" label="[12:01:53]">&lt;Googulator&gt;</a></span><span class="message">mid-kid: I'll need to verify this with kernel bootstrap :)</span></div><div class="line" id="120236"><span class="nick" style="color:#8dd3c7"><a href="#120236" label="[12:02:36]">&lt;Googulator&gt;</a></span><span class="message">for <a rel="nofollow" href="https://mid-kid.root.sx/git/mid-kid/bootstrap/src/branch/master/gentoo-2024.8/gentoo.txt#L18">https://mid-kid.root.sx/git/mid-kid/bootstrap/src/branch/master/gentoo-2024.8/gentoo.txt#L18</a>  it's enough just to back up /external/repo</span></div><div class="line" id="120305"><span class="nick" style="color:#8dd3c7"><a href="#120305" label="[12:03:05]">&lt;Googulator&gt;</a></span><span class="message">&amp; then you can use the --repo and --early-preseed options (early preseed is repo/base.tar.bz2)</span></div><div class="line" id="120354"><span class="nick" style="color:#389600"><a href="#120354" label="[12:03:54]">&lt;mid-kid&gt;</a></span><span class="message">yeah I figured that one out but I still found it more useful to create a tarball to quickly start over</span></div><div class="line" id="120943"><span class="nick" style="color:#8dd3c7"><a href="#120943" label="[12:09:43]">&lt;Googulator&gt;</a></span><span class="message">also, #gentoo-releng might be interested in this too</span></div><div class="line" id="121049"><span class="nick" style="color:#389600"><a href="#121049" label="[12:10:49]">&lt;mid-kid&gt;</a></span><span class="message">mayhaps</span></div><div class="line" id="121117"><span class="nick" style="color:#389600"><a href="#121117" label="[12:11:17]">&lt;mid-kid&gt;</a></span><span class="message">I wanted to ask them about how to nicely resolve the app-alternatives kludge I have there near the end (really how does catalyst do it)</span></div><div class="line" id="121214"><span class="nick" style="color:#389600"><a href="#121214" label="[12:12:14]">&lt;mid-kid&gt;</a></span><span class="message">but rn I just fell down this rabbit hole because I got a new computer and wanted to install gentoo like this on a new machine :^)</span></div><div class="line" id="121249"><span class="nick" style="color:#389600"><a href="#121249" label="[12:12:49]">&lt;mid-kid&gt;</a></span><span class="message">so it might be a while before I continue this work again</span></div><div class="line" id="121400"><span class="nick" style="color:#8dd3c7"><a href="#121400" label="[12:14:00]">&lt;Googulator&gt;</a></span><span class="message">Another interesting direction to go is rather than just installing gentoo locally, try to generate stage and livecd images (which I did with the old, LFS-based bootstrap)</span></div><div class="line" id="121452"><span class="nick" style="color:#8dd3c7"><a href="#121452" label="[12:14:52]">&lt;Googulator&gt;</a></span><span class="message">Doing that on bare metal with kernel bootstrap amounts to completely breaking the binary propagation chain from prior Gentoo versions</span></div><div class="line" id="121553"><span class="nick" style="color:#389600"><a href="#121553" label="[12:15:53]">&lt;mid-kid&gt;</a></span><span class="message">I have some catalyst instructions here: <a rel="nofollow" href="https://mid-kid.root.sx/git/mid-kid/bootstrap/src/branch/master/gentoo-2024.8/catalyst.txt">https://mid-kid.root.sx/git/mid-kid/bootstrap/src/branch/master/gentoo-2024.8/catalyst.txt</a> </span></div><div class="line" id="121556"><span class="nick" style="color:#389600"><a href="#121556" label="[12:15:56]">&lt;mid-kid&gt;</a></span><span class="message">But like</span></div><div class="line" id="121612"><span class="nick" style="color:#389600"><a href="#121612" label="[12:16:12]">&lt;mid-kid&gt;</a></span><span class="message">Right now I'm going with the assumption that you'll get an x86_64 kernel from *somewhere*</span></div><div class="line" id="121623"><span class="nick" style="color:#8dd3c7"><a href="#121623" label="[12:16:23]">&lt;Googulator&gt;</a></span><span class="message">producing a truly trustworthy Gentoo guaranteed free of Karger-Thomson backdoors, even if upstream is compromised (so long as the sources are clean)</span></div><div class="line" id="121638"><span class="nick" style="color:#8dd3c7"><a href="#121638" label="[12:16:38]">&lt;Googulator&gt;</a></span><span class="message">(&amp; also the hardware/firmware is clean)</span></div><div class="line" id="121741"><span class="nick" style="color:#389600"><a href="#121741" label="[12:17:41]">&lt;mid-kid&gt;</a></span><span class="message">So I don't think a kernel bootstrap will work if you don't add extra instructions before switching to the x86_64 rootfs (you'll have to cross-compile a kernel)</span></div><div class="line" id="121813"><span class="nick" style="color:#389600"><a href="#121813" label="[12:18:13]">&lt;mid-kid&gt;</a></span><span class="message">and catalyst can't be used to cross compile, so that one's out as an option</span></div><div class="line" id="121835"><span class="nick" style="color:#389600"><a href="#121835" label="[12:18:35]">&lt;mid-kid&gt;</a></span><span class="message">Unless you build qemu-user-x86_64 I guess</span></div><div class="line" id="121837"><span class="nick" style="color:#8dd3c7"><a href="#121837" label="[12:18:37]">&lt;Googulator&gt;</a></span><span class="message">I did that in <a rel="nofollow" href="https://gist.github.com/Googulator/86af97ed078eb9e6c18c6eb49e46c96d">https://gist.github.com/Googulator/86af97ed078eb9e6c18c6eb49e46c96d</a> </span></div><div class="line" id="121908"><span class="nick" style="color:#8dd3c7"><a href="#121908" label="[12:19:08]">&lt;Googulator&gt;</a></span><span class="message">(was also needed for Guix, since x86 Guix is currently broken upstream)</span></div><div class="line" id="121954"><span class="nick" style="color:#389600"><a href="#121954" label="[12:19:54]">&lt;mid-kid&gt;</a></span><span class="message">I see!</span></div><div class="line" id="122004"><span class="nick" style="color:#389600"><a href="#122004" label="[12:20:04]">&lt;mid-kid&gt;</a></span><span class="message">Would be cool to integrate a linux kernel build here</span></div><div class="line" id="122123"><span class="nick" style="color:#389600"><a href="#122123" label="[12:21:23]">&lt;mid-kid&gt;</a></span><span class="message">anyway I'm not sure it's worth ensuring a no-binary-at-all chain to gentoo until we can hash the outputs and actually rebuild them reproducibly</span></div><div class="line" id="122134"><span class="nick" style="color:#389600"><a href="#122134" label="[12:21:34]">&lt;mid-kid&gt;</a></span><span class="message">I can try using gentoo binpkgs but I'm not convinced those are a great idea eithe</span></div><div class="line" id="122159"><span class="nick" style="color:#389600"><a href="#122159" label="[12:21:59]">&lt;mid-kid&gt;</a></span><span class="message">that said</span></div><div class="line" id="122206"><span class="nick" style="color:#389600"><a href="#122206" label="[12:22:06]">&lt;mid-kid&gt;</a></span><span class="message">good luck and lmk how it goes, I'm interested</span></div><div class="line" id="122306"><span class="nick" style="color:#8dd3c7"><a href="#122306" label="[12:23:06]">&lt;Googulator&gt;</a></span><span class="message">yeah, it's kind of a dilemma</span></div><div class="line" id="122328"><span class="nick" style="color:#8dd3c7"><a href="#122328" label="[12:23:28]">&lt;Googulator&gt;</a></span><span class="message">Gentoo can build entirely binary-free, but isn't reproducible, and is not even meant to be</span></div><div class="line" id="122344"><span class="nick" style="color:#389600"><a href="#122344" label="[12:23:44]">&lt;mid-kid&gt;</a></span><span class="message">gentoo's kinda the antithesis to reproducibility lol</span></div><div class="line" id="122406"><span class="nick" style="color:#389600"><a href="#122406" label="[12:24:06]">&lt;mid-kid&gt;</a></span><span class="message">the way it's meant to be used no two machines will ever be the exact same</span></div><div class="line" id="122408"><span class="nick" style="color:#8dd3c7"><a href="#122408" label="[12:24:08]">&lt;Googulator&gt;</a></span><span class="message">Guix is fully reproducible, but the 5 bootstrap binaries unfortunately provide a retroviral propagation path</span></div><div class="line" id="122436"><span class="nick" style="color:#8dd3c7"><a href="#122436" label="[12:24:36]">&lt;Googulator&gt;</a></span><span class="message">&amp; so far, I haven't been able to replace those binaries in a way that doesn't invalidate the entire hash tree</span></div><div class="line" id="122529"><span class="nick" style="color:#8dd3c7"><a href="#122529" label="[12:25:29]">&lt;Googulator&gt;</a></span><span class="message">ideally, we would just reproduce those very same binaries (assuming they aren't backdoored), but the version of Guix that was used to build those predates the time machine system</span></div><div class="line" id="122549"><span class="nick" style="color:#389600"><a href="#122549" label="[12:25:49]">&lt;mid-kid&gt;</a></span><span class="message">dang</span></div><div class="line" id="122615"><span class="nick" style="color:#389600"><a href="#122615" label="[12:26:15]">&lt;mid-kid&gt;</a></span><span class="message">for guix it might be good to think about just invalidating the entire hash tree at some point</span></div><div class="line" id="122632"><span class="nick" style="color:#8dd3c7"><a href="#122632" label="[12:26:32]">&lt;Googulator&gt;</a></span><span class="message">if it was ever a clean version of Guix, that is - I suspect it wasn't one, but rather some ad-hoc Git repository on a developer's box, possibly even with uncommitted changes</span></div><div class="line" id="122700"><span class="nick" style="color:#8dd3c7"><a href="#122700" label="[12:27:00]">&lt;Googulator&gt;</a></span><span class="message">I know for sure that the binaries were compiled years before they were committed to Git</span></div><div class="line" id="122707"><span class="nick" style="color:#389600"><a href="#122707" label="[12:27:07]">&lt;mid-kid&gt;</a></span><span class="message">if you can prove you can get the same binaries reproducibly and the entire path to creating them is documented, then you would only need to invalidate the entire hash tree *once*</span></div><div class="line" id="122708"><span class="nick" style="color:#8dd3c7"><a href="#122708" label="[12:27:08]">&lt;Googulator&gt;</a></span><span class="message">&amp; they weren't built at the same time</span></div><div class="line" id="122813"><span class="nick" style="color:#389600"><a href="#122813" label="[12:28:13]">&lt;mid-kid&gt;</a></span><span class="message">and if you do it during a glibc upgrade or something I doubt people will notice</span></div><div class="line" id="122905"><span class="nick" style="color:#2e2a4a"><a href="#122905" label="[12:29:05]">&lt;sam_&gt;</a></span><span class="message">[11:24] &lt;mid-kid&gt; the way it's meant to be used no two machines will ever be the exact same &lt;-- this isn't quite right; there's a lot of people who use gentoo and deploy exact configurations with their _own-built_ binpkgs, and shared profiles and such</span></div><div class="line" id="122908"><span class="nick" style="color:#8dd3c7"><a href="#122908" label="[12:29:08]">&lt;Googulator&gt;</a></span><span class="message">unfortunately it's still noticeable, because it means going through Scheme-only bootstrap again, which is         d       o       g               s       l       o       w</span></div><div class="line" id="122915"><span class="nick" style="color:#2e2a4a"><a href="#122915" label="[12:29:15]">&lt;sam_&gt;</a></span><span class="message">but yes, in general, it's hard because the focus on our end is customisability</span></div><div class="line" id="122941"><span class="nick" style="color:#6b8072"><a href="#122941" label="[12:29:41]">&lt;aggi&gt;</a></span><span class="message">i almost finished the _complete_ no-c++/tcc-toolchain/static gentoo build, maintained with crossdev</span></div><div class="line" id="122952"><span class="nick" style="color:#8dd3c7"><a href="#122952" label="[12:29:52]">&lt;Googulator&gt;</a></span><span class="message">(the reason why I campaigned against Scheme-only bootstrap in live-bootstrap)</span></div><div class="line" id="122958"><span class="nick" style="color:#389600"><a href="#122958" label="[12:29:58]">&lt;mid-kid&gt;</a></span><span class="message">&lt;sam_&gt; but yes, in general, it's hard because the focus on our end is customisability &lt;- yeah that's what I meant with &quot;how it's meant to be used&quot; lol</span></div><div class="line" id="123012"><span class="nick" style="color:#2e2a4a"><a href="#123012" label="[12:30:12]">&lt;sam_&gt;</a></span><span class="message">my point is i don't agree with the how it's meant to be used</span></div><div class="line" id="123018"><span class="nick" style="color:#389600"><a href="#123018" label="[12:30:18]">&lt;mid-kid&gt;</a></span><span class="message">ah</span></div><div class="line" id="123027"><span class="nick" style="color:#2e2a4a"><a href="#123027" label="[12:30:27]">&lt;sam_&gt;</a></span><span class="message">because people do very much use it like that, and we help them out if they need changes or something</span></div><div class="line" id="123034"><span class="nick" style="color:#2e2a4a"><a href="#123034" label="[12:30:34]">&lt;sam_&gt;</a></span><span class="message">it's just not #1 in people's minds either</span></div><div class="line" id="123113"><span class="nick" style="color:#6b8072"><a href="#123113" label="[12:31:13]">&lt;aggi&gt;</a></span><span class="message">problem is, python/perl/autotools/portage are not self-hosting with tcc-toolchain</span></div><div class="line" id="123204"><span class="nick" style="color:#389600"><a href="#123204" label="[12:32:04]">&lt;mid-kid&gt;</a></span><span class="message">I mean I can point to quite a few things that are &quot;normal&quot; to customize and sometimes influence the builds of packages in emerge</span></div><div class="line" id="123216"><span class="nick" style="color:#8dd3c7"><a href="#123216" label="[12:32:16]">&lt;Googulator&gt;</a></span><span class="message">there's a massive speed difference between rebuilding glibc &amp; beyond with Bash as the shell (which is what happens on a glibc upgrade), vs rebuilding with Gash - with Gash, configure script execution actually dominates the time to build</span></div><div class="line" id="123234"><span class="nick" style="color:#389600"><a href="#123234" label="[12:32:34]">&lt;mid-kid&gt;</a></span><span class="message">and stuff like people modifying env.d and sticking files in /usr/local also influences builds to different degrees</span></div><div class="line" id="123256"><span class="nick" style="color:#2e2a4a"><a href="#123256" label="[12:32:56]">&lt;sam_&gt;</a></span><span class="message">mid-kid: it's not about whether or not you CAN customise it (you can do that anywhere?), it's about whether we also make it possible to control things via the PM</span></div><div class="line" id="123259"><span class="nick" style="color:#80b1d3"><a href="#123259" label="[12:32:59]">&lt;nimaje&gt;</a></span><span class="message">wait, guix uses the hash of a package in dependencies too, so you have to do a build of each supported configuration when updating anything? or how should I understand 'invalidating the entire hash tree'?</span></div><div class="line" id="123307"><span class="nick" style="color:#2e2a4a"><a href="#123307" label="[12:33:07]">&lt;sam_&gt;</a></span><span class="message">i can say that you can pass random env vars to dpkg and now it's non-reproducible, same thing</span></div><div class="line" id="123330"><span class="nick" style="color:#8dd3c7"><a href="#123330" label="[12:33:30]">&lt;Googulator&gt;</a></span><span class="message">also, doesn't emerge timestamp packages, preventing reproducibility even with identical settings?</span></div><div class="line" id="123347"><span class="nick" style="color:#2e2a4a"><a href="#123347" label="[12:33:47]">&lt;sam_&gt;</a></span><span class="message">yes, it does at the moment, someone's proposed a way to change that</span></div><div class="line" id="123423"><span class="nick" style="color:#8dd3c7"><a href="#123423" label="[12:34:23]">&lt;Googulator&gt;</a></span><span class="message">nimaje: it uses the hash of the package's definition, but not the output</span></div><div class="line" id="123445"><span class="nick" style="color:#8dd3c7"><a href="#123445" label="[12:34:45]">&lt;Googulator&gt;</a></span><span class="message">definition + hashes of the dependencies' definitions</span></div><div class="line" id="123447"><span class="nick" style="color:#389600"><a href="#123447" label="[12:34:47]">&lt;mid-kid&gt;</a></span><span class="message">sam_: I mean I agree I just meant that it's really really easy to make binaries that are slightly different on every machine, unless you use binpkgs and a controlled environment of course.</span></div><div class="line" id="123617"><span class="nick" style="color:#8dd3c7"><a href="#123617" label="[12:36:17]">&lt;Googulator&gt;</a></span><span class="message">nimaje: bootstrap binaries are an exception, because the actual hash of the binaries is used there</span></div><div class="line" id="123635"><span class="nick" style="color:#389600"><a href="#123635" label="[12:36:35]">&lt;mid-kid&gt;</a></span><span class="message">&lt;sam_&gt; yes, it does at the moment, someone's proposed a way to change that &lt;- that's great! I was thinking of proposing/implementing something like that for this bootstrap thing, but good to know people are already interested</span></div><div class="line" id="123638"><span class="nick" style="color:#8dd3c7"><a href="#123638" label="[12:36:38]">&lt;Googulator&gt;</a></span><span class="message">so if I replace bootstrap-guile without doing some magic, every package needs to be rebuilt</span></div><div class="line" id="123708"><span class="nick" style="color:#8dd3c7"><a href="#123708" label="[12:37:08]">&lt;Googulator&gt;</a></span><span class="message">because everything indirectly depends on bootstrap-guile, which is a binary</span></div><div class="line" id="123757"><span class="nick" style="color:#8dd3c7"><a href="#123757" label="[12:37:57]">&lt;Googulator&gt;</a></span><span class="message">My plan there is to produce some fully reproducible replacements, and then patch the hashing code to special-case on the hashes of the replacements, returning the originals' hashes instead</span></div><div class="line" id="123924"><span class="nick" style="color:#80b1d3"><a href="#123924" label="[12:39:24]">&lt;nimaje&gt;</a></span><span class="message">well, it should use the quasi-standart SOURCE_DATE_EPOCH <a rel="nofollow" href="https://reproducible-builds.org/docs/timestamps/">https://reproducible-builds.org/docs/timestamps/</a> </span></div><div class="line" id="124021"><span class="nick" style="color:#389600"><a href="#124021" label="[12:40:21]">&lt;mid-kid&gt;</a></span><span class="message">I like how alpine's abuild sets SOURCE_DATE_EPOCH to the modification date of the APKBUILD file</span></div><div class="line" id="124023"><span class="nick" style="color:#8dd3c7"><a href="#124023" label="[12:40:23]">&lt;Googulator&gt;</a></span><span class="message">the challenge is that the replacements must be identically buildable in guix (to avoid introducing an external dependency) and live-bootstrap with no guix installed (otherwise binaries built under control of the original bootstrap-guile will handle the replacement one, providing a propagation path)</span></div><div class="line" id="124624"><span class="nick" style="color:#2e2a4a"><a href="#124624" label="[12:46:24]">&lt;sam_&gt;</a></span><span class="message">nimaje: yes, the question is how to handle interaction with our specification</span></div><div class="line" id="124630"><span class="nick" style="color:#2e2a4a"><a href="#124630" label="[12:46:30]">&lt;sam_&gt;</a></span><span class="message">mid-kid: that's the plan for one of the toggles</span></div><div class="line" id="124827"><span class="nick" style="color:#389600"><a href="#124827" label="[12:48:27]">&lt;mid-kid&gt;</a></span><span class="message">sick! do you have any bug tracker numbers or is this mailing list talk?</span></div><div class="line" id="141231"><span class="nick" style="color:#6d2462"><a href="#141231" label="[14:12:31]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; mid-kid: yes it would be good to switch to pkgconf...</span></div><div class="line" id="141312"><span class="nick" style="color:#6d2462"><a href="#141312" label="[14:13:12]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; We just need to check if anything breaks, perhaps some of the packages don't work with it</span></div><div class="line" id="141320"><span class="nick" style="color:#6d2462"><a href="#141320" label="[14:13:20]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; E.g. something like autogen</span></div><div class="line" id="141608"><span class="nick" style="color:#2e2a4a"><a href="#141608" label="[14:16:08]">&lt;sam_&gt;</a></span><span class="message">mid-kid: see bug 913920</span></div><div class="line" id="151046"><span class="nick" style="color:#6b8072"><a href="#151046" label="[15:10:46]">&lt;aggi&gt;</a></span><span class="message">i think it would simplify bootstrapping (including what's considered M3-planet), if a complete development host was available with tcc-toolchain</span></div><div class="line" id="151122"><span class="nick" style="color:#6b8072"><a href="#151122" label="[15:11:22]">&lt;aggi&gt;</a></span><span class="message">that could keep gentoo/package-management (python) and GNU-buildsystem/automake (perl)</span></div><div class="line" id="151233"><span class="nick" style="color:#6b8072"><a href="#151233" label="[15:12:33]">&lt;aggi&gt;</a></span><span class="message">then, an entire gnu-toolchain can be spawned without almost no efforts, since gentoo maintained it for example, in the past</span></div><div class="line" id="151306"><span class="nick" style="color:#6b8072"><a href="#151306" label="[15:13:06]">&lt;aggi&gt;</a></span><span class="message">it's not a big problem, to pull back gcc-4.7 ebuild with a few hacks to toolchain.eclass</span></div><div class="line" id="151440"><span class="nick" style="color:#6b8072"><a href="#151440" label="[15:14:40]">&lt;aggi&gt;</a></span><span class="message">ironically, it is python and perl that are blocked against tcc, and with it take down autotools and gentoo</span></div><div class="line" id="151809"><span class="nick" style="color:#6b8072"><a href="#151809" label="[15:18:09]">&lt;aggi&gt;</a></span><span class="message">just finished, full static-linking support (that isn't recommended nor maintained by gentoo, but it's needed for the remaining bootstrapping path that i got)</span></div><div class="line" id="151956"><span class="nick" style="color:#6b8072"><a href="#151956" label="[15:19:56]">&lt;aggi&gt;</a></span><span class="message">i'll take a nap, and then once temperatures are down to normal during the night i'll cope with the perl and python issue</span></div><div class="line" id="152246"><span class="nick" style="color:#389600"><a href="#152246" label="[15:22:46]">&lt;mid-kid&gt;</a></span><span class="message">godspeed</span></div><div class="line" id="152248"><span class="nick" style="color:#389600"><a href="#152248" label="[15:22:48]">&lt;mid-kid&gt;</a></span><span class="message">o7</span></div><div class="line" id="162733"><span class="nick" style="color:#8dd3c7"><a href="#162733" label="[16:27:33]">&lt;Googulator&gt;</a></span><span class="message">sam_: It just occurred to me, it would technically be enough to ensure reproducibility of Catalyst's output, for a bootstrap to be verifiable against the existing built package base</span></div><div class="line" id="162929"><span class="nick" style="color:#8dd3c7"><a href="#162929" label="[16:29:29]">&lt;Googulator&gt;</a></span><span class="message">i.e. if Catalyst builds identical stage3 and install CD images on bootstrapped and standard Gentoo, then simply starting a fresh install from the reproducible CD &amp; stage3 ensures there's nothing propagating</span></div><div class="line" id="163028"><span class="nick" style="color:#8dd3c7"><a href="#163028" label="[16:30:28]">&lt;Googulator&gt;</a></span><span class="message">It seems there was considerable progress to achieving reproducibility at some point, albeit without Catalyst: <a rel="nofollow" href="https://wiki.gentoo.org/wiki/User:OstCollector/Reproducible_Build">https://wiki.gentoo.org/wiki/User:OstCollector/Reproducible_Build</a> </span></div><div class="line" id="163058"><span class="nick" style="color:#389600"><a href="#163058" label="[16:30:58]">&lt;mid-kid&gt;</a></span><span class="message">if you can achieve it with catalyst you can achieve it without catalyst - it doesn't really matter</span></div><div class="line" id="163125"><span class="nick" style="color:#8dd3c7"><a href="#163125" label="[16:31:25]">&lt;Googulator&gt;</a></span><span class="message">If this can be ported to Catalyst, I assume it won't be hard to add a postprocessing step to &quot;manually&quot; regularize the remaining offending files before generating the final image</span></div><div class="line" id="163200"><span class="nick" style="color:#389600"><a href="#163200" label="[16:32:00]">&lt;mid-kid&gt;</a></span><span class="message">most of what's listed in that wiki page should really just be added to portage itself</span></div><div class="line" id="163219"><span class="nick" style="color:#389600"><a href="#163219" label="[16:32:19]">&lt;mid-kid&gt;</a></span><span class="message">or the ::gentoo tree in the cases where configure flags matter</span></div><div class="line" id="163219"><span class="nick" style="color:#2e2a4a"><a href="#163219" label="[16:32:19]">&lt;sam_&gt;</a></span><span class="message">obviously, the point of the page however was to document their notes as they ewnt</span></div><div class="line" id="163221"><span class="nick" style="color:#2e2a4a"><a href="#163221" label="[16:32:21]">&lt;sam_&gt;</a></span><span class="message">*went</span></div><div class="line" id="163223"><span class="nick" style="color:#2e2a4a"><a href="#163223" label="[16:32:23]">&lt;sam_&gt;</a></span><span class="message">they're still working on it though</span></div><div class="line" id="163226"><span class="nick" style="color:#2e2a4a"><a href="#163226" label="[16:32:26]">&lt;sam_&gt;</a></span><span class="message">or were not that long ago</span></div><div class="line" id="163234"><span class="nick" style="color:#2e2a4a"><a href="#163234" label="[16:32:34]">&lt;sam_&gt;</a></span><span class="message">it's not meant to replace or prevent efforts to upstream or integrate stuff</span></div><div class="line" id="163239"><span class="nick" style="color:#2e2a4a"><a href="#163239" label="[16:32:39]">&lt;sam_&gt;</a></span><span class="message">more just notes on an experiment</span></div><div class="line" id="163241"><span class="nick" style="color:#8dd3c7"><a href="#163241" label="[16:32:41]">&lt;Googulator&gt;</a></span><span class="message">I suggest targeting Catalyst because it already tries to reduce configuration variance to a minimum (i.e. you build from standard definition files with Catalyst, as opposed to customizing for every system)</span></div><div class="line" id="163245"><span class="nick" style="color:#2e2a4a"><a href="#163245" label="[16:32:45]">&lt;sam_&gt;</a></span><span class="message">(and I told them that)</span></div><div class="line" id="163254"><span class="nick" style="color:#2e2a4a"><a href="#163254" label="[16:32:54]">&lt;sam_&gt;</a></span><span class="message">Googulator: ah, an interesting point</span></div><div class="line" id="163337"><span class="nick" style="color:#8dd3c7"><a href="#163337" label="[16:33:37]">&lt;Googulator&gt;</a></span><span class="message">all of those configuration options that are &quot;all over&quot; a standard install, which introduce variability to the build - they are gathered in one location with Catalyst</span></div><div class="line" id="163352"><span class="nick" style="color:#389600"><a href="#163352" label="[16:33:52]">&lt;mid-kid&gt;</a></span><span class="message">Googulator: oh, yeah it's a decent common denominator for a standard config</span></div><div class="line" id="163409"><span class="nick" style="color:#389600"><a href="#163409" label="[16:34:09]">&lt;mid-kid&gt;</a></span><span class="message">but then again, imo so is an empty (except make.profile) /etc/portage dir</span></div><div class="line" id="163433"><span class="nick" style="color:#8dd3c7"><a href="#163433" label="[16:34:33]">&lt;Googulator&gt;</a></span><span class="message">won't that default to --march=native?</span></div><div class="line" id="163435"><span class="nick" style="color:#2e2a4a"><a href="#163435" label="[16:34:35]">&lt;sam_&gt;</a></span><span class="message">no</span></div><div class="line" id="163441"><span class="nick" style="color:#2e2a4a"><a href="#163441" label="[16:34:41]">&lt;sam_&gt;</a></span><span class="message">users set that, we don't default to it at all</span></div><div class="line" id="163450"><span class="nick" style="color:#2e2a4a"><a href="#163450" label="[16:34:50]">&lt;sam_&gt;</a></span><span class="message">unlike other distros we do not e.g. tell the compiler to do hat</span></div><div class="line" id="163451"><span class="nick" style="color:#2e2a4a"><a href="#163451" label="[16:34:51]">&lt;sam_&gt;</a></span><span class="message">*that</span></div><div class="line" id="163501"><span class="nick" style="color:#2e2a4a"><a href="#163501" label="[16:35:01]">&lt;sam_&gt;</a></span><span class="message">you can configure gcc s.t. it's the default but we don't</span></div><div class="line" id="163511"><span class="nick" style="color:#8dd3c7"><a href="#163511" label="[16:35:11]">&lt;Googulator&gt;</a></span><span class="message">hmm, I thought that was the biggest source of variability, defaulting to optimizing for the local hardware</span></div><div class="line" id="163537"><span class="nick" style="color:#2e2a4a"><a href="#163537" label="[16:35:37]">&lt;sam_&gt;</a></span><span class="message">no :)</span></div><div class="line" id="163549"><span class="nick" style="color:#2e2a4a"><a href="#163549" label="[16:35:49]">&lt;sam_&gt;</a></span><span class="message">see, this is what I mean, people can opt-in to do this stuff, but a lot of it is their choice</span></div><div class="line" id="163557"><span class="nick" style="color:#2e2a4a"><a href="#163557" label="[16:35:57]">&lt;sam_&gt;</a></span><span class="message">the default absolutely is not to do that</span></div><div class="line" id="163601"><span class="nick" style="color:#2e2a4a"><a href="#163601" label="[16:36:01]">&lt;sam_&gt;</a></span><span class="message">stages ship with CFLAGS=&quot;-O2 -pipe&quot;</span></div><div class="line" id="163615"><span class="nick" style="color:#2e2a4a"><a href="#163615" label="[16:36:15]">&lt;sam_&gt;</a></span><span class="message">we just tell people they can do -march=native if they want</span></div><div class="line" id="163620"><span class="nick" style="color:#2e2a4a"><a href="#163620" label="[16:36:20]">&lt;sam_&gt;</a></span><span class="message">(and many do, but it's not done by default)</span></div><div class="line" id="163627"><span class="nick" style="color:#389600"><a href="#163627" label="[16:36:27]">&lt;mid-kid&gt;</a></span><span class="message">the biggest source of variability imo is the order in which stuff is compiled, which depends on which moments you choose to update your system</span></div><div class="line" id="163651"><span class="nick" style="color:#2e2a4a"><a href="#163651" label="[16:36:51]">&lt;sam_&gt;</a></span><span class="message">so this reminds me and i wanted y'alls thoughts on this</span></div><div class="line" id="163714"><span class="nick" style="color:#389600"><a href="#163714" label="[16:37:14]">&lt;mid-kid&gt;</a></span><span class="message">&quot;emerge -e @world&quot; ensures everything is compiled against the latest glibc, but regular upgrades don't</span></div><div class="line" id="163758"><span class="nick" style="color:#389600"><a href="#163758" label="[16:37:58]">&lt;mid-kid&gt;</a></span><span class="message">and this source of variability exists in the default working of catalyst as well - it defaults to using cached binpkgs and only building updated packages</span></div><div class="line" id="163802"><span class="nick" style="color:#2e2a4a"><a href="#163802" label="[16:38:02]">&lt;sam_&gt;</a></span><span class="message">I saw <a rel="nofollow" href="https://blog.josefsson.org/2024/07/10/towards-idempotent-rebuilds/">https://blog.josefsson.org/2024/07/10/towards-idempotent-rebuilds/</a>  posted on HN and I found this fascinating</span></div><div class="line" id="163805"><span class="nick" style="color:#2e2a4a"><a href="#163805" label="[16:38:05]">&lt;sam_&gt;</a></span><span class="message">because to me, this is so obvious</span></div><div class="line" id="163814"><span class="nick" style="color:#2e2a4a"><a href="#163814" label="[16:38:14]">&lt;sam_&gt;</a></span><span class="message">I ASSUMED the reproducible build efforts in distros were talking about this kind of reproducibility</span></div><div class="line" id="163816"><span class="nick" style="color:#2e2a4a"><a href="#163816" label="[16:38:16]">&lt;sam_&gt;</a></span><span class="message">but apparently they're not</span></div><div class="line" id="163919"><span class="nick" style="color:#389600"><a href="#163919" label="[16:39:19]">&lt;mid-kid&gt;</a></span><span class="message">yeah no reproducible builds in most distros currently means &quot;if you get this set of packages at *these* exact versions you can rebuild a package identically&quot;</span></div><div class="line" id="163924"><span class="nick" style="color:#2e2a4a"><a href="#163924" label="[16:39:24]">&lt;sam_&gt;</a></span><span class="message">yeah</span></div><div class="line" id="163930"><span class="nick" style="color:#2e2a4a"><a href="#163930" label="[16:39:30]">&lt;sam_&gt;</a></span><span class="message">but what i also found interesting is</span></div><div class="line" id="163939"><span class="nick" style="color:#2e2a4a"><a href="#163939" label="[16:39:39]">&lt;sam_&gt;</a></span><span class="message">&gt; However as far as I know, they do not confirm or deny that their rebuilds match the official packages. In fact, typically their rebuilds do not match the official packages, even when they say the package is reproducible, which had me surprised at first</span></div><div class="line" id="163943"><span class="nick" style="color:#2e2a4a"><a href="#163943" label="[16:39:43]">&lt;sam_&gt;</a></span><span class="message">???</span></div><div class="line" id="163959"><span class="nick" style="color:#389600"><a href="#163959" label="[16:39:59]">&lt;mid-kid&gt;</a></span><span class="message">not sure what the author means tbh</span></div><div class="line" id="164006"><span class="nick" style="color:#2e2a4a"><a href="#164006" label="[16:40:06]">&lt;sam_&gt;</a></span><span class="message">I think what they mean is like</span></div><div class="line" id="164013"><span class="nick" style="color:#2e2a4a"><a href="#164013" label="[16:40:13]">&lt;sam_&gt;</a></span><span class="message">if you go on the debian reproducible build site, then look at a reproducible build it did</span></div><div class="line" id="164017"><span class="nick" style="color:#2e2a4a"><a href="#164017" label="[16:40:17]">&lt;sam_&gt;</a></span><span class="message">it doesn't compare it to the official archive</span></div><div class="line" id="164024"><span class="nick" style="color:#389600"><a href="#164024" label="[16:40:24]">&lt;mid-kid&gt;</a></span><span class="message">oh</span></div><div class="line" id="164035"><span class="nick" style="color:#2e2a4a"><a href="#164035" label="[16:40:35]">&lt;sam_&gt;</a></span><span class="message">(the author is a Debian developer as well)</span></div><div class="line" id="164104"><span class="nick" style="color:#389600"><a href="#164104" label="[16:41:04]">&lt;mid-kid&gt;</a></span><span class="message">oh yeah that sounds bad</span></div><div class="line" id="164113"><span class="nick" style="color:#2e2a4a"><a href="#164113" label="[16:41:13]">&lt;sam_&gt;</a></span><span class="message">btw, wrt your glibc point: --rebuild-if-new-slot --rebuild-if-new-rev --rebuild-if-new-ver --rebuild-if-unbuilt in portage are kind of related to this</span></div><div class="line" id="164124"><span class="nick" style="color:#2e2a4a"><a href="#164124" label="[16:41:24]">&lt;sam_&gt;</a></span><span class="message">(not entirely, but they are related to this idea of rebuilding-even-if-not-strictly-needed)</span></div><div class="line" id="164227"><span class="nick" style="color:#389600"><a href="#164227" label="[16:42:27]">&lt;mid-kid&gt;</a></span><span class="message">the dependency tree in @system would need to become more complete/correct for that to work effectively I think</span></div><div class="line" id="164230"><span class="nick" style="color:#2e2a4a"><a href="#164230" label="[16:42:30]">&lt;sam_&gt;</a></span><span class="message">yeah</span></div><div class="line" id="164235"><span class="nick" style="color:#2e2a4a"><a href="#164235" label="[16:42:35]">&lt;sam_&gt;</a></span><span class="message">which brings me onto the other point</span></div><div class="line" id="164239"><span class="nick" style="color:#234e69"><a href="#164239" label="[16:42:39]">&lt;notgull&gt;</a></span><span class="message">Hello! I left a comment on the Miraheze wiki, but I figure I should ask here as well.</span></div><div class="line" id="164248"><span class="nick" style="color:#2e2a4a"><a href="#164248" label="[16:42:48]">&lt;sam_&gt;</a></span><span class="message">i think the #1 thing to make better first in gentoo is to make it easier to bootstrap with external tools somehow</span></div><div class="line" id="164300"><span class="nick" style="color:#2e2a4a"><a href="#164300" label="[16:43:00]">&lt;sam_&gt;</a></span><span class="message">like to say &quot;ok, here's the fedora gcc or whatever, please try build a minimal root from it&quot;</span></div><div class="line" id="164311"><span class="nick" style="color:#2e2a4a"><a href="#164311" label="[16:43:11]">&lt;sam_&gt;</a></span><span class="message">which is obviously what your script/instructions do, just from a slightly different angle</span></div><div class="line" id="164315"><span class="nick" style="color:#2e2a4a"><a href="#164315" label="[16:43:15]">&lt;sam_&gt;</a></span><span class="message">right now it involves a lot of hackery</span></div><div class="line" id="164318"><span class="nick" style="color:#234e69"><a href="#164318" label="[16:43:18]">&lt;notgull&gt;</a></span><span class="message">I think Rust and Zig aren’t actually bootstrapped. Rustc’s source code contains a lot of pre-generated code that I don’t think we work around, and zig-bootstrap is a binary blob.</span></div><div class="line" id="164334"><span class="nick" style="color:#389600"><a href="#164334" label="[16:43:34]">&lt;mid-kid&gt;</a></span><span class="message">sam_: yeah that'd be really cool</span></div><div class="line" id="164338"><span class="nick" style="color:#234e69"><a href="#164338" label="[16:43:38]">&lt;notgull&gt;</a></span><span class="message">Are there plans to work around this?</span></div><div class="line" id="164409"><span class="nick" style="color:#389600"><a href="#164409" label="[16:44:09]">&lt;mid-kid&gt;</a></span><span class="message">I've played around with scripts/bootstrap.sh while using the ROOT= variable to not a lot of success</span></div><div class="line" id="164416"><span class="nick" style="color:#234e69"><a href="#164416" label="[16:44:16]">&lt;notgull&gt;</a></span><span class="message">At the moment I'm working on a bootstrap plan for Rust to build the compiler without any pre-generated sources, so I’m mostly asking about Zig.</span></div><div class="line" id="164421"><span class="nick" style="color:#389600"><a href="#164421" label="[16:44:21]">&lt;mid-kid&gt;</a></span><span class="message">honestly I'm not entirely sure what purpose scripts/bootstrap.sh even serves</span></div><div class="line" id="164434"><span class="nick" style="color:#2e2a4a"><a href="#164434" label="[16:44:34]">&lt;sam_&gt;</a></span><span class="message">nor me :D</span></div><div class="line" id="164448"><span class="nick" style="color:#389600"><a href="#164448" label="[16:44:48]">&lt;mid-kid&gt;</a></span><span class="message">it seems like a legacy thing from when stage1 still existed, and it's been (rightfully) pulled out of catalyst recently.</span></div><div class="line" id="164453"><span class="nick" style="color:#2e2a4a"><a href="#164453" label="[16:44:53]">&lt;sam_&gt;</a></span><span class="message">even trying to be generous about what it should maybe do, it still doesnt make any sense</span></div><div class="line" id="164500"><span class="nick" style="color:#2e2a4a"><a href="#164500" label="[16:45:00]">&lt;sam_&gt;</a></span><span class="message">like even if i accept its nothing to do wit hwhat i want</span></div><div class="line" id="164500"><span class="nick" style="color:#389600"><a href="#164500" label="[16:45:00]">&lt;mid-kid&gt;</a></span><span class="message">yeah</span></div><div class="line" id="164531"><span class="nick" style="color:#2e2a4a"><a href="#164531" label="[16:45:31]">&lt;sam_&gt;</a></span><span class="message">I think we should remove it to stop confusing people</span></div><div class="line" id="164541"><span class="nick" style="color:#2e2a4a"><a href="#164541" label="[16:45:41]">&lt;sam_&gt;</a></span><span class="message">there's a place for real work there but that script is not it</span></div><div class="line" id="164545"><span class="nick" style="color:#2e2a4a"><a href="#164545" label="[16:45:45]">&lt;sam_&gt;</a></span><span class="message">it is just misleading</span></div><div class="line" id="164548"><span class="nick" style="color:#2e2a4a"><a href="#164548" label="[16:45:48]">&lt;sam_&gt;</a></span><span class="message">i will ask around</span></div><div class="line" id="164601"><span class="nick" style="color:#389600"><a href="#164601" label="[16:46:01]">&lt;mid-kid&gt;</a></span><span class="message">it doesn't work correctly anyway - the &quot;emerge -e @system&quot; step it tells you to do at the end cannot resolve dependencies without fiddling with USE=</span></div><div class="line" id="164614"><span class="nick" style="color:#389600"><a href="#164614" label="[16:46:14]">&lt;mid-kid&gt;</a></span><span class="message">sam_: the *one* use it had for me is teaching me about BOOTSTRAP_USE and USE=build</span></div><div class="line" id="164645"><span class="nick" style="color:#389600"><a href="#164645" label="[16:46:45]">&lt;mid-kid&gt;</a></span><span class="message">anyway, tracing back a second</span></div><div class="line" id="164654"><span class="nick" style="color:#389600"><a href="#164654" label="[16:46:54]">&lt;mid-kid&gt;</a></span><span class="message">I wonder if the script I made would work on other distros as-is already</span></div><div class="line" id="164710"><span class="nick" style="color:#389600"><a href="#164710" label="[16:47:10]">&lt;mid-kid&gt;</a></span><span class="message">I reckon it could if you install enough build deps</span></div><div class="line" id="164731"><span class="nick" style="color:#389600"><a href="#164731" label="[16:47:31]">&lt;mid-kid&gt;</a></span><span class="message">But it'd be nice to eventually turn it into a bootstrap-prefix.sh-esque script which just figures everything out as it goes.</span></div><div class="line" id="164758"><span class="nick" style="color:#2e2a4a"><a href="#164758" label="[16:47:58]">&lt;sam_&gt;</a></span><span class="message">yeah</span></div><div class="line" id="164808"><span class="nick" style="color:#2e2a4a"><a href="#164808" label="[16:48:08]">&lt;sam_&gt;</a></span><span class="message">I was just thinking about that</span></div><div class="line" id="164815"><span class="nick" style="color:#2e2a4a"><a href="#164815" label="[16:48:15]">&lt;sam_&gt;</a></span><span class="message">(the relationship w/ bootstrap-prefix)</span></div><div class="line" id="164840"><span class="nick" style="color:#389600"><a href="#164840" label="[16:48:40]">&lt;mid-kid&gt;</a></span><span class="message">yeah I haven't tried but I wouldn't be surprised if bootstrap-prefix would've just worked out of the box here</span></div><div class="line" id="164842"><span class="nick" style="color:#234e69"><a href="#164842" label="[16:48:42]">&lt;notgull&gt;</a></span><span class="message">Wait, the web client doesn’t keep you logged in? That’s not hood</span></div><div class="line" id="164846"><span class="nick" style="color:#234e69"><a href="#164846" label="[16:48:46]">&lt;notgull&gt;</a></span><span class="message">good*</span></div><div class="line" id="164909"><span class="nick" style="color:#389600"><a href="#164909" label="[16:49:09]">&lt;mid-kid&gt;</a></span><span class="message">the only thing is bootstrap-prefix doesn't allow you to build into a new prefix-less ROOT</span></div><div class="line" id="164926"><span class="nick" style="color:#389600"><a href="#164926" label="[16:49:26]">&lt;mid-kid&gt;</a></span><span class="message">(and I don't really think it's a good idea to clutter that script further with logic)</span></div><div class="line" id="164947"><span class="nick" style="color:#389600"><a href="#164947" label="[16:49:47]">&lt;mid-kid&gt;</a></span><span class="message">(instead of moving some of that logic into portage/::gentoo)</span></div><div class="line" id="165121"><span class="nick" style="color:#389600"><a href="#165121" label="[16:51:21]">&lt;mid-kid&gt;</a></span><span class="message">now I feel bad for talking over notgull</span></div><div class="line" id="165150"><span class="nick" style="color:#389600"><a href="#165150" label="[16:51:50]">&lt;mid-kid&gt;</a></span><span class="message">I'm curious what those pregenerated files in rustc could be</span></div><div class="line" id="171705"><span class="nick" style="color:#6d2462"><a href="#171705" label="[17:17:05]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; @irc_libera_notgull:stikonas.eu: I don't think anybody looked at pregenerated files in rust</span></div><div class="line" id="171748"><span class="nick" style="color:#6d2462"><a href="#171748" label="[17:17:48]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; There used to be pregen binaries there (I think in third_party/vte) but that is now fixed</span></div><div class="line" id="173222"><span class="nick" style="color:#389600"><a href="#173222" label="[17:32:22]">&lt;mid-kid&gt;</a></span><span class="message">they left</span></div><div class="line" id="173520"><span class="nick" style="color:#6c3d55"><a href="#173520" label="[17:35:20]">&lt;lanodan&gt;</a></span><span class="message">Doesn't looks cleaned up to me… <a rel="nofollow" href="https://hacktivis.me/tmp/rustc-1.80.1-src_deblob.log">https://hacktivis.me/tmp/rustc-1.80.1-src_deblob.log</a> </span></div><div class="line" id="173918"><span class="nick" style="color:#6c3d55"><a href="#173918" label="[17:39:18]">&lt;lanodan&gt;</a></span><span class="message">llvm and winapi makes it quite noisy but there's also some blobs for linux (like librustix_outline_x86_64.a) and some wasm files.</span></div><div class="line" id="180050"><span class="nick" style="color:#6d2462"><a href="#180050" label="[18:00:50]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Hmm, true there are a few files...</span></div><div class="line" id="180118"><span class="nick" style="color:#6d2462"><a href="#180118" label="[18:01:18]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; llvm files are for tests, so those.can be ignored...</span></div><div class="line" id="180231"><span class="nick" style="color:#6d2462"><a href="#180231" label="[18:02:31]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Andrius Štikonas&gt; Though given xz backdoor, one should be careful with tests too</span></div><div class="line" id="181656"><span class="nick" style="color:#6c3d55"><a href="#181656" label="[18:16:56]">&lt;lanodan&gt;</a></span><span class="message">Yeah I think if they really need blobs for tests it ought to be something like optional tests in a separated tarball.</span></div><div class="line" id="181849"><span class="nick" style="color:#6c3d55"><a href="#181849" label="[18:18:49]">&lt;lanodan&gt;</a></span><span class="message">That said I still somewhat tolerate test blobs, in fact it's why deblob has a -e option to not remove them.</span></div><br /></div></body></html>