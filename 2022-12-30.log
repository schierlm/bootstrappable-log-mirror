<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-12-30.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="001854"><span class="nick" style="color:#389600"><a href="#001854" label="[00:18:54]">&lt;stikonas&gt;</a></span><span class="message">hmm, I've started adding more UEFI support to M2-Mesoplanet. In particular tried to fix spawning but it's only partially successful</span></div><div class="line" id="001920"><span class="nick" style="color:#389600"><a href="#001920" label="[00:19:20]">&lt;stikonas&gt;</a></span><span class="message">it can successfully runs M2-Planet but then gets stuck with M1 (so might be a bug  in M1)</span></div><div class="line" id="001941"><span class="nick" style="color:#389600"><a href="#001941" label="[00:19:41]">&lt;stikonas&gt;</a></span><span class="message">though I don't expect it to work anyway, as I haven't fixed M2libc to pull in correct #includes</span></div><div class="line" id="002012"><span class="nick" style="color:#389600"><a href="#002012" label="[00:20:12]">&lt;stikonas&gt;</a></span><span class="message">but looping forever is not what I expected...</span></div><div class="line" id="002038"><span class="nick" style="color:#8dd3c7"><a href="#002038" label="[00:20:38]">&lt;oriansj&gt;</a></span><span class="message">well can you reduce the M1 to the code that causes a loop and I'll fix it</span></div><div class="line" id="002158"><span class="nick" style="color:#389600"><a href="#002158" label="[00:21:58]">&lt;stikonas&gt;</a></span><span class="message">well, first test would be to try to reproduce it in POSIX</span></div><div class="line" id="002217"><span class="nick" style="color:#389600"><a href="#002217" label="[00:22:17]">&lt;stikonas&gt;</a></span><span class="message">otherwise it's just too hard to debug</span></div><div class="line" id="002240"><span class="nick" style="color:#389600"><a href="#002240" label="[00:22:40]">&lt;stikonas&gt;</a></span><span class="message">which shouldn't be too hard as we M2-Planet can emit UEFI code when running on Linux</span></div><div class="line" id="002328"><span class="nick" style="color:#389600"><a href="#002328" label="[00:23:28]">&lt;stikonas&gt;</a></span><span class="message">only then we can actually tell whether it is indeed a loop</span></div><div class="line" id="002333"><span class="nick" style="color:#389600"><a href="#002333" label="[00:23:33]">&lt;stikonas&gt;</a></span><span class="message">it might be something like segfault</span></div><div class="line" id="002351"><span class="nick" style="color:#389600"><a href="#002351" label="[00:23:51]">&lt;stikonas&gt;</a></span><span class="message">sicne UEFI has no memory protection, segfaults can manifest themselves in various ways</span></div><div class="line" id="002852"><span class="nick" style="color:#8dd3c7"><a href="#002852" label="[00:28:52]">&lt;oriansj&gt;</a></span><span class="message">the stack looks wrong</span></div><div class="line" id="003506"><span class="nick" style="color:#389600"><a href="#003506" label="[00:35:06]">&lt;stikonas&gt;</a></span><span class="message">without --architecture?</span></div><div class="line" id="003553"><span class="nick" style="color:#389600"><a href="#003553" label="[00:35:53]">&lt;stikonas&gt;</a></span><span class="message">in the meantime I think the issue is actually not M1 getting stuck but something later, I think M1.efi worked but for some reason hex2.efi was not called</span></div><div class="line" id="005948"><span class="nick" style="color:#8dd3c7"><a href="#005948" label="[00:59:48]">&lt;oriansj&gt;</a></span><span class="message">stikonas: I am very tempted to change the malloc/free design in a big way</span></div><div class="line" id="010020"><span class="nick" style="color:#389600"><a href="#010020" label="[01:00:20]">&lt;stikonas&gt;</a></span><span class="message">oriansj: sure, what are you proposing?</span></div><div class="line" id="010044"><span class="nick" style="color:#389600"><a href="#010044" label="[01:00:44]">&lt;stikonas&gt;</a></span><span class="message">that design was just something quick to be able to proceed with UEFI work</span></div><div class="line" id="010112"><span class="nick" style="color:#389600"><a href="#010112" label="[01:01:12]">&lt;stikonas&gt;</a></span><span class="message">(which just needs add_block functionality rather than brk)</span></div><div class="line" id="010115"><span class="nick" style="color:#8dd3c7"><a href="#010115" label="[01:01:15]">&lt;oriansj&gt;</a></span><span class="message">something a bit simpler and slightly less efficient</span></div><div class="line" id="010247"><span class="nick" style="color:#389600"><a href="#010247" label="[01:02:47]">&lt;stikonas&gt;</a></span><span class="message">yeah, I guess that's fine</span></div><div class="line" id="010511"><span class="nick" style="color:#389600"><a href="#010511" label="[01:05:11]">&lt;stikonas&gt;</a></span><span class="message">my first idea was to allocate big blocks and have per block &quot;brk&quot; pointer</span></div><div class="line" id="010520"><span class="nick" style="color:#389600"><a href="#010520" label="[01:05:20]">&lt;stikonas&gt;</a></span><span class="message">and then free that does nothing</span></div><div class="line" id="010600"><span class="nick" style="color:#389600"><a href="#010600" label="[01:06:00]">&lt;stikonas&gt;</a></span><span class="message">but I think then muurkha convinced me to do first-fit malloc</span></div><div class="line" id="010658"><span class="nick" style="color:#8dd3c7"><a href="#010658" label="[01:06:58]">&lt;oriansj&gt;</a></span><span class="message">I am thinking of doing a simple struct mnode {struct mnode* next, void* block, size_t size};</span></div><div class="line" id="010713"><span class="nick" style="color:#8dd3c7"><a href="#010713" label="[01:07:13]">&lt;oriansj&gt;</a></span><span class="message">do an insertion sort on every malloc</span></div><div class="line" id="010745"><span class="nick" style="color:#8dd3c7"><a href="#010745" label="[01:07:45]">&lt;oriansj&gt;</a></span><span class="message">(oh and , int used)</span></div><div class="line" id="010802"><span class="nick" style="color:#8dd3c7"><a href="#010802" label="[01:08:02]">&lt;oriansj&gt;</a></span><span class="message">on free, we just mark used to FALSE</span></div><div class="line" id="010813"><span class="nick" style="color:#389600"><a href="#010813" label="[01:08:13]">&lt;stikonas&gt;</a></span><span class="message">well, that is simpler</span></div><div class="line" id="010828"><span class="nick" style="color:#389600"><a href="#010828" label="[01:08:28]">&lt;stikonas&gt;</a></span><span class="message">I actually used singly linked list to track those big blocks in M2libc/UEFI too</span></div><div class="line" id="010833"><span class="nick" style="color:#389600"><a href="#010833" label="[01:08:33]">&lt;stikonas&gt;</a></span><span class="message">(as we also have to free them on exit)</span></div><div class="line" id="010836"><span class="nick" style="color:#8dd3c7"><a href="#010836" label="[01:08:36]">&lt;oriansj&gt;</a></span><span class="message">on malloc, we check if there is any block big enough and !used</span></div><div class="line" id="010925"><span class="nick" style="color:#8dd3c7"><a href="#010925" label="[01:09:25]">&lt;oriansj&gt;</a></span><span class="message">if not we brk/uefi_brk a new mnode and insert it based on size</span></div><div class="line" id="011011"><span class="nick" style="color:#8dd3c7"><a href="#011011" label="[01:10:11]">&lt;oriansj&gt;</a></span><span class="message">it'll waste memory and take a little longer but it should be relatively easy to reason about</span></div><div class="line" id="011154"><span class="nick" style="color:#389600"><a href="#011154" label="[01:11:54]">&lt;stikonas&gt;</a></span><span class="message">yeah, I think it should work</span></div><div class="line" id="011405"><span class="nick" style="color:#389600"><a href="#011405" label="[01:14:05]">&lt;stikonas&gt;</a></span><span class="message">so I've looked again, the only requirement for UEFI is being able to call block allocator (<a rel="nofollow" href="https://github.com/oriansj/M2libc/blob/1b8dacd2acb82e3e598af946992f11cd6bc10e8b/amd64/uefi/uefi.c#L827">https://github.com/oriansj/M2libc/blob/1b8dacd2acb82e3e598af946992f11cd6bc10e8b/amd64/uefi/uefi.c#L827</a>)  with some size (doesn't have to be the same from call to call)</span></div><div class="line" id="011534"><span class="nick" style="color:#8dd3c7"><a href="#011534" label="[01:15:34]">&lt;oriansj&gt;</a></span><span class="message">easy to do</span></div><div class="line" id="012803"><span class="nick" style="color:#8dd3c7"><a href="#012803" label="[01:28:03]">&lt;oriansj&gt;</a></span><span class="message">stikonas: you call __init_malloc twice for UEFI?</span></div><div class="line" id="012834"><span class="nick" style="color:#389600"><a href="#012834" label="[01:28:34]">&lt;stikonas&gt;</a></span><span class="message">I don't think so, but le me check</span></div><div class="line" id="012837"><span class="nick" style="color:#389600"><a href="#012837" label="[01:28:37]">&lt;stikonas&gt;</a></span><span class="message">might be accidental</span></div><div class="line" id="012927"><span class="nick" style="color:#389600"><a href="#012927" label="[01:29:27]">&lt;stikonas&gt;</a></span><span class="message">oriansj: where is the secnd call? I can only see one in <a rel="nofollow" href="https://github.com/oriansj/M2libc/blob/1b8dacd2acb82e3e598af946992f11cd6bc10e8b/amd64/uefi/uefi.c#L472">https://github.com/oriansj/M2libc/blob/1b8dacd2acb82e3e598af946992f11cd6bc10e8b/amd64/uefi/uefi.c#L472</a> </span></div><div class="line" id="012959"><span class="nick" style="color:#8dd3c7"><a href="#012959" label="[01:29:59]">&lt;oriansj&gt;</a></span><span class="message">in __init_malloc_uefi()</span></div><div class="line" id="013006"><span class="nick" style="color:#389600"><a href="#013006" label="[01:30:06]">&lt;stikonas&gt;</a></span><span class="message">that's the only one as far as I'm aware</span></div><div class="line" id="013025"><span class="nick" style="color:#389600"><a href="#013025" label="[01:30:25]">&lt;stikonas&gt;</a></span><span class="message">on UEFI libc-full.M1 does not call __init_malloc</span></div><div class="line" id="013124"><span class="nick" style="color:#8dd3c7"><a href="#013124" label="[01:31:24]">&lt;oriansj&gt;</a></span><span class="message">and in amd64/libc-full.M1</span></div><div class="line" id="013129"><span class="nick" style="color:#389600"><a href="#013129" label="[01:31:29]">&lt;stikonas&gt;</a></span><span class="message">that's POSIX libc</span></div><div class="line" id="013138"><span class="nick" style="color:#389600"><a href="#013138" label="[01:31:38]">&lt;stikonas&gt;</a></span><span class="message">uefi one is in amd64/uefi/libc-full.M1</span></div><div class="line" id="013147"><span class="nick" style="color:#389600"><a href="#013147" label="[01:31:47]">&lt;stikonas&gt;</a></span><span class="message">it's quite a bit differnet</span></div><div class="line" id="013149"><span class="nick" style="color:#8dd3c7"><a href="#013149" label="[01:31:49]">&lt;oriansj&gt;</a></span><span class="message">but I guess that is because the UEFI version doesn't have that matching call</span></div><div class="line" id="013154"><span class="nick" style="color:#389600"><a href="#013154" label="[01:31:54]">&lt;stikonas&gt;</a></span><span class="message">indeed</span></div><div class="line" id="013210"><span class="nick" style="color:#389600"><a href="#013210" label="[01:32:10]">&lt;stikonas&gt;</a></span><span class="message">you can't use the wonr libc-full.M1</span></div><div class="line" id="013218"><span class="nick" style="color:#8dd3c7"><a href="#013218" label="[01:32:18]">&lt;oriansj&gt;</a></span><span class="message">true</span></div><div class="line" id="013220"><span class="nick" style="color:#389600"><a href="#013220" label="[01:32:20]">&lt;stikonas&gt;</a></span><span class="message">calling __init_malloc twice would be the least of your worries</span></div><div class="line" id="013237"><span class="nick" style="color:#389600"><a href="#013237" label="[01:32:37]">&lt;stikonas&gt;</a></span><span class="message">on UEFI you need to get those system and image pointers</span></div><div class="line" id="013242"><span class="nick" style="color:#389600"><a href="#013242" label="[01:32:42]">&lt;stikonas&gt;</a></span><span class="message">rather than argc,argv</span></div><div class="line" id="013249"><span class="nick" style="color:#8dd3c7"><a href="#013249" label="[01:32:49]">&lt;oriansj&gt;</a></span><span class="message">and I am guessing there is some reason why UEFI's libc-*.M1 doesn't have that call too?</span></div><div class="line" id="013303"><span class="nick" style="color:#389600"><a href="#013303" label="[01:33:03]">&lt;stikonas&gt;</a></span><span class="message">well, because I added it in C file</span></div><div class="line" id="013316"><span class="nick" style="color:#8dd3c7"><a href="#013316" label="[01:33:16]">&lt;oriansj&gt;</a></span><span class="message">ok</span></div><div class="line" id="013324"><span class="nick" style="color:#389600"><a href="#013324" label="[01:33:24]">&lt;stikonas&gt;</a></span><span class="message">since initialization is fairly long, and can be done in C file, I thought it will be easier</span></div><div class="line" id="013330"><span class="nick" style="color:#389600"><a href="#013330" label="[01:33:30]">&lt;stikonas&gt;</a></span><span class="message">than doing the whole thing in assembly</span></div><div class="line" id="013339"><span class="nick" style="color:#8dd3c7"><a href="#013339" label="[01:33:39]">&lt;oriansj&gt;</a></span><span class="message">fair enough</span></div><div class="line" id="013350"><span class="nick" style="color:#389600"><a href="#013350" label="[01:33:50]">&lt;stikonas&gt;</a></span><span class="message">only the parts that absolutely have to be done in assembly are done so</span></div><div class="line" id="013359"><span class="nick" style="color:#389600"><a href="#013359" label="[01:33:59]">&lt;stikonas&gt;</a></span><span class="message">in particular switching to user stack</span></div><div class="line" id="013401"><span class="nick" style="color:#8dd3c7"><a href="#013401" label="[01:34:01]">&lt;oriansj&gt;</a></span><span class="message">generally a good plan</span></div><div class="line" id="013411"><span class="nick" style="color:#389600"><a href="#013411" label="[01:34:11]">&lt;stikonas&gt;</a></span><span class="message">you can't do that in .c file, not even in inline assembly</span></div><div class="line" id="013433"><span class="nick" style="color:#8dd3c7"><a href="#013433" label="[01:34:33]">&lt;oriansj&gt;</a></span><span class="message">I ask because I was thinking of requiring the call to __init_malloc prior to any calls to malloc</span></div><div class="line" id="013454"><span class="nick" style="color:#389600"><a href="#013454" label="[01:34:54]">&lt;stikonas&gt;</a></span><span class="message">that is fine</span></div><div class="line" id="013458"><span class="nick" style="color:#389600"><a href="#013458" label="[01:34:58]">&lt;stikonas&gt;</a></span><span class="message">that's is already a requirement</span></div><div class="line" id="013512"><span class="nick" style="color:#389600"><a href="#013512" label="[01:35:12]">&lt;stikonas&gt;</a></span><span class="message">and UEFI respects it, __init_malloc is the first thing init() function calls</span></div><div class="line" id="013524"><span class="nick" style="color:#8dd3c7"><a href="#013524" label="[01:35:24]">&lt;oriansj&gt;</a></span><span class="message">just trying not to break UEFI too badly for you</span></div><div class="line" id="013525"><span class="nick" style="color:#389600"><a href="#013525" label="[01:35:25]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/M2libc/blob/1b8dacd2acb82e3e598af946992f11cd6bc10e8b/amd64/uefi/uefi.c#L757">https://github.com/oriansj/M2libc/blob/1b8dacd2acb82e3e598af946992f11cd6bc10e8b/amd64/uefi/uefi.c#L757</a> </span></div><div class="line" id="013548"><span class="nick" style="color:#389600"><a href="#013548" label="[01:35:48]">&lt;stikonas&gt;</a></span><span class="message">no, that's fine. I already had that requirement, so you are not adding anything extra at all</span></div><div class="line" id="015329"><span class="nick" style="color:#8dd3c7"><a href="#015329" label="[01:53:29]">&lt;oriansj&gt;</a></span><span class="message">ok with #define EXIT_MALLOC_FAILED 42 ?</span></div><div class="line" id="015407"><span class="nick" style="color:#8dd3c7"><a href="#015407" label="[01:54:07]">&lt;oriansj&gt;</a></span><span class="message">or do you feel we don't need it</span></div><div class="line" id="015439"><span class="nick" style="color:#8dd3c7"><a href="#015439" label="[01:54:39]">&lt;oriansj&gt;</a></span><span class="message">actually I'll just return a NULL pointer and let the C code calling malloc deal with it</span></div><div class="line" id="015645"><span class="nick" style="color:#389600"><a href="#015645" label="[01:56:45]">&lt;stikonas&gt;</a></span><span class="message">from malloc()?</span></div><div class="line" id="015701"><span class="nick" style="color:#389600"><a href="#015701" label="[01:57:01]">&lt;stikonas&gt;</a></span><span class="message">yeah, I think normally application is supposed to deal with malloc failures</span></div><div class="line" id="015720"><span class="nick" style="color:#389600"><a href="#015720" label="[01:57:20]">&lt;stikonas&gt;</a></span><span class="message">though perhaps we are not that good at checking that</span></div><div class="line" id="015921"><span class="nick" style="color:#389600"><a href="#015921" label="[01:59:21]">&lt;stikonas&gt;</a></span><span class="message">&quot;On error, these functions return NULL and set errno.&quot;</span></div><div class="line" id="020022"><span class="nick" style="color:#8dd3c7"><a href="#020022" label="[02:00:22]">&lt;oriansj&gt;</a></span><span class="message">I'll just return NULL and we can deal with errno if needed later</span></div><div class="line" id="020032"><span class="nick" style="color:#389600"><a href="#020032" label="[02:00:32]">&lt;stikonas&gt;</a></span><span class="message">yeah, that's fine</span></div><div class="line" id="020041"><span class="nick" style="color:#389600"><a href="#020041" label="[02:00:41]">&lt;stikonas&gt;</a></span><span class="message">I never bothered with errno in M2libc too</span></div><div class="line" id="020114"><span class="nick" style="color:#389600"><a href="#020114" label="[02:01:14]">&lt;stikonas&gt;</a></span><span class="message">we don't claim M2libc to be complete POSIX anyway</span></div><div class="line" id="020424"><span class="nick" style="color:#8dd3c7"><a href="#020424" label="[02:04:24]">&lt;oriansj&gt;</a></span><span class="message">well free takes a good bit longer</span></div><div class="line" id="020609"><span class="nick" style="color:#389600"><a href="#020609" label="[02:06:09]">&lt;stikonas&gt;</a></span><span class="message">and does it help with segfault?</span></div><div class="line" id="020646"><span class="nick" style="color:#8dd3c7"><a href="#020646" label="[02:06:46]">&lt;oriansj&gt;</a></span><span class="message">well, I'm still testing</span></div><div class="line" id="021311"><span class="nick" style="color:#8dd3c7"><a href="#021311" label="[02:13:11]">&lt;oriansj&gt;</a></span><span class="message">well it fixes the segfault for --version</span></div><div class="line" id="021325"><span class="nick" style="color:#8dd3c7"><a href="#021325" label="[02:13:25]">&lt;oriansj&gt;</a></span><span class="message">but I can't accept performance this bad</span></div><div class="line" id="021410"><span class="nick" style="color:#8dd3c7"><a href="#021410" label="[02:14:10]">&lt;oriansj&gt;</a></span><span class="message"> limit mallocs to 1 &lt;&lt; 30 fair?</span></div><div class="line" id="021510"><span class="nick" style="color:#389600"><a href="#021510" label="[02:15:10]">&lt;stikonas&gt;</a></span><span class="message">I suppose</span></div><div class="line" id="021559"><span class="nick" style="color:#389600"><a href="#021559" label="[02:15:59]">&lt;stikonas&gt;</a></span><span class="message">given that we only have up to 3 GiB of memory on x86</span></div><div class="line" id="021608"><span class="nick" style="color:#389600"><a href="#021608" label="[02:16:08]">&lt;stikonas&gt;</a></span><span class="message">1 &lt;&lt; 30  is already 1/3 of that</span></div><div class="line" id="021624"><span class="nick" style="color:#389600"><a href="#021624" label="[02:16:24]">&lt;stikonas&gt;</a></span><span class="message">but yes, bad performance is a pity :(</span></div><div class="line" id="023937"><span class="nick" style="color:#2e2a4a"><a href="#023937" label="[02:39:37]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: thank you :)</span></div><div class="line" id="024308"><span class="nick" style="color:#6b8072"><a href="#024308" label="[02:43:08]">&lt;stikonas[m]&gt;</a></span><span class="message">fossy: no problem. I'll leave it to you to check difference</span></div><div class="line" id="024409"><span class="nick" style="color:#2e2a4a"><a href="#024409" label="[02:44:09]">&lt;fossy&gt;</a></span><span class="message">yep, <a rel="nofollow" href="http://ttm.sh/0xd.txt">http://ttm.sh/0xd.txt</a> </span></div><div class="line" id="024409"><span class="nick" style="color:#8dd3c7"><a href="#024409" label="[02:44:09]">&lt;oriansj&gt;</a></span><span class="message">here is the diff if you wanted to play with it: <a rel="nofollow" href="https://paste.debian.net/1265663/">https://paste.debian.net/1265663/</a> </span></div><div class="line" id="024411"><span class="nick" style="color:#2e2a4a"><a href="#024411" label="[02:44:11]">&lt;fossy&gt;</a></span><span class="message">very odd</span></div><div class="line" id="024429"><span class="nick" style="color:#8dd3c7"><a href="#024429" label="[02:44:29]">&lt;oriansj&gt;</a></span><span class="message">but I'll be trying to speed it up before commiting it</span></div><div class="line" id="024452"><span class="nick" style="color:#2e2a4a"><a href="#024452" label="[02:44:52]">&lt;fossy&gt;</a></span><span class="message">i have two changes which shouldn't affect checksums at all but i'm testing if it's them now</span></div><div class="line" id="024752"><span class="nick" style="color:#6b8072"><a href="#024752" label="[02:47:52]">&lt;stikonas[m]&gt;</a></span><span class="message">oriansj: I'm preparing to sleep, so not right now...</span></div><div class="line" id="025526"><span class="nick" style="color:#8dd3c7"><a href="#025526" label="[02:55:26]">&lt;oriansj&gt;</a></span><span class="message">stikonas: fair enough</span></div><div class="line" id="025835"><span class="nick" style="color:#8dd3c7"><a href="#025835" label="[02:58:35]">&lt;oriansj&gt;</a></span><span class="message">muurkha: I'm probably reinventing the wheel with this: <a rel="nofollow" href="https://paste.debian.net/1265664/">https://paste.debian.net/1265664/</a>  but emacs has this sort of functionality already baked in right?</span></div><div class="line" id="025927"><span class="nick" style="color:#8dd3c7"><a href="#025927" label="[02:59:27]">&lt;oriansj&gt;</a></span><span class="message">because it seems like such an obviously useful feature when doing macros</span></div><div class="line" id="025959"><span class="nick" style="color:#8dd3c7"><a href="#025959" label="[02:59:59]">&lt;oriansj&gt;</a></span><span class="message">I just couldn't figure out the keybindings or primitives that would do it</span></div><div class="line" id="030141"><span class="nick" style="color:#80b1d3"><a href="#030141" label="[03:01:41]">&lt;muurkha&gt;</a></span><span class="message">yeah, you can push a new mark on the mark stack with C-SPC (or C-@) and pop it back off with C-u C-SPC (or C-u C-@)</span></div><div class="line" id="030203"><span class="nick" style="color:#80b1d3"><a href="#030203" label="[03:02:03]">&lt;muurkha&gt;</a></span><span class="message">if you're writing editing commands in Lisp though it's usually better to use save-excursion</span></div><div class="line" id="030558"><span class="nick" style="color:#80b1d3"><a href="#030558" label="[03:05:58]">&lt;muurkha&gt;</a></span><span class="message">or, as the set-mark documentation points out, store the location in a Lisp variable, like (let ((x (point))) ...)</span></div><div class="line" id="030646"><span class="nick" style="color:#8dd3c7"><a href="#030646" label="[03:06:46]">&lt;oriansj&gt;</a></span><span class="message">well I use a stack variable</span></div><div class="line" id="030730"><span class="nick" style="color:#8dd3c7"><a href="#030730" label="[03:07:30]">&lt;oriansj&gt;</a></span><span class="message">and I needed to preserve C-SPC for block selecting</span></div><div class="line" id="033653"><span class="nick" style="color:#80b1d3"><a href="#033653" label="[03:36:53]">&lt;muurkha&gt;</a></span><span class="message">C-SPC still works for block selecting when you do this</span></div><div class="line" id="033718"><span class="nick" style="color:#80b1d3"><a href="#033718" label="[03:37:18]">&lt;muurkha&gt;</a></span><span class="message">the problem is more that there are other commands that push marks on the stack you might not be expecting</span></div><div class="line" id="034018"><span class="nick" style="color:#8dd3c7"><a href="#034018" label="[03:40:18]">&lt;oriansj&gt;</a></span><span class="message">muurkha: probably what was causing the issues; which resulting in me writting the little functions</span></div><div class="line" id="042021"><span class="nick" style="color:#8dd3c7"><a href="#042021" label="[04:20:21]">&lt;oriansj&gt;</a></span><span class="message">probably best to keep it around, as it is highly unlikely for anyone to pick the same namespace for a variable with the same name</span></div><div class="line" id="043116"><span class="nick" style="color:#8dd3c7"><a href="#043116" label="[04:31:16]">&lt;oriansj&gt;</a></span><span class="message">well free is probably the absolutely most expensive function</span></div><div class="line" id="053648"><span class="nick" style="color:#8dd3c7"><a href="#053648" label="[05:36:48]">&lt;oriansj&gt;</a></span><span class="message">ok, this doesn't quite make sense to me; M1/hex2 don't ever call free</span></div><div class="line" id="053714"><span class="nick" style="color:#8dd3c7"><a href="#053714" label="[05:37:14]">&lt;oriansj&gt;</a></span><span class="message">but once free is enabled =&gt; hang</span></div><div class="line" id="070938"><span class="nick" style="color:#8dd3c7"><a href="#070938" label="[07:09:38]">&lt;oriansj&gt;</a></span><span class="message">ok, got that working and removed the need for __init_malloc() to even be called</span></div><div class="line" id="071213"><span class="nick" style="color:#8dd3c7"><a href="#071213" label="[07:12:13]">&lt;oriansj&gt;</a></span><span class="message">but I'll leave a stub there, just in case stikonas has a good reason to keep it around for UEFI</span></div><div class="line" id="071306"><span class="nick" style="color:#8dd3c7"><a href="#071306" label="[07:13:06]">&lt;oriansj&gt;</a></span><span class="message">and the slowdown is now reasonable</span></div><div class="line" id="073932"><span class="nick" style="color:#8dd3c7"><a href="#073932" label="[07:39:32]">&lt;oriansj&gt;</a></span><span class="message">so I think I solved all of our memory allocation problems in M2libc</span></div><div class="line" id="074016"><span class="nick" style="color:#8dd3c7"><a href="#074016" label="[07:40:16]">&lt;oriansj&gt;</a></span><span class="message">(and I made it easy to turn off free(void*) just in case)</span></div><div class="line" id="075327"><span class="nick" style="color:#8dd3c7"><a href="#075327" label="[07:53:27]">&lt;oriansj&gt;</a></span><span class="message">&gt;.&lt;</span></div><div class="line" id="080333"><span class="nick" style="color:#8dd3c7"><a href="#080333" label="[08:03:33]">&lt;oriansj&gt;</a></span><span class="message">no, that isn't quite right</span></div><div class="line" id="084857"><span class="nick" style="color:#8dd3c7"><a href="#084857" label="[08:48:57]">&lt;oriansj&gt;</a></span><span class="message">well last = i-&gt;next; was annoying to find</span></div><div class="line" id="084917"><span class="nick" style="color:#8dd3c7"><a href="#084917" label="[08:49:17]">&lt;oriansj&gt;</a></span><span class="message">but I think I cleared out the free(void*) bugs</span></div><div class="line" id="085217"><span class="nick" style="color:#8dd3c7"><a href="#085217" label="[08:52:17]">&lt;oriansj&gt;</a></span><span class="message">and now M2libc should be free of malloc bugs</span></div><div class="line" id="085241"><span class="nick" style="color:#8dd3c7"><a href="#085241" label="[08:52:41]">&lt;oriansj&gt;</a></span><span class="message">(at the cost of slighly worse performance on free calls)</span></div><div class="line" id="132319"><span class="nick" style="color:#389600"><a href="#132319" label="[13:23:19]">&lt;stikonas&gt;</a></span><span class="message">oriansj: some bad news, you did break uefi part...</span></div><div class="line" id="132343"><span class="nick" style="color:#389600"><a href="#132343" label="[13:23:43]">&lt;stikonas&gt;</a></span><span class="message">at least in my qemu with limitted RAM</span></div><div class="line" id="132533"><span class="nick" style="color:#389600"><a href="#132533" label="[13:25:33]">&lt;stikonas&gt;</a></span><span class="message">but perhaps with change in how malloc allocates, we should instead fix UEFI part</span></div><div class="line" id="132550"><span class="nick" style="color:#389600"><a href="#132550" label="[13:25:50]">&lt;stikonas&gt;</a></span><span class="message">it basically dous double tracking now</span></div><div class="line" id="132627"><span class="nick" style="color:#389600"><a href="#132627" label="[13:26:27]">&lt;stikonas&gt;</a></span><span class="message">before malloc was allocating fairly large blocks (say 1 MiB)</span></div><div class="line" id="132818"><span class="nick" style="color:#389600"><a href="#132818" label="[13:28:18]">&lt;stikonas&gt;</a></span><span class="message">and then allocate required number of 4K size pages</span></div><div class="line" id="132838"><span class="nick" style="color:#389600"><a href="#132838" label="[13:28:38]">&lt;stikonas&gt;</a></span><span class="message">(and it would lose 1 page when it adds list tracking)</span></div><div class="line" id="132903"><span class="nick" style="color:#389600"><a href="#132903" label="[13:29:03]">&lt;stikonas&gt;</a></span><span class="message">now I think _malloc_add_new might be quite small</span></div><div class="line" id="132920"><span class="nick" style="color:#389600"><a href="#132920" label="[13:29:20]">&lt;stikonas&gt;</a></span><span class="message">so even if you request 10 bytes, it will still allocate 4K page</span></div><div class="line" id="132952"><span class="nick" style="color:#389600"><a href="#132952" label="[13:29:52]">&lt;stikonas&gt;</a></span><span class="message">I could possibly switch to allocate_pool instead of allocate_pages</span></div><div class="line" id="133003"><span class="nick" style="color:#389600"><a href="#133003" label="[13:30:03]">&lt;stikonas&gt;</a></span><span class="message">that is measured in bytes rather than pages</span></div><div class="line" id="133101"><span class="nick" style="color:#389600"><a href="#133101" label="[13:31:01]">&lt;stikonas&gt;</a></span><span class="message">but in any case if we don't want to do double tracking of these small allocations, we need to add a function to stdlib.c to free all used block</span></div><div class="line" id="133112"><span class="nick" style="color:#389600"><a href="#133112" label="[13:31:12]">&lt;stikonas&gt;</a></span><span class="message">s/block/blocks/</span></div><div class="line" id="133133"><span class="nick" style="color:#389600"><a href="#133133" label="[13:31:33]">&lt;stikonas&gt;</a></span><span class="message">possibly something optional that cleanup() can call</span></div><div class="line" id="141223"><span class="nick" style="color:#8dd3c7"><a href="#141223" label="[14:12:23]">&lt;oriansj&gt;</a></span><span class="message">stikonas: the solution is probably simpler</span></div><div class="line" id="141327"><span class="nick" style="color:#389600"><a href="#141327" label="[14:13:27]">&lt;stikonas&gt;</a></span><span class="message">yes, it will be simpler</span></div><div class="line" id="141414"><span class="nick" style="color:#389600"><a href="#141414" label="[14:14:14]">&lt;stikonas&gt;</a></span><span class="message">I just need to add _free_all() function, remove block tracking in uefi.c and switch it to allocate_pool</span></div><div class="line" id="141646"><span class="nick" style="color:#8dd3c7"><a href="#141646" label="[14:16:46]">&lt;oriansj&gt;</a></span><span class="message">well if the smallest allocation UEFI can do is 4K, lets just make that the new floor</span></div><div class="line" id="141707"><span class="nick" style="color:#8dd3c7"><a href="#141707" label="[14:17:07]">&lt;oriansj&gt;</a></span><span class="message">and then the logic for _malloc_uefi can be quite simple indeed</span></div><div class="line" id="143154"><span class="nick" style="color:#389600"><a href="#143154" label="[14:31:54]">&lt;stikonas&gt;</a></span><span class="message">oriansj: no, I can do any allocation in UEFI</span></div><div class="line" id="143201"><span class="nick" style="color:#389600"><a href="#143201" label="[14:32:01]">&lt;stikonas&gt;</a></span><span class="message">it's just a different call</span></div><div class="line" id="143203"><span class="nick" style="color:#389600"><a href="#143203" label="[14:32:03]">&lt;stikonas&gt;</a></span><span class="message">to make it more confusing UEFI has to calls</span></div><div class="line" id="143213"><span class="nick" style="color:#389600"><a href="#143213" label="[14:32:13]">&lt;stikonas&gt;</a></span><span class="message">AllocatePool and AllocatePages</span></div><div class="line" id="143323"><span class="nick" style="color:#389600"><a href="#143323" label="[14:33:23]">&lt;stikonas&gt;</a></span><span class="message">probably one is more optimal than the other in some cases but I don't think we care about optimizing so much, so we can use both</span></div><div class="line" id="143338"><span class="nick" style="color:#389600"><a href="#143338" label="[14:33:38]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://edk2-docs.gitbook.io/edk-ii-uefi-driver-writer-s-guide/5_uefi_services/51_services_that_uefi_drivers_commonly_use/511_memory_allocation_services">https://edk2-docs.gitbook.io/edk-ii-uefi-driver-writer-s-guide/5_uefi_services/51_services_that_uefi_drivers_commonly_use/511_memory_allocation_services</a> </span></div><div class="line" id="143355"><span class="nick" style="color:#8dd3c7"><a href="#143355" label="[14:33:55]">&lt;oriansj&gt;</a></span><span class="message">well I am guessing AllocatePages is the optimal one for performance</span></div><div class="line" id="143602"><span class="nick" style="color:#389600"><a href="#143602" label="[14:36:02]">&lt;stikonas&gt;</a></span><span class="message">indeed because it is alligned to page boundary</span></div><div class="line" id="143612"><span class="nick" style="color:#389600"><a href="#143612" label="[14:36:12]">&lt;stikonas&gt;</a></span><span class="message">but I think it's fine to use allocate_pool</span></div><div class="line" id="143626"><span class="nick" style="color:#389600"><a href="#143626" label="[14:36:26]">&lt;stikonas&gt;</a></span><span class="message">I used it in all early programs up to cc_amd64</span></div><div class="line" id="143857"><span class="nick" style="color:#8dd3c7"><a href="#143857" label="[14:38:57]">&lt;oriansj&gt;</a></span><span class="message">even with 4K as the smallest allocation we don't use past 256MB</span></div><div class="line" id="144045"><span class="nick" style="color:#389600"><a href="#144045" label="[14:40:45]">&lt;stikonas&gt;</a></span><span class="message">hmm, I wonder why though then we ran out of resources in UEFI as it stands now</span></div><div class="line" id="144100"><span class="nick" style="color:#389600"><a href="#144100" label="[14:41:00]">&lt;stikonas&gt;</a></span><span class="message">the thing that returned out of resources was some step of building M2-Mesoplanet</span></div><div class="line" id="144110"><span class="nick" style="color:#389600"><a href="#144110" label="[14:41:10]">&lt;stikonas&gt;</a></span><span class="message">I think M1 step</span></div><div class="line" id="144118"><span class="nick" style="color:#8dd3c7"><a href="#144118" label="[14:41:18]">&lt;oriansj&gt;</a></span><span class="message">I'm guessing the allocatePool caps out at 200MB</span></div><div class="line" id="144303"><span class="nick" style="color:#8dd3c7"><a href="#144303" label="[14:43:03]">&lt;oriansj&gt;</a></span><span class="message">Maximum resident set size (kbytes): 990,780 (if one counts every byte of every program running in memory at the worst case)</span></div><div class="line" id="144341"><span class="nick" style="color:#8dd3c7"><a href="#144341" label="[14:43:41]">&lt;oriansj&gt;</a></span><span class="message">(with 4K min allocations)</span></div><div class="line" id="144536"><span class="nick" style="color:#8dd3c7"><a href="#144536" label="[14:45:36]">&lt;oriansj&gt;</a></span><span class="message">if we do 256B min allocations: Maximum resident set size (kbytes): 72,000</span></div><div class="line" id="150330"><span class="nick" style="color:#8dd3c7"><a href="#150330" label="[15:03:30]">&lt;oriansj&gt;</a></span><span class="message">so perhaps do the following: in _malloc_uefi; any allocation smaller than 4K do in allocatePool (we lower the allocation floor to 32bytes) and everything above 4K is done via AllocatePages</span></div><div class="line" id="150422"><span class="nick" style="color:#8dd3c7"><a href="#150422" label="[15:04:22]">&lt;oriansj&gt;</a></span><span class="message">which should put our Max memory usage to: Maximum resident set size (kbytes): 34,556</span></div><div class="line" id="150505"><span class="nick" style="color:#8dd3c7"><a href="#150505" label="[15:05:05]">&lt;oriansj&gt;</a></span><span class="message">(as we round up the the nearest usage &lt;&lt; 1)</span></div><div class="line" id="162507"><span class="nick" style="color:#8dd3c7"><a href="#162507" label="[16:25:07]">&lt;oriansj&gt;</a></span><span class="message">unbz2.c now makes it to 2 days of fuzzing without a segfault</span></div><div class="line" id="162624"><span class="nick" style="color:#8dd3c7"><a href="#162624" label="[16:26:24]">&lt;oriansj&gt;</a></span><span class="message">I think that is stable enough</span></div><div class="line" id="163327"><span class="nick" style="color:#8dd3c7"><a href="#163327" label="[16:33:27]">&lt;oriansj&gt;</a></span><span class="message">part of me wonders if debugging M2libc would be easier if we enabled building with GCC and standard binutils linking</span></div><div class="line" id="171201"><span class="nick" style="color:#6b8072"><a href="#171201" label="[17:12:01]">&lt;stikonas[m]&gt;</a></span><span class="message">In think so</span></div><div class="line" id="171220"><span class="nick" style="color:#6b8072"><a href="#171220" label="[17:12:20]">&lt;stikonas[m]&gt;</a></span><span class="message">M2-Planet binaries are hard to debug</span></div><div class="line" id="171235"><span class="nick" style="color:#6b8072"><a href="#171235" label="[17:12:35]">&lt;stikonas[m]&gt;</a></span><span class="message">GCC generates much better debug info</span></div><div class="line" id="171303"><span class="nick" style="color:#6b8072"><a href="#171303" label="[17:13:03]">&lt;stikonas[m]&gt;</a></span><span class="message">You can see source lines, variables, etc...</span></div><div class="line" id="171930"><span class="nick" style="color:#8dd3c7"><a href="#171930" label="[17:19:30]">&lt;oriansj&gt;</a></span><span class="message">I guess wrapping the M2-Planetisms in #ifdef blocks and probably start getting some tests in m2libc</span></div><div class="line" id="172350"><span class="nick" style="color:#6b8072"><a href="#172350" label="[17:23:50]">&lt;stikonas[m]&gt;</a></span><span class="message">We also need to build it without glibc, so need libc-full wrapper for gcc</span></div><div class="line" id="172407"><span class="nick" style="color:#6b8072"><a href="#172407" label="[17:24:07]">&lt;stikonas[m]&gt;</a></span><span class="message">And inline assembly is tricky too...</span></div><div class="line" id="172520"><span class="nick" style="color:#6b8072"><a href="#172520" label="[17:25:20]">&lt;stikonas[m]&gt;</a></span><span class="message">Need to write 2 copies of all syscalls</span></div><div class="line" id="172745"><span class="nick" style="color:#8dd3c7"><a href="#172745" label="[17:27:45]">&lt;oriansj&gt;</a></span><span class="message">kind of unavoidable</span></div><div class="line" id="184606"><span class="nick" style="color:#389600"><a href="#184606" label="[18:46:06]">&lt;stikonas&gt;</a></span><span class="message">ok, in the meantime I've pulled in new M2libc into stage0-posix to fix segfault in M2-Mesoplanet</span></div><div class="line" id="202723"><span class="nick" style="color:#389600"><a href="#202723" label="[20:27:23]">&lt;stikonas&gt;</a></span><span class="message">oriansj: so I think we'll be able to survive with just allocatepool, no need to do allocatepages</span></div><div class="line" id="202736"><span class="nick" style="color:#389600"><a href="#202736" label="[20:27:36]">&lt;stikonas&gt;</a></span><span class="message">I've done part of my changes</span></div><div class="line" id="202803"><span class="nick" style="color:#389600"><a href="#202803" label="[20:28:03]">&lt;stikonas&gt;</a></span><span class="message">and with end-of-application cleanup disabled, it still runs all the way to mescc-tools-extra</span></div><div class="line" id="202850"><span class="nick" style="color:#389600"><a href="#202850" label="[20:28:50]">&lt;stikonas&gt;</a></span><span class="message">but I still need to add free_pool calls at on cleanup</span></div><div class="line" id="202854"><span class="nick" style="color:#389600"><a href="#202854" label="[20:28:54]">&lt;stikonas&gt;</a></span><span class="message">which get stuck right now</span></div><div class="line" id="202928"><span class="nick" style="color:#389600"><a href="#202928" label="[20:29:28]">&lt;stikonas&gt;</a></span><span class="message">I tried to iterate over _allocated_list and _free_list and free everything there, but I guess that's not right</span></div><div class="line" id="203245"><span class="nick" style="color:#389600"><a href="#203245" label="[20:32:45]">&lt;stikonas&gt;</a></span><span class="message">ok, looking closer at it and it's a bit problematic</span></div><div class="line" id="203307"><span class="nick" style="color:#389600"><a href="#203307" label="[20:33:07]">&lt;stikonas&gt;</a></span><span class="message">we have n = _malloc_uefi(sizeof(struct _malloc_node)); and then  n-&gt;block = _malloc_uefi(size);</span></div><div class="line" id="203334"><span class="nick" style="color:#389600"><a href="#203334" label="[20:33:34]">&lt;stikonas&gt;</a></span><span class="message">which means so I'll have to free both of those</span></div><div class="line" id="203410"><span class="nick" style="color:#389600"><a href="#203410" label="[20:34:10]">&lt;stikonas&gt;</a></span><span class="message">ok, maybe it won't be too problematic...</span></div><div class="line" id="204313"><span class="nick" style="color:#8dd3c7"><a href="#204313" label="[20:43:13]">&lt;oriansj&gt;</a></span><span class="message">well yes, you have to free the blocks prior to the _malloc_nodes</span></div><div class="line" id="204424"><span class="nick" style="color:#8dd3c7"><a href="#204424" label="[20:44:24]">&lt;oriansj&gt;</a></span><span class="message">which if you have 3 pointers struct _malloc_node* next; struct _malloc_node* current; void* block; it should be an easy iteration.</span></div><div class="line" id="204526"><span class="nick" style="color:#8dd3c7"><a href="#204526" label="[20:45:26]">&lt;oriansj&gt;</a></span><span class="message">while(NULL != current) {next = current-&gt;next; free(current-&gt;block); free(current); current = next;}</span></div><div class="line" id="204626"><span class="nick" style="color:#389600"><a href="#204626" label="[20:46:26]">&lt;stikonas&gt;</a></span><span class="message">oriansj: <a rel="nofollow" href="https://github.com/oriansj/M2libc/pull/38">https://github.com/oriansj/M2libc/pull/38</a> </span></div><div class="line" id="204649"><span class="nick" style="color:#389600"><a href="#204649" label="[20:46:49]">&lt;stikonas&gt;</a></span><span class="message">yeah, I've done something like that</span></div><div class="line" id="204708"><span class="nick" style="color:#389600"><a href="#204708" label="[20:47:08]">&lt;stikonas&gt;</a></span><span class="message">well, my first attempt was before I carefully looked at your code</span></div><div class="line" id="204742"><span class="nick" style="color:#389600"><a href="#204742" label="[20:47:42]">&lt;stikonas&gt;</a></span><span class="message">maybe I can rename variables into current and next</span></div><div class="line" id="204745"><span class="nick" style="color:#389600"><a href="#204745" label="[20:47:45]">&lt;stikonas&gt;</a></span><span class="message">rather than node and node2...</span></div><div class="line" id="204749"><span class="nick" style="color:#389600"><a href="#204749" label="[20:47:49]">&lt;stikonas&gt;</a></span><span class="message">would be a bit nicer</span></div><div class="line" id="204819"><span class="nick" style="color:#389600"><a href="#204819" label="[20:48:19]">&lt;stikonas&gt;</a></span><span class="message">or at least current and ndoe</span></div><div class="line" id="204917"><span class="nick" style="color:#389600"><a href="#204917" label="[20:49:17]">&lt;stikonas&gt;</a></span><span class="message">ok, PR updated</span></div><div class="line" id="204946"><span class="nick" style="color:#389600"><a href="#204946" label="[20:49:46]">&lt;stikonas&gt;</a></span><span class="message">oriansj: by the way, I've ended up using callbacks rather than doing this cleanup in uefi.c</span></div><div class="line" id="205007"><span class="nick" style="color:#389600"><a href="#205007" label="[20:50:07]">&lt;stikonas&gt;</a></span><span class="message">it was a bit simpler as M2-Planet does not allow early declaration of structs</span></div><div class="line" id="205058"><span class="nick" style="color:#389600"><a href="#205058" label="[20:50:58]">&lt;stikonas&gt;</a></span><span class="message">and right uefi.c file have to be included before stdlib.c since uefi.c defines __uefi__</span></div><div class="line" id="205704"><span class="nick" style="color:#8dd3c7"><a href="#205704" label="[20:57:04]">&lt;oriansj&gt;</a></span><span class="message">merged</span></div><div class="line" id="205800"><span class="nick" style="color:#8dd3c7"><a href="#205800" label="[20:58:00]">&lt;oriansj&gt;</a></span><span class="message">it certainly looks a good bit cleaner</span></div><div class="line" id="210256"><span class="nick" style="color:#6b8072"><a href="#210256" label="[21:02:56]">&lt;stikonas[m]&gt;</a></span><span class="message">Indeed</span></div><div class="line" id="210331"><span class="nick" style="color:#6b8072"><a href="#210331" label="[21:03:31]">&lt;stikonas[m]&gt;</a></span><span class="message">At least I got rid of double tracking...</span></div><div class="line" id="210618"><span class="nick" style="color:#6b8072"><a href="#210618" label="[21:06:18]">&lt;stikonas[m]&gt;</a></span><span class="message">And calling init_malloc is indeed not necessary</span></div><div class="line" id="212954"><span class="nick" style="color:#389600"><a href="#212954" label="[21:29:54]">&lt;stikonas&gt;</a></span><span class="message">oh, actually current problem in M2-Mesoplanet where it gets stuck is simply it calling unlink which is not implemented yet</span></div><div class="line" id="213010"><span class="nick" style="color:#389600"><a href="#213010" label="[21:30:10]">&lt;stikonas&gt;</a></span><span class="message">that is probably good as it's nothing serious</span></div><div class="line" id="213226"><span class="nick" style="color:#80b1d3"><a href="#213226" label="[21:32:26]">&lt;muurkha&gt;</a></span><span class="message">yay</span></div><div class="line" id="220920"><span class="nick" style="color:#389600"><a href="#220920" label="[22:09:20]">&lt;stikonas&gt;</a></span><span class="message">ok, unlink is here <a rel="nofollow" href="https://github.com/oriansj/M2libc/pull/39">https://github.com/oriansj/M2libc/pull/39</a> </span></div><div class="line" id="221930"><span class="nick" style="color:#389600"><a href="#221930" label="[22:19:30]">&lt;stikonas&gt;</a></span><span class="message">hmm, and perhaps I should rethink uefi directory layout in M2libc</span></div><div class="line" id="221947"><span class="nick" style="color:#389600"><a href="#221947" label="[22:19:47]">&lt;stikonas&gt;</a></span><span class="message">it's almost exclusively C code with very few arch specific bits: only memcpy(unameData-&gt;machine, &quot;x86_64&quot;, 7); and __uefi_1, ..., __uefi_6 functions</span></div><div class="line" id="224041"><span class="nick" style="color:#8dd3c7"><a href="#224041" label="[22:40:41]">&lt;oriansj&gt;</a></span><span class="message">perhaps it is wise to create a shared UEFI folder for that C code</span></div><div class="line" id="224203"><span class="nick" style="color:#389600"><a href="#224203" label="[22:42:03]">&lt;stikonas&gt;</a></span><span class="message">oriansj: yeah, that's what I'm thinking</span></div><div class="line" id="224255"><span class="nick" style="color:#389600"><a href="#224255" label="[22:42:55]">&lt;stikonas&gt;</a></span><span class="message">so arch specific bits can contain libc.M1 and PE32 header</span></div><div class="line" id="224311"><span class="nick" style="color:#389600"><a href="#224311" label="[22:43:11]">&lt;stikonas&gt;</a></span><span class="message">and rest ist simply in M2libc/uefi/ folder</span></div><div class="line" id="224314"><span class="nick" style="color:#8dd3c7"><a href="#224314" label="[22:43:14]">&lt;oriansj&gt;</a></span><span class="message">and a handful of assembly functions</span></div><div class="line" id="224333"><span class="nick" style="color:#389600"><a href="#224333" label="[22:43:33]">&lt;stikonas&gt;</a></span><span class="message">those can even be #ifdef'ed in the shared folder</span></div><div class="line" id="224338"><span class="nick" style="color:#389600"><a href="#224338" label="[22:43:38]">&lt;stikonas&gt;</a></span><span class="message">it's mostly calling convention</span></div><div class="line" id="224354"><span class="nick" style="color:#8dd3c7"><a href="#224354" label="[22:43:54]">&lt;oriansj&gt;</a></span><span class="message">interesting</span></div><div class="line" id="224423"><span class="nick" style="color:#389600"><a href="#224423" label="[22:44:23]">&lt;stikonas&gt;</a></span><span class="message">oh, bootstrap.c should still be in arch specific directory</span></div><div class="line" id="224427"><span class="nick" style="color:#389600"><a href="#224427" label="[22:44:27]">&lt;stikonas&gt;</a></span><span class="message">but that's a separate case</span></div><div class="line" id="224749"><span class="nick" style="color:#8dd3c7"><a href="#224749" label="[22:47:49]">&lt;oriansj&gt;</a></span><span class="message">a very special one indeed</span></div><div class="line" id="224900"><span class="nick" style="color:#389600"><a href="#224900" label="[22:49:00]">&lt;stikonas&gt;</a></span><span class="message">also some more M2-Mesoplanet changes: <a rel="nofollow" href="https://github.com/oriansj/M2-Mesoplanet/pull/5">https://github.com/oriansj/M2-Mesoplanet/pull/5</a> </span></div><div class="line" id="230245"><span class="nick" style="color:#8dd3c7"><a href="#230245" label="[23:02:45]">&lt;oriansj&gt;</a></span><span class="message">stikonas: M2-Mesoplanet changes merged</span></div><div class="line" id="230247"><span class="nick" style="color:#389600"><a href="#230247" label="[23:02:47]">&lt;stikonas&gt;</a></span><span class="message">thanks</span></div><div class="line" id="230259"><span class="nick" style="color:#389600"><a href="#230259" label="[23:02:59]">&lt;stikonas&gt;</a></span><span class="message">perhaps in the future we might want to differentiate between source and target os...</span></div><div class="line" id="230303"><span class="nick" style="color:#389600"><a href="#230303" label="[23:03:03]">&lt;stikonas&gt;</a></span><span class="message">but this will do for now</span></div><div class="line" id="230319"><span class="nick" style="color:#389600"><a href="#230319" label="[23:03:19]">&lt;stikonas&gt;</a></span><span class="message">oriansj: and unlink PR?</span></div><div class="line" id="230339"><span class="nick" style="color:#389600"><a href="#230339" label="[23:03:39]">&lt;stikonas&gt;</a></span><span class="message">oh, also merged, thanks</span></div><div class="line" id="230344"><span class="nick" style="color:#8dd3c7"><a href="#230344" label="[23:03:44]">&lt;oriansj&gt;</a></span><span class="message">and M2libc change also merged</span></div><div class="line" id="230432"><span class="nick" style="color:#8dd3c7"><a href="#230432" label="[23:04:32]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well we shouldn't care what the source/host OS is</span></div><div class="line" id="230507"><span class="nick" style="color:#389600"><a href="#230507" label="[23:05:07]">&lt;stikonas&gt;</a></span><span class="message">oriansj: it matters a bit</span></div><div class="line" id="230508"><span class="nick" style="color:#8dd3c7"><a href="#230508" label="[23:05:08]">&lt;oriansj&gt;</a></span><span class="message">(as far as the generated output is concerned)</span></div><div class="line" id="230522"><span class="nick" style="color:#389600"><a href="#230522" label="[23:05:22]">&lt;stikonas&gt;</a></span><span class="message">for spawning, files might have extention</span></div><div class="line" id="230532"><span class="nick" style="color:#8dd3c7"><a href="#230532" label="[23:05:32]">&lt;oriansj&gt;</a></span><span class="message">granted the host might have special rules for M2-Mesoplanet</span></div><div class="line" id="230551"><span class="nick" style="color:#8dd3c7"><a href="#230551" label="[23:05:51]">&lt;oriansj&gt;</a></span><span class="message">but M2-Planet and below, it shouldn't matter</span></div><div class="line" id="230553"><span class="nick" style="color:#389600"><a href="#230553" label="[23:05:53]">&lt;stikonas&gt;</a></span><span class="message">i.e M2-Planet might be M2-Planet.efi or M2-Planet.exe...</span></div><div class="line" id="230557"><span class="nick" style="color:#389600"><a href="#230557" label="[23:05:57]">&lt;stikonas&gt;</a></span><span class="message">yeah, other than that it doesn't matter</span></div><div class="line" id="230613"><span class="nick" style="color:#389600"><a href="#230613" label="[23:06:13]">&lt;stikonas&gt;</a></span><span class="message">hmm, I think I needto add a bit of sanity checking</span></div><div class="line" id="230630"><span class="nick" style="color:#389600"><a href="#230630" label="[23:06:30]">&lt;stikonas&gt;</a></span><span class="message">you added extra checks, but I was based on older commit</span></div><div class="line" id="230635"><span class="nick" style="color:#8dd3c7"><a href="#230635" label="[23:06:35]">&lt;oriansj&gt;</a></span><span class="message">yeah and M2-Mesoplanet definitely has to be aware of all of those differences</span></div><div class="line" id="231213"><span class="nick" style="color:#8dd3c7"><a href="#231213" label="[23:12:13]">&lt;oriansj&gt;</a></span><span class="message">I guess I prefer the purity of environmentless C and the only environment like bits are those you can -D define=in</span></div><div class="line" id="231344"><span class="nick" style="color:#389600"><a href="#231344" label="[23:13:44]">&lt;stikonas&gt;</a></span><span class="message">hmm, perhaps in that previous PR I should remove __init_macro_env(&quot;__uefi__&quot;, ...)</span></div><div class="line" id="231345"><span class="nick" style="color:#389600"><a href="#231345" label="[23:13:45]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="231529"><span class="nick" style="color:#389600"><a href="#231529" label="[23:15:29]">&lt;stikonas&gt;</a></span><span class="message">anyway, we can think about cross-compiling later</span></div><div class="line" id="231605"><span class="nick" style="color:#8dd3c7"><a href="#231605" label="[23:16:05]">&lt;oriansj&gt;</a></span><span class="message">here is my thought</span></div><div class="line" id="231606"><span class="nick" style="color:#389600"><a href="#231606" label="[23:16:06]">&lt;stikonas&gt;</a></span><span class="message">I'll first refactor uefi dirs</span></div><div class="line" id="231612"><span class="nick" style="color:#389600"><a href="#231612" label="[23:16:12]">&lt;stikonas&gt;</a></span><span class="message">ok?</span></div><div class="line" id="231621"><span class="nick" style="color:#8dd3c7"><a href="#231621" label="[23:16:21]">&lt;oriansj&gt;</a></span><span class="message">the default operating system is POSIX</span></div><div class="line" id="231642"><span class="nick" style="color:#389600"><a href="#231642" label="[23:16:42]">&lt;stikonas&gt;</a></span><span class="message">and -D__uefi__ would turn on UEFI build</span></div><div class="line" id="231643"><span class="nick" style="color:#389600"><a href="#231643" label="[23:16:43]">&lt;stikonas&gt;</a></span><span class="message">?</span></div><div class="line" id="231659"><span class="nick" style="color:#389600"><a href="#231659" label="[23:16:59]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="231715"><span class="nick" style="color:#389600"><a href="#231715" label="[23:17:15]">&lt;stikonas&gt;</a></span><span class="message">though spawning logic is also different</span></div><div class="line" id="231721"><span class="nick" style="color:#8dd3c7"><a href="#231721" label="[23:17:21]">&lt;oriansj&gt;</a></span><span class="message">well we could just check for binaries</span></div><div class="line" id="231723"><span class="nick" style="color:#389600"><a href="#231723" label="[23:17:23]">&lt;stikonas&gt;</a></span><span class="message">just -D__uefi__ wouldn't be enough</span></div><div class="line" id="231815"><span class="nick" style="color:#389600"><a href="#231815" label="[23:18:15]">&lt;stikonas&gt;</a></span><span class="message">anyway, let's refactor M2libc uefi dirs first</span></div><div class="line" id="231828"><span class="nick" style="color:#389600"><a href="#231828" label="[23:18:28]">&lt;stikonas&gt;</a></span><span class="message">as right now I can't even build any UEFI binaries with it</span></div><div class="line" id="231842"><span class="nick" style="color:#389600"><a href="#231842" label="[23:18:42]">&lt;stikonas&gt;</a></span><span class="message">and it will be clearer what do do once we can test stuff</span></div><div class="line" id="231908"><span class="nick" style="color:#8dd3c7"><a href="#231908" label="[23:19:08]">&lt;oriansj&gt;</a></span><span class="message">well the default exec stuff for the host can be hard coded</span></div><div class="line" id="231925"><span class="nick" style="color:#8dd3c7"><a href="#231925" label="[23:19:25]">&lt;oriansj&gt;</a></span><span class="message">(inside of #ifdef blocks )</span></div><div class="line" id="232002"><span class="nick" style="color:#8dd3c7"><a href="#232002" label="[23:20:02]">&lt;oriansj&gt;</a></span><span class="message">as we don't expect UEFI binaries to run on POSIX or Windows Systems or aarch64 binaries to run on RISC-V</span></div><div class="line" id="232117"><span class="nick" style="color:#8dd3c7"><a href="#232117" label="[23:21:17]">&lt;oriansj&gt;</a></span><span class="message">so we have a #ifdef __uefi__ with the spawn logic and a #else block with the default logic</span></div><div class="line" id="232136"><span class="nick" style="color:#8dd3c7"><a href="#232136" label="[23:21:36]">&lt;oriansj&gt;</a></span><span class="message">which one will be decided at compile time, not runtime</span></div><div class="line" id="232202"><span class="nick" style="color:#8dd3c7"><a href="#232202" label="[23:22:02]">&lt;oriansj&gt;</a></span><span class="message">(same for target binary names)</span></div><div class="line" id="232232"><span class="nick" style="color:#389600"><a href="#232232" label="[23:22:32]">&lt;stikonas&gt;</a></span><span class="message">yeah, that makes sense...</span></div><div class="line" id="232252"><span class="nick" style="color:#8dd3c7"><a href="#232252" label="[23:22:52]">&lt;oriansj&gt;</a></span><span class="message">then the question of host identification becomes a non-question</span></div><div class="line" id="232345"><span class="nick" style="color:#389600"><a href="#232345" label="[23:23:45]">&lt;stikonas&gt;</a></span><span class="message">and then what do we do with --os?</span></div><div class="line" id="232347"><span class="nick" style="color:#389600"><a href="#232347" label="[23:23:47]">&lt;stikonas&gt;</a></span><span class="message">remove it</span></div><div class="line" id="232358"><span class="nick" style="color:#389600"><a href="#232358" label="[23:23:58]">&lt;stikonas&gt;</a></span><span class="message">or repurpose it for target os</span></div><div class="line" id="232410"><span class="nick" style="color:#8dd3c7"><a href="#232410" label="[23:24:10]">&lt;oriansj&gt;</a></span><span class="message">replace it with --operating-system for the target operating system</span></div><div class="line" id="232507"><span class="nick" style="color:#8dd3c7"><a href="#232507" label="[23:25:07]">&lt;oriansj&gt;</a></span><span class="message">(you can keep -os or --os as a short hand if you want)</span></div><div class="line" id="232615"><span class="nick" style="color:#8dd3c7"><a href="#232615" label="[23:26:15]">&lt;oriansj&gt;</a></span><span class="message">and I see no reason why target operating system should be any more special than target architecture</span></div><div class="line" id="232653"><span class="nick" style="color:#8dd3c7"><a href="#232653" label="[23:26:53]">&lt;oriansj&gt;</a></span><span class="message">we can just use __init_macro_env and let standard C macro expansion do its magic</span></div><div class="line" id="233218"><span class="nick" style="color:#8dd3c7"><a href="#233218" label="[23:32:18]">&lt;oriansj&gt;</a></span><span class="message">and you may wish to have name to __${NAME}__ conversions</span></div><div class="line" id="233239"><span class="nick" style="color:#8dd3c7"><a href="#233239" label="[23:32:39]">&lt;oriansj&gt;</a></span><span class="message">so we can leverage more standard C operating system defintions</span></div><div class="line" id="233412"><span class="nick" style="color:#389600"><a href="#233412" label="[23:34:12]">&lt;stikonas&gt;</a></span><span class="message">well, normally it's __linux__</span></div><div class="line" id="233420"><span class="nick" style="color:#389600"><a href="#233420" label="[23:34:20]">&lt;stikonas&gt;</a></span><span class="message">hence I also used lowercase __uefi__</span></div><div class="line" id="234214"><span class="nick" style="color:#8dd3c7"><a href="#234214" label="[23:42:14]">&lt;oriansj&gt;</a></span><span class="message">and we can do __dos__, __cpm__, __lose__, __vms__ and more if we want</span></div><div class="line" id="234238"><span class="nick" style="color:#389600"><a href="#234238" label="[23:42:38]">&lt;stikonas&gt;</a></span><span class="message">oriansj: for now I have this <a rel="nofollow" href="https://github.com/oriansj/M2-Mesoplanet/pull/6/files">https://github.com/oriansj/M2-Mesoplanet/pull/6/files</a> </span></div><div class="line" id="234303"><span class="nick" style="color:#389600"><a href="#234303" label="[23:43:03]">&lt;stikonas&gt;</a></span><span class="message">I'll have to build blood-elf on UEFI first...</span></div><div class="line" id="234323"><span class="nick" style="color:#389600"><a href="#234323" label="[23:43:23]">&lt;stikonas&gt;</a></span><span class="message">if we want to build POSIX binaries on UEFI</span></div><div class="line" id="234333"><span class="nick" style="color:#389600"><a href="#234333" label="[23:43:33]">&lt;stikonas&gt;</a></span><span class="message">but that's unavoidable</span></div><div class="line" id="235415"><span class="nick" style="color:#389600"><a href="#235415" label="[23:54:15]">&lt;stikonas&gt;</a></span><span class="message">ok, just tested, seems to work and M2-Mesoplanet is now building POSIX binaries for mescc-tools-extra on UEFI</span></div><br /></div></body></html>