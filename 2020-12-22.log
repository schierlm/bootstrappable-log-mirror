<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-12-22.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="034213"><span class="nick" style="color:#8dd3c7"><a href="#034213" label="[03:42:13]">&lt;fossy&gt;</a></span><span class="message">OriansJ: i was just utilising catm as you had suggested to copy files around in early stages of the bootstrap</span></div><div class="line" id="034232"><span class="nick" style="color:#8dd3c7"><a href="#034232" label="[03:42:32]">&lt;fossy&gt;</a></span><span class="message">however i have run into a problem: it does not copy over permissions, so executable bit is lost</span></div><div class="line" id="034249"><span class="nick" style="color:#8dd3c7"><a href="#034249" label="[03:42:49]">&lt;fossy&gt;</a></span><span class="message">is this something i should just implement seperatly or is there a way to get catm to do it</span></div><div class="line" id="034626"><span class="nick" style="color:#2e2a4a"><a href="#034626" label="[03:46:26]">&lt;OriansJ&gt;</a></span><span class="message">fossy: we might just have to get some unix shell commands into a form that M2-Planet can build</span></div><div class="line" id="034846"><span class="nick" style="color:#2e2a4a"><a href="#034846" label="[03:48:46]">&lt;OriansJ&gt;</a></span><span class="message">deesix: not all labels for gotos have following statements</span></div><div class="line" id="035445"><span class="nick" style="color:#2e2a4a"><a href="#035445" label="[03:54:45]">&lt;OriansJ&gt;</a></span><span class="message">mihi: interesting choice for buffers on read; I would have thought read the whole file into a buffer and skip syscalls for all files opened for read and the buffering on writes just until newline or fflush.</span></div><div class="line" id="040920"><span class="nick" style="color:#2e2a4a"><a href="#040920" label="[04:09:20]">&lt;OriansJ&gt;</a></span><span class="message">mihi: the reason for the failing test on AMD64 that you posted; on 32bits was written but 64bits was read</span></div><div class="line" id="041545"><span class="nick" style="color:#2e2a4a"><a href="#041545" label="[04:15:45]">&lt;OriansJ&gt;</a></span><span class="message">doing something like this: <a rel="nofollow" href="https://paste.debian.net/1177902/">https://paste.debian.net/1177902/</a>  would fix that bug but introduce another bug if you did -1</span></div><div class="line" id="041915"><span class="nick" style="color:#6b8072"><a href="#041915" label="[04:19:15]">&lt;deesix&gt;</a></span><span class="message">OriansJ, I think a label without a statement is not a thing: &quot;Statements may carry label prefixes&quot;. The grammar for labeled_statement looks like the ANSI C (identifier : statement) one. What am I missing?</span></div><div class="line" id="041929"><span class="nick" style="color:#2e2a4a"><a href="#041929" label="[04:19:29]">&lt;OriansJ&gt;</a></span><span class="message">mihi: thank you for fixing the x86 fclose syscall and the test kaem envp behavior. merged</span></div><div class="line" id="042020"><span class="nick" style="color:#2e2a4a"><a href="#042020" label="[04:20:20]">&lt;OriansJ&gt;</a></span><span class="message">deesix: void bar() { goto foo; global = global + 1; foo:} is valid C code</span></div><div class="line" id="042139"><span class="nick" style="color:#6b8072"><a href="#042139" label="[04:21:39]">&lt;deesix&gt;</a></span><span class="message">OriansJ, I already tested something like that and got &quot;error: label at end of compound statement&quot;. Let me check that one.</span></div><div class="line" id="042458"><span class="nick" style="color:#2e2a4a"><a href="#042458" label="[04:24:58]">&lt;OriansJ&gt;</a></span><span class="message">minor correction int main() { goto foo; global = global + 1; foo:;} with GCC 10</span></div><div class="line" id="042548"><span class="nick" style="color:#6b8072"><a href="#042548" label="[04:25:48]">&lt;deesix&gt;</a></span><span class="message">Oh, that final ; is a statement, I think.</span></div><div class="line" id="042757"><span class="nick" style="color:#6b8072"><a href="#042757" label="[04:27:57]">&lt;deesix&gt;</a></span><span class="message">expression-statement without the optional part.</span></div><div class="line" id="042809"><span class="nick" style="color:#80b1d3"><a href="#042809" label="[04:28:09]">&lt;xentrac&gt;</a></span><span class="message">yes, ; is a statement</span></div><div class="line" id="042836"><span class="nick" style="color:#80b1d3"><a href="#042836" label="[04:28:36]">&lt;xentrac&gt;</a></span><span class="message">that's why it's valid</span></div><div class="line" id="042902"><span class="nick" style="color:#2e2a4a"><a href="#042902" label="[04:29:02]">&lt;OriansJ&gt;</a></span><span class="message">I think this is why I am really bad at doing a proper C compiler.</span></div><div class="line" id="042919"><span class="nick" style="color:#80b1d3"><a href="#042919" label="[04:29:19]">&lt;xentrac&gt;</a></span><span class="message">the usual case where this aspect of the C syntax is annoying is when you want to put a label on a declaration</span></div><div class="line" id="042923"><span class="nick" style="color:#80b1d3"><a href="#042923" label="[04:29:23]">&lt;xentrac&gt;</a></span><span class="message">foo: int x = 3;</span></div><div class="line" id="042941"><span class="nick" style="color:#80b1d3"><a href="#042941" label="[04:29:41]">&lt;xentrac&gt;</a></span><span class="message">it's not you, OriansJ, it's C</span></div><div class="line" id="043005"><span class="nick" style="color:#2e2a4a"><a href="#043005" label="[04:30:05]">&lt;OriansJ&gt;</a></span><span class="message">I really cheated hard in M2-Planet for gotos and labels</span></div><div class="line" id="043036"><span class="nick" style="color:#2e2a4a"><a href="#043036" label="[04:30:36]">&lt;OriansJ&gt;</a></span><span class="message">just converted label: to :label and made goto a naked jump (good luck if you assigned variables)</span></div><div class="line" id="043202"><span class="nick" style="color:#2e2a4a"><a href="#043202" label="[04:32:02]">&lt;OriansJ&gt;</a></span><span class="message">but a 20 hour hack of a C compiler that seems to be my eternal project</span></div><div class="line" id="043236"><span class="nick" style="color:#2e2a4a"><a href="#043236" label="[04:32:36]">&lt;OriansJ&gt;</a></span><span class="message">where all functions arguments are void* and all returns are void*</span></div><div class="line" id="043408"><span class="nick" style="color:#2e2a4a"><a href="#043408" label="[04:34:08]">&lt;OriansJ&gt;</a></span><span class="message">The types only mean size, signed and nothing else. And actually get the size wrong on all targets. long -&gt;32bits on 32bit platforms; int -&gt;64bits on 64bit platforms</span></div><div class="line" id="044058"><span class="nick" style="color:#2e2a4a"><a href="#044058" label="[04:40:58]">&lt;OriansJ&gt;</a></span><span class="message">mihi: looking close enough to your buffering code. It looks like it could/should be shared by all of the architectures.</span></div><div class="line" id="044124"><span class="nick" style="color:#2e2a4a"><a href="#044124" label="[04:41:24]">&lt;OriansJ&gt;</a></span><span class="message">time I guess to finally start treating libc seriously I guess in M2-Planet</span></div><div class="line" id="044558"><span class="nick" style="color:#2e2a4a"><a href="#044558" label="[04:45:58]">&lt;OriansJ&gt;</a></span><span class="message">but it is late and I have work bright and early. Good night.</span></div><div class="line" id="061129"><span class="nick" style="color:#8dd3c7"><a href="#061129" label="[06:11:29]">&lt;fossy&gt;</a></span><span class="message">OriansJ: ok, I will work on that at some point</span></div><div class="line" id="132549"><span class="nick" style="color:#6d2462"><a href="#132549" label="[13:25:49]">&lt;mihi&gt;</a></span><span class="message">OriansJ, that buffering approach is not my idea, the same concept is used by Rust's bufio and Java's buffered streams. Only simplification I made is that I always flush the buffer on seek instead of checking if the seek offset is inside the already read buffer.</span></div><div class="line" id="132648"><span class="nick" style="color:#6d2462"><a href="#132648" label="[13:26:48]">&lt;mihi&gt;</a></span><span class="message">Making it auto-flush on newline is certainly doable, and also we could change the stdout/stderr buffering from &quot;no buffering&quot; to &quot;buffer until newline&quot; if we make sure that the stream is either flushed or every printed message ends with a newline.</span></div><div class="line" id="132741"><span class="nick" style="color:#6d2462"><a href="#132741" label="[13:27:41]">&lt;mihi&gt;</a></span><span class="message">I also agree that it will be possible to share some code across architectures, but I have no (easy) way of testing ARM architecture and since it does not work on AMD64, the only arch left is i386...</span></div><div class="line" id="132810"><span class="nick" style="color:#6d2462"><a href="#132810" label="[13:28:10]">&lt;mihi&gt;</a></span><span class="message">so my approach would be to first implement/test for all architectures and refactor common code once that is done and proven to work.</span></div><div class="line" id="132847"><span class="nick" style="color:#6d2462"><a href="#132847" label="[13:28:47]">&lt;mihi&gt;</a></span><span class="message">About read(2) ing the whole file in a single syscall I see a few disadvantages:</span></div><div class="line" id="132919"><span class="nick" style="color:#6d2462"><a href="#132919" label="[13:29:19]">&lt;mihi&gt;</a></span><span class="message">1) While it may be possible to get the size beforehand using lseek or stat, this will not work for all kinds of file descriptors</span></div><div class="line" id="133039"><span class="nick" style="color:#6d2462"><a href="#133039" label="[13:30:39]">&lt;mihi&gt;</a></span><span class="message">2) reading the whole file will block until the hard disk has read all the sectors, even if the program stops after having read half of the file. Also modern OSes have read-ahead caches, which only help if the program does some procesing already while the file is read.</span></div><div class="line" id="133150"><span class="nick" style="color:#6d2462"><a href="#133150" label="[13:31:50]">&lt;mihi&gt;</a></span><span class="message">you may work around this by using mmap(2), but that would make it more complex, won't work for all file types, and would require every supported kernel to support mmap.</span></div><div class="line" id="133230"><span class="nick" style="color:#6d2462"><a href="#133230" label="[13:32:30]">&lt;mihi&gt;</a></span><span class="message">and last but not least 3) you would need some size limit as I don't think it is a good idea to completely load gigabyte large files on the first read call.</span></div><div class="line" id="133338"><span class="nick" style="color:#6d2462"><a href="#133338" label="[13:33:38]">&lt;mihi&gt;</a></span><span class="message">last a disclaimer: I never had a look how actual libc implementations implement their read buffering, but I would assume it to be a lot more complex :)</span></div><div class="line" id="135530"><span class="nick" style="color:#2e2a4a"><a href="#135530" label="[13:55:30]">&lt;OriansJ&gt;</a></span><span class="message">mihi: well right now the largest file M2-Planet is compiling is 524,034bytes; so setting a limit at 20MB seems reasonsable and set a flag if fully read. Then we can fall back to the flush and lseek behavior if it is too large.</span></div><div class="line" id="143020"><span class="nick" style="color:#6d2462"><a href="#143020" label="[14:30:20]">&lt;mihi&gt;</a></span><span class="message">OriansJ, so If I understandy you correctly, you would prefer: (1) on fopen, try to use lseek to get the file size and if we are successful, use the file size clamped to 20MB as buffer size. If unsuccessful or the file is still empty, use a fixed buffer size as now. Store the file size. (2) When reading, try to fill the whole buffer. I don't think we need an extra flag for it, when I implement detection of seeks</span></div><div class="line" id="143021"><span class="nick" style="color:#6d2462"><a href="#143021" label="[14:30:21]">&lt;mihi&gt;</a></span><span class="message">inside the buffer (which will need the file size in case of SEEK_END seeks). (3) When switching from read to write or vice versa (don't think it happens in M2-Planet right now), I would still flush the whole buffer. (4) writes will invalidate the file size. (5) separate file.c into architecture-dependent and architecture-specific parts</span></div><div class="line" id="143110"><span class="nick" style="color:#6d2462"><a href="#143110" label="[14:31:10]">&lt;mihi&gt;</a></span><span class="message">(6) auto-flush on newlines?</span></div><div class="line" id="145526"><span class="nick" style="color:#6d2462"><a href="#145526" label="[14:55:26]">&lt;mihi&gt;</a></span><span class="message">meanwhile I checked libbionic (embedded libc) and their io buffering implementation is very similar to ours. One exception is that it bypasses the buffer when reading large chunks and the buffer is empty, but we are only reading one byte at a time anyway :)</span></div><div class="line" id="145542"><span class="nick" style="color:#6d2462"><a href="#145542" label="[14:55:42]">&lt;mihi&gt;</a></span><span class="message">s/ours/mine/</span></div><div class="line" id="145636"><span class="nick" style="color:#6d2462"><a href="#145636" label="[14:56:36]">&lt;mihi&gt;</a></span><span class="message">but anyway, I still think the biggest obstacle is to get it working on 64-bit too :)</span></div><div class="line" id="145652"><span class="nick" style="color:#6d2462"><a href="#145652" label="[14:56:52]">&lt;mihi&gt;</a></span><span class="message">on 64-bit M2-Planet, to be exact</span></div><div class="line" id="154546"><span class="nick" style="color:#234e69"><a href="#154546" label="[15:45:46]">&lt;siraben&gt;</a></span><span class="message">OriansJ: what's the largest file M2-Planet is compiling?</span></div><div class="line" id="155141"><span class="nick" style="color:#6c3d55"><a href="#155141" label="[15:51:41]">&lt;pder&gt;</a></span><span class="message">siraben: I now have precisely building with M2-Planet.  I am just working on modifying precisely.hs to output M2-Planet compatible code.  Do you have any thoughts on sample code to test the compiler?</span></div><div class="line" id="155238"><span class="nick" style="color:#6c3d55"><a href="#155238" label="[15:52:38]">&lt;pder&gt;</a></span><span class="message">btw precisely.c is 759222 bytes</span></div><div class="line" id="160028"><span class="nick" style="color:#234e69"><a href="#160028" label="[16:00:28]">&lt;siraben&gt;</a></span><span class="message">pder: sure, I'll do some tests and see what precisely.hs accepts</span></div><div class="line" id="160043"><span class="nick" style="color:#234e69"><a href="#160043" label="[16:00:43]">&lt;siraben&gt;</a></span><span class="message">of course, you should attempt self-compilation</span></div><div class="line" id="160107"><span class="nick" style="color:#6c3d55"><a href="#160107" label="[16:01:07]">&lt;pder&gt;</a></span><span class="message">Thank you, yes bin/precisely &lt; precisely.hs works</span></div><div class="line" id="160126"><span class="nick" style="color:#6c3d55"><a href="#160126" label="[16:01:26]">&lt;pder&gt;</a></span><span class="message">I am just wondering what a minimal program looks like</span></div><div class="line" id="160202"><span class="nick" style="color:#6c3d55"><a href="#160202" label="[16:02:02]">&lt;pder&gt;</a></span><span class="message">Maybe we want a wrapper script that compiles the hs to C and compiles with M2-Planet to an executable?</span></div><div class="line" id="160249"><span class="nick" style="color:#234e69"><a href="#160249" label="[16:02:49]">&lt;siraben&gt;</a></span><span class="message">pder: try, `main = putStrLn &quot;hello, world!&quot;`</span></div><div class="line" id="160301"><span class="nick" style="color:#234e69"><a href="#160301" label="[16:03:01]">&lt;siraben&gt;</a></span><span class="message">I think at that point it's layout sensitive</span></div><div class="line" id="160314"><span class="nick" style="color:#234e69"><a href="#160314" label="[16:03:14]">&lt;siraben&gt;</a></span><span class="message">so lots of simple haskell programs will work, provided the functions are defined</span></div><div class="line" id="160341"><span class="nick" style="color:#234e69"><a href="#160341" label="[16:03:41]">&lt;siraben&gt;</a></span><span class="message">pder: and when you compile precisely with itself, does the produced output also work?</span></div><div class="line" id="160431"><span class="nick" style="color:#6c3d55"><a href="#160431" label="[16:04:31]">&lt;pder&gt;</a></span><span class="message">siraben, I still need some more modifications to precisely.hs to generate M2-Planet code, so I can compile it repeatedly</span></div><div class="line" id="160438"><span class="nick" style="color:#6c3d55"><a href="#160438" label="[16:04:38]">&lt;pder&gt;</a></span><span class="message">but I am close</span></div><div class="line" id="160528"><span class="nick" style="color:#6c3d55"><a href="#160528" label="[16:05:28]">&lt;pder&gt;</a></span><span class="message">so the minimal hello world gives me missing: putStrLn</span></div><div class="line" id="160549"><span class="nick" style="color:#234e69"><a href="#160549" label="[16:05:49]">&lt;siraben&gt;</a></span><span class="message">Ok, so that's because it's not defined, hm.</span></div><div class="line" id="160557"><span class="nick" style="color:#234e69"><a href="#160557" label="[16:05:57]">&lt;siraben&gt;</a></span><span class="message">I'll paste something that should</span></div><div class="line" id="160608"><span class="nick" style="color:#234e69"><a href="#160608" label="[16:06:08]">&lt;siraben&gt;</a></span><span class="message">oh at least that some error message!</span></div><div class="line" id="160624"><span class="nick" style="color:#234e69"><a href="#160624" label="[16:06:24]">&lt;siraben&gt;</a></span><span class="message">what happens when you do some ill-typed thing like `main = 3 + &quot;hello&quot;`?</span></div><div class="line" id="160652"><span class="nick" style="color:#6c3d55"><a href="#160652" label="[16:06:52]">&lt;pder&gt;</a></span><span class="message">&quot;missing +&quot;</span></div><div class="line" id="160835"><span class="nick" style="color:#6c3d55"><a href="#160835" label="[16:08:35]">&lt;pder&gt;</a></span><span class="message">Do we need some sort of header that defines all of these primitives?</span></div><div class="line" id="161001"><span class="nick" style="color:#234e69"><a href="#161001" label="[16:10:01]">&lt;siraben&gt;</a></span><span class="message">it seems like it, I will make a simple program now and see</span></div><div class="line" id="161645"><span class="nick" style="color:#234e69"><a href="#161645" label="[16:16:45]">&lt;siraben&gt;</a></span><span class="message">pder: this is a good instance where interactive development with GHC helps</span></div><div class="line" id="161717"><span class="nick" style="color:#6c3d55"><a href="#161717" label="[16:17:17]">&lt;pder&gt;</a></span><span class="message">so GHC loads Prelude on startup, so I assume we need something equivalent</span></div><div class="line" id="161845"><span class="nick" style="color:#234e69"><a href="#161845" label="[16:18:45]">&lt;siraben&gt;</a></span><span class="message">Ok none of the wrap files are working with precisely</span></div><div class="line" id="161846"><span class="nick" style="color:#234e69"><a href="#161846" label="[16:18:46]">&lt;siraben&gt;</a></span><span class="message">hm</span></div><div class="line" id="163434"><span class="nick" style="color:#234e69"><a href="#163434" label="[16:34:34]">&lt;siraben&gt;</a></span><span class="message">pder: <a rel="nofollow" href="http://ix.io/2J99">http://ix.io/2J99</a> </span></div><div class="line" id="163439"><span class="nick" style="color:#234e69"><a href="#163439" label="[16:34:39]">&lt;siraben&gt;</a></span><span class="message">./precisely &lt; sample.hs &gt; out.c &amp;&amp; gcc -O3 -o out out.c &amp;&amp; ./out</span></div><div class="line" id="163900"><span class="nick" style="color:#6c3d55"><a href="#163900" label="[16:39:00]">&lt;pder&gt;</a></span><span class="message">Thanks.  How did you arrive at that?</span></div><div class="line" id="164149"><span class="nick" style="color:#234e69"><a href="#164149" label="[16:41:49]">&lt;siraben&gt;</a></span><span class="message">pder: I started with precisely.hs and commented out huge swaths of it and replaced main with putStr &quot;hello\n&quot;</span></div><div class="line" id="164239"><span class="nick" style="color:#234e69"><a href="#164239" label="[16:42:39]">&lt;siraben&gt;</a></span><span class="message">then cleaned up and so on, iterated using precisely itself actually</span></div><div class="line" id="164248"><span class="nick" style="color:#234e69"><a href="#164248" label="[16:42:48]">&lt;siraben&gt;</a></span><span class="message">it told me what was missing and when types mismatched</span></div><div class="line" id="164305"><span class="nick" style="color:#234e69"><a href="#164305" label="[16:43:05]">&lt;siraben&gt;</a></span><span class="message">the next step would be to fix a wrap so that one can use GHC</span></div><div class="line" id="164311"><span class="nick" style="color:#234e69"><a href="#164311" label="[16:43:11]">&lt;siraben&gt;</a></span><span class="message">then a reasonable prelude</span></div><div class="line" id="164314"><span class="nick" style="color:#6c3d55"><a href="#164314" label="[16:43:14]">&lt;pder&gt;</a></span><span class="message">Ah ok, do you think we should have something equivalent to Prelude that is autoloaded?</span></div><div class="line" id="164331"><span class="nick" style="color:#234e69"><a href="#164331" label="[16:43:31]">&lt;siraben&gt;</a></span><span class="message">Hm, if blynn-compiler had modules/was able to include files it would be easier</span></div><div class="line" id="164334"><span class="nick" style="color:#234e69"><a href="#164334" label="[16:43:34]">&lt;siraben&gt;</a></span><span class="message">yes definitely</span></div><div class="line" id="164353"><span class="nick" style="color:#234e69"><a href="#164353" label="[16:43:53]">&lt;siraben&gt;</a></span><span class="message">The user should only need to write `main = putStrLn &quot;hello, world!&quot;` instead of that preamble</span></div><div class="line" id="164807"><span class="nick" style="color:#6c3d55"><a href="#164807" label="[16:48:07]">&lt;pder&gt;</a></span><span class="message">Anything missing we can extend beyond precisely</span></div><div class="line" id="164919"><span class="nick" style="color:#234e69"><a href="#164919" label="[16:49:19]">&lt;siraben&gt;</a></span><span class="message">As in extra stages? I think precisely is the last stage.</span></div><div class="line" id="164924"><span class="nick" style="color:#234e69"><a href="#164924" label="[16:49:24]">&lt;siraben&gt;</a></span><span class="message">Didn't we have crossly as well?</span></div><div class="line" id="164957"><span class="nick" style="color:#234e69"><a href="#164957" label="[16:49:57]">&lt;siraben&gt;</a></span><span class="message">Also are you sure commit 734f695e9539a23e4336e4e17006a3bd96171636 is alright?</span></div><div class="line" id="165008"><span class="nick" style="color:#234e69"><a href="#165008" label="[16:50:08]">&lt;siraben&gt;</a></span><span class="message">I wonder why blynn made div and mod like that in the first place</span></div><div class="line" id="165207"><span class="nick" style="color:#6c3d55"><a href="#165207" label="[16:52:07]">&lt;pder&gt;</a></span><span class="message">I wondered that too.  I tried to keep anything I was not certain of in separate commits so they are easy to see and possibly revert</span></div><div class="line" id="165254"><span class="nick" style="color:#6c3d55"><a href="#165254" label="[16:52:54]">&lt;pder&gt;</a></span><span class="message">Yeah, I meant extra stages beyond precisely if we needed extra features like modules</span></div><div class="line" id="165312"><span class="nick" style="color:#234e69"><a href="#165312" label="[16:53:12]">&lt;siraben&gt;</a></span><span class="message">Ah crossly lets you compile to wasm, nice</span></div><div class="line" id="165323"><span class="nick" style="color:#234e69"><a href="#165323" label="[16:53:23]">&lt;siraben&gt;</a></span><span class="message">So now we have a bootstrap to a wasm version of blynn-compiler</span></div><div class="line" id="165333"><span class="nick" style="color:#6c3d55"><a href="#165333" label="[16:53:33]">&lt;pder&gt;</a></span><span class="message">I changed div and mod because M2-Planet did not give the same results as gcc with that code but I didnt look closely at why</span></div><div class="line" id="165341"><span class="nick" style="color:#234e69"><a href="#165341" label="[16:53:41]">&lt;siraben&gt;</a></span><span class="message">ah, right.</span></div><div class="line" id="165417"><span class="nick" style="color:#234e69"><a href="#165417" label="[16:54:17]">&lt;siraben&gt;</a></span><span class="message">so we might have to propose a &quot;modularly&quot; stage, I'll open an issue upstream and see what happens</span></div><div class="line" id="165937"><span class="nick" style="color:#234e69"><a href="#165937" label="[16:59:37]">&lt;siraben&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/blynn/compiler/issues/2">https://github.com/blynn/compiler/issues/2</a> </span></div><div class="line" id="170132"><span class="nick" style="color:#6c3d55"><a href="#170132" label="[17:01:32]">&lt;pder&gt;</a></span><span class="message">In commit 53af09a76492ac6 I tried to do the least invasive thing which should make the 64bit types behave like 32 bit types.  Does this seem ok?</span></div><div class="line" id="170318"><span class="nick" style="color:#234e69"><a href="#170318" label="[17:03:18]">&lt;siraben&gt;</a></span><span class="message">Oh also disabled GCC optimizations? Did it change the behavior?</span></div><div class="line" id="170415"><span class="nick" style="color:#6c3d55"><a href="#170415" label="[17:04:15]">&lt;pder&gt;</a></span><span class="message">No change in behavior- just for debugging purposes.  When I push the final branch I will undo it</span></div><div class="line" id="170510"><span class="nick" style="color:#234e69"><a href="#170510" label="[17:05:10]">&lt;siraben&gt;</a></span><span class="message">OK, great</span></div><div class="line" id="170753"><span class="nick" style="color:#234e69"><a href="#170753" label="[17:07:53]">&lt;siraben&gt;</a></span><span class="message">I think it should be good, we'll need to test it to be sure</span></div><div class="line" id="174309"><span class="nick" style="color:#6c3d55"><a href="#174309" label="[17:43:09]">&lt;pder&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/blynn-compiler/pull/11">https://github.com/oriansj/blynn-compiler/pull/11</a> </span></div><div class="line" id="174456"><span class="nick" style="color:#6c3d55"><a href="#174456" label="[17:44:56]">&lt;pder&gt;</a></span><span class="message">OriansJ: the final stage of blynn-compiler now builds with M2-Planet</span></div><div class="line" id="174921"><span class="nick" style="color:#6c3d55"><a href="#174921" label="[17:49:21]">&lt;pder&gt;</a></span><span class="message">siraben: Your sample hello world works building with M2-Planet</span></div><div class="line" id="175246"><span class="nick" style="color:#234e69"><a href="#175246" label="[17:52:46]">&lt;siraben&gt;</a></span><span class="message">pder: thank you for your work!</span></div><div class="line" id="180545"><span class="nick" style="color:#234e69"><a href="#180545" label="[18:05:45]">&lt;siraben&gt;</a></span><span class="message">pder: it would be good to fix the CI as well, I'll take a look in the morning and suggest changes</span></div><div class="line" id="180806"><span class="nick" style="color:#234e69"><a href="#180806" label="[18:08:06]">&lt;siraben&gt;</a></span><span class="message">pder: segfault: <a rel="nofollow" href="https://github.com/oriansj/blynn-compiler/pull/11/checks?check_run_id=1595992801">https://github.com/oriansj/blynn-compiler/pull/11/checks?check_run_id=1595992801</a> </span></div><div class="line" id="184520"><span class="nick" style="color:#6c3d55"><a href="#184520" label="[18:45:20]">&lt;pder&gt;</a></span><span class="message">siraben: looks like the tests are using an old version of M2-Planet.  from the logs it is using e5befc4feed411f55303c</span></div><div class="line" id="211308"><span class="nick" style="color:#8dd3c7"><a href="#211308" label="[21:13:08]">&lt;fossy&gt;</a></span><span class="message">pder: amazing work!!!!</span></div><div class="line" id="211310"><span class="nick" style="color:#8dd3c7"><a href="#211310" label="[21:13:10]">&lt;fossy&gt;</a></span><span class="message">and siraben</span></div><div class="line" id="211329"><span class="nick" style="color:#8dd3c7"><a href="#211329" label="[21:13:29]">&lt;fossy&gt;</a></span><span class="message">siraben: what's the next step? a r5s5 interpreter?</span></div><br /></div></body></html>