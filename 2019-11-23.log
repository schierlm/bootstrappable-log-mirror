<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2019-11-23.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="015213"><span class="nick" style="color:#8dd3c7"><a href="#015213" label="[01:52:13]">&lt;oriansj&gt;</a></span><span class="message">janneke: MES_PREFIX and MES_BOOT are now working in the slow_lisp branch (along with all of the other environmental variables</span></div><div class="line" id="015216"><span class="nick" style="color:#8dd3c7"><a href="#015216" label="[01:52:16]">&lt;oriansj&gt;</a></span><span class="message">)</span></div><div class="line" id="015458"><span class="nick" style="color:#8dd3c7"><a href="#015458" label="[01:54:58]">&lt;oriansj&gt;</a></span><span class="message">Although the need for a scheme reader probably is going to disappear as the lisp becomes more powerful (adding primitives is both simple and fun)</span></div><div class="line" id="021451"><span class="nick" style="color:#2e2a4a"><a href="#021451" label="[02:14:51]">&lt;xentrac&gt;</a></span><span class="message">congratulations!</span></div><div class="line" id="021636"><span class="nick" style="color:#8dd3c7"><a href="#021636" label="[02:16:36]">&lt;oriansj&gt;</a></span><span class="message">xentrac: I'll earn that after I add support for macros</span></div><div class="line" id="021716"><span class="nick" style="color:#2e2a4a"><a href="#021716" label="[02:17:16]">&lt;xentrac&gt;</a></span><span class="message">haha</span></div><div class="line" id="021724"><span class="nick" style="color:#2e2a4a"><a href="#021724" label="[02:17:24]">&lt;xentrac&gt;</a></span><span class="message">no, you've earned it :)</span></div><div class="line" id="021745"><span class="nick" style="color:#2e2a4a"><a href="#021745" label="[02:17:45]">&lt;xentrac&gt;</a></span><span class="message">but you should totally do macros too! your life will be better</span></div><div class="line" id="021907"><span class="nick" style="color:#8dd3c7"><a href="#021907" label="[02:19:07]">&lt;oriansj&gt;</a></span><span class="message">plus by adding macro expansion as a seperate stage in REPL, it makes it trivial to understand what the macros are actually generating</span></div><div class="line" id="022025"><span class="nick" style="color:#2e2a4a"><a href="#022025" label="[02:20:25]">&lt;xentrac&gt;</a></span><span class="message">well, &quot;trivial&quot; may be overstating the case, but certainly less difficult</span></div><div class="line" id="022135"><span class="nick" style="color:#2e2a4a"><a href="#022135" label="[02:21:35]">&lt;xentrac&gt;</a></span><span class="message">one of the debatable benefits of syntax-rules is that it's harder to write macros that misbehave in really surprising ways than with defmacro</span></div><div class="line" id="022148"><span class="nick" style="color:#8dd3c7"><a href="#022148" label="[02:21:48]">&lt;oriansj&gt;</a></span><span class="message">when you can p* R0-&gt;cdr your way to see the expanded S-expression; it is kinda hard to not know exactly what transformation has done</span></div><div class="line" id="022329"><span class="nick" style="color:#2e2a4a"><a href="#022329" label="[02:23:29]">&lt;xentrac&gt;</a></span><span class="message">yeah, being able to see the final expanded S-expression helps a lot with debugging</span></div><div class="line" id="022431"><span class="nick" style="color:#2e2a4a"><a href="#022431" label="[02:24:31]">&lt;xentrac&gt;</a></span><span class="message">so you can see what the result of the transformation was, although if the result is large that may take a long time</span></div><div class="line" id="022521"><span class="nick" style="color:#2e2a4a"><a href="#022521" label="[02:25:21]">&lt;xentrac&gt;</a></span><span class="message">and sometimes if you use gensyms or syntactic closures you can have an S-expression that looks right but isn't</span></div><div class="line" id="022522"><span class="nick" style="color:#8dd3c7"><a href="#022522" label="[02:25:22]">&lt;oriansj&gt;</a></span><span class="message">plus with the recent addition require(bool, char*); I'll be peppering it with more checks to prevent problems from occuring</span></div><div class="line" id="022557"><span class="nick" style="color:#2e2a4a"><a href="#022557" label="[02:25:57]">&lt;xentrac&gt;</a></span><span class="message">a lot of lisps also provide a macroexpand-1 for interactive use in debugging macros, which does only one stage of macro expansion</span></div><div class="line" id="022614"><span class="nick" style="color:#2e2a4a"><a href="#022614" label="[02:26:14]">&lt;xentrac&gt;</a></span><span class="message">this can be helpful when you know that the final result is wrong but not how it got that way</span></div><div class="line" id="022750"><span class="nick" style="color:#8dd3c7"><a href="#022750" label="[02:27:50]">&lt;oriansj&gt;</a></span><span class="message">well I was thinking of making a trivial pattern match expander; from oldest to newest macro definition</span></div><div class="line" id="022839"><span class="nick" style="color:#2e2a4a"><a href="#022839" label="[02:28:39]">&lt;xentrac&gt;</a></span><span class="message">you're thinking of supporting multiple independent macro definitions for the same head symbol?</span></div><div class="line" id="022850"><span class="nick" style="color:#8dd3c7"><a href="#022850" label="[02:28:50]">&lt;oriansj&gt;</a></span><span class="message">yep</span></div><div class="line" id="022927"><span class="nick" style="color:#2e2a4a"><a href="#022927" label="[02:29:27]">&lt;xentrac&gt;</a></span><span class="message">it'll be interesting to see how that comes out.  there are some interesting languages that work that way, like Aardappel and Q</span></div><div class="line" id="023002"><span class="nick" style="color:#2e2a4a"><a href="#023002" label="[02:30:02]">&lt;xentrac&gt;</a></span><span class="message">and I think Mathematica</span></div><div class="line" id="023021"><span class="nick" style="color:#8dd3c7"><a href="#023021" label="[02:30:21]">&lt;oriansj&gt;</a></span><span class="message">honestly, I'll probably force it to work like guile; bugs and all</span></div><div class="line" id="023040"><span class="nick" style="color:#2e2a4a"><a href="#023040" label="[02:30:40]">&lt;xentrac&gt;</a></span><span class="message">you want it to be compatible with guile's macro system?</span></div><div class="line" id="023120"><span class="nick" style="color:#8dd3c7"><a href="#023120" label="[02:31:20]">&lt;oriansj&gt;</a></span><span class="message">for easy code sharing for MesCC</span></div><div class="line" id="023148"><span class="nick" style="color:#8dd3c7"><a href="#023148" label="[02:31:48]">&lt;oriansj&gt;</a></span><span class="message">(probably an essential subset only) and Guix</span></div><div class="line" id="023151"><span class="nick" style="color:#2e2a4a"><a href="#023151" label="[02:31:51]">&lt;xentrac&gt;</a></span><span class="message">well, so, Guile supports hygienic macros with syntax-rules and I think maybe also with syntax-case</span></div><div class="line" id="023209"><span class="nick" style="color:#2e2a4a"><a href="#023209" label="[02:32:09]">&lt;xentrac&gt;</a></span><span class="message">doing hygienic macros correctly is reputedly very difficult; I've never done it</span></div><div class="line" id="023236"><span class="nick" style="color:#8dd3c7"><a href="#023236" label="[02:32:36]">&lt;oriansj&gt;</a></span><span class="message">I wonder if it is easier to do correctly in C or Scheme</span></div><div class="line" id="023240"><span class="nick" style="color:#2e2a4a"><a href="#023240" label="[02:32:40]">&lt;xentrac&gt;</a></span><span class="message">(that isn't evidence that it's difficult, just evidence that I'm speaking for hearsay)</span></div><div class="line" id="023431"><span class="nick" style="color:#2e2a4a"><a href="#023431" label="[02:34:31]">&lt;xentrac&gt;</a></span><span class="message">I think the paper that finally explained how to do it after several years of trying was <a rel="nofollow" href="https://www.researchgate.net/publication/220997237_Macros_That_Work">https://www.researchgate.net/publication/220997237_Macros_That_Work</a> </span></div><div class="line" id="023505"><span class="nick" style="color:#2e2a4a"><a href="#023505" label="[02:35:05]">&lt;xentrac&gt;</a></span><span class="message">but maybe there are simpler ways now'</span></div><div class="line" id="023553"><span class="nick" style="color:#8dd3c7"><a href="#023553" label="[02:35:53]">&lt;oriansj&gt;</a></span><span class="message">I guess what I need is a guile developer to write some tests for macros and yell at me when I implement that functionality wrong</span></div><div class="line" id="023650"><span class="nick" style="color:#8dd3c7"><a href="#023650" label="[02:36:50]">&lt;oriansj&gt;</a></span><span class="message">Then I could do the same with adding support for scheme modules</span></div><div class="line" id="023757"><span class="nick" style="color:#2e2a4a"><a href="#023757" label="[02:37:57]">&lt;xentrac&gt;</a></span><span class="message">That's a possibility, but I think there's every possibility that implementing Macros That Work will involve around ten thousand lines of code</span></div><div class="line" id="023845"><span class="nick" style="color:#8dd3c7"><a href="#023845" label="[02:38:45]">&lt;oriansj&gt;</a></span><span class="message">xentrac: so? M2-Planet can compile 100Kloc per second (when compiled by GCC)</span></div><div class="line" id="023900"><span class="nick" style="color:#2e2a4a"><a href="#023900" label="[02:39:00]">&lt;xentrac&gt;</a></span><span class="message">code that people have to check for potential backdoors</span></div><div class="line" id="023913"><span class="nick" style="color:#8dd3c7"><a href="#023913" label="[02:39:13]">&lt;oriansj&gt;</a></span><span class="message">(It used to be 300Kloc)</span></div><div class="line" id="023921"><span class="nick" style="color:#2e2a4a"><a href="#023921" label="[02:39:21]">&lt;xentrac&gt;</a></span><span class="message">what happened?</span></div><div class="line" id="024028"><span class="nick" style="color:#8dd3c7"><a href="#024028" label="[02:40:28]">&lt;oriansj&gt;</a></span><span class="message">I kept adding functionality and the state machine grew larger and larger</span></div><div class="line" id="024144"><span class="nick" style="color:#8dd3c7"><a href="#024144" label="[02:41:44]">&lt;oriansj&gt;</a></span><span class="message">I also starting doing match(&quot;=&quot;, global_token-&gt;s) instead of (global_token-&gt;s[0] == '=')</span></div><div class="line" id="024237"><span class="nick" style="color:#8dd3c7"><a href="#024237" label="[02:42:37]">&lt;oriansj&gt;</a></span><span class="message">now &quot;==&quot; isn't mistaken for assignment</span></div><div class="line" id="024427"><span class="nick" style="color:#8dd3c7"><a href="#024427" label="[02:44:27]">&lt;oriansj&gt;</a></span><span class="message">xentrac: well the good news is disabling macros in slow_lisp is a handful a commented out lines and removal of one file (mes_macro.c)</span></div><div class="line" id="024509"><span class="nick" style="color:#8dd3c7"><a href="#024509" label="[02:45:09]">&lt;oriansj&gt;</a></span><span class="message">and right now all functionality is only 2243 lines of C</span></div><div class="line" id="024731"><span class="nick" style="color:#8dd3c7"><a href="#024731" label="[02:47:31]">&lt;oriansj&gt;</a></span><span class="message">I can't imagine adding a handful primitives should be 3 times larger than a garbage compacting collecting lisp with 52 primites</span></div><div class="line" id="025347"><span class="nick" style="color:#2e2a4a"><a href="#025347" label="[02:53:47]">&lt;xentrac&gt;</a></span><span class="message">do you have call-with-current-continuation?  that's one primitive</span></div><div class="line" id="025659"><span class="nick" style="color:#8dd3c7"><a href="#025659" label="[02:56:59]">&lt;oriansj&gt;</a></span><span class="message">xentrac: don't have a good test for it yet</span></div><div class="line" id="025733"><span class="nick" style="color:#2e2a4a"><a href="#025733" label="[02:57:33]">&lt;xentrac&gt;</a></span><span class="message">I mean, I don't want to discourage you from adding macros, I'm just saying that maybe the Scheme design for macros may not have the best strength-to-weight ratio among possible macro designs</span></div><div class="line" id="025913"><span class="nick" style="color:#8dd3c7"><a href="#025913" label="[02:59:13]">&lt;oriansj&gt;</a></span><span class="message">xentrac: I honestly have no great desire for supporting macros but I do have a great desire for supporting MesCC, Nyacc and Guix; which do appear to use macros</span></div><div class="line" id="030021"><span class="nick" style="color:#8dd3c7"><a href="#030021" label="[03:00:21]">&lt;oriansj&gt;</a></span><span class="message">Thus any primative they require, I'll add</span></div><div class="line" id="030034"><span class="nick" style="color:#8dd3c7"><a href="#030034" label="[03:00:34]">&lt;oriansj&gt;</a></span><span class="message">plus we still need to solve the psyntax bootstrap problem</span></div><div class="line" id="030233"><span class="nick" style="color:#2e2a4a"><a href="#030233" label="[03:02:33]">&lt;xentrac&gt;</a></span><span class="message">it might be easier to implement the particular macros those three things use than to implement hygienic macros</span></div><div class="line" id="030241"><span class="nick" style="color:#2e2a4a"><a href="#030241" label="[03:02:41]">&lt;xentrac&gt;</a></span><span class="message">what's the psyntax bootstrap problem?</span></div><div class="line" id="030406"><span class="nick" style="color:#8dd3c7"><a href="#030406" label="[03:04:06]">&lt;oriansj&gt;</a></span><span class="message">psyntax requires guile to build from source; but guile requires a processed psyntax to build</span></div><div class="line" id="030605"><span class="nick" style="color:#8dd3c7"><a href="#030605" label="[03:06:05]">&lt;oriansj&gt;</a></span><span class="message">xentrac: well we should probably get janneke's and civodul's views on that approach; there might be trade-offs such as just having define-macro might be a reasonable level of functionality</span></div><div class="line" id="030712"><span class="nick" style="color:#2e2a4a"><a href="#030712" label="[03:07:12]">&lt;xentrac&gt;</a></span><span class="message">probably it's worth trying some things first</span></div><div class="line" id="030730"><span class="nick" style="color:#2e2a4a"><a href="#030730" label="[03:07:30]">&lt;xentrac&gt;</a></span><span class="message">and possibly reading the paper I linked above, although I hesitate to suggest that that should preced prototyping</span></div><div class="line" id="030733"><span class="nick" style="color:#2e2a4a"><a href="#030733" label="[03:07:33]">&lt;xentrac&gt;</a></span><span class="message">precede</span></div><div class="line" id="030824"><span class="nick" style="color:#2e2a4a"><a href="#030824" label="[03:08:24]">&lt;xentrac&gt;</a></span><span class="message">does psyntax implement syntax-case only or also syntax-rules?</span></div><div class="line" id="031038"><span class="nick" style="color:#8dd3c7"><a href="#031038" label="[03:10:38]">&lt;oriansj&gt;</a></span><span class="message">honestly, I haven't looked at solving that yet but it looks at first glance a bit ugly</span></div><div class="line" id="031132"><span class="nick" style="color:#2e2a4a"><a href="#031132" label="[03:11:32]">&lt;xentrac&gt;</a></span><span class="message">Dybvig says that if you have syntax-case you can implement syntax-rules as a simple macro: <a rel="nofollow" href="http://www.cs.indiana.edu/~dyb/pubs/bc-syntax-case.pdf">http://www.cs.indiana.edu/~dyb/pubs/bc-syntax-case.pdf</a> </span></div><div class="line" id="031147"><span class="nick" style="color:#2e2a4a"><a href="#031147" label="[03:11:47]">&lt;xentrac&gt;</a></span><span class="message">so presumably that's the approach Guile takes</span></div><div class="line" id="032205"><span class="nick" style="color:#8dd3c7"><a href="#032205" label="[03:22:05]">&lt;oriansj&gt;</a></span><span class="message">honestly, everytime I get told something is too hard; I keep discovering it is far easier than people think</span></div><div class="line" id="032321"><span class="nick" style="color:#8dd3c7"><a href="#032321" label="[03:23:21]">&lt;oriansj&gt;</a></span><span class="message">-&gt;no one has ever written a C compiler in Assembly&lt;- *does it in a day*; why it was so fun ^_^</span></div><div class="line" id="032459"><span class="nick" style="color:#8dd3c7"><a href="#032459" label="[03:24:59]">&lt;oriansj&gt;</a></span><span class="message">I'm betting that macros could be done in 2 weeks and under 1000 lines if I had someone to write the tests for me</span></div><div class="line" id="032637"><span class="nick" style="color:#8dd3c7"><a href="#032637" label="[03:26:37]">&lt;oriansj&gt;</a></span><span class="message">(Because finding good scheme macro examples frankly sucks) and  if I write them I might forget something important in that time frame</span></div><div class="line" id="034844"><span class="nick" style="color:#8dd3c7"><a href="#034844" label="[03:48:44]">&lt;oriansj&gt;</a></span><span class="message">but then again I love being proved wrong; it means people care enough to improve my understanding</span></div><div class="line" id="045035"><span class="nick" style="color:#6b8072"><a href="#045035" label="[04:50:35]">&lt;jackhill&gt;</a></span><span class="message">:)</span></div><div class="line" id="045057"><span class="nick" style="color:#6b8072"><a href="#045057" label="[04:50:57]">&lt;jackhill&gt;</a></span><span class="message">thanks for the great work, and for thinking out loud</span></div><div class="line" id="051513"><span class="nick" style="color:#80b1d3"><a href="#051513" label="[05:15:13]">&lt;theruran&gt;</a></span><span class="message">how come when I run bin/mes-m2 I get this message? unbound-variable: %version\n</span></div><div class="line" id="051522"><span class="nick" style="color:#80b1d3"><a href="#051522" label="[05:15:22]">&lt;theruran&gt;</a></span><span class="message">checked out from git master</span></div><div class="line" id="051824"><span class="nick" style="color:#2e2a4a"><a href="#051824" label="[05:18:24]">&lt;xentrac&gt;</a></span><span class="message">what is this about &quot;no one has ever written a C compiler in assembly&quot;?  what do people think the original C compiler was written in, RATFOR?</span></div><div class="line" id="051846"><span class="nick" style="color:#2e2a4a"><a href="#051846" label="[05:18:46]">&lt;xentrac&gt;</a></span><span class="message">there are a bunch of excellent macro examples in R5RS</span></div><div class="line" id="051857"><span class="nick" style="color:#2e2a4a"><a href="#051857" label="[05:18:57]">&lt;xentrac&gt;</a></span><span class="message">I pasted an edited version of one of them here the other day</span></div><div class="line" id="052010"><span class="nick" style="color:#2e2a4a"><a href="#052010" label="[05:20:10]">&lt;xentrac&gt;</a></span><span class="message">I'm not sure how you would write a test to verify that a macro system was hygienic.</span></div><div class="line" id="052047"><span class="nick" style="color:#2e2a4a"><a href="#052047" label="[05:20:47]">&lt;xentrac&gt;</a></span><span class="message">so I think this is another reason why nobody else is doing this stuff: they think it's harder than it is (for you)</span></div><div class="line" id="052058"><span class="nick" style="color:#2e2a4a"><a href="#052058" label="[05:20:58]">&lt;xentrac&gt;</a></span><span class="message">they might be right (for them/us)</span></div><div class="line" id="052213"><span class="nick" style="color:#2e2a4a"><a href="#052213" label="[05:22:13]">&lt;xentrac&gt;</a></span><span class="message">I think people are way too scared of assembly.  But it's true that doing things in assembly is slow, and it's a pain to debug</span></div><div class="line" id="052225"><span class="nick" style="color:#2e2a4a"><a href="#052225" label="[05:22:25]">&lt;xentrac&gt;</a></span><span class="message">but at least it's simple</span></div><div class="line" id="135042"><span class="nick" style="color:#8dd3c7"><a href="#135042" label="[13:50:42]">&lt;oriansj&gt;</a></span><span class="message">theruran: because the slow_lisp branch never defined that variable yet; if you do export MES_CORE=0 it should drop you directly into the repl</span></div><div class="line" id="135203"><span class="nick" style="color:#8dd3c7"><a href="#135203" label="[13:52:03]">&lt;oriansj&gt;</a></span><span class="message">xentrac: well the original C compiler was written in B and the cain C compiler was cross compiled from a Bell C compiler; so unless there is something that I am missing (which is entirely possible)</span></div><div class="line" id="135241"><span class="nick" style="color:#6d2462"><a href="#135241" label="[13:52:41]">&lt;zig&gt;</a></span><span class="message">what is the purpose of the slow_lisp branch?</span></div><div class="line" id="135537"><span class="nick" style="color:#8dd3c7"><a href="#135537" label="[13:55:37]">&lt;oriansj&gt;</a></span><span class="message">zig: well janneke willing, a beautiful scheme that is trivial to understand and audit but also capable of running everything required to bootstrap guix</span></div><div class="line" id="195651"><span class="nick" style="color:#80b1d3"><a href="#195651" label="[19:56:51]">&lt;theruran&gt;</a></span><span class="message">oriansj: got it</span></div><div class="line" id="200009"><span class="nick" style="color:#6d2462"><a href="#200009" label="[20:00:09]">&lt;zig&gt;</a></span><span class="message">talking about trivial to undertand compiler for scheme, I find the nanopassframework approach very elegant, one might just tweak `match` macro to make it one step closer to the original framework</span></div><div class="line" id="200631"><span class="nick" style="color:#80b1d3"><a href="#200631" label="[20:06:31]">&lt;theruran&gt;</a></span><span class="message">zig: +1 nanopass framework</span></div><div class="line" id="201901"><span class="nick" style="color:#80b1d3"><a href="#201901" label="[20:19:01]">&lt;theruran&gt;</a></span><span class="message">I was reading a paper, &quot;A Security Kernel Based on the Lambda-Calculus&quot;, and it describes a Scheme− dialect that may be useful</span></div><div class="line" id="220346"><span class="nick" style="color:#80b1d3"><a href="#220346" label="[22:03:46]">&lt;theruran&gt;</a></span><span class="message">I have recreated the BNF grammar and short description of it from the paper here: <a rel="nofollow" href="https://hack-the-planet.neocities.org/Scheme-minus/grammar.html">https://hack-the-planet.neocities.org/Scheme-minus/grammar.html</a> </span></div><div class="line" id="220412"><span class="nick" style="color:#80b1d3"><a href="#220412" label="[22:04:12]">&lt;theruran&gt;</a></span><span class="message">ah well, it's the author's PhD dissertation. It also includes an appendix on Macros That Work.</span></div><div class="line" id="225723"><span class="nick" style="color:#8dd3c7"><a href="#225723" label="[22:57:23]">&lt;oriansj&gt;</a></span><span class="message">theruran: honestly extending slow_lisp to include pair?, symbol?, eq?, new-cell, cell-ref, cell-set!, enclose and control wouldn't take much effort at all and I have the rest already and other primitives like define and cond</span></div><div class="line" id="230107"><span class="nick" style="color:#8dd3c7"><a href="#230107" label="[23:01:07]">&lt;oriansj&gt;</a></span><span class="message">zig: well we are familiar with it, however janneke never went that direction and I just now am getting to building a major scheme (the original slow_lisp was written in assembly and died before becoming useful) So I haven't had the chance to leverage for anything useful yet</span></div><div class="line" id="230441"><span class="nick" style="color:#8dd3c7"><a href="#230441" label="[23:04:41]">&lt;oriansj&gt;</a></span><span class="message">I need someone to do a FOSDEM talk for me on stage0</span></div><br /></div></body></html>