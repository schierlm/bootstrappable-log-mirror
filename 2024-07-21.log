<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2024-07-21.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="164138"><span class="nick" style="color:#389600"><a href="#164138" label="[16:41:38]">&lt;andydude&gt;</a></span><span class="message">Hey mescctools is failing tests</span></div><div class="line" id="164523"><span class="nick" style="color:#8dd3c7"><a href="#164523" label="[16:45:23]">&lt;andydude1&gt;</a></span><span class="message">test/test1/hello.sh: line 37:   129 Segmentation fault      (core dumped) ./test/results/test1-binary &lt; test/test1/hex0.hex0 &gt; test/test1/proof1</span></div><div class="line" id="165043"><span class="nick" style="color:#389600"><a href="#165043" label="[16:50:43]">&lt;andydude&gt;</a></span><span class="message">I also had a question about code, are C and Scheme the only languages allowed? or would you also welcome bootstrap code in, say Lua or Wren?</span></div><div class="line" id="165936"><span class="nick" style="color:#2e2a4a"><a href="#165936" label="[16:59:36]">&lt;nimaje&gt;</a></span><span class="message">more bootstrap paths are better, even if incomplete, if you can connect your stuff to the live-bootstrap seed it would be nice, but if you assume lua and bootsrap stuff from that it is fine too</span></div><div class="line" id="170247"><span class="nick" style="color:#389600"><a href="#170247" label="[17:02:47]">&lt;andydude&gt;</a></span><span class="message">is that at github.com/fosslinux?</span></div><div class="line" id="170318"><span class="nick" style="color:#389600"><a href="#170318" label="[17:03:18]">&lt;andydude&gt;</a></span><span class="message">Wren is a super tiny OOP language, I really like it</span></div><div class="line" id="170340"><span class="nick" style="color:#389600"><a href="#170340" label="[17:03:40]">&lt;andydude&gt;</a></span><span class="message">I'm currently writing a scheme in it</span></div><div class="line" id="170946"><span class="nick" style="color:#2e2a4a"><a href="#170946" label="[17:09:46]">&lt;nimaje&gt;</a></span><span class="message">ah, I meant stage0, not live-bootstrap <a rel="nofollow" href="https://bootstrapping.miraheze.org/wiki/Stage0">https://bootstrapping.miraheze.org/wiki/Stage0</a>  <a rel="nofollow" href="https://bootstrapping.miraheze.org/wiki/Live-bootstrap">https://bootstrapping.miraheze.org/wiki/Live-bootstrap</a> </span></div><div class="line" id="171452"><span class="nick" style="color:#6b8072"><a href="#171452" label="[17:14:52]">&lt;stikonas&gt;</a></span><span class="message">andydude: other languages are fine, but how do you bootstrap them?</span></div><div class="line" id="171518"><span class="nick" style="color:#389600"><a href="#171518" label="[17:15:18]">&lt;andydude&gt;</a></span><span class="message">well, Lua and Wren are both written in C</span></div><div class="line" id="171528"><span class="nick" style="color:#6b8072"><a href="#171528" label="[17:15:28]">&lt;stikonas&gt;</a></span><span class="message">but probably at least C99</span></div><div class="line" id="171549"><span class="nick" style="color:#6b8072"><a href="#171549" label="[17:15:49]">&lt;stikonas&gt;</a></span><span class="message">stage0-posix contains two C compilers but both are quite limitted</span></div><div class="line" id="171608"><span class="nick" style="color:#6b8072"><a href="#171608" label="[17:16:08]">&lt;stikonas&gt;</a></span><span class="message">especially the first one that is written in assembly</span></div><div class="line" id="171623"><span class="nick" style="color:#6b8072"><a href="#171623" label="[17:16:23]">&lt;stikonas&gt;</a></span><span class="message">then M2-Planet is somewhat better but still far from C99</span></div><div class="line" id="171633"><span class="nick" style="color:#6b8072"><a href="#171633" label="[17:16:33]">&lt;stikonas&gt;</a></span><span class="message">e.g. it doesn't even support stuff like i++</span></div><div class="line" id="171710"><span class="nick" style="color:#6b8072"><a href="#171710" label="[17:17:10]">&lt;stikonas&gt;</a></span><span class="message">but if you can make lua or wren build with it, then why not</span></div><div class="line" id="171834"><span class="nick" style="color:#6b8072"><a href="#171834" label="[17:18:34]">&lt;stikonas&gt;</a></span><span class="message">porting a small program to M2-Planet is not too hard</span></div><div class="line" id="171835"><span class="nick" style="color:#389600"><a href="#171835" label="[17:18:35]">&lt;andydude&gt;</a></span><span class="message">I saw oriansj had some sub-repos for people who worked on UEFI stuff</span></div><div class="line" id="171853"><span class="nick" style="color:#6b8072"><a href="#171853" label="[17:18:53]">&lt;stikonas&gt;</a></span><span class="message">I was the only one who worked on UEFI as far as I know...</span></div><div class="line" id="171912"><span class="nick" style="color:#389600"><a href="#171912" label="[17:19:12]">&lt;andydude&gt;</a></span><span class="message">UEFI has a whole mini-OS that would be super useful if available</span></div><div class="line" id="171914"><span class="nick" style="color:#6b8072"><a href="#171914" label="[17:19:14]">&lt;stikonas&gt;</a></span><span class="message">but if you want to help with UEFI, any help would be appreciated</span></div><div class="line" id="171927"><span class="nick" style="color:#389600"><a href="#171927" label="[17:19:27]">&lt;andydude&gt;</a></span><span class="message">I know the edk2 repo like the back of my hand</span></div><div class="line" id="171936"><span class="nick" style="color:#6b8072"><a href="#171936" label="[17:19:36]">&lt;stikonas&gt;</a></span><span class="message">well, I started writing my own POSIX compatibility kernel</span></div><div class="line" id="171945"><span class="nick" style="color:#6b8072"><a href="#171945" label="[17:19:45]">&lt;stikonas&gt;</a></span><span class="message">but didn't spend that much time on it yet</span></div><div class="line" id="171956"><span class="nick" style="color:#6b8072"><a href="#171956" label="[17:19:56]">&lt;stikonas&gt;</a></span><span class="message">but it could run stuff untill mes</span></div><div class="line" id="172021"><span class="nick" style="color:#6b8072"><a href="#172021" label="[17:20:21]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/posix-runner/posix-runner.c">https://git.stikonas.eu/andrius/stage0-uefi/src/branch/main/posix-runner/posix-runner.c</a> </span></div><div class="line" id="172031"><span class="nick" style="color:#389600"><a href="#172031" label="[17:20:31]">&lt;andydude&gt;</a></span><span class="message">I'm super familiar with C and Scheme, but honestly, I haven't experimented with mes/mescc</span></div><div class="line" id="172049"><span class="nick" style="color:#6b8072"><a href="#172049" label="[17:20:49]">&lt;stikonas&gt;</a></span><span class="message">well, this is just a &quot;kernel&quot;</span></div><div class="line" id="172056"><span class="nick" style="color:#6b8072"><a href="#172056" label="[17:20:56]">&lt;stikonas&gt;</a></span><span class="message">I'm not super familiar with mes/mescc either</span></div><div class="line" id="172123"><span class="nick" style="color:#389600"><a href="#172123" label="[17:21:23]">&lt;andydude&gt;</a></span><span class="message">I can imagine maybe having two versions of each app, like an ELF version and a UEFI version</span></div><div class="line" id="172137"><span class="nick" style="color:#6b8072"><a href="#172137" label="[17:21:37]">&lt;stikonas&gt;</a></span><span class="message">andydude: so for stage0-uefi we have UEFI version of each app</span></div><div class="line" id="172141"><span class="nick" style="color:#6b8072"><a href="#172141" label="[17:21:41]">&lt;stikonas&gt;</a></span><span class="message">including M2-Planet</span></div><div class="line" id="172141"><span class="nick" style="color:#389600"><a href="#172141" label="[17:21:41]">&lt;andydude&gt;</a></span><span class="message">oh</span></div><div class="line" id="172148"><span class="nick" style="color:#6b8072"><a href="#172148" label="[17:21:48]">&lt;stikonas&gt;</a></span><span class="message">but going next is harder</span></div><div class="line" id="172158"><span class="nick" style="color:#6b8072"><a href="#172158" label="[17:21:58]">&lt;stikonas&gt;</a></span><span class="message">in particular there are two options</span></div><div class="line" id="172209"><span class="nick" style="color:#6b8072"><a href="#172209" label="[17:22:09]">&lt;stikonas&gt;</a></span><span class="message">port all compilers and C libs to UEFI</span></div><div class="line" id="172215"><span class="nick" style="color:#389600"><a href="#172215" label="[17:22:15]">&lt;andydude&gt;</a></span><span class="message">you would need like EXT2 drivers at the UEFI to write to a file or something</span></div><div class="line" id="172230"><span class="nick" style="color:#6b8072"><a href="#172230" label="[17:22:30]">&lt;stikonas&gt;</a></span><span class="message">or wrote some posix loader that can run posix apps in UEFI</span></div><div class="line" id="172241"><span class="nick" style="color:#6b8072"><a href="#172241" label="[17:22:41]">&lt;stikonas&gt;</a></span><span class="message">I thought latter option is easier</span></div><div class="line" id="172304"><span class="nick" style="color:#6b8072"><a href="#172304" label="[17:23:04]">&lt;stikonas&gt;</a></span><span class="message">andydude: why do we need EXT2?</span></div><div class="line" id="172323"><span class="nick" style="color:#6b8072"><a href="#172323" label="[17:23:23]">&lt;stikonas&gt;</a></span><span class="message">at the beginning you can just use UEFI api to read stuff from ESP and write there</span></div><div class="line" id="172352"><span class="nick" style="color:#6b8072"><a href="#172352" label="[17:23:52]">&lt;stikonas&gt;</a></span><span class="message">if you want, one can read all the source data in the memory work there</span></div><div class="line" id="172356"><span class="nick" style="color:#6b8072"><a href="#172356" label="[17:23:56]">&lt;stikonas&gt;</a></span><span class="message">but I havne't done that yet</span></div><div class="line" id="172412"><span class="nick" style="color:#389600"><a href="#172412" label="[17:24:12]">&lt;andydude&gt;</a></span><span class="message">well, UEFI has builtin support for FAT, so I suppose we could just depend on that</span></div><div class="line" id="172415"><span class="nick" style="color:#6b8072"><a href="#172415" label="[17:24:15]">&lt;stikonas&gt;</a></span><span class="message">I guess there are options forward with UEFI kernel</span></div><div class="line" id="172430"><span class="nick" style="color:#6b8072"><a href="#172430" label="[17:24:30]">&lt;stikonas&gt;</a></span><span class="message">1. read all the sources in the memory, shut down UEFI services and be a full kernel</span></div><div class="line" id="172442"><span class="nick" style="color:#389600"><a href="#172442" label="[17:24:42]">&lt;andydude&gt;</a></span><span class="message">you could install your own FS drivers, so make creating/writing files easier</span></div><div class="line" id="172443"><span class="nick" style="color:#6b8072"><a href="#172443" label="[17:24:43]">&lt;stikonas&gt;</a></span><span class="message">2. keep using UEFI API as long as possible</span></div><div class="line" id="172454"><span class="nick" style="color:#6b8072"><a href="#172454" label="[17:24:54]">&lt;stikonas&gt;</a></span><span class="message">yeah, but so far FAT is fine...</span></div><div class="line" id="172501"><span class="nick" style="color:#6b8072"><a href="#172501" label="[17:25:01]">&lt;stikonas&gt;</a></span><span class="message">well, one could use something simpler than fat...</span></div><div class="line" id="172517"><span class="nick" style="color:#6b8072"><a href="#172517" label="[17:25:17]">&lt;stikonas&gt;</a></span><span class="message">e.g. write a driver for file system that builder-hex0 implemented (for BIOS/MBR bootstrap)</span></div><div class="line" id="172538"><span class="nick" style="color:#6b8072"><a href="#172538" label="[17:25:38]">&lt;stikonas&gt;</a></span><span class="message">but again, I haven't done that either</span></div><div class="line" id="172602"><span class="nick" style="color:#6b8072"><a href="#172602" label="[17:26:02]">&lt;stikonas&gt;</a></span><span class="message">so far I just used FAT support from UEFI</span></div><div class="line" id="172639"><span class="nick" style="color:#6b8072"><a href="#172639" label="[17:26:39]">&lt;stikonas&gt;</a></span><span class="message">I haven't even implemented paging yet...</span></div><div class="line" id="172652"><span class="nick" style="color:#6b8072"><a href="#172652" label="[17:26:52]">&lt;stikonas&gt;</a></span><span class="message">which is probaby what needs doing next</span></div><div class="line" id="172656"><span class="nick" style="color:#389600"><a href="#172656" label="[17:26:56]">&lt;andydude&gt;</a></span><span class="message">One thing I did on one of my laptops was get rid of GRUB entirely</span></div><div class="line" id="172723"><span class="nick" style="color:#6b8072"><a href="#172723" label="[17:27:23]">&lt;stikonas&gt;</a></span><span class="message">well, it is doable, though then you need to have unencrypted boot</span></div><div class="line" id="172731"><span class="nick" style="color:#6b8072"><a href="#172731" label="[17:27:31]">&lt;stikonas&gt;</a></span><span class="message">where you keep kernels and initramfs</span></div><div class="line" id="172752"><span class="nick" style="color:#389600"><a href="#172752" label="[17:27:52]">&lt;andydude&gt;</a></span><span class="message">I just put a little uefi-shell script at /boot/something.sh that calls vmlinuz directly with the command line arguments I wanted</span></div><div class="line" id="172814"><span class="nick" style="color:#389600"><a href="#172814" label="[17:28:14]">&lt;andydude&gt;</a></span><span class="message">super user unfriendly, but I like how I could just throw grub in the garbage!</span></div><div class="line" id="172917"><span class="nick" style="color:#6b8072"><a href="#172917" label="[17:29:17]">&lt;stikonas&gt;</a></span><span class="message">anyway, try playing with stage0-uefi...</span></div><div class="line" id="172925"><span class="nick" style="color:#389600"><a href="#172925" label="[17:29:25]">&lt;andydude&gt;</a></span><span class="message">ok, will do</span></div><div class="line" id="172928"><span class="nick" style="color:#6b8072"><a href="#172928" label="[17:29:28]">&lt;stikonas&gt;</a></span><span class="message">it does build quite a lot of stuff there</span></div><div class="line" id="172940"><span class="nick" style="color:#6b8072"><a href="#172940" label="[17:29:40]">&lt;stikonas&gt;</a></span><span class="message">including M2-Planet.efi (subset of) C compiler</span></div><div class="line" id="173158"><span class="nick" style="color:#6b8072"><a href="#173158" label="[17:31:58]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi/">https://git.stikonas.eu/andrius/stage0-uefi/</a> </span></div><div class="line" id="173203"><span class="nick" style="color:#6b8072"><a href="#173203" label="[17:32:03]">&lt;stikonas&gt;</a></span><span class="message">there is a short readme there</span></div><div class="line" id="173212"><span class="nick" style="color:#6b8072"><a href="#173212" label="[17:32:12]">&lt;stikonas&gt;</a></span><span class="message">and some makefiles to create qemu images</span></div><div class="line" id="173242"><span class="nick" style="color:#6b8072"><a href="#173242" label="[17:32:42]">&lt;stikonas&gt;</a></span><span class="message">I did test it on my laptop too, but it hasn't seen wider baremetal testing</span></div><div class="line" id="173317"><span class="nick" style="color:#389600"><a href="#173317" label="[17:33:17]">&lt;andydude&gt;</a></span><span class="message">But ethically, is it wrong to depend so much on UEFI?</span></div><div class="line" id="173332"><span class="nick" style="color:#389600"><a href="#173332" label="[17:33:32]">&lt;andydude&gt;</a></span><span class="message">UEFI is like a giant binary black box</span></div><div class="line" id="173356"><span class="nick" style="color:#389600"><a href="#173356" label="[17:33:56]">&lt;andydude&gt;</a></span><span class="message">I've reverse engineered hundreds of vendor's interpretation of UEFI</span></div><div class="line" id="173410"><span class="nick" style="color:#389600"><a href="#173410" label="[17:34:10]">&lt;andydude&gt;</a></span><span class="message">and there's always some surprises</span></div><div class="line" id="173450"><span class="nick" style="color:#389600"><a href="#173450" label="[17:34:50]">&lt;andydude&gt;</a></span><span class="message">for one, the memory training is always closed source</span></div><div class="line" id="173509"><span class="nick" style="color:#6b8072"><a href="#173509" label="[17:35:09]">&lt;stikonas&gt;</a></span><span class="message">well, you can do similar stage0 stuff on other architectures</span></div><div class="line" id="173526"><span class="nick" style="color:#6b8072"><a href="#173526" label="[17:35:26]">&lt;stikonas&gt;</a></span><span class="message">and we do have non-x86 posix versions of stage0</span></div><div class="line" id="173548"><span class="nick" style="color:#6b8072"><a href="#173548" label="[17:35:48]">&lt;stikonas&gt;</a></span><span class="message">but for modern x86 hardware you can't start bellow UEFI...</span></div><div class="line" id="173552"><span class="nick" style="color:#389600"><a href="#173552" label="[17:35:52]">&lt;andydude&gt;</a></span><span class="message">The only other platform I have access to is too many raspberry pi picos</span></div><div class="line" id="173657"><span class="nick" style="color:#6b8072"><a href="#173657" label="[17:36:57]">&lt;stikonas&gt;</a></span><span class="message">stage0 doesn't use too many syscalls/services, you mainly need to be able to do i/o</span></div><div class="line" id="173802"><span class="nick" style="color:#389600"><a href="#173802" label="[17:38:02]">&lt;andydude&gt;</a></span><span class="message">iirc, the biggest hurdle with linux on the pico is that it doesn't have an MMU</span></div><div class="line" id="173832"><span class="nick" style="color:#6b8072"><a href="#173832" label="[17:38:32]">&lt;stikonas&gt;</a></span><span class="message">so you only have non-virtual addresses?</span></div><div class="line" id="173923"><span class="nick" style="color:#6b8072"><a href="#173923" label="[17:39:23]">&lt;stikonas&gt;</a></span><span class="message">probably fine for most stage0 stuff but I guess harder to go further</span></div><div class="line" id="174019"><span class="nick" style="color:#389600"><a href="#174019" label="[17:40:19]">&lt;andydude&gt;</a></span><span class="message">the marketing website says &quot;264KB of SRAM, 2MB of on-board flash&quot;</span></div><div class="line" id="174049"><span class="nick" style="color:#6b8072"><a href="#174049" label="[17:40:49]">&lt;stikonas&gt;</a></span><span class="message">that's probbably enough to run hex0, hex1, hex2 and M0</span></div><div class="line" id="174116"><span class="nick" style="color:#6b8072"><a href="#174116" label="[17:41:16]">&lt;stikonas&gt;</a></span><span class="message">probably not sufficient to run stage0 compilers</span></div><div class="line" id="174152"><span class="nick" style="color:#389600"><a href="#174152" label="[17:41:52]">&lt;andydude&gt;</a></span><span class="message">My dream would be to connect multiple picos, and have one running gcc, one running scheme, one running python, etc. and connect all of them to a bigger host with UART</span></div><div class="line" id="174153"><span class="nick" style="color:#6b8072"><a href="#174153" label="[17:41:53]">&lt;stikonas&gt;</a></span><span class="message">maybe you could tweak them a bit to move stuff form memory to flash</span></div><div class="line" id="174251"><span class="nick" style="color:#389600"><a href="#174251" label="[17:42:51]">&lt;andydude&gt;</a></span><span class="message">not sure if that fits with with bootstrapping</span></div><div class="line" id="174629"><span class="nick" style="color:#389600"><a href="#174629" label="[17:46:29]">&lt;andydude&gt;</a></span><span class="message">I must admit that the whole idea of starting out with a hex monitor is a little intimidating</span></div><div class="line" id="174701"><span class="nick" style="color:#389600"><a href="#174701" label="[17:47:01]">&lt;andydude&gt;</a></span><span class="message">There are so many other places I would start, but it seems like all of them have the possibility of introducing binary black boxes</span></div><div class="line" id="174704"><span class="nick" style="color:#6b8072"><a href="#174704" label="[17:47:04]">&lt;stikonas&gt;</a></span><span class="message">well, most stage0-* things start with hex0</span></div><div class="line" id="174707"><span class="nick" style="color:#389600"><a href="#174707" label="[17:47:07]">&lt;andydude&gt;</a></span><span class="message">For example, TFTP</span></div><div class="line" id="174707"><span class="nick" style="color:#6b8072"><a href="#174707" label="[17:47:07]">&lt;stikonas&gt;</a></span><span class="message">not hex0-monitor</span></div><div class="line" id="174709"><span class="nick" style="color:#6b8072"><a href="#174709" label="[17:47:09]">&lt;stikonas&gt;</a></span><span class="message">but similar</span></div><div class="line" id="174725"><span class="nick" style="color:#6b8072"><a href="#174725" label="[17:47:25]">&lt;stikonas&gt;</a></span><span class="message">so they expect source to be already on the media that is available for hex0 to read</span></div><div class="line" id="174736"><span class="nick" style="color:#6b8072"><a href="#174736" label="[17:47:36]">&lt;stikonas&gt;</a></span><span class="message">anywya, hex0 is quite small</span></div><div class="line" id="174738"><span class="nick" style="color:#389600"><a href="#174738" label="[17:47:38]">&lt;andydude&gt;</a></span><span class="message">TFTP is something that could be used to transfer binaries from another host, but again, how do you verify that it isn't something malicious?</span></div><div class="line" id="174741"><span class="nick" style="color:#6b8072"><a href="#174741" label="[17:47:41]">&lt;stikonas&gt;</a></span><span class="message">e.g. on x86 it is just 256 bytes</span></div><div class="line" id="174752"><span class="nick" style="color:#6b8072"><a href="#174752" label="[17:47:52]">&lt;stikonas&gt;</a></span><span class="message">well, yes, you can't verify everything</span></div><div class="line" id="174804"><span class="nick" style="color:#6b8072"><a href="#174804" label="[17:48:04]">&lt;stikonas&gt;</a></span><span class="message">even if you can verity software, you will have fw and or hardware trust issues</span></div><div class="line" id="174817"><span class="nick" style="color:#6b8072"><a href="#174817" label="[17:48:17]">&lt;stikonas&gt;</a></span><span class="message">unless you run your own silicon fab in the garage</span></div><div class="line" id="174834"><span class="nick" style="color:#389600"><a href="#174834" label="[17:48:34]">&lt;andydude&gt;</a></span><span class="message">lol</span></div><div class="line" id="174840"><span class="nick" style="color:#6b8072"><a href="#174840" label="[17:48:40]">&lt;stikonas&gt;</a></span><span class="message">but it's harder to do something malicious at lower levels</span></div><div class="line" id="174850"><span class="nick" style="color:#389600"><a href="#174850" label="[17:48:50]">&lt;andydude&gt;</a></span><span class="message">I love the guy who did siliconpr0n</span></div><div class="line" id="174904"><span class="nick" style="color:#389600"><a href="#174904" label="[17:49:04]">&lt;andydude&gt;</a></span><span class="message">although he was more destroying chips than building them</span></div><div class="line" id="174947"><span class="nick" style="color:#389600"><a href="#174947" label="[17:49:47]">&lt;andydude&gt;</a></span><span class="message"> <a rel="nofollow" href="https://siliconpr0n.org/">https://siliconpr0n.org/</a> </span></div><div class="line" id="175112"><span class="nick" style="color:#389600"><a href="#175112" label="[17:51:12]">&lt;andydude&gt;</a></span><span class="message">Also, I think it's probably easier to trust microcontrollers at this point</span></div><div class="line" id="175231"><span class="nick" style="color:#389600"><a href="#175231" label="[17:52:31]">&lt;andydude&gt;</a></span><span class="message">I suppose the line drawn by this project is &quot;we will not knowingly introduce any bad code&quot;</span></div><div class="line" id="180429"><span class="nick" style="color:#389600"><a href="#180429" label="[18:04:29]">&lt;andydude&gt;</a></span><span class="message">This posix-runner would allow the binary to be in ELF format, and use linux-ish syscalls?</span></div><div class="line" id="184021"><span class="nick" style="color:#6b8072"><a href="#184021" label="[18:40:21]">&lt;stikonas&gt;</a></span><span class="message">andydude: yes</span></div><div class="line" id="184031"><span class="nick" style="color:#6b8072"><a href="#184031" label="[18:40:31]">&lt;stikonas&gt;</a></span><span class="message">well, any binary is a bit overselling it</span></div><div class="line" id="184113"><span class="nick" style="color:#6b8072"><a href="#184113" label="[18:41:13]">&lt;stikonas&gt;</a></span><span class="message">right now I think what works is only something that is built to be position independent binary and also have just a single text section</span></div><div class="line" id="184134"><span class="nick" style="color:#6b8072"><a href="#184134" label="[18:41:34]">&lt;stikonas&gt;</a></span><span class="message">former needs paging to support non-position independent binaries</span></div><div class="line" id="184145"><span class="nick" style="color:#6b8072"><a href="#184145" label="[18:41:45]">&lt;stikonas&gt;</a></span><span class="message">latter needs some improvements to elf header parser</span></div><div class="line" id="184600"><span class="nick" style="color:#6b8072"><a href="#184600" label="[18:46:00]">&lt;stikonas&gt;</a></span><span class="message">so in practice I think now stage0-posix-amd64 binaries work (appart from kaem-optional-seed) and stuff built using mescc</span></div><div class="line" id="222021"><span class="nick" style="color:#80b1d3"><a href="#222021" label="[22:20:21]">&lt;mihi&gt;</a></span><span class="message">andydude: welcome. If you want to bootstrap a language that is not yet bootstrapped (fpc, ada, haskell, ocaml, to name the elephants in the room), you can use any language for it that is bootstrappeable (c, java, python, perl, ...) Only for bootstrapping the low level stuff (c, binutils, linux) you'd need to use lower level languages. Not sure about lua and wren - try to build the from the system that</span></div><div class="line" id="222021"><span class="nick" style="color:#80b1d3"><a href="#222021" label="[22:20:21]">&lt;mihi&gt;</a></span><span class="message">live-bootstrap outputs (from tarballs where all generated files are removed), and if you succeed, they are bootstrappable.</span></div><div class="line" id="222317"><span class="nick" style="color:#80b1d3"><a href="#222317" label="[22:23:17]">&lt;mihi&gt;</a></span><span class="message">Having a quick look at Wren, its build scripts are generated using premake5. Which itself uses premake5 to build. There is a bootstrap.mak and a bootstrap.bat (each ~150 lines), though. If they are not autogenerated and they still work to bootstrap the build system, it can be used to build the generated files of Wren. While Wren uses an intermediate bytecode, at quick glance I did not find any &quot;precompiled&quot; files</span></div><div class="line" id="222317"><span class="nick" style="color:#80b1d3"><a href="#222317" label="[22:23:17]">&lt;mihi&gt;</a></span><span class="message">checked into source control. But that would be another thing to verify if you want to go that route.</span></div><div class="line" id="222523"><span class="nick" style="color:#80b1d3"><a href="#222523" label="[22:25:23]">&lt;mihi&gt;</a></span><span class="message">(for reference, I did the bootstrap of gnu autogen - a code generator used to generate gcc's Makefiles - and of guile's syntax-case implementation)</span></div><div class="line" id="222815"><span class="nick" style="color:#6b8072"><a href="#222815" label="[22:28:15]">&lt;stikonas&gt;</a></span><span class="message">yeah, those are both nice achievements</span></div><div class="line" id="222830"><span class="nick" style="color:#6b8072"><a href="#222830" label="[22:28:30]">&lt;stikonas&gt;</a></span><span class="message">even if they are not adopted by upstreams...</span></div><br /></div></body></html>