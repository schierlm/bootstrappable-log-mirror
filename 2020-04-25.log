<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-04-25.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="132738"><span class="nick" style="color:#8dd3c7"><a href="#132738" label="[13:27:38]">&lt;Profpatsch&gt;</a></span><span class="message">janneke: ohai</span></div><div class="line" id="132807"><span class="nick" style="color:#8dd3c7"><a href="#132807" label="[13:28:07]">&lt;Profpatsch&gt;</a></span><span class="message">I’m trying to compile mes on an x86-64 machine, and gcc doesn’t like the assembler</span></div><div class="line" id="132816"><span class="nick" style="color:#8dd3c7"><a href="#132816" label="[13:28:16]">&lt;Profpatsch&gt;</a></span><span class="message">/nix/store/1wb31gzrjw055xl6d3igzj1gnajzlwbk-gcc-wrapper-9.2.0/bin/gcc -c -D HAVE_CONFIG_H=1 -I ../lib -I include -I ../include -I ../include/linux/x86_64 -static -nostdinc -nostdlib -fno-builtin -static -g -o mini.o ../lib/linux/x86_64-mes-gcc/mini.c</span></div><div class="line" id="132818"><span class="nick" style="color:#8dd3c7"><a href="#132818" label="[13:28:18]">&lt;Profpatsch&gt;</a></span><span class="message">../lib/linux/x86_64-mes-gcc/mini.c: Assembler messages:</span></div><div class="line" id="132820"><span class="nick" style="color:#8dd3c7"><a href="#132820" label="[13:28:20]">&lt;Profpatsch&gt;</a></span><span class="message">../lib/linux/x86_64-mes-gcc/mini.c:31: Error: unsupported instruction `mov'</span></div><div class="line" id="134139"><span class="nick" style="color:#8dd3c7"><a href="#134139" label="[13:41:39]">&lt;Profpatsch&gt;</a></span><span class="message">This has a good description: <a rel="nofollow" href="https://stackoverflow.com/questions/18721713/unsupported-for-mov-gcc-inline-assembler">https://stackoverflow.com/questions/18721713/unsupported-for-mov-gcc-inline-assembler</a> </span></div><div class="line" id="134156"><span class="nick" style="color:#8dd3c7"><a href="#134156" label="[13:41:56]">&lt;Profpatsch&gt;</a></span><span class="message">It works if I cast int to uint64_t</span></div><div class="line" id="134158"><span class="nick" style="color:#8dd3c7"><a href="#134158" label="[13:41:58]">&lt;Profpatsch&gt;</a></span><span class="message">       : &quot;rm&quot; ((uint64_t)code)</span></div><div class="line" id="134205"><span class="nick" style="color:#8dd3c7"><a href="#134205" label="[13:42:05]">&lt;Profpatsch&gt;</a></span><span class="message">and        : &quot;rm&quot; ((uint64_t)filedes), &quot;rm&quot; (buffer), &quot;rm&quot; (size)</span></div><div class="line" id="134257"><span class="nick" style="color:#8dd3c7"><a href="#134257" label="[13:42:57]">&lt;Profpatsch&gt;</a></span><span class="message">whoo, so compilation works, onto linking errors</span></div><div class="line" id="134418"><span class="nick" style="color:#2e2a4a"><a href="#134418" label="[13:44:18]">&lt;rain1&gt;</a></span><span class="message">hi</span></div><div class="line" id="134922"><span class="nick" style="color:#8dd3c7"><a href="#134922" label="[13:49:22]">&lt;Profpatsch&gt;</a></span><span class="message">whoo, it compiles mescc and it’s immediately segfaulting. Maybe I should turn off all hardening flags for now.</span></div><div class="line" id="141139"><span class="nick" style="color:#8dd3c7"><a href="#141139" label="[14:11:39]">&lt;Profpatsch&gt;</a></span><span class="message">Hmmmm</span></div><div class="line" id="141141"><span class="nick" style="color:#8dd3c7"><a href="#141141" label="[14:11:41]">&lt;Profpatsch&gt;</a></span><span class="message">mes-0.22/gcc-lib]$ ../pre-inst-env mescc -m 64 -c -D HAVE_CONFIG_H=1 -I ../lib -I include -I ../include -I ../include/linux/x86_64 -static -nostdinc -nostdlib -fno-builtin -o crt1.o ../lib/linux/x86_64-mes-mescc/crt1.c</span></div><div class="line" id="141143"><span class="nick" style="color:#8dd3c7"><a href="#141143" label="[14:11:43]">&lt;Profpatsch&gt;</a></span><span class="message">&lt;stdin&gt;:1: not found: &quot;mes/lib-mini.h&quot;</span></div><div class="line" id="141145"><span class="nick" style="color:#8dd3c7"><a href="#141145" label="[14:11:45]">&lt;Profpatsch&gt;</a></span><span class="message">error:expr-&gt;register: not supported: :(#f)</span></div><div class="line" id="141234"><span class="nick" style="color:#8dd3c7"><a href="#141234" label="[14:12:34]">&lt;Profpatsch&gt;</a></span><span class="message">$ ls ../include/mes</span></div><div class="line" id="141236"><span class="nick" style="color:#8dd3c7"><a href="#141236" label="[14:12:36]">&lt;Profpatsch&gt;</a></span><span class="message">builtins.h  config.h  constants.h  lib.h  lib-mini.h  macros.h  mes.h</span></div><div class="line" id="141239"><span class="nick" style="color:#8dd3c7"><a href="#141239" label="[14:12:39]">&lt;Profpatsch&gt;</a></span><span class="message">Not sure what’s going on here</span></div><div class="line" id="141305"><span class="nick" style="color:#8dd3c7"><a href="#141305" label="[14:13:05]">&lt;Profpatsch&gt;</a></span><span class="message">janneke: ^ If you have any pointers, that would be great</span></div><div class="line" id="141631"><span class="nick" style="color:#8dd3c7"><a href="#141631" label="[14:16:31]">&lt;Profpatsch&gt;</a></span><span class="message">I’m assuming the header that is not found make a function return #f and that is passed down to expr-&gt;register, which crashes on the pattern match</span></div><div class="line" id="142801"><span class="nick" style="color:#8dd3c7"><a href="#142801" label="[14:28:01]">&lt;Profpatsch&gt;</a></span><span class="message">hmhm, it doesn’t look like mescc is even trying to look at the include paths:</span></div><div class="line" id="142803"><span class="nick" style="color:#8dd3c7"><a href="#142803" label="[14:28:03]">&lt;Profpatsch&gt;</a></span><span class="message">parsing: input</span></div><div class="line" id="142805"><span class="nick" style="color:#8dd3c7"><a href="#142805" label="[14:28:05]">&lt;Profpatsch&gt;</a></span><span class="message">[pid 13687] access(&quot;./mes/lib-mini.h&quot;, F_OK) = -1 ENOENT (No such file or directory)</span></div><div class="line" id="142807"><span class="nick" style="color:#8dd3c7"><a href="#142807" label="[14:28:07]">&lt;Profpatsch&gt;</a></span><span class="message">[pid 13687] access(&quot;./mes/lib-mini.h&quot;, F_OK) = -1 ENOENT (No such file or directory)</span></div><div class="line" id="142809"><span class="nick" style="color:#8dd3c7"><a href="#142809" label="[14:28:09]">&lt;Profpatsch&gt;</a></span><span class="message">&lt;stdin&gt;:1: not found: &quot;mes/lib-mini.h&quot;</span></div><div class="line" id="144236"><span class="nick">***</span><span class="message notice">stikonas_ is now known as stikonas</span></div><div class="line" id="180737"><span class="nick" style="color:#6b8072"><a href="#180737" label="[18:07:37]">&lt;janneke&gt;</a></span><span class="message">Profpatsch: o/</span></div><div class="line" id="180828"><span class="nick" style="color:#80b1d3"><a href="#180828" label="[18:08:28]">*</a></span><span class="message">janneke reads</span></div><div class="line" id="181006"><span class="nick" style="color:#6b8072"><a href="#181006" label="[18:10:06]">&lt;janneke&gt;</a></span><span class="message">Profpatsch: that's a lot of hacking already!</span></div><div class="line" id="181649"><span class="nick" style="color:#6b8072"><a href="#181649" label="[18:16:49]">&lt;janneke&gt;</a></span><span class="message">Profpatsch: xwvvvxw has been looking at packaging mes for nix; that could be a helpful pointer?</span></div><div class="line" id="181712"><span class="nick" style="color:#6b8072"><a href="#181712" label="[18:17:12]">&lt;janneke&gt;</a></span><span class="message">=&gt; <a rel="nofollow" href="https://github.com/xwvvvvwx/nixpkgs/tree/mescc">https://github.com/xwvvvvwx/nixpkgs/tree/mescc</a> </span></div><div class="line" id="181929"><span class="nick" style="color:#6b8072"><a href="#181929" label="[18:19:29]">&lt;janneke&gt;</a></span><span class="message">that mes/lib-mini.h include error above looks strange</span></div><div class="line" id="182511"><span class="nick" style="color:#8dd3c7"><a href="#182511" label="[18:25:11]">&lt;Profpatsch&gt;</a></span><span class="message">Ah, I’m just trying to build it with a normal gcc toolchain at the moment, so all default configure/make/install</span></div><div class="line" id="182530"><span class="nick" style="color:#8dd3c7"><a href="#182530" label="[18:25:30]">&lt;Profpatsch&gt;</a></span><span class="message">And maybe later make sure it’s really bootstrapped from a minimal distribution.</span></div><div class="line" id="182617"><span class="nick" style="color:#8dd3c7"><a href="#182617" label="[18:26:17]">&lt;Profpatsch&gt;</a></span><span class="message">janneke: where is the include logic defined? Somewhere in mescc.scm?</span></div><div class="line" id="182628"><span class="nick" style="color:#6b8072"><a href="#182628" label="[18:26:28]">&lt;janneke&gt;</a></span><span class="message">Yes, first a regular build would be best thing to do</span></div><div class="line" id="182827"><span class="nick" style="color:#6b8072"><a href="#182827" label="[18:28:27]">&lt;janneke&gt;</a></span><span class="message">yes, in module/mescc/mescc.scm and module/mescc/preprocess.scm</span></div><div class="line" id="183140"><span class="nick" style="color:#6b8072"><a href="#183140" label="[18:31:40]">&lt;janneke&gt;</a></span><span class="message">Profpatsch: this: &quot;mes-0.22/gcc-lib]$ ../pre-inst-env mescc&quot; is not going to work</span></div><div class="line" id="183159"><span class="nick" style="color:#6b8072"><a href="#183159" label="[18:31:59]">&lt;janneke&gt;</a></span><span class="message">gcc-lib/crt1.o is compiled by gcc:</span></div><div class="line" id="183224"><span class="nick" style="color:#6b8072"><a href="#183224" label="[18:32:24]">&lt;janneke&gt;</a></span><span class="message">/gnu/store/s5ljhv95c2zka3ry6qnyjq349g7xhlw8-profile/bin/gcc -c -D HAVE_CONFIG_H=1 -I ../lib -I include -I ../include -I ../include/linux/x86_64 -static -nostdinc -nostdlib -fno-builtin -static -g -o crt1.o ../lib/linux/x86_64-mes-gcc/crt1.c</span></div><div class="line" id="183241"><span class="nick" style="color:#6b8072"><a href="#183241" label="[18:32:41]">&lt;janneke&gt;</a></span><span class="message">and mescc-lib/crt1.o by mescc:</span></div><div class="line" id="183247"><span class="nick" style="color:#6b8072"><a href="#183247" label="[18:32:47]">&lt;janneke&gt;</a></span><span class="message">/gnu/store/s5ljhv95c2zka3ry6qnyjq349g7xhlw8-profile/bin/gcc -c -D HAVE_CONFIG_H=1 -I ../lib -I include -I ../include -I ../include/linux/x86_64 -static -nostdinc -nostdlib -fno-builtin -static -g -o crt1.o ../lib/linux/x86_64-mes-gcc/crt1.c</span></div><div class="line" id="183254"><span class="nick" style="color:#6b8072"><a href="#183254" label="[18:32:54]">&lt;janneke&gt;</a></span><span class="message">at least, that's the idea</span></div><div class="line" id="183346"><span class="nick" style="color:#8dd3c7"><a href="#183346" label="[18:33:46]">&lt;Profpatsch&gt;</a></span><span class="message">I just ran the default `make`, so it plugged in the wrong compiler and it should be compiled by gcc instead of mescc?</span></div><div class="line" id="183451"><span class="nick" style="color:#80b1d3"><a href="#183451" label="[18:34:51]">*</a></span><span class="message">Profpatsch hasn’t actually looked at the boostrap chain yet, was just hoping for the make to work magically</span></div><div class="line" id="183526"><span class="nick" style="color:#6b8072"><a href="#183526" label="[18:35:26]">&lt;janneke&gt;</a></span><span class="message">yes, it looks like that</span></div><div class="line" id="183604"><span class="nick" style="color:#6b8072"><a href="#183604" label="[18:36:04]">&lt;janneke&gt;</a></span><span class="message">it /should/ work magically...</span></div><div class="line" id="183622"><span class="nick" style="color:#8dd3c7"><a href="#183622" label="[18:36:22]">&lt;Profpatsch&gt;</a></span><span class="message">The nix configure phase does some magic setup, I’ll try stripping that out.</span></div><div class="line" id="183742"><span class="nick" style="color:#8dd3c7"><a href="#183742" label="[18:37:42]">&lt;Profpatsch&gt;</a></span><span class="message">Ah, the configure.sh sets paths depending on cwd, that might not be what it expects.</span></div><div class="line" id="183937"><span class="nick" style="color:#6b8072"><a href="#183937" label="[18:39:37]">&lt;janneke&gt;</a></span><span class="message">oh wait, try: ./configure</span></div><div class="line" id="183956"><span class="nick" style="color:#6b8072"><a href="#183956" label="[18:39:56]">&lt;janneke&gt;</a></span><span class="message">you need guile, but configure.sh is strictly for a full bootstrap</span></div><div class="line" id="184207"><span class="nick" style="color:#80b1d3"><a href="#184207" label="[18:42:07]">*</a></span><span class="message">janneke tries ./configure.sh for fun</span></div><div class="line" id="185011"><span class="nick" style="color:#6b8072"><a href="#185011" label="[18:50:11]">&lt;janneke&gt;</a></span><span class="message">Profpatsch: i've put up a build log here: <a rel="nofollow" href="https://lilypond.org/janneke/mes-0.22.log">https://lilypond.org/janneke/mes-0.22.log</a> </span></div><div class="line" id="185100"><span class="nick" style="color:#6b8072"><a href="#185100" label="[18:51:00]">&lt;janneke&gt;</a></span><span class="message">Hmm, ./configure.sh does not work for me in a regular build; looks real silly, though: @CPPFLAGS@ does not get substituted :-(</span></div><div class="line" id="185325"><span class="nick" style="color:#8dd3c7"><a href="#185325" label="[18:53:25]">&lt;Profpatsch&gt;</a></span><span class="message">janneke: Ah, that could be the problem.</span></div><div class="line" id="185331"><span class="nick" style="color:#8dd3c7"><a href="#185331" label="[18:53:31]">&lt;Profpatsch&gt;</a></span><span class="message">janneke: yes, I saw that as well.</span></div><div class="line" id="185406"><span class="nick" style="color:#8dd3c7"><a href="#185406" label="[18:54:06]">&lt;Profpatsch&gt;</a></span><span class="message">I’ll try with ./configure for now and maybe later I can remove the dependency on make.</span></div><div class="line" id="185501"><span class="nick" style="color:#8dd3c7"><a href="#185501" label="[18:55:01]">&lt;Profpatsch&gt;</a></span><span class="message">But mescc-tools already depends on configure/make, so I don’t know how that is intended to look.</span></div><div class="line" id="185650"><span class="nick" style="color:#8dd3c7"><a href="#185650" label="[18:56:50]">&lt;Profpatsch&gt;</a></span><span class="message">guile depends on GCC already, so that’s a rather big dependency, I haven’t yet understood that part of the bootstrap</span></div><div class="line" id="185845"><span class="nick" style="color:#6b8072"><a href="#185845" label="[18:58:45]">&lt;janneke&gt;</a></span><span class="message">Profpatsch: yes, we have been applying some cheats that we intend to remove later</span></div><div class="line" id="185911"><span class="nick" style="color:#8dd3c7"><a href="#185911" label="[18:59:11]">&lt;Profpatsch&gt;</a></span><span class="message">Ah, nice.</span></div><div class="line" id="185931"><span class="nick" style="color:#6b8072"><a href="#185931" label="[18:59:31]">&lt;janneke&gt;</a></span><span class="message">currently, mescc-tools, mes and guile are added to the guix bootstrap binaries</span></div><div class="line" id="185941"><span class="nick" style="color:#6b8072"><a href="#185941" label="[18:59:41]">&lt;janneke&gt;</a></span><span class="message">just, the gcc-compiled versions</span></div><div class="line" id="190020"><span class="nick" style="color:#6b8072"><a href="#190020" label="[19:00:20]">&lt;janneke&gt;</a></span><span class="message">and: gcc, binutils, glibc have been removed</span></div><div class="line" id="190111"><span class="nick" style="color:#8dd3c7"><a href="#190111" label="[19:01:11]">&lt;Profpatsch&gt;</a></span><span class="message">But how would you break the cycle? Or does it make a difference from a theoretical point that the binary is guile compiled with gcc rather than gcc compiled with gcc?</span></div><div class="line" id="190139"><span class="nick" style="color:#8dd3c7"><a href="#190139" label="[19:01:39]">&lt;Profpatsch&gt;</a></span><span class="message">Or is it irrellevant because mes starts from a very small blob anyway?</span></div><div class="line" id="190147"><span class="nick" style="color:#6b8072"><a href="#190147" label="[19:01:47]">&lt;janneke&gt;</a></span><span class="message">right, no...</span></div><div class="line" id="190150"><span class="nick" style="color:#6b8072"><a href="#190150" label="[19:01:50]">&lt;janneke&gt;</a></span><span class="message">a next, in-between step is to remove the mescc-tools and mes binaries from the bootstrap</span></div><div class="line" id="190231"><span class="nick" style="color:#6b8072"><a href="#190231" label="[19:02:31]">&lt;janneke&gt;</a></span><span class="message">that needs some work, but they can be bootstrapped from stage0's hex0</span></div><div class="line" id="190249"><span class="nick" style="color:#6b8072"><a href="#190249" label="[19:02:49]">&lt;janneke&gt;</a></span><span class="message">that leaves &quot;guile&quot;...</span></div><div class="line" id="190329"><span class="nick" style="color:#8dd3c7"><a href="#190329" label="[19:03:29]">&lt;Profpatsch&gt;</a></span><span class="message">That’s kind of a big one, because e.g. byacc and a C parser.</span></div><div class="line" id="190346"><span class="nick" style="color:#6b8072"><a href="#190346" label="[19:03:46]">&lt;janneke&gt;</a></span><span class="message">yes...of course, in guix we use guile as a driver; so i would like to avoid counting guile in that role (for now)</span></div><div class="line" id="190425"><span class="nick" style="color:#6b8072"><a href="#190425" label="[19:04:25]">&lt;janneke&gt;</a></span><span class="message">we injected a dependency on guile that we intend to remove by using Mes instead of guile</span></div><div class="line" id="190429"><span class="nick" style="color:#8dd3c7"><a href="#190429" label="[19:04:29]">&lt;Profpatsch&gt;</a></span><span class="message">I’m not partial to any runtime, nix itself doesn’t care.</span></div><div class="line" id="190441"><span class="nick" style="color:#6b8072"><a href="#190441" label="[19:04:41]">&lt;janneke&gt;</a></span><span class="message">yes...</span></div><div class="line" id="190451"><span class="nick" style="color:#8dd3c7"><a href="#190451" label="[19:04:51]">&lt;Profpatsch&gt;</a></span><span class="message">But mes itself is built with guile again, right?</span></div><div class="line" id="190515"><span class="nick" style="color:#6b8072"><a href="#190515" label="[19:05:15]">&lt;janneke&gt;</a></span><span class="message">no, we build mes using m2-planet then, really from source</span></div><div class="line" id="190536"><span class="nick" style="color:#8dd3c7"><a href="#190536" label="[19:05:36]">&lt;Profpatsch&gt;</a></span><span class="message">Ah, that’s where m2-planet comes in. That makes sense, thanks.</span></div><div class="line" id="190547"><span class="nick" style="color:#6b8072"><a href="#190547" label="[19:05:47]">&lt;janneke&gt;</a></span><span class="message">to reach that stage is still a couple of month's work</span></div><div class="line" id="190659"><span class="nick" style="color:#8dd3c7"><a href="#190659" label="[19:06:59]">&lt;Profpatsch&gt;</a></span><span class="message">So stage0 -&gt; m2-planet -&gt; mes -&gt; tinycc -&gt; {make|guile|gcc} -&gt; guix</span></div><div class="line" id="190711"><span class="nick" style="color:#6b8072"><a href="#190711" label="[19:07:11]">&lt;janneke&gt;</a></span><span class="message">yes!</span></div><div class="line" id="190733"><span class="nick" style="color:#8dd3c7"><a href="#190733" label="[19:07:33]">&lt;Profpatsch&gt;</a></span><span class="message">and we can replace guix by nix and it should work just the same.</span></div><div class="line" id="190802"><span class="nick" style="color:#6b8072"><a href="#190802" label="[19:08:02]">&lt;janneke&gt;</a></span><span class="message">fossy here has been working to implement the &quot;guix&quot; bootstrap without guile, using shell scripts (or even stage0's kaem?) as a driver</span></div><div class="line" id="190803"><span class="nick" style="color:#8dd3c7"><a href="#190803" label="[19:08:03]">&lt;Profpatsch&gt;</a></span><span class="message">you could even use both package managers and compare results if you are very paranoid.</span></div><div class="line" id="190814"><span class="nick" style="color:#6b8072"><a href="#190814" label="[19:08:14]">&lt;janneke&gt;</a></span><span class="message">yes!</span></div><div class="line" id="190842"><span class="nick" style="color:#8dd3c7"><a href="#190842" label="[19:08:42]">&lt;Profpatsch&gt;</a></span><span class="message">I’d like bash to be replaced by something lighter, e.g. dash</span></div><div class="line" id="190845"><span class="nick" style="color:#6b8072"><a href="#190845" label="[19:08:45]">&lt;janneke&gt;</a></span><span class="message">so what we did, was to build a cross-distro bit-for-bit reproducible mes</span></div><div class="line" id="190912"><span class="nick" style="color:#6d2462"><a href="#190912" label="[19:09:12]">&lt;OriansJ&gt;</a></span><span class="message">also the stages in stage0 also can be done on bare metal to eliminate all other software from the TCB</span></div><div class="line" id="190914"><span class="nick" style="color:#6b8072"><a href="#190914" label="[19:09:14]">&lt;janneke&gt;</a></span><span class="message">sure</span></div><div class="line" id="190932"><span class="nick" style="color:#6b8072"><a href="#190932" label="[19:09:32]">&lt;janneke&gt;</a></span><span class="message">we have been working to add &quot;gash&quot; a shell in guile</span></div><div class="line" id="190940"><span class="nick" style="color:#6b8072"><a href="#190940" label="[19:09:40]">&lt;janneke&gt;</a></span><span class="message">that should run on mes, later</span></div><div class="line" id="190958"><span class="nick" style="color:#6d2462"><a href="#190958" label="[19:09:58]">&lt;OriansJ&gt;</a></span><span class="message">and yes fossy is using kaem as it is the most minimal shell possible and was written in 737bytes</span></div><div class="line" id="191108"><span class="nick" style="color:#6d2462"><a href="#191108" label="[19:11:08]">&lt;OriansJ&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds/blob/master/kaem-optional-seed.hex0">https://github.com/oriansj/bootstrap-seeds/blob/master/kaem-optional-seed.hex0</a> </span></div><div class="line" id="191126"><span class="nick" style="color:#8dd3c7"><a href="#191126" label="[19:11:26]">&lt;Profpatsch&gt;</a></span><span class="message">So you would bootstrap it without a kernel, just on a plain CPU with a chunk of memory?</span></div><div class="line" id="191202"><span class="nick" style="color:#6d2462"><a href="#191202" label="[19:12:02]">&lt;OriansJ&gt;</a></span><span class="message">Profpatsch: everything in stage0 already has a bare metal version</span></div><div class="line" id="191241"><span class="nick" style="color:#8dd3c7"><a href="#191241" label="[19:12:41]">&lt;Profpatsch&gt;</a></span><span class="message">Now I’m thinking of a caste of priests, bringing the source code to the processor altar to produce the holy reproducible reference binary :)</span></div><div class="line" id="191244"><span class="nick" style="color:#6d2462"><a href="#191244" label="[19:12:44]">&lt;OriansJ&gt;</a></span><span class="message">using an ancient CPU architecture, which removes the need for firmware, microcode or even BIOS</span></div><div class="line" id="191332"><span class="nick" style="color:#8dd3c7"><a href="#191332" label="[19:13:32]">&lt;Profpatsch&gt;</a></span><span class="message">“From which the world was bootstrapped and the singularity can reboot”</span></div><div class="line" id="191337"><span class="nick" style="color:#6d2462"><a href="#191337" label="[19:13:37]">&lt;OriansJ&gt;</a></span><span class="message">and every port of stage0 can cross-verify all the stages for all of the other ports as well using mescc-tools</span></div><div class="line" id="191403"><span class="nick" style="color:#6b8072"><a href="#191403" label="[19:14:03]">&lt;janneke&gt;</a></span><span class="message">hehe</span></div><div class="line" id="191427"><span class="nick" style="color:#6d2462"><a href="#191427" label="[19:14:27]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: I think we forgot a minor piece in our M3 plan</span></div><div class="line" id="191514"><span class="nick" style="color:#6d2462"><a href="#191514" label="[19:15:14]">&lt;OriansJ&gt;</a></span><span class="message">Profpatsch: you might enjoy <a rel="nofollow" href="https://github.com/oriansj/talk-notes/blob/master/Current%20bootstrap%20map.pdf">https://github.com/oriansj/talk-notes/blob/master/Current%20bootstrap%20map.pdf</a> </span></div><div class="line" id="191629"><span class="nick" style="color:#6d2462"><a href="#191629" label="[19:16:29]">&lt;OriansJ&gt;</a></span><span class="message">and some in depth notes: <a rel="nofollow" href="https://github.com/oriansj/talk-notes/blob/master/bootstrappable.org">https://github.com/oriansj/talk-notes/blob/master/bootstrappable.org</a>  (looks best in emacs org-mode or the vim equivalent)</span></div><div class="line" id="192010"><span class="nick" style="color:#6b8072"><a href="#192010" label="[19:20:10]">&lt;janneke&gt;</a></span><span class="message">M3... /me has missed something...</span></div><div class="line" id="192254"><span class="nick" style="color:#6d2462"><a href="#192254" label="[19:22:54]">&lt;OriansJ&gt;</a></span><span class="message">janneke: M3-Star M3-Comet (for converting TCC into something we can directly compile with M2-Planet) but we probably need to add a M3-Meteoroid to provide a drop in replacement for ld as M3-Comet is supposed to be a drop in replacement for as and M3-Star is supposed to be TCC converted to only output assembly to simplify future porting work.</span></div><div class="line" id="192345"><span class="nick" style="color:#6d2462"><a href="#192345" label="[19:23:45]">&lt;OriansJ&gt;</a></span><span class="message">That way we can use the standard binutils ld and as during development to save time chasing bugs of our own making</span></div><div class="line" id="192707"><span class="nick" style="color:#6d2462"><a href="#192707" label="[19:27:07]">&lt;OriansJ&gt;</a></span><span class="message">plus when we get it solid, it provides MesCC a much better assembly language to work with</span></div><div class="line" id="192745"><span class="nick" style="color:#6d2462"><a href="#192745" label="[19:27:45]">&lt;OriansJ&gt;</a></span><span class="message">with 2 different possible back-ends for generation depending upon if bootstrapping or just standard building.</span></div><div class="line" id="192752"><span class="nick" style="color:#6b8072"><a href="#192752" label="[19:27:52]">&lt;janneke&gt;</a></span><span class="message">Oh, you are adopting/forking TCC, really?</span></div><div class="line" id="192808"><span class="nick" style="color:#6b8072"><a href="#192808" label="[19:28:08]">&lt;janneke&gt;</a></span><span class="message">that's an interesting move</span></div><div class="line" id="192843"><span class="nick" style="color:#6b8072"><a href="#192843" label="[19:28:43]">&lt;janneke&gt;</a></span><span class="message">i really like to have more than one bootstrap path anyway; we need to figure out what works</span></div><div class="line" id="192903"><span class="nick" style="color:#6b8072"><a href="#192903" label="[19:29:03]">&lt;janneke&gt;</a></span><span class="message">and there are various perspectives to &quot;works&quot;</span></div><div class="line" id="193014"><span class="nick" style="color:#6d2462"><a href="#193014" label="[19:30:14]">&lt;OriansJ&gt;</a></span><span class="message">mostly, I need a break from trying to figure out how to write syntax-case in C for mes-m2</span></div><div class="line" id="193219"><span class="nick" style="color:#6b8072"><a href="#193219" label="[19:32:19]">&lt;janneke&gt;</a></span><span class="message">syntax-case in C  .. that would be quite a feat</span></div><div class="line" id="193255"><span class="nick" style="color:#6b8072"><a href="#193255" label="[19:32:55]">&lt;janneke&gt;</a></span><span class="message">what a ridiculous idea!  *love it*</span></div><div class="line" id="193325"><span class="nick" style="color:#6d2462"><a href="#193325" label="[19:33:25]">&lt;OriansJ&gt;</a></span><span class="message">janneke: well it just isn't possible to implement it in scheme without it</span></div><div class="line" id="193847"><span class="nick" style="color:#6d2462"><a href="#193847" label="[19:38:47]">&lt;OriansJ&gt;</a></span><span class="message">I might be a terrible programmer but I just can't find a different solution to that problem. (Aside from asking scheme programmers to give up macros)</span></div><div class="line" id="194015"><span class="nick" style="color:#6b8072"><a href="#194015" label="[19:40:15]">&lt;janneke&gt;</a></span><span class="message">I haven't succeeded in that either</span></div><div class="line" id="194051"><span class="nick" style="color:#6b8072"><a href="#194051" label="[19:40:51]">&lt;janneke&gt;</a></span><span class="message">I have only a mostly (cough) complient syntax-rules using define macro</span></div><div class="line" id="194119"><span class="nick" style="color:#6b8072"><a href="#194119" label="[19:41:19]">&lt;janneke&gt;</a></span><span class="message">and I spent a couple of weeks trying to bootstrap Adre van Tonder's syntax-case, which presumably should run on a correct syntax-rules</span></div><div class="line" id="194144"><span class="nick" style="color:#6b8072"><a href="#194144" label="[19:41:44]">&lt;janneke&gt;</a></span><span class="message">i could not get that to work, and i don't dare to think about performance</span></div><div class="line" id="194154"><span class="nick" style="color:#6d2462"><a href="#194154" label="[19:41:54]">&lt;OriansJ&gt;</a></span><span class="message">now simple macros that one would do in define-macro</span></div><div class="line" id="194303"><span class="nick" style="color:#6d2462"><a href="#194303" label="[19:43:03]">&lt;OriansJ&gt;</a></span><span class="message">which mes-m2 has but it might not even be possible, which raises the question of how the heck did they manage to bootstrap it in the first place</span></div><div class="line" id="194659"><span class="nick" style="color:#6b8072"><a href="#194659" label="[19:46:59]">&lt;janneke&gt;</a></span><span class="message">yes...possibly using Andre van Tonder's all source code way once and burn all bridges after that?</span></div><div class="line" id="194739"><span class="nick" style="color:#6d2462"><a href="#194739" label="[19:47:39]">&lt;OriansJ&gt;</a></span><span class="message">which would be a great way to hide a backdoor</span></div><div class="line" id="194828"><span class="nick" style="color:#6d2462"><a href="#194828" label="[19:48:28]">&lt;OriansJ&gt;</a></span><span class="message">a big complex block that is virtually impossible to understand and about as hard to implement</span></div><div class="line" id="194837"><span class="nick" style="color:#6d2462"><a href="#194837" label="[19:48:37]">&lt;OriansJ&gt;</a></span><span class="message">So no one does it</span></div><div class="line" id="211546"><span class="nick" style="color:#6d2462"><a href="#211546" label="[21:15:46]">&lt;OriansJ&gt;</a></span><span class="message">I'm just glad information about ELF relocatable object files is readily available and most of what is needed to be known were covered when we did the hex2 ELF headers</span></div><div class="line" id="214643"><span class="nick" style="color:#6d2462"><a href="#214643" label="[21:46:43]">&lt;OriansJ&gt;</a></span><span class="message">I however thought it was weird that ELF never supported a .source section it seems like an obvious GNU extension</span></div><div class="line" id="230126"><span class="nick" style="color:#6d2462"><a href="#230126" label="[23:01:26]">&lt;OriansJ&gt;</a></span><span class="message">now mind you it would be optional and the resulting binaries would be inflated by the size of the source code required to build them but it would solve the binary/source distribution issue forever</span></div><div class="line" id="230538"><span class="nick" style="color:#234e69"><a href="#230538" label="[23:05:38]">&lt;fossy&gt;</a></span><span class="message">rationale behind gcc-seed.</span></div><div class="line" id="230603"><span class="nick" style="color:#234e69"><a href="#230603" label="[23:06:03]">&lt;fossy&gt;</a></span><span class="message">guix is great and all, janneke has done super good work on the upper levels of the bootstrap</span></div><div class="line" id="230619"><span class="nick" style="color:#234e69"><a href="#230619" label="[23:06:19]">&lt;fossy&gt;</a></span><span class="message">guix is the best distribution for bootstrapping</span></div><div class="line" id="230636"><span class="nick" style="color:#234e69"><a href="#230636" label="[23:06:36]">&lt;fossy&gt;</a></span><span class="message">but there are some things a full fledged distribution cannot do.</span></div><div class="line" id="230655"><span class="nick" style="color:#234e69"><a href="#230655" label="[23:06:55]">&lt;fossy&gt;</a></span><span class="message">or it is very hard to do</span></div><div class="line" id="230702"><span class="nick" style="color:#234e69"><a href="#230702" label="[23:07:02]">&lt;fossy&gt;</a></span><span class="message">ie, everything from the one seed</span></div><div class="line" id="230759"><span class="nick" style="color:#234e69"><a href="#230759" label="[23:07:59]">&lt;fossy&gt;</a></span><span class="message">gcc-seed will be a scripted build of the full gcc/binutils/glibc triplet from the 357 byte seed</span></div><div class="line" id="231259"><span class="nick" style="color:#234e69"><a href="#231259" label="[23:12:59]">&lt;fossy&gt;</a></span><span class="message">with auxiliary tools to go from.there</span></div><div class="line" id="231304"><span class="nick" style="color:#234e69"><a href="#231304" label="[23:13:04]">&lt;fossy&gt;</a></span><span class="message">like bash coreutils et,</span></div><div class="line" id="232223"><span class="nick" style="color:#6c3d55"><a href="#232223" label="[23:22:23]">&lt;dddddd&gt;</a></span><span class="message">OriansJ, noted. I'll add it to my notes-to-digest-the-idea.</span></div><div class="line" id="232446"><span class="nick" style="color:#6c3d55"><a href="#232446" label="[23:24:46]">&lt;dddddd&gt;</a></span><span class="message">janneke, you can read about the M3 very early plan in the log of the 14th.</span></div><div class="line" id="232503"><span class="nick" style="color:#6b8072"><a href="#232503" label="[23:25:03]">&lt;janneke&gt;</a></span><span class="message">dddddd: thank you!</span></div><div class="line" id="232518"><span class="nick" style="color:#80b1d3"><a href="#232518" label="[23:25:18]">*</a></span><span class="message">janneke makes note</span></div><div class="line" id="232724"><span class="nick" style="color:#6b8072"><a href="#232724" label="[23:27:24]">&lt;janneke&gt;</a></span><span class="message">fossy: also, noted</span></div><div class="line" id="232815"><span class="nick" style="color:#6b8072"><a href="#232815" label="[23:28:15]">&lt;janneke&gt;</a></span><span class="message">truly bootstrapping from 357 bytes is what we set out to do</span></div><div class="line" id="232913"><span class="nick" style="color:#234e69"><a href="#232913" label="[23:29:13]">&lt;fossy&gt;</a></span><span class="message">yeah</span></div><div class="line" id="232922"><span class="nick" style="color:#d9d9d9"><a href="#232922" label="[23:29:22]">&lt;vagrantc&gt;</a></span><span class="message">would you be satisfied with 358 byte bootstrap?</span></div><div class="line" id="232936"><span class="nick" style="color:#234e69"><a href="#232936" label="[23:29:36]">&lt;fossy&gt;</a></span><span class="message">lol</span></div><div class="line" id="232947"><span class="nick" style="color:#d9d9d9"><a href="#232947" label="[23:29:47]">&lt;vagrantc&gt;</a></span><span class="message">i haven't been following closely ... what's the constellation of bootstrappiong looking like right now?</span></div><div class="line" id="232948"><span class="nick" style="color:#234e69"><a href="#232948" label="[23:29:48]">&lt;fossy&gt;</a></span><span class="message">if its readable and adds value sure</span></div><div class="line" id="232956"><span class="nick" style="color:#234e69"><a href="#232956" label="[23:29:56]">&lt;fossy&gt;</a></span><span class="message">vagrantc: well</span></div><div class="line" id="233001"><span class="nick" style="color:#234e69"><a href="#233001" label="[23:30:01]">&lt;fossy&gt;</a></span><span class="message">we have one missing piece</span></div><div class="line" id="233010"><span class="nick" style="color:#d9d9d9"><a href="#233010" label="[23:30:10]">&lt;vagrantc&gt;</a></span><span class="message">would like to inject a few slides about the state of things in a reproducible builds talk i'm giving</span></div><div class="line" id="233013"><span class="nick" style="color:#234e69"><a href="#233013" label="[23:30:13]">&lt;fossy&gt;</a></span><span class="message">that is, between M2-Planet and tinycc</span></div><div class="line" id="233041"><span class="nick" style="color:#234e69"><a href="#233041" label="[23:30:41]">&lt;fossy&gt;</a></span><span class="message">two paths: mes-m2 (scheme) or m3-* (modified tinycc)</span></div><div class="line" id="233046"><span class="nick" style="color:#d9d9d9"><a href="#233046" label="[23:30:46]">&lt;vagrantc&gt;</a></span><span class="message">i know where &quot;gnu mes&quot; is but i'm a little shaky on the lower level stuff</span></div><div class="line" id="233051"><span class="nick" style="color:#234e69"><a href="#233051" label="[23:30:51]">&lt;fossy&gt;</a></span><span class="message">guix is nearly at just guile for the bootstrap</span></div><div class="line" id="233103"><span class="nick" style="color:#234e69"><a href="#233103" label="[23:31:03]">&lt;fossy&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/talk-notes/blob/master/Current%20bootstrap%20map.pdf">https://github.com/oriansj/talk-notes/blob/master/Current%20bootstrap%20map.pdf</a> </span></div><div class="line" id="233138"><span class="nick" style="color:#234e69"><a href="#233138" label="[23:31:38]">&lt;fossy&gt;</a></span><span class="message">kaem has been expanded and can run fully scripted builds up to bash (not configure scripts tho)</span></div><div class="line" id="233246"><span class="nick" style="color:#234e69"><a href="#233246" label="[23:32:46]">&lt;fossy&gt;</a></span><span class="message">oh. We have aarch64 now</span></div><div class="line" id="233256"><span class="nick" style="color:#d9d9d9"><a href="#233256" label="[23:32:56]">&lt;vagrantc&gt;</a></span><span class="message">nice!</span></div><div class="line" id="233408"><span class="nick" style="color:#d9d9d9"><a href="#233408" label="[23:34:08]">&lt;vagrantc&gt;</a></span><span class="message">think i've looked at that map before ... though maybe a smaller number of red lines :)</span></div><div class="line" id="233457"><span class="nick" style="color:#d9d9d9"><a href="#233457" label="[23:34:57]">&lt;vagrantc&gt;</a></span><span class="message">the arrows seem backwards ... but i guess it's a dependency graph rather than the origin of the bootstrap graph</span></div><div class="line" id="233531"><span class="nick" style="color:#bc80bd"><a href="#233531" label="[23:35:31]">&lt;civodul&gt;</a></span><span class="message">fossy: dunno if this was mentioned before, but check janneke's <a rel="nofollow" href="https://fosdem.org/2020/schedule/event/gnumes/">https://fosdem.org/2020/schedule/event/gnumes/</a>  for what's cooking in Guix!</span></div><div class="line" id="233543"><span class="nick" style="color:#bc80bd"><a href="#233543" label="[23:35:43]">&lt;civodul&gt;</a></span><span class="message">to be merged in master RSN</span></div><div class="line" id="234212"><span class="nick" style="color:#6b8072"><a href="#234212" label="[23:42:12]">&lt;janneke&gt;</a></span><span class="message">vagrantc: 358 bytes, that's out of the question!</span></div><div class="line" id="234307"><span class="nick" style="color:#80b1d3"><a href="#234307" label="[23:43:07]">*</a></span><span class="message">vagrantc thanks janneke for playing into the trap</span></div><div class="line" id="234337"><span class="nick" style="color:#6b8072"><a href="#234337" label="[23:43:37]">&lt;janneke&gt;</a></span><span class="message">well, vagrantc we have to draw the line somewhere!</span></div><div class="line" id="234429"><span class="nick" style="color:#6b8072"><a href="#234429" label="[23:44:29]">&lt;janneke&gt;</a></span><span class="message">civodul: \o/</span></div><div class="line" id="234448"><span class="nick" style="color:#8dd3c7"><a href="#234448" label="[23:44:48]">&lt;Profpatsch&gt;</a></span><span class="message">if it’s arbitrary, at least make it arbitrary arbitrary</span></div><div class="line" id="234509"><span class="nick" style="color:#6b8072"><a href="#234509" label="[23:45:09]">&lt;janneke&gt;</a></span><span class="message">fossy: i guess these big distributions will have to play catch-up rsn ;-)</span></div><div class="line" id="234527"><span class="nick" style="color:#8dd3c7"><a href="#234527" label="[23:45:27]">&lt;Profpatsch&gt;</a></span><span class="message">People are asking: what about reflections on trusting trust, why not just compile a gcc twice from binary blob and compare the outputs?</span></div><div class="line" id="234601"><span class="nick" style="color:#6b8072"><a href="#234601" label="[23:46:01]">&lt;janneke&gt;</a></span><span class="message">Profpatsch: it all starts with asking questions...</span></div><div class="line" id="234616"><span class="nick" style="color:#234e69"><a href="#234616" label="[23:46:16]">&lt;fossy&gt;</a></span><span class="message">Profpatsch: where did the binary blob come from?</span></div><div class="line" id="234716"><span class="nick" style="color:#d9d9d9"><a href="#234716" label="[23:47:16]">&lt;vagrantc&gt;</a></span><span class="message">diverse double-compili</span></div><div class="line" id="234718"><span class="nick" style="color:#d9d9d9"><a href="#234718" label="[23:47:18]">&lt;vagrantc&gt;</a></span><span class="message">ng</span></div><div class="line" id="234732"><span class="nick" style="color:#8dd3c7"><a href="#234732" label="[23:47:32]">&lt;Profpatsch&gt;</a></span><span class="message">yeah, that’s the one</span></div><div class="line" id="234732"><span class="nick" style="color:#d9d9d9"><a href="#234732" label="[23:47:32]">&lt;vagrantc&gt;</a></span><span class="message">is (mostly) an answer to that question</span></div><div class="line" id="234752"><span class="nick" style="color:#d9d9d9"><a href="#234752" label="[23:47:52]">&lt;vagrantc&gt;</a></span><span class="message">and we've kind of sort of not-quite-right done that with GNU mes</span></div><div class="line" id="234837"><span class="nick" style="color:#d9d9d9"><a href="#234837" label="[23:48:37]">&lt;vagrantc&gt;</a></span><span class="message">actually, i suspect GNU Mes might fill the role described in david a wheeler's DDC papers</span></div><div class="line" id="234840"><span class="nick" style="color:#8dd3c7"><a href="#234840" label="[23:48:40]">&lt;Profpatsch&gt;</a></span><span class="message">But what does bootstrappable give that DDC does not?</span></div><div class="line" id="234906"><span class="nick" style="color:#d9d9d9"><a href="#234906" label="[23:49:06]">&lt;vagrantc&gt;</a></span><span class="message">you almost can't have one without the other</span></div><div class="line" id="234910"><span class="nick" style="color:#d9d9d9"><a href="#234910" label="[23:49:10]">&lt;vagrantc&gt;</a></span><span class="message">sort of</span></div><div class="line" id="234923"><span class="nick" style="color:#d9d9d9"><a href="#234923" label="[23:49:23]">&lt;vagrantc&gt;</a></span><span class="message">or at least, they're both stronger if you have both, obviously</span></div><div class="line" id="234926"><span class="nick" style="color:#8dd3c7"><a href="#234926" label="[23:49:26]">&lt;Profpatsch&gt;</a></span><span class="message">&gt;  The method requires a different compiler and the source code of the compiler-under-test.</span></div><div class="line" id="234928"><span class="nick" style="color:#8dd3c7"><a href="#234928" label="[23:49:28]">&lt;Profpatsch&gt;</a></span><span class="message">oh</span></div><div class="line" id="234934"><span class="nick" style="color:#d9d9d9"><a href="#234934" label="[23:49:34]">&lt;vagrantc&gt;</a></span><span class="message">same with reproducible builds</span></div><div class="line" id="234949"><span class="nick" style="color:#d9d9d9"><a href="#234949" label="[23:49:49]">&lt;vagrantc&gt;</a></span><span class="message">all of them add confidence to each other</span></div><div class="line" id="235027"><span class="nick" style="color:#d9d9d9"><a href="#235027" label="[23:50:27]">&lt;vagrantc&gt;</a></span><span class="message">you can always go a little lower down the stack for even greater levels of confidence, auditability, etc.</span></div><br /></div></body></html>