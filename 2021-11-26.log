<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-11-26.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="001145"><span class="nick" style="color:#389600"><a href="#001145" label="[00:11:45]">&lt;oriansj&gt;</a></span><span class="message">gbrlwck: well to replace current computing stacks with equal power would require billion dollar lithography machines. But 1 micrometer processes do appear to be available right now; which with refinement should enable 32/64 processors and enough RAM to build a trusted root and to power machines needed for more refined processes.</span></div><div class="line" id="003811"><span class="nick" style="color:#2e2a4a"><a href="#003811" label="[00:38:11]">&lt;pabs3&gt;</a></span><span class="message">Hagfish: people like bunnie might be good to partner with on the hardware side, he is already thinking about hardware trust and has done talks about hardware supply chain attacks</span></div><div class="line" id="003904"><span class="nick" style="color:#2e2a4a"><a href="#003904" label="[00:39:04]">&lt;pabs3&gt;</a></span><span class="message">he is pretty famous in the tech world too</span></div><div class="line" id="004528"><span class="nick" style="color:#6b8072"><a href="#004528" label="[00:45:28]">&lt;gbrlwck&gt;</a></span><span class="message">oriansj: this sounds interesting!  do you have any links/literature?</span></div><div class="line" id="005051"><span class="nick" style="color:#389600"><a href="#005051" label="[00:50:51]">&lt;oriansj&gt;</a></span><span class="message">gbrlwck: <a rel="nofollow" href="http://sam.zeloof.xyz/category/semiconductor/">http://sam.zeloof.xyz/category/semiconductor/</a>  <a rel="nofollow" href="https://libresilicon.com/">https://libresilicon.com/</a>  are the two big ones that I know of</span></div><div class="line" id="005544"><span class="nick" style="color:#389600"><a href="#005544" label="[00:55:44]">&lt;oriansj&gt;</a></span><span class="message">and I aam probably missing a bunch more</span></div><div class="line" id="024128"><span class="nick" style="color:#6b8072"><a href="#024128" label="[02:41:28]">&lt;gbrlwck&gt;</a></span><span class="message">looks promising, thanks!</span></div><div class="line" id="125600"><span class="nick">***</span><span class="message notice">smartin1 is now known as smartin</span></div><div class="line" id="125601"><span class="nick">***</span><span class="message notice">dongcarl2 is now known as dongcarl</span></div><div class="line" id="150006"><span class="nick" style="color:#80b1d3"><a href="#150006" label="[15:00:06]">&lt;riv&gt;</a></span><span class="message"> <a rel="nofollow" href="https://news.ycombinator.com/item?id=29348033">https://news.ycombinator.com/item?id=29348033</a>  anyone checked this out?</span></div><div class="line" id="150045"><span class="nick" style="color:#80b1d3"><a href="#150045" label="[15:00:45]">&lt;riv&gt;</a></span><span class="message">hm it boasts 4k lines, that's about the same as mine</span></div><div class="line" id="150107"><span class="nick" style="color:#80b1d3"><a href="#150107" label="[15:01:07]">&lt;riv&gt;</a></span><span class="message">oh not 4k lines, 4k binary? that's different to mine</span></div><div class="line" id="151315"><span class="nick" style="color:#6d2462"><a href="#151315" label="[15:13:15]">&lt;plantman&gt;</a></span><span class="message">Hi. I wrote a simplified (low dependancy) compiler, which is currently just does a source to source trans.</span></div><div class="line" id="151414"><span class="nick" style="color:#80b1d3"><a href="#151414" label="[15:14:14]">&lt;riv&gt;</a></span><span class="message">cool</span></div><div class="line" id="151423"><span class="nick" style="color:#80b1d3"><a href="#151423" label="[15:14:23]">&lt;riv&gt;</a></span><span class="message">what source target and host language</span></div><div class="line" id="151446"><span class="nick" style="color:#6d2462"><a href="#151446" label="[15:14:46]">&lt;plantman&gt;</a></span><span class="message">java to C#</span></div><div class="line" id="151551"><span class="nick" style="color:#80b1d3"><a href="#151551" label="[15:15:51]">&lt;riv&gt;</a></span><span class="message">wow</span></div><div class="line" id="151639"><span class="nick" style="color:#6d2462"><a href="#151639" label="[15:16:39]">&lt;plantman&gt;</a></span><span class="message">it covers a subset of java</span></div><div class="line" id="151733"><span class="nick" style="color:#6d2462"><a href="#151733" label="[15:17:33]">&lt;plantman&gt;</a></span><span class="message">changes &quot;import&quot; with &quot;using&quot;, changes &quot;boolean&quot; with &quot;bool&quot;</span></div><div class="line" id="151850"><span class="nick" style="color:#6d2462"><a href="#151850" label="[15:18:50]">&lt;plantman&gt;</a></span><span class="message">changes how classes specify extends and impliments</span></div><div class="line" id="153146"><span class="nick" style="color:#6d2462"><a href="#153146" label="[15:31:46]">&lt;plantman&gt;</a></span><span class="message">code that does the actual trans is about 1000 lines</span></div><div class="line" id="153311"><span class="nick" style="color:#6d2462"><a href="#153311" label="[15:33:11]">&lt;plantman&gt;</a></span><span class="message">changes &quot;final&quot; to &quot;const&quot;</span></div><div class="line" id="153340"><span class="nick" style="color:#6d2462"><a href="#153340" label="[15:33:40]">&lt;plantman&gt;</a></span><span class="message">changes an abscense of modifider to &quot;internal&quot;</span></div><div class="line" id="153428"><span class="nick" style="color:#234e69"><a href="#153428" label="[15:34:28]">&lt;stikonas&gt;</a></span><span class="message">well, java is much bigger language...</span></div><div class="line" id="153455"><span class="nick" style="color:#234e69"><a href="#153455" label="[15:34:55]">&lt;stikonas&gt;</a></span><span class="message">the whole M2_Planet's cc_core file that does C parsing and multiarch (knight, amd64, x86, risc-v, arm/arm64) compilation is about 2600 lines</span></div><div class="line" id="153816"><span class="nick" style="color:#6d2462"><a href="#153816" label="[15:38:16]">&lt;plantman&gt;</a></span><span class="message">that's nice and tight also</span></div><div class="line" id="154238"><span class="nick" style="color:#6d2462"><a href="#154238" label="[15:42:38]">&lt;plantman&gt;</a></span><span class="message">like how do you do that much stuff in 2600 lines?  wow</span></div><div class="line" id="154723"><span class="nick" style="color:#6b8072"><a href="#154723" label="[15:47:23]">&lt;gbrlwck&gt;</a></span><span class="message">did not check myself, but i guess the figure might be a bit higher than that?  but honestly: LOC is not the best measure for complexity/density.  the goal in stage0 (and such) is absolute minimalism and introspectability</span></div><div class="line" id="154940"><span class="nick" style="color:#6d2462"><a href="#154940" label="[15:49:40]">&lt;plantman&gt;</a></span><span class="message">yes, stage0 sounds amazing</span></div><div class="line" id="155000"><span class="nick" style="color:#6b8072"><a href="#155000" label="[15:50:00]">&lt;gbrlwck&gt;</a></span><span class="message">it is!</span></div><div class="line" id="155111"><span class="nick" style="color:#6d2462"><a href="#155111" label="[15:51:11]">&lt;plantman&gt;</a></span><span class="message">on stage0's savannah project site it shows that it is &quot;alpha&quot;, but it works?</span></div><div class="line" id="155135"><span class="nick" style="color:#6d2462"><a href="#155135" label="[15:51:35]">&lt;plantman&gt;</a></span><span class="message">All I'd like to know is, if it works currently.</span></div><div class="line" id="155218"><span class="nick" style="color:#6b8072"><a href="#155218" label="[15:52:18]">&lt;gbrlwck&gt;</a></span><span class="message">well, stage0-posix (main repo is oriansj's on github) works for some architectures</span></div><div class="line" id="155257"><span class="nick" style="color:#6b8072"><a href="#155257" label="[15:52:57]">&lt;gbrlwck&gt;</a></span><span class="message">so i've been able to bootstrap from /nothing/ up to GNU MES (on riscv64)</span></div><div class="line" id="155408"><span class="nick" style="color:#6d2462"><a href="#155408" label="[15:54:08]">&lt;plantman&gt;</a></span><span class="message">that's what we need :)</span></div><div class="line" id="155544"><span class="nick" style="color:#6d2462"><a href="#155544" label="[15:55:44]">&lt;plantman&gt;</a></span><span class="message">you have a riscv 64 board?</span></div><div class="line" id="155550"><span class="nick" style="color:#6b8072"><a href="#155550" label="[15:55:50]">&lt;gbrlwck&gt;</a></span><span class="message">then the answer to your question is: yes ;)</span></div><div class="line" id="155552"><span class="nick" style="color:#6b8072"><a href="#155552" label="[15:55:52]">&lt;gbrlwck&gt;</a></span><span class="message">i do</span></div><div class="line" id="155603"><span class="nick" style="color:#6b8072"><a href="#155603" label="[15:56:03]">&lt;gbrlwck&gt;</a></span><span class="message">it's a HiFive Unmatched</span></div><div class="line" id="155610"><span class="nick" style="color:#234e69"><a href="#155610" label="[15:56:10]">&lt;stikonas&gt;</a></span><span class="message">plantman: I wrote most of the risc-v support for stage0-posix *without* risc-v board</span></div><div class="line" id="155636"><span class="nick" style="color:#234e69"><a href="#155636" label="[15:56:36]">&lt;stikonas&gt;</a></span><span class="message">and only a very minor tweak was later needed to make it run on real hw</span></div><div class="line" id="155706"><span class="nick" style="color:#6d2462"><a href="#155706" label="[15:57:06]">&lt;plantman&gt;</a></span><span class="message">awesome!! :)</span></div><div class="line" id="155740"><span class="nick" style="color:#234e69"><a href="#155740" label="[15:57:40]">&lt;stikonas&gt;</a></span><span class="message">but yes, super small line count is not necesserily a goal</span></div><div class="line" id="155752"><span class="nick" style="color:#234e69"><a href="#155752" label="[15:57:52]">&lt;stikonas&gt;</a></span><span class="message">at least not in later stages</span></div><div class="line" id="155757"><span class="nick" style="color:#234e69"><a href="#155757" label="[15:57:57]">&lt;stikonas&gt;</a></span><span class="message">but definitely in hex0</span></div><div class="line" id="155933"><span class="nick" style="color:#6d2462"><a href="#155933" label="[15:59:33]">&lt;plantman&gt;</a></span><span class="message">I'd like to contribute by having easy-to-understand and easy-to-use in some later stages</span></div><div class="line" id="160331"><span class="nick" style="color:#234e69"><a href="#160331" label="[16:03:31]">&lt;stikonas&gt;</a></span><span class="message">well, for C stages, M2-Mesoplanet might help with making M2-Planet easier to use</span></div><div class="line" id="160349"><span class="nick" style="color:#234e69"><a href="#160349" label="[16:03:49]">&lt;stikonas&gt;</a></span><span class="message">(since it spawns assembler and linker automatically)</span></div><div class="line" id="160408"><span class="nick" style="color:#6b8072"><a href="#160408" label="[16:04:08]">&lt;gbrlwck&gt;</a></span><span class="message">it's like the &quot;gcc&quot; frontend for out bootstrappable toolchain</span></div><div class="line" id="160430"><span class="nick" style="color:#234e69"><a href="#160430" label="[16:04:30]">&lt;stikonas&gt;</a></span><span class="message">M2-Mesoplanet is C preprocessor (up to now M2-Planet had some C preprocessor but it's getting big, so it's starting to make sense to continue separately)</span></div><div class="line" id="160445"><span class="nick" style="color:#234e69"><a href="#160445" label="[16:04:45]">&lt;stikonas&gt;</a></span><span class="message">yeah, it's similar to &quot;gcc&quot; frontend</span></div><div class="line" id="160506"><span class="nick" style="color:#234e69"><a href="#160506" label="[16:05:06]">&lt;stikonas&gt;</a></span><span class="message">later, mescc is a bit tricky to use...</span></div><div class="line" id="160513"><span class="nick" style="color:#234e69"><a href="#160513" label="[16:05:13]">&lt;stikonas&gt;</a></span><span class="message">but I don't know if anyting can be done about that</span></div><div class="line" id="160523"><span class="nick" style="color:#234e69"><a href="#160523" label="[16:05:23]">&lt;stikonas&gt;</a></span><span class="message">you just need to setup quite a few environmental variables</span></div><div class="line" id="160552"><span class="nick" style="color:#234e69"><a href="#160552" label="[16:05:52]">&lt;stikonas&gt;</a></span><span class="message">but at least it's scripted in guix and in <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/">https://github.com/fosslinux/live-bootstrap/</a> </span></div><div class="line" id="160726"><span class="nick" style="color:#234e69"><a href="#160726" label="[16:07:26]">&lt;stikonas&gt;</a></span><span class="message">btw, this is an incomplete and a bit outdated but still useful graph for live-bootstrap <a rel="nofollow" href="https://stikonas.eu/files/bootstrap/live-bootstrap.svg">https://stikonas.eu/files/bootstrap/live-bootstrap.svg</a> </span></div><div class="line" id="160859"><span class="nick" style="color:#6b8072"><a href="#160859" label="[16:08:59]">&lt;gbrlwck&gt;</a></span><span class="message">beautiful!</span></div><div class="line" id="160943"><span class="nick" style="color:#6d2462"><a href="#160943" label="[16:09:43]">&lt;plantman&gt;</a></span><span class="message">OMGOSH that graph is sick :)</span></div><div class="line" id="161210"><span class="nick" style="color:#6d2462"><a href="#161210" label="[16:12:10]">&lt;plantman&gt;</a></span><span class="message">sick cool</span></div><div class="line" id="161310"><span class="nick" style="color:#234e69"><a href="#161310" label="[16:13:10]">&lt;stikonas&gt;</a></span><span class="message">this is text version of it: <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst">https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst</a> </span></div><div class="line" id="161909"><span class="nick" style="color:#6d2462"><a href="#161909" label="[16:19:09]">&lt;plantman&gt;</a></span><span class="message">People know about LFS, but I dont think they know about live-bootstrap.</span></div><div class="line" id="162610"><span class="nick" style="color:#6d2462"><a href="#162610" label="[16:26:10]">&lt;plantman&gt;</a></span><span class="message">is tinycc synonimous with tcc?</span></div><div class="line" id="162950"><span class="nick" style="color:#234e69"><a href="#162950" label="[16:29:50]">&lt;stikonas&gt;</a></span><span class="message">plantman: yes</span></div><div class="line" id="163208"><span class="nick" style="color:#234e69"><a href="#163208" label="[16:32:08]">&lt;stikonas&gt;</a></span><span class="message">it's Tiny C Compiler, hence TCC</span></div><div class="line" id="163219"><span class="nick" style="color:#234e69"><a href="#163219" label="[16:32:19]">&lt;stikonas&gt;</a></span><span class="message">and it's tiny compared to GCC</span></div><div class="line" id="163237"><span class="nick" style="color:#234e69"><a href="#163237" label="[16:32:37]">&lt;stikonas&gt;</a></span><span class="message">although not so tiny if you compare to e.g. M2-Planet (which is 1/10 of a size)</span></div><div class="line" id="163255"><span class="nick" style="color:#234e69"><a href="#163255" label="[16:32:55]">&lt;stikonas&gt;</a></span><span class="message">but tcc is a proper real world compiler</span></div><div class="line" id="163309"><span class="nick" style="color:#234e69"><a href="#163309" label="[16:33:09]">&lt;stikonas&gt;</a></span><span class="message">with much better C99 coverage</span></div><div class="line" id="163500"><span class="nick" style="color:#6d2462"><a href="#163500" label="[16:35:00]">&lt;plantman&gt;</a></span><span class="message">i'm familiar with tinycc, I think I forgot that it was renamed from tcc to tinycc by bellard</span></div><div class="line" id="163623"><span class="nick" style="color:#6d2462"><a href="#163623" label="[16:36:23]">&lt;plantman&gt;</a></span><span class="message">M2-Planet sounds very neat, being 1/10</span></div><div class="line" id="163933"><span class="nick" style="color:#234e69"><a href="#163933" label="[16:39:33]">&lt;stikonas&gt;</a></span><span class="message">plantman: it's mostly 1/10 because of missing features</span></div><div class="line" id="163934"><span class="nick" style="color:#6d2462"><a href="#163934" label="[16:39:34]">&lt;plantman&gt;</a></span><span class="message">I was amazed that tinycc compiled a modified linux kernel, in super fast time</span></div><div class="line" id="163946"><span class="nick" style="color:#234e69"><a href="#163946" label="[16:39:46]">&lt;stikonas&gt;</a></span><span class="message">some of it would be good to add, then M2-Planet would be bigger</span></div><div class="line" id="164012"><span class="nick" style="color:#234e69"><a href="#164012" label="[16:40:12]">&lt;stikonas&gt;</a></span><span class="message">but since it's still written in cc_* subset, it will be bootstrappable</span></div><div class="line" id="164057"><span class="nick" style="color:#234e69"><a href="#164057" label="[16:40:57]">&lt;stikonas&gt;</a></span><span class="message">plantman: fossy had a lot of trouble building linux kernel, right now we only build linux kernel in live-bootstrap once we have gcc</span></div><div class="line" id="164111"><span class="nick" style="color:#6d2462"><a href="#164111" label="[16:41:11]">&lt;plantman&gt;</a></span><span class="message">Yes, the boot-strap-ability, its good for ease of use, and technical ease of use</span></div><div class="line" id="164141"><span class="nick" style="color:#234e69"><a href="#164141" label="[16:41:41]">&lt;stikonas&gt;</a></span><span class="message">so fossy was not able to get tcc to build linux kernel in live-bootstrap...</span></div><div class="line" id="164326"><span class="nick" style="color:#6d2462"><a href="#164326" label="[16:43:26]">&lt;plantman&gt;</a></span><span class="message">I never understood the explanation of why they used extensions and such, to make linux kernel more cross platform.</span></div><div class="line" id="164414"><span class="nick" style="color:#234e69"><a href="#164414" label="[16:44:14]">&lt;stikonas&gt;</a></span><span class="message">I don't remember what was actually difficult with tcc, but it might not even be linux kernel itself but kexec-tools</span></div><div class="line" id="165218"><span class="nick" style="color:#6d2462"><a href="#165218" label="[16:52:18]">&lt;plantman&gt;</a></span><span class="message">got to go, but it was really nice meeting you nice people, and talking about #bootstrappable</span></div><div class="line" id="165514"><span class="nick" style="color:#6b8072"><a href="#165514" label="[16:55:14]">&lt;gbrlwck&gt;</a></span><span class="message">plantman: you're welcome (to joint the bootstrappable work force ;)</span></div><div class="line" id="171043"><span class="nick" style="color:#6b8072"><a href="#171043" label="[17:10:43]">&lt;gbrlwck&gt;</a></span><span class="message">stikonas: have you been able to check whether you can compile crt1.c with mescc?</span></div><div class="line" id="172042"><span class="nick" style="color:#234e69"><a href="#172042" label="[17:20:42]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: not yet...</span></div><div class="line" id="174721"><span class="nick" style="color:#389600"><a href="#174721" label="[17:47:21]">&lt;oriansj&gt;</a></span><span class="message">hmmm I might want to add a --hex2 flag in get_machine to match the one we already have with --blood</span></div><div class="line" id="174823"><span class="nick" style="color:#389600"><a href="#174823" label="[17:48:23]">&lt;oriansj&gt;</a></span><span class="message">that way test1000 can be a bootstrap build and a self-host which should have identical outputs</span></div><div class="line" id="175400"><span class="nick" style="color:#6b8072"><a href="#175400" label="[17:54:00]">&lt;gbrlwck&gt;</a></span><span class="message">oriansj: sound cool!</span></div><div class="line" id="181152"><span class="nick">***</span><span class="message notice">qyliss_ is now known as qyliss</span></div><div class="line" id="195854"><span class="nick" style="color:#389600"><a href="#195854" label="[19:58:54]">&lt;oriansj&gt;</a></span><span class="message">ok, I've been looking more into properly doing #include and it looks ugly</span></div><div class="line" id="200051"><span class="nick" style="color:#6d2462"><a href="#200051" label="[20:00:51]">&lt;plantman&gt;</a></span><span class="message">Aint that the truth!  You bechta!</span></div><div class="line" id="200228"><span class="nick" style="color:#6d2462"><a href="#200228" label="[20:02:28]">&lt;plantman&gt;</a></span><span class="message">That's a major reason why I liked java for a while.  Condidtional compilation is such a prob.</span></div><div class="line" id="200301"><span class="nick" style="color:#234e69"><a href="#200301" label="[20:03:01]">&lt;stikonas&gt;</a></span><span class="message">yeah, #include and macro functions are two big things that we need to implement...</span></div><div class="line" id="200312"><span class="nick" style="color:#234e69"><a href="#200312" label="[20:03:12]">&lt;stikonas&gt;</a></span><span class="message">and macro functions are also non-trivial</span></div><div class="line" id="200318"><span class="nick" style="color:#234e69"><a href="#200318" label="[20:03:18]">&lt;stikonas&gt;</a></span><span class="message">I have wip branch but it needs more work</span></div><div class="line" id="200330"><span class="nick" style="color:#389600"><a href="#200330" label="[20:03:30]">&lt;oriansj&gt;</a></span><span class="message">well #include we can punt for a little while</span></div><div class="line" id="200351"><span class="nick" style="color:#389600"><a href="#200351" label="[20:03:51]">&lt;oriansj&gt;</a></span><span class="message">but proper macro functions are essential if we want to build upstream Mes.c</span></div><div class="line" id="200354"><span class="nick" style="color:#6c3d55"><a href="#200354" label="[20:03:54]">&lt;muurkha&gt;</a></span><span class="message">*implementing* #include is simple</span></div><div class="line" id="200402"><span class="nick" style="color:#6c3d55"><a href="#200402" label="[20:04:02]">&lt;muurkha&gt;</a></span><span class="message">it's the semantics of #include that are a mess</span></div><div class="line" id="200418"><span class="nick" style="color:#389600"><a href="#200418" label="[20:04:18]">&lt;oriansj&gt;</a></span><span class="message">muurkha: feel free to make a pull request</span></div><div class="line" id="200510"><span class="nick" style="color:#389600"><a href="#200510" label="[20:05:10]">&lt;oriansj&gt;</a></span><span class="message">and we can restrict the semantics of #include we are willing to accept</span></div><div class="line" id="200530"><span class="nick" style="color:#389600"><a href="#200530" label="[20:05:30]">&lt;oriansj&gt;</a></span><span class="message">So extra easy for anyone who wants to be responsible for it</span></div><div class="line" id="200550"><span class="nick" style="color:#6d2462"><a href="#200550" label="[20:05:50]">&lt;plantman&gt;</a></span><span class="message">How about for a bootstrapping compiler, not use macro functions at all.</span></div><div class="line" id="200624"><span class="nick" style="color:#389600"><a href="#200624" label="[20:06:24]">&lt;oriansj&gt;</a></span><span class="message">plantman: upstream GNU Mes uses macros and it is a lisp interpreter</span></div><div class="line" id="200709"><span class="nick" style="color:#6d2462"><a href="#200709" label="[20:07:09]">&lt;plantman&gt;</a></span><span class="message">ok</span></div><div class="line" id="200728"><span class="nick" style="color:#389600"><a href="#200728" label="[20:07:28]">&lt;oriansj&gt;</a></span><span class="message">So we either need to have upstream drop the macros from the main branch, add support for macros or do the M3 work to skip the need for GNU Mes entirely</span></div><div class="line" id="200836"><span class="nick" style="color:#389600"><a href="#200836" label="[20:08:36]">&lt;oriansj&gt;</a></span><span class="message">currently adding support for Macros seems to be the path of least work</span></div><div class="line" id="201546"><span class="nick" style="color:#6c3d55"><a href="#201546" label="[20:15:46]">&lt;muurkha&gt;</a></span><span class="message">hmm, I think the core of adding #include to cc_x86.M1 would involve changing fgetc to have an extra conditional which, if it hits EOF (!-4), pops the previous input file from an input file stack, unless empty, and retries</span></div><div class="line" id="201724"><span class="nick" style="color:#6c3d55"><a href="#201724" label="[20:17:24]">&lt;muurkha&gt;</a></span><span class="message">does that sound right?</span></div><div class="line" id="201856"><span class="nick" style="color:#389600"><a href="#201856" label="[20:18:56]">&lt;oriansj&gt;</a></span><span class="message">muurkha: no one here would be adding #include to cc_*</span></div><div class="line" id="201906"><span class="nick" style="color:#389600"><a href="#201906" label="[20:19:06]">&lt;oriansj&gt;</a></span><span class="message">#include support would be added to M2-Mesoplanet</span></div><div class="line" id="201913"><span class="nick" style="color:#6c3d55"><a href="#201913" label="[20:19:13]">&lt;muurkha&gt;</a></span><span class="message">aha, thanks</span></div><div class="line" id="201913"><span class="nick" style="color:#389600"><a href="#201913" label="[20:19:13]">&lt;oriansj&gt;</a></span><span class="message">which is written in C</span></div><div class="line" id="201933"><span class="nick" style="color:#6c3d55"><a href="#201933" label="[20:19:33]">&lt;muurkha&gt;</a></span><span class="message">that's exactly the kind of thing I wanted to find out by asking :)</span></div><div class="line" id="201948"><span class="nick" style="color:#6c3d55"><a href="#201948" label="[20:19:48]">&lt;muurkha&gt;</a></span><span class="message">but what is M2-Mesoplanet?</span></div><div class="line" id="202036"><span class="nick" style="color:#389600"><a href="#202036" label="[20:20:36]">&lt;oriansj&gt;</a></span><span class="message">M2-Mesoplanet is a stand-alone C preprocessor that by default spawns M2-Planet, blood-elf, M1 and Hex2 to compile the input C source into a Binary in a single step</span></div><div class="line" id="202123"><span class="nick" style="color:#6c3d55"><a href="#202123" label="[20:21:23]">&lt;muurkha&gt;</a></span><span class="message">what repo is it in?</span></div><div class="line" id="202135"><span class="nick" style="color:#389600"><a href="#202135" label="[20:21:35]">&lt;oriansj&gt;</a></span><span class="message">and the #include functionality is to enable one to be able to do: M2-Mesoplanet -f foo.c -o foo instead of doing M2-Mesoplanet -f M2libc/stdio.c -f.... -f foo.c -o foo</span></div><div class="line" id="202154"><span class="nick" style="color:#389600"><a href="#202154" label="[20:21:54]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/M2-Mesoplanet">https://github.com/oriansj/M2-Mesoplanet</a> </span></div><div class="line" id="202159"><span class="nick" style="color:#6c3d55"><a href="#202159" label="[20:21:59]">&lt;muurkha&gt;</a></span><span class="message">thanks!</span></div><div class="line" id="202335"><span class="nick" style="color:#6c3d55"><a href="#202335" label="[20:23:35]">&lt;muurkha&gt;</a></span><span class="message">heh, there's already an &quot;implementation&quot; of #include at cc_macro.c:656</span></div><div class="line" id="202410"><span class="nick" style="color:#6c3d55"><a href="#202410" label="[20:24:10]">&lt;muurkha&gt;</a></span><span class="message">it conditionally sets the STDIO_USED flag :)</span></div><div class="line" id="202453"><span class="nick" style="color:#389600"><a href="#202453" label="[20:24:53]">&lt;oriansj&gt;</a></span><span class="message">muurkha: that is correct, it doesn't yet do the work required to remove the need for manually doing -f file for all of the files that #include is supposed to automatically solve</span></div><div class="line" id="202518"><span class="nick" style="color:#389600"><a href="#202518" label="[20:25:18]">&lt;oriansj&gt;</a></span><span class="message">So our implementation is just ignore it right now</span></div><div class="line" id="202542"><span class="nick" style="color:#389600"><a href="#202542" label="[20:25:42]">&lt;oriansj&gt;</a></span><span class="message">however making it actually fully useful would probably make its use much easier</span></div><div class="line" id="202557"><span class="nick" style="color:#6c3d55"><a href="#202557" label="[20:25:57]">&lt;muurkha&gt;</a></span><span class="message">so I'd have to change that and the implementation of grab_byte in cc_reader.c:27</span></div><div class="line" id="202632"><span class="nick" style="color:#6c3d55"><a href="#202632" label="[20:26:32]">&lt;muurkha&gt;</a></span><span class="message">add a stack of `input` and `line` pairs</span></div><div class="line" id="202639"><span class="nick" style="color:#389600"><a href="#202639" label="[20:26:39]">&lt;oriansj&gt;</a></span><span class="message">and I just pushed a commit with a bootstrap script to give anyone who wants to finish the test1000 self-host test a quick start; while I add functionality to get_machine</span></div><div class="line" id="202645"><span class="nick" style="color:#6c3d55"><a href="#202645" label="[20:26:45]">&lt;muurkha&gt;</a></span><span class="message">does that sound right?</span></div><div class="line" id="203022"><span class="nick" style="color:#389600"><a href="#203022" label="[20:30:22]">&lt;oriansj&gt;</a></span><span class="message">well a linked list of files yes</span></div><div class="line" id="203125"><span class="nick" style="color:#389600"><a href="#203125" label="[20:31:25]">&lt;oriansj&gt;</a></span><span class="message">and some custom logic to know &lt;foo.h&gt; probably means to load $M2libc/foo.c or $M2libc/$ARCH/foo.c</span></div><div class="line" id="203146"><span class="nick" style="color:#389600"><a href="#203146" label="[20:31:46]">&lt;oriansj&gt;</a></span><span class="message">or $M2libc/$ARCH/$DISTRO/foo.c</span></div><div class="line" id="203205"><span class="nick" style="color:#389600"><a href="#203205" label="[20:32:05]">&lt;oriansj&gt;</a></span><span class="message">and to process all of the #includes in those files as well</span></div><div class="line" id="203347"><span class="nick" style="color:#389600"><a href="#203347" label="[20:33:47]">&lt;oriansj&gt;</a></span><span class="message">and the struct used in that linked list will also need state tracking so we don't do duplicate loads of files as that would cause issues in the build when we started passing things to M2-Planet</span></div><div class="line" id="203443"><span class="nick" style="color:#389600"><a href="#203443" label="[20:34:43]">&lt;oriansj&gt;</a></span><span class="message">and a way of passing filenames to blocks of C code via the tempfiles to enable M2-Planet to make useful error messages will probably needed too</span></div><div class="line" id="203456"><span class="nick" style="color:#6c3d55"><a href="#203456" label="[20:34:56]">&lt;muurkha&gt;</a></span><span class="message">well, processing the includes in those files falls out automatically</span></div><div class="line" id="203509"><span class="nick" style="color:#389600"><a href="#203509" label="[20:35:09]">&lt;oriansj&gt;</a></span><span class="message">I was thinking \x127 $FILENAME to make it a trivial add in M2-Planet's cc_reader.c</span></div><div class="line" id="203542"><span class="nick" style="color:#6c3d55"><a href="#203542" label="[20:35:42]">&lt;muurkha&gt;</a></span><span class="message">duplicate loads of files are normally taken care of by #ifndef __CRAP__ / #define __CRAP__ ... / #endif</span></div><div class="line" id="203547"><span class="nick" style="color:#6c3d55"><a href="#203547" label="[20:35:47]">&lt;muurkha&gt;</a></span><span class="message">or just by not doing recursive includes</span></div><div class="line" id="203608"><span class="nick" style="color:#6c3d55"><a href="#203608" label="[20:36:08]">&lt;muurkha&gt;</a></span><span class="message">that is, it's not the preprocessor's responsibility</span></div><div class="line" id="203639"><span class="nick" style="color:#389600"><a href="#203639" label="[20:36:39]">&lt;oriansj&gt;</a></span><span class="message">so M2libc will need some updates</span></div><div class="line" id="203650"><span class="nick" style="color:#389600"><a href="#203650" label="[20:36:50]">&lt;oriansj&gt;</a></span><span class="message">but shouldn't be complicated updates to add</span></div><div class="line" id="203659"><span class="nick" style="color:#6c3d55"><a href="#203659" label="[20:36:59]">&lt;muurkha&gt;</a></span><span class="message">oh, because it does unprotected includes now?</span></div><div class="line" id="203738"><span class="nick" style="color:#389600"><a href="#203738" label="[20:37:38]">&lt;oriansj&gt;</a></span><span class="message">just straight C blocks of code as it was just hacked together and slowly growing in functionality</span></div><div class="line" id="203745"><span class="nick" style="color:#6c3d55"><a href="#203745" label="[20:37:45]">&lt;muurkha&gt;</a></span><span class="message">but yeah you'd definitely need to have an include path, which means a loop over directories, and you'd want to point to the successful filename in the input-source struct</span></div><div class="line" id="203849"><span class="nick" style="color:#389600"><a href="#203849" label="[20:38:49]">&lt;oriansj&gt;</a></span><span class="message">right now we assume ./M2libc unless an override by setting an enviromental variable; no search required</span></div><div class="line" id="211135"><span class="nick" style="color:#6c3d55"><a href="#211135" label="[21:11:35]">&lt;muurkha&gt;</a></span><span class="message">well, you said &quot;$M2libc/foo.c or $M2libc/$ARCH/foo.c&quot;</span></div><div class="line" id="211830"><span class="nick" style="color:#234e69"><a href="#211830" label="[21:18:30]">&lt;stikonas&gt;</a></span><span class="message">oriansj: can we not do $M2libc/$ARCH/foo.c via #ifdefs and further includes?</span></div><div class="line" id="211954"><span class="nick" style="color:#234e69"><a href="#211954" label="[21:19:54]">&lt;stikonas&gt;</a></span><span class="message">then no need to have extra logic to find 2 paths</span></div><div class="line" id="213413"><span class="nick" style="color:#389600"><a href="#213413" label="[21:34:13]">&lt;oriansj&gt;</a></span><span class="message">stikonas: yes that is entirely possible</span></div><div class="line" id="213540"><span class="nick" style="color:#389600"><a href="#213540" label="[21:35:40]">&lt;oriansj&gt;</a></span><span class="message">the only change possibly needed might be in the architecture specific $M2libc/$ARCH/bootstrap.c</span></div><div class="line" id="213825"><span class="nick" style="color:#389600"><a href="#213825" label="[21:38:25]">&lt;oriansj&gt;</a></span><span class="message">correction the $M2libc/$ARCH/$DISTRO/bootstrap.c file</span></div><div class="line" id="213835"><span class="nick" style="color:#389600"><a href="#213835" label="[21:38:35]">&lt;oriansj&gt;</a></span><span class="message">where DISTRO is things like linux</span></div><div class="line" id="215023"><span class="nick" style="color:#389600"><a href="#215023" label="[21:50:23]">&lt;oriansj&gt;</a></span><span class="message">and the newly enhanced get_machine is now up</span></div><div class="line" id="215930"><span class="nick" style="color:#389600"><a href="#215930" label="[21:59:30]">&lt;oriansj&gt;</a></span><span class="message">get_machine --blood, get_machine --hex2 and get_machine --endian will now provide enough information for any script doing an M2-Planet build</span></div><div class="line" id="220001"><span class="nick" style="color:#389600"><a href="#220001" label="[22:00:01]">&lt;oriansj&gt;</a></span><span class="message">kaem doesn't yet support that but that shouldn't be an issue for M2-Mesoplanet's tests</span></div><div class="line" id="223633"><span class="nick" style="color:#d9d9d9"><a href="#223633" label="[22:36:33]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, it can be added to kaem too, but then it's yet another syscall...</span></div><div class="line" id="223641"><span class="nick" style="color:#d9d9d9"><a href="#223641" label="[22:36:41]">&lt;stikonas[m]&gt;</a></span><span class="message">(dup2)</span></div><div class="line" id="224157"><span class="nick" style="color:#389600"><a href="#224157" label="[22:41:57]">&lt;oriansj&gt;</a></span><span class="message">whenever someone gets around to that</span></div><div class="line" id="224206"><span class="nick" style="color:#389600"><a href="#224206" label="[22:42:06]">&lt;oriansj&gt;</a></span><span class="message">in our ever growing TODO list</span></div><div class="line" id="224220"><span class="nick" style="color:#234e69"><a href="#224220" label="[22:42:20]">&lt;stikonas&gt;</a></span><span class="message">well, kaem can deal with arches even without get_machine</span></div><div class="line" id="224251"><span class="nick" style="color:#6c3d55"><a href="#224251" label="[22:42:51]">&lt;muurkha&gt;</a></span><span class="message">you don't actually need dup2 if you have dup</span></div><div class="line" id="224301"><span class="nick" style="color:#234e69"><a href="#224301" label="[22:43:01]">&lt;stikonas&gt;</a></span><span class="message">well, dup or dup2...</span></div><div class="line" id="224317"><span class="nick" style="color:#234e69"><a href="#224317" label="[22:43:17]">&lt;stikonas&gt;</a></span><span class="message">anyway, we already define ARCH variable in live-bootstrap</span></div><div class="line" id="224352"><span class="nick" style="color:#234e69"><a href="#224352" label="[22:43:52]">&lt;stikonas&gt;</a></span><span class="message">so doing arch specific stuff is possible</span></div><div class="line" id="225224"><span class="nick" style="color:#389600"><a href="#225224" label="[22:52:24]">&lt;oriansj&gt;</a></span><span class="message">yes but I was talking about the variable=$(get_machine --blood) sort of pattern</span></div><div class="line" id="231736"><span class="nick" style="color:#389600"><a href="#231736" label="[23:17:36]">&lt;oriansj&gt;</a></span><span class="message">also doing sha256sum /test/test1000/tmp/proof &gt; /test/test1000/tmp/proof.answer also isn't supported by kaem yet</span></div><div class="line" id="233515"><span class="nick" style="color:#234e69"><a href="#233515" label="[23:35:15]">&lt;stikonas&gt;</a></span><span class="message">no, but you would usually do that for development only</span></div><br /></div></body></html>