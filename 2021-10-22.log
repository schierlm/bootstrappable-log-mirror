<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-10-22.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000319"><span class="nick" style="color:#389600"><a href="#000319" label="[00:03:19]">&lt;fossy&gt;</a></span><span class="message">stikonas: Am i correct that the only uses of autogen in GCC are fixincludes and top-level makefile</span></div><div class="line" id="000518"><span class="nick" style="color:#389600"><a href="#000518" label="[00:05:18]">&lt;fossy&gt;</a></span><span class="message">it seems that the vast majority of Makefile.tpl is things like FOR and IF loops</span></div><div class="line" id="000529"><span class="nick" style="color:#389600"><a href="#000529" label="[00:05:29]">&lt;fossy&gt;</a></span><span class="message">I think we can reconstruct this as say a bash script</span></div><div class="line" id="000540"><span class="nick" style="color:#389600"><a href="#000540" label="[00:05:40]">&lt;fossy&gt;</a></span><span class="message">(I would do Python but we don't have that yet)</span></div><div class="line" id="000604"><span class="nick" style="color:#8dd3c7"><a href="#000604" label="[00:06:04]">&lt;stikonas&gt;</a></span><span class="message">fossy:  yes, I think that's right</span></div><div class="line" id="000625"><span class="nick" style="color:#8dd3c7"><a href="#000625" label="[00:06:25]">&lt;stikonas&gt;</a></span><span class="message">I wonder if bash script can be upstreamed</span></div><div class="line" id="000646"><span class="nick" style="color:#8dd3c7"><a href="#000646" label="[00:06:46]">&lt;stikonas&gt;</a></span><span class="message">yeah, Python would be nicer...</span></div><div class="line" id="000653"><span class="nick" style="color:#8dd3c7"><a href="#000653" label="[00:06:53]">&lt;stikonas&gt;</a></span><span class="message">fossy: or should we build python?</span></div><div class="line" id="000658"><span class="nick" style="color:#389600"><a href="#000658" label="[00:06:58]">&lt;fossy&gt;</a></span><span class="message">Could do that</span></div><div class="line" id="000658"><span class="nick" style="color:#8dd3c7"><a href="#000658" label="[00:06:58]">&lt;stikonas&gt;</a></span><span class="message">and then do autogen</span></div><div class="line" id="000702"><span class="nick" style="color:#389600"><a href="#000702" label="[00:07:02]">&lt;fossy&gt;</a></span><span class="message">it needs a bit of bootstrap</span></div><div class="line" id="000704"><span class="nick" style="color:#389600"><a href="#000704" label="[00:07:04]">&lt;fossy&gt;</a></span><span class="message">but not much</span></div><div class="line" id="000705"><span class="nick" style="color:#8dd3c7"><a href="#000705" label="[00:07:05]">&lt;stikonas&gt;</a></span><span class="message">oh?</span></div><div class="line" id="000712"><span class="nick" style="color:#8dd3c7"><a href="#000712" label="[00:07:12]">&lt;stikonas&gt;</a></span><span class="message">it uses some python scripts?</span></div><div class="line" id="000719"><span class="nick" style="color:#389600"><a href="#000719" label="[00:07:19]">&lt;fossy&gt;</a></span><span class="message">3.10 has a couple of python scripts used to generate a few sources</span></div><div class="line" id="000725"><span class="nick" style="color:#389600"><a href="#000725" label="[00:07:25]">&lt;fossy&gt;</a></span><span class="message">but i looked at 2.7 and it at least dosen't</span></div><div class="line" id="000731"><span class="nick" style="color:#8dd3c7"><a href="#000731" label="[00:07:31]">&lt;stikonas&gt;</a></span><span class="message">ok, that's good</span></div><div class="line" id="000742"><span class="nick" style="color:#389600"><a href="#000742" label="[00:07:42]">&lt;fossy&gt;</a></span><span class="message">so we aren't going into the super old if we have to</span></div><div class="line" id="000744"><span class="nick" style="color:#8dd3c7"><a href="#000744" label="[00:07:44]">&lt;stikonas&gt;</a></span><span class="message">well, python is probably more maintainable than bash script...</span></div><div class="line" id="000751"><span class="nick" style="color:#8dd3c7"><a href="#000751" label="[00:07:51]">&lt;stikonas&gt;</a></span><span class="message">but hmm</span></div><div class="line" id="000757"><span class="nick" style="color:#8dd3c7"><a href="#000757" label="[00:07:57]">&lt;stikonas&gt;</a></span><span class="message">bash might be easier to upstream...</span></div><div class="line" id="000823"><span class="nick" style="color:#8dd3c7"><a href="#000823" label="[00:08:23]">&lt;stikonas&gt;</a></span><span class="message">but I&quot;ve no idea how receptive  GCC folks would be to that...</span></div><div class="line" id="000834"><span class="nick" style="color:#389600"><a href="#000834" label="[00:08:34]">&lt;fossy&gt;</a></span><span class="message">GCC already has a number of python scripts in contrib/</span></div><div class="line" id="000851"><span class="nick" style="color:#389600"><a href="#000851" label="[00:08:51]">&lt;fossy&gt;</a></span><span class="message">for various &quot;developer tools&quot;</span></div><div class="line" id="000857"><span class="nick" style="color:#389600"><a href="#000857" label="[00:08:57]">&lt;fossy&gt;</a></span><span class="message">i'm guessing this would be treated similarily</span></div><div class="line" id="000902"><span class="nick" style="color:#8dd3c7"><a href="#000902" label="[00:09:02]">&lt;stikonas&gt;</a></span><span class="message">ok, so language wouldn't matter</span></div><div class="line" id="000926"><span class="nick" style="color:#8dd3c7"><a href="#000926" label="[00:09:26]">&lt;stikonas&gt;</a></span><span class="message">well, it's just that this might be a fairly big script</span></div><div class="line" id="000939"><span class="nick" style="color:#389600"><a href="#000939" label="[00:09:39]">&lt;fossy&gt;</a></span><span class="message">hm, what about jinja2</span></div><div class="line" id="000951"><span class="nick" style="color:#8dd3c7"><a href="#000951" label="[00:09:51]">&lt;stikonas&gt;</a></span><span class="message">that might work</span></div><div class="line" id="001004"><span class="nick" style="color:#8dd3c7"><a href="#001004" label="[00:10:04]">&lt;stikonas&gt;</a></span><span class="message">jinja has for loops and ifs</span></div><div class="line" id="001007"><span class="nick" style="color:#389600"><a href="#001007" label="[00:10:07]">&lt;fossy&gt;</a></span><span class="message">its literally a templating engine, and that seems to also be all autogen is here</span></div><div class="line" id="001013"><span class="nick" style="color:#8dd3c7"><a href="#001013" label="[00:10:13]">&lt;stikonas&gt;</a></span><span class="message">exactly</span></div><div class="line" id="001024"><span class="nick" style="color:#8dd3c7"><a href="#001024" label="[00:10:24]">&lt;stikonas&gt;</a></span><span class="message">and we have at least some argument why autogen is not good</span></div><div class="line" id="001046"><span class="nick" style="color:#8dd3c7"><a href="#001046" label="[00:10:46]">&lt;stikonas&gt;</a></span><span class="message">although there might be some push back due to autogen being gnu project and jinja2 not</span></div><div class="line" id="001050"><span class="nick" style="color:#389600"><a href="#001050" label="[00:10:50]">&lt;fossy&gt;</a></span><span class="message">it being a generally unmaintained and poor piece of software</span></div><div class="line" id="001052"><span class="nick" style="color:#389600"><a href="#001052" label="[00:10:52]">&lt;fossy&gt;</a></span><span class="message">true</span></div><div class="line" id="001100"><span class="nick" style="color:#8dd3c7"><a href="#001100" label="[00:11:00]">&lt;stikonas&gt;</a></span><span class="message">but maybe people wouldn't care too much</span></div><div class="line" id="001102"><span class="nick" style="color:#389600"><a href="#001102" label="[00:11:02]">&lt;fossy&gt;</a></span><span class="message">i have no problem keeping this downstream if it isn't to be upstreamed</span></div><div class="line" id="001113"><span class="nick" style="color:#8dd3c7"><a href="#001113" label="[00:11:13]">&lt;stikonas&gt;</a></span><span class="message">we'll see...</span></div><div class="line" id="001134"><span class="nick" style="color:#8dd3c7"><a href="#001134" label="[00:11:34]">&lt;stikonas&gt;</a></span><span class="message">so maybe let's bootstrap jinja2</span></div><div class="line" id="001147"><span class="nick" style="color:#389600"><a href="#001147" label="[00:11:47]">&lt;fossy&gt;</a></span><span class="message">yeah, python and jinja2, then we can look at rewriting these scripts</span></div><div class="line" id="001211"><span class="nick" style="color:#8dd3c7"><a href="#001211" label="[00:12:11]">&lt;stikonas&gt;</a></span><span class="message">in any case, we'll have to keep it downstream for gcc 10</span></div><div class="line" id="001219"><span class="nick" style="color:#389600"><a href="#001219" label="[00:12:19]">&lt;fossy&gt;</a></span><span class="message">and 11</span></div><div class="line" id="001224"><span class="nick" style="color:#8dd3c7"><a href="#001224" label="[00:12:24]">&lt;stikonas&gt;</a></span><span class="message">yes, and binutils</span></div><div class="line" id="001230"><span class="nick" style="color:#8dd3c7"><a href="#001230" label="[00:12:30]">&lt;stikonas&gt;</a></span><span class="message">well, binutils maybe less so</span></div><div class="line" id="001231"><span class="nick" style="color:#389600"><a href="#001231" label="[00:12:31]">&lt;fossy&gt;</a></span><span class="message">does binutils do the same thing :|</span></div><div class="line" id="001233"><span class="nick" style="color:#8dd3c7"><a href="#001233" label="[00:12:33]">&lt;stikonas&gt;</a></span><span class="message">if we wait for release</span></div><div class="line" id="001237"><span class="nick" style="color:#8dd3c7"><a href="#001237" label="[00:12:37]">&lt;stikonas&gt;</a></span><span class="message">yes, it does</span></div><div class="line" id="001305"><span class="nick" style="color:#8dd3c7"><a href="#001305" label="[00:13:05]">&lt;stikonas&gt;</a></span><span class="message">maybe smaller templates there...</span></div><div class="line" id="002937"><span class="nick" style="color:#8dd3c7"><a href="#002937" label="[00:29:37]">&lt;stikonas&gt;</a></span><span class="message">hmm, I can also reproduce that WHILE_handle_define_2 crash in M2-planet</span></div><div class="line" id="003212"><span class="nick" style="color:#8dd3c7"><a href="#003212" label="[00:32:12]">&lt;stikonas&gt;</a></span><span class="message">that's cc_core.c file in M2-Planet, handle_define function</span></div><div class="line" id="003319"><span class="nick" style="color:#8dd3c7"><a href="#003319" label="[00:33:19]">&lt;stikonas&gt;</a></span><span class="message">maybe something bad is going on with macro_token-&gt;s[0]</span></div><div class="line" id="003407"><span class="nick" style="color:#8dd3c7"><a href="#003407" label="[00:34:07]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: it's probably best to build M2-Planet with GCC and debug that version</span></div><div class="line" id="003411"><span class="nick" style="color:#8dd3c7"><a href="#003411" label="[00:34:11]">&lt;stikonas&gt;</a></span><span class="message">rather than bootstrapped version</span></div><div class="line" id="003442"><span class="nick" style="color:#8dd3c7"><a href="#003442" label="[00:34:42]">&lt;stikonas&gt;</a></span><span class="message">you'll get much better debugging support</span></div><div class="line" id="003453"><span class="nick" style="color:#6b8072"><a href="#003453" label="[00:34:53]">&lt;muurkha&gt;</a></span><span class="message">oriansj: I agree, no place for programming sins to hide.  no, I wasn't accusing you of having an ego, just a little allergic to absolution through confession of sins :)</span></div><div class="line" id="003541"><span class="nick" style="color:#6b8072"><a href="#003541" label="[00:35:41]">&lt;muurkha&gt;</a></span><span class="message">stikonas: yes, the autogen case is a pretty messy problem indeed</span></div><div class="line" id="003608"><span class="nick" style="color:#8dd3c7"><a href="#003608" label="[00:36:08]">&lt;stikonas&gt;</a></span><span class="message">actually, GCC version does not crash but prints include/m2/lib.h:70:unexpected #endif</span></div><div class="line" id="003611"><span class="nick" style="color:#6b8072"><a href="#003611" label="[00:36:11]">&lt;muurkha&gt;</a></span><span class="message">the original cvs repo is almost certainly &quot;messed up&quot;</span></div><div class="line" id="003634"><span class="nick" style="color:#6b8072"><a href="#003634" label="[00:36:34]">&lt;muurkha&gt;</a></span><span class="message">there are probably archives of GNU tapes from before 02001 that have earlier versions of GNU source code</span></div><div class="line" id="003830"><span class="nick" style="color:#8dd3c7"><a href="#003830" label="[00:38:30]">&lt;stikonas&gt;</a></span><span class="message">oriansj: does M2-Planet handle ifdefs and endifs?</span></div><div class="line" id="003848"><span class="nick" style="color:#8dd3c7"><a href="#003848" label="[00:38:48]">&lt;stikonas&gt;</a></span><span class="message">muurkha: well, not if the project was not GNU project then</span></div><div class="line" id="003919"><span class="nick" style="color:#8dd3c7"><a href="#003919" label="[00:39:19]">&lt;stikonas&gt;</a></span><span class="message">when GNU adopted autogen, it was already messed up</span></div><div class="line" id="003950"><span class="nick" style="color:#8dd3c7"><a href="#003950" label="[00:39:50]">&lt;stikonas&gt;</a></span><span class="message">so rewriting required GCC templates in jinja2 might be the easiest path</span></div><div class="line" id="004112"><span class="nick" style="color:#8dd3c7"><a href="#004112" label="[00:41:12]">&lt;stikonas&gt;</a></span><span class="message">and we just send autogen to the landfill</span></div><div class="line" id="004444"><span class="nick" style="color:#8dd3c7"><a href="#004444" label="[00:44:44]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: anyway, if I remove ifdefs, I get the next crash in M2-Planet's preprocess function</span></div><div class="line" id="004518"><span class="nick" style="color:#8dd3c7"><a href="#004518" label="[00:45:18]">&lt;stikonas&gt;</a></span><span class="message">p start_of_line</span></div><div class="line" id="004520"><span class="nick" style="color:#8dd3c7"><a href="#004520" label="[00:45:20]">&lt;stikonas&gt;</a></span><span class="message">Cannot access memory at address 0xfffffffffffffffc</span></div><div class="line" id="004526"><span class="nick" style="color:#8dd3c7"><a href="#004526" label="[00:45:26]">&lt;stikonas&gt;</a></span><span class="message">which is a bit strange...</span></div><div class="line" id="004844"><span class="nick" style="color:#6b8072"><a href="#004844" label="[00:48:44]">&lt;muurkha&gt;</a></span><span class="message">stikonas: yeah, but I'm just guessing because that was the oldest version I found on archives of the GNU web site</span></div><div class="line" id="004930"><span class="nick" style="color:#6b8072"><a href="#004930" label="[00:49:30]">&lt;muurkha&gt;</a></span><span class="message">unfortunately the IA doesn't archive FTP sites much</span></div><div class="line" id="005048"><span class="nick" style="color:#6b8072"><a href="#005048" label="[00:50:48]">&lt;muurkha&gt;</a></span><span class="message">or are you saying you have independent information about when autogen became a GNU project?</span></div><div class="line" id="005350"><span class="nick" style="color:#8dd3c7"><a href="#005350" label="[00:53:50]">&lt;stikonas&gt;</a></span><span class="message">muurkha: I don't have independent information...</span></div><div class="line" id="005432"><span class="nick" style="color:#8dd3c7"><a href="#005432" label="[00:54:32]">&lt;stikonas&gt;</a></span><span class="message">but I found that it was not well packaged by distros before</span></div><div class="line" id="005444"><span class="nick" style="color:#8dd3c7"><a href="#005444" label="[00:54:44]">&lt;stikonas&gt;</a></span><span class="message">so that does give some evidence to that</span></div><div class="line" id="005448"><span class="nick" style="color:#6b8072"><a href="#005448" label="[00:54:48]">&lt;muurkha&gt;</a></span><span class="message">yeah</span></div><div class="line" id="005454"><span class="nick" style="color:#8dd3c7"><a href="#005454" label="[00:54:54]">&lt;stikonas&gt;</a></span><span class="message">(once package becomes gnu project, more distros pick it up)</span></div><div class="line" id="005507"><span class="nick" style="color:#6b8072"><a href="#005507" label="[00:55:07]">&lt;muurkha&gt;</a></span><span class="message">maybe</span></div><div class="line" id="005522"><span class="nick" style="color:#6b8072"><a href="#005522" label="[00:55:22]">&lt;muurkha&gt;</a></span><span class="message">but certainly once a package becomes a dependency of GCC all the distros will pick it up</span></div><div class="line" id="005532"><span class="nick" style="color:#6b8072"><a href="#005532" label="[00:55:32]">&lt;muurkha&gt;</a></span><span class="message">except MacOS *spit*</span></div><div class="line" id="005536"><span class="nick" style="color:#8dd3c7"><a href="#005536" label="[00:55:36]">&lt;stikonas&gt;</a></span><span class="message">fossy: gnutls also uses autogen, actually even more</span></div><div class="line" id="005558"><span class="nick" style="color:#8dd3c7"><a href="#005558" label="[00:55:58]">&lt;stikonas&gt;</a></span><span class="message">well, it's not a full dependency</span></div><div class="line" id="005620"><span class="nick" style="color:#8dd3c7"><a href="#005620" label="[00:56:20]">&lt;stikonas&gt;</a></span><span class="message">GCC tarballs and even repo ship output of Autogen</span></div><div class="line" id="005635"><span class="nick" style="color:#8dd3c7"><a href="#005635" label="[00:56:35]">&lt;stikonas&gt;</a></span><span class="message">it's just that here we don't like using pre-generated files</span></div><div class="line" id="005644"><span class="nick" style="color:#8dd3c7"><a href="#005644" label="[00:56:44]">&lt;stikonas&gt;</a></span><span class="message">no matter how readable they are</span></div><div class="line" id="005658"><span class="nick" style="color:#8dd3c7"><a href="#005658" label="[00:56:58]">&lt;stikonas&gt;</a></span><span class="message">(most of the times they aren't very readable)</span></div><div class="line" id="005819"><span class="nick" style="color:#8dd3c7"><a href="#005819" label="[00:58:19]">&lt;stikonas&gt;</a></span><span class="message">fossy: ok, actually for gnutls it's an optional dependency, so probably we can ignore it</span></div><div class="line" id="005842"><span class="nick" style="color:#8dd3c7"><a href="#005842" label="[00:58:42]">&lt;stikonas&gt;</a></span><span class="message">(only used if tools are built)</span></div><div class="line" id="015529"><span class="nick" style="color:#80b1d3"><a href="#015529" label="[01:55:29]">&lt;oriansj&gt;</a></span><span class="message">stikonas: M2-Planet supports #if, #elif, #else and #endif along with #define and defined</span></div><div class="line" id="015701"><span class="nick" style="color:#80b1d3"><a href="#015701" label="[01:57:01]">&lt;oriansj&gt;</a></span><span class="message">so one can use #if defined(__M2__) for M2-Planet only sections and an #else for things M2-Planet isn't supposed to use</span></div><div class="line" id="015754"><span class="nick" style="color:#389600"><a href="#015754" label="[01:57:54]">&lt;fossy&gt;</a></span><span class="message">le sigh</span></div><div class="line" id="015758"><span class="nick" style="color:#389600"><a href="#015758" label="[01:57:58]">&lt;fossy&gt;</a></span><span class="message">that's good at least</span></div><div class="line" id="020018"><span class="nick" style="color:#80b1d3"><a href="#020018" label="[02:00:18]">&lt;oriansj&gt;</a></span><span class="message">and I too am getting that segfault on include/m2/lib.h</span></div><div class="line" id="020025"><span class="nick" style="color:#80b1d3"><a href="#020025" label="[02:00:25]">&lt;oriansj&gt;</a></span><span class="message">even when built with GCC</span></div><div class="line" id="020026"><span class="nick" style="color:#6b8072"><a href="#020026" label="[02:00:26]">&lt;muurkha&gt;</a></span><span class="message">yay! reproducible bugs!</span></div><div class="line" id="020116"><span class="nick" style="color:#80b1d3"><a href="#020116" label="[02:01:16]">&lt;oriansj&gt;</a></span><span class="message">just wish I knew why my terminal is showing me this: <a rel="nofollow" href="https://paste.debian.net/1216345/">https://paste.debian.net/1216345/</a> </span></div><div class="line" id="020526"><span class="nick" style="color:#80b1d3"><a href="#020526" label="[02:05:26]">&lt;oriansj&gt;</a></span><span class="message">but it is because expansion_end isn't initialized at that point</span></div><div class="line" id="020603"><span class="nick" style="color:#80b1d3"><a href="#020603" label="[02:06:03]">&lt;oriansj&gt;</a></span><span class="message">(struct*) null-&gt;next is a segfault sort of thing</span></div><div class="line" id="030717"><span class="nick" style="color:#80b1d3"><a href="#030717" label="[03:07:17]">&lt;oriansj&gt;</a></span><span class="message">yeah it is the line #define __M2_LIB_H</span></div><div class="line" id="030822"><span class="nick" style="color:#80b1d3"><a href="#030822" label="[03:08:22]">&lt;oriansj&gt;</a></span><span class="message">and I probably should add an error message for the #ifndef</span></div><div class="line" id="030843"><span class="nick" style="color:#80b1d3"><a href="#030843" label="[03:08:43]">&lt;oriansj&gt;</a></span><span class="message">and I'll update M2libc in M2-Planet while I am at it</span></div><div class="line" id="032811"><span class="nick" style="color:#80b1d3"><a href="#032811" label="[03:28:11]">&lt;oriansj&gt;</a></span><span class="message">patches for M2-Planet are now up</span></div><div class="line" id="035538"><span class="nick" style="color:#6d2462"><a href="#035538" label="[03:55:38]">&lt;siraben&gt;</a></span><span class="message">Is anyone familiar with the bootstrapping situation in Emacs? AFAIK it's bootstrapped</span></div><div class="line" id="040454"><span class="nick" style="color:#389600"><a href="#040454" label="[04:04:54]">&lt;fossy&gt;</a></span><span class="message">I will be super disappointed  if emacs is not bootstrappable</span></div><div class="line" id="040511"><span class="nick" style="color:#389600"><a href="#040511" label="[04:05:11]">&lt;fossy&gt;</a></span><span class="message">There is no reason for it to have a dependency on itself let alone be bootsteappable</span></div><div class="line" id="040521"><span class="nick" style="color:#389600"><a href="#040521" label="[04:05:21]">&lt;fossy&gt;</a></span><span class="message">be not bootsteappable</span></div><div class="line" id="042627"><span class="nick" style="color:#6d2462"><a href="#042627" label="[04:26:27]">&lt;siraben&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Building-Emacs.html">https://www.gnu.org/software/emacs/manual/html_node/elisp/Building-Emacs.html</a> </span></div><div class="line" id="042645"><span class="nick" style="color:#6d2462"><a href="#042645" label="[04:26:45]">&lt;siraben&gt;</a></span><span class="message">&quot;Like ‘pdump’, but used while bootstrapping Emacs, when no previous Emacs binary and no *.elc byte-compiled Lisp files are available. The produced dump file is usually named bootstrap-emacs.pdmp in this case. &quot;</span></div><div class="line" id="042653"><span class="nick" style="color:#6d2462"><a href="#042653" label="[04:26:53]">&lt;siraben&gt;</a></span><span class="message">so looks like it is bootstrapped</span></div><div class="line" id="044349"><span class="nick" style="color:#6b8072"><a href="#044349" label="[04:43:49]">&lt;muurkha&gt;</a></span><span class="message">the comment you quoted seems to say the opposite: no previous Emacs binary is needed to pull up Emacs by its bootstraps</span></div><div class="line" id="044441"><span class="nick" style="color:#6b8072"><a href="#044441" label="[04:44:41]">&lt;muurkha&gt;</a></span><span class="message">instead, you can use pbootstrap, which can be compiled without Emacs</span></div><div class="line" id="044615"><span class="nick" style="color:#6b8072"><a href="#044615" label="[04:46:15]">&lt;muurkha&gt;</a></span><span class="message">we should come up with a term that doesn't mean both what we are trying to achieve and also its opposite; &quot;bootstrapping&quot; is compiling a compiler with itself, which is what we are trying to avoid.  how about &quot;acyclic&quot;?</span></div><div class="line" id="044621"><span class="nick" style="color:#6b8072"><a href="#044621" label="[04:46:21]">&lt;muurkha&gt;</a></span><span class="message">we're trying to achieve acyclic builds</span></div><div class="line" id="044720"><span class="nick" style="color:#234e69"><a href="#044720" label="[04:47:20]">&lt;Hagfish&gt;</a></span><span class="message">nice</span></div><div class="line" id="044936"><span class="nick" style="color:#6b8072"><a href="#044936" label="[04:49:36]">&lt;muurkha&gt;</a></span><span class="message">or &quot;ken-proof builds&quot; maybe</span></div><div class="line" id="045046"><span class="nick" style="color:#234e69"><a href="#045046" label="[04:50:46]">&lt;Hagfish&gt;</a></span><span class="message">heh</span></div><div class="line" id="045203"><span class="nick" style="color:#234e69"><a href="#045203" label="[04:52:03]">&lt;Hagfish&gt;</a></span><span class="message">instead of saying &quot;making acyclic&quot; could we say &quot;decycling&quot;?</span></div><div class="line" id="045217"><span class="nick" style="color:#234e69"><a href="#045217" label="[04:52:17]">&lt;Hagfish&gt;</a></span><span class="message">software environmentalism :)</span></div><div class="line" id="045242"><span class="nick" style="color:#6b8072"><a href="#045242" label="[04:52:42]">&lt;muurkha&gt;</a></span><span class="message">upcycling!</span></div><div class="line" id="074520"><span class="nick" style="color:#389600"><a href="#074520" label="[07:45:20]">&lt;fossy&gt;</a></span><span class="message">not sure i agree with that terminology</span></div><div class="line" id="074533"><span class="nick" style="color:#389600"><a href="#074533" label="[07:45:33]">&lt;fossy&gt;</a></span><span class="message">i have never heard bootstrapping meaning compiling a compiler with itself</span></div><div class="line" id="075233"><span class="nick" style="color:#6c3d55"><a href="#075233" label="[07:52:33]">&lt;drakonis&gt;</a></span><span class="message">that's self hosting</span></div><div class="line" id="075439"><span class="nick" style="color:#389600"><a href="#075439" label="[07:54:39]">&lt;fossy&gt;</a></span><span class="message">^</span></div><div class="line" id="081108"><span class="nick" style="color:#6c3d55"><a href="#081108" label="[08:11:08]">&lt;drakonis&gt;</a></span><span class="message">bootstrapping on the other hand is a chain of steps to begin something, a cycle, for example.</span></div><div class="line" id="081134"><span class="nick" style="color:#6c3d55"><a href="#081134" label="[08:11:34]">&lt;drakonis&gt;</a></span><span class="message">or a chain</span></div><div class="line" id="084224"><span class="nick" style="color:#6b8072"><a href="#084224" label="[08:42:24]">&lt;muurkha&gt;</a></span><span class="message">the term derives from the English idiom &quot;to pull oneself up by one's bootstraps&quot;, in violation of Newton's Third Law</span></div><div class="line" id="084259"><span class="nick" style="color:#6b8072"><a href="#084259" label="[08:42:59]">&lt;muurkha&gt;</a></span><span class="message">like how the Baron von Munchausen pulled himself and his horse up out of the swamp by pulling on his braid</span></div><div class="line" id="084401"><span class="nick" style="color:#6b8072"><a href="#084401" label="[08:44:01]">&lt;muurkha&gt;</a></span><span class="message">but check out this Wikipedia article: <a rel="nofollow" href="https://en.wikipedia.org/wiki/Bootstrapping_%28compilers%29">https://en.wikipedia.org/wiki/Bootstrapping_%28compilers%29</a> </span></div><div class="line" id="084413"><span class="nick" style="color:#6b8072"><a href="#084413" label="[08:44:13]">&lt;muurkha&gt;</a></span><span class="message">or this question on Stack Overflow: <a rel="nofollow" href="https://stackoverflow.com/questions/1493747/bootstrapping-a-compiler-why">https://stackoverflow.com/questions/1493747/bootstrapping-a-compiler-why</a> </span></div><div class="line" id="084607"><span class="nick" style="color:#6b8072"><a href="#084607" label="[08:46:07]">&lt;muurkha&gt;</a></span><span class="message">those are two of the top three hits for &quot;bootstrapped compiler&quot; on startpage.com</span></div><div class="line" id="084625"><span class="nick" style="color:#6b8072"><a href="#084625" label="[08:46:25]">&lt;muurkha&gt;</a></span><span class="message">the third one is a geeksforgeeks article written by a muurkha</span></div><div class="line" id="084906"><span class="nick" style="color:#6b8072"><a href="#084906" label="[08:49:06]">&lt;muurkha&gt;</a></span><span class="message">using the opposite definition from Wikipedia and the SO folks</span></div><div class="line" id="090311"><span class="nick" style="color:#8dd3c7"><a href="#090311" label="[09:03:11]">&lt;stikonas&gt;</a></span><span class="message">ok, with new M2-Planet I can confirm that segfault is gone...</span></div><div class="line" id="090348"><span class="nick" style="color:#8dd3c7"><a href="#090348" label="[09:03:48]">&lt;stikonas&gt;</a></span><span class="message">although, mes uses quite a few macros that M2-Planet is not able to cope with</span></div><div class="line" id="092333"><span class="nick" style="color:#8dd3c7"><a href="#092333" label="[09:23:33]">&lt;stikonas&gt;</a></span><span class="message">ok, I got a bit further, at some point later I need to grab laanwj's changes to use risc-v syscalls</span></div><div class="line" id="092345"><span class="nick" style="color:#8dd3c7"><a href="#092345" label="[09:23:45]">&lt;stikonas&gt;</a></span><span class="message">(some differ from x86)</span></div><div class="line" id="160518"><span class="nick" style="color:#d9d9d9"><a href="#160518" label="[16:05:18]">&lt;gbrlwck&gt;</a></span><span class="message">stikonas[m]: why did you alternate between LD and ADDI instructions in <a rel="nofollow" href="https://github.com/oriansj/M2libc/pull/5/files">https://github.com/oriansj/M2libc/pull/5/files</a>  ? aren't they equivalent?</span></div><div class="line" id="161741"><span class="nick" style="color:#d9d9d9"><a href="#161741" label="[16:17:41]">&lt;gbrlwck&gt;</a></span><span class="message">is there a reason there is __sys_call6 but not __sys_call5?</span></div><div class="line" id="221504"><span class="nick" style="color:#bc80bd"><a href="#221504" label="[22:15:04]">&lt;stikonas[m]&gt;</a></span><span class="message">gbrlwck: no, they are different. LD deferences pointer but addi adds value to it</span></div><div class="line" id="221542"><span class="nick" style="color:#bc80bd"><a href="#221542" label="[22:15:42]">&lt;stikonas[m]&gt;</a></span><span class="message">As for syscalls, I guess we just didn't need any with 5 arguments</span></div><div class="line" id="221739"><span class="nick" style="color:#6b8072"><a href="#221739" label="[22:17:39]">&lt;muurkha&gt;</a></span><span class="message">if you did you could just use __sys_call6</span></div><div class="line" id="221746"><span class="nick" style="color:#6b8072"><a href="#221746" label="[22:17:46]">&lt;muurkha&gt;</a></span><span class="message">and pass a dummy sixth argument</span></div><div class="line" id="222642"><span class="nick" style="color:#bc80bd"><a href="#222642" label="[22:26:42]">&lt;stikonas[m]&gt;</a></span><span class="message">muurkha: I guess so</span></div><div class="line" id="222706"><span class="nick" style="color:#bc80bd"><a href="#222706" label="[22:27:06]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, you just set some registers in assembly</span></div><div class="line" id="222837"><span class="nick" style="color:#6b8072"><a href="#222837" label="[22:28:37]">&lt;muurkha&gt;</a></span><span class="message">exactly</span></div><div class="line" id="222845"><span class="nick" style="color:#6b8072"><a href="#222845" label="[22:28:45]">&lt;muurkha&gt;</a></span><span class="message">if they were pushed on the stack it would be a different matter</span></div><div class="line" id="233211"><span class="nick">***</span><span class="message notice">jackhill is now known as KM4MBG</span></div><div class="line" id="233228"><span class="nick">***</span><span class="message notice">KM4MBG is now known as jackhill</span></div><br /></div></body></html>