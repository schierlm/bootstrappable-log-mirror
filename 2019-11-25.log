<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2019-11-25.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000022"><span class="nick" style="color:#389600"><a href="#000022" label="[00:00:22]">&lt;theruran&gt;</a></span><span class="message">excellent! :D</span></div><div class="line" id="000053"><span class="nick" style="color:#389600"><a href="#000053" label="[00:00:53]">&lt;theruran&gt;</a></span><span class="message">works üëç</span></div><div class="line" id="000057"><span class="nick" style="color:#8dd3c7"><a href="#000057" label="[00:00:57]">&lt;oriansj&gt;</a></span><span class="message">good</span></div><div class="line" id="000124"><span class="nick" style="color:#389600"><a href="#000124" label="[00:01:24]">&lt;theruran&gt;</a></span><span class="message">and you implemented (display)?</span></div><div class="line" id="000135"><span class="nick" style="color:#8dd3c7"><a href="#000135" label="[00:01:35]">&lt;oriansj&gt;</a></span><span class="message">yeah</span></div><div class="line" id="000245"><span class="nick" style="color:#8dd3c7"><a href="#000245" label="[00:02:45]">&lt;oriansj&gt;</a></span><span class="message">checkout mes_builtins.c to see all of the builtins</span></div><div class="line" id="000253"><span class="nick" style="color:#8dd3c7"><a href="#000253" label="[00:02:53]">&lt;oriansj&gt;</a></span><span class="message">(Toward the bottom)</span></div><div class="line" id="000632"><span class="nick" style="color:#8dd3c7"><a href="#000632" label="[00:06:32]">&lt;oriansj&gt;</a></span><span class="message">by passing a single list to the primitive it gives me fine grained control of how primitives are expected to behave</span></div><div class="line" id="001156"><span class="nick" style="color:#389600"><a href="#001156" label="[00:11:56]">&lt;theruran&gt;</a></span><span class="message">I like that. It looks good.</span></div><div class="line" id="001209"><span class="nick" style="color:#389600"><a href="#001209" label="[00:12:09]">&lt;theruran&gt;</a></span><span class="message">So why doesn't mes support tail-call optimization?</span></div><div class="line" id="001235"><span class="nick" style="color:#8dd3c7"><a href="#001235" label="[00:12:35]">&lt;oriansj&gt;</a></span><span class="message">theruran: we haven't put in the effort</span></div><div class="line" id="001252"><span class="nick" style="color:#8dd3c7"><a href="#001252" label="[00:12:52]">&lt;oriansj&gt;</a></span><span class="message">largely because it isn't critical to the bootstrapping problem</span></div><div class="line" id="001259"><span class="nick" style="color:#389600"><a href="#001259" label="[00:12:59]">&lt;theruran&gt;</a></span><span class="message">OK - I wasn't sure if it was excluded from the design</span></div><div class="line" id="001408"><span class="nick" style="color:#8dd3c7"><a href="#001408" label="[00:14:08]">&lt;oriansj&gt;</a></span><span class="message">it might be if it makes things faster or simpler</span></div><div class="line" id="001439"><span class="nick" style="color:#389600"><a href="#001439" label="[00:14:39]">&lt;theruran&gt;</a></span><span class="message">right on</span></div><div class="line" id="001527"><span class="nick" style="color:#389600"><a href="#001527" label="[00:15:27]">&lt;theruran&gt;</a></span><span class="message">you might be pleased to know that clang-check only finds 3 warnings here</span></div><div class="line" id="001658"><span class="nick" style="color:#8dd3c7"><a href="#001658" label="[00:16:58]">&lt;oriansj&gt;</a></span><span class="message">I'm surprised that there are any warnings</span></div><div class="line" id="002035"><span class="nick" style="color:#6b8072"><a href="#002035" label="[00:20:35]">&lt;safinaskar&gt;</a></span><span class="message">hi</span></div><div class="line" id="002116"><span class="nick" style="color:#6b8072"><a href="#002116" label="[00:21:16]">&lt;safinaskar&gt;</a></span><span class="message">oriansj: hi</span></div><div class="line" id="002322"><span class="nick" style="color:#80b1d3"><a href="#002322" label="[00:23:22]">&lt;vagrantc&gt;</a></span><span class="message">janneke: oooh, mes 0.21! hope i can drop some of the debian patches, then. :)</span></div><div class="line" id="002330"><span class="nick" style="color:#8dd3c7"><a href="#002330" label="[00:23:30]">&lt;oriansj&gt;</a></span><span class="message">greetings safinaskar</span></div><div class="line" id="002349"><span class="nick" style="color:#6d2462"><a href="#002349" label="[00:23:49]">&lt;janneke&gt;</a></span><span class="message">vagrantc: yes...i'll announce once savannah is up again</span></div><div class="line" id="002424"><span class="nick" style="color:#80b1d3"><a href="#002424" label="[00:24:24]">&lt;vagrantc&gt;</a></span><span class="message">janneke: there was also a typo in one of the manpages: evalute -&gt; evaluate ... would be nice to catch before release :)</span></div><div class="line" id="002442"><span class="nick" style="color:#8dd3c7"><a href="#002442" label="[00:24:42]">&lt;oriansj&gt;</a></span><span class="message">safinaskar: you have concerns about guix's bootstrap; does any code in mescc-tools-seed not seem easy to understand?</span></div><div class="line" id="002455"><span class="nick" style="color:#80b1d3"><a href="#002455" label="[00:24:55]">&lt;vagrantc&gt;</a></span><span class="message">janneke: oh, i already submitted a patch for the typo :)</span></div><div class="line" id="002458"><span class="nick" style="color:#6d2462"><a href="#002458" label="[00:24:58]">&lt;janneke&gt;</a></span><span class="message">vagrantc: thanks!  too late though, -&gt; 0.22 :-)</span></div><div class="line" id="002524"><span class="nick" style="color:#8dd3c7"><a href="#002524" label="[00:25:24]">&lt;oriansj&gt;</a></span><span class="message">git commit --amend</span></div><div class="line" id="002552"><span class="nick" style="color:#80b1d3"><a href="#002552" label="[00:25:52]">&lt;vagrantc&gt;</a></span><span class="message">i even sent it to bug-mes in June!</span></div><div class="line" id="002605"><span class="nick" style="color:#6d2462"><a href="#002605" label="[00:26:05]">&lt;janneke&gt;</a></span><span class="message">oh!</span></div><div class="line" id="002657"><span class="nick" style="color:#80b1d3"><a href="#002657" label="[00:26:57]">&lt;vagrantc&gt;</a></span><span class="message"> maybe you've even applied it</span></div><div class="line" id="002748"><span class="nick" style="color:#6d2462"><a href="#002748" label="[00:27:48]">&lt;janneke&gt;</a></span><span class="message">it's on my list now</span></div><div class="line" id="002809"><span class="nick" style="color:#80b1d3"><a href="#002809" label="[00:28:09]">&lt;vagrantc&gt;</a></span><span class="message">:)</span></div><div class="line" id="002821"><span class="nick" style="color:#80b1d3"><a href="#002821" label="[00:28:21]">&lt;vagrantc&gt;</a></span><span class="message">is there a debbugs for mes ?</span></div><div class="line" id="002825"><span class="nick" style="color:#80b1d3"><a href="#002825" label="[00:28:25]">&lt;vagrantc&gt;</a></span><span class="message">or just the list?</span></div><div class="line" id="002901"><span class="nick" style="color:#6d2462"><a href="#002901" label="[00:29:01]">&lt;janneke&gt;</a></span><span class="message">no, there's only the list</span></div><div class="line" id="002922"><span class="nick" style="color:#6d2462"><a href="#002922" label="[00:29:22]">&lt;janneke&gt;</a></span><span class="message">maybe debbugs would be nice, i like it for guix</span></div><div class="line" id="003920"><span class="nick" style="color:#8dd3c7"><a href="#003920" label="[00:39:20]">&lt;oriansj&gt;</a></span><span class="message">theruran: ironically I think it might actually be a bug in clang-check *.c -analyze</span></div><div class="line" id="004007"><span class="nick" style="color:#6b8072"><a href="#004007" label="[00:40:07]">&lt;safinaskar&gt;</a></span><span class="message">oriansj: &quot;any code in mescc-tools-seed not seem easy to understand&quot; - well, i didn't see this project yet. i just came to #guix to ask for this &quot;autoreconf everything&quot; mode</span></div><div class="line" id="004021"><span class="nick" style="color:#8dd3c7"><a href="#004021" label="[00:40:21]">&lt;oriansj&gt;</a></span><span class="message">for example if you put require(NULL != i, &quot;Impossible quasiquote processed?\n&quot;); right above the i-&gt;cdr = nil; it complains about, the error doesn't disappear; despite the fact it becomes impossible for that code to occur if i == NULL</span></div><div class="line" id="004125"><span class="nick" style="color:#6b8072"><a href="#004125" label="[00:41:25]">&lt;safinaskar&gt;</a></span><span class="message">oriansj: &quot;then used stage0; it even involves custom hardware&quot; - where is this stage0?</span></div><div class="line" id="004128"><span class="nick" style="color:#389600"><a href="#004128" label="[00:41:28]">&lt;theruran&gt;</a></span><span class="message">oriansj: good catch. These static analysis tools for C can only do so much</span></div><div class="line" id="004135"><span class="nick" style="color:#8dd3c7"><a href="#004135" label="[00:41:35]">&lt;oriansj&gt;</a></span><span class="message">safinaskar: it is a non-issue</span></div><div class="line" id="004203"><span class="nick" style="color:#8dd3c7"><a href="#004203" label="[00:42:03]">&lt;oriansj&gt;</a></span><span class="message">safinaskar: <a rel="nofollow" href="https://github.com/oriansj/stage0">https://github.com/oriansj/stage0</a> </span></div><div class="line" id="004249"><span class="nick" style="color:#389600"><a href="#004249" label="[00:42:49]">&lt;theruran&gt;</a></span><span class="message">Reading this page and I am horrified by the severity and impact described <a rel="nofollow" href="https://web.archive.org/web/20190921042741/http://wiki.c2.com/?TheKenThompsonHack">https://web.archive.org/web/20190921042741/http://wiki.c2.com/?TheKenThompsonHack</a> </span></div><div class="line" id="004322"><span class="nick" style="color:#389600"><a href="#004322" label="[00:43:22]">&lt;theruran&gt;</a></span><span class="message">even worse than I thought</span></div><div class="line" id="004328"><span class="nick" style="color:#8dd3c7"><a href="#004328" label="[00:43:28]">&lt;oriansj&gt;</a></span><span class="message">theruran: have you seen the coding machines story yet?</span></div><div class="line" id="004341"><span class="nick" style="color:#389600"><a href="#004341" label="[00:43:41]">&lt;theruran&gt;</a></span><span class="message">oriansj: no. D:</span></div><div class="line" id="004425"><span class="nick" style="color:#8dd3c7"><a href="#004425" label="[00:44:25]">&lt;oriansj&gt;</a></span><span class="message">theruran: <a rel="nofollow" href="https://www.teamten.com/lawrence/writings/coding-machines/">https://www.teamten.com/lawrence/writings/coding-machines/</a> </span></div><div class="line" id="004510"><span class="nick" style="color:#389600"><a href="#004510" label="[00:45:10]">&lt;theruran&gt;</a></span><span class="message">this is great</span></div><div class="line" id="004619"><span class="nick" style="color:#8dd3c7"><a href="#004619" label="[00:46:19]">&lt;oriansj&gt;</a></span><span class="message">theruran: and let us not forget <a rel="nofollow" href="https://www.forbes.com/sites/quora/2014/12/05/what-is-a-coders-worst-nightmare/">https://www.forbes.com/sites/quora/2014/12/05/what-is-a-coders-worst-nightmare/</a> </span></div><div class="line" id="004731"><span class="nick" style="color:#6b8072"><a href="#004731" label="[00:47:31]">&lt;safinaskar&gt;</a></span><span class="message">oriansj: well, i looked at stage0. it seems actually as code for custom hardware, but... as well as i understand this hardware doesn't exist in bare metal, right? and we have to emulate it today, right?</span></div><div class="line" id="004857"><span class="nick" style="color:#8dd3c7"><a href="#004857" label="[00:48:57]">&lt;oriansj&gt;</a></span><span class="message">safinaskar: well the TTL design hasn't been done because it is a lower priority</span></div><div class="line" id="004951"><span class="nick" style="color:#8dd3c7"><a href="#004951" label="[00:49:51]">&lt;oriansj&gt;</a></span><span class="message">There is nothing stopping anyone from implementing it</span></div><div class="line" id="005213"><span class="nick" style="color:#6b8072"><a href="#005213" label="[00:52:13]">&lt;safinaskar&gt;</a></span><span class="message">oriansj: <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-seed">https://github.com/oriansj/mescc-tools-seed</a>  : &quot;any eternal programs&quot; - you actually mean eternal programs or this is a typo?</span></div><div class="line" id="005226"><span class="nick" style="color:#8dd3c7"><a href="#005226" label="[00:52:26]">&lt;oriansj&gt;</a></span><span class="message">safinaskar: typo</span></div><div class="line" id="005235"><span class="nick" style="color:#8dd3c7"><a href="#005235" label="[00:52:35]">&lt;oriansj&gt;</a></span><span class="message">external is the word</span></div><div class="line" id="005302"><span class="nick" style="color:#8dd3c7"><a href="#005302" label="[00:53:02]">&lt;oriansj&gt;</a></span><span class="message">because mescc-tools-seed doesn't even require a shell to be built</span></div><div class="line" id="005345"><span class="nick" style="color:#8dd3c7"><a href="#005345" label="[00:53:45]">&lt;oriansj&gt;</a></span><span class="message">the kaem-optional-seed can even be used as an init and bootstrap system and a shell</span></div><div class="line" id="005423"><span class="nick" style="color:#8dd3c7"><a href="#005423" label="[00:54:23]">&lt;oriansj&gt;</a></span><span class="message">then fork into that shell to allow you to do as you wish</span></div><div class="line" id="005431"><span class="nick" style="color:#6b8072"><a href="#005431" label="[00:54:31]">&lt;safinaskar&gt;</a></span><span class="message">oriansj: well, i like your project. and i want to do the same at some point of my life :)</span></div><div class="line" id="005453"><span class="nick" style="color:#8dd3c7"><a href="#005453" label="[00:54:53]">&lt;oriansj&gt;</a></span><span class="message">safinaskar: nothing stopping you from helping now</span></div><div class="line" id="005559"><span class="nick" style="color:#6b8072"><a href="#005559" label="[00:55:59]">&lt;safinaskar&gt;</a></span><span class="message">oriansj: well, right now i am busy with other things. but this project is very interesting. and this is quiet possible i will return to it some day, try to reproduce, probably will report some bugs, patches etc</span></div><div class="line" id="005642"><span class="nick" style="color:#8dd3c7"><a href="#005642" label="[00:56:42]">&lt;oriansj&gt;</a></span><span class="message">safinaskar: that is life, just make sure to make time for the things you care about first</span></div><div class="line" id="005654"><span class="nick" style="color:#6b8072"><a href="#005654" label="[00:56:54]">&lt;safinaskar&gt;</a></span><span class="message">oriansj: :)</span></div><div class="line" id="005757"><span class="nick" style="color:#6b8072"><a href="#005757" label="[00:57:57]">&lt;safinaskar&gt;</a></span><span class="message">oriansj: and ideally i want to really bootstrap straight from hardware. and this hardware should be build without existing computers</span></div><div class="line" id="005830"><span class="nick" style="color:#8dd3c7"><a href="#005830" label="[00:58:30]">&lt;oriansj&gt;</a></span><span class="message">safinaskar: it will be built in TTL (individual NAND, NOR, AND, XOR circuits by hand)</span></div><div class="line" id="005850"><span class="nick" style="color:#6b8072"><a href="#005850" label="[00:58:50]">&lt;safinaskar&gt;</a></span><span class="message">cool</span></div><div class="line" id="005906"><span class="nick" style="color:#8dd3c7"><a href="#005906" label="[00:59:06]">&lt;oriansj&gt;</a></span><span class="message">but an FPGA version will made first to allow for design issues to be detected and corrected</span></div><div class="line" id="010007"><span class="nick" style="color:#8dd3c7"><a href="#010007" label="[01:00:07]">&lt;oriansj&gt;</a></span><span class="message">There is even an open call for someone to do an i486 on iCE40 FPGAs</span></div><div class="line" id="010116"><span class="nick" style="color:#8dd3c7"><a href="#010116" label="[01:01:16]">&lt;oriansj&gt;</a></span><span class="message">theruran: g_stack = calloc(stack, sizeof(struct cell)); warning however makes less sense given that it is struct cell** g_stack</span></div><div class="line" id="010306"><span class="nick" style="color:#8dd3c7"><a href="#010306" label="[01:03:06]">&lt;oriansj&gt;</a></span><span class="message">but atleast I can clear it out by doing sizeof(struct cell*)</span></div><div class="line" id="010409"><span class="nick" style="color:#6b8072"><a href="#010409" label="[01:04:09]">&lt;safinaskar&gt;</a></span><span class="message">oriansj: <a rel="nofollow" href="https://www.secondwavemedia.com/capitalgains/innovationnews/edustem0831.aspx">https://www.secondwavemedia.com/capitalgains/innovationnews/edustem0831.aspx</a>  - is this from you? or just similar name?</span></div><div class="line" id="010831"><span class="nick" style="color:#8dd3c7"><a href="#010831" label="[01:08:31]">&lt;oriansj&gt;</a></span><span class="message">safinaskar: an old project</span></div><div class="line" id="010904"><span class="nick" style="color:#389600"><a href="#010904" label="[01:09:04]">&lt;theruran&gt;</a></span><span class="message">oriansj: thanks for looking into it</span></div><div class="line" id="010943"><span class="nick" style="color:#6b8072"><a href="#010943" label="[01:09:43]">&lt;safinaskar&gt;</a></span><span class="message">oriansj: idea seems strange. also i have hfa</span></div><div class="line" id="010955"><span class="nick" style="color:#389600"><a href="#010955" label="[01:09:55]">&lt;theruran&gt;</a></span><span class="message">why not target a SUBLEQ computer for the stage0 seed?</span></div><div class="line" id="011001"><span class="nick" style="color:#6b8072"><a href="#011001" label="[01:10:01]">&lt;safinaskar&gt;</a></span><span class="message">oriansj: well, real doctor said me this</span></div><div class="line" id="011031"><span class="nick" style="color:#8dd3c7"><a href="#011031" label="[01:10:31]">&lt;oriansj&gt;</a></span><span class="message">theruran: do you want to program a C compiler in that assembly language?</span></div><div class="line" id="011054"><span class="nick" style="color:#8dd3c7"><a href="#011054" label="[01:10:54]">&lt;oriansj&gt;</a></span><span class="message">safinaskar: good, use it to your advantage</span></div><div class="line" id="011057"><span class="nick" style="color:#389600"><a href="#011057" label="[01:10:57]">&lt;theruran&gt;</a></span><span class="message">oriansj: oh, by hand? probably not :)</span></div><div class="line" id="011113"><span class="nick" style="color:#8dd3c7"><a href="#011113" label="[01:11:13]">&lt;oriansj&gt;</a></span><span class="message">theruran: bootstrapping work is ALL by hand</span></div><div class="line" id="011151"><span class="nick" style="color:#389600"><a href="#011151" label="[01:11:51]">&lt;theruran&gt;</a></span><span class="message">so I guess by your measure of minimalism being cognitive load, SUBLEQ would be too much</span></div><div class="line" id="011153"><span class="nick" style="color:#6b8072"><a href="#011153" label="[01:11:53]">&lt;safinaskar&gt;</a></span><span class="message">oriansj: what do you like more: lisp or typed functional languages (haskell, ocaml, etc)?</span></div><div class="line" id="011231"><span class="nick" style="color:#8dd3c7"><a href="#011231" label="[01:12:31]">&lt;oriansj&gt;</a></span><span class="message">theruran: and I know  I can do it on knight: <a rel="nofollow" href="https://github.com/oriansj/stage0/blob/master/stage2/cc_x86.s">https://github.com/oriansj/stage0/blob/master/stage2/cc_x86.s</a> </span></div><div class="line" id="011320"><span class="nick" style="color:#389600"><a href="#011320" label="[01:13:20]">&lt;theruran&gt;</a></span><span class="message">so Knight is hitting a sweet-spot for comprehensibility?</span></div><div class="line" id="011339"><span class="nick" style="color:#8dd3c7"><a href="#011339" label="[01:13:39]">&lt;oriansj&gt;</a></span><span class="message">safinaskar: depends entirely on the problem being solved;</span></div><div class="line" id="011407"><span class="nick" style="color:#8dd3c7"><a href="#011407" label="[01:14:07]">&lt;oriansj&gt;</a></span><span class="message">theruran: looking at that assembly, do you feel like it would be hard to make something complex?</span></div><div class="line" id="011510"><span class="nick" style="color:#389600"><a href="#011510" label="[01:15:10]">&lt;theruran&gt;</a></span><span class="message">I guess not. The instruction set seems pretty obvious</span></div><div class="line" id="011515"><span class="nick" style="color:#8dd3c7"><a href="#011515" label="[01:15:15]">&lt;oriansj&gt;</a></span><span class="message">There is no perfect tool for building a house, there are times you need a hammer or a saw or a drill</span></div><div class="line" id="011543"><span class="nick" style="color:#8dd3c7"><a href="#011543" label="[01:15:43]">&lt;oriansj&gt;</a></span><span class="message">theruran: it is designed to be easy to implement too</span></div><div class="line" id="011602"><span class="nick" style="color:#6b8072"><a href="#011602" label="[01:16:02]">&lt;safinaskar&gt;</a></span><span class="message">oriansj: i think typed programming languages should be used always except for throw-away tasks</span></div><div class="line" id="011638"><span class="nick" style="color:#8dd3c7"><a href="#011638" label="[01:16:38]">&lt;oriansj&gt;</a></span><span class="message">safinaskar: you can't use typed programming languages in the bottom layers of any bootstrap</span></div><div class="line" id="011712"><span class="nick" style="color:#6b8072"><a href="#011712" label="[01:17:12]">&lt;safinaskar&gt;</a></span><span class="message">oriansj: yes :)  but then we should go as quickly as possible to typed ones</span></div><div class="line" id="011744"><span class="nick" style="color:#8dd3c7"><a href="#011744" label="[01:17:44]">&lt;oriansj&gt;</a></span><span class="message">safinaskar: and by typed do you mean supporting types like C or real types like Haskell?</span></div><div class="line" id="011811"><span class="nick" style="color:#389600"><a href="#011811" label="[01:18:11]">&lt;theruran&gt;</a></span><span class="message">well I was thinking to bootstrap into KLambda then Shen and use that to write a compiler for DDC. but that just seemed like another one of my crazy ideas :)</span></div><div class="line" id="011821"><span class="nick" style="color:#6b8072"><a href="#011821" label="[01:18:21]">&lt;safinaskar&gt;</a></span><span class="message">oriansj: strong typing (like haskell) is of course better</span></div><div class="line" id="011902"><span class="nick" style="color:#8dd3c7"><a href="#011902" label="[01:19:02]">&lt;oriansj&gt;</a></span><span class="message">theruran: crazy ideas are the ones that flower here; especially if you are willing to do the leg work</span></div><div class="line" id="012018"><span class="nick" style="color:#8dd3c7"><a href="#012018" label="[01:20:18]">&lt;oriansj&gt;</a></span><span class="message">safinaskar: so the current haskell bootstrap problem must be a serious concern for you</span></div><div class="line" id="012036"><span class="nick" style="color:#6b8072"><a href="#012036" label="[01:20:36]">&lt;safinaskar&gt;</a></span><span class="message">oriansj: yes</span></div><div class="line" id="012055"><span class="nick" style="color:#389600"><a href="#012055" label="[01:20:55]">&lt;theruran&gt;</a></span><span class="message">oriansj: I mean, maybe... I think I need to understand more of how this problem of potentially pervasive backdoored tools could affect the claims of my research. If I can't use any off-the-shelf compiler for fear of hidden channels embedded in the output...</span></div><div class="line" id="012059"><span class="nick" style="color:#8dd3c7"><a href="#012059" label="[01:20:59]">&lt;oriansj&gt;</a></span><span class="message">safinaskar: good; would you like to help us with that?</span></div><div class="line" id="012131"><span class="nick" style="color:#6b8072"><a href="#012131" label="[01:21:31]">&lt;safinaskar&gt;</a></span><span class="message">oriansj: well, not now :)</span></div><div class="line" id="012138"><span class="nick" style="color:#6b8072"><a href="#012138" label="[01:21:38]">&lt;safinaskar&gt;</a></span><span class="message">oriansj: also, i think it is entirely possible to create &quot;typed lisp&quot;, i. e. strong static typed language, which is otherwise very similar to lisp, has all its features. i. e. it is simple, homoiconic, has small meta-circular-interpreter (that maxwell equations!), has lisp-style macros, has lisp-like repl</span></div><div class="line" id="012147"><span class="nick" style="color:#8dd3c7"><a href="#012147" label="[01:21:47]">&lt;oriansj&gt;</a></span><span class="message">theruran: just use gcc; we will solve that problem for you</span></div><div class="line" id="012211"><span class="nick" style="color:#8dd3c7"><a href="#012211" label="[01:22:11]">&lt;oriansj&gt;</a></span><span class="message">safinaskar: yes that is called Haskell's core language</span></div><div class="line" id="012353"><span class="nick" style="color:#8dd3c7"><a href="#012353" label="[01:23:53]">&lt;oriansj&gt;</a></span><span class="message">theruran: or figure out how to bootstrap M2-Planet on your arbitrary hardware</span></div><div class="line" id="012436"><span class="nick" style="color:#8dd3c7"><a href="#012436" label="[01:24:36]">&lt;oriansj&gt;</a></span><span class="message">because if M2-Planet can be ported to it, you can leverage it's cross-platform verfication capability to prove properties of alternate platforms</span></div><div class="line" id="012458"><span class="nick" style="color:#6b8072"><a href="#012458" label="[01:24:58]">&lt;safinaskar&gt;</a></span><span class="message">oriansj: haskell has something similar to lisp macros. this feature is called template haskell</span></div><div class="line" id="012513"><span class="nick" style="color:#389600"><a href="#012513" label="[01:25:13]">&lt;theruran&gt;</a></span><span class="message">oriansj: I can't use GCC. Well there is the matter of Independence in Appearance in using tools developed by defense contractors who are funded by superpower governments, such as OCaml by Inria or F# by Microsoft. I think it's highly unlikely the FStar compiler is backdoored but I have no way of proving it outside of this bootstrappable/DDC process. And of course, it could later be backdoored.</span></div><div class="line" id="012514"><span class="nick" style="color:#6b8072"><a href="#012514" label="[01:25:14]">&lt;safinaskar&gt;</a></span><span class="message">oriansj: but it is not as powerful as lisp macros</span></div><div class="line" id="012537"><span class="nick" style="color:#389600"><a href="#012537" label="[01:25:37]">&lt;theruran&gt;</a></span><span class="message">oriansj: lemme think about that</span></div><div class="line" id="012538"><span class="nick" style="color:#6b8072"><a href="#012538" label="[01:25:38]">&lt;safinaskar&gt;</a></span><span class="message">oriansj: template haskell cannot be arbitary nested. i. e. there is no analogue of (quote (quote x))</span></div><div class="line" id="012620"><span class="nick" style="color:#8dd3c7"><a href="#012620" label="[01:26:20]">&lt;oriansj&gt;</a></span><span class="message">safinaskar: do you really need that do make programs that solve your problems?</span></div><div class="line" id="012625"><span class="nick" style="color:#6b8072"><a href="#012625" label="[01:26:25]">&lt;safinaskar&gt;</a></span><span class="message">oriansj: also, as well, as i know, this is not possible to construct haskell expression using template haskell and then evaluate it at runtime using &quot;eval&quot;.</span></div><div class="line" id="012706"><span class="nick" style="color:#6b8072"><a href="#012706" label="[01:27:06]">&lt;safinaskar&gt;</a></span><span class="message">oriansj: so i want to create language which is typed, but even more close to lisp than haskell. which has macros with comparable power</span></div><div class="line" id="012806"><span class="nick" style="color:#6b8072"><a href="#012806" label="[01:28:06]">&lt;safinaskar&gt;</a></span><span class="message">oriansj: so that such language can be ultimate argument against lisp fans. so that i can show it to them and say &quot;this language can do everything your lisp can, but it is typed. so stop using your lisp and use this language instead&quot;</span></div><div class="line" id="012838"><span class="nick" style="color:#6b8072"><a href="#012838" label="[01:28:38]">&lt;safinaskar&gt;</a></span><span class="message">oriansj: currently i will not do this. i busy with other things. so, you can do this :)</span></div><div class="line" id="012910"><span class="nick" style="color:#8dd3c7"><a href="#012910" label="[01:29:10]">&lt;oriansj&gt;</a></span><span class="message">safinaskar: I have no desire to do that; largely because it would not solve a real problem</span></div><div class="line" id="012945"><span class="nick" style="color:#8dd3c7"><a href="#012945" label="[01:29:45]">&lt;oriansj&gt;</a></span><span class="message">There are lisp programmers who use haskell and haskell programmers who use lisp.</span></div><div class="line" id="013030"><span class="nick" style="color:#8dd3c7"><a href="#013030" label="[01:30:30]">&lt;oriansj&gt;</a></span><span class="message">perfection is a road not a destination</span></div><div class="line" id="013054"><span class="nick" style="color:#389600"><a href="#013054" label="[01:30:54]">&lt;theruran&gt;</a></span><span class="message">One of my goals is to create an FStar-in-LISP which sounds similar to what you describe safinaskar</span></div><div class="line" id="013057"><span class="nick" style="color:#8dd3c7"><a href="#013057" label="[01:30:57]">&lt;oriansj&gt;</a></span><span class="message">and every great feature has a cost paid in possibilities</span></div><div class="line" id="013232"><span class="nick" style="color:#389600"><a href="#013232" label="[01:32:32]">&lt;theruran&gt;</a></span><span class="message">You know, because FStar is licensed Apache v2 and requires signing away your copyright to Microsoft through a Contributor License Agreement. That alone is a problem. But it bootstraps from OCaml or F# which is kinda *yikes* from a bootstrappable point of view.</span></div><div class="line" id="013653"><span class="nick" style="color:#6b8072"><a href="#013653" label="[01:36:53]">&lt;safinaskar&gt;</a></span><span class="message">oriansj: i think it is absolutely possible to create this &quot;typed lisp&quot; such way that its metacircular interpreter will be very small, similar to lisp's one. but it will be typed, so it will be harder to make a mistake in it</span></div><div class="line" id="013654"><span class="nick" style="color:#389600"><a href="#013654" label="[01:36:54]">&lt;theruran&gt;</a></span><span class="message">oriansj: if M2-Planet could be used to write a Shen compiler in a C subset, that could be useful. Currently it requires a huge trusted binary which then self-hosts the Shen compiler to KLambda primitives</span></div><div class="line" id="013826"><span class="nick" style="color:#389600"><a href="#013826" label="[01:38:26]">&lt;theruran&gt;</a></span><span class="message">I still need understand my problem more to layout a detailed plan :/</span></div><div class="line" id="013958"><span class="nick" style="color:#8dd3c7"><a href="#013958" label="[01:39:58]">&lt;oriansj&gt;</a></span><span class="message">theruran: well discussing and sharing of thoughts and ideas here make it easier to discover possible solutions</span></div><div class="line" id="014103"><span class="nick" style="color:#6b8072"><a href="#014103" label="[01:41:03]">&lt;safinaskar&gt;</a></span><span class="message">oriansj: theruran: i once wrote a nearly working checker for <a rel="nofollow" href="https://en.wikipedia.org/wiki/Pure_type_system">https://en.wikipedia.org/wiki/Pure_type_system</a>  in haskell</span></div><div class="line" id="014232"><span class="nick" style="color:#8dd3c7"><a href="#014232" label="[01:42:32]">&lt;oriansj&gt;</a></span><span class="message">safinaskar: link?</span></div><div class="line" id="014451"><span class="nick" style="color:#6b8072"><a href="#014451" label="[01:44:51]">&lt;safinaskar&gt;</a></span><span class="message">oriansj: well, unfortunately i was not able to produce bug-free version of pts checker. here is my various attempts: <a rel="nofollow" href="http://safinaskar.com/f/pa.tar">http://safinaskar.com/f/pa.tar</a>  . &quot;pts&quot; subdir contains pts checker, which somehow works</span></div><div class="line" id="014548"><span class="nick" style="color:#6b8072"><a href="#014548" label="[01:45:48]">&lt;safinaskar&gt;</a></span><span class="message">oriansj: other subdirs contain similar checkers for similar languages. programs has tests, so you can try to understand my languages by reading this tests</span></div><div class="line" id="014844"><span class="nick" style="color:#8dd3c7"><a href="#014844" label="[01:48:44]">&lt;oriansj&gt;</a></span><span class="message">safinaskar: it is good to see you striving to achieve something interesting</span></div><div class="line" id="015032"><span class="nick" style="color:#389600"><a href="#015032" label="[01:50:32]">&lt;theruran&gt;</a></span><span class="message">oriansj: I guess my plan so far is to write a provably-correct KLambda virtual machine in FStar, and then /somehow/ target that ISA with the FStar compiler to build some verified tools/libraries. That's just temporary though, since I think the long-term path is to use Shen to write a new LISP that reimplements the features of FStar. That would mean bootstrapping Shen from source and applying DDC.</span></div><div class="line" id="015033"><span class="nick" style="color:#6b8072"><a href="#015033" label="[01:50:33]">&lt;safinaskar&gt;</a></span><span class="message">oriansj: there is pts checker in haskell written by someone else, which is actually working, documented and feature-rich. yarrow: <a rel="nofollow" href="http://web.archive.org/web/20180924133846/http://www.cs.kun.nl/~janz/yarrow/">http://web.archive.org/web/20180924133846/http://www.cs.kun.nl/~janz/yarrow/</a> </span></div><div class="line" id="015039"><span class="nick" style="color:#389600"><a href="#015039" label="[01:50:39]">&lt;theruran&gt;</a></span><span class="message">it may sound crazy now...</span></div><div class="line" id="015207"><span class="nick" style="color:#6b8072"><a href="#015207" label="[01:52:07]">&lt;safinaskar&gt;</a></span><span class="message">my github is github.com/safinaskar</span></div><div class="line" id="015244"><span class="nick" style="color:#8dd3c7"><a href="#015244" label="[01:52:44]">&lt;oriansj&gt;</a></span><span class="message">theruran: stage0 still sounds crazy to some people</span></div><div class="line" id="015257"><span class="nick" style="color:#8dd3c7"><a href="#015257" label="[01:52:57]">&lt;oriansj&gt;</a></span><span class="message">safinaskar: yes</span></div><div class="line" id="015333"><span class="nick" style="color:#389600"><a href="#015333" label="[01:53:33]">&lt;theruran&gt;</a></span><span class="message">safinaskar: can you ELI5 the benefits of a Pure type system? To me, the Wikipedia article is just describing what it is.</span></div><div class="line" id="015542"><span class="nick" style="color:#6b8072"><a href="#015542" label="[01:55:42]">&lt;safinaskar&gt;</a></span><span class="message">theruran: this is *very* simple logic foundation. and you can build nearly every other logic on top of it. other logics can be very easily described in terms of it</span></div><div class="line" id="015632"><span class="nick" style="color:#6b8072"><a href="#015632" label="[01:56:32]">&lt;safinaskar&gt;</a></span><span class="message">theruran: for example, first-order logic, second order logic, higher order logic, simply typed lambda calculi, lambda calculi with dependent types etc</span></div><div class="line" id="015640"><span class="nick" style="color:#389600"><a href="#015640" label="[01:56:40]">&lt;theruran&gt;</a></span><span class="message">safinaskar: such as Shen's sequent calculus which is itself implemented in LISP-embedded Prolog?</span></div><div class="line" id="015824"><span class="nick" style="color:#389600"><a href="#015824" label="[01:58:24]">&lt;theruran&gt;</a></span><span class="message">safinaskar: I have been looking at this the past few days. In Racket I see there is relational logic done in Ocelot. And I was wondering if it makes sense to implement FOL using that. And then wondering how to implement weakest-precondition calculus</span></div><div class="line" id="020000"><span class="nick" style="color:#6b8072"><a href="#020000" label="[02:00:00]">&lt;safinaskar&gt;</a></span><span class="message">theruran: well, if you want to understand pts, i very recommend this book: <a rel="nofollow" href="https://repository.ubn.ru.nl/handle/2066/17231">https://repository.ubn.ru.nl/handle/2066/17231</a>  . it describes various logics and culminates in pts as generalization of all them</span></div><div class="line" id="020108"><span class="nick" style="color:#6b8072"><a href="#020108" label="[02:01:08]">&lt;safinaskar&gt;</a></span><span class="message">theruran: i try to describe core idea. in haskell you have terms and types. types themselves have &quot;types&quot; named kinds. theoretically you can kinds have types, too</span></div><div class="line" id="020151"><span class="nick" style="color:#6b8072"><a href="#020151" label="[02:01:51]">&lt;safinaskar&gt;</a></span><span class="message">theruran: pts is generalization of such idea. you can have arbitrary deep hierarchy with finite or infinite number of levels</span></div><div class="line" id="020256"><span class="nick" style="color:#6b8072"><a href="#020256" label="[02:02:56]">&lt;safinaskar&gt;</a></span><span class="message">theruran: note that haskell typeclasses can be thought as functions, which take something of kind &quot;Type&quot; and return something of kind &quot;Constraint&quot;. this can be described in world of pts, too</span></div><div class="line" id="020328"><span class="nick" style="color:#6b8072"><a href="#020328" label="[02:03:28]">&lt;safinaskar&gt;</a></span><span class="message">theruran: so, whole foundation of haskell can be just described as list of so-called &quot;sorts&quot; and relations between them</span></div><div class="line" id="020446"><span class="nick" style="color:#389600"><a href="#020446" label="[02:04:46]">&lt;theruran&gt;</a></span><span class="message">safinaskar: that does seem useful because it simplifies the representation, right? thanks for the link, btw</span></div><div class="line" id="020513"><span class="nick" style="color:#6b8072"><a href="#020513" label="[02:05:13]">&lt;safinaskar&gt;</a></span><span class="message">theruran: yes. it gives very simple and elegant foundation</span></div><div class="line" id="020533"><span class="nick" style="color:#6b8072"><a href="#020533" label="[02:05:33]">&lt;safinaskar&gt;</a></span><span class="message">theruran: thanks to hurry-coward isomorphism pts can be used both to describe type systems of typed programming languages and to describe logics, which can actually prove mathematical statements</span></div><div class="line" id="020551"><span class="nick" style="color:#6b8072"><a href="#020551" label="[02:05:51]">&lt;safinaskar&gt;</a></span><span class="message">theruran: <a rel="nofollow" href="https://en.wikipedia.org/wiki/Curry%E2%80%93Howard_correspondence">https://en.wikipedia.org/wiki/Curry%E2%80%93Howard_correspondence</a> </span></div><div class="line" id="020620"><span class="nick" style="color:#6b8072"><a href="#020620" label="[02:06:20]">&lt;safinaskar&gt;</a></span><span class="message">s/hurry/curry/</span></div><div class="line" id="020636"><span class="nick" style="color:#6b8072"><a href="#020636" label="[02:06:36]">&lt;safinaskar&gt;</a></span><span class="message">s/coward/howard/ :)</span></div><div class="line" id="020642"><span class="nick" style="color:#389600"><a href="#020642" label="[02:06:42]">&lt;theruran&gt;</a></span><span class="message">ahh thank you</span></div><div class="line" id="020738"><span class="nick" style="color:#6b8072"><a href="#020738" label="[02:07:38]">&lt;safinaskar&gt;</a></span><span class="message">theruran: i really recommend you to read whole that book, it is very cool</span></div><div class="line" id="020825"><span class="nick" style="color:#389600"><a href="#020825" label="[02:08:25]">&lt;theruran&gt;</a></span><span class="message">yeah, I need to study up on the formal logic and computation stuffs :)</span></div><div class="line" id="021239"><span class="nick" style="color:#6b8072"><a href="#021239" label="[02:12:39]">&lt;safinaskar&gt;</a></span><span class="message">theruran: write me safinaskar@mail.ru if you have any questions. i have read that book (nearly) and understand nearly everything. and implemented nearly working pts checker. and know how to describe haskell type system as pts</span></div><div class="line" id="021521"><span class="nick" style="color:#389600"><a href="#021521" label="[02:15:21]">&lt;theruran&gt;</a></span><span class="message">safinaskar: right on :D</span></div><div class="line" id="021525"><span class="nick" style="color:#6b8072"><a href="#021525" label="[02:15:25]">&lt;safinaskar&gt;</a></span><span class="message">theruran: also, if you want some very simple checker for some logic, which can be implemented as a simple c program, then here is probably what you need: <a rel="nofollow" href="https://www.cs.ru.nl/~freek/aut/index.html">https://www.cs.ru.nl/~freek/aut/index.html</a> </span></div><div class="line" id="021719"><span class="nick" style="color:#6b8072"><a href="#021719" label="[02:17:19]">&lt;safinaskar&gt;</a></span><span class="message">theruran: also, author of this program, Freek has very informative site, i recommend to read it. notably his comparison of provers: <a rel="nofollow" href="https://www.cs.ru.nl/~freek/comparison/diffs.pdf">https://www.cs.ru.nl/~freek/comparison/diffs.pdf</a>  and other similar works</span></div><div class="line" id="021757"><span class="nick" style="color:#389600"><a href="#021757" label="[02:17:57]">&lt;theruran&gt;</a></span><span class="message">bootstrapping to a proof-assistant, hmm ü§î</span></div><div class="line" id="022222"><span class="nick" style="color:#6b8072"><a href="#022222" label="[02:22:22]">&lt;safinaskar&gt;</a></span><span class="message">also, pts is simple in sense &quot;small&quot;, not in sense &quot;simple to understand&quot;</span></div><div class="line" id="022320"><span class="nick" style="color:#6b8072"><a href="#022320" label="[02:23:20]">&lt;safinaskar&gt;</a></span><span class="message">theruran: so, you need to understand at first &quot;1st order logic&quot;, 2nd order logic, hol, simply typed logic, and other logics and only after them pts as generalization of all them :)</span></div><div class="line" id="022338"><span class="nick" style="color:#6b8072"><a href="#022338" label="[02:23:38]">&lt;safinaskar&gt;</a></span><span class="message">theruran: so, definitely pts is not thing you should begin with :)</span></div><div class="line" id="022416"><span class="nick" style="color:#6b8072"><a href="#022416" label="[02:24:16]">&lt;safinaskar&gt;</a></span><span class="message">theruran: but that book is still very good and i recommend it. it goes from simple things (simple to understand) to hard ones</span></div><div class="line" id="022813"><span class="nick">***</span><span class="message notice">jonsger1 is now known as jonsger</span></div><div class="line" id="022834"><span class="nick" style="color:#6b8072"><a href="#022834" label="[02:28:34]">&lt;safinaskar&gt;</a></span><span class="message">bye</span></div><div class="line" id="025159"><span class="nick" style="color:#8dd3c7"><a href="#025159" label="[02:51:59]">&lt;oriansj&gt;</a></span><span class="message">it is good to see such passionate people here</span></div><div class="line" id="025233"><span class="nick" style="color:#389600"><a href="#025233" label="[02:52:33]">&lt;theruran&gt;</a></span><span class="message">:)</span></div><div class="line" id="025307"><span class="nick" style="color:#389600"><a href="#025307" label="[02:53:07]">&lt;theruran&gt;</a></span><span class="message">oriansj: mes-m2 builds with CompCert 3.5 and all tests pass. Even the mes-m2 binary is half the size than with my GCC</span></div><div class="line" id="025713"><span class="nick" style="color:#8dd3c7"><a href="#025713" label="[02:57:13]">&lt;oriansj&gt;</a></span><span class="message">theruran: the last I checked mes-m2 is looking at 161KB or under (statically compiled)</span></div><div class="line" id="025744"><span class="nick" style="color:#8dd3c7"><a href="#025744" label="[02:57:44]">&lt;oriansj&gt;</a></span><span class="message">via M2-Planet</span></div><div class="line" id="025808"><span class="nick" style="color:#389600"><a href="#025808" label="[02:58:08]">&lt;theruran&gt;</a></span><span class="message">104K by hardened GCC 9.2</span></div><div class="line" id="025834"><span class="nick" style="color:#389600"><a href="#025834" label="[02:58:34]">&lt;theruran&gt;</a></span><span class="message">55K by CompCert 3.5</span></div><div class="line" id="030140"><span class="nick" style="color:#8dd3c7"><a href="#030140" label="[03:01:40]">&lt;oriansj&gt;</a></span><span class="message">theruran: well it is going to grow as we make it powerful enough to host MesCC and Guix</span></div><div class="line" id="030241"><span class="nick" style="color:#8dd3c7"><a href="#030241" label="[03:02:41]">&lt;oriansj&gt;</a></span><span class="message">also slow_lisp with -Os gets down to 44KB</span></div><div class="line" id="030325"><span class="nick" style="color:#8dd3c7"><a href="#030325" label="[03:03:25]">&lt;oriansj&gt;</a></span><span class="message">in GCC 9.1.0</span></div><div class="line" id="031327"><span class="nick" style="color:#8dd3c7"><a href="#031327" label="[03:13:27]">&lt;oriansj&gt;</a></span><span class="message">so running in L1!</span></div><div class="line" id="031734"><span class="nick" style="color:#389600"><a href="#031734" label="[03:17:34]">&lt;theruran&gt;</a></span><span class="message">oriansj: oops! it was apples-to-apples because I was building without debugging symbols. so 103K from ccomp -g</span></div><div class="line" id="031812"><span class="nick" style="color:#389600"><a href="#031812" label="[03:18:12]">&lt;theruran&gt;</a></span><span class="message">wasn't*</span></div><div class="line" id="100846"><span class="nick" style="color:#234e69"><a href="#100846" label="[10:08:46]">&lt;fosslinux&gt;</a></span><span class="message">my L1 is 32K :(</span></div><div class="line" id="105432"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado_</span></div><div class="line" id="120728"><span class="nick" style="color:#8dd3c7"><a href="#120728" label="[12:07:28]">&lt;oriansj&gt;</a></span><span class="message">theruran: no worries</span></div><div class="line" id="120738"><span class="nick" style="color:#8dd3c7"><a href="#120738" label="[12:07:38]">&lt;oriansj&gt;</a></span><span class="message">fosslinux: Intel chip?</span></div><div class="line" id="155635"><span class="nick">***</span><span class="message notice">ng0_ is now known as ng0</span></div><div class="line" id="160515"><span class="nick">***</span><span class="message notice">pgreco_ is now known as pgreco</span></div><div class="line" id="165311"><span class="nick" style="color:#6c3d55"><a href="#165311" label="[16:53:11]">&lt;xentrac&gt;</a></span><span class="message">interestingly there's a CP/M small-C compiler also called &quot;MESCC&quot;: <a rel="nofollow" href="http://www.floppysoftware.es/c_compilers.html">http://www.floppysoftware.es/c_compilers.html</a> </span></div><div class="line" id="195930"><span class="nick" style="color:#6d2462"><a href="#195930" label="[19:59:30]">&lt;janneke&gt;</a></span><span class="message">xentrac: wait, what! :-)</span></div><div class="line" id="200137"><span class="nick" style="color:#6c3d55"><a href="#200137" label="[20:01:37]">&lt;xentrac&gt;</a></span><span class="message">I was pretty surprised!</span></div><div class="line" id="200207"><span class="nick" style="color:#6c3d55"><a href="#200207" label="[20:02:07]">&lt;xentrac&gt;</a></span><span class="message">my L1 is 7¬±2</span></div><div class="line" id="235425"><span class="nick" style="color:#234e69"><a href="#235425" label="[23:54:25]">&lt;fosslinux&gt;</a></span><span class="message">oriansj: yes</span></div><br /></div></body></html>