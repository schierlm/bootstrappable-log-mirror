<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-05-01.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="002843"><span class="nick" style="color:#8dd3c7"><a href="#002843" label="[00:28:43]">&lt;OriansJ&gt;</a></span><span class="message">fossy: &quot;well, finish your exams first :)\nperl can wait&quot; &lt;= this</span></div><div class="line" id="003459"><span class="nick" style="color:#2e2a4a"><a href="#003459" label="[00:34:59]">&lt;Hagfish&gt;</a></span><span class="message">human civilisation has been waiting thousands of years for this bootstrap, and, with any luck, it will have thousands more years to be grateful</span></div><div class="line" id="003523"><span class="nick" style="color:#2e2a4a"><a href="#003523" label="[00:35:23]">&lt;Hagfish&gt;</a></span><span class="message">i'm sure they won't mind you taking some time off every now and then :)</span></div><div class="line" id="004717"><span class="nick" style="color:#8dd3c7"><a href="#004717" label="[00:47:17]">&lt;OriansJ&gt;</a></span><span class="message">hmmm I wonder if anyone would qualify for this: <a rel="nofollow" href="https://riscv.org/blog/2021/04/risc-v-is-giving-away-developer-boards/">https://riscv.org/blog/2021/04/risc-v-is-giving-away-developer-boards/</a> </span></div><div class="line" id="004909"><span class="nick" style="color:#6b8072"><a href="#004909" label="[00:49:09]">&lt;pabs3&gt;</a></span><span class="message">the post claims a need for RISC-V membership, but I think bootstrappable could easily bypass that, Debian folks are</span></div><div class="line" id="005051"><span class="nick" style="color:#80b1d3"><a href="#005051" label="[00:50:51]">&lt;vagrantc&gt;</a></span><span class="message">wonder why boards they're giving out</span></div><div class="line" id="005115"><span class="nick" style="color:#8dd3c7"><a href="#005115" label="[00:51:15]">&lt;OriansJ&gt;</a></span><span class="message">the question is who is willing to be responsible for the RISC-V porting work (I'll provide help but I lack the time to do the later stages)</span></div><div class="line" id="005853"><span class="nick" style="color:#6d2462"><a href="#005853" label="[00:58:53]">&lt;stikonas&gt;</a></span><span class="message">later stages жill be particularly tricky for risc-v...</span></div><div class="line" id="005916"><span class="nick" style="color:#6d2462"><a href="#005916" label="[00:59:16]">&lt;stikonas&gt;</a></span><span class="message">s/ж/w/</span></div><div class="line" id="010009"><span class="nick" style="color:#8dd3c7"><a href="#010009" label="[01:00:09]">&lt;OriansJ&gt;</a></span><span class="message">well there is already someone working on porting MesCC to risc-v; Hopefully someone form the TCC community steps up and saves us that work.</span></div><div class="line" id="010149"><span class="nick" style="color:#8dd3c7"><a href="#010149" label="[01:01:49]">&lt;OriansJ&gt;</a></span><span class="message">musl libc, binutils and GCC would be the big pieces of work.</span></div><div class="line" id="010309"><span class="nick" style="color:#6d2462"><a href="#010309" label="[01:03:09]">&lt;stikonas&gt;</a></span><span class="message">musl is probably fine</span></div><div class="line" id="010318"><span class="nick" style="color:#6d2462"><a href="#010318" label="[01:03:18]">&lt;stikonas&gt;</a></span><span class="message">it's new enough to support risc-v</span></div><div class="line" id="010343"><span class="nick" style="color:#6d2462"><a href="#010343" label="[01:03:43]">&lt;stikonas&gt;</a></span><span class="message">but binutils/gcc are not...</span></div><div class="line" id="010420"><span class="nick" style="color:#8dd3c7"><a href="#010420" label="[01:04:20]">&lt;OriansJ&gt;</a></span><span class="message">but one can crib/steal from the later risc-v port to GCC/binutils</span></div><div class="line" id="010433"><span class="nick" style="color:#6d2462"><a href="#010433" label="[01:04:33]">&lt;stikonas&gt;</a></span><span class="message">hmm, that's actually one advantage of going via musl rather than old glibc</span></div><div class="line" id="010449"><span class="nick" style="color:#6d2462"><a href="#010449" label="[01:04:49]">&lt;stikonas&gt;</a></span><span class="message">although, maybe we'll need old glibc too later...</span></div><div class="line" id="010457"><span class="nick" style="color:#6d2462"><a href="#010457" label="[01:04:57]">&lt;stikonas&gt;</a></span><span class="message">so far GCC in live-bootstrap is C only</span></div><div class="line" id="010512"><span class="nick" style="color:#6d2462"><a href="#010512" label="[01:05:12]">&lt;stikonas&gt;</a></span><span class="message">but maybe C++ is patchable to build with musl</span></div><div class="line" id="010655"><span class="nick" style="color:#8dd3c7"><a href="#010655" label="[01:06:55]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: well what was the oldest version of GCC with risc-v support?</span></div><div class="line" id="010729"><span class="nick" style="color:#80b1d3"><a href="#010729" label="[01:07:29]">&lt;vagrantc&gt;</a></span><span class="message">you can bootstrap straight to a recent musl version?</span></div><div class="line" id="011019"><span class="nick" style="color:#8dd3c7"><a href="#011019" label="[01:10:19]">&lt;OriansJ&gt;</a></span><span class="message">hmm risc-v support isn't in FSF GCC but a seperate fork</span></div><div class="line" id="011051"><span class="nick" style="color:#80b1d3"><a href="#011051" label="[01:10:51]">&lt;vagrantc&gt;</a></span><span class="message">must be looking at old versions ...</span></div><div class="line" id="011058"><span class="nick" style="color:#80b1d3"><a href="#011058" label="[01:10:58]">&lt;vagrantc&gt;</a></span><span class="message">definitely in recent gcc</span></div><div class="line" id="011106"><span class="nick" style="color:#8dd3c7"><a href="#011106" label="[01:11:06]">&lt;OriansJ&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/riscv/riscv-gcc/releases/tag/gcc-4_7_4-release">https://github.com/riscv/riscv-gcc/releases/tag/gcc-4_7_4-release</a> </span></div><div class="line" id="011131"><span class="nick" style="color:#80b1d3"><a href="#011131" label="[01:11:31]">&lt;vagrantc&gt;</a></span><span class="message"> <a rel="nofollow" href="https://wiki.debian.org/RISC-V#Toolchain_upstreaming_status">https://wiki.debian.org/RISC-V#Toolchain_upstreaming_status</a> </span></div><div class="line" id="011210"><span class="nick" style="color:#80b1d3"><a href="#011210" label="[01:12:10]">&lt;vagrantc&gt;</a></span><span class="message">pretty sure that's a mostly abandoned fork</span></div><div class="line" id="011235"><span class="nick" style="color:#6d2462"><a href="#011235" label="[01:12:35]">&lt;stikonas&gt;</a></span><span class="message">vagrantc: fairly recent, 1.1.24</span></div><div class="line" id="011305"><span class="nick" style="color:#6d2462"><a href="#011305" label="[01:13:05]">&lt;stikonas&gt;</a></span><span class="message">vagrantc: that's October 2019</span></div><div class="line" id="011325"><span class="nick" style="color:#8dd3c7"><a href="#011325" label="[01:13:25]">&lt;OriansJ&gt;</a></span><span class="message">correction it does not appear that that they backported to 4.7.4</span></div><div class="line" id="011343"><span class="nick" style="color:#6d2462"><a href="#011343" label="[01:13:43]">&lt;stikonas&gt;</a></span><span class="message">well, we also need it in gcc 4.0.4</span></div><div class="line" id="011357"><span class="nick" style="color:#6d2462"><a href="#011357" label="[01:13:57]">&lt;stikonas&gt;</a></span><span class="message">unless somebody can build gcc 4.7.4 directly</span></div><div class="line" id="011426"><span class="nick" style="color:#8dd3c7"><a href="#011426" label="[01:14:26]">&lt;OriansJ&gt;</a></span><span class="message">So RISC-V  backporting to 4.0.4 and/or 4.7.4 would be potentially a full time job worth of effort</span></div><div class="line" id="011445"><span class="nick" style="color:#6d2462"><a href="#011445" label="[01:14:45]">&lt;stikonas&gt;</a></span><span class="message">probably</span></div><div class="line" id="011550"><span class="nick" style="color:#6d2462"><a href="#011550" label="[01:15:50]">&lt;stikonas&gt;</a></span><span class="message">vagrantc: this is what we were able to bootstrap with no-pregenerated files <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst">https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst</a> </span></div><div class="line" id="011613"><span class="nick" style="color:#8dd3c7"><a href="#011613" label="[01:16:13]">&lt;OriansJ&gt;</a></span><span class="message">So we can with the resources available get from stage0 to TCC; then we depend upon the TCC team to get us to the GCC/binutils and then we will need sponsorship to fund the backporting work for GCC</span></div><div class="line" id="011753"><span class="nick" style="color:#6d2462"><a href="#011753" label="[01:17:53]">&lt;stikonas&gt;</a></span><span class="message">at least a bit better than GCC 2.95.3</span></div><div class="line" id="011758"><span class="nick" style="color:#8dd3c7"><a href="#011758" label="[01:17:58]">&lt;OriansJ&gt;</a></span><span class="message">not ideal but a task that would have been considered impossible just 5 years ago when we started.</span></div><div class="line" id="011845"><span class="nick" style="color:#6d2462"><a href="#011845" label="[01:18:45]">&lt;stikonas&gt;</a></span><span class="message">well, risc-v is a new arch, and in practive even fairly recently bootstrap dependended (and to a large extent still depends) on a lot of old GNU software</span></div><div class="line" id="011928"><span class="nick" style="color:#6d2462"><a href="#011928" label="[01:19:28]">&lt;stikonas&gt;</a></span><span class="message">TCC might need some backporting to to 0.9.26...</span></div><div class="line" id="011942"><span class="nick" style="color:#6d2462"><a href="#011942" label="[01:19:42]">&lt;stikonas&gt;</a></span><span class="message">but that should be much easier than GCC backporting</span></div><div class="line" id="012357"><span class="nick" style="color:#8dd3c7"><a href="#012357" label="[01:23:57]">&lt;OriansJ&gt;</a></span><span class="message">not if MesCC expands to be able compile TCC LATEST directly</span></div><div class="line" id="012608"><span class="nick" style="color:#8dd3c7"><a href="#012608" label="[01:26:08]">&lt;OriansJ&gt;</a></span><span class="message">I wonder if the RISC-V porter for MesCC would be willing to help add those features; then when TCC adds RISC-V support, we win for free.</span></div><div class="line" id="083215"><span class="nick">***</span><span class="message notice">mephista is now known as spicy_icecream</span></div><div class="line" id="090913"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado</span></div><div class="line" id="112143"><span class="nick" style="color:#234e69"><a href="#112143" label="[11:21:43]">&lt;bauen1&gt;</a></span><span class="message">OriansJ: doesn't tcc mob already have some risc-v support ? i've never tried it but occasionally the mailing list gets a few emails regarding risc-v support</span></div><div class="line" id="112202"><span class="nick" style="color:#234e69"><a href="#112202" label="[11:22:02]">&lt;bauen1&gt;</a></span><span class="message">also if tcc could actually do a new release at some point and cleanup their code, that'd be awesome ...</span></div><div class="line" id="124453"><span class="nick">***</span><span class="message notice">sm2n_ is now known as sm2n</span></div><div class="line" id="143418"><span class="nick" style="color:#8dd3c7"><a href="#143418" label="[14:34:18]">&lt;OriansJ&gt;</a></span><span class="message">bauen1: The best way to help ensure something gets cleaned up or fixed is to send a patch (or dozen depending on the mess)</span></div><div class="line" id="143506"><span class="nick" style="color:#8dd3c7"><a href="#143506" label="[14:35:06]">&lt;OriansJ&gt;</a></span><span class="message">But risc-v is just one of the many items on our ever growing list of bootstrapping tasks</span></div><div class="line" id="143543"><span class="nick" style="color:#8dd3c7"><a href="#143543" label="[14:35:43]">&lt;OriansJ&gt;</a></span><span class="message">So pick your priorities and start hammering on what you want to work on first.</span></div><div class="line" id="144028"><span class="nick" style="color:#6c3d55"><a href="#144028" label="[14:40:28]">&lt;melg8&gt;</a></span><span class="message">OriansJ hi, i've just recently learned about live-bootstrap project, and and really exited by the idea. But can you maybe point out where can i find those &quot;ever growing list of bootstrapping tasks&quot; or general milestones waiting to be achieved by the project? I'm just learning for now, but maybe could be involved some time later.</span></div><div class="line" id="144652"><span class="nick" style="color:#6d2462"><a href="#144652" label="[14:46:52]">&lt;stikonas&gt;</a></span><span class="message">melg8: I don't think there is a formal list</span></div><div class="line" id="144710"><span class="nick" style="color:#6d2462"><a href="#144710" label="[14:47:10]">&lt;stikonas&gt;</a></span><span class="message">but e.g. live-bootstrap is x86 only</span></div><div class="line" id="144741"><span class="nick" style="color:#6d2462"><a href="#144741" label="[14:47:41]">&lt;stikonas&gt;</a></span><span class="message">also it's not finished (although goes quite far to GCC)</span></div><div class="line" id="144752"><span class="nick" style="color:#6d2462"><a href="#144752" label="[14:47:52]">&lt;stikonas&gt;</a></span><span class="message">then there are other non-C languages...</span></div><div class="line" id="145036"><span class="nick" style="color:#6c3d55"><a href="#145036" label="[14:50:36]">&lt;melg8&gt;</a></span><span class="message">i'm from nix world, so for me it's interesting to get relative new gcc and try to rebuild nix world with it, but is there some solid point in mind - where this live-bootstrap should connect with other distros? or it should grow into it's own distro?</span></div><div class="line" id="145053"><span class="nick" style="color:#6d2462"><a href="#145053" label="[14:50:53]">&lt;stikonas&gt;</a></span><span class="message">well, at the moment it's just gcc 4.0.4 (C only)</span></div><div class="line" id="145108"><span class="nick" style="color:#6d2462"><a href="#145108" label="[14:51:08]">&lt;stikonas&gt;</a></span><span class="message">more work is needed to get C++</span></div><div class="line" id="145114"><span class="nick" style="color:#6d2462"><a href="#145114" label="[14:51:14]">&lt;stikonas&gt;</a></span><span class="message">but idea is that it will connect to distros</span></div><div class="line" id="145141"><span class="nick" style="color:#6d2462"><a href="#145141" label="[14:51:41]">&lt;stikonas&gt;</a></span><span class="message">once we have new toolchain, can start writing distro bootstraps...</span></div><div class="line" id="145154"><span class="nick" style="color:#6d2462"><a href="#145154" label="[14:51:54]">&lt;stikonas&gt;</a></span><span class="message">some should be easy (especially  source based like Gentoo)</span></div><div class="line" id="145324"><span class="nick" style="color:#6c3d55"><a href="#145324" label="[14:53:24]">&lt;melg8&gt;</a></span><span class="message">is there a plans for building kernel from source and not using precompiled one? is it even possible?</span></div><div class="line" id="145334"><span class="nick" style="color:#6d2462"><a href="#145334" label="[14:53:34]">&lt;stikonas&gt;</a></span><span class="message">melg8: there are some...</span></div><div class="line" id="145351"><span class="nick" style="color:#6d2462"><a href="#145351" label="[14:53:51]">&lt;stikonas&gt;</a></span><span class="message">at some point kernel will be rebuilt in the middle of live-bootstrap</span></div><div class="line" id="145359"><span class="nick" style="color:#6d2462"><a href="#145359" label="[14:53:59]">&lt;stikonas&gt;</a></span><span class="message">once kexec can be run...</span></div><div class="line" id="145406"><span class="nick" style="color:#6d2462"><a href="#145406" label="[14:54:06]">&lt;stikonas&gt;</a></span><span class="message">but we also need smaller bootstrap kernel</span></div><div class="line" id="145425"><span class="nick" style="color:#6d2462"><a href="#145425" label="[14:54:25]">&lt;stikonas&gt;</a></span><span class="message">but you need some kernel for now</span></div><div class="line" id="145441"><span class="nick" style="color:#6d2462"><a href="#145441" label="[14:54:41]">&lt;stikonas&gt;</a></span><span class="message">although, stuff up to M2-Planet can also run on baremetal</span></div><div class="line" id="145512"><span class="nick" style="color:#6c3d55"><a href="#145512" label="[14:55:12]">&lt;melg8&gt;</a></span><span class="message">is different kernels affecting hashes of what is build somehow?</span></div><div class="line" id="145516"><span class="nick" style="color:#6d2462"><a href="#145516" label="[14:55:16]">&lt;stikonas&gt;</a></span><span class="message">anyway, for now live-bootstrap was focussing on userspace bootstrapping</span></div><div class="line" id="145529"><span class="nick" style="color:#6d2462"><a href="#145529" label="[14:55:29]">&lt;stikonas&gt;</a></span><span class="message">melg8: no, all hashes are the same</span></div><div class="line" id="145534"><span class="nick" style="color:#6d2462"><a href="#145534" label="[14:55:34]">&lt;stikonas&gt;</a></span><span class="message">or at least usually the same</span></div><div class="line" id="145545"><span class="nick" style="color:#6d2462"><a href="#145545" label="[14:55:45]">&lt;stikonas&gt;</a></span><span class="message">there might be some intermittent (sync?) errors</span></div><div class="line" id="145551"><span class="nick" style="color:#6d2462"><a href="#145551" label="[14:55:51]">&lt;stikonas&gt;</a></span><span class="message">but they are infrequent</span></div><div class="line" id="145602"><span class="nick" style="color:#6d2462"><a href="#145602" label="[14:56:02]">&lt;stikonas&gt;</a></span><span class="message">maybe 1% of runs at most</span></div><div class="line" id="145814"><span class="nick" style="color:#6d2462"><a href="#145814" label="[14:58:14]">&lt;stikonas&gt;</a></span><span class="message">ok, I'm going offline, no more answers for now...</span></div><div class="line" id="145832"><span class="nick" style="color:#6c3d55"><a href="#145832" label="[14:58:32]">&lt;melg8&gt;</a></span><span class="message">okay, until now i've just tried to build reproducible nixos docker images for my pet project, but maybe i'll try this next level game with live-bootstrap, But i think i'll have much more questions in future about project. Thanks!</span></div><div class="line" id="150719"><span class="nick" style="color:#8dd3c7"><a href="#150719" label="[15:07:19]">&lt;OriansJ&gt;</a></span><span class="message">melg8: in regards to the kernel question. Yes kernel bootstrapping is part of the future work. A minimal kernel in the M2-Planet subset of C could be built on bare-metal and then used to do all the steps until we are able to build Linux and use that instead.</span></div><div class="line" id="150806"><span class="nick" style="color:#8dd3c7"><a href="#150806" label="[15:08:06]">&lt;OriansJ&gt;</a></span><span class="message">So any work that looks undone and like fun to do. do it and share with us ^_^</span></div><div class="line" id="150925"><span class="nick" style="color:#8dd3c7"><a href="#150925" label="[15:09:25]">&lt;OriansJ&gt;</a></span><span class="message">we encourage questions and expanding of understanding. Improvements to documentation especially from a fresh perspective are very helpful.</span></div><div class="line" id="151100"><span class="nick" style="color:#6c3d55"><a href="#151100" label="[15:11:00]">&lt;melg8&gt;</a></span><span class="message">okay, for now i'll just look how it all setup, works, builds and so on) In regards of c++ compilation what was last results or what problems occurred?</span></div><div class="line" id="151439"><span class="nick" style="color:#8dd3c7"><a href="#151439" label="[15:14:39]">&lt;OriansJ&gt;</a></span><span class="message">melg8: as I understand it g++ has not been built yet as for why not, I am not certain as I tend to work lower in the stack but fossy and stikonas would be the ones to know why.</span></div><div class="line" id="151623"><span class="nick" style="color:#d9d9d9"><a href="#151623" label="[15:16:23]">&lt;gef&gt;</a></span><span class="message">oriansj: I am in favor, in lieu of documentation that would quickly drift behind at this stage, to setup gitlab ci/cd processes (a service on top of the existing repos, no need to move anything), so that it is easy and flexible to bring all efforts into a visible state (I find gitlab more welcoming for the exploration). Also, about C++ and bootstrapping into other distros: EasyBuild project might help with providing tens of different compiler versions,</span></div><div class="line" id="151623"><span class="nick" style="color:#d9d9d9"><a href="#151623" label="[15:16:23]">&lt;gef&gt;</a></span><span class="message"> it's kind of a solved problem in the EB community.</span></div><div class="line" id="151657"><span class="nick" style="color:#8dd3c7"><a href="#151657" label="[15:16:57]">&lt;OriansJ&gt;</a></span><span class="message">as for the likely reasons: needing glibc to be built first or newer version of bison to parse the grammer or something not right with autotools would be my guesses.</span></div><div class="line" id="151755"><span class="nick" style="color:#d9d9d9"><a href="#151755" label="[15:17:55]">&lt;gef&gt;</a></span><span class="message">I'm afk for a few hours, but I'm very interested in your comments and plan to be back in ~5hours, especially in case anyone feels like experimenting with gitlab workflows for software building. (tbc)</span></div><div class="line" id="151954"><span class="nick" style="color:#d9d9d9"><a href="#151954" label="[15:19:54]">&lt;gef&gt;</a></span><span class="message">ref. <a rel="nofollow" href="https://github.com/easybuilders/easybuild-easyconfigs/tree/develop/easybuild/easyconfigs/g/GCC">https://github.com/easybuilders/easybuild-easyconfigs/tree/develop/easybuild/easyconfigs/g/GCC</a>  and also <a rel="nofollow" href="https://github.com/easybuilders/easybuild-easyconfigs/tree/develop/easybuild/easyconfigs/__archive__/g/GCC">https://github.com/easybuilders/easybuild-easyconfigs/tree/develop/easybuild/easyconfigs/__archive__/g/GCC</a> </span></div><div class="line" id="152302"><span class="nick" style="color:#8dd3c7"><a href="#152302" label="[15:23:02]">&lt;OriansJ&gt;</a></span><span class="message">gef: I've always encouraged the learning from and sharing with other communities.</span></div><div class="line" id="152450"><span class="nick" style="color:#8dd3c7"><a href="#152450" label="[15:24:50]">&lt;OriansJ&gt;</a></span><span class="message">and CI will certainly help improve testing but it is in no way a replacement for proper documentation; which as the goal of providing understanding to people who might not be familiar with the technicals.</span></div><div class="line" id="153958"><span class="nick" style="color:#8dd3c7"><a href="#153958" label="[15:39:58]">&lt;OriansJ&gt;</a></span><span class="message">it isn't enough to figure out how to do something yourself. That understanding needs to shared so that others can build upon the work, fix it or even replace it when a better understanding is obtained. There is no done, only good enough for now.</span></div><div class="line" id="201625"><span class="nick">***</span><span class="message notice">Server sets mode: +cnt </span></div><div class="line" id="211119"><span class="nick" style="color:#6d2462"><a href="#211119" label="[21:11:19]">&lt;stikonas&gt;</a></span><span class="message">melg8: thee ae a few reasons why g++ was not built yet</span></div><div class="line" id="211218"><span class="nick" style="color:#6d2462"><a href="#211218" label="[21:12:18]">&lt;stikonas&gt;</a></span><span class="message">first of all for GCC we couldn't yet use top level configure (or actually Makefile.in) as it is autogenerated and we have not yet built all the dependencies to regenerate it (it needs autogen and hence guile)</span></div><div class="line" id="211233"><span class="nick" style="color:#6d2462"><a href="#211233" label="[21:12:33]">&lt;stikonas&gt;</a></span><span class="message">secondly, it did not just build out of bux with musl libc</span></div><div class="line" id="211244"><span class="nick" style="color:#6d2462"><a href="#211244" label="[21:12:44]">&lt;stikonas&gt;</a></span><span class="message">so we either need to patch musl incompatibilities or build glibc</span></div><div class="line" id="211354"><span class="nick" style="color:#6d2462"><a href="#211354" label="[21:13:54]">&lt;stikonas&gt;</a></span><span class="message">bison should be fine, we have a not too old bison and newer bison can always be built if we need it</span></div><div class="line" id="211454"><span class="nick" style="color:#6d2462"><a href="#211454" label="[21:14:54]">&lt;stikonas&gt;</a></span><span class="message">gef: if you work on Gitlab CI, I think do that in chroot mode (./rootfs --chroot)</span></div><div class="line" id="211459"><span class="nick" style="color:#6d2462"><a href="#211459" label="[21:14:59]">&lt;stikonas&gt;</a></span><span class="message">rather than qemu mode</span></div><div class="line" id="211543"><span class="nick" style="color:#6d2462"><a href="#211543" label="[21:15:43]">&lt;stikonas&gt;</a></span><span class="message">should be easier, no problems with running kvm inside kvm...</span></div><div class="line" id="215351"><span class="nick">***</span><span class="message notice">stikonas_ is now known as stikonas</span></div><div class="line" id="215829"><span class="nick" style="color:#6c3d55"><a href="#215829" label="[21:58:29]">&lt;melg8&gt;</a></span><span class="message">stikonas what is current development workflow? is there any? like - as i can see default script rebuilds everything from scratch and that takes some time. Is there a way to skip some parts/use previous build result? so if i try to poke around - it would not require to wait full rebuild for 1 line change?</span></div><div class="line" id="220114"><span class="nick" style="color:#6d2462"><a href="#220114" label="[22:01:14]">&lt;stikonas&gt;</a></span><span class="message">melg8: at some point pder/overlay branch allowed to skip slow stuff in the beginning (unpacked pre-built tarball with eveything up to tcc) but since then we changed some stuff in the beginning, so that's broken</span></div><div class="line" id="220131"><span class="nick" style="color:#6d2462"><a href="#220131" label="[22:01:31]">&lt;stikonas&gt;</a></span><span class="message">you can create something like that again though</span></div><div class="line" id="220200"><span class="nick" style="color:#6c3d55"><a href="#220200" label="[22:02:00]">&lt;melg8&gt;</a></span><span class="message">And if i inside of final result shell - is there a way to reproduce step? for example i've tried . helpers.sh &amp;&amp; build gcc-4.0.4 pass2.sh checksums/pass2 - but that did failed to reconfigure and still returned 0 - because binaries are with right hashes</span></div><div class="line" id="220201"><span class="nick" style="color:#6d2462"><a href="#220201" label="[22:02:01]">&lt;stikonas&gt;</a></span><span class="message">but generally you have to rebuilt everything...</span></div><div class="line" id="220229"><span class="nick" style="color:#6d2462"><a href="#220229" label="[22:02:29]">&lt;stikonas&gt;</a></span><span class="message">hmm, I think it should work</span></div><div class="line" id="220244"><span class="nick" style="color:#6d2462"><a href="#220244" label="[22:02:44]">&lt;stikonas&gt;</a></span><span class="message">although, it might be better to run</span></div><div class="line" id="220314"><span class="nick" style="color:#6d2462"><a href="#220314" label="[22:03:14]">&lt;stikonas&gt;</a></span><span class="message">bash -c 'set -e; . helpers.sh; export PREFIX=/after; build gcc-4.0.4 pass2.sh checksums/pass2'</span></div><div class="line" id="220327"><span class="nick" style="color:#6d2462"><a href="#220327" label="[22:03:27]">&lt;stikonas&gt;</a></span><span class="message">then you'll get set -e which means shell script exits on error</span></div><div class="line" id="220349"><span class="nick" style="color:#6d2462"><a href="#220349" label="[22:03:49]">&lt;stikonas&gt;</a></span><span class="message">(don't just run set -e in result shell because then on error you'll be completely kicked out of result shell)</span></div><div class="line" id="220420"><span class="nick" style="color:#6c3d55"><a href="#220420" label="[22:04:20]">&lt;melg8&gt;</a></span><span class="message">i see, prefix was my missing part of puzzle</span></div><div class="line" id="220422"><span class="nick" style="color:#6d2462"><a href="#220422" label="[22:04:22]">&lt;stikonas&gt;</a></span><span class="message">melg8: although, there is no guarantee that if you rebuild final step, hashes will remain the same</span></div><div class="line" id="220446"><span class="nick" style="color:#6d2462"><a href="#220446" label="[22:04:46]">&lt;stikonas&gt;</a></span><span class="message">I don't know when gcc hashes reach fixed point</span></div><div class="line" id="220450"><span class="nick" style="color:#6d2462"><a href="#220450" label="[22:04:50]">&lt;stikonas&gt;</a></span><span class="message">might need one more rebuild...</span></div><div class="line" id="220458"><span class="nick" style="color:#6c3d55"><a href="#220458" label="[22:04:58]">&lt;melg8&gt;</a></span><span class="message">it started building now, nice</span></div><div class="line" id="220526"><span class="nick" style="color:#6d2462"><a href="#220526" label="[22:05:26]">&lt;stikonas&gt;</a></span><span class="message">that's what I usually do for development</span></div><div class="line" id="220532"><span class="nick" style="color:#6d2462"><a href="#220532" label="[22:05:32]">&lt;stikonas&gt;</a></span><span class="message">until I get stuff right</span></div><div class="line" id="220546"><span class="nick" style="color:#6d2462"><a href="#220546" label="[22:05:46]">&lt;stikonas&gt;</a></span><span class="message">although, this does not always result in correct hash</span></div><div class="line" id="220550"><span class="nick" style="color:#6d2462"><a href="#220550" label="[22:05:50]">&lt;stikonas&gt;</a></span><span class="message">when you do these rebuilds</span></div><div class="line" id="220601"><span class="nick" style="color:#6d2462"><a href="#220601" label="[22:06:01]">&lt;stikonas&gt;</a></span><span class="message">often it does, but not always</span></div><div class="line" id="220631"><span class="nick" style="color:#6c3d55"><a href="#220631" label="[22:06:31]">&lt;melg8&gt;</a></span><span class="message">i've never build gcc in my life) even though i've developed some c++ programs, is it because of rm-s of config - not building g++? is three some easy way to recreate build failures of g++ on my machine?</span></div><div class="line" id="220645"><span class="nick" style="color:#6c3d55"><a href="#220645" label="[22:06:45]">&lt;melg8&gt;</a></span><span class="message">i've got &quot;sha256sum: WARNING: 6 of 13 computed checksums did NOT match&quot;</span></div><div class="line" id="220716"><span class="nick" style="color:#6d2462"><a href="#220716" label="[22:07:16]">&lt;stikonas&gt;</a></span><span class="message">well, just unpack gcc tarball and try to run configure there</span></div><div class="line" id="220718"><span class="nick" style="color:#6d2462"><a href="#220718" label="[22:07:18]">&lt;stikonas&gt;</a></span><span class="message">inside live-bootstrap</span></div><div class="line" id="220732"><span class="nick" style="color:#6d2462"><a href="#220732" label="[22:07:32]">&lt;stikonas&gt;</a></span><span class="message">melg8: yeah, sha mismatch for gcc is kind of expected</span></div><div class="line" id="220737"><span class="nick" style="color:#6d2462"><a href="#220737" label="[22:07:37]">&lt;stikonas&gt;</a></span><span class="message">because you were doing pass3</span></div><div class="line" id="220740"><span class="nick" style="color:#6d2462"><a href="#220740" label="[22:07:40]">&lt;stikonas&gt;</a></span><span class="message">rather than pass2</span></div><div class="line" id="220759"><span class="nick" style="color:#6d2462"><a href="#220759" label="[22:07:59]">&lt;stikonas&gt;</a></span><span class="message">gcc pass1 was built with musl 1.1.24</span></div><div class="line" id="220814"><span class="nick" style="color:#6c3d55"><a href="#220814" label="[22:08:14]">&lt;melg8&gt;</a></span><span class="message">but it should at some point be self replica? so constant hashes?</span></div><div class="line" id="220821"><span class="nick" style="color:#6d2462"><a href="#220821" label="[22:08:21]">&lt;stikonas&gt;</a></span><span class="message">gcc pass2 is built with musl 1.2.4, so we an expect some slight differences</span></div><div class="line" id="220835"><span class="nick" style="color:#6d2462"><a href="#220835" label="[22:08:35]">&lt;stikonas&gt;</a></span><span class="message">yeah, I think after pass 3 it is very likely to be fixed</span></div><div class="line" id="220855"><span class="nick" style="color:#6d2462"><a href="#220855" label="[22:08:55]">&lt;stikonas&gt;</a></span><span class="message">this mismatch is probably because musl got updated between gcc pass1 and pass2</span></div><div class="line" id="220932"><span class="nick" style="color:#6d2462"><a href="#220932" label="[22:09:32]">&lt;stikonas&gt;</a></span><span class="message">melg8: oh, you need to inject full gcc tarball into live-bootstrap</span></div><div class="line" id="220935"><span class="nick" style="color:#6d2462"><a href="#220935" label="[22:09:35]">&lt;stikonas&gt;</a></span><span class="message">if you wnat to build g++</span></div><div class="line" id="220943"><span class="nick" style="color:#6d2462"><a href="#220943" label="[22:09:43]">&lt;stikonas&gt;</a></span><span class="message">this tarball is just gcc-core</span></div><div class="line" id="220945"><span class="nick" style="color:#6d2462"><a href="#220945" label="[22:09:45]">&lt;stikonas&gt;</a></span><span class="message">so only C</span></div><div class="line" id="221043"><span class="nick" style="color:#6d2462"><a href="#221043" label="[22:10:43]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://ftp.gnu.org/gnu/gcc/gcc-4.0.4/">https://ftp.gnu.org/gnu/gcc/gcc-4.0.4/</a> </span></div><div class="line" id="221102"><span class="nick" style="color:#6c3d55"><a href="#221102" label="[22:11:02]">&lt;melg8&gt;</a></span><span class="message">okay, i see, btw - is there a easy way to move files around from my host linux environment inside this quemu and back? i've seen it mounts tmpfs - but can i get for example build results from inside to host?</span></div><div class="line" id="221106"><span class="nick" style="color:#6d2462"><a href="#221106" label="[22:11:06]">&lt;stikonas&gt;</a></span><span class="message">so either full gcc or gcc-core AND gcc-g++</span></div><div class="line" id="221117"><span class="nick" style="color:#6d2462"><a href="#221117" label="[22:11:17]">&lt;stikonas&gt;</a></span><span class="message">not inside qemu</span></div><div class="line" id="221134"><span class="nick" style="color:#6d2462"><a href="#221134" label="[22:11:34]">&lt;stikonas&gt;</a></span><span class="message">that's why we have chroot mode for development</span></div><div class="line" id="221138"><span class="nick" style="color:#6d2462"><a href="#221138" label="[22:11:38]">&lt;stikonas&gt;</a></span><span class="message">./rootfs --chroot</span></div><div class="line" id="221143"><span class="nick" style="color:#6d2462"><a href="#221143" label="[22:11:43]">&lt;stikonas&gt;</a></span><span class="message">./rootfs.py --chroot</span></div><div class="line" id="221207"><span class="nick" style="color:#6d2462"><a href="#221207" label="[22:12:07]">&lt;stikonas&gt;</a></span><span class="message">there is hard way to get stuff out of qemu</span></div><div class="line" id="221211"><span class="nick" style="color:#6d2462"><a href="#221211" label="[22:12:11]">&lt;stikonas&gt;</a></span><span class="message">when we had to</span></div><div class="line" id="221222"><span class="nick" style="color:#6c3d55"><a href="#221222" label="[22:12:22]">&lt;melg8&gt;</a></span><span class="message">it failed on me with my nix setup - i'll figure out then how to fix it</span></div><div class="line" id="221234"><span class="nick" style="color:#6d2462"><a href="#221234" label="[22:12:34]">&lt;stikonas&gt;</a></span><span class="message">run qemu inside tmux, print base64 of binary, and then use tmux copy/paste feature</span></div><div class="line" id="221247"><span class="nick" style="color:#6d2462"><a href="#221247" label="[22:12:47]">&lt;stikonas&gt;</a></span><span class="message">oh, probably chroot is not in PATH</span></div><div class="line" id="221257"><span class="nick" style="color:#6d2462"><a href="#221257" label="[22:12:57]">&lt;stikonas&gt;</a></span><span class="message">there is PR for that</span></div><div class="line" id="221301"><span class="nick" style="color:#6d2462"><a href="#221301" label="[22:13:01]">&lt;stikonas&gt;</a></span><span class="message">you can try that change</span></div><div class="line" id="221319"><span class="nick" style="color:#6d2462"><a href="#221319" label="[22:13:19]">&lt;stikonas&gt;</a></span><span class="message">some distros put chroot into sbin rather than bin</span></div><div class="line" id="221343"><span class="nick" style="color:#6d2462"><a href="#221343" label="[22:13:43]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/111/files">https://github.com/fosslinux/live-bootstrap/pull/111/files</a> </span></div><div class="line" id="221353"><span class="nick" style="color:#6d2462"><a href="#221353" label="[22:13:53]">&lt;stikonas&gt;</a></span><span class="message">I am starting chroot with env -i (clean environment)</span></div><div class="line" id="221513"><span class="nick" style="color:#6c3d55"><a href="#221513" label="[22:15:13]">&lt;melg8&gt;</a></span><span class="message">btw, thanks for your time answering my questions, that's very welcoming to see such attitude to new people</span></div><div class="line" id="221741"><span class="nick" style="color:#6d2462"><a href="#221741" label="[22:17:41]">&lt;stikonas&gt;</a></span><span class="message">melg8: you can update README with info that you found was missing</span></div><div class="line" id="221755"><span class="nick" style="color:#6d2462"><a href="#221755" label="[22:17:55]">&lt;stikonas&gt;</a></span><span class="message">sometimes it's easier for new people to see what would be useful additions</span></div><div class="line" id="221827"><span class="nick" style="color:#6d2462"><a href="#221827" label="[22:18:27]">&lt;stikonas&gt;</a></span><span class="message">we indeed don't have much regarding suggested development workflows</span></div><div class="line" id="222358"><span class="nick" style="color:#6c3d55"><a href="#222358" label="[22:23:58]">&lt;melg8&gt;</a></span><span class="message">from my initial perspective on project - there is lack of some kind of roadmap to get sense what is missing and already planned, readme + parts.rst done a good job providing what has been implemented so far.</span></div><div class="line" id="223741"><span class="nick" style="color:#234e69"><a href="#223741" label="[22:37:41]">&lt;bauen1&gt;</a></span><span class="message">OriansJ: iirc tinycc doesn't accept (or doesn't like) style changes, so i doubt they'd accept me makeing the code more readable (and i don't want to spend the time to test that right now)</span></div><div class="line" id="223813"><span class="nick" style="color:#6d2462"><a href="#223813" label="[22:38:13]">&lt;stikonas&gt;</a></span><span class="message">well, later in the bootstrap it's just modern GCC and we can try to bootstrap some distros</span></div><div class="line" id="223846"><span class="nick" style="color:#6d2462"><a href="#223846" label="[22:38:46]">&lt;stikonas&gt;</a></span><span class="message">and lower in the bootstrap I guess it's kernel work</span></div><div class="line" id="223851"><span class="nick" style="color:#6d2462"><a href="#223851" label="[22:38:51]">&lt;stikonas&gt;</a></span><span class="message">and maybe other arches...</span></div><div class="line" id="223927"><span class="nick" style="color:#6c3d55"><a href="#223927" label="[22:39:27]">&lt;melg8&gt;</a></span><span class="message">are resulting filesystem reproducible as well? meaning - if i tar all up - ci tar it all up - will those tars have same sha256sum?</span></div><div class="line" id="224002"><span class="nick" style="color:#6d2462"><a href="#224002" label="[22:40:02]">&lt;stikonas&gt;</a></span><span class="message">no, I don't think so</span></div><div class="line" id="224008"><span class="nick" style="color:#6d2462"><a href="#224008" label="[22:40:08]">&lt;stikonas&gt;</a></span><span class="message">files have dates</span></div><div class="line" id="224032"><span class="nick" style="color:#6d2462"><a href="#224032" label="[22:40:32]">&lt;stikonas&gt;</a></span><span class="message">oh one other thing, I think bauen1 is working on some minimal package manager</span></div><div class="line" id="224038"><span class="nick" style="color:#6d2462"><a href="#224038" label="[22:40:38]">&lt;stikonas&gt;</a></span><span class="message">stow based</span></div><div class="line" id="224043"><span class="nick" style="color:#6d2462"><a href="#224043" label="[22:40:43]">&lt;stikonas&gt;</a></span><span class="message">to manage symlinks</span></div><div class="line" id="224101"><span class="nick" style="color:#6d2462"><a href="#224101" label="[22:41:01]">&lt;stikonas&gt;</a></span><span class="message">and then building individual packages in chroot</span></div><div class="line" id="224103"><span class="nick" style="color:#234e69"><a href="#224103" label="[22:41:03]">&lt;bauen1&gt;</a></span><span class="message">yes, i just kicked off another build since the last rebase broke something</span></div><div class="line" id="224125"><span class="nick" style="color:#234e69"><a href="#224125" label="[22:41:25]">&lt;bauen1&gt;</a></span><span class="message">the putting builds into pseudo packages part is mostly done, the build in chroot part not really</span></div><div class="line" id="224132"><span class="nick" style="color:#6d2462"><a href="#224132" label="[22:41:32]">&lt;stikonas&gt;</a></span><span class="message">well, at least now live-bootstrap is a bit more stable</span></div><div class="line" id="224208"><span class="nick" style="color:#234e69"><a href="#224208" label="[22:42:08]">&lt;bauen1&gt;</a></span><span class="message">melg8: with the right flags you should be able to strip dates etc..</span></div><div class="line" id="224213"><span class="nick" style="color:#6d2462"><a href="#224213" label="[22:42:13]">&lt;stikonas&gt;</a></span><span class="message">no big changes that frequently</span></div><div class="line" id="224230"><span class="nick" style="color:#234e69"><a href="#224230" label="[22:42:30]">&lt;bauen1&gt;</a></span><span class="message">i also plan on using tar to extract the &quot;pseudo package&quot; from the chroot and doing checksums or something like that</span></div><div class="line" id="224242"><span class="nick" style="color:#6d2462"><a href="#224242" label="[22:42:42]">&lt;stikonas&gt;</a></span><span class="message">well, we'll see how well it works then</span></div><div class="line" id="224250"><span class="nick" style="color:#6d2462"><a href="#224250" label="[22:42:50]">&lt;stikonas&gt;</a></span><span class="message">maybe we can fix remaining differences</span></div><div class="line" id="224321"><span class="nick" style="color:#6d2462"><a href="#224321" label="[22:43:21]">&lt;stikonas&gt;</a></span><span class="message">but other than timestamps, there shouldn't be much</span></div><div class="line" id="224326"><span class="nick" style="color:#6d2462"><a href="#224326" label="[22:43:26]">&lt;stikonas&gt;</a></span><span class="message">all binaries are checksummed</span></div><div class="line" id="224341"><span class="nick" style="color:#6d2462"><a href="#224341" label="[22:43:41]">&lt;stikonas&gt;</a></span><span class="message">so rest are text files</span></div><div class="line" id="224359"><span class="nick" style="color:#6d2462"><a href="#224359" label="[22:43:59]">&lt;stikonas&gt;</a></span><span class="message">although, some are generated in the build process (e.g. autoconf/automake)</span></div><div class="line" id="224435"><span class="nick" style="color:#234e69"><a href="#224435" label="[22:44:35]">&lt;bauen1&gt;</a></span><span class="message">in fact you could already use my stow work to skip build steps if the pseudo package already exists (and checksums match)</span></div><div class="line" id="224513"><span class="nick" style="color:#234e69"><a href="#224513" label="[22:45:13]">&lt;bauen1&gt;</a></span><span class="message">i don't actually want to do that yet, as i want to include all inputs into one checksum, and then that + the result into another one and base the decision to build on that</span></div><div class="line" id="224905"><span class="nick" style="color:#234e69"><a href="#224905" label="[22:49:05]">&lt;bauen1&gt;</a></span><span class="message">i'm not really sure about using tar as format, since well you'll need tar, also how exactly pseudo packages should look like and what meta information would be useful to include</span></div><div class="line" id="225027"><span class="nick" style="color:#6d2462"><a href="#225027" label="[22:50:27]">&lt;stikonas&gt;</a></span><span class="message">although, tar is quite easy to build</span></div><div class="line" id="225042"><span class="nick" style="color:#6d2462"><a href="#225042" label="[22:50:42]">&lt;stikonas&gt;</a></span><span class="message">OriansJ: now has untar that is buildable with M2-Planet</span></div><div class="line" id="225050"><span class="nick" style="color:#234e69"><a href="#225050" label="[22:50:50]">&lt;bauen1&gt;</a></span><span class="message">oh that's nice</span></div><div class="line" id="225105"><span class="nick" style="color:#6d2462"><a href="#225105" label="[22:51:05]">&lt;stikonas&gt;</a></span><span class="message">well, tar is human readable anyway</span></div><div class="line" id="225110"><span class="nick" style="color:#234e69"><a href="#225110" label="[22:51:10]">&lt;bauen1&gt;</a></span><span class="message">can tar also do fully reproducible archives or are there still some bugs ?</span></div><div class="line" id="225114"><span class="nick" style="color:#6d2462"><a href="#225114" label="[22:51:14]">&lt;stikonas&gt;</a></span><span class="message">you can just open tarball in text editor</span></div><div class="line" id="225122"><span class="nick" style="color:#6d2462"><a href="#225122" label="[22:51:22]">&lt;stikonas&gt;</a></span><span class="message">and you'll be able to read files</span></div><div class="line" id="225141"><span class="nick" style="color:#6c3d55"><a href="#225141" label="[22:51:41]">&lt;melg8&gt;</a></span><span class="message">@bauen1 what would be goal of this pseudo-packages? contain state of some part of build?</span></div><div class="line" id="225142"><span class="nick" style="color:#6d2462"><a href="#225142" label="[22:51:42]">&lt;stikonas&gt;</a></span><span class="message">bauen1: tar is basically just concatenation of files with a bit of metadata</span></div><div class="line" id="225216"><span class="nick" style="color:#6d2462"><a href="#225216" label="[22:52:16]">&lt;stikonas&gt;</a></span><span class="message">melg8: just to have more structure</span></div><div class="line" id="225240"><span class="nick" style="color:#234e69"><a href="#225240" label="[22:52:40]">&lt;bauen1&gt;</a></span><span class="message">^ and allow one to easily skip single components, and have a clear and very explicit dependency graph</span></div><div class="line" id="225243"><span class="nick" style="color:#6d2462"><a href="#225243" label="[22:52:43]">&lt;stikonas&gt;</a></span><span class="message">e.g. if we eventually build in chroot (not to be confused with outer chroot of ./rootfs.py --chroot) then we need to know inputs</span></div><div class="line" id="225248"><span class="nick" style="color:#234e69"><a href="#225248" label="[22:52:48]">&lt;bauen1&gt;</a></span><span class="message">and actually enforce that dependency craph</span></div><div class="line" id="225251"><span class="nick" style="color:#234e69"><a href="#225251" label="[22:52:51]">&lt;bauen1&gt;</a></span><span class="message">*graph</span></div><div class="line" id="225302"><span class="nick" style="color:#6d2462"><a href="#225302" label="[22:53:02]">&lt;stikonas&gt;</a></span><span class="message">dependency graph is not fully known...</span></div><div class="line" id="225313"><span class="nick" style="color:#6d2462"><a href="#225313" label="[22:53:13]">&lt;stikonas&gt;</a></span><span class="message">we have rough drawing, but it's not very accurate later</span></div><div class="line" id="225317"><span class="nick" style="color:#234e69"><a href="#225317" label="[22:53:17]">&lt;bauen1&gt;</a></span><span class="message">which then allows one to more easily reorder components to make it smaller</span></div><div class="line" id="225329"><span class="nick" style="color:#234e69"><a href="#225329" label="[22:53:29]">&lt;bauen1&gt;</a></span><span class="message">lol</span></div><div class="line" id="225335"><span class="nick" style="color:#234e69"><a href="#225335" label="[22:53:35]">&lt;bauen1&gt;</a></span><span class="message">dependencies are hard</span></div><div class="line" id="225504"><span class="nick" style="color:#6c3d55"><a href="#225504" label="[22:55:04]">&lt;melg8&gt;</a></span><span class="message">thats sounds like soo similar to what nix is doing) they have like set of tools to even visualize</span></div><div class="line" id="225621"><span class="nick" style="color:#6c3d55"><a href="#225621" label="[22:56:21]">&lt;melg8&gt;</a></span><span class="message">but maybe it is not easy to build it's build closure, idk</span></div><div class="line" id="225636"><span class="nick" style="color:#234e69"><a href="#225636" label="[22:56:36]">&lt;bauen1&gt;</a></span><span class="message">melg8: and a more advanced goal i have is to allow the pseudo packages to be reused by bootstrapped distributions, so their dependency graph can be made non-cyclic</span></div><div class="line" id="225658"><span class="nick" style="color:#234e69"><a href="#225658" label="[22:56:58]">&lt;bauen1&gt;</a></span><span class="message">as in you no longer build gcc by using the gcc package, but e.g. live-bootstrap-upkg-gcc-8.0</span></div><div class="line" id="225724"><span class="nick" style="color:#234e69"><a href="#225724" label="[22:57:24]">&lt;bauen1&gt;</a></span><span class="message">which you could also do by simply taring up everything at the end, but i like to be explicit</span></div><div class="line" id="225751"><span class="nick" style="color:#234e69"><a href="#225751" label="[22:57:51]">&lt;bauen1&gt;</a></span><span class="message">oh and you can use it to easily answer the quesition where a resulting file came from</span></div><div class="line" id="225913"><span class="nick" style="color:#6c3d55"><a href="#225913" label="[22:59:13]">&lt;melg8&gt;</a></span><span class="message">for me that project is interesting from building for the first time - trusted(auditable) binary of compiler and applying diverse double-compiling to check what's up with the rest of compilers</span></div><div class="line" id="225935"><span class="nick" style="color:#6d2462"><a href="#225935" label="[22:59:35]">&lt;stikonas&gt;</a></span><span class="message">also &quot;removing&quot; stuff is harder without packages</span></div><div class="line" id="230003"><span class="nick" style="color:#234e69"><a href="#230003" label="[23:00:03]">&lt;bauen1&gt;</a></span><span class="message">^ currently e.g. /after/bin/bash is just replaced, which isn't particularely nice</span></div><div class="line" id="230039"><span class="nick" style="color:#6d2462"><a href="#230039" label="[23:00:39]">&lt;stikonas&gt;</a></span><span class="message">yes, so e.g. when we update package with newer version, we just rely on make install overwriting old files</span></div><div class="line" id="230049"><span class="nick" style="color:#6d2462"><a href="#230049" label="[23:00:49]">&lt;stikonas&gt;</a></span><span class="message">but e.g. what if newer version installs fewer files</span></div><div class="line" id="230054"><span class="nick" style="color:#6d2462"><a href="#230054" label="[23:00:54]">&lt;stikonas&gt;</a></span><span class="message">you'll have some cruft left</span></div><div class="line" id="230105"><span class="nick" style="color:#6d2462"><a href="#230105" label="[23:01:05]">&lt;stikonas&gt;</a></span><span class="message">or e.g. after we jump through libcs...</span></div><div class="line" id="230126"><span class="nick" style="color:#234e69"><a href="#230126" label="[23:01:26]">&lt;bauen1&gt;</a></span><span class="message">oh and if by some accidents parts of a Makefile don't respect DESTDIR or have some other bug, they can just write all over /</span></div><div class="line" id="230127"><span class="nick" style="color:#6d2462"><a href="#230127" label="[23:01:27]">&lt;stikonas&gt;</a></span><span class="message">I think there are still some mes libc files in final fs</span></div><div class="line" id="230218"><span class="nick" style="color:#234e69"><a href="#230218" label="[23:02:18]">&lt;bauen1&gt;</a></span><span class="message">btw isn't there that one component that can't be distributed in binary form ? we should probably try to replace / rewrite it</span></div><div class="line" id="230234"><span class="nick" style="color:#6d2462"><a href="#230234" label="[23:02:34]">&lt;stikonas&gt;</a></span><span class="message">bauen1: oh, it is removed</span></div><div class="line" id="230249"><span class="nick" style="color:#6d2462"><a href="#230249" label="[23:02:49]">&lt;stikonas&gt;</a></span><span class="message">some files are overwritten, some are removed</span></div><div class="line" id="230305"><span class="nick" style="color:#6d2462"><a href="#230305" label="[23:03:05]">&lt;stikonas&gt;</a></span><span class="message">I think mostly in flex build scripts</span></div><div class="line" id="230329"><span class="nick" style="color:#6d2462"><a href="#230329" label="[23:03:29]">&lt;stikonas&gt;</a></span><span class="message">we remove lex and yacc there</span></div><div class="line" id="230357"><span class="nick" style="color:#234e69"><a href="#230357" label="[23:03:57]">&lt;bauen1&gt;</a></span><span class="message">i've discovered most of those (after perl where i have stow) and removed them now too in favour of unlinking the old &quot;package&quot;</span></div><div class="line" id="230359"><span class="nick" style="color:#6c3d55"><a href="#230359" label="[23:03:59]">&lt;melg8&gt;</a></span><span class="message">for me personally would be really reassuring if i could easily see what is exact final product of each of &quot;stages&quot; - what files goes where and what are theirs hashes</span></div><div class="line" id="230528"><span class="nick" style="color:#6c3d55"><a href="#230528" label="[23:05:28]">&lt;melg8&gt;</a></span><span class="message">btw is there any automation involved - for example - is there a way now to check - if all binaries and libs are covered with hash check? or for now it's just with eyes?</span></div><div class="line" id="230554"><span class="nick" style="color:#6d2462"><a href="#230554" label="[23:05:54]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysa/flex-2.5.11/flex-2.5.11.sh#L16">https://github.com/fosslinux/live-bootstrap/blob/master/sysa/flex-2.5.11/flex-2.5.11.sh#L16</a> </span></div><div class="line" id="230609"><span class="nick" style="color:#6d2462"><a href="#230609" label="[23:06:09]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/sysa/flex-2.6.4/flex-2.6.4.sh#L24">https://github.com/fosslinux/live-bootstrap/blob/master/sysa/flex-2.6.4/flex-2.6.4.sh#L24</a> </span></div><div class="line" id="230640"><span class="nick" style="color:#6d2462"><a href="#230640" label="[23:06:40]">&lt;stikonas&gt;</a></span><span class="message">melg8: all binaries are hash checked</span></div><div class="line" id="230653"><span class="nick" style="color:#6d2462"><a href="#230653" label="[23:06:53]">&lt;stikonas&gt;</a></span><span class="message">well, at least as soon as we have checksuming program</span></div><div class="line" id="230708"><span class="nick" style="color:#6d2462"><a href="#230708" label="[23:07:08]">&lt;stikonas&gt;</a></span><span class="message">initially it's very simple hash (fletcher16)</span></div><div class="line" id="230719"><span class="nick" style="color:#6d2462"><a href="#230719" label="[23:07:19]">&lt;stikonas&gt;</a></span><span class="message">but very soon we move to sha256sum</span></div><div class="line" id="230804"><span class="nick" style="color:#6d2462"><a href="#230804" label="[23:08:04]">&lt;stikonas&gt;</a></span><span class="message">initially some simpler implementation, later from GNU coreutils (which works with files larger than 2MB)</span></div><div class="line" id="230822"><span class="nick" style="color:#6d2462"><a href="#230822" label="[23:08:22]">&lt;stikonas&gt;</a></span><span class="message">melg8: oh, but we don't have automation to check that all binaries are checksummed</span></div><div class="line" id="230845"><span class="nick" style="color:#6d2462"><a href="#230845" label="[23:08:45]">&lt;stikonas&gt;</a></span><span class="message">early it's usually just 1 binary per step that is installed</span></div><div class="line" id="230857"><span class="nick" style="color:#234e69"><a href="#230857" label="[23:08:57]">&lt;bauen1&gt;</a></span><span class="message">i'd really like to hash *all* files generated, upkg-build (or some of its simpler forms) will make that straight forward</span></div><div class="line" id="230859"><span class="nick" style="color:#6d2462"><a href="#230859" label="[23:08:59]">&lt;stikonas&gt;</a></span><span class="message">later we have autotools, so one can try to use DESTDIR to see what files it installs</span></div><div class="line" id="230923"><span class="nick" style="color:#6d2462"><a href="#230923" label="[23:09:23]">&lt;stikonas&gt;</a></span><span class="message">yeah, hashing all files automatically woud be nice</span></div><div class="line" id="232149"><span class="nick" style="color:#6c3d55"><a href="#232149" label="[23:21:49]">&lt;melg8&gt;</a></span><span class="message">I can imagine that current implementation of sha256sum and self-check algo could have some bugs or imperfections - which could lead to not caught problems, propagating to later stages, it would be nice to have check from &quot;outside&quot; perspective for the whole product of build - ideally - with one to one relationship from git commit to the whole result</span></div><div class="line" id="232149"><span class="nick" style="color:#6c3d55"><a href="#232149" label="[23:21:49]">&lt;melg8&gt;</a></span><span class="message">hash.</span></div><div class="line" id="232211"><span class="nick" style="color:#6d2462"><a href="#232211" label="[23:22:11]">&lt;stikonas&gt;</a></span><span class="message">hmm, I though inside implementation is actually better</span></div><div class="line" id="232220"><span class="nick" style="color:#6d2462"><a href="#232220" label="[23:22:20]">&lt;stikonas&gt;</a></span><span class="message">since it's bootstrapped, so less likely to be &quot;backdoored&quot;</span></div><div class="line" id="232247"><span class="nick" style="color:#6d2462"><a href="#232247" label="[23:22:47]">&lt;stikonas&gt;</a></span><span class="message">well, we had that issue where first initial sha256sum was calculating hashes incorrectly</span></div><div class="line" id="232253"><span class="nick" style="color:#6d2462"><a href="#232253" label="[23:22:53]">&lt;stikonas&gt;</a></span><span class="message">turns out it was limitted to 2MiB</span></div><div class="line" id="232258"><span class="nick" style="color:#6c3d55"><a href="#232258" label="[23:22:58]">&lt;melg8&gt;</a></span><span class="message">i think it needs both</span></div><div class="line" id="232315"><span class="nick" style="color:#6d2462"><a href="#232315" label="[23:23:15]">&lt;stikonas&gt;</a></span><span class="message">well, I usually run external sha256sum to calculate checksum file</span></div><div class="line" id="232328"><span class="nick" style="color:#6d2462"><a href="#232328" label="[23:23:28]">&lt;stikonas&gt;</a></span><span class="message">and then once live-bootstrap runs, internal sha256sum checks it</span></div><div class="line" id="232519"><span class="nick" style="color:#6d2462"><a href="#232519" label="[23:25:19]">&lt;stikonas&gt;</a></span><span class="message">well, self-check algo is just test -e &quot;${checksum_f}&quot; &amp;&amp; sha256sum -c &quot;${checksum_f}&quot;</span></div><div class="line" id="232544"><span class="nick" style="color:#6d2462"><a href="#232544" label="[23:25:44]">&lt;stikonas&gt;</a></span><span class="message">so basically sha256sum -c checksum_file</span></div><div class="line" id="232608"><span class="nick" style="color:#6d2462"><a href="#232608" label="[23:26:08]">&lt;stikonas&gt;</a></span><span class="message">what I would like to have is</span></div><div class="line" id="232616"><span class="nick" style="color:#6d2462"><a href="#232616" label="[23:26:16]">&lt;stikonas&gt;</a></span><span class="message">also checking tarball checksums inside</span></div><div class="line" id="232635"><span class="nick" style="color:#6d2462"><a href="#232635" label="[23:26:35]">&lt;stikonas&gt;</a></span><span class="message">but maybe bauen1's work will include that for free</span></div><div class="line" id="232636"><span class="nick" style="color:#6c3d55"><a href="#232636" label="[23:26:36]">&lt;melg8&gt;</a></span><span class="message">but, do checksum_files are the same the whole time?) (hello, that&quot;s my paranoia)</span></div><div class="line" id="232702"><span class="nick" style="color:#6d2462"><a href="#232702" label="[23:27:02]">&lt;stikonas&gt;</a></span><span class="message">well, that will be resolved once bauen1 has &quot;packages&quot;</span></div><div class="line" id="232707"><span class="nick" style="color:#6c3d55"><a href="#232707" label="[23:27:07]">&lt;melg8&gt;</a></span><span class="message">yea</span></div><div class="line" id="232719"><span class="nick" style="color:#6d2462"><a href="#232719" label="[23:27:19]">&lt;stikonas&gt;</a></span><span class="message">and before autotools it's definitely the same</span></div><div class="line" id="232729"><span class="nick" style="color:#6d2462"><a href="#232729" label="[23:27:29]">&lt;stikonas&gt;</a></span><span class="message">autotools makes things a bit harder to track</span></div><div class="line" id="232742"><span class="nick" style="color:#6d2462"><a href="#232742" label="[23:27:42]">&lt;stikonas&gt;</a></span><span class="message">but also gives more tools (eg. DESTDIR installation into staged dir)</span></div><div class="line" id="234036"><span class="nick" style="color:#6c3d55"><a href="#234036" label="[23:40:36]">&lt;melg8&gt;</a></span><span class="message">how you correctly exit from qemu? i've tried exit from inside of shell - it spits out qemu messages, but doesn't return to the parent shell from which i started</span></div><div class="line" id="234854"><span class="nick" style="color:#6d2462"><a href="#234854" label="[23:48:54]">&lt;stikonas&gt;</a></span><span class="message">pkill qemu-... from the other shell</span></div><div class="line" id="234907"><span class="nick" style="color:#6d2462"><a href="#234907" label="[23:49:07]">&lt;stikonas&gt;</a></span><span class="message">(pkill probably supports tab completion too)</span></div><div class="line" id="235044"><span class="nick" style="color:#6c3d55"><a href="#235044" label="[23:50:44]">&lt;melg8&gt;</a></span><span class="message">thanks!</span></div><div class="line" id="235346"><span class="nick" style="color:#bc80bd"><a href="#235346" label="[23:53:46]">&lt;stikonas[m]&gt;</a></span><span class="message">We haven't built properpower off...</span></div><br /></div></body></html>