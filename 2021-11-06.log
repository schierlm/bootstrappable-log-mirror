<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-11-06.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="010839"><span class="nick" style="color:#389600"><a href="#010839" label="[01:08:39]">&lt;stikonas&gt;</a></span><span class="message">fossy: so for modern python build system uses python?</span></div><div class="line" id="010904"><span class="nick" style="color:#389600"><a href="#010904" label="[01:09:04]">&lt;stikonas&gt;</a></span><span class="message">or how does it self-depend?</span></div><div class="line" id="011253"><span class="nick" style="color:#8dd3c7"><a href="#011253" label="[01:12:53]">&lt;fossy&gt;</a></span><span class="message">stikonas: parser uses some ASDL thing (not familar with it) and the parser is written in pytnonm</span></div><div class="line" id="011255"><span class="nick" style="color:#8dd3c7"><a href="#011255" label="[01:12:55]">&lt;fossy&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/python/cpython/blob/v3.10.0/Parser/asdl_c.py">https://github.com/python/cpython/blob/v3.10.0/Parser/asdl_c.py</a> </span></div><div class="line" id="011335"><span class="nick" style="color:#389600"><a href="#011335" label="[01:13:35]">&lt;stikonas&gt;</a></span><span class="message">hmm, haven't heard about it either</span></div><div class="line" id="011414"><span class="nick" style="color:#8dd3c7"><a href="#011414" label="[01:14:14]">&lt;fossy&gt;</a></span><span class="message">i think its a python thing</span></div><div class="line" id="011417"><span class="nick" style="color:#389600"><a href="#011417" label="[01:14:17]">&lt;stikonas&gt;</a></span><span class="message">maybe something like flex...</span></div><div class="line" id="011454"><span class="nick" style="color:#8dd3c7"><a href="#011454" label="[01:14:54]">&lt;fossy&gt;</a></span><span class="message">yeah, thats my impression</span></div><div class="line" id="011553"><span class="nick" style="color:#8dd3c7"><a href="#011553" label="[01:15:53]">&lt;fossy&gt;</a></span><span class="message">but python specific</span></div><div class="line" id="022513"><span class="nick" style="color:#6b8072"><a href="#022513" label="[02:25:13]">&lt;Hagfish&gt;</a></span><span class="message">&quot;weird flex, but okay&quot; as they say</span></div><div class="line" id="023216"><span class="nick" style="color:#80b1d3"><a href="#023216" label="[02:32:16]">&lt;oriansj&gt;</a></span><span class="message">how interesting we keep finding bootstrapping problems which other projects somehow managed to ignore.</span></div><div class="line" id="042018"><span class="nick" style="color:#6d2462"><a href="#042018" label="[04:20:18]">&lt;pabs3&gt;</a></span><span class="message">Hagfish: where is the apt quote from?</span></div><div class="line" id="045823"><span class="nick" style="color:#8dd3c7"><a href="#045823" label="[04:58:23]">&lt;fossy&gt;</a></span><span class="message">oriansj: pregenerated files are often ignored</span></div><div class="line" id="050134"><span class="nick" style="color:#6d2462"><a href="#050134" label="[05:01:34]">&lt;pabs3&gt;</a></span><span class="message">often they are even committed to git, or present on packaging sites like crates.io or npm</span></div><div class="line" id="051412"><span class="nick" style="color:#6b8072"><a href="#051412" label="[05:14:12]">&lt;Hagfish&gt;</a></span><span class="message">pabs3: the quote about apt/npm was from a HN discussion (about one of the various recent supply-chain attacks npm has had)</span></div><div class="line" id="051555"><span class="nick" style="color:#6d2462"><a href="#051555" label="[05:15:55]">&lt;pabs3&gt;</a></span><span class="message">I see thats <a rel="nofollow" href="https://github.com/npm/rfcs/pull/488">https://github.com/npm/rfcs/pull/488</a>  <a rel="nofollow" href="https://news.ycombinator.com/item?id=29122473">https://news.ycombinator.com/item?id=29122473</a> </span></div><div class="line" id="051633"><span class="nick" style="color:#6b8072"><a href="#051633" label="[05:16:33]">&lt;Hagfish&gt;</a></span><span class="message">ah yes</span></div><div class="line" id="125440"><span class="nick" style="color:#389600"><a href="#125440" label="[12:54:40]">&lt;stikonas&gt;</a></span><span class="message">but at this stage live bootstrap managed to bootstrap enough software, so that previously unknown pre-generated files should be getting less of a problem</span></div><div class="line" id="130242"><span class="nick" style="color:#8dd3c7"><a href="#130242" label="[13:02:42]">&lt;fossy&gt;</a></span><span class="message">for sure</span></div><div class="line" id="130540"><span class="nick" style="color:#80b1d3"><a href="#130540" label="[13:05:40]">&lt;oriansj&gt;</a></span><span class="message">fossy: fair however, one would hope projects like NixOS and Guix would atleast look. Otherwise we might find and fix quite a few more bootstrapping blobs.</span></div><div class="line" id="130626"><span class="nick" style="color:#80b1d3"><a href="#130626" label="[13:06:26]">&lt;oriansj&gt;</a></span><span class="message">but I guess the rejection of pregenerated blobby text files, might be a cultural shift that still needs to occur in the larger community.</span></div><div class="line" id="130638"><span class="nick" style="color:#389600"><a href="#130638" label="[13:06:38]">&lt;stikonas&gt;</a></span><span class="message">well, that's probably the consequence of top-down approach to bootstrapping that NixOS and Guix uses</span></div><div class="line" id="130650"><span class="nick" style="color:#389600"><a href="#130650" label="[13:06:50]">&lt;stikonas&gt;</a></span><span class="message">rather than bottom up</span></div><div class="line" id="130710"><span class="nick" style="color:#80b1d3"><a href="#130710" label="[13:07:10]">&lt;oriansj&gt;</a></span><span class="message">stikonas: and the rate of package addition (doesn't allow much for introspection and review)</span></div><div class="line" id="130721"><span class="nick" style="color:#389600"><a href="#130721" label="[13:07:21]">&lt;stikonas&gt;</a></span><span class="message">that too</span></div><div class="line" id="131059"><span class="nick" style="color:#389600"><a href="#131059" label="[13:10:59]">&lt;stikonas&gt;</a></span><span class="message">hmm, these two types might not be necessary now <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/blob/master/cc_types.c#L111">https://github.com/oriansj/M2-Planet/blob/master/cc_types.c#L111</a> </span></div><div class="line" id="131109"><span class="nick" style="color:#389600"><a href="#131109" label="[13:11:09]">&lt;stikonas&gt;</a></span><span class="message">(since mes-m2 switched to non-bootstrap mode)</span></div><div class="line" id="131254"><span class="nick" style="color:#80b1d3"><a href="#131254" label="[13:12:54]">&lt;oriansj&gt;</a></span><span class="message">depends if we want M2-Planet to use size_t and ssize_t in the bootstrap subset as bootstrap mode is to emulate cc_* type support</span></div><div class="line" id="131415"><span class="nick">***</span><span class="message notice">smartin1 is now known as smartin</span></div><div class="line" id="131646"><span class="nick" style="color:#80b1d3"><a href="#131646" label="[13:16:46]">&lt;oriansj&gt;</a></span><span class="message">as I know there are a few places where size_t is the correct C type per the standard but it works just fine with int or unsigned.</span></div><div class="line" id="131909"><span class="nick" style="color:#389600"><a href="#131909" label="[13:19:09]">&lt;stikonas&gt;</a></span><span class="message">unsigned should work as long as unsigned is at least 16-bit which it is</span></div><div class="line" id="132121"><span class="nick" style="color:#80b1d3"><a href="#132121" label="[13:21:21]">&lt;oriansj&gt;</a></span><span class="message">yep and for some of the input ranges int will work as well. So not required at all (just didn't want to break mes-m2 or blynn-compiler by dropping type support)</span></div><div class="line" id="132201"><span class="nick" style="color:#80b1d3"><a href="#132201" label="[13:22:01]">&lt;oriansj&gt;</a></span><span class="message">but now we have typedef in M2-Planet, it is less of an issue</span></div><div class="line" id="132256"><span class="nick" style="color:#80b1d3"><a href="#132256" label="[13:22:56]">&lt;oriansj&gt;</a></span><span class="message">and once mes-m2 is free of bootstrap-mode and blynn-compiler (I can do that this weekend) is as well</span></div><div class="line" id="132320"><span class="nick" style="color:#80b1d3"><a href="#132320" label="[13:23:20]">&lt;oriansj&gt;</a></span><span class="message">we absolutely can drop those types</span></div><div class="line" id="152911"><span class="nick" style="color:#80b1d3"><a href="#152911" label="[15:29:11]">&lt;oriansj&gt;</a></span><span class="message">just wish testing bylnn-compiler with M2-Planet wasn't so slow</span></div><div class="line" id="153001"><span class="nick" style="color:#80b1d3"><a href="#153001" label="[15:30:01]">&lt;oriansj&gt;</a></span><span class="message">also siraben didn't we want ultimately make M2-Planet support enough C features to stick closer to the upstream master?</span></div><div class="line" id="164534"><span class="nick" style="color:#389600"><a href="#164534" label="[16:45:34]">&lt;stikonas&gt;</a></span><span class="message">well, at the very least we can now use #defines instead of // CONSTANT in blynn-compiler</span></div><div class="line" id="164640"><span class="nick" style="color:#80b1d3"><a href="#164640" label="[16:46:40]">&lt;oriansj&gt;</a></span><span class="message">and M2libc is actually a thing now</span></div><div class="line" id="164646"><span class="nick" style="color:#389600"><a href="#164646" label="[16:46:46]">&lt;stikonas&gt;</a></span><span class="message">I'm not actually sure what might be the next best improvement in M2-Planet...</span></div><div class="line" id="164656"><span class="nick" style="color:#80b1d3"><a href="#164656" label="[16:46:56]">&lt;oriansj&gt;</a></span><span class="message">so a functions folder isn't needed anymore</span></div><div class="line" id="164715"><span class="nick" style="color:#80b1d3"><a href="#164715" label="[16:47:15]">&lt;oriansj&gt;</a></span><span class="message">stikonas: probably support for foo[a][b]=c;</span></div><div class="line" id="164759"><span class="nick" style="color:#389600"><a href="#164759" label="[16:47:59]">&lt;stikonas&gt;</a></span><span class="message">one thing that is not working as C99 requires are logical AND or OR (we use bitwise AND/OR instead of those). But I think mes only uses them for 0 and 1 True/False (unlike !)</span></div><div class="line" id="164820"><span class="nick" style="color:#389600"><a href="#164820" label="[16:48:20]">&lt;stikonas&gt;</a></span><span class="message">so I think we can live without proper logical operations for now</span></div><div class="line" id="164838"><span class="nick" style="color:#80b1d3"><a href="#164838" label="[16:48:38]">&lt;oriansj&gt;</a></span><span class="message">yeah, it would require a bit more complex of a code change</span></div><div class="line" id="164844"><span class="nick" style="color:#389600"><a href="#164844" label="[16:48:44]">&lt;stikonas&gt;</a></span><span class="message">upstream mes also uses &quot;a.b&quot; quite a bit</span></div><div class="line" id="164914"><span class="nick" style="color:#80b1d3"><a href="#164914" label="[16:49:14]">&lt;oriansj&gt;</a></span><span class="message">and we could add support for it</span></div><div class="line" id="164957"><span class="nick" style="color:#389600"><a href="#164957" label="[16:49:57]">&lt;stikonas&gt;</a></span><span class="message">yeah... I guess one would have to calculate correct offsets to store structs on stack but should be doable</span></div><div class="line" id="165009"><span class="nick" style="color:#80b1d3"><a href="#165009" label="[16:50:09]">&lt;oriansj&gt;</a></span><span class="message">(we just can't use it internally as cc_* doesn't support it)</span></div><div class="line" id="165036"><span class="nick" style="color:#389600"><a href="#165036" label="[16:50:36]">&lt;stikonas&gt;</a></span><span class="message">yes. Well, that's true for almost every tool in the bootstrap chain</span></div><div class="line" id="165108"><span class="nick" style="color:#389600"><a href="#165108" label="[16:51:08]">&lt;stikonas&gt;</a></span><span class="message">we don't really need to use it internally, calloc + -&gt; works just fine internally</span></div><div class="line" id="165215"><span class="nick" style="color:#389600"><a href="#165215" label="[16:52:15]">&lt;stikonas&gt;</a></span><span class="message">btw, live-bootstrap is now switched to newer stage0-posix and mes-m2, so doesn't use bootstrap mode anymore</span></div><div class="line" id="165328"><span class="nick" style="color:#389600"><a href="#165328" label="[16:53:28]">&lt;stikonas&gt;</a></span><span class="message">so I guess it's just blynn-compiler that uses bootstrap-mode</span></div><div class="line" id="165349"><span class="nick" style="color:#389600"><a href="#165349" label="[16:53:49]">&lt;stikonas&gt;</a></span><span class="message">well, and blood-elf, M1 internally in stage0-posix</span></div><div class="line" id="165522"><span class="nick" style="color:#80b1d3"><a href="#165522" label="[16:55:22]">&lt;oriansj&gt;</a></span><span class="message">but they don't use size_t or ssize_t as if I remember correctly</span></div><div class="line" id="165606"><span class="nick" style="color:#389600"><a href="#165606" label="[16:56:06]">&lt;stikonas&gt;</a></span><span class="message">no, they don't</span></div><div class="line" id="165618"><span class="nick" style="color:#389600"><a href="#165618" label="[16:56:18]">&lt;stikonas&gt;</a></span><span class="message">I tried with those size_t and ssize_t removed and stage0-posix builds just fine</span></div><div class="line" id="165720"><span class="nick" style="color:#80b1d3"><a href="#165720" label="[16:57:20]">&lt;oriansj&gt;</a></span><span class="message">nice</span></div><div class="line" id="170008"><span class="nick" style="color:#234e69"><a href="#170008" label="[17:00:08]">&lt;riv&gt;</a></span><span class="message">what are you working on?</span></div><div class="line" id="170244"><span class="nick" style="color:#80b1d3"><a href="#170244" label="[17:02:44]">&lt;oriansj&gt;</a></span><span class="message">making blynn-compiler no longer need --bootstrap-mode so that we can strip it down in M2-Planet</span></div><div class="line" id="170325"><span class="nick" style="color:#234e69"><a href="#170325" label="[17:03:25]">&lt;riv&gt;</a></span><span class="message">cool!</span></div><div class="line" id="170808"><span class="nick" style="color:#389600"><a href="#170808" label="[17:08:08]">&lt;stikonas&gt;</a></span><span class="message">that's because M2-Planet now has some preprocessor support, so blynn-compiler can be closer to upstream...</span></div><div class="line" id="171233"><span class="nick" style="color:#80b1d3"><a href="#171233" label="[17:12:33]">&lt;oriansj&gt;</a></span><span class="message">or with luck (and possibly a few new functions be part of upstream)</span></div><div class="line" id="172809"><span class="nick" style="color:#6b8072"><a href="#172809" label="[17:28:09]">&lt;Hagfish&gt;</a></span><span class="message">nice developments guys, well done</span></div><div class="line" id="173144"><span class="nick" style="color:#389600"><a href="#173144" label="[17:31:44]">&lt;stikonas&gt;</a></span><span class="message">well, preprocessor support is not that new now. But it did get a bit better recently</span></div><div class="line" id="173923"><span class="nick" style="color:#6b8072"><a href="#173923" label="[17:39:23]">&lt;Hagfish&gt;</a></span><span class="message">the fact that live-bootstrap doesn't need a bootstrap mode is particularly cool (although almost ironic) :)</span></div><div class="line" id="180301"><span class="nick" style="color:#80b1d3"><a href="#180301" label="[18:03:01]">&lt;oriansj&gt;</a></span><span class="message">Hagfish: well bootstrap-mode is more about catching changes in M2-Planet that are not supported by cc_*</span></div><div class="line" id="180354"><span class="nick" style="color:#80b1d3"><a href="#180354" label="[18:03:54]">&lt;oriansj&gt;</a></span><span class="message">and was kinda used as an ad-hoc M2-Planet legacy mode when preprocessor support was added by yt</span></div><div class="line" id="180933"><span class="nick" style="color:#80b1d3"><a href="#180933" label="[18:09:33]">&lt;oriansj&gt;</a></span><span class="message">which was also around the same time that M2libc started and FILE became a real struct rather than an int</span></div><div class="line" id="191524"><span class="nick" style="color:#6b8072"><a href="#191524" label="[19:15:24]">&lt;Hagfish&gt;</a></span><span class="message">files were treated as integers?</span></div><div class="line" id="191555"><span class="nick" style="color:#6b8072"><a href="#191555" label="[19:15:55]">&lt;Hagfish&gt;</a></span><span class="message">i mean i guess that works, but that does seem like a severe limitation</span></div><div class="line" id="192006"><span class="nick" style="color:#80b1d3"><a href="#192006" label="[19:20:06]">&lt;oriansj&gt;</a></span><span class="message">Hagfish: well yes, no buffering and a raw 1byte read syscall and 1byte write syscall are trivial to implment and provided the minimal functionality needed. Buffering and bigger blocks of write and only a single read syscall for an entire file really speed things up</span></div><div class="line" id="192138"><span class="nick" style="color:#6b8072"><a href="#192138" label="[19:21:38]">&lt;Hagfish&gt;</a></span><span class="message">yeah, it's amazing what goes on between the edges of &quot;possible&quot; and &quot;easy&quot;</span></div><div class="line" id="192336"><span class="nick" style="color:#80b1d3"><a href="#192336" label="[19:23:36]">&lt;oriansj&gt;</a></span><span class="message">well also layers of abstraction really expand easy into the hard problem space.</span></div><div class="line" id="192353"><span class="nick" style="color:#80b1d3"><a href="#192353" label="[19:23:53]">&lt;oriansj&gt;</a></span><span class="message">Doing a C preprocessor in assembly =&gt; hell nope</span></div><div class="line" id="192414"><span class="nick" style="color:#80b1d3"><a href="#192414" label="[19:24:14]">&lt;oriansj&gt;</a></span><span class="message">doing it in the limited C subset of cc_* =&gt; actually not that bad</span></div><div class="line" id="192604"><span class="nick" style="color:#6b8072"><a href="#192604" label="[19:26:04]">&lt;Hagfish&gt;</a></span><span class="message">nice</span></div><div class="line" id="192743"><span class="nick" style="color:#80b1d3"><a href="#192743" label="[19:27:43]">&lt;oriansj&gt;</a></span><span class="message">although part of me hoped the blynn-compiler path got more love, because then we could do a scheme in haskell, the haskell in C and the C as a scheme program for MesCC;</span></div><div class="line" id="192816"><span class="nick" style="color:#80b1d3"><a href="#192816" label="[19:28:16]">&lt;oriansj&gt;</a></span><span class="message">but eh, doing a haskell is hard and M2-Planet needed to get better first</span></div><div class="line" id="192930"><span class="nick" style="color:#6b8072"><a href="#192930" label="[19:29:30]">&lt;Hagfish&gt;</a></span><span class="message">i thought the purpose of this project was to get rid of cycles in build systems ;)</span></div><div class="line" id="193035"><span class="nick" style="color:#6c3d55"><a href="#193035" label="[19:30:35]">&lt;siraben&gt;</a></span><span class="message">oriansj: if M2-Planet had more C features it would be easier to stick to blynn's work</span></div><div class="line" id="193038"><span class="nick" style="color:#80b1d3"><a href="#193038" label="[19:30:38]">&lt;oriansj&gt;</a></span><span class="message">There is a difference between 3 language starting points than a cicular dependency</span></div><div class="line" id="193053"><span class="nick" style="color:#6b8072"><a href="#193053" label="[19:30:53]">&lt;Hagfish&gt;</a></span><span class="message">true, true</span></div><div class="line" id="193106"><span class="nick" style="color:#6c3d55"><a href="#193106" label="[19:31:06]">&lt;siraben&gt;</a></span><span class="message">It's still a viable path but I or others would need to sit down and actually do it (the Scheme interpreter in Haskell)</span></div><div class="line" id="193113"><span class="nick" style="color:#80b1d3"><a href="#193113" label="[19:31:13]">&lt;oriansj&gt;</a></span><span class="message">siraben: absolutely, and with the new preprocessor, we certainly are much closer than ever.</span></div><div class="line" id="193132"><span class="nick" style="color:#6c3d55"><a href="#193132" label="[19:31:32]">&lt;siraben&gt;</a></span><span class="message">I haven't seen a better bootstrapped and feature-rich Haskell as this one</span></div><div class="line" id="193330"><span class="nick" style="color:#6c3d55"><a href="#193330" label="[19:33:30]">&lt;siraben&gt;</a></span><span class="message">It's even possible to swap out one of blynn's stages with a custom Lisp-like one: e.g. <a rel="nofollow" href="https://github.com/siraben/compiler/blob/staging/lispy">https://github.com/siraben/compiler/blob/staging/lispy</a>  bootstraps <a rel="nofollow" href="https://github.com/siraben/compiler/blob/staging/binary.lisp">https://github.com/siraben/compiler/blob/staging/binary.lisp</a> </span></div><div class="line" id="193508"><span class="nick" style="color:#6c3d55"><a href="#193508" label="[19:35:08]">&lt;siraben&gt;</a></span><span class="message">&lt;oriansj&gt; &quot;fossy: fair however, one would...&quot; &lt;- <a rel="nofollow" href="https://github.com/NixOS/nixpkgs/issues/123095">https://github.com/NixOS/nixpkgs/issues/123095</a> </span></div><div class="line" id="193520"><span class="nick" style="color:#80b1d3"><a href="#193520" label="[19:35:20]">&lt;oriansj&gt;</a></span><span class="message">the only point  that needs a good bit of love is: <a rel="nofollow" href="https://github.com/oriansj/blynn-compiler/tree/master/blob">https://github.com/oriansj/blynn-compiler/tree/master/blob</a> </span></div><div class="line" id="193853"><span class="nick" style="color:#6c3d55"><a href="#193853" label="[19:38:53]">&lt;siraben&gt;</a></span><span class="message">agree</span></div><div class="line" id="194053"><span class="nick" style="color:#80b1d3"><a href="#194053" label="[19:40:53]">&lt;oriansj&gt;</a></span><span class="message">also nice to see the potential for NixOS to pick up live-bootstrap; even if it means I have a great deal more work to do first</span></div><div class="line" id="200917"><span class="nick" style="color:#80b1d3"><a href="#200917" label="[20:09:17]">&lt;oriansj&gt;</a></span><span class="message">and blynn-compiler has be updated to use latest mescc-tools, M2libc and the latest M2-Planet in non-bootstrap-mode</span></div><div class="line" id="201009"><span class="nick" style="color:#80b1d3"><a href="#201009" label="[20:10:09]">&lt;oriansj&gt;</a></span><span class="message">and it should be much work to make it work on non-x86 hosts</span></div><div class="line" id="201409"><span class="nick" style="color:#80b1d3"><a href="#201409" label="[20:14:09]">&lt;oriansj&gt;</a></span><span class="message">although I think I broke the github build thing</span></div><div class="line" id="201440"><span class="nick" style="color:#80b1d3"><a href="#201440" label="[20:14:40]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/blynn-compiler/runs/4127205546?check_suite_focus=true">https://github.com/oriansj/blynn-compiler/runs/4127205546?check_suite_focus=true</a> </span></div><div class="line" id="201841"><span class="nick" style="color:#80b1d3"><a href="#201841" label="[20:18:41]">&lt;oriansj&gt;</a></span><span class="message">probably needed to update the nix package definitions or something</span></div><div class="line" id="202141"><span class="nick" style="color:#80b1d3"><a href="#202141" label="[20:21:41]">&lt;oriansj&gt;</a></span><span class="message">I'll leave that for someone else (as they will also need to replace mescc-tools-seed with stage0-posix)</span></div><div class="line" id="202423"><span class="nick" style="color:#80b1d3"><a href="#202423" label="[20:24:23]">&lt;oriansj&gt;</a></span><span class="message">but that is a small change</span></div><div class="line" id="202432"><span class="nick" style="color:#80b1d3"><a href="#202432" label="[20:24:32]">&lt;oriansj&gt;</a></span><span class="message">(as it was just a name change)</span></div><div class="line" id="214210"><span class="nick" style="color:#389600"><a href="#214210" label="[21:42:10]">&lt;stikonas&gt;</a></span><span class="message">well, it might be nice to have alternative paths (m2-planet-&gt;haskell-&gt;scheme-&gt;mescc) but I suspect it might be easier to just improve M2-Planet to the point where we can build mes (possibly a bit simplified)</span></div><div class="line" id="214239"><span class="nick" style="color:#389600"><a href="#214239" label="[21:42:39]">&lt;stikonas&gt;</a></span><span class="message">mes-m2 fork already showed that this is possible, but it was probably a bit too invasive to land upstream</span></div><div class="line" id="221656"><span class="nick" style="color:#6c3d55"><a href="#221656" label="[22:16:56]">&lt;siraben&gt;</a></span><span class="message">oriansj: ack</span></div><div class="line" id="223245"><span class="nick" style="color:#80b1d3"><a href="#223245" label="[22:32:45]">&lt;oriansj&gt;</a></span><span class="message">siraben: ?</span></div><div class="line" id="223318"><span class="nick" style="color:#6c3d55"><a href="#223318" label="[22:33:18]">&lt;siraben&gt;</a></span><span class="message">oh ACK that the Nix build is broken</span></div><div class="line" id="223344"><span class="nick" style="color:#80b1d3"><a href="#223344" label="[22:33:44]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well yes, of course as M2-Planet grows features; it gets closer to being able to directly build TCC itself as well</span></div><div class="line" id="223357"><span class="nick" style="color:#d9d9d9"><a href="#223357" label="[22:33:57]">&lt;stikonas[m]&gt;</a></span><span class="message">Possibly...</span></div><div class="line" id="223453"><span class="nick" style="color:#80b1d3"><a href="#223453" label="[22:34:53]">&lt;oriansj&gt;</a></span><span class="message">unfortunately there is no tool that says: here are the list of language features needed to build this set of source code.</span></div><div class="line" id="223530"><span class="nick" style="color:#d9d9d9"><a href="#223530" label="[22:35:30]">&lt;stikonas[m]&gt;</a></span><span class="message">Indeed...</span></div><div class="line" id="223700"><span class="nick" style="color:#d9d9d9"><a href="#223700" label="[22:37:00]">&lt;stikonas[m]&gt;</a></span><span class="message">I did check a bit what mes needs... Mesclib is actually not too bad, but mes itself uses more complicated preprocessor functions with .</span></div><div class="line" id="223803"><span class="nick" style="color:#d9d9d9"><a href="#223803" label="[22:38:03]">&lt;stikonas[m]&gt;</a></span><span class="message">This file is tricky... <a rel="nofollow" href="https://git.savannah.gnu.org/cgit/mes.git/tree/include/mes/macros.h">https://git.savannah.gnu.org/cgit/mes.git/tree/include/mes/macros.h</a> </span></div><div class="line" id="223947"><span class="nick" style="color:#80b1d3"><a href="#223947" label="[22:39:47]">&lt;oriansj&gt;</a></span><span class="message">yeah...</span></div><div class="line" id="224349"><span class="nick" style="color:#d9d9d9"><a href="#224349" label="[22:43:49]">&lt;stikonas[m]&gt;</a></span><span class="message">In any case, before TCC can be built, almost surely mes would be built first</span></div><div class="line" id="224404"><span class="nick" style="color:#d9d9d9"><a href="#224404" label="[22:44:04]">&lt;stikonas[m]&gt;</a></span><span class="message">TCC uses more language features</span></div><div class="line" id="224504"><span class="nick" style="color:#80b1d3"><a href="#224504" label="[22:45:04]">&lt;oriansj&gt;</a></span><span class="message">well bitslices and C style function pointers are the 2 big ones if I remember correctly.</span></div><div class="line" id="224758"><span class="nick" style="color:#80b1d3"><a href="#224758" label="[22:47:58]">&lt;oriansj&gt;</a></span><span class="message">but that isn't something impossible to clear out either; should we go the mescc-&gt;modified TCC route</span></div><div class="line" id="224832"><span class="nick" style="color:#80b1d3"><a href="#224832" label="[22:48:32]">&lt;oriansj&gt;</a></span><span class="message">but right now, it isn't needed because we have mes-m2 working and it is good enough</span></div><div class="line" id="224919"><span class="nick" style="color:#80b1d3"><a href="#224919" label="[22:49:19]">&lt;oriansj&gt;</a></span><span class="message">and I don't think anyone wants to responsible for a TCC fork or getting TCC to adopt simpler bootstrap requirements.</span></div><div class="line" id="230102"><span class="nick" style="color:#d9d9d9"><a href="#230102" label="[23:01:02]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, TCC were reluctant to accept janneke's patches</span></div><div class="line" id="230111"><span class="nick" style="color:#d9d9d9"><a href="#230111" label="[23:01:11]">&lt;stikonas[m]&gt;</a></span><span class="message">And instead wanted bootstrap compiler to be improved</span></div><div class="line" id="231233"><span class="nick" style="color:#80b1d3"><a href="#231233" label="[23:12:33]">&lt;oriansj&gt;</a></span><span class="message">understandably</span></div><div class="line" id="231903"><span class="nick" style="color:#80b1d3"><a href="#231903" label="[23:19:03]">&lt;oriansj&gt;</a></span><span class="message">hence why I suggested such work would likely turn into a long term project by itself.</span></div><div class="line" id="232455"><span class="nick" style="color:#6b8072"><a href="#232455" label="[23:24:55]">&lt;Hagfish&gt;</a></span><span class="message">&quot;I think with that behavior [i.e. npm client handling platform-specific binaries] in place we could safely change defaults [to prevent scripts running on npm install] in a Semver Major.&quot;</span></div><div class="line" id="232540"><span class="nick" style="color:#6b8072"><a href="#232540" label="[23:25:40]">&lt;Hagfish&gt;</a></span><span class="message">that's probably a net win, but we'd have to see how the ecosystem adapts to those changes</span></div><div class="line" id="233427"><span class="nick" style="color:#80b1d3"><a href="#233427" label="[23:34:27]">&lt;oriansj&gt;</a></span><span class="message">well it depends on how many people want to address these issues vs just shipping enough to get their bosses off their ass</span></div><div class="line" id="233607"><span class="nick" style="color:#6b8072"><a href="#233607" label="[23:36:07]">&lt;Hagfish&gt;</a></span><span class="message">the trick is to incentivise bosses to care about security (but unfortunately that's even harder than getting them to care about things which claim to benefit security)</span></div><div class="line" id="233912"><span class="nick" style="color:#80b1d3"><a href="#233912" label="[23:39:12]">&lt;oriansj&gt;</a></span><span class="message">Hagfish: nope that only leads to checkbox security and believe me when I say it drains what security resources that might be there away from real security work.</span></div><div class="line" id="233958"><span class="nick" style="color:#80b1d3"><a href="#233958" label="[23:39:58]">&lt;oriansj&gt;</a></span><span class="message">and that isn't even mentioning the snake oil security people who make bank with false promises</span></div><div class="line" id="234927"><span class="nick" style="color:#80b1d3"><a href="#234927" label="[23:49:27]">&lt;oriansj&gt;</a></span><span class="message">real security is always the absolute last thing they will try after all other possible options have been exhusted.</span></div><div class="line" id="235155"><span class="nick" style="color:#80b1d3"><a href="#235155" label="[23:51:55]">&lt;oriansj&gt;</a></span><span class="message">and it isn't even the hard things either. There are major systems by major vendors sold as security products that store passwords as plain text; don't encrypt network traffic and fail to even checksum updates</span></div><div class="line" id="235424"><span class="nick" style="color:#80b1d3"><a href="#235424" label="[23:54:24]">&lt;oriansj&gt;</a></span><span class="message">its like &quot;Industry leading security product&quot;, baked in password of badgers for a hidden root account that you can't disable or change the password to.</span></div><div class="line" id="235544"><span class="nick" style="color:#80b1d3"><a href="#235544" label="[23:55:44]">&lt;oriansj&gt;</a></span><span class="message">clicking cancel 16 times in a row logs you in as root and oh just press down and hold that backspace key for a couple of seconds to bypass all boot security protections.</span></div><div class="line" id="235658"><span class="nick" style="color:#80b1d3"><a href="#235658" label="[23:56:58]">&lt;oriansj&gt;</a></span><span class="message">And I'm responsible for the security of this shit (which oh by the way is proprietary with support contracts that somehow doesn't actually do any good in getting support for real security issues.</span></div><div class="line" id="235809"><span class="nick" style="color:#80b1d3"><a href="#235809" label="[23:58:09]">&lt;oriansj&gt;</a></span><span class="message">Oh and your phone company sold a copy of your location history to anyone willing to pay $17/year for it</span></div><br /></div></body></html>