<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2024-02-03.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="011834"><span class="nick" style="color:#389600"><a href="#011834" label="[01:18:34]">&lt;oriansj&gt;</a></span><span class="message">well it isn't clean code but it is running code</span></div><div class="line" id="012006"><span class="nick" style="color:#389600"><a href="#012006" label="[01:20:06]">&lt;oriansj&gt;</a></span><span class="message">pder: thanks, it appears to be a guix package so I will give it a go</span></div><div class="line" id="013401"><span class="nick" style="color:#8dd3c7"><a href="#013401" label="[01:34:01]">&lt;pder&gt;</a></span><span class="message">oriansj: that's very exciting.  having xz decompression so early is great</span></div><div class="line" id="013502"><span class="nick" style="color:#389600"><a href="#013502" label="[01:35:02]">&lt;oriansj&gt;</a></span><span class="message">and with untar,  ungz and unbz2 already in mescc-tools-extra it'll be a universal get started toolset</span></div><div class="line" id="013607"><span class="nick" style="color:#389600"><a href="#013607" label="[01:36:07]">&lt;oriansj&gt;</a></span><span class="message">tempting to see how much we could improve kaem or if we could do a readline like library and do a dash port.</span></div><div class="line" id="013848"><span class="nick" style="color:#2e2a4a"><a href="#013848" label="[01:38:48]">&lt;stikonas&gt;</a></span><span class="message">readline itself is not used even for bash in live-bootstrap</span></div><div class="line" id="013913"><span class="nick" style="color:#2e2a4a"><a href="#013913" label="[01:39:13]">&lt;stikonas&gt;</a></span><span class="message">but with kaem we should be careful not to required too many syscalls</span></div><div class="line" id="013936"><span class="nick" style="color:#2e2a4a"><a href="#013936" label="[01:39:36]">&lt;stikonas&gt;</a></span><span class="message">it's already the trickiest program for bootstrap kernels</span></div><div class="line" id="014122"><span class="nick" style="color:#389600"><a href="#014122" label="[01:41:22]">&lt;oriansj&gt;</a></span><span class="message">good point</span></div><div class="line" id="014216"><span class="nick" style="color:#389600"><a href="#014216" label="[01:42:16]">&lt;oriansj&gt;</a></span><span class="message">raw vs cooked reads</span></div><div class="line" id="034153"><span class="nick" style="color:#389600"><a href="#034153" label="[03:41:53]">&lt;oriansj&gt;</a></span><span class="message">1 more macro down</span></div><div class="line" id="041525"><span class="nick" style="color:#389600"><a href="#041525" label="[04:15:25]">&lt;oriansj&gt;</a></span><span class="message">boy there are a boatload of constants</span></div><div class="line" id="041918"><span class="nick" style="color:#389600"><a href="#041918" label="[04:19:18]">&lt;oriansj&gt;</a></span><span class="message">and freaking nested macros &gt;.&lt;</span></div><div class="line" id="042845"><span class="nick" style="color:#389600"><a href="#042845" label="[04:28:45]">&lt;oriansj&gt;</a></span><span class="message">every sin ever expressed about reader macros; apply to C macros when abused.</span></div><div class="line" id="043657"><span class="nick" style="color:#389600"><a href="#043657" label="[04:36:57]">&lt;oriansj&gt;</a></span><span class="message">5 macro deep nested</span></div><div class="line" id="044230"><span class="nick" style="color:#389600"><a href="#044230" label="[04:42:30]">&lt;oriansj&gt;</a></span><span class="message">and boy is there a good bit of abuse here</span></div><div class="line" id="044843"><span class="nick" style="color:#389600"><a href="#044843" label="[04:48:43]">&lt;oriansj&gt;</a></span><span class="message">my code is going to be completely unrecognizable in comparison to the source</span></div><div class="line" id="045503"><span class="nick" style="color:#389600"><a href="#045503" label="[04:55:03]">&lt;oriansj&gt;</a></span><span class="message">319 insertions(+), 280 deletions(-) just expanding a single macro</span></div><div class="line" id="045540"><span class="nick" style="color:#389600"><a href="#045540" label="[04:55:40]">&lt;oriansj&gt;</a></span><span class="message">I think I am done for the night and will pick up tomorrow; slowly digging out of the macro hell they made.</span></div><div class="line" id="112955"><span class="nick" style="color:#6b8072"><a href="#112955" label="[11:29:55]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Christoph&gt; oriansj: Will you test your re-implementation with the original as an oracle?</span></div><div class="line" id="114557"><span class="nick" style="color:#389600"><a href="#114557" label="[11:45:57]">&lt;oriansj&gt;</a></span><span class="message">Christoph: I'll be testing as I do a rewrite; while ensuring several test files continue to unpack to the same checksums</span></div><div class="line" id="115308"><span class="nick" style="color:#389600"><a href="#115308" label="[11:53:08]">&lt;oriansj&gt;</a></span><span class="message">as a collection of .xz files and what the resulting checksums should be will be a more direct map to what we care about.</span></div><div class="line" id="115716"><span class="nick" style="color:#6b8072"><a href="#115716" label="[11:57:16]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Christoph&gt; The program compiles and is usable during the rewrite? Why is the original so complicated? I thought you have to do major refactoring!</span></div><div class="line" id="115924"><span class="nick" style="color:#389600"><a href="#115924" label="[11:59:24]">&lt;oriansj&gt;</a></span><span class="message">well yes, but it is just taking a bit of work to slowly unwind everything</span></div><div class="line" id="123523"><span class="nick" style="color:#389600"><a href="#123523" label="[12:35:23]">&lt;oriansj&gt;</a></span><span class="message">ok, finally done unwinding the macros</span></div><div class="line" id="123604"><span class="nick" style="color:#389600"><a href="#123604" label="[12:36:04]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1306182/">https://paste.debian.net/1306182/</a> </span></div><div class="line" id="123732"><span class="nick" style="color:#389600"><a href="#123732" label="[12:37:32]">&lt;oriansj&gt;</a></span><span class="message">so from 1626 lines of macro'd insanity to 2445 lines of just normal messy c</span></div><div class="line" id="125256"><span class="nick" style="color:#389600"><a href="#125256" label="[12:52:56]">&lt;oriansj&gt;</a></span><span class="message">now to slowly work it into M2-Planet form</span></div><div class="line" id="133816"><span class="nick" style="color:#389600"><a href="#133816" label="[13:38:16]">&lt;oriansj&gt;</a></span><span class="message">and once I get it into fighting shape, I'll just hit it with a freaking boatload of fuzzing to clear out most surprising failures.</span></div><div class="line" id="142445"><span class="nick" style="color:#2e2a4a"><a href="#142445" label="[14:24:45]">&lt;stikonas&gt;</a></span><span class="message">fossy: what's the status of your PRs now?</span></div><div class="line" id="142451"><span class="nick" style="color:#2e2a4a"><a href="#142451" label="[14:24:51]">&lt;stikonas&gt;</a></span><span class="message">are they still drafts?</span></div><div class="line" id="142539"><span class="nick" style="color:#2e2a4a"><a href="#142539" label="[14:25:39]">&lt;stikonas&gt;</a></span><span class="message">anyway, I'll go over them...</span></div><div class="line" id="142555"><span class="nick" style="color:#2e2a4a"><a href="#142555" label="[14:25:55]">&lt;stikonas&gt;</a></span><span class="message">and you can merge them later...</span></div><div class="line" id="161255"><span class="nick" style="color:#389600"><a href="#161255" label="[16:12:55]">&lt;oriansj&gt;</a></span><span class="message">and it appears only minimal changes are needed to support writing out to a file; and those have been done.</span></div><div class="line" id="163153"><span class="nick" style="color:#389600"><a href="#163153" label="[16:31:53]">&lt;oriansj&gt;</a></span><span class="message">it literally only had a single write call in a &quot;Flush&quot; function which ended up having incorrect logic for output; which I have since simplified.</span></div><div class="line" id="164305"><span class="nick" style="color:#6b8072"><a href="#164305" label="[16:43:05]">&lt;matrix_bridge&gt;</a></span><span class="message">&lt;Christoph&gt; If you had written it from scratch, would you have ended up in a similar spot?</span></div><div class="line" id="190858"><span class="nick" style="color:#389600"><a href="#190858" label="[19:08:58]">&lt;oriansj&gt;</a></span><span class="message">Christoph: well, once I clean up the questionables; it appears that lzma2 is just a simple state machine.</span></div><div class="line" id="191020"><span class="nick" style="color:#389600"><a href="#191020" label="[19:10:20]">&lt;oriansj&gt;</a></span><span class="message">so unxz bootstrapping appears to be far simpler than previously thought.</span></div><div class="line" id="200346"><span class="nick" style="color:#80b1d3"><a href="#200346" label="[20:03:46]">&lt;sam_&gt;</a></span><span class="message">:)</span></div><div class="line" id="202817"><span class="nick" style="color:#6d2462"><a href="#202817" label="[20:28:17]">&lt;stikonas_&gt;</a></span><span class="message">I don't think why some people thought that xz bootstrapping is hard...</span></div><div class="line" id="202822"><span class="nick" style="color:#6d2462"><a href="#202822" label="[20:28:22]">&lt;stikonas_&gt;</a></span><span class="message">never had any problems with it</span></div><div class="line" id="202833"><span class="nick" style="color:#6d2462"><a href="#202833" label="[20:28:33]">&lt;stikonas_&gt;</a></span><span class="message">even normal xz program ships source in other formats</span></div><div class="line" id="202858"><span class="nick" style="color:#80b1d3"><a href="#202858" label="[20:28:58]">&lt;sam_&gt;</a></span><span class="message">i do not get it either stikonas</span></div><div class="line" id="202905"><span class="nick" style="color:#80b1d3"><a href="#202905" label="[20:29:05]">&lt;sam_&gt;</a></span><span class="message">plus upstream are extremely nice and supportive</span></div><br /></div></body></html>