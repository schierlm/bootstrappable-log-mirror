<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-01-24.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000143"><span class="nick" style="color:#389600"><a href="#000143" label="[00:01:43]">&lt;stikonas&gt;</a></span><span class="message">ok, yacc uses only 13 headers... from libc</span></div><div class="line" id="000654"><span class="nick" style="color:#389600"><a href="#000654" label="[00:06:54]">&lt;stikonas&gt;</a></span><span class="message">but yeah, it might not be wchar, could very well be something else, like ctype</span></div><div class="line" id="000905"><span class="nick" style="color:#389600"><a href="#000905" label="[00:09:05]">&lt;stikonas&gt;</a></span><span class="message">can't see anything bad in ctype...</span></div><div class="line" id="002934"><span class="nick" style="color:#389600"><a href="#002934" label="[00:29:34]">&lt;stikonas&gt;</a></span><span class="message">fossy: I did some debugging, so yacc chokes on '</span></div><div class="line" id="002940"><span class="nick" style="color:#389600"><a href="#002940" label="[00:29:40]">&lt;stikonas&gt;</a></span><span class="message">now need to figure out why</span></div><div class="line" id="003017"><span class="nick" style="color:#389600"><a href="#003017" label="[00:30:17]">&lt;stikonas&gt;</a></span><span class="message">although, my printf was just symptom, not a cause</span></div><div class="line" id="003936"><span class="nick" style="color:#389600"><a href="#003936" label="[00:39:36]">&lt;stikonas&gt;</a></span><span class="message">and not on first ' but on second...</span></div><div class="line" id="010804"><span class="nick" style="color:#389600"><a href="#010804" label="[01:08:04]">&lt;stikonas&gt;</a></span><span class="message">fossy: in case you look at yacc later today, I suggest starting from y2.c file and tokname stuff</span></div><div class="line" id="010814"><span class="nick" style="color:#389600"><a href="#010814" label="[01:08:14]">&lt;stikonas&gt;</a></span><span class="message">something different is going on there</span></div><div class="line" id="010838"><span class="nick" style="color:#389600"><a href="#010838" label="[01:08:38]">&lt;stikonas&gt;</a></span><span class="message">e.g. on line about 446 there  is j = chfind(0, tokname);</span></div><div class="line" id="010902"><span class="nick" style="color:#389600"><a href="#010902" label="[01:09:02]">&lt;stikonas&gt;</a></span><span class="message">and as parsing goes on, j's become different in glibc and mes versions</span></div><div class="line" id="012042"><span class="nick" style="color:#2e2a4a"><a href="#012042" label="[01:20:42]">&lt;mihi&gt;</a></span><span class="message">hi, quick status about my guile psyntax bootstrapping attempts: I managed to build a (~60 lines) implementation of Lisp-style unhygienic macros using only Guile primitives that can be loaded before psyntax-pp.scm is loaded. It may still have some bugs or missing corner cases, but works well enough to load janneke_'s quasiquote and syntax-rules implementation. My plan would be to use this crude macro support to</span></div><div class="line" id="012042"><span class="nick" style="color:#2e2a4a"><a href="#012042" label="[01:20:42]">&lt;mihi&gt;</a></span><span class="message">define simple/incomplete versions of more things needed by psyntax.scm (e.g. syntax, quasisyntax, syntax-case ...) and then try to load psyntax.scm to then finally dump psyntax-pp.scm.</span></div><div class="line" id="012131"><span class="nick" style="color:#2e2a4a"><a href="#012131" label="[01:21:31]">&lt;mihi&gt;</a></span><span class="message">Should be easier than implementing all of this in C, the main question is &quot;will 70% of (Lisp/scheme) programmers understand it?&quot; :)</span></div><div class="line" id="012136"><span class="nick" style="color:#6b8072"><a href="#012136" label="[01:21:36]">&lt;xentrac&gt;</a></span><span class="message">that's wonderful, mihi!</span></div><div class="line" id="012147"><span class="nick" style="color:#80b1d3"><a href="#012147" label="[01:21:47]">&lt;fossy&gt;</a></span><span class="message">stikonas: ok, thanks</span></div><div class="line" id="012148"><span class="nick" style="color:#2e2a4a"><a href="#012148" label="[01:21:48]">&lt;mihi&gt;</a></span><span class="message">my current code is at <a rel="nofollow" href="https://gist.github.com/schierlm/dda8f1f4c3cc69ff9fb3d2487c4d4e13">https://gist.github.com/schierlm/dda8f1f4c3cc69ff9fb3d2487c4d4e13</a>  if you want to have a look</span></div><div class="line" id="012159"><span class="nick" style="color:#6b8072"><a href="#012159" label="[01:21:59]">&lt;xentrac&gt;</a></span><span class="message">I don't know what 70% of Scheme programmers will understand</span></div><div class="line" id="012225"><span class="nick" style="color:#2e2a4a"><a href="#012225" label="[01:22:25]">&lt;mihi&gt;</a></span><span class="message">xentrac, you can have a look if you understand it</span></div><div class="line" id="012344"><span class="nick" style="color:#6b8072"><a href="#012344" label="[01:23:44]">&lt;xentrac&gt;</a></span><span class="message">it looks relatively straightforward</span></div><div class="line" id="012425"><span class="nick" style="color:#6b8072"><a href="#012425" label="[01:24:25]">&lt;xentrac&gt;</a></span><span class="message">but it would still probably take me an hour or two to figure out what things I didn't understand</span></div><div class="line" id="012513"><span class="nick" style="color:#6b8072"><a href="#012513" label="[01:25:13]">&lt;xentrac&gt;</a></span><span class="message">it'd probably be helpful to have a one-line comment above each definition explaining what it's for</span></div><div class="line" id="012522"><span class="nick" style="color:#2e2a4a"><a href="#012522" label="[01:25:22]">&lt;mihi&gt;</a></span><span class="message">xentrac, be assured it took me more than an hour or two to dig through the bowels of guile to find the primitives I need :)</span></div><div class="line" id="012527"><span class="nick" style="color:#2e2a4a"><a href="#012527" label="[01:25:27]">&lt;mihi&gt;</a></span><span class="message">xentrac, good idea</span></div><div class="line" id="012830"><span class="nick" style="color:#6b8072"><a href="#012830" label="[01:28:30]">&lt;xentrac&gt;</a></span><span class="message">if I were kibitzing I'd suggest breaking out s1*-subexpand into s1*-subexpand-args, s1*-subexpand-top, and s1*-subexpand-let-args, but since I'm not actually going through the work to really understand this, just consider that as a possible idea to consider, rather than an actual recommendation</span></div><div class="line" id="013050"><span class="nick" style="color:#2e2a4a"><a href="#013050" label="[01:30:50]">&lt;mihi&gt;</a></span><span class="message">xentrac, comments for step 1 added</span></div><div class="line" id="013152"><span class="nick" style="color:#2e2a4a"><a href="#013152" label="[01:31:52]">&lt;mihi&gt;</a></span><span class="message">xentrac, I was considering this too, but at this point of guile's loading we cannot reference future functions, and the functions would be mutually recursive. so I'd have to use some ugly letrec* syntax instead (at least I find it ugly)</span></div><div class="line" id="013215"><span class="nick" style="color:#2e2a4a"><a href="#013215" label="[01:32:15]">&lt;mihi&gt;</a></span><span class="message">I should add a comment here too.</span></div><div class="line" id="020531"><span class="nick" style="color:#6d2462"><a href="#020531" label="[02:05:31]">&lt;OriansJ&gt;</a></span><span class="message">mihi: thank you for looking into psyntax.pp for us</span></div><div class="line" id="020832"><span class="nick" style="color:#6d2462"><a href="#020832" label="[02:08:32]">&lt;OriansJ&gt;</a></span><span class="message">as guile should be able to be compiled by TCC and once we solve psyntax.pp Guix will be fully bootstrapped (provided fossy and stikonas work on live-bootstrap can be tweaked leverage that work to generate the Guix bootstrap)</span></div><div class="line" id="020847"><span class="nick" style="color:#6b8072"><a href="#020847" label="[02:08:47]">&lt;xentrac&gt;</a></span><span class="message">hooray!</span></div><div class="line" id="021328"><span class="nick" style="color:#6d2462"><a href="#021328" label="[02:13:28]">&lt;OriansJ&gt;</a></span><span class="message">although I think janneke will be happy to no longer have to develop mes.c and just use Gnu Guile</span></div><div class="line" id="021344"><span class="nick" style="color:#6d2462"><a href="#021344" label="[02:13:44]">&lt;OriansJ&gt;</a></span><span class="message">once guile is properly bootstrapped.</span></div><div class="line" id="021348"><span class="nick" style="color:#6d2462"><a href="#021348" label="[02:13:48]">&lt;OriansJ&gt;</a></span><span class="message">of courese</span></div><div class="line" id="021404"><span class="nick" style="color:#6d2462"><a href="#021404" label="[02:14:04]">&lt;OriansJ&gt;</a></span><span class="message">^courese^course^</span></div><div class="line" id="021433"><span class="nick" style="color:#6d2462"><a href="#021433" label="[02:14:33]">&lt;OriansJ&gt;</a></span><span class="message">and then guix's bootstrap binary is reduced to just that bootstrapped guile.</span></div><div class="line" id="021500"><span class="nick" style="color:#6d2462"><a href="#021500" label="[02:15:00]">&lt;OriansJ&gt;</a></span><span class="message">Then guix becomes &quot;Once you have Scheme, you are bootstrapped&quot;</span></div><div class="line" id="031032"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado</span></div><div class="line" id="042107"><span class="nick" style="color:#234e69"><a href="#042107" label="[04:21:07]">&lt;siraben&gt;</a></span><span class="message">OriansJ: oh is psyntax.pp solved?</span></div><div class="line" id="043018"><span class="nick" style="color:#6d2462"><a href="#043018" label="[04:30:18]">&lt;OriansJ&gt;</a></span><span class="message">siraben: no, but mihi is starting to work on it from another direction</span></div><div class="line" id="043255"><span class="nick" style="color:#234e69"><a href="#043255" label="[04:32:55]">&lt;siraben&gt;</a></span><span class="message">OriansJ: what's the other direction?</span></div><div class="line" id="043715"><span class="nick" style="color:#6d2462"><a href="#043715" label="[04:37:15]">&lt;OriansJ&gt;</a></span><span class="message">siraben: using guile without psyntax.pp and trying to implement syntax-case in only the scheme primitives it has in C.</span></div><div class="line" id="043741"><span class="nick" style="color:#234e69"><a href="#043741" label="[04:37:41]">&lt;siraben&gt;</a></span><span class="message">Ah, ok. Sounds promising.</span></div><div class="line" id="044449"><span class="nick" style="color:#6d2462"><a href="#044449" label="[04:44:49]">&lt;OriansJ&gt;</a></span><span class="message">well we will know more as it goes along. Right now it is missing some essentials like an explicit FSF approved license; so I haven't seen past the first 14 lines</span></div><div class="line" id="062621"><span class="nick" style="color:#80b1d3"><a href="#062621" label="[06:26:21]">&lt;fossy&gt;</a></span><span class="message">i'm sure it will be licensed as such eventually</span></div><div class="line" id="062631"><span class="nick" style="color:#80b1d3"><a href="#062631" label="[06:26:31]">&lt;fossy&gt;</a></span><span class="message">s/eventually/sooner rather than later/</span></div><div class="line" id="121046"><span class="nick" style="color:#6c3d55"><a href="#121046" label="[12:10:46]">&lt;stikonas[m]&gt;</a></span><span class="message">fossy: I guess no new info on yacc? Maybe I'll try to gdb it today then...</span></div><div class="line" id="121108"><span class="nick" style="color:#6d2462"><a href="#121108" label="[12:11:08]">&lt;OriansJ&gt;</a></span><span class="message">fossy: well by default in copyright law it is already licensed but as non-free. Which is why explicit copyright headers are supposed to be done on the first commit. So we don't have the when is it going to have a free license discussion.</span></div><div class="line" id="121428"><span class="nick" style="color:#80b1d3"><a href="#121428" label="[12:14:28]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: sorry, no, didn't get to it, was doing more kernel shenanigans</span></div><div class="line" id="121604"><span class="nick" style="color:#6c3d55"><a href="#121604" label="[12:16:04]">&lt;stikonas[m]&gt;</a></span><span class="message">OK, I started looking yesterday anyway, just without gdb yet...</span></div><div class="line" id="144214"><span class="nick" style="color:#2e2a4a"><a href="#144214" label="[14:42:14]">&lt;mihi&gt;</a></span><span class="message">OriansJ, thanks for the heads up, licensing information added.</span></div><div class="line" id="144416"><span class="nick" style="color:#2e2a4a"><a href="#144416" label="[14:44:16]">&lt;mihi&gt;</a></span><span class="message">As I posted the content to GitHub, per their termas of use it is automatically licensed under GitHub Content License, but I believe that license is neither FSF nor OSI approved (as it does not give any rights to distribute binaries). But I agreee that an explicit license ia always better. Usually GitHub nags you once you create a repository, but at this stage I did not want to create a repo yet in case somebody</span></div><div class="line" id="144416"><span class="nick" style="color:#2e2a4a"><a href="#144416" label="[14:44:16]">&lt;mihi&gt;</a></span><span class="message">here shouts that he has already tried that approach and can argue why it is impossible.</span></div><div class="line" id="144534"><span class="nick" style="color:#2e2a4a"><a href="#144534" label="[14:45:34]">&lt;mihi&gt;</a></span><span class="message">and I hope janneke_ will continue maintaining mes, even when it is no longer needed for guix's bootstrap (at least as long as we depend on it to get from M2-Planet to tcc).</span></div><div class="line" id="145221"><span class="nick" style="color:#234e69"><a href="#145221" label="[14:52:21]">&lt;siraben&gt;</a></span><span class="message">multiple bootstrap paths would be a good idea</span></div><div class="line" id="145227"><span class="nick" style="color:#234e69"><a href="#145227" label="[14:52:27]">&lt;siraben&gt;</a></span><span class="message">the more diverse the better</span></div><div class="line" id="151442"><span class="nick" style="color:#d9d9d9"><a href="#151442" label="[15:14:42]">&lt;civodul&gt;</a></span><span class="message">Mes no longer needed for Guix's bootstrap?</span></div><div class="line" id="173433"><span class="nick" style="color:#389600"><a href="#173433" label="[17:34:33]">&lt;stikonas&gt;</a></span><span class="message">civodul: I think OriansJ was thinking about how to bootstrap Guix bootstrap binaries, which I think is mkdir, xz, bash, guile and I guess you can't get rid of those</span></div><div class="line" id="173501"><span class="nick" style="color:#389600"><a href="#173501" label="[17:35:01]">&lt;stikonas&gt;</a></span><span class="message">initially idea was maybe replace guile with mes but if we can bootstrap guile, then we can just use it</span></div><div class="line" id="173513"><span class="nick" style="color:#389600"><a href="#173513" label="[17:35:13]">&lt;stikonas&gt;</a></span><span class="message">(those are from bootstrap.scm, not commencement.scm)</span></div><div class="line" id="174830"><span class="nick" style="color:#d9d9d9"><a href="#174830" label="[17:48:30]">&lt;civodul&gt;</a></span><span class="message">stikonas: i see, but i guess it'll always be much easier to build Mes from &quot;very little&quot; than it is to build Guile and all its dependencies</span></div><div class="line" id="174854"><span class="nick" style="color:#d9d9d9"><a href="#174854" label="[17:48:54]">&lt;civodul&gt;</a></span><span class="message">but yeah, we'll see how it goes</span></div><div class="line" id="175025"><span class="nick" style="color:#389600"><a href="#175025" label="[17:50:25]">&lt;stikonas&gt;</a></span><span class="message">civodul: well, we build guile via mes anyway</span></div><div class="line" id="175046"><span class="nick" style="color:#389600"><a href="#175046" label="[17:50:46]">&lt;stikonas&gt;</a></span><span class="message">but like I said I think this was more related to what is done in bootstrap.scm</span></div><div class="line" id="175104"><span class="nick" style="color:#d9d9d9"><a href="#175104" label="[17:51:04]">&lt;civodul&gt;</a></span><span class="message">ok</span></div><div class="line" id="175116"><span class="nick" style="color:#389600"><a href="#175116" label="[17:51:16]">&lt;stikonas&gt;</a></span><span class="message">but we'll see how things evolve</span></div><div class="line" id="175124"><span class="nick" style="color:#389600"><a href="#175124" label="[17:51:24]">&lt;stikonas&gt;</a></span><span class="message">there is sometimes more than one way to proceed</span></div><div class="line" id="175127"><span class="nick" style="color:#d9d9d9"><a href="#175127" label="[17:51:27]">&lt;civodul&gt;</a></span><span class="message">re mkdir/xz/bash/tar, we could do away with them via some trickery</span></div><div class="line" id="175151"><span class="nick" style="color:#d9d9d9"><a href="#175151" label="[17:51:51]">&lt;civodul&gt;</a></span><span class="message">namely, we could extract the tarball &quot;out-of-band&quot;</span></div><div class="line" id="175159"><span class="nick" style="color:#389600"><a href="#175159" label="[17:51:59]">&lt;stikonas&gt;</a></span><span class="message">yeah, that's what we do in live bootstrap</span></div><div class="line" id="175211"><span class="nick" style="color:#389600"><a href="#175211" label="[17:52:11]">&lt;stikonas&gt;</a></span><span class="message">we preextract tar source</span></div><div class="line" id="175218"><span class="nick" style="color:#389600"><a href="#175218" label="[17:52:18]">&lt;stikonas&gt;</a></span><span class="message">and compile tar as one of the first things</span></div><div class="line" id="175222"><span class="nick" style="color:#389600"><a href="#175222" label="[17:52:22]">&lt;stikonas&gt;</a></span><span class="message">after tcc is compiled</span></div><div class="line" id="175241"><span class="nick" style="color:#389600"><a href="#175241" label="[17:52:41]">&lt;stikonas&gt;</a></span><span class="message">mkdir is compiled a bit later... we are working on bash...</span></div><div class="line" id="175305"><span class="nick" style="color:#389600"><a href="#175305" label="[17:53:05]">&lt;stikonas&gt;</a></span><span class="message">and we haven't tried xz, it's probably more complicated but we don't need it that early</span></div><div class="line" id="175401"><span class="nick" style="color:#d9d9d9"><a href="#175401" label="[17:54:01]">&lt;civodul&gt;</a></span><span class="message">right</span></div><div class="line" id="175541"><span class="nick" style="color:#389600"><a href="#175541" label="[17:55:41]">&lt;stikonas&gt;</a></span><span class="message">by the way, how were those binaries initially generated? Are they build manually or according to guix recipe?</span></div><div class="line" id="175740"><span class="nick" style="color:#d9d9d9"><a href="#175740" label="[17:57:40]">&lt;civodul&gt;</a></span><span class="message">they're from the &quot;coreutils&amp;co&quot; tarball</span></div><div class="line" id="175751"><span class="nick" style="color:#d9d9d9"><a href="#175751" label="[17:57:51]">&lt;civodul&gt;</a></span><span class="message">in effect, they were manually extracted from that</span></div><div class="line" id="175816"><span class="nick" style="color:#d9d9d9"><a href="#175816" label="[17:58:16]">&lt;civodul&gt;</a></span><span class="message">(could automate that as well)</span></div><div class="line" id="182815"><span class="nick" style="color:#389600"><a href="#182815" label="[18:28:15]">&lt;stikonas&gt;</a></span><span class="message">pder: have you done debugging of code compiled with tcc? When you were debugging ls</span></div><div class="line" id="182852"><span class="nick" style="color:#389600"><a href="#182852" label="[18:28:52]">&lt;stikonas&gt;</a></span><span class="message">somehow I can't print values of variables</span></div><div class="line" id="182904"><span class="nick" style="color:#389600"><a href="#182904" label="[18:29:04]">&lt;stikonas&gt;</a></span><span class="message">(gdb) p j</span></div><div class="line" id="182905"><span class="nick" style="color:#389600"><a href="#182905" label="[18:29:05]">&lt;stikonas&gt;</a></span><span class="message">No symbol &quot;j&quot; in current context.</span></div><div class="line" id="182913"><span class="nick" style="color:#389600"><a href="#182913" label="[18:29:13]">&lt;stikonas&gt;</a></span><span class="message">the same thing works with gcc...</span></div><div class="line" id="183802"><span class="nick" style="color:#389600"><a href="#183802" label="[18:38:02]">&lt;stikonas&gt;</a></span><span class="message">actually, I can print some variables...</span></div><div class="line" id="184411"><span class="nick" style="color:#bc80bd"><a href="#184411" label="[18:44:11]">&lt;Hagfish&gt;</a></span><span class="message"> <a rel="nofollow" href="https://news.ycombinator.com/item?id=25880243">https://news.ycombinator.com/item?id=25880243</a>  QSCM – A Tiny Bootstrapped Scheme (c9x.me)</span></div><div class="line" id="184418"><span class="nick" style="color:#bc80bd"><a href="#184418" label="[18:44:18]">&lt;Hagfish&gt;</a></span><span class="message">(no discussion yet, sadly)</span></div><div class="line" id="185553"><span class="nick" style="color:#389600"><a href="#185553" label="[18:55:53]">&lt;stikonas&gt;</a></span><span class="message">ok, so problem with heirloom-yacc (mes libc) is that tokname's are truncated to 1 character</span></div><div class="line" id="185623"><span class="nick" style="color:#389600"><a href="#185623" label="[18:56:23]">&lt;stikonas&gt;</a></span><span class="message">that will definitely break  things..</span></div><div class="line" id="185628"><span class="nick" style="color:#389600"><a href="#185628" label="[18:56:28]">&lt;stikonas&gt;</a></span><span class="message">now need to find out why...</span></div><div class="line" id="190548"><span class="nick" style="color:#389600"><a href="#190548" label="[19:05:48]">&lt;stikonas&gt;</a></span><span class="message">argh, that might indeed be because of wchar's...</span></div><div class="line" id="191222"><span class="nick" style="color:#389600"><a href="#191222" label="[19:12:22]">&lt;stikonas&gt;</a></span><span class="message">I guess that means gettok function is broken...</span></div><div class="line" id="205230"><span class="nick" style="color:#389600"><a href="#205230" label="[20:52:30]">&lt;stikonas&gt;</a></span><span class="message">fossy: ok, so I think I know whats going wrong with yacc</span></div><div class="line" id="205312"><span class="nick" style="color:#389600"><a href="#205312" label="[20:53:12]">&lt;stikonas&gt;</a></span><span class="message">I was now able to compile parser.y into C file (atlhough, C file failed to compile, but that might be because my yacc &quot;workaround&quot; was not applied everywhere)</span></div><div class="line" id="205849"><span class="nick" style="color:#389600"><a href="#205849" label="[20:58:49]">&lt;stikonas&gt;</a></span><span class="message">so at the moment in chfind I've replaced wcscmp functions with the ones from musl</span></div><div class="line" id="205849"><span class="nick" style="color:#389600"><a href="#205849" label="[20:58:49]">&lt;stikonas&gt;</a></span><span class="message">and that alone allows compiling .y file into .c</span></div><div class="line" id="215135"><span class="nick" style="color:#6d2462"><a href="#215135" label="[21:51:35]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: well it is pushing the limits of what is defined as a scheme because instead of lambda it has fun; it has no support for macros or #\chars or even garbage collection. It is more like C with parens than scheme.</span></div><div class="line" id="220909"><span class="nick" style="color:#389600"><a href="#220909" label="[22:09:09]">&lt;stikonas&gt;</a></span><span class="message">fossy: ok, I was able to get a working lex too (manually for now)</span></div><div class="line" id="220938"><span class="nick" style="color:#389600"><a href="#220938" label="[22:09:38]">&lt;stikonas&gt;</a></span><span class="message">(had to manually rename wchar_t into char in fakewchar's wchar.h</span></div><div class="line" id="220958"><span class="nick" style="color:#389600"><a href="#220958" label="[22:09:58]">&lt;stikonas&gt;</a></span><span class="message">and it was enough to build scan.lex.l that is in old flex</span></div><div class="line" id="221030"><span class="nick" style="color:#389600"><a href="#221030" label="[22:10:30]">&lt;stikonas&gt;</a></span><span class="message">now need to automate...</span></div><div class="line" id="221609"><span class="nick" style="color:#80b1d3"><a href="#221609" label="[22:16:09]">&lt;fossy&gt;</a></span><span class="message">nice, very well done!</span></div><div class="line" id="221643"><span class="nick" style="color:#389600"><a href="#221643" label="[22:16:43]">&lt;stikonas&gt;</a></span><span class="message">well, had to use mix of gdb debugging and printf statements...</span></div><div class="line" id="221654"><span class="nick" style="color:#389600"><a href="#221654" label="[22:16:54]">&lt;stikonas&gt;</a></span><span class="message">somehow I couldn't get tcc binaries to play nicely with gdb</span></div><div class="line" id="221714"><span class="nick" style="color:#80b1d3"><a href="#221714" label="[22:17:14]">&lt;fossy&gt;</a></span><span class="message">did you compile with -g</span></div><div class="line" id="221723"><span class="nick" style="color:#389600"><a href="#221723" label="[22:17:23]">&lt;stikonas&gt;</a></span><span class="message">yes</span></div><div class="line" id="221732"><span class="nick" style="color:#389600"><a href="#221732" label="[22:17:32]">&lt;stikonas&gt;</a></span><span class="message">so I've got nice frames, with line numbers</span></div><div class="line" id="221751"><span class="nick" style="color:#389600"><a href="#221751" label="[22:17:51]">&lt;stikonas&gt;</a></span><span class="message">but p variable worked only for very few variables</span></div><div class="line" id="221800"><span class="nick" style="color:#80b1d3"><a href="#221800" label="[22:18:00]">&lt;fossy&gt;</a></span><span class="message">huh</span></div><div class="line" id="221802"><span class="nick" style="color:#80b1d3"><a href="#221802" label="[22:18:02]">&lt;fossy&gt;</a></span><span class="message">Odd</span></div><div class="line" id="221803"><span class="nick" style="color:#389600"><a href="#221803" label="[22:18:03]">&lt;stikonas&gt;</a></span><span class="message">fossy: and I also built libc with -g</span></div><div class="line" id="221809"><span class="nick" style="color:#389600"><a href="#221809" label="[22:18:09]">&lt;stikonas&gt;</a></span><span class="message">doesn't matter...</span></div><div class="line" id="221818"><span class="nick" style="color:#389600"><a href="#221818" label="[22:18:18]">&lt;stikonas&gt;</a></span><span class="message">I've found what causes the issue</span></div><div class="line" id="221829"><span class="nick" style="color:#389600"><a href="#221829" label="[22:18:29]">&lt;stikonas&gt;</a></span><span class="message">well, or rather I found the workaround</span></div><div class="line" id="221835"><span class="nick" style="color:#80b1d3"><a href="#221835" label="[22:18:35]">&lt;fossy&gt;</a></span><span class="message">^.^</span></div><div class="line" id="221909"><span class="nick" style="color:#389600"><a href="#221909" label="[22:19:09]">&lt;stikonas&gt;</a></span><span class="message">I didn't check why exactly strlen trips yacc...</span></div><div class="line" id="221939"><span class="nick" style="color:#389600"><a href="#221939" label="[22:19:39]">&lt;stikonas&gt;</a></span><span class="message">so once I automate this, we should be able to easily go all the way to bash</span></div><div class="line" id="221950"><span class="nick" style="color:#389600"><a href="#221950" label="[22:19:50]">&lt;stikonas&gt;</a></span><span class="message">flex and bison have nice makefiles written by gio</span></div><div class="line" id="222013"><span class="nick" style="color:#3c5b35"><a href="#222013" label="[22:20:13]">&lt;gio&gt;</a></span><span class="message">stikonas: nice is a bit of a stretch...</span></div><div class="line" id="222024"><span class="nick" style="color:#389600"><a href="#222024" label="[22:20:24]">&lt;stikonas&gt;</a></span><span class="message">they are nice enough :)</span></div><div class="line" id="222049"><span class="nick" style="color:#389600"><a href="#222049" label="[22:20:49]">&lt;stikonas&gt;</a></span><span class="message">argh, maybe I need to edit them a bit</span></div><div class="line" id="222100"><span class="nick" style="color:#389600"><a href="#222100" label="[22:21:00]">&lt;stikonas&gt;</a></span><span class="message">this wouldn't work for us echo 'extern int yylval;' &gt;&gt; parse.h</span></div><div class="line" id="222137"><span class="nick" style="color:#389600"><a href="#222137" label="[22:21:37]">&lt;stikonas&gt;</a></span><span class="message">and our sed is broken...</span></div><div class="line" id="222204"><span class="nick" style="color:#389600"><a href="#222204" label="[22:22:04]">&lt;stikonas&gt;</a></span><span class="message">but I think those problems should be easier...</span></div><div class="line" id="222209"><span class="nick" style="color:#80b1d3"><a href="#222209" label="[22:22:09]">&lt;fossy&gt;</a></span><span class="message">stikonas: just change them both to patches</span></div><div class="line" id="222224"><span class="nick" style="color:#389600"><a href="#222224" label="[22:22:24]">&lt;stikonas&gt;</a></span><span class="message">yeah, exactly</span></div><div class="line" id="222259"><span class="nick" style="color:#389600"><a href="#222259" label="[22:22:59]">&lt;stikonas&gt;</a></span><span class="message">anyway, first I should finish heirloom yacc/lex ...</span></div><div class="line" id="222340"><span class="nick" style="color:#389600"><a href="#222340" label="[22:23:40]">&lt;stikonas&gt;</a></span><span class="message">fossy: would you mind if I didn't install yacc/lex into /after/bin?</span></div><div class="line" id="222350"><span class="nick" style="color:#389600"><a href="#222350" label="[22:23:50]">&lt;stikonas&gt;</a></span><span class="message">they are very temporary anyway</span></div><div class="line" id="222409"><span class="nick" style="color:#389600"><a href="#222409" label="[22:24:09]">&lt;stikonas&gt;</a></span><span class="message">we are getting flex and bison immediately afterwards</span></div><div class="line" id="224339"><span class="nick" style="color:#80b1d3"><a href="#224339" label="[22:43:39]">&lt;fossy&gt;</a></span><span class="message">stikonas: hm, dont really mind, but it would be breaking convention</span></div><div class="line" id="224349"><span class="nick" style="color:#80b1d3"><a href="#224349" label="[22:43:49]">&lt;fossy&gt;</a></span><span class="message">Is there a particular reason to not</span></div><div class="line" id="224714"><span class="nick" style="color:#389600"><a href="#224714" label="[22:47:14]">&lt;stikonas&gt;</a></span><span class="message">fossy: well, a couple of small reasons (although, I don't feel too strong about both). 1) it's very temporary, 2) binaries are not redistributable anyway (due to libc license)</span></div><div class="line" id="224724"><span class="nick" style="color:#389600"><a href="#224724" label="[22:47:24]">&lt;stikonas&gt;</a></span><span class="message">so I wanted to make some kind of distinction...</span></div><div class="line" id="224744"><span class="nick" style="color:#389600"><a href="#224744" label="[22:47:44]">&lt;stikonas&gt;</a></span><span class="message">or maybe I should install them and later delete once we have flex...</span></div><div class="line" id="224901"><span class="nick" style="color:#80b1d3"><a href="#224901" label="[22:49:01]">&lt;fossy&gt;</a></span><span class="message">yeah thats probably better</span></div><div class="line" id="224930"><span class="nick" style="color:#80b1d3"><a href="#224930" label="[22:49:30]">&lt;fossy&gt;</a></span><span class="message">we have other quite temporary tools so I feel better sticking to convention</span></div><div class="line" id="224949"><span class="nick" style="color:#80b1d3"><a href="#224949" label="[22:49:49]">&lt;fossy&gt;</a></span><span class="message">the redistributible thing dosent care to installing</span></div><div class="line" id="225403"><span class="nick" style="color:#389600"><a href="#225403" label="[22:54:03]">&lt;stikonas&gt;</a></span><span class="message">well, at least we have rm now</span></div><div class="line" id="231811"><span class="nick" style="color:#af8d2f"><a href="#231811" label="[23:18:11]">&lt;pder&gt;</a></span><span class="message">There sure is some weirdness with seq compiled by tcc+meslibc.  Just doing a printf on a global static double gives me a different result when done from main vs print_numbers</span></div><div class="line" id="231846"><span class="nick" style="color:#af8d2f"><a href="#231846" label="[23:18:46]">&lt;pder&gt;</a></span><span class="message">Trying to find the simplest test case that demonstrates the broken behavior</span></div><div class="line" id="232730"><span class="nick" style="color:#389600"><a href="#232730" label="[23:27:30]">&lt;stikonas&gt;</a></span><span class="message">pder: yeah, it was very strange, but since you were looking at it I didn't investigate more</span></div><div class="line" id="232737"><span class="nick" style="color:#389600"><a href="#232737" label="[23:27:37]">&lt;stikonas&gt;</a></span><span class="message">had to go back to yacc/lex</span></div><div class="line" id="232819"><span class="nick" style="color:#389600"><a href="#232819" label="[23:28:19]">&lt;stikonas&gt;</a></span><span class="message">now I'm trying to build in clean environment, so yacc have built lex'es parser.c but in clean environment now it fails to compile...</span></div><div class="line" id="232821"><span class="nick" style="color:#389600"><a href="#232821" label="[23:28:21]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="232834"><span class="nick" style="color:#389600"><a href="#232834" label="[23:28:34]">&lt;stikonas&gt;</a></span><span class="message">(parser.c-&gt;parser.o)</span></div><div class="line" id="233018"><span class="nick" style="color:#389600"><a href="#233018" label="[23:30:18]">&lt;stikonas&gt;</a></span><span class="message">possibly more issues in yacc...</span></div><div class="line" id="233048"><span class="nick" style="color:#389600"><a href="#233048" label="[23:30:48]">&lt;stikonas&gt;</a></span><span class="message">I might have used wrong y.tab.c file when building lex before (from yacc(glibc))</span></div><div class="line" id="233220"><span class="nick" style="color:#389600"><a href="#233220" label="[23:32:20]">&lt;stikonas&gt;</a></span><span class="message">yep, I probably need to replace all wcscmp (and maybe others)</span></div><div class="line" id="233339"><span class="nick" style="color:#389600"><a href="#233339" label="[23:33:39]">&lt;stikonas&gt;</a></span><span class="message">ok, but diff between good generated .c file and bad .c file is not big</span></div><div class="line" id="234424"><span class="nick" style="color:#389600"><a href="#234424" label="[23:44:24]">&lt;stikonas&gt;</a></span><span class="message">pder: could it be that doubles are broken on our tcc?</span></div><div class="line" id="234440"><span class="nick" style="color:#389600"><a href="#234440" label="[23:44:40]">&lt;stikonas&gt;</a></span><span class="message">possibly went unnoticed before because doubles are not used much for bootstrapping</span></div><br /></div></body></html>