<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-07-25.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="010739"><span class="nick" style="color:#8dd3c7"><a href="#010739" label="[01:07:39]">&lt;stikonas&gt;</a></span><span class="message">hmm, I think hex1_x86 is now working...</span></div><div class="line" id="010744"><span class="nick" style="color:#8dd3c7"><a href="#010744" label="[01:07:44]">&lt;stikonas&gt;</a></span><span class="message">Although somewhat slowly</span></div><div class="line" id="010757"><span class="nick" style="color:#8dd3c7"><a href="#010757" label="[01:07:57]">&lt;stikonas&gt;</a></span><span class="message">probably some alignment is messed up but will do for now</span></div><div class="line" id="011649"><span class="nick" style="color:#2e2a4a"><a href="#011649" label="[01:16:49]">&lt;Hagfish&gt;</a></span><span class="message">that sounds great</span></div><div class="line" id="011704"><span class="nick" style="color:#8dd3c7"><a href="#011704" label="[01:17:04]">&lt;stikonas&gt;</a></span><span class="message">oriansj: <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/pull/29">https://github.com/oriansj/stage0-posix/pull/29</a> </span></div><div class="line" id="011720"><span class="nick" style="color:#8dd3c7"><a href="#011720" label="[01:17:20]">&lt;stikonas&gt;</a></span><span class="message">maybe I should have started with kaem...</span></div><div class="line" id="011746"><span class="nick" style="color:#8dd3c7"><a href="#011746" label="[01:17:46]">&lt;stikonas&gt;</a></span><span class="message">but now with some experience I can probably deal with kaem, that one shouldn't have problems due to risc-v encodings</span></div><div class="line" id="011820"><span class="nick" style="color:#6b8072"><a href="#011820" label="[01:18:20]">&lt;xentrac&gt;</a></span><span class="message">yaay</span></div><div class="line" id="011946"><span class="nick" style="color:#8dd3c7"><a href="#011946" label="[01:19:46]">&lt;stikonas&gt;</a></span><span class="message">xentrac: well, it's not good enough for risc-v native hex1...</span></div><div class="line" id="012031"><span class="nick" style="color:#6b8072"><a href="#012031" label="[01:20:31]">&lt;xentrac&gt;</a></span><span class="message">it's progress!</span></div><div class="line" id="012144"><span class="nick" style="color:#2e2a4a"><a href="#012144" label="[01:21:44]">&lt;Hagfish&gt;</a></span><span class="message">the syntax is very alien to me (which makes it all the more impressive), but the layout and commenting/naming makes it quite reasonable to follow</span></div><div class="line" id="012217"><span class="nick" style="color:#2e2a4a"><a href="#012217" label="[01:22:17]">&lt;Hagfish&gt;</a></span><span class="message">i was a little uncertain whether &quot;# Get number of the args&quot; should be &quot;# Get the number of args&quot;, but that could be because i don't understand what the code is doing there</span></div><div class="line" id="012242"><span class="nick" style="color:#8dd3c7"><a href="#012242" label="[01:22:42]">&lt;stikonas&gt;</a></span><span class="message">that comment is copy/pasted...</span></div><div class="line" id="012258"><span class="nick" style="color:#2e2a4a"><a href="#012258" label="[01:22:58]">&lt;Hagfish&gt;</a></span><span class="message">i'm sure that other people won't be as confused as me by it :)</span></div><div class="line" id="012313"><span class="nick" style="color:#8dd3c7"><a href="#012313" label="[01:23:13]">&lt;stikonas&gt;</a></span><span class="message">Hagfish: well, syntax is basically: leftmost is machine code (those hex numbers), then the next column is assembly instructions and finally human readable comments</span></div><div class="line" id="012328"><span class="nick" style="color:#2e2a4a"><a href="#012328" label="[01:23:28]">&lt;Hagfish&gt;</a></span><span class="message">yeah, that's probably quite conventional</span></div><div class="line" id="012350"><span class="nick" style="color:#2e2a4a"><a href="#012350" label="[01:23:50]">&lt;Hagfish&gt;</a></span><span class="message">but it feels like, to write that sort of code, you have to be pretty fluent in machine code</span></div><div class="line" id="012416"><span class="nick" style="color:#8dd3c7"><a href="#012416" label="[01:24:16]">&lt;stikonas&gt;</a></span><span class="message">Hagfish: not really... I literally knew nothing about RISC-V or any other machine code a week ago</span></div><div class="line" id="012437"><span class="nick" style="color:#2e2a4a"><a href="#012437" label="[01:24:37]">&lt;Hagfish&gt;</a></span><span class="message">woah</span></div><div class="line" id="012445"><span class="nick" style="color:#2e2a4a"><a href="#012445" label="[01:24:45]">&lt;Hagfish&gt;</a></span><span class="message">seriously, you'd never written a line of machine code before?</span></div><div class="line" id="012446"><span class="nick" style="color:#8dd3c7"><a href="#012446" label="[01:24:46]">&lt;stikonas&gt;</a></span><span class="message">now I've read a few pages of RISC-V ISA documentation (out of 100 pages)...</span></div><div class="line" id="012530"><span class="nick" style="color:#8dd3c7"><a href="#012530" label="[01:25:30]">&lt;stikonas&gt;</a></span><span class="message">no, and even fairly little assembly experience</span></div><div class="line" id="012536"><span class="nick" style="color:#8dd3c7"><a href="#012536" label="[01:25:36]">&lt;stikonas&gt;</a></span><span class="message">only some trivial things</span></div><div class="line" id="012612"><span class="nick" style="color:#2e2a4a"><a href="#012612" label="[01:26:12]">&lt;Hagfish&gt;</a></span><span class="message">that's some impressive adaptability</span></div><div class="line" id="012659"><span class="nick" style="color:#8dd3c7"><a href="#012659" label="[01:26:59]">&lt;stikonas&gt;</a></span><span class="message">maybe. Or maybe you overestimate how difficult these things are</span></div><div class="line" id="012705"><span class="nick" style="color:#2e2a4a"><a href="#012705" label="[01:27:05]">&lt;Hagfish&gt;</a></span><span class="message">that's possible, yes</span></div><div class="line" id="012711"><span class="nick" style="color:#8dd3c7"><a href="#012711" label="[01:27:11]">&lt;stikonas&gt;</a></span><span class="message">they certainly sound scary</span></div><div class="line" id="012747"><span class="nick" style="color:#8dd3c7"><a href="#012747" label="[01:27:47]">&lt;stikonas&gt;</a></span><span class="message">and writing assembly is not that different from certain subset of C...</span></div><div class="line" id="012800"><span class="nick" style="color:#2e2a4a"><a href="#012800" label="[01:28:00]">&lt;Hagfish&gt;</a></span><span class="message">i keep thinking that this bootstrapping project really needs a dozen more experts, each with decades of experience in their specialisms, but maybe there are other ways to attack the problem</span></div><div class="line" id="012803"><span class="nick" style="color:#8dd3c7"><a href="#012803" label="[01:28:03]">&lt;stikonas&gt;</a></span><span class="message">basically you should not use functions and use goto everywhere</span></div><div class="line" id="012834"><span class="nick" style="color:#2e2a4a"><a href="#012834" label="[01:28:34]">&lt;Hagfish&gt;</a></span><span class="message">i suppose that's not so strange once you get used to it, but i think some people would find it easier than others</span></div><div class="line" id="012838"><span class="nick" style="color:#6b8072"><a href="#012838" label="[01:28:38]">&lt;xentrac&gt;</a></span><span class="message">I don't think assembly is hard.  assembly is mostly simple.  machine code is mostly simple, although amd64 has decades of accumulated fungus</span></div><div class="line" id="012858"><span class="nick" style="color:#8dd3c7"><a href="#012858" label="[01:28:58]">&lt;stikonas&gt;</a></span><span class="message">yeah, and risc-v doesn't have that. It has other annoying things though as we all discussed</span></div><div class="line" id="012903"><span class="nick" style="color:#6b8072"><a href="#012903" label="[01:29:03]">&lt;xentrac&gt;</a></span><span class="message">what's hard is *debugging* a large assembly program</span></div><div class="line" id="012922"><span class="nick" style="color:#8dd3c7"><a href="#012922" label="[01:29:22]">&lt;stikonas&gt;</a></span><span class="message">yeah, that's true...</span></div><div class="line" id="012924"><span class="nick" style="color:#6b8072"><a href="#012924" label="[01:29:24]">&lt;xentrac&gt;</a></span><span class="message">also I mean writing things in assembly takes longer</span></div><div class="line" id="012946"><span class="nick" style="color:#8dd3c7"><a href="#012946" label="[01:29:46]">&lt;stikonas&gt;</a></span><span class="message">well, having a simple C prototype might help</span></div><div class="line" id="012947"><span class="nick" style="color:#6b8072"><a href="#012947" label="[01:29:47]">&lt;xentrac&gt;</a></span><span class="message">a lot of things are 100 lines of Python, 400 lines of C, or 2000 lines of assembly</span></div><div class="line" id="013021"><span class="nick" style="color:#6b8072"><a href="#013021" label="[01:30:21]">&lt;xentrac&gt;</a></span><span class="message">not all things!  a picture is worth a thousand words, but hardly any 1000-word essays can be adequately replaced by a picture</span></div><div class="line" id="013045"><span class="nick" style="color:#8dd3c7"><a href="#013045" label="[01:30:45]">&lt;stikonas&gt;</a></span><span class="message">hex1.c is certainly not that much shorter than assembly version: <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/blob/master/High%20Level%20Prototypes/hex1.c">https://github.com/oriansj/stage0-posix/blob/master/High%20Level%20Prototypes/hex1.c</a> </span></div><div class="line" id="013046"><span class="nick" style="color:#6b8072"><a href="#013046" label="[01:30:46]">&lt;xentrac&gt;</a></span><span class="message">similarly it's quite common to have 2000 lines of assembly that would be 1500 lines of C or 1000 lines of Python</span></div><div class="line" id="013059"><span class="nick" style="color:#8dd3c7"><a href="#013059" label="[01:30:59]">&lt;stikonas&gt;</a></span><span class="message">yeah, it's close to latter here</span></div><div class="line" id="013131"><span class="nick" style="color:#6b8072"><a href="#013131" label="[01:31:31]">&lt;xentrac&gt;</a></span><span class="message">one of the first algorithms in Knuth is a linear-time topological sort</span></div><div class="line" id="013152"><span class="nick" style="color:#6b8072"><a href="#013152" label="[01:31:52]">&lt;xentrac&gt;</a></span><span class="message">I translated it from MIX assembly language to Python and it... was the same size</span></div><div class="line" id="013429"><span class="nick" style="color:#6b8072"><a href="#013429" label="[01:34:29]">&lt;xentrac&gt;</a></span><span class="message">but there are other times where you're like</span></div><div class="line" id="013430"><span class="nick" style="color:#6b8072"><a href="#013430" label="[01:34:30]">&lt;xentrac&gt;</a></span><span class="message">    for y in range(min_y, max_y if max_y is not None else layout.height):</span></div><div class="line" id="013433"><span class="nick" style="color:#6b8072"><a href="#013433" label="[01:34:33]">&lt;xentrac&gt;</a></span><span class="message">        stream.writelines(layout.scan(y, w if w is not None else layout.width))</span></div><div class="line" id="013516"><span class="nick" style="color:#6b8072"><a href="#013516" label="[01:35:16]">&lt;xentrac&gt;</a></span><span class="message">or</span></div><div class="line" id="013517"><span class="nick" style="color:#6b8072"><a href="#013517" label="[01:35:17]">&lt;xentrac&gt;</a></span><span class="message">    left = (('Chapters' | String('')) - hr -</span></div><div class="line" id="013517"><span class="nick" style="color:#6b8072"><a href="#013517" label="[01:35:17]">&lt;xentrac&gt;</a></span><span class="message">            (chapno | vr | [t | ~String(' . ') for t in titles]))</span></div><div class="line" id="013532"><span class="nick" style="color:#8dd3c7"><a href="#013532" label="[01:35:32]">&lt;stikonas&gt;</a></span><span class="message">yeah, that would be nasty in assembly</span></div><div class="line" id="013543"><span class="nick" style="color:#8dd3c7"><a href="#013543" label="[01:35:43]">&lt;stikonas&gt;</a></span><span class="message">fortunately, none of the bootstrap code is this complicated</span></div><div class="line" id="013633"><span class="nick" style="color:#6b8072"><a href="#013633" label="[01:36:33]">&lt;xentrac&gt;</a></span><span class="message">I think in assembly you'd take a different approach</span></div><div class="line" id="024347"><span class="nick" style="color:#8dd3c7"><a href="#024347" label="[02:43:47]">&lt;stikonas&gt;</a></span><span class="message">I don't think we ever use kaem &quot; escaping in kaem-minimal... that's probably some opportunity to reduce its size...</span></div><div class="line" id="041756"><span class="nick" style="color:#80b1d3"><a href="#041756" label="[04:17:56]">&lt;oriansj&gt;</a></span><span class="message">stikonas[m]: you are probably quite right about &quot;raw strings&quot; in kaem-minimal but I did design it before live-bootstrap existed and didn't want to shoe-horn it in later as hex0 programming is a huge pain in the butt.</span></div><div class="line" id="041954"><span class="nick" style="color:#80b1d3"><a href="#041954" label="[04:19:54]">&lt;oriansj&gt;</a></span><span class="message">which is why figuring out the correct RISC-V hex2 syntax is probably the best way to figure out the correct way to implement hex1</span></div><div class="line" id="042057"><span class="nick" style="color:#80b1d3"><a href="#042057" label="[04:20:57]">&lt;oriansj&gt;</a></span><span class="message">and stikonas[m] your pull request to stage0-posix has been merged.</span></div><div class="line" id="053414"><span class="nick" style="color:#80b1d3"><a href="#053414" label="[05:34:14]">&lt;oriansj&gt;</a></span><span class="message">also one stupid trick for writing hex0 programs: write them in M1 first. (it enables using blood-elf to make the binaries debuggable and thanks to  'raw hex strings' you can convert one line at a time once it works and then just pull out the '/'' and you have your hex0 program)</span></div><div class="line" id="092742"><span class="nick" style="color:#6d2462"><a href="#092742" label="[09:27:42]">&lt;siraben&gt;</a></span><span class="message">Melg8[m]: how can I use <a rel="nofollow" href="https://github.com/melg8/cit/blob/feature/BootstrapNix/bootstrap_nix/bootstrap_seeds/default.nix">https://github.com/melg8/cit/blob/feature/BootstrapNix/bootstrap_nix/bootstrap_seeds/default.nix</a>  ?</span></div><div class="line" id="092753"><span class="nick" style="color:#6d2462"><a href="#092753" label="[09:27:53]">&lt;siraben&gt;</a></span><span class="message">Is it possible to get a Nix shell with the bootstrapped GCC?</span></div><div class="line" id="092819"><span class="nick" style="color:#6d2462"><a href="#092819" label="[09:28:19]">&lt;siraben&gt;</a></span><span class="message">I get `error: unsupported Git input attribute 'name'` when I run `nix-build`</span></div><div class="line" id="133929"><span class="nick" style="color:#8dd3c7"><a href="#133929" label="[13:39:29]">&lt;stikonas&gt;</a></span><span class="message">so removing unnecessary features from tokenization in kaem-optional-seed can save at least 29 bytes</span></div><div class="line" id="134146"><span class="nick" style="color:#8dd3c7"><a href="#134146" label="[13:41:46]">&lt;stikonas&gt;</a></span><span class="message">actually a bit more since I have not added jump addresses to that number</span></div><div class="line" id="134337"><span class="nick" style="color:#8dd3c7"><a href="#134337" label="[13:43:37]">&lt;stikonas&gt;</a></span><span class="message">it might even be enough to push hex0 + kaem-optional-seed to sub 1KB size</span></div><div class="line" id="143820"><span class="nick" style="color:#8dd3c7"><a href="#143820" label="[14:38:20]">&lt;stikonas&gt;</a></span><span class="message">ok, it can go down from 737 bytes to at least 686</span></div><div class="line" id="143826"><span class="nick" style="color:#8dd3c7"><a href="#143826" label="[14:38:26]">&lt;stikonas&gt;</a></span><span class="message">so at least 51 byte saving</span></div><div class="line" id="143842"><span class="nick" style="color:#8dd3c7"><a href="#143842" label="[14:38:42]">&lt;stikonas&gt;</a></span><span class="message">(on x86)</span></div><div class="line" id="145850"><span class="nick" style="color:#80b1d3"><a href="#145850" label="[14:58:50]">&lt;oriansj&gt;</a></span><span class="message">stikonas: very nice. There are also other savings possible for the bootstrap-seeds kaem-minimal (but not the stage0-posix kaem-minimal) with the disabling of verbose mode and turning off the error message of failure. (which means we can remove the fputc and file_print functions entirely) There are also optimizations  with malloc. And if we don't need the \ behavior in the initial kaem.run we can take that out too.</span></div><div class="line" id="150132"><span class="nick" style="color:#80b1d3"><a href="#150132" label="[15:01:32]">&lt;oriansj&gt;</a></span><span class="message">Te null values at the end can also be omitted (but you might want to keep the comments of their addresses)</span></div><div class="line" id="150525"><span class="nick" style="color:#80b1d3"><a href="#150525" label="[15:05:25]">&lt;oriansj&gt;</a></span><span class="message">several of those tweaks will not work in stage0-posix because they are needed but in bootstrap-seeds, they probably will work just fine.</span></div><div class="line" id="152131"><span class="nick" style="color:#234e69"><a href="#152131" label="[15:21:31]">&lt;stikonas[m]&gt;</a></span><span class="message">Yeah, we can have kaem-optional-seed building what is now currently kaem-minimal...</span></div><div class="line" id="152301"><span class="nick" style="color:#8dd3c7"><a href="#152301" label="[15:23:01]">&lt;stikonas&gt;</a></span><span class="message">oriansj: \ behavious is not needed in stage0-posix too, I already counted that in 51 byte...</span></div><div class="line" id="152348"><span class="nick" style="color:#8dd3c7"><a href="#152348" label="[15:23:48]">&lt;stikonas&gt;</a></span><span class="message">I didn't convert M1 to hex0 yet though...</span></div><div class="line" id="152357"><span class="nick" style="color:#8dd3c7"><a href="#152357" label="[15:23:57]">&lt;stikonas&gt;</a></span><span class="message">which is always the annoying part...</span></div><div class="line" id="152413"><span class="nick" style="color:#8dd3c7"><a href="#152413" label="[15:24:13]">&lt;stikonas&gt;</a></span><span class="message">in this case it's mostly removing stuff, but addresses will change...</span></div><div class="line" id="153514"><span class="nick" style="color:#80b1d3"><a href="#153514" label="[15:35:14]">&lt;oriansj&gt;</a></span><span class="message">stikonas: addresses can't change from M1 to hex0, unless you use a different ELF_header.hex2 file</span></div><div class="line" id="153641"><span class="nick" style="color:#80b1d3"><a href="#153641" label="[15:36:41]">&lt;oriansj&gt;</a></span><span class="message">also Phase-5 and later do use \ for pretter lines</span></div><div class="line" id="153751"><span class="nick" style="color:#8dd3c7"><a href="#153751" label="[15:37:51]">&lt;stikonas&gt;</a></span><span class="message">oh yes, that's true... missed that in phase 5...</span></div><div class="line" id="153801"><span class="nick" style="color:#8dd3c7"><a href="#153801" label="[15:38:01]">&lt;stikonas&gt;</a></span><span class="message">oriansj: doesn't jump amount change?</span></div><div class="line" id="153804"><span class="nick" style="color:#8dd3c7"><a href="#153804" label="[15:38:04]">&lt;stikonas&gt;</a></span><span class="message">if you remove lines</span></div><div class="line" id="153826"><span class="nick" style="color:#8dd3c7"><a href="#153826" label="[15:38:26]">&lt;stikonas&gt;</a></span><span class="message">M1 still has labels rather than hex jumps</span></div><div class="line" id="153948"><span class="nick" style="color:#80b1d3"><a href="#153948" label="[15:39:48]">&lt;oriansj&gt;</a></span><span class="message">stikonas: when you remove lines in te hex0 the addresses change exactly as much as the same changes in M1 do</span></div><div class="line" id="154019"><span class="nick" style="color:#8dd3c7"><a href="#154019" label="[15:40:19]">&lt;stikonas&gt;</a></span><span class="message">although, if one does two stage kaem-minimal approach, then maybe it's simpler to just hardcode 3 commands needed to build kaem-minimal...</span></div><div class="line" id="154038"><span class="nick" style="color:#80b1d3"><a href="#154038" label="[15:40:38]">&lt;oriansj&gt;</a></span><span class="message">as the instructions are the exact same between the two, M1 is just easier to write</span></div><div class="line" id="154125"><span class="nick" style="color:#80b1d3"><a href="#154125" label="[15:41:25]">&lt;oriansj&gt;</a></span><span class="message">stikonas: definitely mentioned before but I never had the time to see if that was true</span></div><div class="line" id="154135"><span class="nick" style="color:#8dd3c7"><a href="#154135" label="[15:41:35]">&lt;stikonas&gt;</a></span><span class="message">yeah, I think I mentioned that...</span></div><div class="line" id="154148"><span class="nick" style="color:#8dd3c7"><a href="#154148" label="[15:41:48]">&lt;stikonas&gt;</a></span><span class="message">but yes, it's kind of different program then</span></div><div class="line" id="154155"><span class="nick" style="color:#8dd3c7"><a href="#154155" label="[15:41:55]">&lt;stikonas&gt;</a></span><span class="message">so would have to be written from scratch</span></div><div class="line" id="154354"><span class="nick" style="color:#8dd3c7"><a href="#154354" label="[15:43:54]">&lt;stikonas&gt;</a></span><span class="message">might be easier to experiment with a new arch... e.g. riscv...</span></div><div class="line" id="154405"><span class="nick" style="color:#80b1d3"><a href="#154405" label="[15:44:05]">&lt;oriansj&gt;</a></span><span class="message">well in theory it would be 3 array tables pointing to a block of strings and the current call block being called 3 times with those arrays</span></div><div class="line" id="154454"><span class="nick" style="color:#80b1d3"><a href="#154454" label="[15:44:54]">&lt;oriansj&gt;</a></span><span class="message">more pointers to keep track of but should definitely be less instructions.</span></div><div class="line" id="154507"><span class="nick" style="color:#8dd3c7"><a href="#154507" label="[15:45:07]">&lt;stikonas&gt;</a></span><span class="message">actually, maybe just 2 commands</span></div><div class="line" id="154519"><span class="nick" style="color:#8dd3c7"><a href="#154519" label="[15:45:19]">&lt;stikonas&gt;</a></span><span class="message">rebuild hex0 and then directly build kaem-minimal</span></div><div class="line" id="154540"><span class="nick" style="color:#8dd3c7"><a href="#154540" label="[15:45:40]">&lt;stikonas&gt;</a></span><span class="message">well, ok, also need to run it</span></div><div class="line" id="154541"><span class="nick" style="color:#8dd3c7"><a href="#154541" label="[15:45:41]">&lt;stikonas&gt;</a></span><span class="message">so 3...</span></div><div class="line" id="155128"><span class="nick" style="color:#80b1d3"><a href="#155128" label="[15:51:28]">&lt;oriansj&gt;</a></span><span class="message">usually it is 0, 1 or infinity</span></div><div class="line" id="191359"><span class="nick">***</span><span class="message notice">janneke_ is now known as janneke</span></div><div class="line" id="220225"><span class="nick" style="color:#8dd3c7"><a href="#220225" label="[22:02:25]">&lt;stikonas&gt;</a></span><span class="message">oriansj: since for riscv byte boundaries are meaningless maybe the following would work (at the expense of fairly different hex implementation):</span></div><div class="line" id="220250"><span class="nick" style="color:#8dd3c7"><a href="#220250" label="[22:02:50]">&lt;stikonas&gt;</a></span><span class="message">instead of processing two hex characters at a time (what toggle does)</span></div><div class="line" id="220407"><span class="nick" style="color:#8dd3c7"><a href="#220407" label="[22:04:07]">&lt;stikonas&gt;</a></span><span class="message">we process 6 fields separately (7, 5, 3, 5, 5, 7 bits, which can be represented by e.g. 2, 2, 1, 2, 2, 2 hex numbers, or we can do some other representation)</span></div><div class="line" id="220506"><span class="nick" style="color:#8dd3c7"><a href="#220506" label="[22:05:06]">&lt;stikonas&gt;</a></span><span class="message">and that should work with all opcodes (maybe with the exception of FENCE)</span></div><div class="line" id="220541"><span class="nick" style="color:#8dd3c7"><a href="#220541" label="[22:05:41]">&lt;stikonas&gt;</a></span><span class="message">hex1, hex2 will have to do somewhat different calculation to combine it into a single byte, but I think it wouldn't be too hard</span></div><div class="line" id="220558"><span class="nick" style="color:#8dd3c7"><a href="#220558" label="[22:05:58]">&lt;stikonas&gt;</a></span><span class="message">actually into 4 bytes</span></div><div class="line" id="220629"><span class="nick" style="color:#8dd3c7"><a href="#220629" label="[22:06:29]">&lt;stikonas&gt;</a></span><span class="message">well, maybe should try writing some prototype in C...</span></div><div class="line" id="220657"><span class="nick" style="color:#8dd3c7"><a href="#220657" label="[22:06:57]">&lt;stikonas&gt;</a></span><span class="message">at least from the point of view of M1, it should be fairly trivial then</span></div><div class="line" id="220814"><span class="nick" style="color:#8dd3c7"><a href="#220814" label="[22:08:14]">&lt;stikonas&gt;</a></span><span class="message">hmm, although, that doesn't completely answer the question of immediate mangling in S and B-type opcodes</span></div><div class="line" id="221821"><span class="nick" style="color:#6b8072"><a href="#221821" label="[22:18:21]">&lt;xentrac&gt;</a></span><span class="message">stikonas: that sounds like a reasonable plan</span></div><div class="line" id="221933"><span class="nick" style="color:#8dd3c7"><a href="#221933" label="[22:19:33]">&lt;stikonas&gt;</a></span><span class="message">there is still some uncertainties but I think say it should be possible to implement those</span></div><div class="line" id="222031"><span class="nick" style="color:#8dd3c7"><a href="#222031" label="[22:20:31]">&lt;stikonas&gt;</a></span><span class="message">possibly need those arch specific prefixes specify how to encode some immediates...</span></div><div class="line" id="222053"><span class="nick" style="color:#8dd3c7"><a href="#222053" label="[22:20:53]">&lt;stikonas&gt;</a></span><span class="message">as not all can be inferred from the position</span></div><div class="line" id="222441"><span class="nick" style="color:#6b8072"><a href="#222441" label="[22:24:41]">&lt;xentrac&gt;</a></span><span class="message">yeah</span></div><div class="line" id="222922"><span class="nick" style="color:#8dd3c7"><a href="#222922" label="[22:29:22]">&lt;stikonas&gt;</a></span><span class="message">maybe just have 7 different prefixes specifying which of the 7 encodings we use in that position</span></div><div class="line" id="223028"><span class="nick" style="color:#8dd3c7"><a href="#223028" label="[22:30:28]">&lt;stikonas&gt;</a></span><span class="message">but at least M1 and anything higher won't need any changes</span></div><div class="line" id="223054"><span class="nick" style="color:#8dd3c7"><a href="#223054" label="[22:30:54]">&lt;stikonas&gt;</a></span><span class="message">hex1, hex2, and hex2.c are the only things needing modification</span></div><div class="line" id="223121"><span class="nick" style="color:#8dd3c7"><a href="#223121" label="[22:31:21]">&lt;stikonas&gt;</a></span><span class="message">first two are the hardest to write though...</span></div><div class="line" id="234346"><span class="nick" style="color:#80b1d3"><a href="#234346" label="[23:43:46]">&lt;oriansj&gt;</a></span><span class="message">well hex2 supports binary input (just 0 and 1) but the problem is that little endian architectures break up immediates that span the byte boundaries</span></div><div class="line" id="234938"><span class="nick" style="color:#8dd3c7"><a href="#234938" label="[23:49:38]">&lt;stikonas&gt;</a></span><span class="message">oh yes...</span></div><div class="line" id="235032"><span class="nick" style="color:#80b1d3"><a href="#235032" label="[23:50:32]">&lt;oriansj&gt;</a></span><span class="message">So it is best to go word oriented with RISC-V</span></div><div class="line" id="235140"><span class="nick" style="color:#8dd3c7"><a href="#235140" label="[23:51:40]">&lt;stikonas&gt;</a></span><span class="message">so read the whole instruction?</span></div><div class="line" id="235403"><span class="nick" style="color:#8dd3c7"><a href="#235403" label="[23:54:03]">&lt;stikonas&gt;</a></span><span class="message">well, that's what I was thinking too...</span></div><div class="line" id="235423"><span class="nick" style="color:#8dd3c7"><a href="#235423" label="[23:54:23]">&lt;stikonas&gt;</a></span><span class="message">then we can have 7 different prefixes for each immediate encoding</span></div><div class="line" id="235434"><span class="nick" style="color:#80b1d3"><a href="#235434" label="[23:54:34]">&lt;oriansj&gt;</a></span><span class="message">and convert !@$~ to mangle that word in RISC-V specific ways (or AArch64 specific ways if we want to packport that advance)</span></div><div class="line" id="235439"><span class="nick" style="color:#8dd3c7"><a href="#235439" label="[23:54:39]">&lt;stikonas&gt;</a></span><span class="message">yes...</span></div><div class="line" id="235557"><span class="nick" style="color:#8dd3c7"><a href="#235557" label="[23:55:57]">&lt;stikonas&gt;</a></span><span class="message">well, it's probably simplest, .hex2 object files will grow by maybe 40% but at least it looks simple</span></div><div class="line" id="235606"><span class="nick" style="color:#80b1d3"><a href="#235606" label="[23:56:06]">&lt;oriansj&gt;</a></span><span class="message">well we need only support the immediates in SB-Format and UJ-Format instructions</span></div><div class="line" id="235612"><span class="nick" style="color:#80b1d3"><a href="#235612" label="[23:56:12]">&lt;oriansj&gt;</a></span><span class="message">(in hex2)</span></div><div class="line" id="235627"><span class="nick" style="color:#8dd3c7"><a href="#235627" label="[23:56:27]">&lt;stikonas&gt;</a></span><span class="message">and I?</span></div><div class="line" id="235637"><span class="nick" style="color:#8dd3c7"><a href="#235637" label="[23:56:37]">&lt;stikonas&gt;</a></span><span class="message">well, it's not mangled</span></div><div class="line" id="235710"><span class="nick" style="color:#80b1d3"><a href="#235710" label="[23:57:10]">&lt;oriansj&gt;</a></span><span class="message">well we have 4 characters to use so one for each format</span></div><div class="line" id="235727"><span class="nick" style="color:#8dd3c7"><a href="#235727" label="[23:57:27]">&lt;stikonas&gt;</a></span><span class="message">oh ok...</span></div><div class="line" id="235736"><span class="nick" style="color:#8dd3c7"><a href="#235736" label="[23:57:36]">&lt;stikonas&gt;</a></span><span class="message">I was thinking being a bit more verbose but maybe tha'ts fine</span></div><div class="line" id="235759"><span class="nick" style="color:#80b1d3"><a href="#235759" label="[23:57:59]">&lt;oriansj&gt;</a></span><span class="message">% and &amp; will remain unchanged</span></div><div class="line" id="235809"><span class="nick" style="color:#8dd3c7"><a href="#235809" label="[23:58:09]">&lt;stikonas&gt;</a></span><span class="message">ok, then &amp; will deal with I</span></div><div class="line" id="235820"><span class="nick" style="color:#80b1d3"><a href="#235820" label="[23:58:20]">&lt;oriansj&gt;</a></span><span class="message">also we only need relative for jump and branch instructions</span></div><div class="line" id="235902"><span class="nick" style="color:#6b8072"><a href="#235902" label="[23:59:02]">&lt;xentrac&gt;</a></span><span class="message">also auipc</span></div><div class="line" id="235917"><span class="nick" style="color:#8dd3c7"><a href="#235917" label="[23:59:17]">&lt;stikonas&gt;</a></span><span class="message">auipc is U type</span></div><div class="line" id="235929"><span class="nick" style="color:#80b1d3"><a href="#235929" label="[23:59:29]">&lt;oriansj&gt;</a></span><span class="message">M1 will deal with R-Format, I-Format, S-Format and S-Format</span></div><div class="line" id="235939"><span class="nick" style="color:#80b1d3"><a href="#235939" label="[23:59:39]">&lt;oriansj&gt;</a></span><span class="message">correction U-Format</span></div><br /></div></body></html>