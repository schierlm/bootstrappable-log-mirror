<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-06-21.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="010442"><span class="nick" style="color:#8dd3c7"><a href="#010442" label="[01:04:42]">&lt;stikonas&gt;</a></span><span class="message">fossy: what do you think about splitting /after folder?</span></div><div class="line" id="010520"><span class="nick" style="color:#8dd3c7"><a href="#010520" label="[01:05:20]">&lt;stikonas&gt;</a></span><span class="message">I'm thinking of splitting all the build scripts, so basically what is in the repo/sysa/* and installed files</span></div><div class="line" id="010707"><span class="nick" style="color:#8dd3c7"><a href="#010707" label="[01:07:07]">&lt;stikonas&gt;</a></span><span class="message">then we'll have a cleaner image of what we built...</span></div><div class="line" id="013936"><span class="nick" style="color:#2e2a4a"><a href="#013936" label="[01:39:36]">&lt;Hagfish&gt;</a></span><span class="message"> <a rel="nofollow" href="https://discourse.nixos.org/t/nixos-unstable-s-iso-minimal-x86-64-linux-is-100-reproducible/13723">https://discourse.nixos.org/t/nixos-unstable-s-iso-minimal-x86-64-linux-is-100-reproducible/13723</a> </span></div><div class="line" id="013943"><span class="nick" style="color:#2e2a4a"><a href="#013943" label="[01:39:43]">&lt;Hagfish&gt;</a></span><span class="message">the madlads have actually done it</span></div><div class="line" id="014021"><span class="nick" style="color:#2e2a4a"><a href="#014021" label="[01:40:21]">&lt;Hagfish&gt;</a></span><span class="message">here's the HN discussion: <a rel="nofollow" href="https://news.ycombinator.com/item?id=27573393">https://news.ycombinator.com/item?id=27573393</a> </span></div><div class="line" id="020444"><span class="nick" style="color:#6b8072"><a href="#020444" label="[02:04:44]">&lt;drakonis&gt;</a></span><span class="message">highly impressive</span></div><div class="line" id="020543"><span class="nick" style="color:#6b8072"><a href="#020543" label="[02:05:43]">&lt;drakonis&gt;</a></span><span class="message">it is always strange how nixos comes up more often than guix in these kinds of conversations</span></div><div class="line" id="021952"><span class="nick" style="color:#2e2a4a"><a href="#021952" label="[02:19:52]">&lt;Hagfish&gt;</a></span><span class="message">&quot;Guix's work on bootstrap seed reduction has been so far mostly applied to i686/amd64 and not even other architectures they support (at least, not fully).&quot;</span></div><div class="line" id="022003"><span class="nick" style="color:#2e2a4a"><a href="#022003" label="[02:20:03]">&lt;Hagfish&gt;</a></span><span class="message">some of the comments there are a bit spicy</span></div><div class="line" id="023432"><span class="nick" style="color:#6b8072"><a href="#023432" label="[02:34:32]">&lt;drakonis&gt;</a></span><span class="message">quite</span></div><div class="line" id="032208"><span class="nick" style="color:#80b1d3"><a href="#032208" label="[03:22:08]">&lt;siraben&gt;</a></span><span class="message">Melg8: <a rel="nofollow" href="https://news.ycombinator.com/item?id=27573393">https://news.ycombinator.com/item?id=27573393</a> </span></div><div class="line" id="032351"><span class="nick" style="color:#80b1d3"><a href="#032351" label="[03:23:51]">&lt;siraben&gt;</a></span><span class="message">bootstrapping is mentioned <a rel="nofollow" href="https://news.ycombinator.com/item?id=27574166">https://news.ycombinator.com/item?id=27574166</a> </span></div><div class="line" id="053139"><span class="nick" style="color:#2e2a4a"><a href="#053139" label="[05:31:39]">&lt;Hagfish&gt;</a></span><span class="message">a nice coincidence that this google have written this month about advancing reproducibility too</span></div><div class="line" id="053143"><span class="nick" style="color:#2e2a4a"><a href="#053143" label="[05:31:43]">&lt;Hagfish&gt;</a></span><span class="message"> <a rel="nofollow" href="https://security.googleblog.com/2021/06/introducing-slsa-end-to-end-framework.html">https://security.googleblog.com/2021/06/introducing-slsa-end-to-end-framework.html</a> </span></div><div class="line" id="053155"><span class="nick" style="color:#2e2a4a"><a href="#053155" label="[05:31:55]">&lt;Hagfish&gt;</a></span><span class="message">&quot;SLSA 4 is currently the highest level, requiring two-person review of all changes and a hermetic, reproducible build process.&quot;</span></div><div class="line" id="071455"><span class="nick">***</span><span class="message notice">platinum.libera.chat sets mode: +o ChanServ</span></div><div class="line" id="093732"><span class="nick" style="color:#6d2462"><a href="#093732" label="[09:37:32]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: not opposed to it</span></div><div class="line" id="093838"><span class="nick" style="color:#234e69"><a href="#093838" label="[09:38:38]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, I first need to finish tcc/meslibc changes</span></div><div class="line" id="093906"><span class="nick" style="color:#234e69"><a href="#093906" label="[09:39:06]">&lt;stikonas[m]&gt;</a></span><span class="message">Then I can try to clean up directory structure</span></div><div class="line" id="101533"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado</span></div><div class="line" id="101538"><span class="nick" style="color:#6c3d55"><a href="#101538" label="[10:15:38]">&lt;rekado&gt;</a></span><span class="message"> <a rel="nofollow" href="https://blog.dave.tf/post/finding-bottom-turtle/">https://blog.dave.tf/post/finding-bottom-turtle/</a> </span></div><div class="line" id="102108"><span class="nick" style="color:#d9d9d9"><a href="#102108" label="[10:21:08]">&lt;civodul&gt;</a></span><span class="message">&quot;This feels like we’ve reached a point in our bootstrapping where we have to run atop preexisting software we don’t trust, cannot replace, and cannot avoid.&quot;</span></div><div class="line" id="102113"><span class="nick" style="color:#d9d9d9"><a href="#102113" label="[10:21:13]">&lt;civodul&gt;</a></span><span class="message">this is the usual argument that as</span></div><div class="line" id="102125"><span class="nick" style="color:#d9d9d9"><a href="#102125" label="[10:21:25]">&lt;civodul&gt;</a></span><span class="message">this is the usual argument that assumes the outcome is binary</span></div><div class="line" id="102157"><span class="nick" style="color:#d9d9d9"><a href="#102157" label="[10:21:57]">&lt;civodul&gt;</a></span><span class="message">whereas i think it's all about reducing the attack surface and increasing transparency</span></div><div class="line" id="103844"><span class="nick" style="color:#80b1d3"><a href="#103844" label="[10:38:44]">&lt;siraben&gt;</a></span><span class="message">Ooh, is the post author here?</span></div><div class="line" id="103909"><span class="nick" style="color:#8dd3c7"><a href="#103909" label="[10:39:09]">&lt;stikonas&gt;</a></span><span class="message">still, the blog post is quite well written. But yes, increasing transparancy is also one of the outcomes, even if you don't go all the way</span></div><div class="line" id="103930"><span class="nick" style="color:#8dd3c7"><a href="#103930" label="[10:39:30]">&lt;stikonas&gt;</a></span><span class="message">siraben: yes, the author looks to be here</span></div><div class="line" id="104047"><span class="nick" style="color:#80b1d3"><a href="#104047" label="[10:40:47]">&lt;siraben&gt;</a></span><span class="message">I realize the blynn-compiler stuff has been a bit stalled, unfortunately I've been too busy to get back into it, however it might be a good exercise to rewrite some of the trivial assemblers in Haskell, if nothing else to start building useful modules</span></div><div class="line" id="104103"><span class="nick" style="color:#80b1d3"><a href="#104103" label="[10:41:03]">&lt;siraben&gt;</a></span><span class="message">the compiler self-hosts but doesn't have much outside of what's needed to achieve that</span></div><div class="line" id="104115"><span class="nick" style="color:#80b1d3"><a href="#104115" label="[10:41:15]">&lt;siraben&gt;</a></span><span class="message">(by Haskell I mean the dialect accepted by blynn-compiler</span></div><div class="line" id="104120"><span class="nick" style="color:#80b1d3"><a href="#104120" label="[10:41:20]">&lt;siraben&gt;</a></span><span class="message">)</span></div><div class="line" id="104130"><span class="nick" style="color:#80b1d3"><a href="#104130" label="[10:41:30]">&lt;siraben&gt;</a></span><span class="message">stikonas: I see</span></div><div class="line" id="104306"><span class="nick" style="color:#bc80bd"><a href="#104306" label="[10:43:06]">&lt;pabs3&gt;</a></span><span class="message">discussion about the turtle thing: <a rel="nofollow" href="https://news.ycombinator.com/item?id=27575849">https://news.ycombinator.com/item?id=27575849</a> </span></div><div class="line" id="110230"><span class="nick" style="color:#6d2462"><a href="#110230" label="[11:02:30]">&lt;fossy&gt;</a></span><span class="message">i like this post</span></div><div class="line" id="110315"><span class="nick" style="color:#6d2462"><a href="#110315" label="[11:03:15]">&lt;fossy&gt;</a></span><span class="message">i agree with civodul for the most part, but you can read that entire turtle post as how far do you have to go to eliminate the attack surface</span></div><div class="line" id="110346"><span class="nick" style="color:#80b1d3"><a href="#110346" label="[11:03:46]">&lt;siraben&gt;</a></span><span class="message">fossy, pabs3: this is similar to discussions in formal verification</span></div><div class="line" id="110402"><span class="nick" style="color:#80b1d3"><a href="#110402" label="[11:04:02]">&lt;siraben&gt;</a></span><span class="message">at some point you have to trust something about the system, such as the CPU</span></div><div class="line" id="110408"><span class="nick" style="color:#80b1d3"><a href="#110408" label="[11:04:08]">&lt;siraben&gt;</a></span><span class="message">of course if the assumption is wrong then all bets are off</span></div><div class="line" id="110411"><span class="nick" style="color:#6d2462"><a href="#110411" label="[11:04:11]">&lt;fossy&gt;</a></span><span class="message">i also like formal verification</span></div><div class="line" id="110415"><span class="nick" style="color:#3c5b35"><a href="#110415" label="[11:04:15]">*</a></span><span class="message">fossy &lt;3 sel4</span></div><div class="line" id="110426"><span class="nick" style="color:#80b1d3"><a href="#110426" label="[11:04:26]">&lt;siraben&gt;</a></span><span class="message">people here might find this interesting <a rel="nofollow" href="https://blog.compiler.ai/2021/05/06/verification-is-tcbpb-reduction/">https://blog.compiler.ai/2021/05/06/verification-is-tcbpb-reduction/</a> </span></div><div class="line" id="110438"><span class="nick" style="color:#80b1d3"><a href="#110438" label="[11:04:38]">&lt;siraben&gt;</a></span><span class="message">fossy: nice, I've heard of seL4, it's impressive</span></div><div class="line" id="110504"><span class="nick" style="color:#6d2462"><a href="#110504" label="[11:05:04]">&lt;fossy&gt;</a></span><span class="message">i cannot say i understand formal verification though :P</span></div><div class="line" id="110510"><span class="nick" style="color:#80b1d3"><a href="#110510" label="[11:05:10]">&lt;siraben&gt;</a></span><span class="message">fossy: I've been working on formally verifying C programs recently, <a rel="nofollow" href="https://gist.github.com/siraben/bdc2aa9b4a8f197722411b334febeaa0">https://gist.github.com/siraben/bdc2aa9b4a8f197722411b334febeaa0</a>  as a little example</span></div><div class="line" id="110518"><span class="nick" style="color:#6d2462"><a href="#110518" label="[11:05:18]">&lt;fossy&gt;</a></span><span class="message">i have thought at times about the intersection between formal verification and bootstrappability</span></div><div class="line" id="110528"><span class="nick" style="color:#80b1d3"><a href="#110528" label="[11:05:28]">&lt;siraben&gt;</a></span><span class="message">there's a lot in common</span></div><div class="line" id="110547"><span class="nick" style="color:#6d2462"><a href="#110547" label="[11:05:47]">&lt;fossy&gt;</a></span><span class="message">(is it possible to ever construct a formally verified bootstrapped bootstrapping path) (i.e. self-verifying)?</span></div><div class="line" id="110610"><span class="nick" style="color:#6d2462"><a href="#110610" label="[11:06:10]">&lt;fossy&gt;</a></span><span class="message">like, that would be a massively hard probelm</span></div><div class="line" id="110620"><span class="nick" style="color:#80b1d3"><a href="#110620" label="[11:06:20]">&lt;siraben&gt;</a></span><span class="message">fossy: if I had infinite time I would also verify the correctness of various parts of our bootstrap :)</span></div><div class="line" id="110656"><span class="nick" style="color:#80b1d3"><a href="#110656" label="[11:06:56]">&lt;siraben&gt;</a></span><span class="message">fossy: yeah, I can think of a way to formulate bootstrapping formally</span></div><div class="line" id="110752"><span class="nick" style="color:#6d2462"><a href="#110752" label="[11:07:52]">&lt;fossy&gt;</a></span><span class="message">yea i see that as a worthy goal also - but if we are going back to trusting trust you have to express the proofs /somehow/, and if they are being run on a computer then they are built ontop of the massive software stack anyway :P</span></div><div class="line" id="110812"><span class="nick" style="color:#6d2462"><a href="#110812" label="[11:08:12]">&lt;fossy&gt;</a></span><span class="message">in reality all of these are quite unlikely as mr turtle states</span></div><div class="line" id="110812"><span class="nick" style="color:#80b1d3"><a href="#110812" label="[11:08:12]">&lt;siraben&gt;</a></span><span class="message">fossy: the first significant thing that has to be done is to give a formal semantics for every intermediate language of our bootstrap, this is way before we assert the compilers/interpreters are correct</span></div><div class="line" id="110825"><span class="nick" style="color:#6d2462"><a href="#110825" label="[11:08:25]">&lt;fossy&gt;</a></span><span class="message">yea right</span></div><div class="line" id="110831"><span class="nick" style="color:#6d2462"><a href="#110831" label="[11:08:31]">&lt;fossy&gt;</a></span><span class="message">which is not an easy task to begin with</span></div><div class="line" id="110900"><span class="nick" style="color:#80b1d3"><a href="#110900" label="[11:09:00]">&lt;siraben&gt;</a></span><span class="message">but assuming you have semantics, then you could now state: &quot;let a bootstrapped compiler from asm to C be a program written in asm that compiles C to asm and preserves the program behavior&quot;</span></div><div class="line" id="110929"><span class="nick" style="color:#80b1d3"><a href="#110929" label="[11:09:29]">&lt;siraben&gt;</a></span><span class="message">fossy: yeah, see the amount of work needed to prove correctness of an imperative language to a stack machine with jumps <a rel="nofollow" href="https://xavierleroy.org/courses/EUTypes-2019/slides.pdf">https://xavierleroy.org/courses/EUTypes-2019/slides.pdf</a> </span></div><div class="line" id="111008"><span class="nick" style="color:#80b1d3"><a href="#111008" label="[11:10:08]">&lt;siraben&gt;</a></span><span class="message">fossy: things are looking up though, I mean now we have a formal semantics for C, I wonder if CompCert (the formally verified compiler) would accept C programs we write for live-bootstrap</span></div><div class="line" id="111027"><span class="nick" style="color:#80b1d3"><a href="#111027" label="[11:10:27]">&lt;siraben&gt;</a></span><span class="message">It's a lot of work and maybe the benefit is unclear, I don't know enough to say</span></div><div class="line" id="111049"><span class="nick" style="color:#80b1d3"><a href="#111049" label="[11:10:49]">&lt;siraben&gt;</a></span><span class="message">&lt;fossy&gt; but if we are going back to trusting trust you have to express the proofs /somehow/, and if they are being run on a computer then they are built ontop of the massive software stack anyway</span></div><div class="line" id="111049"><span class="nick" style="color:#80b1d3"><a href="#111049" label="[11:10:49]">&lt;siraben&gt;</a></span><span class="message">yeah exactly, haha</span></div><div class="line" id="111052"><span class="nick" style="color:#6d2462"><a href="#111052" label="[11:10:52]">&lt;fossy&gt;</a></span><span class="message">if i get a chance i think i will chat about this with my formal verification friends</span></div><div class="line" id="111102"><span class="nick" style="color:#6d2462"><a href="#111102" label="[11:11:02]">&lt;fossy&gt;</a></span><span class="message">very interesting stuff but i am no expert in it lmao</span></div><div class="line" id="111127"><span class="nick" style="color:#80b1d3"><a href="#111127" label="[11:11:27]">&lt;siraben&gt;</a></span><span class="message">please let me know what they say, sounds interesting</span></div><div class="line" id="111217"><span class="nick" style="color:#6d2462"><a href="#111217" label="[11:12:17]">&lt;fossy&gt;</a></span><span class="message">for seL4 at least (from the whitepaper):</span></div><div class="line" id="111220"><span class="nick" style="color:#6d2462"><a href="#111220" label="[11:12:20]">&lt;fossy&gt;</a></span><span class="message">C is not a formal language; in order to allow reasoning about a C program in thetheorem prover (we use Isabelle/HOL), it has to be transformed into mathematicallogic (HOL). This is done by a C parser written in Isabelle. The parser defines thesemantics of the C program, and gives it meaning in HOL according to this seman-tics. It is this formalisation which we prove to be a refinement of</span></div><div class="line" id="111222"><span class="nick" style="color:#6d2462"><a href="#111222" label="[11:12:22]">&lt;fossy&gt;</a></span><span class="message">the mathematical(abstract) model.Note that C does not have an official mathematical semantics, and parts of theC language are notoriously subtle and not necessarily that well defined. We solvethis by restricting our use of C to a well-defined subset of the language, for whichwe have an unambiguous semantics. However, this does not guarantee that ourassumed semantics for that subset is the</span></div><div class="line" id="111224"><span class="nick" style="color:#6d2462"><a href="#111224" label="[11:12:24]">&lt;fossy&gt;</a></span><span class="message">same as the compiler’s. More on thatbelow.</span></div><div class="line" id="111231"><span class="nick" style="color:#6d2462"><a href="#111231" label="[11:12:31]">&lt;fossy&gt;</a></span><span class="message">jeez copy pasting PDFs screws up spaces</span></div><div class="line" id="111429"><span class="nick" style="color:#8dd3c7"><a href="#111429" label="[11:14:29]">&lt;stikonas&gt;</a></span><span class="message">fossy: I don't think self-verifying is even theoretically possible</span></div><div class="line" id="111446"><span class="nick" style="color:#6d2462"><a href="#111446" label="[11:14:46]">&lt;fossy&gt;</a></span><span class="message">no i am thinking not</span></div><div class="line" id="111458"><span class="nick" style="color:#8dd3c7"><a href="#111458" label="[11:14:58]">&lt;stikonas&gt;</a></span><span class="message">that would go against Goedel's theorem which says no mathematical system containing arithmetic can prove its own consistency</span></div><div class="line" id="111508"><span class="nick" style="color:#8dd3c7"><a href="#111508" label="[11:15:08]">&lt;stikonas&gt;</a></span><span class="message">and bootstrapping definitely contains arithmetic</span></div><div class="line" id="111511"><span class="nick" style="color:#6d2462"><a href="#111511" label="[11:15:11]">&lt;fossy&gt;</a></span><span class="message">oh yeah</span></div><div class="line" id="111535"><span class="nick" style="color:#8dd3c7"><a href="#111535" label="[11:15:35]">&lt;stikonas&gt;</a></span><span class="message">so I think Coq cannot be formally verified using itself</span></div><div class="line" id="111731"><span class="nick" style="color:#80b1d3"><a href="#111731" label="[11:17:31]">&lt;siraben&gt;</a></span><span class="message">I'm just imagining a title of some paper on formally verifying a bootstrap be like, &quot;Trusting Trusting Trust&quot;</span></div><div class="line" id="111731"><span class="nick" style="color:#80b1d3"><a href="#111731" label="[11:17:31]">&lt;siraben&gt;</a></span><span class="message">fossy: hm, when was this paper written?</span></div><div class="line" id="111732"><span class="nick" style="color:#80b1d3"><a href="#111732" label="[11:17:32]">&lt;siraben&gt;</a></span><span class="message">&quot;However, this does not guarantee that our assumed semantics for that subset is the same as the compiler’s&quot;</span></div><div class="line" id="111733"><span class="nick" style="color:#80b1d3"><a href="#111733" label="[11:17:33]">&lt;siraben&gt;</a></span><span class="message">fossy: I should note that when I'm formally verifying C with <a rel="nofollow" href="https://vst.cs.princeton.edu">https://vst.cs.princeton.edu</a>  , they highly recommend to use CompCert, which is verified to preserve the C semantics</span></div><div class="line" id="111734"><span class="nick" style="color:#80b1d3"><a href="#111734" label="[11:17:34]">&lt;siraben&gt;</a></span><span class="message">looks like seL4 trusts the C compiler instead, which is reasonable considering how well-tested these compilers are</span></div><div class="line" id="111734"><span class="nick" style="color:#80b1d3"><a href="#111734" label="[11:17:34]">&lt;siraben&gt;</a></span><span class="message">I think you would need to clarify what you mean by self-verification, which is distinct from self-consistency</span></div><div class="line" id="111734"><span class="nick" style="color:#80b1d3"><a href="#111734" label="[11:17:34]">&lt;siraben&gt;</a></span><span class="message">but verification all the way is more ideal, of course</span></div><div class="line" id="111734"><span class="nick" style="color:#80b1d3"><a href="#111734" label="[11:17:34]">&lt;siraben&gt;</a></span><span class="message">Well, Coq cannot prove its own logical consistency within itself</span></div><div class="line" id="111734"><span class="nick" style="color:#80b1d3"><a href="#111734" label="[11:17:34]">&lt;siraben&gt;</a></span><span class="message">However, you can definitely prove a program correctly implements Coq's logic in Coq</span></div><div class="line" id="111734"><span class="nick" style="color:#80b1d3"><a href="#111734" label="[11:17:34]">&lt;siraben&gt;</a></span><span class="message">or, say, prove a compiler for Coq written in ASM correct</span></div><div class="line" id="111734"><span class="nick" style="color:#80b1d3"><a href="#111734" label="[11:17:34]">&lt;siraben&gt;</a></span><span class="message">hm, I probably need to think about this more as well</span></div><div class="line" id="111907"><span class="nick" style="color:#6d2462"><a href="#111907" label="[11:19:07]">&lt;fossy&gt;</a></span><span class="message">hm i havent heard of compcert i should look at that</span></div><div class="line" id="111931"><span class="nick" style="color:#8dd3c7"><a href="#111931" label="[11:19:31]">&lt;stikonas&gt;</a></span><span class="message">although, compcert is non-commercial only</span></div><div class="line" id="111938"><span class="nick" style="color:#8dd3c7"><a href="#111938" label="[11:19:38]">&lt;stikonas&gt;</a></span><span class="message">so not foss...</span></div><div class="line" id="112155"><span class="nick" style="color:#80b1d3"><a href="#112155" label="[11:21:55]">&lt;siraben&gt;</a></span><span class="message">bootstrapping feels different from completeness in logic</span></div><div class="line" id="112156"><span class="nick" style="color:#80b1d3"><a href="#112156" label="[11:21:56]">&lt;siraben&gt;</a></span><span class="message">fossy: yeah, it's interesting. I haven't tried using it to compile our C files, it should work</span></div><div class="line" id="112156"><span class="nick" style="color:#80b1d3"><a href="#112156" label="[11:21:56]">&lt;siraben&gt;</a></span><span class="message">yeah the licensing is not (totally) free unfortunately</span></div><div class="line" id="112156"><span class="nick" style="color:#80b1d3"><a href="#112156" label="[11:21:56]">&lt;siraben&gt;</a></span><span class="message">stikonas: yeah funnily enough, we have the trusting trust issue in math but &quot;upwards&quot;, you can show Peano Arithmetic to be consistent, but you need a stronger theory to show it (e.g. ZFC), but then to show ZFC consistent, you need yet another stronger theory, etc.</span></div><div class="line" id="112221"><span class="nick" style="color:#8dd3c7"><a href="#112221" label="[11:22:21]">&lt;stikonas&gt;</a></span><span class="message">and that one has no lowest turtle...</span></div><div class="line" id="112225"><span class="nick" style="color:#80b1d3"><a href="#112225" label="[11:22:25]">&lt;siraben&gt;</a></span><span class="message">and you cannot use any of the less powerful logics to prove (bootstrap) any of the more powerful ones consistent, unlike how we can write a C compiler in asm</span></div><div class="line" id="112515"><span class="nick" style="color:#8dd3c7"><a href="#112515" label="[11:25:15]">&lt;stikonas&gt;</a></span><span class="message">you also can't have completeness (there will always be statements that are not provable in a given system)</span></div><div class="line" id="112522"><span class="nick" style="color:#80b1d3"><a href="#112522" label="[11:25:22]">&lt;siraben&gt;</a></span><span class="message">(and yes, there are already well-known statements that cannot be proven in ZFC, so you need to augment ZFC with more axioms)</span></div><div class="line" id="112524"><span class="nick" style="color:#80b1d3"><a href="#112524" label="[11:25:24]">&lt;siraben&gt;</a></span><span class="message">Right.</span></div><div class="line" id="112543"><span class="nick" style="color:#80b1d3"><a href="#112543" label="[11:25:43]">&lt;siraben&gt;</a></span><span class="message">well-known statements such as the continuum hypothesis (is there a set with cardinality between the natural numbers and reals?) is independent of ZFC</span></div><div class="line" id="112647"><span class="nick" style="color:#8dd3c7"><a href="#112647" label="[11:26:47]">&lt;stikonas&gt;</a></span><span class="message">exactly...</span></div><div class="line" id="113047"><span class="nick" style="color:#80b1d3"><a href="#113047" label="[11:30:47]">&lt;siraben&gt;</a></span><span class="message">but, as I said, we're not trying to prove Coq consistent within itself, rather, that X program correctly interprets/compiles Coq's type theory, which is entirely possible</span></div><div class="line" id="113324"><span class="nick" style="color:#80b1d3"><a href="#113324" label="[11:33:24]">&lt;siraben&gt;</a></span><span class="message">OCaml has been bootstrapped right?</span></div><div class="line" id="113439"><span class="nick" style="color:#8dd3c7"><a href="#113439" label="[11:34:39]">&lt;stikonas&gt;</a></span><span class="message">siraben: one version was</span></div><div class="line" id="113507"><span class="nick" style="color:#8dd3c7"><a href="#113507" label="[11:35:07]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="http://gallium.inria.fr/~scherer/drafts/camlboot.pdf">http://gallium.inria.fr/~scherer/drafts/camlboot.pdf</a> </span></div><div class="line" id="113542"><span class="nick" style="color:#8dd3c7"><a href="#113542" label="[11:35:42]">&lt;stikonas&gt;</a></span><span class="message">it's really slow but oh well....</span></div><div class="line" id="114459"><span class="nick" style="color:#80b1d3"><a href="#114459" label="[11:44:59]">&lt;siraben&gt;</a></span><span class="message">stikonas: ah, nice</span></div><div class="line" id="114507"><span class="nick" style="color:#80b1d3"><a href="#114507" label="[11:45:07]">&lt;siraben&gt;</a></span><span class="message">unfortunate regarding the situation for Haskell</span></div><div class="line" id="120155"><span class="nick" style="color:#6d2462"><a href="#120155" label="[12:01:55]">&lt;fossy&gt;</a></span><span class="message">oh that paper expresses my thoughts on DDC well btw</span></div><div class="line" id="120211"><span class="nick" style="color:#6d2462"><a href="#120211" label="[12:02:11]">&lt;fossy&gt;</a></span><span class="message">we can use DDC to prove our systems are not suspect to trusting trust</span></div><div class="line" id="121323"><span class="nick" style="color:#80b1d3"><a href="#121323" label="[12:13:23]">&lt;siraben&gt;</a></span><span class="message">I'd need to do more reading on DDC and its proof</span></div><div class="line" id="121336"><span class="nick" style="color:#6c3d55"><a href="#121336" label="[12:13:36]">&lt;rekado&gt;</a></span><span class="message">I feel that we(TM) should upgrade what’s presented on the bootstrappable.org website</span></div><div class="line" id="121506"><span class="nick" style="color:#80b1d3"><a href="#121506" label="[12:15:06]">&lt;siraben&gt;</a></span><span class="message">oriansj: I'm attempting a rebase on blynn's master, <a rel="nofollow" href="https://github.com/siraben/compiler/tree/rebase-2021-06">https://github.com/siraben/compiler/tree/rebase-2021-06</a>  but I'm encountering some nasty makefile conflicts</span></div><div class="line" id="121741"><span class="nick" style="color:#80b1d3"><a href="#121741" label="[12:17:41]">&lt;siraben&gt;</a></span><span class="message">I'll let you know if it goes successfully</span></div><div class="line" id="134759"><span class="nick" style="color:#af8d2f"><a href="#134759" label="[13:47:59]">&lt;oriansj&gt;</a></span><span class="message">rekado: liked the article, it is a little behind on the current state of the art but other than that it appears quite good. The author should be proud.</span></div><div class="line" id="135033"><span class="nick" style="color:#8dd3c7"><a href="#135033" label="[13:50:33]">&lt;stikonas&gt;</a></span><span class="message">danderson: ^</span></div><div class="line" id="135324"><span class="nick" style="color:#af8d2f"><a href="#135324" label="[13:53:24]">&lt;oriansj&gt;</a></span><span class="message">danderson: thank you for writing the article. I enjoyed it.</span></div><div class="line" id="140112"><span class="nick" style="color:#af8d2f"><a href="#140112" label="[14:01:12]">&lt;oriansj&gt;</a></span><span class="message">formal verification of hex0, hex1, hex2, M0 and M1 should be relatively trivial. cc_* would be harder but I do avoid all of the fuzzy parts of C (and make explicitly different choices in a few cases)</span></div><div class="line" id="144302"><span class="nick" style="color:#80b1d3"><a href="#144302" label="[14:43:02]">&lt;siraben&gt;</a></span><span class="message">oriansj: how should we handle the rebase?</span></div><div class="line" id="144311"><span class="nick" style="color:#80b1d3"><a href="#144311" label="[14:43:11]">&lt;siraben&gt;</a></span><span class="message">I'm currently fixing the first merge conflict</span></div><div class="line" id="152200"><span class="nick" style="color:#80b1d3"><a href="#152200" label="[15:22:00]">&lt;siraben&gt;</a></span><span class="message">I was wondering if we should cherry-pick or merge commits instead</span></div><div class="line" id="154335"><span class="nick" style="color:#80b1d3"><a href="#154335" label="[15:43:35]">&lt;siraben&gt;</a></span><span class="message">Ok, rebased.</span></div><div class="line" id="155232"><span class="nick" style="color:#80b1d3"><a href="#155232" label="[15:52:32]">&lt;siraben&gt;</a></span><span class="message">Rewriting history feels weird in this scenario</span></div><div class="line" id="161855"><span class="nick">***</span><span class="message notice">jackhill_ is now known as jackhill</span></div><div class="line" id="165521"><span class="nick">***</span><span class="message notice">orionwl is now known as laanwj</span></div><div class="line" id="173412"><span class="nick" style="color:#389600"><a href="#173412" label="[17:34:12]">&lt;xentrac&gt;</a></span><span class="message">sometimes what helps or hurts formal verification can be very counterintuitive; the most practical approach is usually to develop the program at the same time as your proof so that you can avoid areas where your proof assistant is weak</span></div><div class="line" id="173428"><span class="nick" style="color:#389600"><a href="#173428" label="[17:34:28]">&lt;xentrac&gt;</a></span><span class="message">...or so I've heard</span></div><div class="line" id="173437"><span class="nick" style="color:#389600"><a href="#173437" label="[17:34:37]">&lt;xentrac&gt;</a></span><span class="message">03:24 &lt;@oriansj&gt; So no private sector company with a brain is going to hire a former State of Michigan  Programmer who was terminated.</span></div><div class="line" id="173542"><span class="nick" style="color:#389600"><a href="#173542" label="[17:35:42]">&lt;xentrac&gt;</a></span><span class="message">this is remarkably black-or-white thinking.  perhaps 50% of private-sector companies would, or perhaps 10%, or perhaps 5%, or perhaps 1%, but 0% is vanishingly unlikely</span></div><div class="line" id="174014"><span class="nick" style="color:#2e2a4a"><a href="#174014" label="[17:40:14]">&lt;Hagfish&gt;</a></span><span class="message">perhaps he's saying that in practice, you should make your decisions as if it were 0%, but yes, that does leave some room for debate</span></div><div class="line" id="174026"><span class="nick" style="color:#2e2a4a"><a href="#174026" label="[17:40:26]">&lt;Hagfish&gt;</a></span><span class="message"> <a rel="nofollow" href="https://news.ycombinator.com/item?id=27573618">https://news.ycombinator.com/item?id=27573618</a> </span></div><div class="line" id="174028"><span class="nick" style="color:#389600"><a href="#174028" label="[17:40:28]">&lt;xentrac&gt;</a></span><span class="message">there's enough programmer jobs out there that probably it's closer to 50%</span></div><div class="line" id="174050"><span class="nick" style="color:#2e2a4a"><a href="#174050" label="[17:40:50]">&lt;Hagfish&gt;</a></span><span class="message">well, i don't know what the job market is like in Michigan, but you're probably right</span></div><div class="line" id="174107"><span class="nick" style="color:#389600"><a href="#174107" label="[17:41:07]">&lt;xentrac&gt;</a></span><span class="message">I don't think his intern is making decisions in a manner that closely approximates rationality</span></div><div class="line" id="174128"><span class="nick" style="color:#2e2a4a"><a href="#174128" label="[17:41:28]">&lt;Hagfish&gt;</a></span><span class="message">true, but they also apparently weren't able to get a job anywhere better paid</span></div><div class="line" id="174154"><span class="nick" style="color:#389600"><a href="#174154" label="[17:41:54]">&lt;xentrac&gt;</a></span><span class="message">now she has four years of experience</span></div><div class="line" id="174231"><span class="nick" style="color:#2e2a4a"><a href="#174231" label="[17:42:31]">&lt;Hagfish&gt;</a></span><span class="message">i'm not sure what a former employer is allowed to say about the circumstances of an employee leaving their service</span></div><div class="line" id="174235"><span class="nick" style="color:#80b1d3"><a href="#174235" label="[17:42:35]">&lt;siraben&gt;</a></span><span class="message">xentrac: yeah, such a parallel development is very useful</span></div><div class="line" id="174247"><span class="nick" style="color:#80b1d3"><a href="#174247" label="[17:42:47]">&lt;siraben&gt;</a></span><span class="message">even better if you can derive the program directly from the spec</span></div><div class="line" id="174353"><span class="nick" style="color:#389600"><a href="#174353" label="[17:43:53]">&lt;xentrac&gt;</a></span><span class="message">I should be clear that my experience with formal methods is limited to watching introductory Coq videos though</span></div><div class="line" id="181558"><span class="nick" style="color:#af8d2f"><a href="#181558" label="[18:15:58]">&lt;oriansj&gt;</a></span><span class="message">xentrac: possibly correct but also remember they were assigned to the only project I got approved for public development and distribution: <a rel="nofollow" href="https://github.com/oriansj-som/Modified-Adjusted-Gross-Income-eligibility">https://github.com/oriansj-som/Modified-Adjusted-Gross-Income-eligibility</a>  so you'll be able to see exactly what they managed to achieve in that time frame.</span></div><div class="line" id="181828"><span class="nick" style="color:#af8d2f"><a href="#181828" label="[18:18:28]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/toniwats">https://github.com/toniwats</a> </span></div><div class="line" id="182148"><span class="nick" style="color:#af8d2f"><a href="#182148" label="[18:21:48]">&lt;oriansj&gt;</a></span><span class="message">So the only public code they have shows 2+ days to produce a 47 line delta with them just writing a single test case for a single rule</span></div><div class="line" id="182724"><span class="nick" style="color:#af8d2f"><a href="#182724" label="[18:27:24]">&lt;oriansj&gt;</a></span><span class="message">The python3 code is the level of complexity involved (eg simple and trivial) <a rel="nofollow" href="https://github.com/oriansj-som/Modified-Adjusted-Gross-Income-eligibility/blob/master/rules/MAGI-Children-NewBorn.py">https://github.com/oriansj-som/Modified-Adjusted-Gross-Income-eligibility/blob/master/rules/MAGI-Children-NewBorn.py</a> </span></div><div class="line" id="182856"><span class="nick" style="color:#af8d2f"><a href="#182856" label="[18:28:56]">&lt;oriansj&gt;</a></span><span class="message">All of the rules are described in detail with examples. The assigned task was write up the rules in executable form (such as the example above) and add an automatic test case.</span></div><div class="line" id="182915"><span class="nick" style="color:#389600"><a href="#182915" label="[18:29:15]">&lt;xentrac&gt;</a></span><span class="message">yeah, to me that sounds more like she wasn't working on the project, rather than that she was working furiously on it but just found it was beyond her capacity</span></div><div class="line" id="183024"><span class="nick" style="color:#af8d2f"><a href="#183024" label="[18:30:24]">&lt;oriansj&gt;</a></span><span class="message">but no code or even tests written since Jan 8, 2019</span></div><div class="line" id="183224"><span class="nick" style="color:#af8d2f"><a href="#183224" label="[18:32:24]">&lt;oriansj&gt;</a></span><span class="message">So yeah, hence why unless massive improvements are made termination will hit her at her next quarterly review</span></div><div class="line" id="183247"><span class="nick" style="color:#389600"><a href="#183247" label="[18:32:47]">&lt;xentrac&gt;</a></span><span class="message">well, hopefully that will be healthy for her</span></div><div class="line" id="183320"><span class="nick" style="color:#af8d2f"><a href="#183320" label="[18:33:20]">&lt;oriansj&gt;</a></span><span class="message">xentrac: that I can't say but it isn't by problem to fix her life.</span></div><div class="line" id="183428"><span class="nick" style="color:#389600"><a href="#183428" label="[18:34:28]">&lt;xentrac&gt;</a></span><span class="message">right</span></div><div class="line" id="183431"><span class="nick" style="color:#389600"><a href="#183431" label="[18:34:31]">&lt;xentrac&gt;</a></span><span class="message">also hopefully ou'</span></div><div class="line" id="183436"><span class="nick" style="color:#389600"><a href="#183436" label="[18:34:36]">&lt;xentrac&gt;</a></span><span class="message">you'll get a better minion</span></div><div class="line" id="183743"><span class="nick" style="color:#af8d2f"><a href="#183743" label="[18:37:43]">&lt;oriansj&gt;</a></span><span class="message">well that we will see. As the project is estimated to save $12M/year (even if a private comany shows up and finishes it and sells support for $2M/year)</span></div><div class="line" id="183831"><span class="nick" style="color:#af8d2f"><a href="#183831" label="[18:38:31]">&lt;oriansj&gt;</a></span><span class="message">and there are only 104 more rules to implement.</span></div><div class="line" id="183847"><span class="nick" style="color:#389600"><a href="#183847" label="[18:38:47]">&lt;xentrac&gt;</a></span><span class="message">cool!</span></div><div class="line" id="184229"><span class="nick" style="color:#af8d2f"><a href="#184229" label="[18:42:29]">&lt;oriansj&gt;</a></span><span class="message">if only some business would be wise enough to send a Freedom of Information Request to get the Rules Document. And then they would be able in a short time provide a drop in replacement and pocket $2M/year in support costs for possibly 1-2 support personnel.</span></div><div class="line" id="184316"><span class="nick" style="color:#af8d2f"><a href="#184316" label="[18:43:16]">&lt;oriansj&gt;</a></span><span class="message">Oh and this tool would be a great product for the other 49 states too...</span></div><div class="line" id="191136"><span class="nick" style="color:#389600"><a href="#191136" label="[19:11:36]">&lt;xentrac&gt;</a></span><span class="message">sounds like a potentially risky business strategy, banking on State of Michigan middle managemers to give you information that reduces their headcount...</span></div><div class="line" id="191351"><span class="nick" style="color:#389600"><a href="#191351" label="[19:13:51]">&lt;xentrac&gt;</a></span><span class="message">and then buy your product even though that reduces their budget by US$10M/year</span></div><div class="line" id="191457"><span class="nick" style="color:#389600"><a href="#191457" label="[19:14:57]">&lt;xentrac&gt;</a></span><span class="message">I mean, I'm not saying it can't work, but you'd need to have a lot of confidence in your understanding of the internal workings of the bureaucracy to bet a lot of money on it</span></div><div class="line" id="210749"><span class="nick" style="color:#80b1d3"><a href="#210749" label="[21:07:49]">&lt;siraben&gt;</a></span><span class="message">oriansj: let me know what you think is the best approach to incorporate blynn's new commits to blynn-compiler</span></div><div class="line" id="211055"><span class="nick" style="color:#80b1d3"><a href="#211055" label="[21:10:55]">&lt;siraben&gt;</a></span><span class="message">xentrac: ok, I'm not a researcher or anything but I've gone through the first free volumes of Software Foundations and used Coq to verify some non-trivial results like Church-Rosser</span></div><div class="line" id="211115"><span class="nick" style="color:#80b1d3"><a href="#211115" label="[21:11:15]">&lt;siraben&gt;</a></span><span class="message">Still a noob at proof engineering (proving in the large) though</span></div><div class="line" id="211145"><span class="nick" style="color:#389600"><a href="#211145" label="[21:11:45]">&lt;xentrac&gt;</a></span><span class="message">siraben: you're about a hundred levels above me then ;)</span></div><div class="line" id="211221"><span class="nick" style="color:#80b1d3"><a href="#211221" label="[21:12:21]">&lt;siraben&gt;</a></span><span class="message">haha, like mathematics there's levels all the way up :P but I try</span></div><div class="line" id="213358"><span class="nick" style="color:#8dd3c7"><a href="#213358" label="[21:33:58]">&lt;danderson&gt;</a></span><span class="message">oriansj: thanks! I'm curious what things I missed in the state of the art. Is stage0&lt;&gt;mes integration further along than I thought?</span></div><div class="line" id="213651"><span class="nick" style="color:#8dd3c7"><a href="#213651" label="[21:36:51]">&lt;danderson&gt;</a></span><span class="message">and yes, an argument I made in the post (and subsequently on HN) is that a principled bootstrap is worth doing even if it's not (currently) tractable to take it all the way down to the hardware.</span></div><div class="line" id="214538"><span class="nick" style="color:#8dd3c7"><a href="#214538" label="[21:45:38]">&lt;stikonas&gt;</a></span><span class="message">danderson: I guess &quot;Currently, Mes is the bottom turtle.&quot;</span></div><div class="line" id="214606"><span class="nick" style="color:#8dd3c7"><a href="#214606" label="[21:46:06]">&lt;stikonas&gt;</a></span><span class="message">we can build Mes now</span></div><div class="line" id="214621"><span class="nick" style="color:#8dd3c7"><a href="#214621" label="[21:46:21]">&lt;stikonas&gt;</a></span><span class="message">kernel is the big missing piece now</span></div><div class="line" id="214622"><span class="nick" style="color:#8dd3c7"><a href="#214622" label="[21:46:22]">&lt;danderson&gt;</a></span><span class="message">right - I was going off Guix blog posts, and the impression from the Mes website that further work was still in progress</span></div><div class="line" id="214633"><span class="nick" style="color:#8dd3c7"><a href="#214633" label="[21:46:33]">&lt;danderson&gt;</a></span><span class="message">ah! Using stage0? Or some other bootstrap chain?</span></div><div class="line" id="214638"><span class="nick" style="color:#8dd3c7"><a href="#214638" label="[21:46:38]">&lt;stikonas&gt;</a></span><span class="message">stage0-posix</span></div><div class="line" id="214645"><span class="nick" style="color:#8dd3c7"><a href="#214645" label="[21:46:45]">&lt;stikonas&gt;</a></span><span class="message">but yes, stage0</span></div><div class="line" id="214709"><span class="nick" style="color:#8dd3c7"><a href="#214709" label="[21:47:09]">&lt;stikonas&gt;</a></span><span class="message">danderson: see <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst">https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst</a> </span></div><div class="line" id="214740"><span class="nick" style="color:#8dd3c7"><a href="#214740" label="[21:47:40]">&lt;danderson&gt;</a></span><span class="message">aha, fantastic. I was going off the stage0 code on savannah, so completely missed the stage0-posix stuff</span></div><div class="line" id="214802"><span class="nick" style="color:#8dd3c7"><a href="#214802" label="[21:48:02]">&lt;stikonas&gt;</a></span><span class="message">and it even doesn't use any pre-generated files</span></div><div class="line" id="214813"><span class="nick" style="color:#8dd3c7"><a href="#214813" label="[21:48:13]">&lt;stikonas&gt;</a></span><span class="message">such as configure script, bison parsers, etc...</span></div><div class="line" id="214838"><span class="nick" style="color:#8dd3c7"><a href="#214838" label="[21:48:38]">&lt;danderson&gt;</a></span><span class="message">lovely</span></div><div class="line" id="214849"><span class="nick" style="color:#8dd3c7"><a href="#214849" label="[21:48:49]">&lt;stikonas&gt;</a></span><span class="message">so starts a bit like guix, but later diverges quite a bit to bootstrap GNU autotools and Bison</span></div><div class="line" id="214915"><span class="nick" style="color:#8dd3c7"><a href="#214915" label="[21:49:15]">&lt;stikonas&gt;</a></span><span class="message">and also goes straight from TCC to GCC 4.0.4</span></div><div class="line" id="214953"><span class="nick" style="color:#8dd3c7"><a href="#214953" label="[21:49:53]">&lt;stikonas&gt;</a></span><span class="message">still, it's very nicely written, especially knowing that you only based it on Guix blog posts and didn't know some newer information</span></div><div class="line" id="215023"><span class="nick" style="color:#8dd3c7"><a href="#215023" label="[21:50:23]">&lt;danderson&gt;</a></span><span class="message">Thanks for the references! I have more to catch up on.</span></div><div class="line" id="215038"><span class="nick" style="color:#8dd3c7"><a href="#215038" label="[21:50:38]">&lt;stikonas&gt;</a></span><span class="message">danderson: I can also find some a bit out of date dependency graph</span></div><div class="line" id="215041"><span class="nick" style="color:#8dd3c7"><a href="#215041" label="[21:50:41]">&lt;stikonas&gt;</a></span><span class="message">for live-bootstrap</span></div><div class="line" id="215132"><span class="nick" style="color:#8dd3c7"><a href="#215132" label="[21:51:32]">&lt;stikonas&gt;</a></span><span class="message">source <a rel="nofollow" href="https://github.com/oriansj/talk-notes/blob/master/live-bootstrap.dot">https://github.com/oriansj/talk-notes/blob/master/live-bootstrap.dot</a>  and rendered <a rel="nofollow" href="https://stikonas.eu/files/bootstrap/live-bootstrap.svg">https://stikonas.eu/files/bootstrap/live-bootstrap.svg</a> </span></div><div class="line" id="215140"><span class="nick" style="color:#8dd3c7"><a href="#215140" label="[21:51:40]">&lt;danderson&gt;</a></span><span class="message">hm, so stage0-posix is named that way because it assumes a posix kernel already running, is that right?</span></div><div class="line" id="215141"><span class="nick" style="color:#8dd3c7"><a href="#215141" label="[21:51:41]">&lt;stikonas&gt;</a></span><span class="message">it's a bit out of date</span></div><div class="line" id="215147"><span class="nick" style="color:#8dd3c7"><a href="#215147" label="[21:51:47]">&lt;stikonas&gt;</a></span><span class="message">danderson: yes</span></div><div class="line" id="215154"><span class="nick" style="color:#8dd3c7"><a href="#215154" label="[21:51:54]">&lt;stikonas&gt;</a></span><span class="message">it used to be called mescc-tools-seed</span></div><div class="line" id="215206"><span class="nick" style="color:#8dd3c7"><a href="#215206" label="[21:52:06]">&lt;stikonas&gt;</a></span><span class="message">but was renamed to stage0-posix because it closely mirrors stage0 repository</span></div><div class="line" id="215209"><span class="nick" style="color:#8dd3c7"><a href="#215209" label="[21:52:09]">&lt;stikonas&gt;</a></span><span class="message">that is for knight vm</span></div><div class="line" id="215221"><span class="nick" style="color:#8dd3c7"><a href="#215221" label="[21:52:21]">&lt;danderson&gt;</a></span><span class="message">Got it.</span></div><div class="line" id="215246"><span class="nick" style="color:#8dd3c7"><a href="#215246" label="[21:52:46]">&lt;danderson&gt;</a></span><span class="message">I've been looking at SiFive's risc-v boards, and with the right jumper settings they can start executing user code almost immediately, with no imtermediate firmware. That seems like an interesting target for a bare metal stage0.</span></div><div class="line" id="215246"><span class="nick" style="color:#8dd3c7"><a href="#215246" label="[21:52:46]">&lt;stikonas&gt;</a></span><span class="message">but I guess you already more or less answered in your post how to use it. We first build some kernel on baremetal with stage0-&gt;M2-Planet</span></div><div class="line" id="215309"><span class="nick" style="color:#8dd3c7"><a href="#215309" label="[21:53:09]">&lt;stikonas&gt;</a></span><span class="message">although, at the moment simple POSIX kernel is a missing piece</span></div><div class="line" id="215310"><span class="nick" style="color:#8dd3c7"><a href="#215310" label="[21:53:10]">&lt;danderson&gt;</a></span><span class="message">although I suspect that stage0 would realistically go through tccboot to boot up a linux kernel and then jump over to stage0-posix</span></div><div class="line" id="215330"><span class="nick" style="color:#8dd3c7"><a href="#215330" label="[21:53:30]">&lt;stikonas&gt;</a></span><span class="message">bauen1 was looking a bit at it but I haven't seen him here for some time</span></div><div class="line" id="215343"><span class="nick" style="color:#8dd3c7"><a href="#215343" label="[21:53:43]">&lt;stikonas&gt;</a></span><span class="message">danderson: it doesn't have to be linux kernel</span></div><div class="line" id="215351"><span class="nick" style="color:#8dd3c7"><a href="#215351" label="[21:53:51]">&lt;stikonas&gt;</a></span><span class="message">can be something much simpler</span></div><div class="line" id="215400"><span class="nick" style="color:#8dd3c7"><a href="#215400" label="[21:54:00]">&lt;stikonas&gt;</a></span><span class="message">basically only processes and a few syscalls are needed</span></div><div class="line" id="215406"><span class="nick" style="color:#8dd3c7"><a href="#215406" label="[21:54:06]">&lt;stikonas&gt;</a></span><span class="message">oriansj remembers them better</span></div><div class="line" id="215421"><span class="nick" style="color:#8dd3c7"><a href="#215421" label="[21:54:21]">&lt;danderson&gt;</a></span><span class="message">oh, for sure. It's a question of what to prioritize: simplicity of the bootstrap code, or reusing existing source that can let us skip steps</span></div><div class="line" id="215434"><span class="nick" style="color:#8dd3c7"><a href="#215434" label="[21:54:34]">&lt;stikonas&gt;</a></span><span class="message">but early in the bootstrap it's mostly dealing with read/write to files in VFS and some stuff like waitpid</span></div><div class="line" id="215452"><span class="nick" style="color:#8dd3c7"><a href="#215452" label="[21:54:52]">&lt;stikonas&gt;</a></span><span class="message">fossy is also trying to insert tccboot somewhere in the live-bootstrap</span></div><div class="line" id="215454"><span class="nick" style="color:#8dd3c7"><a href="#215454" label="[21:54:54]">&lt;stikonas&gt;</a></span><span class="message">but it is tricky</span></div><div class="line" id="215459"><span class="nick" style="color:#8dd3c7"><a href="#215459" label="[21:54:59]">&lt;stikonas&gt;</a></span><span class="message">tccboot is not easy to build</span></div><div class="line" id="215516"><span class="nick" style="color:#8dd3c7"><a href="#215516" label="[21:55:16]">&lt;danderson&gt;</a></span><span class="message">yeah, tccboot looks like an interesting tech demo, but not easy to rely on</span></div><div class="line" id="215521"><span class="nick" style="color:#8dd3c7"><a href="#215521" label="[21:55:21]">&lt;stikonas&gt;</a></span><span class="message">so first we might insert building a kernel once we have gcc</span></div><div class="line" id="215700"><span class="nick" style="color:#8dd3c7"><a href="#215700" label="[21:57:00]">&lt;danderson&gt;</a></span><span class="message">yup, makes sense.</span></div><div class="line" id="215702"><span class="nick" style="color:#8dd3c7"><a href="#215702" label="[21:57:02]">&lt;stikonas&gt;</a></span><span class="message">anyway, stage0-posix kind of came up from pragmatic approach</span></div><div class="line" id="215705"><span class="nick" style="color:#8dd3c7"><a href="#215705" label="[21:57:05]">&lt;stikonas&gt;</a></span><span class="message">it's easy to run and test</span></div><div class="line" id="215713"><span class="nick" style="color:#8dd3c7"><a href="#215713" label="[21:57:13]">&lt;stikonas&gt;</a></span><span class="message">and is not hardware specific</span></div><div class="line" id="215716"><span class="nick" style="color:#8dd3c7"><a href="#215716" label="[21:57:16]">&lt;danderson&gt;</a></span><span class="message">Is there a list of kernel features that stage0-posix requires to function?</span></div><div class="line" id="215739"><span class="nick" style="color:#8dd3c7"><a href="#215739" label="[21:57:39]">&lt;danderson&gt;</a></span><span class="message">yup, for sure. Getting to a hardware-abstracted bootstrap as quickly as possible is hugely desirable</span></div><div class="line" id="215748"><span class="nick" style="color:#8dd3c7"><a href="#215748" label="[21:57:48]">&lt;stikonas&gt;</a></span><span class="message">well, it depends on the step. the later steps you look at , the more they need</span></div><div class="line" id="215819"><span class="nick" style="color:#8dd3c7"><a href="#215819" label="[21:58:19]">&lt;danderson&gt;</a></span><span class="message">Presumably, the first kernel would need enough to get up to gcc + compiling a better kernel, right?</span></div><div class="line" id="215833"><span class="nick" style="color:#8dd3c7"><a href="#215833" label="[21:58:33]">&lt;stikonas&gt;</a></span><span class="message">up to M2-Planet it's probably just exec file open/read/write stuff and waitpid</span></div><div class="line" id="215845"><span class="nick" style="color:#8dd3c7"><a href="#215845" label="[21:58:45]">&lt;stikonas&gt;</a></span><span class="message">oriansj: would be good if you can confirm this</span></div><div class="line" id="215849"><span class="nick" style="color:#8dd3c7"><a href="#215849" label="[21:58:49]">&lt;stikonas&gt;</a></span><span class="message">then mes needs a bit more stuff</span></div><div class="line" id="215907"><span class="nick" style="color:#8dd3c7"><a href="#215907" label="[21:59:07]">&lt;stikonas&gt;</a></span><span class="message">or at least up to tcc</span></div><div class="line" id="215920"><span class="nick" style="color:#8dd3c7"><a href="#215920" label="[21:59:20]">&lt;stikonas&gt;</a></span><span class="message">tcc is built much earlier</span></div><div class="line" id="215938"><span class="nick" style="color:#8dd3c7"><a href="#215938" label="[21:59:38]">&lt;stikonas&gt;</a></span><span class="message">later we use bash, so probably need more stuff</span></div><div class="line" id="215941"><span class="nick" style="color:#8dd3c7"><a href="#215941" label="[21:59:41]">&lt;stikonas&gt;</a></span><span class="message">pipes, etc...</span></div><div class="line" id="220105"><span class="nick" style="color:#8dd3c7"><a href="#220105" label="[22:01:05]">&lt;stikonas&gt;</a></span><span class="message">by the way, M2-Planet builds non-released version of mes, it's a bit simplified</span></div><div class="line" id="220118"><span class="nick" style="color:#8dd3c7"><a href="#220118" label="[22:01:18]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/mes-m2">https://github.com/oriansj/mes-m2</a> </span></div><div class="line" id="220130"><span class="nick" style="color:#8dd3c7"><a href="#220130" label="[22:01:30]">&lt;stikonas&gt;</a></span><span class="message">it actually breaks GCC support</span></div><div class="line" id="220208"><span class="nick" style="color:#8dd3c7"><a href="#220208" label="[22:02:08]">&lt;stikonas&gt;</a></span><span class="message">but that mes-m2 can then build tcc</span></div><div class="line" id="220215"><span class="nick" style="color:#8dd3c7"><a href="#220215" label="[22:02:15]">&lt;stikonas&gt;</a></span><span class="message">(and also meslibc)</span></div><div class="line" id="220257"><span class="nick" style="color:#8dd3c7"><a href="#220257" label="[22:02:57]">&lt;stikonas&gt;</a></span><span class="message">and live-bootstrap is also reproducible :), all binaries are checksumed</span></div><div class="line" id="220437"><span class="nick" style="color:#389600"><a href="#220437" label="[22:04:37]">&lt;xentrac&gt;</a></span><span class="message">danderson: niice, I didn't know that.  Unleashed?</span></div><div class="line" id="220527"><span class="nick" style="color:#8dd3c7"><a href="#220527" label="[22:05:27]">&lt;stikonas&gt;</a></span><span class="message">riscv is I guess an interesting target</span></div><div class="line" id="220537"><span class="nick" style="color:#8dd3c7"><a href="#220537" label="[22:05:37]">&lt;stikonas&gt;</a></span><span class="message">although, live-bootstrap will probably struggle at later stages</span></div><div class="line" id="220605"><span class="nick" style="color:#8dd3c7"><a href="#220605" label="[22:06:05]">&lt;stikonas&gt;</a></span><span class="message">mostly GCC 4.0.4 and Binutils 2.14</span></div><div class="line" id="220606"><span class="nick" style="color:#389600"><a href="#220606" label="[22:06:06]">&lt;xentrac&gt;</a></span><span class="message">I like riscv a lot.  qemu is apparently still the fastest risc-v implementation available outside China though?</span></div><div class="line" id="220610"><span class="nick" style="color:#8dd3c7"><a href="#220610" label="[22:06:10]">&lt;danderson&gt;</a></span><span class="message">xentrac: SiFive Unmatched and HiFive1 rev B</span></div><div class="line" id="220615"><span class="nick" style="color:#389600"><a href="#220615" label="[22:06:15]">&lt;xentrac&gt;</a></span><span class="message">neat!</span></div><div class="line" id="220623"><span class="nick" style="color:#8dd3c7"><a href="#220623" label="[22:06:23]">&lt;stikonas&gt;</a></span><span class="message">luckily, musl libc in live-bootstrap already supports riscv</span></div><div class="line" id="220625"><span class="nick" style="color:#389600"><a href="#220625" label="[22:06:25]">&lt;xentrac&gt;</a></span><span class="message">stikonas: it's hard to build those on 64-bit, or what?</span></div><div class="line" id="220640"><span class="nick" style="color:#8dd3c7"><a href="#220640" label="[22:06:40]">&lt;stikonas&gt;</a></span><span class="message">xentrac: they predate risc-v</span></div><div class="line" id="220644"><span class="nick" style="color:#389600"><a href="#220644" label="[22:06:44]">&lt;xentrac&gt;</a></span><span class="message">oh, they don't have assembly code for risc-v :)</span></div><div class="line" id="220646"><span class="nick" style="color:#8dd3c7"><a href="#220646" label="[22:06:46]">&lt;danderson&gt;</a></span><span class="message">Both of them, according to the software manual, have a boot selection DIP switch that you can set to immediately execute code from SPI flash</span></div><div class="line" id="220646"><span class="nick" style="color:#8dd3c7"><a href="#220646" label="[22:06:46]">&lt;stikonas&gt;</a></span><span class="message">so you'll have to backport support from newer gcc</span></div><div class="line" id="220706"><span class="nick" style="color:#8dd3c7"><a href="#220706" label="[22:07:06]">&lt;stikonas&gt;</a></span><span class="message">there will probaby be other problems too, but those are the hardest</span></div><div class="line" id="220716"><span class="nick" style="color:#8dd3c7"><a href="#220716" label="[22:07:16]">&lt;danderson&gt;</a></span><span class="message">according to the manual, in that boot mode, the CPU executes exactly 6 instructions from ROM before jumping to user code.</span></div><div class="line" id="220736"><span class="nick" style="color:#8dd3c7"><a href="#220736" label="[22:07:36]">&lt;danderson&gt;</a></span><span class="message">and those 6 instructions are &quot;read the boot jumpers and jump to a mode-specific address&quot;</span></div><div class="line" id="220816"><span class="nick" style="color:#8dd3c7"><a href="#220816" label="[22:08:16]">&lt;danderson&gt;</a></span><span class="message">on the Unmatched, that boot mode is a little bit harsh, in that your code starts running with no access to DRAM, since you skipped the firmware that initializes the memory controller :)</span></div><div class="line" id="220853"><span class="nick" style="color:#8dd3c7"><a href="#220853" label="[22:08:53]">&lt;danderson&gt;</a></span><span class="message">But I _think_ the memory controller interface is documented, so it should be possible to reimplement DRAM bringup</span></div><div class="line" id="220951"><span class="nick" style="color:#8dd3c7"><a href="#220951" label="[22:09:51]">&lt;danderson&gt;</a></span><span class="message">and the CPU codes have 8k of SRAM built in. In normal use it's meant for realtime applications to have deterministic memory access time, but it gives you a lot of breathing room to get DRAM up and running.</span></div><div class="line" id="220954"><span class="nick" style="color:#8dd3c7"><a href="#220954" label="[22:09:54]">&lt;stikonas&gt;</a></span><span class="message">well, that's what U-boot does on some arm boards</span></div><div class="line" id="220957"><span class="nick" style="color:#8dd3c7"><a href="#220957" label="[22:09:57]">&lt;danderson&gt;</a></span><span class="message">CPU cores*</span></div><div class="line" id="221020"><span class="nick" style="color:#8dd3c7"><a href="#221020" label="[22:10:20]">&lt;stikonas&gt;</a></span><span class="message">I have rockpro64 which also starts with RAM uninitialized. It only has access to SRAM</span></div><div class="line" id="221050"><span class="nick" style="color:#8dd3c7"><a href="#221050" label="[22:10:50]">&lt;danderson&gt;</a></span><span class="message">stikonas: yeah, in normal operation the CPUs jump to U-Boot SPL, which initializes DRAM and switches the clock speed out of the slow reset mode</span></div><div class="line" id="221110"><span class="nick" style="color:#389600"><a href="#221110" label="[22:11:10]">&lt;xentrac&gt;</a></span><span class="message">danderson: that sounds right.  and 8K is a very generous fixed point with which to move the earth</span></div><div class="line" id="221121"><span class="nick" style="color:#8dd3c7"><a href="#221121" label="[22:11:21]">&lt;danderson&gt;</a></span><span class="message">Depending on how strict you want to be about not depending on firmware, you could jump through u-boot SPL and end up with a much more usable machine to bootstrap on</span></div><div class="line" id="221144"><span class="nick" style="color:#8dd3c7"><a href="#221144" label="[22:11:44]">&lt;danderson&gt;</a></span><span class="message">iiuc, the SPL part is burned into mask ROM, so you could choose to view it as part of the hardware.</span></div><div class="line" id="221226"><span class="nick" style="color:#8dd3c7"><a href="#221226" label="[22:12:26]">&lt;stikonas&gt;</a></span><span class="message">yeah, it's always unclear where hardware stops and software starts</span></div><div class="line" id="221316"><span class="nick" style="color:#8dd3c7"><a href="#221316" label="[22:13:16]">&lt;danderson&gt;</a></span><span class="message">yeah. I think there's a decent argument for mask ROM being hardware. It's just leveraging the general-purpose transistors to do a bit of initialization that it could do as a bespoke hardware state machine, if it wanted to.</span></div><div class="line" id="221323"><span class="nick" style="color:#8dd3c7"><a href="#221323" label="[22:13:23]">&lt;stikonas&gt;</a></span><span class="message">especially since modern hardware is not hand manufactured but programmed...</span></div><div class="line" id="221401"><span class="nick" style="color:#8dd3c7"><a href="#221401" label="[22:14:01]">&lt;danderson&gt;</a></span><span class="message">I think that's the hair that GPLv3 splits as well: if the firmware is non-replaceable, it's just a weirdly-shaped piece of hardware, and so is out of scope for replacing.</span></div><div class="line" id="221403"><span class="nick" style="color:#3c5b35"><a href="#221403" label="[22:14:03]">*</a></span><span class="message">xentrac starts sewing core rope ROM</span></div><div class="line" id="221438"><span class="nick" style="color:#8dd3c7"><a href="#221438" label="[22:14:38]">&lt;danderson&gt;</a></span><span class="message">xentrac: you kid, but I've been tempted, just for the heck of it</span></div><div class="line" id="221438"><span class="nick" style="color:#8dd3c7"><a href="#221438" label="[22:14:38]">&lt;stikonas&gt;</a></span><span class="message">well, they used core memory for apollo...</span></div><div class="line" id="221602"><span class="nick" style="color:#8dd3c7"><a href="#221602" label="[22:16:02]">&lt;danderson&gt;</a></span><span class="message">build a computer out of discrete transistors, core rope ROM, magnetic core RAM, and so forth</span></div><div class="line" id="221610"><span class="nick" style="color:#8dd3c7"><a href="#221610" label="[22:16:10]">&lt;danderson&gt;</a></span><span class="message">run at a blazing amount of seconds per instruction</span></div><div class="line" id="221643"><span class="nick" style="color:#389600"><a href="#221643" label="[22:16:43]">&lt;xentrac&gt;</a></span><span class="message">danderson: no, you can go a lot faster than that</span></div><div class="line" id="221737"><span class="nick" style="color:#8dd3c7"><a href="#221737" label="[22:17:37]">&lt;danderson&gt;</a></span><span class="message">Sure, I was being facetious. Kilohertz should be easy. Getting to MHz might be a challenge though</span></div><div class="line" id="221746"><span class="nick" style="color:#389600"><a href="#221746" label="[22:17:46]">&lt;xentrac&gt;</a></span><span class="message">incidentally I think you can get JLCPCB to build a computer out of discrete transistors for you for about US$256</span></div><div class="line" id="221808"><span class="nick" style="color:#389600"><a href="#221808" label="[22:18:08]">&lt;xentrac&gt;</a></span><span class="message">the details are in text/pick-and-place.md in Dernocua</span></div><div class="line" id="221832"><span class="nick" style="color:#389600"><a href="#221832" label="[22:18:32]">&lt;xentrac&gt;</a></span><span class="message"> <a rel="nofollow" href="http://canonical.org/~kragen/dernocua.git/">http://canonical.org/~kragen/dernocua.git/</a> </span></div><div class="line" id="221914"><span class="nick" style="color:#389600"><a href="#221914" label="[22:19:14]">&lt;xentrac&gt;</a></span><span class="message">the Pineapple One apparently runs reliably at 500 kHz</span></div><div class="line" id="222012"><span class="nick" style="color:#389600"><a href="#222012" label="[22:20:12]">&lt;xentrac&gt;</a></span><span class="message">I think the way to go for this kind of thing is automated fabrication (which is what JLCPCB does) with manual verification</span></div><div class="line" id="222013"><span class="nick" style="color:#8dd3c7"><a href="#222013" label="[22:20:13]">&lt;danderson&gt;</a></span><span class="message">yup, though that's using logic gate ICs</span></div><div class="line" id="222031"><span class="nick" style="color:#8dd3c7"><a href="#222031" label="[22:20:31]">&lt;danderson&gt;</a></span><span class="message">there's also TraNOR, which is fully made out of discrete transistors, and can run at 7MHz</span></div><div class="line" id="222036"><span class="nick" style="color:#389600"><a href="#222036" label="[22:20:36]">&lt;xentrac&gt;</a></span><span class="message">yeah, using logic gate ICs my estimate is under US$32</span></div><div class="line" id="222043"><span class="nick" style="color:#389600"><a href="#222043" label="[22:20:43]">&lt;xentrac&gt;</a></span><span class="message">nice!</span></div><div class="line" id="222115"><span class="nick" style="color:#8dd3c7"><a href="#222115" label="[22:21:15]">&lt;danderson&gt;</a></span><span class="message">I say fully - it does use SRAM and EEPROM ICs</span></div><div class="line" id="222123"><span class="nick" style="color:#8dd3c7"><a href="#222123" label="[22:21:23]">&lt;danderson&gt;</a></span><span class="message">rather than build fully transistorized RAM and ROM :)</span></div><div class="line" id="222235"><span class="nick" style="color:#389600"><a href="#222235" label="[22:22:35]">&lt;xentrac&gt;</a></span><span class="message">yeah, I was gonna say, the vast majority of its transistors are in the ROM</span></div><div class="line" id="222440"><span class="nick" style="color:#389600"><a href="#222440" label="[22:24:40]">&lt;xentrac&gt;</a></span><span class="message">square-loop ferrite logic can run up to a few MHz too</span></div><div class="line" id="225154"><span class="nick" style="color:#6d2462"><a href="#225154" label="[22:51:54]">&lt;fossy&gt;</a></span><span class="message">&lt;danderson&gt; I've been looking at SiFive's risc-v boards, and with the right jumper settings they can start executing user code almost immediately, with no imtermediate firmware. That seems like an interesting target for a bare metal stage0.</span></div><div class="line" id="225201"><span class="nick" style="color:#6d2462"><a href="#225201" label="[22:52:01]">&lt;fossy&gt;</a></span><span class="message">Omg what</span></div><div class="line" id="225217"><span class="nick" style="color:#6d2462"><a href="#225217" label="[22:52:17]">&lt;fossy&gt;</a></span><span class="message">that would be a perfect target if it can be run firmwareless</span></div><div class="line" id="225255"><span class="nick" style="color:#8dd3c7"><a href="#225255" label="[22:52:55]">&lt;stikonas&gt;</a></span><span class="message">updating mes libc is a bit painful :(. All hashes change until you reach nex libc...</span></div><div class="line" id="225259"><span class="nick" style="color:#8dd3c7"><a href="#225259" label="[22:52:59]">&lt;stikonas&gt;</a></span><span class="message">*next libc</span></div><div class="line" id="225301"><span class="nick" style="color:#8dd3c7"><a href="#225301" label="[22:53:01]">&lt;danderson&gt;</a></span><span class="message">yeah, see MSEL dip switches in the manual. One setting makes it jump straight to SPI flash instead of going through firmware</span></div><div class="line" id="225328"><span class="nick" style="color:#8dd3c7"><a href="#225328" label="[22:53:28]">&lt;danderson&gt;</a></span><span class="message">in that mode, only thing that runs before your code is 6 instructions to read the dip switch setting and compute the jump target</span></div><div class="line" id="225403"><span class="nick" style="color:#8dd3c7"><a href="#225403" label="[22:54:03]">&lt;stikonas&gt;</a></span><span class="message">but you still need to load instructions somehow into CPU? What method can you use there</span></div><div class="line" id="225435"><span class="nick" style="color:#8dd3c7"><a href="#225435" label="[22:54:35]">&lt;danderson&gt;</a></span><span class="message">SPI flash is easy to bit-bang into. Make a programming jig out of a couple switches and transistors, and load the hex0 bytes in by hand</span></div><div class="line" id="225509"><span class="nick" style="color:#8dd3c7"><a href="#225509" label="[22:55:09]">&lt;danderson&gt;</a></span><span class="message">you'd need a modified hex0 that also brings up some of the GPIO pins to use as a parallele I/O bus for future inputs</span></div><div class="line" id="225521"><span class="nick" style="color:#6d2462"><a href="#225521" label="[22:55:21]">&lt;fossy&gt;</a></span><span class="message">yeah spi</span></div><div class="line" id="225814"><span class="nick" style="color:#8dd3c7"><a href="#225814" label="[22:58:14]">&lt;stikonas&gt;</a></span><span class="message">yeah, ok... well SPI is quite simple bus</span></div><div class="line" id="225817"><span class="nick" style="color:#389600"><a href="#225817" label="[22:58:17]">&lt;xentrac&gt;</a></span><span class="message">amusingly I abused sigrok's SPI decoder yesterday to decode PS/2 keyboard data</span></div><div class="line" id="225948"><span class="nick" style="color:#389600"><a href="#225948" label="[22:59:48]">&lt;xentrac&gt;</a></span><span class="message">the sigrok PS/2 decoder apparently doesn't decode the last byte in your capture, and I was using an Arduino Duemilanove as my &quot;logic analyzer&quot;, and it only has enough RAM for 20 milliseconds, so most of my captures only had one byte in them</span></div><div class="line" id="230117"><span class="nick" style="color:#389600"><a href="#230117" label="[23:01:17]">&lt;xentrac&gt;</a></span><span class="message">don't forget to debounce your switches</span></div><div class="line" id="230337"><span class="nick" style="color:#389600"><a href="#230337" label="[23:03:37]">&lt;xentrac&gt;</a></span><span class="message">(hmm, could you use SPI to manually load a 512-byte boot sector into an SD card?)</span></div><div class="line" id="230544"><span class="nick" style="color:#8dd3c7"><a href="#230544" label="[23:05:44]">&lt;danderson&gt;</a></span><span class="message">You should be able to, yeah. You need to fiddle with one of the other pins to select the right communication mode, but one of the modes is 4-bit SPI iirc</span></div><div class="line" id="230739"><span class="nick" style="color:#389600"><a href="#230739" label="[23:07:39]">&lt;xentrac&gt;</a></span><span class="message">the standard SD card mode is a 4-bit mode, but they also support a really-serial SPI mode</span></div><div class="line" id="230854"><span class="nick" style="color:#389600"><a href="#230854" label="[23:08:54]">&lt;xentrac&gt;</a></span><span class="message">although it might be more pleasant to use the 4-bit mode if you're setting the bits with DIP switches :)</span></div><div class="line" id="231905"><span class="nick" style="color:#8dd3c7"><a href="#231905" label="[23:19:05]">&lt;danderson&gt;</a></span><span class="message">yeah for manual entry, 4-bit mode seems preferable</span></div><div class="line" id="231919"><span class="nick" style="color:#8dd3c7"><a href="#231919" label="[23:19:19]">&lt;danderson&gt;</a></span><span class="message">if you have a fancier input device driving stuff, single-bit mode might be easier to hook up</span></div><div class="line" id="232019"><span class="nick" style="color:#389600"><a href="#232019" label="[23:20:19]">&lt;xentrac&gt;</a></span><span class="message">right</span></div><br /></div></body></html>