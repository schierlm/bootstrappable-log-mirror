<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-09-29.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="012552"><span class="nick" style="color:#8dd3c7"><a href="#012552" label="[01:25:52]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: so a post on bootstrapping from 2020, that doesn't think janneke's or mine is worth mentioning but somehow magically copies a bunch of content from rain1's wiki; so it probably isn't inspiration. But it might just be a copy post for karma mining.</span></div><div class="line" id="012728"><span class="nick" style="color:#8dd3c7"><a href="#012728" label="[01:27:28]">&lt;OriansJ`&gt;</a></span><span class="message">and the mention of <a rel="nofollow" href="https://github.com/nathell/lithium">https://github.com/nathell/lithium</a>  which can't even self-host as something related to bootstrapping is laughable.</span></div><div class="line" id="014711"><span class="nick" style="color:#2e2a4a"><a href="#014711" label="[01:47:11]">&lt;V&gt;</a></span><span class="message">that post literally has the [EDIT] buttons left in</span></div><div class="line" id="014728"><span class="nick" style="color:#2e2a4a"><a href="#014728" label="[01:47:28]">&lt;V&gt;</a></span><span class="message">that's some low effort plagiarism right there</span></div><div class="line" id="024503"><span class="nick" style="color:#6b8072"><a href="#024503" label="[02:45:03]">&lt;xentrac&gt;</a></span><span class="message">OriansJ`: in rain1's wiki it was inspiration; in golangnews someone copied and pasted the wiki page</span></div><div class="line" id="024542"><span class="nick" style="color:#6b8072"><a href="#024542" label="[02:45:42]">&lt;xentrac&gt;</a></span><span class="message">it's good that it links to the wiki; I thought the links were there but then couldn't find them when I went to look</span></div><div class="line" id="024602"><span class="nick" style="color:#6b8072"><a href="#024602" label="[02:46:02]">&lt;xentrac&gt;</a></span><span class="message">anyway I'm glad that people are copying the wiki but i wish they would give credit</span></div><div class="line" id="024653"><span class="nick" style="color:#80b1d3"><a href="#024653" label="[02:46:53]">*</a></span><span class="message">pabs3 comments this on the HN post</span></div><div class="line" id="031702"><span class="nick" style="color:#8dd3c7"><a href="#031702" label="[03:17:02]">&lt;OriansJ`&gt;</a></span><span class="message">would it be unfair to create a circular bootstrap rule for languages? aka a language isn't a valid bootstrapping language unless it is able to build a different high level langauge implementation capable of bootstrapping the original bootstrap language.</span></div><div class="line" id="031936"><span class="nick" style="color:#8dd3c7"><a href="#031936" label="[03:19:36]">&lt;OriansJ`&gt;</a></span><span class="message">it would of course imply that hex0 is a valid bootstrap language but M2-Planet will not be until mes-m2 is able to run MesCC and compile M2-Planet. (unless someone feels that M1 is a high level language)</span></div><div class="line" id="032428"><span class="nick" style="color:#6b8072"><a href="#032428" label="[03:24:28]">&lt;xentrac&gt;</a></span><span class="message">heh</span></div><div class="line" id="033449"><span class="nick" style="color:#8dd3c7"><a href="#033449" label="[03:34:49]">&lt;OriansJ`&gt;</a></span><span class="message">Ironically it would also disqualify common lisp and FORTH but scheme and C are valid thanks to janneke's work</span></div><div class="line" id="033632"><span class="nick" style="color:#8dd3c7"><a href="#033632" label="[03:36:32]">&lt;OriansJ`&gt;</a></span><span class="message">It also saves me from assemblers written in java, javascript and typescript</span></div><div class="line" id="033749"><span class="nick" style="color:#8dd3c7"><a href="#033749" label="[03:37:49]">&lt;OriansJ`&gt;</a></span><span class="message">although rekado found a bootstrapping path from C to Java, there is no Java to C compiler path that I have seen. and thus Java would not be a valid bootstrap language.</span></div><div class="line" id="033900"><span class="nick" style="color:#8dd3c7"><a href="#033900" label="[03:39:00]">&lt;OriansJ`&gt;</a></span><span class="message">There is no bootstrapping path to Haskell yet and thus would not be valid until someone fixed that and then implemented that language in Haskell.</span></div><div class="line" id="034011"><span class="nick" style="color:#8dd3c7"><a href="#034011" label="[03:40:11]">&lt;OriansJ`&gt;</a></span><span class="message">Ironically, Common Lisp is the language closest to bootstrapping Haskell but those people are pretty rare in the Guix community</span></div><div class="line" id="034057"><span class="nick" style="color:#8dd3c7"><a href="#034057" label="[03:40:57]">&lt;OriansJ`&gt;</a></span><span class="message">as there appears to be a weird divide between scheme and Common Lisp programmers that I just don't understand.</span></div><div class="line" id="034239"><span class="nick" style="color:#8dd3c7"><a href="#034239" label="[03:42:39]">&lt;OriansJ`&gt;</a></span><span class="message">although it would be insanely ironic is a Common Lisp programmer solved the Scheme bootstrap problem by bootstrapping Common Lisp from M2-Planet and then simply parsing psyntax.pp</span></div><div class="line" id="034544"><span class="nick" style="color:#8dd3c7"><a href="#034544" label="[03:45:44]">&lt;OriansJ`&gt;</a></span><span class="message">or a scheme compiler written in scheme, capable of running on mes-m2; capable of building MesCC into a binary that is able to build TCC.</span></div><div class="line" id="034821"><span class="nick" style="color:#8dd3c7"><a href="#034821" label="[03:48:21]">&lt;OriansJ`&gt;</a></span><span class="message">or someone could help with the M3 bootstrap by helping create a proper (cross-platform) linker and assembler; written in the M2-Planet C subset.</span></div><div class="line" id="045121"><span class="nick" style="color:#6b8072"><a href="#045121" label="[04:51:21]">&lt;xentrac&gt;</a></span><span class="message">hey, macro asm 4ever</span></div><div class="line" id="045226"><span class="nick" style="color:#6b8072"><a href="#045226" label="[04:52:26]">&lt;xentrac&gt;</a></span><span class="message">Erik Naggum and his vicious goons hated Scheme, and they took over comp.lang.lisp in the 1990s</span></div><div class="line" id="045322"><span class="nick" style="color:#6b8072"><a href="#045322" label="[04:53:22]">&lt;xentrac&gt;</a></span><span class="message">I think that's where the division came from</span></div><div class="line" id="114940"><span class="nick" style="color:#8dd3c7"><a href="#114940" label="[11:49:40]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: well macro-assemblers are just so much easier to make then assemblers without macros. Hell, only 1 keyword DEFINE and boom proper assembly for any reasonable architecture.</span></div><div class="line" id="123223"><span class="nick" style="color:#8dd3c7"><a href="#123223" label="[12:32:23]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: although looking at Erik Naggum; I can't help but notice a great deal written about his controversial nature could apply to me as well. but I do hope I didn't bring vicious behavior to this sacred place.</span></div><div class="line" id="183052"><span class="nick" style="color:#6b8072"><a href="#183052" label="[18:30:52]">&lt;xentrac&gt;</a></span><span class="message">OriansJ`: interesting about macro assemblers; I had thought it was a little more complex</span></div><div class="line" id="185827"><span class="nick" style="color:#8dd3c7"><a href="#185827" label="[18:58:27]">&lt;OriansJ`&gt;</a></span><span class="message">xentrac: M1/M0 is a line macro assembler and at 1,613 bytes in size for my stayle of x86 assembly (8,481 lines of assembly, definitions, copyright header, comments and etc) You'll see adding support for strings is more complex than adding support for line macros</span></div><div class="line" id="190319"><span class="nick" style="color:#6b8072"><a href="#190319" label="[19:03:19]">&lt;xentrac&gt;</a></span><span class="message">true!</span></div><div class="line" id="222234"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado</span></div><br /></div></body></html>