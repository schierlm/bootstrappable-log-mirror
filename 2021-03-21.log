<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-03-21.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="010916"><span class="nick" style="color:#8dd3c7"><a href="#010916" label="[01:09:16]">&lt;stikonas&gt;</a></span><span class="message">hmm, that bash 5.1 is a bit broken... I'll have a fix though</span></div><div class="line" id="021132"><span class="nick" style="color:#8dd3c7"><a href="#021132" label="[02:11:32]">&lt;stikonas&gt;</a></span><span class="message">fossy: are you up for another PR?</span></div><div class="line" id="021331"><span class="nick" style="color:#8dd3c7"><a href="#021331" label="[02:13:31]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/75">https://github.com/fosslinux/live-bootstrap/pull/75</a> </span></div><div class="line" id="021439"><span class="nick" style="color:#2e2a4a"><a href="#021439" label="[02:14:39]">&lt;fossy&gt;</a></span><span class="message">stikonas: if you don't mind, i'll do this one a bit more in-depth than some of the other simpler ones, as GCC 4.0.4 is a pretty big piece of software</span></div><div class="line" id="021442"><span class="nick" style="color:#2e2a4a"><a href="#021442" label="[02:14:42]">&lt;fossy&gt;</a></span><span class="message">but i will take a look today</span></div><div class="line" id="021514"><span class="nick" style="color:#8dd3c7"><a href="#021514" label="[02:15:14]">&lt;stikonas&gt;</a></span><span class="message">sure</span></div><div class="line" id="021522"><span class="nick" style="color:#8dd3c7"><a href="#021522" label="[02:15:22]">&lt;stikonas&gt;</a></span><span class="message">others can take a look too</span></div><div class="line" id="021752"><span class="nick" style="color:#8dd3c7"><a href="#021752" label="[02:17:52]">&lt;stikonas&gt;</a></span><span class="message">pder: ^^</span></div><div class="line" id="021809"><span class="nick" style="color:#8dd3c7"><a href="#021809" label="[02:18:09]">&lt;stikonas&gt;</a></span><span class="message">I still couldn't get dynamic linking to work, so static only for now</span></div><div class="line" id="021940"><span class="nick" style="color:#8dd3c7"><a href="#021940" label="[02:19:40]">&lt;stikonas&gt;</a></span><span class="message">(something was wrong with relocations when I tried dynamic linking)</span></div><div class="line" id="045543"><span class="nick" style="color:#6b8072"><a href="#045543" label="[04:55:43]">&lt;pder&gt;</a></span><span class="message">stikonas: nice work! will take a look soon</span></div><div class="line" id="051028"><span class="nick" style="color:#80b1d3"><a href="#051028" label="[05:10:28]">&lt;Hagfish&gt;</a></span><span class="message">timeout_in: 180m</span></div><div class="line" id="051048"><span class="nick" style="color:#80b1d3"><a href="#051048" label="[05:10:48]">&lt;Hagfish&gt;</a></span><span class="message">has it really increased in duration that much?</span></div><div class="line" id="051123"><span class="nick" style="color:#80b1d3"><a href="#051123" label="[05:11:23]">&lt;Hagfish&gt;</a></span><span class="message">i guess it takes as long as it takes and there's not much that can be done to optimise things without changing the upstream sources</span></div><div class="line" id="051411"><span class="nick" style="color:#80b1d3"><a href="#051411" label="[05:14:11]">&lt;Hagfish&gt;</a></span><span class="message">oh &quot;Rebuild GCC against latest musl.&quot;</span></div><div class="line" id="051423"><span class="nick" style="color:#80b1d3"><a href="#051423" label="[05:14:23]">&lt;Hagfish&gt;</a></span><span class="message">so there are two builds of gcc in there, that makes sense</span></div><div class="line" id="052016"><span class="nick" style="color:#80b1d3"><a href="#052016" label="[05:20:16]">&lt;Hagfish&gt;</a></span><span class="message">test -f /dev/null &amp;&amp; rm /dev/null &amp;&amp; mknod -m 666 /dev/null c 1 3</span></div><div class="line" id="052032"><span class="nick" style="color:#80b1d3"><a href="#052032" label="[05:20:32]">&lt;Hagfish&gt;</a></span><span class="message">what permissions do you need for doing stuff with dev/null like that?</span></div><div class="line" id="052213"><span class="nick" style="color:#80b1d3"><a href="#052213" label="[05:22:13]">&lt;Hagfish&gt;</a></span><span class="message">anyway, the PR looks great, from my limited understanding</span></div><div class="line" id="052348"><span class="nick" style="color:#80b1d3"><a href="#052348" label="[05:23:48]">&lt;Hagfish&gt;</a></span><span class="message">i guess there isn't any point trying to reduce the duplication between pass1.sh and pass2.sh using something like inheritance</span></div><div class="line" id="052415"><span class="nick" style="color:#80b1d3"><a href="#052415" label="[05:24:15]">&lt;Hagfish&gt;</a></span><span class="message">maybe if there was a pass3.sh then the &quot;rule of 3&quot; would encourage taking another look at that</span></div><div class="line" id="065510"><span class="nick">***</span><span class="message notice">mephista is now known as spicy_icecream</span></div><div class="line" id="070709"><span class="nick">***</span><span class="message notice">mephista is now known as spicy_icecream</span></div><div class="line" id="102721"><span class="nick" style="color:#6d2462"><a href="#102721" label="[10:27:21]">&lt;stikonas[m]&gt;</a></span><span class="message">Hagfish: it's much quicker on my machine. Anyway, ci was already taking 1h15 min...</span></div><div class="line" id="102813"><span class="nick" style="color:#6d2462"><a href="#102813" label="[10:28:13]">&lt;stikonas[m]&gt;</a></span><span class="message">You usually need root to manipulate device nodes</span></div><div class="line" id="112957"><span class="nick" style="color:#8dd3c7"><a href="#112957" label="[11:29:57]">&lt;stikonas&gt;</a></span><span class="message">fossy: hmm, a bit strange but bash checksum doesn't match in <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/75/checks?check_run_id=2157710513">https://github.com/fosslinux/live-bootstrap/pull/75/checks?check_run_id=2157710513</a> </span></div><div class="line" id="113014"><span class="nick" style="color:#8dd3c7"><a href="#113014" label="[11:30:14]">&lt;stikonas&gt;</a></span><span class="message">it seems to work on my system</span></div><div class="line" id="113059"><span class="nick" style="color:#8dd3c7"><a href="#113059" label="[11:30:59]">&lt;stikonas&gt;</a></span><span class="message">and this is actually the first bash build (before GCC)</span></div><div class="line" id="115524"><span class="nick" style="color:#2e2a4a"><a href="#115524" label="[11:55:24]">&lt;fossy&gt;</a></span><span class="message">stikonas: i am looking at that now. i just noticed also</span></div><div class="line" id="115548"><span class="nick" style="color:#2e2a4a"><a href="#115548" label="[11:55:48]">&lt;fossy&gt;</a></span><span class="message">i get this same checksum</span></div><div class="line" id="115555"><span class="nick" style="color:#2e2a4a"><a href="#115555" label="[11:55:55]">&lt;fossy&gt;</a></span><span class="message">checksums file seems to be correct</span></div><div class="line" id="115557"><span class="nick" style="color:#2e2a4a"><a href="#115557" label="[11:55:57]">&lt;fossy&gt;</a></span><span class="message">weirdd</span></div><div class="line" id="115604"><span class="nick" style="color:#8dd3c7"><a href="#115604" label="[11:56:04]">&lt;stikonas&gt;</a></span><span class="message">well, I think my gcc rebuild checksums don't match either (but that might be because of how I obtained them), so I'm rerunning it now and might force-push</span></div><div class="line" id="115612"><span class="nick" style="color:#8dd3c7"><a href="#115612" label="[11:56:12]">&lt;stikonas&gt;</a></span><span class="message">which will re-trigger CI</span></div><div class="line" id="115617"><span class="nick" style="color:#2e2a4a"><a href="#115617" label="[11:56:17]">&lt;fossy&gt;</a></span><span class="message">don't force push master</span></div><div class="line" id="115642"><span class="nick" style="color:#8dd3c7"><a href="#115642" label="[11:56:42]">&lt;stikonas&gt;</a></span><span class="message">no, to PR....</span></div><div class="line" id="115643"><span class="nick" style="color:#2e2a4a"><a href="#115643" label="[11:56:43]">&lt;fossy&gt;</a></span><span class="message">do you mean force push ur gcc branch to retrigger CI there</span></div><div class="line" id="115645"><span class="nick" style="color:#2e2a4a"><a href="#115645" label="[11:56:45]">&lt;fossy&gt;</a></span><span class="message">oh</span></div><div class="line" id="115647"><span class="nick" style="color:#2e2a4a"><a href="#115647" label="[11:56:47]">&lt;fossy&gt;</a></span><span class="message">cool</span></div><div class="line" id="115649"><span class="nick" style="color:#2e2a4a"><a href="#115649" label="[11:56:49]">&lt;fossy&gt;</a></span><span class="message">yeah do that</span></div><div class="line" id="115713"><span class="nick" style="color:#8dd3c7"><a href="#115713" label="[11:57:13]">&lt;stikonas&gt;</a></span><span class="message">yeah, I obviously wouldn't force push to published branch :D</span></div><div class="line" id="115722"><span class="nick" style="color:#2e2a4a"><a href="#115722" label="[11:57:22]">&lt;fossy&gt;</a></span><span class="message">:D</span></div><div class="line" id="115759"><span class="nick" style="color:#8dd3c7"><a href="#115759" label="[11:57:59]">&lt;stikonas&gt;</a></span><span class="message">I remember a couple of times people did it in my work... Usually that breaks more CI stuff than expected ...</span></div><div class="line" id="115820"><span class="nick" style="color:#2e2a4a"><a href="#115820" label="[11:58:20]">&lt;fossy&gt;</a></span><span class="message">hah</span></div><div class="line" id="115831"><span class="nick" style="color:#2e2a4a"><a href="#115831" label="[11:58:31]">&lt;fossy&gt;</a></span><span class="message">i cant really think of any time when it would be nessecary</span></div><div class="line" id="115838"><span class="nick" style="color:#2e2a4a"><a href="#115838" label="[11:58:38]">&lt;fossy&gt;</a></span><span class="message">maybe if there was secret data pushed?</span></div><div class="line" id="115844"><span class="nick" style="color:#2e2a4a"><a href="#115844" label="[11:58:44]">&lt;fossy&gt;</a></span><span class="message">or a massive file in commit history?</span></div><div class="line" id="115943"><span class="nick" style="color:#8dd3c7"><a href="#115943" label="[11:59:43]">&lt;stikonas&gt;</a></span><span class="message">no, just something minor (I guess thought quickly force push some minor fixed before anybody pulled)</span></div><div class="line" id="120741"><span class="nick" style="color:#8dd3c7"><a href="#120741" label="[12:07:41]">&lt;stikonas&gt;</a></span><span class="message">I wonder what we should do next...</span></div><div class="line" id="120756"><span class="nick" style="color:#8dd3c7"><a href="#120756" label="[12:07:56]">&lt;stikonas&gt;</a></span><span class="message">probably newer GCC... and maybe with C++</span></div><div class="line" id="120803"><span class="nick" style="color:#8dd3c7"><a href="#120803" label="[12:08:03]">&lt;stikonas&gt;</a></span><span class="message">at the moment it's C only...</span></div><div class="line" id="122259"><span class="nick" style="color:#8dd3c7"><a href="#122259" label="[12:22:59]">&lt;stikonas&gt;</a></span><span class="message">oh, maybe I can try to get newer libtool...</span></div><div class="line" id="122307"><span class="nick" style="color:#8dd3c7"><a href="#122307" label="[12:23:07]">&lt;stikonas&gt;</a></span><span class="message">after we merge gcc...</span></div><div class="line" id="132553"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado</span></div><div class="line" id="155743"><span class="nick" style="color:#8dd3c7"><a href="#155743" label="[15:57:43]">&lt;stikonas&gt;</a></span><span class="message">Hagfish: by the way, regarding timeout, it might be possible to optimize it if we redirect output to build logs...</span></div><div class="line" id="173727"><span class="nick" style="color:#6b8072"><a href="#173727" label="[17:37:27]">&lt;pder&gt;</a></span><span class="message">stikonas: do you think its best to stay with musl for now until a newer gcc is built or try to switch to glibc?</span></div><div class="line" id="173919"><span class="nick" style="color:#6b8072"><a href="#173919" label="[17:39:19]">&lt;pder&gt;</a></span><span class="message">Also, is bash 5.1 pass1 of any use or could it be delayed until after gcc?</span></div><div class="line" id="174147"><span class="nick" style="color:#6d2462"><a href="#174147" label="[17:41:47]">&lt;stikonas[m]&gt;</a></span><span class="message">I was not able to build c++ back end with musl</span></div><div class="line" id="174157"><span class="nick" style="color:#6d2462"><a href="#174157" label="[17:41:57]">&lt;stikonas[m]&gt;</a></span><span class="message">On GCC 4.0.4</span></div><div class="line" id="174210"><span class="nick" style="color:#6d2462"><a href="#174210" label="[17:42:10]">&lt;stikonas[m]&gt;</a></span><span class="message">So maybe we have to build glibc</span></div><div class="line" id="174231"><span class="nick" style="color:#6d2462"><a href="#174231" label="[17:42:31]">&lt;stikonas[m]&gt;</a></span><span class="message">But we might first update tar libtool</span></div><div class="line" id="174355"><span class="nick" style="color:#6d2462"><a href="#174355" label="[17:43:55]">&lt;stikonas[m]&gt;</a></span><span class="message">And I'll check bash.... Tcc miscompiled bash 5.1, so I had to rebuild</span></div><div class="line" id="174413"><span class="nick" style="color:#6d2462"><a href="#174413" label="[17:44:13]">&lt;stikonas[m]&gt;</a></span><span class="message">But older bash 3.2.57 seems to work</span></div><div class="line" id="174525"><span class="nick" style="color:#6d2462"><a href="#174525" label="[17:45:25]">&lt;stikonas[m]&gt;</a></span><span class="message">Or maybe we can remove it completely like you suggest...</span></div><div class="line" id="174644"><span class="nick" style="color:#6b8072"><a href="#174644" label="[17:46:44]">&lt;pder&gt;</a></span><span class="message">The only things you are building when you have tcc compiled bash 5.1 are automake-1.9.6 and gcc pass1</span></div><div class="line" id="174808"><span class="nick" style="color:#6b8072"><a href="#174808" label="[17:48:08]">&lt;pder&gt;</a></span><span class="message">In any case, this is really exciting progress</span></div><div class="line" id="175442"><span class="nick" style="color:#6d2462"><a href="#175442" label="[17:54:42]">&lt;stikonas[m]&gt;</a></span><span class="message">Yeah, probably can just remove it</span></div><div class="line" id="175528"><span class="nick" style="color:#6d2462"><a href="#175528" label="[17:55:28]">&lt;stikonas[m]&gt;</a></span><span class="message">Might have to remove use of RM file.{c,h} first</span></div><div class="line" id="180013"><span class="nick" style="color:#6b8072"><a href="#180013" label="[18:00:13]">&lt;pder&gt;</a></span><span class="message">In gcc pass1 I notice you run autoconf-2.61 in libmudflap directory but then disable it in configure.  Maybe not needed?</span></div><div class="line" id="180323"><span class="nick" style="color:#6b8072"><a href="#180323" label="[18:03:23]">&lt;pder&gt;</a></span><span class="message">I think CFLAGS should probably be changed to CPPFLAGS especially since we might soon have a c++ compiler</span></div><div class="line" id="180426"><span class="nick" style="color:#6b8072"><a href="#180426" label="[18:04:26]">&lt;pder&gt;</a></span><span class="message">And would want any preprocessor defines to apply to both gcc and g++</span></div><div class="line" id="180815"><span class="nick" style="color:#6b8072"><a href="#180815" label="[18:08:15]">&lt;pder&gt;</a></span><span class="message">in gcc pass1.sh line 69: should LIBGCC2_INCLUDES now be ${prefix}/include without the musl subdirectory?</span></div><div class="line" id="181157"><span class="nick" style="color:#6d2462"><a href="#181157" label="[18:11:57]">&lt;stikonas[m]&gt;</a></span><span class="message">Yeah, maybe not needed to run autoreconf but I thought better be safe</span></div><div class="line" id="181215"><span class="nick" style="color:#6d2462"><a href="#181215" label="[18:12:15]">&lt;stikonas[m]&gt;</a></span><span class="message">CPP flags didn't work for gcc</span></div><div class="line" id="181241"><span class="nick" style="color:#6d2462"><a href="#181241" label="[18:12:41]">&lt;stikonas[m]&gt;</a></span><span class="message">Oh libgcc includes indeed need adjustment</span></div><div class="line" id="181258"><span class="nick" style="color:#6d2462"><a href="#181258" label="[18:12:58]">&lt;stikonas[m]&gt;</a></span><span class="message">But I'm not even sure if it works</span></div><div class="line" id="181347"><span class="nick" style="color:#6d2462"><a href="#181347" label="[18:13:47]">&lt;stikonas[m]&gt;</a></span><span class="message">GCC was picking up mes headers</span></div><div class="line" id="181401"><span class="nick" style="color:#6d2462"><a href="#181401" label="[18:14:01]">&lt;stikonas[m]&gt;</a></span><span class="message">Hence that include move</span></div><div class="line" id="181604"><span class="nick" style="color:#6d2462"><a href="#181604" label="[18:16:04]">&lt;stikonas[m]&gt;</a></span><span class="message">Isn't it CXXFLAGS for C++?</span></div><div class="line" id="181652"><span class="nick" style="color:#6b8072"><a href="#181652" label="[18:16:52]">&lt;pder&gt;</a></span><span class="message">Yeah, CXXFLAGS are specific to C++ and CPPFLAGS apply to both C and C++ normally</span></div><div class="line" id="181804"><span class="nick" style="color:#6b8072"><a href="#181804" label="[18:18:04]">&lt;pder&gt;</a></span><span class="message">CPPFLAGS is for the preprocessor</span></div><div class="line" id="182103"><span class="nick" style="color:#6d2462"><a href="#182103" label="[18:21:03]">&lt;stikonas[m]&gt;</a></span><span class="message">Well, hopefully we won't need to tweak them too much manually</span></div><div class="line" id="182121"><span class="nick" style="color:#6d2462"><a href="#182121" label="[18:21:21]">&lt;stikonas[m]&gt;</a></span><span class="message">Especially if we build glibc</span></div><div class="line" id="183530"><span class="nick" style="color:#6d2462"><a href="#183530" label="[18:35:30]">&lt;stikonas[m]&gt;</a></span><span class="message">Even now we no longer need HAVE_ALLOCA_H....</span></div><div class="line" id="191111"><span class="nick" style="color:#6b8072"><a href="#191111" label="[19:11:11]">&lt;pder&gt;</a></span><span class="message">That's true.  I tested building bash 5.1 only after gcc and that works.</span></div><div class="line" id="191113"><span class="nick" style="color:#6b8072"><a href="#191113" label="[19:11:13]">&lt;pder&gt;</a></span><span class="message"> <a rel="nofollow" href="http://paste.debian.net/1190289/">http://paste.debian.net/1190289/</a> </span></div><div class="line" id="193557"><span class="nick" style="color:#8dd3c7"><a href="#193557" label="[19:35:57]">&lt;stikonas&gt;</a></span><span class="message">pder: thanks, I'll apply your patch...</span></div><div class="line" id="193838"><span class="nick" style="color:#8dd3c7"><a href="#193838" label="[19:38:38]">&lt;stikonas&gt;</a></span><span class="message">maybe it's also worth building bash after musl...</span></div><div class="line" id="193910"><span class="nick" style="color:#8dd3c7"><a href="#193910" label="[19:39:10]">&lt;stikonas&gt;</a></span><span class="message">for now we use static libraries, so it makes sense to build C library as early as possible</span></div><div class="line" id="194019"><span class="nick" style="color:#6b8072"><a href="#194019" label="[19:40:19]">&lt;pder&gt;</a></span><span class="message">that diff doesnt include renaming the checksum and making pass2 pass1.</span></div><div class="line" id="194044"><span class="nick" style="color:#8dd3c7"><a href="#194044" label="[19:40:44]">&lt;stikonas&gt;</a></span><span class="message">yeah, I'll test this locally</span></div><div class="line" id="194058"><span class="nick" style="color:#8dd3c7"><a href="#194058" label="[19:40:58]">&lt;stikonas&gt;</a></span><span class="message">I'm just back to my laptop today, so will not start running things</span></div><div class="line" id="201756"><span class="nick" style="color:#8dd3c7"><a href="#201756" label="[20:17:56]">&lt;stikonas&gt;</a></span><span class="message">hmm, messed up something: install: too few arguments</span></div><div class="line" id="201824"><span class="nick" style="color:#8dd3c7"><a href="#201824" label="[20:18:24]">&lt;stikonas&gt;</a></span><span class="message">oh, ${bindir} is not defined</span></div><div class="line" id="203841"><span class="nick" style="color:#8dd3c7"><a href="#203841" label="[20:38:41]">&lt;stikonas&gt;</a></span><span class="message">pder: do you think we should build tar 1.22?</span></div><div class="line" id="203849"><span class="nick" style="color:#8dd3c7"><a href="#203849" label="[20:38:49]">&lt;stikonas&gt;</a></span><span class="message">I think our autotools allows us to build it</span></div><div class="line" id="204023"><span class="nick" style="color:#8dd3c7"><a href="#204023" label="[20:40:23]">&lt;stikonas&gt;</a></span><span class="message">I guess we should rebuild at least tar, gawk, coreutils and libtool</span></div><div class="line" id="204030"><span class="nick" style="color:#8dd3c7"><a href="#204030" label="[20:40:30]">&lt;stikonas&gt;</a></span><span class="message">(maybe libtool later...)</span></div><div class="line" id="204544"><span class="nick" style="color:#6b8072"><a href="#204544" label="[20:45:44]">&lt;pder&gt;</a></span><span class="message">tar 1.22 definitely makes sense.  Current tar is from tcc-mes and old</span></div><div class="line" id="204622"><span class="nick" style="color:#6b8072"><a href="#204622" label="[20:46:22]">&lt;pder&gt;</a></span><span class="message">gawk and coreutils should be straightforward too I think</span></div><div class="line" id="205047"><span class="nick" style="color:#8dd3c7"><a href="#205047" label="[20:50:47]">&lt;stikonas&gt;</a></span><span class="message">yeah, although, we might want to build newer version</span></div><div class="line" id="205052"><span class="nick" style="color:#8dd3c7"><a href="#205052" label="[20:50:52]">&lt;stikonas&gt;</a></span><span class="message">not sure about gawk...</span></div><div class="line" id="205110"><span class="nick" style="color:#8dd3c7"><a href="#205110" label="[20:51:10]">&lt;stikonas&gt;</a></span><span class="message">well, for coreutils we can either go with 6 which we already have</span></div><div class="line" id="205123"><span class="nick" style="color:#8dd3c7"><a href="#205123" label="[20:51:23]">&lt;stikonas&gt;</a></span><span class="message">(just for sha256, not other things)</span></div><div class="line" id="222314"><span class="nick" style="color:#80b1d3"><a href="#222314" label="[22:23:14]">&lt;Hagfish&gt;</a></span><span class="message">i can't believe i hadn't heard of this before: <a rel="nofollow" href="https://docs.softwareheritage.org/devel/swh-model/persistent-identifiers.html">https://docs.softwareheritage.org/devel/swh-model/persistent-identifiers.html</a> </span></div><div class="line" id="222405"><span class="nick" style="color:#80b1d3"><a href="#222405" label="[22:24:05]">&lt;Hagfish&gt;</a></span><span class="message">maybe the bootstrap process should document the SWHIDs of each input</span></div><div class="line" id="222857"><span class="nick">***</span><span class="message notice">Noisytoot is now known as LPBot_</span></div><div class="line" id="222953"><span class="nick">***</span><span class="message notice">LPBot_ is now known as Noisytoot</span></div><div class="line" id="223556"><span class="nick" style="color:#80b1d3"><a href="#223556" label="[22:35:56]">&lt;Hagfish&gt;</a></span><span class="message">wow, and there's actually an implementation of an append-only log for signed software releases</span></div><div class="line" id="223559"><span class="nick" style="color:#80b1d3"><a href="#223559" label="[22:35:59]">&lt;Hagfish&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/sigstore/rekor">https://github.com/sigstore/rekor</a> </span></div><div class="line" id="224219"><span class="nick" style="color:#234e69"><a href="#224219" label="[22:42:19]">&lt;bauen1&gt;</a></span><span class="message">Hagfish: i've rambled a bit some time ago about how you can use a basic hash tree to skip reviews / reduce the code you need to review every time</span></div><div class="line" id="224332"><span class="nick" style="color:#80b1d3"><a href="#224332" label="[22:43:32]">&lt;Hagfish&gt;</a></span><span class="message">yeah, in theory it should help auditors focus on just the changed lines (although i'm sure there are clever malicious tricks that can be done by ignoring context)</span></div><div class="line" id="224340"><span class="nick" style="color:#234e69"><a href="#224340" label="[22:43:40]">&lt;bauen1&gt;</a></span><span class="message">and basically you don't need to do very advanced things (and you don't want to), every time you &quot;do&quot; the bootstrap you verify by hand that hex0, a small editor, maybe cat and a hash implementation are correct</span></div><div class="line" id="224418"><span class="nick" style="color:#80b1d3"><a href="#224418" label="[22:44:18]">&lt;Hagfish&gt;</a></span><span class="message">i guess if you trust the bootstrap code, then you trust its hashes</span></div><div class="line" id="224435"><span class="nick" style="color:#234e69"><a href="#224435" label="[22:44:35]">&lt;bauen1&gt;</a></span><span class="message">from a previous bootstrap you still (have remembered) the root hash of the tree and you copy the tree, verify that the root matches what you remembered and then you can verify that the hash of source code still matches what is in the tree before compiling</span></div><div class="line" id="224500"><span class="nick" style="color:#234e69"><a href="#224500" label="[22:45:00]">&lt;bauen1&gt;</a></span><span class="message">then you just go from there, if you need to change something of course the source code hash changes and you need to remember that</span></div><div class="line" id="224553"><span class="nick" style="color:#234e69"><a href="#224553" label="[22:45:53]">&lt;bauen1&gt;</a></span><span class="message">after you're finished you just need to remember e.g. a sha256 sum of your tree, and have a copy of the tree source some where you can access (but doesn't have to be secure)</span></div><div class="line" id="224712"><span class="nick" style="color:#80b1d3"><a href="#224712" label="[22:47:12]">&lt;Hagfish&gt;</a></span><span class="message">i'm not sure what the use case is for doing the bootstrap multiple times</span></div><div class="line" id="224812"><span class="nick" style="color:#234e69"><a href="#224812" label="[22:48:12]">&lt;bauen1&gt;</a></span><span class="message">Hagfish: perhaps you've created a small patch that removes the need for a component, you've lost confidence in your existing system (e.g. integrity comprimised one way or another)</span></div><div class="line" id="224832"><span class="nick" style="color:#234e69"><a href="#224832" label="[22:48:32]">&lt;bauen1&gt;</a></span><span class="message">or maybe you want to add additional checks along the way</span></div><div class="line" id="224917"><span class="nick" style="color:#80b1d3"><a href="#224917" label="[22:49:17]">&lt;Hagfish&gt;</a></span><span class="message">yeah, i guess it's useful when the bootstrap process itself is still being improved</span></div><div class="line" id="225047"><span class="nick" style="color:#234e69"><a href="#225047" label="[22:50:47]">&lt;bauen1&gt;</a></span><span class="message">Hagfish: you might also have to take a break in the bootstrap process because it's so long, and you don't want to loose your progress</span></div><div class="line" id="225158"><span class="nick" style="color:#234e69"><a href="#225158" label="[22:51:58]">&lt;bauen1&gt;</a></span><span class="message">and another scenario is that you have a trusted computer and a bit of trusted storage, but not enough for your entire source code, so you review it hash it add it to your tree and can grab the source code from an external medium (e.g. an http server) at a later time again without reviewing it</span></div><div class="line" id="225303"><span class="nick" style="color:#80b1d3"><a href="#225303" label="[22:53:03]">&lt;Hagfish&gt;</a></span><span class="message">it will be interesting to see what sort of constraints emerge when people try running the process on their hand-soldered machines :)</span></div><div class="line" id="225311"><span class="nick" style="color:#234e69"><a href="#225311" label="[22:53:11]">&lt;bauen1&gt;</a></span><span class="message">hehe</span></div><div class="line" id="225321"><span class="nick" style="color:#234e69"><a href="#225321" label="[22:53:21]">&lt;bauen1&gt;</a></span><span class="message">i'm sure you can find some smart ways around some of these problems too</span></div><div class="line" id="225631"><span class="nick" style="color:#234e69"><a href="#225631" label="[22:56:31]">&lt;bauen1&gt;</a></span><span class="message">also i'm seeing you're still making good progress (gcc 4 sounds very nice)</span></div><div class="line" id="225916"><span class="nick" style="color:#80b1d3"><a href="#225916" label="[22:59:16]">&lt;Hagfish&gt;</a></span><span class="message">yeah, gcc 4 is a fantastic milestone</span></div><div class="line" id="230125"><span class="nick" style="color:#80b1d3"><a href="#230125" label="[23:01:25]">&lt;Hagfish&gt;</a></span><span class="message">i'm not sure what would be a good &quot;finishing line&quot; where we could point at the work done by this community and say that a specific version of the bootstrapping problem has been solved</span></div><div class="line" id="230214"><span class="nick" style="color:#80b1d3"><a href="#230214" label="[23:02:14]">&lt;Hagfish&gt;</a></span><span class="message">to some extent the work will never be done, as more architectures are supported, and invented, but it's good to celebrate milestones</span></div><div class="line" id="230324"><span class="nick" style="color:#80b1d3"><a href="#230324" label="[23:03:24]">&lt;Hagfish&gt;</a></span><span class="message">i guess &quot;self-hosting&quot; might be such a well-understood milestone</span></div><div class="line" id="230440"><span class="nick" style="color:#80b1d3"><a href="#230440" label="[23:04:40]">&lt;Hagfish&gt;</a></span><span class="message">but there are questions about how basic you can make the host environment</span></div><div class="line" id="231109"><span class="nick" style="color:#8dd3c7"><a href="#231109" label="[23:11:09]">&lt;stikonas&gt;</a></span><span class="message">well, in any case this is minimal gcc 4 without C++. But I'm sure building more stuff will be significantly easier...</span></div><div class="line" id="231122"><span class="nick" style="color:#8dd3c7"><a href="#231122" label="[23:11:22]">&lt;stikonas&gt;</a></span><span class="message">even as C compiler, GCC should be significantly better</span></div><div class="line" id="231653"><span class="nick" style="color:#80b1d3"><a href="#231653" label="[23:16:53]">&lt;Hagfish&gt;</a></span><span class="message">there are probably still people out there running machines that only support gcc 4 without C++</span></div><div class="line" id="231729"><span class="nick" style="color:#80b1d3"><a href="#231729" label="[23:17:29]">&lt;Hagfish&gt;</a></span><span class="message">it would be interesting to know what approach they would take from here, but i'm hopeful the path ahead is no more complicated than the journey so far</span></div><div class="line" id="231739"><span class="nick" style="color:#234e69"><a href="#231739" label="[23:17:39]">&lt;bauen1&gt;</a></span><span class="message">&gt; The default GCC that comes with the CentOS 7.2 is GCC 4.8.5 (<a rel="nofollow" href="https://benjaminberhault.com/post/2018/06/22/install-gcc-on-rhel-centos-7.html">https://benjaminberhault.com/post/2018/06/22/install-gcc-on-rhel-centos-7.html</a>) </span></div><div class="line" id="231836"><span class="nick" style="color:#8dd3c7"><a href="#231836" label="[23:18:36]">&lt;stikonas&gt;</a></span><span class="message">4.8.5 though is significantly newer...</span></div><div class="line" id="231847"><span class="nick" style="color:#234e69"><a href="#231847" label="[23:18:47]">&lt;bauen1&gt;</a></span><span class="message">ugh</span></div><div class="line" id="231858"><span class="nick" style="color:#8dd3c7"><a href="#231858" label="[23:18:58]">&lt;stikonas&gt;</a></span><span class="message">well, GCC 5 changed versioning scheme</span></div><div class="line" id="231921"><span class="nick" style="color:#8dd3c7"><a href="#231921" label="[23:19:21]">&lt;stikonas&gt;</a></span><span class="message">e.g. 4.7 -&gt; 4.8 is similar size as 5-&gt;6</span></div><div class="line" id="231929"><span class="nick" style="color:#234e69"><a href="#231929" label="[23:19:29]">&lt;bauen1&gt;</a></span><span class="message">oh</span></div><div class="line" id="231933"><span class="nick" style="color:#8dd3c7"><a href="#231933" label="[23:19:33]">&lt;stikonas&gt;</a></span><span class="message">and 4.8.5 needs C++ compiler</span></div><div class="line" id="231947"><span class="nick" style="color:#8dd3c7"><a href="#231947" label="[23:19:47]">&lt;stikonas&gt;</a></span><span class="message">still, 4.0.4 is also significantly newer than 2.95.3</span></div><div class="line" id="231957"><span class="nick" style="color:#8dd3c7"><a href="#231957" label="[23:19:57]">&lt;stikonas&gt;</a></span><span class="message">which is in Guix bootstrap path</span></div><div class="line" id="232119"><span class="nick" style="color:#80b1d3"><a href="#232119" label="[23:21:19]">&lt;Hagfish&gt;</a></span><span class="message">yeah, nice</span></div><div class="line" id="232429"><span class="nick" style="color:#8dd3c7"><a href="#232429" label="[23:24:29]">&lt;stikonas&gt;</a></span><span class="message">pder: I briefly tried to build tar 1.22 and it fails, some problem in getdate.c (generated from getdate.y), although, one option is to just use your getdate stub</span></div><br /></div></body></html>