<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-03-01.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="003045"><span class="nick" style="color:#8dd3c7"><a href="#003045" label="[00:30:45]">&lt;stikonas&gt;</a></span><span class="message">hmm, newer ar and ranlib have deterministic mode...</span></div><div class="line" id="004202"><span class="nick" style="color:#8dd3c7"><a href="#004202" label="[00:42:02]">&lt;stikonas&gt;</a></span><span class="message">(but that's only in 2.20... much newer than what we have)</span></div><div class="line" id="010727"><span class="nick" style="color:#2e2a4a"><a href="#010727" label="[01:07:27]">&lt;Hagfish&gt;</a></span><span class="message"> <a rel="nofollow" href="https://news.ycombinator.com/item?id=26298022">https://news.ycombinator.com/item?id=26298022</a>  interesting link to &quot;One Man Unix&quot; on hackernews (no discussion yet)</span></div><div class="line" id="020606"><span class="nick" style="color:#8dd3c7"><a href="#020606" label="[02:06:06]">&lt;stikonas&gt;</a></span><span class="message">fossy: do we want to regenerate files like <a rel="nofollow" href="https://github.com/hermitcore/binutils/blob/36e4dce69dd23bea9ea2258dea35f034b6d6351c/bfd/bfd-in2.h">https://github.com/hermitcore/binutils/blob/36e4dce69dd23bea9ea2258dea35f034b6d6351c/bfd/bfd-in2.h</a>  ?</span></div><div class="line" id="020618"><span class="nick" style="color:#8dd3c7"><a href="#020618" label="[02:06:18]">&lt;stikonas&gt;</a></span><span class="message">need to run &quot;make headers&quot;</span></div><div class="line" id="020755"><span class="nick" style="color:#8dd3c7"><a href="#020755" label="[02:07:55]">&lt;stikonas&gt;</a></span><span class="message">although, running this produces no changes</span></div><div class="line" id="020958"><span class="nick" style="color:#8dd3c7"><a href="#020958" label="[02:09:58]">&lt;stikonas&gt;</a></span><span class="message">hmm, and I still can't get ar to create deterministic archives :(</span></div><div class="line" id="021028"><span class="nick" style="color:#8dd3c7"><a href="#021028" label="[02:10:28]">&lt;stikonas&gt;</a></span><span class="message">patched mtime,uid, gid to 0, file mode to 0644 but there is still something left...</span></div><div class="line" id="021211"><span class="nick" style="color:#8dd3c7"><a href="#021211" label="[02:12:11]">&lt;stikonas&gt;</a></span><span class="message">I guess diffoscope time...</span></div><div class="line" id="023218"><span class="nick" style="color:#8dd3c7"><a href="#023218" label="[02:32:18]">&lt;stikonas&gt;</a></span><span class="message">hmm, timestamps are still there for some reason</span></div><div class="line" id="024759"><span class="nick" style="color:#6b8072"><a href="#024759" label="[02:47:59]">&lt;fossy&gt;</a></span><span class="message">stikonas: yes, regenerate all files</span></div><div class="line" id="024815"><span class="nick" style="color:#6b8072"><a href="#024815" label="[02:48:15]">&lt;fossy&gt;</a></span><span class="message">even if the results are identical, the entire point is so one can verify thst</span></div><div class="line" id="025042"><span class="nick" style="color:#8dd3c7"><a href="#025042" label="[02:50:42]">&lt;stikonas&gt;</a></span><span class="message">ok...</span></div><div class="line" id="025044"><span class="nick" style="color:#8dd3c7"><a href="#025044" label="[02:50:44]">&lt;stikonas&gt;</a></span><span class="message">will do so</span></div><div class="line" id="025048"><span class="nick" style="color:#8dd3c7"><a href="#025048" label="[02:50:48]">&lt;stikonas&gt;</a></span><span class="message">don't merge that PR yet anyway</span></div><div class="line" id="025057"><span class="nick" style="color:#8dd3c7"><a href="#025057" label="[02:50:57]">&lt;stikonas&gt;</a></span><span class="message">I'm still trying to find what introduces timestamps</span></div><div class="line" id="025100"><span class="nick" style="color:#8dd3c7"><a href="#025100" label="[02:51:00]">&lt;stikonas&gt;</a></span><span class="message">probably some stat call</span></div><div class="line" id="061533"><span class="nick" style="color:#80b1d3"><a href="#061533" label="[06:15:33]">&lt;pabs3&gt;</a></span><span class="message">I'm getting an expired cert on bootstrappable.org, anyone know who can fix that?</span></div><div class="line" id="063729"><span class="nick" style="color:#6d2462"><a href="#063729" label="[06:37:29]">&lt;siraben&gt;</a></span><span class="message">Oh dear, same here</span></div><div class="line" id="070322"><span class="nick">***</span><span class="message notice">mephista is now known as spicy_icecream</span></div><div class="line" id="080359"><span class="nick">***</span><span class="message notice">mephista is now known as spicy_icecream</span></div><div class="line" id="082742"><span class="nick">***</span><span class="message notice">mephista is now known as spicy_icecream</span></div><div class="line" id="094622"><span class="nick" style="color:#6d2462"><a href="#094622" label="[09:46:22]">&lt;siraben&gt;</a></span><span class="message">trying to reduce Nixpkgs' stdenv be like</span></div><div class="line" id="094623"><span class="nick" style="color:#6d2462"><a href="#094623" label="[09:46:23]">&lt;siraben&gt;</a></span><span class="message"> <a rel="nofollow" href="https://matrix.org/_matrix/media/r0/download/matrix.org/aJfZEhIrRlCjEqoQaWRnsTlJ/stdenvMinimal.dot.png">https://matrix.org/_matrix/media/r0/download/matrix.org/aJfZEhIrRlCjEqoQaWRnsTlJ/stdenvMinimal.dot.png</a> </span></div><div class="line" id="094707"><span class="nick" style="color:#6d2462"><a href="#094707" label="[09:47:07]">&lt;siraben&gt;</a></span><span class="message">still need to get rid of gcc, bash and other miscellanea</span></div><div class="line" id="120501"><span class="nick" style="color:#2e2a4a"><a href="#120501" label="[12:05:01]">&lt;Hagfish&gt;</a></span><span class="message">wow, that image looks like it's the result of a stress test for graphviz, but i assume it's genuine data and not generated by some sort of runaway fuzzing process :)</span></div><div class="line" id="120541"><span class="nick" style="color:#2e2a4a"><a href="#120541" label="[12:05:41]">&lt;Hagfish&gt;</a></span><span class="message">i'd love to see a &quot;before and after&quot; comparison if you do get rid of gcc and bash etc.</span></div><div class="line" id="120939"><span class="nick" style="color:#2e2a4a"><a href="#120939" label="[12:09:39]">&lt;Hagfish&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.perl.com/article/the-hijacking-of-perl-com/">https://www.perl.com/article/the-hijacking-of-perl-com/</a>  &quot;Features such as two-factor authentication probably would have saved us much of this trouble&quot;</span></div><div class="line" id="120946"><span class="nick" style="color:#2e2a4a"><a href="#120946" label="[12:09:46]">&lt;Hagfish&gt;</a></span><span class="message">i guess there's a lesson in there</span></div><div class="line" id="121022"><span class="nick" style="color:#2e2a4a"><a href="#121022" label="[12:10:22]">&lt;Hagfish&gt;</a></span><span class="message">in terms of bootstrapping, they say: &quot;This incident only affected the domain ownership of Perl.com and there was no other compromise of community resources.&quot;</span></div><div class="line" id="122049"><span class="nick" style="color:#6d2462"><a href="#122049" label="[12:20:49]">&lt;siraben&gt;</a></span><span class="message">Hagfish: with the full stdenv graphviz takes forever to finish on my machine</span></div><div class="line" id="142718"><span class="nick" style="color:#234e69"><a href="#142718" label="[14:27:18]">&lt;OriansJ`&gt;</a></span><span class="message">pabs3: the person you need to notify is rekado_ about the cert expiration.</span></div><div class="line" id="143406"><span class="nick" style="color:#234e69"><a href="#143406" label="[14:34:06]">&lt;OriansJ`&gt;</a></span><span class="message">Hagfish: I think the lesson is more no one does security until after its lack results in a great deal of pain for them. Even those who should know better.</span></div><div class="line" id="143710"><span class="nick" style="color:#234e69"><a href="#143710" label="[14:37:10]">&lt;OriansJ`&gt;</a></span><span class="message">Depending on such things as a dns record alone for security is a bad design</span></div><div class="line" id="143943"><span class="nick" style="color:#234e69"><a href="#143943" label="[14:39:43]">&lt;OriansJ`&gt;</a></span><span class="message">In security, you are only as secure as your weakest link</span></div><div class="line" id="144033"><span class="nick" style="color:#2e2a4a"><a href="#144033" label="[14:40:33]">&lt;Hagfish&gt;</a></span><span class="message">i think people haven't fully realised what an attack vector domain registrars are</span></div><div class="line" id="144111"><span class="nick" style="color:#2e2a4a"><a href="#144111" label="[14:41:11]">&lt;Hagfish&gt;</a></span><span class="message">or they haven't thought about the financial incentives for attackers</span></div><div class="line" id="144244"><span class="nick" style="color:#2e2a4a"><a href="#144244" label="[14:42:44]">&lt;Hagfish&gt;</a></span><span class="message">interestingly, although control of a domain can allow an attacker to obtain a new SSL certificate, that certificate would appear in public transparency logs, so a domain owner could detect such an attack</span></div><div class="line" id="144436"><span class="nick" style="color:#234e69"><a href="#144436" label="[14:44:36]">&lt;OriansJ`&gt;</a></span><span class="message">Hagfish: well security classification is often ranked on the $$$ required to break the security. Once the values of the target exceeds the cost of breaking of its security, its compromise is certain.</span></div><div class="line" id="144535"><span class="nick" style="color:#2e2a4a"><a href="#144535" label="[14:45:35]">&lt;Hagfish&gt;</a></span><span class="message">or at least, if you're not attacked, it's due to luck</span></div><div class="line" id="144618"><span class="nick" style="color:#234e69"><a href="#144618" label="[14:46:18]">&lt;OriansJ`&gt;</a></span><span class="message">Hagfish: I think it is more of the &quot;You don't have to outrun the bear, just the person next to you&quot;</span></div><div class="line" id="144628"><span class="nick" style="color:#2e2a4a"><a href="#144628" label="[14:46:28]">&lt;Hagfish&gt;</a></span><span class="message">yeah</span></div><div class="line" id="144646"><span class="nick" style="color:#2e2a4a"><a href="#144646" label="[14:46:46]">&lt;Hagfish&gt;</a></span><span class="message">i guess a good threat model will factor in how many bears there are, and how many runners</span></div><div class="line" id="144749"><span class="nick" style="color:#234e69"><a href="#144749" label="[14:47:49]">&lt;OriansJ`&gt;</a></span><span class="message">well to a degree that seems reasonable but few people know how easy it would be to put lightyears between you and the average runner.</span></div><div class="line" id="144817"><span class="nick" style="color:#2e2a4a"><a href="#144817" label="[14:48:17]">&lt;Hagfish&gt;</a></span><span class="message">nuclear propulsion? ;)</span></div><div class="line" id="144929"><span class="nick" style="color:#234e69"><a href="#144929" label="[14:49:29]">&lt;OriansJ`&gt;</a></span><span class="message">A single offline system, binary white-listing and 2-factor auth puts one light years ahead of most organizations.</span></div><div class="line" id="145000"><span class="nick" style="color:#2e2a4a"><a href="#145000" label="[14:50:00]">&lt;Hagfish&gt;</a></span><span class="message">oh, absolutely</span></div><div class="line" id="145221"><span class="nick" style="color:#2e2a4a"><a href="#145221" label="[14:52:21]">&lt;Hagfish&gt;</a></span><span class="message">people seem to imagine that cyber security involves things like &quot;military grade firewalls&quot;, when in reality it's just &quot;pull out the network cable, dummy&quot;</span></div><div class="line" id="145222"><span class="nick" style="color:#234e69"><a href="#145222" label="[14:52:22]">&lt;OriansJ`&gt;</a></span><span class="message">That and contract terms involving stiff penalties for contracted parties for violating security requirements (That is a hard sell outside of Military Contracting)</span></div><div class="line" id="145251"><span class="nick" style="color:#2e2a4a"><a href="#145251" label="[14:52:51]">&lt;Hagfish&gt;</a></span><span class="message">in theory cyber-security insurance should fix this in the private sector</span></div><div class="line" id="145309"><span class="nick" style="color:#2e2a4a"><a href="#145309" label="[14:53:09]">&lt;Hagfish&gt;</a></span><span class="message">insurance companies should compete on low premiums by letting their audits do security reviews</span></div><div class="line" id="145346"><span class="nick" style="color:#234e69"><a href="#145346" label="[14:53:46]">&lt;OriansJ`&gt;</a></span><span class="message">Hagfish: The insurance model is a race to checkbox the problem and shift blame around.</span></div><div class="line" id="145419"><span class="nick" style="color:#2e2a4a"><a href="#145419" label="[14:54:19]">&lt;Hagfish&gt;</a></span><span class="message">not if insurance companies want to make a profit</span></div><div class="line" id="145441"><span class="nick" style="color:#2e2a4a"><a href="#145441" label="[14:54:41]">&lt;Hagfish&gt;</a></span><span class="message">well, i guess they will do the standard tricks of saying &quot;sorry, your policy doesn't cover payouts for these sorts of attacks&quot;</span></div><div class="line" id="145444"><span class="nick" style="color:#234e69"><a href="#145444" label="[14:54:44]">&lt;OriansJ`&gt;</a></span><span class="message">Hagfish: 100% profit if you always blame the company that gets breached.</span></div><div class="line" id="145507"><span class="nick" style="color:#234e69"><a href="#145507" label="[14:55:07]">&lt;OriansJ`&gt;</a></span><span class="message">you needed to complete section 12 but didn't</span></div><div class="line" id="145528"><span class="nick" style="color:#2e2a4a"><a href="#145528" label="[14:55:28]">&lt;Hagfish&gt;</a></span><span class="message">right</span></div><div class="line" id="145612"><span class="nick" style="color:#2e2a4a"><a href="#145612" label="[14:56:12]">&lt;Hagfish&gt;</a></span><span class="message">i guess the checkbox is &quot;see, we have cyber insurance&quot;, when that cyber insurance never pays out</span></div><div class="line" id="145613"><span class="nick" style="color:#234e69"><a href="#145613" label="[14:56:13]">&lt;OriansJ`&gt;</a></span><span class="message">Government penalties might work if set properly though.</span></div><div class="line" id="145657"><span class="nick" style="color:#2e2a4a"><a href="#145657" label="[14:56:57]">&lt;Hagfish&gt;</a></span><span class="message">the GDPR setting fines to a percentage of _revenue_ is a nice approach</span></div><div class="line" id="145724"><span class="nick" style="color:#234e69"><a href="#145724" label="[14:57:24]">&lt;OriansJ`&gt;</a></span><span class="message">Hagfish: multiples of _revenue_ not percentage ensures compliance.</span></div><div class="line" id="145759"><span class="nick" style="color:#2e2a4a"><a href="#145759" label="[14:57:59]">&lt;Hagfish&gt;</a></span><span class="message">even 1x of revenue would be a death sentence to most companies</span></div><div class="line" id="145815"><span class="nick" style="color:#234e69"><a href="#145815" label="[14:58:15]">&lt;OriansJ`&gt;</a></span><span class="message">literally do this and die; it only takes a few companies to shake the industry into getting their shit together.</span></div><div class="line" id="145853"><span class="nick" style="color:#2e2a4a"><a href="#145853" label="[14:58:53]">&lt;Hagfish&gt;</a></span><span class="message">there is value in making an example of a few companies</span></div><div class="line" id="145907"><span class="nick" style="color:#234e69"><a href="#145907" label="[14:59:07]">&lt;OriansJ`&gt;</a></span><span class="message">Like current regulations on nuclear material transportation.</span></div><div class="line" id="145942"><span class="nick" style="color:#234e69"><a href="#145942" label="[14:59:42]">&lt;OriansJ`&gt;</a></span><span class="message">You screw up once, you are done and your investors lose *EVERYTHING*</span></div><div class="line" id="145942"><span class="nick" style="color:#2e2a4a"><a href="#145942" label="[14:59:42]">&lt;Hagfish&gt;</a></span><span class="message">we don't treat data the same way as nuclear material (although opinions are starting to move in that direction)</span></div><div class="line" id="150011"><span class="nick" style="color:#234e69"><a href="#150011" label="[15:00:11]">&lt;OriansJ`&gt;</a></span><span class="message">well it is just as dangerous in skilled hands.</span></div><div class="line" id="150012"><span class="nick" style="color:#2e2a4a"><a href="#150012" label="[15:00:12]">&lt;Hagfish&gt;</a></span><span class="message">calibrating these penalties is quite difficult for governments</span></div><div class="line" id="150036"><span class="nick" style="color:#2e2a4a"><a href="#150036" label="[15:00:36]">&lt;Hagfish&gt;</a></span><span class="message">you don't want to prevent all investments in tech companies (or tech companies from operating in your jurisdiction)</span></div><div class="line" id="150108"><span class="nick" style="color:#234e69"><a href="#150108" label="[15:01:08]">&lt;OriansJ`&gt;</a></span><span class="message">Hagfish: starting with don't store any data unless it is explicitly needed to operate your business seems like a good starting point.</span></div><div class="line" id="150111"><span class="nick" style="color:#2e2a4a"><a href="#150111" label="[15:01:11]">&lt;Hagfish&gt;</a></span><span class="message">or some nasty endemic problem like Spectre turning up one year and causing every single tech business to go bankrupt</span></div><div class="line" id="150138"><span class="nick" style="color:#2e2a4a"><a href="#150138" label="[15:01:38]">&lt;Hagfish&gt;</a></span><span class="message">yeah, GDPR has finally established that as a benchmark</span></div><div class="line" id="150203"><span class="nick" style="color:#234e69"><a href="#150203" label="[15:02:03]">&lt;OriansJ`&gt;</a></span><span class="message">Hagfish: Well in spectre's case, it would have just killed Intel</span></div><div class="line" id="150251"><span class="nick" style="color:#2e2a4a"><a href="#150251" label="[15:02:51]">&lt;Hagfish&gt;</a></span><span class="message">part of the problem is that there is so little competition among tech companies</span></div><div class="line" id="150306"><span class="nick" style="color:#2e2a4a"><a href="#150306" label="[15:03:06]">&lt;Hagfish&gt;</a></span><span class="message">if there were 10 different Intels, we could afford for a couple of them to go out of business</span></div><div class="line" id="150327"><span class="nick" style="color:#234e69"><a href="#150327" label="[15:03:27]">&lt;OriansJ`&gt;</a></span><span class="message">Hagfish: libre hardware would solve that too</span></div><div class="line" id="150352"><span class="nick" style="color:#2e2a4a"><a href="#150352" label="[15:03:52]">&lt;Hagfish&gt;</a></span><span class="message">yeah, i think the tensions between &quot;intellectual property&quot; and the free market are becoming clearer with each passing year</span></div><div class="line" id="150411"><span class="nick" style="color:#234e69"><a href="#150411" label="[15:04:11]">&lt;OriansJ`&gt;</a></span><span class="message">A full source code/design exception for manufactors of computing products.</span></div><div class="line" id="150442"><span class="nick" style="color:#234e69"><a href="#150442" label="[15:04:42]">&lt;OriansJ`&gt;</a></span><span class="message">Hagfish: please don't use that phrase.</span></div><div class="line" id="150442"><span class="nick" style="color:#2e2a4a"><a href="#150442" label="[15:04:42]">&lt;Hagfish&gt;</a></span><span class="message">yeah, that would be a nice 80:20 solution</span></div><div class="line" id="150453"><span class="nick" style="color:#2e2a4a"><a href="#150453" label="[15:04:53]">&lt;Hagfish&gt;</a></span><span class="message">i was going to say &quot;intellectual monopoly&quot;</span></div><div class="line" id="150505"><span class="nick" style="color:#234e69"><a href="#150505" label="[15:05:05]">&lt;OriansJ`&gt;</a></span><span class="message">not much better</span></div><div class="line" id="150510"><span class="nick" style="color:#2e2a4a"><a href="#150510" label="[15:05:10]">&lt;Hagfish&gt;</a></span><span class="message">or were you questioning &quot;free market&quot;?</span></div><div class="line" id="150545"><span class="nick" style="color:#234e69"><a href="#150545" label="[15:05:45]">&lt;OriansJ`&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.gnu.org/philosophy/not-ipr.html">https://www.gnu.org/philosophy/not-ipr.html</a> </span></div><div class="line" id="150753"><span class="nick" style="color:#2e2a4a"><a href="#150753" label="[15:07:53]">&lt;Hagfish&gt;</a></span><span class="message">unfortunately there doesn't really exist a well established and accurate term which captures these artificially created and amalgamated set of legal privileges</span></div><div class="line" id="150809"><span class="nick" style="color:#2e2a4a"><a href="#150809" label="[15:08:09]">&lt;Hagfish&gt;</a></span><span class="message">so i just used scare-quotes, like that article does</span></div><div class="line" id="151115"><span class="nick" style="color:#234e69"><a href="#151115" label="[15:11:15]">&lt;OriansJ`&gt;</a></span><span class="message">well sometimes it is best to break the argument into smaller pieces to provide more accurate and useful detail. For example there is by definition a big cost in the market for the existence of patents (By design to encourage the disclosure of technical implementation details). But not so much with Trademarks which are a traditional solution in the market to enable one to identify products from companies which have certain reputations.</span></div><div class="line" id="151141"><span class="nick" style="color:#2e2a4a"><a href="#151141" label="[15:11:41]">&lt;Hagfish&gt;</a></span><span class="message">yeah, that would be more nuanced</span></div><div class="line" id="151209"><span class="nick" style="color:#2e2a4a"><a href="#151209" label="[15:12:09]">&lt;Hagfish&gt;</a></span><span class="message">another rhetorical trick might have been to say something like:  IPR (Innovation Prevention Racket)</span></div><div class="line" id="151300"><span class="nick" style="color:#2e2a4a"><a href="#151300" label="[15:13:00]">&lt;Hagfish&gt;</a></span><span class="message">i.e. hijacking the existing term, rather than scare-quoting it</span></div><div class="line" id="151350"><span class="nick" style="color:#234e69"><a href="#151350" label="[15:13:50]">&lt;OriansJ`&gt;</a></span><span class="message">Hagfish: potentially proper propaganda technique there. Although personally I prefer being as clear and meaningful when possible.</span></div><div class="line" id="151437"><span class="nick" style="color:#2e2a4a"><a href="#151437" label="[15:14:37]">&lt;Hagfish&gt;</a></span><span class="message">i think that &quot;Innovation Prevention Racket&quot; conveys quite a lot of meaning for how succinct it is</span></div><div class="line" id="152041"><span class="nick" style="color:#234e69"><a href="#152041" label="[15:20:41]">&lt;OriansJ`&gt;</a></span><span class="message">It probably does. However when discussing how to actually solve a specific problem, more precise terms and solutions generally would enable to more productive discourse</span></div><div class="line" id="152342"><span class="nick" style="color:#2e2a4a"><a href="#152342" label="[15:23:42]">&lt;Hagfish&gt;</a></span><span class="message">i suppose &quot;patent and copyright law&quot; wouldn't have been that much more to type</span></div><div class="line" id="152357"><span class="nick" style="color:#2e2a4a"><a href="#152357" label="[15:23:57]">&lt;Hagfish&gt;</a></span><span class="message">and i could have avoided this unnecessary tangent :)</span></div><div class="line" id="152425"><span class="nick">***</span><span class="message notice">Noisytoot is now known as impostor</span></div><div class="line" id="152555"><span class="nick" style="color:#234e69"><a href="#152555" label="[15:25:55]">&lt;OriansJ`&gt;</a></span><span class="message">back to the previous point on how to encourage organizations to improve security</span></div><div class="line" id="152629"><span class="nick" style="color:#234e69"><a href="#152629" label="[15:26:29]">&lt;OriansJ`&gt;</a></span><span class="message">User data should be thought of as toxic waste, not a priceless resource to be collected at all costs.</span></div><div class="line" id="152657"><span class="nick" style="color:#234e69"><a href="#152657" label="[15:26:57]">&lt;OriansJ`&gt;</a></span><span class="message">For one can not leak data that one does not have.</span></div><div class="line" id="152739"><span class="nick" style="color:#234e69"><a href="#152739" label="[15:27:39]">&lt;OriansJ`&gt;</a></span><span class="message">The lost laptop with +1M patient records just shouldn't even be a possibility.</span></div><div class="line" id="152841"><span class="nick" style="color:#234e69"><a href="#152841" label="[15:28:41]">&lt;OriansJ`&gt;</a></span><span class="message">let alone a single config mistake away from allowing an attacker to access/modify all patent records for a hospital.</span></div><div class="line" id="152921"><span class="nick">***</span><span class="message notice">impostor is now known as Noisytoot</span></div><div class="line" id="153121"><span class="nick" style="color:#234e69"><a href="#153121" label="[15:31:21]">&lt;OriansJ`&gt;</a></span><span class="message">attacks like the recent solarwinds could have quickly been detected and addressed if reproducible builds for all binaries shipped to customers was done.</span></div><div class="line" id="154219"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado_</span></div><div class="line" id="154221"><span class="nick">***</span><span class="message notice">rekado_ is now known as rekado</span></div><div class="line" id="154434"><span class="nick" style="color:#2e2a4a"><a href="#154434" label="[15:44:34]">&lt;Hagfish&gt;</a></span><span class="message">yeah, it wouldn't be too difficult for a government to demand that all updates from a vendor be signed with a private key, and all uses of that key be recorded in a public log</span></div><div class="line" id="154542"><span class="nick" style="color:#2e2a4a"><a href="#154542" label="[15:45:42]">&lt;Hagfish&gt;</a></span><span class="message">if the vendor fails to sign the update, then they pay a fee for the paperwork of registering a new key (and for delivering the update late), and if the government find an update that isn't in the public log then the company pay a pre-agreed fee</span></div><div class="line" id="154633"><span class="nick" style="color:#2e2a4a"><a href="#154633" label="[15:46:33]">&lt;Hagfish&gt;</a></span><span class="message">by making the failure modes of a contract unambiguous, it becomes easier to invest in the proper engineering (rather than paying lawyers to argue about the contract)</span></div><div class="line" id="154724"><span class="nick" style="color:#234e69"><a href="#154724" label="[15:47:24]">&lt;OriansJ`&gt;</a></span><span class="message">indeed</span></div><div class="line" id="154811"><span class="nick" style="color:#234e69"><a href="#154811" label="[15:48:11]">&lt;OriansJ`&gt;</a></span><span class="message">or requiring full source to be provided that corresponds to the binary to get copyright protection would be a simple one to enforce (With reproducible builds)</span></div><div class="line" id="155045"><span class="nick" style="color:#234e69"><a href="#155045" label="[15:50:45]">&lt;OriansJ`&gt;</a></span><span class="message">with probably a grandfather clause which applies as of some near future date.</span></div><div class="line" id="155240"><span class="nick" style="color:#234e69"><a href="#155240" label="[15:52:40]">&lt;OriansJ`&gt;</a></span><span class="message">Probably could use trademark law to require a registered GPG signature for all companies and the requirement for the signatures of sold products to meet requirements.</span></div><div class="line" id="155405"><span class="nick" style="color:#234e69"><a href="#155405" label="[15:54:05]">&lt;OriansJ`&gt;</a></span><span class="message">So in theory just leveraging existing copyright and trademark processes with minor tweaks could easily improve existing security foundation for all businesses with minimal costs at a society level.</span></div><div class="line" id="155447"><span class="nick" style="color:#234e69"><a href="#155447" label="[15:54:47]">&lt;OriansJ`&gt;</a></span><span class="message">But if you are willing to abandon trademark and copyright benefits, it becomes trivial to skip those requirements.</span></div><div class="line" id="161100"><span class="nick" style="color:#234e69"><a href="#161100" label="[16:11:00]">&lt;OriansJ`&gt;</a></span><span class="message">It provides an opt-in model which is mandatory for companies that expect to generate revenue but doesn't impact FLOSS projects as copyright for written works (The source code) remains unchanged, only those that distribute binaries need to change to comply with the revised copyright law.</span></div><div class="line" id="161209"><span class="nick" style="color:#234e69"><a href="#161209" label="[16:12:09]">&lt;OriansJ`&gt;</a></span><span class="message">Trademark should incur a cost but copyright shouldn't</span></div><div class="line" id="162444"><span class="nick">***</span><span class="message notice">gio_ is now known as gio</span></div><div class="line" id="173718"><span class="nick" style="color:#6c3d55"><a href="#173718" label="[17:37:18]">&lt;roptat&gt;</a></span><span class="message">stikonas, I've looked a bit at live-bootstrap, and I see there are some .kaem files with #!/bin/sh, does that mean /bin/sh is part of the bootstrap? do you consider it only as the build driver, or are you trying to replace it? or is it actually bootstrapped and I'm blind?</span></div><div class="line" id="173827"><span class="nick" style="color:#8dd3c7"><a href="#173827" label="[17:38:27]">&lt;stikonas&gt;</a></span><span class="message">roptat: kaem files are run by kaem, not /bin/sh</span></div><div class="line" id="173837"><span class="nick" style="color:#8dd3c7"><a href="#173837" label="[17:38:37]">&lt;stikonas&gt;</a></span><span class="message">that shebang is a bit confusing</span></div><div class="line" id="173850"><span class="nick" style="color:#8dd3c7"><a href="#173850" label="[17:38:50]">&lt;stikonas&gt;</a></span><span class="message">it's there only for dev reasons, so you can run those scripts with sh too</span></div><div class="line" id="173927"><span class="nick" style="color:#8dd3c7"><a href="#173927" label="[17:39:27]">&lt;stikonas&gt;</a></span><span class="message">but in live-bootstrap only kame is used</span></div><div class="line" id="173931"><span class="nick" style="color:#6c3d55"><a href="#173931" label="[17:39:31]">&lt;roptat&gt;</a></span><span class="message">ah, I see</span></div><div class="line" id="173933"><span class="nick" style="color:#8dd3c7"><a href="#173933" label="[17:39:33]">&lt;stikonas&gt;</a></span><span class="message">there are actually two kaems</span></div><div class="line" id="173945"><span class="nick" style="color:#8dd3c7"><a href="#173945" label="[17:39:45]">&lt;stikonas&gt;</a></span><span class="message">one is 737 byte binary written in x86 assembly</span></div><div class="line" id="173952"><span class="nick" style="color:#8dd3c7"><a href="#173952" label="[17:39:52]">&lt;stikonas&gt;</a></span><span class="message">that one is very limitted</span></div><div class="line" id="174028"><span class="nick" style="color:#8dd3c7"><a href="#174028" label="[17:40:28]">&lt;stikonas&gt;</a></span><span class="message">and then there is a simplified C version (I think built with M2-Planet or cc_x86) and has a few more features</span></div><div class="line" id="174043"><span class="nick" style="color:#8dd3c7"><a href="#174043" label="[17:40:43]">&lt;stikonas&gt;</a></span><span class="message">(variable substitution and some escaping)</span></div><div class="line" id="174100"><span class="nick" style="color:#6c3d55"><a href="#174100" label="[17:41:00]">&lt;roptat&gt;</a></span><span class="message">so before m2-planet, you use the bootstrap kaem, then you build the better one and use it after m2-planet?</span></div><div class="line" id="174106"><span class="nick" style="color:#8dd3c7"><a href="#174106" label="[17:41:06]">&lt;stikonas&gt;</a></span><span class="message">indeed</span></div><div class="line" id="174108"><span class="nick" style="color:#6c3d55"><a href="#174108" label="[17:41:08]">&lt;roptat&gt;</a></span><span class="message">nice</span></div><div class="line" id="174126"><span class="nick" style="color:#8dd3c7"><a href="#174126" label="[17:41:26]">&lt;stikonas&gt;</a></span><span class="message">maybe they should have had different names</span></div><div class="line" id="174132"><span class="nick" style="color:#8dd3c7"><a href="#174132" label="[17:41:32]">&lt;stikonas&gt;</a></span><span class="message">but I was not involved in that</span></div><div class="line" id="174224"><span class="nick" style="color:#6c3d55"><a href="#174224" label="[17:42:24]">&lt;roptat&gt;</a></span><span class="message">I'm wondering about the steps to get to guile, since you mentioned last time it was needed for gash and a few other utilities</span></div><div class="line" id="174238"><span class="nick" style="color:#8dd3c7"><a href="#174238" label="[17:42:38]">&lt;stikonas&gt;</a></span><span class="message">hmm, well, so far we completely ignored guile</span></div><div class="line" id="174308"><span class="nick" style="color:#8dd3c7"><a href="#174308" label="[17:43:08]">&lt;stikonas&gt;</a></span><span class="message">we built make with tcc, then used kaem in combination with make, then after some more trouble got bash</span></div><div class="line" id="174310"><span class="nick" style="color:#6c3d55"><a href="#174310" label="[17:43:10]">&lt;roptat&gt;</a></span><span class="message">fair enough ^^</span></div><div class="line" id="174326"><span class="nick" style="color:#8dd3c7"><a href="#174326" label="[17:43:26]">&lt;stikonas&gt;</a></span><span class="message">(bash was a bit tricky because we also wanted to rebuild .y file)</span></div><div class="line" id="174350"><span class="nick" style="color:#8dd3c7"><a href="#174350" label="[17:43:50]">&lt;stikonas&gt;</a></span><span class="message">and since we didn't have bison yet, we used heirloom yacc</span></div><div class="line" id="174644"><span class="nick" style="color:#8dd3c7"><a href="#174644" label="[17:46:44]">&lt;stikonas&gt;</a></span><span class="message">roptat: so either mes / gash should be made compatible (might make sense for guix) or we build guile much later, e.g. after gcc</span></div><div class="line" id="174957"><span class="nick" style="color:#6c3d55"><a href="#174957" label="[17:49:57]">&lt;roptat&gt;</a></span><span class="message">I wonder if we could integrate that into guix, using kaem as the build driver instead of guile</span></div><div class="line" id="175043"><span class="nick" style="color:#6c3d55"><a href="#175043" label="[17:50:43]">&lt;roptat&gt;</a></span><span class="message">not sure exactly where the derivations and builders are generated, but that should be possible</span></div><div class="line" id="175241"><span class="nick" style="color:#d9d9d9"><a href="#175241" label="[17:52:41]">&lt;civodul&gt;</a></span><span class="message">roptat: the goal is rather to start with a Scheme; that's kinda why Mes exists :-)</span></div><div class="line" id="175321"><span class="nick" style="color:#6c3d55"><a href="#175321" label="[17:53:21]">&lt;roptat&gt;</a></span><span class="message">but mes is way bigger than kaem, no?</span></div><div class="line" id="175347"><span class="nick" style="color:#d9d9d9"><a href="#175347" label="[17:53:47]">&lt;civodul&gt;</a></span><span class="message">possibly</span></div><div class="line" id="175356"><span class="nick" style="color:#6c3d55"><a href="#175356" label="[17:53:56]">&lt;roptat&gt;</a></span><span class="message">I mean, we'd use it up to mes, then we'd use mes</span></div><div class="line" id="175403"><span class="nick" style="color:#d9d9d9"><a href="#175403" label="[17:54:03]">&lt;civodul&gt;</a></span><span class="message">(i'm talking but i haven't looked into that very closely)</span></div><div class="line" id="175429"><span class="nick" style="color:#d9d9d9"><a href="#175429" label="[17:54:29]">&lt;civodul&gt;</a></span><span class="message">actually i think that's +/- what janneke did in the full-source bootstrap branch</span></div><div class="line" id="175519"><span class="nick" style="color:#6c3d55"><a href="#175519" label="[17:55:19]">&lt;roptat&gt;</a></span><span class="message">though I'm pretty sure the build driver is still guile</span></div><div class="line" id="175552"><span class="nick" style="color:#d9d9d9"><a href="#175552" label="[17:55:52]">&lt;civodul&gt;</a></span><span class="message">yes</span></div><div class="line" id="175606"><span class="nick" style="color:#d9d9d9"><a href="#175606" label="[17:56:06]">&lt;civodul&gt;</a></span><span class="message">that's the elephant in the room</span></div><div class="line" id="175609"><span class="nick" style="color:#6c3d55"><a href="#175609" label="[17:56:09]">&lt;roptat&gt;</a></span><span class="message">I'm ok with guile on the host-side, but I think that means guile gets injected on the build side too, so you'd need it as a seed</span></div><div class="line" id="175642"><span class="nick" style="color:#d9d9d9"><a href="#175642" label="[17:56:42]">&lt;civodul&gt;</a></span><span class="message">it's not &quot;injected&quot;, it's %bootstrap-guile that shows up in the derivation graph</span></div><div class="line" id="175721"><span class="nick" style="color:#6c3d55"><a href="#175721" label="[17:57:21]">&lt;roptat&gt;</a></span><span class="message">actually I'm not entirely sure what happens on the build side exactly</span></div><div class="line" id="175739"><span class="nick" style="color:#6c3d55"><a href="#175739" label="[17:57:39]">&lt;roptat&gt;</a></span><span class="message">so %bootstrap-guile is an input to the derivation</span></div><div class="line" id="175741"><span class="nick" style="color:#d9d9d9"><a href="#175741" label="[17:57:41]">&lt;civodul&gt;</a></span><span class="message">i think we need a strategy where we don't end up rewriting (guix build gnu-build-system) &amp; co. in shell or whatever</span></div><div class="line" id="175753"><span class="nick" style="color:#6c3d55"><a href="#175753" label="[17:57:53]">&lt;roptat&gt;</a></span><span class="message">right</span></div><div class="line" id="175845"><span class="nick" style="color:#d9d9d9"><a href="#175845" label="[17:58:45]">&lt;civodul&gt;</a></span><span class="message">see: guix graph -e '(@@ (gnu packages commencement) gash-boot)' -t derivation | xdot -</span></div><div class="line" id="180240"><span class="nick" style="color:#6c3d55"><a href="#180240" label="[18:02:40]">&lt;roptat&gt;</a></span><span class="message">so guile-bootstrap is built in a derivation, but I don't understand how, if we don't have guile yet</span></div><div class="line" id="180328"><span class="nick" style="color:#6c3d55"><a href="#180328" label="[18:03:28]">&lt;roptat&gt;</a></span><span class="message">is that the role of build-bootstrap-guile.sh?</span></div><div class="line" id="180525"><span class="nick" style="color:#d9d9d9"><a href="#180525" label="[18:05:25]">&lt;civodul&gt;</a></span><span class="message">(gnu packages bootstrap) is where it's &quot;built&quot;</span></div><div class="line" id="180531"><span class="nick" style="color:#d9d9d9"><a href="#180531" label="[18:05:31]">&lt;civodul&gt;</a></span><span class="message">i.e., extracted</span></div><div class="line" id="180622"><span class="nick" style="color:#d9d9d9"><a href="#180622" label="[18:06:22]">&lt;civodul&gt;</a></span><span class="message">actually it's +/- described in <a rel="nofollow" href="https://guix.gnu.org/manual/en/html_node/Reduced-Binary-Seed-Bootstrap.html">https://guix.gnu.org/manual/en/html_node/Reduced-Binary-Seed-Bootstrap.html</a>  :-)</span></div><div class="line" id="181240"><span class="nick" style="color:#8dd3c7"><a href="#181240" label="[18:12:40]">&lt;stikonas&gt;</a></span><span class="message">civodul: by the way, I'll be looking at binutils 2.14 timestamps. I'll let you know once I get it working (you raised that in <a rel="nofollow" href="https://issues.guix.gnu.org/45962">https://issues.guix.gnu.org/45962</a>). </span></div><div class="line" id="181309"><span class="nick" style="color:#8dd3c7"><a href="#181309" label="[18:13:09]">&lt;stikonas&gt;</a></span><span class="message">it's now the same problem in live-bootstrap</span></div><div class="line" id="181321"><span class="nick" style="color:#8dd3c7"><a href="#181321" label="[18:13:21]">&lt;stikonas&gt;</a></span><span class="message">(that binutils-2.14 is not reproducible)</span></div><div class="line" id="181330"><span class="nick" style="color:#d9d9d9"><a href="#181330" label="[18:13:30]">&lt;civodul&gt;</a></span><span class="message">stikonas: oh nice, thanks!</span></div><div class="line" id="182313"><span class="nick" style="color:#6d2462"><a href="#182313" label="[18:23:13]">&lt;siraben&gt;</a></span><span class="message">I just reviewed the bootstrap process of Nixpkgs today. It wasn't too bad and doesn't contain any cycles.</span></div><div class="line" id="182323"><span class="nick" style="color:#6d2462"><a href="#182323" label="[18:23:23]">&lt;siraben&gt;</a></span><span class="message">Reducing the stage0 would bring the most improvements, it looks like.</span></div><div class="line" id="182453"><span class="nick" style="color:#6d2462"><a href="#182453" label="[18:24:53]">&lt;siraben&gt;</a></span><span class="message">Here's the linux bootstrap <a rel="nofollow" href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/stdenv/linux/default.nix">https://github.com/NixOS/nixpkgs/blob/master/pkgs/stdenv/linux/default.nix</a> </span></div><div class="line" id="183240"><span class="nick" style="color:#d9d9d9"><a href="#183240" label="[18:32:40]">&lt;civodul&gt;</a></span><span class="message">the big thing is here: <a rel="nofollow" href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/stdenv/linux/bootstrap-files/x86_64.nix">https://github.com/NixOS/nixpkgs/blob/master/pkgs/stdenv/linux/bootstrap-files/x86_64.nix</a> </span></div><div class="line" id="183318"><span class="nick" style="color:#d9d9d9"><a href="#183318" label="[18:33:18]">&lt;civodul&gt;</a></span><span class="message">those seeds include gcc 8.3.0, glibc, zlib, pcre, binutils, etc.</span></div><div class="line" id="183420"><span class="nick" style="color:#d9d9d9"><a href="#183420" label="[18:34:20]">&lt;civodul&gt;</a></span><span class="message">128 MiB uncompressed</span></div><div class="line" id="183746"><span class="nick" style="color:#8dd3c7"><a href="#183746" label="[18:37:46]">&lt;stikonas&gt;</a></span><span class="message">well, those are standard...</span></div><div class="line" id="183936"><span class="nick" style="color:#d9d9d9"><a href="#183936" label="[18:39:36]">&lt;civodul&gt;</a></span><span class="message">sure, but since we're talking about reducing binary seeds...</span></div><div class="line" id="184433"><span class="nick" style="color:#8dd3c7"><a href="#184433" label="[18:44:33]">&lt;stikonas&gt;</a></span><span class="message">well, I only meant it as, should be similar in what guix did when it went to reduced bootstrap seed</span></div><div class="line" id="185537"><span class="nick" style="color:#6d2462"><a href="#185537" label="[18:55:37]">&lt;siraben&gt;</a></span><span class="message">Yes. Looks promising.</span></div><div class="line" id="232954"><span class="nick" style="color:#234e69"><a href="#232954" label="[23:29:54]">&lt;OriansJ`&gt;</a></span><span class="message">roptat: there is a different name for the bootstrap kaem: kaem-optional-seed as it is designed to be buildable by hex0. So only the hex0-seed is actually required to build if you have a shell that you trust. kaem-optional-seed is only needed if you wish to remove your init+shell from your bootstrap graph (as it can function as an init)</span></div><div class="line" id="233207"><span class="nick" style="color:#234e69"><a href="#233207" label="[23:32:07]">&lt;OriansJ`&gt;</a></span><span class="message">civodul: the issue with mes.c is that it is unable to run gash, gash-utils or bootar but that is why the blynn-compiler proposal for a scheme written in Haskell appeals to me (Mostly that it eliminates work from janneke and me while still moving the needle forward)</span></div><div class="line" id="233347"><span class="nick" style="color:#234e69"><a href="#233347" label="[23:33:47]">&lt;OriansJ`&gt;</a></span><span class="message">If nothing else, it forces Haskell programmers to prove that their code is bootstrappable beyound the subset we currently support in blynn-compiler.</span></div><div class="line" id="233637"><span class="nick" style="color:#234e69"><a href="#233637" label="[23:36:37]">&lt;OriansJ`&gt;</a></span><span class="message">siraben: I am extremely curious in what way you think stage0 could be improved as the steps between hex0, hex1, hex2, M0, cc_* and M2-Planet+mescc-tools are near the edges of reasonable human audit efforts</span></div><div class="line" id="233928"><span class="nick" style="color:#234e69"><a href="#233928" label="[23:39:28]">&lt;OriansJ`&gt;</a></span><span class="message">(as I had to include a safety margin for unknown future architectures)</span></div><div class="line" id="234033"><span class="nick" style="color:#8dd3c7"><a href="#234033" label="[23:40:33]">&lt;stikonas&gt;</a></span><span class="message">OriansJ`: my reading of that sentence was that siraben meant reducing Nixos bootstrap seed to stage0 would bring most improvements</span></div><div class="line" id="234044"><span class="nick" style="color:#8dd3c7"><a href="#234044" label="[23:40:44]">&lt;stikonas&gt;</a></span><span class="message">not reducign stage0 itself</span></div><div class="line" id="234050"><span class="nick" style="color:#8dd3c7"><a href="#234050" label="[23:40:50]">&lt;stikonas&gt;</a></span><span class="message">but I might be wrong</span></div><div class="line" id="234941"><span class="nick" style="color:#234e69"><a href="#234941" label="[23:49:41]">&lt;OriansJ`&gt;</a></span><span class="message">stikonas: definitely a possible parsing of that sentence. But I do always actively look for improvements in the work that I do.</span></div><div class="line" id="235042"><span class="nick" style="color:#8dd3c7"><a href="#235042" label="[23:50:42]">&lt;stikonas&gt;</a></span><span class="message">well, depends on what the goal is, optional init seed can definitely made smaller, but I'm not sure if that will make the whole thing more readable...</span></div><div class="line" id="235114"><span class="nick" style="color:#8dd3c7"><a href="#235114" label="[23:51:14]">&lt;stikonas&gt;</a></span><span class="message">at the moment kaem-optional-seed does quite a bit...</span></div><div class="line" id="235224"><span class="nick" style="color:#234e69"><a href="#235224" label="[23:52:24]">&lt;OriansJ`&gt;</a></span><span class="message">737bytes to read kaem.run, print what it is executing, drop comment lines, spawn processes and halt if anyone of them returns failure.</span></div><div class="line" id="235315"><span class="nick" style="color:#234e69"><a href="#235315" label="[23:53:15]">&lt;OriansJ`&gt;</a></span><span class="message">and as it is trivial to build (it is a hex0 program) its audit can be on the hex0 sources rather than the binary itself.</span></div><div class="line" id="235435"><span class="nick" style="color:#234e69"><a href="#235435" label="[23:54:35]">&lt;OriansJ`&gt;</a></span><span class="message">So in theory only the hex0 seed needs to be squeezed further to drop bytes and there is a large amount of room left to squeeze out</span></div><div class="line" id="235440"><span class="nick" style="color:#8dd3c7"><a href="#235440" label="[23:54:40]">&lt;stikonas&gt;</a></span><span class="message">well, I'm just saying, binary size depends on what tradeoffs you accept. E.g. one can write smaller binary that hardcodes 3 commands that are read from kaem.run, that will reduce initial binary seed, but will increase total amont of hex0 code</span></div><div class="line" id="235710"><span class="nick" style="color:#234e69"><a href="#235710" label="[23:57:10]">&lt;OriansJ`&gt;</a></span><span class="message">well kaem-optional-seed's hex0 is 415lines (including comments and license header)</span></div><div class="line" id="235742"><span class="nick" style="color:#234e69"><a href="#235742" label="[23:57:42]">&lt;OriansJ`&gt;</a></span><span class="message">(it also includes just whitespace-only lines)</span></div><div class="line" id="235810"><span class="nick" style="color:#234e69"><a href="#235810" label="[23:58:10]">&lt;OriansJ`&gt;</a></span><span class="message">hex0 is 231 lines (comments, license header and whitespace-only lines included)</span></div><div class="line" id="235834"><span class="nick" style="color:#8dd3c7"><a href="#235834" label="[23:58:34]">&lt;stikonas&gt;</a></span><span class="message">but most of keam-optional-seed is dealing with reading and parsing kaem.run file</span></div><div class="line" id="235857"><span class="nick" style="color:#8dd3c7"><a href="#235857" label="[23:58:57]">&lt;stikonas&gt;</a></span><span class="message">can probably go down to even less than hex0 if it doesn't have to deal with file stuff...</span></div><div class="line" id="235913"><span class="nick" style="color:#234e69"><a href="#235913" label="[23:59:13]">&lt;OriansJ`&gt;</a></span><span class="message">even if it takes you 1 day to read a single line and validate it, in 646 days you'll be done</span></div><div class="line" id="235932"><span class="nick" style="color:#8dd3c7"><a href="#235932" label="[23:59:32]">&lt;stikonas&gt;</a></span><span class="message">exactly, but I'm not convinced that it's the best course of action to reduce binary size...</span></div><br /></div></body></html>