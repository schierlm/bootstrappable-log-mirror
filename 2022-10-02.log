<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-10-02.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="001222"><span class="nick" style="color:#389600"><a href="#001222" label="[00:12:22]">&lt;oriansj&gt;</a></span><span class="message">and I had a good laugh today, showed someone: <a rel="nofollow" href="https://www.teamten.com/lawrence/writings/coding-machines/">https://www.teamten.com/lawrence/writings/coding-machines/</a>  and they said &quot;The only unbelievable part of this short story is that they wrote a compiler in assembly&quot;</span></div><div class="line" id="001509"><span class="nick" style="color:#8dd3c7"><a href="#001509" label="[00:15:09]">&lt;muurkha&gt;</a></span><span class="message">hahaha</span></div><div class="line" id="001532"><span class="nick" style="color:#8dd3c7"><a href="#001532" label="[00:15:32]">&lt;muurkha&gt;</a></span><span class="message">how quickly people forget</span></div><div class="line" id="002458"><span class="nick" style="color:#389600"><a href="#002458" label="[00:24:58]">&lt;oriansj&gt;</a></span><span class="message">indeed, I've stopped telling people that I wrote one as they keep assuming I used GCC -S to generated the assembly as &quot;No one programs in assembly&quot;</span></div><div class="line" id="003600"><span class="nick" style="color:#6b8072"><a href="#003600" label="[00:36:00]">&lt;lanodan&gt;</a></span><span class="message">I wonder how those do when they see assembly in kernels, bootloaders, compilers, standard libraries, cryptographic and multimedia libraries, â€¦</span></div><div class="line" id="003855"><span class="nick" style="color:#389600"><a href="#003855" label="[00:38:55]">&lt;oriansj&gt;</a></span><span class="message">lanodan: how many programmers these days read other people's code that isn't posted on stack exchange?</span></div><div class="line" id="004329"><span class="nick" style="color:#6b8072"><a href="#004329" label="[00:43:29]">&lt;lanodan&gt;</a></span><span class="message">99% of programmers don't I guess</span></div><div class="line" id="004930"><span class="nick" style="color:#80b1d3"><a href="#004930" label="[00:49:30]">&lt;stikonas&gt;</a></span><span class="message">there isn't that much assembly in compilers though</span></div><div class="line" id="004949"><span class="nick" style="color:#80b1d3"><a href="#004949" label="[00:49:49]">&lt;stikonas&gt;</a></span><span class="message">probably about 1% in M2-Planet</span></div><div class="line" id="005004"><span class="nick" style="color:#80b1d3"><a href="#005004" label="[00:50:04]">&lt;stikonas&gt;</a></span><span class="message">and it supports quite a few ISAs</span></div><div class="line" id="005238"><span class="nick" style="color:#80b1d3"><a href="#005238" label="[00:52:38]">&lt;stikonas&gt;</a></span><span class="message">fossy: ready to merge that PR?</span></div><div class="line" id="012838"><span class="nick" style="color:#6d2462"><a href="#012838" label="[01:28:38]">&lt;fossy&gt;</a></span><span class="message">stikonas: yep :)</span></div><div class="line" id="012937"><span class="nick" style="color:#6d2462"><a href="#012937" label="[01:29:37]">&lt;fossy&gt;</a></span><span class="message">&quot;completely crash UEFI and cause a reboot...&quot; oh. that's quite impressively poor from uefi..</span></div><div class="line" id="013640"><span class="nick" style="color:#80b1d3"><a href="#013640" label="[01:36:40]">&lt;stikonas&gt;</a></span><span class="message">well, I didn't have time to debug what happened. But I guess if you overwrite incorrect memory region or something like that it could happen</span></div><div class="line" id="015306"><span class="nick" style="color:#6d2462"><a href="#015306" label="[01:53:06]">&lt;fossy&gt;</a></span><span class="message">yeah, possible</span></div><div class="line" id="015322"><span class="nick" style="color:#6d2462"><a href="#015322" label="[01:53:22]">&lt;fossy&gt;</a></span><span class="message">given uefi is quite low level as well</span></div><div class="line" id="015620"><span class="nick" style="color:#389600"><a href="#015620" label="[01:56:20]">&lt;oriansj&gt;</a></span><span class="message">more high level than DOS</span></div><div class="line" id="020423"><span class="nick" style="color:#80b1d3"><a href="#020423" label="[02:04:23]">&lt;stikonas&gt;</a></span><span class="message">hmm, another issue I hit is that I can't print anything using stderr... Which is strange but oh well... I'll just use stdout for errors</span></div><div class="line" id="021506"><span class="nick" style="color:#389600"><a href="#021506" label="[02:15:06]">&lt;oriansj&gt;</a></span><span class="message">stikonas: write errors to an openned file?</span></div><div class="line" id="021733"><span class="nick" style="color:#80b1d3"><a href="#021733" label="[02:17:33]">&lt;stikonas&gt;</a></span><span class="message">oriansj: well, I'm writing to stdout as we don't print anything to stdout anyway</span></div><div class="line" id="021752"><span class="nick" style="color:#389600"><a href="#021752" label="[02:17:52]">&lt;oriansj&gt;</a></span><span class="message">valid point</span></div><div class="line" id="021759"><span class="nick" style="color:#80b1d3"><a href="#021759" label="[02:17:59]">&lt;stikonas&gt;</a></span><span class="message">normal cc_amd64 output goes to .M1 file</span></div><div class="line" id="021805"><span class="nick" style="color:#80b1d3"><a href="#021805" label="[02:18:05]">&lt;stikonas&gt;</a></span><span class="message">which is fine I guess...</span></div><div class="line" id="021827"><span class="nick" style="color:#389600"><a href="#021827" label="[02:18:27]">&lt;oriansj&gt;</a></span><span class="message">well if one specifies an output file, otherwise the default was stdout</span></div><div class="line" id="021850"><span class="nick" style="color:#80b1d3"><a href="#021850" label="[02:18:50]">&lt;stikonas&gt;</a></span><span class="message">that's in POSIX</span></div><div class="line" id="021851"><span class="nick" style="color:#80b1d3"><a href="#021851" label="[02:18:51]">&lt;stikonas&gt;</a></span><span class="message">none of my earlier applications did that</span></div><div class="line" id="021900"><span class="nick" style="color:#80b1d3"><a href="#021900" label="[02:19:00]">&lt;stikonas&gt;</a></span><span class="message">they all could only print to file</span></div><div class="line" id="021911"><span class="nick" style="color:#80b1d3"><a href="#021911" label="[02:19:11]">&lt;stikonas&gt;</a></span><span class="message">partially because printing to stdout requires a bit more code</span></div><div class="line" id="021913"><span class="nick" style="color:#389600"><a href="#021913" label="[02:19:13]">&lt;oriansj&gt;</a></span><span class="message">and always required a second argument</span></div><div class="line" id="021935"><span class="nick" style="color:#80b1d3"><a href="#021935" label="[02:19:35]">&lt;stikonas&gt;</a></span><span class="message">now with cc_* I have higher level language than hex</span></div><div class="line" id="021946"><span class="nick" style="color:#80b1d3"><a href="#021946" label="[02:19:46]">&lt;stikonas&gt;</a></span><span class="message">so I did implement a better fgetc</span></div><div class="line" id="021953"><span class="nick" style="color:#80b1d3"><a href="#021953" label="[02:19:53]">&lt;stikonas&gt;</a></span><span class="message">whcih can convert chars to wchars</span></div><div class="line" id="022015"><span class="nick" style="color:#80b1d3"><a href="#022015" label="[02:20:15]">&lt;stikonas&gt;</a></span><span class="message">\n to \n\r, etc...</span></div><div class="line" id="022028"><span class="nick" style="color:#80b1d3"><a href="#022028" label="[02:20:28]">&lt;stikonas&gt;</a></span><span class="message"> (<a rel="nofollow" href="https://paste.debian.net/1255662/">https://paste.debian.net/1255662/</a>) </span></div><div class="line" id="022058"><span class="nick" style="color:#80b1d3"><a href="#022058" label="[02:20:58]">&lt;stikonas&gt;</a></span><span class="message">in posix it's a bit simpler, just use file descriptor 2...</span></div><div class="line" id="022443"><span class="nick" style="color:#389600"><a href="#022443" label="[02:24:43]">&lt;oriansj&gt;</a></span><span class="message">indeed, doing the posix port probably was good practice so you had the core down before dealing with UEFI's brokenness</span></div><div class="line" id="023007"><span class="nick" style="color:#80b1d3"><a href="#023007" label="[02:30:07]">&lt;stikonas&gt;</a></span><span class="message">yeah, that's why I first got relocatable stuff</span></div><div class="line" id="023012"><span class="nick" style="color:#80b1d3"><a href="#023012" label="[02:30:12]">&lt;stikonas&gt;</a></span><span class="message">because it's hard to debug both at the same time</span></div><div class="line" id="023022"><span class="nick" style="color:#80b1d3"><a href="#023022" label="[02:30:22]">&lt;stikonas&gt;</a></span><span class="message">which I was doing for earlier programs...</span></div><div class="line" id="023046"><span class="nick" style="color:#80b1d3"><a href="#023046" label="[02:30:46]">&lt;stikonas&gt;</a></span><span class="message">but in hindsight that's not the best way</span></div><div class="line" id="023353"><span class="nick" style="color:#80b1d3"><a href="#023353" label="[02:33:53]">&lt;stikonas&gt;</a></span><span class="message">now I still need to figure out what causes the crash when building M2-0.c</span></div><div class="line" id="023444"><span class="nick" style="color:#80b1d3"><a href="#023444" label="[02:34:44]">&lt;stikonas&gt;</a></span><span class="message">but that's probably for tomorrow</span></div><div class="line" id="023453"><span class="nick" style="color:#80b1d3"><a href="#023453" label="[02:34:53]">&lt;stikonas&gt;</a></span><span class="message">and I'm not yet sure how to debug it anyway</span></div><div class="line" id="023533"><span class="nick" style="color:#80b1d3"><a href="#023533" label="[02:35:33]">&lt;stikonas&gt;</a></span><span class="message">probably will start with debug_list function and hope that it gives some clue</span></div><div class="line" id="024544"><span class="nick" style="color:#389600"><a href="#024544" label="[02:45:44]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well the easiest path forward would be first verify cc_* on posix can run the M2-0.c correctly and dump its debug at a couple points into separate files and then try to do the same on uefi and that should narrow things down quickly</span></div><div class="line" id="024657"><span class="nick" style="color:#80b1d3"><a href="#024657" label="[02:46:57]">&lt;stikonas&gt;</a></span><span class="message">yes, it runs fine on posix...</span></div><div class="line" id="024741"><span class="nick" style="color:#389600"><a href="#024741" label="[02:47:41]">&lt;oriansj&gt;</a></span><span class="message">so the question is where the difference shows up</span></div><div class="line" id="030650"><span class="nick" style="color:#80b1d3"><a href="#030650" label="[03:06:50]">&lt;stikonas&gt;</a></span><span class="message">oriansj: oh I wonder if it's stack overflow</span></div><div class="line" id="030711"><span class="nick" style="color:#80b1d3"><a href="#030711" label="[03:07:11]">&lt;stikonas&gt;</a></span><span class="message">stack might be smaller there</span></div><div class="line" id="031405"><span class="nick" style="color:#234e69"><a href="#031405" label="[03:14:05]">&lt;stikonas[m]&gt;</a></span><span class="message">I think it is 128 KiB</span></div><div class="line" id="031508"><span class="nick" style="color:#389600"><a href="#031508" label="[03:15:08]">&lt;oriansj&gt;</a></span><span class="message">unlikely as the default stack on linux is 64KiB</span></div><div class="line" id="031634"><span class="nick" style="color:#234e69"><a href="#031634" label="[03:16:34]">&lt;stikonas[m]&gt;</a></span><span class="message">Isn't it a few MiBs</span></div><div class="line" id="031709"><span class="nick" style="color:#389600"><a href="#031709" label="[03:17:09]">&lt;oriansj&gt;</a></span><span class="message">ulimit -a</span></div><div class="line" id="055301"><span class="nick" style="color:#6c3d55"><a href="#055301" label="[05:53:01]">&lt;za3k&gt;</a></span><span class="message">i was thinking of trying to reduce the number of micro-stages in stage0's C bootstrapping</span></div><div class="line" id="055317"><span class="nick" style="color:#6c3d55"><a href="#055317" label="[05:53:17]">&lt;za3k&gt;</a></span><span class="message">is there an argument for this being a bad idea (aside from amount of work, of course)</span></div><div class="line" id="061604"><span class="nick" style="color:#6c3d55"><a href="#061604" label="[06:16:04]">&lt;za3k&gt;</a></span><span class="message">i can't find the docs with the zillion micro-stages any more. maybe i am confused, disregard for now</span></div><div class="line" id="062151"><span class="nick" style="color:#d9d9d9"><a href="#062151" label="[06:21:51]">&lt;sam_&gt;</a></span><span class="message">ok</span></div><div class="line" id="063929"><span class="nick" style="color:#389600"><a href="#063929" label="[06:39:29]">&lt;oriansj&gt;</a></span><span class="message">za3k: you are probably thinking of the steps between M2-Planet and GCC as there are a good few needed to get TCC to the state needed to build GCC.</span></div><div class="line" id="064725"><span class="nick" style="color:#d9d9d9"><a href="#064725" label="[06:47:25]">&lt;sam_&gt;</a></span><span class="message">they left very quickly sadly</span></div><div class="line" id="064732"><span class="nick" style="color:#d9d9d9"><a href="#064732" label="[06:47:32]">&lt;sam_&gt;</a></span><span class="message">that's why i was a bit stunned</span></div><div class="line" id="121947"><span class="nick" style="color:#80b1d3"><a href="#121947" label="[12:19:47]">&lt;stikonas&gt;</a></span><span class="message">oriansj: so on my stack ulimit -s is 8192 (KiB) and cc_amd64 still crashes if it's smaller than 2 MiB (you can go a bit smaller but 1950 already cause crashes)</span></div><div class="line" id="122006"><span class="nick" style="color:#80b1d3"><a href="#122006" label="[12:20:06]">&lt;stikonas&gt;</a></span><span class="message">so I think it's looking likely that this is the problem on UEFI too</span></div><div class="line" id="125450"><span class="nick" style="color:#389600"><a href="#125450" label="[12:54:50]">&lt;oriansj&gt;</a></span><span class="message">so we need to allocate a new memory block and use that as a stack instead</span></div><div class="line" id="125552"><span class="nick" style="color:#80b1d3"><a href="#125552" label="[12:55:52]">&lt;stikonas&gt;</a></span><span class="message">yes, that's what I was thinking too</span></div><div class="line" id="125605"><span class="nick" style="color:#80b1d3"><a href="#125605" label="[12:56:05]">&lt;stikonas&gt;</a></span><span class="message">so I found a bit of reference in UEFI specs</span></div><div class="line" id="125614"><span class="nick" style="color:#80b1d3"><a href="#125614" label="[12:56:14]">&lt;stikonas&gt;</a></span><span class="message">it says you get 128 KiB or more of stack space</span></div><div class="line" id="125640"><span class="nick" style="color:#80b1d3"><a href="#125640" label="[12:56:40]">&lt;stikonas&gt;</a></span><span class="message">and 4 KiB+ after calling ExitBootServices (so just before kernel is started)</span></div><div class="line" id="125843"><span class="nick" style="color:#389600"><a href="#125843" label="[12:58:43]">&lt;oriansj&gt;</a></span><span class="message">and if I remember correctly, don't arguments get passed on the stack to UEFI; would it have an issue with us using our own stack?</span></div><div class="line" id="130439"><span class="nick" style="color:#80b1d3"><a href="#130439" label="[13:04:39]">&lt;stikonas&gt;</a></span><span class="message">oriansj: it would but we don't have to fully use out own stack</span></div><div class="line" id="130456"><span class="nick" style="color:#80b1d3"><a href="#130456" label="[13:04:56]">&lt;stikonas&gt;</a></span><span class="message">we can keep two stacks and just offload heavy stuff to our own stack</span></div><div class="line" id="130552"><span class="nick" style="color:#80b1d3"><a href="#130552" label="[13:05:52]">&lt;stikonas&gt;</a></span><span class="message">I've freed up a register now to track our own stack</span></div><div class="line" id="130628"><span class="nick" style="color:#80b1d3"><a href="#130628" label="[13:06:28]">&lt;stikonas&gt;</a></span><span class="message">though that means heavy modifications to cc_amd64.S...</span></div><div class="line" id="130639"><span class="nick" style="color:#80b1d3"><a href="#130639" label="[13:06:39]">&lt;stikonas&gt;</a></span><span class="message">all those push rax, pop rax will have to be changed</span></div><div class="line" id="130731"><span class="nick" style="color:#80b1d3"><a href="#130731" label="[13:07:31]">&lt;stikonas&gt;</a></span><span class="message">and M2-Planet will also suffer from this problem...</span></div><div class="line" id="130733"><span class="nick" style="color:#80b1d3"><a href="#130733" label="[13:07:33]">&lt;stikonas&gt;</a></span><span class="message">probably even more</span></div><div class="line" id="132251"><span class="nick" style="color:#389600"><a href="#132251" label="[13:22:51]">&lt;oriansj&gt;</a></span><span class="message">actually don't</span></div><div class="line" id="132300"><span class="nick" style="color:#389600"><a href="#132300" label="[13:23:00]">&lt;oriansj&gt;</a></span><span class="message">consider this instead</span></div><div class="line" id="132319"><span class="nick" style="color:#389600"><a href="#132319" label="[13:23:19]">&lt;oriansj&gt;</a></span><span class="message">make a global for UEFI stack</span></div><div class="line" id="132328"><span class="nick" style="color:#389600"><a href="#132328" label="[13:23:28]">&lt;oriansj&gt;</a></span><span class="message">and a global for USER_STACK</span></div><div class="line" id="132348"><span class="nick" style="color:#389600"><a href="#132348" label="[13:23:48]">&lt;oriansj&gt;</a></span><span class="message">on start we write the stack to UEFI_STACK</span></div><div class="line" id="132400"><span class="nick" style="color:#389600"><a href="#132400" label="[13:24:00]">&lt;oriansj&gt;</a></span><span class="message">and allocate our new stack</span></div><div class="line" id="132422"><span class="nick" style="color:#389600"><a href="#132422" label="[13:24:22]">&lt;oriansj&gt;</a></span><span class="message">switch RSP to point to the end of the new stack</span></div><div class="line" id="132500"><span class="nick" style="color:#80b1d3"><a href="#132500" label="[13:25:00]">&lt;stikonas&gt;</a></span><span class="message">oh yes, that might work</span></div><div class="line" id="132501"><span class="nick" style="color:#389600"><a href="#132501" label="[13:25:01]">&lt;oriansj&gt;</a></span><span class="message">then inside of our syscalls we do the following: write the stack to USER_STACK</span></div><div class="line" id="132526"><span class="nick" style="color:#80b1d3"><a href="#132526" label="[13:25:26]">&lt;stikonas&gt;</a></span><span class="message">yeah, there we restore global stack</span></div><div class="line" id="132537"><span class="nick" style="color:#80b1d3"><a href="#132537" label="[13:25:37]">&lt;stikonas&gt;</a></span><span class="message">that will indeed hide most of the complexity behind a single function</span></div><div class="line" id="132601"><span class="nick" style="color:#389600"><a href="#132601" label="[13:26:01]">&lt;oriansj&gt;</a></span><span class="message">thus minimal changes</span></div><div class="line" id="132617"><span class="nick" style="color:#389600"><a href="#132617" label="[13:26:17]">&lt;oriansj&gt;</a></span><span class="message">and you can do it in two simple functions</span></div><div class="line" id="132635"><span class="nick" style="color:#389600"><a href="#132635" label="[13:26:35]">&lt;oriansj&gt;</a></span><span class="message">enter and exit</span></div><div class="line" id="132725"><span class="nick" style="color:#389600"><a href="#132725" label="[13:27:25]">&lt;oriansj&gt;</a></span><span class="message">ENTER_UEFI_STACK and EXIT_UEFI_STACK</span></div><div class="line" id="132804"><span class="nick" style="color:#80b1d3"><a href="#132804" label="[13:28:04]">&lt;stikonas&gt;</a></span><span class="message">yeah, those will move rsp to the required stack and save state of the other stack</span></div><div class="line" id="132832"><span class="nick" style="color:#389600"><a href="#132832" label="[13:28:32]">&lt;oriansj&gt;</a></span><span class="message">indeed and we can steal that trick in M2-Planet as well</span></div><div class="line" id="132934"><span class="nick" style="color:#80b1d3"><a href="#132934" label="[13:29:34]">&lt;stikonas&gt;</a></span><span class="message">well, we need it in 3 places</span></div><div class="line" id="133009"><span class="nick" style="color:#80b1d3"><a href="#133009" label="[13:30:09]">&lt;stikonas&gt;</a></span><span class="message">cc_amd.M1 (codegen part of cc_amd64) and I guess in M2-Planet/M2libc</span></div><div class="line" id="133012"><span class="nick" style="color:#389600"><a href="#133012" label="[13:30:12]">&lt;oriansj&gt;</a></span><span class="message">but that is much better than the althernate</span></div><div class="line" id="133016"><span class="nick" style="color:#80b1d3"><a href="#133016" label="[13:30:16]">&lt;stikonas&gt;</a></span><span class="message">indeed</span></div><div class="line" id="133041"><span class="nick" style="color:#80b1d3"><a href="#133041" label="[13:30:41]">&lt;stikonas&gt;</a></span><span class="message">I'll first get it into cc_amd.M1</span></div><div class="line" id="133116"><span class="nick" style="color:#80b1d3"><a href="#133116" label="[13:31:16]">&lt;stikonas&gt;</a></span><span class="message">which should let me compile M2-0.c but won't let M2-Planet to compile complex programs (ignoring for the moment that M2 is not ported to UEFI yet)</span></div><div class="line" id="133209"><span class="nick" style="color:#80b1d3"><a href="#133209" label="[13:32:09]">&lt;stikonas&gt;</a></span><span class="message">I guess 8 MiB should be fine for user stack</span></div><div class="line" id="133218"><span class="nick" style="color:#80b1d3"><a href="#133218" label="[13:32:18]">&lt;stikonas&gt;</a></span><span class="message">as we haven't encountered any problems in stage0-posix</span></div><div class="line" id="133420"><span class="nick" style="color:#80b1d3"><a href="#133420" label="[13:34:20]">&lt;stikonas&gt;</a></span><span class="message">and I guess reboot was happening because stack overflow was overwriting some critical parts of UEFI</span></div><div class="line" id="133724"><span class="nick" style="color:#389600"><a href="#133724" label="[13:37:24]">&lt;oriansj&gt;</a></span><span class="message">well technicallly M2-Planet isn't ported to Operating systems, only hardware platforms. It is M2libc that needs to be ported to UEFI and M2-Planet will happily use the new arbitrary rules humans put ontop of the hardware.</span></div><div class="line" id="133955"><span class="nick" style="color:#80b1d3"><a href="#133955" label="[13:39:55]">&lt;stikonas&gt;</a></span><span class="message">well, yes, but cc_amd64 thing has two parts in it</span></div><div class="line" id="133959"><span class="nick" style="color:#80b1d3"><a href="#133959" label="[13:39:59]">&lt;stikonas&gt;</a></span><span class="message">one is adding it directlyu</span></div><div class="line" id="134049"><span class="nick" style="color:#80b1d3"><a href="#134049" label="[13:40:49]">&lt;stikonas&gt;</a></span><span class="message">well, maybe the second one goes to m2libc too...</span></div><div class="line" id="134106"><span class="nick" style="color:#80b1d3"><a href="#134106" label="[13:41:06]">&lt;stikonas&gt;</a></span><span class="message">to make sure that bootstrap M2 binary also has ENTER_UEFI_STACK and EXIT_UEFI_STACK</span></div><div class="line" id="134111"><span class="nick" style="color:#389600"><a href="#134111" label="[13:41:11]">&lt;oriansj&gt;</a></span><span class="message">So the output of M2-Planet will always work on the hardware but it is the C code in M2libc is what breaks on different Operating systems (as they have different syscall methods and ways of passing arguments and different values to pass to the operating system)</span></div><div class="line" id="134234"><span class="nick" style="color:#389600"><a href="#134234" label="[13:42:34]">&lt;oriansj&gt;</a></span><span class="message">so the changes would be entirely in M2libc and with a bit of special work in the libc-core.M1 and libc-full.M1</span></div><div class="line" id="134322"><span class="nick" style="color:#389600"><a href="#134322" label="[13:43:22]">&lt;oriansj&gt;</a></span><span class="message">so we might end up having to make libc-uefi.M1</span></div><div class="line" id="134336"><span class="nick" style="color:#80b1d3"><a href="#134336" label="[13:43:36]">&lt;stikonas&gt;</a></span><span class="message">yeah, this doesn't sound too bad</span></div><div class="line" id="134348"><span class="nick" style="color:#80b1d3"><a href="#134348" label="[13:43:48]">&lt;stikonas&gt;</a></span><span class="message">libc-uefi.M1 was always going to be the case</span></div><div class="line" id="134407"><span class="nick" style="color:#80b1d3"><a href="#134407" label="[13:44:07]">&lt;stikonas&gt;</a></span><span class="message">we need to deal with command line arguments, etc...</span></div><div class="line" id="134422"><span class="nick" style="color:#389600"><a href="#134422" label="[13:44:22]">&lt;oriansj&gt;</a></span><span class="message">well we can do that entirely in C code</span></div><div class="line" id="134521"><span class="nick" style="color:#80b1d3"><a href="#134521" label="[13:45:21]">&lt;stikonas&gt;</a></span><span class="message">well, in principle yes</span></div><div class="line" id="134539"><span class="nick" style="color:#80b1d3"><a href="#134539" label="[13:45:39]">&lt;stikonas&gt;</a></span><span class="message">maybe it's simpler that way</span></div><div class="line" id="134554"><span class="nick" style="color:#389600"><a href="#134554" label="[13:45:54]">&lt;oriansj&gt;</a></span><span class="message">just have libc-uefi.M1 call FUNCTION__init_arguments which builds an array and returns it</span></div><div class="line" id="134558"><span class="nick" style="color:#80b1d3"><a href="#134558" label="[13:45:58]">&lt;stikonas&gt;</a></span><span class="message">cause it will have to me more sophisticated than what I have in early prototypes</span></div><div class="line" id="134625"><span class="nick" style="color:#80b1d3"><a href="#134625" label="[13:46:25]">&lt;stikonas&gt;</a></span><span class="message">(I think right now arguments are split on space, so double space means an empty argument which we might not want in M2libc)</span></div><div class="line" id="134709"><span class="nick" style="color:#80b1d3"><a href="#134709" label="[13:47:09]">&lt;stikonas&gt;</a></span><span class="message">anyway, let's first get cc_amd64.S working</span></div><div class="line" id="134724"><span class="nick" style="color:#389600"><a href="#134724" label="[13:47:24]">&lt;oriansj&gt;</a></span><span class="message">indeed</span></div><div class="line" id="134746"><span class="nick" style="color:#389600"><a href="#134746" label="[13:47:46]">&lt;oriansj&gt;</a></span><span class="message">soon it will all be downhill</span></div><div class="line" id="135205"><span class="nick" style="color:#80b1d3"><a href="#135205" label="[13:52:05]">&lt;stikonas&gt;</a></span><span class="message">well, at the very least soon it will be C code + some light assembly</span></div><div class="line" id="135418"><span class="nick" style="color:#389600"><a href="#135418" label="[13:54:18]">&lt;oriansj&gt;</a></span><span class="message">with the added bonus of being able to use normal C code directly on UEFI rather than having to do the weird song and dance you need to do for UEFI right now</span></div><div class="line" id="135711"><span class="nick" style="color:#80b1d3"><a href="#135711" label="[13:57:11]">&lt;stikonas&gt;</a></span><span class="message">but don't we need a patch to M2-Planet to support UEFI/Windows calling convention?</span></div><div class="line" id="135722"><span class="nick" style="color:#80b1d3"><a href="#135722" label="[13:57:22]">&lt;stikonas&gt;</a></span><span class="message">we don't have access to call stack in C</span></div><div class="line" id="135759"><span class="nick" style="color:#80b1d3"><a href="#135759" label="[13:57:59]">&lt;stikonas&gt;</a></span><span class="message">actually if I remember correctly, M2-Planet passes all arguments on stack</span></div><div class="line" id="135814"><span class="nick" style="color:#80b1d3"><a href="#135814" label="[13:58:14]">&lt;stikonas&gt;</a></span><span class="message">so that might be fine, but we also need to populate rcx, rdx, r8 and r9</span></div><div class="line" id="140213"><span class="nick" style="color:#389600"><a href="#140213" label="[14:02:13]">&lt;oriansj&gt;</a></span><span class="message">stikonas: no because M2-Planet doesn't even deal with POSIX's calling convention</span></div><div class="line" id="140226"><span class="nick" style="color:#80b1d3"><a href="#140226" label="[14:02:26]">&lt;stikonas&gt;</a></span><span class="message">oh, so where does that happen?</span></div><div class="line" id="140237"><span class="nick" style="color:#389600"><a href="#140237" label="[14:02:37]">&lt;oriansj&gt;</a></span><span class="message">the only dealing with the calling convention is in M2libc in ASM blocks</span></div><div class="line" id="140241"><span class="nick" style="color:#80b1d3"><a href="#140241" label="[14:02:41]">&lt;stikonas&gt;</a></span><span class="message">oh yes...</span></div><div class="line" id="140258"><span class="nick" style="color:#80b1d3"><a href="#140258" label="[14:02:58]">&lt;stikonas&gt;</a></span><span class="message">well, so we might still need to insert small asm blocks in uefi wrappers then...</span></div><div class="line" id="140328"><span class="nick" style="color:#389600"><a href="#140328" label="[14:03:28]">&lt;oriansj&gt;</a></span><span class="message">well we would be making a clone of the Linux subfolder</span></div><div class="line" id="140328"><span class="nick" style="color:#80b1d3"><a href="#140328" label="[14:03:28]">&lt;stikonas&gt;</a></span><span class="message">or how else would you get required arguments into rcx...r9 ?</span></div><div class="line" id="140333"><span class="nick" style="color:#80b1d3"><a href="#140333" label="[14:03:33]">&lt;stikonas&gt;</a></span><span class="message">yes, that is true</span></div><div class="line" id="140345"><span class="nick" style="color:#80b1d3"><a href="#140345" label="[14:03:45]">&lt;stikonas&gt;</a></span><span class="message">and then replace all those fgetc, etc with uefi equivalents</span></div><div class="line" id="140348"><span class="nick" style="color:#389600"><a href="#140348" label="[14:03:48]">&lt;oriansj&gt;</a></span><span class="message">with nothing but the UEFI specific crap</span></div><div class="line" id="140417"><span class="nick" style="color:#389600"><a href="#140417" label="[14:04:17]">&lt;oriansj&gt;</a></span><span class="message">but we can make them behave the same but be UEFI compatible</span></div><div class="line" id="140734"><span class="nick" style="color:#80b1d3"><a href="#140734" label="[14:07:34]">&lt;stikonas&gt;</a></span><span class="message">yes, in cc_amd64 I already tried to make fputc slightly more compatible (so it special cases file descriptor 2 and then uses different uefi function)</span></div><div class="line" id="140753"><span class="nick" style="color:#80b1d3"><a href="#140753" label="[14:07:53]">&lt;stikonas&gt;</a></span><span class="message">hmm, though I wonder whether real UEFI file can have file descriptor 2...</span></div><div class="line" id="140826"><span class="nick" style="color:#80b1d3"><a href="#140826" label="[14:08:26]">&lt;stikonas&gt;</a></span><span class="message">(though this shouldn't affect cc_amd64 as I was careful and used another variable/register for that stderr flag)</span></div><div class="line" id="140939"><span class="nick" style="color:#389600"><a href="#140939" label="[14:09:39]">&lt;oriansj&gt;</a></span><span class="message">well we can flush that out with a good deal of experiments in M2libc</span></div><div class="line" id="141421"><span class="nick" style="color:#80b1d3"><a href="#141421" label="[14:14:21]">&lt;stikonas&gt;</a></span><span class="message">well, it's a pointer in UEFI</span></div><div class="line" id="141440"><span class="nick" style="color:#80b1d3"><a href="#141440" label="[14:14:40]">&lt;stikonas&gt;</a></span><span class="message">so unlikely to have value 2</span></div><div class="line" id="141507"><span class="nick" style="color:#389600"><a href="#141507" label="[14:15:07]">&lt;oriansj&gt;</a></span><span class="message">stikonas: it is a pointer in M2libc as well</span></div><div class="line" id="141721"><span class="nick" style="color:#389600"><a href="#141721" label="[14:17:21]">&lt;oriansj&gt;</a></span><span class="message">if you look in M2libc/stdio.c it shows up real quick</span></div><div class="line" id="141743"><span class="nick" style="color:#389600"><a href="#141743" label="[14:17:43]">&lt;oriansj&gt;</a></span><span class="message">stdin, stdout and stderr are full structs</span></div><div class="line" id="141808"><span class="nick" style="color:#389600"><a href="#141808" label="[14:18:08]">&lt;oriansj&gt;</a></span><span class="message">with buffers</span></div><div class="line" id="142249"><span class="nick" style="color:#389600"><a href="#142249" label="[14:22:49]">&lt;oriansj&gt;</a></span><span class="message">so whatever arbitrary things UEFI needs, shouldn't be a problem</span></div><div class="line" id="142637"><span class="nick" style="color:#389600"><a href="#142637" label="[14:26:37]">&lt;oriansj&gt;</a></span><span class="message">only in Mes.c does one have the hardcoded value of 0,1,2 for stdin, stdout and stderr</span></div><div class="line" id="153102"><span class="nick" style="color:#80b1d3"><a href="#153102" label="[15:31:02]">&lt;stikonas&gt;</a></span><span class="message">oriansj: so things are even simpler than what you planned for</span></div><div class="line" id="153113"><span class="nick" style="color:#80b1d3"><a href="#153113" label="[15:31:13]">&lt;stikonas&gt;</a></span><span class="message">we don't need to restore uefi stack before each uefi call</span></div><div class="line" id="153125"><span class="nick" style="color:#80b1d3"><a href="#153125" label="[15:31:25]">&lt;stikonas&gt;</a></span><span class="message">fputc/fgetc are happy with user stack</span></div><div class="line" id="153151"><span class="nick" style="color:#80b1d3"><a href="#153151" label="[15:31:51]">&lt;stikonas&gt;</a></span><span class="message">so I just need to call enter/exit_uefi_stack at the beginning and end of program</span></div><div class="line" id="153549"><span class="nick" style="color:#80b1d3"><a href="#153549" label="[15:35:49]">&lt;stikonas&gt;</a></span><span class="message">and M2-0.c compiles to at least good size</span></div><div class="line" id="153556"><span class="nick" style="color:#80b1d3"><a href="#153556" label="[15:35:56]">&lt;stikonas&gt;</a></span><span class="message">(same as on POSIX)</span></div><div class="line" id="153616"><span class="nick" style="color:#80b1d3"><a href="#153616" label="[15:36:16]">&lt;stikonas&gt;</a></span><span class="message">and in total I had to allocate 32 MiB of heap space</span></div><div class="line" id="153631"><span class="nick" style="color:#80b1d3"><a href="#153631" label="[15:36:31]">&lt;stikonas&gt;</a></span><span class="message">out of which 8 went to stack</span></div><div class="line" id="153638"><span class="nick" style="color:#80b1d3"><a href="#153638" label="[15:36:38]">&lt;stikonas&gt;</a></span><span class="message">though maybe I can try to reduce it a bit...</span></div><div class="line" id="153741"><span class="nick" style="color:#80b1d3"><a href="#153741" label="[15:37:41]">&lt;stikonas&gt;</a></span><span class="message">ok, 16 MiB (out of which 4 goes to stack) seems enough to build M2</span></div><div class="line" id="154040"><span class="nick" style="color:#80b1d3"><a href="#154040" label="[15:40:40]">&lt;stikonas&gt;</a></span><span class="message">oriansj: so basically <a rel="nofollow" href="https://git.stikonas.eu/andrius/stage0-uefi/commit/d6d8b2b7070f92ac43835990b64a7f0ab657b826">https://git.stikonas.eu/andrius/stage0-uefi/commit/d6d8b2b7070f92ac43835990b64a7f0ab657b826</a> </span></div><div class="line" id="154210"><span class="nick" style="color:#80b1d3"><a href="#154210" label="[15:42:10]">&lt;stikonas&gt;</a></span><span class="message">wait, that looks wrong... Not sure why it works</span></div><div class="line" id="154232"><span class="nick" style="color:#80b1d3"><a href="#154232" label="[15:42:32]">&lt;stikonas&gt;</a></span><span class="message">oh I know...</span></div><div class="line" id="154320"><span class="nick" style="color:#80b1d3"><a href="#154320" label="[15:43:20]">&lt;stikonas&gt;</a></span><span class="message">exit_uefi_stack is b0rked but mov rsp, rbp                       # restore stack just before termination saves us</span></div><div class="line" id="154629"><span class="nick" style="color:#80b1d3"><a href="#154629" label="[15:46:29]">&lt;stikonas&gt;</a></span><span class="message">anyway, fixed pushed</span></div><div class="line" id="154638"><span class="nick" style="color:#80b1d3"><a href="#154638" label="[15:46:38]">&lt;stikonas&gt;</a></span><span class="message">and I can start working on GAS-&gt;M1 conversion</span></div><div class="line" id="184333"><span class="nick">***</span><span class="message notice">ay is now known as Andrew</span></div><div class="line" id="190958"><span class="nick" style="color:#bc80bd"><a href="#190958" label="[19:09:58]">&lt;Hagfish&gt;</a></span><span class="message">&quot;soon it will be C code + some light assembly&quot;</span></div><div class="line" id="191005"><span class="nick" style="color:#bc80bd"><a href="#191005" label="[19:10:05]">&lt;Hagfish&gt;</a></span><span class="message">that's great to hear</span></div><div class="line" id="191025"><span class="nick" style="color:#bc80bd"><a href="#191025" label="[19:10:25]">&lt;Hagfish&gt;</a></span><span class="message">i was thinking that october would be another great month for bootstrapping, and it seems to be off to a great start already :)</span></div><br /></div></body></html>