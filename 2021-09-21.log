<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-09-21.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000424"><span class="nick" style="color:#389600"><a href="#000424" label="[00:04:24]">&lt;oriansj&gt;</a></span><span class="message">this CPU supports RV64IFMAD and depreciated instructions v1.0 1.1 and 1.2 sort of thing</span></div><div class="line" id="000520"><span class="nick" style="color:#389600"><a href="#000520" label="[00:05:20]">&lt;oriansj&gt;</a></span><span class="message">That way everyone has 20 years to stop using an instruction before its opcodes become available</span></div><div class="line" id="014429"><span class="nick" style="color:#2e2a4a"><a href="#014429" label="[01:44:29]">&lt;stikonas&gt;</a></span><span class="message">fossy: live-bootstrap readme still refers to binaries in /after/bin...</span></div><div class="line" id="014449"><span class="nick" style="color:#2e2a4a"><a href="#014449" label="[01:44:49]">&lt;stikonas&gt;</a></span><span class="message">and I merged guile now</span></div><div class="line" id="015327"><span class="nick" style="color:#389600"><a href="#015327" label="[01:53:27]">&lt;oriansj&gt;</a></span><span class="message">nice. Fully bootstrapped guile3?</span></div><div class="line" id="015553"><span class="nick" style="color:#2e2a4a"><a href="#015553" label="[01:55:53]">&lt;stikonas&gt;</a></span><span class="message">oriansj: yes and merged</span></div><div class="line" id="015607"><span class="nick" style="color:#2e2a4a"><a href="#015607" label="[01:56:07]">&lt;stikonas&gt;</a></span><span class="message">I haven't ran live-bootstrap right now...</span></div><div class="line" id="015611"><span class="nick" style="color:#2e2a4a"><a href="#015611" label="[01:56:11]">&lt;stikonas&gt;</a></span><span class="message">just reviewed</span></div><div class="line" id="015615"><span class="nick" style="color:#2e2a4a"><a href="#015615" label="[01:56:15]">&lt;stikonas&gt;</a></span><span class="message">at some point I'll run it</span></div><div class="line" id="015628"><span class="nick" style="color:#2e2a4a"><a href="#015628" label="[01:56:28]">&lt;stikonas&gt;</a></span><span class="message">trying to finish off cc_riscv64...</span></div><div class="line" id="015637"><span class="nick" style="color:#2e2a4a"><a href="#015637" label="[01:56:37]">&lt;stikonas&gt;</a></span><span class="message">it's getting close</span></div><div class="line" id="015735"><span class="nick" style="color:#2e2a4a"><a href="#015735" label="[01:57:35]">&lt;stikonas&gt;</a></span><span class="message">remaining things are mostly variables and some minor things like [] and -&gt;</span></div><div class="line" id="015814"><span class="nick" style="color:#389600"><a href="#015814" label="[01:58:14]">&lt;oriansj&gt;</a></span><span class="message">nice</span></div><div class="line" id="015907"><span class="nick" style="color:#389600"><a href="#015907" label="[01:59:07]">&lt;oriansj&gt;</a></span><span class="message">So live-bootstrap is just a short path away from building the guix bootstrap tarball</span></div><div class="line" id="015947"><span class="nick" style="color:#2e2a4a"><a href="#015947" label="[01:59:47]">&lt;stikonas&gt;</a></span><span class="message">yeah, I think so</span></div><div class="line" id="015956"><span class="nick" style="color:#2e2a4a"><a href="#015956" label="[01:59:56]">&lt;stikonas&gt;</a></span><span class="message">might be nice to build newer binutils/gcc...</span></div><div class="line" id="020010"><span class="nick" style="color:#2e2a4a"><a href="#020010" label="[02:00:10]">&lt;stikonas&gt;</a></span><span class="message">binutils should be quite easy...</span></div><div class="line" id="020041"><span class="nick" style="color:#2e2a4a"><a href="#020041" label="[02:00:41]">&lt;stikonas&gt;</a></span><span class="message">well, there is that autogen issue, we can't rebuild top level gcc/binutils configure files but they are not essential</span></div><div class="line" id="020047"><span class="nick" style="color:#389600"><a href="#020047" label="[02:00:47]">&lt;oriansj&gt;</a></span><span class="message">certainly would enable a much faster bootstrap tarball for guix and a bootstrap without any cheating.</span></div><div class="line" id="032809"><span class="nick" style="color:#6b8072"><a href="#032809" label="[03:28:09]">&lt;fossy&gt;</a></span><span class="message">stikonas[m]: oh, yes. I will fix that in the next PR.</span></div><div class="line" id="033134"><span class="nick" style="color:#80b1d3"><a href="#033134" label="[03:31:34]">&lt;Hagfish&gt;</a></span><span class="message">that's exciting</span></div><div class="line" id="033158"><span class="nick" style="color:#80b1d3"><a href="#033158" label="[03:31:58]">&lt;Hagfish&gt;</a></span><span class="message">can you list some milestones along that short path?</span></div><div class="line" id="033328"><span class="nick" style="color:#80b1d3"><a href="#033328" label="[03:33:28]">&lt;Hagfish&gt;</a></span><span class="message">also, is there a chance that the guix community will publicise the achievement when it occurs, to raise awareness for people who might want to contribute here?</span></div><div class="line" id="034429"><span class="nick" style="color:#389600"><a href="#034429" label="[03:44:29]">&lt;oriansj&gt;</a></span><span class="message">Hagfish: well looking at the list of requirements <a rel="nofollow" href="https://guix.gnu.org/manual/en/html_node/Requirements.html">https://guix.gnu.org/manual/en/html_node/Requirements.html</a>  we have the two big ones (guile and make) and I would have to dig in the remaining bits to know exactly what they take to bootstrap.</span></div><div class="line" id="034545"><span class="nick" style="color:#80b1d3"><a href="#034545" label="[03:45:45]">&lt;Hagfish&gt;</a></span><span class="message">oh, i forgot about make</span></div><div class="line" id="034547"><span class="nick" style="color:#80b1d3"><a href="#034547" label="[03:45:47]">&lt;Hagfish&gt;</a></span><span class="message">thanks for the link</span></div><div class="line" id="034829"><span class="nick" style="color:#80b1d3"><a href="#034829" label="[03:48:29]">&lt;Hagfish&gt;</a></span><span class="message">actually, the page doesn't list a version requirement for make, and there's version 4.2.1 listed here <a rel="nofollow" href="https://github.com/stikonas/live-bootstrap/blob/master/parts.rst#75make-421">https://github.com/stikonas/live-bootstrap/blob/master/parts.rst#75make-421</a> </span></div><div class="line" id="034841"><span class="nick" style="color:#389600"><a href="#034841" label="[03:48:41]">&lt;oriansj&gt;</a></span><span class="message">possibly as they have previously published in the past; however I am uncertain how the having to walk back the last post about full source bootstrapping when there was a massive guile blob in the mix</span></div><div class="line" id="034856"><span class="nick" style="color:#80b1d3"><a href="#034856" label="[03:48:56]">&lt;Hagfish&gt;</a></span><span class="message">hopefully the make version is sufficient</span></div><div class="line" id="034929"><span class="nick" style="color:#80b1d3"><a href="#034929" label="[03:49:29]">&lt;Hagfish&gt;</a></span><span class="message">yeah, the guile blob sort of complicated the story</span></div><div class="line" id="034930"><span class="nick" style="color:#389600"><a href="#034930" label="[03:49:30]">&lt;oriansj&gt;</a></span><span class="message">if not civodul, janneke and rekado are here and guix developers</span></div><div class="line" id="035033"><span class="nick" style="color:#389600"><a href="#035033" label="[03:50:33]">&lt;oriansj&gt;</a></span><span class="message">but no blob (except a kernel) is certainly a great step forward.</span></div><div class="line" id="035447"><span class="nick" style="color:#389600"><a href="#035447" label="[03:54:47]">&lt;oriansj&gt;</a></span><span class="message">Removing the kernel blob is going to require a bit more work; removing the bios blob and the microcode blobs basically require us to build our own hardware.</span></div><div class="line" id="035508"><span class="nick" style="color:#80b1d3"><a href="#035508" label="[03:55:08]">&lt;Hagfish&gt;</a></span><span class="message">yeah, i think the latter steps are really at the cutting edge of what's even being attempted</span></div><div class="line" id="035516"><span class="nick" style="color:#80b1d3"><a href="#035516" label="[03:55:16]">&lt;Hagfish&gt;</a></span><span class="message">but it's good to see there are projects in that field</span></div><div class="line" id="035546"><span class="nick" style="color:#80b1d3"><a href="#035546" label="[03:55:46]">&lt;Hagfish&gt;</a></span><span class="message">was there a plan to use tccboot to replace the kernel with a small bootloading compiler?</span></div><div class="line" id="035603"><span class="nick" style="color:#80b1d3"><a href="#035603" label="[03:56:03]">&lt;Hagfish&gt;</a></span><span class="message">i'm assuming the compiler is smaller than a minimal kernel, but maybe that's wrong</span></div><div class="line" id="035718"><span class="nick" style="color:#6d2462"><a href="#035718" label="[03:57:18]">&lt;xentrac&gt;</a></span><span class="message">depends on the hardware but I've never seen a machine where a minimal kernel would be 100K!</span></div><div class="line" id="035735"><span class="nick" style="color:#389600"><a href="#035735" label="[03:57:35]">&lt;oriansj&gt;</a></span><span class="message">well a minimal kernel could easily be under 64KB</span></div><div class="line" id="035738"><span class="nick" style="color:#6d2462"><a href="#035738" label="[03:57:38]">&lt;xentrac&gt;</a></span><span class="message">Linux is humongous largely because of all the drivers for hardware I don't have</span></div><div class="line" id="035826"><span class="nick" style="color:#389600"><a href="#035826" label="[03:58:26]">&lt;oriansj&gt;</a></span><span class="message">we only need hard drive drivers and maybe ps/2 or COM keyboard</span></div><div class="line" id="035845"><span class="nick" style="color:#389600"><a href="#035845" label="[03:58:45]">&lt;oriansj&gt;</a></span><span class="message">possibly floppy disks or CD support</span></div><div class="line" id="035854"><span class="nick" style="color:#80b1d3"><a href="#035854" label="[03:58:54]">&lt;Hagfish&gt;</a></span><span class="message">yeah, i guess the question of &quot;how big is the kernel?&quot; has the answer &quot;it depends&quot; (like all good questions), because the answer can be hardware-specific</span></div><div class="line" id="035906"><span class="nick" style="color:#389600"><a href="#035906" label="[03:59:06]">&lt;oriansj&gt;</a></span><span class="message">only needs to support single core and single tasking</span></div><div class="line" id="035943"><span class="nick" style="color:#389600"><a href="#035943" label="[03:59:43]">&lt;oriansj&gt;</a></span><span class="message">so basically not much more than BootOS that exists in 510bytes</span></div><div class="line" id="040009"><span class="nick" style="color:#6d2462"><a href="#040009" label="[04:00:09]">&lt;xentrac&gt;</a></span><span class="message">you can do IDE PIO in a few lines of code</span></div><div class="line" id="040016"><span class="nick" style="color:#6d2462"><a href="#040016" label="[04:00:16]">&lt;xentrac&gt;</a></span><span class="message">USB is ... bigger</span></div><div class="line" id="040021"><span class="nick" style="color:#389600"><a href="#040021" label="[04:00:21]">&lt;oriansj&gt;</a></span><span class="message">only a proper filesystem and a handful of POSIX style syscalls</span></div><div class="line" id="040043"><span class="nick" style="color:#389600"><a href="#040043" label="[04:00:43]">&lt;oriansj&gt;</a></span><span class="message">xentrac: skip USB entirely when bootstrapping until after Linux</span></div><div class="line" id="040109"><span class="nick" style="color:#6d2462"><a href="#040109" label="[04:01:09]">&lt;xentrac&gt;</a></span><span class="message">a minimal kernel doesn't even need POSIX syscalls, just an IPC mechanism that allows a POSIX server to handle syscalls</span></div><div class="line" id="040129"><span class="nick" style="color:#6d2462"><a href="#040129" label="[04:01:29]">&lt;xentrac&gt;</a></span><span class="message">of course then you have to write the POSIX server but you might be able to write it in, say, Scheme</span></div><div class="line" id="040151"><span class="nick" style="color:#389600"><a href="#040151" label="[04:01:51]">&lt;oriansj&gt;</a></span><span class="message">xentrac: scheme bootstrapping is much harder than C bootstrapping</span></div><div class="line" id="040207"><span class="nick" style="color:#6d2462"><a href="#040207" label="[04:02:07]">&lt;xentrac&gt;</a></span><span class="message">well, or Ur-Scheme ;)</span></div><div class="line" id="040231"><span class="nick" style="color:#389600"><a href="#040231" label="[04:02:31]">&lt;oriansj&gt;</a></span><span class="message">which mes-m2 can't run and MesCC can't run on</span></div><div class="line" id="040245"><span class="nick" style="color:#6d2462"><a href="#040245" label="[04:02:45]">&lt;xentrac&gt;</a></span><span class="message">oh, of course not</span></div><div class="line" id="040258"><span class="nick" style="color:#6d2462"><a href="#040258" label="[04:02:58]">&lt;xentrac&gt;</a></span><span class="message">but you wouldn't have to add much to Ur-Scheme to write a POSIX server in it</span></div><div class="line" id="040353"><span class="nick" style="color:#389600"><a href="#040353" label="[04:03:53]">&lt;oriansj&gt;</a></span><span class="message">I wouldn't have to add much onto BootOS to have a minimal POSIX either and bootstrapping Assembly is much easier.</span></div><div class="line" id="040357"><span class="nick" style="color:#6d2462"><a href="#040357" label="[04:03:57]">&lt;xentrac&gt;</a></span><span class="message">the approach I'm taking with Qfitzah is that maybe an interpreter for a higher-level language than Scheme can be smaller if it doesn't have to be efficient</span></div><div class="line" id="040406"><span class="nick" style="color:#6d2462"><a href="#040406" label="[04:04:06]">&lt;xentrac&gt;</a></span><span class="message">bootstrapping assembly is definitely easier</span></div><div class="line" id="040500"><span class="nick" style="color:#389600"><a href="#040500" label="[04:05:00]">&lt;oriansj&gt;</a></span><span class="message">but writing a full kernel in Assembly tends to be quite unportable</span></div><div class="line" id="040557"><span class="nick" style="color:#389600"><a href="#040557" label="[04:05:57]">&lt;oriansj&gt;</a></span><span class="message">So it presents a problem: Get M2-Planet running with BIOS calls or do something unportable to solve the kernel bootstrap problem.</span></div><div class="line" id="040713"><span class="nick" style="color:#6d2462"><a href="#040713" label="[04:07:13]">&lt;xentrac&gt;</a></span><span class="message">well, the parts that *really* need to be in the kernel also need to be nonportable</span></div><div class="line" id="040802"><span class="nick" style="color:#6d2462"><a href="#040802" label="[04:08:02]">&lt;xentrac&gt;</a></span><span class="message">I mean you need thread switching, SMP setup, system call handling, interrupt handling, and, if you're using protected mode, page table setup</span></div><div class="line" id="041304"><span class="nick" style="color:#389600"><a href="#041304" label="[04:13:04]">&lt;oriansj&gt;</a></span><span class="message">well minus kaem doing fork; there isn't any thread switching and just programs running to completion.</span></div><div class="line" id="041347"><span class="nick" style="color:#389600"><a href="#041347" label="[04:13:47]">&lt;oriansj&gt;</a></span><span class="message">So instead of a process queue, perhaps a process stack?</span></div><div class="line" id="041430"><span class="nick" style="color:#389600"><a href="#041430" label="[04:14:30]">&lt;oriansj&gt;</a></span><span class="message">run until fork. push onto stack and run forked process to completion. Pop off stack and continue running until completion.</span></div><div class="line" id="041553"><span class="nick" style="color:#389600"><a href="#041553" label="[04:15:53]">&lt;oriansj&gt;</a></span><span class="message">which is good enough to get us to M2-Planet and whatever kernel we bootstrap from there.</span></div><div class="line" id="041655"><span class="nick" style="color:#389600"><a href="#041655" label="[04:16:55]">&lt;oriansj&gt;</a></span><span class="message">perhaps I'll just punt that problem until I know more about writing and bootstrapping a Kernel</span></div><div class="line" id="041803"><span class="nick" style="color:#389600"><a href="#041803" label="[04:18:03]">&lt;oriansj&gt;</a></span><span class="message">unless bauen1 has something of interest to share for dropping our bootstrap kernel requirements</span></div><div class="line" id="042325"><span class="nick" style="color:#6d2462"><a href="#042325" label="[04:23:25]">&lt;xentrac&gt;</a></span><span class="message">yeah, for running a build batch job you don't really need thread switching</span></div><div class="line" id="042356"><span class="nick" style="color:#6d2462"><a href="#042356" label="[04:23:56]">&lt;xentrac&gt;</a></span><span class="message">except in the sense that when a process terminates you need to switch back to some other process</span></div><div class="line" id="042453"><span class="nick" style="color:#6d2462"><a href="#042453" label="[04:24:53]">&lt;xentrac&gt;</a></span><span class="message">but thread switching is really very simple.  you save all your callee-saved registers (including SP and the return PC) in a struct, then overwrite them with values loaded from a different struct</span></div><div class="line" id="042554"><span class="nick" style="color:#6d2462"><a href="#042554" label="[04:25:54]">&lt;xentrac&gt;</a></span><span class="message">you have to save them anyway on system call entry if your kernel isn't itself multithreaded</span></div><div class="line" id="042618"><span class="nick" style="color:#6d2462"><a href="#042618" label="[04:26:18]">&lt;xentrac&gt;</a></span><span class="message">I mean, you have to save them anyway on system call entry.  If your kernel isn't itself multithreaded, that's all you have to do</span></div><div class="line" id="042654"><span class="nick" style="color:#6d2462"><a href="#042654" label="[04:26:54]">&lt;xentrac&gt;</a></span><span class="message">(assuming the kernel is protected, anyway)</span></div><br /></div></body></html>