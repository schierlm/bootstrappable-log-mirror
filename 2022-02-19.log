<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-02-19.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000038"><span class="nick" style="color:#389600"><a href="#000038" label="[00:00:38]">&lt;stikonas&gt;</a></span><span class="message">yaeh, it would have been nice to have a tag but it's not such a big deal</span></div><div class="line" id="000130"><span class="nick" style="color:#389600"><a href="#000130" label="[00:01:30]">&lt;stikonas&gt;</a></span><span class="message">definitely much better state than autogen is in...</span></div><div class="line" id="000132"><span class="nick" style="color:#2e2a4a"><a href="#000132" label="[00:01:32]">&lt;muurkha&gt;</a></span><span class="message">heh</span></div><div class="line" id="020239"><span class="nick" style="color:#6b8072"><a href="#020239" label="[02:02:39]">&lt;fossy&gt;</a></span><span class="message">stikonas: i'm doing the very last part of my PR now, which is different checksums (bc. checksums in script isn't great). do you think for checksumming tarballs put them in a global file or keep the sys/pkg/checksums file but with a single checksum?</span></div><div class="line" id="020325"><span class="nick" style="color:#389600"><a href="#020325" label="[02:03:25]">&lt;stikonas&gt;</a></span><span class="message">hmm, can we easily extract a single checksum that we want to check?</span></div><div class="line" id="020329"><span class="nick" style="color:#389600"><a href="#020329" label="[02:03:29]">&lt;stikonas&gt;</a></span><span class="message">if we put everything in one file?</span></div><div class="line" id="020343"><span class="nick" style="color:#389600"><a href="#020343" label="[02:03:43]">&lt;stikonas&gt;</a></span><span class="message">in principle one file might make things easier</span></div><div class="line" id="020344"><span class="nick" style="color:#6b8072"><a href="#020344" label="[02:03:44]">&lt;fossy&gt;</a></span><span class="message">yes</span></div><div class="line" id="020352"><span class="nick" style="color:#6b8072"><a href="#020352" label="[02:03:52]">&lt;fossy&gt;</a></span><span class="message">just grep the single file out</span></div><div class="line" id="020358"><span class="nick" style="color:#6b8072"><a href="#020358" label="[02:03:58]">&lt;fossy&gt;</a></span><span class="message">single tarball filename*</span></div><div class="line" id="020359"><span class="nick" style="color:#389600"><a href="#020359" label="[02:03:59]">&lt;stikonas&gt;</a></span><span class="message">ok, if we already have grep</span></div><div class="line" id="020406"><span class="nick" style="color:#6b8072"><a href="#020406" label="[02:04:06]">&lt;fossy&gt;</a></span><span class="message">oh uh</span></div><div class="line" id="020446"><span class="nick" style="color:#389600"><a href="#020446" label="[02:04:46]">&lt;stikonas&gt;</a></span><span class="message">i.e. later we can add command line flag for development to create that file rather than read</span></div><div class="line" id="020504"><span class="nick" style="color:#389600"><a href="#020504" label="[02:05:04]">&lt;stikonas&gt;</a></span><span class="message">so that one can obtain checksums for the whole bootstrap chain without failing every single step</span></div><div class="line" id="020512"><span class="nick" style="color:#6b8072"><a href="#020512" label="[02:05:12]">&lt;fossy&gt;</a></span><span class="message">yes, and can be trivally done manually now anyways</span></div><div class="line" id="020516"><span class="nick" style="color:#6b8072"><a href="#020516" label="[02:05:16]">&lt;fossy&gt;</a></span><span class="message">with this PR</span></div><div class="line" id="020526"><span class="nick" style="color:#6b8072"><a href="#020526" label="[02:05:26]">&lt;fossy&gt;</a></span><span class="message">if you just comment out the checksum check</span></div><div class="line" id="020527"><span class="nick" style="color:#389600"><a href="#020527" label="[02:05:27]">&lt;stikonas&gt;</a></span><span class="message">good</span></div><div class="line" id="020540"><span class="nick" style="color:#389600"><a href="#020540" label="[02:05:40]">&lt;stikonas&gt;</a></span><span class="message">because checksumming was getting a bit unscalable</span></div><div class="line" id="020546"><span class="nick" style="color:#80b1d3"><a href="#020546" label="[02:05:46]">*</a></span><span class="message">fossy nods</span></div><div class="line" id="020702"><span class="nick" style="color:#389600"><a href="#020702" label="[02:07:02]">&lt;stikonas&gt;</a></span><span class="message">also, I haven't look at latest pushes, but at some point link search stuff was printing a lot of warnings</span></div><div class="line" id="020706"><span class="nick" style="color:#389600"><a href="#020706" label="[02:07:06]">&lt;stikonas&gt;</a></span><span class="message">is that still the case</span></div><div class="line" id="020708"><span class="nick" style="color:#389600"><a href="#020708" label="[02:07:08]">&lt;stikonas&gt;</a></span><span class="message">?</span></div><div class="line" id="020723"><span class="nick" style="color:#6b8072"><a href="#020723" label="[02:07:23]">&lt;fossy&gt;</a></span><span class="message">oh, that is something else i need to fix, a number of command not found warnings are not properly nulled, thanks</span></div><div class="line" id="020839"><span class="nick" style="color:#389600"><a href="#020839" label="[02:08:39]">&lt;stikonas&gt;</a></span><span class="message">hmm, actually only a few packages create symlinks</span></div><div class="line" id="020922"><span class="nick" style="color:#389600"><a href="#020922" label="[02:09:22]">&lt;stikonas&gt;</a></span><span class="message">anyway, you already wrote the code to deal with them, so I guess let's keep it</span></div><div class="line" id="021007"><span class="nick" style="color:#6b8072"><a href="#021007" label="[02:10:07]">&lt;fossy&gt;</a></span><span class="message">yes, there are only 75 symlinks, across 15 packages</span></div><div class="line" id="021020"><span class="nick" style="color:#6b8072"><a href="#021020" label="[02:10:20]">&lt;fossy&gt;</a></span><span class="message">16*</span></div><div class="line" id="021034"><span class="nick" style="color:#389600"><a href="#021034" label="[02:10:34]">&lt;stikonas&gt;</a></span><span class="message">btw, at some point I commented that some tarballs are empty</span></div><div class="line" id="021044"><span class="nick" style="color:#389600"><a href="#021044" label="[02:10:44]">&lt;stikonas&gt;</a></span><span class="message">&quot;You might already be aware but autoconf-2.12_0.tar.gz, autoconf-2.13_0.tar.gz, musl-1.1.24_2.tar.gz packages are empty. Not sure what's going on.&quot;</span></div><div class="line" id="021104"><span class="nick" style="color:#389600"><a href="#021104" label="[02:11:04]">&lt;stikonas&gt;</a></span><span class="message">is that still the case?</span></div><div class="line" id="021142"><span class="nick" style="color:#6b8072"><a href="#021142" label="[02:11:42]">&lt;fossy&gt;</a></span><span class="message">musl fixed, those two autoconf is not, oddly, i thought i fixed autoconf</span></div><div class="line" id="021323"><span class="nick" style="color:#389600"><a href="#021323" label="[02:13:23]">&lt;stikonas&gt;</a></span><span class="message">I also had some problems with qemu</span></div><div class="line" id="021347"><span class="nick" style="color:#389600"><a href="#021347" label="[02:13:47]">&lt;stikonas&gt;</a></span><span class="message">memory-wise I think it was fine</span></div><div class="line" id="021349"><span class="nick" style="color:#6b8072"><a href="#021349" label="[02:13:49]">&lt;fossy&gt;</a></span><span class="message">qemu should? be fixed now, although i need to rerun the latest changes on qemu -- there could be some unsolved reproducibility issues there</span></div><div class="line" id="021357"><span class="nick" style="color:#389600"><a href="#021357" label="[02:13:57]">&lt;stikonas&gt;</a></span><span class="message">ok, good</span></div><div class="line" id="021407"><span class="nick" style="color:#389600"><a href="#021407" label="[02:14:07]">&lt;stikonas&gt;</a></span><span class="message">anyway, sounds like you are almost there</span></div><div class="line" id="021420"><span class="nick" style="color:#6b8072"><a href="#021420" label="[02:14:20]">&lt;fossy&gt;</a></span><span class="message">yes</span></div><div class="line" id="021642"><span class="nick" style="color:#389600"><a href="#021642" label="[02:16:42]">&lt;stikonas&gt;</a></span><span class="message">fossy: after that should we try to minimize rootfs.py a bit?</span></div><div class="line" id="021646"><span class="nick" style="color:#389600"><a href="#021646" label="[02:16:46]">&lt;stikonas&gt;</a></span><span class="message">as doras requested</span></div><div class="line" id="021656"><span class="nick" style="color:#389600"><a href="#021656" label="[02:16:56]">&lt;stikonas&gt;</a></span><span class="message">I thought a bit about how to do that</span></div><div class="line" id="021704"><span class="nick" style="color:#6b8072"><a href="#021704" label="[02:17:04]">&lt;fossy&gt;</a></span><span class="message">yes, i think we should try to do that next</span></div><div class="line" id="021709"><span class="nick" style="color:#389600"><a href="#021709" label="[02:17:09]">&lt;stikonas&gt;</a></span><span class="message">and I think we can make it much smaller</span></div><div class="line" id="021717"><span class="nick" style="color:#389600"><a href="#021717" label="[02:17:17]">&lt;stikonas&gt;</a></span><span class="message">first step is to rename /after to sysa</span></div><div class="line" id="021737"><span class="nick" style="color:#389600"><a href="#021737" label="[02:17:37]">&lt;stikonas&gt;</a></span><span class="message">then it will have the same path in bootstrap as in the repo</span></div><div class="line" id="021744"><span class="nick" style="color:#6b8072"><a href="#021744" label="[02:17:44]">&lt;fossy&gt;</a></span><span class="message">we can get the structure into a place where rootfs.py does close to no preperation</span></div><div class="line" id="021752"><span class="nick" style="color:#389600"><a href="#021752" label="[02:17:52]">&lt;stikonas&gt;</a></span><span class="message">yeah</span></div><div class="line" id="021807"><span class="nick" style="color:#389600"><a href="#021807" label="[02:18:07]">&lt;stikonas&gt;</a></span><span class="message">then after that we can try to deal with sources</span></div><div class="line" id="021821"><span class="nick" style="color:#6b8072"><a href="#021821" label="[02:18:21]">&lt;fossy&gt;</a></span><span class="message">how do you mean?</span></div><div class="line" id="021832"><span class="nick" style="color:#389600"><a href="#021832" label="[02:18:32]">&lt;stikonas&gt;</a></span><span class="message">i.e. copy froun /sources rather than /sysa/${pkg}/src</span></div><div class="line" id="021837"><span class="nick" style="color:#6b8072"><a href="#021837" label="[02:18:37]">&lt;fossy&gt;</a></span><span class="message">oh, right</span></div><div class="line" id="021844"><span class="nick" style="color:#389600"><a href="#021844" label="[02:18:44]">&lt;stikonas&gt;</a></span><span class="message">that's another big thing rootfs.py does</span></div><div class="line" id="021851"><span class="nick" style="color:#389600"><a href="#021851" label="[02:18:51]">&lt;stikonas&gt;</a></span><span class="message">but we can just do it in kaem/bash</span></div><div class="line" id="021957"><span class="nick" style="color:#389600"><a href="#021957" label="[02:19:57]">&lt;stikonas&gt;</a></span><span class="message">in the end I think one should be able to do something like that: take stage0-posix dir, copy over live-bootstrap on top (the only think that will be overwritten would be after hook) and run kaem-optional-seed</span></div><div class="line" id="022020"><span class="nick" style="color:#389600"><a href="#022020" label="[02:20:20]">&lt;stikonas&gt;</a></span><span class="message">oh, and put tarballs into sources</span></div><div class="line" id="022037"><span class="nick" style="color:#389600"><a href="#022037" label="[02:20:37]">&lt;stikonas&gt;</a></span><span class="message">anyway, let's merge your PR first</span></div><div class="line" id="022047"><span class="nick" style="color:#389600"><a href="#022047" label="[02:20:47]">&lt;stikonas&gt;</a></span><span class="message">and then do /after -&gt; /sysa rename</span></div><div class="line" id="022119"><span class="nick" style="color:#389600"><a href="#022119" label="[02:21:19]">&lt;stikonas&gt;</a></span><span class="message">I briefly look at it, should be quite easy, but it changes almost all checksums</span></div><div class="line" id="022146"><span class="nick" style="color:#6b8072"><a href="#022146" label="[02:21:46]">&lt;fossy&gt;</a></span><span class="message">but that will be quite easy, now</span></div><div class="line" id="022156"><span class="nick" style="color:#389600"><a href="#022156" label="[02:21:56]">&lt;stikonas&gt;</a></span><span class="message">so I postponed it till your PR is done</span></div><div class="line" id="022222"><span class="nick" style="color:#389600"><a href="#022222" label="[02:22:22]">&lt;stikonas&gt;</a></span><span class="message">yes. I was actually initially surprised that  /after-&gt;/sysa affects all checksums</span></div><div class="line" id="022249"><span class="nick" style="color:#389600"><a href="#022249" label="[02:22:49]">&lt;stikonas&gt;</a></span><span class="message">but it turns out tcc puts its build path into binary somewhere</span></div><div class="line" id="022306"><span class="nick" style="color:#2e2a4a"><a href="#022306" label="[02:23:06]">&lt;muurkha&gt;</a></span><span class="message">huh, I wonder if that's fixable</span></div><div class="line" id="022324"><span class="nick" style="color:#389600"><a href="#022324" label="[02:23:24]">&lt;stikonas&gt;</a></span><span class="message">well, it's a minor inconvenience</span></div><div class="line" id="022329"><span class="nick" style="color:#6b8072"><a href="#022329" label="[02:23:29]">&lt;fossy&gt;</a></span><span class="message">hmm, i reckon i know where it does that</span></div><div class="line" id="022336"><span class="nick" style="color:#389600"><a href="#022336" label="[02:23:36]">&lt;stikonas&gt;</a></span><span class="message">we don't change build path often</span></div><div class="line" id="022341"><span class="nick" style="color:#2e2a4a"><a href="#022341" label="[02:23:41]">&lt;muurkha&gt;</a></span><span class="message">I mean obviously it's possible to fix, but I wonder if the cost is low enough to be worth the benefit</span></div><div class="line" id="022349"><span class="nick" style="color:#2e2a4a"><a href="#022349" label="[02:23:49]">&lt;muurkha&gt;</a></span><span class="message">we don't, it's true</span></div><div class="line" id="022350"><span class="nick" style="color:#389600"><a href="#022350" label="[02:23:50]">&lt;stikonas&gt;</a></span><span class="message">probably not...</span></div><div class="line" id="022359"><span class="nick" style="color:#2e2a4a"><a href="#022359" label="[02:23:59]">&lt;muurkha&gt;</a></span><span class="message">but it offends me aesthetically ;)</span></div><div class="line" id="022410"><span class="nick" style="color:#6b8072"><a href="#022410" label="[02:24:10]">&lt;fossy&gt;</a></span><span class="message">not really, i reckon it's in --help, but i'm not too worried</span></div><div class="line" id="022420"><span class="nick" style="color:#2e2a4a"><a href="#022420" label="[02:24:20]">&lt;muurkha&gt;</a></span><span class="message">also it could be a privacy leak if someone uses tcc for something else</span></div><div class="line" id="022427"><span class="nick" style="color:#389600"><a href="#022427" label="[02:24:27]">&lt;stikonas&gt;</a></span><span class="message">gcc might do that too</span></div><div class="line" id="022435"><span class="nick" style="color:#389600"><a href="#022435" label="[02:24:35]">&lt;stikonas&gt;</a></span><span class="message">if I remember correctly</span></div><div class="line" id="022439"><span class="nick" style="color:#6b8072"><a href="#022439" label="[02:24:39]">&lt;fossy&gt;</a></span><span class="message">well, not in live-bootstrap, but generally for tcc, yes</span></div><div class="line" id="022455"><span class="nick" style="color:#389600"><a href="#022455" label="[02:24:55]">&lt;stikonas&gt;</a></span><span class="message">normally it just leaks that you use /usr prefix</span></div><div class="line" id="022459"><span class="nick" style="color:#2e2a4a"><a href="#022459" label="[02:24:59]">&lt;muurkha&gt;</a></span><span class="message">right</span></div><div class="line" id="022508"><span class="nick" style="color:#389600"><a href="#022508" label="[02:25:08]">&lt;stikonas&gt;</a></span><span class="message">so that's not a big privacy leak</span></div><div class="line" id="022512"><span class="nick" style="color:#2e2a4a"><a href="#022512" label="[02:25:12]">&lt;muurkha&gt;</a></span><span class="message">but sometimes /home/stikonas/.local/bin</span></div><div class="line" id="022600"><span class="nick" style="color:#2e2a4a"><a href="#022600" label="[02:26:00]">&lt;muurkha&gt;</a></span><span class="message">also if you validate a compiler in /home/stikonas/.local/bin and then install the same compiler systemwide it's kind of offensive that that will cause your build artifact checksums to change</span></div><div class="line" id="022601"><span class="nick" style="color:#389600"><a href="#022601" label="[02:26:01]">&lt;stikonas&gt;</a></span><span class="message">that would be if I used stikonas as my username, which I don't :D</span></div><div class="line" id="022629"><span class="nick" style="color:#389600"><a href="#022629" label="[02:26:29]">&lt;stikonas&gt;</a></span><span class="message">though you can probaly find what I use in some of my pastes here</span></div><div class="line" id="022718"><span class="nick" style="color:#2e2a4a"><a href="#022718" label="[02:27:18]">&lt;muurkha&gt;</a></span><span class="message">and you could imagine people mapping snapshots into the filesystem and getting different checksums when building from /vob/toolchain/version/0/1/1/tcc/bin/tcc than /vob/toolchain/tag/stable/tcc/bin/tcc</span></div><div class="line" id="022730"><span class="nick" style="color:#2e2a4a"><a href="#022730" label="[02:27:30]">&lt;muurkha&gt;</a></span><span class="message">but it's kind of out of scope maybe</span></div><div class="line" id="022750"><span class="nick" style="color:#6b8072"><a href="#022750" label="[02:27:50]">&lt;fossy&gt;</a></span><span class="message">still, that's not a problem for live-bootstrap, because paths are deterministic</span></div><div class="line" id="022754"><span class="nick" style="color:#2e2a4a"><a href="#022754" label="[02:27:54]">&lt;muurkha&gt;</a></span><span class="message">right</span></div><div class="line" id="022804"><span class="nick" style="color:#2e2a4a"><a href="#022804" label="[02:28:04]">&lt;muurkha&gt;</a></span><span class="message">except when we change them anyway</span></div><div class="line" id="022812"><span class="nick" style="color:#6b8072"><a href="#022812" label="[02:28:12]">&lt;fossy&gt;</a></span><span class="message">yeah lol</span></div><div class="line" id="104822"><span class="nick" style="color:#6d2462"><a href="#104822" label="[10:48:22]">&lt;oriansj&gt;</a></span><span class="message">I swear the more I look at C macros, the more I wonder how it even ever got added in to the standard.</span></div><div class="line" id="105052"><span class="nick" style="color:#6d2462"><a href="#105052" label="[10:50:52]">&lt;oriansj&gt;</a></span><span class="message">I can even understand #ifdef, #ifndef, #else and #endif being useful for flag, architecture and compiler specific code paths.</span></div><div class="line" id="105305"><span class="nick" style="color:#6d2462"><a href="#105305" label="[10:53:05]">&lt;oriansj&gt;</a></span><span class="message">(the lack of #elifdef and #elifndef seems like a minor mistake that looks like it is going to be fixed in the next version of C)</span></div><div class="line" id="110124"><span class="nick" style="color:#6d2462"><a href="#110124" label="[11:01:24]">&lt;oriansj&gt;</a></span><span class="message">as the second I try to do #if support in the cc_reader.c of M2-Mesoplanet, boom in drops the *ENTIRE* C macro support</span></div><div class="line" id="110200"><span class="nick" style="color:#389600"><a href="#110200" label="[11:02:00]">&lt;stikonas&gt;</a></span><span class="message">do we actually support everything now?</span></div><div class="line" id="110318"><span class="nick" style="color:#389600"><a href="#110318" label="[11:03:18]">&lt;stikonas&gt;</a></span><span class="message">probably not, at least we don't support stuff  that's used to concatenate strings, etc...</span></div><div class="line" id="110457"><span class="nick" style="color:#6d2462"><a href="#110457" label="[11:04:57]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well yes we don't support things yet but I am referring to the User facing space of what we would need to support</span></div><div class="line" id="110558"><span class="nick" style="color:#6d2462"><a href="#110558" label="[11:05:58]">&lt;oriansj&gt;</a></span><span class="message">aka, if I make #if $thing #include $file behavior decide to load the file or not</span></div><div class="line" id="110625"><span class="nick" style="color:#6d2462"><a href="#110625" label="[11:06:25]">&lt;oriansj&gt;</a></span><span class="message">I would have to evaluate $thing</span></div><div class="line" id="110636"><span class="nick" style="color:#6d2462"><a href="#110636" label="[11:06:36]">&lt;oriansj&gt;</a></span><span class="message">which could be anything</span></div><div class="line" id="111011"><span class="nick" style="color:#6d2462"><a href="#111011" label="[11:10:11]">&lt;oriansj&gt;</a></span><span class="message">C preprocessing is strangely a turing complete interpreted language</span></div><div class="line" id="111136"><span class="nick" style="color:#6d2462"><a href="#111136" label="[11:11:36]">&lt;oriansj&gt;</a></span><span class="message">sorry almost turing complete</span></div><div class="line" id="111831"><span class="nick" style="color:#6d2462"><a href="#111831" label="[11:18:31]">&lt;oriansj&gt;</a></span><span class="message">maybe I'm just frustrated from trying to shoe horn that logic into cc_reader.c and it is basically forcing me to rewrite cc_macro.c in a very very complex an easy to get wrong fashion.</span></div><div class="line" id="112108"><span class="nick" style="color:#6d2462"><a href="#112108" label="[11:21:08]">&lt;oriansj&gt;</a></span><span class="message">however because most compilers don't support #elifdef and #elifndef yet, I can't take the simple path out of restricting to __$arch__, __$OS__ and __$flag__</span></div><div class="line" id="112328"><span class="nick" style="color:#6d2462"><a href="#112328" label="[11:23:28]">&lt;oriansj&gt;</a></span><span class="message">which would be a nothing function to support and provide the desired &quot;don't #include things inside a block that isn't going to be used&quot;</span></div><div class="line" id="112408"><span class="nick" style="color:#234e69"><a href="#112408" label="[11:24:08]">&lt;stikonas[m]&gt;</a></span><span class="message">I see...</span></div><div class="line" id="113409"><span class="nick" style="color:#6d2462"><a href="#113409" label="[11:34:09]">&lt;oriansj&gt;</a></span><span class="message">maybe I am just cursed to always hit walls when dealing with interpreted languages</span></div><div class="line" id="113711"><span class="nick" style="color:#234e69"><a href="#113711" label="[11:37:11]">&lt;stikonas[m]&gt;</a></span><span class="message">C macros are at least not Turing complete, even if they are &quot;close&quot;. But C++ templates are. And comes with its own halting problem</span></div><div class="line" id="113804"><span class="nick" style="color:#234e69"><a href="#113804" label="[11:38:04]">&lt;stikonas[m]&gt;</a></span><span class="message"> <a rel="nofollow" href="https://medium.com/@mujjingun_23509/full-proof-that-c-grammar-is-undecidable-34e22dd8b664">https://medium.com/@mujjingun_23509/full-proof-that-c-grammar-is-undecidable-34e22dd8b664</a> </span></div><div class="line" id="114028"><span class="nick" style="color:#6d2462"><a href="#114028" label="[11:40:28]">&lt;oriansj&gt;</a></span><span class="message">You know the C core is clean and simple</span></div><div class="line" id="114225"><span class="nick" style="color:#6d2462"><a href="#114225" label="[11:42:25]">&lt;oriansj&gt;</a></span><span class="message">but because you need libraries and people don't want to specify the source files they depend upon, we get #include and that is fine until now you are sharing code and then you need different includes for different architectures but hey that preprocessing logic can easily be expanded to do....</span></div><div class="line" id="114421"><span class="nick" style="color:#6d2462"><a href="#114421" label="[11:44:21]">&lt;oriansj&gt;</a></span><span class="message">I know that some of the features are helpful for debugging (why can't you just use gdb?)</span></div><div class="line" id="114513"><span class="nick" style="color:#6d2462"><a href="#114513" label="[11:45:13]">&lt;oriansj&gt;</a></span><span class="message">or various other useful things (like adding support for NEW keywords in the language where you shouldn't do that)</span></div><div class="line" id="114810"><span class="nick" style="color:#6d2462"><a href="#114810" label="[11:48:10]">&lt;oriansj&gt;</a></span><span class="message">but at some point, can't people just admit they don't want to write C code and just have a different programming language generate the code they are compiling and stop stuffing crap into the C spec to make their mess bigger</span></div><div class="line" id="115225"><span class="nick" style="color:#6d2462"><a href="#115225" label="[11:52:25]">&lt;oriansj&gt;</a></span><span class="message">sure __FILE__ and __LINE__ as magic defines; no problem they already have that info stored in them internally for debugging of cc_reader.c and basic error messages from the C compiler</span></div><div class="line" id="115740"><span class="nick" style="color:#389600"><a href="#115740" label="[11:57:40]">&lt;stikonas&gt;</a></span><span class="message">I'm not too familiar with old C but I wonder when all these preprocessor features appeared, some might be from before C was standartized</span></div><div class="line" id="115911"><span class="nick" style="color:#6d2462"><a href="#115911" label="[11:59:11]">&lt;oriansj&gt;</a></span><span class="message">well they certainly where there before GNU</span></div><div class="line" id="120247"><span class="nick" style="color:#6d2462"><a href="#120247" label="[12:02:47]">&lt;oriansj&gt;</a></span><span class="message">the historical fact that the C preprocessor has been used as a preprocessor for other languages (like FORTRAN) suggests a cause for many of the features added.</span></div><div class="line" id="120320"><span class="nick" style="color:#6c3d55"><a href="#120320" label="[12:03:20]">&lt;nimaje&gt;</a></span><span class="message">of course your interpreter should be written similar to the language you are implementing <a rel="nofollow" href="https://minnie.tuhs.org/cgi-bin/utree.pl?file=V7/usr/src/cmd/sh/mac.h">https://minnie.tuhs.org/cgi-bin/utree.pl?file=V7/usr/src/cmd/sh/mac.h</a> </span></div><div class="line" id="120608"><span class="nick" style="color:#6d2462"><a href="#120608" label="[12:06:08]">&lt;oriansj&gt;</a></span><span class="message">nimaje: yeah...</span></div><div class="line" id="120650"><span class="nick" style="color:#6d2462"><a href="#120650" label="[12:06:50]">&lt;oriansj&gt;</a></span><span class="message">the lets make C compiler compile our non-C code because we can't get a language X compiler for arbitrary reasons</span></div><div class="line" id="121044"><span class="nick" style="color:#6d2462"><a href="#121044" label="[12:10:44]">&lt;oriansj&gt;</a></span><span class="message">I swear half of all programming sins are the result of desperation</span></div><div class="line" id="121224"><span class="nick" style="color:#6d2462"><a href="#121224" label="[12:12:24]">&lt;oriansj&gt;</a></span><span class="message">and the other half is hubris mixed with sloth</span></div><div class="line" id="134502"><span class="nick">***</span><span class="message notice">aisha[m] is now known as epsilonknot</span></div><div class="line" id="142449"><span class="nick" style="color:#389600"><a href="#142449" label="[14:24:49]">&lt;stikonas&gt;</a></span><span class="message">at least you don't have to write any of that macro stuff in assembly. By the time we need to implement it we can use core C constructs.</span></div><div class="line" id="152533"><span class="nick" style="color:#d9d9d9"><a href="#152533" label="[15:25:33]">&lt;unmatched-paren&gt;</a></span><span class="message">is it possible to implement inline assembly in an interpreter? fpc uses it in a number of places, so if it's not possible my entire Pascal bootstrap plan won't work...</span></div><div class="line" id="152911"><span class="nick" style="color:#d9d9d9"><a href="#152911" label="[15:29:11]">&lt;unmatched-paren&gt;</a></span><span class="message">could you write all inline asm to a tmpfile, then gas/nasm it, write the resulting machine code to memory, then jump execution to it somehow?</span></div><div class="line" id="152912"><span class="nick" style="color:#bc80bd"><a href="#152912" label="[15:29:12]">&lt;bauen1&gt;</a></span><span class="message">unmatched-paren: i don't see why not ? you might have to interpret the assembly used too, but that is possible</span></div><div class="line" id="152952"><span class="nick" style="color:#bc80bd"><a href="#152952" label="[15:29:52]">&lt;bauen1&gt;</a></span><span class="message">unmatched-paren: or is it too many instructions / performance critical so interpreting isn't an option</span></div><div class="line" id="153120"><span class="nick" style="color:#80b1d3"><a href="#153120" label="[15:31:20]">*</a></span><span class="message">unmatched-paren remembers that libyasm exists, but it only supports two archs...</span></div><div class="line" id="153215"><span class="nick" style="color:#d9d9d9"><a href="#153215" label="[15:32:15]">&lt;unmatched-paren&gt;</a></span><span class="message">there's nothing performance critical, this isn't an integral part of the bootstrap (if it was, someone else would be doing it :P)</span></div><div class="line" id="153355"><span class="nick" style="color:#d9d9d9"><a href="#153355" label="[15:33:55]">&lt;unmatched-paren&gt;</a></span><span class="message"> &lt;<a rel="nofollow" href="https://codeberg.org/unmatched-paren/rascal-boot/">https://codeberg.org/unmatched-paren/rascal-boot/</a>&gt;  is the interpreter i'm trying to extend so i can boot fpc</span></div><div class="line" id="153459"><span class="nick" style="color:#d9d9d9"><a href="#153459" label="[15:34:59]">&lt;unmatched-paren&gt;</a></span><span class="message">i'd like to not have to worry about different archs, and just support everything that rust supports</span></div><div class="line" id="154535"><span class="nick" style="color:#d9d9d9"><a href="#154535" label="[15:45:35]">&lt;unmatched-paren&gt;</a></span><span class="message">i'll probably need to use <a rel="nofollow" href="https://lib.rs/memmap2:">https://lib.rs/memmap2:</a>  <a rel="nofollow" href="https://stackoverflow.com/questions/66242567/how-to-jump-to-call-arbitrary-memory-in-rust">https://stackoverflow.com/questions/66242567/how-to-jump-to-call-arbitrary-memory-in-rust</a> </span></div><div class="line" id="154600"><span class="nick" style="color:#d9d9d9"><a href="#154600" label="[15:46:00]">&lt;unmatched-paren&gt;</a></span><span class="message">anyway, this isn't something i really need to worry about now that i know it's possible</span></div><div class="line" id="154805"><span class="nick" style="color:#d9d9d9"><a href="#154805" label="[15:48:05]">&lt;unmatched-paren&gt;</a></span><span class="message">i wouldn't be able to use `asm!()`, since that's a macro it just compiles asm into the binary, so you can't dynamically execute arbitrary asm</span></div><div class="line" id="214343"><span class="nick" style="color:#6d2462"><a href="#214343" label="[21:43:43]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: well inline assembly is generally more of a JIT'd Interpreted construct and if you are *REALLY* careful you could do it. Common Lisp is a classic example of an interpreted language that supports inline assembly. So it is entirely possible, it just is much simpler to implement in a compiled language.</span></div><div class="line" id="214627"><span class="nick" style="color:#6d2462"><a href="#214627" label="[21:46:27]">&lt;oriansj&gt;</a></span><span class="message">in a compiled language like C or pascal, you can literally just let the strings pass through the compiler with little or no changes. With an interpreted language, you will need to support a full assembly syntax (a full assembler honestly, minus the elf bits) and glue logic to wire in your blob in memory and deal with stack problems that might occur.</span></div><div class="line" id="214746"><span class="nick" style="color:#6d2462"><a href="#214746" label="[21:47:46]">&lt;oriansj&gt;</a></span><span class="message">So very possible to do if you need to do it that way.</span></div><div class="line" id="214849"><span class="nick" style="color:#6d2462"><a href="#214849" label="[21:48:49]">&lt;oriansj&gt;</a></span><span class="message">I am however extremely biases towards compilers over interpreters.</span></div><div class="line" id="215511"><span class="nick" style="color:#d9d9d9"><a href="#215511" label="[21:55:11]">&lt;unmatched-paren&gt;</a></span><span class="message">oriansj: hm, i'm leaning towards dropping the interpreter and rewriting it as a compiler then</span></div><div class="line" id="215539"><span class="nick" style="color:#d9d9d9"><a href="#215539" label="[21:55:39]">&lt;unmatched-paren&gt;</a></span><span class="message">i dislike interpreters too, it's just that one already existed</span></div><div class="line" id="215629"><span class="nick" style="color:#d9d9d9"><a href="#215629" label="[21:56:29]">&lt;unmatched-paren&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/tylerlaberge/rascal">https://github.com/tylerlaberge/rascal</a> </span></div><div class="line" id="215707"><span class="nick" style="color:#d9d9d9"><a href="#215707" label="[21:57:07]">&lt;unmatched-paren&gt;</a></span><span class="message">maybe i should look into llvm</span></div><div class="line" id="215732"><span class="nick" style="color:#d9d9d9"><a href="#215732" label="[21:57:32]">&lt;unmatched-paren&gt;</a></span><span class="message">i was doing that with ocaml-llvm before i discovered that ocaml wasn't completely bootstrapped</span></div><div class="line" id="215736"><span class="nick" style="color:#6d2462"><a href="#215736" label="[21:57:36]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: well it is more of a question of what seems like more fun for you</span></div><div class="line" id="215849"><span class="nick" style="color:#6d2462"><a href="#215849" label="[21:58:49]">&lt;oriansj&gt;</a></span><span class="message">see bootstrapping is a long term sort of activity and the more enjoyable you make it for yourself, the better the odds you'll achieve more of your goals.</span></div><div class="line" id="215944"><span class="nick" style="color:#d9d9d9"><a href="#215944" label="[21:59:44]">&lt;unmatched-paren&gt;</a></span><span class="message">from what i've learned today, i think i'm setting myself up for pain when i try to implement advanced features (like inline asm)</span></div><div class="line" id="220041"><span class="nick" style="color:#d9d9d9"><a href="#220041" label="[22:00:41]">&lt;unmatched-paren&gt;</a></span><span class="message">i was in the process of rewriting the parser to use the rust-nom parser combinator library, to make it easier to add new rules</span></div><div class="line" id="220104"><span class="nick" style="color:#d9d9d9"><a href="#220104" label="[22:01:04]">&lt;unmatched-paren&gt;</a></span><span class="message">so i'm throwing out a sizable portion of the code anyway</span></div><div class="line" id="220129"><span class="nick" style="color:#6d2462"><a href="#220129" label="[22:01:29]">&lt;oriansj&gt;</a></span><span class="message">also don't feel limited to only already bootstrapped languages</span></div><div class="line" id="220157"><span class="nick" style="color:#6d2462"><a href="#220157" label="[22:01:57]">&lt;oriansj&gt;</a></span><span class="message">as someone else might come along and bootstrap the missing piece to the language you wish to use</span></div><div class="line" id="220201"><span class="nick" style="color:#d9d9d9"><a href="#220201" label="[22:02:01]">&lt;unmatched-paren&gt;</a></span><span class="message">to be honest, i'd like to do it in haskell, but... yeah...</span></div><div class="line" id="220213"><span class="nick" style="color:#6d2462"><a href="#220213" label="[22:02:13]">&lt;oriansj&gt;</a></span><span class="message">haskell is fine</span></div><div class="line" id="220220"><span class="nick" style="color:#6d2462"><a href="#220220" label="[22:02:20]">&lt;oriansj&gt;</a></span><span class="message">it'll get bootstrapped</span></div><div class="line" id="220254"><span class="nick" style="color:#6d2462"><a href="#220254" label="[22:02:54]">&lt;oriansj&gt;</a></span><span class="message">yeah it isn't perfect now but then again GCC wasn't bootstrapped 2 years ago</span></div><div class="line" id="220255"><span class="nick" style="color:#d9d9d9"><a href="#220255" label="[22:02:55]">&lt;unmatched-paren&gt;</a></span><span class="message">i'd prefer to do it in something already bootstrapped</span></div><div class="line" id="220313"><span class="nick" style="color:#6d2462"><a href="#220313" label="[22:03:13]">&lt;oriansj&gt;</a></span><span class="message">if you wish, that is entirely your choice</span></div><div class="line" id="220336"><span class="nick" style="color:#d9d9d9"><a href="#220336" label="[22:03:36]">&lt;unmatched-paren&gt;</a></span><span class="message">afk for a bit, sorry</span></div><div class="line" id="220341"><span class="nick" style="color:#6d2462"><a href="#220341" label="[22:03:41]">&lt;oriansj&gt;</a></span><span class="message">no worries</span></div><div class="line" id="220559"><span class="nick" style="color:#6d2462"><a href="#220559" label="[22:05:59]">&lt;oriansj&gt;</a></span><span class="message">but I do suggest you don't limit yourself to only already bootstrapped languages. Especially ones that are already in the process of being bootstrapped. As a partial bootstrap chain for a language set we don't have yet will be useful in the future.</span></div><div class="line" id="220722"><span class="nick" style="color:#6d2462"><a href="#220722" label="[22:07:22]">&lt;oriansj&gt;</a></span><span class="message">M2-Planet and mescc-tools development would have been considerably delayed if I restricted myself to only the M0 assembly that I already bootstrapped.</span></div><div class="line" id="222942"><span class="nick" style="color:#d9d9d9"><a href="#222942" label="[22:29:42]">&lt;unmatched-paren&gt;</a></span><span class="message">oriansj: are there any resources on learning x86_64 asm that you recommend? i can't find any books</span></div><div class="line" id="223041"><span class="nick" style="color:#d9d9d9"><a href="#223041" label="[22:30:41]">&lt;unmatched-paren&gt;</a></span><span class="message">i'll need to figure out which compiler backend to use, preferably one that minimizes the amount of time i have to spend thinking about architecture-specific stuff</span></div><div class="line" id="223106"><span class="nick" style="color:#d9d9d9"><a href="#223106" label="[22:31:06]">&lt;unmatched-paren&gt;</a></span><span class="message">llvm is apparently quite manual, but its rust bindings are better</span></div><div class="line" id="223114"><span class="nick" style="color:#d9d9d9"><a href="#223114" label="[22:31:14]">&lt;unmatched-paren&gt;</a></span><span class="message">(than gcc)</span></div><div class="line" id="223316"><span class="nick" style="color:#d9d9d9"><a href="#223316" label="[22:33:16]">&lt;unmatched-paren&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/bytecodealliance/wasmtime/tree/main/cranelift">https://github.com/bytecodealliance/wasmtime/tree/main/cranelift</a>  is a pure-Rust compiler backend, but architecture support is very poor rn</span></div><div class="line" id="223338"><span class="nick" style="color:#d9d9d9"><a href="#223338" label="[22:33:38]">&lt;unmatched-paren&gt;</a></span><span class="message">could i compile to the jvm maybe?</span></div><div class="line" id="223344"><span class="nick" style="color:#d9d9d9"><a href="#223344" label="[22:33:44]">&lt;unmatched-paren&gt;</a></span><span class="message">hm...</span></div><div class="line" id="223506"><span class="nick" style="color:#d9d9d9"><a href="#223506" label="[22:35:06]">&lt;unmatched-paren&gt;</a></span><span class="message">or i could compile directly to C, but that's basically what GCC does</span></div><div class="line" id="223624"><span class="nick" style="color:#d9d9d9"><a href="#223624" label="[22:36:24]">&lt;unmatched-paren&gt;</a></span><span class="message">i could write my own gccjit bindings, but i'm lazy :)</span></div><div class="line" id="223952"><span class="nick" style="color:#d9d9d9"><a href="#223952" label="[22:39:52]">&lt;unmatched-paren&gt;</a></span><span class="message">ugh, jvm has no inline asm: <a rel="nofollow" href="https://stackoverflow.com/questions/67592482/assembly-are-there-any-languages-other-than-c-and-c-that-allow-for-interacti">https://stackoverflow.com/questions/67592482/assembly-are-there-any-languages-other-than-c-and-c-that-allow-for-interacti</a> </span></div><div class="line" id="224813"><span class="nick" style="color:#d9d9d9"><a href="#224813" label="[22:48:13]">&lt;unmatched-paren&gt;</a></span><span class="message">it might be less painful doing gccjit bindings if i write the compiler in D instead of Rust, since D is compatible with the C ABI</span></div><div class="line" id="224828"><span class="nick" style="color:#d9d9d9"><a href="#224828" label="[22:48:28]">&lt;unmatched-paren&gt;</a></span><span class="message">so bindings are easy</span></div><div class="line" id="224846"><span class="nick" style="color:#3c5b35"><a href="#224846" label="[22:48:46]">&lt;Avichi&gt;</a></span><span class="message">What I wonder about is why languages like Haskell still use Cpp, even though a functional alternative exists (m4)</span></div><div class="line" id="224913"><span class="nick" style="color:#d9d9d9"><a href="#224913" label="[22:49:13]">&lt;unmatched-paren&gt;</a></span><span class="message">or i could just use good old C :)</span></div><div class="line" id="224941"><span class="nick" style="color:#d9d9d9"><a href="#224941" label="[22:49:41]">&lt;unmatched-paren&gt;</a></span><span class="message">which would basically be writing a modern version of GPC</span></div><div class="line" id="225157"><span class="nick" style="color:#d9d9d9"><a href="#225157" label="[22:51:57]">&lt;unmatched-paren&gt;</a></span><span class="message">oriansj: do you know if <a rel="nofollow" href="https://ziglang.org">https://ziglang.org</a>  is bootstrapped?</span></div><div class="line" id="225244"><span class="nick" style="color:#d9d9d9"><a href="#225244" label="[22:52:44]">&lt;unmatched-paren&gt;</a></span><span class="message">it is, actually, interesting</span></div><div class="line" id="225335"><span class="nick" style="color:#d9d9d9"><a href="#225335" label="[22:53:35]">&lt;unmatched-paren&gt;</a></span><span class="message">buuut very immature</span></div><div class="line" id="231109"><span class="nick" style="color:#389600"><a href="#231109" label="[23:11:09]">&lt;stikonas&gt;</a></span><span class="message">unmatched-paren: good way to learn x86_64 asm is to go over stage0-posix and review it</span></div><div class="line" id="231153"><span class="nick" style="color:#389600"><a href="#231153" label="[23:11:53]">&lt;stikonas&gt;</a></span><span class="message">writing it would be better but we already have amd64 port of stage0-posix</span></div><div class="line" id="231225"><span class="nick" style="color:#389600"><a href="#231225" label="[23:12:25]">&lt;stikonas&gt;</a></span><span class="message">stage0-posix is how I learned assembly (well, risc-v at least but I picked up a few bits of amd64 too)</span></div><div class="line" id="231359"><span class="nick" style="color:#d9d9d9"><a href="#231359" label="[23:13:59]">&lt;unmatched-paren&gt;</a></span><span class="message">ah, there's a lot of comments in there, yeah</span></div><div class="line" id="231504"><span class="nick" style="color:#d9d9d9"><a href="#231504" label="[23:15:04]">&lt;unmatched-paren&gt;</a></span><span class="message">there's so many magic numbers in there</span></div><div class="line" id="231521"><span class="nick" style="color:#389600"><a href="#231521" label="[23:15:21]">&lt;stikonas&gt;</a></span><span class="message">unmatched-paren: you can look at prototypes</span></div><div class="line" id="231542"><span class="nick" style="color:#389600"><a href="#231542" label="[23:15:42]">&lt;stikonas&gt;</a></span><span class="message">if you look at hex0.hex0 you are learning machine code, not just assembly</span></div><div class="line" id="231613"><span class="nick" style="color:#389600"><a href="#231613" label="[23:16:13]">&lt;stikonas&gt;</a></span><span class="message">if you don't care about machine code, then just look at <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/blob/master/AMD64/NASM/hex0_AMD64.S">https://github.com/oriansj/stage0-posix/blob/master/AMD64/NASM/hex0_AMD64.S</a> </span></div><div class="line" id="231632"><span class="nick" style="color:#d9d9d9"><a href="#231632" label="[23:16:32]">&lt;unmatched-paren&gt;</a></span><span class="message">that's what i'm looking at right now, actually :)</span></div><div class="line" id="231654"><span class="nick" style="color:#389600"><a href="#231654" label="[23:16:54]">&lt;stikonas&gt;</a></span><span class="message">and we also have high level prototypes <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/tree/master/High%20Level%20Prototypes">https://github.com/oriansj/stage0-posix/tree/master/High%20Level%20Prototypes</a> </span></div><div class="line" id="231655"><span class="nick" style="color:#d9d9d9"><a href="#231655" label="[23:16:55]">&lt;unmatched-paren&gt;</a></span><span class="message">there's still an uncomfortable amount of magic numbers</span></div><div class="line" id="231731"><span class="nick" style="color:#389600"><a href="#231731" label="[23:17:31]">&lt;stikonas&gt;</a></span><span class="message">unmatched-paren: <a rel="nofollow" href="https://github.com/oriansj/stage0-posix/blob/master/AMD64/NASM/hex0_AMD64.S">https://github.com/oriansj/stage0-posix/blob/master/AMD64/NASM/hex0_AMD64.S</a>  ?</span></div><div class="line" id="231733"><span class="nick" style="color:#389600"><a href="#231733" label="[23:17:33]">&lt;stikonas&gt;</a></span><span class="message">like what?</span></div><div class="line" id="231746"><span class="nick" style="color:#d9d9d9"><a href="#231746" label="[23:17:46]">&lt;unmatched-paren&gt;</a></span><span class="message">like the syscall opcodes</span></div><div class="line" id="231748"><span class="nick" style="color:#389600"><a href="#231748" label="[23:17:48]">&lt;stikonas&gt;</a></span><span class="message">577 or 448 ?</span></div><div class="line" id="231751"><span class="nick" style="color:#389600"><a href="#231751" label="[23:17:51]">&lt;stikonas&gt;</a></span><span class="message">ok, those yes</span></div><div class="line" id="231754"><span class="nick" style="color:#d9d9d9"><a href="#231754" label="[23:17:54]">&lt;unmatched-paren&gt;</a></span><span class="message">yes, exactly that page</span></div><div class="line" id="231805"><span class="nick" style="color:#389600"><a href="#231805" label="[23:18:05]">&lt;stikonas&gt;</a></span><span class="message">there is no way around that</span></div><div class="line" id="231812"><span class="nick" style="color:#389600"><a href="#231812" label="[23:18:12]">&lt;stikonas&gt;</a></span><span class="message">syscalls are always some numbers</span></div><div class="line" id="231825"><span class="nick" style="color:#389600"><a href="#231825" label="[23:18:25]">&lt;stikonas&gt;</a></span><span class="message">yes, in high level language it will be some define</span></div><div class="line" id="231855"><span class="nick" style="color:#389600"><a href="#231855" label="[23:18:55]">&lt;stikonas&gt;</a></span><span class="message">but in the end syscall number is just some constant, there is no way around that</span></div><div class="line" id="231904"><span class="nick" style="color:#d9d9d9"><a href="#231904" label="[23:19:04]">&lt;unmatched-paren&gt;</a></span><span class="message">i remember seeing #defines in assembly code once</span></div><div class="line" id="231905"><span class="nick" style="color:#389600"><a href="#231905" label="[23:19:05]">&lt;stikonas&gt;</a></span><span class="message">they are not even the same across different arches</span></div><div class="line" id="231939"><span class="nick" style="color:#389600"><a href="#231939" label="[23:19:39]">&lt;stikonas&gt;</a></span><span class="message">the good thing is that number of syscall does not grow that much in later programs</span></div><div class="line" id="231953"><span class="nick" style="color:#389600"><a href="#231953" label="[23:19:53]">&lt;stikonas&gt;</a></span><span class="message">in cc_amd64 we add some more, but not that much more</span></div><div class="line" id="232057"><span class="nick" style="color:#389600"><a href="#232057" label="[23:20:57]">&lt;stikonas&gt;</a></span><span class="message">there are only 8 syscalls in cc_amd64 and not all of them different</span></div><div class="line" id="232126"><span class="nick" style="color:#d9d9d9"><a href="#232126" label="[23:21:26]">&lt;unmatched-paren&gt;</a></span><span class="message">is there anywhere i can look up a (brief) description of each instruction? it's pretty obvious what each of them do (like cmp is for doing comparison), but not how to use them (how do i extract the result of the cmp? what number represents less/greater/equal? etc)</span></div><div class="line" id="232144"><span class="nick" style="color:#389600"><a href="#232144" label="[23:21:44]">&lt;stikonas&gt;</a></span><span class="message">hmm, for risc-v I used risc-v isa manual</span></div><div class="line" id="232156"><span class="nick" style="color:#389600"><a href="#232156" label="[23:21:56]">&lt;stikonas&gt;</a></span><span class="message">there should be something for amd64 too</span></div><div class="line" id="232218"><span class="nick" style="color:#389600"><a href="#232218" label="[23:22:18]">&lt;stikonas&gt;</a></span><span class="message">those manuals are large, but you can use search and it's usually just a few pages that you are interested in anyway</span></div><div class="line" id="232224"><span class="nick" style="color:#2e2a4a"><a href="#232224" label="[23:22:24]">&lt;muurkha&gt;</a></span><span class="message">oriansj: C macros got added into the standard because they were in wide use in existing C codebases, where they provided limited forms of separate compilation, manifest constants, inlined functions, parametric polymorphism, and as you point out also compile-time metaprogramming</span></div><div class="line" id="232309"><span class="nick" style="color:#389600"><a href="#232309" label="[23:23:09]">&lt;stikonas&gt;</a></span><span class="message">there is <a rel="nofollow" href="https://www.amd.com/system/files/TechDocs/40332.pdf">https://www.amd.com/system/files/TechDocs/40332.pdf</a> </span></div><div class="line" id="232318"><span class="nick" style="color:#389600"><a href="#232318" label="[23:23:18]">&lt;stikonas&gt;</a></span><span class="message">(which I have never looked at)</span></div><div class="line" id="232324"><span class="nick" style="color:#d9d9d9"><a href="#232324" label="[23:23:24]">&lt;unmatched-paren&gt;</a></span><span class="message">if the manual for risc-v is big, the manual for amd64 is probably gargantuan</span></div><div class="line" id="232347"><span class="nick" style="color:#389600"><a href="#232347" label="[23:23:47]">&lt;stikonas&gt;</a></span><span class="message">unmatched-paren: but out of 120 pages of risc-v manual I was mostly using 2 pages or so</span></div><div class="line" id="232351"><span class="nick" style="color:#2e2a4a"><a href="#232351" label="[23:23:51]">&lt;muurkha&gt;</a></span><span class="message">also, if you compare the C preprocessor to its predecessors m4, m6, and GPM, it's small, clean, and simple</span></div><div class="line" id="232409"><span class="nick" style="color:#389600"><a href="#232409" label="[23:24:09]">&lt;stikonas&gt;</a></span><span class="message">most of it I have not read</span></div><div class="line" id="232432"><span class="nick" style="color:#2e2a4a"><a href="#232432" label="[23:24:32]">&lt;muurkha&gt;</a></span><span class="message">the fact that the C preprocessor was implemented as a separate program meant that on the PDP-11 you could get all kinds of powerful programming features that would have strained the 64K memory space of the compiler</span></div><div class="line" id="232528"><span class="nick" style="color:#2e2a4a"><a href="#232528" label="[23:25:28]">&lt;muurkha&gt;</a></span><span class="message">yes, stikonas, all these preprocessor features are indeed from before ANSI</span></div><div class="line" id="232545"><span class="nick" style="color:#389600"><a href="#232545" label="[23:25:45]">&lt;stikonas&gt;</a></span><span class="message">well, that's why I thought it makes sense that it grew a lot</span></div><div class="line" id="232549"><span class="nick" style="color:#d9d9d9"><a href="#232549" label="[23:25:49]">&lt;unmatched-paren&gt;</a></span><span class="message">i wish dlang didn't have a garbage collector, i'd use it all the time if it didn't</span></div><div class="line" id="232556"><span class="nick" style="color:#389600"><a href="#232556" label="[23:25:56]">&lt;stikonas&gt;</a></span><span class="message">before standards it was probably: this is useful for me, let's add it</span></div><div class="line" id="232622"><span class="nick" style="color:#d9d9d9"><a href="#232622" label="[23:26:22]">&lt;unmatched-paren&gt;</a></span><span class="message">if you disregard the gc, it's just slightly more powerful and less warty c</span></div><div class="line" id="232636"><span class="nick" style="color:#2e2a4a"><a href="#232636" label="[23:26:36]">&lt;muurkha&gt;</a></span><span class="message">there are smaller introductions to amd64</span></div><div class="line" id="232656"><span class="nick" style="color:#d9d9d9"><a href="#232656" label="[23:26:56]">&lt;unmatched-paren&gt;</a></span><span class="message">the @nogc attribute basically bars you from using the stdlib entirely, since it uses the gc extensively</span></div><div class="line" id="232707"><span class="nick" style="color:#2e2a4a"><a href="#232707" label="[23:27:07]">&lt;muurkha&gt;</a></span><span class="message">stikonas: really C was distinguished rom its predecessors by *not* adding lots of features</span></div><div class="line" id="232720"><span class="nick" style="color:#2e2a4a"><a href="#232720" label="[23:27:20]">&lt;muurkha&gt;</a></span><span class="message">*from</span></div><div class="line" id="232741"><span class="nick" style="color:#2e2a4a"><a href="#232741" label="[23:27:41]">&lt;muurkha&gt;</a></span><span class="message">unmatched-paren: yeah, I've used #define in assembly code</span></div><div class="line" id="232758"><span class="nick" style="color:#389600"><a href="#232758" label="[23:27:58]">&lt;stikonas&gt;</a></span><span class="message">muurkha: probably, I've never read any amd64 ISA instructions, so I'm not the best person to judge</span></div><div class="line" id="232913"><span class="nick" style="color:#d9d9d9"><a href="#232913" label="[23:29:13]">&lt;unmatched-paren&gt;</a></span><span class="message">could i learn asm by writing small c programs and disassembling them?</span></div><div class="line" id="232926"><span class="nick" style="color:#d9d9d9"><a href="#232926" label="[23:29:26]">&lt;unmatched-paren&gt;</a></span><span class="message">with gdb</span></div><div class="line" id="232928"><span class="nick" style="color:#389600"><a href="#232928" label="[23:29:28]">&lt;stikonas&gt;</a></span><span class="message">unmatched-paren: that's hard for a few reasons</span></div><div class="line" id="232935"><span class="nick" style="color:#389600"><a href="#232935" label="[23:29:35]">&lt;stikonas&gt;</a></span><span class="message">you can learn a bit</span></div><div class="line" id="232945"><span class="nick" style="color:#389600"><a href="#232945" label="[23:29:45]">&lt;stikonas&gt;</a></span><span class="message">but first of all you need to turn off all optimizations</span></div><div class="line" id="232955"><span class="nick" style="color:#d9d9d9"><a href="#232955" label="[23:29:55]">&lt;unmatched-paren&gt;</a></span><span class="message">yes, that makes sense</span></div><div class="line" id="233033"><span class="nick" style="color:#389600"><a href="#233033" label="[23:30:33]">&lt;stikonas&gt;</a></span><span class="message">and sometimes asm code that compiler generates looks quite a bit different from what person would write</span></div><div class="line" id="233048"><span class="nick" style="color:#d9d9d9"><a href="#233048" label="[23:30:48]">&lt;unmatched-paren&gt;</a></span><span class="message">right</span></div><div class="line" id="233110"><span class="nick" style="color:#389600"><a href="#233110" label="[23:31:10]">&lt;stikonas&gt;</a></span><span class="message">especially for amd64 it would use much more instructions</span></div><div class="line" id="233201"><span class="nick" style="color:#389600"><a href="#233201" label="[23:32:01]">&lt;stikonas&gt;</a></span><span class="message">less of a problem for risc instructions as they don't have too many spare ones</span></div><div class="line" id="233207"><span class="nick" style="color:#d9d9d9"><a href="#233207" label="[23:32:07]">&lt;unmatched-paren&gt;</a></span><span class="message">for syscalls, they wouldn't be documented in the isa since they're os-specific, so i guess there's some linux documentation that lists them?</span></div><div class="line" id="233232"><span class="nick" style="color:#389600"><a href="#233232" label="[23:32:32]">&lt;stikonas&gt;</a></span><span class="message">unmatched-paren: yeah, there are some websites</span></div><div class="line" id="233258"><span class="nick" style="color:#d9d9d9"><a href="#233258" label="[23:32:58]">&lt;unmatched-paren&gt;</a></span><span class="message">the manpages only seem to show you how to use them from c</span></div><div class="line" id="233403"><span class="nick" style="color:#389600"><a href="#233403" label="[23:34:03]">&lt;stikonas&gt;</a></span><span class="message">unmatched-paren: <a rel="nofollow" href="https://marcin.juszkiewicz.com.pl/download/tables/syscalls.html">https://marcin.juszkiewicz.com.pl/download/tables/syscalls.html</a> </span></div><div class="line" id="233419"><span class="nick" style="color:#389600"><a href="#233419" label="[23:34:19]">&lt;stikonas&gt;</a></span><span class="message">unmatched-paren: I also used musl C library to get those numbers</span></div><div class="line" id="233426"><span class="nick" style="color:#389600"><a href="#233426" label="[23:34:26]">&lt;stikonas&gt;</a></span><span class="message">although glibc would also have them</span></div><div class="line" id="233459"><span class="nick" style="color:#389600"><a href="#233459" label="[23:34:59]">&lt;stikonas&gt;</a></span><span class="message">unmatched-paren: see <a rel="nofollow" href="https://git.musl-libc.org/cgit/musl/tree/arch/x86_64/bits/syscall.h.in">https://git.musl-libc.org/cgit/musl/tree/arch/x86_64/bits/syscall.h.in</a> </span></div><div class="line" id="233517"><span class="nick" style="color:#d9d9d9"><a href="#233517" label="[23:35:17]">&lt;unmatched-paren&gt;</a></span><span class="message">stikonas: thanks!</span></div><div class="line" id="233523"><span class="nick" style="color:#d9d9d9"><a href="#233523" label="[23:35:23]">&lt;unmatched-paren&gt;</a></span><span class="message">i'll try writing a hello world</span></div><div class="line" id="233546"><span class="nick" style="color:#389600"><a href="#233546" label="[23:35:46]">&lt;stikonas&gt;</a></span><span class="message">yeah, the steep curve of learning assembly is that it forces you to use syscalls from the very beginning</span></div><div class="line" id="233613"><span class="nick" style="color:#389600"><a href="#233613" label="[23:36:13]">&lt;stikonas&gt;</a></span><span class="message">as you start writing more complicated programs, you actually start doing more normal coding</span></div><div class="line" id="233712"><span class="nick" style="color:#d9d9d9"><a href="#233712" label="[23:37:12]">&lt;unmatched-paren&gt;</a></span><span class="message">the musl header looks pretty useful, but i'm still not about things like which registers to put input into</span></div><div class="line" id="233723"><span class="nick" style="color:#389600"><a href="#233723" label="[23:37:23]">&lt;stikonas&gt;</a></span><span class="message">obviously assembly itself doesn't have built-in functions but you should still implement them</span></div><div class="line" id="233738"><span class="nick" style="color:#389600"><a href="#233738" label="[23:37:38]">&lt;stikonas&gt;</a></span><span class="message">unmatched-paren: search for syscall calling convention</span></div><div class="line" id="233744"><span class="nick" style="color:#389600"><a href="#233744" label="[23:37:44]">&lt;stikonas&gt;</a></span><span class="message">it's always the same for all syscalls</span></div><div class="line" id="233836"><span class="nick" style="color:#389600"><a href="#233836" label="[23:38:36]">&lt;stikonas&gt;</a></span><span class="message">if I remember correctly rax would syscall number, rbx is first argument then rcd, rdx</span></div><div class="line" id="233842"><span class="nick" style="color:#389600"><a href="#233842" label="[23:38:42]">&lt;stikonas&gt;</a></span><span class="message">s/rcd/rcx/</span></div><div class="line" id="233908"><span class="nick" style="color:#389600"><a href="#233908" label="[23:39:08]">&lt;stikonas&gt;</a></span><span class="message">you'll rarely use syscall with more than 3 arguments</span></div><div class="line" id="234145"><span class="nick" style="color:#389600"><a href="#234145" label="[23:41:45]">&lt;stikonas&gt;</a></span><span class="message">unmatched-paren: Hello world will be about 60 lines of assembly</span></div><div class="line" id="234159"><span class="nick" style="color:#389600"><a href="#234159" label="[23:41:59]">&lt;stikonas&gt;</a></span><span class="message">if you try to write reusable code</span></div><div class="line" id="234249"><span class="nick" style="color:#d9d9d9"><a href="#234249" label="[23:42:49]">&lt;unmatched-paren&gt;</a></span><span class="message">to get a stdout, i use open on /dev/stdout, right?</span></div><div class="line" id="234359"><span class="nick" style="color:#389600"><a href="#234359" label="[23:43:59]">&lt;stikonas&gt;</a></span><span class="message">stdout has file descriptor 1</span></div><div class="line" id="234411"><span class="nick" style="color:#d9d9d9"><a href="#234411" label="[23:44:11]">&lt;unmatched-paren&gt;</a></span><span class="message">ah, it's automatically opened?</span></div><div class="line" id="234412"><span class="nick" style="color:#389600"><a href="#234412" label="[23:44:12]">&lt;stikonas&gt;</a></span><span class="message">so you just call open with argument 1</span></div><div class="line" id="234417"><span class="nick" style="color:#389600"><a href="#234417" label="[23:44:17]">&lt;stikonas&gt;</a></span><span class="message">no, you need to open it</span></div><div class="line" id="234504"><span class="nick" style="color:#d9d9d9"><a href="#234504" label="[23:45:04]">&lt;unmatched-paren&gt;</a></span><span class="message">ok... i thought open was for creating new file descriptors mapped to a file on the filesystem</span></div><div class="line" id="234659"><span class="nick" style="color:#389600"><a href="#234659" label="[23:46:59]">&lt;stikonas&gt;</a></span><span class="message">hmm, it's probably openat actually</span></div><div class="line" id="234709"><span class="nick" style="color:#d9d9d9"><a href="#234709" label="[23:47:09]">&lt;unmatched-paren&gt;</a></span><span class="message">i found a syscall reference <a rel="nofollow" href="https://faculty.nps.edu/cseagle/assembly/sys_call.html">https://faculty.nps.edu/cseagle/assembly/sys_call.html</a> </span></div><div class="line" id="234711"><span class="nick" style="color:#389600"><a href="#234711" label="[23:47:11]">&lt;stikonas&gt;</a></span><span class="message">that you need to use</span></div><div class="line" id="234728"><span class="nick" style="color:#389600"><a href="#234728" label="[23:47:28]">&lt;stikonas&gt;</a></span><span class="message">oh, sorry, I mislead you a bit</span></div><div class="line" id="234732"><span class="nick" style="color:#389600"><a href="#234732" label="[23:47:32]">&lt;stikonas&gt;</a></span><span class="message">so you don't need to open stdout</span></div><div class="line" id="234757"><span class="nick" style="color:#389600"><a href="#234757" label="[23:47:57]">&lt;stikonas&gt;</a></span><span class="message">but you need to pass 1 when you call sys_write</span></div><div class="line" id="234831"><span class="nick" style="color:#d9d9d9"><a href="#234831" label="[23:48:31]">&lt;unmatched-paren&gt;</a></span><span class="message">ok, so it's automatically opened</span></div><div class="line" id="234837"><span class="nick" style="color:#d9d9d9"><a href="#234837" label="[23:48:37]">&lt;unmatched-paren&gt;</a></span><span class="message">as 1</span></div><div class="line" id="234840"><span class="nick" style="color:#d9d9d9"><a href="#234840" label="[23:48:40]">&lt;unmatched-paren&gt;</a></span><span class="message">right?</span></div><div class="line" id="234841"><span class="nick" style="color:#389600"><a href="#234841" label="[23:48:41]">&lt;stikonas&gt;</a></span><span class="message">yes, it's already there</span></div><div class="line" id="234847"><span class="nick" style="color:#389600"><a href="#234847" label="[23:48:47]">&lt;stikonas&gt;</a></span><span class="message">stdin is 0, stdout is 1, stderr is 2</span></div><div class="line" id="234848"><span class="nick" style="color:#389600"><a href="#234848" label="[23:48:48]">&lt;stikonas&gt;</a></span><span class="message">yes</span></div><div class="line" id="234916"><span class="nick" style="color:#389600"><a href="#234916" label="[23:49:16]">&lt;stikonas&gt;</a></span><span class="message">I confused it with openning some files passed as an argument in stage0-posix (and if file is missing we used stdout for output)</span></div><div class="line" id="234928"><span class="nick" style="color:#389600"><a href="#234928" label="[23:49:28]">&lt;stikonas&gt;</a></span><span class="message">so yes, those standard ones are open</span></div><div class="line" id="234955"><span class="nick" style="color:#389600"><a href="#234955" label="[23:49:55]">&lt;stikonas&gt;</a></span><span class="message">anyway, try printing some char first</span></div><div class="line" id="234957"><span class="nick" style="color:#389600"><a href="#234957" label="[23:49:57]">&lt;stikonas&gt;</a></span><span class="message">with sys_write</span></div><div class="line" id="235009"><span class="nick" style="color:#389600"><a href="#235009" label="[23:50:09]">&lt;stikonas&gt;</a></span><span class="message">instead of Hello world, start with 'H'</span></div><div class="line" id="235020"><span class="nick" style="color:#d9d9d9"><a href="#235020" label="[23:50:20]">&lt;unmatched-paren&gt;</a></span><span class="message">the cause of my confusion was that i thought that that was something handled by the standard library or runtime of a programming language</span></div><div class="line" id="235035"><span class="nick" style="color:#d9d9d9"><a href="#235035" label="[23:50:35]">&lt;unmatched-paren&gt;</a></span><span class="message">so i'd assumed that it wouldn't be handled in raw assembly</span></div><div class="line" id="235044"><span class="nick" style="color:#d9d9d9"><a href="#235044" label="[23:50:44]">&lt;unmatched-paren&gt;</a></span><span class="message">stikonas: ok, thanks for the tips :)</span></div><div class="line" id="235048"><span class="nick" style="color:#389600"><a href="#235048" label="[23:50:48]">&lt;stikonas&gt;</a></span><span class="message">well, when you have file path, you still need to call sys_openat</span></div><div class="line" id="235054"><span class="nick" style="color:#d9d9d9"><a href="#235054" label="[23:50:54]">&lt;unmatched-paren&gt;</a></span><span class="message">yes</span></div><div class="line" id="235056"><span class="nick" style="color:#389600"><a href="#235056" label="[23:50:56]">&lt;stikonas&gt;</a></span><span class="message">to go from syscall to file descriptor</span></div><div class="line" id="235105"><span class="nick" style="color:#389600"><a href="#235105" label="[23:51:05]">&lt;stikonas&gt;</a></span><span class="message">well, at least in this POSIX assembly</span></div><div class="line" id="235117"><span class="nick" style="color:#389600"><a href="#235117" label="[23:51:17]">&lt;stikonas&gt;</a></span><span class="message">on baremetal of course there are now syscalls or files...</span></div><div class="line" id="235133"><span class="nick" style="color:#389600"><a href="#235133" label="[23:51:33]">&lt;stikonas&gt;</a></span><span class="message">s/now/no/</span></div><div class="line" id="235152"><span class="nick" style="color:#389600"><a href="#235152" label="[23:51:52]">&lt;stikonas&gt;</a></span><span class="message">well, I guess x86 has bios calls</span></div><div class="line" id="235201"><span class="nick" style="color:#389600"><a href="#235201" label="[23:52:01]">&lt;stikonas&gt;</a></span><span class="message">so you might still be able to write hello world there</span></div><div class="line" id="235220"><span class="nick" style="color:#389600"><a href="#235220" label="[23:52:20]">&lt;stikonas&gt;</a></span><span class="message">but e.g. on arm you can't...</span></div><div class="line" id="235245"><span class="nick" style="color:#d9d9d9"><a href="#235245" label="[23:52:45]">&lt;unmatched-paren&gt;</a></span><span class="message">and then the resulting file descriptor would be written to ebx, according to the table i found</span></div><div class="line" id="235305"><span class="nick" style="color:#d9d9d9"><a href="#235305" label="[23:53:05]">&lt;unmatched-paren&gt;</a></span><span class="message">actually, this table doesn't mention openat, only open...</span></div><div class="line" id="235335"><span class="nick" style="color:#389600"><a href="#235335" label="[23:53:35]">&lt;stikonas&gt;</a></span><span class="message">openat is newer syscall if I remember correctly</span></div><div class="line" id="235343"><span class="nick" style="color:#389600"><a href="#235343" label="[23:53:43]">&lt;stikonas&gt;</a></span><span class="message">amd64 probably has open (historical) and newer openat</span></div><div class="line" id="235416"><span class="nick" style="color:#389600"><a href="#235416" label="[23:54:16]">&lt;stikonas&gt;</a></span><span class="message">newer arches on Linux do not implement those retired syscalls</span></div><div class="line" id="235449"><span class="nick" style="color:#389600"><a href="#235449" label="[23:54:49]">&lt;stikonas&gt;</a></span><span class="message">well, open vs openat just differs in first argument</span></div><div class="line" id="235520"><span class="nick" style="color:#d9d9d9"><a href="#235520" label="[23:55:20]">&lt;unmatched-paren&gt;</a></span><span class="message">ah &quot;First, openat() allows an application to avoid race conditions that could occur when using open(2) to open files in directories other than the current working directory.&quot;</span></div><div class="line" id="235547"><span class="nick" style="color:#389600"><a href="#235547" label="[23:55:47]">&lt;stikonas&gt;</a></span><span class="message">so I was just passing AT_FDCWD as first argument to openat</span></div><div class="line" id="235552"><span class="nick" style="color:#389600"><a href="#235552" label="[23:55:52]">&lt;stikonas&gt;</a></span><span class="message">which basically does what open would do</span></div><div class="line" id="235612"><span class="nick" style="color:#389600"><a href="#235612" label="[23:56:12]">&lt;stikonas&gt;</a></span><span class="message">AT_FDCWD is -100 if I remember correctly</span></div><div class="line" id="235758"><span class="nick" style="color:#d9d9d9"><a href="#235758" label="[23:57:58]">&lt;unmatched-paren&gt;</a></span><span class="message">well, now i know why openat isn't listed: &quot;The following table lists the system calls for the Linux 2.2 kernel.&quot;</span></div><div class="line" id="235821"><span class="nick" style="color:#d9d9d9"><a href="#235821" label="[23:58:21]">&lt;unmatched-paren&gt;</a></span><span class="message"> <a rel="nofollow" href="https://eds000n.github.io/syscalls-x86_64.html">https://eds000n.github.io/syscalls-x86_64.html</a>  is more up to date</span></div><div class="line" id="235835"><span class="nick" style="color:#d9d9d9"><a href="#235835" label="[23:58:35]">&lt;unmatched-paren&gt;</a></span><span class="message">oh, no, that's v3.10.17</span></div><br /></div></body></html>