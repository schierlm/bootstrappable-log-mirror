<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-04-16.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000020"><span class="nick" style="color:#389600"><a href="#000020" label="[00:00:20]">&lt;oriansj&gt;</a></span><span class="message">2 char labels don't save much complexity relative to arbitrary length labels unless you require all labels to be exactly 2 chars</span></div><div class="line" id="000033"><span class="nick" style="color:#8dd3c7"><a href="#000033" label="[00:00:33]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I was thinking exactly 2 characters</span></div><div class="line" id="000046"><span class="nick" style="color:#8dd3c7"><a href="#000046" label="[00:00:46]">&lt;stikonas&gt;</a></span><span class="message">but maybe we won't need that</span></div><div class="line" id="000101"><span class="nick" style="color:#8dd3c7"><a href="#000101" label="[00:01:01]">&lt;stikonas&gt;</a></span><span class="message">anyway, I'll let rickmasters to investigate this in the future</span></div><div class="line" id="000125"><span class="nick" style="color:#8dd3c7"><a href="#000125" label="[00:01:25]">&lt;stikonas&gt;</a></span><span class="message">(i.e. whether first smaller kernel can run hex1/hex2 or maybe will have built-in hex10</span></div><div class="line" id="000146"><span class="nick" style="color:#389600"><a href="#000146" label="[00:01:46]">&lt;oriansj&gt;</a></span><span class="message">well 2 characters would need 256KB of memory just for the label table</span></div><div class="line" id="000532"><span class="nick" style="color:#8dd3c7"><a href="#000532" label="[00:05:32]">&lt;stikonas&gt;</a></span><span class="message">oriansj: I only though about getting 256 with printable chars</span></div><div class="line" id="000556"><span class="nick" style="color:#8dd3c7"><a href="#000556" label="[00:05:56]">&lt;stikonas&gt;</a></span><span class="message">i.e. to hex to combine into 1 byte...</span></div><div class="line" id="000607"><span class="nick" style="color:#8dd3c7"><a href="#000607" label="[00:06:07]">&lt;stikonas&gt;</a></span><span class="message">but anyway, that might not be necessary</span></div><div class="line" id="000632"><span class="nick" style="color:#8dd3c7"><a href="#000632" label="[00:06:32]">&lt;stikonas&gt;</a></span><span class="message">let's wait a bit until smaller seed kernel materializes</span></div><div class="line" id="000718"><span class="nick" style="color:#389600"><a href="#000718" label="[00:07:18]">&lt;oriansj&gt;</a></span><span class="message">well 4KB of hex0 is within the margin of auditable</span></div><div class="line" id="000907"><span class="nick" style="color:#8dd3c7"><a href="#000907" label="[00:09:07]">&lt;stikonas&gt;</a></span><span class="message">yes, it is</span></div><div class="line" id="000916"><span class="nick" style="color:#8dd3c7"><a href="#000916" label="[00:09:16]">&lt;stikonas&gt;</a></span><span class="message">but we might be able to get it down a bit</span></div><div class="line" id="000931"><span class="nick" style="color:#389600"><a href="#000931" label="[00:09:31]">&lt;oriansj&gt;</a></span><span class="message">it is far from ideal from an editing persective but shrinking builder-hex0 is probably something that can wait unless someone thinks it'll be really fun.</span></div><div class="line" id="001010"><span class="nick" style="color:#8dd3c7"><a href="#001010" label="[00:10:10]">&lt;stikonas&gt;</a></span><span class="message">well, we already have builder-hex0-mini, it's just that it needs a reboot</span></div><div class="line" id="001015"><span class="nick" style="color:#389600"><a href="#001015" label="[00:10:15]">&lt;oriansj&gt;</a></span><span class="message">but you gave me an idea</span></div><div class="line" id="001024"><span class="nick" style="color:#8dd3c7"><a href="#001024" label="[00:10:24]">&lt;stikonas&gt;</a></span><span class="message">and then it will still only run hex0 for now</span></div><div class="line" id="001037"><span class="nick" style="color:#8dd3c7"><a href="#001037" label="[00:10:37]">&lt;stikonas&gt;</a></span><span class="message">which is why I was proposing that we somehow get hex1 or hex2 there</span></div><div class="line" id="001053"><span class="nick" style="color:#8dd3c7"><a href="#001053" label="[00:10:53]">&lt;stikonas&gt;</a></span><span class="message">so that then we could directly build builder-hex0.hex2</span></div><div class="line" id="001057"><span class="nick" style="color:#8dd3c7"><a href="#001057" label="[00:10:57]">&lt;stikonas&gt;</a></span><span class="message">oriansj: what's the idea?</span></div><div class="line" id="001132"><span class="nick" style="color:#389600"><a href="#001132" label="[00:11:32]">&lt;oriansj&gt;</a></span><span class="message">sparse executables loaded into a shared address space</span></div><div class="line" id="001247"><span class="nick" style="color:#8dd3c7"><a href="#001247" label="[00:12:47]">&lt;stikonas&gt;</a></span><span class="message">by the way, I've started converting cc_x86.M1 to new GAS style defines...</span></div><div class="line" id="001248"><span class="nick" style="color:#389600"><a href="#001248" label="[00:12:48]">&lt;oriansj&gt;</a></span><span class="message">then absolute addresses would rarely need to change and only relative jumps inside of a single function would ever need to be calculated.</span></div><div class="line" id="001255"><span class="nick" style="color:#8dd3c7"><a href="#001255" label="[00:12:55]">&lt;stikonas&gt;</a></span><span class="message">that's the last file that was still using old defines</span></div><div class="line" id="001309"><span class="nick" style="color:#389600"><a href="#001309" label="[00:13:09]">&lt;oriansj&gt;</a></span><span class="message">stikonas: thank you for that ^_^</span></div><div class="line" id="001310"><span class="nick" style="color:#8dd3c7"><a href="#001310" label="[00:13:10]">&lt;stikonas&gt;</a></span><span class="message">(at least in stage0-posix, maybe there are some prototypes in stage0 itself)</span></div><div class="line" id="001325"><span class="nick" style="color:#8dd3c7"><a href="#001325" label="[00:13:25]">&lt;stikonas&gt;</a></span><span class="message">maybe once I'm done we could make new relases...</span></div><div class="line" id="001431"><span class="nick" style="color:#389600"><a href="#001431" label="[00:14:31]">&lt;oriansj&gt;</a></span><span class="message">definitely would deserve that</span></div><div class="line" id="001554"><span class="nick" style="color:#8dd3c7"><a href="#001554" label="[00:15:54]">&lt;stikonas&gt;</a></span><span class="message">well, it's not really because of defines</span></div><div class="line" id="001602"><span class="nick" style="color:#8dd3c7"><a href="#001602" label="[00:16:02]">&lt;stikonas&gt;</a></span><span class="message">but we have quite a few other things...</span></div><div class="line" id="001630"><span class="nick" style="color:#8dd3c7"><a href="#001630" label="[00:16:30]">&lt;stikonas&gt;</a></span><span class="message"> (<a rel="nofollow" href="https://github.com/oriansj/stage0-posix/blob/master/CHANGELOG.org">https://github.com/oriansj/stage0-posix/blob/master/CHANGELOG.org</a>) </span></div><div class="line" id="001729"><span class="nick" style="color:#8dd3c7"><a href="#001729" label="[00:17:29]">&lt;stikonas&gt;</a></span><span class="message">argh, just noticed that org mode converts double dash -- into em dahs</span></div><div class="line" id="002052"><span class="nick" style="color:#8dd3c7"><a href="#002052" label="[00:20:52]">&lt;stikonas&gt;</a></span><span class="message">I guess I would need =--file= instead of --file</span></div><div class="line" id="002137"><span class="nick" style="color:#389600"><a href="#002137" label="[00:21:37]">&lt;oriansj&gt;</a></span><span class="message">hmmm,my idea isn't probably worth the complexity as BootOS could already be used to write builder-hex0's 4KB kernel to disk in 8 512byte blocks and with a minor tweak boot directly to it</span></div><div class="line" id="002252"><span class="nick" style="color:#8dd3c7"><a href="#002252" label="[00:22:52]">&lt;stikonas&gt;</a></span><span class="message">well, the biggest practical problem is of course preparation of source disk...</span></div><div class="line" id="002338"><span class="nick" style="color:#8dd3c7"><a href="#002338" label="[00:23:38]">&lt;stikonas&gt;</a></span><span class="message">nobody would really be able to type e.g. linux source code into BootOS prompt...</span></div><div class="line" id="002606"><span class="nick" style="color:#8dd3c7"><a href="#002606" label="[00:26:06]">&lt;stikonas&gt;</a></span><span class="message">or even read all source code...</span></div><div class="line" id="002620"><span class="nick" style="color:#389600"><a href="#002620" label="[00:26:20]">&lt;oriansj&gt;</a></span><span class="message">well we could write a network client which just gets a block number and a 512byte payload and use an external system to populate. We could write a trivial filesystem unpacker which reads the contents of a DVD/CD/Tape Drive/etc</span></div><div class="line" id="002927"><span class="nick" style="color:#389600"><a href="#002927" label="[00:29:27]">&lt;oriansj&gt;</a></span><span class="message">I could port SET</span></div><div class="line" id="002958"><span class="nick" style="color:#8dd3c7"><a href="#002958" label="[00:29:58]">&lt;stikonas&gt;</a></span><span class="message">in practice it's unlikely to be used by many people...</span></div><div class="line" id="003048"><span class="nick" style="color:#8dd3c7"><a href="#003048" label="[00:30:48]">&lt;stikonas&gt;</a></span><span class="message">I suspect even if somebody wants to bootstrap, they would most likely limit themselves to kernel bootstrap with pre-prepared disk image with source code and seeds</span></div><div class="line" id="003105"><span class="nick" style="color:#389600"><a href="#003105" label="[00:31:05]">&lt;oriansj&gt;</a></span><span class="message">well builder-hex0 in its current form is pretty darn close to something one could bootstrap from zero in a month</span></div><div class="line" id="003709"><span class="nick" style="color:#389600"><a href="#003709" label="[00:37:09]">&lt;oriansj&gt;</a></span><span class="message">and you are right in that even stage0-posix-x86 is 403,588bytes of source</span></div><div class="line" id="003747"><span class="nick" style="color:#389600"><a href="#003747" label="[00:37:47]">&lt;oriansj&gt;</a></span><span class="message">and that isn't even counting M2libc, M2-Planet or anything written in C</span></div><div class="line" id="004002"><span class="nick" style="color:#389600"><a href="#004002" label="[00:40:02]">&lt;oriansj&gt;</a></span><span class="message">live-boostrap wouldn't even fit on a CD</span></div><div class="line" id="004328"><span class="nick" style="color:#389600"><a href="#004328" label="[00:43:28]">&lt;oriansj&gt;</a></span><span class="message">so for the sake of simplicity, let us just assume there was a DVD or other media with contains of the source code. We either assume a custom filesystem (like builder-hex0 does) or a program which just converts from a more standard filesystem to the filesystem that builder-hex0 expects.</span></div><div class="line" id="004550"><span class="nick" style="color:#389600"><a href="#004550" label="[00:45:50]">&lt;oriansj&gt;</a></span><span class="message">as there is no way to escape the need for some prepared disk/disc/tape image with the source code; but we could skip the seeds as they could be built or a different image (say on the bootsector of a floppy disk)</span></div><div class="line" id="004903"><span class="nick" style="color:#389600"><a href="#004903" label="[00:49:03]">&lt;oriansj&gt;</a></span><span class="message">so let us assume the builder-hex0 kernel, the stage0-posix source code and BootOS on the bootsector of a 1.44MB floppy disk; then loading the rest of live-bootstrap can be done in programs written in C/assembly</span></div><div class="line" id="004920"><span class="nick" style="color:#389600"><a href="#004920" label="[00:49:20]">&lt;oriansj&gt;</a></span><span class="message">as say an after.kaem script</span></div><div class="line" id="004924"><span class="nick" style="color:#2e2a4a"><a href="#004924" label="[00:49:24]">&lt;muurkha&gt;</a></span><span class="message">nice</span></div><div class="line" id="005325"><span class="nick" style="color:#389600"><a href="#005325" label="[00:53:25]">&lt;oriansj&gt;</a></span><span class="message">I can write a 512byte less program which bootOS can build and run; then one can audit the source code on the disk if they want</span></div><div class="line" id="012605"><span class="nick" style="color:#389600"><a href="#012605" label="[01:26:05]">&lt;oriansj&gt;</a></span><span class="message">fossy: download-distfiles.sh should have #!/usr/bin/env bash instead of #!/bin/bash as it is more portable</span></div><div class="line" id="012622"><span class="nick" style="color:#6b8072"><a href="#012622" label="[01:26:22]">&lt;fossy&gt;</a></span><span class="message">this is true</span></div><div class="line" id="012700"><span class="nick" style="color:#6b8072"><a href="#012700" label="[01:27:00]">&lt;fossy&gt;</a></span><span class="message">doras: agreed with stikonas on all of that :)</span></div><div class="line" id="012807"><span class="nick" style="color:#6b8072"><a href="#012807" label="[01:28:07]">&lt;fossy&gt;</a></span><span class="message">oriansj: fixed, thank you :)</span></div><div class="line" id="014407"><span class="nick" style="color:#2e2a4a"><a href="#014407" label="[01:44:07]">&lt;muurkha&gt;</a></span><span class="message">oriansj: why don't you patch bootOS to load and save entire floppy tracks instead of single sectors?</span></div><div class="line" id="014425"><span class="nick" style="color:#6b8072"><a href="#014425" label="[01:44:25]">&lt;fossy&gt;</a></span><span class="message">FWIW, i'm working on GCC 12 now</span></div><div class="line" id="014432"><span class="nick" style="color:#8dd3c7"><a href="#014432" label="[01:44:32]">&lt;stikonas&gt;</a></span><span class="message">fossy: nice!</span></div><div class="line" id="014432"><span class="nick" style="color:#6b8072"><a href="#014432" label="[01:44:32]">&lt;fossy&gt;</a></span><span class="message">seems to be rather simple so far :)</span></div><div class="line" id="014438"><span class="nick" style="color:#8dd3c7"><a href="#014438" label="[01:44:38]">&lt;stikonas&gt;</a></span><span class="message">yeah, should be easy now</span></div><div class="line" id="014441"><span class="nick" style="color:#8dd3c7"><a href="#014441" label="[01:44:41]">&lt;stikonas&gt;</a></span><span class="message">GCC 10 is not ancient</span></div><div class="line" id="014454"><span class="nick" style="color:#8dd3c7"><a href="#014454" label="[01:44:54]">&lt;stikonas&gt;</a></span><span class="message">we already have new toolchain and all dependencies</span></div><div class="line" id="014508"><span class="nick" style="color:#2e2a4a"><a href="#014508" label="[01:45:08]">&lt;muurkha&gt;</a></span><span class="message">then you have 18 sectors (9 KiB) for the stage of the bootstrap following bootOS</span></div><div class="line" id="014539"><span class="nick" style="color:#6b8072"><a href="#014539" label="[01:45:39]">&lt;fossy&gt;</a></span><span class="message">i've enabled PIE and SSP as well, not very useful for live-bootstrap, but i suspect some distros will bork if they aren't available</span></div><div class="line" id="014555"><span class="nick" style="color:#6b8072"><a href="#014555" label="[01:45:55]">&lt;fossy&gt;</a></span><span class="message">(for GCC 12)</span></div><div class="line" id="020844"><span class="nick" style="color:#389600"><a href="#020844" label="[02:08:44]">&lt;oriansj&gt;</a></span><span class="message">muurkha: well we only need 4KB for builder-hex0 and the rest of the space can be used for tools which deal with the ability to manipulate the full floppy</span></div><div class="line" id="021011"><span class="nick" style="color:#389600"><a href="#021011" label="[02:10:11]">&lt;oriansj&gt;</a></span><span class="message">so 18 sectors is plenty for our needs</span></div><div class="line" id="021638"><span class="nick" style="color:#389600"><a href="#021638" label="[02:16:38]">&lt;oriansj&gt;</a></span><span class="message">hmm sysa/distfiles/heirloom-devtools-070527.tar.bz2: FAILED</span></div><div class="line" id="021747"><span class="nick" style="color:#389600"><a href="#021747" label="[02:17:47]">&lt;oriansj&gt;</a></span><span class="message">(good thing I have a copy with the correct checksum available)</span></div><div class="line" id="022850"><span class="nick" style="color:#2e2a4a"><a href="#022850" label="[02:28:50]">&lt;muurkha&gt;</a></span><span class="message">yeah, that's the kind of thing I was thinking of</span></div><div class="line" id="023000"><span class="nick" style="color:#2e2a4a"><a href="#023000" label="[02:30:00]">&lt;muurkha&gt;</a></span><span class="message">I think you only need a few more bytes of code in bootOS to loop up to 18 when it loads or saves a &quot;file&quot;</span></div><div class="line" id="024354"><span class="nick" style="color:#6b8072"><a href="#024354" label="[02:43:54]">&lt;fossy&gt;</a></span><span class="message">hey, rickmasters, (whenever you are here), with your branch fiwix-1.4.0-lb-e1bf632, should disk now work with Fiwix?</span></div><div class="line" id="024409"><span class="nick" style="color:#6b8072"><a href="#024409" label="[02:44:09]">&lt;fossy&gt;</a></span><span class="message">in live-bootstrap that is</span></div><div class="line" id="031111"><span class="nick" style="color:#80b1d3"><a href="#031111" label="[03:11:11]">&lt;stikonas[m]&gt;</a></span><span class="message">Fiwix need real HDD though (so not USB storage)</span></div><div class="line" id="032356"><span class="nick" style="color:#6b8072"><a href="#032356" label="[03:23:56]">&lt;fossy&gt;</a></span><span class="message">yes, not very problematic IMO</span></div><div class="line" id="032402"><span class="nick" style="color:#6b8072"><a href="#032402" label="[03:24:02]">&lt;fossy&gt;</a></span><span class="message">i assume ata</span></div><div class="line" id="032430"><span class="nick" style="color:#6b8072"><a href="#032430" label="[03:24:30]">&lt;fossy&gt;</a></span><span class="message">&quot;IDE/ATA hard disk device driver.&quot; &lt;-- yes</span></div><div class="line" id="105836"><span class="nick" style="color:#6d2462"><a href="#105836" label="[10:58:36]">&lt;river&gt;</a></span><span class="message">i wrote a blog post about the potential for LLM based worms. I added a section about bootstarpping <a rel="nofollow" href="https://gist.github.com/rain-1/cc67caa8873ee38098aefb0f35f46014">https://gist.github.com/rain-1/cc67caa8873ee38098aefb0f35f46014</a> </span></div><div class="line" id="115041"><span class="nick" style="color:#234e69"><a href="#115041" label="[11:50:41]">&lt;gforce_d11977&gt;</a></span><span class="message">@oriansj: i read to often &quot;floppy&quot;, which i'am used to - but keep in mind, that the path ideally should be similar for different platforms. think about risc-v or motorola 68k (very different). so an simple large drive (or pumped in via serial-port into memory) with the sources on it should be enough</span></div><div class="line" id="115050"><span class="nick" style="color:#234e69"><a href="#115050" label="[11:50:50]">&lt;gforce_d11977&gt;</a></span><span class="message">(to =&gt; too)</span></div><div class="line" id="133051"><span class="nick" style="color:#8dd3c7"><a href="#133051" label="[13:30:51]">&lt;stikonas&gt;</a></span><span class="message">fossy: maybe we should metion this channel on live-bootstrap's README?</span></div><div class="line" id="142848"><span class="nick" style="color:#389600"><a href="#142848" label="[14:28:48]">&lt;oriansj&gt;</a></span><span class="message">river: well the longer one thinks on AI, the more possible uncontrolled runaway appears.</span></div><div class="line" id="143018"><span class="nick" style="color:#389600"><a href="#143018" label="[14:30:18]">&lt;oriansj&gt;</a></span><span class="message">gforce_d11977: i don't think we should hard code any single path to bootstrapping up to a POSIX kernel. And once we have a POSIX kernel, then the details of the hardware matter far less</span></div><div class="line" id="150319"><span class="nick" style="color:#6d2462"><a href="#150319" label="[15:03:19]">&lt;river&gt;</a></span><span class="message">yeah</span></div><div class="line" id="150535"><span class="nick" style="color:#80b1d3"><a href="#150535" label="[15:05:35]">&lt;stikonas[m]&gt;</a></span><span class="message">We are probably still somewhat far from AI runaway but something like that is definitely plausible...</span></div><div class="line" id="154417"><span class="nick" style="color:#6c3d55"><a href="#154417" label="[15:44:17]">&lt;rickmasters&gt;</a></span><span class="message">fossy: I have to do more testing, but the Fiwix kernel is probably stable enough to run live-bootstrap off hard drive.</span></div><div class="line" id="154427"><span class="nick" style="color:#6c3d55"><a href="#154427" label="[15:44:27]">&lt;rickmasters&gt;</a></span><span class="message">The main blocking issue is that builder-hex0 cannot write an ext2 image large enough to build sysa.</span></div><div class="line" id="154437"><span class="nick" style="color:#6c3d55"><a href="#154437" label="[15:44:37]">&lt;rickmasters&gt;</a></span><span class="message">The HD geometry that qemu/SeaBIOS provides limits the legacy CHS int 0x13 interface to 1008MB which is not enough.</span></div><div class="line" id="154446"><span class="nick" style="color:#6c3d55"><a href="#154446" label="[15:44:46]">&lt;rickmasters&gt;</a></span><span class="message">There are different ways to resolve this.</span></div><div class="line" id="154457"><span class="nick" style="color:#6c3d55"><a href="#154457" label="[15:44:57]">&lt;rickmasters&gt;</a></span><span class="message">We have discussed this before but I'll repeat the options again as a reminder and so others can follow.</span></div><div class="line" id="154509"><span class="nick" style="color:#6c3d55"><a href="#154509" label="[15:45:09]">&lt;rickmasters&gt;</a></span><span class="message">If qemu/SeaBIOS would present a different geometry it would allow writing larger images with current builder-hex0.</span></div><div class="line" id="154522"><span class="nick" style="color:#6c3d55"><a href="#154522" label="[15:45:22]">&lt;rickmasters&gt;</a></span><span class="message">This is known as ECHS but so far I haven't been able to invoke this behavior/feature.</span></div><div class="line" id="154539"><span class="nick" style="color:#6c3d55"><a href="#154539" label="[15:45:39]">&lt;rickmasters&gt;</a></span><span class="message">But I haven't yet given up on this option because it may be the easiest and has few downsides.</span></div><div class="line" id="154549"><span class="nick" style="color:#6c3d55"><a href="#154549" label="[15:45:49]">&lt;rickmasters&gt;</a></span><span class="message">Another option is to modify builder-hex0 to use the LBA BIOS interface.</span></div><div class="line" id="154611"><span class="nick" style="color:#6c3d55"><a href="#154611" label="[15:46:11]">&lt;rickmasters&gt;</a></span><span class="message">LBA is how everything works these days, I think, and it should be fairly easy to do.</span></div><div class="line" id="154621"><span class="nick" style="color:#6c3d55"><a href="#154621" label="[15:46:21]">&lt;rickmasters&gt;</a></span><span class="message">But it means that hard drive/BIOS combinations prior to the mid 1990s will be left out.</span></div><div class="line" id="154629"><span class="nick" style="color:#6c3d55"><a href="#154629" label="[15:46:29]">&lt;rickmasters&gt;</a></span><span class="message">To me, this is acceptable and so it could be the best option in terms of cost/benefit.</span></div><div class="line" id="154639"><span class="nick" style="color:#6c3d55"><a href="#154639" label="[15:46:39]">&lt;rickmasters&gt;</a></span><span class="message">A third option is to change live-bootstrap sysa to keep within 1008MB.</span></div><div class="line" id="154647"><span class="nick" style="color:#6c3d55"><a href="#154647" label="[15:46:47]">&lt;rickmasters&gt;</a></span><span class="message">The low hanging fruit here is that linux-headers uses way more space than is necessary.</span></div><div class="line" id="154657"><span class="nick" style="color:#6c3d55"><a href="#154657" label="[15:46:57]">&lt;rickmasters&gt;</a></span><span class="message">I recently tried this option because it is currently the easiest way to test Fiwix.</span></div><div class="line" id="154706"><span class="nick" style="color:#6c3d55"><a href="#154706" label="[15:47:06]">&lt;rickmasters&gt;</a></span><span class="message">Even using a very small linux-headers tar file I still ran out of space building linux (which was surprising).</span></div><div class="line" id="154718"><span class="nick" style="color:#6c3d55"><a href="#154718" label="[15:47:18]">&lt;rickmasters&gt;</a></span><span class="message">Assuming I could get that to work, the downside is that it would leave sysa size-constrained.</span></div><div class="line" id="154728"><span class="nick" style="color:#6c3d55"><a href="#154728" label="[15:47:28]">&lt;rickmasters&gt;</a></span><span class="message">Part of me thinks that constraint is a good thing but I've sensed that you and stikonas are not fans of that constraint.</span></div><div class="line" id="154738"><span class="nick" style="color:#6c3d55"><a href="#154738" label="[15:47:38]">&lt;rickmasters&gt;</a></span><span class="message">The fourth option is to format a larger second partition after Fiwix boots.</span></div><div class="line" id="154749"><span class="nick" style="color:#6c3d55"><a href="#154749" label="[15:47:49]">&lt;rickmasters&gt;</a></span><span class="message">I think this is the option you favor and I'm OK with that option if it makes the most sense.</span></div><div class="line" id="154757"><span class="nick" style="color:#6c3d55"><a href="#154757" label="[15:47:57]">&lt;rickmasters&gt;</a></span><span class="message">But to be honest it is not my favorite.</span></div><div class="line" id="154808"><span class="nick" style="color:#6c3d55"><a href="#154808" label="[15:48:08]">&lt;rickmasters&gt;</a></span><span class="message">There is new work needed to transition to a second partition which further complicates live-bootstrap.</span></div><div class="line" id="154817"><span class="nick" style="color:#6c3d55"><a href="#154817" label="[15:48:17]">&lt;rickmasters&gt;</a></span><span class="message">And we end up with a useless 1G partition.</span></div><div class="line" id="154828"><span class="nick" style="color:#6c3d55"><a href="#154828" label="[15:48:28]">&lt;rickmasters&gt;</a></span><span class="message">Just changing builder-hex0 to LBA avoids this, for example, so I'd like to make sure we've reconsidered all the options first.</span></div><div class="line" id="154836"><span class="nick" style="color:#6c3d55"><a href="#154836" label="[15:48:36]">&lt;rickmasters&gt;</a></span><span class="message">The End. :)</span></div><div class="line" id="161252"><span class="nick" style="color:#80b1d3"><a href="#161252" label="[16:12:52]">&lt;stikonas[m]&gt;</a></span><span class="message">rickmasters: well, we could try to unify Linux and Linux headers tarballs too</span></div><div class="line" id="161256"><span class="nick" style="color:#80b1d3"><a href="#161256" label="[16:12:56]">&lt;stikonas[m]&gt;</a></span><span class="message">We now ship both</span></div><div class="line" id="161326"><span class="nick" style="color:#80b1d3"><a href="#161326" label="[16:13:26]">&lt;stikonas[m]&gt;</a></span><span class="message">(Headers are newer but without any real reason...)</span></div><div class="line" id="161404"><span class="nick" style="color:#8dd3c7"><a href="#161404" label="[16:14:04]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: in general I'm not really against size constraint</span></div><div class="line" id="161437"><span class="nick" style="color:#8dd3c7"><a href="#161437" label="[16:14:37]">&lt;stikonas&gt;</a></span><span class="message">but we need to figure out where all the space or RAM is running out</span></div><div class="line" id="161444"><span class="nick" style="color:#6c3d55"><a href="#161444" label="[16:14:44]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: I spent some time trying to use linux-4.9.10 for headers but ran into a problem.</span></div><div class="line" id="161445"><span class="nick" style="color:#8dd3c7"><a href="#161445" label="[16:14:45]">&lt;stikonas&gt;</a></span><span class="message">I was not sure why linux kernel uses so much</span></div><div class="line" id="161458"><span class="nick" style="color:#8dd3c7"><a href="#161458" label="[16:14:58]">&lt;stikonas&gt;</a></span><span class="message">rickmasters: we could go for newer kernel and older headers</span></div><div class="line" id="161501"><span class="nick" style="color:#8dd3c7"><a href="#161501" label="[16:15:01]">&lt;stikonas&gt;</a></span><span class="message">meet somewhere in the middle</span></div><div class="line" id="161515"><span class="nick" style="color:#8dd3c7"><a href="#161515" label="[16:15:15]">&lt;stikonas&gt;</a></span><span class="message">I think with new binutils, we should be able to build somewhat newer kernel</span></div><div class="line" id="161543"><span class="nick" style="color:#6c3d55"><a href="#161543" label="[16:15:43]">&lt;rickmasters&gt;</a></span><span class="message">Compiling dhcpcd-9.5.0 I got: /usr/include/linux/if.h:79: error: syntax error before numeric constant</span></div><div class="line" id="161554"><span class="nick" style="color:#6c3d55"><a href="#161554" label="[16:15:54]">&lt;rickmasters&gt;</a></span><span class="message">And I couldn't figure out why</span></div><div class="line" id="161855"><span class="nick" style="color:#6c3d55"><a href="#161855" label="[16:18:55]">&lt;rickmasters&gt;</a></span><span class="message">Just to test fiwix I rebuilt the linux-5.10.41 tar ball with just headers, saving 173MB.</span></div><div class="line" id="161916"><span class="nick" style="color:#6c3d55"><a href="#161916" label="[16:19:16]">&lt;rickmasters&gt;</a></span><span class="message">This should have been enough to fit sysa but I still ran out.</span></div><div class="line" id="161956"><span class="nick" style="color:#6c3d55"><a href="#161956" label="[16:19:56]">&lt;rickmasters&gt;</a></span><span class="message">Because the ram drive build fits in 1152MB</span></div><div class="line" id="162035"><span class="nick" style="color:#6c3d55"><a href="#162035" label="[16:20:35]">&lt;rickmasters&gt;</a></span><span class="message">It's a mystery I should probably track down.</span></div><div class="line" id="162927"><span class="nick" style="color:#6c3d55"><a href="#162927" label="[16:29:27]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: The linux 4.9.10 tar file is 136M (M=1024*1024) and the untarred source is 763M so thats 900M right there.</span></div><div class="line" id="163402"><span class="nick" style="color:#6c3d55"><a href="#163402" label="[16:34:02]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: now that I think about it, the linux build script deletes all source tar files before building,</span></div><div class="line" id="163422"><span class="nick" style="color:#6c3d55"><a href="#163422" label="[16:34:22]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: so reducing the linux-headers tar file wouldn't help.</span></div><div class="line" id="163911"><span class="nick" style="color:#80b1d3"><a href="#163911" label="[16:39:11]">&lt;stikonas[m]&gt;</a></span><span class="message">Yeah, it's indeed a mystery where the space goes...</span></div><div class="line" id="163925"><span class="nick" style="color:#80b1d3"><a href="#163925" label="[16:39:25]">&lt;stikonas[m]&gt;</a></span><span class="message">We must be missing something</span></div><div class="line" id="164635"><span class="nick" style="color:#d9d9d9"><a href="#164635" label="[16:46:35]">&lt;aggi&gt;</a></span><span class="message">i think recent kernel versions aren't desireable anyway</span></div><div class="line" id="164800"><span class="nick" style="color:#d9d9d9"><a href="#164800" label="[16:48:00]">&lt;aggi&gt;</a></span><span class="message">checked the statistics, tarball-sizes, lines of code, and linux blew up since 2.4-2.6 transition, due to various features introduced (ACPI, USB, drivers), features which aren't necessary for bootstrappable</span></div><div class="line" id="164813"><span class="nick" style="color:#d9d9d9"><a href="#164813" label="[16:48:13]">&lt;aggi&gt;</a></span><span class="message">and features which aren't necessary for a stable and scalable kernel</span></div><div class="line" id="164828"><span class="nick" style="color:#6c3d55"><a href="#164828" label="[16:48:28]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: There are two mysteries maybe but I just resolved the one I was talking about.</span></div><div class="line" id="164920"><span class="nick" style="color:#6c3d55"><a href="#164920" label="[16:49:20]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: The mystery was: If we can build sysa in 1152MB then why can't we build it in 1008 if we save 173MB from linux-headers?</span></div><div class="line" id="164946"><span class="nick" style="color:#d9d9d9"><a href="#164946" label="[16:49:46]">&lt;aggi&gt;</a></span><span class="message">besides, full tcc-integration with linux-2.4 is much easier to; Kbuild system related, with linux-2.4 it was possible to avoid Kbuild entirely and use some tiny posix schell script to build the kernel (which crashes still)</span></div><div class="line" id="164951"><span class="nick" style="color:#d9d9d9"><a href="#164951" label="[16:49:51]">&lt;aggi&gt;</a></span><span class="message">*too</span></div><div class="line" id="165005"><span class="nick" style="color:#6c3d55"><a href="#165005" label="[16:50:05]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: And the answer is that the linux headers tar ball is deleted before linux is built so it was not part of the problem.</span></div><div class="line" id="165103"><span class="nick" style="color:#80b1d3"><a href="#165103" label="[16:51:03]">&lt;stikonas[m]&gt;</a></span><span class="message">Oh, indeed, we do some cleanups</span></div><div class="line" id="165113"><span class="nick" style="color:#6c3d55"><a href="#165113" label="[16:51:13]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: The other mystery is: generally, why does linux take so much space that we can't build it (and the rest of sysa) in 1008MB?</span></div><div class="line" id="165115"><span class="nick" style="color:#80b1d3"><a href="#165115" label="[16:51:15]">&lt;stikonas[m]&gt;</a></span><span class="message">Still, what is using so much space...</span></div><div class="line" id="165124"><span class="nick" style="color:#d9d9d9"><a href="#165124" label="[16:51:24]">&lt;aggi&gt;</a></span><span class="message">linux-2.4: 191M    total</span></div><div class="line" id="165148"><span class="nick" style="color:#d9d9d9"><a href="#165148" label="[16:51:48]">&lt;aggi&gt;</a></span><span class="message">stikonas[m]: recent kernels too ship a notable amount of firmware.bin clutter</span></div><div class="line" id="165207"><span class="nick" style="color:#80b1d3"><a href="#165207" label="[16:52:07]">&lt;stikonas[m]&gt;</a></span><span class="message">aggi: no, we don't use any of that</span></div><div class="line" id="165230"><span class="nick" style="color:#80b1d3"><a href="#165230" label="[16:52:30]">&lt;stikonas[m]&gt;</a></span><span class="message">We use aggressive deblob script</span></div><div class="line" id="165249"><span class="nick" style="color:#d9d9d9"><a href="#165249" label="[16:52:49]">&lt;aggi&gt;</a></span><span class="message">stikonas[m]: sure. didn't know you already removed the firmware.bin junk</span></div><div class="line" id="165250"><span class="nick" style="color:#6c3d55"><a href="#165250" label="[16:52:50]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: But is that really a mystery if the linux source is 763MB alone and then we add in all sysa artifacts?</span></div><div class="line" id="165323"><span class="nick" style="color:#80b1d3"><a href="#165323" label="[16:53:23]">&lt;stikonas[m]&gt;</a></span><span class="message">Yeah, perhaps...</span></div><div class="line" id="165401"><span class="nick" style="color:#6c3d55"><a href="#165401" label="[16:54:01]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: I'm not sure about the deblob. Linux build currently outputs: cp: cannot stat `/sysa/distfiles/deblob-4.9': No such file or directory</span></div><div class="line" id="165419"><span class="nick" style="color:#d9d9d9"><a href="#165419" label="[16:54:19]">&lt;aggi&gt;</a></span><span class="message">is there any reason to choose linux-4.x instead of 2.x ?</span></div><div class="line" id="165422"><span class="nick" style="color:#6c3d55"><a href="#165422" label="[16:54:22]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: ... because it deleted it before starting the build.</span></div><div class="line" id="165426"><span class="nick" style="color:#80b1d3"><a href="#165426" label="[16:54:26]">&lt;stikonas[m]&gt;</a></span><span class="message">Hmm, maybe it regressed</span></div><div class="line" id="165446"><span class="nick" style="color:#80b1d3"><a href="#165446" label="[16:54:46]">&lt;stikonas[m]&gt;</a></span><span class="message">aggi: it's just more modern</span></div><div class="line" id="165458"><span class="nick" style="color:#80b1d3"><a href="#165458" label="[16:54:58]">&lt;stikonas[m]&gt;</a></span><span class="message">More hw will be supported</span></div><div class="line" id="165512"><span class="nick" style="color:#6c3d55"><a href="#165512" label="[16:55:12]">&lt;rickmasters&gt;</a></span><span class="message">Stupid question: What is deblob used for?</span></div><div class="line" id="165514"><span class="nick" style="color:#80b1d3"><a href="#165514" label="[16:55:14]">&lt;stikonas[m]&gt;</a></span><span class="message">2.x can't be deblobbed either</span></div><div class="line" id="165519"><span class="nick" style="color:#d9d9d9"><a href="#165519" label="[16:55:19]">&lt;aggi&gt;</a></span><span class="message">well, for x86 and too x86_64 linux-2.x should suffice</span></div><div class="line" id="165527"><span class="nick" style="color:#80b1d3"><a href="#165527" label="[16:55:27]">&lt;stikonas[m]&gt;</a></span><span class="message">rickmasters: to remove binary blobs</span></div><div class="line" id="165545"><span class="nick" style="color:#d9d9d9"><a href="#165545" label="[16:55:45]">&lt;aggi&gt;</a></span><span class="message">stikonas[m]: 2.4 didn't require deblobbing, because there wasn't any firmware.bin bundled with it, to my knowledge</span></div><div class="line" id="165551"><span class="nick" style="color:#80b1d3"><a href="#165551" label="[16:55:51]">&lt;stikonas[m]&gt;</a></span><span class="message">Like firmware from drivers</span></div><div class="line" id="165602"><span class="nick" style="color:#80b1d3"><a href="#165602" label="[16:56:02]">&lt;stikonas[m]&gt;</a></span><span class="message">aggi: at all?</span></div><div class="line" id="165650"><span class="nick" style="color:#80b1d3"><a href="#165650" label="[16:56:50]">&lt;stikonas[m]&gt;</a></span><span class="message">It would need checking, there might be a some in inline arrays</span></div><div class="line" id="165717"><span class="nick" style="color:#d9d9d9"><a href="#165717" label="[16:57:17]">&lt;aggi&gt;</a></span><span class="message">there seems some support to load firmware, but it wasn't common iirc</span></div><div class="line" id="165742"><span class="nick" style="color:#d9d9d9"><a href="#165742" label="[16:57:42]">&lt;aggi&gt;</a></span><span class="message">the WiFi stuff, which required it, at that time, used the ndis-wrapper magic instead</span></div><div class="line" id="165828"><span class="nick" style="color:#6c3d55"><a href="#165828" label="[16:58:28]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: the linux builds script moves deblob before deleting distfiles/* but doesn't move it back like the tar file...</span></div><div class="line" id="165905"><span class="nick" style="color:#80b1d3"><a href="#165905" label="[16:59:05]">&lt;stikonas[m]&gt;</a></span><span class="message">OK, we need to fix it...</span></div><div class="line" id="170151"><span class="nick" style="color:#d9d9d9"><a href="#170151" label="[17:01:51]">&lt;aggi&gt;</a></span><span class="message">of cause, there is less available filesystems with 2.x (if those weren't available out-of-tree, such as squashfs, don't know, or overlayfs/aufs etc.); y2038</span></div><div class="line" id="170225"><span class="nick" style="color:#d9d9d9"><a href="#170225" label="[17:02:25]">&lt;aggi&gt;</a></span><span class="message">and, UEFI, however, if you depend on legacy-BIOS int13 maybe UEFI is out-of-scope, hence 4.x series less relevant</span></div><div class="line" id="170242"><span class="nick" style="color:#6c3d55"><a href="#170242" label="[17:02:42]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: It may be working without being moved back to distfiles. I'm not sure where the cp error is coming from.</span></div><div class="line" id="170308"><span class="nick" style="color:#8dd3c7"><a href="#170308" label="[17:03:08]">&lt;stikonas&gt;</a></span><span class="message">yeah, I'll take a look...</span></div><div class="line" id="170740"><span class="nick" style="color:#6c3d55"><a href="#170740" label="[17:07:40]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: its coming from extract_file in helpers.sh which expects the file to be present as listed in sources</span></div><div class="line" id="170921"><span class="nick" style="color:#6c3d55"><a href="#170921" label="[17:09:21]">&lt;rickmasters&gt;</a></span><span class="message">stikonas: so it's probably working but maybe the linux build script should move it back to distfiles so extract_files can do the copy without erroring</span></div><div class="line" id="170950"><span class="nick" style="color:#80b1d3"><a href="#170950" label="[17:09:50]">&lt;stikonas[m]&gt;</a></span><span class="message">Yeah, I think you are right</span></div><div class="line" id="184101"><span class="nick" style="color:#234e69"><a href="#184101" label="[18:41:01]">&lt;gforce_d11977&gt;</a></span><span class="message">I just tested to build an 3.18.140 kernel with target &quot;tiny&quot;, and it still needs ~1010 megabytes diskspace)</span></div><div class="line" id="184108"><span class="nick" style="color:#234e69"><a href="#184108" label="[18:41:08]">&lt;gforce_d11977&gt;</a></span><span class="message">(x86)</span></div><div class="line" id="191003"><span class="nick" style="color:#234e69"><a href="#191003" label="[19:10:03]">&lt;gforce_d11977&gt;</a></span><span class="message">idea: patch the compiler to delete compiled sourcefiles while working. or is there maybe a flag/switch for this?</span></div><div class="line" id="192924"><span class="nick" style="color:#80b1d3"><a href="#192924" label="[19:29:24]">&lt;stikonas[m]&gt;</a></span><span class="message">gforce_d11977: there wouldn't be such flag</span></div><div class="line" id="192940"><span class="nick" style="color:#80b1d3"><a href="#192940" label="[19:29:40]">&lt;stikonas[m]&gt;</a></span><span class="message">How would compiler know that this file won't be used</span></div><div class="line" id="192953"><span class="nick" style="color:#80b1d3"><a href="#192953" label="[19:29:53]">&lt;stikonas[m]&gt;</a></span><span class="message">In future steps...</span></div><div class="line" id="195708"><span class="nick" style="color:#6c3d55"><a href="#195708" label="[19:57:08]">&lt;rickmasters&gt;</a></span><span class="message">So, interesting development. If I download, compile, and use the latest SeaBIOS, I get the disk geometry I'm expecting to support larger disks!</span></div><div class="line" id="201812"><span class="nick" style="color:#6c3d55"><a href="#201812" label="[20:18:12]">&lt;rickmasters&gt;</a></span><span class="message">Oh shoot, I'm confused. The geometry looks the same with older SeaBIOS.</span></div><div class="line" id="202007"><span class="nick" style="color:#6c3d55"><a href="#202007" label="[20:20:07]">&lt;rickmasters&gt;</a></span><span class="message">I'm not sure what's going on. builder-hex0 should be working with this geometry and a 1152MB disk. So maybe I just have a bug I can fix...</span></div><div class="line" id="204806"><span class="nick" style="color:#6c3d55"><a href="#204806" label="[20:48:06]">&lt;rickmasters&gt;</a></span><span class="message">Wow, I must have really screwed up my prior investigation or attempts to make this work.</span></div><div class="line" id="204922"><span class="nick" style="color:#6c3d55"><a href="#204922" label="[20:49:22]">&lt;rickmasters&gt;</a></span><span class="message">It appears that I now have builder-hex0 able to write an 1152MB disk image. But I'm still testing and a bit confused so I may be wrong...</span></div><div class="line" id="205021"><span class="nick" style="color:#6c3d55"><a href="#205021" label="[20:50:21]">&lt;rickmasters&gt;</a></span><span class="message">A significant issue is that builder-hex0 takes a very, very long time to write an image of that size to disk.</span></div><div class="line" id="205226"><span class="nick" style="color:#6c3d55"><a href="#205226" label="[20:52:26]">&lt;rickmasters&gt;</a></span><span class="message">The code is not optimized and it takes so long that I thought it was frozen/crashed. But I could have sworn this just never finished in the past...</span></div><div class="line" id="210104"><span class="nick" style="color:#6c3d55"><a href="#210104" label="[21:01:04]">&lt;rickmasters&gt;</a></span><span class="message">I could have sworn I was always getting 32 heads for an 1152MB image, which is not enough.</span></div><div class="line" id="210431"><span class="nick" style="color:#6c3d55"><a href="#210431" label="[21:04:31]">&lt;rickmasters&gt;</a></span><span class="message">But I'm actually getting 64. I must have tested this incorrectly in the past. Yikes, I'm losing my mind.</span></div><div class="line" id="213706"><span class="nick" style="color:#6c3d55"><a href="#213706" label="[21:37:06]">&lt;rickmasters&gt;</a></span><span class="message">Anyway, I just completed my first successful kernel bootstrap build with Fiwix finishing sysa on a hard drive!</span></div><div class="line" id="214346"><span class="nick" style="color:#6c3d55"><a href="#214346" label="[21:43:46]">&lt;rickmasters&gt;</a></span><span class="message">fossy, stikonas: Sorry for my confusion. We can forget about LBA mode or reducing sysa to 1008MB.</span></div><div class="line" id="214541"><span class="nick" style="color:#80b1d3"><a href="#214541" label="[21:45:41]">&lt;stikonas[m]&gt;</a></span><span class="message">OK, that simplifies things!</span></div><div class="line" id="214559"><span class="nick" style="color:#6c3d55"><a href="#214559" label="[21:45:59]">&lt;rickmasters&gt;</a></span><span class="message">But if sysa gets bigger we might have to create a second partition.</span></div><div class="line" id="214800"><span class="nick" style="color:#8dd3c7"><a href="#214800" label="[21:48:00]">&lt;stikonas&gt;</a></span><span class="message">well, source of sysa wouldn't get much bigger</span></div><div class="line" id="214830"><span class="nick" style="color:#8dd3c7"><a href="#214830" label="[21:48:30]">&lt;stikonas&gt;</a></span><span class="message">well, we have sysa source limit (whatver builder-hex0 supports)</span></div><div class="line" id="214839"><span class="nick" style="color:#8dd3c7"><a href="#214839" label="[21:48:39]">&lt;stikonas&gt;</a></span><span class="message">but we also have fiwix RAM limit</span></div><div class="line" id="214846"><span class="nick" style="color:#8dd3c7"><a href="#214846" label="[21:48:46]">&lt;stikonas&gt;</a></span><span class="message">to keep all build files</span></div><div class="line" id="214849"><span class="nick" style="color:#6c3d55"><a href="#214849" label="[21:48:49]">&lt;rickmasters&gt;</a></span><span class="message">There is one last option. We could make builder-hex0 write the ext2 partition without preparing the full image in memory first.</span></div><div class="line" id="214943"><span class="nick" style="color:#6c3d55"><a href="#214943" label="[21:49:43]">&lt;rickmasters&gt;</a></span><span class="message">I'm not sure we're seeing any memory pressure on Fiwix yet.</span></div><div class="line" id="215130"><span class="nick" style="color:#6c3d55"><a href="#215130" label="[21:51:30]">&lt;rickmasters&gt;</a></span><span class="message">Once Fiwix runs off hard drive its just using memory for compiling and it has 1G for that. I'd be surprised if anything uses any where near that much.</span></div><div class="line" id="215408"><span class="nick" style="color:#6c3d55"><a href="#215408" label="[21:54:08]">&lt;rickmasters&gt;</a></span><span class="message">What I mean about builder-hex0: When it creates a large ext2 image the partition only has source in it to begin with, so most of it is empty.</span></div><div class="line" id="215543"><span class="nick" style="color:#6c3d55"><a href="#215543" label="[21:55:43]">&lt;rickmasters&gt;</a></span><span class="message">I think the only thing in the empty part of the ext2 image are root superblock copies. Those could be written manually.</span></div><div class="line" id="220045"><span class="nick" style="color:#6c3d55"><a href="#220045" label="[22:00:45]">&lt;rickmasters&gt;</a></span><span class="message">In other words, builder-hex0 could write up to 1152MB of source into an ext2 partition and then do what resize2fs does to expand it.</span></div><div class="line" id="221824"><span class="nick" style="color:#80b1d3"><a href="#221824" label="[22:18:24]">&lt;stikonas[m]&gt;</a></span><span class="message">Yeah, that's an option if we start hitting memory pressure but I guess not strictly required for now</span></div><br /></div></body></html>