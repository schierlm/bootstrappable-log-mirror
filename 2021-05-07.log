<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-05-07.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000006"><span class="nick" style="color:#389600"><a href="#000006" label="[00:00:06]">&lt;OriansJ&gt;</a></span><span class="message">melg8: Well that will work if you wanted to use an untrusted system to perform the bootstrap calculations, you would still need a trusted system to decode the final result to make it useful.</span></div><div class="line" id="000105"><span class="nick" style="color:#389600"><a href="#000105" label="[00:01:05]">&lt;OriansJ&gt;</a></span><span class="message">Further if your system was compromised by a trusting trust attack, the decryption process could be compromised to change the resulting binaries to infect them on decryption.</span></div><div class="line" id="000202"><span class="nick" style="color:#8dd3c7"><a href="#000202" label="[00:02:02]">&lt;stikonas&gt;</a></span><span class="message">and if you monitor is hardware compromised, it can show different source code that what is on the disk (that's REALLY unlikely though)</span></div><div class="line" id="000204"><span class="nick" style="color:#389600"><a href="#000204" label="[00:02:04]">&lt;OriansJ&gt;</a></span><span class="message">That is why DDC is the only known solution to the Trusting Trust attack</span></div><div class="line" id="000256"><span class="nick" style="color:#389600"><a href="#000256" label="[00:02:56]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: that would be a Nexus Intruder class of attack (Compromise hardware to make software only bootstraps useless)</span></div><div class="line" id="000316"><span class="nick" style="color:#2e2a4a"><a href="#000316" label="[00:03:16]">&lt;melg8&gt;</a></span><span class="message">so now we all seeing some layer of untrusted hashes? it is consistent, but in theory - they all could be mocked?</span></div><div class="line" id="000345"><span class="nick" style="color:#389600"><a href="#000345" label="[00:03:45]">&lt;OriansJ&gt;</a></span><span class="message">melg8: Well perfection is a road, not a destination.</span></div><div class="line" id="000358"><span class="nick" style="color:#389600"><a href="#000358" label="[00:03:58]">&lt;OriansJ&gt;</a></span><span class="message">So this is the best attempt we have to date.</span></div><div class="line" id="000421"><span class="nick" style="color:#389600"><a href="#000421" label="[00:04:21]">&lt;OriansJ&gt;</a></span><span class="message">Which might be compromised but it is in a form discovering it when we work around additional attacks become trivial</span></div><div class="line" id="000450"><span class="nick" style="color:#2e2a4a"><a href="#000450" label="[00:04:50]">&lt;melg8&gt;</a></span><span class="message">That reminds me Kongres futurologiczny by Stanis≈Çaw Lem</span></div><div class="line" id="000451"><span class="nick" style="color:#389600"><a href="#000451" label="[00:04:51]">&lt;OriansJ&gt;</a></span><span class="message">So each attack becomes harder and harder; until they would have to compromise Physics itself</span></div><div class="line" id="000452"><span class="nick" style="color:#8dd3c7"><a href="#000452" label="[00:04:52]">&lt;stikonas&gt;</a></span><span class="message">and it excludes realistic trusting trust attacks</span></div><div class="line" id="000511"><span class="nick" style="color:#8dd3c7"><a href="#000511" label="[00:05:11]">&lt;stikonas&gt;</a></span><span class="message">well, can't really compromise Physics...</span></div><div class="line" id="000541"><span class="nick" style="color:#2e2a4a"><a href="#000541" label="[00:05:41]">&lt;melg8&gt;</a></span><span class="message">until you do</span></div><div class="line" id="000616"><span class="nick" style="color:#389600"><a href="#000616" label="[00:06:16]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: yet, then fuck all assumptions we have about security and figure out how to compromise physics ourselves.</span></div><div class="line" id="000629"><span class="nick" style="color:#8dd3c7"><a href="#000629" label="[00:06:29]">&lt;stikonas&gt;</a></span><span class="message">you might discover more laws of physics that were not known to humanity but the laws were there all the time</span></div><div class="line" id="000740"><span class="nick" style="color:#389600"><a href="#000740" label="[00:07:40]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: true but again, we are doing our best approximation of a step in the correct direction.</span></div><div class="line" id="000800"><span class="nick" style="color:#389600"><a href="#000800" label="[00:08:00]">&lt;OriansJ&gt;</a></span><span class="message">Even our wasted efforts and compromised builds bring us closer to solution.</span></div><div class="line" id="000835"><span class="nick" style="color:#2e2a4a"><a href="#000835" label="[00:08:35]">&lt;melg8&gt;</a></span><span class="message">Why this project is developed by small amount of people, and not like big tech + government? does that mean that they think that this is not realistic attack vector?</span></div><div class="line" id="000858"><span class="nick" style="color:#8dd3c7"><a href="#000858" label="[00:08:58]">&lt;stikonas&gt;</a></span><span class="message">first of all most people including big tech + government  just use binaries</span></div><div class="line" id="000911"><span class="nick" style="color:#389600"><a href="#000911" label="[00:09:11]">&lt;OriansJ&gt;</a></span><span class="message">melg8: because their last major attempt cost $8Billion and failed to produce meaningful results</span></div><div class="line" id="000912"><span class="nick" style="color:#8dd3c7"><a href="#000912" label="[00:09:12]">&lt;stikonas&gt;</a></span><span class="message">third party binaries</span></div><div class="line" id="000945"><span class="nick" style="color:#2e2a4a"><a href="#000945" label="[00:09:45]">&lt;melg8&gt;</a></span><span class="message">@OriansJ what you talking about?</span></div><div class="line" id="001058"><span class="nick" style="color:#8dd3c7"><a href="#001058" label="[00:10:58]">&lt;stikonas&gt;</a></span><span class="message">and I guess other attack vectors are indeed more realistic</span></div><div class="line" id="001120"><span class="nick" style="color:#389600"><a href="#001120" label="[00:11:20]">&lt;OriansJ&gt;</a></span><span class="message">melg8: The Trusted Weapons system Initiative under Reagan which was a giant cash give away to software companies</span></div><div class="line" id="001221"><span class="nick" style="color:#8dd3c7"><a href="#001221" label="[00:12:21]">&lt;stikonas&gt;</a></span><span class="message">it's probably easier to insert backdoor into something like management engine than into compiler</span></div><div class="line" id="001258"><span class="nick" style="color:#2e2a4a"><a href="#001258" label="[00:12:58]">&lt;melg8&gt;</a></span><span class="message">btw, @OriansJ did you looked into <a rel="nofollow" href="https://github.com/seyko2/tccboot">https://github.com/seyko2/tccboot</a>  ? is this viable way?</span></div><div class="line" id="001312"><span class="nick" style="color:#389600"><a href="#001312" label="[00:13:12]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: it ends up being easier to compromise the Microsoft update mechanism and push targeted updates</span></div><div class="line" id="001332"><span class="nick" style="color:#389600"><a href="#001332" label="[00:13:32]">&lt;OriansJ&gt;</a></span><span class="message">melg8: viable for what exactly?</span></div><div class="line" id="001358"><span class="nick" style="color:#8dd3c7"><a href="#001358" label="[00:13:58]">&lt;stikonas&gt;</a></span><span class="message">well, tccboot replaces kernel bootstrap problem with tcc blob</span></div><div class="line" id="001400"><span class="nick" style="color:#2e2a4a"><a href="#001400" label="[00:14:00]">&lt;melg8&gt;</a></span><span class="message">for removing kernel from the binary input part of things</span></div><div class="line" id="001408"><span class="nick" style="color:#8dd3c7"><a href="#001408" label="[00:14:08]">&lt;stikonas&gt;</a></span><span class="message">so it's a tradeoff</span></div><div class="line" id="001419"><span class="nick" style="color:#8dd3c7"><a href="#001419" label="[00:14:19]">&lt;stikonas&gt;</a></span><span class="message">to build tcc you need kernel</span></div><div class="line" id="001424"><span class="nick" style="color:#2e2a4a"><a href="#001424" label="[00:14:24]">&lt;melg8&gt;</a></span><span class="message">can tcc be achieved without kernel itself?</span></div><div class="line" id="001436"><span class="nick" style="color:#8dd3c7"><a href="#001436" label="[00:14:36]">&lt;stikonas&gt;</a></span><span class="message">not at the moment</span></div><div class="line" id="001440"><span class="nick" style="color:#8dd3c7"><a href="#001440" label="[00:14:40]">&lt;stikonas&gt;</a></span><span class="message">but in principle, yes</span></div><div class="line" id="001444"><span class="nick" style="color:#389600"><a href="#001444" label="[00:14:44]">&lt;OriansJ&gt;</a></span><span class="message">melg8: It just becomes a Kernel with C compiler functionality</span></div><div class="line" id="001501"><span class="nick" style="color:#80b1d3"><a href="#001501" label="[00:15:01]">&lt;Hagfish&gt;</a></span><span class="message">to some extent the &quot;best case&quot; outcome of a successful bootstrapping process is proving that the software you are already using is based on the code you thought it was</span></div><div class="line" id="001525"><span class="nick" style="color:#6d2462"><a href="#001525" label="[00:15:25]">&lt;vagrantc&gt;</a></span><span class="message">probably :)</span></div><div class="line" id="001528"><span class="nick" style="color:#389600"><a href="#001528" label="[00:15:28]">&lt;OriansJ&gt;</a></span><span class="message">So it isn't better than live-bootstrap with a kernel smaller than the tccboot blob</span></div><div class="line" id="001559"><span class="nick" style="color:#8dd3c7"><a href="#001559" label="[00:15:59]">&lt;stikonas&gt;</a></span><span class="message">and live-bootstrap has some advantage that it's kernel independent</span></div><div class="line" id="001620"><span class="nick" style="color:#8dd3c7"><a href="#001620" label="[00:16:20]">&lt;stikonas&gt;</a></span><span class="message">so trusting trust attack has to work on absolutely any kernel</span></div><div class="line" id="001633"><span class="nick" style="color:#8dd3c7"><a href="#001633" label="[00:16:33]">&lt;stikonas&gt;</a></span><span class="message">not specific tcc binary</span></div><div class="line" id="001649"><span class="nick" style="color:#389600"><a href="#001649" label="[00:16:49]">&lt;OriansJ&gt;</a></span><span class="message">So any sub 138KB kernel would be a smaller root than tccboot</span></div><div class="line" id="001710"><span class="nick" style="color:#2e2a4a"><a href="#001710" label="[00:17:10]">&lt;melg8&gt;</a></span><span class="message">but this kernels - build with our friend gcc? so it could indeed be trageted towards infecting new builds of gcc</span></div><div class="line" id="001728"><span class="nick" style="color:#389600"><a href="#001728" label="[00:17:28]">&lt;OriansJ&gt;</a></span><span class="message">correction: 5.9 MB blob</span></div><div class="line" id="001728"><span class="nick" style="color:#80b1d3"><a href="#001728" label="[00:17:28]">&lt;Hagfish&gt;</a></span><span class="message">i'm not sure what the half-life of military secrets is, but if a Trusting Trust attack had succeeded in the 70s, and placed a backdoor in all software in the world back then, i'm sure it would have been used offensively by now, and thus been detected</span></div><div class="line" id="001833"><span class="nick" style="color:#2e2a4a"><a href="#001833" label="[00:18:33]">&lt;melg8&gt;</a></span><span class="message">there were reprorts about fake clang binaries with backdoor in china</span></div><div class="line" id="001838"><span class="nick" style="color:#389600"><a href="#001838" label="[00:18:38]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: well end of the cold war resulted in direct sales of chips to the Soviet Union; not so much the reverse</span></div><div class="line" id="001855"><span class="nick" style="color:#80b1d3"><a href="#001855" label="[00:18:55]">&lt;Hagfish&gt;</a></span><span class="message">that would make an interesting alt-history novel/film</span></div><div class="line" id="001931"><span class="nick" style="color:#8dd3c7"><a href="#001931" label="[00:19:31]">&lt;stikonas&gt;</a></span><span class="message">OriansJ: I guess that's because the Soviet union had the largest rockers, the largest tractors and the largest microcomputers</span></div><div class="line" id="001934"><span class="nick" style="color:#80b1d3"><a href="#001934" label="[00:19:34]">&lt;Hagfish&gt;</a></span><span class="message">imagine that as the USSR was ending, strategists at the Pentagon were worried about nuclear weapons ending up in the wrong hands</span></div><div class="line" id="001940"><span class="nick" style="color:#8dd3c7"><a href="#001940" label="[00:19:40]">&lt;stikonas&gt;</a></span><span class="message">s/rockers/rockets/</span></div><div class="line" id="002021"><span class="nick" style="color:#80b1d3"><a href="#002021" label="[00:20:21]">&lt;Hagfish&gt;</a></span><span class="message">and imagine somehow the US had infiltrated the toolchains of the Soviets, and they had an attack that could only be used once, but it could achieve anything</span></div><div class="line" id="002022"><span class="nick" style="color:#389600"><a href="#002022" label="[00:20:22]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: that is why Clinton Paid 8x for the Uranium and Plutonium from the USSR</span></div><div class="line" id="002056"><span class="nick" style="color:#80b1d3"><a href="#002056" label="[00:20:56]">&lt;Hagfish&gt;</a></span><span class="message">it's also why the US funded Russia's space program, right?</span></div><div class="line" id="002151"><span class="nick" style="color:#389600"><a href="#002151" label="[00:21:51]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: I can't speak to that because I am not aware of such a thing but I know we bought the nukes and burned them in US nuclear reactors</span></div><div class="line" id="002158"><span class="nick" style="color:#80b1d3"><a href="#002158" label="[00:21:58]">&lt;Hagfish&gt;</a></span><span class="message">i sort of like the idea of the moral dilemma of a vulnerability that applies to all software, friend and foe alike</span></div><div class="line" id="002234"><span class="nick" style="color:#80b1d3"><a href="#002234" label="[00:22:34]">&lt;Hagfish&gt;</a></span><span class="message">the danger of having that turned on you must outweigh the advantage of having such a weapon, especially if you hope you'll never need to use it yourself</span></div><div class="line" id="002242"><span class="nick" style="color:#389600"><a href="#002242" label="[00:22:42]">&lt;OriansJ&gt;</a></span><span class="message">Well the end of the Cold war forced the problem of all Computers are Global (so both Friends and Foes have the same kit)</span></div><div class="line" id="002258"><span class="nick" style="color:#80b1d3"><a href="#002258" label="[00:22:58]">&lt;Hagfish&gt;</a></span><span class="message">yeah, that's where my story breaks down a bit :)</span></div><div class="line" id="002321"><span class="nick" style="color:#80b1d3"><a href="#002321" label="[00:23:21]">&lt;Hagfish&gt;</a></span><span class="message">but you're right, we've been heading to more of a technological monoculture, with all the risks that entails</span></div><div class="line" id="002347"><span class="nick" style="color:#389600"><a href="#002347" label="[00:23:47]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: no, because after 9/11/2001 the NSA went pure Offense (less trying to have security vulnerabilties patched)</span></div><div class="line" id="002418"><span class="nick" style="color:#80b1d3"><a href="#002418" label="[00:24:18]">&lt;Hagfish&gt;</a></span><span class="message">yeah, which is not just a huge moral failing but a strategic one too</span></div><div class="line" id="002446"><span class="nick" style="color:#389600"><a href="#002446" label="[00:24:46]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: Pride is one of the most dangerous sins for a reason</span></div><div class="line" id="002556"><span class="nick" style="color:#80b1d3"><a href="#002556" label="[00:25:56]">&lt;Hagfish&gt;</a></span><span class="message">i wonder how often justice relies on the hubris of the perpetrator</span></div><div class="line" id="002642"><span class="nick" style="color:#389600"><a href="#002642" label="[00:26:42]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: Justice or the Justice System because those are two very different things.</span></div><div class="line" id="002717"><span class="nick" style="color:#80b1d3"><a href="#002717" label="[00:27:17]">&lt;Hagfish&gt;</a></span><span class="message">i guess i mean the intersection of the two, which might not be a very large set</span></div><div class="line" id="002755"><span class="nick" style="color:#389600"><a href="#002755" label="[00:27:55]">&lt;OriansJ&gt;</a></span><span class="message">Because the first cares not about the hubris but only the Truth but the second depends entirely on the ability to have evidence to convince a Jury/Judge that they are guilty.</span></div><div class="line" id="002857"><span class="nick" style="color:#80b1d3"><a href="#002857" label="[00:28:57]">&lt;Hagfish&gt;</a></span><span class="message">it's hard for Justice to be done even with a working Justice System, let alone without it</span></div><div class="line" id="002925"><span class="nick" style="color:#80b1d3"><a href="#002925" label="[00:29:25]">&lt;Hagfish&gt;</a></span><span class="message">i don't want to advocate for &quot;mob justice&quot;, but maybe &quot;poetic justice&quot; i can allow</span></div><div class="line" id="002929"><span class="nick" style="color:#389600"><a href="#002929" label="[00:29:29]">&lt;OriansJ&gt;</a></span><span class="message">So in theory if the perpetrator ensured that there was zero evidence of a Crime, only a corrupt Justice system could convict</span></div><div class="line" id="002941"><span class="nick" style="color:#80b1d3"><a href="#002941" label="[00:29:41]">&lt;Hagfish&gt;</a></span><span class="message">i suppose so, sadly</span></div><div class="line" id="003001"><span class="nick" style="color:#80b1d3"><a href="#003001" label="[00:30:01]">&lt;Hagfish&gt;</a></span><span class="message">but a corrupt Justice System would more often convict an innocent person</span></div><div class="line" id="003018"><span class="nick" style="color:#389600"><a href="#003018" label="[00:30:18]">&lt;OriansJ&gt;</a></span><span class="message">but such a system would kill just as easily a truly innocent person</span></div><div class="line" id="003039"><span class="nick" style="color:#80b1d3"><a href="#003039" label="[00:30:39]">&lt;Hagfish&gt;</a></span><span class="message">indeed, convicting an innocent person is often easier, if the true perpetrator can't even be found</span></div><div class="line" id="003102"><span class="nick" style="color:#389600"><a href="#003102" label="[00:31:02]">&lt;OriansJ&gt;</a></span><span class="message">So the question becomes one of how many guilty people will you let get away with a crime to avoid putting an innocent person in jail?</span></div><div class="line" id="003129"><span class="nick" style="color:#80b1d3"><a href="#003129" label="[00:31:29]">&lt;Hagfish&gt;</a></span><span class="message">the fact we are talking only about jail is significant</span></div><div class="line" id="003147"><span class="nick" style="color:#80b1d3"><a href="#003147" label="[00:31:47]">&lt;Hagfish&gt;</a></span><span class="message">you can let someone out of jail if they are wrongly convicted (and compensate them, as if they had been kidnapped)</span></div><div class="line" id="003157"><span class="nick" style="color:#389600"><a href="#003157" label="[00:31:57]">&lt;OriansJ&gt;</a></span><span class="message">I don't have a good answer for that question because I don't have a good optimization goal in mind for this discussion.</span></div><div class="line" id="003158"><span class="nick" style="color:#80b1d3"><a href="#003158" label="[00:31:58]">&lt;Hagfish&gt;</a></span><span class="message">but you can't bring someone back from the dead if they've been executed</span></div><div class="line" id="003218"><span class="nick" style="color:#80b1d3"><a href="#003218" label="[00:32:18]">&lt;Hagfish&gt;</a></span><span class="message">i can only rationalise it in terms of insurance/compensation payments</span></div><div class="line" id="003259"><span class="nick" style="color:#80b1d3"><a href="#003259" label="[00:32:59]">&lt;Hagfish&gt;</a></span><span class="message">but it's hard to quantify the damage of a miscarriage of justice, not just to the innocent convict, but to the whole of society</span></div><div class="line" id="003303"><span class="nick" style="color:#8dd3c7"><a href="#003303" label="[00:33:03]">&lt;stikonas&gt;</a></span><span class="message">well, that's basically <a rel="nofollow" href="https://en.wikipedia.org/wiki/Type_I_and_type_II_errors">https://en.wikipedia.org/wiki/Type_I_and_type_II_errors</a> </span></div><div class="line" id="003313"><span class="nick" style="color:#80b1d3"><a href="#003313" label="[00:33:13]">&lt;Hagfish&gt;</a></span><span class="message">yeah</span></div><div class="line" id="003314"><span class="nick" style="color:#389600"><a href="#003314" label="[00:33:14]">&lt;OriansJ&gt;</a></span><span class="message">I tend to think of it in the following way. Prison isn't an effective use of the people who commit crimes</span></div><div class="line" id="003422"><span class="nick" style="color:#389600"><a href="#003422" label="[00:34:22]">&lt;OriansJ&gt;</a></span><span class="message">Nor of the resources required to keep them there.</span></div><div class="line" id="003436"><span class="nick" style="color:#80b1d3"><a href="#003436" label="[00:34:36]">&lt;Hagfish&gt;</a></span><span class="message">i do wonder if prison shouldn't include time spent working to pay a debt (but with a government-set wage, so people with market-valued skills can't leave quicker)</span></div><div class="line" id="003452"><span class="nick" style="color:#234e69"><a href="#003452" label="[00:34:52]">*</a></span><span class="message">vagrantc can't decide if this is #bootstrappable-ethics or #bootstrappable-philosophy</span></div><div class="line" id="003458"><span class="nick" style="color:#389600"><a href="#003458" label="[00:34:58]">&lt;OriansJ&gt;</a></span><span class="message">I was thinking of the Babylon 5 solution</span></div><div class="line" id="003532"><span class="nick" style="color:#80b1d3"><a href="#003532" label="[00:35:32]">&lt;Hagfish&gt;</a></span><span class="message">vagrantc: to bootstrap a computer, you first have to bootstrap a society :)</span></div><div class="line" id="003548"><span class="nick" style="color:#80b1d3"><a href="#003548" label="[00:35:48]">&lt;Hagfish&gt;</a></span><span class="message">i don't remember the Babylon 5 solution</span></div><div class="line" id="003558"><span class="nick" style="color:#80b1d3"><a href="#003558" label="[00:35:58]">&lt;Hagfish&gt;</a></span><span class="message">slowing down time?</span></div><div class="line" id="003608"><span class="nick" style="color:#6d2462"><a href="#003608" label="[00:36:08]">&lt;vagrantc&gt;</a></span><span class="message">well, compromising physics already came up, society is way further down the toolchain</span></div><div class="line" id="003633"><span class="nick" style="color:#389600"><a href="#003633" label="[00:36:33]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: Death of personality. (mind wipe and convert them into productive members of society who serve the public good)</span></div><div class="line" id="003647"><span class="nick" style="color:#80b1d3"><a href="#003647" label="[00:36:47]">&lt;Hagfish&gt;</a></span><span class="message">vagrantc:  yeah, and i think the original quote is &quot;to make an apple pie from scratch, you first have to create the universe from scratch&quot;</span></div><div class="line" id="003712"><span class="nick" style="color:#80b1d3"><a href="#003712" label="[00:37:12]">&lt;Hagfish&gt;</a></span><span class="message">OriansJ: wow, that's horrifically beautiful</span></div><div class="line" id="003741"><span class="nick" style="color:#389600"><a href="#003741" label="[00:37:41]">&lt;OriansJ&gt;</a></span><span class="message">Any community with more than 5 members will discuss/debate politics</span></div><div class="line" id="003809"><span class="nick" style="color:#80b1d3"><a href="#003809" label="[00:38:09]">&lt;Hagfish&gt;</a></span><span class="message">if such technology existed, even if it weren't abused, i think it would undermine the lies humans rely on to have a sense of identity</span></div><div class="line" id="003848"><span class="nick" style="color:#389600"><a href="#003848" label="[00:38:48]">&lt;OriansJ&gt;</a></span><span class="message">The sign it is a healthy community is that such discussions invite people to entertain the perspective of others and develop more thoughtout view points.</span></div><div class="line" id="003938"><span class="nick" style="color:#389600"><a href="#003938" label="[00:39:38]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: well Babylon 5 was a TV series that included Telepaths as part of the landscape</span></div><div class="line" id="003959"><span class="nick" style="color:#80b1d3"><a href="#003959" label="[00:39:59]">&lt;Hagfish&gt;</a></span><span class="message">that would presumably have huge ramifications too</span></div><div class="line" id="004035"><span class="nick" style="color:#80b1d3"><a href="#004035" label="[00:40:35]">&lt;Hagfish&gt;</a></span><span class="message">real-world technology may start to raise similar ethical questions</span></div><div class="line" id="004043"><span class="nick" style="color:#80b1d3"><a href="#004043" label="[00:40:43]">&lt;Hagfish&gt;</a></span><span class="message">about the 5th amendment, and the 4th</span></div><div class="line" id="004055"><span class="nick" style="color:#389600"><a href="#004055" label="[00:40:55]">&lt;OriansJ&gt;</a></span><span class="message">yeah the creation of the Psy-corps and a bunch of laws in Earth controlled space</span></div><div class="line" id="004122"><span class="nick" style="color:#389600"><a href="#004122" label="[00:41:22]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: Only in the United States, else where they have different laws</span></div><div class="line" id="004141"><span class="nick" style="color:#8dd3c7"><a href="#004141" label="[00:41:41]">&lt;stikonas&gt;</a></span><span class="message">yes, here in UK encryption is already banned...</span></div><div class="line" id="004148"><span class="nick" style="color:#389600"><a href="#004148" label="[00:41:48]">&lt;OriansJ&gt;</a></span><span class="message">Like India where censorship is part of their ?constitution?</span></div><div class="line" id="004152"><span class="nick" style="color:#8dd3c7"><a href="#004152" label="[00:41:52]">&lt;stikonas&gt;</a></span><span class="message">if you don't disclose yoru decryption key, that's 2 years in prison</span></div><div class="line" id="004203"><span class="nick" style="color:#80b1d3"><a href="#004203" label="[00:42:03]">&lt;Hagfish&gt;</a></span><span class="message">i don't know of anywhere which has those principles in such sharp relief as in adjacent constitutional amendments</span></div><div class="line" id="004247"><span class="nick" style="color:#80b1d3"><a href="#004247" label="[00:42:47]">&lt;Hagfish&gt;</a></span><span class="message">stikonas: right, and then there are questions of whether &quot;i've forgotten it&quot; can be accepted by a jury</span></div><div class="line" id="004257"><span class="nick" style="color:#8dd3c7"><a href="#004257" label="[00:42:57]">&lt;stikonas&gt;</a></span><span class="message">and what if it's just a random noise</span></div><div class="line" id="004308"><span class="nick" style="color:#389600"><a href="#004308" label="[00:43:08]">&lt;OriansJ&gt;</a></span><span class="message">better not to know it in the first place I say</span></div><div class="line" id="004325"><span class="nick" style="color:#80b1d3"><a href="#004325" label="[00:43:25]">&lt;Hagfish&gt;</a></span><span class="message">you'd have to come up with a clever story to explain why you have random noise lying around</span></div><div class="line" id="004329"><span class="nick" style="color:#8dd3c7"><a href="#004329" label="[00:43:29]">&lt;stikonas&gt;</a></span><span class="message">random noise might be indistinguishable from encrypted data</span></div><div class="line" id="004340"><span class="nick" style="color:#80b1d3"><a href="#004340" label="[00:43:40]">&lt;Hagfish&gt;</a></span><span class="message">yes, the Rubber Hose filesystem does this best</span></div><div class="line" id="004341"><span class="nick" style="color:#389600"><a href="#004341" label="[00:43:41]">&lt;OriansJ&gt;</a></span><span class="message">I have a mooltipass; I never knew the luks password, so asking me to provide it does no good</span></div><div class="line" id="004451"><span class="nick" style="color:#389600"><a href="#004451" label="[00:44:51]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: deck of playing cards for crypto <a rel="nofollow" href="https://www.schneier.com/academic/solitaire/">https://www.schneier.com/academic/solitaire/</a> </span></div><div class="line" id="004526"><span class="nick" style="color:#389600"><a href="#004526" label="[00:45:26]">&lt;OriansJ&gt;</a></span><span class="message">and you can buy really tiny playing cards (1cmx2cm)</span></div><div class="line" id="004535"><span class="nick" style="color:#80b1d3"><a href="#004535" label="[00:45:35]">&lt;Hagfish&gt;</a></span><span class="message">i think it was that which said &quot;if the police raid your house, don't panic and throw the cards in the air, because there isn't enough entropy in that&quot;</span></div><div class="line" id="004627"><span class="nick" style="color:#80b1d3"><a href="#004627" label="[00:46:27]">&lt;Hagfish&gt;</a></span><span class="message">there's already a case of someone's smart watch data being used to convict their murderer</span></div><div class="line" id="004642"><span class="nick" style="color:#80b1d3"><a href="#004642" label="[00:46:42]">&lt;Hagfish&gt;</a></span><span class="message">what happens when these devices are in our brains, as Elon wants?</span></div><div class="line" id="004817"><span class="nick" style="color:#389600"><a href="#004817" label="[00:48:17]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: Not all problems can be solved by entering into the problem space.</span></div><div class="line" id="004818"><span class="nick" style="color:#2e2a4a"><a href="#004818" label="[00:48:18]">&lt;melg8&gt;</a></span><span class="message">the deadliest of a weapon is compromised ideas</span></div><div class="line" id="004835"><span class="nick" style="color:#389600"><a href="#004835" label="[00:48:35]">&lt;OriansJ&gt;</a></span><span class="message">So just like refusing to use Windows, Refuse to use Musky Implants</span></div><div class="line" id="004836"><span class="nick" style="color:#80b1d3"><a href="#004836" label="[00:48:36]">&lt;Hagfish&gt;</a></span><span class="message">compromised ideas can be self-replicating</span></div><div class="line" id="004942"><span class="nick" style="color:#80b1d3"><a href="#004942" label="[00:49:42]">&lt;Hagfish&gt;</a></span><span class="message">unfortunately it's not enough for us to refuse bad software, we live in a society where other people are in danger if they make those bad decisions, and that threatens us</span></div><div class="line" id="004946"><span class="nick" style="color:#80b1d3"><a href="#004946" label="[00:49:46]">&lt;Hagfish&gt;</a></span><span class="message">just look at Facebook</span></div><div class="line" id="005048"><span class="nick" style="color:#80b1d3"><a href="#005048" label="[00:50:48]">&lt;Hagfish&gt;</a></span><span class="message">if bad ideas are like Covid, then Facebook is like a cruise ship ;)</span></div><div class="line" id="005053"><span class="nick" style="color:#6d2462"><a href="#005053" label="[00:50:53]">&lt;vagrantc&gt;</a></span><span class="message"> <a rel="nofollow" href="https://en.wikipedia.org/wiki/Walkaway_">https://en.wikipedia.org/wiki/Walkaway_</a>(Doctorow_novel) </span></div><div class="line" id="005148"><span class="nick" style="color:#80b1d3"><a href="#005148" label="[00:51:48]">&lt;Hagfish&gt;</a></span><span class="message">wow</span></div><div class="line" id="005204"><span class="nick" style="color:#80b1d3"><a href="#005204" label="[00:52:04]">&lt;Hagfish&gt;</a></span><span class="message">i should have known that Doctorow would capture these ideas so brilliantly</span></div><div class="line" id="005235"><span class="nick" style="color:#80b1d3"><a href="#005235" label="[00:52:35]">&lt;Hagfish&gt;</a></span><span class="message">he's one of the great thinkers of our time, at least in terms of tech+society</span></div><div class="line" id="005306"><span class="nick" style="color:#80b1d3"><a href="#005306" label="[00:53:06]">&lt;Hagfish&gt;</a></span><span class="message">i do like the short story Manna, which explored similar themes</span></div><div class="line" id="005450"><span class="nick" style="color:#2e2a4a"><a href="#005450" label="[00:54:50]">&lt;melg8&gt;</a></span><span class="message">Btw,, i have one idea now... about trusted trust attack and DDC as the way to beat it. Am i wrong or for example, if i have untrusted compiler, which i want to check for backdors. And it its written for example in C++11, so when it compiles itself - it produce c++11 builded binary. But what if i subvert compiler to add only backdors to c++20</span></div><div class="line" id="005450"><span class="nick" style="color:#2e2a4a"><a href="#005450" label="[00:54:50]">&lt;melg8&gt;</a></span><span class="message">compiled code? and my &quot;trusted&quot; compiler - is able to only compile c++11 but not c++20? will i detect such malicious thing?</span></div><div class="line" id="005558"><span class="nick" style="color:#2e2a4a"><a href="#005558" label="[00:55:58]">&lt;melg8&gt;</a></span><span class="message">for example - c++20 introduces modules - we give them nice backdoor if detected. but our compiler doesnt have any code with them</span></div><div class="line" id="005638"><span class="nick" style="color:#2e2a4a"><a href="#005638" label="[00:56:38]">&lt;melg8&gt;</a></span><span class="message">(and you can generalize that idea)</span></div><div class="line" id="005641"><span class="nick" style="color:#6d2462"><a href="#005641" label="[00:56:41]">&lt;vagrantc&gt;</a></span><span class="message">that's why you need to build the same thing with another compiler</span></div><div class="line" id="005706"><span class="nick" style="color:#80b1d3"><a href="#005706" label="[00:57:06]">&lt;Hagfish&gt;</a></span><span class="message">if you have a trusted compiler that can compile the c11 code, then that binary will be trusted</span></div><div class="line" id="005741"><span class="nick" style="color:#2e2a4a"><a href="#005741" label="[00:57:41]">&lt;melg8&gt;</a></span><span class="message">i mean - DDC proposed as technique to validate untrusted compiler</span></div><div class="line" id="005812"><span class="nick" style="color:#2e2a4a"><a href="#005812" label="[00:58:12]">&lt;melg8&gt;</a></span><span class="message">so we can use it instead of trusted (but slow for example)</span></div><div class="line" id="005815"><span class="nick" style="color:#6d2462"><a href="#005815" label="[00:58:15]">&lt;vagrantc&gt;</a></span><span class="message">i think david a. wheeler's later works removed the concept of trusted and untrusted compilers, if i'm remembering correctly</span></div><div class="line" id="005827"><span class="nick" style="color:#80b1d3"><a href="#005827" label="[00:58:27]">&lt;Hagfish&gt;</a></span><span class="message">oh, if you have two independent c++11 compilers, then they can DCC each other, sure</span></div><div class="line" id="005833"><span class="nick" style="color:#6d2462"><a href="#005833" label="[00:58:33]">&lt;vagrantc&gt;</a></span><span class="message">right</span></div><div class="line" id="005846"><span class="nick" style="color:#6d2462"><a href="#005846" label="[00:58:46]">&lt;vagrantc&gt;</a></span><span class="message">one of those D's in DDC stands for Diverse</span></div><div class="line" id="005910"><span class="nick" style="color:#80b1d3"><a href="#005910" label="[00:59:10]">&lt;Hagfish&gt;</a></span><span class="message">if only one of them can then build a c++20, then that's fine, because you've checked the source of that compiler, presumably</span></div><div class="line" id="010008"><span class="nick" style="color:#2e2a4a"><a href="#010008" label="[01:00:08]">&lt;melg8&gt;</a></span><span class="message">i have gcc and clang - both implemented modules functionallity per 20 standard. but source code of gcc and clang doesn't rely on them by themself. if i DDC them - could i detect bad binary of clang compiler, which only subvert c++20 code?</span></div><div class="line" id="010130"><span class="nick" style="color:#2e2a4a"><a href="#010130" label="[01:01:30]">&lt;melg8&gt;</a></span><span class="message">or it will not self reproduce than? and that's it?</span></div><div class="line" id="010137"><span class="nick" style="color:#80b1d3"><a href="#010137" label="[01:01:37]">&lt;Hagfish&gt;</a></span><span class="message">clang compiled with gcc compiled with clang should be fine, if you trust gcc not to support the subversion</span></div><div class="line" id="010229"><span class="nick" style="color:#80b1d3"><a href="#010229" label="[01:02:29]">&lt;Hagfish&gt;</a></span><span class="message">only the original binary will have the subverting behaviour</span></div><div class="line" id="010233"><span class="nick" style="color:#389600"><a href="#010233" label="[01:02:33]">&lt;OriansJ&gt;</a></span><span class="message">melg8: DDC works as long as both Compilers are not subverted in the exact same way.</span></div><div class="line" id="010315"><span class="nick" style="color:#389600"><a href="#010315" label="[01:03:15]">&lt;OriansJ&gt;</a></span><span class="message">So if you have 1 trusted compiler then any subversion will be detected.</span></div><div class="line" id="010502"><span class="nick" style="color:#8dd3c7"><a href="#010502" label="[01:05:02]">&lt;stikonas&gt;</a></span><span class="message">and if you bootstrap that 1 compiler from stage0, that would mean all kernels/hardware would have to be subverted in the exact same way</span></div><div class="line" id="010517"><span class="nick" style="color:#389600"><a href="#010517" label="[01:05:17]">&lt;OriansJ&gt;</a></span><span class="message">So if GCC binary is subverted by Chinese Trusting Trust Attack and Clang is subverted by NSA Trusting Trust attack, you'll detect both</span></div><div class="line" id="010600"><span class="nick" style="color:#389600"><a href="#010600" label="[01:06:00]">&lt;OriansJ&gt;</a></span><span class="message">unless they are both Identical</span></div><div class="line" id="010639"><span class="nick" style="color:#389600"><a href="#010639" label="[01:06:39]">&lt;OriansJ&gt;</a></span><span class="message">Now stage0 is spreading into EVERY Hardware platform with as many OS combinations people are willing to work on.</span></div><div class="line" id="010657"><span class="nick" style="color:#2e2a4a"><a href="#010657" label="[01:06:57]">&lt;melg8&gt;</a></span><span class="message">i think what i proposed would be detecting by self recompilation - than that c++20 subversion part will dissapear (because source doesn't have it) and sha's will differ</span></div><div class="line" id="010706"><span class="nick" style="color:#389600"><a href="#010706" label="[01:07:06]">&lt;OriansJ&gt;</a></span><span class="message">So you'll have to universally subvert *EVERYTHING* ever made and ever *WILL BE MADE*</span></div><div class="line" id="010916"><span class="nick" style="color:#389600"><a href="#010916" label="[01:09:16]">&lt;OriansJ&gt;</a></span><span class="message">Which include arbitrary hardware that Joe Soldering Iron makes in his/her garage for fun.</span></div><div class="line" id="011106"><span class="nick" style="color:#389600"><a href="#011106" label="[01:11:06]">&lt;OriansJ&gt;</a></span><span class="message">Because every piece done in stage0 can be reproduced *FOREVER*</span></div><div class="line" id="011157"><span class="nick" style="color:#2e2a4a"><a href="#011157" label="[01:11:57]">&lt;melg8&gt;</a></span><span class="message">can we than reproduce it on ethereum?</span></div><div class="line" id="011220"><span class="nick" style="color:#389600"><a href="#011220" label="[01:12:20]">&lt;OriansJ&gt;</a></span><span class="message">melg8: if someone is willing to put in the work required, yes</span></div><div class="line" id="011230"><span class="nick" style="color:#8dd3c7"><a href="#011230" label="[01:12:30]">&lt;stikonas&gt;</a></span><span class="message">you can reproduce it on pen and paper</span></div><div class="line" id="011237"><span class="nick" style="color:#8dd3c7"><a href="#011237" label="[01:12:37]">&lt;stikonas&gt;</a></span><span class="message">if you are willing to put enough work</span></div><div class="line" id="011321"><span class="nick" style="color:#389600"><a href="#011321" label="[01:13:21]">&lt;OriansJ&gt;</a></span><span class="message">In short, every single step from hex0 to MesCC can be done by hand to verify every single byte produced.</span></div><div class="line" id="011336"><span class="nick" style="color:#2e2a4a"><a href="#011336" label="[01:13:36]">&lt;melg8&gt;</a></span><span class="message">maybe some hex part, but not till gcc xD and still that would only prove something to me myself and i)</span></div><div class="line" id="011340"><span class="nick" style="color:#389600"><a href="#011340" label="[01:13:40]">&lt;OriansJ&gt;</a></span><span class="message">After that the steps exceed human manual efforts</span></div><div class="line" id="011455"><span class="nick" style="color:#8dd3c7"><a href="#011455" label="[01:14:55]">&lt;stikonas&gt;</a></span><span class="message">Mining bitcoins with pen and pencil: <a rel="nofollow" href="https://www.youtube.com/watch?v=y3dqhixzGVo">https://www.youtube.com/watch?v=y3dqhixzGVo</a> </span></div><div class="line" id="011509"><span class="nick" style="color:#8dd3c7"><a href="#011509" label="[01:15:09]">&lt;stikonas&gt;</a></span><span class="message">pen and paper</span></div><div class="line" id="011520"><span class="nick" style="color:#2e2a4a"><a href="#011520" label="[01:15:20]">&lt;melg8&gt;</a></span><span class="message">oh no...</span></div><div class="line" id="011827"><span class="nick" style="color:#389600"><a href="#011827" label="[01:18:27]">&lt;OriansJ&gt;</a></span><span class="message">the nice thing about cc_* and M2-Planet is each function can be fully independently checked in parallel.</span></div><div class="line" id="011920"><span class="nick" style="color:#2e2a4a"><a href="#011920" label="[01:19:20]">&lt;melg8&gt;</a></span><span class="message">so... you saying i can wrap it all up with nix language - and it should give bit by bit the same - as it now runned live-bootsrap?</span></div><div class="line" id="011929"><span class="nick" style="color:#2e2a4a"><a href="#011929" label="[01:19:29]">&lt;melg8&gt;</a></span><span class="message">bootstrap*</span></div><div class="line" id="011930"><span class="nick" style="color:#389600"><a href="#011930" label="[01:19:30]">&lt;OriansJ&gt;</a></span><span class="message">So simple create a team with as many people as there are functions in M2-Planet and just have them all produce the M1 output for each of them. Then convert the M1 into hex2 and then it is a straight process to checking every last byte</span></div><div class="line" id="012000"><span class="nick" style="color:#389600"><a href="#012000" label="[01:20:00]">&lt;OriansJ&gt;</a></span><span class="message">melg8: You can reproduce everything in stage0 on any arbitrary system you want</span></div><div class="line" id="012057"><span class="nick" style="color:#389600"><a href="#012057" label="[01:20:57]">&lt;OriansJ&gt;</a></span><span class="message">IBM 390 systems produce the same output as x86, ARM, RISC-V and SPARC</span></div><div class="line" id="012137"><span class="nick" style="color:#389600"><a href="#012137" label="[01:21:37]">&lt;OriansJ&gt;</a></span><span class="message">Windows, DOS, Linux, *BSD, VMS, OS/2, etc doesn't matter the output must always be exactly the same given the same input and flags</span></div><div class="line" id="012148"><span class="nick" style="color:#2e2a4a"><a href="#012148" label="[01:21:48]">&lt;melg8&gt;</a></span><span class="message">is there a paper explaining how that dark magic works across different architectures?</span></div><div class="line" id="012226"><span class="nick" style="color:#389600"><a href="#012226" label="[01:22:26]">&lt;OriansJ&gt;</a></span><span class="message">melg8: 8bit big endian byte encoding with hex isn't that hard to work out</span></div><div class="line" id="012309"><span class="nick" style="color:#389600"><a href="#012309" label="[01:23:09]">&lt;OriansJ&gt;</a></span><span class="message">we only work with bytes that are exactly 8bits long and in big bit endianness</span></div><div class="line" id="012352"><span class="nick" style="color:#389600"><a href="#012352" label="[01:23:52]">&lt;OriansJ&gt;</a></span><span class="message">36bit machines need to do extra work as do exotic machines with little bit endianness.</span></div><div class="line" id="012429"><span class="nick" style="color:#389600"><a href="#012429" label="[01:24:29]">&lt;OriansJ&gt;</a></span><span class="message">It is a trivial implementation problem that you can check with just 256 inputs</span></div><div class="line" id="012509"><span class="nick" style="color:#389600"><a href="#012509" label="[01:25:09]">&lt;OriansJ&gt;</a></span><span class="message">00 -&gt; FF; everything else is just manipulation of 7bit ascii strings</span></div><div class="line" id="012653"><span class="nick" style="color:#389600"><a href="#012653" label="[01:26:53]">&lt;OriansJ&gt;</a></span><span class="message">hex2 literally only has hex characters, :labels, !8bit, @16bit, ~24bit, %32bit relative addressing and $16bit, &amp;32bit absolute addressing</span></div><div class="line" id="012723"><span class="nick" style="color:#389600"><a href="#012723" label="[01:27:23]">&lt;OriansJ&gt;</a></span><span class="message">and # comments ; line comments to be precise</span></div><div class="line" id="012804"><span class="nick" style="color:#389600"><a href="#012804" label="[01:28:04]">&lt;OriansJ&gt;</a></span><span class="message">and we only write 1 byte at a time</span></div><div class="line" id="012820"><span class="nick" style="color:#80b1d3"><a href="#012820" label="[01:28:20]">&lt;Hagfish&gt;</a></span><span class="message">i see that someone has tried to implement x86 on the Ethereum VM: <a rel="nofollow" href="https://github.com/qtumproject/x86lib">https://github.com/qtumproject/x86lib</a> </span></div><div class="line" id="012831"><span class="nick" style="color:#80b1d3"><a href="#012831" label="[01:28:31]">&lt;Hagfish&gt;</a></span><span class="message">looks like they gave up and/or changed direction a couple of years ago, though</span></div><div class="line" id="013109"><span class="nick" style="color:#2e2a4a"><a href="#013109" label="[01:31:09]">&lt;melg8&gt;</a></span><span class="message">than from which point live-bootstrap becomes non cross-platform?</span></div><div class="line" id="013210"><span class="nick" style="color:#8dd3c7"><a href="#013210" label="[01:32:10]">&lt;stikonas&gt;</a></span><span class="message">melg8: well, stage0 binaries are also not cross-platform, it's the idea that is cross-platform</span></div><div class="line" id="013227"><span class="nick" style="color:#8dd3c7"><a href="#013227" label="[01:32:27]">&lt;stikonas&gt;</a></span><span class="message">you still have different x86 or arm binaries there</span></div><div class="line" id="013343"><span class="nick" style="color:#8dd3c7"><a href="#013343" label="[01:33:43]">&lt;stikonas&gt;</a></span><span class="message">but you can write hex*, M1, M2-Planet for all arches</span></div><div class="line" id="013357"><span class="nick" style="color:#8dd3c7"><a href="#013357" label="[01:33:57]">&lt;stikonas&gt;</a></span><span class="message">some non cross-platform compatibility then comes from driving scripts</span></div><div class="line" id="013411"><span class="nick" style="color:#8dd3c7"><a href="#013411" label="[01:34:11]">&lt;stikonas&gt;</a></span><span class="message">live-bootstrap hardcodes that in quite a few places at the moment</span></div><div class="line" id="013425"><span class="nick" style="color:#2e2a4a"><a href="#013425" label="[01:34:25]">&lt;melg8&gt;</a></span><span class="message">okay, but then how that *EVERYTHING* kicks in? so how to be globally trusted and not arm pocket of trust/ x86 pocket of trust?</span></div><div class="line" id="013439"><span class="nick" style="color:#8dd3c7"><a href="#013439" label="[01:34:39]">&lt;stikonas&gt;</a></span><span class="message">some comes from software in the bootstrap chain being non-crossplatform (e.g. need to port tcc to risc-v)</span></div><div class="line" id="013451"><span class="nick" style="color:#8dd3c7"><a href="#013451" label="[01:34:51]">&lt;stikonas&gt;</a></span><span class="message">and some comes from early build systems being non-portable</span></div><div class="line" id="013513"><span class="nick" style="color:#8dd3c7"><a href="#013513" label="[01:35:13]">&lt;stikonas&gt;</a></span><span class="message">would have to either use pregenerated configure scripts or port manually written makefiles</span></div><div class="line" id="013537"><span class="nick" style="color:#8dd3c7"><a href="#013537" label="[01:35:37]">&lt;stikonas&gt;</a></span><span class="message">you can cross-compile arm/x86 into each other</span></div><div class="line" id="013613"><span class="nick" style="color:#8dd3c7"><a href="#013613" label="[01:36:13]">&lt;stikonas&gt;</a></span><span class="message">trust does not get partitioned</span></div><div class="line" id="013626"><span class="nick" style="color:#2e2a4a"><a href="#013626" label="[01:36:26]">&lt;melg8&gt;</a></span><span class="message">so it's always connected by DDC idea? or it will reproduce bit by bit after native vs cross compilation?</span></div><div class="line" id="013644"><span class="nick" style="color:#8dd3c7"><a href="#013644" label="[01:36:44]">&lt;stikonas&gt;</a></span><span class="message">if anything, having more different platforms/ bootstrap chains that result in the same hashes increases trust</span></div><div class="line" id="013723"><span class="nick" style="color:#8dd3c7"><a href="#013723" label="[01:37:23]">&lt;stikonas&gt;</a></span><span class="message">well, you can get bit-by bit hash match after some self-recompilation</span></div><div class="line" id="013754"><span class="nick" style="color:#8dd3c7"><a href="#013754" label="[01:37:54]">&lt;stikonas&gt;</a></span><span class="message">but e.g. native stage1 build of gcc does not have to match stage1 cross-compiled build</span></div><div class="line" id="013827"><span class="nick" style="color:#8dd3c7"><a href="#013827" label="[01:38:27]">&lt;stikonas&gt;</a></span><span class="message">because source code is not the same</span></div><div class="line" id="013841"><span class="nick" style="color:#8dd3c7"><a href="#013841" label="[01:38:41]">&lt;stikonas&gt;</a></span><span class="message">(at least sourcecode after preprocessing)</span></div><div class="line" id="013948"><span class="nick" style="color:#2e2a4a"><a href="#013948" label="[01:39:48]">&lt;melg8&gt;</a></span><span class="message">so if i have fixed environment - and i have fixed GCC source code - no matter what original compiler i will use, i should after compilation of GCC with that compiler, and self recompilation of acquired compiler - same hash?</span></div><div class="line" id="014110"><span class="nick" style="color:#8dd3c7"><a href="#014110" label="[01:41:10]">&lt;stikonas&gt;</a></span><span class="message">well, if everything else matches</span></div><div class="line" id="014124"><span class="nick" style="color:#8dd3c7"><a href="#014124" label="[01:41:24]">&lt;stikonas&gt;</a></span><span class="message">e.g. you can't use different binutils versions, etc...</span></div><div class="line" id="014156"><span class="nick" style="color:#8dd3c7"><a href="#014156" label="[01:41:56]">&lt;stikonas&gt;</a></span><span class="message">it's more of a case &quot;you can obtain same hashes if you put enough work&quot; rather than &quot;you should obtain the same hashes&quot;</span></div><div class="line" id="014311"><span class="nick" style="color:#8dd3c7"><a href="#014311" label="[01:43:11]">&lt;stikonas&gt;</a></span><span class="message">and in any case, if native bootstrap is hard, cross-compiling might be a viable alternative</span></div><div class="line" id="014324"><span class="nick" style="color:#8dd3c7"><a href="#014324" label="[01:43:24]">&lt;stikonas&gt;</a></span><span class="message">that's how I built rust on mu arm64 box</span></div><div class="line" id="014340"><span class="nick" style="color:#8dd3c7"><a href="#014340" label="[01:43:40]">&lt;stikonas&gt;</a></span><span class="message">(cross-compiled it from amd64 where rust was built using mrustc)</span></div><div class="line" id="014501"><span class="nick" style="color:#2e2a4a"><a href="#014501" label="[01:45:01]">&lt;melg8&gt;</a></span><span class="message">forgot to ask, on what stage need in kernel kicks in?</span></div><div class="line" id="014548"><span class="nick" style="color:#8dd3c7"><a href="#014548" label="[01:45:48]">&lt;stikonas&gt;</a></span><span class="message">after M2-Planet</span></div><div class="line" id="014554"><span class="nick" style="color:#8dd3c7"><a href="#014554" label="[01:45:54]">&lt;stikonas&gt;</a></span><span class="message">mes does not run on baremetal</span></div><div class="line" id="014607"><span class="nick" style="color:#8dd3c7"><a href="#014607" label="[01:46:07]">&lt;stikonas&gt;</a></span><span class="message">(#includes, etc...)</span></div><div class="line" id="014625"><span class="nick" style="color:#2e2a4a"><a href="#014625" label="[01:46:25]">&lt;melg8&gt;</a></span><span class="message">does guix path have same issue?</span></div><div class="line" id="014641"><span class="nick" style="color:#8dd3c7"><a href="#014641" label="[01:46:41]">&lt;stikonas&gt;</a></span><span class="message">well, first of all guix emulates bootstrap</span></div><div class="line" id="014659"><span class="nick" style="color:#8dd3c7"><a href="#014659" label="[01:46:59]">&lt;stikonas&gt;</a></span><span class="message">there is already some environment there</span></div><div class="line" id="014735"><span class="nick" style="color:#8dd3c7"><a href="#014735" label="[01:47:35]">&lt;stikonas&gt;</a></span><span class="message">but yes, it would have all the same issues</span></div><div class="line" id="014752"><span class="nick" style="color:#8dd3c7"><a href="#014752" label="[01:47:52]">&lt;stikonas&gt;</a></span><span class="message">guix just takes more shortcuts</span></div><div class="line" id="014915"><span class="nick" style="color:#8dd3c7"><a href="#014915" label="[01:49:15]">&lt;stikonas&gt;</a></span><span class="message">but early bootstrap steps are the same in guix and live-bootstrap</span></div><div class="line" id="014920"><span class="nick" style="color:#8dd3c7"><a href="#014920" label="[01:49:20]">&lt;stikonas&gt;</a></span><span class="message">so hashes can match</span></div><div class="line" id="014932"><span class="nick" style="color:#8dd3c7"><a href="#014932" label="[01:49:32]">&lt;stikonas&gt;</a></span><span class="message">it's just that guix uses guile to drive the whole process</span></div><div class="line" id="014937"><span class="nick" style="color:#8dd3c7"><a href="#014937" label="[01:49:37]">&lt;stikonas&gt;</a></span><span class="message">and that's a fairly big binary</span></div><div class="line" id="015112"><span class="nick" style="color:#8dd3c7"><a href="#015112" label="[01:51:12]">&lt;stikonas&gt;</a></span><span class="message">well, live-bootstrap in chroot mode also emulates bootstrap</span></div><div class="line" id="015124"><span class="nick" style="color:#8dd3c7"><a href="#015124" label="[01:51:24]">&lt;stikonas&gt;</a></span><span class="message">but you can run live-bootstrap directly on hardware</span></div><div class="line" id="015149"><span class="nick" style="color:#2e2a4a"><a href="#015149" label="[01:51:49]">&lt;melg8&gt;</a></span><span class="message">does CI do that?</span></div><div class="line" id="015202"><span class="nick" style="color:#8dd3c7"><a href="#015202" label="[01:52:02]">&lt;stikonas&gt;</a></span><span class="message">CI runs in qemu (inside another VM)</span></div><div class="line" id="015213"><span class="nick" style="color:#8dd3c7"><a href="#015213" label="[01:52:13]">&lt;stikonas&gt;</a></span><span class="message">although, we might switch to chroot</span></div><div class="line" id="015220"><span class="nick" style="color:#8dd3c7"><a href="#015220" label="[01:52:20]">&lt;stikonas&gt;</a></span><span class="message">but purpose of CI is to help with development</span></div><div class="line" id="015234"><span class="nick" style="color:#8dd3c7"><a href="#015234" label="[01:52:34]">&lt;stikonas&gt;</a></span><span class="message">that's not necesserily to run trusted bootsrap</span></div><div class="line" id="015301"><span class="nick" style="color:#8dd3c7"><a href="#015301" label="[01:53:01]">&lt;stikonas&gt;</a></span><span class="message">I'm not sure if anybody tried to run live-bootstrap directly on hardware yet</span></div><div class="line" id="015305"><span class="nick" style="color:#8dd3c7"><a href="#015305" label="[01:53:05]">&lt;stikonas&gt;</a></span><span class="message">I haven't...</span></div><div class="line" id="015327"><span class="nick" style="color:#2e2a4a"><a href="#015327" label="[01:53:27]">&lt;melg8&gt;</a></span><span class="message">i mean, when something is not checked on regular basis - it tends to get out of hand</span></div><div class="line" id="015331"><span class="nick" style="color:#8dd3c7"><a href="#015331" label="[01:53:31]">&lt;stikonas&gt;</a></span><span class="message">(i.e. booting some kernel with initramfs that was prepared with ./rootfs.py</span></div><div class="line" id="015428"><span class="nick" style="color:#8dd3c7"><a href="#015428" label="[01:54:28]">&lt;stikonas&gt;</a></span><span class="message">the only cases were it was getting a bit out of hand here were actually genuine bugs (pre-generated files)</span></div><div class="line" id="015535"><span class="nick" style="color:#8dd3c7"><a href="#015535" label="[01:55:35]">&lt;stikonas&gt;</a></span><span class="message">chroot and qemu methods are both really simple</span></div><div class="line" id="015543"><span class="nick" style="color:#8dd3c7"><a href="#015543" label="[01:55:43]">&lt;stikonas&gt;</a></span><span class="message">that said, something else might get out of hand</span></div><div class="line" id="015558"><span class="nick" style="color:#8dd3c7"><a href="#015558" label="[01:55:58]">&lt;stikonas&gt;</a></span><span class="message">I think bauen1 was trying to run live-bootstrap with user-namespaces</span></div><div class="line" id="015607"><span class="nick" style="color:#8dd3c7"><a href="#015607" label="[01:56:07]">&lt;stikonas&gt;</a></span><span class="message">and that was getting broken</span></div><div class="line" id="015714"><span class="nick" style="color:#8dd3c7"><a href="#015714" label="[01:57:14]">&lt;stikonas&gt;</a></span><span class="message">I guess in general when environment is very constrained and well defined, code has less bit-rot even if you don't test it</span></div><div class="line" id="015950"><span class="nick" style="color:#2e2a4a"><a href="#015950" label="[01:59:50]">&lt;melg8&gt;</a></span><span class="message">but if you don't test it - you dont detect implicit assumptions, which at the end of the day differs from ground truth</span></div><div class="line" id="020055"><span class="nick" style="color:#8dd3c7"><a href="#020055" label="[02:00:55]">&lt;stikonas&gt;</a></span><span class="message">well, those implicit assumptions are more visible in rootless bootstrap that bauen1 was trying to do</span></div><div class="line" id="020212"><span class="nick" style="color:#2e2a4a"><a href="#020212" label="[02:02:12]">&lt;melg8&gt;</a></span><span class="message">what i need to do to boot it from hardware? what is missing now?</span></div><div class="line" id="020214"><span class="nick" style="color:#8dd3c7"><a href="#020214" label="[02:02:14]">&lt;stikonas&gt;</a></span><span class="message">I guess the moral here is if you don't test different ways you don't detect assumptions, but if you test different ways you are not guaranteed to detect the</span></div><div class="line" id="020220"><span class="nick" style="color:#8dd3c7"><a href="#020220" label="[02:02:20]">&lt;stikonas&gt;</a></span><span class="message">them</span></div><div class="line" id="020231"><span class="nick" style="color:#8dd3c7"><a href="#020231" label="[02:02:31]">&lt;stikonas&gt;</a></span><span class="message">some ways are more similar than others</span></div><div class="line" id="020239"><span class="nick" style="color:#389600"><a href="#020239" label="[02:02:39]">&lt;OriansJ&gt;</a></span><span class="message">melg8: only a kernel that you trust</span></div><div class="line" id="020306"><span class="nick" style="color:#8dd3c7"><a href="#020306" label="[02:03:06]">&lt;stikonas&gt;</a></span><span class="message">and some trusted way to prepare boot media</span></div><div class="line" id="020307"><span class="nick" style="color:#389600"><a href="#020307" label="[02:03:07]">&lt;OriansJ&gt;</a></span><span class="message">otherwise everything else is driven by kaem-optional-seed and is built from source</span></div><div class="line" id="020347"><span class="nick" style="color:#389600"><a href="#020347" label="[02:03:47]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: I think that is part of the kernel of trust (filesystem is its domain)</span></div><div class="line" id="020416"><span class="nick" style="color:#2e2a4a"><a href="#020416" label="[02:04:16]">&lt;melg8&gt;</a></span><span class="message">i think to start this to be run in reality we need some additional software - which can produce solution like plug this usb flash - and wait</span></div><div class="line" id="020507"><span class="nick" style="color:#389600"><a href="#020507" label="[02:05:07]">&lt;OriansJ&gt;</a></span><span class="message">and after checking the ether x86vm; it looks like it has everything one would need to run the stage0 steps up until TCC.</span></div><div class="line" id="020616"><span class="nick" style="color:#389600"><a href="#020616" label="[02:06:16]">&lt;OriansJ&gt;</a></span><span class="message">as Mes.c wouldn't run on that restricted set.</span></div><div class="line" id="020812"><span class="nick" style="color:#2e2a4a"><a href="#020812" label="[02:08:12]">&lt;melg8&gt;</a></span><span class="message">okay, next step would be run stage0 on genome</span></div><div class="line" id="020818"><span class="nick" style="color:#389600"><a href="#020818" label="[02:08:18]">&lt;OriansJ&gt;</a></span><span class="message">melg8: well we are also working on solving the Nexus Intruder Problem too. (Hardware compromising software, to ensure future hardware is compromised as well)</span></div><div class="line" id="020855"><span class="nick" style="color:#389600"><a href="#020855" label="[02:08:55]">&lt;OriansJ&gt;</a></span><span class="message">So there are lots of pieces to be done; we suggest you work on what you think looks like the most fun.</span></div><div class="line" id="020920"><span class="nick" style="color:#8dd3c7"><a href="#020920" label="[02:09:20]">&lt;stikonas&gt;</a></span><span class="message">in practice hardware knows very little about software it runs</span></div><div class="line" id="020924"><span class="nick" style="color:#2e2a4a"><a href="#020924" label="[02:09:24]">&lt;melg8&gt;</a></span><span class="message">i like same hashes xD of whole thing</span></div><div class="line" id="020926"><span class="nick" style="color:#389600"><a href="#020926" label="[02:09:26]">&lt;OriansJ&gt;</a></span><span class="message">FPGA work, ASIC work, making gates by hand, etc</span></div><div class="line" id="021041"><span class="nick" style="color:#389600"><a href="#021041" label="[02:10:41]">&lt;OriansJ&gt;</a></span><span class="message">stikonas: not so much these days with neural network branch prediction.</span></div><div class="line" id="025451"><span class="nick" style="color:#6c3d55"><a href="#025451" label="[02:54:51]">&lt;gef&gt;</a></span><span class="message">OriansJ:</span></div><div class="line" id="025451"><span class="nick" style="color:#6c3d55"><a href="#025451" label="[02:54:51]">&lt;gef&gt;</a></span><span class="message">&gt; Which include arbitrary hardware that Joe Soldering Iron makes in his/her garage for fun.</span></div><div class="line" id="025454"><span class="nick" style="color:#6c3d55"><a href="#025454" label="[02:54:54]">&lt;gef&gt;</a></span><span class="message">This is exactly why I'm inclined to explore mono-instruction machines, because they provide a thin layer of abstraction over various underlying architectures. The downside is, they are may only be good up to the instant of needing a kernel. From that moment on, things get more complicated. But the battle is not lost: if you can still checksum/verify the builds' products from your OISC trusted executor, you can still prevent the worst cases of possible</span></div><div class="line" id="025457"><span class="nick" style="color:#6c3d55"><a href="#025457" label="[02:54:57]">&lt;gef&gt;</a></span><span class="message">damage.</span></div><div class="line" id="025616"><span class="nick" style="color:#6c3d55"><a href="#025616" label="[02:56:16]">&lt;gef&gt;</a></span><span class="message">i.e. bootstrap with something like SBN4 int32 architecture (even if software-simulated) and then treat loaders and even kernelized builds as mere subroutines. Trust but verify. And so on.</span></div><div class="line" id="030303"><span class="nick" style="color:#6c3d55"><a href="#030303" label="[03:03:03]">&lt;gef&gt;</a></span><span class="message">SBN4 variant: <a rel="nofollow" href="https://en.wikipedia.org/wiki/One-instruction_set_computer#subneg4">https://en.wikipedia.org/wiki/One-instruction_set_computer#subneg4</a> </span></div><div class="line" id="031554"><span class="nick" style="color:#389600"><a href="#031554" label="[03:15:54]">&lt;OriansJ&gt;</a></span><span class="message">gef: I don't disagree that it certainly possible. I just wouldn't want to have to write that assembly or audit it by hand. ( I do have limits with what I am willing to do for bootstrapping you know ). So someone else would have to be convinced (or paid) to do so.</span></div><div class="line" id="031700"><span class="nick" style="color:#6c3d55"><a href="#031700" label="[03:17:00]">&lt;gef&gt;</a></span><span class="message">sure, that's fair. Not implying it comes your way, just offering a method of we could overcome the need to cross-check architectures as we go forward. We'll see also if other ideas emerge, in the meantime!</span></div><div class="line" id="031928"><span class="nick" style="color:#6c3d55"><a href="#031928" label="[03:19:28]">&lt;gef&gt;</a></span><span class="message">And, it's not all roses anyway, since having robust checksum functions under sbn4 is a bit hard problem - we'd need to combine several simpler such functions together to increase the level of trust. I'm still looking into this topic.</span></div><div class="line" id="094354"><span class="nick" style="color:#2e2a4a"><a href="#094354" label="[09:43:54]">&lt;melg8&gt;</a></span><span class="message">Hi, OriansJ how stage0 seed for native x86 were produced? (<a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds/blob/cfa108377c15382f58b20394150840e1099b6767/NATIVE/x86/stage0_monitor.img">https://github.com/oriansj/bootstrap-seeds/blob/cfa108377c15382f58b20394150840e1099b6767/NATIVE/x86/stage0_monitor.img</a>)  and why it is so big?</span></div><div class="line" id="104246"><span class="nick" style="color:#d9d9d9"><a href="#104246" label="[10:42:46]">&lt;gforce_de1977&gt;</a></span><span class="message"> melg8: this is just a 1.44mb floppy disk image</span></div><div class="line" id="105051"><span class="nick" style="color:#d9d9d9"><a href="#105051" label="[10:50:51]">&lt;gforce_de1977&gt;</a></span><span class="message">melg8: i have on my list, to provide a better floppy + build_floppy.sh script (for bare metal bootstrapping)</span></div><div class="line" id="105150"><span class="nick" style="color:#2e2a4a"><a href="#105150" label="[10:51:50]">&lt;melg8&gt;</a></span><span class="message">conceptually how from stage0_monitor.img get that floppy img?</span></div><div class="line" id="105432"><span class="nick" style="color:#d9d9d9"><a href="#105432" label="[10:54:32]">&lt;gforce_de1977&gt;</a></span><span class="message">melg8: you just print out the sourcecode, use a magnetic needle and stamp it onto a 8&quot; floppy disc 8-)</span></div><div class="line" id="105733"><span class="nick" style="color:#2e2a4a"><a href="#105733" label="[10:57:33]">&lt;melg8&gt;</a></span><span class="message">that's not what im asking - if i have stage0_monitor.img (512 bytes, which i get from stage0_monitor.hex0) - how i can generate that 1.44 mb image? is it trivial like add some header to that stage0_monitor.img? and fill rest with zeroes? or is it containing more sofisticated binary inside?</span></div><div class="line" id="111935"><span class="nick" style="color:#d9d9d9"><a href="#111935" label="[11:19:35]">&lt;gforce_de1977&gt;</a></span><span class="message">aaaah. IMHO dd if=stage0_monitor.hex0 /dev/fd0</span></div><div class="line" id="111959"><span class="nick" style="color:#d9d9d9"><a href="#111959" label="[11:19:59]">&lt;gforce_de1977&gt;</a></span><span class="message">sorry: dd if=stage0_monitor.bin /dev/fd0</span></div><div class="line" id="112003"><span class="nick" style="color:#d9d9d9"><a href="#112003" label="[11:20:03]">&lt;gforce_de1977&gt;</a></span><span class="message">and</span></div><div class="line" id="112117"><span class="nick" style="color:#d9d9d9"><a href="#112117" label="[11:21:17]">&lt;gforce_de1977&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/bittorf/GNU-mes-documentation-attempt/blob/main/step00/doc.md">https://github.com/bittorf/GNU-mes-documentation-attempt/blob/main/step00/doc.md</a> </span></div><div class="line" id="112212"><span class="nick" style="color:#d9d9d9"><a href="#112212" label="[11:22:12]">&lt;gforce_de1977&gt;</a></span><span class="message">and</span></div><div class="line" id="112215"><span class="nick" style="color:#d9d9d9"><a href="#112215" label="[11:22:15]">&lt;gforce_de1977&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/bittorf/GNU-mes-documentation-attempt/blob/main/step01/doc.md">https://github.com/bittorf/GNU-mes-documentation-attempt/blob/main/step01/doc.md</a> </span></div><div class="line" id="112218"><span class="nick" style="color:#d9d9d9"><a href="#112218" label="[11:22:18]">&lt;gforce_de1977&gt;</a></span><span class="message">and</span></div><div class="line" id="112245"><span class="nick" style="color:#d9d9d9"><a href="#112245" label="[11:22:45]">&lt;gforce_de1977&gt;</a></span><span class="message">the sourcecode can be converted using:</span></div><div class="line" id="112248"><span class="nick" style="color:#d9d9d9"><a href="#112248" label="[11:22:48]">&lt;gforce_de1977&gt;</a></span><span class="message">sed 's/[;#].*$//g' file.hex0 | xxd -r -p &gt;hex0.bin</span></div><div class="line" id="112328"><span class="nick" style="color:#2e2a4a"><a href="#112328" label="[11:23:28]">&lt;melg8&gt;</a></span><span class="message">thanks!</span></div><div class="line" id="113148"><span class="nick" style="color:#d9d9d9"><a href="#113148" label="[11:31:48]">&lt;gforce_de1977&gt;</a></span><span class="message">back in the days when we used i386 PC and the DX40 was new, the term USB had no meaning and booting from other media than floppy or harddisk was black magic</span></div><div class="line" id="150129"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado_</span></div><div class="line" id="150131"><span class="nick">***</span><span class="message notice">rekado_ is now known as rekado</span></div><br /></div></body></html>