<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-10-17.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000228"><span class="nick" style="color:#389600"><a href="#000228" label="[00:02:28]">&lt;OriansJ&gt;</a></span><span class="message">yep; fortunately being a stupid malloc makes it more portable but it is gonna waste alot of space (about 4KB per malloc)</span></div><div class="line" id="000347"><span class="nick" style="color:#389600"><a href="#000347" label="[00:03:47]">&lt;OriansJ&gt;</a></span><span class="message">1K mallocs at 4K waste or 4MB of wasted memory net</span></div><div class="line" id="000355"><span class="nick" style="color:#8dd3c7"><a href="#000355" label="[00:03:55]">&lt;xentrac&gt;</a></span><span class="message">the stupidest malloc just bumps a pointer in a static char array</span></div><div class="line" id="000419"><span class="nick" style="color:#8dd3c7"><a href="#000419" label="[00:04:19]">&lt;xentrac&gt;</a></span><span class="message">look ma! no syscalls!</span></div><div class="line" id="000453"><span class="nick" style="color:#389600"><a href="#000453" label="[00:04:53]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: that doesn't work on Linux; unless I do a mssive malloc right off the bat</span></div><div class="line" id="000754"><span class="nick" style="color:#2e2a4a"><a href="#000754" label="[00:07:54]">&lt;nimaje&gt;</a></span><span class="message">so, correcting OSABI and Flags in POSIX/AMD64/hex0_AMD64.hex0 makes it work and as expected the result generates the same binary (it is diffrent from that binary build with xxd)</span></div><div class="line" id="001034"><span class="nick" style="color:#2e2a4a"><a href="#001034" label="[00:10:34]">&lt;nimaje&gt;</a></span><span class="message">it seems like POSIX/x86/hex0_x86.hex0 and kaem-optional-seed.hex0 only need OSABI fixed, but I haven't tested that</span></div><div class="line" id="001535"><span class="nick" style="color:#2e2a4a"><a href="#001535" label="[00:15:35]">&lt;nimaje&gt;</a></span><span class="message">oh, no that xxd generated binary had empty output (should have checked that earlier)</span></div><div class="line" id="002127"><span class="nick" style="color:#2e2a4a"><a href="#002127" label="[00:21:27]">&lt;nimaje&gt;</a></span><span class="message">ok, I just called it wrong, it works fine</span></div><div class="line" id="002244"><span class="nick" style="color:#2e2a4a"><a href="#002244" label="[00:22:44]">&lt;nimaje&gt;</a></span><span class="message">(well file says  ..., corrupted section header size  but that's probably ok)</span></div><div class="line" id="003014"><span class="nick" style="color:#389600"><a href="#003014" label="[00:30:14]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: well no section headers at all, so kind of expected</span></div><div class="line" id="003451"><span class="nick" style="color:#389600"><a href="#003451" label="[00:34:51]">&lt;OriansJ&gt;</a></span><span class="message">I'm correcting x86 and the kaem-optional too</span></div><div class="line" id="003648"><span class="nick" style="color:#2e2a4a"><a href="#003648" label="[00:36:48]">&lt;nimaje&gt;</a></span><span class="message">brandelf'd kaem-optional-seed is identical to one generated by corrected hex0 and corrected OSABI in kaem-optional-seed.hex0</span></div><div class="line" id="003858"><span class="nick" style="color:#389600"><a href="#003858" label="[00:38:58]">&lt;OriansJ&gt;</a></span><span class="message">and updated files are up</span></div><div class="line" id="003911"><span class="nick" style="color:#389600"><a href="#003911" label="[00:39:11]">&lt;OriansJ&gt;</a></span><span class="message">now onto the main show mescc-tools-seed</span></div><div class="line" id="004225"><span class="nick" style="color:#389600"><a href="#004225" label="[00:42:25]">&lt;OriansJ&gt;</a></span><span class="message">the order is in: AMD64/mescc-tools-seed-kaem.kaem and then AMD64/mescc-tools-mini-kaem.kaem</span></div><div class="line" id="004608"><span class="nick" style="color:#389600"><a href="#004608" label="[00:46:08]">&lt;OriansJ&gt;</a></span><span class="message">so first AMD64/hex0_AMD64.hex0 which should have a identical changes as the bootstrap-seed's hex0</span></div><div class="line" id="004715"><span class="nick" style="color:#389600"><a href="#004715" label="[00:47:15]">&lt;OriansJ&gt;</a></span><span class="message">so <a rel="nofollow" href="https://paste.debian.net/1167524/">https://paste.debian.net/1167524/</a> </span></div><div class="line" id="004833"><span class="nick" style="color:#389600"><a href="#004833" label="[00:48:33]">&lt;OriansJ&gt;</a></span><span class="message">then AMD64/kaem-minimal.hex0 with the same changes as bootstrap-seed's kaem-minimal</span></div><div class="line" id="005038"><span class="nick" style="color:#389600"><a href="#005038" label="[00:50:38]">&lt;OriansJ&gt;</a></span><span class="message">so <a rel="nofollow" href="https://paste.debian.net/1167525/">https://paste.debian.net/1167525/</a> </span></div><div class="line" id="005114"><span class="nick" style="color:#389600"><a href="#005114" label="[00:51:14]">&lt;OriansJ&gt;</a></span><span class="message">the only difference is this one actually is written in AMD64 and we will need to check the malloc</span></div><div class="line" id="005309"><span class="nick" style="color:#389600"><a href="#005309" label="[00:53:09]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: incase you were not sure: make test-amd64 (unless you want to help test the x86 binaries for FreeBSD too using make test-x86)</span></div><div class="line" id="005420"><span class="nick" style="color:#2e2a4a"><a href="#005420" label="[00:54:20]">&lt;nimaje&gt;</a></span><span class="message">already changes OSABI and ph_flags in all *.hex{0,1,2} files, now I am at ./hex2-0 hold M2 and it says  Subprocess error ABORTING HARD</span></div><div class="line" id="005450"><span class="nick" style="color:#2e2a4a"><a href="#005450" label="[00:54:50]">&lt;nimaje&gt;</a></span><span class="message">I just run ../../bootstrap-seeds/kaem-optional-seed in AMD64</span></div><div class="line" id="005522"><span class="nick" style="color:#389600"><a href="#005522" label="[00:55:22]">&lt;OriansJ&gt;</a></span><span class="message">that works too</span></div><div class="line" id="005606"><span class="nick" style="color:#389600"><a href="#005606" label="[00:56:06]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: well that error message is from kaem; it means the last program returned something other than 0</span></div><div class="line" id="005615"><span class="nick" style="color:#389600"><a href="#005615" label="[00:56:15]">&lt;OriansJ&gt;</a></span><span class="message">which means ./hex2-0 hold M2</span></div><div class="line" id="005620"><span class="nick" style="color:#389600"><a href="#005620" label="[00:56:20]">&lt;OriansJ&gt;</a></span><span class="message">failed</span></div><div class="line" id="005626"><span class="nick" style="color:#389600"><a href="#005626" label="[00:56:26]">&lt;OriansJ&gt;</a></span><span class="message">possibly insufficient memory</span></div><div class="line" id="005644"><span class="nick" style="color:#389600"><a href="#005644" label="[00:56:44]">&lt;OriansJ&gt;</a></span><span class="message">as I believe I had hex2 just allocate a big block</span></div><div class="line" id="005649"><span class="nick" style="color:#389600"><a href="#005649" label="[00:56:49]">&lt;OriansJ&gt;</a></span><span class="message">easy to check</span></div><div class="line" id="005727"><span class="nick" style="color:#389600"><a href="#005727" label="[00:57:27]">&lt;OriansJ&gt;</a></span><span class="message">4881C7 00008000             ; ADDI32_to_RDI %8388608      ; Create space for temp [8MB]</span></div><div class="line" id="005728"><span class="nick" style="color:#8dd3c7"><a href="#005728" label="[00:57:28]">&lt;xentrac&gt;</a></span><span class="message">OriansJ: you can't have a 100MB .bss on Linux?  I admit I haven't tried it but I'd never heard of such a limitation</span></div><div class="line" id="005830"><span class="nick" style="color:#389600"><a href="#005830" label="[00:58:30]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: that is possible but also is the malloc it all up front bit</span></div><div class="line" id="010005"><span class="nick" style="color:#389600"><a href="#010005" label="[01:00:05]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: see if increasing it to 12MB works (warning in little endian order means 0x12345678 looks like 78 56 34 12</span></div><div class="line" id="010015"><span class="nick" style="color:#389600"><a href="#010015" label="[01:00:15]">&lt;OriansJ&gt;</a></span><span class="message">)</span></div><div class="line" id="010234"><span class="nick" style="color:#389600"><a href="#010234" label="[01:02:34]">&lt;OriansJ&gt;</a></span><span class="message">(you'll also want to update the mescc-tools and M2-Planet submodules)</span></div><div class="line" id="010742"><span class="nick" style="color:#2e2a4a"><a href="#010742" label="[01:07:42]">&lt;nimaje&gt;</a></span><span class="message">to change that from 8MB to 12MB I only need to change 00008000 to 0000C000 there?</span></div><div class="line" id="010759"><span class="nick" style="color:#389600"><a href="#010759" label="[01:07:59]">&lt;OriansJ&gt;</a></span><span class="message">yes</span></div><div class="line" id="011121"><span class="nick" style="color:#2e2a4a"><a href="#011121" label="[01:11:21]">&lt;nimaje&gt;</a></span><span class="message">well, ./hex2-0 hold M2 probably failed because I didn't had the submodules</span></div><div class="line" id="011313"><span class="nick" style="color:#2e2a4a"><a href="#011313" label="[01:13:13]">&lt;nimaje&gt;</a></span><span class="message">ok and then M2 fails (probably because of the old malloc)</span></div><div class="line" id="011546"><span class="nick" style="color:#2e2a4a"><a href="#011546" label="[01:15:46]">&lt;nimaje&gt;</a></span><span class="message">pulling M2-Planet resulted in ./cc_amd64 hold M2.M1 failing Unknown type SCM</span></div><div class="line" id="012308"><span class="nick" style="color:#389600"><a href="#012308" label="[01:23:08]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: easy to fix, one moment</span></div><div class="line" id="013045"><span class="nick" style="color:#389600"><a href="#013045" label="[01:30:45]">&lt;OriansJ&gt;</a></span><span class="message">M2-Planet patch is up</span></div><div class="line" id="013124"><span class="nick" style="color:#389600"><a href="#013124" label="[01:31:24]">&lt;OriansJ&gt;</a></span><span class="message">excuse me as I have to read my son his bedtime story (will be back shortly)</span></div><div class="line" id="014557"><span class="nick" style="color:#8dd3c7"><a href="#014557" label="[01:45:57]">&lt;xentrac&gt;</a></span><span class="message">yay story time</span></div><div class="line" id="015300"><span class="nick" style="color:#389600"><a href="#015300" label="[01:53:00]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: his favorite part of bedtime (besides the bottle of milk)</span></div><div class="line" id="015308"><span class="nick" style="color:#8dd3c7"><a href="#015308" label="[01:53:08]">&lt;xentrac&gt;</a></span><span class="message">&lt;3</span></div><div class="line" id="015403"><span class="nick" style="color:#2e2a4a"><a href="#015403" label="[01:54:03]">&lt;nimaje&gt;</a></span><span class="message">now it runs the build to completion</span></div><div class="line" id="015430"><span class="nick" style="color:#389600"><a href="#015430" label="[01:54:30]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: nice; so everything on AMD64 builds and runs without issue?</span></div><div class="line" id="015522"><span class="nick" style="color:#8dd3c7"><a href="#015522" label="[01:55:22]">&lt;xentrac&gt;</a></span><span class="message">yaay</span></div><div class="line" id="015546"><span class="nick" style="color:#389600"><a href="#015546" label="[01:55:46]">&lt;OriansJ&gt;</a></span><span class="message">love to see that diff (so I can apply and upstream it)</span></div><div class="line" id="015635"><span class="nick" style="color:#2e2a4a"><a href="#015635" label="[01:56:35]">&lt;nimaje&gt;</a></span><span class="message">well, it builds; not tested if it runs fine, but as most stuff there is needed to build later stuff that should run fine</span></div><div class="line" id="015704"><span class="nick" style="color:#389600"><a href="#015704" label="[01:57:04]">&lt;OriansJ&gt;</a></span><span class="message">well the only parts that need to be tested are those in bin/</span></div><div class="line" id="015755"><span class="nick" style="color:#389600"><a href="#015755" label="[01:57:55]">&lt;OriansJ&gt;</a></span><span class="message">you can copy them over and use the standard mescc-tools and M2-Planet tests on them</span></div><div class="line" id="015933"><span class="nick" style="color:#389600"><a href="#015933" label="[01:59:33]">&lt;OriansJ&gt;</a></span><span class="message">The only warning is test0008 depends upon signed shift behavior in hex2; which I need to fix in M2-Planet but you can skip that by using the GCC version of hex2 for the M2-Planet tests</span></div><div class="line" id="020147"><span class="nick" style="color:#2e2a4a"><a href="#020147" label="[02:01:47]">&lt;nimaje&gt;</a></span><span class="message">what does kaem mean with UNKNOWN ARGUMENT? I gave it a file which just contains /bin/ls</span></div><div class="line" id="020240"><span class="nick" style="color:#80b1d3"><a href="#020240" label="[02:02:40]">&lt;fossy&gt;</a></span><span class="message">are you running the latest kaem</span></div><div class="line" id="020247"><span class="nick" style="color:#389600"><a href="#020247" label="[02:02:47]">&lt;OriansJ&gt;</a></span><span class="message">if you look at mescc-tools/kaem.c in the function main (it will explain exactly how kaem accepts arguments</span></div><div class="line" id="020252"><span class="nick" style="color:#80b1d3"><a href="#020252" label="[02:02:52]">&lt;fossy&gt;</a></span><span class="message">you should just run ./kaem script.sh now</span></div><div class="line" id="020300"><span class="nick" style="color:#80b1d3"><a href="#020300" label="[02:03:00]">&lt;fossy&gt;</a></span><span class="message">or ./kaem -f script.sh if you feel so inclined</span></div><div class="line" id="020308"><span class="nick" style="color:#389600"><a href="#020308" label="[02:03:08]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: the final kaem binary in mescc-tools-seed is just the C version of kaem.c compiled by M2-Planet</span></div><div class="line" id="020356"><span class="nick" style="color:#2e2a4a"><a href="#020356" label="[02:03:56]">&lt;nimaje&gt;</a></span><span class="message">I ran  ./bin/kaem test.kaem  with test.kaem containing a single line  /bin/ls</span></div><div class="line" id="020409"><span class="nick" style="color:#389600"><a href="#020409" label="[02:04:09]">&lt;OriansJ&gt;</a></span><span class="message">fossy: I think I forgot to revert the kaem extensions (I think I missed it by being too busy)</span></div><div class="line" id="020421"><span class="nick" style="color:#80b1d3"><a href="#020421" label="[02:04:21]">&lt;fossy&gt;</a></span><span class="message">kaem extensions?</span></div><div class="line" id="020432"><span class="nick" style="color:#80b1d3"><a href="#020432" label="[02:04:32]">&lt;fossy&gt;</a></span><span class="message">oh</span></div><div class="line" id="020436"><span class="nick" style="color:#389600"><a href="#020436" label="[02:04:36]">&lt;OriansJ&gt;</a></span><span class="message">fossy: your enhancements to kaem</span></div><div class="line" id="020447"><span class="nick" style="color:#80b1d3"><a href="#020447" label="[02:04:47]">&lt;fossy&gt;</a></span><span class="message">wait, why were they being reverted?</span></div><div class="line" id="020529"><span class="nick" style="color:#80b1d3"><a href="#020529" label="[02:05:29]">&lt;fossy&gt;</a></span><span class="message">nimaje: try ./bin/kaem -f test.kam</span></div><div class="line" id="020532"><span class="nick" style="color:#80b1d3"><a href="#020532" label="[02:05:32]">&lt;fossy&gt;</a></span><span class="message">nimaje: try ./bin/kaem -f test.kaem</span></div><div class="line" id="020534"><span class="nick" style="color:#80b1d3"><a href="#020534" label="[02:05:34]">&lt;fossy&gt;</a></span><span class="message">sorry typo</span></div><div class="line" id="020551"><span class="nick" style="color:#2e2a4a"><a href="#020551" label="[02:05:51]">&lt;nimaje&gt;</a></span><span class="message">yes, found that just now, that works</span></div><div class="line" id="020607"><span class="nick" style="color:#80b1d3"><a href="#020607" label="[02:06:07]">&lt;fossy&gt;</a></span><span class="message">ok.. weird... i added support for ./bin/kaem file</span></div><div class="line" id="020623"><span class="nick" style="color:#389600"><a href="#020623" label="[02:06:23]">&lt;OriansJ&gt;</a></span><span class="message">fossy: I needed to pull your enhanced kaem out of the mescc-tools-seed bootstrap path because it was producing an error, that I didn't feel able to address at the time</span></div><div class="line" id="020636"><span class="nick" style="color:#80b1d3"><a href="#020636" label="[02:06:36]">&lt;fossy&gt;</a></span><span class="message">OriansJ: OH right, I see, the minimal kaem for the core bootstrap</span></div><div class="line" id="020657"><span class="nick" style="color:#80b1d3"><a href="#020657" label="[02:06:57]">&lt;fossy&gt;</a></span><span class="message">is it a compile time error or a runtime error?</span></div><div class="line" id="020708"><span class="nick" style="color:#389600"><a href="#020708" label="[02:07:08]">&lt;OriansJ&gt;</a></span><span class="message">runtime error</span></div><div class="line" id="020733"><span class="nick" style="color:#80b1d3"><a href="#020733" label="[02:07:33]">&lt;fossy&gt;</a></span><span class="message">hmst, ok</span></div><div class="line" id="020740"><span class="nick" style="color:#389600"><a href="#020740" label="[02:07:40]">&lt;OriansJ&gt;</a></span><span class="message">I just never got the chance to revert that</span></div><div class="line" id="020802"><span class="nick" style="color:#80b1d3"><a href="#020802" label="[02:08:02]">&lt;fossy&gt;</a></span><span class="message">in mescc-tools on the master branch it's at minimal kaem.</span></div><div class="line" id="020803"><span class="nick" style="color:#389600"><a href="#020803" label="[02:08:03]">&lt;OriansJ&gt;</a></span><span class="message">just too much on my plate and it just kept getting dropped</span></div><div class="line" id="020903"><span class="nick" style="color:#389600"><a href="#020903" label="[02:09:03]">&lt;OriansJ&gt;</a></span><span class="message">so fossy if it isn't too much to ask, please revert that commit of mine and help me figure out what is going wrong with the enhanced kaem so that people can use it too</span></div><div class="line" id="020913"><span class="nick" style="color:#80b1d3"><a href="#020913" label="[02:09:13]">&lt;fossy&gt;</a></span><span class="message">oh i see what you mean</span></div><div class="line" id="020917"><span class="nick" style="color:#80b1d3"><a href="#020917" label="[02:09:17]">&lt;fossy&gt;</a></span><span class="message">yeah i will try and get to that ASAP</span></div><div class="line" id="020926"><span class="nick" style="color:#389600"><a href="#020926" label="[02:09:26]">&lt;OriansJ&gt;</a></span><span class="message">thank you fossy</span></div><div class="line" id="020935"><span class="nick" style="color:#80b1d3"><a href="#020935" label="[02:09:35]">&lt;fossy&gt;</a></span><span class="message">i'm quite busy IRL with school exams but i'll put it on my list, should be done within the next week or so</span></div><div class="line" id="021025"><span class="nick" style="color:#389600"><a href="#021025" label="[02:10:25]">&lt;OriansJ&gt;</a></span><span class="message">fossy: oh I get busy; I've got a 7month old who demands lots of attention and a full time job.</span></div><div class="line" id="021037"><span class="nick" style="color:#389600"><a href="#021037" label="[02:10:37]">&lt;OriansJ&gt;</a></span><span class="message">life just gets too busy some days</span></div><div class="line" id="021058"><span class="nick" style="color:#80b1d3"><a href="#021058" label="[02:10:58]">&lt;fossy&gt;</a></span><span class="message">yeah :)</span></div><div class="line" id="021107"><span class="nick" style="color:#80b1d3"><a href="#021107" label="[02:11:07]">&lt;fossy&gt;</a></span><span class="message">i hope you're having fun at least with your child</span></div><div class="line" id="021129"><span class="nick" style="color:#389600"><a href="#021129" label="[02:11:29]">&lt;OriansJ&gt;</a></span><span class="message">fossy: lots of playtime is great but it really cuts down on my programming output</span></div><div class="line" id="021219"><span class="nick" style="color:#389600"><a href="#021219" label="[02:12:19]">&lt;OriansJ&gt;</a></span><span class="message">So I'm only getting a couple hours tops (when wife is on kid duty or kid is asleep and wife doesn't expect couple time)</span></div><div class="line" id="021314"><span class="nick" style="color:#389600"><a href="#021314" label="[02:13:14]">&lt;OriansJ&gt;</a></span><span class="message">and this week, I had to burn a bunch of time trying to prove a problem in guix about missing tarballs</span></div><div class="line" id="021531"><span class="nick" style="color:#389600"><a href="#021531" label="[02:15:31]">&lt;OriansJ&gt;</a></span><span class="message">so I paid for a digitial ocean ubunutu server; downloaded guix's sources.json. extracted the urls and had wget go to town. Honestly it was far worse than even I would have expected only 7,557 remained out of the list of 74,881 tarballs</span></div><div class="line" id="021553"><span class="nick" style="color:#389600"><a href="#021553" label="[02:15:53]">&lt;OriansJ&gt;</a></span><span class="message">of which a smaller subset actually match the checksum in guix</span></div><div class="line" id="021638"><span class="nick" style="color:#389600"><a href="#021638" label="[02:16:38]">&lt;OriansJ&gt;</a></span><span class="message">as a few are just html pages (and I couldn't get guix to even pull without substitutes on that server)</span></div><div class="line" id="021711"><span class="nick" style="color:#389600"><a href="#021711" label="[02:17:11]">&lt;OriansJ&gt;</a></span><span class="message">now that server is running: while true; do netcat -l 7557 &lt; report.tar.xz; echo &quot;there is a download&quot; ; done</span></div><div class="line" id="021813"><span class="nick" style="color:#389600"><a href="#021813" label="[02:18:13]">&lt;OriansJ&gt;</a></span><span class="message">and tomorrow I'll be shutting it down (as hopefully everyone who wanted a copy got the 94MB of logfiles that shows exactly what worked)</span></div><div class="line" id="021909"><span class="nick" style="color:#389600"><a href="#021909" label="[02:19:09]">&lt;OriansJ&gt;</a></span><span class="message">from 128.199.4.208 on port 7557 if you too want a copy</span></div><div class="line" id="021939"><span class="nick" style="color:#389600"><a href="#021939" label="[02:19:39]">&lt;OriansJ&gt;</a></span><span class="message">(it compressed down to about 23KB)</span></div><div class="line" id="021943"><span class="nick" style="color:#2e2a4a"><a href="#021943" label="[02:19:43]">&lt;nimaje&gt;</a></span><span class="message">ok, trying M2-Planet tests with the binaries from mescc-tools-seed results in test/test0000/hello-aarch64.sh being successful and then M2-Planet segfaulting in test/test0001/hello-aarch64.sh</span></div><div class="line" id="022208"><span class="nick" style="color:#2e2a4a"><a href="#022208" label="[02:22:08]">&lt;nimaje&gt;</a></span><span class="message">but enought for today, I should go to bed, good night</span></div><div class="line" id="022218"><span class="nick" style="color:#8dd3c7"><a href="#022218" label="[02:22:18]">&lt;xentrac&gt;</a></span><span class="message">OriansJ: whoa, that's a lot worse than my guixstrapping experience</span></div><div class="line" id="022236"><span class="nick" style="color:#389600"><a href="#022236" label="[02:22:36]">&lt;OriansJ&gt;</a></span><span class="message">good night nimaje</span></div><div class="line" id="022253"><span class="nick" style="color:#389600"><a href="#022253" label="[02:22:53]">&lt;OriansJ&gt;</a></span><span class="message">hopefully I'll have some fixes for that by tomorrow</span></div><div class="line" id="022348"><span class="nick" style="color:#389600"><a href="#022348" label="[02:23:48]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: mine too; mostly just a tarball here or there that went missing or changed. efraim only has a small list too (that they archived)</span></div><div class="line" id="022415"><span class="nick" style="color:#8dd3c7"><a href="#022415" label="[02:24:15]">&lt;xentrac&gt;</a></span><span class="message">yeah</span></div><div class="line" id="022424"><span class="nick" style="color:#389600"><a href="#022424" label="[02:24:24]">&lt;OriansJ&gt;</a></span><span class="message">So either these are packages that no one builds from source or no one actually uses</span></div><div class="line" id="022454"><span class="nick" style="color:#389600"><a href="#022454" label="[02:24:54]">&lt;OriansJ&gt;</a></span><span class="message">or I got garbage data from sources.json and the entire activity was a complete waste of time</span></div><div class="line" id="022556"><span class="nick" style="color:#8dd3c7"><a href="#022556" label="[02:25:56]">&lt;xentrac&gt;</a></span><span class="message">wouldn't be surprising if there were a lot of packages in guix no one actually uses</span></div><div class="line" id="023018"><span class="nick" style="color:#389600"><a href="#023018" label="[02:30:18]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: possibly mass package definition imports to boost package counts?</span></div><div class="line" id="025137"><span class="nick" style="color:#389600"><a href="#025137" label="[02:51:37]">&lt;OriansJ&gt;</a></span><span class="message">I think I tried to be too clever again with loops</span></div><div class="line" id="025249"><span class="nick" style="color:#389600"><a href="#025249" label="[02:52:49]">&lt;OriansJ&gt;</a></span><span class="message">I really need to stop declaring variables inside loops for M2-Planet</span></div><div class="line" id="025335"><span class="nick" style="color:#389600"><a href="#025335" label="[02:53:35]">&lt;OriansJ&gt;</a></span><span class="message">it catches me every single time</span></div><div class="line" id="025712"><span class="nick" style="color:#389600"><a href="#025712" label="[02:57:12]">&lt;OriansJ&gt;</a></span><span class="message">or another more likely possiblity; the people usings those packages are simply updating the definition on their own channel and not bothering to upstream</span></div><div class="line" id="025835"><span class="nick" style="color:#8dd3c7"><a href="#025835" label="[02:58:35]">&lt;xentrac&gt;</a></span><span class="message">heh</span></div><div class="line" id="030252"><span class="nick" style="color:#389600"><a href="#030252" label="[03:02:52]">&lt;OriansJ&gt;</a></span><span class="message">yep, it was me being stupid again</span></div><div class="line" id="030353"><span class="nick" style="color:#6d2462"><a href="#030353" label="[03:03:53]">&lt;Hagfish&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.atlanticcouncil.org/programs/scowcroft-center-for-strategy-and-security/cyber-statecraft-initiative/breaking-trust/">https://www.atlanticcouncil.org/programs/scowcroft-center-for-strategy-and-security/cyber-statecraft-initiative/breaking-trust/</a>  &quot;This report evaluates a dataset of 115 software supply chain attacks and vulnerability disclosures collected from public reporting over the past 10 years&quot;</span></div><div class="line" id="030421"><span class="nick" style="color:#389600"><a href="#030421" label="[03:04:21]">&lt;OriansJ&gt;</a></span><span class="message">it is diffs like this <a rel="nofollow" href="https://paste.debian.net/1167538/">https://paste.debian.net/1167538/</a>  that remind me that I am stupid</span></div><div class="line" id="030627"><span class="nick" style="color:#389600"><a href="#030627" label="[03:06:27]">&lt;OriansJ&gt;</a></span><span class="message">thank you Hagfish</span></div><div class="line" id="031434"><span class="nick" style="color:#389600"><a href="#031434" label="[03:14:34]">&lt;OriansJ&gt;</a></span><span class="message">now to figure out how to fix the shifts</span></div><div class="line" id="035854"><span class="nick" style="color:#389600"><a href="#035854" label="[03:58:54]">&lt;OriansJ&gt;</a></span><span class="message">one interesting note knight has arithmetic shifts left and right; then shift zero and shift one left and right (eg sr0 and sl1 will fill in with zero or one on the left or right side depending upon the instruction)</span></div><div class="line" id="040014"><span class="nick" style="color:#389600"><a href="#040014" label="[04:00:14]">&lt;OriansJ&gt;</a></span><span class="message">shr generally means fill with zeros but would totally be wrong for certain masking operations (which filling with ones would be optimal)</span></div><div class="line" id="040522"><span class="nick" style="color:#389600"><a href="#040522" label="[04:05:22]">&lt;OriansJ&gt;</a></span><span class="message">I really need your help deesix to get shifting right for aarch64 (It'll impact the aarch64 mescc-tools-seed port later)</span></div><div class="line" id="043325"><span class="nick" style="color:#389600"><a href="#043325" label="[04:33:25]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: mescc-tools-seed built M2-Planet, I now have in a state where it should sucessfully build every M2-Planet test (except test/results/test0102-knight-posix-binary; which I still need to figure out why)</span></div><div class="line" id="043549"><span class="nick" style="color:#389600"><a href="#043549" label="[04:35:49]">&lt;OriansJ&gt;</a></span><span class="message">it is wrong but not in a way that would produce different output from the program nor different behavior from the program</span></div><div class="line" id="043756"><span class="nick" style="color:#389600"><a href="#043756" label="[04:37:56]">&lt;OriansJ&gt;</a></span><span class="message">essentially numerate_string is returning the wrong result</span></div><div class="line" id="044255"><span class="nick" style="color:#389600"><a href="#044255" label="[04:42:55]">&lt;OriansJ&gt;</a></span><span class="message">oh, I have seen this before</span></div><div class="line" id="050603"><span class="nick" style="color:#389600"><a href="#050603" label="[05:06:03]">&lt;OriansJ&gt;</a></span><span class="message">or more correctly, not sign extending a 32bit value to 64bits when loading a 4byte integer</span></div><div class="line" id="050634"><span class="nick" style="color:#389600"><a href="#050634" label="[05:06:34]">&lt;OriansJ&gt;</a></span><span class="message">(another possible bug in aarch64 we will have to deal with later)</span></div><div class="line" id="054327"><span class="nick" style="color:#389600"><a href="#054327" label="[05:43:27]">&lt;OriansJ&gt;</a></span><span class="message">integrating sign extension is ugly; I'll pick it up tomorrow (test0008 will still fail for knight-posix but everything else will work)</span></div><div class="line" id="093139"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado_</span></div><div class="line" id="093143"><span class="nick">***</span><span class="message notice">rekado_ is now known as rekado</span></div><div class="line" id="093430"><span class="nick" style="color:#2e2a4a"><a href="#093430" label="[09:34:30]">&lt;nimaje&gt;</a></span><span class="message">good morning</span></div><div class="line" id="093751"><span class="nick" style="color:#2e2a4a"><a href="#093751" label="[09:37:51]">&lt;nimaje&gt;</a></span><span class="message">pulled M2-Planet, now  ../bin/M1 -f amd64_defs.M1 -f libc-core.M1 -f kaem.M1 -f kaem-footer.M1 --LittleEndian --architecture amd64 -o hold  fails (in mescc-tools-seed)</span></div><div class="line" id="094349"><span class="nick" style="color:#2e2a4a"><a href="#094349" label="[09:43:49]">&lt;nimaje&gt;</a></span><span class="message">lldb says  SIGSEGV: invalid address (fault address: 0x241)  M1`WHILE_hexify_string_9 + 161  -&gt;  0x602cbb &lt;+161&gt;: lodsb  (%rsi), %al</span></div><div class="line" id="121947"><span class="nick" style="color:#389600"><a href="#121947" label="[12:19:47]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: ok; lets look at that</span></div><div class="line" id="122314"><span class="nick" style="color:#389600"><a href="#122314" label="[12:23:14]">&lt;OriansJ&gt;</a></span><span class="message">interesting; ../bin/M1 -f amd64_defs.M1 -f libc-core.M1 -f kaem.M1 -f kaem-footer.M1 --LittleEndian --architecture amd64 runs to successful completion and dumps everything to stdout</span></div><div class="line" id="122342"><span class="nick" style="color:#389600"><a href="#122342" label="[12:23:42]">&lt;OriansJ&gt;</a></span><span class="message">why would -o hold result in segfault?</span></div><div class="line" id="123141"><span class="nick" style="color:#2e2a4a"><a href="#123141" label="[12:31:41]">&lt;nimaje&gt;</a></span><span class="message">it also segfaults here without -o hold</span></div><div class="line" id="123255"><span class="nick" style="color:#2e2a4a"><a href="#123255" label="[12:32:55]">&lt;nimaje&gt;</a></span><span class="message">but then lldb says SIGSEGV: bound violation</span></div><div class="line" id="123314"><span class="nick" style="color:#389600"><a href="#123314" label="[12:33:14]">&lt;OriansJ&gt;</a></span><span class="message">hmm</span></div><div class="line" id="123353"><span class="nick" style="color:#2e2a4a"><a href="#123353" label="[12:33:53]">&lt;nimaje&gt;</a></span><span class="message">but still 0x602cbb</span></div><div class="line" id="123715"><span class="nick" style="color:#389600"><a href="#123715" label="[12:37:15]">&lt;OriansJ&gt;</a></span><span class="message">and instruction 0xAC</span></div><div class="line" id="123755"><span class="nick" style="color:#389600"><a href="#123755" label="[12:37:55]">&lt;OriansJ&gt;</a></span><span class="message">M2-Planet doesn't even have a definition for AMD64 that includes ac</span></div><div class="line" id="123945"><span class="nick" style="color:#389600"><a href="#123945" label="[12:39:45]">&lt;OriansJ&gt;</a></span><span class="message">So how did that show up in the instruction stream</span></div><div class="line" id="130817"><span class="nick" style="color:#389600"><a href="#130817" label="[13:08:17]">&lt;OriansJ&gt;</a></span><span class="message">oh I see; M0 didn't report an error</span></div><div class="line" id="130827"><span class="nick" style="color:#389600"><a href="#130827" label="[13:08:27]">&lt;OriansJ&gt;</a></span><span class="message">hold:4140 :Received invalid other; SHR_rax_cl</span></div><div class="line" id="130927"><span class="nick" style="color:#389600"><a href="#130927" label="[13:09:27]">&lt;OriansJ&gt;</a></span><span class="message">mescc-tools-seed's amd64_defs was not updated and the SHR_rax_cl was promptly followed by garbage x86 instructions</span></div><div class="line" id="131041"><span class="nick" style="color:#389600"><a href="#131041" label="[13:10:41]">&lt;OriansJ&gt;</a></span><span class="message">here is the diff you would need nimaje <a rel="nofollow" href="https://paste.debian.net/1167576/">https://paste.debian.net/1167576/</a> </span></div><div class="line" id="131241"><span class="nick" style="color:#389600"><a href="#131241" label="[13:12:41]">&lt;OriansJ&gt;</a></span><span class="message">FYI, one can use M1 and hex2 to sanity check steps in the bootstrap</span></div><div class="line" id="131611"><span class="nick" style="color:#2e2a4a"><a href="#131611" label="[13:16:11]">&lt;nimaje&gt;</a></span><span class="message">not sure why git apply says error: corrupt patch at line 17 but it was easy enought to handapply</span></div><div class="line" id="131751"><span class="nick" style="color:#2e2a4a"><a href="#131751" label="[13:17:51]">&lt;nimaje&gt;</a></span><span class="message">ok, that is fixed now</span></div><div class="line" id="131916"><span class="nick" style="color:#2e2a4a"><a href="#131916" label="[13:19:16]">&lt;nimaje&gt;</a></span><span class="message">mescc-tools-seed build again</span></div><div class="line" id="131946"><span class="nick" style="color:#389600"><a href="#131946" label="[13:19:46]">&lt;OriansJ&gt;</a></span><span class="message">excellent</span></div><div class="line" id="132143"><span class="nick" style="color:#389600"><a href="#132143" label="[13:21:43]">&lt;OriansJ&gt;</a></span><span class="message">git diff it into a patch and I'll apply it</span></div><div class="line" id="133855"><span class="nick" style="color:#2e2a4a"><a href="#133855" label="[13:38:55]">&lt;nimaje&gt;</a></span><span class="message">so with <a rel="nofollow" href="https://0x0.st/iDPW.diff">https://0x0.st/iDPW.diff</a>  mescc-tools-seed builds here, but I got test/results/test0102-knight-posix-binary: NOT OK for some reason when testing M2-Planet with those binaries</span></div><div class="line" id="134343"><span class="nick" style="color:#389600"><a href="#134343" label="[13:43:43]">&lt;OriansJ&gt;</a></span><span class="message">ok, lets take a look at that</span></div><div class="line" id="142310"><span class="nick" style="color:#389600"><a href="#142310" label="[14:23:10]">&lt;OriansJ&gt;</a></span><span class="message">yep test/results/test0102-knight-posix-binary failed but the reason for the failure is 0xFFFFFFFF on 32bit systems is -1 but on 64bit systems is 4+Billion and the range check in primary_expr_number resulting in the following difference in M1 output: <a rel="nofollow" href="https://paste.debian.net/1167580/">https://paste.debian.net/1167580/</a> </span></div><div class="line" id="142400"><span class="nick" style="color:#389600"><a href="#142400" label="[14:24:00]">&lt;OriansJ&gt;</a></span><span class="message">it is a known bug; that I will be addressing later today and assuming everything else came out OK. no issues</span></div><div class="line" id="142438"><span class="nick" style="color:#389600"><a href="#142438" label="[14:24:38]">&lt;OriansJ&gt;</a></span><span class="message">good job nimaje</span></div><div class="line" id="142517"><span class="nick" style="color:#389600"><a href="#142517" label="[14:25:17]">&lt;OriansJ&gt;</a></span><span class="message">if you are up for it we can also do mescc-tools-seed for x86</span></div><div class="line" id="143157"><span class="nick" style="color:#389600"><a href="#143157" label="[14:31:57]">&lt;OriansJ&gt;</a></span><span class="message">(I just need to do some cleanup before we go down that route)</span></div><div class="line" id="143847"><span class="nick" style="color:#389600"><a href="#143847" label="[14:38:47]">&lt;OriansJ&gt;</a></span><span class="message">and revised mescc-tools-seed is now up (I needed to update the x86 checksums to match the new mescc-tools+M2-Planet source code)</span></div><div class="line" id="152308"><span class="nick" style="color:#2e2a4a"><a href="#152308" label="[15:23:08]">&lt;nimaje&gt;</a></span><span class="message">yes, the others were ok</span></div><div class="line" id="153510"><span class="nick" style="color:#2e2a4a"><a href="#153510" label="[15:35:10]">&lt;nimaje&gt;</a></span><span class="message">with <a rel="nofollow" href="https://0x0.st/iDZA.diff">https://0x0.st/iDZA.diff</a>  ../../bootstrap-seeds/kaem-optional-seed in mescc-tools-seed/x86 runs to completion (that mes-m2 update is probably unimportant, I just pulled master in all submodules)</span></div><div class="line" id="155931"><span class="nick" style="color:#389600"><a href="#155931" label="[15:59:31]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: thank you for your work</span></div><div class="line" id="160335"><span class="nick" style="color:#2e2a4a"><a href="#160335" label="[16:03:35]">&lt;nimaje&gt;</a></span><span class="message">with those x86 binaries M2-Planet tests pass, but get_machine has empty output (maybe it had that too for the amd64 version), so no build binaries were run only the checksums checked</span></div><div class="line" id="160516"><span class="nick" style="color:#389600"><a href="#160516" label="[16:05:16]">&lt;OriansJ&gt;</a></span><span class="message">well the binaries are what generally are run</span></div><div class="line" id="160532"><span class="nick" style="color:#389600"><a href="#160532" label="[16:05:32]">&lt;OriansJ&gt;</a></span><span class="message">so if the binaries are identicial, one doesn't need to run them to know they work</span></div><div class="line" id="160630"><span class="nick" style="color:#2e2a4a"><a href="#160630" label="[16:06:30]">&lt;nimaje&gt;</a></span><span class="message">but --overrides works, so I will retest with GET_MACHINE_FLAGS=&quot;--override x86&quot; and amd64</span></div><div class="line" id="160759"><span class="nick" style="color:#389600"><a href="#160759" label="[16:07:59]">&lt;OriansJ&gt;</a></span><span class="message">odd, just ran make test-x86 and ./bin/get_machine seems to behave just fine on Linux</span></div><div class="line" id="160855"><span class="nick" style="color:#389600"><a href="#160855" label="[16:08:55]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: does the gcc built version of get_machine.c work on FreeBSD?</span></div><div class="line" id="161251"><span class="nick" style="color:#2e2a4a"><a href="#161251" label="[16:12:51]">&lt;nimaje&gt;</a></span><span class="message">where would get_machine.c be? mescc-tools-seed/x86 only has get_machine.M1 if I see that right</span></div><div class="line" id="161338"><span class="nick" style="color:#389600"><a href="#161338" label="[16:13:38]">&lt;OriansJ&gt;</a></span><span class="message">mescc-tools is where get_machine.c is</span></div><div class="line" id="161512"><span class="nick" style="color:#389600"><a href="#161512" label="[16:15:12]">&lt;OriansJ&gt;</a></span><span class="message">because if that works; it means the issue is in test/common_x86/functions/uname.c and test/common_amd64/functions/uname.c</span></div><div class="line" id="161548"><span class="nick" style="color:#2e2a4a"><a href="#161548" label="[16:15:48]">&lt;nimaje&gt;</a></span><span class="message">yes, get_machine.c works correctly</span></div><div class="line" id="161554"><span class="nick" style="color:#389600"><a href="#161554" label="[16:15:54]">&lt;OriansJ&gt;</a></span><span class="message">where the utsname struct <a rel="nofollow" href="https://paste.debian.net/1167590/">https://paste.debian.net/1167590/</a>  might be different</span></div><div class="line" id="161924"><span class="nick" style="color:#389600"><a href="#161924" label="[16:19:24]">&lt;OriansJ&gt;</a></span><span class="message">you can use cgdb to p* the struct to see if the definition is different in the GCC compiled version</span></div><div class="line" id="161928"><span class="nick" style="color:#2e2a4a"><a href="#161928" label="[16:19:28]">&lt;nimaje&gt;</a></span><span class="message">freebsd uses 256 for those array sizes</span></div><div class="line" id="162003"><span class="nick" style="color:#389600"><a href="#162003" label="[16:20:03]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: and I am guessing the Linux emulation doesn't change the structs when returning them to linux binaries</span></div><div class="line" id="162238"><span class="nick" style="color:#389600"><a href="#162238" label="[16:22:38]">&lt;OriansJ&gt;</a></span><span class="message">does atleast ./bin/get_machine --OS return the correct thing?</span></div><div class="line" id="162417"><span class="nick" style="color:#2e2a4a"><a href="#162417" label="[16:24:17]">&lt;nimaje&gt;</a></span><span class="message">no</span></div><div class="line" id="162429"><span class="nick" style="color:#2e2a4a"><a href="#162429" label="[16:24:29]">&lt;nimaje&gt;</a></span><span class="message">also has empty output</span></div><div class="line" id="162505"><span class="nick" style="color:#2e2a4a"><a href="#162505" label="[16:25:05]">&lt;nimaje&gt;</a></span><span class="message">and when I try to step through with lldb I get SIGSEGV: bound violation</span></div><div class="line" id="162509"><span class="nick" style="color:#389600"><a href="#162509" label="[16:25:09]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: so char sysname isn't offset zero in FreeBSD's struct?</span></div><div class="line" id="162552"><span class="nick" style="color:#389600"><a href="#162552" label="[16:25:52]">&lt;OriansJ&gt;</a></span><span class="message">try breaking on FUNCTION_uname</span></div><div class="line" id="162630"><span class="nick" style="color:#389600"><a href="#162630" label="[16:26:30]">&lt;OriansJ&gt;</a></span><span class="message">the struct will be in RAX/eax at the RETURN</span></div><div class="line" id="162655"><span class="nick" style="color:#2e2a4a"><a href="#162655" label="[16:26:55]">&lt;nimaje&gt;</a></span><span class="message"> <a rel="nofollow" href="https://0x0.st/iDZg.c">https://0x0.st/iDZg.c</a>  is what I get if I use cpp on the header</span></div><div class="line" id="162943"><span class="nick" style="color:#2e2a4a"><a href="#162943" label="[16:29:43]">&lt;nimaje&gt;</a></span><span class="message">lldb doesn't seem to like that x86 get_machine, maybe I have more luck with the amd64 version</span></div><div class="line" id="162947"><span class="nick" style="color:#389600"><a href="#162947" label="[16:29:47]">&lt;OriansJ&gt;</a></span><span class="message">could the bound violation be because we are only allocating 1000bytes short of the size of the FreeBSD return?</span></div><div class="line" id="163351"><span class="nick" style="color:#2e2a4a"><a href="#163351" label="[16:33:51]">&lt;nimaje&gt;</a></span><span class="message">well, it segfaults on the first step, so the first instruction of that binary</span></div><div class="line" id="163444"><span class="nick" style="color:#2e2a4a"><a href="#163444" label="[16:34:44]">&lt;nimaje&gt;</a></span><span class="message">ok, it let's me debug the amd64 version</span></div><div class="line" id="164326"><span class="nick" style="color:#2e2a4a"><a href="#164326" label="[16:43:26]">&lt;nimaje&gt;</a></span><span class="message">rax seems to be 0x0000000000000000</span></div><div class="line" id="164432"><span class="nick" style="color:#389600"><a href="#164432" label="[16:44:32]">&lt;OriansJ&gt;</a></span><span class="message">after the syscall?</span></div><div class="line" id="164612"><span class="nick" style="color:#2e2a4a"><a href="#164612" label="[16:46:12]">&lt;nimaje&gt;</a></span><span class="message">yes</span></div><div class="line" id="165054"><span class="nick" style="color:#389600"><a href="#165054" label="[16:50:54]">&lt;OriansJ&gt;</a></span><span class="message">so FreeBSD is punting and just returning NULL</span></div><div class="line" id="165641"><span class="nick" style="color:#389600"><a href="#165641" label="[16:56:41]">&lt;OriansJ&gt;</a></span><span class="message">ok, what happens if we just replace the calloc(1, sizeof(struct utsname)) with calloc(10000, sizeof(char)); would that get FreeBSD to return something?</span></div><div class="line" id="165648"><span class="nick" style="color:#2e2a4a"><a href="#165648" label="[16:56:48]">&lt;nimaje&gt;</a></span><span class="message">but uname returns 0 on success, and that result should be in rax (?) and it is given a pointer</span></div><div class="line" id="165747"><span class="nick" style="color:#389600"><a href="#165747" label="[16:57:47]">&lt;OriansJ&gt;</a></span><span class="message">right because the kernel populates at the address pointed to in the syscall</span></div><div class="line" id="165959"><span class="nick" style="color:#2e2a4a"><a href="#165959" label="[16:59:59]">&lt;nimaje&gt;</a></span><span class="message">would the argument be in rax at the start of the function?</span></div><div class="line" id="170015"><span class="nick" style="color:#389600"><a href="#170015" label="[17:00:15]">&lt;OriansJ&gt;</a></span><span class="message">yes</span></div><div class="line" id="170037"><span class="nick" style="color:#389600"><a href="#170037" label="[17:00:37]">&lt;OriansJ&gt;</a></span><span class="message">as the last pushed argument would still be in RAX at the time of the call</span></div><div class="line" id="170124"><span class="nick" style="color:#2e2a4a"><a href="#170124" label="[17:01:24]">&lt;nimaje&gt;</a></span><span class="message">well, that starts with Linux</span></div><div class="line" id="170205"><span class="nick" style="color:#389600"><a href="#170205" label="[17:02:05]">&lt;OriansJ&gt;</a></span><span class="message">well that would be correct for a linux emulation layer</span></div><div class="line" id="170313"><span class="nick" style="color:#2e2a4a"><a href="#170313" label="[17:03:13]">&lt;nimaje&gt;</a></span><span class="message">yes, but why doesn't --OS output that?</span></div><div class="line" id="170543"><span class="nick" style="color:#389600"><a href="#170543" label="[17:05:43]">&lt;OriansJ&gt;</a></span><span class="message">That I do not have a good answer for</span></div><div class="line" id="170926"><span class="nick" style="color:#389600"><a href="#170926" label="[17:09:26]">&lt;OriansJ&gt;</a></span><span class="message">I have Linux at 0x602000</span></div><div class="line" id="170955"><span class="nick" style="color:#389600"><a href="#170955" label="[17:09:55]">&lt;OriansJ&gt;</a></span><span class="message">and so do you I am guessing</span></div><div class="line" id="171100"><span class="nick" style="color:#2e2a4a"><a href="#171100" label="[17:11:00]">&lt;nimaje&gt;</a></span><span class="message">oh, the amd64 version does work, should have tested that earlier</span></div><div class="line" id="171145"><span class="nick" style="color:#389600"><a href="#171145" label="[17:11:45]">&lt;OriansJ&gt;</a></span><span class="message">and does it return Linux or FreeBSD?</span></div><div class="line" id="171207"><span class="nick" style="color:#2e2a4a"><a href="#171207" label="[17:12:07]">&lt;nimaje&gt;</a></span><span class="message">it returns Linux</span></div><div class="line" id="171256"><span class="nick" style="color:#2e2a4a"><a href="#171256" label="[17:12:56]">&lt;nimaje&gt;</a></span><span class="message">so, only the x86 version doesn't work and lldb doesn't want to let me debug it</span></div><div class="line" id="171307"><span class="nick" style="color:#389600"><a href="#171307" label="[17:13:07]">&lt;OriansJ&gt;</a></span><span class="message">ok I can help with that</span></div><div class="line" id="171351"><span class="nick" style="color:#389600"><a href="#171351" label="[17:13:51]">&lt;OriansJ&gt;</a></span><span class="message">break on FUNCTION_uname; eax should have 0x804a000</span></div><div class="line" id="171433"><span class="nick" style="color:#389600"><a href="#171433" label="[17:14:33]">&lt;OriansJ&gt;</a></span><span class="message">and after the int 0x80; it should have Linux</span></div><div class="line" id="171714"><span class="nick" style="color:#389600"><a href="#171714" label="[17:17:14]">&lt;OriansJ&gt;</a></span><span class="message">and eax should be ZERO</span></div><div class="line" id="171804"><span class="nick" style="color:#2e2a4a"><a href="#171804" label="[17:18:04]">&lt;nimaje&gt;</a></span><span class="message">as said earlier trying to debug directly stops with SIGSEGV: bound violation, maybe lldb just can't debug x86 binaries under linux emulation</span></div><div class="line" id="171933"><span class="nick" style="color:#389600"><a href="#171933" label="[17:19:33]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: I think we have achieved enough FreeBSD success today</span></div><div class="line" id="171959"><span class="nick" style="color:#389600"><a href="#171959" label="[17:19:59]">&lt;OriansJ&gt;</a></span><span class="message">a fully working AMD64 mescc-tools-seed is more than enough</span></div><div class="line" id="173622"><span class="nick" style="color:#2e2a4a"><a href="#173622" label="[17:36:22]">&lt;nimaje&gt;</a></span><span class="message">yes, make test works in mescc-tools mes-m2 and M2-Planet with the amd64 binaries from mescc-tools-seed, so they should be working fine</span></div><div class="line" id="180750"><span class="nick" style="color:#389600"><a href="#180750" label="[18:07:50]">&lt;OriansJ&gt;</a></span><span class="message">now to fixup the int32 behavior on 64bit systems</span></div><div class="line" id="181742"><span class="nick" style="color:#389600"><a href="#181742" label="[18:17:42]">&lt;OriansJ&gt;</a></span><span class="message">(I probably did the aarch64 completely wrong)</span></div><div class="line" id="183030"><span class="nick" style="color:#2e2a4a"><a href="#183030" label="[18:30:30]">&lt;nimaje&gt;</a></span><span class="message">well, with <a rel="nofollow" href="https://0x0.st/iDNy.diff">https://0x0.st/iDNy.diff</a>  x86 mescc-tools-seed builds fine and mescc-tools and M2-Planet tests run fine, but mes-m2 segfaults and get_machine doesn't work (M2-Planet test need a lot time, especially if run twice (--override amd64 and x86))</span></div><div class="line" id="190516"><span class="nick" style="color:#389600"><a href="#190516" label="[19:05:16]">&lt;OriansJ&gt;</a></span><span class="message">well I can get the M2-Planet test time down if I make M1 and hex2 faster</span></div><div class="line" id="190716"><span class="nick" style="color:#389600"><a href="#190716" label="[19:07:16]">&lt;OriansJ&gt;</a></span><span class="message">and I really should look into  the mes-m2 segfault</span></div><div class="line" id="195107"><span class="nick" style="color:#389600"><a href="#195107" label="[19:51:07]">&lt;OriansJ&gt;</a></span><span class="message">and the fixup patch is up</span></div><div class="line" id="200919"><span class="nick" style="color:#389600"><a href="#200919" label="[20:09:19]">&lt;OriansJ&gt;</a></span><span class="message">also M2-Planet runs 176 tests (even only taking 1 second per is nearly 3Minutes)</span></div><div class="line" id="201051"><span class="nick" style="color:#389600"><a href="#201051" label="[20:10:51]">&lt;OriansJ&gt;</a></span><span class="message">and ./test/test1000/hello-x86.sh can take 15seconds</span></div><div class="line" id="201525"><span class="nick" style="color:#389600"><a href="#201525" label="[20:15:25]">&lt;OriansJ&gt;</a></span><span class="message">and self-hosting takes 3.7 seconds (does this 8 times or twice per architecture)</span></div><div class="line" id="203654"><span class="nick" style="color:#389600"><a href="#203654" label="[20:36:54]">&lt;OriansJ&gt;</a></span><span class="message">this is the function that is responsible for 68.99% of M1's runtime: <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/M1-macro.c#L254">https://github.com/oriansj/mescc-tools/blob/master/M1-macro.c#L254</a> </span></div><div class="line" id="203703"><span class="nick" style="color:#389600"><a href="#203703" label="[20:37:03]">&lt;OriansJ&gt;</a></span><span class="message">any ideas on how to speed it up?</span></div><br /></div></body></html>