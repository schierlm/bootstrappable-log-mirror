<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-10-16.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="001722"><span class="nick" style="color:#8dd3c7"><a href="#001722" label="[00:17:22]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: what if we set the Flags in the ELF header from 6 to 7 as ph_flags: PF-X|PF-W|PF-R = 7</span></div><div class="line" id="001811"><span class="nick" style="color:#8dd3c7"><a href="#001811" label="[00:18:11]">&lt;OriansJ&gt;</a></span><span class="message">Linux might simply be marking the page executable as well; while FreeBSD isn't</span></div><div class="line" id="003136"><span class="nick" style="color:#8dd3c7"><a href="#003136" label="[00:31:36]">&lt;OriansJ&gt;</a></span><span class="message">the ndisasm output will be identical but the readelf -a output will be just 1 bit different (but we would have to update the checksums but oh well)</span></div><div class="line" id="003138"><span class="nick" style="color:#2e2a4a"><a href="#003138" label="[00:31:38]">&lt;nimaje&gt;</a></span><span class="message">trying to change the flags via objcopy gives me  objcopy: elf_getscn failed: Missing or malformed ELF header  while other tools working with elf files worked fine</span></div><div class="line" id="003242"><span class="nick" style="color:#8dd3c7"><a href="#003242" label="[00:32:42]">&lt;OriansJ&gt;</a></span><span class="message">you can change the flags by just editing the elf file and running test/test1/hello.sh</span></div><div class="line" id="003421"><span class="nick" style="color:#8dd3c7"><a href="#003421" label="[00:34:21]">&lt;OriansJ&gt;</a></span><span class="message">that is probably because these binaries don't have a section table or any section headers (nor symbol tables)</span></div><div class="line" id="003544"><span class="nick" style="color:#8dd3c7"><a href="#003544" label="[00:35:44]">&lt;OriansJ&gt;</a></span><span class="message">It just has a single program table entry and no null program table entry after it (which slightly violates the spec)</span></div><div class="line" id="003727"><span class="nick" style="color:#2e2a4a"><a href="#003727" label="[00:37:27]">&lt;nimaje&gt;</a></span><span class="message">yes that works, I didn't find the flags in the elf file, because I looked for ph_flags instead of just flags</span></div><div class="line" id="003911"><span class="nick" style="color:#8dd3c7"><a href="#003911" label="[00:39:11]">&lt;OriansJ&gt;</a></span><span class="message">my mistake of course</span></div><div class="line" id="003954"><span class="nick" style="color:#8dd3c7"><a href="#003954" label="[00:39:54]">&lt;OriansJ&gt;</a></span><span class="message">So essentially FreeBSD respected the segment flags, marked the page as only read/write and when trying to execute; segfaulted</span></div><div class="line" id="004100"><span class="nick" style="color:#8dd3c7"><a href="#004100" label="[00:41:00]">&lt;OriansJ&gt;</a></span><span class="message">we probably should fix the flags comment to ph_flags to better match the ELF standard</span></div><div class="line" id="004428"><span class="nick" style="color:#2e2a4a"><a href="#004428" label="[00:44:28]">&lt;nimaje&gt;</a></span><span class="message">now of course there is a segfault in ./test/test1/proof1 so test/test1/hex.M1 (I think) needs fixing to set right OSABI and ph_flags</span></div><div class="line" id="004459"><span class="nick" style="color:#8dd3c7"><a href="#004459" label="[00:44:59]">&lt;OriansJ&gt;</a></span><span class="message">M1 files never have elf pieces</span></div><div class="line" id="004538"><span class="nick" style="color:#8dd3c7"><a href="#004538" label="[00:45:38]">&lt;OriansJ&gt;</a></span><span class="message">but test/test1/hex0.hex0 might need that fix</span></div><div class="line" id="004611"><span class="nick" style="color:#8dd3c7"><a href="#004611" label="[00:46:11]">&lt;OriansJ&gt;</a></span><span class="message">as the test is: ./test/results/test1-binary &lt; test/test1/hex0.hex0 &gt; test/test1/proof1 and then later ./test/test1/proof1 &lt; test/test1/hex1.hex0 &gt; test/test1/proof2</span></div><div class="line" id="004801"><span class="nick" style="color:#2e2a4a"><a href="#004801" label="[00:48:01]">&lt;nimaje&gt;</a></span><span class="message">oh, yes there is also the inputfile, I should have writen test/test1/hex.M1 or test/test1/hex0.hex0</span></div><div class="line" id="004916"><span class="nick" style="color:#8dd3c7"><a href="#004916" label="[00:49:16]">&lt;OriansJ&gt;</a></span><span class="message">M1 files don't have any of the ELF pieces, because they are a 2 step build; M1 first converts them into hex2 files; then hex2 usually glues them with the elf header and possibly an elf footer into the final binary</span></div><div class="line" id="005052"><span class="nick" style="color:#8dd3c7"><a href="#005052" label="[00:50:52]">&lt;OriansJ&gt;</a></span><span class="message">if you notice blood-elf generates the majority of the ELF data for files but requires one to use the debug elf headers</span></div><div class="line" id="005158"><span class="nick" style="color:#8dd3c7"><a href="#005158" label="[00:51:58]">&lt;OriansJ&gt;</a></span><span class="message">That is how M2-Planet binaries work with objdump -d</span></div><div class="line" id="010507"><span class="nick" style="color:#8dd3c7"><a href="#010507" label="[01:05:07]">&lt;OriansJ&gt;</a></span><span class="message">The good news is those 2 changes do not break the behavior on amd64 linux (i'll be checking arm shortly)</span></div><div class="line" id="011035"><span class="nick" style="color:#8dd3c7"><a href="#011035" label="[01:10:35]">&lt;OriansJ&gt;</a></span><span class="message">assuming everything passes, we probably want to mirror these updates in M2-Planet to ensure the binaries it produces work on FreeBSD too</span></div><div class="line" id="011348"><span class="nick" style="color:#8dd3c7"><a href="#011348" label="[01:13:48]">&lt;OriansJ&gt;</a></span><span class="message">and ARM passes as well; thank you nimaje for helping make mescc-tools more standards compliant</span></div><div class="line" id="011750"><span class="nick" style="color:#8dd3c7"><a href="#011750" label="[01:17:50]">&lt;OriansJ&gt;</a></span><span class="message">and patches are up</span></div><div class="line" id="011904"><span class="nick" style="color:#2e2a4a"><a href="#011904" label="[01:19:04]">&lt;nimaje&gt;</a></span><span class="message">I like stuff that works correctly</span></div><div class="line" id="012043"><span class="nick" style="color:#8dd3c7"><a href="#012043" label="[01:20:43]">&lt;OriansJ&gt;</a></span><span class="message">me too nimaje but it is hard to fix bugs I don't know about or lack a system expressing those bugs</span></div><div class="line" id="012059"><span class="nick" style="color:#8dd3c7"><a href="#012059" label="[01:20:59]">&lt;OriansJ&gt;</a></span><span class="message">hence why I love bug reports</span></div><div class="line" id="012113"><span class="nick" style="color:#8dd3c7"><a href="#012113" label="[01:21:13]">&lt;OriansJ&gt;</a></span><span class="message">It gives me something easy to fix usually</span></div><div class="line" id="012131"><span class="nick" style="color:#8dd3c7"><a href="#012131" label="[01:21:31]">&lt;OriansJ&gt;</a></span><span class="message">and please verify the latest commit works for you nimaje</span></div><div class="line" id="012402"><span class="nick" style="color:#2e2a4a"><a href="#012402" label="[01:24:02]">&lt;nimaje&gt;</a></span><span class="message">you missed OSABI in test/test1/hex0.hex0, not sure if more tests build another binary via their testbinary</span></div><div class="line" id="012505"><span class="nick" style="color:#2e2a4a"><a href="#012505" label="[01:25:05]">&lt;nimaje&gt;</a></span><span class="message">a quick grep suggests test1 test2 and test7</span></div><div class="line" id="012526"><span class="nick" style="color:#8dd3c7"><a href="#012526" label="[01:25:26]">&lt;OriansJ&gt;</a></span><span class="message">easy to know as all elf headers must start with: 7F 45 4C 46</span></div><div class="line" id="012748"><span class="nick" style="color:#2e2a4a"><a href="#012748" label="[01:27:48]">&lt;nimaje&gt;</a></span><span class="message">test/test7/hex1.hex1 also has flags as 6 which probably also should be a 7</span></div><div class="line" id="013037"><span class="nick" style="color:#8dd3c7"><a href="#013037" label="[01:30:37]">&lt;OriansJ&gt;</a></span><span class="message">fixing that now</span></div><div class="line" id="013506"><span class="nick" style="color:#8dd3c7"><a href="#013506" label="[01:35:06]">&lt;OriansJ&gt;</a></span><span class="message">ok and patches are up</span></div><div class="line" id="013621"><span class="nick" style="color:#8dd3c7"><a href="#013621" label="[01:36:21]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: please double check everything works now</span></div><div class="line" id="013812"><span class="nick" style="color:#2e2a4a"><a href="#013812" label="[01:38:12]">&lt;nimaje&gt;</a></span><span class="message">tests run fine and print ok for everything</span></div><div class="line" id="013928"><span class="nick" style="color:#8dd3c7"><a href="#013928" label="[01:39:28]">&lt;OriansJ&gt;</a></span><span class="message">good, so we finally got mescc-tools into a happy state for FreeBSD</span></div><div class="line" id="013942"><span class="nick" style="color:#8dd3c7"><a href="#013942" label="[01:39:42]">&lt;OriansJ&gt;</a></span><span class="message">up next M2-Planet (this should be much faster)</span></div><div class="line" id="015308"><span class="nick" style="color:#2e2a4a"><a href="#015308" label="[01:53:08]">&lt;nimaje&gt;</a></span><span class="message">well, install in mescc-tools fails to build kaem with a linker error:   kaem.c:288: undefined reference to `get_current_dir_name'</span></div><div class="line" id="015955"><span class="nick" style="color:#8dd3c7"><a href="#015955" label="[01:59:55]">&lt;OriansJ&gt;</a></span><span class="message">ok, that is easy to fix as that is char *getwd(char *buf); without having to pass the buffer</span></div><div class="line" id="020910"><span class="nick" style="color:#8dd3c7"><a href="#020910" label="[02:09:10]">&lt;OriansJ&gt;</a></span><span class="message">excuse me as I have to put my son to bed (I'll be back *shortly*)</span></div><div class="line" id="021307"><span class="nick" style="color:#2e2a4a"><a href="#021307" label="[02:13:07]">&lt;nimaje&gt;</a></span><span class="message">(well, I probably should have gone to bed some time ago)</span></div><div class="line" id="022107"><span class="nick" style="color:#8dd3c7"><a href="#022107" label="[02:21:07]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: we can always pick this up tomorrow</span></div><div class="line" id="022315"><span class="nick" style="color:#2e2a4a"><a href="#022315" label="[02:23:15]">&lt;nimaje&gt;</a></span><span class="message">yeah, good night</span></div><div class="line" id="022530"><span class="nick" style="color:#8dd3c7"><a href="#022530" label="[02:25:30]">&lt;OriansJ&gt;</a></span><span class="message">in the morning, let me know if this fixes your kaem build: <a rel="nofollow" href="https://paste.debian.net/1167365/">https://paste.debian.net/1167365/</a> </span></div><div class="line" id="025522"><span class="nick" style="color:#8dd3c7"><a href="#025522" label="[02:55:22]">&lt;OriansJ&gt;</a></span><span class="message">I think I found a bug in M2-Planet</span></div><div class="line" id="025810"><span class="nick" style="color:#8dd3c7"><a href="#025810" label="[02:58:10]">&lt;OriansJ&gt;</a></span><span class="message">well atleast the right shift behavior is different than x86's (and GCC's)</span></div><div class="line" id="025958"><span class="nick" style="color:#8dd3c7"><a href="#025958" label="[02:59:58]">&lt;OriansJ&gt;</a></span><span class="message">right shifting 0xfffffffffffffffc became 0x3fffffffffffffff; were as on x86 (and in GCC) 0xfffffffc became 0xffffffff</span></div><div class="line" id="030054"><span class="nick" style="color:#8dd3c7"><a href="#030054" label="[03:00:54]">&lt;OriansJ&gt;</a></span><span class="message">So I think I used the wrong M1 definition for right shift for AMD64 (probably should double check armv7l and aarch64) deesix up for helping?</span></div><div class="line" id="033607"><span class="nick" style="color:#8dd3c7"><a href="#033607" label="[03:36:07]">&lt;OriansJ&gt;</a></span><span class="message">oh my; &gt;&gt; and &lt;&lt; has different behavior depending on if the result is signed or unsigned</span></div><div class="line" id="033811"><span class="nick" style="color:#8dd3c7"><a href="#033811" label="[03:38:11]">&lt;OriansJ&gt;</a></span><span class="message">tomorrow is going to be fun !</span></div><div class="line" id="050712"><span class="nick" style="color:#6b8072"><a href="#050712" label="[05:07:12]">&lt;xentrac&gt;</a></span><span class="message">mostly just &gt;&gt;</span></div><div class="line" id="050738"><span class="nick" style="color:#6b8072"><a href="#050738" label="[05:07:38]">&lt;xentrac&gt;</a></span><span class="message">I mean &lt;&lt; can overflow which is I think undefined behavior for signed?</span></div><div class="line" id="050803"><span class="nick" style="color:#6b8072"><a href="#050803" label="[05:08:03]">&lt;xentrac&gt;</a></span><span class="message">Java and JS use &gt;&gt;&gt; for C's unsigned &gt;&gt;</span></div><div class="line" id="090421"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado</span></div><div class="line" id="094756"><span class="nick" style="color:#2e2a4a"><a href="#094756" label="[09:47:56]">&lt;nimaje&gt;</a></span><span class="message">yes, that patch fixes the kaem build</span></div><div class="line" id="094804"><span class="nick" style="color:#2e2a4a"><a href="#094804" label="[09:48:04]">&lt;nimaje&gt;</a></span><span class="message">good morning</span></div><div class="line" id="095817"><span class="nick" style="color:#2e2a4a"><a href="#095817" label="[09:58:17]">&lt;nimaje&gt;</a></span><span class="message">for M2-Planet sha256.sh needs fixing (doing the same as in mescc-tools should be fine) and these test/common_*/ELF-*.hex2 files set OSABI to 0 should probably be 3</span></div><div class="line" id="100150"><span class="nick" style="color:#2e2a4a"><a href="#100150" label="[10:01:50]">&lt;nimaje&gt;</a></span><span class="message">and test/results/test0008-amd64-binary segfaults lldb says  SIGSEGV: invalid address (fault address: 0xf)  -&gt;  0x600210: movq   %rax, (%rbx)</span></div><div class="line" id="113813"><span class="nick" style="color:#2e2a4a"><a href="#113813" label="[11:38:13]">&lt;nimaje&gt;</a></span><span class="message">ok, stepping through test/results/test0008-amd64-binary it seems like the second malloc fails in test/test0008/struct.c for some reason</span></div><div class="line" id="115526"><span class="nick" style="color:#2e2a4a"><a href="#115526" label="[11:55:26]">&lt;nimaje&gt;</a></span><span class="message">did I understand right that   -&gt;  0x600111: movq   $-0x1, %rax   should only happen if malloc() thinks it failed? (seems like that instruction is line 38 in test/common_amd64/functions/malloc.c)</span></div><div class="line" id="174914"><span class="nick" style="color:#8dd3c7"><a href="#174914" label="[17:49:14]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: I am glad that the patch works for FreeBSD, now I can close out the mescc-tools work once the patch is up</span></div><div class="line" id="175057"><span class="nick" style="color:#8dd3c7"><a href="#175057" label="[17:50:57]">&lt;OriansJ&gt;</a></span><span class="message">and patch is up; now to figure out the M2-Planet problems</span></div><div class="line" id="180238"><span class="nick" style="color:#2e2a4a"><a href="#180238" label="[18:02:38]">&lt;nimaje&gt;</a></span><span class="message">fixing sha256.sh makes the test pass when not running the binaries, fixing test/common_amd64/ELF-amd64.hex2 to set OSABI to 3 gives that segfault, but no idea what the problem is</span></div><div class="line" id="180304"><span class="nick" style="color:#8dd3c7"><a href="#180304" label="[18:03:04]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: I'm looking into test008 now</span></div><div class="line" id="180426"><span class="nick" style="color:#8dd3c7"><a href="#180426" label="[18:04:26]">&lt;OriansJ&gt;</a></span><span class="message">and a rough patch is up for the ELF headers and sha256.sh being fixed</span></div><div class="line" id="181049"><span class="nick" style="color:#2e2a4a"><a href="#181049" label="[18:10:49]">&lt;nimaje&gt;</a></span><span class="message">ok make test without running the binaries passes here</span></div><div class="line" id="184227"><span class="nick" style="color:#8dd3c7"><a href="#184227" label="[18:42:27]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: could you use lldb to break FUNCTION_malloc and see what FreeBSD returns on the second call?</span></div><div class="line" id="184458"><span class="nick" style="color:#8dd3c7"><a href="#184458" label="[18:44:58]">&lt;OriansJ&gt;</a></span><span class="message">as it does a syscall with the value zero (to get the current malloc pointer) and then with the amount desired + the returned malloc pointer and only should return an error if it returns a malloc pointer we didn't expect</span></div><div class="line" id="185550"><span class="nick" style="color:#2e2a4a"><a href="#185550" label="[18:55:50]">&lt;nimaje&gt;</a></span><span class="message">well, I got the syscall results via truss <a rel="nofollow" href="https://0x0.st/iD-d.txt">https://0x0.st/iD-d.txt</a>  trying to set a breakpoint only gives me WARNING:  Unable to resolve breakpoint to any actual locations.</span></div><div class="line" id="190541"><span class="nick" style="color:#8dd3c7"><a href="#190541" label="[19:05:41]">&lt;OriansJ&gt;</a></span><span class="message">odd nimaje as M2-Planet does create symbols for all labels; so break points for the entry to the function certainly should be possible</span></div><div class="line" id="190712"><span class="nick" style="color:#2e2a4a"><a href="#190712" label="[19:07:12]">&lt;nimaje&gt;</a></span><span class="message">readelf --syms test/results/test0008-amd64-binary  has empty output</span></div><div class="line" id="190724"><span class="nick" style="color:#8dd3c7"><a href="#190724" label="[19:07:24]">&lt;OriansJ&gt;</a></span><span class="message">oh wait, test0008 is pre-blood-elf</span></div><div class="line" id="190913"><span class="nick" style="color:#8dd3c7"><a href="#190913" label="[19:09:13]">&lt;OriansJ&gt;</a></span><span class="message">0x6000DB would be the breakpoint target</span></div><div class="line" id="191100"><span class="nick" style="color:#8dd3c7"><a href="#191100" label="[19:11:00]">&lt;OriansJ&gt;</a></span><span class="message">I'll get the linux returns shortly</span></div><div class="line" id="191350"><span class="nick" style="color:#8dd3c7"><a href="#191350" label="[19:13:50]">&lt;OriansJ&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1167485/">https://paste.debian.net/1167485/</a> </span></div><div class="line" id="191515"><span class="nick" style="color:#8dd3c7"><a href="#191515" label="[19:15:15]">&lt;OriansJ&gt;</a></span><span class="message">after the syscall, the result in rax is compared against the expected value (which on FreeBSD should have resulted in return -1) and probably did</span></div><div class="line" id="191550"><span class="nick" style="color:#8dd3c7"><a href="#191550" label="[19:15:50]">&lt;OriansJ&gt;</a></span><span class="message">but because the -1 value wasn't used until after the second malloc; that the error occured</span></div><div class="line" id="191811"><span class="nick" style="color:#8dd3c7"><a href="#191811" label="[19:18:11]">&lt;OriansJ&gt;</a></span><span class="message">as FreeBSD was returning a full page instead of the 32bytes that the syscall requested</span></div><div class="line" id="192010"><span class="nick" style="color:#8dd3c7"><a href="#192010" label="[19:20:10]">&lt;OriansJ&gt;</a></span><span class="message">I guess we need a C language lawyer to indicate is M2-Planet violating POSIX or is FreeBSD's rounding up to the page size valid</span></div><div class="line" id="192023"><span class="nick" style="color:#2e2a4a"><a href="#192023" label="[19:20:23]">&lt;nimaje&gt;</a></span><span class="message">(well, the kernel can only give a process memory in multiples of a page)</span></div><div class="line" id="192044"><span class="nick" style="color:#8dd3c7"><a href="#192044" label="[19:20:44]">&lt;OriansJ&gt;</a></span><span class="message">true</span></div><div class="line" id="192200"><span class="nick" style="color:#2e2a4a"><a href="#192200" label="[19:22:00]">&lt;nimaje&gt;</a></span><span class="message">afaik, posix doesn't define the syscall, only the library functions</span></div><div class="line" id="192418"><span class="nick" style="color:#8dd3c7"><a href="#192418" label="[19:24:18]">&lt;OriansJ&gt;</a></span><span class="message">well first MALLOC should be returning ZERO on error (first mistake of mine)</span></div><div class="line" id="192755"><span class="nick" style="color:#8dd3c7"><a href="#192755" label="[19:27:55]">&lt;OriansJ&gt;</a></span><span class="message">hmm brk was removed in POSIX.1-2001</span></div><div class="line" id="193010"><span class="nick" style="color:#8dd3c7"><a href="#193010" label="[19:30:10]">&lt;OriansJ&gt;</a></span><span class="message"> <a rel="nofollow" href="https://www.man7.org/linux/man-pages/man2/sbrk.2.html">https://www.man7.org/linux/man-pages/man2/sbrk.2.html</a> </span></div><div class="line" id="193139"><span class="nick" style="color:#6b8072"><a href="#193139" label="[19:31:39]">&lt;xentrac&gt;</a></span><span class="message">oh interesting</span></div><div class="line" id="193303"><span class="nick" style="color:#2e2a4a"><a href="#193303" label="[19:33:03]">&lt;nimaje&gt;</a></span><span class="message">ok, stepping through that malloc both times it hits  -&gt;  0x600111: movq   $-0x1, %rax  (so it returns -1?)</span></div><div class="line" id="193308"><span class="nick" style="color:#8dd3c7"><a href="#193308" label="[19:33:08]">&lt;OriansJ&gt;</a></span><span class="message">So one possible fix would only return NULL if the return value is less than the expected value (It'll waste a page for every malloc on FreeBSD)</span></div><div class="line" id="193404"><span class="nick" style="color:#8dd3c7"><a href="#193404" label="[19:34:04]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: yep both mallocs returned -1 on FreeBSD because the sbrk returned a full page rather than just the 32bytes expected</span></div><div class="line" id="194933"><span class="nick" style="color:#8dd3c7"><a href="#194933" label="[19:49:33]">&lt;OriansJ&gt;</a></span><span class="message">although that would significantly limit the number of mallocs allowed on FreeBSD</span></div><div class="line" id="195342"><span class="nick" style="color:#2e2a4a"><a href="#195342" label="[19:53:42]">&lt;nimaje&gt;</a></span><span class="message">well, would that malloc be used anywere other than the tests? I don't think wasting a little bit of memory is an issue if it is only for those tests</span></div><div class="line" id="195400"><span class="nick" style="color:#2e2a4a"><a href="#195400" label="[19:54:00]">&lt;nimaje&gt;</a></span><span class="message">or is there one doing many mallocs?</span></div><div class="line" id="195450"><span class="nick" style="color:#8dd3c7"><a href="#195450" label="[19:54:50]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: well the malloc.c files are the standard mallocs used by M2-Planet binaries</span></div><div class="line" id="195526"><span class="nick" style="color:#8dd3c7"><a href="#195526" label="[19:55:26]">&lt;OriansJ&gt;</a></span><span class="message">but it could seperate the sbrk inline assembly from the malloc workings</span></div><div class="line" id="195742"><span class="nick" style="color:#8dd3c7"><a href="#195742" label="[19:57:42]">&lt;OriansJ&gt;</a></span><span class="message">which would reduce the number of syscalls to the kernel and just require 2 globals in malloc.c for the tracking of the current brk pointer and the current sbrk pointer</span></div><div class="line" id="213034"><span class="nick" style="color:#8dd3c7"><a href="#213034" label="[21:30:34]">&lt;OriansJ&gt;</a></span><span class="message">So there may be some code duplication but I should have this ready for testing in a little bit (it is still ugly)</span></div><div class="line" id="213644"><span class="nick" style="color:#8dd3c7"><a href="#213644" label="[21:36:44]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: please check if this will get malloc working on FreeBSD <a rel="nofollow" href="https://paste.debian.net/1167503/">https://paste.debian.net/1167503/</a> </span></div><div class="line" id="213852"><span class="nick" style="color:#8dd3c7"><a href="#213852" label="[21:38:52]">&lt;OriansJ&gt;</a></span><span class="message">the brk function will be located at 0x6000DB and if everything is correct; it should be hit exactly twice on FreeBSD (once with 0) and the second time with (what FreeBSD returns +32) then when it gets the full page, it'll just allocate out of it until it is used up</span></div><div class="line" id="215127"><span class="nick" style="color:#8dd3c7"><a href="#215127" label="[21:51:27]">&lt;OriansJ&gt;</a></span><span class="message">(The AMD64 checksums are expected to fail; despite the tests passing)</span></div><div class="line" id="215535"><span class="nick" style="color:#8dd3c7"><a href="#215535" label="[21:55:35]">&lt;OriansJ&gt;</a></span><span class="message">anyone have questions, comments or concerns?</span></div><div class="line" id="215726"><span class="nick" style="color:#2e2a4a"><a href="#215726" label="[21:57:26]">&lt;nimaje&gt;</a></span><span class="message">yes, test0008 passes now</span></div><div class="line" id="215956"><span class="nick" style="color:#2e2a4a"><a href="#215956" label="[21:59:56]">&lt;nimaje&gt;</a></span><span class="message">next failing is test0106, it doesn't set the right OSABI when compiling ./test/test0106/cc1</span></div><div class="line" id="220056"><span class="nick" style="color:#2e2a4a"><a href="#220056" label="[22:00:56]">&lt;nimaje&gt;</a></span><span class="message">ah and yes with that patch it does make exactly two brk syscalls</span></div><div class="line" id="221527"><span class="nick" style="color:#8dd3c7"><a href="#221527" label="[22:15:27]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: I'll get to fixing that right now</span></div><div class="line" id="221734"><span class="nick" style="color:#2e2a4a"><a href="#221734" label="[22:17:34]">&lt;nimaje&gt;</a></span><span class="message">and after fixing OSABI in be_start() it segfaults, so probably also missing execute in ph_flags</span></div><div class="line" id="221825"><span class="nick" style="color:#8dd3c7"><a href="#221825" label="[22:18:25]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: well building cc500.c and having it successfully self-build is the test</span></div><div class="line" id="221858"><span class="nick" style="color:#8dd3c7"><a href="#221858" label="[22:18:58]">&lt;OriansJ&gt;</a></span><span class="message">and it appears cc500 also would have the same malloc problem as well</span></div><div class="line" id="222118"><span class="nick" style="color:#8dd3c7"><a href="#222118" label="[22:21:18]">&lt;OriansJ&gt;</a></span><span class="message">as test/test0106/cc500.c uses void be_start() to hand encode in hex the elf header and several primitives</span></div><div class="line" id="222200"><span class="nick" style="color:#8dd3c7"><a href="#222200" label="[22:22:00]">&lt;OriansJ&gt;</a></span><span class="message">but that test could be disabled on everything not Linux without harm</span></div><div class="line" id="222225"><span class="nick" style="color:#2e2a4a"><a href="#222225" label="[22:22:25]">&lt;nimaje&gt;</a></span><span class="message">that sounds like fun to correct</span></div><div class="line" id="222308"><span class="nick" style="color:#8dd3c7"><a href="#222308" label="[22:23:08]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: I look forward to your patch ^_^</span></div><div class="line" id="222532"><span class="nick" style="color:#8dd3c7"><a href="#222532" label="[22:25:32]">&lt;OriansJ&gt;</a></span><span class="message">I'll fix the rest of the architectures' malloc while you work on that detail</span></div><div class="line" id="222619"><span class="nick" style="color:#8dd3c7"><a href="#222619" label="[22:26:19]">&lt;OriansJ&gt;</a></span><span class="message">(this will certainly show up when we hit mescc-tools-seed but memory inefficiency is less of a problem there)</span></div><div class="line" id="222714"><span class="nick" style="color:#80b1d3"><a href="#222714" label="[22:27:14]">&lt;fossy&gt;</a></span><span class="message">whats the problem for mescc-tools-seed with this impl</span></div><div class="line" id="222715"><span class="nick" style="color:#80b1d3"><a href="#222715" label="[22:27:15]">&lt;fossy&gt;</a></span><span class="message">?</span></div><div class="line" id="223042"><span class="nick" style="color:#8dd3c7"><a href="#223042" label="[22:30:42]">&lt;OriansJ&gt;</a></span><span class="message">fossy: if you look at the malloc in hex2 and M0; it shares the same definition as M2-Planet</span></div><div class="line" id="223050"><span class="nick" style="color:#2e2a4a"><a href="#223050" label="[22:30:50]">&lt;nimaje&gt;</a></span><span class="message">well, for that test it shouldn't matter if a little bit memory is wasted, so changing that je to jge or jle should be ok</span></div><div class="line" id="223105"><span class="nick" style="color:#8dd3c7"><a href="#223105" label="[22:31:05]">&lt;OriansJ&gt;</a></span><span class="message">so it'll have the same error on FreeBSD (we also have OSABI set to 0)</span></div><div class="line" id="223120"><span class="nick" style="color:#80b1d3"><a href="#223120" label="[22:31:20]">&lt;fossy&gt;</a></span><span class="message">oh right</span></div><div class="line" id="223158"><span class="nick" style="color:#8dd3c7"><a href="#223158" label="[22:31:58]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: mescc-tools-seed doesn't technically have a test because it is a single one stop bootstrap from hex0 to M2-Planet+mes-m2</span></div><div class="line" id="223223"><span class="nick" style="color:#8dd3c7"><a href="#223223" label="[22:32:23]">&lt;OriansJ&gt;</a></span><span class="message">but wasting memory for building a 64KB binary shouldn't be too excessive</span></div><div class="line" id="223257"><span class="nick" style="color:#8dd3c7"><a href="#223257" label="[22:32:57]">&lt;OriansJ&gt;</a></span><span class="message">incase you are not familiar: <a rel="nofollow" href="https://github.com/oriansj/mescc-tools-seed">https://github.com/oriansj/mescc-tools-seed</a> </span></div><div class="line" id="223316"><span class="nick" style="color:#2e2a4a"><a href="#223316" label="[22:33:16]">&lt;nimaje&gt;</a></span><span class="message">so only counting bytes to find ph_flags in that huge unannotated block</span></div><div class="line" id="223336"><span class="nick" style="color:#8dd3c7"><a href="#223336" label="[22:33:36]">&lt;OriansJ&gt;</a></span><span class="message">it uses a hand written kaem (737bytes of hex0) and a hand written hex0 to build EVERYTHING</span></div><div class="line" id="223424"><span class="nick" style="color:#8dd3c7"><a href="#223424" label="[22:34:24]">&lt;OriansJ&gt;</a></span><span class="message">deesix: I might be breaking aarch64; could you double check I didn't do anything too stupid?</span></div><div class="line" id="223547"><span class="nick" style="color:#8dd3c7"><a href="#223547" label="[22:35:47]">&lt;OriansJ&gt;</a></span><span class="message">deesix: <a rel="nofollow" href="https://paste.debian.net/1167513/">https://paste.debian.net/1167513/</a> </span></div><div class="line" id="225748"><span class="nick" style="color:#8dd3c7"><a href="#225748" label="[22:57:48]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: hand counting bytes is something I had my fill of when I did hex0 andhex1 (hex2 reduces it considerably but still is required) and I am glad M0 only required me to do a lookup table for bytes</span></div><div class="line" id="225848"><span class="nick" style="color:#8dd3c7"><a href="#225848" label="[22:58:48]">&lt;OriansJ&gt;</a></span><span class="message">atleast armv7l I know is working: <a rel="nofollow" href="https://paste.debian.net/1167514/">https://paste.debian.net/1167514/</a> </span></div><div class="line" id="230512"><span class="nick" style="color:#2e2a4a"><a href="#230512" label="[23:05:12]">&lt;nimaje&gt;</a></span><span class="message">ok, only OSABI and malloc were wrong <a rel="nofollow" href="https://0x0.st/iDHy.diff">https://0x0.st/iDHy.diff</a>  as it runs with that and cc1 and cc2 are equal that jle should be right; ph_flags is already 7 (should I have added a /s to the fun line?)</span></div><div class="line" id="230648"><span class="nick" style="color:#8dd3c7"><a href="#230648" label="[23:06:48]">&lt;OriansJ&gt;</a></span><span class="message">nice</span></div><div class="line" id="230844"><span class="nick" style="color:#2e2a4a"><a href="#230844" label="[23:08:44]">&lt;nimaje&gt;</a></span><span class="message">no idea why it segfaulted lldb when I tried to step through it (that's why I assumed ph_flags are wrong)</span></div><div class="line" id="230941"><span class="nick" style="color:#8dd3c7"><a href="#230941" label="[23:09:41]">&lt;OriansJ&gt;</a></span><span class="message">well cc500.c is very very touchy</span></div><div class="line" id="231005"><span class="nick" style="color:#8dd3c7"><a href="#231005" label="[23:10:05]">&lt;OriansJ&gt;</a></span><span class="message">even the slightest detail off and it breaks hard and not in the spot you would expect</span></div><div class="line" id="231116"><span class="nick" style="color:#8dd3c7"><a href="#231116" label="[23:11:16]">&lt;OriansJ&gt;</a></span><span class="message">and it uses arrays in very unusual ways that are very sensitive to change (hence why I made it an M2-Planet test to ensure arrays were rock solid)</span></div><div class="line" id="231351"><span class="nick" style="color:#8dd3c7"><a href="#231351" label="[23:13:51]">&lt;OriansJ&gt;</a></span><span class="message">I'll have your patch integrated once I get the malloc changes in place and then merge it all into a lovely commit</span></div><div class="line" id="231953"><span class="nick" style="color:#8dd3c7"><a href="#231953" label="[23:19:53]">&lt;OriansJ&gt;</a></span><span class="message">only knight architecture will not be updated (because knight doesn't require brk or sbrk at all)</span></div><div class="line" id="232139"><span class="nick" style="color:#8dd3c7"><a href="#232139" label="[23:21:39]">&lt;OriansJ&gt;</a></span><span class="message">note to self: I really need to speed up M1 and hex2 (as they are now a major part of M2-Planet's test time)</span></div><div class="line" id="232247"><span class="nick" style="color:#8dd3c7"><a href="#232247" label="[23:22:47]">&lt;OriansJ&gt;</a></span><span class="message">calling fgetc a bunch probably isn't very efficient</span></div><div class="line" id="232405"><span class="nick" style="color:#8dd3c7"><a href="#232405" label="[23:24:05]">&lt;OriansJ&gt;</a></span><span class="message">especially since fossy helped me get fseek and ftell working</span></div><div class="line" id="232727"><span class="nick" style="color:#8dd3c7"><a href="#232727" label="[23:27:27]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: patch is up; please verify all tests pass and the checksums match</span></div><div class="line" id="232959"><span class="nick" style="color:#8dd3c7"><a href="#232959" label="[23:29:59]">&lt;OriansJ&gt;</a></span><span class="message">I just validated x86, AMD64, knight-native, knight-posix and armv7l (I need deesix to verify aarch64) for Linux as all working and correct</span></div><div class="line" id="233343"><span class="nick" style="color:#2e2a4a"><a href="#233343" label="[23:33:43]">&lt;nimaje&gt;</a></span><span class="message">yes, tests work here and the checksums match</span></div><div class="line" id="233420"><span class="nick" style="color:#8dd3c7"><a href="#233420" label="[23:34:20]">&lt;OriansJ&gt;</a></span><span class="message">excellent nimaje</span></div><div class="line" id="233438"><span class="nick" style="color:#8dd3c7"><a href="#233438" label="[23:34:38]">&lt;OriansJ&gt;</a></span><span class="message">now comes lots of binary fun: mescc-tools-seed</span></div><div class="line" id="233513"><span class="nick" style="color:#8dd3c7"><a href="#233513" label="[23:35:13]">&lt;OriansJ&gt;</a></span><span class="message">although <a rel="nofollow" href="https://github.com/oriansj/bootstrap-seeds">https://github.com/oriansj/bootstrap-seeds</a>  needs to be done first (as they are the first binaries that are wrong)</span></div><div class="line" id="234332"><span class="nick" style="color:#8dd3c7"><a href="#234332" label="[23:43:32]">&lt;OriansJ&gt;</a></span><span class="message">hex0 can be approximated with: sed 's/[;#].*$//g' $input_file | xxd -r -p &gt; $output_file</span></div><div class="line" id="234826"><span class="nick" style="color:#2e2a4a"><a href="#234826" label="[23:48:26]">&lt;nimaje&gt;</a></span><span class="message">that malloc in kaem-optional-seed.hex0 seems ok</span></div><br /></div></body></html>