<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-10-15.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="003837"><span class="nick" style="color:#8dd3c7"><a href="#003837" label="[00:38:37]">&lt;OriansJ&gt;</a></span><span class="message">rekado: as in it never gets past python-minimal@3.7.4</span></div><div class="line" id="003927"><span class="nick" style="color:#8dd3c7"><a href="#003927" label="[00:39:27]">&lt;OriansJ&gt;</a></span><span class="message">which appears to be required for guix pull to complete successfully</span></div><div class="line" id="004011"><span class="nick" style="color:#8dd3c7"><a href="#004011" label="[00:40:11]">&lt;OriansJ&gt;</a></span><span class="message">I posted about it on #guix with a paste.debian link</span></div><div class="line" id="004302"><span class="nick" style="color:#8dd3c7"><a href="#004302" label="[00:43:02]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: yes, that is currently the only process known to enable an encrypted /boot on debian</span></div><div class="line" id="004436"><span class="nick" style="color:#2e2a4a"><a href="#004436" label="[00:44:36]">&lt;xentrac&gt;</a></span><span class="message">:(</span></div><div class="line" id="004546"><span class="nick" style="color:#8dd3c7"><a href="#004546" label="[00:45:46]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: I provide exact steps, so that others can help me fix problems</span></div><div class="line" id="004707"><span class="nick" style="color:#8dd3c7"><a href="#004707" label="[00:47:07]">&lt;OriansJ&gt;</a></span><span class="message">It is impossible for me to know how to fix everything myself but it is always possible for me to share exactly the method used which resulted in me arriving at that state, so that others who know differently can fix what they previously didn't know about.</span></div><div class="line" id="005441"><span class="nick" style="color:#8dd3c7"><a href="#005441" label="[00:54:41]">&lt;OriansJ&gt;</a></span><span class="message">The big problem is it can take more than 48 hours just to do guix pull and then see it fail</span></div><div class="line" id="005728"><span class="nick" style="color:#8dd3c7"><a href="#005728" label="[00:57:28]">&lt;OriansJ&gt;</a></span><span class="message">and it appears that guix developers generally depend upon substitutes to a degree that they never notice these build issues; until after I report them &quot;like a whiny bitch&quot; (direct quote from IRC)</span></div><div class="line" id="011124"><span class="nick" style="color:#8dd3c7"><a href="#011124" label="[01:11:24]">&lt;OriansJ&gt;</a></span><span class="message">What is the point of guix challenge if one can't even get the source code needed to challenge the binaries being shipped?</span></div><div class="line" id="011249"><span class="nick" style="color:#8dd3c7"><a href="#011249" label="[01:12:49]">&lt;OriansJ&gt;</a></span><span class="message">after 36 hours of dedicated VPS time, I've only managed to get 17.8GB of 85GB of source tarballs</span></div><div class="line" id="023149"><span class="nick" style="color:#8dd3c7"><a href="#023149" label="[02:31:49]">&lt;OriansJ&gt;</a></span><span class="message">although it appears that I am only 30% done with all of the links; so we might get to 60GB if the average holds or about a 71% successful for valid links (and then we can check the validity of the checksums when this is all done)</span></div><div class="line" id="023229"><span class="nick" style="color:#8dd3c7"><a href="#023229" label="[02:32:29]">&lt;OriansJ&gt;</a></span><span class="message">[These server timeouts are really slowing wget down]</span></div><div class="line" id="023430"><span class="nick" style="color:#8dd3c7"><a href="#023430" label="[02:34:30]">&lt;OriansJ&gt;</a></span><span class="message">I'm just going to add --timeout=30 to cut that down</span></div><div class="line" id="082815"><span class="nick" style="color:#6b8072"><a href="#082815" label="[08:28:15]">&lt;rekado_&gt;</a></span><span class="message">OriansJ: I cannot find the direct quote in the IRC logs</span></div><div class="line" id="082851"><span class="nick" style="color:#6b8072"><a href="#082851" label="[08:28:51]">&lt;rekado_&gt;</a></span><span class="message">upstream source tarballs do disappear, and that is why we cache them all on ci.guix.gnu.org</span></div><div class="line" id="082900"><span class="nick" style="color:#6b8072"><a href="#082900" label="[08:29:00]">&lt;rekado_&gt;</a></span><span class="message">that’s part of the substitution mechanism</span></div><div class="line" id="082928"><span class="nick" style="color:#6b8072"><a href="#082928" label="[08:29:28]">&lt;rekado_&gt;</a></span><span class="message">that sources.json thing is pretty new and I’ve never used it.  It’s likely buggy.</span></div><div class="line" id="104008"><span class="nick" style="color:#8dd3c7"><a href="#104008" label="[10:40:08]">&lt;OriansJ&gt;</a></span><span class="message">rekado_: I am glad that all of the upstream tarballs are being cached at ci.guix.gnu.org but the substitution mechanism doesn't work if one doesn't have binary substitutes enabled.</span></div><div class="line" id="104419"><span class="nick" style="color:#80b1d3"><a href="#104419" label="[10:44:19]">&lt;civodul&gt;</a></span><span class="message">OriansJ: hey! did you see <a rel="nofollow" href="https://issues.guix.gnu.org/28659">https://issues.guix.gnu.org/28659</a>  ?</span></div><div class="line" id="105156"><span class="nick" style="color:#8dd3c7"><a href="#105156" label="[10:51:56]">&lt;OriansJ&gt;</a></span><span class="message">civodul: yes and I noticed you labeled it important on 2 Oct 2017 17:16</span></div><div class="line" id="105427"><span class="nick" style="color:#80b1d3"><a href="#105427" label="[10:54:27]">&lt;civodul&gt;</a></span><span class="message">yes, and it's been important ever since!</span></div><div class="line" id="105450"><span class="nick" style="color:#80b1d3"><a href="#105450" label="[10:54:50]">&lt;civodul&gt;</a></span><span class="message">but you know, just because you rehash things won't lead to a quicker fix</span></div><div class="line" id="105510"><span class="nick" style="color:#80b1d3"><a href="#105510" label="[10:55:10]">&lt;civodul&gt;</a></span><span class="message">it's one issue among many that volunteers have to deal with</span></div><div class="line" id="105707"><span class="nick" style="color:#8dd3c7"><a href="#105707" label="[10:57:07]">&lt;OriansJ&gt;</a></span><span class="message">civodul: very true and I am thankful for everyone's efforts</span></div><div class="line" id="105820"><span class="nick" style="color:#8dd3c7"><a href="#105820" label="[10:58:20]">&lt;OriansJ&gt;</a></span><span class="message">although I wonder if there is a preference to working on &quot;sexy new features&quot; over the boring work of clearing out bugs</span></div><div class="line" id="105921"><span class="nick" style="color:#80b1d3"><a href="#105921" label="[10:59:21]">&lt;civodul&gt;</a></span><span class="message">surely there is, especially as volunteers, but we do clear old boring bugs too</span></div><div class="line" id="105941"><span class="nick" style="color:#8dd3c7"><a href="#105941" label="[10:59:41]">&lt;OriansJ&gt;</a></span><span class="message">indeed</span></div><div class="line" id="110221"><span class="nick" style="color:#8dd3c7"><a href="#110221" label="[11:02:21]">&lt;OriansJ&gt;</a></span><span class="message">although I find the privacy discussion odd; as one can leverage torsocks for the downloading of the source tarballs from a single centralized source while preserving privacy</span></div><div class="line" id="110355"><span class="nick" style="color:#80b1d3"><a href="#110355" label="[11:03:55]">&lt;civodul&gt;</a></span><span class="message">yeah, you'd need to run guix-daemon under torsocks</span></div><div class="line" id="110424"><span class="nick" style="color:#8dd3c7"><a href="#110424" label="[11:04:24]">&lt;OriansJ&gt;</a></span><span class="message">civodul: easy to do though</span></div><div class="line" id="110547"><span class="nick" style="color:#8dd3c7"><a href="#110547" label="[11:05:47]">&lt;OriansJ&gt;</a></span><span class="message">just a single line in: guix-daemon.service; which for people on non-guix systems is trivial. Not sure what shepard would need though</span></div><div class="line" id="110620"><span class="nick" style="color:#80b1d3"><a href="#110620" label="[11:06:20]">&lt;civodul&gt;</a></span><span class="message">torsocks is LD_PRELOAD, i'm not sure how this is robust to fork and all</span></div><div class="line" id="110918"><span class="nick" style="color:#8dd3c7"><a href="#110918" label="[11:09:18]">&lt;OriansJ&gt;</a></span><span class="message">civodul: fair</span></div><div class="line" id="111009"><span class="nick" style="color:#8dd3c7"><a href="#111009" label="[11:10:09]">&lt;OriansJ&gt;</a></span><span class="message">One can also put guix into a container and tunnel all the traffic through tor</span></div><div class="line" id="111017"><span class="nick" style="color:#8dd3c7"><a href="#111017" label="[11:10:17]">&lt;OriansJ&gt;</a></span><span class="message">or a vm</span></div><div class="line" id="111319"><span class="nick" style="color:#8dd3c7"><a href="#111319" label="[11:13:19]">&lt;OriansJ&gt;</a></span><span class="message">And honestly, I find the security implications of not being able to download the source a bigger danger than a centralized server knowing you downloaded a source tarball</span></div><div class="line" id="111639"><span class="nick" style="color:#8dd3c7"><a href="#111639" label="[11:16:39]">&lt;OriansJ&gt;</a></span><span class="message">because we have tor and cheap VPS providers who take prepaid credit cards</span></div><div class="line" id="111841"><span class="nick" style="color:#6d2462"><a href="#111841" label="[11:18:41]">*</a></span><span class="message">civodul nods</span></div><div class="line" id="112029"><span class="nick" style="color:#8dd3c7"><a href="#112029" label="[11:20:29]">&lt;OriansJ&gt;</a></span><span class="message">if it makes the work easier, pull from a guix server first and it'll be fine. we can deal with privacy from the server later as a different class of bug</span></div><div class="line" id="112142"><span class="nick" style="color:#8dd3c7"><a href="#112142" label="[11:21:42]">&lt;OriansJ&gt;</a></span><span class="message">But this behavior we have now is broken for new users; who just downloaded guix and nothing beyound guix --version works</span></div><div class="line" id="112237"><span class="nick" style="color:#80b1d3"><a href="#112237" label="[11:22:37]">&lt;civodul&gt;</a></span><span class="message">right, you made your point</span></div><div class="line" id="112302"><span class="nick" style="color:#8dd3c7"><a href="#112302" label="[11:23:02]">&lt;OriansJ&gt;</a></span><span class="message">thank you for your time civodul</span></div><div class="line" id="113215"><span class="nick" style="color:#8dd3c7"><a href="#113215" label="[11:32:15]">&lt;OriansJ&gt;</a></span><span class="message">oh shit, I just realized how long I have been working on stage0</span></div><div class="line" id="113343"><span class="nick" style="color:#8dd3c7"><a href="#113343" label="[11:33:43]">&lt;OriansJ&gt;</a></span><span class="message">from 2016-05-01 til now;</span></div><div class="line" id="113431"><span class="nick" style="color:#8dd3c7"><a href="#113431" label="[11:34:31]">&lt;OriansJ&gt;</a></span><span class="message">it has been 4+ years of hacking on bootstrapping gcc from nothing</span></div><div class="line" id="113729"><span class="nick" style="color:#8dd3c7"><a href="#113729" label="[11:37:29]">&lt;OriansJ&gt;</a></span><span class="message">and we are stuck at the stage of we have a lisp interpreter we can't bootstrap which can run MesCC and bootstrap GCC and a lisp interpreter we can bootstrap but which can't run MesCC</span></div><div class="line" id="114402"><span class="nick" style="color:#234e69"><a href="#114402" label="[11:44:02]">&lt;rain1&gt;</a></span><span class="message">morning</span></div><div class="line" id="114410"><span class="nick" style="color:#8dd3c7"><a href="#114410" label="[11:44:10]">&lt;OriansJ&gt;</a></span><span class="message">morning rain1</span></div><div class="line" id="114427"><span class="nick" style="color:#234e69"><a href="#114427" label="[11:44:27]">&lt;rain1&gt;</a></span><span class="message">what about making a good short term goal that's within reach?</span></div><div class="line" id="114443"><span class="nick" style="color:#234e69"><a href="#114443" label="[11:44:43]">&lt;rain1&gt;</a></span><span class="message">something we could do as a team in a couple weeks</span></div><div class="line" id="114550"><span class="nick" style="color:#8dd3c7"><a href="#114550" label="[11:45:50]">&lt;OriansJ&gt;</a></span><span class="message">rain1: well that is a hard one; most things could be solved in a day by someone who knows what they are doing</span></div><div class="line" id="114621"><span class="nick" style="color:#234e69"><a href="#114621" label="[11:46:21]">&lt;rain1&gt;</a></span><span class="message">maybe it would be better to have information that would help onboard people then?</span></div><div class="line" id="114638"><span class="nick" style="color:#8dd3c7"><a href="#114638" label="[11:46:38]">&lt;OriansJ&gt;</a></span><span class="message">the problem is getting that full day of developer time from a developer who actually is familiar with the code base as basically everything here is virtuall solo work</span></div><div class="line" id="114703"><span class="nick" style="color:#8dd3c7"><a href="#114703" label="[11:47:03]">&lt;OriansJ&gt;</a></span><span class="message">rain1: sure</span></div><div class="line" id="114718"><span class="nick" style="color:#8dd3c7"><a href="#114718" label="[11:47:18]">&lt;OriansJ&gt;</a></span><span class="message">how about mes-m2; getting started on hacking guide</span></div><div class="line" id="114837"><span class="nick" style="color:#8dd3c7"><a href="#114837" label="[11:48:37]">&lt;OriansJ&gt;</a></span><span class="message">I even have an open issue for it: <a rel="nofollow" href="https://github.com/oriansj/mes-m2/issues/3">https://github.com/oriansj/mes-m2/issues/3</a> </span></div><div class="line" id="115007"><span class="nick" style="color:#8dd3c7"><a href="#115007" label="[11:50:07]">&lt;OriansJ&gt;</a></span><span class="message">would you like commit access rain1 ?</span></div><div class="line" id="115113"><span class="nick" style="color:#8dd3c7"><a href="#115113" label="[11:51:13]">&lt;OriansJ&gt;</a></span><span class="message">as long as we keep it buildable by M2-Planet at every commit; the second it can run MesCC; the bootstrap will be done</span></div><div class="line" id="115253"><span class="nick" style="color:#8dd3c7"><a href="#115253" label="[11:52:53]">&lt;OriansJ&gt;</a></span><span class="message">as one can see <a rel="nofollow" href="https://github.com/oriansj/mes-m2/blob/master/mes_init.c#L149">https://github.com/oriansj/mes-m2/blob/master/mes_init.c#L149</a> </span></div><div class="line" id="115307"><span class="nick" style="color:#8dd3c7"><a href="#115307" label="[11:53:07]">&lt;OriansJ&gt;</a></span><span class="message">we have a bunch of tested and working scheme primitives</span></div><div class="line" id="115705"><span class="nick" style="color:#8dd3c7"><a href="#115705" label="[11:57:05]">&lt;OriansJ&gt;</a></span><span class="message">with a bit more done in scheme: <a rel="nofollow" href="https://github.com/oriansj/mes-m2/blob/master/module/mes/boot-0.scm">https://github.com/oriansj/mes-m2/blob/master/module/mes/boot-0.scm</a> </span></div><div class="line" id="120045"><span class="nick" style="color:#8dd3c7"><a href="#120045" label="[12:00:45]">&lt;OriansJ&gt;</a></span><span class="message">I've tried to match guile's behavior in regards to both input and output</span></div><div class="line" id="120239"><span class="nick" style="color:#8dd3c7"><a href="#120239" label="[12:02:39]">&lt;OriansJ&gt;</a></span><span class="message">I know that <a rel="nofollow" href="https://github.com/oriansj/mes-m2/blob/master/mes_macro.c">https://github.com/oriansj/mes-m2/blob/master/mes_macro.c</a>  needs work but I am not sure how to do it in a guile compatible way yet</span></div><div class="line" id="121248"><span class="nick" style="color:#8dd3c7"><a href="#121248" label="[12:12:48]">&lt;OriansJ&gt;</a></span><span class="message">with export MES_CORE=0 it becomes trivial to use cgdb to walk into the interpreter and see exactly how a scheme primitive works with anything you want</span></div><div class="line" id="121759"><span class="nick" style="color:#8dd3c7"><a href="#121759" label="[12:17:59]">&lt;OriansJ&gt;</a></span><span class="message">Thus we know if every primitive behaves correctly; in theory mes-m2 should be reasonably bug-free (or atleast easier to remove bugs from)</span></div><div class="line" id="121952"><span class="nick" style="color:#6c3d55"><a href="#121952" label="[12:19:52]">&lt;nimaje&gt;</a></span><span class="message">why has test/test101/hello.sh a /bin/bash shbang? (in mes-m2); seems to work fine with a normal /bin/sh shbang</span></div><div class="line" id="122620"><span class="nick" style="color:#8dd3c7"><a href="#122620" label="[12:26:20]">&lt;OriansJ&gt;</a></span><span class="message">same reason as the rest of the tests after test 100; copy and paste was used for the header</span></div><div class="line" id="122704"><span class="nick" style="color:#8dd3c7"><a href="#122704" label="[12:27:04]">&lt;OriansJ&gt;</a></span><span class="message">it is something that probably could be changed</span></div><div class="line" id="122915"><span class="nick" style="color:#8dd3c7"><a href="#122915" label="[12:29:15]">&lt;OriansJ&gt;</a></span><span class="message">as most of the tests over #100 were janneke's original tests and the lower tests were primitive tests I created trying to ensure basic functionality</span></div><div class="line" id="123146"><span class="nick" style="color:#6c3d55"><a href="#123146" label="[12:31:46]">&lt;nimaje&gt;</a></span><span class="message">well, the makefile only executes up to 101 and as freebsd doesn't have sha256sum I currently try to build something via awk and sha256 that checks the answers</span></div><div class="line" id="123213"><span class="nick" style="color:#8dd3c7"><a href="#123213" label="[12:32:13]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: oh, I have a solution from that you can probably steal</span></div><div class="line" id="123251"><span class="nick" style="color:#8dd3c7"><a href="#123251" label="[12:32:51]">&lt;OriansJ&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/sha256.sh">https://github.com/oriansj/mescc-tools/blob/master/sha256.sh</a> </span></div><div class="line" id="123331"><span class="nick" style="color:#8dd3c7"><a href="#123331" label="[12:33:31]">&lt;OriansJ&gt;</a></span><span class="message">ng0 previously did porting to the BSDs for mescc-tools</span></div><div class="line" id="123439"><span class="nick" style="color:#8dd3c7"><a href="#123439" label="[12:34:39]">&lt;OriansJ&gt;</a></span><span class="message">and as you can see: <a rel="nofollow" href="https://github.com/oriansj/mescc-tools/blob/master/test/test2/hello.sh">https://github.com/oriansj/mescc-tools/blob/master/test/test2/hello.sh</a>  it can be integrated quite nicely</span></div><div class="line" id="123545"><span class="nick" style="color:#8dd3c7"><a href="#123545" label="[12:35:45]">&lt;OriansJ&gt;</a></span><span class="message">It just requires someone to manually update the tests' hello.sh files</span></div><div class="line" id="123736"><span class="nick" style="color:#8dd3c7"><a href="#123736" label="[12:37:36]">&lt;OriansJ&gt;</a></span><span class="message">and the make file of course</span></div><div class="line" id="124109"><span class="nick" style="color:#6c3d55"><a href="#124109" label="[12:41:09]">&lt;nimaje&gt;</a></span><span class="message">that sha256_check function doesn't work on freebsd; sum doesn't take arguments and sha256's -c takes a hash to compare the input file against and sha256sum doesn't exist</span></div><div class="line" id="124437"><span class="nick" style="color:#6c3d55"><a href="#124437" label="[12:44:37]">&lt;nimaje&gt;</a></span><span class="message">ok,   awk '{ rc=system(&quot;sha256 -c &quot;$1&quot; &quot;$2); if (rc != 0) { exit rc } }' test/test.answers   should work</span></div><div class="line" id="124902"><span class="nick" style="color:#6c3d55"><a href="#124902" label="[12:49:02]">&lt;nimaje&gt;</a></span><span class="message">oh, there is shasum, why is it not in the see also section of sha256's man page?!</span></div><div class="line" id="124934"><span class="nick" style="color:#d9d9d9"><a href="#124934" label="[12:49:34]">&lt;nikita`&gt;</a></span><span class="message">sounds like an addition to the manpage..</span></div><div class="line" id="125011"><span class="nick" style="color:#8dd3c7"><a href="#125011" label="[12:50:11]">&lt;OriansJ&gt;</a></span><span class="message">and if the script doesn't work on freebsd, that would sound like a fix is needed for mescc-tools as well</span></div><div class="line" id="125143"><span class="nick" style="color:#6c3d55"><a href="#125143" label="[12:51:43]">&lt;nimaje&gt;</a></span><span class="message">oh, that shasum tool was installed by some perl package</span></div><div class="line" id="125223"><span class="nick" style="color:#8dd3c7"><a href="#125223" label="[12:52:23]">&lt;OriansJ&gt;</a></span><span class="message">as mescc-tools is a requirement for MesCC to work</span></div><div class="line" id="163147"><span class="nick" style="color:#6c3d55"><a href="#163147" label="[16:31:47]">&lt;nimaje&gt;</a></span><span class="message">I wonder which docs the person who wrote sha256_check read to think  sha256 -r -c &quot;$1&quot;  on freebsd is similar to  sha256sum -c &quot;$1&quot;  on linux</span></div><div class="line" id="163527"><span class="nick" style="color:#6c3d55"><a href="#163527" label="[16:35:27]">&lt;nimaje&gt;</a></span><span class="message">tests for mes-m2 seem to pass on freebsd, tests for mescc-tools fail with   ELF binary type &quot;0&quot; not known.</span></div><div class="line" id="165430"><span class="nick" style="color:#8dd3c7"><a href="#165430" label="[16:54:30]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: probably a netbsd user who write it for netbsd</span></div><div class="line" id="165702"><span class="nick" style="color:#6c3d55"><a href="#165702" label="[16:57:02]">&lt;nimaje&gt;</a></span><span class="message">the first version checks with uname for freebsd, so that person must have found some docs that made them believe it would work</span></div><div class="line" id="165749"><span class="nick" style="color:#8dd3c7"><a href="#165749" label="[16:57:49]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: that would be ng0 who wrote the first version</span></div><div class="line" id="165849"><span class="nick" style="color:#8dd3c7"><a href="#165849" label="[16:58:49]">&lt;OriansJ&gt;</a></span><span class="message">and I would be the idiot who possibly broke it later</span></div><div class="line" id="170127"><span class="nick" style="color:#8dd3c7"><a href="#170127" label="[17:01:27]">&lt;OriansJ&gt;</a></span><span class="message">So I take any blame for it being wrong</span></div><div class="line" id="170206"><span class="nick" style="color:#6c3d55"><a href="#170206" label="[17:02:06]">&lt;nimaje&gt;</a></span><span class="message">yes, removing the os check for sum makes it more broken on freebsd as sum on freebsd only calculates CRC</span></div><div class="line" id="170347"><span class="nick" style="color:#6c3d55"><a href="#170347" label="[17:03:47]">&lt;nimaje&gt;</a></span><span class="message">but  sha256 -r -c &quot;$1&quot;  on freebsd check if the hash of stdin is $1 instead of using $1 as list of checksums to check</span></div><div class="line" id="170634"><span class="nick" style="color:#8dd3c7"><a href="#170634" label="[17:06:34]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: can you verify that &quot;get_machine --OS&quot; returns the correct results?</span></div><div class="line" id="170840"><span class="nick" style="color:#6c3d55"><a href="#170840" label="[17:08:40]">&lt;nimaje&gt;</a></span><span class="message">get_machine --OS returns FreeBSD</span></div><div class="line" id="170850"><span class="nick" style="color:#8dd3c7"><a href="#170850" label="[17:08:50]">&lt;OriansJ&gt;</a></span><span class="message">good</span></div><div class="line" id="170940"><span class="nick" style="color:#8dd3c7"><a href="#170940" label="[17:09:40]">&lt;OriansJ&gt;</a></span><span class="message">so we can use ./bin/get_machine --OS and not have the external dependency on uname to enable seperate behaviors for FreeBSD</span></div><div class="line" id="171205"><span class="nick" style="color:#8dd3c7"><a href="#171205" label="[17:12:05]">&lt;OriansJ&gt;</a></span><span class="message">and the failing with &quot;ELF binary type &quot;0&quot; not known&quot; is because it attempts to run manually generated Linux Binaries</span></div><div class="line" id="171314"><span class="nick" style="color:#8dd3c7"><a href="#171314" label="[17:13:14]">&lt;OriansJ&gt;</a></span><span class="message">if you notice: elf_headers/elf32.hex2</span></div><div class="line" id="171418"><span class="nick" style="color:#6c3d55"><a href="#171418" label="[17:14:18]">&lt;nimaje&gt;</a></span><span class="message">well, linux binary labled as sysv abi; adding  brandelf -t Linux test/results/test1-binary  and enabling linux emu results in a segfault, but no idea how to debug linux coredumps on freebsd</span></div><div class="line" id="171549"><span class="nick" style="color:#8dd3c7"><a href="#171549" label="[17:15:49]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: well because these are simple programs; readelf -h $file (to get the entry address) and then gdb b* $address; followed by si and ni to step through it</span></div><div class="line" id="171747"><span class="nick" style="color:#8dd3c7"><a href="#171747" label="[17:17:47]">&lt;OriansJ&gt;</a></span><span class="message">^gdb^gdb $file then using b* $address to start at the entry point after you type run $args^</span></div><div class="line" id="171907"><span class="nick" style="color:#8dd3c7"><a href="#171907" label="[17:19:07]">&lt;OriansJ&gt;</a></span><span class="message">where $file is the name of the binary you wish to debug; $address is the Entry point address of $file and $args are the arguments used to run the program</span></div><div class="line" id="172029"><span class="nick" style="color:#8dd3c7"><a href="#172029" label="[17:20:29]">&lt;OriansJ&gt;</a></span><span class="message">we can also disale the tests for the BSDs if you don't want to mess with making the generated binaries work on BSDs; as only the checksums of the output files being exactly correct matters</span></div><div class="line" id="172216"><span class="nick" style="color:#8dd3c7"><a href="#172216" label="[17:22:16]">&lt;OriansJ&gt;</a></span><span class="message">The key points of mescc-tools are M1 and hex2 should always output the exact same outputs when given the same inputs with the same arguments</span></div><div class="line" id="172347"><span class="nick" style="color:#8dd3c7"><a href="#172347" label="[17:23:47]">&lt;OriansJ&gt;</a></span><span class="message">anything that violates it is a priority #1 bug that I will spin up machines/vms/containers/etc just to try to figure out why and make changes to eliminate it.</span></div><div class="line" id="172550"><span class="nick" style="color:#8dd3c7"><a href="#172550" label="[17:25:50]">&lt;OriansJ&gt;</a></span><span class="message">If the generated binaries don't work, it is because I wrote something wrong in them (maybe something linux specific that depends upon on undefined behavior); which would prompt potential changes in M2-Planet (to make sure those binaries don't trigger such behavior)</span></div><div class="line" id="173343"><span class="nick" style="color:#6c3d55"><a href="#173343" label="[17:33:43]">&lt;nimaje&gt;</a></span><span class="message">so, currently I disable trying to run the test binaries by setting GET_MACHINE_FLAGS=--OS (yes that's hacky) and try to get sha256.sh working as expected</span></div><div class="line" id="174012"><span class="nick" style="color:#8dd3c7"><a href="#174012" label="[17:40:12]">&lt;OriansJ&gt;</a></span><span class="message">might I suggest stealing an idea from M2-Planet?</span></div><div class="line" id="174052"><span class="nick" style="color:#8dd3c7"><a href="#174052" label="[17:40:52]">&lt;OriansJ&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/oriansj/M2-Planet/blob/master/test/test1000/hello-x86.sh#L64">https://github.com/oriansj/M2-Planet/blob/master/test/test1000/hello-x86.sh#L64</a> </span></div><div class="line" id="174207"><span class="nick" style="color:#8dd3c7"><a href="#174207" label="[17:42:07]">&lt;OriansJ&gt;</a></span><span class="message">the string for linux is &quot;Linux&quot;</span></div><div class="line" id="174430"><span class="nick" style="color:#8dd3c7"><a href="#174430" label="[17:44:30]">&lt;OriansJ&gt;</a></span><span class="message">which can be combined with get_machine's --override</span></div><div class="line" id="174550"><span class="nick" style="color:#8dd3c7"><a href="#174550" label="[17:45:50]">&lt;OriansJ&gt;</a></span><span class="message">in the manner of (export GET_MACHINE_FLAGS=&quot;--override x86&quot;) or anything honestly (export GET_MACHINE_FLAGS=&quot;--override 'I am the very model of a modern major general'&quot;)</span></div><div class="line" id="175039"><span class="nick" style="color:#6c3d55"><a href="#175039" label="[17:50:39]">&lt;nimaje&gt;</a></span><span class="message">yes, tests in mescc-tools also have that if, that's why GET_MACHINE_FLAGS=--OS works</span></div><div class="line" id="175352"><span class="nick" style="color:#8dd3c7"><a href="#175352" label="[17:53:52]">&lt;OriansJ&gt;</a></span><span class="message">indeed</span></div><div class="line" id="175834"><span class="nick" style="color:#6c3d55"><a href="#175834" label="[17:58:34]">&lt;nimaje&gt;</a></span><span class="message">ok, checksums seem to match for tests of mescc-tools if run on freebsd, I just had to get sha256.sh working correctly <a rel="nofollow" href="https://0x0.st/iGdn.diff">https://0x0.st/iGdn.diff</a> </span></div><div class="line" id="180547"><span class="nick" style="color:#6c3d55"><a href="#180547" label="[18:05:47]">&lt;nimaje&gt;</a></span><span class="message">to get those binaries running e_ident[EI_OSABI] would have to be set to 3, which would change all checksums</span></div><div class="line" id="180745"><span class="nick" style="color:#8dd3c7"><a href="#180745" label="[18:07:45]">&lt;OriansJ&gt;</a></span><span class="message">true and if that change doesn't break anything; we can make that change (with testing on all systems where it currently works with 0)</span></div><div class="line" id="181223"><span class="nick" style="color:#8dd3c7"><a href="#181223" label="[18:12:23]">&lt;OriansJ&gt;</a></span><span class="message">did you want just nimaje as your commiter name or something else?</span></div><div class="line" id="181342"><span class="nick" style="color:#6c3d55"><a href="#181342" label="[18:13:42]">&lt;nimaje&gt;</a></span><span class="message">nimaje is fine</span></div><div class="line" id="181356"><span class="nick" style="color:#8dd3c7"><a href="#181356" label="[18:13:56]">&lt;OriansJ&gt;</a></span><span class="message">as you desire</span></div><div class="line" id="183218"><span class="nick" style="color:#8dd3c7"><a href="#183218" label="[18:32:18]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: your commit has been incorporated; thank you for the patch</span></div><div class="line" id="183808"><span class="nick" style="color:#6c3d55"><a href="#183808" label="[18:38:08]">&lt;nimaje&gt;</a></span><span class="message">ok and it seems like lldb output suggest that the segfault comes from   0x600078: jmp    0x600106   <a rel="nofollow" href="https://0x0.st/iGnQ.txt">https://0x0.st/iGnQ.txt</a> </span></div><div class="line" id="190124"><span class="nick" style="color:#8dd3c7"><a href="#190124" label="[19:01:24]">&lt;OriansJ&gt;</a></span><span class="message">which if you look at test/test1/hex.M1</span></div><div class="line" id="190142"><span class="nick" style="color:#8dd3c7"><a href="#190142" label="[19:01:42]">&lt;OriansJ&gt;</a></span><span class="message">that would be the JMP32 %_start</span></div><div class="line" id="190314"><span class="nick" style="color:#8dd3c7"><a href="#190314" label="[19:03:14]">&lt;OriansJ&gt;</a></span><span class="message">so when you use gdb does it not arrive at _start?</span></div><div class="line" id="190624"><span class="nick" style="color:#8dd3c7"><a href="#190624" label="[19:06:24]">&lt;OriansJ&gt;</a></span><span class="message">also it would be run &lt; test/test1/hex0.hex0 &gt; test/test1/proof1 as just run would result in everything you type would be input until you do ctrl-d</span></div><div class="line" id="190815"><span class="nick" style="color:#8dd3c7"><a href="#190815" label="[19:08:15]">&lt;OriansJ&gt;</a></span><span class="message">(with readline requiring [ENTER] prior to sending the chars unless you put it into RAW mode)</span></div><div class="line" id="190952"><span class="nick" style="color:#6c3d55"><a href="#190952" label="[19:09:52]">&lt;nimaje&gt;</a></span><span class="message">yes, it seems like it doesn't even arrive at _start for some reason</span></div><div class="line" id="191733"><span class="nick" style="color:#8dd3c7"><a href="#191733" label="[19:17:33]">&lt;OriansJ&gt;</a></span><span class="message">which means that hex2 is putting the wrong offset or that _start moved for some reason</span></div><div class="line" id="191756"><span class="nick" style="color:#8dd3c7"><a href="#191756" label="[19:17:56]">&lt;OriansJ&gt;</a></span><span class="message">but if the checksum matches, hex2 can't be putting the wrong offset</span></div><div class="line" id="191810"><span class="nick" style="color:#8dd3c7"><a href="#191810" label="[19:18:10]">&lt;OriansJ&gt;</a></span><span class="message">So why would _start not be at the right place?</span></div><div class="line" id="192035"><span class="nick" style="color:#6c3d55"><a href="#192035" label="[19:20:35]">&lt;nimaje&gt;</a></span><span class="message">(or freebsd's linux emulation does something odd)</span></div><div class="line" id="194913"><span class="nick" style="color:#8dd3c7"><a href="#194913" label="[19:49:13]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: well that is the thing linux emulation, would just be emulating the syscalls; not rewriting the binaries themselves</span></div><div class="line" id="195134"><span class="nick" style="color:#8dd3c7"><a href="#195134" label="[19:51:34]">&lt;OriansJ&gt;</a></span><span class="message">perhaps something the FreBSD devs could help us with?</span></div><div class="line" id="195428"><span class="nick">***</span><span class="message notice">stikonas_ is now known as stikonas</span></div><div class="line" id="195545"><span class="nick" style="color:#6c3d55"><a href="#195545" label="[19:55:45]">&lt;nimaje&gt;</a></span><span class="message">that's why I put it in (), I don't belief that linux emulation is at fault, but who knows</span></div><div class="line" id="203220"><span class="nick" style="color:#8dd3c7"><a href="#203220" label="[20:32:20]">&lt;OriansJ&gt;</a></span><span class="message">nimaje: well there are only a few places where things can break: 1) the M1 definitions are wrong (in this case DEFINE JMP32 E9 ) 2) hex2 put the wrong displacement (matching checksum indicates unlikely) 3) OS tampering with binary (generally unlikely but something definitely not ruled out) or 4) hardware is not behaving according to specification (Would x86 behave differently for FreeBSD vs Linux? I think unlikely)</span></div><div class="line" id="203307"><span class="nick" style="color:#8dd3c7"><a href="#203307" label="[20:33:07]">&lt;OriansJ&gt;</a></span><span class="message">ruling out 1 and 4; only leaves 2 and 3 as possible causes</span></div><div class="line" id="204049"><span class="nick" style="color:#8dd3c7"><a href="#204049" label="[20:40:49]">&lt;OriansJ&gt;</a></span><span class="message">and if you do: ndisasm -k 0x600000,0x78 -o 0x600000 -b 64 ./test/results/test1-binary</span></div><div class="line" id="211808"><span class="nick" style="color:#6c3d55"><a href="#211808" label="[21:18:08]">&lt;nimaje&gt;</a></span><span class="message">ndisasm gives me <a rel="nofollow" href="https://0x0.st/iG5n.txt">https://0x0.st/iG5n.txt</a>  should be fine?</span></div><div class="line" id="213711"><span class="nick" style="color:#8dd3c7"><a href="#213711" label="[21:37:11]">&lt;OriansJ&gt;</a></span><span class="message">well this is what I got <a rel="nofollow" href="https://paste.debian.net/1167341/">https://paste.debian.net/1167341/</a>  ; which has the same sha256sum as yours does; I am guessing identical (and no diff output)</span></div><div class="line" id="214244"><span class="nick" style="color:#8dd3c7"><a href="#214244" label="[21:42:44]">&lt;OriansJ&gt;</a></span><span class="message">so based on the disassembly, it is jumping to the correct address and when stepping the binary what actually causes the exception?</span></div><div class="line" id="215559"><span class="nick" style="color:#6c3d55"><a href="#215559" label="[21:55:59]">&lt;nimaje&gt;</a></span><span class="message">it really segfaults at that first jump</span></div><br /></div></body></html>