<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2022-04-15.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="001120"><span class="nick" style="color:#8dd3c7"><a href="#001120" label="[00:11:20]">&lt;unmatched-paren&gt;</a></span><span class="message">a simplified graph of the current `tree' of compilers that have been bootstrapped starting from stage0 would be nice (maybe on a `Compiler Tree' page on the wiki?)</span></div><div class="line" id="001200"><span class="nick" style="color:#8dd3c7"><a href="#001200" label="[00:12:00]">&lt;unmatched-paren&gt;</a></span><span class="message">that way people could see at a glance what we've currently got... `unlocked'?</span></div><div class="line" id="001228"><span class="nick" style="color:#8dd3c7"><a href="#001228" label="[00:12:28]">&lt;unmatched-paren&gt;</a></span><span class="message">we've got a graph to GCC from stage0 but we could extend that</span></div><div class="line" id="001318"><span class="nick" style="color:#8dd3c7"><a href="#001318" label="[00:13:18]">&lt;unmatched-paren&gt;</a></span><span class="message">(and probably simplify it to only include compilers and maybe build systems)</span></div><div class="line" id="001326"><span class="nick" style="color:#2e2a4a"><a href="#001326" label="[00:13:26]">&lt;muurkha&gt;</a></span><span class="message">tech tree</span></div><div class="line" id="001334"><span class="nick" style="color:#8dd3c7"><a href="#001334" label="[00:13:34]">&lt;unmatched-paren&gt;</a></span><span class="message">yeah! :D</span></div><div class="line" id="001512"><span class="nick" style="color:#8dd3c7"><a href="#001512" label="[00:15:12]">&lt;unmatched-paren&gt;</a></span><span class="message">and potential paths (does graphviz allow different colours for nodes and paths? never used it except with `guix graph')</span></div><div class="line" id="001529"><span class="nick" style="color:#2e2a4a"><a href="#001529" label="[00:15:29]">&lt;muurkha&gt;</a></span><span class="message">yeah</span></div><div class="line" id="001544"><span class="nick" style="color:#2e2a4a"><a href="#001544" label="[00:15:44]">&lt;muurkha&gt;</a></span><span class="message">see gallery</span></div><div class="line" id="001837"><span class="nick" style="color:#8dd3c7"><a href="#001837" label="[00:18:37]">&lt;unmatched-paren&gt;</a></span><span class="message">muurkha: oh, you mean graphviz.org/gallery?</span></div><div class="line" id="001925"><span class="nick" style="color:#8dd3c7"><a href="#001925" label="[00:19:25]">&lt;unmatched-paren&gt;</a></span><span class="message">oh, wow, i didn't realize it allowed that degree of customization</span></div><div class="line" id="002155"><span class="nick" style="color:#2e2a4a"><a href="#002155" label="[00:21:55]">&lt;muurkha&gt;</a></span><span class="message">aye</span></div><div class="line" id="002805"><span class="nick" style="color:#8dd3c7"><a href="#002805" label="[00:28:05]">&lt;unmatched-paren&gt;</a></span><span class="message">so, we could have, say, tcc -&gt; gcc or mrustc -&gt; rustc in green (done), hugs -&gt; ghc (or whatever the most viable path is looking like right now) in orange (potential path), APC -&gt; FPC -&gt; nim in blue (solution is being worked on but not done yet) and lone SML/NJ and MLton nodes in red (not bootstrappable, and nobody has yet found or created a path)</span></div><div class="line" id="003030"><span class="nick" style="color:#8dd3c7"><a href="#003030" label="[00:30:30]">&lt;unmatched-paren&gt;</a></span><span class="message">i'm kind of surprised that nothing like that exists yet</span></div><div class="line" id="003046"><span class="nick" style="color:#8dd3c7"><a href="#003046" label="[00:30:46]">&lt;unmatched-paren&gt;</a></span><span class="message">at least, i can't find anything</span></div><div class="line" id="003410"><span class="nick" style="color:#8dd3c7"><a href="#003410" label="[00:34:10]">&lt;unmatched-paren&gt;</a></span><span class="message"> <a rel="nofollow" href="https://bootstrapping.miraheze.org/wiki/File:M1_diagram.png">https://bootstrapping.miraheze.org/wiki/File:M1_diagram.png</a>  &lt;- this is the diagram i'm thinking of</span></div><div class="line" id="003426"><span class="nick" style="color:#8dd3c7"><a href="#003426" label="[00:34:26]">&lt;unmatched-paren&gt;</a></span><span class="message">but it only goes to GCC</span></div><div class="line" id="003550"><span class="nick" style="color:#8dd3c7"><a href="#003550" label="[00:35:50]">&lt;unmatched-paren&gt;</a></span><span class="message">an exhaustive graph should probably have only one node per project instead of per program</span></div><div class="line" id="003642"><span class="nick" style="color:#8dd3c7"><a href="#003642" label="[00:36:42]">&lt;unmatched-paren&gt;</a></span><span class="message">so [hex0...cc_*.S] would be replaced with just `stage0'</span></div><div class="line" id="021749"><span class="nick" style="color:#6b8072"><a href="#021749" label="[02:17:49]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: the reason it doesn't exist yet is rather simple. No one was willing to put in the effort to create it yet.</span></div><div class="line" id="021857"><span class="nick" style="color:#6b8072"><a href="#021857" label="[02:18:57]">&lt;oriansj&gt;</a></span><span class="message">A more complete graph is here: <a rel="nofollow" href="https://github.com/oriansj/talk-notes/blob/master/live-bootstrap.pdf">https://github.com/oriansj/talk-notes/blob/master/live-bootstrap.pdf</a>  (its source is here: <a rel="nofollow" href="https://github.com/oriansj/talk-notes/blob/master/live-bootstrap.dot">https://github.com/oriansj/talk-notes/blob/master/live-bootstrap.dot</a>  )</span></div><div class="line" id="021910"><span class="nick" style="color:#6b8072"><a href="#021910" label="[02:19:10]">&lt;oriansj&gt;</a></span><span class="message">it is a good bit out of date</span></div><div class="line" id="021936"><span class="nick" style="color:#6b8072"><a href="#021936" label="[02:19:36]">&lt;oriansj&gt;</a></span><span class="message">but if you make a pull request with an update, it'll get merged.</span></div><div class="line" id="030853"><span class="nick">***</span><span class="message notice">janus__ is now known as janus</span></div><div class="line" id="110603"><span class="nick" style="color:#8dd3c7"><a href="#110603" label="[11:06:03]">&lt;unmatched-paren&gt;</a></span><span class="message">oriansj: ok, i'll read up on using graphviz and send a PR to add a full graph :) then we can add it to the wiki</span></div><div class="line" id="135916"><span class="nick" style="color:#80b1d3"><a href="#135916" label="[13:59:16]">&lt;unmatche1-paren&gt;</a></span><span class="message">ok, my graph now shows the paths for:</span></div><div class="line" id="140113"><span class="nick" style="color:#80b1d3"><a href="#140113" label="[14:01:13]">&lt;unmatche1-paren&gt;</a></span><span class="message">C, Make, Perl, Autotools, C++, Python, CMake, Ninja, Meson, Guile, Chez, MIT/GNU Scheme, Racket, CLISP, ECL, SBCL, Raku, D, Pascal, Nim, Go, Rust, Haskell, Idris, OCaml, Zig, C#, F#, SML, Fortran, Ada, Java, Groovy, Scala, Kotlin, Gradle, and Clojure.</span></div><div class="line" id="140119"><span class="nick" style="color:#80b1d3"><a href="#140119" label="[14:01:19]">&lt;unmatche1-paren&gt;</a></span><span class="message">What have i missed?</span></div><div class="line" id="140134"><span class="nick" style="color:#80b1d3"><a href="#140134" label="[14:01:34]">&lt;unmatche1-paren&gt;</a></span><span class="message">(Of course, not everything there is bootstrappable yet)</span></div><div class="line" id="140243"><span class="nick" style="color:#80b1d3"><a href="#140243" label="[14:02:43]">&lt;unmatche1-paren&gt;</a></span><span class="message">the graph should have every notable language or build system that we know of in existence, even if it's trivial to bootstrap</span></div><div class="line" id="140248"><span class="nick" style="color:#80b1d3"><a href="#140248" label="[14:02:48]">&lt;unmatche1-paren&gt;</a></span><span class="message">oh yeah, maven</span></div><div class="line" id="141044"><span class="nick" style="color:#80b1d3"><a href="#141044" label="[14:10:44]">&lt;unmatche1-paren&gt;</a></span><span class="message">there's a lot of red 'circular dependency' arrows around gradle...</span></div><div class="line" id="153529"><span class="nick" style="color:#80b1d3"><a href="#153529" label="[15:35:29]">&lt;unmatche1-paren&gt;</a></span><span class="message">it's done! i think... <a rel="nofollow" href="https://static.miraheze.org/bootstrappingwiki/7/74/Tech_Tree.svg">https://static.miraheze.org/bootstrappingwiki/7/74/Tech_Tree.svg</a> </span></div><div class="line" id="153555"><span class="nick" style="color:#80b1d3"><a href="#153555" label="[15:35:55]">&lt;unmatche1-paren&gt;</a></span><span class="message">it's intentionally simplified, especially at the live-bootstrap parts</span></div><div class="line" id="153628"><span class="nick" style="color:#80b1d3"><a href="#153628" label="[15:36:28]">&lt;unmatche1-paren&gt;</a></span><span class="message">since there's already graphs of that bit, and it's quite large and complex (e.g. it shows four musls)</span></div><div class="line" id="153651"><span class="nick" style="color:#80b1d3"><a href="#153651" label="[15:36:51]">&lt;unmatche1-paren&gt;</a></span><span class="message">please let me kow if there's any mistakes.</span></div><div class="line" id="153706"><span class="nick" style="color:#80b1d3"><a href="#153706" label="[15:37:06]">&lt;unmatche1-paren&gt;</a></span><span class="message">muurkha: ^</span></div><div class="line" id="153759"><span class="nick" style="color:#6d2462"><a href="#153759" label="[15:37:59]">&lt;bauen1&gt;</a></span><span class="message">i'm a bit surprised the linux kernel doesn't depend on perl, python or something like that, surely there are some scripts that get executed during build ?</span></div><div class="line" id="153816"><span class="nick" style="color:#6d2462"><a href="#153816" label="[15:38:16]">&lt;bauen1&gt;</a></span><span class="message">or is it all bash + awk + grep, coreutils ?</span></div><div class="line" id="153900"><span class="nick" style="color:#80b1d3"><a href="#153900" label="[15:39:00]">&lt;unmatche1-paren&gt;</a></span><span class="message">bauen1: i think you're right actually, i'll fix that</span></div><div class="line" id="153908"><span class="nick" style="color:#80b1d3"><a href="#153908" label="[15:39:08]">&lt;unmatche1-paren&gt;</a></span><span class="message">let me check...</span></div><div class="line" id="154037"><span class="nick" style="color:#80b1d3"><a href="#154037" label="[15:40:37]">&lt;unmatche1-paren&gt;</a></span><span class="message">bauen1: you are apparently correct, according to gnu/packages/linux.scm in guix</span></div><div class="line" id="154042"><span class="nick" style="color:#80b1d3"><a href="#154042" label="[15:40:42]">&lt;unmatche1-paren&gt;</a></span><span class="message">i'll upload a new version</span></div><div class="line" id="154152"><span class="nick" style="color:#80b1d3"><a href="#154152" label="[15:41:52]">&lt;unmatche1-paren&gt;</a></span><span class="message">the whole graph completely changes its layout when you make a tiny modification like this :)</span></div><div class="line" id="154251"><span class="nick" style="color:#80b1d3"><a href="#154251" label="[15:42:51]">&lt;unmatche1-paren&gt;</a></span><span class="message">there's probably many languages i'm missing that i can't think of off the top of my head</span></div><div class="line" id="154321"><span class="nick" style="color:#80b1d3"><a href="#154321" label="[15:43:21]">&lt;unmatche1-paren&gt;</a></span><span class="message">muurkha, bauen1: fixed version: <a rel="nofollow" href="https://static.miraheze.org/bootstrappingwiki/7/74/Tech_Tree.svg">https://static.miraheze.org/bootstrappingwiki/7/74/Tech_Tree.svg</a> </span></div><div class="line" id="154419"><span class="nick" style="color:#80b1d3"><a href="#154419" label="[15:44:19]">&lt;unmatche1-paren&gt;</a></span><span class="message">odd, it's not fixed</span></div><div class="line" id="154433"><span class="nick" style="color:#80b1d3"><a href="#154433" label="[15:44:33]">&lt;unmatche1-paren&gt;</a></span><span class="message">the online one, that is</span></div><div class="line" id="154556"><span class="nick" style="color:#6d2462"><a href="#154556" label="[15:45:56]">&lt;bauen1&gt;</a></span><span class="message">unmatche1-paren: for ninja, there is a C implementation, with only minor differences <a rel="nofollow" href="https://github.com/michaelforney/samurai">https://github.com/michaelforney/samurai</a>  which can be used to put it a lot further down in the tree</span></div><div class="line" id="154615"><span class="nick" style="color:#80b1d3"><a href="#154615" label="[15:46:15]">&lt;unmatche1-paren&gt;</a></span><span class="message">bauen1: samurai is in that graph :)</span></div><div class="line" id="154630"><span class="nick" style="color:#80b1d3"><a href="#154630" label="[15:46:30]">&lt;unmatche1-paren&gt;</a></span><span class="message">maybe i should replace all references to ninja with samurai</span></div><div class="line" id="154636"><span class="nick" style="color:#80b1d3"><a href="#154636" label="[15:46:36]">&lt;unmatche1-paren&gt;</a></span><span class="message">and meson with muon</span></div><div class="line" id="154657"><span class="nick" style="color:#80b1d3"><a href="#154657" label="[15:46:57]">&lt;unmatche1-paren&gt;</a></span><span class="message">oh, i think it's just qute caching the image</span></div><div class="line" id="154733"><span class="nick" style="color:#6d2462"><a href="#154733" label="[15:47:33]">&lt;bauen1&gt;</a></span><span class="message">is there any plan on making a more detailed graph ? e.g. where each node describes a &quot;build recipe&quot; including versioned dependencies and a link to the repo where the build is implemented ? that would probably be massive</span></div><div class="line" id="154738"><span class="nick" style="color:#80b1d3"><a href="#154738" label="[15:47:38]">&lt;unmatche1-paren&gt;</a></span><span class="message">and... now i get a not found when trying to click to the large version?</span></div><div class="line" id="154815"><span class="nick" style="color:#80b1d3"><a href="#154815" label="[15:48:15]">&lt;unmatche1-paren&gt;</a></span><span class="message">bauen1: i'm not THAT crazy :)</span></div><div class="line" id="154903"><span class="nick" style="color:#80b1d3"><a href="#154903" label="[15:49:03]">&lt;unmatche1-paren&gt;</a></span><span class="message">ok, it seems to be working now. you'll probably need to clear your browser's cache to see the new version</span></div><div class="line" id="154914"><span class="nick" style="color:#6d2462"><a href="#154914" label="[15:49:14]">&lt;bauen1&gt;</a></span><span class="message">unmatche1-paren: nope, no problem here no cache cleaning necessary</span></div><div class="line" id="154948"><span class="nick" style="color:#80b1d3"><a href="#154948" label="[15:49:48]">&lt;unmatche1-paren&gt;</a></span><span class="message">hm, never mind then :P</span></div><div class="line" id="155015"><span class="nick" style="color:#234e69"><a href="#155015" label="[15:50:15]">*</a></span><span class="message">unmatche1-paren looks at <a rel="nofollow" href="https://en.wikipedia.org/wiki/List_of_programming_languages_by_type">https://en.wikipedia.org/wiki/List_of_programming_languages_by_type</a> </span></div><div class="line" id="155022"><span class="nick" style="color:#234e69"><a href="#155022" label="[15:50:22]">*</a></span><span class="message">unmatche1-paren sobs quietly</span></div><div class="line" id="155055"><span class="nick" style="color:#80b1d3"><a href="#155055" label="[15:50:55]">&lt;unmatche1-paren&gt;</a></span><span class="message">probably only about ~15% of them actually matter though</span></div><div class="line" id="155123"><span class="nick" style="color:#80b1d3"><a href="#155123" label="[15:51:23]">&lt;unmatche1-paren&gt;</a></span><span class="message">i don't think bootstrappable cares about swift, for example</span></div><div class="line" id="155147"><span class="nick" style="color:#80b1d3"><a href="#155147" label="[15:51:47]">&lt;unmatche1-paren&gt;</a></span><span class="message">since its sole purpose is to write apps for Apple(R)(TM)(C)(C) devices</span></div><div class="line" id="155335"><span class="nick">***</span><span class="message notice">unmatched-paren is now known as Guest8610</span></div><div class="line" id="184935"><span class="nick" style="color:#6b8072"><a href="#184935" label="[18:49:35]">&lt;oriansj&gt;</a></span><span class="message">unmatche1-paren: stage0 doens't depend on linux, only stage0-posix does (which is just a port to simplify scripting the bootstap process)</span></div><div class="line" id="191919"><span class="nick" style="color:#2e2a4a"><a href="#191919" label="[19:19:19]">&lt;muurkha&gt;</a></span><span class="message">bauen1: that sounds like a thing that could be scripted</span></div><div class="line" id="201113"><span class="nick" style="color:#8dd3c7"><a href="#201113" label="[20:11:13]">&lt;unmatched-paren&gt;</a></span><span class="message">oriansj: guess i'll correct that node to say `stage0-posix' then</span></div><div class="line" id="201404"><span class="nick" style="color:#8dd3c7"><a href="#201404" label="[20:14:04]">&lt;unmatched-paren&gt;</a></span><span class="message">or, actually, change the `linux' node to point at `m2-mesoplanet' instead, which doesn't work without posix, right?</span></div><div class="line" id="201556"><span class="nick" style="color:#8dd3c7"><a href="#201556" label="[20:15:56]">&lt;unmatched-paren&gt;</a></span><span class="message">so is the idea that we build m2-planet to work on bare metal, then write a tiny kernel in m2 that can run mes etc?</span></div><div class="line" id="201940"><span class="nick" style="color:#8dd3c7"><a href="#201940" label="[20:19:40]">&lt;unmatched-paren&gt;</a></span><span class="message">i've uploaded a new version now :)</span></div><div class="line" id="215427"><span class="nick" style="color:#6b8072"><a href="#215427" label="[21:54:27]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: that is correct M2-Mesoplanet requires an operating system for the Environment and spawn behavior (which could be disabled with a custom cc.c file) and a minor detail Mes-m2 can be built by M2-Planet right now. The M2-Mesoplanet is about building mainline Mes (instead of running MesCC on Mes-M2)</span></div><div class="line" id="231219"><span class="nick" style="color:#8dd3c7"><a href="#231219" label="[23:12:19]">&lt;unmatched-paren&gt;</a></span><span class="message">oriansj: ok, i'll change that in a moment :)</span></div><div class="line" id="232823"><span class="nick" style="color:#8dd3c7"><a href="#232823" label="[23:28:23]">&lt;unmatched-paren&gt;</a></span><span class="message">oriansj: so i suppose mes-m2 requires a kernel?</span></div><div class="line" id="234157"><span class="nick" style="color:#6c3d55"><a href="#234157" label="[23:41:57]">&lt;stikonas&gt;</a></span><span class="message">unmatched-paren: mes-m2 doesn't</span></div><div class="line" id="234202"><span class="nick" style="color:#6c3d55"><a href="#234202" label="[23:42:02]">&lt;stikonas&gt;</a></span><span class="message">mescc probably does</span></div><div class="line" id="234227"><span class="nick" style="color:#8dd3c7"><a href="#234227" label="[23:42:27]">&lt;unmatched-paren&gt;</a></span><span class="message">how does it interpret .scm files if there's no such thing as a file?</span></div><div class="line" id="234233"><span class="nick" style="color:#8dd3c7"><a href="#234233" label="[23:42:33]">&lt;unmatched-paren&gt;</a></span><span class="message">unless it runs under EFI...</span></div><div class="line" id="234243"><span class="nick" style="color:#6c3d55"><a href="#234243" label="[23:42:43]">&lt;stikonas&gt;</a></span><span class="message">no, you would have to feed everything in one go then</span></div><div class="line" id="234246"><span class="nick" style="color:#6c3d55"><a href="#234246" label="[23:42:46]">&lt;stikonas&gt;</a></span><span class="message">if you want file input</span></div><div class="line" id="234322"><span class="nick" style="color:#8dd3c7"><a href="#234322" label="[23:43:22]">&lt;unmatched-paren&gt;</a></span><span class="message">but then by using the EFI implementation from the CPU vendor you get a whole lot of other trust issues :)</span></div><div class="line" id="234325"><span class="nick" style="color:#8dd3c7"><a href="#234325" label="[23:43:25]">&lt;unmatched-paren&gt;</a></span><span class="message">ah, i see</span></div><div class="line" id="234332"><span class="nick" style="color:#6c3d55"><a href="#234332" label="[23:43:32]">&lt;stikonas&gt;</a></span><span class="message">well, same as m2-planet vs m2-mesoplanet</span></div><div class="line" id="234341"><span class="nick" style="color:#6c3d55"><a href="#234341" label="[23:43:41]">&lt;stikonas&gt;</a></span><span class="message">m2-planet needs a single c file</span></div><div class="line" id="234349"><span class="nick" style="color:#6c3d55"><a href="#234349" label="[23:43:49]">&lt;stikonas&gt;</a></span><span class="message">and actuall without kernel it's not even a file</span></div><div class="line" id="234415"><span class="nick" style="color:#6c3d55"><a href="#234415" label="[23:44:15]">&lt;stikonas&gt;</a></span><span class="message">you need so use simplified main() without command line arguments</span></div><div class="line" id="234445"><span class="nick" style="color:#8dd3c7"><a href="#234445" label="[23:44:45]">&lt;unmatched-paren&gt;</a></span><span class="message">so you modify them to read from a hardcoded constant string if you want them to run on bare metal?</span></div><div class="line" id="234457"><span class="nick" style="color:#6c3d55"><a href="#234457" label="[23:44:57]">&lt;stikonas&gt;</a></span><span class="message">anyway, it's probablu not too important because why would you need to run it without kernel</span></div><div class="line" id="234502"><span class="nick" style="color:#6c3d55"><a href="#234502" label="[23:45:02]">&lt;stikonas&gt;</a></span><span class="message">just build kernel with m2-planet</span></div><div class="line" id="234509"><span class="nick" style="color:#8dd3c7"><a href="#234509" label="[23:45:09]">&lt;unmatched-paren&gt;</a></span><span class="message">yeah</span></div><div class="line" id="234518"><span class="nick" style="color:#6b8072"><a href="#234518" label="[23:45:18]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: or from a serial port or paper tap ereader or etc</span></div><div class="line" id="234535"><span class="nick" style="color:#8dd3c7"><a href="#234535" label="[23:45:35]">&lt;unmatched-paren&gt;</a></span><span class="message">oriansj: ahhhh</span></div><div class="line" id="234538"><span class="nick" style="color:#6c3d55"><a href="#234538" label="[23:45:38]">&lt;stikonas&gt;</a></span><span class="message">it's hardware dependent</span></div><div class="line" id="234546"><span class="nick" style="color:#6c3d55"><a href="#234546" label="[23:45:46]">&lt;stikonas&gt;</a></span><span class="message">and hence not easily automatable</span></div><div class="line" id="234553"><span class="nick" style="color:#6c3d55"><a href="#234553" label="[23:45:53]">&lt;stikonas&gt;</a></span><span class="message">that's why we have stage0-posix</span></div><div class="line" id="234607"><span class="nick" style="color:#8dd3c7"><a href="#234607" label="[23:46:07]">&lt;unmatched-paren&gt;</a></span><span class="message">right</span></div><div class="line" id="234624"><span class="nick" style="color:#6c3d55"><a href="#234624" label="[23:46:24]">&lt;stikonas&gt;</a></span><span class="message">so that people can run nice bootstrap chains without worrying too much about non-portable issues</span></div><div class="line" id="234638"><span class="nick" style="color:#6b8072"><a href="#234638" label="[23:46:38]">&lt;oriansj&gt;</a></span><span class="message">extremely hardware dependent but done in such a way stage0-posix and stage0 on bare metal should produce identical binaries given the same sources</span></div><div class="line" id="234638"><span class="nick" style="color:#6c3d55"><a href="#234638" label="[23:46:38]">&lt;stikonas&gt;</a></span><span class="message">it's a bit of a cheat</span></div><div class="line" id="234655"><span class="nick" style="color:#6c3d55"><a href="#234655" label="[23:46:55]">&lt;stikonas&gt;</a></span><span class="message">but a lot of people were interested in it</span></div><div class="line" id="234701"><span class="nick" style="color:#8dd3c7"><a href="#234701" label="[23:47:01]">&lt;unmatched-paren&gt;</a></span><span class="message">basically a shortcut until we can get it going from bare metal, if i understand right?</span></div><div class="line" id="234702"><span class="nick" style="color:#6c3d55"><a href="#234702" label="[23:47:02]">&lt;stikonas&gt;</a></span><span class="message">so it was worth having it</span></div><div class="line" id="234709"><span class="nick" style="color:#6c3d55"><a href="#234709" label="[23:47:09]">&lt;stikonas&gt;</a></span><span class="message">even after that</span></div><div class="line" id="234718"><span class="nick" style="color:#6c3d55"><a href="#234718" label="[23:47:18]">&lt;stikonas&gt;</a></span><span class="message">some might not want to do manual steps</span></div><div class="line" id="234732"><span class="nick" style="color:#6c3d55"><a href="#234732" label="[23:47:32]">&lt;stikonas&gt;</a></span><span class="message">e.g. let's say some distro wants to do bootstrapping from stage0</span></div><div class="line" id="234733"><span class="nick" style="color:#6b8072"><a href="#234733" label="[23:47:33]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: Less of a shortcut and more of a second root path to use</span></div><div class="line" id="234751"><span class="nick" style="color:#6c3d55"><a href="#234751" label="[23:47:51]">&lt;stikonas&gt;</a></span><span class="message">they probably would just start with stage0-posix and build on top of that</span></div><div class="line" id="234805"><span class="nick" style="color:#6c3d55"><a href="#234805" label="[23:48:05]">&lt;stikonas&gt;</a></span><span class="message">rather than each time manually kick off someting on baremetal</span></div><div class="line" id="234820"><span class="nick" style="color:#2e2a4a"><a href="#234820" label="[23:48:20]">&lt;muurkha&gt;</a></span><span class="message">right, reproducing the same binary means you don't need to worry your kernel intervened in your build process to introduce a backdoor</span></div><div class="line" id="234839"><span class="nick" style="color:#6c3d55"><a href="#234839" label="[23:48:39]">&lt;stikonas&gt;</a></span><span class="message">well, we do have checksums</span></div><div class="line" id="234840"><span class="nick" style="color:#2e2a4a"><a href="#234840" label="[23:48:40]">&lt;muurkha&gt;</a></span><span class="message">although until you can build the kernel itself with m2-planet you still have to worry that it intervened *after* your build process</span></div><div class="line" id="234851"><span class="nick" style="color:#6c3d55"><a href="#234851" label="[23:48:51]">&lt;stikonas&gt;</a></span><span class="message">so either all kernels are backdoored in the same way</span></div><div class="line" id="234857"><span class="nick" style="color:#6c3d55"><a href="#234857" label="[23:48:57]">&lt;stikonas&gt;</a></span><span class="message">or they are not</span></div><div class="line" id="234900"><span class="nick" style="color:#2e2a4a"><a href="#234900" label="[23:49:00]">&lt;muurkha&gt;</a></span><span class="message">right, of course</span></div><div class="line" id="234906"><span class="nick" style="color:#6b8072"><a href="#234906" label="[23:49:06]">&lt;oriansj&gt;</a></span><span class="message">but a hardcore bootstrapper may wish to do the steps manually to provide a second root check against the stage0-posix binaries produced.</span></div><div class="line" id="234906"><span class="nick" style="color:#8dd3c7"><a href="#234906" label="[23:49:06]">&lt;unmatched-paren&gt;</a></span><span class="message">oh, yes, it's safe to use prebuilt binaries if the sha256sum is the same as a totally bootstrapped version</span></div><div class="line" id="234944"><span class="nick" style="color:#2e2a4a"><a href="#234944" label="[23:49:44]">&lt;muurkha&gt;</a></span><span class="message">right, although you need to not run the sha256sum on a potentially backdoored kernel</span></div><div class="line" id="235001"><span class="nick" style="color:#8dd3c7"><a href="#235001" label="[23:50:01]">&lt;unmatched-paren&gt;</a></span><span class="message">of course... once we get stage0 from bare metal, we'd need to start worrying about the CPU and BIOS itself, which is a whole other can of worms...</span></div><div class="line" id="235040"><span class="nick" style="color:#6c3d55"><a href="#235040" label="[23:50:40]">&lt;stikonas&gt;</a></span><span class="message">unmatched-paren: the question is how do you trust your sha256sum then</span></div><div class="line" id="235047"><span class="nick" style="color:#8dd3c7"><a href="#235047" label="[23:50:47]">&lt;unmatched-paren&gt;</a></span><span class="message">yeah</span></div><div class="line" id="235057"><span class="nick" style="color:#6b8072"><a href="#235057" label="[23:50:57]">&lt;oriansj&gt;</a></span><span class="message">and then we need to do libre-silicon and other fun</span></div><div class="line" id="235215"><span class="nick" style="color:#6c3d55"><a href="#235215" label="[23:52:15]">&lt;stikonas&gt;</a></span><span class="message">implementing trusting trust attack on sha256sum is probably harder than in the compiler</span></div><div class="line" id="235323"><span class="nick" style="color:#6c3d55"><a href="#235323" label="[23:53:23]">&lt;stikonas&gt;</a></span><span class="message">actually it's not even relevant, since sha256sum does not produce output...</span></div><div class="line" id="235335"><span class="nick" style="color:#6c3d55"><a href="#235335" label="[23:53:35]">&lt;stikonas&gt;</a></span><span class="message">so any backdoor would be non-propagating</span></div><div class="line" id="235338"><span class="nick" style="color:#6b8072"><a href="#235338" label="[23:53:38]">&lt;oriansj&gt;</a></span><span class="message">also we can dump binaries to paper tape or CDs or other media for inspection from offline validators and use those same dumped binaries for running</span></div><div class="line" id="235349"><span class="nick" style="color:#8dd3c7"><a href="#235349" label="[23:53:49]">&lt;unmatched-paren&gt;</a></span><span class="message">even if we built a completely audited CPU, 99% of the world will probably STILL go on using their intel or AMD chips with Microsoft Windows 11... :(</span></div><div class="line" id="235446"><span class="nick" style="color:#6b8072"><a href="#235446" label="[23:54:46]">&lt;oriansj&gt;</a></span><span class="message">unmatched-paren: one can not save a man who wishes to drink poison</span></div><div class="line" id="235458"><span class="nick" style="color:#2e2a4a"><a href="#235458" label="[23:54:58]">&lt;muurkha&gt;</a></span><span class="message">I think less than 30% of the world uses intel and AMD chips with Microsoft Windows 11</span></div><div class="line" id="235506"><span class="nick" style="color:#2e2a4a"><a href="#235506" label="[23:55:06]">&lt;muurkha&gt;</a></span><span class="message">most people use hand computers now</span></div><div class="line" id="235531"><span class="nick" style="color:#6b8072"><a href="#235531" label="[23:55:31]">&lt;oriansj&gt;</a></span><span class="message">ARM+Android/iOS</span></div><div class="line" id="235548"><span class="nick" style="color:#8dd3c7"><a href="#235548" label="[23:55:48]">&lt;unmatched-paren&gt;</a></span><span class="message">muurkha: oh, i forgot that laptops are apparently considered to be outdated technology now by most people</span></div><div class="line" id="235747"><span class="nick" style="color:#6c3d55"><a href="#235747" label="[23:57:47]">&lt;stikonas&gt;</a></span><span class="message">didn't look like that during covid lockdowns...</span></div><div class="line" id="235803"><span class="nick" style="color:#6c3d55"><a href="#235803" label="[23:58:03]">&lt;stikonas&gt;</a></span><span class="message">everybody was buying pcs/laptops</span></div><br /></div></body></html>