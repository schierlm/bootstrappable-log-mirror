<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-12-31.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="005042"><span class="nick" style="color:#389600"><a href="#005042" label="[00:50:42]">&lt;stikonas&gt;</a></span><span class="message">well, some progress on posix-runner: <a rel="nofollow" href="https://stikonas.eu/files/bootstrap/Screenshot_20231230_234904.png">https://stikonas.eu/files/bootstrap/Screenshot_20231230_234904.png</a> </span></div><div class="line" id="005104"><span class="nick" style="color:#389600"><a href="#005104" label="[00:51:04]">&lt;stikonas&gt;</a></span><span class="message">successfully managed to run 2 trivial hello world programs using fork/execve...</span></div><div class="line" id="013929"><span class="nick" style="color:#8dd3c7"><a href="#013929" label="[01:39:29]">&lt;oriansj&gt;</a></span><span class="message">Googulator: ARM assembly had more in common with 6502 than it did with any of the other RISC processors; as the lead developer worked on the BBC micro which was 6502 based. And you are probably thinking of DEC's strong ARM which completely fixed ARM's instruction encoding but is not compatible with any of the other ARM chips beyound the assembly level</span></div><div class="line" id="040940"><span class="nick" style="color:#2e2a4a"><a href="#040940" label="[04:09:40]">&lt;pabs3&gt;</a></span><span class="message">anyone know if FreePascal is bootstrappable?</span></div><div class="line" id="050221"><span class="nick" style="color:#2e2a4a"><a href="#050221" label="[05:02:21]">&lt;pabs3&gt;</a></span><span class="message">ACTION finds <a rel="nofollow" href="https://bootstrapping.miraheze.org/wiki/Aesop">https://bootstrapping.miraheze.org/wiki/Aesop</a> </span></div><div class="line" id="161321"><span class="nick" style="color:#8dd3c7"><a href="#161321" label="[16:13:21]">&lt;oriansj&gt;</a></span><span class="message">pabs3: yeah, basically very few languages have been properly bootstrapped and have a maintained bootstrappable build path.</span></div><div class="line" id="161418"><span class="nick" style="color:#8dd3c7"><a href="#161418" label="[16:14:18]">&lt;oriansj&gt;</a></span><span class="message">So, there are many places where one can break new ground and become *the* expert on bootstrapping that language</span></div><div class="line" id="161514"><span class="nick" style="color:#389600"><a href="#161514" label="[16:15:14]">&lt;stikonas&gt;</a></span><span class="message">bootstrapping new languages should in principle be easier than hex0-&gt;GCC bootstrap...</span></div><div class="line" id="161528"><span class="nick" style="color:#389600"><a href="#161528" label="[16:15:28]">&lt;stikonas&gt;</a></span><span class="message">one can already use lots of different tools to bootstrap other languages</span></div><div class="line" id="162912"><span class="nick" style="color:#6b8072"><a href="#162912" label="[16:29:12]">&lt;AwesomeAdam54321&gt;</a></span><span class="message">pabs3: I was planning on porting GNU Pascal to GCC 4.9, but I'm unfamiliar with GCC so the project stalled</span></div><div class="line" id="174716"><span class="nick" style="color:#8dd3c7"><a href="#174716" label="[17:47:16]">&lt;oriansj&gt;</a></span><span class="message">AwesomeAdam54321: it is sometimes easier to just write your own compiler</span></div><div class="line" id="181630"><span class="nick" style="color:#389600"><a href="#181630" label="[18:16:30]">&lt;stikonas&gt;</a></span><span class="message">yeah, it doesn't have to be an optimal or fast...</span></div><div class="line" id="223444"><span class="nick" style="color:#389600"><a href="#223444" label="[22:34:44]">&lt;stikonas&gt;</a></span><span class="message">just pushed qutie a few fixes/features to posix-runner</span></div><div class="line" id="223541"><span class="nick" style="color:#389600"><a href="#223541" label="[22:35:41]">&lt;stikonas&gt;</a></span><span class="message">fork/execve seems to be working now (though probably not bare execve without fork yet)</span></div><div class="line" id="223557"><span class="nick" style="color:#389600"><a href="#223557" label="[22:35:57]">&lt;stikonas&gt;</a></span><span class="message">also plenty of other syscalls added</span></div><div class="line" id="223612"><span class="nick" style="color:#389600"><a href="#223612" label="[22:36:12]">&lt;stikonas&gt;</a></span><span class="message">even get_machine program now works</span></div><div class="line" id="223647"><span class="nick" style="color:#389600"><a href="#223647" label="[22:36:47]">&lt;stikonas&gt;</a></span><span class="message">though there are some issues with posix paths in M2libc/UEFI... I think it doesn't know that . is current directory...</span></div><div class="line" id="224342"><span class="nick" style="color:#389600"><a href="#224342" label="[22:43:42]">&lt;stikonas&gt;</a></span><span class="message">yeah, I think stage0-posix stuff should be mostly working now (except for kaem-optional for a couple of reasons)</span></div><div class="line" id="224347"><span class="nick" style="color:#389600"><a href="#224347" label="[22:43:47]">&lt;stikonas&gt;</a></span><span class="message">at least M2-Planet seems to run fine</span></div><div class="line" id="002725"><span class="nick" style="color:#389600"><a href="#002725" label="[00:27:25]">&lt;stikonas&gt;</a></span><span class="message">hmm, mes probaby has the same problem as kaem-optional...</span></div><div class="line" id="002749"><span class="nick" style="color:#389600"><a href="#002749" label="[00:27:49]">&lt;stikonas&gt;</a></span><span class="message">and instead of checking for file descriptor to be -1, it checks fd &lt; 0 ...</span></div><div class="line" id="002824"><span class="nick" style="color:#389600"><a href="#002824" label="[00:28:24]">&lt;stikonas&gt;</a></span><span class="message">I guess proper fix in the kernel would be to add per process file descriptors and map UEFI  fs to those per process fds...</span></div><div class="line" id="013207"><span class="nick" style="color:#8dd3c7"><a href="#013207" label="[01:32:07]">&lt;oriansj&gt;</a></span><span class="message">stikonas: sounds like a good start</span></div><div class="line" id="013257"><span class="nick" style="color:#389600"><a href="#013257" label="[01:32:57]">&lt;stikonas&gt;</a></span><span class="message">oriansj: yeah, just need  to debug some bugs and we should be good to go...</span></div><div class="line" id="013311"><span class="nick" style="color:#389600"><a href="#013311" label="[01:33:11]">&lt;stikonas&gt;</a></span><span class="message">well, I have some changes to M2libc that should be helpful, but probably need more...</span></div><div class="line" id="015848"><span class="nick" style="color:#389600"><a href="#015848" label="[01:58:48]">&lt;stikonas&gt;</a></span><span class="message">anyway, I've pushed my M2libc fixes to <a rel="nofollow" href="https://github.com/oriansj/M2libc/pull/50">https://github.com/oriansj/M2libc/pull/50</a> </span></div><div class="line" id="015855"><span class="nick" style="color:#389600"><a href="#015855" label="[01:58:55]">&lt;stikonas&gt;</a></span><span class="message">I think these should be helpful in any case</span></div><div class="line" id="015938"><span class="nick" style="color:#389600"><a href="#015938" label="[01:59:38]">&lt;stikonas&gt;</a></span><span class="message">fixes constructing full path in current working directory does not end in / and another fix for stuff like /path/./a</span></div><div class="line" id="024118"><span class="nick" style="color:#8dd3c7"><a href="#024118" label="[02:41:18]">&lt;oriansj&gt;</a></span><span class="message">today I played with the fact you can have 3 virtual page addresses pointing to the exact same physical address in memory; to create a ring buffer which can never exceed the bounds and loops perfectly with the performance of block writes such as if it didn't loop.</span></div><div class="line" id="024604"><span class="nick" style="color:#8dd3c7"><a href="#024604" label="[02:46:04]">&lt;oriansj&gt;</a></span><span class="message"> <a rel="nofollow" href="https://paste.debian.net/1302642/">https://paste.debian.net/1302642/</a> </span></div><div class="line" id="150132"><span class="nick" style="color:#8dd3c7"><a href="#150132" label="[15:01:32]">&lt;oriansj&gt;</a></span><span class="message">odd that higher level languages like scheme, haskell or the like don't have it; despite how easy it is to implement in scheme. but i am guessing it is because Windows didn't support it until Windows 11 but Linux and the BSDs appear to have supported it for a while.</span></div><div class="line" id="150637"><span class="nick" style="color:#8dd3c7"><a href="#150637" label="[15:06:37]">&lt;oriansj&gt;</a></span><span class="message">^in scheme^in C/asm^</span></div><div class="line" id="160139"><span class="nick" style="color:#389600"><a href="#160139" label="[16:01:39]">&lt;stikonas&gt;</a></span><span class="message">hmm, I think some of my problems with posix-runner is due to memory allocation failures... Something weird is there. I.e. malloc can return 0 on my VM or even worse, returns 4 on baremetal</span></div><div class="line" id="160211"><span class="nick" style="color:#389600"><a href="#160211" label="[16:02:11]">&lt;stikonas&gt;</a></span><span class="message">so even if (ptr == NULL) check is not doing its job</span></div><div class="line" id="160404"><span class="nick" style="color:#389600"><a href="#160404" label="[16:04:04]">&lt;stikonas&gt;</a></span><span class="message">oriansj: can we merge <a rel="nofollow" href="https://github.com/oriansj/M2libc/pull/50/files">https://github.com/oriansj/M2libc/pull/50/files</a>  in the meantime?</span></div><div class="line" id="160420"><span class="nick" style="color:#389600"><a href="#160420" label="[16:04:20]">&lt;stikonas&gt;</a></span><span class="message">I think that does help with posix compatibility on UEFI...</span></div><br /></div></body></html>