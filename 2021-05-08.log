<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-05-08.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="001440"><span class="nick" style="color:#389600"><a href="#001440" label="[00:14:40]">&lt;stikonas&gt;</a></span><span class="message">melg8: (cc fossy): maybe pragmatic thing for now would be to put timestamp erasing code into a separate script?</span></div><div class="line" id="001454"><span class="nick" style="color:#389600"><a href="#001454" label="[00:14:54]">&lt;stikonas&gt;</a></span><span class="message">then you can run it after bootstrap is done</span></div><div class="line" id="001713"><span class="nick" style="color:#389600"><a href="#001713" label="[00:17:13]">&lt;stikonas&gt;</a></span><span class="message">melg8: by the way, thanks again for looking at coreutils 8.32. Please don't be discouraged by high number of comments on the PR</span></div><div class="line" id="001941"><span class="nick" style="color:#389600"><a href="#001941" label="[00:19:41]">&lt;stikonas&gt;</a></span><span class="message">all those GNU packages ship a lot of pre-gen files, so it takes a bit of experience to get familiarity with it</span></div><div class="line" id="002006"><span class="nick" style="color:#8dd3c7"><a href="#002006" label="[00:20:06]">&lt;melg8&gt;</a></span><span class="message">It would be nice if we discuss place and form of my reproducibility script (because i would like to develop it more with addition of some rm-s of logs and other stuff to make reproducible builds which is not fixable inline) so it would be nice to have some decision now, so i can work on it not fearing it will not survive code review.</span></div><div class="line" id="002113"><span class="nick" style="color:#8dd3c7"><a href="#002113" label="[00:21:13]">&lt;melg8&gt;</a></span><span class="message">I'm fine with review so far, and really glad that you and other people from community help and answer my questions, even though will not lie single touch command takes alot more than i thought it will take)</span></div><div class="line" id="002149"><span class="nick" style="color:#389600"><a href="#002149" label="[00:21:49]">&lt;stikonas&gt;</a></span><span class="message">oh yeah, I understand you, live-bootstrap is harder than normal distro packages, I know if first hand...</span></div><div class="line" id="002202"><span class="nick" style="color:#6b8072"><a href="#002202" label="[00:22:02]">&lt;Hagfish&gt;</a></span><span class="message">the fact it takes a lot of effort is proof of how valuable the work is :)</span></div><div class="line" id="002210"><span class="nick" style="color:#6b8072"><a href="#002210" label="[00:22:10]">&lt;Hagfish&gt;</a></span><span class="message">if it were easy, someone would have done it already :)</span></div><div class="line" id="002223"><span class="nick" style="color:#389600"><a href="#002223" label="[00:22:23]">&lt;stikonas&gt;</a></span><span class="message">as for reproducibiltity script, I can try to think a bit about it, but it's just my opinion, it would be nice to get other opinions too</span></div><div class="line" id="002401"><span class="nick" style="color:#8dd3c7"><a href="#002401" label="[00:24:01]">&lt;melg8&gt;</a></span><span class="message">i want at least some &quot;dump&quot; of ad-hock fixes which are not affecting behaviour of build, but just ignore/alternate some parts of final image - so i can check final sha of whole thing and detect if something changed, when we not expected it to change + add it under CI testing</span></div><div class="line" id="002421"><span class="nick" style="color:#6b8072"><a href="#002421" label="[00:24:21]">&lt;Hagfish&gt;</a></span><span class="message">there's certainly some merit to having all the &quot;reproducibility-only&quot; fixes in a script that's dedicated to that task</span></div><div class="line" id="002453"><span class="nick" style="color:#389600"><a href="#002453" label="[00:24:53]">&lt;stikonas&gt;</a></span><span class="message">so I think most people would care that output of bootstrapping would be reproducible. But then we need to define what is output. It does not have to be the whole file system there. At the moment we have mix of 3 things there 1) installed files which we want to be reproducible, 2) tarred sources which are checksummed already and 3) build directories/transient files, etc, which I think we don't really need to keep fully reproducible</span></div><div class="line" id="002457"><span class="nick" style="color:#6b8072"><a href="#002457" label="[00:24:57]">&lt;Hagfish&gt;</a></span><span class="message">normally i'd say that repro fixes should be separate patches so that they can be upstreamed, but it doesn't make sense to apply a patch to a deprecated version</span></div><div class="line" id="002513"><span class="nick" style="color:#6b8072"><a href="#002513" label="[00:25:13]">&lt;Hagfish&gt;</a></span><span class="message">stikonas: good point, yes</span></div><div class="line" id="002515"><span class="nick" style="color:#389600"><a href="#002515" label="[00:25:15]">&lt;stikonas&gt;</a></span><span class="message">but at the moment all those 3 categories are in one pot, not easy to separate themn</span></div><div class="line" id="002551"><span class="nick" style="color:#389600"><a href="#002551" label="[00:25:51]">&lt;stikonas&gt;</a></span><span class="message">Hagfish: well, that particular script is removing timestamps</span></div><div class="line" id="002625"><span class="nick" style="color:#6b8072"><a href="#002625" label="[00:26:25]">&lt;Hagfish&gt;</a></span><span class="message">and the timestamps are only visible to the filesystem, not the contents of the files, right?</span></div><div class="line" id="002642"><span class="nick" style="color:#389600"><a href="#002642" label="[00:26:42]">&lt;stikonas&gt;</a></span><span class="message">well, yes, but they are accessible to programs</span></div><div class="line" id="002646"><span class="nick" style="color:#389600"><a href="#002646" label="[00:26:46]">&lt;stikonas&gt;</a></span><span class="message">so something can read them</span></div><div class="line" id="002659"><span class="nick" style="color:#6b8072"><a href="#002659" label="[00:26:59]">&lt;Hagfish&gt;</a></span><span class="message">maybe that &quot;something&quot; should be responsible for fixing them?</span></div><div class="line" id="002702"><span class="nick" style="color:#389600"><a href="#002702" label="[00:27:02]">&lt;stikonas&gt;</a></span><span class="message">and it affects checksum of the whole tar of fs</span></div><div class="line" id="002704"><span class="nick" style="color:#8dd3c7"><a href="#002704" label="[00:27:04]">&lt;melg8&gt;</a></span><span class="message">timestamps affect final hash - if you tar the whole thing</span></div><div class="line" id="002734"><span class="nick" style="color:#389600"><a href="#002734" label="[00:27:34]">&lt;stikonas&gt;</a></span><span class="message">so that's why I think for now it might be easiest to have those few lines to clean up timestamps in a separate script</span></div><div class="line" id="002739"><span class="nick" style="color:#389600"><a href="#002739" label="[00:27:39]">&lt;stikonas&gt;</a></span><span class="message">something like cleanup-timestamps.sh</span></div><div class="line" id="002741"><span class="nick" style="color:#6b8072"><a href="#002741" label="[00:27:41]">&lt;Hagfish&gt;</a></span><span class="message">does modern tar let you specify a date to set the timestamps too?</span></div><div class="line" id="002743"><span class="nick" style="color:#389600"><a href="#002743" label="[00:27:43]">&lt;stikonas&gt;</a></span><span class="message">which you can run if you want</span></div><div class="line" id="002806"><span class="nick" style="color:#389600"><a href="#002806" label="[00:28:06]">&lt;stikonas&gt;</a></span><span class="message">we can still push it into the repo</span></div><div class="line" id="002834"><span class="nick" style="color:#389600"><a href="#002834" label="[00:28:34]">&lt;stikonas&gt;</a></span><span class="message">then we would still be able to inspect timestamps for debugging purposes</span></div><div class="line" id="002859"><span class="nick" style="color:#389600"><a href="#002859" label="[00:28:59]">&lt;stikonas&gt;</a></span><span class="message">e.g. when we were looking at gforce_de1977's issues, we did look a bit at timestmaps</span></div><div class="line" id="002859"><span class="nick" style="color:#6b8072"><a href="#002859" label="[00:28:59]">&lt;Hagfish&gt;</a></span><span class="message">yeah, is this just for debugging?  what's the first step which checks the hash of a generated tar?</span></div><div class="line" id="002913"><span class="nick" style="color:#389600"><a href="#002913" label="[00:29:13]">&lt;stikonas&gt;</a></span><span class="message">yeah, timestamps are only useful for debugging</span></div><div class="line" id="002918"><span class="nick" style="color:#389600"><a href="#002918" label="[00:29:18]">&lt;stikonas&gt;</a></span><span class="message">it's just some metadata about file</span></div><div class="line" id="002948"><span class="nick" style="color:#80b1d3"><a href="#002948" label="[00:29:48]">&lt;vagrantc&gt;</a></span><span class="message">yes, newer tar supports some feaures regarding timestamps: <a rel="nofollow" href="https://reproducible-builds.org/docs/archives/">https://reproducible-builds.org/docs/archives/</a> </span></div><div class="line" id="003001"><span class="nick" style="color:#80b1d3"><a href="#003001" label="[00:30:01]">&lt;vagrantc&gt;</a></span><span class="message">as well as a few other things</span></div><div class="line" id="003009"><span class="nick" style="color:#6b8072"><a href="#003009" label="[00:30:09]">&lt;Hagfish&gt;</a></span><span class="message">if the timestamps only need to be right in the unhappy path, then yeah, it sounds like the code for setting them should be in a separate script which isn't usually run</span></div><div class="line" id="003039"><span class="nick" style="color:#80b1d3"><a href="#003039" label="[00:30:39]">&lt;vagrantc&gt;</a></span><span class="message">to get all the reproducibility features i'm aware of requires gnu tar 1.28+</span></div><div class="line" id="003047"><span class="nick" style="color:#6b8072"><a href="#003047" label="[00:30:47]">&lt;Hagfish&gt;</a></span><span class="message">in the happy path, we can presumably use newer tar and do one final repro check at the end</span></div><div class="line" id="003115"><span class="nick" style="color:#389600"><a href="#003115" label="[00:31:15]">&lt;stikonas&gt;</a></span><span class="message">well, even live-bootstrap has tar1.34</span></div><div class="line" id="003130"><span class="nick" style="color:#6b8072"><a href="#003130" label="[00:31:30]">&lt;Hagfish&gt;</a></span><span class="message">oh, nice</span></div><div class="line" id="003131"><span class="nick" style="color:#389600"><a href="#003131" label="[00:31:31]">&lt;stikonas&gt;</a></span><span class="message">but I think if you want to tar the whole thing up, you have to do it from outside</span></div><div class="line" id="003139"><span class="nick" style="color:#389600"><a href="#003139" label="[00:31:39]">&lt;stikonas&gt;</a></span><span class="message">or is tar smart enough</span></div><div class="line" id="003150"><span class="nick" style="color:#389600"><a href="#003150" label="[00:31:50]">&lt;stikonas&gt;</a></span><span class="message">not to include the archive that is being written</span></div><div class="line" id="003220"><span class="nick" style="color:#389600"><a href="#003220" label="[00:32:20]">&lt;stikonas&gt;</a></span><span class="message">hmm, maybe you can just do something with find &quot;everything&quot; -xargs | tar cvf ...</span></div><div class="line" id="003221"><span class="nick" style="color:#80b1d3"><a href="#003221" label="[00:32:21]">&lt;vagrantc&gt;</a></span><span class="message">can probably exclude itself</span></div><div class="line" id="003257"><span class="nick" style="color:#80b1d3"><a href="#003257" label="[00:32:57]">&lt;vagrantc&gt;</a></span><span class="message">tar --exclude=somefile.tar</span></div><div class="line" id="003305"><span class="nick" style="color:#6b8072"><a href="#003305" label="[00:33:05]">&lt;Hagfish&gt;</a></span><span class="message">yeah, that's smart</span></div><div class="line" id="003339"><span class="nick" style="color:#6b8072"><a href="#003339" label="[00:33:39]">&lt;Hagfish&gt;</a></span><span class="message">in terms of the reproducibility of the live-bootstrap process, is there an &quot;end&quot; point at which it makes sense to calculate the &quot;final&quot; hash?</span></div><div class="line" id="003356"><span class="nick" style="color:#80b1d3"><a href="#003356" label="[00:33:56]">&lt;vagrantc&gt;</a></span><span class="message">melg8: really glad to hear you're looking at the reproducibility of the bootstrapping stuff :)</span></div><div class="line" id="003414"><span class="nick" style="color:#389600"><a href="#003414" label="[00:34:14]">&lt;stikonas&gt;</a></span><span class="message">one way, we can have a bit more order in fs, is to try to move /after/package-* directories into /after/sources/package-*</span></div><div class="line" id="003432"><span class="nick" style="color:#389600"><a href="#003432" label="[00:34:32]">&lt;stikonas&gt;</a></span><span class="message">then all temp stuff is basically inside subdirectory</span></div><div class="line" id="003436"><span class="nick" style="color:#389600"><a href="#003436" label="[00:34:36]">&lt;stikonas&gt;</a></span><span class="message">which we can exclude</span></div><div class="line" id="003439"><span class="nick" style="color:#6b8072"><a href="#003439" label="[00:34:39]">&lt;Hagfish&gt;</a></span><span class="message">yeah, nice</span></div><div class="line" id="003441"><span class="nick" style="color:#389600"><a href="#003441" label="[00:34:41]">&lt;stikonas&gt;</a></span><span class="message">although, that requires a fair bit of work</span></div><div class="line" id="003517"><span class="nick" style="color:#80b1d3"><a href="#003517" label="[00:35:17]">&lt;vagrantc&gt;</a></span><span class="message">what are the outputs of &quot;live-bootstrap&quot; ? a gcc binary? several other tools?</span></div><div class="line" id="003526"><span class="nick" style="color:#389600"><a href="#003526" label="[00:35:26]">&lt;stikonas&gt;</a></span><span class="message">vagrantc: at the moment it's just the whole filesystem</span></div><div class="line" id="003542"><span class="nick" style="color:#389600"><a href="#003542" label="[00:35:42]">&lt;stikonas&gt;</a></span><span class="message">mix of binaries and installed files, temporary build directories and also original sources</span></div><div class="line" id="003607"><span class="nick" style="color:#389600"><a href="#003607" label="[00:36:07]">&lt;stikonas&gt;</a></span><span class="message">it would be nice to have just installed files in outputs</span></div><div class="line" id="003613"><span class="nick" style="color:#6b8072"><a href="#003613" label="[00:36:13]">&lt;Hagfish&gt;</a></span><span class="message">i'm worried that use cases like this, and the Stow work, will imply the need for some sort of custom overlay filesystem</span></div><div class="line" id="003613"><span class="nick" style="color:#80b1d3"><a href="#003613" label="[00:36:13]">&lt;vagrantc&gt;</a></span><span class="message">so then a tar file or other archive makes some sense to be the &quot;final&quot; thing to hash (obviously after purging temporary files</span></div><div class="line" id="003658"><span class="nick" style="color:#6b8072"><a href="#003658" label="[00:36:58]">&lt;Hagfish&gt;</a></span><span class="message">you can tell tar to exclude based on a pattern, apparently</span></div><div class="line" id="003709"><span class="nick" style="color:#389600"><a href="#003709" label="[00:37:09]">&lt;stikonas&gt;</a></span><span class="message">bauen1: will probably know more about Stow work</span></div><div class="line" id="003716"><span class="nick" style="color:#389600"><a href="#003716" label="[00:37:16]">&lt;stikonas&gt;</a></span><span class="message">I don't realy know much about it yet</span></div><div class="line" id="003746"><span class="nick" style="color:#6b8072"><a href="#003746" label="[00:37:46]">&lt;Hagfish&gt;</a></span><span class="message">hopefully it doesn't require extra layers of abstraction</span></div><div class="line" id="003805"><span class="nick" style="color:#6b8072"><a href="#003805" label="[00:38:05]">&lt;Hagfish&gt;</a></span><span class="message">just being able to exclude stuff, and whitelist stuff, should be enough</span></div><div class="line" id="003848"><span class="nick" style="color:#389600"><a href="#003848" label="[00:38:48]">&lt;stikonas&gt;</a></span><span class="message">maybe we can try to exclude after/*-* pattern from tar?</span></div><div class="line" id="003939"><span class="nick" style="color:#6b8072"><a href="#003939" label="[00:39:39]">&lt;Hagfish&gt;</a></span><span class="message">what is the significance of the dash?</span></div><div class="line" id="003943"><span class="nick" style="color:#389600"><a href="#003943" label="[00:39:43]">&lt;stikonas&gt;</a></span><span class="message">that mostly catch installed package files (binaries and some data files)</span></div><div class="line" id="003949"><span class="nick" style="color:#389600"><a href="#003949" label="[00:39:49]">&lt;stikonas&gt;</a></span><span class="message">Hagfish: oh, that's just how we name packages</span></div><div class="line" id="003952"><span class="nick" style="color:#389600"><a href="#003952" label="[00:39:52]">&lt;stikonas&gt;</a></span><span class="message">name-version</span></div><div class="line" id="003956"><span class="nick" style="color:#6b8072"><a href="#003956" label="[00:39:56]">&lt;Hagfish&gt;</a></span><span class="message">oh, cool</span></div><div class="line" id="004014"><span class="nick" style="color:#389600"><a href="#004014" label="[00:40:14]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/tree/master/sysa">https://github.com/fosslinux/live-bootstrap/tree/master/sysa</a> </span></div><div class="line" id="004018"><span class="nick" style="color:#389600"><a href="#004018" label="[00:40:18]">&lt;stikonas&gt;</a></span><span class="message">with a few exceptions</span></div><div class="line" id="004021"><span class="nick" style="color:#389600"><a href="#004021" label="[00:40:21]">&lt;stikonas&gt;</a></span><span class="message">maybe mes, untar</span></div><div class="line" id="004028"><span class="nick" style="color:#389600"><a href="#004028" label="[00:40:28]">&lt;stikonas&gt;</a></span><span class="message">that might need special handling</span></div><div class="line" id="004100"><span class="nick" style="color:#389600"><a href="#004100" label="[00:41:00]">&lt;stikonas&gt;</a></span><span class="message">melg8: what do you think about this way?</span></div><div class="line" id="004132"><span class="nick" style="color:#389600"><a href="#004132" label="[00:41:32]">&lt;stikonas&gt;</a></span><span class="message">i.e. taring stuff but excluding temporary build dirs</span></div><div class="line" id="004200"><span class="nick" style="color:#389600"><a href="#004200" label="[00:42:00]">&lt;stikonas&gt;</a></span><span class="message">that might not even need touch</span></div><div class="line" id="004209"><span class="nick" style="color:#389600"><a href="#004209" label="[00:42:09]">&lt;stikonas&gt;</a></span><span class="message">although, coreutils work is useful in any case</span></div><div class="line" id="004252"><span class="nick" style="color:#8dd3c7"><a href="#004252" label="[00:42:52]">&lt;melg8&gt;</a></span><span class="message">I get idea of tar - that could be useful as part of final products outcome, but i interested more in full image products been checked for bit per bit reproducibility, and only where we all agree it's irrelevant timestamps stuff - it igntored on per file basis, but not like exclude_stuff* masks, why? because i want to setup some ci with self check</span></div><div class="line" id="004253"><span class="nick" style="color:#8dd3c7"><a href="#004253" label="[00:42:53]">&lt;melg8&gt;</a></span><span class="message">at the end, so never do we ever encounter stuff like automake/autoconf producing 0.5 procent of time failures. Because this stuff can be observed only by logs (which start to differ) and can not be observed in highly stripped result</span></div><div class="line" id="004325"><span class="nick" style="color:#389600"><a href="#004325" label="[00:43:25]">&lt;stikonas&gt;</a></span><span class="message">well, ok, I can see how your full checksum might sometimes be useful for debugging too</span></div><div class="line" id="004404"><span class="nick" style="color:#80b1d3"><a href="#004404" label="[00:44:04]">&lt;vagrantc&gt;</a></span><span class="message">melg8: if the tarball is bit-for-bit identical, all the individual bits inside are too, though ...</span></div><div class="line" id="004416"><span class="nick" style="color:#389600"><a href="#004416" label="[00:44:16]">&lt;stikonas&gt;</a></span><span class="message">vagrantc: well, if not, that's when the problem is</span></div><div class="line" id="004423"><span class="nick" style="color:#389600"><a href="#004423" label="[00:44:23]">&lt;stikonas&gt;</a></span><span class="message">if we don't tar build directories</span></div><div class="line" id="004430"><span class="nick" style="color:#389600"><a href="#004430" label="[00:44:30]">&lt;stikonas&gt;</a></span><span class="message">we'll not be able to tell what went wrong</span></div><div class="line" id="004434"><span class="nick" style="color:#389600"><a href="#004434" label="[00:44:34]">&lt;stikonas&gt;</a></span><span class="message">just checksum doesn't match</span></div><div class="line" id="004501"><span class="nick" style="color:#389600"><a href="#004501" label="[00:45:01]">&lt;stikonas&gt;</a></span><span class="message">although, if something went wrong, then I think build aborts, so you need to invoke building image manually anyway</span></div><div class="line" id="004504"><span class="nick" style="color:#80b1d3"><a href="#004504" label="[00:45:04]">&lt;vagrantc&gt;</a></span><span class="message">but automake/autoconf aren't likely to produce reproducible output</span></div><div class="line" id="004520"><span class="nick" style="color:#389600"><a href="#004520" label="[00:45:20]">&lt;stikonas&gt;</a></span><span class="message">melg8: said it's not too badf</span></div><div class="line" id="004525"><span class="nick" style="color:#389600"><a href="#004525" label="[00:45:25]">&lt;stikonas&gt;</a></span><span class="message">just a few kb of differences</span></div><div class="line" id="004528"><span class="nick" style="color:#389600"><a href="#004528" label="[00:45:28]">&lt;stikonas&gt;</a></span><span class="message">but I haven't tried</span></div><div class="line" id="004546"><span class="nick" style="color:#80b1d3"><a href="#004546" label="[00:45:46]">&lt;vagrantc&gt;</a></span><span class="message">well, if you want to keep that for debugging, sure</span></div><div class="line" id="004558"><span class="nick" style="color:#389600"><a href="#004558" label="[00:45:58]">&lt;stikonas&gt;</a></span><span class="message">well, melg8 wants that :)</span></div><div class="line" id="004616"><span class="nick" style="color:#80b1d3"><a href="#004616" label="[00:46:16]">&lt;vagrantc&gt;</a></span><span class="message">alternately, you could build two tarballs, one with the toolchain, one with the transient build artifacts (if you need to debug it)</span></div><div class="line" id="004618"><span class="nick" style="color:#8dd3c7"><a href="#004618" label="[00:46:18]">&lt;melg8&gt;</a></span><span class="message">it's more like - 1 defect is not detected, logs differs, final tar ok - nobody cares, second defect, third, final tar okay, than some day some refactoring triggers cascade of that baggage and we need to figure out that, oh wait some gnu tool at the start of the road is not properly working on some situations</span></div><div class="line" id="004622"><span class="nick" style="color:#389600"><a href="#004622" label="[00:46:22]">&lt;stikonas&gt;</a></span><span class="message">but I think fossy wants to put those timestamp stripping commands into a separate script</span></div><div class="line" id="004752"><span class="nick" style="color:#8dd3c7"><a href="#004752" label="[00:47:52]">&lt;melg8&gt;</a></span><span class="message">i fine with separate script too, but i think it should be at least inside of bootstrappable itself - so it can selfcheck on different runs (qemu, chroot, baremetal someday etc)</span></div><div class="line" id="004829"><span class="nick" style="color:#389600"><a href="#004829" label="[00:48:29]">&lt;stikonas&gt;</a></span><span class="message">yeah, I'm fine keeping it inside live-bootstrpa</span></div><div class="line" id="004841"><span class="nick" style="color:#389600"><a href="#004841" label="[00:48:41]">&lt;stikonas&gt;</a></span><span class="message">and I think fossy will agree, but we'll see</span></div><div class="line" id="004845"><span class="nick" style="color:#389600"><a href="#004845" label="[00:48:45]">&lt;stikonas&gt;</a></span><span class="message">I'm not fossy :)</span></div><div class="line" id="004924"><span class="nick" style="color:#389600"><a href="#004924" label="[00:49:24]">&lt;stikonas&gt;</a></span><span class="message">well, like fossy said, try to keep it optional</span></div><div class="line" id="004942"><span class="nick" style="color:#389600"><a href="#004942" label="[00:49:42]">&lt;stikonas&gt;</a></span><span class="message">if it's a separate script, then it's automatically optional, if you want, you can start it</span></div><div class="line" id="005020"><span class="nick" style="color:#389600"><a href="#005020" label="[00:50:20]">&lt;stikonas&gt;</a></span><span class="message">or we can even add some config file to enable automatically running optional stuff</span></div><div class="line" id="005033"><span class="nick" style="color:#6b8072"><a href="#005033" label="[00:50:33]">&lt;Hagfish&gt;</a></span><span class="message">nice</span></div><div class="line" id="005043"><span class="nick" style="color:#8dd3c7"><a href="#005043" label="[00:50:43]">&lt;melg8&gt;</a></span><span class="message">yea but one thing i'm not sure - can ci trigger it if qemu finished building part?</span></div><div class="line" id="005112"><span class="nick" style="color:#389600"><a href="#005112" label="[00:51:12]">&lt;stikonas&gt;</a></span><span class="message">well, depends on how you set up your ci</span></div><div class="line" id="005209"><span class="nick" style="color:#389600"><a href="#005209" label="[00:52:09]">&lt;stikonas&gt;</a></span><span class="message">e.g. you can have create some file &quot;config&quot; that is put inside initramfs by rootfs.py which has some config options. Then run2.sh reads config file and if it finds that optional config option, it runs another script</span></div><div class="line" id="005233"><span class="nick" style="color:#389600"><a href="#005233" label="[00:52:33]">&lt;stikonas&gt;</a></span><span class="message">so &quot;config&quot; file then is per user bootstrapping customization</span></div><div class="line" id="005246"><span class="nick" style="color:#389600"><a href="#005246" label="[00:52:46]">&lt;stikonas&gt;</a></span><span class="message">(some other option might be, start bootstrapping particular distro)</span></div><div class="line" id="005251"><span class="nick" style="color:#389600"><a href="#005251" label="[00:52:51]">&lt;stikonas&gt;</a></span><span class="message">after core-bootstrap is done</span></div><div class="line" id="005323"><span class="nick" style="color:#389600"><a href="#005323" label="[00:53:23]">&lt;stikonas&gt;</a></span><span class="message">we there are a few things where optional stuff might be useful</span></div><div class="line" id="005340"><span class="nick" style="color:#389600"><a href="#005340" label="[00:53:40]">&lt;stikonas&gt;</a></span><span class="message">now regarding current CI, it will need rethinking anyway</span></div><div class="line" id="005345"><span class="nick" style="color:#389600"><a href="#005345" label="[00:53:45]">&lt;stikonas&gt;</a></span><span class="message">because we started hitting 2h limit</span></div><div class="line" id="005504"><span class="nick" style="color:#8dd3c7"><a href="#005504" label="[00:55:04]">&lt;melg8&gt;</a></span><span class="message">i for some reason think that this project is more like pathfinder/demonstrator/trusted check and other distros will maybe use it as reference for rewrite with their own infrastructure/methods/languages/packages, but will see.</span></div><div class="line" id="005537"><span class="nick" style="color:#389600"><a href="#005537" label="[00:55:37]">&lt;stikonas&gt;</a></span><span class="message">maybe...</span></div><div class="line" id="005544"><span class="nick" style="color:#389600"><a href="#005544" label="[00:55:44]">&lt;stikonas&gt;</a></span><span class="message">well, guix has their own implementation</span></div><div class="line" id="005600"><span class="nick" style="color:#389600"><a href="#005600" label="[00:56:00]">&lt;stikonas&gt;</a></span><span class="message">although, guix is what started it and predates live-bootstrap</span></div><div class="line" id="005652"><span class="nick" style="color:#6b8072"><a href="#005652" label="[00:56:52]">&lt;Hagfish&gt;</a></span><span class="message">live-bootstrap is quite nice in terms of creating outputs with known hashes, which could be used to create the input for a separate process (from the perspective of the CI)</span></div><div class="line" id="005711"><span class="nick" style="color:#6b8072"><a href="#005711" label="[00:57:11]">&lt;Hagfish&gt;</a></span><span class="message">finding a nice place to split it down the middle, though, might not be easy</span></div><div class="line" id="005727"><span class="nick" style="color:#389600"><a href="#005727" label="[00:57:27]">&lt;stikonas&gt;</a></span><span class="message">yes</span></div><div class="line" id="005738"><span class="nick" style="color:#389600"><a href="#005738" label="[00:57:38]">&lt;stikonas&gt;</a></span><span class="message">and creating nice outputs is not easy either</span></div><div class="line" id="005747"><span class="nick" style="color:#389600"><a href="#005747" label="[00:57:47]">&lt;stikonas&gt;</a></span><span class="message">but maybe will be better if Stowed packages</span></div><div class="line" id="005752"><span class="nick" style="color:#6b8072"><a href="#005752" label="[00:57:52]">&lt;Hagfish&gt;</a></span><span class="message">yeah, i was wondering about the &quot;artefacts&quot;</span></div><div class="line" id="005847"><span class="nick" style="color:#389600"><a href="#005847" label="[00:58:47]">&lt;stikonas&gt;</a></span><span class="message">initially, I  thought everything is much simpler</span></div><div class="line" id="005850"><span class="nick" style="color:#6b8072"><a href="#005850" label="[00:58:50]">&lt;Hagfish&gt;</a></span><span class="message">it would be kinda cool if it could produce, say, Debian packages early on, so that later CI jobs could just pull in those packages from Debian repos</span></div><div class="line" id="005859"><span class="nick" style="color:#8dd3c7"><a href="#005859" label="[00:58:59]">&lt;melg8&gt;</a></span><span class="message">once live-bootstrap stable and produce results reliably - i would try to repeat steps but with guidance of nix system, and full control of what steps, what deps, and what hashes are there - using nix store + maybe testing. But live-bootstrap will bring me trust, that compiled nix executable is not compromised itself - if hashes are the same at the</span></div><div class="line" id="005900"><span class="nick" style="color:#8dd3c7"><a href="#005900" label="[00:59:00]">&lt;melg8&gt;</a></span><span class="message">end of day</span></div><div class="line" id="005904"><span class="nick" style="color:#389600"><a href="#005904" label="[00:59:04]">&lt;stikonas&gt;</a></span><span class="message">once you bootstrapped to tcc, (maybe gcc), things will be really simple</span></div><div class="line" id="010000"><span class="nick" style="color:#6b8072"><a href="#010000" label="[01:00:00]">&lt;Hagfish&gt;</a></span><span class="message">it would be much simpler if each step only relied on one binary that was produced in the previous step</span></div><div class="line" id="010003"><span class="nick" style="color:#389600"><a href="#010003" label="[01:00:03]">&lt;stikonas&gt;</a></span><span class="message">but once you start doing it, there are all kinds of things and issues you don't expect in advance</span></div><div class="line" id="010008"><span class="nick" style="color:#6b8072"><a href="#010008" label="[01:00:08]">&lt;Hagfish&gt;</a></span><span class="message">right</span></div><div class="line" id="010025"><span class="nick" style="color:#389600"><a href="#010025" label="[01:00:25]">&lt;stikonas&gt;</a></span><span class="message">well, in practice we need multiple binaries</span></div><div class="line" id="010033"><span class="nick" style="color:#389600"><a href="#010033" label="[01:00:33]">&lt;stikonas&gt;</a></span><span class="message">but at the moment we can't even track which ones are used</span></div><div class="line" id="010037"><span class="nick" style="color:#389600"><a href="#010037" label="[01:00:37]">&lt;stikonas&gt;</a></span><span class="message">because everything is in one pot</span></div><div class="line" id="010043"><span class="nick" style="color:#6b8072"><a href="#010043" label="[01:00:43]">&lt;Hagfish&gt;</a></span><span class="message">wow, yes</span></div><div class="line" id="010107"><span class="nick" style="color:#389600"><a href="#010107" label="[01:01:07]">&lt;stikonas&gt;</a></span><span class="message">that's why packages and eventually chrooted builds inside live-bootstrap might make process less messy</span></div><div class="line" id="010122"><span class="nick" style="color:#6b8072"><a href="#010122" label="[01:01:22]">&lt;Hagfish&gt;</a></span><span class="message">yup, i can see the appeal of that now</span></div><div class="line" id="010209"><span class="nick" style="color:#6b8072"><a href="#010209" label="[01:02:09]">&lt;Hagfish&gt;</a></span><span class="message">bootstrapping (or perhaps more accurately &quot;the problem of not having a bootstrap&quot;) is starting to seem like a &quot;hyperobject&quot; (a term i recently learned)</span></div><div class="line" id="013305"><span class="nick" style="color:#6d2462"><a href="#013305" label="[01:33:05]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: there is a very good reason why once we get GCC and Guile, I am strongly in favor of punting the rest of bootstrapping thw world work into guix and nix's hands. The porting and tweaking and simplifying work we have to do could take decades; without even looking at all the extra bootstrapping pieces the other distros would need to have done.</span></div><div class="line" id="013328"><span class="nick" style="color:#6d2462"><a href="#013328" label="[01:33:28]">&lt;OriansJ&gt;</a></span><span class="message">Let someone else figure out how to make a guix/nix package to bootstrap Debian o</span></div><div class="line" id="013346"><span class="nick" style="color:#6d2462"><a href="#013346" label="[01:33:46]">&lt;OriansJ&gt;</a></span><span class="message">or slack or gentoo or arch or etc</span></div><div class="line" id="013436"><span class="nick" style="color:#6d2462"><a href="#013436" label="[01:34:36]">&lt;OriansJ&gt;</a></span><span class="message">The pieces we already have will need lots of love to work on PowerPC64le, RISC-V and other architectures</span></div><div class="line" id="013908"><span class="nick" style="color:#6d2462"><a href="#013908" label="[01:39:08]">&lt;OriansJ&gt;</a></span><span class="message">Heck, think of the C features that need work or implementation in M2-Planet that would be really helpful (Like pointer arithmetic and array[i][j] behavior etc) supporting more foundational pieces.</span></div><div class="line" id="014235"><span class="nick" style="color:#6d2462"><a href="#014235" label="[01:42:35]">&lt;OriansJ&gt;</a></span><span class="message">or imagine the possibilities of a binutils built at the M2-Planet stage, that MesCC could use. (Then janneke can just use standard binutils to port MesCC, rather than having to deal with the limitations of mescc-tools)</span></div><div class="line" id="014542"><span class="nick" style="color:#6b8072"><a href="#014542" label="[01:45:42]">&lt;Hagfish&gt;</a></span><span class="message">yeah, there's a natural division of labour between pre-gcc and post-gcc work, but i'm sure that won't stop people from having a foot on each side of the line, if there's work on both they find interesting</span></div><div class="line" id="014806"><span class="nick" style="color:#8dd3c7"><a href="#014806" label="[01:48:06]">&lt;melg8&gt;</a></span><span class="message">OriansJ hi, where can i find c equivalent to this stage <a rel="nofollow" href="https://github.com/oriansj/stage0/blob/master/stage2/cc_x86.s">https://github.com/oriansj/stage0/blob/master/stage2/cc_x86.s</a>  ?</span></div><div class="line" id="014945"><span class="nick" style="color:#389600"><a href="#014945" label="[01:49:45]">&lt;stikonas&gt;</a></span><span class="message">melg8: <a rel="nofollow" href="https://github.com/oriansj/stage0/tree/master/stage2/High_level_prototypes/cc_x86">https://github.com/oriansj/stage0/tree/master/stage2/High_level_prototypes/cc_x86</a> </span></div><div class="line" id="014951"><span class="nick" style="color:#6d2462"><a href="#014951" label="[01:49:51]">&lt;OriansJ&gt;</a></span><span class="message">melg8: <a rel="nofollow" href="https://github.com/oriansj/stage0/tree/master/stage2/High_level_prototypes/cc_x86">https://github.com/oriansj/stage0/tree/master/stage2/High_level_prototypes/cc_x86</a> </span></div><div class="line" id="015011"><span class="nick" style="color:#6d2462"><a href="#015011" label="[01:50:11]">&lt;OriansJ&gt;</a></span><span class="message">in the same folder you just linked to</span></div><div class="line" id="015200"><span class="nick" style="color:#8dd3c7"><a href="#015200" label="[01:52:00]">&lt;melg8&gt;</a></span><span class="message">am i right that <a rel="nofollow" href="https://github.com/oriansj/stage0/blob/master/stage2/cc_x86.s">https://github.com/oriansj/stage0/blob/master/stage2/cc_x86.s</a>  (in binary form) can build c version of itself? and will it produce itself from this c code? ( i mean will hashes be equal?)</span></div><div class="line" id="015220"><span class="nick" style="color:#6d2462"><a href="#015220" label="[01:52:20]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: of course. everyone here  gets to choose what fun they want to have. But I only suggest that having the later work in guix as a way of making their lives easier long term.</span></div><div class="line" id="015259"><span class="nick" style="color:#6d2462"><a href="#015259" label="[01:52:59]">&lt;OriansJ&gt;</a></span><span class="message">melg8: yes</span></div><div class="line" id="015324"><span class="nick" style="color:#6d2462"><a href="#015324" label="[01:53:24]">&lt;OriansJ&gt;</a></span><span class="message">The output from the C code and the assembly should be byte for byte identical</span></div><div class="line" id="015333"><span class="nick" style="color:#8dd3c7"><a href="#015333" label="[01:53:33]">&lt;melg8&gt;</a></span><span class="message">btw i'm from nix community- but having hard time to find someone working on same idea as guix - with reduced bootstrap seeds</span></div><div class="line" id="015428"><span class="nick" style="color:#6d2462"><a href="#015428" label="[01:54:28]">&lt;OriansJ&gt;</a></span><span class="message">melg8: well it never hurts to make a name by leading a change.</span></div><div class="line" id="015511"><span class="nick" style="color:#8dd3c7"><a href="#015511" label="[01:55:11]">&lt;melg8&gt;</a></span><span class="message">yea) so i came here to learn first how it all works)</span></div><div class="line" id="015610"><span class="nick" style="color:#6d2462"><a href="#015610" label="[01:56:10]">&lt;OriansJ&gt;</a></span><span class="message">also a minor note the cc_x86.s in that repo is written in knight assembly and the version written in x86 assembly is in stage0-posix (x86 folder)</span></div><div class="line" id="015637"><span class="nick" style="color:#6d2462"><a href="#015637" label="[01:56:37]">&lt;OriansJ&gt;</a></span><span class="message">But the output between the two should also be identical</span></div><div class="line" id="015721"><span class="nick" style="color:#6d2462"><a href="#015721" label="[01:57:21]">&lt;OriansJ&gt;</a></span><span class="message">(unless I forgot to backport something simple like a type definition )</span></div><div class="line" id="015905"><span class="nick" style="color:#8dd3c7"><a href="#015905" label="[01:59:05]">&lt;melg8&gt;</a></span><span class="message">do you just really good at assembly or you compiled something like c variant and then produce assembly with additional comments for each byte?</span></div><div class="line" id="021501"><span class="nick" style="color:#234e69"><a href="#021501" label="[02:15:01]">&lt;fossy&gt;</a></span><span class="message">stikonas: melg8 I mean, a flag in rootfs.py enabling it</span></div><div class="line" id="021528"><span class="nick" style="color:#234e69"><a href="#021528" label="[02:15:28]">&lt;fossy&gt;</a></span><span class="message">Eg it could touch a file in the rootfs which causes the script to run</span></div><div class="line" id="021616"><span class="nick" style="color:#8dd3c7"><a href="#021616" label="[02:16:16]">&lt;melg8&gt;</a></span><span class="message">so file based signal from host, that we want or doesn't want to run it inside of image at the end?</span></div><div class="line" id="021814"><span class="nick" style="color:#8dd3c7"><a href="#021814" label="[02:18:14]">&lt;melg8&gt;</a></span><span class="message">like if sysa created file named make_results_reproducible - it will run cleanups script at the end of build?</span></div><div class="line" id="022125"><span class="nick" style="color:#8dd3c7"><a href="#022125" label="[02:21:25]">&lt;melg8&gt;</a></span><span class="message">suggestions for name of file/script/option are welcome</span></div><div class="line" id="031325"><span class="nick" style="color:#6b8072"><a href="#031325" label="[03:13:25]">&lt;Hagfish&gt;</a></span><span class="message">OriansJ: that reminds me of a saying about designing interfaces (e.g. graphical or APIs). it's something like:  &quot;make the recommended approach easy, while keeping the unusual approaches possible&quot;</span></div><div class="line" id="031528"><span class="nick" style="color:#6b8072"><a href="#031528" label="[03:15:28]">&lt;Hagfish&gt;</a></span><span class="message">the same idea probably applies to communities:  offer people ways to contribute that you think will be the most rewarding, while still accepting contributions from someone motivated to do things differently</span></div><div class="line" id="032853"><span class="nick" style="color:#234e69"><a href="#032853" label="[03:28:53]">&lt;fossy&gt;</a></span><span class="message">yeah basically</span></div><div class="line" id="115508"><span class="nick" style="color:#6c3d55"><a href="#115508" label="[11:55:08]">&lt;bauen1&gt;</a></span><span class="message">currently my plan with stow / upkg-build would be to tar up the result reproducible and checksum that</span></div><div class="line" id="115524"><span class="nick" style="color:#6c3d55"><a href="#115524" label="[11:55:24]">&lt;bauen1&gt;</a></span><span class="message">the result of a build can then also contain some metadata describing the inputs (and their hash)</span></div><div class="line" id="115545"><span class="nick" style="color:#6c3d55"><a href="#115545" label="[11:55:45]">&lt;bauen1&gt;</a></span><span class="message">stikonas[m]: so i don't really bother with differentiating between the 3</span></div><div class="line" id="115612"><span class="nick" style="color:#6c3d55"><a href="#115612" label="[11:56:12]">&lt;bauen1&gt;</a></span><span class="message">stikonas[m]: and stow won't require (or use) any sort of overlayfs, but bind mount/chroot support from the kernel makes things easier</span></div><div class="line" id="115829"><span class="nick" style="color:#6c3d55"><a href="#115829" label="[11:58:29]">&lt;bauen1&gt;</a></span><span class="message">but i haven't started on the chroot build thingy yet</span></div><div class="line" id="120019"><span class="nick" style="color:#6c3d55"><a href="#120019" label="[12:00:19]">&lt;bauen1&gt;</a></span><span class="message">on the other hand the stow part and installing things into /upkg and symlinking instead of directly into / is almost entirely working no</span></div><div class="line" id="120022"><span class="nick" style="color:#6c3d55"><a href="#120022" label="[12:00:22]">&lt;bauen1&gt;</a></span><span class="message">*now</span></div><div class="line" id="120038"><span class="nick" style="color:#6c3d55"><a href="#120038" label="[12:00:38]">&lt;bauen1&gt;</a></span><span class="message">except i've hit a bit of a road block with my usernamespace setup and tar-1.34 as detailed above</span></div><div class="line" id="120439"><span class="nick" style="color:#d9d9d9"><a href="#120439" label="[12:04:39]">&lt;stikonas[m]&gt;</a></span><span class="message">bauen1: --no-same-owner</span></div><div class="line" id="120451"><span class="nick" style="color:#d9d9d9"><a href="#120451" label="[12:04:51]">&lt;stikonas[m]&gt;</a></span><span class="message">That should help</span></div><div class="line" id="120516"><span class="nick" style="color:#d9d9d9"><a href="#120516" label="[12:05:16]">&lt;stikonas[m]&gt;</a></span><span class="message">And can be integrated into default_src_unpack</span></div><div class="line" id="131151"><span class="nick" style="color:#6c3d55"><a href="#131151" label="[13:11:51]">&lt;bauen1&gt;</a></span><span class="message">stikonas[m]: well, except earlier tar doesn't recognize it</span></div><div class="line" id="131158"><span class="nick" style="color:#6c3d55"><a href="#131158" label="[13:11:58]">&lt;bauen1&gt;</a></span><span class="message">and as such exits != 0</span></div><div class="line" id="131431"><span class="nick" style="color:#389600"><a href="#131431" label="[13:14:31]">&lt;stikonas&gt;</a></span><span class="message">bauen1: well, yes, but we can branch</span></div><div class="line" id="131522"><span class="nick" style="color:#389600"><a href="#131522" label="[13:15:22]">&lt;stikonas&gt;</a></span><span class="message">we probably don't have grep early enough, but there are other ways</span></div><div class="line" id="131548"><span class="nick" style="color:#389600"><a href="#131548" label="[13:15:48]">&lt;stikonas&gt;</a></span><span class="message">something like</span></div><div class="line" id="131642"><span class="nick" style="color:#389600"><a href="#131642" label="[13:16:42]">&lt;stikonas&gt;</a></span><span class="message">if  test -e /after/libexec/rmt ; echo &quot;this is new tar&quot;; else echo &quot;this is old tar&quot;; fi</span></div><div class="line" id="131825"><span class="nick" style="color:#389600"><a href="#131825" label="[13:18:25]">&lt;stikonas&gt;</a></span><span class="message">and if tar is new, we can even use simpler unpack syntax... no need for that --use-compress-program argument</span></div><div class="line" id="131918"><span class="nick" style="color:#389600"><a href="#131918" label="[13:19:18]">&lt;stikonas&gt;</a></span><span class="message">tar -xv --no-same-owner &quot;$archive&quot; would do</span></div><div class="line" id="131929"><span class="nick" style="color:#389600"><a href="#131929" label="[13:19:29]">&lt;stikonas&gt;</a></span><span class="message">tar -xf --no-same-owner &quot;$archive&quot;</span></div><div class="line" id="132125"><span class="nick" style="color:#389600"><a href="#132125" label="[13:21:25]">&lt;stikonas&gt;</a></span><span class="message">I think that would solve your problem</span></div><div class="line" id="132345"><span class="nick" style="color:#6c3d55"><a href="#132345" label="[13:23:45]">&lt;bauen1&gt;</a></span><span class="message">yes, i haven't looked to closely yet</span></div><div class="line" id="132434"><span class="nick" style="color:#389600"><a href="#132434" label="[13:24:34]">&lt;stikonas&gt;</a></span><span class="message">bauen1: I can try to quickly implement something like that</span></div><div class="line" id="132437"><span class="nick" style="color:#389600"><a href="#132437" label="[13:24:37]">&lt;stikonas&gt;</a></span><span class="message">it's just a few lines anyway</span></div><div class="line" id="132610"><span class="nick" style="color:#6c3d55"><a href="#132610" label="[13:26:10]">&lt;bauen1&gt;</a></span><span class="message">stikonas: you can even try out my usernamespace setup if you want, it should be included on my stow wip branch `./rootfs.py --unshare --chroot --preserve`</span></div><div class="line" id="132627"><span class="nick" style="color:#6c3d55"><a href="#132627" label="[13:26:27]">&lt;bauen1&gt;</a></span><span class="message">that'd be nice, if not i'll take a longer later today</span></div><div class="line" id="132649"><span class="nick" style="color:#6c3d55"><a href="#132649" label="[13:26:49]">&lt;bauen1&gt;</a></span><span class="message">though i did not push recently</span></div><div class="line" id="132658"><span class="nick" style="color:#6c3d55"><a href="#132658" label="[13:26:58]">&lt;bauen1&gt;</a></span><span class="message">done</span></div><div class="line" id="132701"><span class="nick" style="color:#389600"><a href="#132701" label="[13:27:01]">&lt;stikonas&gt;</a></span><span class="message">well, I made a change locally, I'll test it for now with old setup</span></div><div class="line" id="132710"><span class="nick" style="color:#389600"><a href="#132710" label="[13:27:10]">&lt;stikonas&gt;</a></span><span class="message">which files were broken?</span></div><div class="line" id="132716"><span class="nick" style="color:#389600"><a href="#132716" label="[13:27:16]">&lt;stikonas&gt;</a></span><span class="message">gmp was unpacked as 1006?</span></div><div class="line" id="132941"><span class="nick" style="color:#6c3d55"><a href="#132941" label="[13:29:41]">&lt;bauen1&gt;</a></span><span class="message">`tar: gmp-6.2.1/mpn/pa32/rshift.asm: Cannot change ownership to uid 1006, gid 1006: Invalid argument`</span></div><div class="line" id="132946"><span class="nick" style="color:#6c3d55"><a href="#132946" label="[13:29:46]">&lt;bauen1&gt;</a></span><span class="message">yes</span></div><div class="line" id="133415"><span class="nick" style="color:#389600"><a href="#133415" label="[13:34:15]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/stikonas/live-bootstrap/commit/864c6315a732d36ff2d3b0207fa6572af1e91351">https://github.com/stikonas/live-bootstrap/commit/864c6315a732d36ff2d3b0207fa6572af1e91351</a> </span></div><div class="line" id="133423"><span class="nick" style="color:#389600"><a href="#133423" label="[13:34:23]">&lt;stikonas&gt;</a></span><span class="message">testing it locally first, then will do PR</span></div><div class="line" id="134346"><span class="nick" style="color:#6c3d55"><a href="#134346" label="[13:43:46]">&lt;bauen1&gt;</a></span><span class="message">oh yeah i like that solution</span></div><div class="line" id="134409"><span class="nick" style="color:#6c3d55"><a href="#134409" label="[13:44:09]">&lt;bauen1&gt;</a></span><span class="message">except maybe that i'd rather do a check against tar --version, but whatever if it works it works :D</span></div><div class="line" id="140805"><span class="nick" style="color:#389600"><a href="#140805" label="[14:08:05]">&lt;stikonas&gt;</a></span><span class="message">bauen1: tar --verasion is a bit harder</span></div><div class="line" id="140848"><span class="nick" style="color:#389600"><a href="#140848" label="[14:08:48]">&lt;stikonas&gt;</a></span><span class="message">I don't have awk/grep yet</span></div><div class="line" id="140919"><span class="nick" style="color:#389600"><a href="#140919" label="[14:09:19]">&lt;stikonas&gt;</a></span><span class="message">PR here <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/pull/116">https://github.com/fosslinux/live-bootstrap/pull/116</a> </span></div><div class="line" id="144606"><span class="nick" style="color:#6c3d55"><a href="#144606" label="[14:46:06]">&lt;bauen1&gt;</a></span><span class="message">stikonas: thanks, i'll test it now</span></div><div class="line" id="145154"><span class="nick" style="color:#389600"><a href="#145154" label="[14:51:54]">&lt;stikonas&gt;</a></span><span class="message">argh, it failed I need to update the order of arguments</span></div><div class="line" id="145420"><span class="nick" style="color:#389600"><a href="#145420" label="[14:54:20]">&lt;stikonas&gt;</a></span><span class="message">bauen1: grab a new commit...</span></div><div class="line" id="164908"><span class="nick" style="color:#6d2462"><a href="#164908" label="[16:49:08]">&lt;OriansJ&gt;</a></span><span class="message">Hagfish: that is perhaps the biggest problem. I don't know where one can make the biggest possible contribution relative to effort. For example let say there is a c/c++ programmer like melg8 who would want to contribute to a non-posix dependent part. I could suggest helping to improve M2libc or M2-Planet or helping convert mes-m2 to use M2libc (thus solving the porting of MesCC to more architectures instantly) but honestly what seems</span></div><div class="line" id="164908"><span class="nick" style="color:#6d2462"><a href="#164908" label="[16:49:08]">&lt;OriansJ&gt;</a></span><span class="message">most interesting and fun would probably be the better recommendation.</span></div><div class="line" id="165133"><span class="nick" style="color:#6d2462"><a href="#165133" label="[16:51:33]">&lt;OriansJ&gt;</a></span><span class="message">fossy: doesn't untar.c do the correct thing in regards to userids and datetime stamps?</span></div><div class="line" id="195413"><span class="nick" style="color:#bc80bd"><a href="#195413" label="[19:54:13]">&lt;gforce_de1977&gt;</a></span><span class="message">yeah! i managed it to store QEMU-snapshots. the idea is to have ready images where 'bootstrapping is completed' and we have a shell, without having to wait 45 minutes. images/ram-snapshots are ~200 megabytes (compressed), but load instantly 8-)</span></div><div class="line" id="212455"><span class="nick" style="color:#6c3d55"><a href="#212455" label="[21:24:55]">&lt;bauen1&gt;</a></span><span class="message">stikonas: thanks, it's working</span></div><div class="line" id="233448"><span class="nick" style="color:#234e69"><a href="#233448" label="[23:34:48]">&lt;fossy&gt;</a></span><span class="message">&lt;OriansJ&gt; fossy: doesn't untar.c do the correct thing in regards to userids and datetime stamps?</span></div><div class="line" id="233503"><span class="nick" style="color:#234e69"><a href="#233503" label="[23:35:03]">&lt;fossy&gt;</a></span><span class="message">whats the &quot;right thing&quot;?</span></div><div class="line" id="233554"><span class="nick" style="color:#389600"><a href="#233554" label="[23:35:54]">&lt;stikonas&gt;</a></span><span class="message">untar.c is quite similar to old gnu tar 1.12 (I think from 1994)</span></div><div class="line" id="233639"><span class="nick" style="color:#389600"><a href="#233639" label="[23:36:39]">&lt;stikonas&gt;</a></span><span class="message">I think both unpack as current user (so root)</span></div><div class="line" id="233651"><span class="nick" style="color:#389600"><a href="#233651" label="[23:36:51]">&lt;stikonas&gt;</a></span><span class="message">and timestamps are the same as in archive</span></div><div class="line" id="233719"><span class="nick" style="color:#389600"><a href="#233719" label="[23:37:19]">&lt;stikonas&gt;</a></span><span class="message">it's the newer tar 1.34 that has more options and tries to be smarter</span></div><div class="line" id="233739"><span class="nick" style="color:#389600"><a href="#233739" label="[23:37:39]">&lt;stikonas&gt;</a></span><span class="message">but was interfering with user namespaces</span></div><div class="line" id="234320"><span class="nick" style="color:#234e69"><a href="#234320" label="[23:43:20]">&lt;fossy&gt;</a></span><span class="message">re the checksumming of the filesystem. I agree with stikonas, while we can theoretically strip it down, removing build dirs, changing timestamps  etc etc, im not sure I see the utility in that right now when we already have a method to ensure reproducibility for generated files and binaries</span></div><div class="line" id="234410"><span class="nick" style="color:#234e69"><a href="#234410" label="[23:44:10]">&lt;fossy&gt;</a></span><span class="message">when live bootstrap is complete and more comparitalized I think we should look at it though</span></div><div class="line" id="234412"><span class="nick" style="color:#389600"><a href="#234412" label="[23:44:12]">&lt;stikonas&gt;</a></span><span class="message">well, once we have upks, I think we'll have something better</span></div><div class="line" id="234418"><span class="nick" style="color:#234e69"><a href="#234418" label="[23:44:18]">&lt;fossy&gt;</a></span><span class="message">yeah</span></div><div class="line" id="234421"><span class="nick" style="color:#389600"><a href="#234421" label="[23:44:21]">&lt;stikonas&gt;</a></span><span class="message">we'll be able to checksum all files</span></div><div class="line" id="234425"><span class="nick" style="color:#389600"><a href="#234425" label="[23:44:25]">&lt;stikonas&gt;</a></span><span class="message">not just the ones we do manually</span></div><div class="line" id="234513"><span class="nick" style="color:#389600"><a href="#234513" label="[23:45:13]">&lt;stikonas&gt;</a></span><span class="message">but I guess we can still include a file to strip timestamps...</span></div><div class="line" id="234523"><span class="nick" style="color:#234e69"><a href="#234523" label="[23:45:23]">&lt;fossy&gt;</a></span><span class="message">Also I do care about intermediate packages that ate not included in the final fs</span></div><div class="line" id="234524"><span class="nick" style="color:#389600"><a href="#234524" label="[23:45:24]">&lt;stikonas&gt;</a></span><span class="message">so that one can run it optionally</span></div><div class="line" id="234543"><span class="nick" style="color:#234e69"><a href="#234543" label="[23:45:43]">&lt;fossy&gt;</a></span><span class="message">yeah sure</span></div><div class="line" id="234556"><span class="nick" style="color:#234e69"><a href="#234556" label="[23:45:56]">&lt;fossy&gt;</a></span><span class="message">just not by default</span></div><div class="line" id="234602"><span class="nick" style="color:#389600"><a href="#234602" label="[23:46:02]">&lt;stikonas&gt;</a></span><span class="message">yeah, but I think I care more about build &quot;outputs&quot; rather than &quot;intermediate build dirs&quot;</span></div><div class="line" id="234724"><span class="nick" style="color:#234e69"><a href="#234724" label="[23:47:24]">&lt;fossy&gt;</a></span><span class="message">same, im not too worried abt build dirs but I am about binaries/outputs not included with the final rootfs</span></div><div class="line" id="234737"><span class="nick" style="color:#234e69"><a href="#234737" label="[23:47:37]">&lt;fossy&gt;</a></span><span class="message">that are superseded or removed</span></div><br /></div></body></html>