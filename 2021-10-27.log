<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2021-10-27.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="000207"><span class="nick" style="color:#389600"><a href="#000207" label="[00:02:07]">&lt;oriansj&gt;</a></span><span class="message">very easy to test just put 2 fputs in  in mes.c: try_open_boot</span></div><div class="line" id="000229"><span class="nick" style="color:#389600"><a href="#000229" label="[00:02:29]">&lt;oriansj&gt;</a></span><span class="message">(or eputs)</span></div><div class="line" id="000510"><span class="nick" style="color:#8dd3c7"><a href="#000510" label="[00:05:10]">&lt;stikonas&gt;</a></span><span class="message">yep, more bugs in syscall.c</span></div><div class="line" id="000516"><span class="nick" style="color:#8dd3c7"><a href="#000516" label="[00:05:16]">&lt;stikonas&gt;</a></span><span class="message">was not careful enough when fixing it</span></div><div class="line" id="000524"><span class="nick" style="color:#8dd3c7"><a href="#000524" label="[00:05:24]">&lt;stikonas&gt;</a></span><span class="message">so argments ended up in the wrong registers</span></div><div class="line" id="000544"><span class="nick" style="color:#389600"><a href="#000544" label="[00:05:44]">&lt;oriansj&gt;</a></span><span class="message">yep</span></div><div class="line" id="000610"><span class="nick" style="color:#8dd3c7"><a href="#000610" label="[00:06:10]">&lt;stikonas&gt;</a></span><span class="message">yes, something else now</span></div><div class="line" id="000612"><span class="nick" style="color:#8dd3c7"><a href="#000612" label="[00:06:12]">&lt;stikonas&gt;</a></span><span class="message">assert fail: x-&gt;type == TSTRUCT</span></div><div class="line" id="000615"><span class="nick" style="color:#8dd3c7"><a href="#000615" label="[00:06:15]">&lt;stikonas&gt;</a></span><span class="message">and then segfault</span></div><div class="line" id="000626"><span class="nick" style="color:#8dd3c7"><a href="#000626" label="[00:06:26]">&lt;stikonas&gt;</a></span><span class="message">oh, I need to reset env variables</span></div><div class="line" id="000737"><span class="nick" style="color:#389600"><a href="#000737" label="[00:07:37]">&lt;oriansj&gt;</a></span><span class="message">oh god the garbage collection from 32bit to 64bit pointers</span></div><div class="line" id="000821"><span class="nick" style="color:#8dd3c7"><a href="#000821" label="[00:08:21]">&lt;stikonas&gt;</a></span><span class="message">sounds scary :(</span></div><div class="line" id="000955"><span class="nick" style="color:#8dd3c7"><a href="#000955" label="[00:09:55]">&lt;stikonas&gt;</a></span><span class="message">hmm, changing M2_CELL_SIZE from 1 to 12 (as in CONSTANT)</span></div><div class="line" id="001004"><span class="nick" style="color:#8dd3c7"><a href="#001004" label="[00:10:04]">&lt;stikonas&gt;</a></span><span class="message">gets rid of this but still segfaults</span></div><div class="line" id="001042"><span class="nick" style="color:#8dd3c7"><a href="#001042" label="[00:10:42]">&lt;stikonas&gt;</a></span><span class="message">in make_struct ...</span></div><div class="line" id="001127"><span class="nick" style="color:#8dd3c7"><a href="#001127" label="[00:11:27]">&lt;stikonas&gt;</a></span><span class="message">oh, I probably should update M2_CELL_SIZE in more places</span></div><div class="line" id="001234"><span class="nick" style="color:#389600"><a href="#001234" label="[00:12:34]">&lt;oriansj&gt;</a></span><span class="message">CONSTANT M2_CELL_SIZE 12 means in M2-Planet the cell size is 3 4byte words. So you'll need a bit more logic</span></div><div class="line" id="001324"><span class="nick" style="color:#389600"><a href="#001324" label="[00:13:24]">&lt;oriansj&gt;</a></span><span class="message">but because 1U is used with the #define, it means you'll need to do it as a preprocessor block</span></div><div class="line" id="001340"><span class="nick" style="color:#8dd3c7"><a href="#001340" label="[00:13:40]">&lt;stikonas&gt;</a></span><span class="message">oh I see</span></div><div class="line" id="001350"><span class="nick" style="color:#8dd3c7"><a href="#001350" label="[00:13:50]">&lt;stikonas&gt;</a></span><span class="message">well, let's get risc-v working first</span></div><div class="line" id="001357"><span class="nick" style="color:#389600"><a href="#001357" label="[00:13:57]">&lt;oriansj&gt;</a></span><span class="message">possibly with -D to switch between 32bit and 64bit</span></div><div class="line" id="001359"><span class="nick" style="color:#8dd3c7"><a href="#001359" label="[00:13:59]">&lt;stikonas&gt;</a></span><span class="message">so I need 3  8 byte words</span></div><div class="line" id="001409"><span class="nick" style="color:#8dd3c7"><a href="#001409" label="[00:14:09]">&lt;stikonas&gt;</a></span><span class="message">and __M2_PLANET__ might not be defined in #if...</span></div><div class="line" id="001420"><span class="nick" style="color:#8dd3c7"><a href="#001420" label="[00:14:20]">&lt;stikonas&gt;</a></span><span class="message">somehow preprocessor doesn't seem to pick that branch</span></div><div class="line" id="001431"><span class="nick" style="color:#389600"><a href="#001431" label="[00:14:31]">&lt;oriansj&gt;</a></span><span class="message">it would be __M2__</span></div><div class="line" id="001455"><span class="nick" style="color:#389600"><a href="#001455" label="[00:14:55]">&lt;oriansj&gt;</a></span><span class="message">#if defined(__M2__) ...</span></div><div class="line" id="001522"><span class="nick" style="color:#389600"><a href="#001522" label="[00:15:22]">&lt;oriansj&gt;</a></span><span class="message">-D 64bit=1</span></div><div class="line" id="001721"><span class="nick" style="color:#389600"><a href="#001721" label="[00:17:21]">&lt;oriansj&gt;</a></span><span class="message">as M2-Planet does support -D</span></div><div class="line" id="001828"><span class="nick" style="color:#389600"><a href="#001828" label="[00:18:28]">&lt;oriansj&gt;</a></span><span class="message">So #if defined(__M2__) &amp;&amp; defined(64bit) .. #elif defined(__M2__) ... #else .... #endif</span></div><div class="line" id="002435"><span class="nick" style="color:#389600"><a href="#002435" label="[00:24:35]">&lt;oriansj&gt;</a></span><span class="message">as you can see in this example: <a rel="nofollow" href="https://paste.debian.net/1217003/">https://paste.debian.net/1217003/</a> </span></div><div class="line" id="003607"><span class="nick" style="color:#389600"><a href="#003607" label="[00:36:07]">&lt;oriansj&gt;</a></span><span class="message">or you could do 3* sizeof(long) as M2-Planet supports sizeof</span></div><div class="line" id="003649"><span class="nick" style="color:#8dd3c7"><a href="#003649" label="[00:36:49]">&lt;stikonas&gt;</a></span><span class="message">yeah, can do that too...</span></div><div class="line" id="003753"><span class="nick" style="color:#8dd3c7"><a href="#003753" label="[00:37:53]">&lt;stikonas&gt;</a></span><span class="message">and the same cane be done for pointer size...</span></div><div class="line" id="003858"><span class="nick" style="color:#389600"><a href="#003858" label="[00:38:58]">&lt;oriansj&gt;</a></span><span class="message">yep (garbage collection and pointer arithmetic is one of the few places where M2-Planet doesn't act like C)</span></div><div class="line" id="003936"><span class="nick" style="color:#8dd3c7"><a href="#003936" label="[00:39:36]">&lt;stikonas&gt;</a></span><span class="message">crashed M2-Planet...</span></div><div class="line" id="004003"><span class="nick" style="color:#389600"><a href="#004003" label="[00:40:03]">&lt;oriansj&gt;</a></span><span class="message">nice give me a crashing test</span></div><div class="line" id="004007"><span class="nick" style="color:#8dd3c7"><a href="#004007" label="[00:40:07]">&lt;stikonas&gt;</a></span><span class="message">actually it's probably a loop</span></div><div class="line" id="004015"><span class="nick" style="color:#8dd3c7"><a href="#004015" label="[00:40:15]">&lt;stikonas&gt;</a></span><span class="message">I sued #define (3 * sizeof(long))</span></div><div class="line" id="004021"><span class="nick" style="color:#8dd3c7"><a href="#004021" label="[00:40:21]">&lt;stikonas&gt;</a></span><span class="message">is that wrong?</span></div><div class="line" id="004038"><span class="nick" style="color:#6b8072"><a href="#004038" label="[00:40:38]">&lt;muurkha&gt;</a></span><span class="message">I don't think ( is a thing you can #define</span></div><div class="line" id="004104"><span class="nick" style="color:#8dd3c7"><a href="#004104" label="[00:41:04]">&lt;stikonas&gt;</a></span><span class="message">argh, forgot the thing to define</span></div><div class="line" id="004140"><span class="nick" style="color:#6b8072"><a href="#004140" label="[00:41:40]">&lt;muurkha&gt;</a></span><span class="message">heh</span></div><div class="line" id="004754"><span class="nick" style="color:#8dd3c7"><a href="#004754" label="[00:47:54]">&lt;stikonas&gt;</a></span><span class="message">strange, #if defined(__M2__) doesn't seem to work for some reason</span></div><div class="line" id="004802"><span class="nick" style="color:#8dd3c7"><a href="#004802" label="[00:48:02]">&lt;stikonas&gt;</a></span><span class="message">picks #else branch</span></div><div class="line" id="014351"><span class="nick" style="color:#8dd3c7"><a href="#014351" label="[01:43:51]">&lt;stikonas&gt;</a></span><span class="message">oriansj: ok, I think I've got it working with some hacks (will have to clean it up before other stuff, e.g. x86 is unbroken)</span></div><div class="line" id="014404"><span class="nick" style="color:#8dd3c7"><a href="#014404" label="[01:44:04]">&lt;stikonas&gt;</a></span><span class="message">but mes does print hello world now</span></div><div class="line" id="014508"><span class="nick" style="color:#8dd3c7"><a href="#014508" label="[01:45:08]">&lt;stikonas&gt;</a></span><span class="message">and still not luck with #if defines...</span></div><div class="line" id="014515"><span class="nick" style="color:#8dd3c7"><a href="#014515" label="[01:45:15]">&lt;stikonas&gt;</a></span><span class="message">had to add that constant to #else branch</span></div><div class="line" id="014728"><span class="nick" style="color:#8dd3c7"><a href="#014728" label="[01:47:28]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: if you can, try it on real HW</span></div><div class="line" id="021230"><span class="nick" style="color:#8dd3c7"><a href="#021230" label="[02:12:30]">&lt;stikonas&gt;</a></span><span class="message">hmm, sometimes mes-m2 still crashes on hello world, somehow it's non-deterministic</span></div><div class="line" id="024813"><span class="nick" style="color:#389600"><a href="#024813" label="[02:48:13]">&lt;oriansj&gt;</a></span><span class="message">stikonas: if you used #if defined(__M2__); it should never use the else branch as can be seen in my example paste</span></div><div class="line" id="025045"><span class="nick" style="color:#80b1d3"><a href="#025045" label="[02:50:45]">&lt;stikonas[m]&gt;</a></span><span class="message">Yes, that's what I used</span></div><div class="line" id="025049"><span class="nick" style="color:#80b1d3"><a href="#025049" label="[02:50:49]">&lt;stikonas[m]&gt;</a></span><span class="message">Strange...</span></div><div class="line" id="025142"><span class="nick" style="color:#80b1d3"><a href="#025142" label="[02:51:42]">&lt;stikonas[m]&gt;</a></span><span class="message">See <a rel="nofollow" href="https://github.com/stikonas/mes-m2/commit/740da2816ac1aa7c46c64c574f0a4e69427b7e91">https://github.com/stikonas/mes-m2/commit/740da2816ac1aa7c46c64c574f0a4e69427b7e91</a> </span></div><div class="line" id="025212"><span class="nick" style="color:#80b1d3"><a href="#025212" label="[02:52:12]">&lt;stikonas[m]&gt;</a></span><span class="message">Had to use else branch too</span></div><div class="line" id="030210"><span class="nick" style="color:#389600"><a href="#030210" label="[03:02:10]">&lt;oriansj&gt;</a></span><span class="message">umm the word defined is no where on that page</span></div><div class="line" id="134442"><span class="nick" style="color:#6d2462"><a href="#134442" label="[13:44:42]">&lt;gbrlwck&gt;</a></span><span class="message">good news, everybody! mes-m2 works on hardware :)</span></div><div class="line" id="134512"><span class="nick" style="color:#6d2462"><a href="#134512" label="[13:45:12]">&lt;gbrlwck&gt;</a></span><span class="message">i get a bunch of warnings, though (#error and #undef unsupported in M@2</span></div><div class="line" id="134552"><span class="nick" style="color:#6d2462"><a href="#134552" label="[13:45:52]">&lt;gbrlwck&gt;</a></span><span class="message">(riscv64, that is)</span></div><div class="line" id="135407"><span class="nick" style="color:#234e69"><a href="#135407" label="[13:54:07]">&lt;fossy&gt;</a></span><span class="message">gbrlwck: Out of interest what hardware,</span></div><div class="line" id="135409"><span class="nick" style="color:#234e69"><a href="#135409" label="[13:54:09]">&lt;fossy&gt;</a></span><span class="message">?</span></div><div class="line" id="135449"><span class="nick" style="color:#6d2462"><a href="#135449" label="[13:54:49]">&lt;gbrlwck&gt;</a></span><span class="message">hifive unmatched</span></div><div class="line" id="135738"><span class="nick" style="color:#389600"><a href="#135738" label="[13:57:38]">&lt;oriansj&gt;</a></span><span class="message">nice</span></div><div class="line" id="141114"><span class="nick" style="color:#6d2462"><a href="#141114" label="[14:11:14]">&lt;gbrlwck&gt;</a></span><span class="message">is it possible mes-m2 is relatively slow?</span></div><div class="line" id="141150"><span class="nick" style="color:#6d2462"><a href="#141150" label="[14:11:50]">&lt;gbrlwck&gt;</a></span><span class="message">i'm still also doing other jobs on the machine by the side, but the simple (display 'foo) (newline) takes 2 minutes(!)</span></div><div class="line" id="141214"><span class="nick" style="color:#6d2462"><a href="#141214" label="[14:12:14]">&lt;gbrlwck&gt;</a></span><span class="message"> <a rel="nofollow" href="https://termbin.com/m2ip">https://termbin.com/m2ip</a> </span></div><div class="line" id="141525"><span class="nick" style="color:#8dd3c7"><a href="#141525" label="[14:15:25]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: mes is very slow in general</span></div><div class="line" id="141536"><span class="nick" style="color:#8dd3c7"><a href="#141536" label="[14:15:36]">&lt;stikonas&gt;</a></span><span class="message">although, not as slow (2 minutes)</span></div><div class="line" id="141605"><span class="nick" style="color:#8dd3c7"><a href="#141605" label="[14:16:05]">&lt;stikonas&gt;</a></span><span class="message">on qemu printing (newline) takes maybe 2 seconds</span></div><div class="line" id="141623"><span class="nick" style="color:#8dd3c7"><a href="#141623" label="[14:16:23]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: do you get random segfaults?</span></div><div class="line" id="141640"><span class="nick" style="color:#8dd3c7"><a href="#141640" label="[14:16:40]">&lt;stikonas&gt;</a></span><span class="message">for me things have about 50/50 chace of working</span></div><div class="line" id="141700"><span class="nick" style="color:#8dd3c7"><a href="#141700" label="[14:17:00]">&lt;stikonas&gt;</a></span><span class="message">and rest of the time it crashes in gc_push_frame</span></div><div class="line" id="141711"><span class="nick" style="color:#8dd3c7"><a href="#141711" label="[14:17:11]">&lt;stikonas&gt;</a></span><span class="message">but when it works, it works even for complicated programs</span></div><div class="line" id="141722"><span class="nick" style="color:#8dd3c7"><a href="#141722" label="[14:17:22]">&lt;stikonas&gt;</a></span><span class="message">I compiled some C file with mescc</span></div><div class="line" id="141730"><span class="nick" style="color:#8dd3c7"><a href="#141730" label="[14:17:30]">&lt;stikonas&gt;</a></span><span class="message">(for x86)</span></div><div class="line" id="141744"><span class="nick" style="color:#6d2462"><a href="#141744" label="[14:17:44]">&lt;gbrlwck&gt;</a></span><span class="message">that's gonna be my next tests :)</span></div><div class="line" id="141811"><span class="nick" style="color:#8dd3c7"><a href="#141811" label="[14:18:11]">&lt;stikonas&gt;</a></span><span class="message">also need to unbreak other arches before this can be merged to mes-m2</span></div><div class="line" id="141817"><span class="nick" style="color:#6d2462"><a href="#141817" label="[14:18:17]">&lt;gbrlwck&gt;</a></span><span class="message">if you point me to things, i'll try to execute them :) otherwise i'd have to come up with nice test-cases myself</span></div><div class="line" id="141820"><span class="nick" style="color:#8dd3c7"><a href="#141820" label="[14:18:20]">&lt;stikonas&gt;</a></span><span class="message">(mainly fix syscalls)</span></div><div class="line" id="141833"><span class="nick" style="color:#8dd3c7"><a href="#141833" label="[14:18:33]">&lt;stikonas&gt;</a></span><span class="message">hmm, not sure where to proceed though</span></div><div class="line" id="141841"><span class="nick" style="color:#8dd3c7"><a href="#141841" label="[14:18:41]">&lt;stikonas&gt;</a></span><span class="message">yesterday I mostly debugged things with gdb</span></div><div class="line" id="141847"><span class="nick" style="color:#8dd3c7"><a href="#141847" label="[14:18:47]">&lt;stikonas&gt;</a></span><span class="message">and found what goes wrong</span></div><div class="line" id="141856"><span class="nick" style="color:#8dd3c7"><a href="#141856" label="[14:18:56]">&lt;stikonas&gt;</a></span><span class="message">now I just saw that crash happens in gc_push_frame function</span></div><div class="line" id="141909"><span class="nick" style="color:#8dd3c7"><a href="#141909" label="[14:19:09]">&lt;stikonas&gt;</a></span><span class="message">but haven't checked why data is corrupted there...</span></div><div class="line" id="142009"><span class="nick" style="color:#8dd3c7"><a href="#142009" label="[14:20:09]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: btw, if you want to check for slowness</span></div><div class="line" id="142010"><span class="nick" style="color:#8dd3c7"><a href="#142010" label="[14:20:10]">&lt;stikonas&gt;</a></span><span class="message">maybe run</span></div><div class="line" id="142012"><span class="nick" style="color:#8dd3c7"><a href="#142012" label="[14:20:12]">&lt;stikonas&gt;</a></span><span class="message">MES_ARENA=20000000 MES_MAX_ARENA=20000000 MES_STACK=6000000 strace -c ./bin/mes-m2 -c &quot;(display 'Hello,M2-mes) (newline)&quot;</span></div><div class="line" id="142047"><span class="nick" style="color:#8dd3c7"><a href="#142047" label="[14:20:47]">&lt;stikonas&gt;</a></span><span class="message">might show which syscalls (if any) are taking time</span></div><div class="line" id="142205"><span class="nick" style="color:#8dd3c7"><a href="#142205" label="[14:22:05]">&lt;stikonas&gt;</a></span><span class="message">oriansj: and what are the longer term plans for mes-m2?</span></div><div class="line" id="142212"><span class="nick" style="color:#8dd3c7"><a href="#142212" label="[14:22:12]">&lt;stikonas&gt;</a></span><span class="message">is it going to be integrated back into mes?</span></div><div class="line" id="142722"><span class="nick" style="color:#6d2462"><a href="#142722" label="[14:27:22]">&lt;gbrlwck&gt;</a></span><span class="message">we get 110725 read calls</span></div><div class="line" id="142808"><span class="nick" style="color:#8dd3c7"><a href="#142808" label="[14:28:08]">&lt;stikonas&gt;</a></span><span class="message">half of my time is spent on read, but still on</span></div><div class="line" id="142813"><span class="nick" style="color:#8dd3c7"><a href="#142813" label="[14:28:13]">&lt;stikonas&gt;</a></span><span class="message">only 1 second</span></div><div class="line" id="142830"><span class="nick" style="color:#8dd3c7"><a href="#142830" label="[14:28:30]">&lt;stikonas&gt;</a></span><span class="message">% time     seconds  usecs/call     calls    errors syscall</span></div><div class="line" id="142832"><span class="nick" style="color:#8dd3c7"><a href="#142832" label="[14:28:32]">&lt;stikonas&gt;</a></span><span class="message"> 49,49    0,090765           0    110730           read</span></div><div class="line" id="142834"><span class="nick" style="color:#6d2462"><a href="#142834" label="[14:28:34]">&lt;gbrlwck&gt;</a></span><span class="message">yeah, i guess it takes so long because i'm heavily using the machine on the side</span></div><div class="line" id="142853"><span class="nick" style="color:#8dd3c7"><a href="#142853" label="[14:28:53]">&lt;stikonas&gt;</a></span><span class="message">probably non-syscall code takes a while</span></div><div class="line" id="150741"><span class="nick" style="color:#6d2462"><a href="#150741" label="[15:07:41]">&lt;gbrlwck&gt;</a></span><span class="message">so we now have a full source bootstrap for riscv64 (at least up to mes)? next step would be compiling guile with mes? and then we can bootstrap a full guix system on top of that?</span></div><div class="line" id="151240"><span class="nick" style="color:#6d2462"><a href="#151240" label="[15:12:40]">&lt;gbrlwck&gt;</a></span><span class="message">stikonas: how did you test c compilation? just `./scripts/mescc foo.c` ?</span></div><div class="line" id="151328"><span class="nick" style="color:#80b1d3"><a href="#151328" label="[15:13:28]">&lt;stikonas[m]&gt;</a></span><span class="message">I've used mescc.scm from live-bootstrap</span></div><div class="line" id="151404"><span class="nick" style="color:#80b1d3"><a href="#151404" label="[15:14:04]">&lt;stikonas[m]&gt;</a></span><span class="message">The one in scripts is almost identical but templatefmd values were nit filled not filled</span></div><div class="line" id="151449"><span class="nick" style="color:#80b1d3"><a href="#151449" label="[15:14:49]">&lt;stikonas[m]&gt;</a></span><span class="message">Also grabbed config.h from there but that can probably be replaced  with -D define</span></div><div class="line" id="151523"><span class="nick" style="color:#80b1d3"><a href="#151523" label="[15:15:23]">&lt;stikonas[m]&gt;</a></span><span class="message">You'll also have to get nyacc and define GUILE_LOAD_PATH</span></div><div class="line" id="151548"><span class="nick" style="color:#80b1d3"><a href="#151548" label="[15:15:48]">&lt;stikonas[m]&gt;</a></span><span class="message">gbrlwck: next step is porting mescc</span></div><div class="line" id="151558"><span class="nick" style="color:#80b1d3"><a href="#151558" label="[15:15:58]">&lt;stikonas[m]&gt;</a></span><span class="message">Guile is far far away</span></div><div class="line" id="151709"><span class="nick" style="color:#80b1d3"><a href="#151709" label="[15:17:09]">&lt;stikonas[m]&gt;</a></span><span class="message">Once mescc is ported, you can 1) rebuild mes with it (optional but easy) or try to port tinycc to RISC-V (hard)</span></div><div class="line" id="151740"><span class="nick" style="color:#80b1d3"><a href="#151740" label="[15:17:40]">&lt;stikonas[m]&gt;</a></span><span class="message">Guile has quite a bit of dependencies</span></div><div class="line" id="151754"><span class="nick" style="color:#80b1d3"><a href="#151754" label="[15:17:54]">&lt;stikonas[m]&gt;</a></span><span class="message">And is best left after GCC is bootsrapped</span></div><div class="line" id="153810"><span class="nick" style="color:#8dd3c7"><a href="#153810" label="[15:38:10]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: basically we'll have to more or less follow <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst">https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst</a> </span></div><div class="line" id="153836"><span class="nick" style="color:#8dd3c7"><a href="#153836" label="[15:38:36]">&lt;stikonas&gt;</a></span><span class="message">so tinycc will be the first tricky step (right now it doesn't work even on amd64)</span></div><div class="line" id="154008"><span class="nick" style="color:#8dd3c7"><a href="#154008" label="[15:40:08]">&lt;stikonas&gt;</a></span><span class="message">then after that it would probably be not too hard until binutils (although, old autotools versions might not like risc-v too but probably fixable)</span></div><div class="line" id="154014"><span class="nick" style="color:#6d2462"><a href="#154014" label="[15:40:14]">&lt;gbrlwck&gt;</a></span><span class="message">tcc is a synonym for tinycc, right?</span></div><div class="line" id="154022"><span class="nick" style="color:#8dd3c7"><a href="#154022" label="[15:40:22]">&lt;stikonas&gt;</a></span><span class="message">I think so</span></div><div class="line" id="154045"><span class="nick" style="color:#8dd3c7"><a href="#154045" label="[15:40:45]">&lt;stikonas&gt;</a></span><span class="message">but we have 2 versions of it</span></div><div class="line" id="154056"><span class="nick" style="color:#8dd3c7"><a href="#154056" label="[15:40:56]">&lt;stikonas&gt;</a></span><span class="message">one is very old 0.9.26 patched by janneke</span></div><div class="line" id="154103"><span class="nick" style="color:#8dd3c7"><a href="#154103" label="[15:41:03]">&lt;stikonas&gt;</a></span><span class="message">so that it can be built with mescc</span></div><div class="line" id="154110"><span class="nick" style="color:#8dd3c7"><a href="#154110" label="[15:41:10]">&lt;stikonas&gt;</a></span><span class="message">but patches only work on x86</span></div><div class="line" id="154325"><span class="nick" style="color:#8dd3c7"><a href="#154325" label="[15:43:25]">&lt;stikonas&gt;</a></span><span class="message">tcc is actually quite capable compiler</span></div><div class="line" id="154331"><span class="nick" style="color:#8dd3c7"><a href="#154331" label="[15:43:31]">&lt;stikonas&gt;</a></span><span class="message">at leats that newer tcc 0.9.27</span></div><div class="line" id="174325"><span class="nick" style="color:#6c3d55"><a href="#174325" label="[17:43:25]">&lt;Hagfish&gt;</a></span><span class="message"> <a rel="nofollow" href="https://utcc.utoronto.ca/~cks/space/blog/programming/GoVersionOfYourSource">https://utcc.utoronto.ca/~cks/space/blog/programming/GoVersionOfYourSource</a> </span></div><div class="line" id="174342"><span class="nick" style="color:#6c3d55"><a href="#174342" label="[17:43:42]">&lt;Hagfish&gt;</a></span><span class="message">&quot;The go command now embeds version control information in binaries including the currently checked-out revision and a flag indicating whether edited or untracked files are present.&quot;</span></div><div class="line" id="174434"><span class="nick" style="color:#d9d9d9"><a href="#174434" label="[17:44:34]">&lt;civodul&gt;</a></span><span class="message">argh</span></div><div class="line" id="174449"><span class="nick" style="color:#6c3d55"><a href="#174449" label="[17:44:49]">&lt;Hagfish&gt;</a></span><span class="message">it would be nice if it also indicated that every commit was signed by a PGP key</span></div><div class="line" id="174505"><span class="nick" style="color:#6c3d55"><a href="#174505" label="[17:45:05]">&lt;Hagfish&gt;</a></span><span class="message">civodul: do you think that will make it non-reproducible?</span></div><div class="line" id="174941"><span class="nick" style="color:#d9d9d9"><a href="#174941" label="[17:49:41]">&lt;civodul&gt;</a></span><span class="message">Hagfish: i think commit IDs are the new timestamp :-)</span></div><div class="line" id="175012"><span class="nick" style="color:#d9d9d9"><a href="#175012" label="[17:50:12]">&lt;civodul&gt;</a></span><span class="message">the change less often than timestamps, so they're less of a problem from a reproducibility viewpoint</span></div><div class="line" id="175021"><span class="nick" style="color:#d9d9d9"><a href="#175021" label="[17:50:21]">&lt;civodul&gt;</a></span><span class="message">but still, they're &quot;silent metadata&quot;</span></div><div class="line" id="175109"><span class="nick" style="color:#d9d9d9"><a href="#175109" label="[17:51:09]">&lt;civodul&gt;</a></span><span class="message">but i don't know, there are also advantages to embedding provenance metadata like this (as --save-provenance in Guix)</span></div><div class="line" id="175506"><span class="nick" style="color:#6c3d55"><a href="#175506" label="[17:55:06]">&lt;Hagfish&gt;</a></span><span class="message">hmm, nice</span></div><div class="line" id="175549"><span class="nick" style="color:#6c3d55"><a href="#175549" label="[17:55:49]">&lt;Hagfish&gt;</a></span><span class="message">i think that commit IDs should (ideally) change exactly as often as the code itself changes</span></div><div class="line" id="175638"><span class="nick" style="color:#6c3d55"><a href="#175638" label="[17:56:38]">&lt;Hagfish&gt;</a></span><span class="message">i guess someone might create version 1, then version 1.1, then remove that code and call it version 1, even though it is later in the revision history</span></div><div class="line" id="180124"><span class="nick" style="color:#6c3d55"><a href="#180124" label="[18:01:24]">&lt;Hagfish&gt;</a></span><span class="message">in other news, the Qubes-OS people have tried rebuilding the packages in Debian buster and have confirmed that 92.1% of them are reproducible:</span></div><div class="line" id="180127"><span class="nick" style="color:#6c3d55"><a href="#180127" label="[18:01:27]">&lt;Hagfish&gt;</a></span><span class="message"> <a rel="nofollow" href="https://debian.notset.fr/rebuild/results/bullseye_full.amd64%2Ball.png">https://debian.notset.fr/rebuild/results/bullseye_full.amd64%2Ball.png</a> </span></div><div class="line" id="180152"><span class="nick" style="color:#6c3d55"><a href="#180152" label="[18:01:52]">&lt;Hagfish&gt;</a></span><span class="message">a little less than the number that Debian's own reproducible builds effort calculated</span></div><div class="line" id="180231"><span class="nick" style="color:#d9d9d9"><a href="#180231" label="[18:02:31]">&lt;civodul&gt;</a></span><span class="message">yes, nice!</span></div><div class="line" id="180255"><span class="nick" style="color:#d9d9d9"><a href="#180255" label="[18:02:55]">&lt;civodul&gt;</a></span><span class="message">actually Debian was building slightly different packages than those people actually use</span></div><div class="line" id="180307"><span class="nick" style="color:#d9d9d9"><a href="#180307" label="[18:03:07]">&lt;civodul&gt;</a></span><span class="message">the numbers were about those</span></div><div class="line" id="180311"><span class="nick" style="color:#d9d9d9"><a href="#180311" label="[18:03:11]">&lt;civodul&gt;</a></span><span class="message">kinda confusing</span></div><div class="line" id="180336"><span class="nick" style="color:#d9d9d9"><a href="#180336" label="[18:03:36]">&lt;civodul&gt;</a></span><span class="message">also, the Qubes OS folks are starting from pre-built binaries from snapshot.*</span></div><div class="line" id="180348"><span class="nick" style="color:#d9d9d9"><a href="#180348" label="[18:03:48]">&lt;civodul&gt;</a></span><span class="message">so my understanding is that they're not rebuilding &quot;recursively&quot;</span></div><div class="line" id="180723"><span class="nick" style="color:#6c3d55"><a href="#180723" label="[18:07:23]">&lt;Hagfish&gt;</a></span><span class="message">ah, interesting</span></div><div class="line" id="180803"><span class="nick" style="color:#6c3d55"><a href="#180803" label="[18:08:03]">&lt;Hagfish&gt;</a></span><span class="message">it's slightly worrying if &quot;recursiveness&quot; is what causes the difference</span></div><div class="line" id="180829"><span class="nick" style="color:#6c3d55"><a href="#180829" label="[18:08:29]">&lt;Hagfish&gt;</a></span><span class="message">that would mean that a non-reproducible change is infecting builds further down the line, i.e. the output of a system isn't dependent on its source + input</span></div><div class="line" id="180908"><span class="nick" style="color:#6d2462"><a href="#180908" label="[18:09:08]">&lt;gbrlwck&gt;</a></span><span class="message">stikonas: <a rel="nofollow" href="https://gitlab.com/janneke/tinycc">https://gitlab.com/janneke/tinycc</a>  shows version 0.9.27 ?</span></div><div class="line" id="180926"><span class="nick" style="color:#8dd3c7"><a href="#180926" label="[18:09:26]">&lt;stikonas&gt;</a></span><span class="message">that's not the branch that you can build with mescc</span></div><div class="line" id="180959"><span class="nick" style="color:#8dd3c7"><a href="#180959" label="[18:09:59]">&lt;stikonas&gt;</a></span><span class="message">I guess you might want <a rel="nofollow" href="https://gitlab.com/janneke/tinycc/-/tree/mes-0.23.8">https://gitlab.com/janneke/tinycc/-/tree/mes-0.23.8</a> </span></div><div class="line" id="181026"><span class="nick" style="color:#bc80bd"><a href="#181026" label="[18:10:26]">&lt;vagrantc&gt;</a></span><span class="message">/29/6</span></div><div class="line" id="181056"><span class="nick" style="color:#8dd3c7"><a href="#181056" label="[18:10:56]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: there is also this snapshot that is known to work on x86 <a rel="nofollow" href="https://lilypond.org/janneke/tcc/tcc-0.9.26-1136-g5bba73cc.tar.gz">https://lilypond.org/janneke/tcc/tcc-0.9.26-1136-g5bba73cc.tar.gz</a> </span></div><div class="line" id="181107"><span class="nick" style="color:#8dd3c7"><a href="#181107" label="[18:11:07]">&lt;stikonas&gt;</a></span><span class="message">I guess that's commit g5bba73cc..</span></div><div class="line" id="181342"><span class="nick" style="color:#bc80bd"><a href="#181342" label="[18:13:42]">&lt;vagrantc&gt;</a></span><span class="message">Hagfish: the difference with the builds from debian.notset.fr and the builds at tests.reproducible-builds.org are that debian.notset.fr builds the packages with the same toolchains that the packages in the debian.org archive used, whereas the tests.r-b.org builds use whatever happens to be currently in the relevent debian release</span></div><div class="line" id="181345"><span class="nick" style="color:#6d2462"><a href="#181345" label="[18:13:45]">&lt;gbrlwck&gt;</a></span><span class="message">`git checkout g5bba73cc` does not seem to work (on that source tree)</span></div><div class="line" id="181415"><span class="nick" style="color:#bc80bd"><a href="#181415" label="[18:14:15]">&lt;vagrantc&gt;</a></span><span class="message">both of which are basically using binary seeds of &quot;what was once in the debian.org archive&quot; or &quot;what is currently in the debian.org archive&quot;</span></div><div class="line" id="181436"><span class="nick" style="color:#8dd3c7"><a href="#181436" label="[18:14:36]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: oh, remove first g</span></div><div class="line" id="181440"><span class="nick" style="color:#8dd3c7"><a href="#181440" label="[18:14:40]">&lt;stikonas&gt;</a></span><span class="message">it's 5bba73cc</span></div><div class="line" id="181545"><span class="nick" style="color:#bc80bd"><a href="#181545" label="[18:15:45]">&lt;vagrantc&gt;</a></span><span class="message">Hagfish: also the tests.r-b.org builds intentionally vary a bunch of arbitrary things to trigger reproducibility, the debian.notset.fr tries to minimize differences ... neither project really does any bootstrappable sort of stuff</span></div><div class="line" id="181553"><span class="nick" style="color:#6d2462"><a href="#181553" label="[18:15:53]">&lt;gbrlwck&gt;</a></span><span class="message">:) thanks</span></div><div class="line" id="181614"><span class="nick" style="color:#6d2462"><a href="#181614" label="[18:16:14]">&lt;gbrlwck&gt;</a></span><span class="message">they all show version 0.9.27, btw</span></div><div class="line" id="182418"><span class="nick" style="color:#6d2462"><a href="#182418" label="[18:24:18]">&lt;gbrlwck&gt;</a></span><span class="message">is mescc more than invoking mes with a mescc.scm script?</span></div><div class="line" id="182814"><span class="nick" style="color:#8dd3c7"><a href="#182814" label="[18:28:14]">&lt;stikonas&gt;</a></span><span class="message">gbrlwck: well, mescc.scm script doesn't have much logic in the file itself</span></div><div class="line" id="182820"><span class="nick" style="color:#8dd3c7"><a href="#182820" label="[18:28:20]">&lt;stikonas&gt;</a></span><span class="message">it loads mescc module from modules dir</span></div><div class="line" id="182832"><span class="nick" style="color:#8dd3c7"><a href="#182832" label="[18:28:32]">&lt;stikonas&gt;</a></span><span class="message">so depends on what you mean by &quot;more than&quot;</span></div><div class="line" id="182856"><span class="nick" style="color:#8dd3c7"><a href="#182856" label="[18:28:56]">&lt;stikonas&gt;</a></span><span class="message">if you mean do you need to run anything else than no</span></div><div class="line" id="182910"><span class="nick" style="color:#8dd3c7"><a href="#182910" label="[18:29:10]">&lt;stikonas&gt;</a></span><span class="message">it's just mescc.scm that you need to run</span></div><div class="line" id="182921"><span class="nick" style="color:#8dd3c7"><a href="#182921" label="[18:29:21]">&lt;stikonas&gt;</a></span><span class="message">but under the hood it loads much more code</span></div><div class="line" id="182929"><span class="nick" style="color:#8dd3c7"><a href="#182929" label="[18:29:29]">&lt;stikonas&gt;</a></span><span class="message">mes is just scheme interpreter</span></div><div class="line" id="182949"><span class="nick" style="color:#8dd3c7"><a href="#182949" label="[18:29:49]">&lt;stikonas&gt;</a></span><span class="message">and all the C code is split between parser (nyacc) and mescc module</span></div><div class="line" id="183018"><span class="nick" style="color:#6d2462"><a href="#183018" label="[18:30:18]">&lt;gbrlwck&gt;</a></span><span class="message">makes sense :) i was wondering if there was another repo involved which i couldn't find</span></div><div class="line" id="183121"><span class="nick" style="color:#8dd3c7"><a href="#183121" label="[18:31:21]">&lt;stikonas&gt;</a></span><span class="message">well, nyacc</span></div><div class="line" id="183128"><span class="nick" style="color:#8dd3c7"><a href="#183128" label="[18:31:28]">&lt;stikonas&gt;</a></span><span class="message">and you need specific commit</span></div><div class="line" id="183140"><span class="nick" style="color:#8dd3c7"><a href="#183140" label="[18:31:40]">&lt;stikonas&gt;</a></span><span class="message">I think it's not backwards compatible</span></div><div class="line" id="183216"><span class="nick" style="color:#8dd3c7"><a href="#183216" label="[18:32:16]">&lt;stikonas&gt;</a></span><span class="message">1.00.2 from <a rel="nofollow" href="https://download.savannah.gnu.org/releases/nyacc/">https://download.savannah.gnu.org/releases/nyacc/</a> </span></div><div class="line" id="183931"><span class="nick" style="color:#6d2462"><a href="#183931" label="[18:39:31]">&lt;gbrlwck&gt;</a></span><span class="message">so, since we can not /compile/ scheme yet, i simply have to make the nyacc modules available in the load path of mes, right?</span></div><div class="line" id="184100"><span class="nick" style="color:#8dd3c7"><a href="#184100" label="[18:41:00]">&lt;stikonas&gt;</a></span><span class="message">yes</span></div><div class="line" id="184107"><span class="nick" style="color:#8dd3c7"><a href="#184107" label="[18:41:07]">&lt;stikonas&gt;</a></span><span class="message">well, mes is an interperter</span></div><div class="line" id="184113"><span class="nick" style="color:#8dd3c7"><a href="#184113" label="[18:41:13]">&lt;stikonas&gt;</a></span><span class="message">there is nothing to compile</span></div><div class="line" id="184133"><span class="nick" style="color:#8dd3c7"><a href="#184133" label="[18:41:33]">&lt;stikonas&gt;</a></span><span class="message">mes itself is a C program and can be compiled</span></div><div class="line" id="184150"><span class="nick" style="color:#8dd3c7"><a href="#184150" label="[18:41:50]">&lt;stikonas&gt;</a></span><span class="message">but at the moment you can only recompile mes for x86</span></div><div class="line" id="184202"><span class="nick" style="color:#6d2462"><a href="#184202" label="[18:42:02]">&lt;gbrlwck&gt;</a></span><span class="message">yeah, just bc nyacc's make actually compiles the modules (and install probably copies them to $GUILE_LOAD_COMPILED_PATH)</span></div><div class="line" id="184204"><span class="nick" style="color:#8dd3c7"><a href="#184204" label="[18:42:04]">&lt;stikonas&gt;</a></span><span class="message">if you want to rebuild it on riscv64 you need to first port mescc to it</span></div><div class="line" id="184211"><span class="nick" style="color:#8dd3c7"><a href="#184211" label="[18:42:11]">&lt;stikonas&gt;</a></span><span class="message">there is some initial work done in mes branch</span></div><div class="line" id="184229"><span class="nick" style="color:#8dd3c7"><a href="#184229" label="[18:42:29]">&lt;stikonas&gt;</a></span><span class="message">oh, make probably just uses guile</span></div><div class="line" id="184245"><span class="nick" style="color:#6d2462"><a href="#184245" label="[18:42:45]">&lt;gbrlwck&gt;</a></span><span class="message">well, guild, but yes</span></div><div class="line" id="184254"><span class="nick" style="color:#8dd3c7"><a href="#184254" label="[18:42:54]">&lt;stikonas&gt;</a></span><span class="message">guile does some processing from scm files to guile objects, but I'm not very familiar with it</span></div><div class="line" id="184309"><span class="nick" style="color:#8dd3c7"><a href="#184309" label="[18:43:09]">&lt;stikonas&gt;</a></span><span class="message">yes, probably guild...</span></div><div class="line" id="185023"><span class="nick" style="color:#6c3d55"><a href="#185023" label="[18:50:23]">&lt;Hagfish&gt;</a></span><span class="message">vagrantc: thanks for the extra context</span></div><div class="line" id="185058"><span class="nick" style="color:#8dd3c7"><a href="#185058" label="[18:50:58]">&lt;stikonas&gt;</a></span><span class="message">Hagfish: well, we also rebuild some stuff twice in live-bootstrap</span></div><div class="line" id="185103"><span class="nick" style="color:#bc80bd"><a href="#185103" label="[18:51:03]">&lt;vagrantc&gt;</a></span><span class="message">it's a project i'm following with much excitement :)</span></div><div class="line" id="185109"><span class="nick" style="color:#8dd3c7"><a href="#185109" label="[18:51:09]">&lt;stikonas&gt;</a></span><span class="message">so there are some bugs that propagate a bit</span></div><div class="line" id="185121"><span class="nick" style="color:#6c3d55"><a href="#185121" label="[18:51:21]">&lt;Hagfish&gt;</a></span><span class="message">it's interesting that t.r-b.org deliberately tries to trigger non-reproducibility, and yet i think they also achieve a higher percentage of reproducible packages</span></div><div class="line" id="185132"><span class="nick" style="color:#8dd3c7"><a href="#185132" label="[18:51:32]">&lt;stikonas&gt;</a></span><span class="message">(most likely due to bugs in C library)</span></div><div class="line" id="185133"><span class="nick" style="color:#6c3d55"><a href="#185133" label="[18:51:33]">&lt;Hagfish&gt;</a></span><span class="message">stikonas: intriguing</span></div><div class="line" id="185139"><span class="nick" style="color:#6c3d55"><a href="#185139" label="[18:51:39]">&lt;Hagfish&gt;</a></span><span class="message">ah yes, that makes sense</span></div><div class="line" id="185203"><span class="nick" style="color:#8dd3c7"><a href="#185203" label="[18:52:03]">&lt;stikonas&gt;</a></span><span class="message"> <a rel="nofollow" href="https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst">https://github.com/fosslinux/live-bootstrap/blob/master/parts.rst</a>  e.g. see 20 and 22</span></div><div class="line" id="185217"><span class="nick" style="color:#8dd3c7"><a href="#185217" label="[18:52:17]">&lt;stikonas&gt;</a></span><span class="message">first tcc has float handling messed up</span></div><div class="line" id="185259"><span class="nick" style="color:#8dd3c7"><a href="#185259" label="[18:52:59]">&lt;stikonas&gt;</a></span><span class="message">so if binary snapshot used for building is older, having to rebuild everything twice is not entirely surprising</span></div><div class="line" id="185318"><span class="nick" style="color:#8dd3c7"><a href="#185318" label="[18:53:18]">&lt;stikonas&gt;</a></span><span class="message">but yes, it does look a bit dodgy</span></div><div class="line" id="185328"><span class="nick" style="color:#8dd3c7"><a href="#185328" label="[18:53:28]">&lt;stikonas&gt;</a></span><span class="message">at least when you do that in bootstrapping it's a bit less dodgy</span></div><div class="line" id="185357"><span class="nick" style="color:#8dd3c7"><a href="#185357" label="[18:53:57]">&lt;stikonas&gt;</a></span><span class="message">since everything in the end is built from source</span></div><div class="line" id="185644"><span class="nick" style="color:#6c3d55"><a href="#185644" label="[18:56:44]">&lt;Hagfish&gt;</a></span><span class="message">right</span></div><div class="line" id="185719"><span class="nick" style="color:#bc80bd"><a href="#185719" label="[18:57:19]">&lt;vagrantc&gt;</a></span><span class="message">Hagfish: possibly due to toolchain fixes introduced since the original package build</span></div><div class="line" id="185948"><span class="nick" style="color:#8dd3c7"><a href="#185948" label="[18:59:48]">&lt;stikonas&gt;</a></span><span class="message">especially considering that toolchains often does source optimization</span></div><div class="line" id="190019"><span class="nick" style="color:#8dd3c7"><a href="#190019" label="[19:00:19]">&lt;stikonas&gt;</a></span><span class="message">so if you have newer toolchain, it will compile packages differently</span></div><div class="line" id="190306"><span class="nick" style="color:#bc80bd"><a href="#190306" label="[19:03:06]">&lt;vagrantc&gt;</a></span><span class="message">well, debian.notset.fr is one build with old toolchain compared against another build with old toolchain, and tests.r-b.org is one build with current toolchain compared against another build with current toolchain</span></div><div class="line" id="190353"><span class="nick" style="color:#bc80bd"><a href="#190353" label="[19:03:53]">&lt;vagrantc&gt;</a></span><span class="message">but the current toolchains have fixes that fix reproducibility issues ... nobody's expecting bit-for-bit identical with different toolchains (other than with projects where that's a design goal like mes)</span></div><div class="line" id="191049"><span class="nick" style="color:#6c3d55"><a href="#191049" label="[19:10:49]">&lt;Hagfish&gt;</a></span><span class="message">yeah, good point</span></div><div class="line" id="191333"><span class="nick" style="color:#8dd3c7"><a href="#191333" label="[19:13:33]">&lt;stikonas&gt;</a></span><span class="message">well, even different versions of mes and M2-Planet are not guaranteed to produce the same bit-for-bit identical binary</span></div><div class="line" id="191340"><span class="nick" style="color:#8dd3c7"><a href="#191340" label="[19:13:40]">&lt;stikonas&gt;</a></span><span class="message">if we need to fix codegen bugs</span></div><div class="line" id="191352"><span class="nick" style="color:#8dd3c7"><a href="#191352" label="[19:13:52]">&lt;stikonas&gt;</a></span><span class="message">and adjust assembly output, then binaries will change</span></div><div class="line" id="191358"><span class="nick" style="color:#bc80bd"><a href="#191358" label="[19:13:58]">&lt;vagrantc&gt;</a></span><span class="message">(i meant mes itself)</span></div><div class="line" id="212439"><span class="nick" style="color:#8dd3c7"><a href="#212439" label="[21:24:39]">&lt;stikonas&gt;</a></span><span class="message">Mutabah seems to be doing good job with mrustc. Almost done with rust 1.54. Which is still fairly new</span></div><div class="line" id="221533"><span class="nick" style="color:#234e69"><a href="#221533" label="[22:15:33]">&lt;fossy&gt;</a></span><span class="message">yes, tcc is synonym of tinycc</span></div><div class="line" id="221748"><span class="nick" style="color:#6d2462"><a href="#221748" label="[22:17:48]">&lt;gbrlwck&gt;</a></span><span class="message">yeah, it's also written in README</span></div><div class="line" id="230917"><span class="nick" style="color:#6d2462"><a href="#230917" label="[23:09:17]">&lt;gbrlwck&gt;</a></span><span class="message">does linux-libre build reproducibly?</span></div><div class="line" id="231352"><span class="nick" style="color:#234e69"><a href="#231352" label="[23:13:52]">&lt;fossy&gt;</a></span><span class="message">yes</span></div><div class="line" id="232643"><span class="nick" style="color:#8dd3c7"><a href="#232643" label="[23:26:43]">&lt;stikonas&gt;</a></span><span class="message">fossy: we don't do checksums for it</span></div><div class="line" id="232649"><span class="nick" style="color:#8dd3c7"><a href="#232649" label="[23:26:49]">&lt;stikonas&gt;</a></span><span class="message">so how do we know?</span></div><div class="line" id="232816"><span class="nick" style="color:#8dd3c7"><a href="#232816" label="[23:28:16]">&lt;stikonas&gt;</a></span><span class="message">at least by default kernel does have timestamps (compile date) but I don't remember if you removed that</span></div><div class="line" id="232902"><span class="nick" style="color:#8dd3c7"><a href="#232902" label="[23:29:02]">&lt;stikonas&gt;</a></span><span class="message">and initramfs is definitely not fully reproducible bit-by-bit because we don't strip timestamps from it</span></div><div class="line" id="233129"><span class="nick" style="color:#234e69"><a href="#233129" label="[23:31:29]">&lt;fossy&gt;</a></span><span class="message">oh wait I meant to add that</span></div><div class="line" id="233135"><span class="nick" style="color:#234e69"><a href="#233135" label="[23:31:35]">&lt;fossy&gt;</a></span><span class="message">it is reproducible, I checked</span></div><div class="line" id="233144"><span class="nick" style="color:#234e69"><a href="#233144" label="[23:31:44]">&lt;fossy&gt;</a></span><span class="message">initramfs is not</span></div><div class="line" id="233224"><span class="nick" style="color:#8dd3c7"><a href="#233224" label="[23:32:24]">&lt;stikonas&gt;</a></span><span class="message">but the contents of initramfs should reproducible, I think it's only metadata that differs</span></div><div class="line" id="233259"><span class="nick" style="color:#8dd3c7"><a href="#233259" label="[23:32:59]">&lt;stikonas&gt;</a></span><span class="message">at the very least all binaries and sources in it are checksumed</span></div><div class="line" id="233832"><span class="nick" style="color:#6d2462"><a href="#233832" label="[23:38:32]">&lt;gbrlwck&gt;</a></span><span class="message">nice</span></div><div class="line" id="235405"><span class="nick" style="color:#389600"><a href="#235405" label="[23:54:05]">&lt;oriansj&gt;</a></span><span class="message">stikonas: to the question of what is the future of mes-m2; well that is hard to answer. Ideally porting to multiple architectures but I doubt it will be backported into Mes as M2-Planet builds don't comply with the GNU build standards. (lack of autotools and all that jazz)</span></div><div class="line" id="235606"><span class="nick" style="color:#8dd3c7"><a href="#235606" label="[23:56:06]">&lt;stikonas&gt;</a></span><span class="message">well, I guess it's fine keeping it separate...</span></div><div class="line" id="235619"><span class="nick" style="color:#8dd3c7"><a href="#235619" label="[23:56:19]">&lt;stikonas&gt;</a></span><span class="message">although then the question is how to merge mes updates back</span></div><div class="line" id="235636"><span class="nick" style="color:#8dd3c7"><a href="#235636" label="[23:56:36]">&lt;stikonas&gt;</a></span><span class="message">from upstream into mes-m2...</span></div><div class="line" id="235703"><span class="nick" style="color:#389600"><a href="#235703" label="[23:57:03]">&lt;oriansj&gt;</a></span><span class="message">as for what go is doing. seems like just minor metadata additions. Personally if I were to go that route, I'd just add a source section to the ELF binaries themselves (trivial to do in M2-Planet) and distribute the source code used in making the binary in the binary itself.</span></div><div class="line" id="235729"><span class="nick" style="color:#8dd3c7"><a href="#235729" label="[23:57:29]">&lt;stikonas&gt;</a></span><span class="message">by the way, that diff I posted has #if defined at the end...</span></div><div class="line" id="235758"><span class="nick" style="color:#389600"><a href="#235758" label="[23:57:58]">&lt;oriansj&gt;</a></span><span class="message">well mes.c doesn't get updated much, but MesCC bit certainly does.</span></div><div class="line" id="235823"><span class="nick" style="color:#389600"><a href="#235823" label="[23:58:23]">&lt;oriansj&gt;</a></span><span class="message">odd ctrl-f search didn't find the word defined at all</span></div><div class="line" id="235836"><span class="nick" style="color:#8dd3c7"><a href="#235836" label="[23:58:36]">&lt;stikonas&gt;</a></span><span class="message">e.g. <a rel="nofollow" href="https://github.com/stikonas/mes-m2/commit/740da2816ac1aa7c46c64c574f0a4e69427b7e91#diff-d1913f7376be639b02e96c98895f96726df7d5f8abcd4e9331ed4f6c63f95c25R24">https://github.com/stikonas/mes-m2/commit/740da2816ac1aa7c46c64c574f0a4e69427b7e91#diff-d1913f7376be639b02e96c98895f96726df7d5f8abcd4e9331ed4f6c63f95c25R24</a> </span></div><div class="line" id="235842"><span class="nick" style="color:#8dd3c7"><a href="#235842" label="[23:58:42]">&lt;stikonas&gt;</a></span><span class="message">maybe I gave the wrong branch</span></div><div class="line" id="235902"><span class="nick" style="color:#8dd3c7"><a href="#235902" label="[23:59:02]">&lt;stikonas&gt;</a></span><span class="message">well, mes-m2 actually doesn't have to deal with mescc much</span></div><div class="line" id="235912"><span class="nick" style="color:#8dd3c7"><a href="#235912" label="[23:59:12]">&lt;stikonas&gt;</a></span><span class="message">as long as we can build mes-m2, we can then switch to upstream mes</span></div><div class="line" id="235921"><span class="nick" style="color:#8dd3c7"><a href="#235921" label="[23:59:21]">&lt;stikonas&gt;</a></span><span class="message">and use mescc from there</span></div><div class="line" id="235935"><span class="nick" style="color:#8dd3c7"><a href="#235935" label="[23:59:35]">&lt;stikonas&gt;</a></span><span class="message">I think mescc is somewhat compatible across mes versions</span></div><br /></div></body></html>