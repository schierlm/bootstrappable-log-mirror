<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2023-12-22.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="020321"><span class="nick" style="color:#389600"><a href="#020321" label="[02:03:21]">&lt;stikonas&gt;</a></span><span class="message">oriansj: thanks for merging bootstrap seed PR</span></div><div class="line" id="020344"><span class="nick" style="color:#389600"><a href="#020344" label="[02:03:44]">&lt;stikonas&gt;</a></span><span class="message">now I just need to go up the chain, but hopefully it will be easier and easier</span></div><div class="line" id="020410"><span class="nick" style="color:#389600"><a href="#020410" label="[02:04:10]">&lt;stikonas&gt;</a></span><span class="message">well, hex1 will still need some fidling...</span></div><div class="line" id="020424"><span class="nick" style="color:#389600"><a href="#020424" label="[02:04:24]">&lt;stikonas&gt;</a></span><span class="message">but after that with labels it will be much easier</span></div><div class="line" id="132734"><span class="nick" style="color:#8dd3c7"><a href="#132734" label="[13:27:34]">&lt;GoogulatorMobile&gt;</a></span><span class="message">fossy: pushed the final script refactor, ready for review</span></div><div class="line" id="132759"><span class="nick" style="color:#8dd3c7"><a href="#132759" label="[13:27:59]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Thanks for the hint about rebase -i btw, it's indeed &quot;git histedit&quot; in all but name</span></div><div class="line" id="132818"><span class="nick" style="color:#8dd3c7"><a href="#132818" label="[13:28:18]">&lt;GoogulatorMobile&gt;</a></span><span class="message">(if only there was also a &quot;git evolve&quot;...)</span></div><div class="line" id="142409"><span class="nick" style="color:#389600"><a href="#142409" label="[14:24:09]">&lt;stikonas&gt;</a></span><span class="message">yeah, &quot;git rebase -i&quot; is quite essential when you work on multi-commit features</span></div><div class="line" id="142445"><span class="nick" style="color:#389600"><a href="#142445" label="[14:24:45]">&lt;stikonas&gt;</a></span><span class="message">I usually invoke it as &quot;git rebase -i master&quot; rather than specific commit number, so I don't need to count</span></div><div class="line" id="152604"><span class="nick" style="color:#2e2a4a"><a href="#152604" label="[15:26:04]">&lt;oriansj&gt;</a></span><span class="message">wow, one can add garbage collection to C without really changing the language</span></div><div class="line" id="152654"><span class="nick" style="color:#2e2a4a"><a href="#152654" label="[15:26:54]">&lt;oriansj&gt;</a></span><span class="message">or breaking any existing programs</span></div><div class="line" id="152746"><span class="nick" style="color:#8dd3c7"><a href="#152746" label="[15:27:46]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Garbage-collected implementations of C have been IIRC officially permitted since the first ANSI standard</span></div><div class="line" id="152834"><span class="nick" style="color:#8dd3c7"><a href="#152834" label="[15:28:34]">&lt;GoogulatorMobile&gt;</a></span><span class="message">C++ actually lagged behind on that, only in C++11 was garbage collection officially allowed</span></div><div class="line" id="153606"><span class="nick" style="color:#2e2a4a"><a href="#153606" label="[15:36:06]">&lt;oriansj&gt;</a></span><span class="message">one only needs to add malloc_stack, malloc_compact and malloc_gc; malloc_stack automatically gets collected when the function returns and malloc_gc pointers are tracked and garbage collected only when malloc_gc or when malloc_compact is called. calling free on malloc_stack or malloc_gc memory should be a nop and the compiler only needs to track the malloc_gc pointers.</span></div><div class="line" id="201223"><span class="nick" style="color:#389600"><a href="#201223" label="[20:12:23]">&lt;stikonas&gt;</a></span><span class="message">GoogulatorMobile: so ekaitz found that mes indeed compiles things twice now...</span></div><div class="line" id="201228"><span class="nick" style="color:#389600"><a href="#201228" label="[20:12:28]">&lt;stikonas&gt;</a></span><span class="message">(though not intentionally)</span></div><div class="line" id="201241"><span class="nick" style="color:#389600"><a href="#201241" label="[20:12:41]">&lt;stikonas&gt;</a></span><span class="message">there isn't any extra optimization</span></div><div class="line" id="201304"><span class="nick" style="color:#6b8072"><a href="#201304" label="[20:13:04]">&lt;ekaitz&gt;</a></span><span class="message">compiling anything with -vvv shows that it reads the file twice</span></div><div class="line" id="201308"><span class="nick" style="color:#6b8072"><a href="#201308" label="[20:13:08]">&lt;ekaitz&gt;</a></span><span class="message">and outputs things twice</span></div><div class="line" id="201400"><span class="nick" style="color:#389600"><a href="#201400" label="[20:14:00]">&lt;stikonas&gt;</a></span><span class="message">yeah, that's not good...</span></div><div class="line" id="201405"><span class="nick" style="color:#389600"><a href="#201405" label="[20:14:05]">&lt;stikonas&gt;</a></span><span class="message">mes was already slow</span></div><div class="line" id="201422"><span class="nick" style="color:#389600"><a href="#201422" label="[20:14:22]">&lt;stikonas&gt;</a></span><span class="message">though somehow under qemu it feels far slower than twice</span></div><div class="line" id="201427"><span class="nick" style="color:#389600"><a href="#201427" label="[20:14:27]">&lt;stikonas&gt;</a></span><span class="message">but maybe it's a combination of thigns</span></div><div class="line" id="201454"><span class="nick" style="color:#389600"><a href="#201454" label="[20:14:54]">&lt;stikonas&gt;</a></span><span class="message">e.g. 2x slowdown from doing things twice, then some extra slowdown from loading more scheme libraries</span></div><div class="line" id="202406"><span class="nick" style="color:#6b8072"><a href="#202406" label="[20:24:06]">&lt;ekaitz&gt;</a></span><span class="message">i think if we make it run things just once it might be faster than before</span></div><div class="line" id="202409"><span class="nick" style="color:#6b8072"><a href="#202409" label="[20:24:09]">&lt;ekaitz&gt;</a></span><span class="message">but i don't know</span></div><div class="line" id="202845"><span class="nick" style="color:#389600"><a href="#202845" label="[20:28:45]">&lt;stikonas&gt;</a></span><span class="message">I doubt it...</span></div><div class="line" id="202850"><span class="nick" style="color:#389600"><a href="#202850" label="[20:28:50]">&lt;stikonas&gt;</a></span><span class="message">but let's see...</span></div><div class="line" id="212106"><span class="nick" style="color:#8dd3c7"><a href="#212106" label="[21:21:06]">&lt;GoogulatorMobile&gt;</a></span><span class="message">ekaitz: so basically it compiles everything, writes a finishing binary, then does it again exactly the same, overwriting the original compiled binary with itself?</span></div><div class="line" id="212530"><span class="nick" style="color:#2e2a4a"><a href="#212530" label="[21:25:30]">&lt;oriansj&gt;</a></span><span class="message">it also evaluates lisp code in lisp code before running the evaluation if I remember correctly</span></div><div class="line" id="212711"><span class="nick" style="color:#2e2a4a"><a href="#212711" label="[21:27:11]">&lt;oriansj&gt;</a></span><span class="message">a sort of making a more powerful lisp in the lisp subset implemented in mes.c which is a very clever way to keep mes.c much simpler and smaller.</span></div><div class="line" id="212813"><span class="nick" style="color:#2e2a4a"><a href="#212813" label="[21:28:13]">&lt;oriansj&gt;</a></span><span class="message">although expanding mes.c and skipping that double implementation would probably really help performance but only janneke knows.</span></div><div class="line" id="212954"><span class="nick" style="color:#389600"><a href="#212954" label="[21:29:54]">&lt;stikonas&gt;</a></span><span class="message">oriansj: well, if you really want performance, probably improving M2-Planet or writing something after M2-Planet would help far more</span></div><div class="line" id="213020"><span class="nick" style="color:#389600"><a href="#213020" label="[21:30:20]">&lt;stikonas&gt;</a></span><span class="message">I guess at this point M2-Planet is not that far behind mescc</span></div><div class="line" id="213037"><span class="nick" style="color:#389600"><a href="#213037" label="[21:30:37]">&lt;stikonas&gt;</a></span><span class="message">but it's always the small remaining bugs that take a lot of time to sort out if you want to bootstrap something new</span></div><div class="line" id="213104"><span class="nick" style="color:#6b8072"><a href="#213104" label="[21:31:04]">&lt;ekaitz&gt;</a></span><span class="message">GoogulatorMobile: I know where it's coming from i think</span></div><div class="line" id="213107"><span class="nick" style="color:#6b8072"><a href="#213107" label="[21:31:07]">&lt;ekaitz&gt;</a></span><span class="message">i'll patch it</span></div><div class="line" id="213119"><span class="nick" style="color:#6b8072"><a href="#213119" label="[21:31:19]">&lt;ekaitz&gt;</a></span><span class="message">it's basically calling main twice</span></div><div class="line" id="213301"><span class="nick" style="color:#8dd3c7"><a href="#213301" label="[21:33:01]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Ouch</span></div><div class="line" id="213323"><span class="nick" style="color:#8dd3c7"><a href="#213323" label="[21:33:23]">&lt;GoogulatorMobile&gt;</a></span><span class="message">It's weird that &quot;Hello, m2-mes!&quot; isn't printed twice, though</span></div><div class="line" id="213338"><span class="nick" style="color:#8dd3c7"><a href="#213338" label="[21:33:38]">&lt;GoogulatorMobile&gt;</a></span><span class="message">Or is it only when loading Scheme code from a file?</span></div><div class="line" id="213353"><span class="nick" style="color:#6b8072"><a href="#213353" label="[21:33:53]">&lt;ekaitz&gt;</a></span><span class="message">it's calling the mescc module's main twice only</span></div><div class="line" id="213406"><span class="nick" style="color:#6b8072"><a href="#213406" label="[21:34:06]">&lt;ekaitz&gt;</a></span><span class="message">brb</span></div><div class="line" id="214717"><span class="nick" style="color:#2e2a4a"><a href="#214717" label="[21:47:17]">&lt;oriansj&gt;</a></span><span class="message">stikonas: well I guess I could write an optimizing C compiler using only the M2-Planet subset</span></div><div class="line" id="214748"><span class="nick" style="color:#2e2a4a"><a href="#214748" label="[21:47:48]">&lt;oriansj&gt;</a></span><span class="message">it'll take me a while but we probably could give mescc an even better assembler and linker</span></div><div class="line" id="215729"><span class="nick" style="color:#6b8072"><a href="#215729" label="[21:57:29]">&lt;ekaitz&gt;</a></span><span class="message">okay i'm back now</span></div><div class="line" id="215921"><span class="nick" style="color:#6b8072"><a href="#215921" label="[21:59:21]">&lt;ekaitz&gt;</a></span><span class="message">the problem is in scripts/mescc.scm.in</span></div><div class="line" id="221617"><span class="nick" style="color:#6b8072"><a href="#221617" label="[22:16:17]">&lt;ekaitz&gt;</a></span><span class="message">it's like now mes it's able to launch the main function of the script automatically</span></div><div class="line" id="221628"><span class="nick" style="color:#6b8072"><a href="#221628" label="[22:16:28]">&lt;ekaitz&gt;</a></span><span class="message">instead of having to import it and launch it manually</span></div><div class="line" id="221634"><span class="nick" style="color:#6b8072"><a href="#221634" label="[22:16:34]">&lt;ekaitz&gt;</a></span><span class="message">so now it's doing it twice</span></div><div class="line" id="221644"><span class="nick" style="color:#6b8072"><a href="#221644" label="[22:16:44]">&lt;ekaitz&gt;</a></span><span class="message">i'm trying to figure out what change produced that</span></div><div class="line" id="221840"><span class="nick" style="color:#6b8072"><a href="#221840" label="[22:18:40]">&lt;ekaitz&gt;</a></span><span class="message">something made the modules be the default so the code is loaded twice</span></div><div class="line" id="221847"><span class="nick" style="color:#6b8072"><a href="#221847" label="[22:18:47]">&lt;ekaitz&gt;</a></span><span class="message">and that's probably affecting other things too</span></div><div class="line" id="224407"><span class="nick" style="color:#6b8072"><a href="#224407" label="[22:44:07]">&lt;ekaitz&gt;</a></span><span class="message">oriansj: we need to improve mescc's performance a little</span></div><div class="line" id="224432"><span class="nick" style="color:#6b8072"><a href="#224432" label="[22:44:32]">&lt;ekaitz&gt;</a></span><span class="message">i think we could get a way better performance with little effort if we choose wisely what to do</span></div><div class="line" id="224439"><span class="nick" style="color:#6b8072"><a href="#224439" label="[22:44:39]">&lt;ekaitz&gt;</a></span><span class="message">that would require some measuring</span></div><div class="line" id="225103"><span class="nick" style="color:#389600"><a href="#225103" label="[22:51:03]">&lt;stikonas&gt;</a></span><span class="message">ekaitz: there might also be some (but not huge) gains if we replace some if/elseif chains with switch (especially in eval-apply)</span></div><div class="line" id="225157"><span class="nick" style="color:#6b8072"><a href="#225157" label="[22:51:57]">&lt;ekaitz&gt;</a></span><span class="message">stikonas: do you think so? aren't both of them generating a very similar code?</span></div><div class="line" id="225230"><span class="nick" style="color:#389600"><a href="#225230" label="[22:52:30]">&lt;stikonas&gt;</a></span><span class="message">in the optimizing compiler yes, but our code might be less optimal..</span></div><div class="line" id="225232"><span class="nick" style="color:#389600"><a href="#225232" label="[22:52:32]">&lt;stikonas&gt;</a></span><span class="message">hmm</span></div><div class="line" id="225248"><span class="nick" style="color:#389600"><a href="#225248" label="[22:52:48]">&lt;stikonas&gt;</a></span><span class="message">not sure about mescc, but new switch in M2-Planet might be better than if/else chains</span></div><div class="line" id="225400"><span class="nick" style="color:#389600"><a href="#225400" label="[22:54:00]">&lt;stikonas&gt;</a></span><span class="message">oriansj might know better as he did that switch work</span></div><div class="line" id="225418"><span class="nick" style="color:#2e2a4a"><a href="#225418" label="[22:54:18]">&lt;oriansj&gt;</a></span><span class="message">much more efficient to use the switch than if/else</span></div><div class="line" id="225510"><span class="nick" style="color:#2e2a4a"><a href="#225510" label="[22:55:10]">&lt;oriansj&gt;</a></span><span class="message">as it is 2 instructions per case in switch and 6 instructions per case in if/else</span></div><div class="line" id="225545"><span class="nick" style="color:#389600"><a href="#225545" label="[22:55:45]">&lt;stikonas&gt;</a></span><span class="message">yeah, that might make non-trivial difference for the whole program</span></div><div class="line" id="225557"><span class="nick" style="color:#2e2a4a"><a href="#225557" label="[22:55:57]">&lt;oriansj&gt;</a></span><span class="message">but both benefit greatly from being careful in the ordering of the most common case to least common case</span></div><div class="line" id="225558"><span class="nick" style="color:#389600"><a href="#225558" label="[22:55:58]">&lt;stikonas&gt;</a></span><span class="message">I think that eval-apply can be up to 25% of mescc runtime</span></div><div class="line" id="225623"><span class="nick" style="color:#389600"><a href="#225623" label="[22:56:23]">&lt;stikonas&gt;</a></span><span class="message">but we need to release new M2-Planet first...</span></div><div class="line" id="225647"><span class="nick" style="color:#2e2a4a"><a href="#225647" label="[22:56:47]">&lt;oriansj&gt;</a></span><span class="message">although fallthrough cases might also benefit scheme more</span></div><div class="line" id="230040"><span class="nick" style="color:#6b8072"><a href="#230040" label="[23:00:40]">&lt;ekaitz&gt;</a></span><span class="message">hmmmm</span></div><div class="line" id="230059"><span class="nick" style="color:#2e2a4a"><a href="#230059" label="[23:00:59]">&lt;oriansj&gt;</a></span><span class="message">and performance optimizations like lambda lifting require would require a mjor rewrite of M2-Planet</span></div><div class="line" id="230149"><span class="nick" style="color:#6b8072"><a href="#230149" label="[23:01:49]">&lt;ekaitz&gt;</a></span><span class="message">do we have switch/case in m2 already?</span></div><div class="line" id="230320"><span class="nick" style="color:#2e2a4a"><a href="#230320" label="[23:03:20]">&lt;oriansj&gt;</a></span><span class="message">yep</span></div><div class="line" id="230329"><span class="nick" style="color:#6b8072"><a href="#230329" label="[23:03:29]">&lt;ekaitz&gt;</a></span><span class="message">let's try this then aiight?</span></div><div class="line" id="230446"><span class="nick" style="color:#2e2a4a"><a href="#230446" label="[23:04:46]">&lt;oriansj&gt;</a></span><span class="message">as of commit 5566930976d23f0c6efeb03cf6cc19cf04cb61c1  on 2023-NOV-10</span></div><div class="line" id="230507"><span class="nick" style="color:#6b8072"><a href="#230507" label="[23:05:07]">&lt;ekaitz&gt;</a></span><span class="message">oh it's a new thing then</span></div><div class="line" id="230627"><span class="nick" style="color:#2e2a4a"><a href="#230627" label="[23:06:27]">&lt;oriansj&gt;</a></span><span class="message">yeah, it just missed the Release_1.11.0</span></div><div class="line" id="231044"><span class="nick" style="color:#6b8072"><a href="#231044" label="[23:10:44]">&lt;ekaitz&gt;</a></span><span class="message">wow there are many if blocks</span></div><div class="line" id="231141"><span class="nick" style="color:#6b8072"><a href="#231141" label="[23:11:41]">&lt;ekaitz&gt;</a></span><span class="message">can M2 do x || y || z ?</span></div><div class="line" id="231249"><span class="nick" style="color:#2e2a4a"><a href="#231249" label="[23:12:49]">&lt;oriansj&gt;</a></span><span class="message">for switch statements or in general?</span></div><div class="line" id="231306"><span class="nick" style="color:#6b8072"><a href="#231306" label="[23:13:06]">&lt;ekaitz&gt;</a></span><span class="message">in general</span></div><div class="line" id="231315"><span class="nick" style="color:#2e2a4a"><a href="#231315" label="[23:13:15]">&lt;oriansj&gt;</a></span><span class="message">oh yeah</span></div><div class="line" id="231323"><span class="nick" style="color:#2e2a4a"><a href="#231323" label="[23:13:23]">&lt;oriansj&gt;</a></span><span class="message">even cc_* supports that</span></div><div class="line" id="231401"><span class="nick" style="color:#6b8072"><a href="#231401" label="[23:14:01]">&lt;ekaitz&gt;</a></span><span class="message">there are some if(x == a) {this} else if (x == b){ this }</span></div><div class="line" id="231409"><span class="nick" style="color:#6b8072"><a href="#231409" label="[23:14:09]">&lt;ekaitz&gt;</a></span><span class="message">which doesn't have a lot of sense to me</span></div><div class="line" id="231502"><span class="nick" style="color:#2e2a4a"><a href="#231502" label="[23:15:02]">&lt;oriansj&gt;</a></span><span class="message">and if((x==a)||(x==b)) {this} will work</span></div><div class="line" id="231558"><span class="nick" style="color:#2e2a4a"><a href="#231558" label="[23:15:58]">&lt;oriansj&gt;</a></span><span class="message">but if a/b/x are integers, you can just do switch(x) {case a: caseb: this}</span></div><div class="line" id="231720"><span class="nick" style="color:#6b8072"><a href="#231720" label="[23:17:20]">&lt;ekaitz&gt;</a></span><span class="message">yes</span></div><div class="line" id="231758"><span class="nick" style="color:#6b8072"><a href="#231758" label="[23:17:58]">&lt;ekaitz&gt;</a></span><span class="message">I just changed the eval_apply block</span></div><div class="line" id="231800"><span class="nick" style="color:#6b8072"><a href="#231800" label="[23:18:00]">&lt;ekaitz&gt;</a></span><span class="message">only that</span></div><div class="line" id="231818"><span class="nick" style="color:#6b8072"><a href="#231818" label="[23:18:18]">&lt;ekaitz&gt;</a></span><span class="message">i can try to use that and see if there's any performance improvement</span></div><div class="line" id="231945"><span class="nick" style="color:#389600"><a href="#231945" label="[23:19:45]">&lt;stikonas&gt;</a></span><span class="message">on mes-&gt;mescc?</span></div><div class="line" id="232022"><span class="nick" style="color:#389600"><a href="#232022" label="[23:20:22]">&lt;stikonas&gt;</a></span><span class="message">hopefully it's also faster, but might not be the same factor as mes-m2 -&gt; mescc (but mes-m2 will need newer M2-Planet)</span></div><div class="line" id="232052"><span class="nick" style="color:#6b8072"><a href="#232052" label="[23:20:52]">&lt;ekaitz&gt;</a></span><span class="message">in general, if this is better, we should go for this</span></div><div class="line" id="232057"><span class="nick" style="color:#6b8072"><a href="#232057" label="[23:20:57]">&lt;ekaitz&gt;</a></span><span class="message">also the code is way easier to read</span></div><div class="line" id="232137"><span class="nick" style="color:#389600"><a href="#232137" label="[23:21:37]">&lt;stikonas&gt;</a></span><span class="message">yeah, I understand that. I was wondering how you test?</span></div><div class="line" id="232236"><span class="nick" style="color:#389600"><a href="#232236" label="[23:22:36]">&lt;stikonas&gt;</a></span><span class="message">ekaitz: another observation, mes 0.26 seems not that as slow on tcc.c as was with those small libc files</span></div><div class="line" id="232252"><span class="nick" style="color:#389600"><a href="#232252" label="[23:22:52]">&lt;stikonas&gt;</a></span><span class="message">after 1h it is already showing some warnings</span></div><div class="line" id="232252"><span class="nick" style="color:#6b8072"><a href="#232252" label="[23:22:52]">&lt;ekaitz&gt;</a></span><span class="message">hm</span></div><div class="line" id="232309"><span class="nick" style="color:#389600"><a href="#232309" label="[23:23:09]">&lt;stikonas&gt;</a></span><span class="message">so there is probably a lot of overhead for each invocation of mes</span></div><div class="line" id="232310"><span class="nick" style="color:#6b8072"><a href="#232310" label="[23:23:10]">&lt;ekaitz&gt;</a></span><span class="message">it's probably improved the performance on longer runs</span></div><div class="line" id="232312"><span class="nick" style="color:#6b8072"><a href="#232312" label="[23:23:12]">&lt;ekaitz&gt;</a></span><span class="message">yeah</span></div><div class="line" id="232319"><span class="nick" style="color:#389600"><a href="#232319" label="[23:23:19]">&lt;stikonas&gt;</a></span><span class="message">(that's qemu)</span></div><div class="line" id="232328"><span class="nick" style="color:#389600"><a href="#232328" label="[23:23:28]">&lt;stikonas&gt;</a></span><span class="message">might be worse performance on short runs though</span></div><div class="line" id="232339"><span class="nick" style="color:#389600"><a href="#232339" label="[23:23:39]">&lt;stikonas&gt;</a></span><span class="message">well, but let's see what happens once double build is fixed</span></div><div class="line" id="232427"><span class="nick" style="color:#389600"><a href="#232427" label="[23:24:27]">&lt;stikonas&gt;</a></span><span class="message">anyway, I'll probaby know tomorrow whether tcc-mes works on riscv</span></div><div class="line" id="232639"><span class="nick" style="color:#6b8072"><a href="#232639" label="[23:26:39]">&lt;ekaitz&gt;</a></span><span class="message">good</span></div><div class="line" id="232653"><span class="nick" style="color:#6b8072"><a href="#232653" label="[23:26:53]">&lt;ekaitz&gt;</a></span><span class="message">i think it's going to explode with the addend error we talked about</span></div><div class="line" id="232935"><span class="nick" style="color:#6b8072"><a href="#232935" label="[23:29:35]">&lt;ekaitz&gt;</a></span><span class="message">please help me understand, if is slower than switch-case because it has to load the variables and all that?</span></div><div class="line" id="232956"><span class="nick" style="color:#6b8072"><a href="#232956" label="[23:29:56]">&lt;ekaitz&gt;</a></span><span class="message">i'm trying to walk the assembly in my head...</span></div><div class="line" id="233010"><span class="nick" style="color:#389600"><a href="#233010" label="[23:30:10]">&lt;stikonas&gt;</a></span><span class="message">ekaitz: maybe worth generating small test program...</span></div><div class="line" id="233013"><span class="nick" style="color:#6b8072"><a href="#233013" label="[23:30:13]">&lt;ekaitz&gt;</a></span><span class="message">(i did the switch/case implementation of mes and here we are)</span></div><div class="line" id="233023"><span class="nick" style="color:#389600"><a href="#233023" label="[23:30:23]">&lt;stikonas&gt;</a></span><span class="message">maybe mes is good  there</span></div><div class="line" id="233035"><span class="nick" style="color:#389600"><a href="#233035" label="[23:30:35]">&lt;stikonas&gt;</a></span><span class="message">but M2-Planet's code, so mes-m2 would be faster</span></div><div class="line" id="233102"><span class="nick" style="color:#6b8072"><a href="#233102" label="[23:31:02]">&lt;ekaitz&gt;</a></span><span class="message">what I see is there's a lot of indirection too</span></div><div class="line" id="233104"><span class="nick" style="color:#6b8072"><a href="#233104" label="[23:31:04]">&lt;ekaitz&gt;</a></span><span class="message">that makes sense</span></div><div class="line" id="233110"><span class="nick" style="color:#389600"><a href="#233110" label="[23:31:10]">&lt;stikonas&gt;</a></span><span class="message">let me try to write something small</span></div><div class="line" id="233118"><span class="nick" style="color:#6b8072"><a href="#233118" label="[23:31:18]">&lt;ekaitz&gt;</a></span><span class="message">and for slow memories... it would break our performance</span></div><div class="line" id="233458"><span class="nick" style="color:#389600"><a href="#233458" label="[23:34:58]">&lt;stikonas&gt;</a></span><span class="message">oriansj: default is required in M2-Planet?</span></div><div class="line" id="233504"><span class="nick" style="color:#389600"><a href="#233504" label="[23:35:04]">&lt;stikonas&gt;</a></span><span class="message">in switch statement?</span></div><div class="line" id="233744"><span class="nick" style="color:#389600"><a href="#233744" label="[23:37:44]">&lt;stikonas&gt;</a></span><span class="message">ekaitz: 2 sample programs and assembly: <a rel="nofollow" href="https://paste.debian.net/1301897/">https://paste.debian.net/1301897/</a> </span></div><div class="line" id="233823"><span class="nick" style="color:#6b8072"><a href="#233823" label="[23:38:23]">&lt;ekaitz&gt;</a></span><span class="message">ugh i'm not very comfortable with x86</span></div><div class="line" id="233901"><span class="nick" style="color:#389600"><a href="#233901" label="[23:39:01]">&lt;stikonas&gt;</a></span><span class="message">riscv?</span></div><div class="line" id="233909"><span class="nick" style="color:#6b8072"><a href="#233909" label="[23:39:09]">&lt;ekaitz&gt;</a></span><span class="message">better yeah</span></div><div class="line" id="233911"><span class="nick" style="color:#6b8072"><a href="#233911" label="[23:39:11]">&lt;ekaitz&gt;</a></span><span class="message">(thanks)</span></div><div class="line" id="233922"><span class="nick" style="color:#389600"><a href="#233922" label="[23:39:22]">&lt;stikonas&gt;</a></span><span class="message">though it will be that inverse order riscv</span></div><div class="line" id="233927"><span class="nick" style="color:#389600"><a href="#233927" label="[23:39:27]">&lt;stikonas&gt;</a></span><span class="message">(that M1 can process...)</span></div><div class="line" id="234006"><span class="nick" style="color:#389600"><a href="#234006" label="[23:40:06]">&lt;stikonas&gt;</a></span><span class="message">ekaitz: <a rel="nofollow" href="https://paste.debian.net/1301898/">https://paste.debian.net/1301898/</a> </span></div><div class="line" id="234024"><span class="nick" style="color:#389600"><a href="#234024" label="[23:40:24]">&lt;stikonas&gt;</a></span><span class="message">first block is switch/case, second is if/elseif</span></div><div class="line" id="234104"><span class="nick" style="color:#6b8072"><a href="#234104" label="[23:41:04]">&lt;ekaitz&gt;</a></span><span class="message">yeah its way longer the if case</span></div><div class="line" id="234105"><span class="nick" style="color:#389600"><a href="#234105" label="[23:41:05]">&lt;stikonas&gt;</a></span><span class="message">so for if/elseif M2-Planet does a lot of comparison statements</span></div><div class="line" id="234122"><span class="nick" style="color:#389600"><a href="#234122" label="[23:41:22]">&lt;stikonas&gt;</a></span><span class="message">whereas switch/case is basically done during compilation</span></div><div class="line" id="234132"><span class="nick" style="color:#389600"><a href="#234132" label="[23:41:32]">&lt;stikonas&gt;</a></span><span class="message">we just jump directly into required case</span></div><div class="line" id="234244"><span class="nick" style="color:#389600"><a href="#234244" label="[23:42:44]">&lt;stikonas&gt;</a></span><span class="message">hmm, no maybe I'm lying</span></div><div class="line" id="234311"><span class="nick" style="color:#6b8072"><a href="#234311" label="[23:43:11]">&lt;ekaitz&gt;</a></span><span class="message">it's not as simple as jumping to the case</span></div><div class="line" id="234317"><span class="nick" style="color:#389600"><a href="#234317" label="[23:43:17]">&lt;stikonas&gt;</a></span><span class="message">yeah, we jump to the table</span></div><div class="line" id="234409"><span class="nick" style="color:#6b8072"><a href="#234409" label="[23:44:09]">&lt;ekaitz&gt;</a></span><span class="message">but yeah</span></div><div class="line" id="234412"><span class="nick" style="color:#6b8072"><a href="#234412" label="[23:44:12]">&lt;ekaitz&gt;</a></span><span class="message">it's better the case</span></div><div class="line" id="234444"><span class="nick" style="color:#6b8072"><a href="#234444" label="[23:44:44]">&lt;ekaitz&gt;</a></span><span class="message">it's way better for such a simple program</span></div><div class="line" id="234449"><span class="nick" style="color:#6b8072"><a href="#234449" label="[23:44:49]">&lt;ekaitz&gt;</a></span><span class="message">a 20% or so</span></div><div class="line" id="234507"><span class="nick" style="color:#6b8072"><a href="#234507" label="[23:45:07]">&lt;ekaitz&gt;</a></span><span class="message">but that's on code size</span></div><div class="line" id="234526"><span class="nick" style="color:#6b8072"><a href="#234526" label="[23:45:26]">&lt;ekaitz&gt;</a></span><span class="message">of course the exit is way better in the switch-case than in the if</span></div><div class="line" id="234536"><span class="nick" style="color:#6b8072"><a href="#234536" label="[23:45:36]">&lt;ekaitz&gt;</a></span><span class="message">on is just exiting</span></div><div class="line" id="234541"><span class="nick" style="color:#6b8072"><a href="#234541" label="[23:45:41]">&lt;ekaitz&gt;</a></span><span class="message">and the other has to recheck all</span></div><div class="line" id="234557"><span class="nick" style="color:#6b8072"><a href="#234557" label="[23:45:57]">&lt;ekaitz&gt;</a></span><span class="message">does it make sense to put the hotest case on the top?</span></div><div class="line" id="234606"><span class="nick" style="color:#389600"><a href="#234606" label="[23:46:06]">&lt;stikonas&gt;</a></span><span class="message">well, yes</span></div><div class="line" id="234617"><span class="nick" style="color:#389600"><a href="#234617" label="[23:46:17]">&lt;stikonas&gt;</a></span><span class="message">then the hotest will be done in the first cmp statement</span></div><div class="line" id="234639"><span class="nick" style="color:#389600"><a href="#234639" label="[23:46:39]">&lt;stikonas&gt;</a></span><span class="message">oriansj: said that too a few minutes ago</span></div><div class="line" id="234648"><span class="nick" style="color:#6b8072"><a href="#234648" label="[23:46:48]">&lt;ekaitz&gt;</a></span><span class="message">oh i may have missed that</span></div><div class="line" id="234743"><span class="nick" style="color:#6b8072"><a href="#234743" label="[23:47:43]">&lt;ekaitz&gt;</a></span><span class="message">hmm also in the if/elses we are exiting fast</span></div><div class="line" id="234750"><span class="nick" style="color:#6b8072"><a href="#234750" label="[23:47:50]">&lt;ekaitz&gt;</a></span><span class="message">so it's not that bad anyway</span></div><div class="line" id="234814"><span class="nick" style="color:#6b8072"><a href="#234814" label="[23:48:14]">&lt;ekaitz&gt;</a></span><span class="message">smaller code, but not that big performance hit, right?</span></div><div class="line" id="234859"><span class="nick" style="color:#6b8072"><a href="#234859" label="[23:48:59]">&lt;ekaitz&gt;</a></span><span class="message">let me try</span></div><div class="line" id="234945"><span class="nick" style="color:#6b8072"><a href="#234945" label="[23:49:45]">&lt;ekaitz&gt;</a></span><span class="message">maybe just putting the same code of the examples you gave me in a loop 1000 times can show if there's some benefit</span></div><br /></div></body></html>