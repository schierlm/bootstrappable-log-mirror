<!DOCTYPE html><html><head><title>IRC channel logs</title><style>html {
  background: #fdfdfd;
}

h1 {
  font-weight: 300;
}

h2 {
  font-weight: 200;
}

h3 {
  padding: .5em 0;
  border-top: 3px dotted #ddd;
  margin-bottom: 0;
}

form {
  width: 400px;
  display: flex;
}

input {
  width: 100%;
  display: flex;
  border-radius: .25em 0 0 .25em;
  border: 1px solid #aaa;
  border-right: 0;
  padding: 0.5em;
}

button {
  display: flex;
  border-radius: 0 .25em .25em 0;
  background-color: #007bff;
  border: 1px solid #007bff;
  padding: .5em;
  cursor: pointer;
  color: white;
}

button:hover {
  background-color: #0069d9;
  border-color: #0062cc;
}

a {
  color: #007bff;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

h4 {
  margin-bottom: .5em;
}

table td {
  padding: 0.75em;
}

table tr:hover {
  background: #eee;
}

.year {
  display: table;
}

.month {
  display: table-cell;
  padding-right: 1em;
}

ul {
  margin: 0;
  padding: 0;
  list-style: none;
}

.nick {
  padding-right: 0.6rem;
  font-weight: bold;
  text-align: right;
  width: 13rem;
  display: table-cell;
}

.nick a {
  color: inherit;
  text-decoration: none;
}

.message {
  display: table-cell;
  padding-left: 0.6rem;
  border-left: 2px solid #333;
}

.notice {
  color: #859900;
  font-style: italic;
}

.line {
  line-height: 1.8rem;
  display: table;
}

#logs {
  margin-top: 1.5rem;
  padding: 1.5rem;
}
</style></head><body><h1>IRC channel logs</h1><h2>2020-04-14.log</h2><p><a href="/bootstrappable">back to list of logs</a></p><div id="logs"><div class="line" id="004418"><span class="nick" style="color:#8dd3c7"><a href="#004418" label="[00:44:18]">&lt;OriansJ&gt;</a></span><span class="message">fossy: your coreutils work, it gives me an idea for reducing the bootstrapping time and complexity but it would force me to backtrack a little bit on M2-Planet and mescc-tools.</span></div><div class="line" id="005456"><span class="nick" style="color:#2e2a4a"><a href="#005456" label="[00:54:56]">&lt;fossy&gt;</a></span><span class="message">OriansJ: whats that? Coreutils in M2-Planet?</span></div><div class="line" id="010019"><span class="nick" style="color:#8dd3c7"><a href="#010019" label="[01:00:19]">&lt;OriansJ&gt;</a></span><span class="message">no but what if we converted TCC to M2-Planet's C subset?</span></div><div class="line" id="010348"><span class="nick" style="color:#2e2a4a"><a href="#010348" label="[01:03:48]">&lt;fossy&gt;</a></span><span class="message">OriansJ: an intreguing idea</span></div><div class="line" id="010357"><span class="nick" style="color:#2e2a4a"><a href="#010357" label="[01:03:57]">&lt;fossy&gt;</a></span><span class="message">A few things</span></div><div class="line" id="010403"><span class="nick" style="color:#2e2a4a"><a href="#010403" label="[01:04:03]">&lt;fossy&gt;</a></span><span class="message">1. Larger test suite</span></div><div class="line" id="010407"><span class="nick" style="color:#2e2a4a"><a href="#010407" label="[01:04:07]">&lt;fossy&gt;</a></span><span class="message">2. Code cleanuo</span></div><div class="line" id="010415"><span class="nick" style="color:#2e2a4a"><a href="#010415" label="[01:04:15]">&lt;fossy&gt;</a></span><span class="message">would need to be done first</span></div><div class="line" id="010507"><span class="nick" style="color:#2e2a4a"><a href="#010507" label="[01:05:07]">&lt;fossy&gt;</a></span><span class="message">I have toyed with the idea of replacing mes-m2 + gash with tcc + kaem</span></div><div class="line" id="010539"><span class="nick" style="color:#8dd3c7"><a href="#010539" label="[01:05:39]">&lt;OriansJ&gt;</a></span><span class="message">actually I was thinking of some enhancements from M2-Planet that TCC could really need. The first of which is the C compiler outputing assembly and having a seperate assembler and linker</span></div><div class="line" id="010627"><span class="nick" style="color:#8dd3c7"><a href="#010627" label="[01:06:27]">&lt;OriansJ&gt;</a></span><span class="message">So, I'd first have to create/convert a proper assembler/linker written in M2-Planet's subset</span></div><div class="line" id="010726"><span class="nick" style="color:#8dd3c7"><a href="#010726" label="[01:07:26]">&lt;OriansJ&gt;</a></span><span class="message">as M1 and hex2 would need serious changes to support some of the more complex elf functionality that bauen1 needs for his kernel</span></div><div class="line" id="010753"><span class="nick" style="color:#8dd3c7"><a href="#010753" label="[01:07:53]">&lt;OriansJ&gt;</a></span><span class="message">which by breaking TCC into a more M2-Planet style Compiler, I could trivially get it to run on bare metal</span></div><div class="line" id="011023"><span class="nick" style="color:#8dd3c7"><a href="#011023" label="[01:10:23]">&lt;OriansJ&gt;</a></span><span class="message">Then the bootstrap path would evolve into one where TCC becomes a redundant step.</span></div><div class="line" id="011557"><span class="nick" style="color:#8dd3c7"><a href="#011557" label="[01:15:57]">&lt;OriansJ&gt;</a></span><span class="message">So by simply freezing M1+hex2 and starting fresh with a proper Assembler (possibly found and converted to M2-Planet C) we skip alot of duplicate work, MesCC gains the ability to just match output with GCC -S and not deal with ELF headers anymore</span></div><div class="line" id="012515"><span class="nick" style="color:#8dd3c7"><a href="#012515" label="[01:25:15]">&lt;OriansJ&gt;</a></span><span class="message">That should significantly simplify MesCC's porting to new architectures</span></div><div class="line" id="012930"><span class="nick" style="color:#8dd3c7"><a href="#012930" label="[01:29:30]">&lt;OriansJ&gt;</a></span><span class="message">It has some significant advantages but requires me to do a significant amount of work with no directly useful results for a while. Not to mention would delay the mes-m2 work.</span></div><div class="line" id="013217"><span class="nick" style="color:#8dd3c7"><a href="#013217" label="[01:32:17]">&lt;OriansJ&gt;</a></span><span class="message">It would also enable a &quot;cheat&quot; bootstrap for janneke, as TCC could compile Guile if I remember correctly.</span></div><div class="line" id="013346"><span class="nick" style="color:#8dd3c7"><a href="#013346" label="[01:33:46]">&lt;OriansJ&gt;</a></span><span class="message">which would reduce the guile+MesCC-&gt;GCC bootstrap down to only a single generated file in guile.</span></div><div class="line" id="013514"><span class="nick" style="color:#8dd3c7"><a href="#013514" label="[01:35:14]">&lt;OriansJ&gt;</a></span><span class="message">but because of DDC, we have something to validate guix's bootstrap root of just guile.</span></div><div class="line" id="013549"><span class="nick" style="color:#8dd3c7"><a href="#013549" label="[01:35:49]">&lt;OriansJ&gt;</a></span><span class="message">But when we choose to do a proper bootstrap for guile, we simply finish mes-m2</span></div><div class="line" id="013817"><span class="nick" style="color:#8dd3c7"><a href="#013817" label="[01:38:17]">&lt;OriansJ&gt;</a></span><span class="message">First 2 things that need to be done for that option 1) Find a proper assembler written in C. 2) Figure out how to statically compile TCC with a single GCC command with no linking.</span></div><div class="line" id="014019"><span class="nick" style="color:#2e2a4a"><a href="#014019" label="[01:40:19]">&lt;fossy&gt;</a></span><span class="message">with no linking?</span></div><div class="line" id="014024"><span class="nick" style="color:#2e2a4a"><a href="#014024" label="[01:40:24]">&lt;fossy&gt;</a></span><span class="message">essy</span></div><div class="line" id="014028"><span class="nick" style="color:#2e2a4a"><a href="#014028" label="[01:40:28]">&lt;fossy&gt;</a></span><span class="message">one sec</span></div><div class="line" id="014238"><span class="nick" style="color:#2e2a4a"><a href="#014238" label="[01:42:38]">&lt;fossy&gt;</a></span><span class="message">OriansJ: <a rel="nofollow" href="https://github.com/fosslinux/gcc-seed/blob/master/x86/tinycc-0.9.27.sh#L22">https://github.com/fosslinux/gcc-seed/blob/master/x86/tinycc-0.9.27.sh#L22</a>  just add a flag to remove the linking</span></div><div class="line" id="014242"><span class="nick" style="color:#2e2a4a"><a href="#014242" label="[01:42:42]">&lt;fossy&gt;</a></span><span class="message">-c IIRC</span></div><div class="line" id="014407"><span class="nick" style="color:#2e2a4a"><a href="#014407" label="[01:44:07]">&lt;fossy&gt;</a></span><span class="message">OriansJ: We would also need to ensure Mes C Library can be compiled with M2-Planet.</span></div><div class="line" id="014412"><span class="nick" style="color:#2e2a4a"><a href="#014412" label="[01:44:12]">&lt;fossy&gt;</a></span><span class="message">TinyCC require Mes C Library</span></div><div class="line" id="014425"><span class="nick" style="color:#2e2a4a"><a href="#014425" label="[01:44:25]">&lt;fossy&gt;</a></span><span class="message">Why do you think we need a new assembler and linker?</span></div><div class="line" id="014429"><span class="nick" style="color:#2e2a4a"><a href="#014429" label="[01:44:29]">&lt;fossy&gt;</a></span><span class="message">MesCC uses M1 and hex2...</span></div><div class="line" id="014457"><span class="nick" style="color:#2e2a4a"><a href="#014457" label="[01:44:57]">&lt;fossy&gt;</a></span><span class="message">I haven't tried getting Guile to compile with TCC.</span></div><div class="line" id="014613"><span class="nick" style="color:#2e2a4a"><a href="#014613" label="[01:46:13]">&lt;fossy&gt;</a></span><span class="message">in addition we need a coreutils implementation - potentially pre-coreutils (textutils and family) or busybox?</span></div><div class="line" id="014635"><span class="nick" style="color:#2e2a4a"><a href="#014635" label="[01:46:35]">&lt;fossy&gt;</a></span><span class="message">Actually no we don't if we script up my coreutils build for TinyCC.</span></div><div class="line" id="014642"><span class="nick" style="color:#2e2a4a"><a href="#014642" label="[01:46:42]">&lt;fossy&gt;</a></span><span class="message">(so it dosen't depend on make).</span></div><div class="line" id="014918"><span class="nick" style="color:#2e2a4a"><a href="#014918" label="[01:49:18]">&lt;fossy&gt;</a></span><span class="message">So, 1. Mes C library in M2-Planet. 2. TinyCC in M2-Planet. 3. Coreutils scripted build in kaem, ideally without need for configure script (because it is a 40k line configure script with many strange shell functions that I couldnt even do with gash, had to do bash first). All that would need to be generated there would be config.h. Then we can compile bash 2.09b and have a proper sh.</span></div><div class="line" id="014950"><span class="nick" style="color:#2e2a4a"><a href="#014950" label="[01:49:50]">&lt;fossy&gt;</a></span><span class="message">That would need to be scripted without make too.</span></div><div class="line" id="015016"><span class="nick" style="color:#2e2a4a"><a href="#015016" label="[01:50:16]">&lt;fossy&gt;</a></span><span class="message">I don't feel like getting kaem into a state to run these stupid configure scripts is very dobale for me without a ton of work. I reckon it would take me at least 12 months.</span></div><div class="line" id="015021"><span class="nick" style="color:#2e2a4a"><a href="#015021" label="[01:50:21]">&lt;fossy&gt;</a></span><span class="message">9-12</span></div><div class="line" id="015034"><span class="nick" style="color:#8dd3c7"><a href="#015034" label="[01:50:34]">&lt;OriansJ&gt;</a></span><span class="message">fossy: because getting a proper assembler and linker will make the work considerably easier</span></div><div class="line" id="015048"><span class="nick" style="color:#2e2a4a"><a href="#015048" label="[01:50:48]">&lt;fossy&gt;</a></span><span class="message">(sorry for the brain dump)</span></div><div class="line" id="015051"><span class="nick" style="color:#2e2a4a"><a href="#015051" label="[01:50:51]">&lt;fossy&gt;</a></span><span class="message">True</span></div><div class="line" id="015118"><span class="nick" style="color:#8dd3c7"><a href="#015118" label="[01:51:18]">&lt;OriansJ&gt;</a></span><span class="message">2) proper assembler and linkers make implementing specializers easier</span></div><div class="line" id="015156"><span class="nick" style="color:#8dd3c7"><a href="#015156" label="[01:51:56]">&lt;OriansJ&gt;</a></span><span class="message">3) specializers make porting to new architectures much faster and easier (GCC uses them to great effect)</span></div><div class="line" id="015204"><span class="nick" style="color:#2e2a4a"><a href="#015204" label="[01:52:04]">&lt;fossy&gt;</a></span><span class="message">what is a specializer?</span></div><div class="line" id="015250"><span class="nick" style="color:#8dd3c7"><a href="#015250" label="[01:52:50]">&lt;OriansJ&gt;</a></span><span class="message">They take the output generic assembly of a C compiler and specialize it to work on a target architecture.</span></div><div class="line" id="015300"><span class="nick" style="color:#2e2a4a"><a href="#015300" label="[01:53:00]">&lt;fossy&gt;</a></span><span class="message">Ahhh</span></div><div class="line" id="015339"><span class="nick" style="color:#8dd3c7"><a href="#015339" label="[01:53:39]">&lt;OriansJ&gt;</a></span><span class="message">So instead of the big messy logic in M2-Planet, a single generic assembly is output from the C compiler.</span></div><div class="line" id="015420"><span class="nick" style="color:#2e2a4a"><a href="#015420" label="[01:54:20]">&lt;fossy&gt;</a></span><span class="message">Because TinyCC is a mess, I wonder if older versions (less messy, less code) could be used?</span></div><div class="line" id="015448"><span class="nick" style="color:#2e2a4a"><a href="#015448" label="[01:54:48]">&lt;fossy&gt;</a></span><span class="message">MesCC uses 0.9.26 - the latest is 0.9.27.</span></div><div class="line" id="015449"><span class="nick" style="color:#8dd3c7"><a href="#015449" label="[01:54:49]">&lt;OriansJ&gt;</a></span><span class="message">Then I'll hard fork TCC into (lets just call it) M3-Star and convert it to use the new assembler/linker combo we find (or make) (lets just call it M3-moon)</span></div><div class="line" id="015504"><span class="nick" style="color:#2e2a4a"><a href="#015504" label="[01:55:04]">&lt;fossy&gt;</a></span><span class="message">OriansJ: I suggest we use 0.9.26 TCC or earlier</span></div><div class="line" id="015528"><span class="nick" style="color:#8dd3c7"><a href="#015528" label="[01:55:28]">&lt;OriansJ&gt;</a></span><span class="message">well converting TCC to output just generic assembly will significantly reduce the size of its code base</span></div><div class="line" id="015535"><span class="nick" style="color:#2e2a4a"><a href="#015535" label="[01:55:35]">&lt;fossy&gt;</a></span><span class="message">0.9.27 is significantly more complex, and 0.9.26 is the target MesCC uses currently.</span></div><div class="line" id="015538"><span class="nick" style="color:#2e2a4a"><a href="#015538" label="[01:55:38]">&lt;fossy&gt;</a></span><span class="message">True that</span></div><div class="line" id="015609"><span class="nick" style="color:#8dd3c7"><a href="#015609" label="[01:56:09]">&lt;OriansJ&gt;</a></span><span class="message">Specializers will embed only architecture specific translations</span></div><div class="line" id="015615"><span class="nick" style="color:#2e2a4a"><a href="#015615" label="[01:56:15]">&lt;fossy&gt;</a></span><span class="message">Well, have a think about it, if you want to go ahead with it</span></div><div class="line" id="015622"><span class="nick" style="color:#2e2a4a"><a href="#015622" label="[01:56:22]">&lt;fossy&gt;</a></span><span class="message">and if you do LMK if I can help</span></div><div class="line" id="015714"><span class="nick" style="color:#8dd3c7"><a href="#015714" label="[01:57:14]">&lt;OriansJ&gt;</a></span><span class="message">Well, I am going to have to do some testing to see how reasonable of a plan it is</span></div><div class="line" id="015733"><span class="nick" style="color:#2e2a4a"><a href="#015733" label="[01:57:33]">&lt;fossy&gt;</a></span><span class="message">mm</span></div><div class="line" id="015801"><span class="nick" style="color:#2e2a4a"><a href="#015801" label="[01:58:01]">&lt;fossy&gt;</a></span><span class="message">Let's call this idea the Scheme-less bootstrap :P</span></div><div class="line" id="015815"><span class="nick" style="color:#2e2a4a"><a href="#015815" label="[01:58:15]">&lt;fossy&gt;</a></span><span class="message">We had Scheme-only now we are thinking Scheme-less</span></div><div class="line" id="015901"><span class="nick" style="color:#2e2a4a"><a href="#015901" label="[01:59:01]">&lt;fossy&gt;</a></span><span class="message">also <a rel="nofollow" href="https://github.com/fosslinux/coreutils-5.0">https://github.com/fosslinux/coreutils-5.0</a> </span></div><div class="line" id="015930"><span class="nick" style="color:#8dd3c7"><a href="#015930" label="[01:59:30]">&lt;OriansJ&gt;</a></span><span class="message">just need to spot a good cross platform assembler/linker written in C</span></div><div class="line" id="020058"><span class="nick" style="color:#2e2a4a"><a href="#020058" label="[02:00:58]">&lt;fossy&gt;</a></span><span class="message">IMHO i think this is a plan that you will get more help on than Mes-M2, because there are no other programmers here that are so good at both M2-Planet C and Scheme, as well as interpreters.</span></div><div class="line" id="020222"><span class="nick" style="color:#8dd3c7"><a href="#020222" label="[02:02:22]">&lt;OriansJ&gt;</a></span><span class="message">well C programmers are alot easier to find than scheme programmers</span></div><div class="line" id="021706"><span class="nick" style="color:#6b8072"><a href="#021706" label="[02:17:06]">&lt;xentrac&gt;</a></span><span class="message">not sure the difference is very large if we're talking about good programmers</span></div><div class="line" id="021711"><span class="nick" style="color:#8dd3c7"><a href="#021711" label="[02:17:11]">&lt;OriansJ&gt;</a></span><span class="message">however dddddd is going great work in M2-Planet and scheme</span></div><div class="line" id="021800"><span class="nick" style="color:#8dd3c7"><a href="#021800" label="[02:18:00]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: actually not just good programmers but also programmers willing to work on bootstrapping work. It is a very small population.</span></div><div class="line" id="021812"><span class="nick" style="color:#6b8072"><a href="#021812" label="[02:18:12]">&lt;xentrac&gt;</a></span><span class="message">very small, yes</span></div><div class="line" id="021820"><span class="nick" style="color:#6b8072"><a href="#021820" label="[02:18:20]">&lt;xentrac&gt;</a></span><span class="message">and rather Scheme-heavy, it seems</span></div><div class="line" id="021820"><span class="nick" style="color:#8dd3c7"><a href="#021820" label="[02:18:20]">&lt;OriansJ&gt;</a></span><span class="message">basically a subset of the people here.</span></div><div class="line" id="021833"><span class="nick" style="color:#6b8072"><a href="#021833" label="[02:18:33]">&lt;xentrac&gt;</a></span><span class="message">I think there are a few others</span></div><div class="line" id="021848"><span class="nick" style="color:#8dd3c7"><a href="#021848" label="[02:18:48]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: possibly but we would need to find them</span></div><div class="line" id="021938"><span class="nick" style="color:#8dd3c7"><a href="#021938" label="[02:19:38]">&lt;OriansJ&gt;</a></span><span class="message">however getting 2 people to work on a scheme interpreter at the same time is a much harder problem than getting 2+ people working on a C compiler at the same time.</span></div><div class="line" id="022348"><span class="nick" style="color:#6b8072"><a href="#022348" label="[02:23:48]">&lt;xentrac&gt;</a></span><span class="message">surely</span></div><div class="line" id="022643"><span class="nick" style="color:#2e2a4a"><a href="#022643" label="[02:26:43]">&lt;fossy&gt;</a></span><span class="message">oh, yeah dddddd is great at both too</span></div><div class="line" id="022720"><span class="nick" style="color:#2e2a4a"><a href="#022720" label="[02:27:20]">&lt;fossy&gt;</a></span><span class="message">xentrac: I mean those that are well versed in both</span></div><div class="line" id="024110"><span class="nick" style="color:#2e2a4a"><a href="#024110" label="[02:41:10]">&lt;fossy&gt;</a></span><span class="message">OriansJ: let me clarify your plan is to find/make a new assembler / linker and make tinycc use it?</span></div><div class="line" id="024121"><span class="nick" style="color:#2e2a4a"><a href="#024121" label="[02:41:21]">&lt;fossy&gt;</a></span><span class="message">as well as m2-planet?</span></div><div class="line" id="024132"><span class="nick" style="color:#2e2a4a"><a href="#024132" label="[02:41:32]">&lt;fossy&gt;</a></span><span class="message">porting mes c library and tinycc to m2-planet?</span></div><div class="line" id="024137"><span class="nick" style="color:#8dd3c7"><a href="#024137" label="[02:41:37]">&lt;OriansJ&gt;</a></span><span class="message">no, M2-Planet will freeze</span></div><div class="line" id="024151"><span class="nick" style="color:#2e2a4a"><a href="#024151" label="[02:41:51]">&lt;fossy&gt;</a></span><span class="message">oh</span></div><div class="line" id="024201"><span class="nick" style="color:#2e2a4a"><a href="#024201" label="[02:42:01]">&lt;fossy&gt;</a></span><span class="message">so m2-planet will be superseded by tinycc fork?</span></div><div class="line" id="024217"><span class="nick" style="color:#8dd3c7"><a href="#024217" label="[02:42:17]">&lt;OriansJ&gt;</a></span><span class="message">fossy: it'll become the step after M2-Planet in the bootstrap</span></div><div class="line" id="024231"><span class="nick" style="color:#2e2a4a"><a href="#024231" label="[02:42:31]">&lt;fossy&gt;</a></span><span class="message">ah</span></div><div class="line" id="024249"><span class="nick" style="color:#8dd3c7"><a href="#024249" label="[02:42:49]">&lt;OriansJ&gt;</a></span><span class="message">I can also remove it's need for a libc</span></div><div class="line" id="024250"><span class="nick" style="color:#2e2a4a"><a href="#024250" label="[02:42:50]">&lt;fossy&gt;</a></span><span class="message">so m2-planet will still exist in the bootstrap</span></div><div class="line" id="024312"><span class="nick" style="color:#2e2a4a"><a href="#024312" label="[02:43:12]">&lt;fossy&gt;</a></span><span class="message">hm. how</span></div><div class="line" id="024315"><span class="nick" style="color:#2e2a4a"><a href="#024315" label="[02:43:15]">&lt;fossy&gt;</a></span><span class="message">well</span></div><div class="line" id="024317"><span class="nick" style="color:#2e2a4a"><a href="#024317" label="[02:43:17]">&lt;fossy&gt;</a></span><span class="message">silly q</span></div><div class="line" id="024339"><span class="nick" style="color:#8dd3c7"><a href="#024339" label="[02:43:39]">&lt;OriansJ&gt;</a></span><span class="message">yep and the new M3-star will be able to build glibc and gcc directly</span></div><div class="line" id="024356"><span class="nick" style="color:#2e2a4a"><a href="#024356" label="[02:43:56]">&lt;fossy&gt;</a></span><span class="message">if you can remove the need for a libc that would work</span></div><div class="line" id="024412"><span class="nick" style="color:#2e2a4a"><a href="#024412" label="[02:44:12]">&lt;fossy&gt;</a></span><span class="message">OriansJ: not quite, mes c library would still be nessrcary</span></div><div class="line" id="024438"><span class="nick" style="color:#2e2a4a"><a href="#024438" label="[02:44:38]">&lt;fossy&gt;</a></span><span class="message">for things like bash and the like that we need before glibc and gcc</span></div><div class="line" id="024448"><span class="nick" style="color:#8dd3c7"><a href="#024448" label="[02:44:48]">&lt;OriansJ&gt;</a></span><span class="message">fossy: fine the libc would become a _start function and that is it</span></div><div class="line" id="024518"><span class="nick" style="color:#2e2a4a"><a href="#024518" label="[02:45:18]">&lt;fossy&gt;</a></span><span class="message">what would bash (for eg) use?</span></div><div class="line" id="024536"><span class="nick" style="color:#8dd3c7"><a href="#024536" label="[02:45:36]">&lt;OriansJ&gt;</a></span><span class="message">the glibc that M3-star would build</span></div><div class="line" id="024830"><span class="nick" style="color:#2e2a4a"><a href="#024830" label="[02:48:30]">&lt;fossy&gt;</a></span><span class="message">how do we build glibc though? we need things like make and coreutils for that which require a libc</span></div><div class="line" id="024853"><span class="nick" style="color:#8dd3c7"><a href="#024853" label="[02:48:53]">&lt;OriansJ&gt;</a></span><span class="message">xentrac: perhaps we should simply ask the question. Who here is willing to work on mes-m2 and who is willing to help on this currently discussed crazy plan of mine.</span></div><div class="line" id="024920"><span class="nick" style="color:#8dd3c7"><a href="#024920" label="[02:49:20]">&lt;OriansJ&gt;</a></span><span class="message">fossy: we simply figure out a single GCC command that could build glibc</span></div><div class="line" id="024946"><span class="nick" style="color:#2e2a4a"><a href="#024946" label="[02:49:46]">&lt;fossy&gt;</a></span><span class="message">hm that would probably work</span></div><div class="line" id="024946"><span class="nick" style="color:#8dd3c7"><a href="#024946" label="[02:49:46]">&lt;OriansJ&gt;</a></span><span class="message">no need for make or coreutils if we know exactly how to compile something</span></div><div class="line" id="025012"><span class="nick" style="color:#2e2a4a"><a href="#025012" label="[02:50:12]">&lt;fossy&gt;</a></span><span class="message">I think it would probably have to be multiple commands but still we can script it up without configure or make</span></div><div class="line" id="025037"><span class="nick" style="color:#8dd3c7"><a href="#025037" label="[02:50:37]">&lt;OriansJ&gt;</a></span><span class="message">fossy: and kaem can handle that with ease</span></div><div class="line" id="025047"><span class="nick" style="color:#2e2a4a"><a href="#025047" label="[02:50:47]">&lt;fossy&gt;</a></span><span class="message">personally my skills are more tuned to the latter, the currently discussed crazy plan</span></div><div class="line" id="025110"><span class="nick" style="color:#2e2a4a"><a href="#025110" label="[02:51:10]">&lt;fossy&gt;</a></span><span class="message">OriansJ: yes</span></div><div class="line" id="025110"><span class="nick" style="color:#2e2a4a"><a href="#025110" label="[02:51:10]">&lt;fossy&gt;</a></span><span class="message">as long as we dont use configure :p</span></div><div class="line" id="025135"><span class="nick" style="color:#2e2a4a"><a href="#025135" label="[02:51:35]">&lt;fossy&gt;</a></span><span class="message">and then from the scripted builds of gcc, glibc, make and bash we can go on rather easily</span></div><div class="line" id="025138"><span class="nick" style="color:#8dd3c7"><a href="#025138" label="[02:51:38]">&lt;OriansJ&gt;</a></span><span class="message">fossy: what next requiring autotools to build a bootstrap piece?</span></div><div class="line" id="025153"><span class="nick" style="color:#2e2a4a"><a href="#025153" label="[02:51:53]">&lt;fossy&gt;</a></span><span class="message">OriansJ: how do you mean?</span></div><div class="line" id="025215"><span class="nick" style="color:#2e2a4a"><a href="#025215" label="[02:52:15]">&lt;fossy&gt;</a></span><span class="message">all I mean is that I dont think its feasible for kaem to run configure scripts</span></div><div class="line" id="025232"><span class="nick" style="color:#8dd3c7"><a href="#025232" label="[02:52:32]">&lt;OriansJ&gt;</a></span><span class="message">fossy: small joke. Because we are bootstrapping, we can control everything and require no build tools beyound kaem</span></div><div class="line" id="025251"><span class="nick" style="color:#2e2a4a"><a href="#025251" label="[02:52:51]">&lt;fossy&gt;</a></span><span class="message">yep!</span></div><div class="line" id="025309"><span class="nick" style="color:#8dd3c7"><a href="#025309" label="[02:53:09]">&lt;OriansJ&gt;</a></span><span class="message">instead of using configure to figure out what we have, we already know because we put it there</span></div><div class="line" id="025316"><span class="nick" style="color:#2e2a4a"><a href="#025316" label="[02:53:16]">&lt;fossy&gt;</a></span><span class="message">exactly</span></div><div class="line" id="025337"><span class="nick" style="color:#8dd3c7"><a href="#025337" label="[02:53:37]">&lt;OriansJ&gt;</a></span><span class="message">don't even need make</span></div><div class="line" id="025415"><span class="nick" style="color:#2e2a4a"><a href="#025415" label="[02:54:15]">&lt;fossy&gt;</a></span><span class="message">for the first gcc and glibc thats right we dont</span></div><div class="line" id="025432"><span class="nick" style="color:#2e2a4a"><a href="#025432" label="[02:54:32]">&lt;fossy&gt;</a></span><span class="message">for later stages its probably better, so we can avoid scripting every build</span></div><div class="line" id="025447"><span class="nick" style="color:#8dd3c7"><a href="#025447" label="[02:54:47]">&lt;OriansJ&gt;</a></span><span class="message">fossy: fair</span></div><div class="line" id="025747"><span class="nick" style="color:#8dd3c7"><a href="#025747" label="[02:57:47]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: your thoughts?</span></div><div class="line" id="025749"><span class="nick" style="color:#2e2a4a"><a href="#025749" label="[02:57:49]">&lt;fossy&gt;</a></span><span class="message">Before you  commit to this plan carefully think of the alternative mes m2. How much work would we need to do to get it to run mescc?</span></div><div class="line" id="025818"><span class="nick" style="color:#80b1d3"><a href="#025818" label="[02:58:18]">&lt;dddddd&gt;</a></span><span class="message">hi! I'm just finishing the long and wildy insteresting log (:</span></div><div class="line" id="025824"><span class="nick" style="color:#2e2a4a"><a href="#025824" label="[02:58:24]">&lt;fossy&gt;</a></span><span class="message">hehe</span></div><div class="line" id="025902"><span class="nick" style="color:#80b1d3"><a href="#025902" label="[02:59:02]">&lt;dddddd&gt;</a></span><span class="message">First of all, thanks for the kind words (I'm not that well versed in anything but it seems I can fake it :P).</span></div><div class="line" id="030119"><span class="nick" style="color:#8dd3c7"><a href="#030119" label="[03:01:19]">&lt;OriansJ&gt;</a></span><span class="message">fossy: well thus far janneke estimated it'll take several months before mes-m2 is ready to run MesCC.</span></div><div class="line" id="030144"><span class="nick" style="color:#80b1d3"><a href="#030144" label="[03:01:44]">&lt;dddddd&gt;</a></span><span class="message">I'm +1 on a C path. I was willing to work on mes-m2 because that seemed the current and most important plan; but if the new season is about C, so it be!</span></div><div class="line" id="030148"><span class="nick" style="color:#8dd3c7"><a href="#030148" label="[03:01:48]">&lt;OriansJ&gt;</a></span><span class="message">considerable more work to be able to bootstrap guile and guix</span></div><div class="line" id="030316"><span class="nick" style="color:#80b1d3"><a href="#030316" label="[03:03:16]">&lt;dddddd&gt;</a></span><span class="message">I still have to digest the details, one read is not enough.</span></div><div class="line" id="030458"><span class="nick" style="color:#2e2a4a"><a href="#030458" label="[03:04:58]">&lt;fossy&gt;</a></span><span class="message">same, I have a vague understanding of the idea but not quite up to speed.</span></div><div class="line" id="030504"><span class="nick" style="color:#2e2a4a"><a href="#030504" label="[03:05:04]">&lt;fossy&gt;</a></span><span class="message">OriansJ: hm.</span></div><div class="line" id="030519"><span class="nick" style="color:#2e2a4a"><a href="#030519" label="[03:05:19]">&lt;fossy&gt;</a></span><span class="message">I vote for c path in that caee</span></div><div class="line" id="030622"><span class="nick" style="color:#80b1d3"><a href="#030622" label="[03:06:22]">&lt;dddddd&gt;</a></span><span class="message">IR instead of the M2-Planet conditional maze sounds great.</span></div><div class="line" id="030835"><span class="nick" style="color:#8dd3c7"><a href="#030835" label="[03:08:35]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: and if we find simple core versions of specializers, we can backport them to M2-Planet/cc_*.s</span></div><div class="line" id="030854"><span class="nick" style="color:#2e2a4a"><a href="#030854" label="[03:08:54]">&lt;fossy&gt;</a></span><span class="message">M3-moon is the name?</span></div><div class="line" id="030911"><span class="nick" style="color:#8dd3c7"><a href="#030911" label="[03:09:11]">&lt;OriansJ&gt;</a></span><span class="message">M3-moon for the assembler/linker and M3-Star for the C compiler work</span></div><div class="line" id="030915"><span class="nick" style="color:#2e2a4a"><a href="#030915" label="[03:09:15]">&lt;fossy&gt;</a></span><span class="message">Cool</span></div><div class="line" id="030931"><span class="nick" style="color:#8dd3c7"><a href="#030931" label="[03:09:31]">&lt;OriansJ&gt;</a></span><span class="message">as the assembler/linker should be smaller than M2-Planet</span></div><div class="line" id="030946"><span class="nick" style="color:#8dd3c7"><a href="#030946" label="[03:09:46]">&lt;OriansJ&gt;</a></span><span class="message">and The C compiler should be much larger than M2-Planet</span></div><div class="line" id="031028"><span class="nick" style="color:#80b1d3"><a href="#031028" label="[03:10:28]">&lt;dddddd&gt;</a></span><span class="message">By M2-Planet freeze you mean only new archs (and no more features, as in no v2.0 that was on the table), right?</span></div><div class="line" id="031104"><span class="nick" style="color:#8dd3c7"><a href="#031104" label="[03:11:04]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: yes as M3-Star would be taking the place of a the future v2.x M2-Planet</span></div><div class="line" id="031107"><span class="nick" style="color:#80b1d3"><a href="#031107" label="[03:11:07]">&lt;dddddd&gt;</a></span><span class="message">nitpicking as usual: why moon (lower case) and Star (upper)!?</span></div><div class="line" id="031126"><span class="nick" style="color:#8dd3c7"><a href="#031126" label="[03:11:26]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: was just typing quickly</span></div><div class="line" id="031143"><span class="nick" style="color:#8dd3c7"><a href="#031143" label="[03:11:43]">&lt;OriansJ&gt;</a></span><span class="message">it'll be M3-Moon to match the naming standard of M2-Planet</span></div><div class="line" id="031156"><span class="nick" style="color:#2e2a4a"><a href="#031156" label="[03:11:56]">&lt;fossy&gt;</a></span><span class="message">:)</span></div><div class="line" id="031318"><span class="nick" style="color:#2e2a4a"><a href="#031318" label="[03:13:18]">&lt;fossy&gt;</a></span><span class="message">So, if we go ahead, I will continue to build gcc-seed as if tinycc and mescc was going to be M3-Star</span></div><div class="line" id="031328"><span class="nick" style="color:#2e2a4a"><a href="#031328" label="[03:13:28]">&lt;fossy&gt;</a></span><span class="message">Including scripted builds</span></div><div class="line" id="031700"><span class="nick" style="color:#80b1d3"><a href="#031700" label="[03:17:00]">&lt;dddddd&gt;</a></span><span class="message">The metaphor of the sizes is kind of nice but a bit confusing, as the moon seems to go with the planet (not with the star). We can use those term as working names for now but I think we need to find something else, long term.</span></div><div class="line" id="031712"><span class="nick" style="color:#80b1d3"><a href="#031712" label="[03:17:12]">&lt;dddddd&gt;</a></span><span class="message">*terms</span></div><div class="line" id="031750"><span class="nick" style="color:#6d2462"><a href="#031750" label="[03:17:50]">*</a></span><span class="message">dddddd ends the bikeshedding</span></div><div class="line" id="031916"><span class="nick" style="color:#2e2a4a"><a href="#031916" label="[03:19:16]">&lt;fossy&gt;</a></span><span class="message">M3-Star, M3-Galaxy?</span></div><div class="line" id="031918"><span class="nick" style="color:#2e2a4a"><a href="#031918" label="[03:19:18]">&lt;fossy&gt;</a></span><span class="message">idk</span></div><div class="line" id="031936"><span class="nick" style="color:#8dd3c7"><a href="#031936" label="[03:19:36]">&lt;OriansJ&gt;</a></span><span class="message">fossy: well in gcc-seed, essentially it would be like a statically built TCC appeared right after M2-Planet</span></div><div class="line" id="032003"><span class="nick" style="color:#8dd3c7"><a href="#032003" label="[03:20:03]">&lt;OriansJ&gt;</a></span><span class="message">M3-Comet?</span></div><div class="line" id="032023"><span class="nick" style="color:#8dd3c7"><a href="#032023" label="[03:20:23]">&lt;OriansJ&gt;</a></span><span class="message">smaller than planet but orbits the Star</span></div><div class="line" id="032408"><span class="nick" style="color:#8dd3c7"><a href="#032408" label="[03:24:08]">&lt;OriansJ&gt;</a></span><span class="message">although before we can go that route dddddd will probably need to do a slow-utils release for janneke so that guix can reduce down to just guile.</span></div><div class="line" id="032810"><span class="nick" style="color:#80b1d3"><a href="#032810" label="[03:28:10]">&lt;dddddd&gt;</a></span><span class="message">sure, M1.scm goes first from my side, parallel thinking about the new universe objects notwithstanding (;</span></div><div class="line" id="033202"><span class="nick" style="color:#80b1d3"><a href="#033202" label="[03:32:02]">&lt;dddddd&gt;</a></span><span class="message">To be honest, I didn't look at the rest of the pieces (blood-elf.scm, hex2.scm) but I guess there's at least some clean-up to do (maybe post-release). Are those working as intended, OriansJ?</span></div><div class="line" id="033633"><span class="nick" style="color:#2e2a4a"><a href="#033633" label="[03:36:33]">&lt;fossy&gt;</a></span><span class="message">OriansJ: yep</span></div><div class="line" id="033708"><span class="nick" style="color:#2e2a4a"><a href="#033708" label="[03:37:08]">&lt;fossy&gt;</a></span><span class="message">and then statically built gcc and glibc straight after that</span></div><div class="line" id="033805"><span class="nick" style="color:#2e2a4a"><a href="#033805" label="[03:38:05]">&lt;fossy&gt;</a></span><span class="message">OriansJ: wait, what libc will gcc use, since currently glibc is build with gcc</span></div><div class="line" id="034622"><span class="nick" style="color:#8dd3c7"><a href="#034622" label="[03:46:22]">&lt;OriansJ&gt;</a></span><span class="message">dddddd: they are working good enough to give janneke what he needs, there however are things that could be improved in them.</span></div><div class="line" id="034730"><span class="nick" style="color:#8dd3c7"><a href="#034730" label="[03:47:30]">&lt;OriansJ&gt;</a></span><span class="message">fossy: good question, let me think about that.</span></div><div class="line" id="034932"><span class="nick" style="color:#8dd3c7"><a href="#034932" label="[03:49:32]">&lt;OriansJ&gt;</a></span><span class="message">as we need to know what libcs that TCC can build</span></div><div class="line" id="035009"><span class="nick" style="color:#8dd3c7"><a href="#035009" label="[03:50:09]">&lt;OriansJ&gt;</a></span><span class="message">and depending on which one we find, could we eliminate steps in the GCC bootstrap</span></div><div class="line" id="035609"><span class="nick" style="color:#2e2a4a"><a href="#035609" label="[03:56:09]">&lt;fossy&gt;</a></span><span class="message">OriansJ: yes and yes</span></div><div class="line" id="035634"><span class="nick" style="color:#2e2a4a"><a href="#035634" label="[03:56:34]">&lt;fossy&gt;</a></span><span class="message">I think we could potentially look at for the time being using an earlier verison of glibc</span></div><div class="line" id="035642"><span class="nick" style="color:#2e2a4a"><a href="#035642" label="[03:56:42]">&lt;fossy&gt;</a></span><span class="message">I shall investigate</span></div><div class="line" id="040122"><span class="nick" style="color:#8dd3c7"><a href="#040122" label="[04:01:22]">&lt;OriansJ&gt;</a></span><span class="message">thank you fossy for looking into that for me; but do try to find the most maintained libc that TCC can compile. It'll save us effort long term.</span></div><div class="line" id="041106"><span class="nick" style="color:#2e2a4a"><a href="#041106" label="[04:11:06]">&lt;fossy&gt;</a></span><span class="message">Yeah</span></div><div class="line" id="041109"><span class="nick" style="color:#2e2a4a"><a href="#041109" label="[04:11:09]">&lt;fossy&gt;</a></span><span class="message">Maybe musl?</span></div><div class="line" id="041118"><span class="nick" style="color:#2e2a4a"><a href="#041118" label="[04:11:18]">&lt;fossy&gt;</a></span><span class="message">idk</span></div><div class="line" id="041122"><span class="nick" style="color:#2e2a4a"><a href="#041122" label="[04:11:22]">&lt;fossy&gt;</a></span><span class="message">there's quite a few libcs out there</span></div><div class="line" id="043337"><span class="nick" style="color:#8dd3c7"><a href="#043337" label="[04:33:37]">&lt;OriansJ&gt;</a></span><span class="message">fossy: lets first find the ones being actively developed, check against tcc. then we can filter down to the best option for us based on the number of active developers and how willing they are to assist in the bootstrap effort.</span></div><div class="line" id="043452"><span class="nick" style="color:#2e2a4a"><a href="#043452" label="[04:34:52]">&lt;fossy&gt;</a></span><span class="message">had another thought... won't most libcs require a libc to start off with</span></div><div class="line" id="043729"><span class="nick" style="color:#8dd3c7"><a href="#043729" label="[04:37:29]">&lt;OriansJ&gt;</a></span><span class="message">fossy: we are just going to hit that bridge when we get to it</span></div><div class="line" id="043917"><span class="nick" style="color:#8dd3c7"><a href="#043917" label="[04:39:17]">&lt;OriansJ&gt;</a></span><span class="message">I can break alot of bootstrapping loops   when I need to but let us hope that libc developers are not completely insane in regards to bootstrapping.</span></div><div class="line" id="044143"><span class="nick" style="color:#2e2a4a"><a href="#044143" label="[04:41:43]">&lt;fossy&gt;</a></span><span class="message">janneke: is this true of glibc</span></div><div class="line" id="071647"><span class="nick" style="color:#234e69"><a href="#071647" label="[07:16:47]">&lt;janneke&gt;</a></span><span class="message">fossy: define &quot;need&quot; :-)</span></div><div class="line" id="071746"><span class="nick" style="color:#234e69"><a href="#071746" label="[07:17:46]">&lt;janneke&gt;</a></span><span class="message">there are loops everywhere, you need to pick a path and make it work</span></div><div class="line" id="072829"><span class="nick" style="color:#2e2a4a"><a href="#072829" label="[07:28:29]">&lt;fossy&gt;</a></span><span class="message">janneke: in the current bootstrap path glibc needs mes c library right</span></div><div class="line" id="073206"><span class="nick" style="color:#234e69"><a href="#073206" label="[07:32:06]">&lt;janneke&gt;</a></span><span class="message">fossy: that statement is very strong and non-specific; if i were to say: in the current bootstrap we build mes c library long before we build glibc; then yes that's true</span></div><div class="line" id="073253"><span class="nick" style="color:#234e69"><a href="#073253" label="[07:32:53]">&lt;janneke&gt;</a></span><span class="message">tcc does not run without mes c lib, so ... i don't eacctly know what the dependencies are after that</span></div><div class="line" id="073337"><span class="nick" style="color:#234e69"><a href="#073337" label="[07:33:37]">&lt;janneke&gt;</a></span><span class="message">i split the mes c library in 4 parts: mini, mes, tcc and gnu</span></div><div class="line" id="073425"><span class="nick" style="color:#234e69"><a href="#073425" label="[07:34:25]">&lt;janneke&gt;</a></span><span class="message">i was expecting OriansJ to add one split for M2</span></div><div class="line" id="073459"><span class="nick" style="color:#234e69"><a href="#073459" label="[07:34:59]">&lt;janneke&gt;</a></span><span class="message">tcc needs, obviously, only the tcc variant of mes c lib</span></div><div class="line" id="075846"><span class="nick" style="color:#2e2a4a"><a href="#075846" label="[07:58:46]">&lt;fossy&gt;</a></span><span class="message">ahha</span></div><div class="line" id="082038"><span class="nick" style="color:#234e69"><a href="#082038" label="[08:20:38]">&lt;janneke&gt;</a></span><span class="message">and different historical version of TAR have different requirements on the `gnu' variant of mes c lib</span></div><div class="line" id="082058"><span class="nick" style="color:#234e69"><a href="#082058" label="[08:20:58]">&lt;janneke&gt;</a></span><span class="message">but, now we have tar form gash utils</span></div><div class="line" id="082125"><span class="nick" style="color:#234e69"><a href="#082125" label="[08:21:25]">&lt;janneke&gt;</a></span><span class="message">so, we're really finding new paths</span></div><div class="line" id="082134"><span class="nick" style="color:#234e69"><a href="#082134" label="[08:21:34]">&lt;janneke&gt;</a></span><span class="message">who knows how simple it can get?</span></div><div class="line" id="085645"><span class="nick" style="color:#6c3d55"><a href="#085645" label="[08:56:45]">&lt;damo22&gt;</a></span><span class="message">ideally id like to burn a couple of trusted binaries into my bios and use those to bootstrap my system in an 'emergency'</span></div><div class="line" id="090439"><span class="nick" style="color:#6c3d55"><a href="#090439" label="[09:04:39]">&lt;damo22&gt;</a></span><span class="message">i think baking them in to the firmware and being able to reproducibly build them later solves the initial bootstrap chicken/egg problem</span></div><div class="line" id="121110"><span class="nick">***</span><span class="message notice">jelle is now known as jly</span></div><div class="line" id="121114"><span class="nick">***</span><span class="message notice">jly is now known as jelle</span></div><div class="line" id="125149"><span class="nick">***</span><span class="message notice">ChanServ sets mode: +o rekado_</span></div><div class="line" id="125152"><span class="nick">***</span><span class="message notice">rekado_ is now known as rekado</span></div><div class="line" id="133110"><span class="nick">***</span><span class="message notice">reepca` is now known as reepca</span></div><div class="line" id="133338"><span class="nick" style="color:#d9d9d9"><a href="#133338" label="[13:33:38]">&lt;bauen1&gt;</a></span><span class="message">before i start porting a libc to my kernel, are there any better options ?</span></div><div class="line" id="133349"><span class="nick" style="color:#d9d9d9"><a href="#133349" label="[13:33:49]">&lt;bauen1&gt;</a></span><span class="message">my current plan would be to port musl</span></div><div class="line" id="133418"><span class="nick" style="color:#d9d9d9"><a href="#133418" label="[13:34:18]">&lt;bauen1&gt;</a></span><span class="message">while musl is linux-only it is quite complete and also quite easy to port</span></div><div class="line" id="133547"><span class="nick" style="color:#d9d9d9"><a href="#133547" label="[13:35:47]">&lt;bauen1&gt;</a></span><span class="message">for the first iteration of myunix i actually went and used newlib, but it turns out newlib doesn't really follow the standard closely and it's a mess to port</span></div><div class="line" id="134405"><span class="nick" style="color:#234e69"><a href="#134405" label="[13:44:05]">&lt;janneke&gt;</a></span><span class="message">(tongue in cheeck) we all write our own libc's here ;-)</span></div><div class="line" id="134546"><span class="nick" style="color:#d9d9d9"><a href="#134546" label="[13:45:46]">&lt;bauen1&gt;</a></span><span class="message">lol writing a somwhat standards confomring libc is a project bigger than writing a kernel ...</span></div><div class="line" id="135719"><span class="nick" style="color:#234e69"><a href="#135719" label="[13:57:19]">&lt;janneke&gt;</a></span><span class="message">haha, some of us care more about staying close to the posix/libc alphabet than others, but many of us had to prioritize bootstrappability over compliance/comformance</span></div><div class="line" id="140957"><span class="nick" style="color:#234e69"><a href="#140957" label="[14:09:57]">&lt;janneke&gt;</a></span><span class="message">bauen1: for example, the mes c library can be built in a 'mini' variant, that has only crt1, write and exit</span></div><div class="line" id="142306"><span class="nick">***</span><span class="message notice">vup2 is now known as vup</span></div><div class="line" id="174746"><span class="nick">***</span><span class="message notice">warren_ is now known as warren</span></div><div class="line" id="214743"><span class="nick">***</span><span class="message notice">main1 is now known as main</span></div><br /></div></body></html>